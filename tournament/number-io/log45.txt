Command line args: clojush.problems.software.number-io :parent-selection :tournament :print-timings true
######################################
Parameters set at command line or in problem file argmap; may or may not be default:
alignment-deviation = 5
alternation-rate = 0.01
atom-generators = (#object[clojush.problems.software.number_io$fn__6694 0x2beee3e8 clojush.problems.software.number_io$fn__6694@2beee3e8] #object[clojush.problems.software.number_io$fn__6696 0x58bad46f clojush.problems.software.number_io$fn__6696@58bad46f] #object[clojush.instructions.tag$tag_instruction_erc$fn__1963 0x20231384 clojush.instructions.tag$tag_instruction_erc$fn__1963@20231384] #object[clojush.instructions.tag$tagged_instruction_erc$fn__1969 0x35becbd4 clojush.instructions.tag$tagged_instruction_erc$fn__1969@35becbd4] in1 in2 print_newline integer_sub integer_inc integer_yankdup integer_mult float_sin float_frominteger float_mod integer_div integer_fromfloat integer_mod integer_rot float_yankdup integer_add integer_shove integer_max integer_stackdepth float_max float_dup_items float_stackdepth integer_dup_times integer_yank integer_min integer_dup_items print_integer print_float integer_flush float_shove float_pop float_sub float_min float_mult float_dec float_add float_dup float_swap integer_swap integer_dup float_tan integer_pop float_dup_times float_inc integer_dec float_rot float_flush float_cos float_div float_yank)
epigenetic-markers = []
error-function = #object[clojush.problems.software.number_io$make_number_io_error_function_from_cases$the_actual_num_io_error_function__6704 0x342723a3 clojush.problems.software.number_io$make_number_io_error_function_from_cases$the_actual_num_io_error_function__6704@342723a3]
error-threshold = 1.0E-4
evalpush-limit = 200
final-report-simplifications = 5000
genetic-operator-probabilities = {:alternation 0.3, :uniform-mutation 0.2, [:alternation :uniform-mutation] 0.5}
max-error = 5000
max-generations = 200
max-genome-size-in-initial-program = 100
max-points = 800
parent-selection = :tournament
population-size = 1000
print-timings = true
problem-specific-initial-report = #object[clojush.problems.software.number_io$number_io_initial_report 0x4ec427 clojush.problems.software.number_io$number_io_initial_report@4ec427]
problem-specific-report = #object[clojush.problems.software.number_io$num_io_report 0xfde487b clojush.problems.software.number_io$num_io_report@fde487b]
report-simplifications = 0
uniform-mutation-rate = 0.01
######################################
Train and test cases:
Train Case:   0 | Input/Output: [[16.54405776894035 -74] -57.45594223105965]
Train Case:   1 | Input/Output: [[-6.0754923621351224 -65] -71.07549236213512]
Train Case:   2 | Input/Output: [[10.482370444293494 -77] -66.5176295557065]
Train Case:   3 | Input/Output: [[63.318737800018 86] 149.318737800018]
Train Case:   4 | Input/Output: [[46.45495064746436 -83] -36.54504935253564]
Train Case:   5 | Input/Output: [[27.402192809699045 48] 75.40219280969905]
Train Case:   6 | Input/Output: [[-21.738407013308432 74] 52.26159298669157]
Train Case:   7 | Input/Output: [[-62.21783674341468 43] -19.21783674341468]
Train Case:   8 | Input/Output: [[65.75189067720808 1] 66.75189067720808]
Train Case:   9 | Input/Output: [[-19.326394558995204 27] 7.673605441004796]
Train Case:  10 | Input/Output: [[-66.3705968318471 90] 23.629403168152905]
Train Case:  11 | Input/Output: [[-44.13890334331341 38] -6.138903343313409]
Train Case:  12 | Input/Output: [[91.25163668160403 -82] 9.251636681604026]
Train Case:  13 | Input/Output: [[86.32517762665375 -55] 31.325177626653755]
Train Case:  14 | Input/Output: [[73.37464964083645 0] 73.37464964083645]
Train Case:  15 | Input/Output: [[39.05005533357277 -19] 20.05005533357277]
Train Case:  16 | Input/Output: [[-55.282069749823904 32] -23.282069749823904]
Train Case:  17 | Input/Output: [[90.1004999359221 30] 120.1004999359221]
Train Case:  18 | Input/Output: [[-57.453212394988974 -98] -155.45321239498898]
Train Case:  19 | Input/Output: [[21.103015759972735 10] 31.103015759972735]
Train Case:  20 | Input/Output: [[84.5733057121013 -39] 45.5733057121013]
Train Case:  21 | Input/Output: [[9.407216355044895 -78] -68.5927836449551]
Train Case:  22 | Input/Output: [[-55.97939202304112 -70] -125.97939202304113]
Train Case:  23 | Input/Output: [[-20.927364914817815 -71] -91.92736491481782]
Train Case:  24 | Input/Output: [[-43.56606072670417 -49] -92.56606072670417]
Test Case:   0 | Input/Output: [[-57.472567132897524 -26] -83.47256713289752]
Test Case:   1 | Input/Output: [[-7.563132863728711 -3] -10.563132863728711]
Test Case:   2 | Input/Output: [[-94.92163372449185 -78] -172.92163372449187]
Test Case:   3 | Input/Output: [[74.27618637934802 -5] 69.27618637934802]
Test Case:   4 | Input/Output: [[-11.88814692664792 75] 63.11185307335208]
Test Case:   5 | Input/Output: [[-87.63243579796463 -49] -136.63243579796463]
Test Case:   6 | Input/Output: [[49.12603495649 38] 87.12603495649]
Test Case:   7 | Input/Output: [[-23.238675579218594 -18] -41.238675579218594]
Test Case:   8 | Input/Output: [[44.01226631574741 -71] -26.98773368425259]
Test Case:   9 | Input/Output: [[-24.299236611168823 -28] -52.29923661116882]
Test Case:  10 | Input/Output: [[50.253697441253195 27] 77.2536974412532]
Test Case:  11 | Input/Output: [[50.081983290075726 30] 80.08198329007573]
Test Case:  12 | Input/Output: [[35.230454573827245 73] 108.23045457382725]
Test Case:  13 | Input/Output: [[-26.754183730270938 59] 32.24581626972906]
Test Case:  14 | Input/Output: [[-0.6002220825864981 -67] -67.6002220825865]
Test Case:  15 | Input/Output: [[-78.9441319170368 -92] -170.9441319170368]
Test Case:  16 | Input/Output: [[-27.398021810897717 49] 21.601978189102283]
Test Case:  17 | Input/Output: [[-14.41010322237095 100] 85.58989677762905]
Test Case:  18 | Input/Output: [[-77.78888130751058 -13] -90.78888130751058]
Test Case:  19 | Input/Output: [[-8.737405548340462 -19] -27.737405548340462]
Test Case:  20 | Input/Output: [[-16.98630135842521 62] 45.01369864157479]
Test Case:  21 | Input/Output: [[89.23465339632756 36] 125.23465339632756]
Test Case:  22 | Input/Output: [[-57.57324023632644 37] -20.57324023632644]
Test Case:  23 | Input/Output: [[-39.64292778541043 81] 41.35707221458957]
Test Case:  24 | Input/Output: [[77.40181171251851 -46] 31.40181171251851]
Test Case:  25 | Input/Output: [[-60.75752853296177 52] -8.757528532961771]
Test Case:  26 | Input/Output: [[-46.60991022209204 -56] -102.60991022209204]
Test Case:  27 | Input/Output: [[-54.43994864579482 11] -43.43994864579482]
Test Case:  28 | Input/Output: [[56.94973288362527 -67] -10.050267116374727]
Test Case:  29 | Input/Output: [[89.65918341277441 67] 156.6591834127744]
Test Case:  30 | Input/Output: [[-47.47895657578711 12] -35.47895657578711]
Test Case:  31 | Input/Output: [[97.86792999108442 66] 163.86792999108442]
Test Case:  32 | Input/Output: [[-86.9982771043245 99] 12.001722895675499]
Test Case:  33 | Input/Output: [[51.80545410687475 -51] 0.8054541068747483]
Test Case:  34 | Input/Output: [[80.22107747437494 -19] 61.22107747437494]
Test Case:  35 | Input/Output: [[6.474633011351045 91] 97.47463301135105]
Test Case:  36 | Input/Output: [[12.617844569552702 -43] -30.3821554304473]
Test Case:  37 | Input/Output: [[-67.57887749995581 1] -66.57887749995581]
Test Case:  38 | Input/Output: [[8.799955568562083 27] 35.79995556856208]
Test Case:  39 | Input/Output: [[85.71585763382984 40] 125.71585763382984]
Test Case:  40 | Input/Output: [[59.323724391681395 77] 136.3237243916814]
Test Case:  41 | Input/Output: [[-66.53937815842501 3] -63.53937815842501]
Test Case:  42 | Input/Output: [[85.78587675319926 -35] 50.78587675319926]
Test Case:  43 | Input/Output: [[41.445660390280295 90] 131.4456603902803]
Test Case:  44 | Input/Output: [[-37.42150798654187 63] 25.57849201345813]
Test Case:  45 | Input/Output: [[39.213330015239734 -61] -21.786669984760266]
Test Case:  46 | Input/Output: [[-23.786589794613604 -45] -68.7865897946136]
Test Case:  47 | Input/Output: [[21.026231663827616 -16] 5.026231663827616]
Test Case:  48 | Input/Output: [[-57.419243337207334 7] -50.419243337207334]
Test Case:  49 | Input/Output: [[44.84377846009596 -85] -40.15622153990404]
Test Case:  50 | Input/Output: [[-13.388475591618914 -98] -111.38847559161891]
Test Case:  51 | Input/Output: [[62.93034294180978 84] 146.93034294180978]
Test Case:  52 | Input/Output: [[10.523283037820292 71] 81.52328303782029]
Test Case:  53 | Input/Output: [[-26.209505686312724 55] 28.790494313687276]
Test Case:  54 | Input/Output: [[-29.794454110094406 44] 14.205545889905594]
Test Case:  55 | Input/Output: [[31.843674824466717 -58] -26.156325175533283]
Test Case:  56 | Input/Output: [[-27.08354104909145 3] -24.08354104909145]
Test Case:  57 | Input/Output: [[-23.250340724154597 79] 55.7496592758454]
Test Case:  58 | Input/Output: [[67.68738211987323 73] 140.68738211987323]
Test Case:  59 | Input/Output: [[6.006809182692024 13] 19.006809182692024]
Test Case:  60 | Input/Output: [[43.97377599963065 40] 83.97377599963065]
Test Case:  61 | Input/Output: [[-88.64785537351014 -87] -175.64785537351014]
Test Case:  62 | Input/Output: [[94.991422164375 65] 159.991422164375]
Test Case:  63 | Input/Output: [[56.901999356823126 -37] 19.901999356823126]
Test Case:  64 | Input/Output: [[16.016438775456848 21] 37.01643877545685]
Test Case:  65 | Input/Output: [[-78.99659362624448 33] -45.996593626244476]
Test Case:  66 | Input/Output: [[25.50555723776702 28] 53.50555723776702]
Test Case:  67 | Input/Output: [[39.99383586685559 72] 111.99383586685559]
Test Case:  68 | Input/Output: [[80.48611711720022 -6] 74.48611711720022]
Test Case:  69 | Input/Output: [[83.71963875173833 92] 175.71963875173833]
Test Case:  70 | Input/Output: [[64.93018671324171 -80] -15.06981328675829]
Test Case:  71 | Input/Output: [[68.69420675681934 -70] -1.3057932431806591]
Test Case:  72 | Input/Output: [[75.34497453390182 -70] 5.344974533901819]
Test Case:  73 | Input/Output: [[51.655903502941044 -41] 10.655903502941044]
Test Case:  74 | Input/Output: [[85.61184397185258 97] 182.61184397185258]
Test Case:  75 | Input/Output: [[55.8573747020539 -53] 2.857374702053903]
Test Case:  76 | Input/Output: [[-60.095486234749586 -30] -90.09548623474959]
Test Case:  77 | Input/Output: [[-72.7466504512649 -26] -98.7466504512649]
Test Case:  78 | Input/Output: [[66.6123997135856 -83] -16.387600286414397]
Test Case:  79 | Input/Output: [[26.59001027953896 56] 82.59001027953896]
Test Case:  80 | Input/Output: [[30.360185317869792 -12] 18.360185317869792]
Test Case:  81 | Input/Output: [[6.134809330701202 59] 65.1348093307012]
Test Case:  82 | Input/Output: [[-64.89511329761397 60] -4.895113297613975]
Test Case:  83 | Input/Output: [[10.57047749811511 54] 64.57047749811511]
Test Case:  84 | Input/Output: [[88.63022648555133 -37] 51.63022648555133]
Test Case:  85 | Input/Output: [[-81.48868107840352 32] -49.488681078403516]
Test Case:  86 | Input/Output: [[-26.131077132215935 -44] -70.13107713221594]
Test Case:  87 | Input/Output: [[34.41117433844468 -3] 31.41117433844468]
Test Case:  88 | Input/Output: [[-15.476145283011562 7] -8.476145283011562]
Test Case:  89 | Input/Output: [[-91.90989073548232 99] 7.090109264517679]
Test Case:  90 | Input/Output: [[22.11633559746417 -22] 0.11633559746417177]
Test Case:  91 | Input/Output: [[-40.244278362074496 36] -4.244278362074496]
Test Case:  92 | Input/Output: [[39.12232690095422 -32] 7.122326900954221]
Test Case:  93 | Input/Output: [[-39.154945763682235 36] -3.1549457636822353]
Test Case:  94 | Input/Output: [[-96.512662203451 -59] -155.512662203451]
Test Case:  95 | Input/Output: [[2.743267772742925 78] 80.74326777274293]
Test Case:  96 | Input/Output: [[-29.597616444167826 -31] -60.597616444167826]
Test Case:  97 | Input/Output: [[-59.81948893264519 -42] -101.81948893264519]
Test Case:  98 | Input/Output: [[-8.181115146447766 -52] -60.181115146447766]
Test Case:  99 | Input/Output: [[-60.03855907947609 37] -23.038559079476087]
Test Case: 100 | Input/Output: [[-1.9303044108995664 -97] -98.93030441089957]
Test Case: 101 | Input/Output: [[90.33100373712338 -33] 57.33100373712338]
Test Case: 102 | Input/Output: [[-51.79286550505584 -56] -107.79286550505584]
Test Case: 103 | Input/Output: [[-29.485676723880914 2] -27.485676723880914]
Test Case: 104 | Input/Output: [[55.56969400709178 0] 55.56969400709178]
Test Case: 105 | Input/Output: [[44.17515820265396 53] 97.17515820265396]
Test Case: 106 | Input/Output: [[-10.19863838568223 -50] -60.19863838568223]
Test Case: 107 | Input/Output: [[31.933030289483725 15] 46.933030289483725]
Test Case: 108 | Input/Output: [[3.077824624039934 -77] -73.92217537596007]
Test Case: 109 | Input/Output: [[-66.58378782409065 9] -57.58378782409065]
Test Case: 110 | Input/Output: [[-48.620932496727235 97] 48.379067503272765]
Test Case: 111 | Input/Output: [[68.2067512851936 49] 117.2067512851936]
Test Case: 112 | Input/Output: [[14.742140524272983 57] 71.74214052427298]
Test Case: 113 | Input/Output: [[99.2916306975959 -43] 56.291630697595906]
Test Case: 114 | Input/Output: [[-87.60072890284856 -75] -162.60072890284857]
Test Case: 115 | Input/Output: [[-71.35933182671596 -49] -120.35933182671596]
Test Case: 116 | Input/Output: [[-38.67981378207246 -31] -69.67981378207246]
Test Case: 117 | Input/Output: [[-12.327992912025707 -69] -81.3279929120257]
Test Case: 118 | Input/Output: [[-26.278782881119625 16] -10.278782881119625]
Test Case: 119 | Input/Output: [[22.4258386239691 -61] -38.5741613760309]
Test Case: 120 | Input/Output: [[79.7703425186067 30] 109.7703425186067]
Test Case: 121 | Input/Output: [[89.21558865707857 14] 103.21558865707857]
Test Case: 122 | Input/Output: [[-31.57057898231635 28] -3.5705789823163485]
Test Case: 123 | Input/Output: [[-29.828953229270013 55] 25.171046770729987]
Test Case: 124 | Input/Output: [[8.601591473701404 -67] -58.398408526298596]
Test Case: 125 | Input/Output: [[-59.76845170145659 77] 17.23154829854341]
Test Case: 126 | Input/Output: [[-10.257227336244412 -33] -43.25722733624441]
Test Case: 127 | Input/Output: [[60.31271335084918 -15] 45.31271335084918]
Test Case: 128 | Input/Output: [[34.4073823114299 81] 115.4073823114299]
Test Case: 129 | Input/Output: [[93.63046335711871 68] 161.6304633571187]
Test Case: 130 | Input/Output: [[-38.847031840448174 -30] -68.84703184044818]
Test Case: 131 | Input/Output: [[-56.04531034339353 -70] -126.04531034339354]
Test Case: 132 | Input/Output: [[89.73244796834877 -12] 77.73244796834877]
Test Case: 133 | Input/Output: [[57.18741044357418 43] 100.18741044357418]
Test Case: 134 | Input/Output: [[57.542590658800265 -75] -17.457409341199735]
Test Case: 135 | Input/Output: [[-89.82740787341375 96] 6.1725921265862524]
Test Case: 136 | Input/Output: [[2.3590721857125203 4] 6.35907218571252]
Test Case: 137 | Input/Output: [[93.134954597699 -37] 56.13495459769899]
Test Case: 138 | Input/Output: [[-18.67840665839249 2] -16.67840665839249]
Test Case: 139 | Input/Output: [[-2.0269851174750784 -35] -37.02698511747508]
Test Case: 140 | Input/Output: [[-31.764475874495716 85] 53.235524125504284]
Test Case: 141 | Input/Output: [[83.6047597999949 -98] -14.395240200005105]
Test Case: 142 | Input/Output: [[21.224406975424913 15] 36.22440697542491]
Test Case: 143 | Input/Output: [[-70.5950102366057 64] -6.595010236605702]
Test Case: 144 | Input/Output: [[26.78642103391364 -1] 25.78642103391364]
Test Case: 145 | Input/Output: [[50.30744132845152 -60] -9.692558671548483]
Test Case: 146 | Input/Output: [[10.724962975126886 47] 57.724962975126886]
Test Case: 147 | Input/Output: [[15.972271122205228 -19] -3.0277288777947717]
Test Case: 148 | Input/Output: [[46.53269479621966 -21] 25.53269479621966]
Test Case: 149 | Input/Output: [[5.90306947896255 4] 9.90306947896255]
Test Case: 150 | Input/Output: [[0.2691619454240737 -80] -79.73083805457593]
Test Case: 151 | Input/Output: [[22.917737438656218 -75] -52.08226256134378]
Test Case: 152 | Input/Output: [[-32.86815175206419 -85] -117.8681517520642]
Test Case: 153 | Input/Output: [[96.38463786553339 -83] 13.384637865533392]
Test Case: 154 | Input/Output: [[-13.535263981630877 -18] -31.535263981630877]
Test Case: 155 | Input/Output: [[89.79065219887173 51] 140.79065219887173]
Test Case: 156 | Input/Output: [[67.29557236772985 -5] 62.29557236772985]
Test Case: 157 | Input/Output: [[11.120810639240048 -94] -82.87918936075995]
Test Case: 158 | Input/Output: [[-81.45211779047159 -91] -172.4521177904716]
Test Case: 159 | Input/Output: [[-73.71459438431305 15] -58.714594384313045]
Test Case: 160 | Input/Output: [[71.75391908892868 -94] -22.246080911071317]
Test Case: 161 | Input/Output: [[25.260552442932465 47] 72.26055244293246]
Test Case: 162 | Input/Output: [[48.67846724919943 88] 136.67846724919943]
Test Case: 163 | Input/Output: [[-42.91317367220384 31] -11.91317367220384]
Test Case: 164 | Input/Output: [[-45.89361366675373 -54] -99.89361366675374]
Test Case: 165 | Input/Output: [[40.86346655775722 -85] -44.13653344224278]
Test Case: 166 | Input/Output: [[81.63669712820945 -58] 23.63669712820945]
Test Case: 167 | Input/Output: [[-78.63499451147928 -2] -80.63499451147928]
Test Case: 168 | Input/Output: [[-21.174231448576066 35] 13.825768551423934]
Test Case: 169 | Input/Output: [[88.75494494526697 71] 159.75494494526697]
Test Case: 170 | Input/Output: [[-38.50750693032383 26] -12.507506930323828]
Test Case: 171 | Input/Output: [[59.879419837060425 73] 132.87941983706042]
Test Case: 172 | Input/Output: [[-69.27381379936057 -29] -98.27381379936057]
Test Case: 173 | Input/Output: [[-38.69419639983742 22] -16.694196399837423]
Test Case: 174 | Input/Output: [[-27.953986714181568 86] 58.04601328581843]
Test Case: 175 | Input/Output: [[59.06503213350405 70] 129.06503213350405]
Test Case: 176 | Input/Output: [[-87.04866840852164 -15] -102.04866840852164]
Test Case: 177 | Input/Output: [[-33.44077666822618 -5] -38.44077666822618]
Test Case: 178 | Input/Output: [[45.64191344611544 56] 101.64191344611544]
Test Case: 179 | Input/Output: [[-36.638277861018096 -33] -69.6382778610181]
Test Case: 180 | Input/Output: [[5.556434646376388 -46] -40.44356535362361]
Test Case: 181 | Input/Output: [[40.32161633454092 65] 105.32161633454092]
Test Case: 182 | Input/Output: [[-43.37115819219852 -3] -46.37115819219852]
Test Case: 183 | Input/Output: [[-92.10440199713965 0] -92.10440199713965]
Test Case: 184 | Input/Output: [[85.97821832983075 41] 126.97821832983075]
Test Case: 185 | Input/Output: [[33.623105618223406 -83] -49.376894381776594]
Test Case: 186 | Input/Output: [[56.91328862241312 -28] 28.91328862241312]
Test Case: 187 | Input/Output: [[92.06933522418709 85] 177.06933522418709]
Test Case: 188 | Input/Output: [[-68.20462813610604 79] 10.795371863893962]
Test Case: 189 | Input/Output: [[-1.9952206350147321 7] 5.004779364985268]
Test Case: 190 | Input/Output: [[23.587309476688205 96] 119.5873094766882]
Test Case: 191 | Input/Output: [[63.4230882390321 25] 88.4230882390321]
Test Case: 192 | Input/Output: [[-98.68733286040512 25] -73.68733286040512]
Test Case: 193 | Input/Output: [[-9.320066621329204 -24] -33.320066621329204]
Test Case: 194 | Input/Output: [[-47.99130795485775 88] 40.00869204514225]
Test Case: 195 | Input/Output: [[-92.98005845561681 61] -31.980058455616813]
Test Case: 196 | Input/Output: [[63.39546893022268 -51] 12.395468930222677]
Test Case: 197 | Input/Output: [[65.04650547601983 -23] 42.04650547601983]
Test Case: 198 | Input/Output: [[-97.14349767126826 -1] -98.14349767126826]
Test Case: 199 | Input/Output: [[-45.27625740936407 37] -8.27625740936407]
Test Case: 200 | Input/Output: [[-23.75964481204022 65] 41.24035518795978]
Test Case: 201 | Input/Output: [[-1.4710865612360635 -22] -23.471086561236064]
Test Case: 202 | Input/Output: [[-13.285834962806177 -45] -58.28583496280618]
Test Case: 203 | Input/Output: [[-6.0689036263377005 -70] -76.0689036263377]
Test Case: 204 | Input/Output: [[-33.476004545934444 -67] -100.47600454593444]
Test Case: 205 | Input/Output: [[25.944666440996315 -93] -67.05533355900369]
Test Case: 206 | Input/Output: [[46.28227830941924 30] 76.28227830941924]
Test Case: 207 | Input/Output: [[18.112311249707602 -37] -18.887688750292398]
Test Case: 208 | Input/Output: [[1.6907268047435196 66] 67.69072680474352]
Test Case: 209 | Input/Output: [[-11.670872906199975 93] 81.32912709380003]
Test Case: 210 | Input/Output: [[69.75395007411726 -34] 35.753950074117256]
Test Case: 211 | Input/Output: [[-19.88607477885911 -58] -77.88607477885911]
Test Case: 212 | Input/Output: [[47.31573193506293 -49] -1.684268064937072]
Test Case: 213 | Input/Output: [[93.9470628514654 -58] 35.947062851465404]
Test Case: 214 | Input/Output: [[-46.29305336432563 -55] -101.29305336432563]
Test Case: 215 | Input/Output: [[-11.949112315037326 19] 7.0508876849626745]
Test Case: 216 | Input/Output: [[-4.079416644659872 -46] -50.07941664465987]
Test Case: 217 | Input/Output: [[-48.77147796452665 50] 1.2285220354733468]
Test Case: 218 | Input/Output: [[38.480433818770166 97] 135.48043381877017]
Test Case: 219 | Input/Output: [[-71.42986407445702 37] -34.429864074457015]
Test Case: 220 | Input/Output: [[-37.71259036850538 44] 6.287409631494619]
Test Case: 221 | Input/Output: [[-54.20275184542189 -74] -128.2027518454219]
Test Case: 222 | Input/Output: [[58.33447618479266 -61] -2.6655238152073366]
Test Case: 223 | Input/Output: [[-66.42359192070788 -71] -137.42359192070788]
Test Case: 224 | Input/Output: [[-99.04852246825963 -53] -152.04852246825965]
Test Case: 225 | Input/Output: [[10.51827295622087 70] 80.51827295622087]
Test Case: 226 | Input/Output: [[8.742680516015483 28] 36.74268051601548]
Test Case: 227 | Input/Output: [[61.46328846327913 59] 120.46328846327913]
Test Case: 228 | Input/Output: [[-14.474118341427328 54] 39.52588165857267]
Test Case: 229 | Input/Output: [[-56.1096803172146 -40] -96.1096803172146]
Test Case: 230 | Input/Output: [[-4.2646913785460185 2] -2.2646913785460185]
Test Case: 231 | Input/Output: [[65.4931296419312 -62] 3.493129641931205]
Test Case: 232 | Input/Output: [[-58.170112251589345 91] 32.829887748410655]
Test Case: 233 | Input/Output: [[85.07691278338754 13] 98.07691278338754]
Test Case: 234 | Input/Output: [[51.15674568679981 37] 88.15674568679981]
Test Case: 235 | Input/Output: [[69.56259146011132 76] 145.56259146011132]
Test Case: 236 | Input/Output: [[36.17273515305868 -67] -30.82726484694132]
Test Case: 237 | Input/Output: [[22.324526429332266 -80] -57.675473570667734]
Test Case: 238 | Input/Output: [[44.04742881615073 -71] -26.952571183849273]
Test Case: 239 | Input/Output: [[-40.58899567815817 -62] -102.58899567815817]
Test Case: 240 | Input/Output: [[-20.657720661720205 88] 67.3422793382798]
Test Case: 241 | Input/Output: [[-18.63309028415243 21] 2.3669097158475694]
Test Case: 242 | Input/Output: [[57.43179326830531 57] 114.43179326830531]
Test Case: 243 | Input/Output: [[-31.527042085099637 -44] -75.52704208509964]
Test Case: 244 | Input/Output: [[87.47125988018695 -34] 53.47125988018695]
Test Case: 245 | Input/Output: [[-78.8698105784394 64] -14.869810578439399]
Test Case: 246 | Input/Output: [[84.38533262585491 -2] 82.38533262585491]
Test Case: 247 | Input/Output: [[31.182326570818816 -53] -21.817673429181184]
Test Case: 248 | Input/Output: [[-21.98939644669828 -74] -95.98939644669828]
Test Case: 249 | Input/Output: [[-14.976519437413046 80] 65.02348056258695]
Test Case: 250 | Input/Output: [[-26.843254353525708 -95] -121.84325435352571]
Test Case: 251 | Input/Output: [[31.354269833621686 -64] -32.645730166378314]
Test Case: 252 | Input/Output: [[22.98628004345602 8] 30.98628004345602]
Test Case: 253 | Input/Output: [[-12.75289258998005 30] 17.24710741001995]
Test Case: 254 | Input/Output: [[28.514349893493858 46] 74.51434989349386]
Test Case: 255 | Input/Output: [[13.45611671510241 42] 55.45611671510241]
Test Case: 256 | Input/Output: [[74.40703132726571 29] 103.40703132726571]
Test Case: 257 | Input/Output: [[-0.9378337887818873 -54] -54.93783378878189]
Test Case: 258 | Input/Output: [[-6.581573107919894 18] 11.418426892080106]
Test Case: 259 | Input/Output: [[-9.867496472192585 96] 86.13250352780742]
Test Case: 260 | Input/Output: [[97.74736311943505 70] 167.74736311943505]
Test Case: 261 | Input/Output: [[6.12582750917494 -42] -35.87417249082506]
Test Case: 262 | Input/Output: [[52.62915294351515 57] 109.62915294351515]
Test Case: 263 | Input/Output: [[-64.3309216330612 -99] -163.3309216330612]
Test Case: 264 | Input/Output: [[-77.7162511626722 3] -74.7162511626722]
Test Case: 265 | Input/Output: [[-74.55343007662698 -52] -126.55343007662698]
Test Case: 266 | Input/Output: [[88.76896691263815 75] 163.76896691263815]
Test Case: 267 | Input/Output: [[73.30024669926715 -12] 61.30024669926715]
Test Case: 268 | Input/Output: [[30.6702004653406 42] 72.6702004653406]
Test Case: 269 | Input/Output: [[-92.34400143235855 17] -75.34400143235855]
Test Case: 270 | Input/Output: [[28.469069897015913 -66] -37.53093010298409]
Test Case: 271 | Input/Output: [[30.809095073658 68] 98.809095073658]
Test Case: 272 | Input/Output: [[56.640960462004216 59] 115.64096046200422]
Test Case: 273 | Input/Output: [[-28.448275176465643 -12] -40.44827517646564]
Test Case: 274 | Input/Output: [[63.85950206855219 91] 154.8595020685522]
Test Case: 275 | Input/Output: [[-34.71986205444951 -11] -45.71986205444951]
Test Case: 276 | Input/Output: [[60.233282268345306 -90] -29.766717731654694]
Test Case: 277 | Input/Output: [[-20.740144734368343 48] 27.259855265631657]
Test Case: 278 | Input/Output: [[88.13431022716674 -85] 3.1343102271667362]
Test Case: 279 | Input/Output: [[48.81268674547988 42] 90.81268674547988]
Test Case: 280 | Input/Output: [[78.94167356458362 80] 158.94167356458362]
Test Case: 281 | Input/Output: [[76.60303541738597 -3] 73.60303541738597]
Test Case: 282 | Input/Output: [[-49.72425454772416 55] 5.275745452275842]
Test Case: 283 | Input/Output: [[-28.973549491505352 -68] -96.97354949150535]
Test Case: 284 | Input/Output: [[21.399029808114392 20] 41.39902980811439]
Test Case: 285 | Input/Output: [[-93.79110053437583 -57] -150.79110053437583]
Test Case: 286 | Input/Output: [[60.51901631817995 75] 135.51901631817995]
Test Case: 287 | Input/Output: [[-57.46422262057194 7] -50.46422262057194]
Test Case: 288 | Input/Output: [[-7.859089362180654 -27] -34.859089362180654]
Test Case: 289 | Input/Output: [[-82.45714903454507 56] -26.45714903454507]
Test Case: 290 | Input/Output: [[-60.89042610045734 -62] -122.89042610045735]
Test Case: 291 | Input/Output: [[84.87682574099233 -84] 0.8768257409923308]
Test Case: 292 | Input/Output: [[93.52671448671802 75] 168.52671448671802]
Test Case: 293 | Input/Output: [[-89.45819480912947 -77] -166.45819480912945]
Test Case: 294 | Input/Output: [[-88.48222293241348 73] -15.482222932413478]
Test Case: 295 | Input/Output: [[-72.04844858217665 -61] -133.04844858217666]
Test Case: 296 | Input/Output: [[13.00688685611027 -69] -55.99311314388973]
Test Case: 297 | Input/Output: [[60.49485409358809 29] 89.49485409358809]
Test Case: 298 | Input/Output: [[-33.005595296753086 90] 56.994404703246914]
Test Case: 299 | Input/Output: [[19.849147356108674 -50] -30.150852643891326]
Test Case: 300 | Input/Output: [[79.33125241871764 -97] -17.66874758128236]
Test Case: 301 | Input/Output: [[96.94423916308435 31] 127.94423916308435]
Test Case: 302 | Input/Output: [[-3.557824773565386 17] 13.442175226434614]
Test Case: 303 | Input/Output: [[-82.70847749355208 -59] -141.7084774935521]
Test Case: 304 | Input/Output: [[55.28220814407047 49] 104.28220814407047]
Test Case: 305 | Input/Output: [[-27.885596966510718 -42] -69.88559696651072]
Test Case: 306 | Input/Output: [[-34.17769543941323 -64] -98.17769543941323]
Test Case: 307 | Input/Output: [[-40.27630089734793 -1] -41.27630089734793]
Test Case: 308 | Input/Output: [[27.255957929054304 89] 116.2559579290543]
Test Case: 309 | Input/Output: [[-60.11211110545431 -33] -93.11211110545432]
Test Case: 310 | Input/Output: [[67.0551033375063 39] 106.0551033375063]
Test Case: 311 | Input/Output: [[29.84623606735221 0] 29.84623606735221]
Test Case: 312 | Input/Output: [[86.67487730818578 10] 96.67487730818578]
Test Case: 313 | Input/Output: [[-4.3674393860761285 70] 65.63256061392387]
Test Case: 314 | Input/Output: [[4.138797720462691 -86] -81.86120227953731]
Test Case: 315 | Input/Output: [[54.135305922893764 90] 144.13530592289376]
Test Case: 316 | Input/Output: [[25.210661478257194 90] 115.2106614782572]
Test Case: 317 | Input/Output: [[42.62454981299115 72] 114.62454981299115]
Test Case: 318 | Input/Output: [[-74.55348006849489 53] -21.553480068494892]
Test Case: 319 | Input/Output: [[65.81247490328823 -88] -22.187525096711767]
Test Case: 320 | Input/Output: [[-66.9865184643983 48] -18.9865184643983]
Test Case: 321 | Input/Output: [[-70.36191621382227 1] -69.36191621382227]
Test Case: 322 | Input/Output: [[-89.60708426594704 1] -88.60708426594704]
Test Case: 323 | Input/Output: [[-4.286755840224487 -22] -26.286755840224487]
Test Case: 324 | Input/Output: [[-56.72583555779915 -99] -155.72583555779914]
Test Case: 325 | Input/Output: [[85.37531185745812 -70] 15.375311857458115]
Test Case: 326 | Input/Output: [[-53.59674801859153 65] 11.403251981408467]
Test Case: 327 | Input/Output: [[47.86803251598698 4] 51.86803251598698]
Test Case: 328 | Input/Output: [[68.45752506928665 59] 127.45752506928665]
Test Case: 329 | Input/Output: [[25.358523109619085 -91] -65.64147689038091]
Test Case: 330 | Input/Output: [[-71.29858247284709 -4] -75.29858247284709]
Test Case: 331 | Input/Output: [[-61.810990994968364 61] -0.810990994968364]
Test Case: 332 | Input/Output: [[-65.555515691692 0] -65.555515691692]
Test Case: 333 | Input/Output: [[44.71199019592814 -26] 18.711990195928138]
Test Case: 334 | Input/Output: [[-4.6815939240103575 60] 55.31840607598964]
Test Case: 335 | Input/Output: [[1.323067938872498 -74] -72.6769320611275]
Test Case: 336 | Input/Output: [[-89.79190082708081 0] -89.79190082708081]
Test Case: 337 | Input/Output: [[-43.114689539546845 -96] -139.11468953954684]
Test Case: 338 | Input/Output: [[-14.450830269182276 63] 48.549169730817724]
Test Case: 339 | Input/Output: [[63.62653841547461 77] 140.6265384154746]
Test Case: 340 | Input/Output: [[51.697216749722884 -96] -44.302783250277116]
Test Case: 341 | Input/Output: [[73.70704748138587 -31] 42.70704748138587]
Test Case: 342 | Input/Output: [[-90.75428462063822 -67] -157.7542846206382]
Test Case: 343 | Input/Output: [[-35.48990093296962 -63] -98.48990093296962]
Test Case: 344 | Input/Output: [[-99.60294287502353 1] -98.60294287502353]
Test Case: 345 | Input/Output: [[-72.4564492745592 25] -47.456449274559205]
Test Case: 346 | Input/Output: [[79.52147818265058 8] 87.52147818265058]
Test Case: 347 | Input/Output: [[32.21945711032842 68] 100.21945711032842]
Test Case: 348 | Input/Output: [[81.03173705356576 -49] 32.03173705356576]
Test Case: 349 | Input/Output: [[-94.73885311719468 -87] -181.73885311719468]
Test Case: 350 | Input/Output: [[5.893167592212166 -36] -30.106832407787834]
Test Case: 351 | Input/Output: [[-74.40620595254579 99] 24.59379404745421]
Test Case: 352 | Input/Output: [[34.98303919496209 -71] -36.01696080503791]
Test Case: 353 | Input/Output: [[4.531068260160055 -82] -77.46893173983995]
Test Case: 354 | Input/Output: [[70.45964491441282 -57] 13.45964491441282]
Test Case: 355 | Input/Output: [[-68.52274421682843 -24] -92.52274421682843]
Test Case: 356 | Input/Output: [[-70.85191419236395 -95] -165.85191419236395]
Test Case: 357 | Input/Output: [[-75.76347446578959 6] -69.76347446578959]
Test Case: 358 | Input/Output: [[-80.98393293088102 -99] -179.98393293088102]
Test Case: 359 | Input/Output: [[-52.90191327913239 96] 43.09808672086761]
Test Case: 360 | Input/Output: [[23.698842461785105 13] 36.698842461785105]
Test Case: 361 | Input/Output: [[53.16791444735159 91] 144.1679144473516]
Test Case: 362 | Input/Output: [[67.04133029183487 -79] -11.958669708165132]
Test Case: 363 | Input/Output: [[-82.64686832836094 -20] -102.64686832836094]
Test Case: 364 | Input/Output: [[-86.7387728608556 71] -15.738772860855605]
Test Case: 365 | Input/Output: [[62.04362212106179 -29] 33.04362212106179]
Test Case: 366 | Input/Output: [[88.19678965648106 -97] -8.803210343518941]
Test Case: 367 | Input/Output: [[-99.5549477406511 -35] -134.5549477406511]
Test Case: 368 | Input/Output: [[83.98866038107022 47] 130.98866038107022]
Test Case: 369 | Input/Output: [[97.20412266940826 -26] 71.20412266940826]
Test Case: 370 | Input/Output: [[83.89852827609721 15] 98.89852827609721]
Test Case: 371 | Input/Output: [[-0.9237390323633292 -90] -90.92373903236333]
Test Case: 372 | Input/Output: [[29.945556362966528 -73] -43.05444363703347]
Test Case: 373 | Input/Output: [[-68.66393225924752 88] 19.336067740752483]
Test Case: 374 | Input/Output: [[34.23000487981142 -65] -30.769995120188582]
Test Case: 375 | Input/Output: [[67.8363680360479 -7] 60.8363680360479]
Test Case: 376 | Input/Output: [[93.16786375043122 30] 123.16786375043122]
Test Case: 377 | Input/Output: [[43.074163044657666 26] 69.07416304465767]
Test Case: 378 | Input/Output: [[-11.88984992021338 -73] -84.88984992021338]
Test Case: 379 | Input/Output: [[-57.85630759386755 -88] -145.85630759386754]
Test Case: 380 | Input/Output: [[42.576972850538624 -14] 28.576972850538624]
Test Case: 381 | Input/Output: [[-33.95339744382002 90] 56.04660255617998]
Test Case: 382 | Input/Output: [[33.998121061740704 -66] -32.001878938259296]
Test Case: 383 | Input/Output: [[-20.137699555601472 81] 60.86230044439853]
Test Case: 384 | Input/Output: [[-2.8656044113316312 86] 83.13439558866837]
Test Case: 385 | Input/Output: [[67.47200904820349 -42] 25.47200904820349]
Test Case: 386 | Input/Output: [[-39.82496745687214 52] 12.175032543127863]
Test Case: 387 | Input/Output: [[82.00476156335765 79] 161.00476156335765]
Test Case: 388 | Input/Output: [[-67.07966505133976 -21] -88.07966505133976]
Test Case: 389 | Input/Output: [[92.91729356699224 63] 155.91729356699224]
Test Case: 390 | Input/Output: [[-35.22926870294991 71] 35.77073129705009]
Test Case: 391 | Input/Output: [[-2.0737269959889346 -79] -81.07372699598893]
Test Case: 392 | Input/Output: [[95.15627531776724 -82] 13.15627531776724]
Test Case: 393 | Input/Output: [[41.434329933230714 -93] -51.565670066769286]
Test Case: 394 | Input/Output: [[-42.436987441075466 -98] -140.43698744107547]
Test Case: 395 | Input/Output: [[-24.56237674295923 71] 46.43762325704077]
Test Case: 396 | Input/Output: [[57.802129193478976 -9] 48.802129193478976]
Test Case: 397 | Input/Output: [[94.89665009450394 -70] 24.89665009450394]
Test Case: 398 | Input/Output: [[-55.260454595367456 69] 13.739545404632544]
Test Case: 399 | Input/Output: [[49.96157961873499 -57] -7.038420381265013]
Test Case: 400 | Input/Output: [[16.01263742550742 -45] -28.98736257449258]
Test Case: 401 | Input/Output: [[92.29196892647639 -6] 86.29196892647639]
Test Case: 402 | Input/Output: [[-6.57621853532406 -16] -22.57621853532406]
Test Case: 403 | Input/Output: [[-28.03400129836126 73] 44.96599870163874]
Test Case: 404 | Input/Output: [[-52.053812359561505 -53] -105.0538123595615]
Test Case: 405 | Input/Output: [[51.25117944445611 -27] 24.251179444456113]
Test Case: 406 | Input/Output: [[89.87153469159082 47] 136.87153469159082]
Test Case: 407 | Input/Output: [[8.183808292419116 51] 59.183808292419116]
Test Case: 408 | Input/Output: [[89.89582883279817 28] 117.89582883279817]
Test Case: 409 | Input/Output: [[-21.343472117843703 -18] -39.3434721178437]
Test Case: 410 | Input/Output: [[24.222740359643936 95] 119.22274035964394]
Test Case: 411 | Input/Output: [[42.809294316891254 -61] -18.190705683108746]
Test Case: 412 | Input/Output: [[-73.5573837897399 -79] -152.5573837897399]
Test Case: 413 | Input/Output: [[48.34641655619836 -58] -9.653583443801637]
Test Case: 414 | Input/Output: [[82.43193851782951 -41] 41.43193851782951]
Test Case: 415 | Input/Output: [[24.53523680095391 100] 124.53523680095391]
Test Case: 416 | Input/Output: [[37.534943601834044 -91] -53.465056398165956]
Test Case: 417 | Input/Output: [[-84.03276175039649 -1] -85.03276175039649]
Test Case: 418 | Input/Output: [[-8.255215049298272 -92] -100.25521504929827]
Test Case: 419 | Input/Output: [[13.057231100304563 -69] -55.94276889969544]
Test Case: 420 | Input/Output: [[-27.218913585304307 90] 62.78108641469569]
Test Case: 421 | Input/Output: [[46.474032117639155 -89] -42.525967882360845]
Test Case: 422 | Input/Output: [[3.7473612539027528 -4] -0.25263874609724724]
Test Case: 423 | Input/Output: [[9.103573893922558 1] 10.103573893922558]
Test Case: 424 | Input/Output: [[28.07948609819161 21] 49.07948609819161]
Test Case: 425 | Input/Output: [[36.7838357795942 -75] -38.2161642204058]
Test Case: 426 | Input/Output: [[50.135147568083994 -25] 25.135147568083994]
Test Case: 427 | Input/Output: [[34.935537765731596 7] 41.935537765731596]
Test Case: 428 | Input/Output: [[-11.996110166205298 -32] -43.9961101662053]
Test Case: 429 | Input/Output: [[89.79980074324169 22] 111.79980074324169]
Test Case: 430 | Input/Output: [[68.70481519694721 -5] 63.70481519694721]
Test Case: 431 | Input/Output: [[7.4695886358628485 92] 99.46958863586285]
Test Case: 432 | Input/Output: [[-32.21101960408994 -95] -127.21101960408994]
Test Case: 433 | Input/Output: [[-22.49196510514915 55] 32.50803489485085]
Test Case: 434 | Input/Output: [[-48.645064072320096 -94] -142.6450640723201]
Test Case: 435 | Input/Output: [[-68.62215376895564 78] 9.377846231044359]
Test Case: 436 | Input/Output: [[38.39197338476984 -48] -9.608026615230159]
Test Case: 437 | Input/Output: [[8.730080644241795 -89] -80.2699193557582]
Test Case: 438 | Input/Output: [[-84.68663964163486 -92] -176.68663964163486]
Test Case: 439 | Input/Output: [[59.08381180206035 74] 133.08381180206035]
Test Case: 440 | Input/Output: [[-68.84544255459718 90] 21.154557445402816]
Test Case: 441 | Input/Output: [[71.71600092990204 -20] 51.71600092990204]
Test Case: 442 | Input/Output: [[64.03662078015881 -74] -9.963379219841187]
Test Case: 443 | Input/Output: [[83.32658635043211 -79] 4.326586350432109]
Test Case: 444 | Input/Output: [[-43.95416980512152 -44] -87.95416980512152]
Test Case: 445 | Input/Output: [[2.814110924113322 36] 38.81411092411332]
Test Case: 446 | Input/Output: [[42.42714892289089 -78] -35.57285107710911]
Test Case: 447 | Input/Output: [[-21.177714599655985 -7] -28.177714599655985]
Test Case: 448 | Input/Output: [[-57.859505074334635 -57] -114.85950507433463]
Test Case: 449 | Input/Output: [[28.61249420569422 -81] -52.38750579430578]
Test Case: 450 | Input/Output: [[20.398699121006644 -1] 19.398699121006644]
Test Case: 451 | Input/Output: [[-45.78243930904107 46] 0.21756069095893338]
Test Case: 452 | Input/Output: [[7.3990948399519425 61] 68.39909483995194]
Test Case: 453 | Input/Output: [[29.18802891433802 -99] -69.81197108566198]
Test Case: 454 | Input/Output: [[83.7249572700328 -91] -7.275042729967197]
Test Case: 455 | Input/Output: [[49.745007137358755 85] 134.74500713735875]
Test Case: 456 | Input/Output: [[92.30318399164307 28] 120.30318399164307]
Test Case: 457 | Input/Output: [[-67.2349789519867 30] -37.234978951986704]
Test Case: 458 | Input/Output: [[83.56278429696539 -34] 49.56278429696539]
Test Case: 459 | Input/Output: [[50.72918830940466 -97] -46.27081169059534]
Test Case: 460 | Input/Output: [[-7.083133941827995 79] 71.916866058172]
Test Case: 461 | Input/Output: [[-2.877288047724221 31] 28.12271195227578]
Test Case: 462 | Input/Output: [[89.16004157316024 -92] -2.8399584268397575]
Test Case: 463 | Input/Output: [[-6.8982197895824555 -54] -60.898219789582456]
Test Case: 464 | Input/Output: [[0.5884160545550827 -71] -70.41158394544492]
Test Case: 465 | Input/Output: [[4.687708658237739 75] 79.68770865823774]
Test Case: 466 | Input/Output: [[-93.47490325447063 45] -48.47490325447063]
Test Case: 467 | Input/Output: [[7.78425620859791 -99] -91.21574379140209]
Test Case: 468 | Input/Output: [[-60.9340838133476 81] 20.0659161866524]
Test Case: 469 | Input/Output: [[73.41985375323034 -90] -16.580146246769658]
Test Case: 470 | Input/Output: [[-83.55106372138268 -100] -183.55106372138266]
Test Case: 471 | Input/Output: [[41.36700556488847 49] 90.36700556488847]
Test Case: 472 | Input/Output: [[-54.408389562025825 78] 23.591610437974175]
Test Case: 473 | Input/Output: [[85.90222241081423 -12] 73.90222241081423]
Test Case: 474 | Input/Output: [[97.54606611451584 -28] 69.54606611451584]
Test Case: 475 | Input/Output: [[56.56788264008793 -60] -3.43211735991207]
Test Case: 476 | Input/Output: [[-83.77456777932488 -70] -153.77456777932488]
Test Case: 477 | Input/Output: [[31.04678309444921 -3] 28.04678309444921]
Test Case: 478 | Input/Output: [[-4.9967397410962064 38] 33.003260258903794]
Test Case: 479 | Input/Output: [[53.52623701445387 69] 122.52623701445387]
Test Case: 480 | Input/Output: [[-51.53536167881607 -30] -81.53536167881607]
Test Case: 481 | Input/Output: [[75.19700050227215 62] 137.19700050227215]
Test Case: 482 | Input/Output: [[26.044267315283264 90] 116.04426731528326]
Test Case: 483 | Input/Output: [[-51.23939153918542 20] -31.23939153918542]
Test Case: 484 | Input/Output: [[-42.490011254945095 16] -26.490011254945095]
Test Case: 485 | Input/Output: [[51.17846753948811 25] 76.17846753948811]
Test Case: 486 | Input/Output: [[15.655519041108022 -28] -12.344480958891978]
Test Case: 487 | Input/Output: [[-8.211372154288597 3] -5.211372154288597]
Test Case: 488 | Input/Output: [[-85.83816466616074 79] -6.838164666160736]
Test Case: 489 | Input/Output: [[17.926915135137094 -97] -79.0730848648629]
Test Case: 490 | Input/Output: [[45.35445636109989 -70] -24.645543638900108]
Test Case: 491 | Input/Output: [[-12.36982719517259 -63] -75.36982719517259]
Test Case: 492 | Input/Output: [[50.86767499180888 -71] -20.132325008191117]
Test Case: 493 | Input/Output: [[24.399026141538812 19] 43.39902614153881]
Test Case: 494 | Input/Output: [[70.4299488883859 -6] 64.4299488883859]
Test Case: 495 | Input/Output: [[-61.98242824818851 78] 16.017571751811488]
Test Case: 496 | Input/Output: [[-32.96088854787247 45] 12.039111452127528]
Test Case: 497 | Input/Output: [[79.23807512460792 -42] 37.23807512460792]
Test Case: 498 | Input/Output: [[-22.295330494151486 -9] -31.295330494151486]
Test Case: 499 | Input/Output: [[-87.81577931424405 -90] -177.81577931424405]
Test Case: 500 | Input/Output: [[-51.8041249211429 64] 12.1958750788571]
Test Case: 501 | Input/Output: [[62.118507587238696 -32] 30.118507587238696]
Test Case: 502 | Input/Output: [[42.90379351186425 61] 103.90379351186425]
Test Case: 503 | Input/Output: [[55.177309435522034 -76] -20.822690564477966]
Test Case: 504 | Input/Output: [[48.963435097430136 -33] 15.963435097430136]
Test Case: 505 | Input/Output: [[87.51609422078351 95] 182.51609422078351]
Test Case: 506 | Input/Output: [[23.205245354442866 -16] 7.205245354442866]
Test Case: 507 | Input/Output: [[21.287515030276168 54] 75.28751503027617]
Test Case: 508 | Input/Output: [[-28.395976065472468 11] -17.395976065472468]
Test Case: 509 | Input/Output: [[-59.24486637543749 -84] -143.24486637543748]
Test Case: 510 | Input/Output: [[-72.59204248020006 72] -0.5920424802000639]
Test Case: 511 | Input/Output: [[-50.45399926664229 -72] -122.45399926664228]
Test Case: 512 | Input/Output: [[-61.46346536696847 -50] -111.46346536696848]
Test Case: 513 | Input/Output: [[-75.55633656929092 67] -8.55633656929092]
Test Case: 514 | Input/Output: [[33.15792216017971 -12] 21.15792216017971]
Test Case: 515 | Input/Output: [[76.50241306106395 -56] 20.502413061063947]
Test Case: 516 | Input/Output: [[43.936917208156075 -52] -8.063082791843925]
Test Case: 517 | Input/Output: [[-80.17722462094908 82] 1.822775379050924]
Test Case: 518 | Input/Output: [[-19.10047254495217 93] 73.89952745504783]
Test Case: 519 | Input/Output: [[94.97438034633839 73] 167.9743803463384]
Test Case: 520 | Input/Output: [[-4.121865954075659 -67] -71.12186595407566]
Test Case: 521 | Input/Output: [[81.68299534481625 97] 178.68299534481625]
Test Case: 522 | Input/Output: [[2.273639822731411 -45] -42.72636017726859]
Test Case: 523 | Input/Output: [[-18.694661462407808 47] 28.305338537592192]
Test Case: 524 | Input/Output: [[86.93493620144221 -63] 23.934936201442213]
Test Case: 525 | Input/Output: [[-58.36925208252588 45] -13.369252082525882]
Test Case: 526 | Input/Output: [[81.66256716785512 69] 150.66256716785512]
Test Case: 527 | Input/Output: [[61.530789238840754 -32] 29.530789238840754]
Test Case: 528 | Input/Output: [[80.1955479593596 94] 174.1955479593596]
Test Case: 529 | Input/Output: [[-57.577923685451715 -19] -76.57792368545171]
Test Case: 530 | Input/Output: [[89.29201405121913 31] 120.29201405121913]
Test Case: 531 | Input/Output: [[-28.53489086013741 40] 11.46510913986259]
Test Case: 532 | Input/Output: [[-54.287059173315534 36] -18.287059173315534]
Test Case: 533 | Input/Output: [[16.140895057293548 41] 57.14089505729355]
Test Case: 534 | Input/Output: [[99.69907806391188 -74] 25.699078063911884]
Test Case: 535 | Input/Output: [[-59.883937042322486 -67] -126.88393704232249]
Test Case: 536 | Input/Output: [[16.12814664483615 -54] -37.87185335516385]
Test Case: 537 | Input/Output: [[-82.51914090151548 -9] -91.51914090151548]
Test Case: 538 | Input/Output: [[-74.22394169948421 65] -9.223941699484214]
Test Case: 539 | Input/Output: [[-98.77690385046647 -57] -155.77690385046645]
Test Case: 540 | Input/Output: [[-7.028827616013061 -22] -29.02882761601306]
Test Case: 541 | Input/Output: [[-91.63467504288316 -75] -166.63467504288315]
Test Case: 542 | Input/Output: [[85.98320654483885 -66] 19.98320654483885]
Test Case: 543 | Input/Output: [[-25.58081235554664 -65] -90.58081235554664]
Test Case: 544 | Input/Output: [[-19.007589571361223 61] 41.99241042863878]
Test Case: 545 | Input/Output: [[-72.06555093192124 41] -31.065550931921237]
Test Case: 546 | Input/Output: [[94.15248532492677 42] 136.15248532492677]
Test Case: 547 | Input/Output: [[-96.01015271447596 53] -43.010152714475964]
Test Case: 548 | Input/Output: [[-28.867182680609545 79] 50.132817319390455]
Test Case: 549 | Input/Output: [[-14.43170221148415 -93] -107.43170221148415]
Test Case: 550 | Input/Output: [[-63.96130062787917 -5] -68.96130062787917]
Test Case: 551 | Input/Output: [[93.53765202235195 -3] 90.53765202235195]
Test Case: 552 | Input/Output: [[-65.4114270556642 99] 33.588572944335795]
Test Case: 553 | Input/Output: [[87.75724598478186 97] 184.75724598478186]
Test Case: 554 | Input/Output: [[-11.495024899450272 -45] -56.49502489945027]
Test Case: 555 | Input/Output: [[83.10363464283608 66] 149.10363464283608]
Test Case: 556 | Input/Output: [[-83.8716790594739 -74] -157.8716790594739]
Test Case: 557 | Input/Output: [[-31.86194323225729 88] 56.13805676774271]
Test Case: 558 | Input/Output: [[18.611656271032004 -54] -35.388343728967996]
Test Case: 559 | Input/Output: [[98.56305337387144 -39] 59.56305337387144]
Test Case: 560 | Input/Output: [[72.29664576052136 -79] -6.703354239478642]
Test Case: 561 | Input/Output: [[-17.910986935526324 -67] -84.91098693552632]
Test Case: 562 | Input/Output: [[-22.01601586751501 -11] -33.01601586751501]
Test Case: 563 | Input/Output: [[-86.15057011251312 1] -85.15057011251312]
Test Case: 564 | Input/Output: [[75.71874371504165 34] 109.71874371504165]
Test Case: 565 | Input/Output: [[6.724272423987713 84] 90.72427242398771]
Test Case: 566 | Input/Output: [[-51.65182604694674 1] -50.65182604694674]
Test Case: 567 | Input/Output: [[-98.08730109609878 92] -6.087301096098784]
Test Case: 568 | Input/Output: [[-61.9430467781215 -86] -147.9430467781215]
Test Case: 569 | Input/Output: [[-1.7297463306563827 43] 41.27025366934362]
Test Case: 570 | Input/Output: [[87.57014070617228 53] 140.57014070617228]
Test Case: 571 | Input/Output: [[75.5566584410877 -3] 72.5566584410877]
Test Case: 572 | Input/Output: [[21.311431854840677 25] 46.31143185484068]
Test Case: 573 | Input/Output: [[-63.49457296831724 92] 28.505427031682757]
Test Case: 574 | Input/Output: [[34.869578315365004 97] 131.869578315365]
Test Case: 575 | Input/Output: [[-51.91305452294797 -34] -85.91305452294796]
Test Case: 576 | Input/Output: [[53.68165565975477 63] 116.68165565975477]
Test Case: 577 | Input/Output: [[-86.9367127352173 -38] -124.9367127352173]
Test Case: 578 | Input/Output: [[9.154127084924085 -28] -18.845872915075915]
Test Case: 579 | Input/Output: [[-40.32210037899458 -52] -92.32210037899458]
Test Case: 580 | Input/Output: [[-13.252033689173487 -28] -41.25203368917349]
Test Case: 581 | Input/Output: [[-24.0803454761229 -56] -80.0803454761229]
Test Case: 582 | Input/Output: [[-7.971057804135967 78] 70.02894219586403]
Test Case: 583 | Input/Output: [[18.325154471991397 19] 37.3251544719914]
Test Case: 584 | Input/Output: [[-84.04389045501009 -12] -96.04389045501009]
Test Case: 585 | Input/Output: [[22.314397340577614 -95] -72.68560265942239]
Test Case: 586 | Input/Output: [[54.82965885202026 87] 141.82965885202026]
Test Case: 587 | Input/Output: [[-87.38958792309026 34] -53.38958792309026]
Test Case: 588 | Input/Output: [[-80.242150566985 6] -74.242150566985]
Test Case: 589 | Input/Output: [[-53.834882583441555 -17] -70.83488258344155]
Test Case: 590 | Input/Output: [[-54.59043188614024 -99] -153.59043188614024]
Test Case: 591 | Input/Output: [[-56.82132503079169 51] -5.821325030791691]
Test Case: 592 | Input/Output: [[98.0237252667749 -64] 34.0237252667749]
Test Case: 593 | Input/Output: [[26.315163495138478 76] 102.31516349513848]
Test Case: 594 | Input/Output: [[52.182681510477465 -75] -22.817318489522535]
Test Case: 595 | Input/Output: [[-95.62197906192796 51] -44.62197906192796]
Test Case: 596 | Input/Output: [[86.83123813879203 36] 122.83123813879203]
Test Case: 597 | Input/Output: [[4.759007548470805 17] 21.759007548470805]
Test Case: 598 | Input/Output: [[36.98293387046337 60] 96.98293387046337]
Test Case: 599 | Input/Output: [[-25.170297339472043 -27] -52.17029733947204]
Test Case: 600 | Input/Output: [[-66.71532610433171 -5] -71.71532610433171]
Test Case: 601 | Input/Output: [[-63.69540659426891 -25] -88.69540659426892]
Test Case: 602 | Input/Output: [[61.07959691823709 95] 156.0795969182371]
Test Case: 603 | Input/Output: [[68.84460648469604 24] 92.84460648469604]
Test Case: 604 | Input/Output: [[30.121122788058273 -35] -4.878877211941727]
Test Case: 605 | Input/Output: [[80.17198698533949 98] 178.1719869853395]
Test Case: 606 | Input/Output: [[49.792418807147754 -69] -19.207581192852246]
Test Case: 607 | Input/Output: [[78.85274986692241 -24] 54.85274986692241]
Test Case: 608 | Input/Output: [[-42.14856579258488 -11] -53.14856579258488]
Test Case: 609 | Input/Output: [[92.17313175390808 -73] 19.17313175390808]
Test Case: 610 | Input/Output: [[83.12074531016316 89] 172.12074531016316]
Test Case: 611 | Input/Output: [[8.456771299963322 -12] -3.5432287000366784]
Test Case: 612 | Input/Output: [[67.79372938544248 -21] 46.793729385442475]
Test Case: 613 | Input/Output: [[88.70065283131521 -88] 0.7006528313152103]
Test Case: 614 | Input/Output: [[55.40314297350474 -47] 8.403142973504742]
Test Case: 615 | Input/Output: [[62.90900865082273 -60] 2.9090086508227273]
Test Case: 616 | Input/Output: [[72.3426865083477 -58] 14.342686508347697]
Test Case: 617 | Input/Output: [[28.53894637536297 51] 79.53894637536297]
Test Case: 618 | Input/Output: [[-75.39683582108434 43] -32.39683582108434]
Test Case: 619 | Input/Output: [[81.17824506158456 46] 127.17824506158456]
Test Case: 620 | Input/Output: [[11.468768404125967 -79] -67.53123159587403]
Test Case: 621 | Input/Output: [[38.664087754171476 9] 47.664087754171476]
Test Case: 622 | Input/Output: [[15.87008094203361 -36] -20.12991905796639]
Test Case: 623 | Input/Output: [[-25.666802905472537 19] -6.666802905472537]
Test Case: 624 | Input/Output: [[-20.17451673035515 62] 41.82548326964485]
Test Case: 625 | Input/Output: [[58.22222788546301 54] 112.22222788546301]
Test Case: 626 | Input/Output: [[18.39511093390145 81] 99.39511093390145]
Test Case: 627 | Input/Output: [[-5.539411154441538 -38] -43.53941115444154]
Test Case: 628 | Input/Output: [[60.00536137263322 -60] 0.005361372633217343]
Test Case: 629 | Input/Output: [[40.963974457199896 69] 109.9639744571999]
Test Case: 630 | Input/Output: [[-68.68978135514865 19] -49.689781355148654]
Test Case: 631 | Input/Output: [[-89.82636305842445 60] -29.826363058424448]
Test Case: 632 | Input/Output: [[-21.5638359887037 47] 25.4361640112963]
Test Case: 633 | Input/Output: [[-75.62502570251209 92] 16.37497429748791]
Test Case: 634 | Input/Output: [[55.60174855586308 27] 82.60174855586308]
Test Case: 635 | Input/Output: [[-10.369195862448038 40] 29.630804137551962]
Test Case: 636 | Input/Output: [[-48.3632345533477 64] 15.636765446652298]
Test Case: 637 | Input/Output: [[9.583744892628744 -55] -45.416255107371256]
Test Case: 638 | Input/Output: [[58.564887986208305 44] 102.5648879862083]
Test Case: 639 | Input/Output: [[-77.24618511149575 -30] -107.24618511149575]
Test Case: 640 | Input/Output: [[25.319812708437553 -84] -58.68018729156245]
Test Case: 641 | Input/Output: [[43.568331219942934 -55] -11.431668780057066]
Test Case: 642 | Input/Output: [[-43.28982556057643 -39] -82.28982556057643]
Test Case: 643 | Input/Output: [[93.12747217398837 -36] 57.127472173988366]
Test Case: 644 | Input/Output: [[-13.761670037252898 63] 49.2383299627471]
Test Case: 645 | Input/Output: [[-79.8542508359968 53] -26.854250835996794]
Test Case: 646 | Input/Output: [[-96.47299418082618 65] -31.472994180826177]
Test Case: 647 | Input/Output: [[10.66325426186529 2] 12.66325426186529]
Test Case: 648 | Input/Output: [[-15.9420076986801 -56] -71.9420076986801]
Test Case: 649 | Input/Output: [[-67.144421694448 50] -17.144421694448]
Test Case: 650 | Input/Output: [[-83.73477356933134 -71] -154.73477356933134]
Test Case: 651 | Input/Output: [[64.6733776900264 77] 141.6733776900264]
Test Case: 652 | Input/Output: [[70.0959037816348 92] 162.0959037816348]
Test Case: 653 | Input/Output: [[-49.4494972581119 19] -30.449497258111897]
Test Case: 654 | Input/Output: [[60.05157102112571 -87] -26.94842897887429]
Test Case: 655 | Input/Output: [[54.74249874438061 -63] -8.257501255619388]
Test Case: 656 | Input/Output: [[24.088622935894932 -43] -18.911377064105068]
Test Case: 657 | Input/Output: [[71.58165722930093 60] 131.58165722930093]
Test Case: 658 | Input/Output: [[-30.33104605963311 5] -25.33104605963311]
Test Case: 659 | Input/Output: [[28.87654269732863 -10] 18.87654269732863]
Test Case: 660 | Input/Output: [[15.865301054766661 0] 15.865301054766661]
Test Case: 661 | Input/Output: [[-16.80633382885111 78] 61.19366617114889]
Test Case: 662 | Input/Output: [[13.631621164144008 58] 71.63162116414401]
Test Case: 663 | Input/Output: [[30.543512574196683 74] 104.54351257419668]
Test Case: 664 | Input/Output: [[16.889990988367543 -15] 1.8899909883675434]
Test Case: 665 | Input/Output: [[3.921470290970987 -57] -53.07852970902901]
Test Case: 666 | Input/Output: [[5.4562568259042905 -57] -51.54374317409571]
Test Case: 667 | Input/Output: [[-86.03430037226852 -100] -186.03430037226852]
Test Case: 668 | Input/Output: [[-45.072400089494536 51] 5.927599910505464]
Test Case: 669 | Input/Output: [[79.3058389922607 93] 172.3058389922607]
Test Case: 670 | Input/Output: [[-28.501294447539976 -94] -122.50129444753998]
Test Case: 671 | Input/Output: [[-72.82491020138211 40] -32.82491020138211]
Test Case: 672 | Input/Output: [[-26.031668250959527 45] 18.968331749040473]
Test Case: 673 | Input/Output: [[-81.17307377524429 24] -57.17307377524429]
Test Case: 674 | Input/Output: [[-96.05523393109361 47] -49.05523393109361]
Test Case: 675 | Input/Output: [[-17.51154360033162 100] 82.48845639966838]
Test Case: 676 | Input/Output: [[-35.53803651090435 65] 29.461963489095652]
Test Case: 677 | Input/Output: [[22.383325912507914 -47] -24.616674087492086]
Test Case: 678 | Input/Output: [[-88.967525753725 76] -12.967525753724999]
Test Case: 679 | Input/Output: [[-87.5836899471023 37] -50.5836899471023]
Test Case: 680 | Input/Output: [[43.63701198729771 9] 52.63701198729771]
Test Case: 681 | Input/Output: [[1.8409385755594911 -20] -18.15906142444051]
Test Case: 682 | Input/Output: [[-47.27517597108668 17] -30.275175971086682]
Test Case: 683 | Input/Output: [[59.861964983311594 41] 100.8619649833116]
Test Case: 684 | Input/Output: [[-29.426369903740238 -36] -65.42636990374024]
Test Case: 685 | Input/Output: [[-49.947066469585934 -32] -81.94706646958593]
Test Case: 686 | Input/Output: [[-47.58041383127778 99] 51.41958616872222]
Test Case: 687 | Input/Output: [[49.761873999645104 -28] 21.761873999645104]
Test Case: 688 | Input/Output: [[38.39895653971112 -23] 15.398956539711122]
Test Case: 689 | Input/Output: [[58.32141689086433 -7] 51.32141689086433]
Test Case: 690 | Input/Output: [[19.99997882574789 -83] -63.00002117425211]
Test Case: 691 | Input/Output: [[-2.3422280808224087 75] 72.65777191917759]
Test Case: 692 | Input/Output: [[-0.42177010429425366 96] 95.57822989570575]
Test Case: 693 | Input/Output: [[19.209915735277747 -70] -50.79008426472225]
Test Case: 694 | Input/Output: [[-42.117549872393425 -70] -112.11754987239343]
Test Case: 695 | Input/Output: [[66.43569774837027 -96] -29.564302251629726]
Test Case: 696 | Input/Output: [[90.38599217756763 -51] 39.38599217756763]
Test Case: 697 | Input/Output: [[11.88204079984581 -36] -24.11795920015419]
Test Case: 698 | Input/Output: [[-4.132056930655878 0] -4.132056930655878]
Test Case: 699 | Input/Output: [[55.04057643043657 53] 108.04057643043657]
Test Case: 700 | Input/Output: [[-98.09107072736919 -58] -156.09107072736919]
Test Case: 701 | Input/Output: [[-91.80742381203095 25] -66.80742381203095]
Test Case: 702 | Input/Output: [[44.735855370450224 -15] 29.735855370450224]
Test Case: 703 | Input/Output: [[53.941722438555274 -51] 2.9417224385552743]
Test Case: 704 | Input/Output: [[-66.60036276201278 66] -0.6003627620127787]
Test Case: 705 | Input/Output: [[38.774900546613225 -88] -49.225099453386775]
Test Case: 706 | Input/Output: [[93.68736426265372 -71] 22.687364262653716]
Test Case: 707 | Input/Output: [[-96.61622944836945 18] -78.61622944836945]
Test Case: 708 | Input/Output: [[-37.983148994194416 28] -9.983148994194416]
Test Case: 709 | Input/Output: [[-31.860109601119447 -27] -58.86010960111945]
Test Case: 710 | Input/Output: [[14.356674216030328 52] 66.35667421603033]
Test Case: 711 | Input/Output: [[59.289867755538694 0] 59.289867755538694]
Test Case: 712 | Input/Output: [[85.36096156598128 8] 93.36096156598128]
Test Case: 713 | Input/Output: [[-0.27267395910175196 29] 28.727326040898248]
Test Case: 714 | Input/Output: [[-56.98977427129665 34] -22.989774271296653]
Test Case: 715 | Input/Output: [[24.377166793090538 1] 25.377166793090538]
Test Case: 716 | Input/Output: [[28.79851068312712 40] 68.79851068312712]
Test Case: 717 | Input/Output: [[55.30356608934002 -63] -7.696433910659977]
Test Case: 718 | Input/Output: [[-81.92876206678332 -66] -147.92876206678332]
Test Case: 719 | Input/Output: [[-8.967547016330357 -65] -73.96754701633036]
Test Case: 720 | Input/Output: [[52.173361495099385 -7] 45.173361495099385]
Test Case: 721 | Input/Output: [[-42.48783220479484 -12] -54.48783220479484]
Test Case: 722 | Input/Output: [[-33.704868001133576 93] 59.295131998866424]
Test Case: 723 | Input/Output: [[-55.623878378855586 -48] -103.62387837885558]
Test Case: 724 | Input/Output: [[-49.568738089766626 11] -38.568738089766626]
Test Case: 725 | Input/Output: [[52.24839752594448 5] 57.24839752594448]
Test Case: 726 | Input/Output: [[74.20746509298681 98] 172.2074650929868]
Test Case: 727 | Input/Output: [[24.0000133862452 33] 57.0000133862452]
Test Case: 728 | Input/Output: [[72.5762055934193 -37] 35.5762055934193]
Test Case: 729 | Input/Output: [[97.35145438949232 -52] 45.35145438949232]
Test Case: 730 | Input/Output: [[-12.299001751186921 -30] -42.29900175118692]
Test Case: 731 | Input/Output: [[-4.20196854180179 -60] -64.20196854180179]
Test Case: 732 | Input/Output: [[85.92654647113511 59] 144.9265464711351]
Test Case: 733 | Input/Output: [[96.59842618037894 25] 121.59842618037894]
Test Case: 734 | Input/Output: [[1.518446864017946 -49] -47.481553135982054]
Test Case: 735 | Input/Output: [[-57.86395765896219 65] 7.1360423410378075]
Test Case: 736 | Input/Output: [[44.70331444137875 58] 102.70331444137875]
Test Case: 737 | Input/Output: [[76.7569243904031 83] 159.7569243904031]
Test Case: 738 | Input/Output: [[7.032202930111907 -79] -71.96779706988809]
Test Case: 739 | Input/Output: [[39.71688226493083 42] 81.71688226493083]
Test Case: 740 | Input/Output: [[-98.80162120428781 19] -79.80162120428781]
Test Case: 741 | Input/Output: [[89.82690196346363 70] 159.82690196346363]
Test Case: 742 | Input/Output: [[-53.22218801255578 69] 15.777811987444217]
Test Case: 743 | Input/Output: [[-99.35698000271496 78] -21.356980002714963]
Test Case: 744 | Input/Output: [[95.2556160312603 -92] 3.2556160312603026]
Test Case: 745 | Input/Output: [[13.595565503545089 -28] -14.404434496454911]
Test Case: 746 | Input/Output: [[-16.86594604264755 77] 60.13405395735245]
Test Case: 747 | Input/Output: [[33.23691654755777 75] 108.23691654755777]
Test Case: 748 | Input/Output: [[61.38685182270578 65] 126.38685182270578]
Test Case: 749 | Input/Output: [[88.45237761388066 58] 146.45237761388066]
Test Case: 750 | Input/Output: [[-14.606575092114667 -25] -39.60657509211467]
Test Case: 751 | Input/Output: [[-78.64764890775675 17] -61.647648907756746]
Test Case: 752 | Input/Output: [[-77.68563734651156 -58] -135.68563734651156]
Test Case: 753 | Input/Output: [[-23.323678984048342 1] -22.323678984048342]
Test Case: 754 | Input/Output: [[87.29269000993509 -50] 37.292690009935086]
Test Case: 755 | Input/Output: [[-51.23269312687915 -29] -80.23269312687916]
Test Case: 756 | Input/Output: [[-65.40076684272015 55] -10.400766842720145]
Test Case: 757 | Input/Output: [[-17.104883267313653 -15] -32.10488326731365]
Test Case: 758 | Input/Output: [[41.34945968716934 98] 139.34945968716934]
Test Case: 759 | Input/Output: [[40.887982363758965 81] 121.88798236375897]
Test Case: 760 | Input/Output: [[47.24121272427416 -54] -6.758787275725837]
Test Case: 761 | Input/Output: [[14.604384885006766 65] 79.60438488500677]
Test Case: 762 | Input/Output: [[5.129425100748634 -11] -5.870574899251366]
Test Case: 763 | Input/Output: [[73.99486921622508 -46] 27.994869216225084]
Test Case: 764 | Input/Output: [[-50.84207620397343 81] 30.157923796026573]
Test Case: 765 | Input/Output: [[-8.193838939142736 -51] -59.193838939142736]
Test Case: 766 | Input/Output: [[17.392419666748467 22] 39.39241966674847]
Test Case: 767 | Input/Output: [[5.620243411809909 64] 69.62024341180991]
Test Case: 768 | Input/Output: [[-85.22360136780168 57] -28.223601367801677]
Test Case: 769 | Input/Output: [[93.98684033454828 -79] 14.986840334548276]
Test Case: 770 | Input/Output: [[-66.16883359776335 -46] -112.16883359776335]
Test Case: 771 | Input/Output: [[15.375676861034876 -56] -40.624323138965124]
Test Case: 772 | Input/Output: [[81.64957040232855 25] 106.64957040232855]
Test Case: 773 | Input/Output: [[-12.30015999293812 76] 63.69984000706188]
Test Case: 774 | Input/Output: [[79.55125329172114 74] 153.55125329172114]
Test Case: 775 | Input/Output: [[22.246906332398368 -21] 1.2469063323983676]
Test Case: 776 | Input/Output: [[20.575669624598774 -80] -59.424330375401226]
Test Case: 777 | Input/Output: [[-25.74901645477017 66] 40.25098354522983]
Test Case: 778 | Input/Output: [[-12.021773229172638 95] 82.97822677082736]
Test Case: 779 | Input/Output: [[-46.54445919802641 5] -41.54445919802641]
Test Case: 780 | Input/Output: [[-12.49110752214186 79] 66.50889247785814]
Test Case: 781 | Input/Output: [[-99.13079141280407 70] -29.130791412804072]
Test Case: 782 | Input/Output: [[-40.12700905138755 -77] -117.12700905138755]
Test Case: 783 | Input/Output: [[80.70165678839473 -74] 6.701656788394729]
Test Case: 784 | Input/Output: [[14.530954120017043 -12] 2.530954120017043]
Test Case: 785 | Input/Output: [[-87.1469490806462 -89] -176.1469490806462]
Test Case: 786 | Input/Output: [[-7.0213656875426835 85] 77.97863431245732]
Test Case: 787 | Input/Output: [[22.35443361212137 40] 62.35443361212137]
Test Case: 788 | Input/Output: [[-64.65078136363951 19] -45.65078136363951]
Test Case: 789 | Input/Output: [[-10.722998880472772 -35] -45.72299888047277]
Test Case: 790 | Input/Output: [[-94.28446679651275 -76] -170.28446679651273]
Test Case: 791 | Input/Output: [[78.10868737712454 -59] 19.10868737712454]
Test Case: 792 | Input/Output: [[-67.60223544876835 -31] -98.60223544876835]
Test Case: 793 | Input/Output: [[19.472815242437136 49] 68.47281524243714]
Test Case: 794 | Input/Output: [[-87.91309655951225 52] -35.913096559512255]
Test Case: 795 | Input/Output: [[26.73037705557863 10] 36.73037705557863]
Test Case: 796 | Input/Output: [[-42.37209671199622 29] -13.372096711996221]
Test Case: 797 | Input/Output: [[-29.915783781010134 -29] -58.915783781010134]
Test Case: 798 | Input/Output: [[-27.376231530251744 -84] -111.37623153025174]
Test Case: 799 | Input/Output: [[17.827548856259767 -96] -78.17245114374023]
Test Case: 800 | Input/Output: [[-72.09621901198253 -21] -93.09621901198253]
Test Case: 801 | Input/Output: [[-91.49136487629727 -37] -128.49136487629727]
Test Case: 802 | Input/Output: [[22.736706714736158 96] 118.73670671473616]
Test Case: 803 | Input/Output: [[30.040305772073737 -30] 0.040305772073736534]
Test Case: 804 | Input/Output: [[-58.67808722171062 92] 33.32191277828938]
Test Case: 805 | Input/Output: [[-90.20905083445928 -40] -130.20905083445928]
Test Case: 806 | Input/Output: [[-82.05039143888453 -50] -132.05039143888453]
Test Case: 807 | Input/Output: [[59.428154734937976 91] 150.42815473493798]
Test Case: 808 | Input/Output: [[74.33976351117616 92] 166.33976351117616]
Test Case: 809 | Input/Output: [[45.99480530493605 99] 144.99480530493605]
Test Case: 810 | Input/Output: [[7.340352757858852 -2] 5.340352757858852]
Test Case: 811 | Input/Output: [[-28.63544922935202 -50] -78.63544922935202]
Test Case: 812 | Input/Output: [[28.638193655264956 -32] -3.3618063447350437]
Test Case: 813 | Input/Output: [[-13.867224291435008 40] 26.132775708564992]
Test Case: 814 | Input/Output: [[-68.01780129046185 39] -29.017801290461847]
Test Case: 815 | Input/Output: [[-51.83464435451266 98] 46.16535564548734]
Test Case: 816 | Input/Output: [[-63.37470537595351 78] 14.62529462404649]
Test Case: 817 | Input/Output: [[-66.09136676809817 -73] -139.09136676809817]
Test Case: 818 | Input/Output: [[60.9230205089701 -42] 18.923020508970097]
Test Case: 819 | Input/Output: [[-6.696953079904517 -9] -15.696953079904517]
Test Case: 820 | Input/Output: [[-76.98256483680117 -87] -163.98256483680117]
Test Case: 821 | Input/Output: [[-9.606459278045662 76] 66.39354072195434]
Test Case: 822 | Input/Output: [[-11.937085773798927 42] 30.062914226201073]
Test Case: 823 | Input/Output: [[85.70412514891004 98] 183.70412514891004]
Test Case: 824 | Input/Output: [[-99.34165138446873 -43] -142.34165138446872]
Test Case: 825 | Input/Output: [[-31.14725782842494 95] 63.85274217157506]
Test Case: 826 | Input/Output: [[-94.49225047039829 -81] -175.4922504703983]
Test Case: 827 | Input/Output: [[56.07291304217131 -81] -24.927086957828692]
Test Case: 828 | Input/Output: [[28.44235351481069 -9] 19.44235351481069]
Test Case: 829 | Input/Output: [[72.6093196055649 -38] 34.609319605564906]
Test Case: 830 | Input/Output: [[-89.6211616638019 87] -2.6211616638018995]
Test Case: 831 | Input/Output: [[27.134174676273233 -21] 6.134174676273233]
Test Case: 832 | Input/Output: [[68.16045317858493 66] 134.16045317858493]
Test Case: 833 | Input/Output: [[75.78629158188275 -38] 37.78629158188275]
Test Case: 834 | Input/Output: [[-95.68108080873483 -81] -176.68108080873483]
Test Case: 835 | Input/Output: [[67.58691359322376 -39] 28.586913593223755]
Test Case: 836 | Input/Output: [[94.59153156059901 41] 135.591531560599]
Test Case: 837 | Input/Output: [[29.597416331137424 33] 62.597416331137424]
Test Case: 838 | Input/Output: [[-87.04439678792815 42] -45.04439678792815]
Test Case: 839 | Input/Output: [[-18.061446906803 79] 60.938553093197]
Test Case: 840 | Input/Output: [[21.31149068028506 -91] -69.68850931971494]
Test Case: 841 | Input/Output: [[75.65465153095914 34] 109.65465153095914]
Test Case: 842 | Input/Output: [[-25.764164086341637 -4] -29.764164086341637]
Test Case: 843 | Input/Output: [[-86.1909598557353 90] 3.8090401442646993]
Test Case: 844 | Input/Output: [[-91.39452082438926 25] -66.39452082438926]
Test Case: 845 | Input/Output: [[70.9447983501804 -84] -13.055201649819594]
Test Case: 846 | Input/Output: [[-84.35139691356288 77] -7.35139691356288]
Test Case: 847 | Input/Output: [[-91.87318421378474 -71] -162.87318421378473]
Test Case: 848 | Input/Output: [[75.69405243000892 80] 155.69405243000892]
Test Case: 849 | Input/Output: [[-74.26535497762403 -10] -84.26535497762403]
Test Case: 850 | Input/Output: [[-52.51814635319138 84] 31.481853646808617]
Test Case: 851 | Input/Output: [[42.89453680180742 -16] 26.89453680180742]
Test Case: 852 | Input/Output: [[36.96684111494474 -89] -52.03315888505526]
Test Case: 853 | Input/Output: [[-20.754267068801965 -30] -50.754267068801965]
Test Case: 854 | Input/Output: [[-90.82754644120288 57] -33.827546441202884]
Test Case: 855 | Input/Output: [[69.40218378947262 -31] 38.402183789472616]
Test Case: 856 | Input/Output: [[-49.67827936895277 -43] -92.67827936895277]
Test Case: 857 | Input/Output: [[-94.22265474121349 -39] -133.2226547412135]
Test Case: 858 | Input/Output: [[77.37870460023888 32] 109.37870460023888]
Test Case: 859 | Input/Output: [[50.96409094167939 -40] 10.964090941679387]
Test Case: 860 | Input/Output: [[-27.049943428333265 44] 16.950056571666735]
Test Case: 861 | Input/Output: [[-37.49662054666032 9] -28.496620546660317]
Test Case: 862 | Input/Output: [[13.172434538708117 53] 66.17243453870812]
Test Case: 863 | Input/Output: [[-4.376575560377276 -98] -102.37657556037728]
Test Case: 864 | Input/Output: [[94.40283778968902 -29] 65.40283778968902]
Test Case: 865 | Input/Output: [[-53.81333104336012 85] 31.186668956639878]
Test Case: 866 | Input/Output: [[0.9123761286757599 28] 28.91237612867576]
Test Case: 867 | Input/Output: [[-30.13688720778819 -47] -77.13688720778819]
Test Case: 868 | Input/Output: [[-77.23515480858447 -29] -106.23515480858447]
Test Case: 869 | Input/Output: [[-36.603985924706926 27] -9.603985924706926]
Test Case: 870 | Input/Output: [[64.50731660901175 -88] -23.492683390988248]
Test Case: 871 | Input/Output: [[-47.67278447130625 91] 43.32721552869375]
Test Case: 872 | Input/Output: [[74.20787337079472 -52] 22.207873370794715]
Test Case: 873 | Input/Output: [[-93.45640475207216 -21] -114.45640475207216]
Test Case: 874 | Input/Output: [[36.526910002276765 -97] -60.473089997723235]
Test Case: 875 | Input/Output: [[-90.8553158723272 -56] -146.8553158723272]
Test Case: 876 | Input/Output: [[27.98783071096321 51] 78.98783071096321]
Test Case: 877 | Input/Output: [[-36.067243365272894 16] -20.067243365272894]
Test Case: 878 | Input/Output: [[24.676679443503417 -44] -19.323320556496583]
Test Case: 879 | Input/Output: [[-87.25132518406824 64] -23.251325184068236]
Test Case: 880 | Input/Output: [[-60.22763819229624 60] -0.22763819229624005]
Test Case: 881 | Input/Output: [[-20.82848343634869 -47] -67.82848343634869]
Test Case: 882 | Input/Output: [[42.887941053991455 -29] 13.887941053991455]
Test Case: 883 | Input/Output: [[-18.996616832334382 -86] -104.99661683233438]
Test Case: 884 | Input/Output: [[16.52405852971779 -52] -35.47594147028221]
Test Case: 885 | Input/Output: [[-23.758880142579187 -29] -52.75888014257919]
Test Case: 886 | Input/Output: [[-16.084832574114373 50] 33.91516742588563]
Test Case: 887 | Input/Output: [[-89.36132298733179 -17] -106.36132298733179]
Test Case: 888 | Input/Output: [[-88.7054842467377 -8] -96.7054842467377]
Test Case: 889 | Input/Output: [[-46.91730331457706 31] -15.917303314577062]
Test Case: 890 | Input/Output: [[74.16025123070568 66] 140.16025123070568]
Test Case: 891 | Input/Output: [[-95.22883364681256 -41] -136.22883364681257]
Test Case: 892 | Input/Output: [[26.964196973815064 -58] -31.035803026184936]
Test Case: 893 | Input/Output: [[-43.18077580084119 22] -21.18077580084119]
Test Case: 894 | Input/Output: [[13.102266367089356 -1] 12.102266367089356]
Test Case: 895 | Input/Output: [[97.33154342802317 -24] 73.33154342802317]
Test Case: 896 | Input/Output: [[-95.67534722284452 37] -58.67534722284452]
Test Case: 897 | Input/Output: [[-66.1057170216576 49] -17.105717021657597]
Test Case: 898 | Input/Output: [[-77.73072129368974 -14] -91.73072129368974]
Test Case: 899 | Input/Output: [[33.42334810564935 -55] -21.576651894350647]
Test Case: 900 | Input/Output: [[66.5537637274019 82] 148.5537637274019]
Test Case: 901 | Input/Output: [[85.9488404445392 -93] -7.051159555460799]
Test Case: 902 | Input/Output: [[-89.12636744823712 14] -75.12636744823712]
Test Case: 903 | Input/Output: [[-55.4681523013008 -15] -70.46815230130079]
Test Case: 904 | Input/Output: [[-74.39060345558626 -31] -105.39060345558626]
Test Case: 905 | Input/Output: [[15.29201013709627 18] 33.29201013709627]
Test Case: 906 | Input/Output: [[-4.34085664115122 30] 25.65914335884878]
Test Case: 907 | Input/Output: [[-70.43687336832096 -18] -88.43687336832096]
Test Case: 908 | Input/Output: [[50.32980629668512 4] 54.32980629668512]
Test Case: 909 | Input/Output: [[87.56040395966306 8] 95.56040395966306]
Test Case: 910 | Input/Output: [[-24.392434730319295 52] 27.607565269680705]
Test Case: 911 | Input/Output: [[5.656650347035267 -37] -31.343349652964733]
Test Case: 912 | Input/Output: [[50.16531353093163 96] 146.16531353093163]
Test Case: 913 | Input/Output: [[-39.71657038023617 -48] -87.71657038023616]
Test Case: 914 | Input/Output: [[59.613828193857245 -27] 32.613828193857245]
Test Case: 915 | Input/Output: [[70.22711054821252 42] 112.22711054821252]
Test Case: 916 | Input/Output: [[-78.11196589418435 -14] -92.11196589418435]
Test Case: 917 | Input/Output: [[9.718792163349633 -40] -30.281207836650367]
Test Case: 918 | Input/Output: [[-14.211033106855012 -13] -27.211033106855012]
Test Case: 919 | Input/Output: [[-31.158832373827508 -89] -120.15883237382751]
Test Case: 920 | Input/Output: [[74.6801067266021 -89] -14.319893273397895]
Test Case: 921 | Input/Output: [[29.121552983534514 -17] 12.121552983534514]
Test Case: 922 | Input/Output: [[73.05958420039534 -4] 69.05958420039534]
Test Case: 923 | Input/Output: [[-90.32055756391652 53] -37.32055756391652]
Test Case: 924 | Input/Output: [[-41.461211519517626 85] 43.538788480482374]
Test Case: 925 | Input/Output: [[-18.353157078184566 -17] -35.353157078184566]
Test Case: 926 | Input/Output: [[88.0965746766368 82] 170.0965746766368]
Test Case: 927 | Input/Output: [[-25.03980404683928 57] 31.96019595316072]
Test Case: 928 | Input/Output: [[30.85456255602955 50] 80.85456255602955]
Test Case: 929 | Input/Output: [[83.43985088433689 -68] 15.439850884336892]
Test Case: 930 | Input/Output: [[-33.5773001964575 5] -28.5773001964575]
Test Case: 931 | Input/Output: [[28.07946280159831 -74] -45.92053719840169]
Test Case: 932 | Input/Output: [[70.69966780974667 69] 139.69966780974667]
Test Case: 933 | Input/Output: [[-60.626871809432735 31] -29.626871809432735]
Test Case: 934 | Input/Output: [[-66.7552908375268 60] -6.7552908375268]
Test Case: 935 | Input/Output: [[82.28319665553988 -15] 67.28319665553988]
Test Case: 936 | Input/Output: [[22.784265707591246 -67] -44.215734292408754]
Test Case: 937 | Input/Output: [[49.24089623949385 -66] -16.75910376050615]
Test Case: 938 | Input/Output: [[-62.0087634911096 100] 37.9912365088904]
Test Case: 939 | Input/Output: [[-32.76948772750316 2] -30.76948772750316]
Test Case: 940 | Input/Output: [[19.722509980665734 37] 56.722509980665734]
Test Case: 941 | Input/Output: [[-7.4826776858404145 22] 14.517322314159586]
Test Case: 942 | Input/Output: [[-53.60436213125346 77] 23.39563786874654]
Test Case: 943 | Input/Output: [[20.304622050320972 -32] -11.695377949679028]
Test Case: 944 | Input/Output: [[67.68761031997218 30] 97.68761031997218]
Test Case: 945 | Input/Output: [[-83.42545409647022 81] -2.4254540964702187]
Test Case: 946 | Input/Output: [[-57.43198623634782 -16] -73.43198623634783]
Test Case: 947 | Input/Output: [[95.44892516767717 -96] -0.5510748323228256]
Test Case: 948 | Input/Output: [[71.85375384547302 -47] 24.853753845473022]
Test Case: 949 | Input/Output: [[-29.628137129363097 68] 38.3718628706369]
Test Case: 950 | Input/Output: [[6.9055551899260195 28] 34.90555518992602]
Test Case: 951 | Input/Output: [[-72.21168459240137 73] 0.7883154075986312]
Test Case: 952 | Input/Output: [[-44.17846377876895 69] 24.82153622123105]
Test Case: 953 | Input/Output: [[-95.78490649558493 -21] -116.78490649558493]
Test Case: 954 | Input/Output: [[-73.94781694131274 68] -5.9478169413127375]
Test Case: 955 | Input/Output: [[-74.64276912614861 29] -45.64276912614861]
Test Case: 956 | Input/Output: [[-52.02354439913923 -32] -84.02354439913924]
Test Case: 957 | Input/Output: [[-74.91644321542772 -28] -102.91644321542772]
Test Case: 958 | Input/Output: [[92.02488728128426 -53] 39.024887281284265]
Test Case: 959 | Input/Output: [[45.20823441902081 40] 85.20823441902081]
Test Case: 960 | Input/Output: [[-73.95468916599577 75] 1.0453108340042263]
Test Case: 961 | Input/Output: [[-43.503522189004414 -97] -140.5035221890044]
Test Case: 962 | Input/Output: [[77.98768883122506 44] 121.98768883122506]
Test Case: 963 | Input/Output: [[49.9584782761566 -34] 15.958478276156598]
Test Case: 964 | Input/Output: [[91.56300798154771 -43] 48.56300798154771]
Test Case: 965 | Input/Output: [[-3.228195150682353 -35] -38.22819515068235]
Test Case: 966 | Input/Output: [[-21.31527968941873 34] 12.68472031058127]
Test Case: 967 | Input/Output: [[-26.94700713469868 81] 54.05299286530132]
Test Case: 968 | Input/Output: [[10.76698330171854 -14] -3.2330166982814603]
Test Case: 969 | Input/Output: [[-92.19985923393254 -43] -135.19985923393256]
Test Case: 970 | Input/Output: [[-84.12876257824975 41] -43.12876257824975]
Test Case: 971 | Input/Output: [[-23.17326125684727 25] 1.826738743152731]
Test Case: 972 | Input/Output: [[64.24519448408569 -35] 29.245194484085687]
Test Case: 973 | Input/Output: [[-40.31798559306594 -53] -93.31798559306594]
Test Case: 974 | Input/Output: [[68.4094900251371 -76] -7.590509974862897]
Test Case: 975 | Input/Output: [[45.72852152812669 16] 61.72852152812669]
Test Case: 976 | Input/Output: [[87.79220006981797 -1] 86.79220006981797]
Test Case: 977 | Input/Output: [[11.128581198711316 60] 71.12858119871132]
Test Case: 978 | Input/Output: [[-40.52354563535414 -39] -79.52354563535414]
Test Case: 979 | Input/Output: [[-37.71450101806151 -83] -120.71450101806151]
Test Case: 980 | Input/Output: [[33.525608910726305 88] 121.5256089107263]
Test Case: 981 | Input/Output: [[-2.434607813752109 -45] -47.43460781375211]
Test Case: 982 | Input/Output: [[-0.7904765005125114 93] 92.20952349948749]
Test Case: 983 | Input/Output: [[65.90325521885819 -6] 59.90325521885819]
Test Case: 984 | Input/Output: [[77.4438214697172 74] 151.4438214697172]
Test Case: 985 | Input/Output: [[-85.99234842541148 -50] -135.99234842541148]
Test Case: 986 | Input/Output: [[-26.54754855154893 4] -22.54754855154893]
Test Case: 987 | Input/Output: [[72.63144182426339 58] 130.6314418242634]
Test Case: 988 | Input/Output: [[99.31287083133935 35] 134.31287083133935]
Test Case: 989 | Input/Output: [[35.68615508301008 -53] -17.313844916989922]
Test Case: 990 | Input/Output: [[-70.00148864855397 41] -29.001488648553973]
Test Case: 991 | Input/Output: [[-19.956175052650124 -13] -32.956175052650124]
Test Case: 992 | Input/Output: [[64.80044500492693 -90] -25.199554995073072]
Test Case: 993 | Input/Output: [[-49.40125550114192 -89] -138.40125550114192]
Test Case: 994 | Input/Output: [[-38.06017880145125 -43] -81.06017880145126]
Test Case: 995 | Input/Output: [[30.447271281494835 35] 65.44727128149484]
Test Case: 996 | Input/Output: [[84.92895628606612 -55] 29.928956286066125]
Test Case: 997 | Input/Output: [[-5.627244156317033 14] 8.372755843682967]
Test Case: 998 | Input/Output: [[-30.031383499707715 71] 40.968616500292285]
Test Case: 999 | Input/Output: [[-63.913259068755224 -81] -144.91325906875522]
;;******************************
Registered instructions: #{code_atom genome_uniform_tag_mutation code_car print_newline integer_sub integer_inc boolean_stackdepth return_exec_pop zip_dup_items integer_tag_string_instruction vector_integer_eq autoconstructive_integer_rand boolean_pop genome_close_inc string_fromchar vector_string_shove zip_yankdup genome_new genome_gene_genome_instruction vector_float_yankdup exec_yankdup vector_integer_shove integer_yankdup string_flush boolean_swap zip_empty exec_shove vector_boolean_yank code_eq exec_y boolean_yank integer_eq genome_silence string_butlast code_contains string_conjchar code_do*count vector_float_last genome_uniform_instruction_mutation genome_pop string_substring integer_mult vector_string_dup_times code_length vector_integer_dup boolean_or code_position boolean_empty zip_fromcode print_vector_string vector_boolean_swap return_frominteger char_dup_items vector_float_pushall return_genome_pop genome_gene_close char_iswhitespace code_cdr exec_do*vector_integer integer_rand vector_string_replacefirst string_first vector_boolean_first exec_do*while exec_string_iterate string_indexofchar vector_float_replace integer_fromstring code_list code_swap char_frominteger genome_gene_randomize vector_integer_emptyvector vector_string_eq exec_dup_items vector_float_butlast boolean_dup_items genome_uniform_string_mutation exec_empty zip_end? exec_fromzipnode string_shove vector_boolean_pushall zip_insert_left_fromcode exec_rot integer_tag_integer_instruction vector_string_concat vector_float_indexof genome_instruction_eq code_pop vector_string_subvec vector_integer_swap code_subst char_pop return_string_pop zip_yank exec_dup vector_integer_butlast vector_float_rest vector_string_flush boolean_fromfloat code_fromziprights float_sin boolean_flush char_isdigit float_lte exec_fromziproot vector_integer_empty print_code vector_string_stackdepth string_reverse exec_k vector_integer_yank float_frominteger char_rot vector_integer_dup_times print_char integer_tag_boolean_instruction vector_integer_stackdepth vector_boolean_concat boolean_xor integer_gte genome_yankdup vector_float_shove vector_integer_take boolean_dup_times code_quote string_replacefirst return_fromstring exec_fromziplefts vector_integer_yankdup boolean_shove float_lt vector_string_dup vector_string_occurrencesof vector_integer_replace zip_branch? vector_float_reverse float_mod vector_float_subvec integer_tag_code_instruction string_last print_boolean boolean_rot vector_string_rest integer_div vector_float_remove integer_tag_exec_instruction integer_fromfloat integer_lte code_fromzipchildren environment_end vector_integer_rot integer_mod string_concat vector_string_butlast genome_swap code_null exec_do*count vector_float_emptyvector vector_string_yankdup integer_tag_float_instruction integer_rot float_yankdup vector_string_rot zip_replace_fromexec genome_uniform_boolean_mutation vector_string_take vector_float_dup_items integer_add vector_integer_occurrencesof integer_shove string_dup_times genome_dup return_code_pop char_swap integer_max return_fromexec code_wrap genome_genesis return_float_pop code_flush genome_yank zip_shove vector_integer_flush vector_integer_subvec vector_boolean_indexof vector_float_pop char_dup_times genome_uniform_silence_mutation genome_uniform_crossover vector_string_remove vector_integer_contains zip_remove code_append vector_float_eq vector_integer_conj string_eq zip_leftmost code_yankdup code_rot integer_stackdepth float_max vector_boolean_set zip_append_child_fromexec zip_next vector_float_conj zip_fromexec code_dup_times float_dup_items string_take zip_left genome_if_gene_genome_instruction zip_replace_fromcode char_stackdepth return_fromchar genome_eq vector_integer_replacefirst float_stackdepth code_fromziproot integer_dup_times float_fromchar genome_uniform_combination_and_deletion float_gt boolean_dup float_fromboolean code_fromzipnode genome_rot vector_float_replacefirst vector_boolean_conj exec_dup_times vector_boolean_dup vector_integer_indexof vector_string_swap exec_eq string_emptystring string_swap integer_yank exec_while float_empty print_vector_boolean integer_min exec_swap genome_rotate integer_fromchar vector_string_yank string_stackdepth code_do*range string_replacechar char_allfromstring vector_integer_rest vector_boolean_length char_yank vector_float_empty code_fromfloat genome_parent2 return_fromcode string_pop code_dup_items float_eq integer_untag_instruction integer_dup_items vector_boolean_empty zip_insert_child_fromexec vector_string_last string_nth code_do* return_zip_pop vector_string_pop zip_rot vector_integer_nth exec_do*range vector_integer_dup_items exec_if char_shove zip_down zip_insert_left_fromexec code_frominteger vector_boolean_remove vector_integer_remove boolean_invert_first_then_and genome_flush print_string integer_fromboolean char_yankdup code_do vector_string_first boolean_frominteger string_setchar vector_integer_last char_isletter genome_gene_dup vector_integer_concat return_fromzip print_integer genome_uniform_float_mutation code_map boolean_eq float_gte return_fromfloat genome_gene_copy string_occurrencesofchar string_replacefirstchar print_float boolean_rand integer_flush float_shove string_replace char_dup float_pop char_eq vector_float_nth vector_string_conj integer_gt vector_float_dup_times return_integer_pop genome_gene_replace float_sub vector_integer_length vector_float_set vector_string_indexof vector_boolean_rest code_dup vector_boolean_shove zip_eq float_min boolean_not float_mult float_fromstring genome_unsilence code_if vector_boolean_dup_items vector_integer_pop vector_boolean_last exec_do*times zip_pop genome_gene_silent zip_rightmost float_dec vector_float_contains genome_gene_copy_range environment_new exec_do*vector_string code_nthcdr string_empty char_empty exec_pop vector_integer_set autoconstructive_boolean_rand genome_uniform_addition_and_deletion vector_float_rot string_yankdup exec_do*vector_float string_removechar code_extract vector_string_replace vector_float_first genome_parent1 return_tagspace char_flush genome_uniform_integer_mutation vector_float_occurrencesof vector_string_emptyvector float_add code_stackdepth exec_s zip_insert_right_fromexec float_dup integer_tag_char_instruction vector_string_nth zip_stackdepth vector_integer_reverse print_vector_integer char_fromfloat code_do*times code_noop zip_swap code_yank integer_lt vector_boolean_eq genome_stackdepth code_fromziplefts noop_open_paren genome_uniform_deletion vector_boolean_dup_times string_containschar string_yank char_rand zip_flush vector_boolean_rot float_swap exec_fromziprights vector_string_pushall vector_string_set vector_boolean_flush return_fromgenome exec_noop code_size vector_boolean_stackdepth vector_integer_pushall vector_boolean_reverse integer_swap string_split vector_boolean_contains string_fromboolean return_boolean_pop vector_float_dup vector_boolean_replace vector_string_dup_items integer_dup vector_boolean_nth vector_string_length genome_uniform_addition string_rest zip_insert_child_fromcode float_tan string_rot string_rand exec_yank string_parse_to_chars integer_pop integer_empty vector_float_flush genome_if_autoconstructing vector_float_yank noop_delete_prev_paren_pair print_exec zip_append_child_fromcode genome_gene_delete float_dup_times code_empty float_inc zip_right vector_float_length float_rand genome_uniform_close_mutation integer_dec string_contains return_fromboolean vector_float_concat vector_float_stackdepth exec_do*vector_boolean vector_integer_first genome_shove code_rand print_vector_float float_rot return_char_pop vector_string_contains genome_autoconstructing vector_boolean_occurrencesof string_dup_items genome_empty zip_prev genome_toggle_silent vector_string_reverse zip_dup code_cons code_member exec_stackdepth float_flush boolean_and integer_tagged_instruction vector_boolean_butlast string_length float_cos string_frominteger exec_flush vector_string_empty exec_when vector_float_swap genome_close_dec code_insert vector_boolean_pop float_div zip_insert_right_fromcode code_fromboolean vector_boolean_take code_shove environment_begin vector_float_take boolean_invert_second_then_and code_container code_nth vector_boolean_subvec float_yank zip_up vector_boolean_emptyvector vector_boolean_replacefirst genome_alternation zip_dup_times string_fromfloat vector_boolean_yankdup string_dup boolean_yankdup exec_fromzipchildren}
Starting PushGP run.
Clojush version = 3.11.1-1-SNAPSHOTHash of last Git commit = 8a64f874173fae27ed1a77827849de0fade43c2b
GitHub link = https://github.com/lspector/Clojush/commit/8a64f874173fae27ed1a77827849de0fade43c2b
age-combining-function = :average
age-mediated-parent-selection = false
alignment-deviation = 5
alternation-rate = 0.01
atom-generators = (#object[clojush.problems.software.number_io$fn__6694 0x2beee3e8 clojush.problems.software.number_io$fn__6694@2beee3e8] #object[clojush.problems.software.number_io$fn__6696 0x58bad46f clojush.problems.software.number_io$fn__6696@58bad46f] #object[clojush.instructions.tag$tag_instruction_erc$fn__1963 0x20231384 clojush.instructions.tag$tag_instruction_erc$fn__1963@20231384] #object[clojush.instructions.tag$tagged_instruction_erc$fn__1969 0x35becbd4 clojush.instructions.tag$tagged_instruction_erc$fn__1969@35becbd4] in1 in2 print_newline integer_sub integer_inc integer_yankdup integer_mult float_sin float_frominteger float_mod integer_div integer_fromfloat integer_mod integer_rot float_yankdup integer_add integer_shove integer_max integer_stackdepth float_max float_dup_items float_stackdepth integer_dup_times integer_yank integer_min integer_dup_items print_integer print_float integer_flush float_shove float_pop float_sub float_min float_mult float_dec float_add float_dup float_swap integer_swap integer_dup float_tan integer_pop float_dup_times float_inc integer_dec float_rot float_flush float_cos float_div float_yank)
autoconstructive = false
autoconstructive-boolean-rand-enrichment = 0
autoconstructive-clone-decay = :same
autoconstructive-clone-probability = 0.0
autoconstructive-decay = 0.0
autoconstructive-diffmeans-children = 10
autoconstructive-diversification-test = :gecco2016
autoconstructive-environments = false
autoconstructive-genome-instructions = :all
autoconstructive-integer-rand-enrichment = 0
autoconstructive-parent-decay = 0.0
autoconstructive-si-children = 8
autoconstructive-tag-types = [:integer :boolean :exec :float :char :string :code]
close-increment-rate = 0.2
close-parens-probabilities = [0.772 0.206 0.021 0.001]
csv-columns = [:generation :location :total-error :push-program-size]
csv-log-filename = log.csv
decimation-ratio = 1
decimation-tournament-size = 2
edn-additional-keys = [:generation :location]
edn-keys = [:uuid :parent-uuids :genetic-operators :program :genome :total-error :errors]
edn-log-filename = log.edn
epigenetic-markers = []
epsilon-lexicase-epsilon = nil
epsilon-lexicase-probability = 1
error-function = #object[clojush.problems.software.number_io$make_number_io_error_function_from_cases$the_actual_num_io_error_function__6704 0x342723a3 clojush.problems.software.number_io$make_number_io_error_function_from_cases$the_actual_num_io_error_function__6704@342723a3]
error-threshold = 1.0E-4
evalpush-limit = 200
evalpush-time-limit = 0
exit-on-success = true
final-report-simplifications = 5000
genetic-operator-probabilities = {:alternation 0.3, :uniform-mutation 0.2, [:alternation :uniform-mutation] 0.5}
improvement-discount = 0.5
individuals-for-novelty-archive-per-generation = 0
json-log-filename = log.json
json-log-program-strings = false
label = nil
lexicase-leakage = 0.1
lexicase-slippage = 0
log-fitnesses-for-all-cases = false
maintain-ancestors = false
max-error = 5000
max-generations = 200
max-genome-size-in-initial-program = 100
max-point-evaluations = 1.0E101
max-points = 800
meta-error-categories = []
normalization = :none
novelty-distance-metric = :euclidean
novelty-number-of-neighbors-k = 25
parent-reversion-probability = 1.0
parent-selection = :tournament
pop-when-tagging = true
population-size = 1000
print-ancestors-of-solution = false
print-cosmos-data = false
print-csv-logs = false
print-edn-logs = false
print-error-frequencies-by-case = false
print-errors = true
print-history = false
print-homology-data = false
print-json-logs = false
print-selection-counts = false
print-timings = true
problem-specific-initial-report = #object[clojush.problems.software.number_io$number_io_initial_report 0x4ec427 clojush.problems.software.number_io$number_io_initial_report@4ec427]
problem-specific-report = #object[clojush.problems.software.number_io$num_io_report 0xfde487b clojush.problems.software.number_io$num_io_report@fde487b]
random-screen = false
random-seed = -53 -105 -122 -36 -13 -45 5 27 -123 -71 -58 69 -85 13 -56 80
random-threshold-lexicase-probability = 1
random-toggle-lexicase-probability = 1
randomly-truncated-lexicase-probability = 1
record-host = nil
replace-child-that-exceeds-size-limit-with = :random
report-simplifications = 0
return-simplified-on-failure = false
reuse-errors = true
self-mate-avoidance-limit = 0
silent-instruction-probability = 0.2
sort-meta-errors-for-lexicase = :random
tag-enrichment = 0
tag-enrichment-types = [:integer :boolean :exec :float :char :string :code]
tag-limit = 10000
top-level-pop-code = false
top-level-push-code = false
total-error-method = :sum
tournament-size = 7
track-instruction-maps = false
uniform-addition-and-deletion-rate = 0.01
uniform-addition-rate = 0.01
uniform-close-mutation-rate = 0.1
uniform-combination-and-deletion-rate = 0.01
uniform-combination-rate = 0.01
uniform-deletion-rate = 0.01
uniform-mutation-constant-tweak-rate = 0.5
uniform-mutation-float-gaussian-standard-deviation = 1.0
uniform-mutation-int-gaussian-standard-deviation = 1
uniform-mutation-rate = 0.01
uniform-mutation-string-char-change-rate = 0.1
uniform-mutation-tag-gaussian-standard-deviation = 100
uniform-silence-mutation-rate = 0.1
use-single-thread = false

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Generating initial population...
Processing generation: 0
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 0
;;******************************
;; -*- Number IO problem report - generation 0
Test total error for best: 55842.0
Test mean error for best: 27.92100
;;------------------------------
Outputs of best individual on training cases:
Correct output: -57.4559422311 | Program output: 16.5440577689 
Correct output: -71.0754923621 | Program output: -6.0754923621 
Correct output: -66.5176295557 | Program output: 10.4823704443 
Correct output: 149.3187378    | Program output: 63.3187378    
Correct output: -36.5450493525 | Program output: 46.4549506475 
Correct output: 75.4021928097  | Program output: 27.4021928097 
Correct output: 52.2615929867  | Program output: -21.7384070133
Correct output: -19.2178367434 | Program output: -62.2178367434
Correct output: 66.7518906772  | Program output: 65.7518906772 
Correct output: 7.673605441    | Program output: -19.326394559 
Correct output: 23.6294031682  | Program output: -66.3705968318
Correct output: -6.1389033433  | Program output: -44.1389033433
Correct output: 9.2516366816   | Program output: 91.2516366816 
Correct output: 31.3251776267  | Program output: 86.3251776267 
Correct output: 73.3746496408  | Program output: 73.3746496408 
Correct output: 20.0500553336  | Program output: 39.0500553336 
Correct output: -23.2820697498 | Program output: -55.2820697498
Correct output: 120.1004999359 | Program output: 90.1004999359 
Correct output: -155.453212395 | Program output: -57.453212395 
Correct output: 31.10301576    | Program output: 21.10301576   
Correct output: 45.5733057121  | Program output: 84.5733057121 
Correct output: -68.592783645  | Program output: 9.407216355   
Correct output: -125.979392023 | Program output: -55.979392023 
Correct output: -91.9273649148 | Program output: -20.9273649148
Correct output: -92.5660607267 | Program output: -43.5660607267
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_yank} {:instruction integer_rot} {:instruction integer_stackdepth} {:instruction float_yankdup} {:instruction integer_yank} {:instruction in1} {:instruction integer_yank} {:instruction float_yankdup} {:instruction float_stackdepth} {:instruction print_float} {:instruction integer_add} {:instruction float_mult})
Best program: (float_yank integer_rot integer_stackdepth float_yankdup integer_yank in1 integer_yank float_yankdup float_stackdepth print_float integer_add float_mult)
Errors: [74.0 13 65.0 2 77.0 13 86.0 3 83.0 9 48.0 2 74.0 12 43.0 2 1.0 1 27.0 10 90.0 11 38.0 2 82.0 1 55.0 2 0.0 0 19.0 2 32.0 2 30.0 2 98.0 2 10.0 1 39.0 2 78.0 10 70.0 2 71.0 2 49.0 2]
Total: 1449.0
Mean: 28.98
Genome size: 12
Size: 13
Percent parens: 0.077
--- Population Statistics ---
Average total errors in population: 18631.4585969
Median total errors in population: 25329.0
Error averages by case: (734.3417762999976 14.02 736.4628385000009 13.273 734.7180566000011 14.149 746.0985300999974 11.082 732.7951538000013 13.727 731.3844717000017 12.501 730.130177799999 13.404 724.9883418999988 13.384 718.8484326000005 12.485 719.6582261999998 11.625 728.8408500999996 13.113 723.1200189000015 12.554 729.0293982999993 11.844 730.1610915999992 12.674 722.3596182999984 12.465 721.9568613999991 12.653 725.4443015999987 13.343 739.851301299997 13.371 759.7162257999985 13.468 718.5380578000006 10.816 732.3221195000015 12.639 735.6070936999993 12.998 750.7404054999986 13.357 741.4432816000011 13.375 741.1579660000027 13.424)
Error minima by case: (4.4559 8 1.0755 1 2.5176 9 0.6813 3 0.6719 9 0.5978 2 2.2616 8 2.7822 2 0.0 1 2.3264 7 0.6294 9 0.0867 2 0.7484 1 0.6748 2 0.0 0 0.9499 2 0.2821 2 26.1005 2 40.5468 2 0.897 1 0.3594 2 1.4072 9 14.0206 2 0.9274 1 1.5661 2)
Average genome size in population (length): 50.522
Average program size in population (points): 51.522
Average percent parens in population: 0.041
Minimum age in population: 0.0
Maximum age in population: 0.0
Average age in population: 0.0
Median age in population: 0.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 1
Genome diversity (% unique Plush genomes):	 1.0
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 1
Syntactic diversity (% unique Push programs):	 1.0
Total error diversity:				 0.304
Error (vector) diversity:			 0.327
Behavioral diversity:				 0.348
--- Run Statistics ---
Number of program evaluations used so far: 1000
Number of point (instruction) evaluations so far: 1267270
--- Timings ---
Current time: 1529615156772 milliseconds
Total Time:           3.4 seconds
Initialization:       0.1 seconds,  3.4%
Reproduction:         0.6 seconds, 17.0%
Fitness Testing:      2.7 seconds, 79.6%
Report:               0.0 seconds,  0.0%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 0
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 1
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 1
;;******************************
;; -*- Number IO problem report - generation 1
Test total error for best: 55842.0
Test mean error for best: 27.92100
;;------------------------------
Outputs of best individual on training cases:
Correct output: -57.4559422311 | Program output: 16.5440577689 
Correct output: -71.0754923621 | Program output: -6.0754923621 
Correct output: -66.5176295557 | Program output: 10.4823704443 
Correct output: 149.3187378    | Program output: 63.3187378    
Correct output: -36.5450493525 | Program output: 46.4549506475 
Correct output: 75.4021928097  | Program output: 27.4021928097 
Correct output: 52.2615929867  | Program output: -21.7384070133
Correct output: -19.2178367434 | Program output: -62.2178367434
Correct output: 66.7518906772  | Program output: 65.7518906772 
Correct output: 7.673605441    | Program output: -19.326394559 
Correct output: 23.6294031682  | Program output: -66.3705968318
Correct output: -6.1389033433  | Program output: -44.1389033433
Correct output: 9.2516366816   | Program output: 91.2516366816 
Correct output: 31.3251776267  | Program output: 86.3251776267 
Correct output: 73.3746496408  | Program output: 73.3746496408 
Correct output: 20.0500553336  | Program output: 39.0500553336 
Correct output: -23.2820697498 | Program output: -55.2820697498
Correct output: 120.1004999359 | Program output: 90.1004999359 
Correct output: -155.453212395 | Program output: -57.453212395 
Correct output: 31.10301576    | Program output: 21.10301576   
Correct output: 45.5733057121  | Program output: 84.5733057121 
Correct output: -68.592783645  | Program output: 9.407216355   
Correct output: -125.979392023 | Program output: -55.979392023 
Correct output: -91.9273649148 | Program output: -20.9273649148
Correct output: -92.5660607267 | Program output: -43.5660607267
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_div} {:instruction integer_flush} {:instruction print_integer} {:instruction float_min} {:instruction integer_dup} {:instruction float_pop} {:instruction integer_yank} {:instruction integer_mod} {:instruction integer_dup} {:instruction integer_dup} {:instruction integer_inc} {:instruction integer_dup_times} {:instruction in2} {:instruction float_sub} {:instruction float_inc} {:instruction float_add} {:instruction float_rot} {:instruction float_mult} {:instruction integer_flush} {:instruction integer_pop} {:instruction float_min} {:instruction print_integer} {:instruction float_add} {:instruction integer_pop} {:instruction float_tan} {:instruction print_float} {:instruction integer_pop} {:instruction 27} {:instruction integer_mult} {:instruction float_sub} {:instruction float_tan} {:instruction integer_yank} {:instruction integer_min} {:instruction float_max} {:instruction integer_sub} {:instruction float_frominteger} {:instruction integer_pop} {:instruction in1} {:instruction float_dup} {:instruction integer_yankdup} {:instruction print_float} {:instruction in2} {:instruction float_yank} {:instruction float_yankdup} {:instruction integer_yankdup} {:instruction float_sin} {:instruction float_dup_times} {:instruction float_dup_items} {:instruction float_stackdepth} {:instruction integer_rot} {:instruction integer_dup} {:instruction float_dup} {:instruction float_yankdup} {:instruction integer_yankdup} {:instruction integer_min} {:instruction integer_swap} {:instruction float_add} {:instruction float_pop} {:instruction integer_dup} {:instruction integer_pop} {:instruction float_max} {:instruction integer_inc} {:instruction integer_pop} {:instruction float_max} {:instruction float_flush} {:instruction float_mod} {:instruction integer_min} {:instruction float_max} {:instruction integer_mult} {:instruction integer_add} {:instruction float_min} {:instruction float_cos} {:instruction integer_swap} {:instruction integer_swap} {:instruction float_rot} {:instruction float_sub})
Best program: (integer_div integer_flush print_integer float_min integer_dup float_pop integer_yank integer_mod integer_dup integer_dup integer_inc integer_dup_times in2 float_sub float_inc float_add float_rot float_mult integer_flush integer_pop float_min print_integer float_add integer_pop float_tan print_float integer_pop 27 integer_mult float_sub float_tan integer_yank integer_min float_max integer_sub float_frominteger integer_pop in1 float_dup integer_yankdup print_float in2 float_yank float_yankdup integer_yankdup float_sin float_dup_times float_dup_items float_stackdepth integer_rot integer_dup float_dup float_yankdup integer_yankdup integer_min integer_swap float_add float_pop integer_dup integer_pop float_max integer_inc integer_pop float_max float_flush float_mod integer_min float_max integer_mult integer_add float_min float_cos integer_swap integer_swap float_rot float_sub)
Errors: [74.0 13 65.0 2 77.0 13 86.0 3 83.0 9 48.0 2 74.0 12 43.0 2 1.0 1 27.0 10 90.0 11 38.0 2 82.0 1 55.0 2 0.0 0 19.0 2 32.0 2 30.0 2 98.0 2 10.0 1 39.0 2 78.0 10 70.0 2 71.0 2 49.0 2]
Total: 1449.0
Mean: 28.98
Genome size: 76
Size: 77
Percent parens: 0.013
--- Population Statistics ---
Average total errors in population: 6809.7665436000125
Median total errors in population: 1827.5674000000001
Error averages by case: (262.8742376000002 12.828 264.7125723000021 11.082 264.6470853999996 13.063 298.9075032000015 9.558 260.92747720000085 12.224 256.3619279000026 10.35 257.3246887 12.63 243.50325450000292 11.242 240.1816784000013 10.331 229.5892490999999 10.72 258.26138910000026 11.766 237.87149069999825 10.363 259.56176999999764 9.993 260.10840979999824 10.807 245.7314570000024 10.391 235.50283409999795 10.761 243.62824760000214 11.115 281.4696538000003 11.179 321.5214098999972 11.435 228.4219099000011 8.787 261.32536949999695 10.604 265.7744334000008 11.772 299.0992385000028 11.07 279.55947659999595 11.112 276.3587793999985 11.358)
Error minima by case: (9.4559 8 2.836 1 7.3939 9 0.6813 2 0.6719 9 0.5978 2 2.2616 9 0.2225 2 0.0 0 0.1045 7 1.5306 9 0.0867 2 0.7484 1 0.6748 2 0.0 0 0.9499 1 0.2821 2 5.0595 1 40.5468 2 0.897 1 0.5733 1 5.3187 9 14.0206 2 0.9274 1 1.5661 1)
Average genome size in population (length): 60.389
Average program size in population (points): 61.389
Average percent parens in population: 0.022
Minimum age in population: 1.0
Maximum age in population: 2.0
Average age in population: 1.51
Median age in population: 2.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 7
Genome diversity (% unique Plush genomes):	 0.791
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 7
Syntactic diversity (% unique Push programs):	 0.791
Total error diversity:				 0.259
Error (vector) diversity:			 0.289
Behavioral diversity:				 0.314
--- Run Statistics ---
Number of program evaluations used so far: 2000
Number of point (instruction) evaluations so far: 2782545
--- Timings ---
Current time: 1529615162044 milliseconds
Total Time:           8.7 seconds
Initialization:       0.1 seconds,  1.3%
Reproduction:         3.7 seconds, 42.3%
Fitness Testing:      4.4 seconds, 50.4%
Report:               0.5 seconds,  6.0%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 1
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 2
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 2
;;******************************
;; -*- Number IO problem report - generation 2
Test total error for best: 55842.0
Test mean error for best: 27.92100
;;------------------------------
Outputs of best individual on training cases:
Correct output: -57.4559422311 | Program output: 16.5440577689 
Correct output: -71.0754923621 | Program output: -6.0754923621 
Correct output: -66.5176295557 | Program output: 10.4823704443 
Correct output: 149.3187378    | Program output: 63.3187378    
Correct output: -36.5450493525 | Program output: 46.4549506475 
Correct output: 75.4021928097  | Program output: 27.4021928097 
Correct output: 52.2615929867  | Program output: -21.7384070133
Correct output: -19.2178367434 | Program output: -62.2178367434
Correct output: 66.7518906772  | Program output: 65.7518906772 
Correct output: 7.673605441    | Program output: -19.326394559 
Correct output: 23.6294031682  | Program output: -66.3705968318
Correct output: -6.1389033433  | Program output: -44.1389033433
Correct output: 9.2516366816   | Program output: 91.2516366816 
Correct output: 31.3251776267  | Program output: 86.3251776267 
Correct output: 73.3746496408  | Program output: 73.3746496408 
Correct output: 20.0500553336  | Program output: 39.0500553336 
Correct output: -23.2820697498 | Program output: -55.2820697498
Correct output: 120.1004999359 | Program output: 90.1004999359 
Correct output: -155.453212395 | Program output: -57.453212395 
Correct output: 31.10301576    | Program output: 21.10301576   
Correct output: 45.5733057121  | Program output: 84.5733057121 
Correct output: -68.592783645  | Program output: 9.407216355   
Correct output: -125.979392023 | Program output: -55.979392023 
Correct output: -91.9273649148 | Program output: -20.9273649148
Correct output: -92.5660607267 | Program output: -43.5660607267
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_div} {:instruction integer_flush} {:instruction print_integer} {:instruction float_min} {:instruction integer_dup} {:instruction float_pop} {:instruction integer_yank} {:instruction integer_mod} {:instruction integer_dup} {:instruction integer_dup} {:instruction integer_inc} {:instruction integer_dup_times} {:instruction in2} {:instruction float_sub} {:instruction float_inc} {:instruction float_add} {:instruction float_rot} {:instruction float_mult} {:instruction integer_flush} {:instruction integer_pop} {:instruction float_min} {:instruction print_integer} {:instruction float_add} {:instruction integer_pop} {:instruction float_tan} {:instruction print_float} {:instruction integer_pop} {:instruction 27} {:instruction float_sub} {:instruction float_sub} {:instruction float_tan} {:instruction integer_yank} {:instruction integer_min} {:instruction float_max} {:instruction integer_sub} {:instruction float_frominteger} {:instruction integer_pop} {:instruction in1} {:instruction float_dup} {:instruction integer_yankdup} {:instruction print_float} {:instruction in2} {:instruction float_yank} {:instruction float_yankdup} {:instruction integer_yankdup} {:instruction float_sin} {:instruction float_dup_times} {:instruction float_dup_items} {:instruction float_stackdepth} {:instruction integer_rot} {:instruction integer_dup} {:instruction float_dup} {:instruction float_yankdup} {:instruction integer_yankdup} {:instruction integer_min} {:instruction integer_swap} {:instruction float_add} {:instruction float_pop} {:instruction integer_dup} {:instruction integer_pop} {:instruction float_max} {:instruction integer_inc} {:instruction integer_pop} {:instruction float_max} {:instruction float_flush} {:instruction float_mod} {:instruction integer_min} {:instruction float_max} {:instruction integer_yankdup} {:instruction integer_add} {:instruction float_min} {:instruction print_float} {:instruction float_swap} {:instruction integer_yankdup} {:instruction float_dec} {:instruction float_sin} {:instruction in1} {:instruction float_rot} {:instruction float_dup} {:instruction integer_div} {:instruction float_mult} {:instruction float_dup_times} {:instruction integer_div} {:instruction integer_max} {:instruction float_stackdepth} {:instruction integer_dup_items} {:instruction float_dup_items} {:instruction integer_min})
Best program: (integer_div integer_flush print_integer float_min integer_dup float_pop integer_yank integer_mod integer_dup integer_dup integer_inc integer_dup_times in2 float_sub float_inc float_add float_rot float_mult integer_flush integer_pop float_min print_integer float_add integer_pop float_tan print_float integer_pop 27 float_sub float_sub float_tan integer_yank integer_min float_max integer_sub float_frominteger integer_pop in1 float_dup integer_yankdup print_float in2 float_yank float_yankdup integer_yankdup float_sin float_dup_times float_dup_items float_stackdepth integer_rot integer_dup float_dup float_yankdup integer_yankdup integer_min integer_swap float_add float_pop integer_dup integer_pop float_max integer_inc integer_pop float_max float_flush float_mod integer_min float_max integer_yankdup integer_add float_min print_float float_swap integer_yankdup float_dec float_sin in1 float_rot float_dup integer_div float_mult float_dup_times integer_div integer_max float_stackdepth integer_dup_items float_dup_items integer_min)
Errors: [74.0 13 65.0 2 77.0 13 86.0 3 83.0 9 48.0 2 74.0 12 43.0 2 1.0 1 27.0 10 90.0 11 38.0 2 82.0 1 55.0 2 0.0 0 19.0 2 32.0 2 30.0 2 98.0 2 10.0 1 39.0 2 78.0 10 70.0 2 71.0 2 49.0 2]
Total: 1449.0
Mean: 28.98
Genome size: 88
Size: 89
Percent parens: 0.011
--- Population Statistics ---
Average total errors in population: 5011.883874500001
Median total errors in population: 1467.0
Error averages by case: (190.56225049999966 12.503 184.79119470000174 8.646 190.0217747000003 12.877 213.6903743000012 7.662 204.5834095999985 11.318 178.0773073000007 8.079 185.41392180000054 12.802 188.13822470000144 8.808 166.82680060000095 7.871 162.44277780000007 10.396 208.51211779999878 11.471 177.85112789999974 7.937 220.08188029999832 7.701 208.93161109999923 8.546 171.02201910000053 7.675 174.78618219999805 8.731 181.28128610000076 8.55 199.4774177000002 8.71 224.78458109999818 8.948 156.78347440000078 6.417 202.9661311999985 8.494 189.29591109999868 10.865 210.86784480000156 8.541 194.68500759999796 8.438 195.0372460999987 8.986)
Error minima by case: (15.5441 8 5.0755 1 9.4824 10 62.3187 2 17.1047 9 5.5978 2 17.2616 9 0.2225 2 0.0 0 2.3264 8 3.3706 10 0.0867 2 0.7484 1 0.5183 2 0.0 0 1.0501 1 3.8417 2 29.0 2 56.4532 2 0.2962 1 6.5733 1 8.4072 9 54.9794 2 19.9274 1 42.5661 1)
Average genome size in population (length): 52.562
Average program size in population (points): 53.562
Average percent parens in population: 0.025
Minimum age in population: 2.0
Maximum age in population: 4.0
Average age in population: 3.0335
Median age in population: 3.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 26
Genome diversity (% unique Plush genomes):	 0.694
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 26
Syntactic diversity (% unique Push programs):	 0.694
Total error diversity:				 0.132
Error (vector) diversity:			 0.15
Behavioral diversity:				 0.161
--- Run Statistics ---
Number of program evaluations used so far: 3000
Number of point (instruction) evaluations so far: 4099556
--- Timings ---
Current time: 1529615165516 milliseconds
Total Time:          12.0 seconds
Initialization:       0.1 seconds,  1.0%
Reproduction:         5.0 seconds, 42.2%
Fitness Testing:      5.8 seconds, 48.6%
Report:               1.0 seconds,  8.3%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 2
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 3
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 3
;;******************************
;; -*- Number IO problem report - generation 3
Test total error for best: 61083.496799999935
Test mean error for best: 30.54175
;;------------------------------
Outputs of best individual on training cases:
Correct output: -57.4559422311 | Program output: 
-74.027      
Correct output: -71.0754923621 | Program output: 
-65.027      
Correct output: -66.5176295557 | Program output: 
-77.027      
Correct output: 149.3187378    | Program output: 
86.027       
Correct output: -36.5450493525 | Program output: 
-83.027      
Correct output: 75.4021928097  | Program output: 
48.027       
Correct output: 52.2615929867  | Program output: 
74.027       
Correct output: -19.2178367434 | Program output: 
43.027       
Correct output: 66.7518906772  | Program output: 
1.027        
Correct output: 7.673605441    | Program output: 
27.027       
Correct output: 23.6294031682  | Program output: 
90.027       
Correct output: -6.1389033433  | Program output: 
38.027       
Correct output: 9.2516366816   | Program output: 
-82.027      
Correct output: 31.3251776267  | Program output: 
-55.027      
Correct output: 73.3746496408  | Program output: 
0.027        
Correct output: 20.0500553336  | Program output: 
-19.027      
Correct output: -23.2820697498 | Program output: 
32.027       
Correct output: 120.1004999359 | Program output: 
30.027       
Correct output: -155.453212395 | Program output: 
-98.027      
Correct output: 31.10301576    | Program output: 
10.027       
Correct output: 45.5733057121  | Program output: 
-39.027      
Correct output: -68.592783645  | Program output: 
-78.027      
Correct output: -125.979392023 | Program output: 
-70.027      
Correct output: -91.9273649148 | Program output: 
-71.027      
Correct output: -92.5660607267 | Program output: 
-49.027      
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_inc} {:instruction float_add} {:instruction float_yank} {:instruction integer_dup} {:instruction float_min} {:instruction in2} {:instruction float_inc} {:instruction float_div} {:instruction integer_max} {:instruction -51.56082319897437} {:instruction float_tan} {:instruction integer_pop} {:instruction integer_mod} {:instruction float_dup_items} {:instruction integer_dec} {:instruction integer_fromfloat} {:instruction integer_min} {:instruction float_mod} {:instruction integer_shove} {:instruction integer_dup_times} {:instruction integer_swap} {:instruction integer_max} {:instruction float_rot} {:instruction float_sin} {:instruction integer_flush} {:instruction integer_yankdup} {:instruction float_tan} {:instruction integer_max} {:instruction float_mod} {:instruction float_dec} {:instruction integer_dup_times} {:instruction integer_yank} {:instruction float_dup_items} {:instruction float_shove} {:instruction float_dup_items} {:instruction print_newline} {:instruction float_max} {:instruction integer_rot} {:instruction integer_min} {:instruction 9} {:instruction float_swap} {:instruction integer_stackdepth} {:instruction float_frominteger} {:instruction tag_float_196} {:instruction float_swap} {:instruction float_rot} {:instruction integer_add} {:instruction integer_max} {:instruction float_max} {:instruction integer_stackdepth} {:instruction float_add} {:instruction in2} {:instruction float_frominteger} {:instruction print_float} {:instruction integer_dup} {:instruction float_shove} {:instruction float_shove} {:instruction integer_inc} {:instruction float_mod} {:instruction integer_dup} {:instruction integer_dup_items} {:instruction print_integer} {:instruction integer_shove} {:instruction print_float} {:instruction integer_div} {:instruction integer_sub} {:instruction integer_fromfloat} {:instruction integer_mod} {:instruction print_integer} {:instruction integer_mult} {:instruction float_swap} {:instruction integer_stackdepth} {:instruction integer_stackdepth} {:instruction integer_flush} {:instruction float_mod} {:instruction float_swap} {:instruction print_integer} {:instruction integer_mod} {:instruction float_div} {:instruction float_mod} {:instruction float_inc} {:instruction print_float} {:instruction integer_flush} {:instruction float_cos} {:instruction float_mult} {:instruction integer_dec} {:instruction float_sub} {:instruction float_tan} {:instruction float_sub} {:instruction float_sin} {:instruction integer_yank} {:instruction float_dup})
Best program: (integer_inc float_add float_yank integer_dup float_min in2 float_inc float_div integer_max -51.56082319897437 float_tan integer_pop integer_mod float_dup_items integer_dec integer_fromfloat integer_min float_mod integer_shove integer_dup_times integer_swap integer_max float_rot float_sin integer_flush integer_yankdup float_tan integer_max float_mod float_dec integer_dup_times integer_yank float_dup_items float_shove float_dup_items print_newline float_max integer_rot integer_min 9 float_swap integer_stackdepth float_frominteger tag_float_196 float_swap float_rot integer_add integer_max float_max integer_stackdepth float_add in2 float_frominteger print_float integer_dup float_shove float_shove integer_inc float_mod integer_dup integer_dup_items print_integer integer_shove print_float integer_div integer_sub integer_fromfloat integer_mod print_integer integer_mult float_swap integer_stackdepth integer_stackdepth integer_flush float_mod float_swap print_integer integer_mod float_div float_mod float_inc print_float integer_flush float_cos float_mult integer_dec float_sub float_tan float_sub float_sin integer_yank float_dup)
Errors: [16.5711 11 6.0485 11 10.5094 11 63.2917 9 46.482 11 27.3752 10 21.7654 11 62.2448 12 65.7249 10 19.3534 9 66.3976 11 44.1659 10 91.2786 12 86.3522 10 73.3476 12 39.0771 12 55.3091 10 90.0735 11 57.4262 12 21.076 7 84.6003 11 9.4342 9 55.9524 11 20.9004 10 43.5391 10]
Total: 1441.2966
Mean: 28.825932
Genome size: 92
Size: 93
Percent parens: 0.011
--- Population Statistics ---
Average total errors in population: 4103.950639
Median total errors in population: 1449.0
Error averages by case: (167.89172439999987 12.939 160.82185680000038 4.743 169.24858939999984 13.221 183.72745290000037 5.009 178.67068469999973 10.205 149.9899508999999 4.655 168.7050839000002 12.465 152.2444182 5.022 119.73456970000025 3.942 133.88169710000014 10.277 186.88418259999958 11.432 145.73783740000005 4.59 184.66925229999978 3.932 166.34780050000018 4.815 120.0043443999999 3.324 131.20426749999964 4.858 143.46698729999986 4.821 147.11607310000008 4.91 193.63306109999985 4.971 120.97445480000025 3.4 152.6695331999999 4.797 167.68408289999977 10.421 172.56702650000005 4.951 167.5858997999997 4.731 155.12080759999958 4.938)
Error minima by case: (14.8306 7 6.0485 1 9.4824 10 59.6435 2 1.1789 8 14.2731 2 21.7384 9 19.4366 2 0.0 0 1.3104 8 0.3394 9 6.3577 2 3.1153 1 4.3252 2 0.0 0 3.9188 1 19.3432 2 29.0 2 57.4262 2 4.103 1 18.5733 1 8.4072 9 55.9524 2 20.9004 1 43.5391 1)
Average genome size in population (length): 41.567
Average program size in population (points): 42.567
Average percent parens in population: 0.032
Minimum age in population: 3.0
Maximum age in population: 6.0
Average age in population: 4.546
Median age in population: 4.5
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 70
Genome diversity (% unique Plush genomes):	 0.571
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 70
Syntactic diversity (% unique Push programs):	 0.571
Total error diversity:				 0.046
Error (vector) diversity:			 0.052
Behavioral diversity:				 0.056
--- Run Statistics ---
Number of program evaluations used so far: 4000
Number of point (instruction) evaluations so far: 5139531
--- Timings ---
Current time: 1529615168956 milliseconds
Total Time:          15.6 seconds
Initialization:       0.1 seconds,  0.7%
Reproduction:         6.7 seconds, 42.6%
Fitness Testing:      7.2 seconds, 45.8%
Report:               1.7 seconds, 10.9%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 3
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 4
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 4
;;******************************
;; -*- Number IO problem report - generation 4
Test total error for best: 61083.496799999935
Test mean error for best: 30.54175
;;------------------------------
Outputs of best individual on training cases:
Correct output: -57.4559422311 | Program output: 
-74.027      
Correct output: -71.0754923621 | Program output: 
-65.027      
Correct output: -66.5176295557 | Program output: 
-77.027      
Correct output: 149.3187378    | Program output: 
86.027       
Correct output: -36.5450493525 | Program output: 
-83.027      
Correct output: 75.4021928097  | Program output: 
48.027       
Correct output: 52.2615929867  | Program output: 
74.027       
Correct output: -19.2178367434 | Program output: 
43.027       
Correct output: 66.7518906772  | Program output: 
1.027        
Correct output: 7.673605441    | Program output: 
27.027       
Correct output: 23.6294031682  | Program output: 
90.027       
Correct output: -6.1389033433  | Program output: 
38.027       
Correct output: 9.2516366816   | Program output: 
-82.027      
Correct output: 31.3251776267  | Program output: 
-55.027      
Correct output: 73.3746496408  | Program output: 
0.027        
Correct output: 20.0500553336  | Program output: 
-19.027      
Correct output: -23.2820697498 | Program output: 
32.027       
Correct output: 120.1004999359 | Program output: 
30.027       
Correct output: -155.453212395 | Program output: 
-98.027      
Correct output: 31.10301576    | Program output: 
10.027       
Correct output: 45.5733057121  | Program output: 
-39.027      
Correct output: -68.592783645  | Program output: 
-78.027      
Correct output: -125.979392023 | Program output: 
-70.027      
Correct output: -91.9273649148 | Program output: 
-71.027      
Correct output: -92.5660607267 | Program output: 
-49.027      
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_inc} {:instruction float_add} {:instruction float_yank} {:instruction integer_dup} {:instruction float_min} {:instruction in2} {:instruction float_inc} {:instruction float_div} {:instruction integer_max} {:instruction -51.56082319897437} {:instruction float_tan} {:instruction integer_pop} {:instruction integer_mod} {:instruction float_dup_items} {:instruction integer_dec} {:instruction integer_fromfloat} {:instruction integer_min} {:instruction float_mod} {:instruction integer_shove} {:instruction integer_dup_times} {:instruction integer_swap} {:instruction integer_max} {:instruction float_rot} {:instruction float_sin} {:instruction integer_flush} {:instruction integer_yankdup} {:instruction float_tan} {:instruction integer_max} {:instruction float_mod} {:instruction float_dec} {:instruction integer_dup_times} {:instruction integer_yank} {:instruction float_dup_items} {:instruction float_shove} {:instruction float_dup_items} {:instruction print_newline} {:instruction float_max} {:instruction integer_rot} {:instruction integer_min} {:instruction 9} {:instruction float_swap} {:instruction integer_stackdepth} {:instruction float_frominteger} {:instruction tag_float_196} {:instruction float_swap} {:instruction float_rot} {:instruction integer_add} {:instruction integer_max} {:instruction float_max} {:instruction integer_stackdepth} {:instruction float_add} {:instruction in2} {:instruction float_frominteger} {:instruction print_float} {:instruction integer_dup} {:instruction float_shove} {:instruction float_shove} {:instruction integer_inc} {:instruction float_mod} {:instruction integer_dup} {:instruction integer_dup_items} {:instruction print_integer} {:instruction integer_shove} {:instruction print_float} {:instruction integer_div} {:instruction integer_sub} {:instruction integer_fromfloat} {:instruction integer_mod} {:instruction print_integer} {:instruction integer_mult} {:instruction float_swap} {:instruction integer_stackdepth} {:instruction integer_stackdepth} {:instruction integer_flush} {:instruction tag_integer_224} {:instruction float_swap} {:instruction print_integer} {:instruction integer_mod} {:instruction float_div} {:instruction float_mod} {:instruction float_inc} {:instruction print_float} {:instruction integer_flush} {:instruction float_cos} {:instruction float_mult} {:instruction integer_dec} {:instruction float_sub} {:instruction float_tan} {:instruction float_sub} {:instruction float_sin} {:instruction integer_yank} {:instruction float_dup})
Best program: (integer_inc float_add float_yank integer_dup float_min in2 float_inc float_div integer_max -51.56082319897437 float_tan integer_pop integer_mod float_dup_items integer_dec integer_fromfloat integer_min float_mod integer_shove integer_dup_times integer_swap integer_max float_rot float_sin integer_flush integer_yankdup float_tan integer_max float_mod float_dec integer_dup_times integer_yank float_dup_items float_shove float_dup_items print_newline float_max integer_rot integer_min 9 float_swap integer_stackdepth float_frominteger tag_float_196 float_swap float_rot integer_add integer_max float_max integer_stackdepth float_add in2 float_frominteger print_float integer_dup float_shove float_shove integer_inc float_mod integer_dup integer_dup_items print_integer integer_shove print_float integer_div integer_sub integer_fromfloat integer_mod print_integer integer_mult float_swap integer_stackdepth integer_stackdepth integer_flush tag_integer_224 float_swap print_integer integer_mod float_div float_mod float_inc print_float integer_flush float_cos float_mult integer_dec float_sub float_tan float_sub float_sin integer_yank float_dup)
Errors: [16.5711 11 6.0485 11 10.5094 11 63.2917 9 46.482 11 27.3752 10 21.7654 11 62.2448 12 65.7249 10 19.3534 9 66.3976 11 44.1659 10 91.2786 12 86.3522 10 73.3476 12 39.0771 12 55.3091 10 90.0735 11 57.4262 12 21.076 7 84.6003 11 9.4342 9 55.9524 11 20.9004 10 43.5391 10]
Total: 1441.2966
Mean: 28.825932
Genome size: 92
Size: 93
Percent parens: 0.011
--- Population Statistics ---
Average total errors in population: 4214.1288099
Median total errors in population: 1449.0
Error averages by case: (178.7467878 13.224 172.26518299999998 3.392 181.10052309999998 13.414 192.0190804 4.107 187.757467 9.9 157.254106 3.465 180.97450979999996 12.421 155.15277600000002 3.59 116.41330040000001 2.58 139.69116390000002 10.481 195.83825930000003 11.542 150.5983295 3.529 187.10154610000006 2.525 164.71293859999997 3.461 115.56190480000001 1.829 132.09454650000004 3.485 145.71941919999998 3.583 143.39819289999997 3.65 203.904174 3.525 123.3156617 2.464 150.00666579999998 3.471 181.64449810000005 10.374 179.1897318 3.658 178.4483784999999 3.435 160.5276657 3.587)
Error minima by case: (16.5641 7 6.0485 1 10.5024 10 63.2917 3 1.1789 9 27.3752 2 21.7584 10 18.2178 2 0.2481 1 1.3104 8 3.209 9 5.1389 2 3.1153 1 3.3252 2 0.0 0 6.9499 2 22.2821 2 28.1005 2 57.4262 2 3.103 1 17.5733 2 9.4272 8 30.3756 2 3.6764 1 3.0377 2)
Average genome size in population (length): 39.311
Average program size in population (points): 40.311
Average percent parens in population: 0.032
Minimum age in population: 4.0
Maximum age in population: 7.875
Average age in population: 6.075375
Median age in population: 6.125
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 81
Genome diversity (% unique Plush genomes):	 0.592
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 81
Syntactic diversity (% unique Push programs):	 0.592
Total error diversity:				 0.035
Error (vector) diversity:			 0.038
Behavioral diversity:				 0.039
--- Run Statistics ---
Number of program evaluations used so far: 5000
Number of point (instruction) evaluations so far: 6123156
--- Timings ---
Current time: 1529615172263 milliseconds
Total Time:          19.0 seconds
Initialization:       0.1 seconds,  0.6%
Reproduction:         8.0 seconds, 42.4%
Fitness Testing:      8.6 seconds, 45.5%
Report:               2.2 seconds, 11.5%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 4
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 5
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 5
;;******************************
;; -*- Number IO problem report - generation 5
Test total error for best: 60684.17079999995
Test mean error for best: 30.34209
;;------------------------------
Outputs of best individual on training cases:
Correct output: -57.4559422311 | Program output: -74.010       
Correct output: -71.0754923621 | Program output: -65.010       
Correct output: -66.5176295557 | Program output: -77.010       
Correct output: 149.3187378    | Program output: 86.010        
Correct output: -36.5450493525 | Program output: -83.010       
Correct output: 75.4021928097  | Program output: 48.010        
Correct output: 52.2615929867  | Program output: 74.010        
Correct output: -19.2178367434 | Program output: 43.010        
Correct output: 66.7518906772  | Program output: 1.010         
Correct output: 7.673605441    | Program output: 27.010        
Correct output: 23.6294031682  | Program output: 90.010        
Correct output: -6.1389033433  | Program output: 38.010        
Correct output: 9.2516366816   | Program output: -82.010       
Correct output: 31.3251776267  | Program output: -55.010       
Correct output: 73.3746496408  | Program output: 0.010         
Correct output: 20.0500553336  | Program output: -19.010       
Correct output: -23.2820697498 | Program output: 32.010        
Correct output: 120.1004999359 | Program output: 30.010        
Correct output: -155.453212395 | Program output: -98.010       
Correct output: 31.10301576    | Program output: 10.010        
Correct output: 45.5733057121  | Program output: -39.010       
Correct output: -68.592783645  | Program output: -78.010       
Correct output: -125.979392023 | Program output: -70.010       
Correct output: -91.9273649148 | Program output: -71.010       
Correct output: -92.5660607267 | Program output: -49.010       
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_inc} {:instruction float_add} {:instruction float_yank} {:instruction integer_dup} {:instruction float_min} {:instruction in2} {:instruction float_inc} {:instruction float_div} {:instruction integer_max} {:instruction integer_div} {:instruction float_dec} {:instruction print_float} {:instruction integer_dup} {:instruction float_sin} {:instruction float_min} {:instruction float_max} {:instruction float_rot} {:instruction integer_dup} {:instruction float_flush} {:instruction integer_yank} {:instruction integer_flush} {:instruction integer_min} {:instruction integer_dec} {:instruction tag_float_26} {:instruction float_min} {:instruction float_mod} {:instruction integer_pop} {:instruction integer_dup} {:instruction float_rot} {:instruction integer_div} {:instruction integer_dup} {:instruction integer_stackdepth} {:instruction float_frominteger} {:instruction tag_float_196} {:instruction float_swap} {:instruction float_rot} {:instruction integer_add} {:instruction integer_max} {:instruction float_max} {:instruction integer_stackdepth} {:instruction float_add} {:instruction in2} {:instruction float_frominteger} {:instruction print_float} {:instruction integer_dup} {:instruction float_shove} {:instruction float_mod} {:instruction integer_inc} {:instruction float_mod} {:instruction integer_dup} {:instruction integer_dup_items} {:instruction print_integer} {:instruction integer_shove} {:instruction print_float} {:instruction integer_div} {:instruction integer_sub} {:instruction integer_fromfloat} {:instruction integer_mod} {:instruction print_integer} {:instruction integer_mult} {:instruction float_swap} {:instruction integer_stackdepth} {:instruction integer_stackdepth} {:instruction integer_flush} {:instruction float_mod} {:instruction float_swap})
Best program: (integer_inc float_add float_yank integer_dup float_min in2 float_inc float_div integer_max integer_div float_dec print_float integer_dup float_sin float_min float_max float_rot integer_dup float_flush integer_yank integer_flush integer_min integer_dec tag_float_26 float_min float_mod integer_pop integer_dup float_rot integer_div integer_dup integer_stackdepth float_frominteger tag_float_196 float_swap float_rot integer_add integer_max float_max integer_stackdepth float_add in2 float_frominteger print_float integer_dup float_shove float_mod integer_inc float_mod integer_dup integer_dup_items print_integer integer_shove print_float integer_div integer_sub integer_fromfloat integer_mod print_integer integer_mult float_swap integer_stackdepth integer_stackdepth integer_flush float_mod float_swap)
Errors: [16.5541 10 6.0655 11 10.4924 11 63.3087 9 46.465 11 27.3922 9 21.7484 11 62.2278 12 65.7419 10 19.3364 9 66.3806 10 44.1489 10 91.2616 10 86.3352 12 73.3646 11 39.0601 11 55.2921 11 90.0905 11 57.4432 11 21.093 7 84.5833 11 9.4172 10 55.9694 11 20.9174 10 43.5561 10]
Total: 1437.2456000000002
Mean: 28.744911
Genome size: 66
Size: 67
Percent parens: 0.015
--- Population Statistics ---
Average total errors in population: 4217.5771451
Median total errors in population: 1449.0
Error averages by case: (178.36927020000002 13.233 170.72715850000003 3.464 180.50181229999998 13.429 192.4530075 4.175 188.2992262 9.918 157.46426380000003 3.53 179.8870382 12.455 155.39654969999998 3.669 117.87896020000002 2.639 138.9829149 10.512 195.7643422 11.572 150.69575659999998 3.579 188.21550039999997 2.626 165.01352609999998 3.538 117.11455639999998 1.909 133.05378349999995 3.571 145.8558042 3.638 144.58417619999997 3.701 203.36543559999998 3.602 123.66761210000001 2.512 151.3797559 3.545 179.87640170000003 10.405 179.02834780000003 3.715 177.4892256 3.497 160.4417193 3.637)
Error minima by case: (5.8951 7 6.0485 1 10.4824 10 22.6813 3 10.8366 8 20.5978 2 21.7384 8 6.2178 2 1.0 1 8.1902 9 0.6606 9 4.981 2 9.1052 1 4.3252 2 0.0 0 2.9188 2 10.2821 2 30.0 2 40.5468 2 4.103 1 18.5733 2 9.4072 9 14.0206 2 20.9004 1 5.4339 2)
Average genome size in population (length): 38.786
Average program size in population (points): 39.786
Average percent parens in population: 0.034
Minimum age in population: 5.0
Maximum age in population: 9.5
Average age in population: 7.5425625
Median age in population: 7.5625
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 95
Genome diversity (% unique Plush genomes):	 0.654
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 95
Syntactic diversity (% unique Push programs):	 0.654
Total error diversity:				 0.046
Error (vector) diversity:			 0.05
Behavioral diversity:				 0.052
--- Run Statistics ---
Number of program evaluations used so far: 6000
Number of point (instruction) evaluations so far: 7093631
--- Timings ---
Current time: 1529615175400 milliseconds
Total Time:          22.1 seconds
Initialization:       0.1 seconds,  0.5%
Reproduction:         9.4 seconds, 42.3%
Fitness Testing:     10.0 seconds, 45.2%
Report:               2.6 seconds, 11.9%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 5
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 6
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 6
;;******************************
;; -*- Number IO problem report - generation 6
Test total error for best: 60228.21599999999
Test mean error for best: 30.11411
;;------------------------------
Outputs of best individual on training cases:
Correct output: -57.4559422311 | Program output: -74.0234      
Correct output: -71.0754923621 | Program output: -65.0234      
Correct output: -66.5176295557 | Program output: -77.0234      
Correct output: 149.3187378    | Program output: 86.0234       
Correct output: -36.5450493525 | Program output: -83.0234      
Correct output: 75.4021928097  | Program output: 48.0234       
Correct output: 52.2615929867  | Program output: 74.0234       
Correct output: -19.2178367434 | Program output: 43.0234       
Correct output: 66.7518906772  | Program output: 1.0234        
Correct output: 7.673605441    | Program output: 27.0234       
Correct output: 23.6294031682  | Program output: 90.0234       
Correct output: -6.1389033433  | Program output: 38.0234       
Correct output: 9.2516366816   | Program output: -82.0234      
Correct output: 31.3251776267  | Program output: -55.0234      
Correct output: 73.3746496408  | Program output: 0.0234        
Correct output: 20.0500553336  | Program output: -19.0234      
Correct output: -23.2820697498 | Program output: 32.0234       
Correct output: 120.1004999359 | Program output: 30.0234       
Correct output: -155.453212395 | Program output: -98.0234      
Correct output: 31.10301576    | Program output: 10.0234       
Correct output: 45.5733057121  | Program output: -39.0234      
Correct output: -68.592783645  | Program output: -78.0234      
Correct output: -125.979392023 | Program output: -70.0234      
Correct output: -91.9273649148 | Program output: -71.0234      
Correct output: -92.5660607267 | Program output: -49.0234      
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_yank} {:instruction print_integer} {:instruction float_min} {:instruction integer_pop} {:instruction float_dec} {:instruction integer_min} {:instruction float_yank} {:instruction integer_stackdepth} {:instruction integer_min} {:instruction float_sub} {:instruction integer_dup} {:instruction integer_dec} {:instruction integer_dec} {:instruction integer_dup} {:instruction float_mult} {:instruction float_sub} {:instruction integer_yank} {:instruction float_sub} {:instruction 100} {:instruction integer_dup_items} {:instruction float_add} {:instruction float_rot} {:instruction float_mult} {:instruction integer_flush} {:instruction integer_pop} {:instruction float_min} {:instruction print_integer} {:instruction float_add} {:instruction integer_pop} {:instruction float_tan} {:instruction print_float} {:instruction integer_pop} {:instruction 27} {:instruction float_sub} {:instruction float_sub} {:instruction float_tan} {:instruction integer_yank} {:instruction integer_min} {:instruction float_max} {:instruction integer_sub} {:instruction 9} {:instruction float_swap} {:instruction integer_stackdepth} {:instruction float_frominteger} {:instruction tag_float_196} {:instruction float_swap} {:instruction float_rot} {:instruction integer_add} {:instruction integer_max} {:instruction float_max} {:instruction integer_stackdepth} {:instruction float_add} {:instruction in2} {:instruction float_frominteger} {:instruction print_float} {:instruction integer_dup} {:instruction float_shove} {:instruction float_shove} {:instruction integer_inc} {:instruction float_mod} {:instruction integer_dup} {:instruction integer_dup_items} {:instruction print_integer} {:instruction integer_shove} {:instruction print_float} {:instruction integer_div} {:instruction integer_sub} {:instruction integer_fromfloat} {:instruction integer_mod} {:instruction print_integer} {:instruction integer_mult} {:instruction float_swap} {:instruction integer_stackdepth} {:instruction integer_stackdepth} {:instruction integer_flush} {:instruction float_mod} {:instruction float_swap} {:instruction print_integer} {:instruction integer_mod} {:instruction float_div} {:instruction float_mod} {:instruction float_inc} {:instruction print_float} {:instruction integer_flush} {:instruction float_cos} {:instruction float_mult} {:instruction integer_dec} {:instruction float_sub} {:instruction float_tan} {:instruction float_sub} {:instruction float_sin} {:instruction integer_yank} {:instruction float_dup})
Best program: (float_yank print_integer float_min integer_pop float_dec integer_min float_yank integer_stackdepth integer_min float_sub integer_dup integer_dec integer_dec integer_dup float_mult float_sub integer_yank float_sub 100 integer_dup_items float_add float_rot float_mult integer_flush integer_pop float_min print_integer float_add integer_pop float_tan print_float integer_pop 27 float_sub float_sub float_tan integer_yank integer_min float_max integer_sub 9 float_swap integer_stackdepth float_frominteger tag_float_196 float_swap float_rot integer_add integer_max float_max integer_stackdepth float_add in2 float_frominteger print_float integer_dup float_shove float_shove integer_inc float_mod integer_dup integer_dup_items print_integer integer_shove print_float integer_div integer_sub integer_fromfloat integer_mod print_integer integer_mult float_swap integer_stackdepth integer_stackdepth integer_flush float_mod float_swap print_integer integer_mod float_div float_mod float_inc print_float integer_flush float_cos float_mult integer_dec float_sub float_tan float_sub float_sin integer_yank float_dup)
Errors: [16.5675 9 6.0521 9 10.5058 11 63.2953 9 46.4784 10 27.3788 10 21.7618 11 62.2412 11 65.7285 11 19.3498 8 66.394 10 44.1623 8 91.275 10 86.3486 11 73.3512 11 39.0735 11 55.3055 10 90.0771 10 57.4298 10 21.0796 8 84.5967 12 9.4306 7 55.956 10 20.904 8 43.5427 10]
Total: 1423.2858
Mean: 28.465715
Genome size: 93
Size: 94
Percent parens: 0.011
--- Population Statistics ---
Average total errors in population: 4477.637209
Median total errors in population: 1449.0
Error averages by case: (185.81013960000007 13.08 179.46887060000012 3.975 187.6652405 13.259 200.51170170000006 4.526 195.74985509999993 9.995 166.6031125 3.978 188.25839270000012 12.323 166.5729486999999 4.203 131.5111875 3.14 149.86371620000008 10.389 204.5210297999999 11.49 161.41759770000004 4.001 197.4277696999999 3.194 178.48529589999978 4.001 131.16942549999985 2.548 144.17569609999987 4.095 157.7431115000001 4.091 157.1925961999999 4.213 211.88355539999978 4.169 134.70661589999997 2.87 162.80740259999996 4.038 188.33399999999995 10.363 188.66506390000004 4.225 186.11384120000017 3.957 170.76404249999985 4.092)
Error minima by case: (14.8306 9 6.0485 1 10.4824 9 59.6435 3 0.1789 9 14.2731 2 21.7384 8 2.9672 2 1.0 1 1.3104 8 0.3394 9 1.6008 2 3.1153 1 7.3564 2 0.0 0 3.9188 2 1.097 2 30.0 2 57.4262 2 7.1342 1 21.6045 2 9.4072 7 55.9524 2 20.9004 1 43.5391 2)
Average genome size in population (length): 39.431
Average program size in population (points): 40.431
Average percent parens in population: 0.034
Minimum age in population: 6.0
Maximum age in population: 10.84375
Average age in population: 8.97778125
Median age in population: 9.03125
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 75
Genome diversity (% unique Plush genomes):	 0.665
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 75
Syntactic diversity (% unique Push programs):	 0.665
Total error diversity:				 0.047
Error (vector) diversity:			 0.051
Behavioral diversity:				 0.052
--- Run Statistics ---
Number of program evaluations used so far: 7000
Number of point (instruction) evaluations so far: 8080331
--- Timings ---
Current time: 1529615178672 milliseconds
Total Time:          25.4 seconds
Initialization:       0.1 seconds,  0.5%
Reproduction:        10.8 seconds, 42.7%
Fitness Testing:     11.4 seconds, 44.8%
Report:               3.1 seconds, 12.0%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 6
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 7
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 7
;;******************************
;; -*- Number IO problem report - generation 7
Test total error for best: 60228.21599999999
Test mean error for best: 30.11411
;;------------------------------
Outputs of best individual on training cases:
Correct output: -57.4559422311 | Program output: -74.0234      
Correct output: -71.0754923621 | Program output: -65.0234      
Correct output: -66.5176295557 | Program output: -77.0234      
Correct output: 149.3187378    | Program output: 86.0234       
Correct output: -36.5450493525 | Program output: -83.0234      
Correct output: 75.4021928097  | Program output: 48.0234       
Correct output: 52.2615929867  | Program output: 74.0234       
Correct output: -19.2178367434 | Program output: 43.0234       
Correct output: 66.7518906772  | Program output: 1.0234        
Correct output: 7.673605441    | Program output: 27.0234       
Correct output: 23.6294031682  | Program output: 90.0234       
Correct output: -6.1389033433  | Program output: 38.0234       
Correct output: 9.2516366816   | Program output: -82.0234      
Correct output: 31.3251776267  | Program output: -55.0234      
Correct output: 73.3746496408  | Program output: 0.0234        
Correct output: 20.0500553336  | Program output: -19.0234      
Correct output: -23.2820697498 | Program output: 32.0234       
Correct output: 120.1004999359 | Program output: 30.0234       
Correct output: -155.453212395 | Program output: -98.0234      
Correct output: 31.10301576    | Program output: 10.0234       
Correct output: 45.5733057121  | Program output: -39.0234      
Correct output: -68.592783645  | Program output: -78.0234      
Correct output: -125.979392023 | Program output: -70.0234      
Correct output: -91.9273649148 | Program output: -71.0234      
Correct output: -92.5660607267 | Program output: -49.0234      
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_yank} {:instruction print_integer} {:instruction float_min} {:instruction integer_pop} {:instruction float_dec} {:instruction integer_min} {:instruction float_yank} {:instruction integer_stackdepth} {:instruction integer_min} {:instruction float_sub} {:instruction integer_dup} {:instruction integer_dec} {:instruction integer_dec} {:instruction integer_dup} {:instruction float_mult} {:instruction float_sub} {:instruction integer_yank} {:instruction float_sub} {:instruction 100} {:instruction integer_dup_items} {:instruction float_add} {:instruction float_rot} {:instruction float_mult} {:instruction integer_flush} {:instruction integer_pop} {:instruction float_min} {:instruction print_integer} {:instruction float_add} {:instruction integer_pop} {:instruction float_tan} {:instruction print_float} {:instruction integer_pop} {:instruction 27} {:instruction float_sub} {:instruction float_sub} {:instruction float_tan} {:instruction integer_yank} {:instruction integer_min} {:instruction float_max} {:instruction integer_sub} {:instruction 9} {:instruction float_swap} {:instruction integer_stackdepth} {:instruction float_frominteger} {:instruction tag_float_196} {:instruction float_swap} {:instruction float_rot} {:instruction integer_add} {:instruction integer_max} {:instruction float_max} {:instruction integer_stackdepth} {:instruction float_add} {:instruction in2} {:instruction float_frominteger} {:instruction print_float} {:instruction integer_dup} {:instruction float_shove} {:instruction float_shove} {:instruction integer_inc} {:instruction float_mod} {:instruction integer_dup} {:instruction integer_dup_items} {:instruction print_integer} {:instruction integer_shove} {:instruction print_float} {:instruction integer_div} {:instruction integer_sub} {:instruction integer_fromfloat} {:instruction integer_mod} {:instruction print_integer} {:instruction integer_mult} {:instruction float_swap} {:instruction integer_stackdepth} {:instruction integer_stackdepth} {:instruction integer_flush} {:instruction float_mod} {:instruction float_swap} {:instruction print_integer} {:instruction integer_mod} {:instruction float_div} {:instruction float_mod} {:instruction float_inc} {:instruction print_float} {:instruction integer_flush} {:instruction float_cos} {:instruction float_mult} {:instruction integer_dec} {:instruction float_sub} {:instruction float_tan} {:instruction float_sub} {:instruction float_sin} {:instruction integer_yank} {:instruction float_dup})
Best program: (float_yank print_integer float_min integer_pop float_dec integer_min float_yank integer_stackdepth integer_min float_sub integer_dup integer_dec integer_dec integer_dup float_mult float_sub integer_yank float_sub 100 integer_dup_items float_add float_rot float_mult integer_flush integer_pop float_min print_integer float_add integer_pop float_tan print_float integer_pop 27 float_sub float_sub float_tan integer_yank integer_min float_max integer_sub 9 float_swap integer_stackdepth float_frominteger tag_float_196 float_swap float_rot integer_add integer_max float_max integer_stackdepth float_add in2 float_frominteger print_float integer_dup float_shove float_shove integer_inc float_mod integer_dup integer_dup_items print_integer integer_shove print_float integer_div integer_sub integer_fromfloat integer_mod print_integer integer_mult float_swap integer_stackdepth integer_stackdepth integer_flush float_mod float_swap print_integer integer_mod float_div float_mod float_inc print_float integer_flush float_cos float_mult integer_dec float_sub float_tan float_sub float_sin integer_yank float_dup)
Errors: [16.5675 9 6.0521 9 10.5058 11 63.2953 9 46.4784 10 27.3788 10 21.7618 11 62.2412 11 65.7285 11 19.3498 8 66.394 10 44.1623 8 91.275 10 86.3486 11 73.3512 11 39.0735 11 55.3055 10 90.0771 10 57.4298 10 21.0796 8 84.5967 12 9.4306 7 55.956 10 20.904 8 43.5427 10]
Total: 1423.2858
Mean: 28.465715
Genome size: 93
Size: 94
Percent parens: 0.011
--- Population Statistics ---
Average total errors in population: 5184.964745900002
Median total errors in population: 1449.0
Error averages by case: (203.18335090000022 12.716 196.03586740000054 5.846 202.94000890000012 12.943 225.26916170000018 5.787 216.82616439999958 10.384 193.01000290000016 5.594 208.27065970000055 12.201 199.45680579999936 6.221 171.1302212000001 4.968 178.9974410000004 10.208 228.62688899999955 11.459 192.1648196000002 5.588 226.53101709999947 5.308 208.88554449999924 5.731 171.44356159999978 4.82 175.37394909999932 6.073 191.31252610000044 5.762 197.57379869999974 5.987 231.25912349999922 6.155 167.88852680000005 4.09 198.75252449999974 5.867 202.33589089999967 10.327 213.9813959000004 6.036 205.0298451000005 5.66 197.16264959999924 5.792)
Error minima by case: (16.5441 9 6.0355 1 10.4824 9 63.2377 3 33.007 8 27.3592 2 21.7384 9 3.9052 2 1.0 1 1.3264 8 0.3394 9 2.6008 2 0.2516 1 7.3564 2 0.0 0 3.9188 2 19.744 2 30.0 2 57.4132 2 7.1342 1 21.6045 2 9.4072 7 55.9394 2 20.8874 1 43.5261 2)
Average genome size in population (length): 48.812
Average program size in population (points): 49.812
Average percent parens in population: 0.029
Minimum age in population: 7.5
Maximum age in population: 12.28125
Average age in population: 10.323359375
Median age in population: 10.375
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 54
Genome diversity (% unique Plush genomes):	 0.74
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 54
Syntactic diversity (% unique Push programs):	 0.74
Total error diversity:				 0.08
Error (vector) diversity:			 0.092
Behavioral diversity:				 0.093
--- Run Statistics ---
Number of program evaluations used so far: 8000
Number of point (instruction) evaluations so far: 9301381
--- Timings ---
Current time: 1529615181940 milliseconds
Total Time:          28.6 seconds
Initialization:       0.1 seconds,  0.4%
Reproduction:        12.2 seconds, 42.7%
Fitness Testing:     12.8 seconds, 44.6%
Report:               3.5 seconds, 12.3%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 7
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 8
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 8
;;******************************
;; -*- Number IO problem report - generation 8
Test total error for best: 60175.21599999999
Test mean error for best: 30.08761
;;------------------------------
Outputs of best individual on training cases:
Correct output: -57.4559422311 | Program output: -74.02340     
Correct output: -71.0754923621 | Program output: -65.02340     
Correct output: -66.5176295557 | Program output: -77.02340     
Correct output: 149.3187378    | Program output: 86.02340      
Correct output: -36.5450493525 | Program output: -83.02340     
Correct output: 75.4021928097  | Program output: 48.02340      
Correct output: 52.2615929867  | Program output: 74.02340      
Correct output: -19.2178367434 | Program output: 43.02340      
Correct output: 66.7518906772  | Program output: 1.02340       
Correct output: 7.673605441    | Program output: 27.02340      
Correct output: 23.6294031682  | Program output: 90.02340      
Correct output: -6.1389033433  | Program output: 38.02340      
Correct output: 9.2516366816   | Program output: -82.02340     
Correct output: 31.3251776267  | Program output: -55.02340     
Correct output: 73.3746496408  | Program output: 0.02340       
Correct output: 20.0500553336  | Program output: -19.02340     
Correct output: -23.2820697498 | Program output: 32.02340      
Correct output: 120.1004999359 | Program output: 30.02340      
Correct output: -155.453212395 | Program output: -98.02340     
Correct output: 31.10301576    | Program output: 10.02340      
Correct output: 45.5733057121  | Program output: -39.02340     
Correct output: -68.592783645  | Program output: -78.02340     
Correct output: -125.979392023 | Program output: -70.02340     
Correct output: -91.9273649148 | Program output: -71.02340     
Correct output: -92.5660607267 | Program output: -49.02340     
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_yank} {:instruction print_integer} {:instruction float_min} {:instruction integer_pop} {:instruction float_dec} {:instruction integer_min} {:instruction float_yank} {:instruction integer_stackdepth} {:instruction integer_min} {:instruction float_sub} {:instruction integer_dup} {:instruction integer_dec} {:instruction integer_dec} {:instruction integer_dup} {:instruction float_mult} {:instruction float_sub} {:instruction integer_yank} {:instruction float_sub} {:instruction 100} {:instruction integer_dup_items} {:instruction float_add} {:instruction float_rot} {:instruction float_mult} {:instruction integer_flush} {:instruction integer_pop} {:instruction float_min} {:instruction print_integer} {:instruction float_add} {:instruction integer_pop} {:instruction float_tan} {:instruction print_float} {:instruction integer_pop} {:instruction 27} {:instruction float_sub} {:instruction float_sub} {:instruction float_tan} {:instruction integer_yank} {:instruction integer_min} {:instruction float_max} {:instruction integer_sub} {:instruction 9} {:instruction float_swap} {:instruction integer_stackdepth} {:instruction float_frominteger} {:instruction tag_float_196} {:instruction float_swap} {:instruction float_rot} {:instruction integer_add} {:instruction integer_max} {:instruction float_max} {:instruction integer_stackdepth} {:instruction float_add} {:instruction in2} {:instruction float_frominteger} {:instruction print_float} {:instruction integer_dup} {:instruction float_shove} {:instruction float_shove} {:instruction integer_inc} {:instruction float_mod} {:instruction integer_dup} {:instruction integer_dup_items} {:instruction print_integer} {:instruction integer_shove} {:instruction print_float} {:instruction integer_div} {:instruction integer_sub} {:instruction integer_fromfloat} {:instruction integer_mod} {:instruction print_integer} {:instruction integer_mult} {:instruction float_swap} {:instruction integer_stackdepth} {:instruction integer_stackdepth} {:instruction integer_div} {:instruction float_mod} {:instruction float_swap} {:instruction print_integer} {:instruction integer_mod} {:instruction float_div} {:instruction float_mod} {:instruction float_inc} {:instruction print_float} {:instruction integer_flush} {:instruction float_cos} {:instruction -51} {:instruction integer_dec} {:instruction float_sub} {:instruction float_tan} {:instruction float_sub} {:instruction float_sin} {:instruction integer_yank} {:instruction float_dup})
Best program: (float_yank print_integer float_min integer_pop float_dec integer_min float_yank integer_stackdepth integer_min float_sub integer_dup integer_dec integer_dec integer_dup float_mult float_sub integer_yank float_sub 100 integer_dup_items float_add float_rot float_mult integer_flush integer_pop float_min print_integer float_add integer_pop float_tan print_float integer_pop 27 float_sub float_sub float_tan integer_yank integer_min float_max integer_sub 9 float_swap integer_stackdepth float_frominteger tag_float_196 float_swap float_rot integer_add integer_max float_max integer_stackdepth float_add in2 float_frominteger print_float integer_dup float_shove float_shove integer_inc float_mod integer_dup integer_dup_items print_integer integer_shove print_float integer_div integer_sub integer_fromfloat integer_mod print_integer integer_mult float_swap integer_stackdepth integer_stackdepth integer_div float_mod float_swap print_integer integer_mod float_div float_mod float_inc print_float integer_flush float_cos -51 integer_dec float_sub float_tan float_sub float_sin integer_yank float_dup)
Errors: [16.5675 9 6.0521 9 10.5058 11 63.2953 9 46.4784 10 27.3788 9 21.7618 11 62.2412 11 65.7285 11 19.3498 8 66.394 9 44.1623 8 91.275 10 86.3486 12 73.3512 10 39.0735 11 55.3055 10 90.0771 10 57.4298 10 21.0796 8 84.5967 11 9.4306 7 55.956 10 20.904 8 43.5427 11]
Total: 1421.2858
Mean: 28.425716
Genome size: 93
Size: 94
Percent parens: 0.011
--- Population Statistics ---
Average total errors in population: 5624.7980415
Median total errors in population: 1441.2966
Error averages by case: (198.76310230000058 11.601 192.3177493000009 9.38 196.59844190000084 11.944 234.3144874000005 8.285 219.11409069999854 10.991 204.0844408000011 8.687 206.62706450000118 11.673 225.64782329999724 10.282 210.8842584000002 8.666 196.78676149999978 9.573 238.0636046999991 11.178 213.40496289999982 8.712 246.35196749999847 9.582 236.31854459999832 9.239 211.7019546000007 9.539 199.9338474999988 10.053 219.27382340000173 9.071 238.59278429999935 9.478 233.07500899999826 10.055 192.5726701000001 6.483 232.78472619999872 9.562 196.17170259999878 9.832 224.04944040000117 9.54 203.91240470000187 8.837 212.19437889999818 9.015)
Error minima by case: (8.5441 8 5.9765 1 2.4824 10 36.7713 3 5.0803 9 15.6878 2 21.7384 10 19.2178 2 1.0 1 0.3264 8 3.3706 9 5.981 2 0.2516 1 4.3252 2 0.0 0 0.0501 2 18.3432 2 9.9895 2 57.3542 2 4.103 1 18.5733 2 1.4072 7 55.8804 2 20.8284 1 43.4671 2)
Average genome size in population (length): 72.403
Average program size in population (points): 73.403
Average percent parens in population: 0.018
Minimum age in population: 8.5
Maximum age in population: 13.859375
Average age in population: 11.6359765625
Median age in population: 11.671875
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 15
Genome diversity (% unique Plush genomes):	 0.803
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 15
Syntactic diversity (% unique Push programs):	 0.803
Total error diversity:				 0.128
Error (vector) diversity:			 0.162
Behavioral diversity:				 0.163
--- Run Statistics ---
Number of program evaluations used so far: 9000
Number of point (instruction) evaluations so far: 11111731
--- Timings ---
Current time: 1529615185422 milliseconds
Total Time:          32.0 seconds
Initialization:       0.1 seconds,  0.4%
Reproduction:        13.5 seconds, 42.1%
Fitness Testing:     14.5 seconds, 45.1%
Report:               4.0 seconds, 12.4%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 8
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 9
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 9
;;******************************
;; -*- Number IO problem report - generation 9
Test total error for best: 60233.13379999996
Test mean error for best: 30.11657
;;------------------------------
Outputs of best individual on training cases:
Correct output: -57.4559422311 | Program output: -74.02236     
Correct output: -71.0754923621 | Program output: -65.02236     
Correct output: -66.5176295557 | Program output: -77.02236     
Correct output: 149.3187378    | Program output: 86.02236      
Correct output: -36.5450493525 | Program output: -83.02236     
Correct output: 75.4021928097  | Program output: 48.02236      
Correct output: 52.2615929867  | Program output: 74.02236      
Correct output: -19.2178367434 | Program output: 43.02236      
Correct output: 66.7518906772  | Program output: 1.02236       
Correct output: 7.673605441    | Program output: 27.02236      
Correct output: 23.6294031682  | Program output: 90.02236      
Correct output: -6.1389033433  | Program output: 38.02236      
Correct output: 9.2516366816   | Program output: -82.02236     
Correct output: 31.3251776267  | Program output: -55.02236     
Correct output: 73.3746496408  | Program output: 0.02236       
Correct output: 20.0500553336  | Program output: -19.02236     
Correct output: -23.2820697498 | Program output: 32.02236      
Correct output: 120.1004999359 | Program output: 30.02236      
Correct output: -155.453212395 | Program output: -98.02236     
Correct output: 31.10301576    | Program output: 10.02236      
Correct output: 45.5733057121  | Program output: -39.02236     
Correct output: -68.592783645  | Program output: -78.02236     
Correct output: -125.979392023 | Program output: -70.02236     
Correct output: -91.9273649148 | Program output: -71.02236     
Correct output: -92.5660607267 | Program output: -49.02236     
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_yank} {:instruction integer_rot} {:instruction integer_stackdepth} {:instruction float_yankdup} {:instruction float_dup_items} {:instruction float_shove} {:instruction integer_sub} {:instruction float_dec} {:instruction float_tan} {:instruction integer_pop} {:instruction integer_mod} {:instruction float_dup_items} {:instruction integer_dec} {:instruction integer_fromfloat} {:instruction integer_min} {:instruction float_mod} {:instruction integer_shove} {:instruction integer_dup_times} {:instruction integer_swap} {:instruction integer_max} {:instruction float_sub} {:instruction 100} {:instruction integer_dup_items} {:instruction float_mult} {:instruction float_sub} {:instruction integer_yank} {:instruction float_sub} {:instruction 100} {:instruction integer_dup_items} {:instruction float_add} {:instruction float_rot} {:instruction float_mult} {:instruction integer_flush} {:instruction integer_pop} {:instruction float_min} {:instruction print_integer} {:instruction float_add} {:instruction integer_pop} {:instruction float_tan} {:instruction print_float} {:instruction integer_pop} {:instruction 27} {:instruction float_sub} {:instruction float_sub} {:instruction float_tan} {:instruction integer_yank} {:instruction integer_min} {:instruction float_max} {:instruction integer_sub} {:instruction 9} {:instruction float_swap} {:instruction integer_stackdepth} {:instruction float_frominteger} {:instruction tag_float_196} {:instruction float_swap} {:instruction float_rot} {:instruction integer_add} {:instruction integer_max} {:instruction float_max} {:instruction integer_stackdepth} {:instruction float_add} {:instruction in2} {:instruction float_frominteger} {:instruction print_float} {:instruction integer_dup} {:instruction float_shove} {:instruction float_shove} {:instruction integer_inc} {:instruction float_mod} {:instruction integer_dup} {:instruction integer_dup_items} {:instruction print_integer} {:instruction integer_shove} {:instruction integer_dup_items} {:instruction print_integer} {:instruction integer_shove} {:instruction print_float} {:instruction integer_div} {:instruction integer_sub} {:instruction integer_fromfloat} {:instruction integer_mod} {:instruction print_integer} {:instruction integer_mult} {:instruction float_swap} {:instruction integer_stackdepth} {:instruction integer_stackdepth} {:instruction float_mod} {:instruction float_inc} {:instruction print_float} {:instruction integer_flush} {:instruction float_cos} {:instruction float_mult} {:instruction integer_dec} {:instruction float_sub} {:instruction float_tan} {:instruction float_sub} {:instruction float_sin} {:instruction integer_yank} {:instruction float_dup})
Best program: (float_yank integer_rot integer_stackdepth float_yankdup float_dup_items float_shove integer_sub float_dec float_tan integer_pop integer_mod float_dup_items integer_dec integer_fromfloat integer_min float_mod integer_shove integer_dup_times integer_swap integer_max float_sub 100 integer_dup_items float_mult float_sub integer_yank float_sub 100 integer_dup_items float_add float_rot float_mult integer_flush integer_pop float_min print_integer float_add integer_pop float_tan print_float integer_pop 27 float_sub float_sub float_tan integer_yank integer_min float_max integer_sub 9 float_swap integer_stackdepth float_frominteger tag_float_196 float_swap float_rot integer_add integer_max float_max integer_stackdepth float_add in2 float_frominteger print_float integer_dup float_shove float_shove integer_inc float_mod integer_dup integer_dup_items print_integer integer_shove integer_dup_items print_integer integer_shove print_float integer_div integer_sub integer_fromfloat integer_mod print_integer integer_mult float_swap integer_stackdepth integer_stackdepth float_mod float_inc print_float integer_flush float_cos float_mult integer_dec float_sub float_tan float_sub float_sin integer_yank float_dup)
Errors: [16.5664 8 6.0531 8 10.5047 11 63.2964 9 46.4773 10 27.3798 9 21.7608 10 62.2402 11 65.7295 11 19.3488 9 66.393 9 44.1613 9 91.274 10 86.3475 11 73.3523 11 39.0724 10 55.3044 10 90.0781 10 57.4309 9 21.0807 7 84.5957 12 9.4296 7 55.957 10 20.905 8 43.5437 10]
Total: 1417.2826
Mean: 28.345652
Genome size: 99
Size: 100
Percent parens: 0.010
--- Population Statistics ---
Average total errors in population: 5461.783019500009
Median total errors in population: 1439.2456000000002
Error averages by case: (185.67734460000068 10.611 177.3252766000004 10.645 180.98766330000066 11.227 221.6722803999999 9.405 209.55604469999864 10.969 190.60849270000134 9.819 186.15270110000088 11.186 218.0351367999971 12.064 216.51668299999955 10.423 182.8070834999999 9.163 222.0077488999995 10.746 203.15927579999968 9.994 244.96455439999806 11.005 240.8040232999986 11.108 221.003905000001 11.514 202.07489129999905 11.673 212.30097870000114 10.663 241.6661146999987 10.993 220.734879299999 11.39 184.0142385999995 7.609 239.36926249999823 11.289 180.17033069999914 9.374 218.65099410000155 10.872 189.7640940000017 9.964 207.75902149999786 10.294)
Error minima by case: (15.5441 8 5.9756 2 9.4824 9 50.3187 3 35.545 9 23.5978 2 12.2616 10 18.2178 2 1.0 1 1.3264 8 2.6294 9 5.1389 2 0.2516 1 4.3252 2 0.0 0 1.0501 2 22.2821 2 21.1005 2 57.3533 2 4.103 1 5.5733 2 8.4072 7 55.8795 2 20.8275 2 43.4662 2)
Average genome size in population (length): 82.949
Average program size in population (points): 83.949
Average percent parens in population: 0.012
Minimum age in population: 10.75
Maximum age in population: 15.40234375
Average age in population: 13.12824609375
Median age in population: 13.171875
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 18
Genome diversity (% unique Plush genomes):	 0.863
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 18
Syntactic diversity (% unique Push programs):	 0.863
Total error diversity:				 0.17
Error (vector) diversity:			 0.226
Behavioral diversity:				 0.231
--- Run Statistics ---
Number of program evaluations used so far: 10000
Number of point (instruction) evaluations so far: 13185931
--- Timings ---
Current time: 1529615189593 milliseconds
Total Time:          36.1 seconds
Initialization:       0.1 seconds,  0.3%
Reproduction:        14.9 seconds, 41.4%
Fitness Testing:     16.5 seconds, 45.8%
Report:               4.5 seconds, 12.5%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 9
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 10
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 10
;;******************************
;; -*- Number IO problem report - generation 10
Test total error for best: 60172.231600000014
Test mean error for best: 30.08612
;;------------------------------
Outputs of best individual on training cases:
Correct output: -57.4559422311 | Program output: -74.02360     
Correct output: -71.0754923621 | Program output: -65.02360     
Correct output: -66.5176295557 | Program output: -77.02360     
Correct output: 149.3187378    | Program output: 86.02360      
Correct output: -36.5450493525 | Program output: -83.02360     
Correct output: 75.4021928097  | Program output: 48.02360      
Correct output: 52.2615929867  | Program output: 74.02360      
Correct output: -19.2178367434 | Program output: 43.02360      
Correct output: 66.7518906772  | Program output: 1.02360       
Correct output: 7.673605441    | Program output: 27.02360      
Correct output: 23.6294031682  | Program output: 90.02360      
Correct output: -6.1389033433  | Program output: 38.02360      
Correct output: 9.2516366816   | Program output: -82.02360     
Correct output: 31.3251776267  | Program output: -55.02360     
Correct output: 73.3746496408  | Program output: 0.02360       
Correct output: 20.0500553336  | Program output: -19.02360     
Correct output: -23.2820697498 | Program output: 32.02360      
Correct output: 120.1004999359 | Program output: 30.02360      
Correct output: -155.453212395 | Program output: -98.02360     
Correct output: 31.10301576    | Program output: 10.02360      
Correct output: 45.5733057121  | Program output: -39.02360     
Correct output: -68.592783645  | Program output: -78.02360     
Correct output: -125.979392023 | Program output: -70.02360     
Correct output: -91.9273649148 | Program output: -71.02360     
Correct output: -92.5660607267 | Program output: -49.02360     
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_inc} {:instruction float_add} {:instruction float_yank} {:instruction integer_dup} {:instruction float_min} {:instruction in2} {:instruction float_inc} {:instruction float_dup} {:instruction float_mult} {:instruction float_sub} {:instruction integer_yank} {:instruction float_sub} {:instruction 100} {:instruction integer_dup_items} {:instruction float_add} {:instruction 100} {:instruction integer_dup_items} {:instruction float_add} {:instruction float_rot} {:instruction float_mult} {:instruction integer_flush} {:instruction integer_pop} {:instruction float_min} {:instruction print_integer} {:instruction float_add} {:instruction integer_pop} {:instruction float_tan} {:instruction print_float} {:instruction integer_pop} {:instruction 27} {:instruction float_sub} {:instruction float_sub} {:instruction float_tan} {:instruction integer_yank} {:instruction integer_min} {:instruction float_max} {:instruction integer_sub} {:instruction 9} {:instruction float_swap} {:instruction integer_stackdepth} {:instruction float_frominteger} {:instruction tag_float_196} {:instruction float_swap} {:instruction float_rot} {:instruction integer_add} {:instruction integer_max} {:instruction float_max} {:instruction integer_stackdepth} {:instruction float_add} {:instruction in2} {:instruction float_frominteger} {:instruction print_float} {:instruction integer_dup} {:instruction float_shove} {:instruction float_shove} {:instruction integer_inc} {:instruction print_integer} {:instruction integer_shove} {:instruction print_float} {:instruction integer_div} {:instruction integer_sub} {:instruction integer_fromfloat} {:instruction integer_mod} {:instruction print_integer} {:instruction print_integer} {:instruction integer_shove} {:instruction print_float} {:instruction integer_div} {:instruction float_yankdup} {:instruction integer_fromfloat} {:instruction integer_mod} {:instruction print_integer} {:instruction integer_mult} {:instruction float_swap} {:instruction integer_stackdepth} {:instruction integer_stackdepth} {:instruction integer_div} {:instruction float_mod} {:instruction float_swap} {:instruction print_integer} {:instruction integer_mod} {:instruction float_div} {:instruction float_mod} {:instruction float_inc} {:instruction print_float} {:instruction integer_flush} {:instruction float_cos} {:instruction -51} {:instruction integer_dec} {:instruction float_sub} {:instruction float_tan} {:instruction float_sub} {:instruction float_sin} {:instruction integer_yank} {:instruction float_dup})
Best program: (integer_inc float_add float_yank integer_dup float_min in2 float_inc float_dup float_mult float_sub integer_yank float_sub 100 integer_dup_items float_add 100 integer_dup_items float_add float_rot float_mult integer_flush integer_pop float_min print_integer float_add integer_pop float_tan print_float integer_pop 27 float_sub float_sub float_tan integer_yank integer_min float_max integer_sub 9 float_swap integer_stackdepth float_frominteger tag_float_196 float_swap float_rot integer_add integer_max float_max integer_stackdepth float_add in2 float_frominteger print_float integer_dup float_shove float_shove integer_inc print_integer integer_shove print_float integer_div integer_sub integer_fromfloat integer_mod print_integer print_integer integer_shove print_float integer_div float_yankdup integer_fromfloat integer_mod print_integer integer_mult float_swap integer_stackdepth integer_stackdepth integer_div float_mod float_swap print_integer integer_mod float_div float_mod float_inc print_float integer_flush float_cos -51 integer_dec float_sub float_tan float_sub float_sin integer_yank float_dup)
Errors: [16.5677 9 6.0519 8 10.506 11 63.2951 9 46.4786 10 27.3786 9 21.762 10 62.2414 11 65.7283 11 19.35 7 66.3942 9 44.1625 9 91.2752 9 86.3488 11 73.351 10 39.0737 11 55.3057 10 90.0769 10 57.4296 10 21.0794 8 84.5969 11 9.4308 7 55.9558 10 20.9038 8 43.5425 10]
Total: 1416.2864000000002
Mean: 28.325727
Genome size: 95
Size: 96
Percent parens: 0.010
--- Population Statistics ---
Average total errors in population: 5506.1148516000085
Median total errors in population: 1429.2966
Error averages by case: (187.6072434000011 9.982 179.1001471000005 9.927 182.88413030000098 10.987 223.34926949999985 9.412 211.7223197999993 10.461 193.4713868000013 9.685 188.9158386000003 10.948 221.8630892999974 11.819 213.01842569999954 10.66 186.67347119999965 8.875 224.9688842999997 10.464 206.9949129999995 9.462 247.38988029999774 10.624 242.88414509999856 11.101 218.54096600000122 11.364 203.8487637999991 11.517 216.27718929999978 10.484 244.47040579999853 10.713 222.5573721000004 10.799 187.96951579999944 7.86 241.1927500999979 11.503 182.06227219999997 8.463 220.39095970000184 10.456 191.54211230000104 9.279 209.44840009999854 10.126)
Error minima by case: (16.5441 7 5.9765 7 10.4824 9 36.6913 7 36.545 9 23.5978 7 16.2616 9 19.2178 7 24.2751 4 0.3264 7 2.6294 9 6.1389 6 0.2231 7 4.6748 8 16.6524 5 1.0501 6 23.2821 7 9.9095 6 57.3542 7 4.897 6 9.5733 7 9.4072 7 55.8804 6 20.8284 7 43.4671 6)
Average genome size in population (length): 86.984
Average program size in population (points): 87.984
Average percent parens in population: 0.012
Minimum age in population: 12.1875
Maximum age in population: 16.70703125
Average age in population: 14.439630859375
Median age in population: 14.5029296875
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 11
Genome diversity (% unique Plush genomes):	 0.84
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 11
Syntactic diversity (% unique Push programs):	 0.84
Total error diversity:				 0.167
Error (vector) diversity:			 0.22
Behavioral diversity:				 0.222
--- Run Statistics ---
Number of program evaluations used so far: 11000
Number of point (instruction) evaluations so far: 15360831
--- Timings ---
Current time: 1529615193358 milliseconds
Total Time:          40.0 seconds
Initialization:       0.1 seconds,  0.3%
Reproduction:        16.3 seconds, 40.6%
Fitness Testing:     18.5 seconds, 46.1%
Report:               5.2 seconds, 13.0%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 10
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 11
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 11
;;******************************
;; -*- Number IO problem report - generation 11
Test total error for best: 60172.231600000014
Test mean error for best: 30.08612
;;------------------------------
Outputs of best individual on training cases:
Correct output: -57.4559422311 | Program output: -74.02360     
Correct output: -71.0754923621 | Program output: -65.02360     
Correct output: -66.5176295557 | Program output: -77.02360     
Correct output: 149.3187378    | Program output: 86.02360      
Correct output: -36.5450493525 | Program output: -83.02360     
Correct output: 75.4021928097  | Program output: 48.02360      
Correct output: 52.2615929867  | Program output: 74.02360      
Correct output: -19.2178367434 | Program output: 43.02360      
Correct output: 66.7518906772  | Program output: 1.02360       
Correct output: 7.673605441    | Program output: 27.02360      
Correct output: 23.6294031682  | Program output: 90.02360      
Correct output: -6.1389033433  | Program output: 38.02360      
Correct output: 9.2516366816   | Program output: -82.02360     
Correct output: 31.3251776267  | Program output: -55.02360     
Correct output: 73.3746496408  | Program output: 0.02360       
Correct output: 20.0500553336  | Program output: -19.02360     
Correct output: -23.2820697498 | Program output: 32.02360      
Correct output: 120.1004999359 | Program output: 30.02360      
Correct output: -155.453212395 | Program output: -98.02360     
Correct output: 31.10301576    | Program output: 10.02360      
Correct output: 45.5733057121  | Program output: -39.02360     
Correct output: -68.592783645  | Program output: -78.02360     
Correct output: -125.979392023 | Program output: -70.02360     
Correct output: -91.9273649148 | Program output: -71.02360     
Correct output: -92.5660607267 | Program output: -49.02360     
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_inc} {:instruction float_add} {:instruction float_yank} {:instruction integer_dup} {:instruction float_min} {:instruction in2} {:instruction float_inc} {:instruction float_dup} {:instruction float_mult} {:instruction float_sub} {:instruction integer_yank} {:instruction float_sub} {:instruction 100} {:instruction integer_dup_items} {:instruction float_add} {:instruction 100} {:instruction integer_dup_items} {:instruction float_add} {:instruction float_rot} {:instruction float_mult} {:instruction integer_flush} {:instruction integer_pop} {:instruction float_min} {:instruction print_integer} {:instruction float_add} {:instruction integer_pop} {:instruction float_tan} {:instruction print_float} {:instruction integer_pop} {:instruction 27} {:instruction float_sub} {:instruction float_sub} {:instruction float_tan} {:instruction integer_yank} {:instruction integer_min} {:instruction float_max} {:instruction integer_sub} {:instruction 9} {:instruction float_swap} {:instruction integer_stackdepth} {:instruction float_frominteger} {:instruction tag_float_196} {:instruction float_swap} {:instruction float_rot} {:instruction integer_add} {:instruction integer_max} {:instruction float_max} {:instruction integer_stackdepth} {:instruction float_add} {:instruction in2} {:instruction float_frominteger} {:instruction print_float} {:instruction integer_dup} {:instruction float_shove} {:instruction float_shove} {:instruction integer_inc} {:instruction print_integer} {:instruction integer_shove} {:instruction print_float} {:instruction integer_div} {:instruction integer_sub} {:instruction integer_fromfloat} {:instruction integer_mod} {:instruction print_integer} {:instruction print_integer} {:instruction integer_shove} {:instruction print_float} {:instruction integer_div} {:instruction float_yankdup} {:instruction integer_fromfloat} {:instruction integer_mod} {:instruction print_integer} {:instruction integer_mult} {:instruction float_swap} {:instruction integer_stackdepth} {:instruction integer_stackdepth} {:instruction integer_div} {:instruction float_mod} {:instruction float_swap} {:instruction print_integer} {:instruction integer_mod} {:instruction float_div} {:instruction float_mod} {:instruction float_inc} {:instruction print_float} {:instruction integer_flush} {:instruction float_cos} {:instruction -51} {:instruction integer_dec} {:instruction float_sub} {:instruction float_tan} {:instruction float_sub} {:instruction float_sin} {:instruction integer_yank} {:instruction float_dup})
Best program: (integer_inc float_add float_yank integer_dup float_min in2 float_inc float_dup float_mult float_sub integer_yank float_sub 100 integer_dup_items float_add 100 integer_dup_items float_add float_rot float_mult integer_flush integer_pop float_min print_integer float_add integer_pop float_tan print_float integer_pop 27 float_sub float_sub float_tan integer_yank integer_min float_max integer_sub 9 float_swap integer_stackdepth float_frominteger tag_float_196 float_swap float_rot integer_add integer_max float_max integer_stackdepth float_add in2 float_frominteger print_float integer_dup float_shove float_shove integer_inc print_integer integer_shove print_float integer_div integer_sub integer_fromfloat integer_mod print_integer print_integer integer_shove print_float integer_div float_yankdup integer_fromfloat integer_mod print_integer integer_mult float_swap integer_stackdepth integer_stackdepth integer_div float_mod float_swap print_integer integer_mod float_div float_mod float_inc print_float integer_flush float_cos -51 integer_dec float_sub float_tan float_sub float_sin integer_yank float_dup)
Errors: [16.5677 9 6.0519 8 10.506 11 63.2951 9 46.4786 10 27.3786 9 21.762 10 62.2414 11 65.7283 11 19.35 7 66.3942 9 44.1625 9 91.2752 9 86.3488 11 73.351 10 39.0737 11 55.3057 10 90.0769 10 57.4296 10 21.0794 8 84.5969 11 9.4308 7 55.9558 10 20.9038 8 43.5425 10]
Total: 1416.2864000000002
Mean: 28.325727
Genome size: 95
Size: 96
Percent parens: 0.010
--- Population Statistics ---
Average total errors in population: 5166.859478099995
Median total errors in population: 1423.2858
Error averages by case: (175.66933790000172 9.634 167.67462070000056 9.455 170.7541296000015 11.153 208.58441669999908 9.29 200.1768220999996 10.316 177.92263420000194 9.794 173.12152679999994 11.138 206.66760519999792 11.372 193.92880019999876 10.876 169.80306819999916 8.531 210.12679220000024 10.042 191.51940739999915 8.782 236.84571189999767 10.253 233.41023089999894 11.273 199.23180490000158 10.912 194.30506899999946 11.098 200.8925462999979 10.346 230.4359045999981 10.369 211.0077696000024 10.427 172.15623439999865 7.977 232.04734969999782 11.621 169.88757860000058 7.918 209.49419390000205 10.35 180.16566920000093 8.828 198.89425389999903 10.381)
Error minima by case: (15.5441 8 5.9765 7 9.4824 9 62.3187 7 6.5216 8 26.4022 8 16.2616 9 10.8056 5 1.0 4 1.3264 7 3.3706 9 6.1389 5 0.2516 5 4.3252 5 0.0 4 6.9499 5 6.7413 5 84.1005 8 57.3542 8 4.103 6 9.5733 5 8.4072 7 55.8804 8 20.8284 7 43.4671 8)
Average genome size in population (length): 88.839
Average program size in population (points): 89.839
Average percent parens in population: 0.011
Minimum age in population: 13.4140625
Maximum age in population: 17.599609375
Average age in population: 15.6546533203125
Median age in population: 15.7138671875
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 16
Genome diversity (% unique Plush genomes):	 0.852
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 16
Syntactic diversity (% unique Push programs):	 0.852
Total error diversity:				 0.164
Error (vector) diversity:			 0.21
Behavioral diversity:				 0.212
--- Run Statistics ---
Number of program evaluations used so far: 12000
Number of point (instruction) evaluations so far: 17581981
--- Timings ---
Current time: 1529615197483 milliseconds
Total Time:          44.0 seconds
Initialization:       0.1 seconds,  0.3%
Reproduction:        17.5 seconds, 39.9%
Fitness Testing:     20.6 seconds, 46.9%
Report:               5.7 seconds, 12.9%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 11
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 12
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 12
;;******************************
;; -*- Number IO problem report - generation 12
Test total error for best: 60172.231600000014
Test mean error for best: 30.08612
;;------------------------------
Outputs of best individual on training cases:
Correct output: -57.4559422311 | Program output: -74.02360     
Correct output: -71.0754923621 | Program output: -65.02360     
Correct output: -66.5176295557 | Program output: -77.02360     
Correct output: 149.3187378    | Program output: 86.02360      
Correct output: -36.5450493525 | Program output: -83.02360     
Correct output: 75.4021928097  | Program output: 48.02360      
Correct output: 52.2615929867  | Program output: 74.02360      
Correct output: -19.2178367434 | Program output: 43.02360      
Correct output: 66.7518906772  | Program output: 1.02360       
Correct output: 7.673605441    | Program output: 27.02360      
Correct output: 23.6294031682  | Program output: 90.02360      
Correct output: -6.1389033433  | Program output: 38.02360      
Correct output: 9.2516366816   | Program output: -82.02360     
Correct output: 31.3251776267  | Program output: -55.02360     
Correct output: 73.3746496408  | Program output: 0.02360       
Correct output: 20.0500553336  | Program output: -19.02360     
Correct output: -23.2820697498 | Program output: 32.02360      
Correct output: 120.1004999359 | Program output: 30.02360      
Correct output: -155.453212395 | Program output: -98.02360     
Correct output: 31.10301576    | Program output: 10.02360      
Correct output: 45.5733057121  | Program output: -39.02360     
Correct output: -68.592783645  | Program output: -78.02360     
Correct output: -125.979392023 | Program output: -70.02360     
Correct output: -91.9273649148 | Program output: -71.02360     
Correct output: -92.5660607267 | Program output: -49.02360     
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_inc} {:instruction float_add} {:instruction float_yank} {:instruction integer_dup} {:instruction float_min} {:instruction in2} {:instruction float_inc} {:instruction float_dup} {:instruction float_mult} {:instruction float_sub} {:instruction integer_yank} {:instruction float_sub} {:instruction 100} {:instruction integer_dup_items} {:instruction float_add} {:instruction 100} {:instruction integer_dup_items} {:instruction float_add} {:instruction float_rot} {:instruction float_mult} {:instruction integer_flush} {:instruction integer_pop} {:instruction float_min} {:instruction print_integer} {:instruction float_add} {:instruction integer_pop} {:instruction float_tan} {:instruction print_float} {:instruction integer_pop} {:instruction 27} {:instruction float_sub} {:instruction float_sub} {:instruction float_tan} {:instruction integer_yank} {:instruction integer_min} {:instruction float_max} {:instruction integer_sub} {:instruction 9} {:instruction float_swap} {:instruction integer_stackdepth} {:instruction float_frominteger} {:instruction tag_float_196} {:instruction float_swap} {:instruction float_rot} {:instruction integer_add} {:instruction integer_max} {:instruction float_max} {:instruction integer_stackdepth} {:instruction float_add} {:instruction in2} {:instruction float_frominteger} {:instruction print_float} {:instruction integer_dup} {:instruction float_shove} {:instruction float_shove} {:instruction integer_inc} {:instruction print_integer} {:instruction integer_shove} {:instruction print_float} {:instruction integer_div} {:instruction integer_sub} {:instruction integer_fromfloat} {:instruction integer_mod} {:instruction print_integer} {:instruction print_integer} {:instruction integer_shove} {:instruction print_float} {:instruction integer_div} {:instruction float_yankdup} {:instruction integer_fromfloat} {:instruction integer_mod} {:instruction print_integer} {:instruction integer_mult} {:instruction float_swap} {:instruction integer_stackdepth} {:instruction integer_stackdepth} {:instruction integer_div} {:instruction float_mod} {:instruction float_swap} {:instruction print_integer} {:instruction integer_mod} {:instruction float_div} {:instruction float_mod} {:instruction float_inc} {:instruction print_float} {:instruction integer_flush} {:instruction float_cos} {:instruction -51} {:instruction integer_dec} {:instruction float_sub} {:instruction float_tan} {:instruction float_sub} {:instruction float_sin} {:instruction integer_yank} {:instruction float_dup})
Best program: (integer_inc float_add float_yank integer_dup float_min in2 float_inc float_dup float_mult float_sub integer_yank float_sub 100 integer_dup_items float_add 100 integer_dup_items float_add float_rot float_mult integer_flush integer_pop float_min print_integer float_add integer_pop float_tan print_float integer_pop 27 float_sub float_sub float_tan integer_yank integer_min float_max integer_sub 9 float_swap integer_stackdepth float_frominteger tag_float_196 float_swap float_rot integer_add integer_max float_max integer_stackdepth float_add in2 float_frominteger print_float integer_dup float_shove float_shove integer_inc print_integer integer_shove print_float integer_div integer_sub integer_fromfloat integer_mod print_integer print_integer integer_shove print_float integer_div float_yankdup integer_fromfloat integer_mod print_integer integer_mult float_swap integer_stackdepth integer_stackdepth integer_div float_mod float_swap print_integer integer_mod float_div float_mod float_inc print_float integer_flush float_cos -51 integer_dec float_sub float_tan float_sub float_sin integer_yank float_dup)
Errors: [16.5677 9 6.0519 8 10.506 11 63.2951 9 46.4786 10 27.3786 9 21.762 10 62.2414 11 65.7283 11 19.35 7 66.3942 9 44.1625 9 91.2752 9 86.3488 11 73.351 10 39.0737 11 55.3057 10 90.0769 10 57.4296 10 21.0794 8 84.5969 11 9.4308 7 55.9558 10 20.9038 8 43.5425 10]
Total: 1416.2864000000002
Mean: 28.325727
Genome size: 95
Size: 96
Percent parens: 0.010
--- Population Statistics ---
Average total errors in population: 4836.7178779999895
Median total errors in population: 1421.2858
Error averages by case: (163.14879960000164 9.673 154.82934090000018 9.39 158.4538868000003 11.205 196.059729499999 9.313 187.25200979999943 10.4 164.19931250000081 9.769 159.6722319999996 11.025 193.01742329999868 11.27 180.21671849999868 10.993 156.7038765000003 8.517 196.50806630000093 9.685 177.6653273000002 8.879 223.07066189999887 10.057 218.56756159999975 11.414 188.67102640000115 10.658 179.3083525999999 10.82 187.155565499998 10.516 216.48390449999857 10.359 199.9099406000024 10.401 157.52836109999896 7.882 217.07910969999895 11.616 157.63976170000072 8.084 197.58742050000106 10.527 167.72588650000037 8.994 186.20260240000005 10.614)
Error minima by case: (15.5441 8 5.9765 7 9.4824 9 13.3187 7 10.455 8 0.4022 7 16.2616 9 18.3861 7 8.2481 5 0.3264 7 3.3706 8 6.1389 6 7.2516 7 0.3252 8 1.6254 4 2.0501 7 23.2821 7 9.9355 5 57.3542 7 0.103 6 9.5733 8 8.4072 7 55.8804 6 20.8284 7 43.4671 6)
Average genome size in population (length): 88.38
Average program size in population (points): 89.38
Average percent parens in population: 0.011
Minimum age in population: 14.9765625
Maximum age in population: 19.02294921875
Average age in population: 17.07940869140625
Median age in population: 17.1259765625
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 24
Genome diversity (% unique Plush genomes):	 0.846
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 24
Syntactic diversity (% unique Push programs):	 0.846
Total error diversity:				 0.185
Error (vector) diversity:			 0.229
Behavioral diversity:				 0.232
--- Run Statistics ---
Number of program evaluations used so far: 13000
Number of point (instruction) evaluations so far: 19791531
--- Timings ---
Current time: 1529615201212 milliseconds
Total Time:          47.9 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        18.9 seconds, 39.4%
Fitness Testing:     22.6 seconds, 47.1%
Report:               6.3 seconds, 13.2%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 12
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 13
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 13
;;******************************
;; -*- Number IO problem report - generation 13
Test total error for best: 60123.23230000003
Test mean error for best: 30.06162
;;------------------------------
Outputs of best individual on training cases:
Correct output: -57.4559422311 | Program output: -74.02362     
Correct output: -71.0754923621 | Program output: -65.02362     
Correct output: -66.5176295557 | Program output: -77.02362     
Correct output: 149.3187378    | Program output: 86.02362      
Correct output: -36.5450493525 | Program output: -83.02362     
Correct output: 75.4021928097  | Program output: 48.02362      
Correct output: 52.2615929867  | Program output: 74.02362      
Correct output: -19.2178367434 | Program output: 43.02362      
Correct output: 66.7518906772  | Program output: 1.02362       
Correct output: 7.673605441    | Program output: 27.02362      
Correct output: 23.6294031682  | Program output: 90.02362      
Correct output: -6.1389033433  | Program output: 38.02362      
Correct output: 9.2516366816   | Program output: -82.02362     
Correct output: 31.3251776267  | Program output: -55.02362     
Correct output: 73.3746496408  | Program output: 0.02362       
Correct output: 20.0500553336  | Program output: -19.02362     
Correct output: -23.2820697498 | Program output: 32.02362      
Correct output: 120.1004999359 | Program output: 30.02362      
Correct output: -155.453212395 | Program output: -98.02362     
Correct output: 31.10301576    | Program output: 10.02362      
Correct output: 45.5733057121  | Program output: -39.02362     
Correct output: -68.592783645  | Program output: -78.02362     
Correct output: -125.979392023 | Program output: -70.02362     
Correct output: -91.9273649148 | Program output: -71.02362     
Correct output: -92.5660607267 | Program output: -49.02362     
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_yank} {:instruction integer_rot} {:instruction integer_stackdepth} {:instruction float_yankdup} {:instruction float_dup_items} {:instruction float_shove} {:instruction integer_sub} {:instruction float_dec} {:instruction float_tan} {:instruction integer_pop} {:instruction integer_mod} {:instruction float_dup_items} {:instruction integer_dec} {:instruction integer_fromfloat} {:instruction integer_min} {:instruction float_mod} {:instruction integer_shove} {:instruction integer_dup_times} {:instruction integer_swap} {:instruction integer_max} {:instruction float_sub} {:instruction 100} {:instruction integer_dup_items} {:instruction float_mult} {:instruction float_sub} {:instruction integer_yank} {:instruction float_sub} {:instruction 100} {:instruction integer_dup_items} {:instruction float_add} {:instruction float_rot} {:instruction float_mult} {:instruction integer_flush} {:instruction integer_pop} {:instruction float_min} {:instruction print_integer} {:instruction float_add} {:instruction float_tan} {:instruction print_float} {:instruction integer_pop} {:instruction 27} {:instruction float_sub} {:instruction float_sub} {:instruction float_tan} {:instruction integer_yank} {:instruction integer_min} {:instruction float_max} {:instruction integer_sub} {:instruction 9} {:instruction float_mult} {:instruction integer_stackdepth} {:instruction float_frominteger} {:instruction tag_float_196} {:instruction float_swap} {:instruction float_rot} {:instruction integer_add} {:instruction integer_max} {:instruction float_max} {:instruction integer_stackdepth} {:instruction float_add} {:instruction in2} {:instruction float_frominteger} {:instruction print_float} {:instruction integer_dup} {:instruction float_shove} {:instruction float_shove} {:instruction integer_inc} {:instruction float_mod} {:instruction integer_dup} {:instruction integer_dup_items} {:instruction print_integer} {:instruction integer_shove} {:instruction integer_yank} {:instruction print_integer} {:instruction integer_shove} {:instruction print_float} {:instruction integer_div} {:instruction integer_sub} {:instruction integer_fromfloat} {:instruction integer_mod} {:instruction print_integer} {:instruction integer_mult} {:instruction float_swap} {:instruction integer_stackdepth} {:instruction integer_stackdepth} {:instruction float_mod} {:instruction float_inc} {:instruction print_float} {:instruction integer_flush} {:instruction float_cos} {:instruction float_mult} {:instruction integer_dec} {:instruction float_sub} {:instruction float_tan} {:instruction float_sub} {:instruction float_sin} {:instruction integer_yank} {:instruction float_dup})
Best program: (float_yank integer_rot integer_stackdepth float_yankdup float_dup_items float_shove integer_sub float_dec float_tan integer_pop integer_mod float_dup_items integer_dec integer_fromfloat integer_min float_mod integer_shove integer_dup_times integer_swap integer_max float_sub 100 integer_dup_items float_mult float_sub integer_yank float_sub 100 integer_dup_items float_add float_rot float_mult integer_flush integer_pop float_min print_integer float_add float_tan print_float integer_pop 27 float_sub float_sub float_tan integer_yank integer_min float_max integer_sub 9 float_mult integer_stackdepth float_frominteger tag_float_196 float_swap float_rot integer_add integer_max float_max integer_stackdepth float_add in2 float_frominteger print_float integer_dup float_shove float_shove integer_inc float_mod integer_dup integer_dup_items print_integer integer_shove integer_yank print_integer integer_shove print_float integer_div integer_sub integer_fromfloat integer_mod print_integer integer_mult float_swap integer_stackdepth integer_stackdepth float_mod float_inc print_float integer_flush float_cos float_mult integer_dec float_sub float_tan float_sub float_sin integer_yank float_dup)
Errors: [16.5677 9 6.0519 7 10.506 10 63.2951 9 46.4786 9 27.3786 9 21.762 10 62.2415 11 65.7283 10 19.35 8 66.3942 8 44.1625 9 91.2753 9 86.3488 10 73.351 11 39.0737 11 55.3057 10 90.0769 10 57.4296 10 21.0794 8 84.5969 11 9.4308 7 55.9558 10 20.9037 8 43.5424 10]
Total: 1412.2864000000002
Mean: 28.245728
Genome size: 98
Size: 99
Percent parens: 0.010
--- Population Statistics ---
Average total errors in population: 5030.7497731
Median total errors in population: 1420.3246000000001
Error averages by case: (170.80353030000174 9.517 162.2954411999999 9.052 165.91730689999912 11.197 202.916029899999 9.243 195.29500289999945 10.417 172.44680289999906 9.658 167.79108249999916 10.729 201.88720509999936 11.26 191.46450319999832 10.911 163.73604370000177 8.627 205.12071440000133 9.656 186.58011270000185 9.196 231.83832760000084 9.899 227.65676340000147 11.153 190.21150009999974 10.783 188.46785170000075 10.667 195.17905679999802 10.518 224.02586089999951 10.37 206.2890119000022 10.203 165.97187339999908 7.652 226.18885060000105 11.642 165.0581336000008 8.104 204.59414049999916 10.528 174.95614710000012 8.974 193.75647980000073 10.346)
Error minima by case: (14.5441 7 5.9765 7 8.4824 8 50.3187 7 36.545 9 15.5978 8 16.2252 9 19.2178 8 23.2481 5 4.6736 6 12.3706 8 6.1389 7 6.2516 7 4.6748 8 16.6254 6 15.9499 7 23.2821 8 21.1005 7 57.3542 8 4.897 5 9.5369 8 7.4072 7 55.8804 7 20.8284 7 43.4671 7)
Average genome size in population (length): 91.239
Average program size in population (points): 92.239
Average percent parens in population: 0.011
Minimum age in population: 16.05859375
Maximum age in population: 20.599365234375
Average age in population: 18.49614672851562
Median age in population: 18.55517578125
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 21
Genome diversity (% unique Plush genomes):	 0.842
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 21
Syntactic diversity (% unique Push programs):	 0.842
Total error diversity:				 0.209
Error (vector) diversity:			 0.253
Behavioral diversity:				 0.256
--- Run Statistics ---
Number of program evaluations used so far: 14000
Number of point (instruction) evaluations so far: 22072556
--- Timings ---
Current time: 1529615205338 milliseconds
Total Time:          51.8 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        20.3 seconds, 39.2%
Fitness Testing:     24.6 seconds, 47.5%
Report:               6.8 seconds, 13.1%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 13
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 14
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 14
;;******************************
;; -*- Number IO problem report - generation 14
Test total error for best: 60123.23230000003
Test mean error for best: 30.06162
;;------------------------------
Outputs of best individual on training cases:
Correct output: -57.4559422311 | Program output: -74.02362     
Correct output: -71.0754923621 | Program output: -65.02362     
Correct output: -66.5176295557 | Program output: -77.02362     
Correct output: 149.3187378    | Program output: 86.02362      
Correct output: -36.5450493525 | Program output: -83.02362     
Correct output: 75.4021928097  | Program output: 48.02362      
Correct output: 52.2615929867  | Program output: 74.02362      
Correct output: -19.2178367434 | Program output: 43.02362      
Correct output: 66.7518906772  | Program output: 1.02362       
Correct output: 7.673605441    | Program output: 27.02362      
Correct output: 23.6294031682  | Program output: 90.02362      
Correct output: -6.1389033433  | Program output: 38.02362      
Correct output: 9.2516366816   | Program output: -82.02362     
Correct output: 31.3251776267  | Program output: -55.02362     
Correct output: 73.3746496408  | Program output: 0.02362       
Correct output: 20.0500553336  | Program output: -19.02362     
Correct output: -23.2820697498 | Program output: 32.02362      
Correct output: 120.1004999359 | Program output: 30.02362      
Correct output: -155.453212395 | Program output: -98.02362     
Correct output: 31.10301576    | Program output: 10.02362      
Correct output: 45.5733057121  | Program output: -39.02362     
Correct output: -68.592783645  | Program output: -78.02362     
Correct output: -125.979392023 | Program output: -70.02362     
Correct output: -91.9273649148 | Program output: -71.02362     
Correct output: -92.5660607267 | Program output: -49.02362     
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_inc} {:instruction float_add} {:instruction float_yank} {:instruction integer_inc} {:instruction float_add} {:instruction float_yank} {:instruction integer_dup} {:instruction float_min} {:instruction in2} {:instruction float_inc} {:instruction float_div} {:instruction integer_max} {:instruction integer_flush} {:instruction float_tan} {:instruction integer_pop} {:instruction integer_mod} {:instruction float_dup_items} {:instruction integer_dec} {:instruction integer_fromfloat} {:instruction float_sub} {:instruction 100} {:instruction integer_dup_items} {:instruction float_add} {:instruction float_rot} {:instruction float_mult} {:instruction integer_flush} {:instruction integer_pop} {:instruction float_min} {:instruction print_integer} {:instruction float_add} {:instruction integer_pop} {:instruction float_tan} {:instruction print_float} {:instruction integer_pop} {:instruction 27} {:instruction float_sub} {:instruction float_sub} {:instruction float_tan} {:instruction integer_yank} {:instruction integer_min} {:instruction float_tan} {:instruction float_dec} {:instruction integer_min} {:instruction float_max} {:instruction integer_sub} {:instruction 9} {:instruction float_swap} {:instruction integer_stackdepth} {:instruction float_frominteger} {:instruction tag_float_196} {:instruction float_swap} {:instruction float_rot} {:instruction integer_add} {:instruction integer_max} {:instruction float_max} {:instruction integer_stackdepth} {:instruction float_add} {:instruction in2} {:instruction float_frominteger} {:instruction print_float} {:instruction integer_dup} {:instruction float_shove} {:instruction float_shove} {:instruction integer_inc} {:instruction float_mod} {:instruction integer_dup} {:instruction integer_dup_items} {:instruction print_integer} {:instruction integer_shove} {:instruction integer_shove} {:instruction print_integer} {:instruction integer_shove} {:instruction print_float} {:instruction integer_div} {:instruction integer_sub} {:instruction integer_fromfloat} {:instruction integer_mod} {:instruction print_integer} {:instruction integer_mult} {:instruction float_swap} {:instruction integer_stackdepth} {:instruction integer_stackdepth} {:instruction float_mod} {:instruction float_inc} {:instruction print_float} {:instruction integer_flush} {:instruction float_cos} {:instruction float_mult} {:instruction integer_dec} {:instruction float_sub} {:instruction float_tan} {:instruction print_integer} {:instruction integer_mod} {:instruction float_div} {:instruction float_mod} {:instruction float_inc} {:instruction print_float} {:instruction integer_flush} {:instruction float_cos} {:instruction -52} {:instruction integer_dec} {:instruction float_sub} {:instruction float_tan} {:instruction float_sub} {:instruction float_sin} {:instruction integer_yank} {:instruction float_dup})
Best program: (integer_inc float_add float_yank integer_inc float_add float_yank integer_dup float_min in2 float_inc float_div integer_max integer_flush float_tan integer_pop integer_mod float_dup_items integer_dec integer_fromfloat float_sub 100 integer_dup_items float_add float_rot float_mult integer_flush integer_pop float_min print_integer float_add integer_pop float_tan print_float integer_pop 27 float_sub float_sub float_tan integer_yank integer_min float_tan float_dec integer_min float_max integer_sub 9 float_swap integer_stackdepth float_frominteger tag_float_196 float_swap float_rot integer_add integer_max float_max integer_stackdepth float_add in2 float_frominteger print_float integer_dup float_shove float_shove integer_inc float_mod integer_dup integer_dup_items print_integer integer_shove integer_shove print_integer integer_shove print_float integer_div integer_sub integer_fromfloat integer_mod print_integer integer_mult float_swap integer_stackdepth integer_stackdepth float_mod float_inc print_float integer_flush float_cos float_mult integer_dec float_sub float_tan print_integer integer_mod float_div float_mod float_inc print_float integer_flush float_cos -52 integer_dec float_sub float_tan float_sub float_sin integer_yank float_dup)
Errors: [16.5677 9 6.0519 7 10.506 10 63.2951 9 46.4786 9 27.3786 9 21.762 10 62.2415 11 65.7283 10 19.35 8 66.3942 8 44.1625 9 91.2753 9 86.3488 10 73.351 11 39.0737 11 55.3057 10 90.0769 10 57.4296 10 21.0794 8 84.5969 11 9.4308 7 55.9558 10 20.9037 8 43.5424 10]
Total: 1412.2864000000002
Mean: 28.245728
Genome size: 107
Size: 108
Percent parens: 0.009
--- Population Statistics ---
Average total errors in population: 4857.162260100005
Median total errors in population: 1417.2826
Error averages by case: (161.8880373000014 9.414 153.4709842000002 8.791 157.06218629999861 11.206 197.59710839999877 9.263 186.2720441000004 10.409 166.63297069999834 9.291 162.75493939999913 10.454 196.54434609999973 11.31 184.65263099999856 10.895 159.396097800002 8.2 199.71982250000136 9.527 181.21303470000203 9.376 222.60653410000126 9.831 218.4748502000026 11.147 191.40172009999858 10.582 178.1923468000005 10.934 189.8814570999983 10.318 218.44864659999843 10.343 199.18488250000183 10.186 159.71250699999953 7.882 217.09922590000144 11.447 156.21744110000105 7.87 197.2527630999989 10.36 167.30730099999977 8.759 186.135382100001 10.248)
Error minima by case: (14.5441 8 5.9955 7 8.4824 9 59.3187 6 36.545 9 14.5978 7 15.2616 9 19.2178 8 23.2481 7 1.3547 6 3.3989 8 6.1389 8 0.2234 8 1.3252 9 16.6254 6 6.9782 8 23.2821 9 30.1005 7 57.3732 9 1.103 6 8.5733 9 7.4072 7 55.8994 8 20.8474 7 43.4861 8)
Average genome size in population (length): 94.668
Average program size in population (points): 95.668
Average percent parens in population: 0.011
Minimum age in population: 17.05859375
Maximum age in population: 21.8848876953125
Average age in population: 19.89865258789062
Median age in population: 19.913818359375
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 28
Genome diversity (% unique Plush genomes):	 0.858
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 28
Syntactic diversity (% unique Push programs):	 0.858
Total error diversity:				 0.182
Error (vector) diversity:			 0.224
Behavioral diversity:				 0.227
--- Run Statistics ---
Number of program evaluations used so far: 15000
Number of point (instruction) evaluations so far: 24439406
--- Timings ---
Current time: 1529615209454 milliseconds
Total Time:          56.0 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        21.7 seconds, 38.7%
Fitness Testing:     26.8 seconds, 47.8%
Report:               7.5 seconds, 13.3%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 14
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 15
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 15
;;******************************
;; -*- Number IO problem report - generation 15
Test total error for best: 60123.23230000003
Test mean error for best: 30.06162
;;------------------------------
Outputs of best individual on training cases:
Correct output: -57.4559422311 | Program output: -74.02362     
Correct output: -71.0754923621 | Program output: -65.02362     
Correct output: -66.5176295557 | Program output: -77.02362     
Correct output: 149.3187378    | Program output: 86.02362      
Correct output: -36.5450493525 | Program output: -83.02362     
Correct output: 75.4021928097  | Program output: 48.02362      
Correct output: 52.2615929867  | Program output: 74.02362      
Correct output: -19.2178367434 | Program output: 43.02362      
Correct output: 66.7518906772  | Program output: 1.02362       
Correct output: 7.673605441    | Program output: 27.02362      
Correct output: 23.6294031682  | Program output: 90.02362      
Correct output: -6.1389033433  | Program output: 38.02362      
Correct output: 9.2516366816   | Program output: -82.02362     
Correct output: 31.3251776267  | Program output: -55.02362     
Correct output: 73.3746496408  | Program output: 0.02362       
Correct output: 20.0500553336  | Program output: -19.02362     
Correct output: -23.2820697498 | Program output: 32.02362      
Correct output: 120.1004999359 | Program output: 30.02362      
Correct output: -155.453212395 | Program output: -98.02362     
Correct output: 31.10301576    | Program output: 10.02362      
Correct output: 45.5733057121  | Program output: -39.02362     
Correct output: -68.592783645  | Program output: -78.02362     
Correct output: -125.979392023 | Program output: -70.02362     
Correct output: -91.9273649148 | Program output: -71.02362     
Correct output: -92.5660607267 | Program output: -49.02362     
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_inc} {:instruction float_add} {:instruction float_yank} {:instruction float_yankdup} {:instruction float_min} {:instruction in2} {:instruction float_inc} {:instruction float_dup} {:instruction float_mult} {:instruction float_sub} {:instruction integer_yank} {:instruction float_sub} {:instruction 100} {:instruction integer_dup_items} {:instruction float_add} {:instruction 100} {:instruction integer_dup_items} {:instruction float_add} {:instruction float_rot} {:instruction float_mult} {:instruction integer_flush} {:instruction integer_pop} {:instruction float_min} {:instruction print_integer} {:instruction float_add} {:instruction integer_pop} {:instruction float_tan} {:instruction print_float} {:instruction integer_pop} {:instruction 27} {:instruction float_sub} {:instruction float_sub} {:instruction float_tan} {:instruction integer_yank} {:instruction integer_min} {:instruction float_tan} {:instruction float_dec} {:instruction integer_min} {:instruction float_max} {:instruction integer_sub} {:instruction 9} {:instruction float_swap} {:instruction integer_stackdepth} {:instruction float_frominteger} {:instruction tag_float_196} {:instruction float_swap} {:instruction float_rot} {:instruction integer_add} {:instruction integer_max} {:instruction float_max} {:instruction integer_stackdepth} {:instruction float_add} {:instruction in2} {:instruction float_frominteger} {:instruction print_float} {:instruction integer_dup} {:instruction float_shove} {:instruction float_shove} {:instruction integer_inc} {:instruction float_mod} {:instruction integer_dup} {:instruction integer_dup_items} {:instruction print_integer} {:instruction integer_shove} {:instruction integer_shove} {:instruction print_integer} {:instruction integer_shove} {:instruction print_float} {:instruction integer_div} {:instruction integer_sub} {:instruction integer_fromfloat} {:instruction integer_mod} {:instruction print_integer} {:instruction integer_mult} {:instruction float_swap} {:instruction integer_stackdepth} {:instruction integer_stackdepth} {:instruction float_mod} {:instruction float_inc} {:instruction print_float} {:instruction integer_flush} {:instruction float_cos} {:instruction float_mult} {:instruction integer_dec} {:instruction float_sub} {:instruction float_tan} {:instruction print_integer} {:instruction integer_mod} {:instruction float_div} {:instruction float_mod} {:instruction float_inc} {:instruction print_float} {:instruction integer_flush} {:instruction float_cos} {:instruction -52} {:instruction integer_dec} {:instruction float_sub} {:instruction float_tan} {:instruction float_sub} {:instruction float_sin} {:instruction integer_yank} {:instruction float_dup})
Best program: (integer_inc float_add float_yank float_yankdup float_min in2 float_inc float_dup float_mult float_sub integer_yank float_sub 100 integer_dup_items float_add 100 integer_dup_items float_add float_rot float_mult integer_flush integer_pop float_min print_integer float_add integer_pop float_tan print_float integer_pop 27 float_sub float_sub float_tan integer_yank integer_min float_tan float_dec integer_min float_max integer_sub 9 float_swap integer_stackdepth float_frominteger tag_float_196 float_swap float_rot integer_add integer_max float_max integer_stackdepth float_add in2 float_frominteger print_float integer_dup float_shove float_shove integer_inc float_mod integer_dup integer_dup_items print_integer integer_shove integer_shove print_integer integer_shove print_float integer_div integer_sub integer_fromfloat integer_mod print_integer integer_mult float_swap integer_stackdepth integer_stackdepth float_mod float_inc print_float integer_flush float_cos float_mult integer_dec float_sub float_tan print_integer integer_mod float_div float_mod float_inc print_float integer_flush float_cos -52 integer_dec float_sub float_tan float_sub float_sin integer_yank float_dup)
Errors: [16.5677 9 6.0519 7 10.506 10 63.2951 9 46.4786 9 27.3786 9 21.762 10 62.2415 11 65.7283 10 19.35 8 66.3942 8 44.1625 9 91.2753 9 86.3488 10 73.351 11 39.0737 11 55.3057 10 90.0769 10 57.4296 10 21.0794 8 84.5969 11 9.4308 7 55.9558 10 20.9037 8 43.5424 10]
Total: 1412.2864000000002
Mean: 28.245728
Genome size: 102
Size: 103
Percent parens: 0.010
--- Population Statistics ---
Average total errors in population: 5167.750055099994
Median total errors in population: 1416.2864000000002
Error averages by case: (179.7724084000024 9.535 171.35653249999987 8.686 174.9414074999976 11.165 204.3948208999983 9.274 203.99278560000124 10.322 173.956648599998 9.28 169.26457229999895 10.435 203.03893969999967 11.323 191.14620519999804 10.885 167.92370350000226 7.752 206.39625170000159 9.43 187.77136570000224 9.303 240.13304090000145 9.59 236.06063400000335 11.155 195.748482799998 10.357 197.2604820000006 11.111 198.22152179999856 10.285 227.24620489999594 10.285 214.88618620000162 10.382 168.95617719999882 8.056 234.6705334000017 11.276 174.09008140000105 7.787 213.20652589999852 10.349 183.8851588999999 8.671 202.4803841000016 10.255)
Error minima by case: (16.5441 8 6.0028 7 10.4824 9 63.2312 7 35.7545 9 27.3295 6 16.2616 9 19.9228 9 24.2708 7 1.3547 6 3.3706 8 5.981 8 0.2234 8 4.3252 8 16.6481 6 6.9499 8 24.3194 8 84.1005 8 57.3805 9 4.103 6 9.5733 9 9.4072 7 55.9067 9 20.8546 7 43.4933 9)
Average genome size in population (length): 94.679
Average program size in population (points): 95.679
Average percent parens in population: 0.011
Minimum age in population: 19.02197265625
Maximum age in population: 23.5504150390625
Average age in population: 21.39905706787109
Median age in population: 21.42153930664062
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 14
Genome diversity (% unique Plush genomes):	 0.885
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 14
Syntactic diversity (% unique Push programs):	 0.885
Total error diversity:				 0.165
Error (vector) diversity:			 0.219
Behavioral diversity:				 0.221
--- Run Statistics ---
Number of program evaluations used so far: 16000
Number of point (instruction) evaluations so far: 26806631
--- Timings ---
Current time: 1529615213563 milliseconds
Total Time:          60.0 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        23.0 seconds, 38.4%
Fitness Testing:     28.8 seconds, 48.1%
Report:               8.0 seconds, 13.4%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 15
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 16
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 16
;;******************************
;; -*- Number IO problem report - generation 16
Test total error for best: 60123.23230000003
Test mean error for best: 30.06162
;;------------------------------
Outputs of best individual on training cases:
Correct output: -57.4559422311 | Program output: -74.02362     
Correct output: -71.0754923621 | Program output: -65.02362     
Correct output: -66.5176295557 | Program output: -77.02362     
Correct output: 149.3187378    | Program output: 86.02362      
Correct output: -36.5450493525 | Program output: -83.02362     
Correct output: 75.4021928097  | Program output: 48.02362      
Correct output: 52.2615929867  | Program output: 74.02362      
Correct output: -19.2178367434 | Program output: 43.02362      
Correct output: 66.7518906772  | Program output: 1.02362       
Correct output: 7.673605441    | Program output: 27.02362      
Correct output: 23.6294031682  | Program output: 90.02362      
Correct output: -6.1389033433  | Program output: 38.02362      
Correct output: 9.2516366816   | Program output: -82.02362     
Correct output: 31.3251776267  | Program output: -55.02362     
Correct output: 73.3746496408  | Program output: 0.02362       
Correct output: 20.0500553336  | Program output: -19.02362     
Correct output: -23.2820697498 | Program output: 32.02362      
Correct output: 120.1004999359 | Program output: 30.02362      
Correct output: -155.453212395 | Program output: -98.02362     
Correct output: 31.10301576    | Program output: 10.02362      
Correct output: 45.5733057121  | Program output: -39.02362     
Correct output: -68.592783645  | Program output: -78.02362     
Correct output: -125.979392023 | Program output: -70.02362     
Correct output: -91.9273649148 | Program output: -71.02362     
Correct output: -92.5660607267 | Program output: -49.02362     
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_yank} {:instruction integer_rot} {:instruction integer_stackdepth} {:instruction float_yankdup} {:instruction float_dup_items} {:instruction float_shove} {:instruction integer_sub} {:instruction float_dec} {:instruction float_tan} {:instruction integer_pop} {:instruction integer_mod} {:instruction float_dup_items} {:instruction integer_dec} {:instruction integer_fromfloat} {:instruction integer_min} {:instruction float_mod} {:instruction integer_shove} {:instruction integer_dup_times} {:instruction integer_swap} {:instruction integer_max} {:instruction float_sub} {:instruction 100} {:instruction integer_dup_items} {:instruction float_mult} {:instruction float_sub} {:instruction integer_yank} {:instruction float_sub} {:instruction 100} {:instruction integer_dup_items} {:instruction float_add} {:instruction float_rot} {:instruction float_mult} {:instruction integer_flush} {:instruction integer_pop} {:instruction float_min} {:instruction print_integer} {:instruction float_add} {:instruction float_tan} {:instruction print_float} {:instruction integer_pop} {:instruction 27} {:instruction float_sub} {:instruction float_sub} {:instruction float_tan} {:instruction integer_yank} {:instruction integer_min} {:instruction float_max} {:instruction integer_sub} {:instruction 9} {:instruction float_mult} {:instruction integer_stackdepth} {:instruction float_frominteger} {:instruction tag_float_196} {:instruction float_swap} {:instruction float_rot} {:instruction integer_add} {:instruction integer_max} {:instruction float_max} {:instruction integer_stackdepth} {:instruction float_add} {:instruction in2} {:instruction float_frominteger} {:instruction print_float} {:instruction integer_dup} {:instruction float_shove} {:instruction float_shove} {:instruction integer_inc} {:instruction float_mod} {:instruction integer_dup} {:instruction integer_dup_items} {:instruction print_integer} {:instruction integer_shove} {:instruction integer_yank} {:instruction print_integer} {:instruction integer_shove} {:instruction print_float} {:instruction integer_div} {:instruction integer_sub} {:instruction integer_fromfloat} {:instruction integer_mod} {:instruction print_integer} {:instruction integer_mult} {:instruction float_swap} {:instruction integer_stackdepth} {:instruction integer_stackdepth} {:instruction float_mod} {:instruction float_inc} {:instruction print_float} {:instruction integer_flush} {:instruction float_cos} {:instruction float_mult} {:instruction integer_dec} {:instruction float_sub} {:instruction float_tan} {:instruction float_sub} {:instruction float_sin} {:instruction integer_yank} {:instruction float_dup})
Best program: (float_yank integer_rot integer_stackdepth float_yankdup float_dup_items float_shove integer_sub float_dec float_tan integer_pop integer_mod float_dup_items integer_dec integer_fromfloat integer_min float_mod integer_shove integer_dup_times integer_swap integer_max float_sub 100 integer_dup_items float_mult float_sub integer_yank float_sub 100 integer_dup_items float_add float_rot float_mult integer_flush integer_pop float_min print_integer float_add float_tan print_float integer_pop 27 float_sub float_sub float_tan integer_yank integer_min float_max integer_sub 9 float_mult integer_stackdepth float_frominteger tag_float_196 float_swap float_rot integer_add integer_max float_max integer_stackdepth float_add in2 float_frominteger print_float integer_dup float_shove float_shove integer_inc float_mod integer_dup integer_dup_items print_integer integer_shove integer_yank print_integer integer_shove print_float integer_div integer_sub integer_fromfloat integer_mod print_integer integer_mult float_swap integer_stackdepth integer_stackdepth float_mod float_inc print_float integer_flush float_cos float_mult integer_dec float_sub float_tan float_sub float_sin integer_yank float_dup)
Errors: [16.5677 9 6.0519 7 10.506 10 63.2951 9 46.4786 9 27.3786 9 21.762 10 62.2415 11 65.7283 10 19.35 8 66.3942 8 44.1625 9 91.2753 9 86.3488 10 73.351 11 39.0737 11 55.3057 10 90.0769 10 57.4296 10 21.0794 8 84.5969 11 9.4308 7 55.9558 10 20.9037 8 43.5424 10]
Total: 1412.2864000000002
Mean: 28.245728
Genome size: 98
Size: 99
Percent parens: 0.010
--- Population Statistics ---
Average total errors in population: 5109.272276899995
Median total errors in population: 1416.2864000000002
Error averages by case: (177.3424231000025 9.466 168.84692089999965 8.496 172.46232289999782 11.116 202.3326309999984 9.308 201.75607390000116 10.301 171.39523829999814 9.375 168.01594849999913 10.474 202.19492339999965 11.302 189.29429719999834 10.834 164.95142500000196 7.737 204.59374850000162 9.361 186.8809250000021 9.287 238.16633630000112 9.472 233.92053110000313 11.083 191.35892689999832 10.479 194.00056940000076 11.109 196.38350449999848 10.274 223.34483149999613 10.322 212.46619010000165 10.428 166.71662729999912 8.037 232.41689830000135 11.2 171.6032622000008 7.781 210.83619689999884 10.4 181.40650850000003 8.562 200.11501620000178 10.266)
Error minima by case: (16.5441 8 5.9831 6 10.4824 10 50.6813 7 36.545 9 27.3098 7 16.2516 9 19.2178 7 24.2581 5 5.6627 6 12.3706 8 6.1389 7 7.2407 7 4.6748 8 16.6354 4 15.9499 7 23.2821 7 79.8995 6 57.3609 7 4.897 6 9.5633 8 9.4072 6 55.887 7 20.835 7 43.4737 7)
Average genome size in population (length): 95.525
Average program size in population (points): 96.525
Average percent parens in population: 0.010
Minimum age in population: 20.3848876953125
Maximum age in population: 25.20571899414062
Average age in population: 22.83029241943359
Median age in population: 22.82658386230469
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 14
Genome diversity (% unique Plush genomes):	 0.894
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 14
Syntactic diversity (% unique Push programs):	 0.894
Total error diversity:				 0.182
Error (vector) diversity:			 0.236
Behavioral diversity:				 0.238
--- Run Statistics ---
Number of program evaluations used so far: 17000
Number of point (instruction) evaluations so far: 29194831
--- Timings ---
Current time: 1529615217482 milliseconds
Total Time:          64.1 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        24.3 seconds, 38.0%
Fitness Testing:     30.9 seconds, 48.2%
Report:               8.7 seconds, 13.6%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 16
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 17
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 17
;;******************************
;; -*- Number IO problem report - generation 17
Test total error for best: 60123.23230000003
Test mean error for best: 30.06162
;;------------------------------
Outputs of best individual on training cases:
Correct output: -57.4559422311 | Program output: -74.02362     
Correct output: -71.0754923621 | Program output: -65.02362     
Correct output: -66.5176295557 | Program output: -77.02362     
Correct output: 149.3187378    | Program output: 86.02362      
Correct output: -36.5450493525 | Program output: -83.02362     
Correct output: 75.4021928097  | Program output: 48.02362      
Correct output: 52.2615929867  | Program output: 74.02362      
Correct output: -19.2178367434 | Program output: 43.02362      
Correct output: 66.7518906772  | Program output: 1.02362       
Correct output: 7.673605441    | Program output: 27.02362      
Correct output: 23.6294031682  | Program output: 90.02362      
Correct output: -6.1389033433  | Program output: 38.02362      
Correct output: 9.2516366816   | Program output: -82.02362     
Correct output: 31.3251776267  | Program output: -55.02362     
Correct output: 73.3746496408  | Program output: 0.02362       
Correct output: 20.0500553336  | Program output: -19.02362     
Correct output: -23.2820697498 | Program output: 32.02362      
Correct output: 120.1004999359 | Program output: 30.02362      
Correct output: -155.453212395 | Program output: -98.02362     
Correct output: 31.10301576    | Program output: 10.02362      
Correct output: 45.5733057121  | Program output: -39.02362     
Correct output: -68.592783645  | Program output: -78.02362     
Correct output: -125.979392023 | Program output: -70.02362     
Correct output: -91.9273649148 | Program output: -71.02362     
Correct output: -92.5660607267 | Program output: -49.02362     
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_inc} {:instruction float_add} {:instruction float_yank} {:instruction integer_dup} {:instruction float_min} {:instruction in2} {:instruction float_inc} {:instruction float_dup} {:instruction float_mult} {:instruction float_sub} {:instruction integer_yank} {:instruction float_sub} {:instruction 100} {:instruction integer_dup_items} {:instruction float_add} {:instruction 100} {:instruction integer_mod} {:instruction float_dup_items} {:instruction integer_dec} {:instruction integer_fromfloat} {:instruction integer_min} {:instruction float_mod} {:instruction integer_shove} {:instruction integer_dup_times} {:instruction integer_swap} {:instruction integer_max} {:instruction float_sub} {:instruction 100} {:instruction integer_dup_items} {:instruction float_mult} {:instruction float_sub} {:instruction integer_yank} {:instruction float_sub} {:instruction 100} {:instruction integer_dup_items} {:instruction float_add} {:instruction float_rot} {:instruction float_mult} {:instruction integer_flush} {:instruction integer_pop} {:instruction float_min} {:instruction print_integer} {:instruction float_add} {:instruction float_tan} {:instruction print_float} {:instruction integer_pop} {:instruction 27} {:instruction float_sub} {:instruction float_sub} {:instruction float_tan} {:instruction integer_yank} {:instruction integer_min} {:instruction float_max} {:instruction integer_sub} {:instruction 9} {:instruction float_mult} {:instruction integer_stackdepth} {:instruction float_frominteger} {:instruction tag_float_196} {:instruction float_swap} {:instruction float_rot} {:instruction integer_add} {:instruction integer_max} {:instruction float_max} {:instruction integer_stackdepth} {:instruction float_add} {:instruction in2} {:instruction float_frominteger} {:instruction print_float} {:instruction integer_dup} {:instruction float_shove} {:instruction float_shove} {:instruction integer_inc} {:instruction float_mod} {:instruction integer_dup} {:instruction integer_dup_items} {:instruction print_integer} {:instruction integer_shove} {:instruction integer_yank} {:instruction print_integer} {:instruction integer_shove} {:instruction print_float} {:instruction integer_div} {:instruction integer_sub} {:instruction integer_fromfloat} {:instruction integer_mod} {:instruction print_integer} {:instruction integer_mult} {:instruction float_swap} {:instruction integer_stackdepth} {:instruction integer_stackdepth} {:instruction float_mod} {:instruction float_inc} {:instruction print_float} {:instruction integer_flush} {:instruction float_cos} {:instruction float_mult} {:instruction float_tan} {:instruction float_sub} {:instruction float_sin} {:instruction integer_yank} {:instruction float_dup})
Best program: (integer_inc float_add float_yank integer_dup float_min in2 float_inc float_dup float_mult float_sub integer_yank float_sub 100 integer_dup_items float_add 100 integer_mod float_dup_items integer_dec integer_fromfloat integer_min float_mod integer_shove integer_dup_times integer_swap integer_max float_sub 100 integer_dup_items float_mult float_sub integer_yank float_sub 100 integer_dup_items float_add float_rot float_mult integer_flush integer_pop float_min print_integer float_add float_tan print_float integer_pop 27 float_sub float_sub float_tan integer_yank integer_min float_max integer_sub 9 float_mult integer_stackdepth float_frominteger tag_float_196 float_swap float_rot integer_add integer_max float_max integer_stackdepth float_add in2 float_frominteger print_float integer_dup float_shove float_shove integer_inc float_mod integer_dup integer_dup_items print_integer integer_shove integer_yank print_integer integer_shove print_float integer_div integer_sub integer_fromfloat integer_mod print_integer integer_mult float_swap integer_stackdepth integer_stackdepth float_mod float_inc print_float integer_flush float_cos float_mult float_tan float_sub float_sin integer_yank float_dup)
Errors: [16.5677 9 6.0519 7 10.506 10 63.2951 9 46.4786 9 27.3786 9 21.762 10 62.2415 11 65.7283 10 19.35 8 66.3942 8 44.1625 9 91.2753 9 86.3488 10 73.351 11 39.0737 11 55.3057 10 90.0769 10 57.4296 10 21.0794 8 84.5969 11 9.4308 7 55.9558 10 20.9037 8 43.5424 10]
Total: 1412.2864000000002
Mean: 28.245728
Genome size: 102
Size: 103
Percent parens: 0.010
--- Population Statistics ---
Average total errors in population: 4979.498009399995
Median total errors in population: 1416.2864000000002
Error averages by case: (169.47713020000194 9.369 160.9326280000002 8.165 164.56972179999772 10.93 198.76306899999807 9.289 194.04933640000107 10.085 167.94207079999813 9.473 163.55348529999918 10.489 197.59538350000017 11.279 191.74338539999815 10.602 162.13346960000214 7.916 201.3098363000019 9.17 182.13479860000237 9.351 230.73248580000143 9.294 226.48128810000335 10.853 196.98070929999807 10.833 185.8500293000002 11.135 192.74260119999857 10.306 221.43497449999586 10.366 204.94454730000155 10.4 162.95532409999913 8.054 224.85435770000157 11.063 163.70628570000093 7.799 203.27623079999864 10.479 173.6021568999993 8.425 192.3807038000018 10.227)
Error minima by case: (16.5441 8 5.9831 6 10.4824 9 36.7173 7 36.545 8 14.5978 7 21.7384 9 19.2178 8 23.2481 6 1.3547 6 14.6011 8 6.1389 8 0.2234 7 4.6748 8 16.6254 5 11.0218 8 23.2821 8 9.9355 6 57.3609 7 21.0107 6 9.5733 9 9.4072 6 55.887 7 20.835 7 43.4737 8)
Average genome size in population (length): 96.971
Average program size in population (points): 97.971
Average percent parens in population: 0.010
Minimum age in population: 21.885498046875
Maximum age in population: 26.30464172363281
Average age in population: 24.28481379699707
Median age in population: 24.30113220214844
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 20
Genome diversity (% unique Plush genomes):	 0.895
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 20
Syntactic diversity (% unique Push programs):	 0.895
Total error diversity:				 0.191
Error (vector) diversity:			 0.26
Behavioral diversity:				 0.26
--- Run Statistics ---
Number of program evaluations used so far: 18000
Number of point (instruction) evaluations so far: 31619231
--- Timings ---
Current time: 1529615221861 milliseconds
Total Time:          68.3 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        25.9 seconds, 37.9%
Fitness Testing:     33.0 seconds, 48.3%
Report:               9.3 seconds, 13.6%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 17
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 18
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 18
;;******************************
;; -*- Number IO problem report - generation 18
Test total error for best: 60123.23230000003
Test mean error for best: 30.06162
;;------------------------------
Outputs of best individual on training cases:
Correct output: -57.4559422311 | Program output: -74.02362     
Correct output: -71.0754923621 | Program output: -65.02362     
Correct output: -66.5176295557 | Program output: -77.02362     
Correct output: 149.3187378    | Program output: 86.02362      
Correct output: -36.5450493525 | Program output: -83.02362     
Correct output: 75.4021928097  | Program output: 48.02362      
Correct output: 52.2615929867  | Program output: 74.02362      
Correct output: -19.2178367434 | Program output: 43.02362      
Correct output: 66.7518906772  | Program output: 1.02362       
Correct output: 7.673605441    | Program output: 27.02362      
Correct output: 23.6294031682  | Program output: 90.02362      
Correct output: -6.1389033433  | Program output: 38.02362      
Correct output: 9.2516366816   | Program output: -82.02362     
Correct output: 31.3251776267  | Program output: -55.02362     
Correct output: 73.3746496408  | Program output: 0.02362       
Correct output: 20.0500553336  | Program output: -19.02362     
Correct output: -23.2820697498 | Program output: 32.02362      
Correct output: 120.1004999359 | Program output: 30.02362      
Correct output: -155.453212395 | Program output: -98.02362     
Correct output: 31.10301576    | Program output: 10.02362      
Correct output: 45.5733057121  | Program output: -39.02362     
Correct output: -68.592783645  | Program output: -78.02362     
Correct output: -125.979392023 | Program output: -70.02362     
Correct output: -91.9273649148 | Program output: -71.02362     
Correct output: -92.5660607267 | Program output: -49.02362     
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_yank} {:instruction integer_rot} {:instruction integer_stackdepth} {:instruction float_yankdup} {:instruction float_dup_items} {:instruction float_shove} {:instruction integer_sub} {:instruction float_dec} {:instruction float_tan} {:instruction integer_pop} {:instruction integer_mod} {:instruction float_dup_items} {:instruction integer_dec} {:instruction integer_fromfloat} {:instruction integer_min} {:instruction float_mod} {:instruction integer_shove} {:instruction integer_dup_times} {:instruction integer_swap} {:instruction integer_max} {:instruction float_sub} {:instruction 100} {:instruction integer_dup_items} {:instruction float_mult} {:instruction float_sub} {:instruction integer_yank} {:instruction float_sub} {:instruction 100} {:instruction integer_dup_items} {:instruction float_add} {:instruction float_rot} {:instruction float_mult} {:instruction integer_flush} {:instruction integer_pop} {:instruction float_min} {:instruction print_integer} {:instruction float_add} {:instruction float_tan} {:instruction print_float} {:instruction integer_pop} {:instruction 27} {:instruction float_sub} {:instruction float_sub} {:instruction float_tan} {:instruction integer_yank} {:instruction integer_min} {:instruction float_max} {:instruction integer_sub} {:instruction 9} {:instruction float_mult} {:instruction integer_stackdepth} {:instruction float_frominteger} {:instruction tag_float_196} {:instruction float_swap} {:instruction float_rot} {:instruction integer_add} {:instruction integer_max} {:instruction float_max} {:instruction integer_stackdepth} {:instruction float_add} {:instruction in2} {:instruction float_frominteger} {:instruction print_float} {:instruction integer_dup} {:instruction float_shove} {:instruction float_shove} {:instruction integer_inc} {:instruction float_mod} {:instruction integer_dup} {:instruction integer_dup_items} {:instruction print_integer} {:instruction integer_shove} {:instruction integer_yank} {:instruction print_integer} {:instruction integer_shove} {:instruction print_float} {:instruction integer_div} {:instruction integer_sub} {:instruction integer_fromfloat} {:instruction integer_mod} {:instruction print_integer} {:instruction integer_mult} {:instruction float_swap} {:instruction integer_stackdepth} {:instruction integer_stackdepth} {:instruction float_mod} {:instruction float_inc} {:instruction print_float} {:instruction integer_flush} {:instruction float_cos} {:instruction float_mult} {:instruction integer_dec} {:instruction float_sub} {:instruction float_tan} {:instruction float_sub} {:instruction float_sin} {:instruction integer_yank} {:instruction float_dup})
Best program: (float_yank integer_rot integer_stackdepth float_yankdup float_dup_items float_shove integer_sub float_dec float_tan integer_pop integer_mod float_dup_items integer_dec integer_fromfloat integer_min float_mod integer_shove integer_dup_times integer_swap integer_max float_sub 100 integer_dup_items float_mult float_sub integer_yank float_sub 100 integer_dup_items float_add float_rot float_mult integer_flush integer_pop float_min print_integer float_add float_tan print_float integer_pop 27 float_sub float_sub float_tan integer_yank integer_min float_max integer_sub 9 float_mult integer_stackdepth float_frominteger tag_float_196 float_swap float_rot integer_add integer_max float_max integer_stackdepth float_add in2 float_frominteger print_float integer_dup float_shove float_shove integer_inc float_mod integer_dup integer_dup_items print_integer integer_shove integer_yank print_integer integer_shove print_float integer_div integer_sub integer_fromfloat integer_mod print_integer integer_mult float_swap integer_stackdepth integer_stackdepth float_mod float_inc print_float integer_flush float_cos float_mult integer_dec float_sub float_tan float_sub float_sin integer_yank float_dup)
Errors: [16.5677 9 6.0519 7 10.506 10 63.2951 9 46.4786 9 27.3786 9 21.762 10 62.2415 11 65.7283 10 19.35 8 66.3942 8 44.1625 9 91.2753 9 86.3488 10 73.351 11 39.0737 11 55.3057 10 90.0769 10 57.4296 10 21.0794 8 84.5969 11 9.4308 7 55.9558 10 20.9037 8 43.5424 10]
Total: 1412.2864000000002
Mean: 28.245728
Genome size: 98
Size: 99
Percent parens: 0.010
--- Population Statistics ---
Average total errors in population: 4341.137438299996
Median total errors in population: 1412.2864000000002
Error averages by case: (140.21512100000044 9.492 133.42588020000127 7.955 135.17729339999843 10.601 176.66210949999916 9.231 165.50228520000118 9.72 144.89819839999802 9.405 141.7871192000005 10.44 176.8074011000011 11.228 165.9948884999991 10.263 138.57367780000152 8.28 179.948821800001 8.837 161.02906580000194 9.269 203.23766380000066 9.456 198.9898891000031 10.497 169.74141509999828 11.069 158.42522339999977 11.101 169.98209059999854 10.307 198.46069299999687 10.339 178.9239920000016 10.36 138.00934940000056 8.039 197.57625160000146 11.09 134.29213670000098 7.787 177.13188869999874 10.359 146.51438739999904 8.576 165.90459560000184 10.225)
Error minima by case: (16.5441 8 5.9855 6 10.4824 9 50.3187 6 33.2713 8 23.5978 7 16.2616 9 15.9441 8 30.7519 6 1.3547 6 5.6102 8 2.8652 7 0.2234 8 0.6748 8 25.6254 5 2.0309 8 20.0084 8 21.1005 6 57.3632 7 0.897 6 9.5733 9 9.4072 7 55.8894 7 20.8374 6 43.4761 7)
Average genome size in population (length): 98.628
Average program size in population (points): 99.628
Average percent parens in population: 0.010
Minimum age in population: 23.1524658203125
Maximum age in population: 27.68170166015625
Average age in population: 25.74653414154053
Median age in population: 25.77080917358398
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 14
Genome diversity (% unique Plush genomes):	 0.897
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 14
Syntactic diversity (% unique Push programs):	 0.897
Total error diversity:				 0.175
Error (vector) diversity:			 0.217
Behavioral diversity:				 0.217
--- Run Statistics ---
Number of program evaluations used so far: 19000
Number of point (instruction) evaluations so far: 34085131
--- Timings ---
Current time: 1529615225910 milliseconds
Total Time:          72.5 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        27.3 seconds, 37.7%
Fitness Testing:     35.1 seconds, 48.4%
Report:              10.0 seconds, 13.8%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 18
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 19
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 19
;;******************************
;; -*- Number IO problem report - generation 19
Test total error for best: 60124.229999999996
Test mean error for best: 30.06212
;;------------------------------
Outputs of best individual on training cases:
Correct output: -57.4559422311 | Program output: -74.02362     
Correct output: -71.0754923621 | Program output: -65.02362     
Correct output: -66.5176295557 | Program output: -77.02362     
Correct output: 149.3187378    | Program output: 86.02872      
Correct output: -36.5450493525 | Program output: -83.02362     
Correct output: 75.4021928097  | Program output: 48.02492      
Correct output: 52.2615929867  | Program output: 74.02752      
Correct output: -19.2178367434 | Program output: 43.02442      
Correct output: 66.7518906772  | Program output: 1.02362       
Correct output: 7.673605441    | Program output: 27.02362      
Correct output: 23.6294031682  | Program output: 90.02912      
Correct output: -6.1389033433  | Program output: 38.02392      
Correct output: 9.2516366816   | Program output: -82.02362     
Correct output: 31.3251776267  | Program output: -55.02362     
Correct output: 73.3746496408  | Program output: 0.02362       
Correct output: 20.0500553336  | Program output: -19.02362     
Correct output: -23.2820697498 | Program output: 32.02362      
Correct output: 120.1004999359 | Program output: 30.02362      
Correct output: -155.453212395 | Program output: -98.02362     
Correct output: 31.10301576    | Program output: 10.02362      
Correct output: 45.5733057121  | Program output: -39.02362     
Correct output: -68.592783645  | Program output: -78.02362     
Correct output: -125.979392023 | Program output: -70.02362     
Correct output: -91.9273649148 | Program output: -71.02362     
Correct output: -92.5660607267 | Program output: -49.02362     
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_inc} {:instruction float_add} {:instruction float_yank} {:instruction integer_dup} {:instruction float_min} {:instruction in2} {:instruction float_inc} {:instruction float_dup} {:instruction float_mult} {:instruction float_sub} {:instruction integer_yank} {:instruction float_sub} {:instruction 100} {:instruction integer_dup_items} {:instruction float_add} {:instruction 100} {:instruction integer_dup_items} {:instruction float_add} {:instruction float_rot} {:instruction float_mult} {:instruction integer_flush} {:instruction integer_pop} {:instruction float_min} {:instruction print_integer} {:instruction float_add} {:instruction integer_pop} {:instruction float_tan} {:instruction print_float} {:instruction integer_pop} {:instruction 27} {:instruction float_sub} {:instruction integer_flush} {:instruction integer_pop} {:instruction float_min} {:instruction print_integer} {:instruction float_add} {:instruction float_tan} {:instruction print_float} {:instruction integer_pop} {:instruction 27} {:instruction float_sub} {:instruction float_sub} {:instruction float_tan} {:instruction integer_yank} {:instruction integer_min} {:instruction float_max} {:instruction integer_sub} {:instruction 9} {:instruction float_mult} {:instruction integer_stackdepth} {:instruction float_frominteger} {:instruction tag_float_196} {:instruction float_swap} {:instruction float_rot} {:instruction integer_add} {:instruction integer_max} {:instruction float_max} {:instruction integer_stackdepth} {:instruction float_add} {:instruction in2} {:instruction float_rot} {:instruction integer_add} {:instruction integer_max} {:instruction float_max} {:instruction integer_stackdepth} {:instruction float_add} {:instruction in2} {:instruction float_frominteger} {:instruction print_float} {:instruction integer_dup} {:instruction float_shove} {:instruction float_shove} {:instruction integer_inc} {:instruction float_mod} {:instruction integer_dup} {:instruction integer_dup_items} {:instruction print_integer} {:instruction integer_shove} {:instruction integer_yank} {:instruction print_integer} {:instruction integer_shove} {:instruction print_float} {:instruction integer_div} {:instruction integer_sub} {:instruction integer_fromfloat} {:instruction integer_mod} {:instruction print_integer} {:instruction integer_mult} {:instruction float_swap} {:instruction integer_stackdepth} {:instruction integer_stackdepth} {:instruction float_mod} {:instruction float_inc} {:instruction print_float} {:instruction integer_flush} {:instruction float_cos} {:instruction float_mult} {:instruction integer_dec} {:instruction float_sub} {:instruction float_tan} {:instruction float_sub} {:instruction tagged_192} {:instruction integer_yank} {:instruction float_dup})
Best program: (integer_inc float_add float_yank integer_dup float_min in2 float_inc float_dup float_mult float_sub integer_yank float_sub 100 integer_dup_items float_add 100 integer_dup_items float_add float_rot float_mult integer_flush integer_pop float_min print_integer float_add integer_pop float_tan print_float integer_pop 27 float_sub integer_flush integer_pop float_min print_integer float_add float_tan print_float integer_pop 27 float_sub float_sub float_tan integer_yank integer_min float_max integer_sub 9 float_mult integer_stackdepth float_frominteger tag_float_196 float_swap float_rot integer_add integer_max float_max integer_stackdepth float_add in2 float_rot integer_add integer_max float_max integer_stackdepth float_add in2 float_frominteger print_float integer_dup float_shove float_shove integer_inc float_mod integer_dup integer_dup_items print_integer integer_shove integer_yank print_integer integer_shove print_float integer_div integer_sub integer_fromfloat integer_mod print_integer integer_mult float_swap integer_stackdepth integer_stackdepth float_mod float_inc print_float integer_flush float_cos float_mult integer_dec float_sub float_tan float_sub tagged_192 integer_yank float_dup)
Errors: [16.5677 9 6.0519 7 10.506 10 63.29 8 46.4786 9 27.3773 8 21.7659 10 62.2423 12 65.7283 10 19.35 8 66.3997 8 44.1628 9 91.2753 9 86.3488 10 73.351 11 39.0737 11 55.3057 10 90.0769 10 57.4296 10 21.0794 8 84.5969 11 9.4308 7 55.9558 10 20.9037 8 43.5424 10]
Total: 1411.2905
Mean: 28.22581
Genome size: 104
Size: 105
Percent parens: 0.010
--- Population Statistics ---
Average total errors in population: 4055.2473742999955
Median total errors in population: 1412.2864000000002
Error averages by case: (131.01984209999978 9.525 122.29809390000158 7.99 126.09963149999838 10.527 164.5602893999996 9.232 156.20179920000115 9.638 132.55952379999806 9.353 127.46030030000114 10.409 163.04026020000111 11.274 153.36168680000003 10.196 125.2712393000016 8.401 165.82149560000053 8.753 147.02764190000207 9.313 193.54126600000046 9.566 188.898532800003 10.428 157.21322189999822 11.112 147.98247629999858 11.155 157.13764549999857 10.322 187.21657739999713 10.355 169.03973750000168 10.353 125.45825980000096 8.078 187.3391907000012 11.13 125.2442187000008 7.799 166.69794919999882 10.339 135.6788072999986 8.665 154.9226872000019 10.242)
Error minima by case: (16.5441 7 6.0155 6 10.4824 9 13.3187 6 11.455 8 27.3422 8 16.2616 9 20.2178 9 30.7519 7 0.3264 7 1.6294 7 7.1389 7 0.2234 8 4.6748 9 37.3746 8 1.9499 8 24.2821 9 15.8995 9 57.3932 9 4.897 6 9.5733 10 9.4072 7 55.9194 9 20.8674 7 43.5061 8)
Average genome size in population (length): 99.036
Average program size in population (points): 100.036
Average percent parens in population: 0.010
Minimum age in population: 24.39373779296875
Maximum age in population: 29.01839828491211
Average age in population: 27.14184616088867
Median age in population: 27.16230773925781
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 8
Genome diversity (% unique Plush genomes):	 0.919
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 8
Syntactic diversity (% unique Push programs):	 0.919
Total error diversity:				 0.163
Error (vector) diversity:			 0.199
Behavioral diversity:				 0.199
--- Run Statistics ---
Number of program evaluations used so far: 20000
Number of point (instruction) evaluations so far: 36561156
--- Timings ---
Current time: 1529615230194 milliseconds
Total Time:          76.7 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        28.7 seconds, 37.4%
Fitness Testing:     37.4 seconds, 48.7%
Report:              10.5 seconds, 13.7%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 19
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 20
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 20
;;******************************
;; -*- Number IO problem report - generation 20
Test total error for best: 60124.229999999996
Test mean error for best: 30.06212
;;------------------------------
Outputs of best individual on training cases:
Correct output: -57.4559422311 | Program output: -74.02362     
Correct output: -71.0754923621 | Program output: -65.02362     
Correct output: -66.5176295557 | Program output: -77.02362     
Correct output: 149.3187378    | Program output: 86.02872      
Correct output: -36.5450493525 | Program output: -83.02362     
Correct output: 75.4021928097  | Program output: 48.02492      
Correct output: 52.2615929867  | Program output: 74.02752      
Correct output: -19.2178367434 | Program output: 43.02442      
Correct output: 66.7518906772  | Program output: 1.02362       
Correct output: 7.673605441    | Program output: 27.02362      
Correct output: 23.6294031682  | Program output: 90.02912      
Correct output: -6.1389033433  | Program output: 38.02392      
Correct output: 9.2516366816   | Program output: -82.02362     
Correct output: 31.3251776267  | Program output: -55.02362     
Correct output: 73.3746496408  | Program output: 0.02362       
Correct output: 20.0500553336  | Program output: -19.02362     
Correct output: -23.2820697498 | Program output: 32.02362      
Correct output: 120.1004999359 | Program output: 30.02362      
Correct output: -155.453212395 | Program output: -98.02362     
Correct output: 31.10301576    | Program output: 10.02362      
Correct output: 45.5733057121  | Program output: -39.02362     
Correct output: -68.592783645  | Program output: -78.02362     
Correct output: -125.979392023 | Program output: -70.02362     
Correct output: -91.9273649148 | Program output: -71.02362     
Correct output: -92.5660607267 | Program output: -49.02362     
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_inc} {:instruction float_add} {:instruction float_yank} {:instruction integer_dup} {:instruction float_min} {:instruction in2} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_rot} {:instruction float_dup_items} {:instruction integer_flush} {:instruction integer_pop} {:instruction float_min} {:instruction print_integer} {:instruction float_add} {:instruction float_add} {:instruction float_rot} {:instruction float_mult} {:instruction integer_flush} {:instruction integer_pop} {:instruction 100} {:instruction integer_dup_items} {:instruction float_add} {:instruction float_rot} {:instruction float_mult} {:instruction integer_flush} {:instruction integer_pop} {:instruction float_min} {:instruction print_integer} {:instruction float_add} {:instruction integer_pop} {:instruction float_tan} {:instruction print_float} {:instruction integer_pop} {:instruction 27} {:instruction float_sub} {:instruction integer_flush} {:instruction integer_pop} {:instruction float_min} {:instruction print_integer} {:instruction float_add} {:instruction float_tan} {:instruction print_float} {:instruction integer_pop} {:instruction 27} {:instruction float_sub} {:instruction float_sub} {:instruction float_tan} {:instruction integer_yank} {:instruction integer_min} {:instruction float_max} {:instruction integer_sub} {:instruction 9} {:instruction float_mult} {:instruction integer_stackdepth} {:instruction float_frominteger} {:instruction tag_float_196} {:instruction float_swap} {:instruction float_rot} {:instruction integer_add} {:instruction integer_max} {:instruction float_max} {:instruction integer_stackdepth} {:instruction float_add} {:instruction in2} {:instruction float_rot} {:instruction integer_add} {:instruction integer_max} {:instruction float_max} {:instruction integer_stackdepth} {:instruction float_add} {:instruction in2} {:instruction float_frominteger} {:instruction print_float} {:instruction integer_dup} {:instruction float_shove} {:instruction float_shove} {:instruction integer_inc} {:instruction float_mod} {:instruction integer_dup} {:instruction integer_dup_items} {:instruction print_integer} {:instruction integer_shove} {:instruction integer_yank} {:instruction print_integer} {:instruction integer_shove} {:instruction print_float} {:instruction integer_div} {:instruction integer_sub} {:instruction integer_fromfloat} {:instruction integer_mod} {:instruction print_integer} {:instruction integer_mult} {:instruction float_swap} {:instruction integer_stackdepth} {:instruction integer_stackdepth} {:instruction float_mod} {:instruction float_inc} {:instruction print_float} {:instruction integer_flush} {:instruction float_cos} {:instruction float_mult} {:instruction integer_dec} {:instruction float_sub} {:instruction float_tan} {:instruction float_sub} {:instruction tagged_192} {:instruction integer_yank} {:instruction float_dup})
Best program: (integer_inc float_add float_yank integer_dup float_min in2 float_inc float_yankdup float_rot float_dup_items integer_flush integer_pop float_min print_integer float_add float_add float_rot float_mult integer_flush integer_pop 100 integer_dup_items float_add float_rot float_mult integer_flush integer_pop float_min print_integer float_add integer_pop float_tan print_float integer_pop 27 float_sub integer_flush integer_pop float_min print_integer float_add float_tan print_float integer_pop 27 float_sub float_sub float_tan integer_yank integer_min float_max integer_sub 9 float_mult integer_stackdepth float_frominteger tag_float_196 float_swap float_rot integer_add integer_max float_max integer_stackdepth float_add in2 float_rot integer_add integer_max float_max integer_stackdepth float_add in2 float_frominteger print_float integer_dup float_shove float_shove integer_inc float_mod integer_dup integer_dup_items print_integer integer_shove integer_yank print_integer integer_shove print_float integer_div integer_sub integer_fromfloat integer_mod print_integer integer_mult float_swap integer_stackdepth integer_stackdepth float_mod float_inc print_float integer_flush float_cos float_mult integer_dec float_sub float_tan float_sub tagged_192 integer_yank float_dup)
Errors: [16.5677 9 6.0519 7 10.506 10 63.29 8 46.4786 9 27.3773 8 21.7659 10 62.2423 12 65.7283 10 19.35 8 66.3997 8 44.1628 9 91.2753 9 86.3488 10 73.351 11 39.0737 11 55.3057 10 90.0769 10 57.4296 10 21.0794 8 84.5969 11 9.4308 7 55.9558 10 20.9037 8 43.5424 10]
Total: 1411.2905
Mean: 28.22581
Genome size: 109
Size: 110
Percent parens: 0.009
--- Population Statistics ---
Average total errors in population: 4277.512999199996
Median total errors in population: 1412.2864000000002
Error averages by case: (140.5436943000002 9.569 132.65713530000139 8.0 135.52680519999848 10.57 170.62638050000015 9.29 165.94176150000112 9.683 138.94074249999807 9.364 134.96230720000096 10.453 171.22535530000084 11.317 163.44615889999986 10.236 133.7034866000013 8.496 173.50547559999998 8.82 154.4100766000017 9.361 203.6428404000002 9.608 199.0768588000029 10.483 168.3798027999985 11.176 158.15053529999906 11.202 164.3242220999987 10.35 193.53240559999742 10.347 178.45224640000157 10.353 132.00990280000104 8.122 197.47562140000127 11.177 134.64956540000105 7.862 176.408143899999 10.323 145.7996254999987 8.716 164.99184930000177 10.252)
Error minima by case: (16.5441 8 6.0333 6 10.4824 9 13.3187 6 36.545 8 27.3436 7 16.2616 9 19.2178 8 30.7519 6 1.3264 7 1.6294 8 6.1389 7 0.2234 7 4.3052 9 37.3746 6 1.9499 9 23.2821 8 15.8995 7 57.411 9 4.083 6 9.5733 10 9.4072 7 55.9372 8 20.8852 7 43.5239 8)
Average genome size in population (length): 99.686
Average program size in population (points): 100.686
Average percent parens in population: 0.010
Minimum age in population: 25.39373779296875
Maximum age in population: 30.5698299407959
Average age in population: 28.57921890640259
Median age in population: 28.61528587341309
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 6
Genome diversity (% unique Plush genomes):	 0.938
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 6
Syntactic diversity (% unique Push programs):	 0.938
Total error diversity:				 0.175
Error (vector) diversity:			 0.209
Behavioral diversity:				 0.209
--- Run Statistics ---
Number of program evaluations used so far: 21000
Number of point (instruction) evaluations so far: 39053731
--- Timings ---
Current time: 1529615234406 milliseconds
Total Time:          81.0 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        30.2 seconds, 37.2%
Fitness Testing:     39.5 seconds, 48.8%
Report:              11.2 seconds, 13.8%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 20
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 21
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 21
;;******************************
;; -*- Number IO problem report - generation 21
Test total error for best: 60026.23010000001
Test mean error for best: 30.01312
;;------------------------------
Outputs of best individual on training cases:
Correct output: -57.4559422311 | Program output: -74.023621    
Correct output: -71.0754923621 | Program output: -65.023621    
Correct output: -66.5176295557 | Program output: -77.023621    
Correct output: 149.3187378    | Program output: 86.028721     
Correct output: -36.5450493525 | Program output: -83.023621    
Correct output: 75.4021928097  | Program output: 48.024921     
Correct output: 52.2615929867  | Program output: 74.027521     
Correct output: -19.2178367434 | Program output: 43.024421     
Correct output: 66.7518906772  | Program output: 1.023621      
Correct output: 7.673605441    | Program output: 27.023621     
Correct output: 23.6294031682  | Program output: 90.029121     
Correct output: -6.1389033433  | Program output: 38.023921     
Correct output: 9.2516366816   | Program output: -82.023621    
Correct output: 31.3251776267  | Program output: -55.023621    
Correct output: 73.3746496408  | Program output: 0.023621      
Correct output: 20.0500553336  | Program output: -19.023621    
Correct output: -23.2820697498 | Program output: 32.023621     
Correct output: 120.1004999359 | Program output: 30.023621     
Correct output: -155.453212395 | Program output: -98.023621    
Correct output: 31.10301576    | Program output: 10.023621     
Correct output: 45.5733057121  | Program output: -39.023621    
Correct output: -68.592783645  | Program output: -78.023621    
Correct output: -125.979392023 | Program output: -70.023621    
Correct output: -91.9273649148 | Program output: -71.023621    
Correct output: -92.5660607267 | Program output: -49.023621    
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_inc} {:instruction float_add} {:instruction float_yank} {:instruction integer_dup} {:instruction float_min} {:instruction in2} {:instruction float_inc} {:instruction float_div} {:instruction integer_max} {:instruction float_inc} {:instruction float_dup} {:instruction float_mult} {:instruction float_sub} {:instruction integer_yank} {:instruction float_sub} {:instruction 100} {:instruction integer_dup_items} {:instruction float_add} {:instruction 99} {:instruction integer_dup_items} {:instruction float_yankdup} {:instruction float_rot} {:instruction float_rot} {:instruction integer_flush} {:instruction float_min} {:instruction print_integer} {:instruction float_add} {:instruction integer_pop} {:instruction float_yankdup} {:instruction print_float} {:instruction integer_pop} {:instruction 27} {:instruction float_sub} {:instruction float_sub} {:instruction float_tan} {:instruction integer_yank} {:instruction integer_min} {:instruction float_max} {:instruction integer_sub} {:instruction 9} {:instruction float_swap} {:instruction integer_stackdepth} {:instruction float_frominteger} {:instruction tag_float_196} {:instruction float_swap} {:instruction float_rot} {:instruction integer_add} {:instruction integer_max} {:instruction integer_fromfloat} {:instruction integer_stackdepth} {:instruction float_add} {:instruction in2} {:instruction float_mult} {:instruction integer_stackdepth} {:instruction float_frominteger} {:instruction tag_float_196} {:instruction float_swap} {:instruction float_rot} {:instruction integer_add} {:instruction integer_max} {:instruction float_max} {:instruction integer_stackdepth} {:instruction float_add} {:instruction in2} {:instruction float_frominteger} {:instruction print_float} {:instruction integer_dup} {:instruction float_shove} {:instruction float_shove} {:instruction integer_inc} {:instruction float_mod} {:instruction integer_dup} {:instruction integer_dup_items} {:instruction print_integer} {:instruction integer_shove} {:instruction integer_yank} {:instruction print_integer} {:instruction integer_shove} {:instruction print_float} {:instruction integer_div} {:instruction integer_sub} {:instruction integer_fromfloat} {:instruction integer_mod} {:instruction print_integer} {:instruction integer_mult} {:instruction integer_stackdepth} {:instruction tag_float_291} {:instruction integer_inc} {:instruction float_swap} {:instruction print_integer} {:instruction integer_mod} {:instruction float_div} {:instruction float_mod} {:instruction float_inc} {:instruction print_float} {:instruction integer_flush} {:instruction float_cos} {:instruction -51} {:instruction integer_dec} {:instruction float_sub} {:instruction float_tan} {:instruction float_sub} {:instruction float_sin} {:instruction integer_yank})
Best program: (integer_inc float_add float_yank integer_dup float_min in2 float_inc float_div integer_max float_inc float_dup float_mult float_sub integer_yank float_sub 100 integer_dup_items float_add 99 integer_dup_items float_yankdup float_rot float_rot integer_flush float_min print_integer float_add integer_pop float_yankdup print_float integer_pop 27 float_sub float_sub float_tan integer_yank integer_min float_max integer_sub 9 float_swap integer_stackdepth float_frominteger tag_float_196 float_swap float_rot integer_add integer_max integer_fromfloat integer_stackdepth float_add in2 float_mult integer_stackdepth float_frominteger tag_float_196 float_swap float_rot integer_add integer_max float_max integer_stackdepth float_add in2 float_frominteger print_float integer_dup float_shove float_shove integer_inc float_mod integer_dup integer_dup_items print_integer integer_shove integer_yank print_integer integer_shove print_float integer_div integer_sub integer_fromfloat integer_mod print_integer integer_mult integer_stackdepth tag_float_291 integer_inc float_swap print_integer integer_mod float_div float_mod float_inc print_float integer_flush float_cos -51 integer_dec float_sub float_tan float_sub float_sin integer_yank)
Errors: [16.5677 9 6.0519 6 10.506 10 63.29 8 46.4786 9 27.3773 8 21.7659 10 62.2423 12 65.7283 11 19.35 7 66.3997 9 44.1628 9 91.2753 8 86.3488 10 73.351 11 39.0737 11 55.3057 10 90.0769 11 57.4296 10 21.0794 9 84.5969 10 9.4308 7 55.9558 10 20.9037 7 43.5424 10]
Total: 1410.2905
Mean: 28.20581
Genome size: 104
Size: 105
Percent parens: 0.010
--- Population Statistics ---
Average total errors in population: 4411.390936199995
Median total errors in population: 1412.2864000000002
Error averages by case: (144.97204160000067 9.571 135.32924190000116 8.006 139.0233942999984 10.555 179.97082429999946 9.217 169.96617780000116 9.646 147.54668529999807 9.326 142.5674180000006 10.443 178.79446150000112 11.335 165.9254999999995 10.215 141.5442369000017 8.427 180.77672410000093 8.814 162.07024260000188 9.321 207.1614217000007 9.589 201.8792029000031 10.478 171.05783779999834 11.1 161.6689654999995 11.167 172.9387736999987 10.323 203.51186059999694 10.334 181.81947320000145 10.378 141.66768310000066 8.097 201.37318800000142 11.161 138.15297990000096 7.819 179.94631039999896 10.327 149.40189779999855 8.699 167.72439330000194 10.252)
Error minima by case: (16.5441 8 5.9765 6 10.4824 9 13.3187 6 36.545 8 23.5978 7 16.2616 9 19.2178 9 30.7519 8 1.3547 7 1.6294 8 6.1389 7 0.2234 8 3.6748 8 22.3746 7 1.9499 9 23.2821 9 15.8995 8 57.3542 9 3.897 6 5.4267 9 9.4072 7 55.8804 9 20.8284 7 43.4671 8)
Average genome size in population (length): 99.495
Average program size in population (points): 100.495
Average percent parens in population: 0.010
Minimum age in population: 26.74862670898438
Maximum age in population: 32.0929594039917
Average age in population: 29.97133571624756
Median age in population: 30.04961156845093
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 4
Genome diversity (% unique Plush genomes):	 0.95
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 4
Syntactic diversity (% unique Push programs):	 0.95
Total error diversity:				 0.187
Error (vector) diversity:			 0.217
Behavioral diversity:				 0.217
--- Run Statistics ---
Number of program evaluations used so far: 22000
Number of point (instruction) evaluations so far: 41542206
--- Timings ---
Current time: 1529615238672 milliseconds
Total Time:          85.3 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        31.7 seconds, 37.2%
Fitness Testing:     41.7 seconds, 48.9%
Report:              11.7 seconds, 13.8%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 21
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 22
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 22
;;******************************
;; -*- Number IO problem report - generation 22
Test total error for best: 60026.23010000001
Test mean error for best: 30.01312
;;------------------------------
Outputs of best individual on training cases:
Correct output: -57.4559422311 | Program output: -74.023621    
Correct output: -71.0754923621 | Program output: -65.023621    
Correct output: -66.5176295557 | Program output: -77.023621    
Correct output: 149.3187378    | Program output: 86.028721     
Correct output: -36.5450493525 | Program output: -83.023621    
Correct output: 75.4021928097  | Program output: 48.024921     
Correct output: 52.2615929867  | Program output: 74.027521     
Correct output: -19.2178367434 | Program output: 43.024421     
Correct output: 66.7518906772  | Program output: 1.023621      
Correct output: 7.673605441    | Program output: 27.023621     
Correct output: 23.6294031682  | Program output: 90.029121     
Correct output: -6.1389033433  | Program output: 38.023921     
Correct output: 9.2516366816   | Program output: -82.023621    
Correct output: 31.3251776267  | Program output: -55.023621    
Correct output: 73.3746496408  | Program output: 0.023621      
Correct output: 20.0500553336  | Program output: -19.023621    
Correct output: -23.2820697498 | Program output: 32.023621     
Correct output: 120.1004999359 | Program output: 30.023621     
Correct output: -155.453212395 | Program output: -98.023621    
Correct output: 31.10301576    | Program output: 10.023621     
Correct output: 45.5733057121  | Program output: -39.023621    
Correct output: -68.592783645  | Program output: -78.023621    
Correct output: -125.979392023 | Program output: -70.023621    
Correct output: -91.9273649148 | Program output: -71.023621    
Correct output: -92.5660607267 | Program output: -49.023621    
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_inc} {:instruction float_add} {:instruction float_yank} {:instruction integer_dup} {:instruction float_min} {:instruction in2} {:instruction float_inc} {:instruction float_div} {:instruction integer_max} {:instruction float_inc} {:instruction float_dup} {:instruction float_mult} {:instruction float_sub} {:instruction integer_yank} {:instruction float_sub} {:instruction 100} {:instruction integer_dup_items} {:instruction float_add} {:instruction 99} {:instruction integer_dup_items} {:instruction float_yankdup} {:instruction float_rot} {:instruction float_rot} {:instruction integer_flush} {:instruction float_min} {:instruction print_integer} {:instruction float_add} {:instruction integer_pop} {:instruction float_yankdup} {:instruction print_float} {:instruction integer_pop} {:instruction 27} {:instruction float_sub} {:instruction float_sub} {:instruction float_tan} {:instruction integer_yank} {:instruction integer_min} {:instruction float_max} {:instruction integer_sub} {:instruction 9} {:instruction float_swap} {:instruction integer_stackdepth} {:instruction float_frominteger} {:instruction tag_float_196} {:instruction float_swap} {:instruction float_rot} {:instruction integer_add} {:instruction integer_max} {:instruction integer_fromfloat} {:instruction integer_stackdepth} {:instruction float_add} {:instruction in2} {:instruction float_mult} {:instruction integer_stackdepth} {:instruction float_frominteger} {:instruction tag_float_196} {:instruction float_swap} {:instruction float_rot} {:instruction integer_add} {:instruction integer_max} {:instruction float_max} {:instruction integer_stackdepth} {:instruction float_add} {:instruction in2} {:instruction float_frominteger} {:instruction print_float} {:instruction integer_dup} {:instruction float_shove} {:instruction float_shove} {:instruction integer_inc} {:instruction float_mod} {:instruction integer_dup} {:instruction integer_dup_items} {:instruction print_integer} {:instruction integer_shove} {:instruction integer_yank} {:instruction print_integer} {:instruction integer_shove} {:instruction print_float} {:instruction integer_div} {:instruction integer_sub} {:instruction integer_fromfloat} {:instruction integer_mod} {:instruction print_integer} {:instruction integer_mult} {:instruction integer_stackdepth} {:instruction tag_float_291} {:instruction integer_inc} {:instruction float_swap} {:instruction print_integer} {:instruction integer_mod} {:instruction float_div} {:instruction float_mod} {:instruction float_inc} {:instruction print_float} {:instruction integer_flush} {:instruction float_cos} {:instruction -51} {:instruction integer_dec} {:instruction float_sub} {:instruction float_tan})
Best program: (integer_inc float_add float_yank integer_dup float_min in2 float_inc float_div integer_max float_inc float_dup float_mult float_sub integer_yank float_sub 100 integer_dup_items float_add 99 integer_dup_items float_yankdup float_rot float_rot integer_flush float_min print_integer float_add integer_pop float_yankdup print_float integer_pop 27 float_sub float_sub float_tan integer_yank integer_min float_max integer_sub 9 float_swap integer_stackdepth float_frominteger tag_float_196 float_swap float_rot integer_add integer_max integer_fromfloat integer_stackdepth float_add in2 float_mult integer_stackdepth float_frominteger tag_float_196 float_swap float_rot integer_add integer_max float_max integer_stackdepth float_add in2 float_frominteger print_float integer_dup float_shove float_shove integer_inc float_mod integer_dup integer_dup_items print_integer integer_shove integer_yank print_integer integer_shove print_float integer_div integer_sub integer_fromfloat integer_mod print_integer integer_mult integer_stackdepth tag_float_291 integer_inc float_swap print_integer integer_mod float_div float_mod float_inc print_float integer_flush float_cos -51 integer_dec float_sub float_tan)
Errors: [16.5677 9 6.0519 6 10.506 10 63.29 8 46.4786 9 27.3773 8 21.7659 10 62.2423 12 65.7283 11 19.35 7 66.3997 9 44.1628 9 91.2753 8 86.3488 10 73.351 11 39.0737 11 55.3057 10 90.0769 11 57.4296 10 21.0794 9 84.5969 10 9.4308 7 55.9558 10 20.9037 7 43.5424 10]
Total: 1410.2905
Mean: 28.20581
Genome size: 101
Size: 102
Percent parens: 0.010
--- Population Statistics ---
Average total errors in population: 3983.5373013999956
Median total errors in population: 1412.2864000000002
Error averages by case: (129.78513039999982 9.533 121.1782667000014 7.998 124.88257489999843 10.524 160.19783599999974 9.047 154.8117381000012 9.649 128.04073329999792 9.203 123.11506350000083 10.431 158.75034320000108 11.417 145.8660413000002 10.187 120.8242393000014 8.437 162.71285850000035 8.802 142.69297320000186 9.314 192.04100920000076 9.534 187.67714880000295 10.428 150.44187349999828 11.11 147.16698609999892 11.103 152.8769324999984 10.352 182.73820069999726 10.337 167.77949530000157 10.319 120.87847750000104 8.024 186.27064020000125 11.118 123.99064260000104 7.818 166.40225839999894 10.312 134.53829279999866 8.704 153.98154540000195 10.195)
Error minima by case: (16.5441 8 6.0365 6 10.4824 9 13.3187 6 32.6645 8 23.5978 7 15.2616 9 17.7194 9 24.2481 6 0.3264 7 1.6294 8 6.4492 7 0.2234 8 4.3252 8 16.6254 6 1.9499 8 23.9431 8 9.9231 7 57.4142 9 4.103 6 1.5733 9 9.4072 7 55.9404 8 20.8884 7 43.5271 8)
Average genome size in population (length): 99.619
Average program size in population (points): 100.619
Average percent parens in population: 0.010
Minimum age in population: 28.66050720214844
Maximum age in population: 33.17517042160034
Average age in population: 31.43259964466095
Median age in population: 31.47397232055664
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 11
Genome diversity (% unique Plush genomes):	 0.93
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 11
Syntactic diversity (% unique Push programs):	 0.93
Total error diversity:				 0.183
Error (vector) diversity:			 0.213
Behavioral diversity:				 0.214
--- Run Statistics ---
Number of program evaluations used so far: 23000
Number of point (instruction) evaluations so far: 44035856
--- Timings ---
Current time: 1529615243098 milliseconds
Total Time:          89.5 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        33.2 seconds, 37.0%
Fitness Testing:     44.0 seconds, 49.1%
Report:              12.3 seconds, 13.7%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 22
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 23
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 23
;;******************************
;; -*- Number IO problem report - generation 23
Test total error for best: 60026.23010000001
Test mean error for best: 30.01312
;;------------------------------
Outputs of best individual on training cases:
Correct output: -57.4559422311 | Program output: -74.023621    
Correct output: -71.0754923621 | Program output: -65.023621    
Correct output: -66.5176295557 | Program output: -77.023621    
Correct output: 149.3187378    | Program output: 86.028721     
Correct output: -36.5450493525 | Program output: -83.023621    
Correct output: 75.4021928097  | Program output: 48.024921     
Correct output: 52.2615929867  | Program output: 74.027521     
Correct output: -19.2178367434 | Program output: 43.024421     
Correct output: 66.7518906772  | Program output: 1.023621      
Correct output: 7.673605441    | Program output: 27.023621     
Correct output: 23.6294031682  | Program output: 90.029121     
Correct output: -6.1389033433  | Program output: 38.023921     
Correct output: 9.2516366816   | Program output: -82.023621    
Correct output: 31.3251776267  | Program output: -55.023621    
Correct output: 73.3746496408  | Program output: 0.023621      
Correct output: 20.0500553336  | Program output: -19.023621    
Correct output: -23.2820697498 | Program output: 32.023621     
Correct output: 120.1004999359 | Program output: 30.023621     
Correct output: -155.453212395 | Program output: -98.023621    
Correct output: 31.10301576    | Program output: 10.023621     
Correct output: 45.5733057121  | Program output: -39.023621    
Correct output: -68.592783645  | Program output: -78.023621    
Correct output: -125.979392023 | Program output: -70.023621    
Correct output: -91.9273649148 | Program output: -71.023621    
Correct output: -92.5660607267 | Program output: -49.023621    
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_inc} {:instruction float_add} {:instruction float_yank} {:instruction integer_dup} {:instruction float_min} {:instruction in2} {:instruction float_inc} {:instruction float_div} {:instruction integer_max} {:instruction float_inc} {:instruction float_dup} {:instruction float_mult} {:instruction float_sub} {:instruction integer_yank} {:instruction float_sub} {:instruction 100} {:instruction integer_dup_items} {:instruction float_add} {:instruction 99} {:instruction integer_dup_items} {:instruction float_yankdup} {:instruction float_rot} {:instruction float_rot} {:instruction integer_flush} {:instruction float_min} {:instruction print_integer} {:instruction float_add} {:instruction integer_pop} {:instruction float_yankdup} {:instruction print_float} {:instruction integer_pop} {:instruction 27} {:instruction float_sub} {:instruction float_sub} {:instruction float_tan} {:instruction integer_yank} {:instruction integer_min} {:instruction float_max} {:instruction integer_sub} {:instruction 9} {:instruction float_swap} {:instruction integer_stackdepth} {:instruction float_frominteger} {:instruction tag_float_196} {:instruction float_swap} {:instruction float_rot} {:instruction integer_add} {:instruction integer_max} {:instruction integer_fromfloat} {:instruction integer_stackdepth} {:instruction float_add} {:instruction in2} {:instruction float_mult} {:instruction integer_stackdepth} {:instruction float_frominteger} {:instruction tag_float_196} {:instruction float_swap} {:instruction float_rot} {:instruction integer_add} {:instruction integer_max} {:instruction float_max} {:instruction integer_stackdepth} {:instruction float_add} {:instruction in2} {:instruction float_frominteger} {:instruction print_float} {:instruction integer_dup} {:instruction float_shove} {:instruction float_shove} {:instruction integer_inc} {:instruction float_mod} {:instruction integer_dup} {:instruction integer_dup_items} {:instruction print_integer} {:instruction integer_shove} {:instruction integer_yank} {:instruction print_integer} {:instruction integer_shove} {:instruction print_float} {:instruction integer_div} {:instruction integer_sub} {:instruction integer_fromfloat} {:instruction integer_mod} {:instruction print_integer} {:instruction integer_mult} {:instruction integer_stackdepth} {:instruction tag_float_291} {:instruction integer_inc} {:instruction float_swap} {:instruction print_integer} {:instruction integer_mod} {:instruction float_div} {:instruction float_mod} {:instruction float_inc} {:instruction print_float} {:instruction integer_flush} {:instruction float_cos} {:instruction -51} {:instruction integer_dec} {:instruction float_sub} {:instruction float_tan} {:instruction float_sub} {:instruction float_sin} {:instruction integer_yank})
Best program: (integer_inc float_add float_yank integer_dup float_min in2 float_inc float_div integer_max float_inc float_dup float_mult float_sub integer_yank float_sub 100 integer_dup_items float_add 99 integer_dup_items float_yankdup float_rot float_rot integer_flush float_min print_integer float_add integer_pop float_yankdup print_float integer_pop 27 float_sub float_sub float_tan integer_yank integer_min float_max integer_sub 9 float_swap integer_stackdepth float_frominteger tag_float_196 float_swap float_rot integer_add integer_max integer_fromfloat integer_stackdepth float_add in2 float_mult integer_stackdepth float_frominteger tag_float_196 float_swap float_rot integer_add integer_max float_max integer_stackdepth float_add in2 float_frominteger print_float integer_dup float_shove float_shove integer_inc float_mod integer_dup integer_dup_items print_integer integer_shove integer_yank print_integer integer_shove print_float integer_div integer_sub integer_fromfloat integer_mod print_integer integer_mult integer_stackdepth tag_float_291 integer_inc float_swap print_integer integer_mod float_div float_mod float_inc print_float integer_flush float_cos -51 integer_dec float_sub float_tan float_sub float_sin integer_yank)
Errors: [16.5677 9 6.0519 6 10.506 10 63.29 8 46.4786 9 27.3773 8 21.7659 10 62.2423 12 65.7283 11 19.35 7 66.3997 9 44.1628 9 91.2753 8 86.3488 10 73.351 11 39.0737 11 55.3057 10 90.0769 11 57.4296 10 21.0794 9 84.5969 10 9.4308 7 55.9558 10 20.9037 7 43.5424 10]
Total: 1410.2905
Mean: 28.20581
Genome size: 104
Size: 105
Percent parens: 0.010
--- Population Statistics ---
Average total errors in population: 4661.375077399997
Median total errors in population: 1412.2864000000002
Error averages by case: (160.09487350000143 9.556 151.617225100001 7.959 155.32020539999775 10.556 188.0927241999995 8.762 184.48814810000127 9.647 156.40266419999736 8.924 151.74348439999946 10.463 184.02108650000164 11.687 164.42584939999958 10.199 147.0429376000018 8.433 189.49534610000086 8.76 169.2735472000009 9.261 220.69029420000072 9.536 216.21634960000324 10.407 166.44209999999828 11.099 170.8940680999994 11.14 178.13957369999872 10.386 207.9141832999965 10.351 196.70015930000142 10.368 147.20546820000018 8.055 214.7509197000016 11.107 154.4896716000011 7.843 194.4600595999987 10.338 164.52552909999818 8.719 183.11160930000239 10.261)
Error minima by case: (16.5441 8 6.0337 6 10.4824 9 62.3187 6 19.5214 8 26.4022 6 16.2242 9 2.1942 6 24.2708 4 1.3547 7 1.6294 7 5.1367 6 0.2233 6 4.6748 7 16.6481 3 1.9499 6 6.2584 6 84.0631 5 57.4114 6 4.897 5 9.5359 7 9.4072 6 55.9376 6 20.8855 6 43.5242 6)
Average genome size in population (length): 100.555
Average program size in population (points): 101.555
Average percent parens in population: 0.010
Minimum age in population: 30.52788925170898
Maximum age in population: 34.88638758659363
Average age in population: 32.86322579288483
Median age in population: 32.87386178970337
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 13
Genome diversity (% unique Plush genomes):	 0.903
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 13
Syntactic diversity (% unique Push programs):	 0.903
Total error diversity:				 0.216
Error (vector) diversity:			 0.25
Behavioral diversity:				 0.251
--- Run Statistics ---
Number of program evaluations used so far: 24000
Number of point (instruction) evaluations so far: 46557631
--- Timings ---
Current time: 1529615247519 milliseconds
Total Time:          94.1 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        34.6 seconds, 36.8%
Fitness Testing:     46.4 seconds, 49.3%
Report:              13.0 seconds, 13.8%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 23
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 24
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 24
;;******************************
;; -*- Number IO problem report - generation 24
Test total error for best: 60026.23010000001
Test mean error for best: 30.01312
;;------------------------------
Outputs of best individual on training cases:
Correct output: -57.4559422311 | Program output: -74.023621    
Correct output: -71.0754923621 | Program output: -65.023621    
Correct output: -66.5176295557 | Program output: -77.023621    
Correct output: 149.3187378    | Program output: 86.028721     
Correct output: -36.5450493525 | Program output: -83.023621    
Correct output: 75.4021928097  | Program output: 48.024921     
Correct output: 52.2615929867  | Program output: 74.027521     
Correct output: -19.2178367434 | Program output: 43.024421     
Correct output: 66.7518906772  | Program output: 1.023621      
Correct output: 7.673605441    | Program output: 27.023621     
Correct output: 23.6294031682  | Program output: 90.029121     
Correct output: -6.1389033433  | Program output: 38.023921     
Correct output: 9.2516366816   | Program output: -82.023621    
Correct output: 31.3251776267  | Program output: -55.023621    
Correct output: 73.3746496408  | Program output: 0.023621      
Correct output: 20.0500553336  | Program output: -19.023621    
Correct output: -23.2820697498 | Program output: 32.023621     
Correct output: 120.1004999359 | Program output: 30.023621     
Correct output: -155.453212395 | Program output: -98.023621    
Correct output: 31.10301576    | Program output: 10.023621     
Correct output: 45.5733057121  | Program output: -39.023621    
Correct output: -68.592783645  | Program output: -78.023621    
Correct output: -125.979392023 | Program output: -70.023621    
Correct output: -91.9273649148 | Program output: -71.023621    
Correct output: -92.5660607267 | Program output: -49.023621    
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_yank} {:instruction integer_rot} {:instruction integer_stackdepth} {:instruction float_yankdup} {:instruction float_flush} {:instruction float_shove} {:instruction integer_sub} {:instruction float_dec} {:instruction float_tan} {:instruction integer_pop} {:instruction integer_mod} {:instruction float_dup_items} {:instruction integer_dec} {:instruction integer_div} {:instruction integer_min} {:instruction float_mod} {:instruction integer_shove} {:instruction integer_dup_times} {:instruction integer_swap} {:instruction integer_max} {:instruction float_sub} {:instruction 100} {:instruction integer_dup_items} {:instruction float_yankdup} {:instruction float_rot} {:instruction float_rot} {:instruction integer_flush} {:instruction float_min} {:instruction print_integer} {:instruction float_add} {:instruction integer_pop} {:instruction float_yankdup} {:instruction print_float} {:instruction integer_pop} {:instruction 27} {:instruction float_sub} {:instruction float_sub} {:instruction float_tan} {:instruction integer_yank} {:instruction integer_min} {:instruction float_max} {:instruction integer_sub} {:instruction 9} {:instruction float_swap} {:instruction integer_stackdepth} {:instruction float_frominteger} {:instruction tag_float_196} {:instruction float_swap} {:instruction float_rot} {:instruction integer_add} {:instruction integer_max} {:instruction integer_fromfloat} {:instruction integer_stackdepth} {:instruction float_add} {:instruction in2} {:instruction float_mult} {:instruction integer_stackdepth} {:instruction float_frominteger} {:instruction tag_float_196} {:instruction float_swap} {:instruction float_rot} {:instruction integer_add} {:instruction integer_max} {:instruction float_max} {:instruction integer_stackdepth} {:instruction float_add} {:instruction in2} {:instruction float_frominteger} {:instruction print_float} {:instruction integer_dup} {:instruction float_shove} {:instruction float_shove} {:instruction integer_inc} {:instruction float_mod} {:instruction integer_dup} {:instruction integer_dup_items} {:instruction print_integer} {:instruction integer_shove} {:instruction integer_yank} {:instruction print_integer} {:instruction integer_shove} {:instruction print_float} {:instruction integer_div} {:instruction integer_sub} {:instruction integer_fromfloat} {:instruction integer_mod} {:instruction print_integer} {:instruction integer_mult} {:instruction integer_stackdepth} {:instruction tag_float_291} {:instruction integer_inc} {:instruction float_sin} {:instruction print_integer} {:instruction integer_mod} {:instruction float_div} {:instruction float_mod} {:instruction float_inc} {:instruction print_float} {:instruction integer_flush} {:instruction float_cos} {:instruction -51} {:instruction integer_dec} {:instruction float_sub} {:instruction float_tan})
Best program: (float_yank integer_rot integer_stackdepth float_yankdup float_flush float_shove integer_sub float_dec float_tan integer_pop integer_mod float_dup_items integer_dec integer_div integer_min float_mod integer_shove integer_dup_times integer_swap integer_max float_sub 100 integer_dup_items float_yankdup float_rot float_rot integer_flush float_min print_integer float_add integer_pop float_yankdup print_float integer_pop 27 float_sub float_sub float_tan integer_yank integer_min float_max integer_sub 9 float_swap integer_stackdepth float_frominteger tag_float_196 float_swap float_rot integer_add integer_max integer_fromfloat integer_stackdepth float_add in2 float_mult integer_stackdepth float_frominteger tag_float_196 float_swap float_rot integer_add integer_max float_max integer_stackdepth float_add in2 float_frominteger print_float integer_dup float_shove float_shove integer_inc float_mod integer_dup integer_dup_items print_integer integer_shove integer_yank print_integer integer_shove print_float integer_div integer_sub integer_fromfloat integer_mod print_integer integer_mult integer_stackdepth tag_float_291 integer_inc float_sin print_integer integer_mod float_div float_mod float_inc print_float integer_flush float_cos -51 integer_dec float_sub float_tan)
Errors: [16.5677 9 6.0519 6 10.506 10 63.29 8 46.4786 9 27.3773 8 21.7659 10 62.2423 12 65.7283 11 19.35 7 66.3997 9 44.1628 9 91.2753 8 86.3488 10 73.351 11 39.0737 11 55.3057 10 90.0769 11 57.4296 10 21.0794 9 84.5969 10 9.4308 7 55.9558 10 20.9037 7 43.5424 10]
Total: 1410.2905
Mean: 28.20581
Genome size: 104
Size: 105
Percent parens: 0.010
--- Population Statistics ---
Average total errors in population: 4497.455610200001
Median total errors in population: 1411.2905
Error averages by case: (161.8341536000015 9.455 155.00388950000067 7.851 156.7220771999978 10.514 170.13973039999956 8.43 186.32163660000134 9.618 137.8444162999971 8.609 135.11691269999903 10.449 169.84663920000116 11.916 148.6898941000002 10.188 132.2001313000019 8.343 173.78941100000029 8.728 153.85816930000078 9.213 223.34146450000134 9.473 218.77009930000315 10.365 152.42126169999818 11.074 168.47708899999958 11.144 163.81170869999872 10.342 192.40843689999696 10.313 199.58661560000132 10.288 131.375012600001 8.024 216.39277310000162 11.018 155.05936080000106 7.753 197.85493679999857 10.28 167.8104894999982 8.562 186.6153005000021 10.214)
Error minima by case: (16.5441 8 6.0028 6 10.4824 9 36.7108 6 37.5642 8 25.4022 7 16.2616 9 19.2178 8 29.7519 6 0.3264 7 1.6294 8 6.1389 7 7.2143 8 4.6748 8 36.3746 5 1.9499 8 24.2821 8 9.9234 6 57.3805 7 4.897 6 8.5733 9 9.4072 7 55.9067 7 20.8546 6 43.4933 8)
Average genome size in population (length): 102.351
Average program size in population (points): 103.351
Average percent parens in population: 0.010
Minimum age in population: 32.0015926361084
Maximum age in population: 36.57534909248352
Average age in population: 34.27000695562363
Median age in population: 34.28900682926178
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 11
Genome diversity (% unique Plush genomes):	 0.917
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 11
Syntactic diversity (% unique Push programs):	 0.917
Total error diversity:				 0.195
Error (vector) diversity:			 0.227
Behavioral diversity:				 0.228
--- Run Statistics ---
Number of program evaluations used so far: 25000
Number of point (instruction) evaluations so far: 49128456
--- Timings ---
Current time: 1529615251720 milliseconds
Total Time:          98.2 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        35.9 seconds, 36.5%
Fitness Testing:     48.7 seconds, 49.6%
Report:              13.5 seconds, 13.8%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 24
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 25
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 25
;;******************************
;; -*- Number IO problem report - generation 25
Test total error for best: 60026.23010000001
Test mean error for best: 30.01312
;;------------------------------
Outputs of best individual on training cases:
Correct output: -57.4559422311 | Program output: -74.023621    
Correct output: -71.0754923621 | Program output: -65.023621    
Correct output: -66.5176295557 | Program output: -77.023621    
Correct output: 149.3187378    | Program output: 86.028721     
Correct output: -36.5450493525 | Program output: -83.023621    
Correct output: 75.4021928097  | Program output: 48.024921     
Correct output: 52.2615929867  | Program output: 74.027521     
Correct output: -19.2178367434 | Program output: 43.024421     
Correct output: 66.7518906772  | Program output: 1.023621      
Correct output: 7.673605441    | Program output: 27.023621     
Correct output: 23.6294031682  | Program output: 90.029121     
Correct output: -6.1389033433  | Program output: 38.023921     
Correct output: 9.2516366816   | Program output: -82.023621    
Correct output: 31.3251776267  | Program output: -55.023621    
Correct output: 73.3746496408  | Program output: 0.023621      
Correct output: 20.0500553336  | Program output: -19.023621    
Correct output: -23.2820697498 | Program output: 32.023621     
Correct output: 120.1004999359 | Program output: 30.023621     
Correct output: -155.453212395 | Program output: -98.023621    
Correct output: 31.10301576    | Program output: 10.023621     
Correct output: 45.5733057121  | Program output: -39.023621    
Correct output: -68.592783645  | Program output: -78.023621    
Correct output: -125.979392023 | Program output: -70.023621    
Correct output: -91.9273649148 | Program output: -71.023621    
Correct output: -92.5660607267 | Program output: -49.023621    
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_inc} {:instruction tagged_760} {:instruction float_yank} {:instruction integer_stackdepth} {:instruction integer_min} {:instruction float_sub} {:instruction integer_dup} {:instruction float_mult} {:instruction float_sub} {:instruction integer_mod} {:instruction float_add} {:instruction 100} {:instruction integer_dup_items} {:instruction float_add} {:instruction float_rot} {:instruction float_mult} {:instruction integer_flush} {:instruction integer_pop} {:instruction float_min} {:instruction print_integer} {:instruction float_add} {:instruction integer_pop} {:instruction float_tan} {:instruction print_float} {:instruction integer_pop} {:instruction 27} {:instruction float_pop} {:instruction integer_flush} {:instruction integer_pop} {:instruction float_min} {:instruction print_integer} {:instruction float_add} {:instruction float_tan} {:instruction print_float} {:instruction integer_pop} {:instruction 27} {:instruction float_sub} {:instruction float_sub} {:instruction float_tan} {:instruction integer_yank} {:instruction integer_min} {:instruction float_max} {:instruction integer_sub} {:instruction 9} {:instruction float_mult} {:instruction integer_stackdepth} {:instruction float_frominteger} {:instruction tag_float_196} {:instruction float_swap} {:instruction float_rot} {:instruction integer_add} {:instruction integer_stackdepth} {:instruction float_add} {:instruction in2} {:instruction float_mult} {:instruction integer_stackdepth} {:instruction float_frominteger} {:instruction tag_float_196} {:instruction float_swap} {:instruction float_rot} {:instruction integer_add} {:instruction integer_max} {:instruction float_max} {:instruction integer_stackdepth} {:instruction float_add} {:instruction in2} {:instruction float_frominteger} {:instruction print_float} {:instruction integer_dup} {:instruction float_shove} {:instruction float_shove} {:instruction integer_inc} {:instruction float_mod} {:instruction integer_dup} {:instruction integer_dup_items} {:instruction print_integer} {:instruction integer_shove} {:instruction integer_yank} {:instruction print_integer} {:instruction integer_shove} {:instruction print_float} {:instruction integer_div} {:instruction integer_sub} {:instruction integer_fromfloat} {:instruction integer_mod} {:instruction print_integer} {:instruction integer_mult} {:instruction integer_stackdepth} {:instruction tag_float_291} {:instruction integer_inc} {:instruction float_swap} {:instruction print_integer} {:instruction integer_mod} {:instruction float_div} {:instruction float_mod} {:instruction float_inc} {:instruction print_float} {:instruction integer_flush} {:instruction float_cos} {:instruction -51} {:instruction integer_dec} {:instruction float_sub} {:instruction float_tan} {:instruction float_sub} {:instruction float_sin} {:instruction integer_yank})
Best program: (integer_inc tagged_760 float_yank integer_stackdepth integer_min float_sub integer_dup float_mult float_sub integer_mod float_add 100 integer_dup_items float_add float_rot float_mult integer_flush integer_pop float_min print_integer float_add integer_pop float_tan print_float integer_pop 27 float_pop integer_flush integer_pop float_min print_integer float_add float_tan print_float integer_pop 27 float_sub float_sub float_tan integer_yank integer_min float_max integer_sub 9 float_mult integer_stackdepth float_frominteger tag_float_196 float_swap float_rot integer_add integer_stackdepth float_add in2 float_mult integer_stackdepth float_frominteger tag_float_196 float_swap float_rot integer_add integer_max float_max integer_stackdepth float_add in2 float_frominteger print_float integer_dup float_shove float_shove integer_inc float_mod integer_dup integer_dup_items print_integer integer_shove integer_yank print_integer integer_shove print_float integer_div integer_sub integer_fromfloat integer_mod print_integer integer_mult integer_stackdepth tag_float_291 integer_inc float_swap print_integer integer_mod float_div float_mod float_inc print_float integer_flush float_cos -51 integer_dec float_sub float_tan float_sub float_sin integer_yank)
Errors: [16.5677 9 6.0519 6 10.506 10 63.29 8 46.4786 9 27.3773 8 21.7659 10 62.2423 12 65.7283 11 19.35 7 66.3997 9 44.1628 9 91.2753 8 86.3488 10 73.351 11 39.0737 11 55.3057 10 90.0769 11 57.4296 10 21.0794 9 84.5969 10 9.4308 7 55.9558 10 20.9037 7 43.5424 10]
Total: 1410.2905
Mean: 28.20581
Genome size: 106
Size: 107
Percent parens: 0.009
--- Population Statistics ---
Average total errors in population: 4965.1697299000025
Median total errors in population: 1411.2905
Error averages by case: (177.1367870000024 9.451 169.5835631999998 7.885 172.2234402999979 10.573 192.0839206000007 8.488 201.64308230000088 9.671 161.04175019999704 8.648 157.68530009999915 10.495 193.28912850000256 11.937 169.94334699999874 10.321 156.33422070000182 8.277 196.17989860000122 8.855 176.71067339999917 9.208 238.20260610000153 9.431 233.9483889000028 10.446 172.7434473999983 11.098 186.28635160000047 11.177 186.35608519999897 10.38 214.3014615999967 10.428 212.94969590000113 10.348 155.20822229999942 8.137 232.48148940000132 10.932 171.35707940000066 7.842 211.40812699999873 10.327 182.08053499999804 8.586 200.78712820000212 10.263)
Error minima by case: (16.5441 8 5.9855 5 10.4824 10 36.6813 4 37.5824 8 23.5978 5 9.2616 9 20.2633 5 1.0 4 6.6362 7 1.6294 8 7.1793 5 8.2143 4 4.6748 5 0.0 3 1.9499 4 24.3194 5 9.8995 3 57.3632 5 4.897 4 2.5733 5 9.4072 7 55.8894 5 20.8374 5 43.4761 5)
Average genome size in population (length): 103.333
Average program size in population (points): 104.333
Average percent parens in population: 0.010
Minimum age in population: 33.51242160797119
Maximum age in population: 37.57534909248352
Average age in population: 35.7495193297267
Median age in population: 35.79199090600014
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 4
Genome diversity (% unique Plush genomes):	 0.946
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 4
Syntactic diversity (% unique Push programs):	 0.946
Total error diversity:				 0.213
Error (vector) diversity:			 0.26
Behavioral diversity:				 0.26
--- Run Statistics ---
Number of program evaluations used so far: 26000
Number of point (instruction) evaluations so far: 51722531
--- Timings ---
Current time: 1529615256314 milliseconds
Total Time:         102.9 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        37.2 seconds, 36.2%
Fitness Testing:     51.3 seconds, 49.9%
Report:              14.2 seconds, 13.8%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 25
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 26
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 26
;;******************************
;; -*- Number IO problem report - generation 26
Test total error for best: 60026.23010000001
Test mean error for best: 30.01312
;;------------------------------
Outputs of best individual on training cases:
Correct output: -57.4559422311 | Program output: -74.023621    
Correct output: -71.0754923621 | Program output: -65.023621    
Correct output: -66.5176295557 | Program output: -77.023621    
Correct output: 149.3187378    | Program output: 86.028721     
Correct output: -36.5450493525 | Program output: -83.023621    
Correct output: 75.4021928097  | Program output: 48.024921     
Correct output: 52.2615929867  | Program output: 74.027521     
Correct output: -19.2178367434 | Program output: 43.024421     
Correct output: 66.7518906772  | Program output: 1.023621      
Correct output: 7.673605441    | Program output: 27.023621     
Correct output: 23.6294031682  | Program output: 90.029121     
Correct output: -6.1389033433  | Program output: 38.023921     
Correct output: 9.2516366816   | Program output: -82.023621    
Correct output: 31.3251776267  | Program output: -55.023621    
Correct output: 73.3746496408  | Program output: 0.023621      
Correct output: 20.0500553336  | Program output: -19.023621    
Correct output: -23.2820697498 | Program output: 32.023621     
Correct output: 120.1004999359 | Program output: 30.023621     
Correct output: -155.453212395 | Program output: -98.023621    
Correct output: 31.10301576    | Program output: 10.023621     
Correct output: 45.5733057121  | Program output: -39.023621    
Correct output: -68.592783645  | Program output: -78.023621    
Correct output: -125.979392023 | Program output: -70.023621    
Correct output: -91.9273649148 | Program output: -71.023621    
Correct output: -92.5660607267 | Program output: -49.023621    
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_inc} {:instruction float_add} {:instruction float_yank} {:instruction integer_dup} {:instruction float_min} {:instruction in2} {:instruction float_inc} {:instruction float_div} {:instruction integer_div} {:instruction float_inc} {:instruction float_dup} {:instruction float_mult} {:instruction integer_dec} {:instruction integer_yank} {:instruction float_sub} {:instruction 100} {:instruction integer_dup_items} {:instruction float_add} {:instruction 99} {:instruction integer_dup_items} {:instruction float_yankdup} {:instruction float_rot} {:instruction float_rot} {:instruction integer_flush} {:instruction float_min} {:instruction print_integer} {:instruction float_add} {:instruction integer_pop} {:instruction float_yankdup} {:instruction print_float} {:instruction integer_pop} {:instruction 27} {:instruction float_sub} {:instruction float_sub} {:instruction float_tan} {:instruction integer_yank} {:instruction integer_min} {:instruction float_max} {:instruction integer_sub} {:instruction 9} {:instruction float_swap} {:instruction integer_stackdepth} {:instruction float_frominteger} {:instruction tag_float_196} {:instruction float_swap} {:instruction float_rot} {:instruction integer_add} {:instruction integer_max} {:instruction tag_float_196} {:instruction float_swap} {:instruction float_rot} {:instruction integer_add} {:instruction integer_max} {:instruction float_max} {:instruction integer_stackdepth} {:instruction float_add} {:instruction in2} {:instruction float_rot} {:instruction integer_add} {:instruction integer_max} {:instruction float_max} {:instruction float_max} {:instruction integer_stackdepth} {:instruction float_add} {:instruction in2} {:instruction float_frominteger} {:instruction print_float} {:instruction integer_dup} {:instruction float_shove} {:instruction float_shove} {:instruction integer_inc} {:instruction float_mod} {:instruction integer_dup} {:instruction integer_dup_items} {:instruction print_integer} {:instruction integer_shove} {:instruction integer_yank} {:instruction print_integer} {:instruction integer_shove} {:instruction print_float} {:instruction integer_div} {:instruction integer_sub} {:instruction integer_fromfloat} {:instruction integer_mod} {:instruction print_integer} {:instruction integer_mult} {:instruction float_swap} {:instruction integer_stackdepth} {:instruction integer_stackdepth} {:instruction float_mod} {:instruction float_inc} {:instruction float_sub} {:instruction float_tan} {:instruction print_integer} {:instruction integer_mod} {:instruction float_div} {:instruction float_mod} {:instruction float_inc} {:instruction print_float} {:instruction integer_flush} {:instruction float_cos} {:instruction -52})
Best program: (integer_inc float_add float_yank integer_dup float_min in2 float_inc float_div integer_div float_inc float_dup float_mult integer_dec integer_yank float_sub 100 integer_dup_items float_add 99 integer_dup_items float_yankdup float_rot float_rot integer_flush float_min print_integer float_add integer_pop float_yankdup print_float integer_pop 27 float_sub float_sub float_tan integer_yank integer_min float_max integer_sub 9 float_swap integer_stackdepth float_frominteger tag_float_196 float_swap float_rot integer_add integer_max tag_float_196 float_swap float_rot integer_add integer_max float_max integer_stackdepth float_add in2 float_rot integer_add integer_max float_max float_max integer_stackdepth float_add in2 float_frominteger print_float integer_dup float_shove float_shove integer_inc float_mod integer_dup integer_dup_items print_integer integer_shove integer_yank print_integer integer_shove print_float integer_div integer_sub integer_fromfloat integer_mod print_integer integer_mult float_swap integer_stackdepth integer_stackdepth float_mod float_inc float_sub float_tan print_integer integer_mod float_div float_mod float_inc print_float integer_flush float_cos -52)
Errors: [16.5677 9 6.0519 6 10.506 10 63.29 8 46.4786 9 27.3773 8 21.7659 10 62.2423 12 65.7283 11 19.35 7 66.3997 9 44.1628 9 91.2753 8 86.3488 10 73.351 11 39.0737 11 55.3057 10 90.0769 11 57.4296 10 21.0794 9 84.5969 10 9.4308 7 55.9558 10 20.9037 7 43.5424 10]
Total: 1410.2905
Mean: 28.20581
Genome size: 102
Size: 103
Percent parens: 0.010
--- Population Statistics ---
Average total errors in population: 5523.671286900002
Median total errors in population: 1411.2905
Error averages by case: (207.251703500003 9.479 198.97004989999934 7.694 202.65888619999748 10.675 209.4747326000008 8.58 230.74765100000138 9.764 175.2138668999966 8.694 174.07165519999907 10.54 207.11733740000267 12.009 191.5910166999983 10.535 171.7182354000021 8.152 209.58220690000115 9.132 190.76813019999895 9.338 265.54532620000117 9.26 261.0886533000031 10.493 192.67190969999803 11.107 206.0484263000004 11.278 201.10894269999892 10.434 229.16328779999637 10.688 241.4841000000012 10.382 172.56567799999857 8.4 259.49751420000155 10.709 201.8606088000011 7.966 239.31768939999867 10.398 211.13576319999794 8.401 228.58991540000244 10.32)
Error minima by case: (15.5441 4 5.9928 5 9.4824 4 62.3187 6 36.545 4 26.4022 5 16.2516 4 19.2178 7 29.7519 5 5.6453 4 1.6294 4 6.1389 7 7.2234 7 4.6748 8 36.3746 4 1.9499 7 23.2821 7 83.1005 4 57.3705 6 4.897 3 8.5733 8 8.4072 4 55.8967 6 20.8447 6 28.4339 6)
Average genome size in population (length): 104.198
Average program size in population (points): 105.198
Average percent parens in population: 0.010
Minimum age in population: 34.51242160797119
Maximum age in population: 39.06930774450302
Average age in population: 37.18637889227271
Median age in population: 37.2054782807827
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 8
Genome diversity (% unique Plush genomes):	 0.928
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 8
Syntactic diversity (% unique Push programs):	 0.928
Total error diversity:				 0.233
Error (vector) diversity:			 0.295
Behavioral diversity:				 0.295
--- Run Statistics ---
Number of program evaluations used so far: 27000
Number of point (instruction) evaluations so far: 54334756
--- Timings ---
Current time: 1529615260450 milliseconds
Total Time:         107.0 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        38.5 seconds, 36.0%
Fitness Testing:     53.6 seconds, 50.1%
Report:              14.8 seconds, 13.8%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 26
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 27
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 27
;;******************************
;; -*- Number IO problem report - generation 27
Test total error for best: 60026.23010000001
Test mean error for best: 30.01312
;;------------------------------
Outputs of best individual on training cases:
Correct output: -57.4559422311 | Program output: -74.023621    
Correct output: -71.0754923621 | Program output: -65.023621    
Correct output: -66.5176295557 | Program output: -77.023621    
Correct output: 149.3187378    | Program output: 86.028721     
Correct output: -36.5450493525 | Program output: -83.023621    
Correct output: 75.4021928097  | Program output: 48.024921     
Correct output: 52.2615929867  | Program output: 74.027521     
Correct output: -19.2178367434 | Program output: 43.024421     
Correct output: 66.7518906772  | Program output: 1.023621      
Correct output: 7.673605441    | Program output: 27.023621     
Correct output: 23.6294031682  | Program output: 90.029121     
Correct output: -6.1389033433  | Program output: 38.023921     
Correct output: 9.2516366816   | Program output: -82.023621    
Correct output: 31.3251776267  | Program output: -55.023621    
Correct output: 73.3746496408  | Program output: 0.023621      
Correct output: 20.0500553336  | Program output: -19.023621    
Correct output: -23.2820697498 | Program output: 32.023621     
Correct output: 120.1004999359 | Program output: 30.023621     
Correct output: -155.453212395 | Program output: -98.023621    
Correct output: 31.10301576    | Program output: 10.023621     
Correct output: 45.5733057121  | Program output: -39.023621    
Correct output: -68.592783645  | Program output: -78.023621    
Correct output: -125.979392023 | Program output: -70.023621    
Correct output: -91.9273649148 | Program output: -71.023621    
Correct output: -92.5660607267 | Program output: -49.023621    
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_inc} {:instruction float_add} {:instruction float_yank} {:instruction integer_dup} {:instruction float_min} {:instruction in2} {:instruction float_inc} {:instruction float_dup} {:instruction float_mult} {:instruction float_sub} {:instruction integer_yank} {:instruction float_sub} {:instruction 100} {:instruction integer_dup_items} {:instruction float_add} {:instruction 100} {:instruction integer_dup_items} {:instruction float_add} {:instruction float_rot} {:instruction float_mult} {:instruction integer_flush} {:instruction integer_min} {:instruction float_mod} {:instruction integer_shove} {:instruction integer_dup_times} {:instruction integer_swap} {:instruction integer_max} {:instruction float_sub} {:instruction 100} {:instruction integer_dup_items} {:instruction float_yankdup} {:instruction float_rot} {:instruction float_rot} {:instruction integer_flush} {:instruction float_min} {:instruction print_integer} {:instruction float_add} {:instruction integer_pop} {:instruction float_yankdup} {:instruction print_float} {:instruction integer_pop} {:instruction 27} {:instruction float_sub} {:instruction float_sub} {:instruction float_tan} {:instruction integer_yank} {:instruction integer_min} {:instruction float_max} {:instruction integer_sub} {:instruction 9} {:instruction float_swap} {:instruction integer_stackdepth} {:instruction float_frominteger} {:instruction tag_float_196} {:instruction float_swap} {:instruction float_rot} {:instruction integer_add} {:instruction integer_max} {:instruction integer_fromfloat} {:instruction integer_stackdepth} {:instruction float_add} {:instruction in2} {:instruction float_mult} {:instruction integer_stackdepth} {:instruction float_frominteger} {:instruction tag_float_196} {:instruction float_swap} {:instruction float_rot} {:instruction integer_add} {:instruction integer_max} {:instruction float_max} {:instruction integer_stackdepth} {:instruction float_add} {:instruction in2} {:instruction float_frominteger} {:instruction print_float} {:instruction integer_dup} {:instruction float_shove} {:instruction float_shove} {:instruction integer_inc} {:instruction float_mod} {:instruction integer_dup} {:instruction integer_dup_items} {:instruction print_integer} {:instruction integer_shove} {:instruction integer_yank} {:instruction print_integer} {:instruction integer_shove} {:instruction print_float} {:instruction integer_div} {:instruction integer_sub} {:instruction integer_fromfloat} {:instruction integer_mod} {:instruction print_integer} {:instruction integer_mult} {:instruction integer_stackdepth} {:instruction tag_float_291} {:instruction integer_inc} {:instruction float_swap} {:instruction print_integer} {:instruction integer_mod} {:instruction float_div} {:instruction float_mod} {:instruction float_inc} {:instruction print_float} {:instruction integer_flush} {:instruction float_cos} {:instruction -51} {:instruction integer_dec} {:instruction float_sub} {:instruction float_tan})
Best program: (integer_inc float_add float_yank integer_dup float_min in2 float_inc float_dup float_mult float_sub integer_yank float_sub 100 integer_dup_items float_add 100 integer_dup_items float_add float_rot float_mult integer_flush integer_min float_mod integer_shove integer_dup_times integer_swap integer_max float_sub 100 integer_dup_items float_yankdup float_rot float_rot integer_flush float_min print_integer float_add integer_pop float_yankdup print_float integer_pop 27 float_sub float_sub float_tan integer_yank integer_min float_max integer_sub 9 float_swap integer_stackdepth float_frominteger tag_float_196 float_swap float_rot integer_add integer_max integer_fromfloat integer_stackdepth float_add in2 float_mult integer_stackdepth float_frominteger tag_float_196 float_swap float_rot integer_add integer_max float_max integer_stackdepth float_add in2 float_frominteger print_float integer_dup float_shove float_shove integer_inc float_mod integer_dup integer_dup_items print_integer integer_shove integer_yank print_integer integer_shove print_float integer_div integer_sub integer_fromfloat integer_mod print_integer integer_mult integer_stackdepth tag_float_291 integer_inc float_swap print_integer integer_mod float_div float_mod float_inc print_float integer_flush float_cos -51 integer_dec float_sub float_tan)
Errors: [16.5677 9 6.0519 6 10.506 10 63.29 8 46.4786 9 27.3773 8 21.7659 10 62.2423 12 65.7283 11 19.35 7 66.3997 9 44.1628 9 91.2753 8 86.3488 10 73.351 11 39.0737 11 55.3057 10 90.0769 11 57.4296 10 21.0794 9 84.5969 10 9.4308 7 55.9558 10 20.9037 7 43.5424 10]
Total: 1410.2905
Mean: 28.20581
Genome size: 111
Size: 112
Percent parens: 0.009
--- Population Statistics ---
Average total errors in population: 5163.2978108000025
Median total errors in population: 1411.2905
Error averages by case: (182.8076479000021 9.374 175.39349409999986 7.43 178.12726139999776 10.612 204.2228775000004 8.615 206.6660284000012 9.764 172.8045951999971 8.757 167.57639769999912 10.542 200.63270800000217 12.036 183.65272649999878 10.835 166.1715109000017 7.846 204.85223500000092 9.338 185.17326719999917 9.352 242.16389070000125 9.028 238.09918460000281 10.573 187.44379269999823 11.167 193.5717245000002 11.311 195.67244639999907 10.448 224.08877609999675 10.942 218.24686280000117 10.386 167.24345489999908 8.652 236.7290118000016 10.426 177.614962200001 7.947 216.12582499999868 10.419 187.9065032999982 8.173 206.01462600000193 10.323)
Error minima by case: (15.5814 7 6.0255 3 9.5197 9 62.2814 6 36.555 8 26.3648 7 21.6823 9 19.2278 3 24.2608 8 1.3638 6 1.6294 8 6.1489 3 0.2143 8 0.999 8 16.6381 8 1.9499 9 23.2921 3 84.0905 9 57.4032 3 4.907 5 9.5633 9 8.4446 7 55.9294 4 20.8774 3 43.5161 2)
Average genome size in population (length): 105.958
Average program size in population (points): 106.958
Average percent parens in population: 0.009
Minimum age in population: 36.27017366886139
Maximum age in population: 40.46381467580795
Average age in population: 38.49531189821661
Median age in population: 38.54016820341349
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 7
Genome diversity (% unique Plush genomes):	 0.925
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 7
Syntactic diversity (% unique Push programs):	 0.925
Total error diversity:				 0.235
Error (vector) diversity:			 0.29
Behavioral diversity:				 0.291
--- Run Statistics ---
Number of program evaluations used so far: 28000
Number of point (instruction) evaluations so far: 56987456
--- Timings ---
Current time: 1529615265036 milliseconds
Total Time:         111.6 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        39.9 seconds, 35.7%
Fitness Testing:     56.2 seconds, 50.4%
Report:              15.4 seconds, 13.8%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 27
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 28
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 28
;;******************************
;; -*- Number IO problem report - generation 28
Test total error for best: 60026.23010000001
Test mean error for best: 30.01312
;;------------------------------
Outputs of best individual on training cases:
Correct output: -57.4559422311 | Program output: -74.023621    
Correct output: -71.0754923621 | Program output: -65.023621    
Correct output: -66.5176295557 | Program output: -77.023621    
Correct output: 149.3187378    | Program output: 86.028721     
Correct output: -36.5450493525 | Program output: -83.023621    
Correct output: 75.4021928097  | Program output: 48.024921     
Correct output: 52.2615929867  | Program output: 74.027521     
Correct output: -19.2178367434 | Program output: 43.024421     
Correct output: 66.7518906772  | Program output: 1.023621      
Correct output: 7.673605441    | Program output: 27.023621     
Correct output: 23.6294031682  | Program output: 90.029121     
Correct output: -6.1389033433  | Program output: 38.023921     
Correct output: 9.2516366816   | Program output: -82.023621    
Correct output: 31.3251776267  | Program output: -55.023621    
Correct output: 73.3746496408  | Program output: 0.023621      
Correct output: 20.0500553336  | Program output: -19.023621    
Correct output: -23.2820697498 | Program output: 32.023621     
Correct output: 120.1004999359 | Program output: 30.023621     
Correct output: -155.453212395 | Program output: -98.023621    
Correct output: 31.10301576    | Program output: 10.023621     
Correct output: 45.5733057121  | Program output: -39.023621    
Correct output: -68.592783645  | Program output: -78.023621    
Correct output: -125.979392023 | Program output: -70.023621    
Correct output: -91.9273649148 | Program output: -71.023621    
Correct output: -92.5660607267 | Program output: -49.023621    
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_inc} {:instruction float_add} {:instruction float_yank} {:instruction integer_dup} {:instruction integer_inc} {:instruction float_add} {:instruction float_yank} {:instruction float_mult} {:instruction float_sub} {:instruction integer_yank} {:instruction float_sub} {:instruction 100} {:instruction integer_dup_items} {:instruction integer_add} {:instruction 100} {:instruction integer_dup_items} {:instruction 100} {:instruction integer_dup_items} {:instruction float_add} {:instruction float_rot} {:instruction float_yankdup} {:instruction float_rot} {:instruction float_rot} {:instruction integer_flush} {:instruction float_min} {:instruction print_integer} {:instruction float_add} {:instruction integer_pop} {:instruction float_yankdup} {:instruction print_float} {:instruction integer_pop} {:instruction 27} {:instruction float_sub} {:instruction float_sub} {:instruction float_tan} {:instruction integer_yank} {:instruction integer_min} {:instruction float_max} {:instruction integer_sub} {:instruction 9} {:instruction float_swap} {:instruction integer_stackdepth} {:instruction float_frominteger} {:instruction tag_float_196} {:instruction float_swap} {:instruction float_rot} {:instruction integer_add} {:instruction integer_max} {:instruction integer_fromfloat} {:instruction integer_stackdepth} {:instruction float_add} {:instruction in2} {:instruction float_mult} {:instruction integer_stackdepth} {:instruction float_frominteger} {:instruction tag_float_196} {:instruction float_swap} {:instruction float_rot} {:instruction integer_add} {:instruction integer_max} {:instruction float_max} {:instruction integer_stackdepth} {:instruction float_add} {:instruction in2} {:instruction float_frominteger} {:instruction print_float} {:instruction integer_dup} {:instruction float_shove} {:instruction float_shove} {:instruction integer_inc} {:instruction float_mod} {:instruction integer_dup} {:instruction integer_dup_items} {:instruction print_integer} {:instruction integer_shove} {:instruction integer_yank} {:instruction print_integer} {:instruction integer_shove} {:instruction print_float} {:instruction integer_div} {:instruction integer_sub} {:instruction integer_fromfloat} {:instruction integer_mod} {:instruction print_integer} {:instruction integer_mult} {:instruction integer_stackdepth} {:instruction tag_float_291} {:instruction integer_inc} {:instruction float_swap} {:instruction print_integer} {:instruction integer_mod} {:instruction float_div} {:instruction float_mod} {:instruction float_inc} {:instruction print_float} {:instruction integer_flush} {:instruction float_cos} {:instruction -51} {:instruction integer_dec} {:instruction float_sub} {:instruction float_tan} {:instruction float_sub} {:instruction float_sin} {:instruction integer_yank})
Best program: (integer_inc float_add float_yank integer_dup integer_inc float_add float_yank float_mult float_sub integer_yank float_sub 100 integer_dup_items integer_add 100 integer_dup_items 100 integer_dup_items float_add float_rot float_yankdup float_rot float_rot integer_flush float_min print_integer float_add integer_pop float_yankdup print_float integer_pop 27 float_sub float_sub float_tan integer_yank integer_min float_max integer_sub 9 float_swap integer_stackdepth float_frominteger tag_float_196 float_swap float_rot integer_add integer_max integer_fromfloat integer_stackdepth float_add in2 float_mult integer_stackdepth float_frominteger tag_float_196 float_swap float_rot integer_add integer_max float_max integer_stackdepth float_add in2 float_frominteger print_float integer_dup float_shove float_shove integer_inc float_mod integer_dup integer_dup_items print_integer integer_shove integer_yank print_integer integer_shove print_float integer_div integer_sub integer_fromfloat integer_mod print_integer integer_mult integer_stackdepth tag_float_291 integer_inc float_swap print_integer integer_mod float_div float_mod float_inc print_float integer_flush float_cos -51 integer_dec float_sub float_tan float_sub float_sin integer_yank)
Errors: [16.5677 9 6.0519 6 10.506 10 63.29 8 46.4786 9 27.3773 8 21.7659 10 62.2423 12 65.7283 11 19.35 7 66.3997 9 44.1628 9 91.2753 8 86.3488 10 73.351 11 39.0737 11 55.3057 10 90.0769 11 57.4296 10 21.0794 9 84.5969 10 9.4308 7 55.9558 10 20.9037 7 43.5424 10]
Total: 1410.2905
Mean: 28.20581
Genome size: 104
Size: 105
Percent parens: 0.010
--- Population Statistics ---
Average total errors in population: 5093.497246900003
Median total errors in population: 1410.2905
Error averages by case: (188.38429300000305 9.307 181.4146939999995 7.31 183.3748954999976 10.606 191.45660740000096 8.621 212.5008938000012 9.741 159.59379429999674 8.731 157.63687739999895 10.561 190.2866629000026 12.026 171.47942239999884 10.912 153.35996130000186 7.715 195.74665840000148 9.413 175.53176309999918 9.325 249.4241479000021 8.866 243.73457290000303 10.561 177.28741159999802 11.146 189.78395770000023 11.309 185.282540099999 10.421 211.14410719999643 11.005 225.13164800000118 10.357 154.21191679999916 8.718 241.67647420000165 10.255 183.5420614000009 7.93 223.43005269999838 10.37 193.81833579999795 8.013 210.7264971000022 10.318)
Error minima by case: (16.5441 7 6.0213 6 10.4824 9 36.7701 7 37.545 8 26.3517 7 21.7384 9 20.2178 7 1.0 5 1.3547 6 3.3806 8 7.1389 7 0.2234 6 4.2969 7 0.0 4 6.9599 7 24.2821 7 9.1005 6 57.399 7 4.0747 6 9.5633 7 9.4072 7 55.9252 7 20.8731 7 38.4339 7)
Average genome size in population (length): 106.179
Average program size in population (points): 107.179
Average percent parens in population: 0.009
Minimum age in population: 37.39230032265186
Maximum age in population: 41.73923426866531
Average age in population: 39.90370761935413
Median age in population: 39.93612434715033
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 6
Genome diversity (% unique Plush genomes):	 0.923
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 6
Syntactic diversity (% unique Push programs):	 0.923
Total error diversity:				 0.225
Error (vector) diversity:			 0.267
Behavioral diversity:				 0.268
--- Run Statistics ---
Number of program evaluations used so far: 29000
Number of point (instruction) evaluations so far: 59644681
--- Timings ---
Current time: 1529615269527 milliseconds
Total Time:         115.9 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        41.3 seconds, 35.6%
Fitness Testing:     58.6 seconds, 50.6%
Report:              16.0 seconds, 13.8%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 28
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 29
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 29
;;******************************
;; -*- Number IO problem report - generation 29
Test total error for best: 60026.23010000001
Test mean error for best: 30.01312
;;------------------------------
Outputs of best individual on training cases:
Correct output: -57.4559422311 | Program output: -74.023621    
Correct output: -71.0754923621 | Program output: -65.023621    
Correct output: -66.5176295557 | Program output: -77.023621    
Correct output: 149.3187378    | Program output: 86.028721     
Correct output: -36.5450493525 | Program output: -83.023621    
Correct output: 75.4021928097  | Program output: 48.024921     
Correct output: 52.2615929867  | Program output: 74.027521     
Correct output: -19.2178367434 | Program output: 43.024421     
Correct output: 66.7518906772  | Program output: 1.023621      
Correct output: 7.673605441    | Program output: 27.023621     
Correct output: 23.6294031682  | Program output: 90.029121     
Correct output: -6.1389033433  | Program output: 38.023921     
Correct output: 9.2516366816   | Program output: -82.023621    
Correct output: 31.3251776267  | Program output: -55.023621    
Correct output: 73.3746496408  | Program output: 0.023621      
Correct output: 20.0500553336  | Program output: -19.023621    
Correct output: -23.2820697498 | Program output: 32.023621     
Correct output: 120.1004999359 | Program output: 30.023621     
Correct output: -155.453212395 | Program output: -98.023621    
Correct output: 31.10301576    | Program output: 10.023621     
Correct output: 45.5733057121  | Program output: -39.023621    
Correct output: -68.592783645  | Program output: -78.023621    
Correct output: -125.979392023 | Program output: -70.023621    
Correct output: -91.9273649148 | Program output: -71.023621    
Correct output: -92.5660607267 | Program output: -49.023621    
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_inc} {:instruction float_add} {:instruction float_yank} {:instruction integer_mod} {:instruction float_min} {:instruction in2} {:instruction float_inc} {:instruction float_div} {:instruction integer_max} {:instruction float_inc} {:instruction float_dup} {:instruction float_mult} {:instruction float_sub} {:instruction integer_yank} {:instruction float_sub} {:instruction 100} {:instruction integer_dup_items} {:instruction float_add} {:instruction 99} {:instruction integer_dup_items} {:instruction float_yankdup} {:instruction float_rot} {:instruction float_rot} {:instruction integer_flush} {:instruction float_frominteger} {:instruction print_integer} {:instruction float_add} {:instruction integer_pop} {:instruction float_yankdup} {:instruction print_float} {:instruction integer_pop} {:instruction 27} {:instruction float_sub} {:instruction float_swap} {:instruction integer_stackdepth} {:instruction float_frominteger} {:instruction tag_float_196} {:instruction float_swap} {:instruction float_rot} {:instruction integer_add} {:instruction integer_max} {:instruction integer_fromfloat} {:instruction integer_stackdepth} {:instruction integer_pop} {:instruction 27} {:instruction float_sub} {:instruction float_sub} {:instruction float_tan} {:instruction integer_yank} {:instruction integer_min} {:instruction float_max} {:instruction integer_sub} {:instruction 9} {:instruction float_swap} {:instruction integer_stackdepth} {:instruction float_frominteger} {:instruction tag_float_196} {:instruction float_swap} {:instruction float_rot} {:instruction integer_add} {:instruction integer_max} {:instruction integer_fromfloat} {:instruction integer_stackdepth} {:instruction float_add} {:instruction in2} {:instruction float_mult} {:instruction integer_stackdepth} {:instruction float_frominteger} {:instruction tag_float_196} {:instruction float_swap} {:instruction float_rot} {:instruction integer_add} {:instruction integer_max} {:instruction float_max} {:instruction integer_stackdepth} {:instruction float_add} {:instruction in2} {:instruction float_frominteger} {:instruction print_float} {:instruction integer_dup} {:instruction float_shove} {:instruction float_mult} {:instruction integer_inc} {:instruction float_mod} {:instruction integer_dup} {:instruction integer_dup_items} {:instruction print_integer} {:instruction integer_shove} {:instruction integer_yank} {:instruction print_integer} {:instruction integer_shove} {:instruction integer_dup_times} {:instruction integer_div} {:instruction integer_sub} {:instruction integer_fromfloat} {:instruction integer_mod} {:instruction print_integer} {:instruction integer_mult} {:instruction integer_stackdepth} {:instruction tag_float_291} {:instruction integer_inc} {:instruction float_swap} {:instruction print_integer} {:instruction integer_mult} {:instruction float_swap} {:instruction integer_mod} {:instruction float_div} {:instruction float_div} {:instruction float_inc} {:instruction print_float} {:instruction integer_flush} {:instruction float_cos} {:instruction -51} {:instruction integer_dec} {:instruction float_sub} {:instruction float_tan} {:instruction float_rot} {:instruction float_sin} {:instruction integer_yank} {:instruction float_dup})
Best program: (integer_inc float_add float_yank integer_mod float_min in2 float_inc float_div integer_max float_inc float_dup float_mult float_sub integer_yank float_sub 100 integer_dup_items float_add 99 integer_dup_items float_yankdup float_rot float_rot integer_flush float_frominteger print_integer float_add integer_pop float_yankdup print_float integer_pop 27 float_sub float_swap integer_stackdepth float_frominteger tag_float_196 float_swap float_rot integer_add integer_max integer_fromfloat integer_stackdepth integer_pop 27 float_sub float_sub float_tan integer_yank integer_min float_max integer_sub 9 float_swap integer_stackdepth float_frominteger tag_float_196 float_swap float_rot integer_add integer_max integer_fromfloat integer_stackdepth float_add in2 float_mult integer_stackdepth float_frominteger tag_float_196 float_swap float_rot integer_add integer_max float_max integer_stackdepth float_add in2 float_frominteger print_float integer_dup float_shove float_mult integer_inc float_mod integer_dup integer_dup_items print_integer integer_shove integer_yank print_integer integer_shove integer_dup_times integer_div integer_sub integer_fromfloat integer_mod print_integer integer_mult integer_stackdepth tag_float_291 integer_inc float_swap print_integer integer_mult float_swap integer_mod float_div float_div float_inc print_float integer_flush float_cos -51 integer_dec float_sub float_tan float_rot float_sin integer_yank float_dup)
Errors: [16.5677 9 6.0519 6 10.506 10 63.29 8 46.4786 9 27.3773 8 21.7659 10 62.2423 12 65.7283 11 19.35 7 66.3997 9 44.1628 9 91.2753 8 86.3488 10 73.351 11 39.0737 11 55.3057 10 90.0769 11 57.4296 10 21.0794 9 84.5969 10 9.4308 7 55.9558 10 20.9037 7 43.5424 10]
Total: 1410.2905
Mean: 28.20581
Genome size: 120
Size: 121
Percent parens: 0.008
--- Population Statistics ---
Average total errors in population: 5460.435253800001
Median total errors in population: 1410.2905
Error averages by case: (200.3815403000031 9.403 192.1534411999994 7.305 195.74953809999764 10.662 210.11110430000073 8.664 223.9042214000011 9.813 179.28860299999687 8.731 175.4286237999989 10.583 208.56392850000267 12.073 188.84763719999842 10.935 173.1049998000019 7.752 212.9160341000015 9.448 193.14172649999918 9.357 258.81237120000156 8.919 254.48494700000316 10.563 190.7410005999981 11.149 206.95234630000084 11.369 203.4031093999989 10.489 231.46640749999625 11.08 234.95899990000115 10.452 173.81097549999853 8.799 252.93859660000157 10.314 194.94103400000094 7.993 232.91931909999877 10.461 204.41692349999818 8.076 222.18482500000226 10.423)
Error minima by case: (16.5441 7 2.9481 3 7.506 9 31.6813 4 36.555 8 5.6227 3 21.7384 10 19.2278 3 1.0 2 3.3264 5 12.6294 8 6.1489 3 1.7484 2 4.6848 3 0.0 1 9.0501 3 23.2921 3 9.9261 3 57.3613 3 4.907 2 8.5723 3 5.4308 6 51.9558 3 17.9037 3 18.5424 3)
Average genome size in population (length): 106.133
Average program size in population (points): 107.133
Average percent parens in population: 0.009
Minimum age in population: 38.98541109636426
Maximum age in population: 43.43301560729742
Average age in population: 41.30984001065046
Median age in population: 41.33889696747065
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 5
Genome diversity (% unique Plush genomes):	 0.935
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 5
Syntactic diversity (% unique Push programs):	 0.935
Total error diversity:				 0.212
Error (vector) diversity:			 0.271
Behavioral diversity:				 0.272
--- Run Statistics ---
Number of program evaluations used so far: 30000
Number of point (instruction) evaluations so far: 62300781
--- Timings ---
Current time: 1529615273827 milliseconds
Total Time:         120.3 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        42.6 seconds, 35.4%
Fitness Testing:     60.9 seconds, 50.6%
Report:              16.7 seconds, 13.9%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 29
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 30
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 30
;;******************************
;; -*- Number IO problem report - generation 30
Test total error for best: 60026.23010000001
Test mean error for best: 30.01312
;;------------------------------
Outputs of best individual on training cases:
Correct output: -57.4559422311 | Program output: -74.023621    
Correct output: -71.0754923621 | Program output: -65.023621    
Correct output: -66.5176295557 | Program output: -77.023621    
Correct output: 149.3187378    | Program output: 86.028721     
Correct output: -36.5450493525 | Program output: -83.023621    
Correct output: 75.4021928097  | Program output: 48.024921     
Correct output: 52.2615929867  | Program output: 74.027521     
Correct output: -19.2178367434 | Program output: 43.024421     
Correct output: 66.7518906772  | Program output: 1.023621      
Correct output: 7.673605441    | Program output: 27.023621     
Correct output: 23.6294031682  | Program output: 90.029121     
Correct output: -6.1389033433  | Program output: 38.023921     
Correct output: 9.2516366816   | Program output: -82.023621    
Correct output: 31.3251776267  | Program output: -55.023621    
Correct output: 73.3746496408  | Program output: 0.023621      
Correct output: 20.0500553336  | Program output: -19.023621    
Correct output: -23.2820697498 | Program output: 32.023621     
Correct output: 120.1004999359 | Program output: 30.023621     
Correct output: -155.453212395 | Program output: -98.023621    
Correct output: 31.10301576    | Program output: 10.023621     
Correct output: 45.5733057121  | Program output: -39.023621    
Correct output: -68.592783645  | Program output: -78.023621    
Correct output: -125.979392023 | Program output: -70.023621    
Correct output: -91.9273649148 | Program output: -71.023621    
Correct output: -92.5660607267 | Program output: -49.023621    
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_inc} {:instruction float_add} {:instruction integer_sub} {:instruction integer_dup} {:instruction float_min} {:instruction in2} {:instruction float_yankdup} {:instruction float_flush} {:instruction integer_dup_times} {:instruction integer_swap} {:instruction integer_max} {:instruction float_sub} {:instruction 100} {:instruction integer_dup_items} {:instruction float_yankdup} {:instruction float_rot} {:instruction float_rot} {:instruction print_float} {:instruction integer_pop} {:instruction 27} {:instruction float_pop} {:instruction integer_flush} {:instruction integer_pop} {:instruction float_min} {:instruction print_integer} {:instruction float_add} {:instruction float_tan} {:instruction print_float} {:instruction integer_pop} {:instruction 27} {:instruction float_sub} {:instruction float_sub} {:instruction float_tan} {:instruction integer_yank} {:instruction integer_min} {:instruction integer_yank} {:instruction integer_min} {:instruction float_sin} {:instruction integer_sub} {:instruction 9} {:instruction float_swap} {:instruction integer_stackdepth} {:instruction float_frominteger} {:instruction tag_float_196} {:instruction float_swap} {:instruction float_rot} {:instruction integer_add} {:instruction integer_max} {:instruction integer_fromfloat} {:instruction integer_stackdepth} {:instruction float_add} {:instruction in2} {:instruction float_yank} {:instruction integer_add} {:instruction integer_max} {:instruction float_max} {:instruction integer_stackdepth} {:instruction float_add} {:instruction in2} {:instruction float_frominteger} {:instruction print_float} {:instruction integer_dup} {:instruction float_shove} {:instruction float_shove} {:instruction integer_inc} {:instruction float_mod} {:instruction integer_dup} {:instruction integer_dup_items} {:instruction print_integer} {:instruction integer_shove} {:instruction integer_yank} {:instruction print_integer} {:instruction integer_shove} {:instruction print_float} {:instruction integer_div} {:instruction integer_sub} {:instruction integer_fromfloat} {:instruction integer_mod} {:instruction print_integer} {:instruction print_float} {:instruction integer_mod} {:instruction integer_sub} {:instruction integer_fromfloat} {:instruction integer_mod} {:instruction print_integer} {:instruction integer_mult} {:instruction integer_stackdepth} {:instruction tag_float_291} {:instruction integer_inc} {:instruction float_swap} {:instruction print_integer} {:instruction integer_mod} {:instruction float_mod} {:instruction float_mod} {:instruction float_inc} {:instruction print_float} {:instruction integer_flush} {:instruction float_cos} {:instruction -51} {:instruction integer_dec} {:instruction float_sub} {:instruction float_tan})
Best program: (integer_inc float_add integer_sub integer_dup float_min in2 float_yankdup float_flush integer_dup_times integer_swap integer_max float_sub 100 integer_dup_items float_yankdup float_rot float_rot print_float integer_pop 27 float_pop integer_flush integer_pop float_min print_integer float_add float_tan print_float integer_pop 27 float_sub float_sub float_tan integer_yank integer_min integer_yank integer_min float_sin integer_sub 9 float_swap integer_stackdepth float_frominteger tag_float_196 float_swap float_rot integer_add integer_max integer_fromfloat integer_stackdepth float_add in2 float_yank integer_add integer_max float_max integer_stackdepth float_add in2 float_frominteger print_float integer_dup float_shove float_shove integer_inc float_mod integer_dup integer_dup_items print_integer integer_shove integer_yank print_integer integer_shove print_float integer_div integer_sub integer_fromfloat integer_mod print_integer print_float integer_mod integer_sub integer_fromfloat integer_mod print_integer integer_mult integer_stackdepth tag_float_291 integer_inc float_swap print_integer integer_mod float_mod float_mod float_inc print_float integer_flush float_cos -51 integer_dec float_sub float_tan)
Errors: [16.5677 9 6.0519 6 10.506 10 63.29 8 46.4786 9 27.3773 8 21.7659 10 62.2423 12 65.7283 11 19.35 7 66.3997 9 44.1628 9 91.2753 8 86.3488 10 73.351 11 39.0737 11 55.3057 10 90.0769 11 57.4296 10 21.0794 9 84.5969 10 9.4308 7 55.9558 10 20.9037 7 43.5424 10]
Total: 1410.2905
Mean: 28.20581
Genome size: 102
Size: 103
Percent parens: 0.010
--- Population Statistics ---
Average total errors in population: 5224.049313699998
Median total errors in population: 1410.2905
Error averages by case: (193.23808500000243 9.344 186.8156775999995 7.267 188.488033799998 10.641 194.82586040000024 8.598 217.22425080000113 9.775 165.41161109999712 8.732 162.73516869999898 10.563 198.1727444000018 12.037 174.66106149999922 10.961 160.7264137000018 7.728 199.51707560000105 9.412 181.78493029999956 9.315 252.89310180000174 8.898 248.59836990000295 10.58 179.1906516999986 11.209 203.3361533000007 11.351 189.5459556999989 10.46 216.45085319999677 11.073 229.65301390000127 10.43 157.81363349999964 8.778 247.04774410000158 10.259 187.65625160000096 7.931 227.80197139999882 10.441 199.1173160999986 8.027 217.15238460000188 10.381)
Error minima by case: (16.5541 7 6.0262 6 10.4924 9 36.71 6 36.5824 8 25.3922 7 21.7484 9 19.2633 9 24.2808 7 4.3264 5 11.6294 8 6.1793 7 6.2516 8 4.6848 9 16.6581 6 15.9599 9 23.3194 9 9.1005 8 57.4039 9 4.907 6 8.5633 8 9.4172 6 55.9301 9 20.8781 7 43.5168 9)
Average genome size in population (length): 106.163
Average program size in population (points): 107.163
Average percent parens in population: 0.009
Minimum age in population: 40.23761744052172
Maximum age in population: 44.72899664752185
Average age in population: 42.72434720119089
Median age in population: 42.7283782158047
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 4
Genome diversity (% unique Plush genomes):	 0.945
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 4
Syntactic diversity (% unique Push programs):	 0.945
Total error diversity:				 0.212
Error (vector) diversity:			 0.253
Behavioral diversity:				 0.254
--- Run Statistics ---
Number of program evaluations used so far: 31000
Number of point (instruction) evaluations so far: 64957056
--- Timings ---
Current time: 1529615278645 milliseconds
Total Time:         125.0 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        44.2 seconds, 35.3%
Fitness Testing:     63.3 seconds, 50.7%
Report:              17.4 seconds, 13.9%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 30
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 31
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 31
;;******************************
;; -*- Number IO problem report - generation 31
Test total error for best: 60026.23010000001
Test mean error for best: 30.01312
;;------------------------------
Outputs of best individual on training cases:
Correct output: -57.4559422311 | Program output: -74.023621    
Correct output: -71.0754923621 | Program output: -65.023621    
Correct output: -66.5176295557 | Program output: -77.023621    
Correct output: 149.3187378    | Program output: 86.028721     
Correct output: -36.5450493525 | Program output: -83.023621    
Correct output: 75.4021928097  | Program output: 48.024921     
Correct output: 52.2615929867  | Program output: 74.027521     
Correct output: -19.2178367434 | Program output: 43.024421     
Correct output: 66.7518906772  | Program output: 1.023621      
Correct output: 7.673605441    | Program output: 27.023621     
Correct output: 23.6294031682  | Program output: 90.029121     
Correct output: -6.1389033433  | Program output: 38.023921     
Correct output: 9.2516366816   | Program output: -82.023621    
Correct output: 31.3251776267  | Program output: -55.023621    
Correct output: 73.3746496408  | Program output: 0.023621      
Correct output: 20.0500553336  | Program output: -19.023621    
Correct output: -23.2820697498 | Program output: 32.023621     
Correct output: 120.1004999359 | Program output: 30.023621     
Correct output: -155.453212395 | Program output: -98.023621    
Correct output: 31.10301576    | Program output: 10.023621     
Correct output: 45.5733057121  | Program output: -39.023621    
Correct output: -68.592783645  | Program output: -78.023621    
Correct output: -125.979392023 | Program output: -70.023621    
Correct output: -91.9273649148 | Program output: -71.023621    
Correct output: -92.5660607267 | Program output: -49.023621    
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_inc} {:instruction float_add} {:instruction float_yank} {:instruction integer_dup} {:instruction float_min} {:instruction in2} {:instruction integer_inc} {:instruction float_add} {:instruction float_yank} {:instruction integer_dup} {:instruction float_min} {:instruction in2} {:instruction float_yankdup} {:instruction float_flush} {:instruction float_shove} {:instruction integer_sub} {:instruction float_dec} {:instruction float_tan} {:instruction integer_pop} {:instruction integer_mod} {:instruction float_dup_items} {:instruction integer_dec} {:instruction integer_div} {:instruction integer_min} {:instruction float_mod} {:instruction integer_shove} {:instruction integer_dup_times} {:instruction integer_swap} {:instruction integer_max} {:instruction float_sub} {:instruction 100} {:instruction integer_dup_items} {:instruction float_yankdup} {:instruction float_rot} {:instruction float_rot} {:instruction integer_flush} {:instruction float_min} {:instruction print_integer} {:instruction float_add} {:instruction integer_pop} {:instruction float_yankdup} {:instruction print_float} {:instruction integer_pop} {:instruction 27} {:instruction float_sub} {:instruction float_sub} {:instruction float_tan} {:instruction integer_yank} {:instruction integer_min} {:instruction float_max} {:instruction float_tan} {:instruction integer_yank} {:instruction integer_min} {:instruction float_max} {:instruction integer_sub} {:instruction 9} {:instruction float_mult} {:instruction integer_stackdepth} {:instruction float_frominteger} {:instruction tag_float_196} {:instruction float_swap} {:instruction float_rot} {:instruction integer_add} {:instruction integer_max} {:instruction float_max} {:instruction integer_stackdepth} {:instruction float_add} {:instruction in2} {:instruction float_rot} {:instruction integer_add} {:instruction integer_max} {:instruction float_max} {:instruction integer_stackdepth} {:instruction float_add} {:instruction in2} {:instruction float_frominteger} {:instruction print_float} {:instruction integer_dup} {:instruction float_shove} {:instruction float_shove} {:instruction integer_inc} {:instruction float_mod} {:instruction integer_dup} {:instruction integer_dup_items} {:instruction print_integer} {:instruction integer_shove} {:instruction integer_yank} {:instruction print_integer} {:instruction integer_shove} {:instruction print_float} {:instruction integer_div} {:instruction integer_sub} {:instruction integer_fromfloat} {:instruction integer_mod} {:instruction print_integer} {:instruction integer_mult} {:instruction float_swap} {:instruction integer_stackdepth} {:instruction integer_stackdepth} {:instruction float_mod} {:instruction float_inc} {:instruction float_sub} {:instruction float_tan} {:instruction print_integer} {:instruction float_cos} {:instruction -51} {:instruction float_inc} {:instruction print_float} {:instruction integer_flush} {:instruction -73} {:instruction -51} {:instruction integer_dec} {:instruction float_sub} {:instruction float_tan})
Best program: (integer_inc float_add float_yank integer_dup float_min in2 integer_inc float_add float_yank integer_dup float_min in2 float_yankdup float_flush float_shove integer_sub float_dec float_tan integer_pop integer_mod float_dup_items integer_dec integer_div integer_min float_mod integer_shove integer_dup_times integer_swap integer_max float_sub 100 integer_dup_items float_yankdup float_rot float_rot integer_flush float_min print_integer float_add integer_pop float_yankdup print_float integer_pop 27 float_sub float_sub float_tan integer_yank integer_min float_max float_tan integer_yank integer_min float_max integer_sub 9 float_mult integer_stackdepth float_frominteger tag_float_196 float_swap float_rot integer_add integer_max float_max integer_stackdepth float_add in2 float_rot integer_add integer_max float_max integer_stackdepth float_add in2 float_frominteger print_float integer_dup float_shove float_shove integer_inc float_mod integer_dup integer_dup_items print_integer integer_shove integer_yank print_integer integer_shove print_float integer_div integer_sub integer_fromfloat integer_mod print_integer integer_mult float_swap integer_stackdepth integer_stackdepth float_mod float_inc float_sub float_tan print_integer float_cos -51 float_inc print_float integer_flush -73 -51 integer_dec float_sub float_tan)
Errors: [16.5677 9 6.0519 6 10.506 10 63.29 8 46.4786 9 27.3773 8 21.7659 10 62.2423 12 65.7283 11 19.35 7 66.3997 9 44.1628 9 91.2753 8 86.3488 10 73.351 11 39.0737 11 55.3057 10 90.0769 11 57.4296 10 21.0794 9 84.5969 10 9.4308 7 55.9558 10 20.9037 7 43.5424 10]
Total: 1410.2905
Mean: 28.20581
Genome size: 114
Size: 115
Percent parens: 0.009
--- Population Statistics ---
Average total errors in population: 4854.306695300002
Median total errors in population: 1410.2905
Error averages by case: (172.74575720000232 9.321 162.37533170000003 7.292 165.9592659999981 10.604 189.3054654000004 8.576 195.03721040000102 9.761 157.45150349999722 8.707 154.49331749999914 10.513 188.29839310000176 12.04 174.2159392999991 10.933 152.10147220000158 7.714 192.94415340000108 9.435 172.52538299999938 9.337 233.01162660000125 8.875 227.090874200003 10.56 177.02126509999846 11.183 178.49153330000001 11.324 181.2376320999988 10.442 209.4263989999965 11.027 208.33467140000124 10.364 150.39059199999997 8.748 225.70288390000164 10.3 167.0948296000008 7.921 206.53225689999869 10.417 175.04511939999867 8.009 193.73481910000197 10.336)
Error minima by case: (16.5441 7 6.0255 6 10.4824 9 38.3187 7 37.545 9 26.3517 7 21.7384 9 20.2178 8 1.0 6 1.3547 6 14.6011 8 7.1389 7 0.2234 7 4.6848 8 0.0 5 5.9499 8 24.2821 8 9.1005 8 57.4032 8 4.907 6 9.5359 8 9.4072 7 55.9294 8 20.8774 6 43.5161 8)
Average genome size in population (length): 106.676
Average program size in population (points): 107.676
Average percent parens in population: 0.009
Minimum age in population: 41.23761744052172
Maximum age in population: 46.06979633215815
Average age in population: 44.17829943387397
Median age in population: 44.22931067412719
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 4
Genome diversity (% unique Plush genomes):	 0.944
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 4
Syntactic diversity (% unique Push programs):	 0.944
Total error diversity:				 0.226
Error (vector) diversity:			 0.277
Behavioral diversity:				 0.277
--- Run Statistics ---
Number of program evaluations used so far: 32000
Number of point (instruction) evaluations so far: 67625956
--- Timings ---
Current time: 1529615282865 milliseconds
Total Time:         129.4 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        45.5 seconds, 35.1%
Fitness Testing:     65.7 seconds, 50.7%
Report:              18.1 seconds, 14.0%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 31
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 32
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 32
;;******************************
;; -*- Number IO problem report - generation 32
Test total error for best: 60026.23010000001
Test mean error for best: 30.01312
;;------------------------------
Outputs of best individual on training cases:
Correct output: -57.4559422311 | Program output: -74.023621    
Correct output: -71.0754923621 | Program output: -65.023621    
Correct output: -66.5176295557 | Program output: -77.023621    
Correct output: 149.3187378    | Program output: 86.028721     
Correct output: -36.5450493525 | Program output: -83.023621    
Correct output: 75.4021928097  | Program output: 48.024921     
Correct output: 52.2615929867  | Program output: 74.027521     
Correct output: -19.2178367434 | Program output: 43.024421     
Correct output: 66.7518906772  | Program output: 1.023621      
Correct output: 7.673605441    | Program output: 27.023621     
Correct output: 23.6294031682  | Program output: 90.029121     
Correct output: -6.1389033433  | Program output: 38.023921     
Correct output: 9.2516366816   | Program output: -82.023621    
Correct output: 31.3251776267  | Program output: -55.023621    
Correct output: 73.3746496408  | Program output: 0.023621      
Correct output: 20.0500553336  | Program output: -19.023621    
Correct output: -23.2820697498 | Program output: 32.023621     
Correct output: 120.1004999359 | Program output: 30.023621     
Correct output: -155.453212395 | Program output: -98.023621    
Correct output: 31.10301576    | Program output: 10.023621     
Correct output: 45.5733057121  | Program output: -39.023621    
Correct output: -68.592783645  | Program output: -78.023621    
Correct output: -125.979392023 | Program output: -70.023621    
Correct output: -91.9273649148 | Program output: -71.023621    
Correct output: -92.5660607267 | Program output: -49.023621    
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_yank} {:instruction integer_rot} {:instruction integer_inc} {:instruction float_add} {:instruction float_yank} {:instruction integer_dup} {:instruction float_min} {:instruction in2} {:instruction float_inc} {:instruction float_div} {:instruction integer_max} {:instruction float_inc} {:instruction float_dup} {:instruction float_mult} {:instruction float_sub} {:instruction integer_yank} {:instruction float_sub} {:instruction 100} {:instruction integer_dup_items} {:instruction float_yankdup} {:instruction float_rot} {:instruction float_rot} {:instruction integer_flush} {:instruction float_min} {:instruction print_integer} {:instruction float_add} {:instruction integer_pop} {:instruction float_yankdup} {:instruction print_float} {:instruction integer_pop} {:instruction 27} {:instruction float_sub} {:instruction float_sub} {:instruction float_tan} {:instruction integer_yank} {:instruction integer_min} {:instruction float_max} {:instruction integer_sub} {:instruction 9} {:instruction float_swap} {:instruction integer_stackdepth} {:instruction float_frominteger} {:instruction tag_float_196} {:instruction float_swap} {:instruction float_rot} {:instruction integer_add} {:instruction integer_max} {:instruction integer_fromfloat} {:instruction integer_stackdepth} {:instruction float_add} {:instruction in2} {:instruction float_mult} {:instruction integer_stackdepth} {:instruction float_frominteger} {:instruction tag_float_196} {:instruction float_swap} {:instruction float_rot} {:instruction integer_add} {:instruction integer_max} {:instruction float_max} {:instruction integer_stackdepth} {:instruction float_add} {:instruction in2} {:instruction float_frominteger} {:instruction print_float} {:instruction integer_dup} {:instruction float_shove} {:instruction float_shove} {:instruction integer_inc} {:instruction float_mod} {:instruction integer_dup} {:instruction integer_dup_items} {:instruction print_integer} {:instruction integer_shove} {:instruction integer_yank} {:instruction print_integer} {:instruction integer_shove} {:instruction print_float} {:instruction integer_div} {:instruction integer_sub} {:instruction integer_fromfloat} {:instruction integer_mod} {:instruction print_integer} {:instruction integer_mult} {:instruction integer_stackdepth} {:instruction tag_float_291} {:instruction integer_inc} {:instruction float_swap} {:instruction print_integer} {:instruction integer_mod} {:instruction float_div} {:instruction float_mod} {:instruction float_inc} {:instruction print_float} {:instruction integer_flush} {:instruction float_cos} {:instruction float_tan} {:instruction float_sub} {:instruction float_sin} {:instruction float_mod} {:instruction float_dup})
Best program: (float_yank integer_rot integer_inc float_add float_yank integer_dup float_min in2 float_inc float_div integer_max float_inc float_dup float_mult float_sub integer_yank float_sub 100 integer_dup_items float_yankdup float_rot float_rot integer_flush float_min print_integer float_add integer_pop float_yankdup print_float integer_pop 27 float_sub float_sub float_tan integer_yank integer_min float_max integer_sub 9 float_swap integer_stackdepth float_frominteger tag_float_196 float_swap float_rot integer_add integer_max integer_fromfloat integer_stackdepth float_add in2 float_mult integer_stackdepth float_frominteger tag_float_196 float_swap float_rot integer_add integer_max float_max integer_stackdepth float_add in2 float_frominteger print_float integer_dup float_shove float_shove integer_inc float_mod integer_dup integer_dup_items print_integer integer_shove integer_yank print_integer integer_shove print_float integer_div integer_sub integer_fromfloat integer_mod print_integer integer_mult integer_stackdepth tag_float_291 integer_inc float_swap print_integer integer_mod float_div float_mod float_inc print_float integer_flush float_cos float_tan float_sub float_sin float_mod float_dup)
Errors: [16.5677 9 6.0519 6 10.506 10 63.29 8 46.4786 9 27.3773 8 21.7659 10 62.2423 12 65.7283 11 19.35 7 66.3997 9 44.1628 9 91.2753 8 86.3488 10 73.351 11 39.0737 11 55.3057 10 90.0769 11 57.4296 10 21.0794 9 84.5969 10 9.4308 7 55.9558 10 20.9037 7 43.5424 10]
Total: 1410.2905
Mean: 28.20581
Genome size: 101
Size: 102
Percent parens: 0.010
--- Population Statistics ---
Average total errors in population: 5193.1821655
Median total errors in population: 1410.2905
Error averages by case: (191.8613544000027 9.328 184.32666719999926 7.266 187.135241699998 10.635 197.27574930000114 8.619 215.96744010000108 9.726 165.9229643999969 8.723 161.72680839999902 10.582 194.72711250000256 12.003 179.2616561999985 10.885 156.05192390000178 7.745 199.81605320000156 9.416 180.10767489999893 9.274 251.6256063000018 8.898 246.91609160000266 10.551 180.7427132999982 11.147 201.68686360000075 11.28 186.873161699999 10.421 214.9963996999966 10.978 227.49400110000119 10.384 157.06787209999916 8.713 245.17276200000148 10.282 186.31239380000073 7.932 225.36296029999872 10.405 196.68831519999836 8.031 214.50337860000198 10.335)
Error minima by case: (16.5441 7 3.0519 6 10.4824 9 36.7701 7 36.546 8 25.5978 7 16.2516 9 19.2188 8 1.0 6 3.3264 5 0.3706 8 6.1399 7 7.2516 7 4.6748 9 0.0 5 3.9499 9 23.2831 8 9.9369 7 54.4296 8 4.897 6 8.5733 9 9.4072 7 52.9558 8 17.9037 7 40.4439 9)
Average genome size in population (length): 106.34
Average program size in population (points): 107.34
Average percent parens in population: 0.009
Minimum age in population: 42.86070075631142
Maximum age in population: 47.66258673975244
Average age in population: 45.53251702728774
Median age in population: 45.57393900933675
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 4
Genome diversity (% unique Plush genomes):	 0.943
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 4
Syntactic diversity (% unique Push programs):	 0.943
Total error diversity:				 0.224
Error (vector) diversity:			 0.275
Behavioral diversity:				 0.275
--- Run Statistics ---
Number of program evaluations used so far: 33000
Number of point (instruction) evaluations so far: 70286356
--- Timings ---
Current time: 1529615287681 milliseconds
Total Time:         134.2 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        46.9 seconds, 35.0%
Fitness Testing:     68.4 seconds, 51.0%
Report:              18.7 seconds, 14.0%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 32
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 33
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 33
;;******************************
;; -*- Number IO problem report - generation 33
Test total error for best: 60026.23010000001
Test mean error for best: 30.01312
;;------------------------------
Outputs of best individual on training cases:
Correct output: -57.4559422311 | Program output: -74.023621    
Correct output: -71.0754923621 | Program output: -65.023621    
Correct output: -66.5176295557 | Program output: -77.023621    
Correct output: 149.3187378    | Program output: 86.028721     
Correct output: -36.5450493525 | Program output: -83.023621    
Correct output: 75.4021928097  | Program output: 48.024921     
Correct output: 52.2615929867  | Program output: 74.027521     
Correct output: -19.2178367434 | Program output: 43.024421     
Correct output: 66.7518906772  | Program output: 1.023621      
Correct output: 7.673605441    | Program output: 27.023621     
Correct output: 23.6294031682  | Program output: 90.029121     
Correct output: -6.1389033433  | Program output: 38.023921     
Correct output: 9.2516366816   | Program output: -82.023621    
Correct output: 31.3251776267  | Program output: -55.023621    
Correct output: 73.3746496408  | Program output: 0.023621      
Correct output: 20.0500553336  | Program output: -19.023621    
Correct output: -23.2820697498 | Program output: 32.023621     
Correct output: 120.1004999359 | Program output: 30.023621     
Correct output: -155.453212395 | Program output: -98.023621    
Correct output: 31.10301576    | Program output: 10.023621     
Correct output: 45.5733057121  | Program output: -39.023621    
Correct output: -68.592783645  | Program output: -78.023621    
Correct output: -125.979392023 | Program output: -70.023621    
Correct output: -91.9273649148 | Program output: -71.023621    
Correct output: -92.5660607267 | Program output: -49.023621    
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_inc} {:instruction float_yankdup} {:instruction float_flush} {:instruction float_shove} {:instruction integer_sub} {:instruction float_dec} {:instruction float_tan} {:instruction integer_pop} {:instruction float_sub} {:instruction integer_yank} {:instruction float_sub} {:instruction 100} {:instruction integer_dup_items} {:instruction integer_max} {:instruction float_inc} {:instruction float_dup} {:instruction float_mult} {:instruction float_sub} {:instruction integer_yank} {:instruction float_sub} {:instruction 100} {:instruction integer_dup_items} {:instruction float_add} {:instruction 99} {:instruction integer_dup_items} {:instruction float_yankdup} {:instruction float_rot} {:instruction float_rot} {:instruction integer_flush} {:instruction float_min} {:instruction print_integer} {:instruction float_add} {:instruction integer_pop} {:instruction float_yankdup} {:instruction float_div} {:instruction integer_pop} {:instruction 27} {:instruction float_sub} {:instruction float_sub} {:instruction float_inc} {:instruction integer_yank} {:instruction integer_min} {:instruction float_max} {:instruction integer_sub} {:instruction 9} {:instruction float_swap} {:instruction integer_stackdepth} {:instruction float_frominteger} {:instruction tag_float_196} {:instruction float_swap} {:instruction float_rot} {:instruction integer_add} {:instruction integer_max} {:instruction integer_fromfloat} {:instruction integer_stackdepth} {:instruction float_add} {:instruction in2} {:instruction float_rot} {:instruction integer_add} {:instruction integer_max} {:instruction float_max} {:instruction integer_stackdepth} {:instruction float_add} {:instruction in2} {:instruction float_frominteger} {:instruction print_float} {:instruction integer_dup} {:instruction float_shove} {:instruction float_shove} {:instruction integer_inc} {:instruction float_mod} {:instruction integer_dup} {:instruction integer_dup_items} {:instruction print_integer} {:instruction integer_shove} {:instruction integer_yank} {:instruction print_integer} {:instruction integer_shove} {:instruction print_float} {:instruction integer_div} {:instruction integer_sub} {:instruction integer_fromfloat} {:instruction integer_shove} {:instruction print_float} {:instruction integer_div} {:instruction integer_sub} {:instruction integer_fromfloat} {:instruction integer_mod} {:instruction print_integer} {:instruction integer_mult} {:instruction integer_stackdepth} {:instruction tag_float_291} {:instruction integer_inc} {:instruction float_swap} {:instruction print_integer} {:instruction integer_mod} {:instruction float_div} {:instruction float_mod} {:instruction float_inc} {:instruction print_float} {:instruction integer_flush} {:instruction float_cos} {:instruction -51} {:instruction integer_dec} {:instruction float_sub} {:instruction float_tan} {:instruction integer_dup_times} {:instruction integer_dup_times} {:instruction integer_yank})
Best program: (integer_inc float_yankdup float_flush float_shove integer_sub float_dec float_tan integer_pop float_sub integer_yank float_sub 100 integer_dup_items integer_max float_inc float_dup float_mult float_sub integer_yank float_sub 100 integer_dup_items float_add 99 integer_dup_items float_yankdup float_rot float_rot integer_flush float_min print_integer float_add integer_pop float_yankdup float_div integer_pop 27 float_sub float_sub float_inc integer_yank integer_min float_max integer_sub 9 float_swap integer_stackdepth float_frominteger tag_float_196 float_swap float_rot integer_add integer_max integer_fromfloat integer_stackdepth float_add in2 float_rot integer_add integer_max float_max integer_stackdepth float_add in2 float_frominteger print_float integer_dup float_shove float_shove integer_inc float_mod integer_dup integer_dup_items print_integer integer_shove integer_yank print_integer integer_shove print_float integer_div integer_sub integer_fromfloat integer_shove print_float integer_div integer_sub integer_fromfloat integer_mod print_integer integer_mult integer_stackdepth tag_float_291 integer_inc float_swap print_integer integer_mod float_div float_mod float_inc print_float integer_flush float_cos -51 integer_dec float_sub float_tan integer_dup_times integer_dup_times integer_yank)
Errors: [16.5677 9 6.0519 6 10.506 10 63.29 8 46.4786 9 27.3773 8 21.7659 10 62.2423 12 65.7283 11 19.35 7 66.3997 9 44.1628 9 91.2753 8 86.3488 10 73.351 11 39.0737 11 55.3057 10 90.0769 11 57.4296 10 21.0794 9 84.5969 10 9.4308 7 55.9558 10 20.9037 7 43.5424 10]
Total: 1410.2905
Mean: 28.20581
Genome size: 109
Size: 110
Percent parens: 0.009
--- Population Statistics ---
Average total errors in population: 5086.166497700003
Median total errors in population: 1410.2905
Error averages by case: (190.30171490000282 9.357 183.66478689999923 7.328 185.59047769999788 10.632 190.0606893000006 8.628 214.54861600000123 9.756 157.19349009999723 8.757 154.69273829999906 10.557 188.5098643000022 12.048 167.5197741999994 10.924 151.98656960000153 7.749 191.575463400001 9.433 172.67072529999948 9.332 250.3023726000015 8.906 245.43569840000296 10.558 169.99007409999848 11.155 192.64371010000062 11.327 184.15837589999884 10.469 211.27178759999677 11.039 227.18050250000118 10.408 152.52147429999957 8.719 241.70138750000186 10.296 183.783930900001 7.954 224.79598479999842 10.428 196.09527869999818 8.088 213.7350103000022 10.388)
Error minima by case: (16.5441 7 5.9883 6 10.4824 9 31.3187 7 37.545 8 26.3922 7 16.2516 9 19.2623 9 24.2694 7 1.3547 6 12.3806 8 6.1783 7 0.2234 8 4.6848 9 16.6466 6 11.0218 9 23.3154 8 2.1005 7 57.366 9 4.907 6 9.5633 8 9.4072 6 55.8922 8 20.8401 7 43.4788 8)
Average genome size in population (length): 105.627
Average program size in population (points): 106.627
Average percent parens in population: 0.009
Minimum age in population: 44.30980275571346
Maximum age in population: 49.05296127009206
Average age in population: 46.86139673357806
Median age in population: 46.89492854929995
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 4
Genome diversity (% unique Plush genomes):	 0.937
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 4
Syntactic diversity (% unique Push programs):	 0.937
Total error diversity:				 0.244
Error (vector) diversity:			 0.283
Behavioral diversity:				 0.283
--- Run Statistics ---
Number of program evaluations used so far: 34000
Number of point (instruction) evaluations so far: 72929006
--- Timings ---
Current time: 1529615291838 milliseconds
Total Time:         138.4 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        48.2 seconds, 34.8%
Fitness Testing:     70.7 seconds, 51.1%
Report:              19.4 seconds, 14.0%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 33
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 34
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 34
;;******************************
;; -*- Number IO problem report - generation 34
Test total error for best: 60026.23010000001
Test mean error for best: 30.01312
;;------------------------------
Outputs of best individual on training cases:
Correct output: -57.4559422311 | Program output: -74.023621    
Correct output: -71.0754923621 | Program output: -65.023621    
Correct output: -66.5176295557 | Program output: -77.023621    
Correct output: 149.3187378    | Program output: 86.028721     
Correct output: -36.5450493525 | Program output: -83.023621    
Correct output: 75.4021928097  | Program output: 48.024921     
Correct output: 52.2615929867  | Program output: 74.027521     
Correct output: -19.2178367434 | Program output: 43.024421     
Correct output: 66.7518906772  | Program output: 1.023621      
Correct output: 7.673605441    | Program output: 27.023621     
Correct output: 23.6294031682  | Program output: 90.029121     
Correct output: -6.1389033433  | Program output: 38.023921     
Correct output: 9.2516366816   | Program output: -82.023621    
Correct output: 31.3251776267  | Program output: -55.023621    
Correct output: 73.3746496408  | Program output: 0.023621      
Correct output: 20.0500553336  | Program output: -19.023621    
Correct output: -23.2820697498 | Program output: 32.023621     
Correct output: 120.1004999359 | Program output: 30.023621     
Correct output: -155.453212395 | Program output: -98.023621    
Correct output: 31.10301576    | Program output: 10.023621     
Correct output: 45.5733057121  | Program output: -39.023621    
Correct output: -68.592783645  | Program output: -78.023621    
Correct output: -125.979392023 | Program output: -70.023621    
Correct output: -91.9273649148 | Program output: -71.023621    
Correct output: -92.5660607267 | Program output: -49.023621    
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_dup} {:instruction float_min} {:instruction in2} {:instruction float_inc} {:instruction integer_dup} {:instruction float_min} {:instruction in2} {:instruction integer_stackdepth} {:instruction integer_min} {:instruction float_add} {:instruction integer_dup} {:instruction integer_dec} {:instruction integer_dec} {:instruction integer_yank} {:instruction float_tan} {:instruction integer_pop} {:instruction float_tan} {:instruction integer_pop} {:instruction integer_pop} {:instruction integer_mod} {:instruction float_dup_items} {:instruction integer_dec} {:instruction integer_dec} {:instruction integer_dup} {:instruction float_mult} {:instruction 100} {:instruction float_add} {:instruction integer_pop} {:instruction float_tan} {:instruction print_float} {:instruction print_float} {:instruction integer_pop} {:instruction 27} {:instruction float_sub} {:instruction float_sub} {:instruction float_tan} {:instruction integer_yank} {:instruction integer_min} {:instruction integer_min} {:instruction float_max} {:instruction integer_sub} {:instruction 9} {:instruction float_swap} {:instruction integer_stackdepth} {:instruction float_frominteger} {:instruction tag_float_196} {:instruction float_swap} {:instruction float_rot} {:instruction integer_add} {:instruction integer_max} {:instruction integer_fromfloat} {:instruction integer_stackdepth} {:instruction float_add} {:instruction in2} {:instruction float_mult} {:instruction integer_stackdepth} {:instruction float_frominteger} {:instruction tag_float_196} {:instruction float_swap} {:instruction float_rot} {:instruction integer_add} {:instruction integer_max} {:instruction float_max} {:instruction tag_float_196} {:instruction float_swap} {:instruction float_rot} {:instruction integer_add} {:instruction float_max} {:instruction integer_stackdepth} {:instruction float_add} {:instruction in2} {:instruction float_rot} {:instruction integer_add} {:instruction integer_max} {:instruction float_max} {:instruction float_max} {:instruction integer_stackdepth} {:instruction float_add} {:instruction in2} {:instruction float_frominteger} {:instruction print_float} {:instruction integer_dup} {:instruction float_shove} {:instruction float_shove} {:instruction integer_inc} {:instruction float_mod} {:instruction integer_dup} {:instruction integer_dup_items} {:instruction print_integer} {:instruction integer_shove} {:instruction integer_yank} {:instruction print_integer} {:instruction integer_shove} {:instruction integer_div} {:instruction integer_sub} {:instruction integer_fromfloat} {:instruction integer_mod} {:instruction print_integer} {:instruction integer_mult} {:instruction integer_stackdepth} {:instruction tag_float_291} {:instruction integer_inc} {:instruction float_swap} {:instruction print_integer} {:instruction integer_mod} {:instruction float_div} {:instruction float_mod} {:instruction float_inc} {:instruction print_float} {:instruction integer_flush} {:instruction float_cos} {:instruction -50} {:instruction integer_dec} {:instruction float_sub} {:instruction float_tan} {:instruction float_sub} {:instruction float_sin} {:instruction integer_yank})
Best program: (integer_dup float_min in2 float_inc integer_dup float_min in2 integer_stackdepth integer_min float_add integer_dup integer_dec integer_dec integer_yank float_tan integer_pop float_tan integer_pop integer_pop integer_mod float_dup_items integer_dec integer_dec integer_dup float_mult 100 float_add integer_pop float_tan print_float print_float integer_pop 27 float_sub float_sub float_tan integer_yank integer_min integer_min float_max integer_sub 9 float_swap integer_stackdepth float_frominteger tag_float_196 float_swap float_rot integer_add integer_max integer_fromfloat integer_stackdepth float_add in2 float_mult integer_stackdepth float_frominteger tag_float_196 float_swap float_rot integer_add integer_max float_max tag_float_196 float_swap float_rot integer_add float_max integer_stackdepth float_add in2 float_rot integer_add integer_max float_max float_max integer_stackdepth float_add in2 float_frominteger print_float integer_dup float_shove float_shove integer_inc float_mod integer_dup integer_dup_items print_integer integer_shove integer_yank print_integer integer_shove integer_div integer_sub integer_fromfloat integer_mod print_integer integer_mult integer_stackdepth tag_float_291 integer_inc float_swap print_integer integer_mod float_div float_mod float_inc print_float integer_flush float_cos -50 integer_dec float_sub float_tan float_sub float_sin integer_yank)
Errors: [16.5677 9 6.0519 6 10.506 10 63.29 8 46.4786 9 27.3773 8 21.7659 10 62.2423 12 65.7283 11 19.35 7 66.3997 9 44.1628 9 91.2753 8 86.3488 10 73.351 11 39.0737 11 55.3057 10 90.0769 11 57.4296 10 21.0794 9 84.5969 10 9.4308 7 55.9558 10 20.9037 7 43.5424 10]
Total: 1410.2905
Mean: 28.20581
Genome size: 118
Size: 119
Percent parens: 0.008
--- Population Statistics ---
Average total errors in population: 5305.896318100002
Median total errors in population: 1410.2905
Error averages by case: (199.5392156000028 9.322 191.27929249999934 7.334 194.83972089999793 10.624 199.37382470000074 8.597 223.50418570000107 9.749 167.22885879999728 8.757 164.07069079999908 10.532 193.02798230000198 12.012 181.2431997999986 10.904 158.10220630000168 7.749 202.2307614000012 9.391 182.08372409999907 9.329 258.7797183000013 8.865 254.72323770000276 10.544 184.45940929999833 11.184 202.4983191000005 11.294 188.99273819999894 10.444 218.83827959999653 11.027 233.59760850000112 10.382 159.37049099999942 8.7 253.34439400000153 10.261 193.94961660000087 7.945 232.01391449999858 10.421 203.44637699999828 8.071 221.55955140000208 10.361)
Error minima by case: (16.5441 7 6.0227 6 10.4824 9 36.7025 7 36.5581 8 26.3922 7 16.2516 9 19.2309 7 30.7419 5 4.6636 6 12.3706 8 6.152 6 6.2416 7 4.6748 8 27.6254 4 15.9499 7 23.2952 7 9.9261 6 55.5468 7 4.897 6 9.5633 8 9.4072 7 55.9266 7 20.8746 7 21.5661 7)
Average genome size in population (length): 104.969
Average program size in population (points): 105.969
Average percent parens in population: 0.010
Minimum age in population: 45.68492016941309
Maximum age in population: 50.09590674540959
Average age in population: 48.2120905622401
Median age in population: 48.28439578862162
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 4
Genome diversity (% unique Plush genomes):	 0.953
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 4
Syntactic diversity (% unique Push programs):	 0.953
Total error diversity:				 0.232
Error (vector) diversity:			 0.28
Behavioral diversity:				 0.28
--- Run Statistics ---
Number of program evaluations used so far: 35000
Number of point (instruction) evaluations so far: 75554931
--- Timings ---
Current time: 1529615296160 milliseconds
Total Time:         142.7 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        49.6 seconds, 34.7%
Fitness Testing:     73.0 seconds, 51.1%
Report:              20.0 seconds, 14.0%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 34
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 35
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 35
;;******************************
;; -*- Number IO problem report - generation 35
Test total error for best: 60026.23010000001
Test mean error for best: 30.01312
;;------------------------------
Outputs of best individual on training cases:
Correct output: -57.4559422311 | Program output: -74.023621    
Correct output: -71.0754923621 | Program output: -65.023621    
Correct output: -66.5176295557 | Program output: -77.023621    
Correct output: 149.3187378    | Program output: 86.028721     
Correct output: -36.5450493525 | Program output: -83.023621    
Correct output: 75.4021928097  | Program output: 48.024921     
Correct output: 52.2615929867  | Program output: 74.027521     
Correct output: -19.2178367434 | Program output: 43.024421     
Correct output: 66.7518906772  | Program output: 1.023621      
Correct output: 7.673605441    | Program output: 27.023621     
Correct output: 23.6294031682  | Program output: 90.029121     
Correct output: -6.1389033433  | Program output: 38.023921     
Correct output: 9.2516366816   | Program output: -82.023621    
Correct output: 31.3251776267  | Program output: -55.023621    
Correct output: 73.3746496408  | Program output: 0.023621      
Correct output: 20.0500553336  | Program output: -19.023621    
Correct output: -23.2820697498 | Program output: 32.023621     
Correct output: 120.1004999359 | Program output: 30.023621     
Correct output: -155.453212395 | Program output: -98.023621    
Correct output: 31.10301576    | Program output: 10.023621     
Correct output: 45.5733057121  | Program output: -39.023621    
Correct output: -68.592783645  | Program output: -78.023621    
Correct output: -125.979392023 | Program output: -70.023621    
Correct output: -91.9273649148 | Program output: -71.023621    
Correct output: -92.5660607267 | Program output: -49.023621    
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_yankdup} {:instruction print_integer} {:instruction float_min} {:instruction integer_pop} {:instruction float_dec} {:instruction -49} {:instruction float_yank} {:instruction integer_stackdepth} {:instruction integer_min} {:instruction float_add} {:instruction float_div} {:instruction integer_dec} {:instruction integer_dec} {:instruction integer_yank} {:instruction float_mult} {:instruction float_sub} {:instruction integer_yank} {:instruction float_dup_times} {:instruction 100} {:instruction integer_dup_items} {:instruction float_yankdup} {:instruction float_rot} {:instruction float_rot} {:instruction integer_yank} {:instruction float_sub} {:instruction 100} {:instruction integer_dup_items} {:instruction float_add} {:instruction 99} {:instruction integer_dup_items} {:instruction integer_mod} {:instruction integer_yankdup} {:instruction float_rot} {:instruction integer_flush} {:instruction float_min} {:instruction print_integer} {:instruction float_rot} {:instruction float_rot} {:instruction integer_flush} {:instruction float_min} {:instruction float_inc} {:instruction float_add} {:instruction integer_pop} {:instruction float_yankdup} {:instruction print_float} {:instruction integer_pop} {:instruction 27} {:instruction float_sub} {:instruction float_sub} {:instruction float_tan} {:instruction integer_yank} {:instruction integer_min} {:instruction float_max} {:instruction float_sub} {:instruction float_tan} {:instruction integer_yank} {:instruction integer_min} {:instruction float_max} {:instruction integer_sub} {:instruction 9} {:instruction float_swap} {:instruction integer_stackdepth} {:instruction float_frominteger} {:instruction tag_float_196} {:instruction float_swap} {:instruction float_rot} {:instruction integer_add} {:instruction integer_max} {:instruction integer_fromfloat} {:instruction integer_stackdepth} {:instruction float_add} {:instruction in2} {:instruction float_mult} {:instruction integer_stackdepth} {:instruction float_frominteger} {:instruction tag_float_196} {:instruction float_swap} {:instruction float_rot} {:instruction integer_add} {:instruction integer_max} {:instruction float_max} {:instruction integer_stackdepth} {:instruction float_add} {:instruction in2} {:instruction float_frominteger} {:instruction print_float} {:instruction integer_dup} {:instruction float_shove} {:instruction float_shove} {:instruction integer_inc} {:instruction float_mod} {:instruction integer_dup} {:instruction integer_dup_items} {:instruction print_integer} {:instruction integer_shove} {:instruction integer_yank} {:instruction print_integer} {:instruction integer_shove} {:instruction print_float} {:instruction integer_div} {:instruction integer_sub} {:instruction integer_fromfloat} {:instruction integer_mod} {:instruction print_integer} {:instruction integer_mult} {:instruction integer_stackdepth} {:instruction tag_float_291} {:instruction integer_inc} {:instruction float_swap} {:instruction print_integer} {:instruction integer_mod} {:instruction float_div} {:instruction float_mod} {:instruction float_inc} {:instruction print_float} {:instruction integer_swap} {:instruction float_cos})
Best program: (float_yankdup print_integer float_min integer_pop float_dec -49 float_yank integer_stackdepth integer_min float_add float_div integer_dec integer_dec integer_yank float_mult float_sub integer_yank float_dup_times 100 integer_dup_items float_yankdup float_rot float_rot integer_yank float_sub 100 integer_dup_items float_add 99 integer_dup_items integer_mod integer_yankdup float_rot integer_flush float_min print_integer float_rot float_rot integer_flush float_min float_inc float_add integer_pop float_yankdup print_float integer_pop 27 float_sub float_sub float_tan integer_yank integer_min float_max float_sub float_tan integer_yank integer_min float_max integer_sub 9 float_swap integer_stackdepth float_frominteger tag_float_196 float_swap float_rot integer_add integer_max integer_fromfloat integer_stackdepth float_add in2 float_mult integer_stackdepth float_frominteger tag_float_196 float_swap float_rot integer_add integer_max float_max integer_stackdepth float_add in2 float_frominteger print_float integer_dup float_shove float_shove integer_inc float_mod integer_dup integer_dup_items print_integer integer_shove integer_yank print_integer integer_shove print_float integer_div integer_sub integer_fromfloat integer_mod print_integer integer_mult integer_stackdepth tag_float_291 integer_inc float_swap print_integer integer_mod float_div float_mod float_inc print_float integer_swap float_cos)
Errors: [16.5677 9 6.0519 6 10.506 10 63.29 8 46.4786 9 27.3773 8 21.7659 10 62.2423 12 65.7283 11 19.35 7 66.3997 9 44.1628 9 91.2753 8 86.3488 10 73.351 11 39.0737 11 55.3057 10 90.0769 11 57.4296 10 21.0794 9 84.5969 10 9.4308 7 55.9558 10 20.9037 7 43.5424 10]
Total: 1410.2905
Mean: 28.20581
Genome size: 117
Size: 118
Percent parens: 0.008
--- Population Statistics ---
Average total errors in population: 5147.758614700001
Median total errors in population: 1410.2905
Error averages by case: (186.01835160000252 9.33 180.33509359999945 7.27 181.19586839999792 10.63 194.07060130000067 8.628 210.12389350000134 9.713 162.9025228999969 8.731 161.81284049999897 10.547 197.39990650000243 12.005 181.71255209999862 10.906 161.18584880000188 7.741 199.02305890000153 9.403 181.09654569999896 9.297 246.18346790000157 8.909 242.33741220000303 10.554 186.2416397999983 11.135 195.06965000000042 11.284 190.70552559999896 10.448 217.05135999999666 10.999 223.19162470000114 10.385 160.01416149999903 8.716 241.02359850000158 10.272 180.1665599000011 7.95 221.5822652999985 10.388 192.64499369999834 8.039 211.03527180000225 10.354)
Error minima by case: (16.5451 7 5.9845 6 10.4834 9 36.7025 6 35.9578 8 15.5978 6 21.7394 9 18.6306 6 24.2481 5 3.3264 5 12.6294 8 5.5517 6 3.7845 5 18.2891 6 17.6254 4 7.014 5 22.6949 6 9.9261 5 57.3622 6 20.103 5 32.5372 6 9.4082 7 33.1791 6 0.8729 6 0.2342 6)
Average genome size in population (length): 105.535
Average program size in population (points): 106.535
Average percent parens in population: 0.009
Minimum age in population: 47.12771759927273
Maximum age in population: 51.65254056639969
Average age in population: 49.62967327779019
Median age in population: 49.65910918463487
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 4
Genome diversity (% unique Plush genomes):	 0.945
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 4
Syntactic diversity (% unique Push programs):	 0.945
Total error diversity:				 0.238
Error (vector) diversity:			 0.288
Behavioral diversity:				 0.288
--- Run Statistics ---
Number of program evaluations used so far: 36000
Number of point (instruction) evaluations so far: 78195181
--- Timings ---
Current time: 1529615300886 milliseconds
Total Time:         147.2 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        51.0 seconds, 34.6%
Fitness Testing:     75.5 seconds, 51.3%
Report:              20.6 seconds, 14.0%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 35
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 36
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 36
;;******************************
;; -*- Number IO problem report - generation 36
Test total error for best: 60026.23010000001
Test mean error for best: 30.01312
;;------------------------------
Outputs of best individual on training cases:
Correct output: -57.4559422311 | Program output: -74.023621    
Correct output: -71.0754923621 | Program output: -65.023621    
Correct output: -66.5176295557 | Program output: -77.023621    
Correct output: 149.3187378    | Program output: 86.028721     
Correct output: -36.5450493525 | Program output: -83.023621    
Correct output: 75.4021928097  | Program output: 48.024921     
Correct output: 52.2615929867  | Program output: 74.027521     
Correct output: -19.2178367434 | Program output: 43.024421     
Correct output: 66.7518906772  | Program output: 1.023621      
Correct output: 7.673605441    | Program output: 27.023621     
Correct output: 23.6294031682  | Program output: 90.029121     
Correct output: -6.1389033433  | Program output: 38.023921     
Correct output: 9.2516366816   | Program output: -82.023621    
Correct output: 31.3251776267  | Program output: -55.023621    
Correct output: 73.3746496408  | Program output: 0.023621      
Correct output: 20.0500553336  | Program output: -19.023621    
Correct output: -23.2820697498 | Program output: 32.023621     
Correct output: 120.1004999359 | Program output: 30.023621     
Correct output: -155.453212395 | Program output: -98.023621    
Correct output: 31.10301576    | Program output: 10.023621     
Correct output: 45.5733057121  | Program output: -39.023621    
Correct output: -68.592783645  | Program output: -78.023621    
Correct output: -125.979392023 | Program output: -70.023621    
Correct output: -91.9273649148 | Program output: -71.023621    
Correct output: -92.5660607267 | Program output: -49.023621    
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_inc} {:instruction tagged_699} {:instruction float_yank} {:instruction integer_stackdepth} {:instruction integer_min} {:instruction float_sub} {:instruction integer_dup} {:instruction float_mult} {:instruction float_sub} {:instruction integer_mod} {:instruction float_dup_items} {:instruction integer_dec} {:instruction float_yankdup} {:instruction float_rot} {:instruction float_rot} {:instruction integer_flush} {:instruction float_min} {:instruction print_integer} {:instruction float_add} {:instruction integer_pop} {:instruction float_yankdup} {:instruction print_float} {:instruction integer_dup} {:instruction float_sub} {:instruction 100} {:instruction integer_dup_items} {:instruction float_add} {:instruction 27} {:instruction float_pop} {:instruction integer_flush} {:instruction integer_pop} {:instruction 27} {:instruction float_pop} {:instruction integer_flush} {:instruction integer_pop} {:instruction float_min} {:instruction print_integer} {:instruction float_add} {:instruction float_tan} {:instruction print_float} {:instruction integer_pop} {:instruction 27} {:instruction float_sub} {:instruction float_sub} {:instruction float_tan} {:instruction integer_yank} {:instruction integer_min} {:instruction float_max} {:instruction integer_sub} {:instruction 9} {:instruction float_mult} {:instruction integer_stackdepth} {:instruction float_frominteger} {:instruction tag_float_196} {:instruction float_swap} {:instruction float_rot} {:instruction integer_add} {:instruction integer_stackdepth} {:instruction float_add} {:instruction in2} {:instruction float_mult} {:instruction integer_stackdepth} {:instruction float_frominteger} {:instruction tag_float_196} {:instruction float_swap} {:instruction float_rot} {:instruction integer_add} {:instruction integer_max} {:instruction float_max} {:instruction integer_stackdepth} {:instruction float_add} {:instruction in2} {:instruction float_frominteger} {:instruction print_float} {:instruction integer_dup} {:instruction float_shove} {:instruction float_shove} {:instruction integer_inc} {:instruction float_mod} {:instruction integer_dup} {:instruction integer_dup_items} {:instruction print_integer} {:instruction integer_shove} {:instruction integer_yank} {:instruction print_integer} {:instruction integer_shove} {:instruction print_float} {:instruction integer_div} {:instruction integer_sub} {:instruction float_sub} {:instruction integer_mod} {:instruction print_integer} {:instruction integer_mult} {:instruction integer_stackdepth} {:instruction tag_float_291} {:instruction integer_inc} {:instruction float_swap} {:instruction print_integer} {:instruction print_integer} {:instruction integer_mod} {:instruction float_div} {:instruction float_mod} {:instruction float_inc} {:instruction print_float} {:instruction integer_flush} {:instruction float_cos})
Best program: (integer_inc tagged_699 float_yank integer_stackdepth integer_min float_sub integer_dup float_mult float_sub integer_mod float_dup_items integer_dec float_yankdup float_rot float_rot integer_flush float_min print_integer float_add integer_pop float_yankdup print_float integer_dup float_sub 100 integer_dup_items float_add 27 float_pop integer_flush integer_pop 27 float_pop integer_flush integer_pop float_min print_integer float_add float_tan print_float integer_pop 27 float_sub float_sub float_tan integer_yank integer_min float_max integer_sub 9 float_mult integer_stackdepth float_frominteger tag_float_196 float_swap float_rot integer_add integer_stackdepth float_add in2 float_mult integer_stackdepth float_frominteger tag_float_196 float_swap float_rot integer_add integer_max float_max integer_stackdepth float_add in2 float_frominteger print_float integer_dup float_shove float_shove integer_inc float_mod integer_dup integer_dup_items print_integer integer_shove integer_yank print_integer integer_shove print_float integer_div integer_sub float_sub integer_mod print_integer integer_mult integer_stackdepth tag_float_291 integer_inc float_swap print_integer print_integer integer_mod float_div float_mod float_inc print_float integer_flush float_cos)
Errors: [16.5677 9 6.0519 6 10.506 10 63.29 8 46.4786 9 27.3773 8 21.7659 10 62.2423 12 65.7283 11 19.35 7 66.3997 9 44.1628 9 91.2753 8 86.3488 10 73.351 11 39.0737 11 55.3057 10 90.0769 11 57.4296 10 21.0794 9 84.5969 10 9.4308 7 55.9558 10 20.9037 7 43.5424 10]
Total: 1410.2905
Mean: 28.20581
Genome size: 106
Size: 107
Percent parens: 0.009
--- Population Statistics ---
Average total errors in population: 4682.624997800003
Median total errors in population: 1410.2905
Error averages by case: (164.47588070000103 9.299 156.8469395000008 7.207 159.52304049999782 10.579 183.67383209999988 8.52 189.24846350000152 9.682 151.04766359999695 8.706 148.22220409999903 10.533 182.01349800000145 11.993 161.96700339999995 10.897 142.55131500000178 7.658 187.2309385000004 9.408 166.07693680000017 9.262 226.26028530000158 8.782 222.13192100000288 10.493 167.45154649999802 11.133 173.86702889999933 11.271 173.88733929999887 10.407 202.75883139999743 11.01 201.0313595000014 10.326 142.9144783000004 8.705 220.69807690000175 10.229 158.6510794000011 7.842 199.3851573999985 10.401 169.5698380999983 7.95 188.5273401000021 10.32)
Error minima by case: (16.5441 7 5.9931 6 10.4824 9 36.6927 7 37.545 8 24.3922 7 16.2516 9 20.2178 5 24.2699 7 5.6736 6 12.3806 8 7.1389 5 7.2516 5 4.6848 5 16.649 7 15.9599 5 24.2821 5 9.9581 8 57.3709 9 4.907 6 7.5633 5 9.4072 7 55.897 9 20.845 7 43.4837 8)
Average genome size in population (length): 105.595
Average program size in population (points): 106.595
Average percent parens in population: 0.009
Minimum age in population: 48.41177796781994
Maximum age in population: 52.88761517245439
Average age in population: 50.9725290586901
Median age in population: 51.0132001669117
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 5
Genome diversity (% unique Plush genomes):	 0.928
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 5
Syntactic diversity (% unique Push programs):	 0.928
Total error diversity:				 0.222
Error (vector) diversity:			 0.257
Behavioral diversity:				 0.257
--- Run Statistics ---
Number of program evaluations used so far: 37000
Number of point (instruction) evaluations so far: 80836781
--- Timings ---
Current time: 1529615305104 milliseconds
Total Time:         151.6 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        52.3 seconds, 34.5%
Fitness Testing:     77.8 seconds, 51.3%
Report:              21.4 seconds, 14.1%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 36
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 37
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 37
;;******************************
;; -*- Number IO problem report - generation 37
Test total error for best: 60026.23010000001
Test mean error for best: 30.01312
;;------------------------------
Outputs of best individual on training cases:
Correct output: -57.4559422311 | Program output: -74.023621    
Correct output: -71.0754923621 | Program output: -65.023621    
Correct output: -66.5176295557 | Program output: -77.023621    
Correct output: 149.3187378    | Program output: 86.028721     
Correct output: -36.5450493525 | Program output: -83.023621    
Correct output: 75.4021928097  | Program output: 48.024921     
Correct output: 52.2615929867  | Program output: 74.027521     
Correct output: -19.2178367434 | Program output: 43.024421     
Correct output: 66.7518906772  | Program output: 1.023621      
Correct output: 7.673605441    | Program output: 27.023621     
Correct output: 23.6294031682  | Program output: 90.029121     
Correct output: -6.1389033433  | Program output: 38.023921     
Correct output: 9.2516366816   | Program output: -82.023621    
Correct output: 31.3251776267  | Program output: -55.023621    
Correct output: 73.3746496408  | Program output: 0.023621      
Correct output: 20.0500553336  | Program output: -19.023621    
Correct output: -23.2820697498 | Program output: 32.023621     
Correct output: 120.1004999359 | Program output: 30.023621     
Correct output: -155.453212395 | Program output: -98.023621    
Correct output: 31.10301576    | Program output: 10.023621     
Correct output: 45.5733057121  | Program output: -39.023621    
Correct output: -68.592783645  | Program output: -78.023621    
Correct output: -125.979392023 | Program output: -70.023621    
Correct output: -91.9273649148 | Program output: -71.023621    
Correct output: -92.5660607267 | Program output: -49.023621    
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_yankdup} {:instruction float_add} {:instruction integer_dec} {:instruction float_mult} {:instruction integer_flush} {:instruction integer_pop} {:instruction integer_yank} {:instruction float_sub} {:instruction 100} {:instruction float_max} {:instruction float_add} {:instruction 99} {:instruction integer_dup_items} {:instruction float_yankdup} {:instruction float_rot} {:instruction float_rot} {:instruction integer_flush} {:instruction float_min} {:instruction print_integer} {:instruction float_add} {:instruction integer_pop} {:instruction float_swap} {:instruction print_float} {:instruction integer_pop} {:instruction float_min} {:instruction print_integer} {:instruction float_add} {:instruction integer_pop} {:instruction float_yankdup} {:instruction integer_dup_items} {:instruction integer_pop} {:instruction 27} {:instruction float_add} {:instruction float_sub} {:instruction float_tan} {:instruction integer_yank} {:instruction integer_min} {:instruction float_max} {:instruction integer_sub} {:instruction 9} {:instruction float_swap} {:instruction integer_stackdepth} {:instruction float_frominteger} {:instruction tag_float_196} {:instruction float_swap} {:instruction float_rot} {:instruction integer_add} {:instruction integer_max} {:instruction integer_fromfloat} {:instruction integer_stackdepth} {:instruction float_dup} {:instruction in2} {:instruction float_mult} {:instruction integer_stackdepth} {:instruction float_frominteger} {:instruction tag_float_196} {:instruction float_swap} {:instruction float_tan} {:instruction integer_add} {:instruction integer_max} {:instruction float_max} {:instruction integer_stackdepth} {:instruction float_add} {:instruction in2} {:instruction float_frominteger} {:instruction print_float} {:instruction integer_dup} {:instruction float_shove} {:instruction float_mult} {:instruction integer_inc} {:instruction float_mod} {:instruction integer_dup} {:instruction integer_dup_items} {:instruction print_integer} {:instruction integer_shove} {:instruction integer_yank} {:instruction print_integer} {:instruction integer_shove} {:instruction print_float} {:instruction integer_div} {:instruction integer_sub} {:instruction integer_shove} {:instruction integer_yank} {:instruction print_integer} {:instruction integer_div} {:instruction integer_sub} {:instruction integer_fromfloat} {:instruction integer_mod} {:instruction print_integer} {:instruction integer_mult} {:instruction integer_stackdepth} {:instruction tag_float_291} {:instruction integer_inc} {:instruction float_swap} {:instruction print_integer} {:instruction integer_mod} {:instruction integer_pop} {:instruction float_mod} {:instruction float_inc} {:instruction print_float} {:instruction integer_flush} {:instruction float_cos} {:instruction -51} {:instruction integer_dec} {:instruction float_sub} {:instruction float_tan} {:instruction float_sub} {:instruction float_sin} {:instruction integer_yank})
Best program: (integer_yankdup float_add integer_dec float_mult integer_flush integer_pop integer_yank float_sub 100 float_max float_add 99 integer_dup_items float_yankdup float_rot float_rot integer_flush float_min print_integer float_add integer_pop float_swap print_float integer_pop float_min print_integer float_add integer_pop float_yankdup integer_dup_items integer_pop 27 float_add float_sub float_tan integer_yank integer_min float_max integer_sub 9 float_swap integer_stackdepth float_frominteger tag_float_196 float_swap float_rot integer_add integer_max integer_fromfloat integer_stackdepth float_dup in2 float_mult integer_stackdepth float_frominteger tag_float_196 float_swap float_tan integer_add integer_max float_max integer_stackdepth float_add in2 float_frominteger print_float integer_dup float_shove float_mult integer_inc float_mod integer_dup integer_dup_items print_integer integer_shove integer_yank print_integer integer_shove print_float integer_div integer_sub integer_shove integer_yank print_integer integer_div integer_sub integer_fromfloat integer_mod print_integer integer_mult integer_stackdepth tag_float_291 integer_inc float_swap print_integer integer_mod integer_pop float_mod float_inc print_float integer_flush float_cos -51 integer_dec float_sub float_tan float_sub float_sin integer_yank)
Errors: [16.5677 9 6.0519 6 10.506 10 63.29 8 46.4786 9 27.3773 8 21.7659 10 62.2423 12 65.7283 11 19.35 7 66.3997 9 44.1628 9 91.2753 8 86.3488 10 73.351 11 39.0737 11 55.3057 10 90.0769 11 57.4296 10 21.0794 9 84.5969 10 9.4308 7 55.9558 10 20.9037 7 43.5424 10]
Total: 1410.2905
Mean: 28.20581
Genome size: 109
Size: 110
Percent parens: 0.009
--- Population Statistics ---
Average total errors in population: 5542.301460800003
Median total errors in population: 1411.2905
Error averages by case: (206.6323451000027 9.376 199.12836669999922 7.41 201.99091129999778 10.662 209.1263385000009 8.715 230.46340190000134 9.833 178.1956338999969 8.777 174.63321709999903 10.56 207.7780998000025 12.058 188.48719479999863 10.884 173.9484846000018 7.859 210.6174851000014 9.459 192.52586479999889 9.358 265.71385950000155 9.033 261.1873476000029 10.622 194.30240549999814 11.204 213.24018680000074 11.382 203.009176199999 10.5 231.2242326999962 11.044 241.62029000000126 10.446 173.27329649999885 8.752 259.4808813000016 10.336 201.18588270000106 8.039 239.34629419999857 10.467 211.27352639999813 8.176 228.57173780000218 10.393)
Error minima by case: (16.5441 7 6.0244 6 10.4824 9 36.6913 7 37.545 8 25.3739 7 15.2616 8 20.2178 9 24.2481 8 4.7887 6 12.6294 8 7.1389 7 1.7766 8 4.6748 9 16.6254 7 9.0218 9 24.2821 9 9.1005 9 57.4021 9 4.897 6 8.5733 8 9.4072 7 55.9283 9 20.8762 7 38.4339 9)
Average genome size in population (length): 105.874
Average program size in population (points): 106.874
Average percent parens in population: 0.009
Minimum age in population: 49.8006294190418
Maximum age in population: 54.48124579871364
Average age in population: 52.36024651955992
Median age in population: 52.40461634239182
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 4
Genome diversity (% unique Plush genomes):	 0.945
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 4
Syntactic diversity (% unique Push programs):	 0.945
Total error diversity:				 0.246
Error (vector) diversity:			 0.302
Behavioral diversity:				 0.303
--- Run Statistics ---
Number of program evaluations used so far: 38000
Number of point (instruction) evaluations so far: 83485331
--- Timings ---
Current time: 1529615309947 milliseconds
Total Time:         156.3 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        53.9 seconds, 34.5%
Fitness Testing:     80.3 seconds, 51.4%
Report:              22.1 seconds, 14.1%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 37
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 38
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 38
;;******************************
;; -*- Number IO problem report - generation 38
Test total error for best: 60026.23010000001
Test mean error for best: 30.01312
;;------------------------------
Outputs of best individual on training cases:
Correct output: -57.4559422311 | Program output: -74.023621    
Correct output: -71.0754923621 | Program output: -65.023621    
Correct output: -66.5176295557 | Program output: -77.023621    
Correct output: 149.3187378    | Program output: 86.028721     
Correct output: -36.5450493525 | Program output: -83.023621    
Correct output: 75.4021928097  | Program output: 48.024921     
Correct output: 52.2615929867  | Program output: 74.027521     
Correct output: -19.2178367434 | Program output: 43.024421     
Correct output: 66.7518906772  | Program output: 1.023621      
Correct output: 7.673605441    | Program output: 27.023621     
Correct output: 23.6294031682  | Program output: 90.029121     
Correct output: -6.1389033433  | Program output: 38.023921     
Correct output: 9.2516366816   | Program output: -82.023621    
Correct output: 31.3251776267  | Program output: -55.023621    
Correct output: 73.3746496408  | Program output: 0.023621      
Correct output: 20.0500553336  | Program output: -19.023621    
Correct output: -23.2820697498 | Program output: 32.023621     
Correct output: 120.1004999359 | Program output: 30.023621     
Correct output: -155.453212395 | Program output: -98.023621    
Correct output: 31.10301576    | Program output: 10.023621     
Correct output: 45.5733057121  | Program output: -39.023621    
Correct output: -68.592783645  | Program output: -78.023621    
Correct output: -125.979392023 | Program output: -70.023621    
Correct output: -91.9273649148 | Program output: -71.023621    
Correct output: -92.5660607267 | Program output: -49.023621    
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_yank} {:instruction integer_flush} {:instruction integer_stackdepth} {:instruction float_yankdup} {:instruction float_dup_items} {:instruction float_shove} {:instruction integer_sub} {:instruction float_dec} {:instruction float_tan} {:instruction float_add} {:instruction integer_mod} {:instruction float_dup_items} {:instruction integer_add} {:instruction integer_yankdup} {:instruction float_rot} {:instruction integer_flush} {:instruction float_min} {:instruction print_integer} {:instruction float_rot} {:instruction in2} {:instruction integer_flush} {:instruction float_min} {:instruction float_inc} {:instruction float_add} {:instruction integer_pop} {:instruction float_yankdup} {:instruction print_float} {:instruction integer_pop} {:instruction 27} {:instruction float_sub} {:instruction float_sub} {:instruction float_tan} {:instruction integer_yank} {:instruction integer_min} {:instruction float_max} {:instruction integer_sub} {:instruction 9} {:instruction float_swap} {:instruction integer_stackdepth} {:instruction float_frominteger} {:instruction tag_float_196} {:instruction float_swap} {:instruction float_rot} {:instruction integer_add} {:instruction integer_max} {:instruction integer_fromfloat} {:instruction integer_stackdepth} {:instruction float_add} {:instruction in2} {:instruction float_mult} {:instruction integer_stackdepth} {:instruction float_frominteger} {:instruction tag_float_196} {:instruction float_swap} {:instruction float_rot} {:instruction integer_add} {:instruction integer_max} {:instruction float_max} {:instruction integer_stackdepth} {:instruction float_add} {:instruction in2} {:instruction float_frominteger} {:instruction print_float} {:instruction integer_dup} {:instruction float_shove} {:instruction float_shove} {:instruction integer_inc} {:instruction float_mod} {:instruction integer_dup} {:instruction integer_dup_items} {:instruction print_integer} {:instruction integer_shove} {:instruction integer_yank} {:instruction print_integer} {:instruction integer_shove} {:instruction print_float} {:instruction float_shove} {:instruction integer_sub} {:instruction integer_fromfloat} {:instruction integer_mod} {:instruction print_integer} {:instruction integer_mult} {:instruction integer_stackdepth} {:instruction tag_float_291} {:instruction integer_inc} {:instruction float_swap} {:instruction print_integer} {:instruction integer_mod} {:instruction float_sub} {:instruction tagged_192} {:instruction integer_yank} {:instruction float_tan})
Best program: (float_yank integer_flush integer_stackdepth float_yankdup float_dup_items float_shove integer_sub float_dec float_tan float_add integer_mod float_dup_items integer_add integer_yankdup float_rot integer_flush float_min print_integer float_rot in2 integer_flush float_min float_inc float_add integer_pop float_yankdup print_float integer_pop 27 float_sub float_sub float_tan integer_yank integer_min float_max integer_sub 9 float_swap integer_stackdepth float_frominteger tag_float_196 float_swap float_rot integer_add integer_max integer_fromfloat integer_stackdepth float_add in2 float_mult integer_stackdepth float_frominteger tag_float_196 float_swap float_rot integer_add integer_max float_max integer_stackdepth float_add in2 float_frominteger print_float integer_dup float_shove float_shove integer_inc float_mod integer_dup integer_dup_items print_integer integer_shove integer_yank print_integer integer_shove print_float float_shove integer_sub integer_fromfloat integer_mod print_integer integer_mult integer_stackdepth tag_float_291 integer_inc float_swap print_integer integer_mod float_sub tagged_192 integer_yank float_tan)
Errors: [16.5677 9 6.0519 6 10.506 10 63.29 8 46.4786 9 27.3773 8 21.7659 10 62.2423 12 65.7283 11 19.35 7 66.3997 9 44.1628 9 91.2753 8 86.3488 10 73.351 11 39.0737 11 55.3057 10 90.0769 11 57.4296 10 21.0794 9 84.5969 10 9.4308 7 55.9558 10 20.9037 7 43.5424 10]
Total: 1410.2905
Mean: 28.20581
Genome size: 92
Size: 93
Percent parens: 0.011
--- Population Statistics ---
Average total errors in population: 5067.624789
Median total errors in population: 1410.2905
Error averages by case: (187.2798535000023 9.319 178.65919539999982 7.264 182.57461779999795 10.617 192.6367137000006 8.601 211.54475250000095 9.763 162.4855471999968 8.68 156.6083775999992 10.512 187.23154980000191 12.05 169.6518310999992 10.905 151.3827546000017 7.776 195.18330030000126 9.426 175.45493119999966 9.349 247.39060280000146 8.925 242.66858730000288 10.541 174.8819746999983 11.195 189.8649734000001 11.34 184.22250939999887 10.452 214.0575659999965 11.044 222.31172960000117 10.4 155.61267109999963 8.76 239.98416340000153 10.297 181.76061060000083 7.936 220.09981679999876 10.416 191.19079659999835 8.046 208.922362600002 10.349)
Error minima by case: (16.5451 7 5.0519 6 10.4834 9 36.7684 6 36.5678 8 25.3739 7 16.2516 9 19.2422 9 25.2481 7 4.3264 6 1.6294 8 6.1628 7 6.2205 7 4.6748 9 28.6254 6 15.9499 9 23.3054 9 9.1005 9 56.4296 9 4.897 6 9.5633 8 9.4082 7 54.9558 9 19.9037 6 42.5424 9)
Average genome size in population (length): 105.779
Average program size in population (points): 106.779
Average percent parens in population: 0.009
Minimum age in population: 50.8006294190418
Maximum age in population: 55.79775608736963
Average age in population: 53.6884807843716
Median age in population: 53.73875450281048
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 6
Genome diversity (% unique Plush genomes):	 0.927
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 6
Syntactic diversity (% unique Push programs):	 0.927
Total error diversity:				 0.25
Error (vector) diversity:			 0.291
Behavioral diversity:				 0.292
--- Run Statistics ---
Number of program evaluations used so far: 39000
Number of point (instruction) evaluations so far: 86131331
--- Timings ---
Current time: 1529615314176 milliseconds
Total Time:         160.7 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        55.2 seconds, 34.3%
Fitness Testing:     82.6 seconds, 51.4%
Report:              22.8 seconds, 14.2%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 38
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 39
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 39
;;******************************
;; -*- Number IO problem report - generation 39
Test total error for best: 60026.23010000001
Test mean error for best: 30.01312
;;------------------------------
Outputs of best individual on training cases:
Correct output: -57.4559422311 | Program output: -74.023621    
Correct output: -71.0754923621 | Program output: -65.023621    
Correct output: -66.5176295557 | Program output: -77.023621    
Correct output: 149.3187378    | Program output: 86.028721     
Correct output: -36.5450493525 | Program output: -83.023621    
Correct output: 75.4021928097  | Program output: 48.024921     
Correct output: 52.2615929867  | Program output: 74.027521     
Correct output: -19.2178367434 | Program output: 43.024421     
Correct output: 66.7518906772  | Program output: 1.023621      
Correct output: 7.673605441    | Program output: 27.023621     
Correct output: 23.6294031682  | Program output: 90.029121     
Correct output: -6.1389033433  | Program output: 38.023921     
Correct output: 9.2516366816   | Program output: -82.023621    
Correct output: 31.3251776267  | Program output: -55.023621    
Correct output: 73.3746496408  | Program output: 0.023621      
Correct output: 20.0500553336  | Program output: -19.023621    
Correct output: -23.2820697498 | Program output: 32.023621     
Correct output: 120.1004999359 | Program output: 30.023621     
Correct output: -155.453212395 | Program output: -98.023621    
Correct output: 31.10301576    | Program output: 10.023621     
Correct output: 45.5733057121  | Program output: -39.023621    
Correct output: -68.592783645  | Program output: -78.023621    
Correct output: -125.979392023 | Program output: -70.023621    
Correct output: -91.9273649148 | Program output: -71.023621    
Correct output: -92.5660607267 | Program output: -49.023621    
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_yank} {:instruction integer_rot} {:instruction integer_stackdepth} {:instruction float_yankdup} {:instruction float_flush} {:instruction float_shove} {:instruction integer_sub} {:instruction float_dec} {:instruction float_tan} {:instruction integer_pop} {:instruction float_sub} {:instruction integer_yank} {:instruction float_sub} {:instruction 100} {:instruction integer_dup_items} {:instruction integer_max} {:instruction float_inc} {:instruction float_dup} {:instruction float_mult} {:instruction float_sub} {:instruction integer_yank} {:instruction float_sub} {:instruction 100} {:instruction integer_dup_items} {:instruction float_add} {:instruction 99} {:instruction integer_dup_items} {:instruction float_yankdup} {:instruction float_rot} {:instruction float_rot} {:instruction integer_flush} {:instruction float_min} {:instruction print_integer} {:instruction float_add} {:instruction integer_pop} {:instruction float_yankdup} {:instruction print_float} {:instruction integer_pop} {:instruction 27} {:instruction float_sub} {:instruction float_sub} {:instruction float_inc} {:instruction integer_yank} {:instruction integer_min} {:instruction float_max} {:instruction integer_sub} {:instruction 9} {:instruction float_flush} {:instruction integer_stackdepth} {:instruction float_frominteger} {:instruction tag_float_196} {:instruction float_swap} {:instruction float_rot} {:instruction integer_add} {:instruction integer_max} {:instruction integer_fromfloat} {:instruction integer_stackdepth} {:instruction float_add} {:instruction in2} {:instruction float_rot} {:instruction integer_add} {:instruction integer_max} {:instruction float_max} {:instruction integer_stackdepth} {:instruction float_add} {:instruction in2} {:instruction float_frominteger} {:instruction print_float} {:instruction integer_dup} {:instruction float_shove} {:instruction float_shove} {:instruction integer_inc} {:instruction float_mod} {:instruction integer_dup} {:instruction integer_dup_items} {:instruction print_integer} {:instruction integer_shove} {:instruction integer_yank} {:instruction print_integer} {:instruction integer_shove} {:instruction print_float} {:instruction integer_div} {:instruction integer_sub} {:instruction integer_fromfloat} {:instruction integer_shove} {:instruction print_float} {:instruction integer_sub} {:instruction integer_fromfloat} {:instruction integer_mod} {:instruction print_integer} {:instruction integer_mult} {:instruction integer_stackdepth} {:instruction tag_float_291} {:instruction integer_inc} {:instruction float_swap} {:instruction print_integer} {:instruction integer_mult} {:instruction float_swap} {:instruction integer_mod} {:instruction float_div} {:instruction float_mod} {:instruction float_max} {:instruction print_float} {:instruction integer_flush} {:instruction float_cos} {:instruction integer_swap} {:instruction integer_dec} {:instruction float_sub} {:instruction float_tan} {:instruction -51} {:instruction integer_dec} {:instruction float_sub} {:instruction float_tan} {:instruction integer_dup_times} {:instruction integer_dup_times} {:instruction integer_yank})
Best program: (float_yank integer_rot integer_stackdepth float_yankdup float_flush float_shove integer_sub float_dec float_tan integer_pop float_sub integer_yank float_sub 100 integer_dup_items integer_max float_inc float_dup float_mult float_sub integer_yank float_sub 100 integer_dup_items float_add 99 integer_dup_items float_yankdup float_rot float_rot integer_flush float_min print_integer float_add integer_pop float_yankdup print_float integer_pop 27 float_sub float_sub float_inc integer_yank integer_min float_max integer_sub 9 float_flush integer_stackdepth float_frominteger tag_float_196 float_swap float_rot integer_add integer_max integer_fromfloat integer_stackdepth float_add in2 float_rot integer_add integer_max float_max integer_stackdepth float_add in2 float_frominteger print_float integer_dup float_shove float_shove integer_inc float_mod integer_dup integer_dup_items print_integer integer_shove integer_yank print_integer integer_shove print_float integer_div integer_sub integer_fromfloat integer_shove print_float integer_sub integer_fromfloat integer_mod print_integer integer_mult integer_stackdepth tag_float_291 integer_inc float_swap print_integer integer_mult float_swap integer_mod float_div float_mod float_max print_float integer_flush float_cos integer_swap integer_dec float_sub float_tan -51 integer_dec float_sub float_tan integer_dup_times integer_dup_times integer_yank)
Errors: [16.5677 9 6.0519 6 10.506 10 63.29 8 46.4786 9 27.3773 8 21.7659 10 62.2423 12 65.7283 11 19.35 7 66.3997 9 44.1628 9 91.2753 8 86.3488 10 73.351 11 39.0737 11 55.3057 10 90.0769 11 57.4296 10 21.0794 9 84.5969 10 9.4308 7 55.9558 10 20.9037 7 43.5424 10]
Total: 1410.2905
Mean: 28.20581
Genome size: 116
Size: 117
Percent parens: 0.009
--- Population Statistics ---
Average total errors in population: 5242.478824200002
Median total errors in population: 1410.2905
Error averages by case: (190.72527240000278 9.338 185.58222059999898 7.318 187.0919212999981 10.622 202.35711130000107 8.622 215.10564370000114 9.766 167.47848889999716 8.724 169.06622279999917 10.538 200.78259380000253 12.051 178.7145027999986 10.9 163.17935300000138 7.761 207.03219390000163 9.408 186.1185146999984 9.359 249.11393970000196 8.949 246.05018700000264 10.53 181.41896219999833 11.169 194.73107780000072 11.311 191.85579229999922 10.478 221.00865409999673 11.013 227.76684780000102 10.376 163.36512829999882 8.728 244.69453790000134 10.287 185.2941774000009 7.951 225.87896209999892 10.388 197.9641198999984 8.084 216.09039850000175 10.341)
Error minima by case: (15.5441 7 5.9928 6 9.4824 9 27.3087 6 10.465 8 8.6078 7 21.2616 9 14.1934 8 21.2717 7 6.6362 5 2.6294 8 1.115 7 1.7484 8 0.3252 9 14.649 6 0.9499 9 18.2584 8 9.9261 7 57.3705 9 0.103 6 9.5633 8 8.4072 7 55.8967 8 20.8447 7 43.4833 8)
Average genome size in population (length): 105.052
Average program size in population (points): 106.052
Average percent parens in population: 0.010
Minimum age in population: 52.67906108492753
Maximum age in population: 57.15300491579546
Average age in population: 55.11392600639604
Median age in population: 55.15139503545288
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 4
Genome diversity (% unique Plush genomes):	 0.943
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 4
Syntactic diversity (% unique Push programs):	 0.943
Total error diversity:				 0.25
Error (vector) diversity:			 0.298
Behavioral diversity:				 0.298
--- Run Statistics ---
Number of program evaluations used so far: 40000
Number of point (instruction) evaluations so far: 88759256
--- Timings ---
Current time: 1529615319031 milliseconds
Total Time:         165.4 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        56.7 seconds, 34.3%
Fitness Testing:     85.2 seconds, 51.5%
Report:              23.4 seconds, 14.2%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 39
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 40
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 40
;;******************************
;; -*- Number IO problem report - generation 40
Test total error for best: 60026.23010000001
Test mean error for best: 30.01312
;;------------------------------
Outputs of best individual on training cases:
Correct output: -57.4559422311 | Program output: -74.023621    
Correct output: -71.0754923621 | Program output: -65.023621    
Correct output: -66.5176295557 | Program output: -77.023621    
Correct output: 149.3187378    | Program output: 86.028721     
Correct output: -36.5450493525 | Program output: -83.023621    
Correct output: 75.4021928097  | Program output: 48.024921     
Correct output: 52.2615929867  | Program output: 74.027521     
Correct output: -19.2178367434 | Program output: 43.024421     
Correct output: 66.7518906772  | Program output: 1.023621      
Correct output: 7.673605441    | Program output: 27.023621     
Correct output: 23.6294031682  | Program output: 90.029121     
Correct output: -6.1389033433  | Program output: 38.023921     
Correct output: 9.2516366816   | Program output: -82.023621    
Correct output: 31.3251776267  | Program output: -55.023621    
Correct output: 73.3746496408  | Program output: 0.023621      
Correct output: 20.0500553336  | Program output: -19.023621    
Correct output: -23.2820697498 | Program output: 32.023621     
Correct output: 120.1004999359 | Program output: 30.023621     
Correct output: -155.453212395 | Program output: -98.023621    
Correct output: 31.10301576    | Program output: 10.023621     
Correct output: 45.5733057121  | Program output: -39.023621    
Correct output: -68.592783645  | Program output: -78.023621    
Correct output: -125.979392023 | Program output: -70.023621    
Correct output: -91.9273649148 | Program output: -71.023621    
Correct output: -92.5660607267 | Program output: -49.023621    
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_flush} {:instruction integer_rot} {:instruction integer_stackdepth} {:instruction integer_inc} {:instruction float_min} {:instruction in2} {:instruction float_inc} {:instruction float_div} {:instruction integer_max} {:instruction float_inc} {:instruction float_dup} {:instruction float_mult} {:instruction integer_yank} {:instruction 100} {:instruction integer_dup_items} {:instruction float_add} {:instruction 100} {:instruction integer_dup_items} {:instruction float_add} {:instruction integer_dec} {:instruction float_mult} {:instruction integer_flush} {:instruction integer_pop} {:instruction float_dec} {:instruction integer_min} {:instruction float_add} {:instruction float_tan} {:instruction print_float} {:instruction integer_pop} {:instruction integer_pop} {:instruction 27} {:instruction float_sub} {:instruction integer_yankdup} {:instruction float_tan} {:instruction integer_yank} {:instruction integer_min} {:instruction float_max} {:instruction integer_sub} {:instruction 9} {:instruction float_mult} {:instruction integer_stackdepth} {:instruction float_frominteger} {:instruction tag_float_196} {:instruction float_swap} {:instruction float_rot} {:instruction integer_add} {:instruction float_max} {:instruction integer_stackdepth} {:instruction float_add} {:instruction in2} {:instruction float_mult} {:instruction integer_add} {:instruction integer_max} {:instruction float_max} {:instruction float_max} {:instruction integer_stackdepth} {:instruction float_add} {:instruction in2} {:instruction float_frominteger} {:instruction print_float} {:instruction integer_dup} {:instruction float_shove} {:instruction float_shove} {:instruction integer_inc} {:instruction float_mod} {:instruction integer_dup} {:instruction integer_dup_items} {:instruction print_integer} {:instruction integer_shove} {:instruction integer_yank} {:instruction print_integer} {:instruction integer_shove} {:instruction print_float} {:instruction integer_div} {:instruction integer_sub} {:instruction integer_fromfloat} {:instruction integer_mod} {:instruction print_integer} {:instruction integer_mult} {:instruction float_swap} {:instruction integer_stackdepth} {:instruction integer_stackdepth} {:instruction float_mod} {:instruction float_inc} {:instruction float_sub} {:instruction float_tan} {:instruction print_integer} {:instruction integer_mod} {:instruction float_div} {:instruction float_mod} {:instruction float_inc} {:instruction print_float} {:instruction integer_flush} {:instruction float_rot} {:instruction float_cos} {:instruction -51} {:instruction integer_dec} {:instruction float_sub} {:instruction float_tan})
Best program: (float_flush integer_rot integer_stackdepth integer_inc float_min in2 float_inc float_div integer_max float_inc float_dup float_mult integer_yank 100 integer_dup_items float_add 100 integer_dup_items float_add integer_dec float_mult integer_flush integer_pop float_dec integer_min float_add float_tan print_float integer_pop integer_pop 27 float_sub integer_yankdup float_tan integer_yank integer_min float_max integer_sub 9 float_mult integer_stackdepth float_frominteger tag_float_196 float_swap float_rot integer_add float_max integer_stackdepth float_add in2 float_mult integer_add integer_max float_max float_max integer_stackdepth float_add in2 float_frominteger print_float integer_dup float_shove float_shove integer_inc float_mod integer_dup integer_dup_items print_integer integer_shove integer_yank print_integer integer_shove print_float integer_div integer_sub integer_fromfloat integer_mod print_integer integer_mult float_swap integer_stackdepth integer_stackdepth float_mod float_inc float_sub float_tan print_integer integer_mod float_div float_mod float_inc print_float integer_flush float_rot float_cos -51 integer_dec float_sub float_tan)
Errors: [16.5677 9 6.0519 6 10.506 10 63.29 8 46.4786 9 27.3773 8 21.7659 10 62.2423 12 65.7283 11 19.35 7 66.3997 9 44.1628 9 91.2753 8 86.3488 10 73.351 11 39.0737 11 55.3057 10 90.0769 11 57.4296 10 21.0794 9 84.5969 10 9.4308 7 55.9558 10 20.9037 7 43.5424 10]
Total: 1410.2905
Mean: 28.20581
Genome size: 99
Size: 100
Percent parens: 0.010
--- Population Statistics ---
Average total errors in population: 5480.134852600001
Median total errors in population: 1411.2905
Error averages by case: (205.46269010000276 9.427 198.28560919999896 7.443 200.93030559999795 10.689 205.5540895000009 8.634 228.803263300001 9.859 174.06168979999708 8.797 172.05281349999902 10.588 204.78619100000256 12.051 187.6461334999987 10.912 168.7335056000018 7.805 209.91531580000168 9.47 188.31502919999903 9.369 263.27786390000153 8.987 258.7491256000029 10.618 189.19736659999825 11.202 212.88743480000096 11.337 198.2289459999991 10.504 225.62669139999687 11.033 241.20318220000104 10.462 166.49763149999907 8.726 257.04438390000166 10.309 200.14555490000077 8.066 238.86286329999865 10.462 210.54673119999848 8.182 227.9594412000021 10.429)
Error minima by case: (7.5441 7 6.0245 6 1.4824 9 36.71 7 37.455 8 26.3648 7 16.2516 9 20.2178 8 1.0 6 1.3547 6 11.6294 8 4.8611 7 0.2234 7 3.6848 8 0.0 5 6.9599 8 24.2821 8 9.9226 8 57.4022 8 4.093 6 9.5633 8 0.4072 6 55.9284 8 20.8763 7 28.4339 8)
Average genome size in population (length): 105.75
Average program size in population (points): 106.75
Average percent parens in population: 0.009
Minimum age in population: 53.83812462340575
Maximum age in population: 58.64704846982931
Average age in population: 56.47404985992023
Median age in population: 56.52621867531343
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 4
Genome diversity (% unique Plush genomes):	 0.948
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 4
Syntactic diversity (% unique Push programs):	 0.948
Total error diversity:				 0.246
Error (vector) diversity:			 0.303
Behavioral diversity:				 0.303
--- Run Statistics ---
Number of program evaluations used so far: 41000
Number of point (instruction) evaluations so far: 91404331
--- Timings ---
Current time: 1529615323220 milliseconds
Total Time:         169.8 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        58.0 seconds, 34.2%
Fitness Testing:     87.5 seconds, 51.5%
Report:              24.2 seconds, 14.3%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 40
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 41
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 41
;;******************************
;; -*- Number IO problem report - generation 41
Test total error for best: 60026.23010000001
Test mean error for best: 30.01312
;;------------------------------
Outputs of best individual on training cases:
Correct output: -57.4559422311 | Program output: -74.023621    
Correct output: -71.0754923621 | Program output: -65.023621    
Correct output: -66.5176295557 | Program output: -77.023621    
Correct output: 149.3187378    | Program output: 86.028721     
Correct output: -36.5450493525 | Program output: -83.023621    
Correct output: 75.4021928097  | Program output: 48.024921     
Correct output: 52.2615929867  | Program output: 74.027521     
Correct output: -19.2178367434 | Program output: 43.024421     
Correct output: 66.7518906772  | Program output: 1.023621      
Correct output: 7.673605441    | Program output: 27.023621     
Correct output: 23.6294031682  | Program output: 90.029121     
Correct output: -6.1389033433  | Program output: 38.023921     
Correct output: 9.2516366816   | Program output: -82.023621    
Correct output: 31.3251776267  | Program output: -55.023621    
Correct output: 73.3746496408  | Program output: 0.023621      
Correct output: 20.0500553336  | Program output: -19.023621    
Correct output: -23.2820697498 | Program output: 32.023621     
Correct output: 120.1004999359 | Program output: 30.023621     
Correct output: -155.453212395 | Program output: -98.023621    
Correct output: 31.10301576    | Program output: 10.023621     
Correct output: 45.5733057121  | Program output: -39.023621    
Correct output: -68.592783645  | Program output: -78.023621    
Correct output: -125.979392023 | Program output: -70.023621    
Correct output: -91.9273649148 | Program output: -71.023621    
Correct output: -92.5660607267 | Program output: -49.023621    
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_inc} {:instruction float_add} {:instruction float_yank} {:instruction float_yank} {:instruction integer_rot} {:instruction integer_stackdepth} {:instruction float_yankdup} {:instruction float_flush} {:instruction integer_inc} {:instruction float_add} {:instruction float_yank} {:instruction float_add} {:instruction 100} {:instruction integer_dup_items} {:instruction float_add} {:instruction float_cos} {:instruction integer_dup_items} {:instruction float_yankdup} {:instruction float_rot} {:instruction float_rot} {:instruction integer_flush} {:instruction float_min} {:instruction print_integer} {:instruction float_add} {:instruction float_min} {:instruction print_integer} {:instruction integer_add} {:instruction float_tan} {:instruction print_float} {:instruction integer_pop} {:instruction 27} {:instruction float_sub} {:instruction float_sub} {:instruction float_tan} {:instruction integer_yank} {:instruction integer_min} {:instruction float_max} {:instruction integer_sub} {:instruction integer_pop} {:instruction integer_pop} {:instruction float_min} {:instruction print_integer} {:instruction float_add} {:instruction float_tan} {:instruction print_float} {:instruction integer_mult} {:instruction 27} {:instruction float_min} {:instruction float_sub} {:instruction float_tan} {:instruction integer_yank} {:instruction integer_min} {:instruction integer_yank} {:instruction integer_min} {:instruction float_sin} {:instruction integer_sub} {:instruction 9} {:instruction float_swap} {:instruction integer_stackdepth} {:instruction float_frominteger} {:instruction tag_float_196} {:instruction float_swap} {:instruction float_rot} {:instruction integer_add} {:instruction integer_max} {:instruction integer_fromfloat} {:instruction integer_stackdepth} {:instruction float_add} {:instruction in2} {:instruction float_yank} {:instruction integer_add} {:instruction integer_max} {:instruction float_max} {:instruction integer_stackdepth} {:instruction float_add} {:instruction in2} {:instruction float_frominteger} {:instruction print_float} {:instruction integer_dup} {:instruction float_shove} {:instruction float_shove} {:instruction integer_inc} {:instruction float_mod} {:instruction integer_dup} {:instruction integer_dup_items} {:instruction print_integer} {:instruction integer_shove} {:instruction integer_yank} {:instruction print_integer} {:instruction integer_shove} {:instruction float_frominteger} {:instruction integer_div} {:instruction integer_sub} {:instruction integer_fromfloat} {:instruction integer_mod} {:instruction print_integer} {:instruction print_float} {:instruction integer_mod} {:instruction float_pop} {:instruction integer_fromfloat} {:instruction integer_mod} {:instruction print_integer} {:instruction integer_mult} {:instruction integer_stackdepth} {:instruction tag_float_209} {:instruction integer_inc} {:instruction float_swap} {:instruction print_integer} {:instruction integer_mod} {:instruction float_mod} {:instruction float_mod} {:instruction float_inc} {:instruction print_float} {:instruction integer_flush} {:instruction float_cos} {:instruction -51} {:instruction integer_dec} {:instruction float_sub} {:instruction float_tan})
Best program: (integer_inc float_add float_yank float_yank integer_rot integer_stackdepth float_yankdup float_flush integer_inc float_add float_yank float_add 100 integer_dup_items float_add float_cos integer_dup_items float_yankdup float_rot float_rot integer_flush float_min print_integer float_add float_min print_integer integer_add float_tan print_float integer_pop 27 float_sub float_sub float_tan integer_yank integer_min float_max integer_sub integer_pop integer_pop float_min print_integer float_add float_tan print_float integer_mult 27 float_min float_sub float_tan integer_yank integer_min integer_yank integer_min float_sin integer_sub 9 float_swap integer_stackdepth float_frominteger tag_float_196 float_swap float_rot integer_add integer_max integer_fromfloat integer_stackdepth float_add in2 float_yank integer_add integer_max float_max integer_stackdepth float_add in2 float_frominteger print_float integer_dup float_shove float_shove integer_inc float_mod integer_dup integer_dup_items print_integer integer_shove integer_yank print_integer integer_shove float_frominteger integer_div integer_sub integer_fromfloat integer_mod print_integer print_float integer_mod float_pop integer_fromfloat integer_mod print_integer integer_mult integer_stackdepth tag_float_209 integer_inc float_swap print_integer integer_mod float_mod float_mod float_inc print_float integer_flush float_cos -51 integer_dec float_sub float_tan)
Errors: [16.5677 9 6.0519 6 10.506 10 63.29 8 46.4786 9 27.3773 8 21.7659 10 62.2423 12 65.7283 11 19.35 7 66.3997 9 44.1628 9 91.2753 8 86.3488 10 73.351 11 39.0737 11 55.3057 10 90.0769 11 57.4296 10 21.0794 9 84.5969 10 9.4308 7 55.9558 10 20.9037 7 43.5424 10]
Total: 1410.2905
Mean: 28.20581
Genome size: 119
Size: 120
Percent parens: 0.008
--- Population Statistics ---
Average total errors in population: 5443.087716500001
Median total errors in population: 1410.2905
Error averages by case: (206.3520358000028 9.386 199.36851209999912 7.304 201.95276119999767 10.643 201.57044500000075 8.577 229.22621080000098 9.792 170.33079919999702 8.71 167.10818649999916 10.544 199.2876119000023 12.02 185.67137839999842 10.855 164.6846035000019 7.747 204.2325103000012 9.451 184.787404199999 9.351 263.04935050000194 8.86 258.7068439000029 10.494 190.8742963999982 11.114 206.13078630000064 11.257 195.034124799999 10.408 223.94919629999646 11.004 242.44731740000117 10.383 165.94809019999886 8.702 257.1776402000016 10.268 201.19536350000087 7.954 239.8859593999986 10.408 211.64792979999828 8.055 228.839358900002 10.342)
Error minima by case: (16.5441 7 5.9844 6 10.4824 10 38.3187 7 3.5214 8 25.4022 7 21.7384 9 13.8066 10 24.2708 6 1.3546 6 1.6294 7 6.1489 7 0.2234 7 4.6848 9 16.6481 6 1.9499 9 9.7416 8 9.1005 9 57.3621 9 0.103 6 8.5733 9 9.4072 7 55.8883 9 20.8363 7 28.4339 9)
Average genome size in population (length): 105.466
Average program size in population (points): 106.466
Average percent parens in population: 0.009
Minimum age in population: 55.10518460583262
Maximum age in population: 59.64639168072699
Average age in population: 57.8348409991695
Median age in population: 57.86165458704727
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 5
Genome diversity (% unique Plush genomes):	 0.941
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 5
Syntactic diversity (% unique Push programs):	 0.941
Total error diversity:				 0.246
Error (vector) diversity:			 0.301
Behavioral diversity:				 0.302
--- Run Statistics ---
Number of program evaluations used so far: 42000
Number of point (instruction) evaluations so far: 94041931
--- Timings ---
Current time: 1529615327815 milliseconds
Total Time:         174.3 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        59.4 seconds, 34.0%
Fitness Testing:     90.1 seconds, 51.7%
Report:              24.8 seconds, 14.2%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 41
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 42
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 42
;;******************************
;; -*- Number IO problem report - generation 42
Test total error for best: 60026.23010000001
Test mean error for best: 30.01312
;;------------------------------
Outputs of best individual on training cases:
Correct output: -57.4559422311 | Program output: -74.023621    
Correct output: -71.0754923621 | Program output: -65.023621    
Correct output: -66.5176295557 | Program output: -77.023621    
Correct output: 149.3187378    | Program output: 86.028721     
Correct output: -36.5450493525 | Program output: -83.023621    
Correct output: 75.4021928097  | Program output: 48.024921     
Correct output: 52.2615929867  | Program output: 74.027521     
Correct output: -19.2178367434 | Program output: 43.024421     
Correct output: 66.7518906772  | Program output: 1.023621      
Correct output: 7.673605441    | Program output: 27.023621     
Correct output: 23.6294031682  | Program output: 90.029121     
Correct output: -6.1389033433  | Program output: 38.023921     
Correct output: 9.2516366816   | Program output: -82.023621    
Correct output: 31.3251776267  | Program output: -55.023621    
Correct output: 73.3746496408  | Program output: 0.023621      
Correct output: 20.0500553336  | Program output: -19.023621    
Correct output: -23.2820697498 | Program output: 32.023621     
Correct output: 120.1004999359 | Program output: 30.023621     
Correct output: -155.453212395 | Program output: -98.023621    
Correct output: 31.10301576    | Program output: 10.023621     
Correct output: 45.5733057121  | Program output: -39.023621    
Correct output: -68.592783645  | Program output: -78.023621    
Correct output: -125.979392023 | Program output: -70.023621    
Correct output: -91.9273649148 | Program output: -71.023621    
Correct output: -92.5660607267 | Program output: -49.023621    
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_yank} {:instruction integer_rot} {:instruction integer_stackdepth} {:instruction float_yankdup} {:instruction float_dup_items} {:instruction float_cos} {:instruction integer_sub} {:instruction float_dec} {:instruction float_tan} {:instruction integer_pop} {:instruction integer_dup_items} {:instruction 100} {:instruction float_rot} {:instruction float_rot} {:instruction integer_flush} {:instruction float_min} {:instruction print_integer} {:instruction float_add} {:instruction integer_pop} {:instruction integer_dec} {:instruction integer_div} {:instruction integer_min} {:instruction float_mod} {:instruction integer_shove} {:instruction integer_dup_times} {:instruction integer_swap} {:instruction integer_max} {:instruction float_sub} {:instruction 100} {:instruction integer_dup_items} {:instruction float_yankdup} {:instruction float_rot} {:instruction float_rot} {:instruction integer_flush} {:instruction float_min} {:instruction print_integer} {:instruction float_add} {:instruction float_min} {:instruction float_shove} {:instruction integer_add} {:instruction float_tan} {:instruction print_float} {:instruction integer_pop} {:instruction 27} {:instruction float_sub} {:instruction float_sub} {:instruction float_tan} {:instruction integer_yank} {:instruction integer_min} {:instruction float_max} {:instruction integer_sub} {:instruction 9} {:instruction float_mult} {:instruction integer_stackdepth} {:instruction float_frominteger} {:instruction tag_float_196} {:instruction float_swap} {:instruction integer_rot} {:instruction integer_add} {:instruction integer_stackdepth} {:instruction float_frominteger} {:instruction tag_float_196} {:instruction float_swap} {:instruction float_rot} {:instruction integer_add} {:instruction integer_max} {:instruction float_max} {:instruction integer_stackdepth} {:instruction float_swap} {:instruction in2} {:instruction float_rot} {:instruction integer_add} {:instruction integer_max} {:instruction float_max} {:instruction integer_stackdepth} {:instruction float_add} {:instruction in2} {:instruction float_frominteger} {:instruction print_float} {:instruction integer_dup} {:instruction float_shove} {:instruction float_shove} {:instruction integer_inc} {:instruction float_mod} {:instruction integer_dup} {:instruction integer_dup_items} {:instruction print_integer} {:instruction integer_shove} {:instruction integer_yank} {:instruction print_integer} {:instruction integer_shove} {:instruction print_float} {:instruction integer_div} {:instruction integer_sub} {:instruction integer_fromfloat} {:instruction integer_mod} {:instruction print_integer} {:instruction integer_mult} {:instruction integer_stackdepth} {:instruction tag_float_291} {:instruction integer_inc} {:instruction float_swap} {:instruction print_integer} {:instruction integer_mod} {:instruction print_integer} {:instruction float_mod})
Best program: (float_yank integer_rot integer_stackdepth float_yankdup float_dup_items float_cos integer_sub float_dec float_tan integer_pop integer_dup_items 100 float_rot float_rot integer_flush float_min print_integer float_add integer_pop integer_dec integer_div integer_min float_mod integer_shove integer_dup_times integer_swap integer_max float_sub 100 integer_dup_items float_yankdup float_rot float_rot integer_flush float_min print_integer float_add float_min float_shove integer_add float_tan print_float integer_pop 27 float_sub float_sub float_tan integer_yank integer_min float_max integer_sub 9 float_mult integer_stackdepth float_frominteger tag_float_196 float_swap integer_rot integer_add integer_stackdepth float_frominteger tag_float_196 float_swap float_rot integer_add integer_max float_max integer_stackdepth float_swap in2 float_rot integer_add integer_max float_max integer_stackdepth float_add in2 float_frominteger print_float integer_dup float_shove float_shove integer_inc float_mod integer_dup integer_dup_items print_integer integer_shove integer_yank print_integer integer_shove print_float integer_div integer_sub integer_fromfloat integer_mod print_integer integer_mult integer_stackdepth tag_float_291 integer_inc float_swap print_integer integer_mod print_integer float_mod)
Errors: [16.5677 9 6.0519 6 10.506 10 63.29 8 46.4786 9 27.3773 8 21.7659 10 62.2423 12 65.7283 11 19.35 7 66.3997 9 44.1628 9 91.2753 8 86.3488 10 73.351 11 39.0737 11 55.3057 10 90.0769 11 57.4296 10 21.0794 9 84.5969 10 9.4308 7 55.9558 10 20.9037 7 43.5424 10]
Total: 1410.2905
Mean: 28.20581
Genome size: 106
Size: 107
Percent parens: 0.009
--- Population Statistics ---
Average total errors in population: 4594.836665500002
Median total errors in population: 1410.2905
Error averages by case: (162.89984470000184 9.288 156.26337659999987 7.27 157.0419536999982 10.576 174.1914111000003 8.585 187.58905520000127 9.714 141.05910459999745 8.678 140.64876889999897 10.495 174.12047630000163 12.036 166.443775699999 10.904 136.56640710000144 7.691 179.40538990000124 9.369 159.14649569999946 9.329 223.33268000000112 8.858 218.8779132000028 10.539 169.58620099999848 11.148 173.44225800000012 11.291 168.01503799999873 10.415 196.08232649999707 10.986 199.96723280000143 10.339 136.98795830000023 8.686 217.24880430000138 10.29 156.19043310000103 7.904 198.87158289999894 10.395 170.04937939999868 8.009 187.71979850000199 10.294)
Error minima by case: (15.5814 7 5.9834 5 9.5197 9 37.6913 6 36.5824 8 26.3648 6 21.7384 9 19.2633 7 30.7419 5 1.3547 6 12.6294 7 6.1793 7 0.2234 6 4.6848 5 37.3646 5 11.0218 6 23.3194 7 15.9095 6 57.3611 6 4.907 5 9.5633 6 8.4446 7 55.8873 6 20.8353 7 28.4339 6)
Average genome size in population (length): 105.148
Average program size in population (points): 106.148
Average percent parens in population: 0.010
Minimum age in population: 56.45078910607845
Maximum age in population: 61.12610068636013
Average age in population: 59.21224839037731
Median age in population: 59.25652263318284
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 4
Genome diversity (% unique Plush genomes):	 0.938
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 4
Syntactic diversity (% unique Push programs):	 0.938
Total error diversity:				 0.239
Error (vector) diversity:			 0.283
Behavioral diversity:				 0.283
--- Run Statistics ---
Number of program evaluations used so far: 43000
Number of point (instruction) evaluations so far: 96671481
--- Timings ---
Current time: 1529615332216 milliseconds
Total Time:         178.7 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        60.8 seconds, 34.0%
Fitness Testing:     92.4 seconds, 51.7%
Report:              25.4 seconds, 14.2%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 42
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 43
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 43
;;******************************
;; -*- Number IO problem report - generation 43
Test total error for best: 60026.23010000001
Test mean error for best: 30.01312
;;------------------------------
Outputs of best individual on training cases:
Correct output: -57.4559422311 | Program output: -74.023621    
Correct output: -71.0754923621 | Program output: -65.023621    
Correct output: -66.5176295557 | Program output: -77.023621    
Correct output: 149.3187378    | Program output: 86.028721     
Correct output: -36.5450493525 | Program output: -83.023621    
Correct output: 75.4021928097  | Program output: 48.024921     
Correct output: 52.2615929867  | Program output: 74.027521     
Correct output: -19.2178367434 | Program output: 43.024421     
Correct output: 66.7518906772  | Program output: 1.023621      
Correct output: 7.673605441    | Program output: 27.023621     
Correct output: 23.6294031682  | Program output: 90.029121     
Correct output: -6.1389033433  | Program output: 38.023921     
Correct output: 9.2516366816   | Program output: -82.023621    
Correct output: 31.3251776267  | Program output: -55.023621    
Correct output: 73.3746496408  | Program output: 0.023621      
Correct output: 20.0500553336  | Program output: -19.023621    
Correct output: -23.2820697498 | Program output: 32.023621     
Correct output: 120.1004999359 | Program output: 30.023621     
Correct output: -155.453212395 | Program output: -98.023621    
Correct output: 31.10301576    | Program output: 10.023621     
Correct output: 45.5733057121  | Program output: -39.023621    
Correct output: -68.592783645  | Program output: -78.023621    
Correct output: -125.979392023 | Program output: -70.023621    
Correct output: -91.9273649148 | Program output: -71.023621    
Correct output: -92.5660607267 | Program output: -49.023621    
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_inc} {:instruction tagged_699} {:instruction float_yank} {:instruction integer_stackdepth} {:instruction integer_min} {:instruction float_sub} {:instruction integer_dup} {:instruction float_cos} {:instruction float_sub} {:instruction integer_mod} {:instruction float_dup_items} {:instruction integer_flush} {:instruction float_yankdup} {:instruction float_rot} {:instruction float_rot} {:instruction integer_flush} {:instruction 99} {:instruction integer_dup_times} {:instruction float_rot} {:instruction integer_flush} {:instruction float_min} {:instruction print_integer} {:instruction float_add} {:instruction integer_pop} {:instruction float_yankdup} {:instruction print_float} {:instruction print_float} {:instruction float_flush} {:instruction 27} {:instruction float_sub} {:instruction tagged_444} {:instruction integer_dup_times} {:instruction 27} {:instruction float_sub} {:instruction float_sub} {:instruction float_tan} {:instruction integer_yank} {:instruction integer_min} {:instruction float_max} {:instruction integer_sub} {:instruction 9} {:instruction float_mult} {:instruction integer_stackdepth} {:instruction float_frominteger} {:instruction tag_float_196} {:instruction float_swap} {:instruction float_rot} {:instruction integer_add} {:instruction integer_max} {:instruction float_max} {:instruction integer_stackdepth} {:instruction float_add} {:instruction in2} {:instruction float_rot} {:instruction integer_add} {:instruction integer_max} {:instruction float_sin} {:instruction integer_stackdepth} {:instruction float_frominteger} {:instruction tag_float_196} {:instruction float_swap} {:instruction float_max} {:instruction integer_stackdepth} {:instruction float_add} {:instruction in2} {:instruction float_rot} {:instruction integer_add} {:instruction integer_max} {:instruction float_max} {:instruction float_max} {:instruction integer_stackdepth} {:instruction float_add} {:instruction in2} {:instruction float_frominteger} {:instruction print_float} {:instruction integer_dup} {:instruction float_shove} {:instruction float_shove} {:instruction integer_inc} {:instruction float_mod} {:instruction integer_dup} {:instruction integer_dup_items} {:instruction print_integer} {:instruction integer_shove} {:instruction integer_yank} {:instruction print_integer} {:instruction integer_shove} {:instruction print_float} {:instruction integer_div} {:instruction integer_sub} {:instruction print_integer} {:instruction integer_shove} {:instruction print_float} {:instruction integer_div} {:instruction integer_fromfloat} {:instruction float_sub} {:instruction print_integer} {:instruction integer_mult} {:instruction integer_stackdepth} {:instruction tag_float_524} {:instruction integer_inc} {:instruction float_swap} {:instruction print_integer} {:instruction integer_mod} {:instruction float_div} {:instruction float_mod})
Best program: (integer_inc tagged_699 float_yank integer_stackdepth integer_min float_sub integer_dup float_cos float_sub integer_mod float_dup_items integer_flush float_yankdup float_rot float_rot integer_flush 99 integer_dup_times float_rot integer_flush float_min print_integer float_add integer_pop float_yankdup print_float print_float float_flush 27 float_sub tagged_444 integer_dup_times 27 float_sub float_sub float_tan integer_yank integer_min float_max integer_sub 9 float_mult integer_stackdepth float_frominteger tag_float_196 float_swap float_rot integer_add integer_max float_max integer_stackdepth float_add in2 float_rot integer_add integer_max float_sin integer_stackdepth float_frominteger tag_float_196 float_swap float_max integer_stackdepth float_add in2 float_rot integer_add integer_max float_max float_max integer_stackdepth float_add in2 float_frominteger print_float integer_dup float_shove float_shove integer_inc float_mod integer_dup integer_dup_items print_integer integer_shove integer_yank print_integer integer_shove print_float integer_div integer_sub print_integer integer_shove print_float integer_div integer_fromfloat float_sub print_integer integer_mult integer_stackdepth tag_float_524 integer_inc float_swap print_integer integer_mod float_div float_mod)
Errors: [16.5677 9 6.0519 6 10.506 10 63.29 8 46.4786 9 27.3773 8 21.7659 10 62.2423 12 65.7283 11 19.35 7 66.3997 9 44.1628 9 91.2753 8 86.3488 10 73.351 11 39.0737 11 55.3057 10 90.0769 11 57.4296 10 21.0794 9 84.5969 10 9.4308 7 55.9558 10 20.9037 7 43.5424 10]
Total: 1410.2905
Mean: 28.20581
Genome size: 106
Size: 107
Percent parens: 0.009
--- Population Statistics ---
Average total errors in population: 5457.010965400001
Median total errors in population: 1410.2905
Error averages by case: (207.40986440000282 9.404 199.4150677999993 7.365 202.914035099998 10.696 204.9600089000008 8.647 230.43481010000093 9.851 172.13021989999746 8.811 169.35750049999922 10.589 202.75709810000222 12.029 182.75492769999846 10.924 164.5836582000015 7.789 208.50383770000136 9.503 187.01905089999886 9.378 264.6197676000013 8.95 260.38216960000267 10.592 182.2795596999984 11.208 207.01244820000062 11.329 194.4297429999988 10.466 222.46483659999663 11.038 242.1346330000012 10.46 164.85599019999898 8.758 258.68895570000143 10.312 202.1329603000009 8.034 239.96232199999884 10.464 211.64019039999846 8.124 229.05330980000193 10.393)
Error minima by case: (16.5441 7 5.9827 6 10.4824 9 38.3187 5 3.7858 8 26.3517 6 16.2516 8 19.2423 6 24.2717 5 4.6736 6 3.3806 8 6.1628 6 1.7595 5 4.3152 6 16.6481 4 6.9599 5 17.0488 6 9.1005 4 57.3604 6 4.093 5 9.5359 6 9.4072 6 55.8866 6 20.8346 6 43.4733 6)
Average genome size in population (length): 104.91
Average program size in population (points): 105.91
Average percent parens in population: 0.010
Minimum age in population: 57.45078910607845
Maximum age in population: 62.5507494133642
Average age in population: 60.6598036125343
Median age in population: 60.69171297521939
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 4
Genome diversity (% unique Plush genomes):	 0.947
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 4
Syntactic diversity (% unique Push programs):	 0.947
Total error diversity:				 0.257
Error (vector) diversity:			 0.303
Behavioral diversity:				 0.304
--- Run Statistics ---
Number of program evaluations used so far: 44000
Number of point (instruction) evaluations so far: 99295081
--- Timings ---
Current time: 1529615336443 milliseconds
Total Time:         183.0 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        62.1 seconds, 33.9%
Fitness Testing:     94.7 seconds, 51.7%
Report:              26.1 seconds, 14.3%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 43
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 44
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 44
;;******************************
;; -*- Number IO problem report - generation 44
Test total error for best: 60026.23010000001
Test mean error for best: 30.01312
;;------------------------------
Outputs of best individual on training cases:
Correct output: -57.4559422311 | Program output: -74.023621    
Correct output: -71.0754923621 | Program output: -65.023621    
Correct output: -66.5176295557 | Program output: -77.023621    
Correct output: 149.3187378    | Program output: 86.028721     
Correct output: -36.5450493525 | Program output: -83.023621    
Correct output: 75.4021928097  | Program output: 48.024921     
Correct output: 52.2615929867  | Program output: 74.027521     
Correct output: -19.2178367434 | Program output: 43.024421     
Correct output: 66.7518906772  | Program output: 1.023621      
Correct output: 7.673605441    | Program output: 27.023621     
Correct output: 23.6294031682  | Program output: 90.029121     
Correct output: -6.1389033433  | Program output: 38.023921     
Correct output: 9.2516366816   | Program output: -82.023621    
Correct output: 31.3251776267  | Program output: -55.023621    
Correct output: 73.3746496408  | Program output: 0.023621      
Correct output: 20.0500553336  | Program output: -19.023621    
Correct output: -23.2820697498 | Program output: 32.023621     
Correct output: 120.1004999359 | Program output: 30.023621     
Correct output: -155.453212395 | Program output: -98.023621    
Correct output: 31.10301576    | Program output: 10.023621     
Correct output: 45.5733057121  | Program output: -39.023621    
Correct output: -68.592783645  | Program output: -78.023621    
Correct output: -125.979392023 | Program output: -70.023621    
Correct output: -91.9273649148 | Program output: -71.023621    
Correct output: -92.5660607267 | Program output: -49.023621    
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_yank} {:instruction integer_rot} {:instruction integer_stackdepth} {:instruction float_yank} {:instruction integer_rot} {:instruction integer_stackdepth} {:instruction tag_integer_391} {:instruction float_div} {:instruction float_sub} {:instruction 100} {:instruction integer_mod} {:instruction float_add} {:instruction float_add} {:instruction integer_pop} {:instruction float_yankdup} {:instruction print_float} {:instruction integer_pop} {:instruction 27} {:instruction float_rot} {:instruction float_rot} {:instruction integer_flush} {:instruction float_min} {:instruction print_integer} {:instruction float_add} {:instruction integer_pop} {:instruction float_yankdup} {:instruction print_float} {:instruction integer_fromfloat} {:instruction 27} {:instruction float_sub} {:instruction float_sub} {:instruction float_tan} {:instruction integer_yank} {:instruction integer_min} {:instruction float_max} {:instruction float_sub} {:instruction float_sub} {:instruction float_sub} {:instruction float_tan} {:instruction integer_yank} {:instruction integer_min} {:instruction float_max} {:instruction integer_sub} {:instruction 9} {:instruction float_swap} {:instruction integer_stackdepth} {:instruction float_frominteger} {:instruction tag_float_44} {:instruction float_swap} {:instruction float_rot} {:instruction integer_add} {:instruction integer_max} {:instruction integer_fromfloat} {:instruction integer_stackdepth} {:instruction float_add} {:instruction in2} {:instruction float_mult} {:instruction integer_stackdepth} {:instruction float_frominteger} {:instruction tag_float_196} {:instruction float_swap} {:instruction float_rot} {:instruction integer_add} {:instruction integer_max} {:instruction float_max} {:instruction integer_stackdepth} {:instruction float_add} {:instruction in2} {:instruction float_frominteger} {:instruction print_float} {:instruction integer_dup} {:instruction float_shove} {:instruction float_shove} {:instruction integer_inc} {:instruction float_mod} {:instruction integer_dup} {:instruction integer_dup_items} {:instruction print_integer} {:instruction integer_shove} {:instruction integer_yank} {:instruction print_integer} {:instruction integer_shove} {:instruction integer_yank} {:instruction integer_div} {:instruction integer_sub} {:instruction integer_fromfloat} {:instruction integer_fromfloat} {:instruction float_sub} {:instruction print_integer} {:instruction integer_mult} {:instruction integer_stackdepth} {:instruction tag_float_291} {:instruction integer_inc} {:instruction float_swap} {:instruction print_integer} {:instruction integer_mod} {:instruction float_div} {:instruction float_mod} {:instruction float_inc} {:instruction print_float} {:instruction integer_flush} {:instruction float_cos} {:instruction -51})
Best program: (float_yank integer_rot integer_stackdepth float_yank integer_rot integer_stackdepth tag_integer_391 float_div float_sub 100 integer_mod float_add float_add integer_pop float_yankdup print_float integer_pop 27 float_rot float_rot integer_flush float_min print_integer float_add integer_pop float_yankdup print_float integer_fromfloat 27 float_sub float_sub float_tan integer_yank integer_min float_max float_sub float_sub float_sub float_tan integer_yank integer_min float_max integer_sub 9 float_swap integer_stackdepth float_frominteger tag_float_44 float_swap float_rot integer_add integer_max integer_fromfloat integer_stackdepth float_add in2 float_mult integer_stackdepth float_frominteger tag_float_196 float_swap float_rot integer_add integer_max float_max integer_stackdepth float_add in2 float_frominteger print_float integer_dup float_shove float_shove integer_inc float_mod integer_dup integer_dup_items print_integer integer_shove integer_yank print_integer integer_shove integer_yank integer_div integer_sub integer_fromfloat integer_fromfloat float_sub print_integer integer_mult integer_stackdepth tag_float_291 integer_inc float_swap print_integer integer_mod float_div float_mod float_inc print_float integer_flush float_cos -51)
Errors: [16.5677 9 6.0519 6 10.506 10 63.29 8 46.4786 9 27.3773 8 21.7659 10 62.2423 12 65.7283 11 19.35 7 66.3997 9 44.1628 9 91.2753 8 86.3488 10 73.351 11 39.0737 11 55.3057 10 90.0769 11 57.4296 10 21.0794 9 84.5969 10 9.4308 7 55.9558 10 20.9037 7 43.5424 10]
Total: 1410.2905
Mean: 28.20581
Genome size: 103
Size: 104
Percent parens: 0.010
--- Population Statistics ---
Average total errors in population: 5300.474660500001
Median total errors in population: 1410.2905
Error averages by case: (202.73562440000333 9.373 196.30723329999927 7.269 198.01894299999756 10.605 193.22507050000038 8.61 226.53332760000112 9.761 161.54817659999705 8.676 157.67979519999903 10.522 190.40944890000193 12.049 178.36473829999898 10.9 153.40926690000163 7.745 197.01946890000096 9.412 175.73071029999937 9.319 261.9381924000016 8.92 257.7185806000031 10.548 180.24734739999843 11.186 208.92103100000077 11.325 185.29463519999894 10.456 213.23381289999674 11.022 238.61109520000144 10.423 154.5428174 8.766 256.1553103000017 10.28 197.1926204000009 7.941 236.8573166999986 10.418 208.4780566999981 8.05 226.37604040000213 10.35)
Error minima by case: (16.5441 7 5.9827 6 10.4824 9 36.71 7 37.545 8 27.3077 7 21.7384 9 20.2178 9 33.7519 7 3.3264 6 11.6294 8 7.1389 6 1.7484 8 20.3252 9 37.6254 6 9.0501 9 24.2821 9 9.1005 7 57.3604 8 19.103 6 34.5733 9 9.4072 5 55.8866 8 20.8346 7 43.4733 9)
Average genome size in population (length): 105.094
Average program size in population (points): 106.094
Average percent parens in population: 0.010
Minimum age in population: 59.80440153312179
Maximum age in population: 64.0491864555454
Average age in population: 62.00995302858998
Median age in population: 62.08169583539268
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 4
Genome diversity (% unique Plush genomes):	 0.937
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 4
Syntactic diversity (% unique Push programs):	 0.937
Total error diversity:				 0.24
Error (vector) diversity:			 0.282
Behavioral diversity:				 0.282
--- Run Statistics ---
Number of program evaluations used so far: 45000
Number of point (instruction) evaluations so far: 101923281
--- Timings ---
Current time: 1529615341017 milliseconds
Total Time:         187.6 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        63.5 seconds, 33.9%
Fitness Testing:     97.2 seconds, 51.8%
Report:              26.7 seconds, 14.2%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 44
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 45
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 45
;;******************************
;; -*- Number IO problem report - generation 45
Test total error for best: 60026.23010000001
Test mean error for best: 30.01312
;;------------------------------
Outputs of best individual on training cases:
Correct output: -57.4559422311 | Program output: -74.023621    
Correct output: -71.0754923621 | Program output: -65.023621    
Correct output: -66.5176295557 | Program output: -77.023621    
Correct output: 149.3187378    | Program output: 86.028721     
Correct output: -36.5450493525 | Program output: -83.023621    
Correct output: 75.4021928097  | Program output: 48.024921     
Correct output: 52.2615929867  | Program output: 74.027521     
Correct output: -19.2178367434 | Program output: 43.024421     
Correct output: 66.7518906772  | Program output: 1.023621      
Correct output: 7.673605441    | Program output: 27.023621     
Correct output: 23.6294031682  | Program output: 90.029121     
Correct output: -6.1389033433  | Program output: 38.023921     
Correct output: 9.2516366816   | Program output: -82.023621    
Correct output: 31.3251776267  | Program output: -55.023621    
Correct output: 73.3746496408  | Program output: 0.023621      
Correct output: 20.0500553336  | Program output: -19.023621    
Correct output: -23.2820697498 | Program output: 32.023621     
Correct output: 120.1004999359 | Program output: 30.023621     
Correct output: -155.453212395 | Program output: -98.023621    
Correct output: 31.10301576    | Program output: 10.023621     
Correct output: 45.5733057121  | Program output: -39.023621    
Correct output: -68.592783645  | Program output: -78.023621    
Correct output: -125.979392023 | Program output: -70.023621    
Correct output: -91.9273649148 | Program output: -71.023621    
Correct output: -92.5660607267 | Program output: -49.023621    
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_inc} {:instruction float_add} {:instruction float_yank} {:instruction integer_dup} {:instruction float_sub} {:instruction in2} {:instruction float_inc} {:instruction in2} {:instruction float_inc} {:instruction float_div} {:instruction 85} {:instruction float_inc} {:instruction integer_fromfloat} {:instruction integer_inc} {:instruction float_stackdepth} {:instruction integer_mod} {:instruction float_dup_items} {:instruction integer_dec} {:instruction integer_div} {:instruction integer_pop} {:instruction float_mod} {:instruction integer_shove} {:instruction 99} {:instruction integer_dup_items} {:instruction float_yankdup} {:instruction float_rot} {:instruction float_rot} {:instruction integer_flush} {:instruction integer_sub} {:instruction float_add} {:instruction integer_pop} {:instruction float_swap} {:instruction print_float} {:instruction integer_add} {:instruction 27} {:instruction float_sub} {:instruction float_sub} {:instruction float_tan} {:instruction integer_yank} {:instruction integer_min} {:instruction integer_min} {:instruction float_max} {:instruction integer_sub} {:instruction 9} {:instruction float_swap} {:instruction integer_stackdepth} {:instruction float_frominteger} {:instruction tag_float_196} {:instruction float_swap} {:instruction float_rot} {:instruction float_mult} {:instruction integer_stackdepth} {:instruction float_frominteger} {:instruction tag_float_196} {:instruction float_rot} {:instruction integer_add} {:instruction integer_stackdepth} {:instruction float_add} {:instruction in2} {:instruction float_mult} {:instruction integer_stackdepth} {:instruction float_frominteger} {:instruction tag_float_196} {:instruction float_swap} {:instruction float_rot} {:instruction integer_add} {:instruction integer_max} {:instruction float_max} {:instruction integer_stackdepth} {:instruction float_add} {:instruction in2} {:instruction float_frominteger} {:instruction print_float} {:instruction integer_dup} {:instruction float_shove} {:instruction float_shove} {:instruction integer_inc} {:instruction float_mod} {:instruction integer_dup} {:instruction integer_dup_items} {:instruction print_integer} {:instruction integer_shove} {:instruction integer_yank} {:instruction print_integer} {:instruction integer_shove} {:instruction print_float} {:instruction integer_div} {:instruction integer_sub} {:instruction float_sub} {:instruction integer_mod} {:instruction print_integer} {:instruction integer_mult} {:instruction integer_stackdepth} {:instruction integer_dup_items} {:instruction print_integer} {:instruction integer_shove} {:instruction integer_yank} {:instruction print_integer} {:instruction integer_shove} {:instruction print_float} {:instruction integer_div} {:instruction integer_sub} {:instruction integer_fromfloat} {:instruction integer_mod} {:instruction print_integer} {:instruction integer_mult} {:instruction integer_stackdepth} {:instruction tag_float_291} {:instruction integer_inc} {:instruction float_swap} {:instruction print_integer} {:instruction integer_mod} {:instruction float_mod} {:instruction float_mod} {:instruction float_inc} {:instruction integer_dup} {:instruction integer_flush} {:instruction float_div} {:instruction -51} {:instruction integer_dec} {:instruction float_sub} {:instruction float_tan})
Best program: (integer_inc float_add float_yank integer_dup float_sub in2 float_inc in2 float_inc float_div 85 float_inc integer_fromfloat integer_inc float_stackdepth integer_mod float_dup_items integer_dec integer_div integer_pop float_mod integer_shove 99 integer_dup_items float_yankdup float_rot float_rot integer_flush integer_sub float_add integer_pop float_swap print_float integer_add 27 float_sub float_sub float_tan integer_yank integer_min integer_min float_max integer_sub 9 float_swap integer_stackdepth float_frominteger tag_float_196 float_swap float_rot float_mult integer_stackdepth float_frominteger tag_float_196 float_rot integer_add integer_stackdepth float_add in2 float_mult integer_stackdepth float_frominteger tag_float_196 float_swap float_rot integer_add integer_max float_max integer_stackdepth float_add in2 float_frominteger print_float integer_dup float_shove float_shove integer_inc float_mod integer_dup integer_dup_items print_integer integer_shove integer_yank print_integer integer_shove print_float integer_div integer_sub float_sub integer_mod print_integer integer_mult integer_stackdepth integer_dup_items print_integer integer_shove integer_yank print_integer integer_shove print_float integer_div integer_sub integer_fromfloat integer_mod print_integer integer_mult integer_stackdepth tag_float_291 integer_inc float_swap print_integer integer_mod float_mod float_mod float_inc integer_dup integer_flush float_div -51 integer_dec float_sub float_tan)
Errors: [16.5677 9 6.0519 6 10.506 10 63.29 8 46.4786 9 27.3773 8 21.7659 10 62.2423 12 65.7283 11 19.35 7 66.3997 9 44.1628 9 91.2753 8 86.3488 10 73.351 11 39.0737 11 55.3057 10 90.0769 11 57.4296 10 21.0794 9 84.5969 10 9.4308 7 55.9558 10 20.9037 7 43.5424 10]
Total: 1410.2905
Mean: 28.20581
Genome size: 122
Size: 123
Percent parens: 0.008
--- Population Statistics ---
Average total errors in population: 4894.366063900002
Median total errors in population: 1410.2905
Error averages by case: (178.08691480000184 9.314 169.6498226000003 7.3 173.2431240999981 10.634 186.59602720000015 8.581 202.36901300000108 9.777 155.1266061999972 8.682 150.91294779999905 10.532 183.31755870000146 12.008 169.5142350999993 10.883 146.10202910000146 7.749 189.36241700000065 9.399 169.4519838999996 9.304 238.60267180000133 8.885 234.47852520000254 10.54 169.83031969999828 11.134 185.98829299999983 11.293 177.269712099999 10.421 206.4936940999971 10.994 214.22631750000127 10.386 147.2443452999999 8.676 233.02734920000134 10.285 172.39144170000102 7.93 212.54325819999892 10.432 183.18561579999854 8.065 201.80484080000187 10.343)
Error minima by case: (16.5441 7 6.0205 6 10.4824 9 36.7033 6 36.5824 8 27.3171 7 16.2516 9 19.2633 9 30.7419 7 5.6736 6 1.6294 7 6.1793 7 7.2516 7 4.6848 9 26.6481 7 1.9499 9 23.3194 9 9.9215 8 57.3982 8 4.907 6 9.5633 8 9.4072 6 55.9244 9 20.8723 7 43.511 9)
Average genome size in population (length): 105.256
Average program size in population (points): 106.256
Average percent parens in population: 0.010
Minimum age in population: 60.99097567466742
Maximum age in population: 65.62986572755085
Average age in population: 63.45084182721728
Median age in population: 63.50792577514329
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 4
Genome diversity (% unique Plush genomes):	 0.955
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 4
Syntactic diversity (% unique Push programs):	 0.955
Total error diversity:				 0.241
Error (vector) diversity:			 0.278
Behavioral diversity:				 0.279
--- Run Statistics ---
Number of program evaluations used so far: 46000
Number of point (instruction) evaluations so far: 104555456
--- Timings ---
Current time: 1529615345300 milliseconds
Total Time:         191.8 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        64.8 seconds, 33.8%
Fitness Testing:     99.5 seconds, 51.9%
Report:              27.3 seconds, 14.2%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 45
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 46
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 46
;;******************************
;; -*- Number IO problem report - generation 46
Test total error for best: 60026.23010000001
Test mean error for best: 30.01312
;;------------------------------
Outputs of best individual on training cases:
Correct output: -57.4559422311 | Program output: -74.023621    
Correct output: -71.0754923621 | Program output: -65.023621    
Correct output: -66.5176295557 | Program output: -77.023621    
Correct output: 149.3187378    | Program output: 86.028721     
Correct output: -36.5450493525 | Program output: -83.023621    
Correct output: 75.4021928097  | Program output: 48.024921     
Correct output: 52.2615929867  | Program output: 74.027521     
Correct output: -19.2178367434 | Program output: 43.024421     
Correct output: 66.7518906772  | Program output: 1.023621      
Correct output: 7.673605441    | Program output: 27.023621     
Correct output: 23.6294031682  | Program output: 90.029121     
Correct output: -6.1389033433  | Program output: 38.023921     
Correct output: 9.2516366816   | Program output: -82.023621    
Correct output: 31.3251776267  | Program output: -55.023621    
Correct output: 73.3746496408  | Program output: 0.023621      
Correct output: 20.0500553336  | Program output: -19.023621    
Correct output: -23.2820697498 | Program output: 32.023621     
Correct output: 120.1004999359 | Program output: 30.023621     
Correct output: -155.453212395 | Program output: -98.023621    
Correct output: 31.10301576    | Program output: 10.023621     
Correct output: 45.5733057121  | Program output: -39.023621    
Correct output: -68.592783645  | Program output: -78.023621    
Correct output: -125.979392023 | Program output: -70.023621    
Correct output: -91.9273649148 | Program output: -71.023621    
Correct output: -92.5660607267 | Program output: -49.023621    
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_inc} {:instruction float_add} {:instruction float_yank} {:instruction integer_dup} {:instruction float_min} {:instruction in2} {:instruction float_inc} {:instruction integer_inc} {:instruction float_add} {:instruction 100} {:instruction float_max} {:instruction float_add} {:instruction 99} {:instruction integer_dup_items} {:instruction float_yankdup} {:instruction float_rot} {:instruction float_rot} {:instruction integer_flush} {:instruction float_min} {:instruction print_integer} {:instruction integer_fromfloat} {:instruction integer_pop} {:instruction float_swap} {:instruction print_float} {:instruction float_yankdup} {:instruction integer_dup_times} {:instruction print_integer} {:instruction float_add} {:instruction integer_pop} {:instruction float_yankdup} {:instruction integer_dup_items} {:instruction integer_pop} {:instruction 27} {:instruction float_add} {:instruction float_sub} {:instruction float_tan} {:instruction integer_yank} {:instruction integer_min} {:instruction float_max} {:instruction integer_sub} {:instruction 9} {:instruction float_swap} {:instruction integer_stackdepth} {:instruction float_frominteger} {:instruction tag_float_196} {:instruction float_swap} {:instruction float_rot} {:instruction integer_add} {:instruction integer_max} {:instruction integer_fromfloat} {:instruction integer_stackdepth} {:instruction float_dup} {:instruction in2} {:instruction float_mult} {:instruction integer_stackdepth} {:instruction float_frominteger} {:instruction tag_float_196} {:instruction float_swap} {:instruction float_tan} {:instruction integer_add} {:instruction integer_max} {:instruction float_max} {:instruction integer_stackdepth} {:instruction float_add} {:instruction in2} {:instruction float_frominteger} {:instruction print_float} {:instruction integer_dup} {:instruction float_shove} {:instruction float_mult} {:instruction integer_inc} {:instruction float_mod} {:instruction integer_dup} {:instruction integer_dup_items} {:instruction print_integer} {:instruction integer_shove} {:instruction integer_yank} {:instruction print_integer} {:instruction integer_shove} {:instruction print_float} {:instruction integer_div} {:instruction integer_sub} {:instruction integer_shove} {:instruction integer_yank} {:instruction print_float} {:instruction integer_div} {:instruction integer_sub} {:instruction print_integer} {:instruction integer_shove} {:instruction integer_pop} {:instruction float_mod} {:instruction integer_dup} {:instruction integer_dup_items} {:instruction print_integer} {:instruction integer_shove} {:instruction integer_yank} {:instruction print_integer} {:instruction integer_shove} {:instruction print_integer} {:instruction integer_mult} {:instruction integer_stackdepth} {:instruction tag_float_291} {:instruction integer_inc} {:instruction float_swap} {:instruction print_integer} {:instruction integer_mod} {:instruction float_div} {:instruction float_mod} {:instruction float_inc} {:instruction print_float} {:instruction integer_flush} {:instruction float_cos})
Best program: (integer_inc float_add float_yank integer_dup float_min in2 float_inc integer_inc float_add 100 float_max float_add 99 integer_dup_items float_yankdup float_rot float_rot integer_flush float_min print_integer integer_fromfloat integer_pop float_swap print_float float_yankdup integer_dup_times print_integer float_add integer_pop float_yankdup integer_dup_items integer_pop 27 float_add float_sub float_tan integer_yank integer_min float_max integer_sub 9 float_swap integer_stackdepth float_frominteger tag_float_196 float_swap float_rot integer_add integer_max integer_fromfloat integer_stackdepth float_dup in2 float_mult integer_stackdepth float_frominteger tag_float_196 float_swap float_tan integer_add integer_max float_max integer_stackdepth float_add in2 float_frominteger print_float integer_dup float_shove float_mult integer_inc float_mod integer_dup integer_dup_items print_integer integer_shove integer_yank print_integer integer_shove print_float integer_div integer_sub integer_shove integer_yank print_float integer_div integer_sub print_integer integer_shove integer_pop float_mod integer_dup integer_dup_items print_integer integer_shove integer_yank print_integer integer_shove print_integer integer_mult integer_stackdepth tag_float_291 integer_inc float_swap print_integer integer_mod float_div float_mod float_inc print_float integer_flush float_cos)
Errors: [16.5677 9 6.0519 6 10.506 10 63.29 8 46.4786 9 27.3773 8 21.7659 10 62.2423 12 65.7283 11 19.35 7 66.3997 9 44.1628 9 91.2753 8 86.3488 10 73.351 11 39.0737 11 55.3057 10 90.0769 11 57.4296 10 21.0794 9 84.5969 10 9.4308 7 55.9558 10 20.9037 7 43.5424 10]
Total: 1410.2905
Mean: 28.20581
Genome size: 112
Size: 113
Percent parens: 0.009
--- Population Statistics ---
Average total errors in population: 5150.321081500002
Median total errors in population: 1410.79045
Error averages by case: (192.9182829000023 9.343 184.42657829999965 7.378 188.19290999999785 10.679 193.10910070000048 8.611 216.92943030000103 9.813 161.25225289999705 8.732 157.33960969999916 10.569 188.01506070000184 12.073 172.08330359999894 10.912 152.51560090000171 7.823 195.274954900001 9.447 175.02141049999915 9.375 252.37260200000134 8.95 248.18528680000284 10.558 177.23268499999855 11.175 200.23240860000035 11.339 184.55404029999912 10.477 213.8867480999969 11.053 227.2351435000011 10.414 154.48524299999968 8.72 246.68528230000135 10.288 187.3689563000009 8.044 225.25062579999877 10.419 196.66877719999823 8.125 214.40778720000202 10.36)
Error minima by case: (15.5441 7 6.0141 6 9.4824 9 38.3187 7 36.0415 8 26.3648 7 15.2616 10 18.7143 5 14.2481 7 3.3264 6 11.6294 7 5.6354 5 2.7484 5 3.6848 5 36.3746 7 8.0501 5 22.7785 5 9.1005 7 57.3919 9 3.907 6 8.5733 5 8.4072 7 55.918 9 20.866 7 11.5661 9)
Average genome size in population (length): 104.527
Average program size in population (points): 105.527
Average percent parens in population: 0.010
Minimum age in population: 62.66665909188964
Maximum age in population: 66.83295926590932
Average age in population: 64.90143407769146
Median age in population: 64.90180518699833
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 3
Genome diversity (% unique Plush genomes):	 0.948
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 3
Syntactic diversity (% unique Push programs):	 0.948
Total error diversity:				 0.253
Error (vector) diversity:			 0.292
Behavioral diversity:				 0.293
--- Run Statistics ---
Number of program evaluations used so far: 47000
Number of point (instruction) evaluations so far: 107169281
--- Timings ---
Current time: 1529615349565 milliseconds
Total Time:         196.1 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        66.2 seconds, 33.8%
Fitness Testing:    101.8 seconds, 51.9%
Report:              28.0 seconds, 14.3%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 46
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 47
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 47
;;******************************
;; -*- Number IO problem report - generation 47
Test total error for best: 60026.23010000001
Test mean error for best: 30.01312
;;------------------------------
Outputs of best individual on training cases:
Correct output: -57.4559422311 | Program output: -74.023621    
Correct output: -71.0754923621 | Program output: -65.023621    
Correct output: -66.5176295557 | Program output: -77.023621    
Correct output: 149.3187378    | Program output: 86.028721     
Correct output: -36.5450493525 | Program output: -83.023621    
Correct output: 75.4021928097  | Program output: 48.024921     
Correct output: 52.2615929867  | Program output: 74.027521     
Correct output: -19.2178367434 | Program output: 43.024421     
Correct output: 66.7518906772  | Program output: 1.023621      
Correct output: 7.673605441    | Program output: 27.023621     
Correct output: 23.6294031682  | Program output: 90.029121     
Correct output: -6.1389033433  | Program output: 38.023921     
Correct output: 9.2516366816   | Program output: -82.023621    
Correct output: 31.3251776267  | Program output: -55.023621    
Correct output: 73.3746496408  | Program output: 0.023621      
Correct output: 20.0500553336  | Program output: -19.023621    
Correct output: -23.2820697498 | Program output: 32.023621     
Correct output: 120.1004999359 | Program output: 30.023621     
Correct output: -155.453212395 | Program output: -98.023621    
Correct output: 31.10301576    | Program output: 10.023621     
Correct output: 45.5733057121  | Program output: -39.023621    
Correct output: -68.592783645  | Program output: -78.023621    
Correct output: -125.979392023 | Program output: -70.023621    
Correct output: -91.9273649148 | Program output: -71.023621    
Correct output: -92.5660607267 | Program output: -49.023621    
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_inc} {:instruction float_add} {:instruction float_yank} {:instruction integer_dup} {:instruction integer_yank} {:instruction integer_rot} {:instruction integer_pop} {:instruction integer_dup} {:instruction float_min} {:instruction float_sub} {:instruction float_inc} {:instruction integer_mod} {:instruction integer_sub} {:instruction integer_dec} {:instruction integer_div} {:instruction integer_min} {:instruction float_rot} {:instruction float_rot} {:instruction integer_flush} {:instruction float_min} {:instruction integer_dec} {:instruction integer_flush} {:instruction float_min} {:instruction print_integer} {:instruction float_add} {:instruction integer_pop} {:instruction 27} {:instruction float_sub} {:instruction float_sub} {:instruction float_tan} {:instruction integer_yank} {:instruction integer_min} {:instruction float_max} {:instruction integer_sub} {:instruction 9} {:instruction float_swap} {:instruction integer_stackdepth} {:instruction float_frominteger} {:instruction tag_float_196} {:instruction float_min} {:instruction float_div} {:instruction integer_add} {:instruction integer_max} {:instruction integer_fromfloat} {:instruction integer_stackdepth} {:instruction float_dup} {:instruction in2} {:instruction float_mult} {:instruction integer_stackdepth} {:instruction float_frominteger} {:instruction tag_float_196} {:instruction float_swap} {:instruction integer_stackdepth} {:instruction float_frominteger} {:instruction tag_float_196} {:instruction integer_stackdepth} {:instruction float_frominteger} {:instruction tag_float_196} {:instruction float_swap} {:instruction float_rot} {:instruction integer_add} {:instruction integer_max} {:instruction float_max} {:instruction integer_stackdepth} {:instruction float_add} {:instruction in2} {:instruction float_frominteger} {:instruction print_float} {:instruction integer_dup} {:instruction float_shove} {:instruction float_shove} {:instruction integer_inc} {:instruction float_dec} {:instruction integer_dup} {:instruction integer_dup_items} {:instruction print_integer} {:instruction integer_shove} {:instruction integer_yank} {:instruction print_integer} {:instruction integer_shove} {:instruction print_float} {:instruction integer_div} {:instruction integer_sub} {:instruction integer_fromfloat} {:instruction integer_mod} {:instruction print_integer} {:instruction integer_mult} {:instruction integer_stackdepth} {:instruction tag_float_291} {:instruction integer_inc} {:instruction float_swap} {:instruction print_integer} {:instruction integer_mod} {:instruction float_div} {:instruction float_mod} {:instruction float_inc} {:instruction float_inc} {:instruction integer_flush} {:instruction float_cos})
Best program: (integer_inc float_add float_yank integer_dup integer_yank integer_rot integer_pop integer_dup float_min float_sub float_inc integer_mod integer_sub integer_dec integer_div integer_min float_rot float_rot integer_flush float_min integer_dec integer_flush float_min print_integer float_add integer_pop 27 float_sub float_sub float_tan integer_yank integer_min float_max integer_sub 9 float_swap integer_stackdepth float_frominteger tag_float_196 float_min float_div integer_add integer_max integer_fromfloat integer_stackdepth float_dup in2 float_mult integer_stackdepth float_frominteger tag_float_196 float_swap integer_stackdepth float_frominteger tag_float_196 integer_stackdepth float_frominteger tag_float_196 float_swap float_rot integer_add integer_max float_max integer_stackdepth float_add in2 float_frominteger print_float integer_dup float_shove float_shove integer_inc float_dec integer_dup integer_dup_items print_integer integer_shove integer_yank print_integer integer_shove print_float integer_div integer_sub integer_fromfloat integer_mod print_integer integer_mult integer_stackdepth tag_float_291 integer_inc float_swap print_integer integer_mod float_div float_mod float_inc float_inc integer_flush float_cos)
Errors: [16.5677 9 6.0519 6 10.506 10 63.29 8 46.4786 9 27.3773 8 21.7659 10 62.2423 12 65.7283 11 19.35 7 66.3997 9 44.1628 9 91.2753 8 86.3488 10 73.351 11 39.0737 11 55.3057 10 90.0769 11 57.4296 10 21.0794 9 84.5969 10 9.4308 7 55.9558 10 20.9037 7 43.5424 10]
Total: 1410.2905
Mean: 28.20581
Genome size: 99
Size: 100
Percent parens: 0.010
--- Population Statistics ---
Average total errors in population: 4969.479199200003
Median total errors in population: 1410.2905
Error averages by case: (184.01604060000224 9.364 176.5237916999998 7.325 179.3079930999978 10.634 186.94947209999998 8.568 208.1282164000014 9.753 154.86966229999734 8.721 151.884488699999 10.532 185.02338920000167 12.025 163.9359808999997 10.909 148.5168022000016 7.73 190.24071390000051 9.405 170.15381619999988 9.315 243.80137530000138 8.87 239.1593187000031 10.54 170.96599609999842 11.149 185.02472720000003 11.318 180.74084789999873 10.466 208.71864209999686 11.021 220.28560020000145 10.407 148.12159540000036 8.688 236.72626640000155 10.305 178.49021260000114 7.968 218.0292146999987 10.411 189.04309179999814 8.072 206.9739435000023 10.352)
Error minima by case: (15.5814 7 6.0078 6 9.5197 9 36.7049 6 37.545 8 0.7163 7 7.7662 9 20.2178 9 6.7283 7 2.6443 6 12.3706 8 7.1389 7 7.2516 8 3.6848 9 1.3113 6 6.9599 9 24.2821 8 9.9231 8 57.4099 9 3.907 6 8.5633 8 8.4446 7 55.9067 9 20.8536 7 38.4339 9)
Average genome size in population (length): 104.854
Average program size in population (points): 105.854
Average percent parens in population: 0.010
Minimum age in population: 63.69800410163413
Maximum age in population: 68.15880186968317
Average age in population: 66.30473974516315
Median age in population: 66.34759317082732
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 3
Genome diversity (% unique Plush genomes):	 0.945
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 3
Syntactic diversity (% unique Push programs):	 0.945
Total error diversity:				 0.244
Error (vector) diversity:			 0.288
Behavioral diversity:				 0.288
--- Run Statistics ---
Number of program evaluations used so far: 48000
Number of point (instruction) evaluations so far: 109791281
--- Timings ---
Current time: 1529615354329 milliseconds
Total Time:         200.7 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        67.6 seconds, 33.7%
Fitness Testing:    104.4 seconds, 52.0%
Report:              28.6 seconds, 14.2%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 47
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 48
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 48
;;******************************
;; -*- Number IO problem report - generation 48
Test total error for best: 60026.23010000001
Test mean error for best: 30.01312
;;------------------------------
Outputs of best individual on training cases:
Correct output: -57.4559422311 | Program output: -74.023621    
Correct output: -71.0754923621 | Program output: -65.023621    
Correct output: -66.5176295557 | Program output: -77.023621    
Correct output: 149.3187378    | Program output: 86.028721     
Correct output: -36.5450493525 | Program output: -83.023621    
Correct output: 75.4021928097  | Program output: 48.024921     
Correct output: 52.2615929867  | Program output: 74.027521     
Correct output: -19.2178367434 | Program output: 43.024421     
Correct output: 66.7518906772  | Program output: 1.023621      
Correct output: 7.673605441    | Program output: 27.023621     
Correct output: 23.6294031682  | Program output: 90.029121     
Correct output: -6.1389033433  | Program output: 38.023921     
Correct output: 9.2516366816   | Program output: -82.023621    
Correct output: 31.3251776267  | Program output: -55.023621    
Correct output: 73.3746496408  | Program output: 0.023621      
Correct output: 20.0500553336  | Program output: -19.023621    
Correct output: -23.2820697498 | Program output: 32.023621     
Correct output: 120.1004999359 | Program output: 30.023621     
Correct output: -155.453212395 | Program output: -98.023621    
Correct output: 31.10301576    | Program output: 10.023621     
Correct output: 45.5733057121  | Program output: -39.023621    
Correct output: -68.592783645  | Program output: -78.023621    
Correct output: -125.979392023 | Program output: -70.023621    
Correct output: -91.9273649148 | Program output: -71.023621    
Correct output: -92.5660607267 | Program output: -49.023621    
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_inc} {:instruction float_add} {:instruction float_yank} {:instruction integer_dup} {:instruction float_min} {:instruction in2} {:instruction float_inc} {:instruction tagged_957} {:instruction float_mult} {:instruction float_mult} {:instruction float_sub} {:instruction integer_mod} {:instruction integer_pop} {:instruction float_yankdup} {:instruction print_float} {:instruction float_flush} {:instruction 27} {:instruction float_sub} {:instruction integer_shove} {:instruction integer_dup_times} {:instruction 27} {:instruction float_sub} {:instruction integer_max} {:instruction float_tan} {:instruction integer_yank} {:instruction integer_min} {:instruction float_max} {:instruction integer_sub} {:instruction 9} {:instruction float_mult} {:instruction integer_stackdepth} {:instruction float_frominteger} {:instruction tag_float_196} {:instruction float_swap} {:instruction float_rot} {:instruction integer_add} {:instruction integer_max} {:instruction float_max} {:instruction integer_stackdepth} {:instruction float_add} {:instruction in2} {:instruction float_rot} {:instruction integer_add} {:instruction integer_max} {:instruction float_sin} {:instruction integer_stackdepth} {:instruction float_frominteger} {:instruction tag_float_196} {:instruction float_swap} {:instruction float_max} {:instruction integer_stackdepth} {:instruction float_add} {:instruction in2} {:instruction float_rot} {:instruction integer_add} {:instruction integer_max} {:instruction float_max} {:instruction float_max} {:instruction integer_stackdepth} {:instruction float_add} {:instruction in2} {:instruction float_frominteger} {:instruction print_float} {:instruction integer_dup} {:instruction float_shove} {:instruction float_shove} {:instruction integer_inc} {:instruction float_mod} {:instruction integer_dup} {:instruction integer_dup_items} {:instruction print_integer} {:instruction integer_shove} {:instruction integer_yank} {:instruction print_integer} {:instruction integer_shove} {:instruction print_float} {:instruction integer_div} {:instruction integer_sub} {:instruction print_integer} {:instruction integer_shove} {:instruction print_float} {:instruction integer_div} {:instruction integer_fromfloat} {:instruction float_sub} {:instruction integer_stackdepth} {:instruction tag_float_291} {:instruction integer_inc} {:instruction float_swap} {:instruction print_integer} {:instruction integer_mod} {:instruction print_integer} {:instruction float_mod})
Best program: (integer_inc float_add float_yank integer_dup float_min in2 float_inc tagged_957 float_mult float_mult float_sub integer_mod integer_pop float_yankdup print_float float_flush 27 float_sub integer_shove integer_dup_times 27 float_sub integer_max float_tan integer_yank integer_min float_max integer_sub 9 float_mult integer_stackdepth float_frominteger tag_float_196 float_swap float_rot integer_add integer_max float_max integer_stackdepth float_add in2 float_rot integer_add integer_max float_sin integer_stackdepth float_frominteger tag_float_196 float_swap float_max integer_stackdepth float_add in2 float_rot integer_add integer_max float_max float_max integer_stackdepth float_add in2 float_frominteger print_float integer_dup float_shove float_shove integer_inc float_mod integer_dup integer_dup_items print_integer integer_shove integer_yank print_integer integer_shove print_float integer_div integer_sub print_integer integer_shove print_float integer_div integer_fromfloat float_sub integer_stackdepth tag_float_291 integer_inc float_swap print_integer integer_mod print_integer float_mod)
Errors: [16.5677 9 6.0519 6 10.506 10 63.29 8 46.4786 9 27.3773 8 21.7659 10 62.2423 12 65.7283 11 19.35 7 66.3997 9 44.1628 9 91.2753 8 86.3488 10 73.351 11 39.0737 11 55.3057 10 90.0769 11 57.4296 10 21.0794 9 84.5969 10 9.4308 7 55.9558 10 20.9037 7 43.5424 10]
Total: 1410.2905
Mean: 28.20581
Genome size: 92
Size: 93
Percent parens: 0.011
--- Population Statistics ---
Average total errors in population: 5179.880735399999
Median total errors in population: 1410.2905
Error averages by case: (194.80911850000243 9.405 185.7566595999996 7.365 190.27985629999787 10.667 192.86531190000022 8.672 218.06287230000112 9.809 159.925035899997 8.762 157.16186849999912 10.554 190.52427800000186 12.068 178.9553310999987 10.966 155.19438450000166 7.794 195.9183853000011 9.422 173.65847019999973 9.403 251.5831805000018 8.965 248.2111038000028 10.596 178.49656469999826 11.195 201.88081170000095 11.379 184.1851033999988 10.51 212.4789176999967 11.046 230.23706250000117 10.472 155.15845799999954 8.767 246.6880910000014 10.338 188.50369340000097 8.04 228.90565419999885 10.492 198.20770789999838 8.157 216.9598145000021 10.429)
Error minima by case: (16.5441 7 6.0145 6 10.4824 9 36.71 7 36.5687 8 25.4022 7 21.7384 9 19.2423 9 25.7192 7 1.3547 6 3.3806 8 6.1628 7 0.2234 7 4.3152 9 27.6254 6 1.0501 9 23.3057 9 9.9231 8 57.3922 8 4.093 6 0.5733 9 9.4072 6 55.9184 8 20.8664 7 28.4339 8)
Average genome size in population (length): 105.186
Average program size in population (points): 106.186
Average percent parens in population: 0.010
Minimum age in population: 65.14099290382592
Maximum age in population: 69.99588056779625
Average age in population: 67.75376359158291
Median age in population: 67.76574791010039
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 4
Genome diversity (% unique Plush genomes):	 0.942
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 4
Syntactic diversity (% unique Push programs):	 0.942
Total error diversity:				 0.257
Error (vector) diversity:			 0.295
Behavioral diversity:				 0.295
--- Run Statistics ---
Number of program evaluations used so far: 49000
Number of point (instruction) evaluations so far: 112421631
--- Timings ---
Current time: 1529615358586 milliseconds
Total Time:         205.2 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        69.0 seconds, 33.6%
Fitness Testing:    106.7 seconds, 52.0%
Report:              29.3 seconds, 14.3%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 48
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 49
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 49
;;******************************
;; -*- Number IO problem report - generation 49
Test total error for best: 60026.23010000001
Test mean error for best: 30.01312
;;------------------------------
Outputs of best individual on training cases:
Correct output: -57.4559422311 | Program output: -74.023621    
Correct output: -71.0754923621 | Program output: -65.023621    
Correct output: -66.5176295557 | Program output: -77.023621    
Correct output: 149.3187378    | Program output: 86.028721     
Correct output: -36.5450493525 | Program output: -83.023621    
Correct output: 75.4021928097  | Program output: 48.024921     
Correct output: 52.2615929867  | Program output: 74.027521     
Correct output: -19.2178367434 | Program output: 43.024421     
Correct output: 66.7518906772  | Program output: 1.023621      
Correct output: 7.673605441    | Program output: 27.023621     
Correct output: 23.6294031682  | Program output: 90.029121     
Correct output: -6.1389033433  | Program output: 38.023921     
Correct output: 9.2516366816   | Program output: -82.023621    
Correct output: 31.3251776267  | Program output: -55.023621    
Correct output: 73.3746496408  | Program output: 0.023621      
Correct output: 20.0500553336  | Program output: -19.023621    
Correct output: -23.2820697498 | Program output: 32.023621     
Correct output: 120.1004999359 | Program output: 30.023621     
Correct output: -155.453212395 | Program output: -98.023621    
Correct output: 31.10301576    | Program output: 10.023621     
Correct output: 45.5733057121  | Program output: -39.023621    
Correct output: -68.592783645  | Program output: -78.023621    
Correct output: -125.979392023 | Program output: -70.023621    
Correct output: -91.9273649148 | Program output: -71.023621    
Correct output: -92.5660607267 | Program output: -49.023621    
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_yank} {:instruction integer_rot} {:instruction integer_stackdepth} {:instruction float_yankdup} {:instruction float_dup_items} {:instruction float_shove} {:instruction float_tan} {:instruction integer_fromfloat} {:instruction float_mult} {:instruction integer_flush} {:instruction float_sub} {:instruction 100} {:instruction integer_dup_items} {:instruction float_yankdup} {:instruction float_rot} {:instruction float_rot} {:instruction integer_flush} {:instruction float_min} {:instruction print_integer} {:instruction float_add} {:instruction integer_pop} {:instruction float_yankdup} {:instruction print_float} {:instruction integer_pop} {:instruction float_rot} {:instruction integer_flush} {:instruction float_min} {:instruction print_integer} {:instruction float_add} {:instruction integer_pop} {:instruction float_yankdup} {:instruction print_float} {:instruction integer_pop} {:instruction 27} {:instruction float_sub} {:instruction float_sub} {:instruction float_tan} {:instruction integer_yank} {:instruction integer_min} {:instruction float_max} {:instruction integer_sub} {:instruction 9} {:instruction integer_fromfloat} {:instruction integer_pop} {:instruction 27} {:instruction float_sub} {:instruction float_sub} {:instruction integer_stackdepth} {:instruction integer_yank} {:instruction integer_min} {:instruction float_max} {:instruction float_sub} {:instruction float_sub} {:instruction float_sub} {:instruction float_tan} {:instruction print_float} {:instruction integer_pop} {:instruction 27} {:instruction float_sub} {:instruction float_sub} {:instruction float_tan} {:instruction integer_yank} {:instruction integer_min} {:instruction float_max} {:instruction integer_sub} {:instruction 9} {:instruction float_mult} {:instruction integer_stackdepth} {:instruction float_frominteger} {:instruction tag_float_196} {:instruction float_swap} {:instruction float_rot} {:instruction integer_add} {:instruction integer_stackdepth} {:instruction float_add} {:instruction in2} {:instruction float_mult} {:instruction integer_stackdepth} {:instruction float_frominteger} {:instruction tag_float_196} {:instruction float_swap} {:instruction float_rot} {:instruction integer_add} {:instruction integer_max} {:instruction float_max} {:instruction integer_stackdepth} {:instruction float_add} {:instruction in2} {:instruction float_frominteger} {:instruction print_float} {:instruction integer_dup} {:instruction float_shove} {:instruction float_shove} {:instruction integer_inc} {:instruction float_mod} {:instruction integer_dup} {:instruction integer_dup_items} {:instruction print_integer} {:instruction integer_shove} {:instruction integer_yank} {:instruction print_integer} {:instruction integer_shove} {:instruction print_float} {:instruction integer_div} {:instruction integer_sub} {:instruction float_sub} {:instruction integer_mod} {:instruction print_integer} {:instruction integer_mult} {:instruction integer_stackdepth} {:instruction integer_mod} {:instruction integer_inc} {:instruction float_swap} {:instruction print_integer} {:instruction print_integer} {:instruction integer_mod} {:instruction float_div} {:instruction float_mod} {:instruction float_inc} {:instruction print_float} {:instruction float_shove})
Best program: (float_yank integer_rot integer_stackdepth float_yankdup float_dup_items float_shove float_tan integer_fromfloat float_mult integer_flush float_sub 100 integer_dup_items float_yankdup float_rot float_rot integer_flush float_min print_integer float_add integer_pop float_yankdup print_float integer_pop float_rot integer_flush float_min print_integer float_add integer_pop float_yankdup print_float integer_pop 27 float_sub float_sub float_tan integer_yank integer_min float_max integer_sub 9 integer_fromfloat integer_pop 27 float_sub float_sub integer_stackdepth integer_yank integer_min float_max float_sub float_sub float_sub float_tan print_float integer_pop 27 float_sub float_sub float_tan integer_yank integer_min float_max integer_sub 9 float_mult integer_stackdepth float_frominteger tag_float_196 float_swap float_rot integer_add integer_stackdepth float_add in2 float_mult integer_stackdepth float_frominteger tag_float_196 float_swap float_rot integer_add integer_max float_max integer_stackdepth float_add in2 float_frominteger print_float integer_dup float_shove float_shove integer_inc float_mod integer_dup integer_dup_items print_integer integer_shove integer_yank print_integer integer_shove print_float integer_div integer_sub float_sub integer_mod print_integer integer_mult integer_stackdepth integer_mod integer_inc float_swap print_integer print_integer integer_mod float_div float_mod float_inc print_float float_shove)
Errors: [16.5677 9 6.0519 6 10.506 10 63.29 8 46.4786 9 27.3773 8 21.7659 10 62.2423 12 65.7283 11 19.35 7 66.3997 9 44.1628 9 91.2753 8 86.3488 10 73.351 11 39.0737 11 55.3057 10 90.0769 11 57.4296 10 21.0794 9 84.5969 10 9.4308 7 55.9558 10 20.9037 7 43.5424 10]
Total: 1410.2905
Mean: 28.20581
Genome size: 121
Size: 122
Percent parens: 0.008
--- Population Statistics ---
Average total errors in population: 5530.5915262
Median total errors in population: 1410.2905
Error averages by case: (210.47304990000265 9.372 203.4894052999994 7.391 205.8988505999979 10.67 205.99489020000078 8.602 233.5438813000011 9.816 173.6522774999974 8.737 172.4629074999991 10.559 203.09867330000216 12.019 187.45642149999884 10.915 166.80299090000125 7.77 209.16274350000126 9.436 190.53435269999903 9.362 267.9105174000012 8.932 263.9721003000027 10.585 183.76865439999838 11.154 212.4337506000004 11.342 198.17935969999908 10.484 225.25366969999703 11.022 245.50846720000135 10.424 168.74433819999928 8.685 260.7488922000016 10.306 204.2569180000008 8.031 243.76204349999878 10.413 215.56511949999842 8.148 233.34925130000192 10.393)
Error minima by case: (15.5441 7 6.0319 6 9.4824 9 36.6913 7 37.5824 8 25.4022 7 21.7384 9 20.2539 7 29.7519 5 1.3547 6 14.6011 8 7.175 6 0.2234 7 4.6748 8 37.3546 4 11.0218 7 24.3194 7 9.1005 6 57.4096 7 4.897 6 9.5533 8 8.4072 7 55.9358 7 20.8838 7 43.5225 7)
Average genome size in population (length): 104.101
Average program size in population (points): 105.101
Average percent parens in population: 0.010
Minimum age in population: 66.5052786244778
Maximum age in population: 70.99188874995885
Average age in population: 69.14589532862824
Median age in population: 69.16059671213974
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 4
Genome diversity (% unique Plush genomes):	 0.922
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 4
Syntactic diversity (% unique Push programs):	 0.922
Total error diversity:				 0.25
Error (vector) diversity:			 0.298
Behavioral diversity:				 0.298
--- Run Statistics ---
Number of program evaluations used so far: 50000
Number of point (instruction) evaluations so far: 115024956
--- Timings ---
Current time: 1529615363313 milliseconds
Total Time:         209.7 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        70.4 seconds, 33.6%
Fitness Testing:    109.2 seconds, 52.1%
Report:              29.9 seconds, 14.3%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 49
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 50
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 50
;;******************************
;; -*- Number IO problem report - generation 50
Test total error for best: 60026.23010000001
Test mean error for best: 30.01312
;;------------------------------
Outputs of best individual on training cases:
Correct output: -57.4559422311 | Program output: -74.023621    
Correct output: -71.0754923621 | Program output: -65.023621    
Correct output: -66.5176295557 | Program output: -77.023621    
Correct output: 149.3187378    | Program output: 86.028721     
Correct output: -36.5450493525 | Program output: -83.023621    
Correct output: 75.4021928097  | Program output: 48.024921     
Correct output: 52.2615929867  | Program output: 74.027521     
Correct output: -19.2178367434 | Program output: 43.024421     
Correct output: 66.7518906772  | Program output: 1.023621      
Correct output: 7.673605441    | Program output: 27.023621     
Correct output: 23.6294031682  | Program output: 90.029121     
Correct output: -6.1389033433  | Program output: 38.023921     
Correct output: 9.2516366816   | Program output: -82.023621    
Correct output: 31.3251776267  | Program output: -55.023621    
Correct output: 73.3746496408  | Program output: 0.023621      
Correct output: 20.0500553336  | Program output: -19.023621    
Correct output: -23.2820697498 | Program output: 32.023621     
Correct output: 120.1004999359 | Program output: 30.023621     
Correct output: -155.453212395 | Program output: -98.023621    
Correct output: 31.10301576    | Program output: 10.023621     
Correct output: 45.5733057121  | Program output: -39.023621    
Correct output: -68.592783645  | Program output: -78.023621    
Correct output: -125.979392023 | Program output: -70.023621    
Correct output: -91.9273649148 | Program output: -71.023621    
Correct output: -92.5660607267 | Program output: -49.023621    
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_yank} {:instruction integer_flush} {:instruction integer_stackdepth} {:instruction float_yankdup} {:instruction float_dup_items} {:instruction float_shove} {:instruction integer_sub} {:instruction float_dec} {:instruction float_rot} {:instruction float_add} {:instruction integer_mod} {:instruction integer_dup_items} {:instruction float_sub} {:instruction 100} {:instruction integer_dup_items} {:instruction float_add} {:instruction float_mult} {:instruction float_sub} {:instruction integer_flush} {:instruction float_min} {:instruction print_integer} {:instruction integer_yankdup} {:instruction float_dup} {:instruction integer_inc} {:instruction print_float} {:instruction integer_swap} {:instruction float_add} {:instruction integer_pop} {:instruction float_yankdup} {:instruction print_float} {:instruction float_sub} {:instruction 27} {:instruction float_sub} {:instruction float_sub} {:instruction float_tan} {:instruction integer_yank} {:instruction integer_min} {:instruction float_max} {:instruction integer_sub} {:instruction 9} {:instruction float_swap} {:instruction integer_stackdepth} {:instruction float_frominteger} {:instruction tag_float_196} {:instruction float_swap} {:instruction float_rot} {:instruction integer_add} {:instruction integer_max} {:instruction integer_fromfloat} {:instruction integer_stackdepth} {:instruction float_add} {:instruction in2} {:instruction float_mult} {:instruction integer_stackdepth} {:instruction float_frominteger} {:instruction tag_float_196} {:instruction float_swap} {:instruction float_rot} {:instruction integer_add} {:instruction integer_max} {:instruction integer_stackdepth} {:instruction float_add} {:instruction in2} {:instruction float_frominteger} {:instruction print_float} {:instruction integer_dup} {:instruction float_shove} {:instruction float_shove} {:instruction integer_inc} {:instruction float_mod} {:instruction integer_dup} {:instruction integer_dup_items} {:instruction print_integer} {:instruction integer_shove} {:instruction integer_yank} {:instruction print_integer} {:instruction integer_shove} {:instruction integer_dup_times} {:instruction integer_div} {:instruction integer_yank} {:instruction integer_fromfloat} {:instruction integer_mod} {:instruction print_integer} {:instruction integer_mult} {:instruction integer_stackdepth} {:instruction tag_float_198} {:instruction integer_inc} {:instruction float_swap} {:instruction print_integer} {:instruction integer_inc} {:instruction float_swap} {:instruction print_integer} {:instruction integer_mod} {:instruction float_div} {:instruction float_mod} {:instruction float_inc} {:instruction print_float} {:instruction integer_flush} {:instruction float_cos} {:instruction -51} {:instruction float_div} {:instruction integer_inc} {:instruction float_pop} {:instruction print_float} {:instruction integer_flush} {:instruction float_cos} {:instruction -51} {:instruction integer_dec} {:instruction float_sub} {:instruction float_tan})
Best program: (float_yank integer_flush integer_stackdepth float_yankdup float_dup_items float_shove integer_sub float_dec float_rot float_add integer_mod integer_dup_items float_sub 100 integer_dup_items float_add float_mult float_sub integer_flush float_min print_integer integer_yankdup float_dup integer_inc print_float integer_swap float_add integer_pop float_yankdup print_float float_sub 27 float_sub float_sub float_tan integer_yank integer_min float_max integer_sub 9 float_swap integer_stackdepth float_frominteger tag_float_196 float_swap float_rot integer_add integer_max integer_fromfloat integer_stackdepth float_add in2 float_mult integer_stackdepth float_frominteger tag_float_196 float_swap float_rot integer_add integer_max integer_stackdepth float_add in2 float_frominteger print_float integer_dup float_shove float_shove integer_inc float_mod integer_dup integer_dup_items print_integer integer_shove integer_yank print_integer integer_shove integer_dup_times integer_div integer_yank integer_fromfloat integer_mod print_integer integer_mult integer_stackdepth tag_float_198 integer_inc float_swap print_integer integer_inc float_swap print_integer integer_mod float_div float_mod float_inc print_float integer_flush float_cos -51 float_div integer_inc float_pop print_float integer_flush float_cos -51 integer_dec float_sub float_tan)
Errors: [16.5677 9 6.0519 6 10.506 10 63.29 8 46.4786 9 27.3773 8 21.7659 10 62.2423 12 65.7283 11 19.35 7 66.3997 9 44.1628 9 91.2753 8 86.3488 10 73.351 11 39.0737 11 55.3057 10 90.0769 11 57.4296 10 21.0794 9 84.5969 10 9.4308 7 55.9558 10 20.9037 7 43.5424 10]
Total: 1410.2905
Mean: 28.20581
Genome size: 110
Size: 111
Percent parens: 0.009
--- Population Statistics ---
Average total errors in population: 5015.6075339
Median total errors in population: 1410.2905
Error averages by case: (191.6046962000024 9.379 184.99321449999974 7.304 187.57829949999774 10.656 182.8326594 8.567 215.73301460000127 9.79 149.72914609999745 8.714 146.59632139999917 10.543 179.14437810000143 12.046 166.6665858999994 10.92 141.7499747000014 7.742 185.61977800000062 9.407 163.5097675000001 9.339 250.0339949000012 8.879 246.51028850000282 10.541 169.64762659999843 11.154 195.5683096000002 11.34 172.50502359999885 10.463 201.61217799999707 11.055 227.91045270000134 10.421 142.1040637000004 8.756 245.0137608000013 10.305 186.20647250000098 7.979 225.74402689999886 10.424 197.4351118999983 8.089 215.34138830000225 10.404)
Error minima by case: (15.5814 7 5.0519 5 9.5197 9 36.71 4 36.545 8 26.3648 5 20.7659 9 19.2178 5 24.2764 4 1.3547 6 14.6011 8 4.8611 5 0.2234 4 4.6848 5 16.6536 3 11.0218 4 23.2821 5 9.9226 3 56.4296 5 4.907 4 9.5633 5 8.4446 7 54.9558 5 19.9037 5 42.5424 5)
Average genome size in population (length): 104.53
Average program size in population (points): 105.53
Average percent parens in population: 0.010
Minimum age in population: 67.5052786244778
Maximum age in population: 72.65029530729132
Average age in population: 70.52612998046489
Median age in population: 70.55492868167902
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 7
Genome diversity (% unique Plush genomes):	 0.934
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 7
Syntactic diversity (% unique Push programs):	 0.934
Total error diversity:				 0.236
Error (vector) diversity:			 0.28
Behavioral diversity:				 0.28
--- Run Statistics ---
Number of program evaluations used so far: 51000
Number of point (instruction) evaluations so far: 117639081
--- Timings ---
Current time: 1529615367578 milliseconds
Total Time:         214.1 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        71.8 seconds, 33.5%
Fitness Testing:    111.5 seconds, 52.1%
Report:              30.7 seconds, 14.3%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 50
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 51
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 51
;;******************************
;; -*- Number IO problem report - generation 51
Test total error for best: 60026.23010000001
Test mean error for best: 30.01312
;;------------------------------
Outputs of best individual on training cases:
Correct output: -57.4559422311 | Program output: -74.023621    
Correct output: -71.0754923621 | Program output: -65.023621    
Correct output: -66.5176295557 | Program output: -77.023621    
Correct output: 149.3187378    | Program output: 86.028721     
Correct output: -36.5450493525 | Program output: -83.023621    
Correct output: 75.4021928097  | Program output: 48.024921     
Correct output: 52.2615929867  | Program output: 74.027521     
Correct output: -19.2178367434 | Program output: 43.024421     
Correct output: 66.7518906772  | Program output: 1.023621      
Correct output: 7.673605441    | Program output: 27.023621     
Correct output: 23.6294031682  | Program output: 90.029121     
Correct output: -6.1389033433  | Program output: 38.023921     
Correct output: 9.2516366816   | Program output: -82.023621    
Correct output: 31.3251776267  | Program output: -55.023621    
Correct output: 73.3746496408  | Program output: 0.023621      
Correct output: 20.0500553336  | Program output: -19.023621    
Correct output: -23.2820697498 | Program output: 32.023621     
Correct output: 120.1004999359 | Program output: 30.023621     
Correct output: -155.453212395 | Program output: -98.023621    
Correct output: 31.10301576    | Program output: 10.023621     
Correct output: 45.5733057121  | Program output: -39.023621    
Correct output: -68.592783645  | Program output: -78.023621    
Correct output: -125.979392023 | Program output: -70.023621    
Correct output: -91.9273649148 | Program output: -71.023621    
Correct output: -92.5660607267 | Program output: -49.023621    
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_inc} {:instruction float_add} {:instruction integer_inc} {:instruction integer_inc} {:instruction float_add} {:instruction integer_inc} {:instruction float_add} {:instruction float_frominteger} {:instruction in2} {:instruction float_inc} {:instruction float_dup} {:instruction float_mult} {:instruction float_sub} {:instruction float_rot} {:instruction integer_flush} {:instruction float_min} {:instruction print_integer} {:instruction float_add} {:instruction in2} {:instruction integer_stackdepth} {:instruction float_rot} {:instruction float_mult} {:instruction integer_flush} {:instruction integer_pop} {:instruction integer_pop} {:instruction print_integer} {:instruction float_add} {:instruction 27} {:instruction float_sub} {:instruction float_sub} {:instruction float_tan} {:instruction integer_yank} {:instruction integer_min} {:instruction float_max} {:instruction integer_sub} {:instruction 9} {:instruction float_swap} {:instruction integer_stackdepth} {:instruction float_frominteger} {:instruction tag_float_196} {:instruction float_min} {:instruction float_div} {:instruction integer_add} {:instruction integer_max} {:instruction integer_fromfloat} {:instruction integer_stackdepth} {:instruction float_dup} {:instruction integer_dup} {:instruction float_mult} {:instruction integer_stackdepth} {:instruction float_frominteger} {:instruction tag_float_196} {:instruction float_rot} {:instruction integer_add} {:instruction integer_max} {:instruction integer_fromfloat} {:instruction integer_stackdepth} {:instruction float_add} {:instruction in2} {:instruction float_rot} {:instruction integer_add} {:instruction integer_max} {:instruction float_max} {:instruction integer_max} {:instruction float_max} {:instruction integer_stackdepth} {:instruction float_add} {:instruction in2} {:instruction float_frominteger} {:instruction print_float} {:instruction integer_dup} {:instruction float_shove} {:instruction float_shove} {:instruction integer_inc} {:instruction float_mod} {:instruction integer_dup} {:instruction integer_dup_items} {:instruction print_integer} {:instruction integer_shove} {:instruction integer_yank} {:instruction print_integer} {:instruction integer_shove} {:instruction integer_yank} {:instruction print_integer} {:instruction print_integer} {:instruction integer_shove} {:instruction integer_yank} {:instruction print_integer} {:instruction integer_shove} {:instruction print_float} {:instruction integer_div} {:instruction integer_sub} {:instruction integer_mod} {:instruction print_integer} {:instruction integer_mult} {:instruction integer_stackdepth} {:instruction tag_float_291} {:instruction integer_inc} {:instruction float_swap} {:instruction print_integer} {:instruction integer_mod} {:instruction float_div} {:instruction integer_inc} {:instruction float_swap} {:instruction print_integer} {:instruction integer_mod} {:instruction print_integer} {:instruction float_mod})
Best program: (integer_inc float_add integer_inc integer_inc float_add integer_inc float_add float_frominteger in2 float_inc float_dup float_mult float_sub float_rot integer_flush float_min print_integer float_add in2 integer_stackdepth float_rot float_mult integer_flush integer_pop integer_pop print_integer float_add 27 float_sub float_sub float_tan integer_yank integer_min float_max integer_sub 9 float_swap integer_stackdepth float_frominteger tag_float_196 float_min float_div integer_add integer_max integer_fromfloat integer_stackdepth float_dup integer_dup float_mult integer_stackdepth float_frominteger tag_float_196 float_rot integer_add integer_max integer_fromfloat integer_stackdepth float_add in2 float_rot integer_add integer_max float_max integer_max float_max integer_stackdepth float_add in2 float_frominteger print_float integer_dup float_shove float_shove integer_inc float_mod integer_dup integer_dup_items print_integer integer_shove integer_yank print_integer integer_shove integer_yank print_integer print_integer integer_shove integer_yank print_integer integer_shove print_float integer_div integer_sub integer_mod print_integer integer_mult integer_stackdepth tag_float_291 integer_inc float_swap print_integer integer_mod float_div integer_inc float_swap print_integer integer_mod print_integer float_mod)
Errors: [16.5677 9 6.0519 6 10.506 10 63.29 8 46.4786 9 27.3773 8 21.7659 10 62.2423 12 65.7283 11 19.35 7 66.3997 9 44.1628 9 91.2753 8 86.3488 10 73.351 11 39.0737 11 55.3057 10 90.0769 11 57.4296 10 21.0794 9 84.5969 10 9.4308 7 55.9558 10 20.9037 7 43.5424 10]
Total: 1410.2905
Mean: 28.20581
Genome size: 108
Size: 109
Percent parens: 0.009
--- Population Statistics ---
Average total errors in population: 4991.506300700002
Median total errors in population: 1410.2905
Error averages by case: (179.79714650000227 9.37 173.53085869999973 7.348 175.06817759999808 10.627 190.6653164000005 8.592 204.2953870000011 9.812 158.1222718999973 8.718 157.572703699999 10.518 189.93422490000196 12.039 174.49282439999905 10.903 153.30797420000152 7.743 195.7178218000011 9.404 174.60637099999929 9.354 240.15022490000163 8.92 235.5736292000028 10.56 174.27023509999833 11.201 186.8853409000002 11.342 183.35024739999884 10.473 210.44860619999716 11.038 217.79457360000106 10.407 153.97285099999945 8.708 233.37787920000156 10.297 175.23101090000088 7.994 216.89052849999877 10.447 186.65786489999843 8.109 205.52023080000174 10.348)
Error minima by case: (16.5441 7 5.9844 6 10.4824 9 31.6813 6 36.545 8 25.4022 7 16.2516 9 19.2178 9 1.0 6 6.6443 6 12.3806 8 6.1389 7 8.228 7 4.6848 8 0.0 5 15.9599 8 23.2821 8 30.0 7 57.3621 8 4.907 6 8.5733 8 9.4072 7 55.8883 8 20.8363 7 43.475 8)
Average genome size in population (length): 104.795
Average program size in population (points): 105.795
Average percent parens in population: 0.010
Minimum age in population: 69.60572343072195
Maximum age in population: 74.12398626336967
Average age in population: 71.91803344027755
Median age in population: 71.96777752403396
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 5
Genome diversity (% unique Plush genomes):	 0.947
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 5
Syntactic diversity (% unique Push programs):	 0.947
Total error diversity:				 0.25
Error (vector) diversity:			 0.291
Behavioral diversity:				 0.291
--- Run Statistics ---
Number of program evaluations used so far: 52000
Number of point (instruction) evaluations so far: 120260106
--- Timings ---
Current time: 1529615372080 milliseconds
Total Time:         218.7 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        73.1 seconds, 33.5%
Fitness Testing:    114.1 seconds, 52.2%
Report:              31.3 seconds, 14.3%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 51
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 52
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 52
;;******************************
;; -*- Number IO problem report - generation 52
Test total error for best: 60026.23010000001
Test mean error for best: 30.01312
;;------------------------------
Outputs of best individual on training cases:
Correct output: -57.4559422311 | Program output: -74.023621    
Correct output: -71.0754923621 | Program output: -65.023621    
Correct output: -66.5176295557 | Program output: -77.023621    
Correct output: 149.3187378    | Program output: 86.028721     
Correct output: -36.5450493525 | Program output: -83.023621    
Correct output: 75.4021928097  | Program output: 48.024921     
Correct output: 52.2615929867  | Program output: 74.027521     
Correct output: -19.2178367434 | Program output: 43.024421     
Correct output: 66.7518906772  | Program output: 1.023621      
Correct output: 7.673605441    | Program output: 27.023621     
Correct output: 23.6294031682  | Program output: 90.029121     
Correct output: -6.1389033433  | Program output: 38.023921     
Correct output: 9.2516366816   | Program output: -82.023621    
Correct output: 31.3251776267  | Program output: -55.023621    
Correct output: 73.3746496408  | Program output: 0.023621      
Correct output: 20.0500553336  | Program output: -19.023621    
Correct output: -23.2820697498 | Program output: 32.023621     
Correct output: 120.1004999359 | Program output: 30.023621     
Correct output: -155.453212395 | Program output: -98.023621    
Correct output: 31.10301576    | Program output: 10.023621     
Correct output: 45.5733057121  | Program output: -39.023621    
Correct output: -68.592783645  | Program output: -78.023621    
Correct output: -125.979392023 | Program output: -70.023621    
Correct output: -91.9273649148 | Program output: -71.023621    
Correct output: -92.5660607267 | Program output: -49.023621    
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_inc} {:instruction float_add} {:instruction float_yank} {:instruction integer_dup} {:instruction integer_yankdup} {:instruction float_add} {:instruction integer_rot} {:instruction float_mult} {:instruction integer_flush} {:instruction integer_pop} {:instruction float_min} {:instruction print_integer} {:instruction float_add} {:instruction integer_pop} {:instruction float_min} {:instruction integer_flush} {:instruction float_mult} {:instruction integer_flush} {:instruction integer_min} {:instruction float_mod} {:instruction integer_shove} {:instruction integer_dup_times} {:instruction float_rot} {:instruction integer_max} {:instruction float_sub} {:instruction 100} {:instruction integer_max} {:instruction float_yankdup} {:instruction float_rot} {:instruction float_rot} {:instruction float_rot} {:instruction float_rot} {:instruction float_inc} {:instruction integer_flush} {:instruction float_min} {:instruction print_integer} {:instruction float_add} {:instruction integer_pop} {:instruction float_yankdup} {:instruction float_frominteger} {:instruction integer_pop} {:instruction float_rot} {:instruction integer_flush} {:instruction float_dup} {:instruction print_integer} {:instruction float_add} {:instruction integer_pop} {:instruction float_yankdup} {:instruction print_float} {:instruction integer_pop} {:instruction 27} {:instruction float_sub} {:instruction float_sub} {:instruction float_tan} {:instruction integer_yank} {:instruction integer_min} {:instruction float_max} {:instruction integer_sub} {:instruction 9} {:instruction integer_fromfloat} {:instruction integer_stackdepth} {:instruction float_frominteger} {:instruction tag_float_196} {:instruction float_swap} {:instruction float_rot} {:instruction integer_add} {:instruction integer_max} {:instruction integer_fromfloat} {:instruction integer_stackdepth} {:instruction float_add} {:instruction in2} {:instruction float_mult} {:instruction integer_stackdepth} {:instruction float_frominteger} {:instruction tag_float_196} {:instruction float_swap} {:instruction float_rot} {:instruction integer_add} {:instruction integer_max} {:instruction float_max} {:instruction integer_stackdepth} {:instruction float_add} {:instruction in2} {:instruction float_frominteger} {:instruction print_float} {:instruction integer_dup} {:instruction float_shove} {:instruction float_dec} {:instruction integer_inc} {:instruction float_mod} {:instruction integer_dup} {:instruction integer_dup_items} {:instruction float_yank} {:instruction print_integer} {:instruction integer_shove} {:instruction integer_yank} {:instruction print_integer} {:instruction integer_shove} {:instruction integer_mult} {:instruction integer_div} {:instruction integer_sub} {:instruction float_dec} {:instruction integer_mod} {:instruction print_integer} {:instruction integer_mult} {:instruction integer_stackdepth} {:instruction tag_float_291} {:instruction integer_inc} {:instruction tagged_952} {:instruction print_integer} {:instruction integer_mod} {:instruction float_div} {:instruction float_mod} {:instruction integer_flush} {:instruction float_cos} {:instruction float_swap})
Best program: (integer_inc float_add float_yank integer_dup integer_yankdup float_add integer_rot float_mult integer_flush integer_pop float_min print_integer float_add integer_pop float_min integer_flush float_mult integer_flush integer_min float_mod integer_shove integer_dup_times float_rot integer_max float_sub 100 integer_max float_yankdup float_rot float_rot float_rot float_rot float_inc integer_flush float_min print_integer float_add integer_pop float_yankdup float_frominteger integer_pop float_rot integer_flush float_dup print_integer float_add integer_pop float_yankdup print_float integer_pop 27 float_sub float_sub float_tan integer_yank integer_min float_max integer_sub 9 integer_fromfloat integer_stackdepth float_frominteger tag_float_196 float_swap float_rot integer_add integer_max integer_fromfloat integer_stackdepth float_add in2 float_mult integer_stackdepth float_frominteger tag_float_196 float_swap float_rot integer_add integer_max float_max integer_stackdepth float_add in2 float_frominteger print_float integer_dup float_shove float_dec integer_inc float_mod integer_dup integer_dup_items float_yank print_integer integer_shove integer_yank print_integer integer_shove integer_mult integer_div integer_sub float_dec integer_mod print_integer integer_mult integer_stackdepth tag_float_291 integer_inc tagged_952 print_integer integer_mod float_div float_mod integer_flush float_cos float_swap)
Errors: [16.5677 9 6.0519 6 10.506 10 63.29 8 46.4786 9 27.3773 8 21.7659 10 62.2423 12 65.7283 11 19.35 7 66.3997 9 44.1628 9 91.2753 8 86.3488 10 73.351 11 39.0737 11 55.3057 10 90.0769 11 57.4296 10 21.0794 9 84.5969 10 9.4308 7 55.9558 10 20.9037 7 43.5424 10]
Total: 1410.2905
Mean: 28.20581
Genome size: 116
Size: 117
Percent parens: 0.009
--- Population Statistics ---
Average total errors in population: 5060.409430200001
Median total errors in population: 1410.2905
Error averages by case: (190.85853940000183 9.41 182.95393379999996 7.429 186.74379009999825 10.703 188.59607739999984 8.667 215.120362900001 9.838 155.80042009999755 8.815 153.42931809999905 10.612 185.34937730000112 12.025 166.9320952999997 10.907 147.2372330000014 7.779 191.26531030000044 9.464 168.77822700000024 9.357 250.24017950000126 8.946 244.49518780000275 10.61 168.83950039999874 11.19 194.74725919999992 11.341 179.2769214999989 10.489 207.86484329999752 11.03 226.30774430000102 10.448 148.56163250000023 8.723 243.54409830000148 10.289 185.94398620000084 8.037 224.3297471999989 10.47 195.4978350999986 8.15 212.56281020000176 10.404)
Error minima by case: (15.5814 6 5.9845 6 9.5197 9 62.2814 6 36.555 8 26.3648 7 21.7384 9 19.2278 7 1.0 6 3.3264 6 10.6194 8 6.1489 7 7.228 7 4.6848 8 0.0 5 15.9599 8 17.7179 8 84.0905 6 57.3622 8 4.907 6 9.5633 8 8.4446 7 55.8884 8 20.8364 7 43.4751 8)
Average genome size in population (length): 103.912
Average program size in population (points): 104.912
Average percent parens in population: 0.010
Minimum age in population: 70.63515887624192
Maximum age in population: 75.3342289490847
Average age in population: 73.242157587801
Median age in population: 73.26928875191366
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 5
Genome diversity (% unique Plush genomes):	 0.95
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 5
Syntactic diversity (% unique Push programs):	 0.95
Total error diversity:				 0.273
Error (vector) diversity:			 0.311
Behavioral diversity:				 0.311
--- Run Statistics ---
Number of program evaluations used so far: 53000
Number of point (instruction) evaluations so far: 122858906
--- Timings ---
Current time: 1529615376228 milliseconds
Total Time:         222.8 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        74.4 seconds, 33.4%
Fitness Testing:    116.4 seconds, 52.3%
Report:              31.8 seconds, 14.3%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 52
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 53
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 53
;;******************************
;; -*- Number IO problem report - generation 53
Test total error for best: 60026.23010000001
Test mean error for best: 30.01312
;;------------------------------
Outputs of best individual on training cases:
Correct output: -57.4559422311 | Program output: -74.023621    
Correct output: -71.0754923621 | Program output: -65.023621    
Correct output: -66.5176295557 | Program output: -77.023621    
Correct output: 149.3187378    | Program output: 86.028721     
Correct output: -36.5450493525 | Program output: -83.023621    
Correct output: 75.4021928097  | Program output: 48.024921     
Correct output: 52.2615929867  | Program output: 74.027521     
Correct output: -19.2178367434 | Program output: 43.024421     
Correct output: 66.7518906772  | Program output: 1.023621      
Correct output: 7.673605441    | Program output: 27.023621     
Correct output: 23.6294031682  | Program output: 90.029121     
Correct output: -6.1389033433  | Program output: 38.023921     
Correct output: 9.2516366816   | Program output: -82.023621    
Correct output: 31.3251776267  | Program output: -55.023621    
Correct output: 73.3746496408  | Program output: 0.023621      
Correct output: 20.0500553336  | Program output: -19.023621    
Correct output: -23.2820697498 | Program output: 32.023621     
Correct output: 120.1004999359 | Program output: 30.023621     
Correct output: -155.453212395 | Program output: -98.023621    
Correct output: 31.10301576    | Program output: 10.023621     
Correct output: 45.5733057121  | Program output: -39.023621    
Correct output: -68.592783645  | Program output: -78.023621    
Correct output: -125.979392023 | Program output: -70.023621    
Correct output: -91.9273649148 | Program output: -71.023621    
Correct output: -92.5660607267 | Program output: -49.023621    
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_yank} {:instruction integer_dup} {:instruction float_min} {:instruction float_yank} {:instruction integer_dup} {:instruction float_min} {:instruction in2} {:instruction float_yank} {:instruction float_pop} {:instruction float_mult} {:instruction integer_yank} {:instruction float_sub} {:instruction 100} {:instruction integer_dup_items} {:instruction float_add} {:instruction integer_flush} {:instruction float_min} {:instruction print_integer} {:instruction integer_yankdup} {:instruction integer_pop} {:instruction float_add} {:instruction integer_pop} {:instruction float_yankdup} {:instruction float_min} {:instruction float_sin} {:instruction float_add} {:instruction float_yankdup} {:instruction float_yankdup} {:instruction float_add} {:instruction tagged_985} {:instruction 27} {:instruction float_sub} {:instruction float_sub} {:instruction float_tan} {:instruction float_dec} {:instruction float_tan} {:instruction float_max} {:instruction integer_sub} {:instruction 9} {:instruction float_mult} {:instruction integer_stackdepth} {:instruction float_frominteger} {:instruction tag_float_196} {:instruction float_rot} {:instruction integer_add} {:instruction integer_max} {:instruction float_max} {:instruction integer_stackdepth} {:instruction float_add} {:instruction in2} {:instruction float_dec} {:instruction integer_add} {:instruction integer_max} {:instruction tag_float_334} {:instruction integer_stackdepth} {:instruction float_add} {:instruction in2} {:instruction float_frominteger} {:instruction print_float} {:instruction integer_dup} {:instruction float_shove} {:instruction integer_inc} {:instruction float_mod} {:instruction integer_dup} {:instruction integer_dup_items} {:instruction print_integer} {:instruction integer_shove} {:instruction integer_yank} {:instruction print_integer} {:instruction integer_shove} {:instruction print_float} {:instruction integer_div} {:instruction integer_sub} {:instruction integer_fromfloat} {:instruction integer_mod} {:instruction print_integer} {:instruction integer_shove} {:instruction integer_yank} {:instruction print_integer} {:instruction integer_shove} {:instruction print_float} {:instruction integer_div} {:instruction integer_sub} {:instruction integer_fromfloat} {:instruction integer_mod} {:instruction print_integer} {:instruction integer_mult} {:instruction integer_stackdepth} {:instruction tag_float_291} {:instruction integer_inc} {:instruction integer_min} {:instruction print_integer} {:instruction integer_mod} {:instruction float_div} {:instruction integer_max} {:instruction float_inc} {:instruction print_float} {:instruction print_float} {:instruction float_cos})
Best program: (float_yank integer_dup float_min float_yank integer_dup float_min in2 float_yank float_pop float_mult integer_yank float_sub 100 integer_dup_items float_add integer_flush float_min print_integer integer_yankdup integer_pop float_add integer_pop float_yankdup float_min float_sin float_add float_yankdup float_yankdup float_add tagged_985 27 float_sub float_sub float_tan float_dec float_tan float_max integer_sub 9 float_mult integer_stackdepth float_frominteger tag_float_196 float_rot integer_add integer_max float_max integer_stackdepth float_add in2 float_dec integer_add integer_max tag_float_334 integer_stackdepth float_add in2 float_frominteger print_float integer_dup float_shove integer_inc float_mod integer_dup integer_dup_items print_integer integer_shove integer_yank print_integer integer_shove print_float integer_div integer_sub integer_fromfloat integer_mod print_integer integer_shove integer_yank print_integer integer_shove print_float integer_div integer_sub integer_fromfloat integer_mod print_integer integer_mult integer_stackdepth tag_float_291 integer_inc integer_min print_integer integer_mod float_div integer_max float_inc print_float print_float float_cos)
Errors: [16.5677 9 6.0519 6 10.506 10 63.29 8 46.4786 9 27.3773 8 21.7659 10 62.2423 12 65.7283 11 19.35 7 66.3997 9 44.1628 9 91.2753 8 86.3488 10 73.351 11 39.0737 11 55.3057 10 90.0769 11 57.4296 10 21.0794 9 84.5969 10 9.4308 7 55.9558 10 20.9037 7 43.5424 10]
Total: 1410.2905
Mean: 28.20581
Genome size: 99
Size: 100
Percent parens: 0.010
--- Population Statistics ---
Average total errors in population: 4790.455829099999
Median total errors in population: 1410.2905
Error averages by case: (178.57599670000207 9.397 170.05587009999982 7.367 173.9371939999979 10.663 178.41571990000028 8.633 202.7035182000012 9.8 145.28179979999726 8.756 142.84574059999917 10.541 176.36145750000136 12.034 161.76991980000008 10.895 138.39500140000146 7.777 181.7857376000006 9.423 160.3114781000004 9.357 238.20945220000092 8.912 233.279045600003 10.54 164.98809629999846 11.196 178.41993630000007 11.338 169.98513149999886 10.487 197.99378859999732 11.034 214.67224040000121 10.43 138.01963790000082 8.73 231.47817730000153 10.301 173.1387081000009 8.004 211.98561649999883 10.422 182.7691300999985 8.126 200.5284346000021 10.386)
Error minima by case: (16.5441 7 5.9936 6 10.4824 9 38.3187 7 37.545 8 25.3922 7 16.2506 9 17.2567 8 24.2481 6 3.6736 5 3.3816 8 4.1778 7 5.2516 7 4.3142 8 16.6481 5 6.9599 8 21.3209 8 9.1005 6 57.3713 7 4.092 6 8.5633 9 9.4072 7 55.8975 7 20.8454 7 43.4841 8)
Average genome size in population (length): 103.889
Average program size in population (points): 104.889
Average percent parens in population: 0.010
Minimum age in population: 71.90059877058162
Maximum age in population: 77.05828273513649
Average age in population: 74.53555886322707
Median age in population: 74.587375662755
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 5
Genome diversity (% unique Plush genomes):	 0.927
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 5
Syntactic diversity (% unique Push programs):	 0.927
Total error diversity:				 0.26
Error (vector) diversity:			 0.294
Behavioral diversity:				 0.294
--- Run Statistics ---
Number of program evaluations used so far: 54000
Number of point (instruction) evaluations so far: 125457156
--- Timings ---
Current time: 1529615380467 milliseconds
Total Time:         227.1 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        75.8 seconds, 33.4%
Fitness Testing:    118.8 seconds, 52.3%
Report:              32.4 seconds, 14.3%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 53
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 54
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 54
;;******************************
;; -*- Number IO problem report - generation 54
Test total error for best: 60026.23010000001
Test mean error for best: 30.01312
;;------------------------------
Outputs of best individual on training cases:
Correct output: -57.4559422311 | Program output: -74.023621    
Correct output: -71.0754923621 | Program output: -65.023621    
Correct output: -66.5176295557 | Program output: -77.023621    
Correct output: 149.3187378    | Program output: 86.028721     
Correct output: -36.5450493525 | Program output: -83.023621    
Correct output: 75.4021928097  | Program output: 48.024921     
Correct output: 52.2615929867  | Program output: 74.027521     
Correct output: -19.2178367434 | Program output: 43.024421     
Correct output: 66.7518906772  | Program output: 1.023621      
Correct output: 7.673605441    | Program output: 27.023621     
Correct output: 23.6294031682  | Program output: 90.029121     
Correct output: -6.1389033433  | Program output: 38.023921     
Correct output: 9.2516366816   | Program output: -82.023621    
Correct output: 31.3251776267  | Program output: -55.023621    
Correct output: 73.3746496408  | Program output: 0.023621      
Correct output: 20.0500553336  | Program output: -19.023621    
Correct output: -23.2820697498 | Program output: 32.023621     
Correct output: 120.1004999359 | Program output: 30.023621     
Correct output: -155.453212395 | Program output: -98.023621    
Correct output: 31.10301576    | Program output: 10.023621     
Correct output: 45.5733057121  | Program output: -39.023621    
Correct output: -68.592783645  | Program output: -78.023621    
Correct output: -125.979392023 | Program output: -70.023621    
Correct output: -91.9273649148 | Program output: -71.023621    
Correct output: -92.5660607267 | Program output: -49.023621    
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_inc} {:instruction integer_inc} {:instruction float_add} {:instruction float_yank} {:instruction integer_dup} {:instruction float_min} {:instruction in2} {:instruction float_inc} {:instruction float_div} {:instruction 85} {:instruction float_inc} {:instruction integer_mult} {:instruction integer_inc} {:instruction float_sub} {:instruction float_sub} {:instruction 99} {:instruction integer_dup_items} {:instruction float_yankdup} {:instruction integer_yankdup} {:instruction integer_pop} {:instruction float_yankdup} {:instruction print_float} {:instruction integer_swap} {:instruction float_add} {:instruction integer_pop} {:instruction float_yankdup} {:instruction print_float} {:instruction float_sub} {:instruction 27} {:instruction float_sub} {:instruction float_sub} {:instruction float_tan} {:instruction integer_yank} {:instruction integer_min} {:instruction float_max} {:instruction integer_sub} {:instruction 9} {:instruction float_swap} {:instruction integer_stackdepth} {:instruction float_frominteger} {:instruction tag_float_196} {:instruction float_swap} {:instruction float_inc} {:instruction integer_add} {:instruction integer_max} {:instruction integer_fromfloat} {:instruction integer_stackdepth} {:instruction float_add} {:instruction in2} {:instruction float_mult} {:instruction integer_stackdepth} {:instruction float_frominteger} {:instruction tag_float_196} {:instruction float_swap} {:instruction float_rot} {:instruction integer_add} {:instruction integer_max} {:instruction integer_stackdepth} {:instruction float_add} {:instruction in2} {:instruction float_frominteger} {:instruction print_float} {:instruction integer_dup} {:instruction float_shove} {:instruction float_shove} {:instruction integer_inc} {:instruction float_mod} {:instruction integer_dup} {:instruction integer_dup_items} {:instruction print_integer} {:instruction integer_shove} {:instruction integer_yank} {:instruction print_integer} {:instruction integer_shove} {:instruction print_float} {:instruction integer_div} {:instruction integer_yank} {:instruction integer_fromfloat} {:instruction integer_mod} {:instruction print_integer} {:instruction integer_mult} {:instruction integer_stackdepth} {:instruction tag_float_291} {:instruction integer_inc} {:instruction float_swap} {:instruction print_integer} {:instruction integer_inc} {:instruction float_swap} {:instruction print_integer} {:instruction integer_mod} {:instruction float_div})
Best program: (integer_inc integer_inc float_add float_yank integer_dup float_min in2 float_inc float_div 85 float_inc integer_mult integer_inc float_sub float_sub 99 integer_dup_items float_yankdup integer_yankdup integer_pop float_yankdup print_float integer_swap float_add integer_pop float_yankdup print_float float_sub 27 float_sub float_sub float_tan integer_yank integer_min float_max integer_sub 9 float_swap integer_stackdepth float_frominteger tag_float_196 float_swap float_inc integer_add integer_max integer_fromfloat integer_stackdepth float_add in2 float_mult integer_stackdepth float_frominteger tag_float_196 float_swap float_rot integer_add integer_max integer_stackdepth float_add in2 float_frominteger print_float integer_dup float_shove float_shove integer_inc float_mod integer_dup integer_dup_items print_integer integer_shove integer_yank print_integer integer_shove print_float integer_div integer_yank integer_fromfloat integer_mod print_integer integer_mult integer_stackdepth tag_float_291 integer_inc float_swap print_integer integer_inc float_swap print_integer integer_mod float_div)
Errors: [16.5677 9 6.0519 6 10.506 10 63.29 8 46.4786 9 27.3773 8 21.7659 10 62.2423 12 65.7283 11 19.35 7 66.3997 9 44.1628 9 91.2753 8 86.3488 10 73.351 11 39.0737 11 55.3057 10 90.0769 11 57.4296 10 21.0794 9 84.5969 10 9.4308 7 55.9558 10 20.9037 7 43.5424 10]
Total: 1410.2905
Mean: 28.20581
Genome size: 91
Size: 92
Percent parens: 0.011
--- Population Statistics ---
Average total errors in population: 4576.050751900002
Median total errors in population: 1410.2905
Error averages by case: (167.11769920000134 9.307 159.58947080000036 7.218 162.31284629999817 10.587 171.6097981999997 8.493 191.56471220000108 9.703 137.85844559999768 8.645 134.51998239999912 10.499 168.99267250000094 12.0 153.77384740000022 10.888 131.76289390000105 7.67 174.06520540000022 9.365 151.77411380000035 9.267 227.89005600000064 8.788 223.55522660000307 10.502 161.82977759999847 11.115 175.34387869999958 11.249 162.55787069999883 10.373 192.37933629999765 10.985 204.2321580000014 10.336 132.0585618000011 8.684 221.98564140000153 10.265 161.475095700001 7.849 202.1128802999988 10.35 172.38466399999862 7.948 190.9229171000018 10.295)
Error minima by case: (16.5441 7 5.9928 6 10.4824 10 36.6913 7 37.545 8 27.3195 7 21.2616 9 20.2178 9 33.7519 7 3.3264 6 7.3706 7 7.1389 7 1.7484 8 0.3252 9 42.3746 6 9.0501 9 24.2821 8 9.9095 7 57.3705 8 0.103 6 14.5733 9 9.4072 7 55.8967 8 20.8447 7 43.4834 8)
Average genome size in population (length): 103.764
Average program size in population (points): 104.764
Average percent parens in population: 0.010
Minimum age in population: 73.06191680363808
Maximum age in population: 78.12115172829647
Average age in population: 75.92394798591371
Median age in population: 75.94062357744376
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 4
Genome diversity (% unique Plush genomes):	 0.921
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 4
Syntactic diversity (% unique Push programs):	 0.921
Total error diversity:				 0.221
Error (vector) diversity:			 0.253
Behavioral diversity:				 0.253
--- Run Statistics ---
Number of program evaluations used so far: 55000
Number of point (instruction) evaluations so far: 128052181
--- Timings ---
Current time: 1529615384692 milliseconds
Total Time:         231.3 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:        77.0 seconds, 33.3%
Fitness Testing:    121.2 seconds, 52.4%
Report:              33.0 seconds, 14.3%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 54
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 55
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 55
;;******************************
;; -*- Number IO problem report - generation 55
Test total error for best: 60026.23010000001
Test mean error for best: 30.01312
;;------------------------------
Outputs of best individual on training cases:
Correct output: -57.4559422311 | Program output: -74.023621    
Correct output: -71.0754923621 | Program output: -65.023621    
Correct output: -66.5176295557 | Program output: -77.023621    
Correct output: 149.3187378    | Program output: 86.028721     
Correct output: -36.5450493525 | Program output: -83.023621    
Correct output: 75.4021928097  | Program output: 48.024921     
Correct output: 52.2615929867  | Program output: 74.027521     
Correct output: -19.2178367434 | Program output: 43.024421     
Correct output: 66.7518906772  | Program output: 1.023621      
Correct output: 7.673605441    | Program output: 27.023621     
Correct output: 23.6294031682  | Program output: 90.029121     
Correct output: -6.1389033433  | Program output: 38.023921     
Correct output: 9.2516366816   | Program output: -82.023621    
Correct output: 31.3251776267  | Program output: -55.023621    
Correct output: 73.3746496408  | Program output: 0.023621      
Correct output: 20.0500553336  | Program output: -19.023621    
Correct output: -23.2820697498 | Program output: 32.023621     
Correct output: 120.1004999359 | Program output: 30.023621     
Correct output: -155.453212395 | Program output: -98.023621    
Correct output: 31.10301576    | Program output: 10.023621     
Correct output: 45.5733057121  | Program output: -39.023621    
Correct output: -68.592783645  | Program output: -78.023621    
Correct output: -125.979392023 | Program output: -70.023621    
Correct output: -91.9273649148 | Program output: -71.023621    
Correct output: -92.5660607267 | Program output: -49.023621    
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_yank} {:instruction integer_flush} {:instruction integer_stackdepth} {:instruction float_yankdup} {:instruction float_dup_items} {:instruction float_shove} {:instruction integer_sub} {:instruction float_dec} {:instruction float_rot} {:instruction float_add} {:instruction integer_mod} {:instruction integer_dup_items} {:instruction float_sub} {:instruction 100} {:instruction integer_dup_items} {:instruction float_add} {:instruction float_mult} {:instruction float_sub} {:instruction 100} {:instruction integer_dup_items} {:instruction float_add} {:instruction float_mult} {:instruction float_sub} {:instruction integer_pop} {:instruction float_min} {:instruction float_rot} {:instruction integer_yankdup} {:instruction integer_pop} {:instruction integer_inc} {:instruction print_float} {:instruction integer_swap} {:instruction float_add} {:instruction integer_pop} {:instruction float_yankdup} {:instruction print_float} {:instruction float_sub} {:instruction 27} {:instruction float_sub} {:instruction float_sub} {:instruction float_tan} {:instruction integer_yank} {:instruction integer_min} {:instruction float_max} {:instruction integer_sub} {:instruction 9} {:instruction float_swap} {:instruction integer_stackdepth} {:instruction float_frominteger} {:instruction tag_float_196} {:instruction float_swap} {:instruction float_rot} {:instruction integer_add} {:instruction integer_max} {:instruction integer_fromfloat} {:instruction integer_stackdepth} {:instruction float_add} {:instruction in2} {:instruction float_mult} {:instruction integer_stackdepth} {:instruction float_frominteger} {:instruction tag_float_196} {:instruction float_swap} {:instruction float_rot} {:instruction integer_add} {:instruction integer_max} {:instruction integer_stackdepth} {:instruction float_add} {:instruction in2} {:instruction float_frominteger} {:instruction print_float} {:instruction integer_dup} {:instruction float_shove} {:instruction float_shove} {:instruction integer_inc} {:instruction float_mod} {:instruction integer_dup} {:instruction integer_dup_items} {:instruction print_integer} {:instruction integer_shove} {:instruction integer_yank} {:instruction print_integer} {:instruction integer_shove} {:instruction print_float} {:instruction float_shove} {:instruction integer_sub} {:instruction integer_fromfloat} {:instruction integer_sub} {:instruction integer_fromfloat} {:instruction integer_mod} {:instruction print_integer} {:instruction integer_mult} {:instruction integer_stackdepth} {:instruction integer_add} {:instruction integer_inc} {:instruction float_swap} {:instruction print_integer} {:instruction integer_mod} {:instruction float_yankdup} {:instruction float_mod} {:instruction float_inc} {:instruction print_float} {:instruction integer_flush} {:instruction float_mult} {:instruction float_mult} {:instruction integer_dec} {:instruction float_sub})
Best program: (float_yank integer_flush integer_stackdepth float_yankdup float_dup_items float_shove integer_sub float_dec float_rot float_add integer_mod integer_dup_items float_sub 100 integer_dup_items float_add float_mult float_sub 100 integer_dup_items float_add float_mult float_sub integer_pop float_min float_rot integer_yankdup integer_pop integer_inc print_float integer_swap float_add integer_pop float_yankdup print_float float_sub 27 float_sub float_sub float_tan integer_yank integer_min float_max integer_sub 9 float_swap integer_stackdepth float_frominteger tag_float_196 float_swap float_rot integer_add integer_max integer_fromfloat integer_stackdepth float_add in2 float_mult integer_stackdepth float_frominteger tag_float_196 float_swap float_rot integer_add integer_max integer_stackdepth float_add in2 float_frominteger print_float integer_dup float_shove float_shove integer_inc float_mod integer_dup integer_dup_items print_integer integer_shove integer_yank print_integer integer_shove print_float float_shove integer_sub integer_fromfloat integer_sub integer_fromfloat integer_mod print_integer integer_mult integer_stackdepth integer_add integer_inc float_swap print_integer integer_mod float_yankdup float_mod float_inc print_float integer_flush float_mult float_mult integer_dec float_sub)
Errors: [16.5677 9 6.0519 6 10.506 10 63.29 8 46.4786 9 27.3773 8 21.7659 10 62.2423 12 65.7283 11 19.35 7 66.3997 9 44.1628 9 91.2753 8 86.3488 10 73.351 11 39.0737 11 55.3057 10 90.0769 11 57.4296 10 21.0794 9 84.5969 10 9.4308 7 55.9558 10 20.9037 7 43.5424 10]
Total: 1410.2905
Mean: 28.20581
Genome size: 106
Size: 107
Percent parens: 0.009
--- Population Statistics ---
Average total errors in population: 4825.418087400003
Median total errors in population: 1410.2905
Error averages by case: (182.4051007000022 9.329 174.08798839999963 7.279 177.80285239999816 10.603 178.53374330000057 8.563 206.209426400001 9.723 144.4539213999976 8.674 141.8356578999991 10.488 174.31968680000153 12.0 159.44057609999967 10.882 136.28222250000113 7.74 181.24258360000096 9.387 158.10660919999984 9.307 241.38992020000128 8.897 236.83381210000286 10.478 163.02883209999877 11.185 182.5546638000005 11.276 168.71209419999892 10.422 197.81842919999727 10.997 218.45500360000145 10.365 139.15880540000052 8.716 235.1748066000012 10.272 177.00804930000083 7.912 215.93783969999893 10.386 186.75040349999853 8.04 204.6190590000019 10.335)
Error minima by case: (13.5441 7 5.9928 6 7.4824 9 34.3087 6 37.545 8 1.6078 7 16.2516 9 20.2178 9 30.7419 5 4.6736 6 3.3806 8 7.1389 7 7.2516 7 4.3152 7 26.649 5 6.9599 8 24.2821 9 9.9216 7 57.3705 7 4.093 6 9.5633 8 6.4072 6 55.8967 7 20.8447 7 43.4833 8)
Average genome size in population (length): 103.476
Average program size in population (points): 104.476
Average percent parens in population: 0.010
Minimum age in population: 74.29267133777978
Maximum age in population: 79.81994437783587
Average age in population: 77.30723597774886
Median age in population: 77.3481267631549
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 5
Genome diversity (% unique Plush genomes):	 0.94
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 5
Syntactic diversity (% unique Push programs):	 0.94
Total error diversity:				 0.248
Error (vector) diversity:			 0.285
Behavioral diversity:				 0.285
--- Run Statistics ---
Number of program evaluations used so far: 56000
Number of point (instruction) evaluations so far: 130639956
--- Timings ---
Current time: 1529615389015 milliseconds
Total Time:         235.6 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:        78.5 seconds, 33.3%
Fitness Testing:    123.5 seconds, 52.4%
Report:              33.5 seconds, 14.2%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 55
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 56
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 56
;;******************************
;; -*- Number IO problem report - generation 56
Test total error for best: 60026.23010000001
Test mean error for best: 30.01312
;;------------------------------
Outputs of best individual on training cases:
Correct output: -57.4559422311 | Program output: -74.023621    
Correct output: -71.0754923621 | Program output: -65.023621    
Correct output: -66.5176295557 | Program output: -77.023621    
Correct output: 149.3187378    | Program output: 86.028721     
Correct output: -36.5450493525 | Program output: -83.023621    
Correct output: 75.4021928097  | Program output: 48.024921     
Correct output: 52.2615929867  | Program output: 74.027521     
Correct output: -19.2178367434 | Program output: 43.024421     
Correct output: 66.7518906772  | Program output: 1.023621      
Correct output: 7.673605441    | Program output: 27.023621     
Correct output: 23.6294031682  | Program output: 90.029121     
Correct output: -6.1389033433  | Program output: 38.023921     
Correct output: 9.2516366816   | Program output: -82.023621    
Correct output: 31.3251776267  | Program output: -55.023621    
Correct output: 73.3746496408  | Program output: 0.023621      
Correct output: 20.0500553336  | Program output: -19.023621    
Correct output: -23.2820697498 | Program output: 32.023621     
Correct output: 120.1004999359 | Program output: 30.023621     
Correct output: -155.453212395 | Program output: -98.023621    
Correct output: 31.10301576    | Program output: 10.023621     
Correct output: 45.5733057121  | Program output: -39.023621    
Correct output: -68.592783645  | Program output: -78.023621    
Correct output: -125.979392023 | Program output: -70.023621    
Correct output: -91.9273649148 | Program output: -71.023621    
Correct output: -92.5660607267 | Program output: -49.023621    
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_inc} {:instruction integer_pop} {:instruction float_yank} {:instruction integer_stackdepth} {:instruction float_inc} {:instruction float_sub} {:instruction integer_dec} {:instruction integer_pop} {:instruction integer_dup} {:instruction float_min} {:instruction float_dup_items} {:instruction float_inc} {:instruction float_dup} {:instruction float_mult} {:instruction float_sub} {:instruction integer_dup_items} {:instruction float_yankdup} {:instruction float_dec} {:instruction float_inc} {:instruction float_rot} {:instruction print_float} {:instruction integer_pop} {:instruction 27} {:instruction float_pop} {:instruction integer_flush} {:instruction integer_pop} {:instruction float_min} {:instruction print_integer} {:instruction float_add} {:instruction float_tan} {:instruction integer_add} {:instruction float_sin} {:instruction 27} {:instruction float_sub} {:instruction float_sub} {:instruction float_tan} {:instruction float_sub} {:instruction float_sub} {:instruction float_tan} {:instruction integer_yank} {:instruction integer_min} {:instruction float_swap} {:instruction integer_flush} {:instruction float_min} {:instruction print_integer} {:instruction float_add} {:instruction integer_pop} {:instruction float_yankdup} {:instruction print_float} {:instruction integer_pop} {:instruction 27} {:instruction float_sub} {:instruction float_sub} {:instruction float_inc} {:instruction integer_yank} {:instruction integer_min} {:instruction float_max} {:instruction integer_sub} {:instruction 9} {:instruction float_flush} {:instruction integer_stackdepth} {:instruction float_frominteger} {:instruction tag_float_196} {:instruction float_swap} {:instruction float_inc} {:instruction integer_add} {:instruction integer_max} {:instruction integer_fromfloat} {:instruction integer_stackdepth} {:instruction float_add} {:instruction in2} {:instruction float_rot} {:instruction integer_add} {:instruction integer_max} {:instruction float_max} {:instruction integer_stackdepth} {:instruction float_add} {:instruction in2} {:instruction float_frominteger} {:instruction print_float} {:instruction integer_dup} {:instruction float_shove} {:instruction float_shove} {:instruction integer_inc} {:instruction float_mod} {:instruction integer_dup} {:instruction integer_dup_items} {:instruction print_integer} {:instruction integer_shove} {:instruction integer_yank} {:instruction print_integer} {:instruction integer_shove} {:instruction print_float} {:instruction integer_div} {:instruction integer_sub} {:instruction integer_fromfloat} {:instruction integer_shove} {:instruction print_float} {:instruction integer_mod} {:instruction integer_fromfloat} {:instruction integer_shove} {:instruction print_float} {:instruction integer_sub} {:instruction integer_fromfloat} {:instruction integer_mod} {:instruction print_integer} {:instruction integer_mult} {:instruction integer_stackdepth} {:instruction tag_float_291} {:instruction integer_inc} {:instruction float_swap} {:instruction print_integer} {:instruction float_tan} {:instruction float_sub} {:instruction float_sin} {:instruction integer_yank})
Best program: (integer_inc integer_pop float_yank integer_stackdepth float_inc float_sub integer_dec integer_pop integer_dup float_min float_dup_items float_inc float_dup float_mult float_sub integer_dup_items float_yankdup float_dec float_inc float_rot print_float integer_pop 27 float_pop integer_flush integer_pop float_min print_integer float_add float_tan integer_add float_sin 27 float_sub float_sub float_tan float_sub float_sub float_tan integer_yank integer_min float_swap integer_flush float_min print_integer float_add integer_pop float_yankdup print_float integer_pop 27 float_sub float_sub float_inc integer_yank integer_min float_max integer_sub 9 float_flush integer_stackdepth float_frominteger tag_float_196 float_swap float_inc integer_add integer_max integer_fromfloat integer_stackdepth float_add in2 float_rot integer_add integer_max float_max integer_stackdepth float_add in2 float_frominteger print_float integer_dup float_shove float_shove integer_inc float_mod integer_dup integer_dup_items print_integer integer_shove integer_yank print_integer integer_shove print_float integer_div integer_sub integer_fromfloat integer_shove print_float integer_mod integer_fromfloat integer_shove print_float integer_sub integer_fromfloat integer_mod print_integer integer_mult integer_stackdepth tag_float_291 integer_inc float_swap print_integer float_tan float_sub float_sin integer_yank)
Errors: [16.5677 9 6.0519 6 10.506 10 63.29 8 46.4786 9 27.3773 8 21.7659 10 62.2423 12 65.7283 11 19.35 7 66.3997 9 44.1628 9 91.2753 8 86.3488 10 73.351 11 39.0737 11 55.3057 10 90.0769 11 57.4296 10 21.0794 9 84.5969 10 9.4308 7 55.9558 10 20.9037 7 43.5424 10]
Total: 1410.2905
Mean: 28.20581
Genome size: 116
Size: 117
Percent parens: 0.009
--- Population Statistics ---
Average total errors in population: 5265.135969400002
Median total errors in population: 1410.2905
Error averages by case: (192.52230420000248 9.383 185.3644164999994 7.345 187.93555889999817 10.639 202.61820760000091 8.632 215.98833180000105 9.813 169.78688109999723 8.729 167.58254099999905 10.518 199.4457629000024 12.034 182.6990285999989 10.915 164.02281260000154 7.747 205.4609534000015 9.434 183.82389799999902 9.358 250.8581751000018 8.917 246.6739752000028 10.56 184.19522559999854 11.166 197.94772590000085 11.324 194.18635919999912 10.48 222.24251839999658 11.058 228.80328100000105 10.429 166.1670757999989 8.737 245.16665420000137 10.298 187.1383471000008 7.988 226.6103355999988 10.425 197.79748449999852 8.127 215.65911520000182 10.383)
Error minima by case: (16.5441 7 6.0245 6 10.4824 9 36.71 7 27.545 8 26.3517 7 16.2516 9 19.2423 9 24.3109 8 3.3264 6 12.3806 8 6.1628 7 7.2255 8 4.6848 8 16.6881 8 15.9599 9 17.7179 8 9.1005 9 57.4022 9 4.907 6 9.5359 8 9.4072 7 55.9284 9 20.8763 7 38.4339 9)
Average genome size in population (length): 102.269
Average program size in population (points): 103.269
Average percent parens in population: 0.010
Minimum age in population: 75.29267133777978
Maximum age in population: 80.56235886198468
Average age in population: 78.66608000505948
Median age in population: 78.70755036457429
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 5
Genome diversity (% unique Plush genomes):	 0.948
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 5
Syntactic diversity (% unique Push programs):	 0.948
Total error diversity:				 0.263
Error (vector) diversity:			 0.303
Behavioral diversity:				 0.304
--- Run Statistics ---
Number of program evaluations used so far: 57000
Number of point (instruction) evaluations so far: 133198031
--- Timings ---
Current time: 1529615393262 milliseconds
Total Time:         239.8 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:        79.9 seconds, 33.3%
Fitness Testing:    125.7 seconds, 52.4%
Report:              34.1 seconds, 14.2%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 56
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 57
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 57
;;******************************
;; -*- Number IO problem report - generation 57
Test total error for best: 60026.23010000001
Test mean error for best: 30.01312
;;------------------------------
Outputs of best individual on training cases:
Correct output: -57.4559422311 | Program output: -74.023621    
Correct output: -71.0754923621 | Program output: -65.023621    
Correct output: -66.5176295557 | Program output: -77.023621    
Correct output: 149.3187378    | Program output: 86.028721     
Correct output: -36.5450493525 | Program output: -83.023621    
Correct output: 75.4021928097  | Program output: 48.024921     
Correct output: 52.2615929867  | Program output: 74.027521     
Correct output: -19.2178367434 | Program output: 43.024421     
Correct output: 66.7518906772  | Program output: 1.023621      
Correct output: 7.673605441    | Program output: 27.023621     
Correct output: 23.6294031682  | Program output: 90.029121     
Correct output: -6.1389033433  | Program output: 38.023921     
Correct output: 9.2516366816   | Program output: -82.023621    
Correct output: 31.3251776267  | Program output: -55.023621    
Correct output: 73.3746496408  | Program output: 0.023621      
Correct output: 20.0500553336  | Program output: -19.023621    
Correct output: -23.2820697498 | Program output: 32.023621     
Correct output: 120.1004999359 | Program output: 30.023621     
Correct output: -155.453212395 | Program output: -98.023621    
Correct output: 31.10301576    | Program output: 10.023621     
Correct output: 45.5733057121  | Program output: -39.023621    
Correct output: -68.592783645  | Program output: -78.023621    
Correct output: -125.979392023 | Program output: -70.023621    
Correct output: -91.9273649148 | Program output: -71.023621    
Correct output: -92.5660607267 | Program output: -49.023621    
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_inc} {:instruction integer_dup} {:instruction float_min} {:instruction float_sub} {:instruction integer_dup_items} {:instruction float_yankdup} {:instruction float_dec} {:instruction float_inc} {:instruction float_rot} {:instruction print_float} {:instruction integer_pop} {:instruction 27} {:instruction float_pop} {:instruction integer_flush} {:instruction float_yankdup} {:instruction float_rot} {:instruction integer_flush} {:instruction integer_sub} {:instruction float_rot} {:instruction float_swap} {:instruction integer_stackdepth} {:instruction integer_yank} {:instruction float_sub} {:instruction 99} {:instruction integer_inc} {:instruction float_yankdup} {:instruction float_swap} {:instruction float_inc} {:instruction integer_flush} {:instruction float_min} {:instruction integer_swap} {:instruction integer_add} {:instruction float_tan} {:instruction print_float} {:instruction integer_pop} {:instruction 27} {:instruction float_tan} {:instruction integer_yank} {:instruction integer_min} {:instruction float_max} {:instruction integer_sub} {:instruction 9} {:instruction float_mult} {:instruction integer_stackdepth} {:instruction float_frominteger} {:instruction tag_float_196} {:instruction float_swap} {:instruction float_rot} {:instruction integer_add} {:instruction float_max} {:instruction integer_stackdepth} {:instruction float_add} {:instruction in2} {:instruction float_rot} {:instruction integer_add} {:instruction integer_max} {:instruction float_max} {:instruction float_max} {:instruction integer_stackdepth} {:instruction float_add} {:instruction in2} {:instruction float_frominteger} {:instruction print_float} {:instruction integer_dup} {:instruction float_shove} {:instruction float_shove} {:instruction integer_inc} {:instruction float_mod} {:instruction integer_dup} {:instruction integer_dup_items} {:instruction print_integer} {:instruction integer_shove} {:instruction integer_yank} {:instruction print_integer} {:instruction print_float} {:instruction integer_div} {:instruction integer_sub} {:instruction integer_fromfloat} {:instruction integer_mod} {:instruction print_integer} {:instruction print_integer} {:instruction integer_shove} {:instruction print_float} {:instruction integer_div} {:instruction integer_sub} {:instruction integer_fromfloat} {:instruction integer_mod} {:instruction print_integer} {:instruction integer_mult} {:instruction integer_stackdepth} {:instruction integer_mod} {:instruction integer_inc} {:instruction float_swap} {:instruction integer_stackdepth} {:instruction print_integer} {:instruction integer_mod} {:instruction float_div} {:instruction float_mod} {:instruction float_inc} {:instruction print_float} {:instruction float_tan} {:instruction float_cos})
Best program: (integer_inc integer_dup float_min float_sub integer_dup_items float_yankdup float_dec float_inc float_rot print_float integer_pop 27 float_pop integer_flush float_yankdup float_rot integer_flush integer_sub float_rot float_swap integer_stackdepth integer_yank float_sub 99 integer_inc float_yankdup float_swap float_inc integer_flush float_min integer_swap integer_add float_tan print_float integer_pop 27 float_tan integer_yank integer_min float_max integer_sub 9 float_mult integer_stackdepth float_frominteger tag_float_196 float_swap float_rot integer_add float_max integer_stackdepth float_add in2 float_rot integer_add integer_max float_max float_max integer_stackdepth float_add in2 float_frominteger print_float integer_dup float_shove float_shove integer_inc float_mod integer_dup integer_dup_items print_integer integer_shove integer_yank print_integer print_float integer_div integer_sub integer_fromfloat integer_mod print_integer print_integer integer_shove print_float integer_div integer_sub integer_fromfloat integer_mod print_integer integer_mult integer_stackdepth integer_mod integer_inc float_swap integer_stackdepth print_integer integer_mod float_div float_mod float_inc print_float float_tan float_cos)
Errors: [16.5677 9 6.0519 6 10.506 10 63.29 8 46.4786 9 27.3773 8 21.7659 10 62.2423 12 65.7283 11 19.35 7 66.3997 9 44.1628 9 91.2753 8 86.3488 10 73.351 11 39.0737 11 55.3057 10 90.0769 11 57.4296 10 21.0794 9 84.5969 10 9.4308 7 55.9558 10 20.9037 7 43.5424 10]
Total: 1410.2905
Mean: 28.20581
Genome size: 102
Size: 103
Percent parens: 0.010
--- Population Statistics ---
Average total errors in population: 5231.235065500001
Median total errors in population: 1410.2905
Error averages by case: (196.12451920000234 9.333 187.91803919999967 7.296 191.50151709999778 10.633 194.47326370000047 8.564 219.67419950000118 9.767 162.095223499997 8.689 159.10087209999907 10.496 193.019278900002 12.032 184.83855649999882 10.897 156.66811620000172 7.713 197.82449490000113 9.364 176.24774869999953 9.311 254.6043977000015 8.87 250.270908200003 10.505 184.12501789999817 11.163 203.5413959000005 11.298 186.69598129999892 10.433 214.6402934999968 11.03 231.0707538000012 10.406 156.4158612999996 8.712 248.70859390000138 10.276 190.69601350000096 7.931 228.99423709999883 10.409 200.28252879999837 8.057 218.16425310000213 10.354)
Error minima by case: (16.5441 7 5.9844 6 10.4824 9 36.6913 6 37.545 8 26.3517 7 21.7384 9 20.2178 9 30.7145 7 4.6736 6 1.6294 8 7.1389 7 6.2516 8 3.6848 9 37.3373 6 1.9499 9 24.2821 9 8.1005 9 57.3621 8 3.907 6 9.5359 9 9.4072 6 55.8883 9 20.8363 7 43.475 9)
Average genome size in population (length): 102.362
Average program size in population (points): 103.362
Average percent parens in population: 0.010
Minimum age in population: 76.30163427552561
Maximum age in population: 82.24198346686991
Average age in population: 80.02199743703702
Median age in population: 80.08410689381405
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 3
Genome diversity (% unique Plush genomes):	 0.946
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 3
Syntactic diversity (% unique Push programs):	 0.946
Total error diversity:				 0.232
Error (vector) diversity:			 0.279
Behavioral diversity:				 0.279
--- Run Statistics ---
Number of program evaluations used so far: 58000
Number of point (instruction) evaluations so far: 135758956
--- Timings ---
Current time: 1529615397576 milliseconds
Total Time:         244.2 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:        81.2 seconds, 33.3%
Fitness Testing:    128.2 seconds, 52.5%
Report:              34.6 seconds, 14.2%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 57
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 58
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 58
;;******************************
;; -*- Number IO problem report - generation 58
Test total error for best: 60016.23070000004
Test mean error for best: 30.00812
;;------------------------------
Outputs of best individual on training cases:
Correct output: -57.4559422311 | Program output: -74.023613    
Correct output: -71.0754923621 | Program output: -65.023613    
Correct output: -66.5176295557 | Program output: -77.023613    
Correct output: 149.3187378    | Program output: 86.028723     
Correct output: -36.5450493525 | Program output: -83.023613    
Correct output: 75.4021928097  | Program output: 48.024903     
Correct output: 52.2615929867  | Program output: 74.027523     
Correct output: -19.2178367434 | Program output: 43.024413     
Correct output: 66.7518906772  | Program output: 1.023613      
Correct output: 7.673605441    | Program output: 27.023603     
Correct output: 23.6294031682  | Program output: 90.029103     
Correct output: -6.1389033433  | Program output: 38.023923     
Correct output: 9.2516366816   | Program output: -82.023623    
Correct output: 31.3251776267  | Program output: -55.023623    
Correct output: 73.3746496408  | Program output: 0.023603      
Correct output: 20.0500553336  | Program output: -19.023623    
Correct output: -23.2820697498 | Program output: 32.023623     
Correct output: 120.1004999359 | Program output: 30.023603     
Correct output: -155.453212395 | Program output: -98.023613    
Correct output: 31.10301576    | Program output: 10.023613     
Correct output: 45.5733057121  | Program output: -39.023603    
Correct output: -68.592783645  | Program output: -78.023603    
Correct output: -125.979392023 | Program output: -70.023623    
Correct output: -91.9273649148 | Program output: -71.023613    
Correct output: -92.5660607267 | Program output: -49.023623    
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_inc} {:instruction float_add} {:instruction float_yank} {:instruction integer_dup} {:instruction float_min} {:instruction float_dup_times} {:instruction float_inc} {:instruction float_dup} {:instruction float_mult} {:instruction float_mult} {:instruction float_sub} {:instruction integer_dup_items} {:instruction float_yankdup} {:instruction float_rot} {:instruction float_dup_times} {:instruction float_rot} {:instruction print_integer} {:instruction float_min} {:instruction print_float} {:instruction integer_div} {:instruction 27} {:instruction float_sub} {:instruction float_yankdup} {:instruction integer_sub} {:instruction 9} {:instruction float_yankdup} {:instruction integer_stackdepth} {:instruction float_frominteger} {:instruction tag_float_196} {:instruction float_swap} {:instruction float_rot} {:instruction integer_add} {:instruction integer_stackdepth} {:instruction float_add} {:instruction in2} {:instruction float_mult} {:instruction integer_stackdepth} {:instruction float_frominteger} {:instruction tag_float_196} {:instruction float_swap} {:instruction float_rot} {:instruction integer_add} {:instruction integer_max} {:instruction float_max} {:instruction integer_stackdepth} {:instruction float_flush} {:instruction in2} {:instruction float_frominteger} {:instruction print_float} {:instruction integer_dup} {:instruction float_shove} {:instruction float_shove} {:instruction integer_inc} {:instruction float_mod} {:instruction integer_dup} {:instruction integer_dup_items} {:instruction print_integer} {:instruction integer_shove} {:instruction integer_yank} {:instruction print_integer} {:instruction integer_yank} {:instruction integer_max} {:instruction integer_fromfloat} {:instruction integer_stackdepth} {:instruction float_add} {:instruction in2} {:instruction float_mult} {:instruction integer_stackdepth} {:instruction float_frominteger} {:instruction integer_fromfloat} {:instruction integer_mod} {:instruction print_integer} {:instruction float_min} {:instruction integer_stackdepth} {:instruction tag_float_291} {:instruction integer_inc} {:instruction float_swap} {:instruction print_integer})
Best program: (integer_inc float_add float_yank integer_dup float_min float_dup_times float_inc float_dup float_mult float_mult float_sub integer_dup_items float_yankdup float_rot float_dup_times float_rot print_integer float_min print_float integer_div 27 float_sub float_yankdup integer_sub 9 float_yankdup integer_stackdepth float_frominteger tag_float_196 float_swap float_rot integer_add integer_stackdepth float_add in2 float_mult integer_stackdepth float_frominteger tag_float_196 float_swap float_rot integer_add integer_max float_max integer_stackdepth float_flush in2 float_frominteger print_float integer_dup float_shove float_shove integer_inc float_mod integer_dup integer_dup_items print_integer integer_shove integer_yank print_integer integer_yank integer_max integer_fromfloat integer_stackdepth float_add in2 float_mult integer_stackdepth float_frominteger integer_fromfloat integer_mod print_integer float_min integer_stackdepth tag_float_291 integer_inc float_swap print_integer)
Errors: [16.5677 9 6.0519 8 10.506 11 63.29 8 46.4786 10 27.3773 8 21.7659 10 62.2422 12 65.7283 11 19.35 7 66.3997 8 44.1628 8 91.2753 9 86.3488 10 73.351 10 39.0737 11 55.3057 10 90.0769 10 57.4296 9 21.0794 8 84.5969 11 9.4308 7 55.9558 9 20.9038 7 43.5424 10]
Total: 1409.2905
Mean: 28.18581
Genome size: 78
Size: 79
Percent parens: 0.013
--- Population Statistics ---
Average total errors in population: 5316.894823300002
Median total errors in population: 1411.2905
Error averages by case: (199.8775837000032 9.418 192.84847069999904 7.451 195.44201549999784 10.703 198.08611710000108 8.682 222.91736070000093 9.87 166.88860879999706 8.79 163.92161169999912 10.571 196.27720530000263 12.076 184.19295379999838 10.955 160.45085640000175 7.836 201.48983410000176 9.497 181.56390059999876 9.422 256.8377076000016 9.011 252.2840498000027 10.599 185.98515289999844 11.229 200.31458650000073 11.38 191.08569789999885 10.529 217.61574569999624 11.076 236.4570717000011 10.506 160.23925919999914 8.792 249.69025400000132 10.35 194.6917278000007 8.11 233.8251054999988 10.489 205.27343099999837 8.216 222.62651530000193 10.454)
Error minima by case: (15.5814 7 6.0134 6 9.5197 9 13.3187 7 37.545 8 25.5978 7 21.7384 9 20.2178 9 1.0 6 1.3547 6 3.3806 8 7.1389 7 0.2234 7 3.6848 8 0.0 5 6.9599 8 24.0353 9 9.1005 9 57.3911 8 3.907 6 9.5633 8 8.4446 7 55.9173 8 20.8653 7 43.504 8)
Average genome size in population (length): 102.722
Average program size in population (points): 103.722
Average percent parens in population: 0.010
Minimum age in population: 78.55378986636545
Maximum age in population: 83.379130070234
Average age in population: 81.46638143426173
Median age in population: 81.53103660347588
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 5
Genome diversity (% unique Plush genomes):	 0.93
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 5
Syntactic diversity (% unique Push programs):	 0.93
Total error diversity:				 0.261
Error (vector) diversity:			 0.304
Behavioral diversity:				 0.304
--- Run Statistics ---
Number of program evaluations used so far: 59000
Number of point (instruction) evaluations so far: 138328931
--- Timings ---
Current time: 1529615401632 milliseconds
Total Time:         248.3 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:        82.6 seconds, 33.2%
Fitness Testing:    130.5 seconds, 52.5%
Report:              35.2 seconds, 14.2%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 58
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 59
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 59
;;******************************
;; -*- Number IO problem report - generation 59
Test total error for best: 60016.23070000004
Test mean error for best: 30.00812
;;------------------------------
Outputs of best individual on training cases:
Correct output: -57.4559422311 | Program output: -74.023613    
Correct output: -71.0754923621 | Program output: -65.023613    
Correct output: -66.5176295557 | Program output: -77.023613    
Correct output: 149.3187378    | Program output: 86.028723     
Correct output: -36.5450493525 | Program output: -83.023613    
Correct output: 75.4021928097  | Program output: 48.024903     
Correct output: 52.2615929867  | Program output: 74.027523     
Correct output: -19.2178367434 | Program output: 43.024413     
Correct output: 66.7518906772  | Program output: 1.023613      
Correct output: 7.673605441    | Program output: 27.023603     
Correct output: 23.6294031682  | Program output: 90.029103     
Correct output: -6.1389033433  | Program output: 38.023923     
Correct output: 9.2516366816   | Program output: -82.023623    
Correct output: 31.3251776267  | Program output: -55.023623    
Correct output: 73.3746496408  | Program output: 0.023603      
Correct output: 20.0500553336  | Program output: -19.023623    
Correct output: -23.2820697498 | Program output: 32.023623     
Correct output: 120.1004999359 | Program output: 30.023603     
Correct output: -155.453212395 | Program output: -98.023613    
Correct output: 31.10301576    | Program output: 10.023613     
Correct output: 45.5733057121  | Program output: -39.023603    
Correct output: -68.592783645  | Program output: -78.023603    
Correct output: -125.979392023 | Program output: -70.023623    
Correct output: -91.9273649148 | Program output: -71.023613    
Correct output: -92.5660607267 | Program output: -49.023623    
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_inc} {:instruction float_add} {:instruction float_yank} {:instruction integer_dup} {:instruction float_min} {:instruction float_dup_times} {:instruction float_inc} {:instruction float_dup} {:instruction float_mult} {:instruction float_mult} {:instruction float_sub} {:instruction integer_dup_items} {:instruction float_yankdup} {:instruction float_rot} {:instruction float_dup_times} {:instruction float_rot} {:instruction print_integer} {:instruction float_min} {:instruction print_float} {:instruction integer_div} {:instruction 27} {:instruction float_sub} {:instruction float_yankdup} {:instruction integer_sub} {:instruction 9} {:instruction float_yankdup} {:instruction integer_stackdepth} {:instruction float_frominteger} {:instruction tag_float_196} {:instruction float_swap} {:instruction float_rot} {:instruction integer_add} {:instruction integer_stackdepth} {:instruction float_add} {:instruction in2} {:instruction float_mult} {:instruction integer_stackdepth} {:instruction float_frominteger} {:instruction tag_float_196} {:instruction float_swap} {:instruction float_rot} {:instruction integer_add} {:instruction integer_max} {:instruction float_max} {:instruction integer_stackdepth} {:instruction float_flush} {:instruction in2} {:instruction float_frominteger} {:instruction print_float} {:instruction integer_dup} {:instruction float_shove} {:instruction float_shove} {:instruction integer_inc} {:instruction float_mod} {:instruction integer_dup} {:instruction integer_dup_items} {:instruction print_integer} {:instruction integer_shove} {:instruction integer_yank} {:instruction print_integer} {:instruction integer_yank} {:instruction integer_max} {:instruction integer_fromfloat} {:instruction integer_stackdepth} {:instruction float_add} {:instruction in2} {:instruction float_mult} {:instruction integer_stackdepth} {:instruction float_frominteger} {:instruction integer_fromfloat} {:instruction integer_mod} {:instruction print_integer} {:instruction float_min} {:instruction integer_stackdepth} {:instruction tag_float_291} {:instruction integer_inc} {:instruction float_swap} {:instruction print_integer})
Best program: (integer_inc float_add float_yank integer_dup float_min float_dup_times float_inc float_dup float_mult float_mult float_sub integer_dup_items float_yankdup float_rot float_dup_times float_rot print_integer float_min print_float integer_div 27 float_sub float_yankdup integer_sub 9 float_yankdup integer_stackdepth float_frominteger tag_float_196 float_swap float_rot integer_add integer_stackdepth float_add in2 float_mult integer_stackdepth float_frominteger tag_float_196 float_swap float_rot integer_add integer_max float_max integer_stackdepth float_flush in2 float_frominteger print_float integer_dup float_shove float_shove integer_inc float_mod integer_dup integer_dup_items print_integer integer_shove integer_yank print_integer integer_yank integer_max integer_fromfloat integer_stackdepth float_add in2 float_mult integer_stackdepth float_frominteger integer_fromfloat integer_mod print_integer float_min integer_stackdepth tag_float_291 integer_inc float_swap print_integer)
Errors: [16.5677 9 6.0519 8 10.506 11 63.29 8 46.4786 10 27.3773 8 21.7659 10 62.2422 12 65.7283 11 19.35 7 66.3997 8 44.1628 8 91.2753 9 86.3488 10 73.351 10 39.0737 11 55.3057 10 90.0769 10 57.4296 9 21.0794 8 84.5969 11 9.4308 7 55.9558 9 20.9038 7 43.5424 10]
Total: 1409.2905
Mean: 28.18581
Genome size: 78
Size: 79
Percent parens: 0.013
--- Population Statistics ---
Average total errors in population: 5178.953620800002
Median total errors in population: 1410.2905
Error averages by case: (194.82582100000255 9.409 187.78854449999952 7.415 190.3146857999977 10.673 192.11305610000053 8.651 218.03775770000104 9.813 158.77430099999717 8.751 156.73605299999912 10.551 187.76090520000207 12.046 180.92207039999872 10.935 150.3850951000015 7.769 195.19917000000123 9.425 173.77241969999938 9.409 253.2774833000014 8.959 247.986943400003 10.58 186.34360569999822 11.173 198.6607827000007 11.363 181.51500009999907 10.517 210.31319549999665 11.031 231.39236000000122 10.469 153.52119789999995 8.735 246.3630864000014 10.326 190.52379610000088 8.054 229.05944899999878 10.454 200.2515892999983 8.172 218.0032519000022 10.432)
Error minima by case: (16.5441 7 5.9844 6 10.4824 9 36.7013 7 36.5687 8 25.5978 7 15.2616 7 19.2423 7 29.7519 5 2.3364 6 12.6294 7 6.1628 7 0.7584 7 4.6848 8 27.6254 4 10.0401 7 23.3057 7 9.1005 6 57.3569 7 4.907 6 8.5733 8 9.4072 6 55.8883 7 20.8363 7 43.475 7)
Average genome size in population (length): 101.634
Average program size in population (points): 102.634
Average percent parens in population: 0.010
Minimum age in population: 79.60104798290013
Maximum age in population: 84.66374644372745
Average age in population: 82.84389324939386
Median age in population: 82.87941133201984
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 5
Genome diversity (% unique Plush genomes):	 0.936
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 5
Syntactic diversity (% unique Push programs):	 0.936
Total error diversity:				 0.248
Error (vector) diversity:			 0.288
Behavioral diversity:				 0.29
--- Run Statistics ---
Number of program evaluations used so far: 60000
Number of point (instruction) evaluations so far: 140871731
--- Timings ---
Current time: 1529615405839 milliseconds
Total Time:         252.5 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:        84.0 seconds, 33.3%
Fitness Testing:    132.7 seconds, 52.6%
Report:              35.6 seconds, 14.1%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 59
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 60
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 60
;;******************************
;; -*- Number IO problem report - generation 60
Test total error for best: 60016.23070000004
Test mean error for best: 30.00812
;;------------------------------
Outputs of best individual on training cases:
Correct output: -57.4559422311 | Program output: -74.023613    
Correct output: -71.0754923621 | Program output: -65.023613    
Correct output: -66.5176295557 | Program output: -77.023613    
Correct output: 149.3187378    | Program output: 86.028723     
Correct output: -36.5450493525 | Program output: -83.023613    
Correct output: 75.4021928097  | Program output: 48.024903     
Correct output: 52.2615929867  | Program output: 74.027523     
Correct output: -19.2178367434 | Program output: 43.024413     
Correct output: 66.7518906772  | Program output: 1.023613      
Correct output: 7.673605441    | Program output: 27.023603     
Correct output: 23.6294031682  | Program output: 90.029103     
Correct output: -6.1389033433  | Program output: 38.023923     
Correct output: 9.2516366816   | Program output: -82.023623    
Correct output: 31.3251776267  | Program output: -55.023623    
Correct output: 73.3746496408  | Program output: 0.023603      
Correct output: 20.0500553336  | Program output: -19.023623    
Correct output: -23.2820697498 | Program output: 32.023623     
Correct output: 120.1004999359 | Program output: 30.023603     
Correct output: -155.453212395 | Program output: -98.023613    
Correct output: 31.10301576    | Program output: 10.023613     
Correct output: 45.5733057121  | Program output: -39.023603    
Correct output: -68.592783645  | Program output: -78.023603    
Correct output: -125.979392023 | Program output: -70.023623    
Correct output: -91.9273649148 | Program output: -71.023613    
Correct output: -92.5660607267 | Program output: -49.023623    
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_inc} {:instruction float_add} {:instruction float_yank} {:instruction integer_dup} {:instruction float_min} {:instruction float_dup_times} {:instruction float_inc} {:instruction float_dup} {:instruction float_mult} {:instruction float_mult} {:instruction float_sub} {:instruction integer_dup_items} {:instruction float_yankdup} {:instruction float_rot} {:instruction float_dup_times} {:instruction float_rot} {:instruction print_integer} {:instruction float_min} {:instruction print_float} {:instruction integer_div} {:instruction 27} {:instruction float_sub} {:instruction float_yankdup} {:instruction integer_sub} {:instruction 9} {:instruction float_yankdup} {:instruction integer_stackdepth} {:instruction float_frominteger} {:instruction tag_float_196} {:instruction float_swap} {:instruction float_rot} {:instruction integer_add} {:instruction integer_stackdepth} {:instruction float_add} {:instruction in2} {:instruction float_mult} {:instruction integer_stackdepth} {:instruction float_frominteger} {:instruction tag_float_196} {:instruction float_swap} {:instruction float_rot} {:instruction integer_add} {:instruction integer_max} {:instruction float_max} {:instruction integer_stackdepth} {:instruction float_flush} {:instruction in2} {:instruction float_frominteger} {:instruction print_float} {:instruction integer_dup} {:instruction float_shove} {:instruction float_shove} {:instruction integer_inc} {:instruction float_mod} {:instruction integer_dup} {:instruction integer_dup_items} {:instruction print_integer} {:instruction integer_shove} {:instruction integer_yank} {:instruction print_integer} {:instruction integer_yank} {:instruction integer_max} {:instruction integer_fromfloat} {:instruction integer_stackdepth} {:instruction float_add} {:instruction in2} {:instruction float_mult} {:instruction integer_stackdepth} {:instruction float_frominteger} {:instruction integer_fromfloat} {:instruction integer_mod} {:instruction print_integer} {:instruction float_min} {:instruction integer_stackdepth} {:instruction tag_float_291} {:instruction integer_inc} {:instruction float_swap} {:instruction print_integer})
Best program: (integer_inc float_add float_yank integer_dup float_min float_dup_times float_inc float_dup float_mult float_mult float_sub integer_dup_items float_yankdup float_rot float_dup_times float_rot print_integer float_min print_float integer_div 27 float_sub float_yankdup integer_sub 9 float_yankdup integer_stackdepth float_frominteger tag_float_196 float_swap float_rot integer_add integer_stackdepth float_add in2 float_mult integer_stackdepth float_frominteger tag_float_196 float_swap float_rot integer_add integer_max float_max integer_stackdepth float_flush in2 float_frominteger print_float integer_dup float_shove float_shove integer_inc float_mod integer_dup integer_dup_items print_integer integer_shove integer_yank print_integer integer_yank integer_max integer_fromfloat integer_stackdepth float_add in2 float_mult integer_stackdepth float_frominteger integer_fromfloat integer_mod print_integer float_min integer_stackdepth tag_float_291 integer_inc float_swap print_integer)
Errors: [16.5677 9 6.0519 8 10.506 11 63.29 8 46.4786 10 27.3773 8 21.7659 10 62.2422 12 65.7283 11 19.35 7 66.3997 8 44.1628 8 91.2753 9 86.3488 10 73.351 10 39.0737 11 55.3057 10 90.0769 10 57.4296 9 21.0794 8 84.5969 11 9.4308 7 55.9558 9 20.9038 7 43.5424 10]
Total: 1409.2905
Mean: 28.18581
Genome size: 78
Size: 79
Percent parens: 0.013
--- Population Statistics ---
Average total errors in population: 5034.205114600003
Median total errors in population: 1410.2905
Error averages by case: (193.31012270000224 9.397 186.30949429999987 7.371 188.7417380999979 10.701 180.6474411000003 8.649 216.5426961000012 9.817 149.80081759999712 8.744 145.64589859999924 10.544 180.58007280000152 12.038 170.8611514999991 10.897 144.3702709000017 7.807 184.64669990000058 9.453 163.8157015999995 9.342 250.2378108000017 8.95 246.3285540000029 10.564 170.13345079999849 11.196 192.21993630000003 11.331 173.6602853999989 10.472 202.68879859999734 11.012 229.48390150000108 10.442 144.57567720000006 8.722 245.89844260000154 10.296 187.94498740000094 8.033 226.54438269999864 10.442 198.70361539999828 8.145 215.74016670000202 10.408)
Error minima by case: (15.5441 7 5.9984 6 9.4824 10 27.3187 5 36.545 8 8.5978 6 16.2242 9 19.2178 6 1.0 4 1.3547 6 12.3806 8 5.981 6 0.2234 5 4.6848 6 0.0 4 3.0501 5 23.2821 6 9.9231 4 57.3761 6 4.907 5 9.5633 6 8.4072 7 55.9023 6 20.8503 6 43.489 6)
Average genome size in population (length): 100.092
Average program size in population (points): 101.092
Average percent parens in population: 0.010
Minimum age in population: 80.60104798290013
Maximum age in population: 86.12240248008266
Average age in population: 84.24243157593233
Median age in population: 84.26978544867033
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 8
Genome diversity (% unique Plush genomes):	 0.941
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 8
Syntactic diversity (% unique Push programs):	 0.941
Total error diversity:				 0.259
Error (vector) diversity:			 0.3
Behavioral diversity:				 0.3
--- Run Statistics ---
Number of program evaluations used so far: 61000
Number of point (instruction) evaluations so far: 143375681
--- Timings ---
Current time: 1529615409881 milliseconds
Total Time:         256.5 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:        85.3 seconds, 33.2%
Fitness Testing:    135.0 seconds, 52.6%
Report:              36.1 seconds, 14.1%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 60
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 61
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 61
;;******************************
;; -*- Number IO problem report - generation 61
Test total error for best: 60016.23070000004
Test mean error for best: 30.00812
;;------------------------------
Outputs of best individual on training cases:
Correct output: -57.4559422311 | Program output: -74.023613    
Correct output: -71.0754923621 | Program output: -65.023613    
Correct output: -66.5176295557 | Program output: -77.023613    
Correct output: 149.3187378    | Program output: 86.028723     
Correct output: -36.5450493525 | Program output: -83.023613    
Correct output: 75.4021928097  | Program output: 48.024903     
Correct output: 52.2615929867  | Program output: 74.027523     
Correct output: -19.2178367434 | Program output: 43.024413     
Correct output: 66.7518906772  | Program output: 1.023613      
Correct output: 7.673605441    | Program output: 27.023603     
Correct output: 23.6294031682  | Program output: 90.029103     
Correct output: -6.1389033433  | Program output: 38.023923     
Correct output: 9.2516366816   | Program output: -82.023623    
Correct output: 31.3251776267  | Program output: -55.023623    
Correct output: 73.3746496408  | Program output: 0.023603      
Correct output: 20.0500553336  | Program output: -19.023623    
Correct output: -23.2820697498 | Program output: 32.023623     
Correct output: 120.1004999359 | Program output: 30.023603     
Correct output: -155.453212395 | Program output: -98.023613    
Correct output: 31.10301576    | Program output: 10.023613     
Correct output: 45.5733057121  | Program output: -39.023603    
Correct output: -68.592783645  | Program output: -78.023603    
Correct output: -125.979392023 | Program output: -70.023623    
Correct output: -91.9273649148 | Program output: -71.023613    
Correct output: -92.5660607267 | Program output: -49.023623    
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_inc} {:instruction float_add} {:instruction float_yank} {:instruction integer_dup} {:instruction float_min} {:instruction float_dup_times} {:instruction float_inc} {:instruction float_dup} {:instruction float_mult} {:instruction float_mult} {:instruction float_sub} {:instruction integer_dup_items} {:instruction float_yankdup} {:instruction float_rot} {:instruction float_dup_times} {:instruction float_rot} {:instruction print_integer} {:instruction float_min} {:instruction print_float} {:instruction integer_div} {:instruction 27} {:instruction float_sub} {:instruction float_yankdup} {:instruction integer_sub} {:instruction 9} {:instruction float_yankdup} {:instruction integer_stackdepth} {:instruction float_frominteger} {:instruction tag_float_196} {:instruction float_swap} {:instruction float_rot} {:instruction integer_add} {:instruction integer_stackdepth} {:instruction float_add} {:instruction in2} {:instruction float_mult} {:instruction integer_stackdepth} {:instruction float_frominteger} {:instruction tag_float_196} {:instruction float_swap} {:instruction float_rot} {:instruction integer_add} {:instruction integer_max} {:instruction float_max} {:instruction integer_stackdepth} {:instruction float_flush} {:instruction in2} {:instruction float_frominteger} {:instruction print_float} {:instruction integer_dup} {:instruction float_shove} {:instruction integer_dup_items} {:instruction integer_inc} {:instruction float_mod} {:instruction integer_dup} {:instruction integer_dup_items} {:instruction print_integer} {:instruction integer_shove} {:instruction integer_yank} {:instruction print_integer} {:instruction integer_yank} {:instruction integer_max} {:instruction integer_fromfloat} {:instruction integer_stackdepth} {:instruction float_add} {:instruction in2} {:instruction float_mult} {:instruction integer_stackdepth} {:instruction float_frominteger} {:instruction integer_fromfloat} {:instruction integer_mod} {:instruction print_integer} {:instruction float_min} {:instruction integer_stackdepth} {:instruction tag_float_291} {:instruction integer_inc} {:instruction float_swap} {:instruction print_integer})
Best program: (integer_inc float_add float_yank integer_dup float_min float_dup_times float_inc float_dup float_mult float_mult float_sub integer_dup_items float_yankdup float_rot float_dup_times float_rot print_integer float_min print_float integer_div 27 float_sub float_yankdup integer_sub 9 float_yankdup integer_stackdepth float_frominteger tag_float_196 float_swap float_rot integer_add integer_stackdepth float_add in2 float_mult integer_stackdepth float_frominteger tag_float_196 float_swap float_rot integer_add integer_max float_max integer_stackdepth float_flush in2 float_frominteger print_float integer_dup float_shove integer_dup_items integer_inc float_mod integer_dup integer_dup_items print_integer integer_shove integer_yank print_integer integer_yank integer_max integer_fromfloat integer_stackdepth float_add in2 float_mult integer_stackdepth float_frominteger integer_fromfloat integer_mod print_integer float_min integer_stackdepth tag_float_291 integer_inc float_swap print_integer)
Errors: [16.5677 9 6.0519 8 10.506 11 63.29 8 46.4786 10 27.3773 8 21.7659 10 62.2422 12 65.7283 11 19.35 7 66.3997 8 44.1628 8 91.2753 9 86.3488 10 73.351 10 39.0737 11 55.3057 10 90.0769 10 57.4296 9 21.0794 8 84.5969 11 9.4308 7 55.9558 9 20.9038 7 43.5424 10]
Total: 1409.2905
Mean: 28.18581
Genome size: 78
Size: 79
Percent parens: 0.013
--- Population Statistics ---
Average total errors in population: 5171.327763300002
Median total errors in population: 1410.2905
Error averages by case: (188.72317910000265 9.396 183.1086213999999 7.378 184.79509529999754 10.653 196.43496220000085 8.619 213.15107630000122 9.81 163.62665199999682 8.754 162.3478733999991 10.541 195.6703339000027 12.046 182.50649079999855 10.915 157.71873630000192 7.744 199.7953031000015 9.417 178.20170419999934 9.318 248.37238310000174 8.942 243.36111990000308 10.556 186.71238639999794 11.136 197.26352990000058 11.313 187.43843999999896 10.462 215.40504149999634 11.01 225.89277550000136 10.446 156.9168961999992 8.718 242.67296210000177 10.334 183.98342400000098 7.967 224.4347681999985 10.424 195.5489641999981 8.107 212.8560443000023 10.383)
Error minima by case: (16.5441 7 5.9901 6 10.4824 8 31.6813 7 35.7545 8 27.3167 7 21.7384 9 19.2278 10 24.2717 8 3.3264 5 3.3806 8 5.981 6 1.7484 7 4.3152 9 16.649 8 6.9599 9 23.2921 9 60.8995 9 57.3679 9 0.103 6 18.5633 8 9.4072 7 55.894 9 20.842 6 28.4339 9)
Average genome size in population (length): 98.802
Average program size in population (points): 99.802
Average percent parens in population: 0.010
Minimum age in population: 82.49829090081641
Maximum age in population: 87.82556171760811
Average age in population: 85.69033779793236
Median age in population: 85.72477744011802
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 9
Genome diversity (% unique Plush genomes):	 0.911
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 9
Syntactic diversity (% unique Push programs):	 0.911
Total error diversity:				 0.25
Error (vector) diversity:			 0.304
Behavioral diversity:				 0.305
--- Run Statistics ---
Number of program evaluations used so far: 62000
Number of point (instruction) evaluations so far: 145847031
--- Timings ---
Current time: 1529615414109 milliseconds
Total Time:         260.6 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:        86.7 seconds, 33.2%
Fitness Testing:    137.3 seconds, 52.7%
Report:              36.6 seconds, 14.0%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 61
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 62
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 62
;;******************************
;; -*- Number IO problem report - generation 62
Test total error for best: 60016.23070000004
Test mean error for best: 30.00812
;;------------------------------
Outputs of best individual on training cases:
Correct output: -57.4559422311 | Program output: -74.023613    
Correct output: -71.0754923621 | Program output: -65.023613    
Correct output: -66.5176295557 | Program output: -77.023613    
Correct output: 149.3187378    | Program output: 86.028723     
Correct output: -36.5450493525 | Program output: -83.023613    
Correct output: 75.4021928097  | Program output: 48.024903     
Correct output: 52.2615929867  | Program output: 74.027523     
Correct output: -19.2178367434 | Program output: 43.024413     
Correct output: 66.7518906772  | Program output: 1.023613      
Correct output: 7.673605441    | Program output: 27.023603     
Correct output: 23.6294031682  | Program output: 90.029103     
Correct output: -6.1389033433  | Program output: 38.023923     
Correct output: 9.2516366816   | Program output: -82.023623    
Correct output: 31.3251776267  | Program output: -55.023623    
Correct output: 73.3746496408  | Program output: 0.023603      
Correct output: 20.0500553336  | Program output: -19.023623    
Correct output: -23.2820697498 | Program output: 32.023623     
Correct output: 120.1004999359 | Program output: 30.023603     
Correct output: -155.453212395 | Program output: -98.023613    
Correct output: 31.10301576    | Program output: 10.023613     
Correct output: 45.5733057121  | Program output: -39.023603    
Correct output: -68.592783645  | Program output: -78.023603    
Correct output: -125.979392023 | Program output: -70.023623    
Correct output: -91.9273649148 | Program output: -71.023613    
Correct output: -92.5660607267 | Program output: -49.023623    
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_inc} {:instruction float_add} {:instruction float_yank} {:instruction integer_dup} {:instruction float_min} {:instruction float_dup_times} {:instruction float_inc} {:instruction float_dup} {:instruction float_mult} {:instruction float_mult} {:instruction float_sub} {:instruction integer_dup_items} {:instruction float_yankdup} {:instruction float_rot} {:instruction float_dup_times} {:instruction float_rot} {:instruction print_integer} {:instruction float_min} {:instruction print_float} {:instruction integer_div} {:instruction 27} {:instruction float_sub} {:instruction float_yankdup} {:instruction integer_sub} {:instruction 9} {:instruction float_yankdup} {:instruction integer_stackdepth} {:instruction float_frominteger} {:instruction tag_float_196} {:instruction float_swap} {:instruction float_rot} {:instruction integer_add} {:instruction integer_stackdepth} {:instruction float_add} {:instruction in2} {:instruction float_mult} {:instruction integer_stackdepth} {:instruction float_frominteger} {:instruction tag_float_196} {:instruction float_swap} {:instruction float_rot} {:instruction integer_add} {:instruction integer_max} {:instruction float_max} {:instruction integer_stackdepth} {:instruction float_flush} {:instruction in2} {:instruction float_frominteger} {:instruction print_float} {:instruction integer_dup} {:instruction float_shove} {:instruction float_shove} {:instruction integer_inc} {:instruction float_mod} {:instruction integer_dup} {:instruction integer_dup_items} {:instruction print_integer} {:instruction integer_shove} {:instruction integer_yank} {:instruction print_integer} {:instruction integer_yank} {:instruction integer_max} {:instruction integer_fromfloat} {:instruction integer_stackdepth} {:instruction float_add} {:instruction in2} {:instruction float_mult} {:instruction integer_stackdepth} {:instruction float_frominteger} {:instruction integer_fromfloat} {:instruction integer_mod} {:instruction print_integer} {:instruction float_min} {:instruction integer_stackdepth} {:instruction tag_float_291} {:instruction integer_inc} {:instruction float_swap} {:instruction print_integer})
Best program: (integer_inc float_add float_yank integer_dup float_min float_dup_times float_inc float_dup float_mult float_mult float_sub integer_dup_items float_yankdup float_rot float_dup_times float_rot print_integer float_min print_float integer_div 27 float_sub float_yankdup integer_sub 9 float_yankdup integer_stackdepth float_frominteger tag_float_196 float_swap float_rot integer_add integer_stackdepth float_add in2 float_mult integer_stackdepth float_frominteger tag_float_196 float_swap float_rot integer_add integer_max float_max integer_stackdepth float_flush in2 float_frominteger print_float integer_dup float_shove float_shove integer_inc float_mod integer_dup integer_dup_items print_integer integer_shove integer_yank print_integer integer_yank integer_max integer_fromfloat integer_stackdepth float_add in2 float_mult integer_stackdepth float_frominteger integer_fromfloat integer_mod print_integer float_min integer_stackdepth tag_float_291 integer_inc float_swap print_integer)
Errors: [16.5677 9 6.0519 8 10.506 11 63.29 8 46.4786 10 27.3773 8 21.7659 10 62.2422 12 65.7283 11 19.35 7 66.3997 8 44.1628 8 91.2753 9 86.3488 10 73.351 10 39.0737 11 55.3057 10 90.0769 10 57.4296 9 21.0794 8 84.5969 11 9.4308 7 55.9558 9 20.9038 7 43.5424 10]
Total: 1409.2905
Mean: 28.18581
Genome size: 78
Size: 79
Percent parens: 0.013
--- Population Statistics ---
Average total errors in population: 5249.677014500004
Median total errors in population: 1410.2905
Error averages by case: (199.07851910000247 9.461 190.87698819999957 7.538 194.66538249999778 10.726 195.58272130000088 8.626 222.43444890000126 9.906 163.81921219999705 8.737 160.53030949999913 10.54 191.74752590000213 12.006 182.25835799999868 10.918 152.70326770000176 7.813 198.6226416000013 9.384 177.86952409999915 9.328 254.9712729000014 9.033 251.061607900003 10.572 184.37914269999834 11.112 200.9879443000005 11.335 185.53686179999897 10.497 213.27102529999706 10.989 234.4356526000012 10.418 153.8749509 8.703 247.51272990000157 10.395 193.23951170000097 8.052 231.60553869999876 10.355 203.33207779999836 8.185 220.24679900000206 10.404)
Error minima by case: (15.5814 7 5.9828 6 9.5197 9 37.3087 5 36.555 8 26.3648 6 7.2616 9 19.2278 6 6.2481 5 4.3264 5 0.3706 7 6.1489 6 7.2516 5 4.6748 6 15.6956 4 5.0501 5 23.2921 6 8.0905 4 57.3605 6 4.897 5 9.5733 6 8.4446 6 55.8867 6 20.8347 6 43.4734 6)
Average genome size in population (length): 97.161
Average program size in population (points): 98.161
Average percent parens in population: 0.010
Minimum age in population: 84.68593259555891
Maximum age in population: 89.266725284
Average age in population: 87.0754936461445
Median age in population: 87.12141829950303
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 20
Genome diversity (% unique Plush genomes):	 0.917
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 20
Syntactic diversity (% unique Push programs):	 0.917
Total error diversity:				 0.26
Error (vector) diversity:			 0.309
Behavioral diversity:				 0.31
--- Run Statistics ---
Number of program evaluations used so far: 63000
Number of point (instruction) evaluations so far: 148277481
--- Timings ---
Current time: 1529615418328 milliseconds
Total Time:         265.0 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:        88.0 seconds, 33.2%
Fitness Testing:    139.6 seconds, 52.7%
Report:              37.2 seconds, 14.0%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 62
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 63
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 63
;;******************************
;; -*- Number IO problem report - generation 63
Test total error for best: 60074.23080000003
Test mean error for best: 30.03712
;;------------------------------
Outputs of best individual on training cases:
Correct output: -57.4559422311 | Program output: -74.023612    
Correct output: -71.0754923621 | Program output: -65.023612    
Correct output: -66.5176295557 | Program output: -77.023612    
Correct output: 149.3187378    | Program output: 86.028722     
Correct output: -36.5450493525 | Program output: -83.023612    
Correct output: 75.4021928097  | Program output: 48.024902     
Correct output: 52.2615929867  | Program output: 74.027522     
Correct output: -19.2178367434 | Program output: 43.024412     
Correct output: 66.7518906772  | Program output: 1.023612      
Correct output: 7.673605441    | Program output: 27.023602     
Correct output: 23.6294031682  | Program output: 90.029102     
Correct output: -6.1389033433  | Program output: 38.023922     
Correct output: 9.2516366816   | Program output: -82.023622    
Correct output: 31.3251776267  | Program output: -55.023622    
Correct output: 73.3746496408  | Program output: 0.023602      
Correct output: 20.0500553336  | Program output: -19.023622    
Correct output: -23.2820697498 | Program output: 32.023622     
Correct output: 120.1004999359 | Program output: 30.023602     
Correct output: -155.453212395 | Program output: -98.023612    
Correct output: 31.10301576    | Program output: 10.023612     
Correct output: 45.5733057121  | Program output: -39.023602    
Correct output: -68.592783645  | Program output: -78.023602    
Correct output: -125.979392023 | Program output: -70.023622    
Correct output: -91.9273649148 | Program output: -71.023612    
Correct output: -92.5660607267 | Program output: -49.023622    
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_inc} {:instruction float_add} {:instruction float_yank} {:instruction integer_dup} {:instruction float_min} {:instruction float_dup_times} {:instruction float_inc} {:instruction float_dup} {:instruction float_mult} {:instruction float_mult} {:instruction float_sub} {:instruction integer_dup_items} {:instruction float_yankdup} {:instruction float_rot} {:instruction float_dup_times} {:instruction float_rot} {:instruction print_integer} {:instruction float_min} {:instruction print_float} {:instruction integer_div} {:instruction 27} {:instruction float_sub} {:instruction float_yankdup} {:instruction integer_sub} {:instruction 9} {:instruction float_yankdup} {:instruction integer_stackdepth} {:instruction float_frominteger} {:instruction tag_float_196} {:instruction float_swap} {:instruction float_rot} {:instruction integer_add} {:instruction integer_stackdepth} {:instruction float_add} {:instruction in2} {:instruction float_mult} {:instruction integer_stackdepth} {:instruction float_frominteger} {:instruction tag_float_196} {:instruction float_swap} {:instruction float_rot} {:instruction integer_add} {:instruction integer_max} {:instruction float_max} {:instruction integer_stackdepth} {:instruction float_flush} {:instruction in2} {:instruction float_frominteger} {:instruction print_float} {:instruction integer_dup} {:instruction float_shove} {:instruction integer_dup_items} {:instruction integer_inc} {:instruction float_mod} {:instruction integer_dup} {:instruction integer_dup_items} {:instruction print_integer} {:instruction integer_shove} {:instruction integer_yank} {:instruction print_integer} {:instruction integer_yank} {:instruction integer_max} {:instruction integer_fromfloat} {:instruction integer_stackdepth} {:instruction float_add} {:instruction in2} {:instruction float_mult} {:instruction integer_stackdepth} {:instruction float_frominteger} {:instruction integer_fromfloat} {:instruction integer_mod} {:instruction print_integer} {:instruction float_min} {:instruction integer_stackdepth} {:instruction tag_float_291} {:instruction float_pop} {:instruction float_swap} {:instruction print_integer})
Best program: (integer_inc float_add float_yank integer_dup float_min float_dup_times float_inc float_dup float_mult float_mult float_sub integer_dup_items float_yankdup float_rot float_dup_times float_rot print_integer float_min print_float integer_div 27 float_sub float_yankdup integer_sub 9 float_yankdup integer_stackdepth float_frominteger tag_float_196 float_swap float_rot integer_add integer_stackdepth float_add in2 float_mult integer_stackdepth float_frominteger tag_float_196 float_swap float_rot integer_add integer_max float_max integer_stackdepth float_flush in2 float_frominteger print_float integer_dup float_shove integer_dup_items integer_inc float_mod integer_dup integer_dup_items print_integer integer_shove integer_yank print_integer integer_yank integer_max integer_fromfloat integer_stackdepth float_add in2 float_mult integer_stackdepth float_frominteger integer_fromfloat integer_mod print_integer float_min integer_stackdepth tag_float_291 float_pop float_swap print_integer)
Errors: [16.5677 9 6.0519 8 10.506 11 63.29 8 46.4786 10 27.3773 8 21.7659 10 62.2422 12 65.7283 10 19.35 7 66.3997 8 44.1628 9 91.2753 9 86.3488 10 73.351 10 39.0737 11 55.3057 10 90.0769 11 57.4296 9 21.0794 8 84.5969 10 9.4308 7 55.9558 9 20.9038 7 43.5424 10]
Total: 1409.2905
Mean: 28.18581
Genome size: 78
Size: 79
Percent parens: 0.013
--- Population Statistics ---
Average total errors in population: 5202.506853400003
Median total errors in population: 1412.2864000000002
Error averages by case: (191.83637990000267 9.508 183.3760298999995 7.905 187.32629959999772 10.804 199.21940380000066 8.689 215.6789263000009 10.046 166.8091034999974 8.787 163.08278529999913 10.549 196.30461720000184 11.957 180.97939199999888 10.897 157.8252337000017 7.847 198.95726310000114 9.252 180.91372309999946 9.25 250.8565827000015 9.22 246.10377040000262 10.581 182.25791119999826 10.992 197.2951822000007 11.355 189.19703229999908 10.49 218.2887903999967 10.902 228.25158790000094 10.331 158.38300349999915 8.568 244.35470440000128 10.508 186.47559820000075 8.073 224.4814376999989 10.204 195.81882909999868 8.219 213.12926600000193 10.37)
Error minima by case: (15.5814 7 6.0255 6 9.5197 9 25.3187 5 18.545 8 26.3648 6 21.7384 9 19.2278 6 35.7292 5 4.3264 6 0.3706 7 6.1389 6 2.7484 5 4.3151 6 28.6254 4 2.9499 5 17.7354 6 3.8995 4 57.4032 6 4.1029 5 18.5632 6 8.4446 6 55.9294 6 20.8774 6 38.4339 6)
Average genome size in population (length): 93.242
Average program size in population (points): 94.242
Average percent parens in population: 0.011
Minimum age in population: 85.85422570314076
Maximum age in population: 90.30986405033966
Average age in population: 88.43758319015448
Median age in population: 88.48494507542743
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 38
Genome diversity (% unique Plush genomes):	 0.889
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 38
Syntactic diversity (% unique Push programs):	 0.889
Total error diversity:				 0.284
Error (vector) diversity:			 0.349
Behavioral diversity:				 0.349
--- Run Statistics ---
Number of program evaluations used so far: 64000
Number of point (instruction) evaluations so far: 150609506
--- Timings ---
Current time: 1529615422260 milliseconds
Total Time:         268.9 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:        89.4 seconds, 33.2%
Fitness Testing:    141.8 seconds, 52.7%
Report:              37.7 seconds, 14.0%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 63
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 64
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 64
;;******************************
;; -*- Number IO problem report - generation 64
Test total error for best: 60054.23050000004
Test mean error for best: 30.02712
;;------------------------------
Outputs of best individual on training cases:
Correct output: -57.4559422311 | Program output: -74.023616    
Correct output: -71.0754923621 | Program output: -65.023616    
Correct output: -66.5176295557 | Program output: -77.023616    
Correct output: 149.3187378    | Program output: 86.028726     
Correct output: -36.5450493525 | Program output: -83.023616    
Correct output: 75.4021928097  | Program output: 48.024906     
Correct output: 52.2615929867  | Program output: 74.027526     
Correct output: -19.2178367434 | Program output: 43.024416     
Correct output: 66.7518906772  | Program output: 1.023616      
Correct output: 7.673605441    | Program output: 27.023606     
Correct output: 23.6294031682  | Program output: 90.029106     
Correct output: -6.1389033433  | Program output: 38.023926     
Correct output: 9.2516366816   | Program output: -82.023626    
Correct output: 31.3251776267  | Program output: -55.023626    
Correct output: 73.3746496408  | Program output: 0.023606      
Correct output: 20.0500553336  | Program output: -19.023626    
Correct output: -23.2820697498 | Program output: 32.023626     
Correct output: 120.1004999359 | Program output: 30.023606     
Correct output: -155.453212395 | Program output: -98.023616    
Correct output: 31.10301576    | Program output: 10.023616     
Correct output: 45.5733057121  | Program output: -39.023606    
Correct output: -68.592783645  | Program output: -78.023606    
Correct output: -125.979392023 | Program output: -70.023626    
Correct output: -91.9273649148 | Program output: -71.023616    
Correct output: -92.5660607267 | Program output: -49.023626    
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_inc} {:instruction float_add} {:instruction float_yank} {:instruction integer_dup} {:instruction float_min} {:instruction integer_shove} {:instruction float_inc} {:instruction float_dup} {:instruction float_mult} {:instruction float_mult} {:instruction float_sub} {:instruction integer_dup_items} {:instruction float_yankdup} {:instruction float_rot} {:instruction float_dup_times} {:instruction float_rot} {:instruction print_integer} {:instruction float_min} {:instruction print_float} {:instruction integer_div} {:instruction 27} {:instruction float_sub} {:instruction float_yankdup} {:instruction integer_sub} {:instruction 9} {:instruction float_yankdup} {:instruction integer_stackdepth} {:instruction float_frominteger} {:instruction tag_float_196} {:instruction float_swap} {:instruction float_rot} {:instruction integer_add} {:instruction integer_stackdepth} {:instruction float_add} {:instruction in2} {:instruction float_mult} {:instruction integer_stackdepth} {:instruction float_frominteger} {:instruction tag_float_196} {:instruction float_swap} {:instruction float_rot} {:instruction integer_add} {:instruction integer_max} {:instruction float_max} {:instruction integer_stackdepth} {:instruction float_flush} {:instruction in2} {:instruction float_frominteger} {:instruction print_float} {:instruction integer_dup} {:instruction float_shove} {:instruction float_shove} {:instruction integer_inc} {:instruction float_mod} {:instruction integer_dup} {:instruction integer_dup_items} {:instruction print_integer} {:instruction integer_shove} {:instruction integer_yank} {:instruction print_integer} {:instruction integer_yank} {:instruction integer_max} {:instruction float_sin} {:instruction integer_stackdepth} {:instruction float_add} {:instruction in2} {:instruction float_mult} {:instruction integer_stackdepth} {:instruction float_frominteger} {:instruction integer_fromfloat} {:instruction integer_mod} {:instruction print_integer} {:instruction float_min} {:instruction integer_stackdepth} {:instruction tag_float_291} {:instruction 6} {:instruction float_swap} {:instruction print_integer})
Best program: (integer_inc float_add float_yank integer_dup float_min integer_shove float_inc float_dup float_mult float_mult float_sub integer_dup_items float_yankdup float_rot float_dup_times float_rot print_integer float_min print_float integer_div 27 float_sub float_yankdup integer_sub 9 float_yankdup integer_stackdepth float_frominteger tag_float_196 float_swap float_rot integer_add integer_stackdepth float_add in2 float_mult integer_stackdepth float_frominteger tag_float_196 float_swap float_rot integer_add integer_max float_max integer_stackdepth float_flush in2 float_frominteger print_float integer_dup float_shove float_shove integer_inc float_mod integer_dup integer_dup_items print_integer integer_shove integer_yank print_integer integer_yank integer_max float_sin integer_stackdepth float_add in2 float_mult integer_stackdepth float_frominteger integer_fromfloat integer_mod print_integer float_min integer_stackdepth tag_float_291 6 float_swap print_integer)
Errors: [16.5677 9 6.0519 8 10.506 11 63.29 8 46.4786 10 27.3773 8 21.7659 9 62.2423 12 65.7283 11 19.35 7 66.3997 8 44.1628 9 91.2753 8 86.3488 9 73.351 10 39.0737 10 55.3057 10 90.0769 11 57.4296 10 21.0794 7 84.5969 11 9.4308 7 55.9558 10 20.9037 7 43.5424 9]
Total: 1407.2905
Mean: 28.14581
Genome size: 78
Size: 79
Percent parens: 0.013
--- Population Statistics ---
Average total errors in population: 4527.093134500004
Median total errors in population: 1410.2905
Error averages by case: (163.93099480000157 9.472 155.20499540000003 8.29 159.22318109999827 10.969 170.4102458999999 8.582 188.56901150000107 10.166 136.93503129999775 8.673 133.00659709999917 10.493 167.6665795000003 11.873 159.73458819999937 10.896 128.89507130000115 7.767 170.50171560000058 8.946 151.64895299999986 8.854 224.91702890000101 9.369 220.27156640000274 10.494 164.27510509999885 10.639 175.05455019999985 11.244 161.618906799999 10.401 191.47721969999742 10.577 200.46329810000123 10.007 131.27303360000082 8.317 218.6043287000013 10.746 158.33435390000065 7.908 197.76350669999897 9.824 168.17935399999953 8.055 186.26691770000187 10.305)
Error minima by case: (16.5441 7 5.9764 6 10.4824 9 36.71 7 37.545 7 25.4022 7 7.2616 9 20.2178 9 24.2808 8 3.3264 6 0.6294 7 7.1389 7 5.2516 7 4.6978 9 16.6581 7 2.9499 9 24.2821 9 9.9228 8 57.3541 9 4.91 6 8.5733 8 9.4072 6 55.8803 8 20.8283 6 43.467 8)
Average genome size in population (length): 85.765
Average program size in population (points): 86.765
Average percent parens in population: 0.012
Minimum age in population: 87.56069619384974
Maximum age in population: 92.04101800350485
Average age in population: 89.80941511053791
Median age in population: 89.84049992949961
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 66
Genome diversity (% unique Plush genomes):	 0.816
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 66
Syntactic diversity (% unique Push programs):	 0.816
Total error diversity:				 0.278
Error (vector) diversity:			 0.339
Behavioral diversity:				 0.339
--- Run Statistics ---
Number of program evaluations used so far: 65000
Number of point (instruction) evaluations so far: 152754256
--- Timings ---
Current time: 1529615426236 milliseconds
Total Time:         272.8 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:        90.6 seconds, 33.2%
Fitness Testing:    143.8 seconds, 52.7%
Report:              38.2 seconds, 14.0%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 64
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 65
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 65
;;******************************
;; -*- Number IO problem report - generation 65
Test total error for best: 60054.23050000004
Test mean error for best: 30.02712
;;------------------------------
Outputs of best individual on training cases:
Correct output: -57.4559422311 | Program output: -74.023616    
Correct output: -71.0754923621 | Program output: -65.023616    
Correct output: -66.5176295557 | Program output: -77.023616    
Correct output: 149.3187378    | Program output: 86.028726     
Correct output: -36.5450493525 | Program output: -83.023616    
Correct output: 75.4021928097  | Program output: 48.024906     
Correct output: 52.2615929867  | Program output: 74.027526     
Correct output: -19.2178367434 | Program output: 43.024416     
Correct output: 66.7518906772  | Program output: 1.023616      
Correct output: 7.673605441    | Program output: 27.023606     
Correct output: 23.6294031682  | Program output: 90.029106     
Correct output: -6.1389033433  | Program output: 38.023926     
Correct output: 9.2516366816   | Program output: -82.023626    
Correct output: 31.3251776267  | Program output: -55.023626    
Correct output: 73.3746496408  | Program output: 0.023606      
Correct output: 20.0500553336  | Program output: -19.023626    
Correct output: -23.2820697498 | Program output: 32.023626     
Correct output: 120.1004999359 | Program output: 30.023606     
Correct output: -155.453212395 | Program output: -98.023616    
Correct output: 31.10301576    | Program output: 10.023616     
Correct output: 45.5733057121  | Program output: -39.023606    
Correct output: -68.592783645  | Program output: -78.023606    
Correct output: -125.979392023 | Program output: -70.023626    
Correct output: -91.9273649148 | Program output: -71.023616    
Correct output: -92.5660607267 | Program output: -49.023626    
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_inc} {:instruction float_add} {:instruction float_yank} {:instruction integer_dup} {:instruction float_min} {:instruction integer_shove} {:instruction float_inc} {:instruction float_dup} {:instruction float_mult} {:instruction float_mult} {:instruction float_sub} {:instruction integer_dup_items} {:instruction float_yankdup} {:instruction float_rot} {:instruction float_dup_times} {:instruction float_rot} {:instruction print_integer} {:instruction float_min} {:instruction print_float} {:instruction integer_div} {:instruction 27} {:instruction float_sub} {:instruction float_yankdup} {:instruction integer_sub} {:instruction 9} {:instruction float_yankdup} {:instruction integer_stackdepth} {:instruction float_frominteger} {:instruction tag_float_196} {:instruction float_swap} {:instruction float_rot} {:instruction integer_add} {:instruction integer_stackdepth} {:instruction float_add} {:instruction in2} {:instruction float_mult} {:instruction integer_stackdepth} {:instruction float_frominteger} {:instruction tag_float_196} {:instruction float_swap} {:instruction float_rot} {:instruction integer_add} {:instruction integer_max} {:instruction float_max} {:instruction integer_stackdepth} {:instruction float_flush} {:instruction in2} {:instruction float_frominteger} {:instruction print_float} {:instruction integer_dup} {:instruction float_shove} {:instruction float_shove} {:instruction integer_inc} {:instruction float_mod} {:instruction integer_dup} {:instruction integer_dup_items} {:instruction print_integer} {:instruction integer_shove} {:instruction integer_yank} {:instruction print_integer} {:instruction integer_yank} {:instruction integer_max} {:instruction float_sin} {:instruction integer_stackdepth} {:instruction float_add} {:instruction in2} {:instruction float_mult} {:instruction integer_stackdepth} {:instruction float_frominteger} {:instruction integer_fromfloat} {:instruction integer_mod} {:instruction print_integer} {:instruction float_min} {:instruction integer_stackdepth} {:instruction tag_float_291} {:instruction 6} {:instruction float_swap} {:instruction print_integer})
Best program: (integer_inc float_add float_yank integer_dup float_min integer_shove float_inc float_dup float_mult float_mult float_sub integer_dup_items float_yankdup float_rot float_dup_times float_rot print_integer float_min print_float integer_div 27 float_sub float_yankdup integer_sub 9 float_yankdup integer_stackdepth float_frominteger tag_float_196 float_swap float_rot integer_add integer_stackdepth float_add in2 float_mult integer_stackdepth float_frominteger tag_float_196 float_swap float_rot integer_add integer_max float_max integer_stackdepth float_flush in2 float_frominteger print_float integer_dup float_shove float_shove integer_inc float_mod integer_dup integer_dup_items print_integer integer_shove integer_yank print_integer integer_yank integer_max float_sin integer_stackdepth float_add in2 float_mult integer_stackdepth float_frominteger integer_fromfloat integer_mod print_integer float_min integer_stackdepth tag_float_291 6 float_swap print_integer)
Errors: [16.5677 9 6.0519 8 10.506 11 63.29 8 46.4786 10 27.3773 8 21.7659 9 62.2423 12 65.7283 11 19.35 7 66.3997 8 44.1628 9 91.2753 8 86.3488 9 73.351 10 39.0737 10 55.3057 10 90.0769 11 57.4296 10 21.0794 7 84.5969 11 9.4308 7 55.9558 10 20.9037 7 43.5424 9]
Total: 1407.2905
Mean: 28.14581
Genome size: 78
Size: 79
Percent parens: 0.013
--- Population Statistics ---
Average total errors in population: 4090.843799500003
Median total errors in population: 1410.2905
Error averages by case: (153.21956000000074 9.398 146.48863220000078 8.555 148.31255929999827 11.036 144.0410944999989 8.466 178.24969340000115 10.248 110.41448669999833 8.574 107.2141058999993 10.376 142.9273247999989 11.755 132.416078100001 10.892 105.01220410000089 7.704 146.81381659999963 8.643 126.36573560000119 8.574 215.5055078000009 9.487 211.16295050000272 10.411 139.51852309999884 10.368 159.21267259999908 11.145 136.55899529999883 10.321 166.83650469999833 10.355 191.44006610000142 9.736 104.36409630000084 8.094 209.8117717000015 10.96 147.36702480000082 7.714 189.48611859999886 9.486 159.36239449999985 7.879 178.3168823000019 10.248)
Error minima by case: (16.5461 8 6.0155 6 10.4845 9 36.7049 7 37.558 7 26.4002 7 21.7404 9 19.2633 9 24.2717 9 3.3264 6 0.3706 7 6.1793 6 2.7484 7 4.6868 9 16.649 9 2.9499 9 23.3194 8 9.9226 9 57.3932 9 4.899 6 9.5613 8 9.4092 6 55.9194 8 20.8674 6 43.5061 9)
Average genome size in population (length): 80.054
Average program size in population (points): 81.054
Average percent parens in population: 0.012
Minimum age in population: 88.79030636451037
Maximum age in population: 93.63949661536641
Average age in population: 91.32910565740188
Median age in population: 91.3769009886113
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 64
Genome diversity (% unique Plush genomes):	 0.782
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 64
Syntactic diversity (% unique Push programs):	 0.782
Total error diversity:				 0.242
Error (vector) diversity:			 0.291
Behavioral diversity:				 0.292
--- Run Statistics ---
Number of program evaluations used so far: 66000
Number of point (instruction) evaluations so far: 154756081
--- Timings ---
Current time: 1529615430046 milliseconds
Total Time:         276.7 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:        92.0 seconds, 33.2%
Fitness Testing:    145.8 seconds, 52.7%
Report:              38.8 seconds, 14.0%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 65
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 66
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 66
;;******************************
;; -*- Number IO problem report - generation 66
Test total error for best: 60054.23050000004
Test mean error for best: 30.02712
;;------------------------------
Outputs of best individual on training cases:
Correct output: -57.4559422311 | Program output: -74.023616    
Correct output: -71.0754923621 | Program output: -65.023616    
Correct output: -66.5176295557 | Program output: -77.023616    
Correct output: 149.3187378    | Program output: 86.028726     
Correct output: -36.5450493525 | Program output: -83.023616    
Correct output: 75.4021928097  | Program output: 48.024906     
Correct output: 52.2615929867  | Program output: 74.027526     
Correct output: -19.2178367434 | Program output: 43.024416     
Correct output: 66.7518906772  | Program output: 1.023616      
Correct output: 7.673605441    | Program output: 27.023606     
Correct output: 23.6294031682  | Program output: 90.029106     
Correct output: -6.1389033433  | Program output: 38.023926     
Correct output: 9.2516366816   | Program output: -82.023626    
Correct output: 31.3251776267  | Program output: -55.023626    
Correct output: 73.3746496408  | Program output: 0.023606      
Correct output: 20.0500553336  | Program output: -19.023626    
Correct output: -23.2820697498 | Program output: 32.023626     
Correct output: 120.1004999359 | Program output: 30.023606     
Correct output: -155.453212395 | Program output: -98.023616    
Correct output: 31.10301576    | Program output: 10.023616     
Correct output: 45.5733057121  | Program output: -39.023606    
Correct output: -68.592783645  | Program output: -78.023606    
Correct output: -125.979392023 | Program output: -70.023626    
Correct output: -91.9273649148 | Program output: -71.023616    
Correct output: -92.5660607267 | Program output: -49.023626    
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_inc} {:instruction float_add} {:instruction float_yank} {:instruction integer_dup} {:instruction float_min} {:instruction integer_shove} {:instruction float_inc} {:instruction float_dup} {:instruction float_mult} {:instruction float_mult} {:instruction float_sub} {:instruction integer_dup_items} {:instruction float_yankdup} {:instruction float_rot} {:instruction float_dup_times} {:instruction float_rot} {:instruction print_integer} {:instruction float_min} {:instruction print_float} {:instruction integer_div} {:instruction 27} {:instruction float_sub} {:instruction float_yankdup} {:instruction integer_sub} {:instruction 9} {:instruction float_yankdup} {:instruction integer_stackdepth} {:instruction float_frominteger} {:instruction tag_float_196} {:instruction float_swap} {:instruction float_rot} {:instruction integer_add} {:instruction integer_stackdepth} {:instruction float_add} {:instruction in2} {:instruction float_mult} {:instruction integer_stackdepth} {:instruction float_frominteger} {:instruction tag_float_196} {:instruction float_swap} {:instruction float_rot} {:instruction integer_add} {:instruction integer_max} {:instruction float_max} {:instruction integer_stackdepth} {:instruction float_flush} {:instruction in2} {:instruction float_frominteger} {:instruction print_float} {:instruction integer_dup} {:instruction float_shove} {:instruction float_shove} {:instruction integer_inc} {:instruction float_mod} {:instruction integer_dup} {:instruction integer_dup_items} {:instruction print_integer} {:instruction integer_shove} {:instruction integer_yank} {:instruction print_integer} {:instruction integer_yank} {:instruction integer_max} {:instruction float_sin} {:instruction integer_stackdepth} {:instruction float_add} {:instruction in2} {:instruction float_mult} {:instruction integer_stackdepth} {:instruction float_frominteger} {:instruction integer_fromfloat} {:instruction integer_mod} {:instruction print_integer} {:instruction float_min} {:instruction integer_stackdepth} {:instruction tag_float_291} {:instruction 6} {:instruction float_swap} {:instruction print_integer})
Best program: (integer_inc float_add float_yank integer_dup float_min integer_shove float_inc float_dup float_mult float_mult float_sub integer_dup_items float_yankdup float_rot float_dup_times float_rot print_integer float_min print_float integer_div 27 float_sub float_yankdup integer_sub 9 float_yankdup integer_stackdepth float_frominteger tag_float_196 float_swap float_rot integer_add integer_stackdepth float_add in2 float_mult integer_stackdepth float_frominteger tag_float_196 float_swap float_rot integer_add integer_max float_max integer_stackdepth float_flush in2 float_frominteger print_float integer_dup float_shove float_shove integer_inc float_mod integer_dup integer_dup_items print_integer integer_shove integer_yank print_integer integer_yank integer_max float_sin integer_stackdepth float_add in2 float_mult integer_stackdepth float_frominteger integer_fromfloat integer_mod print_integer float_min integer_stackdepth tag_float_291 6 float_swap print_integer)
Errors: [16.5677 9 6.0519 8 10.506 11 63.29 8 46.4786 10 27.3773 8 21.7659 9 62.2423 12 65.7283 11 19.35 7 66.3997 8 44.1628 9 91.2753 8 86.3488 9 73.351 10 39.0737 10 55.3057 10 90.0769 11 57.4296 10 21.0794 7 84.5969 11 9.4308 7 55.9558 10 20.9037 7 43.5424 9]
Total: 1407.2905
Mean: 28.14581
Genome size: 78
Size: 79
Percent parens: 0.013
--- Population Statistics ---
Average total errors in population: 4007.673915800003
Median total errors in population: 1409.2905
Error averages by case: (156.39890790000123 9.373 147.67897740000058 8.582 151.6441070999983 11.072 135.81119899999828 8.47 181.2585395000012 10.272 102.52074299999848 8.534 97.3220161999992 10.358 133.55914869999842 11.774 125.33357350000108 10.854 92.3824510000006 7.681 137.0674100999991 8.627 117.01058650000108 8.618 218.57847710000112 9.443 214.23988610000248 10.343 128.348050599999 10.288 163.93885659999987 11.087 125.34421259999893 10.281 157.74430969999858 10.411 192.62656590000137 9.756 93.78499220000062 8.045 213.01687180000127 10.956 150.60728550000073 7.718 190.68661029999907 9.505 160.9246772999999 7.839 179.78546020000164 10.173)
Error minima by case: (10.4323 7 5.9766 6 10.4824 10 23.3187 7 0.0585 7 25.4022 7 21.7384 9 2.7505 9 24.2682 9 4.6455 6 0.3706 7 6.1409 6 8.2143 6 4.6908 9 16.6454 8 2.9499 9 6.8147 8 83.1005 8 57.3543 8 4.903 6 8.5733 8 9.4072 6 55.8805 8 20.8285 6 43.4671 8)
Average genome size in population (length): 78.912
Average program size in population (points): 79.912
Average percent parens in population: 0.013
Minimum age in population: 90.35849373830561
Maximum age in population: 94.82018579559087
Average age in population: 92.69068065582054
Median age in population: 92.72301226063539
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 47
Genome diversity (% unique Plush genomes):	 0.822
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 47
Syntactic diversity (% unique Push programs):	 0.822
Total error diversity:				 0.266
Error (vector) diversity:			 0.312
Behavioral diversity:				 0.313
--- Run Statistics ---
Number of program evaluations used so far: 67000
Number of point (instruction) evaluations so far: 156729106
--- Timings ---
Current time: 1529615433954 milliseconds
Total Time:         280.6 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:        93.4 seconds, 33.3%
Fitness Testing:    147.8 seconds, 52.7%
Report:              39.3 seconds, 14.0%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 66
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 67
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 67
;;******************************
;; -*- Number IO problem report - generation 67
Test total error for best: 60054.23050000004
Test mean error for best: 30.02712
;;------------------------------
Outputs of best individual on training cases:
Correct output: -57.4559422311 | Program output: -74.023616    
Correct output: -71.0754923621 | Program output: -65.023616    
Correct output: -66.5176295557 | Program output: -77.023616    
Correct output: 149.3187378    | Program output: 86.028726     
Correct output: -36.5450493525 | Program output: -83.023616    
Correct output: 75.4021928097  | Program output: 48.024906     
Correct output: 52.2615929867  | Program output: 74.027526     
Correct output: -19.2178367434 | Program output: 43.024416     
Correct output: 66.7518906772  | Program output: 1.023616      
Correct output: 7.673605441    | Program output: 27.023606     
Correct output: 23.6294031682  | Program output: 90.029106     
Correct output: -6.1389033433  | Program output: 38.023926     
Correct output: 9.2516366816   | Program output: -82.023626    
Correct output: 31.3251776267  | Program output: -55.023626    
Correct output: 73.3746496408  | Program output: 0.023606      
Correct output: 20.0500553336  | Program output: -19.023626    
Correct output: -23.2820697498 | Program output: 32.023626     
Correct output: 120.1004999359 | Program output: 30.023606     
Correct output: -155.453212395 | Program output: -98.023616    
Correct output: 31.10301576    | Program output: 10.023616     
Correct output: 45.5733057121  | Program output: -39.023606    
Correct output: -68.592783645  | Program output: -78.023606    
Correct output: -125.979392023 | Program output: -70.023626    
Correct output: -91.9273649148 | Program output: -71.023616    
Correct output: -92.5660607267 | Program output: -49.023626    
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_inc} {:instruction float_add} {:instruction float_yank} {:instruction integer_dup} {:instruction float_min} {:instruction integer_shove} {:instruction float_inc} {:instruction float_dup} {:instruction float_mult} {:instruction float_mult} {:instruction float_sub} {:instruction integer_dup_items} {:instruction float_yankdup} {:instruction float_rot} {:instruction float_dup_times} {:instruction float_rot} {:instruction print_integer} {:instruction float_min} {:instruction print_float} {:instruction integer_div} {:instruction 27} {:instruction float_sub} {:instruction float_yankdup} {:instruction integer_sub} {:instruction 9} {:instruction float_yankdup} {:instruction integer_stackdepth} {:instruction float_frominteger} {:instruction tag_float_196} {:instruction float_swap} {:instruction float_rot} {:instruction integer_add} {:instruction integer_stackdepth} {:instruction float_add} {:instruction in2} {:instruction float_mult} {:instruction integer_stackdepth} {:instruction float_frominteger} {:instruction tag_float_196} {:instruction float_swap} {:instruction float_rot} {:instruction integer_add} {:instruction integer_max} {:instruction float_max} {:instruction integer_stackdepth} {:instruction float_flush} {:instruction in2} {:instruction float_frominteger} {:instruction print_float} {:instruction integer_dup} {:instruction float_shove} {:instruction float_shove} {:instruction integer_inc} {:instruction float_mod} {:instruction integer_dup} {:instruction integer_dup_items} {:instruction print_integer} {:instruction integer_shove} {:instruction integer_yank} {:instruction print_integer} {:instruction integer_yank} {:instruction integer_max} {:instruction float_sin} {:instruction integer_stackdepth} {:instruction float_add} {:instruction in2} {:instruction float_mult} {:instruction integer_stackdepth} {:instruction float_frominteger} {:instruction integer_fromfloat} {:instruction integer_mod} {:instruction print_integer} {:instruction float_min} {:instruction integer_stackdepth} {:instruction tag_float_291} {:instruction 6} {:instruction float_swap} {:instruction print_integer})
Best program: (integer_inc float_add float_yank integer_dup float_min integer_shove float_inc float_dup float_mult float_mult float_sub integer_dup_items float_yankdup float_rot float_dup_times float_rot print_integer float_min print_float integer_div 27 float_sub float_yankdup integer_sub 9 float_yankdup integer_stackdepth float_frominteger tag_float_196 float_swap float_rot integer_add integer_stackdepth float_add in2 float_mult integer_stackdepth float_frominteger tag_float_196 float_swap float_rot integer_add integer_max float_max integer_stackdepth float_flush in2 float_frominteger print_float integer_dup float_shove float_shove integer_inc float_mod integer_dup integer_dup_items print_integer integer_shove integer_yank print_integer integer_yank integer_max float_sin integer_stackdepth float_add in2 float_mult integer_stackdepth float_frominteger integer_fromfloat integer_mod print_integer float_min integer_stackdepth tag_float_291 6 float_swap print_integer)
Errors: [16.5677 9 6.0519 8 10.506 11 63.29 8 46.4786 10 27.3773 8 21.7659 9 62.2423 12 65.7283 11 19.35 7 66.3997 8 44.1628 9 91.2753 8 86.3488 9 73.351 10 39.0737 10 55.3057 10 90.0769 11 57.4296 10 21.0794 7 84.5969 11 9.4308 7 55.9558 10 20.9037 7 43.5424 9]
Total: 1407.2905
Mean: 28.14581
Genome size: 78
Size: 79
Percent parens: 0.013
--- Population Statistics ---
Average total errors in population: 4125.1496520000055
Median total errors in population: 1409.2905
Error averages by case: (156.48016900000138 9.293 147.79111870000023 8.509 151.777448299998 11.074 143.71502829999903 8.518 182.19235760000106 10.328 110.2104924999983 8.569 106.3971167999991 10.229 142.93423089999914 11.807 133.65000280000086 10.839 103.6291196000007 7.622 145.78986259999965 8.669 126.6330146000012 8.842 220.40496140000084 9.256 216.17516820000293 10.266 141.08086259999874 10.288 161.39282269999947 11.024 135.99534379999878 10.308 165.50411089999795 10.613 192.22796030000148 9.953 104.24213680000082 7.903 213.63472890000142 10.865 150.53433280000084 7.75 191.43496959999894 9.747 160.65135809999975 7.903 180.399934200002 10.096)
Error minima by case: (16.5461 7 6.0185 6 10.4894 9 27.3187 7 37.5824 7 8.5978 7 21.7404 9 20.2633 9 24.2673 9 4.3264 6 11.6294 7 7.1793 6 3.2516 6 4.6868 7 16.6444 8 0.9499 8 24.3194 9 9.9098 9 57.3979 8 4.899 6 9.5613 8 9.4092 5 55.9243 8 20.8604 6 38.4339 8)
Average genome size in population (length): 78.902
Average program size in population (points): 79.902
Average percent parens in population: 0.013
Minimum age in population: 91.77538908953584
Maximum age in population: 95.80691601926671
Average age in population: 94.11734450117189
Median age in population: 94.16578672507843
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 33
Genome diversity (% unique Plush genomes):	 0.823
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 33
Syntactic diversity (% unique Push programs):	 0.823
Total error diversity:				 0.288
Error (vector) diversity:			 0.349
Behavioral diversity:				 0.349
--- Run Statistics ---
Number of program evaluations used so far: 68000
Number of point (instruction) evaluations so far: 158701981
--- Timings ---
Current time: 1529615437737 milliseconds
Total Time:         284.4 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:        94.7 seconds, 33.3%
Fitness Testing:    149.8 seconds, 52.7%
Report:              39.8 seconds, 14.0%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 67
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 68
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 68
;;******************************
;; -*- Number IO problem report - generation 68
Test total error for best: 60054.23050000004
Test mean error for best: 30.02712
;;------------------------------
Outputs of best individual on training cases:
Correct output: -57.4559422311 | Program output: -74.023616    
Correct output: -71.0754923621 | Program output: -65.023616    
Correct output: -66.5176295557 | Program output: -77.023616    
Correct output: 149.3187378    | Program output: 86.028726     
Correct output: -36.5450493525 | Program output: -83.023616    
Correct output: 75.4021928097  | Program output: 48.024906     
Correct output: 52.2615929867  | Program output: 74.027526     
Correct output: -19.2178367434 | Program output: 43.024416     
Correct output: 66.7518906772  | Program output: 1.023616      
Correct output: 7.673605441    | Program output: 27.023606     
Correct output: 23.6294031682  | Program output: 90.029106     
Correct output: -6.1389033433  | Program output: 38.023926     
Correct output: 9.2516366816   | Program output: -82.023626    
Correct output: 31.3251776267  | Program output: -55.023626    
Correct output: 73.3746496408  | Program output: 0.023606      
Correct output: 20.0500553336  | Program output: -19.023626    
Correct output: -23.2820697498 | Program output: 32.023626     
Correct output: 120.1004999359 | Program output: 30.023606     
Correct output: -155.453212395 | Program output: -98.023616    
Correct output: 31.10301576    | Program output: 10.023616     
Correct output: 45.5733057121  | Program output: -39.023606    
Correct output: -68.592783645  | Program output: -78.023606    
Correct output: -125.979392023 | Program output: -70.023626    
Correct output: -91.9273649148 | Program output: -71.023616    
Correct output: -92.5660607267 | Program output: -49.023626    
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_inc} {:instruction float_add} {:instruction float_yank} {:instruction integer_dup} {:instruction float_min} {:instruction integer_shove} {:instruction float_inc} {:instruction float_dup} {:instruction float_mult} {:instruction float_mult} {:instruction float_sub} {:instruction integer_dup_items} {:instruction float_yankdup} {:instruction float_rot} {:instruction float_dup_times} {:instruction float_rot} {:instruction print_integer} {:instruction float_min} {:instruction print_float} {:instruction integer_div} {:instruction 27} {:instruction float_sub} {:instruction float_yankdup} {:instruction integer_sub} {:instruction 9} {:instruction float_yankdup} {:instruction integer_stackdepth} {:instruction float_frominteger} {:instruction tag_float_196} {:instruction float_swap} {:instruction float_rot} {:instruction integer_add} {:instruction integer_stackdepth} {:instruction float_add} {:instruction in2} {:instruction float_mult} {:instruction integer_stackdepth} {:instruction float_frominteger} {:instruction tag_float_196} {:instruction float_swap} {:instruction float_rot} {:instruction integer_add} {:instruction integer_max} {:instruction float_max} {:instruction integer_stackdepth} {:instruction float_flush} {:instruction in2} {:instruction float_frominteger} {:instruction print_float} {:instruction integer_dup} {:instruction float_shove} {:instruction float_shove} {:instruction integer_inc} {:instruction float_mod} {:instruction integer_dup} {:instruction integer_dup_items} {:instruction print_integer} {:instruction integer_shove} {:instruction integer_yank} {:instruction print_integer} {:instruction integer_yank} {:instruction integer_max} {:instruction float_sin} {:instruction integer_stackdepth} {:instruction float_add} {:instruction in2} {:instruction float_mult} {:instruction integer_stackdepth} {:instruction float_frominteger} {:instruction integer_fromfloat} {:instruction integer_mod} {:instruction print_integer} {:instruction float_min} {:instruction integer_stackdepth} {:instruction tag_float_291} {:instruction 6} {:instruction float_swap} {:instruction print_integer})
Best program: (integer_inc float_add float_yank integer_dup float_min integer_shove float_inc float_dup float_mult float_mult float_sub integer_dup_items float_yankdup float_rot float_dup_times float_rot print_integer float_min print_float integer_div 27 float_sub float_yankdup integer_sub 9 float_yankdup integer_stackdepth float_frominteger tag_float_196 float_swap float_rot integer_add integer_stackdepth float_add in2 float_mult integer_stackdepth float_frominteger tag_float_196 float_swap float_rot integer_add integer_max float_max integer_stackdepth float_flush in2 float_frominteger print_float integer_dup float_shove float_shove integer_inc float_mod integer_dup integer_dup_items print_integer integer_shove integer_yank print_integer integer_yank integer_max float_sin integer_stackdepth float_add in2 float_mult integer_stackdepth float_frominteger integer_fromfloat integer_mod print_integer float_min integer_stackdepth tag_float_291 6 float_swap print_integer)
Errors: [16.5677 9 6.0519 8 10.506 11 63.29 8 46.4786 10 27.3773 8 21.7659 9 62.2423 12 65.7283 11 19.35 7 66.3997 8 44.1628 9 91.2753 8 86.3488 9 73.351 10 39.0737 10 55.3057 10 90.0769 11 57.4296 10 21.0794 7 84.5969 11 9.4308 7 55.9558 10 20.9037 7 43.5424 9]
Total: 1407.2905
Mean: 28.14581
Genome size: 78
Size: 79
Percent parens: 0.013
--- Population Statistics ---
Average total errors in population: 3903.151710700001
Median total errors in population: 1409.2905
Error averages by case: (151.47276050000102 9.197 142.76477090000134 8.391 146.4793554999979 11.058 131.63668479999805 8.494 176.52442010000115 10.322 98.11450329999863 8.502 92.90448519999919 9.937 129.85214519999852 11.845 122.5930807000009 10.845 90.27911660000052 7.46 133.55995079999872 8.587 113.07820140000108 9.067 214.06293420000088 8.827 210.03812290000295 9.985 130.45530369999872 10.26 152.54266749999871 10.743 123.4759479999988 10.259 155.56547539999858 10.823 187.49427710000137 10.183 91.78346480000083 7.604 208.10410260000182 10.828 145.55650360000095 7.671 185.85190539999866 9.98 155.61105719999932 7.777 174.87747330000204 9.828)
Error minima by case: (16.5501 7 6.0113 7 10.4925 9 43.3187 7 36.545 7 26.3962 7 21.7444 8 19.2178 9 24.2772 9 1.6736 6 0.3706 7 6.1389 6 8.2143 6 4.3092 9 16.6544 8 4.0501 9 23.2821 9 14.1005 9 57.389 8 4.097 6 9.5573 8 9.4132 6 55.9151 8 20.8632 6 43.5018 8)
Average genome size in population (length): 79.28
Average program size in population (points): 80.28
Average percent parens in population: 0.013
Minimum age in population: 92.77538908953584
Maximum age in population: 97.33419055903147
Average age in population: 95.45591069429877
Median age in population: 95.46127774174509
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 59
Genome diversity (% unique Plush genomes):	 0.805
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 59
Syntactic diversity (% unique Push programs):	 0.805
Total error diversity:				 0.266
Error (vector) diversity:			 0.326
Behavioral diversity:				 0.326
--- Run Statistics ---
Number of program evaluations used so far: 69000
Number of point (instruction) evaluations so far: 160684181
--- Timings ---
Current time: 1529615441433 milliseconds
Total Time:         288.1 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:        96.0 seconds, 33.3%
Fitness Testing:    151.7 seconds, 52.7%
Report:              40.3 seconds, 14.0%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 68
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 69
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 69
;;******************************
;; -*- Number IO problem report - generation 69
Test total error for best: 59998.23050000004
Test mean error for best: 29.99912
;;------------------------------
Outputs of best individual on training cases:
Correct output: -57.4559422311 | Program output: -74.023617    
Correct output: -71.0754923621 | Program output: -65.023617    
Correct output: -66.5176295557 | Program output: -77.023617    
Correct output: 149.3187378    | Program output: 86.028727     
Correct output: -36.5450493525 | Program output: -83.023617    
Correct output: 75.4021928097  | Program output: 48.024907     
Correct output: 52.2615929867  | Program output: 74.027527     
Correct output: -19.2178367434 | Program output: 43.024417     
Correct output: 66.7518906772  | Program output: 1.023617      
Correct output: 7.673605441    | Program output: 27.023607     
Correct output: 23.6294031682  | Program output: 90.029107     
Correct output: -6.1389033433  | Program output: 38.023927     
Correct output: 9.2516366816   | Program output: -82.023627    
Correct output: 31.3251776267  | Program output: -55.023627    
Correct output: 73.3746496408  | Program output: 0.023607      
Correct output: 20.0500553336  | Program output: -19.023627    
Correct output: -23.2820697498 | Program output: 32.023627     
Correct output: 120.1004999359 | Program output: 30.023607     
Correct output: -155.453212395 | Program output: -98.023617    
Correct output: 31.10301576    | Program output: 10.023617     
Correct output: 45.5733057121  | Program output: -39.023607    
Correct output: -68.592783645  | Program output: -78.023607    
Correct output: -125.979392023 | Program output: -70.023627    
Correct output: -91.9273649148 | Program output: -71.023617    
Correct output: -92.5660607267 | Program output: -49.023627    
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_inc} {:instruction float_add} {:instruction float_yank} {:instruction integer_dup} {:instruction float_min} {:instruction float_dup_times} {:instruction float_inc} {:instruction float_dup} {:instruction float_mult} {:instruction float_mult} {:instruction float_sub} {:instruction integer_dup_items} {:instruction float_yankdup} {:instruction float_rot} {:instruction float_dup_times} {:instruction float_rot} {:instruction print_integer} {:instruction float_min} {:instruction print_float} {:instruction integer_div} {:instruction 27} {:instruction float_sub} {:instruction float_yankdup} {:instruction integer_sub} {:instruction 9} {:instruction float_yankdup} {:instruction integer_stackdepth} {:instruction float_frominteger} {:instruction tag_float_196} {:instruction float_swap} {:instruction float_rot} {:instruction integer_add} {:instruction integer_stackdepth} {:instruction float_add} {:instruction in2} {:instruction float_mult} {:instruction integer_stackdepth} {:instruction float_frominteger} {:instruction tag_float_196} {:instruction float_swap} {:instruction float_rot} {:instruction integer_add} {:instruction integer_max} {:instruction float_max} {:instruction integer_stackdepth} {:instruction float_flush} {:instruction in2} {:instruction float_frominteger} {:instruction print_float} {:instruction integer_dup} {:instruction float_shove} {:instruction float_shove} {:instruction integer_inc} {:instruction float_mod} {:instruction integer_dup} {:instruction integer_dup_items} {:instruction print_integer} {:instruction integer_shove} {:instruction integer_yank} {:instruction print_integer} {:instruction integer_yank} {:instruction integer_max} {:instruction integer_max} {:instruction integer_fromfloat} {:instruction integer_stackdepth} {:instruction float_add} {:instruction in2} {:instruction float_mult} {:instruction integer_yank} {:instruction integer_max} {:instruction float_sin} {:instruction integer_stackdepth} {:instruction float_add} {:instruction in2} {:instruction float_mult} {:instruction integer_stackdepth} {:instruction float_frominteger} {:instruction integer_fromfloat} {:instruction integer_mod} {:instruction print_integer} {:instruction float_min} {:instruction integer_stackdepth} {:instruction tag_float_291} {:instruction 6} {:instruction tag_float_291} {:instruction integer_inc} {:instruction float_swap} {:instruction print_integer})
Best program: (integer_inc float_add float_yank integer_dup float_min float_dup_times float_inc float_dup float_mult float_mult float_sub integer_dup_items float_yankdup float_rot float_dup_times float_rot print_integer float_min print_float integer_div 27 float_sub float_yankdup integer_sub 9 float_yankdup integer_stackdepth float_frominteger tag_float_196 float_swap float_rot integer_add integer_stackdepth float_add in2 float_mult integer_stackdepth float_frominteger tag_float_196 float_swap float_rot integer_add integer_max float_max integer_stackdepth float_flush in2 float_frominteger print_float integer_dup float_shove float_shove integer_inc float_mod integer_dup integer_dup_items print_integer integer_shove integer_yank print_integer integer_yank integer_max integer_max integer_fromfloat integer_stackdepth float_add in2 float_mult integer_yank integer_max float_sin integer_stackdepth float_add in2 float_mult integer_stackdepth float_frominteger integer_fromfloat integer_mod print_integer float_min integer_stackdepth tag_float_291 6 tag_float_291 integer_inc float_swap print_integer)
Errors: [16.5677 9 6.0519 8 10.506 10 63.29 7 46.4786 10 27.3773 7 21.7659 9 62.2423 12 65.7283 10 19.35 7 66.3997 9 44.1628 9 91.2753 9 86.3488 9 73.351 10 39.0737 11 55.3057 9 90.0769 11 57.4296 10 21.0794 7 84.5969 10 9.4308 7 55.9558 10 20.9037 7 43.5424 9]
Total: 1404.2905
Mean: 28.08581
Genome size: 88
Size: 89
Percent parens: 0.011
--- Population Statistics ---
Average total errors in population: 3838.735762699999
Median total errors in population: 1408.2905
Error averages by case: (151.48159770000066 9.379 142.84980760000116 8.506 146.53753579999807 11.042 125.9417407999982 8.426 176.43078460000118 10.313 92.42732559999892 8.499 87.38268409999938 9.626 124.39579949999903 11.803 119.2280557000009 10.818 83.64005080000013 7.612 128.13817759999878 8.542 107.53729780000087 9.165 213.67152260000108 8.577 209.67196350000285 9.638 127.18455799999904 10.201 155.16250589999905 10.384 117.11816059999875 10.217 148.87606179999898 10.929 187.8131527000014 10.321 85.1332078000008 7.226 208.39045160000148 11.011 145.6341750000011 7.64 186.04581699999878 10.164 155.78979519999874 7.771 174.963533400002 9.48)
Error minima by case: (16.5461 7 5.9839 7 10.4844 9 36.7049 7 37.551 8 15.6238 6 21.7404 8 20.2238 6 1.0 4 1.3547 6 14.6011 7 7.1389 6 0.2234 6 4.6908 7 0.0 3 4.0501 7 24.2821 6 9.9231 6 57.3616 7 4.903 5 9.5359 7 9.4092 6 55.8868 7 20.8358 6 43.4735 7)
Average genome size in population (length): 78.942
Average program size in population (points): 79.942
Average percent parens in population: 0.013
Minimum age in population: 94.60175915862332
Maximum age in population: 98.83942770923385
Average age in population: 96.84110393793172
Median age in population: 96.90822216150008
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 63
Genome diversity (% unique Plush genomes):	 0.79
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 63
Syntactic diversity (% unique Push programs):	 0.79
Total error diversity:				 0.242
Error (vector) diversity:			 0.278
Behavioral diversity:				 0.278
--- Run Statistics ---
Number of program evaluations used so far: 70000
Number of point (instruction) evaluations so far: 162657981
--- Timings ---
Current time: 1529615445492 milliseconds
Total Time:         292.0 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:        97.3 seconds, 33.3%
Fitness Testing:    153.8 seconds, 52.7%
Report:              40.8 seconds, 14.0%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 69
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 70
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 70
;;******************************
;; -*- Number IO problem report - generation 70
Test total error for best: 59998.23050000004
Test mean error for best: 29.99912
;;------------------------------
Outputs of best individual on training cases:
Correct output: -57.4559422311 | Program output: -74.023617    
Correct output: -71.0754923621 | Program output: -65.023617    
Correct output: -66.5176295557 | Program output: -77.023617    
Correct output: 149.3187378    | Program output: 86.028727     
Correct output: -36.5450493525 | Program output: -83.023617    
Correct output: 75.4021928097  | Program output: 48.024907     
Correct output: 52.2615929867  | Program output: 74.027527     
Correct output: -19.2178367434 | Program output: 43.024417     
Correct output: 66.7518906772  | Program output: 1.023617      
Correct output: 7.673605441    | Program output: 27.023607     
Correct output: 23.6294031682  | Program output: 90.029107     
Correct output: -6.1389033433  | Program output: 38.023927     
Correct output: 9.2516366816   | Program output: -82.023627    
Correct output: 31.3251776267  | Program output: -55.023627    
Correct output: 73.3746496408  | Program output: 0.023607      
Correct output: 20.0500553336  | Program output: -19.023627    
Correct output: -23.2820697498 | Program output: 32.023627     
Correct output: 120.1004999359 | Program output: 30.023607     
Correct output: -155.453212395 | Program output: -98.023617    
Correct output: 31.10301576    | Program output: 10.023617     
Correct output: 45.5733057121  | Program output: -39.023607    
Correct output: -68.592783645  | Program output: -78.023607    
Correct output: -125.979392023 | Program output: -70.023627    
Correct output: -91.9273649148 | Program output: -71.023617    
Correct output: -92.5660607267 | Program output: -49.023627    
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_inc} {:instruction float_add} {:instruction float_yank} {:instruction integer_dup} {:instruction float_min} {:instruction float_dup_times} {:instruction float_inc} {:instruction float_dup} {:instruction float_mult} {:instruction float_mult} {:instruction float_sub} {:instruction integer_dup_items} {:instruction float_yankdup} {:instruction float_rot} {:instruction float_dup_times} {:instruction float_rot} {:instruction print_integer} {:instruction float_min} {:instruction print_float} {:instruction integer_div} {:instruction 27} {:instruction float_sub} {:instruction float_yankdup} {:instruction integer_sub} {:instruction 9} {:instruction float_yankdup} {:instruction integer_stackdepth} {:instruction float_frominteger} {:instruction tag_float_196} {:instruction float_swap} {:instruction float_rot} {:instruction integer_add} {:instruction integer_stackdepth} {:instruction float_add} {:instruction in2} {:instruction float_mult} {:instruction integer_stackdepth} {:instruction float_frominteger} {:instruction tag_float_196} {:instruction float_swap} {:instruction float_rot} {:instruction integer_add} {:instruction integer_max} {:instruction float_max} {:instruction integer_stackdepth} {:instruction float_flush} {:instruction in2} {:instruction float_frominteger} {:instruction print_float} {:instruction integer_dup} {:instruction float_shove} {:instruction float_shove} {:instruction integer_inc} {:instruction float_mod} {:instruction integer_dup} {:instruction integer_dup_items} {:instruction print_integer} {:instruction integer_shove} {:instruction integer_yank} {:instruction print_integer} {:instruction integer_yank} {:instruction integer_max} {:instruction integer_max} {:instruction integer_fromfloat} {:instruction integer_stackdepth} {:instruction float_add} {:instruction in2} {:instruction float_mult} {:instruction integer_yank} {:instruction integer_max} {:instruction float_sin} {:instruction integer_stackdepth} {:instruction float_add} {:instruction in2} {:instruction float_mult} {:instruction integer_stackdepth} {:instruction float_frominteger} {:instruction integer_fromfloat} {:instruction integer_mod} {:instruction print_integer} {:instruction float_min} {:instruction integer_stackdepth} {:instruction tag_float_291} {:instruction 6} {:instruction tag_float_291} {:instruction integer_inc} {:instruction float_swap} {:instruction print_integer})
Best program: (integer_inc float_add float_yank integer_dup float_min float_dup_times float_inc float_dup float_mult float_mult float_sub integer_dup_items float_yankdup float_rot float_dup_times float_rot print_integer float_min print_float integer_div 27 float_sub float_yankdup integer_sub 9 float_yankdup integer_stackdepth float_frominteger tag_float_196 float_swap float_rot integer_add integer_stackdepth float_add in2 float_mult integer_stackdepth float_frominteger tag_float_196 float_swap float_rot integer_add integer_max float_max integer_stackdepth float_flush in2 float_frominteger print_float integer_dup float_shove float_shove integer_inc float_mod integer_dup integer_dup_items print_integer integer_shove integer_yank print_integer integer_yank integer_max integer_max integer_fromfloat integer_stackdepth float_add in2 float_mult integer_yank integer_max float_sin integer_stackdepth float_add in2 float_mult integer_stackdepth float_frominteger integer_fromfloat integer_mod print_integer float_min integer_stackdepth tag_float_291 6 tag_float_291 integer_inc float_swap print_integer)
Errors: [16.5677 9 6.0519 8 10.506 10 63.29 7 46.4786 10 27.3773 7 21.7659 9 62.2423 12 65.7283 10 19.35 7 66.3997 9 44.1628 9 91.2753 9 86.3488 9 73.351 10 39.0737 11 55.3057 9 90.0769 11 57.4296 10 21.0794 7 84.5969 10 9.4308 7 55.9558 10 20.9037 7 43.5424 9]
Total: 1404.2905
Mean: 28.08581
Genome size: 88
Size: 89
Percent parens: 0.011
--- Population Statistics ---
Average total errors in population: 3901.5607692000012
Median total errors in population: 1407.2905
Error averages by case: (143.6657477000004 9.503 134.95547430000136 8.646 138.6871797999983 11.079 137.92566549999856 8.536 168.91410210000117 10.381 104.73031489999862 8.54 99.61423599999927 9.575 136.2796488999995 11.837 134.08063600000082 10.845 96.10005530000052 7.793 139.90462709999912 8.622 118.68247400000101 9.26 206.5395471000009 8.668 202.3942042000027 9.606 140.1068855999987 10.263 159.03485639999937 10.343 129.02002699999892 10.257 160.70804539999867 10.995 180.26777300000137 10.41 98.54045860000066 7.194 201.00482100000144 11.149 137.74299960000081 7.675 178.5166651999987 10.244 147.98822939999857 7.918 167.3850951000016 9.432)
Error minima by case: (16.5441 8 6.0155 7 10.4824 9 36.7035 7 37.555 8 22.5193 7 0.6213 8 20.2278 7 1.0 5 1.6736 6 2.3706 7 7.1389 6 3.2516 6 4.6908 8 0.0 5 4.0501 8 24.2821 7 9.9218 7 57.3932 9 4.903 6 9.5359 9 9.4072 6 55.9194 9 20.8674 6 43.5061 8)
Average genome size in population (length): 79.073
Average program size in population (points): 80.073
Average percent parens in population: 0.013
Minimum age in population: 95.77093905387186
Maximum age in population: 100.0711455732717
Average age in population: 98.16726059953348
Median age in population: 98.19405954234541
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 57
Genome diversity (% unique Plush genomes):	 0.807
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 57
Syntactic diversity (% unique Push programs):	 0.807
Total error diversity:				 0.244
Error (vector) diversity:			 0.271
Behavioral diversity:				 0.271
--- Run Statistics ---
Number of program evaluations used so far: 71000
Number of point (instruction) evaluations so far: 164635056
--- Timings ---
Current time: 1529615449221 milliseconds
Total Time:         295.9 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:        98.6 seconds, 33.3%
Fitness Testing:    155.7 seconds, 52.6%
Report:              41.4 seconds, 14.0%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 70
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 71
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 71
;;******************************
;; -*- Number IO problem report - generation 71
Test total error for best: 59998.23050000004
Test mean error for best: 29.99912
;;------------------------------
Outputs of best individual on training cases:
Correct output: -57.4559422311 | Program output: -74.023617    
Correct output: -71.0754923621 | Program output: -65.023617    
Correct output: -66.5176295557 | Program output: -77.023617    
Correct output: 149.3187378    | Program output: 86.028727     
Correct output: -36.5450493525 | Program output: -83.023617    
Correct output: 75.4021928097  | Program output: 48.024907     
Correct output: 52.2615929867  | Program output: 74.027527     
Correct output: -19.2178367434 | Program output: 43.024417     
Correct output: 66.7518906772  | Program output: 1.023617      
Correct output: 7.673605441    | Program output: 27.023607     
Correct output: 23.6294031682  | Program output: 90.029107     
Correct output: -6.1389033433  | Program output: 38.023927     
Correct output: 9.2516366816   | Program output: -82.023627    
Correct output: 31.3251776267  | Program output: -55.023627    
Correct output: 73.3746496408  | Program output: 0.023607      
Correct output: 20.0500553336  | Program output: -19.023627    
Correct output: -23.2820697498 | Program output: 32.023627     
Correct output: 120.1004999359 | Program output: 30.023607     
Correct output: -155.453212395 | Program output: -98.023617    
Correct output: 31.10301576    | Program output: 10.023617     
Correct output: 45.5733057121  | Program output: -39.023607    
Correct output: -68.592783645  | Program output: -78.023607    
Correct output: -125.979392023 | Program output: -70.023627    
Correct output: -91.9273649148 | Program output: -71.023617    
Correct output: -92.5660607267 | Program output: -49.023627    
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_inc} {:instruction float_add} {:instruction integer_inc} {:instruction float_add} {:instruction float_yank} {:instruction integer_dup} {:instruction float_min} {:instruction float_dup_times} {:instruction float_inc} {:instruction float_dup} {:instruction float_mult} {:instruction float_mult} {:instruction float_sub} {:instruction integer_dup_items} {:instruction float_yankdup} {:instruction float_rot} {:instruction float_dup_times} {:instruction float_rot} {:instruction print_integer} {:instruction float_min} {:instruction print_float} {:instruction integer_div} {:instruction 27} {:instruction float_sub} {:instruction float_yankdup} {:instruction integer_sub} {:instruction 9} {:instruction float_yankdup} {:instruction integer_stackdepth} {:instruction float_frominteger} {:instruction tag_float_196} {:instruction float_swap} {:instruction float_rot} {:instruction integer_add} {:instruction integer_stackdepth} {:instruction float_add} {:instruction in2} {:instruction float_mult} {:instruction integer_stackdepth} {:instruction float_frominteger} {:instruction tag_float_196} {:instruction float_swap} {:instruction float_rot} {:instruction integer_add} {:instruction integer_max} {:instruction float_max} {:instruction integer_stackdepth} {:instruction float_flush} {:instruction in2} {:instruction float_frominteger} {:instruction print_float} {:instruction integer_dup} {:instruction float_shove} {:instruction float_shove} {:instruction integer_inc} {:instruction float_mod} {:instruction integer_dup} {:instruction integer_dup_items} {:instruction print_integer} {:instruction integer_shove} {:instruction integer_yank} {:instruction print_integer} {:instruction integer_yank} {:instruction integer_max} {:instruction integer_max} {:instruction integer_fromfloat} {:instruction integer_stackdepth} {:instruction float_add} {:instruction in2} {:instruction float_mult} {:instruction integer_yank} {:instruction integer_max} {:instruction float_sin} {:instruction integer_stackdepth} {:instruction float_add} {:instruction in2} {:instruction float_mult} {:instruction integer_stackdepth} {:instruction float_frominteger} {:instruction integer_fromfloat} {:instruction integer_mod} {:instruction print_integer} {:instruction float_min} {:instruction integer_stackdepth} {:instruction tag_float_291} {:instruction 6} {:instruction tag_float_291} {:instruction integer_inc} {:instruction float_swap} {:instruction print_integer})
Best program: (integer_inc float_add integer_inc float_add float_yank integer_dup float_min float_dup_times float_inc float_dup float_mult float_mult float_sub integer_dup_items float_yankdup float_rot float_dup_times float_rot print_integer float_min print_float integer_div 27 float_sub float_yankdup integer_sub 9 float_yankdup integer_stackdepth float_frominteger tag_float_196 float_swap float_rot integer_add integer_stackdepth float_add in2 float_mult integer_stackdepth float_frominteger tag_float_196 float_swap float_rot integer_add integer_max float_max integer_stackdepth float_flush in2 float_frominteger print_float integer_dup float_shove float_shove integer_inc float_mod integer_dup integer_dup_items print_integer integer_shove integer_yank print_integer integer_yank integer_max integer_max integer_fromfloat integer_stackdepth float_add in2 float_mult integer_yank integer_max float_sin integer_stackdepth float_add in2 float_mult integer_stackdepth float_frominteger integer_fromfloat integer_mod print_integer float_min integer_stackdepth tag_float_291 6 tag_float_291 integer_inc float_swap print_integer)
Errors: [16.5677 9 6.0519 8 10.506 10 63.29 7 46.4786 10 27.3773 7 21.7659 9 62.2423 12 65.7283 10 19.35 7 66.3997 9 44.1628 9 91.2753 9 86.3488 9 73.351 10 39.0737 11 55.3057 9 90.0769 11 57.4296 10 21.0794 7 84.5969 10 9.4308 7 55.9558 10 20.9037 7 43.5424 9]
Total: 1404.2905
Mean: 28.08581
Genome size: 90
Size: 91
Percent parens: 0.011
--- Population Statistics ---
Average total errors in population: 3871.472037200003
Median total errors in population: 1407.2905
Error averages by case: (145.48244230000046 9.483 136.8119786000012 8.615 140.53983419999832 11.043 135.1309433999983 8.536 170.71086880000107 10.332 101.80438219999834 8.553 96.52712459999925 9.55 133.35149239999936 11.8 126.127722200001 10.829 92.95264070000077 7.751 136.70646689999901 8.582 116.63675570000112 9.195 208.2655187000015 8.624 204.12713730000266 9.555 133.18651429999886 10.254 153.08377399999952 10.307 126.09540129999874 10.227 157.94067639999844 10.98 181.9716049000014 10.373 94.42303190000071 7.162 202.82682040000148 11.11 139.54686220000087 7.649 180.26136509999873 10.199 149.80202239999858 7.853 169.20565630000195 9.391)
Error minima by case: (16.5441 8 6.0097 7 10.4825 9 36.7025 7 37.5687 8 25.3695 7 15.1034 8 20.2423 10 24.2708 9 1.6736 6 2.3706 7 7.1628 7 0.2189 6 4.6908 7 16.6481 8 4.0501 8 24.3057 9 9.9231 9 57.3881 9 4.903 6 9.5573 9 9.4072 6 55.9141 9 20.8614 6 43.5005 8)
Average genome size in population (length): 79.258
Average program size in population (points): 80.258
Average percent parens in population: 0.013
Minimum age in population: 96.77093905387186
Maximum age in population: 101.8738907389513
Average age in population: 99.53422764718735
Median age in population: 99.55702150691798
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 39
Genome diversity (% unique Plush genomes):	 0.839
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 39
Syntactic diversity (% unique Push programs):	 0.839
Total error diversity:				 0.226
Error (vector) diversity:			 0.259
Behavioral diversity:				 0.259
--- Run Statistics ---
Number of program evaluations used so far: 72000
Number of point (instruction) evaluations so far: 166616881
--- Timings ---
Current time: 1529615453408 milliseconds
Total Time:         299.9 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       100.1 seconds, 33.4%
Fitness Testing:    157.7 seconds, 52.6%
Report:              41.9 seconds, 14.0%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 71
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 72
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 72
;;******************************
;; -*- Number IO problem report - generation 72
Test total error for best: 59998.23050000004
Test mean error for best: 29.99912
;;------------------------------
Outputs of best individual on training cases:
Correct output: -57.4559422311 | Program output: -74.023617    
Correct output: -71.0754923621 | Program output: -65.023617    
Correct output: -66.5176295557 | Program output: -77.023617    
Correct output: 149.3187378    | Program output: 86.028727     
Correct output: -36.5450493525 | Program output: -83.023617    
Correct output: 75.4021928097  | Program output: 48.024907     
Correct output: 52.2615929867  | Program output: 74.027527     
Correct output: -19.2178367434 | Program output: 43.024417     
Correct output: 66.7518906772  | Program output: 1.023617      
Correct output: 7.673605441    | Program output: 27.023607     
Correct output: 23.6294031682  | Program output: 90.029107     
Correct output: -6.1389033433  | Program output: 38.023927     
Correct output: 9.2516366816   | Program output: -82.023627    
Correct output: 31.3251776267  | Program output: -55.023627    
Correct output: 73.3746496408  | Program output: 0.023607      
Correct output: 20.0500553336  | Program output: -19.023627    
Correct output: -23.2820697498 | Program output: 32.023627     
Correct output: 120.1004999359 | Program output: 30.023607     
Correct output: -155.453212395 | Program output: -98.023617    
Correct output: 31.10301576    | Program output: 10.023617     
Correct output: 45.5733057121  | Program output: -39.023607    
Correct output: -68.592783645  | Program output: -78.023607    
Correct output: -125.979392023 | Program output: -70.023627    
Correct output: -91.9273649148 | Program output: -71.023617    
Correct output: -92.5660607267 | Program output: -49.023627    
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_inc} {:instruction float_add} {:instruction float_yank} {:instruction integer_dup} {:instruction float_min} {:instruction float_dup_times} {:instruction float_inc} {:instruction float_dup} {:instruction float_mult} {:instruction float_mult} {:instruction float_sub} {:instruction integer_dup_items} {:instruction float_yankdup} {:instruction float_rot} {:instruction float_dup_times} {:instruction float_rot} {:instruction print_integer} {:instruction float_min} {:instruction print_float} {:instruction integer_div} {:instruction 27} {:instruction float_div} {:instruction float_yankdup} {:instruction integer_sub} {:instruction 9} {:instruction float_yankdup} {:instruction integer_stackdepth} {:instruction float_frominteger} {:instruction tag_float_196} {:instruction float_swap} {:instruction float_rot} {:instruction integer_add} {:instruction integer_stackdepth} {:instruction float_add} {:instruction in2} {:instruction float_mult} {:instruction integer_stackdepth} {:instruction float_frominteger} {:instruction tag_float_196} {:instruction float_swap} {:instruction float_rot} {:instruction integer_add} {:instruction integer_max} {:instruction float_max} {:instruction integer_stackdepth} {:instruction float_flush} {:instruction in2} {:instruction float_frominteger} {:instruction print_float} {:instruction integer_dup} {:instruction float_shove} {:instruction float_shove} {:instruction integer_inc} {:instruction float_mod} {:instruction integer_dup} {:instruction integer_dup_items} {:instruction print_integer} {:instruction integer_shove} {:instruction integer_yank} {:instruction print_integer} {:instruction integer_yank} {:instruction integer_max} {:instruction integer_max} {:instruction integer_fromfloat} {:instruction integer_stackdepth} {:instruction float_add} {:instruction in2} {:instruction float_mult} {:instruction integer_yank} {:instruction integer_max} {:instruction float_sin} {:instruction integer_stackdepth} {:instruction float_add} {:instruction in2} {:instruction float_mult} {:instruction integer_stackdepth} {:instruction float_frominteger} {:instruction integer_fromfloat} {:instruction integer_mod} {:instruction print_integer} {:instruction float_min} {:instruction integer_stackdepth} {:instruction tag_float_291} {:instruction 6} {:instruction tag_float_291} {:instruction integer_inc} {:instruction float_swap} {:instruction print_integer})
Best program: (integer_inc float_add float_yank integer_dup float_min float_dup_times float_inc float_dup float_mult float_mult float_sub integer_dup_items float_yankdup float_rot float_dup_times float_rot print_integer float_min print_float integer_div 27 float_div float_yankdup integer_sub 9 float_yankdup integer_stackdepth float_frominteger tag_float_196 float_swap float_rot integer_add integer_stackdepth float_add in2 float_mult integer_stackdepth float_frominteger tag_float_196 float_swap float_rot integer_add integer_max float_max integer_stackdepth float_flush in2 float_frominteger print_float integer_dup float_shove float_shove integer_inc float_mod integer_dup integer_dup_items print_integer integer_shove integer_yank print_integer integer_yank integer_max integer_max integer_fromfloat integer_stackdepth float_add in2 float_mult integer_yank integer_max float_sin integer_stackdepth float_add in2 float_mult integer_stackdepth float_frominteger integer_fromfloat integer_mod print_integer float_min integer_stackdepth tag_float_291 6 tag_float_291 integer_inc float_swap print_integer)
Errors: [16.5677 9 6.0519 8 10.506 10 63.29 7 46.4786 10 27.3773 7 21.7659 9 62.2423 12 65.7283 10 19.35 7 66.3997 9 44.1628 9 91.2753 9 86.3488 9 73.351 10 39.0737 11 55.3057 9 90.0769 11 57.4296 10 21.0794 7 84.5969 10 9.4308 7 55.9558 10 20.9037 7 43.5424 9]
Total: 1404.2905
Mean: 28.08581
Genome size: 88
Size: 89
Percent parens: 0.011
--- Population Statistics ---
Average total errors in population: 3742.726678900001
Median total errors in population: 1407.2905500000002
Error averages by case: (140.37447200000025 9.421 131.52551010000178 8.572 135.3071577999982 11.011 131.00566169999794 8.485 165.9258204000011 10.287 95.52779279999838 8.497 92.46127259999936 9.562 129.57418529999916 11.808 119.33427060000093 10.807 87.88299560000071 7.726 131.2604961999985 8.585 112.89831530000117 9.201 204.0906324000009 8.624 199.83670270000277 9.56 123.56002659999886 10.241 146.57160939999866 10.331 122.37421879999864 10.169 152.54558329999867 10.942 176.87002460000147 10.338 90.3555423000008 7.177 197.54325710000154 11.104 134.2572163000011 7.594 175.32645589999882 10.191 144.5988155999985 7.861 164.231643500002 9.393)
Error minima by case: (16.5441 8 6.0195 7 10.4824 9 61.2288 7 36.5824 8 9.0401 7 14.1005 8 19.2633 10 0.3898 9 1.6736 6 2.3706 7 6.1793 7 3.2516 6 4.6908 8 7.0126 9 4.0501 8 23.3194 8 53.7384 9 57.3984 9 4.903 6 8.5349 9 9.4072 6 55.9245 9 20.8614 6 43.5101 8)
Average genome size in population (length): 79.512
Average program size in population (points): 80.512
Average percent parens in population: 0.012
Minimum age in population: 98.7062275177906
Maximum age in population: 103.0753098359611
Average age in population: 100.9190725513571
Median age in population: 101.0063265897954
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 23
Genome diversity (% unique Plush genomes):	 0.873
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 23
Syntactic diversity (% unique Push programs):	 0.873
Total error diversity:				 0.234
Error (vector) diversity:			 0.265
Behavioral diversity:				 0.266
--- Run Statistics ---
Number of program evaluations used so far: 73000
Number of point (instruction) evaluations so far: 168605081
--- Timings ---
Current time: 1529615457673 milliseconds
Total Time:         304.3 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       101.5 seconds, 33.4%
Fitness Testing:    160.1 seconds, 52.6%
Report:              42.6 seconds, 14.0%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 72
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 73
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 73
;;******************************
;; -*- Number IO problem report - generation 73
Test total error for best: 59998.23050000004
Test mean error for best: 29.99912
;;------------------------------
Outputs of best individual on training cases:
Correct output: -57.4559422311 | Program output: -74.023617    
Correct output: -71.0754923621 | Program output: -65.023617    
Correct output: -66.5176295557 | Program output: -77.023617    
Correct output: 149.3187378    | Program output: 86.028727     
Correct output: -36.5450493525 | Program output: -83.023617    
Correct output: 75.4021928097  | Program output: 48.024907     
Correct output: 52.2615929867  | Program output: 74.027527     
Correct output: -19.2178367434 | Program output: 43.024417     
Correct output: 66.7518906772  | Program output: 1.023617      
Correct output: 7.673605441    | Program output: 27.023607     
Correct output: 23.6294031682  | Program output: 90.029107     
Correct output: -6.1389033433  | Program output: 38.023927     
Correct output: 9.2516366816   | Program output: -82.023627    
Correct output: 31.3251776267  | Program output: -55.023627    
Correct output: 73.3746496408  | Program output: 0.023607      
Correct output: 20.0500553336  | Program output: -19.023627    
Correct output: -23.2820697498 | Program output: 32.023627     
Correct output: 120.1004999359 | Program output: 30.023607     
Correct output: -155.453212395 | Program output: -98.023617    
Correct output: 31.10301576    | Program output: 10.023617     
Correct output: 45.5733057121  | Program output: -39.023607    
Correct output: -68.592783645  | Program output: -78.023607    
Correct output: -125.979392023 | Program output: -70.023627    
Correct output: -91.9273649148 | Program output: -71.023617    
Correct output: -92.5660607267 | Program output: -49.023627    
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_inc} {:instruction float_add} {:instruction integer_inc} {:instruction float_add} {:instruction float_yank} {:instruction integer_dup} {:instruction float_min} {:instruction float_dup_times} {:instruction float_inc} {:instruction float_dup} {:instruction float_mult} {:instruction float_mult} {:instruction float_sub} {:instruction integer_dup_items} {:instruction float_yankdup} {:instruction float_rot} {:instruction float_dup_times} {:instruction float_rot} {:instruction print_integer} {:instruction float_min} {:instruction print_float} {:instruction integer_div} {:instruction 27} {:instruction float_sub} {:instruction float_yankdup} {:instruction integer_sub} {:instruction 9} {:instruction float_yankdup} {:instruction integer_stackdepth} {:instruction float_frominteger} {:instruction tag_float_196} {:instruction float_swap} {:instruction float_rot} {:instruction integer_add} {:instruction integer_stackdepth} {:instruction float_add} {:instruction in2} {:instruction float_mult} {:instruction integer_stackdepth} {:instruction float_frominteger} {:instruction tag_float_196} {:instruction float_swap} {:instruction float_rot} {:instruction integer_add} {:instruction integer_max} {:instruction float_max} {:instruction integer_stackdepth} {:instruction float_flush} {:instruction in2} {:instruction float_frominteger} {:instruction print_float} {:instruction integer_dup} {:instruction float_shove} {:instruction float_shove} {:instruction integer_inc} {:instruction float_mod} {:instruction integer_dup} {:instruction integer_dup_items} {:instruction print_integer} {:instruction integer_shove} {:instruction integer_yank} {:instruction print_integer} {:instruction integer_yank} {:instruction integer_max} {:instruction integer_max} {:instruction integer_fromfloat} {:instruction integer_stackdepth} {:instruction float_add} {:instruction in2} {:instruction float_mult} {:instruction integer_yank} {:instruction integer_max} {:instruction float_sin} {:instruction integer_stackdepth} {:instruction float_add} {:instruction in2} {:instruction float_mult} {:instruction integer_stackdepth} {:instruction float_frominteger} {:instruction integer_fromfloat} {:instruction integer_mod} {:instruction print_integer} {:instruction float_min} {:instruction integer_stackdepth} {:instruction tag_float_291} {:instruction 6} {:instruction tag_float_291} {:instruction integer_inc} {:instruction float_swap} {:instruction print_integer})
Best program: (integer_inc float_add integer_inc float_add float_yank integer_dup float_min float_dup_times float_inc float_dup float_mult float_mult float_sub integer_dup_items float_yankdup float_rot float_dup_times float_rot print_integer float_min print_float integer_div 27 float_sub float_yankdup integer_sub 9 float_yankdup integer_stackdepth float_frominteger tag_float_196 float_swap float_rot integer_add integer_stackdepth float_add in2 float_mult integer_stackdepth float_frominteger tag_float_196 float_swap float_rot integer_add integer_max float_max integer_stackdepth float_flush in2 float_frominteger print_float integer_dup float_shove float_shove integer_inc float_mod integer_dup integer_dup_items print_integer integer_shove integer_yank print_integer integer_yank integer_max integer_max integer_fromfloat integer_stackdepth float_add in2 float_mult integer_yank integer_max float_sin integer_stackdepth float_add in2 float_mult integer_stackdepth float_frominteger integer_fromfloat integer_mod print_integer float_min integer_stackdepth tag_float_291 6 tag_float_291 integer_inc float_swap print_integer)
Errors: [16.5677 9 6.0519 8 10.506 10 63.29 7 46.4786 10 27.3773 7 21.7659 9 62.2423 12 65.7283 10 19.35 7 66.3997 9 44.1628 9 91.2753 9 86.3488 9 73.351 10 39.0737 11 55.3057 9 90.0769 11 57.4296 10 21.0794 7 84.5969 10 9.4308 7 55.9558 10 20.9037 7 43.5424 9]
Total: 1404.2905
Mean: 28.08581
Genome size: 90
Size: 91
Percent parens: 0.011
--- Population Statistics ---
Average total errors in population: 4129.206056000002
Median total errors in population: 1409.2905
Error averages by case: (156.1511323000012 9.569 147.69452080000076 8.652 151.38551819999802 10.959 146.26907559999844 8.52 180.83888200000123 10.341 111.87925149999764 8.527 108.04435459999922 9.678 144.2313347999996 11.871 132.28419840000103 10.8 104.20247690000119 7.799 146.98557109999913 8.729 127.57659580000168 9.273 217.880936500001 8.809 213.626888000003 9.675 138.21100989999871 10.325 164.21545999999927 10.475 137.62498579999868 10.241 168.38835219999797 10.993 192.38633120000142 10.385 106.61766310000097 7.302 212.18365340000187 11.104 150.340615600001 7.703 190.59693849999852 10.266 160.40099839999849 8.024 179.67231140000206 9.497)
Error minima by case: (16.5477 8 5.9849 7 10.486 9 22.3187 7 37.5765 7 26.3962 6 16.2556 8 20.2493 9 24.2773 9 1.6736 6 2.3706 7 7.1704 7 3.2516 6 4.6808 8 16.6544 8 4.0501 9 24.3136 9 13.1005 9 57.3626 8 4.903 5 9.5573 9 9.4108 6 55.8888 9 20.8368 6 43.4755 8)
Average genome size in population (length): 79.765
Average program size in population (points): 80.765
Average percent parens in population: 0.012
Minimum age in population: 99.79367603052674
Maximum age in population: 104.4055419287957
Average age in population: 102.3493330889391
Median age in population: 102.4227347110517
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 21
Genome diversity (% unique Plush genomes):	 0.871
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 21
Syntactic diversity (% unique Push programs):	 0.871
Total error diversity:				 0.264
Error (vector) diversity:			 0.309
Behavioral diversity:				 0.31
--- Run Statistics ---
Number of program evaluations used so far: 74000
Number of point (instruction) evaluations so far: 170599531
--- Timings ---
Current time: 1529615461432 milliseconds
Total Time:         308.0 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       102.8 seconds, 33.4%
Fitness Testing:    162.0 seconds, 52.6%
Report:              43.1 seconds, 14.0%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 73
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 74
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 74
;;******************************
;; -*- Number IO problem report - generation 74
Test total error for best: 59998.23050000004
Test mean error for best: 29.99912
;;------------------------------
Outputs of best individual on training cases:
Correct output: -57.4559422311 | Program output: -74.023617    
Correct output: -71.0754923621 | Program output: -65.023617    
Correct output: -66.5176295557 | Program output: -77.023617    
Correct output: 149.3187378    | Program output: 86.028727     
Correct output: -36.5450493525 | Program output: -83.023617    
Correct output: 75.4021928097  | Program output: 48.024907     
Correct output: 52.2615929867  | Program output: 74.027527     
Correct output: -19.2178367434 | Program output: 43.024417     
Correct output: 66.7518906772  | Program output: 1.023617      
Correct output: 7.673605441    | Program output: 27.023607     
Correct output: 23.6294031682  | Program output: 90.029107     
Correct output: -6.1389033433  | Program output: 38.023927     
Correct output: 9.2516366816   | Program output: -82.023627    
Correct output: 31.3251776267  | Program output: -55.023627    
Correct output: 73.3746496408  | Program output: 0.023607      
Correct output: 20.0500553336  | Program output: -19.023627    
Correct output: -23.2820697498 | Program output: 32.023627     
Correct output: 120.1004999359 | Program output: 30.023607     
Correct output: -155.453212395 | Program output: -98.023617    
Correct output: 31.10301576    | Program output: 10.023617     
Correct output: 45.5733057121  | Program output: -39.023607    
Correct output: -68.592783645  | Program output: -78.023607    
Correct output: -125.979392023 | Program output: -70.023627    
Correct output: -91.9273649148 | Program output: -71.023617    
Correct output: -92.5660607267 | Program output: -49.023627    
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_inc} {:instruction float_add} {:instruction float_yank} {:instruction integer_dup} {:instruction float_min} {:instruction float_dup_times} {:instruction float_inc} {:instruction float_dup} {:instruction float_mult} {:instruction float_mult} {:instruction float_sub} {:instruction integer_dup_items} {:instruction float_yankdup} {:instruction float_rot} {:instruction float_dup_times} {:instruction float_rot} {:instruction print_integer} {:instruction float_min} {:instruction print_float} {:instruction integer_div} {:instruction 27} {:instruction float_div} {:instruction float_yankdup} {:instruction integer_sub} {:instruction 9} {:instruction float_yankdup} {:instruction integer_stackdepth} {:instruction float_frominteger} {:instruction tag_float_196} {:instruction float_swap} {:instruction float_rot} {:instruction integer_add} {:instruction integer_stackdepth} {:instruction float_add} {:instruction in2} {:instruction float_mult} {:instruction integer_stackdepth} {:instruction float_frominteger} {:instruction tag_float_196} {:instruction float_swap} {:instruction float_rot} {:instruction integer_add} {:instruction integer_max} {:instruction float_max} {:instruction integer_stackdepth} {:instruction float_flush} {:instruction in2} {:instruction float_frominteger} {:instruction print_float} {:instruction integer_dup} {:instruction float_shove} {:instruction float_shove} {:instruction integer_inc} {:instruction float_mod} {:instruction integer_dup} {:instruction integer_dup_items} {:instruction print_integer} {:instruction integer_shove} {:instruction integer_yank} {:instruction print_integer} {:instruction integer_yank} {:instruction integer_max} {:instruction integer_max} {:instruction integer_fromfloat} {:instruction integer_stackdepth} {:instruction float_add} {:instruction in2} {:instruction float_mult} {:instruction integer_yank} {:instruction integer_max} {:instruction float_sin} {:instruction integer_stackdepth} {:instruction float_add} {:instruction in2} {:instruction float_mult} {:instruction integer_stackdepth} {:instruction float_frominteger} {:instruction integer_fromfloat} {:instruction integer_mod} {:instruction print_integer} {:instruction float_min} {:instruction integer_stackdepth} {:instruction tag_float_291} {:instruction 6} {:instruction tag_float_291} {:instruction integer_inc} {:instruction float_swap} {:instruction print_integer})
Best program: (integer_inc float_add float_yank integer_dup float_min float_dup_times float_inc float_dup float_mult float_mult float_sub integer_dup_items float_yankdup float_rot float_dup_times float_rot print_integer float_min print_float integer_div 27 float_div float_yankdup integer_sub 9 float_yankdup integer_stackdepth float_frominteger tag_float_196 float_swap float_rot integer_add integer_stackdepth float_add in2 float_mult integer_stackdepth float_frominteger tag_float_196 float_swap float_rot integer_add integer_max float_max integer_stackdepth float_flush in2 float_frominteger print_float integer_dup float_shove float_shove integer_inc float_mod integer_dup integer_dup_items print_integer integer_shove integer_yank print_integer integer_yank integer_max integer_max integer_fromfloat integer_stackdepth float_add in2 float_mult integer_yank integer_max float_sin integer_stackdepth float_add in2 float_mult integer_stackdepth float_frominteger integer_fromfloat integer_mod print_integer float_min integer_stackdepth tag_float_291 6 tag_float_291 integer_inc float_swap print_integer)
Errors: [16.5677 9 6.0519 8 10.506 10 63.29 7 46.4786 10 27.3773 7 21.7659 9 62.2423 12 65.7283 10 19.35 7 66.3997 9 44.1628 9 91.2753 9 86.3488 9 73.351 10 39.0737 11 55.3057 9 90.0769 11 57.4296 10 21.0794 7 84.5969 10 9.4308 7 55.9558 10 20.9037 7 43.5424 9]
Total: 1404.2905
Mean: 28.08581
Genome size: 88
Size: 89
Percent parens: 0.011
--- Population Statistics ---
Average total errors in population: 4178.074925599999
Median total errors in population: 1410.29005
Error averages by case: (155.9436091000011 9.59 147.15312850000046 8.628 150.97933429999853 10.678 149.85812139999908 8.324 181.026516300001 10.205 116.03851559999814 8.293 111.9089671999993 9.722 148.02965989999987 11.809 140.52163250000044 10.546 108.29665740000097 7.818 150.7556207999996 8.916 131.63228520000106 9.282 218.36317380000145 8.971 213.96817080000264 9.673 143.72158779999887 10.288 163.04605489999992 10.64 141.83022789999887 10.045 172.38245019999795 10.914 191.98425780000133 10.31 110.72500480000078 7.322 212.4954804000015 10.893 150.0876990000008 7.692 190.08572369999877 10.222 160.01400989999888 8.043 178.96203640000178 9.441)
Error minima by case: (16.5447 8 5.9818 7 10.484 9 36.7025 6 36.5687 8 26.3952 6 21.739 9 19.2423 9 24.2693 8 1.3424 6 3.3706 7 6.1628 7 0.2456 6 4.6908 8 16.6464 7 3.0501 9 23.3057 9 9.9262 9 57.3605 9 4.103 6 9.5573 9 9.4078 6 55.8867 8 20.8357 6 43.4724 8)
Average genome size in population (length): 81.209
Average program size in population (points): 82.209
Average percent parens in population: 0.012
Minimum age in population: 101.2968334033511
Maximum age in population: 105.7964222524181
Average age in population: 103.7644830801385
Median age in population: 103.8426847812425
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 15
Genome diversity (% unique Plush genomes):	 0.849
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 15
Syntactic diversity (% unique Push programs):	 0.849
Total error diversity:				 0.296
Error (vector) diversity:			 0.358
Behavioral diversity:				 0.36
--- Run Statistics ---
Number of program evaluations used so far: 75000
Number of point (instruction) evaluations so far: 172630206
--- Timings ---
Current time: 1529615465340 milliseconds
Total Time:         311.9 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       104.1 seconds, 33.4%
Fitness Testing:    164.0 seconds, 52.6%
Report:              43.7 seconds, 14.0%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 74
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 75
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 75
;;******************************
;; -*- Number IO problem report - generation 75
Test total error for best: 59998.23050000004
Test mean error for best: 29.99912
;;------------------------------
Outputs of best individual on training cases:
Correct output: -57.4559422311 | Program output: -74.023617    
Correct output: -71.0754923621 | Program output: -65.023617    
Correct output: -66.5176295557 | Program output: -77.023617    
Correct output: 149.3187378    | Program output: 86.028727     
Correct output: -36.5450493525 | Program output: -83.023617    
Correct output: 75.4021928097  | Program output: 48.024907     
Correct output: 52.2615929867  | Program output: 74.027527     
Correct output: -19.2178367434 | Program output: 43.024417     
Correct output: 66.7518906772  | Program output: 1.023617      
Correct output: 7.673605441    | Program output: 27.023607     
Correct output: 23.6294031682  | Program output: 90.029107     
Correct output: -6.1389033433  | Program output: 38.023927     
Correct output: 9.2516366816   | Program output: -82.023627    
Correct output: 31.3251776267  | Program output: -55.023627    
Correct output: 73.3746496408  | Program output: 0.023607      
Correct output: 20.0500553336  | Program output: -19.023627    
Correct output: -23.2820697498 | Program output: 32.023627     
Correct output: 120.1004999359 | Program output: 30.023607     
Correct output: -155.453212395 | Program output: -98.023617    
Correct output: 31.10301576    | Program output: 10.023617     
Correct output: 45.5733057121  | Program output: -39.023607    
Correct output: -68.592783645  | Program output: -78.023607    
Correct output: -125.979392023 | Program output: -70.023627    
Correct output: -91.9273649148 | Program output: -71.023617    
Correct output: -92.5660607267 | Program output: -49.023627    
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_inc} {:instruction float_add} {:instruction float_yank} {:instruction integer_dup} {:instruction float_min} {:instruction float_dup_times} {:instruction float_inc} {:instruction float_dup} {:instruction float_mult} {:instruction float_mult} {:instruction float_sub} {:instruction integer_dup_items} {:instruction float_yankdup} {:instruction float_rot} {:instruction float_dup_times} {:instruction float_rot} {:instruction print_integer} {:instruction float_min} {:instruction print_float} {:instruction integer_div} {:instruction 27} {:instruction float_sub} {:instruction float_yankdup} {:instruction integer_sub} {:instruction 9} {:instruction float_yankdup} {:instruction integer_stackdepth} {:instruction float_frominteger} {:instruction tag_float_196} {:instruction float_swap} {:instruction float_rot} {:instruction integer_add} {:instruction integer_stackdepth} {:instruction float_add} {:instruction in2} {:instruction float_mult} {:instruction integer_stackdepth} {:instruction float_frominteger} {:instruction tag_float_196} {:instruction float_swap} {:instruction float_rot} {:instruction integer_add} {:instruction integer_max} {:instruction float_max} {:instruction integer_stackdepth} {:instruction float_flush} {:instruction in2} {:instruction float_frominteger} {:instruction print_float} {:instruction integer_dup} {:instruction float_shove} {:instruction float_shove} {:instruction integer_inc} {:instruction float_mod} {:instruction integer_dup} {:instruction integer_dup_items} {:instruction print_integer} {:instruction integer_shove} {:instruction integer_yank} {:instruction print_integer} {:instruction integer_yank} {:instruction integer_max} {:instruction integer_max} {:instruction integer_fromfloat} {:instruction integer_stackdepth} {:instruction float_add} {:instruction in2} {:instruction float_mult} {:instruction integer_yank} {:instruction integer_max} {:instruction float_sin} {:instruction integer_stackdepth} {:instruction float_add} {:instruction in2} {:instruction float_mult} {:instruction integer_stackdepth} {:instruction float_frominteger} {:instruction integer_fromfloat} {:instruction integer_mod} {:instruction print_integer} {:instruction integer_stackdepth} {:instruction integer_stackdepth} {:instruction tag_float_291} {:instruction 6} {:instruction tag_float_291} {:instruction integer_inc} {:instruction float_swap} {:instruction print_integer})
Best program: (integer_inc float_add float_yank integer_dup float_min float_dup_times float_inc float_dup float_mult float_mult float_sub integer_dup_items float_yankdup float_rot float_dup_times float_rot print_integer float_min print_float integer_div 27 float_sub float_yankdup integer_sub 9 float_yankdup integer_stackdepth float_frominteger tag_float_196 float_swap float_rot integer_add integer_stackdepth float_add in2 float_mult integer_stackdepth float_frominteger tag_float_196 float_swap float_rot integer_add integer_max float_max integer_stackdepth float_flush in2 float_frominteger print_float integer_dup float_shove float_shove integer_inc float_mod integer_dup integer_dup_items print_integer integer_shove integer_yank print_integer integer_yank integer_max integer_max integer_fromfloat integer_stackdepth float_add in2 float_mult integer_yank integer_max float_sin integer_stackdepth float_add in2 float_mult integer_stackdepth float_frominteger integer_fromfloat integer_mod print_integer integer_stackdepth integer_stackdepth tag_float_291 6 tag_float_291 integer_inc float_swap print_integer)
Errors: [16.5677 9 6.0519 8 10.506 10 63.29 7 46.4786 10 27.3773 7 21.7659 9 62.2423 12 65.7283 10 19.35 7 66.3997 9 44.1628 9 91.2753 9 86.3488 9 73.351 10 39.0737 11 55.3057 9 90.0769 11 57.4296 10 21.0794 7 84.5969 10 9.4308 7 55.9558 10 20.9037 7 43.5424 9]
Total: 1404.2905
Mean: 28.08581
Genome size: 88
Size: 89
Percent parens: 0.011
--- Population Statistics ---
Average total errors in population: 3957.244408600006
Median total errors in population: 1407.2905
Error averages by case: (148.29539790000072 9.527 139.5610509000012 8.577 143.28686799999795 10.336 138.64117589999813 7.992 173.46582080000132 10.175 104.4174918999981 7.941 100.17156639999907 9.664 136.8602831999993 11.802 133.22344040000084 10.376 96.68607700000105 7.641 139.49387749999883 9.161 120.27793250000144 9.258 211.08689120000093 9.271 206.90192360000282 9.574 138.03121249999853 10.272 159.85985859999897 11.001 130.6416456999987 9.852 161.46328699999847 10.899 184.58048830000138 10.242 100.10261150000093 7.335 204.66563650000165 10.61 141.51737300000093 7.664 182.92271229999864 10.181 152.5075396999985 7.951 171.86524630000204 9.415)
Error minima by case: (15.5814 7 6.0155 7 9.5197 9 22.3187 6 37.5678 8 25.3952 6 21.7444 8 20.2423 9 24.2702 9 0.6736 6 3.3706 6 7.1628 7 3.2516 7 4.3252 7 16.6464 8 3.0501 9 24.3054 9 13.1005 9 57.3932 8 4.103 6 8.5663 9 8.4446 6 55.9194 9 20.8674 6 43.5061 8)
Average genome size in population (length): 84.553
Average program size in population (points): 85.553
Average percent parens in population: 0.012
Minimum age in population: 102.810532047027
Maximum age in population: 107.4192229515977
Average age in population: 105.0088194196515
Median age in population: 105.0293534090703
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 27
Genome diversity (% unique Plush genomes):	 0.824
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 27
Syntactic diversity (% unique Push programs):	 0.824
Total error diversity:				 0.283
Error (vector) diversity:			 0.339
Behavioral diversity:				 0.34
--- Run Statistics ---
Number of program evaluations used so far: 76000
Number of point (instruction) evaluations so far: 174744331
--- Timings ---
Current time: 1529615469527 milliseconds
Total Time:         316.2 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       105.7 seconds, 33.4%
Fitness Testing:    166.0 seconds, 52.5%
Report:              44.2 seconds, 14.0%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 75
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 76
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 76
;;******************************
;; -*- Number IO problem report - generation 76
Test total error for best: 59998.23050000004
Test mean error for best: 29.99912
;;------------------------------
Outputs of best individual on training cases:
Correct output: -57.4559422311 | Program output: -74.023617    
Correct output: -71.0754923621 | Program output: -65.023617    
Correct output: -66.5176295557 | Program output: -77.023617    
Correct output: 149.3187378    | Program output: 86.028727     
Correct output: -36.5450493525 | Program output: -83.023617    
Correct output: 75.4021928097  | Program output: 48.024907     
Correct output: 52.2615929867  | Program output: 74.027527     
Correct output: -19.2178367434 | Program output: 43.024417     
Correct output: 66.7518906772  | Program output: 1.023617      
Correct output: 7.673605441    | Program output: 27.023607     
Correct output: 23.6294031682  | Program output: 90.029107     
Correct output: -6.1389033433  | Program output: 38.023927     
Correct output: 9.2516366816   | Program output: -82.023627    
Correct output: 31.3251776267  | Program output: -55.023627    
Correct output: 73.3746496408  | Program output: 0.023607      
Correct output: 20.0500553336  | Program output: -19.023627    
Correct output: -23.2820697498 | Program output: 32.023627     
Correct output: 120.1004999359 | Program output: 30.023607     
Correct output: -155.453212395 | Program output: -98.023617    
Correct output: 31.10301576    | Program output: 10.023617     
Correct output: 45.5733057121  | Program output: -39.023607    
Correct output: -68.592783645  | Program output: -78.023607    
Correct output: -125.979392023 | Program output: -70.023627    
Correct output: -91.9273649148 | Program output: -71.023617    
Correct output: -92.5660607267 | Program output: -49.023627    
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_inc} {:instruction float_add} {:instruction float_add} {:instruction float_yank} {:instruction integer_dup} {:instruction integer_dec} {:instruction float_mult} {:instruction float_max} {:instruction integer_pop} {:instruction integer_mod} {:instruction float_dup_items} {:instruction integer_dec} {:instruction float_yankdup} {:instruction float_rot} {:instruction float_yank} {:instruction integer_dup} {:instruction print_float} {:instruction integer_div} {:instruction 27} {:instruction float_sub} {:instruction float_yankdup} {:instruction integer_sub} {:instruction 9} {:instruction float_yankdup} {:instruction integer_stackdepth} {:instruction float_frominteger} {:instruction tag_float_196} {:instruction float_swap} {:instruction float_rot} {:instruction integer_add} {:instruction integer_add} {:instruction integer_stackdepth} {:instruction float_add} {:instruction in2} {:instruction float_mult} {:instruction integer_stackdepth} {:instruction float_frominteger} {:instruction tag_float_196} {:instruction float_swap} {:instruction float_rot} {:instruction integer_add} {:instruction integer_max} {:instruction float_max} {:instruction integer_stackdepth} {:instruction float_flush} {:instruction in2} {:instruction float_frominteger} {:instruction print_float} {:instruction integer_dup} {:instruction float_shove} {:instruction float_shove} {:instruction integer_inc} {:instruction float_mod} {:instruction integer_dup} {:instruction integer_dup_items} {:instruction print_integer} {:instruction integer_shove} {:instruction integer_yank} {:instruction print_integer} {:instruction integer_yank} {:instruction integer_max} {:instruction integer_max} {:instruction integer_fromfloat} {:instruction integer_stackdepth} {:instruction float_add} {:instruction in2} {:instruction float_mult} {:instruction integer_yank} {:instruction integer_max} {:instruction float_sin} {:instruction integer_stackdepth} {:instruction float_add} {:instruction in2} {:instruction float_mult} {:instruction integer_stackdepth} {:instruction float_frominteger} {:instruction integer_fromfloat} {:instruction integer_mod} {:instruction print_integer} {:instruction float_min} {:instruction integer_stackdepth} {:instruction tag_float_291} {:instruction 6} {:instruction tag_float_291} {:instruction integer_inc} {:instruction float_swap} {:instruction print_integer})
Best program: (integer_inc float_add float_add float_yank integer_dup integer_dec float_mult float_max integer_pop integer_mod float_dup_items integer_dec float_yankdup float_rot float_yank integer_dup print_float integer_div 27 float_sub float_yankdup integer_sub 9 float_yankdup integer_stackdepth float_frominteger tag_float_196 float_swap float_rot integer_add integer_add integer_stackdepth float_add in2 float_mult integer_stackdepth float_frominteger tag_float_196 float_swap float_rot integer_add integer_max float_max integer_stackdepth float_flush in2 float_frominteger print_float integer_dup float_shove float_shove integer_inc float_mod integer_dup integer_dup_items print_integer integer_shove integer_yank print_integer integer_yank integer_max integer_max integer_fromfloat integer_stackdepth float_add in2 float_mult integer_yank integer_max float_sin integer_stackdepth float_add in2 float_mult integer_stackdepth float_frominteger integer_fromfloat integer_mod print_integer float_min integer_stackdepth tag_float_291 6 tag_float_291 integer_inc float_swap print_integer)
Errors: [16.5677 9 6.0519 8 10.506 10 63.29 7 46.4786 10 27.3773 7 21.7659 9 62.2423 12 65.7283 10 19.35 7 66.3997 9 44.1628 9 91.2753 9 86.3488 9 73.351 10 39.0737 11 55.3057 9 90.0769 11 57.4296 10 21.0794 7 84.5969 10 9.4308 7 55.9558 10 20.9037 7 43.5424 9]
Total: 1404.2905
Mean: 28.08581
Genome size: 87
Size: 88
Percent parens: 0.011
--- Population Statistics ---
Average total errors in population: 3815.2371051000064
Median total errors in population: 1407.2904
Error averages by case: (141.90605460000083 9.414 133.17912500000148 8.727 136.90245689999838 10.179 134.11087549999826 7.727 167.06347180000105 10.334 100.50735799999849 7.661 95.40190519999923 9.488 132.02690469999905 11.737 127.82194540000101 10.225 92.39203680000053 7.757 136.06208529999887 9.379 115.3884807000012 9.225 204.64199240000093 9.54 200.34800600000258 9.517 133.14873709999887 10.309 148.4404429999992 11.217 125.70551249999883 9.63 157.54605779999858 10.934 178.7312021000013 10.322 93.69582900000067 7.271 199.21158970000144 10.453 135.93143610000087 7.753 176.9632542999989 10.159 146.25757479999888 7.9 165.70377040000162 9.291)
Error minima by case: (14.5677 8 0.9481 7 5.506 9 36.7086 6 35.4786 8 24.3919 6 21.7434 8 20.2552 8 24.2703 8 0.6736 6 3.3706 8 7.1763 7 0.2246 7 4.3252 8 16.6464 7 3.0501 9 24.3194 8 9.9269 8 57.3604 9 4.103 6 9.5583 9 3.4308 6 53.9558 8 19.9037 6 20.5424 8)
Average genome size in population (length): 87.693
Average program size in population (points): 88.693
Average percent parens in population: 0.011
Minimum age in population: 103.8887688796123
Maximum age in population: 108.3181877213376
Average age in population: 106.3510221398527
Median age in population: 106.3860430266721
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 24
Genome diversity (% unique Plush genomes):	 0.869
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 24
Syntactic diversity (% unique Push programs):	 0.869
Total error diversity:				 0.236
Error (vector) diversity:			 0.281
Behavioral diversity:				 0.281
--- Run Statistics ---
Number of program evaluations used so far: 77000
Number of point (instruction) evaluations so far: 176936981
--- Timings ---
Current time: 1529615473876 milliseconds
Total Time:         320.4 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       107.1 seconds, 33.4%
Fitness Testing:    168.4 seconds, 52.6%
Report:              44.8 seconds, 14.0%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 76
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 77
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 77
;;******************************
;; -*- Number IO problem report - generation 77
Test total error for best: 59998.23050000004
Test mean error for best: 29.99912
;;------------------------------
Outputs of best individual on training cases:
Correct output: -57.4559422311 | Program output: -74.023617    
Correct output: -71.0754923621 | Program output: -65.023617    
Correct output: -66.5176295557 | Program output: -77.023617    
Correct output: 149.3187378    | Program output: 86.028727     
Correct output: -36.5450493525 | Program output: -83.023617    
Correct output: 75.4021928097  | Program output: 48.024907     
Correct output: 52.2615929867  | Program output: 74.027527     
Correct output: -19.2178367434 | Program output: 43.024417     
Correct output: 66.7518906772  | Program output: 1.023617      
Correct output: 7.673605441    | Program output: 27.023607     
Correct output: 23.6294031682  | Program output: 90.029107     
Correct output: -6.1389033433  | Program output: 38.023927     
Correct output: 9.2516366816   | Program output: -82.023627    
Correct output: 31.3251776267  | Program output: -55.023627    
Correct output: 73.3746496408  | Program output: 0.023607      
Correct output: 20.0500553336  | Program output: -19.023627    
Correct output: -23.2820697498 | Program output: 32.023627     
Correct output: 120.1004999359 | Program output: 30.023607     
Correct output: -155.453212395 | Program output: -98.023617    
Correct output: 31.10301576    | Program output: 10.023617     
Correct output: 45.5733057121  | Program output: -39.023607    
Correct output: -68.592783645  | Program output: -78.023607    
Correct output: -125.979392023 | Program output: -70.023627    
Correct output: -91.9273649148 | Program output: -71.023617    
Correct output: -92.5660607267 | Program output: -49.023627    
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_inc} {:instruction float_add} {:instruction float_yank} {:instruction integer_dup} {:instruction integer_inc} {:instruction float_add} {:instruction float_yank} {:instruction integer_dup} {:instruction float_min} {:instruction float_dup_times} {:instruction float_inc} {:instruction float_dup} {:instruction float_mult} {:instruction float_mult} {:instruction float_sub} {:instruction integer_dup_items} {:instruction float_yankdup} {:instruction float_rot} {:instruction float_dup_times} {:instruction float_rot} {:instruction print_integer} {:instruction float_min} {:instruction print_float} {:instruction integer_div} {:instruction 27} {:instruction float_sub} {:instruction float_yankdup} {:instruction integer_sub} {:instruction 9} {:instruction float_yankdup} {:instruction integer_stackdepth} {:instruction float_frominteger} {:instruction tag_float_196} {:instruction float_swap} {:instruction float_rot} {:instruction integer_add} {:instruction integer_stackdepth} {:instruction float_add} {:instruction in2} {:instruction float_mult} {:instruction integer_stackdepth} {:instruction float_frominteger} {:instruction tag_float_196} {:instruction float_swap} {:instruction float_rot} {:instruction integer_add} {:instruction integer_max} {:instruction float_max} {:instruction integer_stackdepth} {:instruction float_flush} {:instruction in2} {:instruction float_frominteger} {:instruction print_float} {:instruction integer_dup} {:instruction float_shove} {:instruction float_shove} {:instruction integer_inc} {:instruction float_mod} {:instruction integer_dup} {:instruction integer_dup_items} {:instruction print_integer} {:instruction integer_shove} {:instruction integer_yank} {:instruction print_integer} {:instruction integer_yank} {:instruction integer_max} {:instruction integer_max} {:instruction integer_fromfloat} {:instruction integer_stackdepth} {:instruction float_add} {:instruction in2} {:instruction float_mult} {:instruction integer_yank} {:instruction integer_max} {:instruction float_sin} {:instruction integer_stackdepth} {:instruction float_add} {:instruction in2} {:instruction float_mult} {:instruction integer_stackdepth} {:instruction float_frominteger} {:instruction integer_fromfloat} {:instruction integer_mod} {:instruction print_integer} {:instruction float_min} {:instruction integer_stackdepth} {:instruction tag_float_291} {:instruction 6} {:instruction tag_float_344} {:instruction integer_inc} {:instruction float_swap} {:instruction print_integer})
Best program: (integer_inc float_add float_yank integer_dup integer_inc float_add float_yank integer_dup float_min float_dup_times float_inc float_dup float_mult float_mult float_sub integer_dup_items float_yankdup float_rot float_dup_times float_rot print_integer float_min print_float integer_div 27 float_sub float_yankdup integer_sub 9 float_yankdup integer_stackdepth float_frominteger tag_float_196 float_swap float_rot integer_add integer_stackdepth float_add in2 float_mult integer_stackdepth float_frominteger tag_float_196 float_swap float_rot integer_add integer_max float_max integer_stackdepth float_flush in2 float_frominteger print_float integer_dup float_shove float_shove integer_inc float_mod integer_dup integer_dup_items print_integer integer_shove integer_yank print_integer integer_yank integer_max integer_max integer_fromfloat integer_stackdepth float_add in2 float_mult integer_yank integer_max float_sin integer_stackdepth float_add in2 float_mult integer_stackdepth float_frominteger integer_fromfloat integer_mod print_integer float_min integer_stackdepth tag_float_291 6 tag_float_344 integer_inc float_swap print_integer)
Errors: [16.5677 9 6.0519 8 10.506 10 63.29 7 46.4786 10 27.3773 7 21.7659 9 62.2423 12 65.7283 10 19.35 7 66.3997 9 44.1628 9 91.2753 9 86.3488 9 73.351 10 39.0737 11 55.3057 9 90.0769 11 57.4296 10 21.0794 7 84.5969 10 9.4308 7 55.9558 10 20.9037 7 43.5424 9]
Total: 1404.2905
Mean: 28.08581
Genome size: 92
Size: 93
Percent parens: 0.011
--- Population Statistics ---
Average total errors in population: 4009.8812271000065
Median total errors in population: 1408.28845
Error averages by case: (155.071673500001 9.423 146.37353930000089 8.72 150.07920679999805 10.173 137.03409599999824 7.675 180.105276300001 10.38 103.90766279999843 7.612 98.78240349999935 9.469 135.4371906999995 11.722 125.51868840000098 10.216 95.2317261000008 7.778 139.14195019999897 9.353 118.84911190000155 9.231 217.592514500001 9.519 213.4705865000028 9.507 131.24283759999852 10.302 161.86795169999908 11.27 128.17871839999887 9.587 159.93410569999867 10.975 191.0003205000013 10.336 96.61862490000074 7.339 212.13124270000148 10.466 149.1585508000009 7.788 189.3609291999987 10.165 159.19004549999863 7.871 178.41127360000183 9.314)
Error minima by case: (5.5677 8 6.0055 7 3.494 8 22.3187 6 26.4786 8 26.3852 6 21.7387 9 20.2633 9 24.2608 9 0.6736 6 3.3706 8 7.1793 6 8.2143 7 4.3252 7 16.6381 8 3.0501 9 24.3164 8 9.9226 9 57.3832 9 4.103 6 9.5663 9 5.5692 6 55.9094 9 20.8574 6 29.5424 8)
Average genome size in population (length): 88.365
Average program size in population (points): 89.365
Average percent parens in population: 0.011
Minimum age in population: 105.4810198692063
Maximum age in population: 110.065613046782
Average age in population: 107.7827399555892
Median age in population: 107.7768674016188
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 18
Genome diversity (% unique Plush genomes):	 0.886
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 18
Syntactic diversity (% unique Push programs):	 0.886
Total error diversity:				 0.236
Error (vector) diversity:			 0.284
Behavioral diversity:				 0.284
--- Run Statistics ---
Number of program evaluations used so far: 78000
Number of point (instruction) evaluations so far: 179146331
--- Timings ---
Current time: 1529615477903 milliseconds
Total Time:         324.5 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       108.5 seconds, 33.4%
Fitness Testing:    170.4 seconds, 52.5%
Report:              45.4 seconds, 14.0%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 77
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 78
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 78
;;******************************
;; -*- Number IO problem report - generation 78
Test total error for best: 59998.23050000004
Test mean error for best: 29.99912
;;------------------------------
Outputs of best individual on training cases:
Correct output: -57.4559422311 | Program output: -74.023617    
Correct output: -71.0754923621 | Program output: -65.023617    
Correct output: -66.5176295557 | Program output: -77.023617    
Correct output: 149.3187378    | Program output: 86.028727     
Correct output: -36.5450493525 | Program output: -83.023617    
Correct output: 75.4021928097  | Program output: 48.024907     
Correct output: 52.2615929867  | Program output: 74.027527     
Correct output: -19.2178367434 | Program output: 43.024417     
Correct output: 66.7518906772  | Program output: 1.023617      
Correct output: 7.673605441    | Program output: 27.023607     
Correct output: 23.6294031682  | Program output: 90.029107     
Correct output: -6.1389033433  | Program output: 38.023927     
Correct output: 9.2516366816   | Program output: -82.023627    
Correct output: 31.3251776267  | Program output: -55.023627    
Correct output: 73.3746496408  | Program output: 0.023607      
Correct output: 20.0500553336  | Program output: -19.023627    
Correct output: -23.2820697498 | Program output: 32.023627     
Correct output: 120.1004999359 | Program output: 30.023607     
Correct output: -155.453212395 | Program output: -98.023617    
Correct output: 31.10301576    | Program output: 10.023617     
Correct output: 45.5733057121  | Program output: -39.023607    
Correct output: -68.592783645  | Program output: -78.023607    
Correct output: -125.979392023 | Program output: -70.023627    
Correct output: -91.9273649148 | Program output: -71.023617    
Correct output: -92.5660607267 | Program output: -49.023627    
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_inc} {:instruction float_rot} {:instruction integer_inc} {:instruction float_add} {:instruction float_yank} {:instruction integer_dup} {:instruction float_min} {:instruction float_dup_times} {:instruction float_inc} {:instruction float_dup} {:instruction float_mult} {:instruction float_mult} {:instruction float_sub} {:instruction integer_dup_items} {:instruction float_yankdup} {:instruction float_rot} {:instruction float_dup_times} {:instruction float_rot} {:instruction print_integer} {:instruction float_min} {:instruction print_float} {:instruction integer_div} {:instruction 27} {:instruction float_sub} {:instruction float_yankdup} {:instruction integer_sub} {:instruction 9} {:instruction float_yankdup} {:instruction integer_stackdepth} {:instruction float_frominteger} {:instruction tag_float_196} {:instruction float_swap} {:instruction float_rot} {:instruction integer_add} {:instruction integer_stackdepth} {:instruction float_add} {:instruction in2} {:instruction float_mult} {:instruction integer_stackdepth} {:instruction float_frominteger} {:instruction tag_float_196} {:instruction float_swap} {:instruction float_rot} {:instruction integer_add} {:instruction integer_max} {:instruction float_max} {:instruction integer_stackdepth} {:instruction float_flush} {:instruction in2} {:instruction float_frominteger} {:instruction print_float} {:instruction integer_dup} {:instruction float_shove} {:instruction float_shove} {:instruction integer_inc} {:instruction float_mod} {:instruction integer_dup} {:instruction integer_dup_items} {:instruction print_integer} {:instruction integer_shove} {:instruction integer_yank} {:instruction print_integer} {:instruction integer_yank} {:instruction integer_max} {:instruction integer_max} {:instruction integer_fromfloat} {:instruction integer_stackdepth} {:instruction float_add} {:instruction in2} {:instruction float_inc} {:instruction integer_yank} {:instruction integer_max} {:instruction float_sin} {:instruction integer_stackdepth} {:instruction float_add} {:instruction in2} {:instruction float_mult} {:instruction integer_stackdepth} {:instruction float_frominteger} {:instruction integer_fromfloat} {:instruction integer_mod} {:instruction print_integer} {:instruction float_min} {:instruction integer_stackdepth} {:instruction tag_float_291} {:instruction 6} {:instruction tag_float_291} {:instruction integer_inc} {:instruction float_swap} {:instruction print_integer})
Best program: (integer_inc float_rot integer_inc float_add float_yank integer_dup float_min float_dup_times float_inc float_dup float_mult float_mult float_sub integer_dup_items float_yankdup float_rot float_dup_times float_rot print_integer float_min print_float integer_div 27 float_sub float_yankdup integer_sub 9 float_yankdup integer_stackdepth float_frominteger tag_float_196 float_swap float_rot integer_add integer_stackdepth float_add in2 float_mult integer_stackdepth float_frominteger tag_float_196 float_swap float_rot integer_add integer_max float_max integer_stackdepth float_flush in2 float_frominteger print_float integer_dup float_shove float_shove integer_inc float_mod integer_dup integer_dup_items print_integer integer_shove integer_yank print_integer integer_yank integer_max integer_max integer_fromfloat integer_stackdepth float_add in2 float_inc integer_yank integer_max float_sin integer_stackdepth float_add in2 float_mult integer_stackdepth float_frominteger integer_fromfloat integer_mod print_integer float_min integer_stackdepth tag_float_291 6 tag_float_291 integer_inc float_swap print_integer)
Errors: [16.5677 9 6.0519 8 10.506 10 63.29 7 46.4786 10 27.3773 7 21.7659 9 62.2423 12 65.7283 10 19.35 7 66.3997 9 44.1628 9 91.2753 9 86.3488 9 73.351 10 39.0737 11 55.3057 9 90.0769 11 57.4296 10 21.0794 7 84.5969 10 9.4308 7 55.9558 10 20.9037 7 43.5424 9]
Total: 1404.2905
Mean: 28.08581
Genome size: 90
Size: 91
Percent parens: 0.011
--- Population Statistics ---
Average total errors in population: 4266.774283400004
Median total errors in population: 1407.2905
Error averages by case: (165.10298860000188 9.428 156.45880250000067 8.704 160.11698279999786 10.159 147.8175713999987 7.69 189.9582190000011 10.385 114.93367139999819 7.619 109.87679899999931 9.47 146.4147728999999 11.745 131.8437741000009 10.209 107.31698890000109 7.795 149.73613779999934 9.349 130.00817290000134 9.232 227.2199188000014 9.545 222.976556200003 9.524 136.3169157999988 10.308 175.64188340000032 11.272 140.24645039999882 9.576 171.54154819999772 10.971 200.40281500000145 10.376 109.81089390000086 7.306 221.3571905000018 10.49 159.057638700001 7.763 198.99212409999856 10.199 169.04876979999847 7.886 188.2696973000022 9.306)
Error minima by case: (16.5511 8 5.9838 6 10.4894 8 62.2917 6 37.5812 8 8.6308 6 14.5098 8 20.2348 9 0.0195 9 0.6736 6 3.3706 8 7.1559 7 2.2516 6 4.3252 7 6.6033 8 3.0501 10 24.2991 9 53.3291 9 57.3615 9 4.103 5 9.5663 9 9.4142 6 55.8867 9 20.8357 7 43.4734 7)
Average genome size in population (length): 88.223
Average program size in population (points): 89.223
Average percent parens in population: 0.011
Minimum age in population: 106.6238349330548
Maximum age in population: 111.3938526533947
Average age in population: 109.1757272553306
Median age in population: 109.2265146287337
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 11
Genome diversity (% unique Plush genomes):	 0.891
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 11
Syntactic diversity (% unique Push programs):	 0.891
Total error diversity:				 0.258
Error (vector) diversity:			 0.299
Behavioral diversity:				 0.299
--- Run Statistics ---
Number of program evaluations used so far: 79000
Number of point (instruction) evaluations so far: 181352481
--- Timings ---
Current time: 1529615482302 milliseconds
Total Time:         328.8 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       109.9 seconds, 33.4%
Fitness Testing:    172.8 seconds, 52.6%
Report:              46.0 seconds, 14.0%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 78
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 79
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 79
;;******************************
;; -*- Number IO problem report - generation 79
Test total error for best: 59998.23050000004
Test mean error for best: 29.99912
;;------------------------------
Outputs of best individual on training cases:
Correct output: -57.4559422311 | Program output: -74.023617    
Correct output: -71.0754923621 | Program output: -65.023617    
Correct output: -66.5176295557 | Program output: -77.023617    
Correct output: 149.3187378    | Program output: 86.028727     
Correct output: -36.5450493525 | Program output: -83.023617    
Correct output: 75.4021928097  | Program output: 48.024907     
Correct output: 52.2615929867  | Program output: 74.027527     
Correct output: -19.2178367434 | Program output: 43.024417     
Correct output: 66.7518906772  | Program output: 1.023617      
Correct output: 7.673605441    | Program output: 27.023607     
Correct output: 23.6294031682  | Program output: 90.029107     
Correct output: -6.1389033433  | Program output: 38.023927     
Correct output: 9.2516366816   | Program output: -82.023627    
Correct output: 31.3251776267  | Program output: -55.023627    
Correct output: 73.3746496408  | Program output: 0.023607      
Correct output: 20.0500553336  | Program output: -19.023627    
Correct output: -23.2820697498 | Program output: 32.023627     
Correct output: 120.1004999359 | Program output: 30.023607     
Correct output: -155.453212395 | Program output: -98.023617    
Correct output: 31.10301576    | Program output: 10.023617     
Correct output: 45.5733057121  | Program output: -39.023607    
Correct output: -68.592783645  | Program output: -78.023607    
Correct output: -125.979392023 | Program output: -70.023627    
Correct output: -91.9273649148 | Program output: -71.023617    
Correct output: -92.5660607267 | Program output: -49.023627    
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_inc} {:instruction float_add} {:instruction integer_inc} {:instruction float_add} {:instruction float_yank} {:instruction integer_dup} {:instruction float_min} {:instruction float_dup_times} {:instruction float_inc} {:instruction float_dup} {:instruction float_mult} {:instruction float_mult} {:instruction float_sub} {:instruction integer_dup_items} {:instruction float_yankdup} {:instruction float_rot} {:instruction float_dup_times} {:instruction float_rot} {:instruction print_integer} {:instruction float_min} {:instruction print_float} {:instruction integer_div} {:instruction 27} {:instruction integer_dup_times} {:instruction float_yankdup} {:instruction integer_sub} {:instruction 9} {:instruction float_yankdup} {:instruction integer_stackdepth} {:instruction float_frominteger} {:instruction tag_float_196} {:instruction float_swap} {:instruction float_rot} {:instruction integer_add} {:instruction integer_stackdepth} {:instruction float_add} {:instruction in2} {:instruction float_mult} {:instruction integer_stackdepth} {:instruction float_frominteger} {:instruction tag_float_105} {:instruction float_swap} {:instruction float_rot} {:instruction integer_add} {:instruction integer_max} {:instruction float_max} {:instruction integer_stackdepth} {:instruction float_flush} {:instruction in2} {:instruction float_frominteger} {:instruction print_float} {:instruction integer_dup} {:instruction float_shove} {:instruction float_shove} {:instruction integer_inc} {:instruction float_mod} {:instruction float_mod} {:instruction integer_dup} {:instruction integer_dup_items} {:instruction print_integer} {:instruction integer_shove} {:instruction integer_yank} {:instruction print_integer} {:instruction integer_yank} {:instruction integer_max} {:instruction integer_max} {:instruction integer_fromfloat} {:instruction integer_stackdepth} {:instruction float_add} {:instruction in2} {:instruction float_mult} {:instruction integer_yank} {:instruction integer_max} {:instruction float_sin} {:instruction integer_stackdepth} {:instruction float_add} {:instruction in2} {:instruction float_mult} {:instruction integer_stackdepth} {:instruction float_frominteger} {:instruction integer_fromfloat} {:instruction integer_mod} {:instruction print_integer} {:instruction float_min} {:instruction integer_stackdepth} {:instruction tag_float_291} {:instruction 6} {:instruction tag_float_291} {:instruction integer_inc} {:instruction float_swap} {:instruction print_integer})
Best program: (integer_inc float_add integer_inc float_add float_yank integer_dup float_min float_dup_times float_inc float_dup float_mult float_mult float_sub integer_dup_items float_yankdup float_rot float_dup_times float_rot print_integer float_min print_float integer_div 27 integer_dup_times float_yankdup integer_sub 9 float_yankdup integer_stackdepth float_frominteger tag_float_196 float_swap float_rot integer_add integer_stackdepth float_add in2 float_mult integer_stackdepth float_frominteger tag_float_105 float_swap float_rot integer_add integer_max float_max integer_stackdepth float_flush in2 float_frominteger print_float integer_dup float_shove float_shove integer_inc float_mod float_mod integer_dup integer_dup_items print_integer integer_shove integer_yank print_integer integer_yank integer_max integer_max integer_fromfloat integer_stackdepth float_add in2 float_mult integer_yank integer_max float_sin integer_stackdepth float_add in2 float_mult integer_stackdepth float_frominteger integer_fromfloat integer_mod print_integer float_min integer_stackdepth tag_float_291 6 tag_float_291 integer_inc float_swap print_integer)
Errors: [16.5677 9 6.0519 8 10.506 10 63.29 7 46.4786 10 27.3773 7 21.7659 9 62.2423 12 65.7283 10 19.35 7 66.3997 9 44.1628 9 91.2753 9 86.3488 9 73.351 10 39.0737 11 55.3057 9 90.0769 11 57.4296 10 21.0794 7 84.5969 10 9.4308 7 55.9558 10 20.9037 7 43.5424 9]
Total: 1404.2905
Mean: 28.08581
Genome size: 91
Size: 92
Percent parens: 0.011
--- Population Statistics ---
Average total errors in population: 4060.1731046000036
Median total errors in population: 1407.2864000000002
Error averages by case: (154.07187140000127 9.461 145.3465903000005 8.749 149.1797466999983 10.185 142.31330149999874 7.703 179.04103670000106 10.406 108.89742719999815 7.648 104.04371939999915 9.496 140.1914946999999 11.758 128.8326983000009 10.198 100.76363380000097 7.794 143.97857909999956 9.393 123.73842110000146 9.235 216.33783010000099 9.558 211.9030387000025 9.538 136.66470649999857 10.312 163.88660139999976 11.254 133.98773989999887 9.594 165.18944429999803 10.978 190.40125580000128 10.379 102.05916750000071 7.308 210.3423750000015 10.465 148.1174122000009 7.848 188.54579609999865 10.199 158.28709009999847 7.93 177.3541268000018 9.309)
Error minima by case: (16.5464 8 5.9778 6 10.4847 9 36.71 6 36.5787 8 27.3085 6 5.2616 8 19.2523 7 1.0 5 0.6736 6 3.3706 7 6.1728 7 2.2516 7 4.2982 7 0.0 5 3.0501 9 23.3157 7 9.9226 7 57.3615 9 4.086 6 18.5663 9 9.4089 7 55.8867 9 20.8357 6 43.4704 8)
Average genome size in population (length): 87.922
Average program size in population (points): 88.922
Average percent parens in population: 0.011
Minimum age in population: 108.2854776643375
Maximum age in population: 112.6948347080295
Average age in population: 110.5850240605806
Median age in population: 110.6409563445042
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 6
Genome diversity (% unique Plush genomes):	 0.892
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 6
Syntactic diversity (% unique Push programs):	 0.892
Total error diversity:				 0.255
Error (vector) diversity:			 0.294
Behavioral diversity:				 0.294
--- Run Statistics ---
Number of program evaluations used so far: 80000
Number of point (instruction) evaluations so far: 183551056
--- Timings ---
Current time: 1529615486516 milliseconds
Total Time:         333.2 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       111.4 seconds, 33.4%
Fitness Testing:    175.0 seconds, 52.5%
Report:              46.6 seconds, 14.0%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 79
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 80
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 80
;;******************************
;; -*- Number IO problem report - generation 80
Test total error for best: 59998.23050000004
Test mean error for best: 29.99912
;;------------------------------
Outputs of best individual on training cases:
Correct output: -57.4559422311 | Program output: -74.023617    
Correct output: -71.0754923621 | Program output: -65.023617    
Correct output: -66.5176295557 | Program output: -77.023617    
Correct output: 149.3187378    | Program output: 86.028727     
Correct output: -36.5450493525 | Program output: -83.023617    
Correct output: 75.4021928097  | Program output: 48.024907     
Correct output: 52.2615929867  | Program output: 74.027527     
Correct output: -19.2178367434 | Program output: 43.024417     
Correct output: 66.7518906772  | Program output: 1.023617      
Correct output: 7.673605441    | Program output: 27.023607     
Correct output: 23.6294031682  | Program output: 90.029107     
Correct output: -6.1389033433  | Program output: 38.023927     
Correct output: 9.2516366816   | Program output: -82.023627    
Correct output: 31.3251776267  | Program output: -55.023627    
Correct output: 73.3746496408  | Program output: 0.023607      
Correct output: 20.0500553336  | Program output: -19.023627    
Correct output: -23.2820697498 | Program output: 32.023627     
Correct output: 120.1004999359 | Program output: 30.023607     
Correct output: -155.453212395 | Program output: -98.023617    
Correct output: 31.10301576    | Program output: 10.023617     
Correct output: 45.5733057121  | Program output: -39.023607    
Correct output: -68.592783645  | Program output: -78.023607    
Correct output: -125.979392023 | Program output: -70.023627    
Correct output: -91.9273649148 | Program output: -71.023617    
Correct output: -92.5660607267 | Program output: -49.023627    
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_inc} {:instruction float_add} {:instruction integer_inc} {:instruction float_add} {:instruction float_yank} {:instruction integer_dup} {:instruction float_min} {:instruction integer_dup_items} {:instruction float_frominteger} {:instruction float_dup} {:instruction float_mult} {:instruction float_mult} {:instruction float_sub} {:instruction integer_dup_items} {:instruction float_yankdup} {:instruction float_rot} {:instruction float_dup_times} {:instruction float_rot} {:instruction print_integer} {:instruction float_min} {:instruction print_float} {:instruction integer_div} {:instruction 27} {:instruction float_sub} {:instruction float_yankdup} {:instruction integer_sub} {:instruction 9} {:instruction float_yankdup} {:instruction integer_stackdepth} {:instruction float_frominteger} {:instruction tag_float_196} {:instruction float_swap} {:instruction float_rot} {:instruction integer_add} {:instruction integer_stackdepth} {:instruction float_add} {:instruction in2} {:instruction float_mult} {:instruction integer_stackdepth} {:instruction float_frominteger} {:instruction tag_float_196} {:instruction float_swap} {:instruction float_rot} {:instruction integer_add} {:instruction integer_max} {:instruction float_max} {:instruction integer_stackdepth} {:instruction float_flush} {:instruction in2} {:instruction float_frominteger} {:instruction print_float} {:instruction integer_dup} {:instruction float_shove} {:instruction float_shove} {:instruction integer_inc} {:instruction float_mod} {:instruction integer_dup} {:instruction integer_dup_items} {:instruction print_integer} {:instruction integer_shove} {:instruction integer_yank} {:instruction print_integer} {:instruction integer_yank} {:instruction integer_max} {:instruction integer_max} {:instruction integer_rot} {:instruction integer_stackdepth} {:instruction float_add} {:instruction in2} {:instruction float_mult} {:instruction integer_yank} {:instruction integer_max} {:instruction float_sin} {:instruction integer_stackdepth} {:instruction float_add} {:instruction in2} {:instruction float_mult} {:instruction integer_stackdepth} {:instruction float_frominteger} {:instruction integer_fromfloat} {:instruction integer_mod} {:instruction print_integer} {:instruction float_min} {:instruction integer_stackdepth} {:instruction tag_float_291} {:instruction 6} {:instruction tag_float_291} {:instruction integer_inc} {:instruction float_swap} {:instruction print_integer})
Best program: (integer_inc float_add integer_inc float_add float_yank integer_dup float_min integer_dup_items float_frominteger float_dup float_mult float_mult float_sub integer_dup_items float_yankdup float_rot float_dup_times float_rot print_integer float_min print_float integer_div 27 float_sub float_yankdup integer_sub 9 float_yankdup integer_stackdepth float_frominteger tag_float_196 float_swap float_rot integer_add integer_stackdepth float_add in2 float_mult integer_stackdepth float_frominteger tag_float_196 float_swap float_rot integer_add integer_max float_max integer_stackdepth float_flush in2 float_frominteger print_float integer_dup float_shove float_shove integer_inc float_mod integer_dup integer_dup_items print_integer integer_shove integer_yank print_integer integer_yank integer_max integer_max integer_rot integer_stackdepth float_add in2 float_mult integer_yank integer_max float_sin integer_stackdepth float_add in2 float_mult integer_stackdepth float_frominteger integer_fromfloat integer_mod print_integer float_min integer_stackdepth tag_float_291 6 tag_float_291 integer_inc float_swap print_integer)
Errors: [16.5677 9 6.0519 8 10.506 10 63.29 7 46.4786 10 27.3773 7 21.7659 9 62.2423 12 65.7283 10 19.35 7 66.3997 9 44.1628 9 91.2753 9 86.3488 9 73.351 10 39.0737 11 55.3057 9 90.0769 11 57.4296 10 21.0794 7 84.5969 10 9.4308 7 55.9558 10 20.9037 7 43.5424 9]
Total: 1404.2905
Mean: 28.08581
Genome size: 90
Size: 91
Percent parens: 0.011
--- Population Statistics ---
Average total errors in population: 4261.584819300001
Median total errors in population: 1408.2906
Error averages by case: (168.8984524000013 9.465 160.3286339000006 8.772 164.0320598999981 10.202 142.60024129999837 7.733 193.50162340000102 10.391 109.36936799999854 7.636 103.99494549999926 9.504 140.6202735999994 11.745 133.21306470000087 10.21 101.48877880000049 7.791 144.12679449999894 9.383 124.14839870000107 9.258 230.27533160000078 9.57 226.123134100003 9.537 141.98841969999867 10.311 176.15063139999953 11.282 134.4303564999988 9.62 166.3925610999988 10.982 204.2861828000013 10.376 103.1369842000009 7.296 224.92700720000158 10.473 163.07640240000077 7.832 202.66734359999876 10.2 173.03727069999843 7.95 191.9015593000019 9.35)
Error minima by case: (16.5441 8 5.9828 7 10.4824 9 22.3187 6 37.555 8 26.3517 6 5.2616 8 20.2278 9 24.2754 8 0.6736 6 16.6294 7 7.1589 7 2.2516 7 4.3252 7 16.6526 9 3.0501 9 24.3021 8 6.8995 9 57.3604 9 4.9344 5 9.5359 9 9.4072 6 55.8866 9 20.8346 6 43.4733 8)
Average genome size in population (length): 87.766
Average program size in population (points): 88.766
Average percent parens in population: 0.011
Minimum age in population: 109.3311874413136
Maximum age in population: 114.0432137264876
Average age in population: 112.0193299889406
Median age in population: 112.0544041244047
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 5
Genome diversity (% unique Plush genomes):	 0.889
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 5
Syntactic diversity (% unique Push programs):	 0.889
Total error diversity:				 0.258
Error (vector) diversity:			 0.298
Behavioral diversity:				 0.298
--- Run Statistics ---
Number of program evaluations used so far: 81000
Number of point (instruction) evaluations so far: 185745506
--- Timings ---
Current time: 1529615490663 milliseconds
Total Time:         337.1 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       112.7 seconds, 33.4%
Fitness Testing:    177.2 seconds, 52.5%
Report:              47.1 seconds, 14.0%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 80
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 81
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 81
;;******************************
;; -*- Number IO problem report - generation 81
Test total error for best: 59998.23050000004
Test mean error for best: 29.99912
;;------------------------------
Outputs of best individual on training cases:
Correct output: -57.4559422311 | Program output: -74.023617    
Correct output: -71.0754923621 | Program output: -65.023617    
Correct output: -66.5176295557 | Program output: -77.023617    
Correct output: 149.3187378    | Program output: 86.028727     
Correct output: -36.5450493525 | Program output: -83.023617    
Correct output: 75.4021928097  | Program output: 48.024907     
Correct output: 52.2615929867  | Program output: 74.027527     
Correct output: -19.2178367434 | Program output: 43.024417     
Correct output: 66.7518906772  | Program output: 1.023617      
Correct output: 7.673605441    | Program output: 27.023607     
Correct output: 23.6294031682  | Program output: 90.029107     
Correct output: -6.1389033433  | Program output: 38.023927     
Correct output: 9.2516366816   | Program output: -82.023627    
Correct output: 31.3251776267  | Program output: -55.023627    
Correct output: 73.3746496408  | Program output: 0.023607      
Correct output: 20.0500553336  | Program output: -19.023627    
Correct output: -23.2820697498 | Program output: 32.023627     
Correct output: 120.1004999359 | Program output: 30.023607     
Correct output: -155.453212395 | Program output: -98.023617    
Correct output: 31.10301576    | Program output: 10.023617     
Correct output: 45.5733057121  | Program output: -39.023607    
Correct output: -68.592783645  | Program output: -78.023607    
Correct output: -125.979392023 | Program output: -70.023627    
Correct output: -91.9273649148 | Program output: -71.023617    
Correct output: -92.5660607267 | Program output: -49.023627    
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_inc} {:instruction float_add} {:instruction integer_inc} {:instruction float_add} {:instruction float_yank} {:instruction integer_dup} {:instruction float_min} {:instruction integer_dup_items} {:instruction float_frominteger} {:instruction float_dup} {:instruction float_mult} {:instruction float_mult} {:instruction float_sub} {:instruction integer_dup_items} {:instruction float_yankdup} {:instruction float_rot} {:instruction float_dup_times} {:instruction float_rot} {:instruction print_integer} {:instruction float_min} {:instruction print_float} {:instruction integer_div} {:instruction 27} {:instruction float_sub} {:instruction float_yankdup} {:instruction integer_sub} {:instruction 9} {:instruction float_yankdup} {:instruction integer_stackdepth} {:instruction float_frominteger} {:instruction tag_float_196} {:instruction float_swap} {:instruction float_rot} {:instruction integer_add} {:instruction integer_stackdepth} {:instruction float_add} {:instruction in2} {:instruction float_mult} {:instruction integer_stackdepth} {:instruction float_frominteger} {:instruction tag_float_196} {:instruction float_swap} {:instruction float_rot} {:instruction integer_add} {:instruction integer_max} {:instruction float_max} {:instruction integer_stackdepth} {:instruction float_flush} {:instruction in2} {:instruction float_frominteger} {:instruction print_float} {:instruction integer_dup} {:instruction float_shove} {:instruction float_shove} {:instruction integer_inc} {:instruction float_mod} {:instruction integer_dup} {:instruction integer_dup_items} {:instruction print_integer} {:instruction integer_shove} {:instruction integer_yank} {:instruction print_integer} {:instruction integer_yank} {:instruction integer_max} {:instruction integer_max} {:instruction integer_rot} {:instruction integer_stackdepth} {:instruction float_add} {:instruction in2} {:instruction float_mult} {:instruction integer_yank} {:instruction integer_max} {:instruction float_sin} {:instruction integer_stackdepth} {:instruction float_add} {:instruction in2} {:instruction float_mult} {:instruction integer_stackdepth} {:instruction float_frominteger} {:instruction integer_fromfloat} {:instruction integer_mod} {:instruction print_integer} {:instruction float_min} {:instruction integer_stackdepth} {:instruction tag_float_291} {:instruction 6} {:instruction tag_float_291} {:instruction integer_inc} {:instruction float_swap} {:instruction print_integer})
Best program: (integer_inc float_add integer_inc float_add float_yank integer_dup float_min integer_dup_items float_frominteger float_dup float_mult float_mult float_sub integer_dup_items float_yankdup float_rot float_dup_times float_rot print_integer float_min print_float integer_div 27 float_sub float_yankdup integer_sub 9 float_yankdup integer_stackdepth float_frominteger tag_float_196 float_swap float_rot integer_add integer_stackdepth float_add in2 float_mult integer_stackdepth float_frominteger tag_float_196 float_swap float_rot integer_add integer_max float_max integer_stackdepth float_flush in2 float_frominteger print_float integer_dup float_shove float_shove integer_inc float_mod integer_dup integer_dup_items print_integer integer_shove integer_yank print_integer integer_yank integer_max integer_max integer_rot integer_stackdepth float_add in2 float_mult integer_yank integer_max float_sin integer_stackdepth float_add in2 float_mult integer_stackdepth float_frominteger integer_fromfloat integer_mod print_integer float_min integer_stackdepth tag_float_291 6 tag_float_291 integer_inc float_swap print_integer)
Errors: [16.5677 9 6.0519 8 10.506 10 63.29 7 46.4786 10 27.3773 7 21.7659 9 62.2423 12 65.7283 10 19.35 7 66.3997 9 44.1628 9 91.2753 9 86.3488 9 73.351 10 39.0737 11 55.3057 9 90.0769 11 57.4296 10 21.0794 7 84.5969 10 9.4308 7 55.9558 10 20.9037 7 43.5424 9]
Total: 1404.2905
Mean: 28.08581
Genome size: 90
Size: 91
Percent parens: 0.011
--- Population Statistics ---
Average total errors in population: 3714.258501700005
Median total errors in population: 1407.2814000000003
Error averages by case: (136.46316840000014 9.406 127.48135960000147 8.699 131.3427835999983 10.188 132.69501409999825 7.672 162.42723240000103 10.341 98.55082479999845 7.6 93.31267359999934 9.453 129.75821589999924 11.754 120.593339800001 10.19 89.33051160000059 7.749 134.70285439999893 9.366 113.89488590000131 9.255 200.16740540000077 9.545 195.92769820000257 9.493 125.70950689999876 10.291 142.74933589999847 11.263 123.3701958999989 9.574 155.16686829999844 10.959 174.21437120000132 10.317 90.78698990000086 7.306 194.6625845000014 10.47 130.3512478000008 7.78 172.36896609999883 10.171 141.13800519999867 7.862 161.07746230000186 9.311)
Error minima by case: (14.5814 8 5.9758 7 8.5197 8 61.2814 6 36.5733 8 25.3648 6 5.2616 8 20.2348 9 24.2708 8 0.6736 6 3.3706 8 6.1672 7 0.2234 7 4.3252 8 16.6481 8 3.0501 10 23.3104 8 84.0631 9 57.3535 9 4.103 6 9.5359 9 7.4446 6 55.8797 8 20.8277 6 43.4664 8)
Average genome size in population (length): 87.721
Average program size in population (points): 88.721
Average percent parens in population: 0.011
Minimum age in population: 110.7006093076089
Maximum age in population: 115.3751563714013
Average age in population: 113.298508245482
Median age in population: 113.3456227532176
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 7
Genome diversity (% unique Plush genomes):	 0.879
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 7
Syntactic diversity (% unique Push programs):	 0.879
Total error diversity:				 0.248
Error (vector) diversity:			 0.28
Behavioral diversity:				 0.28
--- Run Statistics ---
Number of program evaluations used so far: 82000
Number of point (instruction) evaluations so far: 187938831
--- Timings ---
Current time: 1529615494960 milliseconds
Total Time:         341.6 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       114.2 seconds, 33.4%
Fitness Testing:    179.5 seconds, 52.5%
Report:              47.8 seconds, 14.0%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 81
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 82
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 82
;;******************************
;; -*- Number IO problem report - generation 82
Test total error for best: 59998.23050000004
Test mean error for best: 29.99912
;;------------------------------
Outputs of best individual on training cases:
Correct output: -57.4559422311 | Program output: -74.023617    
Correct output: -71.0754923621 | Program output: -65.023617    
Correct output: -66.5176295557 | Program output: -77.023617    
Correct output: 149.3187378    | Program output: 86.028727     
Correct output: -36.5450493525 | Program output: -83.023617    
Correct output: 75.4021928097  | Program output: 48.024907     
Correct output: 52.2615929867  | Program output: 74.027527     
Correct output: -19.2178367434 | Program output: 43.024417     
Correct output: 66.7518906772  | Program output: 1.023617      
Correct output: 7.673605441    | Program output: 27.023607     
Correct output: 23.6294031682  | Program output: 90.029107     
Correct output: -6.1389033433  | Program output: 38.023927     
Correct output: 9.2516366816   | Program output: -82.023627    
Correct output: 31.3251776267  | Program output: -55.023627    
Correct output: 73.3746496408  | Program output: 0.023607      
Correct output: 20.0500553336  | Program output: -19.023627    
Correct output: -23.2820697498 | Program output: 32.023627     
Correct output: 120.1004999359 | Program output: 30.023607     
Correct output: -155.453212395 | Program output: -98.023617    
Correct output: 31.10301576    | Program output: 10.023617     
Correct output: 45.5733057121  | Program output: -39.023607    
Correct output: -68.592783645  | Program output: -78.023607    
Correct output: -125.979392023 | Program output: -70.023627    
Correct output: -91.9273649148 | Program output: -71.023617    
Correct output: -92.5660607267 | Program output: -49.023627    
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_inc} {:instruction float_add} {:instruction print_float} {:instruction integer_dup} {:instruction float_dup} {:instruction float_dup_times} {:instruction float_inc} {:instruction tagged_641} {:instruction float_mult} {:instruction float_mult} {:instruction float_sub} {:instruction integer_dup_items} {:instruction print_float} {:instruction integer_div} {:instruction 27} {:instruction float_sub} {:instruction float_yankdup} {:instruction integer_sub} {:instruction 9} {:instruction float_yankdup} {:instruction integer_stackdepth} {:instruction float_frominteger} {:instruction tag_float_196} {:instruction float_swap} {:instruction float_tan} {:instruction integer_add} {:instruction float_swap} {:instruction float_rot} {:instruction integer_add} {:instruction integer_stackdepth} {:instruction float_add} {:instruction in2} {:instruction float_mult} {:instruction integer_stackdepth} {:instruction float_frominteger} {:instruction tag_float_196} {:instruction float_swap} {:instruction float_rot} {:instruction integer_add} {:instruction integer_max} {:instruction float_max} {:instruction integer_stackdepth} {:instruction float_flush} {:instruction in2} {:instruction float_frominteger} {:instruction print_float} {:instruction integer_dup} {:instruction float_shove} {:instruction float_shove} {:instruction integer_inc} {:instruction float_mod} {:instruction integer_dup} {:instruction integer_dup_items} {:instruction print_integer} {:instruction integer_shove} {:instruction integer_yank} {:instruction print_integer} {:instruction integer_yank} {:instruction integer_stackdepth} {:instruction float_add} {:instruction in2} {:instruction float_mult} {:instruction integer_yank} {:instruction float_dup_items} {:instruction float_sin} {:instruction integer_stackdepth} {:instruction float_flush} {:instruction in2} {:instruction float_mult} {:instruction integer_stackdepth} {:instruction float_frominteger} {:instruction integer_fromfloat} {:instruction integer_mod} {:instruction print_integer} {:instruction float_min} {:instruction integer_stackdepth} {:instruction tag_float_291} {:instruction 6} {:instruction tag_float_291} {:instruction integer_inc} {:instruction float_swap} {:instruction print_integer})
Best program: (integer_inc float_add print_float integer_dup float_dup float_dup_times float_inc tagged_641 float_mult float_mult float_sub integer_dup_items print_float integer_div 27 float_sub float_yankdup integer_sub 9 float_yankdup integer_stackdepth float_frominteger tag_float_196 float_swap float_tan integer_add float_swap float_rot integer_add integer_stackdepth float_add in2 float_mult integer_stackdepth float_frominteger tag_float_196 float_swap float_rot integer_add integer_max float_max integer_stackdepth float_flush in2 float_frominteger print_float integer_dup float_shove float_shove integer_inc float_mod integer_dup integer_dup_items print_integer integer_shove integer_yank print_integer integer_yank integer_stackdepth float_add in2 float_mult integer_yank float_dup_items float_sin integer_stackdepth float_flush in2 float_mult integer_stackdepth float_frominteger integer_fromfloat integer_mod print_integer float_min integer_stackdepth tag_float_291 6 tag_float_291 integer_inc float_swap print_integer)
Errors: [16.5677 9 6.0519 8 10.506 10 63.29 7 46.4786 10 27.3773 7 21.7659 9 62.2423 12 65.7283 10 19.35 7 66.3997 9 44.1628 9 91.2753 9 86.3488 9 73.351 10 39.0737 11 55.3057 9 90.0769 11 57.4296 10 21.0794 7 84.5969 10 9.4308 7 55.9558 10 20.9037 7 43.5424 9]
Total: 1404.2905
Mean: 28.08581
Genome size: 82
Size: 83
Percent parens: 0.012
--- Population Statistics ---
Average total errors in population: 4409.305698900003
Median total errors in population: 1406.7718
Error averages by case: (178.01092340000204 9.461 170.60247590000023 8.78 173.2144177999979 10.209 144.9391303999988 7.674 202.19231320000125 10.437 111.08822479999812 7.647 107.8979302999992 9.495 144.41750269999983 11.776 135.64337180000072 10.222 104.41570570000103 7.784 146.89298899999952 9.374 128.03172700000135 9.257 238.3293668000011 9.562 234.20991240000308 9.532 141.69194779999856 10.322 182.94245130000007 11.297 138.33345369999873 9.589 167.56746569999845 11.009 214.13531080000138 10.402 105.86877610000077 7.317 232.24604360000168 10.48 172.267944900001 7.819 212.49716429999862 10.215 183.1606409999985 7.913 201.77250850000206 9.363)
Error minima by case: (16.5451 8 6.0185 7 10.4834 9 22.3187 6 37.5824 8 26.3952 6 5.2616 8 20.2633 8 24.2771 9 0.6736 6 13.3706 8 7.1793 6 8.2143 7 4.3252 8 16.6544 8 3.0501 10 24.3194 9 9.9306 9 57.4091 9 4.914 6 8.5733 9 9.4083 7 55.9353 9 20.8604 6 43.5219 8)
Average genome size in population (length): 87.381
Average program size in population (points): 88.381
Average percent parens in population: 0.011
Minimum age in population: 112.1672901874868
Maximum age in population: 116.8433268007546
Average age in population: 114.654210425646
Median age in population: 114.718707468438
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 11
Genome diversity (% unique Plush genomes):	 0.887
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 11
Syntactic diversity (% unique Push programs):	 0.887
Total error diversity:				 0.223
Error (vector) diversity:			 0.269
Behavioral diversity:				 0.269
--- Run Statistics ---
Number of program evaluations used so far: 83000
Number of point (instruction) evaluations so far: 190123756
--- Timings ---
Current time: 1529615498937 milliseconds
Total Time:         345.5 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       115.5 seconds, 33.4%
Fitness Testing:    181.6 seconds, 52.6%
Report:              48.3 seconds, 14.0%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 82
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 83
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 83
;;******************************
;; -*- Number IO problem report - generation 83
Test total error for best: 59998.23050000004
Test mean error for best: 29.99912
;;------------------------------
Outputs of best individual on training cases:
Correct output: -57.4559422311 | Program output: -74.023617    
Correct output: -71.0754923621 | Program output: -65.023617    
Correct output: -66.5176295557 | Program output: -77.023617    
Correct output: 149.3187378    | Program output: 86.028727     
Correct output: -36.5450493525 | Program output: -83.023617    
Correct output: 75.4021928097  | Program output: 48.024907     
Correct output: 52.2615929867  | Program output: 74.027527     
Correct output: -19.2178367434 | Program output: 43.024417     
Correct output: 66.7518906772  | Program output: 1.023617      
Correct output: 7.673605441    | Program output: 27.023607     
Correct output: 23.6294031682  | Program output: 90.029107     
Correct output: -6.1389033433  | Program output: 38.023927     
Correct output: 9.2516366816   | Program output: -82.023627    
Correct output: 31.3251776267  | Program output: -55.023627    
Correct output: 73.3746496408  | Program output: 0.023607      
Correct output: 20.0500553336  | Program output: -19.023627    
Correct output: -23.2820697498 | Program output: 32.023627     
Correct output: 120.1004999359 | Program output: 30.023607     
Correct output: -155.453212395 | Program output: -98.023617    
Correct output: 31.10301576    | Program output: 10.023617     
Correct output: 45.5733057121  | Program output: -39.023607    
Correct output: -68.592783645  | Program output: -78.023607    
Correct output: -125.979392023 | Program output: -70.023627    
Correct output: -91.9273649148 | Program output: -71.023617    
Correct output: -92.5660607267 | Program output: -49.023627    
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_inc} {:instruction float_add} {:instruction integer_inc} {:instruction float_add} {:instruction float_yank} {:instruction integer_dup} {:instruction float_min} {:instruction float_dup_times} {:instruction float_inc} {:instruction float_dup} {:instruction float_mult} {:instruction float_mult} {:instruction float_sub} {:instruction integer_dup_items} {:instruction float_dup_items} {:instruction float_rot} {:instruction float_dup_times} {:instruction float_rot} {:instruction print_integer} {:instruction float_min} {:instruction print_float} {:instruction integer_div} {:instruction 27} {:instruction integer_dup_times} {:instruction float_yankdup} {:instruction integer_sub} {:instruction 9} {:instruction float_yankdup} {:instruction integer_stackdepth} {:instruction float_frominteger} {:instruction tag_float_196} {:instruction float_swap} {:instruction float_rot} {:instruction integer_add} {:instruction integer_stackdepth} {:instruction float_add} {:instruction in2} {:instruction float_mult} {:instruction integer_stackdepth} {:instruction float_frominteger} {:instruction tag_float_196} {:instruction float_swap} {:instruction float_rot} {:instruction integer_add} {:instruction integer_max} {:instruction float_max} {:instruction integer_stackdepth} {:instruction float_flush} {:instruction in2} {:instruction float_frominteger} {:instruction print_float} {:instruction integer_dup} {:instruction float_shove} {:instruction float_shove} {:instruction integer_inc} {:instruction float_mod} {:instruction integer_dup} {:instruction integer_dup_items} {:instruction print_integer} {:instruction integer_shove} {:instruction integer_yank} {:instruction print_integer} {:instruction integer_stackdepth} {:instruction float_add} {:instruction in2} {:instruction float_mult} {:instruction integer_yank} {:instruction integer_sub} {:instruction float_sin} {:instruction integer_stackdepth} {:instruction float_add} {:instruction in2} {:instruction float_mult} {:instruction integer_stackdepth} {:instruction float_frominteger} {:instruction integer_fromfloat} {:instruction integer_mod} {:instruction print_integer} {:instruction float_min} {:instruction integer_stackdepth} {:instruction tag_float_291} {:instruction 6} {:instruction tag_float_291} {:instruction integer_inc} {:instruction float_swap} {:instruction print_integer})
Best program: (integer_inc float_add integer_inc float_add float_yank integer_dup float_min float_dup_times float_inc float_dup float_mult float_mult float_sub integer_dup_items float_dup_items float_rot float_dup_times float_rot print_integer float_min print_float integer_div 27 integer_dup_times float_yankdup integer_sub 9 float_yankdup integer_stackdepth float_frominteger tag_float_196 float_swap float_rot integer_add integer_stackdepth float_add in2 float_mult integer_stackdepth float_frominteger tag_float_196 float_swap float_rot integer_add integer_max float_max integer_stackdepth float_flush in2 float_frominteger print_float integer_dup float_shove float_shove integer_inc float_mod integer_dup integer_dup_items print_integer integer_shove integer_yank print_integer integer_stackdepth float_add in2 float_mult integer_yank integer_sub float_sin integer_stackdepth float_add in2 float_mult integer_stackdepth float_frominteger integer_fromfloat integer_mod print_integer float_min integer_stackdepth tag_float_291 6 tag_float_291 integer_inc float_swap print_integer)
Errors: [16.5677 9 6.0519 8 10.506 10 63.29 7 46.4786 10 27.3773 7 21.7659 9 62.2423 12 65.7283 10 19.35 7 66.3997 9 44.1628 9 91.2753 9 86.3488 9 73.351 10 39.0737 11 55.3057 9 90.0769 11 57.4296 10 21.0794 7 84.5969 10 9.4308 7 55.9558 10 20.9037 7 43.5424 9]
Total: 1404.2905
Mean: 28.08581
Genome size: 86
Size: 87
Percent parens: 0.011
--- Population Statistics ---
Average total errors in population: 3959.7063950000056
Median total errors in population: 1406.77555
Error averages by case: (149.90860570000126 9.413 141.16107570000062 8.667 144.88301209999815 10.163 139.08317019999893 7.661 175.04002220000115 10.363 105.1041041999984 7.591 100.88933469999931 9.45 137.61000359999997 11.753 125.01392690000084 10.194 96.50877730000092 7.743 140.32926439999952 9.349 121.09403330000124 9.209 212.61586240000116 9.536 208.4015291000028 9.512 131.7686780999988 10.278 154.7699582999997 11.218 130.4473616999988 9.559 161.34225779999832 10.948 186.14117010000118 10.33 99.0085786000007 7.297 206.9961391000014 10.435 143.95699450000092 7.754 184.4579041999988 10.167 154.0778479999986 7.83 173.37178280000174 9.305)
Error minima by case: (15.5814 8 5.9778 6 9.5197 8 22.3187 5 37.555 9 26.3648 6 21.7407 7 20.2278 9 30.7349 8 0.6736 6 16.6294 8 7.1589 6 8.2143 7 4.3252 7 33.6254 7 6.9499 9 24.3021 9 13.1005 9 57.3615 9 4.914 6 9.5663 9 8.4446 6 34.4121 9 0.3601 7 0.9988 8)
Average genome size in population (length): 87.758
Average program size in population (points): 88.758
Average percent parens in population: 0.011
Minimum age in population: 113.1672901874868
Maximum age in population: 118.2309088266862
Average age in population: 116.0724495829671
Median age in population: 116.1098365868592
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 7
Genome diversity (% unique Plush genomes):	 0.89
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 7
Syntactic diversity (% unique Push programs):	 0.89
Total error diversity:				 0.244
Error (vector) diversity:			 0.292
Behavioral diversity:				 0.292
--- Run Statistics ---
Number of program evaluations used so far: 84000
Number of point (instruction) evaluations so far: 192318031
--- Timings ---
Current time: 1529615503519 milliseconds
Total Time:         350.0 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       117.0 seconds, 33.4%
Fitness Testing:    183.9 seconds, 52.6%
Report:              48.9 seconds, 14.0%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 83
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 84
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 84
;;******************************
;; -*- Number IO problem report - generation 84
Test total error for best: 59998.23050000004
Test mean error for best: 29.99912
;;------------------------------
Outputs of best individual on training cases:
Correct output: -57.4559422311 | Program output: -74.023617    
Correct output: -71.0754923621 | Program output: -65.023617    
Correct output: -66.5176295557 | Program output: -77.023617    
Correct output: 149.3187378    | Program output: 86.028727     
Correct output: -36.5450493525 | Program output: -83.023617    
Correct output: 75.4021928097  | Program output: 48.024907     
Correct output: 52.2615929867  | Program output: 74.027527     
Correct output: -19.2178367434 | Program output: 43.024417     
Correct output: 66.7518906772  | Program output: 1.023617      
Correct output: 7.673605441    | Program output: 27.023607     
Correct output: 23.6294031682  | Program output: 90.029107     
Correct output: -6.1389033433  | Program output: 38.023927     
Correct output: 9.2516366816   | Program output: -82.023627    
Correct output: 31.3251776267  | Program output: -55.023627    
Correct output: 73.3746496408  | Program output: 0.023607      
Correct output: 20.0500553336  | Program output: -19.023627    
Correct output: -23.2820697498 | Program output: 32.023627     
Correct output: 120.1004999359 | Program output: 30.023607     
Correct output: -155.453212395 | Program output: -98.023617    
Correct output: 31.10301576    | Program output: 10.023617     
Correct output: 45.5733057121  | Program output: -39.023607    
Correct output: -68.592783645  | Program output: -78.023607    
Correct output: -125.979392023 | Program output: -70.023627    
Correct output: -91.9273649148 | Program output: -71.023617    
Correct output: -92.5660607267 | Program output: -49.023627    
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_add} {:instruction float_yank} {:instruction integer_inc} {:instruction float_add} {:instruction integer_inc} {:instruction float_add} {:instruction float_yank} {:instruction integer_dup} {:instruction float_min} {:instruction float_dup_times} {:instruction float_inc} {:instruction float_dup} {:instruction float_mult} {:instruction float_mult} {:instruction float_sub} {:instruction integer_dup_items} {:instruction float_yankdup} {:instruction float_rot} {:instruction float_dup_times} {:instruction float_rot} {:instruction print_integer} {:instruction float_min} {:instruction print_float} {:instruction integer_div} {:instruction 27} {:instruction integer_dup_times} {:instruction float_yankdup} {:instruction integer_sub} {:instruction 9} {:instruction float_yankdup} {:instruction integer_stackdepth} {:instruction float_frominteger} {:instruction tag_float_196} {:instruction float_swap} {:instruction float_rot} {:instruction integer_add} {:instruction integer_stackdepth} {:instruction float_add} {:instruction in2} {:instruction float_mult} {:instruction integer_stackdepth} {:instruction float_frominteger} {:instruction tag_float_196} {:instruction float_swap} {:instruction float_rot} {:instruction integer_add} {:instruction integer_max} {:instruction float_max} {:instruction integer_stackdepth} {:instruction float_flush} {:instruction in2} {:instruction float_frominteger} {:instruction print_float} {:instruction integer_dup} {:instruction float_shove} {:instruction float_shove} {:instruction integer_inc} {:instruction float_mod} {:instruction integer_dup} {:instruction integer_dup_items} {:instruction print_integer} {:instruction integer_shove} {:instruction integer_yank} {:instruction print_integer} {:instruction integer_yank} {:instruction integer_max} {:instruction integer_max} {:instruction float_sin} {:instruction integer_stackdepth} {:instruction float_add} {:instruction in2} {:instruction float_mult} {:instruction integer_stackdepth} {:instruction float_frominteger} {:instruction integer_fromfloat} {:instruction integer_mod} {:instruction print_integer} {:instruction float_min} {:instruction integer_stackdepth} {:instruction tag_float_291} {:instruction 7} {:instruction float_swap} {:instruction print_integer})
Best program: (float_add float_yank integer_inc float_add integer_inc float_add float_yank integer_dup float_min float_dup_times float_inc float_dup float_mult float_mult float_sub integer_dup_items float_yankdup float_rot float_dup_times float_rot print_integer float_min print_float integer_div 27 integer_dup_times float_yankdup integer_sub 9 float_yankdup integer_stackdepth float_frominteger tag_float_196 float_swap float_rot integer_add integer_stackdepth float_add in2 float_mult integer_stackdepth float_frominteger tag_float_196 float_swap float_rot integer_add integer_max float_max integer_stackdepth float_flush in2 float_frominteger print_float integer_dup float_shove float_shove integer_inc float_mod integer_dup integer_dup_items print_integer integer_shove integer_yank print_integer integer_yank integer_max integer_max float_sin integer_stackdepth float_add in2 float_mult integer_stackdepth float_frominteger integer_fromfloat integer_mod print_integer float_min integer_stackdepth tag_float_291 7 float_swap print_integer)
Errors: [16.5677 9 6.0519 8 10.506 10 63.29 7 46.4786 10 27.3773 7 21.7659 9 62.2423 12 65.7283 10 19.35 7 66.3997 9 44.1628 9 91.2753 9 86.3488 9 73.351 10 39.0737 11 55.3057 9 90.0769 11 57.4296 10 21.0794 7 84.5969 10 9.4308 7 55.9558 10 20.9037 7 43.5424 9]
Total: 1404.2905
Mean: 28.08581
Genome size: 83
Size: 84
Percent parens: 0.012
--- Population Statistics ---
Average total errors in population: 4596.960142500002
Median total errors in population: 1409.2905
Error averages by case: (180.89045240000206 9.475 172.60528369999992 8.757 176.056973499998 10.157 158.71826319999954 7.695 204.92294390000114 10.403 126.56836539999809 7.657 121.57338159999931 9.462 157.48707760000053 11.725 148.872113 10.182 117.25793820000113 7.794 160.84375620000037 9.377 141.2674538000008 9.27 241.00468480000148 9.546 236.9670489000028 9.514 155.66554929999853 10.282 185.83462850000004 11.259 149.42768509999885 9.573 180.04712249999776 10.977 214.97980140000124 10.387 118.40362100000084 7.285 234.98203020000153 10.466 175.13056370000083 7.81 214.3052178999988 10.193 185.00776989999858 7.936 201.64341680000186 9.315)
Error minima by case: (16.5458 8 5.9985 7 10.4841 8 22.3187 6 36.5824 9 26.3801 5 21.7411 8 19.2633 9 24.2773 8 0.6736 6 3.3706 8 6.1793 7 5.2246 7 4.3252 7 16.6544 9 3.0501 8 23.3194 9 9.9369 9 57.3805 9 4.103 6 9.5512 9 9.4079 6 55.9067 9 20.8547 7 43.4934 8)
Average genome size in population (length): 87.412
Average program size in population (points): 88.412
Average percent parens in population: 0.011
Minimum age in population: 114.4068544744818
Maximum age in population: 119.2444298821058
Average age in population: 117.4668666186994
Median age in population: 117.4998805849985
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 6
Genome diversity (% unique Plush genomes):	 0.918
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 6
Syntactic diversity (% unique Push programs):	 0.918
Total error diversity:				 0.246
Error (vector) diversity:			 0.296
Behavioral diversity:				 0.296
--- Run Statistics ---
Number of program evaluations used so far: 85000
Number of point (instruction) evaluations so far: 194503681
--- Timings ---
Current time: 1529615507387 milliseconds
Total Time:         354.0 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       118.3 seconds, 33.4%
Fitness Testing:    186.0 seconds, 52.5%
Report:              49.6 seconds, 14.0%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 84
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 85
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 85
;;******************************
;; -*- Number IO problem report - generation 85
Test total error for best: 59998.23050000004
Test mean error for best: 29.99912
;;------------------------------
Outputs of best individual on training cases:
Correct output: -57.4559422311 | Program output: -74.023617    
Correct output: -71.0754923621 | Program output: -65.023617    
Correct output: -66.5176295557 | Program output: -77.023617    
Correct output: 149.3187378    | Program output: 86.028727     
Correct output: -36.5450493525 | Program output: -83.023617    
Correct output: 75.4021928097  | Program output: 48.024907     
Correct output: 52.2615929867  | Program output: 74.027527     
Correct output: -19.2178367434 | Program output: 43.024417     
Correct output: 66.7518906772  | Program output: 1.023617      
Correct output: 7.673605441    | Program output: 27.023607     
Correct output: 23.6294031682  | Program output: 90.029107     
Correct output: -6.1389033433  | Program output: 38.023927     
Correct output: 9.2516366816   | Program output: -82.023627    
Correct output: 31.3251776267  | Program output: -55.023627    
Correct output: 73.3746496408  | Program output: 0.023607      
Correct output: 20.0500553336  | Program output: -19.023627    
Correct output: -23.2820697498 | Program output: 32.023627     
Correct output: 120.1004999359 | Program output: 30.023607     
Correct output: -155.453212395 | Program output: -98.023617    
Correct output: 31.10301576    | Program output: 10.023617     
Correct output: 45.5733057121  | Program output: -39.023607    
Correct output: -68.592783645  | Program output: -78.023607    
Correct output: -125.979392023 | Program output: -70.023627    
Correct output: -91.9273649148 | Program output: -71.023617    
Correct output: -92.5660607267 | Program output: -49.023627    
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_inc} {:instruction float_add} {:instruction integer_inc} {:instruction float_add} {:instruction float_yank} {:instruction integer_dup} {:instruction float_min} {:instruction float_flush} {:instruction float_inc} {:instruction float_dup_items} {:instruction float_mult} {:instruction float_mult} {:instruction float_sub} {:instruction integer_dup_items} {:instruction float_yankdup} {:instruction float_rot} {:instruction float_dup_times} {:instruction float_rot} {:instruction print_integer} {:instruction float_min} {:instruction print_float} {:instruction integer_div} {:instruction 27} {:instruction float_sub} {:instruction float_yankdup} {:instruction integer_sub} {:instruction 9} {:instruction float_yankdup} {:instruction integer_stackdepth} {:instruction float_frominteger} {:instruction tag_float_196} {:instruction float_swap} {:instruction float_rot} {:instruction integer_add} {:instruction integer_stackdepth} {:instruction float_add} {:instruction in2} {:instruction float_mult} {:instruction integer_stackdepth} {:instruction float_frominteger} {:instruction tag_float_196} {:instruction float_swap} {:instruction float_rot} {:instruction integer_add} {:instruction integer_max} {:instruction float_max} {:instruction integer_stackdepth} {:instruction float_flush} {:instruction in2} {:instruction float_frominteger} {:instruction print_float} {:instruction integer_dup} {:instruction float_shove} {:instruction float_shove} {:instruction integer_inc} {:instruction float_mod} {:instruction integer_dup} {:instruction integer_dup_items} {:instruction print_integer} {:instruction integer_shove} {:instruction integer_yank} {:instruction print_integer} {:instruction integer_yank} {:instruction integer_max} {:instruction integer_max} {:instruction float_sin} {:instruction integer_stackdepth} {:instruction float_add} {:instruction in2} {:instruction float_mult} {:instruction integer_stackdepth} {:instruction float_frominteger} {:instruction integer_fromfloat} {:instruction integer_mod} {:instruction print_integer} {:instruction float_min} {:instruction integer_stackdepth} {:instruction tag_float_291} {:instruction 6} {:instruction tag_float_291} {:instruction integer_inc} {:instruction float_swap} {:instruction print_integer})
Best program: (integer_inc float_add integer_inc float_add float_yank integer_dup float_min float_flush float_inc float_dup_items float_mult float_mult float_sub integer_dup_items float_yankdup float_rot float_dup_times float_rot print_integer float_min print_float integer_div 27 float_sub float_yankdup integer_sub 9 float_yankdup integer_stackdepth float_frominteger tag_float_196 float_swap float_rot integer_add integer_stackdepth float_add in2 float_mult integer_stackdepth float_frominteger tag_float_196 float_swap float_rot integer_add integer_max float_max integer_stackdepth float_flush in2 float_frominteger print_float integer_dup float_shove float_shove integer_inc float_mod integer_dup integer_dup_items print_integer integer_shove integer_yank print_integer integer_yank integer_max integer_max float_sin integer_stackdepth float_add in2 float_mult integer_stackdepth float_frominteger integer_fromfloat integer_mod print_integer float_min integer_stackdepth tag_float_291 6 tag_float_291 integer_inc float_swap print_integer)
Errors: [16.5677 9 6.0519 8 10.506 10 63.29 7 46.4786 10 27.3773 7 21.7659 9 62.2423 12 65.7283 10 19.35 7 66.3997 9 44.1628 9 91.2753 9 86.3488 9 73.351 10 39.0737 11 55.3057 9 90.0769 11 57.4296 10 21.0794 7 84.5969 10 9.4308 7 55.9558 10 20.9037 7 43.5424 9]
Total: 1404.2905
Mean: 28.08581
Genome size: 83
Size: 84
Percent parens: 0.012
--- Population Statistics ---
Average total errors in population: 3898.2024821000014
Median total errors in population: 1407.2864000000002
Error averages by case: (149.26180920000147 9.411 140.53979060000074 8.707 144.2843994999978 10.144 133.17878199999814 7.637 174.3514592000012 10.337 99.67096929999842 7.599 94.24840429999927 9.432 131.3099643999989 11.75 125.57369760000105 10.165 91.77125550000063 7.72 134.77737849999892 9.348 114.6871580000014 9.214 211.86820240000102 9.524 207.646023000003 9.47 133.46522369999875 10.236 154.92223469999976 11.215 125.10252949999861 9.551 157.1764228999982 10.95 185.57083310000135 10.351 93.32410740000091 7.28 206.47484460000166 10.402 143.31353660000107 7.755 183.89653949999877 10.163 153.51744789999844 7.829 172.8304687000022 9.249)
Error minima by case: (16.5511 8 6.0028 6 10.4894 8 21.3187 6 37.5824 8 21.4022 6 5.2616 8 20.2633 8 12.7419 7 0.6736 6 3.3706 8 7.1793 7 8.2143 7 4.3252 7 16.6544 6 3.0501 9 24.3194 9 12.1005 9 57.3805 9 4.103 5 8.4267 9 9.4099 6 55.9067 9 20.8546 6 43.4933 7)
Average genome size in population (length): 87.657
Average program size in population (points): 88.657
Average percent parens in population: 0.011
Minimum age in population: 116.3248683837219
Maximum age in population: 120.7424968156559
Average age in population: 118.8071749886178
Median age in population: 118.806874573958
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 5
Genome diversity (% unique Plush genomes):	 0.904
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 5
Syntactic diversity (% unique Push programs):	 0.904
Total error diversity:				 0.22
Error (vector) diversity:			 0.264
Behavioral diversity:				 0.265
--- Run Statistics ---
Number of program evaluations used so far: 86000
Number of point (instruction) evaluations so far: 196695531
--- Timings ---
Current time: 1529615511871 milliseconds
Total Time:         358.4 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       119.6 seconds, 33.4%
Fitness Testing:    188.5 seconds, 52.6%
Report:              50.1 seconds, 14.0%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 85
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 86
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 86
;;******************************
;; -*- Number IO problem report - generation 86
Test total error for best: 59998.23050000004
Test mean error for best: 29.99912
;;------------------------------
Outputs of best individual on training cases:
Correct output: -57.4559422311 | Program output: -74.023617    
Correct output: -71.0754923621 | Program output: -65.023617    
Correct output: -66.5176295557 | Program output: -77.023617    
Correct output: 149.3187378    | Program output: 86.028727     
Correct output: -36.5450493525 | Program output: -83.023617    
Correct output: 75.4021928097  | Program output: 48.024907     
Correct output: 52.2615929867  | Program output: 74.027527     
Correct output: -19.2178367434 | Program output: 43.024417     
Correct output: 66.7518906772  | Program output: 1.023617      
Correct output: 7.673605441    | Program output: 27.023607     
Correct output: 23.6294031682  | Program output: 90.029107     
Correct output: -6.1389033433  | Program output: 38.023927     
Correct output: 9.2516366816   | Program output: -82.023627    
Correct output: 31.3251776267  | Program output: -55.023627    
Correct output: 73.3746496408  | Program output: 0.023607      
Correct output: 20.0500553336  | Program output: -19.023627    
Correct output: -23.2820697498 | Program output: 32.023627     
Correct output: 120.1004999359 | Program output: 30.023607     
Correct output: -155.453212395 | Program output: -98.023617    
Correct output: 31.10301576    | Program output: 10.023617     
Correct output: 45.5733057121  | Program output: -39.023607    
Correct output: -68.592783645  | Program output: -78.023607    
Correct output: -125.979392023 | Program output: -70.023627    
Correct output: -91.9273649148 | Program output: -71.023617    
Correct output: -92.5660607267 | Program output: -49.023627    
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_inc} {:instruction float_add} {:instruction float_yank} {:instruction integer_dup} {:instruction integer_flush} {:instruction float_dup} {:instruction float_mult} {:instruction float_mult} {:instruction float_sub} {:instruction integer_dup_items} {:instruction float_div} {:instruction float_rot} {:instruction float_dup_times} {:instruction float_rot} {:instruction print_integer} {:instruction 27} {:instruction float_sub} {:instruction float_yankdup} {:instruction integer_sub} {:instruction float_yankdup} {:instruction integer_sub} {:instruction 9} {:instruction float_yankdup} {:instruction integer_stackdepth} {:instruction float_frominteger} {:instruction tag_float_196} {:instruction float_swap} {:instruction float_rot} {:instruction integer_add} {:instruction integer_stackdepth} {:instruction float_add} {:instruction in2} {:instruction float_mult} {:instruction integer_stackdepth} {:instruction float_frominteger} {:instruction tag_float_196} {:instruction float_swap} {:instruction float_rot} {:instruction integer_add} {:instruction integer_max} {:instruction float_max} {:instruction integer_stackdepth} {:instruction float_flush} {:instruction in2} {:instruction float_frominteger} {:instruction print_float} {:instruction integer_dup} {:instruction float_shove} {:instruction float_shove} {:instruction integer_inc} {:instruction print_integer} {:instruction integer_shove} {:instruction integer_yank} {:instruction print_integer} {:instruction integer_yank} {:instruction integer_stackdepth} {:instruction float_add} {:instruction in2} {:instruction float_mult} {:instruction integer_yank} {:instruction integer_max} {:instruction float_sin} {:instruction integer_stackdepth} {:instruction float_add} {:instruction in2} {:instruction float_mult} {:instruction integer_stackdepth} {:instruction float_frominteger} {:instruction integer_fromfloat} {:instruction integer_mod} {:instruction print_integer} {:instruction float_min} {:instruction integer_stackdepth} {:instruction tag_float_291} {:instruction 6} {:instruction tag_float_291} {:instruction integer_inc} {:instruction float_swap} {:instruction print_integer})
Best program: (integer_inc float_add float_yank integer_dup integer_flush float_dup float_mult float_mult float_sub integer_dup_items float_div float_rot float_dup_times float_rot print_integer 27 float_sub float_yankdup integer_sub float_yankdup integer_sub 9 float_yankdup integer_stackdepth float_frominteger tag_float_196 float_swap float_rot integer_add integer_stackdepth float_add in2 float_mult integer_stackdepth float_frominteger tag_float_196 float_swap float_rot integer_add integer_max float_max integer_stackdepth float_flush in2 float_frominteger print_float integer_dup float_shove float_shove integer_inc print_integer integer_shove integer_yank print_integer integer_yank integer_stackdepth float_add in2 float_mult integer_yank integer_max float_sin integer_stackdepth float_add in2 float_mult integer_stackdepth float_frominteger integer_fromfloat integer_mod print_integer float_min integer_stackdepth tag_float_291 6 tag_float_291 integer_inc float_swap print_integer)
Errors: [16.5677 9 6.0519 8 10.506 10 63.29 7 46.4786 10 27.3773 7 21.7659 9 62.2423 12 65.7283 10 19.35 7 66.3997 9 44.1628 9 91.2753 9 86.3488 9 73.351 10 39.0737 11 55.3057 9 90.0769 11 57.4296 10 21.0794 7 84.5969 10 9.4308 7 55.9558 10 20.9037 7 43.5424 9]
Total: 1404.2905
Mean: 28.08581
Genome size: 79
Size: 80
Percent parens: 0.013
--- Population Statistics ---
Average total errors in population: 3678.062971500004
Median total errors in population: 1406.2905500000002
Error averages by case: (136.61224749999994 9.38 127.60862450000171 8.66 131.52757899999784 10.19 128.390803599998 7.652 162.32417570000106 10.346 94.72951149999821 7.552 89.74387429999929 9.444 126.84079069999899 11.722 120.70004480000102 10.161 86.82164760000056 7.745 130.75689969999843 9.37 109.9745899000014 9.223 200.62417510000114 9.524 196.09184470000312 9.469 126.74952209999853 10.234 141.67123879999824 11.221 120.37096269999871 9.532 152.13065119999854 10.948 173.37278740000144 10.308 88.05765790000093 7.254 194.66751760000167 10.413 130.57225590000104 7.736 171.5043224999986 10.14 140.7456289999985 7.797 160.17561780000202 9.277)
Error minima by case: (16.5468 8 5.9985 6 10.4851 8 62.2299 6 37.562 9 26.3517 6 21.7411 8 20.2348 7 1.0 5 0.6736 6 3.3706 7 7.1659 7 2.2516 7 4.3252 8 0.0 5 3.0501 9 24.3091 7 30.0 7 57.4062 9 4.103 5 9.5359 9 9.4072 6 55.9361 9 20.8804 6 34.4339 8)
Average genome size in population (length): 87.756
Average program size in population (points): 88.756
Average percent parens in population: 0.011
Minimum age in population: 117.5686081136363
Maximum age in population: 122.3501923122598
Average age in population: 120.1671390086633
Median age in population: 120.1777677655371
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 5
Genome diversity (% unique Plush genomes):	 0.904
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 5
Syntactic diversity (% unique Push programs):	 0.904
Total error diversity:				 0.225
Error (vector) diversity:			 0.264
Behavioral diversity:				 0.264
--- Run Statistics ---
Number of program evaluations used so far: 87000
Number of point (instruction) evaluations so far: 198889831
--- Timings ---
Current time: 1529615515828 milliseconds
Total Time:         362.5 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       121.0 seconds, 33.4%
Fitness Testing:    190.6 seconds, 52.6%
Report:              50.8 seconds, 14.0%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 86
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 87
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 87
;;******************************
;; -*- Number IO problem report - generation 87
Test total error for best: 59998.23050000004
Test mean error for best: 29.99912
;;------------------------------
Outputs of best individual on training cases:
Correct output: -57.4559422311 | Program output: -74.023617    
Correct output: -71.0754923621 | Program output: -65.023617    
Correct output: -66.5176295557 | Program output: -77.023617    
Correct output: 149.3187378    | Program output: 86.028727     
Correct output: -36.5450493525 | Program output: -83.023617    
Correct output: 75.4021928097  | Program output: 48.024907     
Correct output: 52.2615929867  | Program output: 74.027527     
Correct output: -19.2178367434 | Program output: 43.024417     
Correct output: 66.7518906772  | Program output: 1.023617      
Correct output: 7.673605441    | Program output: 27.023607     
Correct output: 23.6294031682  | Program output: 90.029107     
Correct output: -6.1389033433  | Program output: 38.023927     
Correct output: 9.2516366816   | Program output: -82.023627    
Correct output: 31.3251776267  | Program output: -55.023627    
Correct output: 73.3746496408  | Program output: 0.023607      
Correct output: 20.0500553336  | Program output: -19.023627    
Correct output: -23.2820697498 | Program output: 32.023627     
Correct output: 120.1004999359 | Program output: 30.023607     
Correct output: -155.453212395 | Program output: -98.023617    
Correct output: 31.10301576    | Program output: 10.023617     
Correct output: 45.5733057121  | Program output: -39.023607    
Correct output: -68.592783645  | Program output: -78.023607    
Correct output: -125.979392023 | Program output: -70.023627    
Correct output: -91.9273649148 | Program output: -71.023617    
Correct output: -92.5660607267 | Program output: -49.023627    
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_mult} {:instruction float_pop} {:instruction integer_dup_items} {:instruction float_yankdup} {:instruction float_rot} {:instruction float_dup_times} {:instruction float_rot} {:instruction print_integer} {:instruction float_min} {:instruction print_float} {:instruction integer_div} {:instruction print_integer} {:instruction float_min} {:instruction float_rot} {:instruction float_dup_times} {:instruction print_integer} {:instruction print_integer} {:instruction float_min} {:instruction print_float} {:instruction integer_div} {:instruction 27} {:instruction float_sub} {:instruction float_yankdup} {:instruction integer_sub} {:instruction 9} {:instruction float_yankdup} {:instruction integer_stackdepth} {:instruction float_frominteger} {:instruction tag_float_196} {:instruction float_swap} {:instruction float_rot} {:instruction integer_add} {:instruction integer_stackdepth} {:instruction float_add} {:instruction in2} {:instruction float_mult} {:instruction integer_stackdepth} {:instruction float_frominteger} {:instruction tag_float_196} {:instruction float_swap} {:instruction float_rot} {:instruction integer_add} {:instruction integer_max} {:instruction float_max} {:instruction integer_stackdepth} {:instruction float_flush} {:instruction in2} {:instruction float_frominteger} {:instruction print_float} {:instruction integer_dup} {:instruction float_shove} {:instruction float_shove} {:instruction integer_inc} {:instruction float_mod} {:instruction integer_dup} {:instruction integer_dup_items} {:instruction print_integer} {:instruction integer_shove} {:instruction integer_yank} {:instruction print_integer} {:instruction integer_yank} {:instruction float_mod} {:instruction integer_fromfloat} {:instruction integer_stackdepth} {:instruction float_add} {:instruction in2} {:instruction integer_shove} {:instruction integer_yank} {:instruction integer_max} {:instruction float_sin} {:instruction integer_stackdepth} {:instruction float_add} {:instruction in2} {:instruction float_mult} {:instruction integer_stackdepth} {:instruction float_frominteger} {:instruction integer_fromfloat} {:instruction integer_mod} {:instruction print_integer} {:instruction float_min} {:instruction integer_mult} {:instruction tag_float_291} {:instruction integer_stackdepth} {:instruction tag_float_291} {:instruction 7} {:instruction 6} {:instruction integer_fromfloat} {:instruction integer_inc} {:instruction float_swap} {:instruction print_integer})
Best program: (float_mult float_pop integer_dup_items float_yankdup float_rot float_dup_times float_rot print_integer float_min print_float integer_div print_integer float_min float_rot float_dup_times print_integer print_integer float_min print_float integer_div 27 float_sub float_yankdup integer_sub 9 float_yankdup integer_stackdepth float_frominteger tag_float_196 float_swap float_rot integer_add integer_stackdepth float_add in2 float_mult integer_stackdepth float_frominteger tag_float_196 float_swap float_rot integer_add integer_max float_max integer_stackdepth float_flush in2 float_frominteger print_float integer_dup float_shove float_shove integer_inc float_mod integer_dup integer_dup_items print_integer integer_shove integer_yank print_integer integer_yank float_mod integer_fromfloat integer_stackdepth float_add in2 integer_shove integer_yank integer_max float_sin integer_stackdepth float_add in2 float_mult integer_stackdepth float_frominteger integer_fromfloat integer_mod print_integer float_min integer_mult tag_float_291 integer_stackdepth tag_float_291 7 6 integer_fromfloat integer_inc float_swap print_integer)
Errors: [16.5677 9 6.0519 8 10.506 10 63.29 7 46.4786 10 27.3773 7 21.7659 9 62.2423 12 65.7283 10 19.35 7 66.3997 9 44.1628 9 91.2753 9 86.3488 9 73.351 10 39.0737 11 55.3057 9 90.0769 11 57.4296 10 21.0794 7 84.5969 10 9.4308 7 55.9558 10 20.9037 7 43.5424 9]
Total: 1404.2905
Mean: 28.08581
Genome size: 90
Size: 91
Percent parens: 0.011
--- Population Statistics ---
Average total errors in population: 4259.403785900001
Median total errors in population: 1407.2864000000002
Error averages by case: (159.73691840000177 9.479 151.22351570000066 8.792 154.88727909999807 10.234 152.06588769999908 7.702 184.13103390000106 10.415 119.10567349999785 7.663 114.08249069999923 9.5 149.4249555000002 11.743 147.99613710000014 10.228 110.9272693000011 7.781 153.26062899999988 9.433 133.18874240000147 9.278 220.51942170000098 9.567 216.2296317000031 9.499 152.22964099999848 10.272 166.9105062999996 11.275 143.41827949999876 9.62 174.46682149999762 11.007 196.2534437000012 10.386 112.34384830000108 7.277 214.97626900000174 10.421 154.03338080000086 7.88 194.09136739999852 10.219 164.13580229999852 7.947 182.79384040000213 9.353)
Error minima by case: (16.5511 8 5.9838 7 10.4925 8 22.3187 5 36.562 8 26.3952 6 15.2232 8 19.2348 9 29.7135 8 0.3264 6 13.409 8 6.1628 7 0.2234 7 3.3252 7 33.6254 8 6.9499 9 23.3057 9 6.8995 9 57.3615 9 3.904 5 8.5349 9 9.4142 7 55.8867 9 20.8357 6 43.4734 8)
Average genome size in population (length): 87.575
Average program size in population (points): 88.575
Average percent parens in population: 0.011
Minimum age in population: 118.5686081136363
Maximum age in population: 123.757512505555
Average age in population: 121.5538442028615
Median age in population: 121.6101709804763
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 4
Genome diversity (% unique Plush genomes):	 0.908
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 4
Syntactic diversity (% unique Push programs):	 0.908
Total error diversity:				 0.243
Error (vector) diversity:			 0.298
Behavioral diversity:				 0.298
--- Run Statistics ---
Number of program evaluations used so far: 88000
Number of point (instruction) evaluations so far: 201079631
--- Timings ---
Current time: 1529615520207 milliseconds
Total Time:         366.7 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       122.3 seconds, 33.4%
Fitness Testing:    193.0 seconds, 52.6%
Report:              51.3 seconds, 14.0%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 87
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 88
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 88
;;******************************
;; -*- Number IO problem report - generation 88
Test total error for best: 59998.23050000004
Test mean error for best: 29.99912
;;------------------------------
Outputs of best individual on training cases:
Correct output: -57.4559422311 | Program output: -74.023617    
Correct output: -71.0754923621 | Program output: -65.023617    
Correct output: -66.5176295557 | Program output: -77.023617    
Correct output: 149.3187378    | Program output: 86.028727     
Correct output: -36.5450493525 | Program output: -83.023617    
Correct output: 75.4021928097  | Program output: 48.024907     
Correct output: 52.2615929867  | Program output: 74.027527     
Correct output: -19.2178367434 | Program output: 43.024417     
Correct output: 66.7518906772  | Program output: 1.023617      
Correct output: 7.673605441    | Program output: 27.023607     
Correct output: 23.6294031682  | Program output: 90.029107     
Correct output: -6.1389033433  | Program output: 38.023927     
Correct output: 9.2516366816   | Program output: -82.023627    
Correct output: 31.3251776267  | Program output: -55.023627    
Correct output: 73.3746496408  | Program output: 0.023607      
Correct output: 20.0500553336  | Program output: -19.023627    
Correct output: -23.2820697498 | Program output: 32.023627     
Correct output: 120.1004999359 | Program output: 30.023607     
Correct output: -155.453212395 | Program output: -98.023617    
Correct output: 31.10301576    | Program output: 10.023617     
Correct output: 45.5733057121  | Program output: -39.023607    
Correct output: -68.592783645  | Program output: -78.023607    
Correct output: -125.979392023 | Program output: -70.023627    
Correct output: -91.9273649148 | Program output: -71.023617    
Correct output: -92.5660607267 | Program output: -49.023627    
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_inc} {:instruction tagged_99} {:instruction float_add} {:instruction float_yank} {:instruction float_dup_times} {:instruction float_inc} {:instruction float_dup} {:instruction integer_dup_times} {:instruction float_mult} {:instruction float_sub} {:instruction integer_dup_items} {:instruction integer_rot} {:instruction float_rot} {:instruction float_dup_times} {:instruction float_rot} {:instruction print_integer} {:instruction float_min} {:instruction print_float} {:instruction print_float} {:instruction integer_div} {:instruction 27} {:instruction float_sub} {:instruction float_yankdup} {:instruction integer_sub} {:instruction 9} {:instruction float_dup_times} {:instruction integer_stackdepth} {:instruction float_frominteger} {:instruction tag_float_196} {:instruction integer_add} {:instruction integer_stackdepth} {:instruction float_add} {:instruction in2} {:instruction float_mult} {:instruction integer_stackdepth} {:instruction float_frominteger} {:instruction tag_float_196} {:instruction float_swap} {:instruction float_rot} {:instruction integer_add} {:instruction integer_max} {:instruction float_max} {:instruction float_swap} {:instruction float_rot} {:instruction integer_add} {:instruction integer_max} {:instruction float_max} {:instruction integer_stackdepth} {:instruction float_flush} {:instruction in2} {:instruction float_frominteger} {:instruction print_float} {:instruction integer_dup} {:instruction float_shove} {:instruction float_shove} {:instruction integer_inc} {:instruction float_mod} {:instruction integer_dup} {:instruction integer_dup_items} {:instruction print_integer} {:instruction integer_shove} {:instruction integer_yank} {:instruction print_integer} {:instruction integer_yank} {:instruction integer_max} {:instruction integer_max} {:instruction integer_fromfloat} {:instruction integer_stackdepth} {:instruction float_add} {:instruction in2} {:instruction float_mult} {:instruction integer_yank} {:instruction integer_max} {:instruction float_sin} {:instruction integer_stackdepth} {:instruction float_add} {:instruction in2} {:instruction float_mult} {:instruction integer_stackdepth} {:instruction float_frominteger} {:instruction integer_fromfloat} {:instruction integer_mod} {:instruction print_integer} {:instruction float_min} {:instruction integer_stackdepth} {:instruction tag_float_291} {:instruction 6} {:instruction tag_float_291} {:instruction integer_inc} {:instruction float_swap} {:instruction print_integer})
Best program: (integer_inc tagged_99 float_add float_yank float_dup_times float_inc float_dup integer_dup_times float_mult float_sub integer_dup_items integer_rot float_rot float_dup_times float_rot print_integer float_min print_float print_float integer_div 27 float_sub float_yankdup integer_sub 9 float_dup_times integer_stackdepth float_frominteger tag_float_196 integer_add integer_stackdepth float_add in2 float_mult integer_stackdepth float_frominteger tag_float_196 float_swap float_rot integer_add integer_max float_max float_swap float_rot integer_add integer_max float_max integer_stackdepth float_flush in2 float_frominteger print_float integer_dup float_shove float_shove integer_inc float_mod integer_dup integer_dup_items print_integer integer_shove integer_yank print_integer integer_yank integer_max integer_max integer_fromfloat integer_stackdepth float_add in2 float_mult integer_yank integer_max float_sin integer_stackdepth float_add in2 float_mult integer_stackdepth float_frominteger integer_fromfloat integer_mod print_integer float_min integer_stackdepth tag_float_291 6 tag_float_291 integer_inc float_swap print_integer)
Errors: [16.5677 9 6.0519 8 10.506 10 63.29 7 46.4786 10 27.3773 7 21.7659 9 62.2423 12 65.7283 10 19.35 7 66.3997 9 44.1628 9 91.2753 9 86.3488 9 73.351 10 39.0737 11 55.3057 9 90.0769 11 57.4296 10 21.0794 7 84.5969 10 9.4308 7 55.9558 10 20.9037 7 43.5424 9]
Total: 1404.2905
Mean: 28.08581
Genome size: 91
Size: 92
Percent parens: 0.011
--- Population Statistics ---
Average total errors in population: 4011.851758300002
Median total errors in population: 1407.2905
Error averages by case: (160.5113086000013 9.392 151.71470360000063 8.701 155.56697509999788 10.145 131.28337979999802 7.651 185.55618770000106 10.343 97.6747028999982 7.583 92.27933169999926 9.457 129.42725649999912 11.73 122.405968700001 10.196 88.82266180000059 7.753 133.09796199999857 9.349 112.69146800000114 9.217 222.88355260000108 9.517 218.49809440000283 9.508 129.43722599999862 10.291 166.74020329999945 11.254 122.13742859999871 9.558 154.68942659999848 10.935 196.2427615000012 10.339 90.3730574000008 7.291 217.04993490000155 10.48 154.65431780000085 7.76 194.3976753999987 10.186 164.52927189999838 7.851 183.38790150000196 9.312)
Error minima by case: (16.5511 8 5.9763 7 10.4925 9 62.2917 6 37.555 9 26.3852 6 5.2616 8 20.2278 8 24.2708 9 0.6736 6 3.3706 8 7.1589 7 8.2143 7 4.3252 8 16.6481 9 3.0501 9 24.3021 8 84.0835 9 57.3541 8 4.103 6 9.5563 8 9.4142 6 55.8803 9 20.8282 7 43.4669 8)
Average genome size in population (length): 87.84
Average program size in population (points): 88.84
Average percent parens in population: 0.011
Minimum age in population: 119.5686081136363
Maximum age in population: 125.1771080316608
Average age in population: 122.9727418918969
Median age in population: 123.0267653391299
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 5
Genome diversity (% unique Plush genomes):	 0.901
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 5
Syntactic diversity (% unique Push programs):	 0.901
Total error diversity:				 0.249
Error (vector) diversity:			 0.295
Behavioral diversity:				 0.295
--- Run Statistics ---
Number of program evaluations used so far: 89000
Number of point (instruction) evaluations so far: 203276231
--- Timings ---
Current time: 1529615524289 milliseconds
Total Time:         370.9 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       123.7 seconds, 33.4%
Fitness Testing:    195.1 seconds, 52.6%
Report:              52.0 seconds, 14.0%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 88
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 89
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 89
;;******************************
;; -*- Number IO problem report - generation 89
Test total error for best: 59998.23050000004
Test mean error for best: 29.99912
;;------------------------------
Outputs of best individual on training cases:
Correct output: -57.4559422311 | Program output: -74.023617    
Correct output: -71.0754923621 | Program output: -65.023617    
Correct output: -66.5176295557 | Program output: -77.023617    
Correct output: 149.3187378    | Program output: 86.028727     
Correct output: -36.5450493525 | Program output: -83.023617    
Correct output: 75.4021928097  | Program output: 48.024907     
Correct output: 52.2615929867  | Program output: 74.027527     
Correct output: -19.2178367434 | Program output: 43.024417     
Correct output: 66.7518906772  | Program output: 1.023617      
Correct output: 7.673605441    | Program output: 27.023607     
Correct output: 23.6294031682  | Program output: 90.029107     
Correct output: -6.1389033433  | Program output: 38.023927     
Correct output: 9.2516366816   | Program output: -82.023627    
Correct output: 31.3251776267  | Program output: -55.023627    
Correct output: 73.3746496408  | Program output: 0.023607      
Correct output: 20.0500553336  | Program output: -19.023627    
Correct output: -23.2820697498 | Program output: 32.023627     
Correct output: 120.1004999359 | Program output: 30.023607     
Correct output: -155.453212395 | Program output: -98.023617    
Correct output: 31.10301576    | Program output: 10.023617     
Correct output: 45.5733057121  | Program output: -39.023607    
Correct output: -68.592783645  | Program output: -78.023607    
Correct output: -125.979392023 | Program output: -70.023627    
Correct output: -91.9273649148 | Program output: -71.023617    
Correct output: -92.5660607267 | Program output: -49.023627    
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_inc} {:instruction float_add} {:instruction float_yank} {:instruction integer_dup} {:instruction float_min} {:instruction integer_shove} {:instruction float_inc} {:instruction integer_shove} {:instruction float_mult} {:instruction float_mult} {:instruction float_sub} {:instruction integer_dup_items} {:instruction float_yankdup} {:instruction float_rot} {:instruction integer_dup_times} {:instruction float_rot} {:instruction float_dup_times} {:instruction float_min} {:instruction print_float} {:instruction float_inc} {:instruction 27} {:instruction float_sub} {:instruction float_yankdup} {:instruction integer_sub} {:instruction 9} {:instruction float_yankdup} {:instruction integer_stackdepth} {:instruction float_frominteger} {:instruction tag_float_196} {:instruction float_swap} {:instruction float_rot} {:instruction integer_add} {:instruction integer_stackdepth} {:instruction float_pop} {:instruction in2} {:instruction float_mult} {:instruction integer_stackdepth} {:instruction float_frominteger} {:instruction tag_float_196} {:instruction float_swap} {:instruction float_yankdup} {:instruction integer_add} {:instruction integer_max} {:instruction float_mod} {:instruction integer_stackdepth} {:instruction float_flush} {:instruction in2} {:instruction float_frominteger} {:instruction print_float} {:instruction integer_dup} {:instruction float_shove} {:instruction float_shove} {:instruction integer_inc} {:instruction float_mod} {:instruction integer_dup} {:instruction integer_dup_items} {:instruction print_integer} {:instruction integer_shove} {:instruction integer_yank} {:instruction print_integer} {:instruction integer_yank} {:instruction integer_max} {:instruction float_sin} {:instruction float_mult} {:instruction integer_add} {:instruction integer_max} {:instruction float_sin} {:instruction integer_stackdepth} {:instruction float_add} {:instruction in2} {:instruction float_mult} {:instruction integer_stackdepth} {:instruction float_flush} {:instruction integer_fromfloat} {:instruction integer_mod} {:instruction print_integer} {:instruction float_min} {:instruction integer_stackdepth} {:instruction tag_float_291} {:instruction 6} {:instruction tag_float_291} {:instruction integer_inc} {:instruction tag_float_291} {:instruction 7} {:instruction float_swap} {:instruction print_integer})
Best program: (integer_inc float_add float_yank integer_dup float_min integer_shove float_inc integer_shove float_mult float_mult float_sub integer_dup_items float_yankdup float_rot integer_dup_times float_rot float_dup_times float_min print_float float_inc 27 float_sub float_yankdup integer_sub 9 float_yankdup integer_stackdepth float_frominteger tag_float_196 float_swap float_rot integer_add integer_stackdepth float_pop in2 float_mult integer_stackdepth float_frominteger tag_float_196 float_swap float_yankdup integer_add integer_max float_mod integer_stackdepth float_flush in2 float_frominteger print_float integer_dup float_shove float_shove integer_inc float_mod integer_dup integer_dup_items print_integer integer_shove integer_yank print_integer integer_yank integer_max float_sin float_mult integer_add integer_max float_sin integer_stackdepth float_add in2 float_mult integer_stackdepth float_flush integer_fromfloat integer_mod print_integer float_min integer_stackdepth tag_float_291 6 tag_float_291 integer_inc tag_float_291 7 float_swap print_integer)
Errors: [16.5677 9 6.0519 8 10.506 10 63.29 7 46.4786 10 27.3773 7 21.7659 9 62.2423 12 65.7283 10 19.35 7 66.3997 9 44.1628 9 91.2753 9 86.3488 9 73.351 10 39.0737 11 55.3057 9 90.0769 11 57.4296 10 21.0794 7 84.5969 10 9.4308 7 55.9558 10 20.9037 7 43.5424 9]
Total: 1404.2905
Mean: 28.08581
Genome size: 86
Size: 87
Percent parens: 0.011
--- Population Statistics ---
Average total errors in population: 3845.599189400003
Median total errors in population: 1407.2864000000002
Error averages by case: (145.4985350000004 9.446 137.79814300000166 8.744 140.516417599998 10.183 131.40584709999797 7.662 170.61799550000123 10.383 97.82001809999842 7.611 93.40364619999919 9.472 130.367282199999 11.756 123.94233670000096 10.215 90.82701350000036 7.766 133.8961239999988 9.374 113.70261660000133 9.251 208.21664410000122 9.535 203.985994300003 9.524 130.98477039999864 10.306 156.9378923999991 11.251 124.05587779999873 9.578 155.4396726999988 10.992 183.00929510000134 10.356 92.33035850000086 7.321 202.7710397000018 10.481 139.54750450000097 7.751 181.28458239999875 10.201 150.75234949999856 7.873 170.14923250000192 9.306)
Error minima by case: (5.3496 8 6.0128 7 3.7121 8 20.7186 6 26.2605 8 18.6352 6 15.2616 8 20.2348 8 24.2772 9 0.6736 6 3.3706 8 7.1459 7 2.2516 7 4.3252 8 16.6544 9 3.0501 9 24.2891 9 13.1005 9 57.3905 8 4.103 5 8.5733 9 5.7873 6 55.9167 9 20.8646 6 29.7606 7)
Average genome size in population (length): 87.172
Average program size in population (points): 88.172
Average percent parens in population: 0.011
Minimum age in population: 121.6413740920137
Maximum age in population: 126.3284390072341
Average age in population: 124.3289187018683
Median age in population: 124.3730163077814
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 5
Genome diversity (% unique Plush genomes):	 0.896
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 5
Syntactic diversity (% unique Push programs):	 0.896
Total error diversity:				 0.245
Error (vector) diversity:			 0.291
Behavioral diversity:				 0.292
--- Run Statistics ---
Number of program evaluations used so far: 90000
Number of point (instruction) evaluations so far: 205456281
--- Timings ---
Current time: 1529615528550 milliseconds
Total Time:         375.0 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       125.0 seconds, 33.3%
Fitness Testing:    197.5 seconds, 52.7%
Report:              52.5 seconds, 14.0%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 89
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 90
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 90
;;******************************
;; -*- Number IO problem report - generation 90
Test total error for best: 59998.23050000004
Test mean error for best: 29.99912
;;------------------------------
Outputs of best individual on training cases:
Correct output: -57.4559422311 | Program output: -74.023617    
Correct output: -71.0754923621 | Program output: -65.023617    
Correct output: -66.5176295557 | Program output: -77.023617    
Correct output: 149.3187378    | Program output: 86.028727     
Correct output: -36.5450493525 | Program output: -83.023617    
Correct output: 75.4021928097  | Program output: 48.024907     
Correct output: 52.2615929867  | Program output: 74.027527     
Correct output: -19.2178367434 | Program output: 43.024417     
Correct output: 66.7518906772  | Program output: 1.023617      
Correct output: 7.673605441    | Program output: 27.023607     
Correct output: 23.6294031682  | Program output: 90.029107     
Correct output: -6.1389033433  | Program output: 38.023927     
Correct output: 9.2516366816   | Program output: -82.023627    
Correct output: 31.3251776267  | Program output: -55.023627    
Correct output: 73.3746496408  | Program output: 0.023607      
Correct output: 20.0500553336  | Program output: -19.023627    
Correct output: -23.2820697498 | Program output: 32.023627     
Correct output: 120.1004999359 | Program output: 30.023607     
Correct output: -155.453212395 | Program output: -98.023617    
Correct output: 31.10301576    | Program output: 10.023617     
Correct output: 45.5733057121  | Program output: -39.023607    
Correct output: -68.592783645  | Program output: -78.023607    
Correct output: -125.979392023 | Program output: -70.023627    
Correct output: -91.9273649148 | Program output: -71.023617    
Correct output: -92.5660607267 | Program output: -49.023627    
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_inc} {:instruction float_add} {:instruction float_yank} {:instruction integer_dup} {:instruction float_min} {:instruction float_rot} {:instruction float_dup_times} {:instruction float_rot} {:instruction print_integer} {:instruction float_min} {:instruction print_float} {:instruction integer_div} {:instruction 27} {:instruction float_div} {:instruction float_yankdup} {:instruction integer_sub} {:instruction 9} {:instruction float_yankdup} {:instruction integer_stackdepth} {:instruction float_frominteger} {:instruction tag_float_196} {:instruction float_swap} {:instruction float_rot} {:instruction integer_add} {:instruction integer_stackdepth} {:instruction float_add} {:instruction in2} {:instruction float_max} {:instruction float_rot} {:instruction integer_add} {:instruction integer_max} {:instruction float_max} {:instruction integer_stackdepth} {:instruction float_flush} {:instruction in2} {:instruction float_frominteger} {:instruction print_float} {:instruction integer_dup} {:instruction float_shove} {:instruction float_shove} {:instruction integer_inc} {:instruction float_mod} {:instruction integer_dup} {:instruction integer_dup} {:instruction integer_dup_items} {:instruction print_integer} {:instruction integer_shove} {:instruction integer_yank} {:instruction print_integer} {:instruction integer_yank} {:instruction integer_max} {:instruction float_sin} {:instruction integer_stackdepth} {:instruction float_add} {:instruction in2} {:instruction float_mult} {:instruction integer_stackdepth} {:instruction float_frominteger} {:instruction integer_fromfloat} {:instruction integer_mod} {:instruction print_integer} {:instruction float_min} {:instruction integer_stackdepth} {:instruction tag_float_291} {:instruction 6} {:instruction tag_float_291} {:instruction integer_inc} {:instruction float_swap} {:instruction print_integer})
Best program: (integer_inc float_add float_yank integer_dup float_min float_rot float_dup_times float_rot print_integer float_min print_float integer_div 27 float_div float_yankdup integer_sub 9 float_yankdup integer_stackdepth float_frominteger tag_float_196 float_swap float_rot integer_add integer_stackdepth float_add in2 float_max float_rot integer_add integer_max float_max integer_stackdepth float_flush in2 float_frominteger print_float integer_dup float_shove float_shove integer_inc float_mod integer_dup integer_dup integer_dup_items print_integer integer_shove integer_yank print_integer integer_yank integer_max float_sin integer_stackdepth float_add in2 float_mult integer_stackdepth float_frominteger integer_fromfloat integer_mod print_integer float_min integer_stackdepth tag_float_291 6 tag_float_291 integer_inc float_swap print_integer)
Errors: [16.5677 9 6.0519 8 10.506 10 63.29 7 46.4786 10 27.3773 7 21.7659 9 62.2423 12 65.7283 10 19.35 7 66.3997 9 44.1628 9 91.2753 9 86.3488 9 73.351 10 39.0737 11 55.3057 9 90.0769 11 57.4296 10 21.0794 7 84.5969 10 9.4308 7 55.9558 10 20.9037 7 43.5424 9]
Total: 1404.2905
Mean: 28.08581
Genome size: 69
Size: 70
Percent parens: 0.014
--- Population Statistics ---
Average total errors in population: 3989.7097708000024
Median total errors in population: 1408.7606
Error averages by case: (148.55251510000087 9.456 139.90404530000123 8.763 143.59834999999813 10.216 142.34019429999884 7.722 173.52949810000115 10.427 107.6177147999983 7.638 104.46808829999927 9.522 140.0795947999995 11.777 132.551475500001 10.183 98.84364590000062 7.839 143.27511209999938 9.444 123.71647040000128 9.295 210.9845685000008 9.615 206.72529570000304 9.541 140.3154625999989 10.31 157.9275777999991 11.279 133.0940177999986 9.605 162.98246799999825 10.966 185.03438300000133 10.395 101.30599560000084 7.302 204.66334360000155 10.475 142.51474260000106 7.849 183.43262149999876 10.195 152.8605029999987 7.93 172.31208650000207 9.336)
Error minima by case: (15.5814 8 6.0028 7 9.5197 8 22.3187 6 36.562 9 26.3648 6 21.7395 8 19.2348 6 1.0 4 0.6736 6 3.3706 8 6.1659 6 0.2234 6 4.3252 7 0.0 3 3.0501 7 23.3091 6 9.9265 6 57.3805 7 4.103 5 9.5663 7 8.4446 6 55.9067 7 20.8546 6 43.4933 7)
Average genome size in population (length): 86.852
Average program size in population (points): 87.852
Average percent parens in population: 0.011
Minimum age in population: 122.6621827731742
Maximum age in population: 127.9723030823572
Average age in population: 125.7415907692345
Median age in population: 125.7630714105676
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 5
Genome diversity (% unique Plush genomes):	 0.903
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 5
Syntactic diversity (% unique Push programs):	 0.903
Total error diversity:				 0.245
Error (vector) diversity:			 0.287
Behavioral diversity:				 0.287
--- Run Statistics ---
Number of program evaluations used so far: 91000
Number of point (instruction) evaluations so far: 207628131
--- Timings ---
Current time: 1529615532791 milliseconds
Total Time:         379.5 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       126.3 seconds, 33.3%
Fitness Testing:    199.9 seconds, 52.7%
Report:              53.1 seconds, 14.0%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 90
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 91
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 91
;;******************************
;; -*- Number IO problem report - generation 91
Test total error for best: 59998.23050000004
Test mean error for best: 29.99912
;;------------------------------
Outputs of best individual on training cases:
Correct output: -57.4559422311 | Program output: -74.023617    
Correct output: -71.0754923621 | Program output: -65.023617    
Correct output: -66.5176295557 | Program output: -77.023617    
Correct output: 149.3187378    | Program output: 86.028727     
Correct output: -36.5450493525 | Program output: -83.023617    
Correct output: 75.4021928097  | Program output: 48.024907     
Correct output: 52.2615929867  | Program output: 74.027527     
Correct output: -19.2178367434 | Program output: 43.024417     
Correct output: 66.7518906772  | Program output: 1.023617      
Correct output: 7.673605441    | Program output: 27.023607     
Correct output: 23.6294031682  | Program output: 90.029107     
Correct output: -6.1389033433  | Program output: 38.023927     
Correct output: 9.2516366816   | Program output: -82.023627    
Correct output: 31.3251776267  | Program output: -55.023627    
Correct output: 73.3746496408  | Program output: 0.023607      
Correct output: 20.0500553336  | Program output: -19.023627    
Correct output: -23.2820697498 | Program output: 32.023627     
Correct output: 120.1004999359 | Program output: 30.023607     
Correct output: -155.453212395 | Program output: -98.023617    
Correct output: 31.10301576    | Program output: 10.023617     
Correct output: 45.5733057121  | Program output: -39.023607    
Correct output: -68.592783645  | Program output: -78.023607    
Correct output: -125.979392023 | Program output: -70.023627    
Correct output: -91.9273649148 | Program output: -71.023617    
Correct output: -92.5660607267 | Program output: -49.023627    
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_inc} {:instruction float_add} {:instruction float_yank} {:instruction float_min} {:instruction float_rot} {:instruction integer_dup} {:instruction float_rot} {:instruction float_flush} {:instruction float_mult} {:instruction float_mult} {:instruction float_sub} {:instruction print_float} {:instruction integer_div} {:instruction 27} {:instruction float_sub} {:instruction float_yank} {:instruction integer_sub} {:instruction 9} {:instruction float_yankdup} {:instruction integer_stackdepth} {:instruction float_frominteger} {:instruction tag_float_196} {:instruction float_rot} {:instruction integer_add} {:instruction integer_stackdepth} {:instruction float_add} {:instruction in2} {:instruction float_mult} {:instruction integer_stackdepth} {:instruction float_frominteger} {:instruction tag_float_196} {:instruction float_swap} {:instruction float_rot} {:instruction integer_add} {:instruction integer_max} {:instruction float_max} {:instruction integer_stackdepth} {:instruction float_flush} {:instruction in2} {:instruction float_frominteger} {:instruction print_float} {:instruction integer_dup} {:instruction float_shove} {:instruction float_shove} {:instruction integer_inc} {:instruction float_mod} {:instruction integer_dup} {:instruction integer_dup_items} {:instruction print_integer} {:instruction integer_shove} {:instruction integer_yank} {:instruction print_integer} {:instruction integer_yank} {:instruction integer_max} {:instruction integer_max} {:instruction integer_fromfloat} {:instruction integer_stackdepth} {:instruction float_add} {:instruction in2} {:instruction float_mult} {:instruction integer_yank} {:instruction integer_max} {:instruction float_sin} {:instruction integer_stackdepth} {:instruction float_add} {:instruction in2} {:instruction float_mult} {:instruction integer_stackdepth} {:instruction float_frominteger} {:instruction integer_fromfloat} {:instruction integer_mod} {:instruction print_integer} {:instruction float_min} {:instruction integer_stackdepth} {:instruction 6} {:instruction tag_float_172} {:instruction integer_inc} {:instruction float_swap} {:instruction print_integer})
Best program: (integer_inc float_add float_yank float_min float_rot integer_dup float_rot float_flush float_mult float_mult float_sub print_float integer_div 27 float_sub float_yank integer_sub 9 float_yankdup integer_stackdepth float_frominteger tag_float_196 float_rot integer_add integer_stackdepth float_add in2 float_mult integer_stackdepth float_frominteger tag_float_196 float_swap float_rot integer_add integer_max float_max integer_stackdepth float_flush in2 float_frominteger print_float integer_dup float_shove float_shove integer_inc float_mod integer_dup integer_dup_items print_integer integer_shove integer_yank print_integer integer_yank integer_max integer_max integer_fromfloat integer_stackdepth float_add in2 float_mult integer_yank integer_max float_sin integer_stackdepth float_add in2 float_mult integer_stackdepth float_frominteger integer_fromfloat integer_mod print_integer float_min integer_stackdepth 6 tag_float_172 integer_inc float_swap print_integer)
Errors: [16.5677 9 6.0519 8 10.506 10 63.29 7 46.4786 10 27.3773 7 21.7659 9 62.2423 12 65.7283 10 19.35 7 66.3997 9 44.1628 9 91.2753 9 86.3488 9 73.351 10 39.0737 11 55.3057 9 90.0769 11 57.4296 10 21.0794 7 84.5969 10 9.4308 7 55.9558 10 20.9037 7 43.5424 9]
Total: 1404.2905
Mean: 28.08581
Genome size: 79
Size: 80
Percent parens: 0.013
--- Population Statistics ---
Average total errors in population: 4200.220187400002
Median total errors in population: 1409.2905
Error averages by case: (161.94009520000165 9.494 153.46556570000064 8.794 157.12615859999784 10.232 144.73615649999866 7.755 186.35589110000117 10.44 111.87186759999794 7.674 106.74171799999931 9.522 143.20922399999998 11.768 134.4447615000007 10.227 104.33296140000125 7.826 146.34152079999947 9.416 126.84661940000166 9.314 222.79707560000145 9.609 218.54800710000288 9.553 142.32476779999828 10.335 172.5131177000001 11.29 136.19558749999877 9.612 167.93635689999795 10.987 198.11817150000138 10.402 105.55957470000087 7.307 217.3159610000017 10.498 156.16610760000106 7.862 196.2444910999986 10.231 166.34099689999852 7.966 185.25143220000206 9.382)
Error minima by case: (15.5611 8 5.9826 7 9.4994 8 22.3187 6 37.562 8 26.3648 6 5.2616 8 20.2348 9 24.272 8 0.6736 6 3.3706 7 7.1659 7 2.2516 7 4.3252 7 16.6493 8 3.0501 10 24.3091 8 9.9206 8 57.3603 9 4.103 6 8.5663 9 8.4142 6 55.8865 8 20.8344 6 43.4731 8)
Average genome size in population (length): 86.935
Average program size in population (points): 87.935
Average percent parens in population: 0.011
Minimum age in population: 124.4762504365485
Maximum age in population: 129.0777863532891
Average age in population: 127.1037155146229
Median age in population: 127.1338340487856
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 6
Genome diversity (% unique Plush genomes):	 0.912
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 6
Syntactic diversity (% unique Push programs):	 0.912
Total error diversity:				 0.264
Error (vector) diversity:			 0.312
Behavioral diversity:				 0.313
--- Run Statistics ---
Number of program evaluations used so far: 92000
Number of point (instruction) evaluations so far: 209802231
--- Timings ---
Current time: 1529615536582 milliseconds
Total Time:         383.3 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       127.6 seconds, 33.3%
Fitness Testing:    202.0 seconds, 52.7%
Report:              53.6 seconds, 14.0%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 91
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 92
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 92
;;******************************
;; -*- Number IO problem report - generation 92
Test total error for best: 59998.23050000004
Test mean error for best: 29.99912
;;------------------------------
Outputs of best individual on training cases:
Correct output: -57.4559422311 | Program output: -74.023617    
Correct output: -71.0754923621 | Program output: -65.023617    
Correct output: -66.5176295557 | Program output: -77.023617    
Correct output: 149.3187378    | Program output: 86.028727     
Correct output: -36.5450493525 | Program output: -83.023617    
Correct output: 75.4021928097  | Program output: 48.024907     
Correct output: 52.2615929867  | Program output: 74.027527     
Correct output: -19.2178367434 | Program output: 43.024417     
Correct output: 66.7518906772  | Program output: 1.023617      
Correct output: 7.673605441    | Program output: 27.023607     
Correct output: 23.6294031682  | Program output: 90.029107     
Correct output: -6.1389033433  | Program output: 38.023927     
Correct output: 9.2516366816   | Program output: -82.023627    
Correct output: 31.3251776267  | Program output: -55.023627    
Correct output: 73.3746496408  | Program output: 0.023607      
Correct output: 20.0500553336  | Program output: -19.023627    
Correct output: -23.2820697498 | Program output: 32.023627     
Correct output: 120.1004999359 | Program output: 30.023607     
Correct output: -155.453212395 | Program output: -98.023617    
Correct output: 31.10301576    | Program output: 10.023617     
Correct output: 45.5733057121  | Program output: -39.023607    
Correct output: -68.592783645  | Program output: -78.023607    
Correct output: -125.979392023 | Program output: -70.023627    
Correct output: -91.9273649148 | Program output: -71.023617    
Correct output: -92.5660607267 | Program output: -49.023627    
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_dup_times} {:instruction float_add} {:instruction print_float} {:instruction integer_dup} {:instruction float_min} {:instruction float_dup_times} {:instruction float_inc} {:instruction float_dup} {:instruction float_mult} {:instruction float_mult} {:instruction float_sub} {:instruction integer_dup_items} {:instruction print_float} {:instruction integer_div} {:instruction 27} {:instruction float_sub} {:instruction float_yankdup} {:instruction integer_sub} {:instruction float_yankdup} {:instruction integer_sub} {:instruction 9} {:instruction float_yankdup} {:instruction integer_stackdepth} {:instruction float_frominteger} {:instruction tag_float_196} {:instruction float_swap} {:instruction float_rot} {:instruction integer_add} {:instruction integer_stackdepth} {:instruction float_add} {:instruction in2} {:instruction float_mult} {:instruction integer_stackdepth} {:instruction float_frominteger} {:instruction tag_float_196} {:instruction float_swap} {:instruction float_rot} {:instruction integer_add} {:instruction integer_max} {:instruction float_max} {:instruction integer_stackdepth} {:instruction tag_float_969} {:instruction in2} {:instruction float_frominteger} {:instruction print_float} {:instruction integer_dup} {:instruction float_shove} {:instruction float_dup_items} {:instruction integer_inc} {:instruction print_integer} {:instruction integer_shove} {:instruction float_min} {:instruction print_integer} {:instruction integer_yank} {:instruction integer_stackdepth} {:instruction float_add} {:instruction in2} {:instruction float_mult} {:instruction integer_yank} {:instruction integer_max} {:instruction float_sin} {:instruction integer_stackdepth} {:instruction float_add} {:instruction in2} {:instruction float_mult} {:instruction integer_stackdepth} {:instruction float_frominteger} {:instruction integer_fromfloat} {:instruction integer_mod} {:instruction print_integer} {:instruction float_min} {:instruction integer_stackdepth} {:instruction tag_float_291} {:instruction 6} {:instruction tag_float_376} {:instruction integer_inc} {:instruction float_swap} {:instruction print_integer})
Best program: (float_dup_times float_add print_float integer_dup float_min float_dup_times float_inc float_dup float_mult float_mult float_sub integer_dup_items print_float integer_div 27 float_sub float_yankdup integer_sub float_yankdup integer_sub 9 float_yankdup integer_stackdepth float_frominteger tag_float_196 float_swap float_rot integer_add integer_stackdepth float_add in2 float_mult integer_stackdepth float_frominteger tag_float_196 float_swap float_rot integer_add integer_max float_max integer_stackdepth tag_float_969 in2 float_frominteger print_float integer_dup float_shove float_dup_items integer_inc print_integer integer_shove float_min print_integer integer_yank integer_stackdepth float_add in2 float_mult integer_yank integer_max float_sin integer_stackdepth float_add in2 float_mult integer_stackdepth float_frominteger integer_fromfloat integer_mod print_integer float_min integer_stackdepth tag_float_291 6 tag_float_376 integer_inc float_swap print_integer)
Errors: [16.5677 9 6.0519 8 10.506 10 63.29 7 46.4786 10 27.3773 7 21.7659 9 62.2423 12 65.7283 10 19.35 7 66.3997 9 44.1628 9 91.2753 9 86.3488 9 73.351 10 39.0737 11 55.3057 9 90.0769 11 57.4296 10 21.0794 7 84.5969 10 9.4308 7 55.9558 10 20.9037 7 43.5424 9]
Total: 1404.2905
Mean: 28.08581
Genome size: 78
Size: 79
Percent parens: 0.013
--- Population Statistics ---
Average total errors in population: 4085.6418322000018
Median total errors in population: 1407.2905
Error averages by case: (164.02651590000158 9.409 156.44292579999998 8.707 159.13594689999812 10.177 131.89643859999845 7.7 188.72732650000108 10.369 98.18762449999856 7.621 94.70589259999913 9.504 131.55049259999925 11.778 125.85741010000095 10.201 92.11627500000037 7.766 135.25365979999918 9.355 114.9009291000009 9.225 225.6284393000012 9.543 221.50118850000283 9.517 131.87992779999902 10.297 169.42119929999964 11.254 125.2678301999988 9.569 155.95127409999856 10.933 200.60800570000148 10.368 91.74513600000061 7.298 220.22927030000147 10.467 158.20708620000102 7.764 198.94527599999867 10.175 169.1749408999985 7.865 188.10982050000192 9.309)
Error minima by case: (16.5452 7 5.9919 7 10.4835 8 61.2814 6 37.545 8 25.3648 6 5.2616 8 20.2623 7 1.0 5 0.6736 7 12.3776 7 7.1783 7 2.2516 7 4.3252 8 0.0 5 1.9499 8 23.2821 7 30.0 7 57.3696 8 4.914 5 9.5359 9 9.4083 6 55.8958 9 20.8437 6 43.4824 7)
Average genome size in population (length): 86.292
Average program size in population (points): 87.292
Average percent parens in population: 0.012
Minimum age in population: 125.8459658681833
Maximum age in population: 130.4792698967901
Average age in population: 128.4442717404216
Median age in population: 128.4859486104802
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 6
Genome diversity (% unique Plush genomes):	 0.896
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 6
Syntactic diversity (% unique Push programs):	 0.896
Total error diversity:				 0.259
Error (vector) diversity:			 0.302
Behavioral diversity:				 0.303
--- Run Statistics ---
Number of program evaluations used so far: 93000
Number of point (instruction) evaluations so far: 211960231
--- Timings ---
Current time: 1529615540933 milliseconds
Total Time:         387.6 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       129.0 seconds, 33.3%
Fitness Testing:    204.5 seconds, 52.7%
Report:              54.0 seconds, 13.9%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 92
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 93
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 93
;;******************************
;; -*- Number IO problem report - generation 93
Test total error for best: 59998.23050000004
Test mean error for best: 29.99912
;;------------------------------
Outputs of best individual on training cases:
Correct output: -57.4559422311 | Program output: -74.023617    
Correct output: -71.0754923621 | Program output: -65.023617    
Correct output: -66.5176295557 | Program output: -77.023617    
Correct output: 149.3187378    | Program output: 86.028727     
Correct output: -36.5450493525 | Program output: -83.023617    
Correct output: 75.4021928097  | Program output: 48.024907     
Correct output: 52.2615929867  | Program output: 74.027527     
Correct output: -19.2178367434 | Program output: 43.024417     
Correct output: 66.7518906772  | Program output: 1.023617      
Correct output: 7.673605441    | Program output: 27.023607     
Correct output: 23.6294031682  | Program output: 90.029107     
Correct output: -6.1389033433  | Program output: 38.023927     
Correct output: 9.2516366816   | Program output: -82.023627    
Correct output: 31.3251776267  | Program output: -55.023627    
Correct output: 73.3746496408  | Program output: 0.023607      
Correct output: 20.0500553336  | Program output: -19.023627    
Correct output: -23.2820697498 | Program output: 32.023627     
Correct output: 120.1004999359 | Program output: 30.023607     
Correct output: -155.453212395 | Program output: -98.023617    
Correct output: 31.10301576    | Program output: 10.023617     
Correct output: 45.5733057121  | Program output: -39.023607    
Correct output: -68.592783645  | Program output: -78.023607    
Correct output: -125.979392023 | Program output: -70.023627    
Correct output: -91.9273649148 | Program output: -71.023617    
Correct output: -92.5660607267 | Program output: -49.023627    
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_inc} {:instruction integer_inc} {:instruction float_add} {:instruction integer_inc} {:instruction float_dup_times} {:instruction float_inc} {:instruction float_dup} {:instruction float_mult} {:instruction float_mult} {:instruction float_sub} {:instruction integer_dup_items} {:instruction float_yankdup} {:instruction float_rot} {:instruction float_dup_times} {:instruction float_rot} {:instruction print_integer} {:instruction float_min} {:instruction float_inc} {:instruction integer_div} {:instruction 27} {:instruction integer_mod} {:instruction float_cos} {:instruction integer_sub} {:instruction 9} {:instruction float_yankdup} {:instruction integer_stackdepth} {:instruction float_frominteger} {:instruction tag_float_196} {:instruction float_swap} {:instruction float_rot} {:instruction integer_add} {:instruction integer_stackdepth} {:instruction float_add} {:instruction in2} {:instruction float_mult} {:instruction integer_stackdepth} {:instruction float_frominteger} {:instruction tag_float_196} {:instruction float_swap} {:instruction float_rot} {:instruction integer_add} {:instruction integer_max} {:instruction float_max} {:instruction integer_stackdepth} {:instruction float_flush} {:instruction in2} {:instruction float_frominteger} {:instruction print_float} {:instruction integer_dup} {:instruction float_shove} {:instruction float_shove} {:instruction integer_inc} {:instruction float_mod} {:instruction integer_dup} {:instruction integer_pop} {:instruction print_integer} {:instruction integer_shove} {:instruction integer_yank} {:instruction print_integer} {:instruction integer_yank} {:instruction integer_max} {:instruction integer_max} {:instruction integer_dup_times} {:instruction integer_stackdepth} {:instruction float_add} {:instruction in2} {:instruction float_mult} {:instruction integer_yank} {:instruction integer_max} {:instruction float_sin} {:instruction integer_stackdepth} {:instruction float_add} {:instruction in2} {:instruction float_mult} {:instruction integer_stackdepth} {:instruction float_frominteger} {:instruction integer_fromfloat} {:instruction integer_mod} {:instruction print_integer} {:instruction float_min} {:instruction integer_stackdepth} {:instruction tag_float_291} {:instruction 6} {:instruction tag_float_291} {:instruction integer_inc} {:instruction float_swap} {:instruction print_integer})
Best program: (integer_inc integer_inc float_add integer_inc float_dup_times float_inc float_dup float_mult float_mult float_sub integer_dup_items float_yankdup float_rot float_dup_times float_rot print_integer float_min float_inc integer_div 27 integer_mod float_cos integer_sub 9 float_yankdup integer_stackdepth float_frominteger tag_float_196 float_swap float_rot integer_add integer_stackdepth float_add in2 float_mult integer_stackdepth float_frominteger tag_float_196 float_swap float_rot integer_add integer_max float_max integer_stackdepth float_flush in2 float_frominteger print_float integer_dup float_shove float_shove integer_inc float_mod integer_dup integer_pop print_integer integer_shove integer_yank print_integer integer_yank integer_max integer_max integer_dup_times integer_stackdepth float_add in2 float_mult integer_yank integer_max float_sin integer_stackdepth float_add in2 float_mult integer_stackdepth float_frominteger integer_fromfloat integer_mod print_integer float_min integer_stackdepth tag_float_291 6 tag_float_291 integer_inc float_swap print_integer)
Errors: [16.5677 9 6.0519 8 10.506 10 63.29 7 46.4786 10 27.3773 7 21.7659 9 62.2423 12 65.7283 10 19.35 7 66.3997 9 44.1628 9 91.2753 9 86.3488 9 73.351 10 39.0737 11 55.3057 9 90.0769 11 57.4296 10 21.0794 7 84.5969 10 9.4308 7 55.9558 10 20.9037 7 43.5424 9]
Total: 1404.2905
Mean: 28.08581
Genome size: 87
Size: 88
Percent parens: 0.011
--- Population Statistics ---
Average total errors in population: 4146.853935600004
Median total errors in population: 1409.2905
Error averages by case: (157.53739470000116 9.475 149.0806978000007 8.791 152.7176469999983 10.189 145.50842249999886 7.733 182.07084300000105 10.404 111.4082078999979 7.638 106.15639729999927 9.494 143.214002 11.738 136.09305570000072 10.21 103.48779440000102 7.859 146.77108179999962 9.413 126.73330390000147 9.285 218.68626220000124 9.619 214.59948880000275 9.522 142.24055299999867 10.32 170.1658319999996 11.282 136.2273305999987 9.636 168.0389549999983 10.958 193.89171780000112 10.388 105.91777380000099 7.302 212.61108210000148 10.481 151.79085790000082 7.845 192.0232347999988 10.184 161.94156089999888 7.963 180.91943870000185 9.292)
Error minima by case: (16.5458 8 5.9827 7 10.4841 8 36.71 6 36.562 8 26.3952 6 21.7407 8 19.2348 9 24.2708 9 0.6736 6 3.3706 8 6.1659 7 2.2516 7 4.3252 8 16.6481 8 3.0501 9 23.3091 8 9.9232 9 57.3605 9 4.103 5 9.5663 9 9.4079 6 55.8867 8 20.8347 6 43.4733 8)
Average genome size in population (length): 86.378
Average program size in population (points): 87.378
Average percent parens in population: 0.012
Minimum age in population: 127.557855708781
Maximum age in population: 131.7851446726389
Average age in population: 129.7641354688423
Median age in population: 129.7355186145657
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 5
Genome diversity (% unique Plush genomes):	 0.911
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 5
Syntactic diversity (% unique Push programs):	 0.911
Total error diversity:				 0.272
Error (vector) diversity:			 0.32
Behavioral diversity:				 0.32
--- Run Statistics ---
Number of program evaluations used so far: 94000
Number of point (instruction) evaluations so far: 214120756
--- Timings ---
Current time: 1529615544848 milliseconds
Total Time:         391.5 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       130.3 seconds, 33.3%
Fitness Testing:    206.5 seconds, 52.8%
Report:              54.5 seconds, 13.9%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 93
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 94
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 94
;;******************************
;; -*- Number IO problem report - generation 94
Test total error for best: 59998.23050000004
Test mean error for best: 29.99912
;;------------------------------
Outputs of best individual on training cases:
Correct output: -57.4559422311 | Program output: -74.023617    
Correct output: -71.0754923621 | Program output: -65.023617    
Correct output: -66.5176295557 | Program output: -77.023617    
Correct output: 149.3187378    | Program output: 86.028727     
Correct output: -36.5450493525 | Program output: -83.023617    
Correct output: 75.4021928097  | Program output: 48.024907     
Correct output: 52.2615929867  | Program output: 74.027527     
Correct output: -19.2178367434 | Program output: 43.024417     
Correct output: 66.7518906772  | Program output: 1.023617      
Correct output: 7.673605441    | Program output: 27.023607     
Correct output: 23.6294031682  | Program output: 90.029107     
Correct output: -6.1389033433  | Program output: 38.023927     
Correct output: 9.2516366816   | Program output: -82.023627    
Correct output: 31.3251776267  | Program output: -55.023627    
Correct output: 73.3746496408  | Program output: 0.023607      
Correct output: 20.0500553336  | Program output: -19.023627    
Correct output: -23.2820697498 | Program output: 32.023627     
Correct output: 120.1004999359 | Program output: 30.023607     
Correct output: -155.453212395 | Program output: -98.023617    
Correct output: 31.10301576    | Program output: 10.023617     
Correct output: 45.5733057121  | Program output: -39.023607    
Correct output: -68.592783645  | Program output: -78.023607    
Correct output: -125.979392023 | Program output: -70.023627    
Correct output: -91.9273649148 | Program output: -71.023617    
Correct output: -92.5660607267 | Program output: -49.023627    
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_inc} {:instruction float_add} {:instruction float_yank} {:instruction float_add} {:instruction float_yank} {:instruction float_dup} {:instruction float_mult} {:instruction float_mult} {:instruction float_yank} {:instruction integer_dup_items} {:instruction integer_dup} {:instruction float_min} {:instruction float_div} {:instruction float_inc} {:instruction float_dup} {:instruction float_mult} {:instruction float_mult} {:instruction float_sub} {:instruction integer_dup_items} {:instruction float_yankdup} {:instruction float_rot} {:instruction float_dup_times} {:instruction float_rot} {:instruction print_integer} {:instruction float_min} {:instruction print_float} {:instruction integer_div} {:instruction 27} {:instruction integer_dup_times} {:instruction float_yankdup} {:instruction integer_sub} {:instruction 9} {:instruction float_yankdup} {:instruction integer_stackdepth} {:instruction float_frominteger} {:instruction tag_float_196} {:instruction float_swap} {:instruction float_rot} {:instruction integer_add} {:instruction integer_stackdepth} {:instruction float_add} {:instruction in2} {:instruction float_mult} {:instruction integer_stackdepth} {:instruction float_frominteger} {:instruction tag_float_316} {:instruction float_swap} {:instruction float_rot} {:instruction integer_add} {:instruction integer_max} {:instruction float_max} {:instruction integer_stackdepth} {:instruction float_flush} {:instruction in2} {:instruction float_frominteger} {:instruction print_float} {:instruction integer_dup} {:instruction float_shove} {:instruction float_shove} {:instruction integer_inc} {:instruction float_mod} {:instruction integer_dup} {:instruction integer_pop} {:instruction print_integer} {:instruction integer_shove} {:instruction integer_yank} {:instruction print_integer} {:instruction integer_yank} {:instruction integer_max} {:instruction integer_max} {:instruction integer_dup_times} {:instruction integer_stackdepth} {:instruction float_add} {:instruction in2} {:instruction float_mult} {:instruction float_min} {:instruction integer_max} {:instruction float_sin} {:instruction integer_stackdepth} {:instruction float_add} {:instruction in2} {:instruction float_mult} {:instruction integer_stackdepth} {:instruction float_frominteger} {:instruction integer_fromfloat} {:instruction integer_mod} {:instruction print_integer} {:instruction float_min} {:instruction integer_stackdepth} {:instruction 6} {:instruction tag_float_291} {:instruction integer_inc} {:instruction float_swap} {:instruction print_integer})
Best program: (integer_inc float_add float_yank float_add float_yank float_dup float_mult float_mult float_yank integer_dup_items integer_dup float_min float_div float_inc float_dup float_mult float_mult float_sub integer_dup_items float_yankdup float_rot float_dup_times float_rot print_integer float_min print_float integer_div 27 integer_dup_times float_yankdup integer_sub 9 float_yankdup integer_stackdepth float_frominteger tag_float_196 float_swap float_rot integer_add integer_stackdepth float_add in2 float_mult integer_stackdepth float_frominteger tag_float_316 float_swap float_rot integer_add integer_max float_max integer_stackdepth float_flush in2 float_frominteger print_float integer_dup float_shove float_shove integer_inc float_mod integer_dup integer_pop print_integer integer_shove integer_yank print_integer integer_yank integer_max integer_max integer_dup_times integer_stackdepth float_add in2 float_mult float_min integer_max float_sin integer_stackdepth float_add in2 float_mult integer_stackdepth float_frominteger integer_fromfloat integer_mod print_integer float_min integer_stackdepth 6 tag_float_291 integer_inc float_swap print_integer)
Errors: [16.5677 9 6.0519 8 10.506 10 63.29 7 46.4786 10 27.3773 7 21.7659 9 62.2423 12 65.7283 10 19.35 7 66.3997 9 44.1628 9 91.2753 9 86.3488 9 73.351 10 39.0737 11 55.3057 9 90.0769 11 57.4296 10 21.0794 7 84.5969 10 9.4308 7 55.9558 10 20.9037 7 43.5424 9]
Total: 1404.2905
Mean: 28.08581
Genome size: 94
Size: 95
Percent parens: 0.011
--- Population Statistics ---
Average total errors in population: 4193.479885000003
Median total errors in population: 1408.2906
Error averages by case: (158.87304810000163 9.439 151.36937030000033 8.753 154.06773579999788 10.194 148.73953789999936 7.713 183.47331770000122 10.409 115.01941009999804 7.667 111.79900919999933 9.481 147.18085720000028 11.729 135.67457400000066 10.196 106.49789330000104 7.787 150.45641690000005 9.398 130.85172440000147 9.272 220.23517900000132 9.572 216.064197100003 9.515 141.50285509999864 10.276 162.0614655999996 11.254 140.06271359999874 9.591 169.3912002999977 10.96 196.05366760000123 10.395 107.87556200000093 7.301 214.7648838000017 10.466 153.09133730000093 7.829 194.23215449999887 10.206 164.25259199999857 7.939 183.2161822000019 9.331)
Error minima by case: (9.4342 8 5.9985 6 10.4841 9 22.3187 6 11.4777 8 26.3952 6 5.2616 8 19.2195 9 24.2773 9 0.6736 6 3.3706 8 6.1416 7 0.2234 7 4.3252 8 16.6544 9 3.0501 9 23.2848 8 6.8995 9 57.3581 9 4.103 6 9.5663 9 9.4079 6 55.9167 8 20.8604 6 43.4891 8)
Average genome size in population (length): 86.043
Average program size in population (points): 87.043
Average percent parens in population: 0.012
Minimum age in population: 128.6015296614391
Maximum age in population: 133.2734841082702
Average age in population: 131.1950950162818
Median age in population: 131.2616334825973
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 6
Genome diversity (% unique Plush genomes):	 0.904
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 6
Syntactic diversity (% unique Push programs):	 0.904
Total error diversity:				 0.255
Error (vector) diversity:			 0.311
Behavioral diversity:				 0.312
--- Run Statistics ---
Number of program evaluations used so far: 95000
Number of point (instruction) evaluations so far: 216273131
--- Timings ---
Current time: 1529615549342 milliseconds
Total Time:         395.8 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       131.9 seconds, 33.3%
Fitness Testing:    208.7 seconds, 52.7%
Report:              55.0 seconds, 13.9%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 94
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 95
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 95
;;******************************
;; -*- Number IO problem report - generation 95
Test total error for best: 59998.23050000004
Test mean error for best: 29.99912
;;------------------------------
Outputs of best individual on training cases:
Correct output: -57.4559422311 | Program output: -74.023617    
Correct output: -71.0754923621 | Program output: -65.023617    
Correct output: -66.5176295557 | Program output: -77.023617    
Correct output: 149.3187378    | Program output: 86.028727     
Correct output: -36.5450493525 | Program output: -83.023617    
Correct output: 75.4021928097  | Program output: 48.024907     
Correct output: 52.2615929867  | Program output: 74.027527     
Correct output: -19.2178367434 | Program output: 43.024417     
Correct output: 66.7518906772  | Program output: 1.023617      
Correct output: 7.673605441    | Program output: 27.023607     
Correct output: 23.6294031682  | Program output: 90.029107     
Correct output: -6.1389033433  | Program output: 38.023927     
Correct output: 9.2516366816   | Program output: -82.023627    
Correct output: 31.3251776267  | Program output: -55.023627    
Correct output: 73.3746496408  | Program output: 0.023607      
Correct output: 20.0500553336  | Program output: -19.023627    
Correct output: -23.2820697498 | Program output: 32.023627     
Correct output: 120.1004999359 | Program output: 30.023607     
Correct output: -155.453212395 | Program output: -98.023617    
Correct output: 31.10301576    | Program output: 10.023617     
Correct output: 45.5733057121  | Program output: -39.023607    
Correct output: -68.592783645  | Program output: -78.023607    
Correct output: -125.979392023 | Program output: -70.023627    
Correct output: -91.9273649148 | Program output: -71.023617    
Correct output: -92.5660607267 | Program output: -49.023627    
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_inc} {:instruction float_add} {:instruction float_yank} {:instruction integer_dup} {:instruction print_float} {:instruction 27} {:instruction integer_dup_times} {:instruction float_yankdup} {:instruction float_add} {:instruction 9} {:instruction float_yankdup} {:instruction integer_stackdepth} {:instruction float_frominteger} {:instruction tag_float_196} {:instruction float_swap} {:instruction float_rot} {:instruction integer_add} {:instruction integer_stackdepth} {:instruction float_add} {:instruction in2} {:instruction float_mult} {:instruction integer_stackdepth} {:instruction float_frominteger} {:instruction integer_stackdepth} {:instruction float_frominteger} {:instruction tag_float_196} {:instruction float_swap} {:instruction float_rot} {:instruction integer_add} {:instruction integer_max} {:instruction float_mod} {:instruction integer_stackdepth} {:instruction float_flush} {:instruction in2} {:instruction float_frominteger} {:instruction print_float} {:instruction integer_dup} {:instruction integer_fromfloat} {:instruction float_shove} {:instruction integer_inc} {:instruction float_mod} {:instruction print_integer} {:instruction integer_div} {:instruction integer_yank} {:instruction print_integer} {:instruction integer_yank} {:instruction integer_max} {:instruction integer_max} {:instruction integer_fromfloat} {:instruction integer_stackdepth} {:instruction float_add} {:instruction in2} {:instruction float_mult} {:instruction integer_yank} {:instruction integer_max} {:instruction float_sin} {:instruction integer_stackdepth} {:instruction float_add} {:instruction in2} {:instruction float_mult} {:instruction integer_stackdepth} {:instruction float_frominteger} {:instruction integer_fromfloat} {:instruction integer_mod} {:instruction print_integer} {:instruction float_min} {:instruction integer_stackdepth} {:instruction tag_float_291} {:instruction 6} {:instruction tag_float_291} {:instruction integer_inc} {:instruction float_swap} {:instruction print_integer})
Best program: (integer_inc float_add float_yank integer_dup print_float 27 integer_dup_times float_yankdup float_add 9 float_yankdup integer_stackdepth float_frominteger tag_float_196 float_swap float_rot integer_add integer_stackdepth float_add in2 float_mult integer_stackdepth float_frominteger integer_stackdepth float_frominteger tag_float_196 float_swap float_rot integer_add integer_max float_mod integer_stackdepth float_flush in2 float_frominteger print_float integer_dup integer_fromfloat float_shove integer_inc float_mod print_integer integer_div integer_yank print_integer integer_yank integer_max integer_max integer_fromfloat integer_stackdepth float_add in2 float_mult integer_yank integer_max float_sin integer_stackdepth float_add in2 float_mult integer_stackdepth float_frominteger integer_fromfloat integer_mod print_integer float_min integer_stackdepth tag_float_291 6 tag_float_291 integer_inc float_swap print_integer)
Errors: [16.5677 9 6.0519 8 10.506 10 63.29 7 46.4786 10 27.3773 7 21.7659 9 62.2423 12 65.7283 10 19.35 7 66.3997 9 44.1628 9 91.2753 9 86.3488 9 73.351 10 39.0737 11 55.3057 9 90.0769 11 57.4296 10 21.0794 7 84.5969 10 9.4308 7 55.9558 10 20.9037 7 43.5424 9]
Total: 1404.2905
Mean: 28.08581
Genome size: 73
Size: 74
Percent parens: 0.014
--- Population Statistics ---
Average total errors in population: 4041.9845854000005
Median total errors in population: 1409.2905
Error averages by case: (152.30834260000094 9.444 143.6568854000008 8.77 147.34434149999845 10.2 141.66456299999885 7.749 177.2355978000013 10.389 108.3785609999984 7.655 103.38738269999924 9.517 139.66235059999963 11.785 132.98048080000092 10.211 102.4279211000007 7.814 143.63644559999932 9.394 123.16136410000114 9.308 214.46904970000068 9.612 210.23831340000285 9.581 137.9858811999988 10.289 159.67048399999948 11.286 133.4543813999987 9.611 165.88108739999828 10.973 188.64015570000143 10.408 103.96911790000088 7.315 208.9890160000016 10.492 146.39885920000094 7.858 186.93474489999886 10.199 156.59476349999892 7.911 175.83249490000182 9.311)
Error minima by case: (15.5814 8 5.0585 7 9.5197 9 37.6883 6 37.5822 8 26.3517 6 20.7454 8 20.2552 8 1.0 5 0.6736 6 3.6294 8 7.1763 7 2.2516 7 4.3252 8 0.0 5 1.9499 9 24.3193 8 15.9065 8 56.4462 9 4.9344 5 9.5359 8 8.4446 6 54.9724 9 19.9104 6 42.5491 8)
Average genome size in population (length): 86.17
Average program size in population (points): 87.17
Average percent parens in population: 0.012
Minimum age in population: 129.6015296614391
Maximum age in population: 134.6778301102972
Average age in population: 132.5539301786136
Median age in population: 132.6121537098321
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 5
Genome diversity (% unique Plush genomes):	 0.909
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 5
Syntactic diversity (% unique Push programs):	 0.909
Total error diversity:				 0.267
Error (vector) diversity:			 0.315
Behavioral diversity:				 0.315
--- Run Statistics ---
Number of program evaluations used so far: 96000
Number of point (instruction) evaluations so far: 218429031
--- Timings ---
Current time: 1529615553252 milliseconds
Total Time:         399.9 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       133.3 seconds, 33.3%
Fitness Testing:    210.8 seconds, 52.7%
Report:              55.7 seconds, 13.9%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 95
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 96
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 96
;;******************************
;; -*- Number IO problem report - generation 96
Test total error for best: 59998.23050000004
Test mean error for best: 29.99912
;;------------------------------
Outputs of best individual on training cases:
Correct output: -57.4559422311 | Program output: -74.023617    
Correct output: -71.0754923621 | Program output: -65.023617    
Correct output: -66.5176295557 | Program output: -77.023617    
Correct output: 149.3187378    | Program output: 86.028727     
Correct output: -36.5450493525 | Program output: -83.023617    
Correct output: 75.4021928097  | Program output: 48.024907     
Correct output: 52.2615929867  | Program output: 74.027527     
Correct output: -19.2178367434 | Program output: 43.024417     
Correct output: 66.7518906772  | Program output: 1.023617      
Correct output: 7.673605441    | Program output: 27.023607     
Correct output: 23.6294031682  | Program output: 90.029107     
Correct output: -6.1389033433  | Program output: 38.023927     
Correct output: 9.2516366816   | Program output: -82.023627    
Correct output: 31.3251776267  | Program output: -55.023627    
Correct output: 73.3746496408  | Program output: 0.023607      
Correct output: 20.0500553336  | Program output: -19.023627    
Correct output: -23.2820697498 | Program output: 32.023627     
Correct output: 120.1004999359 | Program output: 30.023607     
Correct output: -155.453212395 | Program output: -98.023617    
Correct output: 31.10301576    | Program output: 10.023617     
Correct output: 45.5733057121  | Program output: -39.023607    
Correct output: -68.592783645  | Program output: -78.023607    
Correct output: -125.979392023 | Program output: -70.023627    
Correct output: -91.9273649148 | Program output: -71.023617    
Correct output: -92.5660607267 | Program output: -49.023627    
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_add} {:instruction float_yank} {:instruction integer_dup} {:instruction float_min} {:instruction integer_add} {:instruction float_inc} {:instruction float_dup} {:instruction float_mult} {:instruction float_mult} {:instruction float_dup_times} {:instruction float_rot} {:instruction print_integer} {:instruction float_dec} {:instruction 27} {:instruction float_div} {:instruction integer_sub} {:instruction float_yankdup} {:instruction integer_sub} {:instruction 9} {:instruction float_yankdup} {:instruction integer_stackdepth} {:instruction float_frominteger} {:instruction tag_float_196} {:instruction float_swap} {:instruction float_rot} {:instruction integer_add} {:instruction integer_stackdepth} {:instruction float_add} {:instruction in2} {:instruction float_mult} {:instruction integer_stackdepth} {:instruction float_frominteger} {:instruction tag_float_196} {:instruction float_swap} {:instruction float_rot} {:instruction integer_add} {:instruction integer_max} {:instruction float_max} {:instruction integer_stackdepth} {:instruction tag_float_969} {:instruction in2} {:instruction float_frominteger} {:instruction print_float} {:instruction integer_dup} {:instruction float_shove} {:instruction tag_float_180} {:instruction integer_inc} {:instruction print_integer} {:instruction integer_shove} {:instruction float_min} {:instruction print_integer} {:instruction print_integer} {:instruction integer_shove} {:instruction float_min} {:instruction print_integer} {:instruction integer_yank} {:instruction float_max} {:instruction float_add} {:instruction in2} {:instruction float_mult} {:instruction integer_yank} {:instruction integer_max} {:instruction float_sin} {:instruction integer_stackdepth} {:instruction float_add} {:instruction in2} {:instruction float_mult} {:instruction integer_stackdepth} {:instruction float_frominteger} {:instruction integer_fromfloat} {:instruction integer_mod} {:instruction print_integer} {:instruction float_min} {:instruction integer_stackdepth} {:instruction tag_float_291} {:instruction 6} {:instruction tag_float_291} {:instruction integer_inc} {:instruction float_swap} {:instruction print_integer})
Best program: (float_add float_yank integer_dup float_min integer_add float_inc float_dup float_mult float_mult float_dup_times float_rot print_integer float_dec 27 float_div integer_sub float_yankdup integer_sub 9 float_yankdup integer_stackdepth float_frominteger tag_float_196 float_swap float_rot integer_add integer_stackdepth float_add in2 float_mult integer_stackdepth float_frominteger tag_float_196 float_swap float_rot integer_add integer_max float_max integer_stackdepth tag_float_969 in2 float_frominteger print_float integer_dup float_shove tag_float_180 integer_inc print_integer integer_shove float_min print_integer print_integer integer_shove float_min print_integer integer_yank float_max float_add in2 float_mult integer_yank integer_max float_sin integer_stackdepth float_add in2 float_mult integer_stackdepth float_frominteger integer_fromfloat integer_mod print_integer float_min integer_stackdepth tag_float_291 6 tag_float_291 integer_inc float_swap print_integer)
Errors: [16.5677 9 6.0519 8 10.506 10 63.29 7 46.4786 10 27.3773 7 21.7659 9 62.2423 12 65.7283 10 19.35 7 66.3997 9 44.1628 9 91.2753 9 86.3488 9 73.351 10 39.0737 11 55.3057 9 90.0769 11 57.4296 10 21.0794 7 84.5969 10 9.4308 7 55.9558 10 20.9037 7 43.5424 9]
Total: 1404.2905
Mean: 28.08581
Genome size: 80
Size: 81
Percent parens: 0.012
--- Population Statistics ---
Average total errors in population: 4369.825649000006
Median total errors in population: 1409.2905
Error averages by case: (172.34848500000174 9.47 164.94049540000043 8.794 167.54072859999786 10.219 148.7526712999987 7.684 196.00211130000108 10.436 115.17843349999792 7.665 111.99949199999912 9.519 149.35663290000014 11.781 134.68221050000065 10.189 109.51812450000119 7.802 150.19926909999955 9.404 132.38949330000153 9.278 232.24483870000168 9.601 227.99786060000287 9.556 134.96915569999862 10.326 177.18538989999956 11.3 142.52760469999896 9.61 171.33042779999835 10.993 208.76438290000144 10.389 110.79458490000087 7.292 227.45699750000165 10.487 166.036454400001 7.857 207.1094630999985 10.224 177.4935190999984 7.951 195.798822300002 9.381)
Error minima by case: (16.5541 8 5.9928 6 10.4894 8 36.7049 6 39.5672 8 25.3952 6 21.7485 8 20.3053 8 24.2598 7 0.6736 6 0.6294 8 7.2163 7 2.2516 7 4.3225 8 16.6261 7 3.0501 9 24.3504 8 9.9226 9 57.3704 9 4.1019 5 8.5663 8 9.4092 6 55.8966 9 20.8446 6 43.4833 8)
Average genome size in population (length): 85.36
Average program size in population (points): 86.36
Average percent parens in population: 0.012
Minimum age in population: 130.9720784810158
Maximum age in population: 136.0986261832937
Average age in population: 133.9027062022615
Median age in population: 133.9241114188661
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 6
Genome diversity (% unique Plush genomes):	 0.889
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 6
Syntactic diversity (% unique Push programs):	 0.889
Total error diversity:				 0.267
Error (vector) diversity:			 0.313
Behavioral diversity:				 0.313
--- Run Statistics ---
Number of program evaluations used so far: 97000
Number of point (instruction) evaluations so far: 220565181
--- Timings ---
Current time: 1529615557304 milliseconds
Total Time:         404.0 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       134.7 seconds, 33.3%
Fitness Testing:    212.9 seconds, 52.7%
Report:              56.2 seconds, 13.9%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 96
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 97
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 97
;;******************************
;; -*- Number IO problem report - generation 97
Test total error for best: 59998.23050000004
Test mean error for best: 29.99912
;;------------------------------
Outputs of best individual on training cases:
Correct output: -57.4559422311 | Program output: -74.023617    
Correct output: -71.0754923621 | Program output: -65.023617    
Correct output: -66.5176295557 | Program output: -77.023617    
Correct output: 149.3187378    | Program output: 86.028727     
Correct output: -36.5450493525 | Program output: -83.023617    
Correct output: 75.4021928097  | Program output: 48.024907     
Correct output: 52.2615929867  | Program output: 74.027527     
Correct output: -19.2178367434 | Program output: 43.024417     
Correct output: 66.7518906772  | Program output: 1.023617      
Correct output: 7.673605441    | Program output: 27.023607     
Correct output: 23.6294031682  | Program output: 90.029107     
Correct output: -6.1389033433  | Program output: 38.023927     
Correct output: 9.2516366816   | Program output: -82.023627    
Correct output: 31.3251776267  | Program output: -55.023627    
Correct output: 73.3746496408  | Program output: 0.023607      
Correct output: 20.0500553336  | Program output: -19.023627    
Correct output: -23.2820697498 | Program output: 32.023627     
Correct output: 120.1004999359 | Program output: 30.023607     
Correct output: -155.453212395 | Program output: -98.023617    
Correct output: 31.10301576    | Program output: 10.023617     
Correct output: 45.5733057121  | Program output: -39.023607    
Correct output: -68.592783645  | Program output: -78.023607    
Correct output: -125.979392023 | Program output: -70.023627    
Correct output: -91.9273649148 | Program output: -71.023617    
Correct output: -92.5660607267 | Program output: -49.023627    
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_inc} {:instruction float_add} {:instruction float_yank} {:instruction integer_inc} {:instruction float_dec} {:instruction float_rot} {:instruction print_integer} {:instruction float_min} {:instruction print_float} {:instruction integer_div} {:instruction 27} {:instruction float_sub} {:instruction float_yankdup} {:instruction integer_sub} {:instruction 9} {:instruction float_yankdup} {:instruction integer_stackdepth} {:instruction float_frominteger} {:instruction tag_float_196} {:instruction float_swap} {:instruction float_yankdup} {:instruction integer_stackdepth} {:instruction float_frominteger} {:instruction tag_float_196} {:instruction float_swap} {:instruction float_rot} {:instruction integer_add} {:instruction integer_stackdepth} {:instruction float_add} {:instruction in2} {:instruction float_mult} {:instruction float_rot} {:instruction integer_add} {:instruction integer_max} {:instruction float_max} {:instruction integer_stackdepth} {:instruction float_flush} {:instruction in2} {:instruction float_frominteger} {:instruction print_float} {:instruction integer_dup} {:instruction float_shove} {:instruction float_shove} {:instruction integer_inc} {:instruction float_mod} {:instruction integer_dup} {:instruction integer_dup_items} {:instruction print_integer} {:instruction integer_shove} {:instruction integer_yank} {:instruction print_integer} {:instruction integer_yank} {:instruction integer_max} {:instruction integer_max} {:instruction integer_fromfloat} {:instruction integer_stackdepth} {:instruction float_add} {:instruction in2} {:instruction float_rot} {:instruction integer_yank} {:instruction integer_max} {:instruction float_sin} {:instruction integer_stackdepth} {:instruction float_add} {:instruction in2} {:instruction float_mult} {:instruction integer_stackdepth} {:instruction float_frominteger} {:instruction integer_fromfloat} {:instruction integer_mod} {:instruction print_integer} {:instruction float_min} {:instruction integer_stackdepth} {:instruction tag_float_291} {:instruction 6} {:instruction tag_float_172} {:instruction integer_inc} {:instruction float_swap} {:instruction print_integer})
Best program: (integer_inc float_add float_yank integer_inc float_dec float_rot print_integer float_min print_float integer_div 27 float_sub float_yankdup integer_sub 9 float_yankdup integer_stackdepth float_frominteger tag_float_196 float_swap float_yankdup integer_stackdepth float_frominteger tag_float_196 float_swap float_rot integer_add integer_stackdepth float_add in2 float_mult float_rot integer_add integer_max float_max integer_stackdepth float_flush in2 float_frominteger print_float integer_dup float_shove float_shove integer_inc float_mod integer_dup integer_dup_items print_integer integer_shove integer_yank print_integer integer_yank integer_max integer_max integer_fromfloat integer_stackdepth float_add in2 float_rot integer_yank integer_max float_sin integer_stackdepth float_add in2 float_mult integer_stackdepth float_frominteger integer_fromfloat integer_mod print_integer float_min integer_stackdepth tag_float_291 6 tag_float_172 integer_inc float_swap print_integer)
Errors: [16.5677 9 6.0519 8 10.506 10 63.29 7 46.4786 10 27.3773 7 21.7659 9 62.2423 12 65.7283 10 19.35 7 66.3997 9 44.1628 9 91.2753 9 86.3488 9 73.351 10 39.0737 11 55.3057 9 90.0769 11 57.4296 10 21.0794 7 84.5969 10 9.4308 7 55.9558 10 20.9037 7 43.5424 9]
Total: 1404.2905
Mean: 28.08581
Genome size: 79
Size: 80
Percent parens: 0.013
--- Population Statistics ---
Average total errors in population: 3687.8997930000005
Median total errors in population: 1404.2905
Error averages by case: (136.9246018000003 9.388 127.16585660000153 8.691 131.90576659999826 10.178 130.24548379999814 7.623 162.23163850000108 10.352 95.48580959999839 7.599 91.3311608999993 9.438 128.17550109999902 11.779 120.71405950000116 10.199 87.35574270000046 7.72 131.21554559999865 9.372 111.40553550000125 9.258 200.0625179000004 9.525 195.77537090000294 9.494 124.87302449999886 10.306 141.6347665999985 11.242 121.79456899999853 9.541 152.89659589999857 10.938 173.92977330000141 10.317 88.68839770000098 7.273 193.06020180000144 10.451 130.92929900000092 7.75 172.1702452999989 10.178 141.29253789999873 7.849 160.88079100000172 9.294)
Error minima by case: (15.5441 8 6.0033 7 9.4824 9 62.2917 6 36.5822 8 26.3952 6 21.7408 8 19.263 9 24.2809 9 0.6736 6 3.3706 8 6.1792 7 2.2516 7 3.7025 7 16.6581 8 0.9499 8 23.3193 9 84.0935 9 57.381 9 3.9147 6 9.5663 9 8.4072 6 55.9071 8 20.8552 6 43.4938 8)
Average genome size in population (length): 85.098
Average program size in population (points): 86.098
Average percent parens in population: 0.012
Minimum age in population: 132.8726887977169
Maximum age in population: 137.1730343258217
Average age in population: 135.3156258059644
Median age in population: 135.3243167835254
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 8
Genome diversity (% unique Plush genomes):	 0.872
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 8
Syntactic diversity (% unique Push programs):	 0.872
Total error diversity:				 0.242
Error (vector) diversity:			 0.281
Behavioral diversity:				 0.281
--- Run Statistics ---
Number of program evaluations used so far: 98000
Number of point (instruction) evaluations so far: 222694731
--- Timings ---
Current time: 1529615561161 milliseconds
Total Time:         407.8 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       136.0 seconds, 33.4%
Fitness Testing:    214.9 seconds, 52.7%
Report:              56.7 seconds, 13.9%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 97
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 98
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 98
;;******************************
;; -*- Number IO problem report - generation 98
Test total error for best: 59998.23050000004
Test mean error for best: 29.99912
;;------------------------------
Outputs of best individual on training cases:
Correct output: -57.4559422311 | Program output: -74.023617    
Correct output: -71.0754923621 | Program output: -65.023617    
Correct output: -66.5176295557 | Program output: -77.023617    
Correct output: 149.3187378    | Program output: 86.028727     
Correct output: -36.5450493525 | Program output: -83.023617    
Correct output: 75.4021928097  | Program output: 48.024907     
Correct output: 52.2615929867  | Program output: 74.027527     
Correct output: -19.2178367434 | Program output: 43.024417     
Correct output: 66.7518906772  | Program output: 1.023617      
Correct output: 7.673605441    | Program output: 27.023607     
Correct output: 23.6294031682  | Program output: 90.029107     
Correct output: -6.1389033433  | Program output: 38.023927     
Correct output: 9.2516366816   | Program output: -82.023627    
Correct output: 31.3251776267  | Program output: -55.023627    
Correct output: 73.3746496408  | Program output: 0.023607      
Correct output: 20.0500553336  | Program output: -19.023627    
Correct output: -23.2820697498 | Program output: 32.023627     
Correct output: 120.1004999359 | Program output: 30.023607     
Correct output: -155.453212395 | Program output: -98.023617    
Correct output: 31.10301576    | Program output: 10.023617     
Correct output: 45.5733057121  | Program output: -39.023607    
Correct output: -68.592783645  | Program output: -78.023607    
Correct output: -125.979392023 | Program output: -70.023627    
Correct output: -91.9273649148 | Program output: -71.023617    
Correct output: -92.5660607267 | Program output: -49.023627    
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_inc} {:instruction float_add} {:instruction integer_inc} {:instruction float_add} {:instruction integer_sub} {:instruction integer_dup_times} {:instruction float_inc} {:instruction float_dup} {:instruction float_mult} {:instruction float_mult} {:instruction float_sub} {:instruction integer_dup_items} {:instruction float_yankdup} {:instruction float_rot} {:instruction float_dup_times} {:instruction float_rot} {:instruction print_integer} {:instruction float_min} {:instruction print_float} {:instruction integer_div} {:instruction 27} {:instruction float_div} {:instruction float_yankdup} {:instruction integer_mult} {:instruction 9} {:instruction float_yankdup} {:instruction integer_stackdepth} {:instruction float_frominteger} {:instruction tag_float_196} {:instruction float_swap} {:instruction float_rot} {:instruction integer_add} {:instruction integer_stackdepth} {:instruction float_add} {:instruction in2} {:instruction float_mult} {:instruction integer_stackdepth} {:instruction float_frominteger} {:instruction tag_float_196} {:instruction float_swap} {:instruction float_rot} {:instruction integer_add} {:instruction integer_max} {:instruction float_max} {:instruction integer_stackdepth} {:instruction float_flush} {:instruction in2} {:instruction float_frominteger} {:instruction print_float} {:instruction integer_dup} {:instruction integer_inc} {:instruction float_mod} {:instruction integer_dup} {:instruction integer_dup_items} {:instruction print_integer} {:instruction integer_shove} {:instruction integer_yank} {:instruction print_integer} {:instruction integer_yank} {:instruction integer_max} {:instruction integer_max} {:instruction integer_fromfloat} {:instruction integer_stackdepth} {:instruction float_add} {:instruction in2} {:instruction float_mult} {:instruction integer_yank} {:instruction integer_max} {:instruction float_sin} {:instruction integer_stackdepth} {:instruction float_add} {:instruction in2} {:instruction float_mult} {:instruction integer_stackdepth} {:instruction float_frominteger} {:instruction integer_fromfloat} {:instruction integer_mod} {:instruction print_integer} {:instruction float_min} {:instruction integer_stackdepth} {:instruction tag_float_291} {:instruction 6} {:instruction tag_float_291} {:instruction integer_inc} {:instruction float_swap} {:instruction print_integer})
Best program: (integer_inc float_add integer_inc float_add integer_sub integer_dup_times float_inc float_dup float_mult float_mult float_sub integer_dup_items float_yankdup float_rot float_dup_times float_rot print_integer float_min print_float integer_div 27 float_div float_yankdup integer_mult 9 float_yankdup integer_stackdepth float_frominteger tag_float_196 float_swap float_rot integer_add integer_stackdepth float_add in2 float_mult integer_stackdepth float_frominteger tag_float_196 float_swap float_rot integer_add integer_max float_max integer_stackdepth float_flush in2 float_frominteger print_float integer_dup integer_inc float_mod integer_dup integer_dup_items print_integer integer_shove integer_yank print_integer integer_yank integer_max integer_max integer_fromfloat integer_stackdepth float_add in2 float_mult integer_yank integer_max float_sin integer_stackdepth float_add in2 float_mult integer_stackdepth float_frominteger integer_fromfloat integer_mod print_integer float_min integer_stackdepth tag_float_291 6 tag_float_291 integer_inc float_swap print_integer)
Errors: [16.5677 9 6.0519 8 10.506 10 63.29 7 46.4786 10 27.3773 7 21.7659 9 62.2423 12 65.7283 10 19.35 7 66.3997 9 44.1628 9 91.2753 9 86.3488 9 73.351 10 39.0737 11 55.3057 9 90.0769 11 57.4296 10 21.0794 7 84.5969 10 9.4308 7 55.9558 10 20.9037 7 43.5424 9]
Total: 1404.2905
Mean: 28.08581
Genome size: 86
Size: 87
Percent parens: 0.011
--- Population Statistics ---
Average total errors in population: 4294.569367700005
Median total errors in population: 1405.7904500000002
Error averages by case: (162.6565222000013 9.459 155.25768430000042 8.746 157.8827841999981 10.235 151.75531549999917 7.682 186.9706374000011 10.41 119.02493489999807 7.651 114.83355759999921 9.518 150.75043140000037 11.766 139.10182790000067 10.201 112.13659870000119 7.778 153.76129889999973 9.396 134.68853200000123 9.285 223.361569900001 9.55 219.10202340000276 9.544 146.06622089999857 10.267 170.27165569999957 11.262 144.86470739999893 9.576 174.92833349999796 10.966 199.87488170000123 10.39 112.76938420000089 7.324 217.66935910000146 10.466 156.800085000001 7.825 198.1357177999987 10.201 168.07023749999848 7.906 187.0730666000019 9.358)
Error minima by case: (16.5458 7 5.9801 7 10.4841 8 22.3187 6 37.562 8 27.3066 6 6.8622 8 20.2348 9 21.3525 8 0.6736 7 3.3706 8 7.1659 7 0.2236 7 4.2682 7 16.659 7 2.0331 9 24.3091 8 13.1005 9 57.3578 8 4.056 5 0.174 9 9.4079 7 55.884 9 20.8319 6 43.4706 8)
Average genome size in population (length): 84.482
Average program size in population (points): 85.482
Average percent parens in population: 0.012
Minimum age in population: 134.1635197421392
Maximum age in population: 138.7889798534984
Average age in population: 136.7428329441501
Median age in population: 136.7769615963027
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 7
Genome diversity (% unique Plush genomes):	 0.885
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 7
Syntactic diversity (% unique Push programs):	 0.885
Total error diversity:				 0.251
Error (vector) diversity:			 0.299
Behavioral diversity:				 0.299
--- Run Statistics ---
Number of program evaluations used so far: 99000
Number of point (instruction) evaluations so far: 224808606
--- Timings ---
Current time: 1529615565098 milliseconds
Total Time:         411.7 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       137.4 seconds, 33.4%
Fitness Testing:    217.0 seconds, 52.7%
Report:              57.2 seconds, 13.9%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 98
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 99
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 99
;;******************************
;; -*- Number IO problem report - generation 99
Test total error for best: 59998.23050000004
Test mean error for best: 29.99912
;;------------------------------
Outputs of best individual on training cases:
Correct output: -57.4559422311 | Program output: -74.023617    
Correct output: -71.0754923621 | Program output: -65.023617    
Correct output: -66.5176295557 | Program output: -77.023617    
Correct output: 149.3187378    | Program output: 86.028727     
Correct output: -36.5450493525 | Program output: -83.023617    
Correct output: 75.4021928097  | Program output: 48.024907     
Correct output: 52.2615929867  | Program output: 74.027527     
Correct output: -19.2178367434 | Program output: 43.024417     
Correct output: 66.7518906772  | Program output: 1.023617      
Correct output: 7.673605441    | Program output: 27.023607     
Correct output: 23.6294031682  | Program output: 90.029107     
Correct output: -6.1389033433  | Program output: 38.023927     
Correct output: 9.2516366816   | Program output: -82.023627    
Correct output: 31.3251776267  | Program output: -55.023627    
Correct output: 73.3746496408  | Program output: 0.023607      
Correct output: 20.0500553336  | Program output: -19.023627    
Correct output: -23.2820697498 | Program output: 32.023627     
Correct output: 120.1004999359 | Program output: 30.023607     
Correct output: -155.453212395 | Program output: -98.023617    
Correct output: 31.10301576    | Program output: 10.023617     
Correct output: 45.5733057121  | Program output: -39.023607    
Correct output: -68.592783645  | Program output: -78.023607    
Correct output: -125.979392023 | Program output: -70.023627    
Correct output: -91.9273649148 | Program output: -71.023617    
Correct output: -92.5660607267 | Program output: -49.023627    
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_dup_times} {:instruction float_add} {:instruction float_yank} {:instruction integer_dup} {:instruction float_min} {:instruction integer_shove} {:instruction float_mult} {:instruction float_sub} {:instruction integer_dup_items} {:instruction print_integer} {:instruction float_min} {:instruction print_float} {:instruction integer_inc} {:instruction 27} {:instruction float_sub} {:instruction float_yankdup} {:instruction integer_fromfloat} {:instruction 9} {:instruction float_yankdup} {:instruction integer_stackdepth} {:instruction float_frominteger} {:instruction tag_float_196} {:instruction tag_float_196} {:instruction float_swap} {:instruction float_rot} {:instruction integer_add} {:instruction integer_stackdepth} {:instruction float_add} {:instruction in2} {:instruction float_mult} {:instruction integer_stackdepth} {:instruction float_frominteger} {:instruction tag_float_196} {:instruction float_swap} {:instruction float_rot} {:instruction integer_add} {:instruction integer_max} {:instruction float_max} {:instruction integer_stackdepth} {:instruction float_flush} {:instruction in2} {:instruction float_frominteger} {:instruction print_float} {:instruction integer_dup} {:instruction integer_fromfloat} {:instruction float_shove} {:instruction integer_add} {:instruction float_mod} {:instruction integer_dup} {:instruction integer_dup_items} {:instruction print_integer} {:instruction float_pop} {:instruction integer_yank} {:instruction print_integer} {:instruction integer_yank} {:instruction integer_max} {:instruction integer_max} {:instruction integer_fromfloat} {:instruction float_shove} {:instruction float_div} {:instruction float_mult} {:instruction integer_max} {:instruction float_sin} {:instruction integer_stackdepth} {:instruction float_add} {:instruction in2} {:instruction float_mult} {:instruction integer_stackdepth} {:instruction float_frominteger} {:instruction integer_fromfloat} {:instruction integer_mod} {:instruction print_integer} {:instruction float_min} {:instruction 6} {:instruction tag_float_291} {:instruction integer_inc} {:instruction float_swap} {:instruction print_integer})
Best program: (float_dup_times float_add float_yank integer_dup float_min integer_shove float_mult float_sub integer_dup_items print_integer float_min print_float integer_inc 27 float_sub float_yankdup integer_fromfloat 9 float_yankdup integer_stackdepth float_frominteger tag_float_196 tag_float_196 float_swap float_rot integer_add integer_stackdepth float_add in2 float_mult integer_stackdepth float_frominteger tag_float_196 float_swap float_rot integer_add integer_max float_max integer_stackdepth float_flush in2 float_frominteger print_float integer_dup integer_fromfloat float_shove integer_add float_mod integer_dup integer_dup_items print_integer float_pop integer_yank print_integer integer_yank integer_max integer_max integer_fromfloat float_shove float_div float_mult integer_max float_sin integer_stackdepth float_add in2 float_mult integer_stackdepth float_frominteger integer_fromfloat integer_mod print_integer float_min 6 tag_float_291 integer_inc float_swap print_integer)
Errors: [16.5677 9 6.0519 8 10.506 10 63.29 7 46.4786 10 27.3773 7 21.7659 9 62.2423 12 65.7283 10 19.35 7 66.3997 9 44.1628 9 91.2753 9 86.3488 9 73.351 10 39.0737 11 55.3057 9 90.0769 11 57.4296 10 21.0794 7 84.5969 10 9.4308 7 55.9558 10 20.9037 7 43.5424 9]
Total: 1404.2905
Mean: 28.08581
Genome size: 78
Size: 79
Percent parens: 0.013
--- Population Statistics ---
Average total errors in population: 4120.587759400005
Median total errors in population: 1407.2905
Error averages by case: (155.04173930000115 9.49 146.6671019000009 8.765 150.27911659999816 10.199 147.5921723999992 7.701 179.40096170000115 10.416 112.9730602999983 7.665 108.64127349999929 9.493 144.30839870000005 11.745 137.4335602000008 10.209 104.44604870000094 7.811 147.1795834999997 9.423 127.9327858000013 9.273 215.68807900000112 9.573 211.51304010000274 9.518 142.39255659999867 10.293 161.44667869999964 11.236 138.24739619999886 9.589 169.37554609999802 10.978 191.82803910000123 10.394 107.1121626000007 7.299 208.67253700000163 10.447 149.30031980000092 7.838 189.88515719999864 10.197 159.68026799999842 7.953 176.73717640000172 9.308)
Error minima by case: (15.5814 8 5.9945 6 9.5197 8 62.2814 6 37.545 8 26.3648 6 5.2616 8 20.2178 9 24.2648 9 0.6736 6 3.3776 8 7.1589 7 0.2234 7 3.7018 7 16.6321 8 3.0501 9 24.3021 9 84.0935 9 57.3722 9 3.914 5 9.5663 9 8.4446 6 55.8984 7 20.8463 6 43.485 8)
Average genome size in population (length): 84.328
Average program size in population (points): 85.328
Average percent parens in population: 0.012
Minimum age in population: 135.415719557607
Maximum age in population: 140.2949604080852
Average age in population: 138.128502443578
Median age in population: 138.1883715317093
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 5
Genome diversity (% unique Plush genomes):	 0.904
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 5
Syntactic diversity (% unique Push programs):	 0.904
Total error diversity:				 0.254
Error (vector) diversity:			 0.306
Behavioral diversity:				 0.306
--- Run Statistics ---
Number of program evaluations used so far: 100000
Number of point (instruction) evaluations so far: 226918606
--- Timings ---
Current time: 1529615569041 milliseconds
Total Time:         415.7 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       138.9 seconds, 33.4%
Fitness Testing:    219.0 seconds, 52.7%
Report:              57.7 seconds, 13.9%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 99
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 100
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 100
;;******************************
;; -*- Number IO problem report - generation 100
Test total error for best: 59998.23050000004
Test mean error for best: 29.99912
;;------------------------------
Outputs of best individual on training cases:
Correct output: -57.4559422311 | Program output: -74.023617    
Correct output: -71.0754923621 | Program output: -65.023617    
Correct output: -66.5176295557 | Program output: -77.023617    
Correct output: 149.3187378    | Program output: 86.028727     
Correct output: -36.5450493525 | Program output: -83.023617    
Correct output: 75.4021928097  | Program output: 48.024907     
Correct output: 52.2615929867  | Program output: 74.027527     
Correct output: -19.2178367434 | Program output: 43.024417     
Correct output: 66.7518906772  | Program output: 1.023617      
Correct output: 7.673605441    | Program output: 27.023607     
Correct output: 23.6294031682  | Program output: 90.029107     
Correct output: -6.1389033433  | Program output: 38.023927     
Correct output: 9.2516366816   | Program output: -82.023627    
Correct output: 31.3251776267  | Program output: -55.023627    
Correct output: 73.3746496408  | Program output: 0.023607      
Correct output: 20.0500553336  | Program output: -19.023627    
Correct output: -23.2820697498 | Program output: 32.023627     
Correct output: 120.1004999359 | Program output: 30.023607     
Correct output: -155.453212395 | Program output: -98.023617    
Correct output: 31.10301576    | Program output: 10.023617     
Correct output: 45.5733057121  | Program output: -39.023607    
Correct output: -68.592783645  | Program output: -78.023607    
Correct output: -125.979392023 | Program output: -70.023627    
Correct output: -91.9273649148 | Program output: -71.023617    
Correct output: -92.5660607267 | Program output: -49.023627    
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_inc} {:instruction tagged_169} {:instruction float_add} {:instruction float_add} {:instruction integer_fromfloat} {:instruction float_add} {:instruction integer_sub} {:instruction integer_dup_times} {:instruction float_min} {:instruction float_dup_times} {:instruction float_dec} {:instruction float_yankdup} {:instruction float_rot} {:instruction float_dup_times} {:instruction float_rot} {:instruction float_min} {:instruction integer_fromfloat} {:instruction integer_div} {:instruction 27} {:instruction 9} {:instruction integer_add} {:instruction integer_stackdepth} {:instruction float_add} {:instruction in2} {:instruction tag_float_196} {:instruction float_swap} {:instruction float_rot} {:instruction integer_add} {:instruction integer_max} {:instruction integer_max} {:instruction float_max} {:instruction integer_stackdepth} {:instruction float_min} {:instruction in2} {:instruction float_frominteger} {:instruction print_float} {:instruction integer_dup} {:instruction float_yankdup} {:instruction float_shove} {:instruction integer_inc} {:instruction float_mod} {:instruction integer_dup} {:instruction integer_dup_items} {:instruction print_integer} {:instruction integer_shove} {:instruction integer_yank} {:instruction print_integer} {:instruction integer_yank} {:instruction float_swap} {:instruction integer_max} {:instruction integer_fromfloat} {:instruction integer_stackdepth} {:instruction float_add} {:instruction in2} {:instruction print_float} {:instruction integer_yank} {:instruction integer_max} {:instruction float_sin} {:instruction float_stackdepth} {:instruction float_add} {:instruction in2} {:instruction float_mult} {:instruction integer_stackdepth} {:instruction float_frominteger} {:instruction integer_stackdepth} {:instruction float_frominteger} {:instruction integer_fromfloat} {:instruction integer_mod} {:instruction print_integer} {:instruction float_dec} {:instruction integer_dup} {:instruction tag_float_291} {:instruction 7} {:instruction float_swap} {:instruction print_integer})
Best program: (integer_inc tagged_169 float_add float_add integer_fromfloat float_add integer_sub integer_dup_times float_min float_dup_times float_dec float_yankdup float_rot float_dup_times float_rot float_min integer_fromfloat integer_div 27 9 integer_add integer_stackdepth float_add in2 tag_float_196 float_swap float_rot integer_add integer_max integer_max float_max integer_stackdepth float_min in2 float_frominteger print_float integer_dup float_yankdup float_shove integer_inc float_mod integer_dup integer_dup_items print_integer integer_shove integer_yank print_integer integer_yank float_swap integer_max integer_fromfloat integer_stackdepth float_add in2 print_float integer_yank integer_max float_sin float_stackdepth float_add in2 float_mult integer_stackdepth float_frominteger integer_stackdepth float_frominteger integer_fromfloat integer_mod print_integer float_dec integer_dup tag_float_291 7 float_swap print_integer)
Errors: [16.5677 9 6.0519 8 10.506 10 63.29 7 46.4786 10 27.3773 7 21.7659 9 62.2423 12 65.7283 10 19.35 7 66.3997 9 44.1628 9 91.2753 9 86.3488 9 73.351 10 39.0737 11 55.3057 9 90.0769 11 57.4296 10 21.0794 7 84.5969 10 9.4308 7 55.9558 10 20.9037 7 43.5424 9]
Total: 1404.2905
Mean: 28.08581
Genome size: 75
Size: 76
Percent parens: 0.013
--- Population Statistics ---
Average total errors in population: 4451.933424800003
Median total errors in population: 1409.2905
Error averages by case: (176.58725250000197 9.469 168.0973213000002 8.79 171.74417929999805 10.165 149.28397439999884 7.668 200.9818093000011 10.392 117.45154369999791 7.615 111.22574299999917 9.48 148.48938660000005 11.75 143.27962440000033 10.17 109.80945650000099 7.794 151.0318963999994 9.367 132.11704280000168 9.243 237.48842360000125 9.568 233.47946320000287 9.547 150.1892381999985 10.266 181.8974960000001 11.283 142.33854379999883 9.586 173.96601869999802 10.955 211.58086490000125 10.405 111.34607310000095 7.291 232.22571190000167 10.473 170.82405060000087 7.844 209.9919157999986 10.183 180.62106569999858 7.907 199.346329100002 9.328)
Error minima by case: (16.5441 8 5.9828 6 10.4824 8 36.7025 6 37.5824 8 26.3952 6 5.2616 8 20.2633 9 24.2773 9 0.3334 6 3.3706 8 7.1793 7 1.2246 7 4.3252 7 16.6544 8 3.0501 9 24.3194 9 9.9261 8 57.3605 9 4.103 6 9.5663 9 9.4072 6 55.8867 8 20.8346 6 43.4733 7)
Average genome size in population (length): 84.695
Average program size in population (points): 85.695
Average percent parens in population: 0.012
Minimum age in population: 136.415719557607
Maximum age in population: 141.3704011623766
Average age in population: 139.503640059334
Median age in population: 139.5601507242512
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 7
Genome diversity (% unique Plush genomes):	 0.901
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 7
Syntactic diversity (% unique Push programs):	 0.901
Total error diversity:				 0.26
Error (vector) diversity:			 0.314
Behavioral diversity:				 0.314
--- Run Statistics ---
Number of program evaluations used so far: 101000
Number of point (instruction) evaluations so far: 229038031
--- Timings ---
Current time: 1529615573302 milliseconds
Total Time:         419.9 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       140.3 seconds, 33.4%
Fitness Testing:    221.2 seconds, 52.7%
Report:              58.2 seconds, 13.9%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 100
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 101
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 101
;;******************************
;; -*- Number IO problem report - generation 101
Test total error for best: 59998.23050000004
Test mean error for best: 29.99912
;;------------------------------
Outputs of best individual on training cases:
Correct output: -57.4559422311 | Program output: -74.023617    
Correct output: -71.0754923621 | Program output: -65.023617    
Correct output: -66.5176295557 | Program output: -77.023617    
Correct output: 149.3187378    | Program output: 86.028727     
Correct output: -36.5450493525 | Program output: -83.023617    
Correct output: 75.4021928097  | Program output: 48.024907     
Correct output: 52.2615929867  | Program output: 74.027527     
Correct output: -19.2178367434 | Program output: 43.024417     
Correct output: 66.7518906772  | Program output: 1.023617      
Correct output: 7.673605441    | Program output: 27.023607     
Correct output: 23.6294031682  | Program output: 90.029107     
Correct output: -6.1389033433  | Program output: 38.023927     
Correct output: 9.2516366816   | Program output: -82.023627    
Correct output: 31.3251776267  | Program output: -55.023627    
Correct output: 73.3746496408  | Program output: 0.023607      
Correct output: 20.0500553336  | Program output: -19.023627    
Correct output: -23.2820697498 | Program output: 32.023627     
Correct output: 120.1004999359 | Program output: 30.023607     
Correct output: -155.453212395 | Program output: -98.023617    
Correct output: 31.10301576    | Program output: 10.023617     
Correct output: 45.5733057121  | Program output: -39.023607    
Correct output: -68.592783645  | Program output: -78.023607    
Correct output: -125.979392023 | Program output: -70.023627    
Correct output: -91.9273649148 | Program output: -71.023617    
Correct output: -92.5660607267 | Program output: -49.023627    
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_inc} {:instruction float_add} {:instruction print_float} {:instruction integer_dup} {:instruction float_min} {:instruction float_dup_times} {:instruction float_inc} {:instruction float_dup} {:instruction float_mult} {:instruction float_mult} {:instruction float_dec} {:instruction float_yank} {:instruction integer_sub} {:instruction float_min} {:instruction float_sub} {:instruction integer_dup_items} {:instruction float_sub} {:instruction integer_dup_items} {:instruction float_rot} {:instruction float_dup_times} {:instruction print_float} {:instruction integer_div} {:instruction 27} {:instruction float_sub} {:instruction float_yankdup} {:instruction integer_sub} {:instruction 9} {:instruction float_yankdup} {:instruction integer_stackdepth} {:instruction float_frominteger} {:instruction tag_float_196} {:instruction float_swap} {:instruction float_rot} {:instruction integer_add} {:instruction integer_stackdepth} {:instruction float_add} {:instruction in2} {:instruction float_mult} {:instruction integer_stackdepth} {:instruction float_frominteger} {:instruction tag_float_196} {:instruction float_cos} {:instruction float_rot} {:instruction integer_add} {:instruction integer_max} {:instruction float_max} {:instruction integer_stackdepth} {:instruction float_flush} {:instruction in2} {:instruction float_frominteger} {:instruction print_float} {:instruction integer_dup} {:instruction float_shove} {:instruction float_shove} {:instruction integer_inc} {:instruction float_mod} {:instruction integer_dup} {:instruction integer_dup_items} {:instruction print_integer} {:instruction integer_shove} {:instruction integer_yank} {:instruction print_integer} {:instruction integer_fromfloat} {:instruction integer_max} {:instruction integer_max} {:instruction float_yank} {:instruction integer_fromfloat} {:instruction in1} {:instruction integer_max} {:instruction float_sin} {:instruction integer_stackdepth} {:instruction float_add} {:instruction in2} {:instruction float_mult} {:instruction integer_stackdepth} {:instruction float_frominteger} {:instruction integer_fromfloat} {:instruction integer_mod} {:instruction print_integer} {:instruction float_min} {:instruction -26.211280151150902} {:instruction tag_float_291} {:instruction 6} {:instruction tag_float_291} {:instruction integer_inc} {:instruction float_swap} {:instruction print_integer})
Best program: (integer_inc float_add print_float integer_dup float_min float_dup_times float_inc float_dup float_mult float_mult float_dec float_yank integer_sub float_min float_sub integer_dup_items float_sub integer_dup_items float_rot float_dup_times print_float integer_div 27 float_sub float_yankdup integer_sub 9 float_yankdup integer_stackdepth float_frominteger tag_float_196 float_swap float_rot integer_add integer_stackdepth float_add in2 float_mult integer_stackdepth float_frominteger tag_float_196 float_cos float_rot integer_add integer_max float_max integer_stackdepth float_flush in2 float_frominteger print_float integer_dup float_shove float_shove integer_inc float_mod integer_dup integer_dup_items print_integer integer_shove integer_yank print_integer integer_fromfloat integer_max integer_max float_yank integer_fromfloat in1 integer_max float_sin integer_stackdepth float_add in2 float_mult integer_stackdepth float_frominteger integer_fromfloat integer_mod print_integer float_min -26.211280151150902 tag_float_291 6 tag_float_291 integer_inc float_swap print_integer)
Errors: [16.5677 9 6.0519 8 10.506 10 63.29 7 46.4786 10 27.3773 7 21.7659 9 62.2423 12 65.7283 10 19.35 7 66.3997 9 44.1628 9 91.2753 9 86.3488 9 73.351 10 39.0737 11 55.3057 9 90.0769 11 57.4296 10 21.0794 7 84.5969 10 9.4308 7 55.9558 10 20.9037 7 43.5424 9]
Total: 1404.2905
Mean: 28.08581
Genome size: 87
Size: 88
Percent parens: 0.011
--- Population Statistics ---
Average total errors in population: 4197.841595800003
Median total errors in population: 1408.2906
Error averages by case: (161.59251860000165 9.453 154.12737520000036 8.764 156.78833979999763 10.198 143.53958789999913 7.703 186.1199390000013 10.414 110.35164649999793 7.63 106.24054549999916 9.492 142.69595510000022 11.753 139.0186832000005 10.218 103.62720520000113 7.798 146.00790639999965 9.377 126.29714830000155 9.29 222.81618600000124 9.577 218.6840225000031 9.553 145.90192039999826 10.309 170.53679439999928 11.277 136.59469509999866 9.597 167.34169089999824 10.966 198.5824511000014 10.418 103.2364147000009 7.313 216.38943250000185 10.515 154.73233130000116 7.818 196.8953021999984 10.198 166.89592309999813 7.913 185.94658090000223 9.337)
Error minima by case: (16.5458 8 6.0028 7 10.4841 8 37.3075 6 36.562 9 1.3277 6 5.2616 8 19.2348 8 24.2581 8 0.6736 6 3.3706 8 6.1659 7 0.1582 7 4.3252 8 16.6254 9 3.0501 10 23.3091 8 64.0442 8 57.3805 9 4.103 5 8.5563 8 9.4079 6 55.9067 8 20.8546 6 43.4933 8)
Average genome size in population (length): 84.929
Average program size in population (points): 85.929
Average percent parens in population: 0.012
Minimum age in population: 137.465806473868
Maximum age in population: 142.5843238447312
Average age in population: 140.8407065070054
Median age in population: 140.9114312086713
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 5
Genome diversity (% unique Plush genomes):	 0.902
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 5
Syntactic diversity (% unique Push programs):	 0.902
Total error diversity:				 0.244
Error (vector) diversity:			 0.292
Behavioral diversity:				 0.292
--- Run Statistics ---
Number of program evaluations used so far: 102000
Number of point (instruction) evaluations so far: 231163681
--- Timings ---
Current time: 1529615577390 milliseconds
Total Time:         424.1 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       141.7 seconds, 33.4%
Fitness Testing:    223.4 seconds, 52.7%
Report:              58.8 seconds, 13.9%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 101
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 102
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 102
;;******************************
;; -*- Number IO problem report - generation 102
Test total error for best: 59998.23050000004
Test mean error for best: 29.99912
;;------------------------------
Outputs of best individual on training cases:
Correct output: -57.4559422311 | Program output: -74.023617    
Correct output: -71.0754923621 | Program output: -65.023617    
Correct output: -66.5176295557 | Program output: -77.023617    
Correct output: 149.3187378    | Program output: 86.028727     
Correct output: -36.5450493525 | Program output: -83.023617    
Correct output: 75.4021928097  | Program output: 48.024907     
Correct output: 52.2615929867  | Program output: 74.027527     
Correct output: -19.2178367434 | Program output: 43.024417     
Correct output: 66.7518906772  | Program output: 1.023617      
Correct output: 7.673605441    | Program output: 27.023607     
Correct output: 23.6294031682  | Program output: 90.029107     
Correct output: -6.1389033433  | Program output: 38.023927     
Correct output: 9.2516366816   | Program output: -82.023627    
Correct output: 31.3251776267  | Program output: -55.023627    
Correct output: 73.3746496408  | Program output: 0.023607      
Correct output: 20.0500553336  | Program output: -19.023627    
Correct output: -23.2820697498 | Program output: 32.023627     
Correct output: 120.1004999359 | Program output: 30.023607     
Correct output: -155.453212395 | Program output: -98.023617    
Correct output: 31.10301576    | Program output: 10.023617     
Correct output: 45.5733057121  | Program output: -39.023607    
Correct output: -68.592783645  | Program output: -78.023607    
Correct output: -125.979392023 | Program output: -70.023627    
Correct output: -91.9273649148 | Program output: -71.023617    
Correct output: -92.5660607267 | Program output: -49.023627    
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_inc} {:instruction float_add} {:instruction float_yank} {:instruction float_dup_times} {:instruction float_dup_times} {:instruction integer_shove} {:instruction float_inc} {:instruction float_dup} {:instruction integer_mod} {:instruction float_dup_times} {:instruction print_integer} {:instruction float_dup_times} {:instruction print_float} {:instruction integer_div} {:instruction 27} {:instruction float_sub} {:instruction float_yank} {:instruction integer_sub} {:instruction 9} {:instruction float_yankdup} {:instruction integer_stackdepth} {:instruction float_frominteger} {:instruction tag_float_196} {:instruction float_swap} {:instruction float_rot} {:instruction integer_add} {:instruction integer_stackdepth} {:instruction float_add} {:instruction in2} {:instruction float_mult} {:instruction integer_stackdepth} {:instruction float_frominteger} {:instruction tag_float_196} {:instruction integer_swap} {:instruction float_rot} {:instruction integer_add} {:instruction integer_max} {:instruction float_max} {:instruction integer_stackdepth} {:instruction float_flush} {:instruction in2} {:instruction float_frominteger} {:instruction print_float} {:instruction float_inc} {:instruction float_shove} {:instruction float_shove} {:instruction integer_inc} {:instruction float_mod} {:instruction print_integer} {:instruction float_swap} {:instruction integer_yank} {:instruction print_integer} {:instruction integer_inc} {:instruction integer_max} {:instruction integer_max} {:instruction integer_pop} {:instruction integer_stackdepth} {:instruction in2} {:instruction in2} {:instruction float_mult} {:instruction integer_yank} {:instruction integer_max} {:instruction float_sin} {:instruction integer_max} {:instruction float_sin} {:instruction integer_stackdepth} {:instruction float_add} {:instruction in2} {:instruction float_mult} {:instruction integer_stackdepth} {:instruction float_frominteger} {:instruction integer_stackdepth} {:instruction float_frominteger} {:instruction integer_fromfloat} {:instruction integer_mod} {:instruction print_integer} {:instruction float_dec} {:instruction integer_div} {:instruction tag_float_291} {:instruction 7} {:instruction float_swap} {:instruction print_integer})
Best program: (integer_inc float_add float_yank float_dup_times float_dup_times integer_shove float_inc float_dup integer_mod float_dup_times print_integer float_dup_times print_float integer_div 27 float_sub float_yank integer_sub 9 float_yankdup integer_stackdepth float_frominteger tag_float_196 float_swap float_rot integer_add integer_stackdepth float_add in2 float_mult integer_stackdepth float_frominteger tag_float_196 integer_swap float_rot integer_add integer_max float_max integer_stackdepth float_flush in2 float_frominteger print_float float_inc float_shove float_shove integer_inc float_mod print_integer float_swap integer_yank print_integer integer_inc integer_max integer_max integer_pop integer_stackdepth in2 in2 float_mult integer_yank integer_max float_sin integer_max float_sin integer_stackdepth float_add in2 float_mult integer_stackdepth float_frominteger integer_stackdepth float_frominteger integer_fromfloat integer_mod print_integer float_dec integer_div tag_float_291 7 float_swap print_integer)
Errors: [16.5677 9 6.0519 8 10.506 10 63.29 7 46.4786 10 27.3773 7 21.7659 9 62.2423 12 65.7283 10 19.35 7 66.3997 9 44.1628 9 91.2753 9 86.3488 9 73.351 10 39.0737 11 55.3057 9 90.0769 11 57.4296 10 21.0794 7 84.5969 10 9.4308 7 55.9558 10 20.9037 7 43.5424 9]
Total: 1404.2905
Mean: 28.08581
Genome size: 82
Size: 83
Percent parens: 0.012
--- Population Statistics ---
Average total errors in population: 4395.5611119000005
Median total errors in population: 1404.2905
Error averages by case: (166.62503290000237 9.503 158.90626490000037 8.727 162.5175956999978 10.246 157.85482479999962 7.67 191.7652610000014 10.422 124.83267169999742 7.652 120.00832249999924 9.472 155.31947730000118 11.763 146.82557109999968 10.17 113.06373800000145 7.73 158.24894860000038 9.399 138.4443951000011 9.276 228.38511030000151 9.506 223.42510960000308 9.496 151.66945049999813 10.262 175.37109750000047 11.257 145.66712969999907 9.58 177.59486679999702 11.018 202.42650810000123 10.397 115.34512860000092 7.291 221.28502530000173 10.431 160.46384810000103 7.81 201.48664729999862 10.214 171.58058879999828 7.902 189.90549770000206 9.349)
Error minima by case: (16.5448 7 5.9921 7 10.4841 9 36.71 6 37.562 9 8.4022 6 21.7391 8 20.2348 6 1.0 4 0.6736 6 0.3706 8 7.1659 6 8.1789 7 4.3252 7 0.0 4 3.0501 8 24.3091 6 9.9226 6 57.3699 8 4.103 5 21.4267 8 9.4079 6 55.896 8 20.844 6 43.4827 8)
Average genome size in population (length): 84.338
Average program size in population (points): 85.338
Average percent parens in population: 0.012
Minimum age in population: 139.1660418231818
Maximum age in population: 144.3213142493184
Average age in population: 142.2231543607607
Median age in population: 142.2654726694995
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 5
Genome diversity (% unique Plush genomes):	 0.887
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 5
Syntactic diversity (% unique Push programs):	 0.887
Total error diversity:				 0.249
Error (vector) diversity:			 0.301
Behavioral diversity:				 0.301
--- Run Statistics ---
Number of program evaluations used so far: 103000
Number of point (instruction) evaluations so far: 233275006
--- Timings ---
Current time: 1529615581437 milliseconds
Total Time:         428.0 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       143.0 seconds, 33.4%
Fitness Testing:    225.6 seconds, 52.7%
Report:              59.3 seconds, 13.9%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 102
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 103
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 103
;;******************************
;; -*- Number IO problem report - generation 103
Test total error for best: 59998.23050000004
Test mean error for best: 29.99912
;;------------------------------
Outputs of best individual on training cases:
Correct output: -57.4559422311 | Program output: -74.023617    
Correct output: -71.0754923621 | Program output: -65.023617    
Correct output: -66.5176295557 | Program output: -77.023617    
Correct output: 149.3187378    | Program output: 86.028727     
Correct output: -36.5450493525 | Program output: -83.023617    
Correct output: 75.4021928097  | Program output: 48.024907     
Correct output: 52.2615929867  | Program output: 74.027527     
Correct output: -19.2178367434 | Program output: 43.024417     
Correct output: 66.7518906772  | Program output: 1.023617      
Correct output: 7.673605441    | Program output: 27.023607     
Correct output: 23.6294031682  | Program output: 90.029107     
Correct output: -6.1389033433  | Program output: 38.023927     
Correct output: 9.2516366816   | Program output: -82.023627    
Correct output: 31.3251776267  | Program output: -55.023627    
Correct output: 73.3746496408  | Program output: 0.023607      
Correct output: 20.0500553336  | Program output: -19.023627    
Correct output: -23.2820697498 | Program output: 32.023627     
Correct output: 120.1004999359 | Program output: 30.023607     
Correct output: -155.453212395 | Program output: -98.023617    
Correct output: 31.10301576    | Program output: 10.023617     
Correct output: 45.5733057121  | Program output: -39.023607    
Correct output: -68.592783645  | Program output: -78.023607    
Correct output: -125.979392023 | Program output: -70.023627    
Correct output: -91.9273649148 | Program output: -71.023617    
Correct output: -92.5660607267 | Program output: -49.023627    
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_div} {:instruction float_add} {:instruction float_rot} {:instruction integer_dup} {:instruction float_min} {:instruction integer_shove} {:instruction float_inc} {:instruction float_dup} {:instruction float_mult} {:instruction float_pop} {:instruction integer_fromfloat} {:instruction integer_dup_items} {:instruction float_yankdup} {:instruction float_frominteger} {:instruction integer_dup_items} {:instruction float_mult} {:instruction integer_min} {:instruction integer_dup_items} {:instruction float_min} {:instruction float_pop} {:instruction integer_fromfloat} {:instruction integer_dup_items} {:instruction float_yankdup} {:instruction float_frominteger} {:instruction float_dup_times} {:instruction float_rot} {:instruction print_integer} {:instruction float_min} {:instruction print_float} {:instruction integer_div} {:instruction 27} {:instruction float_sub} {:instruction float_mult} {:instruction integer_sub} {:instruction 9} {:instruction float_yankdup} {:instruction integer_stackdepth} {:instruction float_frominteger} {:instruction tag_float_196} {:instruction float_swap} {:instruction float_rot} {:instruction integer_add} {:instruction integer_stackdepth} {:instruction float_add} {:instruction in2} {:instruction tag_float_196} {:instruction float_swap} {:instruction float_rot} {:instruction integer_add} {:instruction integer_max} {:instruction float_max} {:instruction integer_stackdepth} {:instruction float_flush} {:instruction in2} {:instruction float_frominteger} {:instruction print_float} {:instruction integer_dup} {:instruction float_shove} {:instruction float_shove} {:instruction integer_inc} {:instruction print_integer} {:instruction integer_shove} {:instruction integer_max} {:instruction integer_yank} {:instruction print_integer} {:instruction integer_yank} {:instruction integer_max} {:instruction integer_max} {:instruction float_sin} {:instruction integer_stackdepth} {:instruction float_add} {:instruction in2} {:instruction float_mult} {:instruction integer_yank} {:instruction integer_max} {:instruction integer_fromfloat} {:instruction integer_stackdepth} {:instruction float_add} {:instruction in2} {:instruction float_mult} {:instruction integer_stackdepth} {:instruction float_frominteger} {:instruction integer_fromfloat} {:instruction integer_mod} {:instruction print_integer} {:instruction float_min} {:instruction integer_stackdepth} {:instruction tag_float_291} {:instruction 6} {:instruction tag_float_291} {:instruction integer_inc} {:instruction float_swap} {:instruction print_integer})
Best program: (float_div float_add float_rot integer_dup float_min integer_shove float_inc float_dup float_mult float_pop integer_fromfloat integer_dup_items float_yankdup float_frominteger integer_dup_items float_mult integer_min integer_dup_items float_min float_pop integer_fromfloat integer_dup_items float_yankdup float_frominteger float_dup_times float_rot print_integer float_min print_float integer_div 27 float_sub float_mult integer_sub 9 float_yankdup integer_stackdepth float_frominteger tag_float_196 float_swap float_rot integer_add integer_stackdepth float_add in2 tag_float_196 float_swap float_rot integer_add integer_max float_max integer_stackdepth float_flush in2 float_frominteger print_float integer_dup float_shove float_shove integer_inc print_integer integer_shove integer_max integer_yank print_integer integer_yank integer_max integer_max float_sin integer_stackdepth float_add in2 float_mult integer_yank integer_max integer_fromfloat integer_stackdepth float_add in2 float_mult integer_stackdepth float_frominteger integer_fromfloat integer_mod print_integer float_min integer_stackdepth tag_float_291 6 tag_float_291 integer_inc float_swap print_integer)
Errors: [16.5677 9 6.0519 8 10.506 10 63.29 7 46.4786 10 27.3773 7 21.7659 9 62.2423 12 65.7283 10 19.35 7 66.3997 9 44.1628 9 91.2753 9 86.3488 9 73.351 10 39.0737 11 55.3057 9 90.0769 11 57.4296 10 21.0794 7 84.5969 10 9.4308 7 55.9558 10 20.9037 7 43.5424 9]
Total: 1404.2905
Mean: 28.08581
Genome size: 93
Size: 94
Percent parens: 0.011
--- Population Statistics ---
Average total errors in population: 4167.647209900003
Median total errors in population: 1404.2905
Error averages by case: (155.22170920000136 9.392 146.60256210000085 8.652 150.4312290999978 10.186 150.16395869999897 7.615 180.05654630000114 10.378 116.3854919999977 7.611 112.29034829999915 9.443 148.65042630000033 11.788 140.48811040000066 10.177 108.78915690000146 7.668 150.91570039999954 9.326 132.29307130000146 9.243 216.4602360000018 9.467 212.79888900000316 9.474 141.8898579999983 10.271 162.94345819999978 11.217 142.2819089999987 9.545 172.80782709999747 10.936 191.4849594000015 10.352 111.20249160000104 7.291 211.20621320000168 10.445 149.24906640000094 7.724 189.63099199999863 10.189 159.3281533999985 7.825 178.57284560000213 9.287)
Error minima by case: (16.5448 8 5.9838 7 10.4841 9 62.2917 5 37.5824 8 26.3952 6 8.2616 8 20.2552 9 24.2717 8 0.6736 7 3.3706 8 7.1763 7 2.2516 7 4.3252 7 16.649 9 3.0501 9 24.3194 9 84.0935 9 57.3615 9 4.103 5 9.5663 9 9.4079 6 55.8867 9 20.8357 6 43.4734 8)
Average genome size in population (length): 84.585
Average program size in population (points): 85.585
Average percent parens in population: 0.012
Minimum age in population: 140.678016015532
Maximum age in population: 145.6333166890574
Average age in population: 143.5691185719089
Median age in population: 143.6006970546245
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 5
Genome diversity (% unique Plush genomes):	 0.877
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 5
Syntactic diversity (% unique Push programs):	 0.877
Total error diversity:				 0.244
Error (vector) diversity:			 0.291
Behavioral diversity:				 0.292
--- Run Statistics ---
Number of program evaluations used so far: 104000
Number of point (instruction) evaluations so far: 235392381
--- Timings ---
Current time: 1529615585258 milliseconds
Total Time:         431.8 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       144.2 seconds, 33.4%
Fitness Testing:    227.6 seconds, 52.7%
Report:              59.9 seconds, 13.9%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 103
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 104
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 104
;;******************************
;; -*- Number IO problem report - generation 104
Test total error for best: 59998.23050000004
Test mean error for best: 29.99912
;;------------------------------
Outputs of best individual on training cases:
Correct output: -57.4559422311 | Program output: -74.023617    
Correct output: -71.0754923621 | Program output: -65.023617    
Correct output: -66.5176295557 | Program output: -77.023617    
Correct output: 149.3187378    | Program output: 86.028727     
Correct output: -36.5450493525 | Program output: -83.023617    
Correct output: 75.4021928097  | Program output: 48.024907     
Correct output: 52.2615929867  | Program output: 74.027527     
Correct output: -19.2178367434 | Program output: 43.024417     
Correct output: 66.7518906772  | Program output: 1.023617      
Correct output: 7.673605441    | Program output: 27.023607     
Correct output: 23.6294031682  | Program output: 90.029107     
Correct output: -6.1389033433  | Program output: 38.023927     
Correct output: 9.2516366816   | Program output: -82.023627    
Correct output: 31.3251776267  | Program output: -55.023627    
Correct output: 73.3746496408  | Program output: 0.023607      
Correct output: 20.0500553336  | Program output: -19.023627    
Correct output: -23.2820697498 | Program output: 32.023627     
Correct output: 120.1004999359 | Program output: 30.023607     
Correct output: -155.453212395 | Program output: -98.023617    
Correct output: 31.10301576    | Program output: 10.023617     
Correct output: 45.5733057121  | Program output: -39.023607    
Correct output: -68.592783645  | Program output: -78.023607    
Correct output: -125.979392023 | Program output: -70.023627    
Correct output: -91.9273649148 | Program output: -71.023617    
Correct output: -92.5660607267 | Program output: -49.023627    
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_inc} {:instruction float_add} {:instruction float_yank} {:instruction float_yank} {:instruction float_add} {:instruction integer_dec} {:instruction integer_dup} {:instruction float_min} {:instruction integer_shove} {:instruction float_inc} {:instruction float_dup_times} {:instruction float_rot} {:instruction print_integer} {:instruction float_mult} {:instruction integer_fromfloat} {:instruction integer_div} {:instruction 27} {:instruction integer_dup_times} {:instruction float_yankdup} {:instruction integer_sub} {:instruction 9} {:instruction float_yankdup} {:instruction integer_stackdepth} {:instruction float_frominteger} {:instruction tag_float_196} {:instruction float_swap} {:instruction float_rot} {:instruction integer_add} {:instruction integer_stackdepth} {:instruction float_add} {:instruction in2} {:instruction integer_add} {:instruction integer_max} {:instruction float_max} {:instruction integer_stackdepth} {:instruction float_flush} {:instruction in2} {:instruction float_frominteger} {:instruction print_float} {:instruction integer_dup} {:instruction integer_fromfloat} {:instruction float_shove} {:instruction integer_add} {:instruction integer_rot} {:instruction print_integer} {:instruction integer_shove} {:instruction integer_yank} {:instruction print_integer} {:instruction integer_yank} {:instruction integer_max} {:instruction float_div} {:instruction integer_stackdepth} {:instruction integer_sub} {:instruction integer_fromfloat} {:instruction integer_stackdepth} {:instruction float_add} {:instruction in2} {:instruction float_mult} {:instruction integer_stackdepth} {:instruction float_rot} {:instruction integer_fromfloat} {:instruction integer_mod} {:instruction print_integer} {:instruction float_min} {:instruction integer_stackdepth} {:instruction tag_float_291} {:instruction 6} {:instruction tag_float_363} {:instruction integer_inc} {:instruction float_swap} {:instruction print_integer})
Best program: (integer_inc float_add float_yank float_yank float_add integer_dec integer_dup float_min integer_shove float_inc float_dup_times float_rot print_integer float_mult integer_fromfloat integer_div 27 integer_dup_times float_yankdup integer_sub 9 float_yankdup integer_stackdepth float_frominteger tag_float_196 float_swap float_rot integer_add integer_stackdepth float_add in2 integer_add integer_max float_max integer_stackdepth float_flush in2 float_frominteger print_float integer_dup integer_fromfloat float_shove integer_add integer_rot print_integer integer_shove integer_yank print_integer integer_yank integer_max float_div integer_stackdepth integer_sub integer_fromfloat integer_stackdepth float_add in2 float_mult integer_stackdepth float_rot integer_fromfloat integer_mod print_integer float_min integer_stackdepth tag_float_291 6 tag_float_363 integer_inc float_swap print_integer)
Errors: [16.5677 9 6.0519 8 10.506 10 63.29 7 46.4786 10 27.3773 7 21.7659 9 62.2423 12 65.7283 10 19.35 7 66.3997 9 44.1628 9 91.2753 9 86.3488 9 73.351 10 39.0737 11 55.3057 9 90.0769 11 57.4296 10 21.0794 7 84.5969 10 9.4308 7 55.9558 10 20.9037 7 43.5424 9]
Total: 1404.2905
Mean: 28.08581
Genome size: 71
Size: 72
Percent parens: 0.014
--- Population Statistics ---
Average total errors in population: 4073.0466790000037
Median total errors in population: 1407.2864000000002
Error averages by case: (149.58118160000106 9.414 140.8660983000009 8.691 144.5807739999981 10.212 147.42934269999873 7.749 174.6518423000012 10.394 114.50782799999774 7.651 109.29745589999924 9.503 146.59074570000018 11.796 138.53075760000036 10.187 107.76322540000109 7.745 149.22126609999935 9.369 129.31064780000162 9.281 212.1202682000012 9.545 207.76535530000288 9.539 143.59894919999854 10.293 157.0880666999993 11.28 139.49949829999863 9.579 170.92771209999788 10.971 185.8373701000015 10.402 106.1870780000009 7.31 206.4961964000016 10.487 143.60897470000097 7.776 184.16503649999862 10.191 153.76810079999854 7.859 173.09790730000194 9.331)
Error minima by case: (16.5458 8 5.9838 7 10.4841 9 22.3187 6 37.5824 8 25.3962 6 16.2346 8 20.2633 9 24.2708 9 0.6736 6 3.3706 8 7.1793 7 8.2143 7 3.7018 8 16.6481 9 3.0501 9 24.3194 9 13.1005 9 47.9436 9 3.914 6 8.5573 9 9.4079 6 18.4698 8 15.5822 6 14.9435 8)
Average genome size in population (length): 85.085
Average program size in population (points): 86.085
Average percent parens in population: 0.012
Minimum age in population: 142.7638544633929
Maximum age in population: 147.0393354383374
Average age in population: 144.9866764835604
Median age in population: 144.9906027087183
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 4
Genome diversity (% unique Plush genomes):	 0.903
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 4
Syntactic diversity (% unique Push programs):	 0.903
Total error diversity:				 0.254
Error (vector) diversity:			 0.301
Behavioral diversity:				 0.301
--- Run Statistics ---
Number of program evaluations used so far: 105000
Number of point (instruction) evaluations so far: 237522256
--- Timings ---
Current time: 1529615589554 milliseconds
Total Time:         436.1 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       145.8 seconds, 33.4%
Fitness Testing:    229.7 seconds, 52.7%
Report:              60.5 seconds, 13.9%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 104
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 105
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 105
;;******************************
;; -*- Number IO problem report - generation 105
Test total error for best: 59998.23050000004
Test mean error for best: 29.99912
;;------------------------------
Outputs of best individual on training cases:
Correct output: -57.4559422311 | Program output: -74.023617    
Correct output: -71.0754923621 | Program output: -65.023617    
Correct output: -66.5176295557 | Program output: -77.023617    
Correct output: 149.3187378    | Program output: 86.028727     
Correct output: -36.5450493525 | Program output: -83.023617    
Correct output: 75.4021928097  | Program output: 48.024907     
Correct output: 52.2615929867  | Program output: 74.027527     
Correct output: -19.2178367434 | Program output: 43.024417     
Correct output: 66.7518906772  | Program output: 1.023617      
Correct output: 7.673605441    | Program output: 27.023607     
Correct output: 23.6294031682  | Program output: 90.029107     
Correct output: -6.1389033433  | Program output: 38.023927     
Correct output: 9.2516366816   | Program output: -82.023627    
Correct output: 31.3251776267  | Program output: -55.023627    
Correct output: 73.3746496408  | Program output: 0.023607      
Correct output: 20.0500553336  | Program output: -19.023627    
Correct output: -23.2820697498 | Program output: 32.023627     
Correct output: 120.1004999359 | Program output: 30.023607     
Correct output: -155.453212395 | Program output: -98.023617    
Correct output: 31.10301576    | Program output: 10.023617     
Correct output: 45.5733057121  | Program output: -39.023607    
Correct output: -68.592783645  | Program output: -78.023607    
Correct output: -125.979392023 | Program output: -70.023627    
Correct output: -91.9273649148 | Program output: -71.023617    
Correct output: -92.5660607267 | Program output: -49.023627    
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_mod} {:instruction integer_pop} {:instruction float_min} {:instruction float_tan} {:instruction float_inc} {:instruction integer_mod} {:instruction integer_inc} {:instruction float_add} {:instruction float_yank} {:instruction integer_dup_items} {:instruction float_mult} {:instruction integer_mod} {:instruction integer_dup} {:instruction float_min} {:instruction float_rot} {:instruction float_min} {:instruction integer_max} {:instruction integer_div} {:instruction 27} {:instruction integer_shove} {:instruction 9} {:instruction float_yankdup} {:instruction float_swap} {:instruction float_rot} {:instruction integer_add} {:instruction integer_stackdepth} {:instruction float_add} {:instruction in2} {:instruction float_swap} {:instruction float_swap} {:instruction float_rot} {:instruction integer_add} {:instruction integer_max} {:instruction float_rot} {:instruction integer_add} {:instruction integer_max} {:instruction float_max} {:instruction integer_stackdepth} {:instruction float_flush} {:instruction in2} {:instruction float_frominteger} {:instruction print_float} {:instruction integer_dup} {:instruction float_shove} {:instruction float_shove} {:instruction integer_inc} {:instruction float_mod} {:instruction integer_dup} {:instruction integer_dup_items} {:instruction print_integer} {:instruction integer_shove} {:instruction integer_yank} {:instruction print_integer} {:instruction float_dec} {:instruction integer_dup_times} {:instruction integer_max} {:instruction integer_fromfloat} {:instruction integer_stackdepth} {:instruction float_add} {:instruction in2} {:instruction float_mult} {:instruction integer_yank} {:instruction integer_yank} {:instruction integer_max} {:instruction integer_max} {:instruction integer_fromfloat} {:instruction integer_stackdepth} {:instruction float_add} {:instruction in2} {:instruction float_mult} {:instruction integer_yank} {:instruction integer_max} {:instruction float_sin} {:instruction integer_stackdepth} {:instruction float_max} {:instruction in2} {:instruction float_mult} {:instruction integer_stackdepth} {:instruction float_frominteger} {:instruction integer_fromfloat} {:instruction integer_mod} {:instruction print_integer} {:instruction float_min} {:instruction integer_div} {:instruction tag_float_291} {:instruction 6} {:instruction tag_float_291} {:instruction integer_inc} {:instruction tag_float_291} {:instruction 6} {:instruction integer_stackdepth} {:instruction tag_float_291} {:instruction 6} {:instruction tag_float_291} {:instruction integer_inc} {:instruction float_swap} {:instruction print_integer})
Best program: (integer_mod integer_pop float_min float_tan float_inc integer_mod integer_inc float_add float_yank integer_dup_items float_mult integer_mod integer_dup float_min float_rot float_min integer_max integer_div 27 integer_shove 9 float_yankdup float_swap float_rot integer_add integer_stackdepth float_add in2 float_swap float_swap float_rot integer_add integer_max float_rot integer_add integer_max float_max integer_stackdepth float_flush in2 float_frominteger print_float integer_dup float_shove float_shove integer_inc float_mod integer_dup integer_dup_items print_integer integer_shove integer_yank print_integer float_dec integer_dup_times integer_max integer_fromfloat integer_stackdepth float_add in2 float_mult integer_yank integer_yank integer_max integer_max integer_fromfloat integer_stackdepth float_add in2 float_mult integer_yank integer_max float_sin integer_stackdepth float_max in2 float_mult integer_stackdepth float_frominteger integer_fromfloat integer_mod print_integer float_min integer_div tag_float_291 6 tag_float_291 integer_inc tag_float_291 6 integer_stackdepth tag_float_291 6 tag_float_291 integer_inc float_swap print_integer)
Errors: [16.5677 9 6.0519 8 10.506 10 63.29 7 46.4786 10 27.3773 7 21.7659 9 62.2423 12 65.7283 10 19.35 7 66.3997 9 44.1628 9 91.2753 9 86.3488 9 73.351 10 39.0737 11 55.3057 9 90.0769 11 57.4296 10 21.0794 7 84.5969 10 9.4308 7 55.9558 10 20.9037 7 43.5424 9]
Total: 1404.2905
Mean: 28.08581
Genome size: 97
Size: 98
Percent parens: 0.010
--- Population Statistics ---
Average total errors in population: 3910.2096733000035
Median total errors in population: 1407.2905
Error averages by case: (142.73758850000078 9.409 134.71780650000102 8.722 137.81201889999838 10.165 141.1410910999992 7.651 168.17699300000115 10.384 106.82975259999832 7.619 103.73377239999935 9.456 140.10583769999988 11.787 130.911005800001 10.171 99.77331560000091 7.754 143.07185589999978 9.394 123.58778430000123 9.286 205.81726360000093 9.557 200.74027650000272 9.497 133.30830009999875 10.295 153.55889779999947 11.255 133.8700962999988 9.556 163.45139439999818 10.935 180.82163880000127 10.378 101.03896670000078 7.278 199.15610550000153 10.45 136.84691370000087 7.776 178.3554308999989 10.198 147.86507759999878 7.903 166.62448910000177 9.28)
Error minima by case: (16.5451 8 5.9862 7 10.4834 8 22.3187 6 37.545 8 26.3952 6 21.7384 8 20.2348 10 24.2708 8 0.6736 6 6.6294 8 7.1659 7 7.2516 7 4.3252 8 16.6481 9 6.9499 9 24.3091 9 6.8995 8 57.3639 9 4.914 6 9.5663 9 9.4072 7 55.8901 9 20.8381 6 43.4768 8)
Average genome size in population (length): 84.915
Average program size in population (points): 85.915
Average percent parens in population: 0.012
Minimum age in population: 143.9569693800728
Maximum age in population: 148.4962397788736
Average age in population: 146.4206835235082
Median age in population: 146.4503307185825
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 7
Genome diversity (% unique Plush genomes):	 0.892
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 7
Syntactic diversity (% unique Push programs):	 0.892
Total error diversity:				 0.244
Error (vector) diversity:			 0.289
Behavioral diversity:				 0.289
--- Run Statistics ---
Number of program evaluations used so far: 106000
Number of point (instruction) evaluations so far: 239647756
--- Timings ---
Current time: 1529615593485 milliseconds
Total Time:         440.1 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       147.2 seconds, 33.4%
Fitness Testing:    231.7 seconds, 52.7%
Report:              61.1 seconds, 13.9%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 105
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 106
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 106
;;******************************
;; -*- Number IO problem report - generation 106
Test total error for best: 59998.23050000004
Test mean error for best: 29.99912
;;------------------------------
Outputs of best individual on training cases:
Correct output: -57.4559422311 | Program output: -74.023617    
Correct output: -71.0754923621 | Program output: -65.023617    
Correct output: -66.5176295557 | Program output: -77.023617    
Correct output: 149.3187378    | Program output: 86.028727     
Correct output: -36.5450493525 | Program output: -83.023617    
Correct output: 75.4021928097  | Program output: 48.024907     
Correct output: 52.2615929867  | Program output: 74.027527     
Correct output: -19.2178367434 | Program output: 43.024417     
Correct output: 66.7518906772  | Program output: 1.023617      
Correct output: 7.673605441    | Program output: 27.023607     
Correct output: 23.6294031682  | Program output: 90.029107     
Correct output: -6.1389033433  | Program output: 38.023927     
Correct output: 9.2516366816   | Program output: -82.023627    
Correct output: 31.3251776267  | Program output: -55.023627    
Correct output: 73.3746496408  | Program output: 0.023607      
Correct output: 20.0500553336  | Program output: -19.023627    
Correct output: -23.2820697498 | Program output: 32.023627     
Correct output: 120.1004999359 | Program output: 30.023607     
Correct output: -155.453212395 | Program output: -98.023617    
Correct output: 31.10301576    | Program output: 10.023617     
Correct output: 45.5733057121  | Program output: -39.023607    
Correct output: -68.592783645  | Program output: -78.023607    
Correct output: -125.979392023 | Program output: -70.023627    
Correct output: -91.9273649148 | Program output: -71.023617    
Correct output: -92.5660607267 | Program output: -49.023627    
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_inc} {:instruction float_dup_times} {:instruction float_dup_times} {:instruction float_mult} {:instruction float_inc} {:instruction float_dup} {:instruction integer_sub} {:instruction integer_add} {:instruction print_integer} {:instruction float_mult} {:instruction integer_dup_items} {:instruction float_yankdup} {:instruction float_pop} {:instruction float_sub} {:instruction integer_dup_items} {:instruction float_yankdup} {:instruction float_rot} {:instruction float_dup_times} {:instruction float_rot} {:instruction print_integer} {:instruction float_min} {:instruction print_float} {:instruction integer_div} {:instruction 27} {:instruction float_sub} {:instruction float_mult} {:instruction integer_sub} {:instruction 9} {:instruction float_yankdup} {:instruction integer_stackdepth} {:instruction float_frominteger} {:instruction tag_float_196} {:instruction float_swap} {:instruction float_rot} {:instruction integer_add} {:instruction integer_stackdepth} {:instruction float_add} {:instruction in2} {:instruction tag_float_196} {:instruction float_swap} {:instruction float_rot} {:instruction integer_add} {:instruction integer_max} {:instruction integer_max} {:instruction float_div} {:instruction integer_stackdepth} {:instruction float_min} {:instruction in2} {:instruction float_frominteger} {:instruction print_float} {:instruction integer_dup} {:instruction float_shove} {:instruction float_shove} {:instruction integer_inc} {:instruction float_mod} {:instruction integer_dup} {:instruction float_add} {:instruction print_integer} {:instruction float_dup_times} {:instruction integer_yank} {:instruction print_integer} {:instruction integer_yank} {:instruction integer_max} {:instruction float_sin} {:instruction float_mult} {:instruction integer_add} {:instruction integer_max} {:instruction integer_yank} {:instruction integer_max} {:instruction float_sin} {:instruction integer_stackdepth} {:instruction float_add} {:instruction in2} {:instruction float_mult} {:instruction integer_stackdepth} {:instruction float_frominteger} {:instruction integer_fromfloat} {:instruction integer_mod} {:instruction print_integer} {:instruction float_min} {:instruction integer_stackdepth} {:instruction tag_float_291} {:instruction 6} {:instruction integer_stackdepth} {:instruction tag_float_291} {:instruction 6} {:instruction tag_float_291} {:instruction integer_inc} {:instruction float_dec} {:instruction print_integer})
Best program: (integer_inc float_dup_times float_dup_times float_mult float_inc float_dup integer_sub integer_add print_integer float_mult integer_dup_items float_yankdup float_pop float_sub integer_dup_items float_yankdup float_rot float_dup_times float_rot print_integer float_min print_float integer_div 27 float_sub float_mult integer_sub 9 float_yankdup integer_stackdepth float_frominteger tag_float_196 float_swap float_rot integer_add integer_stackdepth float_add in2 tag_float_196 float_swap float_rot integer_add integer_max integer_max float_div integer_stackdepth float_min in2 float_frominteger print_float integer_dup float_shove float_shove integer_inc float_mod integer_dup float_add print_integer float_dup_times integer_yank print_integer integer_yank integer_max float_sin float_mult integer_add integer_max integer_yank integer_max float_sin integer_stackdepth float_add in2 float_mult integer_stackdepth float_frominteger integer_fromfloat integer_mod print_integer float_min integer_stackdepth tag_float_291 6 integer_stackdepth tag_float_291 6 tag_float_291 integer_inc float_dec print_integer)
Errors: [16.5677 9 6.0519 8 10.506 10 63.29 7 46.4786 10 27.3773 7 21.7659 9 62.2423 12 65.7283 10 19.35 7 66.3997 9 44.1628 9 91.2753 9 86.3488 9 73.351 10 39.0737 11 55.3057 9 90.0769 11 57.4296 10 21.0794 7 84.5969 10 9.4308 7 55.9558 10 20.9037 7 43.5424 9]
Total: 1404.2905
Mean: 28.08581
Genome size: 90
Size: 91
Percent parens: 0.011
--- Population Statistics ---
Average total errors in population: 4054.169829300005
Median total errors in population: 1407.2864000000002
Error averages by case: (156.13514760000118 9.448 147.7402861000006 8.709 151.33534759999822 10.185 140.22708219999885 7.657 180.51716180000108 10.402 106.37535229999818 7.616 100.91472929999917 9.469 136.97486569999967 11.779 132.89360160000084 10.192 97.62382930000082 7.722 140.78853159999943 9.364 120.4796655000014 9.251 216.9593690000011 9.536 212.77492550000287 9.478 139.04675379999847 10.285 157.9325731999995 11.273 130.78608559999887 9.583 163.17326249999817 10.989 192.76300170000133 10.389 99.22225530000073 7.275 211.80636720000143 10.428 150.35141820000084 7.769 190.88855139999876 10.188 160.62870189999856 7.846 179.68696340000187 9.311)
Error minima by case: (15.5814 8 6.0231 7 9.5197 8 62.2814 6 37.5733 9 26.3648 6 21.7397 8 20.2633 8 24.2703 8 0.6736 6 1.3938 8 7.1793 7 8.1789 6 4.3252 7 16.6381 7 3.0501 10 24.3164 9 84.0935 9 57.4008 9 4.103 5 9.5663 9 8.4446 6 55.927 9 20.875 6 43.5091 8)
Average genome size in population (length): 84.562
Average program size in population (points): 85.562
Average percent parens in population: 0.012
Minimum age in population: 144.9569693800728
Maximum age in population: 149.6131514446591
Average age in population: 147.7134066508631
Median age in population: 147.763306263365
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 8
Genome diversity (% unique Plush genomes):	 0.885
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 8
Syntactic diversity (% unique Push programs):	 0.885
Total error diversity:				 0.211
Error (vector) diversity:			 0.257
Behavioral diversity:				 0.257
--- Run Statistics ---
Number of program evaluations used so far: 107000
Number of point (instruction) evaluations so far: 241764606
--- Timings ---
Current time: 1529615597684 milliseconds
Total Time:         444.2 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       148.7 seconds, 33.5%
Fitness Testing:    233.7 seconds, 52.6%
Report:              61.6 seconds, 13.9%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 106
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 107
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 107
;;******************************
;; -*- Number IO problem report - generation 107
Test total error for best: 59998.23050000004
Test mean error for best: 29.99912
;;------------------------------
Outputs of best individual on training cases:
Correct output: -57.4559422311 | Program output: -74.023617    
Correct output: -71.0754923621 | Program output: -65.023617    
Correct output: -66.5176295557 | Program output: -77.023617    
Correct output: 149.3187378    | Program output: 86.028727     
Correct output: -36.5450493525 | Program output: -83.023617    
Correct output: 75.4021928097  | Program output: 48.024907     
Correct output: 52.2615929867  | Program output: 74.027527     
Correct output: -19.2178367434 | Program output: 43.024417     
Correct output: 66.7518906772  | Program output: 1.023617      
Correct output: 7.673605441    | Program output: 27.023607     
Correct output: 23.6294031682  | Program output: 90.029107     
Correct output: -6.1389033433  | Program output: 38.023927     
Correct output: 9.2516366816   | Program output: -82.023627    
Correct output: 31.3251776267  | Program output: -55.023627    
Correct output: 73.3746496408  | Program output: 0.023607      
Correct output: 20.0500553336  | Program output: -19.023627    
Correct output: -23.2820697498 | Program output: 32.023627     
Correct output: 120.1004999359 | Program output: 30.023607     
Correct output: -155.453212395 | Program output: -98.023617    
Correct output: 31.10301576    | Program output: 10.023617     
Correct output: 45.5733057121  | Program output: -39.023607    
Correct output: -68.592783645  | Program output: -78.023607    
Correct output: -125.979392023 | Program output: -70.023627    
Correct output: -91.9273649148 | Program output: -71.023617    
Correct output: -92.5660607267 | Program output: -49.023627    
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_dup_times} {:instruction integer_dup} {:instruction print_float} {:instruction integer_dup} {:instruction print_integer} {:instruction float_dup_times} {:instruction float_inc} {:instruction float_dup} {:instruction float_mult} {:instruction float_mod} {:instruction float_sub} {:instruction integer_dup_items} {:instruction print_float} {:instruction integer_div} {:instruction 27} {:instruction float_sub} {:instruction float_yankdup} {:instruction integer_sub} {:instruction float_yankdup} {:instruction integer_sub} {:instruction 9} {:instruction float_yankdup} {:instruction integer_stackdepth} {:instruction float_frominteger} {:instruction tag_float_196} {:instruction float_swap} {:instruction float_rot} {:instruction integer_add} {:instruction integer_stackdepth} {:instruction float_add} {:instruction in2} {:instruction float_mult} {:instruction integer_stackdepth} {:instruction float_frominteger} {:instruction tag_float_196} {:instruction float_swap} {:instruction float_rot} {:instruction integer_add} {:instruction integer_max} {:instruction float_max} {:instruction integer_stackdepth} {:instruction float_flush} {:instruction in2} {:instruction float_frominteger} {:instruction print_float} {:instruction integer_dup} {:instruction float_shove} {:instruction float_dup_items} {:instruction integer_inc} {:instruction print_integer} {:instruction integer_shove} {:instruction float_min} {:instruction print_integer} {:instruction integer_yank} {:instruction integer_stackdepth} {:instruction float_add} {:instruction in2} {:instruction float_mult} {:instruction integer_yank} {:instruction integer_max} {:instruction float_swap} {:instruction integer_stackdepth} {:instruction float_add} {:instruction in2} {:instruction float_mult} {:instruction integer_stackdepth} {:instruction float_frominteger} {:instruction integer_fromfloat} {:instruction integer_mod} {:instruction print_integer} {:instruction float_min} {:instruction integer_stackdepth} {:instruction tag_float_291} {:instruction 6} {:instruction tag_float_291} {:instruction integer_inc} {:instruction float_swap} {:instruction print_integer})
Best program: (float_dup_times integer_dup print_float integer_dup print_integer float_dup_times float_inc float_dup float_mult float_mod float_sub integer_dup_items print_float integer_div 27 float_sub float_yankdup integer_sub float_yankdup integer_sub 9 float_yankdup integer_stackdepth float_frominteger tag_float_196 float_swap float_rot integer_add integer_stackdepth float_add in2 float_mult integer_stackdepth float_frominteger tag_float_196 float_swap float_rot integer_add integer_max float_max integer_stackdepth float_flush in2 float_frominteger print_float integer_dup float_shove float_dup_items integer_inc print_integer integer_shove float_min print_integer integer_yank integer_stackdepth float_add in2 float_mult integer_yank integer_max float_swap integer_stackdepth float_add in2 float_mult integer_stackdepth float_frominteger integer_fromfloat integer_mod print_integer float_min integer_stackdepth tag_float_291 6 tag_float_291 integer_inc float_swap print_integer)
Errors: [16.5677 9 6.0519 8 10.506 10 63.29 7 46.4786 10 27.3773 7 21.7659 9 62.2423 12 65.7283 10 19.35 7 66.3997 9 44.1628 9 91.2753 9 86.3488 9 73.351 10 39.0737 11 55.3057 9 90.0769 11 57.4296 10 21.0794 7 84.5969 10 9.4308 7 55.9558 10 20.9037 7 43.5424 9]
Total: 1404.2905
Mean: 28.08581
Genome size: 78
Size: 79
Percent parens: 0.013
--- Population Statistics ---
Average total errors in population: 4004.9209255000046
Median total errors in population: 1406.2906
Error averages by case: (154.4085944000015 9.427 145.82183640000056 8.683 149.48690929999808 10.19 137.6907393999986 7.639 179.18625410000115 10.353 104.44756629999839 7.598 99.12495619999922 9.485 135.84506859999948 11.757 123.61832140000098 10.181 96.46846760000085 7.717 139.40263029999923 9.358 119.28657320000121 9.244 216.23606200000106 9.501 212.04534560000283 9.493 130.5411760999986 10.233 162.60900219999962 11.231 129.68157009999882 9.547 161.43266689999825 10.933 190.6749748000012 10.36 97.03983380000076 7.283 210.09760670000153 10.449 148.51643680000086 7.766 188.9641086999987 10.177 158.7031713999987 7.824 177.88705320000201 9.275)
Error minima by case: (16.5442 8 5.9827 7 10.4825 8 22.3187 6 37.562 8 26.3652 6 21.7387 9 20.2295 9 24.2708 7 0.6736 6 16.6294 8 7.1516 7 1.2246 7 4.3252 7 16.6481 7 6.9499 8 24.2948 9 6.8995 9 57.3605 9 4.914 5 9.5363 9 9.4072 6 55.8867 9 20.8346 6 43.4734 7)
Average genome size in population (length): 84.248
Average program size in population (points): 85.248
Average percent parens in population: 0.012
Minimum age in population: 146.8798779547618
Maximum age in population: 151.4470829812717
Average age in population: 149.0793415384515
Median age in population: 149.1088900757916
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 6
Genome diversity (% unique Plush genomes):	 0.882
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 6
Syntactic diversity (% unique Push programs):	 0.882
Total error diversity:				 0.244
Error (vector) diversity:			 0.277
Behavioral diversity:				 0.278
--- Run Statistics ---
Number of program evaluations used so far: 108000
Number of point (instruction) evaluations so far: 243873481
--- Timings ---
Current time: 1529615601658 milliseconds
Total Time:         448.3 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       150.1 seconds, 33.5%
Fitness Testing:    235.8 seconds, 52.6%
Report:              62.3 seconds, 13.9%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 107
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 108
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 108
;;******************************
;; -*- Number IO problem report - generation 108
Test total error for best: 59998.23050000004
Test mean error for best: 29.99912
;;------------------------------
Outputs of best individual on training cases:
Correct output: -57.4559422311 | Program output: -74.023617    
Correct output: -71.0754923621 | Program output: -65.023617    
Correct output: -66.5176295557 | Program output: -77.023617    
Correct output: 149.3187378    | Program output: 86.028727     
Correct output: -36.5450493525 | Program output: -83.023617    
Correct output: 75.4021928097  | Program output: 48.024907     
Correct output: 52.2615929867  | Program output: 74.027527     
Correct output: -19.2178367434 | Program output: 43.024417     
Correct output: 66.7518906772  | Program output: 1.023617      
Correct output: 7.673605441    | Program output: 27.023607     
Correct output: 23.6294031682  | Program output: 90.029107     
Correct output: -6.1389033433  | Program output: 38.023927     
Correct output: 9.2516366816   | Program output: -82.023627    
Correct output: 31.3251776267  | Program output: -55.023627    
Correct output: 73.3746496408  | Program output: 0.023607      
Correct output: 20.0500553336  | Program output: -19.023627    
Correct output: -23.2820697498 | Program output: 32.023627     
Correct output: 120.1004999359 | Program output: 30.023607     
Correct output: -155.453212395 | Program output: -98.023617    
Correct output: 31.10301576    | Program output: 10.023617     
Correct output: 45.5733057121  | Program output: -39.023607    
Correct output: -68.592783645  | Program output: -78.023607    
Correct output: -125.979392023 | Program output: -70.023627    
Correct output: -91.9273649148 | Program output: -71.023617    
Correct output: -92.5660607267 | Program output: -49.023627    
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_inc} {:instruction float_add} {:instruction float_yank} {:instruction float_min} {:instruction float_rot} {:instruction integer_dup} {:instruction float_rot} {:instruction float_add} {:instruction float_mult} {:instruction float_mult} {:instruction float_sub} {:instruction integer_dup} {:instruction integer_div} {:instruction 27} {:instruction float_sub} {:instruction integer_fromfloat} {:instruction integer_dup_items} {:instruction float_yankdup} {:instruction float_frominteger} {:instruction float_dup_times} {:instruction float_rot} {:instruction print_integer} {:instruction float_min} {:instruction print_float} {:instruction integer_div} {:instruction 27} {:instruction float_sub} {:instruction float_mult} {:instruction integer_sub} {:instruction 9} {:instruction float_yankdup} {:instruction integer_stackdepth} {:instruction float_frominteger} {:instruction tag_float_196} {:instruction float_swap} {:instruction float_rot} {:instruction integer_add} {:instruction integer_stackdepth} {:instruction float_add} {:instruction in2} {:instruction tag_float_196} {:instruction float_swap} {:instruction float_rot} {:instruction integer_add} {:instruction integer_max} {:instruction float_max} {:instruction integer_stackdepth} {:instruction float_flush} {:instruction in2} {:instruction float_frominteger} {:instruction print_float} {:instruction integer_dup} {:instruction float_shove} {:instruction float_shove} {:instruction integer_inc} {:instruction print_integer} {:instruction integer_shove} {:instruction integer_yank} {:instruction print_integer} {:instruction float_frominteger} {:instruction print_float} {:instruction print_integer} {:instruction integer_shove} {:instruction integer_yank} {:instruction print_integer} {:instruction integer_yank} {:instruction float_swap} {:instruction integer_max} {:instruction integer_fromfloat} {:instruction integer_stackdepth} {:instruction float_add} {:instruction in2} {:instruction float_mult} {:instruction integer_yank} {:instruction integer_max} {:instruction float_sin} {:instruction integer_stackdepth} {:instruction float_add} {:instruction in2} {:instruction float_mult} {:instruction integer_stackdepth} {:instruction float_frominteger} {:instruction integer_stackdepth} {:instruction float_frominteger} {:instruction integer_fromfloat} {:instruction integer_mod} {:instruction print_integer} {:instruction integer_mod} {:instruction integer_div} {:instruction tag_float_291} {:instruction 7} {:instruction float_swap} {:instruction print_integer})
Best program: (integer_inc float_add float_yank float_min float_rot integer_dup float_rot float_add float_mult float_mult float_sub integer_dup integer_div 27 float_sub integer_fromfloat integer_dup_items float_yankdup float_frominteger float_dup_times float_rot print_integer float_min print_float integer_div 27 float_sub float_mult integer_sub 9 float_yankdup integer_stackdepth float_frominteger tag_float_196 float_swap float_rot integer_add integer_stackdepth float_add in2 tag_float_196 float_swap float_rot integer_add integer_max float_max integer_stackdepth float_flush in2 float_frominteger print_float integer_dup float_shove float_shove integer_inc print_integer integer_shove integer_yank print_integer float_frominteger print_float print_integer integer_shove integer_yank print_integer integer_yank float_swap integer_max integer_fromfloat integer_stackdepth float_add in2 float_mult integer_yank integer_max float_sin integer_stackdepth float_add in2 float_mult integer_stackdepth float_frominteger integer_stackdepth float_frominteger integer_fromfloat integer_mod print_integer integer_mod integer_div tag_float_291 7 float_swap print_integer)
Errors: [16.5677 9 6.0519 8 10.506 10 63.29 7 46.4786 10 27.3773 7 21.7659 9 62.2423 12 65.7283 10 19.35 7 66.3997 9 44.1628 9 91.2753 9 86.3488 9 73.351 10 39.0737 11 55.3057 9 90.0769 11 57.4296 10 21.0794 7 84.5969 10 9.4308 7 55.9558 10 20.9037 7 43.5424 9]
Total: 1404.2905
Mean: 28.08581
Genome size: 93
Size: 94
Percent parens: 0.011
--- Population Statistics ---
Average total errors in population: 3821.797937000001
Median total errors in population: 1404.2905
Error averages by case: (142.85464420000025 9.405 134.1334045000014 8.702 137.86059119999845 10.164 133.28332679999832 7.608 168.03114750000123 10.369 99.93491159999844 7.584 94.53124669999923 9.42 130.43884809999903 11.794 125.16560410000099 10.192 90.92174610000036 7.689 134.8735022999989 9.354 114.77390200000107 9.279 206.5488571000008 9.502 202.185270600003 9.452 130.41422379999884 10.259 152.22056429999898 11.235 125.21437219999866 9.558 157.1310438999985 10.967 179.57013470000152 10.355 93.49311030000072 7.277 201.01429330000147 10.431 137.84466590000096 7.764 178.83349529999893 10.203 147.20703879999886 7.818 167.64099170000185 9.296)
Error minima by case: (16.5448 8 6.0033 7 10.4831 9 36.7025 6 36.5687 8 25.3952 6 21.7391 8 19.2423 10 24.3004 9 0.6736 6 16.6294 7 6.1628 7 8.2143 7 4.3252 7 16.6776 9 6.9499 8 23.3057 9 9.9231 8 57.381 9 5.914 6 8.5663 9 9.4079 6 55.9071 9 20.8552 6 43.4938 8)
Average genome size in population (length): 84.339
Average program size in population (points): 85.339
Average percent parens in population: 0.012
Minimum age in population: 148.1443888560461
Maximum age in population: 152.4091806652754
Average age in population: 150.4602990661235
Median age in population: 150.4955252551852
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 7
Genome diversity (% unique Plush genomes):	 0.891
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 7
Syntactic diversity (% unique Push programs):	 0.891
Total error diversity:				 0.244
Error (vector) diversity:			 0.277
Behavioral diversity:				 0.277
--- Run Statistics ---
Number of program evaluations used so far: 109000
Number of point (instruction) evaluations so far: 245984881
--- Timings ---
Current time: 1529615605815 milliseconds
Total Time:         452.3 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       151.4 seconds, 33.5%
Fitness Testing:    238.0 seconds, 52.6%
Report:              62.8 seconds, 13.9%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 108
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 109
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 109
;;******************************
;; -*- Number IO problem report - generation 109
Test total error for best: 59998.23050000004
Test mean error for best: 29.99912
;;------------------------------
Outputs of best individual on training cases:
Correct output: -57.4559422311 | Program output: -74.023617    
Correct output: -71.0754923621 | Program output: -65.023617    
Correct output: -66.5176295557 | Program output: -77.023617    
Correct output: 149.3187378    | Program output: 86.028727     
Correct output: -36.5450493525 | Program output: -83.023617    
Correct output: 75.4021928097  | Program output: 48.024907     
Correct output: 52.2615929867  | Program output: 74.027527     
Correct output: -19.2178367434 | Program output: 43.024417     
Correct output: 66.7518906772  | Program output: 1.023617      
Correct output: 7.673605441    | Program output: 27.023607     
Correct output: 23.6294031682  | Program output: 90.029107     
Correct output: -6.1389033433  | Program output: 38.023927     
Correct output: 9.2516366816   | Program output: -82.023627    
Correct output: 31.3251776267  | Program output: -55.023627    
Correct output: 73.3746496408  | Program output: 0.023607      
Correct output: 20.0500553336  | Program output: -19.023627    
Correct output: -23.2820697498 | Program output: 32.023627     
Correct output: 120.1004999359 | Program output: 30.023607     
Correct output: -155.453212395 | Program output: -98.023617    
Correct output: 31.10301576    | Program output: 10.023617     
Correct output: 45.5733057121  | Program output: -39.023607    
Correct output: -68.592783645  | Program output: -78.023607    
Correct output: -125.979392023 | Program output: -70.023627    
Correct output: -91.9273649148 | Program output: -71.023617    
Correct output: -92.5660607267 | Program output: -49.023627    
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_inc} {:instruction float_add} {:instruction float_yank} {:instruction float_min} {:instruction float_rot} {:instruction integer_dup} {:instruction float_rot} {:instruction float_add} {:instruction float_mult} {:instruction float_mult} {:instruction float_sub} {:instruction integer_dup} {:instruction integer_div} {:instruction 27} {:instruction float_sub} {:instruction float_yank} {:instruction float_yankdup} {:instruction float_sin} {:instruction 9} {:instruction float_yankdup} {:instruction integer_add} {:instruction integer_stackdepth} {:instruction float_add} {:instruction in2} {:instruction float_mult} {:instruction float_mult} {:instruction integer_stackdepth} {:instruction float_frominteger} {:instruction tag_float_196} {:instruction float_rot} {:instruction integer_add} {:instruction integer_max} {:instruction float_max} {:instruction integer_stackdepth} {:instruction float_flush} {:instruction in2} {:instruction float_frominteger} {:instruction print_float} {:instruction integer_dup} {:instruction float_shove} {:instruction float_min} {:instruction integer_inc} {:instruction float_mod} {:instruction integer_dup} {:instruction integer_dup_items} {:instruction print_integer} {:instruction integer_shove} {:instruction integer_yank} {:instruction print_integer} {:instruction integer_fromfloat} {:instruction integer_max} {:instruction integer_max} {:instruction integer_fromfloat} {:instruction integer_stackdepth} {:instruction integer_sub} {:instruction integer_fromfloat} {:instruction integer_stackdepth} {:instruction integer_swap} {:instruction in2} {:instruction float_mult} {:instruction integer_stackdepth} {:instruction float_frominteger} {:instruction integer_fromfloat} {:instruction integer_mod} {:instruction print_integer} {:instruction float_min} {:instruction integer_stackdepth} {:instruction tag_float_291} {:instruction 6} {:instruction tag_float_291} {:instruction integer_inc} {:instruction float_swap} {:instruction print_integer})
Best program: (integer_inc float_add float_yank float_min float_rot integer_dup float_rot float_add float_mult float_mult float_sub integer_dup integer_div 27 float_sub float_yank float_yankdup float_sin 9 float_yankdup integer_add integer_stackdepth float_add in2 float_mult float_mult integer_stackdepth float_frominteger tag_float_196 float_rot integer_add integer_max float_max integer_stackdepth float_flush in2 float_frominteger print_float integer_dup float_shove float_min integer_inc float_mod integer_dup integer_dup_items print_integer integer_shove integer_yank print_integer integer_fromfloat integer_max integer_max integer_fromfloat integer_stackdepth integer_sub integer_fromfloat integer_stackdepth integer_swap in2 float_mult integer_stackdepth float_frominteger integer_fromfloat integer_mod print_integer float_min integer_stackdepth tag_float_291 6 tag_float_291 integer_inc float_swap print_integer)
Errors: [16.5677 9 6.0519 8 10.506 10 63.29 7 46.4786 10 27.3773 7 21.7659 9 62.2423 12 65.7283 10 19.35 7 66.3997 9 44.1628 9 91.2753 9 86.3488 9 73.351 10 39.0737 11 55.3057 9 90.0769 11 57.4296 10 21.0794 7 84.5969 10 9.4308 7 55.9558 10 20.9037 7 43.5424 9]
Total: 1404.2905
Mean: 28.08581
Genome size: 73
Size: 74
Percent parens: 0.014
--- Population Statistics ---
Average total errors in population: 4347.007448600001
Median total errors in population: 1407.2734500000001
Error averages by case: (172.12130000000153 9.445 164.64997080000003 8.685 167.2583905999982 10.182 146.01966679999882 7.638 196.42213610000104 10.385 113.20794449999829 7.601 109.04564369999918 9.438 145.3872069999997 11.782 136.20601210000078 10.156 106.49739660000078 7.709 148.93737939999932 9.344 128.98561980000125 9.257 232.83437440000114 9.506 228.78180630000296 9.478 142.13224699999864 10.262 177.19199729999963 11.22 139.19687789999884 9.554 169.51550879999832 10.97 208.48101670000148 10.374 104.96671750000085 7.273 227.52854260000157 10.438 165.75347360000086 7.785 206.8040743999987 10.185 177.21720039999877 7.855 196.04494430000182 9.298)
Error minima by case: (16.5448 7 5.9927 6 10.4831 8 22.3187 6 36.562 8 25.3952 6 21.7391 8 18.0722 6 24.2593 4 0.6736 6 3.3706 8 6.1659 6 7.228 5 4.2982 5 16.6364 4 2.9499 6 14.008 6 9.9192 5 57.3705 6 4.086 4 8.5733 6 9.4079 6 55.8967 6 20.8446 6 43.4833 6)
Average genome size in population (length): 83.963
Average program size in population (points): 84.963
Average percent parens in population: 0.012
Minimum age in population: 149.3820921851465
Maximum age in population: 154.0375884090761
Average age in population: 151.851702301383
Median age in population: 151.8827833020528
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 6
Genome diversity (% unique Plush genomes):	 0.881
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 6
Syntactic diversity (% unique Push programs):	 0.881
Total error diversity:				 0.239
Error (vector) diversity:			 0.297
Behavioral diversity:				 0.297
--- Run Statistics ---
Number of program evaluations used so far: 110000
Number of point (instruction) evaluations so far: 248086556
--- Timings ---
Current time: 1529615609706 milliseconds
Total Time:         456.4 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       152.8 seconds, 33.5%
Fitness Testing:    240.0 seconds, 52.6%
Report:              63.4 seconds, 13.9%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 109
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 110
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 110
;;******************************
;; -*- Number IO problem report - generation 110
Test total error for best: 59998.23050000004
Test mean error for best: 29.99912
;;------------------------------
Outputs of best individual on training cases:
Correct output: -57.4559422311 | Program output: -74.023617    
Correct output: -71.0754923621 | Program output: -65.023617    
Correct output: -66.5176295557 | Program output: -77.023617    
Correct output: 149.3187378    | Program output: 86.028727     
Correct output: -36.5450493525 | Program output: -83.023617    
Correct output: 75.4021928097  | Program output: 48.024907     
Correct output: 52.2615929867  | Program output: 74.027527     
Correct output: -19.2178367434 | Program output: 43.024417     
Correct output: 66.7518906772  | Program output: 1.023617      
Correct output: 7.673605441    | Program output: 27.023607     
Correct output: 23.6294031682  | Program output: 90.029107     
Correct output: -6.1389033433  | Program output: 38.023927     
Correct output: 9.2516366816   | Program output: -82.023627    
Correct output: 31.3251776267  | Program output: -55.023627    
Correct output: 73.3746496408  | Program output: 0.023607      
Correct output: 20.0500553336  | Program output: -19.023627    
Correct output: -23.2820697498 | Program output: 32.023627     
Correct output: 120.1004999359 | Program output: 30.023607     
Correct output: -155.453212395 | Program output: -98.023617    
Correct output: 31.10301576    | Program output: 10.023617     
Correct output: 45.5733057121  | Program output: -39.023607    
Correct output: -68.592783645  | Program output: -78.023607    
Correct output: -125.979392023 | Program output: -70.023627    
Correct output: -91.9273649148 | Program output: -71.023617    
Correct output: -92.5660607267 | Program output: -49.023627    
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_inc} {:instruction float_add} {:instruction float_yank} {:instruction integer_inc} {:instruction float_div} {:instruction print_integer} {:instruction print_integer} {:instruction float_min} {:instruction print_float} {:instruction integer_div} {:instruction 27} {:instruction float_sub} {:instruction float_yankdup} {:instruction integer_sub} {:instruction 9} {:instruction float_yankdup} {:instruction integer_stackdepth} {:instruction float_frominteger} {:instruction tag_float_196} {:instruction float_swap} {:instruction float_rot} {:instruction integer_add} {:instruction integer_stackdepth} {:instruction float_add} {:instruction in2} {:instruction float_mult} {:instruction integer_stackdepth} {:instruction float_frominteger} {:instruction tag_float_196} {:instruction float_swap} {:instruction float_rot} {:instruction integer_add} {:instruction integer_max} {:instruction float_max} {:instruction integer_stackdepth} {:instruction float_flush} {:instruction in2} {:instruction float_frominteger} {:instruction print_float} {:instruction integer_dup} {:instruction float_shove} {:instruction float_min} {:instruction integer_inc} {:instruction float_mod} {:instruction integer_dup} {:instruction integer_dup_items} {:instruction print_integer} {:instruction integer_shove} {:instruction integer_yank} {:instruction print_integer} {:instruction integer_fromfloat} {:instruction integer_max} {:instruction integer_max} {:instruction integer_fromfloat} {:instruction integer_stackdepth} {:instruction integer_sub} {:instruction integer_fromfloat} {:instruction integer_stackdepth} {:instruction integer_swap} {:instruction in2} {:instruction float_mult} {:instruction integer_stackdepth} {:instruction float_frominteger} {:instruction integer_fromfloat} {:instruction integer_mod} {:instruction print_integer} {:instruction float_min} {:instruction integer_stackdepth} {:instruction tag_float_291} {:instruction 6} {:instruction tag_float_291} {:instruction integer_inc} {:instruction float_swap} {:instruction print_integer})
Best program: (integer_inc float_add float_yank integer_inc float_div print_integer print_integer float_min print_float integer_div 27 float_sub float_yankdup integer_sub 9 float_yankdup integer_stackdepth float_frominteger tag_float_196 float_swap float_rot integer_add integer_stackdepth float_add in2 float_mult integer_stackdepth float_frominteger tag_float_196 float_swap float_rot integer_add integer_max float_max integer_stackdepth float_flush in2 float_frominteger print_float integer_dup float_shove float_min integer_inc float_mod integer_dup integer_dup_items print_integer integer_shove integer_yank print_integer integer_fromfloat integer_max integer_max integer_fromfloat integer_stackdepth integer_sub integer_fromfloat integer_stackdepth integer_swap in2 float_mult integer_stackdepth float_frominteger integer_fromfloat integer_mod print_integer float_min integer_stackdepth tag_float_291 6 tag_float_291 integer_inc float_swap print_integer)
Errors: [16.5677 9 6.0519 8 10.506 10 63.29 7 46.4786 10 27.3773 7 21.7659 9 62.2423 12 65.7283 10 19.35 7 66.3997 9 44.1628 9 91.2753 9 86.3488 9 73.351 10 39.0737 11 55.3057 9 90.0769 11 57.4296 10 21.0794 7 84.5969 10 9.4308 7 55.9558 10 20.9037 7 43.5424 9]
Total: 1404.2905
Mean: 28.08581
Genome size: 74
Size: 75
Percent parens: 0.013
--- Population Statistics ---
Average total errors in population: 3726.8782008000044
Median total errors in population: 1406.77555
Error averages by case: (137.2839547000001 9.399 129.66166990000187 8.684 132.43240959999804 10.209 130.27343919999782 7.652 162.3874413000012 10.403 96.62905289999838 7.6 92.26938789999923 9.479 129.1398407999989 11.812 126.36254710000117 10.206 89.63083670000051 7.751 132.4907283999984 9.359 112.36101030000148 9.277 200.12610410000076 9.546 195.82408960000313 9.517 132.59631509999852 10.306 144.60744829999825 11.273 122.59969259999865 9.58 153.97509299999876 10.96 175.33597990000135 10.373 90.14340600000097 7.343 194.64752880000165 10.471 131.3554216000009 7.782 173.46737309999875 10.209 142.6186882999985 7.877 162.2587416000021 9.332)
Error minima by case: (16.5448 8 6.0033 6 10.4831 8 36.71 6 36.5687 8 27.3041 6 5.2616 8 19.2423 8 1.0 7 0.6736 6 3.3706 8 6.1628 7 2.2516 7 4.3252 8 0.0 6 3.0501 8 23.3057 8 9.9231 8 57.381 8 4.103 6 8.5733 8 9.4072 6 55.9024 8 20.8552 6 43.4938 8)
Average genome size in population (length): 83.557
Average program size in population (points): 84.557
Average percent parens in population: 0.012
Minimum age in population: 150.3820921851465
Maximum age in population: 155.5277379895129
Average age in population: 153.2156315341935
Median age in population: 153.2700516430511
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 6
Genome diversity (% unique Plush genomes):	 0.879
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 6
Syntactic diversity (% unique Push programs):	 0.879
Total error diversity:				 0.249
Error (vector) diversity:			 0.283
Behavioral diversity:				 0.283
--- Run Statistics ---
Number of program evaluations used so far: 111000
Number of point (instruction) evaluations so far: 250178281
--- Timings ---
Current time: 1529615613754 milliseconds
Total Time:         460.3 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       154.1 seconds, 33.5%
Fitness Testing:    242.2 seconds, 52.6%
Report:              63.9 seconds, 13.9%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 110
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 111
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 111
;;******************************
;; -*- Number IO problem report - generation 111
Test total error for best: 59998.23050000004
Test mean error for best: 29.99912
;;------------------------------
Outputs of best individual on training cases:
Correct output: -57.4559422311 | Program output: -74.023617    
Correct output: -71.0754923621 | Program output: -65.023617    
Correct output: -66.5176295557 | Program output: -77.023617    
Correct output: 149.3187378    | Program output: 86.028727     
Correct output: -36.5450493525 | Program output: -83.023617    
Correct output: 75.4021928097  | Program output: 48.024907     
Correct output: 52.2615929867  | Program output: 74.027527     
Correct output: -19.2178367434 | Program output: 43.024417     
Correct output: 66.7518906772  | Program output: 1.023617      
Correct output: 7.673605441    | Program output: 27.023607     
Correct output: 23.6294031682  | Program output: 90.029107     
Correct output: -6.1389033433  | Program output: 38.023927     
Correct output: 9.2516366816   | Program output: -82.023627    
Correct output: 31.3251776267  | Program output: -55.023627    
Correct output: 73.3746496408  | Program output: 0.023607      
Correct output: 20.0500553336  | Program output: -19.023627    
Correct output: -23.2820697498 | Program output: 32.023627     
Correct output: 120.1004999359 | Program output: 30.023607     
Correct output: -155.453212395 | Program output: -98.023617    
Correct output: 31.10301576    | Program output: 10.023617     
Correct output: 45.5733057121  | Program output: -39.023607    
Correct output: -68.592783645  | Program output: -78.023607    
Correct output: -125.979392023 | Program output: -70.023627    
Correct output: -91.9273649148 | Program output: -71.023617    
Correct output: -92.5660607267 | Program output: -49.023627    
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_yank} {:instruction float_yank} {:instruction float_min} {:instruction integer_shove} {:instruction float_inc} {:instruction float_mult} {:instruction float_mult} {:instruction float_mult} {:instruction float_sub} {:instruction integer_dup_items} {:instruction float_yankdup} {:instruction float_inc} {:instruction float_flush} {:instruction float_mult} {:instruction float_mult} {:instruction float_sub} {:instruction integer_dup_items} {:instruction print_float} {:instruction integer_div} {:instruction 27} {:instruction float_sub} {:instruction float_yankdup} {:instruction integer_sub} {:instruction float_yankdup} {:instruction integer_sub} {:instruction 9} {:instruction float_yankdup} {:instruction integer_stackdepth} {:instruction float_frominteger} {:instruction tag_float_196} {:instruction float_swap} {:instruction float_rot} {:instruction integer_add} {:instruction integer_stackdepth} {:instruction float_dup_items} {:instruction tag_float_313} {:instruction integer_swap} {:instruction float_rot} {:instruction integer_stackdepth} {:instruction float_add} {:instruction in2} {:instruction -7.138850513502717} {:instruction -4} {:instruction float_frominteger} {:instruction tag_float_196} {:instruction float_swap} {:instruction float_rot} {:instruction integer_add} {:instruction integer_max} {:instruction float_max} {:instruction integer_stackdepth} {:instruction float_flush} {:instruction in2} {:instruction float_frominteger} {:instruction print_float} {:instruction integer_dup} {:instruction float_sub} {:instruction float_dup_items} {:instruction integer_inc} {:instruction print_integer} {:instruction integer_shove} {:instruction float_min} {:instruction print_integer} {:instruction integer_yank} {:instruction integer_stackdepth} {:instruction float_add} {:instruction in2} {:instruction float_mult} {:instruction integer_yank} {:instruction integer_max} {:instruction float_swap} {:instruction integer_stackdepth} {:instruction float_add} {:instruction in2} {:instruction float_mult} {:instruction integer_stackdepth} {:instruction float_frominteger} {:instruction integer_fromfloat} {:instruction integer_mod} {:instruction print_integer} {:instruction in2} {:instruction integer_stackdepth} {:instruction tag_float_291} {:instruction 6} {:instruction tag_float_291} {:instruction integer_inc} {:instruction float_swap} {:instruction print_integer})
Best program: (float_yank float_yank float_min integer_shove float_inc float_mult float_mult float_mult float_sub integer_dup_items float_yankdup float_inc float_flush float_mult float_mult float_sub integer_dup_items print_float integer_div 27 float_sub float_yankdup integer_sub float_yankdup integer_sub 9 float_yankdup integer_stackdepth float_frominteger tag_float_196 float_swap float_rot integer_add integer_stackdepth float_dup_items tag_float_313 integer_swap float_rot integer_stackdepth float_add in2 -7.138850513502717 -4 float_frominteger tag_float_196 float_swap float_rot integer_add integer_max float_max integer_stackdepth float_flush in2 float_frominteger print_float integer_dup float_sub float_dup_items integer_inc print_integer integer_shove float_min print_integer integer_yank integer_stackdepth float_add in2 float_mult integer_yank integer_max float_swap integer_stackdepth float_add in2 float_mult integer_stackdepth float_frominteger integer_fromfloat integer_mod print_integer in2 integer_stackdepth tag_float_291 6 tag_float_291 integer_inc float_swap print_integer)
Errors: [16.5677 9 6.0519 8 10.506 10 63.29 7 46.4786 10 27.3773 7 21.7659 9 62.2423 12 65.7283 10 19.35 7 66.3997 9 44.1628 9 91.2753 9 86.3488 9 73.351 10 39.0737 11 55.3057 9 90.0769 11 57.4296 10 21.0794 7 84.5969 10 9.4308 7 55.9558 10 20.9037 7 43.5424 9]
Total: 1404.2905
Mean: 28.08581
Genome size: 88
Size: 89
Percent parens: 0.011
--- Population Statistics ---
Average total errors in population: 4184.533964500004
Median total errors in population: 1404.7904000000003
Error averages by case: (157.92668500000076 9.438 149.31551780000103 8.689 152.99299759999812 10.245 148.49785799999898 7.677 182.70632130000126 10.39 115.34725249999828 7.627 110.18179259999928 9.519 146.03745179999976 11.76 138.95044730000086 10.193 107.17198790000072 7.798 149.8038971999994 9.44 129.6041619000012 9.275 219.70612120000072 9.557 215.53450420000286 9.504 142.19315149999875 10.284 166.13911539999904 11.266 139.7800182999987 9.577 171.52208059999856 10.982 193.9391763000013 10.361 108.74329560000078 7.291 214.2687532000016 10.46 152.084915300001 7.815 192.21214469999876 10.186 162.15147509999863 7.888 181.19684220000192 9.304)
Error minima by case: (16.5441 8 5.9828 7 10.4824 8 22.3187 6 37.562 8 26.3952 6 21.7384 9 20.2337 7 1.0 5 0.6736 6 6.6294 8 7.1537 7 6.2246 6 4.3252 7 0.0 5 3.0501 7 24.2891 7 13.1005 7 57.3605 7 4.907 5 9.5663 7 9.4072 7 55.8867 7 20.8347 6 43.4734 7)
Average genome size in population (length): 83.466
Average program size in population (points): 84.466
Average percent parens in population: 0.012
Minimum age in population: 151.4509792955113
Maximum age in population: 156.4703141841408
Average age in population: 154.5536008756432
Median age in population: 154.5569071974986
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 6
Genome diversity (% unique Plush genomes):	 0.895
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 6
Syntactic diversity (% unique Push programs):	 0.895
Total error diversity:				 0.241
Error (vector) diversity:			 0.285
Behavioral diversity:				 0.285
--- Run Statistics ---
Number of program evaluations used so far: 112000
Number of point (instruction) evaluations so far: 252268356
--- Timings ---
Current time: 1529615618038 milliseconds
Total Time:         464.7 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       155.5 seconds, 33.5%
Fitness Testing:    244.6 seconds, 52.6%
Report:              64.5 seconds, 13.9%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 111
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 112
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 112
;;******************************
;; -*- Number IO problem report - generation 112
Test total error for best: 59998.23050000004
Test mean error for best: 29.99912
;;------------------------------
Outputs of best individual on training cases:
Correct output: -57.4559422311 | Program output: -74.023617    
Correct output: -71.0754923621 | Program output: -65.023617    
Correct output: -66.5176295557 | Program output: -77.023617    
Correct output: 149.3187378    | Program output: 86.028727     
Correct output: -36.5450493525 | Program output: -83.023617    
Correct output: 75.4021928097  | Program output: 48.024907     
Correct output: 52.2615929867  | Program output: 74.027527     
Correct output: -19.2178367434 | Program output: 43.024417     
Correct output: 66.7518906772  | Program output: 1.023617      
Correct output: 7.673605441    | Program output: 27.023607     
Correct output: 23.6294031682  | Program output: 90.029107     
Correct output: -6.1389033433  | Program output: 38.023927     
Correct output: 9.2516366816   | Program output: -82.023627    
Correct output: 31.3251776267  | Program output: -55.023627    
Correct output: 73.3746496408  | Program output: 0.023607      
Correct output: 20.0500553336  | Program output: -19.023627    
Correct output: -23.2820697498 | Program output: 32.023627     
Correct output: 120.1004999359 | Program output: 30.023607     
Correct output: -155.453212395 | Program output: -98.023617    
Correct output: 31.10301576    | Program output: 10.023617     
Correct output: 45.5733057121  | Program output: -39.023607    
Correct output: -68.592783645  | Program output: -78.023607    
Correct output: -125.979392023 | Program output: -70.023627    
Correct output: -91.9273649148 | Program output: -71.023617    
Correct output: -92.5660607267 | Program output: -49.023627    
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_inc} {:instruction float_add} {:instruction float_dup_items} {:instruction integer_dup} {:instruction float_min} {:instruction float_dup_times} {:instruction float_inc} {:instruction float_dup} {:instruction float_mult} {:instruction float_mult} {:instruction float_sub} {:instruction integer_dup_items} {:instruction integer_dup_items} {:instruction float_yankdup} {:instruction float_rot} {:instruction integer_div} {:instruction float_min} {:instruction integer_fromfloat} {:instruction integer_div} {:instruction 27} {:instruction integer_dup_times} {:instruction float_yankdup} {:instruction float_sin} {:instruction 9} {:instruction float_yankdup} {:instruction integer_add} {:instruction integer_stackdepth} {:instruction float_add} {:instruction in2} {:instruction float_cos} {:instruction float_swap} {:instruction float_sin} {:instruction integer_add} {:instruction integer_max} {:instruction integer_stackdepth} {:instruction float_flush} {:instruction in2} {:instruction float_frominteger} {:instruction print_float} {:instruction integer_dup} {:instruction float_shove} {:instruction float_shove} {:instruction integer_inc} {:instruction tagged_206} {:instruction print_integer} {:instruction integer_shove} {:instruction integer_yank} {:instruction print_integer} {:instruction integer_yank} {:instruction integer_max} {:instruction integer_max} {:instruction integer_fromfloat} {:instruction integer_stackdepth} {:instruction integer_max} {:instruction float_sin} {:instruction integer_stackdepth} {:instruction float_add} {:instruction in2} {:instruction float_mult} {:instruction integer_stackdepth} {:instruction float_frominteger} {:instruction integer_fromfloat} {:instruction integer_mod} {:instruction print_integer} {:instruction float_min} {:instruction integer_stackdepth} {:instruction tag_float_291} {:instruction 6} {:instruction tag_float_291} {:instruction integer_inc} {:instruction float_swap} {:instruction print_integer})
Best program: (integer_inc float_add float_dup_items integer_dup float_min float_dup_times float_inc float_dup float_mult float_mult float_sub integer_dup_items integer_dup_items float_yankdup float_rot integer_div float_min integer_fromfloat integer_div 27 integer_dup_times float_yankdup float_sin 9 float_yankdup integer_add integer_stackdepth float_add in2 float_cos float_swap float_sin integer_add integer_max integer_stackdepth float_flush in2 float_frominteger print_float integer_dup float_shove float_shove integer_inc tagged_206 print_integer integer_shove integer_yank print_integer integer_yank integer_max integer_max integer_fromfloat integer_stackdepth integer_max float_sin integer_stackdepth float_add in2 float_mult integer_stackdepth float_frominteger integer_fromfloat integer_mod print_integer float_min integer_stackdepth tag_float_291 6 tag_float_291 integer_inc float_swap print_integer)
Errors: [16.5677 9 6.0519 8 10.506 10 63.29 7 46.4786 10 27.3773 7 21.7659 9 62.2423 12 65.7283 10 19.35 7 66.3997 9 44.1628 9 91.2753 9 86.3488 9 73.351 10 39.0737 11 55.3057 9 90.0769 11 57.4296 10 21.0794 7 84.5969 10 9.4308 7 55.9558 10 20.9037 7 43.5424 9]
Total: 1404.2905
Mean: 28.08581
Genome size: 72
Size: 73
Percent parens: 0.014
--- Population Statistics ---
Average total errors in population: 4038.7578129000017
Median total errors in population: 1404.2905
Error averages by case: (148.31536670000088 9.429 139.51617480000087 8.699 144.00434139999817 10.189 145.47053049999911 7.675 174.35509920000115 10.383 112.50754179999807 7.606 108.10648359999924 9.458 143.56371620000016 11.795 134.72646630000082 10.183 104.58660560000085 7.754 148.0738931999997 9.39 127.27826500000126 9.29 212.1403602000011 9.544 207.91354650000304 9.494 140.72763779999855 10.264 158.85639279999913 11.248 136.6124973999988 9.556 169.14613889999805 10.988 185.11273990000134 10.378 105.3034853000008 7.319 205.97269770000176 10.457 142.3400330000009 7.783 183.5104215999986 10.208 152.5123753999984 7.854 171.85400210000202 9.307)
Error minima by case: (16.5451 8 5.9843 7 10.4834 9 61.296 6 37.5552 8 25.3995 6 5.2616 8 20.2613 9 24.2593 9 0.6736 6 12.4635 8 7.1793 7 2.2516 7 3.7018 7 16.6364 7 3.0501 9 24.3164 9 83.0978 9 57.362 9 3.914 5 8.5706 9 9.4079 6 55.8881 8 20.8362 6 43.4748 8)
Average genome size in population (length): 82.733
Average program size in population (points): 83.733
Average percent parens in population: 0.012
Minimum age in population: 152.9725040639106
Maximum age in population: 158.0244579381072
Average age in population: 155.9508295040516
Median age in population: 155.9549253941421
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 6
Genome diversity (% unique Plush genomes):	 0.885
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 6
Syntactic diversity (% unique Push programs):	 0.885
Total error diversity:				 0.248
Error (vector) diversity:			 0.29
Behavioral diversity:				 0.291
--- Run Statistics ---
Number of program evaluations used so far: 113000
Number of point (instruction) evaluations so far: 254339806
--- Timings ---
Current time: 1529615621687 milliseconds
Total Time:         468.4 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       156.7 seconds, 33.5%
Fitness Testing:    246.5 seconds, 52.6%
Report:              65.0 seconds, 13.9%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 112
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 113
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 113
;;******************************
;; -*- Number IO problem report - generation 113
Test total error for best: 59998.23050000004
Test mean error for best: 29.99912
;;------------------------------
Outputs of best individual on training cases:
Correct output: -57.4559422311 | Program output: -74.023617    
Correct output: -71.0754923621 | Program output: -65.023617    
Correct output: -66.5176295557 | Program output: -77.023617    
Correct output: 149.3187378    | Program output: 86.028727     
Correct output: -36.5450493525 | Program output: -83.023617    
Correct output: 75.4021928097  | Program output: 48.024907     
Correct output: 52.2615929867  | Program output: 74.027527     
Correct output: -19.2178367434 | Program output: 43.024417     
Correct output: 66.7518906772  | Program output: 1.023617      
Correct output: 7.673605441    | Program output: 27.023607     
Correct output: 23.6294031682  | Program output: 90.029107     
Correct output: -6.1389033433  | Program output: 38.023927     
Correct output: 9.2516366816   | Program output: -82.023627    
Correct output: 31.3251776267  | Program output: -55.023627    
Correct output: 73.3746496408  | Program output: 0.023607      
Correct output: 20.0500553336  | Program output: -19.023627    
Correct output: -23.2820697498 | Program output: 32.023627     
Correct output: 120.1004999359 | Program output: 30.023607     
Correct output: -155.453212395 | Program output: -98.023617    
Correct output: 31.10301576    | Program output: 10.023617     
Correct output: 45.5733057121  | Program output: -39.023607    
Correct output: -68.592783645  | Program output: -78.023607    
Correct output: -125.979392023 | Program output: -70.023627    
Correct output: -91.9273649148 | Program output: -71.023617    
Correct output: -92.5660607267 | Program output: -49.023627    
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_dec} {:instruction float_add} {:instruction integer_inc} {:instruction integer_fromfloat} {:instruction float_inc} {:instruction integer_dup} {:instruction float_min} {:instruction float_dup_times} {:instruction float_inc} {:instruction float_dup} {:instruction integer_inc} {:instruction float_add} {:instruction float_yank} {:instruction integer_dup_times} {:instruction float_min} {:instruction float_shove} {:instruction integer_div} {:instruction 27} {:instruction float_sub} {:instruction integer_fromfloat} {:instruction integer_sub} {:instruction 9} {:instruction float_yankdup} {:instruction integer_stackdepth} {:instruction float_frominteger} {:instruction tag_float_196} {:instruction float_swap} {:instruction float_rot} {:instruction integer_add} {:instruction integer_stackdepth} {:instruction float_add} {:instruction in2} {:instruction float_mult} {:instruction integer_stackdepth} {:instruction float_frominteger} {:instruction tag_float_196} {:instruction float_swap} {:instruction float_tan} {:instruction integer_add} {:instruction integer_max} {:instruction integer_div} {:instruction integer_max} {:instruction float_max} {:instruction integer_stackdepth} {:instruction float_flush} {:instruction in2} {:instruction float_frominteger} {:instruction print_float} {:instruction integer_dup} {:instruction float_shove} {:instruction float_sin} {:instruction integer_inc} {:instruction print_integer} {:instruction integer_shove} {:instruction float_min} {:instruction print_integer} {:instruction integer_yank} {:instruction integer_stackdepth} {:instruction float_add} {:instruction in2} {:instruction float_mult} {:instruction integer_yank} {:instruction integer_max} {:instruction float_swap} {:instruction integer_stackdepth} {:instruction float_add} {:instruction in2} {:instruction float_mult} {:instruction integer_stackdepth} {:instruction float_frominteger} {:instruction integer_fromfloat} {:instruction integer_mod} {:instruction print_integer} {:instruction float_min} {:instruction integer_stackdepth} {:instruction tag_float_291} {:instruction 6} {:instruction tag_float_291} {:instruction integer_inc} {:instruction float_min} {:instruction 6} {:instruction tag_float_291} {:instruction integer_inc} {:instruction float_swap} {:instruction print_integer})
Best program: (integer_dec float_add integer_inc integer_fromfloat float_inc integer_dup float_min float_dup_times float_inc float_dup integer_inc float_add float_yank integer_dup_times float_min float_shove integer_div 27 float_sub integer_fromfloat integer_sub 9 float_yankdup integer_stackdepth float_frominteger tag_float_196 float_swap float_rot integer_add integer_stackdepth float_add in2 float_mult integer_stackdepth float_frominteger tag_float_196 float_swap float_tan integer_add integer_max integer_div integer_max float_max integer_stackdepth float_flush in2 float_frominteger print_float integer_dup float_shove float_sin integer_inc print_integer integer_shove float_min print_integer integer_yank integer_stackdepth float_add in2 float_mult integer_yank integer_max float_swap integer_stackdepth float_add in2 float_mult integer_stackdepth float_frominteger integer_fromfloat integer_mod print_integer float_min integer_stackdepth tag_float_291 6 tag_float_291 integer_inc float_min 6 tag_float_291 integer_inc float_swap print_integer)
Errors: [16.5677 9 6.0519 8 10.506 10 63.29 7 46.4786 10 27.3773 7 21.7659 9 62.2423 12 65.7283 10 19.35 7 66.3997 9 44.1628 9 91.2753 9 86.3488 9 73.351 10 39.0737 11 55.3057 9 90.0769 11 57.4296 10 21.0794 7 84.5969 10 9.4308 7 55.9558 10 20.9037 7 43.5424 9]
Total: 1404.2905
Mean: 28.08581
Genome size: 85
Size: 86
Percent parens: 0.012
--- Population Statistics ---
Average total errors in population: 4237.415891700002
Median total errors in population: 1409.2905
Error averages by case: (165.49677260000163 9.433 158.07615650000042 8.73 160.69711839999798 10.21 143.4122714999987 7.698 189.9041291000013 10.399 109.91053199999814 7.621 105.93505909999925 9.485 141.90385459999976 11.776 137.30538400000077 10.223 102.97308360000105 7.751 146.05569569999955 9.381 125.4613864000015 9.281 226.4252391000018 9.534 222.35514090000297 9.527 144.17545559999854 10.265 170.67469229999992 11.266 135.66754269999882 9.598 166.46990799999801 10.951 202.44178810000133 10.378 103.47466520000077 7.296 221.20115320000158 10.477 159.80141100000088 7.829 200.59555929999877 10.214 170.8573173999985 7.889 189.60457540000195 9.328)
Error minima by case: (5.2863 8 6.0033 6 8.5045 8 36.7108 6 14.4786 8 17.3908 6 5.2616 8 19.263 9 24.2698 7 0.6736 6 16.6294 8 6.1792 7 6.2143 7 4.3252 8 16.6461 8 3.0501 9 23.3193 9 9.9234 8 57.381 9 4.904 5 9.5563 9 7.4293 6 55.9071 8 20.8552 6 40.3964 8)
Average genome size in population (length): 81.943
Average program size in population (points): 82.943
Average percent parens in population: 0.012
Minimum age in population: 153.9725040639106
Maximum age in population: 159.298366809031
Average age in population: 157.3526082416206
Median age in population: 157.4157698997895
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 5
Genome diversity (% unique Plush genomes):	 0.905
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 5
Syntactic diversity (% unique Push programs):	 0.905
Total error diversity:				 0.245
Error (vector) diversity:			 0.294
Behavioral diversity:				 0.294
--- Run Statistics ---
Number of program evaluations used so far: 114000
Number of point (instruction) evaluations so far: 256391481
--- Timings ---
Current time: 1529615625540 milliseconds
Total Time:         472.2 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       158.0 seconds, 33.5%
Fitness Testing:    248.6 seconds, 52.6%
Report:              65.5 seconds, 13.9%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 113
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 114
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 114
;;******************************
;; -*- Number IO problem report - generation 114
Test total error for best: 59998.23050000004
Test mean error for best: 29.99912
;;------------------------------
Outputs of best individual on training cases:
Correct output: -57.4559422311 | Program output: -74.023617    
Correct output: -71.0754923621 | Program output: -65.023617    
Correct output: -66.5176295557 | Program output: -77.023617    
Correct output: 149.3187378    | Program output: 86.028727     
Correct output: -36.5450493525 | Program output: -83.023617    
Correct output: 75.4021928097  | Program output: 48.024907     
Correct output: 52.2615929867  | Program output: 74.027527     
Correct output: -19.2178367434 | Program output: 43.024417     
Correct output: 66.7518906772  | Program output: 1.023617      
Correct output: 7.673605441    | Program output: 27.023607     
Correct output: 23.6294031682  | Program output: 90.029107     
Correct output: -6.1389033433  | Program output: 38.023927     
Correct output: 9.2516366816   | Program output: -82.023627    
Correct output: 31.3251776267  | Program output: -55.023627    
Correct output: 73.3746496408  | Program output: 0.023607      
Correct output: 20.0500553336  | Program output: -19.023627    
Correct output: -23.2820697498 | Program output: 32.023627     
Correct output: 120.1004999359 | Program output: 30.023607     
Correct output: -155.453212395 | Program output: -98.023617    
Correct output: 31.10301576    | Program output: 10.023617     
Correct output: 45.5733057121  | Program output: -39.023607    
Correct output: -68.592783645  | Program output: -78.023607    
Correct output: -125.979392023 | Program output: -70.023627    
Correct output: -91.9273649148 | Program output: -71.023617    
Correct output: -92.5660607267 | Program output: -49.023627    
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_yank} {:instruction integer_dup} {:instruction float_min} {:instruction float_sub} {:instruction integer_div} {:instruction 27} {:instruction float_sub} {:instruction float_mult} {:instruction float_mult} {:instruction integer_rot} {:instruction integer_sub} {:instruction 9} {:instruction float_yankdup} {:instruction integer_stackdepth} {:instruction float_frominteger} {:instruction tag_float_196} {:instruction float_swap} {:instruction float_rot} {:instruction integer_add} {:instruction integer_stackdepth} {:instruction float_add} {:instruction in2} {:instruction float_mult} {:instruction integer_stackdepth} {:instruction float_frominteger} {:instruction tag_float_196} {:instruction float_swap} {:instruction float_rot} {:instruction integer_add} {:instruction integer_max} {:instruction integer_rot} {:instruction integer_stackdepth} {:instruction float_flush} {:instruction in2} {:instruction float_frominteger} {:instruction print_float} {:instruction integer_dup} {:instruction float_dup} {:instruction float_shove} {:instruction integer_inc} {:instruction print_integer} {:instruction integer_shove} {:instruction integer_yank} {:instruction print_integer} {:instruction integer_yank} {:instruction float_mult} {:instruction float_cos} {:instruction in2} {:instruction float_mult} {:instruction integer_yank} {:instruction integer_max} {:instruction float_sin} {:instruction integer_stackdepth} {:instruction float_add} {:instruction in2} {:instruction float_mult} {:instruction integer_stackdepth} {:instruction float_frominteger} {:instruction integer_fromfloat} {:instruction integer_mod} {:instruction print_integer} {:instruction float_min} {:instruction integer_stackdepth} {:instruction tag_float_291} {:instruction 6} {:instruction print_float} {:instruction integer_inc} {:instruction float_swap} {:instruction print_integer})
Best program: (float_yank integer_dup float_min float_sub integer_div 27 float_sub float_mult float_mult integer_rot integer_sub 9 float_yankdup integer_stackdepth float_frominteger tag_float_196 float_swap float_rot integer_add integer_stackdepth float_add in2 float_mult integer_stackdepth float_frominteger tag_float_196 float_swap float_rot integer_add integer_max integer_rot integer_stackdepth float_flush in2 float_frominteger print_float integer_dup float_dup float_shove integer_inc print_integer integer_shove integer_yank print_integer integer_yank float_mult float_cos in2 float_mult integer_yank integer_max float_sin integer_stackdepth float_add in2 float_mult integer_stackdepth float_frominteger integer_fromfloat integer_mod print_integer float_min integer_stackdepth tag_float_291 6 print_float integer_inc float_swap print_integer)
Errors: [16.5677 9 6.0519 8 10.506 10 63.29 7 46.4786 10 27.3773 7 21.7659 9 62.2423 12 65.7283 10 19.35 7 66.3997 9 44.1628 9 91.2753 9 86.3488 9 73.351 10 39.0737 11 55.3057 9 90.0769 11 57.4296 10 21.0794 7 84.5969 10 9.4308 7 55.9558 10 20.9037 7 43.5424 9]
Total: 1404.2905
Mean: 28.08581
Genome size: 69
Size: 70
Percent parens: 0.014
--- Population Statistics ---
Average total errors in population: 4068.3159822000025
Median total errors in population: 1405.2905
Error averages by case: (155.07650990000081 9.405 146.21630840000137 8.677 150.01356139999785 10.178 140.199896799998 7.608 180.3823982000012 10.37 106.7262473999982 7.582 101.76842319999925 9.456 138.3437184999992 11.802 137.422038800001 10.179 99.95243900000078 7.73 142.51364819999887 9.362 121.73375820000156 9.243 218.21847630000065 9.486 214.00874790000296 9.495 140.70178189999848 10.246 163.13721959999913 11.262 131.9759134999986 9.525 163.8707501999983 10.931 190.66665720000157 10.361 101.53596390000102 7.292 212.57862100000165 10.442 149.08595300000104 7.746 189.14862319999864 10.177 159.06789029999854 7.823 178.306436200002 9.286)
Error minima by case: (16.5458 8 5.9763 6 10.4841 8 63.2193 6 36.555 9 27.3037 6 9.2616 8 19.2278 7 1.0 6 0.6736 6 6.6294 8 6.1589 7 7.7484 6 4.3252 7 0.0 5 3.0501 7 23.3021 7 30.0 7 57.3537 7 10.0 5 28.5733 7 9.4079 6 55.8801 7 20.8282 6 43.4665 7)
Average genome size in population (length): 81.753
Average program size in population (points): 82.753
Average percent parens in population: 0.012
Minimum age in population: 156.2233537343299
Maximum age in population: 160.7321319194381
Average age in population: 158.665739900174
Median age in population: 158.7039541752932
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 5
Genome diversity (% unique Plush genomes):	 0.873
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 5
Syntactic diversity (% unique Push programs):	 0.873
Total error diversity:				 0.253
Error (vector) diversity:			 0.297
Behavioral diversity:				 0.299
--- Run Statistics ---
Number of program evaluations used so far: 115000
Number of point (instruction) evaluations so far: 258437806
--- Timings ---
Current time: 1529615629509 milliseconds
Total Time:         476.1 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       159.4 seconds, 33.5%
Fitness Testing:    250.6 seconds, 52.6%
Report:              66.0 seconds, 13.9%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 114
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 115
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 115
;;******************************
;; -*- Number IO problem report - generation 115
Test total error for best: 59998.23050000004
Test mean error for best: 29.99912
;;------------------------------
Outputs of best individual on training cases:
Correct output: -57.4559422311 | Program output: -74.023617    
Correct output: -71.0754923621 | Program output: -65.023617    
Correct output: -66.5176295557 | Program output: -77.023617    
Correct output: 149.3187378    | Program output: 86.028727     
Correct output: -36.5450493525 | Program output: -83.023617    
Correct output: 75.4021928097  | Program output: 48.024907     
Correct output: 52.2615929867  | Program output: 74.027527     
Correct output: -19.2178367434 | Program output: 43.024417     
Correct output: 66.7518906772  | Program output: 1.023617      
Correct output: 7.673605441    | Program output: 27.023607     
Correct output: 23.6294031682  | Program output: 90.029107     
Correct output: -6.1389033433  | Program output: 38.023927     
Correct output: 9.2516366816   | Program output: -82.023627    
Correct output: 31.3251776267  | Program output: -55.023627    
Correct output: 73.3746496408  | Program output: 0.023607      
Correct output: 20.0500553336  | Program output: -19.023627    
Correct output: -23.2820697498 | Program output: 32.023627     
Correct output: 120.1004999359 | Program output: 30.023607     
Correct output: -155.453212395 | Program output: -98.023617    
Correct output: 31.10301576    | Program output: 10.023617     
Correct output: 45.5733057121  | Program output: -39.023607    
Correct output: -68.592783645  | Program output: -78.023607    
Correct output: -125.979392023 | Program output: -70.023627    
Correct output: -91.9273649148 | Program output: -71.023617    
Correct output: -92.5660607267 | Program output: -49.023627    
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_inc} {:instruction float_add} {:instruction float_dup_items} {:instruction integer_dup} {:instruction float_min} {:instruction float_yankdup} {:instruction float_inc} {:instruction integer_sub} {:instruction float_min} {:instruction integer_shove} {:instruction float_inc} {:instruction float_dup_times} {:instruction float_rot} {:instruction print_integer} {:instruction float_mult} {:instruction integer_fromfloat} {:instruction integer_div} {:instruction 27} {:instruction integer_dup_times} {:instruction float_yankdup} {:instruction integer_sub} {:instruction 9} {:instruction float_yankdup} {:instruction integer_stackdepth} {:instruction float_frominteger} {:instruction tag_float_196} {:instruction float_swap} {:instruction float_rot} {:instruction integer_add} {:instruction integer_stackdepth} {:instruction float_add} {:instruction in2} {:instruction integer_add} {:instruction integer_max} {:instruction float_max} {:instruction integer_stackdepth} {:instruction float_flush} {:instruction in2} {:instruction float_frominteger} {:instruction print_float} {:instruction integer_dup} {:instruction integer_fromfloat} {:instruction float_shove} {:instruction integer_add} {:instruction integer_rot} {:instruction print_integer} {:instruction integer_shove} {:instruction integer_yank} {:instruction print_integer} {:instruction integer_yank} {:instruction integer_max} {:instruction float_div} {:instruction integer_stackdepth} {:instruction integer_sub} {:instruction integer_fromfloat} {:instruction integer_stackdepth} {:instruction float_add} {:instruction in2} {:instruction float_mult} {:instruction integer_stackdepth} {:instruction float_rot} {:instruction integer_fromfloat} {:instruction integer_mod} {:instruction print_integer} {:instruction float_min} {:instruction integer_stackdepth} {:instruction tag_float_291} {:instruction 6} {:instruction tag_float_363} {:instruction integer_inc} {:instruction float_swap} {:instruction print_integer})
Best program: (integer_inc float_add float_dup_items integer_dup float_min float_yankdup float_inc integer_sub float_min integer_shove float_inc float_dup_times float_rot print_integer float_mult integer_fromfloat integer_div 27 integer_dup_times float_yankdup integer_sub 9 float_yankdup integer_stackdepth float_frominteger tag_float_196 float_swap float_rot integer_add integer_stackdepth float_add in2 integer_add integer_max float_max integer_stackdepth float_flush in2 float_frominteger print_float integer_dup integer_fromfloat float_shove integer_add integer_rot print_integer integer_shove integer_yank print_integer integer_yank integer_max float_div integer_stackdepth integer_sub integer_fromfloat integer_stackdepth float_add in2 float_mult integer_stackdepth float_rot integer_fromfloat integer_mod print_integer float_min integer_stackdepth tag_float_291 6 tag_float_363 integer_inc float_swap print_integer)
Errors: [16.5677 9 6.0519 8 10.506 10 63.29 7 46.4786 10 27.3773 7 21.7659 9 62.2423 12 65.7283 10 19.35 7 66.3997 9 44.1628 9 91.2753 9 86.3488 9 73.351 10 39.0737 11 55.3057 9 90.0769 11 57.4296 10 21.0794 7 84.5969 10 9.4308 7 55.9558 10 20.9037 7 43.5424 9]
Total: 1404.2905
Mean: 28.08581
Genome size: 72
Size: 73
Percent parens: 0.014
--- Population Statistics ---
Average total errors in population: 4359.297110000003
Median total errors in population: 1407.2864000000002
Error averages by case: (168.17636290000178 9.453 159.59828710000014 8.746 163.28294109999803 10.204 151.17113779999934 7.675 192.788485200001 10.422 118.28266429999805 7.614 113.02331079999914 9.455 149.13228990000025 11.793 144.81040800000014 10.163 110.46874860000081 7.762 152.69355939999988 9.367 132.84909310000117 9.298 229.57374840000136 9.586 225.465527700003 9.498 152.56635849999864 10.275 173.55141929999994 11.286 143.02644909999879 9.588 174.625485499998 10.988 203.5787090000013 10.42 112.03770060000095 7.288 224.24343200000146 10.456 162.3582662000008 7.835 201.94185489999873 10.232 172.2927664999987 7.899 191.13510410000202 9.32)
Error minima by case: (16.5458 8 6.0028 6 10.4841 9 36.6926 6 37.5822 8 15.2134 6 5.2616 8 20.263 9 0.0 6 0.6736 6 6.6294 8 7.1792 7 7.1796 7 4.3252 7 1.0 8 3.0501 8 24.3193 9 9.9109 9 57.3805 9 4.924 5 9.5563 8 9.4079 6 55.8924 9 20.8504 6 43.4933 8)
Average genome size in population (length): 81.441
Average program size in population (points): 82.441
Average percent parens in population: 0.012
Minimum age in population: 157.5649771466853
Maximum age in population: 162.4816094143007
Average age in population: 160.108363838427
Median age in population: 160.1315071494216
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 7
Genome diversity (% unique Plush genomes):	 0.881
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 7
Syntactic diversity (% unique Push programs):	 0.881
Total error diversity:				 0.241
Error (vector) diversity:			 0.291
Behavioral diversity:				 0.291
--- Run Statistics ---
Number of program evaluations used so far: 116000
Number of point (instruction) evaluations so far: 260476406
--- Timings ---
Current time: 1529615633340 milliseconds
Total Time:         480.0 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       160.8 seconds, 33.5%
Fitness Testing:    252.6 seconds, 52.6%
Report:              66.6 seconds, 13.9%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 115
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 116
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 116
;;******************************
;; -*- Number IO problem report - generation 116
Test total error for best: 59998.23050000004
Test mean error for best: 29.99912
;;------------------------------
Outputs of best individual on training cases:
Correct output: -57.4559422311 | Program output: -74.023617    
Correct output: -71.0754923621 | Program output: -65.023617    
Correct output: -66.5176295557 | Program output: -77.023617    
Correct output: 149.3187378    | Program output: 86.028727     
Correct output: -36.5450493525 | Program output: -83.023617    
Correct output: 75.4021928097  | Program output: 48.024907     
Correct output: 52.2615929867  | Program output: 74.027527     
Correct output: -19.2178367434 | Program output: 43.024417     
Correct output: 66.7518906772  | Program output: 1.023617      
Correct output: 7.673605441    | Program output: 27.023607     
Correct output: 23.6294031682  | Program output: 90.029107     
Correct output: -6.1389033433  | Program output: 38.023927     
Correct output: 9.2516366816   | Program output: -82.023627    
Correct output: 31.3251776267  | Program output: -55.023627    
Correct output: 73.3746496408  | Program output: 0.023607      
Correct output: 20.0500553336  | Program output: -19.023627    
Correct output: -23.2820697498 | Program output: 32.023627     
Correct output: 120.1004999359 | Program output: 30.023607     
Correct output: -155.453212395 | Program output: -98.023617    
Correct output: 31.10301576    | Program output: 10.023617     
Correct output: 45.5733057121  | Program output: -39.023607    
Correct output: -68.592783645  | Program output: -78.023607    
Correct output: -125.979392023 | Program output: -70.023627    
Correct output: -91.9273649148 | Program output: -71.023617    
Correct output: -92.5660607267 | Program output: -49.023627    
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_inc} {:instruction float_add} {:instruction integer_flush} {:instruction float_mult} {:instruction integer_shove} {:instruction float_yank} {:instruction integer_dup_items} {:instruction float_yankdup} {:instruction float_rot} {:instruction float_pop} {:instruction float_min} {:instruction print_float} {:instruction integer_div} {:instruction integer_dup} {:instruction float_min} {:instruction integer_shove} {:instruction float_inc} {:instruction float_dup_times} {:instruction float_rot} {:instruction print_integer} {:instruction float_mult} {:instruction integer_fromfloat} {:instruction integer_div} {:instruction 27} {:instruction integer_dup_times} {:instruction float_yankdup} {:instruction integer_sub} {:instruction 9} {:instruction float_yankdup} {:instruction integer_stackdepth} {:instruction float_frominteger} {:instruction tag_float_196} {:instruction float_swap} {:instruction float_rot} {:instruction integer_add} {:instruction integer_stackdepth} {:instruction float_add} {:instruction in2} {:instruction integer_add} {:instruction integer_max} {:instruction float_max} {:instruction integer_stackdepth} {:instruction float_flush} {:instruction in2} {:instruction float_frominteger} {:instruction print_float} {:instruction integer_dup} {:instruction integer_fromfloat} {:instruction float_shove} {:instruction integer_add} {:instruction integer_rot} {:instruction print_integer} {:instruction integer_shove} {:instruction integer_yank} {:instruction print_integer} {:instruction integer_yank} {:instruction integer_max} {:instruction float_div} {:instruction integer_stackdepth} {:instruction integer_sub} {:instruction integer_fromfloat} {:instruction integer_stackdepth} {:instruction float_add} {:instruction in2} {:instruction float_mult} {:instruction integer_stackdepth} {:instruction float_rot} {:instruction integer_fromfloat} {:instruction integer_mod} {:instruction print_integer} {:instruction float_min} {:instruction integer_stackdepth} {:instruction tag_float_291} {:instruction 6} {:instruction tag_float_363} {:instruction integer_inc} {:instruction float_swap} {:instruction print_integer})
Best program: (integer_inc float_add integer_flush float_mult integer_shove float_yank integer_dup_items float_yankdup float_rot float_pop float_min print_float integer_div integer_dup float_min integer_shove float_inc float_dup_times float_rot print_integer float_mult integer_fromfloat integer_div 27 integer_dup_times float_yankdup integer_sub 9 float_yankdup integer_stackdepth float_frominteger tag_float_196 float_swap float_rot integer_add integer_stackdepth float_add in2 integer_add integer_max float_max integer_stackdepth float_flush in2 float_frominteger print_float integer_dup integer_fromfloat float_shove integer_add integer_rot print_integer integer_shove integer_yank print_integer integer_yank integer_max float_div integer_stackdepth integer_sub integer_fromfloat integer_stackdepth float_add in2 float_mult integer_stackdepth float_rot integer_fromfloat integer_mod print_integer float_min integer_stackdepth tag_float_291 6 tag_float_363 integer_inc float_swap print_integer)
Errors: [16.5677 9 6.0519 8 10.506 10 63.29 7 46.4786 10 27.3773 7 21.7659 9 62.2423 12 65.7283 10 19.35 7 66.3997 9 44.1628 9 91.2753 9 86.3488 9 73.351 10 39.0737 11 55.3057 9 90.0769 11 57.4296 10 21.0794 7 84.5969 10 9.4308 7 55.9558 10 20.9037 7 43.5424 9]
Total: 1404.2905
Mean: 28.08581
Genome size: 78
Size: 79
Percent parens: 0.013
--- Population Statistics ---
Average total errors in population: 4272.8614349
Median total errors in population: 1404.2905
Error averages by case: (163.05767490000184 9.445 154.50528960000025 8.717 158.14850989999763 10.177 150.24154229999894 7.599 187.67610040000125 10.382 116.52668079999782 7.613 112.42411929999918 9.436 148.42078260000042 11.81 141.32222100000013 10.21 108.64003280000097 7.697 150.91739039999956 9.323 132.20954770000134 9.277 224.47725830000144 9.479 220.35669260000319 9.463 146.34975219999825 10.252 170.28616199999985 11.238 142.45454539999858 9.552 172.7034226999979 10.998 198.84134120000138 10.376 111.18890930000103 7.29 218.38207510000163 10.418 157.22620970000094 7.768 197.16847949999843 10.186 167.26100309999836 7.849 186.2366921000022 9.284)
Error minima by case: (16.5458 7 5.9763 6 10.4841 9 36.71 6 35.7211 8 26.3952 6 21.7411 8 18.4787 9 24.2763 9 0.6736 6 3.3706 8 6.431 7 7.2143 7 4.2982 8 16.6534 9 6.9499 9 23.806 9 9.9231 9 57.354 9 4.086 6 9.5663 9 9.4079 6 55.8801 9 20.8282 6 43.4668 8)
Average genome size in population (length): 81.09
Average program size in population (points): 82.09
Average percent parens in population: 0.012
Minimum age in population: 158.5649771466853
Maximum age in population: 163.5843875674523
Average age in population: 161.5411026690897
Median age in population: 161.608812934602
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 9
Genome diversity (% unique Plush genomes):	 0.878
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 9
Syntactic diversity (% unique Push programs):	 0.878
Total error diversity:				 0.252
Error (vector) diversity:			 0.299
Behavioral diversity:				 0.3
--- Run Statistics ---
Number of program evaluations used so far: 117000
Number of point (instruction) evaluations so far: 262506481
--- Timings ---
Current time: 1529615637037 milliseconds
Total Time:         483.7 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       162.0 seconds, 33.5%
Fitness Testing:    254.6 seconds, 52.6%
Report:              67.0 seconds, 13.9%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 116
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 117
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 117
;;******************************
;; -*- Number IO problem report - generation 117
Test total error for best: 59998.23050000004
Test mean error for best: 29.99912
;;------------------------------
Outputs of best individual on training cases:
Correct output: -57.4559422311 | Program output: -74.023617    
Correct output: -71.0754923621 | Program output: -65.023617    
Correct output: -66.5176295557 | Program output: -77.023617    
Correct output: 149.3187378    | Program output: 86.028727     
Correct output: -36.5450493525 | Program output: -83.023617    
Correct output: 75.4021928097  | Program output: 48.024907     
Correct output: 52.2615929867  | Program output: 74.027527     
Correct output: -19.2178367434 | Program output: 43.024417     
Correct output: 66.7518906772  | Program output: 1.023617      
Correct output: 7.673605441    | Program output: 27.023607     
Correct output: 23.6294031682  | Program output: 90.029107     
Correct output: -6.1389033433  | Program output: 38.023927     
Correct output: 9.2516366816   | Program output: -82.023627    
Correct output: 31.3251776267  | Program output: -55.023627    
Correct output: 73.3746496408  | Program output: 0.023607      
Correct output: 20.0500553336  | Program output: -19.023627    
Correct output: -23.2820697498 | Program output: 32.023627     
Correct output: 120.1004999359 | Program output: 30.023607     
Correct output: -155.453212395 | Program output: -98.023617    
Correct output: 31.10301576    | Program output: 10.023617     
Correct output: 45.5733057121  | Program output: -39.023607    
Correct output: -68.592783645  | Program output: -78.023607    
Correct output: -125.979392023 | Program output: -70.023627    
Correct output: -91.9273649148 | Program output: -71.023617    
Correct output: -92.5660607267 | Program output: -49.023627    
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_min} {:instruction integer_inc} {:instruction float_add} {:instruction integer_inc} {:instruction float_add} {:instruction integer_yankdup} {:instruction float_sub} {:instruction integer_inc} {:instruction 96} {:instruction integer_inc} {:instruction integer_rot} {:instruction float_add} {:instruction float_yank} {:instruction float_yankdup} {:instruction float_rot} {:instruction integer_div} {:instruction float_min} {:instruction integer_fromfloat} {:instruction integer_dup_items} {:instruction 27} {:instruction integer_dup_times} {:instruction float_yankdup} {:instruction float_sin} {:instruction 9} {:instruction float_yankdup} {:instruction integer_add} {:instruction integer_stackdepth} {:instruction float_add} {:instruction in2} {:instruction float_cos} {:instruction float_swap} {:instruction float_sin} {:instruction integer_add} {:instruction integer_max} {:instruction integer_stackdepth} {:instruction float_flush} {:instruction in2} {:instruction float_frominteger} {:instruction print_float} {:instruction integer_dup} {:instruction float_shove} {:instruction float_shove} {:instruction integer_inc} {:instruction tagged_206} {:instruction print_integer} {:instruction integer_shove} {:instruction integer_yank} {:instruction print_integer} {:instruction print_integer} {:instruction integer_shove} {:instruction integer_yank} {:instruction print_integer} {:instruction integer_yank} {:instruction float_mult} {:instruction integer_yank} {:instruction integer_stackdepth} {:instruction float_add} {:instruction in2} {:instruction float_mult} {:instruction integer_yank} {:instruction integer_max} {:instruction float_swap} {:instruction integer_stackdepth} {:instruction float_add} {:instruction in2} {:instruction float_mult} {:instruction integer_stackdepth} {:instruction float_frominteger} {:instruction integer_fromfloat} {:instruction integer_mod} {:instruction print_integer} {:instruction float_min} {:instruction integer_stackdepth} {:instruction tag_float_291} {:instruction 6} {:instruction tag_float_352} {:instruction integer_inc} {:instruction float_swap} {:instruction print_integer})
Best program: (float_min integer_inc float_add integer_inc float_add integer_yankdup float_sub integer_inc 96 integer_inc integer_rot float_add float_yank float_yankdup float_rot integer_div float_min integer_fromfloat integer_dup_items 27 integer_dup_times float_yankdup float_sin 9 float_yankdup integer_add integer_stackdepth float_add in2 float_cos float_swap float_sin integer_add integer_max integer_stackdepth float_flush in2 float_frominteger print_float integer_dup float_shove float_shove integer_inc tagged_206 print_integer integer_shove integer_yank print_integer print_integer integer_shove integer_yank print_integer integer_yank float_mult integer_yank integer_stackdepth float_add in2 float_mult integer_yank integer_max float_swap integer_stackdepth float_add in2 float_mult integer_stackdepth float_frominteger integer_fromfloat integer_mod print_integer float_min integer_stackdepth tag_float_291 6 tag_float_352 integer_inc float_swap print_integer)
Errors: [16.5677 9 6.0519 8 10.506 10 63.29 7 46.4786 10 27.3773 7 21.7659 9 62.2423 12 65.7283 10 19.35 7 66.3997 9 44.1628 9 91.2753 9 86.3488 9 73.351 10 39.0737 11 55.3057 9 90.0769 11 57.4296 10 21.0794 7 84.5969 10 9.4308 7 55.9558 10 20.9037 7 43.5424 9]
Total: 1404.2905
Mean: 28.08581
Genome size: 79
Size: 80
Percent parens: 0.013
--- Population Statistics ---
Average total errors in population: 4220.070725700002
Median total errors in population: 1404.2905
Error averages by case: (164.34004490000135 9.444 155.9240898000004 8.703 159.43376079999823 10.196 145.27146589999865 7.627 188.79937800000116 10.391 111.86542799999845 7.612 107.07541319999926 9.455 142.99906909999964 11.764 134.91300580000095 10.153 103.02087860000066 7.741 146.63161889999924 9.386 126.58816820000087 9.284 225.57085140000095 9.494 221.5103033000032 9.478 140.1326648999988 10.267 168.69401169999935 11.244 136.8280190999987 9.565 168.04122859999825 10.972 200.18052760000134 10.353 105.26323270000096 7.292 218.7667956000017 10.415 158.39533480000108 7.813 198.58236119999845 10.182 168.61107689999878 7.861 186.62399670000207 9.316)
Error minima by case: (16.5451 8 5.9755 7 10.4834 9 22.3187 6 37.562 8 1.6638 6 21.7454 8 12.079 9 10.3141 9 0.6736 6 14.6224 7 0.9999 7 0.2246 7 4.3252 7 16.6373 8 3.0501 9 16.1432 9 10.1005 8 57.3532 9 4.904 6 9.5359 9 9.4072 7 55.8794 8 20.8274 6 43.4661 7)
Average genome size in population (length): 81.164
Average program size in population (points): 82.164
Average percent parens in population: 0.012
Minimum age in population: 159.5649771466853
Maximum age in population: 164.9098582230324
Average age in population: 162.9946928868319
Median age in population: 163.047230709154
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 7
Genome diversity (% unique Plush genomes):	 0.887
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 7
Syntactic diversity (% unique Push programs):	 0.887
Total error diversity:				 0.258
Error (vector) diversity:			 0.312
Behavioral diversity:				 0.313
--- Run Statistics ---
Number of program evaluations used so far: 118000
Number of point (instruction) evaluations so far: 264538256
--- Timings ---
Current time: 1529615640782 milliseconds
Total Time:         487.5 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       163.4 seconds, 33.5%
Fitness Testing:    256.5 seconds, 52.6%
Report:              67.5 seconds, 13.8%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 117
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 118
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 118
;;******************************
;; -*- Number IO problem report - generation 118
Test total error for best: 59998.23050000004
Test mean error for best: 29.99912
;;------------------------------
Outputs of best individual on training cases:
Correct output: -57.4559422311 | Program output: -74.023617    
Correct output: -71.0754923621 | Program output: -65.023617    
Correct output: -66.5176295557 | Program output: -77.023617    
Correct output: 149.3187378    | Program output: 86.028727     
Correct output: -36.5450493525 | Program output: -83.023617    
Correct output: 75.4021928097  | Program output: 48.024907     
Correct output: 52.2615929867  | Program output: 74.027527     
Correct output: -19.2178367434 | Program output: 43.024417     
Correct output: 66.7518906772  | Program output: 1.023617      
Correct output: 7.673605441    | Program output: 27.023607     
Correct output: 23.6294031682  | Program output: 90.029107     
Correct output: -6.1389033433  | Program output: 38.023927     
Correct output: 9.2516366816   | Program output: -82.023627    
Correct output: 31.3251776267  | Program output: -55.023627    
Correct output: 73.3746496408  | Program output: 0.023607      
Correct output: 20.0500553336  | Program output: -19.023627    
Correct output: -23.2820697498 | Program output: 32.023627     
Correct output: 120.1004999359 | Program output: 30.023607     
Correct output: -155.453212395 | Program output: -98.023617    
Correct output: 31.10301576    | Program output: 10.023617     
Correct output: 45.5733057121  | Program output: -39.023607    
Correct output: -68.592783645  | Program output: -78.023607    
Correct output: -125.979392023 | Program output: -70.023627    
Correct output: -91.9273649148 | Program output: -71.023617    
Correct output: -92.5660607267 | Program output: -49.023627    
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_inc} {:instruction float_add} {:instruction float_add} {:instruction integer_inc} {:instruction float_add} {:instruction float_yank} {:instruction float_div} {:instruction float_min} {:instruction integer_dup} {:instruction float_min} {:instruction integer_shove} {:instruction integer_dec} {:instruction float_pop} {:instruction float_mult} {:instruction float_pop} {:instruction float_sub} {:instruction integer_dup_items} {:instruction float_yankdup} {:instruction float_frominteger} {:instruction integer_dup_items} {:instruction print_float} {:instruction integer_div} {:instruction 27} {:instruction float_sub} {:instruction float_yankdup} {:instruction integer_sub} {:instruction float_yankdup} {:instruction integer_sub} {:instruction 9} {:instruction float_swap} {:instruction float_yankdup} {:instruction integer_stackdepth} {:instruction float_frominteger} {:instruction tag_float_196} {:instruction float_swap} {:instruction float_rot} {:instruction integer_add} {:instruction integer_stackdepth} {:instruction float_add} {:instruction in2} {:instruction float_mult} {:instruction float_rot} {:instruction integer_add} {:instruction integer_max} {:instruction float_shove} {:instruction integer_stackdepth} {:instruction float_flush} {:instruction in2} {:instruction float_frominteger} {:instruction print_float} {:instruction integer_dup} {:instruction float_shove} {:instruction float_shove} {:instruction integer_inc} {:instruction float_mod} {:instruction integer_dup} {:instruction integer_dup_items} {:instruction print_integer} {:instruction integer_shove} {:instruction integer_yank} {:instruction print_integer} {:instruction integer_yank} {:instruction integer_mod} {:instruction integer_max} {:instruction integer_fromfloat} {:instruction integer_stackdepth} {:instruction float_add} {:instruction in2} {:instruction float_rot} {:instruction integer_yank} {:instruction integer_max} {:instruction float_sin} {:instruction integer_stackdepth} {:instruction float_add} {:instruction in2} {:instruction float_div} {:instruction integer_stackdepth} {:instruction float_frominteger} {:instruction integer_fromfloat} {:instruction integer_mod} {:instruction print_integer} {:instruction float_min} {:instruction integer_stackdepth} {:instruction tag_float_291} {:instruction 6} {:instruction tag_float_172} {:instruction integer_inc} {:instruction float_swap} {:instruction print_integer})
Best program: (integer_inc float_add float_add integer_inc float_add float_yank float_div float_min integer_dup float_min integer_shove integer_dec float_pop float_mult float_pop float_sub integer_dup_items float_yankdup float_frominteger integer_dup_items print_float integer_div 27 float_sub float_yankdup integer_sub float_yankdup integer_sub 9 float_swap float_yankdup integer_stackdepth float_frominteger tag_float_196 float_swap float_rot integer_add integer_stackdepth float_add in2 float_mult float_rot integer_add integer_max float_shove integer_stackdepth float_flush in2 float_frominteger print_float integer_dup float_shove float_shove integer_inc float_mod integer_dup integer_dup_items print_integer integer_shove integer_yank print_integer integer_yank integer_mod integer_max integer_fromfloat integer_stackdepth float_add in2 float_rot integer_yank integer_max float_sin integer_stackdepth float_add in2 float_div integer_stackdepth float_frominteger integer_fromfloat integer_mod print_integer float_min integer_stackdepth tag_float_291 6 tag_float_172 integer_inc float_swap print_integer)
Errors: [16.5677 9 6.0519 8 10.506 10 63.29 7 46.4786 10 27.3773 7 21.7659 9 62.2423 12 65.7283 10 19.35 7 66.3997 9 44.1628 9 91.2753 9 86.3488 9 73.351 10 39.0737 11 55.3057 9 90.0769 11 57.4296 10 21.0794 7 84.5969 10 9.4308 7 55.9558 10 20.9037 7 43.5424 9]
Total: 1404.2905
Mean: 28.08581
Genome size: 89
Size: 90
Percent parens: 0.011
--- Population Statistics ---
Average total errors in population: 4140.876994500003
Median total errors in population: 1404.2905
Error averages by case: (152.2891959000009 9.468 143.62854810000132 8.696 147.35993209999805 10.183 149.1081365999987 7.619 177.27907640000117 10.388 115.78837379999794 7.585 110.76265339999927 9.442 146.73368469999997 11.803 146.53825970000048 10.171 107.6963287000013 7.71 150.46614429999943 9.359 130.39331940000153 9.282 214.74600080000127 9.511 210.57606850000272 9.475 150.68776739999828 10.266 164.68078059999925 11.257 140.51332759999886 9.552 172.19022609999791 10.967 187.53283820000127 10.375 111.13090320000084 7.328 209.2072664000015 10.457 146.29229790000107 7.761 186.87556819999887 10.191 156.52160309999854 7.846 175.87669340000173 9.31)
Error minima by case: (16.5442 8 6.0028 7 10.4825 9 61.3117 6 37.5688 9 25.3952 6 5.2616 8 20.2416 9 24.2986 9 0.6736 6 3.3706 8 7.1626 7 2.2516 7 4.2982 7 16.6759 8 0.9499 9 24.3058 9 83.0935 9 57.3805 9 4.086 6 8.5563 9 9.4072 6 55.9067 9 20.8546 6 43.4933 8)
Average genome size in population (length): 81.493
Average program size in population (points): 82.493
Average percent parens in population: 0.012
Minimum age in population: 160.5649771466853
Maximum age in population: 166.4740231120775
Average age in population: 164.4283579987709
Median age in population: 164.4992228108019
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 7
Genome diversity (% unique Plush genomes):	 0.886
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 7
Syntactic diversity (% unique Push programs):	 0.886
Total error diversity:				 0.246
Error (vector) diversity:			 0.294
Behavioral diversity:				 0.295
--- Run Statistics ---
Number of program evaluations used so far: 119000
Number of point (instruction) evaluations so far: 266578456
--- Timings ---
Current time: 1529615644810 milliseconds
Total Time:         491.5 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       164.9 seconds, 33.6%
Fitness Testing:    258.6 seconds, 52.6%
Report:              67.9 seconds, 13.8%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 118
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 119
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 119
;;******************************
;; -*- Number IO problem report - generation 119
Test total error for best: 59998.23050000004
Test mean error for best: 29.99912
;;------------------------------
Outputs of best individual on training cases:
Correct output: -57.4559422311 | Program output: -74.023617    
Correct output: -71.0754923621 | Program output: -65.023617    
Correct output: -66.5176295557 | Program output: -77.023617    
Correct output: 149.3187378    | Program output: 86.028727     
Correct output: -36.5450493525 | Program output: -83.023617    
Correct output: 75.4021928097  | Program output: 48.024907     
Correct output: 52.2615929867  | Program output: 74.027527     
Correct output: -19.2178367434 | Program output: 43.024417     
Correct output: 66.7518906772  | Program output: 1.023617      
Correct output: 7.673605441    | Program output: 27.023607     
Correct output: 23.6294031682  | Program output: 90.029107     
Correct output: -6.1389033433  | Program output: 38.023927     
Correct output: 9.2516366816   | Program output: -82.023627    
Correct output: 31.3251776267  | Program output: -55.023627    
Correct output: 73.3746496408  | Program output: 0.023607      
Correct output: 20.0500553336  | Program output: -19.023627    
Correct output: -23.2820697498 | Program output: 32.023627     
Correct output: 120.1004999359 | Program output: 30.023607     
Correct output: -155.453212395 | Program output: -98.023617    
Correct output: 31.10301576    | Program output: 10.023617     
Correct output: 45.5733057121  | Program output: -39.023607    
Correct output: -68.592783645  | Program output: -78.023607    
Correct output: -125.979392023 | Program output: -70.023627    
Correct output: -91.9273649148 | Program output: -71.023617    
Correct output: -92.5660607267 | Program output: -49.023627    
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_inc} {:instruction float_add} {:instruction integer_inc} {:instruction float_add} {:instruction float_dup_items} {:instruction integer_dup} {:instruction float_min} {:instruction float_yankdup} {:instruction float_inc} {:instruction integer_sub} {:instruction float_min} {:instruction integer_shove} {:instruction float_inc} {:instruction float_dup_times} {:instruction float_rot} {:instruction print_integer} {:instruction float_mult} {:instruction integer_fromfloat} {:instruction integer_div} {:instruction 27} {:instruction integer_dup_times} {:instruction float_yankdup} {:instruction integer_sub} {:instruction 9} {:instruction float_yankdup} {:instruction integer_stackdepth} {:instruction float_frominteger} {:instruction tag_float_196} {:instruction float_swap} {:instruction float_rot} {:instruction integer_add} {:instruction integer_stackdepth} {:instruction float_add} {:instruction in2} {:instruction integer_add} {:instruction integer_max} {:instruction float_max} {:instruction integer_stackdepth} {:instruction float_flush} {:instruction in2} {:instruction float_frominteger} {:instruction print_float} {:instruction integer_dup} {:instruction float_sin} {:instruction float_shove} {:instruction integer_add} {:instruction integer_rot} {:instruction print_integer} {:instruction integer_shove} {:instruction integer_yank} {:instruction print_integer} {:instruction integer_yank} {:instruction integer_max} {:instruction float_div} {:instruction integer_stackdepth} {:instruction integer_sub} {:instruction integer_fromfloat} {:instruction integer_stackdepth} {:instruction float_add} {:instruction in2} {:instruction float_mult} {:instruction integer_stackdepth} {:instruction float_rot} {:instruction integer_fromfloat} {:instruction integer_mod} {:instruction print_integer} {:instruction float_min} {:instruction integer_stackdepth} {:instruction tag_float_291} {:instruction 6} {:instruction tag_float_363} {:instruction integer_inc} {:instruction float_swap} {:instruction print_integer})
Best program: (integer_inc float_add integer_inc float_add float_dup_items integer_dup float_min float_yankdup float_inc integer_sub float_min integer_shove float_inc float_dup_times float_rot print_integer float_mult integer_fromfloat integer_div 27 integer_dup_times float_yankdup integer_sub 9 float_yankdup integer_stackdepth float_frominteger tag_float_196 float_swap float_rot integer_add integer_stackdepth float_add in2 integer_add integer_max float_max integer_stackdepth float_flush in2 float_frominteger print_float integer_dup float_sin float_shove integer_add integer_rot print_integer integer_shove integer_yank print_integer integer_yank integer_max float_div integer_stackdepth integer_sub integer_fromfloat integer_stackdepth float_add in2 float_mult integer_stackdepth float_rot integer_fromfloat integer_mod print_integer float_min integer_stackdepth tag_float_291 6 tag_float_363 integer_inc float_swap print_integer)
Errors: [16.5677 9 6.0519 8 10.506 10 63.29 7 46.4786 10 27.3773 7 21.7659 9 62.2423 12 65.7283 10 19.35 7 66.3997 9 44.1628 9 91.2753 9 86.3488 9 73.351 10 39.0737 11 55.3057 9 90.0769 11 57.4296 10 21.0794 7 84.5969 10 9.4308 7 55.9558 10 20.9037 7 43.5424 9]
Total: 1404.2905
Mean: 28.08581
Genome size: 74
Size: 75
Percent parens: 0.013
--- Population Statistics ---
Average total errors in population: 4243.338902600003
Median total errors in population: 1404.2905
Error averages by case: (156.70577410000124 9.426 148.06350550000084 8.699 151.75561669999792 10.217 152.60438829999902 7.649 181.60685930000113 10.407 120.18465179999785 7.611 116.1885073999992 9.441 152.45324040000042 11.813 146.68023720000002 10.184 114.71501530000118 7.723 155.7831090999996 9.367 136.24823450000127 9.281 218.96665590000114 9.533 214.72294110000297 9.482 153.3543299999983 10.266 160.4166993999993 11.267 147.31225869999864 9.552 177.2203402999977 10.979 192.66194200000157 10.392 115.25604120000088 7.322 212.32689600000145 10.461 150.70916330000085 7.776 191.1159169999989 10.218 160.85126529999854 7.857 179.21131280000193 9.301)
Error minima by case: (16.5441 8 5.9838 7 10.4824 8 22.3187 6 37.5821 8 26.3952 6 21.7384 8 20.2629 10 24.2708 9 0.6736 6 3.3706 8 7.1789 6 2.2516 7 4.3252 7 16.6481 8 3.0501 9 24.3191 8 6.8995 9 57.3615 9 4.103 5 9.5663 9 9.4072 7 55.8867 9 20.8357 6 43.4734 8)
Average genome size in population (length): 81.26
Average program size in population (points): 82.26
Average percent parens in population: 0.012
Minimum age in population: 163.0664967107682
Maximum age in population: 167.8986315759847
Average age in population: 165.8221723266777
Median age in population: 165.8460891398682
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 6
Genome diversity (% unique Plush genomes):	 0.883
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 6
Syntactic diversity (% unique Push programs):	 0.883
Total error diversity:				 0.24
Error (vector) diversity:			 0.294
Behavioral diversity:				 0.294
--- Run Statistics ---
Number of program evaluations used so far: 120000
Number of point (instruction) evaluations so far: 268613456
--- Timings ---
Current time: 1529615648464 milliseconds
Total Time:         495.1 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       166.1 seconds, 33.6%
Fitness Testing:    260.5 seconds, 52.6%
Report:              68.4 seconds, 13.8%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 119
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 120
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 120
;;******************************
;; -*- Number IO problem report - generation 120
Test total error for best: 59998.23050000004
Test mean error for best: 29.99912
;;------------------------------
Outputs of best individual on training cases:
Correct output: -57.4559422311 | Program output: -74.023617    
Correct output: -71.0754923621 | Program output: -65.023617    
Correct output: -66.5176295557 | Program output: -77.023617    
Correct output: 149.3187378    | Program output: 86.028727     
Correct output: -36.5450493525 | Program output: -83.023617    
Correct output: 75.4021928097  | Program output: 48.024907     
Correct output: 52.2615929867  | Program output: 74.027527     
Correct output: -19.2178367434 | Program output: 43.024417     
Correct output: 66.7518906772  | Program output: 1.023617      
Correct output: 7.673605441    | Program output: 27.023607     
Correct output: 23.6294031682  | Program output: 90.029107     
Correct output: -6.1389033433  | Program output: 38.023927     
Correct output: 9.2516366816   | Program output: -82.023627    
Correct output: 31.3251776267  | Program output: -55.023627    
Correct output: 73.3746496408  | Program output: 0.023607      
Correct output: 20.0500553336  | Program output: -19.023627    
Correct output: -23.2820697498 | Program output: 32.023627     
Correct output: 120.1004999359 | Program output: 30.023607     
Correct output: -155.453212395 | Program output: -98.023617    
Correct output: 31.10301576    | Program output: 10.023617     
Correct output: 45.5733057121  | Program output: -39.023607    
Correct output: -68.592783645  | Program output: -78.023607    
Correct output: -125.979392023 | Program output: -70.023627    
Correct output: -91.9273649148 | Program output: -71.023617    
Correct output: -92.5660607267 | Program output: -49.023627    
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_div} {:instruction integer_min} {:instruction float_rot} {:instruction integer_dup} {:instruction float_min} {:instruction tag_integer_0} {:instruction float_inc} {:instruction float_dup} {:instruction float_mult} {:instruction float_pop} {:instruction integer_swap} {:instruction float_mult} {:instruction integer_pop} {:instruction float_sub} {:instruction integer_dup_items} {:instruction float_sub} {:instruction integer_dup_items} {:instruction print_float} {:instruction integer_div} {:instruction 27} {:instruction float_sub} {:instruction float_yankdup} {:instruction integer_sub} {:instruction float_yankdup} {:instruction integer_sub} {:instruction 9} {:instruction float_yankdup} {:instruction integer_stackdepth} {:instruction float_frominteger} {:instruction tag_float_196} {:instruction float_swap} {:instruction float_rot} {:instruction integer_add} {:instruction integer_stackdepth} {:instruction float_add} {:instruction in2} {:instruction float_mult} {:instruction integer_stackdepth} {:instruction float_frominteger} {:instruction tag_float_196} {:instruction tagged_843} {:instruction integer_swap} {:instruction integer_add} {:instruction integer_max} {:instruction float_max} {:instruction integer_stackdepth} {:instruction float_flush} {:instruction in2} {:instruction float_frominteger} {:instruction float_flush} {:instruction in2} {:instruction float_frominteger} {:instruction print_float} {:instruction integer_dup} {:instruction float_shove} {:instruction float_shove} {:instruction integer_inc} {:instruction float_mod} {:instruction integer_dup} {:instruction integer_dup_items} {:instruction print_integer} {:instruction integer_shove} {:instruction integer_yank} {:instruction print_integer} {:instruction integer_yank} {:instruction integer_mod} {:instruction integer_max} {:instruction integer_fromfloat} {:instruction integer_stackdepth} {:instruction float_add} {:instruction in2} {:instruction float_rot} {:instruction integer_yank} {:instruction integer_max} {:instruction float_sin} {:instruction integer_stackdepth} {:instruction float_add} {:instruction in2} {:instruction float_div} {:instruction integer_stackdepth} {:instruction float_frominteger} {:instruction integer_fromfloat} {:instruction integer_mod} {:instruction print_integer} {:instruction float_min} {:instruction integer_stackdepth} {:instruction tag_float_291} {:instruction 6} {:instruction tag_float_172} {:instruction integer_inc} {:instruction float_swap} {:instruction print_integer})
Best program: (float_div integer_min float_rot integer_dup float_min tag_integer_0 float_inc float_dup float_mult float_pop integer_swap float_mult integer_pop float_sub integer_dup_items float_sub integer_dup_items print_float integer_div 27 float_sub float_yankdup integer_sub float_yankdup integer_sub 9 float_yankdup integer_stackdepth float_frominteger tag_float_196 float_swap float_rot integer_add integer_stackdepth float_add in2 float_mult integer_stackdepth float_frominteger tag_float_196 tagged_843 integer_swap integer_add integer_max float_max integer_stackdepth float_flush in2 float_frominteger float_flush in2 float_frominteger print_float integer_dup float_shove float_shove integer_inc float_mod integer_dup integer_dup_items print_integer integer_shove integer_yank print_integer integer_yank integer_mod integer_max integer_fromfloat integer_stackdepth float_add in2 float_rot integer_yank integer_max float_sin integer_stackdepth float_add in2 float_div integer_stackdepth float_frominteger integer_fromfloat integer_mod print_integer float_min integer_stackdepth tag_float_291 6 tag_float_172 integer_inc float_swap print_integer)
Errors: [16.5677 9 6.0519 8 10.506 10 63.29 7 46.4786 10 27.3773 7 21.7659 9 62.2423 12 65.7283 10 19.35 7 66.3997 9 44.1628 9 91.2753 9 86.3488 9 73.351 10 39.0737 11 55.3057 9 90.0769 11 57.4296 10 21.0794 7 84.5969 10 9.4308 7 55.9558 10 20.9037 7 43.5424 9]
Total: 1404.2905
Mean: 28.08581
Genome size: 92
Size: 93
Percent parens: 0.011
--- Population Statistics ---
Average total errors in population: 4060.570988800003
Median total errors in population: 1404.2905
Error averages by case: (159.3648923000016 9.459 152.0651213000003 8.738 154.60987529999798 10.186 136.67899079999867 7.647 183.39199710000122 10.392 102.60801569999808 7.603 98.13325869999916 9.448 134.00958789999916 11.795 129.49939890000113 10.175 94.79819480000106 7.749 137.85998729999923 9.374 117.49506940000119 9.303 219.29090050000153 9.54 215.22388080000292 9.475 133.6624789999987 10.264 163.6419127999997 11.256 127.94706639999863 9.576 159.53837289999817 10.99 197.09640780000157 10.399 95.55700970000079 7.275 214.28853080000144 10.45 153.65494100000097 7.809 195.06686929999876 10.203 164.96229109999854 7.882 183.8209372000021 9.317)
Error minima by case: (16.5451 8 5.9773 7 10.4834 9 36.7701 6 36.5552 8 26.3952 6 11.2346 8 19.228 10 24.2717 8 0.6736 6 6.6294 8 6.1492 7 2.2516 7 3.7018 7 16.649 9 3.0501 9 23.2821 9 9.9369 9 57.355 9 3.914 5 4.5663 9 9.4072 6 55.8811 9 20.8292 6 43.4678 8)
Average genome size in population (length): 81.061
Average program size in population (points): 82.061
Average percent parens in population: 0.012
Minimum age in population: 164.0664967107682
Maximum age in population: 169.2604773533592
Average age in population: 167.2148789755289
Median age in population: 167.2432807791723
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 7
Genome diversity (% unique Plush genomes):	 0.875
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 7
Syntactic diversity (% unique Push programs):	 0.875
Total error diversity:				 0.26
Error (vector) diversity:			 0.297
Behavioral diversity:				 0.297
--- Run Statistics ---
Number of program evaluations used so far: 121000
Number of point (instruction) evaluations so far: 270643956
--- Timings ---
Current time: 1529615652366 milliseconds
Total Time:         498.9 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       167.5 seconds, 33.6%
Fitness Testing:    262.4 seconds, 52.6%
Report:              68.9 seconds, 13.8%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 120
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 121
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 121
;;******************************
;; -*- Number IO problem report - generation 121
Test total error for best: 59998.23050000004
Test mean error for best: 29.99912
;;------------------------------
Outputs of best individual on training cases:
Correct output: -57.4559422311 | Program output: -74.023617    
Correct output: -71.0754923621 | Program output: -65.023617    
Correct output: -66.5176295557 | Program output: -77.023617    
Correct output: 149.3187378    | Program output: 86.028727     
Correct output: -36.5450493525 | Program output: -83.023617    
Correct output: 75.4021928097  | Program output: 48.024907     
Correct output: 52.2615929867  | Program output: 74.027527     
Correct output: -19.2178367434 | Program output: 43.024417     
Correct output: 66.7518906772  | Program output: 1.023617      
Correct output: 7.673605441    | Program output: 27.023607     
Correct output: 23.6294031682  | Program output: 90.029107     
Correct output: -6.1389033433  | Program output: 38.023927     
Correct output: 9.2516366816   | Program output: -82.023627    
Correct output: 31.3251776267  | Program output: -55.023627    
Correct output: 73.3746496408  | Program output: 0.023607      
Correct output: 20.0500553336  | Program output: -19.023627    
Correct output: -23.2820697498 | Program output: 32.023627     
Correct output: 120.1004999359 | Program output: 30.023607     
Correct output: -155.453212395 | Program output: -98.023617    
Correct output: 31.10301576    | Program output: 10.023617     
Correct output: 45.5733057121  | Program output: -39.023607    
Correct output: -68.592783645  | Program output: -78.023607    
Correct output: -125.979392023 | Program output: -70.023627    
Correct output: -91.9273649148 | Program output: -71.023617    
Correct output: -92.5660607267 | Program output: -49.023627    
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_inc} {:instruction float_mod} {:instruction float_yank} {:instruction float_add} {:instruction integer_yankdup} {:instruction float_sub} {:instruction integer_inc} {:instruction float_add} {:instruction float_swap} {:instruction integer_inc} {:instruction float_dec} {:instruction print_integer} {:instruction print_integer} {:instruction float_min} {:instruction float_sin} {:instruction integer_div} {:instruction 27} {:instruction float_yankdup} {:instruction integer_sub} {:instruction 9} {:instruction float_rot} {:instruction integer_add} {:instruction integer_stackdepth} {:instruction float_mod} {:instruction in2} {:instruction integer_add} {:instruction integer_max} {:instruction float_dec} {:instruction integer_stackdepth} {:instruction float_flush} {:instruction in2} {:instruction float_frominteger} {:instruction print_float} {:instruction integer_dup} {:instruction float_shove} {:instruction float_shove} {:instruction integer_add} {:instruction float_mod} {:instruction integer_dup} {:instruction integer_dup_items} {:instruction print_integer} {:instruction integer_min} {:instruction integer_yank} {:instruction print_integer} {:instruction float_dec} {:instruction print_integer} {:instruction integer_max} {:instruction print_integer} {:instruction integer_max} {:instruction integer_yank} {:instruction integer_fromfloat} {:instruction integer_stackdepth} {:instruction float_pop} {:instruction in2} {:instruction float_mult} {:instruction integer_yank} {:instruction integer_max} {:instruction float_sin} {:instruction integer_stackdepth} {:instruction float_add} {:instruction in2} {:instruction float_mult} {:instruction integer_stackdepth} {:instruction float_frominteger} {:instruction integer_fromfloat} {:instruction integer_mod} {:instruction print_integer} {:instruction tag_integer_656} {:instruction integer_stackdepth} {:instruction tag_float_291} {:instruction 6} {:instruction tag_float_291} {:instruction integer_inc} {:instruction float_swap} {:instruction print_integer})
Best program: (integer_inc float_mod float_yank float_add integer_yankdup float_sub integer_inc float_add float_swap integer_inc float_dec print_integer print_integer float_min float_sin integer_div 27 float_yankdup integer_sub 9 float_rot integer_add integer_stackdepth float_mod in2 integer_add integer_max float_dec integer_stackdepth float_flush in2 float_frominteger print_float integer_dup float_shove float_shove integer_add float_mod integer_dup integer_dup_items print_integer integer_min integer_yank print_integer float_dec print_integer integer_max print_integer integer_max integer_yank integer_fromfloat integer_stackdepth float_pop in2 float_mult integer_yank integer_max float_sin integer_stackdepth float_add in2 float_mult integer_stackdepth float_frominteger integer_fromfloat integer_mod print_integer tag_integer_656 integer_stackdepth tag_float_291 6 tag_float_291 integer_inc float_swap print_integer)
Errors: [16.5677 9 6.0519 8 10.506 10 63.29 7 46.4786 10 27.3773 7 21.7659 9 62.2423 12 65.7283 10 19.35 7 66.3997 9 44.1628 9 91.2753 9 86.3488 9 73.351 10 39.0737 11 55.3057 9 90.0769 11 57.4296 10 21.0794 7 84.5969 10 9.4308 7 55.9558 10 20.9037 7 43.5424 9]
Total: 1404.2905
Mean: 28.08581
Genome size: 75
Size: 76
Percent parens: 0.013
--- Population Statistics ---
Average total errors in population: 4239.945039600003
Median total errors in population: 1404.2905
Error averages by case: (162.10284870000135 9.449 153.46507820000045 8.68 157.1489152999981 10.183 148.2006047999991 7.632 186.9760889000012 10.37 115.42016369999796 7.569 110.2569272999992 9.459 145.63676210000034 11.772 140.28040780000018 10.148 106.74071350000082 7.748 150.23688739999977 9.379 129.2313306000015 9.268 224.07238290000137 9.506 219.88245540000293 9.476 146.19350199999857 10.236 169.6005182999995 11.237 139.44832559999892 9.498 170.96987679999793 10.966 197.69919970000146 10.372 108.2699918000008 7.298 218.59053410000143 10.428 156.2125413000009 7.743 196.11805459999886 10.182 166.21168409999862 7.815 185.27624470000188 9.289)
Error minima by case: (16.5458 8 5.9845 7 10.4841 8 36.7049 6 37.5824 9 26.3032 6 21.7411 8 20.2633 8 1.0 5 0.6736 6 14.6011 8 7.1793 7 0.2234 7 4.3252 7 0.0 5 3.0501 9 24.3194 8 9.9231 8 57.3622 9 4.914 6 9.5006 9 9.4079 6 55.8874 9 20.8364 7 43.4741 7)
Average genome size in population (length): 80.777
Average program size in population (points): 81.777
Average percent parens in population: 0.012
Minimum age in population: 166.254289800195
Maximum age in population: 170.46947053441
Average age in population: 168.5835692615652
Median age in population: 168.6000615574586
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 7
Genome diversity (% unique Plush genomes):	 0.884
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 7
Syntactic diversity (% unique Push programs):	 0.884
Total error diversity:				 0.238
Error (vector) diversity:			 0.284
Behavioral diversity:				 0.284
--- Run Statistics ---
Number of program evaluations used so far: 122000
Number of point (instruction) evaluations so far: 272667631
--- Timings ---
Current time: 1529615656270 milliseconds
Total Time:         502.9 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       169.0 seconds, 33.6%
Fitness Testing:    264.4 seconds, 52.6%
Report:              69.4 seconds, 13.8%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 121
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 122
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 122
;;******************************
;; -*- Number IO problem report - generation 122
Test total error for best: 59998.23050000004
Test mean error for best: 29.99912
;;------------------------------
Outputs of best individual on training cases:
Correct output: -57.4559422311 | Program output: -74.023617    
Correct output: -71.0754923621 | Program output: -65.023617    
Correct output: -66.5176295557 | Program output: -77.023617    
Correct output: 149.3187378    | Program output: 86.028727     
Correct output: -36.5450493525 | Program output: -83.023617    
Correct output: 75.4021928097  | Program output: 48.024907     
Correct output: 52.2615929867  | Program output: 74.027527     
Correct output: -19.2178367434 | Program output: 43.024417     
Correct output: 66.7518906772  | Program output: 1.023617      
Correct output: 7.673605441    | Program output: 27.023607     
Correct output: 23.6294031682  | Program output: 90.029107     
Correct output: -6.1389033433  | Program output: 38.023927     
Correct output: 9.2516366816   | Program output: -82.023627    
Correct output: 31.3251776267  | Program output: -55.023627    
Correct output: 73.3746496408  | Program output: 0.023607      
Correct output: 20.0500553336  | Program output: -19.023627    
Correct output: -23.2820697498 | Program output: 32.023627     
Correct output: 120.1004999359 | Program output: 30.023607     
Correct output: -155.453212395 | Program output: -98.023617    
Correct output: 31.10301576    | Program output: 10.023617     
Correct output: 45.5733057121  | Program output: -39.023607    
Correct output: -68.592783645  | Program output: -78.023607    
Correct output: -125.979392023 | Program output: -70.023627    
Correct output: -91.9273649148 | Program output: -71.023617    
Correct output: -92.5660607267 | Program output: -49.023627    
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_inc} {:instruction float_add} {:instruction in2} {:instruction integer_inc} {:instruction float_add} {:instruction float_yank} {:instruction float_div} {:instruction float_min} {:instruction integer_dup} {:instruction float_min} {:instruction integer_shove} {:instruction integer_dec} {:instruction float_pop} {:instruction float_mult} {:instruction float_pop} {:instruction float_sub} {:instruction integer_dup_items} {:instruction float_yankdup} {:instruction float_frominteger} {:instruction float_dup_times} {:instruction float_rot} {:instruction print_integer} {:instruction float_min} {:instruction float_rot} {:instruction print_integer} {:instruction float_min} {:instruction print_float} {:instruction integer_div} {:instruction 27} {:instruction float_sub} {:instruction float_yankdup} {:instruction float_mod} {:instruction 9} {:instruction integer_add} {:instruction integer_stackdepth} {:instruction float_add} {:instruction in2} {:instruction tag_float_196} {:instruction float_swap} {:instruction float_rot} {:instruction integer_add} {:instruction integer_max} {:instruction integer_max} {:instruction float_yank} {:instruction integer_stackdepth} {:instruction float_min} {:instruction in2} {:instruction float_frominteger} {:instruction print_float} {:instruction integer_dup} {:instruction float_shove} {:instruction float_shove} {:instruction integer_inc} {:instruction float_mod} {:instruction integer_dup} {:instruction integer_dup_items} {:instruction print_integer} {:instruction integer_swap} {:instruction integer_yank} {:instruction print_integer} {:instruction integer_yank} {:instruction float_swap} {:instruction integer_max} {:instruction integer_fromfloat} {:instruction integer_dup_items} {:instruction float_add} {:instruction in2} {:instruction float_mult} {:instruction integer_yank} {:instruction integer_max} {:instruction float_sin} {:instruction integer_stackdepth} {:instruction float_add} {:instruction in2} {:instruction float_mult} {:instruction integer_stackdepth} {:instruction float_frominteger} {:instruction integer_stackdepth} {:instruction float_frominteger} {:instruction integer_fromfloat} {:instruction integer_mod} {:instruction print_integer} {:instruction float_dec} {:instruction integer_div} {:instruction tag_float_291} {:instruction 7} {:instruction float_swap} {:instruction print_integer})
Best program: (integer_inc float_add in2 integer_inc float_add float_yank float_div float_min integer_dup float_min integer_shove integer_dec float_pop float_mult float_pop float_sub integer_dup_items float_yankdup float_frominteger float_dup_times float_rot print_integer float_min float_rot print_integer float_min print_float integer_div 27 float_sub float_yankdup float_mod 9 integer_add integer_stackdepth float_add in2 tag_float_196 float_swap float_rot integer_add integer_max integer_max float_yank integer_stackdepth float_min in2 float_frominteger print_float integer_dup float_shove float_shove integer_inc float_mod integer_dup integer_dup_items print_integer integer_swap integer_yank print_integer integer_yank float_swap integer_max integer_fromfloat integer_dup_items float_add in2 float_mult integer_yank integer_max float_sin integer_stackdepth float_add in2 float_mult integer_stackdepth float_frominteger integer_stackdepth float_frominteger integer_fromfloat integer_mod print_integer float_dec integer_div tag_float_291 7 float_swap print_integer)
Errors: [16.5677 9 6.0519 8 10.506 10 63.29 7 46.4786 10 27.3773 7 21.7659 9 62.2423 12 65.7283 10 19.35 7 66.3997 9 44.1628 9 91.2753 9 86.3488 9 73.351 10 39.0737 11 55.3057 9 90.0769 11 57.4296 10 21.0794 7 84.5969 10 9.4308 7 55.9558 10 20.9037 7 43.5424 9]
Total: 1404.2905
Mean: 28.08581
Genome size: 88
Size: 89
Percent parens: 0.011
--- Population Statistics ---
Average total errors in population: 3530.1189876000035
Median total errors in population: 1404.2905
Error averages by case: (128.57939119999975 9.418 120.62306940000157 8.647 123.48493129999828 10.176 123.2710835999981 7.619 154.18554890000107 10.359 89.19371869999881 7.589 84.52971729999933 9.442 121.609402199999 11.784 119.25031320000109 10.182 81.7129543000001 7.677 125.27547929999865 9.344 104.78575370000101 9.291 192.52452340000093 9.485 188.40423070000273 9.469 126.35254539999868 10.233 137.59334619999885 11.205 115.31955429999871 9.539 147.44803039999897 10.939 166.69474820000156 10.348 82.50669470000078 7.306 186.34279420000144 10.441 122.51780430000098 7.721 164.97291119999875 10.187 133.86383589999892 7.784 153.62760560000189 9.264)
Error minima by case: (16.5441 7 5.9828 7 10.4834 9 63.226 6 36.556 9 27.3032 6 21.7384 8 19.2288 9 24.2651 9 0.6736 6 2.3706 7 6.1509 7 2.2516 7 4.3252 7 16.6324 8 4.0501 9 23.2941 9 90.0078 9 57.3605 9 5.103 5 29.5733 9 9.4072 6 55.8867 9 20.8346 6 43.4733 8)
Average genome size in population (length): 80.457
Average program size in population (points): 81.457
Average percent parens in population: 0.012
Minimum age in population: 167.8114291856012
Maximum age in population: 172.0074435794349
Average age in population: 169.9570543776857
Median age in population: 169.9910580635097
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 5
Genome diversity (% unique Plush genomes):	 0.88
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 5
Syntactic diversity (% unique Push programs):	 0.88
Total error diversity:				 0.251
Error (vector) diversity:			 0.287
Behavioral diversity:				 0.287
--- Run Statistics ---
Number of program evaluations used so far: 123000
Number of point (instruction) evaluations so far: 274682981
--- Timings ---
Current time: 1529615660287 milliseconds
Total Time:         506.9 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       170.3 seconds, 33.6%
Fitness Testing:    266.6 seconds, 52.6%
Report:              69.9 seconds, 13.8%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 122
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 123
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 123
;;******************************
;; -*- Number IO problem report - generation 123
Test total error for best: 59998.23050000004
Test mean error for best: 29.99912
;;------------------------------
Outputs of best individual on training cases:
Correct output: -57.4559422311 | Program output: -74.023617    
Correct output: -71.0754923621 | Program output: -65.023617    
Correct output: -66.5176295557 | Program output: -77.023617    
Correct output: 149.3187378    | Program output: 86.028727     
Correct output: -36.5450493525 | Program output: -83.023617    
Correct output: 75.4021928097  | Program output: 48.024907     
Correct output: 52.2615929867  | Program output: 74.027527     
Correct output: -19.2178367434 | Program output: 43.024417     
Correct output: 66.7518906772  | Program output: 1.023617      
Correct output: 7.673605441    | Program output: 27.023607     
Correct output: 23.6294031682  | Program output: 90.029107     
Correct output: -6.1389033433  | Program output: 38.023927     
Correct output: 9.2516366816   | Program output: -82.023627    
Correct output: 31.3251776267  | Program output: -55.023627    
Correct output: 73.3746496408  | Program output: 0.023607      
Correct output: 20.0500553336  | Program output: -19.023627    
Correct output: -23.2820697498 | Program output: 32.023627     
Correct output: 120.1004999359 | Program output: 30.023607     
Correct output: -155.453212395 | Program output: -98.023617    
Correct output: 31.10301576    | Program output: 10.023617     
Correct output: 45.5733057121  | Program output: -39.023607    
Correct output: -68.592783645  | Program output: -78.023607    
Correct output: -125.979392023 | Program output: -70.023627    
Correct output: -91.9273649148 | Program output: -71.023617    
Correct output: -92.5660607267 | Program output: -49.023627    
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_inc} {:instruction integer_dup} {:instruction float_min} {:instruction float_yank} {:instruction integer_dup} {:instruction float_min} {:instruction integer_shove} {:instruction float_pop} {:instruction integer_sub} {:instruction integer_min} {:instruction float_dup} {:instruction float_mod} {:instruction float_dup_times} {:instruction integer_dup_items} {:instruction print_float} {:instruction float_dup} {:instruction integer_div} {:instruction float_sub} {:instruction integer_dup_items} {:instruction print_float} {:instruction integer_div} {:instruction 27} {:instruction float_sub} {:instruction float_yankdup} {:instruction integer_sub} {:instruction float_yankdup} {:instruction integer_mod} {:instruction 9} {:instruction integer_rot} {:instruction integer_add} {:instruction integer_stackdepth} {:instruction float_add} {:instruction float_add} {:instruction in2} {:instruction integer_add} {:instruction integer_max} {:instruction float_max} {:instruction integer_stackdepth} {:instruction float_flush} {:instruction in2} {:instruction float_frominteger} {:instruction print_float} {:instruction integer_dup} {:instruction integer_fromfloat} {:instruction float_shove} {:instruction integer_add} {:instruction integer_rot} {:instruction print_integer} {:instruction integer_shove} {:instruction integer_yank} {:instruction print_integer} {:instruction print_integer} {:instruction integer_max} {:instruction integer_max} {:instruction float_mult} {:instruction integer_stackdepth} {:instruction float_frominteger} {:instruction in2} {:instruction tagged_175} {:instruction integer_yank} {:instruction integer_max} {:instruction integer_dup_times} {:instruction integer_stackdepth} {:instruction float_add} {:instruction in2} {:instruction float_mult} {:instruction integer_stackdepth} {:instruction float_frominteger} {:instruction integer_fromfloat} {:instruction integer_mod} {:instruction print_integer} {:instruction float_min} {:instruction float_mult} {:instruction tag_float_291} {:instruction 6} {:instruction tag_float_291} {:instruction integer_inc} {:instruction float_swap} {:instruction print_integer})
Best program: (float_inc integer_dup float_min float_yank integer_dup float_min integer_shove float_pop integer_sub integer_min float_dup float_mod float_dup_times integer_dup_items print_float float_dup integer_div float_sub integer_dup_items print_float integer_div 27 float_sub float_yankdup integer_sub float_yankdup integer_mod 9 integer_rot integer_add integer_stackdepth float_add float_add in2 integer_add integer_max float_max integer_stackdepth float_flush in2 float_frominteger print_float integer_dup integer_fromfloat float_shove integer_add integer_rot print_integer integer_shove integer_yank print_integer print_integer integer_max integer_max float_mult integer_stackdepth float_frominteger in2 tagged_175 integer_yank integer_max integer_dup_times integer_stackdepth float_add in2 float_mult integer_stackdepth float_frominteger integer_fromfloat integer_mod print_integer float_min float_mult tag_float_291 6 tag_float_291 integer_inc float_swap print_integer)
Errors: [16.5677 9 6.0519 8 10.506 10 63.29 7 46.4786 10 27.3773 7 21.7659 9 62.2423 12 65.7283 10 19.35 7 66.3997 9 44.1628 9 91.2753 9 86.3488 9 73.351 10 39.0737 11 55.3057 9 90.0769 11 57.4296 10 21.0794 7 84.5969 10 9.4308 7 55.9558 10 20.9037 7 43.5424 9]
Total: 1404.2905
Mean: 28.08581
Genome size: 79
Size: 80
Percent parens: 0.013
--- Population Statistics ---
Average total errors in population: 4274.062090400002
Median total errors in population: 1404.2905
Error averages by case: (161.89140060000148 9.393 154.07607650000043 8.681 156.90810999999778 10.163 149.47685569999894 7.626 186.95728760000117 10.374 116.41247279999797 7.547 113.59326849999923 9.439 149.6890048000002 11.812 142.54499930000026 10.202 110.85167390000106 7.746 153.66061189999974 9.347 133.2857985000013 9.274 224.3234326000013 9.528 219.9225633000031 9.473 145.64225609999852 10.279 170.1303805999995 11.267 143.45657569999867 9.546 172.65400669999806 10.972 198.45846070000132 10.382 111.37288820000094 7.31 217.7440042000016 10.443 156.002416900001 7.735 196.6752260999988 10.182 166.83490339999852 7.823 185.691415800002 9.262)
Error minima by case: (16.5442 8 6.0028 7 10.4825 9 22.3187 6 36.562 9 1.6638 6 16.2346 8 19.2348 9 10.3141 9 0.6736 6 12.3776 7 6.1659 7 8.2133 7 4.3252 7 3.6914 8 6.9499 9 23.3091 9 9.9202 9 57.3805 9 4.914 6 9.5663 9 9.4073 7 55.9067 9 20.8546 6 43.4933 8)
Average genome size in population (length): 80.276
Average program size in population (points): 81.276
Average percent parens in population: 0.012
Minimum age in population: 168.8114291856012
Maximum age in population: 173.3985879829173
Average age in population: 171.3850815702192
Median age in population: 171.4057113709472
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 5
Genome diversity (% unique Plush genomes):	 0.882
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 5
Syntactic diversity (% unique Push programs):	 0.882
Total error diversity:				 0.246
Error (vector) diversity:			 0.294
Behavioral diversity:				 0.294
--- Run Statistics ---
Number of program evaluations used so far: 124000
Number of point (instruction) evaluations so far: 276693881
--- Timings ---
Current time: 1529615664053 milliseconds
Total Time:         510.7 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       171.7 seconds, 33.6%
Fitness Testing:    268.5 seconds, 52.6%
Report:              70.4 seconds, 13.8%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 123
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 124
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 124
;;******************************
;; -*- Number IO problem report - generation 124
Test total error for best: 59998.23050000004
Test mean error for best: 29.99912
;;------------------------------
Outputs of best individual on training cases:
Correct output: -57.4559422311 | Program output: -74.023617    
Correct output: -71.0754923621 | Program output: -65.023617    
Correct output: -66.5176295557 | Program output: -77.023617    
Correct output: 149.3187378    | Program output: 86.028727     
Correct output: -36.5450493525 | Program output: -83.023617    
Correct output: 75.4021928097  | Program output: 48.024907     
Correct output: 52.2615929867  | Program output: 74.027527     
Correct output: -19.2178367434 | Program output: 43.024417     
Correct output: 66.7518906772  | Program output: 1.023617      
Correct output: 7.673605441    | Program output: 27.023607     
Correct output: 23.6294031682  | Program output: 90.029107     
Correct output: -6.1389033433  | Program output: 38.023927     
Correct output: 9.2516366816   | Program output: -82.023627    
Correct output: 31.3251776267  | Program output: -55.023627    
Correct output: 73.3746496408  | Program output: 0.023607      
Correct output: 20.0500553336  | Program output: -19.023627    
Correct output: -23.2820697498 | Program output: 32.023627     
Correct output: 120.1004999359 | Program output: 30.023607     
Correct output: -155.453212395 | Program output: -98.023617    
Correct output: 31.10301576    | Program output: 10.023617     
Correct output: 45.5733057121  | Program output: -39.023607    
Correct output: -68.592783645  | Program output: -78.023607    
Correct output: -125.979392023 | Program output: -70.023627    
Correct output: -91.9273649148 | Program output: -71.023617    
Correct output: -92.5660607267 | Program output: -49.023627    
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_inc} {:instruction float_dup} {:instruction integer_mod} {:instruction integer_add} {:instruction print_integer} {:instruction float_mult} {:instruction float_dup_items} {:instruction integer_dup} {:instruction float_min} {:instruction float_dup_times} {:instruction float_inc} {:instruction float_dup} {:instruction float_mult} {:instruction float_mult} {:instruction print_integer} {:instruction float_yankdup} {:instruction float_pop} {:instruction float_sub} {:instruction integer_dup_items} {:instruction float_yankdup} {:instruction float_rot} {:instruction float_dup_times} {:instruction float_rot} {:instruction print_integer} {:instruction float_min} {:instruction print_float} {:instruction integer_div} {:instruction 27} {:instruction float_sub} {:instruction float_mult} {:instruction integer_sub} {:instruction 9} {:instruction float_yankdup} {:instruction integer_stackdepth} {:instruction float_frominteger} {:instruction tag_float_196} {:instruction float_swap} {:instruction float_rot} {:instruction integer_add} {:instruction integer_stackdepth} {:instruction float_add} {:instruction in2} {:instruction tag_float_277} {:instruction float_swap} {:instruction float_rot} {:instruction integer_add} {:instruction integer_max} {:instruction integer_max} {:instruction float_max} {:instruction integer_stackdepth} {:instruction float_min} {:instruction in2} {:instruction float_frominteger} {:instruction print_float} {:instruction integer_dup} {:instruction float_shove} {:instruction float_pop} {:instruction integer_inc} {:instruction float_mod} {:instruction integer_dup} {:instruction float_add} {:instruction print_integer} {:instruction float_dup_times} {:instruction integer_yank} {:instruction print_integer} {:instruction integer_yank} {:instruction integer_fromfloat} {:instruction float_sin} {:instruction float_mult} {:instruction integer_add} {:instruction integer_max} {:instruction tagged_175} {:instruction integer_yank} {:instruction integer_max} {:instruction float_mod} {:instruction integer_stackdepth} {:instruction float_add} {:instruction in2} {:instruction float_mult} {:instruction integer_stackdepth} {:instruction float_pop} {:instruction integer_fromfloat} {:instruction integer_mod} {:instruction print_integer} {:instruction float_yankdup} {:instruction float_mult} {:instruction tag_float_291} {:instruction 6} {:instruction float_pop} {:instruction integer_inc} {:instruction float_swap} {:instruction print_integer})
Best program: (integer_inc float_dup integer_mod integer_add print_integer float_mult float_dup_items integer_dup float_min float_dup_times float_inc float_dup float_mult float_mult print_integer float_yankdup float_pop float_sub integer_dup_items float_yankdup float_rot float_dup_times float_rot print_integer float_min print_float integer_div 27 float_sub float_mult integer_sub 9 float_yankdup integer_stackdepth float_frominteger tag_float_196 float_swap float_rot integer_add integer_stackdepth float_add in2 tag_float_277 float_swap float_rot integer_add integer_max integer_max float_max integer_stackdepth float_min in2 float_frominteger print_float integer_dup float_shove float_pop integer_inc float_mod integer_dup float_add print_integer float_dup_times integer_yank print_integer integer_yank integer_fromfloat float_sin float_mult integer_add integer_max tagged_175 integer_yank integer_max float_mod integer_stackdepth float_add in2 float_mult integer_stackdepth float_pop integer_fromfloat integer_mod print_integer float_yankdup float_mult tag_float_291 6 float_pop integer_inc float_swap print_integer)
Errors: [16.5677 9 6.0519 8 10.506 10 63.29 7 46.4786 10 27.3773 7 21.7659 9 62.2423 12 65.7283 10 19.35 7 66.3997 9 44.1628 9 91.2753 9 86.3488 9 73.351 10 39.0737 11 55.3057 9 90.0769 11 57.4296 10 21.0794 7 84.5969 10 9.4308 7 55.9558 10 20.9037 7 43.5424 9]
Total: 1404.2905
Mean: 28.08581
Genome size: 92
Size: 93
Percent parens: 0.011
--- Population Statistics ---
Average total errors in population: 4004.4112206000027
Median total errors in population: 1404.2905
Error averages by case: (153.3608210000007 9.473 144.70471800000107 8.716 148.42316129999833 10.208 136.7003579999985 7.641 178.29986010000107 10.403 103.52531739999847 7.576 98.3248255999993 9.488 135.2599998999993 11.792 132.49791510000088 10.172 95.88563120000062 7.738 138.77985349999906 9.392 118.6757582000012 9.282 215.56817490000083 9.538 211.32991720000274 9.504 137.60797359999876 10.259 162.67352729999917 11.284 128.96833229999876 9.562 160.77823619999867 10.995 189.5222208000015 10.393 97.33782090000071 7.329 210.05559540000147 10.488 147.47212580000092 7.774 187.85375659999903 10.216 157.585019899999 7.857 176.83730040000154 9.303)
Error minima by case: (16.5442 8 5.9764 7 10.4825 9 22.3187 6 36.562 8 22.5978 6 16.2546 8 19.2348 6 1.0 4 0.6736 6 3.3706 8 6.1659 6 0.2246 6 4.3252 7 0.0 3 2.0501 7 23.3091 6 6.8995 6 57.3539 7 4.103 5 9.5563 7 9.4073 6 55.8803 7 20.8279 6 43.4669 7)
Average genome size in population (length): 80.197
Average program size in population (points): 81.197
Average percent parens in population: 0.012
Minimum age in population: 170.4290349054508
Maximum age in population: 174.6694923968236
Average age in population: 172.7416260083133
Median age in population: 172.7781728014686
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 5
Genome diversity (% unique Plush genomes):	 0.899
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 5
Syntactic diversity (% unique Push programs):	 0.899
Total error diversity:				 0.244
Error (vector) diversity:			 0.284
Behavioral diversity:				 0.284
--- Run Statistics ---
Number of program evaluations used so far: 125000
Number of point (instruction) evaluations so far: 278702781
--- Timings ---
Current time: 1529615667907 milliseconds
Total Time:         514.6 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       173.1 seconds, 33.6%
Fitness Testing:    270.4 seconds, 52.6%
Report:              70.9 seconds, 13.8%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 124
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 125
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 125
;;******************************
;; -*- Number IO problem report - generation 125
Test total error for best: 59998.23050000004
Test mean error for best: 29.99912
;;------------------------------
Outputs of best individual on training cases:
Correct output: -57.4559422311 | Program output: -74.023617    
Correct output: -71.0754923621 | Program output: -65.023617    
Correct output: -66.5176295557 | Program output: -77.023617    
Correct output: 149.3187378    | Program output: 86.028727     
Correct output: -36.5450493525 | Program output: -83.023617    
Correct output: 75.4021928097  | Program output: 48.024907     
Correct output: 52.2615929867  | Program output: 74.027527     
Correct output: -19.2178367434 | Program output: 43.024417     
Correct output: 66.7518906772  | Program output: 1.023617      
Correct output: 7.673605441    | Program output: 27.023607     
Correct output: 23.6294031682  | Program output: 90.029107     
Correct output: -6.1389033433  | Program output: 38.023927     
Correct output: 9.2516366816   | Program output: -82.023627    
Correct output: 31.3251776267  | Program output: -55.023627    
Correct output: 73.3746496408  | Program output: 0.023607      
Correct output: 20.0500553336  | Program output: -19.023627    
Correct output: -23.2820697498 | Program output: 32.023627     
Correct output: 120.1004999359 | Program output: 30.023607     
Correct output: -155.453212395 | Program output: -98.023617    
Correct output: 31.10301576    | Program output: 10.023617     
Correct output: 45.5733057121  | Program output: -39.023607    
Correct output: -68.592783645  | Program output: -78.023607    
Correct output: -125.979392023 | Program output: -70.023627    
Correct output: -91.9273649148 | Program output: -71.023617    
Correct output: -92.5660607267 | Program output: -49.023627    
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_min} {:instruction integer_shove} {:instruction integer_div} {:instruction 27} {:instruction float_sub} {:instruction float_mult} {:instruction float_mult} {:instruction integer_rot} {:instruction float_pop} {:instruction integer_sub} {:instruction 9} {:instruction float_yankdup} {:instruction integer_stackdepth} {:instruction float_frominteger} {:instruction tag_float_196} {:instruction float_swap} {:instruction float_rot} {:instruction integer_add} {:instruction integer_stackdepth} {:instruction float_add} {:instruction in2} {:instruction float_mult} {:instruction float_rot} {:instruction integer_add} {:instruction integer_max} {:instruction integer_swap} {:instruction integer_stackdepth} {:instruction float_mult} {:instruction in2} {:instruction float_frominteger} {:instruction tag_float_196} {:instruction float_swap} {:instruction float_rot} {:instruction in2} {:instruction float_frominteger} {:instruction in2} {:instruction float_frominteger} {:instruction print_float} {:instruction integer_dup} {:instruction float_min} {:instruction integer_inc} {:instruction float_mod} {:instruction integer_dup} {:instruction integer_dup_items} {:instruction print_integer} {:instruction integer_shove} {:instruction integer_yank} {:instruction print_integer} {:instruction integer_fromfloat} {:instruction integer_max} {:instruction float_inc} {:instruction float_sin} {:instruction integer_stackdepth} {:instruction float_add} {:instruction in2} {:instruction float_mult} {:instruction integer_stackdepth} {:instruction float_dup} {:instruction integer_fromfloat} {:instruction integer_mod} {:instruction print_integer} {:instruction float_min} {:instruction tagged_619} {:instruction tag_float_323} {:instruction 6} {:instruction tag_float_291} {:instruction integer_inc} {:instruction float_swap} {:instruction print_integer})
Best program: (float_min integer_shove integer_div 27 float_sub float_mult float_mult integer_rot float_pop integer_sub 9 float_yankdup integer_stackdepth float_frominteger tag_float_196 float_swap float_rot integer_add integer_stackdepth float_add in2 float_mult float_rot integer_add integer_max integer_swap integer_stackdepth float_mult in2 float_frominteger tag_float_196 float_swap float_rot in2 float_frominteger in2 float_frominteger print_float integer_dup float_min integer_inc float_mod integer_dup integer_dup_items print_integer integer_shove integer_yank print_integer integer_fromfloat integer_max float_inc float_sin integer_stackdepth float_add in2 float_mult integer_stackdepth float_dup integer_fromfloat integer_mod print_integer float_min tagged_619 tag_float_323 6 tag_float_291 integer_inc float_swap print_integer)
Errors: [16.5677 9 6.0519 8 10.506 10 63.29 7 46.4786 10 27.3773 7 21.7659 9 62.2423 12 65.7283 10 19.35 7 66.3997 9 44.1628 9 91.2753 9 86.3488 9 73.351 10 39.0737 11 55.3057 9 90.0769 11 57.4296 10 21.0794 7 84.5969 10 9.4308 7 55.9558 10 20.9037 7 43.5424 9]
Total: 1404.2905
Mean: 28.08581
Genome size: 69
Size: 70
Percent parens: 0.014
--- Population Statistics ---
Average total errors in population: 3943.390582600003
Median total errors in population: 1405.7903500000002
Error averages by case: (142.95788950000062 9.452 135.3238090000015 8.734 138.01879569999818 10.185 142.2013575999989 7.673 167.9319974000012 10.402 110.04317779999796 7.607 104.80430109999921 9.475 141.98465819999979 11.784 133.50096410000097 10.182 103.11638350000105 7.731 144.38386999999946 9.38 125.58385880000152 9.282 205.30991800000098 9.546 201.231479500003 9.463 140.49241949999865 10.253 151.2908612999993 11.257 135.8825509999987 9.563 166.46772309999793 10.995 180.83113410000155 10.394 103.71833500000086 7.279 199.95991850000144 10.418 137.05926250000104 7.807 178.9999549999988 10.177 148.36657679999877 7.861 167.73338560000184 9.296)
Error minima by case: (15.5824 8 6.0028 7 9.5208 8 22.3187 6 36.555 8 21.6327 6 21.7387 8 19.2278 9 24.3208 9 0.3264 6 3.3706 8 6.1589 8 2.2516 7 3.3252 8 16.6981 8 3.0501 9 23.3021 9 9.924 9 57.3805 9 4.103 5 28.5733 9 8.4456 6 55.9067 9 20.8546 6 43.4933 8)
Average genome size in population (length): 80.038
Average program size in population (points): 81.038
Average percent parens in population: 0.012
Minimum age in population: 171.4290349054508
Maximum age in population: 176.1341018638654
Average age in population: 174.0956297394105
Median age in population: 174.1184776255346
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 5
Genome diversity (% unique Plush genomes):	 0.896
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 5
Syntactic diversity (% unique Push programs):	 0.896
Total error diversity:				 0.248
Error (vector) diversity:			 0.3
Behavioral diversity:				 0.3
--- Run Statistics ---
Number of program evaluations used so far: 126000
Number of point (instruction) evaluations so far: 280708256
--- Timings ---
Current time: 1529615671775 milliseconds
Total Time:         518.3 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       174.4 seconds, 33.7%
Fitness Testing:    272.4 seconds, 52.6%
Report:              71.4 seconds, 13.8%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 125
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 126
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 126
;;******************************
;; -*- Number IO problem report - generation 126
Test total error for best: 59998.23050000004
Test mean error for best: 29.99912
;;------------------------------
Outputs of best individual on training cases:
Correct output: -57.4559422311 | Program output: -74.023617    
Correct output: -71.0754923621 | Program output: -65.023617    
Correct output: -66.5176295557 | Program output: -77.023617    
Correct output: 149.3187378    | Program output: 86.028727     
Correct output: -36.5450493525 | Program output: -83.023617    
Correct output: 75.4021928097  | Program output: 48.024907     
Correct output: 52.2615929867  | Program output: 74.027527     
Correct output: -19.2178367434 | Program output: 43.024417     
Correct output: 66.7518906772  | Program output: 1.023617      
Correct output: 7.673605441    | Program output: 27.023607     
Correct output: 23.6294031682  | Program output: 90.029107     
Correct output: -6.1389033433  | Program output: 38.023927     
Correct output: 9.2516366816   | Program output: -82.023627    
Correct output: 31.3251776267  | Program output: -55.023627    
Correct output: 73.3746496408  | Program output: 0.023607      
Correct output: 20.0500553336  | Program output: -19.023627    
Correct output: -23.2820697498 | Program output: 32.023627     
Correct output: 120.1004999359 | Program output: 30.023607     
Correct output: -155.453212395 | Program output: -98.023617    
Correct output: 31.10301576    | Program output: 10.023617     
Correct output: 45.5733057121  | Program output: -39.023607    
Correct output: -68.592783645  | Program output: -78.023607    
Correct output: -125.979392023 | Program output: -70.023627    
Correct output: -91.9273649148 | Program output: -71.023617    
Correct output: -92.5660607267 | Program output: -49.023627    
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_dup} {:instruction float_rot} {:instruction integer_dup} {:instruction float_rot} {:instruction float_add} {:instruction float_mult} {:instruction float_mult} {:instruction float_sub} {:instruction integer_dup} {:instruction integer_div} {:instruction 27} {:instruction float_sub} {:instruction float_yank} {:instruction float_yankdup} {:instruction float_sin} {:instruction 9} {:instruction float_yankdup} {:instruction integer_add} {:instruction integer_stackdepth} {:instruction float_add} {:instruction in2} {:instruction float_mult} {:instruction float_mult} {:instruction integer_stackdepth} {:instruction float_dup_items} {:instruction tag_float_196} {:instruction float_rot} {:instruction integer_add} {:instruction integer_max} {:instruction float_max} {:instruction integer_stackdepth} {:instruction float_flush} {:instruction in2} {:instruction float_frominteger} {:instruction print_float} {:instruction integer_dup} {:instruction float_shove} {:instruction float_min} {:instruction integer_inc} {:instruction float_mod} {:instruction integer_dup} {:instruction integer_dup_items} {:instruction print_integer} {:instruction integer_shove} {:instruction integer_yank} {:instruction print_integer} {:instruction integer_fromfloat} {:instruction integer_max} {:instruction integer_max} {:instruction integer_fromfloat} {:instruction integer_stackdepth} {:instruction integer_sub} {:instruction integer_fromfloat} {:instruction integer_stackdepth} {:instruction integer_swap} {:instruction in2} {:instruction float_mult} {:instruction integer_stackdepth} {:instruction integer_mod} {:instruction print_integer} {:instruction tag_float_202} {:instruction integer_stackdepth} {:instruction tag_float_291} {:instruction 6} {:instruction tag_float_363} {:instruction integer_inc} {:instruction float_swap} {:instruction print_integer})
Best program: (integer_dup float_rot integer_dup float_rot float_add float_mult float_mult float_sub integer_dup integer_div 27 float_sub float_yank float_yankdup float_sin 9 float_yankdup integer_add integer_stackdepth float_add in2 float_mult float_mult integer_stackdepth float_dup_items tag_float_196 float_rot integer_add integer_max float_max integer_stackdepth float_flush in2 float_frominteger print_float integer_dup float_shove float_min integer_inc float_mod integer_dup integer_dup_items print_integer integer_shove integer_yank print_integer integer_fromfloat integer_max integer_max integer_fromfloat integer_stackdepth integer_sub integer_fromfloat integer_stackdepth integer_swap in2 float_mult integer_stackdepth integer_mod print_integer tag_float_202 integer_stackdepth tag_float_291 6 tag_float_363 integer_inc float_swap print_integer)
Errors: [16.5677 9 6.0519 8 10.506 10 63.29 7 46.4786 10 27.3773 7 21.7659 9 62.2423 12 65.7283 10 19.35 7 66.3997 9 44.1628 9 91.2753 9 86.3488 9 73.351 10 39.0737 11 55.3057 9 90.0769 11 57.4296 10 21.0794 7 84.5969 10 9.4308 7 55.9558 10 20.9037 7 43.5424 9]
Total: 1404.2905
Mean: 28.08581
Genome size: 68
Size: 69
Percent parens: 0.014
--- Population Statistics ---
Average total errors in population: 4187.9908828
Median total errors in population: 1406.77555
Error averages by case: (162.58069510000132 9.414 154.8480984000006 8.647 157.64880219999813 10.139 145.08757919999874 7.626 187.46417860000105 10.352 109.45970019999834 7.6 107.60020969999935 9.454 143.31813019999953 11.792 131.898805800001 10.165 102.32769180000065 7.655 146.01698719999928 9.32 126.8295850000012 9.231 224.52908500000098 9.428 220.042524900003 9.498 132.0172317999988 10.229 170.06209009999966 11.225 137.05928479999886 9.533 166.00719309999852 10.963 199.2782122000014 10.343 103.85295310000078 7.28 217.5882453000016 10.421 156.74474070000093 7.73 197.4214626999986 10.204 167.61019689999858 7.787 185.36519880000185 9.296)
Error minima by case: (16.5441 7 5.9855 7 10.4824 9 36.7301 6 37.5824 9 25.3952 6 21.7384 8 20.2633 10 24.2651 8 0.6736 6 16.6294 8 7.1793 7 5.228 7 4.3252 7 16.6324 8 3.0501 9 24.3194 9 9.9431 8 57.3632 9 4.904 5 8.5663 9 9.4072 6 55.8894 9 20.8374 6 43.4761 8)
Average genome size in population (length): 80.042
Average program size in population (points): 81.042
Average percent parens in population: 0.012
Minimum age in population: 173.3030090762757
Maximum age in population: 177.3985531990821
Average age in population: 175.4806732934606
Median age in population: 175.4850504575489
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 5
Genome diversity (% unique Plush genomes):	 0.885
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 5
Syntactic diversity (% unique Push programs):	 0.885
Total error diversity:				 0.255
Error (vector) diversity:			 0.292
Behavioral diversity:				 0.292
--- Run Statistics ---
Number of program evaluations used so far: 127000
Number of point (instruction) evaluations so far: 282713531
--- Timings ---
Current time: 1529615675801 milliseconds
Total Time:         522.5 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       175.9 seconds, 33.7%
Fitness Testing:    274.5 seconds, 52.5%
Report:              72.0 seconds, 13.8%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 126
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 127
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 127
;;******************************
;; -*- Number IO problem report - generation 127
Test total error for best: 59998.23050000004
Test mean error for best: 29.99912
;;------------------------------
Outputs of best individual on training cases:
Correct output: -57.4559422311 | Program output: -74.023617    
Correct output: -71.0754923621 | Program output: -65.023617    
Correct output: -66.5176295557 | Program output: -77.023617    
Correct output: 149.3187378    | Program output: 86.028727     
Correct output: -36.5450493525 | Program output: -83.023617    
Correct output: 75.4021928097  | Program output: 48.024907     
Correct output: 52.2615929867  | Program output: 74.027527     
Correct output: -19.2178367434 | Program output: 43.024417     
Correct output: 66.7518906772  | Program output: 1.023617      
Correct output: 7.673605441    | Program output: 27.023607     
Correct output: 23.6294031682  | Program output: 90.029107     
Correct output: -6.1389033433  | Program output: 38.023927     
Correct output: 9.2516366816   | Program output: -82.023627    
Correct output: 31.3251776267  | Program output: -55.023627    
Correct output: 73.3746496408  | Program output: 0.023607      
Correct output: 20.0500553336  | Program output: -19.023627    
Correct output: -23.2820697498 | Program output: 32.023627     
Correct output: 120.1004999359 | Program output: 30.023607     
Correct output: -155.453212395 | Program output: -98.023617    
Correct output: 31.10301576    | Program output: 10.023617     
Correct output: 45.5733057121  | Program output: -39.023607    
Correct output: -68.592783645  | Program output: -78.023607    
Correct output: -125.979392023 | Program output: -70.023627    
Correct output: -91.9273649148 | Program output: -71.023617    
Correct output: -92.5660607267 | Program output: -49.023627    
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_inc} {:instruction float_add} {:instruction float_yank} {:instruction float_min} {:instruction float_rot} {:instruction integer_dup} {:instruction float_rot} {:instruction float_add} {:instruction float_mult} {:instruction float_mult} {:instruction float_sub} {:instruction integer_dup} {:instruction integer_div} {:instruction 27} {:instruction float_sub} {:instruction float_yank} {:instruction float_yankdup} {:instruction float_sin} {:instruction float_mult} {:instruction float_mult} {:instruction integer_rot} {:instruction integer_sub} {:instruction 9} {:instruction float_yankdup} {:instruction integer_stackdepth} {:instruction float_frominteger} {:instruction tag_float_196} {:instruction float_swap} {:instruction float_rot} {:instruction integer_add} {:instruction integer_stackdepth} {:instruction float_add} {:instruction in2} {:instruction float_mult} {:instruction integer_stackdepth} {:instruction float_frominteger} {:instruction tag_float_196} {:instruction float_tan} {:instruction float_rot} {:instruction integer_add} {:instruction integer_max} {:instruction integer_rot} {:instruction integer_stackdepth} {:instruction float_flush} {:instruction in2} {:instruction float_frominteger} {:instruction print_float} {:instruction integer_dup} {:instruction float_dup} {:instruction float_shove} {:instruction integer_inc} {:instruction print_integer} {:instruction integer_shove} {:instruction integer_yank} {:instruction print_integer} {:instruction integer_yank} {:instruction float_mult} {:instruction float_cos} {:instruction in2} {:instruction float_mult} {:instruction integer_yank} {:instruction integer_max} {:instruction float_sin} {:instruction integer_stackdepth} {:instruction float_add} {:instruction in2} {:instruction float_mult} {:instruction integer_stackdepth} {:instruction float_frominteger} {:instruction integer_fromfloat} {:instruction integer_mod} {:instruction print_integer} {:instruction float_min} {:instruction integer_stackdepth} {:instruction tag_float_291} {:instruction 6} {:instruction print_float} {:instruction integer_inc} {:instruction float_swap} {:instruction print_integer})
Best program: (integer_inc float_add float_yank float_min float_rot integer_dup float_rot float_add float_mult float_mult float_sub integer_dup integer_div 27 float_sub float_yank float_yankdup float_sin float_mult float_mult integer_rot integer_sub 9 float_yankdup integer_stackdepth float_frominteger tag_float_196 float_swap float_rot integer_add integer_stackdepth float_add in2 float_mult integer_stackdepth float_frominteger tag_float_196 float_tan float_rot integer_add integer_max integer_rot integer_stackdepth float_flush in2 float_frominteger print_float integer_dup float_dup float_shove integer_inc print_integer integer_shove integer_yank print_integer integer_yank float_mult float_cos in2 float_mult integer_yank integer_max float_sin integer_stackdepth float_add in2 float_mult integer_stackdepth float_frominteger integer_fromfloat integer_mod print_integer float_min integer_stackdepth tag_float_291 6 print_float integer_inc float_swap print_integer)
Errors: [16.5677 9 6.0519 8 10.506 10 63.29 7 46.4786 10 27.3773 7 21.7659 9 62.2423 12 65.7283 10 19.35 7 66.3997 9 44.1628 9 91.2753 9 86.3488 9 73.351 10 39.0737 11 55.3057 9 90.0769 11 57.4296 10 21.0794 7 84.5969 10 9.4308 7 55.9558 10 20.9037 7 43.5424 9]
Total: 1404.2905
Mean: 28.08581
Genome size: 80
Size: 81
Percent parens: 0.012
--- Population Statistics ---
Average total errors in population: 4298.575032300003
Median total errors in population: 1404.2905
Error averages by case: (159.97345180000104 9.45 152.3472707000007 8.679 155.0275674999982 10.198 153.0092797999992 7.639 184.77493140000118 10.388 120.38001089999811 7.581 116.20543539999917 9.465 152.1871070000003 11.82 148.00936830000023 10.203 113.67181810000092 7.68 155.75059769999964 9.359 135.92016900000087 9.284 221.8890782000007 9.49 217.81742120000305 9.479 155.92142979999844 10.218 171.32009829999984 11.264 146.07133399999873 9.544 176.46476809999788 10.98 196.70882150000168 10.38 114.14418850000106 7.327 216.59136150000165 10.432 154.1154616000009 7.76 195.06022789999847 10.206 165.1006610999988 7.811 184.1541730000021 9.322)
Error minima by case: (16.5451 8 5.9828 7 10.4834 8 22.3187 6 37.3814 9 26.3952 6 21.7404 8 20.0542 9 24.2698 8 0.6736 6 3.3706 8 6.9752 6 8.1789 7 4.3252 8 16.6461 7 3.0501 10 24.1184 9 9.9065 9 57.3605 9 4.103 5 9.5563 9 9.4072 7 55.8867 9 20.8346 6 43.4733 8)
Average genome size in population (length): 79.792
Average program size in population (points): 80.792
Average percent parens in population: 0.013
Minimum age in population: 174.3104598707222
Maximum age in population: 178.9908475752211
Average age in population: 176.8803845405665
Median age in population: 176.9511435344997
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 6
Genome diversity (% unique Plush genomes):	 0.875
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 6
Syntactic diversity (% unique Push programs):	 0.875
Total error diversity:				 0.216
Error (vector) diversity:			 0.274
Behavioral diversity:				 0.274
--- Run Statistics ---
Number of program evaluations used so far: 128000
Number of point (instruction) evaluations so far: 284711731
--- Timings ---
Current time: 1529615679498 milliseconds
Total Time:         526.1 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       177.2 seconds, 33.7%
Fitness Testing:    276.5 seconds, 52.5%
Report:              72.4 seconds, 13.8%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 127
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 128
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 128
;;******************************
;; -*- Number IO problem report - generation 128
Test total error for best: 59998.23050000004
Test mean error for best: 29.99912
;;------------------------------
Outputs of best individual on training cases:
Correct output: -57.4559422311 | Program output: -74.023617    
Correct output: -71.0754923621 | Program output: -65.023617    
Correct output: -66.5176295557 | Program output: -77.023617    
Correct output: 149.3187378    | Program output: 86.028727     
Correct output: -36.5450493525 | Program output: -83.023617    
Correct output: 75.4021928097  | Program output: 48.024907     
Correct output: 52.2615929867  | Program output: 74.027527     
Correct output: -19.2178367434 | Program output: 43.024417     
Correct output: 66.7518906772  | Program output: 1.023617      
Correct output: 7.673605441    | Program output: 27.023607     
Correct output: 23.6294031682  | Program output: 90.029107     
Correct output: -6.1389033433  | Program output: 38.023927     
Correct output: 9.2516366816   | Program output: -82.023627    
Correct output: 31.3251776267  | Program output: -55.023627    
Correct output: 73.3746496408  | Program output: 0.023607      
Correct output: 20.0500553336  | Program output: -19.023627    
Correct output: -23.2820697498 | Program output: 32.023627     
Correct output: 120.1004999359 | Program output: 30.023607     
Correct output: -155.453212395 | Program output: -98.023617    
Correct output: 31.10301576    | Program output: 10.023617     
Correct output: 45.5733057121  | Program output: -39.023607    
Correct output: -68.592783645  | Program output: -78.023607    
Correct output: -125.979392023 | Program output: -70.023627    
Correct output: -91.9273649148 | Program output: -71.023617    
Correct output: -92.5660607267 | Program output: -49.023627    
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_inc} {:instruction float_add} {:instruction integer_inc} {:instruction float_add} {:instruction float_add} {:instruction integer_sub} {:instruction integer_dup_times} {:instruction float_min} {:instruction float_dup_items} {:instruction integer_dup_items} {:instruction float_yankdup} {:instruction float_rot} {:instruction float_dup_times} {:instruction float_rot} {:instruction float_min} {:instruction float_sin} {:instruction integer_div} {:instruction 27} {:instruction integer_dup_times} {:instruction float_yankdup} {:instruction integer_sub} {:instruction 9} {:instruction float_yankdup} {:instruction integer_stackdepth} {:instruction float_frominteger} {:instruction tag_float_196} {:instruction float_swap} {:instruction float_rot} {:instruction integer_add} {:instruction integer_stackdepth} {:instruction float_mod} {:instruction in2} {:instruction integer_add} {:instruction integer_max} {:instruction float_yank} {:instruction integer_stackdepth} {:instruction float_dup} {:instruction in2} {:instruction float_frominteger} {:instruction print_float} {:instruction integer_dup} {:instruction float_shove} {:instruction float_shove} {:instruction integer_add} {:instruction float_mod} {:instruction integer_dup} {:instruction integer_dup_items} {:instruction print_integer} {:instruction integer_min} {:instruction integer_yank} {:instruction print_integer} {:instruction integer_yank} {:instruction integer_max} {:instruction integer_max} {:instruction integer_fromfloat} {:instruction integer_inc} {:instruction integer_max} {:instruction integer_max} {:instruction integer_pop} {:instruction integer_stackdepth} {:instruction in2} {:instruction print_float} {:instruction float_mult} {:instruction integer_yank} {:instruction integer_max} {:instruction float_sin} {:instruction integer_stackdepth} {:instruction float_add} {:instruction in2} {:instruction float_mult} {:instruction integer_stackdepth} {:instruction float_frominteger} {:instruction float_pop} {:instruction integer_mod} {:instruction integer_yank} {:instruction integer_max} {:instruction float_sin} {:instruction integer_stackdepth} {:instruction float_add} {:instruction in2} {:instruction float_mult} {:instruction integer_stackdepth} {:instruction float_frominteger} {:instruction integer_fromfloat} {:instruction integer_mod} {:instruction print_integer} {:instruction float_min} {:instruction integer_stackdepth} {:instruction tag_float_291} {:instruction 6} {:instruction integer_yankdup} {:instruction tag_float_291} {:instruction 6} {:instruction tag_float_291} {:instruction integer_inc} {:instruction float_dec} {:instruction print_integer})
Best program: (integer_inc float_add integer_inc float_add float_add integer_sub integer_dup_times float_min float_dup_items integer_dup_items float_yankdup float_rot float_dup_times float_rot float_min float_sin integer_div 27 integer_dup_times float_yankdup integer_sub 9 float_yankdup integer_stackdepth float_frominteger tag_float_196 float_swap float_rot integer_add integer_stackdepth float_mod in2 integer_add integer_max float_yank integer_stackdepth float_dup in2 float_frominteger print_float integer_dup float_shove float_shove integer_add float_mod integer_dup integer_dup_items print_integer integer_min integer_yank print_integer integer_yank integer_max integer_max integer_fromfloat integer_inc integer_max integer_max integer_pop integer_stackdepth in2 print_float float_mult integer_yank integer_max float_sin integer_stackdepth float_add in2 float_mult integer_stackdepth float_frominteger float_pop integer_mod integer_yank integer_max float_sin integer_stackdepth float_add in2 float_mult integer_stackdepth float_frominteger integer_fromfloat integer_mod print_integer float_min integer_stackdepth tag_float_291 6 integer_yankdup tag_float_291 6 tag_float_291 integer_inc float_dec print_integer)
Errors: [16.5677 9 6.0519 8 10.506 10 63.29 7 46.4786 10 27.3773 7 21.7659 9 62.2423 12 65.7283 10 19.35 7 66.3997 9 44.1628 9 91.2753 9 86.3488 9 73.351 10 39.0737 11 55.3057 9 90.0769 11 57.4296 10 21.0794 7 84.5969 10 9.4308 7 55.9558 10 20.9037 7 43.5424 9]
Total: 1404.2905
Mean: 28.08581
Genome size: 97
Size: 98
Percent parens: 0.010
--- Population Statistics ---
Average total errors in population: 3934.517153700002
Median total errors in population: 1404.2905
Error averages by case: (145.93964520000048 9.439 137.1934096000012 8.675 141.00946049999814 10.183 140.36761969999853 7.639 171.02671110000117 10.39 105.51382949999787 7.545 101.82523429999908 9.426 137.71467389999953 11.825 136.33326830000084 10.177 96.49334190000106 7.656 141.31184939999935 9.346 121.08657870000151 9.285 208.3559990000014 9.469 203.85831280000303 9.465 141.5637107999985 10.215 153.7147969999991 11.259 130.43826339999865 9.532 161.27669369999785 11.002 182.8710114000016 10.384 99.05211470000081 7.293 201.3823271000018 10.405 140.10490120000082 7.755 180.77978049999862 10.212 150.2744959999986 7.791 169.36112400000184 9.3)
Error minima by case: (16.5442 8 6.0028 6 10.4825 9 22.3187 6 36.5621 8 26.3952 6 21.7386 8 19.2349 7 1.0 5 0.6736 6 6.6294 8 6.146 7 2.2516 7 4.3252 7 0.0 4 6.9499 8 23.2892 7 13.1005 7 57.3805 8 4.914 5 9.5663 8 9.4074 6 55.9067 8 20.8546 6 43.4933 8)
Average genome size in population (length): 79.99
Average program size in population (points): 80.99
Average percent parens in population: 0.012
Minimum age in population: 176.1753234558609
Maximum age in population: 180.1976962690255
Average age in population: 178.2973545461048
Median age in population: 178.3659514567818
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 7
Genome diversity (% unique Plush genomes):	 0.872
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 7
Syntactic diversity (% unique Push programs):	 0.872
Total error diversity:				 0.253
Error (vector) diversity:			 0.299
Behavioral diversity:				 0.299
--- Run Statistics ---
Number of program evaluations used so far: 129000
Number of point (instruction) evaluations so far: 286714356
--- Timings ---
Current time: 1529615683736 milliseconds
Total Time:         530.2 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       178.5 seconds, 33.7%
Fitness Testing:    278.6 seconds, 52.5%
Report:              72.9 seconds, 13.8%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 128
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 129
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 129
;;******************************
;; -*- Number IO problem report - generation 129
Test total error for best: 59998.23050000004
Test mean error for best: 29.99912
;;------------------------------
Outputs of best individual on training cases:
Correct output: -57.4559422311 | Program output: -74.023617    
Correct output: -71.0754923621 | Program output: -65.023617    
Correct output: -66.5176295557 | Program output: -77.023617    
Correct output: 149.3187378    | Program output: 86.028727     
Correct output: -36.5450493525 | Program output: -83.023617    
Correct output: 75.4021928097  | Program output: 48.024907     
Correct output: 52.2615929867  | Program output: 74.027527     
Correct output: -19.2178367434 | Program output: 43.024417     
Correct output: 66.7518906772  | Program output: 1.023617      
Correct output: 7.673605441    | Program output: 27.023607     
Correct output: 23.6294031682  | Program output: 90.029107     
Correct output: -6.1389033433  | Program output: 38.023927     
Correct output: 9.2516366816   | Program output: -82.023627    
Correct output: 31.3251776267  | Program output: -55.023627    
Correct output: 73.3746496408  | Program output: 0.023607      
Correct output: 20.0500553336  | Program output: -19.023627    
Correct output: -23.2820697498 | Program output: 32.023627     
Correct output: 120.1004999359 | Program output: 30.023607     
Correct output: -155.453212395 | Program output: -98.023617    
Correct output: 31.10301576    | Program output: 10.023617     
Correct output: 45.5733057121  | Program output: -39.023607    
Correct output: -68.592783645  | Program output: -78.023607    
Correct output: -125.979392023 | Program output: -70.023627    
Correct output: -91.9273649148 | Program output: -71.023617    
Correct output: -92.5660607267 | Program output: -49.023627    
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_inc} {:instruction float_dup} {:instruction integer_mod} {:instruction integer_add} {:instruction print_integer} {:instruction float_mult} {:instruction print_integer} {:instruction float_yankdup} {:instruction float_pop} {:instruction float_sub} {:instruction integer_dup_items} {:instruction float_div} {:instruction float_rot} {:instruction float_dup_times} {:instruction float_rot} {:instruction print_integer} {:instruction float_min} {:instruction integer_yankdup} {:instruction integer_div} {:instruction 27} {:instruction float_sub} {:instruction float_cos} {:instruction integer_sub} {:instruction 9} {:instruction float_yankdup} {:instruction integer_stackdepth} {:instruction float_frominteger} {:instruction tag_float_196} {:instruction float_cos} {:instruction float_rot} {:instruction integer_add} {:instruction integer_stackdepth} {:instruction float_add} {:instruction in2} {:instruction tag_float_453} {:instruction float_swap} {:instruction float_rot} {:instruction integer_add} {:instruction integer_max} {:instruction integer_max} {:instruction float_max} {:instruction integer_stackdepth} {:instruction float_min} {:instruction in2} {:instruction float_frominteger} {:instruction print_float} {:instruction integer_dup} {:instruction float_shove} {:instruction float_pop} {:instruction integer_inc} {:instruction float_flush} {:instruction integer_dup} {:instruction float_add} {:instruction print_integer} {:instruction float_dup_times} {:instruction integer_yank} {:instruction print_integer} {:instruction integer_yank} {:instruction integer_fromfloat} {:instruction float_sin} {:instruction integer_shove} {:instruction integer_yank} {:instruction integer_max} {:instruction tagged_175} {:instruction integer_mult} {:instruction integer_max} {:instruction float_mod} {:instruction integer_stackdepth} {:instruction float_add} {:instruction in2} {:instruction float_mult} {:instruction integer_stackdepth} {:instruction float_frominteger} {:instruction integer_fromfloat} {:instruction integer_mod} {:instruction print_integer} {:instruction float_min} {:instruction float_mult} {:instruction tag_float_291} {:instruction 6} {:instruction tag_float_291} {:instruction integer_inc} {:instruction float_swap} {:instruction print_integer})
Best program: (integer_inc float_dup integer_mod integer_add print_integer float_mult print_integer float_yankdup float_pop float_sub integer_dup_items float_div float_rot float_dup_times float_rot print_integer float_min integer_yankdup integer_div 27 float_sub float_cos integer_sub 9 float_yankdup integer_stackdepth float_frominteger tag_float_196 float_cos float_rot integer_add integer_stackdepth float_add in2 tag_float_453 float_swap float_rot integer_add integer_max integer_max float_max integer_stackdepth float_min in2 float_frominteger print_float integer_dup float_shove float_pop integer_inc float_flush integer_dup float_add print_integer float_dup_times integer_yank print_integer integer_yank integer_fromfloat float_sin integer_shove integer_yank integer_max tagged_175 integer_mult integer_max float_mod integer_stackdepth float_add in2 float_mult integer_stackdepth float_frominteger integer_fromfloat integer_mod print_integer float_min float_mult tag_float_291 6 tag_float_291 integer_inc float_swap print_integer)
Errors: [16.5677 9 6.0519 8 10.506 10 63.29 7 46.4786 10 27.3773 7 21.7659 9 62.2423 12 65.7283 10 19.35 7 66.3997 9 44.1628 9 91.2753 9 86.3488 9 73.351 10 39.0737 11 55.3057 9 90.0769 11 57.4296 10 21.0794 7 84.5969 10 9.4308 7 55.9558 10 20.9037 7 43.5424 9]
Total: 1404.2905
Mean: 28.08581
Genome size: 84
Size: 85
Percent parens: 0.012
--- Population Statistics ---
Average total errors in population: 4120.656135200003
Median total errors in population: 1404.2905
Error averages by case: (153.41577770000129 9.437 144.7213747000007 8.64 148.45755859999824 10.184 147.40512999999893 7.65 178.4266360000011 10.365 114.47404049999824 7.591 109.19688809999928 9.459 145.59696809999988 11.76 138.66174490000054 10.154 106.74689130000104 7.69 149.1456082999997 9.37 129.18151780000133 9.229 215.8453226000012 9.476 211.679446400003 9.48 144.56228679999882 10.207 160.04527739999952 11.217 139.35451059999878 9.508 171.1348541999981 10.929 189.50393800000157 10.347 108.32416300000078 7.304 209.56695040000156 10.443 147.50784510000094 7.726 187.8335756999989 10.178 157.61363219999873 7.776 176.84819680000192 9.286)
Error minima by case: (16.5458 8 5.9793 7 10.4841 9 36.7025 6 37.562 9 25.3952 6 5.2616 8 20.2548 9 30.7349 7 0.6736 6 3.3706 8 7.1659 7 6.2155 7 4.3252 8 33.6254 6 3.0501 9 24.2891 9 9.9261 7 57.3567 9 4.103 5 9.5663 9 9.4079 6 55.8831 8 20.8312 6 43.4695 8)
Average genome size in population (length): 80.113
Average program size in population (points): 81.113
Average percent parens in population: 0.012
Minimum age in population: 177.1753234558609
Maximum age in population: 181.8288727974436
Average age in population: 179.7453440260948
Median age in population: 179.7610968028421
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 5
Genome diversity (% unique Plush genomes):	 0.889
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 5
Syntactic diversity (% unique Push programs):	 0.889
Total error diversity:				 0.253
Error (vector) diversity:			 0.302
Behavioral diversity:				 0.304
--- Run Statistics ---
Number of program evaluations used so far: 130000
Number of point (instruction) evaluations so far: 288720156
--- Timings ---
Current time: 1529615687506 milliseconds
Total Time:         534.2 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       179.9 seconds, 33.7%
Fitness Testing:    280.5 seconds, 52.5%
Report:              73.6 seconds, 13.8%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 129
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 130
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 130
;;******************************
;; -*- Number IO problem report - generation 130
Test total error for best: 59998.23050000004
Test mean error for best: 29.99912
;;------------------------------
Outputs of best individual on training cases:
Correct output: -57.4559422311 | Program output: -74.023617    
Correct output: -71.0754923621 | Program output: -65.023617    
Correct output: -66.5176295557 | Program output: -77.023617    
Correct output: 149.3187378    | Program output: 86.028727     
Correct output: -36.5450493525 | Program output: -83.023617    
Correct output: 75.4021928097  | Program output: 48.024907     
Correct output: 52.2615929867  | Program output: 74.027527     
Correct output: -19.2178367434 | Program output: 43.024417     
Correct output: 66.7518906772  | Program output: 1.023617      
Correct output: 7.673605441    | Program output: 27.023607     
Correct output: 23.6294031682  | Program output: 90.029107     
Correct output: -6.1389033433  | Program output: 38.023927     
Correct output: 9.2516366816   | Program output: -82.023627    
Correct output: 31.3251776267  | Program output: -55.023627    
Correct output: 73.3746496408  | Program output: 0.023607      
Correct output: 20.0500553336  | Program output: -19.023627    
Correct output: -23.2820697498 | Program output: 32.023627     
Correct output: 120.1004999359 | Program output: 30.023607     
Correct output: -155.453212395 | Program output: -98.023617    
Correct output: 31.10301576    | Program output: 10.023617     
Correct output: 45.5733057121  | Program output: -39.023607    
Correct output: -68.592783645  | Program output: -78.023607    
Correct output: -125.979392023 | Program output: -70.023627    
Correct output: -91.9273649148 | Program output: -71.023617    
Correct output: -92.5660607267 | Program output: -49.023627    
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_div} {:instruction integer_dup} {:instruction float_rot} {:instruction float_add} {:instruction float_frominteger} {:instruction float_dup} {:instruction float_sub} {:instruction integer_dup} {:instruction integer_div} {:instruction 27} {:instruction float_sub} {:instruction float_yank} {:instruction float_yankdup} {:instruction float_sin} {:instruction 9} {:instruction float_yankdup} {:instruction integer_add} {:instruction integer_stackdepth} {:instruction float_add} {:instruction in2} {:instruction float_mult} {:instruction float_mult} {:instruction integer_stackdepth} {:instruction float_dup_items} {:instruction tag_float_196} {:instruction float_rot} {:instruction integer_add} {:instruction integer_max} {:instruction float_max} {:instruction integer_stackdepth} {:instruction float_flush} {:instruction in2} {:instruction float_frominteger} {:instruction print_float} {:instruction integer_dup} {:instruction float_shove} {:instruction float_min} {:instruction integer_inc} {:instruction float_mod} {:instruction integer_dup} {:instruction integer_dup_items} {:instruction print_integer} {:instruction integer_shove} {:instruction integer_yank} {:instruction print_integer} {:instruction integer_yank} {:instruction float_dup_items} {:instruction integer_max} {:instruction integer_fromfloat} {:instruction integer_stackdepth} {:instruction float_add} {:instruction float_tan} {:instruction float_mult} {:instruction integer_yank} {:instruction integer_max} {:instruction integer_dup} {:instruction float_add} {:instruction float_mult} {:instruction integer_yank} {:instruction integer_max} {:instruction float_swap} {:instruction integer_stackdepth} {:instruction float_add} {:instruction in2} {:instruction float_mult} {:instruction integer_stackdepth} {:instruction float_frominteger} {:instruction integer_fromfloat} {:instruction integer_mod} {:instruction print_integer} {:instruction float_shove} {:instruction integer_stackdepth} {:instruction tag_float_291} {:instruction 6} {:instruction tag_float_291} {:instruction integer_inc} {:instruction float_swap} {:instruction print_integer})
Best program: (float_div integer_dup float_rot float_add float_frominteger float_dup float_sub integer_dup integer_div 27 float_sub float_yank float_yankdup float_sin 9 float_yankdup integer_add integer_stackdepth float_add in2 float_mult float_mult integer_stackdepth float_dup_items tag_float_196 float_rot integer_add integer_max float_max integer_stackdepth float_flush in2 float_frominteger print_float integer_dup float_shove float_min integer_inc float_mod integer_dup integer_dup_items print_integer integer_shove integer_yank print_integer integer_yank float_dup_items integer_max integer_fromfloat integer_stackdepth float_add float_tan float_mult integer_yank integer_max integer_dup float_add float_mult integer_yank integer_max float_swap integer_stackdepth float_add in2 float_mult integer_stackdepth float_frominteger integer_fromfloat integer_mod print_integer float_shove integer_stackdepth tag_float_291 6 tag_float_291 integer_inc float_swap print_integer)
Errors: [16.5677 9 6.0519 8 10.506 10 63.29 7 46.4786 10 27.3773 7 21.7659 9 62.2423 12 65.7283 10 19.35 7 66.3997 9 44.1628 9 91.2753 9 86.3488 9 73.351 10 39.0737 11 55.3057 9 90.0769 11 57.4296 10 21.0794 7 84.5969 10 9.4308 7 55.9558 10 20.9037 7 43.5424 9]
Total: 1404.2905
Mean: 28.08581
Genome size: 78
Size: 79
Percent parens: 0.013
--- Population Statistics ---
Average total errors in population: 4077.876622200002
Median total errors in population: 1404.2905
Error averages by case: (155.7040038000015 9.424 146.86699150000035 8.696 150.70955199999793 10.197 140.9819398999991 7.608 180.8884731000012 10.385 107.66790949999807 7.594 102.72913119999923 9.444 139.28729319999977 11.787 136.18251730000088 10.174 99.86711420000103 7.683 143.3501065999998 9.351 122.67414050000127 9.266 218.4314573000013 9.492 213.97554040000344 9.485 140.1293784999987 10.246 162.01914249999956 11.252 132.91134469999864 9.532 164.483144499998 10.972 191.63206890000126 10.364 101.139203800001 7.282 212.5095390000019 10.433 149.781473300001 7.725 189.81953299999844 10.183 159.71587829999845 7.819 178.73774520000205 9.288)
Error minima by case: (15.6168 8 5.9928 7 9.5551 8 36.7101 6 37.5824 9 26.3295 6 21.7387 8 20.2552 9 24.2708 8 0.6736 6 3.3706 8 7.1763 7 7.2246 7 4.2982 8 16.6481 8 3.0501 10 24.3194 8 9.9231 9 57.3705 8 4.086 6 9.5663 9 8.4799 7 55.8967 9 20.8446 6 43.4833 8)
Average genome size in population (length): 80.087
Average program size in population (points): 81.087
Average percent parens in population: 0.012
Minimum age in population: 178.2703275616987
Maximum age in population: 183.0068471711166
Average age in population: 181.0643695007
Median age in population: 181.1107802140061
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 7
Genome diversity (% unique Plush genomes):	 0.889
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 7
Syntactic diversity (% unique Push programs):	 0.889
Total error diversity:				 0.25
Error (vector) diversity:			 0.296
Behavioral diversity:				 0.296
--- Run Statistics ---
Number of program evaluations used so far: 131000
Number of point (instruction) evaluations so far: 290725256
--- Timings ---
Current time: 1529615691363 milliseconds
Total Time:         538.0 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       181.2 seconds, 33.7%
Fitness Testing:    282.6 seconds, 52.5%
Report:              74.1 seconds, 13.8%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 130
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 131
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 131
;;******************************
;; -*- Number IO problem report - generation 131
Test total error for best: 59998.23050000004
Test mean error for best: 29.99912
;;------------------------------
Outputs of best individual on training cases:
Correct output: -57.4559422311 | Program output: -74.023617    
Correct output: -71.0754923621 | Program output: -65.023617    
Correct output: -66.5176295557 | Program output: -77.023617    
Correct output: 149.3187378    | Program output: 86.028727     
Correct output: -36.5450493525 | Program output: -83.023617    
Correct output: 75.4021928097  | Program output: 48.024907     
Correct output: 52.2615929867  | Program output: 74.027527     
Correct output: -19.2178367434 | Program output: 43.024417     
Correct output: 66.7518906772  | Program output: 1.023617      
Correct output: 7.673605441    | Program output: 27.023607     
Correct output: 23.6294031682  | Program output: 90.029107     
Correct output: -6.1389033433  | Program output: 38.023927     
Correct output: 9.2516366816   | Program output: -82.023627    
Correct output: 31.3251776267  | Program output: -55.023627    
Correct output: 73.3746496408  | Program output: 0.023607      
Correct output: 20.0500553336  | Program output: -19.023627    
Correct output: -23.2820697498 | Program output: 32.023627     
Correct output: 120.1004999359 | Program output: 30.023607     
Correct output: -155.453212395 | Program output: -98.023617    
Correct output: 31.10301576    | Program output: 10.023617     
Correct output: 45.5733057121  | Program output: -39.023607    
Correct output: -68.592783645  | Program output: -78.023607    
Correct output: -125.979392023 | Program output: -70.023627    
Correct output: -91.9273649148 | Program output: -71.023617    
Correct output: -92.5660607267 | Program output: -49.023627    
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_yank} {:instruction integer_dup} {:instruction float_min} {:instruction integer_shove} {:instruction integer_div} {:instruction integer_pop} {:instruction float_sub} {:instruction integer_yank} {:instruction float_mult} {:instruction float_dec} {:instruction float_inc} {:instruction float_dup} {:instruction float_mult} {:instruction float_tan} {:instruction integer_dup} {:instruction float_min} {:instruction float_yank} {:instruction float_sub} {:instruction integer_dup_items} {:instruction tag_float_223} {:instruction integer_min} {:instruction integer_dup_items} {:instruction float_yankdup} {:instruction print_float} {:instruction integer_div} {:instruction 27} {:instruction float_sub} {:instruction float_yankdup} {:instruction integer_sub} {:instruction 9} {:instruction float_rot} {:instruction integer_add} {:instruction integer_stackdepth} {:instruction float_mod} {:instruction in2} {:instruction integer_add} {:instruction integer_max} {:instruction float_yank} {:instruction float_max} {:instruction integer_stackdepth} {:instruction print_float} {:instruction in2} {:instruction float_frominteger} {:instruction print_float} {:instruction integer_dup} {:instruction float_min} {:instruction integer_inc} {:instruction float_mod} {:instruction integer_dup} {:instruction integer_dup_items} {:instruction print_integer} {:instruction integer_shove} {:instruction integer_yank} {:instruction print_integer} {:instruction integer_fromfloat} {:instruction integer_max} {:instruction integer_flush} {:instruction integer_fromfloat} {:instruction integer_stackdepth} {:instruction integer_sub} {:instruction integer_fromfloat} {:instruction integer_stackdepth} {:instruction integer_inc} {:instruction in2} {:instruction float_mult} {:instruction integer_stackdepth} {:instruction float_frominteger} {:instruction integer_fromfloat} {:instruction integer_mod} {:instruction print_integer} {:instruction float_min} {:instruction integer_swap} {:instruction tag_float_291} {:instruction 6} {:instruction tag_float_291} {:instruction integer_inc} {:instruction float_swap} {:instruction print_integer})
Best program: (float_yank integer_dup float_min integer_shove integer_div integer_pop float_sub integer_yank float_mult float_dec float_inc float_dup float_mult float_tan integer_dup float_min float_yank float_sub integer_dup_items tag_float_223 integer_min integer_dup_items float_yankdup print_float integer_div 27 float_sub float_yankdup integer_sub 9 float_rot integer_add integer_stackdepth float_mod in2 integer_add integer_max float_yank float_max integer_stackdepth print_float in2 float_frominteger print_float integer_dup float_min integer_inc float_mod integer_dup integer_dup_items print_integer integer_shove integer_yank print_integer integer_fromfloat integer_max integer_flush integer_fromfloat integer_stackdepth integer_sub integer_fromfloat integer_stackdepth integer_inc in2 float_mult integer_stackdepth float_frominteger integer_fromfloat integer_mod print_integer float_min integer_swap tag_float_291 6 tag_float_291 integer_inc float_swap print_integer)
Errors: [16.5677 9 6.0519 8 10.506 10 63.29 7 46.4786 10 27.3773 7 21.7659 9 62.2423 12 65.7283 10 19.35 7 66.3997 9 44.1628 9 91.2753 9 86.3488 9 73.351 10 39.0737 11 55.3057 9 90.0769 11 57.4296 10 21.0794 7 84.5969 10 9.4308 7 55.9558 10 20.9037 7 43.5424 9]
Total: 1404.2905
Mean: 28.08581
Genome size: 78
Size: 79
Percent parens: 0.013
--- Population Statistics ---
Average total errors in population: 4233.4277574000025
Median total errors in population: 1404.2905
Error averages by case: (162.01175160000162 9.479 153.33330760000067 8.691 157.1140739999979 10.234 148.4012526999988 7.692 186.8135117000013 10.416 115.44364659999809 7.609 110.14798199999923 9.498 145.37363579999985 11.827 140.1471789000006 10.187 106.57820580000106 7.716 149.86934179999938 9.369 129.95698200000143 9.283 223.7770715000011 9.503 219.34851380000325 9.538 143.91759989999852 10.249 166.9198245999997 11.278 139.24233769999856 9.569 171.0582241999978 10.982 197.92210830000147 10.432 108.21419700000101 7.36 217.9421422000018 10.504 156.18423310000108 7.796 196.0274624999986 10.227 166.11695549999862 7.836 184.93621660000215 9.355)
Error minima by case: (16.5451 8 6.0028 7 10.4834 9 22.3187 6 37.545 8 26.3952 6 21.7402 8 20.2178 7 24.2708 5 0.3264 6 6.6294 7 7.1783 6 7.2143 7 3.3252 7 16.6481 4 6.9499 7 24.3154 7 6.8995 6 57.3805 7 4.897 5 9.5663 8 9.4072 6 55.9067 7 20.8546 7 43.4933 7)
Average genome size in population (length): 80.233
Average program size in population (points): 81.233
Average percent parens in population: 0.012
Minimum age in population: 179.4565400700107
Maximum age in population: 184.3620798241821
Average age in population: 182.4851184824793
Median age in population: 182.542456669034
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 6
Genome diversity (% unique Plush genomes):	 0.886
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 6
Syntactic diversity (% unique Push programs):	 0.886
Total error diversity:				 0.24
Error (vector) diversity:			 0.287
Behavioral diversity:				 0.287
--- Run Statistics ---
Number of program evaluations used so far: 132000
Number of point (instruction) evaluations so far: 292734306
--- Timings ---
Current time: 1529615695028 milliseconds
Total Time:         541.7 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       182.4 seconds, 33.7%
Fitness Testing:    284.6 seconds, 52.5%
Report:              74.6 seconds, 13.8%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 131
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 132
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 132
;;******************************
;; -*- Number IO problem report - generation 132
Test total error for best: 59998.23050000004
Test mean error for best: 29.99912
;;------------------------------
Outputs of best individual on training cases:
Correct output: -57.4559422311 | Program output: -74.023617    
Correct output: -71.0754923621 | Program output: -65.023617    
Correct output: -66.5176295557 | Program output: -77.023617    
Correct output: 149.3187378    | Program output: 86.028727     
Correct output: -36.5450493525 | Program output: -83.023617    
Correct output: 75.4021928097  | Program output: 48.024907     
Correct output: 52.2615929867  | Program output: 74.027527     
Correct output: -19.2178367434 | Program output: 43.024417     
Correct output: 66.7518906772  | Program output: 1.023617      
Correct output: 7.673605441    | Program output: 27.023607     
Correct output: 23.6294031682  | Program output: 90.029107     
Correct output: -6.1389033433  | Program output: 38.023927     
Correct output: 9.2516366816   | Program output: -82.023627    
Correct output: 31.3251776267  | Program output: -55.023627    
Correct output: 73.3746496408  | Program output: 0.023607      
Correct output: 20.0500553336  | Program output: -19.023627    
Correct output: -23.2820697498 | Program output: 32.023627     
Correct output: 120.1004999359 | Program output: 30.023607     
Correct output: -155.453212395 | Program output: -98.023617    
Correct output: 31.10301576    | Program output: 10.023617     
Correct output: 45.5733057121  | Program output: -39.023607    
Correct output: -68.592783645  | Program output: -78.023607    
Correct output: -125.979392023 | Program output: -70.023627    
Correct output: -91.9273649148 | Program output: -71.023617    
Correct output: -92.5660607267 | Program output: -49.023627    
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_max} {:instruction integer_inc} {:instruction float_add} {:instruction float_yank} {:instruction integer_dup} {:instruction print_float} {:instruction 27} {:instruction integer_dup_times} {:instruction tag_float_190} {:instruction float_add} {:instruction 9} {:instruction float_yankdup} {:instruction float_mod} {:instruction integer_add} {:instruction integer_stackdepth} {:instruction float_add} {:instruction in2} {:instruction float_mult} {:instruction integer_stackdepth} {:instruction float_frominteger} {:instruction tag_float_196} {:instruction float_swap} {:instruction float_tan} {:instruction integer_add} {:instruction integer_max} {:instruction float_dup_times} {:instruction float_max} {:instruction integer_stackdepth} {:instruction float_flush} {:instruction in2} {:instruction float_frominteger} {:instruction print_float} {:instruction integer_dup} {:instruction float_shove} {:instruction float_shove} {:instruction integer_inc} {:instruction float_mod} {:instruction integer_dup} {:instruction integer_dup_items} {:instruction print_integer} {:instruction integer_shove} {:instruction integer_yank} {:instruction print_integer} {:instruction integer_yank} {:instruction integer_flush} {:instruction integer_max} {:instruction integer_fromfloat} {:instruction print_integer} {:instruction integer_max} {:instruction integer_dup} {:instruction float_dup_times} {:instruction integer_stackdepth} {:instruction integer_stackdepth} {:instruction float_add} {:instruction in2} {:instruction float_mult} {:instruction integer_stackdepth} {:instruction float_frominteger} {:instruction integer_fromfloat} {:instruction integer_mod} {:instruction print_integer} {:instruction float_flush} {:instruction float_mult} {:instruction tag_float_291} {:instruction 6} {:instruction tag_float_291} {:instruction integer_inc} {:instruction float_swap} {:instruction print_integer})
Best program: (float_max integer_inc float_add float_yank integer_dup print_float 27 integer_dup_times tag_float_190 float_add 9 float_yankdup float_mod integer_add integer_stackdepth float_add in2 float_mult integer_stackdepth float_frominteger tag_float_196 float_swap float_tan integer_add integer_max float_dup_times float_max integer_stackdepth float_flush in2 float_frominteger print_float integer_dup float_shove float_shove integer_inc float_mod integer_dup integer_dup_items print_integer integer_shove integer_yank print_integer integer_yank integer_flush integer_max integer_fromfloat print_integer integer_max integer_dup float_dup_times integer_stackdepth integer_stackdepth float_add in2 float_mult integer_stackdepth float_frominteger integer_fromfloat integer_mod print_integer float_flush float_mult tag_float_291 6 tag_float_291 integer_inc float_swap print_integer)
Errors: [16.5677 9 6.0519 8 10.506 10 63.29 7 46.4786 10 27.3773 7 21.7659 9 62.2423 12 65.7283 10 19.35 7 66.3997 9 44.1628 9 91.2753 9 86.3488 9 73.351 10 39.0737 11 55.3057 9 90.0769 11 57.4296 10 21.0794 7 84.5969 10 9.4308 7 55.9558 10 20.9037 7 43.5424 9]
Total: 1404.2905
Mean: 28.08581
Genome size: 69
Size: 70
Percent parens: 0.014
--- Population Statistics ---
Average total errors in population: 4497.402163700003
Median total errors in population: 1408.2905500000002
Error averages by case: (176.7505532000021 9.528 168.36350920000018 8.775 172.0333327999977 10.228 154.6250329999988 7.689 200.8794298000013 10.44 121.48515579999827 7.681 117.2639474999992 9.539 152.83739179999984 11.817 144.90508880000058 10.167 113.33308420000081 7.792 155.5990872999994 9.426 135.67076060000096 9.312 237.71905230000104 9.556 232.4865201000032 9.551 148.3759153999984 10.269 180.9048118000002 11.292 146.7234831999989 9.617 177.27494429999805 11.018 212.3055403000015 10.449 114.63961000000086 7.296 232.1663689000018 10.498 171.07520750000114 7.887 211.2939791999985 10.242 181.91949619999846 7.95 199.38086050000206 9.371)
Error minima by case: (14.5578 8 6.0033 7 8.4961 9 22.3187 6 37.5672 8 25.3805 6 5.8977 8 20.24 9 1.0 7 0.6736 6 3.3706 8 7.1612 8 2.2516 7 4.3252 7 0.0 6 0.9499 9 24.3043 8 13.1005 9 57.381 9 4.103 5 9.5359 9 7.4209 6 55.9071 9 20.8552 6 43.4938 8)
Average genome size in population (length): 80.641
Average program size in population (points): 81.641
Average percent parens in population: 0.012
Minimum age in population: 180.9213556383649
Maximum age in population: 185.8745871052982
Average age in population: 183.8952109749068
Median age in population: 183.9383387225085
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 6
Genome diversity (% unique Plush genomes):	 0.894
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 6
Syntactic diversity (% unique Push programs):	 0.894
Total error diversity:				 0.257
Error (vector) diversity:			 0.303
Behavioral diversity:				 0.305
--- Run Statistics ---
Number of program evaluations used so far: 133000
Number of point (instruction) evaluations so far: 294753431
--- Timings ---
Current time: 1529615698961 milliseconds
Total Time:         545.7 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       183.7 seconds, 33.7%
Fitness Testing:    286.7 seconds, 52.5%
Report:              75.1 seconds, 13.8%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 132
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 133
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 133
;;******************************
;; -*- Number IO problem report - generation 133
Test total error for best: 59998.23050000004
Test mean error for best: 29.99912
;;------------------------------
Outputs of best individual on training cases:
Correct output: -57.4559422311 | Program output: -74.023617    
Correct output: -71.0754923621 | Program output: -65.023617    
Correct output: -66.5176295557 | Program output: -77.023617    
Correct output: 149.3187378    | Program output: 86.028727     
Correct output: -36.5450493525 | Program output: -83.023617    
Correct output: 75.4021928097  | Program output: 48.024907     
Correct output: 52.2615929867  | Program output: 74.027527     
Correct output: -19.2178367434 | Program output: 43.024417     
Correct output: 66.7518906772  | Program output: 1.023617      
Correct output: 7.673605441    | Program output: 27.023607     
Correct output: 23.6294031682  | Program output: 90.029107     
Correct output: -6.1389033433  | Program output: 38.023927     
Correct output: 9.2516366816   | Program output: -82.023627    
Correct output: 31.3251776267  | Program output: -55.023627    
Correct output: 73.3746496408  | Program output: 0.023607      
Correct output: 20.0500553336  | Program output: -19.023627    
Correct output: -23.2820697498 | Program output: 32.023627     
Correct output: 120.1004999359 | Program output: 30.023607     
Correct output: -155.453212395 | Program output: -98.023617    
Correct output: 31.10301576    | Program output: 10.023617     
Correct output: 45.5733057121  | Program output: -39.023607    
Correct output: -68.592783645  | Program output: -78.023607    
Correct output: -125.979392023 | Program output: -70.023627    
Correct output: -91.9273649148 | Program output: -71.023617    
Correct output: -92.5660607267 | Program output: -49.023627    
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_inc} {:instruction float_max} {:instruction tagged_169} {:instruction float_inc} {:instruction integer_pop} {:instruction float_min} {:instruction float_add} {:instruction float_yank} {:instruction integer_inc} {:instruction float_add} {:instruction integer_pop} {:instruction integer_dup} {:instruction integer_dup_items} {:instruction print_integer} {:instruction float_min} {:instruction print_float} {:instruction integer_div} {:instruction 27} {:instruction float_sub} {:instruction float_yankdup} {:instruction integer_div} {:instruction 9} {:instruction float_yankdup} {:instruction integer_stackdepth} {:instruction float_frominteger} {:instruction tag_float_196} {:instruction float_swap} {:instruction float_rot} {:instruction integer_add} {:instruction integer_stackdepth} {:instruction float_add} {:instruction in2} {:instruction float_mult} {:instruction integer_stackdepth} {:instruction float_frominteger} {:instruction tag_float_196} {:instruction float_swap} {:instruction float_rot} {:instruction integer_add} {:instruction integer_max} {:instruction float_max} {:instruction integer_stackdepth} {:instruction float_flush} {:instruction in2} {:instruction float_frominteger} {:instruction print_float} {:instruction integer_dup} {:instruction float_shove} {:instruction float_sub} {:instruction integer_inc} {:instruction float_mod} {:instruction integer_dup} {:instruction float_add} {:instruction print_integer} {:instruction float_dup_times} {:instruction integer_yank} {:instruction print_integer} {:instruction integer_yank} {:instruction integer_fromfloat} {:instruction float_sin} {:instruction integer_inc} {:instruction integer_add} {:instruction integer_max} {:instruction tagged_175} {:instruction integer_yank} {:instruction integer_max} {:instruction float_mod} {:instruction integer_stackdepth} {:instruction float_mult} {:instruction in2} {:instruction integer_fromfloat} {:instruction integer_mod} {:instruction print_integer} {:instruction float_min} {:instruction integer_stackdepth} {:instruction tag_float_291} {:instruction 6} {:instruction tag_float_291} {:instruction integer_inc} {:instruction float_swap} {:instruction print_integer})
Best program: (integer_inc float_max tagged_169 float_inc integer_pop float_min float_add float_yank integer_inc float_add integer_pop integer_dup integer_dup_items print_integer float_min print_float integer_div 27 float_sub float_yankdup integer_div 9 float_yankdup integer_stackdepth float_frominteger tag_float_196 float_swap float_rot integer_add integer_stackdepth float_add in2 float_mult integer_stackdepth float_frominteger tag_float_196 float_swap float_rot integer_add integer_max float_max integer_stackdepth float_flush in2 float_frominteger print_float integer_dup float_shove float_sub integer_inc float_mod integer_dup float_add print_integer float_dup_times integer_yank print_integer integer_yank integer_fromfloat float_sin integer_inc integer_add integer_max tagged_175 integer_yank integer_max float_mod integer_stackdepth float_mult in2 integer_fromfloat integer_mod print_integer float_min integer_stackdepth tag_float_291 6 tag_float_291 integer_inc float_swap print_integer)
Errors: [16.5677 9 6.0519 8 10.506 10 63.29 7 46.4786 10 27.3773 7 21.7659 9 62.2423 12 65.7283 10 19.35 7 66.3997 9 44.1628 9 91.2753 9 86.3488 9 73.351 10 39.0737 11 55.3057 9 90.0769 11 57.4296 10 21.0794 7 84.5969 10 9.4308 7 55.9558 10 20.9037 7 43.5424 9]
Total: 1404.2905
Mean: 28.08581
Genome size: 81
Size: 82
Percent parens: 0.012
--- Population Statistics ---
Average total errors in population: 4081.977505400002
Median total errors in population: 1404.2905
Error averages by case: (157.51355520000195 9.423 148.93494780000023 8.678 152.59485049999782 10.181 141.02322949999896 7.635 182.25223360000115 10.372 108.72569979999793 7.581 102.42205619999922 9.456 138.04107309999966 11.806 131.99990840000106 10.173 97.98485680000097 7.689 142.4153769999996 9.336 122.50788800000142 9.231 219.20302110000154 9.483 214.98560400000287 9.492 136.1157518999986 10.246 159.89019739999958 11.231 131.8832026999986 9.524 163.78547879999792 10.951 193.60096640000125 10.364 100.53851430000088 7.271 213.7092685000014 10.454 151.66785520000093 7.75 191.88345839999855 10.208 161.7658578999984 7.825 180.86465290000203 9.308)
Error minima by case: (16.5448 7 6.021 7 10.4831 8 22.3187 6 37.545 9 11.6227 6 16.2346 8 20.2178 9 20.2717 9 0.6736 6 3.3706 8 7.1793 7 2.2516 7 4.3252 7 13.649 8 3.0501 9 24.3164 9 9.9356 9 57.3987 9 4.103 6 9.5563 9 9.4079 6 55.9248 8 20.8728 6 43.5091 8)
Average genome size in population (length): 80.903
Average program size in population (points): 81.903
Average percent parens in population: 0.012
Minimum age in population: 182.3007306525367
Maximum age in population: 187.1531169744051
Average age in population: 185.3265402649811
Median age in population: 185.3322371048549
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 6
Genome diversity (% unique Plush genomes):	 0.89
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 6
Syntactic diversity (% unique Push programs):	 0.89
Total error diversity:				 0.242
Error (vector) diversity:			 0.288
Behavioral diversity:				 0.288
--- Run Statistics ---
Number of program evaluations used so far: 134000
Number of point (instruction) evaluations so far: 296778731
--- Timings ---
Current time: 1529615702624 milliseconds
Total Time:         549.3 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       185.0 seconds, 33.7%
Fitness Testing:    288.7 seconds, 52.6%
Report:              75.5 seconds, 13.7%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 133
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 134
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 134
;;******************************
;; -*- Number IO problem report - generation 134
Test total error for best: 59998.23050000004
Test mean error for best: 29.99912
;;------------------------------
Outputs of best individual on training cases:
Correct output: -57.4559422311 | Program output: -74.023617    
Correct output: -71.0754923621 | Program output: -65.023617    
Correct output: -66.5176295557 | Program output: -77.023617    
Correct output: 149.3187378    | Program output: 86.028727     
Correct output: -36.5450493525 | Program output: -83.023617    
Correct output: 75.4021928097  | Program output: 48.024907     
Correct output: 52.2615929867  | Program output: 74.027527     
Correct output: -19.2178367434 | Program output: 43.024417     
Correct output: 66.7518906772  | Program output: 1.023617      
Correct output: 7.673605441    | Program output: 27.023607     
Correct output: 23.6294031682  | Program output: 90.029107     
Correct output: -6.1389033433  | Program output: 38.023927     
Correct output: 9.2516366816   | Program output: -82.023627    
Correct output: 31.3251776267  | Program output: -55.023627    
Correct output: 73.3746496408  | Program output: 0.023607      
Correct output: 20.0500553336  | Program output: -19.023627    
Correct output: -23.2820697498 | Program output: 32.023627     
Correct output: 120.1004999359 | Program output: 30.023607     
Correct output: -155.453212395 | Program output: -98.023617    
Correct output: 31.10301576    | Program output: 10.023617     
Correct output: 45.5733057121  | Program output: -39.023607    
Correct output: -68.592783645  | Program output: -78.023607    
Correct output: -125.979392023 | Program output: -70.023627    
Correct output: -91.9273649148 | Program output: -71.023617    
Correct output: -92.5660607267 | Program output: -49.023627    
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_dup} {:instruction float_pop} {:instruction print_float} {:instruction integer_dup} {:instruction integer_yankdup} {:instruction float_add} {:instruction integer_dup_times} {:instruction float_min} {:instruction float_dup_times} {:instruction float_inc} {:instruction float_dup} {:instruction float_mult} {:instruction float_div} {:instruction print_integer} {:instruction print_integer} {:instruction float_min} {:instruction 27} {:instruction integer_add} {:instruction integer_sub} {:instruction 9} {:instruction integer_dup_times} {:instruction float_dup_times} {:instruction integer_inc} {:instruction float_add} {:instruction float_yank} {:instruction integer_dup_times} {:instruction float_min} {:instruction float_shove} {:instruction integer_div} {:instruction 27} {:instruction integer_dup_items} {:instruction print_float} {:instruction integer_div} {:instruction 27} {:instruction float_sub} {:instruction float_dup_times} {:instruction integer_min} {:instruction integer_shove} {:instruction integer_flush} {:instruction float_rot} {:instruction float_dup_times} {:instruction float_rot} {:instruction print_integer} {:instruction float_min} {:instruction print_float} {:instruction integer_div} {:instruction 27} {:instruction float_sub} {:instruction float_yankdup} {:instruction float_mod} {:instruction 9} {:instruction integer_add} {:instruction integer_stackdepth} {:instruction float_add} {:instruction in2} {:instruction tag_float_196} {:instruction float_swap} {:instruction float_rot} {:instruction integer_add} {:instruction integer_max} {:instruction integer_max} {:instruction integer_shove} {:instruction integer_stackdepth} {:instruction float_swap} {:instruction in2} {:instruction float_frominteger} {:instruction print_float} {:instruction integer_dup} {:instruction float_shove} {:instruction float_shove} {:instruction integer_inc} {:instruction print_integer} {:instruction integer_shove} {:instruction float_min} {:instruction print_integer} {:instruction integer_shove} {:instruction integer_yank} {:instruction integer_rot} {:instruction integer_fromfloat} {:instruction integer_max} {:instruction integer_max} {:instruction integer_fromfloat} {:instruction integer_stackdepth} {:instruction integer_sub} {:instruction integer_fromfloat} {:instruction integer_stackdepth} {:instruction float_yankdup} {:instruction in2} {:instruction float_mult} {:instruction integer_stackdepth} {:instruction float_frominteger} {:instruction integer_fromfloat} {:instruction integer_mod} {:instruction print_integer} {:instruction float_min} {:instruction integer_stackdepth} {:instruction tag_float_291} {:instruction 6} {:instruction tag_float_291} {:instruction -74} {:instruction 7} {:instruction tag_float_291} {:instruction float_cos} {:instruction float_min} {:instruction 6} {:instruction tag_float_291} {:instruction integer_inc} {:instruction float_swap} {:instruction print_integer})
Best program: (integer_dup float_pop print_float integer_dup integer_yankdup float_add integer_dup_times float_min float_dup_times float_inc float_dup float_mult float_div print_integer print_integer float_min 27 integer_add integer_sub 9 integer_dup_times float_dup_times integer_inc float_add float_yank integer_dup_times float_min float_shove integer_div 27 integer_dup_items print_float integer_div 27 float_sub float_dup_times integer_min integer_shove integer_flush float_rot float_dup_times float_rot print_integer float_min print_float integer_div 27 float_sub float_yankdup float_mod 9 integer_add integer_stackdepth float_add in2 tag_float_196 float_swap float_rot integer_add integer_max integer_max integer_shove integer_stackdepth float_swap in2 float_frominteger print_float integer_dup float_shove float_shove integer_inc print_integer integer_shove float_min print_integer integer_shove integer_yank integer_rot integer_fromfloat integer_max integer_max integer_fromfloat integer_stackdepth integer_sub integer_fromfloat integer_stackdepth float_yankdup in2 float_mult integer_stackdepth float_frominteger integer_fromfloat integer_mod print_integer float_min integer_stackdepth tag_float_291 6 tag_float_291 -74 7 tag_float_291 float_cos float_min 6 tag_float_291 integer_inc float_swap print_integer)
Errors: [16.5677 9 6.0519 8 10.506 10 63.29 7 46.4786 10 27.3773 7 21.7659 9 62.2423 12 65.7283 10 19.35 7 66.3997 9 44.1628 9 91.2753 9 86.3488 9 73.351 10 39.0737 11 55.3057 9 90.0769 11 57.4296 10 21.0794 7 84.5969 10 9.4308 7 55.9558 10 20.9037 7 43.5424 9]
Total: 1404.2905
Mean: 28.08581
Genome size: 109
Size: 110
Percent parens: 0.009
--- Population Statistics ---
Average total errors in population: 4415.955797300003
Median total errors in population: 1407.2605
Error averages by case: (165.42955170000113 9.503 157.90603620000107 8.72 160.54420649999778 10.221 157.97513629999912 7.667 189.97982640000112 10.401 125.48037329999774 7.641 121.3749717999992 9.499 157.06658510000014 11.827 150.8246362000003 10.2 118.70300790000121 7.747 160.3432441999996 9.379 141.01008670000124 9.291 226.78660730000138 9.543 222.72796740000285 9.531 153.87850399999823 10.245 174.05567209999919 11.262 151.12355429999886 9.597 181.17643399999795 11.006 202.07678240000138 10.468 119.32235970000077 7.36 221.19775080000147 10.47 159.5337926000009 7.815 200.48947519999865 10.247 170.59728599999843 7.894 189.492949200002 9.325)
Error minima by case: (15.6168 8 5.994 7 9.5551 8 36.7049 6 37.562 8 25.4022 6 16.2389 9 20.2348 8 24.2708 7 0.6736 6 0.6003 7 7.1659 7 0.7484 7 4.3252 7 16.6481 8 6.9499 10 24.3091 9 9.9231 9 57.3717 9 4.5545 5 9.5526 9 8.4799 7 55.8979 8 20.8459 7 43.4845 8)
Average genome size in population (length): 81.678
Average program size in population (points): 82.678
Average percent parens in population: 0.012
Minimum age in population: 184.5555795028383
Maximum age in population: 188.7068991460079
Average age in population: 186.7250165354086
Median age in population: 186.7563895986977
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 6
Genome diversity (% unique Plush genomes):	 0.887
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 6
Syntactic diversity (% unique Push programs):	 0.887
Total error diversity:				 0.252
Error (vector) diversity:			 0.304
Behavioral diversity:				 0.304
--- Run Statistics ---
Number of program evaluations used so far: 135000
Number of point (instruction) evaluations so far: 298823681
--- Timings ---
Current time: 1529615706494 milliseconds
Total Time:         553.0 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       186.2 seconds, 33.7%
Fitness Testing:    290.7 seconds, 52.6%
Report:              76.0 seconds, 13.7%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 134
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 135
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 135
;;******************************
;; -*- Number IO problem report - generation 135
Test total error for best: 59998.23050000004
Test mean error for best: 29.99912
;;------------------------------
Outputs of best individual on training cases:
Correct output: -57.4559422311 | Program output: -74.023617    
Correct output: -71.0754923621 | Program output: -65.023617    
Correct output: -66.5176295557 | Program output: -77.023617    
Correct output: 149.3187378    | Program output: 86.028727     
Correct output: -36.5450493525 | Program output: -83.023617    
Correct output: 75.4021928097  | Program output: 48.024907     
Correct output: 52.2615929867  | Program output: 74.027527     
Correct output: -19.2178367434 | Program output: 43.024417     
Correct output: 66.7518906772  | Program output: 1.023617      
Correct output: 7.673605441    | Program output: 27.023607     
Correct output: 23.6294031682  | Program output: 90.029107     
Correct output: -6.1389033433  | Program output: 38.023927     
Correct output: 9.2516366816   | Program output: -82.023627    
Correct output: 31.3251776267  | Program output: -55.023627    
Correct output: 73.3746496408  | Program output: 0.023607      
Correct output: 20.0500553336  | Program output: -19.023627    
Correct output: -23.2820697498 | Program output: 32.023627     
Correct output: 120.1004999359 | Program output: 30.023607     
Correct output: -155.453212395 | Program output: -98.023617    
Correct output: 31.10301576    | Program output: 10.023617     
Correct output: 45.5733057121  | Program output: -39.023607    
Correct output: -68.592783645  | Program output: -78.023607    
Correct output: -125.979392023 | Program output: -70.023627    
Correct output: -91.9273649148 | Program output: -71.023617    
Correct output: -92.5660607267 | Program output: -49.023627    
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_min} {:instruction float_yank} {:instruction integer_dup} {:instruction float_min} {:instruction integer_shove} {:instruction integer_div} {:instruction float_min} {:instruction float_yankdup} {:instruction float_yankdup} {:instruction float_frominteger} {:instruction float_dup_times} {:instruction integer_dup_times} {:instruction float_cos} {:instruction float_min} {:instruction float_rot} {:instruction print_integer} {:instruction float_cos} {:instruction print_float} {:instruction integer_div} {:instruction 27} {:instruction float_sub} {:instruction float_yankdup} {:instruction float_mod} {:instruction 9} {:instruction integer_add} {:instruction integer_stackdepth} {:instruction float_tan} {:instruction in2} {:instruction tag_float_196} {:instruction float_swap} {:instruction float_rot} {:instruction integer_add} {:instruction integer_max} {:instruction integer_max} {:instruction float_yank} {:instruction integer_stackdepth} {:instruction float_min} {:instruction in2} {:instruction float_frominteger} {:instruction print_float} {:instruction print_float} {:instruction float_inc} {:instruction integer_rot} {:instruction float_shove} {:instruction integer_inc} {:instruction float_mod} {:instruction print_integer} {:instruction float_swap} {:instruction float_swap} {:instruction print_integer} {:instruction integer_inc} {:instruction integer_shove} {:instruction float_min} {:instruction print_integer} {:instruction integer_yank} {:instruction float_min} {:instruction float_add} {:instruction in2} {:instruction integer_max} {:instruction float_sin} {:instruction integer_yank} {:instruction integer_max} {:instruction integer_mult} {:instruction integer_stackdepth} {:instruction float_add} {:instruction in2} {:instruction float_mult} {:instruction integer_stackdepth} {:instruction float_frominteger} {:instruction integer_fromfloat} {:instruction integer_mod} {:instruction print_integer} {:instruction float_min} {:instruction integer_stackdepth} {:instruction tag_float_285} {:instruction 6} {:instruction tag_float_291} {:instruction integer_inc} {:instruction float_swap} {:instruction print_integer})
Best program: (float_min float_yank integer_dup float_min integer_shove integer_div float_min float_yankdup float_yankdup float_frominteger float_dup_times integer_dup_times float_cos float_min float_rot print_integer float_cos print_float integer_div 27 float_sub float_yankdup float_mod 9 integer_add integer_stackdepth float_tan in2 tag_float_196 float_swap float_rot integer_add integer_max integer_max float_yank integer_stackdepth float_min in2 float_frominteger print_float print_float float_inc integer_rot float_shove integer_inc float_mod print_integer float_swap float_swap print_integer integer_inc integer_shove float_min print_integer integer_yank float_min float_add in2 integer_max float_sin integer_yank integer_max integer_mult integer_stackdepth float_add in2 float_mult integer_stackdepth float_frominteger integer_fromfloat integer_mod print_integer float_min integer_stackdepth tag_float_285 6 tag_float_291 integer_inc float_swap print_integer)
Errors: [16.5677 9 6.0519 8 10.506 10 63.29 7 46.4786 10 27.3773 7 21.7659 9 62.2423 12 65.7283 10 19.35 7 66.3997 9 44.1628 9 91.2753 9 86.3488 9 73.351 10 39.0737 11 55.3057 9 90.0769 11 57.4296 10 21.0794 7 84.5969 10 9.4308 7 55.9558 10 20.9037 7 43.5424 9]
Total: 1404.2905
Mean: 28.08581
Genome size: 80
Size: 81
Percent parens: 0.012
--- Population Statistics ---
Average total errors in population: 4337.015045700004
Median total errors in population: 1404.2905
Error averages by case: (170.19385170000183 9.417 161.58598610000016 8.636 165.3656004999977 10.185 149.2528145999996 7.624 194.77722450000124 10.38 114.29186409999795 7.594 111.1238344999992 9.453 146.3528460000005 11.837 138.0680915000007 10.151 105.39825920000112 7.691 149.96119840000028 9.339 129.90526840000152 9.242 231.4343528000011 9.502 227.15787230000328 9.498 142.02326139999866 10.228 181.15983989999998 11.249 139.1197347999986 9.537 169.60891119999764 10.958 205.68941890000153 10.382 107.69187920000107 7.29 225.75027350000167 10.467 164.45321110000114 7.753 203.78593239999844 10.21 174.25011459999843 7.831 192.8474041000022 9.312)
Error minima by case: (16.5458 7 6.0023 7 10.4841 8 36.71 6 37.5822 9 26.4015 6 5.2616 8 20.2623 9 24.2708 9 0.6736 6 3.3706 8 7.1783 7 6.2143 7 4.3252 7 16.6481 8 3.0501 10 24.3154 9 9.9231 9 57.38 9 4.103 5 9.5726 9 9.4079 7 55.9061 9 20.8542 6 28.4339 8)
Average genome size in population (length): 81.428
Average program size in population (points): 82.428
Average percent parens in population: 0.012
Minimum age in population: 185.690172030251
Maximum age in population: 189.9324504061383
Average age in population: 188.1119211695522
Median age in population: 188.1399389112882
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 6
Genome diversity (% unique Plush genomes):	 0.898
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 6
Syntactic diversity (% unique Push programs):	 0.898
Total error diversity:				 0.242
Error (vector) diversity:			 0.296
Behavioral diversity:				 0.296
--- Run Statistics ---
Number of program evaluations used so far: 136000
Number of point (instruction) evaluations so far: 300862306
--- Timings ---
Current time: 1529615710257 milliseconds
Total Time:         556.9 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       187.6 seconds, 33.7%
Fitness Testing:    292.6 seconds, 52.5%
Report:              76.6 seconds, 13.8%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 135
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 136
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 136
;;******************************
;; -*- Number IO problem report - generation 136
Test total error for best: 59998.23050000004
Test mean error for best: 29.99912
;;------------------------------
Outputs of best individual on training cases:
Correct output: -57.4559422311 | Program output: -74.023617    
Correct output: -71.0754923621 | Program output: -65.023617    
Correct output: -66.5176295557 | Program output: -77.023617    
Correct output: 149.3187378    | Program output: 86.028727     
Correct output: -36.5450493525 | Program output: -83.023617    
Correct output: 75.4021928097  | Program output: 48.024907     
Correct output: 52.2615929867  | Program output: 74.027527     
Correct output: -19.2178367434 | Program output: 43.024417     
Correct output: 66.7518906772  | Program output: 1.023617      
Correct output: 7.673605441    | Program output: 27.023607     
Correct output: 23.6294031682  | Program output: 90.029107     
Correct output: -6.1389033433  | Program output: 38.023927     
Correct output: 9.2516366816   | Program output: -82.023627    
Correct output: 31.3251776267  | Program output: -55.023627    
Correct output: 73.3746496408  | Program output: 0.023607      
Correct output: 20.0500553336  | Program output: -19.023627    
Correct output: -23.2820697498 | Program output: 32.023627     
Correct output: 120.1004999359 | Program output: 30.023607     
Correct output: -155.453212395 | Program output: -98.023617    
Correct output: 31.10301576    | Program output: 10.023617     
Correct output: 45.5733057121  | Program output: -39.023607    
Correct output: -68.592783645  | Program output: -78.023607    
Correct output: -125.979392023 | Program output: -70.023627    
Correct output: -91.9273649148 | Program output: -71.023617    
Correct output: -92.5660607267 | Program output: -49.023627    
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_inc} {:instruction integer_pop} {:instruction float_min} {:instruction float_add} {:instruction float_yank} {:instruction integer_inc} {:instruction float_add} {:instruction integer_pop} {:instruction integer_dup} {:instruction float_min} {:instruction integer_shove} {:instruction float_inc} {:instruction float_rot} {:instruction float_dec} {:instruction float_rot} {:instruction integer_inc} {:instruction float_add} {:instruction float_yank} {:instruction float_div} {:instruction float_min} {:instruction integer_div} {:instruction 27} {:instruction float_sub} {:instruction integer_shove} {:instruction integer_sub} {:instruction 9} {:instruction float_rot} {:instruction integer_add} {:instruction integer_stackdepth} {:instruction float_mod} {:instruction in2} {:instruction integer_add} {:instruction integer_max} {:instruction integer_max} {:instruction float_max} {:instruction integer_stackdepth} {:instruction float_min} {:instruction in2} {:instruction float_frominteger} {:instruction print_float} {:instruction integer_dup} {:instruction float_shove} {:instruction float_shove} {:instruction integer_inc} {:instruction float_mod} {:instruction integer_dup} {:instruction integer_dup_items} {:instruction print_integer} {:instruction integer_shove} {:instruction integer_shove} {:instruction print_integer} {:instruction integer_yank} {:instruction float_swap} {:instruction float_mult} {:instruction integer_yank} {:instruction integer_max} {:instruction integer_mult} {:instruction integer_stackdepth} {:instruction float_add} {:instruction in2} {:instruction float_mult} {:instruction integer_stackdepth} {:instruction float_frominteger} {:instruction integer_fromfloat} {:instruction integer_mod} {:instruction print_integer} {:instruction float_min} {:instruction integer_stackdepth} {:instruction tag_float_291} {:instruction 6} {:instruction tag_float_291} {:instruction integer_inc} {:instruction float_swap} {:instruction print_integer})
Best program: (float_inc integer_pop float_min float_add float_yank integer_inc float_add integer_pop integer_dup float_min integer_shove float_inc float_rot float_dec float_rot integer_inc float_add float_yank float_div float_min integer_div 27 float_sub integer_shove integer_sub 9 float_rot integer_add integer_stackdepth float_mod in2 integer_add integer_max integer_max float_max integer_stackdepth float_min in2 float_frominteger print_float integer_dup float_shove float_shove integer_inc float_mod integer_dup integer_dup_items print_integer integer_shove integer_shove print_integer integer_yank float_swap float_mult integer_yank integer_max integer_mult integer_stackdepth float_add in2 float_mult integer_stackdepth float_frominteger integer_fromfloat integer_mod print_integer float_min integer_stackdepth tag_float_291 6 tag_float_291 integer_inc float_swap print_integer)
Errors: [16.5677 9 6.0519 8 10.506 10 63.29 7 46.4786 10 27.3773 7 21.7659 9 62.2423 12 65.7283 10 19.35 7 66.3997 9 44.1628 9 91.2753 9 86.3488 9 73.351 10 39.0737 11 55.3057 9 90.0769 11 57.4296 10 21.0794 7 84.5969 10 9.4308 7 55.9558 10 20.9037 7 43.5424 9]
Total: 1404.2905
Mean: 28.08581
Genome size: 74
Size: 75
Percent parens: 0.013
--- Population Statistics ---
Average total errors in population: 3992.1987511000016
Median total errors in population: 1404.2905
Error averages by case: (149.4321031000011 9.369 140.63781880000104 8.6 144.37929839999754 10.155 141.01225379999852 7.587 174.67422550000126 10.319 107.94011919999821 7.537 102.67788069999926 9.433 138.26854639999968 11.806 135.90642810000068 10.174 99.13856390000079 7.651 141.95571099999916 9.316 121.74356250000143 9.221 212.4356596000012 9.457 208.28125520000333 9.473 142.93377329999825 10.2 153.5045088999989 11.225 132.0617325999987 9.507 164.03064199999807 10.954 185.55997100000158 10.348 100.77568350000108 7.267 206.0482535000019 10.445 143.4590860000011 7.692 183.94966019999836 10.17 153.57740419999823 7.725 172.92660970000242 9.257)
Error minima by case: (16.5458 8 5.9919 7 10.4824 8 36.7049 6 37.562 9 26.4022 6 21.7401 8 20.2348 9 29.7419 6 0.6736 6 16.6294 8 7.1659 7 8.2143 7 4.3252 7 33.6254 7 6.9499 9 24.3091 9 9.9231 9 57.3696 9 5.907 5 8.5733 9 9.4072 6 55.8958 9 20.8437 6 43.4824 8)
Average genome size in population (length): 81.07
Average program size in population (points): 82.07
Average percent parens in population: 0.012
Minimum age in population: 187.1115441277127
Maximum age in population: 191.3842531461616
Average age in population: 189.5120382047462
Median age in population: 189.5789755628628
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 5
Genome diversity (% unique Plush genomes):	 0.897
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 5
Syntactic diversity (% unique Push programs):	 0.897
Total error diversity:				 0.234
Error (vector) diversity:			 0.275
Behavioral diversity:				 0.275
--- Run Statistics ---
Number of program evaluations used so far: 137000
Number of point (instruction) evaluations so far: 302892031
--- Timings ---
Current time: 1529615714158 milliseconds
Total Time:         560.7 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       188.9 seconds, 33.7%
Fitness Testing:    294.6 seconds, 52.5%
Report:              77.1 seconds, 13.8%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 136
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 137
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 137
;;******************************
;; -*- Number IO problem report - generation 137
Test total error for best: 59998.23050000004
Test mean error for best: 29.99912
;;------------------------------
Outputs of best individual on training cases:
Correct output: -57.4559422311 | Program output: -74.023617    
Correct output: -71.0754923621 | Program output: -65.023617    
Correct output: -66.5176295557 | Program output: -77.023617    
Correct output: 149.3187378    | Program output: 86.028727     
Correct output: -36.5450493525 | Program output: -83.023617    
Correct output: 75.4021928097  | Program output: 48.024907     
Correct output: 52.2615929867  | Program output: 74.027527     
Correct output: -19.2178367434 | Program output: 43.024417     
Correct output: 66.7518906772  | Program output: 1.023617      
Correct output: 7.673605441    | Program output: 27.023607     
Correct output: 23.6294031682  | Program output: 90.029107     
Correct output: -6.1389033433  | Program output: 38.023927     
Correct output: 9.2516366816   | Program output: -82.023627    
Correct output: 31.3251776267  | Program output: -55.023627    
Correct output: 73.3746496408  | Program output: 0.023607      
Correct output: 20.0500553336  | Program output: -19.023627    
Correct output: -23.2820697498 | Program output: 32.023627     
Correct output: 120.1004999359 | Program output: 30.023607     
Correct output: -155.453212395 | Program output: -98.023617    
Correct output: 31.10301576    | Program output: 10.023617     
Correct output: 45.5733057121  | Program output: -39.023607    
Correct output: -68.592783645  | Program output: -78.023607    
Correct output: -125.979392023 | Program output: -70.023627    
Correct output: -91.9273649148 | Program output: -71.023617    
Correct output: -92.5660607267 | Program output: -49.023627    
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_inc} {:instruction float_add} {:instruction float_yank} {:instruction float_min} {:instruction float_rot} {:instruction integer_dup} {:instruction float_rot} {:instruction float_stackdepth} {:instruction float_mult} {:instruction float_cos} {:instruction integer_min} {:instruction integer_dup_items} {:instruction float_min} {:instruction print_float} {:instruction integer_div} {:instruction 27} {:instruction float_sub} {:instruction float_cos} {:instruction float_min} {:instruction 9} {:instruction float_rot} {:instruction integer_add} {:instruction integer_stackdepth} {:instruction float_mod} {:instruction in2} {:instruction integer_add} {:instruction integer_max} {:instruction float_yank} {:instruction integer_stackdepth} {:instruction float_flush} {:instruction in2} {:instruction float_frominteger} {:instruction print_float} {:instruction integer_dup} {:instruction float_shove} {:instruction float_shove} {:instruction integer_add} {:instruction float_max} {:instruction integer_dup} {:instruction integer_dup_items} {:instruction float_add} {:instruction integer_min} {:instruction integer_pop} {:instruction print_integer} {:instruction integer_min} {:instruction print_integer} {:instruction integer_min} {:instruction integer_yank} {:instruction float_sub} {:instruction integer_yank} {:instruction float_sin} {:instruction integer_yank} {:instruction integer_yank} {:instruction print_integer} {:instruction integer_yank} {:instruction integer_max} {:instruction integer_max} {:instruction integer_fromfloat} {:instruction integer_min} {:instruction integer_yank} {:instruction integer_max} {:instruction float_dup_times} {:instruction integer_stackdepth} {:instruction float_add} {:instruction integer_dup} {:instruction float_cos} {:instruction integer_yank} {:instruction integer_max} {:instruction integer_stackdepth} {:instruction float_add} {:instruction in2} {:instruction integer_mod} {:instruction float_add} {:instruction in2} {:instruction float_mult} {:instruction integer_stackdepth} {:instruction float_frominteger} {:instruction integer_fromfloat} {:instruction integer_mod} {:instruction print_integer} {:instruction float_min} {:instruction 6} {:instruction tag_float_172} {:instruction integer_inc} {:instruction float_swap} {:instruction print_integer})
Best program: (integer_inc float_add float_yank float_min float_rot integer_dup float_rot float_stackdepth float_mult float_cos integer_min integer_dup_items float_min print_float integer_div 27 float_sub float_cos float_min 9 float_rot integer_add integer_stackdepth float_mod in2 integer_add integer_max float_yank integer_stackdepth float_flush in2 float_frominteger print_float integer_dup float_shove float_shove integer_add float_max integer_dup integer_dup_items float_add integer_min integer_pop print_integer integer_min print_integer integer_min integer_yank float_sub integer_yank float_sin integer_yank integer_yank print_integer integer_yank integer_max integer_max integer_fromfloat integer_min integer_yank integer_max float_dup_times integer_stackdepth float_add integer_dup float_cos integer_yank integer_max integer_stackdepth float_add in2 integer_mod float_add in2 float_mult integer_stackdepth float_frominteger integer_fromfloat integer_mod print_integer float_min 6 tag_float_172 integer_inc float_swap print_integer)
Errors: [16.5677 9 6.0519 8 10.506 10 63.29 7 46.4786 10 27.3773 7 21.7659 9 62.2423 12 65.7283 10 19.35 7 66.3997 9 44.1628 9 91.2753 9 86.3488 9 73.351 10 39.0737 11 55.3057 9 90.0769 11 57.4296 10 21.0794 7 84.5969 10 9.4308 7 55.9558 10 20.9037 7 43.5424 9]
Total: 1404.2905
Mean: 28.08581
Genome size: 86
Size: 87
Percent parens: 0.011
--- Population Statistics ---
Average total errors in population: 4034.008157700005
Median total errors in population: 1404.2905
Error averages by case: (155.79029760000154 9.415 147.97148220000048 8.653 150.7145539999978 10.17 135.96869689999824 7.585 180.93552070000126 10.33 102.62926849999822 7.553 98.28049909999916 9.437 135.11764829999936 11.806 133.59160060000096 10.145 95.77398740000073 7.655 138.8113498999992 9.314 118.50028440000125 9.246 218.63218750000138 9.459 214.51550530000333 9.487 136.5675594999985 10.222 162.73504529999977 11.215 128.82802549999852 9.487 160.10827479999804 10.948 192.4034845000015 10.361 96.39236710000098 7.262 213.16973590000177 10.432 149.78233400000107 7.705 190.85895839999856 10.191 160.75428039999832 7.774 180.0382099000023 9.285)
Error minima by case: (16.5441 8 5.9921 7 10.4824 8 36.7025 6 37.5824 8 26.3952 6 21.7384 8 20.2633 8 24.3451 6 0.6736 6 3.3706 8 7.1793 7 8.1974 7 4.3252 7 0.0 5 3.0501 9 24.3194 8 9.9207 8 57.3699 9 4.103 6 8.5733 9 9.4072 7 55.896 9 20.844 6 43.4827 8)
Average genome size in population (length): 80.883
Average program size in population (points): 81.883
Average percent parens in population: 0.012
Minimum age in population: 188.441465583883
Maximum age in population: 192.7922940395532
Average age in population: 190.9398500083481
Median age in population: 190.9986996409903
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 6
Genome diversity (% unique Plush genomes):	 0.887
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 6
Syntactic diversity (% unique Push programs):	 0.887
Total error diversity:				 0.238
Error (vector) diversity:			 0.286
Behavioral diversity:				 0.286
--- Run Statistics ---
Number of program evaluations used so far: 138000
Number of point (instruction) evaluations so far: 304916631
--- Timings ---
Current time: 1529615717890 milliseconds
Total Time:         564.6 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       190.2 seconds, 33.7%
Fitness Testing:    296.5 seconds, 52.5%
Report:              77.7 seconds, 13.8%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 137
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 138
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 138
;;******************************
;; -*- Number IO problem report - generation 138
Test total error for best: 59998.23050000004
Test mean error for best: 29.99912
;;------------------------------
Outputs of best individual on training cases:
Correct output: -57.4559422311 | Program output: -74.023617    
Correct output: -71.0754923621 | Program output: -65.023617    
Correct output: -66.5176295557 | Program output: -77.023617    
Correct output: 149.3187378    | Program output: 86.028727     
Correct output: -36.5450493525 | Program output: -83.023617    
Correct output: 75.4021928097  | Program output: 48.024907     
Correct output: 52.2615929867  | Program output: 74.027527     
Correct output: -19.2178367434 | Program output: 43.024417     
Correct output: 66.7518906772  | Program output: 1.023617      
Correct output: 7.673605441    | Program output: 27.023607     
Correct output: 23.6294031682  | Program output: 90.029107     
Correct output: -6.1389033433  | Program output: 38.023927     
Correct output: 9.2516366816   | Program output: -82.023627    
Correct output: 31.3251776267  | Program output: -55.023627    
Correct output: 73.3746496408  | Program output: 0.023607      
Correct output: 20.0500553336  | Program output: -19.023627    
Correct output: -23.2820697498 | Program output: 32.023627     
Correct output: 120.1004999359 | Program output: 30.023607     
Correct output: -155.453212395 | Program output: -98.023617    
Correct output: 31.10301576    | Program output: 10.023617     
Correct output: 45.5733057121  | Program output: -39.023607    
Correct output: -68.592783645  | Program output: -78.023607    
Correct output: -125.979392023 | Program output: -70.023627    
Correct output: -91.9273649148 | Program output: -71.023617    
Correct output: -92.5660607267 | Program output: -49.023627    
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_inc} {:instruction float_add} {:instruction integer_flush} {:instruction float_mult} {:instruction integer_rot} {:instruction float_add} {:instruction float_yank} {:instruction float_div} {:instruction float_min} {:instruction integer_div} {:instruction integer_min} {:instruction integer_shove} {:instruction integer_flush} {:instruction float_rot} {:instruction float_dup_times} {:instruction float_rot} {:instruction print_integer} {:instruction float_min} {:instruction print_float} {:instruction integer_add} {:instruction 27} {:instruction float_sub} {:instruction float_yankdup} {:instruction float_mod} {:instruction 9} {:instruction integer_add} {:instruction integer_stackdepth} {:instruction float_add} {:instruction in2} {:instruction tag_float_196} {:instruction float_swap} {:instruction float_rot} {:instruction integer_add} {:instruction integer_max} {:instruction integer_max} {:instruction float_max} {:instruction integer_stackdepth} {:instruction float_min} {:instruction in2} {:instruction float_frominteger} {:instruction print_float} {:instruction integer_dup} {:instruction float_shove} {:instruction float_shove} {:instruction integer_inc} {:instruction float_mod} {:instruction integer_dup} {:instruction integer_dup_items} {:instruction print_integer} {:instruction integer_shove} {:instruction integer_shove} {:instruction print_integer} {:instruction integer_yank} {:instruction float_swap} {:instruction float_mult} {:instruction integer_yank} {:instruction integer_max} {:instruction integer_mult} {:instruction integer_stackdepth} {:instruction float_mod} {:instruction in2} {:instruction float_mult} {:instruction integer_stackdepth} {:instruction float_frominteger} {:instruction integer_fromfloat} {:instruction integer_mod} {:instruction print_integer} {:instruction float_min} {:instruction integer_stackdepth} {:instruction tag_float_291} {:instruction 6} {:instruction tag_float_284} {:instruction integer_inc} {:instruction float_swap} {:instruction print_integer})
Best program: (integer_inc float_add integer_flush float_mult integer_rot float_add float_yank float_div float_min integer_div integer_min integer_shove integer_flush float_rot float_dup_times float_rot print_integer float_min print_float integer_add 27 float_sub float_yankdup float_mod 9 integer_add integer_stackdepth float_add in2 tag_float_196 float_swap float_rot integer_add integer_max integer_max float_max integer_stackdepth float_min in2 float_frominteger print_float integer_dup float_shove float_shove integer_inc float_mod integer_dup integer_dup_items print_integer integer_shove integer_shove print_integer integer_yank float_swap float_mult integer_yank integer_max integer_mult integer_stackdepth float_mod in2 float_mult integer_stackdepth float_frominteger integer_fromfloat integer_mod print_integer float_min integer_stackdepth tag_float_291 6 tag_float_284 integer_inc float_swap print_integer)
Errors: [16.5677 9 6.0519 8 10.506 10 63.29 7 46.4786 10 27.3773 7 21.7659 9 62.2423 12 65.7283 10 19.35 7 66.3997 9 44.1628 9 91.2753 9 86.3488 9 73.351 10 39.0737 11 55.3057 9 90.0769 11 57.4296 10 21.0794 7 84.5969 10 9.4308 7 55.9558 10 20.9037 7 43.5424 9]
Total: 1404.2905
Mean: 28.08581
Genome size: 75
Size: 76
Percent parens: 0.013
--- Population Statistics ---
Average total errors in population: 4033.4527741000034
Median total errors in population: 1404.2905
Error averages by case: (147.56080880000118 9.441 139.6576889000005 8.696 142.53679979999797 10.173 144.49330299999926 7.649 172.95366930000122 10.376 112.10204889999791 7.588 107.67059609999923 9.45 143.6490030000003 11.808 141.3707907000002 10.17 104.87628120000113 7.714 147.67959580000004 9.356 127.26648410000142 9.276 210.82212940000116 9.515 206.2532945000031 9.509 144.50814069999856 10.249 156.84817639999974 11.241 136.56394419999876 9.533 167.2891666999979 10.975 184.09371850000142 10.381 105.61604800000093 7.305 204.66570290000175 10.445 141.591278000001 7.764 183.0054017999987 10.204 152.61134759999862 7.842 171.81335580000206 9.294)
Error minima by case: (15.5814 8 5.9993 7 9.5197 8 22.3187 6 37.5824 9 26.3648 6 21.7397 8 20.2633 8 30.7349 8 0.6736 6 16.6294 8 7.1793 7 8.2143 7 4.3252 7 33.6254 8 6.9499 9 24.3194 9 6.8995 9 57.3805 9 4.914 5 9.5663 9 8.4446 7 55.8981 9 20.8452 6 43.4933 7)
Average genome size in population (length): 80.839
Average program size in population (points): 81.839
Average percent parens in population: 0.012
Minimum age in population: 190.0246748139957
Maximum age in population: 194.1142107997459
Average age in population: 192.3050154859979
Median age in population: 192.3501208832973
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 5
Genome diversity (% unique Plush genomes):	 0.88
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 5
Syntactic diversity (% unique Push programs):	 0.88
Total error diversity:				 0.244
Error (vector) diversity:			 0.288
Behavioral diversity:				 0.289
--- Run Statistics ---
Number of program evaluations used so far: 139000
Number of point (instruction) evaluations so far: 306939706
--- Timings ---
Current time: 1529615721623 milliseconds
Total Time:         568.3 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       191.5 seconds, 33.7%
Fitness Testing:    298.5 seconds, 52.5%
Report:              78.2 seconds, 13.8%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 138
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 139
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 139
;;******************************
;; -*- Number IO problem report - generation 139
Test total error for best: 59998.23050000004
Test mean error for best: 29.99912
;;------------------------------
Outputs of best individual on training cases:
Correct output: -57.4559422311 | Program output: -74.023617    
Correct output: -71.0754923621 | Program output: -65.023617    
Correct output: -66.5176295557 | Program output: -77.023617    
Correct output: 149.3187378    | Program output: 86.028727     
Correct output: -36.5450493525 | Program output: -83.023617    
Correct output: 75.4021928097  | Program output: 48.024907     
Correct output: 52.2615929867  | Program output: 74.027527     
Correct output: -19.2178367434 | Program output: 43.024417     
Correct output: 66.7518906772  | Program output: 1.023617      
Correct output: 7.673605441    | Program output: 27.023607     
Correct output: 23.6294031682  | Program output: 90.029107     
Correct output: -6.1389033433  | Program output: 38.023927     
Correct output: 9.2516366816   | Program output: -82.023627    
Correct output: 31.3251776267  | Program output: -55.023627    
Correct output: 73.3746496408  | Program output: 0.023607      
Correct output: 20.0500553336  | Program output: -19.023627    
Correct output: -23.2820697498 | Program output: 32.023627     
Correct output: 120.1004999359 | Program output: 30.023607     
Correct output: -155.453212395 | Program output: -98.023617    
Correct output: 31.10301576    | Program output: 10.023617     
Correct output: 45.5733057121  | Program output: -39.023607    
Correct output: -68.592783645  | Program output: -78.023607    
Correct output: -125.979392023 | Program output: -70.023627    
Correct output: -91.9273649148 | Program output: -71.023617    
Correct output: -92.5660607267 | Program output: -49.023627    
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_dup_items} {:instruction float_add} {:instruction float_yank} {:instruction integer_dup} {:instruction print_float} {:instruction 27} {:instruction float_dec} {:instruction tag_float_190} {:instruction float_add} {:instruction 9} {:instruction float_yankdup} {:instruction float_rot} {:instruction integer_add} {:instruction integer_stackdepth} {:instruction float_add} {:instruction in2} {:instruction float_mult} {:instruction integer_stackdepth} {:instruction float_frominteger} {:instruction tag_float_196} {:instruction float_swap} {:instruction float_tan} {:instruction integer_add} {:instruction integer_max} {:instruction float_dup_times} {:instruction float_max} {:instruction integer_stackdepth} {:instruction float_flush} {:instruction in2} {:instruction float_frominteger} {:instruction print_float} {:instruction integer_dup} {:instruction float_shove} {:instruction float_shove} {:instruction integer_inc} {:instruction integer_fromfloat} {:instruction integer_dup} {:instruction integer_dup_items} {:instruction print_integer} {:instruction integer_shove} {:instruction integer_yank} {:instruction print_integer} {:instruction integer_yank} {:instruction integer_flush} {:instruction integer_max} {:instruction integer_fromfloat} {:instruction print_integer} {:instruction integer_max} {:instruction integer_dup} {:instruction integer_add} {:instruction integer_shove} {:instruction integer_yank} {:instruction print_integer} {:instruction float_max} {:instruction float_swap} {:instruction integer_max} {:instruction integer_fromfloat} {:instruction integer_stackdepth} {:instruction float_add} {:instruction in2} {:instruction float_mult} {:instruction integer_yank} {:instruction integer_max} {:instruction float_sin} {:instruction integer_stackdepth} {:instruction float_add} {:instruction in2} {:instruction float_mult} {:instruction integer_stackdepth} {:instruction integer_mod} {:instruction print_integer} {:instruction -91} {:instruction integer_stackdepth} {:instruction tag_float_291} {:instruction 6} {:instruction tag_float_291} {:instruction tag_float_291} {:instruction integer_inc} {:instruction float_swap} {:instruction print_integer})
Best program: (float_dup_items float_add float_yank integer_dup print_float 27 float_dec tag_float_190 float_add 9 float_yankdup float_rot integer_add integer_stackdepth float_add in2 float_mult integer_stackdepth float_frominteger tag_float_196 float_swap float_tan integer_add integer_max float_dup_times float_max integer_stackdepth float_flush in2 float_frominteger print_float integer_dup float_shove float_shove integer_inc integer_fromfloat integer_dup integer_dup_items print_integer integer_shove integer_yank print_integer integer_yank integer_flush integer_max integer_fromfloat print_integer integer_max integer_dup integer_add integer_shove integer_yank print_integer float_max float_swap integer_max integer_fromfloat integer_stackdepth float_add in2 float_mult integer_yank integer_max float_sin integer_stackdepth float_add in2 float_mult integer_stackdepth integer_mod print_integer -91 integer_stackdepth tag_float_291 6 tag_float_291 tag_float_291 integer_inc float_swap print_integer)
Errors: [16.5677 9 6.0519 8 10.506 10 63.29 7 46.4786 10 27.3773 7 21.7659 9 62.2423 12 65.7283 10 19.35 7 66.3997 9 44.1628 9 91.2753 9 86.3488 9 73.351 10 39.0737 11 55.3057 9 90.0769 11 57.4296 10 21.0794 7 84.5969 10 9.4308 7 55.9558 10 20.9037 7 43.5424 9]
Total: 1404.2905
Mean: 28.08581
Genome size: 80
Size: 81
Percent parens: 0.012
--- Population Statistics ---
Average total errors in population: 3773.2714181000038
Median total errors in population: 1404.2905
Error averages by case: (140.3714992000004 9.438 132.60742470000147 8.651 136.35419999999817 10.172 130.5169440999981 7.603 166.5721363000011 10.354 96.72279639999829 7.567 91.58356219999914 9.435 128.43883459999904 11.79 128.52357230000115 10.157 88.7058653000006 7.676 132.37588639999868 9.366 111.72300700000106 9.272 204.2312517000012 9.456 199.82573350000303 9.458 133.01912119999855 10.229 149.73506859999904 11.22 122.07653979999877 9.518 154.07160839999824 10.973 178.1204470000017 10.37 91.12623060000085 7.267 198.62232620000148 10.405 135.3810120000009 7.726 176.36843969999873 10.182 145.66591889999881 7.817 165.140992000002 9.289)
Error minima by case: (16.5442 8 6.0028 6 10.4825 8 22.3187 6 37.5824 8 26.3952 6 21.7387 8 20.2633 7 1.0 5 0.6736 6 3.3706 7 7.1793 7 7.228 5 4.2982 6 0.0 4 3.0501 6 24.3194 7 9.924 7 57.3805 6 4.086 6 9.5663 6 9.4073 6 55.9067 6 20.8547 6 43.4934 6)
Average genome size in population (length): 80.811
Average program size in population (points): 81.811
Average percent parens in population: 0.012
Minimum age in population: 191.0246748139957
Maximum age in population: 195.6859414963612
Average age in population: 193.6429164259853
Median age in population: 193.6701523300671
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 4
Genome diversity (% unique Plush genomes):	 0.882
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 4
Syntactic diversity (% unique Push programs):	 0.882
Total error diversity:				 0.229
Error (vector) diversity:			 0.271
Behavioral diversity:				 0.271
--- Run Statistics ---
Number of program evaluations used so far: 140000
Number of point (instruction) evaluations so far: 308962106
--- Timings ---
Current time: 1529615725276 milliseconds
Total Time:         571.9 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       192.8 seconds, 33.7%
Fitness Testing:    300.4 seconds, 52.5%
Report:              78.6 seconds, 13.7%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 139
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 140
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 140
;;******************************
;; -*- Number IO problem report - generation 140
Test total error for best: 59998.23050000004
Test mean error for best: 29.99912
;;------------------------------
Outputs of best individual on training cases:
Correct output: -57.4559422311 | Program output: -74.023617    
Correct output: -71.0754923621 | Program output: -65.023617    
Correct output: -66.5176295557 | Program output: -77.023617    
Correct output: 149.3187378    | Program output: 86.028727     
Correct output: -36.5450493525 | Program output: -83.023617    
Correct output: 75.4021928097  | Program output: 48.024907     
Correct output: 52.2615929867  | Program output: 74.027527     
Correct output: -19.2178367434 | Program output: 43.024417     
Correct output: 66.7518906772  | Program output: 1.023617      
Correct output: 7.673605441    | Program output: 27.023607     
Correct output: 23.6294031682  | Program output: 90.029107     
Correct output: -6.1389033433  | Program output: 38.023927     
Correct output: 9.2516366816   | Program output: -82.023627    
Correct output: 31.3251776267  | Program output: -55.023627    
Correct output: 73.3746496408  | Program output: 0.023607      
Correct output: 20.0500553336  | Program output: -19.023627    
Correct output: -23.2820697498 | Program output: 32.023627     
Correct output: 120.1004999359 | Program output: 30.023607     
Correct output: -155.453212395 | Program output: -98.023617    
Correct output: 31.10301576    | Program output: 10.023617     
Correct output: 45.5733057121  | Program output: -39.023607    
Correct output: -68.592783645  | Program output: -78.023607    
Correct output: -125.979392023 | Program output: -70.023627    
Correct output: -91.9273649148 | Program output: -71.023617    
Correct output: -92.5660607267 | Program output: -49.023627    
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_dup_items} {:instruction float_add} {:instruction float_yank} {:instruction integer_dup} {:instruction print_float} {:instruction 27} {:instruction float_dec} {:instruction tag_float_190} {:instruction float_add} {:instruction 9} {:instruction float_yankdup} {:instruction float_rot} {:instruction integer_add} {:instruction integer_stackdepth} {:instruction float_add} {:instruction in2} {:instruction float_mult} {:instruction integer_stackdepth} {:instruction float_frominteger} {:instruction tag_float_196} {:instruction float_swap} {:instruction float_tan} {:instruction integer_add} {:instruction integer_max} {:instruction float_dup_times} {:instruction float_max} {:instruction integer_stackdepth} {:instruction float_flush} {:instruction in2} {:instruction float_frominteger} {:instruction print_float} {:instruction integer_dup} {:instruction float_shove} {:instruction float_shove} {:instruction integer_inc} {:instruction float_mod} {:instruction integer_dup} {:instruction integer_dup_items} {:instruction print_integer} {:instruction integer_shove} {:instruction integer_yank} {:instruction print_integer} {:instruction integer_yank} {:instruction integer_flush} {:instruction integer_max} {:instruction integer_min} {:instruction integer_yank} {:instruction print_integer} {:instruction integer_yank} {:instruction integer_max} {:instruction integer_max} {:instruction integer_fromfloat} {:instruction integer_stackdepth} {:instruction float_add} {:instruction integer_yankdup} {:instruction float_mult} {:instruction integer_yank} {:instruction float_yank} {:instruction integer_max} {:instruction float_sin} {:instruction integer_stackdepth} {:instruction float_add} {:instruction in2} {:instruction float_mod} {:instruction integer_stackdepth} {:instruction integer_mod} {:instruction print_integer} {:instruction float_min} {:instruction integer_stackdepth} {:instruction tag_float_291} {:instruction 6} {:instruction tag_float_291} {:instruction integer_inc} {:instruction float_swap} {:instruction print_integer})
Best program: (float_dup_items float_add float_yank integer_dup print_float 27 float_dec tag_float_190 float_add 9 float_yankdup float_rot integer_add integer_stackdepth float_add in2 float_mult integer_stackdepth float_frominteger tag_float_196 float_swap float_tan integer_add integer_max float_dup_times float_max integer_stackdepth float_flush in2 float_frominteger print_float integer_dup float_shove float_shove integer_inc float_mod integer_dup integer_dup_items print_integer integer_shove integer_yank print_integer integer_yank integer_flush integer_max integer_min integer_yank print_integer integer_yank integer_max integer_max integer_fromfloat integer_stackdepth float_add integer_yankdup float_mult integer_yank float_yank integer_max float_sin integer_stackdepth float_add in2 float_mod integer_stackdepth integer_mod print_integer float_min integer_stackdepth tag_float_291 6 tag_float_291 integer_inc float_swap print_integer)
Errors: [16.5677 9 6.0519 8 10.506 10 63.29 7 46.4786 10 27.3773 7 21.7659 9 62.2423 12 65.7283 10 19.35 7 66.3997 9 44.1628 9 91.2753 9 86.3488 9 73.351 10 39.0737 11 55.3057 9 90.0769 11 57.4296 10 21.0794 7 84.5969 10 9.4308 7 55.9558 10 20.9037 7 43.5424 9]
Total: 1404.2905
Mean: 28.08581
Genome size: 75
Size: 76
Percent parens: 0.013
--- Population Statistics ---
Average total errors in population: 4163.515879800003
Median total errors in population: 1404.2905
Error averages by case: (160.89350620000178 9.459 153.0829409000005 8.686 156.67134059999765 10.188 144.41408839999886 7.643 185.76921060000137 10.401 111.04194549999788 7.6 105.45938719999924 9.467 141.4904945 11.807 135.11719500000066 10.151 101.05166200000109 7.722 143.83593549999935 9.347 124.51420980000172 9.304 222.0942315000013 9.529 216.48924370000321 9.487 139.2343832999984 10.252 170.0891734 11.244 133.8504973999986 9.533 166.80575259999773 10.965 197.2574854000014 10.384 103.347528600001 7.289 215.1957017000017 10.432 154.74798280000104 7.782 195.87081749999854 10.202 165.87039019999824 7.86 183.29277550000214 9.294)
Error minima by case: (16.5458 8 6.0028 7 10.4841 9 36.6925 6 37.5687 9 25.3952 6 16.2346 7 20.2423 10 29.7349 9 0.6736 6 3.3706 8 7.1628 7 2.2516 7 4.2982 7 36.3676 8 3.0501 9 24.3057 9 9.9106 9 57.3805 8 4.086 5 8.5663 9 9.4079 6 55.9067 9 20.8546 6 43.4933 8)
Average genome size in population (length): 81.487
Average program size in population (points): 82.487
Average percent parens in population: 0.012
Minimum age in population: 192.5627511908572
Maximum age in population: 197.1538162154429
Average age in population: 195.0128611341159
Median age in population: 195.0754117437397
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 7
Genome diversity (% unique Plush genomes):	 0.889
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 7
Syntactic diversity (% unique Push programs):	 0.889
Total error diversity:				 0.255
Error (vector) diversity:			 0.296
Behavioral diversity:				 0.296
--- Run Statistics ---
Number of program evaluations used so far: 141000
Number of point (instruction) evaluations so far: 311001181
--- Timings ---
Current time: 1529615728988 milliseconds
Total Time:         575.7 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       194.1 seconds, 33.7%
Fitness Testing:    302.4 seconds, 52.5%
Report:              79.1 seconds, 13.7%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 140
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 141
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 141
;;******************************
;; -*- Number IO problem report - generation 141
Test total error for best: 59998.23050000004
Test mean error for best: 29.99912
;;------------------------------
Outputs of best individual on training cases:
Correct output: -57.4559422311 | Program output: -74.023617    
Correct output: -71.0754923621 | Program output: -65.023617    
Correct output: -66.5176295557 | Program output: -77.023617    
Correct output: 149.3187378    | Program output: 86.028727     
Correct output: -36.5450493525 | Program output: -83.023617    
Correct output: 75.4021928097  | Program output: 48.024907     
Correct output: 52.2615929867  | Program output: 74.027527     
Correct output: -19.2178367434 | Program output: 43.024417     
Correct output: 66.7518906772  | Program output: 1.023617      
Correct output: 7.673605441    | Program output: 27.023607     
Correct output: 23.6294031682  | Program output: 90.029107     
Correct output: -6.1389033433  | Program output: 38.023927     
Correct output: 9.2516366816   | Program output: -82.023627    
Correct output: 31.3251776267  | Program output: -55.023627    
Correct output: 73.3746496408  | Program output: 0.023607      
Correct output: 20.0500553336  | Program output: -19.023627    
Correct output: -23.2820697498 | Program output: 32.023627     
Correct output: 120.1004999359 | Program output: 30.023607     
Correct output: -155.453212395 | Program output: -98.023617    
Correct output: 31.10301576    | Program output: 10.023617     
Correct output: 45.5733057121  | Program output: -39.023607    
Correct output: -68.592783645  | Program output: -78.023607    
Correct output: -125.979392023 | Program output: -70.023627    
Correct output: -91.9273649148 | Program output: -71.023617    
Correct output: -92.5660607267 | Program output: -49.023627    
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_inc} {:instruction float_add} {:instruction float_yank} {:instruction float_min} {:instruction float_rot} {:instruction integer_dup} {:instruction float_rot} {:instruction float_cos} {:instruction float_mult} {:instruction float_mult} {:instruction float_min} {:instruction integer_mult} {:instruction float_inc} {:instruction float_rot} {:instruction float_dec} {:instruction float_rot} {:instruction integer_inc} {:instruction float_add} {:instruction float_yank} {:instruction float_div} {:instruction float_min} {:instruction integer_div} {:instruction 27} {:instruction float_sub} {:instruction 9} {:instruction float_yankdup} {:instruction integer_stackdepth} {:instruction float_frominteger} {:instruction tag_float_196} {:instruction float_swap} {:instruction float_rot} {:instruction integer_add} {:instruction integer_stackdepth} {:instruction float_mod} {:instruction in2} {:instruction integer_add} {:instruction integer_max} {:instruction float_yank} {:instruction integer_stackdepth} {:instruction float_flush} {:instruction in2} {:instruction float_frominteger} {:instruction print_float} {:instruction integer_dup} {:instruction float_shove} {:instruction float_shove} {:instruction integer_add} {:instruction float_mod} {:instruction integer_dup} {:instruction integer_dup_items} {:instruction print_integer} {:instruction integer_min} {:instruction integer_yank} {:instruction print_integer} {:instruction integer_yank} {:instruction integer_max} {:instruction integer_max} {:instruction float_mod} {:instruction integer_stackdepth} {:instruction float_add} {:instruction integer_max} {:instruction float_mult} {:instruction integer_yank} {:instruction float_yank} {:instruction integer_max} {:instruction float_sin} {:instruction integer_stackdepth} {:instruction float_add} {:instruction in2} {:instruction float_mod} {:instruction integer_stackdepth} {:instruction integer_mod} {:instruction print_integer} {:instruction float_min} {:instruction integer_stackdepth} {:instruction tag_float_291} {:instruction 6} {:instruction tag_float_291} {:instruction integer_inc} {:instruction float_mod} {:instruction print_integer})
Best program: (integer_inc float_add float_yank float_min float_rot integer_dup float_rot float_cos float_mult float_mult float_min integer_mult float_inc float_rot float_dec float_rot integer_inc float_add float_yank float_div float_min integer_div 27 float_sub 9 float_yankdup integer_stackdepth float_frominteger tag_float_196 float_swap float_rot integer_add integer_stackdepth float_mod in2 integer_add integer_max float_yank integer_stackdepth float_flush in2 float_frominteger print_float integer_dup float_shove float_shove integer_add float_mod integer_dup integer_dup_items print_integer integer_min integer_yank print_integer integer_yank integer_max integer_max float_mod integer_stackdepth float_add integer_max float_mult integer_yank float_yank integer_max float_sin integer_stackdepth float_add in2 float_mod integer_stackdepth integer_mod print_integer float_min integer_stackdepth tag_float_291 6 tag_float_291 integer_inc float_mod print_integer)
Errors: [16.5677 9 6.0519 8 10.506 10 63.29 7 46.4786 10 27.3773 7 21.7659 9 62.2423 12 65.7283 10 19.35 7 66.3997 9 44.1628 9 91.2753 9 86.3488 9 73.351 10 39.0737 11 55.3057 9 90.0769 11 57.4296 10 21.0794 7 84.5969 10 9.4308 7 55.9558 10 20.9037 7 43.5424 9]
Total: 1404.2905
Mean: 28.08581
Genome size: 81
Size: 82
Percent parens: 0.012
--- Population Statistics ---
Average total errors in population: 4188.112061300004
Median total errors in population: 1404.2905
Error averages by case: (159.8441209000016 9.417 153.1262709000004 8.678 154.96378639999787 10.226 144.29369659999895 7.644 184.7789602000012 10.399 110.9868080999978 7.561 108.15592449999923 9.455 144.3855316000003 11.799 135.1593515000008 10.169 105.24866430000121 7.711 148.16180989999978 9.37 127.91711430000169 9.272 222.35119800000095 9.5 217.8606866000032 9.503 141.85723619999848 10.22 169.92313969999947 11.244 137.85132529999873 9.52 167.62147559999786 10.955 197.4930316000015 10.366 104.60125990000101 7.295 215.55222030000172 10.463 153.82007880000103 7.776 195.7593163999986 10.179 165.66600319999844 7.814 184.90205050000213 9.295)
Error minima by case: (16.5441 7 5.9943 7 10.4824 8 36.7101 6 36.562 8 26.3301 5 16.2346 8 19.2348 7 1.0 5 0.6736 6 3.3706 8 6.1659 7 2.2516 7 4.3252 7 0.0 4 3.0501 8 23.3091 7 9.9231 7 57.372 8 4.103 5 8.5733 8 9.4072 6 55.8981 8 20.8462 6 43.4848 7)
Average genome size in population (length): 81.552
Average program size in population (points): 82.552
Average percent parens in population: 0.012
Minimum age in population: 193.5627511908572
Maximum age in population: 198.4790257614829
Average age in population: 196.3858058837588
Median age in population: 196.3975520473614
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 6
Genome diversity (% unique Plush genomes):	 0.891
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 6
Syntactic diversity (% unique Push programs):	 0.891
Total error diversity:				 0.245
Error (vector) diversity:			 0.301
Behavioral diversity:				 0.301
--- Run Statistics ---
Number of program evaluations used so far: 142000
Number of point (instruction) evaluations so far: 313041706
--- Timings ---
Current time: 1529615732737 milliseconds
Total Time:         579.4 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       195.4 seconds, 33.7%
Fitness Testing:    304.4 seconds, 52.5%
Report:              79.6 seconds, 13.7%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 141
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 142
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 142
;;******************************
;; -*- Number IO problem report - generation 142
Test total error for best: 59998.23050000004
Test mean error for best: 29.99912
;;------------------------------
Outputs of best individual on training cases:
Correct output: -57.4559422311 | Program output: -74.023617    
Correct output: -71.0754923621 | Program output: -65.023617    
Correct output: -66.5176295557 | Program output: -77.023617    
Correct output: 149.3187378    | Program output: 86.028727     
Correct output: -36.5450493525 | Program output: -83.023617    
Correct output: 75.4021928097  | Program output: 48.024907     
Correct output: 52.2615929867  | Program output: 74.027527     
Correct output: -19.2178367434 | Program output: 43.024417     
Correct output: 66.7518906772  | Program output: 1.023617      
Correct output: 7.673605441    | Program output: 27.023607     
Correct output: 23.6294031682  | Program output: 90.029107     
Correct output: -6.1389033433  | Program output: 38.023927     
Correct output: 9.2516366816   | Program output: -82.023627    
Correct output: 31.3251776267  | Program output: -55.023627    
Correct output: 73.3746496408  | Program output: 0.023607      
Correct output: 20.0500553336  | Program output: -19.023627    
Correct output: -23.2820697498 | Program output: 32.023627     
Correct output: 120.1004999359 | Program output: 30.023607     
Correct output: -155.453212395 | Program output: -98.023617    
Correct output: 31.10301576    | Program output: 10.023617     
Correct output: 45.5733057121  | Program output: -39.023607    
Correct output: -68.592783645  | Program output: -78.023607    
Correct output: -125.979392023 | Program output: -70.023627    
Correct output: -91.9273649148 | Program output: -71.023617    
Correct output: -92.5660607267 | Program output: -49.023627    
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_yankdup} {:instruction float_max} {:instruction integer_inc} {:instruction float_add} {:instruction float_yank} {:instruction float_min} {:instruction float_add} {:instruction integer_dup_times} {:instruction print_float} {:instruction float_dup} {:instruction integer_add} {:instruction float_rot} {:instruction float_min} {:instruction float_sin} {:instruction integer_div} {:instruction 27} {:instruction integer_dup_times} {:instruction float_yankdup} {:instruction integer_sub} {:instruction 9} {:instruction float_yankdup} {:instruction integer_stackdepth} {:instruction float_frominteger} {:instruction float_rot} {:instruction integer_add} {:instruction integer_stackdepth} {:instruction float_mod} {:instruction in2} {:instruction integer_add} {:instruction integer_max} {:instruction float_dec} {:instruction integer_stackdepth} {:instruction float_flush} {:instruction in2} {:instruction float_frominteger} {:instruction print_float} {:instruction integer_dup} {:instruction float_shove} {:instruction float_shove} {:instruction integer_add} {:instruction float_mod} {:instruction integer_dup} {:instruction integer_dup_items} {:instruction print_integer} {:instruction integer_min} {:instruction integer_yank} {:instruction print_integer} {:instruction integer_shove} {:instruction float_min} {:instruction in1} {:instruction integer_yank} {:instruction float_swap} {:instruction integer_inc} {:instruction in2} {:instruction float_mult} {:instruction integer_yank} {:instruction integer_max} {:instruction float_swap} {:instruction integer_stackdepth} {:instruction float_add} {:instruction in2} {:instruction float_mult} {:instruction integer_stackdepth} {:instruction float_frominteger} {:instruction integer_fromfloat} {:instruction integer_mod} {:instruction print_integer} {:instruction float_min} {:instruction integer_stackdepth} {:instruction tag_float_291} {:instruction 6} {:instruction tag_float_291} {:instruction integer_inc} {:instruction integer_dec} {:instruction 6} {:instruction tag_float_291} {:instruction integer_inc} {:instruction float_swap} {:instruction print_integer})
Best program: (integer_yankdup float_max integer_inc float_add float_yank float_min float_add integer_dup_times print_float float_dup integer_add float_rot float_min float_sin integer_div 27 integer_dup_times float_yankdup integer_sub 9 float_yankdup integer_stackdepth float_frominteger float_rot integer_add integer_stackdepth float_mod in2 integer_add integer_max float_dec integer_stackdepth float_flush in2 float_frominteger print_float integer_dup float_shove float_shove integer_add float_mod integer_dup integer_dup_items print_integer integer_min integer_yank print_integer integer_shove float_min in1 integer_yank float_swap integer_inc in2 float_mult integer_yank integer_max float_swap integer_stackdepth float_add in2 float_mult integer_stackdepth float_frominteger integer_fromfloat integer_mod print_integer float_min integer_stackdepth tag_float_291 6 tag_float_291 integer_inc integer_dec 6 tag_float_291 integer_inc float_swap print_integer)
Errors: [16.5677 9 6.0519 8 10.506 10 63.29 7 46.4786 10 27.3773 7 21.7659 9 62.2423 12 65.7283 10 19.35 7 66.3997 9 44.1628 9 91.2753 9 86.3488 9 73.351 10 39.0737 11 55.3057 9 90.0769 11 57.4296 10 21.0794 7 84.5969 10 9.4308 7 55.9558 10 20.9037 7 43.5424 9]
Total: 1404.2905
Mean: 28.08581
Genome size: 79
Size: 80
Percent parens: 0.013
--- Population Statistics ---
Average total errors in population: 4254.455435300003
Median total errors in population: 1404.7904000000003
Error averages by case: (156.26066700000118 9.49 147.64280150000042 8.687 151.3208475999983 10.239 154.04381049999944 7.698 182.03364330000113 10.407 121.27435759999798 7.648 116.95591509999923 9.519 152.00810340000038 11.804 152.43166109999984 10.181 114.50735760000121 7.729 154.62705699999998 9.399 135.74924350000117 9.313 218.15958720000106 9.544 213.98981810000302 9.518 157.6937514999985 10.247 162.63847239999964 11.248 145.89220279999867 9.556 178.4697372999974 10.971 192.32720170000158 10.41 115.03610730000091 7.339 213.6347160000015 10.473 150.410610900001 7.784 190.6152342999987 10.234 160.4824948999987 7.866 179.60503570000188 9.341)
Error minima by case: (15.6168 8 3.0519 7 9.5551 8 36.7096 6 36.5812 8 25.3952 6 5.2616 8 19.254 8 19.7519 8 0.6736 6 3.3706 8 6.1752 7 0.2234 7 4.3252 7 26.3746 8 3.0501 9 23.3183 9 9.9223 9 54.4296 9 4.103 5 0.5663 8 8.4799 6 52.9558 9 17.9037 6 40.5424 8)
Average genome size in population (length): 81.087
Average program size in population (points): 82.087
Average percent parens in population: 0.012
Minimum age in population: 194.5627511908572
Maximum age in population: 199.8070099315341
Average age in population: 197.7629016846358
Median age in population: 197.822268577107
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 6
Genome diversity (% unique Plush genomes):	 0.897
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 6
Syntactic diversity (% unique Push programs):	 0.897
Total error diversity:				 0.25
Error (vector) diversity:			 0.304
Behavioral diversity:				 0.305
--- Run Statistics ---
Number of program evaluations used so far: 143000
Number of point (instruction) evaluations so far: 315070581
--- Timings ---
Current time: 1529615736789 milliseconds
Total Time:         583.3 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       196.8 seconds, 33.7%
Fitness Testing:    306.4 seconds, 52.5%
Report:              80.0 seconds, 13.7%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 142
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 143
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 143
;;******************************
;; -*- Number IO problem report - generation 143
Test total error for best: 59998.23050000004
Test mean error for best: 29.99912
;;------------------------------
Outputs of best individual on training cases:
Correct output: -57.4559422311 | Program output: -74.023617    
Correct output: -71.0754923621 | Program output: -65.023617    
Correct output: -66.5176295557 | Program output: -77.023617    
Correct output: 149.3187378    | Program output: 86.028727     
Correct output: -36.5450493525 | Program output: -83.023617    
Correct output: 75.4021928097  | Program output: 48.024907     
Correct output: 52.2615929867  | Program output: 74.027527     
Correct output: -19.2178367434 | Program output: 43.024417     
Correct output: 66.7518906772  | Program output: 1.023617      
Correct output: 7.673605441    | Program output: 27.023607     
Correct output: 23.6294031682  | Program output: 90.029107     
Correct output: -6.1389033433  | Program output: 38.023927     
Correct output: 9.2516366816   | Program output: -82.023627    
Correct output: 31.3251776267  | Program output: -55.023627    
Correct output: 73.3746496408  | Program output: 0.023607      
Correct output: 20.0500553336  | Program output: -19.023627    
Correct output: -23.2820697498 | Program output: 32.023627     
Correct output: 120.1004999359 | Program output: 30.023607     
Correct output: -155.453212395 | Program output: -98.023617    
Correct output: 31.10301576    | Program output: 10.023617     
Correct output: 45.5733057121  | Program output: -39.023607    
Correct output: -68.592783645  | Program output: -78.023607    
Correct output: -125.979392023 | Program output: -70.023627    
Correct output: -91.9273649148 | Program output: -71.023617    
Correct output: -92.5660607267 | Program output: -49.023627    
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_dup_times} {:instruction integer_dup} {:instruction float_min} {:instruction float_sub} {:instruction integer_div} {:instruction 27} {:instruction float_sub} {:instruction float_mult} {:instruction float_mult} {:instruction integer_rot} {:instruction integer_sub} {:instruction float_sub} {:instruction integer_dup_items} {:instruction print_float} {:instruction integer_div} {:instruction 27} {:instruction float_sub} {:instruction float_yankdup} {:instruction integer_sub} {:instruction float_yankdup} {:instruction integer_mod} {:instruction 9} {:instruction integer_rot} {:instruction integer_add} {:instruction integer_stackdepth} {:instruction float_add} {:instruction float_add} {:instruction in2} {:instruction integer_add} {:instruction integer_max} {:instruction float_max} {:instruction integer_stackdepth} {:instruction float_flush} {:instruction in2} {:instruction float_frominteger} {:instruction print_float} {:instruction integer_dup} {:instruction integer_fromfloat} {:instruction float_shove} {:instruction integer_add} {:instruction integer_rot} {:instruction print_integer} {:instruction integer_shove} {:instruction integer_yank} {:instruction float_dec} {:instruction print_integer} {:instruction integer_max} {:instruction integer_max} {:instruction float_mult} {:instruction integer_add} {:instruction float_frominteger} {:instruction in2} {:instruction tagged_175} {:instruction integer_yank} {:instruction float_yank} {:instruction integer_dup_times} {:instruction integer_stackdepth} {:instruction float_add} {:instruction in2} {:instruction float_mult} {:instruction integer_stackdepth} {:instruction float_frominteger} {:instruction integer_fromfloat} {:instruction integer_mod} {:instruction print_integer} {:instruction float_min} {:instruction float_mult} {:instruction tag_float_291} {:instruction 6} {:instruction tag_float_255} {:instruction integer_inc} {:instruction float_swap} {:instruction print_integer})
Best program: (float_dup_times integer_dup float_min float_sub integer_div 27 float_sub float_mult float_mult integer_rot integer_sub float_sub integer_dup_items print_float integer_div 27 float_sub float_yankdup integer_sub float_yankdup integer_mod 9 integer_rot integer_add integer_stackdepth float_add float_add in2 integer_add integer_max float_max integer_stackdepth float_flush in2 float_frominteger print_float integer_dup integer_fromfloat float_shove integer_add integer_rot print_integer integer_shove integer_yank float_dec print_integer integer_max integer_max float_mult integer_add float_frominteger in2 tagged_175 integer_yank float_yank integer_dup_times integer_stackdepth float_add in2 float_mult integer_stackdepth float_frominteger integer_fromfloat integer_mod print_integer float_min float_mult tag_float_291 6 tag_float_255 integer_inc float_swap print_integer)
Errors: [16.5677 9 6.0519 8 10.506 10 63.29 7 46.4786 10 27.3773 7 21.7659 9 62.2423 12 65.7283 10 19.35 7 66.3997 9 44.1628 9 91.2753 9 86.3488 9 73.351 10 39.0737 11 55.3057 9 90.0769 11 57.4296 10 21.0794 7 84.5969 10 9.4308 7 55.9558 10 20.9037 7 43.5424 9]
Total: 1404.2905
Mean: 28.08581
Genome size: 73
Size: 74
Percent parens: 0.014
--- Population Statistics ---
Average total errors in population: 4230.487250800004
Median total errors in population: 1406.2717000000002
Error averages by case: (162.88727850000114 9.483 154.5523466000004 8.71 158.05846919999829 10.206 147.7370810999991 7.642 187.4322951000012 10.38 114.41517359999821 7.583 109.91531419999924 9.484 145.67329549999997 11.792 135.99544250000093 10.177 105.61617580000076 7.727 150.0054135999997 9.378 129.18342860000135 9.272 223.83425090000114 9.512 219.7118066000028 9.521 138.1412540999988 10.238 171.58449400000006 11.272 138.41641849999874 9.549 169.20245859999812 10.976 199.05550900000154 10.429 106.63707510000079 7.307 218.29893260000165 10.481 157.12157250000087 7.791 197.23327549999888 10.223 167.32485169999882 7.823 186.15263740000182 9.345)
Error minima by case: (15.6162 8 5.9837 7 9.5545 8 22.3187 6 28.5214 8 25.3952 6 5.2616 8 11.1934 9 24.2708 7 0.6736 6 3.3706 8 1.885 7 0.2234 7 4.3252 7 16.6481 6 3.0501 9 15.2584 9 9.9231 7 57.3614 9 4.103 5 8.5663 9 8.4792 7 55.8876 8 20.8355 7 43.4742 8)
Average genome size in population (length): 81.661
Average program size in population (points): 82.661
Average percent parens in population: 0.012
Minimum age in population: 196.1470269373913
Maximum age in population: 201.313705199569
Average age in population: 199.1642621315913
Median age in population: 199.2300138868884
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 4
Genome diversity (% unique Plush genomes):	 0.893
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 4
Syntactic diversity (% unique Push programs):	 0.893
Total error diversity:				 0.265
Error (vector) diversity:			 0.315
Behavioral diversity:				 0.315
--- Run Statistics ---
Number of program evaluations used so far: 144000
Number of point (instruction) evaluations so far: 317113831
--- Timings ---
Current time: 1529615740483 milliseconds
Total Time:         587.2 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       198.0 seconds, 33.7%
Fitness Testing:    308.3 seconds, 52.5%
Report:              80.6 seconds, 13.7%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 143
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 144
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 144
;;******************************
;; -*- Number IO problem report - generation 144
Test total error for best: 59998.23050000004
Test mean error for best: 29.99912
;;------------------------------
Outputs of best individual on training cases:
Correct output: -57.4559422311 | Program output: -74.023617    
Correct output: -71.0754923621 | Program output: -65.023617    
Correct output: -66.5176295557 | Program output: -77.023617    
Correct output: 149.3187378    | Program output: 86.028727     
Correct output: -36.5450493525 | Program output: -83.023617    
Correct output: 75.4021928097  | Program output: 48.024907     
Correct output: 52.2615929867  | Program output: 74.027527     
Correct output: -19.2178367434 | Program output: 43.024417     
Correct output: 66.7518906772  | Program output: 1.023617      
Correct output: 7.673605441    | Program output: 27.023607     
Correct output: 23.6294031682  | Program output: 90.029107     
Correct output: -6.1389033433  | Program output: 38.023927     
Correct output: 9.2516366816   | Program output: -82.023627    
Correct output: 31.3251776267  | Program output: -55.023627    
Correct output: 73.3746496408  | Program output: 0.023607      
Correct output: 20.0500553336  | Program output: -19.023627    
Correct output: -23.2820697498 | Program output: 32.023627     
Correct output: 120.1004999359 | Program output: 30.023607     
Correct output: -155.453212395 | Program output: -98.023617    
Correct output: 31.10301576    | Program output: 10.023617     
Correct output: 45.5733057121  | Program output: -39.023607    
Correct output: -68.592783645  | Program output: -78.023607    
Correct output: -125.979392023 | Program output: -70.023627    
Correct output: -91.9273649148 | Program output: -71.023617    
Correct output: -92.5660607267 | Program output: -49.023627    
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_yank} {:instruction float_rot} {:instruction float_dup_times} {:instruction float_rot} {:instruction float_dup} {:instruction integer_yank} {:instruction print_float} {:instruction integer_div} {:instruction 27} {:instruction integer_dup_times} {:instruction float_yankdup} {:instruction integer_sub} {:instruction float_sub} {:instruction float_mult} {:instruction integer_sub} {:instruction 9} {:instruction float_yankdup} {:instruction integer_stackdepth} {:instruction float_frominteger} {:instruction float_dec} {:instruction float_swap} {:instruction float_rot} {:instruction integer_add} {:instruction integer_stackdepth} {:instruction float_add} {:instruction in2} {:instruction tag_float_196} {:instruction float_swap} {:instruction float_rot} {:instruction integer_add} {:instruction integer_max} {:instruction float_max} {:instruction integer_stackdepth} {:instruction float_flush} {:instruction in2} {:instruction float_frominteger} {:instruction print_float} {:instruction integer_dup} {:instruction float_shove} {:instruction float_shove} {:instruction integer_inc} {:instruction print_integer} {:instruction integer_shove} {:instruction integer_yank} {:instruction print_integer} {:instruction integer_add} {:instruction integer_yank} {:instruction print_integer} {:instruction integer_add} {:instruction print_integer} {:instruction print_integer} {:instruction float_mod} {:instruction integer_dup} {:instruction integer_pop} {:instruction float_pop} {:instruction integer_yank} {:instruction float_dup} {:instruction print_integer} {:instruction integer_fromfloat} {:instruction float_dec} {:instruction integer_max} {:instruction integer_fromfloat} {:instruction integer_stackdepth} {:instruction integer_sub} {:instruction integer_fromfloat} {:instruction integer_stackdepth} {:instruction integer_swap} {:instruction in2} {:instruction float_mult} {:instruction float_mult} {:instruction integer_stackdepth} {:instruction float_frominteger} {:instruction integer_fromfloat} {:instruction integer_mod} {:instruction print_integer} {:instruction float_min} {:instruction integer_stackdepth} {:instruction tag_float_291} {:instruction 6} {:instruction float_shove} {:instruction float_dec} {:instruction 6} {:instruction tag_float_291} {:instruction integer_inc} {:instruction float_swap} {:instruction print_integer})
Best program: (float_yank float_rot float_dup_times float_rot float_dup integer_yank print_float integer_div 27 integer_dup_times float_yankdup integer_sub float_sub float_mult integer_sub 9 float_yankdup integer_stackdepth float_frominteger float_dec float_swap float_rot integer_add integer_stackdepth float_add in2 tag_float_196 float_swap float_rot integer_add integer_max float_max integer_stackdepth float_flush in2 float_frominteger print_float integer_dup float_shove float_shove integer_inc print_integer integer_shove integer_yank print_integer integer_add integer_yank print_integer integer_add print_integer print_integer float_mod integer_dup integer_pop float_pop integer_yank float_dup print_integer integer_fromfloat float_dec integer_max integer_fromfloat integer_stackdepth integer_sub integer_fromfloat integer_stackdepth integer_swap in2 float_mult float_mult integer_stackdepth float_frominteger integer_fromfloat integer_mod print_integer float_min integer_stackdepth tag_float_291 6 float_shove float_dec 6 tag_float_291 integer_inc float_swap print_integer)
Errors: [16.5677 9 6.0519 8 10.506 10 63.29 7 46.4786 10 27.3773 7 21.7659 9 62.2423 12 65.7283 10 19.35 7 66.3997 9 44.1628 9 91.2753 9 86.3488 9 73.351 10 39.0737 11 55.3057 9 90.0769 11 57.4296 10 21.0794 7 84.5969 10 9.4308 7 55.9558 10 20.9037 7 43.5424 9]
Total: 1404.2905
Mean: 28.08581
Genome size: 86
Size: 87
Percent parens: 0.011
--- Population Statistics ---
Average total errors in population: 4022.826623200003
Median total errors in population: 1404.2905
Error averages by case: (154.55563620000163 9.442 146.94863270000033 8.682 149.688803599998 10.196 137.79532939999854 7.635 179.41412470000105 10.392 104.49971599999834 7.592 100.1650527999993 9.455 136.10288529999946 11.773 133.86475430000075 10.164 95.82683710000093 7.719 140.41049859999913 9.379 120.46626260000117 9.29 216.51759500000142 9.503 212.29910540000304 9.506 138.00663979999865 10.245 155.10684239999966 11.227 128.91536989999878 9.529 159.7207682999981 10.966 191.72744510000152 10.378 96.32064160000091 7.291 211.03044030000146 10.459 148.69967440000093 7.763 189.97598699999872 10.208 159.8691662999987 7.834 178.98241440000203 9.288)
Error minima by case: (16.5458 8 5.9843 7 10.4841 9 36.71 6 36.5687 9 26.3952 6 5.2616 8 19.2423 9 24.2717 9 0.6736 6 3.3706 8 6.1628 7 8.1794 7 4.3252 7 16.649 8 3.0501 9 23.3057 9 9.9231 9 57.362 9 4.103 5 7.5733 8 9.4079 6 55.8881 8 20.8362 6 43.4748 7)
Average genome size in population (length): 81.442
Average program size in population (points): 82.442
Average percent parens in population: 0.012
Minimum age in population: 197.5716297060958
Maximum age in population: 202.6838079751686
Average age in population: 200.5363141915119
Median age in population: 200.5881132532611
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 5
Genome diversity (% unique Plush genomes):	 0.882
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 5
Syntactic diversity (% unique Push programs):	 0.882
Total error diversity:				 0.246
Error (vector) diversity:			 0.293
Behavioral diversity:				 0.294
--- Run Statistics ---
Number of program evaluations used so far: 145000
Number of point (instruction) evaluations so far: 319151081
--- Timings ---
Current time: 1529615744461 milliseconds
Total Time:         591.1 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       199.4 seconds, 33.7%
Fitness Testing:    310.5 seconds, 52.5%
Report:              81.1 seconds, 13.7%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 144
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 145
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 145
;;******************************
;; -*- Number IO problem report - generation 145
Test total error for best: 59998.23050000004
Test mean error for best: 29.99912
;;------------------------------
Outputs of best individual on training cases:
Correct output: -57.4559422311 | Program output: -74.023617    
Correct output: -71.0754923621 | Program output: -65.023617    
Correct output: -66.5176295557 | Program output: -77.023617    
Correct output: 149.3187378    | Program output: 86.028727     
Correct output: -36.5450493525 | Program output: -83.023617    
Correct output: 75.4021928097  | Program output: 48.024907     
Correct output: 52.2615929867  | Program output: 74.027527     
Correct output: -19.2178367434 | Program output: 43.024417     
Correct output: 66.7518906772  | Program output: 1.023617      
Correct output: 7.673605441    | Program output: 27.023607     
Correct output: 23.6294031682  | Program output: 90.029107     
Correct output: -6.1389033433  | Program output: 38.023927     
Correct output: 9.2516366816   | Program output: -82.023627    
Correct output: 31.3251776267  | Program output: -55.023627    
Correct output: 73.3746496408  | Program output: 0.023607      
Correct output: 20.0500553336  | Program output: -19.023627    
Correct output: -23.2820697498 | Program output: 32.023627     
Correct output: 120.1004999359 | Program output: 30.023607     
Correct output: -155.453212395 | Program output: -98.023617    
Correct output: 31.10301576    | Program output: 10.023617     
Correct output: 45.5733057121  | Program output: -39.023607    
Correct output: -68.592783645  | Program output: -78.023607    
Correct output: -125.979392023 | Program output: -70.023627    
Correct output: -91.9273649148 | Program output: -71.023617    
Correct output: -92.5660607267 | Program output: -49.023627    
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction print_float} {:instruction print_integer} {:instruction float_min} {:instruction 27} {:instruction float_sub} {:instruction float_mult} {:instruction float_mult} {:instruction integer_rot} {:instruction integer_sub} {:instruction float_sub} {:instruction integer_dup_items} {:instruction print_float} {:instruction integer_div} {:instruction 27} {:instruction float_sub} {:instruction float_yankdup} {:instruction integer_sub} {:instruction float_yankdup} {:instruction integer_mod} {:instruction 9} {:instruction integer_rot} {:instruction integer_add} {:instruction integer_stackdepth} {:instruction float_add} {:instruction float_add} {:instruction in2} {:instruction integer_add} {:instruction integer_max} {:instruction float_max} {:instruction integer_stackdepth} {:instruction float_flush} {:instruction in2} {:instruction float_frominteger} {:instruction print_float} {:instruction integer_dup} {:instruction integer_fromfloat} {:instruction float_shove} {:instruction integer_add} {:instruction integer_rot} {:instruction print_integer} {:instruction integer_shove} {:instruction integer_yank} {:instruction float_dec} {:instruction print_integer} {:instruction integer_max} {:instruction integer_max} {:instruction float_mult} {:instruction integer_add} {:instruction integer_max} {:instruction integer_max} {:instruction integer_fromfloat} {:instruction integer_stackdepth} {:instruction float_add} {:instruction integer_max} {:instruction float_mult} {:instruction integer_yank} {:instruction float_cos} {:instruction integer_max} {:instruction float_sin} {:instruction integer_stackdepth} {:instruction float_add} {:instruction in2} {:instruction float_mod} {:instruction integer_stackdepth} {:instruction integer_mod} {:instruction print_integer} {:instruction float_min} {:instruction integer_dup_times} {:instruction tag_float_291} {:instruction 6} {:instruction tag_float_208} {:instruction integer_inc} {:instruction float_swap} {:instruction print_integer})
Best program: (print_float print_integer float_min 27 float_sub float_mult float_mult integer_rot integer_sub float_sub integer_dup_items print_float integer_div 27 float_sub float_yankdup integer_sub float_yankdup integer_mod 9 integer_rot integer_add integer_stackdepth float_add float_add in2 integer_add integer_max float_max integer_stackdepth float_flush in2 float_frominteger print_float integer_dup integer_fromfloat float_shove integer_add integer_rot print_integer integer_shove integer_yank float_dec print_integer integer_max integer_max float_mult integer_add integer_max integer_max integer_fromfloat integer_stackdepth float_add integer_max float_mult integer_yank float_cos integer_max float_sin integer_stackdepth float_add in2 float_mod integer_stackdepth integer_mod print_integer float_min integer_dup_times tag_float_291 6 tag_float_208 integer_inc float_swap print_integer)
Errors: [16.5677 9 6.0519 8 10.506 10 63.29 7 46.4786 10 27.3773 7 21.7659 9 62.2423 12 65.7283 10 19.35 7 66.3997 9 44.1628 9 91.2753 9 86.3488 9 73.351 10 39.0737 11 55.3057 9 90.0769 11 57.4296 10 21.0794 7 84.5969 10 9.4308 7 55.9558 10 20.9037 7 43.5424 9]
Total: 1404.2905
Mean: 28.08581
Genome size: 74
Size: 75
Percent parens: 0.013
--- Population Statistics ---
Average total errors in population: 3903.797381700002
Median total errors in population: 1404.2905
Error averages by case: (146.48407470000024 9.41 138.7972551000011 8.639 141.50380509999837 10.221 136.3659745999983 7.588 171.51098160000123 10.368 101.04946199999819 7.557 98.51439869999916 9.44 135.10745289999926 11.82 126.47405870000115 10.152 94.85734510000083 7.689 136.86046969999893 9.363 118.59315010000132 9.287 208.88476770000088 9.476 204.63112380000288 9.466 129.78961059999864 10.213 156.73034749999883 11.212 129.9103969999987 9.513 159.40801779999816 10.971 184.96274910000153 10.357 97.41376780000076 7.299 202.79691690000152 10.434 140.5492331000009 7.747 183.23288619999875 10.201 151.80269099999873 7.79 172.07144490000192 9.282)
Error minima by case: (16.5458 7 6.0031 7 10.4841 9 36.71 6 37.5822 9 16.4022 6 21.7411 8 20.263 9 30.7145 7 0.6736 6 16.6294 8 7.1792 6 2.2516 7 4.3052 7 33.6254 6 5.9499 8 24.3193 9 9.9231 8 57.3809 9 4.086 5 9.5359 9 9.4079 6 55.9071 9 20.8552 6 43.4937 8)
Average genome size in population (length): 81.436
Average program size in population (points): 82.436
Average percent parens in population: 0.012
Minimum age in population: 199.1390441047624
Maximum age in population: 203.7424703278422
Average age in population: 201.9706381751606
Median age in population: 202.0505775625889
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 4
Genome diversity (% unique Plush genomes):	 0.886
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 4
Syntactic diversity (% unique Push programs):	 0.886
Total error diversity:				 0.244
Error (vector) diversity:			 0.28
Behavioral diversity:				 0.28
--- Run Statistics ---
Number of program evaluations used so far: 146000
Number of point (instruction) evaluations so far: 321187881
--- Timings ---
Current time: 1529615748210 milliseconds
Total Time:         594.9 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       200.7 seconds, 33.7%
Fitness Testing:    312.5 seconds, 52.5%
Report:              81.6 seconds, 13.7%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 145
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 146
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 146
;;******************************
;; -*- Number IO problem report - generation 146
Test total error for best: 59998.23050000004
Test mean error for best: 29.99912
;;------------------------------
Outputs of best individual on training cases:
Correct output: -57.4559422311 | Program output: -74.023617    
Correct output: -71.0754923621 | Program output: -65.023617    
Correct output: -66.5176295557 | Program output: -77.023617    
Correct output: 149.3187378    | Program output: 86.028727     
Correct output: -36.5450493525 | Program output: -83.023617    
Correct output: 75.4021928097  | Program output: 48.024907     
Correct output: 52.2615929867  | Program output: 74.027527     
Correct output: -19.2178367434 | Program output: 43.024417     
Correct output: 66.7518906772  | Program output: 1.023617      
Correct output: 7.673605441    | Program output: 27.023607     
Correct output: 23.6294031682  | Program output: 90.029107     
Correct output: -6.1389033433  | Program output: 38.023927     
Correct output: 9.2516366816   | Program output: -82.023627    
Correct output: 31.3251776267  | Program output: -55.023627    
Correct output: 73.3746496408  | Program output: 0.023607      
Correct output: 20.0500553336  | Program output: -19.023627    
Correct output: -23.2820697498 | Program output: 32.023627     
Correct output: 120.1004999359 | Program output: 30.023607     
Correct output: -155.453212395 | Program output: -98.023617    
Correct output: 31.10301576    | Program output: 10.023617     
Correct output: 45.5733057121  | Program output: -39.023607    
Correct output: -68.592783645  | Program output: -78.023607    
Correct output: -125.979392023 | Program output: -70.023627    
Correct output: -91.9273649148 | Program output: -71.023617    
Correct output: -92.5660607267 | Program output: -49.023627    
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_yank} {:instruction integer_inc} {:instruction float_min} {:instruction float_dup_times} {:instruction float_sub} {:instruction float_min} {:instruction float_div} {:instruction float_sub} {:instruction float_yankdup} {:instruction float_min} {:instruction print_float} {:instruction float_min} {:instruction print_float} {:instruction integer_shove} {:instruction float_inc} {:instruction float_rot} {:instruction integer_dup} {:instruction float_rot} {:instruction integer_inc} {:instruction float_add} {:instruction float_yank} {:instruction float_div} {:instruction float_min} {:instruction integer_div} {:instruction 27} {:instruction float_sub} {:instruction integer_shove} {:instruction integer_sub} {:instruction 9} {:instruction print_float} {:instruction integer_add} {:instruction integer_stackdepth} {:instruction float_mod} {:instruction in2} {:instruction integer_add} {:instruction integer_max} {:instruction float_yank} {:instruction integer_stackdepth} {:instruction float_flush} {:instruction in2} {:instruction float_frominteger} {:instruction print_float} {:instruction integer_dup} {:instruction float_shove} {:instruction float_shove} {:instruction integer_add} {:instruction float_inc} {:instruction integer_dup} {:instruction integer_dup_items} {:instruction print_integer} {:instruction tag_integer_480} {:instruction integer_yank} {:instruction print_integer} {:instruction integer_yank} {:instruction integer_max} {:instruction integer_stackdepth} {:instruction integer_stackdepth} {:instruction integer_yank} {:instruction integer_max} {:instruction integer_stackdepth} {:instruction float_add} {:instruction integer_max} {:instruction float_mult} {:instruction integer_yank} {:instruction float_cos} {:instruction integer_max} {:instruction float_sin} {:instruction integer_stackdepth} {:instruction float_add} {:instruction in2} {:instruction float_mod} {:instruction integer_stackdepth} {:instruction integer_mod} {:instruction print_integer} {:instruction float_min} {:instruction integer_stackdepth} {:instruction tag_float_291} {:instruction 6} {:instruction tag_float_208} {:instruction integer_inc} {:instruction float_swap} {:instruction print_integer})
Best program: (float_yank integer_inc float_min float_dup_times float_sub float_min float_div float_sub float_yankdup float_min print_float float_min print_float integer_shove float_inc float_rot integer_dup float_rot integer_inc float_add float_yank float_div float_min integer_div 27 float_sub integer_shove integer_sub 9 print_float integer_add integer_stackdepth float_mod in2 integer_add integer_max float_yank integer_stackdepth float_flush in2 float_frominteger print_float integer_dup float_shove float_shove integer_add float_inc integer_dup integer_dup_items print_integer tag_integer_480 integer_yank print_integer integer_yank integer_max integer_stackdepth integer_stackdepth integer_yank integer_max integer_stackdepth float_add integer_max float_mult integer_yank float_cos integer_max float_sin integer_stackdepth float_add in2 float_mod integer_stackdepth integer_mod print_integer float_min integer_stackdepth tag_float_291 6 tag_float_208 integer_inc float_swap print_integer)
Errors: [16.5677 9 6.0519 8 10.506 10 63.29 7 46.4786 10 27.3773 7 21.7659 9 62.2423 12 65.7283 10 19.35 7 66.3997 9 44.1628 9 91.2753 9 86.3488 9 73.351 10 39.0737 11 55.3057 9 90.0769 11 57.4296 10 21.0794 7 84.5969 10 9.4308 7 55.9558 10 20.9037 7 43.5424 9]
Total: 1404.2905
Mean: 28.08581
Genome size: 82
Size: 83
Percent parens: 0.012
--- Population Statistics ---
Average total errors in population: 4078.2024268000027
Median total errors in population: 1404.2905
Error averages by case: (157.74792550000126 9.456 149.23474670000093 8.649 152.87371399999807 10.215 140.91835559999862 7.63 182.32336030000113 10.381 105.69078599999854 7.573 102.41520829999922 9.444 138.89094819999949 11.826 132.7489661000011 10.166 96.75555260000051 7.683 140.5150879999991 9.357 122.566999800001 9.282 219.07103980000082 9.467 214.74304300000307 9.478 135.11632859999855 10.201 161.79564959999956 11.232 131.93918159999873 9.522 162.0093606999983 10.973 193.99133250000153 10.394 100.32505970000075 7.307 213.38553040000153 10.437 151.82923430000085 7.742 192.3023324999989 10.207 162.09462659999855 7.771 181.20205640000188 9.323)
Error minima by case: (15.5611 8 6.0008 7 9.4994 9 22.3187 6 37.562 9 25.4022 6 21.7411 8 20.2348 7 1.0 6 0.6736 6 16.6294 8 7.1628 7 2.2516 6 4.3252 7 0.0 5 6.9499 7 24.3057 7 13.1005 7 57.3785 7 4.904 5 8.5733 7 8.4142 6 55.8924 7 20.8504 6 43.4913 7)
Average genome size in population (length): 81.395
Average program size in population (points): 82.395
Average percent parens in population: 0.012
Minimum age in population: 200.1390441047624
Maximum age in population: 205.1702043846659
Average age in population: 203.3612538779352
Median age in population: 203.3780234344745
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 5
Genome diversity (% unique Plush genomes):	 0.891
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 5
Syntactic diversity (% unique Push programs):	 0.891
Total error diversity:				 0.241
Error (vector) diversity:			 0.28
Behavioral diversity:				 0.28
--- Run Statistics ---
Number of program evaluations used so far: 147000
Number of point (instruction) evaluations so far: 323223456
--- Timings ---
Current time: 1529615752129 milliseconds
Total Time:         598.8 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       202.1 seconds, 33.8%
Fitness Testing:    314.5 seconds, 52.5%
Report:              82.1 seconds, 13.7%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 146
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 147
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 147
;;******************************
;; -*- Number IO problem report - generation 147
Test total error for best: 59998.23050000004
Test mean error for best: 29.99912
;;------------------------------
Outputs of best individual on training cases:
Correct output: -57.4559422311 | Program output: -74.023617    
Correct output: -71.0754923621 | Program output: -65.023617    
Correct output: -66.5176295557 | Program output: -77.023617    
Correct output: 149.3187378    | Program output: 86.028727     
Correct output: -36.5450493525 | Program output: -83.023617    
Correct output: 75.4021928097  | Program output: 48.024907     
Correct output: 52.2615929867  | Program output: 74.027527     
Correct output: -19.2178367434 | Program output: 43.024417     
Correct output: 66.7518906772  | Program output: 1.023617      
Correct output: 7.673605441    | Program output: 27.023607     
Correct output: 23.6294031682  | Program output: 90.029107     
Correct output: -6.1389033433  | Program output: 38.023927     
Correct output: 9.2516366816   | Program output: -82.023627    
Correct output: 31.3251776267  | Program output: -55.023627    
Correct output: 73.3746496408  | Program output: 0.023607      
Correct output: 20.0500553336  | Program output: -19.023627    
Correct output: -23.2820697498 | Program output: 32.023627     
Correct output: 120.1004999359 | Program output: 30.023607     
Correct output: -155.453212395 | Program output: -98.023617    
Correct output: 31.10301576    | Program output: 10.023617     
Correct output: 45.5733057121  | Program output: -39.023607    
Correct output: -68.592783645  | Program output: -78.023607    
Correct output: -125.979392023 | Program output: -70.023627    
Correct output: -91.9273649148 | Program output: -71.023617    
Correct output: -92.5660607267 | Program output: -49.023627    
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_yank} {:instruction integer_inc} {:instruction float_min} {:instruction float_dup_times} {:instruction integer_mod} {:instruction float_min} {:instruction float_div} {:instruction float_sub} {:instruction float_yankdup} {:instruction float_min} {:instruction print_float} {:instruction integer_shove} {:instruction float_min} {:instruction integer_shove} {:instruction integer_shove} {:instruction float_min} {:instruction print_float} {:instruction integer_div} {:instruction 27} {:instruction float_sub} {:instruction float_yankdup} {:instruction float_sub} {:instruction float_yankdup} {:instruction float_mod} {:instruction 9} {:instruction integer_add} {:instruction integer_stackdepth} {:instruction float_tan} {:instruction in2} {:instruction tag_float_196} {:instruction float_swap} {:instruction float_rot} {:instruction integer_add} {:instruction integer_max} {:instruction integer_max} {:instruction float_yank} {:instruction integer_stackdepth} {:instruction float_min} {:instruction in2} {:instruction float_frominteger} {:instruction print_float} {:instruction print_float} {:instruction float_inc} {:instruction integer_rot} {:instruction float_shove} {:instruction integer_inc} {:instruction float_mod} {:instruction print_integer} {:instruction integer_mult} {:instruction integer_dup} {:instruction print_integer} {:instruction integer_sub} {:instruction integer_max} {:instruction integer_dup} {:instruction integer_yank} {:instruction integer_max} {:instruction integer_sub} {:instruction integer_fromfloat} {:instruction integer_stackdepth} {:instruction integer_max} {:instruction float_sin} {:instruction integer_stackdepth} {:instruction float_add} {:instruction in2} {:instruction float_mult} {:instruction integer_stackdepth} {:instruction float_frominteger} {:instruction integer_fromfloat} {:instruction integer_mod} {:instruction print_integer} {:instruction float_sin} {:instruction integer_stackdepth} {:instruction tag_float_364} {:instruction 6} {:instruction tag_float_291} {:instruction integer_inc} {:instruction float_swap} {:instruction print_integer})
Best program: (float_yank integer_inc float_min float_dup_times integer_mod float_min float_div float_sub float_yankdup float_min print_float integer_shove float_min integer_shove integer_shove float_min print_float integer_div 27 float_sub float_yankdup float_sub float_yankdup float_mod 9 integer_add integer_stackdepth float_tan in2 tag_float_196 float_swap float_rot integer_add integer_max integer_max float_yank integer_stackdepth float_min in2 float_frominteger print_float print_float float_inc integer_rot float_shove integer_inc float_mod print_integer integer_mult integer_dup print_integer integer_sub integer_max integer_dup integer_yank integer_max integer_sub integer_fromfloat integer_stackdepth integer_max float_sin integer_stackdepth float_add in2 float_mult integer_stackdepth float_frominteger integer_fromfloat integer_mod print_integer float_sin integer_stackdepth tag_float_364 6 tag_float_291 integer_inc float_swap print_integer)
Errors: [16.5677 9 6.0519 8 10.506 10 63.29 7 46.4786 10 27.3773 7 21.7659 9 62.2423 12 65.7283 10 19.35 7 66.3997 9 44.1628 9 91.2753 9 86.3488 9 73.351 10 39.0737 11 55.3057 9 90.0769 11 57.4296 10 21.0794 7 84.5969 10 9.4308 7 55.9558 10 20.9037 7 43.5424 9]
Total: 1404.2905
Mean: 28.08581
Genome size: 78
Size: 79
Percent parens: 0.013
--- Population Statistics ---
Average total errors in population: 3831.090363000003
Median total errors in population: 1404.2905
Error averages by case: (140.5540170000008 9.44 132.62273240000172 8.667 136.590102499998 10.206 137.51543489999838 7.611 166.05563910000106 10.398 102.44637699999817 7.588 98.50092179999932 9.435 134.77314359999926 11.841 132.88101820000085 10.165 95.123990100001 7.657 138.94108239999883 9.372 116.92868800000144 9.303 202.15691360000108 9.498 198.2744110000032 9.488 137.18106389999855 10.21 147.55459089999897 11.243 126.9791348999987 9.543 158.45045319999807 11.002 178.52584000000155 10.387 96.19173950000084 7.319 196.4971836000017 10.424 134.42493050000098 7.763 175.5067321999988 10.221 145.57435709999848 7.847 164.88686560000198 9.325)
Error minima by case: (16.5452 8 5.9819 6 10.4835 8 62.2917 6 36.5822 9 26.3852 6 21.7397 7 19.263 9 24.2708 9 0.6736 6 3.3706 8 6.1792 7 2.2516 7 4.3252 7 16.6481 8 3.0501 9 23.3193 9 83.1005 9 57.3595 8 4.103 6 9.5563 9 9.4079 6 55.8858 8 20.8337 6 43.4724 7)
Average genome size in population (length): 81.369
Average program size in population (points): 82.369
Average percent parens in population: 0.012
Minimum age in population: 201.4648094018935
Maximum age in population: 206.6169521532644
Average age in population: 204.7290778536828
Median age in population: 204.7435893986225
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 5
Genome diversity (% unique Plush genomes):	 0.876
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 5
Syntactic diversity (% unique Push programs):	 0.876
Total error diversity:				 0.244
Error (vector) diversity:			 0.282
Behavioral diversity:				 0.283
--- Run Statistics ---
Number of program evaluations used so far: 148000
Number of point (instruction) evaluations so far: 325258356
--- Timings ---
Current time: 1529615755850 milliseconds
Total Time:         602.6 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       203.4 seconds, 33.8%
Fitness Testing:    316.5 seconds, 52.5%
Report:              82.5 seconds, 13.7%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 147
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 148
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 148
;;******************************
;; -*- Number IO problem report - generation 148
Test total error for best: 59998.23050000004
Test mean error for best: 29.99912
;;------------------------------
Outputs of best individual on training cases:
Correct output: -57.4559422311 | Program output: -74.023617    
Correct output: -71.0754923621 | Program output: -65.023617    
Correct output: -66.5176295557 | Program output: -77.023617    
Correct output: 149.3187378    | Program output: 86.028727     
Correct output: -36.5450493525 | Program output: -83.023617    
Correct output: 75.4021928097  | Program output: 48.024907     
Correct output: 52.2615929867  | Program output: 74.027527     
Correct output: -19.2178367434 | Program output: 43.024417     
Correct output: 66.7518906772  | Program output: 1.023617      
Correct output: 7.673605441    | Program output: 27.023607     
Correct output: 23.6294031682  | Program output: 90.029107     
Correct output: -6.1389033433  | Program output: 38.023927     
Correct output: 9.2516366816   | Program output: -82.023627    
Correct output: 31.3251776267  | Program output: -55.023627    
Correct output: 73.3746496408  | Program output: 0.023607      
Correct output: 20.0500553336  | Program output: -19.023627    
Correct output: -23.2820697498 | Program output: 32.023627     
Correct output: 120.1004999359 | Program output: 30.023607     
Correct output: -155.453212395 | Program output: -98.023617    
Correct output: 31.10301576    | Program output: 10.023617     
Correct output: 45.5733057121  | Program output: -39.023607    
Correct output: -68.592783645  | Program output: -78.023607    
Correct output: -125.979392023 | Program output: -70.023627    
Correct output: -91.9273649148 | Program output: -71.023617    
Correct output: -92.5660607267 | Program output: -49.023627    
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_yank} {:instruction integer_dup} {:instruction float_min} {:instruction float_sub} {:instruction float_add} {:instruction float_yank} {:instruction float_dup_times} {:instruction integer_mult} {:instruction integer_inc} {:instruction float_add} {:instruction float_yank} {:instruction integer_dup_times} {:instruction float_min} {:instruction float_shove} {:instruction float_cos} {:instruction print_float} {:instruction integer_div} {:instruction 27} {:instruction float_sub} {:instruction float_yankdup} {:instruction float_mod} {:instruction 9} {:instruction tag_float_196} {:instruction float_swap} {:instruction float_rot} {:instruction integer_add} {:instruction integer_stackdepth} {:instruction float_mod} {:instruction in2} {:instruction integer_add} {:instruction integer_max} {:instruction float_yank} {:instruction integer_stackdepth} {:instruction float_flush} {:instruction in2} {:instruction float_frominteger} {:instruction print_float} {:instruction integer_dup} {:instruction float_shove} {:instruction float_shove} {:instruction integer_add} {:instruction float_mod} {:instruction integer_dup} {:instruction integer_dup_items} {:instruction print_integer} {:instruction integer_min} {:instruction integer_yank} {:instruction print_integer} {:instruction integer_yank} {:instruction integer_max} {:instruction integer_max} {:instruction integer_yank} {:instruction integer_stackdepth} {:instruction float_add} {:instruction integer_max} {:instruction float_mult} {:instruction integer_yank} {:instruction float_cos} {:instruction integer_max} {:instruction float_sin} {:instruction integer_stackdepth} {:instruction float_add} {:instruction in2} {:instruction tagged_953} {:instruction integer_stackdepth} {:instruction integer_mod} {:instruction print_integer} {:instruction float_min} {:instruction integer_dup_times} {:instruction tag_float_291} {:instruction 6} {:instruction tag_float_208} {:instruction integer_inc} {:instruction float_dup_times} {:instruction print_integer})
Best program: (float_yank integer_dup float_min float_sub float_add float_yank float_dup_times integer_mult integer_inc float_add float_yank integer_dup_times float_min float_shove float_cos print_float integer_div 27 float_sub float_yankdup float_mod 9 tag_float_196 float_swap float_rot integer_add integer_stackdepth float_mod in2 integer_add integer_max float_yank integer_stackdepth float_flush in2 float_frominteger print_float integer_dup float_shove float_shove integer_add float_mod integer_dup integer_dup_items print_integer integer_min integer_yank print_integer integer_yank integer_max integer_max integer_yank integer_stackdepth float_add integer_max float_mult integer_yank float_cos integer_max float_sin integer_stackdepth float_add in2 tagged_953 integer_stackdepth integer_mod print_integer float_min integer_dup_times tag_float_291 6 tag_float_208 integer_inc float_dup_times print_integer)
Errors: [16.5677 9 6.0519 8 10.506 10 63.29 7 46.4786 10 27.3773 7 21.7659 9 62.2423 12 65.7283 10 19.35 7 66.3997 9 44.1628 9 91.2753 9 86.3488 9 73.351 10 39.0737 11 55.3057 9 90.0769 11 57.4296 10 21.0794 7 84.5969 10 9.4308 7 55.9558 10 20.9037 7 43.5424 9]
Total: 1404.2905
Mean: 28.08581
Genome size: 75
Size: 76
Percent parens: 0.013
--- Population Statistics ---
Average total errors in population: 4254.665671600002
Median total errors in population: 1404.2905
Error averages by case: (159.88912290000164 9.404 151.30421680000038 8.608 154.92547299999788 10.185 152.28876659999906 7.601 184.61690930000128 10.339 119.43370609999748 7.562 114.0083187999991 9.421 149.13411400000035 11.822 144.6601477000002 10.173 110.5041286000015 7.635 153.52387289999973 9.335 133.85789100000162 9.269 221.5829050000015 9.467 217.36838700000328 9.456 149.47909819999825 10.188 166.1904123999995 11.223 143.0447026999986 9.518 174.86485949999764 10.967 195.83594710000168 10.374 112.06095220000095 7.292 215.55661410000172 10.409 153.98904100000115 7.703 194.11698819999853 10.185 164.0592752999984 7.756 183.1858212000022 9.292)
Error minima by case: (16.5452 8 6.0028 6 10.4835 8 36.73 6 35.5767 8 26.3541 6 15.2616 8 18.3861 9 29.7519 9 0.6736 6 3.3706 8 6.4353 7 2.2516 7 4.3252 7 33.6254 8 6.9499 9 23.8335 8 9.9426 8 57.3805 9 4.103 5 8.5733 9 9.4073 6 55.9067 9 20.8546 6 43.4933 8)
Average genome size in population (length): 80.638
Average program size in population (points): 81.638
Average percent parens in population: 0.012
Minimum age in population: 203.2580280858738
Maximum age in population: 207.8905150138439
Average age in population: 206.0972234380499
Median age in population: 206.1336078965397
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 6
Genome diversity (% unique Plush genomes):	 0.882
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 6
Syntactic diversity (% unique Push programs):	 0.882
Total error diversity:				 0.239
Error (vector) diversity:			 0.283
Behavioral diversity:				 0.283
--- Run Statistics ---
Number of program evaluations used so far: 149000
Number of point (instruction) evaluations so far: 327275006
--- Timings ---
Current time: 1529615759810 milliseconds
Total Time:         606.5 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       204.8 seconds, 33.8%
Fitness Testing:    318.6 seconds, 52.5%
Report:              83.0 seconds, 13.7%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 148
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 149
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 149
;;******************************
;; -*- Number IO problem report - generation 149
Test total error for best: 59998.23050000004
Test mean error for best: 29.99912
;;------------------------------
Outputs of best individual on training cases:
Correct output: -57.4559422311 | Program output: -74.023617    
Correct output: -71.0754923621 | Program output: -65.023617    
Correct output: -66.5176295557 | Program output: -77.023617    
Correct output: 149.3187378    | Program output: 86.028727     
Correct output: -36.5450493525 | Program output: -83.023617    
Correct output: 75.4021928097  | Program output: 48.024907     
Correct output: 52.2615929867  | Program output: 74.027527     
Correct output: -19.2178367434 | Program output: 43.024417     
Correct output: 66.7518906772  | Program output: 1.023617      
Correct output: 7.673605441    | Program output: 27.023607     
Correct output: 23.6294031682  | Program output: 90.029107     
Correct output: -6.1389033433  | Program output: 38.023927     
Correct output: 9.2516366816   | Program output: -82.023627    
Correct output: 31.3251776267  | Program output: -55.023627    
Correct output: 73.3746496408  | Program output: 0.023607      
Correct output: 20.0500553336  | Program output: -19.023627    
Correct output: -23.2820697498 | Program output: 32.023627     
Correct output: 120.1004999359 | Program output: 30.023607     
Correct output: -155.453212395 | Program output: -98.023617    
Correct output: 31.10301576    | Program output: 10.023617     
Correct output: 45.5733057121  | Program output: -39.023607    
Correct output: -68.592783645  | Program output: -78.023607    
Correct output: -125.979392023 | Program output: -70.023627    
Correct output: -91.9273649148 | Program output: -71.023617    
Correct output: -92.5660607267 | Program output: -49.023627    
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_min} {:instruction integer_dup} {:instruction integer_yankdup} {:instruction float_cos} {:instruction integer_dup} {:instruction float_dup_times} {:instruction float_rot} {:instruction float_dup} {:instruction tag_integer_561} {:instruction print_float} {:instruction integer_div} {:instruction 27} {:instruction integer_dup_times} {:instruction float_yankdup} {:instruction integer_sub} {:instruction float_sub} {:instruction float_mult} {:instruction integer_sub} {:instruction 9} {:instruction float_yankdup} {:instruction integer_stackdepth} {:instruction float_frominteger} {:instruction float_dec} {:instruction float_swap} {:instruction float_rot} {:instruction integer_add} {:instruction integer_stackdepth} {:instruction float_add} {:instruction in2} {:instruction tag_float_196} {:instruction float_swap} {:instruction float_tan} {:instruction integer_add} {:instruction integer_max} {:instruction float_max} {:instruction integer_stackdepth} {:instruction float_flush} {:instruction in2} {:instruction float_frominteger} {:instruction print_float} {:instruction integer_dup} {:instruction float_shove} {:instruction float_shove} {:instruction integer_inc} {:instruction print_integer} {:instruction integer_shove} {:instruction integer_yank} {:instruction print_integer} {:instruction integer_add} {:instruction float_inc} {:instruction print_integer} {:instruction integer_add} {:instruction print_integer} {:instruction print_integer} {:instruction integer_shove} {:instruction float_min} {:instruction print_integer} {:instruction integer_yank} {:instruction float_sub} {:instruction float_add} {:instruction in2} {:instruction float_mult} {:instruction integer_fromfloat} {:instruction integer_stackdepth} {:instruction integer_swap} {:instruction in2} {:instruction float_mult} {:instruction integer_stackdepth} {:instruction float_frominteger} {:instruction integer_fromfloat} {:instruction float_frominteger} {:instruction integer_fromfloat} {:instruction integer_mod} {:instruction print_integer} {:instruction float_min} {:instruction integer_stackdepth} {:instruction tag_float_291} {:instruction 6} {:instruction tag_float_291} {:instruction integer_inc} {:instruction float_swap} {:instruction print_integer})
Best program: (float_min integer_dup integer_yankdup float_cos integer_dup float_dup_times float_rot float_dup tag_integer_561 print_float integer_div 27 integer_dup_times float_yankdup integer_sub float_sub float_mult integer_sub 9 float_yankdup integer_stackdepth float_frominteger float_dec float_swap float_rot integer_add integer_stackdepth float_add in2 tag_float_196 float_swap float_tan integer_add integer_max float_max integer_stackdepth float_flush in2 float_frominteger print_float integer_dup float_shove float_shove integer_inc print_integer integer_shove integer_yank print_integer integer_add float_inc print_integer integer_add print_integer print_integer integer_shove float_min print_integer integer_yank float_sub float_add in2 float_mult integer_fromfloat integer_stackdepth integer_swap in2 float_mult integer_stackdepth float_frominteger integer_fromfloat float_frominteger integer_fromfloat integer_mod print_integer float_min integer_stackdepth tag_float_291 6 tag_float_291 integer_inc float_swap print_integer)
Errors: [16.5677 9 6.0519 8 10.506 10 63.29 7 46.4786 10 27.3773 7 21.7659 9 62.2423 12 65.7283 10 19.35 7 66.3997 9 44.1628 9 91.2753 9 86.3488 9 73.351 10 39.0737 11 55.3057 9 90.0769 11 57.4296 10 21.0794 7 84.5969 10 9.4308 7 55.9558 10 20.9037 7 43.5424 9]
Total: 1404.2905
Mean: 28.08581
Genome size: 82
Size: 83
Percent parens: 0.012
--- Population Statistics ---
Average total errors in population: 4220.314360700003
Median total errors in population: 1404.7904000000003
Error averages by case: (169.063036200002 9.48 160.4436038999998 8.688 164.20268259999816 10.197 138.62109989999874 7.663 193.7362470000012 10.399 105.01828349999847 7.595 100.24517239999936 9.491 136.7742263999997 11.794 133.64306570000068 10.139 97.23224710000066 7.756 140.5590155999995 9.383 120.24994560000094 9.269 230.4895511000012 9.529 226.0518536000031 9.531 140.51304129999886 10.234 174.88568190000024 11.276 130.5565272999989 9.567 162.00197709999821 10.958 205.57234200000136 10.396 98.70366130000075 7.306 224.39224530000152 10.461 163.18806660000098 7.793 202.85236979999877 10.211 173.13739799999874 7.854 191.87901950000185 9.332)
Error minima by case: (16.5441 8 5.9848 7 10.4824 9 22.3187 6 37.562 9 1.5978 6 16.2346 8 20.2348 8 24.2908 6 0.6736 6 3.3713 8 7.1659 7 2.2516 7 3.7018 8 3.6254 5 3.0501 8 24.3091 8 13.1005 7 57.3605 8 4.0923 5 9.5663 9 9.4072 6 55.8887 8 20.8327 6 43.4744 8)
Average genome size in population (length): 80.564
Average program size in population (points): 81.564
Average percent parens in population: 0.012
Minimum age in population: 204.2580280858738
Maximum age in population: 209.6065404861531
Average age in population: 207.4918599215245
Median age in population: 207.5468106242552
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 6
Genome diversity (% unique Plush genomes):	 0.905
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 6
Syntactic diversity (% unique Push programs):	 0.905
Total error diversity:				 0.25
Error (vector) diversity:			 0.298
Behavioral diversity:				 0.298
--- Run Statistics ---
Number of program evaluations used so far: 150000
Number of point (instruction) evaluations so far: 329290206
--- Timings ---
Current time: 1529615763481 milliseconds
Total Time:         610.1 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       206.0 seconds, 33.8%
Fitness Testing:    320.6 seconds, 52.5%
Report:              83.4 seconds, 13.7%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 149
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 150
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 150
;;******************************
;; -*- Number IO problem report - generation 150
Test total error for best: 59998.23050000004
Test mean error for best: 29.99912
;;------------------------------
Outputs of best individual on training cases:
Correct output: -57.4559422311 | Program output: -74.023617    
Correct output: -71.0754923621 | Program output: -65.023617    
Correct output: -66.5176295557 | Program output: -77.023617    
Correct output: 149.3187378    | Program output: 86.028727     
Correct output: -36.5450493525 | Program output: -83.023617    
Correct output: 75.4021928097  | Program output: 48.024907     
Correct output: 52.2615929867  | Program output: 74.027527     
Correct output: -19.2178367434 | Program output: 43.024417     
Correct output: 66.7518906772  | Program output: 1.023617      
Correct output: 7.673605441    | Program output: 27.023607     
Correct output: 23.6294031682  | Program output: 90.029107     
Correct output: -6.1389033433  | Program output: 38.023927     
Correct output: 9.2516366816   | Program output: -82.023627    
Correct output: 31.3251776267  | Program output: -55.023627    
Correct output: 73.3746496408  | Program output: 0.023607      
Correct output: 20.0500553336  | Program output: -19.023627    
Correct output: -23.2820697498 | Program output: 32.023627     
Correct output: 120.1004999359 | Program output: 30.023607     
Correct output: -155.453212395 | Program output: -98.023617    
Correct output: 31.10301576    | Program output: 10.023617     
Correct output: 45.5733057121  | Program output: -39.023607    
Correct output: -68.592783645  | Program output: -78.023607    
Correct output: -125.979392023 | Program output: -70.023627    
Correct output: -91.9273649148 | Program output: -71.023617    
Correct output: -92.5660607267 | Program output: -49.023627    
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_inc} {:instruction integer_pop} {:instruction float_min} {:instruction integer_max} {:instruction float_yank} {:instruction integer_inc} {:instruction float_add} {:instruction integer_rot} {:instruction integer_sub} {:instruction float_sub} {:instruction integer_dup_items} {:instruction print_float} {:instruction integer_div} {:instruction 27} {:instruction float_sub} {:instruction float_yankdup} {:instruction 27} {:instruction float_sub} {:instruction integer_shove} {:instruction integer_sub} {:instruction 9} {:instruction float_rot} {:instruction integer_add} {:instruction integer_stackdepth} {:instruction float_mod} {:instruction in2} {:instruction integer_add} {:instruction integer_max} {:instruction float_dup_times} {:instruction float_yank} {:instruction integer_stackdepth} {:instruction float_flush} {:instruction in2} {:instruction float_frominteger} {:instruction print_float} {:instruction integer_dup} {:instruction float_shove} {:instruction float_shove} {:instruction integer_add} {:instruction float_mod} {:instruction integer_dup} {:instruction integer_dup_items} {:instruction print_integer} {:instruction integer_min} {:instruction integer_yank} {:instruction print_integer} {:instruction integer_yank} {:instruction integer_max} {:instruction integer_max} {:instruction integer_fromfloat} {:instruction integer_stackdepth} {:instruction float_add} {:instruction integer_max} {:instruction float_mult} {:instruction integer_yank} {:instruction float_cos} {:instruction integer_max} {:instruction float_dup_items} {:instruction float_flush} {:instruction -0.4260313406145855} {:instruction in2} {:instruction in2} {:instruction float_mult} {:instruction integer_yank} {:instruction integer_max} {:instruction integer_div} {:instruction integer_stackdepth} {:instruction float_add} {:instruction in2} {:instruction float_mult} {:instruction integer_stackdepth} {:instruction float_frominteger} {:instruction integer_fromfloat} {:instruction integer_mod} {:instruction print_integer} {:instruction 6} {:instruction tag_float_291} {:instruction integer_inc} {:instruction integer_dec} {:instruction 6} {:instruction tag_float_291} {:instruction integer_inc} {:instruction float_swap} {:instruction print_integer})
Best program: (float_inc integer_pop float_min integer_max float_yank integer_inc float_add integer_rot integer_sub float_sub integer_dup_items print_float integer_div 27 float_sub float_yankdup 27 float_sub integer_shove integer_sub 9 float_rot integer_add integer_stackdepth float_mod in2 integer_add integer_max float_dup_times float_yank integer_stackdepth float_flush in2 float_frominteger print_float integer_dup float_shove float_shove integer_add float_mod integer_dup integer_dup_items print_integer integer_min integer_yank print_integer integer_yank integer_max integer_max integer_fromfloat integer_stackdepth float_add integer_max float_mult integer_yank float_cos integer_max float_dup_items float_flush -0.4260313406145855 in2 in2 float_mult integer_yank integer_max integer_div integer_stackdepth float_add in2 float_mult integer_stackdepth float_frominteger integer_fromfloat integer_mod print_integer 6 tag_float_291 integer_inc integer_dec 6 tag_float_291 integer_inc float_swap print_integer)
Errors: [16.5677 9 6.0519 8 10.506 10 63.29 7 46.4786 10 27.3773 7 21.7659 9 62.2423 12 65.7283 10 19.35 7 66.3997 9 44.1628 9 91.2753 9 86.3488 9 73.351 10 39.0737 11 55.3057 9 90.0769 11 57.4296 10 21.0794 7 84.5969 10 9.4308 7 55.9558 10 20.9037 7 43.5424 9]
Total: 1404.2905
Mean: 28.08581
Genome size: 84
Size: 85
Percent parens: 0.012
--- Population Statistics ---
Average total errors in population: 4143.989533500003
Median total errors in population: 1404.2905
Error averages by case: (154.75650240000138 9.438 146.1924041000007 8.651 149.93937019999822 10.211 146.18815359999903 7.631 179.6365994000011 10.393 113.39100779999804 7.617 108.61144449999935 9.468 145.22215800000018 11.817 140.87116240000063 10.171 106.20845820000108 7.709 148.28008359999973 9.353 128.84062130000137 9.269 217.06292150000172 9.505 212.64216700000304 9.481 148.5097148999987 10.265 166.98219620000023 11.236 138.8989559999988 9.541 169.779836399998 10.976 190.87657990000145 10.396 108.5547477000008 7.306 211.1435310000017 10.466 148.76389300000088 7.726 189.27959389999864 10.223 158.95582049999874 7.83 178.39561000000205 9.327)
Error minima by case: (15.5812 8 6.0055 7 9.5196 8 22.3187 6 36.6192 9 16.7582 6 6.3824 8 19.292 10 8.1079 8 0.6736 6 13.3706 7 6.2132 6 2.2516 7 4.3252 8 14.7307 8 3.0501 9 23.3563 9 9.9202 9 57.3832 9 4.914 6 8.5733 9 8.4443 6 55.9094 9 20.8574 6 43.4961 8)
Average genome size in population (length): 80.039
Average program size in population (points): 81.039
Average percent parens in population: 0.012
Minimum age in population: 206.195251961888
Maximum age in population: 210.8242385277819
Average age in population: 208.9272635582489
Median age in population: 208.989136530441
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 6
Genome diversity (% unique Plush genomes):	 0.886
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 6
Syntactic diversity (% unique Push programs):	 0.886
Total error diversity:				 0.231
Error (vector) diversity:			 0.284
Behavioral diversity:				 0.284
--- Run Statistics ---
Number of program evaluations used so far: 151000
Number of point (instruction) evaluations so far: 331292381
--- Timings ---
Current time: 1529615767544 milliseconds
Total Time:         614.2 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       207.4 seconds, 33.8%
Fitness Testing:    322.7 seconds, 52.5%
Report:              83.9 seconds, 13.7%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 150
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 151
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 151
;;******************************
;; -*- Number IO problem report - generation 151
Test total error for best: 59998.23050000004
Test mean error for best: 29.99912
;;------------------------------
Outputs of best individual on training cases:
Correct output: -57.4559422311 | Program output: -74.023617    
Correct output: -71.0754923621 | Program output: -65.023617    
Correct output: -66.5176295557 | Program output: -77.023617    
Correct output: 149.3187378    | Program output: 86.028727     
Correct output: -36.5450493525 | Program output: -83.023617    
Correct output: 75.4021928097  | Program output: 48.024907     
Correct output: 52.2615929867  | Program output: 74.027527     
Correct output: -19.2178367434 | Program output: 43.024417     
Correct output: 66.7518906772  | Program output: 1.023617      
Correct output: 7.673605441    | Program output: 27.023607     
Correct output: 23.6294031682  | Program output: 90.029107     
Correct output: -6.1389033433  | Program output: 38.023927     
Correct output: 9.2516366816   | Program output: -82.023627    
Correct output: 31.3251776267  | Program output: -55.023627    
Correct output: 73.3746496408  | Program output: 0.023607      
Correct output: 20.0500553336  | Program output: -19.023627    
Correct output: -23.2820697498 | Program output: 32.023627     
Correct output: 120.1004999359 | Program output: 30.023607     
Correct output: -155.453212395 | Program output: -98.023617    
Correct output: 31.10301576    | Program output: 10.023617     
Correct output: 45.5733057121  | Program output: -39.023607    
Correct output: -68.592783645  | Program output: -78.023607    
Correct output: -125.979392023 | Program output: -70.023627    
Correct output: -91.9273649148 | Program output: -71.023617    
Correct output: -92.5660607267 | Program output: -49.023627    
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_yankdup} {:instruction float_frominteger} {:instruction float_dup_times} {:instruction float_rot} {:instruction float_cos} {:instruction float_min} {:instruction float_rot} {:instruction print_integer} {:instruction float_cos} {:instruction print_float} {:instruction integer_div} {:instruction 27} {:instruction float_sub} {:instruction float_yankdup} {:instruction float_mod} {:instruction 9} {:instruction integer_add} {:instruction integer_stackdepth} {:instruction float_add} {:instruction in2} {:instruction tag_float_196} {:instruction float_swap} {:instruction float_rot} {:instruction integer_add} {:instruction integer_max} {:instruction integer_max} {:instruction float_yank} {:instruction integer_stackdepth} {:instruction float_min} {:instruction in2} {:instruction float_frominteger} {:instruction print_float} {:instruction float_shove} {:instruction integer_inc} {:instruction print_integer} {:instruction integer_shove} {:instruction integer_yank} {:instruction print_integer} {:instruction integer_add} {:instruction integer_yank} {:instruction print_integer} {:instruction integer_yank} {:instruction print_integer} {:instruction integer_yank} {:instruction integer_max} {:instruction integer_max} {:instruction integer_fromfloat} {:instruction integer_stackdepth} {:instruction float_add} {:instruction integer_max} {:instruction float_mult} {:instruction integer_yank} {:instruction float_cos} {:instruction integer_max} {:instruction float_sin} {:instruction integer_stackdepth} {:instruction integer_inc} {:instruction integer_fromfloat} {:instruction float_inc} {:instruction float_add} {:instruction float_sin} {:instruction float_swap} {:instruction integer_stackdepth} {:instruction integer_div} {:instruction integer_fromfloat} {:instruction integer_stackdepth} {:instruction integer_max} {:instruction float_mult} {:instruction integer_yank} {:instruction float_cos} {:instruction integer_max} {:instruction float_sin} {:instruction integer_stackdepth} {:instruction float_add} {:instruction in2} {:instruction float_mod} {:instruction integer_stackdepth} {:instruction integer_mod} {:instruction print_integer} {:instruction float_min} {:instruction integer_stackdepth} {:instruction tag_float_291} {:instruction 6} {:instruction float_yank} {:instruction 6} {:instruction tag_float_291} {:instruction integer_inc} {:instruction float_rot} {:instruction print_integer})
Best program: (float_yankdup float_frominteger float_dup_times float_rot float_cos float_min float_rot print_integer float_cos print_float integer_div 27 float_sub float_yankdup float_mod 9 integer_add integer_stackdepth float_add in2 tag_float_196 float_swap float_rot integer_add integer_max integer_max float_yank integer_stackdepth float_min in2 float_frominteger print_float float_shove integer_inc print_integer integer_shove integer_yank print_integer integer_add integer_yank print_integer integer_yank print_integer integer_yank integer_max integer_max integer_fromfloat integer_stackdepth float_add integer_max float_mult integer_yank float_cos integer_max float_sin integer_stackdepth integer_inc integer_fromfloat float_inc float_add float_sin float_swap integer_stackdepth integer_div integer_fromfloat integer_stackdepth integer_max float_mult integer_yank float_cos integer_max float_sin integer_stackdepth float_add in2 float_mod integer_stackdepth integer_mod print_integer float_min integer_stackdepth tag_float_291 6 float_yank 6 tag_float_291 integer_inc float_rot print_integer)
Errors: [16.5677 9 6.0519 8 10.506 10 63.29 7 46.4786 10 27.3773 7 21.7659 9 62.2423 12 65.7283 10 19.35 7 66.3997 9 44.1628 9 91.2753 9 86.3488 9 73.351 10 39.0737 11 55.3057 9 90.0769 11 57.4296 10 21.0794 7 84.5969 10 9.4308 7 55.9558 10 20.9037 7 43.5424 9]
Total: 1404.2905
Mean: 28.08581
Genome size: 89
Size: 90
Percent parens: 0.011
--- Population Statistics ---
Average total errors in population: 4468.878225200003
Median total errors in population: 1404.2905
Error averages by case: (167.87357810000225 9.524 159.31755 8.731 163.0983185999979 10.208 161.32723759999956 7.656 191.90803700000131 10.439 127.51511609999766 7.623 124.53225439999922 9.465 159.70372350000073 11.831 153.6496570000002 10.17 120.45948290000142 7.692 162.6251856000003 9.388 143.58950600000074 9.343 228.0481431000013 9.529 223.8286342000029 9.488 159.60827799999822 10.243 176.2015462000003 11.275 153.58440229999886 9.575 182.90436719999727 11.017 203.6877731000012 10.457 121.74343100000107 7.326 221.11228570000148 10.436 161.15353320000096 7.816 201.77593849999874 10.24 171.95591789999858 7.884 190.97532800000192 9.343)
Error minima by case: (1.563 8 6.0028 7 10.4824 9 22.3187 6 10.4567 9 8.6048 6 21.7384 8 19.2348 9 24.2717 9 0.6736 6 3.3706 8 6.1459 7 7.2516 6 3.7018 7 16.649 8 3.0474 9 23.2891 9 13.1005 9 57.3805 9 3.914 5 9.5563 9 9.4072 6 55.9067 9 20.8546 6 36.6731 8)
Average genome size in population (length): 80.146
Average program size in population (points): 81.146
Average percent parens in population: 0.012
Minimum age in population: 207.7954057809365
Maximum age in population: 212.3184491628741
Average age in population: 210.2948318992118
Median age in population: 210.3464665132891
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 6
Genome diversity (% unique Plush genomes):	 0.883
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 6
Syntactic diversity (% unique Push programs):	 0.883
Total error diversity:				 0.251
Error (vector) diversity:			 0.302
Behavioral diversity:				 0.302
--- Run Statistics ---
Number of program evaluations used so far: 152000
Number of point (instruction) evaluations so far: 333297581
--- Timings ---
Current time: 1529615771243 milliseconds
Total Time:         617.9 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       208.7 seconds, 33.8%
Fitness Testing:    324.6 seconds, 52.5%
Report:              84.4 seconds, 13.7%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 151
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 152
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 152
;;******************************
;; -*- Number IO problem report - generation 152
Test total error for best: 59998.23050000004
Test mean error for best: 29.99912
;;------------------------------
Outputs of best individual on training cases:
Correct output: -57.4559422311 | Program output: -74.023617    
Correct output: -71.0754923621 | Program output: -65.023617    
Correct output: -66.5176295557 | Program output: -77.023617    
Correct output: 149.3187378    | Program output: 86.028727     
Correct output: -36.5450493525 | Program output: -83.023617    
Correct output: 75.4021928097  | Program output: 48.024907     
Correct output: 52.2615929867  | Program output: 74.027527     
Correct output: -19.2178367434 | Program output: 43.024417     
Correct output: 66.7518906772  | Program output: 1.023617      
Correct output: 7.673605441    | Program output: 27.023607     
Correct output: 23.6294031682  | Program output: 90.029107     
Correct output: -6.1389033433  | Program output: 38.023927     
Correct output: 9.2516366816   | Program output: -82.023627    
Correct output: 31.3251776267  | Program output: -55.023627    
Correct output: 73.3746496408  | Program output: 0.023607      
Correct output: 20.0500553336  | Program output: -19.023627    
Correct output: -23.2820697498 | Program output: 32.023627     
Correct output: 120.1004999359 | Program output: 30.023607     
Correct output: -155.453212395 | Program output: -98.023617    
Correct output: 31.10301576    | Program output: 10.023617     
Correct output: 45.5733057121  | Program output: -39.023607    
Correct output: -68.592783645  | Program output: -78.023607    
Correct output: -125.979392023 | Program output: -70.023627    
Correct output: -91.9273649148 | Program output: -71.023617    
Correct output: -92.5660607267 | Program output: -49.023627    
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_dup_times} {:instruction print_float} {:instruction integer_div} {:instruction float_tan} {:instruction integer_div} {:instruction integer_dup_items} {:instruction print_float} {:instruction integer_div} {:instruction 27} {:instruction float_sub} {:instruction float_min} {:instruction print_float} {:instruction integer_add} {:instruction 27} {:instruction float_sub} {:instruction float_yankdup} {:instruction integer_yank} {:instruction 9} {:instruction integer_add} {:instruction integer_stackdepth} {:instruction float_add} {:instruction in2} {:instruction integer_add} {:instruction integer_max} {:instruction float_yank} {:instruction integer_stackdepth} {:instruction float_flush} {:instruction in2} {:instruction float_frominteger} {:instruction print_float} {:instruction integer_dup} {:instruction float_shove} {:instruction float_shove} {:instruction integer_add} {:instruction float_mod} {:instruction integer_dup} {:instruction integer_dup_items} {:instruction print_integer} {:instruction integer_min} {:instruction integer_yank} {:instruction print_integer} {:instruction integer_yank} {:instruction integer_max} {:instruction integer_max} {:instruction integer_fromfloat} {:instruction integer_stackdepth} {:instruction integer_inc} {:instruction integer_yankdup} {:instruction float_mult} {:instruction integer_yank} {:instruction float_cos} {:instruction integer_max} {:instruction float_sin} {:instruction integer_stackdepth} {:instruction float_rot} {:instruction in2} {:instruction float_mod} {:instruction integer_stackdepth} {:instruction integer_mod} {:instruction print_integer} {:instruction float_min} {:instruction integer_stackdepth} {:instruction tag_float_291} {:instruction 6} {:instruction tag_float_208} {:instruction integer_inc} {:instruction float_swap} {:instruction print_integer})
Best program: (float_dup_times print_float integer_div float_tan integer_div integer_dup_items print_float integer_div 27 float_sub float_min print_float integer_add 27 float_sub float_yankdup integer_yank 9 integer_add integer_stackdepth float_add in2 integer_add integer_max float_yank integer_stackdepth float_flush in2 float_frominteger print_float integer_dup float_shove float_shove integer_add float_mod integer_dup integer_dup_items print_integer integer_min integer_yank print_integer integer_yank integer_max integer_max integer_fromfloat integer_stackdepth integer_inc integer_yankdup float_mult integer_yank float_cos integer_max float_sin integer_stackdepth float_rot in2 float_mod integer_stackdepth integer_mod print_integer float_min integer_stackdepth tag_float_291 6 tag_float_208 integer_inc float_swap print_integer)
Errors: [16.5677 9 6.0519 8 10.506 10 63.29 7 46.4786 10 27.3773 7 21.7659 9 62.2423 12 65.7283 10 19.35 7 66.3997 9 44.1628 9 91.2753 9 86.3488 9 73.351 10 39.0737 11 55.3057 9 90.0769 11 57.4296 10 21.0794 7 84.5969 10 9.4308 7 55.9558 10 20.9037 7 43.5424 9]
Total: 1404.2905
Mean: 28.08581
Genome size: 68
Size: 69
Percent parens: 0.014
--- Population Statistics ---
Average total errors in population: 4525.610363400003
Median total errors in population: 1404.2905
Error averages by case: (170.39633950000177 9.467 163.97995250000028 8.683 165.6066939999979 10.201 160.88059829999946 7.594 194.65459590000117 10.387 128.44016599999787 7.606 125.1577511999992 9.44 160.6859134000006 11.824 159.69879559999987 10.156 122.60028640000074 7.651 163.93893349999993 9.344 144.6566591000008 9.296 230.90912390000116 9.458 226.81867820000315 9.452 160.85156639999843 10.246 173.3462940999997 11.241 154.73351559999864 9.538 183.84794909999795 10.978 207.9612977000016 10.392 122.19510330000091 7.248 225.6618645000016 10.389 164.661024200001 7.775 206.21891399999853 10.207 176.63998349999858 7.817 195.35436350000208 9.324)
Error minima by case: (16.5458 8 5.9838 7 10.4841 8 22.3187 6 37.5688 8 26.3952 6 5.2616 8 20.2416 8 24.2708 9 0.6736 6 3.3706 8 7.1626 7 7.228 7 4.2982 7 16.6481 8 3.0501 9 24.3058 8 9.9356 9 57.3615 9 4.086 5 9.5663 9 9.4079 6 55.8867 9 20.8357 6 43.4734 8)
Average genome size in population (length): 80.425
Average program size in population (points): 81.425
Average percent parens in population: 0.012
Minimum age in population: 208.7954057809365
Maximum age in population: 213.6900824093288
Average age in population: 211.6629645112082
Median age in population: 211.674224023492
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 5
Genome diversity (% unique Plush genomes):	 0.878
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 5
Syntactic diversity (% unique Push programs):	 0.878
Total error diversity:				 0.228
Error (vector) diversity:			 0.288
Behavioral diversity:				 0.288
--- Run Statistics ---
Number of program evaluations used so far: 153000
Number of point (instruction) evaluations so far: 335309381
--- Timings ---
Current time: 1529615774953 milliseconds
Total Time:         621.7 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       210.0 seconds, 33.8%
Fitness Testing:    326.6 seconds, 52.5%
Report:              84.9 seconds, 13.7%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 152
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 153
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 153
;;******************************
;; -*- Number IO problem report - generation 153
Test total error for best: 59998.23050000004
Test mean error for best: 29.99912
;;------------------------------
Outputs of best individual on training cases:
Correct output: -57.4559422311 | Program output: -74.023617    
Correct output: -71.0754923621 | Program output: -65.023617    
Correct output: -66.5176295557 | Program output: -77.023617    
Correct output: 149.3187378    | Program output: 86.028727     
Correct output: -36.5450493525 | Program output: -83.023617    
Correct output: 75.4021928097  | Program output: 48.024907     
Correct output: 52.2615929867  | Program output: 74.027527     
Correct output: -19.2178367434 | Program output: 43.024417     
Correct output: 66.7518906772  | Program output: 1.023617      
Correct output: 7.673605441    | Program output: 27.023607     
Correct output: 23.6294031682  | Program output: 90.029107     
Correct output: -6.1389033433  | Program output: 38.023927     
Correct output: 9.2516366816   | Program output: -82.023627    
Correct output: 31.3251776267  | Program output: -55.023627    
Correct output: 73.3746496408  | Program output: 0.023607      
Correct output: 20.0500553336  | Program output: -19.023627    
Correct output: -23.2820697498 | Program output: 32.023627     
Correct output: 120.1004999359 | Program output: 30.023607     
Correct output: -155.453212395 | Program output: -98.023617    
Correct output: 31.10301576    | Program output: 10.023617     
Correct output: 45.5733057121  | Program output: -39.023607    
Correct output: -68.592783645  | Program output: -78.023607    
Correct output: -125.979392023 | Program output: -70.023627    
Correct output: -91.9273649148 | Program output: -71.023617    
Correct output: -92.5660607267 | Program output: -49.023627    
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_dup_items} {:instruction float_add} {:instruction float_yank} {:instruction float_rot} {:instruction print_float} {:instruction 27} {:instruction float_dec} {:instruction tag_float_190} {:instruction float_yankdup} {:instruction float_rot} {:instruction float_dup_times} {:instruction integer_flush} {:instruction float_min} {:instruction integer_fromfloat} {:instruction integer_fromfloat} {:instruction integer_div} {:instruction 27} {:instruction integer_dup_times} {:instruction float_yankdup} {:instruction integer_sub} {:instruction 9} {:instruction float_yankdup} {:instruction integer_stackdepth} {:instruction float_frominteger} {:instruction tag_float_196} {:instruction float_swap} {:instruction float_rot} {:instruction integer_add} {:instruction integer_stackdepth} {:instruction float_mod} {:instruction in2} {:instruction integer_add} {:instruction integer_max} {:instruction float_yank} {:instruction integer_stackdepth} {:instruction float_flush} {:instruction in2} {:instruction float_frominteger} {:instruction print_float} {:instruction integer_dup} {:instruction float_shove} {:instruction float_shove} {:instruction integer_add} {:instruction float_mod} {:instruction integer_dup} {:instruction integer_dup_items} {:instruction print_integer} {:instruction integer_min} {:instruction integer_yank} {:instruction print_integer} {:instruction integer_yank} {:instruction float_min} {:instruction print_integer} {:instruction float_sub} {:instruction print_float} {:instruction float_add} {:instruction in2} {:instruction float_mult} {:instruction integer_yank} {:instruction float_flush} {:instruction float_flush} {:instruction integer_stackdepth} {:instruction float_add} {:instruction in2} {:instruction float_mult} {:instruction integer_stackdepth} {:instruction float_max} {:instruction integer_fromfloat} {:instruction integer_mod} {:instruction print_integer} {:instruction float_min} {:instruction float_pop} {:instruction tag_float_291} {:instruction 6} {:instruction tag_float_172} {:instruction integer_inc} {:instruction float_swap} {:instruction print_integer})
Best program: (float_dup_items float_add float_yank float_rot print_float 27 float_dec tag_float_190 float_yankdup float_rot float_dup_times integer_flush float_min integer_fromfloat integer_fromfloat integer_div 27 integer_dup_times float_yankdup integer_sub 9 float_yankdup integer_stackdepth float_frominteger tag_float_196 float_swap float_rot integer_add integer_stackdepth float_mod in2 integer_add integer_max float_yank integer_stackdepth float_flush in2 float_frominteger print_float integer_dup float_shove float_shove integer_add float_mod integer_dup integer_dup_items print_integer integer_min integer_yank print_integer integer_yank float_min print_integer float_sub print_float float_add in2 float_mult integer_yank float_flush float_flush integer_stackdepth float_add in2 float_mult integer_stackdepth float_max integer_fromfloat integer_mod print_integer float_min float_pop tag_float_291 6 tag_float_172 integer_inc float_swap print_integer)
Errors: [16.5677 9 6.0519 8 10.506 10 63.29 7 46.4786 10 27.3773 7 21.7659 9 62.2423 12 65.7283 10 19.35 7 66.3997 9 44.1628 9 91.2753 9 86.3488 9 73.351 10 39.0737 11 55.3057 9 90.0769 11 57.4296 10 21.0794 7 84.5969 10 9.4308 7 55.9558 10 20.9037 7 43.5424 9]
Total: 1404.2905
Mean: 28.08581
Genome size: 78
Size: 79
Percent parens: 0.013
--- Population Statistics ---
Average total errors in population: 4216.236087700004
Median total errors in population: 1404.2905
Error averages by case: (156.1218072000016 9.488 148.29349530000084 8.676 151.31633319999804 10.242 149.41505679999892 7.675 181.30538160000125 10.42 116.99850049999795 7.627 113.05280349999927 9.511 149.46997330000016 11.837 148.16776770000016 10.161 110.53564090000118 7.768 151.83092379999965 9.416 134.05028650000142 9.299 218.91871700000144 9.552 214.39228620000307 9.548 151.25516339999828 10.274 166.75334289999984 11.254 144.11026309999872 9.546 173.31851109999755 10.977 192.9515521000014 10.442 110.78300330000096 7.329 213.10540260000167 10.496 150.27035920000094 7.766 191.1909248999987 10.231 161.48836169999862 7.866 180.4082299000021 9.331)
Error minima by case: (15.5814 8 5.9781 7 9.5197 8 22.3187 5 24.5214 9 26.3648 6 21.7404 8 7.1934 9 24.2708 8 0.6736 6 3.3706 8 5.885 7 2.2516 7 4.3252 7 16.6481 8 3.0501 9 11.2584 9 13.1005 9 57.3558 9 4.103 6 9.5663 9 8.4446 6 55.882 8 20.83 7 43.4687 8)
Average genome size in population (length): 80.467
Average program size in population (points): 81.467
Average percent parens in population: 0.012
Minimum age in population: 209.7954057809365
Maximum age in population: 214.8742055961092
Average age in population: 213.0610916622844
Median age in population: 213.1297153852229
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 5
Genome diversity (% unique Plush genomes):	 0.873
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 5
Syntactic diversity (% unique Push programs):	 0.873
Total error diversity:				 0.246
Error (vector) diversity:			 0.282
Behavioral diversity:				 0.282
--- Run Statistics ---
Number of program evaluations used so far: 154000
Number of point (instruction) evaluations so far: 337322156
--- Timings ---
Current time: 1529615778995 milliseconds
Total Time:         625.5 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       211.3 seconds, 33.8%
Fitness Testing:    328.7 seconds, 52.5%
Report:              85.4 seconds, 13.6%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 153
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 154
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 154
;;******************************
;; -*- Number IO problem report - generation 154
Test total error for best: 59998.23050000004
Test mean error for best: 29.99912
;;------------------------------
Outputs of best individual on training cases:
Correct output: -57.4559422311 | Program output: -74.023617    
Correct output: -71.0754923621 | Program output: -65.023617    
Correct output: -66.5176295557 | Program output: -77.023617    
Correct output: 149.3187378    | Program output: 86.028727     
Correct output: -36.5450493525 | Program output: -83.023617    
Correct output: 75.4021928097  | Program output: 48.024907     
Correct output: 52.2615929867  | Program output: 74.027527     
Correct output: -19.2178367434 | Program output: 43.024417     
Correct output: 66.7518906772  | Program output: 1.023617      
Correct output: 7.673605441    | Program output: 27.023607     
Correct output: 23.6294031682  | Program output: 90.029107     
Correct output: -6.1389033433  | Program output: 38.023927     
Correct output: 9.2516366816   | Program output: -82.023627    
Correct output: 31.3251776267  | Program output: -55.023627    
Correct output: 73.3746496408  | Program output: 0.023607      
Correct output: 20.0500553336  | Program output: -19.023627    
Correct output: -23.2820697498 | Program output: 32.023627     
Correct output: 120.1004999359 | Program output: 30.023607     
Correct output: -155.453212395 | Program output: -98.023617    
Correct output: 31.10301576    | Program output: 10.023617     
Correct output: 45.5733057121  | Program output: -39.023607    
Correct output: -68.592783645  | Program output: -78.023607    
Correct output: -125.979392023 | Program output: -70.023627    
Correct output: -91.9273649148 | Program output: -71.023617    
Correct output: -92.5660607267 | Program output: -49.023627    
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction print_float} {:instruction print_integer} {:instruction float_min} {:instruction integer_shove} {:instruction integer_div} {:instruction float_min} {:instruction float_cos} {:instruction integer_div} {:instruction 27} {:instruction float_sub} {:instruction float_yankdup} {:instruction integer_div} {:instruction 9} {:instruction float_yankdup} {:instruction integer_stackdepth} {:instruction float_frominteger} {:instruction tag_float_196} {:instruction float_swap} {:instruction float_rot} {:instruction integer_add} {:instruction integer_stackdepth} {:instruction float_add} {:instruction in2} {:instruction float_rot} {:instruction integer_stackdepth} {:instruction float_frominteger} {:instruction tag_float_196} {:instruction float_swap} {:instruction float_rot} {:instruction integer_add} {:instruction integer_max} {:instruction float_max} {:instruction integer_stackdepth} {:instruction float_flush} {:instruction in2} {:instruction float_frominteger} {:instruction print_float} {:instruction integer_dup} {:instruction float_shove} {:instruction float_pop} {:instruction integer_inc} {:instruction float_mod} {:instruction integer_dup} {:instruction float_add} {:instruction print_integer} {:instruction float_dup_times} {:instruction integer_yank} {:instruction print_integer} {:instruction -33.41632300782349} {:instruction integer_fromfloat} {:instruction float_sin} {:instruction float_mult} {:instruction integer_add} {:instruction in2} {:instruction float_mult} {:instruction integer_yank} {:instruction integer_max} {:instruction print_float} {:instruction integer_stackdepth} {:instruction float_add} {:instruction in2} {:instruction float_mult} {:instruction integer_stackdepth} {:instruction float_frominteger} {:instruction integer_fromfloat} {:instruction integer_mod} {:instruction print_integer} {:instruction float_min} {:instruction integer_stackdepth} {:instruction tag_float_291} {:instruction 6} {:instruction tag_float_291} {:instruction integer_inc} {:instruction float_swap} {:instruction print_integer})
Best program: (print_float print_integer float_min integer_shove integer_div float_min float_cos integer_div 27 float_sub float_yankdup integer_div 9 float_yankdup integer_stackdepth float_frominteger tag_float_196 float_swap float_rot integer_add integer_stackdepth float_add in2 float_rot integer_stackdepth float_frominteger tag_float_196 float_swap float_rot integer_add integer_max float_max integer_stackdepth float_flush in2 float_frominteger print_float integer_dup float_shove float_pop integer_inc float_mod integer_dup float_add print_integer float_dup_times integer_yank print_integer -33.41632300782349 integer_fromfloat float_sin float_mult integer_add in2 float_mult integer_yank integer_max print_float integer_stackdepth float_add in2 float_mult integer_stackdepth float_frominteger integer_fromfloat integer_mod print_integer float_min integer_stackdepth tag_float_291 6 tag_float_291 integer_inc float_swap print_integer)
Errors: [16.5677 9 6.0519 8 10.506 10 63.29 7 46.4786 10 27.3773 7 21.7659 9 62.2423 12 65.7283 10 19.35 7 66.3997 9 44.1628 9 91.2753 9 86.3488 9 73.351 10 39.0737 11 55.3057 9 90.0769 11 57.4296 10 21.0794 7 84.5969 10 9.4308 7 55.9558 10 20.9037 7 43.5424 9]
Total: 1404.2905
Mean: 28.08581
Genome size: 75
Size: 76
Percent parens: 0.013
--- Population Statistics ---
Average total errors in population: 4304.487452699999
Median total errors in population: 1404.2905
Error averages by case: (163.06616520000117 9.509 154.55534250000082 8.727 158.24221759999804 10.235 152.79564169999873 7.625 187.5719803000012 10.44 119.24825229999794 7.622 114.92545429999919 9.471 150.19287179999966 11.819 148.2773335000005 10.183 111.22395220000111 7.671 154.7959952999994 9.401 133.80059560000134 9.326 224.0411350000012 9.475 219.53899830000296 9.493 153.35205309999841 10.211 167.39257599999948 11.254 143.92132729999858 9.556 174.54015019999787 11.015 199.31301770000152 10.413 112.55508420000095 7.31 216.7488774000015 10.419 157.2711708000009 7.802 197.25926009999895 10.243 167.33298199999874 7.835 186.1230183000018 9.347)
Error minima by case: (16.5441 8 5.9764 7 10.4824 9 22.3187 6 37.545 8 27.303 6 21.7384 8 20.2178 8 1.0 6 0.6736 6 3.3776 8 7.1571 7 2.2516 7 4.2982 7 0.0 5 3.0501 9 24.3003 8 6.8995 8 57.3539 9 4.086 6 18.5663 9 9.4072 6 55.8798 8 20.8279 6 43.4669 8)
Average genome size in population (length): 79.677
Average program size in population (points): 80.677
Average percent parens in population: 0.013
Minimum age in population: 211.2640889405741
Maximum age in population: 216.7826208866632
Average age in population: 214.4679695564167
Median age in population: 214.5033213606517
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 6
Genome diversity (% unique Plush genomes):	 0.882
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 6
Syntactic diversity (% unique Push programs):	 0.882
Total error diversity:				 0.239
Error (vector) diversity:			 0.28
Behavioral diversity:				 0.281
--- Run Statistics ---
Number of program evaluations used so far: 155000
Number of point (instruction) evaluations so far: 339315256
--- Timings ---
Current time: 1529615782674 milliseconds
Total Time:         629.4 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       212.6 seconds, 33.8%
Fitness Testing:    330.6 seconds, 52.5%
Report:              86.0 seconds, 13.7%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 154
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 155
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 155
;;******************************
;; -*- Number IO problem report - generation 155
Test total error for best: 59998.23050000004
Test mean error for best: 29.99912
;;------------------------------
Outputs of best individual on training cases:
Correct output: -57.4559422311 | Program output: -74.023617    
Correct output: -71.0754923621 | Program output: -65.023617    
Correct output: -66.5176295557 | Program output: -77.023617    
Correct output: 149.3187378    | Program output: 86.028727     
Correct output: -36.5450493525 | Program output: -83.023617    
Correct output: 75.4021928097  | Program output: 48.024907     
Correct output: 52.2615929867  | Program output: 74.027527     
Correct output: -19.2178367434 | Program output: 43.024417     
Correct output: 66.7518906772  | Program output: 1.023617      
Correct output: 7.673605441    | Program output: 27.023607     
Correct output: 23.6294031682  | Program output: 90.029107     
Correct output: -6.1389033433  | Program output: 38.023927     
Correct output: 9.2516366816   | Program output: -82.023627    
Correct output: 31.3251776267  | Program output: -55.023627    
Correct output: 73.3746496408  | Program output: 0.023607      
Correct output: 20.0500553336  | Program output: -19.023627    
Correct output: -23.2820697498 | Program output: 32.023627     
Correct output: 120.1004999359 | Program output: 30.023607     
Correct output: -155.453212395 | Program output: -98.023617    
Correct output: 31.10301576    | Program output: 10.023617     
Correct output: 45.5733057121  | Program output: -39.023607    
Correct output: -68.592783645  | Program output: -78.023607    
Correct output: -125.979392023 | Program output: -70.023627    
Correct output: -91.9273649148 | Program output: -71.023617    
Correct output: -92.5660607267 | Program output: -49.023627    
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_inc} {:instruction float_add} {:instruction float_yank} {:instruction float_dup_times} {:instruction float_dup_times} {:instruction integer_inc} {:instruction integer_pop} {:instruction integer_dup} {:instruction float_min} {:instruction integer_shove} {:instruction float_inc} {:instruction float_yankdup} {:instruction integer_dup} {:instruction float_rot} {:instruction integer_inc} {:instruction float_add} {:instruction float_yank} {:instruction float_div} {:instruction float_yank} {:instruction integer_dup_times} {:instruction float_min} {:instruction integer_div} {:instruction 27} {:instruction integer_mod} {:instruction float_yankdup} {:instruction integer_div} {:instruction 9} {:instruction float_yankdup} {:instruction integer_add} {:instruction integer_stackdepth} {:instruction float_mod} {:instruction in2} {:instruction integer_add} {:instruction integer_max} {:instruction float_yank} {:instruction integer_stackdepth} {:instruction float_frominteger} {:instruction tag_float_196} {:instruction float_swap} {:instruction float_rot} {:instruction integer_add} {:instruction integer_max} {:instruction float_max} {:instruction integer_stackdepth} {:instruction float_flush} {:instruction in2} {:instruction float_frominteger} {:instruction print_float} {:instruction integer_dup} {:instruction float_shove} {:instruction float_mult} {:instruction integer_inc} {:instruction print_integer} {:instruction integer_shove} {:instruction float_min} {:instruction print_integer} {:instruction float_dec} {:instruction integer_dup_times} {:instruction float_add} {:instruction in2} {:instruction integer_dec} {:instruction integer_yank} {:instruction integer_max} {:instruction float_sin} {:instruction float_cos} {:instruction float_dup} {:instruction integer_max} {:instruction integer_stackdepth} {:instruction float_add} {:instruction in2} {:instruction integer_mod} {:instruction float_add} {:instruction in2} {:instruction float_mult} {:instruction integer_stackdepth} {:instruction float_frominteger} {:instruction integer_fromfloat} {:instruction integer_mod} {:instruction print_integer} {:instruction float_min} {:instruction float_mult} {:instruction tag_float_291} {:instruction 6} {:instruction tag_float_291} {:instruction integer_inc} {:instruction float_swap} {:instruction print_integer} {:instruction float_stackdepth} {:instruction integer_stackdepth} {:instruction tag_float_291} {:instruction 8} {:instruction integer_stackdepth})
Best program: (integer_inc float_add float_yank float_dup_times float_dup_times integer_inc integer_pop integer_dup float_min integer_shove float_inc float_yankdup integer_dup float_rot integer_inc float_add float_yank float_div float_yank integer_dup_times float_min integer_div 27 integer_mod float_yankdup integer_div 9 float_yankdup integer_add integer_stackdepth float_mod in2 integer_add integer_max float_yank integer_stackdepth float_frominteger tag_float_196 float_swap float_rot integer_add integer_max float_max integer_stackdepth float_flush in2 float_frominteger print_float integer_dup float_shove float_mult integer_inc print_integer integer_shove float_min print_integer float_dec integer_dup_times float_add in2 integer_dec integer_yank integer_max float_sin float_cos float_dup integer_max integer_stackdepth float_add in2 integer_mod float_add in2 float_mult integer_stackdepth float_frominteger integer_fromfloat integer_mod print_integer float_min float_mult tag_float_291 6 tag_float_291 integer_inc float_swap print_integer float_stackdepth integer_stackdepth tag_float_291 8 integer_stackdepth)
Errors: [16.5677 9 6.0519 8 10.506 10 63.29 7 46.4786 10 27.3773 7 21.7659 9 62.2423 12 65.7283 10 19.35 7 66.3997 9 44.1628 9 91.2753 9 86.3488 9 73.351 10 39.0737 11 55.3057 9 90.0769 11 57.4296 10 21.0794 7 84.5969 10 9.4308 7 55.9558 10 20.9037 7 43.5424 9]
Total: 1404.2905
Mean: 28.08581
Genome size: 92
Size: 93
Percent parens: 0.011
--- Population Statistics ---
Average total errors in population: 4727.934688700005
Median total errors in population: 1404.2905
Error averages by case: (179.34626260000252 9.539 171.30603449999992 8.709 174.8042394999978 10.294 170.7159486000001 7.765 202.91681450000124 10.467 138.06572249999775 7.668 134.11511079999923 9.544 168.45331200000123 11.821 166.3014250999991 10.178 129.77216700000145 7.764 171.4795143000006 9.424 153.44749310000006 9.331 237.0736323000015 9.549 232.89878730000328 9.532 170.95580329999837 10.232 185.02585290000036 11.297 162.45757289999884 9.58 191.35158669999734 11.029 215.21698030000158 10.459 131.91226710000097 7.367 232.53209000000186 10.483 172.85492410000106 7.833 212.29640129999848 10.22 183.88884009999845 7.9 201.37590590000224 9.385)
Error minima by case: (16.5451 8 5.9763 7 10.4834 9 22.3187 6 36.6862 9 26.3322 6 21.7404 8 19.359 8 1.0 6 0.6736 6 3.3706 8 6.28 7 0.2234 7 3.7018 8 0.0 5 3.0501 9 23.4232 8 9.9222 8 57.354 9 3.914 5 9.5033 9 9.4072 6 55.8801 8 20.8282 6 43.4668 8)
Average genome size in population (length): 79.622
Average program size in population (points): 80.622
Average percent parens in population: 0.013
Minimum age in population: 213.2041843890329
Maximum age in population: 217.6818962215864
Average age in population: 215.8585189585726
Median age in population: 215.8465560678817
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 6
Genome diversity (% unique Plush genomes):	 0.861
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 6
Syntactic diversity (% unique Push programs):	 0.861
Total error diversity:				 0.263
Error (vector) diversity:			 0.317
Behavioral diversity:				 0.317
--- Run Statistics ---
Number of program evaluations used so far: 156000
Number of point (instruction) evaluations so far: 341306906
--- Timings ---
Current time: 1529615786577 milliseconds
Total Time:         633.2 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       214.0 seconds, 33.8%
Fitness Testing:    332.6 seconds, 52.5%
Report:              86.4 seconds, 13.7%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 155
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 156
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 156
;;******************************
;; -*- Number IO problem report - generation 156
Test total error for best: 59998.23050000004
Test mean error for best: 29.99912
;;------------------------------
Outputs of best individual on training cases:
Correct output: -57.4559422311 | Program output: -74.023617    
Correct output: -71.0754923621 | Program output: -65.023617    
Correct output: -66.5176295557 | Program output: -77.023617    
Correct output: 149.3187378    | Program output: 86.028727     
Correct output: -36.5450493525 | Program output: -83.023617    
Correct output: 75.4021928097  | Program output: 48.024907     
Correct output: 52.2615929867  | Program output: 74.027527     
Correct output: -19.2178367434 | Program output: 43.024417     
Correct output: 66.7518906772  | Program output: 1.023617      
Correct output: 7.673605441    | Program output: 27.023607     
Correct output: 23.6294031682  | Program output: 90.029107     
Correct output: -6.1389033433  | Program output: 38.023927     
Correct output: 9.2516366816   | Program output: -82.023627    
Correct output: 31.3251776267  | Program output: -55.023627    
Correct output: 73.3746496408  | Program output: 0.023607      
Correct output: 20.0500553336  | Program output: -19.023627    
Correct output: -23.2820697498 | Program output: 32.023627     
Correct output: 120.1004999359 | Program output: 30.023607     
Correct output: -155.453212395 | Program output: -98.023617    
Correct output: 31.10301576    | Program output: 10.023617     
Correct output: 45.5733057121  | Program output: -39.023607    
Correct output: -68.592783645  | Program output: -78.023607    
Correct output: -125.979392023 | Program output: -70.023627    
Correct output: -91.9273649148 | Program output: -71.023617    
Correct output: -92.5660607267 | Program output: -49.023627    
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_dup_times} {:instruction integer_dup} {:instruction float_min} {:instruction float_sub} {:instruction print_integer} {:instruction 27} {:instruction float_sub} {:instruction float_mult} {:instruction float_mult} {:instruction integer_rot} {:instruction integer_sub} {:instruction float_sub} {:instruction integer_dup_items} {:instruction print_float} {:instruction integer_div} {:instruction 27} {:instruction float_sub} {:instruction float_yankdup} {:instruction integer_sub} {:instruction float_yankdup} {:instruction integer_mod} {:instruction 9} {:instruction print_float} {:instruction integer_add} {:instruction integer_stackdepth} {:instruction float_add} {:instruction float_add} {:instruction in2} {:instruction integer_add} {:instruction integer_max} {:instruction integer_add} {:instruction integer_stackdepth} {:instruction float_flush} {:instruction in2} {:instruction float_frominteger} {:instruction print_float} {:instruction integer_dup} {:instruction integer_fromfloat} {:instruction float_shove} {:instruction integer_add} {:instruction integer_rot} {:instruction print_integer} {:instruction integer_shove} {:instruction float_shove} {:instruction float_shove} {:instruction integer_add} {:instruction integer_rot} {:instruction print_integer} {:instruction integer_shove} {:instruction integer_yank} {:instruction float_dec} {:instruction print_integer} {:instruction integer_max} {:instruction integer_max} {:instruction float_mult} {:instruction integer_add} {:instruction float_frominteger} {:instruction in2} {:instruction integer_dup_times} {:instruction integer_yank} {:instruction integer_pop} {:instruction print_integer} {:instruction float_max} {:instruction print_integer} {:instruction print_integer} {:instruction float_swap} {:instruction integer_yank} {:instruction print_integer} {:instruction integer_yank} {:instruction integer_max} {:instruction float_dup_items} {:instruction float_flush} {:instruction integer_stackdepth} {:instruction in2} {:instruction in2} {:instruction float_mult} {:instruction integer_yank} {:instruction integer_max} {:instruction integer_div} {:instruction integer_stackdepth} {:instruction float_add} {:instruction in2} {:instruction float_mult} {:instruction integer_stackdepth} {:instruction float_frominteger} {:instruction integer_fromfloat} {:instruction integer_mod} {:instruction print_integer} {:instruction integer_sub} {:instruction integer_stackdepth} {:instruction tag_float_319} {:instruction 6} {:instruction tag_float_291} {:instruction integer_inc} {:instruction float_swap} {:instruction print_integer})
Best program: (float_dup_times integer_dup float_min float_sub print_integer 27 float_sub float_mult float_mult integer_rot integer_sub float_sub integer_dup_items print_float integer_div 27 float_sub float_yankdup integer_sub float_yankdup integer_mod 9 print_float integer_add integer_stackdepth float_add float_add in2 integer_add integer_max integer_add integer_stackdepth float_flush in2 float_frominteger print_float integer_dup integer_fromfloat float_shove integer_add integer_rot print_integer integer_shove float_shove float_shove integer_add integer_rot print_integer integer_shove integer_yank float_dec print_integer integer_max integer_max float_mult integer_add float_frominteger in2 integer_dup_times integer_yank integer_pop print_integer float_max print_integer print_integer float_swap integer_yank print_integer integer_yank integer_max float_dup_items float_flush integer_stackdepth in2 in2 float_mult integer_yank integer_max integer_div integer_stackdepth float_add in2 float_mult integer_stackdepth float_frominteger integer_fromfloat integer_mod print_integer integer_sub integer_stackdepth tag_float_319 6 tag_float_291 integer_inc float_swap print_integer)
Errors: [16.5677 9 6.0519 8 10.506 10 63.29 7 46.4786 10 27.3773 7 21.7659 9 62.2423 12 65.7283 10 19.35 7 66.3997 9 44.1628 9 91.2753 9 86.3488 9 73.351 10 39.0737 11 55.3057 9 90.0769 11 57.4296 10 21.0794 7 84.5969 10 9.4308 7 55.9558 10 20.9037 7 43.5424 9]
Total: 1404.2905
Mean: 28.08581
Genome size: 96
Size: 97
Percent parens: 0.010
--- Population Statistics ---
Average total errors in population: 4306.8867579
Median total errors in population: 1404.2905
Error averages by case: (166.2344960000022 9.448 158.6596824000002 8.673 161.41130989999763 10.192 150.44454939999937 7.613 190.81497350000126 10.417 116.27355949999783 7.615 112.31639599999912 9.444 147.55370520000022 11.796 140.95556330000053 10.155 107.77628890000113 7.695 150.82211369999985 9.371 132.22911690000174 9.294 227.4427987000015 9.466 223.02950090000323 9.516 146.25514569999837 10.237 170.84785240000002 11.275 141.15457509999862 9.525 171.0868058999977 10.991 203.0375964000016 10.407 109.361035700001 7.331 220.10437530000172 10.448 160.42294150000103 7.756 201.1431953999984 10.232 171.36115399999812 7.81 190.09202620000224 9.349)
Error minima by case: (16.5458 8 6.0028 7 10.4841 9 36.71 6 37.562 9 27.3032 6 21.7411 8 20.2348 9 24.2708 9 0.6736 6 3.3706 8 7.1659 7 2.2516 7 4.3252 7 16.6481 8 3.0501 9 24.3091 9 9.9231 8 57.3805 8 4.103 5 28.5733 9 9.4079 7 55.9067 8 20.8546 6 43.4933 8)
Average genome size in population (length): 79.051
Average program size in population (points): 80.051
Average percent parens in population: 0.013
Minimum age in population: 214.627685821717
Maximum age in population: 219.1437400090284
Average age in population: 217.2664285743026
Median age in population: 217.3175069575342
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 8
Genome diversity (% unique Plush genomes):	 0.854
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 8
Syntactic diversity (% unique Push programs):	 0.854
Total error diversity:				 0.247
Error (vector) diversity:			 0.297
Behavioral diversity:				 0.297
--- Run Statistics ---
Number of program evaluations used so far: 157000
Number of point (instruction) evaluations so far: 343284131
--- Timings ---
Current time: 1529615790244 milliseconds
Total Time:         636.9 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       215.3 seconds, 33.8%
Fitness Testing:    334.5 seconds, 52.5%
Report:              86.9 seconds, 13.7%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 156
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 157
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 157
;;******************************
;; -*- Number IO problem report - generation 157
Test total error for best: 59998.23050000004
Test mean error for best: 29.99912
;;------------------------------
Outputs of best individual on training cases:
Correct output: -57.4559422311 | Program output: -74.023617    
Correct output: -71.0754923621 | Program output: -65.023617    
Correct output: -66.5176295557 | Program output: -77.023617    
Correct output: 149.3187378    | Program output: 86.028727     
Correct output: -36.5450493525 | Program output: -83.023617    
Correct output: 75.4021928097  | Program output: 48.024907     
Correct output: 52.2615929867  | Program output: 74.027527     
Correct output: -19.2178367434 | Program output: 43.024417     
Correct output: 66.7518906772  | Program output: 1.023617      
Correct output: 7.673605441    | Program output: 27.023607     
Correct output: 23.6294031682  | Program output: 90.029107     
Correct output: -6.1389033433  | Program output: 38.023927     
Correct output: 9.2516366816   | Program output: -82.023627    
Correct output: 31.3251776267  | Program output: -55.023627    
Correct output: 73.3746496408  | Program output: 0.023607      
Correct output: 20.0500553336  | Program output: -19.023627    
Correct output: -23.2820697498 | Program output: 32.023627     
Correct output: 120.1004999359 | Program output: 30.023607     
Correct output: -155.453212395 | Program output: -98.023617    
Correct output: 31.10301576    | Program output: 10.023617     
Correct output: 45.5733057121  | Program output: -39.023607    
Correct output: -68.592783645  | Program output: -78.023607    
Correct output: -125.979392023 | Program output: -70.023627    
Correct output: -91.9273649148 | Program output: -71.023617    
Correct output: -92.5660607267 | Program output: -49.023627    
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_dup_items} {:instruction float_add} {:instruction float_yank} {:instruction integer_dup} {:instruction print_float} {:instruction 27} {:instruction float_mult} {:instruction integer_div} {:instruction float_inc} {:instruction float_dup} {:instruction float_mult} {:instruction float_tan} {:instruction 9} {:instruction integer_add} {:instruction integer_stackdepth} {:instruction in1} {:instruction in2} {:instruction tag_float_196} {:instruction float_swap} {:instruction float_rot} {:instruction integer_add} {:instruction integer_max} {:instruction integer_max} {:instruction float_max} {:instruction integer_stackdepth} {:instruction float_min} {:instruction in2} {:instruction float_frominteger} {:instruction print_float} {:instruction integer_dup} {:instruction float_shove} {:instruction float_shove} {:instruction integer_inc} {:instruction float_mod} {:instruction integer_dup} {:instruction integer_dup_items} {:instruction print_integer} {:instruction integer_shove} {:instruction integer_shove} {:instruction print_integer} {:instruction integer_yank} {:instruction float_swap} {:instruction float_mult} {:instruction integer_yank} {:instruction integer_max} {:instruction integer_mult} {:instruction integer_stackdepth} {:instruction float_mod} {:instruction in2} {:instruction float_mult} {:instruction integer_stackdepth} {:instruction float_frominteger} {:instruction integer_fromfloat} {:instruction integer_mod} {:instruction print_integer} {:instruction float_min} {:instruction integer_stackdepth} {:instruction tag_float_291} {:instruction 6} {:instruction tag_float_284} {:instruction integer_inc} {:instruction float_swap} {:instruction print_integer})
Best program: (float_dup_items float_add float_yank integer_dup print_float 27 float_mult integer_div float_inc float_dup float_mult float_tan 9 integer_add integer_stackdepth in1 in2 tag_float_196 float_swap float_rot integer_add integer_max integer_max float_max integer_stackdepth float_min in2 float_frominteger print_float integer_dup float_shove float_shove integer_inc float_mod integer_dup integer_dup_items print_integer integer_shove integer_shove print_integer integer_yank float_swap float_mult integer_yank integer_max integer_mult integer_stackdepth float_mod in2 float_mult integer_stackdepth float_frominteger integer_fromfloat integer_mod print_integer float_min integer_stackdepth tag_float_291 6 tag_float_284 integer_inc float_swap print_integer)
Errors: [16.5677 9 6.0519 8 10.506 10 63.29 7 46.4786 10 27.3773 7 21.7659 9 62.2423 12 65.7283 10 19.35 7 66.3997 9 44.1628 9 91.2753 9 86.3488 9 73.351 10 39.0737 11 55.3057 9 90.0769 11 57.4296 10 21.0794 7 84.5969 10 9.4308 7 55.9558 10 20.9037 7 43.5424 9]
Total: 1404.2905
Mean: 28.08581
Genome size: 63
Size: 64
Percent parens: 0.016
--- Population Statistics ---
Average total errors in population: 4603.112101900002
Median total errors in population: 1404.2905
Error averages by case: (177.7201983000021 9.494 169.37983140000003 8.731 172.89300839999785 10.183 162.24353519999949 7.642 201.71907220000128 10.428 128.64888739999796 7.582 124.69174999999926 9.43 160.0777642000006 11.79 154.42222640000014 10.168 120.90426170000113 7.709 162.86036039999988 9.38 143.98847950000084 9.318 237.62959430000137 9.504 233.4981644000033 9.488 158.55658289999843 10.229 186.21609940000022 11.27 154.03329619999874 9.534 183.9322169999975 11.015 213.10432360000138 10.43 122.362816900001 7.301 232.25517150000172 10.443 171.95484120000103 7.786 211.3192452999987 10.215 181.8656235999985 7.852 200.58675050000215 9.326)
Error minima by case: (16.5442 8 6.0028 6 10.4825 9 22.3187 6 36.5822 9 26.3032 6 21.7387 8 19.263 9 30.7349 9 0.6736 6 3.3706 8 6.1792 7 0.2335 7 2.2666 7 33.6254 9 3.0501 8 23.3193 8 9.9231 9 57.3805 9 2.0444 6 8.5733 9 9.4073 6 55.9067 8 20.8546 6 43.4933 7)
Average genome size in population (length): 79.049
Average program size in population (points): 80.049
Average percent parens in population: 0.013
Minimum age in population: 216.1112416141384
Maximum age in population: 220.5557007400471
Average age in population: 218.6360697944916
Median age in population: 218.6389046937067
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 12
Genome diversity (% unique Plush genomes):	 0.86
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 12
Syntactic diversity (% unique Push programs):	 0.86
Total error diversity:				 0.239
Error (vector) diversity:			 0.288
Behavioral diversity:				 0.288
--- Run Statistics ---
Number of program evaluations used so far: 158000
Number of point (instruction) evaluations so far: 345261156
--- Timings ---
Current time: 1529615794026 milliseconds
Total Time:         640.7 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       216.6 seconds, 33.8%
Fitness Testing:    336.5 seconds, 52.5%
Report:              87.5 seconds, 13.7%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 157
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 158
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 158
;;******************************
;; -*- Number IO problem report - generation 158
Test total error for best: 59998.23050000004
Test mean error for best: 29.99912
;;------------------------------
Outputs of best individual on training cases:
Correct output: -57.4559422311 | Program output: -74.023617    
Correct output: -71.0754923621 | Program output: -65.023617    
Correct output: -66.5176295557 | Program output: -77.023617    
Correct output: 149.3187378    | Program output: 86.028727     
Correct output: -36.5450493525 | Program output: -83.023617    
Correct output: 75.4021928097  | Program output: 48.024907     
Correct output: 52.2615929867  | Program output: 74.027527     
Correct output: -19.2178367434 | Program output: 43.024417     
Correct output: 66.7518906772  | Program output: 1.023617      
Correct output: 7.673605441    | Program output: 27.023607     
Correct output: 23.6294031682  | Program output: 90.029107     
Correct output: -6.1389033433  | Program output: 38.023927     
Correct output: 9.2516366816   | Program output: -82.023627    
Correct output: 31.3251776267  | Program output: -55.023627    
Correct output: 73.3746496408  | Program output: 0.023607      
Correct output: 20.0500553336  | Program output: -19.023627    
Correct output: -23.2820697498 | Program output: 32.023627     
Correct output: 120.1004999359 | Program output: 30.023607     
Correct output: -155.453212395 | Program output: -98.023617    
Correct output: 31.10301576    | Program output: 10.023617     
Correct output: 45.5733057121  | Program output: -39.023607    
Correct output: -68.592783645  | Program output: -78.023607    
Correct output: -125.979392023 | Program output: -70.023627    
Correct output: -91.9273649148 | Program output: -71.023617    
Correct output: -92.5660607267 | Program output: -49.023627    
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_dec} {:instruction float_sub} {:instruction float_mult} {:instruction float_mult} {:instruction float_mult} {:instruction float_mult} {:instruction integer_rot} {:instruction integer_sub} {:instruction float_sub} {:instruction integer_dup_items} {:instruction print_float} {:instruction integer_div} {:instruction 27} {:instruction float_sub} {:instruction float_yankdup} {:instruction integer_sub} {:instruction float_yankdup} {:instruction integer_mod} {:instruction 9} {:instruction print_float} {:instruction integer_add} {:instruction integer_stackdepth} {:instruction float_add} {:instruction float_add} {:instruction in2} {:instruction integer_add} {:instruction integer_max} {:instruction float_max} {:instruction integer_stackdepth} {:instruction float_flush} {:instruction in2} {:instruction float_frominteger} {:instruction print_float} {:instruction integer_dup} {:instruction integer_fromfloat} {:instruction float_shove} {:instruction integer_add} {:instruction integer_rot} {:instruction print_integer} {:instruction integer_shove} {:instruction integer_yank} {:instruction float_dec} {:instruction print_integer} {:instruction integer_max} {:instruction integer_max} {:instruction float_mult} {:instruction integer_add} {:instruction float_frominteger} {:instruction integer_inc} {:instruction integer_yankdup} {:instruction float_swap} {:instruction in2} {:instruction float_mult} {:instruction print_float} {:instruction integer_yank} {:instruction integer_mult} {:instruction integer_stackdepth} {:instruction float_add} {:instruction in2} {:instruction float_mult} {:instruction integer_stackdepth} {:instruction float_frominteger} {:instruction integer_fromfloat} {:instruction integer_mod} {:instruction print_integer} {:instruction float_min} {:instruction integer_stackdepth} {:instruction tag_float_285} {:instruction 6} {:instruction tag_float_291} {:instruction integer_inc} {:instruction float_swap} {:instruction print_integer})
Best program: (integer_dec float_sub float_mult float_mult float_mult float_mult integer_rot integer_sub float_sub integer_dup_items print_float integer_div 27 float_sub float_yankdup integer_sub float_yankdup integer_mod 9 print_float integer_add integer_stackdepth float_add float_add in2 integer_add integer_max float_max integer_stackdepth float_flush in2 float_frominteger print_float integer_dup integer_fromfloat float_shove integer_add integer_rot print_integer integer_shove integer_yank float_dec print_integer integer_max integer_max float_mult integer_add float_frominteger integer_inc integer_yankdup float_swap in2 float_mult print_float integer_yank integer_mult integer_stackdepth float_add in2 float_mult integer_stackdepth float_frominteger integer_fromfloat integer_mod print_integer float_min integer_stackdepth tag_float_285 6 tag_float_291 integer_inc float_swap print_integer)
Errors: [16.5677 9 6.0519 8 10.506 10 63.29 7 46.4786 10 27.3773 7 21.7659 9 62.2423 12 65.7283 10 19.35 7 66.3997 9 44.1628 9 91.2753 9 86.3488 9 73.351 10 39.0737 11 55.3057 9 90.0769 11 57.4296 10 21.0794 7 84.5969 10 9.4308 7 55.9558 10 20.9037 7 43.5424 9]
Total: 1404.2905
Mean: 28.08581
Genome size: 73
Size: 74
Percent parens: 0.014
--- Population Statistics ---
Average total errors in population: 3669.3610112000047
Median total errors in population: 1404.2905
Error averages by case: (139.1511681000003 9.382 130.18103400000152 8.565 133.9924446999983 10.154 123.91245289999836 7.55 164.84486820000117 10.322 89.00463049999902 7.518 84.73685089999925 9.429 122.076840999999 11.807 122.43211270000116 10.171 81.03310420000004 7.61 124.85410239999887 9.296 105.32441580000065 9.254 203.39324170000086 9.422 199.15276100000287 9.484 128.45135989999866 10.211 148.57731549999872 11.215 115.80795829999869 9.473 147.60042149999896 10.943 175.5178883000016 10.321 83.82037140000077 7.266 197.6171703000014 10.418 132.95189040000093 7.633 174.076782399999 10.18 143.25121409999886 7.7 162.99261100000174 9.282)
Error minima by case: (15.5812 8 5.9985 7 9.5195 8 62.2305 6 37.562 8 25.4022 6 21.7411 8 20.2423 8 30.7349 8 0.6736 6 16.6294 8 7.1628 7 8.2143 6 4.3252 7 33.6254 8 6.9499 9 24.2891 9 83.1005 9 57.3762 9 4.914 5 8.5733 9 8.4443 7 55.9024 9 20.8504 6 43.4891 8)
Average genome size in population (length): 78.576
Average program size in population (points): 79.576
Average percent parens in population: 0.013
Minimum age in population: 217.8901750993497
Maximum age in population: 222.0425390777039
Average age in population: 220.0366417224959
Median age in population: 220.0983621966076
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 14
Genome diversity (% unique Plush genomes):	 0.859
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 14
Syntactic diversity (% unique Push programs):	 0.859
Total error diversity:				 0.223
Error (vector) diversity:			 0.258
Behavioral diversity:				 0.258
--- Run Statistics ---
Number of program evaluations used so far: 159000
Number of point (instruction) evaluations so far: 347226456
--- Timings ---
Current time: 1529615797877 milliseconds
Total Time:         644.5 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       218.0 seconds, 33.8%
Fitness Testing:    338.4 seconds, 52.5%
Report:              87.9 seconds, 13.6%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 158
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 159
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 159
;;******************************
;; -*- Number IO problem report - generation 159
Test total error for best: 59998.23050000004
Test mean error for best: 29.99912
;;------------------------------
Outputs of best individual on training cases:
Correct output: -57.4559422311 | Program output: -74.023617    
Correct output: -71.0754923621 | Program output: -65.023617    
Correct output: -66.5176295557 | Program output: -77.023617    
Correct output: 149.3187378    | Program output: 86.028727     
Correct output: -36.5450493525 | Program output: -83.023617    
Correct output: 75.4021928097  | Program output: 48.024907     
Correct output: 52.2615929867  | Program output: 74.027527     
Correct output: -19.2178367434 | Program output: 43.024417     
Correct output: 66.7518906772  | Program output: 1.023617      
Correct output: 7.673605441    | Program output: 27.023607     
Correct output: 23.6294031682  | Program output: 90.029107     
Correct output: -6.1389033433  | Program output: 38.023927     
Correct output: 9.2516366816   | Program output: -82.023627    
Correct output: 31.3251776267  | Program output: -55.023627    
Correct output: 73.3746496408  | Program output: 0.023607      
Correct output: 20.0500553336  | Program output: -19.023627    
Correct output: -23.2820697498 | Program output: 32.023627     
Correct output: 120.1004999359 | Program output: 30.023607     
Correct output: -155.453212395 | Program output: -98.023617    
Correct output: 31.10301576    | Program output: 10.023617     
Correct output: 45.5733057121  | Program output: -39.023607    
Correct output: -68.592783645  | Program output: -78.023607    
Correct output: -125.979392023 | Program output: -70.023627    
Correct output: -91.9273649148 | Program output: -71.023617    
Correct output: -92.5660607267 | Program output: -49.023627    
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_inc} {:instruction float_add} {:instruction float_dup_items} {:instruction integer_dup} {:instruction float_swap} {:instruction float_add} {:instruction float_yank} {:instruction integer_inc} {:instruction float_add} {:instruction integer_dup_items} {:instruction integer_dup} {:instruction integer_dup_items} {:instruction float_yankdup} {:instruction float_cos} {:instruction print_float} {:instruction integer_div} {:instruction float_yank} {:instruction float_sub} {:instruction integer_dup_items} {:instruction float_mult} {:instruction integer_pop} {:instruction integer_dup_items} {:instruction float_yankdup} {:instruction print_float} {:instruction integer_div} {:instruction 27} {:instruction float_sub} {:instruction float_yankdup} {:instruction integer_sub} {:instruction 9} {:instruction float_rot} {:instruction integer_add} {:instruction integer_stackdepth} {:instruction float_mod} {:instruction in2} {:instruction integer_add} {:instruction integer_max} {:instruction float_yank} {:instruction float_cos} {:instruction integer_stackdepth} {:instruction print_float} {:instruction in2} {:instruction float_frominteger} {:instruction print_float} {:instruction integer_dup} {:instruction float_min} {:instruction integer_inc} {:instruction float_mod} {:instruction integer_dup} {:instruction integer_dup_items} {:instruction print_integer} {:instruction integer_yank} {:instruction integer_yank} {:instruction print_integer} {:instruction integer_fromfloat} {:instruction float_tan} {:instruction integer_max} {:instruction integer_fromfloat} {:instruction integer_stackdepth} {:instruction integer_max} {:instruction integer_yank} {:instruction integer_min} {:instruction float_add} {:instruction integer_max} {:instruction integer_yankdup} {:instruction integer_yank} {:instruction float_cos} {:instruction integer_max} {:instruction float_sin} {:instruction integer_stackdepth} {:instruction float_add} {:instruction in2} {:instruction tagged_953} {:instruction integer_stackdepth} {:instruction integer_mod} {:instruction print_integer} {:instruction float_min} {:instruction integer_dup_times} {:instruction tag_float_291} {:instruction 6} {:instruction tag_float_208} {:instruction integer_inc} {:instruction float_dup_times} {:instruction print_integer})
Best program: (integer_inc float_add float_dup_items integer_dup float_swap float_add float_yank integer_inc float_add integer_dup_items integer_dup integer_dup_items float_yankdup float_cos print_float integer_div float_yank float_sub integer_dup_items float_mult integer_pop integer_dup_items float_yankdup print_float integer_div 27 float_sub float_yankdup integer_sub 9 float_rot integer_add integer_stackdepth float_mod in2 integer_add integer_max float_yank float_cos integer_stackdepth print_float in2 float_frominteger print_float integer_dup float_min integer_inc float_mod integer_dup integer_dup_items print_integer integer_yank integer_yank print_integer integer_fromfloat float_tan integer_max integer_fromfloat integer_stackdepth integer_max integer_yank integer_min float_add integer_max integer_yankdup integer_yank float_cos integer_max float_sin integer_stackdepth float_add in2 tagged_953 integer_stackdepth integer_mod print_integer float_min integer_dup_times tag_float_291 6 tag_float_208 integer_inc float_dup_times print_integer)
Errors: [16.5677 9 6.0519 8 10.506 10 63.29 7 46.4786 10 27.3773 7 21.7659 9 62.2423 12 65.7283 10 19.35 7 66.3997 9 44.1628 9 91.2753 9 86.3488 9 73.351 10 39.0737 11 55.3057 9 90.0769 11 57.4296 10 21.0794 7 84.5969 10 9.4308 7 55.9558 10 20.9037 7 43.5424 9]
Total: 1404.2905
Mean: 28.08581
Genome size: 84
Size: 85
Percent parens: 0.012
--- Population Statistics ---
Average total errors in population: 3841.6507984000027
Median total errors in population: 1404.2905
Error averages by case: (146.24742650000078 9.406 137.96898710000144 8.648 141.82605389999785 10.178 131.89913629999796 7.577 171.5378352000012 10.382 98.00456519999828 7.556 92.18063669999917 9.424 127.68929149999899 11.794 129.75148610000122 10.194 89.70881130000073 7.652 132.74242549999855 9.327 111.86845170000119 9.292 208.29877970000084 9.464 203.96765630000317 9.461 134.06429839999853 10.217 150.63661469999892 11.244 122.29814359999853 9.532 155.0284913999986 10.971 183.2854187000015 10.362 91.45387450000088 7.275 203.49121860000164 10.448 140.897795700001 7.742 180.86203949999867 10.184 150.96939839999862 7.77 169.58196190000203 9.29)
Error minima by case: (16.5458 8 5.9827 7 10.4841 9 62.2299 6 37.5822 9 14.1305 6 9.0101 8 17.1942 9 5.4802 9 0.6736 6 3.3706 8 4.1153 7 0.2234 7 4.3252 7 12.103 8 3.0501 9 21.2584 8 58.8288 9 57.3604 9 4.103 5 9.5359 9 9.4079 6 55.8867 9 20.8346 6 43.4733 8)
Average genome size in population (length): 77.846
Average program size in population (points): 78.846
Average percent parens in population: 0.013
Minimum age in population: 219.1074281065841
Maximum age in population: 223.3446726603446
Average age in population: 221.4746387159919
Median age in population: 221.5111614091791
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 14
Genome diversity (% unique Plush genomes):	 0.872
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 14
Syntactic diversity (% unique Push programs):	 0.872
Total error diversity:				 0.234
Error (vector) diversity:			 0.28
Behavioral diversity:				 0.281
--- Run Statistics ---
Number of program evaluations used so far: 160000
Number of point (instruction) evaluations so far: 349173806
--- Timings ---
Current time: 1529615801671 milliseconds
Total Time:         648.3 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       219.3 seconds, 33.8%
Fitness Testing:    340.4 seconds, 52.5%
Report:              88.5 seconds, 13.7%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 159
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 160
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 160
;;******************************
;; -*- Number IO problem report - generation 160
Test total error for best: 59998.23050000004
Test mean error for best: 29.99912
;;------------------------------
Outputs of best individual on training cases:
Correct output: -57.4559422311 | Program output: -74.023617    
Correct output: -71.0754923621 | Program output: -65.023617    
Correct output: -66.5176295557 | Program output: -77.023617    
Correct output: 149.3187378    | Program output: 86.028727     
Correct output: -36.5450493525 | Program output: -83.023617    
Correct output: 75.4021928097  | Program output: 48.024907     
Correct output: 52.2615929867  | Program output: 74.027527     
Correct output: -19.2178367434 | Program output: 43.024417     
Correct output: 66.7518906772  | Program output: 1.023617      
Correct output: 7.673605441    | Program output: 27.023607     
Correct output: 23.6294031682  | Program output: 90.029107     
Correct output: -6.1389033433  | Program output: 38.023927     
Correct output: 9.2516366816   | Program output: -82.023627    
Correct output: 31.3251776267  | Program output: -55.023627    
Correct output: 73.3746496408  | Program output: 0.023607      
Correct output: 20.0500553336  | Program output: -19.023627    
Correct output: -23.2820697498 | Program output: 32.023627     
Correct output: 120.1004999359 | Program output: 30.023607     
Correct output: -155.453212395 | Program output: -98.023617    
Correct output: 31.10301576    | Program output: 10.023617     
Correct output: 45.5733057121  | Program output: -39.023607    
Correct output: -68.592783645  | Program output: -78.023607    
Correct output: -125.979392023 | Program output: -70.023627    
Correct output: -91.9273649148 | Program output: -71.023617    
Correct output: -92.5660607267 | Program output: -49.023627    
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction print_float} {:instruction float_sin} {:instruction float_swap} {:instruction integer_shove} {:instruction integer_div} {:instruction float_min} {:instruction float_cos} {:instruction float_dup_times} {:instruction float_max} {:instruction print_float} {:instruction integer_div} {:instruction 27} {:instruction float_sub} {:instruction float_yankdup} {:instruction float_mod} {:instruction 9} {:instruction tag_float_196} {:instruction float_swap} {:instruction float_sub} {:instruction integer_add} {:instruction integer_stackdepth} {:instruction float_mod} {:instruction in2} {:instruction integer_add} {:instruction integer_max} {:instruction float_yank} {:instruction integer_stackdepth} {:instruction float_flush} {:instruction in2} {:instruction float_frominteger} {:instruction print_float} {:instruction float_shove} {:instruction float_shove} {:instruction float_dup} {:instruction integer_inc} {:instruction float_max} {:instruction print_integer} {:instruction integer_shove} {:instruction integer_yank} {:instruction print_integer} {:instruction integer_yank} {:instruction integer_max} {:instruction integer_stackdepth} {:instruction float_add} {:instruction integer_stackdepth} {:instruction float_sin} {:instruction in2} {:instruction integer_mod} {:instruction print_float} {:instruction in2} {:instruction float_mult} {:instruction integer_stackdepth} {:instruction float_frominteger} {:instruction integer_fromfloat} {:instruction integer_mod} {:instruction print_integer} {:instruction float_sin} {:instruction float_mult} {:instruction tag_float_291} {:instruction 6} {:instruction float_div} {:instruction integer_inc} {:instruction float_swap} {:instruction print_integer} {:instruction float_min} {:instruction integer_stackdepth} {:instruction tag_float_295})
Best program: (print_float float_sin float_swap integer_shove integer_div float_min float_cos float_dup_times float_max print_float integer_div 27 float_sub float_yankdup float_mod 9 tag_float_196 float_swap float_sub integer_add integer_stackdepth float_mod in2 integer_add integer_max float_yank integer_stackdepth float_flush in2 float_frominteger print_float float_shove float_shove float_dup integer_inc float_max print_integer integer_shove integer_yank print_integer integer_yank integer_max integer_stackdepth float_add integer_stackdepth float_sin in2 integer_mod print_float in2 float_mult integer_stackdepth float_frominteger integer_fromfloat integer_mod print_integer float_sin float_mult tag_float_291 6 float_div integer_inc float_swap print_integer float_min integer_stackdepth tag_float_295)
Errors: [16.5677 9 6.0519 8 10.506 10 63.29 7 46.4786 10 27.3773 7 21.7659 9 62.2423 12 65.7283 10 19.35 7 66.3997 9 44.1628 9 91.2753 9 86.3488 9 73.351 10 39.0737 11 55.3057 9 90.0769 11 57.4296 10 21.0794 7 84.5969 10 9.4308 7 55.9558 10 20.9037 7 43.5424 9]
Total: 1404.2905
Mean: 28.08581
Genome size: 67
Size: 68
Percent parens: 0.015
--- Population Statistics ---
Average total errors in population: 4206.5570494
Median total errors in population: 1404.2905
Error averages by case: (161.48443750000192 9.451 153.4563069000001 8.61 157.12617349999744 10.198 146.17165939999865 7.612 186.81755280000124 10.382 112.28804919999807 7.551 107.96152639999924 9.431 144.3595175999998 11.803 140.04468710000066 10.149 103.80843390000106 7.651 146.77896159999938 9.34 127.35623980000139 9.259 223.88117810000165 9.451 219.02461000000338 9.475 144.2431039999986 10.183 167.53019959999997 11.229 137.5780773999986 9.487 168.88295319999798 10.95 197.2614587000016 10.368 106.96022500000097 7.297 216.83053250000188 10.415 155.18455600000115 7.729 196.13621199999832 10.184 166.18087909999826 7.747 183.9715181000024 9.286)
Error minima by case: (16.5458 8 6.0028 7 10.4841 9 57.6813 6 35.5907 9 27.3032 6 21.7411 8 18.2635 8 1.0 6 0.6736 6 3.3706 8 5.1846 7 8.1794 7 4.2969 7 0.0 4 3.0501 8 22.3278 8 30.0 7 57.3805 9 4.0747 5 18.545 8 9.4079 7 55.9067 9 20.8546 6 43.4933 8)
Average genome size in population (length): 77.846
Average program size in population (points): 78.846
Average percent parens in population: 0.013
Minimum age in population: 220.5080495875709
Maximum age in population: 224.9967387683727
Average age in population: 222.8984719441871
Median age in population: 222.9378225455896
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 9
Genome diversity (% unique Plush genomes):	 0.854
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 9
Syntactic diversity (% unique Push programs):	 0.854
Total error diversity:				 0.239
Error (vector) diversity:			 0.282
Behavioral diversity:				 0.282
--- Run Statistics ---
Number of program evaluations used so far: 161000
Number of point (instruction) evaluations so far: 351120831
--- Timings ---
Current time: 1529615805217 milliseconds
Total Time:         651.9 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       220.5 seconds, 33.8%
Fitness Testing:    342.3 seconds, 52.5%
Report:              89.0 seconds, 13.6%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 160
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 161
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 161
;;******************************
;; -*- Number IO problem report - generation 161
Test total error for best: 59998.23050000004
Test mean error for best: 29.99912
;;------------------------------
Outputs of best individual on training cases:
Correct output: -57.4559422311 | Program output: -74.023617    
Correct output: -71.0754923621 | Program output: -65.023617    
Correct output: -66.5176295557 | Program output: -77.023617    
Correct output: 149.3187378    | Program output: 86.028727     
Correct output: -36.5450493525 | Program output: -83.023617    
Correct output: 75.4021928097  | Program output: 48.024907     
Correct output: 52.2615929867  | Program output: 74.027527     
Correct output: -19.2178367434 | Program output: 43.024417     
Correct output: 66.7518906772  | Program output: 1.023617      
Correct output: 7.673605441    | Program output: 27.023607     
Correct output: 23.6294031682  | Program output: 90.029107     
Correct output: -6.1389033433  | Program output: 38.023927     
Correct output: 9.2516366816   | Program output: -82.023627    
Correct output: 31.3251776267  | Program output: -55.023627    
Correct output: 73.3746496408  | Program output: 0.023607      
Correct output: 20.0500553336  | Program output: -19.023627    
Correct output: -23.2820697498 | Program output: 32.023627     
Correct output: 120.1004999359 | Program output: 30.023607     
Correct output: -155.453212395 | Program output: -98.023617    
Correct output: 31.10301576    | Program output: 10.023617     
Correct output: 45.5733057121  | Program output: -39.023607    
Correct output: -68.592783645  | Program output: -78.023607    
Correct output: -125.979392023 | Program output: -70.023627    
Correct output: -91.9273649148 | Program output: -71.023617    
Correct output: -92.5660607267 | Program output: -49.023627    
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_min} {:instruction float_rot} {:instruction integer_dup} {:instruction float_rot} {:instruction integer_mod} {:instruction 27} {:instruction float_sub} {:instruction float_div} {:instruction integer_min} {:instruction 9} {:instruction float_rot} {:instruction integer_add} {:instruction integer_stackdepth} {:instruction float_mod} {:instruction in2} {:instruction integer_add} {:instruction integer_max} {:instruction float_yank} {:instruction integer_stackdepth} {:instruction float_yankdup} {:instruction in2} {:instruction float_frominteger} {:instruction print_float} {:instruction integer_dup} {:instruction float_shove} {:instruction float_shove} {:instruction integer_add} {:instruction float_sub} {:instruction integer_dup} {:instruction integer_dup_items} {:instruction print_integer} {:instruction integer_min} {:instruction integer_yank} {:instruction float_dup} {:instruction integer_yank} {:instruction print_integer} {:instruction integer_max} {:instruction integer_yank} {:instruction integer_add} {:instruction float_inc} {:instruction integer_dup} {:instruction integer_dup_items} {:instruction print_integer} {:instruction tag_integer_480} {:instruction integer_yank} {:instruction print_integer} {:instruction integer_yank} {:instruction integer_max} {:instruction integer_stackdepth} {:instruction integer_stackdepth} {:instruction integer_yank} {:instruction integer_max} {:instruction integer_stackdepth} {:instruction float_add} {:instruction integer_max} {:instruction float_mult} {:instruction integer_yank} {:instruction float_cos} {:instruction integer_max} {:instruction float_sin} {:instruction integer_stackdepth} {:instruction float_add} {:instruction in2} {:instruction float_mod} {:instruction integer_stackdepth} {:instruction integer_mod} {:instruction print_integer} {:instruction float_min} {:instruction integer_stackdepth} {:instruction tag_float_291} {:instruction 6} {:instruction float_max} {:instruction integer_inc} {:instruction float_swap} {:instruction print_integer})
Best program: (float_min float_rot integer_dup float_rot integer_mod 27 float_sub float_div integer_min 9 float_rot integer_add integer_stackdepth float_mod in2 integer_add integer_max float_yank integer_stackdepth float_yankdup in2 float_frominteger print_float integer_dup float_shove float_shove integer_add float_sub integer_dup integer_dup_items print_integer integer_min integer_yank float_dup integer_yank print_integer integer_max integer_yank integer_add float_inc integer_dup integer_dup_items print_integer tag_integer_480 integer_yank print_integer integer_yank integer_max integer_stackdepth integer_stackdepth integer_yank integer_max integer_stackdepth float_add integer_max float_mult integer_yank float_cos integer_max float_sin integer_stackdepth float_add in2 float_mod integer_stackdepth integer_mod print_integer float_min integer_stackdepth tag_float_291 6 float_max integer_inc float_swap print_integer)
Errors: [16.5677 9 6.0519 8 10.506 10 63.29 7 46.4786 10 27.3773 7 21.7659 9 62.2423 12 65.7283 10 19.35 7 66.3997 9 44.1628 9 91.2753 9 86.3488 9 73.351 10 39.0737 11 55.3057 9 90.0769 11 57.4296 10 21.0794 7 84.5969 10 9.4308 7 55.9558 10 20.9037 7 43.5424 9]
Total: 1404.2905
Mean: 28.08581
Genome size: 75
Size: 76
Percent parens: 0.013
--- Population Statistics ---
Average total errors in population: 4348.875898500002
Median total errors in population: 1404.2905
Error averages by case: (161.89507750000132 9.489 154.51442760000072 8.729 157.1413125999979 10.226 155.40084039999888 7.699 186.18924420000133 10.41 122.7592744999978 7.645 118.37021039999911 9.461 154.1376842000001 11.838 152.1411222000002 10.183 115.80542760000111 7.73 157.4041389999996 9.408 137.9489884000013 9.325 222.53108550000138 9.57 218.40913790000317 9.518 157.8555518999982 10.264 172.35517469999945 11.262 148.05276979999866 9.582 178.44817229999774 11.014 199.11170800000147 10.442 117.27936470000094 7.347 217.31606360000163 10.486 156.166679100001 7.82 197.24459959999876 10.24 167.28691529999847 7.888 186.2019275000021 9.333)
Error minima by case: (16.5442 8 5.0755 7 10.4825 9 36.6987 6 37.545 8 26.3952 6 5.2616 8 20.2178 8 24.2732 8 0.6736 7 3.3706 8 7.176 7 7.2246 7 4.2982 7 16.6505 8 1.9499 8 24.3164 8 9.9716 9 56.4532 9 4.086 5 9.5663 9 9.4073 5 54.9794 9 19.9274 6 42.5661 8)
Average genome size in population (length): 78.226
Average program size in population (points): 79.226
Average percent parens in population: 0.013
Minimum age in population: 221.7060634990894
Maximum age in population: 225.9274980389456
Average age in population: 224.2753234699612
Median age in population: 224.3045049209474
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 7
Genome diversity (% unique Plush genomes):	 0.885
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 7
Syntactic diversity (% unique Push programs):	 0.885
Total error diversity:				 0.248
Error (vector) diversity:			 0.298
Behavioral diversity:				 0.298
--- Run Statistics ---
Number of program evaluations used so far: 162000
Number of point (instruction) evaluations so far: 353077806
--- Timings ---
Current time: 1529615809069 milliseconds
Total Time:         655.6 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       221.9 seconds, 33.8%
Fitness Testing:    344.2 seconds, 52.5%
Report:              89.4 seconds, 13.6%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 161
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 162
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 162
;;******************************
;; -*- Number IO problem report - generation 162
Test total error for best: 59998.23050000004
Test mean error for best: 29.99912
;;------------------------------
Outputs of best individual on training cases:
Correct output: -57.4559422311 | Program output: -74.023617    
Correct output: -71.0754923621 | Program output: -65.023617    
Correct output: -66.5176295557 | Program output: -77.023617    
Correct output: 149.3187378    | Program output: 86.028727     
Correct output: -36.5450493525 | Program output: -83.023617    
Correct output: 75.4021928097  | Program output: 48.024907     
Correct output: 52.2615929867  | Program output: 74.027527     
Correct output: -19.2178367434 | Program output: 43.024417     
Correct output: 66.7518906772  | Program output: 1.023617      
Correct output: 7.673605441    | Program output: 27.023607     
Correct output: 23.6294031682  | Program output: 90.029107     
Correct output: -6.1389033433  | Program output: 38.023927     
Correct output: 9.2516366816   | Program output: -82.023627    
Correct output: 31.3251776267  | Program output: -55.023627    
Correct output: 73.3746496408  | Program output: 0.023607      
Correct output: 20.0500553336  | Program output: -19.023627    
Correct output: -23.2820697498 | Program output: 32.023627     
Correct output: 120.1004999359 | Program output: 30.023607     
Correct output: -155.453212395 | Program output: -98.023617    
Correct output: 31.10301576    | Program output: 10.023617     
Correct output: 45.5733057121  | Program output: -39.023607    
Correct output: -68.592783645  | Program output: -78.023607    
Correct output: -125.979392023 | Program output: -70.023627    
Correct output: -91.9273649148 | Program output: -71.023617    
Correct output: -92.5660607267 | Program output: -49.023627    
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_dup_items} {:instruction float_add} {:instruction float_yank} {:instruction integer_dup} {:instruction print_float} {:instruction float_cos} {:instruction float_min} {:instruction integer_dec} {:instruction float_shove} {:instruction float_dup_times} {:instruction float_rot} {:instruction print_integer} {:instruction float_min} {:instruction integer_flush} {:instruction float_mult} {:instruction integer_rot} {:instruction float_add} {:instruction float_mult} {:instruction float_div} {:instruction float_min} {:instruction float_dup_times} {:instruction integer_min} {:instruction integer_shove} {:instruction integer_flush} {:instruction float_rot} {:instruction float_dup_times} {:instruction float_rot} {:instruction print_integer} {:instruction float_min} {:instruction print_float} {:instruction integer_add} {:instruction 27} {:instruction float_sub} {:instruction float_yankdup} {:instruction integer_yank} {:instruction 9} {:instruction integer_add} {:instruction integer_stackdepth} {:instruction float_add} {:instruction in2} {:instruction tag_float_196} {:instruction float_swap} {:instruction float_rot} {:instruction integer_add} {:instruction integer_max} {:instruction integer_max} {:instruction integer_stackdepth} {:instruction float_flush} {:instruction in2} {:instruction float_frominteger} {:instruction print_float} {:instruction integer_dup} {:instruction float_dup} {:instruction float_shove} {:instruction integer_inc} {:instruction print_integer} {:instruction integer_shove} {:instruction float_flush} {:instruction print_integer} {:instruction integer_yank} {:instruction float_mult} {:instruction float_cos} {:instruction in2} {:instruction float_mult} {:instruction integer_yank} {:instruction integer_max} {:instruction float_sin} {:instruction integer_stackdepth} {:instruction float_min} {:instruction in2} {:instruction float_mult} {:instruction integer_stackdepth} {:instruction float_frominteger} {:instruction integer_fromfloat} {:instruction integer_mod} {:instruction print_integer} {:instruction float_min} {:instruction integer_stackdepth} {:instruction tag_float_255} {:instruction 6} {:instruction float_flush} {:instruction integer_inc} {:instruction tag_float_291} {:instruction 7} {:instruction float_swap} {:instruction print_integer})
Best program: (float_dup_items float_add float_yank integer_dup print_float float_cos float_min integer_dec float_shove float_dup_times float_rot print_integer float_min integer_flush float_mult integer_rot float_add float_mult float_div float_min float_dup_times integer_min integer_shove integer_flush float_rot float_dup_times float_rot print_integer float_min print_float integer_add 27 float_sub float_yankdup integer_yank 9 integer_add integer_stackdepth float_add in2 tag_float_196 float_swap float_rot integer_add integer_max integer_max integer_stackdepth float_flush in2 float_frominteger print_float integer_dup float_dup float_shove integer_inc print_integer integer_shove float_flush print_integer integer_yank float_mult float_cos in2 float_mult integer_yank integer_max float_sin integer_stackdepth float_min in2 float_mult integer_stackdepth float_frominteger integer_fromfloat integer_mod print_integer float_min integer_stackdepth tag_float_255 6 float_flush integer_inc tag_float_291 7 float_swap print_integer)
Errors: [16.5677 9 6.0519 8 10.506 10 63.29 7 46.4786 10 27.3773 7 21.7659 9 62.2423 12 65.7283 10 19.35 7 66.3997 9 44.1628 9 91.2753 9 86.3488 9 73.351 10 39.0737 11 55.3057 9 90.0769 11 57.4296 10 21.0794 7 84.5969 10 9.4308 7 55.9558 10 20.9037 7 43.5424 9]
Total: 1404.2905
Mean: 28.08581
Genome size: 86
Size: 87
Percent parens: 0.011
--- Population Statistics ---
Average total errors in population: 4217.008703600004
Median total errors in population: 1404.2905
Error averages by case: (158.70599570000132 9.487 150.27235430000067 8.674 153.90013189999772 10.211 151.2776279999989 7.641 183.0999664000012 10.419 117.14582149999782 7.609 113.1507361999992 9.437 148.82676160000028 11.861 142.6640000000003 10.182 109.18924430000118 7.686 151.62671599999962 9.379 132.5505490000015 9.333 219.47226290000148 9.499 215.3470611000032 9.478 144.35459099999838 10.221 161.54952799999944 11.271 142.76615669999876 9.542 173.07813269999795 11.016 195.22123200000144 10.427 111.80566320000096 7.331 213.15318320000162 10.43 152.955254800001 7.804 193.29870319999853 10.224 163.20006419999834 7.825 182.1119657000022 9.298)
Error minima by case: (16.5458 8 5.5901 7 10.1479 8 22.3187 6 37.562 9 25.3952 6 5.2616 8 20.2348 9 24.2717 8 0.6736 6 12.4406 7 7.1659 8 0.1794 7 4.3252 7 16.649 7 3.0501 10 24.3091 8 13.1005 9 57.3705 9 4.914 5 8.5663 9 8.0728 6 49.3138 9 15.2618 6 15.9005 7)
Average genome size in population (length): 78.483
Average program size in population (points): 79.483
Average percent parens in population: 0.013
Minimum age in population: 222.7060634990894
Maximum age in population: 227.7617882951059
Average age in population: 225.6813932865801
Median age in population: 225.7226889651244
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 7
Genome diversity (% unique Plush genomes):	 0.877
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 7
Syntactic diversity (% unique Push programs):	 0.877
Total error diversity:				 0.252
Error (vector) diversity:			 0.293
Behavioral diversity:				 0.293
--- Run Statistics ---
Number of program evaluations used so far: 163000
Number of point (instruction) evaluations so far: 355041316
--- Timings ---
Current time: 1529615812800 milliseconds
Total Time:         659.5 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       223.2 seconds, 33.8%
Fitness Testing:    346.2 seconds, 52.5%
Report:              90.0 seconds, 13.6%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 162
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 163
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 163
;;******************************
;; -*- Number IO problem report - generation 163
Test total error for best: 59998.23050000004
Test mean error for best: 29.99912
;;------------------------------
Outputs of best individual on training cases:
Correct output: -57.4559422311 | Program output: -74.023617    
Correct output: -71.0754923621 | Program output: -65.023617    
Correct output: -66.5176295557 | Program output: -77.023617    
Correct output: 149.3187378    | Program output: 86.028727     
Correct output: -36.5450493525 | Program output: -83.023617    
Correct output: 75.4021928097  | Program output: 48.024907     
Correct output: 52.2615929867  | Program output: 74.027527     
Correct output: -19.2178367434 | Program output: 43.024417     
Correct output: 66.7518906772  | Program output: 1.023617      
Correct output: 7.673605441    | Program output: 27.023607     
Correct output: 23.6294031682  | Program output: 90.029107     
Correct output: -6.1389033433  | Program output: 38.023927     
Correct output: 9.2516366816   | Program output: -82.023627    
Correct output: 31.3251776267  | Program output: -55.023627    
Correct output: 73.3746496408  | Program output: 0.023607      
Correct output: 20.0500553336  | Program output: -19.023627    
Correct output: -23.2820697498 | Program output: 32.023627     
Correct output: 120.1004999359 | Program output: 30.023607     
Correct output: -155.453212395 | Program output: -98.023617    
Correct output: 31.10301576    | Program output: 10.023617     
Correct output: 45.5733057121  | Program output: -39.023607    
Correct output: -68.592783645  | Program output: -78.023607    
Correct output: -125.979392023 | Program output: -70.023627    
Correct output: -91.9273649148 | Program output: -71.023617    
Correct output: -92.5660607267 | Program output: -49.023627    
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_swap} {:instruction float_dup_times} {:instruction float_dup_times} {:instruction integer_sub} {:instruction float_inc} {:instruction float_yank} {:instruction integer_dup_times} {:instruction float_mult} {:instruction integer_rot} {:instruction float_add} {:instruction float_add} {:instruction float_yank} {:instruction float_inc} {:instruction float_dup_times} {:instruction integer_inc} {:instruction float_add} {:instruction float_yank} {:instruction integer_dup_times} {:instruction float_min} {:instruction integer_div} {:instruction 27} {:instruction integer_mod} {:instruction float_yankdup} {:instruction integer_div} {:instruction 9} {:instruction float_yankdup} {:instruction float_swap} {:instruction integer_yank} {:instruction 9} {:instruction integer_add} {:instruction integer_stackdepth} {:instruction float_add} {:instruction in2} {:instruction tag_float_196} {:instruction float_swap} {:instruction float_rot} {:instruction float_yank} {:instruction integer_stackdepth} {:instruction float_frominteger} {:instruction tag_float_196} {:instruction float_swap} {:instruction float_rot} {:instruction integer_add} {:instruction integer_max} {:instruction float_max} {:instruction integer_stackdepth} {:instruction float_flush} {:instruction in2} {:instruction float_frominteger} {:instruction print_float} {:instruction integer_dup} {:instruction float_shove} {:instruction float_mult} {:instruction integer_inc} {:instruction print_integer} {:instruction integer_shove} {:instruction float_min} {:instruction print_integer} {:instruction float_max} {:instruction float_add} {:instruction float_add} {:instruction in2} {:instruction integer_dec} {:instruction integer_yank} {:instruction integer_max} {:instruction float_sin} {:instruction float_cos} {:instruction integer_yank} {:instruction integer_max} {:instruction integer_stackdepth} {:instruction float_add} {:instruction in2} {:instruction integer_mod} {:instruction float_add} {:instruction in2} {:instruction float_mult} {:instruction integer_stackdepth} {:instruction float_frominteger} {:instruction integer_fromfloat} {:instruction integer_mod} {:instruction print_integer} {:instruction tag_float_386} {:instruction 6} {:instruction tag_float_291} {:instruction integer_inc} {:instruction float_dec} {:instruction print_integer})
Best program: (integer_swap float_dup_times float_dup_times integer_sub float_inc float_yank integer_dup_times float_mult integer_rot float_add float_add float_yank float_inc float_dup_times integer_inc float_add float_yank integer_dup_times float_min integer_div 27 integer_mod float_yankdup integer_div 9 float_yankdup float_swap integer_yank 9 integer_add integer_stackdepth float_add in2 tag_float_196 float_swap float_rot float_yank integer_stackdepth float_frominteger tag_float_196 float_swap float_rot integer_add integer_max float_max integer_stackdepth float_flush in2 float_frominteger print_float integer_dup float_shove float_mult integer_inc print_integer integer_shove float_min print_integer float_max float_add float_add in2 integer_dec integer_yank integer_max float_sin float_cos integer_yank integer_max integer_stackdepth float_add in2 integer_mod float_add in2 float_mult integer_stackdepth float_frominteger integer_fromfloat integer_mod print_integer tag_float_386 6 tag_float_291 integer_inc float_dec print_integer)
Errors: [16.5677 9 6.0519 8 10.506 10 63.29 7 46.4786 10 27.3773 7 21.7659 9 62.2423 12 65.7283 10 19.35 7 66.3997 9 44.1628 9 91.2753 9 86.3488 9 73.351 10 39.0737 11 55.3057 9 90.0769 11 57.4296 10 21.0794 7 84.5969 10 9.4308 7 55.9558 10 20.9037 7 43.5424 9]
Total: 1404.2905
Mean: 28.08581
Genome size: 87
Size: 88
Percent parens: 0.011
--- Population Statistics ---
Average total errors in population: 4889.309941500002
Median total errors in population: 1404.2905
Error averages by case: (192.05890240000303 9.513 183.83711279999932 8.725 187.36540639999748 10.212 170.32340230000003 7.728 215.76976680000126 10.448 138.21611249999717 7.624 133.0289723999992 9.456 168.29007150000146 11.829 161.39095199999926 10.166 131.26291150000202 7.71 171.5954735000006 9.39 153.3262951000005 9.352 251.1503032000018 9.564 247.08554610000326 9.505 169.65461709999818 10.219 194.85123450000066 11.286 163.3038149999988 9.575 193.86425319999674 11.014 226.62520260000161 10.47 131.43463670000102 7.336 245.96949510000175 10.459 186.45803610000107 7.832 224.9871005999985 10.255 196.12447909999833 7.881 214.43384300000233 9.353)
Error minima by case: (16.5441 8 6.0028 7 10.4824 9 22.3187 6 37.5824 9 26.3952 6 21.7384 7 20.2458 9 24.2703 8 0.6736 6 3.3706 8 7.1663 8 2.2516 7 4.3252 7 16.6464 8 3.0501 9 24.3089 9 13.1005 8 4.5638 9 4.103 5 9.5563 9 9.4072 6 21.9524 9 14.0896 6 30.5391 8)
Average genome size in population (length): 78.058
Average program size in population (points): 79.058
Average percent parens in population: 0.013
Minimum age in population: 223.7060634990894
Maximum age in population: 229.170784662277
Average age in population: 227.0643570091392
Median age in population: 227.1019247605375
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 6
Genome diversity (% unique Plush genomes):	 0.879
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 6
Syntactic diversity (% unique Push programs):	 0.879
Total error diversity:				 0.24
Error (vector) diversity:			 0.3
Behavioral diversity:				 0.3
--- Run Statistics ---
Number of program evaluations used so far: 164000
Number of point (instruction) evaluations so far: 356994241
--- Timings ---
Current time: 1529615816628 milliseconds
Total Time:         663.3 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       224.5 seconds, 33.8%
Fitness Testing:    348.2 seconds, 52.5%
Report:              90.5 seconds, 13.6%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 163
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 164
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 164
;;******************************
;; -*- Number IO problem report - generation 164
Test total error for best: 59998.23050000004
Test mean error for best: 29.99912
;;------------------------------
Outputs of best individual on training cases:
Correct output: -57.4559422311 | Program output: -74.023617    
Correct output: -71.0754923621 | Program output: -65.023617    
Correct output: -66.5176295557 | Program output: -77.023617    
Correct output: 149.3187378    | Program output: 86.028727     
Correct output: -36.5450493525 | Program output: -83.023617    
Correct output: 75.4021928097  | Program output: 48.024907     
Correct output: 52.2615929867  | Program output: 74.027527     
Correct output: -19.2178367434 | Program output: 43.024417     
Correct output: 66.7518906772  | Program output: 1.023617      
Correct output: 7.673605441    | Program output: 27.023607     
Correct output: 23.6294031682  | Program output: 90.029107     
Correct output: -6.1389033433  | Program output: 38.023927     
Correct output: 9.2516366816   | Program output: -82.023627    
Correct output: 31.3251776267  | Program output: -55.023627    
Correct output: 73.3746496408  | Program output: 0.023607      
Correct output: 20.0500553336  | Program output: -19.023627    
Correct output: -23.2820697498 | Program output: 32.023627     
Correct output: 120.1004999359 | Program output: 30.023607     
Correct output: -155.453212395 | Program output: -98.023617    
Correct output: 31.10301576    | Program output: 10.023617     
Correct output: 45.5733057121  | Program output: -39.023607    
Correct output: -68.592783645  | Program output: -78.023607    
Correct output: -125.979392023 | Program output: -70.023627    
Correct output: -91.9273649148 | Program output: -71.023617    
Correct output: -92.5660607267 | Program output: -49.023627    
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_dup_times} {:instruction integer_dup} {:instruction float_min} {:instruction float_sub} {:instruction integer_div} {:instruction 27} {:instruction float_sub} {:instruction integer_inc} {:instruction float_mult} {:instruction float_mult} {:instruction float_mult} {:instruction integer_rot} {:instruction integer_sub} {:instruction float_sub} {:instruction integer_dup_items} {:instruction print_float} {:instruction integer_div} {:instruction 27} {:instruction float_sub} {:instruction float_yankdup} {:instruction integer_sub} {:instruction float_yankdup} {:instruction integer_mod} {:instruction 9} {:instruction print_float} {:instruction integer_add} {:instruction integer_stackdepth} {:instruction float_add} {:instruction float_add} {:instruction in2} {:instruction integer_add} {:instruction integer_max} {:instruction float_max} {:instruction integer_stackdepth} {:instruction float_flush} {:instruction in2} {:instruction float_frominteger} {:instruction print_float} {:instruction integer_dup} {:instruction integer_fromfloat} {:instruction float_shove} {:instruction integer_add} {:instruction integer_rot} {:instruction print_integer} {:instruction integer_shove} {:instruction integer_yank} {:instruction float_dec} {:instruction print_integer} {:instruction integer_max} {:instruction integer_max} {:instruction float_mult} {:instruction integer_sub} {:instruction float_frominteger} {:instruction float_max} {:instruction integer_yankdup} {:instruction integer_yank} {:instruction in2} {:instruction float_mult} {:instruction integer_stackdepth} {:instruction integer_max} {:instruction integer_yank} {:instruction integer_stackdepth} {:instruction float_mult} {:instruction integer_max} {:instruction integer_yankdup} {:instruction integer_yank} {:instruction float_cos} {:instruction integer_max} {:instruction float_sin} {:instruction integer_stackdepth} {:instruction float_add} {:instruction in2} {:instruction tagged_953} {:instruction integer_stackdepth} {:instruction integer_mod} {:instruction print_integer} {:instruction float_min} {:instruction integer_dup_times} {:instruction tag_float_291} {:instruction 6} {:instruction integer_inc} {:instruction float_swap} {:instruction print_integer})
Best program: (float_dup_times integer_dup float_min float_sub integer_div 27 float_sub integer_inc float_mult float_mult float_mult integer_rot integer_sub float_sub integer_dup_items print_float integer_div 27 float_sub float_yankdup integer_sub float_yankdup integer_mod 9 print_float integer_add integer_stackdepth float_add float_add in2 integer_add integer_max float_max integer_stackdepth float_flush in2 float_frominteger print_float integer_dup integer_fromfloat float_shove integer_add integer_rot print_integer integer_shove integer_yank float_dec print_integer integer_max integer_max float_mult integer_sub float_frominteger float_max integer_yankdup integer_yank in2 float_mult integer_stackdepth integer_max integer_yank integer_stackdepth float_mult integer_max integer_yankdup integer_yank float_cos integer_max float_sin integer_stackdepth float_add in2 tagged_953 integer_stackdepth integer_mod print_integer float_min integer_dup_times tag_float_291 6 integer_inc float_swap print_integer)
Errors: [16.5677 9 6.0519 8 10.506 10 63.29 7 46.4786 10 27.3773 7 21.7659 9 62.2423 12 65.7283 10 19.35 7 66.3997 9 44.1628 9 91.2753 9 86.3488 9 73.351 10 39.0737 11 55.3057 9 90.0769 11 57.4296 10 21.0794 7 84.5969 10 9.4308 7 55.9558 10 20.9037 7 43.5424 9]
Total: 1404.2905
Mean: 28.08581
Genome size: 83
Size: 84
Percent parens: 0.012
--- Population Statistics ---
Average total errors in population: 4417.833754500002
Median total errors in population: 1404.2905
Error averages by case: (173.030847700002 9.528 164.86021270000037 8.73 168.36831159999784 10.24 151.3347458999993 7.666 196.84260200000125 10.434 117.91230289999773 7.622 112.7908317999992 9.483 148.41649370000036 11.826 145.22921670000002 10.177 110.89014340000152 7.706 152.02731109999985 9.389 132.19433940000164 9.345 232.4320197000016 9.499 228.330480200003 9.532 151.14458039999835 10.231 180.11202050000017 11.282 143.32839679999876 9.563 174.67918249999738 10.998 209.04450250000147 10.433 112.45467830000086 7.332 227.2408328000016 10.476 167.49787150000103 7.848 207.16711819999867 10.245 177.51419329999834 7.877 196.15551890000214 9.373)
Error minima by case: (16.5441 7 5.9846 7 10.4824 8 22.3187 6 11.5214 9 26.3952 6 16.2616 8 5.8066 9 30.7349 8 0.6736 7 3.3706 7 6.1628 7 0.1974 7 4.3252 7 33.6254 8 3.0501 9 1.7415 8 13.1005 9 57.3623 9 4.103 5 9.5663 9 9.4072 6 55.8885 8 20.8365 6 43.4752 8)
Average genome size in population (length): 78.017
Average program size in population (points): 79.017
Average percent parens in population: 0.013
Minimum age in population: 225.7172886926491
Maximum age in population: 230.2466653699392
Average age in population: 228.4157399966888
Median age in population: 228.4494324912669
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 7
Genome diversity (% unique Plush genomes):	 0.885
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 7
Syntactic diversity (% unique Push programs):	 0.885
Total error diversity:				 0.252
Error (vector) diversity:			 0.304
Behavioral diversity:				 0.304
--- Run Statistics ---
Number of program evaluations used so far: 165000
Number of point (instruction) evaluations so far: 358945816
--- Timings ---
Current time: 1529615820289 milliseconds
Total Time:         666.9 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       225.8 seconds, 33.9%
Fitness Testing:    350.1 seconds, 52.5%
Report:              91.0 seconds, 13.6%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 164
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 165
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 165
;;******************************
;; -*- Number IO problem report - generation 165
Test total error for best: 59998.23050000004
Test mean error for best: 29.99912
;;------------------------------
Outputs of best individual on training cases:
Correct output: -57.4559422311 | Program output: -74.023617    
Correct output: -71.0754923621 | Program output: -65.023617    
Correct output: -66.5176295557 | Program output: -77.023617    
Correct output: 149.3187378    | Program output: 86.028727     
Correct output: -36.5450493525 | Program output: -83.023617    
Correct output: 75.4021928097  | Program output: 48.024907     
Correct output: 52.2615929867  | Program output: 74.027527     
Correct output: -19.2178367434 | Program output: 43.024417     
Correct output: 66.7518906772  | Program output: 1.023617      
Correct output: 7.673605441    | Program output: 27.023607     
Correct output: 23.6294031682  | Program output: 90.029107     
Correct output: -6.1389033433  | Program output: 38.023927     
Correct output: 9.2516366816   | Program output: -82.023627    
Correct output: 31.3251776267  | Program output: -55.023627    
Correct output: 73.3746496408  | Program output: 0.023607      
Correct output: 20.0500553336  | Program output: -19.023627    
Correct output: -23.2820697498 | Program output: 32.023627     
Correct output: 120.1004999359 | Program output: 30.023607     
Correct output: -155.453212395 | Program output: -98.023617    
Correct output: 31.10301576    | Program output: 10.023617     
Correct output: 45.5733057121  | Program output: -39.023607    
Correct output: -68.592783645  | Program output: -78.023607    
Correct output: -125.979392023 | Program output: -70.023627    
Correct output: -91.9273649148 | Program output: -71.023617    
Correct output: -92.5660607267 | Program output: -49.023627    
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_inc} {:instruction float_add} {:instruction float_pop} {:instruction float_mult} {:instruction integer_rot} {:instruction float_add} {:instruction float_yank} {:instruction float_div} {:instruction float_rot} {:instruction float_dup_times} {:instruction float_min} {:instruction integer_inc} {:instruction float_add} {:instruction float_yank} {:instruction integer_dup_times} {:instruction float_min} {:instruction float_shove} {:instruction integer_div} {:instruction 27} {:instruction float_mult} {:instruction float_tan} {:instruction 9} {:instruction integer_add} {:instruction tag_float_196} {:instruction float_shove} {:instruction float_rot} {:instruction integer_add} {:instruction integer_stackdepth} {:instruction float_add} {:instruction in2} {:instruction integer_add} {:instruction integer_max} {:instruction float_max} {:instruction integer_stackdepth} {:instruction float_div} {:instruction in2} {:instruction float_frominteger} {:instruction print_float} {:instruction integer_dup} {:instruction float_shove} {:instruction float_shove} {:instruction float_dup} {:instruction integer_inc} {:instruction float_max} {:instruction print_integer} {:instruction integer_shove} {:instruction integer_yank} {:instruction print_integer} {:instruction integer_yank} {:instruction integer_max} {:instruction integer_stackdepth} {:instruction float_add} {:instruction integer_stackdepth} {:instruction float_sin} {:instruction in2} {:instruction integer_mod} {:instruction print_float} {:instruction in2} {:instruction float_mult} {:instruction integer_stackdepth} {:instruction float_frominteger} {:instruction integer_fromfloat} {:instruction integer_mod} {:instruction print_integer} {:instruction float_sin} {:instruction float_mult} {:instruction tag_float_291} {:instruction 6} {:instruction tag_float_291} {:instruction integer_inc} {:instruction float_swap} {:instruction print_integer} {:instruction float_min} {:instruction integer_stackdepth} {:instruction tag_float_295})
Best program: (integer_inc float_add float_pop float_mult integer_rot float_add float_yank float_div float_rot float_dup_times float_min integer_inc float_add float_yank integer_dup_times float_min float_shove integer_div 27 float_mult float_tan 9 integer_add tag_float_196 float_shove float_rot integer_add integer_stackdepth float_add in2 integer_add integer_max float_max integer_stackdepth float_div in2 float_frominteger print_float integer_dup float_shove float_shove float_dup integer_inc float_max print_integer integer_shove integer_yank print_integer integer_yank integer_max integer_stackdepth float_add integer_stackdepth float_sin in2 integer_mod print_float in2 float_mult integer_stackdepth float_frominteger integer_fromfloat integer_mod print_integer float_sin float_mult tag_float_291 6 tag_float_291 integer_inc float_swap print_integer float_min integer_stackdepth tag_float_295)
Errors: [16.5677 9 6.0519 8 10.506 10 63.29 7 46.4786 10 27.3773 7 21.7659 9 62.2423 12 65.7283 10 19.35 7 66.3997 9 44.1628 9 91.2753 9 86.3488 9 73.351 10 39.0737 11 55.3057 9 90.0769 11 57.4296 10 21.0794 7 84.5969 10 9.4308 7 55.9558 10 20.9037 7 43.5424 9]
Total: 1404.2905
Mean: 28.08581
Genome size: 75
Size: 76
Percent parens: 0.013
--- Population Statistics ---
Average total errors in population: 4629.238044700004
Median total errors in population: 1404.2905
Error averages by case: (177.39585000000255 9.487 168.37774300000012 8.658 172.65071839999743 10.241 163.10488509999954 7.663 201.4327532000014 10.412 130.44958859999738 7.636 125.63664919999921 9.467 159.90225160000068 11.837 163.96829639999942 10.162 121.50648480000176 7.68 164.6995327000001 9.359 144.645777400001 9.277 237.2994998000019 9.486 232.35978320000336 9.533 171.77077879999797 10.214 188.69599700000035 11.257 153.69186239999857 9.547 184.38032199999722 10.973 212.82910870000163 10.442 123.01012070000105 7.313 231.02141010000184 10.453 171.71557430000124 7.789 210.42902549999843 10.238 181.65349879999812 7.85 200.25253300000236 9.384)
Error minima by case: (16.5458 8 6.0031 5 10.4841 9 22.3187 6 36.5687 9 27.3037 6 17.2346 8 19.2423 6 1.0 5 0.6736 6 11.3776 8 6.1628 6 2.2516 4 3.7018 5 0.0 4 3.0501 5 23.3057 6 6.8995 6 57.3809 5 3.914 5 10.5663 5 9.4079 7 55.907 5 20.855 5 43.4937 5)
Average genome size in population (length): 78.51
Average program size in population (points): 79.51
Average percent parens in population: 0.013
Minimum age in population: 226.7172886926491
Maximum age in population: 231.7922630923146
Average age in population: 229.7964247620423
Median age in population: 229.846038039142
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 6
Genome diversity (% unique Plush genomes):	 0.882
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 6
Syntactic diversity (% unique Push programs):	 0.882
Total error diversity:				 0.235
Error (vector) diversity:			 0.287
Behavioral diversity:				 0.288
--- Run Statistics ---
Number of program evaluations used so far: 166000
Number of point (instruction) evaluations so far: 360909616
--- Timings ---
Current time: 1529615823942 milliseconds
Total Time:         670.6 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       227.1 seconds, 33.9%
Fitness Testing:    352.0 seconds, 52.5%
Report:              91.5 seconds, 13.6%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 165
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 166
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 166
;;******************************
;; -*- Number IO problem report - generation 166
Test total error for best: 59998.23050000004
Test mean error for best: 29.99912
;;------------------------------
Outputs of best individual on training cases:
Correct output: -57.4559422311 | Program output: -74.023617    
Correct output: -71.0754923621 | Program output: -65.023617    
Correct output: -66.5176295557 | Program output: -77.023617    
Correct output: 149.3187378    | Program output: 86.028727     
Correct output: -36.5450493525 | Program output: -83.023617    
Correct output: 75.4021928097  | Program output: 48.024907     
Correct output: 52.2615929867  | Program output: 74.027527     
Correct output: -19.2178367434 | Program output: 43.024417     
Correct output: 66.7518906772  | Program output: 1.023617      
Correct output: 7.673605441    | Program output: 27.023607     
Correct output: 23.6294031682  | Program output: 90.029107     
Correct output: -6.1389033433  | Program output: 38.023927     
Correct output: 9.2516366816   | Program output: -82.023627    
Correct output: 31.3251776267  | Program output: -55.023627    
Correct output: 73.3746496408  | Program output: 0.023607      
Correct output: 20.0500553336  | Program output: -19.023627    
Correct output: -23.2820697498 | Program output: 32.023627     
Correct output: 120.1004999359 | Program output: 30.023607     
Correct output: -155.453212395 | Program output: -98.023617    
Correct output: 31.10301576    | Program output: 10.023617     
Correct output: 45.5733057121  | Program output: -39.023607    
Correct output: -68.592783645  | Program output: -78.023607    
Correct output: -125.979392023 | Program output: -70.023627    
Correct output: -91.9273649148 | Program output: -71.023617    
Correct output: -92.5660607267 | Program output: -49.023627    
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_dup} {:instruction float_add} {:instruction float_add} {:instruction integer_flush} {:instruction float_mult} {:instruction integer_rot} {:instruction float_add} {:instruction float_mult} {:instruction float_div} {:instruction float_min} {:instruction float_dup_times} {:instruction integer_min} {:instruction integer_yankdup} {:instruction integer_flush} {:instruction float_rot} {:instruction float_dup_times} {:instruction float_rot} {:instruction print_integer} {:instruction float_min} {:instruction print_float} {:instruction integer_add} {:instruction 27} {:instruction float_sub} {:instruction float_yankdup} {:instruction integer_yank} {:instruction 9} {:instruction integer_add} {:instruction integer_stackdepth} {:instruction float_add} {:instruction in2} {:instruction tag_float_196} {:instruction in1} {:instruction float_rot} {:instruction integer_add} {:instruction integer_max} {:instruction integer_max} {:instruction integer_stackdepth} {:instruction float_flush} {:instruction in2} {:instruction float_frominteger} {:instruction print_float} {:instruction integer_dup} {:instruction float_dup} {:instruction float_shove} {:instruction integer_inc} {:instruction print_integer} {:instruction integer_shove} {:instruction float_flush} {:instruction print_integer} {:instruction float_max} {:instruction integer_flush} {:instruction float_cos} {:instruction in2} {:instruction float_mult} {:instruction integer_yank} {:instruction integer_max} {:instruction float_sin} {:instruction integer_stackdepth} {:instruction float_min} {:instruction in2} {:instruction float_mult} {:instruction integer_stackdepth} {:instruction float_frominteger} {:instruction integer_fromfloat} {:instruction integer_mod} {:instruction print_integer} {:instruction float_min} {:instruction integer_stackdepth} {:instruction tag_float_255} {:instruction 6} {:instruction float_flush} {:instruction integer_inc} {:instruction tag_float_291} {:instruction 7} {:instruction float_yank} {:instruction print_integer})
Best program: (float_dup float_add float_add integer_flush float_mult integer_rot float_add float_mult float_div float_min float_dup_times integer_min integer_yankdup integer_flush float_rot float_dup_times float_rot print_integer float_min print_float integer_add 27 float_sub float_yankdup integer_yank 9 integer_add integer_stackdepth float_add in2 tag_float_196 in1 float_rot integer_add integer_max integer_max integer_stackdepth float_flush in2 float_frominteger print_float integer_dup float_dup float_shove integer_inc print_integer integer_shove float_flush print_integer float_max integer_flush float_cos in2 float_mult integer_yank integer_max float_sin integer_stackdepth float_min in2 float_mult integer_stackdepth float_frominteger integer_fromfloat integer_mod print_integer float_min integer_stackdepth tag_float_255 6 float_flush integer_inc tag_float_291 7 float_yank print_integer)
Errors: [16.5677 9 6.0519 8 10.506 10 63.29 7 46.4786 10 27.3773 7 21.7659 9 62.2423 12 65.7283 10 19.35 7 66.3997 9 44.1628 9 91.2753 9 86.3488 9 73.351 10 39.0737 11 55.3057 9 90.0769 11 57.4296 10 21.0794 7 84.5969 10 9.4308 7 55.9558 10 20.9037 7 43.5424 9]
Total: 1404.2905
Mean: 28.08581
Genome size: 76
Size: 77
Percent parens: 0.013
--- Population Statistics ---
Average total errors in population: 4277.052419600004
Median total errors in population: 1404.2905
Error averages by case: (158.95047920000167 9.44 150.39993060000066 8.639 154.0681822999978 10.223 154.6376386999991 7.731 183.60755150000128 10.394 120.38468869999784 7.648 116.6892820999992 9.47 152.1180693000001 11.834 150.1996196 10.213 112.45736900000124 7.691 155.5019364999997 9.383 135.79845190000106 9.324 220.4301530000014 9.539 216.24924330000331 9.544 156.8305193999983 10.254 164.1531512999999 11.283 145.83958129999857 9.553 176.05097809999725 11.005 195.1020340000018 10.409 114.73490950000097 7.355 214.30723020000178 10.474 153.140030000001 7.747 193.30759139999859 10.215 163.26781109999854 7.822 182.27098760000223 9.365)
Error minima by case: (8.9955 8 4.624 7 0.0662 9 36.7049 6 29.9064 9 25.3952 6 5.2616 8 18.3861 9 29.7349 9 0.6736 6 3.3706 7 6.4353 7 7.2414 7 4.3252 8 33.6254 9 3.0501 9 23.8335 9 9.9231 9 57.3805 9 4.103 5 8.5663 9 2.1413 6 55.9067 9 20.8546 6 26.1146 8)
Average genome size in population (length): 78.046
Average program size in population (points): 79.046
Average percent parens in population: 0.013
Minimum age in population: 229.1754147264299
Maximum age in population: 233.0356954011596
Average age in population: 231.1865019622726
Median age in population: 231.1919507121191
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 7
Genome diversity (% unique Plush genomes):	 0.875
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 7
Syntactic diversity (% unique Push programs):	 0.875
Total error diversity:				 0.228
Error (vector) diversity:			 0.279
Behavioral diversity:				 0.279
--- Run Statistics ---
Number of program evaluations used so far: 167000
Number of point (instruction) evaluations so far: 362862141
--- Timings ---
Current time: 1529615827875 milliseconds
Total Time:         674.4 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       228.5 seconds, 33.9%
Fitness Testing:    353.9 seconds, 52.5%
Report:              91.9 seconds, 13.6%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 166
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 167
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 167
;;******************************
;; -*- Number IO problem report - generation 167
Test total error for best: 59998.23050000004
Test mean error for best: 29.99912
;;------------------------------
Outputs of best individual on training cases:
Correct output: -57.4559422311 | Program output: -74.023617    
Correct output: -71.0754923621 | Program output: -65.023617    
Correct output: -66.5176295557 | Program output: -77.023617    
Correct output: 149.3187378    | Program output: 86.028727     
Correct output: -36.5450493525 | Program output: -83.023617    
Correct output: 75.4021928097  | Program output: 48.024907     
Correct output: 52.2615929867  | Program output: 74.027527     
Correct output: -19.2178367434 | Program output: 43.024417     
Correct output: 66.7518906772  | Program output: 1.023617      
Correct output: 7.673605441    | Program output: 27.023607     
Correct output: 23.6294031682  | Program output: 90.029107     
Correct output: -6.1389033433  | Program output: 38.023927     
Correct output: 9.2516366816   | Program output: -82.023627    
Correct output: 31.3251776267  | Program output: -55.023627    
Correct output: 73.3746496408  | Program output: 0.023607      
Correct output: 20.0500553336  | Program output: -19.023627    
Correct output: -23.2820697498 | Program output: 32.023627     
Correct output: 120.1004999359 | Program output: 30.023607     
Correct output: -155.453212395 | Program output: -98.023617    
Correct output: 31.10301576    | Program output: 10.023617     
Correct output: 45.5733057121  | Program output: -39.023607    
Correct output: -68.592783645  | Program output: -78.023607    
Correct output: -125.979392023 | Program output: -70.023627    
Correct output: -91.9273649148 | Program output: -71.023617    
Correct output: -92.5660607267 | Program output: -49.023627    
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_min} {:instruction float_rot} {:instruction integer_dup} {:instruction float_rot} {:instruction tagged_478} {:instruction 27} {:instruction float_sub} {:instruction float_div} {:instruction integer_sub} {:instruction 9} {:instruction float_rot} {:instruction integer_add} {:instruction integer_stackdepth} {:instruction float_mod} {:instruction in2} {:instruction integer_add} {:instruction integer_max} {:instruction float_sin} {:instruction integer_stackdepth} {:instruction integer_rot} {:instruction in2} {:instruction float_frominteger} {:instruction print_float} {:instruction integer_dup} {:instruction float_shove} {:instruction float_shove} {:instruction integer_add} {:instruction float_mod} {:instruction integer_dup} {:instruction integer_dup_items} {:instruction print_integer} {:instruction integer_min} {:instruction integer_yank} {:instruction float_dup} {:instruction integer_yank} {:instruction print_integer} {:instruction integer_max} {:instruction integer_yank} {:instruction integer_add} {:instruction integer_mod} {:instruction integer_dup} {:instruction integer_dup_items} {:instruction float_frominteger} {:instruction print_float} {:instruction integer_dup} {:instruction float_min} {:instruction integer_inc} {:instruction float_mod} {:instruction integer_dup} {:instruction integer_dup_items} {:instruction print_integer} {:instruction integer_yank} {:instruction integer_yank} {:instruction print_integer} {:instruction integer_fromfloat} {:instruction integer_yank} {:instruction print_integer} {:instruction integer_fromfloat} {:instruction in1} {:instruction float_dup} {:instruction integer_fromfloat} {:instruction integer_stackdepth} {:instruction integer_max} {:instruction in2} {:instruction integer_min} {:instruction float_add} {:instruction integer_max} {:instruction integer_yankdup} {:instruction integer_yank} {:instruction float_cos} {:instruction integer_max} {:instruction integer_sub} {:instruction integer_stackdepth} {:instruction float_add} {:instruction in2} {:instruction tagged_833} {:instruction integer_stackdepth} {:instruction integer_mod} {:instruction print_integer} {:instruction float_min} {:instruction integer_dup_times} {:instruction tag_float_291} {:instruction 6} {:instruction tag_float_208} {:instruction integer_inc} {:instruction float_dup_times} {:instruction print_integer})
Best program: (float_min float_rot integer_dup float_rot tagged_478 27 float_sub float_div integer_sub 9 float_rot integer_add integer_stackdepth float_mod in2 integer_add integer_max float_sin integer_stackdepth integer_rot in2 float_frominteger print_float integer_dup float_shove float_shove integer_add float_mod integer_dup integer_dup_items print_integer integer_min integer_yank float_dup integer_yank print_integer integer_max integer_yank integer_add integer_mod integer_dup integer_dup_items float_frominteger print_float integer_dup float_min integer_inc float_mod integer_dup integer_dup_items print_integer integer_yank integer_yank print_integer integer_fromfloat integer_yank print_integer integer_fromfloat in1 float_dup integer_fromfloat integer_stackdepth integer_max in2 integer_min float_add integer_max integer_yankdup integer_yank float_cos integer_max integer_sub integer_stackdepth float_add in2 tagged_833 integer_stackdepth integer_mod print_integer float_min integer_dup_times tag_float_291 6 tag_float_208 integer_inc float_dup_times print_integer)
Errors: [16.5677 9 6.0519 8 10.506 10 63.29 7 46.4786 10 27.3773 7 21.7659 9 62.2423 12 65.7283 10 19.35 7 66.3997 9 44.1628 9 91.2753 9 86.3488 9 73.351 10 39.0737 11 55.3057 9 90.0769 11 57.4296 10 21.0794 7 84.5969 10 9.4308 7 55.9558 10 20.9037 7 43.5424 9]
Total: 1404.2905
Mean: 28.08581
Genome size: 87
Size: 88
Percent parens: 0.011
--- Population Statistics ---
Average total errors in population: 4461.990326300002
Median total errors in population: 1404.2905
Error averages by case: (170.50263860000248 9.477 162.98104029999965 8.697 166.60417929999787 10.229 158.9140798999996 7.69 195.76224990000128 10.432 124.43128849999765 7.601 121.07695869999928 9.452 155.82082100000068 11.828 151.12288499999963 10.183 114.51693190000148 7.696 158.25985070000002 9.37 138.6929657000011 9.324 232.13545580000152 9.561 227.10212860000286 9.518 151.90931469999853 10.237 178.35716930000038 11.287 147.88510569999875 9.56 179.44729279999746 10.995 206.0228741000014 10.436 117.82229390000089 7.308 226.16410690000146 10.483 165.6614680000009 7.805 205.16627279999886 10.231 175.57860459999853 7.852 193.4293496000019 9.371)
Error minima by case: (16.5451 8 6.0028 7 10.4834 9 22.6813 6 36.5824 9 20.5978 6 16.1858 8 19.2633 9 24.2717 6 0.6736 6 3.3706 8 6.1793 7 0.2234 7 4.3252 7 16.649 6 0.9499 8 23.3194 8 60.1005 7 40.5468 9 4.103 6 28.5733 9 9.4072 6 14.0206 8 20.8546 6 5.4339 8)
Average genome size in population (length): 78.47
Average program size in population (points): 79.47
Average percent parens in population: 0.013
Minimum age in population: 230.5932727854437
Maximum age in population: 234.5036878689042
Average age in population: 232.5917408079047
Median age in population: 232.6042845403557
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 6
Genome diversity (% unique Plush genomes):	 0.868
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 6
Syntactic diversity (% unique Push programs):	 0.868
Total error diversity:				 0.244
Error (vector) diversity:			 0.291
Behavioral diversity:				 0.291
--- Run Statistics ---
Number of program evaluations used so far: 168000
Number of point (instruction) evaluations so far: 364824616
--- Timings ---
Current time: 1529615831576 milliseconds
Total Time:         678.2 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       229.8 seconds, 33.9%
Fitness Testing:    355.8 seconds, 52.5%
Report:              92.5 seconds, 13.6%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 167
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 168
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 168
;;******************************
;; -*- Number IO problem report - generation 168
Test total error for best: 59998.23050000004
Test mean error for best: 29.99912
;;------------------------------
Outputs of best individual on training cases:
Correct output: -57.4559422311 | Program output: -74.023617    
Correct output: -71.0754923621 | Program output: -65.023617    
Correct output: -66.5176295557 | Program output: -77.023617    
Correct output: 149.3187378    | Program output: 86.028727     
Correct output: -36.5450493525 | Program output: -83.023617    
Correct output: 75.4021928097  | Program output: 48.024907     
Correct output: 52.2615929867  | Program output: 74.027527     
Correct output: -19.2178367434 | Program output: 43.024417     
Correct output: 66.7518906772  | Program output: 1.023617      
Correct output: 7.673605441    | Program output: 27.023607     
Correct output: 23.6294031682  | Program output: 90.029107     
Correct output: -6.1389033433  | Program output: 38.023927     
Correct output: 9.2516366816   | Program output: -82.023627    
Correct output: 31.3251776267  | Program output: -55.023627    
Correct output: 73.3746496408  | Program output: 0.023607      
Correct output: 20.0500553336  | Program output: -19.023627    
Correct output: -23.2820697498 | Program output: 32.023627     
Correct output: 120.1004999359 | Program output: 30.023607     
Correct output: -155.453212395 | Program output: -98.023617    
Correct output: 31.10301576    | Program output: 10.023617     
Correct output: 45.5733057121  | Program output: -39.023607    
Correct output: -68.592783645  | Program output: -78.023607    
Correct output: -125.979392023 | Program output: -70.023627    
Correct output: -91.9273649148 | Program output: -71.023617    
Correct output: -92.5660607267 | Program output: -49.023627    
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_dup} {:instruction float_add} {:instruction float_add} {:instruction integer_flush} {:instruction float_mult} {:instruction integer_rot} {:instruction float_add} {:instruction float_mult} {:instruction float_div} {:instruction float_min} {:instruction float_dup_times} {:instruction integer_min} {:instruction integer_yankdup} {:instruction integer_flush} {:instruction float_rot} {:instruction float_dup_times} {:instruction float_rot} {:instruction print_integer} {:instruction float_min} {:instruction float_frominteger} {:instruction integer_add} {:instruction 27} {:instruction float_sub} {:instruction float_yankdup} {:instruction integer_yank} {:instruction 9} {:instruction integer_add} {:instruction integer_stackdepth} {:instruction float_add} {:instruction in2} {:instruction tag_float_196} {:instruction in1} {:instruction float_rot} {:instruction integer_add} {:instruction integer_max} {:instruction integer_max} {:instruction integer_stackdepth} {:instruction float_flush} {:instruction in2} {:instruction float_frominteger} {:instruction print_float} {:instruction integer_dup} {:instruction float_dup} {:instruction float_shove} {:instruction integer_inc} {:instruction print_integer} {:instruction integer_shove} {:instruction float_flush} {:instruction print_integer} {:instruction float_max} {:instruction integer_flush} {:instruction float_frominteger} {:instruction integer_inc} {:instruction integer_yankdup} {:instruction integer_yank} {:instruction in2} {:instruction float_mult} {:instruction integer_stackdepth} {:instruction integer_max} {:instruction integer_yank} {:instruction integer_stackdepth} {:instruction float_mult} {:instruction integer_max} {:instruction integer_yankdup} {:instruction integer_yank} {:instruction float_cos} {:instruction integer_max} {:instruction float_sin} {:instruction integer_stackdepth} {:instruction float_add} {:instruction in2} {:instruction tagged_953} {:instruction integer_stackdepth} {:instruction float_frominteger} {:instruction integer_fromfloat} {:instruction float_rot} {:instruction integer_fromfloat} {:instruction integer_mod} {:instruction print_integer} {:instruction float_flush} {:instruction integer_dec} {:instruction tag_float_291} {:instruction float_min} {:instruction print_float} {:instruction float_div} {:instruction 6} {:instruction tag_float_291} {:instruction float_min} {:instruction integer_stackdepth} {:instruction tag_float_279} {:instruction 6} {:instruction tag_float_208} {:instruction integer_inc} {:instruction float_swap} {:instruction print_integer})
Best program: (float_dup float_add float_add integer_flush float_mult integer_rot float_add float_mult float_div float_min float_dup_times integer_min integer_yankdup integer_flush float_rot float_dup_times float_rot print_integer float_min float_frominteger integer_add 27 float_sub float_yankdup integer_yank 9 integer_add integer_stackdepth float_add in2 tag_float_196 in1 float_rot integer_add integer_max integer_max integer_stackdepth float_flush in2 float_frominteger print_float integer_dup float_dup float_shove integer_inc print_integer integer_shove float_flush print_integer float_max integer_flush float_frominteger integer_inc integer_yankdup integer_yank in2 float_mult integer_stackdepth integer_max integer_yank integer_stackdepth float_mult integer_max integer_yankdup integer_yank float_cos integer_max float_sin integer_stackdepth float_add in2 tagged_953 integer_stackdepth float_frominteger integer_fromfloat float_rot integer_fromfloat integer_mod print_integer float_flush integer_dec tag_float_291 float_min print_float float_div 6 tag_float_291 float_min integer_stackdepth tag_float_279 6 tag_float_208 integer_inc float_swap print_integer)
Errors: [16.5677 9 6.0519 8 10.506 10 63.29 7 46.4786 10 27.3773 7 21.7659 9 62.2423 12 65.7283 10 19.35 7 66.3997 9 44.1628 9 91.2753 9 86.3488 9 73.351 10 39.0737 11 55.3057 9 90.0769 11 57.4296 10 21.0794 7 84.5969 10 9.4308 7 55.9558 10 20.9037 7 43.5424 9]
Total: 1404.2905
Mean: 28.08581
Genome size: 95
Size: 96
Percent parens: 0.010
--- Population Statistics ---
Average total errors in population: 4164.268621400002
Median total errors in population: 1404.2905
Error averages by case: (154.9164511000012 9.456 146.23662470000122 8.651 149.94324419999757 10.206 148.23373429999896 7.619 179.87650270000125 10.399 115.65946979999764 7.547 110.59803709999917 9.436 146.99331000000012 11.797 144.9685936000001 10.168 108.1741079000015 7.671 150.54130119999954 9.345 130.6360258000018 9.288 217.20397850000145 9.466 212.9526497000031 9.475 150.51716619999823 10.233 161.4416028999994 11.263 140.82799379999867 9.511 171.87883269999722 10.991 190.93944890000145 10.378 109.62558730000099 7.289 210.79478110000167 10.433 148.98670580000095 7.737 189.29389669999864 10.202 159.0851902999983 7.781 178.29238510000224 9.309)
Error minima by case: (15.5814 8 5.9843 4 9.5197 8 22.3187 5 37.562 9 25.3652 4 21.7387 8 20.2348 4 1.0 3 0.6736 6 3.3706 8 7.1659 4 8.1769 3 4.3252 4 0.0 2 3.0501 4 24.3091 4 9.9261 4 57.362 4 4.103 3 9.5663 4 8.4446 6 55.8881 4 20.8362 4 43.4748 4)
Average genome size in population (length): 78.013
Average program size in population (points): 79.013
Average percent parens in population: 0.013
Minimum age in population: 231.6369979397352
Maximum age in population: 235.7346719795292
Average age in population: 233.988297905831
Median age in population: 234.0641160474885
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 7
Genome diversity (% unique Plush genomes):	 0.878
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 7
Syntactic diversity (% unique Push programs):	 0.878
Total error diversity:				 0.241
Error (vector) diversity:			 0.289
Behavioral diversity:				 0.289
--- Run Statistics ---
Number of program evaluations used so far: 169000
Number of point (instruction) evaluations so far: 366775941
--- Timings ---
Current time: 1529615835379 milliseconds
Total Time:         682.0 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       231.2 seconds, 33.9%
Fitness Testing:    357.7 seconds, 52.4%
Report:              93.0 seconds, 13.6%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 168
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 169
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 169
;;******************************
;; -*- Number IO problem report - generation 169
Test total error for best: 59998.23050000004
Test mean error for best: 29.99912
;;------------------------------
Outputs of best individual on training cases:
Correct output: -57.4559422311 | Program output: -74.023617    
Correct output: -71.0754923621 | Program output: -65.023617    
Correct output: -66.5176295557 | Program output: -77.023617    
Correct output: 149.3187378    | Program output: 86.028727     
Correct output: -36.5450493525 | Program output: -83.023617    
Correct output: 75.4021928097  | Program output: 48.024907     
Correct output: 52.2615929867  | Program output: 74.027527     
Correct output: -19.2178367434 | Program output: 43.024417     
Correct output: 66.7518906772  | Program output: 1.023617      
Correct output: 7.673605441    | Program output: 27.023607     
Correct output: 23.6294031682  | Program output: 90.029107     
Correct output: -6.1389033433  | Program output: 38.023927     
Correct output: 9.2516366816   | Program output: -82.023627    
Correct output: 31.3251776267  | Program output: -55.023627    
Correct output: 73.3746496408  | Program output: 0.023607      
Correct output: 20.0500553336  | Program output: -19.023627    
Correct output: -23.2820697498 | Program output: 32.023627     
Correct output: 120.1004999359 | Program output: 30.023607     
Correct output: -155.453212395 | Program output: -98.023617    
Correct output: 31.10301576    | Program output: 10.023617     
Correct output: 45.5733057121  | Program output: -39.023607    
Correct output: -68.592783645  | Program output: -78.023607    
Correct output: -125.979392023 | Program output: -70.023627    
Correct output: -91.9273649148 | Program output: -71.023617    
Correct output: -92.5660607267 | Program output: -49.023627    
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_dup} {:instruction float_add} {:instruction float_add} {:instruction integer_flush} {:instruction float_yankdup} {:instruction float_dup_times} {:instruction float_add} {:instruction float_cos} {:instruction float_div} {:instruction float_min} {:instruction float_dup_times} {:instruction integer_min} {:instruction integer_shove} {:instruction integer_flush} {:instruction float_frominteger} {:instruction float_dup_times} {:instruction float_rot} {:instruction print_integer} {:instruction float_min} {:instruction print_float} {:instruction integer_add} {:instruction 27} {:instruction 27} {:instruction float_sub} {:instruction float_yankdup} {:instruction integer_yank} {:instruction 9} {:instruction integer_add} {:instruction integer_stackdepth} {:instruction float_add} {:instruction in2} {:instruction integer_add} {:instruction integer_max} {:instruction tagged_406} {:instruction integer_stackdepth} {:instruction float_div} {:instruction in2} {:instruction float_frominteger} {:instruction print_float} {:instruction integer_dup} {:instruction float_shove} {:instruction float_shove} {:instruction float_mult} {:instruction integer_inc} {:instruction print_integer} {:instruction integer_shove} {:instruction float_min} {:instruction print_integer} {:instruction float_dec} {:instruction integer_dup_times} {:instruction float_add} {:instruction in2} {:instruction integer_dec} {:instruction integer_yank} {:instruction integer_max} {:instruction print_float} {:instruction integer_yank} {:instruction float_flush} {:instruction integer_yankdup} {:instruction integer_stackdepth} {:instruction float_mod} {:instruction integer_stackdepth} {:instruction integer_max} {:instruction float_mult} {:instruction integer_yank} {:instruction float_cos} {:instruction integer_max} {:instruction integer_max} {:instruction integer_stackdepth} {:instruction float_add} {:instruction in2} {:instruction float_mod} {:instruction integer_stackdepth} {:instruction integer_mod} {:instruction print_integer} {:instruction float_div} {:instruction integer_stackdepth} {:instruction float_swap} {:instruction 6} {:instruction float_yank} {:instruction 6} {:instruction tag_float_291} {:instruction integer_inc} {:instruction float_rot} {:instruction print_integer})
Best program: (float_dup float_add float_add integer_flush float_yankdup float_dup_times float_add float_cos float_div float_min float_dup_times integer_min integer_shove integer_flush float_frominteger float_dup_times float_rot print_integer float_min print_float integer_add 27 27 float_sub float_yankdup integer_yank 9 integer_add integer_stackdepth float_add in2 integer_add integer_max tagged_406 integer_stackdepth float_div in2 float_frominteger print_float integer_dup float_shove float_shove float_mult integer_inc print_integer integer_shove float_min print_integer float_dec integer_dup_times float_add in2 integer_dec integer_yank integer_max print_float integer_yank float_flush integer_yankdup integer_stackdepth float_mod integer_stackdepth integer_max float_mult integer_yank float_cos integer_max integer_max integer_stackdepth float_add in2 float_mod integer_stackdepth integer_mod print_integer float_div integer_stackdepth float_swap 6 float_yank 6 tag_float_291 integer_inc float_rot print_integer)
Errors: [16.5677 9 6.0519 8 10.506 10 63.29 7 46.4786 10 27.3773 7 21.7659 9 62.2423 12 65.7283 10 19.35 7 66.3997 9 44.1628 9 91.2753 9 86.3488 9 73.351 10 39.0737 11 55.3057 9 90.0769 11 57.4296 10 21.0794 7 84.5969 10 9.4308 7 55.9558 10 20.9037 7 43.5424 9]
Total: 1404.2905
Mean: 28.08581
Genome size: 85
Size: 86
Percent parens: 0.012
--- Population Statistics ---
Average total errors in population: 4098.856367000001
Median total errors in population: 1404.2905
Error averages by case: (150.71155220000117 9.444 144.11624360000076 8.618 146.7645060999981 10.223 147.79526459999883 7.634 175.35484270000123 10.403 114.63147099999802 7.551 109.20747189999928 9.413 145.07858649999983 11.829 139.9656306000007 10.184 107.37842430000106 7.669 149.48232169999943 9.352 128.76825770000144 9.295 212.20016050000103 9.501 208.1137799000031 9.476 147.62439819999858 10.223 157.6828405999994 11.241 139.06549599999863 9.542 170.13118259999828 10.999 189.20417110000156 10.383 108.07290800000102 7.311 207.0654111000017 10.446 145.81687390000093 7.742 186.5158787999987 10.186 157.0513085999986 7.782 175.2963848000019 9.314)
Error minima by case: (16.5442 8 6.0028 7 10.4825 9 22.3187 6 36.562 9 26.3952 6 15.2233 8 19.2348 9 24.2691 8 0.6736 6 3.3706 8 6.1659 7 2.2516 7 4.3252 7 16.6464 8 0.7853 9 23.3091 9 9.8995 10 57.3805 9 4.103 5 8.5352 9 9.4073 6 55.9067 9 20.8546 6 43.4933 8)
Average genome size in population (length): 77.571
Average program size in population (points): 78.571
Average percent parens in population: 0.013
Minimum age in population: 232.8284819720817
Maximum age in population: 237.2766143493501
Average age in population: 235.4325476887861
Median age in population: 235.4766880300809
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 10
Genome diversity (% unique Plush genomes):	 0.85
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 10
Syntactic diversity (% unique Push programs):	 0.85
Total error diversity:				 0.23
Error (vector) diversity:			 0.279
Behavioral diversity:				 0.279
--- Run Statistics ---
Number of program evaluations used so far: 170000
Number of point (instruction) evaluations so far: 368716091
--- Timings ---
Current time: 1529615839088 milliseconds
Total Time:         685.7 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       232.6 seconds, 33.9%
Fitness Testing:    359.6 seconds, 52.4%
Report:              93.5 seconds, 13.6%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 169
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 170
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 170
;;******************************
;; -*- Number IO problem report - generation 170
Test total error for best: 59998.23050000004
Test mean error for best: 29.99912
;;------------------------------
Outputs of best individual on training cases:
Correct output: -57.4559422311 | Program output: -74.023617    
Correct output: -71.0754923621 | Program output: -65.023617    
Correct output: -66.5176295557 | Program output: -77.023617    
Correct output: 149.3187378    | Program output: 86.028727     
Correct output: -36.5450493525 | Program output: -83.023617    
Correct output: 75.4021928097  | Program output: 48.024907     
Correct output: 52.2615929867  | Program output: 74.027527     
Correct output: -19.2178367434 | Program output: 43.024417     
Correct output: 66.7518906772  | Program output: 1.023617      
Correct output: 7.673605441    | Program output: 27.023607     
Correct output: 23.6294031682  | Program output: 90.029107     
Correct output: -6.1389033433  | Program output: 38.023927     
Correct output: 9.2516366816   | Program output: -82.023627    
Correct output: 31.3251776267  | Program output: -55.023627    
Correct output: 73.3746496408  | Program output: 0.023607      
Correct output: 20.0500553336  | Program output: -19.023627    
Correct output: -23.2820697498 | Program output: 32.023627     
Correct output: 120.1004999359 | Program output: 30.023607     
Correct output: -155.453212395 | Program output: -98.023617    
Correct output: 31.10301576    | Program output: 10.023617     
Correct output: 45.5733057121  | Program output: -39.023607    
Correct output: -68.592783645  | Program output: -78.023607    
Correct output: -125.979392023 | Program output: -70.023627    
Correct output: -91.9273649148 | Program output: -71.023617    
Correct output: -92.5660607267 | Program output: -49.023627    
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_inc} {:instruction float_add} {:instruction float_yank} {:instruction float_dup_times} {:instruction integer_dup} {:instruction print_float} {:instruction 27} {:instruction float_mult} {:instruction integer_div} {:instruction float_inc} {:instruction float_dup} {:instruction float_mult} {:instruction float_tan} {:instruction 9} {:instruction integer_add} {:instruction integer_stackdepth} {:instruction in1} {:instruction in2} {:instruction tag_float_72} {:instruction float_swap} {:instruction float_rot} {:instruction integer_add} {:instruction integer_max} {:instruction integer_max} {:instruction float_max} {:instruction integer_stackdepth} {:instruction float_min} {:instruction in2} {:instruction float_frominteger} {:instruction print_float} {:instruction integer_dup} {:instruction float_shove} {:instruction float_shove} {:instruction integer_inc} {:instruction float_swap} {:instruction integer_dup} {:instruction integer_dup_items} {:instruction print_integer} {:instruction integer_shove} {:instruction integer_shove} {:instruction print_integer} {:instruction integer_yank} {:instruction float_swap} {:instruction float_mult} {:instruction integer_yank} {:instruction integer_max} {:instruction integer_mult} {:instruction integer_stackdepth} {:instruction float_mod} {:instruction in2} {:instruction float_mult} {:instruction integer_stackdepth} {:instruction float_frominteger} {:instruction integer_fromfloat} {:instruction integer_mod} {:instruction print_integer} {:instruction float_min} {:instruction integer_stackdepth} {:instruction tag_float_291} {:instruction 6} {:instruction tag_float_284} {:instruction integer_inc} {:instruction float_swap} {:instruction print_integer})
Best program: (integer_inc float_add float_yank float_dup_times integer_dup print_float 27 float_mult integer_div float_inc float_dup float_mult float_tan 9 integer_add integer_stackdepth in1 in2 tag_float_72 float_swap float_rot integer_add integer_max integer_max float_max integer_stackdepth float_min in2 float_frominteger print_float integer_dup float_shove float_shove integer_inc float_swap integer_dup integer_dup_items print_integer integer_shove integer_shove print_integer integer_yank float_swap float_mult integer_yank integer_max integer_mult integer_stackdepth float_mod in2 float_mult integer_stackdepth float_frominteger integer_fromfloat integer_mod print_integer float_min integer_stackdepth tag_float_291 6 tag_float_284 integer_inc float_swap print_integer)
Errors: [16.5677 9 6.0519 8 10.506 10 63.29 7 46.4786 10 27.3773 7 21.7659 9 62.2423 12 65.7283 10 19.35 7 66.3997 9 44.1628 9 91.2753 9 86.3488 9 73.351 10 39.0737 11 55.3057 9 90.0769 11 57.4296 10 21.0794 7 84.5969 10 9.4308 7 55.9558 10 20.9037 7 43.5424 9]
Total: 1404.2905
Mean: 28.08581
Genome size: 64
Size: 65
Percent parens: 0.015
--- Population Statistics ---
Average total errors in population: 3926.008969100004
Median total errors in population: 1404.2905
Error averages by case: (146.285621000001 9.461 137.83772890000154 8.647 141.4704148999979 10.201 138.66671939999807 7.587 170.9259236000012 10.38 105.20904189999828 7.564 99.64574639999927 9.426 137.01539019999913 11.82 133.78419100000107 10.142 97.95392770000092 7.644 139.2811499999987 9.364 120.5522702000013 9.259 207.7175984000013 9.486 203.52362500000325 9.46 138.95134679999845 10.221 152.07312059999933 11.248 130.89052889999866 9.499 162.99137409999798 10.992 183.37726970000148 10.392 99.55308310000102 7.277 199.82984150000178 10.429 140.4598734000009 7.743 181.44911519999866 10.219 150.86069869999844 7.791 170.1323685000021 9.319)
Error minima by case: (16.5442 8 5.9943 6 10.4825 9 22.3187 6 36.5687 9 26.3915 6 16.218 8 19.2423 9 30.7083 8 0.6736 6 3.3706 8 6.1628 7 2.2516 6 4.2982 7 33.6254 8 3.0501 9 23.3057 9 9.9231 9 57.3721 9 4.086 5 9.5626 9 9.4072 6 55.8983 9 20.8462 6 43.4849 8)
Average genome size in population (length): 77.539
Average program size in population (points): 78.539
Average percent parens in population: 0.013
Minimum age in population: 233.8284819720817
Maximum age in population: 238.9076831002818
Average age in population: 236.842428116266
Median age in population: 236.8811902997489
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 7
Genome diversity (% unique Plush genomes):	 0.853
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 7
Syntactic diversity (% unique Push programs):	 0.853
Total error diversity:				 0.217
Error (vector) diversity:			 0.254
Behavioral diversity:				 0.254
--- Run Statistics ---
Number of program evaluations used so far: 171000
Number of point (instruction) evaluations so far: 370655741
--- Timings ---
Current time: 1529615843101 milliseconds
Total Time:         689.7 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       233.9 seconds, 33.9%
Fitness Testing:    361.6 seconds, 52.4%
Report:              94.0 seconds, 13.6%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 170
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 171
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 171
;;******************************
;; -*- Number IO problem report - generation 171
Test total error for best: 59998.23050000004
Test mean error for best: 29.99912
;;------------------------------
Outputs of best individual on training cases:
Correct output: -57.4559422311 | Program output: -74.023617    
Correct output: -71.0754923621 | Program output: -65.023617    
Correct output: -66.5176295557 | Program output: -77.023617    
Correct output: 149.3187378    | Program output: 86.028727     
Correct output: -36.5450493525 | Program output: -83.023617    
Correct output: 75.4021928097  | Program output: 48.024907     
Correct output: 52.2615929867  | Program output: 74.027527     
Correct output: -19.2178367434 | Program output: 43.024417     
Correct output: 66.7518906772  | Program output: 1.023617      
Correct output: 7.673605441    | Program output: 27.023607     
Correct output: 23.6294031682  | Program output: 90.029107     
Correct output: -6.1389033433  | Program output: 38.023927     
Correct output: 9.2516366816   | Program output: -82.023627    
Correct output: 31.3251776267  | Program output: -55.023627    
Correct output: 73.3746496408  | Program output: 0.023607      
Correct output: 20.0500553336  | Program output: -19.023627    
Correct output: -23.2820697498 | Program output: 32.023627     
Correct output: 120.1004999359 | Program output: 30.023607     
Correct output: -155.453212395 | Program output: -98.023617    
Correct output: 31.10301576    | Program output: 10.023617     
Correct output: 45.5733057121  | Program output: -39.023607    
Correct output: -68.592783645  | Program output: -78.023607    
Correct output: -125.979392023 | Program output: -70.023627    
Correct output: -91.9273649148 | Program output: -71.023617    
Correct output: -92.5660607267 | Program output: -49.023627    
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_inc} {:instruction float_add} {:instruction float_yank} {:instruction float_dup_times} {:instruction 27} {:instruction float_sub} {:instruction float_div} {:instruction integer_sub} {:instruction 9} {:instruction float_rot} {:instruction integer_add} {:instruction integer_stackdepth} {:instruction float_mod} {:instruction in2} {:instruction integer_add} {:instruction integer_max} {:instruction float_yank} {:instruction integer_stackdepth} {:instruction integer_rot} {:instruction in2} {:instruction float_frominteger} {:instruction print_float} {:instruction integer_dup} {:instruction float_shove} {:instruction float_shove} {:instruction integer_add} {:instruction float_dup} {:instruction integer_dup} {:instruction integer_dup_items} {:instruction print_integer} {:instruction integer_min} {:instruction integer_yank} {:instruction float_dup} {:instruction print_integer} {:instruction integer_shove} {:instruction float_flush} {:instruction print_integer} {:instruction float_dup_items} {:instruction float_mult} {:instruction integer_shove} {:instruction integer_max} {:instruction float_sin} {:instruction float_sub} {:instruction in2} {:instruction float_mult} {:instruction integer_yank} {:instruction integer_max} {:instruction float_swap} {:instruction float_sin} {:instruction integer_stackdepth} {:instruction float_cos} {:instruction in2} {:instruction float_div} {:instruction integer_stackdepth} {:instruction float_frominteger} {:instruction integer_fromfloat} {:instruction integer_mod} {:instruction print_integer} {:instruction float_min} {:instruction integer_stackdepth} {:instruction tag_float_291} {:instruction 6} {:instruction tag_float_172} {:instruction integer_stackdepth} {:instruction tag_float_218} {:instruction 6} {:instruction tag_float_208} {:instruction integer_inc} {:instruction float_swap} {:instruction print_integer})
Best program: (integer_inc float_add float_yank float_dup_times 27 float_sub float_div integer_sub 9 float_rot integer_add integer_stackdepth float_mod in2 integer_add integer_max float_yank integer_stackdepth integer_rot in2 float_frominteger print_float integer_dup float_shove float_shove integer_add float_dup integer_dup integer_dup_items print_integer integer_min integer_yank float_dup print_integer integer_shove float_flush print_integer float_dup_items float_mult integer_shove integer_max float_sin float_sub in2 float_mult integer_yank integer_max float_swap float_sin integer_stackdepth float_cos in2 float_div integer_stackdepth float_frominteger integer_fromfloat integer_mod print_integer float_min integer_stackdepth tag_float_291 6 tag_float_172 integer_stackdepth tag_float_218 6 tag_float_208 integer_inc float_swap print_integer)
Errors: [16.5677 9 6.0519 8 10.506 10 63.29 7 46.4786 10 27.3773 7 21.7659 9 62.2423 12 65.7283 10 19.35 7 66.3997 9 44.1628 9 91.2753 9 86.3488 9 73.351 10 39.0737 11 55.3057 9 90.0769 11 57.4296 10 21.0794 7 84.5969 10 9.4308 7 55.9558 10 20.9037 7 43.5424 9]
Total: 1404.2905
Mean: 28.08581
Genome size: 70
Size: 71
Percent parens: 0.014
--- Population Statistics ---
Average total errors in population: 4119.101471000004
Median total errors in population: 1404.2905
Error averages by case: (154.4977245000011 9.431 146.82284450000097 8.649 149.52060809999787 10.206 143.8402662999986 7.636 179.4378477000013 10.396 110.80246259999818 7.588 106.50113289999913 9.47 142.8381239999996 11.85 142.09347470000054 10.192 103.92686420000072 7.676 146.27137859999922 9.35 126.47944750000146 9.297 216.73637120000095 9.498 212.58117210000307 9.512 148.90318399999833 10.249 162.9951397999994 11.254 136.7659240999985 9.527 167.52564179999794 10.963 191.53569610000153 10.378 104.65159610000092 7.34 211.2851738000016 10.489 148.5641546000012 7.763 189.9011660999987 10.216 159.69145439999858 7.798 178.88962130000215 9.315)
Error minima by case: (16.5448 8 6.0034 7 10.4841 9 22.3187 6 37.545 9 27.3032 6 21.7391 8 20.2178 10 39.7317 8 0.6736 6 3.3807 8 7.1793 7 0.1971 7 4.2949 7 33.6254 8 6.9499 9 24.3194 9 9.9261 9 57.3811 9 4.0828 6 18.5632 8 9.4079 6 55.9073 8 20.8552 6 43.4939 8)
Average genome size in population (length): 78.2
Average program size in population (points): 79.2
Average percent parens in population: 0.013
Minimum age in population: 235.631495190841
Maximum age in population: 240.5259116325618
Average age in population: 238.1968423892382
Median age in population: 238.2091727394991
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 7
Genome diversity (% unique Plush genomes):	 0.873
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 7
Syntactic diversity (% unique Push programs):	 0.873
Total error diversity:				 0.221
Error (vector) diversity:			 0.274
Behavioral diversity:				 0.274
--- Run Statistics ---
Number of program evaluations used so far: 172000
Number of point (instruction) evaluations so far: 372611666
--- Timings ---
Current time: 1529615846774 milliseconds
Total Time:         693.4 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       235.3 seconds, 33.9%
Fitness Testing:    363.5 seconds, 52.4%
Report:              94.6 seconds, 13.6%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 171
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 172
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 172
;;******************************
;; -*- Number IO problem report - generation 172
Test total error for best: 59998.23050000004
Test mean error for best: 29.99912
;;------------------------------
Outputs of best individual on training cases:
Correct output: -57.4559422311 | Program output: -74.023617    
Correct output: -71.0754923621 | Program output: -65.023617    
Correct output: -66.5176295557 | Program output: -77.023617    
Correct output: 149.3187378    | Program output: 86.028727     
Correct output: -36.5450493525 | Program output: -83.023617    
Correct output: 75.4021928097  | Program output: 48.024907     
Correct output: 52.2615929867  | Program output: 74.027527     
Correct output: -19.2178367434 | Program output: 43.024417     
Correct output: 66.7518906772  | Program output: 1.023617      
Correct output: 7.673605441    | Program output: 27.023607     
Correct output: 23.6294031682  | Program output: 90.029107     
Correct output: -6.1389033433  | Program output: 38.023927     
Correct output: 9.2516366816   | Program output: -82.023627    
Correct output: 31.3251776267  | Program output: -55.023627    
Correct output: 73.3746496408  | Program output: 0.023607      
Correct output: 20.0500553336  | Program output: -19.023627    
Correct output: -23.2820697498 | Program output: 32.023627     
Correct output: 120.1004999359 | Program output: 30.023607     
Correct output: -155.453212395 | Program output: -98.023617    
Correct output: 31.10301576    | Program output: 10.023617     
Correct output: 45.5733057121  | Program output: -39.023607    
Correct output: -68.592783645  | Program output: -78.023607    
Correct output: -125.979392023 | Program output: -70.023627    
Correct output: -91.9273649148 | Program output: -71.023617    
Correct output: -92.5660607267 | Program output: -49.023627    
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_yank} {:instruction integer_dup} {:instruction float_min} {:instruction float_sub} {:instruction float_dup} {:instruction float_add} {:instruction float_add} {:instruction integer_min} {:instruction integer_inc} {:instruction float_add} {:instruction float_yank} {:instruction integer_dup_times} {:instruction float_min} {:instruction integer_div} {:instruction 27} {:instruction integer_mod} {:instruction integer_div} {:instruction integer_div} {:instruction 9} {:instruction float_yankdup} {:instruction float_rot} {:instruction integer_add} {:instruction integer_stackdepth} {:instruction float_add} {:instruction in2} {:instruction integer_add} {:instruction integer_max} {:instruction float_yank} {:instruction integer_stackdepth} {:instruction float_flush} {:instruction in2} {:instruction float_frominteger} {:instruction print_float} {:instruction integer_dup} {:instruction float_shove} {:instruction float_shove} {:instruction integer_add} {:instruction float_mod} {:instruction integer_dup} {:instruction float_swap} {:instruction print_integer} {:instruction integer_yankdup} {:instruction float_flush} {:instruction print_integer} {:instruction float_rot} {:instruction integer_dup} {:instruction float_sin} {:instruction float_sub} {:instruction in2} {:instruction integer_sub} {:instruction integer_min} {:instruction integer_max} {:instruction float_swap} {:instruction float_sin} {:instruction integer_stackdepth} {:instruction float_add} {:instruction in2} {:instruction float_div} {:instruction integer_stackdepth} {:instruction float_frominteger} {:instruction integer_fromfloat} {:instruction integer_mod} {:instruction print_integer} {:instruction float_min} {:instruction float_mod} {:instruction tag_float_291} {:instruction 6} {:instruction tag_float_203} {:instruction integer_inc} {:instruction float_swap} {:instruction print_integer})
Best program: (float_yank integer_dup float_min float_sub float_dup float_add float_add integer_min integer_inc float_add float_yank integer_dup_times float_min integer_div 27 integer_mod integer_div integer_div 9 float_yankdup float_rot integer_add integer_stackdepth float_add in2 integer_add integer_max float_yank integer_stackdepth float_flush in2 float_frominteger print_float integer_dup float_shove float_shove integer_add float_mod integer_dup float_swap print_integer integer_yankdup float_flush print_integer float_rot integer_dup float_sin float_sub in2 integer_sub integer_min integer_max float_swap float_sin integer_stackdepth float_add in2 float_div integer_stackdepth float_frominteger integer_fromfloat integer_mod print_integer float_min float_mod tag_float_291 6 tag_float_203 integer_inc float_swap print_integer)
Errors: [16.5677 9 6.0519 8 10.506 10 63.29 7 46.4786 10 27.3773 7 21.7659 9 62.2423 12 65.7283 10 19.35 7 66.3997 9 44.1628 9 91.2753 9 86.3488 9 73.351 10 39.0737 11 55.3057 9 90.0769 11 57.4296 10 21.0794 7 84.5969 10 9.4308 7 55.9558 10 20.9037 7 43.5424 9]
Total: 1404.2905
Mean: 28.08581
Genome size: 71
Size: 72
Percent parens: 0.014
--- Population Statistics ---
Average total errors in population: 4279.716859000003
Median total errors in population: 1404.2905
Error averages by case: (159.5606218000014 9.504 151.0595738000004 8.754 154.70226449999808 10.225 153.62908839999912 7.677 184.20770930000117 10.455 120.96798869999797 7.626 116.10785349999917 9.496 152.01310710000024 11.859 147.86575650000003 10.178 113.24669540000122 7.73 155.65405829999972 9.409 135.79910070000096 9.345 221.04000000000104 9.536 216.70031350000292 9.519 153.59317919999842 10.249 163.6629628999995 11.297 145.93534429999872 9.553 176.63856489999782 11.006 195.69919750000145 10.44 114.69302590000088 7.328 215.3414839000015 10.453 153.63152670000102 7.812 194.07511279999875 10.255 163.87355339999857 7.884 183.06777600000197 9.361)
Error minima by case: (16.5442 8 5.9871 7 10.4825 9 36.7049 5 37.5687 9 26.3952 6 21.7387 8 20.2423 9 30.7349 8 0.6736 6 3.3706 8 7.1628 7 2.2516 7 4.3252 7 33.6254 8 3.0501 9 24.3057 9 9.9231 9 57.3649 9 4.103 5 9.5563 9 9.4073 6 55.891 9 20.839 6 43.4777 8)
Average genome size in population (length): 77.732
Average program size in population (points): 78.732
Average percent parens in population: 0.013
Minimum age in population: 237.0650460425913
Maximum age in population: 241.7360342001852
Average age in population: 239.5458085340583
Median age in population: 239.5574376216888
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 6
Genome diversity (% unique Plush genomes):	 0.873
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 6
Syntactic diversity (% unique Push programs):	 0.873
Total error diversity:				 0.243
Error (vector) diversity:			 0.287
Behavioral diversity:				 0.287
--- Run Statistics ---
Number of program evaluations used so far: 173000
Number of point (instruction) evaluations so far: 374555591
--- Timings ---
Current time: 1529615850732 milliseconds
Total Time:         697.3 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       236.6 seconds, 33.9%
Fitness Testing:    365.5 seconds, 52.4%
Report:              95.1 seconds, 13.6%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 172
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 173
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 173
;;******************************
;; -*- Number IO problem report - generation 173
Test total error for best: 59998.23050000004
Test mean error for best: 29.99912
;;------------------------------
Outputs of best individual on training cases:
Correct output: -57.4559422311 | Program output: -74.023617    
Correct output: -71.0754923621 | Program output: -65.023617    
Correct output: -66.5176295557 | Program output: -77.023617    
Correct output: 149.3187378    | Program output: 86.028727     
Correct output: -36.5450493525 | Program output: -83.023617    
Correct output: 75.4021928097  | Program output: 48.024907     
Correct output: 52.2615929867  | Program output: 74.027527     
Correct output: -19.2178367434 | Program output: 43.024417     
Correct output: 66.7518906772  | Program output: 1.023617      
Correct output: 7.673605441    | Program output: 27.023607     
Correct output: 23.6294031682  | Program output: 90.029107     
Correct output: -6.1389033433  | Program output: 38.023927     
Correct output: 9.2516366816   | Program output: -82.023627    
Correct output: 31.3251776267  | Program output: -55.023627    
Correct output: 73.3746496408  | Program output: 0.023607      
Correct output: 20.0500553336  | Program output: -19.023627    
Correct output: -23.2820697498 | Program output: 32.023627     
Correct output: 120.1004999359 | Program output: 30.023607     
Correct output: -155.453212395 | Program output: -98.023617    
Correct output: 31.10301576    | Program output: 10.023617     
Correct output: 45.5733057121  | Program output: -39.023607    
Correct output: -68.592783645  | Program output: -78.023607    
Correct output: -125.979392023 | Program output: -70.023627    
Correct output: -91.9273649148 | Program output: -71.023617    
Correct output: -92.5660607267 | Program output: -49.023627    
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_dup_items} {:instruction float_add} {:instruction float_yank} {:instruction integer_dup} {:instruction print_float} {:instruction 27} {:instruction float_mult} {:instruction integer_div} {:instruction float_inc} {:instruction float_dup} {:instruction float_mult} {:instruction float_tan} {:instruction 9} {:instruction integer_add} {:instruction integer_stackdepth} {:instruction in1} {:instruction in2} {:instruction tag_float_196} {:instruction float_swap} {:instruction float_rot} {:instruction integer_add} {:instruction integer_max} {:instruction integer_max} {:instruction float_max} {:instruction integer_stackdepth} {:instruction float_min} {:instruction in2} {:instruction float_frominteger} {:instruction print_float} {:instruction integer_dup} {:instruction float_shove} {:instruction float_shove} {:instruction integer_inc} {:instruction float_mod} {:instruction integer_dup} {:instruction integer_dup_items} {:instruction print_integer} {:instruction integer_shove} {:instruction integer_shove} {:instruction print_integer} {:instruction integer_yank} {:instruction float_swap} {:instruction float_mult} {:instruction float_min} {:instruction integer_max} {:instruction integer_mult} {:instruction integer_stackdepth} {:instruction float_mod} {:instruction in2} {:instruction float_mult} {:instruction integer_stackdepth} {:instruction float_frominteger} {:instruction integer_fromfloat} {:instruction integer_mod} {:instruction print_integer} {:instruction float_min} {:instruction integer_stackdepth} {:instruction tagged_738} {:instruction 6} {:instruction tag_float_284} {:instruction integer_inc} {:instruction float_swap} {:instruction print_integer})
Best program: (float_dup_items float_add float_yank integer_dup print_float 27 float_mult integer_div float_inc float_dup float_mult float_tan 9 integer_add integer_stackdepth in1 in2 tag_float_196 float_swap float_rot integer_add integer_max integer_max float_max integer_stackdepth float_min in2 float_frominteger print_float integer_dup float_shove float_shove integer_inc float_mod integer_dup integer_dup_items print_integer integer_shove integer_shove print_integer integer_yank float_swap float_mult float_min integer_max integer_mult integer_stackdepth float_mod in2 float_mult integer_stackdepth float_frominteger integer_fromfloat integer_mod print_integer float_min integer_stackdepth tagged_738 6 tag_float_284 integer_inc float_swap print_integer)
Errors: [16.5677 9 6.0519 8 10.506 10 63.29 7 46.4786 10 27.3773 7 21.7659 9 62.2423 12 65.7283 10 19.35 7 66.3997 9 44.1628 9 91.2753 9 86.3488 9 73.351 10 39.0737 11 55.3057 9 90.0769 11 57.4296 10 21.0794 7 84.5969 10 9.4308 7 55.9558 10 20.9037 7 43.5424 9]
Total: 1404.2905
Mean: 28.08581
Genome size: 63
Size: 64
Percent parens: 0.016
--- Population Statistics ---
Average total errors in population: 4011.404556000003
Median total errors in population: 1404.2905
Error averages by case: (149.63606300000077 9.466 142.02806720000075 8.644 144.70822259999855 10.212 141.21003529999885 7.625 174.49158730000113 10.386 107.50950579999862 7.597 103.75754419999932 9.473 139.8320049999997 11.838 136.78254470000073 10.168 100.61794120000062 7.68 144.04564879999955 9.382 123.27798560000099 9.288 211.59928470000065 9.474 207.30326210000294 9.503 143.4780984999988 10.233 155.80444519999932 11.258 133.56714619999875 9.538 163.95910689999863 10.96 187.20409950000146 10.399 101.12440900000082 7.316 205.09225970000165 10.456 143.7610344000009 7.734 185.41082329999884 10.225 154.99563099999895 7.814 174.2298048000017 9.309)
Error minima by case: (16.5442 8 5.9843 7 10.4825 8 22.3187 6 35.7882 9 24.5978 6 21.7387 8 18.461 9 24.2703 8 0.6736 6 3.3706 7 5.3821 7 2.2516 7 4.3182 7 16.6474 8 3.0501 9 22.5253 9 8.0235 9 57.362 9 4.096 6 9.5663 9 9.4073 6 55.8881 9 20.8362 6 43.4748 8)
Average genome size in population (length): 77.03
Average program size in population (points): 78.03
Average percent parens in population: 0.013
Minimum age in population: 238.3481298402346
Maximum age in population: 242.8179037403817
Average age in population: 240.9860084434776
Median age in population: 241.037018060318
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 8
Genome diversity (% unique Plush genomes):	 0.89
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 8
Syntactic diversity (% unique Push programs):	 0.89
Total error diversity:				 0.238
Error (vector) diversity:			 0.287
Behavioral diversity:				 0.287
--- Run Statistics ---
Number of program evaluations used so far: 174000
Number of point (instruction) evaluations so far: 376482066
--- Timings ---
Current time: 1529615854536 milliseconds
Total Time:         701.2 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       238.0 seconds, 33.9%
Fitness Testing:    367.5 seconds, 52.4%
Report:              95.6 seconds, 13.6%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 173
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 174
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 174
;;******************************
;; -*- Number IO problem report - generation 174
Test total error for best: 59998.23050000004
Test mean error for best: 29.99912
;;------------------------------
Outputs of best individual on training cases:
Correct output: -57.4559422311 | Program output: -74.023617    
Correct output: -71.0754923621 | Program output: -65.023617    
Correct output: -66.5176295557 | Program output: -77.023617    
Correct output: 149.3187378    | Program output: 86.028727     
Correct output: -36.5450493525 | Program output: -83.023617    
Correct output: 75.4021928097  | Program output: 48.024907     
Correct output: 52.2615929867  | Program output: 74.027527     
Correct output: -19.2178367434 | Program output: 43.024417     
Correct output: 66.7518906772  | Program output: 1.023617      
Correct output: 7.673605441    | Program output: 27.023607     
Correct output: 23.6294031682  | Program output: 90.029107     
Correct output: -6.1389033433  | Program output: 38.023927     
Correct output: 9.2516366816   | Program output: -82.023627    
Correct output: 31.3251776267  | Program output: -55.023627    
Correct output: 73.3746496408  | Program output: 0.023607      
Correct output: 20.0500553336  | Program output: -19.023627    
Correct output: -23.2820697498 | Program output: 32.023627     
Correct output: 120.1004999359 | Program output: 30.023607     
Correct output: -155.453212395 | Program output: -98.023617    
Correct output: 31.10301576    | Program output: 10.023617     
Correct output: 45.5733057121  | Program output: -39.023607    
Correct output: -68.592783645  | Program output: -78.023607    
Correct output: -125.979392023 | Program output: -70.023627    
Correct output: -91.9273649148 | Program output: -71.023617    
Correct output: -92.5660607267 | Program output: -49.023627    
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_inc} {:instruction integer_inc} {:instruction float_min} {:instruction float_min} {:instruction integer_flush} {:instruction integer_div} {:instruction 27} {:instruction float_mult} {:instruction integer_sub} {:instruction 9} {:instruction integer_add} {:instruction integer_stackdepth} {:instruction float_frominteger} {:instruction tag_float_196} {:instruction float_swap} {:instruction float_rot} {:instruction integer_add} {:instruction integer_stackdepth} {:instruction float_add} {:instruction in2} {:instruction tag_float_196} {:instruction float_min} {:instruction float_rot} {:instruction integer_add} {:instruction integer_max} {:instruction float_max} {:instruction integer_stackdepth} {:instruction in2} {:instruction float_frominteger} {:instruction print_float} {:instruction integer_dup} {:instruction float_shove} {:instruction float_shove} {:instruction integer_inc} {:instruction float_dup} {:instruction print_integer} {:instruction float_mult} {:instruction integer_div} {:instruction float_pop} {:instruction integer_yank} {:instruction integer_max} {:instruction float_sub} {:instruction integer_max} {:instruction print_integer} {:instruction float_min} {:instruction integer_stackdepth} {:instruction tag_float_291} {:instruction integer_max} {:instruction integer_dup_times} {:instruction float_swap} {:instruction float_sin} {:instruction integer_stackdepth} {:instruction float_cos} {:instruction in2} {:instruction float_div} {:instruction integer_stackdepth} {:instruction float_frominteger} {:instruction integer_fromfloat} {:instruction integer_mod} {:instruction print_integer} {:instruction float_min} {:instruction integer_stackdepth} {:instruction tag_float_291} {:instruction 6} {:instruction tag_float_172} {:instruction integer_stackdepth} {:instruction tag_float_218} {:instruction 6} {:instruction tag_float_208} {:instruction integer_inc} {:instruction float_swap} {:instruction print_integer})
Best program: (integer_inc integer_inc float_min float_min integer_flush integer_div 27 float_mult integer_sub 9 integer_add integer_stackdepth float_frominteger tag_float_196 float_swap float_rot integer_add integer_stackdepth float_add in2 tag_float_196 float_min float_rot integer_add integer_max float_max integer_stackdepth in2 float_frominteger print_float integer_dup float_shove float_shove integer_inc float_dup print_integer float_mult integer_div float_pop integer_yank integer_max float_sub integer_max print_integer float_min integer_stackdepth tag_float_291 integer_max integer_dup_times float_swap float_sin integer_stackdepth float_cos in2 float_div integer_stackdepth float_frominteger integer_fromfloat integer_mod print_integer float_min integer_stackdepth tag_float_291 6 tag_float_172 integer_stackdepth tag_float_218 6 tag_float_208 integer_inc float_swap print_integer)
Errors: [16.5677 9 6.0519 8 10.506 10 63.29 7 46.4786 10 27.3773 7 21.7659 9 62.2423 12 65.7283 10 19.35 7 66.3997 9 44.1628 9 91.2753 9 86.3488 9 73.351 10 39.0737 11 55.3057 9 90.0769 11 57.4296 10 21.0794 7 84.5969 10 9.4308 7 55.9558 10 20.9037 7 43.5424 9]
Total: 1404.2905
Mean: 28.08581
Genome size: 72
Size: 73
Percent parens: 0.014
--- Population Statistics ---
Average total errors in population: 4397.465127000001
Median total errors in population: 1404.2905
Error averages by case: (166.58764120000222 9.459 158.19321730000007 8.658 161.8208078999978 10.182 156.87445219999933 7.609 190.99360000000115 10.398 122.75295109999763 7.554 119.4986739999991 9.42 154.12046620000027 11.841 152.55645520000004 10.19 114.57037940000143 7.631 157.97173990000005 9.329 138.798577200001 9.317 227.33991580000134 9.45 223.19699510000345 9.461 154.70347949999822 10.207 173.38353370000013 11.255 147.90848789999853 9.514 177.86770719999726 10.993 202.4278068000016 10.381 116.03558880000116 7.298 222.03433080000184 10.43 160.85586720000097 7.737 200.64760079999843 10.228 170.92325459999844 7.76 189.75859720000227 9.341)
Error minima by case: (16.5458 8 6.0028 7 10.4841 8 62.2487 6 37.5687 9 26.3322 6 5.2616 8 20.2415 10 30.6819 8 0.6736 6 3.3706 8 7.1625 8 2.2516 7 4.3252 7 26.6254 8 3.0501 9 24.3057 8 84.0305 8 57.3805 9 4.103 6 9.5033 9 9.4079 6 55.9067 9 20.8546 6 43.4933 8)
Average genome size in population (length): 76.539
Average program size in population (points): 77.539
Average percent parens in population: 0.013
Minimum age in population: 240.2429888700005
Maximum age in population: 244.5155039681781
Average age in population: 242.403026970519
Median age in population: 242.4110741145844
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 7
Genome diversity (% unique Plush genomes):	 0.861
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 7
Syntactic diversity (% unique Push programs):	 0.861
Total error diversity:				 0.231
Error (vector) diversity:			 0.279
Behavioral diversity:				 0.279
--- Run Statistics ---
Number of program evaluations used so far: 175000
Number of point (instruction) evaluations so far: 378396291
--- Timings ---
Current time: 1529615858418 milliseconds
Total Time:         705.0 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       239.3 seconds, 33.9%
Fitness Testing:    369.5 seconds, 52.4%
Report:              96.1 seconds, 13.6%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 174
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 175
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 175
;;******************************
;; -*- Number IO problem report - generation 175
Test total error for best: 59998.23050000004
Test mean error for best: 29.99912
;;------------------------------
Outputs of best individual on training cases:
Correct output: -57.4559422311 | Program output: -74.023617    
Correct output: -71.0754923621 | Program output: -65.023617    
Correct output: -66.5176295557 | Program output: -77.023617    
Correct output: 149.3187378    | Program output: 86.028727     
Correct output: -36.5450493525 | Program output: -83.023617    
Correct output: 75.4021928097  | Program output: 48.024907     
Correct output: 52.2615929867  | Program output: 74.027527     
Correct output: -19.2178367434 | Program output: 43.024417     
Correct output: 66.7518906772  | Program output: 1.023617      
Correct output: 7.673605441    | Program output: 27.023607     
Correct output: 23.6294031682  | Program output: 90.029107     
Correct output: -6.1389033433  | Program output: 38.023927     
Correct output: 9.2516366816   | Program output: -82.023627    
Correct output: 31.3251776267  | Program output: -55.023627    
Correct output: 73.3746496408  | Program output: 0.023607      
Correct output: 20.0500553336  | Program output: -19.023627    
Correct output: -23.2820697498 | Program output: 32.023627     
Correct output: 120.1004999359 | Program output: 30.023607     
Correct output: -155.453212395 | Program output: -98.023617    
Correct output: 31.10301576    | Program output: 10.023617     
Correct output: 45.5733057121  | Program output: -39.023607    
Correct output: -68.592783645  | Program output: -78.023607    
Correct output: -125.979392023 | Program output: -70.023627    
Correct output: -91.9273649148 | Program output: -71.023617    
Correct output: -92.5660607267 | Program output: -49.023627    
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_inc} {:instruction integer_add} {:instruction float_min} {:instruction float_cos} {:instruction float_add} {:instruction float_yank} {:instruction integer_dup} {:instruction print_float} {:instruction 27} {:instruction float_mult} {:instruction integer_div} {:instruction float_min} {:instruction float_dup_times} {:instruction integer_min} {:instruction integer_shove} {:instruction float_mod} {:instruction float_yank} {:instruction integer_sub} {:instruction 9} {:instruction float_yankdup} {:instruction integer_stackdepth} {:instruction float_frominteger} {:instruction tag_float_196} {:instruction float_swap} {:instruction float_rot} {:instruction integer_add} {:instruction integer_stackdepth} {:instruction float_mod} {:instruction in2} {:instruction integer_add} {:instruction integer_max} {:instruction float_yank} {:instruction integer_stackdepth} {:instruction integer_mult} {:instruction integer_add} {:instruction integer_max} {:instruction integer_max} {:instruction integer_stackdepth} {:instruction float_flush} {:instruction in2} {:instruction float_frominteger} {:instruction print_float} {:instruction integer_dup} {:instruction float_div} {:instruction integer_inc} {:instruction integer_max} {:instruction print_integer} {:instruction float_min} {:instruction print_integer} {:instruction integer_yank} {:instruction float_stackdepth} {:instruction integer_max} {:instruction integer_fromfloat} {:instruction integer_stackdepth} {:instruction integer_sub} {:instruction integer_fromfloat} {:instruction integer_stackdepth} {:instruction integer_swap} {:instruction in2} {:instruction float_mult} {:instruction float_inc} {:instruction integer_stackdepth} {:instruction float_frominteger} {:instruction integer_fromfloat} {:instruction integer_mod} {:instruction print_integer} {:instruction float_min} {:instruction integer_stackdepth} {:instruction tag_float_291} {:instruction 6} {:instruction integer_stackdepth} {:instruction float_dec} {:instruction 6} {:instruction tag_float_291} {:instruction integer_inc} {:instruction float_swap} {:instruction print_integer})
Best program: (float_inc integer_add float_min float_cos float_add float_yank integer_dup print_float 27 float_mult integer_div float_min float_dup_times integer_min integer_shove float_mod float_yank integer_sub 9 float_yankdup integer_stackdepth float_frominteger tag_float_196 float_swap float_rot integer_add integer_stackdepth float_mod in2 integer_add integer_max float_yank integer_stackdepth integer_mult integer_add integer_max integer_max integer_stackdepth float_flush in2 float_frominteger print_float integer_dup float_div integer_inc integer_max print_integer float_min print_integer integer_yank float_stackdepth integer_max integer_fromfloat integer_stackdepth integer_sub integer_fromfloat integer_stackdepth integer_swap in2 float_mult float_inc integer_stackdepth float_frominteger integer_fromfloat integer_mod print_integer float_min integer_stackdepth tag_float_291 6 integer_stackdepth float_dec 6 tag_float_291 integer_inc float_swap print_integer)
Errors: [16.5677 9 6.0519 8 10.506 10 63.29 7 46.4786 10 27.3773 7 21.7659 9 62.2423 12 65.7283 10 19.35 7 66.3997 9 44.1628 9 91.2753 9 86.3488 9 73.351 10 39.0737 11 55.3057 9 90.0769 11 57.4296 10 21.0794 7 84.5969 10 9.4308 7 55.9558 10 20.9037 7 43.5424 9]
Total: 1404.2905
Mean: 28.08581
Genome size: 77
Size: 78
Percent parens: 0.013
--- Population Statistics ---
Average total errors in population: 4410.7671776
Median total errors in population: 1404.2905
Error averages by case: (168.88897340000165 9.499 161.3276049000004 8.702 164.0729988999978 10.214 153.87584329999908 7.613 193.35880090000134 10.423 121.0340004999974 7.581 117.81631509999917 9.455 153.57550870000023 11.846 149.15978880000011 10.188 114.97205720000159 7.702 157.29570459999954 9.381 137.25569300000126 9.314 229.85625210000174 9.507 225.5180316000033 9.471 151.31118699999828 10.227 174.43127349999946 11.271 147.34259649999865 9.54 176.58615969999727 11.014 205.55300850000168 10.41 114.51112050000089 7.303 223.43199010000177 10.437 163.13899350000105 7.812 203.6075360999984 10.233 173.9956943999984 7.827 192.56504480000223 9.315)
Error minima by case: (16.5441 8 5.9838 6 10.4825 8 62.2917 6 19.545 9 8.4022 6 14.7384 8 20.2178 6 1.0 5 0.6736 6 3.3706 8 7.1659 6 7.2516 5 4.3252 6 0.0 4 3.0501 6 24.3091 6 30.0 6 57.3615 6 4.103 5 9.5663 6 9.4073 7 55.8867 6 20.8357 6 43.4734 6)
Average genome size in population (length): 76.656
Average program size in population (points): 77.656
Average percent parens in population: 0.013
Minimum age in population: 241.4273161106244
Maximum age in population: 245.745681389552
Average age in population: 243.8097915065353
Median age in population: 243.8776630927305
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 11
Genome diversity (% unique Plush genomes):	 0.859
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 11
Syntactic diversity (% unique Push programs):	 0.859
Total error diversity:				 0.221
Error (vector) diversity:			 0.262
Behavioral diversity:				 0.263
--- Run Statistics ---
Number of program evaluations used so far: 176000
Number of point (instruction) evaluations so far: 380313366
--- Timings ---
Current time: 1529615862414 milliseconds
Total Time:         709.1 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       240.6 seconds, 33.9%
Fitness Testing:    371.7 seconds, 52.4%
Report:              96.7 seconds, 13.6%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 175
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 176
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 176
;;******************************
;; -*- Number IO problem report - generation 176
Test total error for best: 59998.23050000004
Test mean error for best: 29.99912
;;------------------------------
Outputs of best individual on training cases:
Correct output: -57.4559422311 | Program output: -74.023617    
Correct output: -71.0754923621 | Program output: -65.023617    
Correct output: -66.5176295557 | Program output: -77.023617    
Correct output: 149.3187378    | Program output: 86.028727     
Correct output: -36.5450493525 | Program output: -83.023617    
Correct output: 75.4021928097  | Program output: 48.024907     
Correct output: 52.2615929867  | Program output: 74.027527     
Correct output: -19.2178367434 | Program output: 43.024417     
Correct output: 66.7518906772  | Program output: 1.023617      
Correct output: 7.673605441    | Program output: 27.023607     
Correct output: 23.6294031682  | Program output: 90.029107     
Correct output: -6.1389033433  | Program output: 38.023927     
Correct output: 9.2516366816   | Program output: -82.023627    
Correct output: 31.3251776267  | Program output: -55.023627    
Correct output: 73.3746496408  | Program output: 0.023607      
Correct output: 20.0500553336  | Program output: -19.023627    
Correct output: -23.2820697498 | Program output: 32.023627     
Correct output: 120.1004999359 | Program output: 30.023607     
Correct output: -155.453212395 | Program output: -98.023617    
Correct output: 31.10301576    | Program output: 10.023617     
Correct output: 45.5733057121  | Program output: -39.023607    
Correct output: -68.592783645  | Program output: -78.023607    
Correct output: -125.979392023 | Program output: -70.023627    
Correct output: -91.9273649148 | Program output: -71.023617    
Correct output: -92.5660607267 | Program output: -49.023627    
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_dup_items} {:instruction float_add} {:instruction float_yank} {:instruction integer_dup} {:instruction print_float} {:instruction 27} {:instruction float_mult} {:instruction integer_div} {:instruction float_inc} {:instruction float_dup} {:instruction float_mult} {:instruction float_tan} {:instruction 9} {:instruction integer_add} {:instruction integer_stackdepth} {:instruction in1} {:instruction in2} {:instruction tag_float_196} {:instruction float_swap} {:instruction float_rot} {:instruction integer_add} {:instruction integer_max} {:instruction integer_max} {:instruction float_max} {:instruction integer_stackdepth} {:instruction float_min} {:instruction in2} {:instruction float_frominteger} {:instruction print_float} {:instruction integer_dup} {:instruction float_shove} {:instruction float_shove} {:instruction integer_inc} {:instruction float_mod} {:instruction integer_dup} {:instruction integer_dup_items} {:instruction print_integer} {:instruction integer_shove} {:instruction integer_shove} {:instruction print_integer} {:instruction integer_yank} {:instruction float_swap} {:instruction float_mult} {:instruction float_min} {:instruction integer_max} {:instruction integer_mult} {:instruction integer_stackdepth} {:instruction float_mod} {:instruction in2} {:instruction float_mult} {:instruction integer_stackdepth} {:instruction float_frominteger} {:instruction integer_fromfloat} {:instruction integer_mod} {:instruction print_integer} {:instruction float_min} {:instruction integer_stackdepth} {:instruction tag_float_291} {:instruction 6} {:instruction tag_float_284} {:instruction integer_inc} {:instruction float_swap} {:instruction print_integer})
Best program: (float_dup_items float_add float_yank integer_dup print_float 27 float_mult integer_div float_inc float_dup float_mult float_tan 9 integer_add integer_stackdepth in1 in2 tag_float_196 float_swap float_rot integer_add integer_max integer_max float_max integer_stackdepth float_min in2 float_frominteger print_float integer_dup float_shove float_shove integer_inc float_mod integer_dup integer_dup_items print_integer integer_shove integer_shove print_integer integer_yank float_swap float_mult float_min integer_max integer_mult integer_stackdepth float_mod in2 float_mult integer_stackdepth float_frominteger integer_fromfloat integer_mod print_integer float_min integer_stackdepth tag_float_291 6 tag_float_284 integer_inc float_swap print_integer)
Errors: [16.5677 9 6.0519 8 10.506 10 63.29 7 46.4786 10 27.3773 7 21.7659 9 62.2423 12 65.7283 10 19.35 7 66.3997 9 44.1628 9 91.2753 9 86.3488 9 73.351 10 39.0737 11 55.3057 9 90.0769 11 57.4296 10 21.0794 7 84.5969 10 9.4308 7 55.9558 10 20.9037 7 43.5424 9]
Total: 1404.2905
Mean: 28.08581
Genome size: 63
Size: 64
Percent parens: 0.016
--- Population Statistics ---
Average total errors in population: 4164.930287300004
Median total errors in population: 1404.2905
Error averages by case: (155.9613592000014 9.47 147.50313630000065 8.652 151.10324479999807 10.201 147.77766389999897 7.65 180.4729344000013 10.407 115.03095659999808 7.618 109.81863589999921 9.462 145.8020751999999 11.851 141.8785300000004 10.177 107.25065250000107 7.666 149.1526450999996 9.386 129.49569300000138 9.304 217.17061140000126 9.524 213.10519120000308 9.503 143.8555556999984 10.239 168.67075329999986 11.25 139.78504759999873 9.532 171.03480099999788 10.979 192.4927708000016 10.418 108.75878150000086 7.322 211.90074990000167 10.452 150.24241400000102 7.773 190.5814083999988 10.211 160.46449429999853 7.848 179.41118130000197 9.314)
Error minima by case: (16.5442 8 6.0028 7 10.4825 8 22.3187 6 35.5767 9 3.1792 6 21.7387 7 18.3861 9 11.8295 7 0.6736 6 3.3706 8 6.1416 7 7.1796 7 4.3252 7 5.2067 6 3.0501 9 23.2848 8 9.9226 9 57.3805 9 4.103 5 0.5663 8 9.4072 6 55.9067 8 20.8546 6 43.4933 8)
Average genome size in population (length): 75.791
Average program size in population (points): 76.791
Average percent parens in population: 0.013
Minimum age in population: 242.9099149368287
Maximum age in population: 247.0726277306283
Average age in population: 245.2331958020639
Median age in population: 245.265150879483
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 10
Genome diversity (% unique Plush genomes):	 0.865
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 10
Syntactic diversity (% unique Push programs):	 0.865
Total error diversity:				 0.235
Error (vector) diversity:			 0.284
Behavioral diversity:				 0.284
--- Run Statistics ---
Number of program evaluations used so far: 177000
Number of point (instruction) evaluations so far: 382208916
--- Timings ---
Current time: 1529615865978 milliseconds
Total Time:         712.7 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       241.9 seconds, 33.9%
Fitness Testing:    373.5 seconds, 52.4%
Report:              97.1 seconds, 13.6%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 176
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 177
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 177
;;******************************
;; -*- Number IO problem report - generation 177
Test total error for best: 59998.23050000004
Test mean error for best: 29.99912
;;------------------------------
Outputs of best individual on training cases:
Correct output: -57.4559422311 | Program output: -74.023617    
Correct output: -71.0754923621 | Program output: -65.023617    
Correct output: -66.5176295557 | Program output: -77.023617    
Correct output: 149.3187378    | Program output: 86.028727     
Correct output: -36.5450493525 | Program output: -83.023617    
Correct output: 75.4021928097  | Program output: 48.024907     
Correct output: 52.2615929867  | Program output: 74.027527     
Correct output: -19.2178367434 | Program output: 43.024417     
Correct output: 66.7518906772  | Program output: 1.023617      
Correct output: 7.673605441    | Program output: 27.023607     
Correct output: 23.6294031682  | Program output: 90.029107     
Correct output: -6.1389033433  | Program output: 38.023927     
Correct output: 9.2516366816   | Program output: -82.023627    
Correct output: 31.3251776267  | Program output: -55.023627    
Correct output: 73.3746496408  | Program output: 0.023607      
Correct output: 20.0500553336  | Program output: -19.023627    
Correct output: -23.2820697498 | Program output: 32.023627     
Correct output: 120.1004999359 | Program output: 30.023607     
Correct output: -155.453212395 | Program output: -98.023617    
Correct output: 31.10301576    | Program output: 10.023617     
Correct output: 45.5733057121  | Program output: -39.023607    
Correct output: -68.592783645  | Program output: -78.023607    
Correct output: -125.979392023 | Program output: -70.023627    
Correct output: -91.9273649148 | Program output: -71.023617    
Correct output: -92.5660607267 | Program output: -49.023627    
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_inc} {:instruction integer_add} {:instruction float_yank} {:instruction float_rot} {:instruction float_dup_times} {:instruction float_rot} {:instruction float_add} {:instruction float_mult} {:instruction float_mult} {:instruction float_sub} {:instruction integer_dup} {:instruction print_float} {:instruction print_float} {:instruction integer_sub} {:instruction 27} {:instruction float_cos} {:instruction 9} {:instruction float_yankdup} {:instruction integer_stackdepth} {:instruction float_frominteger} {:instruction float_rot} {:instruction integer_add} {:instruction integer_stackdepth} {:instruction float_mod} {:instruction in2} {:instruction tag_float_196} {:instruction float_swap} {:instruction float_rot} {:instruction integer_add} {:instruction integer_max} {:instruction integer_stackdepth} {:instruction float_flush} {:instruction float_flush} {:instruction in2} {:instruction float_frominteger} {:instruction print_float} {:instruction integer_dup} {:instruction float_shove} {:instruction float_shove} {:instruction integer_add} {:instruction float_inc} {:instruction integer_dup} {:instruction integer_dup_items} {:instruction print_integer} {:instruction tag_integer_480} {:instruction integer_yank} {:instruction print_integer} {:instruction integer_yank} {:instruction integer_max} {:instruction integer_yankdup} {:instruction integer_stackdepth} {:instruction in2} {:instruction float_add} {:instruction in2} {:instruction integer_mod} {:instruction float_add} {:instruction in2} {:instruction float_rot} {:instruction integer_stackdepth} {:instruction float_frominteger} {:instruction integer_fromfloat} {:instruction integer_mod} {:instruction print_integer} {:instruction float_min} {:instruction float_mult} {:instruction tag_float_291} {:instruction 6} {:instruction tag_float_291} {:instruction integer_inc} {:instruction float_swap} {:instruction print_integer} {:instruction float_sub} {:instruction integer_stackdepth} {:instruction tag_float_291} {:instruction 8} {:instruction integer_stackdepth})
Best program: (float_inc integer_add float_yank float_rot float_dup_times float_rot float_add float_mult float_mult float_sub integer_dup print_float print_float integer_sub 27 float_cos 9 float_yankdup integer_stackdepth float_frominteger float_rot integer_add integer_stackdepth float_mod in2 tag_float_196 float_swap float_rot integer_add integer_max integer_stackdepth float_flush float_flush in2 float_frominteger print_float integer_dup float_shove float_shove integer_add float_inc integer_dup integer_dup_items print_integer tag_integer_480 integer_yank print_integer integer_yank integer_max integer_yankdup integer_stackdepth in2 float_add in2 integer_mod float_add in2 float_rot integer_stackdepth float_frominteger integer_fromfloat integer_mod print_integer float_min float_mult tag_float_291 6 tag_float_291 integer_inc float_swap print_integer float_sub integer_stackdepth tag_float_291 8 integer_stackdepth)
Errors: [16.5677 9 6.0519 8 10.506 10 63.29 7 46.4786 10 27.3773 7 21.7659 9 62.2423 12 65.7283 10 19.35 7 66.3997 9 44.1628 9 91.2753 9 86.3488 9 73.351 10 39.0737 11 55.3057 9 90.0769 11 57.4296 10 21.0794 7 84.5969 10 9.4308 7 55.9558 10 20.9037 7 43.5424 9]
Total: 1404.2905
Mean: 28.08581
Genome size: 76
Size: 77
Percent parens: 0.013
--- Population Statistics ---
Average total errors in population: 4167.456340700005
Median total errors in population: 1404.2905
Error averages by case: (157.74596470000117 9.494 150.32256890000085 8.695 152.96259039999796 10.232 144.7543799999987 7.643 182.44220490000123 10.412 111.78017879999794 7.618 108.54993539999923 9.499 143.86826369999946 11.845 142.1689963000007 10.209 105.08808950000119 7.725 147.30822369999933 9.408 128.35960860000154 9.336 219.05053830000142 9.474 214.90722620000298 9.524 144.1117956999984 10.237 165.77300769999945 11.27 137.69410239999857 9.563 167.37038309999824 10.966 195.88881010000154 10.391 104.56017880000091 7.313 212.8701203000016 10.462 151.94401170000103 7.799 194.10120329999856 10.232 164.15570839999873 7.854 183.13424980000195 9.343)
Error minima by case: (16.5441 8 5.9763 7 10.4824 9 22.3187 6 36.5824 9 26.3952 6 21.7384 8 19.2633 9 30.7349 9 0.6736 6 6.6294 8 6.1793 7 7.2516 7 3.6818 8 29.6254 7 6.9499 7 23.3194 9 9.9231 9 57.3541 9 3.904 5 9.5663 9 9.4072 6 55.8801 9 20.8282 6 43.4668 7)
Average genome size in population (length): 75.485
Average program size in population (points): 76.485
Average percent parens in population: 0.013
Minimum age in population: 244.4027932525133
Maximum age in population: 248.4669186331167
Average age in population: 246.6816292269542
Median age in population: 246.7423784545754
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 6
Genome diversity (% unique Plush genomes):	 0.881
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 6
Syntactic diversity (% unique Push programs):	 0.881
Total error diversity:				 0.237
Error (vector) diversity:			 0.273
Behavioral diversity:				 0.274
--- Run Statistics ---
Number of program evaluations used so far: 178000
Number of point (instruction) evaluations so far: 384097241
--- Timings ---
Current time: 1529615870105 milliseconds
Total Time:         716.6 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       243.4 seconds, 34.0%
Fitness Testing:    375.6 seconds, 52.4%
Report:              97.5 seconds, 13.6%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 177
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 178
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 178
;;******************************
;; -*- Number IO problem report - generation 178
Test total error for best: 59998.23050000004
Test mean error for best: 29.99912
;;------------------------------
Outputs of best individual on training cases:
Correct output: -57.4559422311 | Program output: -74.023617    
Correct output: -71.0754923621 | Program output: -65.023617    
Correct output: -66.5176295557 | Program output: -77.023617    
Correct output: 149.3187378    | Program output: 86.028727     
Correct output: -36.5450493525 | Program output: -83.023617    
Correct output: 75.4021928097  | Program output: 48.024907     
Correct output: 52.2615929867  | Program output: 74.027527     
Correct output: -19.2178367434 | Program output: 43.024417     
Correct output: 66.7518906772  | Program output: 1.023617      
Correct output: 7.673605441    | Program output: 27.023607     
Correct output: 23.6294031682  | Program output: 90.029107     
Correct output: -6.1389033433  | Program output: 38.023927     
Correct output: 9.2516366816   | Program output: -82.023627    
Correct output: 31.3251776267  | Program output: -55.023627    
Correct output: 73.3746496408  | Program output: 0.023607      
Correct output: 20.0500553336  | Program output: -19.023627    
Correct output: -23.2820697498 | Program output: 32.023627     
Correct output: 120.1004999359 | Program output: 30.023607     
Correct output: -155.453212395 | Program output: -98.023617    
Correct output: 31.10301576    | Program output: 10.023617     
Correct output: 45.5733057121  | Program output: -39.023607    
Correct output: -68.592783645  | Program output: -78.023607    
Correct output: -125.979392023 | Program output: -70.023627    
Correct output: -91.9273649148 | Program output: -71.023617    
Correct output: -92.5660607267 | Program output: -49.023627    
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_inc} {:instruction integer_add} {:instruction float_yank} {:instruction float_dup_times} {:instruction float_dup_times} {:instruction integer_inc} {:instruction integer_inc} {:instruction float_yank} {:instruction integer_dup_times} {:instruction integer_dup_times} {:instruction float_min} {:instruction float_shove} {:instruction float_cos} {:instruction print_float} {:instruction float_frominteger} {:instruction 27} {:instruction float_sub} {:instruction tagged_602} {:instruction float_mod} {:instruction 9} {:instruction tag_float_196} {:instruction float_swap} {:instruction float_rot} {:instruction integer_add} {:instruction integer_stackdepth} {:instruction float_yank} {:instruction in2} {:instruction integer_add} {:instruction integer_max} {:instruction float_yank} {:instruction integer_stackdepth} {:instruction float_flush} {:instruction in2} {:instruction float_frominteger} {:instruction print_float} {:instruction integer_dup} {:instruction float_shove} {:instruction float_shove} {:instruction integer_add} {:instruction float_mod} {:instruction integer_dup} {:instruction integer_dup_items} {:instruction print_integer} {:instruction integer_min} {:instruction integer_yank} {:instruction print_integer} {:instruction integer_yank} {:instruction integer_max} {:instruction integer_max} {:instruction integer_yank} {:instruction integer_stackdepth} {:instruction float_yankdup} {:instruction float_sin} {:instruction float_swap} {:instruction integer_mod} {:instruction in2} {:instruction float_mult} {:instruction integer_yank} {:instruction float_sin} {:instruction integer_stackdepth} {:instruction in2} {:instruction float_mult} {:instruction integer_stackdepth} {:instruction integer_fromfloat} {:instruction integer_fromfloat} {:instruction integer_mod} {:instruction print_integer} {:instruction float_min} {:instruction integer_dup_times} {:instruction integer_pop} {:instruction 6} {:instruction integer_inc} {:instruction float_swap} {:instruction print_integer})
Best program: (integer_inc integer_add float_yank float_dup_times float_dup_times integer_inc integer_inc float_yank integer_dup_times integer_dup_times float_min float_shove float_cos print_float float_frominteger 27 float_sub tagged_602 float_mod 9 tag_float_196 float_swap float_rot integer_add integer_stackdepth float_yank in2 integer_add integer_max float_yank integer_stackdepth float_flush in2 float_frominteger print_float integer_dup float_shove float_shove integer_add float_mod integer_dup integer_dup_items print_integer integer_min integer_yank print_integer integer_yank integer_max integer_max integer_yank integer_stackdepth float_yankdup float_sin float_swap integer_mod in2 float_mult integer_yank float_sin integer_stackdepth in2 float_mult integer_stackdepth integer_fromfloat integer_fromfloat integer_mod print_integer float_min integer_dup_times integer_pop 6 integer_inc float_swap print_integer)
Errors: [16.5677 9 6.0519 8 10.506 10 63.29 7 46.4786 10 27.3773 7 21.7659 9 62.2423 12 65.7283 10 19.35 7 66.3997 9 44.1628 9 91.2753 9 86.3488 9 73.351 10 39.0737 11 55.3057 9 90.0769 11 57.4296 10 21.0794 7 84.5969 10 9.4308 7 55.9558 10 20.9037 7 43.5424 9]
Total: 1404.2905
Mean: 28.08581
Genome size: 74
Size: 75
Percent parens: 0.013
--- Population Statistics ---
Average total errors in population: 4336.405156800002
Median total errors in population: 1405.2905500000002
Error averages by case: (169.01755250000247 9.484 161.77812919999974 8.712 164.310680199998 10.202 148.43365349999922 7.629 192.94895690000098 10.401 113.59009479999793 7.636 112.22617879999922 9.488 147.25351520000027 11.8 143.16271220000016 10.175 106.75658620000101 7.726 149.47246089999973 9.408 131.98110290000128 9.298 228.60801630000168 9.468 224.39579280000294 9.504 146.06073469999873 10.234 176.05058030000063 11.257 141.2960103999988 9.569 168.76435609999788 10.97 207.15158470000148 10.393 107.27885360000087 7.293 222.28164990000136 10.465 162.38542850000096 7.82 205.2217652999988 10.216 175.4847453999987 7.857 194.1420155000021 9.347)
Error minima by case: (16.5441 8 5.9838 7 10.4824 9 22.3187 6 37.562 9 1.3773 6 15.2346 8 19.2423 8 1.0 6 0.6736 6 3.3706 8 6.1628 7 2.2516 7 4.3252 8 0.0 5 3.0501 9 23.3057 8 9.926 8 57.3615 9 4.103 5 8.5663 9 9.4072 6 55.8867 9 20.8357 6 43.4734 8)
Average genome size in population (length): 75.581
Average program size in population (points): 76.581
Average percent parens in population: 0.013
Minimum age in population: 245.4027932525133
Maximum age in population: 249.8173827034625
Average age in population: 248.0643087962052
Median age in population: 248.1247814908631
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 5
Genome diversity (% unique Plush genomes):	 0.88
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 5
Syntactic diversity (% unique Push programs):	 0.88
Total error diversity:				 0.268
Error (vector) diversity:			 0.321
Behavioral diversity:				 0.321
--- Run Statistics ---
Number of program evaluations used so far: 179000
Number of point (instruction) evaluations so far: 385987816
--- Timings ---
Current time: 1529615873702 milliseconds
Total Time:         720.4 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       244.7 seconds, 34.0%
Fitness Testing:    377.4 seconds, 52.4%
Report:              98.2 seconds, 13.6%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 178
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 179
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 179
;;******************************
;; -*- Number IO problem report - generation 179
Test total error for best: 59998.23050000004
Test mean error for best: 29.99912
;;------------------------------
Outputs of best individual on training cases:
Correct output: -57.4559422311 | Program output: -74.023617    
Correct output: -71.0754923621 | Program output: -65.023617    
Correct output: -66.5176295557 | Program output: -77.023617    
Correct output: 149.3187378    | Program output: 86.028727     
Correct output: -36.5450493525 | Program output: -83.023617    
Correct output: 75.4021928097  | Program output: 48.024907     
Correct output: 52.2615929867  | Program output: 74.027527     
Correct output: -19.2178367434 | Program output: 43.024417     
Correct output: 66.7518906772  | Program output: 1.023617      
Correct output: 7.673605441    | Program output: 27.023607     
Correct output: 23.6294031682  | Program output: 90.029107     
Correct output: -6.1389033433  | Program output: 38.023927     
Correct output: 9.2516366816   | Program output: -82.023627    
Correct output: 31.3251776267  | Program output: -55.023627    
Correct output: 73.3746496408  | Program output: 0.023607      
Correct output: 20.0500553336  | Program output: -19.023627    
Correct output: -23.2820697498 | Program output: 32.023627     
Correct output: 120.1004999359 | Program output: 30.023607     
Correct output: -155.453212395 | Program output: -98.023617    
Correct output: 31.10301576    | Program output: 10.023617     
Correct output: 45.5733057121  | Program output: -39.023607    
Correct output: -68.592783645  | Program output: -78.023607    
Correct output: -125.979392023 | Program output: -70.023627    
Correct output: -91.9273649148 | Program output: -71.023617    
Correct output: -92.5660607267 | Program output: -49.023627    
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction print_integer} {:instruction float_sin} {:instruction float_swap} {:instruction integer_shove} {:instruction integer_div} {:instruction float_min} {:instruction float_cos} {:instruction float_dup_times} {:instruction float_max} {:instruction print_float} {:instruction integer_div} {:instruction 27} {:instruction float_sub} {:instruction float_yankdup} {:instruction float_mod} {:instruction 27} {:instruction float_sub} {:instruction float_min} {:instruction integer_flush} {:instruction integer_add} {:instruction 27} {:instruction float_sub} {:instruction float_yankdup} {:instruction integer_yank} {:instruction 9} {:instruction integer_add} {:instruction integer_stackdepth} {:instruction float_add} {:instruction in2} {:instruction tag_float_196} {:instruction float_swap} {:instruction float_rot} {:instruction integer_add} {:instruction integer_max} {:instruction integer_max} {:instruction integer_stackdepth} {:instruction float_flush} {:instruction in2} {:instruction float_frominteger} {:instruction print_float} {:instruction integer_dup} {:instruction float_dup} {:instruction float_shove} {:instruction integer_inc} {:instruction print_integer} {:instruction integer_shove} {:instruction float_flush} {:instruction print_integer} {:instruction integer_yank} {:instruction integer_add} {:instruction float_cos} {:instruction in2} {:instruction integer_min} {:instruction integer_yank} {:instruction integer_max} {:instruction float_sin} {:instruction integer_stackdepth} {:instruction integer_min} {:instruction in2} {:instruction float_mult} {:instruction integer_yank} {:instruction integer_add} {:instruction float_swap} {:instruction float_sin} {:instruction integer_stackdepth} {:instruction float_add} {:instruction in2} {:instruction float_div} {:instruction integer_stackdepth} {:instruction float_frominteger} {:instruction integer_fromfloat} {:instruction integer_mod} {:instruction print_integer} {:instruction float_min} {:instruction float_dup_items} {:instruction tag_float_291} {:instruction 6} {:instruction tag_float_172} {:instruction integer_inc} {:instruction float_swap} {:instruction print_integer})
Best program: (print_integer float_sin float_swap integer_shove integer_div float_min float_cos float_dup_times float_max print_float integer_div 27 float_sub float_yankdup float_mod 27 float_sub float_min integer_flush integer_add 27 float_sub float_yankdup integer_yank 9 integer_add integer_stackdepth float_add in2 tag_float_196 float_swap float_rot integer_add integer_max integer_max integer_stackdepth float_flush in2 float_frominteger print_float integer_dup float_dup float_shove integer_inc print_integer integer_shove float_flush print_integer integer_yank integer_add float_cos in2 integer_min integer_yank integer_max float_sin integer_stackdepth integer_min in2 float_mult integer_yank integer_add float_swap float_sin integer_stackdepth float_add in2 float_div integer_stackdepth float_frominteger integer_fromfloat integer_mod print_integer float_min float_dup_items tag_float_291 6 tag_float_172 integer_inc float_swap print_integer)
Errors: [16.5677 9 6.0519 8 10.506 10 63.29 7 46.4786 10 27.3773 7 21.7659 9 62.2423 12 65.7283 10 19.35 7 66.3997 9 44.1628 9 91.2753 9 86.3488 9 73.351 10 39.0737 11 55.3057 9 90.0769 11 57.4296 10 21.0794 7 84.5969 10 9.4308 7 55.9558 10 20.9037 7 43.5424 9]
Total: 1404.2905
Mean: 28.08581
Genome size: 81
Size: 82
Percent parens: 0.012
--- Population Statistics ---
Average total errors in population: 4273.884210300002
Median total errors in population: 1404.2905
Error averages by case: (164.68337550000177 9.421 156.25291060000006 8.656 159.92204189999785 10.218 148.03895909999895 7.67 189.16356970000126 10.372 114.46962889999791 7.611 110.40841019999927 9.466 147.13686540000006 11.841 142.1796240000002 10.177 107.33499150000125 7.683 149.4216205999995 9.367 130.68949570000154 9.274 225.9520572000017 9.511 221.44257860000317 9.53 146.0417947999984 10.225 173.47162400000005 11.272 139.72762979999865 9.534 169.92380559999754 10.973 200.4363047000013 10.402 108.52173860000104 7.315 219.23717690000163 10.449 157.87988390000092 7.735 198.7460929999986 10.205 168.79375759999843 7.827 187.95527250000214 9.319)
Error minima by case: (16.5452 8 6.0013 7 10.4835 8 22.3187 6 37.5824 8 25.3952 6 21.7397 8 20.2633 10 29.7349 9 0.6736 6 3.3706 8 7.1793 7 8.2143 7 3.6862 7 33.6254 8 3.0501 9 24.3194 9 9.9229 8 57.379 9 3.9184 5 8.5663 9 9.4079 6 55.9051 9 20.8532 6 43.4918 7)
Average genome size in population (length): 75.4
Average program size in population (points): 76.4
Average percent parens in population: 0.013
Minimum age in population: 247.0025498094402
Maximum age in population: 251.2270511170277
Average age in population: 249.457600392156
Median age in population: 249.525363352041
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 7
Genome diversity (% unique Plush genomes):	 0.871
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 7
Syntactic diversity (% unique Push programs):	 0.871
Total error diversity:				 0.248
Error (vector) diversity:			 0.29
Behavioral diversity:				 0.29
--- Run Statistics ---
Number of program evaluations used so far: 180000
Number of point (instruction) evaluations so far: 387873641
--- Timings ---
Current time: 1529615877772 milliseconds
Total Time:         724.3 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       245.9 seconds, 34.0%
Fitness Testing:    379.6 seconds, 52.4%
Report:              98.6 seconds, 13.6%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 179
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 180
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 180
;;******************************
;; -*- Number IO problem report - generation 180
Test total error for best: 59998.23050000004
Test mean error for best: 29.99912
;;------------------------------
Outputs of best individual on training cases:
Correct output: -57.4559422311 | Program output: -74.023617    
Correct output: -71.0754923621 | Program output: -65.023617    
Correct output: -66.5176295557 | Program output: -77.023617    
Correct output: 149.3187378    | Program output: 86.028727     
Correct output: -36.5450493525 | Program output: -83.023617    
Correct output: 75.4021928097  | Program output: 48.024907     
Correct output: 52.2615929867  | Program output: 74.027527     
Correct output: -19.2178367434 | Program output: 43.024417     
Correct output: 66.7518906772  | Program output: 1.023617      
Correct output: 7.673605441    | Program output: 27.023607     
Correct output: 23.6294031682  | Program output: 90.029107     
Correct output: -6.1389033433  | Program output: 38.023927     
Correct output: 9.2516366816   | Program output: -82.023627    
Correct output: 31.3251776267  | Program output: -55.023627    
Correct output: 73.3746496408  | Program output: 0.023607      
Correct output: 20.0500553336  | Program output: -19.023627    
Correct output: -23.2820697498 | Program output: 32.023627     
Correct output: 120.1004999359 | Program output: 30.023607     
Correct output: -155.453212395 | Program output: -98.023617    
Correct output: 31.10301576    | Program output: 10.023617     
Correct output: 45.5733057121  | Program output: -39.023607    
Correct output: -68.592783645  | Program output: -78.023607    
Correct output: -125.979392023 | Program output: -70.023627    
Correct output: -91.9273649148 | Program output: -71.023617    
Correct output: -92.5660607267 | Program output: -49.023627    
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_min} {:instruction float_rot} {:instruction float_min} {:instruction float_rot} {:instruction integer_dup} {:instruction float_rot} {:instruction float_mult} {:instruction 27} {:instruction 9} {:instruction tag_float_196} {:instruction float_swap} {:instruction float_rot} {:instruction integer_add} {:instruction integer_stackdepth} {:instruction float_mod} {:instruction in2} {:instruction integer_add} {:instruction integer_max} {:instruction integer_rot} {:instruction integer_stackdepth} {:instruction float_flush} {:instruction in2} {:instruction float_frominteger} {:instruction print_float} {:instruction integer_dup} {:instruction float_shove} {:instruction float_shove} {:instruction integer_add} {:instruction float_mod} {:instruction print_integer} {:instruction print_integer} {:instruction integer_div} {:instruction float_min} {:instruction integer_inc} {:instruction -75.12071267307391} {:instruction integer_max} {:instruction tag_float_730} {:instruction integer_flush} {:instruction integer_pop} {:instruction print_integer} {:instruction integer_swap} {:instruction integer_stackdepth} {:instruction float_add} {:instruction integer_div} {:instruction integer_stackdepth} {:instruction float_add} {:instruction in2} {:instruction float_inc} {:instruction integer_stackdepth} {:instruction float_yankdup} {:instruction integer_fromfloat} {:instruction integer_mod} {:instruction print_integer} {:instruction integer_sub} {:instruction integer_stackdepth} {:instruction tag_float_336} {:instruction 6} {:instruction tag_float_291} {:instruction integer_inc} {:instruction float_shove} {:instruction print_integer})
Best program: (float_min float_rot float_min float_rot integer_dup float_rot float_mult 27 9 tag_float_196 float_swap float_rot integer_add integer_stackdepth float_mod in2 integer_add integer_max integer_rot integer_stackdepth float_flush in2 float_frominteger print_float integer_dup float_shove float_shove integer_add float_mod print_integer print_integer integer_div float_min integer_inc -75.12071267307391 integer_max tag_float_730 integer_flush integer_pop print_integer integer_swap integer_stackdepth float_add integer_div integer_stackdepth float_add in2 float_inc integer_stackdepth float_yankdup integer_fromfloat integer_mod print_integer integer_sub integer_stackdepth tag_float_336 6 tag_float_291 integer_inc float_shove print_integer)
Errors: [16.5677 9 6.0519 8 10.506 10 63.29 7 46.4786 10 27.3773 7 21.7659 9 62.2423 12 65.7283 10 19.35 7 66.3997 9 44.1628 9 91.2753 9 86.3488 9 73.351 10 39.0737 11 55.3057 9 90.0769 11 57.4296 10 21.0794 7 84.5969 10 9.4308 7 55.9558 10 20.9037 7 43.5424 9]
Total: 1404.2905
Mean: 28.08581
Genome size: 61
Size: 62
Percent parens: 0.016
--- Population Statistics ---
Average total errors in population: 4488.874434100002
Median total errors in population: 1404.2905
Error averages by case: (172.66921290000187 9.522 164.34282860000002 8.691 167.90980869999774 10.284 157.20959419999883 7.691 196.7957744000012 10.455 124.97494759999782 7.621 119.87679999999919 9.468 155.07663450000004 11.865 155.28296400000025 10.189 116.62035510000132 7.726 159.11861919999944 9.413 139.8966464000014 9.318 232.87420880000167 9.552 228.61400970000312 9.53 158.2005949999983 10.257 177.62872639999995 11.293 149.06664629999875 9.57 179.71206419999783 11.027 208.30808890000142 10.468 118.14753790000094 7.37 225.3030411000016 10.489 164.9393030000009 7.804 206.60565439999854 10.261 176.94684079999843 7.85 195.63953200000205 9.4)
Error minima by case: (16.5458 8 6.0033 7 10.4841 9 22.3187 6 37.5824 9 24.3952 6 21.7401 7 20.2633 9 30.7349 9 0.6736 6 3.3706 8 7.1793 7 2.2516 7 4.3252 7 26.6254 8 3.0501 9 24.3194 9 6.8995 9 57.381 9 4.103 5 9.5663 9 9.4072 6 55.9071 9 20.8552 6 43.4938 7)
Average genome size in population (length): 75.096
Average program size in population (points): 76.096
Average percent parens in population: 0.013
Minimum age in population: 248.25361463289
Maximum age in population: 252.6950135081873
Average age in population: 250.8417882570303
Median age in population: 250.8899472491035
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 6
Genome diversity (% unique Plush genomes):	 0.864
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 6
Syntactic diversity (% unique Push programs):	 0.864
Total error diversity:				 0.233
Error (vector) diversity:			 0.284
Behavioral diversity:				 0.284
--- Run Statistics ---
Number of program evaluations used so far: 181000
Number of point (instruction) evaluations so far: 389751991
--- Timings ---
Current time: 1529615881619 milliseconds
Total Time:         728.4 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       247.3 seconds, 34.0%
Fitness Testing:    381.7 seconds, 52.4%
Report:              99.3 seconds, 13.6%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 180
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 181
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 181
;;******************************
;; -*- Number IO problem report - generation 181
Test total error for best: 59998.23050000004
Test mean error for best: 29.99912
;;------------------------------
Outputs of best individual on training cases:
Correct output: -57.4559422311 | Program output: -74.023617    
Correct output: -71.0754923621 | Program output: -65.023617    
Correct output: -66.5176295557 | Program output: -77.023617    
Correct output: 149.3187378    | Program output: 86.028727     
Correct output: -36.5450493525 | Program output: -83.023617    
Correct output: 75.4021928097  | Program output: 48.024907     
Correct output: 52.2615929867  | Program output: 74.027527     
Correct output: -19.2178367434 | Program output: 43.024417     
Correct output: 66.7518906772  | Program output: 1.023617      
Correct output: 7.673605441    | Program output: 27.023607     
Correct output: 23.6294031682  | Program output: 90.029107     
Correct output: -6.1389033433  | Program output: 38.023927     
Correct output: 9.2516366816   | Program output: -82.023627    
Correct output: 31.3251776267  | Program output: -55.023627    
Correct output: 73.3746496408  | Program output: 0.023607      
Correct output: 20.0500553336  | Program output: -19.023627    
Correct output: -23.2820697498 | Program output: 32.023627     
Correct output: 120.1004999359 | Program output: 30.023607     
Correct output: -155.453212395 | Program output: -98.023617    
Correct output: 31.10301576    | Program output: 10.023617     
Correct output: 45.5733057121  | Program output: -39.023607    
Correct output: -68.592783645  | Program output: -78.023607    
Correct output: -125.979392023 | Program output: -70.023627    
Correct output: -91.9273649148 | Program output: -71.023617    
Correct output: -92.5660607267 | Program output: -49.023627    
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_shove} {:instruction float_add} {:instruction float_dup_items} {:instruction integer_swap} {:instruction float_min} {:instruction float_add} {:instruction float_rot} {:instruction integer_dup} {:instruction float_rot} {:instruction integer_inc} {:instruction float_add} {:instruction float_yank} {:instruction float_div} {:instruction float_min} {:instruction integer_div} {:instruction 27} {:instruction float_sub} {:instruction integer_yankdup} {:instruction integer_sub} {:instruction 9} {:instruction float_rot} {:instruction integer_add} {:instruction integer_stackdepth} {:instruction float_mod} {:instruction in2} {:instruction integer_add} {:instruction integer_max} {:instruction float_dup_times} {:instruction integer_stackdepth} {:instruction float_div} {:instruction in2} {:instruction float_frominteger} {:instruction print_float} {:instruction integer_dup} {:instruction float_shove} {:instruction float_shove} {:instruction integer_add} {:instruction float_inc} {:instruction integer_dup} {:instruction integer_dup_items} {:instruction print_integer} {:instruction tag_integer_480} {:instruction integer_yank} {:instruction print_integer} {:instruction integer_yank} {:instruction integer_max} {:instruction integer_yankdup} {:instruction integer_stackdepth} {:instruction in2} {:instruction float_mult} {:instruction integer_yank} {:instruction integer_max} {:instruction float_max} {:instruction integer_stackdepth} {:instruction float_yankdup} {:instruction integer_max} {:instruction integer_stackdepth} {:instruction float_add} {:instruction integer_max} {:instruction float_mult} {:instruction integer_yank} {:instruction float_cos} {:instruction integer_max} {:instruction float_sin} {:instruction integer_stackdepth} {:instruction float_add} {:instruction in2} {:instruction float_mod} {:instruction integer_stackdepth} {:instruction integer_mod} {:instruction print_integer} {:instruction float_min} {:instruction in1} {:instruction tag_float_291} {:instruction 6} {:instruction tag_float_263} {:instruction integer_inc} {:instruction float_swap} {:instruction print_integer})
Best program: (float_shove float_add float_dup_items integer_swap float_min float_add float_rot integer_dup float_rot integer_inc float_add float_yank float_div float_min integer_div 27 float_sub integer_yankdup integer_sub 9 float_rot integer_add integer_stackdepth float_mod in2 integer_add integer_max float_dup_times integer_stackdepth float_div in2 float_frominteger print_float integer_dup float_shove float_shove integer_add float_inc integer_dup integer_dup_items print_integer tag_integer_480 integer_yank print_integer integer_yank integer_max integer_yankdup integer_stackdepth in2 float_mult integer_yank integer_max float_max integer_stackdepth float_yankdup integer_max integer_stackdepth float_add integer_max float_mult integer_yank float_cos integer_max float_sin integer_stackdepth float_add in2 float_mod integer_stackdepth integer_mod print_integer float_min in1 tag_float_291 6 tag_float_263 integer_inc float_swap print_integer)
Errors: [16.5677 9 6.0519 8 10.506 10 63.29 7 46.4786 10 27.3773 7 21.7659 9 62.2423 12 65.7283 10 19.35 7 66.3997 9 44.1628 9 91.2753 9 86.3488 9 73.351 10 39.0737 11 55.3057 9 90.0769 11 57.4296 10 21.0794 7 84.5969 10 9.4308 7 55.9558 10 20.9037 7 43.5424 9]
Total: 1404.2905
Mean: 28.08581
Genome size: 79
Size: 80
Percent parens: 0.013
--- Population Statistics ---
Average total errors in population: 4217.616922300003
Median total errors in population: 1404.2905
Error averages by case: (161.13270590000135 9.459 152.52004060000056 8.674 156.17707969999807 10.202 146.76526319999894 7.627 185.81254020000117 10.401 113.27335979999839 7.613 108.68626619999927 9.448 144.6066615999999 11.816 142.3268438000002 10.19 105.57996330000077 7.673 148.87909359999963 9.368 128.15006230000117 9.308 222.725973700001 9.477 218.520543200003 9.5 148.42250169999866 10.227 169.32614109999966 11.267 138.36236049999897 9.553 169.41931529999823 10.965 197.0388981000015 10.398 107.10225510000075 7.302 216.4695265000015 10.442 155.2411835000009 7.774 195.3427782999988 10.209 165.32027199999845 7.818 184.40229310000194 9.302)
Error minima by case: (16.5451 8 5.9827 7 10.4834 8 22.3187 6 37.562 9 26.3952 6 21.7395 8 20.2348 10 30.7349 9 0.6736 6 3.3776 7 7.1659 7 8.2143 7 4.2982 7 33.6254 8 6.9499 9 24.3091 9 9.9231 9 57.3605 9 4.086 5 8.5733 9 9.4072 6 55.8866 8 20.8346 6 43.4733 8)
Average genome size in population (length): 74.976
Average program size in population (points): 75.976
Average percent parens in population: 0.013
Minimum age in population: 249.8565720975501
Maximum age in population: 254.2087097888287
Average age in population: 252.235212651224
Median age in population: 252.2651031939181
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 6
Genome diversity (% unique Plush genomes):	 0.872
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 6
Syntactic diversity (% unique Push programs):	 0.872
Total error diversity:				 0.255
Error (vector) diversity:			 0.304
Behavioral diversity:				 0.305
--- Run Statistics ---
Number of program evaluations used so far: 182000
Number of point (instruction) evaluations so far: 391627216
--- Timings ---
Current time: 1529615885243 milliseconds
Total Time:         731.9 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       248.6 seconds, 34.0%
Fitness Testing:    383.5 seconds, 52.4%
Report:              99.7 seconds, 13.6%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 181
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 182
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 182
;;******************************
;; -*- Number IO problem report - generation 182
Test total error for best: 59998.23050000004
Test mean error for best: 29.99912
;;------------------------------
Outputs of best individual on training cases:
Correct output: -57.4559422311 | Program output: -74.023617    
Correct output: -71.0754923621 | Program output: -65.023617    
Correct output: -66.5176295557 | Program output: -77.023617    
Correct output: 149.3187378    | Program output: 86.028727     
Correct output: -36.5450493525 | Program output: -83.023617    
Correct output: 75.4021928097  | Program output: 48.024907     
Correct output: 52.2615929867  | Program output: 74.027527     
Correct output: -19.2178367434 | Program output: 43.024417     
Correct output: 66.7518906772  | Program output: 1.023617      
Correct output: 7.673605441    | Program output: 27.023607     
Correct output: 23.6294031682  | Program output: 90.029107     
Correct output: -6.1389033433  | Program output: 38.023927     
Correct output: 9.2516366816   | Program output: -82.023627    
Correct output: 31.3251776267  | Program output: -55.023627    
Correct output: 73.3746496408  | Program output: 0.023607      
Correct output: 20.0500553336  | Program output: -19.023627    
Correct output: -23.2820697498 | Program output: 32.023627     
Correct output: 120.1004999359 | Program output: 30.023607     
Correct output: -155.453212395 | Program output: -98.023617    
Correct output: 31.10301576    | Program output: 10.023617     
Correct output: 45.5733057121  | Program output: -39.023607    
Correct output: -68.592783645  | Program output: -78.023607    
Correct output: -125.979392023 | Program output: -70.023627    
Correct output: -91.9273649148 | Program output: -71.023617    
Correct output: -92.5660607267 | Program output: -49.023627    
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_inc} {:instruction integer_pop} {:instruction float_min} {:instruction float_yank} {:instruction integer_dup_times} {:instruction float_mult} {:instruction float_mult} {:instruction float_sub} {:instruction print_float} {:instruction float_min} {:instruction integer_div} {:instruction 27} {:instruction float_sub} {:instruction integer_shove} {:instruction integer_sub} {:instruction 9} {:instruction float_rot} {:instruction integer_add} {:instruction integer_stackdepth} {:instruction float_mod} {:instruction in2} {:instruction float_dec} {:instruction float_swap} {:instruction float_rot} {:instruction integer_add} {:instruction integer_max} {:instruction integer_max} {:instruction float_max} {:instruction integer_stackdepth} {:instruction integer_mult} {:instruction integer_mod} {:instruction integer_max} {:instruction float_flush} {:instruction integer_stackdepth} {:instruction float_flush} {:instruction in2} {:instruction float_frominteger} {:instruction print_float} {:instruction integer_dup} {:instruction float_shove} {:instruction print_float} {:instruction integer_inc} {:instruction print_integer} {:instruction integer_shove} {:instruction float_min} {:instruction print_integer} {:instruction integer_yank} {:instruction float_stackdepth} {:instruction integer_max} {:instruction float_dup_times} {:instruction integer_rot} {:instruction integer_div} {:instruction integer_stackdepth} {:instruction tag_float_915} {:instruction in2} {:instruction float_mult} {:instruction integer_stackdepth} {:instruction float_frominteger} {:instruction integer_fromfloat} {:instruction integer_mod} {:instruction print_integer} {:instruction integer_sub} {:instruction integer_stackdepth} {:instruction float_pop} {:instruction 6} {:instruction tag_float_291} {:instruction integer_inc} {:instruction float_swap} {:instruction print_integer})
Best program: (float_inc integer_pop float_min float_yank integer_dup_times float_mult float_mult float_sub print_float float_min integer_div 27 float_sub integer_shove integer_sub 9 float_rot integer_add integer_stackdepth float_mod in2 float_dec float_swap float_rot integer_add integer_max integer_max float_max integer_stackdepth integer_mult integer_mod integer_max float_flush integer_stackdepth float_flush in2 float_frominteger print_float integer_dup float_shove print_float integer_inc print_integer integer_shove float_min print_integer integer_yank float_stackdepth integer_max float_dup_times integer_rot integer_div integer_stackdepth tag_float_915 in2 float_mult integer_stackdepth float_frominteger integer_fromfloat integer_mod print_integer integer_sub integer_stackdepth float_pop 6 tag_float_291 integer_inc float_swap print_integer)
Errors: [16.5677 9 6.0519 8 10.506 10 63.29 7 46.4786 10 27.3773 7 21.7659 9 62.2423 12 65.7283 10 19.35 7 66.3997 9 44.1628 9 91.2753 9 86.3488 9 73.351 10 39.0737 11 55.3057 9 90.0769 11 57.4296 10 21.0794 7 84.5969 10 9.4308 7 55.9558 10 20.9037 7 43.5424 9]
Total: 1404.2905
Mean: 28.08581
Genome size: 69
Size: 70
Percent parens: 0.014
--- Population Statistics ---
Average total errors in population: 4332.644368300004
Median total errors in population: 1404.2905
Error averages by case: (164.67572350000157 9.489 156.30222660000052 8.684 159.88507889999775 10.224 151.8882563999993 7.628 188.9609771000013 10.427 118.96777379999791 7.646 113.5299140999992 9.467 150.1926758000003 11.819 149.64843129999986 10.172 111.75857420000106 7.68 152.4969956999999 9.369 134.03755860000112 9.32 225.26821240000106 9.488 221.24483510000312 9.509 153.53245849999857 10.226 174.33314889999966 11.259 144.2628156999988 9.563 175.97157959999774 11.002 200.76368020000157 10.416 113.5655112000009 7.298 220.13634280000161 10.432 158.91243620000105 7.806 198.9753968999985 10.205 169.05917529999837 7.866 187.94858950000224 9.331)
Error minima by case: (15.5814 8 6.0033 7 9.5197 8 22.3187 6 36.5824 8 26.3648 6 21.7411 8 19.2633 9 44.2693 8 0.6736 6 3.3706 8 6.1793 7 2.2516 7 4.3252 7 33.6254 8 3.0501 9 23.3194 9 13.1005 9 57.381 9 4.103 5 28.5733 9 8.4446 6 55.9071 8 20.8552 6 43.4938 8)
Average genome size in population (length): 74.344
Average program size in population (points): 75.344
Average percent parens in population: 0.013
Minimum age in population: 250.8565720975501
Maximum age in population: 255.600476694733
Average age in population: 253.6191347932187
Median age in population: 253.6773033912521
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 7
Genome diversity (% unique Plush genomes):	 0.875
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 7
Syntactic diversity (% unique Push programs):	 0.875
Total error diversity:				 0.239
Error (vector) diversity:			 0.284
Behavioral diversity:				 0.284
--- Run Statistics ---
Number of program evaluations used so far: 183000
Number of point (instruction) evaluations so far: 393486641
--- Timings ---
Current time: 1529615889079 milliseconds
Total Time:         735.8 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       249.9 seconds, 34.0%
Fitness Testing:    385.6 seconds, 52.4%
Report:             100.1 seconds, 13.6%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 182
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 183
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 183
;;******************************
;; -*- Number IO problem report - generation 183
Test total error for best: 59998.23050000004
Test mean error for best: 29.99912
;;------------------------------
Outputs of best individual on training cases:
Correct output: -57.4559422311 | Program output: -74.023617    
Correct output: -71.0754923621 | Program output: -65.023617    
Correct output: -66.5176295557 | Program output: -77.023617    
Correct output: 149.3187378    | Program output: 86.028727     
Correct output: -36.5450493525 | Program output: -83.023617    
Correct output: 75.4021928097  | Program output: 48.024907     
Correct output: 52.2615929867  | Program output: 74.027527     
Correct output: -19.2178367434 | Program output: 43.024417     
Correct output: 66.7518906772  | Program output: 1.023617      
Correct output: 7.673605441    | Program output: 27.023607     
Correct output: 23.6294031682  | Program output: 90.029107     
Correct output: -6.1389033433  | Program output: 38.023927     
Correct output: 9.2516366816   | Program output: -82.023627    
Correct output: 31.3251776267  | Program output: -55.023627    
Correct output: 73.3746496408  | Program output: 0.023607      
Correct output: 20.0500553336  | Program output: -19.023627    
Correct output: -23.2820697498 | Program output: 32.023627     
Correct output: 120.1004999359 | Program output: 30.023607     
Correct output: -155.453212395 | Program output: -98.023617    
Correct output: 31.10301576    | Program output: 10.023617     
Correct output: 45.5733057121  | Program output: -39.023607    
Correct output: -68.592783645  | Program output: -78.023607    
Correct output: -125.979392023 | Program output: -70.023627    
Correct output: -91.9273649148 | Program output: -71.023617    
Correct output: -92.5660607267 | Program output: -49.023627    
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_dup} {:instruction float_dup_times} {:instruction integer_dup} {:instruction float_min} {:instruction float_sub} {:instruction integer_div} {:instruction 25} {:instruction float_sub} {:instruction integer_inc} {:instruction float_mult} {:instruction float_mult} {:instruction float_mult} {:instruction integer_rot} {:instruction integer_sub} {:instruction float_sub} {:instruction integer_dup_items} {:instruction print_float} {:instruction float_min} {:instruction integer_flush} {:instruction integer_add} {:instruction 27} {:instruction float_sub} {:instruction float_yankdup} {:instruction integer_yank} {:instruction 9} {:instruction integer_add} {:instruction integer_stackdepth} {:instruction float_add} {:instruction in2} {:instruction tag_float_196} {:instruction float_swap} {:instruction float_rot} {:instruction integer_add} {:instruction integer_max} {:instruction float_flush} {:instruction integer_stackdepth} {:instruction integer_dup} {:instruction in2} {:instruction float_frominteger} {:instruction print_float} {:instruction integer_dup} {:instruction float_dup} {:instruction float_shove} {:instruction integer_inc} {:instruction print_integer} {:instruction integer_shove} {:instruction float_flush} {:instruction print_integer} {:instruction integer_stackdepth} {:instruction integer_stackdepth} {:instruction integer_yank} {:instruction integer_max} {:instruction integer_stackdepth} {:instruction float_add} {:instruction integer_max} {:instruction float_mult} {:instruction integer_yank} {:instruction float_cos} {:instruction integer_max} {:instruction float_sin} {:instruction integer_stackdepth} {:instruction float_add} {:instruction in2} {:instruction float_mod} {:instruction integer_stackdepth} {:instruction integer_mod} {:instruction print_integer} {:instruction integer_mult} {:instruction integer_stackdepth} {:instruction tag_float_218} {:instruction 6} {:instruction tag_float_208} {:instruction integer_inc} {:instruction float_swap} {:instruction print_integer})
Best program: (float_dup float_dup_times integer_dup float_min float_sub integer_div 25 float_sub integer_inc float_mult float_mult float_mult integer_rot integer_sub float_sub integer_dup_items print_float float_min integer_flush integer_add 27 float_sub float_yankdup integer_yank 9 integer_add integer_stackdepth float_add in2 tag_float_196 float_swap float_rot integer_add integer_max float_flush integer_stackdepth integer_dup in2 float_frominteger print_float integer_dup float_dup float_shove integer_inc print_integer integer_shove float_flush print_integer integer_stackdepth integer_stackdepth integer_yank integer_max integer_stackdepth float_add integer_max float_mult integer_yank float_cos integer_max float_sin integer_stackdepth float_add in2 float_mod integer_stackdepth integer_mod print_integer integer_mult integer_stackdepth tag_float_218 6 tag_float_208 integer_inc float_swap print_integer)
Errors: [16.5677 9 6.0519 8 10.506 10 63.29 7 46.4786 10 27.3773 7 21.7659 9 62.2423 12 65.7283 10 19.35 7 66.3997 9 44.1628 9 91.2753 9 86.3488 9 73.351 10 39.0737 11 55.3057 9 90.0769 11 57.4296 10 21.0794 7 84.5969 10 9.4308 7 55.9558 10 20.9037 7 43.5424 9]
Total: 1404.2905
Mean: 28.08581
Genome size: 75
Size: 76
Percent parens: 0.013
--- Population Statistics ---
Average total errors in population: 4130.987650900002
Median total errors in population: 1404.2905
Error averages by case: (154.8989809000013 9.438 146.44845140000103 8.622 150.07380959999776 10.213 146.16838259999864 7.631 179.45439570000124 10.382 112.53299549999805 7.597 109.0892351999992 9.454 144.8809323999997 11.844 137.68845600000066 10.162 106.00307920000117 7.648 148.62101889999946 9.378 127.93217190000152 9.306 216.21302520000123 9.47 212.07024440000345 9.475 141.52335959999832 10.196 166.57295999999965 11.242 138.0966558999985 9.52 169.05669569999787 10.96 192.29485720000156 10.377 105.62297410000099 7.296 210.9139467000018 10.427 149.0914656000011 7.749 190.4747859999985 10.171 160.2781210999984 7.789 179.3686501000024 9.271)
Error minima by case: (16.5442 8 5.9827 5 10.4825 9 22.3187 6 10.472 8 8.6048 5 21.4536 8 20.2629 5 1.0 4 0.6736 6 3.3706 8 7.1791 5 2.2516 4 4.2982 5 0.0 3 1.9499 5 24.3193 5 9.9261 5 57.3605 5 0.295 4 18.5663 5 9.4072 6 55.8867 5 20.8346 5 43.4733 5)
Average genome size in population (length): 73.926
Average program size in population (points): 74.926
Average percent parens in population: 0.014
Minimum age in population: 252.6796374708363
Maximum age in population: 257.2483628316088
Average age in population: 255.0262962221904
Median age in population: 255.0760213099865
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 8
Genome diversity (% unique Plush genomes):	 0.855
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 8
Syntactic diversity (% unique Push programs):	 0.855
Total error diversity:				 0.233
Error (vector) diversity:			 0.273
Behavioral diversity:				 0.273
--- Run Statistics ---
Number of program evaluations used so far: 184000
Number of point (instruction) evaluations so far: 395335241
--- Timings ---
Current time: 1529615892652 milliseconds
Total Time:         739.3 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       251.2 seconds, 34.0%
Fitness Testing:    387.4 seconds, 52.4%
Report:             100.6 seconds, 13.6%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 183
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 184
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 184
;;******************************
;; -*- Number IO problem report - generation 184
Test total error for best: 59998.23050000004
Test mean error for best: 29.99912
;;------------------------------
Outputs of best individual on training cases:
Correct output: -57.4559422311 | Program output: -74.023617    
Correct output: -71.0754923621 | Program output: -65.023617    
Correct output: -66.5176295557 | Program output: -77.023617    
Correct output: 149.3187378    | Program output: 86.028727     
Correct output: -36.5450493525 | Program output: -83.023617    
Correct output: 75.4021928097  | Program output: 48.024907     
Correct output: 52.2615929867  | Program output: 74.027527     
Correct output: -19.2178367434 | Program output: 43.024417     
Correct output: 66.7518906772  | Program output: 1.023617      
Correct output: 7.673605441    | Program output: 27.023607     
Correct output: 23.6294031682  | Program output: 90.029107     
Correct output: -6.1389033433  | Program output: 38.023927     
Correct output: 9.2516366816   | Program output: -82.023627    
Correct output: 31.3251776267  | Program output: -55.023627    
Correct output: 73.3746496408  | Program output: 0.023607      
Correct output: 20.0500553336  | Program output: -19.023627    
Correct output: -23.2820697498 | Program output: 32.023627     
Correct output: 120.1004999359 | Program output: 30.023607     
Correct output: -155.453212395 | Program output: -98.023617    
Correct output: 31.10301576    | Program output: 10.023617     
Correct output: 45.5733057121  | Program output: -39.023607    
Correct output: -68.592783645  | Program output: -78.023607    
Correct output: -125.979392023 | Program output: -70.023627    
Correct output: -91.9273649148 | Program output: -71.023617    
Correct output: -92.5660607267 | Program output: -49.023627    
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_mult} {:instruction integer_dup} {:instruction float_min} {:instruction integer_shove} {:instruction integer_div} {:instruction float_inc} {:instruction integer_inc} {:instruction float_add} {:instruction float_yank} {:instruction integer_dup} {:instruction float_min} {:instruction float_sub} {:instruction integer_fromfloat} {:instruction float_yank} {:instruction float_rot} {:instruction float_sub} {:instruction integer_add} {:instruction 27} {:instruction float_sub} {:instruction float_yankdup} {:instruction in1} {:instruction 9} {:instruction integer_add} {:instruction integer_stackdepth} {:instruction float_add} {:instruction in2} {:instruction tag_float_196} {:instruction float_swap} {:instruction float_rot} {:instruction integer_add} {:instruction integer_max} {:instruction integer_max} {:instruction integer_stackdepth} {:instruction float_flush} {:instruction in2} {:instruction float_frominteger} {:instruction print_float} {:instruction integer_dup} {:instruction float_dup} {:instruction float_shove} {:instruction integer_inc} {:instruction print_integer} {:instruction integer_shove} {:instruction float_flush} {:instruction print_integer} {:instruction integer_yank} {:instruction float_mult} {:instruction float_cos} {:instruction in2} {:instruction float_mult} {:instruction integer_yank} {:instruction integer_max} {:instruction float_sin} {:instruction integer_stackdepth} {:instruction float_min} {:instruction in2} {:instruction integer_yank} {:instruction float_cos} {:instruction integer_max} {:instruction float_sin} {:instruction integer_stackdepth} {:instruction float_add} {:instruction in2} {:instruction float_mod} {:instruction integer_stackdepth} {:instruction integer_mod} {:instruction print_integer} {:instruction float_min} {:instruction in1} {:instruction tag_float_291} {:instruction 6} {:instruction float_sin} {:instruction integer_inc} {:instruction float_swap} {:instruction print_integer})
Best program: (integer_mult integer_dup float_min integer_shove integer_div float_inc integer_inc float_add float_yank integer_dup float_min float_sub integer_fromfloat float_yank float_rot float_sub integer_add 27 float_sub float_yankdup in1 9 integer_add integer_stackdepth float_add in2 tag_float_196 float_swap float_rot integer_add integer_max integer_max integer_stackdepth float_flush in2 float_frominteger print_float integer_dup float_dup float_shove integer_inc print_integer integer_shove float_flush print_integer integer_yank float_mult float_cos in2 float_mult integer_yank integer_max float_sin integer_stackdepth float_min in2 integer_yank float_cos integer_max float_sin integer_stackdepth float_add in2 float_mod integer_stackdepth integer_mod print_integer float_min in1 tag_float_291 6 float_sin integer_inc float_swap print_integer)
Errors: [16.5677 9 6.0519 8 10.506 10 63.29 7 46.4786 10 27.3773 7 21.7659 9 62.2423 12 65.7283 10 19.35 7 66.3997 9 44.1628 9 91.2753 9 86.3488 9 73.351 10 39.0737 11 55.3057 9 90.0769 11 57.4296 10 21.0794 7 84.5969 10 9.4308 7 55.9558 10 20.9037 7 43.5424 9]
Total: 1404.2905
Mean: 28.08581
Genome size: 75
Size: 76
Percent parens: 0.013
--- Population Statistics ---
Average total errors in population: 4156.782705500001
Median total errors in population: 1404.2905
Error averages by case: (154.49198250000143 9.429 146.68632170000024 8.608 149.50480659999823 10.197 147.46742559999942 7.619 179.3420584000012 10.39 114.52890339999793 7.549 110.12751849999918 9.421 146.58245070000032 11.82 146.00573029999998 10.195 107.61868010000103 7.645 149.91272719999998 9.353 130.22005050000135 9.295 216.5884410000013 9.471 212.3567643000032 9.467 152.03599009999854 10.193 159.7957276999997 11.223 140.3789375999987 9.529 171.0422338999977 10.98 191.5292037000016 10.387 108.31017620000081 7.318 210.16244790000164 10.414 148.519329300001 7.738 189.6936960999989 10.193 159.47500779999885 7.765 178.912094400002 9.295)
Error minima by case: (16.5441 8 5.9985 7 10.4824 9 2.3187 6 37.5824 9 26.3952 6 21.7411 8 20.2552 8 30.7349 6 0.6736 6 3.3706 8 7.1763 7 0.1974 7 4.2982 7 33.6254 5 3.0501 9 24.3194 8 9.924 8 57.3805 9 4.086 6 9.5663 9 9.4072 6 55.9067 9 20.8546 6 43.4933 8)
Average genome size in population (length): 74.079
Average program size in population (points): 75.079
Average percent parens in population: 0.014
Minimum age in population: 254.1220835333136
Maximum age in population: 258.414787356812
Average age in population: 256.4290320241534
Median age in population: 256.4785443887985
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 7
Genome diversity (% unique Plush genomes):	 0.862
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 7
Syntactic diversity (% unique Push programs):	 0.862
Total error diversity:				 0.218
Error (vector) diversity:			 0.263
Behavioral diversity:				 0.263
--- Run Statistics ---
Number of program evaluations used so far: 185000
Number of point (instruction) evaluations so far: 397187791
--- Timings ---
Current time: 1529615896271 milliseconds
Total Time:         742.9 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       252.5 seconds, 34.0%
Fitness Testing:    389.2 seconds, 52.4%
Report:             101.0 seconds, 13.6%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 184
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 185
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 185
;;******************************
;; -*- Number IO problem report - generation 185
Test total error for best: 59998.23050000004
Test mean error for best: 29.99912
;;------------------------------
Outputs of best individual on training cases:
Correct output: -57.4559422311 | Program output: -74.023617    
Correct output: -71.0754923621 | Program output: -65.023617    
Correct output: -66.5176295557 | Program output: -77.023617    
Correct output: 149.3187378    | Program output: 86.028727     
Correct output: -36.5450493525 | Program output: -83.023617    
Correct output: 75.4021928097  | Program output: 48.024907     
Correct output: 52.2615929867  | Program output: 74.027527     
Correct output: -19.2178367434 | Program output: 43.024417     
Correct output: 66.7518906772  | Program output: 1.023617      
Correct output: 7.673605441    | Program output: 27.023607     
Correct output: 23.6294031682  | Program output: 90.029107     
Correct output: -6.1389033433  | Program output: 38.023927     
Correct output: 9.2516366816   | Program output: -82.023627    
Correct output: 31.3251776267  | Program output: -55.023627    
Correct output: 73.3746496408  | Program output: 0.023607      
Correct output: 20.0500553336  | Program output: -19.023627    
Correct output: -23.2820697498 | Program output: 32.023627     
Correct output: 120.1004999359 | Program output: 30.023607     
Correct output: -155.453212395 | Program output: -98.023617    
Correct output: 31.10301576    | Program output: 10.023617     
Correct output: 45.5733057121  | Program output: -39.023607    
Correct output: -68.592783645  | Program output: -78.023607    
Correct output: -125.979392023 | Program output: -70.023627    
Correct output: -91.9273649148 | Program output: -71.023617    
Correct output: -92.5660607267 | Program output: -49.023627    
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_swap} {:instruction integer_dup_times} {:instruction float_flush} {:instruction integer_sub} {:instruction float_rot} {:instruction float_yank} {:instruction integer_dup_times} {:instruction float_sub} {:instruction print_integer} {:instruction float_dup_times} {:instruction print_float} {:instruction integer_div} {:instruction 27} {:instruction float_mod} {:instruction float_yank} {:instruction integer_sub} {:instruction 9} {:instruction float_yankdup} {:instruction integer_stackdepth} {:instruction float_frominteger} {:instruction tag_float_196} {:instruction float_swap} {:instruction float_mult} {:instruction integer_add} {:instruction integer_stackdepth} {:instruction float_mod} {:instruction in2} {:instruction integer_add} {:instruction integer_max} {:instruction float_yank} {:instruction float_swap} {:instruction float_rot} {:instruction integer_add} {:instruction integer_max} {:instruction float_flush} {:instruction integer_stackdepth} {:instruction float_flush} {:instruction in2} {:instruction float_frominteger} {:instruction print_float} {:instruction integer_dup} {:instruction float_dup} {:instruction float_shove} {:instruction integer_inc} {:instruction print_integer} {:instruction integer_shove} {:instruction float_flush} {:instruction print_integer} {:instruction integer_add} {:instruction float_mod} {:instruction integer_dup} {:instruction integer_dup_items} {:instruction print_integer} {:instruction integer_yankdup} {:instruction float_dup_items} {:instruction print_integer} {:instruction integer_yank} {:instruction integer_max} {:instruction integer_max} {:instruction integer_yank} {:instruction integer_stackdepth} {:instruction float_min} {:instruction integer_yankdup} {:instruction float_mult} {:instruction float_sin} {:instruction integer_stackdepth} {:instruction float_add} {:instruction in2} {:instruction float_mod} {:instruction integer_stackdepth} {:instruction integer_mod} {:instruction print_integer} {:instruction float_min} {:instruction integer_stackdepth} {:instruction integer_mult} {:instruction 6} {:instruction integer_dup} {:instruction integer_inc} {:instruction float_mod} {:instruction print_integer})
Best program: (integer_swap integer_dup_times float_flush integer_sub float_rot float_yank integer_dup_times float_sub print_integer float_dup_times print_float integer_div 27 float_mod float_yank integer_sub 9 float_yankdup integer_stackdepth float_frominteger tag_float_196 float_swap float_mult integer_add integer_stackdepth float_mod in2 integer_add integer_max float_yank float_swap float_rot integer_add integer_max float_flush integer_stackdepth float_flush in2 float_frominteger print_float integer_dup float_dup float_shove integer_inc print_integer integer_shove float_flush print_integer integer_add float_mod integer_dup integer_dup_items print_integer integer_yankdup float_dup_items print_integer integer_yank integer_max integer_max integer_yank integer_stackdepth float_min integer_yankdup float_mult float_sin integer_stackdepth float_add in2 float_mod integer_stackdepth integer_mod print_integer float_min integer_stackdepth integer_mult 6 integer_dup integer_inc float_mod print_integer)
Errors: [16.5677 9 6.0519 8 10.506 10 63.29 7 46.4786 10 27.3773 7 21.7659 9 62.2423 12 65.7283 10 19.35 7 66.3997 9 44.1628 9 91.2753 9 86.3488 9 73.351 10 39.0737 11 55.3057 9 90.0769 11 57.4296 10 21.0794 7 84.5969 10 9.4308 7 55.9558 10 20.9037 7 43.5424 9]
Total: 1404.2905
Mean: 28.08581
Genome size: 80
Size: 81
Percent parens: 0.012
--- Population Statistics ---
Average total errors in population: 4119.158399000003
Median total errors in population: 1404.2905
Error averages by case: (152.8720828000018 9.527 144.479760900001 8.71 148.08217109999765 10.221 147.50121669999876 7.686 177.3119399000013 10.45 114.1359178999974 7.596 109.38388609999915 9.486 145.22499760000008 11.85 143.89148620000043 10.177 106.10726790000143 7.689 148.99904919999952 9.41 128.99042070000198 9.369 213.84391210000155 9.492 209.38026060000354 9.541 149.78815449999826 10.256 158.35766429999964 11.297 139.2256977999985 9.559 170.03712689999725 11.029 189.81547480000168 10.451 107.7179590000011 7.309 208.06469460000181 10.434 146.9381778000011 7.818 188.0285360999985 10.239 157.4546524999984 7.844 176.73289100000227 9.353)
Error minima by case: (16.5448 8 5.9943 7 10.4841 8 22.3187 6 37.5824 9 26.3041 6 21.7391 8 20.2552 9 30.6797 8 0.6736 6 3.3706 7 7.1763 7 2.2516 7 4.3252 7 33.6254 8 3.0501 9 24.3194 9 13.1005 9 57.3719 9 4.103 5 9.5012 9 9.4079 7 55.8981 8 20.8459 6 43.4848 7)
Average genome size in population (length): 73.716
Average program size in population (points): 74.716
Average percent parens in population: 0.014
Minimum age in population: 255.1220835333136
Maximum age in population: 259.7776418131831
Average age in population: 257.8224581238897
Median age in population: 257.8421693273796
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 8
Genome diversity (% unique Plush genomes):	 0.876
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 8
Syntactic diversity (% unique Push programs):	 0.876
Total error diversity:				 0.22
Error (vector) diversity:			 0.265
Behavioral diversity:				 0.265
--- Run Statistics ---
Number of program evaluations used so far: 186000
Number of point (instruction) evaluations so far: 399031041
--- Timings ---
Current time: 1529615900045 milliseconds
Total Time:         746.7 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       254.0 seconds, 34.0%
Fitness Testing:    391.0 seconds, 52.4%
Report:             101.5 seconds, 13.6%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 185
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 186
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 186
;;******************************
;; -*- Number IO problem report - generation 186
Test total error for best: 59998.23050000004
Test mean error for best: 29.99912
;;------------------------------
Outputs of best individual on training cases:
Correct output: -57.4559422311 | Program output: -74.023617    
Correct output: -71.0754923621 | Program output: -65.023617    
Correct output: -66.5176295557 | Program output: -77.023617    
Correct output: 149.3187378    | Program output: 86.028727     
Correct output: -36.5450493525 | Program output: -83.023617    
Correct output: 75.4021928097  | Program output: 48.024907     
Correct output: 52.2615929867  | Program output: 74.027527     
Correct output: -19.2178367434 | Program output: 43.024417     
Correct output: 66.7518906772  | Program output: 1.023617      
Correct output: 7.673605441    | Program output: 27.023607     
Correct output: 23.6294031682  | Program output: 90.029107     
Correct output: -6.1389033433  | Program output: 38.023927     
Correct output: 9.2516366816   | Program output: -82.023627    
Correct output: 31.3251776267  | Program output: -55.023627    
Correct output: 73.3746496408  | Program output: 0.023607      
Correct output: 20.0500553336  | Program output: -19.023627    
Correct output: -23.2820697498 | Program output: 32.023627     
Correct output: 120.1004999359 | Program output: 30.023607     
Correct output: -155.453212395 | Program output: -98.023617    
Correct output: 31.10301576    | Program output: 10.023617     
Correct output: 45.5733057121  | Program output: -39.023607    
Correct output: -68.592783645  | Program output: -78.023607    
Correct output: -125.979392023 | Program output: -70.023627    
Correct output: -91.9273649148 | Program output: -71.023617    
Correct output: -92.5660607267 | Program output: -49.023627    
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_inc} {:instruction float_min} {:instruction float_dup_items} {:instruction float_rot} {:instruction print_integer} {:instruction float_add} {:instruction integer_fromfloat} {:instruction float_div} {:instruction float_rot} {:instruction float_inc} {:instruction float_sub} {:instruction float_mult} {:instruction float_mult} {:instruction float_mult} {:instruction float_mult} {:instruction integer_rot} {:instruction 27} {:instruction float_add} {:instruction float_cos} {:instruction 9} {:instruction integer_swap} {:instruction integer_add} {:instruction integer_stackdepth} {:instruction float_add} {:instruction in2} {:instruction integer_add} {:instruction integer_max} {:instruction float_dup_times} {:instruction integer_stackdepth} {:instruction float_flush} {:instruction in2} {:instruction float_frominteger} {:instruction print_float} {:instruction integer_dup} {:instruction float_shove} {:instruction float_shove} {:instruction integer_add} {:instruction float_mod} {:instruction integer_dup} {:instruction integer_dup_items} {:instruction print_integer} {:instruction integer_min} {:instruction float_dup_items} {:instruction print_integer} {:instruction integer_yank} {:instruction integer_max} {:instruction integer_max} {:instruction integer_yank} {:instruction integer_stackdepth} {:instruction float_min} {:instruction float_div} {:instruction float_mult} {:instruction float_sin} {:instruction integer_stackdepth} {:instruction float_add} {:instruction in2} {:instruction float_mod} {:instruction integer_stackdepth} {:instruction integer_mod} {:instruction print_integer} {:instruction float_min} {:instruction integer_stackdepth} {:instruction tag_float_291} {:instruction 6} {:instruction tag_float_291} {:instruction integer_inc} {:instruction float_mod} {:instruction print_integer})
Best program: (integer_inc float_min float_dup_items float_rot print_integer float_add integer_fromfloat float_div float_rot float_inc float_sub float_mult float_mult float_mult float_mult integer_rot 27 float_add float_cos 9 integer_swap integer_add integer_stackdepth float_add in2 integer_add integer_max float_dup_times integer_stackdepth float_flush in2 float_frominteger print_float integer_dup float_shove float_shove integer_add float_mod integer_dup integer_dup_items print_integer integer_min float_dup_items print_integer integer_yank integer_max integer_max integer_yank integer_stackdepth float_min float_div float_mult float_sin integer_stackdepth float_add in2 float_mod integer_stackdepth integer_mod print_integer float_min integer_stackdepth tag_float_291 6 tag_float_291 integer_inc float_mod print_integer)
Errors: [16.5677 9 6.0519 8 10.506 10 63.29 7 46.4786 10 27.3773 7 21.7659 9 62.2423 12 65.7283 10 19.35 7 66.3997 9 44.1628 9 91.2753 9 86.3488 9 73.351 10 39.0737 11 55.3057 9 90.0769 11 57.4296 10 21.0794 7 84.5969 10 9.4308 7 55.9558 10 20.9037 7 43.5424 9]
Total: 1404.2905
Mean: 28.08581
Genome size: 68
Size: 69
Percent parens: 0.014
--- Population Statistics ---
Average total errors in population: 4552.922441700004
Median total errors in population: 1404.2905
Error averages by case: (174.43421120000164 9.502 167.0513567000005 8.713 169.6636977999976 10.268 160.41983339999933 7.71 198.5936531000012 10.422 126.98630129999785 7.662 123.68512599999923 9.515 159.60419030000045 11.842 154.82859439999996 10.173 119.44524290000132 7.713 160.9950122 9.391 143.52801080000097 9.325 234.6874459000013 9.505 230.43460510000327 9.54 159.4903374999982 10.23 178.51015169999954 11.289 153.52073999999874 9.589 182.78178309999782 11.023 210.83564950000164 10.443 121.82070070000098 7.318 229.0062719000018 10.477 168.719183100001 7.809 209.11562279999833 10.23 179.62093359999818 7.868 198.20878670000238 9.378)
Error minima by case: (16.5458 8 6.0033 7 10.4841 8 22.3187 6 37.5822 8 25.3852 6 5.2616 8 20.263 8 24.2808 7 0.6736 6 3.3706 7 7.1792 7 2.2516 7 4.3252 8 16.6581 6 3.0501 7 24.3193 8 13.1005 6 57.381 8 4.103 5 8.5563 8 9.4079 7 55.9071 7 20.8552 6 43.4938 7)
Average genome size in population (length): 74.244
Average program size in population (points): 75.244
Average percent parens in population: 0.014
Minimum age in population: 256.3032632915915
Maximum age in population: 261.416045868921
Average age in population: 259.212770185003
Median age in population: 259.2683835525105
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 6
Genome diversity (% unique Plush genomes):	 0.866
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 6
Syntactic diversity (% unique Push programs):	 0.866
Total error diversity:				 0.238
Error (vector) diversity:			 0.281
Behavioral diversity:				 0.281
--- Run Statistics ---
Number of program evaluations used so far: 187000
Number of point (instruction) evaluations so far: 400887666
--- Timings ---
Current time: 1529615903562 milliseconds
Total Time:         750.3 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       255.3 seconds, 34.0%
Fitness Testing:    392.9 seconds, 52.4%
Report:             102.0 seconds, 13.6%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 186
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 187
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 187
;;******************************
;; -*- Number IO problem report - generation 187
Test total error for best: 59998.23050000004
Test mean error for best: 29.99912
;;------------------------------
Outputs of best individual on training cases:
Correct output: -57.4559422311 | Program output: -74.023617    
Correct output: -71.0754923621 | Program output: -65.023617    
Correct output: -66.5176295557 | Program output: -77.023617    
Correct output: 149.3187378    | Program output: 86.028727     
Correct output: -36.5450493525 | Program output: -83.023617    
Correct output: 75.4021928097  | Program output: 48.024907     
Correct output: 52.2615929867  | Program output: 74.027527     
Correct output: -19.2178367434 | Program output: 43.024417     
Correct output: 66.7518906772  | Program output: 1.023617      
Correct output: 7.673605441    | Program output: 27.023607     
Correct output: 23.6294031682  | Program output: 90.029107     
Correct output: -6.1389033433  | Program output: 38.023927     
Correct output: 9.2516366816   | Program output: -82.023627    
Correct output: 31.3251776267  | Program output: -55.023627    
Correct output: 73.3746496408  | Program output: 0.023607      
Correct output: 20.0500553336  | Program output: -19.023627    
Correct output: -23.2820697498 | Program output: 32.023627     
Correct output: 120.1004999359 | Program output: 30.023607     
Correct output: -155.453212395 | Program output: -98.023617    
Correct output: 31.10301576    | Program output: 10.023617     
Correct output: 45.5733057121  | Program output: -39.023607    
Correct output: -68.592783645  | Program output: -78.023607    
Correct output: -125.979392023 | Program output: -70.023627    
Correct output: -91.9273649148 | Program output: -71.023617    
Correct output: -92.5660607267 | Program output: -49.023627    
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_min} {:instruction float_rot} {:instruction float_min} {:instruction float_rot} {:instruction integer_dup} {:instruction float_rot} {:instruction integer_mod} {:instruction 27} {:instruction 9} {:instruction tag_float_196} {:instruction float_swap} {:instruction float_rot} {:instruction integer_add} {:instruction integer_stackdepth} {:instruction 68.78157327067541} {:instruction in2} {:instruction integer_add} {:instruction integer_max} {:instruction integer_rot} {:instruction integer_stackdepth} {:instruction float_flush} {:instruction in2} {:instruction float_frominteger} {:instruction print_float} {:instruction integer_dup} {:instruction float_shove} {:instruction float_shove} {:instruction integer_add} {:instruction float_mod} {:instruction print_integer} {:instruction print_integer} {:instruction integer_div} {:instruction integer_dup_items} {:instruction print_integer} {:instruction integer_min} {:instruction integer_yank} {:instruction print_integer} {:instruction integer_inc} {:instruction print_integer} {:instruction integer_shove} {:instruction integer_yank} {:instruction print_integer} {:instruction float_flush} {:instruction print_integer} {:instruction print_integer} {:instruction float_mult} {:instruction float_sub} {:instruction in2} {:instruction integer_stackdepth} {:instruction integer_rot} {:instruction in2} {:instruction float_mult} {:instruction integer_stackdepth} {:instruction float_frominteger} {:instruction integer_fromfloat} {:instruction integer_mod} {:instruction print_integer} {:instruction float_min} {:instruction integer_stackdepth} {:instruction integer_stackdepth} {:instruction tag_float_291} {:instruction 7} {:instruction float_flush} {:instruction 6} {:instruction tag_float_172} {:instruction integer_inc} {:instruction float_dec} {:instruction print_integer})
Best program: (float_min float_rot float_min float_rot integer_dup float_rot integer_mod 27 9 tag_float_196 float_swap float_rot integer_add integer_stackdepth 68.78157327067541 in2 integer_add integer_max integer_rot integer_stackdepth float_flush in2 float_frominteger print_float integer_dup float_shove float_shove integer_add float_mod print_integer print_integer integer_div integer_dup_items print_integer integer_min integer_yank print_integer integer_inc print_integer integer_shove integer_yank print_integer float_flush print_integer print_integer float_mult float_sub in2 integer_stackdepth integer_rot in2 float_mult integer_stackdepth float_frominteger integer_fromfloat integer_mod print_integer float_min integer_stackdepth integer_stackdepth tag_float_291 7 float_flush 6 tag_float_172 integer_inc float_dec print_integer)
Errors: [16.5677 9 6.0519 8 10.506 10 63.29 7 46.4786 10 27.3773 7 21.7659 9 62.2423 12 65.7283 10 19.35 7 66.3997 9 44.1628 9 91.2753 9 86.3488 9 73.351 10 39.0737 11 55.3057 9 90.0769 11 57.4296 10 21.0794 7 84.5969 10 9.4308 7 55.9558 10 20.9037 7 43.5424 9]
Total: 1404.2905
Mean: 28.08581
Genome size: 68
Size: 69
Percent parens: 0.014
--- Population Statistics ---
Average total errors in population: 4255.837016800003
Median total errors in population: 1404.2905
Error averages by case: (165.11284790000178 9.456 156.86707650000042 8.654 160.41290449999772 10.252 148.67446409999897 7.672 189.1446912000014 10.421 115.27129929999803 7.633 110.11063129999916 9.471 145.77815469999996 11.846 135.76837450000065 10.193 104.91179370000083 7.695 149.23438339999953 9.364 128.55392950000143 9.31 225.24205340000123 9.524 221.12137130000303 9.539 138.44288789999854 10.248 172.48530709999983 11.269 138.72849399999873 9.58 170.41827919999798 11.0 201.4301748000014 10.414 106.33710050000087 7.337 218.18459620000166 10.485 159.33227940000106 7.775 199.62007299999857 10.207 169.5665962999983 7.849 188.5392531000021 9.354)
Error minima by case: (15.6162 8 5.9838 7 9.5545 8 22.3187 6 19.545 9 26.3032 6 21.7384 8 19.2422 10 24.2693 8 0.6736 6 3.3706 7 6.1627 7 7.7484 7 4.3082 7 16.6454 8 3.0501 8 23.3053 9 13.1005 9 57.3615 9 4.096 5 9.5006 9 8.4793 7 55.8867 9 20.8357 6 43.4734 8)
Average genome size in population (length): 74.331
Average program size in population (points): 75.331
Average percent parens in population: 0.013
Minimum age in population: 257.821999692131
Maximum age in population: 262.5691969606857
Average age in population: 260.6047485253433
Median age in population: 260.6437704335243
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 5
Genome diversity (% unique Plush genomes):	 0.883
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 5
Syntactic diversity (% unique Push programs):	 0.883
Total error diversity:				 0.237
Error (vector) diversity:			 0.28
Behavioral diversity:				 0.281
--- Run Statistics ---
Number of program evaluations used so far: 188000
Number of point (instruction) evaluations so far: 402746141
--- Timings ---
Current time: 1529615907322 milliseconds
Total Time:         754.1 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       256.6 seconds, 34.0%
Fitness Testing:    394.9 seconds, 52.4%
Report:             102.4 seconds, 13.6%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 187
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 188
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 188
;;******************************
;; -*- Number IO problem report - generation 188
Test total error for best: 59998.23050000004
Test mean error for best: 29.99912
;;------------------------------
Outputs of best individual on training cases:
Correct output: -57.4559422311 | Program output: -74.023617    
Correct output: -71.0754923621 | Program output: -65.023617    
Correct output: -66.5176295557 | Program output: -77.023617    
Correct output: 149.3187378    | Program output: 86.028727     
Correct output: -36.5450493525 | Program output: -83.023617    
Correct output: 75.4021928097  | Program output: 48.024907     
Correct output: 52.2615929867  | Program output: 74.027527     
Correct output: -19.2178367434 | Program output: 43.024417     
Correct output: 66.7518906772  | Program output: 1.023617      
Correct output: 7.673605441    | Program output: 27.023607     
Correct output: 23.6294031682  | Program output: 90.029107     
Correct output: -6.1389033433  | Program output: 38.023927     
Correct output: 9.2516366816   | Program output: -82.023627    
Correct output: 31.3251776267  | Program output: -55.023627    
Correct output: 73.3746496408  | Program output: 0.023607      
Correct output: 20.0500553336  | Program output: -19.023627    
Correct output: -23.2820697498 | Program output: 32.023627     
Correct output: 120.1004999359 | Program output: 30.023607     
Correct output: -155.453212395 | Program output: -98.023617    
Correct output: 31.10301576    | Program output: 10.023617     
Correct output: 45.5733057121  | Program output: -39.023607    
Correct output: -68.592783645  | Program output: -78.023607    
Correct output: -125.979392023 | Program output: -70.023627    
Correct output: -91.9273649148 | Program output: -71.023617    
Correct output: -92.5660607267 | Program output: -49.023627    
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_dec} {:instruction float_rot} {:instruction float_rot} {:instruction integer_dup} {:instruction float_rot} {:instruction integer_mod} {:instruction 27} {:instruction float_sub} {:instruction integer_swap} {:instruction float_yankdup} {:instruction integer_yank} {:instruction 9} {:instruction integer_add} {:instruction integer_stackdepth} {:instruction float_add} {:instruction in2} {:instruction tag_float_196} {:instruction float_swap} {:instruction float_rot} {:instruction integer_add} {:instruction integer_max} {:instruction integer_stackdepth} {:instruction float_flush} {:instruction in2} {:instruction float_frominteger} {:instruction print_float} {:instruction integer_dup} {:instruction float_dup} {:instruction float_shove} {:instruction integer_inc} {:instruction print_integer} {:instruction integer_shove} {:instruction float_flush} {:instruction print_integer} {:instruction tag_integer_480} {:instruction integer_yank} {:instruction print_integer} {:instruction integer_yank} {:instruction integer_max} {:instruction integer_yankdup} {:instruction integer_stackdepth} {:instruction in2} {:instruction float_add} {:instruction in2} {:instruction integer_mod} {:instruction float_add} {:instruction in2} {:instruction float_mult} {:instruction integer_stackdepth} {:instruction float_frominteger} {:instruction integer_fromfloat} {:instruction integer_mod} {:instruction print_integer} {:instruction float_add} {:instruction float_mult} {:instruction tag_float_291} {:instruction 6} {:instruction tag_float_291} {:instruction integer_inc} {:instruction float_swap} {:instruction print_integer} {:instruction float_sub} {:instruction integer_stackdepth} {:instruction tag_float_291} {:instruction 8} {:instruction float_cos})
Best program: (integer_dec float_rot float_rot integer_dup float_rot integer_mod 27 float_sub integer_swap float_yankdup integer_yank 9 integer_add integer_stackdepth float_add in2 tag_float_196 float_swap float_rot integer_add integer_max integer_stackdepth float_flush in2 float_frominteger print_float integer_dup float_dup float_shove integer_inc print_integer integer_shove float_flush print_integer tag_integer_480 integer_yank print_integer integer_yank integer_max integer_yankdup integer_stackdepth in2 float_add in2 integer_mod float_add in2 float_mult integer_stackdepth float_frominteger integer_fromfloat integer_mod print_integer float_add float_mult tag_float_291 6 tag_float_291 integer_inc float_swap print_integer float_sub integer_stackdepth tag_float_291 8 float_cos)
Errors: [16.5677 9 6.0519 8 10.506 10 63.29 7 46.4786 10 27.3773 7 21.7659 9 62.2423 12 65.7283 10 19.35 7 66.3997 9 44.1628 9 91.2753 9 86.3488 9 73.351 10 39.0737 11 55.3057 9 90.0769 11 57.4296 10 21.0794 7 84.5969 10 9.4308 7 55.9558 10 20.9037 7 43.5424 9]
Total: 1404.2905
Mean: 28.08581
Genome size: 66
Size: 67
Percent parens: 0.015
--- Population Statistics ---
Average total errors in population: 4201.827228600003
Median total errors in population: 1404.2905
Error averages by case: (157.23793660000086 9.453 149.81066020000108 8.712 152.44902839999796 10.207 148.69116659999867 7.68 181.6508111000012 10.439 114.90146859999824 7.607 112.31198489999927 9.425 148.45503349999973 11.812 146.78086590000066 10.187 108.82174610000078 7.706 151.46559289999936 9.406 132.28077340000127 9.379 218.12243030000093 9.53 213.842365600003 9.503 149.10839219999852 10.266 162.678479299999 11.281 140.82105129999874 9.571 170.94937949999854 11.005 194.7177319000015 10.402 108.45429010000079 7.317 211.04189350000183 10.441 151.414000100001 7.829 193.83714129999856 10.213 163.68267039999847 7.859 181.74733490000216 9.323)
Error minima by case: (16.5452 7 6.0031 7 10.4837 9 22.3187 6 37.5733 9 11.2648 6 5.2616 8 20.2643 10 19.9151 8 0.6736 6 3.3706 8 7.1803 7 0.1974 7 4.2982 7 13.2924 9 3.0501 10 24.3174 9 9.9369 9 57.3809 9 4.086 5 18.5663 9 9.4075 6 55.907 9 20.855 6 43.4937 8)
Average genome size in population (length): 74.368
Average program size in population (points): 75.368
Average percent parens in population: 0.013
Minimum age in population: 259.3259341691911
Maximum age in population: 264.2183582898059
Average age in population: 261.9836575086873
Median age in population: 262.0190604234823
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 5
Genome diversity (% unique Plush genomes):	 0.871
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 5
Syntactic diversity (% unique Push programs):	 0.871
Total error diversity:				 0.226
Error (vector) diversity:			 0.262
Behavioral diversity:				 0.262
--- Run Statistics ---
Number of program evaluations used so far: 189000
Number of point (instruction) evaluations so far: 404605666
--- Timings ---
Current time: 1529615910847 milliseconds
Total Time:         757.5 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       257.8 seconds, 34.0%
Fitness Testing:    396.8 seconds, 52.4%
Report:             102.8 seconds, 13.6%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 188
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 189
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 189
;;******************************
;; -*- Number IO problem report - generation 189
Test total error for best: 59998.23050000004
Test mean error for best: 29.99912
;;------------------------------
Outputs of best individual on training cases:
Correct output: -57.4559422311 | Program output: -74.023617    
Correct output: -71.0754923621 | Program output: -65.023617    
Correct output: -66.5176295557 | Program output: -77.023617    
Correct output: 149.3187378    | Program output: 86.028727     
Correct output: -36.5450493525 | Program output: -83.023617    
Correct output: 75.4021928097  | Program output: 48.024907     
Correct output: 52.2615929867  | Program output: 74.027527     
Correct output: -19.2178367434 | Program output: 43.024417     
Correct output: 66.7518906772  | Program output: 1.023617      
Correct output: 7.673605441    | Program output: 27.023607     
Correct output: 23.6294031682  | Program output: 90.029107     
Correct output: -6.1389033433  | Program output: 38.023927     
Correct output: 9.2516366816   | Program output: -82.023627    
Correct output: 31.3251776267  | Program output: -55.023627    
Correct output: 73.3746496408  | Program output: 0.023607      
Correct output: 20.0500553336  | Program output: -19.023627    
Correct output: -23.2820697498 | Program output: 32.023627     
Correct output: 120.1004999359 | Program output: 30.023607     
Correct output: -155.453212395 | Program output: -98.023617    
Correct output: 31.10301576    | Program output: 10.023617     
Correct output: 45.5733057121  | Program output: -39.023607    
Correct output: -68.592783645  | Program output: -78.023607    
Correct output: -125.979392023 | Program output: -70.023627    
Correct output: -91.9273649148 | Program output: -71.023617    
Correct output: -92.5660607267 | Program output: -49.023627    
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_shove} {:instruction float_add} {:instruction float_dup_items} {:instruction integer_swap} {:instruction float_min} {:instruction float_add} {:instruction float_rot} {:instruction integer_dup} {:instruction float_rot} {:instruction integer_inc} {:instruction float_add} {:instruction float_yank} {:instruction float_cos} {:instruction float_min} {:instruction integer_div} {:instruction 27} {:instruction float_sub} {:instruction integer_yankdup} {:instruction integer_sub} {:instruction 9} {:instruction float_rot} {:instruction integer_add} {:instruction integer_stackdepth} {:instruction float_mod} {:instruction in2} {:instruction integer_add} {:instruction integer_max} {:instruction float_dup_times} {:instruction integer_stackdepth} {:instruction float_div} {:instruction in2} {:instruction float_frominteger} {:instruction print_float} {:instruction integer_dup} {:instruction float_shove} {:instruction float_shove} {:instruction integer_add} {:instruction float_inc} {:instruction integer_dup} {:instruction integer_dup_items} {:instruction print_integer} {:instruction tag_integer_480} {:instruction integer_yank} {:instruction print_integer} {:instruction integer_yank} {:instruction integer_max} {:instruction integer_yankdup} {:instruction integer_stackdepth} {:instruction integer_yank} {:instruction integer_max} {:instruction float_sin} {:instruction integer_stackdepth} {:instruction float_min} {:instruction in2} {:instruction integer_yank} {:instruction float_cos} {:instruction integer_max} {:instruction float_sin} {:instruction integer_stackdepth} {:instruction float_add} {:instruction in2} {:instruction float_mod} {:instruction integer_stackdepth} {:instruction integer_mod} {:instruction print_integer} {:instruction float_min} {:instruction in1} {:instruction tag_float_291} {:instruction 6} {:instruction float_sin} {:instruction integer_inc} {:instruction float_swap} {:instruction print_integer})
Best program: (float_shove float_add float_dup_items integer_swap float_min float_add float_rot integer_dup float_rot integer_inc float_add float_yank float_cos float_min integer_div 27 float_sub integer_yankdup integer_sub 9 float_rot integer_add integer_stackdepth float_mod in2 integer_add integer_max float_dup_times integer_stackdepth float_div in2 float_frominteger print_float integer_dup float_shove float_shove integer_add float_inc integer_dup integer_dup_items print_integer tag_integer_480 integer_yank print_integer integer_yank integer_max integer_yankdup integer_stackdepth integer_yank integer_max float_sin integer_stackdepth float_min in2 integer_yank float_cos integer_max float_sin integer_stackdepth float_add in2 float_mod integer_stackdepth integer_mod print_integer float_min in1 tag_float_291 6 float_sin integer_inc float_swap print_integer)
Errors: [16.5677 9 6.0519 8 10.506 10 63.29 7 46.4786 10 27.3773 7 21.7659 9 62.2423 12 65.7283 10 19.35 7 66.3997 9 44.1628 9 91.2753 9 86.3488 9 73.351 10 39.0737 11 55.3057 9 90.0769 11 57.4296 10 21.0794 7 84.5969 10 9.4308 7 55.9558 10 20.9037 7 43.5424 9]
Total: 1404.2905
Mean: 28.08581
Genome size: 73
Size: 74
Percent parens: 0.014
--- Population Statistics ---
Average total errors in population: 4095.4649444000015
Median total errors in population: 1404.2905
Error averages by case: (154.06674270000144 9.427 145.24220020000095 8.605 149.15690519999757 10.217 144.15923929999846 7.651 179.0362641000015 10.379 110.54638569999777 7.622 105.64663749999912 9.472 141.69493949999952 11.853 142.35854930000056 10.191 103.34949360000108 7.64 145.91303779999933 9.37 125.22503950000157 9.311 216.12893660000125 9.448 211.32451280000336 9.518 147.4154374999983 10.214 158.33045919999913 11.238 136.35344449999846 9.537 167.82612169999769 10.971 190.61664590000174 10.389 104.53059910000094 7.328 208.9146382000017 10.439 148.1857324000012 7.72 188.39560629999855 10.21 158.20189809999835 7.778 176.99547770000237 9.322)
Error minima by case: (16.5441 8 5.9838 7 10.4824 8 22.3187 6 36.562 9 26.3852 6 21.7385 8 19.2348 9 25.7519 9 0.6736 6 3.3706 8 6.1659 7 8.2143 7 4.3252 7 33.6254 8 3.0501 10 23.3091 9 13.1005 9 57.3615 9 4.103 5 8.5733 9 9.4072 6 55.8867 9 20.8357 6 43.4734 8)
Average genome size in population (length): 74.459
Average program size in population (points): 75.459
Average percent parens in population: 0.013
Minimum age in population: 260.5811314829318
Maximum age in population: 265.2705238119997
Average age in population: 263.3811317088604
Median age in population: 263.4223993345475
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 6
Genome diversity (% unique Plush genomes):	 0.87
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 6
Syntactic diversity (% unique Push programs):	 0.87
Total error diversity:				 0.221
Error (vector) diversity:			 0.267
Behavioral diversity:				 0.267
--- Run Statistics ---
Number of program evaluations used so far: 190000
Number of point (instruction) evaluations so far: 406467576
--- Timings ---
Current time: 1529615914721 milliseconds
Total Time:         761.4 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       259.2 seconds, 34.0%
Fitness Testing:    398.8 seconds, 52.4%
Report:             103.3 seconds, 13.6%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 189
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 190
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 190
;;******************************
;; -*- Number IO problem report - generation 190
Test total error for best: 59998.23050000004
Test mean error for best: 29.99912
;;------------------------------
Outputs of best individual on training cases:
Correct output: -57.4559422311 | Program output: -74.023617    
Correct output: -71.0754923621 | Program output: -65.023617    
Correct output: -66.5176295557 | Program output: -77.023617    
Correct output: 149.3187378    | Program output: 86.028727     
Correct output: -36.5450493525 | Program output: -83.023617    
Correct output: 75.4021928097  | Program output: 48.024907     
Correct output: 52.2615929867  | Program output: 74.027527     
Correct output: -19.2178367434 | Program output: 43.024417     
Correct output: 66.7518906772  | Program output: 1.023617      
Correct output: 7.673605441    | Program output: 27.023607     
Correct output: 23.6294031682  | Program output: 90.029107     
Correct output: -6.1389033433  | Program output: 38.023927     
Correct output: 9.2516366816   | Program output: -82.023627    
Correct output: 31.3251776267  | Program output: -55.023627    
Correct output: 73.3746496408  | Program output: 0.023607      
Correct output: 20.0500553336  | Program output: -19.023627    
Correct output: -23.2820697498 | Program output: 32.023627     
Correct output: 120.1004999359 | Program output: 30.023607     
Correct output: -155.453212395 | Program output: -98.023617    
Correct output: 31.10301576    | Program output: 10.023617     
Correct output: 45.5733057121  | Program output: -39.023607    
Correct output: -68.592783645  | Program output: -78.023607    
Correct output: -125.979392023 | Program output: -70.023627    
Correct output: -91.9273649148 | Program output: -71.023617    
Correct output: -92.5660607267 | Program output: -49.023627    
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_min} {:instruction float_rot} {:instruction float_min} {:instruction float_rot} {:instruction integer_dup} {:instruction float_rot} {:instruction float_mult} {:instruction 27} {:instruction 9} {:instruction tag_float_196} {:instruction float_swap} {:instruction float_rot} {:instruction integer_add} {:instruction integer_stackdepth} {:instruction in2} {:instruction integer_add} {:instruction integer_max} {:instruction float_yank} {:instruction integer_stackdepth} {:instruction float_flush} {:instruction in2} {:instruction float_frominteger} {:instruction print_float} {:instruction integer_dup} {:instruction float_shove} {:instruction float_shove} {:instruction integer_add} {:instruction float_mod} {:instruction integer_dup} {:instruction integer_dup_items} {:instruction print_integer} {:instruction integer_min} {:instruction float_dup_items} {:instruction print_integer} {:instruction integer_yank} {:instruction integer_max} {:instruction integer_max} {:instruction integer_yank} {:instruction integer_stackdepth} {:instruction float_min} {:instruction float_div} {:instruction float_mult} {:instruction float_sin} {:instruction integer_stackdepth} {:instruction float_add} {:instruction in2} {:instruction float_mod} {:instruction integer_stackdepth} {:instruction integer_mod} {:instruction print_integer} {:instruction float_min} {:instruction integer_stackdepth} {:instruction tag_float_291} {:instruction 6} {:instruction tag_float_291} {:instruction integer_inc} {:instruction float_mod} {:instruction print_integer})
Best program: (float_min float_rot float_min float_rot integer_dup float_rot float_mult 27 9 tag_float_196 float_swap float_rot integer_add integer_stackdepth in2 integer_add integer_max float_yank integer_stackdepth float_flush in2 float_frominteger print_float integer_dup float_shove float_shove integer_add float_mod integer_dup integer_dup_items print_integer integer_min float_dup_items print_integer integer_yank integer_max integer_max integer_yank integer_stackdepth float_min float_div float_mult float_sin integer_stackdepth float_add in2 float_mod integer_stackdepth integer_mod print_integer float_min integer_stackdepth tag_float_291 6 tag_float_291 integer_inc float_mod print_integer)
Errors: [16.5677 9 6.0519 8 10.506 10 63.29 7 46.4786 10 27.3773 7 21.7659 9 62.2423 12 65.7283 10 19.35 7 66.3997 9 44.1628 9 91.2753 9 86.3488 9 73.351 10 39.0737 11 55.3057 9 90.0769 11 57.4296 10 21.0794 7 84.5969 10 9.4308 7 55.9558 10 20.9037 7 43.5424 9]
Total: 1404.2905
Mean: 28.08581
Genome size: 58
Size: 59
Percent parens: 0.017
--- Population Statistics ---
Average total errors in population: 3833.4769695000027
Median total errors in population: 1404.2905
Error averages by case: (147.25697590000075 9.446 138.89209730000087 8.66 142.54678439999816 10.177 129.7569855999981 7.584 171.76644830000117 10.391 94.96878459999851 7.555 91.00023219999929 9.411 127.84957079999896 11.806 130.32279340000113 10.156 86.16868670000028 7.631 130.16993399999853 9.331 111.20857540000102 9.319 208.62363460000083 9.444 204.24375680000304 9.48 131.90744779999872 10.25 153.85439689999941 11.238 121.46349429999879 9.488 152.10102989999862 10.979 184.41467770000136 10.38 89.68659940000069 7.292 202.83524560000166 10.41 141.34846250000095 7.737 182.54942829999885 10.205 151.80116129999877 7.788 171.29176580000174 9.29)
Error minima by case: (16.5458 7 5.9991 7 10.4841 9 12.3187 6 37.582 9 17.7971 6 5.2616 8 20.2628 9 26.4474 9 0.6736 7 0.3706 8 7.1789 8 0.2234 7 4.3252 8 19.8246 9 3.0501 9 24.3191 9 9.9231 9 57.3769 9 4.103 5 9.5663 9 9.4072 6 55.9031 9 20.8512 6 43.4897 7)
Average genome size in population (length): 73.639
Average program size in population (points): 74.639
Average percent parens in population: 0.014
Minimum age in population: 261.5811314829318
Maximum age in population: 266.6449884277028
Average age in population: 264.789292716566
Median age in population: 264.8584148703204
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 7
Genome diversity (% unique Plush genomes):	 0.868
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 7
Syntactic diversity (% unique Push programs):	 0.868
Total error diversity:				 0.225
Error (vector) diversity:			 0.257
Behavioral diversity:				 0.257
--- Run Statistics ---
Number of program evaluations used so far: 191000
Number of point (instruction) evaluations so far: 408308976
--- Timings ---
Current time: 1529615918235 milliseconds
Total Time:         765.0 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       260.5 seconds, 34.1%
Fitness Testing:    400.6 seconds, 52.4%
Report:             103.8 seconds, 13.6%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 190
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 191
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 191
;;******************************
;; -*- Number IO problem report - generation 191
Test total error for best: 59998.23050000004
Test mean error for best: 29.99912
;;------------------------------
Outputs of best individual on training cases:
Correct output: -57.4559422311 | Program output: -74.023617    
Correct output: -71.0754923621 | Program output: -65.023617    
Correct output: -66.5176295557 | Program output: -77.023617    
Correct output: 149.3187378    | Program output: 86.028727     
Correct output: -36.5450493525 | Program output: -83.023617    
Correct output: 75.4021928097  | Program output: 48.024907     
Correct output: 52.2615929867  | Program output: 74.027527     
Correct output: -19.2178367434 | Program output: 43.024417     
Correct output: 66.7518906772  | Program output: 1.023617      
Correct output: 7.673605441    | Program output: 27.023607     
Correct output: 23.6294031682  | Program output: 90.029107     
Correct output: -6.1389033433  | Program output: 38.023927     
Correct output: 9.2516366816   | Program output: -82.023627    
Correct output: 31.3251776267  | Program output: -55.023627    
Correct output: 73.3746496408  | Program output: 0.023607      
Correct output: 20.0500553336  | Program output: -19.023627    
Correct output: -23.2820697498 | Program output: 32.023627     
Correct output: 120.1004999359 | Program output: 30.023607     
Correct output: -155.453212395 | Program output: -98.023617    
Correct output: 31.10301576    | Program output: 10.023617     
Correct output: 45.5733057121  | Program output: -39.023607    
Correct output: -68.592783645  | Program output: -78.023607    
Correct output: -125.979392023 | Program output: -70.023627    
Correct output: -91.9273649148 | Program output: -71.023617    
Correct output: -92.5660607267 | Program output: -49.023627    
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_min} {:instruction float_rot} {:instruction float_min} {:instruction float_rot} {:instruction integer_dup} {:instruction float_rot} {:instruction integer_mod} {:instruction 27} {:instruction 9} {:instruction tag_float_196} {:instruction in1} {:instruction float_rot} {:instruction integer_add} {:instruction integer_stackdepth} {:instruction float_mod} {:instruction in2} {:instruction integer_add} {:instruction integer_max} {:instruction integer_rot} {:instruction integer_stackdepth} {:instruction float_flush} {:instruction in2} {:instruction float_frominteger} {:instruction print_float} {:instruction integer_dup} {:instruction float_shove} {:instruction float_shove} {:instruction integer_add} {:instruction float_mod} {:instruction print_integer} {:instruction print_integer} {:instruction integer_div} {:instruction float_min} {:instruction integer_inc} {:instruction float_frominteger} {:instruction print_float} {:instruction integer_dup} {:instruction float_shove} {:instruction print_float} {:instruction float_shove} {:instruction float_sin} {:instruction integer_max} {:instruction integer_min} {:instruction integer_div} {:instruction print_integer} {:instruction integer_yank} {:instruction float_dup} {:instruction float_shove} {:instruction integer_inc} {:instruction print_integer} {:instruction integer_dup_times} {:instruction float_flush} {:instruction print_integer} {:instruction integer_yank} {:instruction float_mult} {:instruction float_cos} {:instruction in2} {:instruction -5} {:instruction integer_yank} {:instruction integer_fromfloat} {:instruction float_sin} {:instruction integer_stackdepth} {:instruction float_min} {:instruction in2} {:instruction float_mult} {:instruction integer_stackdepth} {:instruction float_frominteger} {:instruction integer_fromfloat} {:instruction integer_mod} {:instruction print_integer} {:instruction 82} {:instruction integer_stackdepth} {:instruction tag_float_291} {:instruction 6} {:instruction integer_inc} {:instruction float_swap} {:instruction print_integer})
Best program: (float_min float_rot float_min float_rot integer_dup float_rot integer_mod 27 9 tag_float_196 in1 float_rot integer_add integer_stackdepth float_mod in2 integer_add integer_max integer_rot integer_stackdepth float_flush in2 float_frominteger print_float integer_dup float_shove float_shove integer_add float_mod print_integer print_integer integer_div float_min integer_inc float_frominteger print_float integer_dup float_shove print_float float_shove float_sin integer_max integer_min integer_div print_integer integer_yank float_dup float_shove integer_inc print_integer integer_dup_times float_flush print_integer integer_yank float_mult float_cos in2 -5 integer_yank integer_fromfloat float_sin integer_stackdepth float_min in2 float_mult integer_stackdepth float_frominteger integer_fromfloat integer_mod print_integer 82 integer_stackdepth tag_float_291 6 integer_inc float_swap print_integer)
Errors: [16.5677 9 6.0519 8 10.506 10 63.29 7 46.4786 10 27.3773 7 21.7659 9 62.2423 12 65.7283 10 19.35 7 66.3997 9 44.1628 9 91.2753 9 86.3488 9 73.351 10 39.0737 11 55.3057 9 90.0769 11 57.4296 10 21.0794 7 84.5969 10 9.4308 7 55.9558 10 20.9037 7 43.5424 9]
Total: 1404.2905
Mean: 28.08581
Genome size: 77
Size: 78
Percent parens: 0.013
--- Population Statistics ---
Average total errors in population: 4065.384253400003
Median total errors in population: 1404.2905
Error averages by case: (147.25394620000128 9.438 140.57760030000094 8.634 142.29076319999805 10.24 148.45896229999911 7.613 172.27193400000124 10.389 115.56518659999773 7.593 112.31859939999919 9.454 147.61197330000033 11.834 139.51911000000035 10.172 107.50308930000132 7.626 151.97410149999982 9.361 132.20459350000138 9.323 209.62471710000133 9.438 205.24791100000323 9.484 144.45103089999827 10.217 155.54657619999935 11.256 140.39179369999843 9.532 169.7832390999977 10.996 185.59328110000163 10.39 106.75681940000102 7.287 203.13434820000157 10.426 141.27409440000096 7.724 183.9354284999986 10.197 153.51236929999828 7.792 172.83978490000212 9.327)
Error minima by case: (16.5441 8 5.9861 7 10.4824 8 22.3187 6 37.545 9 26.3952 6 21.7384 8 20.2178 9 24.2708 8 0.6736 6 3.3733 7 8.1389 7 2.2516 7 4.3035 8 16.6481 8 3.0501 10 25.2821 9 6.8995 9 57.3638 9 4.0903 6 9.5663 9 9.4072 6 55.89 8 20.838 6 43.4767 8)
Average genome size in population (length): 73.666
Average program size in population (points): 74.666
Average percent parens in population: 0.014
Minimum age in population: 263.7449421979006
Maximum age in population: 268.343056418316
Average age in population: 266.1573446126621
Median age in population: 266.1908665152898
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 7
Genome diversity (% unique Plush genomes):	 0.865
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 7
Syntactic diversity (% unique Push programs):	 0.865
Total error diversity:				 0.208
Error (vector) diversity:			 0.257
Behavioral diversity:				 0.257
--- Run Statistics ---
Number of program evaluations used so far: 192000
Number of point (instruction) evaluations so far: 410150951
--- Timings ---
Current time: 1529615921873 milliseconds
Total Time:         768.6 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       261.9 seconds, 34.1%
Fitness Testing:    402.4 seconds, 52.4%
Report:             104.2 seconds, 13.6%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 191
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 192
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 192
;;******************************
;; -*- Number IO problem report - generation 192
Test total error for best: 59998.23050000004
Test mean error for best: 29.99912
;;------------------------------
Outputs of best individual on training cases:
Correct output: -57.4559422311 | Program output: -74.023617    
Correct output: -71.0754923621 | Program output: -65.023617    
Correct output: -66.5176295557 | Program output: -77.023617    
Correct output: 149.3187378    | Program output: 86.028727     
Correct output: -36.5450493525 | Program output: -83.023617    
Correct output: 75.4021928097  | Program output: 48.024907     
Correct output: 52.2615929867  | Program output: 74.027527     
Correct output: -19.2178367434 | Program output: 43.024417     
Correct output: 66.7518906772  | Program output: 1.023617      
Correct output: 7.673605441    | Program output: 27.023607     
Correct output: 23.6294031682  | Program output: 90.029107     
Correct output: -6.1389033433  | Program output: 38.023927     
Correct output: 9.2516366816   | Program output: -82.023627    
Correct output: 31.3251776267  | Program output: -55.023627    
Correct output: 73.3746496408  | Program output: 0.023607      
Correct output: 20.0500553336  | Program output: -19.023627    
Correct output: -23.2820697498 | Program output: 32.023627     
Correct output: 120.1004999359 | Program output: 30.023607     
Correct output: -155.453212395 | Program output: -98.023617    
Correct output: 31.10301576    | Program output: 10.023617     
Correct output: 45.5733057121  | Program output: -39.023607    
Correct output: -68.592783645  | Program output: -78.023607    
Correct output: -125.979392023 | Program output: -70.023627    
Correct output: -91.9273649148 | Program output: -71.023617    
Correct output: -92.5660607267 | Program output: -49.023627    
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_inc} {:instruction integer_inc} {:instruction float_min} {:instruction float_min} {:instruction integer_flush} {:instruction integer_div} {:instruction 27} {:instruction float_mult} {:instruction integer_sub} {:instruction 9} {:instruction integer_add} {:instruction integer_stackdepth} {:instruction float_frominteger} {:instruction tag_float_196} {:instruction float_swap} {:instruction float_rot} {:instruction integer_add} {:instruction integer_stackdepth} {:instruction float_add} {:instruction in2} {:instruction tag_float_196} {:instruction integer_swap} {:instruction float_rot} {:instruction integer_add} {:instruction integer_max} {:instruction integer_dup_times} {:instruction integer_stackdepth} {:instruction in2} {:instruction float_frominteger} {:instruction print_float} {:instruction integer_dup} {:instruction float_shove} {:instruction float_shove} {:instruction integer_inc} {:instruction float_shove} {:instruction print_integer} {:instruction float_mult} {:instruction integer_div} {:instruction integer_mod} {:instruction integer_yank} {:instruction integer_max} {:instruction float_sub} {:instruction integer_max} {:instruction print_integer} {:instruction float_min} {:instruction integer_stackdepth} {:instruction tag_float_291} {:instruction integer_max} {:instruction integer_dup_times} {:instruction float_swap} {:instruction float_sin} {:instruction integer_stackdepth} {:instruction float_cos} {:instruction in2} {:instruction float_div} {:instruction integer_stackdepth} {:instruction float_frominteger} {:instruction integer_fromfloat} {:instruction integer_mod} {:instruction print_integer} {:instruction float_min} {:instruction integer_stackdepth} {:instruction tag_float_291} {:instruction 6} {:instruction tag_float_172} {:instruction integer_stackdepth} {:instruction tag_float_218} {:instruction 6} {:instruction tag_float_208} {:instruction integer_inc} {:instruction float_swap} {:instruction print_integer})
Best program: (integer_inc integer_inc float_min float_min integer_flush integer_div 27 float_mult integer_sub 9 integer_add integer_stackdepth float_frominteger tag_float_196 float_swap float_rot integer_add integer_stackdepth float_add in2 tag_float_196 integer_swap float_rot integer_add integer_max integer_dup_times integer_stackdepth in2 float_frominteger print_float integer_dup float_shove float_shove integer_inc float_shove print_integer float_mult integer_div integer_mod integer_yank integer_max float_sub integer_max print_integer float_min integer_stackdepth tag_float_291 integer_max integer_dup_times float_swap float_sin integer_stackdepth float_cos in2 float_div integer_stackdepth float_frominteger integer_fromfloat integer_mod print_integer float_min integer_stackdepth tag_float_291 6 tag_float_172 integer_stackdepth tag_float_218 6 tag_float_208 integer_inc float_swap print_integer)
Errors: [16.5677 9 6.0519 8 10.506 10 63.29 7 46.4786 10 27.3773 7 21.7659 9 62.2423 12 65.7283 10 19.35 7 66.3997 9 44.1628 9 91.2753 9 86.3488 9 73.351 10 39.0737 11 55.3057 9 90.0769 11 57.4296 10 21.0794 7 84.5969 10 9.4308 7 55.9558 10 20.9037 7 43.5424 9]
Total: 1404.2905
Mean: 28.08581
Genome size: 72
Size: 73
Percent parens: 0.014
--- Population Statistics ---
Average total errors in population: 4447.969444100003
Median total errors in population: 1404.2905
Error averages by case: (171.96113910000227 9.541 163.7096096999996 8.725 167.33458739999784 10.275 155.50748549999994 7.698 195.83298610000125 10.484 121.8017262999977 7.649 116.78117409999912 9.491 151.5176880000007 11.838 153.46230729999925 10.188 113.09717660000133 7.724 155.6527289000005 9.406 135.32893790000108 9.343 231.35435080000136 9.533 227.10573700000313 9.551 157.48167219999834 10.232 177.56097170000018 11.301 145.46103509999875 9.584 177.26916109999752 11.017 208.24497160000146 10.453 114.72209390000093 7.333 225.87630920000183 10.465 166.38528130000108 7.877 206.04958429999851 10.243 176.41767709999843 7.91 194.8170519000021 9.375)
Error minima by case: (16.5511 8 5.9811 7 10.4894 8 22.3187 6 36.5687 9 26.3952 6 21.7454 8 18.3861 7 30.7349 5 0.6736 6 3.3706 7 6.1628 7 2.2516 6 4.3252 6 33.6254 5 3.0501 7 23.3057 7 8.0335 5 57.3589 7 4.103 5 9.5663 7 9.4142 6 55.885 7 20.833 6 43.4717 7)
Average genome size in population (length): 73.325
Average program size in population (points): 74.325
Average percent parens in population: 0.014
Minimum age in population: 264.7449421979006
Maximum age in population: 269.5039194658367
Average age in population: 267.598648727156
Median age in population: 267.6701206765402
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 8
Genome diversity (% unique Plush genomes):	 0.865
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 8
Syntactic diversity (% unique Push programs):	 0.865
Total error diversity:				 0.244
Error (vector) diversity:			 0.294
Behavioral diversity:				 0.295
--- Run Statistics ---
Number of program evaluations used so far: 193000
Number of point (instruction) evaluations so far: 411984676
--- Timings ---
Current time: 1529615925547 milliseconds
Total Time:         772.2 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       263.3 seconds, 34.1%
Fitness Testing:    404.2 seconds, 52.3%
Report:             104.6 seconds, 13.6%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 192
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 193
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 193
;;******************************
;; -*- Number IO problem report - generation 193
Test total error for best: 59998.23050000004
Test mean error for best: 29.99912
;;------------------------------
Outputs of best individual on training cases:
Correct output: -57.4559422311 | Program output: -74.023617    
Correct output: -71.0754923621 | Program output: -65.023617    
Correct output: -66.5176295557 | Program output: -77.023617    
Correct output: 149.3187378    | Program output: 86.028727     
Correct output: -36.5450493525 | Program output: -83.023617    
Correct output: 75.4021928097  | Program output: 48.024907     
Correct output: 52.2615929867  | Program output: 74.027527     
Correct output: -19.2178367434 | Program output: 43.024417     
Correct output: 66.7518906772  | Program output: 1.023617      
Correct output: 7.673605441    | Program output: 27.023607     
Correct output: 23.6294031682  | Program output: 90.029107     
Correct output: -6.1389033433  | Program output: 38.023927     
Correct output: 9.2516366816   | Program output: -82.023627    
Correct output: 31.3251776267  | Program output: -55.023627    
Correct output: 73.3746496408  | Program output: 0.023607      
Correct output: 20.0500553336  | Program output: -19.023627    
Correct output: -23.2820697498 | Program output: 32.023627     
Correct output: 120.1004999359 | Program output: 30.023607     
Correct output: -155.453212395 | Program output: -98.023617    
Correct output: 31.10301576    | Program output: 10.023617     
Correct output: 45.5733057121  | Program output: -39.023607    
Correct output: -68.592783645  | Program output: -78.023607    
Correct output: -125.979392023 | Program output: -70.023627    
Correct output: -91.9273649148 | Program output: -71.023617    
Correct output: -92.5660607267 | Program output: -49.023627    
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_inc} {:instruction float_add} {:instruction integer_dup} {:instruction float_min} {:instruction float_sub} {:instruction integer_fromfloat} {:instruction float_yank} {:instruction float_rot} {:instruction float_sub} {:instruction integer_add} {:instruction 27} {:instruction float_sub} {:instruction float_yankdup} {:instruction in1} {:instruction 9} {:instruction integer_add} {:instruction integer_stackdepth} {:instruction float_mod} {:instruction in2} {:instruction integer_add} {:instruction integer_max} {:instruction integer_rot} {:instruction integer_stackdepth} {:instruction float_flush} {:instruction in2} {:instruction float_frominteger} {:instruction print_float} {:instruction integer_dup} {:instruction float_shove} {:instruction float_shove} {:instruction integer_add} {:instruction float_mod} {:instruction print_integer} {:instruction print_integer} {:instruction integer_div} {:instruction float_flush} {:instruction integer_stackdepth} {:instruction in2} {:instruction in2} {:instruction float_mult} {:instruction integer_yank} {:instruction integer_max} {:instruction integer_mult} {:instruction integer_stackdepth} {:instruction float_add} {:instruction in2} {:instruction float_mult} {:instruction integer_stackdepth} {:instruction float_frominteger} {:instruction integer_fromfloat} {:instruction integer_mod} {:instruction print_integer} {:instruction integer_sub} {:instruction integer_stackdepth} {:instruction tag_float_319} {:instruction float_min} {:instruction integer_stackdepth} {:instruction tag_float_291} {:instruction 6} {:instruction tag_float_313} {:instruction integer_inc} {:instruction float_swap} {:instruction print_integer})
Best program: (integer_inc float_add integer_dup float_min float_sub integer_fromfloat float_yank float_rot float_sub integer_add 27 float_sub float_yankdup in1 9 integer_add integer_stackdepth float_mod in2 integer_add integer_max integer_rot integer_stackdepth float_flush in2 float_frominteger print_float integer_dup float_shove float_shove integer_add float_mod print_integer print_integer integer_div float_flush integer_stackdepth in2 in2 float_mult integer_yank integer_max integer_mult integer_stackdepth float_add in2 float_mult integer_stackdepth float_frominteger integer_fromfloat integer_mod print_integer integer_sub integer_stackdepth tag_float_319 float_min integer_stackdepth tag_float_291 6 tag_float_313 integer_inc float_swap print_integer)
Errors: [16.5677 9 6.0519 8 10.506 10 63.29 7 46.4786 10 27.3773 7 21.7659 9 62.2423 12 65.7283 10 19.35 7 66.3997 9 44.1628 9 91.2753 9 86.3488 9 73.351 10 39.0737 11 55.3057 9 90.0769 11 57.4296 10 21.0794 7 84.5969 10 9.4308 7 55.9558 10 20.9037 7 43.5424 9]
Total: 1404.2905
Mean: 28.08581
Genome size: 63
Size: 64
Percent parens: 0.016
--- Population Statistics ---
Average total errors in population: 4026.9808546000036
Median total errors in population: 1404.2905
Error averages by case: (149.20298480000096 9.467 140.66887770000127 8.637 144.3253117999981 10.259 145.5651323999988 7.675 173.95677230000126 10.401 111.49083449999813 7.62 107.39513179999926 9.49 142.77591509999974 11.816 136.02300870000073 10.189 100.8165352000009 7.683 146.03377109999946 9.379 127.41908500000153 9.32 211.0059421000008 9.483 206.7795252000029 9.516 138.15582219999848 10.224 157.26071189999894 11.254 135.79218909999867 9.545 166.36023569999816 10.972 185.9423624000014 10.374 104.4373869000009 7.326 205.29584680000158 10.456 143.25543710000093 7.78 184.20053509999883 10.202 153.64343839999867 7.808 172.98506130000192 9.317)
Error minima by case: (16.5442 8 6.0033 7 10.4825 9 22.3187 6 36.562 9 8.4022 6 21.7387 8 19.2348 9 24.2498 6 0.6736 7 3.3706 8 6.1659 7 0.2189 7 4.3252 7 6.3746 7 3.0501 9 23.3091 9 6.8995 9 57.381 8 4.103 5 8.5663 9 9.4073 6 55.9071 9 20.8552 6 43.4938 8)
Average genome size in population (length): 73.506
Average program size in population (points): 74.506
Average percent parens in population: 0.014
Minimum age in population: 266.2243099999369
Maximum age in population: 270.8503691965608
Average age in population: 268.9721292870513
Median age in population: 269.0178554437063
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 7
Genome diversity (% unique Plush genomes):	 0.86
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 7
Syntactic diversity (% unique Push programs):	 0.86
Total error diversity:				 0.241
Error (vector) diversity:			 0.278
Behavioral diversity:				 0.278
--- Run Statistics ---
Number of program evaluations used so far: 194000
Number of point (instruction) evaluations so far: 413823226
--- Timings ---
Current time: 1529615929308 milliseconds
Total Time:         776.1 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       264.8 seconds, 34.1%
Fitness Testing:    406.1 seconds, 52.3%
Report:             105.1 seconds, 13.5%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 193
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 194
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 194
;;******************************
;; -*- Number IO problem report - generation 194
Test total error for best: 59998.23050000004
Test mean error for best: 29.99912
;;------------------------------
Outputs of best individual on training cases:
Correct output: -57.4559422311 | Program output: -74.023617    
Correct output: -71.0754923621 | Program output: -65.023617    
Correct output: -66.5176295557 | Program output: -77.023617    
Correct output: 149.3187378    | Program output: 86.028727     
Correct output: -36.5450493525 | Program output: -83.023617    
Correct output: 75.4021928097  | Program output: 48.024907     
Correct output: 52.2615929867  | Program output: 74.027527     
Correct output: -19.2178367434 | Program output: 43.024417     
Correct output: 66.7518906772  | Program output: 1.023617      
Correct output: 7.673605441    | Program output: 27.023607     
Correct output: 23.6294031682  | Program output: 90.029107     
Correct output: -6.1389033433  | Program output: 38.023927     
Correct output: 9.2516366816   | Program output: -82.023627    
Correct output: 31.3251776267  | Program output: -55.023627    
Correct output: 73.3746496408  | Program output: 0.023607      
Correct output: 20.0500553336  | Program output: -19.023627    
Correct output: -23.2820697498 | Program output: 32.023627     
Correct output: 120.1004999359 | Program output: 30.023607     
Correct output: -155.453212395 | Program output: -98.023617    
Correct output: 31.10301576    | Program output: 10.023617     
Correct output: 45.5733057121  | Program output: -39.023607    
Correct output: -68.592783645  | Program output: -78.023607    
Correct output: -125.979392023 | Program output: -70.023627    
Correct output: -91.9273649148 | Program output: -71.023617    
Correct output: -92.5660607267 | Program output: -49.023627    
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_sin} {:instruction float_add} {:instruction integer_flush} {:instruction float_mult} {:instruction integer_rot} {:instruction float_add} {:instruction float_yank} {:instruction float_div} {:instruction float_min} {:instruction float_inc} {:instruction float_add} {:instruction float_cos} {:instruction integer_inc} {:instruction 27} {:instruction float_add} {:instruction float_cos} {:instruction 9} {:instruction integer_swap} {:instruction integer_add} {:instruction integer_stackdepth} {:instruction float_mod} {:instruction in2} {:instruction tag_float_385} {:instruction float_swap} {:instruction float_dec} {:instruction integer_add} {:instruction integer_max} {:instruction float_max} {:instruction integer_stackdepth} {:instruction float_flush} {:instruction in2} {:instruction float_frominteger} {:instruction print_float} {:instruction float_flush} {:instruction float_shove} {:instruction float_shove} {:instruction integer_inc} {:instruction print_integer} {:instruction integer_shove} {:instruction integer_yank} {:instruction print_integer} {:instruction float_yankdup} {:instruction integer_yank} {:instruction print_integer} {:instruction integer_add} {:instruction print_integer} {:instruction tag_integer_480} {:instruction integer_yank} {:instruction integer_flush} {:instruction integer_add} {:instruction float_min} {:instruction float_pop} {:instruction integer_add} {:instruction in1} {:instruction print_integer} {:instruction integer_shove} {:instruction float_min} {:instruction integer_yank} {:instruction float_min} {:instruction integer_stackdepth} {:instruction tag_float_159} {:instruction float_sin} {:instruction integer_dup_times} {:instruction integer_stackdepth} {:instruction float_add} {:instruction in2} {:instruction -66.13688426655261} {:instruction integer_stackdepth} {:instruction float_frominteger} {:instruction integer_fromfloat} {:instruction integer_mod} {:instruction print_integer} {:instruction float_min} {:instruction float_mult} {:instruction tag_float_291} {:instruction float_yank} {:instruction 6} {:instruction tag_float_291} {:instruction integer_inc} {:instruction float_rot} {:instruction print_integer})
Best program: (float_sin float_add integer_flush float_mult integer_rot float_add float_yank float_div float_min float_inc float_add float_cos integer_inc 27 float_add float_cos 9 integer_swap integer_add integer_stackdepth float_mod in2 tag_float_385 float_swap float_dec integer_add integer_max float_max integer_stackdepth float_flush in2 float_frominteger print_float float_flush float_shove float_shove integer_inc print_integer integer_shove integer_yank print_integer float_yankdup integer_yank print_integer integer_add print_integer tag_integer_480 integer_yank integer_flush integer_add float_min float_pop integer_add in1 print_integer integer_shove float_min integer_yank float_min integer_stackdepth tag_float_159 float_sin integer_dup_times integer_stackdepth float_add in2 -66.13688426655261 integer_stackdepth float_frominteger integer_fromfloat integer_mod print_integer float_min float_mult tag_float_291 float_yank 6 tag_float_291 integer_inc float_rot print_integer)
Errors: [16.5677 9 6.0519 8 10.506 10 63.29 7 46.4786 10 27.3773 7 21.7659 9 62.2423 12 65.7283 10 19.35 7 66.3997 9 44.1628 9 91.2753 9 86.3488 9 73.351 10 39.0737 11 55.3057 9 90.0769 11 57.4296 10 21.0794 7 84.5969 10 9.4308 7 55.9558 10 20.9037 7 43.5424 9]
Total: 1404.2905
Mean: 28.08581
Genome size: 81
Size: 82
Percent parens: 0.012
--- Population Statistics ---
Average total errors in population: 3563.138701200003
Median total errors in population: 1404.2905
Error averages by case: (127.77775649999977 9.439 120.01216750000133 8.661 122.7929488999985 10.214 127.29318329999833 7.629 153.13783250000102 10.373 93.40859539999853 7.625 88.93355389999927 9.441 125.8966379999991 11.838 124.44514080000108 10.207 85.47216180000044 7.648 129.2783547999987 9.356 109.24351760000096 9.312 191.1028275000006 9.426 186.62966330000305 9.505 127.82462829999878 10.259 134.88670139999843 11.256 119.62269779999885 9.538 150.7631114999988 10.984 166.42661570000158 10.366 85.23444880000068 7.297 184.41914020000144 10.443 121.6614971000007 7.732 164.6458211999989 10.182 133.34260989999908 7.798 153.0390875000016 9.319)
Error minima by case: (16.5441 8 6.0028 7 10.4824 8 22.3187 6 37.545 9 25.3952 6 4.2616 8 20.2423 10 29.7349 8 0.6736 6 3.3706 8 7.1628 8 7.2516 7 3.7018 7 33.6254 9 2.0501 9 23.2821 8 13.1005 9 57.3805 9 3.914 5 8.5663 9 9.4072 6 55.9067 8 20.8546 6 43.4933 8)
Average genome size in population (length): 72.617
Average program size in population (points): 73.617
Average percent parens in population: 0.014
Minimum age in population: 267.3828128112096
Maximum age in population: 272.331695633506
Average age in population: 270.3860343639204
Median age in population: 270.44709287159
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 9
Genome diversity (% unique Plush genomes):	 0.847
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 9
Syntactic diversity (% unique Push programs):	 0.847
Total error diversity:				 0.231
Error (vector) diversity:			 0.269
Behavioral diversity:				 0.269
--- Run Statistics ---
Number of program evaluations used so far: 195000
Number of point (instruction) evaluations so far: 415639787
--- Timings ---
Current time: 1529615932905 milliseconds
Total Time:         779.6 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       266.1 seconds, 34.1%
Fitness Testing:    407.9 seconds, 52.3%
Report:             105.5 seconds, 13.5%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 194
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 195
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 195
;;******************************
;; -*- Number IO problem report - generation 195
Test total error for best: 59998.23050000004
Test mean error for best: 29.99912
;;------------------------------
Outputs of best individual on training cases:
Correct output: -57.4559422311 | Program output: -74.023617    
Correct output: -71.0754923621 | Program output: -65.023617    
Correct output: -66.5176295557 | Program output: -77.023617    
Correct output: 149.3187378    | Program output: 86.028727     
Correct output: -36.5450493525 | Program output: -83.023617    
Correct output: 75.4021928097  | Program output: 48.024907     
Correct output: 52.2615929867  | Program output: 74.027527     
Correct output: -19.2178367434 | Program output: 43.024417     
Correct output: 66.7518906772  | Program output: 1.023617      
Correct output: 7.673605441    | Program output: 27.023607     
Correct output: 23.6294031682  | Program output: 90.029107     
Correct output: -6.1389033433  | Program output: 38.023927     
Correct output: 9.2516366816   | Program output: -82.023627    
Correct output: 31.3251776267  | Program output: -55.023627    
Correct output: 73.3746496408  | Program output: 0.023607      
Correct output: 20.0500553336  | Program output: -19.023627    
Correct output: -23.2820697498 | Program output: 32.023627     
Correct output: 120.1004999359 | Program output: 30.023607     
Correct output: -155.453212395 | Program output: -98.023617    
Correct output: 31.10301576    | Program output: 10.023617     
Correct output: 45.5733057121  | Program output: -39.023607    
Correct output: -68.592783645  | Program output: -78.023607    
Correct output: -125.979392023 | Program output: -70.023627    
Correct output: -91.9273649148 | Program output: -71.023617    
Correct output: -92.5660607267 | Program output: -49.023627    
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_add} {:instruction float_rot} {:instruction tag_integer_580} {:instruction float_rot} {:instruction integer_add} {:instruction float_rot} {:instruction tag_integer_580} {:instruction float_rot} {:instruction integer_mod} {:instruction 27} {:instruction 9} {:instruction tag_float_196} {:instruction float_swap} {:instruction float_rot} {:instruction integer_add} {:instruction integer_stackdepth} {:instruction float_mod} {:instruction in2} {:instruction integer_add} {:instruction integer_max} {:instruction integer_rot} {:instruction integer_stackdepth} {:instruction float_flush} {:instruction in2} {:instruction float_frominteger} {:instruction print_float} {:instruction integer_dup} {:instruction float_shove} {:instruction float_shove} {:instruction integer_add} {:instruction float_mod} {:instruction print_integer} {:instruction print_integer} {:instruction float_tan} {:instruction float_stackdepth} {:instruction integer_inc} {:instruction integer_max} {:instruction integer_max} {:instruction tag_float_730} {:instruction integer_flush} {:instruction integer_shove} {:instruction integer_dup} {:instruction integer_fromfloat} {:instruction integer_stackdepth} {:instruction integer_yankdup} {:instruction in2} {:instruction float_stackdepth} {:instruction integer_max} {:instruction float_add} {:instruction integer_max} {:instruction float_mult} {:instruction integer_yank} {:instruction float_cos} {:instruction integer_max} {:instruction float_sin} {:instruction integer_stackdepth} {:instruction float_add} {:instruction in2} {:instruction float_mod} {:instruction integer_stackdepth} {:instruction integer_mod} {:instruction print_integer} {:instruction integer_mult} {:instruction integer_stackdepth} {:instruction tag_float_218} {:instruction 6} {:instruction tag_float_208} {:instruction integer_inc} {:instruction float_swap} {:instruction print_integer})
Best program: (integer_add float_rot tag_integer_580 float_rot integer_add float_rot tag_integer_580 float_rot integer_mod 27 9 tag_float_196 float_swap float_rot integer_add integer_stackdepth float_mod in2 integer_add integer_max integer_rot integer_stackdepth float_flush in2 float_frominteger print_float integer_dup float_shove float_shove integer_add float_mod print_integer print_integer float_tan float_stackdepth integer_inc integer_max integer_max tag_float_730 integer_flush integer_shove integer_dup integer_fromfloat integer_stackdepth integer_yankdup in2 float_stackdepth integer_max float_add integer_max float_mult integer_yank float_cos integer_max float_sin integer_stackdepth float_add in2 float_mod integer_stackdepth integer_mod print_integer integer_mult integer_stackdepth tag_float_218 6 tag_float_208 integer_inc float_swap print_integer)
Errors: [16.5677 9 6.0519 8 10.506 10 63.29 7 46.4786 10 27.3773 7 21.7659 9 62.2423 12 65.7283 10 19.35 7 66.3997 9 44.1628 9 91.2753 9 86.3488 9 73.351 10 39.0737 11 55.3057 9 90.0769 11 57.4296 10 21.0794 7 84.5969 10 9.4308 7 55.9558 10 20.9037 7 43.5424 9]
Total: 1404.2905
Mean: 28.08581
Genome size: 70
Size: 71
Percent parens: 0.014
--- Population Statistics ---
Average total errors in population: 3736.9292776000025
Median total errors in population: 1404.2905
Error averages by case: (138.31303470000074 9.439 131.53244010000193 8.645 133.45815119999787 10.181 130.22002619999813 7.588 163.38356520000116 10.362 96.43215179999837 7.558 92.76710479999926 9.416 130.268967399999 11.836 125.6964351000012 10.172 89.91442200000067 7.623 132.54938629999862 9.356 112.77231640000123 9.322 200.54095820000092 9.405 195.89201010000286 9.479 131.7765585999984 10.226 144.5001688999987 11.238 122.34837169999861 9.519 152.84858399999868 10.971 177.85909540000142 10.368 87.53742890000085 7.275 194.58218210000143 10.427 132.48395750000094 7.74 175.43344339999882 10.191 144.74601409999838 7.77 163.66250350000206 9.303)
Error minima by case: (16.5441 8 5.9928 7 10.4824 9 22.232 5 36.562 8 26.3915 6 21.7384 8 19.2348 9 24.2708 9 0.6736 6 3.3706 8 6.1659 7 0.2234 6 4.3252 7 16.6481 8 3.0501 10 23.3091 9 6.9302 9 57.3705 9 4.103 5 9.5563 9 9.4072 6 55.8967 9 20.8446 6 43.4833 8)
Average genome size in population (length): 71.983
Average program size in population (points): 72.983
Average percent parens in population: 0.014
Minimum age in population: 268.3828128112096
Maximum age in population: 273.6115453290333
Average age in population: 271.7905730159981
Median age in population: 271.830468712137
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 7
Genome diversity (% unique Plush genomes):	 0.84
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 7
Syntactic diversity (% unique Push programs):	 0.84
Total error diversity:				 0.227
Error (vector) diversity:			 0.264
Behavioral diversity:				 0.264
--- Run Statistics ---
Number of program evaluations used so far: 196000
Number of point (instruction) evaluations so far: 417440662
--- Timings ---
Current time: 1529615936363 milliseconds
Total Time:         783.0 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       267.3 seconds, 34.1%
Fitness Testing:    409.6 seconds, 52.3%
Report:             106.0 seconds, 13.5%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 195
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 196
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 196
;;******************************
;; -*- Number IO problem report - generation 196
Test total error for best: 59998.23050000004
Test mean error for best: 29.99912
;;------------------------------
Outputs of best individual on training cases:
Correct output: -57.4559422311 | Program output: -74.023617    
Correct output: -71.0754923621 | Program output: -65.023617    
Correct output: -66.5176295557 | Program output: -77.023617    
Correct output: 149.3187378    | Program output: 86.028727     
Correct output: -36.5450493525 | Program output: -83.023617    
Correct output: 75.4021928097  | Program output: 48.024907     
Correct output: 52.2615929867  | Program output: 74.027527     
Correct output: -19.2178367434 | Program output: 43.024417     
Correct output: 66.7518906772  | Program output: 1.023617      
Correct output: 7.673605441    | Program output: 27.023607     
Correct output: 23.6294031682  | Program output: 90.029107     
Correct output: -6.1389033433  | Program output: 38.023927     
Correct output: 9.2516366816   | Program output: -82.023627    
Correct output: 31.3251776267  | Program output: -55.023627    
Correct output: 73.3746496408  | Program output: 0.023607      
Correct output: 20.0500553336  | Program output: -19.023627    
Correct output: -23.2820697498 | Program output: 32.023627     
Correct output: 120.1004999359 | Program output: 30.023607     
Correct output: -155.453212395 | Program output: -98.023617    
Correct output: 31.10301576    | Program output: 10.023617     
Correct output: 45.5733057121  | Program output: -39.023607    
Correct output: -68.592783645  | Program output: -78.023607    
Correct output: -125.979392023 | Program output: -70.023627    
Correct output: -91.9273649148 | Program output: -71.023617    
Correct output: -92.5660607267 | Program output: -49.023627    
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_inc} {:instruction float_add} {:instruction float_min} {:instruction float_rot} {:instruction integer_mod} {:instruction 27} {:instruction 9} {:instruction tag_float_196} {:instruction float_swap} {:instruction float_rot} {:instruction integer_add} {:instruction integer_stackdepth} {:instruction float_mod} {:instruction in2} {:instruction integer_add} {:instruction integer_max} {:instruction integer_rot} {:instruction integer_stackdepth} {:instruction float_flush} {:instruction in2} {:instruction float_frominteger} {:instruction print_float} {:instruction integer_dup} {:instruction float_dup_times} {:instruction float_shove} {:instruction integer_add} {:instruction float_swap} {:instruction print_integer} {:instruction print_integer} {:instruction print_integer} {:instruction in1} {:instruction integer_inc} {:instruction integer_max} {:instruction integer_max} {:instruction print_integer} {:instruction float_min} {:instruction print_integer} {:instruction integer_yank} {:instruction float_mult} {:instruction integer_max} {:instruction float_sub} {:instruction integer_max} {:instruction print_integer} {:instruction float_min} {:instruction integer_stackdepth} {:instruction tag_float_291} {:instruction integer_max} {:instruction float_swap} {:instruction float_sin} {:instruction integer_stackdepth} {:instruction float_add} {:instruction in2} {:instruction float_div} {:instruction integer_stackdepth} {:instruction float_frominteger} {:instruction integer_fromfloat} {:instruction integer_mod} {:instruction print_integer} {:instruction float_min} {:instruction integer_stackdepth} {:instruction tag_float_291} {:instruction 6} {:instruction float_div} {:instruction integer_inc} {:instruction float_swap} {:instruction print_integer})
Best program: (integer_inc float_add float_min float_rot integer_mod 27 9 tag_float_196 float_swap float_rot integer_add integer_stackdepth float_mod in2 integer_add integer_max integer_rot integer_stackdepth float_flush in2 float_frominteger print_float integer_dup float_dup_times float_shove integer_add float_swap print_integer print_integer print_integer in1 integer_inc integer_max integer_max print_integer float_min print_integer integer_yank float_mult integer_max float_sub integer_max print_integer float_min integer_stackdepth tag_float_291 integer_max float_swap float_sin integer_stackdepth float_add in2 float_div integer_stackdepth float_frominteger integer_fromfloat integer_mod print_integer float_min integer_stackdepth tag_float_291 6 float_div integer_inc float_swap print_integer)
Errors: [16.5677 9 6.0519 8 10.506 10 63.29 7 46.4786 10 27.3773 7 21.7659 9 62.2423 12 65.7283 10 19.35 7 66.3997 9 44.1628 9 91.2753 9 86.3488 9 73.351 10 39.0737 11 55.3057 9 90.0769 11 57.4296 10 21.0794 7 84.5969 10 9.4308 7 55.9558 10 20.9037 7 43.5424 9]
Total: 1404.2905
Mean: 28.08581
Genome size: 66
Size: 67
Percent parens: 0.015
--- Population Statistics ---
Average total errors in population: 4403.6606863
Median total errors in population: 1404.2905
Error averages by case: (164.08484890000165 9.441 157.50736100000069 8.616 160.15781959999762 10.207 157.89921689999898 7.691 189.67936390000133 10.375 125.27744929999743 7.597 119.88119899999921 9.476 156.61537640000023 11.846 154.28102000000013 10.175 117.2953178000016 7.655 160.11930549999963 9.361 140.51187940000133 9.299 226.45379280000157 9.488 222.32604170000332 9.522 154.72585259999818 10.2 171.34338349999967 11.266 149.6744780999986 9.525 180.4199614999974 10.935 201.65503200000146 10.397 117.99499310000105 7.336 221.21483690000173 10.433 159.21416270000108 7.77 200.03571309999856 10.196 170.2125999999984 7.802 189.16068060000222 9.31)
Error minima by case: (16.5458 8 5.9763 7 10.4841 8 37.7083 6 37.5722 8 26.3915 6 21.7411 8 20.262 9 30.7402 8 0.6736 6 14.6023 7 7.1779 7 0.2244 7 4.3252 7 33.6254 8 6.9499 9 24.3151 9 15.9065 9 57.354 9 4.9077 5 9.5616 9 9.4079 6 55.8801 8 20.8282 6 43.4668 7)
Average genome size in population (length): 71.767
Average program size in population (points): 72.767
Average percent parens in population: 0.014
Minimum age in population: 270.4131458312044
Maximum age in population: 275.4386307658952
Average age in population: 273.1797626323149
Median age in population: 273.2403741876139
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 6
Genome diversity (% unique Plush genomes):	 0.861
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 6
Syntactic diversity (% unique Push programs):	 0.861
Total error diversity:				 0.224
Error (vector) diversity:			 0.282
Behavioral diversity:				 0.282
--- Run Statistics ---
Number of program evaluations used so far: 197000
Number of point (instruction) evaluations so far: 419236387
--- Timings ---
Current time: 1529615940154 milliseconds
Total Time:         786.9 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       268.5 seconds, 34.1%
Fitness Testing:    411.7 seconds, 52.3%
Report:             106.5 seconds, 13.5%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 196
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 197
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 197
;;******************************
;; -*- Number IO problem report - generation 197
Test total error for best: 59998.23050000004
Test mean error for best: 29.99912
;;------------------------------
Outputs of best individual on training cases:
Correct output: -57.4559422311 | Program output: -74.023617    
Correct output: -71.0754923621 | Program output: -65.023617    
Correct output: -66.5176295557 | Program output: -77.023617    
Correct output: 149.3187378    | Program output: 86.028727     
Correct output: -36.5450493525 | Program output: -83.023617    
Correct output: 75.4021928097  | Program output: 48.024907     
Correct output: 52.2615929867  | Program output: 74.027527     
Correct output: -19.2178367434 | Program output: 43.024417     
Correct output: 66.7518906772  | Program output: 1.023617      
Correct output: 7.673605441    | Program output: 27.023607     
Correct output: 23.6294031682  | Program output: 90.029107     
Correct output: -6.1389033433  | Program output: 38.023927     
Correct output: 9.2516366816   | Program output: -82.023627    
Correct output: 31.3251776267  | Program output: -55.023627    
Correct output: 73.3746496408  | Program output: 0.023607      
Correct output: 20.0500553336  | Program output: -19.023627    
Correct output: -23.2820697498 | Program output: 32.023627     
Correct output: 120.1004999359 | Program output: 30.023607     
Correct output: -155.453212395 | Program output: -98.023617    
Correct output: 31.10301576    | Program output: 10.023617     
Correct output: 45.5733057121  | Program output: -39.023607    
Correct output: -68.592783645  | Program output: -78.023607    
Correct output: -125.979392023 | Program output: -70.023627    
Correct output: -91.9273649148 | Program output: -71.023617    
Correct output: -92.5660607267 | Program output: -49.023627    
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_inc} {:instruction float_add} {:instruction integer_flush} {:instruction float_mult} {:instruction integer_rot} {:instruction float_add} {:instruction float_pop} {:instruction float_div} {:instruction float_min} {:instruction float_min} {:instruction tagged_603} {:instruction float_cos} {:instruction integer_inc} {:instruction 27} {:instruction float_add} {:instruction float_cos} {:instruction 9} {:instruction integer_swap} {:instruction integer_add} {:instruction integer_stackdepth} {:instruction float_mod} {:instruction in2} {:instruction tag_float_196} {:instruction float_swap} {:instruction float_rot} {:instruction integer_add} {:instruction integer_max} {:instruction float_max} {:instruction integer_stackdepth} {:instruction float_flush} {:instruction in2} {:instruction float_frominteger} {:instruction print_float} {:instruction float_sub} {:instruction float_shove} {:instruction float_shove} {:instruction integer_inc} {:instruction print_integer} {:instruction float_sub} {:instruction integer_yank} {:instruction print_integer} {:instruction integer_add} {:instruction integer_yank} {:instruction integer_dup} {:instruction print_integer} {:instruction tag_float_456} {:instruction integer_stackdepth} {:instruction tag_float_291} {:instruction integer_min} {:instruction integer_dup_times} {:instruction integer_stackdepth} {:instruction float_add} {:instruction in2} {:instruction -66.13688426655261} {:instruction integer_stackdepth} {:instruction float_frominteger} {:instruction integer_fromfloat} {:instruction integer_mod} {:instruction print_integer} {:instruction float_min} {:instruction float_mult} {:instruction float_mod} {:instruction 6} {:instruction tag_float_291} {:instruction integer_inc} {:instruction float_dup} {:instruction print_integer})
Best program: (integer_inc float_add integer_flush float_mult integer_rot float_add float_pop float_div float_min float_min tagged_603 float_cos integer_inc 27 float_add float_cos 9 integer_swap integer_add integer_stackdepth float_mod in2 tag_float_196 float_swap float_rot integer_add integer_max float_max integer_stackdepth float_flush in2 float_frominteger print_float float_sub float_shove float_shove integer_inc print_integer float_sub integer_yank print_integer integer_add integer_yank integer_dup print_integer tag_float_456 integer_stackdepth tag_float_291 integer_min integer_dup_times integer_stackdepth float_add in2 -66.13688426655261 integer_stackdepth float_frominteger integer_fromfloat integer_mod print_integer float_min float_mult float_mod 6 tag_float_291 integer_inc float_dup print_integer)
Errors: [16.5677 9 6.0519 8 10.506 10 63.29 7 46.4786 10 27.3773 7 21.7659 9 62.2423 12 65.7283 10 19.35 7 66.3997 9 44.1628 9 91.2753 9 86.3488 9 73.351 10 39.0737 11 55.3057 9 90.0769 11 57.4296 10 21.0794 7 84.5969 10 9.4308 7 55.9558 10 20.9037 7 43.5424 9]
Total: 1404.2905
Mean: 28.08581
Genome size: 67
Size: 68
Percent parens: 0.015
--- Population Statistics ---
Average total errors in population: 4173.445785400003
Median total errors in population: 1404.2905
Error averages by case: (160.37146990000133 9.465 152.8101713000005 8.704 155.6124216999982 10.204 145.06769149999903 7.65 184.9281317000012 10.426 111.40305939999783 7.577 107.22742829999908 9.417 142.15255430000008 11.822 141.28444510000023 10.156 103.05672660000111 7.65 146.5943509999996 9.374 126.7656246000014 9.336 221.58724390000157 9.487 217.24138560000293 9.472 145.6751752999986 10.236 155.26909829999943 11.282 136.01538929999882 9.535 166.97360029999786 10.975 197.66835900000163 10.414 103.55018820000079 7.258 215.8696951000013 10.407 154.5601832000009 7.776 195.6630975999989 10.197 165.6848196999987 7.807 184.4734745000019 9.313)
Error minima by case: (16.5452 8 6.0032 7 10.4835 9 42.3187 6 36.562 9 26.3532 6 5.2616 8 19.2348 10 30.7283 8 0.6736 6 3.3706 7 6.1659 7 2.2516 6 4.3252 7 33.6254 9 3.0501 9 23.3091 8 13.1005 9 57.3809 9 4.103 5 28.5733 9 9.4074 6 55.9071 8 20.8551 6 43.4938 8)
Average genome size in population (length): 71.434
Average program size in population (points): 72.434
Average percent parens in population: 0.014
Minimum age in population: 271.4131458312044
Maximum age in population: 276.7353602725991
Average age in population: 274.5727588936844
Median age in population: 274.602959548302
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 7
Genome diversity (% unique Plush genomes):	 0.864
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 7
Syntactic diversity (% unique Push programs):	 0.864
Total error diversity:				 0.211
Error (vector) diversity:			 0.258
Behavioral diversity:				 0.258
--- Run Statistics ---
Number of program evaluations used so far: 198000
Number of point (instruction) evaluations so far: 421023787
--- Timings ---
Current time: 1529615943866 milliseconds
Total Time:         790.6 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       270.0 seconds, 34.2%
Fitness Testing:    413.6 seconds, 52.3%
Report:             106.9 seconds, 13.5%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 197
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 198
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 198
;;******************************
;; -*- Number IO problem report - generation 198
Test total error for best: 59998.23050000004
Test mean error for best: 29.99912
;;------------------------------
Outputs of best individual on training cases:
Correct output: -57.4559422311 | Program output: -74.023617    
Correct output: -71.0754923621 | Program output: -65.023617    
Correct output: -66.5176295557 | Program output: -77.023617    
Correct output: 149.3187378    | Program output: 86.028727     
Correct output: -36.5450493525 | Program output: -83.023617    
Correct output: 75.4021928097  | Program output: 48.024907     
Correct output: 52.2615929867  | Program output: 74.027527     
Correct output: -19.2178367434 | Program output: 43.024417     
Correct output: 66.7518906772  | Program output: 1.023617      
Correct output: 7.673605441    | Program output: 27.023607     
Correct output: 23.6294031682  | Program output: 90.029107     
Correct output: -6.1389033433  | Program output: 38.023927     
Correct output: 9.2516366816   | Program output: -82.023627    
Correct output: 31.3251776267  | Program output: -55.023627    
Correct output: 73.3746496408  | Program output: 0.023607      
Correct output: 20.0500553336  | Program output: -19.023627    
Correct output: -23.2820697498 | Program output: 32.023627     
Correct output: 120.1004999359 | Program output: 30.023607     
Correct output: -155.453212395 | Program output: -98.023617    
Correct output: 31.10301576    | Program output: 10.023617     
Correct output: 45.5733057121  | Program output: -39.023607    
Correct output: -68.592783645  | Program output: -78.023607    
Correct output: -125.979392023 | Program output: -70.023627    
Correct output: -91.9273649148 | Program output: -71.023617    
Correct output: -92.5660607267 | Program output: -49.023627    
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_min} {:instruction integer_inc} {:instruction float_add} {:instruction float_add} {:instruction float_dup_items} {:instruction integer_dup} {:instruction float_mult} {:instruction float_add} {:instruction float_yank} {:instruction integer_inc} {:instruction float_add} {:instruction integer_dec} {:instruction float_min} {:instruction integer_shove} {:instruction 27} {:instruction float_sub} {:instruction float_yankdup} {:instruction float_min} {:instruction 9} {:instruction integer_add} {:instruction float_dup_items} {:instruction integer_dup} {:instruction float_rot} {:instruction float_dup_times} {:instruction float_dec} {:instruction float_add} {:instruction float_mult} {:instruction integer_dup_items} {:instruction float_yank} {:instruction integer_yankdup} {:instruction print_float} {:instruction integer_dup_items} {:instruction integer_sub} {:instruction 27} {:instruction float_cos} {:instruction 9} {:instruction float_dup} {:instruction integer_add} {:instruction integer_stackdepth} {:instruction float_mod} {:instruction in2} {:instruction tag_float_151} {:instruction float_cos} {:instruction float_rot} {:instruction integer_add} {:instruction integer_max} {:instruction float_tan} {:instruction integer_stackdepth} {:instruction integer_fromfloat} {:instruction float_flush} {:instruction in2} {:instruction float_frominteger} {:instruction print_float} {:instruction float_max} {:instruction float_dup} {:instruction float_shove} {:instruction integer_inc} {:instruction print_integer} {:instruction integer_shove} {:instruction float_flush} {:instruction print_integer} {:instruction float_frominteger} {:instruction in2} {:instruction tagged_175} {:instruction integer_swap} {:instruction integer_max} {:instruction integer_dup_times} {:instruction integer_stackdepth} {:instruction float_inc} {:instruction in2} {:instruction float_add} {:instruction integer_stackdepth} {:instruction float_frominteger} {:instruction integer_fromfloat} {:instruction integer_mod} {:instruction print_integer} {:instruction integer_inc} {:instruction float_mult} {:instruction tag_float_291} {:instruction 6} {:instruction float_swap} {:instruction integer_inc} {:instruction float_swap} {:instruction print_integer})
Best program: (float_min integer_inc float_add float_add float_dup_items integer_dup float_mult float_add float_yank integer_inc float_add integer_dec float_min integer_shove 27 float_sub float_yankdup float_min 9 integer_add float_dup_items integer_dup float_rot float_dup_times float_dec float_add float_mult integer_dup_items float_yank integer_yankdup print_float integer_dup_items integer_sub 27 float_cos 9 float_dup integer_add integer_stackdepth float_mod in2 tag_float_151 float_cos float_rot integer_add integer_max float_tan integer_stackdepth integer_fromfloat float_flush in2 float_frominteger print_float float_max float_dup float_shove integer_inc print_integer integer_shove float_flush print_integer float_frominteger in2 tagged_175 integer_swap integer_max integer_dup_times integer_stackdepth float_inc in2 float_add integer_stackdepth float_frominteger integer_fromfloat integer_mod print_integer integer_inc float_mult tag_float_291 6 float_swap integer_inc float_swap print_integer)
Errors: [16.5677 9 6.0519 8 10.506 10 63.29 7 46.4786 10 27.3773 7 21.7659 9 62.2423 12 65.7283 10 19.35 7 66.3997 9 44.1628 9 91.2753 9 86.3488 9 73.351 10 39.0737 11 55.3057 9 90.0769 11 57.4296 10 21.0794 7 84.5969 10 9.4308 7 55.9558 10 20.9037 7 43.5424 9]
Total: 1404.2905
Mean: 28.08581
Genome size: 84
Size: 85
Percent parens: 0.012
--- Population Statistics ---
Average total errors in population: 3872.054533400003
Median total errors in population: 1404.2905
Error averages by case: (138.70970390000076 9.452 130.93855890000194 8.589 134.27142859999773 10.219 141.44996869999852 7.586 164.6942888000013 10.363 107.50565929999786 7.561 103.79581099999916 9.428 140.16610300000002 11.886 135.5001095000007 10.161 99.92703850000112 7.571 143.93999989999924 9.335 123.03874630000163 9.311 202.62635330000114 9.416 198.29799220000342 9.471 137.86183869999812 10.187 150.84092129999917 11.251 132.30450559999858 9.488 164.08883219999768 11.003 176.9403024000017 10.401 98.68900260000113 7.282 195.60037420000182 10.375 132.68001390000106 7.688 175.30066619999846 10.175 144.0391033999984 7.72 163.6292110000022 9.299)
Error minima by case: (16.5441 8 6.0015 7 10.4824 9 59.3401 6 19.545 9 14.5765 6 12.2468 8 20.2422 9 23.2268 9 0.6736 6 3.3706 7 7.1627 7 2.2516 7 4.3252 8 16.604 9 3.0501 9 24.3053 9 30.1218 9 57.3792 9 4.103 6 9.5663 9 9.4072 6 55.9054 9 20.8534 6 43.4921 7)
Average genome size in population (length): 71.337
Average program size in population (points): 72.337
Average percent parens in population: 0.014
Minimum age in population: 272.7762621979251
Maximum age in population: 277.8920699223671
Average age in population: 275.9324275473489
Median age in population: 275.9932364023191
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 9
Genome diversity (% unique Plush genomes):	 0.847
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 9
Syntactic diversity (% unique Push programs):	 0.847
Total error diversity:				 0.219
Error (vector) diversity:			 0.253
Behavioral diversity:				 0.253
--- Run Statistics ---
Number of program evaluations used so far: 199000
Number of point (instruction) evaluations so far: 422809087
--- Timings ---
Current time: 1529615947392 milliseconds
Total Time:         794.1 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       271.3 seconds, 34.2%
Fitness Testing:    415.3 seconds, 52.3%
Report:             107.3 seconds, 13.5%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 198
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 199
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 199
;;******************************
;; -*- Number IO problem report - generation 199
Test total error for best: 59998.23050000004
Test mean error for best: 29.99912
;;------------------------------
Outputs of best individual on training cases:
Correct output: -57.4559422311 | Program output: -74.023617    
Correct output: -71.0754923621 | Program output: -65.023617    
Correct output: -66.5176295557 | Program output: -77.023617    
Correct output: 149.3187378    | Program output: 86.028727     
Correct output: -36.5450493525 | Program output: -83.023617    
Correct output: 75.4021928097  | Program output: 48.024907     
Correct output: 52.2615929867  | Program output: 74.027527     
Correct output: -19.2178367434 | Program output: 43.024417     
Correct output: 66.7518906772  | Program output: 1.023617      
Correct output: 7.673605441    | Program output: 27.023607     
Correct output: 23.6294031682  | Program output: 90.029107     
Correct output: -6.1389033433  | Program output: 38.023927     
Correct output: 9.2516366816   | Program output: -82.023627    
Correct output: 31.3251776267  | Program output: -55.023627    
Correct output: 73.3746496408  | Program output: 0.023607      
Correct output: 20.0500553336  | Program output: -19.023627    
Correct output: -23.2820697498 | Program output: 32.023627     
Correct output: 120.1004999359 | Program output: 30.023607     
Correct output: -155.453212395 | Program output: -98.023617    
Correct output: 31.10301576    | Program output: 10.023617     
Correct output: 45.5733057121  | Program output: -39.023607    
Correct output: -68.592783645  | Program output: -78.023607    
Correct output: -125.979392023 | Program output: -70.023627    
Correct output: -91.9273649148 | Program output: -71.023617    
Correct output: -92.5660607267 | Program output: -49.023627    
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_min} {:instruction integer_dup} {:instruction integer_max} {:instruction integer_shove} {:instruction integer_div} {:instruction integer_swap} {:instruction integer_inc} {:instruction float_add} {:instruction float_yank} {:instruction integer_dup} {:instruction float_min} {:instruction float_sub} {:instruction integer_fromfloat} {:instruction float_yank} {:instruction float_rot} {:instruction float_sub} {:instruction integer_add} {:instruction 27} {:instruction float_sub} {:instruction float_yankdup} {:instruction in1} {:instruction 9} {:instruction integer_add} {:instruction integer_stackdepth} {:instruction float_mod} {:instruction in2} {:instruction integer_add} {:instruction integer_max} {:instruction integer_rot} {:instruction integer_stackdepth} {:instruction float_flush} {:instruction in2} {:instruction float_frominteger} {:instruction print_float} {:instruction integer_dup} {:instruction float_shove} {:instruction float_shove} {:instruction integer_add} {:instruction float_mod} {:instruction print_integer} {:instruction print_integer} {:instruction integer_div} {:instruction float_min} {:instruction integer_inc} {:instruction integer_max} {:instruction integer_max} {:instruction tag_float_730} {:instruction print_integer} {:instruction integer_swap} {:instruction integer_stackdepth} {:instruction float_add} {:instruction integer_div} {:instruction integer_stackdepth} {:instruction float_add} {:instruction in2} {:instruction float_inc} {:instruction integer_stackdepth} {:instruction float_yankdup} {:instruction integer_fromfloat} {:instruction integer_mod} {:instruction print_integer} {:instruction integer_sub} {:instruction float_swap} {:instruction tag_float_336} {:instruction 6} {:instruction tagged_111} {:instruction integer_inc} {:instruction float_shove} {:instruction print_integer})
Best program: (integer_min integer_dup integer_max integer_shove integer_div integer_swap integer_inc float_add float_yank integer_dup float_min float_sub integer_fromfloat float_yank float_rot float_sub integer_add 27 float_sub float_yankdup in1 9 integer_add integer_stackdepth float_mod in2 integer_add integer_max integer_rot integer_stackdepth float_flush in2 float_frominteger print_float integer_dup float_shove float_shove integer_add float_mod print_integer print_integer integer_div float_min integer_inc integer_max integer_max tag_float_730 print_integer integer_swap integer_stackdepth float_add integer_div integer_stackdepth float_add in2 float_inc integer_stackdepth float_yankdup integer_fromfloat integer_mod print_integer integer_sub float_swap tag_float_336 6 tagged_111 integer_inc float_shove print_integer)
Errors: [16.5677 9 6.0519 8 10.506 10 63.29 7 46.4786 10 27.3773 7 21.7659 9 62.2423 12 65.7283 10 19.35 7 66.3997 9 44.1628 9 91.2753 9 86.3488 9 73.351 10 39.0737 11 55.3057 9 90.0769 11 57.4296 10 21.0794 7 84.5969 10 9.4308 7 55.9558 10 20.9037 7 43.5424 9]
Total: 1404.2905
Mean: 28.08581
Genome size: 69
Size: 70
Percent parens: 0.014
--- Population Statistics ---
Average total errors in population: 4106.737323300004
Median total errors in population: 1404.2905
Error averages by case: (154.694003900001 9.426 149.01753670000087 8.607 150.84309399999782 10.178 142.35562969999847 7.602 180.3328127000013 10.363 108.87654499999806 7.57 104.64131219999925 9.434 142.1215834999996 11.801 136.93730700000071 10.162 102.65808770000099 7.614 145.30854439999922 9.337 125.81497020000144 9.295 217.18662600000124 9.448 212.66878370000325 9.479 140.0948712999985 10.206 164.10369009999917 11.243 136.22125619999866 9.511 165.97168669999826 10.95 194.38736300000167 10.37 101.33474140000095 7.245 211.1164551000017 10.389 149.14672800000108 7.724 192.54724549999855 10.16 161.96766809999835 7.806 181.1937812000023 9.275)
Error minima by case: (16.5441 8 6.0028 6 10.4824 9 57.6813 6 37.5812 8 26.3952 6 5.2616 8 20.254 6 19.7519 4 0.6736 6 3.3776 7 7.1752 6 2.2516 5 4.2982 5 26.3746 4 3.0501 6 24.3183 6 73.1005 5 57.3805 6 4.0848 4 1.4267 6 9.4072 7 55.9067 6 20.8546 6 43.4933 6)
Average genome size in population (length): 70.36
Average program size in population (points): 71.36
Average percent parens in population: 0.014
Minimum age in population: 274.8676500308511
Maximum age in population: 279.3945689066991
Average age in population: 277.3298088792099
Median age in population: 277.3919230536528
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 8
Genome diversity (% unique Plush genomes):	 0.854
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 8
Syntactic diversity (% unique Push programs):	 0.854
Total error diversity:				 0.223
Error (vector) diversity:			 0.268
Behavioral diversity:				 0.268
--- Run Statistics ---
Number of program evaluations used so far: 200000
Number of point (instruction) evaluations so far: 424570162
--- Timings ---
Current time: 1529615950834 milliseconds
Total Time:         797.6 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       272.5 seconds, 34.2%
Fitness Testing:    417.1 seconds, 52.3%
Report:             107.8 seconds, 13.5%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 199
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 200
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 200
;;******************************
;; -*- Number IO problem report - generation 200
Test total error for best: 59998.23050000004
Test mean error for best: 29.99912
;;------------------------------
Outputs of best individual on training cases:
Correct output: -57.4559422311 | Program output: -74.023617    
Correct output: -71.0754923621 | Program output: -65.023617    
Correct output: -66.5176295557 | Program output: -77.023617    
Correct output: 149.3187378    | Program output: 86.028727     
Correct output: -36.5450493525 | Program output: -83.023617    
Correct output: 75.4021928097  | Program output: 48.024907     
Correct output: 52.2615929867  | Program output: 74.027527     
Correct output: -19.2178367434 | Program output: 43.024417     
Correct output: 66.7518906772  | Program output: 1.023617      
Correct output: 7.673605441    | Program output: 27.023607     
Correct output: 23.6294031682  | Program output: 90.029107     
Correct output: -6.1389033433  | Program output: 38.023927     
Correct output: 9.2516366816   | Program output: -82.023627    
Correct output: 31.3251776267  | Program output: -55.023627    
Correct output: 73.3746496408  | Program output: 0.023607      
Correct output: 20.0500553336  | Program output: -19.023627    
Correct output: -23.2820697498 | Program output: 32.023627     
Correct output: 120.1004999359 | Program output: 30.023607     
Correct output: -155.453212395 | Program output: -98.023617    
Correct output: 31.10301576    | Program output: 10.023617     
Correct output: 45.5733057121  | Program output: -39.023607    
Correct output: -68.592783645  | Program output: -78.023607    
Correct output: -125.979392023 | Program output: -70.023627    
Correct output: -91.9273649148 | Program output: -71.023617    
Correct output: -92.5660607267 | Program output: -49.023627    
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_dup} {:instruction integer_pop} {:instruction float_min} {:instruction integer_max} {:instruction float_dup} {:instruction float_yank} {:instruction float_dup_times} {:instruction 27} {:instruction float_sub} {:instruction float_div} {:instruction integer_sub} {:instruction 9} {:instruction float_rot} {:instruction integer_add} {:instruction integer_stackdepth} {:instruction in2} {:instruction integer_add} {:instruction integer_max} {:instruction integer_rot} {:instruction integer_stackdepth} {:instruction 27} {:instruction 9} {:instruction tag_float_196} {:instruction float_swap} {:instruction float_rot} {:instruction integer_add} {:instruction integer_stackdepth} {:instruction integer_flush} {:instruction float_mult} {:instruction integer_rot} {:instruction float_yank} {:instruction integer_dup_items} {:instruction float_dup} {:instruction float_sub} {:instruction integer_dup} {:instruction 16.954678391228356} {:instruction integer_yankdup} {:instruction integer_sub} {:instruction 27} {:instruction float_cos} {:instruction 9} {:instruction float_flush} {:instruction integer_add} {:instruction integer_stackdepth} {:instruction float_mod} {:instruction in2} {:instruction tag_float_204} {:instruction float_sin} {:instruction float_rot} {:instruction integer_add} {:instruction integer_max} {:instruction float_div} {:instruction integer_stackdepth} {:instruction float_flush} {:instruction float_flush} {:instruction in2} {:instruction float_frominteger} {:instruction print_float} {:instruction integer_dup} {:instruction float_shove} {:instruction float_shove} {:instruction integer_add} {:instruction float_inc} {:instruction integer_dup} {:instruction integer_dup_items} {:instruction print_integer} {:instruction tag_integer_480} {:instruction integer_yank} {:instruction print_integer} {:instruction integer_yank} {:instruction integer_max} {:instruction float_dup} {:instruction float_mult} {:instruction integer_yank} {:instruction float_swap} {:instruction float_swap} {:instruction integer_stackdepth} {:instruction float_add} {:instruction in2} {:instruction float_mult} {:instruction float_dup_times} {:instruction integer_shove} {:instruction integer_fromfloat} {:instruction integer_mod} {:instruction float_mult} {:instruction integer_dup} {:instruction float_frominteger} {:instruction integer_max} {:instruction float_mult} {:instruction integer_yank} {:instruction float_cos} {:instruction integer_max} {:instruction integer_max} {:instruction integer_stackdepth} {:instruction float_add} {:instruction in2} {:instruction float_mod} {:instruction integer_stackdepth} {:instruction integer_mod} {:instruction print_integer} {:instruction float_div} {:instruction integer_stackdepth} {:instruction tag_float_291} {:instruction 6} {:instruction float_yank} {:instruction 6} {:instruction tag_float_291} {:instruction integer_inc} {:instruction float_rot} {:instruction print_integer})
Best program: (float_dup integer_pop float_min integer_max float_dup float_yank float_dup_times 27 float_sub float_div integer_sub 9 float_rot integer_add integer_stackdepth in2 integer_add integer_max integer_rot integer_stackdepth 27 9 tag_float_196 float_swap float_rot integer_add integer_stackdepth integer_flush float_mult integer_rot float_yank integer_dup_items float_dup float_sub integer_dup 16.954678391228356 integer_yankdup integer_sub 27 float_cos 9 float_flush integer_add integer_stackdepth float_mod in2 tag_float_204 float_sin float_rot integer_add integer_max float_div integer_stackdepth float_flush float_flush in2 float_frominteger print_float integer_dup float_shove float_shove integer_add float_inc integer_dup integer_dup_items print_integer tag_integer_480 integer_yank print_integer integer_yank integer_max float_dup float_mult integer_yank float_swap float_swap integer_stackdepth float_add in2 float_mult float_dup_times integer_shove integer_fromfloat integer_mod float_mult integer_dup float_frominteger integer_max float_mult integer_yank float_cos integer_max integer_max integer_stackdepth float_add in2 float_mod integer_stackdepth integer_mod print_integer float_div integer_stackdepth tag_float_291 6 float_yank 6 tag_float_291 integer_inc float_rot print_integer)
Errors: [16.5677 9 6.0519 8 10.506 10 63.29 7 46.4786 10 27.3773 7 21.7659 9 62.2423 12 65.7283 10 19.35 7 66.3997 9 44.1628 9 91.2753 9 86.3488 9 73.351 10 39.0737 11 55.3057 9 90.0769 11 57.4296 10 21.0794 7 84.5969 10 9.4308 7 55.9558 10 20.9037 7 43.5424 9]
Total: 1404.2905
Mean: 28.08581
Genome size: 110
Size: 111
Percent parens: 0.009
--- Population Statistics ---
Average total errors in population: 4258.632312000003
Median total errors in population: 1404.2905
Error averages by case: (156.55889100000195 9.507 148.10596030000016 8.654 151.810276999998 10.259 156.30267040000004 7.634 180.95013610000123 10.425 121.82375199999738 7.585 118.4073917999992 9.47 153.41542870000103 11.836 149.56348409999939 10.148 113.70980560000152 7.656 156.8343577000006 9.37 137.1393906000011 9.349 217.29571700000125 9.464 212.85008960000317 9.526 153.3930176999982 10.213 166.41798620000037 11.284 147.2105065999986 9.535 176.7877445999971 11.009 193.44045880000155 10.411 115.88084600000109 7.314 211.4853498000016 10.441 150.85062090000102 7.79 191.24940929999872 10.207 161.04575539999865 7.825 179.829264800002 9.362)
Error minima by case: (16.5458 8 5.9763 7 10.4841 9 22.3187 6 19.545 9 26.3801 6 16.2468 8 19.306 8 24.2718 6 0.6736 6 3.3706 7 6.2172 7 2.2516 7 4.276 8 16.6491 5 3.0501 8 23.3543 8 6.8995 7 57.3541 8 4.0539 5 9.5512 9 9.4072 7 55.8803 8 20.8274 6 43.4669 7)
Average genome size in population (length): 70.358
Average program size in population (points): 71.358
Average percent parens in population: 0.014
Minimum age in population: 276.2556631010022
Maximum age in population: 281.0402146223348
Average age in population: 278.6792882575706
Median age in population: 278.6870210503364
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 6
Genome diversity (% unique Plush genomes):	 0.848
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 6
Syntactic diversity (% unique Push programs):	 0.848
Total error diversity:				 0.231
Error (vector) diversity:			 0.276
Behavioral diversity:				 0.276
--- Run Statistics ---
Number of program evaluations used so far: 201000
Number of point (instruction) evaluations so far: 426331562
--- Timings ---
Current time: 1529615955097 milliseconds
Total Time:         801.5 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       273.9 seconds, 34.2%
Fitness Testing:    419.2 seconds, 52.3%
Report:             108.2 seconds, 13.5%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 200
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

FAILURE
