Command line args: clojush.problems.software.number-io :parent-selection :tournament :print-timings true
######################################
Parameters set at command line or in problem file argmap; may or may not be default:
alignment-deviation = 5
alternation-rate = 0.01
atom-generators = (#object[clojush.problems.software.number_io$fn__6694 0x2beee3e8 clojush.problems.software.number_io$fn__6694@2beee3e8] #object[clojush.problems.software.number_io$fn__6696 0x58bad46f clojush.problems.software.number_io$fn__6696@58bad46f] #object[clojush.instructions.tag$tag_instruction_erc$fn__1963 0x20231384 clojush.instructions.tag$tag_instruction_erc$fn__1963@20231384] #object[clojush.instructions.tag$tagged_instruction_erc$fn__1969 0x35becbd4 clojush.instructions.tag$tagged_instruction_erc$fn__1969@35becbd4] in1 in2 print_newline integer_sub integer_inc integer_yankdup integer_mult float_sin float_frominteger float_mod integer_div integer_fromfloat integer_mod integer_rot float_yankdup integer_add integer_shove integer_max integer_stackdepth float_max float_dup_items float_stackdepth integer_dup_times integer_yank integer_min integer_dup_items print_integer print_float integer_flush float_shove float_pop float_sub float_min float_mult float_dec float_add float_dup float_swap integer_swap integer_dup float_tan integer_pop float_dup_times float_inc integer_dec float_rot float_flush float_cos float_div float_yank)
epigenetic-markers = []
error-function = #object[clojush.problems.software.number_io$make_number_io_error_function_from_cases$the_actual_num_io_error_function__6704 0x342723a3 clojush.problems.software.number_io$make_number_io_error_function_from_cases$the_actual_num_io_error_function__6704@342723a3]
error-threshold = 1.0E-4
evalpush-limit = 200
final-report-simplifications = 5000
genetic-operator-probabilities = {:alternation 0.3, :uniform-mutation 0.2, [:alternation :uniform-mutation] 0.5}
max-error = 5000
max-generations = 200
max-genome-size-in-initial-program = 100
max-points = 800
parent-selection = :tournament
population-size = 1000
print-timings = true
problem-specific-initial-report = #object[clojush.problems.software.number_io$number_io_initial_report 0x4ec427 clojush.problems.software.number_io$number_io_initial_report@4ec427]
problem-specific-report = #object[clojush.problems.software.number_io$num_io_report 0xfde487b clojush.problems.software.number_io$num_io_report@fde487b]
report-simplifications = 0
uniform-mutation-rate = 0.01
######################################
Train and test cases:
Train Case:   0 | Input/Output: [[72.36396901644224 78] 150.36396901644224]
Train Case:   1 | Input/Output: [[-87.2046261000263 -42] -129.2046261000263]
Train Case:   2 | Input/Output: [[64.63363888365151 -21] 43.633638883651514]
Train Case:   3 | Input/Output: [[71.68248098689205 97] 168.68248098689205]
Train Case:   4 | Input/Output: [[-0.6347316794167028 -24] -24.634731679416703]
Train Case:   5 | Input/Output: [[44.92913201352911 -5] 39.92913201352911]
Train Case:   6 | Input/Output: [[50.080971746432624 -71] -20.919028253567376]
Train Case:   7 | Input/Output: [[85.92638718941637 -24] 61.926387189416374]
Train Case:   8 | Input/Output: [[3.1604526390783434 -32] -28.839547360921657]
Train Case:   9 | Input/Output: [[26.853443038018483 -66] -39.14655696198152]
Train Case:  10 | Input/Output: [[-84.9331989268004 -50] -134.9331989268004]
Train Case:  11 | Input/Output: [[-83.4496738485788 -43] -126.4496738485788]
Train Case:  12 | Input/Output: [[-75.21844009495877 24] -51.218440094958765]
Train Case:  13 | Input/Output: [[53.58951062168899 -8] 45.58951062168899]
Train Case:  14 | Input/Output: [[74.66376182961739 62] 136.66376182961739]
Train Case:  15 | Input/Output: [[-70.5625509424451 -34] -104.5625509424451]
Train Case:  16 | Input/Output: [[38.91256567456719 42] 80.91256567456719]
Train Case:  17 | Input/Output: [[26.534296755416037 -90] -63.46570324458396]
Train Case:  18 | Input/Output: [[-17.10643303400468 -35] -52.10643303400468]
Train Case:  19 | Input/Output: [[-77.9152304515466 -22] -99.9152304515466]
Train Case:  20 | Input/Output: [[4.716564804158736 -83] -78.28343519584126]
Train Case:  21 | Input/Output: [[-12.291115202384447 -52] -64.29111520238445]
Train Case:  22 | Input/Output: [[12.572200638120108 81] 93.57220063812011]
Train Case:  23 | Input/Output: [[60.45254076402625 81] 141.45254076402625]
Train Case:  24 | Input/Output: [[12.20889413232527 90] 102.20889413232527]
Test Case:   0 | Input/Output: [[77.50393653382696 -67] 10.503936533826959]
Test Case:   1 | Input/Output: [[-49.84063591674388 -62] -111.84063591674388]
Test Case:   2 | Input/Output: [[82.93404721499442 -84] -1.065952785005578]
Test Case:   3 | Input/Output: [[-65.70672891842358 97] 31.29327108157642]
Test Case:   4 | Input/Output: [[40.17630298675422 -89] -48.82369701324578]
Test Case:   5 | Input/Output: [[65.7579868906171 10] 75.7579868906171]
Test Case:   6 | Input/Output: [[10.573897206198396 59] 69.5738972061984]
Test Case:   7 | Input/Output: [[-49.484589019648276 -41] -90.48458901964827]
Test Case:   8 | Input/Output: [[48.14434204381041 30] 78.14434204381041]
Test Case:   9 | Input/Output: [[-80.93702423183764 -77] -157.93702423183765]
Test Case:  10 | Input/Output: [[97.51651589911913 91] 188.51651589911913]
Test Case:  11 | Input/Output: [[-63.04443905435524 85] 21.955560945644763]
Test Case:  12 | Input/Output: [[10.241192216267137 90] 100.24119221626714]
Test Case:  13 | Input/Output: [[51.52434390671493 -61] -9.475656093285068]
Test Case:  14 | Input/Output: [[45.41436410397233 -72] -26.585635896027668]
Test Case:  15 | Input/Output: [[-31.929265553477876 -67] -98.92926555347788]
Test Case:  16 | Input/Output: [[66.83194040457752 -25] 41.83194040457752]
Test Case:  17 | Input/Output: [[30.586249056220197 55] 85.5862490562202]
Test Case:  18 | Input/Output: [[-53.94945974443033 63] 9.050540255569672]
Test Case:  19 | Input/Output: [[57.973696273981204 16] 73.9736962739812]
Test Case:  20 | Input/Output: [[6.5812456762621 6] 12.5812456762621]
Test Case:  21 | Input/Output: [[-31.00878349370295 -95] -126.00878349370295]
Test Case:  22 | Input/Output: [[78.68045972844433 78] 156.68045972844433]
Test Case:  23 | Input/Output: [[-27.61864911806593 -100] -127.61864911806593]
Test Case:  24 | Input/Output: [[89.12217258582092 3] 92.12217258582092]
Test Case:  25 | Input/Output: [[10.590977656276706 -10] 0.5909776562767064]
Test Case:  26 | Input/Output: [[27.89306158031519 -69] -41.10693841968481]
Test Case:  27 | Input/Output: [[-27.73054145984375 -34] -61.73054145984375]
Test Case:  28 | Input/Output: [[1.020753067595919 -30] -28.97924693240408]
Test Case:  29 | Input/Output: [[-8.46458509759313 -34] -42.46458509759313]
Test Case:  30 | Input/Output: [[-97.13998245849136 -55] -152.13998245849137]
Test Case:  31 | Input/Output: [[-7.438736084009733 82] 74.56126391599027]
Test Case:  32 | Input/Output: [[-6.8359382058680325 23] 16.164061794131968]
Test Case:  33 | Input/Output: [[98.53251905742977 -33] 65.53251905742977]
Test Case:  34 | Input/Output: [[60.38713202556315 -98] -37.61286797443685]
Test Case:  35 | Input/Output: [[-82.11601567803592 92] 9.883984321964078]
Test Case:  36 | Input/Output: [[35.43499104044196 -89] -53.56500895955804]
Test Case:  37 | Input/Output: [[-59.173683891621856 17] -42.173683891621856]
Test Case:  38 | Input/Output: [[-70.97375120364231 -96] -166.9737512036423]
Test Case:  39 | Input/Output: [[51.14194408491369 -2] 49.14194408491369]
Test Case:  40 | Input/Output: [[1.0320721467790719 35] 36.03207214677907]
Test Case:  41 | Input/Output: [[32.17752375208448 -57] -24.822476247915517]
Test Case:  42 | Input/Output: [[-81.17612799864149 63] -18.17612799864149]
Test Case:  43 | Input/Output: [[-67.59540511681526 25] -42.59540511681526]
Test Case:  44 | Input/Output: [[31.47789081477015 97] 128.47789081477015]
Test Case:  45 | Input/Output: [[-55.93341641585346 13] -42.93341641585346]
Test Case:  46 | Input/Output: [[79.76786308131972 -78] 1.7678630813197174]
Test Case:  47 | Input/Output: [[0.5882420809775653 32] 32.588242080977565]
Test Case:  48 | Input/Output: [[8.412255857664675 -63] -54.587744142335325]
Test Case:  49 | Input/Output: [[73.20043077115943 86] 159.20043077115943]
Test Case:  50 | Input/Output: [[86.79960754522295 24] 110.79960754522295]
Test Case:  51 | Input/Output: [[-22.174775926961516 -34] -56.174775926961516]
Test Case:  52 | Input/Output: [[30.407860072665386 -56] -25.592139927334614]
Test Case:  53 | Input/Output: [[-20.639977512935943 -26] -46.63997751293594]
Test Case:  54 | Input/Output: [[72.04490487015423 64] 136.04490487015423]
Test Case:  55 | Input/Output: [[47.335211840274724 -97] -49.664788159725276]
Test Case:  56 | Input/Output: [[69.40056115812766 68] 137.40056115812766]
Test Case:  57 | Input/Output: [[56.766962427047474 -53] 3.766962427047474]
Test Case:  58 | Input/Output: [[48.60761225588104 11] 59.60761225588104]
Test Case:  59 | Input/Output: [[17.45219203573552 -15] 2.4521920357355214]
Test Case:  60 | Input/Output: [[56.18125246234467 10] 66.18125246234467]
Test Case:  61 | Input/Output: [[13.84967559487356 -44] -30.15032440512644]
Test Case:  62 | Input/Output: [[-55.41084500433622 32] -23.410845004336217]
Test Case:  63 | Input/Output: [[99.7093240487842 -52] 47.7093240487842]
Test Case:  64 | Input/Output: [[-27.042389753371992 -90] -117.04238975337199]
Test Case:  65 | Input/Output: [[38.52512187494156 -62] -23.47487812505844]
Test Case:  66 | Input/Output: [[-45.34042440089679 -64] -109.34042440089678]
Test Case:  67 | Input/Output: [[-93.89134340634975 38] -55.89134340634975]
Test Case:  68 | Input/Output: [[-96.2650043468781 -34] -130.2650043468781]
Test Case:  69 | Input/Output: [[75.09951156107437 90] 165.09951156107437]
Test Case:  70 | Input/Output: [[-8.099150251028945 -53] -61.099150251028945]
Test Case:  71 | Input/Output: [[57.99259501964258 43] 100.99259501964258]
Test Case:  72 | Input/Output: [[31.248862244896856 44] 75.24886224489686]
Test Case:  73 | Input/Output: [[-15.963279124497049 68] 52.03672087550295]
Test Case:  74 | Input/Output: [[-2.4428716640100703 -22] -24.44287166401007]
Test Case:  75 | Input/Output: [[-53.273348923928474 49] -4.273348923928474]
Test Case:  76 | Input/Output: [[94.93223350350061 -98] -3.067766496499388]
Test Case:  77 | Input/Output: [[86.41603450129301 67] 153.416034501293]
Test Case:  78 | Input/Output: [[-13.569520079937107 -33] -46.56952007993711]
Test Case:  79 | Input/Output: [[-52.07247939081694 -65] -117.07247939081694]
Test Case:  80 | Input/Output: [[41.26836391940844 79] 120.26836391940844]
Test Case:  81 | Input/Output: [[48.22080529454658 100] 148.22080529454658]
Test Case:  82 | Input/Output: [[-55.027477096496845 -89] -144.02747709649685]
Test Case:  83 | Input/Output: [[-28.119870202533633 25] -3.119870202533633]
Test Case:  84 | Input/Output: [[23.658201234285897 33] 56.6582012342859]
Test Case:  85 | Input/Output: [[-12.157865956820487 -17] -29.157865956820487]
Test Case:  86 | Input/Output: [[0.20280519567043598 -12] -11.797194804329564]
Test Case:  87 | Input/Output: [[-77.0995641946562 -77] -154.09956419465618]
Test Case:  88 | Input/Output: [[59.16677756266114 -25] 34.16677756266114]
Test Case:  89 | Input/Output: [[55.71914033828236 -90] -34.28085966171764]
Test Case:  90 | Input/Output: [[-6.334330321884778 20] 13.665669678115222]
Test Case:  91 | Input/Output: [[89.21786444445425 74] 163.21786444445425]
Test Case:  92 | Input/Output: [[77.76658488926134 35] 112.76658488926134]
Test Case:  93 | Input/Output: [[-10.470578038194645 42] 31.529421961805355]
Test Case:  94 | Input/Output: [[17.87368195342171 75] 92.87368195342171]
Test Case:  95 | Input/Output: [[-5.704085561543337 87] 81.29591443845666]
Test Case:  96 | Input/Output: [[89.90945758024904 -31] 58.90945758024904]
Test Case:  97 | Input/Output: [[-31.83934310899987 -51] -82.83934310899987]
Test Case:  98 | Input/Output: [[30.161235793066567 -51] -20.838764206933433]
Test Case:  99 | Input/Output: [[2.3584534718212637 82] 84.35845347182126]
Test Case: 100 | Input/Output: [[-5.115970230651996 -67] -72.115970230652]
Test Case: 101 | Input/Output: [[-49.768407579957156 76] 26.231592420042844]
Test Case: 102 | Input/Output: [[28.976258211194533 -13] 15.976258211194533]
Test Case: 103 | Input/Output: [[68.45013460308846 76] 144.45013460308846]
Test Case: 104 | Input/Output: [[-5.285094322952361 -11] -16.28509432295236]
Test Case: 105 | Input/Output: [[-66.81553113260318 16] -50.81553113260318]
Test Case: 106 | Input/Output: [[-89.80859217243899 -17] -106.80859217243899]
Test Case: 107 | Input/Output: [[3.5842806094864557 -66] -62.415719390513544]
Test Case: 108 | Input/Output: [[-89.31678158661009 92] 2.683218413389909]
Test Case: 109 | Input/Output: [[-94.23888208489146 -47] -141.23888208489146]
Test Case: 110 | Input/Output: [[-87.79388061337117 73] -14.793880613371172]
Test Case: 111 | Input/Output: [[-32.12123223826583 33] 0.8787677617341672]
Test Case: 112 | Input/Output: [[-14.16446870801012 74] 59.83553129198988]
Test Case: 113 | Input/Output: [[-45.43296153534071 -65] -110.43296153534071]
Test Case: 114 | Input/Output: [[11.378207456954186 82] 93.37820745695419]
Test Case: 115 | Input/Output: [[62.00733488545109 -65] -2.992665114548913]
Test Case: 116 | Input/Output: [[85.48954253539819 24] 109.48954253539819]
Test Case: 117 | Input/Output: [[-80.8394350079071 31] -49.8394350079071]
Test Case: 118 | Input/Output: [[-76.12188814169416 -83] -159.12188814169417]
Test Case: 119 | Input/Output: [[54.960484656788765 -77] -22.039515343211235]
Test Case: 120 | Input/Output: [[21.630990818789698 51] 72.6309908187897]
Test Case: 121 | Input/Output: [[-55.7100425963432 41] -14.7100425963432]
Test Case: 122 | Input/Output: [[51.05780859072061 51] 102.05780859072061]
Test Case: 123 | Input/Output: [[-89.94616591885986 -46] -135.94616591885986]
Test Case: 124 | Input/Output: [[-18.673440641237747 75] 56.32655935876225]
Test Case: 125 | Input/Output: [[57.17867568049465 76] 133.17867568049465]
Test Case: 126 | Input/Output: [[-17.83537189652054 -8] -25.83537189652054]
Test Case: 127 | Input/Output: [[-74.92239307984008 25] -49.92239307984008]
Test Case: 128 | Input/Output: [[-68.82960717191062 -5] -73.82960717191062]
Test Case: 129 | Input/Output: [[-40.237263698395 0] -40.237263698395]
Test Case: 130 | Input/Output: [[19.98367745642004 58] 77.98367745642004]
Test Case: 131 | Input/Output: [[70.50807840899006 -18] 52.50807840899006]
Test Case: 132 | Input/Output: [[85.82239025950747 -97] -11.177609740492528]
Test Case: 133 | Input/Output: [[31.514686637676988 -22] 9.514686637676988]
Test Case: 134 | Input/Output: [[-25.711364610282246 -87] -112.71136461028225]
Test Case: 135 | Input/Output: [[-41.86455671462015 86] 44.13544328537985]
Test Case: 136 | Input/Output: [[41.920698070809095 -98] -56.079301929190905]
Test Case: 137 | Input/Output: [[13.151916962419733 94] 107.15191696241973]
Test Case: 138 | Input/Output: [[-97.52391014335319 34] -63.52391014335319]
Test Case: 139 | Input/Output: [[5.076611019700536 46] 51.076611019700536]
Test Case: 140 | Input/Output: [[-59.63451687585568 47] -12.634516875855681]
Test Case: 141 | Input/Output: [[32.93690519948382 -42] -9.063094800516183]
Test Case: 142 | Input/Output: [[-19.883586959131122 10] -9.883586959131122]
Test Case: 143 | Input/Output: [[82.26049328837942 73] 155.26049328837942]
Test Case: 144 | Input/Output: [[22.411868070027154 -55] -32.588131929972846]
Test Case: 145 | Input/Output: [[-72.42197916843676 84] 11.578020831563236]
Test Case: 146 | Input/Output: [[-65.18972295408459 5] -60.18972295408459]
Test Case: 147 | Input/Output: [[-55.46124561686725 17] -38.46124561686725]
Test Case: 148 | Input/Output: [[66.29860925303359 -55] 11.29860925303359]
Test Case: 149 | Input/Output: [[2.28899946480108 -19] -16.71100053519892]
Test Case: 150 | Input/Output: [[5.921186761967661 44] 49.92118676196766]
Test Case: 151 | Input/Output: [[77.22565432036026 90] 167.22565432036026]
Test Case: 152 | Input/Output: [[-72.90144755395349 -18] -90.90144755395349]
Test Case: 153 | Input/Output: [[89.86430066326778 80] 169.86430066326778]
Test Case: 154 | Input/Output: [[0.5752538538612555 -77] -76.42474614613874]
Test Case: 155 | Input/Output: [[-9.543536581880161 69] 59.45646341811984]
Test Case: 156 | Input/Output: [[91.97437609237403 -39] 52.97437609237403]
Test Case: 157 | Input/Output: [[-11.214693069998518 -65] -76.21469306999852]
Test Case: 158 | Input/Output: [[-48.648065280229716 -26] -74.64806528022972]
Test Case: 159 | Input/Output: [[-80.01593350731648 -49] -129.01593350731648]
Test Case: 160 | Input/Output: [[-92.95944594409826 -20] -112.95944594409826]
Test Case: 161 | Input/Output: [[60.99761550856937 28] 88.99761550856937]
Test Case: 162 | Input/Output: [[4.6088730019931035 9] 13.608873001993103]
Test Case: 163 | Input/Output: [[50.93699151561441 22] 72.93699151561441]
Test Case: 164 | Input/Output: [[47.07200384546226 40] 87.07200384546226]
Test Case: 165 | Input/Output: [[83.11252347922175 -94] -10.88747652077825]
Test Case: 166 | Input/Output: [[-20.676686158119168 -16] -36.67668615811917]
Test Case: 167 | Input/Output: [[-60.08765624476986 -65] -125.08765624476986]
Test Case: 168 | Input/Output: [[24.266515574682117 57] 81.26651557468212]
Test Case: 169 | Input/Output: [[66.90015424374775 88] 154.90015424374775]
Test Case: 170 | Input/Output: [[3.401141427871849 -34] -30.59885857212815]
Test Case: 171 | Input/Output: [[80.13052335806498 -69] 11.130523358064977]
Test Case: 172 | Input/Output: [[-86.47935022675885 85] -1.4793502267588536]
Test Case: 173 | Input/Output: [[50.41746093830244 39] 89.41746093830244]
Test Case: 174 | Input/Output: [[-64.30567709928789 73] 8.694322900712109]
Test Case: 175 | Input/Output: [[-93.60179919029166 24] -69.60179919029166]
Test Case: 176 | Input/Output: [[34.81328356330923 -97] -62.18671643669077]
Test Case: 177 | Input/Output: [[18.338264416445966 -71] -52.661735583554034]
Test Case: 178 | Input/Output: [[47.35194212587871 38] 85.35194212587871]
Test Case: 179 | Input/Output: [[94.4786042971821 -22] 72.4786042971821]
Test Case: 180 | Input/Output: [[84.96241534986419 92] 176.9624153498642]
Test Case: 181 | Input/Output: [[-80.45057303002491 54] -26.450573030024913]
Test Case: 182 | Input/Output: [[-5.276098112792482 25] 19.723901887207518]
Test Case: 183 | Input/Output: [[32.43270152169683 -35] -2.5672984783031723]
Test Case: 184 | Input/Output: [[-13.03819805558419 -50] -63.03819805558419]
Test Case: 185 | Input/Output: [[-35.074465443108664 -24] -59.074465443108664]
Test Case: 186 | Input/Output: [[-88.66078827172043 -72] -160.66078827172043]
Test Case: 187 | Input/Output: [[-5.018982051649857 38] 32.98101794835014]
Test Case: 188 | Input/Output: [[85.09355407566508 33] 118.09355407566508]
Test Case: 189 | Input/Output: [[-60.91395446050705 -100] -160.91395446050706]
Test Case: 190 | Input/Output: [[99.55947164573377 -63] 36.559471645733765]
Test Case: 191 | Input/Output: [[11.143261084888323 33] 44.14326108488832]
Test Case: 192 | Input/Output: [[-26.575333221030363 5] -21.575333221030363]
Test Case: 193 | Input/Output: [[-89.94619949921103 97] 7.053800500788967]
Test Case: 194 | Input/Output: [[-10.156900266015938 -80] -90.15690026601594]
Test Case: 195 | Input/Output: [[-78.42691449114696 8] -70.42691449114696]
Test Case: 196 | Input/Output: [[-87.06370568290478 -12] -99.06370568290478]
Test Case: 197 | Input/Output: [[-60.32779631531506 87] 26.672203684684938]
Test Case: 198 | Input/Output: [[60.53129484580967 30] 90.53129484580967]
Test Case: 199 | Input/Output: [[0.880620024562532 -88] -87.11937997543747]
Test Case: 200 | Input/Output: [[-1.0744824797423576 53] 51.92551752025764]
Test Case: 201 | Input/Output: [[92.83603763378855 1] 93.83603763378855]
Test Case: 202 | Input/Output: [[52.90316810400148 -32] 20.90316810400148]
Test Case: 203 | Input/Output: [[-48.75991102037691 -99] -147.7599110203769]
Test Case: 204 | Input/Output: [[44.29818382188833 76] 120.29818382188833]
Test Case: 205 | Input/Output: [[19.517763979733374 93] 112.51776397973337]
Test Case: 206 | Input/Output: [[71.93820044850477 -68] 3.938200448504773]
Test Case: 207 | Input/Output: [[40.1604761203869 51] 91.1604761203869]
Test Case: 208 | Input/Output: [[-15.341453745885246 94] 78.65854625411475]
Test Case: 209 | Input/Output: [[-47.26699317195893 -35] -82.26699317195893]
Test Case: 210 | Input/Output: [[82.44581187859913 -79] 3.4458118785991303]
Test Case: 211 | Input/Output: [[29.135220657774568 82] 111.13522065777457]
Test Case: 212 | Input/Output: [[-42.39312615297464 -35] -77.39312615297465]
Test Case: 213 | Input/Output: [[-12.424719186307584 -31] -43.424719186307584]
Test Case: 214 | Input/Output: [[93.8269415930059 38] 131.8269415930059]
Test Case: 215 | Input/Output: [[-99.14483258663462 28] -71.14483258663462]
Test Case: 216 | Input/Output: [[-40.15025589030816 -85] -125.15025589030816]
Test Case: 217 | Input/Output: [[27.87263121693293 32] 59.87263121693293]
Test Case: 218 | Input/Output: [[-14.010767244705335 85] 70.98923275529467]
Test Case: 219 | Input/Output: [[-38.79142794290404 54] 15.208572057095957]
Test Case: 220 | Input/Output: [[26.572355514906036 71] 97.57235551490604]
Test Case: 221 | Input/Output: [[13.042225724025386 -10] 3.0422257240253856]
Test Case: 222 | Input/Output: [[-49.14000151910578 -90] -139.1400015191058]
Test Case: 223 | Input/Output: [[-2.0309481518277437 -17] -19.030948151827744]
Test Case: 224 | Input/Output: [[-61.618375339633744 85] 23.381624660366256]
Test Case: 225 | Input/Output: [[-21.62927365121803 34] 12.370726348781972]
Test Case: 226 | Input/Output: [[-70.4417346765206 -46] -116.4417346765206]
Test Case: 227 | Input/Output: [[-68.21787028572528 -34] -102.21787028572528]
Test Case: 228 | Input/Output: [[-31.939694650559105 -53] -84.9396946505591]
Test Case: 229 | Input/Output: [[-80.64400837596988 11] -69.64400837596988]
Test Case: 230 | Input/Output: [[37.94056603185385 1] 38.94056603185385]
Test Case: 231 | Input/Output: [[10.947969165704535 32] 42.947969165704535]
Test Case: 232 | Input/Output: [[-15.479092943381943 -39] -54.47909294338194]
Test Case: 233 | Input/Output: [[-99.38950653121385 54] -45.389506531213854]
Test Case: 234 | Input/Output: [[23.58464999984973 27] 50.58464999984973]
Test Case: 235 | Input/Output: [[-47.00902312935562 37] -10.009023129355619]
Test Case: 236 | Input/Output: [[64.70607785411119 -62] 2.706077854111186]
Test Case: 237 | Input/Output: [[70.06876726499536 66] 136.06876726499536]
Test Case: 238 | Input/Output: [[63.997295142598375 49] 112.99729514259838]
Test Case: 239 | Input/Output: [[-42.39114715125511 53] 10.608852848744888]
Test Case: 240 | Input/Output: [[94.35097479307726 -34] 60.350974793077256]
Test Case: 241 | Input/Output: [[82.34925236210464 39] 121.34925236210464]
Test Case: 242 | Input/Output: [[-83.56616122248522 -23] -106.56616122248522]
Test Case: 243 | Input/Output: [[66.7553243575353 -8] 58.7553243575353]
Test Case: 244 | Input/Output: [[40.62667975838707 -56] -15.37332024161293]
Test Case: 245 | Input/Output: [[4.305765452037718 98] 102.30576545203772]
Test Case: 246 | Input/Output: [[-58.10751538400745 -96] -154.10751538400746]
Test Case: 247 | Input/Output: [[81.3699727685495 92] 173.3699727685495]
Test Case: 248 | Input/Output: [[30.919665984037465 69] 99.91966598403747]
Test Case: 249 | Input/Output: [[97.95799354107012 -99] -1.042006458929876]
Test Case: 250 | Input/Output: [[86.32740452362054 91] 177.32740452362054]
Test Case: 251 | Input/Output: [[-74.98643469710643 -89] -163.98643469710643]
Test Case: 252 | Input/Output: [[-78.53067301703743 70] -8.53067301703743]
Test Case: 253 | Input/Output: [[62.07285812706331 0] 62.07285812706331]
Test Case: 254 | Input/Output: [[29.01739030078474 -19] 10.01739030078474]
Test Case: 255 | Input/Output: [[-1.2340540285103287 -95] -96.23405402851033]
Test Case: 256 | Input/Output: [[-36.86617406619297 -92] -128.86617406619297]
Test Case: 257 | Input/Output: [[38.962447808161215 33] 71.96244780816122]
Test Case: 258 | Input/Output: [[13.841040250929112 -69] -55.15895974907089]
Test Case: 259 | Input/Output: [[93.72723087874101 -18] 75.72723087874101]
Test Case: 260 | Input/Output: [[7.730887139699647 72] 79.73088713969965]
Test Case: 261 | Input/Output: [[-47.102749483812104 57] 9.897250516187896]
Test Case: 262 | Input/Output: [[50.608859259812704 78] 128.6088592598127]
Test Case: 263 | Input/Output: [[-58.108113715284546 -97] -155.10811371528456]
Test Case: 264 | Input/Output: [[76.66258408186445 -9] 67.66258408186445]
Test Case: 265 | Input/Output: [[72.31893990807757 21] 93.31893990807757]
Test Case: 266 | Input/Output: [[63.659850471695535 -93] -29.340149528304465]
Test Case: 267 | Input/Output: [[-90.33588115596754 -60] -150.33588115596754]
Test Case: 268 | Input/Output: [[-37.156771587831905 29] -8.156771587831905]
Test Case: 269 | Input/Output: [[-89.9863085582159 66] -23.986308558215896]
Test Case: 270 | Input/Output: [[13.195200595851688 -80] -66.80479940414831]
Test Case: 271 | Input/Output: [[98.22684704471277 -16] 82.22684704471277]
Test Case: 272 | Input/Output: [[-9.315650440572071 15] 5.684349559427929]
Test Case: 273 | Input/Output: [[-45.73790096513684 -26] -71.73790096513684]
Test Case: 274 | Input/Output: [[80.85350702426254 -53] 27.85350702426254]
Test Case: 275 | Input/Output: [[3.313309650824152 -91] -87.68669034917585]
Test Case: 276 | Input/Output: [[-30.43137946489378 26] -4.43137946489378]
Test Case: 277 | Input/Output: [[-95.28663493476365 -44] -139.28663493476364]
Test Case: 278 | Input/Output: [[2.6921918826188715 48] 50.69219188261887]
Test Case: 279 | Input/Output: [[99.84382304283136 96] 195.84382304283136]
Test Case: 280 | Input/Output: [[-70.26599434378585 -97] -167.26599434378585]
Test Case: 281 | Input/Output: [[51.9867483037861 -63] -11.0132516962139]
Test Case: 282 | Input/Output: [[-69.76420915091322 75] 5.235790849086783]
Test Case: 283 | Input/Output: [[12.732366100902937 91] 103.73236610090294]
Test Case: 284 | Input/Output: [[-98.77782364701093 -86] -184.77782364701093]
Test Case: 285 | Input/Output: [[-11.516483696601341 11] -0.5164836966013411]
Test Case: 286 | Input/Output: [[-58.34004876200331 -75] -133.3400487620033]
Test Case: 287 | Input/Output: [[-72.56979413997324 100] 27.43020586002676]
Test Case: 288 | Input/Output: [[78.18666938127043 -68] 10.186669381270434]
Test Case: 289 | Input/Output: [[44.73352993380985 -17] 27.733529933809848]
Test Case: 290 | Input/Output: [[-42.10112840740425 70] 27.898871592595746]
Test Case: 291 | Input/Output: [[54.8571773466806 -71] -16.1428226533194]
Test Case: 292 | Input/Output: [[-4.05281278244594 68] 63.94718721755406]
Test Case: 293 | Input/Output: [[67.14859445220964 37] 104.14859445220964]
Test Case: 294 | Input/Output: [[9.299774865746485 -51] -41.700225134253515]
Test Case: 295 | Input/Output: [[-67.55743492877423 52] -15.557434928774228]
Test Case: 296 | Input/Output: [[-79.27830614489342 40] -39.27830614489342]
Test Case: 297 | Input/Output: [[95.39359401826425 -52] 43.39359401826425]
Test Case: 298 | Input/Output: [[-0.6660070417231907 29] 28.33399295827681]
Test Case: 299 | Input/Output: [[-91.56813164717464 -50] -141.56813164717465]
Test Case: 300 | Input/Output: [[37.880917295828624 45] 82.88091729582862]
Test Case: 301 | Input/Output: [[-61.6535558563607 -66] -127.6535558563607]
Test Case: 302 | Input/Output: [[65.33286189541269 31] 96.33286189541269]
Test Case: 303 | Input/Output: [[59.90404330944588 9] 68.90404330944588]
Test Case: 304 | Input/Output: [[-20.85977697959717 -21] -41.85977697959717]
Test Case: 305 | Input/Output: [[64.99892868431374 36] 100.99892868431374]
Test Case: 306 | Input/Output: [[31.976100004966526 3] 34.976100004966526]
Test Case: 307 | Input/Output: [[-96.89847092275672 -92] -188.8984709227567]
Test Case: 308 | Input/Output: [[23.2582901679596 -59] -35.7417098320404]
Test Case: 309 | Input/Output: [[34.824329323414275 -8] 26.824329323414275]
Test Case: 310 | Input/Output: [[-20.293050808494556 -5] -25.293050808494556]
Test Case: 311 | Input/Output: [[-23.319231558163295 -87] -110.3192315581633]
Test Case: 312 | Input/Output: [[18.821824276057015 -6] 12.821824276057015]
Test Case: 313 | Input/Output: [[1.9423611440006852 7] 8.942361144000685]
Test Case: 314 | Input/Output: [[-95.49552954302658 47] -48.49552954302658]
Test Case: 315 | Input/Output: [[-58.908171044202426 3] -55.908171044202426]
Test Case: 316 | Input/Output: [[-1.3444566709698478 -30] -31.344456670969848]
Test Case: 317 | Input/Output: [[98.17839766175754 48] 146.17839766175754]
Test Case: 318 | Input/Output: [[2.337331169737439 92] 94.33733116973744]
Test Case: 319 | Input/Output: [[-60.866030225073395 57] -3.866030225073395]
Test Case: 320 | Input/Output: [[53.26909680606698 93] 146.26909680606698]
Test Case: 321 | Input/Output: [[-71.77199324184437 94] 22.22800675815563]
Test Case: 322 | Input/Output: [[65.33154400173245 -71] -5.668455998267547]
Test Case: 323 | Input/Output: [[-31.161761209400197 52] 20.838238790599803]
Test Case: 324 | Input/Output: [[3.284381125792166 -29] -25.715618874207834]
Test Case: 325 | Input/Output: [[-66.42639117431193 -49] -115.42639117431193]
Test Case: 326 | Input/Output: [[-85.15433585860211 -60] -145.1543358586021]
Test Case: 327 | Input/Output: [[32.41161512365079 34] 66.41161512365079]
Test Case: 328 | Input/Output: [[-31.930905945921808 40] 8.069094054078192]
Test Case: 329 | Input/Output: [[66.48899470107594 53] 119.48899470107594]
Test Case: 330 | Input/Output: [[-93.13675879873462 23] -70.13675879873462]
Test Case: 331 | Input/Output: [[-77.27127758069028 62] -15.271277580690281]
Test Case: 332 | Input/Output: [[-88.21305243811366 -42] -130.21305243811366]
Test Case: 333 | Input/Output: [[-30.28296069314071 13] -17.28296069314071]
Test Case: 334 | Input/Output: [[-90.61559080585819 -84] -174.61559080585818]
Test Case: 335 | Input/Output: [[-62.07316853976261 25] -37.07316853976261]
Test Case: 336 | Input/Output: [[-68.89637128196533 21] -47.89637128196533]
Test Case: 337 | Input/Output: [[-88.33757186053603 -43] -131.33757186053603]
Test Case: 338 | Input/Output: [[51.30773731308602 -1] 50.30773731308602]
Test Case: 339 | Input/Output: [[5.119197111853296 66] 71.1191971118533]
Test Case: 340 | Input/Output: [[40.695113326452145 64] 104.69511332645214]
Test Case: 341 | Input/Output: [[41.486681105676354 83] 124.48668110567635]
Test Case: 342 | Input/Output: [[69.73650539580905 9] 78.73650539580905]
Test Case: 343 | Input/Output: [[-55.444448820103574 71] 15.555551179896426]
Test Case: 344 | Input/Output: [[-80.72429120219795 -88] -168.72429120219795]
Test Case: 345 | Input/Output: [[-19.58216964331585 21] 1.4178303566841493]
Test Case: 346 | Input/Output: [[28.378560406516954 31] 59.378560406516954]
Test Case: 347 | Input/Output: [[-45.83801094070608 -20] -65.83801094070608]
Test Case: 348 | Input/Output: [[-60.859350674558854 30] -30.859350674558854]
Test Case: 349 | Input/Output: [[-90.8863680954967 -8] -98.8863680954967]
Test Case: 350 | Input/Output: [[7.072300854247132 -98] -90.92769914575287]
Test Case: 351 | Input/Output: [[-45.40374565964154 81] 35.59625434035846]
Test Case: 352 | Input/Output: [[94.15877273625773 -61] 33.15877273625773]
Test Case: 353 | Input/Output: [[-20.241763524119023 52] 31.758236475880977]
Test Case: 354 | Input/Output: [[-91.99066252169305 -36] -127.99066252169305]
Test Case: 355 | Input/Output: [[48.69260956908394 -2] 46.69260956908394]
Test Case: 356 | Input/Output: [[-67.40888058841506 15] -52.40888058841506]
Test Case: 357 | Input/Output: [[21.738911927478483 84] 105.73891192747848]
Test Case: 358 | Input/Output: [[8.677788749206925 -15] -6.3222112507930746]
Test Case: 359 | Input/Output: [[13.546086229770609 82] 95.54608622977061]
Test Case: 360 | Input/Output: [[37.39100128079832 21] 58.39100128079832]
Test Case: 361 | Input/Output: [[57.700538363641385 -42] 15.700538363641385]
Test Case: 362 | Input/Output: [[-31.498794327677345 15] -16.498794327677345]
Test Case: 363 | Input/Output: [[-48.34816806476168 -49] -97.34816806476168]
Test Case: 364 | Input/Output: [[27.24306483613988 -12] 15.24306483613988]
Test Case: 365 | Input/Output: [[-43.041445679256384 -88] -131.04144567925638]
Test Case: 366 | Input/Output: [[5.634612074976204 69] 74.6346120749762]
Test Case: 367 | Input/Output: [[3.4880032853152727 -8] -4.511996714684727]
Test Case: 368 | Input/Output: [[98.69892965641873 -92] 6.698929656418727]
Test Case: 369 | Input/Output: [[-93.9277881596826 82] -11.927788159682606]
Test Case: 370 | Input/Output: [[70.57070291382388 10] 80.57070291382388]
Test Case: 371 | Input/Output: [[-79.11872386291665 -48] -127.11872386291665]
Test Case: 372 | Input/Output: [[-76.21922636206058 9] -67.21922636206058]
Test Case: 373 | Input/Output: [[-76.74092081134283 -76] -152.74092081134285]
Test Case: 374 | Input/Output: [[75.21754382372748 -46] 29.217543823727482]
Test Case: 375 | Input/Output: [[-41.00331635862289 -12] -53.00331635862289]
Test Case: 376 | Input/Output: [[42.142668669783575 71] 113.14266866978357]
Test Case: 377 | Input/Output: [[36.280350319098886 52] 88.28035031909889]
Test Case: 378 | Input/Output: [[-82.20145467614894 84] 1.7985453238510587]
Test Case: 379 | Input/Output: [[-79.94643357288624 100] 20.053566427113765]
Test Case: 380 | Input/Output: [[-16.328019591252612 -11] -27.328019591252612]
Test Case: 381 | Input/Output: [[-20.818113873868157 42] 21.181886126131843]
Test Case: 382 | Input/Output: [[-48.71243945741281 -93] -141.7124394574128]
Test Case: 383 | Input/Output: [[53.97296413072422 57] 110.97296413072422]
Test Case: 384 | Input/Output: [[-6.20825876042683 13] 6.79174123957317]
Test Case: 385 | Input/Output: [[40.554936379963294 24] 64.5549363799633]
Test Case: 386 | Input/Output: [[-65.21886736726401 30] -35.21886736726401]
Test Case: 387 | Input/Output: [[-69.58967693663772 -22] -91.58967693663772]
Test Case: 388 | Input/Output: [[90.89183218359409 65] 155.8918321835941]
Test Case: 389 | Input/Output: [[-10.340791745818436 2] -8.340791745818436]
Test Case: 390 | Input/Output: [[-54.70819091841026 -14] -68.70819091841025]
Test Case: 391 | Input/Output: [[16.17012431297364 -51] -34.82987568702636]
Test Case: 392 | Input/Output: [[-80.99614245609135 -46] -126.99614245609135]
Test Case: 393 | Input/Output: [[-4.888153167072787 -23] -27.888153167072787]
Test Case: 394 | Input/Output: [[55.82751740525359 -94] -38.17248259474641]
Test Case: 395 | Input/Output: [[6.037505015628213 48] 54.03750501562821]
Test Case: 396 | Input/Output: [[-85.77817893175434 25] -60.77817893175434]
Test Case: 397 | Input/Output: [[68.91180914016232 -92] -23.08819085983768]
Test Case: 398 | Input/Output: [[-21.514482679745257 -93] -114.51448267974526]
Test Case: 399 | Input/Output: [[-98.6723641301058 -32] -130.6723641301058]
Test Case: 400 | Input/Output: [[-69.510224967987 -31] -100.510224967987]
Test Case: 401 | Input/Output: [[-89.85720396649306 99] 9.14279603350694]
Test Case: 402 | Input/Output: [[27.396826309547805 -76] -48.603173690452195]
Test Case: 403 | Input/Output: [[25.825051341419965 -100] -74.17494865858004]
Test Case: 404 | Input/Output: [[-10.844701493203644 -44] -54.844701493203644]
Test Case: 405 | Input/Output: [[83.74061424651927 24] 107.74061424651927]
Test Case: 406 | Input/Output: [[70.09668111002415 -50] 20.09668111002415]
Test Case: 407 | Input/Output: [[84.64311722738444 -28] 56.64311722738444]
Test Case: 408 | Input/Output: [[-27.998488959693304 -45] -72.9984889596933]
Test Case: 409 | Input/Output: [[-0.9085859153567384 70] 69.09141408464326]
Test Case: 410 | Input/Output: [[60.43066413885768 39] 99.43066413885768]
Test Case: 411 | Input/Output: [[-52.12845976809959 -21] -73.12845976809959]
Test Case: 412 | Input/Output: [[-37.03553418739136 33] -4.035534187391363]
Test Case: 413 | Input/Output: [[-56.578792539345876 -38] -94.57879253934587]
Test Case: 414 | Input/Output: [[-95.11925822550695 37] -58.119258225506954]
Test Case: 415 | Input/Output: [[1.0432441465029854 -37] -35.956755853497015]
Test Case: 416 | Input/Output: [[-23.31339435604771 40] 16.68660564395229]
Test Case: 417 | Input/Output: [[-50.21558605901255 -3] -53.21558605901255]
Test Case: 418 | Input/Output: [[65.65633915891144 17] 82.65633915891144]
Test Case: 419 | Input/Output: [[-43.91696790603952 -57] -100.91696790603952]
Test Case: 420 | Input/Output: [[-47.834594935232744 -2] -49.834594935232744]
Test Case: 421 | Input/Output: [[-46.27223108891536 86] 39.72776891108464]
Test Case: 422 | Input/Output: [[47.48111127119881 1] 48.48111127119881]
Test Case: 423 | Input/Output: [[87.30912038284976 -18] 69.30912038284976]
Test Case: 424 | Input/Output: [[-34.52882053544532 41] 6.47117946455468]
Test Case: 425 | Input/Output: [[-37.20928258642011 -84] -121.2092825864201]
Test Case: 426 | Input/Output: [[-43.385632356548555 18] -25.385632356548555]
Test Case: 427 | Input/Output: [[71.03015098502624 61] 132.03015098502624]
Test Case: 428 | Input/Output: [[-21.198255898885705 -46] -67.1982558988857]
Test Case: 429 | Input/Output: [[-99.1330803470903 -65] -164.1330803470903]
Test Case: 430 | Input/Output: [[56.10756058447237 9] 65.10756058447237]
Test Case: 431 | Input/Output: [[74.60986272374558 44] 118.60986272374558]
Test Case: 432 | Input/Output: [[-19.03989775024438 8] -11.039897750244378]
Test Case: 433 | Input/Output: [[12.091659382266016 45] 57.091659382266016]
Test Case: 434 | Input/Output: [[-94.97248607435347 68] -26.97248607435347]
Test Case: 435 | Input/Output: [[-17.201238026128337 99] 81.79876197387166]
Test Case: 436 | Input/Output: [[89.4449115557008 39] 128.4449115557008]
Test Case: 437 | Input/Output: [[71.88952303485581 32] 103.88952303485581]
Test Case: 438 | Input/Output: [[-71.35527237177894 28] -43.35527237177894]
Test Case: 439 | Input/Output: [[-3.4003964896899532 7] 3.5996035103100468]
Test Case: 440 | Input/Output: [[91.26844371601578 81] 172.26844371601578]
Test Case: 441 | Input/Output: [[94.59646282819389 22] 116.59646282819389]
Test Case: 442 | Input/Output: [[55.21573658929083 89] 144.21573658929083]
Test Case: 443 | Input/Output: [[59.72228392190425 -76] -16.27771607809575]
Test Case: 444 | Input/Output: [[-78.64831398554497 -13] -91.64831398554497]
Test Case: 445 | Input/Output: [[80.81202756107052 -100] -19.187972438929478]
Test Case: 446 | Input/Output: [[-80.47111550652906 -56] -136.47111550652906]
Test Case: 447 | Input/Output: [[-39.73548537321434 16] -23.73548537321434]
Test Case: 448 | Input/Output: [[-18.131018653794584 -61] -79.13101865379458]
Test Case: 449 | Input/Output: [[-87.08160665887353 50] -37.081606658873525]
Test Case: 450 | Input/Output: [[28.341286317425727 -22] 6.341286317425727]
Test Case: 451 | Input/Output: [[-31.597157987155583 -10] -41.59715798715558]
Test Case: 452 | Input/Output: [[71.01040865913566 73] 144.01040865913566]
Test Case: 453 | Input/Output: [[-42.182607007697825 83] 40.817392992302175]
Test Case: 454 | Input/Output: [[-68.77650536683993 -78] -146.77650536683993]
Test Case: 455 | Input/Output: [[-56.346707280718974 -90] -146.346707280719]
Test Case: 456 | Input/Output: [[31.14690653178215 -24] 7.14690653178215]
Test Case: 457 | Input/Output: [[-36.65173419918919 68] 31.348265800810807]
Test Case: 458 | Input/Output: [[-72.06238996341881 -26] -98.06238996341881]
Test Case: 459 | Input/Output: [[4.480009441118966 -24] -19.519990558881034]
Test Case: 460 | Input/Output: [[-69.11931463601924 -93] -162.11931463601923]
Test Case: 461 | Input/Output: [[-93.33287717356444 22] -71.33287717356444]
Test Case: 462 | Input/Output: [[2.8155170983166897 -77] -74.18448290168331]
Test Case: 463 | Input/Output: [[-5.832897999182009 -56] -61.83289799918201]
Test Case: 464 | Input/Output: [[-90.67495424441019 -44] -134.67495424441017]
Test Case: 465 | Input/Output: [[-78.61608848320189 36] -42.61608848320189]
Test Case: 466 | Input/Output: [[-40.32406715877952 50] 9.67593284122048]
Test Case: 467 | Input/Output: [[99.3706722882512 28] 127.3706722882512]
Test Case: 468 | Input/Output: [[-4.002522350126043 -5] -9.002522350126043]
Test Case: 469 | Input/Output: [[17.46494767887144 16] 33.46494767887144]
Test Case: 470 | Input/Output: [[-18.5071006564947 -90] -108.5071006564947]
Test Case: 471 | Input/Output: [[50.48422432731573 77] 127.48422432731573]
Test Case: 472 | Input/Output: [[-69.10323010510469 24] -45.103230105104686]
Test Case: 473 | Input/Output: [[41.37202449834098 25] 66.37202449834098]
Test Case: 474 | Input/Output: [[-88.81477753528179 -2] -90.81477753528179]
Test Case: 475 | Input/Output: [[-55.10514122661589 0] -55.10514122661589]
Test Case: 476 | Input/Output: [[34.519699830421814 18] 52.519699830421814]
Test Case: 477 | Input/Output: [[-55.1494430802836 46] -9.149443080283604]
Test Case: 478 | Input/Output: [[99.94168934765429 -6] 93.94168934765429]
Test Case: 479 | Input/Output: [[15.963145225234271 -100] -84.03685477476573]
Test Case: 480 | Input/Output: [[84.27165466676303 -17] 67.27165466676303]
Test Case: 481 | Input/Output: [[-87.55188359209593 -54] -141.55188359209592]
Test Case: 482 | Input/Output: [[-38.37082089309332 -89] -127.37082089309331]
Test Case: 483 | Input/Output: [[-32.2488763933938 82] 49.7511236066062]
Test Case: 484 | Input/Output: [[-98.7869064317821 -46] -144.78690643178209]
Test Case: 485 | Input/Output: [[30.739579098761396 -48] -17.260420901238604]
Test Case: 486 | Input/Output: [[36.13653696203059 68] 104.13653696203059]
Test Case: 487 | Input/Output: [[-21.628436624945408 89] 67.37156337505459]
Test Case: 488 | Input/Output: [[71.74306032293507 -44] 27.743060322935065]
Test Case: 489 | Input/Output: [[81.98073828798852 81] 162.98073828798852]
Test Case: 490 | Input/Output: [[-44.7855717882363 -11] -55.7855717882363]
Test Case: 491 | Input/Output: [[-12.534583586114636 -43] -55.534583586114636]
Test Case: 492 | Input/Output: [[34.83740141631685 24] 58.83740141631685]
Test Case: 493 | Input/Output: [[65.52958414995166 11] 76.52958414995166]
Test Case: 494 | Input/Output: [[83.16558593791885 -64] 19.16558593791885]
Test Case: 495 | Input/Output: [[7.4019461706042335 -94] -86.59805382939577]
Test Case: 496 | Input/Output: [[23.58768807292084 -1] 22.58768807292084]
Test Case: 497 | Input/Output: [[9.279489524595078 -93] -83.72051047540492]
Test Case: 498 | Input/Output: [[-82.98427626458732 18] -64.98427626458732]
Test Case: 499 | Input/Output: [[74.30310172355732 -96] -21.69689827644268]
Test Case: 500 | Input/Output: [[-33.3011298478344 -85] -118.3011298478344]
Test Case: 501 | Input/Output: [[-36.68396983486855 91] 54.31603016513145]
Test Case: 502 | Input/Output: [[-72.83942891960704 26] -46.839428919607045]
Test Case: 503 | Input/Output: [[19.846243590448154 51] 70.84624359044815]
Test Case: 504 | Input/Output: [[-39.8896474337846 -51] -90.8896474337846]
Test Case: 505 | Input/Output: [[-85.70074239466858 26] -59.70074239466858]
Test Case: 506 | Input/Output: [[-6.859539257459659 -98] -104.85953925745966]
Test Case: 507 | Input/Output: [[-63.673016361085665 -4] -67.67301636108567]
Test Case: 508 | Input/Output: [[-82.60668246368886 -54] -136.60668246368886]
Test Case: 509 | Input/Output: [[-89.43293150829747 44] -45.43293150829747]
Test Case: 510 | Input/Output: [[-16.98319644325838 36] 19.01680355674162]
Test Case: 511 | Input/Output: [[66.09828049110638 79] 145.09828049110638]
Test Case: 512 | Input/Output: [[82.02513743085052 -36] 46.02513743085052]
Test Case: 513 | Input/Output: [[-60.708084217679655 27] -33.708084217679655]
Test Case: 514 | Input/Output: [[-59.60573950554809 35] -24.605739505548087]
Test Case: 515 | Input/Output: [[79.64377492732234 87] 166.64377492732234]
Test Case: 516 | Input/Output: [[-5.401506780214092 -3] -8.401506780214092]
Test Case: 517 | Input/Output: [[67.3264265198024 -91] -23.673573480197604]
Test Case: 518 | Input/Output: [[6.078429885807964 -10] -3.9215701141920363]
Test Case: 519 | Input/Output: [[23.320137299363992 -61] -37.67986270063601]
Test Case: 520 | Input/Output: [[19.56933831778622 79] 98.56933831778622]
Test Case: 521 | Input/Output: [[42.97274080478351 24] 66.97274080478351]
Test Case: 522 | Input/Output: [[-20.866645723137324 95] 74.13335427686268]
Test Case: 523 | Input/Output: [[-4.64082016358924 -2] -6.64082016358924]
Test Case: 524 | Input/Output: [[-40.53160577935753 -48] -88.53160577935753]
Test Case: 525 | Input/Output: [[83.40268468578347 -86] -2.59731531421653]
Test Case: 526 | Input/Output: [[-75.32991304450094 39] -36.32991304450094]
Test Case: 527 | Input/Output: [[-47.24247325829973 -96] -143.24247325829973]
Test Case: 528 | Input/Output: [[91.57151158628483 -90] 1.571511586284828]
Test Case: 529 | Input/Output: [[-22.055413436457798 -41] -63.0554134364578]
Test Case: 530 | Input/Output: [[-40.70545424326324 -93] -133.70545424326323]
Test Case: 531 | Input/Output: [[-76.40621617935462 -41] -117.40621617935462]
Test Case: 532 | Input/Output: [[-70.42761949101595 -52] -122.42761949101595]
Test Case: 533 | Input/Output: [[-94.03276550808108 83] -11.032765508081084]
Test Case: 534 | Input/Output: [[89.50746326137462 -85] 4.507463261374625]
Test Case: 535 | Input/Output: [[55.957741896936284 4] 59.957741896936284]
Test Case: 536 | Input/Output: [[63.06907226673874 -7] 56.06907226673874]
Test Case: 537 | Input/Output: [[-37.739937218203835 -15] -52.739937218203835]
Test Case: 538 | Input/Output: [[-91.4131380940053 61] -30.413138094005305]
Test Case: 539 | Input/Output: [[15.599095980806837 -3] 12.599095980806837]
Test Case: 540 | Input/Output: [[-6.730689291200534 -98] -104.73068929120053]
Test Case: 541 | Input/Output: [[95.96500652307529 12] 107.96500652307529]
Test Case: 542 | Input/Output: [[-61.76301276509939 58] -3.76301276509939]
Test Case: 543 | Input/Output: [[86.24116001722425 68] 154.24116001722425]
Test Case: 544 | Input/Output: [[-38.94389057965022 -40] -78.94389057965023]
Test Case: 545 | Input/Output: [[49.25135201958483 -3] 46.25135201958483]
Test Case: 546 | Input/Output: [[74.45775960447355 57] 131.45775960447355]
Test Case: 547 | Input/Output: [[92.24115119987513 19] 111.24115119987513]
Test Case: 548 | Input/Output: [[68.53051537340525 65] 133.53051537340525]
Test Case: 549 | Input/Output: [[-65.71331064326667 24] -41.71331064326667]
Test Case: 550 | Input/Output: [[-98.94823845929417 64] -34.948238459294174]
Test Case: 551 | Input/Output: [[32.73843804546007 55] 87.73843804546007]
Test Case: 552 | Input/Output: [[-13.166678896241905 -36] -49.166678896241905]
Test Case: 553 | Input/Output: [[52.83348187225346 21] 73.83348187225346]
Test Case: 554 | Input/Output: [[74.23245855945774 23] 97.23245855945774]
Test Case: 555 | Input/Output: [[11.777641096054126 -66] -54.222358903945874]
Test Case: 556 | Input/Output: [[37.1844253814626 -21] 16.184425381462603]
Test Case: 557 | Input/Output: [[63.79719004758687 -56] 7.7971900475868665]
Test Case: 558 | Input/Output: [[57.07905849886964 -43] 14.079058498869642]
Test Case: 559 | Input/Output: [[-57.02582166762544 -78] -135.02582166762545]
Test Case: 560 | Input/Output: [[3.7185002870889576 94] 97.71850028708896]
Test Case: 561 | Input/Output: [[36.6860556063333 62] 98.6860556063333]
Test Case: 562 | Input/Output: [[-85.9978964616272 -82] -167.9978964616272]
Test Case: 563 | Input/Output: [[94.83092727162193 -16] 78.83092727162193]
Test Case: 564 | Input/Output: [[20.378934491084692 69] 89.37893449108469]
Test Case: 565 | Input/Output: [[-92.51899391777903 83] -9.518993917779028]
Test Case: 566 | Input/Output: [[-69.25904265927956 -8] -77.25904265927956]
Test Case: 567 | Input/Output: [[81.44418992283386 -85] -3.555810077166143]
Test Case: 568 | Input/Output: [[-58.86341623609359 -100] -158.8634162360936]
Test Case: 569 | Input/Output: [[55.56094943541473 47] 102.56094943541473]
Test Case: 570 | Input/Output: [[58.37311887359721 -73] -14.626881126402793]
Test Case: 571 | Input/Output: [[61.927774154274914 -17] 44.927774154274914]
Test Case: 572 | Input/Output: [[25.6321911085372 -55] -29.3678088914628]
Test Case: 573 | Input/Output: [[56.09183669227926 67] 123.09183669227926]
Test Case: 574 | Input/Output: [[21.308992986766768 -94] -72.69100701323323]
Test Case: 575 | Input/Output: [[-1.2294837622117711 -11] -12.229483762211771]
Test Case: 576 | Input/Output: [[-59.758944876068924 -86] -145.75894487606894]
Test Case: 577 | Input/Output: [[84.92497871585192 -2] 82.92497871585192]
Test Case: 578 | Input/Output: [[17.632870326637956 -93] -75.36712967336204]
Test Case: 579 | Input/Output: [[-43.303190173370055 42] -1.303190173370055]
Test Case: 580 | Input/Output: [[61.65676535200899 50] 111.65676535200899]
Test Case: 581 | Input/Output: [[5.654786747239271 39] 44.65478674723927]
Test Case: 582 | Input/Output: [[-75.07672425604592 8] -67.07672425604592]
Test Case: 583 | Input/Output: [[57.47361027729076 -5] 52.47361027729076]
Test Case: 584 | Input/Output: [[-56.02669769394741 99] 42.97330230605259]
Test Case: 585 | Input/Output: [[15.930376273371834 -91] -75.06962372662817]
Test Case: 586 | Input/Output: [[37.93027717872252 96] 133.93027717872252]
Test Case: 587 | Input/Output: [[-14.007394748253105 -29] -43.007394748253105]
Test Case: 588 | Input/Output: [[20.952706693851567 -47] -26.047293306148433]
Test Case: 589 | Input/Output: [[-69.91672173820642 77] 7.0832782617935806]
Test Case: 590 | Input/Output: [[-89.57081016681461 -64] -153.57081016681462]
Test Case: 591 | Input/Output: [[-50.64018010738005 25] -25.640180107380047]
Test Case: 592 | Input/Output: [[20.42362836886913 8] 28.42362836886913]
Test Case: 593 | Input/Output: [[-89.29512728640279 95] 5.7048727135972115]
Test Case: 594 | Input/Output: [[-9.531219587865507 -38] -47.53121958786551]
Test Case: 595 | Input/Output: [[44.909781093836415 -98] -53.090218906163585]
Test Case: 596 | Input/Output: [[77.36751775037163 -33] 44.36751775037163]
Test Case: 597 | Input/Output: [[95.51149185800102 89] 184.51149185800102]
Test Case: 598 | Input/Output: [[-71.72960941456199 -97] -168.729609414562]
Test Case: 599 | Input/Output: [[-5.876522091857112 61] 55.12347790814289]
Test Case: 600 | Input/Output: [[-79.58183833021832 -66] -145.58183833021832]
Test Case: 601 | Input/Output: [[-52.5817484179937 62] 9.418251582006299]
Test Case: 602 | Input/Output: [[-9.23155793100274 -42] -51.23155793100274]
Test Case: 603 | Input/Output: [[9.590788570323511 13] 22.59078857032351]
Test Case: 604 | Input/Output: [[64.19328986337675 8] 72.19328986337675]
Test Case: 605 | Input/Output: [[84.70964839496662 39] 123.70964839496662]
Test Case: 606 | Input/Output: [[-24.99510167301777 -44] -68.99510167301777]
Test Case: 607 | Input/Output: [[-9.32283960142037 52] 42.67716039857963]
Test Case: 608 | Input/Output: [[96.46606110613945 -99] -2.533938893860551]
Test Case: 609 | Input/Output: [[15.278276324800771 -4] 11.278276324800771]
Test Case: 610 | Input/Output: [[-4.298293151500005 46] 41.701706848499995]
Test Case: 611 | Input/Output: [[-58.32457519817025 -75] -133.32457519817024]
Test Case: 612 | Input/Output: [[-94.77955019370887 -40] -134.77955019370887]
Test Case: 613 | Input/Output: [[-96.30804082481863 -19] -115.30804082481863]
Test Case: 614 | Input/Output: [[31.14993808148904 56] 87.14993808148904]
Test Case: 615 | Input/Output: [[-1.760485247552765 -96] -97.76048524755277]
Test Case: 616 | Input/Output: [[33.35581614772255 21] 54.35581614772255]
Test Case: 617 | Input/Output: [[-18.713965173761068 29] 10.286034826238932]
Test Case: 618 | Input/Output: [[-81.49976498787723 43] -38.49976498787723]
Test Case: 619 | Input/Output: [[22.954063104285055 61] 83.95406310428505]
Test Case: 620 | Input/Output: [[25.314645238311726 57] 82.31464523831173]
Test Case: 621 | Input/Output: [[-82.54058883735686 85] 2.4594111626431356]
Test Case: 622 | Input/Output: [[31.62807169218786 93] 124.62807169218786]
Test Case: 623 | Input/Output: [[7.409168232126007 77] 84.409168232126]
Test Case: 624 | Input/Output: [[-22.11029037599917 9] -13.11029037599917]
Test Case: 625 | Input/Output: [[20.93158427674335 68] 88.93158427674335]
Test Case: 626 | Input/Output: [[-84.10675336093092 95] 10.893246639069076]
Test Case: 627 | Input/Output: [[-70.62001401905245 -97] -167.62001401905246]
Test Case: 628 | Input/Output: [[-54.58913964474561 -93] -147.58913964474561]
Test Case: 629 | Input/Output: [[69.56386079226667 -57] 12.563860792266667]
Test Case: 630 | Input/Output: [[-49.616201268680385 49] -0.6162012686803848]
Test Case: 631 | Input/Output: [[22.710391747310425 -50] -27.289608252689575]
Test Case: 632 | Input/Output: [[-81.23185742129718 -14] -95.23185742129718]
Test Case: 633 | Input/Output: [[-14.650938247736292 1] -13.650938247736292]
Test Case: 634 | Input/Output: [[-85.02024284501395 -1] -86.02024284501395]
Test Case: 635 | Input/Output: [[32.995433198324235 -41] -8.004566801675765]
Test Case: 636 | Input/Output: [[12.585751506020657 -90] -77.41424849397934]
Test Case: 637 | Input/Output: [[-64.19057453638524 32] -32.19057453638524]
Test Case: 638 | Input/Output: [[87.91960886563251 13] 100.91960886563251]
Test Case: 639 | Input/Output: [[10.514613649817932 36] 46.51461364981793]
Test Case: 640 | Input/Output: [[-16.80542586611307 77] 60.19457413388693]
Test Case: 641 | Input/Output: [[-44.11831429452746 -35] -79.11831429452747]
Test Case: 642 | Input/Output: [[65.53238613492317 -13] 52.53238613492317]
Test Case: 643 | Input/Output: [[95.57454965882374 48] 143.57454965882374]
Test Case: 644 | Input/Output: [[90.74955239917065 -51] 39.74955239917065]
Test Case: 645 | Input/Output: [[-84.58613635451412 -100] -184.5861363545141]
Test Case: 646 | Input/Output: [[56.702101085508275 -84] -27.297898914491725]
Test Case: 647 | Input/Output: [[-90.51474473568221 -40] -130.5147447356822]
Test Case: 648 | Input/Output: [[-56.781725459965095 -63] -119.78172545996509]
Test Case: 649 | Input/Output: [[20.228973910829964 85] 105.22897391082996]
Test Case: 650 | Input/Output: [[29.068400108061468 -32] -2.931599891938532]
Test Case: 651 | Input/Output: [[-22.07946688683367 3] -19.07946688683367]
Test Case: 652 | Input/Output: [[-32.355584750804425 45] 12.644415249195575]
Test Case: 653 | Input/Output: [[84.01732525978966 -16] 68.01732525978966]
Test Case: 654 | Input/Output: [[1.7188449813140068 45] 46.71884498131401]
Test Case: 655 | Input/Output: [[87.36871429814164 22] 109.36871429814164]
Test Case: 656 | Input/Output: [[-10.717283850666036 63] 52.282716149333964]
Test Case: 657 | Input/Output: [[10.685955061723405 83] 93.6859550617234]
Test Case: 658 | Input/Output: [[-81.04814370607201 -98] -179.048143706072]
Test Case: 659 | Input/Output: [[62.316248404194766 -19] 43.316248404194766]
Test Case: 660 | Input/Output: [[48.5523592451826 -64] -15.4476407548174]
Test Case: 661 | Input/Output: [[-38.956353121337564 -48] -86.95635312133757]
Test Case: 662 | Input/Output: [[-61.63833204090845 -78] -139.63833204090844]
Test Case: 663 | Input/Output: [[-94.98893101378493 22] -72.98893101378493]
Test Case: 664 | Input/Output: [[-30.61745277987073 -44] -74.61745277987073]
Test Case: 665 | Input/Output: [[32.625921290396775 -38] -5.374078709603225]
Test Case: 666 | Input/Output: [[-45.92093771396579 7] -38.92093771396579]
Test Case: 667 | Input/Output: [[25.144912665801684 84] 109.14491266580168]
Test Case: 668 | Input/Output: [[-78.93229804394352 -9] -87.93229804394352]
Test Case: 669 | Input/Output: [[-64.32255008547293 26] -38.322550085472926]
Test Case: 670 | Input/Output: [[50.505284669048024 -33] 17.505284669048024]
Test Case: 671 | Input/Output: [[-70.8744412341369 -5] -75.8744412341369]
Test Case: 672 | Input/Output: [[26.489139843690495 77] 103.4891398436905]
Test Case: 673 | Input/Output: [[-98.41132836011961 -20] -118.41132836011961]
Test Case: 674 | Input/Output: [[-84.88309505162151 25] -59.88309505162151]
Test Case: 675 | Input/Output: [[-31.731733485844288 23] -8.731733485844288]
Test Case: 676 | Input/Output: [[-76.43880345129925 -73] -149.43880345129924]
Test Case: 677 | Input/Output: [[55.27137869927526 -7] 48.27137869927526]
Test Case: 678 | Input/Output: [[-91.03429998562176 74] -17.034299985621757]
Test Case: 679 | Input/Output: [[97.41332727134417 -30] 67.41332727134417]
Test Case: 680 | Input/Output: [[-84.43597789577535 67] -17.435977895775352]
Test Case: 681 | Input/Output: [[-8.273167843168778 22] 13.726832156831222]
Test Case: 682 | Input/Output: [[27.22264041160645 92] 119.22264041160645]
Test Case: 683 | Input/Output: [[72.72850578269092 -62] 10.728505782690917]
Test Case: 684 | Input/Output: [[56.57552482881886 99] 155.57552482881886]
Test Case: 685 | Input/Output: [[-42.71904967532964 43] 0.2809503246703571]
Test Case: 686 | Input/Output: [[31.999456079749336 30] 61.999456079749336]
Test Case: 687 | Input/Output: [[82.47736606282984 -23] 59.477366062829844]
Test Case: 688 | Input/Output: [[-95.7620128606823 39] -56.762012860682304]
Test Case: 689 | Input/Output: [[-64.0944990518733 -40] -104.0944990518733]
Test Case: 690 | Input/Output: [[18.062639313327836 -94] -75.93736068667216]
Test Case: 691 | Input/Output: [[2.151895462224303 63] 65.1518954622243]
Test Case: 692 | Input/Output: [[53.059868872119466 47] 100.05986887211947]
Test Case: 693 | Input/Output: [[89.71415415750411 -37] 52.71415415750411]
Test Case: 694 | Input/Output: [[-50.18143999576643 -45] -95.18143999576642]
Test Case: 695 | Input/Output: [[7.12974237521324 95] 102.12974237521324]
Test Case: 696 | Input/Output: [[23.45394199785946 26] 49.45394199785946]
Test Case: 697 | Input/Output: [[80.96276727910535 -33] 47.96276727910535]
Test Case: 698 | Input/Output: [[98.4885249117581 -22] 76.4885249117581]
Test Case: 699 | Input/Output: [[81.54091992009026 -47] 34.54091992009026]
Test Case: 700 | Input/Output: [[-32.91424233535987 -21] -53.91424233535987]
Test Case: 701 | Input/Output: [[-29.172467546392 -63] -92.172467546392]
Test Case: 702 | Input/Output: [[45.14609331369283 -58] -12.85390668630717]
Test Case: 703 | Input/Output: [[-92.6900336498992 -69] -161.6900336498992]
Test Case: 704 | Input/Output: [[64.67263027766182 36] 100.67263027766182]
Test Case: 705 | Input/Output: [[0.5867137091898513 -18] -17.41328629081015]
Test Case: 706 | Input/Output: [[-43.17928132542084 86] 42.82071867457916]
Test Case: 707 | Input/Output: [[50.25188108976661 -91] -40.74811891023339]
Test Case: 708 | Input/Output: [[12.934435397765796 -33] -20.065564602234204]
Test Case: 709 | Input/Output: [[62.46584495532201 -38] 24.465844955322012]
Test Case: 710 | Input/Output: [[-44.295907001811855 37] -7.295907001811855]
Test Case: 711 | Input/Output: [[-27.711689127849667 22] -5.711689127849667]
Test Case: 712 | Input/Output: [[-86.57300402062246 -33] -119.57300402062246]
Test Case: 713 | Input/Output: [[35.39417322038554 -44] -8.60582677961446]
Test Case: 714 | Input/Output: [[-92.73736586398714 -12] -104.73736586398714]
Test Case: 715 | Input/Output: [[-43.5148240826885 22] -21.5148240826885]
Test Case: 716 | Input/Output: [[4.270817469379608 88] 92.27081746937961]
Test Case: 717 | Input/Output: [[-12.69714587137662 -48] -60.69714587137662]
Test Case: 718 | Input/Output: [[22.72785398629557 57] 79.72785398629557]
Test Case: 719 | Input/Output: [[39.18731720464973 84] 123.18731720464973]
Test Case: 720 | Input/Output: [[-34.841537879943886 80] 45.158462120056114]
Test Case: 721 | Input/Output: [[50.666986582614385 36] 86.66698658261438]
Test Case: 722 | Input/Output: [[70.23835358506702 15] 85.23835358506702]
Test Case: 723 | Input/Output: [[3.9293731717013856 -56] -52.070626828298614]
Test Case: 724 | Input/Output: [[-7.805750022515156 98] 90.19424997748484]
Test Case: 725 | Input/Output: [[-57.380017303877295 -81] -138.3800173038773]
Test Case: 726 | Input/Output: [[31.574539962368817 66] 97.57453996236882]
Test Case: 727 | Input/Output: [[-54.48088147144525 -52] -106.48088147144526]
Test Case: 728 | Input/Output: [[57.28414505251857 20] 77.28414505251857]
Test Case: 729 | Input/Output: [[22.915944435462407 -36] -13.084055564537593]
Test Case: 730 | Input/Output: [[73.63208293053563 -14] 59.63208293053563]
Test Case: 731 | Input/Output: [[-38.12578491081173 12] -26.12578491081173]
Test Case: 732 | Input/Output: [[-15.646728618332446 11] -4.646728618332446]
Test Case: 733 | Input/Output: [[15.614631828461143 -22] -6.3853681715388575]
Test Case: 734 | Input/Output: [[51.363126581238646 -4] 47.363126581238646]
Test Case: 735 | Input/Output: [[-86.95101328313962 66] -20.951013283139616]
Test Case: 736 | Input/Output: [[-12.17278739529462 8] -4.17278739529462]
Test Case: 737 | Input/Output: [[46.59012029701418 34] 80.59012029701418]
Test Case: 738 | Input/Output: [[-98.524593068717 41] -57.524593068716996]
Test Case: 739 | Input/Output: [[-17.73252984557989 -54] -71.73252984557989]
Test Case: 740 | Input/Output: [[-50.1619960603876 57] 6.838003939612399]
Test Case: 741 | Input/Output: [[-56.163556841081565 -86] -142.16355684108157]
Test Case: 742 | Input/Output: [[80.10585153789751 67] 147.1058515378975]
Test Case: 743 | Input/Output: [[-3.6492188482843346 -65] -68.64921884828433]
Test Case: 744 | Input/Output: [[37.11218795611876 9] 46.11218795611876]
Test Case: 745 | Input/Output: [[27.041353372647563 59] 86.04135337264756]
Test Case: 746 | Input/Output: [[-43.53106447226178 63] 19.468935527738218]
Test Case: 747 | Input/Output: [[39.67529563013733 91] 130.67529563013733]
Test Case: 748 | Input/Output: [[37.011585508998536 5] 42.011585508998536]
Test Case: 749 | Input/Output: [[-92.70397124022729 -12] -104.70397124022729]
Test Case: 750 | Input/Output: [[34.35171435072445 4] 38.35171435072445]
Test Case: 751 | Input/Output: [[88.21393026982389 23] 111.21393026982389]
Test Case: 752 | Input/Output: [[-74.22793617091318 -13] -87.22793617091318]
Test Case: 753 | Input/Output: [[39.674632400832394 6] 45.674632400832394]
Test Case: 754 | Input/Output: [[12.288208916411563 -56] -43.71179108358844]
Test Case: 755 | Input/Output: [[-63.32238166693396 -70] -133.32238166693395]
Test Case: 756 | Input/Output: [[50.646188142406686 27] 77.64618814240669]
Test Case: 757 | Input/Output: [[-24.58500855400132 -19] -43.58500855400132]
Test Case: 758 | Input/Output: [[-56.56904308983313 37] -19.56904308983313]
Test Case: 759 | Input/Output: [[65.72729553122082 79] 144.72729553122082]
Test Case: 760 | Input/Output: [[97.20136601621886 -79] 18.201366016218856]
Test Case: 761 | Input/Output: [[22.282389069349634 69] 91.28238906934963]
Test Case: 762 | Input/Output: [[58.96703187636359 -49] 9.967031876363592]
Test Case: 763 | Input/Output: [[-35.50947404268237 26] -9.50947404268237]
Test Case: 764 | Input/Output: [[-95.83102262938934 98] 2.168977370610662]
Test Case: 765 | Input/Output: [[53.577503097819914 86] 139.5775030978199]
Test Case: 766 | Input/Output: [[86.96317812717857 -40] 46.963178127178566]
Test Case: 767 | Input/Output: [[37.57901439037798 100] 137.57901439037798]
Test Case: 768 | Input/Output: [[77.63757503432052 -76] 1.6375750343205198]
Test Case: 769 | Input/Output: [[-36.69466216701651 18] -18.69466216701651]
Test Case: 770 | Input/Output: [[3.8311505541960713 -89] -85.16884944580393]
Test Case: 771 | Input/Output: [[-52.68323336930947 -3] -55.68323336930947]
Test Case: 772 | Input/Output: [[68.28571412604211 88] 156.2857141260421]
Test Case: 773 | Input/Output: [[-72.08737852459677 -4] -76.08737852459677]
Test Case: 774 | Input/Output: [[-9.633998306325637 66] 56.36600169367436]
Test Case: 775 | Input/Output: [[-69.06922240470459 -61] -130.0692224047046]
Test Case: 776 | Input/Output: [[-4.181010039491738 -36] -40.18101003949174]
Test Case: 777 | Input/Output: [[83.27335845541336 59] 142.27335845541336]
Test Case: 778 | Input/Output: [[91.1261363966317 -96] -4.8738636033683065]
Test Case: 779 | Input/Output: [[15.646803092899233 -67] -51.35319690710077]
Test Case: 780 | Input/Output: [[-17.09473038833727 -18] -35.09473038833727]
Test Case: 781 | Input/Output: [[34.73249007202622 -23] 11.732490072026224]
Test Case: 782 | Input/Output: [[15.4049538586398 36] 51.4049538586398]
Test Case: 783 | Input/Output: [[-47.86622783524952 92] 44.13377216475048]
Test Case: 784 | Input/Output: [[-9.130090444280455 56] 46.869909555719545]
Test Case: 785 | Input/Output: [[-86.40475333704289 73] -13.40475333704289]
Test Case: 786 | Input/Output: [[82.95107511562588 13] 95.95107511562588]
Test Case: 787 | Input/Output: [[-19.013286309899982 16] -3.013286309899982]
Test Case: 788 | Input/Output: [[-98.69081599253371 -75] -173.69081599253371]
Test Case: 789 | Input/Output: [[48.036263363383995 36] 84.036263363384]
Test Case: 790 | Input/Output: [[7.918543617793986 75] 82.91854361779399]
Test Case: 791 | Input/Output: [[90.03205861201994 -2] 88.03205861201994]
Test Case: 792 | Input/Output: [[-62.5262513262911 -14] -76.5262513262911]
Test Case: 793 | Input/Output: [[-10.663791274688421 95] 84.33620872531158]
Test Case: 794 | Input/Output: [[52.791288565521995 62] 114.791288565522]
Test Case: 795 | Input/Output: [[-2.4348938261099136 -35] -37.434893826109914]
Test Case: 796 | Input/Output: [[60.022005950361944 60] 120.02200595036194]
Test Case: 797 | Input/Output: [[74.59430367769184 -12] 62.59430367769184]
Test Case: 798 | Input/Output: [[-25.782137061158437 -35] -60.78213706115844]
Test Case: 799 | Input/Output: [[45.16532088071051 23] 68.16532088071051]
Test Case: 800 | Input/Output: [[66.26670573945981 7] 73.26670573945981]
Test Case: 801 | Input/Output: [[41.03462442321958 -45] -3.965375576780417]
Test Case: 802 | Input/Output: [[52.98090678188058 61] 113.98090678188058]
Test Case: 803 | Input/Output: [[-17.252831019891346 -16] -33.252831019891346]
Test Case: 804 | Input/Output: [[34.835300839178416 84] 118.83530083917842]
Test Case: 805 | Input/Output: [[54.27804014513157 -33] 21.27804014513157]
Test Case: 806 | Input/Output: [[-23.327265234031017 4] -19.327265234031017]
Test Case: 807 | Input/Output: [[-90.87000063055295 -39] -129.87000063055297]
Test Case: 808 | Input/Output: [[98.55936396371712 90] 188.55936396371712]
Test Case: 809 | Input/Output: [[87.24097060535598 -52] 35.24097060535598]
Test Case: 810 | Input/Output: [[9.598657333905749 -53] -43.40134266609425]
Test Case: 811 | Input/Output: [[-19.89647146553675 33] 13.103528534463251]
Test Case: 812 | Input/Output: [[95.4708623894544 -80] 15.470862389454396]
Test Case: 813 | Input/Output: [[-83.05895710793905 -50] -133.05895710793905]
Test Case: 814 | Input/Output: [[-88.0169091523153 35] -53.01690915231531]
Test Case: 815 | Input/Output: [[-62.57830448927637 -63] -125.57830448927638]
Test Case: 816 | Input/Output: [[-46.367179215334644 -61] -107.36717921533464]
Test Case: 817 | Input/Output: [[-76.71679336674472 50] -26.716793366744724]
Test Case: 818 | Input/Output: [[26.025618349572866 7] 33.025618349572866]
Test Case: 819 | Input/Output: [[-84.63069951915271 93] 8.369300480847286]
Test Case: 820 | Input/Output: [[27.413547359003616 38] 65.41354735900362]
Test Case: 821 | Input/Output: [[4.679997307792647 19] 23.679997307792647]
Test Case: 822 | Input/Output: [[91.17882626121184 -57] 34.17882626121184]
Test Case: 823 | Input/Output: [[26.037848858518387 -69] -42.96215114148161]
Test Case: 824 | Input/Output: [[-67.45953746376145 70] 2.5404625362385502]
Test Case: 825 | Input/Output: [[-17.480373486497143 28] 10.519626513502857]
Test Case: 826 | Input/Output: [[-88.09352528391486 7] -81.09352528391486]
Test Case: 827 | Input/Output: [[26.359857689394687 -58] -31.640142310605313]
Test Case: 828 | Input/Output: [[-80.61052912055223 -34] -114.61052912055223]
Test Case: 829 | Input/Output: [[82.98375768905595 82] 164.98375768905595]
Test Case: 830 | Input/Output: [[-64.95054358662532 37] -27.950543586625315]
Test Case: 831 | Input/Output: [[-30.005512327076573 -13] -43.00551232707657]
Test Case: 832 | Input/Output: [[-29.708867575026645 48] 18.291132424973355]
Test Case: 833 | Input/Output: [[66.2311105637313 -66] 0.23111056373130623]
Test Case: 834 | Input/Output: [[24.138160667149975 0] 24.138160667149975]
Test Case: 835 | Input/Output: [[88.53271028582111 7] 95.53271028582111]
Test Case: 836 | Input/Output: [[15.266922837949636 -46] -30.733077162050364]
Test Case: 837 | Input/Output: [[10.027168256250448 14] 24.027168256250448]
Test Case: 838 | Input/Output: [[57.64042115625446 37] 94.64042115625446]
Test Case: 839 | Input/Output: [[-20.508007794191045 24] 3.4919922058089554]
Test Case: 840 | Input/Output: [[28.956904971901366 -91] -62.043095028098634]
Test Case: 841 | Input/Output: [[40.488477795317664 95] 135.48847779531766]
Test Case: 842 | Input/Output: [[95.19844182794324 71] 166.19844182794324]
Test Case: 843 | Input/Output: [[-45.05886074662695 -98] -143.05886074662695]
Test Case: 844 | Input/Output: [[39.74551761639577 -98] -58.25448238360423]
Test Case: 845 | Input/Output: [[-14.937996777424715 -71] -85.93799677742471]
Test Case: 846 | Input/Output: [[-72.42687270753845 -63] -135.42687270753845]
Test Case: 847 | Input/Output: [[17.08986147733576 90] 107.08986147733576]
Test Case: 848 | Input/Output: [[9.043695586771136 92] 101.04369558677114]
Test Case: 849 | Input/Output: [[-90.20054843467469 78] -12.200548434674687]
Test Case: 850 | Input/Output: [[-79.18041957800268 61] -18.180419578002684]
Test Case: 851 | Input/Output: [[-14.620536556937267 -81] -95.62053655693727]
Test Case: 852 | Input/Output: [[-90.77779188353001 13] -77.77779188353001]
Test Case: 853 | Input/Output: [[42.29087073926195 20] 62.29087073926195]
Test Case: 854 | Input/Output: [[88.04126908489835 6] 94.04126908489835]
Test Case: 855 | Input/Output: [[9.066141865679995 62] 71.06614186568]
Test Case: 856 | Input/Output: [[44.78509354349944 74] 118.78509354349944]
Test Case: 857 | Input/Output: [[-71.50772572266928 -1] -72.50772572266928]
Test Case: 858 | Input/Output: [[8.445813478393106 50] 58.445813478393106]
Test Case: 859 | Input/Output: [[-20.670305024218266 29] 8.329694975781734]
Test Case: 860 | Input/Output: [[15.24634434470886 -37] -21.75365565529114]
Test Case: 861 | Input/Output: [[-63.1065227926739 84] 20.8934772073261]
Test Case: 862 | Input/Output: [[9.110867904590464 95] 104.11086790459046]
Test Case: 863 | Input/Output: [[-35.9435621170628 63] 27.056437882937203]
Test Case: 864 | Input/Output: [[-60.039985397953764 73] 12.960014602046236]
Test Case: 865 | Input/Output: [[93.75570536389574 97] 190.75570536389574]
Test Case: 866 | Input/Output: [[-6.124554382465092 -14] -20.124554382465092]
Test Case: 867 | Input/Output: [[59.515947844494264 57] 116.51594784449426]
Test Case: 868 | Input/Output: [[28.39563304885914 -44] -15.604366951140861]
Test Case: 869 | Input/Output: [[-88.81388673252239 -92] -180.8138867325224]
Test Case: 870 | Input/Output: [[-10.4050562231443 40] 29.5949437768557]
Test Case: 871 | Input/Output: [[69.34324129860931 47] 116.34324129860931]
Test Case: 872 | Input/Output: [[9.769872566111033 32] 41.76987256611103]
Test Case: 873 | Input/Output: [[17.619480646913345 49] 66.61948064691335]
Test Case: 874 | Input/Output: [[56.212617049158354 94] 150.21261704915835]
Test Case: 875 | Input/Output: [[84.01346064583245 77] 161.01346064583245]
Test Case: 876 | Input/Output: [[17.67040972424452 25] 42.67040972424452]
Test Case: 877 | Input/Output: [[-73.01317548197154 92] 18.986824518028456]
Test Case: 878 | Input/Output: [[-40.41072291098398 4] -36.41072291098398]
Test Case: 879 | Input/Output: [[-79.03131309432703 84] 4.968686905672968]
Test Case: 880 | Input/Output: [[12.925648115497964 16] 28.925648115497964]
Test Case: 881 | Input/Output: [[85.11262758815636 89] 174.11262758815636]
Test Case: 882 | Input/Output: [[-84.86820092212734 -90] -174.86820092212736]
Test Case: 883 | Input/Output: [[-48.78463565216562 -65] -113.78463565216562]
Test Case: 884 | Input/Output: [[68.9025874215501 -38] 30.902587421550095]
Test Case: 885 | Input/Output: [[31.618012438168563 -84] -52.38198756183144]
Test Case: 886 | Input/Output: [[-17.56179252900658 0] -17.56179252900658]
Test Case: 887 | Input/Output: [[-34.99929055645457 69] 34.00070944354543]
Test Case: 888 | Input/Output: [[14.280723789629363 52] 66.28072378962936]
Test Case: 889 | Input/Output: [[-9.560639546256652 -1] -10.560639546256652]
Test Case: 890 | Input/Output: [[-83.48322348341095 18] -65.48322348341095]
Test Case: 891 | Input/Output: [[-71.31184747508443 -17] -88.31184747508443]
Test Case: 892 | Input/Output: [[55.56826745843662 -66] -10.431732541563377]
Test Case: 893 | Input/Output: [[-26.856396656095754 -23] -49.856396656095754]
Test Case: 894 | Input/Output: [[40.938268349976966 99] 139.93826834997697]
Test Case: 895 | Input/Output: [[9.572517996697556 -46] -36.427482003302444]
Test Case: 896 | Input/Output: [[-6.155501836361239 56] 49.84449816363876]
Test Case: 897 | Input/Output: [[43.42905001899513 -12] 31.429050018995127]
Test Case: 898 | Input/Output: [[-76.6245975215504 61] -15.624597521550399]
Test Case: 899 | Input/Output: [[92.21189112216598 -7] 85.21189112216598]
Test Case: 900 | Input/Output: [[54.970464612673624 73] 127.97046461267362]
Test Case: 901 | Input/Output: [[-61.93127839001447 -97] -158.93127839001448]
Test Case: 902 | Input/Output: [[-59.64729660122754 37] -22.647296601227538]
Test Case: 903 | Input/Output: [[-41.276956555715905 -3] -44.276956555715905]
Test Case: 904 | Input/Output: [[42.6184899277807 63] 105.6184899277807]
Test Case: 905 | Input/Output: [[37.061607041310936 -24] 13.061607041310936]
Test Case: 906 | Input/Output: [[45.29587461105024 -44] 1.2958746110502375]
Test Case: 907 | Input/Output: [[-67.38863416525913 -92] -159.38863416525913]
Test Case: 908 | Input/Output: [[-73.37129031560237 -15] -88.37129031560237]
Test Case: 909 | Input/Output: [[92.42688353114056 50] 142.42688353114056]
Test Case: 910 | Input/Output: [[-83.8244758294885 84] 0.17552417051149405]
Test Case: 911 | Input/Output: [[-59.07714302506768 36] -23.077143025067677]
Test Case: 912 | Input/Output: [[-43.25676075827678 61] 17.743239241723217]
Test Case: 913 | Input/Output: [[91.59854107099571 -61] 30.598541070995708]
Test Case: 914 | Input/Output: [[25.955763307903695 -26] -0.04423669209630532]
Test Case: 915 | Input/Output: [[-89.31644729549373 89] -0.31644729549373096]
Test Case: 916 | Input/Output: [[37.84114282231218 24] 61.84114282231218]
Test Case: 917 | Input/Output: [[-90.16926070158013 -32] -122.16926070158013]
Test Case: 918 | Input/Output: [[-83.79683539073189 75] -8.796835390731886]
Test Case: 919 | Input/Output: [[89.12288494179569 85] 174.1228849417957]
Test Case: 920 | Input/Output: [[-67.52213360829748 -44] -111.52213360829748]
Test Case: 921 | Input/Output: [[12.491614406273953 91] 103.49161440627395]
Test Case: 922 | Input/Output: [[-21.998787801417706 -24] -45.998787801417706]
Test Case: 923 | Input/Output: [[-95.5193200205436 -28] -123.5193200205436]
Test Case: 924 | Input/Output: [[84.91270749753974 -65] 19.912707497539742]
Test Case: 925 | Input/Output: [[-86.94200855037862 12] -74.94200855037862]
Test Case: 926 | Input/Output: [[-10.436744885395257 -89] -99.43674488539526]
Test Case: 927 | Input/Output: [[-33.908100373154014 -62] -95.90810037315401]
Test Case: 928 | Input/Output: [[40.29451254512398 -34] 6.294512545123979]
Test Case: 929 | Input/Output: [[96.33170102042646 -51] 45.331701020426465]
Test Case: 930 | Input/Output: [[-21.6405150982323 -21] -42.6405150982323]
Test Case: 931 | Input/Output: [[61.228005598174974 53] 114.22800559817497]
Test Case: 932 | Input/Output: [[-45.15097941752151 58] 12.849020582478488]
Test Case: 933 | Input/Output: [[-96.64163446379209 60] -36.64163446379209]
Test Case: 934 | Input/Output: [[32.41709895283381 94] 126.41709895283381]
Test Case: 935 | Input/Output: [[60.100746991509254 -16] 44.100746991509254]
Test Case: 936 | Input/Output: [[53.6059977170863 -1] 52.6059977170863]
Test Case: 937 | Input/Output: [[-21.528316317451 69] 47.471683682549]
Test Case: 938 | Input/Output: [[58.91895198163988 -37] 21.91895198163988]
Test Case: 939 | Input/Output: [[66.9396267704629 13] 79.9396267704629]
Test Case: 940 | Input/Output: [[-45.64717955188884 39] -6.64717955188884]
Test Case: 941 | Input/Output: [[-62.458146294086525 -35] -97.45814629408653]
Test Case: 942 | Input/Output: [[95.9278212239968 -19] 76.9278212239968]
Test Case: 943 | Input/Output: [[85.29095667509625 -22] 63.290956675096254]
Test Case: 944 | Input/Output: [[27.695005165512754 -67] -39.304994834487246]
Test Case: 945 | Input/Output: [[-69.27875840770346 98] 28.721241592296536]
Test Case: 946 | Input/Output: [[-1.5860177435226746 72] 70.41398225647733]
Test Case: 947 | Input/Output: [[50.57071969874261 55] 105.57071969874261]
Test Case: 948 | Input/Output: [[-8.74683095213014 -77] -85.74683095213014]
Test Case: 949 | Input/Output: [[79.1020708981685 2] 81.1020708981685]
Test Case: 950 | Input/Output: [[12.885249380416909 -70] -57.11475061958309]
Test Case: 951 | Input/Output: [[-53.63224592007996 -91] -144.63224592007995]
Test Case: 952 | Input/Output: [[48.84461312889306 -34] 14.844613128893059]
Test Case: 953 | Input/Output: [[-20.7821902338367 88] 67.2178097661633]
Test Case: 954 | Input/Output: [[10.032572611514794 51] 61.032572611514794]
Test Case: 955 | Input/Output: [[19.309779113683263 57] 76.30977911368326]
Test Case: 956 | Input/Output: [[-13.192541920863917 -22] -35.19254192086392]
Test Case: 957 | Input/Output: [[-8.720971359662656 -83] -91.72097135966266]
Test Case: 958 | Input/Output: [[79.92239634361889 51] 130.92239634361889]
Test Case: 959 | Input/Output: [[78.33902135410071 78] 156.3390213541007]
Test Case: 960 | Input/Output: [[70.1750901064652 -43] 27.175090106465206]
Test Case: 961 | Input/Output: [[-70.96970740755833 -71] -141.96970740755833]
Test Case: 962 | Input/Output: [[-73.21368798868392 -50] -123.21368798868392]
Test Case: 963 | Input/Output: [[-71.0560064251253 90] 18.943993574874696]
Test Case: 964 | Input/Output: [[90.20142390479555 -87] 3.201423904795547]
Test Case: 965 | Input/Output: [[-92.72141928241923 -76] -168.72141928241922]
Test Case: 966 | Input/Output: [[-22.807484777528003 15] -7.807484777528003]
Test Case: 967 | Input/Output: [[-17.070497146666625 75] 57.929502853333375]
Test Case: 968 | Input/Output: [[-24.854592876385183 8] -16.854592876385183]
Test Case: 969 | Input/Output: [[-88.72028190718359 -46] -134.7202819071836]
Test Case: 970 | Input/Output: [[49.797626825069784 -70] -20.202373174930216]
Test Case: 971 | Input/Output: [[5.466726250888954 -65] -59.533273749111046]
Test Case: 972 | Input/Output: [[-62.507434938141905 46] -16.507434938141905]
Test Case: 973 | Input/Output: [[-43.06703982277058 -7] -50.06703982277058]
Test Case: 974 | Input/Output: [[73.22314654096436 -100] -26.776853459035635]
Test Case: 975 | Input/Output: [[58.78759881622909 11] 69.78759881622909]
Test Case: 976 | Input/Output: [[-73.03334933639661 -67] -140.0333493363966]
Test Case: 977 | Input/Output: [[64.5853175496024 -66] -1.4146824503976063]
Test Case: 978 | Input/Output: [[41.85466020214602 21] 62.85466020214602]
Test Case: 979 | Input/Output: [[-84.51791454106865 -61] -145.51791454106865]
Test Case: 980 | Input/Output: [[-5.852080201278895 -95] -100.8520802012789]
Test Case: 981 | Input/Output: [[81.1203685795212 75] 156.1203685795212]
Test Case: 982 | Input/Output: [[8.878544230283822 -21] -12.121455769716178]
Test Case: 983 | Input/Output: [[-94.14402037810412 6] -88.14402037810412]
Test Case: 984 | Input/Output: [[49.977316761774404 -4] 45.977316761774404]
Test Case: 985 | Input/Output: [[-67.65054050525606 99] 31.34945949474394]
Test Case: 986 | Input/Output: [[-90.74583038419549 96] 5.254169615804514]
Test Case: 987 | Input/Output: [[-70.79224589941109 71] 0.20775410058891453]
Test Case: 988 | Input/Output: [[-39.23797689525941 63] 23.762023104740592]
Test Case: 989 | Input/Output: [[36.66620804035563 -31] 5.666208040355627]
Test Case: 990 | Input/Output: [[96.18043782926748 -44] 52.180437829267476]
Test Case: 991 | Input/Output: [[-92.07788834259618 55] -37.07788834259618]
Test Case: 992 | Input/Output: [[97.70417334585682 -58] 39.704173345856816]
Test Case: 993 | Input/Output: [[13.129858599581112 -88] -74.87014140041889]
Test Case: 994 | Input/Output: [[16.872002707064155 61] 77.87200270706415]
Test Case: 995 | Input/Output: [[76.79007972730142 100] 176.79007972730142]
Test Case: 996 | Input/Output: [[-1.0294762090582594 -85] -86.02947620905826]
Test Case: 997 | Input/Output: [[47.17382513787328 77] 124.17382513787328]
Test Case: 998 | Input/Output: [[50.043572411156106 18] 68.0435724111561]
Test Case: 999 | Input/Output: [[92.17378074507204 -13] 79.17378074507204]
;;******************************
Registered instructions: #{code_atom genome_uniform_tag_mutation code_car print_newline integer_sub integer_inc boolean_stackdepth return_exec_pop zip_dup_items integer_tag_string_instruction vector_integer_eq autoconstructive_integer_rand boolean_pop genome_close_inc string_fromchar vector_string_shove zip_yankdup genome_new genome_gene_genome_instruction vector_float_yankdup exec_yankdup vector_integer_shove integer_yankdup string_flush boolean_swap zip_empty exec_shove vector_boolean_yank code_eq exec_y boolean_yank integer_eq genome_silence string_butlast code_contains string_conjchar code_do*count vector_float_last genome_uniform_instruction_mutation genome_pop string_substring integer_mult vector_string_dup_times code_length vector_integer_dup boolean_or code_position boolean_empty zip_fromcode print_vector_string vector_boolean_swap return_frominteger char_dup_items vector_float_pushall return_genome_pop genome_gene_close char_iswhitespace code_cdr exec_do*vector_integer integer_rand vector_string_replacefirst string_first vector_boolean_first exec_do*while exec_string_iterate string_indexofchar vector_float_replace integer_fromstring code_list code_swap char_frominteger genome_gene_randomize vector_integer_emptyvector vector_string_eq exec_dup_items vector_float_butlast boolean_dup_items genome_uniform_string_mutation exec_empty zip_end? exec_fromzipnode string_shove vector_boolean_pushall zip_insert_left_fromcode exec_rot integer_tag_integer_instruction vector_string_concat vector_float_indexof genome_instruction_eq code_pop vector_string_subvec vector_integer_swap code_subst char_pop return_string_pop zip_yank exec_dup vector_integer_butlast vector_float_rest vector_string_flush boolean_fromfloat code_fromziprights float_sin boolean_flush char_isdigit float_lte exec_fromziproot vector_integer_empty print_code vector_string_stackdepth string_reverse exec_k vector_integer_yank float_frominteger char_rot vector_integer_dup_times print_char integer_tag_boolean_instruction vector_integer_stackdepth vector_boolean_concat boolean_xor integer_gte genome_yankdup vector_float_shove vector_integer_take boolean_dup_times code_quote string_replacefirst return_fromstring exec_fromziplefts vector_integer_yankdup boolean_shove float_lt vector_string_dup vector_string_occurrencesof vector_integer_replace zip_branch? vector_float_reverse float_mod vector_float_subvec integer_tag_code_instruction string_last print_boolean boolean_rot vector_string_rest integer_div vector_float_remove integer_tag_exec_instruction integer_fromfloat integer_lte code_fromzipchildren environment_end vector_integer_rot integer_mod string_concat vector_string_butlast genome_swap code_null exec_do*count vector_float_emptyvector vector_string_yankdup integer_tag_float_instruction integer_rot float_yankdup vector_string_rot zip_replace_fromexec genome_uniform_boolean_mutation vector_string_take vector_float_dup_items integer_add vector_integer_occurrencesof integer_shove string_dup_times genome_dup return_code_pop char_swap integer_max return_fromexec code_wrap genome_genesis return_float_pop code_flush genome_yank zip_shove vector_integer_flush vector_integer_subvec vector_boolean_indexof vector_float_pop char_dup_times genome_uniform_silence_mutation genome_uniform_crossover vector_string_remove vector_integer_contains zip_remove code_append vector_float_eq vector_integer_conj string_eq zip_leftmost code_yankdup code_rot integer_stackdepth float_max vector_boolean_set zip_append_child_fromexec zip_next vector_float_conj zip_fromexec code_dup_times float_dup_items string_take zip_left genome_if_gene_genome_instruction zip_replace_fromcode char_stackdepth return_fromchar genome_eq vector_integer_replacefirst float_stackdepth code_fromziproot integer_dup_times float_fromchar genome_uniform_combination_and_deletion float_gt boolean_dup float_fromboolean code_fromzipnode genome_rot vector_float_replacefirst vector_boolean_conj exec_dup_times vector_boolean_dup vector_integer_indexof vector_string_swap exec_eq string_emptystring string_swap integer_yank exec_while float_empty print_vector_boolean integer_min exec_swap genome_rotate integer_fromchar vector_string_yank string_stackdepth code_do*range string_replacechar char_allfromstring vector_integer_rest vector_boolean_length char_yank vector_float_empty code_fromfloat genome_parent2 return_fromcode string_pop code_dup_items float_eq integer_untag_instruction integer_dup_items vector_boolean_empty zip_insert_child_fromexec vector_string_last string_nth code_do* return_zip_pop vector_string_pop zip_rot vector_integer_nth exec_do*range vector_integer_dup_items exec_if char_shove zip_down zip_insert_left_fromexec code_frominteger vector_boolean_remove vector_integer_remove boolean_invert_first_then_and genome_flush print_string integer_fromboolean char_yankdup code_do vector_string_first boolean_frominteger string_setchar vector_integer_last char_isletter genome_gene_dup vector_integer_concat return_fromzip print_integer genome_uniform_float_mutation code_map boolean_eq float_gte return_fromfloat genome_gene_copy string_occurrencesofchar string_replacefirstchar print_float boolean_rand integer_flush float_shove string_replace char_dup float_pop char_eq vector_float_nth vector_string_conj integer_gt vector_float_dup_times return_integer_pop genome_gene_replace float_sub vector_integer_length vector_float_set vector_string_indexof vector_boolean_rest code_dup vector_boolean_shove zip_eq float_min boolean_not float_mult float_fromstring genome_unsilence code_if vector_boolean_dup_items vector_integer_pop vector_boolean_last exec_do*times zip_pop genome_gene_silent zip_rightmost float_dec vector_float_contains genome_gene_copy_range environment_new exec_do*vector_string code_nthcdr string_empty char_empty exec_pop vector_integer_set autoconstructive_boolean_rand genome_uniform_addition_and_deletion vector_float_rot string_yankdup exec_do*vector_float string_removechar code_extract vector_string_replace vector_float_first genome_parent1 return_tagspace char_flush genome_uniform_integer_mutation vector_float_occurrencesof vector_string_emptyvector float_add code_stackdepth exec_s zip_insert_right_fromexec float_dup integer_tag_char_instruction vector_string_nth zip_stackdepth vector_integer_reverse print_vector_integer char_fromfloat code_do*times code_noop zip_swap code_yank integer_lt vector_boolean_eq genome_stackdepth code_fromziplefts noop_open_paren genome_uniform_deletion vector_boolean_dup_times string_containschar string_yank char_rand zip_flush vector_boolean_rot float_swap exec_fromziprights vector_string_pushall vector_string_set vector_boolean_flush return_fromgenome exec_noop code_size vector_boolean_stackdepth vector_integer_pushall vector_boolean_reverse integer_swap string_split vector_boolean_contains string_fromboolean return_boolean_pop vector_float_dup vector_boolean_replace vector_string_dup_items integer_dup vector_boolean_nth vector_string_length genome_uniform_addition string_rest zip_insert_child_fromcode float_tan string_rot string_rand exec_yank string_parse_to_chars integer_pop integer_empty vector_float_flush genome_if_autoconstructing vector_float_yank noop_delete_prev_paren_pair print_exec zip_append_child_fromcode genome_gene_delete float_dup_times code_empty float_inc zip_right vector_float_length float_rand genome_uniform_close_mutation integer_dec string_contains return_fromboolean vector_float_concat vector_float_stackdepth exec_do*vector_boolean vector_integer_first genome_shove code_rand print_vector_float float_rot return_char_pop vector_string_contains genome_autoconstructing vector_boolean_occurrencesof string_dup_items genome_empty zip_prev genome_toggle_silent vector_string_reverse zip_dup code_cons code_member exec_stackdepth float_flush boolean_and integer_tagged_instruction vector_boolean_butlast string_length float_cos string_frominteger exec_flush vector_string_empty exec_when vector_float_swap genome_close_dec code_insert vector_boolean_pop float_div zip_insert_right_fromcode code_fromboolean vector_boolean_take code_shove environment_begin vector_float_take boolean_invert_second_then_and code_container code_nth vector_boolean_subvec float_yank zip_up vector_boolean_emptyvector vector_boolean_replacefirst genome_alternation zip_dup_times string_fromfloat vector_boolean_yankdup string_dup boolean_yankdup exec_fromzipchildren}
Starting PushGP run.
Clojush version = 3.11.1-1-SNAPSHOTHash of last Git commit = 8a64f874173fae27ed1a77827849de0fade43c2b
GitHub link = https://github.com/lspector/Clojush/commit/8a64f874173fae27ed1a77827849de0fade43c2b
age-combining-function = :average
age-mediated-parent-selection = false
alignment-deviation = 5
alternation-rate = 0.01
atom-generators = (#object[clojush.problems.software.number_io$fn__6694 0x2beee3e8 clojush.problems.software.number_io$fn__6694@2beee3e8] #object[clojush.problems.software.number_io$fn__6696 0x58bad46f clojush.problems.software.number_io$fn__6696@58bad46f] #object[clojush.instructions.tag$tag_instruction_erc$fn__1963 0x20231384 clojush.instructions.tag$tag_instruction_erc$fn__1963@20231384] #object[clojush.instructions.tag$tagged_instruction_erc$fn__1969 0x35becbd4 clojush.instructions.tag$tagged_instruction_erc$fn__1969@35becbd4] in1 in2 print_newline integer_sub integer_inc integer_yankdup integer_mult float_sin float_frominteger float_mod integer_div integer_fromfloat integer_mod integer_rot float_yankdup integer_add integer_shove integer_max integer_stackdepth float_max float_dup_items float_stackdepth integer_dup_times integer_yank integer_min integer_dup_items print_integer print_float integer_flush float_shove float_pop float_sub float_min float_mult float_dec float_add float_dup float_swap integer_swap integer_dup float_tan integer_pop float_dup_times float_inc integer_dec float_rot float_flush float_cos float_div float_yank)
autoconstructive = false
autoconstructive-boolean-rand-enrichment = 0
autoconstructive-clone-decay = :same
autoconstructive-clone-probability = 0.0
autoconstructive-decay = 0.0
autoconstructive-diffmeans-children = 10
autoconstructive-diversification-test = :gecco2016
autoconstructive-environments = false
autoconstructive-genome-instructions = :all
autoconstructive-integer-rand-enrichment = 0
autoconstructive-parent-decay = 0.0
autoconstructive-si-children = 8
autoconstructive-tag-types = [:integer :boolean :exec :float :char :string :code]
close-increment-rate = 0.2
close-parens-probabilities = [0.772 0.206 0.021 0.001]
csv-columns = [:generation :location :total-error :push-program-size]
csv-log-filename = log.csv
decimation-ratio = 1
decimation-tournament-size = 2
edn-additional-keys = [:generation :location]
edn-keys = [:uuid :parent-uuids :genetic-operators :program :genome :total-error :errors]
edn-log-filename = log.edn
epigenetic-markers = []
epsilon-lexicase-epsilon = nil
epsilon-lexicase-probability = 1
error-function = #object[clojush.problems.software.number_io$make_number_io_error_function_from_cases$the_actual_num_io_error_function__6704 0x342723a3 clojush.problems.software.number_io$make_number_io_error_function_from_cases$the_actual_num_io_error_function__6704@342723a3]
error-threshold = 1.0E-4
evalpush-limit = 200
evalpush-time-limit = 0
exit-on-success = true
final-report-simplifications = 5000
genetic-operator-probabilities = {:alternation 0.3, :uniform-mutation 0.2, [:alternation :uniform-mutation] 0.5}
improvement-discount = 0.5
individuals-for-novelty-archive-per-generation = 0
json-log-filename = log.json
json-log-program-strings = false
label = nil
lexicase-leakage = 0.1
lexicase-slippage = 0
log-fitnesses-for-all-cases = false
maintain-ancestors = false
max-error = 5000
max-generations = 200
max-genome-size-in-initial-program = 100
max-point-evaluations = 1.0E101
max-points = 800
meta-error-categories = []
normalization = :none
novelty-distance-metric = :euclidean
novelty-number-of-neighbors-k = 25
parent-reversion-probability = 1.0
parent-selection = :tournament
pop-when-tagging = true
population-size = 1000
print-ancestors-of-solution = false
print-cosmos-data = false
print-csv-logs = false
print-edn-logs = false
print-error-frequencies-by-case = false
print-errors = true
print-history = false
print-homology-data = false
print-json-logs = false
print-selection-counts = false
print-timings = true
problem-specific-initial-report = #object[clojush.problems.software.number_io$number_io_initial_report 0x4ec427 clojush.problems.software.number_io$number_io_initial_report@4ec427]
problem-specific-report = #object[clojush.problems.software.number_io$num_io_report 0xfde487b clojush.problems.software.number_io$num_io_report@fde487b]
random-screen = false
random-seed = 17 127 -71 11 -114 -80 6 98 -10 22 55 103 -2 35 -15 33
random-threshold-lexicase-probability = 1
random-toggle-lexicase-probability = 1
randomly-truncated-lexicase-probability = 1
record-host = nil
replace-child-that-exceeds-size-limit-with = :random
report-simplifications = 0
return-simplified-on-failure = false
reuse-errors = true
self-mate-avoidance-limit = 0
silent-instruction-probability = 0.2
sort-meta-errors-for-lexicase = :random
tag-enrichment = 0
tag-enrichment-types = [:integer :boolean :exec :float :char :string :code]
tag-limit = 10000
top-level-pop-code = false
top-level-push-code = false
total-error-method = :sum
tournament-size = 7
track-instruction-maps = false
uniform-addition-and-deletion-rate = 0.01
uniform-addition-rate = 0.01
uniform-close-mutation-rate = 0.1
uniform-combination-and-deletion-rate = 0.01
uniform-combination-rate = 0.01
uniform-deletion-rate = 0.01
uniform-mutation-constant-tweak-rate = 0.5
uniform-mutation-float-gaussian-standard-deviation = 1.0
uniform-mutation-int-gaussian-standard-deviation = 1
uniform-mutation-rate = 0.01
uniform-mutation-string-char-change-rate = 0.1
uniform-mutation-tag-gaussian-standard-deviation = 100
uniform-silence-mutation-rate = 0.1
use-single-thread = false

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Generating initial population...
Processing generation: 0
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 0
;;******************************
;; -*- Number IO problem report - generation 0
Test total error for best: 55532.0
Test mean error for best: 27.76600
;;------------------------------
Outputs of best individual on training cases:
Correct output: 150.3639690164 | Program output: 
70.3639690164
Correct output: -129.2046261   | Program output: 
-89.2046261  
Correct output: 43.6336388837  | Program output: 
62.6336388837
Correct output: 168.6824809869 | Program output: 
69.6824809869
Correct output: -24.6347316794 | Program output: 
-2.6347316794
Correct output: 39.9291320135  | Program output: 
42.9291320135
Correct output: -20.9190282536 | Program output: 
48.0809717464
Correct output: 61.9263871894  | Program output: 
83.9263871894
Correct output: -28.8395473609 | Program output: 
1.1604526391 
Correct output: -39.146556962  | Program output: 
24.853443038 
Correct output: -134.9331989268 | Program output: 
-86.9331989268
Correct output: -126.4496738486 | Program output: 
-85.4496738486
Correct output: -51.218440095  | Program output: 
-77.218440095
Correct output: 45.5895106217  | Program output: 
51.5895106217
Correct output: 136.6637618296 | Program output: 
72.6637618296
Correct output: -104.5625509424 | Program output: 
-72.5625509424
Correct output: 80.9125656746  | Program output: 
36.9125656746
Correct output: -63.4657032446 | Program output: 
24.5342967554
Correct output: -52.106433034  | Program output: 
-19.106433034
Correct output: -99.9152304515 | Program output: 
-79.9152304515
Correct output: -78.2834351958 | Program output: 
2.7165648042 
Correct output: -64.2911152024 | Program output: 
-14.2911152024
Correct output: 93.5722006381  | Program output: 
10.5722006381
Correct output: 141.452540764  | Program output: 
58.452540764 
Correct output: 102.2088941323 | Program output: 
10.2088941323
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_max} {:instruction float_flush} {:instruction integer_div} {:instruction integer_add} {:instruction print_float} {:instruction print_newline} {:instruction in1} {:instruction integer_yank} {:instruction integer_dup_times} {:instruction integer_dup_items} {:instruction float_dec} {:instruction float_dec} {:instruction integer_div} {:instruction print_float} {:instruction float_rot} {:instruction integer_dup_items} {:instruction float_cos} {:instruction tagged_490} {:instruction integer_min} {:instruction integer_pop})
Best program: (integer_max float_flush integer_div integer_add print_float print_newline in1 integer_yank integer_dup_times integer_dup_items float_dec float_dec integer_div print_float float_rot integer_dup_items float_cos tagged_490 integer_min integer_pop)
Errors: [80.0 2 40.0 3 19.0 3 99.0 2 22.0 2 3.0 3 69.0 12 22.0 3 30.0 11 64.0 12 48.0 4 41.0 4 26.0 3 6.0 2 64.0 3 32.0 4 44.0 3 88.0 13 33.0 3 20.0 2 81.0 13 50.0 2 83.0 3 83.0 3 92.0 2]
Total: 1356.0
Mean: 27.12
Genome size: 20
Size: 21
Percent parens: 0.048
--- Population Statistics ---
Average total errors in population: 17976.418674099998
Median total errors in population: 25341.0
Error averages by case: (720.6412347999981 13.373 721.9004099000024 11.748 694.5018445999985 12.832 724.5346680999992 13.361 692.8344049000017 13.293 689.170637699999 12.549 698.1248850999995 13.738 701.9798928999994 12.545 689.6529864000003 13.803 697.5540767999986 13.139 723.8716674000003 14.243 721.9768858999993 14.171 695.9618925000018 12.468 694.0810318000002 12.476 715.2014364999977 13.401 715.7304205999982 14.061 697.0973809000005 12.475 704.2698515999989 13.868 699.8049626000005 12.492 712.9436815000012 13.288 705.9308678999995 13.903 703.1830274999995 13.218 702.631554400002 12.52 717.5873987000016 12.517 706.5795731000007 13.19)
Error minima by case: (5.636 2 29.2046 3 0.7146 1 25.3175 2 0.3653 2 0.0709 2 1.081 8 1.0 2 2.1605 8 0.3392 8 34.9332 2 11.6556 2 0.7816 2 1.0 2 3.4906 2 4.5626 2 2.4121 2 0.8042 9 0.1064 2 0.0848 2 1.8205 9 0.0213 2 0.5722 1 8.2794 2 9.2089 1)
Average genome size in population (length): 51.641
Average program size in population (points): 52.641
Average percent parens in population: 0.041
Minimum age in population: 0.0
Maximum age in population: 0.0
Average age in population: 0.0
Median age in population: 0.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 2
Genome diversity (% unique Plush genomes):	 0.999
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 2
Syntactic diversity (% unique Push programs):	 0.999
Total error diversity:				 0.316
Error (vector) diversity:			 0.354
Behavioral diversity:				 0.37
--- Run Statistics ---
Number of program evaluations used so far: 1000
Number of point (instruction) evaluations so far: 1295283
--- Timings ---
Current time: 1529615453253 milliseconds
Total Time:           3.3 seconds
Initialization:       0.1 seconds,  3.3%
Reproduction:         0.6 seconds, 17.3%
Fitness Testing:      2.6 seconds, 79.3%
Report:               0.0 seconds,  0.0%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 0
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 1
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 1
;;******************************
;; -*- Number IO problem report - generation 1
Test total error for best: 55532.0
Test mean error for best: 27.76600
;;------------------------------
Outputs of best individual on training cases:
Correct output: 150.3639690164 | Program output: 
70.3639690164
Correct output: -129.2046261   | Program output: 
-89.2046261  
Correct output: 43.6336388837  | Program output: 
62.6336388837
Correct output: 168.6824809869 | Program output: 
69.6824809869
Correct output: -24.6347316794 | Program output: 
-2.6347316794
Correct output: 39.9291320135  | Program output: 
42.9291320135
Correct output: -20.9190282536 | Program output: 
48.0809717464
Correct output: 61.9263871894  | Program output: 
83.9263871894
Correct output: -28.8395473609 | Program output: 
1.1604526391 
Correct output: -39.146556962  | Program output: 
24.853443038 
Correct output: -134.9331989268 | Program output: 
-86.9331989268
Correct output: -126.4496738486 | Program output: 
-85.4496738486
Correct output: -51.218440095  | Program output: 
-77.218440095
Correct output: 45.5895106217  | Program output: 
51.5895106217
Correct output: 136.6637618296 | Program output: 
72.6637618296
Correct output: -104.5625509424 | Program output: 
-72.5625509424
Correct output: 80.9125656746  | Program output: 
36.9125656746
Correct output: -63.4657032446 | Program output: 
24.5342967554
Correct output: -52.106433034  | Program output: 
-19.106433034
Correct output: -99.9152304515 | Program output: 
-79.9152304515
Correct output: -78.2834351958 | Program output: 
2.7165648042 
Correct output: -64.2911152024 | Program output: 
-14.2911152024
Correct output: 93.5722006381  | Program output: 
10.5722006381
Correct output: 141.452540764  | Program output: 
58.452540764 
Correct output: 102.2088941323 | Program output: 
10.2088941323
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_max} {:instruction float_flush} {:instruction integer_div} {:instruction integer_add} {:instruction print_float} {:instruction print_newline} {:instruction in1} {:instruction integer_yank} {:instruction integer_dup_times} {:instruction integer_dup_items} {:instruction float_dec} {:instruction float_dec} {:instruction integer_div} {:instruction print_float} {:instruction float_rot} {:instruction integer_dup_items} {:instruction float_cos} {:instruction tagged_490} {:instruction integer_min} {:instruction integer_pop})
Best program: (integer_max float_flush integer_div integer_add print_float print_newline in1 integer_yank integer_dup_times integer_dup_items float_dec float_dec integer_div print_float float_rot integer_dup_items float_cos tagged_490 integer_min integer_pop)
Errors: [80.0 2 40.0 3 19.0 3 99.0 2 22.0 2 3.0 3 69.0 12 22.0 3 30.0 11 64.0 12 48.0 4 41.0 4 26.0 3 6.0 2 64.0 3 32.0 4 44.0 3 88.0 13 33.0 3 20.0 2 81.0 13 50.0 2 83.0 3 83.0 3 92.0 2]
Total: 1356.0
Mean: 27.12
Genome size: 20
Size: 21
Percent parens: 0.048
--- Population Statistics ---
Average total errors in population: 6653.695718199996
Median total errors in population: 2372.7513
Error averages by case: (293.69519540000044 11.093 278.6777810999992 9.612 234.95614250000023 10.782 302.9160865999986 10.979 220.85902029999897 10.81 223.60183440000066 10.338 237.84441120000002 12.337 248.88322689999916 10.29 221.4393296999999 12.435 236.27366930000005 11.996 284.4716176000007 11.742 280.39513539999916 11.487 236.40819390000172 9.971 232.5315477000004 10.141 282.46254120000066 10.93 265.71024690000155 11.418 244.91240950000167 10.164 250.56718090000004 12.733 234.5255177999987 10.154 262.746154599998 10.726 252.7896590999996 12.733 241.82130070000065 10.594 257.4200692999987 10.174 288.11489490000287 10.332 265.1305512999996 10.571)
Error minima by case: (5.636 2 10.7069 3 1.0 1 1.8606 2 0.3653 2 0.0709 2 1.081 7 1.0 2 1.5084 8 0.3392 8 19.522 2 11.6556 2 0.7816 2 1.0 2 10.6638 2 4.5626 2 2.4121 2 0.8042 9 0.1064 2 0.0848 2 1.8205 8 0.0213 2 5.1726 1 15.4525 2 10.0 1)
Average genome size in population (length): 59.268
Average program size in population (points): 60.268
Average percent parens in population: 0.022
Minimum age in population: 1.0
Maximum age in population: 2.0
Average age in population: 1.503
Median age in population: 2.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 8
Genome diversity (% unique Plush genomes):	 0.781
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 8
Syntactic diversity (% unique Push programs):	 0.781
Total error diversity:				 0.299
Error (vector) diversity:			 0.322
Behavioral diversity:				 0.346
--- Run Statistics ---
Number of program evaluations used so far: 2000
Number of point (instruction) evaluations so far: 2781440
--- Timings ---
Current time: 1529615457297 milliseconds
Total Time:           7.5 seconds
Initialization:       0.1 seconds,  1.5%
Reproduction:         2.8 seconds, 36.9%
Fitness Testing:      4.2 seconds, 56.1%
Report:               0.4 seconds,  5.6%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 1
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 2
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 2
;;******************************
;; -*- Number IO problem report - generation 2
Test total error for best: 55532.0
Test mean error for best: 27.76600
;;------------------------------
Outputs of best individual on training cases:
Correct output: 150.3639690164 | Program output: 
70.3639690164
Correct output: -129.2046261   | Program output: 
-89.2046261  
Correct output: 43.6336388837  | Program output: 
62.6336388837
Correct output: 168.6824809869 | Program output: 
69.6824809869
Correct output: -24.6347316794 | Program output: 
-2.6347316794
Correct output: 39.9291320135  | Program output: 
42.9291320135
Correct output: -20.9190282536 | Program output: 
48.0809717464
Correct output: 61.9263871894  | Program output: 
83.9263871894
Correct output: -28.8395473609 | Program output: 
1.1604526391 
Correct output: -39.146556962  | Program output: 
24.853443038 
Correct output: -134.9331989268 | Program output: 
-86.9331989268
Correct output: -126.4496738486 | Program output: 
-85.4496738486
Correct output: -51.218440095  | Program output: 
-77.218440095
Correct output: 45.5895106217  | Program output: 
51.5895106217
Correct output: 136.6637618296 | Program output: 
72.6637618296
Correct output: -104.5625509424 | Program output: 
-72.5625509424
Correct output: 80.9125656746  | Program output: 
36.9125656746
Correct output: -63.4657032446 | Program output: 
24.5342967554
Correct output: -52.106433034  | Program output: 
-19.106433034
Correct output: -99.9152304515 | Program output: 
-79.9152304515
Correct output: -78.2834351958 | Program output: 
2.7165648042 
Correct output: -64.2911152024 | Program output: 
-14.2911152024
Correct output: 93.5722006381  | Program output: 
10.5722006381
Correct output: 141.452540764  | Program output: 
58.452540764 
Correct output: 102.2088941323 | Program output: 
10.2088941323
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_max} {:instruction float_flush} {:instruction integer_div} {:instruction integer_add} {:instruction print_float} {:instruction print_newline} {:instruction in1} {:instruction integer_yank} {:instruction integer_dup_times} {:instruction integer_dup_items} {:instruction float_dec} {:instruction float_dec} {:instruction integer_div} {:instruction print_float} {:instruction float_rot} {:instruction integer_dup_items} {:instruction float_cos} {:instruction tagged_490} {:instruction integer_min} {:instruction integer_pop})
Best program: (integer_max float_flush integer_div integer_add print_float print_newline in1 integer_yank integer_dup_times integer_dup_items float_dec float_dec integer_div print_float float_rot integer_dup_items float_cos tagged_490 integer_min integer_pop)
Errors: [80.0 2 40.0 3 19.0 3 99.0 2 22.0 2 3.0 3 69.0 12 22.0 3 30.0 11 64.0 12 48.0 4 41.0 4 26.0 3 6.0 2 64.0 3 32.0 4 44.0 3 88.0 13 33.0 3 20.0 2 81.0 13 50.0 2 83.0 3 83.0 3 92.0 2]
Total: 1356.0
Mean: 27.12
Genome size: 20
Size: 21
Percent parens: 0.048
--- Population Statistics ---
Average total errors in population: 5093.683551000007
Median total errors in population: 1384.0
Error averages by case: (219.18176930000016 7.255 201.70952729999965 6.476 179.5337731000001 6.747 232.0425226999994 7.085 170.69896349999956 6.93 165.04828159999997 6.577 205.75610110000045 12.242 186.1035182999996 6.464 170.61866439999977 12.105 199.7088862999998 12.384 206.64544719999984 7.223 201.53143699999967 7.48 179.79394370000063 6.302 169.5429256000002 6.225 208.49509170000044 7.025 192.44574400000047 7.093 186.57017330000048 6.507 215.8832116999999 12.981 181.35061749999957 6.399 185.9419972999995 6.653 206.59993490000082 13.093 191.84930760000032 6.54 207.47611149999943 6.399 218.4795998000011 6.79 213.60200059999968 6.099)
Error minima by case: (5.636 2 29.9201 3 1.0 1 3.0 2 0.3653 2 1.0 2 1.081 7 1.0 2 2.1605 8 0.3392 8 34.9332 2 27.1651 2 1.0 2 1.0 2 12.6638 2 5.278 2 3.0874 2 3.0056 9 4.4742 2 0.6307 2 1.8205 8 3.8311 2 7.2563 1 19.0 2 10.0 1)
Average genome size in population (length): 57.42
Average program size in population (points): 58.42
Average percent parens in population: 0.022
Minimum age in population: 2.0
Maximum age in population: 4.0
Average age in population: 2.9825
Median age in population: 3.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 30
Genome diversity (% unique Plush genomes):	 0.701
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 30
Syntactic diversity (% unique Push programs):	 0.701
Total error diversity:				 0.146
Error (vector) diversity:			 0.152
Behavioral diversity:				 0.165
--- Run Statistics ---
Number of program evaluations used so far: 3000
Number of point (instruction) evaluations so far: 4220600
--- Timings ---
Current time: 1529615460468 milliseconds
Total Time:          10.6 seconds
Initialization:       0.1 seconds,  1.0%
Reproduction:         3.9 seconds, 37.0%
Fitness Testing:      5.9 seconds, 55.2%
Report:               0.7 seconds,  6.8%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 2
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 3
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 3
;;******************************
;; -*- Number IO problem report - generation 3
Test total error for best: 54798.0
Test mean error for best: 27.39900
;;------------------------------
Outputs of best individual on training cases:
Correct output: 150.3639690164 | Program output: 70.3639690164 
Correct output: -129.2046261   | Program output: -89.2046261   
Correct output: 43.6336388837  | Program output: 62.6336388837 
Correct output: 168.6824809869 | Program output: 69.6824809869 
Correct output: -24.6347316794 | Program output: -2.6347316794 
Correct output: 39.9291320135  | Program output: 42.9291320135 
Correct output: -20.9190282536 | Program output: 48.0809717464 
Correct output: 61.9263871894  | Program output: 83.9263871894 
Correct output: -28.8395473609 | Program output: 1.1604526391  
Correct output: -39.146556962  | Program output: 24.853443038  
Correct output: -134.9331989268 | Program output: -86.9331989268
Correct output: -126.4496738486 | Program output: -85.4496738486
Correct output: -51.218440095  | Program output: -77.218440095 
Correct output: 45.5895106217  | Program output: 51.5895106217 
Correct output: 136.6637618296 | Program output: 72.6637618296 
Correct output: -104.5625509424 | Program output: -72.5625509424
Correct output: 80.9125656746  | Program output: 36.9125656746 
Correct output: -63.4657032446 | Program output: 24.5342967554 
Correct output: -52.106433034  | Program output: -19.106433034 
Correct output: -99.9152304515 | Program output: -79.9152304515
Correct output: -78.2834351958 | Program output: 2.7165648042  
Correct output: -64.2911152024 | Program output: -14.2911152024
Correct output: 93.5722006381  | Program output: 10.5722006381 
Correct output: 141.452540764  | Program output: 58.452540764  
Correct output: 102.2088941323 | Program output: 10.2088941323 
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_fromfloat} {:instruction float_min} {:instruction integer_dup_items} {:instruction integer_fromfloat} {:instruction float_swap} {:instruction integer_div} {:instruction integer_add} {:instruction print_float} {:instruction print_integer} {:instruction in1} {:instruction integer_yank} {:instruction integer_dup_times} {:instruction integer_dup_items} {:instruction float_dec} {:instruction float_dec} {:instruction integer_div} {:instruction print_float} {:instruction float_rot} {:instruction integer_dup_items} {:instruction float_cos} {:instruction tagged_490} {:instruction integer_min} {:instruction integer_pop})
Best program: (integer_fromfloat float_min integer_dup_items integer_fromfloat float_swap integer_div integer_add print_float print_integer in1 integer_yank integer_dup_times integer_dup_items float_dec float_dec integer_div print_float float_rot integer_dup_items float_cos tagged_490 integer_min integer_pop)
Errors: [80.0 2 40.0 2 19.0 2 99.0 2 22.0 1 3.0 2 69.0 12 22.0 2 30.0 11 64.0 12 48.0 3 41.0 3 26.0 2 6.0 2 64.0 3 32.0 3 44.0 2 88.0 13 33.0 2 20.0 1 81.0 13 50.0 1 83.0 2 83.0 3 92.0 1]
Total: 1341.0
Mean: 26.82
Genome size: 23
Size: 24
Percent parens: 0.042
--- Population Statistics ---
Average total errors in population: 4388.1510319
Median total errors in population: 1361.0
Error averages by case: (195.29608919999998 4.263 163.62922479999997 4.394 143.37756770000001 3.944 211.79839919999998 4.223 146.5832034 3.783 129.48944519999998 3.957 186.25216000000003 11.98 146.21217529999998 3.925 150.62777849999998 11.622 182.0247918 12.466 170.53998239999999 4.448 164.4287512 5.036 149.37314659999998 3.964 132.158728 3.598 181.44578799999996 4.519 156.37576149999998 4.451 163.6208369 3.967 202.9073445 12.875 156.3741087 3.998 146.08080390000003 3.805 195.1058887 13.31 171.07939160000004 3.804 196.9748698 3.961 197.7609584 4.428 204.77283659999998 3.14)
Error minima by case: (5.636 2 39.0 2 8.06 1 3.0 1 0.6347 1 2.0 2 8.418 10 21.0 2 3.1605 9 26.6456 9 34.9332 2 40.0 2 23.0 2 5.0 2 12.6638 2 25.5626 2 3.0874 2 15.5343 10 17.1064 2 19.0 1 0.7166 11 12.2911 1 7.2563 1 19.0 2 10.0 1)
Average genome size in population (length): 46.645
Average program size in population (points): 47.645
Average percent parens in population: 0.029
Minimum age in population: 3.0
Maximum age in population: 6.0
Average age in population: 4.467
Median age in population: 4.5
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 146
Genome diversity (% unique Plush genomes):	 0.61
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 146
Syntactic diversity (% unique Push programs):	 0.61
Total error diversity:				 0.053
Error (vector) diversity:			 0.055
Behavioral diversity:				 0.059
--- Run Statistics ---
Number of program evaluations used so far: 4000
Number of point (instruction) evaluations so far: 5387430
--- Timings ---
Current time: 1529615463589 milliseconds
Total Time:          13.7 seconds
Initialization:       0.1 seconds,  0.8%
Reproduction:         5.1 seconds, 37.4%
Fitness Testing:      7.4 seconds, 54.3%
Report:               1.0 seconds,  7.5%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 3
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 4
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 4
;;******************************
;; -*- Number IO problem report - generation 4
Test total error for best: 55626.0
Test mean error for best: 27.81300
;;------------------------------
Outputs of best individual on training cases:
Correct output: 150.3639690164 | Program output: 
68.3639690164
Correct output: -129.2046261   | Program output: 
-91.2046261  
Correct output: 43.6336388837  | Program output: 
60.6336388837
Correct output: 168.6824809869 | Program output: 
67.6824809869
Correct output: -24.6347316794 | Program output: 
-4.6347316794
Correct output: 39.9291320135  | Program output: 
40.9291320135
Correct output: -20.9190282536 | Program output: 
46.0809717464
Correct output: 61.9263871894  | Program output: 
81.9263871894
Correct output: -28.8395473609 | Program output: 
-0.8395473609
Correct output: -39.146556962  | Program output: 
22.853443038 
Correct output: -134.9331989268 | Program output: 
-88.9331989268
Correct output: -126.4496738486 | Program output: 
-87.4496738486
Correct output: -51.218440095  | Program output: 
-79.218440095
Correct output: 45.5895106217  | Program output: 
49.5895106217
Correct output: 136.6637618296 | Program output: 
70.6637618296
Correct output: -104.5625509424 | Program output: 
-74.5625509424
Correct output: 80.9125656746  | Program output: 
34.9125656746
Correct output: -63.4657032446 | Program output: 
22.5342967554
Correct output: -52.106433034  | Program output: 
-21.106433034
Correct output: -99.9152304515 | Program output: 
-81.9152304515
Correct output: -78.2834351958 | Program output: 
0.7165648042 
Correct output: -64.2911152024 | Program output: 
-16.2911152024
Correct output: 93.5722006381  | Program output: 
8.5722006381 
Correct output: 141.452540764  | Program output: 
56.452540764 
Correct output: 102.2088941323 | Program output: 
8.2088941323 
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_max} {:instruction float_flush} {:instruction integer_swap} {:instruction integer_add} {:instruction print_float} {:instruction print_newline} {:instruction in1} {:instruction integer_yank} {:instruction integer_max} {:instruction integer_dup_items} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_div} {:instruction print_float} {:instruction float_rot} {:instruction integer_dup_items} {:instruction float_cos} {:instruction tagged_490} {:instruction float_pop} {:instruction integer_pop})
Best program: (integer_max float_flush integer_swap integer_add print_float print_newline in1 integer_yank integer_max integer_dup_items float_dec float_dec float_dec float_dec integer_div print_float float_rot integer_dup_items float_cos tagged_490 float_pop integer_pop)
Errors: [82.0 3 38.0 4 17.0 3 101.0 2 20.0 2 1.0 3 67.0 12 20.0 2 28.0 3 62.0 12 46.0 4 39.0 4 28.0 3 4.0 2 66.0 3 30.0 3 46.0 3 86.0 13 31.0 3 18.0 3 79.0 13 48.0 3 85.0 2 85.0 3 94.0 3]
Total: 1332.0
Mean: 26.64
Genome size: 22
Size: 23
Percent parens: 0.043
--- Population Statistics ---
Average total errors in population: 2989.8580631
Median total errors in population: 1356.0
Error averages by case: (142.59745990000002 2.989 105.72209690000001 3.698 85.87511310000001 3.632 160.3036431 2.924 88.68350140000001 2.886 70.58711150000002 3.653 132.33620240000002 12.158 88.7032142 3.643 95.4244652 11.206 127.740988 12.178 113.17041049999999 4.639 106.6457451 4.685 92.2267981 3.644 73.69554760000001 2.815 127.69460459999999 3.792 98.20587169999999 4.621 108.9421453 3.651 150.1222834 13.057 98.98174900000001 3.664 87.05348029999999 2.907 143.49948569999998 13.124 114.8162103 2.914 145.21491369999998 3.628 145.35752180000003 3.734 153.6025003 2.813)
Error minima by case: (78.0 2 38.0 2 4.5743 1 97.0 1 20.0 1 1.0 2 18.7324 11 13.7185 2 26.8584 3 30.5257 10 46.0 2 39.0 2 24.0 2 2.6184 2 62.0 2 30.0 2 32.7047 2 64.2919 11 31.0 2 18.0 1 77.3724 11 48.0 1 45.3643 1 81.0 3 54.001 1)
Average genome size in population (length): 23.704
Average program size in population (points): 24.704
Average percent parens in population: 0.044
Minimum age in population: 4.0
Maximum age in population: 7.625
Average age in population: 5.935125
Median age in population: 6.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 376
Genome diversity (% unique Plush genomes):	 0.353
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 376
Syntactic diversity (% unique Push programs):	 0.353
Total error diversity:				 0.025
Error (vector) diversity:			 0.026
Behavioral diversity:				 0.029
--- Run Statistics ---
Number of program evaluations used so far: 5000
Number of point (instruction) evaluations so far: 5980055
--- Timings ---
Current time: 1529615466622 milliseconds
Total Time:          16.8 seconds
Initialization:       0.1 seconds,  0.7%
Reproduction:         6.5 seconds, 38.4%
Fitness Testing:      8.9 seconds, 52.8%
Report:               1.4 seconds,  8.1%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 4
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 5
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 5
;;******************************
;; -*- Number IO problem report - generation 5
Test total error for best: 55626.0
Test mean error for best: 27.81300
;;------------------------------
Outputs of best individual on training cases:
Correct output: 150.3639690164 | Program output: 
68.3639690164
Correct output: -129.2046261   | Program output: 
-91.2046261  
Correct output: 43.6336388837  | Program output: 
60.6336388837
Correct output: 168.6824809869 | Program output: 
67.6824809869
Correct output: -24.6347316794 | Program output: 
-4.6347316794
Correct output: 39.9291320135  | Program output: 
40.9291320135
Correct output: -20.9190282536 | Program output: 
46.0809717464
Correct output: 61.9263871894  | Program output: 
81.9263871894
Correct output: -28.8395473609 | Program output: 
-0.8395473609
Correct output: -39.146556962  | Program output: 
22.853443038 
Correct output: -134.9331989268 | Program output: 
-88.9331989268
Correct output: -126.4496738486 | Program output: 
-87.4496738486
Correct output: -51.218440095  | Program output: 
-79.218440095
Correct output: 45.5895106217  | Program output: 
49.5895106217
Correct output: 136.6637618296 | Program output: 
70.6637618296
Correct output: -104.5625509424 | Program output: 
-74.5625509424
Correct output: 80.9125656746  | Program output: 
34.9125656746
Correct output: -63.4657032446 | Program output: 
22.5342967554
Correct output: -52.106433034  | Program output: 
-21.106433034
Correct output: -99.9152304515 | Program output: 
-81.9152304515
Correct output: -78.2834351958 | Program output: 
0.7165648042 
Correct output: -64.2911152024 | Program output: 
-16.2911152024
Correct output: 93.5722006381  | Program output: 
8.5722006381 
Correct output: 141.452540764  | Program output: 
56.452540764 
Correct output: 102.2088941323 | Program output: 
8.2088941323 
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_max} {:instruction float_flush} {:instruction integer_div} {:instruction integer_add} {:instruction print_float} {:instruction print_newline} {:instruction in1} {:instruction integer_yank} {:instruction integer_dup_times} {:instruction integer_dup_items} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_div} {:instruction print_float} {:instruction float_rot} {:instruction integer_dup_items} {:instruction integer_mult} {:instruction tagged_490} {:instruction float_yankdup} {:instruction integer_pop})
Best program: (integer_max float_flush integer_div integer_add print_float print_newline in1 integer_yank integer_dup_times integer_dup_items float_dec float_dec float_dec float_dec integer_div print_float float_rot integer_dup_items integer_mult tagged_490 float_yankdup integer_pop)
Errors: [82.0 3 38.0 4 17.0 3 101.0 2 20.0 2 1.0 3 67.0 12 20.0 2 28.0 3 62.0 12 46.0 4 39.0 4 28.0 3 4.0 2 66.0 3 30.0 3 46.0 3 86.0 13 31.0 3 18.0 3 79.0 13 48.0 3 85.0 2 85.0 3 94.0 3]
Total: 1332.0
Mean: 26.64
Genome size: 22
Size: 23
Percent parens: 0.043
--- Population Statistics ---
Average total errors in population: 2675.645472
Median total errors in population: 1356.0
Error averages by case: (130.976764 2.909 92.90538839999999 3.599 72.86837839999998 3.431 148.9288834 2.612 75.6346405 2.728 57.78412409999999 3.468 119.8981473 12.172 75.75130459999998 3.426 83.1809179 10.906 115.24210219999999 12.125 100.4553254 4.508 93.83614670000001 4.379 79.8073762 3.462 60.630491 2.667 115.8614252 3.631 85.29298000000001 4.466 96.85333189999999 3.467 137.92356009999997 12.973 86.0789436 3.473 73.9739291 2.77 131.3719476 13.097 102.13064480000001 2.783 133.6291274 3.305 133.7761311 3.601 142.1334611 2.762)
Error minima by case: (78.0 2 38.0 2 17.0 1 97.0 1 20.0 1 1.0 2 20.3431 10 20.0 2 26.8397 3 37.9972 10 46.0 2 39.0 2 24.0 2 4.0 2 62.0 2 30.0 2 42.0 2 62.6341 12 31.0 2 18.0 1 77.2876 12 48.0 1 81.0 1 81.0 3 90.0 1)
Average genome size in population (length): 22.263
Average program size in population (points): 23.263
Average percent parens in population: 0.045
Minimum age in population: 5.0
Maximum age in population: 9.25
Average age in population: 7.4539375
Median age in population: 7.5
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 252
Genome diversity (% unique Plush genomes):	 0.383
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 252
Syntactic diversity (% unique Push programs):	 0.383
Total error diversity:				 0.022
Error (vector) diversity:			 0.024
Behavioral diversity:				 0.026
--- Run Statistics ---
Number of program evaluations used so far: 6000
Number of point (instruction) evaluations so far: 6536630
--- Timings ---
Current time: 1529615469465 milliseconds
Total Time:          19.5 seconds
Initialization:       0.1 seconds,  0.6%
Reproduction:         7.5 seconds, 38.3%
Fitness Testing:     10.3 seconds, 52.7%
Report:               1.6 seconds,  8.4%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 5
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 6
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 6
;;******************************
;; -*- Number IO problem report - generation 6
Test total error for best: 55003.0
Test mean error for best: 27.50150
;;------------------------------
Outputs of best individual on training cases:
Correct output: 150.3639690164 | Program output: 67.3639690164 
Correct output: -129.2046261   | Program output: -92.2046261   
Correct output: 43.6336388837  | Program output: 59.6336388837 
Correct output: 168.6824809869 | Program output: 66.6824809869 
Correct output: -24.6347316794 | Program output: -5.6347316794 
Correct output: 39.9291320135  | Program output: 39.9291320135 
Correct output: -20.9190282536 | Program output: 45.0809717464 
Correct output: 61.9263871894  | Program output: 80.9263871894 
Correct output: -28.8395473609 | Program output: -1.8395473609 
Correct output: -39.146556962  | Program output: 21.853443038  
Correct output: -134.9331989268 | Program output: -89.9331989268
Correct output: -126.4496738486 | Program output: -88.4496738486
Correct output: -51.218440095  | Program output: -80.218440095 
Correct output: 45.5895106217  | Program output: 48.5895106217 
Correct output: 136.6637618296 | Program output: 69.6637618296 
Correct output: -104.5625509424 | Program output: -75.5625509424
Correct output: 80.9125656746  | Program output: 33.9125656746 
Correct output: -63.4657032446 | Program output: 21.5342967554 
Correct output: -52.106433034  | Program output: -22.106433034 
Correct output: -99.9152304515 | Program output: -82.9152304515
Correct output: -78.2834351958 | Program output: -0.2834351958 
Correct output: -64.2911152024 | Program output: -17.2911152024
Correct output: 93.5722006381  | Program output: 7.5722006381  
Correct output: 141.452540764  | Program output: 55.452540764  
Correct output: 102.2088941323 | Program output: 7.2088941323  
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_fromfloat} {:instruction float_min} {:instruction integer_dup_items} {:instruction integer_fromfloat} {:instruction float_swap} {:instruction integer_div} {:instruction integer_add} {:instruction print_float} {:instruction print_integer} {:instruction in1} {:instruction integer_yank} {:instruction integer_dup_times} {:instruction integer_dup_items} {:instruction float_dec} {:instruction integer_yank} {:instruction integer_dup_times} {:instruction integer_dup_items} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_div} {:instruction print_float} {:instruction float_rot} {:instruction integer_dup_items} {:instruction float_cos} {:instruction tagged_490} {:instruction integer_min} {:instruction integer_pop})
Best program: (integer_fromfloat float_min integer_dup_items integer_fromfloat float_swap integer_div integer_add print_float print_integer in1 integer_yank integer_dup_times integer_dup_items float_dec integer_yank integer_dup_times integer_dup_items float_dec float_dec float_dec float_dec integer_div print_float float_rot integer_dup_items float_cos tagged_490 integer_min integer_pop)
Errors: [83.0 3 37.0 2 16.0 2 102.0 2 19.0 2 0.0 0 66.0 12 19.0 2 27.0 2 61.0 12 45.0 3 38.0 3 29.0 2 3.0 1 67.0 3 29.0 3 47.0 2 85.0 13 30.0 1 17.0 2 78.0 2 47.0 2 86.0 2 86.0 3 95.0 3]
Total: 1296.0
Mean: 25.92
Genome size: 29
Size: 30
Percent parens: 0.033
--- Population Statistics ---
Average total errors in population: 2903.4541941999996
Median total errors in population: 1341.0
Error averages by case: (140.6004203 3.246 102.07806500000001 3.58 82.2552088 3.206 158.36250439999998 2.606 84.9863133 2.586 67.33302900000001 3.219 128.7796473 12.18 85.1087751 3.027 91.4973309 9.625 124.1770884 12.105 109.55180539999999 4.281 103.0000038 4.069 89.96710279999999 3.224 70.1462204 2.747 125.64964810000001 3.715 94.5460556 4.084 106.83958899999999 3.232 146.61777370000001 12.893 95.323981 3.228 83.3495276 2.794 139.2363064 13.052 111.20248220000002 2.794 143.1445491 2.817 143.37081270000002 3.677 151.5499539 2.793)
Error minima by case: (78.0 2 37.0 2 16.0 1 97.0 1 19.0 1 0.0 0 18.7356 9 19.0 1 26.8207 2 38.1353 9 45.0 2 38.0 2 24.0 2 3.0 1 62.0 2 29.0 2 42.0 2 62.4514 10 30.0 1 17.0 1 75.2834 2 47.0 1 81.0 1 81.0 3 90.0 1)
Average genome size in population (length): 23.265
Average program size in population (points): 24.265
Average percent parens in population: 0.043
Minimum age in population: 6.5
Maximum age in population: 11.0625
Average age in population: 8.96528125
Median age in population: 8.96875
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 61
Genome diversity (% unique Plush genomes):	 0.411
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 61
Syntactic diversity (% unique Push programs):	 0.411
Total error diversity:				 0.025
Error (vector) diversity:			 0.027
Behavioral diversity:				 0.028
--- Run Statistics ---
Number of program evaluations used so far: 7000
Number of point (instruction) evaluations so far: 7118255
--- Timings ---
Current time: 1529615472289 milliseconds
Total Time:          22.5 seconds
Initialization:       0.1 seconds,  0.5%
Reproduction:         8.6 seconds, 38.4%
Fitness Testing:     11.7 seconds, 52.1%
Report:               2.0 seconds,  9.0%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 6
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 7
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 7
;;******************************
;; -*- Number IO problem report - generation 7
Test total error for best: 56100.0
Test mean error for best: 28.05000
;;------------------------------
Outputs of best individual on training cases:
Correct output: 150.3639690164 | Program output: 
64.3639690164
Correct output: -129.2046261   | Program output: 
-95.2046261  
Correct output: 43.6336388837  | Program output: 
56.6336388837
Correct output: 168.6824809869 | Program output: 
63.6824809869
Correct output: -24.6347316794 | Program output: 
-8.6347316794
Correct output: 39.9291320135  | Program output: 
36.9291320135
Correct output: -20.9190282536 | Program output: 
42.0809717464
Correct output: 61.9263871894  | Program output: 
77.9263871894
Correct output: -28.8395473609 | Program output: 
-4.8395473609
Correct output: -39.146556962  | Program output: 
18.853443038 
Correct output: -134.9331989268 | Program output: 
-92.9331989268
Correct output: -126.4496738486 | Program output: 
-91.4496738486
Correct output: -51.218440095  | Program output: 
-83.218440095
Correct output: 45.5895106217  | Program output: 
45.5895106217
Correct output: 136.6637618296 | Program output: 
66.6637618296
Correct output: -104.5625509424 | Program output: 
-78.5625509424
Correct output: 80.9125656746  | Program output: 
30.9125656746
Correct output: -63.4657032446 | Program output: 
18.5342967554
Correct output: -52.106433034  | Program output: 
-25.106433034
Correct output: -99.9152304515 | Program output: 
-85.9152304515
Correct output: -78.2834351958 | Program output: 
-3.2834351958
Correct output: -64.2911152024 | Program output: 
-20.2911152024
Correct output: 93.5722006381  | Program output: 
4.5722006381 
Correct output: 141.452540764  | Program output: 
52.452540764 
Correct output: 102.2088941323 | Program output: 
4.2088941323 
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_max} {:instruction float_flush} {:instruction integer_div} {:instruction integer_add} {:instruction print_float} {:instruction print_newline} {:instruction in1} {:instruction integer_yank} {:instruction integer_dup_times} {:instruction integer_dup_items} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_dup_items} {:instruction float_dec} {:instruction float_dec} {:instruction integer_div} {:instruction integer_dup_items} {:instruction float_dec} {:instruction float_dec} {:instruction integer_div} {:instruction print_float} {:instruction float_rot} {:instruction integer_dup_items} {:instruction float_cos} {:instruction tagged_490} {:instruction integer_min} {:instruction integer_pop})
Best program: (integer_max float_flush integer_div integer_add print_float print_newline in1 integer_yank integer_dup_times integer_dup_items float_dec float_dec float_dec float_dec integer_dup_items float_dec float_dec integer_div integer_dup_items float_dec float_dec integer_div print_float float_rot integer_dup_items float_cos tagged_490 integer_min integer_pop)
Errors: [86.0 3 34.0 4 13.0 3 105.0 2 16.0 3 3.0 2 63.0 12 16.0 3 24.0 3 58.0 12 42.0 4 35.0 4 32.0 3 0.0 1 70.0 2 26.0 4 50.0 2 82.0 13 27.0 3 14.0 3 75.0 3 44.0 3 89.0 2 89.0 3 98.0 3]
Total: 1291.0
Mean: 25.82
Genome size: 29
Size: 30
Percent parens: 0.033
--- Population Statistics ---
Average total errors in population: 2543.3509480999996
Median total errors in population: 1332.0
Error averages by case: (127.99320120000002 3.467 87.23014789999999 4.039 66.85312110000001 3.378 146.04579650000002 2.651 69.40758309999998 2.573 51.754244 3.324 113.71521449999999 12.166 69.83613079999999 2.722 76.9908671 5.569 109.1158136 12.098 94.7868211 4.413 88.151081 4.367 76.4444494 3.363 54.6066643 2.639 112.7771523 3.633 79.47811440000001 3.742 93.5498427 3.387 131.94304329999997 13.054 79.9752951 3.361 68.1827856 3.249 125.61352149999998 12.693 96.10384199999999 3.261 130.4212069 2.647 130.75685600000003 3.592 138.9711527 3.259)
Error minima by case: (10.636 2 34.0 2 13.0 1 30.3175 1 11.7835 1 0.0 0 16.7324 10 16.0 1 23.8397 2 28.5257 9 39.9332 3 35.0 2 24.0 2 0.0 1 7.6638 2 26.0 2 8.0874 2 59.6341 11 12.8936 1 14.0 1 74.2876 2 34.7089 1 73.4278 1 25.5475 3 82.7911 1)
Average genome size in population (length): 23.484
Average program size in population (points): 24.484
Average percent parens in population: 0.042
Minimum age in population: 7.875
Maximum age in population: 12.46875
Average age in population: 10.411515625
Median age in population: 10.4375
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 107
Genome diversity (% unique Plush genomes):	 0.383
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 107
Syntactic diversity (% unique Push programs):	 0.383
Total error diversity:				 0.029
Error (vector) diversity:			 0.033
Behavioral diversity:				 0.034
--- Run Statistics ---
Number of program evaluations used so far: 8000
Number of point (instruction) evaluations so far: 7705380
--- Timings ---
Current time: 1529615475082 milliseconds
Total Time:          25.2 seconds
Initialization:       0.1 seconds,  0.4%
Reproduction:         9.7 seconds, 38.4%
Fitness Testing:     13.1 seconds, 51.9%
Report:               2.3 seconds,  9.2%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 7
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 8
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 8
;;******************************
;; -*- Number IO problem report - generation 8
Test total error for best: 55345.0
Test mean error for best: 27.67250
;;------------------------------
Outputs of best individual on training cases:
Correct output: 150.3639690164 | Program output: 64.3639690164 
Correct output: -129.2046261   | Program output: -95.2046261   
Correct output: 43.6336388837  | Program output: 56.6336388837 
Correct output: 168.6824809869 | Program output: 63.6824809869 
Correct output: -24.6347316794 | Program output: -8.6347316794 
Correct output: 39.9291320135  | Program output: 36.9291320135 
Correct output: -20.9190282536 | Program output: 42.0809717464 
Correct output: 61.9263871894  | Program output: 77.9263871894 
Correct output: -28.8395473609 | Program output: -4.8395473609 
Correct output: -39.146556962  | Program output: 18.853443038  
Correct output: -134.9331989268 | Program output: -92.9331989268
Correct output: -126.4496738486 | Program output: -91.4496738486
Correct output: -51.218440095  | Program output: -83.218440095 
Correct output: 45.5895106217  | Program output: 45.5895106217 
Correct output: 136.6637618296 | Program output: 66.6637618296 
Correct output: -104.5625509424 | Program output: -78.5625509424
Correct output: 80.9125656746  | Program output: 30.9125656746 
Correct output: -63.4657032446 | Program output: 18.5342967554 
Correct output: -52.106433034  | Program output: -25.106433034 
Correct output: -99.9152304515 | Program output: -85.9152304515
Correct output: -78.2834351958 | Program output: -3.2834351958 
Correct output: -64.2911152024 | Program output: -20.2911152024
Correct output: 93.5722006381  | Program output: 4.5722006381  
Correct output: 141.452540764  | Program output: 52.452540764  
Correct output: 102.2088941323 | Program output: 4.2088941323  
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_max} {:instruction float_flush} {:instruction integer_div} {:instruction integer_add} {:instruction print_float} {:instruction float_dec} {:instruction in1} {:instruction integer_yank} {:instruction integer_dup_times} {:instruction integer_dup_items} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_dup_items} {:instruction float_dec} {:instruction float_dec} {:instruction integer_div} {:instruction integer_dup_items} {:instruction float_dec} {:instruction float_dec} {:instruction integer_div} {:instruction print_float} {:instruction float_rot} {:instruction integer_dup_items} {:instruction float_cos} {:instruction tagged_490} {:instruction integer_min} {:instruction integer_pop})
Best program: (integer_max float_flush integer_div integer_add print_float float_dec in1 integer_yank integer_dup_times integer_dup_items float_dec float_dec float_dec float_dec integer_dup_items float_dec float_dec integer_div integer_dup_items float_dec float_dec integer_div print_float float_rot integer_dup_items float_cos tagged_490 integer_min integer_pop)
Errors: [86.0 3 34.0 3 13.0 2 105.0 2 16.0 2 3.0 1 63.0 11 16.0 2 24.0 2 58.0 12 42.0 3 35.0 3 32.0 2 0.0 0 70.0 2 26.0 3 50.0 1 82.0 13 27.0 2 14.0 2 75.0 2 44.0 2 89.0 2 89.0 3 98.0 3]
Total: 1274.0
Mean: 25.48
Genome size: 29
Size: 30
Percent parens: 0.033
--- Population Statistics ---
Average total errors in population: 2795.8190739
Median total errors in population: 1332.0
Error averages by case: (138.5866583 3.724 96.6728601 4.276 76.90489240000001 3.58 156.42611370000003 2.777 79.500754 2.956 62.200793600000004 3.216 123.4886716 12.191 79.8030646 2.918 86.99376699999999 3.902 118.82690609999999 12.131 104.15896569999998 4.629 97.59270610000002 4.613 87.72718419999998 3.517 64.7474752 2.638 123.58365629999999 3.712 89.0950723 3.961 104.68381189999998 3.571 141.31502270000001 13.096 89.82388259999998 3.447 77.88818590000001 3.634 134.79519100000002 10.738 105.74777669999999 3.637 141.2256361 2.755 141.3677393 3.676 149.6752865 3.692)
Error minima by case: (11.636 2 33.0 2 12.0 1 31.3175 1 15.0 1 0.0 0 15.9021 10 15.0 1 21.8397 1 31.1257 10 40.9332 2 34.0 2 19.0539 1 0.0 0 6.6638 2 25.0 2 9.0874 1 6.8066 11 11.8936 1 13.0 2 8.0111 2 5.9812 2 74.4278 1 26.5475 2 83.7911 1)
Average genome size in population (length): 24.796
Average program size in population (points): 25.796
Average percent parens in population: 0.040
Minimum age in population: 9.6875
Maximum age in population: 14.0859375
Average age in population: 11.8884296875
Median age in population: 11.921875
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 83
Genome diversity (% unique Plush genomes):	 0.422
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 83
Syntactic diversity (% unique Push programs):	 0.422
Total error diversity:				 0.031
Error (vector) diversity:			 0.034
Behavioral diversity:				 0.036
--- Run Statistics ---
Number of program evaluations used so far: 9000
Number of point (instruction) evaluations so far: 8325280
--- Timings ---
Current time: 1529615477884 milliseconds
Total Time:          28.0 seconds
Initialization:       0.1 seconds,  0.4%
Reproduction:        10.8 seconds, 38.5%
Fitness Testing:     14.5 seconds, 51.6%
Report:               2.7 seconds,  9.5%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 8
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 9
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 9
;;******************************
;; -*- Number IO problem report - generation 9
Test total error for best: 55761.0
Test mean error for best: 27.88050
;;------------------------------
Outputs of best individual on training cases:
Correct output: 150.3639690164 | Program output: 61.3639690164 
Correct output: -129.2046261   | Program output: -98.2046261   
Correct output: 43.6336388837  | Program output: 53.6336388837 
Correct output: 168.6824809869 | Program output: 60.6824809869 
Correct output: -24.6347316794 | Program output: -11.6347316794
Correct output: 39.9291320135  | Program output: 33.9291320135 
Correct output: -20.9190282536 | Program output: 39.0809717464 
Correct output: 61.9263871894  | Program output: 74.9263871894 
Correct output: -28.8395473609 | Program output: -7.8395473609 
Correct output: -39.146556962  | Program output: 15.853443038  
Correct output: -134.9331989268 | Program output: -95.9331989268
Correct output: -126.4496738486 | Program output: -94.4496738486
Correct output: -51.218440095  | Program output: -86.218440095 
Correct output: 45.5895106217  | Program output: 42.5895106217 
Correct output: 136.6637618296 | Program output: 63.6637618296 
Correct output: -104.5625509424 | Program output: -81.5625509424
Correct output: 80.9125656746  | Program output: 27.9125656746 
Correct output: -63.4657032446 | Program output: 15.5342967554 
Correct output: -52.106433034  | Program output: -28.106433034 
Correct output: -99.9152304515 | Program output: -88.9152304515
Correct output: -78.2834351958 | Program output: -6.2834351958 
Correct output: -64.2911152024 | Program output: -23.2911152024
Correct output: 93.5722006381  | Program output: 1.5722006381  
Correct output: 141.452540764  | Program output: 49.452540764  
Correct output: 102.2088941323 | Program output: 1.2088941323  
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_max} {:instruction float_flush} {:instruction integer_div} {:instruction integer_add} {:instruction print_float} {:instruction float_dec} {:instruction in1} {:instruction integer_yank} {:instruction integer_dup_times} {:instruction integer_dup_items} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_dup_items} {:instruction float_dec} {:instruction float_dec} {:instruction integer_div} {:instruction float_dec} {:instruction integer_dup_items} {:instruction float_dec} {:instruction float_dec} {:instruction integer_div} {:instruction integer_dup_items} {:instruction float_dec} {:instruction float_dec} {:instruction integer_div} {:instruction print_float} {:instruction float_rot} {:instruction integer_dup_items} {:instruction float_cos} {:instruction tagged_490} {:instruction integer_min} {:instruction integer_pop})
Best program: (integer_max float_flush integer_div integer_add print_float float_dec in1 integer_yank integer_dup_times integer_dup_items float_dec float_dec float_dec float_dec integer_dup_items float_dec float_dec integer_div float_dec integer_dup_items float_dec float_dec integer_div integer_dup_items float_dec float_dec integer_div print_float float_rot integer_dup_items float_cos tagged_490 integer_min integer_pop)
Errors: [89.0 3 31.0 3 10.0 1 108.0 2 13.0 2 6.0 1 60.0 12 13.0 2 21.0 2 55.0 12 39.0 3 32.0 3 35.0 2 3.0 1 73.0 2 23.0 3 53.0 2 79.0 13 24.0 2 11.0 2 72.0 2 41.0 2 92.0 2 92.0 2 101.0 2]
Total: 1259.0
Mean: 25.18
Genome size: 34
Size: 35
Percent parens: 0.029
--- Population Statistics ---
Average total errors in population: 2781.8798579
Median total errors in population: 1306.0
Error averages by case: (140.0520286 3.751 96.06491079999999 3.931 75.83479460000001 3.436 157.8928683 2.806 78.4494055 3.309 62.375012999999996 2.362 122.14468989999999 12.197 78.79141649999998 3.269 85.93127650000001 3.55 117.62600009999997 12.102 103.55523050000001 4.479 96.9701817 4.467 88.8918709 3.237 63.81496570000001 2.406 125.00317529999998 3.626 88.40365770000001 4.309 105.94546599999998 3.337 140.11559540000002 13.116 88.886777 3.091 77.20090420000001 3.497 133.7369345 5.563 104.77986950000002 3.498 141.36452339999997 2.762 142.76133610000002 3.68 149.8049662 3.701)
Error minima by case: (78.0 2 30.0 2 6.9149 1 97.0 1 11.7835 1 0.0 0 14.7356 9 12.0 1 20.0 1 24.9981 9 38.0 3 31.0 2 12.9262 1 0.0 0 62.0 2 22.0 2 42.0 1 0.679 10 12.0382 1 10.0 1 14.1388 2 0.1464 1 33.0 1 81.0 2 24.0 1)
Average genome size in population (length): 27.412
Average program size in population (points): 28.412
Average percent parens in population: 0.036
Minimum age in population: 11.28125
Maximum age in population: 15.2421875
Average age in population: 13.4101953125
Median age in population: 13.4609375
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 70
Genome diversity (% unique Plush genomes):	 0.461
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 70
Syntactic diversity (% unique Push programs):	 0.461
Total error diversity:				 0.044
Error (vector) diversity:			 0.046
Behavioral diversity:				 0.047
--- Run Statistics ---
Number of program evaluations used so far: 10000
Number of point (instruction) evaluations so far: 9010580
--- Timings ---
Current time: 1529615480741 milliseconds
Total Time:          30.9 seconds
Initialization:       0.1 seconds,  0.4%
Reproduction:        11.9 seconds, 38.7%
Fitness Testing:     15.9 seconds, 51.4%
Report:               3.0 seconds,  9.6%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 9
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 10
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 10
;;******************************
;; -*- Number IO problem report - generation 10
Test total error for best: 55895.0
Test mean error for best: 27.94750
;;------------------------------
Outputs of best individual on training cases:
Correct output: 150.3639690164 | Program output: 60.3639690164 
Correct output: -129.2046261   | Program output: -99.2046261   
Correct output: 43.6336388837  | Program output: 52.6336388837 
Correct output: 168.6824809869 | Program output: 59.6824809869 
Correct output: -24.6347316794 | Program output: -12.6347316794
Correct output: 39.9291320135  | Program output: 32.9291320135 
Correct output: -20.9190282536 | Program output: 38.0809717464 
Correct output: 61.9263871894  | Program output: 73.9263871894 
Correct output: -28.8395473609 | Program output: -8.8395473609 
Correct output: -39.146556962  | Program output: 14.853443038  
Correct output: -134.9331989268 | Program output: -96.9331989268
Correct output: -126.4496738486 | Program output: -95.4496738486
Correct output: -51.218440095  | Program output: -87.218440095 
Correct output: 45.5895106217  | Program output: 41.5895106217 
Correct output: 136.6637618296 | Program output: 62.6637618296 
Correct output: -104.5625509424 | Program output: -82.5625509424
Correct output: 80.9125656746  | Program output: 26.9125656746 
Correct output: -63.4657032446 | Program output: 14.5342967554 
Correct output: -52.106433034  | Program output: -29.106433034 
Correct output: -99.9152304515 | Program output: -89.9152304515
Correct output: -78.2834351958 | Program output: -7.2834351958 
Correct output: -64.2911152024 | Program output: -24.2911152024
Correct output: 93.5722006381  | Program output: 0.5722006381  
Correct output: 141.452540764  | Program output: 48.452540764  
Correct output: 102.2088941323 | Program output: 0.2088941323  
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_fromfloat} {:instruction float_min} {:instruction integer_dup_items} {:instruction integer_fromfloat} {:instruction float_swap} {:instruction integer_div} {:instruction integer_add} {:instruction print_float} {:instruction print_integer} {:instruction in1} {:instruction integer_yank} {:instruction integer_dup_times} {:instruction integer_dup_items} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_div} {:instruction float_sub} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_div} {:instruction integer_yank} {:instruction integer_dup_times} {:instruction integer_dup_items} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_div} {:instruction print_float} {:instruction float_rot} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_div} {:instruction print_float} {:instruction float_rot} {:instruction integer_dup_items} {:instruction float_cos} {:instruction tagged_490} {:instruction integer_stackdepth} {:instruction integer_pop})
Best program: (integer_fromfloat float_min integer_dup_items integer_fromfloat float_swap integer_div integer_add print_float print_integer in1 integer_yank integer_dup_times integer_dup_items float_dec float_dec float_dec float_dec integer_div float_sub float_dec float_dec float_dec float_dec integer_div integer_yank integer_dup_times integer_dup_items float_dec float_dec float_dec float_dec integer_div print_float float_rot float_dec float_dec float_dec integer_div print_float float_rot integer_dup_items float_cos tagged_490 integer_stackdepth integer_pop)
Errors: [90.0 2 30.0 2 9.0 2 109.0 3 12.0 2 7.0 1 59.0 12 12.0 2 20.0 1 54.0 12 38.0 3 31.0 3 36.0 2 4.0 1 74.0 3 22.0 3 54.0 2 78.0 13 23.0 2 10.0 1 71.0 1 40.0 1 93.0 2 93.0 2 102.0 2]
Total: 1251.0
Mean: 25.02
Genome size: 45
Size: 46
Percent parens: 0.022
--- Population Statistics ---
Average total errors in population: 2735.3031585999997
Median total errors in population: 1291.0
Error averages by case: (140.50758480000002 3.664 93.56396299999999 3.876 73.36371919999999 3.281 158.36776220000002 2.763 75.9564207 3.296 61.488721399999996 2.121 119.73209179999999 12.114 76.30354200000001 3.262 83.4444361 3.24 115.2106231 12.056 101.0672018 4.241 94.47665640000001 4.267 89.34897000000002 3.189 61.41357309999999 1.946 125.4854777 3.279 85.914714 4.279 106.40516119999998 2.882 137.7735976 13.122 86.4221852 3.043 74.68773180000001 3.335 131.37236789999997 3.51 102.44893370000003 3.337 139.3916349 2.663 143.2378367 3.515 148.0032523 3.634)
Error minima by case: (78.0 2 29.0 2 8.0 1 97.0 1 11.0 1 0.0 0 11.2958 7 11.0 1 18.2835 1 29.8979 9 37.0 2 30.0 2 24.0 1 0.0 0 62.0 2 21.0 2 42.0 1 54.3862 10 22.0 1 9.0 1 67.4442 1 39.0 1 30.0 1 81.0 2 24.0 2)
Average genome size in population (length): 30.335
Average program size in population (points): 31.335
Average percent parens in population: 0.032
Minimum age in population: 12.296875
Maximum age in population: 16.611328125
Average age in population: 14.868966796875
Median age in population: 14.8935546875
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 71
Genome diversity (% unique Plush genomes):	 0.469
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 71
Syntactic diversity (% unique Push programs):	 0.469
Total error diversity:				 0.046
Error (vector) diversity:			 0.047
Behavioral diversity:				 0.049
--- Run Statistics ---
Number of program evaluations used so far: 11000
Number of point (instruction) evaluations so far: 9768980
--- Timings ---
Current time: 1529615483548 milliseconds
Total Time:          33.6 seconds
Initialization:       0.1 seconds,  0.3%
Reproduction:        13.0 seconds, 38.6%
Fitness Testing:     17.3 seconds, 51.3%
Report:               3.3 seconds,  9.7%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 10
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 11
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 11
;;******************************
;; -*- Number IO problem report - generation 11
Test total error for best: 55895.0
Test mean error for best: 27.94750
;;------------------------------
Outputs of best individual on training cases:
Correct output: 150.3639690164 | Program output: 60.3639690164 
Correct output: -129.2046261   | Program output: -99.2046261   
Correct output: 43.6336388837  | Program output: 52.6336388837 
Correct output: 168.6824809869 | Program output: 59.6824809869 
Correct output: -24.6347316794 | Program output: -12.6347316794
Correct output: 39.9291320135  | Program output: 32.9291320135 
Correct output: -20.9190282536 | Program output: 38.0809717464 
Correct output: 61.9263871894  | Program output: 73.9263871894 
Correct output: -28.8395473609 | Program output: -8.8395473609 
Correct output: -39.146556962  | Program output: 14.853443038  
Correct output: -134.9331989268 | Program output: -96.9331989268
Correct output: -126.4496738486 | Program output: -95.4496738486
Correct output: -51.218440095  | Program output: -87.218440095 
Correct output: 45.5895106217  | Program output: 41.5895106217 
Correct output: 136.6637618296 | Program output: 62.6637618296 
Correct output: -104.5625509424 | Program output: -82.5625509424
Correct output: 80.9125656746  | Program output: 26.9125656746 
Correct output: -63.4657032446 | Program output: 14.5342967554 
Correct output: -52.106433034  | Program output: -29.106433034 
Correct output: -99.9152304515 | Program output: -89.9152304515
Correct output: -78.2834351958 | Program output: -7.2834351958 
Correct output: -64.2911152024 | Program output: -24.2911152024
Correct output: 93.5722006381  | Program output: 0.5722006381  
Correct output: 141.452540764  | Program output: 48.452540764  
Correct output: 102.2088941323 | Program output: 0.2088941323  
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_fromfloat} {:instruction float_min} {:instruction integer_dup_items} {:instruction integer_fromfloat} {:instruction float_swap} {:instruction integer_div} {:instruction integer_add} {:instruction print_float} {:instruction print_integer} {:instruction in1} {:instruction integer_yank} {:instruction integer_dup_times} {:instruction integer_dup_items} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_div} {:instruction float_sub} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_div} {:instruction integer_yank} {:instruction integer_dup_times} {:instruction integer_dup_items} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_div} {:instruction print_float} {:instruction float_rot} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_div} {:instruction print_float} {:instruction float_rot} {:instruction integer_dup_items} {:instruction float_cos} {:instruction tagged_490} {:instruction integer_stackdepth} {:instruction integer_pop})
Best program: (integer_fromfloat float_min integer_dup_items integer_fromfloat float_swap integer_div integer_add print_float print_integer in1 integer_yank integer_dup_times integer_dup_items float_dec float_dec float_dec float_dec integer_div float_sub float_dec float_dec float_dec float_dec integer_div integer_yank integer_dup_times integer_dup_items float_dec float_dec float_dec float_dec integer_div print_float float_rot float_dec float_dec float_dec integer_div print_float float_rot integer_dup_items float_cos tagged_490 integer_stackdepth integer_pop)
Errors: [90.0 2 30.0 2 9.0 2 109.0 3 12.0 2 7.0 1 59.0 12 12.0 2 20.0 1 54.0 12 38.0 3 31.0 3 36.0 2 4.0 1 74.0 3 22.0 3 54.0 2 78.0 13 23.0 2 10.0 1 71.0 1 40.0 1 93.0 2 93.0 2 102.0 2]
Total: 1251.0
Mean: 25.02
Genome size: 45
Size: 46
Percent parens: 0.022
--- Population Statistics ---
Average total errors in population: 2692.603296499999
Median total errors in population: 1283.0
Error averages by case: (140.1610182 3.558 91.4175587 3.943 70.6099826 3.153 158.0755429 2.833 73.6139797 3.227 61.437095799999994 2.263 116.3986626 11.852 73.2061214 3.179 81.1101577 3.136 112.440818 12.015 98.9253354 3.985 92.31806900000001 4.067 89.70281249999998 3.116 59.6278677 1.921 125.13639369999999 3.319 83.72082029999999 4.133 106.0356472 2.85 135.03027509999998 13.064 84.13070389999999 3.175 72.5002947 3.169 129.07677950000001 3.314 100.07160180000001 3.184 139.2027089 2.665 142.8959787 3.274 147.73707050000002 3.625)
Error minima by case: (80.0 2 25.0 2 4.0 1 99.0 1 7.0 1 0.0 0 10.7356 10 7.0 1 15.0 1 30.1353 9 33.0 2 26.0 2 21.6134 1 0.0 0 64.0 2 17.0 2 44.0 1 54.4514 11 18.0 1 5.0 1 66.0 1 35.0 1 10.0 1 83.0 2 1.0 1)
Average genome size in population (length): 32.541
Average program size in population (points): 33.541
Average percent parens in population: 0.030
Minimum age in population: 13.640625
Maximum age in population: 18.1142578125
Average age in population: 16.4221787109375
Median age in population: 16.4755859375
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 36
Genome diversity (% unique Plush genomes):	 0.495
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 36
Syntactic diversity (% unique Push programs):	 0.495
Total error diversity:				 0.051
Error (vector) diversity:			 0.055
Behavioral diversity:				 0.056
--- Run Statistics ---
Number of program evaluations used so far: 12000
Number of point (instruction) evaluations so far: 10582530
--- Timings ---
Current time: 1529615486492 milliseconds
Total Time:          36.6 seconds
Initialization:       0.1 seconds,  0.3%
Reproduction:        14.1 seconds, 38.7%
Fitness Testing:     18.7 seconds, 51.0%
Report:               3.7 seconds, 10.0%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 11
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 12
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 12
;;******************************
;; -*- Number IO problem report - generation 12
Test total error for best: 56989.0
Test mean error for best: 28.49450
;;------------------------------
Outputs of best individual on training cases:
Correct output: 150.3639690164 | Program output: 54.3639690164 
Correct output: -129.2046261   | Program output: -105.2046261  
Correct output: 43.6336388837  | Program output: 46.6336388837 
Correct output: 168.6824809869 | Program output: 53.6824809869 
Correct output: -24.6347316794 | Program output: -18.6347316794
Correct output: 39.9291320135  | Program output: 26.9291320135 
Correct output: -20.9190282536 | Program output: 32.0809717464 
Correct output: 61.9263871894  | Program output: 67.9263871894 
Correct output: -28.8395473609 | Program output: -14.8395473609
Correct output: -39.146556962  | Program output: 8.853443038   
Correct output: -134.9331989268 | Program output: -102.9331989268
Correct output: -126.4496738486 | Program output: -101.4496738486
Correct output: -51.218440095  | Program output: -93.218440095 
Correct output: 45.5895106217  | Program output: 35.5895106217 
Correct output: 136.6637618296 | Program output: 56.6637618296 
Correct output: -104.5625509424 | Program output: -88.5625509424
Correct output: 80.9125656746  | Program output: 20.9125656746 
Correct output: -63.4657032446 | Program output: 8.5342967554  
Correct output: -52.106433034  | Program output: -35.106433034 
Correct output: -99.9152304515 | Program output: -95.9152304515
Correct output: -78.2834351958 | Program output: -13.2834351958
Correct output: -64.2911152024 | Program output: -30.2911152024
Correct output: 93.5722006381  | Program output: -5.4277993619 
Correct output: 141.452540764  | Program output: 42.452540764  
Correct output: 102.2088941323 | Program output: -5.7911058677 
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_max} {:instruction float_flush} {:instruction integer_div} {:instruction integer_add} {:instruction print_float} {:instruction float_dec} {:instruction in1} {:instruction integer_yank} {:instruction integer_dup_times} {:instruction integer_dup_items} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_dup_items} {:instruction float_dec} {:instruction float_dec} {:instruction integer_div} {:instruction integer_dup_items} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_div} {:instruction float_sub} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_div} {:instruction integer_yank} {:instruction integer_dup_times} {:instruction integer_dup_items} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_div} {:instruction print_float} {:instruction float_rot} {:instruction float_dec} {:instruction float_dec} {:instruction integer_div} {:instruction print_float} {:instruction float_rot} {:instruction integer_dup_items} {:instruction float_cos} {:instruction tagged_490} {:instruction integer_min} {:instruction integer_pop})
Best program: (integer_max float_flush integer_div integer_add print_float float_dec in1 integer_yank integer_dup_times integer_dup_items float_dec float_dec float_dec float_dec integer_dup_items float_dec float_dec integer_div integer_dup_items float_dec float_dec float_dec float_dec integer_div float_sub float_dec float_dec float_dec float_dec integer_div integer_yank integer_dup_times integer_dup_items float_dec float_dec float_dec float_dec integer_div print_float float_rot float_dec float_dec integer_div print_float float_rot integer_dup_items float_cos tagged_490 integer_min integer_pop)
Errors: [96.0 2 24.0 2 3.0 1 115.0 3 6.0 2 13.0 2 53.0 11 6.0 1 14.0 2 48.0 12 32.0 2 25.0 2 42.0 2 10.0 1 80.0 2 16.0 3 60.0 1 72.0 12 17.0 2 4.0 1 65.0 2 34.0 2 99.0 10 99.0 2 108.0 13]
Total: 1236.0
Mean: 24.72
Genome size: 50
Size: 51
Percent parens: 0.020
--- Population Statistics ---
Average total errors in population: 3077.6926639999997
Median total errors in population: 1269.0
Error averages by case: (157.15591129999999 3.539 105.124719 3.664 85.2553668 2.976 174.6607083 3.235 87.798071 3.179 80.17139780000001 2.25 130.84961040000002 11.824 88.15416640000002 3.089 95.1474602 2.949 126.41186080000001 12.071 112.50170870000001 3.98 106.0185714 4.093 106.7684206 3.128 77.57152710000001 2.024 142.3639978 3.494 97.591476 4.068 123.58439890000001 2.896 148.61451949999997 13.003 98.0885412 3.135 86.54745650000001 2.91 142.313849 2.985 113.77515749999999 2.971 157.59649879999998 3.241 159.83418670000003 3.258 165.9300823 3.901)
Error minima by case: (79.0 2 22.0 2 1.0 1 98.0 2 4.0 1 0.0 0 6.4603 10 4.0 1 12.0 1 28.0249 9 30.0 2 23.0 2 25.0 1 0.0 0 63.0 2 14.0 2 43.0 1 51.8903 10 15.0 1 2.0 1 63.0 1 32.0 1 0.0 1 82.0 2 9.0 2)
Average genome size in population (length): 34.576
Average program size in population (points): 35.576
Average percent parens in population: 0.029
Minimum age in population: 14.640625
Maximum age in population: 19.58056640625
Average age in population: 17.93163134765625
Median age in population: 18.006103515625
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 70
Genome diversity (% unique Plush genomes):	 0.493
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 70
Syntactic diversity (% unique Push programs):	 0.493
Total error diversity:				 0.044
Error (vector) diversity:			 0.048
Behavioral diversity:				 0.05
--- Run Statistics ---
Number of program evaluations used so far: 13000
Number of point (instruction) evaluations so far: 11446980
--- Timings ---
Current time: 1529615489409 milliseconds
Total Time:          39.5 seconds
Initialization:       0.1 seconds,  0.3%
Reproduction:        15.3 seconds, 38.7%
Fitness Testing:     20.1 seconds, 50.8%
Report:               4.0 seconds, 10.2%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 12
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 13
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 13
;;******************************
;; -*- Number IO problem report - generation 13
Test total error for best: 57739.0
Test mean error for best: 28.86950
;;------------------------------
Outputs of best individual on training cases:
Correct output: 150.3639690164 | Program output: 51.3639690164 
Correct output: -129.2046261   | Program output: -108.2046261  
Correct output: 43.6336388837  | Program output: 43.6336388837 
Correct output: 168.6824809869 | Program output: 50.6824809869 
Correct output: -24.6347316794 | Program output: -21.6347316794
Correct output: 39.9291320135  | Program output: 23.9291320135 
Correct output: -20.9190282536 | Program output: 29.0809717464 
Correct output: 61.9263871894  | Program output: 64.9263871894 
Correct output: -28.8395473609 | Program output: -17.8395473609
Correct output: -39.146556962  | Program output: 5.853443038   
Correct output: -134.9331989268 | Program output: -105.9331989268
Correct output: -126.4496738486 | Program output: -104.4496738486
Correct output: -51.218440095  | Program output: -96.218440095 
Correct output: 45.5895106217  | Program output: 32.5895106217 
Correct output: 136.6637618296 | Program output: 53.6637618296 
Correct output: -104.5625509424 | Program output: -91.5625509424
Correct output: 80.9125656746  | Program output: 17.9125656746 
Correct output: -63.4657032446 | Program output: 5.5342967554  
Correct output: -52.106433034  | Program output: -38.106433034 
Correct output: -99.9152304515 | Program output: -98.9152304515
Correct output: -78.2834351958 | Program output: -16.2834351958
Correct output: -64.2911152024 | Program output: -33.2911152024
Correct output: 93.5722006381  | Program output: -8.4277993619 
Correct output: 141.452540764  | Program output: 39.452540764  
Correct output: 102.2088941323 | Program output: -8.7911058677 
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_max} {:instruction float_flush} {:instruction integer_div} {:instruction integer_add} {:instruction print_float} {:instruction float_dec} {:instruction in1} {:instruction integer_yank} {:instruction integer_dup_items} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_div} {:instruction float_dec} {:instruction float_dec} {:instruction integer_dup_times} {:instruction integer_dup_items} {:instruction float_dec} {:instruction float_dec} {:instruction integer_dup_items} {:instruction float_dec} {:instruction float_dec} {:instruction integer_div} {:instruction float_sub} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_div} {:instruction float_dec} {:instruction float_dec} {:instruction integer_dup_times} {:instruction integer_dup_items} {:instruction float_dec} {:instruction float_dec} {:instruction integer_div} {:instruction integer_dup_items} {:instruction float_dec} {:instruction integer_dup_items} {:instruction float_dec} {:instruction float_dec} {:instruction integer_div} {:instruction print_float} {:instruction float_rot} {:instruction integer_dup_items} {:instruction float_cos} {:instruction tagged_490} {:instruction integer_min} {:instruction integer_pop})
Best program: (integer_max float_flush integer_div integer_add print_float float_dec in1 integer_yank integer_dup_items float_dec float_dec float_dec float_dec integer_div float_dec float_dec integer_dup_times integer_dup_items float_dec float_dec integer_dup_items float_dec float_dec integer_div float_sub float_dec float_dec float_dec float_dec integer_div float_dec float_dec integer_dup_times integer_dup_items float_dec float_dec integer_div integer_dup_items float_dec integer_dup_items float_dec float_dec integer_div print_float float_rot integer_dup_items float_cos tagged_490 integer_min integer_pop)
Errors: [99.0 2 21.0 2 0.0 0 118.0 3 3.0 1 16.0 2 50.0 11 3.0 1 11.0 2 45.0 12 29.0 2 22.0 2 45.0 2 13.0 2 83.0 2 13.0 3 63.0 2 69.0 12 14.0 2 1.0 1 62.0 2 31.0 2 102.0 10 102.0 3 111.0 13]
Total: 1222.0
Mean: 24.44
Genome size: 50
Size: 51
Percent parens: 0.020
--- Population Statistics ---
Average total errors in population: 2999.801772499999
Median total errors in population: 1259.0
Error averages by case: (155.65683590000003 3.46 101.8254934 3.373 80.49702130000003 2.634 173.29779779999996 3.43 83.64339210000001 3.058 77.7512665 2.179 125.44335989999998 12.07 83.55163839999999 2.921 90.98021070000003 2.813 121.09462929999997 12.066 109.2041188 3.92 102.68796319999997 3.994 105.44135739999999 3.003 75.4996159 2.212 140.8397743 3.594 94.07919070000001 3.944 121.57376130000003 3.015 143.3588598 12.943 94.08130089999999 2.997 83.0890531 2.625 138.2691361 2.826 109.74572570000002 2.786 157.0244378 4.055 158.21545220000002 3.052 165.46037999999996 4.52)
Error minima by case: (46.5771 2 21.0 2 0.0 0 65.5771 1 3.0 1 1.0 1 8.7356 9 3.0 1 9.0932 1 0.3277 7 29.0 2 22.0 2 7.4229 1 0.0 0 30.5771 2 8.0899 2 10.5771 1 25.5329 10 14.0 1 1.0 1 18.1892 1 26.3583 1 38.1343 1 49.5771 1 46.771 1)
Average genome size in population (length): 37.949
Average program size in population (points): 38.949
Average percent parens in population: 0.026
Minimum age in population: 17.1298828125
Maximum age in population: 21.2509765625
Average age in population: 19.43385327148438
Median age in population: 19.48876953125
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 66
Genome diversity (% unique Plush genomes):	 0.542
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 66
Syntactic diversity (% unique Push programs):	 0.542
Total error diversity:				 0.055
Error (vector) diversity:			 0.061
Behavioral diversity:				 0.062
--- Run Statistics ---
Number of program evaluations used so far: 14000
Number of point (instruction) evaluations so far: 12395880
--- Timings ---
Current time: 1529615492309 milliseconds
Total Time:          42.4 seconds
Initialization:       0.1 seconds,  0.3%
Reproduction:        16.4 seconds, 38.6%
Fitness Testing:     21.5 seconds, 50.7%
Report:               4.4 seconds, 10.4%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 13
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 14
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 14
;;******************************
;; -*- Number IO problem report - generation 14
Test total error for best: 57739.0
Test mean error for best: 28.86950
;;------------------------------
Outputs of best individual on training cases:
Correct output: 150.3639690164 | Program output: 51.3639690164 
Correct output: -129.2046261   | Program output: -108.2046261  
Correct output: 43.6336388837  | Program output: 43.6336388837 
Correct output: 168.6824809869 | Program output: 50.6824809869 
Correct output: -24.6347316794 | Program output: -21.6347316794
Correct output: 39.9291320135  | Program output: 23.9291320135 
Correct output: -20.9190282536 | Program output: 29.0809717464 
Correct output: 61.9263871894  | Program output: 64.9263871894 
Correct output: -28.8395473609 | Program output: -17.8395473609
Correct output: -39.146556962  | Program output: 5.853443038   
Correct output: -134.9331989268 | Program output: -105.9331989268
Correct output: -126.4496738486 | Program output: -104.4496738486
Correct output: -51.218440095  | Program output: -96.218440095 
Correct output: 45.5895106217  | Program output: 32.5895106217 
Correct output: 136.6637618296 | Program output: 53.6637618296 
Correct output: -104.5625509424 | Program output: -91.5625509424
Correct output: 80.9125656746  | Program output: 17.9125656746 
Correct output: -63.4657032446 | Program output: 5.5342967554  
Correct output: -52.106433034  | Program output: -38.106433034 
Correct output: -99.9152304515 | Program output: -98.9152304515
Correct output: -78.2834351958 | Program output: -16.2834351958
Correct output: -64.2911152024 | Program output: -33.2911152024
Correct output: 93.5722006381  | Program output: -8.4277993619 
Correct output: 141.452540764  | Program output: 39.452540764  
Correct output: 102.2088941323 | Program output: -8.7911058677 
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_max} {:instruction float_flush} {:instruction integer_div} {:instruction integer_add} {:instruction print_float} {:instruction float_dec} {:instruction in1} {:instruction integer_yank} {:instruction integer_dup_items} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_div} {:instruction float_dec} {:instruction float_dec} {:instruction integer_dup_times} {:instruction integer_dup_items} {:instruction float_dec} {:instruction float_dec} {:instruction integer_dup_items} {:instruction float_dec} {:instruction float_dec} {:instruction integer_div} {:instruction float_sub} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_div} {:instruction float_dec} {:instruction float_dec} {:instruction integer_dup_times} {:instruction integer_dup_items} {:instruction float_dec} {:instruction float_dec} {:instruction integer_div} {:instruction integer_dup_items} {:instruction float_dec} {:instruction integer_dup_items} {:instruction float_dec} {:instruction float_dec} {:instruction integer_div} {:instruction print_float} {:instruction float_rot} {:instruction integer_dup_items} {:instruction float_cos} {:instruction tagged_490} {:instruction integer_min} {:instruction integer_pop})
Best program: (integer_max float_flush integer_div integer_add print_float float_dec in1 integer_yank integer_dup_items float_dec float_dec float_dec float_dec integer_div float_dec float_dec integer_dup_times integer_dup_items float_dec float_dec integer_dup_items float_dec float_dec integer_div float_sub float_dec float_dec float_dec float_dec integer_div float_dec float_dec integer_dup_times integer_dup_items float_dec float_dec integer_div integer_dup_items float_dec integer_dup_items float_dec float_dec integer_div print_float float_rot integer_dup_items float_cos tagged_490 integer_min integer_pop)
Errors: [99.0 2 21.0 2 0.0 0 118.0 3 3.0 1 16.0 2 50.0 11 3.0 1 11.0 2 45.0 12 29.0 2 22.0 2 45.0 2 13.0 2 83.0 2 13.0 3 63.0 2 69.0 12 14.0 2 1.0 1 62.0 2 31.0 2 102.0 10 102.0 3 111.0 13]
Total: 1222.0
Mean: 24.44
Genome size: 50
Size: 51
Percent parens: 0.020
--- Population Statistics ---
Average total errors in population: 2836.2373915999997
Median total errors in population: 1251.0
Error averages by case: (151.58891110000002 3.064 93.9603865 2.919 73.1304991 2.579 169.35662479999996 3.7 75.3944956 2.938 72.61516639999999 2.226 118.29004309999999 12.064 76.22052429999998 2.654 82.7882841 2.44 114.05467079999998 11.983 101.39115660000002 3.68 94.82650559999998 3.745 100.05971529999998 2.814 70.6514627 2.193 136.58286700000002 3.713 86.13005240000001 3.914 117.2250164 2.858 136.46441510000002 12.862 85.96787619999999 2.869 75.06260650000002 2.157 130.47831029999998 2.431 101.750852 2.452 151.59736649999996 5.117 154.14495200000002 2.907 160.1616312 6.064)
Error minima by case: (78.9286 2 21.0 2 0.0 0 97.9286 2 3.0 1 0.0 0 1.796 8 3.0 1 6.7249 1 19.3135 9 29.0 1 22.0 2 15.2826 1 0.0 0 62.9286 2 13.0 2 28.7751 1 3.0353 8 14.0 1 1.0 1 11.7824 1 2.2099 1 27.0 1 81.9286 1 18.0 1)
Average genome size in population (length): 41.937
Average program size in population (points): 42.937
Average percent parens in population: 0.024
Minimum age in population: 18.462890625
Maximum age in population: 22.7686767578125
Average age in population: 20.95841491699219
Median age in population: 20.99267578125
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 76
Genome diversity (% unique Plush genomes):	 0.587
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 76
Syntactic diversity (% unique Push programs):	 0.587
Total error diversity:				 0.052
Error (vector) diversity:			 0.056
Behavioral diversity:				 0.057
--- Run Statistics ---
Number of program evaluations used so far: 15000
Number of point (instruction) evaluations so far: 13444405
--- Timings ---
Current time: 1529615495231 milliseconds
Total Time:          45.3 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        17.5 seconds, 38.6%
Fitness Testing:     22.9 seconds, 50.6%
Report:               4.8 seconds, 10.6%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 14
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 15
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 15
;;******************************
;; -*- Number IO problem report - generation 15
Test total error for best: 58001.0
Test mean error for best: 29.00050
;;------------------------------
Outputs of best individual on training cases:
Correct output: 150.3639690164 | Program output: 50.3639690164 
Correct output: -129.2046261   | Program output: -109.2046261  
Correct output: 43.6336388837  | Program output: 42.6336388837 
Correct output: 168.6824809869 | Program output: 49.6824809869 
Correct output: -24.6347316794 | Program output: -22.6347316794
Correct output: 39.9291320135  | Program output: 22.9291320135 
Correct output: -20.9190282536 | Program output: 28.0809717464 
Correct output: 61.9263871894  | Program output: 63.9263871894 
Correct output: -28.8395473609 | Program output: -18.8395473609
Correct output: -39.146556962  | Program output: 4.853443038   
Correct output: -134.9331989268 | Program output: -106.9331989268
Correct output: -126.4496738486 | Program output: -105.4496738486
Correct output: -51.218440095  | Program output: -97.218440095 
Correct output: 45.5895106217  | Program output: 31.5895106217 
Correct output: 136.6637618296 | Program output: 52.6637618296 
Correct output: -104.5625509424 | Program output: -92.5625509424
Correct output: 80.9125656746  | Program output: 16.9125656746 
Correct output: -63.4657032446 | Program output: 4.5342967554  
Correct output: -52.106433034  | Program output: -39.106433034 
Correct output: -99.9152304515 | Program output: -99.9152304515
Correct output: -78.2834351958 | Program output: -17.2834351958
Correct output: -64.2911152024 | Program output: -34.2911152024
Correct output: 93.5722006381  | Program output: -9.4277993619 
Correct output: 141.452540764  | Program output: 38.452540764  
Correct output: 102.2088941323 | Program output: -9.7911058677 
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_max} {:instruction float_flush} {:instruction integer_div} {:instruction integer_add} {:instruction print_float} {:instruction float_pop} {:instruction in1} {:instruction integer_yank} {:instruction integer_dup_times} {:instruction integer_dup_items} {:instruction float_dec} {:instruction float_dec} {:instruction integer_div} {:instruction float_sub} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_div} {:instruction float_dec} {:instruction integer_swap} {:instruction integer_dup_times} {:instruction integer_dup_items} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_inc} {:instruction integer_dup_items} {:instruction float_dec} {:instruction integer_dup_items} {:instruction float_dec} {:instruction float_sub} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_div} {:instruction float_dec} {:instruction integer_swap} {:instruction integer_dup_times} {:instruction integer_dup_items} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_dup_times} {:instruction integer_dup_items} {:instruction float_dec} {:instruction float_dec} {:instruction tag_integer_316} {:instruction print_float} {:instruction float_rot} {:instruction integer_dup_items} {:instruction print_integer} {:instruction tagged_490} {:instruction integer_min} {:instruction integer_dup_items})
Best program: (integer_max float_flush integer_div integer_add print_float float_pop in1 integer_yank integer_dup_times integer_dup_items float_dec float_dec integer_div float_sub float_dec float_dec float_dec float_dec integer_div float_dec integer_swap integer_dup_times integer_dup_items float_dec float_dec float_dec integer_inc integer_dup_items float_dec integer_dup_items float_dec float_sub float_dec float_dec float_dec float_dec integer_div float_dec integer_swap integer_dup_times integer_dup_items float_dec float_dec float_dec integer_dup_times integer_dup_items float_dec float_dec tag_integer_316 print_float float_rot integer_dup_items print_integer tagged_490 integer_min integer_dup_items)
Errors: [100.0 1 20.0 1 1.0 1 119.0 3 2.0 1 17.0 2 49.0 11 2.0 1 10.0 1 44.0 12 28.0 2 21.0 2 46.0 2 14.0 2 84.0 3 12.0 3 64.0 2 68.0 12 13.0 2 0.0 0 61.0 2 30.0 1 103.0 10 103.0 3 112.0 13]
Total: 1216.0
Mean: 24.32
Genome size: 56
Size: 57
Percent parens: 0.018
--- Population Statistics ---
Average total errors in population: 3049.2026629999996
Median total errors in population: 1244.0
Error averages by case: (163.0716703 3.101 99.5606478 2.941 79.17697880000001 2.259 180.6586158 3.907 81.10683449999998 2.982 85.6206393 2.841 123.49527349999998 11.864 82.2186028 2.276 88.387049 2.965 118.64693109999999 11.903 106.9145906 3.316 100.4009955 3.473 111.7139935 2.877 83.05330160000003 2.627 148.3170092 3.694 91.7937302 3.984 129.012566 2.775 140.8436006 12.481 91.5858209 2.995 80.8960088 2.217 135.50308200000003 2.978 107.19493860000001 2.98 164.5321252 9.096 165.58881900000003 2.996 172.8618384 11.519)
Error minima by case: (78.0 1 13.0 1 0.0 0 97.0 2 0.0 0 1.0 1 3.919 9 0.0 0 3.0 1 22.1466 2 21.0 1 14.0 1 20.5707 1 0.0 0 62.0 2 5.0 2 42.0 1 8.3234 2 6.0 1 0.0 0 6.4943 1 7.498 1 81.0 1 81.0 1 90.0 1)
Average genome size in population (length): 46.382
Average program size in population (points): 47.382
Average percent parens in population: 0.021
Minimum age in population: 19.944091796875
Maximum age in population: 24.61126708984375
Average age in population: 22.52555352783203
Median age in population: 22.57818603515625
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 30
Genome diversity (% unique Plush genomes):	 0.672
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 30
Syntactic diversity (% unique Push programs):	 0.672
Total error diversity:				 0.061
Error (vector) diversity:			 0.067
Behavioral diversity:				 0.068
--- Run Statistics ---
Number of program evaluations used so far: 16000
Number of point (instruction) evaluations so far: 14603980
--- Timings ---
Current time: 1529615498331 milliseconds
Total Time:          48.4 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        18.7 seconds, 38.6%
Fitness Testing:     24.4 seconds, 50.5%
Report:               5.2 seconds, 10.7%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 15
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 16
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 16
;;******************************
;; -*- Number IO problem report - generation 16
Test total error for best: 59460.0
Test mean error for best: 29.73000
;;------------------------------
Outputs of best individual on training cases:
Correct output: 150.3639690164 | Program output: 45.3639690164 
Correct output: -129.2046261   | Program output: -114.2046261  
Correct output: 43.6336388837  | Program output: 37.6336388837 
Correct output: 168.6824809869 | Program output: 44.6824809869 
Correct output: -24.6347316794 | Program output: -27.6347316794
Correct output: 39.9291320135  | Program output: 17.9291320135 
Correct output: -20.9190282536 | Program output: 23.0809717464 
Correct output: 61.9263871894  | Program output: 58.9263871894 
Correct output: -28.8395473609 | Program output: -23.8395473609
Correct output: -39.146556962  | Program output: -0.146556962  
Correct output: -134.9331989268 | Program output: -111.9331989268
Correct output: -126.4496738486 | Program output: -110.4496738486
Correct output: -51.218440095  | Program output: -102.218440095
Correct output: 45.5895106217  | Program output: 26.5895106217 
Correct output: 136.6637618296 | Program output: 47.6637618296 
Correct output: -104.5625509424 | Program output: -97.5625509424
Correct output: 80.9125656746  | Program output: 11.9125656746 
Correct output: -63.4657032446 | Program output: -0.4657032446 
Correct output: -52.106433034  | Program output: -44.106433034 
Correct output: -99.9152304515 | Program output: -104.9152304515
Correct output: -78.2834351958 | Program output: -22.2834351958
Correct output: -64.2911152024 | Program output: -39.2911152024
Correct output: 93.5722006381  | Program output: -14.4277993619
Correct output: 141.452540764  | Program output: 33.452540764  
Correct output: 102.2088941323 | Program output: -14.7911058677
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_inc} {:instruction float_flush} {:instruction integer_div} {:instruction integer_add} {:instruction print_float} {:instruction integer_shove} {:instruction in1} {:instruction integer_yank} {:instruction float_div} {:instruction integer_dup_items} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_dup_items} {:instruction float_dec} {:instruction float_dec} {:instruction integer_div} {:instruction integer_rot} {:instruction float_dec} {:instruction float_dec} {:instruction integer_dup_items} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_div} {:instruction float_dec} {:instruction integer_dup_items} {:instruction float_dec} {:instruction float_dec} {:instruction integer_yank} {:instruction integer_dup_times} {:instruction integer_dup_items} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_dup_items} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_div} {:instruction integer_dup_times} {:instruction integer_dup_items} {:instruction float_dec} {:instruction float_dec} {:instruction integer_div} {:instruction integer_dup_times} {:instruction integer_dup_items} {:instruction float_dec} {:instruction float_dec} {:instruction integer_div} {:instruction print_float} {:instruction float_rot} {:instruction integer_dup_items} {:instruction float_cos} {:instruction tagged_490} {:instruction integer_min} {:instruction integer_pop})
Best program: (float_inc float_flush integer_div integer_add print_float integer_shove in1 integer_yank float_div integer_dup_items float_dec float_dec float_dec float_dec integer_dup_items float_dec float_dec integer_div integer_rot float_dec float_dec integer_dup_items float_dec float_dec float_dec float_dec integer_div float_dec integer_dup_items float_dec float_dec integer_yank integer_dup_times integer_dup_items float_dec float_dec float_dec float_dec integer_dup_items float_dec float_dec float_dec float_dec integer_div integer_dup_times integer_dup_items float_dec float_dec integer_div integer_dup_times integer_dup_items float_dec float_dec integer_div print_float float_rot integer_dup_items float_cos tagged_490 integer_min integer_pop)
Errors: [105.0 2 15.0 2 6.0 2 124.0 3 3.0 1 22.0 2 44.0 11 3.0 2 5.0 1 39.0 2 23.0 2 16.0 2 51.0 3 19.0 2 89.0 3 7.0 3 69.0 2 63.0 2 8.0 2 5.0 3 56.0 2 25.0 2 108.0 11 108.0 3 117.0 13]
Total: 1213.0
Mean: 24.26
Genome size: 61
Size: 62
Percent parens: 0.016
--- Population Statistics ---
Average total errors in population: 3033.2383379999987
Median total errors in population: 1236.0
Error averages by case: (164.8276331 3.185 97.70557899999999 2.914 76.69120380000001 2.117 182.35401559999997 3.938 78.8839129 2.719 87.14910760000001 3.003 119.88042859999997 11.512 79.30099559999996 2.192 85.99549140000002 3.037 115.34305519999995 11.852 105.03537320000001 3.135 98.51337769999996 3.236 114.05703329999999 3.045 84.63324800000002 2.755 149.95377959999996 3.626 89.84508240000001 3.934 130.5469493 2.784 137.5634605 12.069 89.33068939999998 3.016 79.40799730000002 2.372 133.1842109 3.088 104.93568769999999 3.082 166.89986039999994 10.198 167.2780965 3.143 175.199069 12.771)
Error minima by case: (78.0 1 13.0 1 0.0 0 97.0 2 0.0 0 0.0 0 2.919 9 0.0 0 3.0 1 15.2362 2 21.0 1 14.0 1 24.0 1 0.0 0 62.0 2 5.0 2 42.0 1 39.5553 2 6.0 1 0.0 0 54.0 1 23.0 1 81.0 2 81.0 1 89.5314 1)
Average genome size in population (length): 49.619
Average program size in population (points): 50.619
Average percent parens in population: 0.020
Minimum age in population: 20.944091796875
Maximum age in population: 26.2198486328125
Average age in population: 24.03895553588867
Median age in population: 24.0740966796875
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 26
Genome diversity (% unique Plush genomes):	 0.658
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 26
Syntactic diversity (% unique Push programs):	 0.658
Total error diversity:				 0.058
Error (vector) diversity:			 0.066
Behavioral diversity:				 0.066
--- Run Statistics ---
Number of program evaluations used so far: 17000
Number of point (instruction) evaluations so far: 15844580
--- Timings ---
Current time: 1529615501321 milliseconds
Total Time:          51.3 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        19.7 seconds, 38.4%
Fitness Testing:     25.9 seconds, 50.5%
Report:               5.6 seconds, 10.9%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 16
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 17
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 17
;;******************************
;; -*- Number IO problem report - generation 17
Test total error for best: 59460.0
Test mean error for best: 29.73000
;;------------------------------
Outputs of best individual on training cases:
Correct output: 150.3639690164 | Program output: 45.3639690164 
Correct output: -129.2046261   | Program output: -114.2046261  
Correct output: 43.6336388837  | Program output: 37.6336388837 
Correct output: 168.6824809869 | Program output: 44.6824809869 
Correct output: -24.6347316794 | Program output: -27.6347316794
Correct output: 39.9291320135  | Program output: 17.9291320135 
Correct output: -20.9190282536 | Program output: 23.0809717464 
Correct output: 61.9263871894  | Program output: 58.9263871894 
Correct output: -28.8395473609 | Program output: -23.8395473609
Correct output: -39.146556962  | Program output: -0.146556962  
Correct output: -134.9331989268 | Program output: -111.9331989268
Correct output: -126.4496738486 | Program output: -110.4496738486
Correct output: -51.218440095  | Program output: -102.218440095
Correct output: 45.5895106217  | Program output: 26.5895106217 
Correct output: 136.6637618296 | Program output: 47.6637618296 
Correct output: -104.5625509424 | Program output: -97.5625509424
Correct output: 80.9125656746  | Program output: 11.9125656746 
Correct output: -63.4657032446 | Program output: -0.4657032446 
Correct output: -52.106433034  | Program output: -44.106433034 
Correct output: -99.9152304515 | Program output: -104.9152304515
Correct output: -78.2834351958 | Program output: -22.2834351958
Correct output: -64.2911152024 | Program output: -39.2911152024
Correct output: 93.5722006381  | Program output: -14.4277993619
Correct output: 141.452540764  | Program output: 33.452540764  
Correct output: 102.2088941323 | Program output: -14.7911058677
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_max} {:instruction float_flush} {:instruction integer_div} {:instruction integer_add} {:instruction print_float} {:instruction float_pop} {:instruction in1} {:instruction integer_yank} {:instruction integer_dup_times} {:instruction integer_dup_items} {:instruction float_dec} {:instruction float_dec} {:instruction integer_div} {:instruction float_sub} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_div} {:instruction float_dec} {:instruction integer_swap} {:instruction integer_dup_times} {:instruction integer_dup_items} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_inc} {:instruction integer_dup_items} {:instruction float_dec} {:instruction float_dec} {:instruction integer_swap} {:instruction integer_dup_times} {:instruction integer_dup_items} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_inc} {:instruction integer_dup_items} {:instruction float_dec} {:instruction integer_dup_items} {:instruction float_dec} {:instruction float_sub} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_div} {:instruction float_dec} {:instruction integer_swap} {:instruction integer_dup_times} {:instruction integer_dup_items} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_dup_times} {:instruction integer_dup_items} {:instruction float_dec} {:instruction float_dec} {:instruction tag_integer_316} {:instruction print_float} {:instruction float_rot} {:instruction integer_dup_items} {:instruction print_integer} {:instruction tagged_490} {:instruction integer_min} {:instruction integer_dup_items})
Best program: (integer_max float_flush integer_div integer_add print_float float_pop in1 integer_yank integer_dup_times integer_dup_items float_dec float_dec integer_div float_sub float_dec float_dec float_dec float_dec integer_div float_dec integer_swap integer_dup_times integer_dup_items float_dec float_dec float_dec integer_inc integer_dup_items float_dec float_dec integer_swap integer_dup_times integer_dup_items float_dec float_dec float_dec integer_inc integer_dup_items float_dec integer_dup_items float_dec float_sub float_dec float_dec float_dec float_dec integer_div float_dec integer_swap integer_dup_times integer_dup_items float_dec float_dec float_dec integer_dup_times integer_dup_items float_dec float_dec tag_integer_316 print_float float_rot integer_dup_items print_integer tagged_490 integer_min integer_dup_items)
Errors: [105.0 2 15.0 2 6.0 2 124.0 3 3.0 1 22.0 2 44.0 11 3.0 2 5.0 1 39.0 2 23.0 2 16.0 2 51.0 3 19.0 2 89.0 3 7.0 3 69.0 2 63.0 2 8.0 2 5.0 3 56.0 2 25.0 2 108.0 11 108.0 3 117.0 13]
Total: 1213.0
Mean: 24.26
Genome size: 66
Size: 67
Percent parens: 0.015
--- Population Statistics ---
Average total errors in population: 2705.4067258999994
Median total errors in population: 1222.0
Error averages by case: (155.80467570000002 3.103 81.79422189999997 2.647 63.622103200000005 1.982 173.64620959999993 3.763 63.30388310000002 2.127 77.11945449999999 2.923 105.19603289999998 11.262 64.86722819999997 2.076 69.90377940000003 2.638 101.11175629999995 11.145 89.23393540000001 3.017 82.60956489999997 2.982 103.236712 3.014 74.61606440000001 2.896 140.84526289999997 3.686 73.77809349999997 3.799 121.00741969999996 2.929 123.58870649999999 11.36 73.2389444 2.902 64.52316210000004 2.526 117.63068660000002 2.933 89.0361991 2.805 156.82354639999997 10.458 158.26321610000002 3.586 165.27486709999994 12.772)
Error minima by case: (11.6118 1 8.0 1 0.0 0 30.6118 2 0.0 0 2.0 1 0.081 8 0.0 0 0.0 0 16.0721 1 16.0 1 9.0 1 9.5323 1 1.0 1 4.3882 2 0.0 0 24.3882 1 2.715 1 1.0 1 0.0 0 17.5327 1 3.5404 1 14.6118 2 14.6118 1 23.6118 1)
Average genome size in population (length): 53.683
Average program size in population (points): 54.683
Average percent parens in population: 0.018
Minimum age in population: 22.650634765625
Maximum age in population: 27.80239868164062
Average age in population: 25.54985025024414
Median age in population: 25.55894470214844
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 19
Genome diversity (% unique Plush genomes):	 0.661
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 19
Syntactic diversity (% unique Push programs):	 0.661
Total error diversity:				 0.061
Error (vector) diversity:			 0.068
Behavioral diversity:				 0.069
--- Run Statistics ---
Number of program evaluations used so far: 18000
Number of point (instruction) evaluations so far: 17186680
--- Timings ---
Current time: 1529615504560 milliseconds
Total Time:          54.5 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        20.8 seconds, 38.2%
Fitness Testing:     27.6 seconds, 50.6%
Report:               6.0 seconds, 11.1%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 17
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 18
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 18
;;******************************
;; -*- Number IO problem report - generation 18
Test total error for best: 59460.0
Test mean error for best: 29.73000
;;------------------------------
Outputs of best individual on training cases:
Correct output: 150.3639690164 | Program output: 45.3639690164 
Correct output: -129.2046261   | Program output: -114.2046261  
Correct output: 43.6336388837  | Program output: 37.6336388837 
Correct output: 168.6824809869 | Program output: 44.6824809869 
Correct output: -24.6347316794 | Program output: -27.6347316794
Correct output: 39.9291320135  | Program output: 17.9291320135 
Correct output: -20.9190282536 | Program output: 23.0809717464 
Correct output: 61.9263871894  | Program output: 58.9263871894 
Correct output: -28.8395473609 | Program output: -23.8395473609
Correct output: -39.146556962  | Program output: -0.146556962  
Correct output: -134.9331989268 | Program output: -111.9331989268
Correct output: -126.4496738486 | Program output: -110.4496738486
Correct output: -51.218440095  | Program output: -102.218440095
Correct output: 45.5895106217  | Program output: 26.5895106217 
Correct output: 136.6637618296 | Program output: 47.6637618296 
Correct output: -104.5625509424 | Program output: -97.5625509424
Correct output: 80.9125656746  | Program output: 11.9125656746 
Correct output: -63.4657032446 | Program output: -0.4657032446 
Correct output: -52.106433034  | Program output: -44.106433034 
Correct output: -99.9152304515 | Program output: -104.9152304515
Correct output: -78.2834351958 | Program output: -22.2834351958
Correct output: -64.2911152024 | Program output: -39.2911152024
Correct output: 93.5722006381  | Program output: -14.4277993619
Correct output: 141.452540764  | Program output: 33.452540764  
Correct output: 102.2088941323 | Program output: -14.7911058677
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_max} {:instruction float_inc} {:instruction float_yank} {:instruction float_mult} {:instruction float_yank} {:instruction float_yankdup} {:instruction in1} {:instruction integer_yank} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_yankdup} {:instruction float_dec} {:instruction integer_dup_items} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_dup_items} {:instruction float_dec} {:instruction float_dec} {:instruction integer_div} {:instruction integer_dup_items} {:instruction float_dec} {:instruction float_dec} {:instruction integer_dup_items} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_div} {:instruction float_dec} {:instruction integer_swap} {:instruction integer_dup_times} {:instruction integer_dup_items} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_dup_times} {:instruction integer_dup_items} {:instruction float_dec} {:instruction integer_dup_items} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_dup_times} {:instruction integer_dup_items} {:instruction float_dec} {:instruction float_dec} {:instruction tag_integer_316} {:instruction print_float} {:instruction float_rot} {:instruction integer_dup_items} {:instruction print_integer})
Best program: (integer_max float_inc float_yank float_mult float_yank float_yankdup in1 integer_yank float_dec float_dec float_dec float_dec integer_yankdup float_dec integer_dup_items float_dec float_dec float_dec float_dec integer_dup_items float_dec float_dec integer_div integer_dup_items float_dec float_dec integer_dup_items float_dec float_dec float_dec float_dec integer_div float_dec integer_swap integer_dup_times integer_dup_items float_dec float_dec float_dec integer_dup_times integer_dup_items float_dec integer_dup_items float_dec float_dec float_dec integer_dup_times integer_dup_items float_dec float_dec tag_integer_316 print_float float_rot integer_dup_items print_integer)
Errors: [105.0 2 15.0 2 6.0 2 124.0 3 3.0 1 22.0 2 44.0 11 3.0 2 5.0 1 39.0 2 23.0 2 16.0 2 51.0 3 19.0 2 89.0 3 7.0 3 69.0 2 63.0 2 8.0 2 5.0 3 56.0 2 25.0 2 108.0 11 108.0 3 117.0 13]
Total: 1213.0
Mean: 24.26
Genome size: 55
Size: 56
Percent parens: 0.018
--- Population Statistics ---
Average total errors in population: 2679.6459738
Median total errors in population: 1216.0
Error averages by case: (156.2413763 2.871 79.79690439999999 2.425 63.23640100000001 2.241 173.94058149999995 3.823 61.82907120000001 2.103 77.25568449999999 2.92 102.734413 11.213 63.63004859999999 2.234 67.5164255 2.291 100.64846769999997 9.938 87.23734099999999 3.066 80.6280894 3.02 103.31086029999996 3.134 74.73377010000002 2.888 141.24375379999998 3.793 71.80944489999999 3.869 121.2643305 2.902 121.35857520000002 10.094 70.88152019999998 2.885 63.69773010000001 2.423 115.57149640000002 2.952 86.80564670000001 2.601 157.145492 10.533 158.6753559 3.741 165.61119359999995 12.882)
Error minima by case: (78.0 1 4.0 1 0.0 0 94.7539 2 0.0 0 1.0 1 0.081 9 0.0 0 0.0 0 5.5257 1 12.0 1 5.0 1 24.0 1 2.0 1 62.0 1 1.0 1 42.0 1 35.6341 1 1.0 1 0.0 0 45.0 1 14.0 1 60.0131 2 81.0 1 68.6498 1)
Average genome size in population (length): 55.39
Average program size in population (points): 56.39
Average percent parens in population: 0.018
Minimum age in population: 23.650634765625
Maximum age in population: 29.43202209472656
Average age in population: 27.0450506362915
Median age in population: 27.09738922119141
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 22
Genome diversity (% unique Plush genomes):	 0.704
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 22
Syntactic diversity (% unique Push programs):	 0.704
Total error diversity:				 0.062
Error (vector) diversity:			 0.067
Behavioral diversity:				 0.067
--- Run Statistics ---
Number of program evaluations used so far: 19000
Number of point (instruction) evaluations so far: 18571455
--- Timings ---
Current time: 1529615507720 milliseconds
Total Time:          57.8 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        21.9 seconds, 37.9%
Fitness Testing:     29.2 seconds, 50.5%
Report:               6.6 seconds, 11.3%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 18
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 19
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 19
;;******************************
;; -*- Number IO problem report - generation 19
Test total error for best: 59460.0
Test mean error for best: 29.73000
;;------------------------------
Outputs of best individual on training cases:
Correct output: 150.3639690164 | Program output: 45.3639690164 
Correct output: -129.2046261   | Program output: -114.2046261  
Correct output: 43.6336388837  | Program output: 37.6336388837 
Correct output: 168.6824809869 | Program output: 44.6824809869 
Correct output: -24.6347316794 | Program output: -27.6347316794
Correct output: 39.9291320135  | Program output: 17.9291320135 
Correct output: -20.9190282536 | Program output: 23.0809717464 
Correct output: 61.9263871894  | Program output: 58.9263871894 
Correct output: -28.8395473609 | Program output: -23.8395473609
Correct output: -39.146556962  | Program output: -0.146556962  
Correct output: -134.9331989268 | Program output: -111.9331989268
Correct output: -126.4496738486 | Program output: -110.4496738486
Correct output: -51.218440095  | Program output: -102.218440095
Correct output: 45.5895106217  | Program output: 26.5895106217 
Correct output: 136.6637618296 | Program output: 47.6637618296 
Correct output: -104.5625509424 | Program output: -97.5625509424
Correct output: 80.9125656746  | Program output: 11.9125656746 
Correct output: -63.4657032446 | Program output: -0.4657032446 
Correct output: -52.106433034  | Program output: -44.106433034 
Correct output: -99.9152304515 | Program output: -104.9152304515
Correct output: -78.2834351958 | Program output: -22.2834351958
Correct output: -64.2911152024 | Program output: -39.2911152024
Correct output: 93.5722006381  | Program output: -14.4277993619
Correct output: 141.452540764  | Program output: 33.452540764  
Correct output: 102.2088941323 | Program output: -14.7911058677
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_dup} {:instruction float_cos} {:instruction float_inc} {:instruction float_yank} {:instruction float_flush} {:instruction integer_div} {:instruction integer_add} {:instruction print_float} {:instruction float_dec} {:instruction in1} {:instruction integer_yank} {:instruction integer_dup_times} {:instruction integer_dup_items} {:instruction float_dec} {:instruction integer_rot} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_dup_items} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction tag_integer_396} {:instruction float_dec} {:instruction float_dec} {:instruction integer_yank} {:instruction integer_dup_times} {:instruction integer_dup_items} {:instruction float_dec} {:instruction float_dec} {:instruction integer_div} {:instruction float_sub} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_yank} {:instruction integer_yank} {:instruction integer_dup_times} {:instruction integer_dup_items} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_dup_items} {:instruction float_dec} {:instruction float_dec} {:instruction integer_div} {:instruction float_sub} {:instruction float_dec} {:instruction float_dec} {:instruction integer_inc} {:instruction float_dec} {:instruction integer_dec} {:instruction print_float} {:instruction float_rot} {:instruction float_frominteger} {:instruction float_cos} {:instruction tagged_490} {:instruction integer_min})
Best program: (float_dup float_cos float_inc float_yank float_flush integer_div integer_add print_float float_dec in1 integer_yank integer_dup_times integer_dup_items float_dec integer_rot float_dec float_dec float_dec float_dec float_dec integer_dup_items float_dec float_dec float_dec float_dec tag_integer_396 float_dec float_dec integer_yank integer_dup_times integer_dup_items float_dec float_dec integer_div float_sub float_dec float_dec float_dec float_dec float_yank integer_yank integer_dup_times integer_dup_items float_dec float_dec float_dec float_dec integer_dup_items float_dec float_dec integer_div float_sub float_dec float_dec integer_inc float_dec integer_dec print_float float_rot float_frominteger float_cos tagged_490 integer_min)
Errors: [105.0 2 15.0 2 6.0 2 124.0 3 3.0 1 22.0 2 44.0 11 3.0 2 5.0 1 39.0 2 23.0 2 16.0 2 51.0 3 19.0 2 89.0 3 7.0 3 69.0 2 63.0 2 8.0 2 5.0 3 56.0 2 25.0 2 108.0 11 108.0 3 117.0 13]
Total: 1213.0
Mean: 24.26
Genome size: 63
Size: 64
Percent parens: 0.016
--- Population Statistics ---
Average total errors in population: 3082.5873399
Median total errors in population: 1216.0
Error averages by case: (173.37358719999997 3.356 94.58174269999999 2.857 82.23125100000003 2.853 190.90297849999996 4.055 78.64083040000001 2.359 96.01010489999994 3.121 117.21993599999999 11.318 81.26541989999998 2.831 81.70068350000001 2.408 112.65996589999996 6.909 101.9292988 3.3 95.41804329999998 3.3 121.5596872 3.673 93.5158373 3.023 158.6779941 3.938 86.71025080000003 4.057 139.03698659999998 3.037 134.8055387 6.997 85.56496270000004 3.089 82.62896570000001 3.457 128.62997629999998 3.191 100.88946690000002 3.034 173.32931610000003 10.846 175.78701730000006 3.899 181.65949809999995 12.95)
Error minima by case: (7.012 1 2.0 1 0.0 0 26.012 2 0.0 0 0.0 0 0.0979 8 0.0 0 0.0 0 0.9802 1 10.0 1 3.0 1 11.0917 1 0.1261 1 8.988 2 0.0 0 26.5207 1 23.3389 1 1.0 1 0.0 0 13.9031 1 12.0 1 10.012 2 10.012 1 19.012 2)
Average genome size in population (length): 57.731
Average program size in population (points): 58.731
Average percent parens in population: 0.017
Minimum age in population: 26.04446411132812
Maximum age in population: 30.92558670043945
Average age in population: 28.60468172454834
Median age in population: 28.63965797424316
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 30
Genome diversity (% unique Plush genomes):	 0.714
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 30
Syntactic diversity (% unique Push programs):	 0.714
Total error diversity:				 0.072
Error (vector) diversity:			 0.079
Behavioral diversity:				 0.08
--- Run Statistics ---
Number of program evaluations used so far: 20000
Number of point (instruction) evaluations so far: 20014805
--- Timings ---
Current time: 1529615510862 milliseconds
Total Time:          60.9 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        23.0 seconds, 37.7%
Fitness Testing:     30.8 seconds, 50.6%
Report:               7.0 seconds, 11.4%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 19
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 20
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 20
;;******************************
;; -*- Number IO problem report - generation 20
Test total error for best: 59460.0
Test mean error for best: 29.73000
;;------------------------------
Outputs of best individual on training cases:
Correct output: 150.3639690164 | Program output: 45.3639690164 
Correct output: -129.2046261   | Program output: -114.2046261  
Correct output: 43.6336388837  | Program output: 37.6336388837 
Correct output: 168.6824809869 | Program output: 44.6824809869 
Correct output: -24.6347316794 | Program output: -27.6347316794
Correct output: 39.9291320135  | Program output: 17.9291320135 
Correct output: -20.9190282536 | Program output: 23.0809717464 
Correct output: 61.9263871894  | Program output: 58.9263871894 
Correct output: -28.8395473609 | Program output: -23.8395473609
Correct output: -39.146556962  | Program output: -0.146556962  
Correct output: -134.9331989268 | Program output: -111.9331989268
Correct output: -126.4496738486 | Program output: -110.4496738486
Correct output: -51.218440095  | Program output: -102.218440095
Correct output: 45.5895106217  | Program output: 26.5895106217 
Correct output: 136.6637618296 | Program output: 47.6637618296 
Correct output: -104.5625509424 | Program output: -97.5625509424
Correct output: 80.9125656746  | Program output: 11.9125656746 
Correct output: -63.4657032446 | Program output: -0.4657032446 
Correct output: -52.106433034  | Program output: -44.106433034 
Correct output: -99.9152304515 | Program output: -104.9152304515
Correct output: -78.2834351958 | Program output: -22.2834351958
Correct output: -64.2911152024 | Program output: -39.2911152024
Correct output: 93.5722006381  | Program output: -14.4277993619
Correct output: 141.452540764  | Program output: 33.452540764  
Correct output: 102.2088941323 | Program output: -14.7911058677
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_dup} {:instruction float_cos} {:instruction float_inc} {:instruction float_yank} {:instruction float_flush} {:instruction integer_div} {:instruction integer_add} {:instruction print_float} {:instruction float_dec} {:instruction in1} {:instruction integer_yank} {:instruction integer_dup_times} {:instruction float_stackdepth} {:instruction float_dec} {:instruction integer_rot} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_dup_items} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction tag_integer_396} {:instruction float_dec} {:instruction float_dec} {:instruction integer_yank} {:instruction integer_dup_times} {:instruction integer_dup_items} {:instruction float_dec} {:instruction float_dec} {:instruction integer_div} {:instruction float_sub} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_div} {:instruction integer_yank} {:instruction integer_dup_times} {:instruction integer_dup_items} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_dup_items} {:instruction float_dec} {:instruction float_dec} {:instruction integer_div} {:instruction float_sub} {:instruction float_dec} {:instruction float_dec} {:instruction integer_inc} {:instruction float_dec} {:instruction integer_dec} {:instruction print_float} {:instruction float_rot} {:instruction float_frominteger} {:instruction float_cos} {:instruction tagged_490} {:instruction integer_min})
Best program: (float_dup float_cos float_inc float_yank float_flush integer_div integer_add print_float float_dec in1 integer_yank integer_dup_times float_stackdepth float_dec integer_rot float_dec float_dec float_dec float_dec float_dec integer_dup_items float_dec float_dec float_dec float_dec tag_integer_396 float_dec float_dec integer_yank integer_dup_times integer_dup_items float_dec float_dec integer_div float_sub float_dec float_dec float_dec float_dec integer_div integer_yank integer_dup_times integer_dup_items float_dec float_dec float_dec float_dec integer_dup_items float_dec float_dec integer_div float_sub float_dec float_dec integer_inc float_dec integer_dec print_float float_rot float_frominteger float_cos tagged_490 integer_min)
Errors: [105.0 2 15.0 2 6.0 2 124.0 3 3.0 1 22.0 2 44.0 11 3.0 2 5.0 1 39.0 2 23.0 2 16.0 2 51.0 3 19.0 2 89.0 3 7.0 3 69.0 2 63.0 2 8.0 2 5.0 3 56.0 2 25.0 2 108.0 11 108.0 3 117.0 13]
Total: 1213.0
Mean: 24.26
Genome size: 63
Size: 64
Percent parens: 0.016
--- Population Statistics ---
Average total errors in population: 2891.9755998
Median total errors in population: 1213.0
Error averages by case: (166.8346015 3.38 85.1678908 2.888 75.2328464 2.938 184.61475939999997 3.91 71.78249710000003 2.232 89.30134800000002 2.994 108.9097589 11.303 73.27239580000001 2.883 73.81051640000001 2.222 104.70786900000002 5.29 92.5482943 3.156 85.97085830000002 3.13 115.0012816 3.693 86.74023629999999 2.973 152.04932680000005 3.902 77.2742305 3.898 132.58064000000002 2.975 127.00242350000002 5.374 76.92331129999998 2.961 75.07321509999998 3.863 120.98181530000001 3.073 92.63201770000002 3.041 168.08230679999994 10.963 169.30831069999994 3.747 176.46284829999993 12.921)
Error minima by case: (1.6794 1 0.0 0 0.0 0 20.6794 1 0.0 0 2.0 1 0.9732 8 0.0 0 0.0 0 3.2954 1 8.0 1 1.0 1 8.7765 2 1.0 1 2.9614 2 0.0 0 12.1667 1 0.6435 1 0.0 0 0.0 0 15.4612 1 1.4689 1 4.6794 1 4.6794 1 13.6794 1)
Average genome size in population (length): 58.976
Average program size in population (points): 59.976
Average percent parens in population: 0.017
Minimum age in population: 27.20986938476562
Maximum age in population: 32.69490432739258
Average age in population: 30.05538012504578
Median age in population: 30.1230583190918
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 40
Genome diversity (% unique Plush genomes):	 0.728
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 40
Syntactic diversity (% unique Push programs):	 0.728
Total error diversity:				 0.062
Error (vector) diversity:			 0.07
Behavioral diversity:				 0.07
--- Run Statistics ---
Number of program evaluations used so far: 21000
Number of point (instruction) evaluations so far: 21489230
--- Timings ---
Current time: 1529615514055 milliseconds
Total Time:          64.0 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        24.0 seconds, 37.5%
Fitness Testing:     32.5 seconds, 50.8%
Report:               7.4 seconds, 11.5%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 20
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 21
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 21
;;******************************
;; -*- Number IO problem report - generation 21
Test total error for best: 59460.0
Test mean error for best: 29.73000
;;------------------------------
Outputs of best individual on training cases:
Correct output: 150.3639690164 | Program output: 45.3639690164 
Correct output: -129.2046261   | Program output: -114.2046261  
Correct output: 43.6336388837  | Program output: 37.6336388837 
Correct output: 168.6824809869 | Program output: 44.6824809869 
Correct output: -24.6347316794 | Program output: -27.6347316794
Correct output: 39.9291320135  | Program output: 17.9291320135 
Correct output: -20.9190282536 | Program output: 23.0809717464 
Correct output: 61.9263871894  | Program output: 58.9263871894 
Correct output: -28.8395473609 | Program output: -23.8395473609
Correct output: -39.146556962  | Program output: -0.146556962  
Correct output: -134.9331989268 | Program output: -111.9331989268
Correct output: -126.4496738486 | Program output: -110.4496738486
Correct output: -51.218440095  | Program output: -102.218440095
Correct output: 45.5895106217  | Program output: 26.5895106217 
Correct output: 136.6637618296 | Program output: 47.6637618296 
Correct output: -104.5625509424 | Program output: -97.5625509424
Correct output: 80.9125656746  | Program output: 11.9125656746 
Correct output: -63.4657032446 | Program output: -0.4657032446 
Correct output: -52.106433034  | Program output: -44.106433034 
Correct output: -99.9152304515 | Program output: -104.9152304515
Correct output: -78.2834351958 | Program output: -22.2834351958
Correct output: -64.2911152024 | Program output: -39.2911152024
Correct output: 93.5722006381  | Program output: -14.4277993619
Correct output: 141.452540764  | Program output: 33.452540764  
Correct output: 102.2088941323 | Program output: -14.7911058677
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_fromfloat} {:instruction integer_add} {:instruction print_float} {:instruction float_dec} {:instruction in1} {:instruction integer_yank} {:instruction integer_dup_items} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_div} {:instruction integer_dup_times} {:instruction integer_dup_items} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_dup_times} {:instruction integer_dup_times} {:instruction integer_dup_items} {:instruction float_dec} {:instruction float_dec} {:instruction integer_dup_items} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_dup_items} {:instruction float_dec} {:instruction float_dec} {:instruction integer_div} {:instruction integer_dup_items} {:instruction float_mod} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_div} {:instruction float_max} {:instruction integer_dup_times} {:instruction integer_dup_items} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_dup_items} {:instruction float_dec} {:instruction float_dec} {:instruction integer_div} {:instruction float_sub} {:instruction float_dec} {:instruction float_dec} {:instruction integer_inc} {:instruction float_dec} {:instruction integer_div} {:instruction print_float} {:instruction float_rot} {:instruction float_frominteger} {:instruction float_cos} {:instruction tagged_490} {:instruction integer_min} {:instruction integer_dup_items})
Best program: (integer_fromfloat integer_add print_float float_dec in1 integer_yank integer_dup_items float_dec float_dec float_dec float_dec integer_div integer_dup_times integer_dup_items float_dec float_dec float_dec integer_dup_times integer_dup_times integer_dup_items float_dec float_dec integer_dup_items float_dec float_dec float_dec float_dec integer_dup_items float_dec float_dec integer_div integer_dup_items float_mod float_dec float_dec float_dec integer_div float_max integer_dup_times integer_dup_items float_dec float_dec float_dec float_dec integer_dup_items float_dec float_dec integer_div float_sub float_dec float_dec integer_inc float_dec integer_div print_float float_rot float_frominteger float_cos tagged_490 integer_min integer_dup_items)
Errors: [105.0 2 15.0 2 6.0 2 124.0 3 3.0 1 22.0 2 44.0 11 3.0 2 5.0 1 39.0 2 23.0 2 16.0 2 51.0 3 19.0 2 89.0 3 7.0 3 69.0 2 63.0 2 8.0 2 5.0 3 56.0 2 25.0 2 108.0 11 108.0 3 117.0 13]
Total: 1213.0
Mean: 24.26
Genome size: 61
Size: 62
Percent parens: 0.016
--- Population Statistics ---
Average total errors in population: 2937.0682650999984
Median total errors in population: 1213.0
Error averages by case: (168.9400541 3.361 87.161763 2.89 76.91995360000003 2.945 186.6180603 3.934 73.30925719999999 2.219 91.0108008 2.989 110.32226669999996 11.246 75.01353719999999 2.915 75.386057 2.242 106.56310799999996 5.047 94.54257129999998 3.144 87.99255679999997 3.156 116.77178320000002 3.716 88.5163266 3.006 154.15443509999997 3.953 79.3192951 3.939 134.5103623 2.997 127.93548819999998 5.156 78.68248969999996 2.944 76.98263200000002 3.895 122.72472829999998 3.109 94.36518870000002 3.056 170.0174596 10.964 171.41733210000007 3.768 178.38475820000002 12.915)
Error minima by case: (78.0 1 5.0 1 0.0 0 97.0 2 0.0 0 1.0 1 0.081 8 0.0 0 0.0 0 9.0348 1 13.0 1 6.0 1 3.6134 1 2.0 1 62.0 2 0.0 0 37.5862 1 33.3526 1 0.0 0 0.0 0 46.0 1 15.0 1 50.2458 2 81.0 1 58.8825 1)
Average genome size in population (length): 58.746
Average program size in population (points): 59.746
Average percent parens in population: 0.017
Minimum age in population: 28.57159423828125
Maximum age in population: 33.80507469177246
Average age in population: 31.51542567634583
Median age in population: 31.55429458618164
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 32
Genome diversity (% unique Plush genomes):	 0.731
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 32
Syntactic diversity (% unique Push programs):	 0.731
Total error diversity:				 0.061
Error (vector) diversity:			 0.065
Behavioral diversity:				 0.065
--- Run Statistics ---
Number of program evaluations used so far: 22000
Number of point (instruction) evaluations so far: 22957905
--- Timings ---
Current time: 1529615517388 milliseconds
Total Time:          67.3 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        25.1 seconds, 37.3%
Fitness Testing:     34.2 seconds, 50.8%
Report:               7.9 seconds, 11.7%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 21
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 22
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 22
;;******************************
;; -*- Number IO problem report - generation 22
Test total error for best: 59460.0
Test mean error for best: 29.73000
;;------------------------------
Outputs of best individual on training cases:
Correct output: 150.3639690164 | Program output: 45.3639690164 
Correct output: -129.2046261   | Program output: -114.2046261  
Correct output: 43.6336388837  | Program output: 37.6336388837 
Correct output: 168.6824809869 | Program output: 44.6824809869 
Correct output: -24.6347316794 | Program output: -27.6347316794
Correct output: 39.9291320135  | Program output: 17.9291320135 
Correct output: -20.9190282536 | Program output: 23.0809717464 
Correct output: 61.9263871894  | Program output: 58.9263871894 
Correct output: -28.8395473609 | Program output: -23.8395473609
Correct output: -39.146556962  | Program output: -0.146556962  
Correct output: -134.9331989268 | Program output: -111.9331989268
Correct output: -126.4496738486 | Program output: -110.4496738486
Correct output: -51.218440095  | Program output: -102.218440095
Correct output: 45.5895106217  | Program output: 26.5895106217 
Correct output: 136.6637618296 | Program output: 47.6637618296 
Correct output: -104.5625509424 | Program output: -97.5625509424
Correct output: 80.9125656746  | Program output: 11.9125656746 
Correct output: -63.4657032446 | Program output: -0.4657032446 
Correct output: -52.106433034  | Program output: -44.106433034 
Correct output: -99.9152304515 | Program output: -104.9152304515
Correct output: -78.2834351958 | Program output: -22.2834351958
Correct output: -64.2911152024 | Program output: -39.2911152024
Correct output: 93.5722006381  | Program output: -14.4277993619
Correct output: 141.452540764  | Program output: 33.452540764  
Correct output: 102.2088941323 | Program output: -14.7911058677
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_dup} {:instruction float_mult} {:instruction float_inc} {:instruction float_yank} {:instruction float_flush} {:instruction integer_div} {:instruction in1} {:instruction integer_yank} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_yankdup} {:instruction float_dec} {:instruction float_dec} {:instruction integer_div} {:instruction integer_dup_items} {:instruction float_dec} {:instruction float_dec} {:instruction integer_div} {:instruction float_sub} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_div} {:instruction float_dec} {:instruction integer_dup_items} {:instruction float_dec} {:instruction float_dec} {:instruction integer_yank} {:instruction integer_dup_times} {:instruction integer_dup_items} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_dup_items} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_div} {:instruction integer_dup_times} {:instruction integer_dup_items} {:instruction float_dec} {:instruction float_dec} {:instruction integer_div} {:instruction integer_dup_times} {:instruction integer_dup_items} {:instruction float_dec} {:instruction float_dec} {:instruction integer_div} {:instruction print_float} {:instruction float_rot})
Best program: (float_dup float_mult float_inc float_yank float_flush integer_div in1 integer_yank float_dec float_dec float_dec float_dec integer_yankdup float_dec float_dec integer_div integer_dup_items float_dec float_dec integer_div float_sub float_dec float_dec float_dec float_dec integer_div float_dec integer_dup_items float_dec float_dec integer_yank integer_dup_times integer_dup_items float_dec float_dec float_dec float_dec integer_dup_items float_dec float_dec float_dec float_dec integer_div integer_dup_times integer_dup_items float_dec float_dec integer_div integer_dup_times integer_dup_items float_dec float_dec integer_div print_float float_rot)
Errors: [105.0 2 15.0 2 6.0 2 124.0 3 3.0 1 22.0 2 44.0 11 3.0 2 5.0 1 39.0 2 23.0 2 16.0 2 51.0 3 19.0 2 89.0 3 7.0 3 69.0 2 63.0 2 8.0 2 5.0 3 56.0 2 25.0 2 108.0 11 108.0 3 117.0 13]
Total: 1213.0
Mean: 24.26
Genome size: 55
Size: 56
Percent parens: 0.018
--- Population Statistics ---
Average total errors in population: 2849.688783499999
Median total errors in population: 1213.0
Error averages by case: (165.99885420000004 3.402 83.62527769999998 2.911 73.45126049999999 2.987 183.73688609999996 3.976 69.55167390000001 2.265 87.65555660000003 3.024 106.24187099999999 11.244 71.55900530000001 2.915 71.4873506 2.247 102.19628889999998 4.997 90.96178599999999 3.193 84.4422247 3.196 113.14424179999999 3.772 85.1587281 3.042 151.1534793 3.981 75.62919509999998 3.914 131.25997569999998 3.021 124.5234183 5.07 74.76068439999997 2.98 73.54846580000002 3.933 118.69997260000001 3.12 90.38236890000002 3.104 166.7930415 11.046 168.40712630000002 3.817 175.19505019999997 12.968)
Error minima by case: (75.4644 1 4.0 1 0.0 0 93.783 2 0.0 0 3.0 1 0.081 8 0.0 0 0.0 0 1.8031 1 12.0 1 5.0 1 2.6134 2 6.0 1 61.7642 1 0.0 0 6.013 1 1.3703 1 0.0 0 0.0 0 13.4475 1 0.5449 1 18.6727 2 66.553 1 27.3094 1)
Average genome size in population (length): 59.015
Average program size in population (points): 60.015
Average percent parens in population: 0.017
Minimum age in population: 29.78668212890625
Maximum age in population: 35.13254594802856
Average age in population: 32.90457171297073
Median age in population: 32.93945074081421
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 21
Genome diversity (% unique Plush genomes):	 0.76
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 21
Syntactic diversity (% unique Push programs):	 0.76
Total error diversity:				 0.064
Error (vector) diversity:			 0.069
Behavioral diversity:				 0.069
--- Run Statistics ---
Number of program evaluations used so far: 23000
Number of point (instruction) evaluations so far: 24433355
--- Timings ---
Current time: 1529615520513 milliseconds
Total Time:          70.6 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        26.2 seconds, 37.2%
Fitness Testing:     35.8 seconds, 50.8%
Report:               8.4 seconds, 11.9%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 22
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 23
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 23
;;******************************
;; -*- Number IO problem report - generation 23
Test total error for best: 59460.0
Test mean error for best: 29.73000
;;------------------------------
Outputs of best individual on training cases:
Correct output: 150.3639690164 | Program output: 45.3639690164 
Correct output: -129.2046261   | Program output: -114.2046261  
Correct output: 43.6336388837  | Program output: 37.6336388837 
Correct output: 168.6824809869 | Program output: 44.6824809869 
Correct output: -24.6347316794 | Program output: -27.6347316794
Correct output: 39.9291320135  | Program output: 17.9291320135 
Correct output: -20.9190282536 | Program output: 23.0809717464 
Correct output: 61.9263871894  | Program output: 58.9263871894 
Correct output: -28.8395473609 | Program output: -23.8395473609
Correct output: -39.146556962  | Program output: -0.146556962  
Correct output: -134.9331989268 | Program output: -111.9331989268
Correct output: -126.4496738486 | Program output: -110.4496738486
Correct output: -51.218440095  | Program output: -102.218440095
Correct output: 45.5895106217  | Program output: 26.5895106217 
Correct output: 136.6637618296 | Program output: 47.6637618296 
Correct output: -104.5625509424 | Program output: -97.5625509424
Correct output: 80.9125656746  | Program output: 11.9125656746 
Correct output: -63.4657032446 | Program output: -0.4657032446 
Correct output: -52.106433034  | Program output: -44.106433034 
Correct output: -99.9152304515 | Program output: -104.9152304515
Correct output: -78.2834351958 | Program output: -22.2834351958
Correct output: -64.2911152024 | Program output: -39.2911152024
Correct output: 93.5722006381  | Program output: -14.4277993619
Correct output: 141.452540764  | Program output: 33.452540764  
Correct output: 102.2088941323 | Program output: -14.7911058677
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_flush} {:instruction integer_div} {:instruction integer_add} {:instruction print_float} {:instruction float_dec} {:instruction print_float} {:instruction integer_add} {:instruction in1} {:instruction integer_yank} {:instruction integer_dup_times} {:instruction integer_dup_items} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_dup} {:instruction integer_dup_items} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_dup_items} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_dup_items} {:instruction float_dec} {:instruction float_dec} {:instruction integer_div} {:instruction integer_dup_items} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_div} {:instruction integer_yank} {:instruction integer_dup_times} {:instruction integer_dup_items} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_dup_items} {:instruction float_dec} {:instruction float_dec} {:instruction integer_div} {:instruction float_swap} {:instruction float_dec} {:instruction float_dec} {:instruction integer_inc} {:instruction float_dec} {:instruction integer_div} {:instruction print_float})
Best program: (float_flush integer_div integer_add print_float float_dec print_float integer_add in1 integer_yank integer_dup_times integer_dup_items float_dec float_dec float_dec float_dec integer_dup integer_dup_items float_dec float_dec float_dec float_dec integer_dup_items float_dec float_dec float_dec float_dec integer_dup_items float_dec float_dec integer_div integer_dup_items float_dec float_dec float_dec float_dec integer_div integer_yank integer_dup_times integer_dup_items float_dec float_dec float_dec float_dec integer_dup_items float_dec float_dec integer_div float_swap float_dec float_dec integer_inc float_dec integer_div print_float)
Errors: [105.0 2 15.0 2 6.0 2 124.0 3 3.0 1 22.0 2 44.0 11 3.0 2 5.0 1 39.0 2 23.0 2 16.0 2 51.0 3 19.0 2 89.0 3 7.0 3 69.0 2 63.0 2 8.0 2 5.0 3 56.0 2 25.0 2 108.0 11 108.0 3 117.0 13]
Total: 1213.0
Mean: 24.26
Genome size: 54
Size: 55
Percent parens: 0.018
--- Population Statistics ---
Average total errors in population: 3247.6006903999996
Median total errors in population: 1213.0
Error averages by case: (179.80288940000003 3.59 100.76947479999998 3.098 89.03582549999999 3.155 197.22031549999997 4.154 86.4813868 2.467 102.76658739999996 3.207 121.82143129999999 11.287 87.3094865 3.099 88.59686570000001 2.479 117.94062079999996 5.34 108.02017810000001 3.397 101.56328569999997 3.39 129.1524083 3.9 100.3394856 3.214 165.19320400000004 4.174 92.89194690000002 4.142 145.60935349999997 3.203 139.9918444 5.471 91.99232290000005 3.186 90.53610500000002 4.112 135.37666860000004 3.307 107.39901460000002 3.285 181.41511909999997 11.017 182.15402020000008 3.962 189.64284980000005 12.942)
Error minima by case: (51.1496 1 1.0 1 0.0 0 70.1496 1 0.0 0 1.0 1 0.919 8 0.0 0 0.0 0 4.1466 1 9.0 1 2.0 1 2.8504 1 2.0 1 35.1496 1 0.0 0 15.1496 1 28.4657 1 1.0 1 0.0 0 42.0 1 11.0 1 34.9414 1 54.1496 2 43.2147 2)
Average genome size in population (length): 58.829
Average program size in population (points): 59.829
Average percent parens in population: 0.017
Minimum age in population: 31.88169956207275
Maximum age in population: 36.1710512638092
Average age in population: 34.30124842405319
Median age in population: 34.32832396030426
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 16
Genome diversity (% unique Plush genomes):	 0.782
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 16
Syntactic diversity (% unique Push programs):	 0.782
Total error diversity:				 0.069
Error (vector) diversity:			 0.073
Behavioral diversity:				 0.075
--- Run Statistics ---
Number of program evaluations used so far: 24000
Number of point (instruction) evaluations so far: 25904180
--- Timings ---
Current time: 1529615523602 milliseconds
Total Time:          73.6 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        27.3 seconds, 37.1%
Fitness Testing:     37.4 seconds, 50.8%
Report:               8.8 seconds, 11.9%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 23
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 24
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 24
;;******************************
;; -*- Number IO problem report - generation 24
Test total error for best: 59460.0
Test mean error for best: 29.73000
;;------------------------------
Outputs of best individual on training cases:
Correct output: 150.3639690164 | Program output: 45.3639690164 
Correct output: -129.2046261   | Program output: -114.2046261  
Correct output: 43.6336388837  | Program output: 37.6336388837 
Correct output: 168.6824809869 | Program output: 44.6824809869 
Correct output: -24.6347316794 | Program output: -27.6347316794
Correct output: 39.9291320135  | Program output: 17.9291320135 
Correct output: -20.9190282536 | Program output: 23.0809717464 
Correct output: 61.9263871894  | Program output: 58.9263871894 
Correct output: -28.8395473609 | Program output: -23.8395473609
Correct output: -39.146556962  | Program output: -0.146556962  
Correct output: -134.9331989268 | Program output: -111.9331989268
Correct output: -126.4496738486 | Program output: -110.4496738486
Correct output: -51.218440095  | Program output: -102.218440095
Correct output: 45.5895106217  | Program output: 26.5895106217 
Correct output: 136.6637618296 | Program output: 47.6637618296 
Correct output: -104.5625509424 | Program output: -97.5625509424
Correct output: 80.9125656746  | Program output: 11.9125656746 
Correct output: -63.4657032446 | Program output: -0.4657032446 
Correct output: -52.106433034  | Program output: -44.106433034 
Correct output: -99.9152304515 | Program output: -104.9152304515
Correct output: -78.2834351958 | Program output: -22.2834351958
Correct output: -64.2911152024 | Program output: -39.2911152024
Correct output: 93.5722006381  | Program output: -14.4277993619
Correct output: 141.452540764  | Program output: 33.452540764  
Correct output: 102.2088941323 | Program output: -14.7911058677
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_max} {:instruction integer_yank} {:instruction integer_div} {:instruction float_flush} {:instruction integer_div} {:instruction integer_add} {:instruction print_float} {:instruction integer_shove} {:instruction in1} {:instruction integer_yank} {:instruction float_div} {:instruction integer_dup_items} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_dup_items} {:instruction float_dec} {:instruction float_dec} {:instruction integer_div} {:instruction integer_rot} {:instruction float_dec} {:instruction float_dec} {:instruction integer_dup_items} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_div} {:instruction float_dec} {:instruction integer_dup_items} {:instruction float_dec} {:instruction float_dec} {:instruction integer_yank} {:instruction integer_dup_times} {:instruction integer_dup_items} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_dup_items} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_div} {:instruction integer_dup_times} {:instruction integer_dup_items} {:instruction float_dec} {:instruction float_dec} {:instruction integer_div} {:instruction integer_dup_times} {:instruction integer_dup_items} {:instruction float_dec} {:instruction float_dec} {:instruction integer_div} {:instruction print_float})
Best program: (integer_max integer_yank integer_div float_flush integer_div integer_add print_float integer_shove in1 integer_yank float_div integer_dup_items float_dec float_dec float_dec float_dec integer_dup_items float_dec float_dec integer_div integer_rot float_dec float_dec integer_dup_items float_dec float_dec float_dec float_dec integer_div float_dec integer_dup_items float_dec float_dec integer_yank integer_dup_times integer_dup_items float_dec float_dec float_dec float_dec integer_dup_items float_dec float_dec float_dec float_dec integer_div integer_dup_times integer_dup_items float_dec float_dec integer_div integer_dup_times integer_dup_items float_dec float_dec integer_div print_float)
Errors: [105.0 2 15.0 2 6.0 2 124.0 3 3.0 1 22.0 2 44.0 11 3.0 2 5.0 1 39.0 2 23.0 2 16.0 2 51.0 3 19.0 2 89.0 3 7.0 3 69.0 2 63.0 2 8.0 2 5.0 3 56.0 2 25.0 2 108.0 11 108.0 3 117.0 13]
Total: 1213.0
Mean: 24.26
Genome size: 57
Size: 58
Percent parens: 0.017
--- Population Statistics ---
Average total errors in population: 3180.6954618999994
Median total errors in population: 1213.0
Error averages by case: (177.68808120000003 3.545 98.11666599999998 3.039 86.4864905 3.115 195.18658279999997 4.118 83.4577163 2.427 100.21993779999998 3.163 118.99614869999999 11.272 84.84564019999996 3.068 85.4801953 2.451 114.93573479999999 5.27 105.34440970000001 3.352 98.87978759999999 3.346 126.65025510000001 3.878 97.84955670000001 3.182 163.0284656 4.129 90.1348911 4.095 143.22110590000003 3.167 136.9582956 5.37 88.93746080000003 3.118 87.9377175 4.037 132.1824157 3.294 104.32324310000003 3.238 179.01385319999997 11.001 180.00310070000003 3.93 187.27571000000003 12.937)
Error minima by case: (78.0 1 6.0 1 0.0 0 97.0 2 0.0 0 3.0 1 0.919 8 0.0 0 0.0 0 12.9231 1 1.5499 1 7.0 1 1.7491 2 0.0 0 62.0 2 0.0 0 42.0 1 10.4981 1 0.0 0 0.0 0 25.3158 1 0.4501 1 62.5906 2 81.0 1 71.2273 1)
Average genome size in population (length): 58.793
Average program size in population (points): 59.793
Average percent parens in population: 0.017
Minimum age in population: 33.24061107635498
Maximum age in population: 37.74337005615234
Average age in population: 35.7112516682148
Median age in population: 35.73775720596313
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 17
Genome diversity (% unique Plush genomes):	 0.793
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 17
Syntactic diversity (% unique Push programs):	 0.793
Total error diversity:				 0.069
Error (vector) diversity:			 0.073
Behavioral diversity:				 0.074
--- Run Statistics ---
Number of program evaluations used so far: 25000
Number of point (instruction) evaluations so far: 27374130
--- Timings ---
Current time: 1529615526821 milliseconds
Total Time:          76.9 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        28.4 seconds, 36.9%
Fitness Testing:     39.2 seconds, 50.9%
Report:               9.2 seconds, 12.0%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 24
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 25
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 25
;;******************************
;; -*- Number IO problem report - generation 25
Test total error for best: 59460.0
Test mean error for best: 29.73000
;;------------------------------
Outputs of best individual on training cases:
Correct output: 150.3639690164 | Program output: 45.3639690164 
Correct output: -129.2046261   | Program output: -114.2046261  
Correct output: 43.6336388837  | Program output: 37.6336388837 
Correct output: 168.6824809869 | Program output: 44.6824809869 
Correct output: -24.6347316794 | Program output: -27.6347316794
Correct output: 39.9291320135  | Program output: 17.9291320135 
Correct output: -20.9190282536 | Program output: 23.0809717464 
Correct output: 61.9263871894  | Program output: 58.9263871894 
Correct output: -28.8395473609 | Program output: -23.8395473609
Correct output: -39.146556962  | Program output: -0.146556962  
Correct output: -134.9331989268 | Program output: -111.9331989268
Correct output: -126.4496738486 | Program output: -110.4496738486
Correct output: -51.218440095  | Program output: -102.218440095
Correct output: 45.5895106217  | Program output: 26.5895106217 
Correct output: 136.6637618296 | Program output: 47.6637618296 
Correct output: -104.5625509424 | Program output: -97.5625509424
Correct output: 80.9125656746  | Program output: 11.9125656746 
Correct output: -63.4657032446 | Program output: -0.4657032446 
Correct output: -52.106433034  | Program output: -44.106433034 
Correct output: -99.9152304515 | Program output: -104.9152304515
Correct output: -78.2834351958 | Program output: -22.2834351958
Correct output: -64.2911152024 | Program output: -39.2911152024
Correct output: 93.5722006381  | Program output: -14.4277993619
Correct output: 141.452540764  | Program output: 33.452540764  
Correct output: 102.2088941323 | Program output: -14.7911058677
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_inc} {:instruction float_flush} {:instruction integer_div} {:instruction integer_add} {:instruction integer_dec} {:instruction integer_shove} {:instruction in1} {:instruction integer_yank} {:instruction float_div} {:instruction integer_dup_items} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_dup_items} {:instruction float_dec} {:instruction float_dec} {:instruction integer_div} {:instruction integer_rot} {:instruction float_dec} {:instruction float_dec} {:instruction integer_dup_items} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_div} {:instruction float_dec} {:instruction integer_dup_items} {:instruction float_dec} {:instruction float_dec} {:instruction integer_yank} {:instruction integer_dup_times} {:instruction integer_dup_items} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_dup_items} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_div} {:instruction integer_dup_times} {:instruction integer_dup_items} {:instruction float_dec} {:instruction float_dec} {:instruction integer_div} {:instruction integer_dup_times} {:instruction integer_dup_items} {:instruction float_dec} {:instruction float_dec} {:instruction integer_div} {:instruction print_float} {:instruction float_rot} {:instruction integer_dup_items} {:instruction float_cos} {:instruction tagged_490} {:instruction integer_min} {:instruction integer_pop})
Best program: (float_inc float_flush integer_div integer_add integer_dec integer_shove in1 integer_yank float_div integer_dup_items float_dec float_dec float_dec float_dec integer_dup_items float_dec float_dec integer_div integer_rot float_dec float_dec integer_dup_items float_dec float_dec float_dec float_dec integer_div float_dec integer_dup_items float_dec float_dec integer_yank integer_dup_times integer_dup_items float_dec float_dec float_dec float_dec integer_dup_items float_dec float_dec float_dec float_dec integer_div integer_dup_times integer_dup_items float_dec float_dec integer_div integer_dup_times integer_dup_items float_dec float_dec integer_div print_float float_rot integer_dup_items float_cos tagged_490 integer_min integer_pop)
Errors: [105.0 2 15.0 2 6.0 2 124.0 3 3.0 1 22.0 2 44.0 11 3.0 2 5.0 1 39.0 2 23.0 2 16.0 2 51.0 3 19.0 2 89.0 3 7.0 3 69.0 2 63.0 2 8.0 2 5.0 3 56.0 2 25.0 2 108.0 11 108.0 3 117.0 13]
Total: 1213.0
Mean: 24.26
Genome size: 61
Size: 62
Percent parens: 0.016
--- Population Statistics ---
Average total errors in population: 2968.9114318999996
Median total errors in population: 1213.0
Error averages by case: (170.18332380000004 3.503 89.29782079999997 3.002 78.3924522 3.074 187.8227066 4.059 73.70301359999999 2.345 92.22249729999999 3.112 111.1704062 11.25 76.65275429999998 3.017 75.791148 2.359 107.64300779999996 5.203 96.6512725 3.258 90.09135299999998 3.257 118.03162809999998 3.821 89.853619 3.129 155.43024399999996 4.061 81.2971443 4.014 135.30285039999993 3.109 129.0351814 5.306 79.7340255 3.059 79.0514315 3.996 122.96657960000003 3.203 95.17280549999997 3.183 170.53800449999997 11.0 172.51796870000007 3.894 178.18919329999997 12.955)
Error minima by case: (23.7192 1 4.0 1 0.0 0 42.7192 1 0.0 0 2.0 1 0.081 9 0.0 0 0.0 0 11.1466 1 12.0 1 5.0 1 3.6134 1 2.3659 1 7.7192 1 0.0 0 6.0861 1 35.4657 1 0.0 0 0.0 0 3.7809 1 14.0 1 18.7457 1 26.7192 1 27.3824 1)
Average genome size in population (length): 59.014
Average program size in population (points): 60.014
Average percent parens in population: 0.017
Minimum age in population: 34.51715230941772
Maximum age in population: 39.04739999771118
Average age in population: 37.08350890982151
Median age in population: 37.12946325540543
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 13
Genome diversity (% unique Plush genomes):	 0.805
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 13
Syntactic diversity (% unique Push programs):	 0.805
Total error diversity:				 0.073
Error (vector) diversity:			 0.077
Behavioral diversity:				 0.077
--- Run Statistics ---
Number of program evaluations used so far: 26000
Number of point (instruction) evaluations so far: 28849605
--- Timings ---
Current time: 1529615529931 milliseconds
Total Time:          79.9 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        29.5 seconds, 36.9%
Fitness Testing:     40.7 seconds, 51.0%
Report:               9.6 seconds, 12.0%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 25
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 26
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 26
;;******************************
;; -*- Number IO problem report - generation 26
Test total error for best: 59460.0
Test mean error for best: 29.73000
;;------------------------------
Outputs of best individual on training cases:
Correct output: 150.3639690164 | Program output: 45.3639690164 
Correct output: -129.2046261   | Program output: -114.2046261  
Correct output: 43.6336388837  | Program output: 37.6336388837 
Correct output: 168.6824809869 | Program output: 44.6824809869 
Correct output: -24.6347316794 | Program output: -27.6347316794
Correct output: 39.9291320135  | Program output: 17.9291320135 
Correct output: -20.9190282536 | Program output: 23.0809717464 
Correct output: 61.9263871894  | Program output: 58.9263871894 
Correct output: -28.8395473609 | Program output: -23.8395473609
Correct output: -39.146556962  | Program output: -0.146556962  
Correct output: -134.9331989268 | Program output: -111.9331989268
Correct output: -126.4496738486 | Program output: -110.4496738486
Correct output: -51.218440095  | Program output: -102.218440095
Correct output: 45.5895106217  | Program output: 26.5895106217 
Correct output: 136.6637618296 | Program output: 47.6637618296 
Correct output: -104.5625509424 | Program output: -97.5625509424
Correct output: 80.9125656746  | Program output: 11.9125656746 
Correct output: -63.4657032446 | Program output: -0.4657032446 
Correct output: -52.106433034  | Program output: -44.106433034 
Correct output: -99.9152304515 | Program output: -104.9152304515
Correct output: -78.2834351958 | Program output: -22.2834351958
Correct output: -64.2911152024 | Program output: -39.2911152024
Correct output: 93.5722006381  | Program output: -14.4277993619
Correct output: 141.452540764  | Program output: 33.452540764  
Correct output: 102.2088941323 | Program output: -14.7911058677
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_fromfloat} {:instruction integer_add} {:instruction float_inc} {:instruction float_yank} {:instruction float_mult} {:instruction float_yank} {:instruction float_yankdup} {:instruction in1} {:instruction integer_yank} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_yankdup} {:instruction float_dec} {:instruction float_dec} {:instruction integer_div} {:instruction integer_dup_items} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_dup_items} {:instruction float_dec} {:instruction float_dec} {:instruction integer_div} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_dup_items} {:instruction float_dec} {:instruction float_dec} {:instruction integer_div} {:instruction float_sub} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_div} {:instruction float_dec} {:instruction integer_dup_times} {:instruction integer_dup_items} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_div} {:instruction print_float} {:instruction float_rot} {:instruction integer_dup_items} {:instruction float_cos} {:instruction tagged_490} {:instruction integer_min} {:instruction integer_pop})
Best program: (integer_fromfloat integer_add float_inc float_yank float_mult float_yank float_yankdup in1 integer_yank float_dec float_dec float_dec float_dec integer_yankdup float_dec float_dec integer_div integer_dup_items float_dec float_dec float_dec float_dec float_dec integer_dup_items float_dec float_dec integer_div float_dec float_dec float_dec integer_dup_items float_dec float_dec integer_div float_sub float_dec float_dec float_dec float_dec integer_div float_dec integer_dup_times integer_dup_items float_dec float_dec float_dec float_dec integer_div print_float float_rot integer_dup_items float_cos tagged_490 integer_min integer_pop)
Errors: [105.0 2 15.0 2 6.0 2 124.0 3 3.0 1 22.0 2 44.0 11 3.0 2 5.0 1 39.0 2 23.0 2 16.0 2 51.0 3 19.0 2 89.0 3 7.0 3 69.0 2 63.0 2 8.0 2 5.0 3 56.0 2 25.0 2 108.0 11 108.0 3 117.0 13]
Total: 1213.0
Mean: 24.26
Genome size: 55
Size: 56
Percent parens: 0.018
--- Population Statistics ---
Average total errors in population: 3205.1128110999994
Median total errors in population: 1213.0
Error averages by case: (178.92777410000002 3.505 98.0176333 2.996 88.18030600000002 3.077 196.37372759999997 4.054 84.58938870000001 2.384 101.77560370000002 3.107 120.87335819999997 11.333 86.26091269999999 3.011 86.41187939999998 2.38 116.81219909999997 5.12 105.24984789999999 3.306 98.81975170000001 3.296 127.48505349999999 3.861 99.55735009999998 3.125 164.2462633 4.058 90.25782019999998 4.006 144.67041179999998 3.126 138.8141885 5.214 89.6091985 3.062 88.31110550000002 4.018 133.00078090000002 3.243 105.01129010000001 3.2 179.9571783 11.025 181.33207720000001 3.895 188.20871079999998 12.957)
Error minima by case: (15.7958 1 1.0 1 0.0 0 34.7958 2 0.0 0 1.0 1 1.018 8 0.0 0 0.0 0 6.6494 1 9.0 1 2.0 1 20.4121 1 1.0 1 0.2042 2 0.0 0 20.2042 1 11.9804 1 0.0 0 0.0 0 23.6494 1 7.3506 1 18.7958 1 18.7958 1 27.7958 1)
Average genome size in population (length): 59.454
Average program size in population (points): 60.454
Average percent parens in population: 0.017
Minimum age in population: 36.03311061859131
Maximum age in population: 40.55711618065834
Average age in population: 38.5398367356956
Median age in population: 38.573879763484
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 16
Genome diversity (% unique Plush genomes):	 0.82
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 16
Syntactic diversity (% unique Push programs):	 0.82
Total error diversity:				 0.067
Error (vector) diversity:			 0.073
Behavioral diversity:				 0.073
--- Run Statistics ---
Number of program evaluations used so far: 27000
Number of point (instruction) evaluations so far: 30336055
--- Timings ---
Current time: 1529615533032 milliseconds
Total Time:          83.1 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        30.5 seconds, 36.8%
Fitness Testing:     42.3 seconds, 51.0%
Report:              10.1 seconds, 12.1%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 26
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 27
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 27
;;******************************
;; -*- Number IO problem report - generation 27
Test total error for best: 59460.0
Test mean error for best: 29.73000
;;------------------------------
Outputs of best individual on training cases:
Correct output: 150.3639690164 | Program output: 45.3639690164 
Correct output: -129.2046261   | Program output: -114.2046261  
Correct output: 43.6336388837  | Program output: 37.6336388837 
Correct output: 168.6824809869 | Program output: 44.6824809869 
Correct output: -24.6347316794 | Program output: -27.6347316794
Correct output: 39.9291320135  | Program output: 17.9291320135 
Correct output: -20.9190282536 | Program output: 23.0809717464 
Correct output: 61.9263871894  | Program output: 58.9263871894 
Correct output: -28.8395473609 | Program output: -23.8395473609
Correct output: -39.146556962  | Program output: -0.146556962  
Correct output: -134.9331989268 | Program output: -111.9331989268
Correct output: -126.4496738486 | Program output: -110.4496738486
Correct output: -51.218440095  | Program output: -102.218440095
Correct output: 45.5895106217  | Program output: 26.5895106217 
Correct output: 136.6637618296 | Program output: 47.6637618296 
Correct output: -104.5625509424 | Program output: -97.5625509424
Correct output: 80.9125656746  | Program output: 11.9125656746 
Correct output: -63.4657032446 | Program output: -0.4657032446 
Correct output: -52.106433034  | Program output: -44.106433034 
Correct output: -99.9152304515 | Program output: -104.9152304515
Correct output: -78.2834351958 | Program output: -22.2834351958
Correct output: -64.2911152024 | Program output: -39.2911152024
Correct output: 93.5722006381  | Program output: -14.4277993619
Correct output: 141.452540764  | Program output: 33.452540764  
Correct output: 102.2088941323 | Program output: -14.7911058677
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_max} {:instruction float_flush} {:instruction integer_div} {:instruction integer_add} {:instruction print_float} {:instruction float_dec} {:instruction in1} {:instruction float_dec} {:instruction integer_dup_times} {:instruction integer_dup_items} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_div} {:instruction float_sub} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_div} {:instruction float_dec} {:instruction integer_dup_items} {:instruction float_dec} {:instruction float_dec} {:instruction float_mod} {:instruction float_dup_items} {:instruction integer_dup_items} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_dup_items} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_div} {:instruction integer_dup_times} {:instruction integer_max} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_div} {:instruction print_float} {:instruction float_rot} {:instruction integer_dup_items} {:instruction float_cos} {:instruction tagged_490} {:instruction integer_min} {:instruction integer_dup_items})
Best program: (integer_max float_flush integer_div integer_add print_float float_dec in1 float_dec integer_dup_times integer_dup_items float_dec float_dec float_dec float_dec float_dec integer_div float_sub float_dec float_dec float_dec float_dec integer_div float_dec integer_dup_items float_dec float_dec float_mod float_dup_items integer_dup_items float_dec float_dec float_dec float_dec integer_dup_items float_dec float_dec float_dec float_dec integer_div integer_dup_times integer_max float_dec float_dec float_dec float_dec float_dec float_dec integer_div print_float float_rot integer_dup_items float_cos tagged_490 integer_min integer_dup_items)
Errors: [105.0 2 15.0 2 6.0 2 124.0 3 3.0 1 22.0 2 44.0 11 3.0 2 5.0 1 39.0 2 23.0 2 16.0 2 51.0 3 19.0 2 89.0 3 7.0 3 69.0 2 63.0 2 8.0 2 5.0 3 56.0 2 25.0 2 108.0 11 108.0 3 117.0 13]
Total: 1213.0
Mean: 24.26
Genome size: 55
Size: 56
Percent parens: 0.018
--- Population Statistics ---
Average total errors in population: 3321.8458803999997
Median total errors in population: 1213.0
Error averages by case: (183.24721399999999 3.592 102.60621989999999 3.077 92.9800548 3.174 200.51171949999997 4.14 89.46764069999999 2.464 106.81379749999995 3.193 125.82418419999995 11.327 91.03372619999998 3.114 91.42206259999998 2.481 121.4755949 5.433 109.83003899999997 3.398 103.42076089999999 3.365 132.03501969999996 3.897 104.32291329999998 3.214 168.62543309999995 4.159 94.93002709999999 4.141 149.50715629999993 3.215 143.2807072 5.535 94.57958909999998 3.141 92.72702049999998 4.112 137.57656260000002 3.316 109.8745693 3.287 183.57948709999997 11.018 185.66917349999997 3.957 191.80220739999996 12.953)
Error minima by case: (23.6137 1 0.3619 1 0.0 0 42.6137 1 0.0 0 0.3945 1 1.3403 8 0.0 0 0.0 0 9.9972 1 2.4699 1 1.3619 1 23.2023 1 2.0 1 7.6137 1 0.0 0 12.3863 1 24.5929 1 0.0 0 0.0 0 9.7752 1 4.4699 1 26.6137 1 26.6137 1 35.6137 2)
Average genome size in population (length): 59.374
Average program size in population (points): 60.374
Average percent parens in population: 0.017
Minimum age in population: 37.32370495796204
Maximum age in population: 42.05476090312004
Average age in population: 39.99659700481594
Median age in population: 40.02746947109699
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 9
Genome diversity (% unique Plush genomes):	 0.799
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 9
Syntactic diversity (% unique Push programs):	 0.799
Total error diversity:				 0.069
Error (vector) diversity:			 0.074
Behavioral diversity:				 0.074
--- Run Statistics ---
Number of program evaluations used so far: 28000
Number of point (instruction) evaluations so far: 31820480
--- Timings ---
Current time: 1529615536168 milliseconds
Total Time:          86.2 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        31.6 seconds, 36.7%
Fitness Testing:     44.0 seconds, 51.0%
Report:              10.5 seconds, 12.2%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 27
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 28
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 28
;;******************************
;; -*- Number IO problem report - generation 28
Test total error for best: 59460.0
Test mean error for best: 29.73000
;;------------------------------
Outputs of best individual on training cases:
Correct output: 150.3639690164 | Program output: 45.3639690164 
Correct output: -129.2046261   | Program output: -114.2046261  
Correct output: 43.6336388837  | Program output: 37.6336388837 
Correct output: 168.6824809869 | Program output: 44.6824809869 
Correct output: -24.6347316794 | Program output: -27.6347316794
Correct output: 39.9291320135  | Program output: 17.9291320135 
Correct output: -20.9190282536 | Program output: 23.0809717464 
Correct output: 61.9263871894  | Program output: 58.9263871894 
Correct output: -28.8395473609 | Program output: -23.8395473609
Correct output: -39.146556962  | Program output: -0.146556962  
Correct output: -134.9331989268 | Program output: -111.9331989268
Correct output: -126.4496738486 | Program output: -110.4496738486
Correct output: -51.218440095  | Program output: -102.218440095
Correct output: 45.5895106217  | Program output: 26.5895106217 
Correct output: 136.6637618296 | Program output: 47.6637618296 
Correct output: -104.5625509424 | Program output: -97.5625509424
Correct output: 80.9125656746  | Program output: 11.9125656746 
Correct output: -63.4657032446 | Program output: -0.4657032446 
Correct output: -52.106433034  | Program output: -44.106433034 
Correct output: -99.9152304515 | Program output: -104.9152304515
Correct output: -78.2834351958 | Program output: -22.2834351958
Correct output: -64.2911152024 | Program output: -39.2911152024
Correct output: 93.5722006381  | Program output: -14.4277993619
Correct output: 141.452540764  | Program output: 33.452540764  
Correct output: 102.2088941323 | Program output: -14.7911058677
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_dup} {:instruction float_cos} {:instruction float_inc} {:instruction float_yank} {:instruction float_flush} {:instruction integer_div} {:instruction integer_add} {:instruction print_float} {:instruction float_dec} {:instruction in1} {:instruction integer_yank} {:instruction integer_dup_times} {:instruction integer_dup_items} {:instruction float_dec} {:instruction integer_rot} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_dup_items} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction tag_integer_396} {:instruction float_dec} {:instruction float_dec} {:instruction integer_yank} {:instruction integer_dup_times} {:instruction integer_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_div} {:instruction float_sub} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_div} {:instruction integer_yank} {:instruction integer_dup_times} {:instruction integer_dup_items} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_dup_items} {:instruction float_dec} {:instruction float_dec} {:instruction integer_div} {:instruction float_sub} {:instruction float_dec} {:instruction float_dec} {:instruction integer_inc} {:instruction float_dec} {:instruction integer_dec} {:instruction print_float} {:instruction float_rot} {:instruction float_frominteger} {:instruction float_cos} {:instruction float_dup} {:instruction integer_min})
Best program: (float_dup float_cos float_inc float_yank float_flush integer_div integer_add print_float float_dec in1 integer_yank integer_dup_times integer_dup_items float_dec integer_rot float_dec float_dec float_dec float_dec float_dec integer_dup_items float_dec float_dec float_dec float_dec tag_integer_396 float_dec float_dec integer_yank integer_dup_times integer_dec float_dec float_dec integer_div float_sub float_dec float_dec float_dec float_dec integer_div integer_yank integer_dup_times integer_dup_items float_dec float_dec float_dec float_dec integer_dup_items float_dec float_dec integer_div float_sub float_dec float_dec integer_inc float_dec integer_dec print_float float_rot float_frominteger float_cos float_dup integer_min)
Errors: [105.0 2 15.0 2 6.0 2 124.0 3 3.0 1 22.0 2 44.0 11 3.0 2 5.0 1 39.0 2 23.0 2 16.0 2 51.0 3 19.0 2 89.0 3 7.0 3 69.0 2 63.0 2 8.0 2 5.0 3 56.0 2 25.0 2 108.0 11 108.0 3 117.0 13]
Total: 1213.0
Mean: 24.26
Genome size: 63
Size: 64
Percent parens: 0.016
--- Population Statistics ---
Average total errors in population: 2994.3037063999996
Median total errors in population: 1213.0
Error averages by case: (170.860669 3.44 89.81246199999997 2.973 79.1765754 3.055 188.42199149999996 4.046 75.67110150000002 2.335 93.1401308 3.083 112.2668261 11.281 77.29026529999999 2.987 77.74983780000001 2.336 108.33438069999995 5.038 97.1501565 3.273 90.61220619999999 3.279 118.90027309999998 3.814 90.66158769999997 3.088 156.09800119999997 4.05 81.90459679999996 4.008 136.4022493 3.112 130.59865180000003 5.119 81.04917289999996 3.039 79.69595590000002 3.986 124.81973450000002 3.2 96.60957120000003 3.158 172.3654914 11.017 173.2335543 3.88 179.9412635 12.94)
Error minima by case: (12.0717 1 2.0 1 0.0 0 6.9283 1 0.0 0 0.0 0 0.8096 8 0.0 0 0.0 0 8.9543 1 5.0 1 2.0 1 3.1176 1 0.0 0 28.0717 2 0.0 0 12.6213 1 15.3649 1 0.0 0 0.0 0 30.1826 1 7.0 1 9.0717 1 9.0717 1 0.0717 2)
Average genome size in population (length): 59.318
Average program size in population (points): 60.318
Average percent parens in population: 0.017
Minimum age in population: 38.60099902749062
Maximum age in population: 43.43464938551188
Average age in population: 41.34270670118183
Median age in population: 41.38758113607764
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 12
Genome diversity (% unique Plush genomes):	 0.789
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 12
Syntactic diversity (% unique Push programs):	 0.789
Total error diversity:				 0.071
Error (vector) diversity:			 0.075
Behavioral diversity:				 0.076
--- Run Statistics ---
Number of program evaluations used so far: 29000
Number of point (instruction) evaluations so far: 33303455
--- Timings ---
Current time: 1529615539344 milliseconds
Total Time:          89.4 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        32.8 seconds, 36.7%
Fitness Testing:     45.6 seconds, 51.0%
Report:              10.9 seconds, 12.2%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 28
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 29
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 29
;;******************************
;; -*- Number IO problem report - generation 29
Test total error for best: 59460.0
Test mean error for best: 29.73000
;;------------------------------
Outputs of best individual on training cases:
Correct output: 150.3639690164 | Program output: 45.3639690164 
Correct output: -129.2046261   | Program output: -114.2046261  
Correct output: 43.6336388837  | Program output: 37.6336388837 
Correct output: 168.6824809869 | Program output: 44.6824809869 
Correct output: -24.6347316794 | Program output: -27.6347316794
Correct output: 39.9291320135  | Program output: 17.9291320135 
Correct output: -20.9190282536 | Program output: 23.0809717464 
Correct output: 61.9263871894  | Program output: 58.9263871894 
Correct output: -28.8395473609 | Program output: -23.8395473609
Correct output: -39.146556962  | Program output: -0.146556962  
Correct output: -134.9331989268 | Program output: -111.9331989268
Correct output: -126.4496738486 | Program output: -110.4496738486
Correct output: -51.218440095  | Program output: -102.218440095
Correct output: 45.5895106217  | Program output: 26.5895106217 
Correct output: 136.6637618296 | Program output: 47.6637618296 
Correct output: -104.5625509424 | Program output: -97.5625509424
Correct output: 80.9125656746  | Program output: 11.9125656746 
Correct output: -63.4657032446 | Program output: -0.4657032446 
Correct output: -52.106433034  | Program output: -44.106433034 
Correct output: -99.9152304515 | Program output: -104.9152304515
Correct output: -78.2834351958 | Program output: -22.2834351958
Correct output: -64.2911152024 | Program output: -39.2911152024
Correct output: 93.5722006381  | Program output: -14.4277993619
Correct output: 141.452540764  | Program output: 33.452540764  
Correct output: 102.2088941323 | Program output: -14.7911058677
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_flush} {:instruction in1} {:instruction integer_yank} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_yankdup} {:instruction float_dec} {:instruction float_dec} {:instruction integer_div} {:instruction integer_dup_items} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_dup_items} {:instruction float_dec} {:instruction float_shove} {:instruction integer_div} {:instruction integer_dup_items} {:instruction float_dec} {:instruction float_dec} {:instruction integer_div} {:instruction integer_dup_times} {:instruction float_dec} {:instruction integer_div} {:instruction -69} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_div} {:instruction integer_yank} {:instruction integer_dup_times} {:instruction integer_flush} {:instruction float_dec} {:instruction float_dec} {:instruction float_shove} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_div} {:instruction float_dec} {:instruction float_dec} {:instruction integer_dup_times} {:instruction integer_dup_items} {:instruction float_dec} {:instruction integer_div} {:instruction print_float} {:instruction float_pop} {:instruction float_dec} {:instruction integer_min} {:instruction integer_dup_items})
Best program: (float_flush in1 integer_yank float_dec float_dec float_dec float_dec integer_yankdup float_dec float_dec integer_div integer_dup_items float_dec float_dec float_dec float_dec float_dec integer_dup_items float_dec float_shove integer_div integer_dup_items float_dec float_dec integer_div integer_dup_times float_dec integer_div -69 float_dec float_dec float_dec float_dec integer_div integer_yank integer_dup_times integer_flush float_dec float_dec float_shove float_dec float_dec float_dec integer_div float_dec float_dec integer_dup_times integer_dup_items float_dec integer_div print_float float_pop float_dec integer_min integer_dup_items)
Errors: [105.0 2 15.0 2 6.0 2 124.0 3 3.0 1 22.0 2 44.0 11 3.0 2 5.0 1 39.0 2 23.0 2 16.0 2 51.0 3 19.0 2 89.0 3 7.0 3 69.0 2 63.0 2 8.0 2 5.0 3 56.0 2 25.0 2 108.0 11 108.0 3 117.0 13]
Total: 1213.0
Mean: 24.26
Genome size: 55
Size: 56
Percent parens: 0.018
--- Population Statistics ---
Average total errors in population: 3392.730259299999
Median total errors in population: 1213.0
Error averages by case: (185.65407199999999 3.58 105.23224579999996 3.078 95.8429604 3.16 202.86051239999995 4.136 92.3500136 2.445 109.65656759999997 3.195 128.81402469999995 11.392 93.87628169999999 3.105 94.36167060000001 2.458 124.68073339999997 5.421 112.42952679999999 3.378 106.0402435 3.378 134.9970146 3.901 107.17354819999996 3.205 171.12584059999995 4.132 97.63081570000003 4.122 152.1764268 3.191 146.44763840000002 5.522 97.4045573 3.158 95.44614659999999 4.087 140.51389710000004 3.326 112.70862610000002 3.281 187.128081 11.084 188.134246 3.944 195.32456839999995 13.041)
Error minima by case: (15.5874 1 5.0 1 0.0 0 34.5874 2 0.0 0 0.0 0 0.081 8 0.0 0 0.0 0 11.9972 1 13.0 1 6.0 1 24.0 1 3.0 1 0.4126 2 0.0 0 20.4126 1 16.4603 1 0.0 0 0.0 0 1.6425 1 12.7089 1 18.5874 2 18.5874 1 27.5874 1)
Average genome size in population (length): 59.081
Average program size in population (points): 60.081
Average percent parens in population: 0.017
Minimum age in population: 40.44937939941883
Maximum age in population: 44.81748948991299
Average age in population: 42.764341415748
Median age in population: 42.7865949422121
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 9
Genome diversity (% unique Plush genomes):	 0.818
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 9
Syntactic diversity (% unique Push programs):	 0.818
Total error diversity:				 0.064
Error (vector) diversity:			 0.074
Behavioral diversity:				 0.075
--- Run Statistics ---
Number of program evaluations used so far: 30000
Number of point (instruction) evaluations so far: 34780480
--- Timings ---
Current time: 1529615542446 milliseconds
Total Time:          92.5 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        33.9 seconds, 36.6%
Fitness Testing:     47.2 seconds, 51.0%
Report:              11.3 seconds, 12.2%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 29
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 30
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 30
;;******************************
;; -*- Number IO problem report - generation 30
Test total error for best: 59460.0
Test mean error for best: 29.73000
;;------------------------------
Outputs of best individual on training cases:
Correct output: 150.3639690164 | Program output: 45.3639690164 
Correct output: -129.2046261   | Program output: -114.2046261  
Correct output: 43.6336388837  | Program output: 37.6336388837 
Correct output: 168.6824809869 | Program output: 44.6824809869 
Correct output: -24.6347316794 | Program output: -27.6347316794
Correct output: 39.9291320135  | Program output: 17.9291320135 
Correct output: -20.9190282536 | Program output: 23.0809717464 
Correct output: 61.9263871894  | Program output: 58.9263871894 
Correct output: -28.8395473609 | Program output: -23.8395473609
Correct output: -39.146556962  | Program output: -0.146556962  
Correct output: -134.9331989268 | Program output: -111.9331989268
Correct output: -126.4496738486 | Program output: -110.4496738486
Correct output: -51.218440095  | Program output: -102.218440095
Correct output: 45.5895106217  | Program output: 26.5895106217 
Correct output: 136.6637618296 | Program output: 47.6637618296 
Correct output: -104.5625509424 | Program output: -97.5625509424
Correct output: 80.9125656746  | Program output: 11.9125656746 
Correct output: -63.4657032446 | Program output: -0.4657032446 
Correct output: -52.106433034  | Program output: -44.106433034 
Correct output: -99.9152304515 | Program output: -104.9152304515
Correct output: -78.2834351958 | Program output: -22.2834351958
Correct output: -64.2911152024 | Program output: -39.2911152024
Correct output: 93.5722006381  | Program output: -14.4277993619
Correct output: 141.452540764  | Program output: 33.452540764  
Correct output: 102.2088941323 | Program output: -14.7911058677
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_inc} {:instruction float_yank} {:instruction float_mult} {:instruction float_yank} {:instruction integer_add} {:instruction integer_rot} {:instruction float_dec} {:instruction in1} {:instruction integer_yank} {:instruction integer_dup_times} {:instruction integer_dup_items} {:instruction float_dec} {:instruction integer_rot} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_dup_items} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction print_integer} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_div} {:instruction integer_dup_times} {:instruction float_dec} {:instruction integer_div} {:instruction -69} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_div} {:instruction integer_yank} {:instruction integer_dup_times} {:instruction float_sub} {:instruction integer_dup_items} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_dup_items} {:instruction float_dec} {:instruction float_dec} {:instruction integer_div} {:instruction float_sub} {:instruction float_dec} {:instruction float_dec} {:instruction integer_inc} {:instruction float_dec} {:instruction integer_dec} {:instruction print_float} {:instruction float_rot} {:instruction float_frominteger})
Best program: (float_inc float_yank float_mult float_yank integer_add integer_rot float_dec in1 integer_yank integer_dup_times integer_dup_items float_dec integer_rot float_dec float_dec float_dec float_dec float_dec integer_dup_items float_dec float_dec float_dec float_dec print_integer float_dec float_dec float_dec integer_div integer_dup_times float_dec integer_div -69 float_dec float_dec float_dec float_dec integer_div integer_yank integer_dup_times float_sub integer_dup_items float_dec float_dec float_dec float_dec integer_dup_items float_dec float_dec integer_div float_sub float_dec float_dec integer_inc float_dec integer_dec print_float float_rot float_frominteger)
Errors: [105.0 2 15.0 2 6.0 2 124.0 3 3.0 1 22.0 2 44.0 11 3.0 2 5.0 1 39.0 2 23.0 2 16.0 2 51.0 3 19.0 2 89.0 3 7.0 3 69.0 2 63.0 2 8.0 2 5.0 3 56.0 2 25.0 2 108.0 11 108.0 3 117.0 13]
Total: 1213.0
Mean: 24.26
Genome size: 58
Size: 59
Percent parens: 0.017
--- Population Statistics ---
Average total errors in population: 3023.9126381999995
Median total errors in population: 1213.0
Error averages by case: (172.23772400000004 3.548 91.191619 3.02 80.41718760000002 3.129 189.8302215 4.085 76.51928570000001 2.398 94.33260219999997 3.154 112.85002809999996 11.317 78.71273009999999 3.068 78.5899726 2.412 109.05966509999998 5.448 98.51053790000002 3.326 91.9708978 3.316 119.83574319999998 3.831 91.8870489 3.172 157.50651299999998 4.11 83.16759230000001 4.041 137.55423539999998 3.18 131.3396545 5.54 82.05594970000001 3.099 80.95129670000001 4.035 125.94036249999996 3.258 97.68722180000002 3.211 172.64986559999994 11.02 174.53938750000003 3.902 180.9832955 12.972)
Error minima by case: (22.7198 1 3.0 1 0.0 0 41.7198 2 0.0 0 3.0 1 1.081 9 0.0 0 0.0 0 5.5257 1 11.0 1 4.0 1 17.8528 1 0.0 0 6.7198 1 0.0 0 13.2802 1 30.1001 1 0.0 0 0.0 0 44.0 1 13.0 1 25.7198 2 25.7198 1 34.7198 3)
Average genome size in population (length): 59.375
Average program size in population (points): 60.375
Average percent parens in population: 0.017
Minimum age in population: 42.2237404063344
Maximum age in population: 46.08750918321311
Average age in population: 44.18402531101927
Median age in population: 44.19436944369227
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 10
Genome diversity (% unique Plush genomes):	 0.796
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 10
Syntactic diversity (% unique Push programs):	 0.796
Total error diversity:				 0.076
Error (vector) diversity:			 0.081
Behavioral diversity:				 0.081
--- Run Statistics ---
Number of program evaluations used so far: 31000
Number of point (instruction) evaluations so far: 36264880
--- Timings ---
Current time: 1529615545518 milliseconds
Total Time:          95.6 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        34.9 seconds, 36.5%
Fitness Testing:     48.8 seconds, 51.1%
Report:              11.7 seconds, 12.3%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 30
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 31
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 31
;;******************************
;; -*- Number IO problem report - generation 31
Test total error for best: 59460.0
Test mean error for best: 29.73000
;;------------------------------
Outputs of best individual on training cases:
Correct output: 150.3639690164 | Program output: 45.3639690164 
Correct output: -129.2046261   | Program output: -114.2046261  
Correct output: 43.6336388837  | Program output: 37.6336388837 
Correct output: 168.6824809869 | Program output: 44.6824809869 
Correct output: -24.6347316794 | Program output: -27.6347316794
Correct output: 39.9291320135  | Program output: 17.9291320135 
Correct output: -20.9190282536 | Program output: 23.0809717464 
Correct output: 61.9263871894  | Program output: 58.9263871894 
Correct output: -28.8395473609 | Program output: -23.8395473609
Correct output: -39.146556962  | Program output: -0.146556962  
Correct output: -134.9331989268 | Program output: -111.9331989268
Correct output: -126.4496738486 | Program output: -110.4496738486
Correct output: -51.218440095  | Program output: -102.218440095
Correct output: 45.5895106217  | Program output: 26.5895106217 
Correct output: 136.6637618296 | Program output: 47.6637618296 
Correct output: -104.5625509424 | Program output: -97.5625509424
Correct output: 80.9125656746  | Program output: 11.9125656746 
Correct output: -63.4657032446 | Program output: -0.4657032446 
Correct output: -52.106433034  | Program output: -44.106433034 
Correct output: -99.9152304515 | Program output: -104.9152304515
Correct output: -78.2834351958 | Program output: -22.2834351958
Correct output: -64.2911152024 | Program output: -39.2911152024
Correct output: 93.5722006381  | Program output: -14.4277993619
Correct output: 141.452540764  | Program output: 33.452540764  
Correct output: 102.2088941323 | Program output: -14.7911058677
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_inc} {:instruction float_flush} {:instruction integer_div} {:instruction integer_add} {:instruction in2} {:instruction integer_shove} {:instruction in1} {:instruction integer_yank} {:instruction float_div} {:instruction integer_dup_items} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_dup_items} {:instruction float_dec} {:instruction float_dec} {:instruction integer_div} {:instruction integer_rot} {:instruction float_dec} {:instruction float_dec} {:instruction integer_dup_items} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_div} {:instruction float_dec} {:instruction integer_dup_items} {:instruction float_dec} {:instruction float_dec} {:instruction integer_yank} {:instruction integer_dup_times} {:instruction integer_dup_items} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_dup_items} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_div} {:instruction integer_dup_times} {:instruction integer_dup_items} {:instruction float_dec} {:instruction float_dec} {:instruction integer_div} {:instruction float_rot} {:instruction float_dec} {:instruction float_dec} {:instruction integer_flush} {:instruction print_float} {:instruction float_rot} {:instruction integer_dup_items} {:instruction float_cos} {:instruction tagged_490} {:instruction integer_min} {:instruction float_yank})
Best program: (float_inc float_flush integer_div integer_add in2 integer_shove in1 integer_yank float_div integer_dup_items float_dec float_dec float_dec float_dec integer_dup_items float_dec float_dec integer_div integer_rot float_dec float_dec integer_dup_items float_dec float_dec float_dec float_dec integer_div float_dec integer_dup_items float_dec float_dec integer_yank integer_dup_times integer_dup_items float_dec float_dec float_dec float_dec integer_dup_items float_dec float_dec float_dec float_dec integer_div integer_dup_times integer_dup_items float_dec float_dec integer_div float_rot float_dec float_dec integer_flush print_float float_rot integer_dup_items float_cos tagged_490 integer_min float_yank)
Errors: [105.0 2 15.0 2 6.0 2 124.0 3 3.0 1 22.0 2 44.0 11 3.0 2 5.0 1 39.0 2 23.0 2 16.0 2 51.0 3 19.0 2 89.0 3 7.0 3 69.0 2 63.0 2 8.0 2 5.0 3 56.0 2 25.0 2 108.0 11 108.0 3 117.0 13]
Total: 1213.0
Mean: 24.26
Genome size: 60
Size: 61
Percent parens: 0.016
--- Population Statistics ---
Average total errors in population: 2966.4599626999993
Median total errors in population: 1213.0
Error averages by case: (169.8770816 3.472 89.09996029999999 2.973 77.66863240000002 3.055 187.3533765 4.054 74.6077323 2.345 91.5903831 3.113 110.0269763 11.275 76.00956909999996 2.998 76.63628980000003 2.361 107.01734479999998 5.383 96.43534849999998 3.3 89.8784836 3.267 117.660687 3.799 89.15206960000003 3.131 155.0439692 4.065 81.07769510000003 4.025 135.0559017 3.148 129.20799080000003 5.483 79.9541476 3.056 78.73491390000001 3.986 123.5503779 3.199 95.46017040000001 3.187 171.16494079999998 10.984 172.19417880000003 3.864 179.5207416 12.958)
Error minima by case: (82.0 1 1.0 1 0.0 0 89.7539 2 0.0 0 1.0 1 0.919 8 0.0 0 0.0 0 1.1438 1 5.5407 1 1.4593 1 4.2491 1 1.0 1 66.0 1 0.0 0 46.0 1 6.7987 1 0.0 0 0.0 0 20.2231 1 7.5407 1 73.8545 1 85.0 1 82.4912 3)
Average genome size in population (length): 59.067
Average program size in population (points): 60.067
Average percent parens in population: 0.017
Minimum age in population: 43.35690261051059
Maximum age in population: 47.51893899496645
Average age in population: 45.60593217798788
Median age in population: 45.67134692287073
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 10
Genome diversity (% unique Plush genomes):	 0.798
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 10
Syntactic diversity (% unique Push programs):	 0.798
Total error diversity:				 0.073
Error (vector) diversity:			 0.077
Behavioral diversity:				 0.078
--- Run Statistics ---
Number of program evaluations used so far: 32000
Number of point (instruction) evaluations so far: 37741555
--- Timings ---
Current time: 1529615548700 milliseconds
Total Time:          98.7 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        35.9 seconds, 36.4%
Fitness Testing:     50.5 seconds, 51.1%
Report:              12.2 seconds, 12.3%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 31
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 32
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 32
;;******************************
;; -*- Number IO problem report - generation 32
Test total error for best: 59460.0
Test mean error for best: 29.73000
;;------------------------------
Outputs of best individual on training cases:
Correct output: 150.3639690164 | Program output: 45.3639690164 
Correct output: -129.2046261   | Program output: -114.2046261  
Correct output: 43.6336388837  | Program output: 37.6336388837 
Correct output: 168.6824809869 | Program output: 44.6824809869 
Correct output: -24.6347316794 | Program output: -27.6347316794
Correct output: 39.9291320135  | Program output: 17.9291320135 
Correct output: -20.9190282536 | Program output: 23.0809717464 
Correct output: 61.9263871894  | Program output: 58.9263871894 
Correct output: -28.8395473609 | Program output: -23.8395473609
Correct output: -39.146556962  | Program output: -0.146556962  
Correct output: -134.9331989268 | Program output: -111.9331989268
Correct output: -126.4496738486 | Program output: -110.4496738486
Correct output: -51.218440095  | Program output: -102.218440095
Correct output: 45.5895106217  | Program output: 26.5895106217 
Correct output: 136.6637618296 | Program output: 47.6637618296 
Correct output: -104.5625509424 | Program output: -97.5625509424
Correct output: 80.9125656746  | Program output: 11.9125656746 
Correct output: -63.4657032446 | Program output: -0.4657032446 
Correct output: -52.106433034  | Program output: -44.106433034 
Correct output: -99.9152304515 | Program output: -104.9152304515
Correct output: -78.2834351958 | Program output: -22.2834351958
Correct output: -64.2911152024 | Program output: -39.2911152024
Correct output: 93.5722006381  | Program output: -14.4277993619
Correct output: 141.452540764  | Program output: 33.452540764  
Correct output: 102.2088941323 | Program output: -14.7911058677
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_inc} {:instruction float_flush} {:instruction integer_div} {:instruction integer_add} {:instruction print_float} {:instruction integer_shove} {:instruction in1} {:instruction integer_yank} {:instruction float_div} {:instruction integer_dup_items} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_div} {:instruction float_sub} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_div} {:instruction float_dec} {:instruction float_dec} {:instruction integer_div} {:instruction float_dec} {:instruction integer_dup_times} {:instruction integer_dup_times} {:instruction integer_dup_items} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_inc} {:instruction integer_dup_items} {:instruction float_dec} {:instruction integer_dup_items} {:instruction float_dec} {:instruction float_sub} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_div} {:instruction float_dec} {:instruction integer_swap} {:instruction integer_dup_times} {:instruction integer_dup_items} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_dup_times} {:instruction integer_dup_items} {:instruction float_dec} {:instruction float_dec} {:instruction tag_integer_316} {:instruction print_float} {:instruction float_rot} {:instruction integer_dup_items} {:instruction print_integer} {:instruction tagged_490})
Best program: (float_inc float_flush integer_div integer_add print_float integer_shove in1 integer_yank float_div integer_dup_items float_dec float_dec float_dec float_dec float_dec integer_div float_sub float_dec float_dec float_dec float_dec integer_div float_dec float_dec integer_div float_dec integer_dup_times integer_dup_times integer_dup_items float_dec float_dec float_dec integer_inc integer_dup_items float_dec integer_dup_items float_dec float_sub float_dec float_dec float_dec float_dec integer_div float_dec integer_swap integer_dup_times integer_dup_items float_dec float_dec float_dec integer_dup_times integer_dup_items float_dec float_dec tag_integer_316 print_float float_rot integer_dup_items print_integer tagged_490)
Errors: [105.0 2 15.0 2 6.0 2 124.0 3 3.0 1 22.0 2 44.0 11 3.0 2 5.0 1 39.0 2 23.0 2 16.0 2 51.0 3 19.0 2 89.0 3 7.0 3 69.0 2 63.0 2 8.0 2 5.0 3 56.0 2 25.0 2 108.0 11 108.0 3 117.0 13]
Total: 1213.0
Mean: 24.26
Genome size: 60
Size: 61
Percent parens: 0.016
--- Population Statistics ---
Average total errors in population: 3066.2204247
Median total errors in population: 1213.0
Error averages by case: (174.6022467 3.393 92.33391800000001 2.928 82.7944907 3.004 191.86943469999997 3.983 77.63686250000002 2.278 96.51098199999998 3.037 116.26939799999998 11.29 80.64045850000001 2.951 79.38971930000001 2.235 110.361283 4.994 100.49377759999999 3.203 93.23375580000001 3.204 123.07042059999998 3.795 94.54555699999999 3.05 159.485341 3.989 84.6661171 3.965 139.46082110000003 3.039 132.54312819999998 5.087 83.91069899999998 3.007 82.55263780000001 3.944 126.5568463 3.115 99.17653200000001 3.108 174.7277763 11.043 176.7269405 3.82 182.19128099999995 13.008)
Error minima by case: (82.0 1 5.0 1 0.0 0 101.0 2 0.0 0 1.0 1 0.8096 8 0.0 0 0.0 0 8.5438 1 0.2041 1 6.0 1 14.6863 1 4.0 1 66.0 2 0.0 0 29.5843 1 2.439 1 0.0 0 0.0 0 12.3787 1 1.6136 1 42.2439 2 85.0 1 50.8806 3)
Average genome size in population (length): 58.795
Average program size in population (points): 59.795
Average percent parens in population: 0.017
Minimum age in population: 44.42707385122776
Maximum age in population: 48.8865285795182
Average age in population: 46.97829218830401
Median age in population: 46.99357145093381
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 7
Genome diversity (% unique Plush genomes):	 0.788
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 7
Syntactic diversity (% unique Push programs):	 0.788
Total error diversity:				 0.06
Error (vector) diversity:			 0.067
Behavioral diversity:				 0.068
--- Run Statistics ---
Number of program evaluations used so far: 33000
Number of point (instruction) evaluations so far: 39211455
--- Timings ---
Current time: 1529615551875 milliseconds
Total Time:         101.9 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        37.0 seconds, 36.4%
Fitness Testing:     52.1 seconds, 51.1%
Report:              12.6 seconds, 12.4%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 32
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 33
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 33
;;******************************
;; -*- Number IO problem report - generation 33
Test total error for best: 59460.0
Test mean error for best: 29.73000
;;------------------------------
Outputs of best individual on training cases:
Correct output: 150.3639690164 | Program output: 45.3639690164 
Correct output: -129.2046261   | Program output: -114.2046261  
Correct output: 43.6336388837  | Program output: 37.6336388837 
Correct output: 168.6824809869 | Program output: 44.6824809869 
Correct output: -24.6347316794 | Program output: -27.6347316794
Correct output: 39.9291320135  | Program output: 17.9291320135 
Correct output: -20.9190282536 | Program output: 23.0809717464 
Correct output: 61.9263871894  | Program output: 58.9263871894 
Correct output: -28.8395473609 | Program output: -23.8395473609
Correct output: -39.146556962  | Program output: -0.146556962  
Correct output: -134.9331989268 | Program output: -111.9331989268
Correct output: -126.4496738486 | Program output: -110.4496738486
Correct output: -51.218440095  | Program output: -102.218440095
Correct output: 45.5895106217  | Program output: 26.5895106217 
Correct output: 136.6637618296 | Program output: 47.6637618296 
Correct output: -104.5625509424 | Program output: -97.5625509424
Correct output: 80.9125656746  | Program output: 11.9125656746 
Correct output: -63.4657032446 | Program output: -0.4657032446 
Correct output: -52.106433034  | Program output: -44.106433034 
Correct output: -99.9152304515 | Program output: -104.9152304515
Correct output: -78.2834351958 | Program output: -22.2834351958
Correct output: -64.2911152024 | Program output: -39.2911152024
Correct output: 93.5722006381  | Program output: -14.4277993619
Correct output: 141.452540764  | Program output: 33.452540764  
Correct output: 102.2088941323 | Program output: -14.7911058677
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_dup} {:instruction float_cos} {:instruction float_inc} {:instruction float_yank} {:instruction integer_add} {:instruction print_float} {:instruction float_dec} {:instruction in1} {:instruction integer_yank} {:instruction integer_dup_items} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_div} {:instruction float_dec} {:instruction float_dec} {:instruction integer_dup_times} {:instruction float_dec} {:instruction integer_div} {:instruction float_sub} {:instruction float_dec} {:instruction float_dec} {:instruction tagged_988} {:instruction float_dec} {:instruction integer_div} {:instruction float_dec} {:instruction integer_dup_items} {:instruction float_dec} {:instruction float_dec} {:instruction integer_yank} {:instruction integer_dup_times} {:instruction integer_dup_items} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_dup_items} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_div} {:instruction integer_dup_times} {:instruction integer_dup_items} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_div} {:instruction print_float} {:instruction float_rot} {:instruction integer_dup_items} {:instruction float_cos} {:instruction tagged_490} {:instruction integer_min} {:instruction integer_dup_items})
Best program: (float_dup float_cos float_inc float_yank integer_add print_float float_dec in1 integer_yank integer_dup_items float_dec float_dec float_dec float_dec integer_div float_dec float_dec integer_dup_times float_dec integer_div float_sub float_dec float_dec tagged_988 float_dec integer_div float_dec integer_dup_items float_dec float_dec integer_yank integer_dup_times integer_dup_items float_dec float_dec float_dec float_dec integer_dup_items float_dec float_dec float_dec float_dec integer_div integer_dup_times integer_dup_items float_dec float_dec float_dec float_dec float_dec float_dec integer_div print_float float_rot integer_dup_items float_cos tagged_490 integer_min integer_dup_items)
Errors: [105.0 2 15.0 2 6.0 2 124.0 3 3.0 1 22.0 2 44.0 11 3.0 2 5.0 1 39.0 2 23.0 2 16.0 2 51.0 3 19.0 2 89.0 3 7.0 3 69.0 2 63.0 2 8.0 2 5.0 3 56.0 2 25.0 2 108.0 11 108.0 3 117.0 13]
Total: 1213.0
Mean: 24.26
Genome size: 59
Size: 60
Percent parens: 0.017
--- Population Statistics ---
Average total errors in population: 2985.8463100999984
Median total errors in population: 1213.0
Error averages by case: (170.96615890000004 3.458 89.4416974 2.962 79.38652569999999 3.06 188.59051680000002 4.042 74.76427419999999 2.328 93.22246089999997 3.095 112.27343440000004 11.301 77.56718769999996 3.007 76.74551430000001 2.357 107.4748767 5.166 96.76016179999999 3.278 90.25000349999998 3.264 118.72055359999997 3.806 90.74377009999998 3.11 156.1545908 4.06 81.57904779999997 4.003 136.21075869999999 3.112 129.66914090000003 5.263 80.7198568 3.054 79.33847710000002 3.986 123.64852140000002 3.201 96.04817500000001 3.172 170.95818369999998 10.987 173.3913597 3.856 179.37306220000002 12.92)
Error minima by case: (32.636 1 1.0 1 0.0 0 52.3175 2 0.0 0 1.0 1 0.6762 8 0.0 0 0.0 0 1.2216 1 5.7637 1 2.0 1 7.4412 1 2.0 1 14.3362 2 0.0 0 29.2963 1 4.806 1 0.0 0 0.0 0 12.6762 1 3.7637 1 34.3107 2 47.5475 1 77.2963 1)
Average genome size in population (length): 59.066
Average program size in population (points): 60.066
Average percent parens in population: 0.017
Minimum age in population: 45.97416332131252
Maximum age in population: 50.47931575821713
Average age in population: 48.47894403136568
Median age in population: 48.53362197463866
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 9
Genome diversity (% unique Plush genomes):	 0.804
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 9
Syntactic diversity (% unique Push programs):	 0.804
Total error diversity:				 0.071
Error (vector) diversity:			 0.077
Behavioral diversity:				 0.078
--- Run Statistics ---
Number of program evaluations used so far: 34000
Number of point (instruction) evaluations so far: 40688130
--- Timings ---
Current time: 1529615554997 milliseconds
Total Time:         105.0 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        38.1 seconds, 36.3%
Fitness Testing:     53.7 seconds, 51.1%
Report:              13.1 seconds, 12.4%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 33
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 34
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 34
;;******************************
;; -*- Number IO problem report - generation 34
Test total error for best: 59460.0
Test mean error for best: 29.73000
;;------------------------------
Outputs of best individual on training cases:
Correct output: 150.3639690164 | Program output: 45.3639690164 
Correct output: -129.2046261   | Program output: -114.2046261  
Correct output: 43.6336388837  | Program output: 37.6336388837 
Correct output: 168.6824809869 | Program output: 44.6824809869 
Correct output: -24.6347316794 | Program output: -27.6347316794
Correct output: 39.9291320135  | Program output: 17.9291320135 
Correct output: -20.9190282536 | Program output: 23.0809717464 
Correct output: 61.9263871894  | Program output: 58.9263871894 
Correct output: -28.8395473609 | Program output: -23.8395473609
Correct output: -39.146556962  | Program output: -0.146556962  
Correct output: -134.9331989268 | Program output: -111.9331989268
Correct output: -126.4496738486 | Program output: -110.4496738486
Correct output: -51.218440095  | Program output: -102.218440095
Correct output: 45.5895106217  | Program output: 26.5895106217 
Correct output: 136.6637618296 | Program output: 47.6637618296 
Correct output: -104.5625509424 | Program output: -97.5625509424
Correct output: 80.9125656746  | Program output: 11.9125656746 
Correct output: -63.4657032446 | Program output: -0.4657032446 
Correct output: -52.106433034  | Program output: -44.106433034 
Correct output: -99.9152304515 | Program output: -104.9152304515
Correct output: -78.2834351958 | Program output: -22.2834351958
Correct output: -64.2911152024 | Program output: -39.2911152024
Correct output: 93.5722006381  | Program output: -14.4277993619
Correct output: 141.452540764  | Program output: 33.452540764  
Correct output: 102.2088941323 | Program output: -14.7911058677
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_inc} {:instruction float_yank} {:instruction float_mult} {:instruction float_yank} {:instruction float_yankdup} {:instruction in1} {:instruction integer_yank} {:instruction float_dec} {:instruction float_dec} {:instruction integer_yank} {:instruction float_dec} {:instruction integer_yankdup} {:instruction float_dec} {:instruction float_dec} {:instruction integer_div} {:instruction float_dec} {:instruction integer_div} {:instruction float_sub} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_div} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_div} {:instruction float_sub} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_div} {:instruction integer_yank} {:instruction integer_dup_times} {:instruction integer_dup_items} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_dup_items} {:instruction float_dec} {:instruction float_dec} {:instruction integer_div} {:instruction float_sub} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction in2} {:instruction print_float} {:instruction print_float} {:instruction float_rot} {:instruction float_cos} {:instruction tagged_490} {:instruction integer_min} {:instruction integer_dup_items})
Best program: (float_inc float_yank float_mult float_yank float_yankdup in1 integer_yank float_dec float_dec integer_yank float_dec integer_yankdup float_dec float_dec integer_div float_dec integer_div float_sub float_dec float_dec float_dec float_dec integer_div float_dec float_dec float_dec integer_div float_sub float_dec float_dec float_dec float_dec integer_div integer_yank integer_dup_times integer_dup_items float_dec float_dec float_dec float_dec integer_dup_items float_dec float_dec integer_div float_sub float_dec float_dec float_dec float_dec in2 print_float print_float float_rot float_cos tagged_490 integer_min integer_dup_items)
Errors: [105.0 2 15.0 2 6.0 2 124.0 3 3.0 1 22.0 2 44.0 11 3.0 2 5.0 1 39.0 2 23.0 2 16.0 2 51.0 3 19.0 2 89.0 3 7.0 3 69.0 2 63.0 2 8.0 2 5.0 3 56.0 2 25.0 2 108.0 11 108.0 3 117.0 13]
Total: 1213.0
Mean: 24.26
Genome size: 57
Size: 58
Percent parens: 0.017
--- Population Statistics ---
Average total errors in population: 2872.908075399999
Median total errors in population: 1213.0
Error averages by case: (166.56864420000005 3.379 84.78596779999998 2.897 74.24916190000002 2.968 184.30531319999994 3.972 70.5512413 2.263 88.28945119999999 3.034 107.37965789999997 11.262 72.44373269999998 2.914 72.6363843 2.291 103.38587709999999 5.143 92.17892049999998 3.195 85.60876069999999 3.183 113.94027159999997 3.732 85.79663029999999 3.026 151.7558668 3.973 76.79391310000001 3.914 131.88432790000005 3.042 125.787128 5.234 75.9686057 2.978 74.51485390000002 3.888 120.0559822 3.116 91.68759120000001 3.094 167.35830329999996 10.987 168.99363340000002 3.798 175.75185519999997 12.953)
Error minima by case: (80.0 1 1.0 1 0.0 0 99.0 1 0.0 0 2.0 1 0.081 8 0.0 0 0.0 0 6.5257 1 9.0 1 2.0 1 3.6134 2 4.0 1 64.0 2 0.0 0 24.6102 1 23.6883 1 0.0 0 0.0 0 8.8705 1 11.0 1 37.2698 1 83.0 1 45.9065 1)
Average genome size in population (length): 58.739
Average program size in population (points): 59.739
Average percent parens in population: 0.017
Minimum age in population: 46.99478936661035
Maximum age in population: 51.78055637876969
Average age in population: 49.87880943567248
Median age in population: 49.94869408220984
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 9
Genome diversity (% unique Plush genomes):	 0.801
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 9
Syntactic diversity (% unique Push programs):	 0.801
Total error diversity:				 0.067
Error (vector) diversity:			 0.072
Behavioral diversity:				 0.073
--- Run Statistics ---
Number of program evaluations used so far: 35000
Number of point (instruction) evaluations so far: 42156630
--- Timings ---
Current time: 1529615558067 milliseconds
Total Time:         108.1 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        39.2 seconds, 36.3%
Fitness Testing:     55.3 seconds, 51.2%
Report:              13.5 seconds, 12.5%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 34
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 35
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 35
;;******************************
;; -*- Number IO problem report - generation 35
Test total error for best: 59460.0
Test mean error for best: 29.73000
;;------------------------------
Outputs of best individual on training cases:
Correct output: 150.3639690164 | Program output: 45.3639690164 
Correct output: -129.2046261   | Program output: -114.2046261  
Correct output: 43.6336388837  | Program output: 37.6336388837 
Correct output: 168.6824809869 | Program output: 44.6824809869 
Correct output: -24.6347316794 | Program output: -27.6347316794
Correct output: 39.9291320135  | Program output: 17.9291320135 
Correct output: -20.9190282536 | Program output: 23.0809717464 
Correct output: 61.9263871894  | Program output: 58.9263871894 
Correct output: -28.8395473609 | Program output: -23.8395473609
Correct output: -39.146556962  | Program output: -0.146556962  
Correct output: -134.9331989268 | Program output: -111.9331989268
Correct output: -126.4496738486 | Program output: -110.4496738486
Correct output: -51.218440095  | Program output: -102.218440095
Correct output: 45.5895106217  | Program output: 26.5895106217 
Correct output: 136.6637618296 | Program output: 47.6637618296 
Correct output: -104.5625509424 | Program output: -97.5625509424
Correct output: 80.9125656746  | Program output: 11.9125656746 
Correct output: -63.4657032446 | Program output: -0.4657032446 
Correct output: -52.106433034  | Program output: -44.106433034 
Correct output: -99.9152304515 | Program output: -104.9152304515
Correct output: -78.2834351958 | Program output: -22.2834351958
Correct output: -64.2911152024 | Program output: -39.2911152024
Correct output: 93.5722006381  | Program output: -14.4277993619
Correct output: 141.452540764  | Program output: 33.452540764  
Correct output: 102.2088941323 | Program output: -14.7911058677
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_inc} {:instruction float_yank} {:instruction float_mult} {:instruction float_yank} {:instruction float_yankdup} {:instruction in1} {:instruction integer_yank} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_yankdup} {:instruction float_dec} {:instruction float_dec} {:instruction integer_div} {:instruction integer_dup_items} {:instruction float_dec} {:instruction float_dec} {:instruction integer_dup_items} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_div} {:instruction float_dec} {:instruction integer_dup_items} {:instruction float_dec} {:instruction float_dec} {:instruction integer_yank} {:instruction integer_dup_times} {:instruction integer_dup_items} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_dup_items} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_div} {:instruction integer_dup_times} {:instruction integer_dup_items} {:instruction float_dec} {:instruction float_dec} {:instruction integer_div} {:instruction float_rot} {:instruction float_dec} {:instruction float_dec} {:instruction integer_div} {:instruction print_float} {:instruction float_rot} {:instruction integer_dup_items} {:instruction float_cos} {:instruction tagged_490} {:instruction integer_min} {:instruction integer_pop})
Best program: (float_inc float_yank float_mult float_yank float_yankdup in1 integer_yank float_dec float_dec float_dec float_dec integer_yankdup float_dec float_dec integer_div integer_dup_items float_dec float_dec integer_dup_items float_dec float_dec float_dec float_dec integer_div float_dec integer_dup_items float_dec float_dec integer_yank integer_dup_times integer_dup_items float_dec float_dec float_dec float_dec integer_dup_items float_dec float_dec float_dec float_dec integer_div integer_dup_times integer_dup_items float_dec float_dec integer_div float_rot float_dec float_dec integer_div print_float float_rot integer_dup_items float_cos tagged_490 integer_min integer_pop)
Errors: [105.0 2 15.0 2 6.0 2 124.0 3 3.0 1 22.0 2 44.0 11 3.0 2 5.0 1 39.0 2 23.0 2 16.0 2 51.0 3 19.0 2 89.0 3 7.0 3 69.0 2 63.0 2 8.0 2 5.0 3 56.0 2 25.0 2 108.0 11 108.0 3 117.0 13]
Total: 1213.0
Mean: 24.26
Genome size: 57
Size: 58
Percent parens: 0.017
--- Population Statistics ---
Average total errors in population: 2933.529982599999
Median total errors in population: 1213.0
Error averages by case: (168.84922760000003 3.365 86.56496389999997 2.857 76.95819130000001 2.931 186.49772079999994 3.911 73.33923069999999 2.214 91.02769469999998 2.98 110.35774530000002 11.308 74.92007849999999 2.894 75.17897199999999 2.225 106.15944099999997 4.988 93.9322998 3.153 87.44499829999997 3.141 116.83472799999997 3.714 88.4853423 2.975 154.0178145 3.922 78.7409952 3.885 134.5530655 2.971 128.53911870000002 5.067 78.38968229999999 2.939 76.75640790000001 3.901 122.6332256 3.088 94.09203860000002 3.059 170.20136019999998 10.972 171.37423120000003 3.748 178.55340869999998 12.92)
Error minima by case: (78.0 1 5.0 1 0.0 0 97.0 2 0.0 0 1.0 1 0.081 8 0.0 0 0.0 0 7.5257 1 13.0 1 6.0 1 23.2126 1 0.0 0 62.0 2 0.0 0 42.0 1 34.9068 1 0.0 0 0.0 0 46.0 1 15.0 1 78.5722 2 81.0 1 87.2089 1)
Average genome size in population (length): 58.544
Average program size in population (points): 59.544
Average percent parens in population: 0.017
Minimum age in population: 47.99478936661035
Maximum age in population: 53.18811403069412
Average age in population: 51.25426931732713
Median age in population: 51.27547991074971
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 12
Genome diversity (% unique Plush genomes):	 0.808
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 12
Syntactic diversity (% unique Push programs):	 0.808
Total error diversity:				 0.059
Error (vector) diversity:			 0.063
Behavioral diversity:				 0.064
--- Run Statistics ---
Number of program evaluations used so far: 36000
Number of point (instruction) evaluations so far: 43620255
--- Timings ---
Current time: 1529615561172 milliseconds
Total Time:         111.2 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        40.2 seconds, 36.2%
Fitness Testing:     56.9 seconds, 51.2%
Report:              13.9 seconds, 12.5%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 35
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 36
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 36
;;******************************
;; -*- Number IO problem report - generation 36
Test total error for best: 59460.0
Test mean error for best: 29.73000
;;------------------------------
Outputs of best individual on training cases:
Correct output: 150.3639690164 | Program output: 45.3639690164 
Correct output: -129.2046261   | Program output: -114.2046261  
Correct output: 43.6336388837  | Program output: 37.6336388837 
Correct output: 168.6824809869 | Program output: 44.6824809869 
Correct output: -24.6347316794 | Program output: -27.6347316794
Correct output: 39.9291320135  | Program output: 17.9291320135 
Correct output: -20.9190282536 | Program output: 23.0809717464 
Correct output: 61.9263871894  | Program output: 58.9263871894 
Correct output: -28.8395473609 | Program output: -23.8395473609
Correct output: -39.146556962  | Program output: -0.146556962  
Correct output: -134.9331989268 | Program output: -111.9331989268
Correct output: -126.4496738486 | Program output: -110.4496738486
Correct output: -51.218440095  | Program output: -102.218440095
Correct output: 45.5895106217  | Program output: 26.5895106217 
Correct output: 136.6637618296 | Program output: 47.6637618296 
Correct output: -104.5625509424 | Program output: -97.5625509424
Correct output: 80.9125656746  | Program output: 11.9125656746 
Correct output: -63.4657032446 | Program output: -0.4657032446 
Correct output: -52.106433034  | Program output: -44.106433034 
Correct output: -99.9152304515 | Program output: -104.9152304515
Correct output: -78.2834351958 | Program output: -22.2834351958
Correct output: -64.2911152024 | Program output: -39.2911152024
Correct output: 93.5722006381  | Program output: -14.4277993619
Correct output: 141.452540764  | Program output: 33.452540764  
Correct output: 102.2088941323 | Program output: -14.7911058677
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_dup} {:instruction float_cos} {:instruction float_inc} {:instruction float_yank} {:instruction float_flush} {:instruction integer_div} {:instruction in1} {:instruction integer_yank} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_yankdup} {:instruction float_dec} {:instruction float_dec} {:instruction integer_div} {:instruction integer_dup_items} {:instruction float_dec} {:instruction float_dec} {:instruction integer_div} {:instruction float_sub} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_div} {:instruction float_dec} {:instruction integer_dup_items} {:instruction float_dec} {:instruction float_dec} {:instruction integer_stackdepth} {:instruction integer_dup_times} {:instruction integer_dup_items} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_dup_items} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_div} {:instruction integer_dup_times} {:instruction integer_dup_items} {:instruction float_dec} {:instruction float_dec} {:instruction integer_div} {:instruction integer_dup_times} {:instruction integer_dup_items} {:instruction float_dec} {:instruction float_dec} {:instruction integer_div} {:instruction print_float} {:instruction float_rot})
Best program: (float_dup float_cos float_inc float_yank float_flush integer_div in1 integer_yank float_dec float_dec float_dec float_dec integer_yankdup float_dec float_dec integer_div integer_dup_items float_dec float_dec integer_div float_sub float_dec float_dec float_dec float_dec integer_div float_dec integer_dup_items float_dec float_dec integer_stackdepth integer_dup_times integer_dup_items float_dec float_dec float_dec float_dec integer_dup_items float_dec float_dec float_dec float_dec integer_div integer_dup_times integer_dup_items float_dec float_dec integer_div integer_dup_times integer_dup_items float_dec float_dec integer_div print_float float_rot)
Errors: [105.0 2 15.0 2 6.0 2 124.0 3 3.0 1 22.0 2 44.0 11 3.0 2 5.0 1 39.0 2 23.0 2 16.0 2 51.0 3 19.0 2 89.0 3 7.0 3 69.0 2 63.0 2 8.0 2 5.0 3 56.0 2 25.0 2 108.0 11 108.0 3 117.0 13]
Total: 1213.0
Mean: 24.26
Genome size: 55
Size: 56
Percent parens: 0.018
--- Population Statistics ---
Average total errors in population: 2793.4784314
Median total errors in population: 1213.0
Error averages by case: (163.404673 3.293 81.383557 2.832 70.87016089999999 2.887 181.07652860000002 3.876 67.40523549999999 2.16 85.034129 2.94 104.7696934 11.298 68.95416539999998 2.817 69.50783019999999 2.15 100.60845540000001 5.177 88.77689189999998 3.107 82.20052759999999 3.089 111.29358219999996 3.667 82.49366029999999 2.945 148.4849108 3.884 73.4298392 3.822 128.7827046 2.937 123.06739639999998 5.249 72.8128331 2.896 71.15677090000001 3.83 117.33047460000002 3.017 88.5685302 3.002 164.59058140000002 11.002 165.8910263 3.714 173.04027349999996 12.953)
Error minima by case: (34.636 1 5.0 1 0.0 0 54.3175 2 0.0 0 1.0 1 0.0175 7 0.0 0 0.0 0 9.9972 1 13.0 1 6.0 1 23.2023 1 1.0 1 16.3362 2 0.0 0 26.8955 1 24.7517 1 0.0 0 0.0 0 46.0 1 10.7089 1 39.5551 2 49.5475 1 48.1918 2)
Average genome size in population (length): 58.205
Average program size in population (points): 59.205
Average percent parens in population: 0.017
Minimum age in population: 50.02579328464344
Maximum age in population: 54.73823437368264
Average age in population: 52.6424671893476
Median age in population: 52.69553711212939
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 9
Genome diversity (% unique Plush genomes):	 0.798
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 9
Syntactic diversity (% unique Push programs):	 0.798
Total error diversity:				 0.065
Error (vector) diversity:			 0.072
Behavioral diversity:				 0.073
--- Run Statistics ---
Number of program evaluations used so far: 37000
Number of point (instruction) evaluations so far: 45075405
--- Timings ---
Current time: 1529615564283 milliseconds
Total Time:         114.3 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        41.3 seconds, 36.2%
Fitness Testing:     58.5 seconds, 51.2%
Report:              14.3 seconds, 12.5%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 36
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 37
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 37
;;******************************
;; -*- Number IO problem report - generation 37
Test total error for best: 59460.0
Test mean error for best: 29.73000
;;------------------------------
Outputs of best individual on training cases:
Correct output: 150.3639690164 | Program output: 45.3639690164 
Correct output: -129.2046261   | Program output: -114.2046261  
Correct output: 43.6336388837  | Program output: 37.6336388837 
Correct output: 168.6824809869 | Program output: 44.6824809869 
Correct output: -24.6347316794 | Program output: -27.6347316794
Correct output: 39.9291320135  | Program output: 17.9291320135 
Correct output: -20.9190282536 | Program output: 23.0809717464 
Correct output: 61.9263871894  | Program output: 58.9263871894 
Correct output: -28.8395473609 | Program output: -23.8395473609
Correct output: -39.146556962  | Program output: -0.146556962  
Correct output: -134.9331989268 | Program output: -111.9331989268
Correct output: -126.4496738486 | Program output: -110.4496738486
Correct output: -51.218440095  | Program output: -102.218440095
Correct output: 45.5895106217  | Program output: 26.5895106217 
Correct output: 136.6637618296 | Program output: 47.6637618296 
Correct output: -104.5625509424 | Program output: -97.5625509424
Correct output: 80.9125656746  | Program output: 11.9125656746 
Correct output: -63.4657032446 | Program output: -0.4657032446 
Correct output: -52.106433034  | Program output: -44.106433034 
Correct output: -99.9152304515 | Program output: -104.9152304515
Correct output: -78.2834351958 | Program output: -22.2834351958
Correct output: -64.2911152024 | Program output: -39.2911152024
Correct output: 93.5722006381  | Program output: -14.4277993619
Correct output: 141.452540764  | Program output: 33.452540764  
Correct output: 102.2088941323 | Program output: -14.7911058677
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_dup} {:instruction float_cos} {:instruction float_inc} {:instruction float_yank} {:instruction in1} {:instruction integer_yank} {:instruction float_div} {:instruction integer_dup_items} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_dup_items} {:instruction float_dec} {:instruction float_dec} {:instruction float_min} {:instruction integer_dup_items} {:instruction float_dec} {:instruction float_dec} {:instruction integer_yankdup} {:instruction float_dec} {:instruction float_dec} {:instruction integer_div} {:instruction integer_dup_items} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_yank} {:instruction integer_dup_times} {:instruction integer_dup_items} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_dup_items} {:instruction float_dec} {:instruction float_dec} {:instruction integer_mod} {:instruction float_dec} {:instruction integer_div} {:instruction integer_dup_times} {:instruction integer_dup_items} {:instruction float_dec} {:instruction float_dec} {:instruction integer_div} {:instruction tagged_490} {:instruction float_dec} {:instruction float_dec} {:instruction integer_dup_items} {:instruction float_dec} {:instruction integer_div} {:instruction print_float} {:instruction float_rot} {:instruction integer_dup_items} {:instruction float_cos} {:instruction tagged_490} {:instruction integer_min} {:instruction integer_pop})
Best program: (float_dup float_cos float_inc float_yank in1 integer_yank float_div integer_dup_items float_dec float_dec float_dec float_dec integer_dup_items float_dec float_dec float_min integer_dup_items float_dec float_dec integer_yankdup float_dec float_dec integer_div integer_dup_items float_dec float_dec float_dec float_dec float_dec integer_yank integer_dup_times integer_dup_items float_dec float_dec float_dec float_dec integer_dup_items float_dec float_dec integer_mod float_dec integer_div integer_dup_times integer_dup_items float_dec float_dec integer_div tagged_490 float_dec float_dec integer_dup_items float_dec integer_div print_float float_rot integer_dup_items float_cos tagged_490 integer_min integer_pop)
Errors: [105.0 2 15.0 2 6.0 2 124.0 3 3.0 1 22.0 2 44.0 11 3.0 2 5.0 1 39.0 2 23.0 2 16.0 2 51.0 3 19.0 2 89.0 3 7.0 3 69.0 2 63.0 2 8.0 2 5.0 3 56.0 2 25.0 2 108.0 11 108.0 3 117.0 13]
Total: 1213.0
Mean: 24.26
Genome size: 60
Size: 61
Percent parens: 0.016
--- Population Statistics ---
Average total errors in population: 3442.2035647999987
Median total errors in population: 1213.0
Error averages by case: (187.82638870000008 3.677 108.01947499999997 3.141 98.06409040000001 3.232 205.08146519999997 4.192 93.52809789999998 2.551 111.73386329999994 3.276 130.52944379999994 11.368 96.25589269999996 3.176 95.60995270000001 2.581 125.95776249999994 5.54 115.22914899999999 3.479 108.83876339999996 3.479 136.6545071 3.963 109.3050762 3.289 173.3573768 4.233 100.35159910000003 4.223 153.98616980000003 3.319 147.7095123 5.661 99.38772180000005 3.227 98.0471936 4.173 141.6524126 3.393 114.40275210000004 3.383 187.83715559999996 11.051 190.21982000000008 4.034 196.02192319999997 12.955)
Error minima by case: (21.0794 1 0.0 0 0.0 0 40.0794 2 0.0 0 0.0 0 0.081 8 0.0 0 0.0 0 11.9972 1 1.0 1 1.0 1 6.0855 2 2.0 1 5.0794 2 0.0 0 14.9206 1 6.1618 1 0.0 0 0.0 0 9.3014 1 3.0 1 24.0794 2 24.0794 1 33.0794 2)
Average genome size in population (length): 57.987
Average program size in population (points): 58.987
Average percent parens in population: 0.017
Minimum age in population: 51.28347685537301
Maximum age in population: 56.04202366371464
Average age in population: 54.03325494984855
Median age in population: 54.03490090742707
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 11
Genome diversity (% unique Plush genomes):	 0.794
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 11
Syntactic diversity (% unique Push programs):	 0.794
Total error diversity:				 0.069
Error (vector) diversity:			 0.074
Behavioral diversity:				 0.075
--- Run Statistics ---
Number of program evaluations used so far: 38000
Number of point (instruction) evaluations so far: 46525155
--- Timings ---
Current time: 1529615567369 milliseconds
Total Time:         117.4 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        42.4 seconds, 36.1%
Fitness Testing:     60.1 seconds, 51.2%
Report:              14.8 seconds, 12.6%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 37
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 38
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 38
;;******************************
;; -*- Number IO problem report - generation 38
Test total error for best: 59460.0
Test mean error for best: 29.73000
;;------------------------------
Outputs of best individual on training cases:
Correct output: 150.3639690164 | Program output: 45.3639690164 
Correct output: -129.2046261   | Program output: -114.2046261  
Correct output: 43.6336388837  | Program output: 37.6336388837 
Correct output: 168.6824809869 | Program output: 44.6824809869 
Correct output: -24.6347316794 | Program output: -27.6347316794
Correct output: 39.9291320135  | Program output: 17.9291320135 
Correct output: -20.9190282536 | Program output: 23.0809717464 
Correct output: 61.9263871894  | Program output: 58.9263871894 
Correct output: -28.8395473609 | Program output: -23.8395473609
Correct output: -39.146556962  | Program output: -0.146556962  
Correct output: -134.9331989268 | Program output: -111.9331989268
Correct output: -126.4496738486 | Program output: -110.4496738486
Correct output: -51.218440095  | Program output: -102.218440095
Correct output: 45.5895106217  | Program output: 26.5895106217 
Correct output: 136.6637618296 | Program output: 47.6637618296 
Correct output: -104.5625509424 | Program output: -97.5625509424
Correct output: 80.9125656746  | Program output: 11.9125656746 
Correct output: -63.4657032446 | Program output: -0.4657032446 
Correct output: -52.106433034  | Program output: -44.106433034 
Correct output: -99.9152304515 | Program output: -104.9152304515
Correct output: -78.2834351958 | Program output: -22.2834351958
Correct output: -64.2911152024 | Program output: -39.2911152024
Correct output: 93.5722006381  | Program output: -14.4277993619
Correct output: 141.452540764  | Program output: 33.452540764  
Correct output: 102.2088941323 | Program output: -14.7911058677
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_inc} {:instruction float_yank} {:instruction float_mult} {:instruction float_yank} {:instruction float_yankdup} {:instruction in1} {:instruction integer_yank} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_yankdup} {:instruction float_dec} {:instruction float_dec} {:instruction integer_div} {:instruction integer_dup_items} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_dup_items} {:instruction float_dec} {:instruction float_dec} {:instruction integer_div} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_dup_items} {:instruction float_dec} {:instruction integer_dup_items} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_div} {:instruction integer_dup_times} {:instruction integer_dup_items} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_div} {:instruction print_float} {:instruction float_rot} {:instruction integer_dup_items} {:instruction float_cos} {:instruction tagged_490} {:instruction integer_min} {:instruction integer_dup_items})
Best program: (float_inc float_yank float_mult float_yank float_yankdup in1 integer_yank float_dec float_dec float_dec float_dec integer_yankdup float_dec float_dec integer_div integer_dup_items float_dec float_dec float_dec float_dec float_dec integer_dup_items float_dec float_dec integer_div float_dec float_dec float_dec integer_dup_items float_dec integer_dup_items float_dec float_dec float_dec float_dec integer_div integer_dup_times integer_dup_items float_dec float_dec float_dec float_dec float_dec float_dec integer_div print_float float_rot integer_dup_items float_cos tagged_490 integer_min integer_dup_items)
Errors: [105.0 2 15.0 2 6.0 2 124.0 3 3.0 1 22.0 2 44.0 11 3.0 2 5.0 1 39.0 2 23.0 2 16.0 2 51.0 3 19.0 2 89.0 3 7.0 3 69.0 2 63.0 2 8.0 2 5.0 3 56.0 2 25.0 2 108.0 11 108.0 3 117.0 13]
Total: 1213.0
Mean: 24.26
Genome size: 52
Size: 53
Percent parens: 0.019
--- Population Statistics ---
Average total errors in population: 3173.2789228999995
Median total errors in population: 1213.0
Error averages by case: (177.748788 3.502 97.01963889999998 3.013 86.96206459999999 3.097 195.17906379999997 4.063 82.54260509999999 2.374 100.86840309999997 3.118 120.15038189999999 11.318 84.96093499999998 3.007 84.61851530000003 2.391 115.56592179999997 5.386 104.25196200000002 3.301 97.83695969999998 3.309 126.4565693 3.818 98.35261429999998 3.132 163.09782649999997 4.09 89.27874140000002 4.03 143.72133669999997 3.159 137.5501592 5.48 88.20695340000003 3.083 87.04000490000001 4.033 131.2002617 3.243 103.46169000000002 3.221 177.8874573 11.004 180.16655460000007 3.885 186.1355144 12.961)
Error minima by case: (65.5084 1 2.0 1 0.0 0 75.6825 1 0.0 0 1.0 1 0.1491 8 0.0 0 0.0 0 5.4027 1 10.0 1 3.0 1 3.2379 1 1.0 1 49.5084 2 0.0 0 5.0296 1 8.0986 1 0.0 0 0.0 0 8.7166 1 8.2911 1 16.5722 1 64.4525 1 16.2089 2)
Average genome size in population (length): 57.825
Average program size in population (points): 58.825
Average percent parens in population: 0.017
Minimum age in population: 53.1862055909296
Maximum age in population: 57.50313052238198
Average age in population: 55.45009839002263
Median age in population: 55.49742074721144
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 10
Genome diversity (% unique Plush genomes):	 0.78
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 10
Syntactic diversity (% unique Push programs):	 0.78
Total error diversity:				 0.071
Error (vector) diversity:			 0.075
Behavioral diversity:				 0.076
--- Run Statistics ---
Number of program evaluations used so far: 39000
Number of point (instruction) evaluations so far: 47970955
--- Timings ---
Current time: 1529615570459 milliseconds
Total Time:         120.5 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        43.5 seconds, 36.1%
Fitness Testing:     61.7 seconds, 51.2%
Report:              15.2 seconds, 12.6%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 38
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 39
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 39
;;******************************
;; -*- Number IO problem report - generation 39
Test total error for best: 59460.0
Test mean error for best: 29.73000
;;------------------------------
Outputs of best individual on training cases:
Correct output: 150.3639690164 | Program output: 45.3639690164 
Correct output: -129.2046261   | Program output: -114.2046261  
Correct output: 43.6336388837  | Program output: 37.6336388837 
Correct output: 168.6824809869 | Program output: 44.6824809869 
Correct output: -24.6347316794 | Program output: -27.6347316794
Correct output: 39.9291320135  | Program output: 17.9291320135 
Correct output: -20.9190282536 | Program output: 23.0809717464 
Correct output: 61.9263871894  | Program output: 58.9263871894 
Correct output: -28.8395473609 | Program output: -23.8395473609
Correct output: -39.146556962  | Program output: -0.146556962  
Correct output: -134.9331989268 | Program output: -111.9331989268
Correct output: -126.4496738486 | Program output: -110.4496738486
Correct output: -51.218440095  | Program output: -102.218440095
Correct output: 45.5895106217  | Program output: 26.5895106217 
Correct output: 136.6637618296 | Program output: 47.6637618296 
Correct output: -104.5625509424 | Program output: -97.5625509424
Correct output: 80.9125656746  | Program output: 11.9125656746 
Correct output: -63.4657032446 | Program output: -0.4657032446 
Correct output: -52.106433034  | Program output: -44.106433034 
Correct output: -99.9152304515 | Program output: -104.9152304515
Correct output: -78.2834351958 | Program output: -22.2834351958
Correct output: -64.2911152024 | Program output: -39.2911152024
Correct output: 93.5722006381  | Program output: -14.4277993619
Correct output: 141.452540764  | Program output: 33.452540764  
Correct output: 102.2088941323 | Program output: -14.7911058677
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction in1} {:instruction integer_yank} {:instruction integer_dup_times} {:instruction float_shove} {:instruction float_dec} {:instruction float_dec} {:instruction integer_mod} {:instruction float_dec} {:instruction integer_dup_items} {:instruction float_dec} {:instruction float_dec} {:instruction integer_div} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_dup_items} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_div} {:instruction float_dec} {:instruction integer_div} {:instruction float_dec} {:instruction float_dec} {:instruction integer_yank} {:instruction integer_dup_times} {:instruction integer_dup_items} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_dup_items} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_div} {:instruction integer_dup_times} {:instruction integer_dup_items} {:instruction float_dec} {:instruction float_dec} {:instruction integer_div} {:instruction float_rot} {:instruction float_dec} {:instruction float_dec} {:instruction integer_div} {:instruction print_float} {:instruction float_rot} {:instruction integer_dup_items} {:instruction float_cos} {:instruction tagged_490} {:instruction integer_min} {:instruction integer_pop})
Best program: (in1 integer_yank integer_dup_times float_shove float_dec float_dec integer_mod float_dec integer_dup_items float_dec float_dec integer_div float_dec float_dec float_dec integer_dup_items float_dec float_dec float_dec float_dec integer_div float_dec integer_div float_dec float_dec integer_yank integer_dup_times integer_dup_items float_dec float_dec float_dec float_dec integer_dup_items float_dec float_dec float_dec float_dec integer_div integer_dup_times integer_dup_items float_dec float_dec integer_div float_rot float_dec float_dec integer_div print_float float_rot integer_dup_items float_cos tagged_490 integer_min integer_pop)
Errors: [105.0 2 15.0 2 6.0 2 124.0 3 3.0 1 22.0 2 44.0 11 3.0 2 5.0 1 39.0 2 23.0 2 16.0 2 51.0 3 19.0 2 89.0 3 7.0 3 69.0 2 63.0 2 8.0 2 5.0 3 56.0 2 25.0 2 108.0 11 108.0 3 117.0 13]
Total: 1213.0
Mean: 24.26
Genome size: 54
Size: 55
Percent parens: 0.018
--- Population Statistics ---
Average total errors in population: 2939.493476099999
Median total errors in population: 1213.0
Error averages by case: (168.85977920000002 3.39 87.01118419999997 2.876 77.12678450000001 2.97 186.5100837 3.936 73.57246569999998 2.26 91.12867089999999 2.999 110.5307234 11.279 75.15696059999999 2.929 75.5714509 2.238 106.37551129999999 5.237 94.3951894 3.166 87.85019619999998 3.162 116.82418879999999 3.703 88.59464500000001 3.003 153.9936597 3.967 79.1994579 3.893 134.53209429999998 3.024 128.65551290000002 5.321 78.71968019999998 2.953 77.05086820000001 3.888 122.89003539999999 3.119 94.36077180000002 3.077 170.79391259999994 10.957 171.3276811 3.75 178.4419682 12.923)
Error minima by case: (16.8601 1 1.0 1 0.0 0 35.8601 2 0.0 0 1.0 1 1.919 2 0.0 0 0.0 0 5.3355 1 9.0 1 2.0 1 6.7364 2 0.0 0 0.8601 1 0.0 0 19.1399 1 18.9837 1 0.0 0 0.0 0 33.8014 1 11.0 1 19.8601 1 19.8601 1 28.8601 1)
Average genome size in population (length): 57.967
Average program size in population (points): 58.967
Average percent parens in population: 0.017
Minimum age in population: 54.23316870542476
Maximum age in population: 59.14581589627414
Average age in population: 56.85935168611595
Median age in population: 56.87869329180103
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 11
Genome diversity (% unique Plush genomes):	 0.814
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 11
Syntactic diversity (% unique Push programs):	 0.814
Total error diversity:				 0.065
Error (vector) diversity:			 0.069
Behavioral diversity:				 0.07
--- Run Statistics ---
Number of program evaluations used so far: 40000
Number of point (instruction) evaluations so far: 49420330
--- Timings ---
Current time: 1529615573487 milliseconds
Total Time:         123.5 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        44.6 seconds, 36.1%
Fitness Testing:     63.3 seconds, 51.2%
Report:              15.6 seconds, 12.6%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 39
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 40
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 40
;;******************************
;; -*- Number IO problem report - generation 40
Test total error for best: 59460.0
Test mean error for best: 29.73000
;;------------------------------
Outputs of best individual on training cases:
Correct output: 150.3639690164 | Program output: 45.3639690164 
Correct output: -129.2046261   | Program output: -114.2046261  
Correct output: 43.6336388837  | Program output: 37.6336388837 
Correct output: 168.6824809869 | Program output: 44.6824809869 
Correct output: -24.6347316794 | Program output: -27.6347316794
Correct output: 39.9291320135  | Program output: 17.9291320135 
Correct output: -20.9190282536 | Program output: 23.0809717464 
Correct output: 61.9263871894  | Program output: 58.9263871894 
Correct output: -28.8395473609 | Program output: -23.8395473609
Correct output: -39.146556962  | Program output: -0.146556962  
Correct output: -134.9331989268 | Program output: -111.9331989268
Correct output: -126.4496738486 | Program output: -110.4496738486
Correct output: -51.218440095  | Program output: -102.218440095
Correct output: 45.5895106217  | Program output: 26.5895106217 
Correct output: 136.6637618296 | Program output: 47.6637618296 
Correct output: -104.5625509424 | Program output: -97.5625509424
Correct output: 80.9125656746  | Program output: 11.9125656746 
Correct output: -63.4657032446 | Program output: -0.4657032446 
Correct output: -52.106433034  | Program output: -44.106433034 
Correct output: -99.9152304515 | Program output: -104.9152304515
Correct output: -78.2834351958 | Program output: -22.2834351958
Correct output: -64.2911152024 | Program output: -39.2911152024
Correct output: 93.5722006381  | Program output: -14.4277993619
Correct output: 141.452540764  | Program output: 33.452540764  
Correct output: 102.2088941323 | Program output: -14.7911058677
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_dec} {:instruction float_flush} {:instruction integer_div} {:instruction integer_min} {:instruction print_float} {:instruction integer_shove} {:instruction in1} {:instruction integer_yank} {:instruction float_div} {:instruction integer_dup_items} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_dup_items} {:instruction float_dec} {:instruction float_dec} {:instruction integer_div} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_div} {:instruction float_dec} {:instruction integer_dup_items} {:instruction float_dec} {:instruction float_dec} {:instruction integer_yank} {:instruction integer_dup_times} {:instruction integer_dup_items} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_dup_items} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_min} {:instruction integer_sub} {:instruction integer_dup_items} {:instruction float_dec} {:instruction float_dec} {:instruction integer_div} {:instruction integer_dup_times} {:instruction integer_dup_items} {:instruction float_dec} {:instruction float_dec} {:instruction integer_mult} {:instruction print_float})
Best program: (float_dec float_flush integer_div integer_min print_float integer_shove in1 integer_yank float_div integer_dup_items float_dec float_dec float_dec float_dec integer_dup_items float_dec float_dec integer_div float_dec float_dec float_dec float_dec integer_div float_dec integer_dup_items float_dec float_dec integer_yank integer_dup_times integer_dup_items float_dec float_dec float_dec float_dec integer_dup_items float_dec float_dec float_dec float_dec float_dec float_dec integer_min integer_sub integer_dup_items float_dec float_dec integer_div integer_dup_times integer_dup_items float_dec float_dec integer_mult print_float)
Errors: [105.0 2 15.0 2 6.0 2 124.0 3 3.0 1 22.0 2 44.0 11 3.0 2 5.0 1 39.0 2 23.0 2 16.0 2 51.0 3 19.0 2 89.0 3 7.0 3 69.0 2 63.0 2 8.0 2 5.0 3 56.0 2 25.0 2 108.0 11 108.0 3 117.0 13]
Total: 1213.0
Mean: 24.26
Genome size: 53
Size: 54
Percent parens: 0.019
--- Population Statistics ---
Average total errors in population: 2687.877005499999
Median total errors in population: 1213.0
Error averages by case: (159.81011400000003 3.333 77.53534439999997 2.866 66.68654169999999 2.97 177.67421339999996 3.911 62.78294800000002 2.247 80.7285326 2.994 99.63301319999997 11.273 64.94091109999998 2.915 64.8686614 2.236 95.70030299999996 5.035 84.96566189999997 3.176 78.32271159999998 3.129 106.46228279999995 3.696 78.22988060000002 3.008 144.819514 3.961 69.37051439999999 3.898 124.61501019999999 3.032 118.19240200000002 5.118 68.28318809999999 2.96 67.14595460000004 3.891 112.56518100000001 3.064 84.01598790000004 3.064 160.23833329999994 10.973 162.15105240000008 3.767 168.69674789999996 12.925)
Error minima by case: (61.6916 1 3.0 1 0.0 0 80.0102 2 0.0 0 3.0 1 0.081 9 0.0 0 0.0 0 5.5257 1 11.0 1 4.0 1 24.3973 2 0.0 0 47.9914 1 0.0 0 7.7598 1 15.3575 1 0.0 0 0.0 0 0.5398 1 13.0 1 4.8999 2 52.7802 1 13.5366 1)
Average genome size in population (length): 58.206
Average program size in population (points): 59.206
Average percent parens in population: 0.017
Minimum age in population: 55.66092398203909
Maximum age in population: 60.23040826945362
Average age in population: 58.31709377583742
Median age in population: 58.36494959204356
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 10
Genome diversity (% unique Plush genomes):	 0.79
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 10
Syntactic diversity (% unique Push programs):	 0.79
Total error diversity:				 0.076
Error (vector) diversity:			 0.08
Behavioral diversity:				 0.08
--- Run Statistics ---
Number of program evaluations used so far: 41000
Number of point (instruction) evaluations so far: 50875680
--- Timings ---
Current time: 1529615576661 milliseconds
Total Time:         126.7 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        45.7 seconds, 36.0%
Fitness Testing:     64.9 seconds, 51.3%
Report:              16.0 seconds, 12.6%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 40
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 41
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 41
;;******************************
;; -*- Number IO problem report - generation 41
Test total error for best: 59460.0
Test mean error for best: 29.73000
;;------------------------------
Outputs of best individual on training cases:
Correct output: 150.3639690164 | Program output: 45.3639690164 
Correct output: -129.2046261   | Program output: -114.2046261  
Correct output: 43.6336388837  | Program output: 37.6336388837 
Correct output: 168.6824809869 | Program output: 44.6824809869 
Correct output: -24.6347316794 | Program output: -27.6347316794
Correct output: 39.9291320135  | Program output: 17.9291320135 
Correct output: -20.9190282536 | Program output: 23.0809717464 
Correct output: 61.9263871894  | Program output: 58.9263871894 
Correct output: -28.8395473609 | Program output: -23.8395473609
Correct output: -39.146556962  | Program output: -0.146556962  
Correct output: -134.9331989268 | Program output: -111.9331989268
Correct output: -126.4496738486 | Program output: -110.4496738486
Correct output: -51.218440095  | Program output: -102.218440095
Correct output: 45.5895106217  | Program output: 26.5895106217 
Correct output: 136.6637618296 | Program output: 47.6637618296 
Correct output: -104.5625509424 | Program output: -97.5625509424
Correct output: 80.9125656746  | Program output: 11.9125656746 
Correct output: -63.4657032446 | Program output: -0.4657032446 
Correct output: -52.106433034  | Program output: -44.106433034 
Correct output: -99.9152304515 | Program output: -104.9152304515
Correct output: -78.2834351958 | Program output: -22.2834351958
Correct output: -64.2911152024 | Program output: -39.2911152024
Correct output: 93.5722006381  | Program output: -14.4277993619
Correct output: 141.452540764  | Program output: 33.452540764  
Correct output: 102.2088941323 | Program output: -14.7911058677
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_stackdepth} {:instruction float_yank} {:instruction float_mult} {:instruction float_yank} {:instruction integer_add} {:instruction integer_rot} {:instruction float_dec} {:instruction in1} {:instruction integer_yank} {:instruction integer_dup_times} {:instruction integer_dup_items} {:instruction float_dec} {:instruction integer_rot} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_dup_items} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction print_integer} {:instruction float_dec} {:instruction float_dec} {:instruction integer_yank} {:instruction integer_dup_times} {:instruction integer_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_div} {:instruction float_sub} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_div} {:instruction integer_yank} {:instruction float_sub} {:instruction integer_dup_items} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_dup_items} {:instruction float_dec} {:instruction float_dec} {:instruction integer_div} {:instruction float_div} {:instruction float_dec} {:instruction float_dec} {:instruction integer_inc} {:instruction float_dec} {:instruction integer_dec} {:instruction print_float} {:instruction float_max} {:instruction float_frominteger})
Best program: (float_stackdepth float_yank float_mult float_yank integer_add integer_rot float_dec in1 integer_yank integer_dup_times integer_dup_items float_dec integer_rot float_dec float_dec float_dec float_dec float_dec integer_dup_items float_dec float_dec float_dec float_dec print_integer float_dec float_dec integer_yank integer_dup_times integer_dec float_dec float_dec integer_div float_sub float_dec float_dec float_dec float_dec integer_div integer_yank float_sub integer_dup_items float_dec float_dec float_dec float_dec integer_dup_items float_dec float_dec integer_div float_div float_dec float_dec integer_inc float_dec integer_dec print_float float_max float_frominteger)
Errors: [105.0 2 15.0 2 6.0 2 124.0 3 3.0 1 22.0 2 44.0 11 3.0 2 5.0 1 39.0 2 23.0 2 16.0 2 51.0 3 19.0 2 89.0 3 7.0 3 69.0 2 63.0 2 8.0 2 5.0 3 56.0 2 25.0 2 108.0 11 108.0 3 117.0 13]
Total: 1213.0
Mean: 24.26
Genome size: 58
Size: 59
Percent parens: 0.017
--- Population Statistics ---
Average total errors in population: 3007.340579699999
Median total errors in population: 1213.0
Error averages by case: (171.88187209999998 3.477 90.25878089999998 2.971 80.07292630000002 3.053 189.46416269999992 4.058 75.63085520000001 2.351 94.06958940000003 3.087 113.07063 11.332 78.19111829999997 3.027 77.44373019999999 2.343 108.51662859999996 5.033 97.60612610000001 3.261 91.0810863 3.275 119.78246799999998 3.822 91.54272320000001 3.117 157.1225414 4.063 82.39905529999999 3.999 137.41093360000002 3.117 130.7721478 5.136 81.29335629999999 3.045 80.38156000000001 4.002 124.56391430000001 3.192 96.69030840000002 3.177 171.8619553 11.017 174.2835899 3.852 180.19452009999998 12.947)
Error minima by case: (78.0 1 4.0 1 0.0 0 97.0 2 0.0 0 1.0 1 0.5847 7 0.0 0 0.0 0 5.4886 1 12.0 1 5.0 1 6.5833 1 1.924 1 62.0 1 0.0 0 37.247 1 18.8305 1 0.0 0 0.0 0 33.6483 1 14.0 1 49.9067 2 81.0 1 58.5434 1)
Average genome size in population (length): 58.27
Average program size in population (points): 59.27
Average percent parens in population: 0.017
Minimum age in population: 57.19917335608443
Maximum age in population: 61.74036577923107
Average age in population: 59.74381240476162
Median age in population: 59.8089644243405
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 8
Genome diversity (% unique Plush genomes):	 0.808
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 8
Syntactic diversity (% unique Push programs):	 0.808
Total error diversity:				 0.07
Error (vector) diversity:			 0.074
Behavioral diversity:				 0.075
--- Run Statistics ---
Number of program evaluations used so far: 42000
Number of point (instruction) evaluations so far: 52332605
--- Timings ---
Current time: 1529615579792 milliseconds
Total Time:         129.9 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        46.8 seconds, 36.0%
Fitness Testing:     66.5 seconds, 51.2%
Report:              16.4 seconds, 12.7%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 41
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 42
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 42
;;******************************
;; -*- Number IO problem report - generation 42
Test total error for best: 59460.0
Test mean error for best: 29.73000
;;------------------------------
Outputs of best individual on training cases:
Correct output: 150.3639690164 | Program output: 45.3639690164 
Correct output: -129.2046261   | Program output: -114.2046261  
Correct output: 43.6336388837  | Program output: 37.6336388837 
Correct output: 168.6824809869 | Program output: 44.6824809869 
Correct output: -24.6347316794 | Program output: -27.6347316794
Correct output: 39.9291320135  | Program output: 17.9291320135 
Correct output: -20.9190282536 | Program output: 23.0809717464 
Correct output: 61.9263871894  | Program output: 58.9263871894 
Correct output: -28.8395473609 | Program output: -23.8395473609
Correct output: -39.146556962  | Program output: -0.146556962  
Correct output: -134.9331989268 | Program output: -111.9331989268
Correct output: -126.4496738486 | Program output: -110.4496738486
Correct output: -51.218440095  | Program output: -102.218440095
Correct output: 45.5895106217  | Program output: 26.5895106217 
Correct output: 136.6637618296 | Program output: 47.6637618296 
Correct output: -104.5625509424 | Program output: -97.5625509424
Correct output: 80.9125656746  | Program output: 11.9125656746 
Correct output: -63.4657032446 | Program output: -0.4657032446 
Correct output: -52.106433034  | Program output: -44.106433034 
Correct output: -99.9152304515 | Program output: -104.9152304515
Correct output: -78.2834351958 | Program output: -22.2834351958
Correct output: -64.2911152024 | Program output: -39.2911152024
Correct output: 93.5722006381  | Program output: -14.4277993619
Correct output: 141.452540764  | Program output: 33.452540764  
Correct output: 102.2088941323 | Program output: -14.7911058677
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_inc} {:instruction float_yank} {:instruction float_mult} {:instruction float_yank} {:instruction integer_add} {:instruction integer_rot} {:instruction float_yank} {:instruction integer_add} {:instruction print_float} {:instruction float_dec} {:instruction in1} {:instruction integer_yank} {:instruction integer_dup_items} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_div} {:instruction float_dec} {:instruction float_dec} {:instruction integer_dup_times} {:instruction float_dec} {:instruction integer_div} {:instruction float_sub} {:instruction float_dec} {:instruction float_dec} {:instruction tagged_988} {:instruction float_dec} {:instruction integer_div} {:instruction float_dec} {:instruction integer_dup_items} {:instruction float_dec} {:instruction float_dec} {:instruction integer_yank} {:instruction integer_dup_times} {:instruction integer_dup_items} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_dup_items} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_div} {:instruction integer_dup_times} {:instruction integer_dup_items} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_div} {:instruction print_float} {:instruction integer_add} {:instruction integer_dup_items} {:instruction float_cos} {:instruction tagged_490} {:instruction integer_min} {:instruction integer_dup_items})
Best program: (float_inc float_yank float_mult float_yank integer_add integer_rot float_yank integer_add print_float float_dec in1 integer_yank integer_dup_items float_dec float_dec float_dec float_dec integer_div float_dec float_dec integer_dup_times float_dec integer_div float_sub float_dec float_dec tagged_988 float_dec integer_div float_dec integer_dup_items float_dec float_dec integer_yank integer_dup_times integer_dup_items float_dec float_dec float_dec float_dec integer_dup_items float_dec float_dec float_dec float_dec integer_div integer_dup_times integer_dup_items float_dec float_dec float_dec float_dec float_dec float_dec integer_div print_float integer_add integer_dup_items float_cos tagged_490 integer_min integer_dup_items)
Errors: [105.0 2 15.0 2 6.0 2 124.0 3 3.0 1 22.0 2 44.0 11 3.0 2 5.0 1 39.0 2 23.0 2 16.0 2 51.0 3 19.0 2 89.0 3 7.0 3 69.0 2 63.0 2 8.0 2 5.0 3 56.0 2 25.0 2 108.0 11 108.0 3 117.0 13]
Total: 1213.0
Mean: 24.26
Genome size: 62
Size: 63
Percent parens: 0.016
--- Population Statistics ---
Average total errors in population: 3093.2691279999995
Median total errors in population: 1213.0
Error averages by case: (175.01500530000004 3.477 95.52688669999999 2.983 84.18897850000002 3.053 192.53423689999997 4.048 77.9568591 2.348 97.3670167 3.107 117.38541269999999 11.273 81.94369259999998 3.011 80.02444889999998 2.372 110.33500129999996 5.286 102.8699035 3.294 96.36738929999999 3.276 124.45132999999998 3.805 95.52473369999998 3.111 160.30641809999997 4.065 87.6992532 4.032 139.8808958 3.119 132.33121990000004 5.383 84.85339669999999 3.068 84.95413520000002 3.983 126.9273078 3.209 100.33093459999998 3.184 173.64416229999998 10.949 177.34292900000003 3.858 181.2955802 12.918)
Error minima by case: (4.0 1 3.0 1 0.0 0 23.0 1 0.0 0 2.0 1 0.919 8 0.0 0 0.0 0 6.5257 1 11.0 1 4.0 1 24.0 1 1.0 1 8.3748 1 0.0 0 7.0479 1 13.5343 1 0.0 0 0.0 0 1.2834 1 12.7089 1 5.6117 1 7.0 1 14.2484 1)
Average genome size in population (length): 57.773
Average program size in population (points): 58.773
Average percent parens in population: 0.017
Minimum age in population: 59.07030670688982
Maximum age in population: 63.26196262550866
Average age in population: 61.16508700697299
Median age in population: 61.18719063920094
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 7
Genome diversity (% unique Plush genomes):	 0.796
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 7
Syntactic diversity (% unique Push programs):	 0.796
Total error diversity:				 0.072
Error (vector) diversity:			 0.077
Behavioral diversity:				 0.078
--- Run Statistics ---
Number of program evaluations used so far: 43000
Number of point (instruction) evaluations so far: 53777155
--- Timings ---
Current time: 1529615582942 milliseconds
Total Time:         133.0 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        47.9 seconds, 36.0%
Fitness Testing:     68.2 seconds, 51.3%
Report:              16.8 seconds, 12.7%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 42
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 43
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 43
;;******************************
;; -*- Number IO problem report - generation 43
Test total error for best: 59460.0
Test mean error for best: 29.73000
;;------------------------------
Outputs of best individual on training cases:
Correct output: 150.3639690164 | Program output: 45.3639690164 
Correct output: -129.2046261   | Program output: -114.2046261  
Correct output: 43.6336388837  | Program output: 37.6336388837 
Correct output: 168.6824809869 | Program output: 44.6824809869 
Correct output: -24.6347316794 | Program output: -27.6347316794
Correct output: 39.9291320135  | Program output: 17.9291320135 
Correct output: -20.9190282536 | Program output: 23.0809717464 
Correct output: 61.9263871894  | Program output: 58.9263871894 
Correct output: -28.8395473609 | Program output: -23.8395473609
Correct output: -39.146556962  | Program output: -0.146556962  
Correct output: -134.9331989268 | Program output: -111.9331989268
Correct output: -126.4496738486 | Program output: -110.4496738486
Correct output: -51.218440095  | Program output: -102.218440095
Correct output: 45.5895106217  | Program output: 26.5895106217 
Correct output: 136.6637618296 | Program output: 47.6637618296 
Correct output: -104.5625509424 | Program output: -97.5625509424
Correct output: 80.9125656746  | Program output: 11.9125656746 
Correct output: -63.4657032446 | Program output: -0.4657032446 
Correct output: -52.106433034  | Program output: -44.106433034 
Correct output: -99.9152304515 | Program output: -104.9152304515
Correct output: -78.2834351958 | Program output: -22.2834351958
Correct output: -64.2911152024 | Program output: -39.2911152024
Correct output: 93.5722006381  | Program output: -14.4277993619
Correct output: 141.452540764  | Program output: 33.452540764  
Correct output: 102.2088941323 | Program output: -14.7911058677
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_dup} {:instruction integer_fromfloat} {:instruction float_min} {:instruction integer_div} {:instruction integer_fromfloat} {:instruction float_min} {:instruction integer_dup_items} {:instruction integer_fromfloat} {:instruction integer_sub} {:instruction in1} {:instruction integer_yank} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_yankdup} {:instruction float_dec} {:instruction integer_dup_items} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_dup_items} {:instruction float_dec} {:instruction float_dec} {:instruction integer_div} {:instruction integer_dup_items} {:instruction float_dec} {:instruction float_dec} {:instruction integer_dup_items} {:instruction float_dec} {:instruction float_dec} {:instruction integer_div} {:instruction print_integer} {:instruction float_dec} {:instruction float_dec} {:instruction integer_dec} {:instruction float_dec} {:instruction integer_dec} {:instruction integer_yank} {:instruction integer_mult} {:instruction integer_mod} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_dup_items} {:instruction float_dec} {:instruction float_dec} {:instruction integer_div} {:instruction integer_flush} {:instruction float_dec} {:instruction float_dec} {:instruction integer_inc} {:instruction float_dec} {:instruction integer_div} {:instruction print_float} {:instruction float_rot})
Best program: (float_dup integer_fromfloat float_min integer_div integer_fromfloat float_min integer_dup_items integer_fromfloat integer_sub in1 integer_yank float_dec float_dec float_dec float_dec integer_yankdup float_dec integer_dup_items float_dec float_dec float_dec float_dec integer_dup_items float_dec float_dec integer_div integer_dup_items float_dec float_dec integer_dup_items float_dec float_dec integer_div print_integer float_dec float_dec integer_dec float_dec integer_dec integer_yank integer_mult integer_mod float_dec float_dec float_dec float_dec integer_dup_items float_dec float_dec integer_div integer_flush float_dec float_dec integer_inc float_dec integer_div print_float float_rot)
Errors: [105.0 2 15.0 2 6.0 2 124.0 3 3.0 1 22.0 2 44.0 11 3.0 2 5.0 1 39.0 2 23.0 2 16.0 2 51.0 3 19.0 2 89.0 3 7.0 3 69.0 2 63.0 2 8.0 2 5.0 3 56.0 2 25.0 2 108.0 11 108.0 3 117.0 13]
Total: 1213.0
Mean: 24.26
Genome size: 58
Size: 59
Percent parens: 0.017
--- Population Statistics ---
Average total errors in population: 3386.380785699999
Median total errors in population: 1213.0
Error averages by case: (184.730613 3.535 105.5862181 3.056 95.21661350000001 3.138 201.95957549999997 4.114 92.8000323 2.473 108.39248529999999 3.184 128.4633336 11.347 93.31914799999998 3.104 94.78639670000001 2.474 124.67610619999996 5.169 112.79235709999999 3.378 106.4095867 3.373 134.88980069999997 3.886 106.2232145 3.174 170.1925367 4.11 98.01630560000002 4.136 151.17142549999997 3.18 146.6919335 5.277 97.83307160000001 3.15 95.77115950000002 4.07 140.9184424 3.301 113.11814770000002 3.284 186.64756439999996 10.978 187.17966460000002 3.925 194.84405299999997 12.935)
Error minima by case: (14.6566 1 3.0 1 0.0 0 33.6566 2 0.0 0 1.0 1 0.0175 7 0.0 0 0.0 0 10.9022 1 4.0 1 3.0 1 0.0716 1 0.0 0 1.3434 2 0.0 0 4.0 1 11.997 1 0.0 0 0.0 0 2.8207 1 6.0 1 17.6566 1 17.6566 1 26.6566 1)
Average genome size in population (length): 58.195
Average program size in population (points): 59.195
Average percent parens in population: 0.017
Minimum age in population: 60.0937143954543
Maximum age in population: 64.91775208305489
Average age in population: 62.53294471376179
Median age in population: 62.54009801088921
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 8
Genome diversity (% unique Plush genomes):	 0.789
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 8
Syntactic diversity (% unique Push programs):	 0.789
Total error diversity:				 0.071
Error (vector) diversity:			 0.076
Behavioral diversity:				 0.077
--- Run Statistics ---
Number of program evaluations used so far: 44000
Number of point (instruction) evaluations so far: 55232305
--- Timings ---
Current time: 1529615586031 milliseconds
Total Time:         136.0 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        48.9 seconds, 36.0%
Fitness Testing:     69.8 seconds, 51.3%
Report:              17.2 seconds, 12.7%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 43
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 44
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 44
;;******************************
;; -*- Number IO problem report - generation 44
Test total error for best: 59460.0
Test mean error for best: 29.73000
;;------------------------------
Outputs of best individual on training cases:
Correct output: 150.3639690164 | Program output: 45.3639690164 
Correct output: -129.2046261   | Program output: -114.2046261  
Correct output: 43.6336388837  | Program output: 37.6336388837 
Correct output: 168.6824809869 | Program output: 44.6824809869 
Correct output: -24.6347316794 | Program output: -27.6347316794
Correct output: 39.9291320135  | Program output: 17.9291320135 
Correct output: -20.9190282536 | Program output: 23.0809717464 
Correct output: 61.9263871894  | Program output: 58.9263871894 
Correct output: -28.8395473609 | Program output: -23.8395473609
Correct output: -39.146556962  | Program output: -0.146556962  
Correct output: -134.9331989268 | Program output: -111.9331989268
Correct output: -126.4496738486 | Program output: -110.4496738486
Correct output: -51.218440095  | Program output: -102.218440095
Correct output: 45.5895106217  | Program output: 26.5895106217 
Correct output: 136.6637618296 | Program output: 47.6637618296 
Correct output: -104.5625509424 | Program output: -97.5625509424
Correct output: 80.9125656746  | Program output: 11.9125656746 
Correct output: -63.4657032446 | Program output: -0.4657032446 
Correct output: -52.106433034  | Program output: -44.106433034 
Correct output: -99.9152304515 | Program output: -104.9152304515
Correct output: -78.2834351958 | Program output: -22.2834351958
Correct output: -64.2911152024 | Program output: -39.2911152024
Correct output: 93.5722006381  | Program output: -14.4277993619
Correct output: 141.452540764  | Program output: 33.452540764  
Correct output: 102.2088941323 | Program output: -14.7911058677
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_inc} {:instruction float_yank} {:instruction integer_pop} {:instruction float_yank} {:instruction float_yankdup} {:instruction in1} {:instruction integer_yank} {:instruction float_dec} {:instruction float_dec} {:instruction integer_yank} {:instruction float_dec} {:instruction integer_yankdup} {:instruction float_dec} {:instruction float_dec} {:instruction integer_div} {:instruction float_dec} {:instruction integer_div} {:instruction float_sub} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_div} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_div} {:instruction float_sub} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_div} {:instruction integer_yank} {:instruction float_dec} {:instruction integer_div} {:instruction integer_yank} {:instruction integer_dup_times} {:instruction integer_dup_items} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_dup_items} {:instruction float_dec} {:instruction integer_dup_times} {:instruction float_swap} {:instruction integer_dup_items} {:instruction float_dec} {:instruction float_dec} {:instruction integer_div} {:instruction integer_mult} {:instruction float_shove} {:instruction float_dec} {:instruction float_dec} {:instruction integer_div} {:instruction print_float} {:instruction float_rot} {:instruction print_integer} {:instruction float_cos} {:instruction tagged_490} {:instruction integer_min} {:instruction float_dup_items})
Best program: (float_inc float_yank integer_pop float_yank float_yankdup in1 integer_yank float_dec float_dec integer_yank float_dec integer_yankdup float_dec float_dec integer_div float_dec integer_div float_sub float_dec float_dec float_dec float_dec integer_div float_dec float_dec float_dec integer_div float_sub float_dec float_dec float_dec float_dec integer_div integer_yank float_dec integer_div integer_yank integer_dup_times integer_dup_items float_dec float_dec float_dec float_dec integer_dup_items float_dec integer_dup_times float_swap integer_dup_items float_dec float_dec integer_div integer_mult float_shove float_dec float_dec integer_div print_float float_rot print_integer float_cos tagged_490 integer_min float_dup_items)
Errors: [105.0 2 15.0 2 6.0 2 124.0 3 3.0 1 22.0 2 44.0 11 3.0 2 5.0 1 39.0 2 23.0 2 16.0 2 51.0 3 19.0 2 89.0 3 7.0 3 69.0 2 63.0 2 8.0 2 5.0 3 56.0 2 25.0 2 108.0 11 108.0 3 117.0 13]
Total: 1213.0
Mean: 24.26
Genome size: 63
Size: 64
Percent parens: 0.016
--- Population Statistics ---
Average total errors in population: 2731.8208112999996
Median total errors in population: 1213.0
Error averages by case: (160.48986130000003 3.249 78.95739849999998 2.776 67.7160827 2.799 178.32027950000003 3.802 65.57343329999999 2.086 81.9404462 2.869 102.08327200000002 11.286 65.7059069 2.752 67.66292799999998 2.115 98.7652049 5.205 86.39377880000002 3.026 79.8024773 3.017 109.35687979999997 3.583 79.3344278 2.857 145.52627839999997 3.803 71.11273390000002 3.782 125.87279119999998 2.89 121.2944355 5.293 70.8028485 2.842 68.8012427 3.767 115.52975100000002 2.955 86.58801389999999 2.941 162.76622930000002 10.947 163.02296030000002 3.63 171.20114959999998 12.928)
Error minima by case: (78.0 1 1.0 1 0.0 0 97.0 2 0.0 0 0.0 0 1.081 9 0.0 0 0.0 0 2.5257 1 5.4053 1 2.0 1 8.2918 1 0.0 0 62.0 2 0.0 0 29.1072 1 20.539 1 0.0 0 0.0 0 27.5947 1 3.4053 1 41.7668 2 81.0 1 50.4035 1)
Average genome size in population (length): 57.881
Average program size in population (points): 58.881
Average percent parens in population: 0.017
Minimum age in population: 61.39091590991211
Maximum age in population: 65.93928971881519
Average age in population: 63.95086559963364
Median age in population: 64.01824051838787
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 8
Genome diversity (% unique Plush genomes):	 0.813
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 8
Syntactic diversity (% unique Push programs):	 0.813
Total error diversity:				 0.065
Error (vector) diversity:			 0.071
Behavioral diversity:				 0.071
--- Run Statistics ---
Number of program evaluations used so far: 45000
Number of point (instruction) evaluations so far: 56679530
--- Timings ---
Current time: 1529615589204 milliseconds
Total Time:         139.2 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        50.0 seconds, 35.9%
Fitness Testing:     71.4 seconds, 51.3%
Report:              17.7 seconds, 12.7%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 44
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 45
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 45
;;******************************
;; -*- Number IO problem report - generation 45
Test total error for best: 59460.0
Test mean error for best: 29.73000
;;------------------------------
Outputs of best individual on training cases:
Correct output: 150.3639690164 | Program output: 45.3639690164 
Correct output: -129.2046261   | Program output: -114.2046261  
Correct output: 43.6336388837  | Program output: 37.6336388837 
Correct output: 168.6824809869 | Program output: 44.6824809869 
Correct output: -24.6347316794 | Program output: -27.6347316794
Correct output: 39.9291320135  | Program output: 17.9291320135 
Correct output: -20.9190282536 | Program output: 23.0809717464 
Correct output: 61.9263871894  | Program output: 58.9263871894 
Correct output: -28.8395473609 | Program output: -23.8395473609
Correct output: -39.146556962  | Program output: -0.146556962  
Correct output: -134.9331989268 | Program output: -111.9331989268
Correct output: -126.4496738486 | Program output: -110.4496738486
Correct output: -51.218440095  | Program output: -102.218440095
Correct output: 45.5895106217  | Program output: 26.5895106217 
Correct output: 136.6637618296 | Program output: 47.6637618296 
Correct output: -104.5625509424 | Program output: -97.5625509424
Correct output: 80.9125656746  | Program output: 11.9125656746 
Correct output: -63.4657032446 | Program output: -0.4657032446 
Correct output: -52.106433034  | Program output: -44.106433034 
Correct output: -99.9152304515 | Program output: -104.9152304515
Correct output: -78.2834351958 | Program output: -22.2834351958
Correct output: -64.2911152024 | Program output: -39.2911152024
Correct output: 93.5722006381  | Program output: -14.4277993619
Correct output: 141.452540764  | Program output: 33.452540764  
Correct output: 102.2088941323 | Program output: -14.7911058677
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_inc} {:instruction integer_dec} {:instruction float_mult} {:instruction float_yank} {:instruction float_flush} {:instruction integer_inc} {:instruction in1} {:instruction integer_yank} {:instruction float_div} {:instruction integer_dup_items} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_dup_items} {:instruction float_dec} {:instruction float_dec} {:instruction integer_div} {:instruction integer_rot} {:instruction float_dec} {:instruction float_dec} {:instruction integer_stackdepth} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_div} {:instruction float_dec} {:instruction integer_dup_items} {:instruction float_dec} {:instruction float_dec} {:instruction integer_yank} {:instruction integer_dup_times} {:instruction integer_dup_items} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_dup_items} {:instruction float_dec} {:instruction float_dec} {:instruction integer_mod} {:instruction float_dec} {:instruction integer_div} {:instruction integer_dup_times} {:instruction integer_dup_items} {:instruction float_dec} {:instruction float_dec} {:instruction integer_div} {:instruction float_dec} {:instruction float_dec} {:instruction integer_inc} {:instruction float_dec} {:instruction integer_div} {:instruction print_float} {:instruction float_mult} {:instruction integer_pop})
Best program: (float_inc integer_dec float_mult float_yank float_flush integer_inc in1 integer_yank float_div integer_dup_items float_dec float_dec float_dec float_dec integer_dup_items float_dec float_dec integer_div integer_rot float_dec float_dec integer_stackdepth float_dec float_dec float_dec float_dec integer_div float_dec integer_dup_items float_dec float_dec integer_yank integer_dup_times integer_dup_items float_dec float_dec float_dec float_dec integer_dup_items float_dec float_dec integer_mod float_dec integer_div integer_dup_times integer_dup_items float_dec float_dec integer_div float_dec float_dec integer_inc float_dec integer_div print_float float_mult integer_pop)
Errors: [105.0 2 15.0 2 6.0 2 124.0 3 3.0 1 22.0 2 44.0 11 3.0 2 5.0 1 39.0 2 23.0 2 16.0 2 51.0 3 19.0 2 89.0 3 7.0 3 69.0 2 63.0 2 8.0 2 5.0 3 56.0 2 25.0 2 108.0 11 108.0 3 117.0 13]
Total: 1213.0
Mean: 24.26
Genome size: 57
Size: 58
Percent parens: 0.017
--- Population Statistics ---
Average total errors in population: 3031.4516596999997
Median total errors in population: 1213.0
Error averages by case: (172.56502310000002 3.464 91.17704089999998 2.936 80.99932110000002 3.019 190.14310249999994 3.986 76.67931160000003 2.319 94.96426799999996 3.053 114.1659813 11.336 79.04951159999999 2.956 78.60322390000003 2.329 110.67888369999996 5.391 98.4897257 3.242 92.01034369999998 3.21 120.83364789999999 3.775 92.45879910000001 3.062 157.8225684 3.987 83.41813820000002 3.972 138.26731809999998 3.104 131.9772578 5.507 82.17736909999999 3.005 81.26071670000002 3.97 125.73906050000001 3.152 97.57161390000002 3.137 172.69661709999997 10.999 175.0057788 3.794 181.038037 12.954)
Error minima by case: (78.0 1 1.0 1 0.0 0 97.0 1 0.0 0 0.8342 1 1.081 8 0.0 0 0.0 0 10.2559 1 3.8538 1 0.0 0 22.3278 1 5.0 1 62.0 2 0.0 0 41.8177 1 22.3048 1 0.0 0 0.0 0 29.3048 1 5.8538 1 26.9452 1 81.0 1 42.4052 1)
Average genome size in population (length): 57.665
Average program size in population (points): 58.665
Average percent parens in population: 0.017
Minimum age in population: 62.66867961267508
Maximum age in population: 67.26133598629787
Average age in population: 65.34992045748344
Median age in population: 65.39738889091657
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 9
Genome diversity (% unique Plush genomes):	 0.806
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 9
Syntactic diversity (% unique Push programs):	 0.806
Total error diversity:				 0.068
Error (vector) diversity:			 0.075
Behavioral diversity:				 0.075
--- Run Statistics ---
Number of program evaluations used so far: 46000
Number of point (instruction) evaluations so far: 58121305
--- Timings ---
Current time: 1529615592327 milliseconds
Total Time:         142.4 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        51.1 seconds, 35.9%
Fitness Testing:     73.0 seconds, 51.3%
Report:              18.1 seconds, 12.7%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 45
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 46
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 46
;;******************************
;; -*- Number IO problem report - generation 46
Test total error for best: 59460.0
Test mean error for best: 29.73000
;;------------------------------
Outputs of best individual on training cases:
Correct output: 150.3639690164 | Program output: 45.3639690164 
Correct output: -129.2046261   | Program output: -114.2046261  
Correct output: 43.6336388837  | Program output: 37.6336388837 
Correct output: 168.6824809869 | Program output: 44.6824809869 
Correct output: -24.6347316794 | Program output: -27.6347316794
Correct output: 39.9291320135  | Program output: 17.9291320135 
Correct output: -20.9190282536 | Program output: 23.0809717464 
Correct output: 61.9263871894  | Program output: 58.9263871894 
Correct output: -28.8395473609 | Program output: -23.8395473609
Correct output: -39.146556962  | Program output: -0.146556962  
Correct output: -134.9331989268 | Program output: -111.9331989268
Correct output: -126.4496738486 | Program output: -110.4496738486
Correct output: -51.218440095  | Program output: -102.218440095
Correct output: 45.5895106217  | Program output: 26.5895106217 
Correct output: 136.6637618296 | Program output: 47.6637618296 
Correct output: -104.5625509424 | Program output: -97.5625509424
Correct output: 80.9125656746  | Program output: 11.9125656746 
Correct output: -63.4657032446 | Program output: -0.4657032446 
Correct output: -52.106433034  | Program output: -44.106433034 
Correct output: -99.9152304515 | Program output: -104.9152304515
Correct output: -78.2834351958 | Program output: -22.2834351958
Correct output: -64.2911152024 | Program output: -39.2911152024
Correct output: 93.5722006381  | Program output: -14.4277993619
Correct output: 141.452540764  | Program output: 33.452540764  
Correct output: 102.2088941323 | Program output: -14.7911058677
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_max} {:instruction float_pop} {:instruction float_max} {:instruction integer_add} {:instruction print_float} {:instruction float_dec} {:instruction in1} {:instruction float_dup_items} {:instruction integer_dup_items} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_div} {:instruction float_dec} {:instruction float_dec} {:instruction integer_div} {:instruction integer_rot} {:instruction float_dec} {:instruction float_dec} {:instruction integer_dup_items} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_div} {:instruction float_dec} {:instruction integer_dup_items} {:instruction float_dec} {:instruction float_dec} {:instruction integer_yank} {:instruction integer_dup_times} {:instruction integer_dup_items} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_dup_items} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_div} {:instruction integer_dup_times} {:instruction integer_dup_items} {:instruction float_dec} {:instruction float_dec} {:instruction integer_div} {:instruction integer_inc} {:instruction integer_dup_items} {:instruction float_dec} {:instruction float_dec} {:instruction integer_div} {:instruction print_float} {:instruction integer_max} {:instruction integer_dup_items} {:instruction float_sub})
Best program: (integer_max float_pop float_max integer_add print_float float_dec in1 float_dup_items integer_dup_items float_dec float_dec float_dec float_dec integer_div float_dec float_dec integer_div integer_rot float_dec float_dec integer_dup_items float_dec float_dec float_dec float_dec integer_div float_dec integer_dup_items float_dec float_dec integer_yank integer_dup_times integer_dup_items float_dec float_dec float_dec float_dec integer_dup_items float_dec float_dec float_dec float_dec integer_div integer_dup_times integer_dup_items float_dec float_dec integer_div integer_inc integer_dup_items float_dec float_dec integer_div print_float integer_max integer_dup_items float_sub)
Errors: [105.0 2 15.0 2 6.0 2 124.0 3 3.0 1 22.0 2 44.0 11 3.0 2 5.0 1 39.0 2 23.0 2 16.0 2 51.0 3 19.0 2 89.0 3 7.0 3 69.0 2 63.0 2 8.0 2 5.0 3 56.0 2 25.0 2 108.0 11 108.0 3 117.0 13]
Total: 1213.0
Mean: 24.26
Genome size: 57
Size: 58
Percent parens: 0.017
--- Population Statistics ---
Average total errors in population: 3020.557012599999
Median total errors in population: 1213.0
Error averages by case: (171.02534599999998 3.484 92.12386099999999 2.991 79.45008330000002 3.085 188.55219619999994 4.064 76.9720401 2.405 93.1652565 3.124 112.34211439999997 11.277 77.67274429999996 3.039 78.90570220000001 2.408 109.33316059999997 5.355 99.37603379999999 3.326 92.83648909999997 3.305 120.60389529999998 3.814 90.74469470000003 3.133 156.1607099 4.077 84.14876000000001 4.073 136.41106969999998 3.126 131.5503802 5.446 83.2339218 3.087 81.86714940000003 3.999 125.77000520000001 3.255 98.42562630000003 3.207 172.73501589999992 10.953 173.325318 3.865 181.01043869999998 12.917)
Error minima by case: (44.3875 1 2.0 1 0.0 0 63.3875 1 0.0 0 1.0 1 0.919 8 0.0 0 0.0 0 3.4074 1 6.0 1 1.0 1 0.4492 1 1.0 1 28.3875 1 1.0 1 8.3875 1 20.8716 1 0.0 0 0.0 0 20.4074 1 8.0 1 47.3875 1 47.3875 1 56.3875 1)
Average genome size in population (length): 56.99
Average program size in population (points): 57.99
Average percent parens in population: 0.017
Minimum age in population: 64.52457771889908
Maximum age in population: 68.59421483436807
Average age in population: 66.78389702439785
Median age in population: 66.81822708676346
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 8
Genome diversity (% unique Plush genomes):	 0.783
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 8
Syntactic diversity (% unique Push programs):	 0.783
Total error diversity:				 0.08
Error (vector) diversity:			 0.084
Behavioral diversity:				 0.085
--- Run Statistics ---
Number of program evaluations used so far: 47000
Number of point (instruction) evaluations so far: 59546330
--- Timings ---
Current time: 1529615595395 milliseconds
Total Time:         145.5 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        52.2 seconds, 35.9%
Fitness Testing:     74.6 seconds, 51.3%
Report:              18.6 seconds, 12.8%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 46
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 47
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 47
;;******************************
;; -*- Number IO problem report - generation 47
Test total error for best: 59460.0
Test mean error for best: 29.73000
;;------------------------------
Outputs of best individual on training cases:
Correct output: 150.3639690164 | Program output: 45.3639690164 
Correct output: -129.2046261   | Program output: -114.2046261  
Correct output: 43.6336388837  | Program output: 37.6336388837 
Correct output: 168.6824809869 | Program output: 44.6824809869 
Correct output: -24.6347316794 | Program output: -27.6347316794
Correct output: 39.9291320135  | Program output: 17.9291320135 
Correct output: -20.9190282536 | Program output: 23.0809717464 
Correct output: 61.9263871894  | Program output: 58.9263871894 
Correct output: -28.8395473609 | Program output: -23.8395473609
Correct output: -39.146556962  | Program output: -0.146556962  
Correct output: -134.9331989268 | Program output: -111.9331989268
Correct output: -126.4496738486 | Program output: -110.4496738486
Correct output: -51.218440095  | Program output: -102.218440095
Correct output: 45.5895106217  | Program output: 26.5895106217 
Correct output: 136.6637618296 | Program output: 47.6637618296 
Correct output: -104.5625509424 | Program output: -97.5625509424
Correct output: 80.9125656746  | Program output: 11.9125656746 
Correct output: -63.4657032446 | Program output: -0.4657032446 
Correct output: -52.106433034  | Program output: -44.106433034 
Correct output: -99.9152304515 | Program output: -104.9152304515
Correct output: -78.2834351958 | Program output: -22.2834351958
Correct output: -64.2911152024 | Program output: -39.2911152024
Correct output: 93.5722006381  | Program output: -14.4277993619
Correct output: 141.452540764  | Program output: 33.452540764  
Correct output: 102.2088941323 | Program output: -14.7911058677
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_max} {:instruction float_flush} {:instruction integer_div} {:instruction integer_add} {:instruction print_float} {:instruction float_dec} {:instruction in1} {:instruction float_dec} {:instruction integer_dup_times} {:instruction integer_dup_items} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_div} {:instruction float_sub} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_div} {:instruction float_dec} {:instruction integer_dup_items} {:instruction float_dec} {:instruction float_dec} {:instruction integer_yank} {:instruction integer_dup_times} {:instruction integer_dup_items} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_dup_items} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_div} {:instruction integer_yank} {:instruction integer_dup_times} {:instruction integer_mult} {:instruction float_dec} {:instruction float_dec} {:instruction integer_mod} {:instruction float_dec} {:instruction integer_div} {:instruction print_float} {:instruction integer_dup_items} {:instruction float_cos} {:instruction tagged_490} {:instruction integer_min} {:instruction integer_dup_items})
Best program: (integer_max float_flush integer_div integer_add print_float float_dec in1 float_dec integer_dup_times integer_dup_items float_dec float_dec float_dec float_dec float_dec integer_div float_sub float_dec float_dec float_dec float_dec integer_div float_dec integer_dup_items float_dec float_dec integer_yank integer_dup_times integer_dup_items float_dec float_dec float_dec float_dec integer_dup_items float_dec float_dec float_dec float_dec float_dec float_dec float_dec integer_div integer_yank integer_dup_times integer_mult float_dec float_dec integer_mod float_dec integer_div print_float integer_dup_items float_cos tagged_490 integer_min integer_dup_items)
Errors: [105.0 2 15.0 2 6.0 2 124.0 3 3.0 1 22.0 2 44.0 11 3.0 2 5.0 1 39.0 2 23.0 2 16.0 2 51.0 3 19.0 2 89.0 3 7.0 3 69.0 2 63.0 2 8.0 2 5.0 3 56.0 2 25.0 2 108.0 11 108.0 3 117.0 13]
Total: 1213.0
Mean: 24.26
Genome size: 56
Size: 57
Percent parens: 0.018
--- Population Statistics ---
Average total errors in population: 3023.312104699999
Median total errors in population: 1213.0
Error averages by case: (171.9477453 3.458 91.79903599999996 2.981 80.45618410000002 3.068 189.54123049999995 4.049 76.51357720000001 2.363 94.29992259999997 3.106 113.13524050000001 11.28 78.67705319999999 3.032 78.54478689999999 2.343 108.22955829999995 5.091 99.14596069999997 3.291 92.61093189999997 3.269 120.55571749999997 3.817 91.8469034 3.117 157.2328961 4.064 83.88408039999999 4.034 137.4835614 3.158 130.46417 5.2 82.27855890000001 3.046 81.62516930000004 3.985 125.6259195 3.188 97.6799039 3.191 172.59531109999998 10.993 174.32173790000002 3.869 180.90194809999997 12.922)
Error minima by case: (1.0 1 1.0 1 0.0 0 20.0 1 0.0 0 0.0 0 0.081 8 0.0 0 0.0 0 1.9052 1 9.0 1 2.0 1 10.1667 1 0.0 0 15.0 2 0.0 0 14.4509 1 22.414 1 0.0 0 0.0 0 37.2317 1 11.0 1 1.7913 2 4.0 1 1.5696 1)
Average genome size in population (length): 57.184
Average program size in population (points): 58.184
Average percent parens in population: 0.017
Minimum age in population: 65.93123436958695
Maximum age in population: 70.1370270245032
Average age in population: 68.18474537949845
Median age in population: 68.24191275848908
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 9
Genome diversity (% unique Plush genomes):	 0.751
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 9
Syntactic diversity (% unique Push programs):	 0.751
Total error diversity:				 0.079
Error (vector) diversity:			 0.085
Behavioral diversity:				 0.085
--- Run Statistics ---
Number of program evaluations used so far: 48000
Number of point (instruction) evaluations so far: 60976130
--- Timings ---
Current time: 1529615598428 milliseconds
Total Time:         148.5 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        53.3 seconds, 35.9%
Fitness Testing:     76.2 seconds, 51.3%
Report:              18.9 seconds, 12.8%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 47
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 48
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 48
;;******************************
;; -*- Number IO problem report - generation 48
Test total error for best: 59460.0
Test mean error for best: 29.73000
;;------------------------------
Outputs of best individual on training cases:
Correct output: 150.3639690164 | Program output: 45.3639690164 
Correct output: -129.2046261   | Program output: -114.2046261  
Correct output: 43.6336388837  | Program output: 37.6336388837 
Correct output: 168.6824809869 | Program output: 44.6824809869 
Correct output: -24.6347316794 | Program output: -27.6347316794
Correct output: 39.9291320135  | Program output: 17.9291320135 
Correct output: -20.9190282536 | Program output: 23.0809717464 
Correct output: 61.9263871894  | Program output: 58.9263871894 
Correct output: -28.8395473609 | Program output: -23.8395473609
Correct output: -39.146556962  | Program output: -0.146556962  
Correct output: -134.9331989268 | Program output: -111.9331989268
Correct output: -126.4496738486 | Program output: -110.4496738486
Correct output: -51.218440095  | Program output: -102.218440095
Correct output: 45.5895106217  | Program output: 26.5895106217 
Correct output: 136.6637618296 | Program output: 47.6637618296 
Correct output: -104.5625509424 | Program output: -97.5625509424
Correct output: 80.9125656746  | Program output: 11.9125656746 
Correct output: -63.4657032446 | Program output: -0.4657032446 
Correct output: -52.106433034  | Program output: -44.106433034 
Correct output: -99.9152304515 | Program output: -104.9152304515
Correct output: -78.2834351958 | Program output: -22.2834351958
Correct output: -64.2911152024 | Program output: -39.2911152024
Correct output: 93.5722006381  | Program output: -14.4277993619
Correct output: 141.452540764  | Program output: 33.452540764  
Correct output: 102.2088941323 | Program output: -14.7911058677
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_inc} {:instruction float_flush} {:instruction in1} {:instruction integer_yank} {:instruction float_div} {:instruction float_add} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_dup_items} {:instruction float_dec} {:instruction float_dec} {:instruction integer_div} {:instruction integer_rot} {:instruction float_dec} {:instruction float_dec} {:instruction integer_dup_items} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_div} {:instruction float_dec} {:instruction integer_dup_items} {:instruction float_dec} {:instruction float_dec} {:instruction integer_yank} {:instruction integer_dup_times} {:instruction integer_dup_items} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_dup_items} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_div} {:instruction integer_dup_times} {:instruction integer_dup_items} {:instruction float_dec} {:instruction float_dec} {:instruction integer_div} {:instruction float_rot} {:instruction float_dec} {:instruction float_dec} {:instruction integer_div} {:instruction print_float} {:instruction integer_yankdup} {:instruction integer_dup_items} {:instruction print_float} {:instruction float_max} {:instruction float_frominteger})
Best program: (float_inc float_flush in1 integer_yank float_div float_add float_dec float_dec float_dec float_dec integer_dup_items float_dec float_dec integer_div integer_rot float_dec float_dec integer_dup_items float_dec float_dec float_dec float_dec integer_div float_dec integer_dup_items float_dec float_dec integer_yank integer_dup_times integer_dup_items float_dec float_dec float_dec float_dec integer_dup_items float_dec float_dec float_dec float_dec integer_div integer_dup_times integer_dup_items float_dec float_dec integer_div float_rot float_dec float_dec integer_div print_float integer_yankdup integer_dup_items print_float float_max float_frominteger)
Errors: [105.0 2 15.0 2 6.0 2 124.0 3 3.0 1 22.0 2 44.0 11 3.0 2 5.0 1 39.0 2 23.0 2 16.0 2 51.0 3 19.0 2 89.0 3 7.0 3 69.0 2 63.0 2 8.0 2 5.0 3 56.0 2 25.0 2 108.0 11 108.0 3 117.0 13]
Total: 1213.0
Mean: 24.26
Genome size: 55
Size: 56
Percent parens: 0.018
--- Population Statistics ---
Average total errors in population: 2889.1595084999985
Median total errors in population: 1213.0
Error averages by case: (166.48988430000003 3.388 87.17911919999999 2.917 74.19704270000001 2.99 184.18723079999995 3.99 70.74236599999999 2.268 88.004099 3.024 107.3622538 11.269 72.41299679999997 2.946 72.79782910000002 2.296 104.18681749999999 5.122 94.54169110000002 3.209 87.96752230000001 3.203 115.9769959 3.745 85.6410074 3.048 151.6483727 3.98 79.20035520000003 3.953 131.16525269999994 3.06 126.55706920000002 5.207 77.34888790000001 2.981 76.9222636 3.92 120.10537630000002 3.139 92.5752841 3.11 167.15189849999996 10.956 168.86822370000007 3.776 175.51466870000002 12.918)
Error minima by case: (78.0 1 1.0 1 0.0 0 97.0 2 0.0 0 2.0 1 0.018 7 0.0 0 0.0 0 2.9976 1 9.0 1 2.0 1 15.2716 2 1.0 1 62.0 1 0.0 0 18.6355 1 27.315 1 0.0 0 0.0 0 3.6153 1 11.0 1 0.2286 2 79.1755 1 16.7785 1)
Average genome size in population (length): 57.263
Average program size in population (points): 58.263
Average percent parens in population: 0.017
Minimum age in population: 67.10416847860648
Maximum age in population: 71.65482771394575
Average age in population: 69.61220610439068
Median age in population: 69.65253145899818
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 10
Genome diversity (% unique Plush genomes):	 0.792
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 10
Syntactic diversity (% unique Push programs):	 0.792
Total error diversity:				 0.076
Error (vector) diversity:			 0.083
Behavioral diversity:				 0.084
--- Run Statistics ---
Number of program evaluations used so far: 49000
Number of point (instruction) evaluations so far: 62407880
--- Timings ---
Current time: 1529615601690 milliseconds
Total Time:         151.7 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        54.4 seconds, 35.8%
Fitness Testing:     77.8 seconds, 51.3%
Report:              19.4 seconds, 12.8%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 48
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 49
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 49
;;******************************
;; -*- Number IO problem report - generation 49
Test total error for best: 59460.0
Test mean error for best: 29.73000
;;------------------------------
Outputs of best individual on training cases:
Correct output: 150.3639690164 | Program output: 45.3639690164 
Correct output: -129.2046261   | Program output: -114.2046261  
Correct output: 43.6336388837  | Program output: 37.6336388837 
Correct output: 168.6824809869 | Program output: 44.6824809869 
Correct output: -24.6347316794 | Program output: -27.6347316794
Correct output: 39.9291320135  | Program output: 17.9291320135 
Correct output: -20.9190282536 | Program output: 23.0809717464 
Correct output: 61.9263871894  | Program output: 58.9263871894 
Correct output: -28.8395473609 | Program output: -23.8395473609
Correct output: -39.146556962  | Program output: -0.146556962  
Correct output: -134.9331989268 | Program output: -111.9331989268
Correct output: -126.4496738486 | Program output: -110.4496738486
Correct output: -51.218440095  | Program output: -102.218440095
Correct output: 45.5895106217  | Program output: 26.5895106217 
Correct output: 136.6637618296 | Program output: 47.6637618296 
Correct output: -104.5625509424 | Program output: -97.5625509424
Correct output: 80.9125656746  | Program output: 11.9125656746 
Correct output: -63.4657032446 | Program output: -0.4657032446 
Correct output: -52.106433034  | Program output: -44.106433034 
Correct output: -99.9152304515 | Program output: -104.9152304515
Correct output: -78.2834351958 | Program output: -22.2834351958
Correct output: -64.2911152024 | Program output: -39.2911152024
Correct output: 93.5722006381  | Program output: -14.4277993619
Correct output: 141.452540764  | Program output: 33.452540764  
Correct output: 102.2088941323 | Program output: -14.7911058677
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_dup} {:instruction float_cos} {:instruction float_yank} {:instruction float_yankdup} {:instruction in1} {:instruction integer_yank} {:instruction float_dec} {:instruction float_dec} {:instruction integer_yank} {:instruction float_dec} {:instruction integer_yankdup} {:instruction float_dec} {:instruction integer_div} {:instruction integer_yankdup} {:instruction float_dec} {:instruction float_dec} {:instruction integer_div} {:instruction integer_dup_items} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_dup_items} {:instruction float_dec} {:instruction float_dec} {:instruction integer_div} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_dup_items} {:instruction float_dec} {:instruction float_dec} {:instruction integer_div} {:instruction float_sub} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_div} {:instruction float_dec} {:instruction integer_dup_times} {:instruction integer_dup_items} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_div} {:instruction print_float} {:instruction float_rot})
Best program: (float_dup float_cos float_yank float_yankdup in1 integer_yank float_dec float_dec integer_yank float_dec integer_yankdup float_dec integer_div integer_yankdup float_dec float_dec integer_div integer_dup_items float_dec float_dec float_dec float_dec float_dec integer_dup_items float_dec float_dec integer_div float_dec float_dec float_dec integer_dup_items float_dec float_dec integer_div float_sub float_dec float_dec float_dec float_dec integer_div float_dec integer_dup_times integer_dup_items float_dec float_dec float_dec float_dec integer_div print_float float_rot)
Errors: [105.0 2 15.0 2 6.0 2 124.0 3 3.0 1 22.0 2 44.0 11 3.0 2 5.0 1 39.0 2 23.0 2 16.0 2 51.0 3 19.0 2 89.0 3 7.0 3 69.0 2 63.0 2 8.0 2 5.0 3 56.0 2 25.0 2 108.0 11 108.0 3 117.0 13]
Total: 1213.0
Mean: 24.26
Genome size: 50
Size: 51
Percent parens: 0.020
--- Population Statistics ---
Average total errors in population: 3144.1373067999994
Median total errors in population: 1213.0
Error averages by case: (176.57515460000005 3.489 96.53371139999999 3.019 85.32879699999998 3.097 193.90025669999994 4.061 81.5310061 2.403 99.12591440000004 3.131 117.9095712 11.338 83.5627457 3.028 83.56721339999999 2.397 113.09632239999999 5.32 103.81887580000003 3.348 97.35898189999999 3.32 125.14080059999999 3.847 96.69674400000002 3.157 161.8587421 4.093 88.69013559999998 4.084 141.8420638 3.171 135.20093179999998 5.424 87.6894974 3.101 86.39611480000002 4.025 130.4157289 3.238 102.86160650000001 3.217 177.2966667 11.022 178.97012310000005 3.907 185.5766009 12.956)
Error minima by case: (71.8832 1 0.0 0 0.0 0 89.7539 1 0.0 0 0.0 0 0.1904 9 0.0 0 0.0 0 1.5257 1 8.0 1 1.0 1 17.8832 1 2.0 1 55.8832 1 0.0 0 35.8832 1 30.4657 1 0.0 0 0.0 0 1.4566 1 4.4719 1 61.5025 1 74.8832 1 70.1392 3)
Average genome size in population (length): 57.117
Average program size in population (points): 58.117
Average percent parens in population: 0.017
Minimum age in population: 68.10416847860648
Maximum age in population: 73.33924721527057
Average age in population: 71.05822178369588
Median age in population: 71.05651675380044
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 9
Genome diversity (% unique Plush genomes):	 0.784
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 9
Syntactic diversity (% unique Push programs):	 0.784
Total error diversity:				 0.077
Error (vector) diversity:			 0.084
Behavioral diversity:				 0.084
--- Run Statistics ---
Number of program evaluations used so far: 50000
Number of point (instruction) evaluations so far: 63835880
--- Timings ---
Current time: 1529615604827 milliseconds
Total Time:         154.9 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        55.5 seconds, 35.8%
Fitness Testing:     79.5 seconds, 51.3%
Report:              19.8 seconds, 12.8%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 49
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 50
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 50
;;******************************
;; -*- Number IO problem report - generation 50
Test total error for best: 59460.0
Test mean error for best: 29.73000
;;------------------------------
Outputs of best individual on training cases:
Correct output: 150.3639690164 | Program output: 45.3639690164 
Correct output: -129.2046261   | Program output: -114.2046261  
Correct output: 43.6336388837  | Program output: 37.6336388837 
Correct output: 168.6824809869 | Program output: 44.6824809869 
Correct output: -24.6347316794 | Program output: -27.6347316794
Correct output: 39.9291320135  | Program output: 17.9291320135 
Correct output: -20.9190282536 | Program output: 23.0809717464 
Correct output: 61.9263871894  | Program output: 58.9263871894 
Correct output: -28.8395473609 | Program output: -23.8395473609
Correct output: -39.146556962  | Program output: -0.146556962  
Correct output: -134.9331989268 | Program output: -111.9331989268
Correct output: -126.4496738486 | Program output: -110.4496738486
Correct output: -51.218440095  | Program output: -102.218440095
Correct output: 45.5895106217  | Program output: 26.5895106217 
Correct output: 136.6637618296 | Program output: 47.6637618296 
Correct output: -104.5625509424 | Program output: -97.5625509424
Correct output: 80.9125656746  | Program output: 11.9125656746 
Correct output: -63.4657032446 | Program output: -0.4657032446 
Correct output: -52.106433034  | Program output: -44.106433034 
Correct output: -99.9152304515 | Program output: -104.9152304515
Correct output: -78.2834351958 | Program output: -22.2834351958
Correct output: -64.2911152024 | Program output: -39.2911152024
Correct output: 93.5722006381  | Program output: -14.4277993619
Correct output: 141.452540764  | Program output: 33.452540764  
Correct output: 102.2088941323 | Program output: -14.7911058677
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction in1} {:instruction integer_yank} {:instruction integer_dup_times} {:instruction float_shove} {:instruction float_dec} {:instruction float_dec} {:instruction integer_mod} {:instruction float_dec} {:instruction integer_dup_items} {:instruction float_dec} {:instruction float_dec} {:instruction integer_div} {:instruction float_dec} {:instruction float_dec} {:instruction integer_div} {:instruction integer_flush} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_dup_items} {:instruction float_mult} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_div} {:instruction integer_yank} {:instruction integer_dup_times} {:instruction integer_dup_items} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_div} {:instruction integer_dup_times} {:instruction integer_dup_items} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_mult} {:instruction print_float})
Best program: (in1 integer_yank integer_dup_times float_shove float_dec float_dec integer_mod float_dec integer_dup_items float_dec float_dec integer_div float_dec float_dec integer_div integer_flush float_dec float_dec float_dec float_dec integer_dup_items float_mult float_dec float_dec float_dec float_dec float_dec float_dec float_dec integer_div integer_yank integer_dup_times integer_dup_items float_dec float_dec float_dec integer_div integer_dup_times integer_dup_items float_dec float_dec float_dec float_dec float_dec float_dec float_mult print_float)
Errors: [105.0 2 15.0 2 6.0 2 124.0 3 3.0 1 22.0 2 44.0 11 3.0 2 5.0 1 39.0 2 23.0 2 16.0 2 51.0 3 19.0 2 89.0 3 7.0 3 69.0 2 63.0 2 8.0 2 5.0 3 56.0 2 25.0 2 108.0 11 108.0 3 117.0 13]
Total: 1213.0
Mean: 24.26
Genome size: 47
Size: 48
Percent parens: 0.021
--- Population Statistics ---
Average total errors in population: 3125.9050277999995
Median total errors in population: 1213.0
Error averages by case: (176.28424560000005 3.476 95.14780710000002 2.967 84.93484619999998 3.049 193.6921914 4.029 80.48582919999998 2.366 98.89891080000001 3.086 117.86299799999998 11.322 83.07709879999999 2.984 82.45332570000001 2.352 113.42477089999997 5.281 102.39794940000002 3.292 95.94177369999998 3.269 124.54012920000001 3.797 96.40732190000001 3.098 161.5918813 4.05 87.36613220000001 4.016 142.0768911 3.138 135.5330362 5.38 86.1766911 3.043 85.1979521 3.974 129.2242938 3.191 101.46630290000003 3.168 176.3094021 10.996 178.68831070000007 3.861 184.60593640000002 12.934)
Error minima by case: (82.0 1 2.0 1 0.0 0 89.7539 2 0.0 0 1.0 1 0.018 7 0.0 0 0.0 0 13.9834 1 10.0 1 3.0 1 25.3973 1 1.0 1 66.0 2 0.0 0 46.0 1 8.3148 1 0.0 0 0.0 0 1.3148 1 12.0 1 54.0896 2 85.0 1 68.823 2)
Average genome size in population (length): 57.228
Average program size in population (points): 58.228
Average percent parens in population: 0.017
Minimum age in population: 69.54768652791375
Maximum age in population: 74.29911792570668
Average age in population: 72.43403184531893
Median age in population: 72.43907151408085
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 11
Genome diversity (% unique Plush genomes):	 0.797
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 11
Syntactic diversity (% unique Push programs):	 0.797
Total error diversity:				 0.065
Error (vector) diversity:			 0.071
Behavioral diversity:				 0.071
--- Run Statistics ---
Number of program evaluations used so far: 51000
Number of point (instruction) evaluations so far: 65266755
--- Timings ---
Current time: 1529615607889 milliseconds
Total Time:         157.9 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        56.5 seconds, 35.8%
Fitness Testing:     81.1 seconds, 51.3%
Report:              20.3 seconds, 12.8%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 50
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 51
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 51
;;******************************
;; -*- Number IO problem report - generation 51
Test total error for best: 59460.0
Test mean error for best: 29.73000
;;------------------------------
Outputs of best individual on training cases:
Correct output: 150.3639690164 | Program output: 45.3639690164 
Correct output: -129.2046261   | Program output: -114.2046261  
Correct output: 43.6336388837  | Program output: 37.6336388837 
Correct output: 168.6824809869 | Program output: 44.6824809869 
Correct output: -24.6347316794 | Program output: -27.6347316794
Correct output: 39.9291320135  | Program output: 17.9291320135 
Correct output: -20.9190282536 | Program output: 23.0809717464 
Correct output: 61.9263871894  | Program output: 58.9263871894 
Correct output: -28.8395473609 | Program output: -23.8395473609
Correct output: -39.146556962  | Program output: -0.146556962  
Correct output: -134.9331989268 | Program output: -111.9331989268
Correct output: -126.4496738486 | Program output: -110.4496738486
Correct output: -51.218440095  | Program output: -102.218440095
Correct output: 45.5895106217  | Program output: 26.5895106217 
Correct output: 136.6637618296 | Program output: 47.6637618296 
Correct output: -104.5625509424 | Program output: -97.5625509424
Correct output: 80.9125656746  | Program output: 11.9125656746 
Correct output: -63.4657032446 | Program output: -0.4657032446 
Correct output: -52.106433034  | Program output: -44.106433034 
Correct output: -99.9152304515 | Program output: -104.9152304515
Correct output: -78.2834351958 | Program output: -22.2834351958
Correct output: -64.2911152024 | Program output: -39.2911152024
Correct output: 93.5722006381  | Program output: -14.4277993619
Correct output: 141.452540764  | Program output: 33.452540764  
Correct output: 102.2088941323 | Program output: -14.7911058677
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_inc} {:instruction float_yank} {:instruction float_mult} {:instruction float_yank} {:instruction integer_add} {:instruction integer_stackdepth} {:instruction float_flush} {:instruction in1} {:instruction integer_dup_times} {:instruction float_div} {:instruction float_add} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_dup_items} {:instruction float_dec} {:instruction float_dec} {:instruction integer_div} {:instruction integer_rot} {:instruction float_dec} {:instruction float_dec} {:instruction integer_dup_items} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_div} {:instruction float_dec} {:instruction integer_dup_items} {:instruction float_dec} {:instruction float_dec} {:instruction integer_yank} {:instruction integer_dup_times} {:instruction integer_dup_items} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_dup_items} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_div} {:instruction integer_dup_times} {:instruction integer_dup_items} {:instruction float_dec} {:instruction float_dec} {:instruction integer_div} {:instruction float_rot} {:instruction float_dec} {:instruction float_dec} {:instruction integer_div} {:instruction print_float} {:instruction integer_dup} {:instruction integer_dup_items} {:instruction float_cos} {:instruction tagged_423} {:instruction float_max} {:instruction integer_pop})
Best program: (float_inc float_yank float_mult float_yank integer_add integer_stackdepth float_flush in1 integer_dup_times float_div float_add float_dec float_dec float_dec float_dec integer_dup_items float_dec float_dec integer_div integer_rot float_dec float_dec integer_dup_items float_dec float_dec float_dec float_dec integer_div float_dec integer_dup_items float_dec float_dec integer_yank integer_dup_times integer_dup_items float_dec float_dec float_dec float_dec integer_dup_items float_dec float_dec float_dec float_dec integer_div integer_dup_times integer_dup_items float_dec float_dec integer_div float_rot float_dec float_dec integer_div print_float integer_dup integer_dup_items float_cos tagged_423 float_max integer_pop)
Errors: [105.0 2 15.0 2 6.0 2 124.0 3 3.0 1 22.0 2 44.0 11 3.0 2 5.0 1 39.0 2 23.0 2 16.0 2 51.0 3 19.0 2 89.0 3 7.0 3 69.0 2 63.0 2 8.0 2 5.0 3 56.0 2 25.0 2 108.0 11 108.0 3 117.0 13]
Total: 1213.0
Mean: 24.26
Genome size: 61
Size: 62
Percent parens: 0.016
--- Population Statistics ---
Average total errors in population: 3144.240488
Median total errors in population: 1213.0
Error averages by case: (175.83994529999998 3.461 96.00043989999998 2.99 85.02168840000002 3.032 193.23585259999996 4.032 82.6048028 2.348 98.88500619999999 3.085 118.39764980000001 11.336 83.074523 2.991 84.6283861 2.356 114.16777509999997 5.226 103.2624863 3.291 96.82431279999999 3.273 125.40952399999998 3.812 96.36259780000002 3.102 161.15794959999997 4.026 88.2432536 4.021 141.80148449999996 3.135 136.2424612 5.338 87.75089159999999 3.063 85.9805644 3.983 131.4937542 3.186 103.20678180000002 3.191 177.98809110000005 11.015 178.27743110000003 3.852 186.27283479999997 12.965)
Error minima by case: (3.0 1 1.0 1 0.0 0 22.0 1 0.0 0 1.0 1 0.0175 7 0.0 0 0.0 0 3.6188 1 7.0 1 0.0 1 0.4002 1 2.0 1 13.0 2 0.0 0 0.2671 1 11.847 1 0.0 0 0.0 0 1.9118 1 9.0 1 12.3925 1 6.0 1 21.0292 1)
Average genome size in population (length): 57.318
Average program size in population (points): 58.318
Average percent parens in population: 0.017
Minimum age in population: 71.62240824296704
Maximum age in population: 75.98328424906333
Average age in population: 73.91658058610456
Median age in population: 73.9397212318528
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 11
Genome diversity (% unique Plush genomes):	 0.795
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 11
Syntactic diversity (% unique Push programs):	 0.795
Total error diversity:				 0.069
Error (vector) diversity:			 0.073
Behavioral diversity:				 0.073
--- Run Statistics ---
Number of program evaluations used so far: 52000
Number of point (instruction) evaluations so far: 66699830
--- Timings ---
Current time: 1529615610988 milliseconds
Total Time:         161.0 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        57.6 seconds, 35.8%
Fitness Testing:     82.7 seconds, 51.3%
Report:              20.7 seconds, 12.8%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 51
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 52
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 52
;;******************************
;; -*- Number IO problem report - generation 52
Test total error for best: 59460.0
Test mean error for best: 29.73000
;;------------------------------
Outputs of best individual on training cases:
Correct output: 150.3639690164 | Program output: 45.3639690164 
Correct output: -129.2046261   | Program output: -114.2046261  
Correct output: 43.6336388837  | Program output: 37.6336388837 
Correct output: 168.6824809869 | Program output: 44.6824809869 
Correct output: -24.6347316794 | Program output: -27.6347316794
Correct output: 39.9291320135  | Program output: 17.9291320135 
Correct output: -20.9190282536 | Program output: 23.0809717464 
Correct output: 61.9263871894  | Program output: 58.9263871894 
Correct output: -28.8395473609 | Program output: -23.8395473609
Correct output: -39.146556962  | Program output: -0.146556962  
Correct output: -134.9331989268 | Program output: -111.9331989268
Correct output: -126.4496738486 | Program output: -110.4496738486
Correct output: -51.218440095  | Program output: -102.218440095
Correct output: 45.5895106217  | Program output: 26.5895106217 
Correct output: 136.6637618296 | Program output: 47.6637618296 
Correct output: -104.5625509424 | Program output: -97.5625509424
Correct output: 80.9125656746  | Program output: 11.9125656746 
Correct output: -63.4657032446 | Program output: -0.4657032446 
Correct output: -52.106433034  | Program output: -44.106433034 
Correct output: -99.9152304515 | Program output: -104.9152304515
Correct output: -78.2834351958 | Program output: -22.2834351958
Correct output: -64.2911152024 | Program output: -39.2911152024
Correct output: 93.5722006381  | Program output: -14.4277993619
Correct output: 141.452540764  | Program output: 33.452540764  
Correct output: 102.2088941323 | Program output: -14.7911058677
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_inc} {:instruction float_flush} {:instruction in1} {:instruction integer_yank} {:instruction float_div} {:instruction integer_yank} {:instruction integer_dup_items} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_div} {:instruction float_sub} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_div} {:instruction float_dec} {:instruction integer_dup_items} {:instruction float_dec} {:instruction float_dec} {:instruction integer_yank} {:instruction integer_dup_times} {:instruction integer_dup_items} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_dup_items} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_div} {:instruction integer_yank} {:instruction integer_dup_times} {:instruction integer_max} {:instruction float_dec} {:instruction float_dec} {:instruction integer_mod} {:instruction float_dec} {:instruction integer_div} {:instruction print_float} {:instruction float_dec} {:instruction float_sin} {:instruction integer_yankdup} {:instruction float_dec} {:instruction integer_dup_times} {:instruction integer_dup_items} {:instruction float_dec} {:instruction float_swap} {:instruction print_float} {:instruction float_rot})
Best program: (float_inc float_flush in1 integer_yank float_div integer_yank integer_dup_items float_dec float_dec float_dec float_dec float_dec float_dec integer_div float_sub float_dec float_dec float_dec float_dec integer_div float_dec integer_dup_items float_dec float_dec integer_yank integer_dup_times integer_dup_items float_dec float_dec float_dec float_dec integer_dup_items float_dec float_dec float_dec float_dec float_dec float_dec float_dec integer_div integer_yank integer_dup_times integer_max float_dec float_dec integer_mod float_dec integer_div print_float float_dec float_sin integer_yankdup float_dec integer_dup_times integer_dup_items float_dec float_swap print_float float_rot)
Errors: [105.0 2 15.0 2 6.0 2 124.0 3 3.0 1 22.0 2 44.0 11 3.0 2 5.0 1 39.0 2 23.0 2 16.0 2 51.0 3 19.0 2 89.0 3 7.0 3 69.0 2 63.0 2 8.0 2 5.0 3 56.0 2 25.0 2 108.0 11 108.0 3 117.0 13]
Total: 1213.0
Mean: 24.26
Genome size: 59
Size: 60
Percent parens: 0.017
--- Population Statistics ---
Average total errors in population: 3182.9410485999992
Median total errors in population: 1213.0
Error averages by case: (177.6217389 3.502 98.29372829999998 2.999 87.0619937 3.064 195.00972860000005 4.064 83.28536510000002 2.4 100.154735 3.109 119.96057809999996 11.343 85.23646169999998 3.026 85.1090962 2.412 116.8163666 5.178 105.56276 3.328 99.1190825 3.315 127.38778039999998 3.825 98.12802769999998 3.118 162.93642759999997 4.055 90.5838315 4.038 142.75198310000002 3.165 137.95754589999999 5.282 89.1896244 3.066 88.36969850000003 3.988 131.7491751 3.261 104.49665960000003 3.197 177.66358459999998 10.986 180.0518344 3.874 185.9172411 12.931)
Error minima by case: (45.636 1 1.0 1 0.0 0 65.3175 2 0.0 0 1.0 1 1.8096 9 0.0 0 0.0 0 5.1465 1 9.0 1 2.0 1 4.3166 1 2.0 1 27.3362 1 0.0 0 8.9287 1 16.5638 1 0.0 0 0.0 0 31.3816 1 0.2911 1 0.3096 2 47.5707 1 7.6393 1)
Average genome size in population (length): 57.46
Average program size in population (points): 58.46
Average percent parens in population: 0.017
Minimum age in population: 72.86260227790314
Maximum age in population: 77.19536155111395
Average age in population: 75.28728010256236
Median age in population: 75.31841557497471
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 9
Genome diversity (% unique Plush genomes):	 0.779
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 9
Syntactic diversity (% unique Push programs):	 0.779
Total error diversity:				 0.07
Error (vector) diversity:			 0.075
Behavioral diversity:				 0.076
--- Run Statistics ---
Number of program evaluations used so far: 53000
Number of point (instruction) evaluations so far: 68136405
--- Timings ---
Current time: 1529615614175 milliseconds
Total Time:         164.2 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        58.7 seconds, 35.8%
Fitness Testing:     84.3 seconds, 51.3%
Report:              21.1 seconds, 12.8%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 52
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 53
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 53
;;******************************
;; -*- Number IO problem report - generation 53
Test total error for best: 59460.0
Test mean error for best: 29.73000
;;------------------------------
Outputs of best individual on training cases:
Correct output: 150.3639690164 | Program output: 45.3639690164 
Correct output: -129.2046261   | Program output: -114.2046261  
Correct output: 43.6336388837  | Program output: 37.6336388837 
Correct output: 168.6824809869 | Program output: 44.6824809869 
Correct output: -24.6347316794 | Program output: -27.6347316794
Correct output: 39.9291320135  | Program output: 17.9291320135 
Correct output: -20.9190282536 | Program output: 23.0809717464 
Correct output: 61.9263871894  | Program output: 58.9263871894 
Correct output: -28.8395473609 | Program output: -23.8395473609
Correct output: -39.146556962  | Program output: -0.146556962  
Correct output: -134.9331989268 | Program output: -111.9331989268
Correct output: -126.4496738486 | Program output: -110.4496738486
Correct output: -51.218440095  | Program output: -102.218440095
Correct output: 45.5895106217  | Program output: 26.5895106217 
Correct output: 136.6637618296 | Program output: 47.6637618296 
Correct output: -104.5625509424 | Program output: -97.5625509424
Correct output: 80.9125656746  | Program output: 11.9125656746 
Correct output: -63.4657032446 | Program output: -0.4657032446 
Correct output: -52.106433034  | Program output: -44.106433034 
Correct output: -99.9152304515 | Program output: -104.9152304515
Correct output: -78.2834351958 | Program output: -22.2834351958
Correct output: -64.2911152024 | Program output: -39.2911152024
Correct output: 93.5722006381  | Program output: -14.4277993619
Correct output: 141.452540764  | Program output: 33.452540764  
Correct output: 102.2088941323 | Program output: -14.7911058677
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_inc} {:instruction float_flush} {:instruction in1} {:instruction integer_yank} {:instruction float_div} {:instruction float_add} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_dup_items} {:instruction float_dec} {:instruction float_dec} {:instruction integer_div} {:instruction integer_rot} {:instruction float_dec} {:instruction float_dec} {:instruction integer_dup_items} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_div} {:instruction float_dec} {:instruction integer_dup_items} {:instruction float_dec} {:instruction float_dec} {:instruction integer_yank} {:instruction integer_dup_times} {:instruction integer_dup_items} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_mod} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_div} {:instruction integer_dup_times} {:instruction integer_dup_items} {:instruction float_dec} {:instruction float_dec} {:instruction integer_div} {:instruction float_rot} {:instruction float_dec} {:instruction float_dec} {:instruction integer_div} {:instruction print_float} {:instruction float_rot} {:instruction integer_yank} {:instruction integer_dup_times} {:instruction integer_dup_items} {:instruction float_dec} {:instruction float_dec} {:instruction integer_mod} {:instruction float_dec} {:instruction integer_div} {:instruction print_float} {:instruction float_rot} {:instruction float_dec} {:instruction tagged_423} {:instruction integer_min} {:instruction integer_pop})
Best program: (float_inc float_flush in1 integer_yank float_div float_add float_dec float_dec float_dec float_dec integer_dup_items float_dec float_dec integer_div integer_rot float_dec float_dec integer_dup_items float_dec float_dec float_dec float_dec integer_div float_dec integer_dup_items float_dec float_dec integer_yank integer_dup_times integer_dup_items float_dec float_dec float_dec float_dec integer_mod float_dec float_dec float_dec float_dec integer_div integer_dup_times integer_dup_items float_dec float_dec integer_div float_rot float_dec float_dec integer_div print_float float_rot integer_yank integer_dup_times integer_dup_items float_dec float_dec integer_mod float_dec integer_div print_float float_rot float_dec tagged_423 integer_min integer_pop)
Errors: [105.0 2 15.0 2 6.0 2 124.0 3 3.0 1 22.0 2 44.0 11 3.0 2 5.0 1 39.0 2 23.0 2 16.0 2 51.0 3 19.0 2 89.0 3 7.0 3 69.0 2 63.0 2 8.0 2 5.0 3 56.0 2 25.0 2 108.0 11 108.0 3 117.0 13]
Total: 1213.0
Mean: 24.26
Genome size: 65
Size: 66
Percent parens: 0.015
--- Population Statistics ---
Average total errors in population: 2948.4781268999996
Median total errors in population: 1213.0
Error averages by case: (169.74384449999997 3.35 87.9951062 2.896 77.8284571 2.949 187.37337009999996 3.943 72.6803077 2.256 91.9711981 3.015 111.37638129999996 11.279 75.84094159999998 2.91 74.67656190000001 2.25 106.09197909999995 5.012 95.34392890000001 3.2 88.84120099999998 3.188 118.0552818 3.75 89.3921638 3.008 154.9331856 3.98 80.2202471 3.944 135.12207489999997 3.042 128.3535833 5.122 79.0062169 2.974 78.05621000000002 3.907 121.69231660000001 3.097 94.24748320000003 3.089 169.92069439999997 11.0 172.2300327 3.795 177.58435910000003 12.945)
Error minima by case: (78.0 1 3.0 1 0.0 0 97.0 2 0.0 0 1.0 1 0.8774 8 0.0 0 0.0 0 12.1887 1 4.0 1 3.0 1 10.8775 1 0.4091 1 62.0 2 0.0 0 35.7322 1 4.1232 1 0.0 0 0.0 0 11.1232 1 6.0 1 48.3918 1 81.0 1 57.0285 1)
Average genome size in population (length): 57.21
Average program size in population (points): 58.21
Average percent parens in population: 0.017
Minimum age in population: 73.89594495323804
Maximum age in population: 78.56532382958729
Average age in population: 76.69740434870177
Median age in population: 76.77289933602702
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 11
Genome diversity (% unique Plush genomes):	 0.753
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 11
Syntactic diversity (% unique Push programs):	 0.753
Total error diversity:				 0.063
Error (vector) diversity:			 0.067
Behavioral diversity:				 0.067
--- Run Statistics ---
Number of program evaluations used so far: 54000
Number of point (instruction) evaluations so far: 69566730
--- Timings ---
Current time: 1529615617269 milliseconds
Total Time:         167.3 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        59.8 seconds, 35.8%
Fitness Testing:     85.8 seconds, 51.3%
Report:              21.5 seconds, 12.9%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 53
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 54
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 54
;;******************************
;; -*- Number IO problem report - generation 54
Test total error for best: 59460.0
Test mean error for best: 29.73000
;;------------------------------
Outputs of best individual on training cases:
Correct output: 150.3639690164 | Program output: 45.3639690164 
Correct output: -129.2046261   | Program output: -114.2046261  
Correct output: 43.6336388837  | Program output: 37.6336388837 
Correct output: 168.6824809869 | Program output: 44.6824809869 
Correct output: -24.6347316794 | Program output: -27.6347316794
Correct output: 39.9291320135  | Program output: 17.9291320135 
Correct output: -20.9190282536 | Program output: 23.0809717464 
Correct output: 61.9263871894  | Program output: 58.9263871894 
Correct output: -28.8395473609 | Program output: -23.8395473609
Correct output: -39.146556962  | Program output: -0.146556962  
Correct output: -134.9331989268 | Program output: -111.9331989268
Correct output: -126.4496738486 | Program output: -110.4496738486
Correct output: -51.218440095  | Program output: -102.218440095
Correct output: 45.5895106217  | Program output: 26.5895106217 
Correct output: 136.6637618296 | Program output: 47.6637618296 
Correct output: -104.5625509424 | Program output: -97.5625509424
Correct output: 80.9125656746  | Program output: 11.9125656746 
Correct output: -63.4657032446 | Program output: -0.4657032446 
Correct output: -52.106433034  | Program output: -44.106433034 
Correct output: -99.9152304515 | Program output: -104.9152304515
Correct output: -78.2834351958 | Program output: -22.2834351958
Correct output: -64.2911152024 | Program output: -39.2911152024
Correct output: 93.5722006381  | Program output: -14.4277993619
Correct output: 141.452540764  | Program output: 33.452540764  
Correct output: 102.2088941323 | Program output: -14.7911058677
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_max} {:instruction float_inc} {:instruction integer_div} {:instruction in1} {:instruction integer_dup_times} {:instruction integer_dup_items} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_div} {:instruction float_sub} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_div} {:instruction integer_yank} {:instruction integer_min} {:instruction integer_dup_items} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_dup_items} {:instruction float_dec} {:instruction float_dec} {:instruction float_shove} {:instruction float_sub} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_div} {:instruction float_dec} {:instruction float_dec} {:instruction integer_dup_items} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_min} {:instruction integer_dup_times} {:instruction integer_dup_items} {:instruction integer_mult} {:instruction float_dec} {:instruction float_dec} {:instruction integer_dup_times} {:instruction integer_dup_items} {:instruction float_dec} {:instruction integer_div} {:instruction print_float} {:instruction float_rot})
Best program: (integer_max float_inc integer_div in1 integer_dup_times integer_dup_items float_dec float_dec float_dec float_dec integer_div float_sub float_dec float_dec float_dec float_dec float_div integer_yank integer_min integer_dup_items float_dec float_dec float_dec float_dec integer_dup_items float_dec float_dec float_shove float_sub float_dec float_dec float_dec float_dec integer_div float_dec float_dec integer_dup_items float_dec float_dec float_dec float_dec integer_min integer_dup_times integer_dup_items integer_mult float_dec float_dec integer_dup_times integer_dup_items float_dec integer_div print_float float_rot)
Errors: [105.0 2 15.0 2 6.0 2 124.0 3 3.0 1 22.0 2 44.0 11 3.0 2 5.0 1 39.0 2 23.0 2 16.0 2 51.0 3 19.0 2 89.0 3 7.0 3 69.0 2 63.0 2 8.0 2 5.0 3 56.0 2 25.0 2 108.0 11 108.0 3 117.0 13]
Total: 1213.0
Mean: 24.26
Genome size: 53
Size: 54
Percent parens: 0.019
--- Population Statistics ---
Average total errors in population: 3145.7681674999994
Median total errors in population: 1213.0
Error averages by case: (176.48552870000006 3.508 96.5225488 3.038 86.5683971 3.117 193.90515509999994 4.092 81.55645990000004 2.443 100.31847759999998 3.178 118.68688029999997 11.29 84.84755979999998 3.1 83.23165290000001 2.435 113.7328253 4.992 103.79137879999996 3.351 97.3210051 3.336 124.50013139999999 3.873 97.84881750000001 3.164 161.76703419999998 4.081 88.78746870000003 4.093 142.0616052 3.204 135.84793999999997 5.099 87.33967570000002 3.113 86.74412650000005 4.042 129.95941330000002 3.247 102.57160860000002 3.247 175.61693319999998 11.005 178.86490600000005 3.946 183.96263779999998 12.934)
Error minima by case: (17.7783 1 0.0 0 0.0 0 36.7783 2 0.0 0 1.0 1 0.7578 7 0.0 0 0.0 0 2.1402 1 3.4301 1 1.0 1 21.2716 1 0.0 0 1.7783 1 0.0 0 16.3677 1 21.8598 1 0.0 0 0.0 0 14.8598 1 5.4301 1 20.7783 2 20.7783 1 29.7783 1)
Average genome size in population (length): 57.683
Average program size in population (points): 58.683
Average percent parens in population: 0.017
Minimum age in population: 75.54851942428805
Maximum age in population: 80.22807610435706
Average age in population: 78.13855437779252
Median age in population: 78.18603942577415
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 11
Genome diversity (% unique Plush genomes):	 0.781
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 11
Syntactic diversity (% unique Push programs):	 0.781
Total error diversity:				 0.078
Error (vector) diversity:			 0.082
Behavioral diversity:				 0.083
--- Run Statistics ---
Number of program evaluations used so far: 55000
Number of point (instruction) evaluations so far: 71008955
--- Timings ---
Current time: 1529615620377 milliseconds
Total Time:         170.5 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        61.0 seconds, 35.8%
Fitness Testing:     87.4 seconds, 51.3%
Report:              22.0 seconds, 12.9%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 54
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 55
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 55
;;******************************
;; -*- Number IO problem report - generation 55
Test total error for best: 59460.0
Test mean error for best: 29.73000
;;------------------------------
Outputs of best individual on training cases:
Correct output: 150.3639690164 | Program output: 45.3639690164 
Correct output: -129.2046261   | Program output: -114.2046261  
Correct output: 43.6336388837  | Program output: 37.6336388837 
Correct output: 168.6824809869 | Program output: 44.6824809869 
Correct output: -24.6347316794 | Program output: -27.6347316794
Correct output: 39.9291320135  | Program output: 17.9291320135 
Correct output: -20.9190282536 | Program output: 23.0809717464 
Correct output: 61.9263871894  | Program output: 58.9263871894 
Correct output: -28.8395473609 | Program output: -23.8395473609
Correct output: -39.146556962  | Program output: -0.146556962  
Correct output: -134.9331989268 | Program output: -111.9331989268
Correct output: -126.4496738486 | Program output: -110.4496738486
Correct output: -51.218440095  | Program output: -102.218440095
Correct output: 45.5895106217  | Program output: 26.5895106217 
Correct output: 136.6637618296 | Program output: 47.6637618296 
Correct output: -104.5625509424 | Program output: -97.5625509424
Correct output: 80.9125656746  | Program output: 11.9125656746 
Correct output: -63.4657032446 | Program output: -0.4657032446 
Correct output: -52.106433034  | Program output: -44.106433034 
Correct output: -99.9152304515 | Program output: -104.9152304515
Correct output: -78.2834351958 | Program output: -22.2834351958
Correct output: -64.2911152024 | Program output: -39.2911152024
Correct output: 93.5722006381  | Program output: -14.4277993619
Correct output: 141.452540764  | Program output: 33.452540764  
Correct output: 102.2088941323 | Program output: -14.7911058677
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_inc} {:instruction integer_dec} {:instruction float_mult} {:instruction float_yank} {:instruction float_flush} {:instruction integer_inc} {:instruction float_inc} {:instruction float_yank} {:instruction float_mult} {:instruction float_yank} {:instruction integer_add} {:instruction integer_rot} {:instruction float_dec} {:instruction in1} {:instruction integer_yank} {:instruction integer_dup_times} {:instruction float_mult} {:instruction float_dec} {:instruction integer_rot} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_yankdup} {:instruction float_dec} {:instruction float_dec} {:instruction integer_div} {:instruction integer_dup_items} {:instruction float_dec} {:instruction float_dec} {:instruction integer_dup_items} {:instruction integer_yank} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_div} {:instruction float_dec} {:instruction integer_div} {:instruction float_dec} {:instruction float_dec} {:instruction integer_yank} {:instruction integer_dup_times} {:instruction integer_dup_items} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_yank} {:instruction integer_dup_times} {:instruction tag_integer_206} {:instruction float_sub} {:instruction integer_dup_items} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_dup_items} {:instruction float_dec} {:instruction float_dec} {:instruction integer_div} {:instruction float_sub} {:instruction float_dec} {:instruction float_dec} {:instruction integer_inc} {:instruction float_dec} {:instruction integer_dec} {:instruction print_float} {:instruction float_max} {:instruction float_frominteger})
Best program: (float_inc integer_dec float_mult float_yank float_flush integer_inc float_inc float_yank float_mult float_yank integer_add integer_rot float_dec in1 integer_yank integer_dup_times float_mult float_dec integer_rot float_dec float_dec float_dec float_dec integer_yankdup float_dec float_dec integer_div integer_dup_items float_dec float_dec integer_dup_items integer_yank float_dec float_dec float_dec integer_div float_dec integer_div float_dec float_dec integer_yank integer_dup_times integer_dup_items float_dec float_dec float_dec integer_yank integer_dup_times tag_integer_206 float_sub integer_dup_items float_dec float_dec float_dec float_dec integer_dup_items float_dec float_dec integer_div float_sub float_dec float_dec integer_inc float_dec integer_dec print_float float_max float_frominteger)
Errors: [105.0 2 15.0 2 6.0 2 124.0 3 3.0 1 22.0 2 44.0 11 3.0 2 5.0 1 39.0 2 23.0 2 16.0 2 51.0 3 19.0 2 89.0 3 7.0 3 69.0 2 63.0 2 8.0 2 5.0 3 56.0 2 25.0 2 108.0 11 108.0 3 117.0 13]
Total: 1213.0
Mean: 24.26
Genome size: 68
Size: 69
Percent parens: 0.014
--- Population Statistics ---
Average total errors in population: 3448.5922524
Median total errors in population: 1213.0
Error averages by case: (188.75003810000004 3.572 108.84297099999998 3.082 98.89824690000002 3.141 205.98778619999993 4.152 92.46989799999999 2.485 112.62347079999996 3.213 131.51506049999998 11.361 97.08406509999998 3.11 94.35715429999999 2.504 126.10538899999996 5.221 116.03406669999998 3.419 109.62963259999998 3.416 137.94034509999997 3.92 110.16291429999998 3.204 174.29716319999997 4.14 101.13572590000004 4.127 155.10817839999999 3.243 147.84267780000002 5.321 98.86240430000001 3.177 99.03081610000004 4.101 140.6923234 3.346 113.61559400000002 3.303 186.86924390000001 11.037 191.12476760000004 3.949 195.06231919999993 13.006)
Error minima by case: (78.0 1 1.0 1 0.0 0 97.0 1 0.0 0 1.0 1 3.0801 8 0.0 0 0.0 0 5.5257 1 9.0 1 2.0 1 14.8477 1 2.0 1 62.0 2 0.0 0 42.0 1 2.6004 1 0.0 0 0.0 0 12.2173 1 1.775 1 8.7714 1 81.0 1 7.7785 1)
Average genome size in population (length): 57.323
Average program size in population (points): 58.323
Average percent parens in population: 0.017
Minimum age in population: 76.93535539427276
Maximum age in population: 81.60760522589992
Average age in population: 79.53478847106678
Median age in population: 79.5874887756164
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 12
Genome diversity (% unique Plush genomes):	 0.785
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 12
Syntactic diversity (% unique Push programs):	 0.785
Total error diversity:				 0.073
Error (vector) diversity:			 0.078
Behavioral diversity:				 0.079
--- Run Statistics ---
Number of program evaluations used so far: 56000
Number of point (instruction) evaluations so far: 72442030
--- Timings ---
Current time: 1529615623660 milliseconds
Total Time:         173.6 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        62.1 seconds, 35.8%
Fitness Testing:     89.1 seconds, 51.3%
Report:              22.3 seconds, 12.9%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 55
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 56
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 56
;;******************************
;; -*- Number IO problem report - generation 56
Test total error for best: 59460.0
Test mean error for best: 29.73000
;;------------------------------
Outputs of best individual on training cases:
Correct output: 150.3639690164 | Program output: 45.3639690164 
Correct output: -129.2046261   | Program output: -114.2046261  
Correct output: 43.6336388837  | Program output: 37.6336388837 
Correct output: 168.6824809869 | Program output: 44.6824809869 
Correct output: -24.6347316794 | Program output: -27.6347316794
Correct output: 39.9291320135  | Program output: 17.9291320135 
Correct output: -20.9190282536 | Program output: 23.0809717464 
Correct output: 61.9263871894  | Program output: 58.9263871894 
Correct output: -28.8395473609 | Program output: -23.8395473609
Correct output: -39.146556962  | Program output: -0.146556962  
Correct output: -134.9331989268 | Program output: -111.9331989268
Correct output: -126.4496738486 | Program output: -110.4496738486
Correct output: -51.218440095  | Program output: -102.218440095
Correct output: 45.5895106217  | Program output: 26.5895106217 
Correct output: 136.6637618296 | Program output: 47.6637618296 
Correct output: -104.5625509424 | Program output: -97.5625509424
Correct output: 80.9125656746  | Program output: 11.9125656746 
Correct output: -63.4657032446 | Program output: -0.4657032446 
Correct output: -52.106433034  | Program output: -44.106433034 
Correct output: -99.9152304515 | Program output: -104.9152304515
Correct output: -78.2834351958 | Program output: -22.2834351958
Correct output: -64.2911152024 | Program output: -39.2911152024
Correct output: 93.5722006381  | Program output: -14.4277993619
Correct output: 141.452540764  | Program output: 33.452540764  
Correct output: 102.2088941323 | Program output: -14.7911058677
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_shove} {:instruction print_integer} {:instruction in1} {:instruction float_flush} {:instruction integer_fromfloat} {:instruction integer_add} {:instruction print_float} {:instruction float_dec} {:instruction in1} {:instruction float_dec} {:instruction integer_dup_times} {:instruction integer_dup_items} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_div} {:instruction float_sub} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_sub} {:instruction float_dec} {:instruction integer_dup_items} {:instruction float_dec} {:instruction float_dec} {:instruction integer_yank} {:instruction integer_dup_times} {:instruction integer_dup_items} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_dup_items} {:instruction float_dec} {:instruction float_min} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_div} {:instruction integer_yank} {:instruction float_dec} {:instruction integer_dup_items} {:instruction float_dec} {:instruction float_dec} {:instruction integer_mod} {:instruction float_dec} {:instruction integer_div} {:instruction print_float} {:instruction float_rot})
Best program: (integer_shove print_integer in1 float_flush integer_fromfloat integer_add print_float float_dec in1 float_dec integer_dup_times integer_dup_items float_dec float_dec float_dec float_dec float_dec integer_div float_sub float_dec float_dec float_dec float_dec integer_sub float_dec integer_dup_items float_dec float_dec integer_yank integer_dup_times integer_dup_items float_dec float_dec float_dec float_dec integer_dup_items float_dec float_min float_dec float_dec float_dec float_dec float_dec integer_div integer_yank float_dec integer_dup_items float_dec float_dec integer_mod float_dec integer_div print_float float_rot)
Errors: [105.0 2 15.0 2 6.0 2 124.0 3 3.0 1 22.0 2 44.0 11 3.0 2 5.0 1 39.0 2 23.0 2 16.0 2 51.0 3 19.0 2 89.0 3 7.0 3 69.0 2 63.0 2 8.0 2 5.0 3 56.0 2 25.0 2 108.0 11 108.0 3 117.0 13]
Total: 1213.0
Mean: 24.26
Genome size: 54
Size: 55
Percent parens: 0.018
--- Population Statistics ---
Average total errors in population: 3293.6452760999996
Median total errors in population: 1213.0
Error averages by case: (182.329584 3.56 101.99026319999997 3.045 91.9149469 3.146 199.72957139999997 4.124 87.76042699999998 2.461 105.20139769999999 3.173 124.59586839999997 11.331 90.05569469999996 3.078 89.76151829999999 2.444 119.78898629999992 5.334 109.23573909999999 3.408 102.78746949999997 3.391 130.9067723 3.899 103.22101419999998 3.182 167.79557730000005 4.146 94.2414564 4.132 147.6968453 3.202 141.70613979999996 5.435 93.6519615 3.139 91.91079870000002 4.075 136.14584759999997 3.279 109.09690140000002 3.274 182.48194399999997 11.003 184.7733204000001 3.948 190.71923070000005 12.937)
Error minima by case: (68.9704 1 3.0 1 0.0 0 87.9704 2 0.0 0 0.0 0 0.018 7 0.0 0 0.0 0 9.1466 1 11.0 1 4.0 1 1.9989 1 1.9583 1 52.9704 2 0.0 0 32.9704 1 6.5255 1 0.0 0 0.0 0 0.4745 1 11.0738 1 60.9722 2 71.9704 1 63.7165 2)
Average genome size in population (length): 57.179
Average program size in population (points): 58.179
Average percent parens in population: 0.017
Minimum age in population: 78.841905377559
Maximum age in population: 83.04757643858468
Average age in population: 80.97265707873969
Median age in population: 80.9761374814445
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 12
Genome diversity (% unique Plush genomes):	 0.789
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 12
Syntactic diversity (% unique Push programs):	 0.789
Total error diversity:				 0.065
Error (vector) diversity:			 0.07
Behavioral diversity:				 0.071
--- Run Statistics ---
Number of program evaluations used so far: 57000
Number of point (instruction) evaluations so far: 73871605
--- Timings ---
Current time: 1529615626732 milliseconds
Total Time:         176.8 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        63.2 seconds, 35.8%
Fitness Testing:     90.6 seconds, 51.3%
Report:              22.8 seconds, 12.9%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 56
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 57
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 57
;;******************************
;; -*- Number IO problem report - generation 57
Test total error for best: 59460.0
Test mean error for best: 29.73000
;;------------------------------
Outputs of best individual on training cases:
Correct output: 150.3639690164 | Program output: 45.3639690164 
Correct output: -129.2046261   | Program output: -114.2046261  
Correct output: 43.6336388837  | Program output: 37.6336388837 
Correct output: 168.6824809869 | Program output: 44.6824809869 
Correct output: -24.6347316794 | Program output: -27.6347316794
Correct output: 39.9291320135  | Program output: 17.9291320135 
Correct output: -20.9190282536 | Program output: 23.0809717464 
Correct output: 61.9263871894  | Program output: 58.9263871894 
Correct output: -28.8395473609 | Program output: -23.8395473609
Correct output: -39.146556962  | Program output: -0.146556962  
Correct output: -134.9331989268 | Program output: -111.9331989268
Correct output: -126.4496738486 | Program output: -110.4496738486
Correct output: -51.218440095  | Program output: -102.218440095
Correct output: 45.5895106217  | Program output: 26.5895106217 
Correct output: 136.6637618296 | Program output: 47.6637618296 
Correct output: -104.5625509424 | Program output: -97.5625509424
Correct output: 80.9125656746  | Program output: 11.9125656746 
Correct output: -63.4657032446 | Program output: -0.4657032446 
Correct output: -52.106433034  | Program output: -44.106433034 
Correct output: -99.9152304515 | Program output: -104.9152304515
Correct output: -78.2834351958 | Program output: -22.2834351958
Correct output: -64.2911152024 | Program output: -39.2911152024
Correct output: 93.5722006381  | Program output: -14.4277993619
Correct output: 141.452540764  | Program output: 33.452540764  
Correct output: 102.2088941323 | Program output: -14.7911058677
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_inc} {:instruction float_inc} {:instruction float_yank} {:instruction float_mult} {:instruction float_yank} {:instruction float_yankdup} {:instruction in1} {:instruction integer_yank} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_yankdup} {:instruction float_dec} {:instruction float_dec} {:instruction integer_div} {:instruction integer_mod} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_dup_items} {:instruction float_dec} {:instruction float_dec} {:instruction integer_div} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_dup_items} {:instruction float_dec} {:instruction float_dec} {:instruction integer_div} {:instruction float_sub} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_div} {:instruction float_dec} {:instruction integer_dup_times} {:instruction integer_dup_items} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_div} {:instruction print_float} {:instruction float_rot} {:instruction float_dec} {:instruction float_dec} {:instruction float_rot} {:instruction integer_dup_items} {:instruction float_cos} {:instruction float_dec} {:instruction float_dec} {:instruction integer_dup_items})
Best program: (float_inc float_inc float_yank float_mult float_yank float_yankdup in1 integer_yank float_dec float_dec float_dec float_dec integer_yankdup float_dec float_dec integer_div integer_mod float_dec float_dec float_dec float_dec float_dec integer_dup_items float_dec float_dec integer_div float_dec float_dec float_dec integer_dup_items float_dec float_dec integer_div float_sub float_dec float_dec float_dec float_dec integer_div float_dec integer_dup_times integer_dup_items float_dec float_dec float_dec float_dec integer_div print_float float_rot float_dec float_dec float_rot integer_dup_items float_cos float_dec float_dec integer_dup_items)
Errors: [105.0 2 15.0 2 6.0 2 124.0 3 3.0 1 22.0 2 44.0 11 3.0 2 5.0 1 39.0 2 23.0 2 16.0 2 51.0 3 19.0 2 89.0 3 7.0 3 69.0 2 63.0 2 8.0 2 5.0 3 56.0 2 25.0 2 108.0 11 108.0 3 117.0 13]
Total: 1213.0
Mean: 24.26
Genome size: 57
Size: 58
Percent parens: 0.017
--- Population Statistics ---
Average total errors in population: 3187.857652299999
Median total errors in population: 1213.0
Error averages by case: (177.14761340000004 3.511 98.49882579999996 3.012 86.47523400000001 3.105 194.50091469999995 4.084 84.5126052 2.433 100.1876878 3.137 119.2513847 11.363 84.72361829999994 3.062 86.47242030000001 2.425 114.96330979999996 5.222 105.67975700000001 3.374 99.28977259999995 3.37 127.70355399999995 3.876 97.76625980000004 3.17 162.5064808 4.092 90.66285710000001 4.083 143.06013120000006 3.176 137.02316990000003 5.33 89.6792451 3.105 88.61370140000007 4.048 132.97240880000004 3.274 105.02142410000003 3.248 179.98597359999997 11.026 179.51514070000002 3.909 188.2431622 12.966)
Error minima by case: (4.0 1 5.0 1 0.0 0 23.0 2 0.0 0 0.0 0 0.081 7 0.0 0 0.0 0 5.8039 1 13.0 1 6.0 1 2.9883 2 0.0 0 12.0 2 0.0 0 32.0 1 9.259 1 0.0 0 0.0 0 21.603 1 10.0844 1 56.5867 2 7.0 1 67.0442 1)
Average genome size in population (length): 57.351
Average program size in population (points): 58.351
Average percent parens in population: 0.017
Minimum age in population: 79.86237858828225
Maximum age in population: 84.7716932936361
Average age in population: 82.43594898089144
Median age in population: 82.47114875624496
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 11
Genome diversity (% unique Plush genomes):	 0.788
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 11
Syntactic diversity (% unique Push programs):	 0.788
Total error diversity:				 0.07
Error (vector) diversity:			 0.076
Behavioral diversity:				 0.076
--- Run Statistics ---
Number of program evaluations used so far: 58000
Number of point (instruction) evaluations so far: 75305513
--- Timings ---
Current time: 1529615629884 milliseconds
Total Time:         179.9 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        64.3 seconds, 35.7%
Fitness Testing:     92.2 seconds, 51.3%
Report:              23.3 seconds, 12.9%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 57
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 58
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 58
;;******************************
;; -*- Number IO problem report - generation 58
Test total error for best: 59460.0
Test mean error for best: 29.73000
;;------------------------------
Outputs of best individual on training cases:
Correct output: 150.3639690164 | Program output: 45.3639690164 
Correct output: -129.2046261   | Program output: -114.2046261  
Correct output: 43.6336388837  | Program output: 37.6336388837 
Correct output: 168.6824809869 | Program output: 44.6824809869 
Correct output: -24.6347316794 | Program output: -27.6347316794
Correct output: 39.9291320135  | Program output: 17.9291320135 
Correct output: -20.9190282536 | Program output: 23.0809717464 
Correct output: 61.9263871894  | Program output: 58.9263871894 
Correct output: -28.8395473609 | Program output: -23.8395473609
Correct output: -39.146556962  | Program output: -0.146556962  
Correct output: -134.9331989268 | Program output: -111.9331989268
Correct output: -126.4496738486 | Program output: -110.4496738486
Correct output: -51.218440095  | Program output: -102.218440095
Correct output: 45.5895106217  | Program output: 26.5895106217 
Correct output: 136.6637618296 | Program output: 47.6637618296 
Correct output: -104.5625509424 | Program output: -97.5625509424
Correct output: 80.9125656746  | Program output: 11.9125656746 
Correct output: -63.4657032446 | Program output: -0.4657032446 
Correct output: -52.106433034  | Program output: -44.106433034 
Correct output: -99.9152304515 | Program output: -104.9152304515
Correct output: -78.2834351958 | Program output: -22.2834351958
Correct output: -64.2911152024 | Program output: -39.2911152024
Correct output: 93.5722006381  | Program output: -14.4277993619
Correct output: 141.452540764  | Program output: 33.452540764  
Correct output: 102.2088941323 | Program output: -14.7911058677
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_fromfloat} {:instruction integer_shove} {:instruction integer_dup_items} {:instruction print_float} {:instruction float_flush} {:instruction print_float} {:instruction float_flush} {:instruction integer_div} {:instruction integer_add} {:instruction print_float} {:instruction float_dec} {:instruction in1} {:instruction float_dec} {:instruction integer_dup_times} {:instruction integer_dup_times} {:instruction integer_dup_items} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_div} {:instruction tagged_526} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_mult} {:instruction float_dec} {:instruction integer_dup_items} {:instruction float_dec} {:instruction float_dec} {:instruction integer_pop} {:instruction integer_dup_times} {:instruction integer_dup_items} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction -82} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_div} {:instruction integer_dup_times} {:instruction integer_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_yankdup} {:instruction print_float} {:instruction integer_div} {:instruction float_dec} {:instruction tag_integer_216} {:instruction print_float} {:instruction float_rot} {:instruction integer_yank} {:instruction -10.83361845854158})
Best program: (integer_fromfloat integer_shove integer_dup_items print_float float_flush print_float float_flush integer_div integer_add print_float float_dec in1 float_dec integer_dup_times integer_dup_times integer_dup_items float_dec float_dec float_dec float_dec float_dec integer_div tagged_526 float_dec float_dec float_dec float_dec float_mult float_dec integer_dup_items float_dec float_dec integer_pop integer_dup_times integer_dup_items float_dec float_dec float_dec float_dec -82 float_dec float_dec float_dec float_dec integer_div integer_dup_times integer_dec float_dec float_dec float_dec float_dec float_dec float_dec integer_yankdup print_float integer_div float_dec tag_integer_216 print_float float_rot integer_yank -10.83361845854158)
Errors: [105.0 2 15.0 2 6.0 2 124.0 3 3.0 1 22.0 2 44.0 11 3.0 2 5.0 1 39.0 2 23.0 2 16.0 2 51.0 3 19.0 2 89.0 3 7.0 3 69.0 2 63.0 2 8.0 2 5.0 3 56.0 2 25.0 2 108.0 11 108.0 3 117.0 13]
Total: 1213.0
Mean: 24.26
Genome size: 62
Size: 63
Percent parens: 0.016
--- Population Statistics ---
Average total errors in population: 3126.0671497999992
Median total errors in population: 1213.0
Error averages by case: (175.9019922 3.563 96.59546539999997 3.083 84.92287720000002 3.208 193.31379479999993 4.194 79.87188230000001 2.52 98.485128 3.235 116.7750398 11.277 83.31854099999998 3.158 81.74576410000002 2.494 112.98156629999997 5.057 103.81771290000002 3.411 97.34870400000001 3.403 124.7583356 3.93 96.103076 3.205 161.2438573 4.156 88.64402 4.131 141.37455930000002 3.255 135.0777716 5.157 86.0785346 3.18 86.61074560000004 4.083 128.6181589 3.35 101.1242392 3.295 175.24379979999998 11.034 178.1990248 3.978 183.5545591 13.001)
Error minima by case: (36.636 1 2.0 1 0.0 0 56.3175 1 0.0 0 1.0 1 1.0175 9 0.0 0 0.0 0 0.8755 1 10.0 1 3.0 1 0.8357 1 2.0 1 18.3362 1 0.0 0 15.5319 1 23.4436 1 0.0 0 0.0 0 20.4331 1 4.2911 1 24.373 1 51.5475 1 35.4178 3)
Average genome size in population (length): 57.195
Average program size in population (points): 58.195
Average percent parens in population: 0.017
Minimum age in population: 81.11339333364712
Maximum age in population: 86.05275812699607
Average age in population: 83.9069948164731
Median age in population: 83.96150290274788
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 18
Genome diversity (% unique Plush genomes):	 0.771
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 18
Syntactic diversity (% unique Push programs):	 0.771
Total error diversity:				 0.083
Error (vector) diversity:			 0.088
Behavioral diversity:				 0.089
--- Run Statistics ---
Number of program evaluations used so far: 59000
Number of point (instruction) evaluations so far: 76735463
--- Timings ---
Current time: 1529615633037 milliseconds
Total Time:         183.1 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        65.4 seconds, 35.7%
Fitness Testing:     93.8 seconds, 51.2%
Report:              23.8 seconds, 13.0%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 58
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 59
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 59
;;******************************
;; -*- Number IO problem report - generation 59
Test total error for best: 59460.0
Test mean error for best: 29.73000
;;------------------------------
Outputs of best individual on training cases:
Correct output: 150.3639690164 | Program output: 45.3639690164 
Correct output: -129.2046261   | Program output: -114.2046261  
Correct output: 43.6336388837  | Program output: 37.6336388837 
Correct output: 168.6824809869 | Program output: 44.6824809869 
Correct output: -24.6347316794 | Program output: -27.6347316794
Correct output: 39.9291320135  | Program output: 17.9291320135 
Correct output: -20.9190282536 | Program output: 23.0809717464 
Correct output: 61.9263871894  | Program output: 58.9263871894 
Correct output: -28.8395473609 | Program output: -23.8395473609
Correct output: -39.146556962  | Program output: -0.146556962  
Correct output: -134.9331989268 | Program output: -111.9331989268
Correct output: -126.4496738486 | Program output: -110.4496738486
Correct output: -51.218440095  | Program output: -102.218440095
Correct output: 45.5895106217  | Program output: 26.5895106217 
Correct output: 136.6637618296 | Program output: 47.6637618296 
Correct output: -104.5625509424 | Program output: -97.5625509424
Correct output: 80.9125656746  | Program output: 11.9125656746 
Correct output: -63.4657032446 | Program output: -0.4657032446 
Correct output: -52.106433034  | Program output: -44.106433034 
Correct output: -99.9152304515 | Program output: -104.9152304515
Correct output: -78.2834351958 | Program output: -22.2834351958
Correct output: -64.2911152024 | Program output: -39.2911152024
Correct output: 93.5722006381  | Program output: -14.4277993619
Correct output: 141.452540764  | Program output: 33.452540764  
Correct output: 102.2088941323 | Program output: -14.7911058677
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_max} {:instruction float_pop} {:instruction float_max} {:instruction integer_add} {:instruction print_float} {:instruction float_dec} {:instruction in1} {:instruction float_dup_items} {:instruction integer_dup_items} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_div} {:instruction float_dec} {:instruction float_dec} {:instruction integer_div} {:instruction integer_rot} {:instruction float_dec} {:instruction float_dec} {:instruction integer_dup_items} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_div} {:instruction float_dec} {:instruction integer_dup_items} {:instruction float_dec} {:instruction float_dec} {:instruction integer_yank} {:instruction integer_dup_times} {:instruction integer_dup_items} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_dup_items} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_div} {:instruction integer_dup_times} {:instruction integer_dup_items} {:instruction float_dec} {:instruction float_dec} {:instruction integer_div} {:instruction integer_dup_times} {:instruction integer_dup_items} {:instruction float_dec} {:instruction float_dec} {:instruction integer_div} {:instruction print_float} {:instruction integer_max} {:instruction integer_dup_items} {:instruction float_sub})
Best program: (integer_max float_pop float_max integer_add print_float float_dec in1 float_dup_items integer_dup_items float_dec float_dec float_dec float_dec integer_div float_dec float_dec integer_div integer_rot float_dec float_dec integer_dup_items float_dec float_dec float_dec float_dec integer_div float_dec integer_dup_items float_dec float_dec integer_yank integer_dup_times integer_dup_items float_dec float_dec float_dec float_dec integer_dup_items float_dec float_dec float_dec float_dec integer_div integer_dup_times integer_dup_items float_dec float_dec integer_div integer_dup_times integer_dup_items float_dec float_dec integer_div print_float integer_max integer_dup_items float_sub)
Errors: [105.0 2 15.0 2 6.0 2 124.0 3 3.0 1 22.0 2 44.0 11 3.0 2 5.0 1 39.0 2 23.0 2 16.0 2 51.0 3 19.0 2 89.0 3 7.0 3 69.0 2 63.0 2 8.0 2 5.0 3 56.0 2 25.0 2 108.0 11 108.0 3 117.0 13]
Total: 1213.0
Mean: 24.26
Genome size: 57
Size: 58
Percent parens: 0.017
--- Population Statistics ---
Average total errors in population: 2991.2340419999996
Median total errors in population: 1213.0
Error averages by case: (171.49446559999998 3.356 88.56824470000001 2.892 79.0533917 2.981 189.09384199999997 3.979 75.4419737 2.236 93.08971569999999 3.022 112.54122349999997 11.29 77.06191799999999 2.92 77.59724990000001 2.283 108.32276139999998 5.038 95.91416079999998 3.189 89.4103911 3.172 119.59316570000001 3.733 90.53460210000001 3.028 156.7174679 3.971 80.8536028 3.952 137.3560612 3.044 130.49055969999998 5.138 80.68267310000002 2.978 78.49301840000003 3.906 124.47922749999998 3.132 96.24325040000002 3.094 172.89928119999996 10.986 174.00773910000004 3.788 181.23505479999997 12.951)
Error minima by case: (45.3973 1 3.0 1 0.0 0 64.3973 2 0.0 0 1.0 1 0.081 8 0.0 0 0.0 0 4.8272 1 11.0 1 4.0 1 7.3212 1 1.0 1 29.3973 1 0.0 0 9.3973 1 16.4914 1 0.0 0 0.0 0 9.4914 1 13.0 1 48.3973 1 48.3973 1 57.3973 1)
Average genome size in population (length): 56.974
Average program size in population (points): 57.974
Average percent parens in population: 0.018
Minimum age in population: 82.22517827952775
Maximum age in population: 87.13866936765032
Average age in population: 85.2983467952151
Median age in population: 85.3449958222269
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 23
Genome diversity (% unique Plush genomes):	 0.738
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 23
Syntactic diversity (% unique Push programs):	 0.738
Total error diversity:				 0.063
Error (vector) diversity:			 0.067
Behavioral diversity:				 0.068
--- Run Statistics ---
Number of program evaluations used so far: 60000
Number of point (instruction) evaluations so far: 78159863
--- Timings ---
Current time: 1529615636105 milliseconds
Total Time:         186.2 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        66.5 seconds, 35.7%
Fitness Testing:     95.4 seconds, 51.2%
Report:              24.2 seconds, 13.0%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 59
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 60
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 60
;;******************************
;; -*- Number IO problem report - generation 60
Test total error for best: 59460.0
Test mean error for best: 29.73000
;;------------------------------
Outputs of best individual on training cases:
Correct output: 150.3639690164 | Program output: 45.3639690164 
Correct output: -129.2046261   | Program output: -114.2046261  
Correct output: 43.6336388837  | Program output: 37.6336388837 
Correct output: 168.6824809869 | Program output: 44.6824809869 
Correct output: -24.6347316794 | Program output: -27.6347316794
Correct output: 39.9291320135  | Program output: 17.9291320135 
Correct output: -20.9190282536 | Program output: 23.0809717464 
Correct output: 61.9263871894  | Program output: 58.9263871894 
Correct output: -28.8395473609 | Program output: -23.8395473609
Correct output: -39.146556962  | Program output: -0.146556962  
Correct output: -134.9331989268 | Program output: -111.9331989268
Correct output: -126.4496738486 | Program output: -110.4496738486
Correct output: -51.218440095  | Program output: -102.218440095
Correct output: 45.5895106217  | Program output: 26.5895106217 
Correct output: 136.6637618296 | Program output: 47.6637618296 
Correct output: -104.5625509424 | Program output: -97.5625509424
Correct output: 80.9125656746  | Program output: 11.9125656746 
Correct output: -63.4657032446 | Program output: -0.4657032446 
Correct output: -52.106433034  | Program output: -44.106433034 
Correct output: -99.9152304515 | Program output: -104.9152304515
Correct output: -78.2834351958 | Program output: -22.2834351958
Correct output: -64.2911152024 | Program output: -39.2911152024
Correct output: 93.5722006381  | Program output: -14.4277993619
Correct output: 141.452540764  | Program output: 33.452540764  
Correct output: 102.2088941323 | Program output: -14.7911058677
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_dup} {:instruction in1} {:instruction float_dec} {:instruction integer_dup_times} {:instruction integer_dup_items} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_div} {:instruction float_sub} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_dup_times} {:instruction integer_yank} {:instruction integer_dup_times} {:instruction integer_dup_items} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_dup_items} {:instruction float_dec} {:instruction float_dec} {:instruction float_shove} {:instruction float_sub} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_div} {:instruction float_dec} {:instruction float_dec} {:instruction integer_dup_items} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_add} {:instruction integer_dup_times} {:instruction float_dup_times} {:instruction integer_mult} {:instruction float_dec} {:instruction float_dec} {:instruction integer_dup_times} {:instruction integer_dup_items} {:instruction float_dec} {:instruction integer_div} {:instruction print_float} {:instruction float_rot})
Best program: (float_dup in1 float_dec integer_dup_times integer_dup_items float_dec float_dec float_dec integer_div float_sub float_dec float_dec float_dec float_dec integer_dup_times integer_yank integer_dup_times integer_dup_items float_dec float_dec float_dec float_dec integer_dup_items float_dec float_dec float_shove float_sub float_dec float_dec float_dec float_dec integer_div float_dec float_dec integer_dup_items float_dec float_dec float_dec float_dec float_add integer_dup_times float_dup_times integer_mult float_dec float_dec integer_dup_times integer_dup_items float_dec integer_div print_float float_rot)
Errors: [105.0 2 15.0 2 6.0 2 124.0 3 3.0 1 22.0 2 44.0 11 3.0 2 5.0 1 39.0 2 23.0 2 16.0 2 51.0 3 19.0 2 89.0 3 7.0 3 69.0 2 63.0 2 8.0 2 5.0 3 56.0 2 25.0 2 108.0 11 108.0 3 117.0 13]
Total: 1213.0
Mean: 24.26
Genome size: 51
Size: 52
Percent parens: 0.019
--- Population Statistics ---
Average total errors in population: 3303.6543417999987
Median total errors in population: 1213.0
Error averages by case: (183.00658880000006 3.64 103.46593549999999 3.155 92.6965304 3.26 200.35112149999995 4.231 86.9530265 2.587 106.10066289999996 3.283 124.62004810000002 11.328 91.18105199999997 3.211 88.89999660000001 2.595 119.54572429999997 5.209 110.71488959999996 3.504 104.25315589999997 3.5 130.94393589999999 3.999 103.7467478 3.296 168.4640124 4.236 95.51523080000003 4.229 148.3364059 3.297 141.49433630000001 5.318 93.67115950000002 3.264 93.24580050000003 4.156 135.3665736 3.411 108.56286220000003 3.397 181.43447119999996 11.002 185.2787467000001 4.046 189.70532690000005 12.946)
Error minima by case: (10.7291 1 4.0 1 0.0 0 29.7291 2 0.0 0 0.0 0 0.5847 7 0.0 0 0.0 0 10.1466 1 12.0 1 5.0 1 22.2184 1 0.0 0 5.2709 1 0.0 0 25.2709 1 27.5343 1 0.0 0 0.0 0 5.7166 1 11.2911 1 13.5722 1 13.7291 1 13.2089 1)
Average genome size in population (length): 56.951
Average program size in population (points): 57.951
Average percent parens in population: 0.018
Minimum age in population: 84.2984326520977
Maximum age in population: 88.59517498174984
Average age in population: 86.652825667688
Median age in population: 86.70728258948724
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 19
Genome diversity (% unique Plush genomes):	 0.771
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 19
Syntactic diversity (% unique Push programs):	 0.771
Total error diversity:				 0.079
Error (vector) diversity:			 0.085
Behavioral diversity:				 0.086
--- Run Statistics ---
Number of program evaluations used so far: 61000
Number of point (instruction) evaluations so far: 79583713
--- Timings ---
Current time: 1529615639334 milliseconds
Total Time:         189.4 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        67.6 seconds, 35.7%
Fitness Testing:     97.0 seconds, 51.2%
Report:              24.6 seconds, 13.0%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 60
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 61
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 61
;;******************************
;; -*- Number IO problem report - generation 61
Test total error for best: 59460.0
Test mean error for best: 29.73000
;;------------------------------
Outputs of best individual on training cases:
Correct output: 150.3639690164 | Program output: 45.3639690164 
Correct output: -129.2046261   | Program output: -114.2046261  
Correct output: 43.6336388837  | Program output: 37.6336388837 
Correct output: 168.6824809869 | Program output: 44.6824809869 
Correct output: -24.6347316794 | Program output: -27.6347316794
Correct output: 39.9291320135  | Program output: 17.9291320135 
Correct output: -20.9190282536 | Program output: 23.0809717464 
Correct output: 61.9263871894  | Program output: 58.9263871894 
Correct output: -28.8395473609 | Program output: -23.8395473609
Correct output: -39.146556962  | Program output: -0.146556962  
Correct output: -134.9331989268 | Program output: -111.9331989268
Correct output: -126.4496738486 | Program output: -110.4496738486
Correct output: -51.218440095  | Program output: -102.218440095
Correct output: 45.5895106217  | Program output: 26.5895106217 
Correct output: 136.6637618296 | Program output: 47.6637618296 
Correct output: -104.5625509424 | Program output: -97.5625509424
Correct output: 80.9125656746  | Program output: 11.9125656746 
Correct output: -63.4657032446 | Program output: -0.4657032446 
Correct output: -52.106433034  | Program output: -44.106433034 
Correct output: -99.9152304515 | Program output: -104.9152304515
Correct output: -78.2834351958 | Program output: -22.2834351958
Correct output: -64.2911152024 | Program output: -39.2911152024
Correct output: 93.5722006381  | Program output: -14.4277993619
Correct output: 141.452540764  | Program output: 33.452540764  
Correct output: 102.2088941323 | Program output: -14.7911058677
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_inc} {:instruction float_yank} {:instruction float_mult} {:instruction float_yank} {:instruction integer_add} {:instruction integer_stackdepth} {:instruction float_flush} {:instruction in1} {:instruction integer_dup_times} {:instruction float_div} {:instruction float_add} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_dup_items} {:instruction float_dec} {:instruction float_dec} {:instruction integer_div} {:instruction integer_rot} {:instruction float_dec} {:instruction float_dec} {:instruction integer_dup_items} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_div} {:instruction float_dec} {:instruction integer_dup_items} {:instruction float_dec} {:instruction float_dec} {:instruction integer_yank} {:instruction integer_dup_times} {:instruction integer_dup_items} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_dup_items} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_div} {:instruction integer_dup_times} {:instruction integer_dup_items} {:instruction float_dec} {:instruction float_dec} {:instruction integer_div} {:instruction float_rot} {:instruction float_dec} {:instruction float_dec} {:instruction integer_div} {:instruction print_float} {:instruction integer_dup} {:instruction integer_dup_items} {:instruction float_cos} {:instruction tagged_423} {:instruction float_max} {:instruction integer_pop})
Best program: (integer_inc float_yank float_mult float_yank integer_add integer_stackdepth float_flush in1 integer_dup_times float_div float_add float_dec float_dec float_dec float_dec integer_dup_items float_dec float_dec integer_div integer_rot float_dec float_dec integer_dup_items float_dec float_dec float_dec float_dec integer_div float_dec integer_dup_items float_dec float_dec integer_yank integer_dup_times integer_dup_items float_dec float_dec float_dec float_dec integer_dup_items float_dec float_dec float_dec float_dec integer_div integer_dup_times integer_dup_items float_dec float_dec integer_div float_rot float_dec float_dec integer_div print_float integer_dup integer_dup_items float_cos tagged_423 float_max integer_pop)
Errors: [105.0 2 15.0 2 6.0 2 124.0 3 3.0 1 22.0 2 44.0 11 3.0 2 5.0 1 39.0 2 23.0 2 16.0 2 51.0 3 19.0 2 89.0 3 7.0 3 69.0 2 63.0 2 8.0 2 5.0 3 56.0 2 25.0 2 108.0 11 108.0 3 117.0 13]
Total: 1213.0
Mean: 24.26
Genome size: 61
Size: 62
Percent parens: 0.016
--- Population Statistics ---
Average total errors in population: 3195.0063209999994
Median total errors in population: 1213.0
Error averages by case: (178.43332930000003 3.485 98.32757409999998 3.002 87.84813910000001 3.069 195.88350769999994 4.061 83.12257019999998 2.428 101.49604719999998 3.131 121.13113789999998 11.354 86.08894589999997 3.035 84.86444569999999 2.432 116.71492109999996 5.293 105.60144360000001 3.344 99.12877479999997 3.342 127.25800449999997 3.836 99.01081780000001 3.132 163.75688900000003 4.081 90.61067770000001 4.058 144.41284149999998 3.196 138.78906670000003 5.397 89.4776224 3.102 88.31514180000003 3.999 131.59448450000002 3.257 104.72130200000002 3.22 178.15283759999994 10.974 180.85374490000007 3.875 186.39305400000003 12.916)
Error minima by case: (49.0441 1 0.0 0 0.0 0 68.0441 2 0.0 0 1.0 1 0.081 9 0.0 0 0.0 0 15.1887 1 6.0 1 1.0 1 4.9559 1 0.0 0 33.0441 1 0.0 0 13.0441 1 39.4661 1 0.0 0 0.0 0 39.0 1 8.0 1 45.0896 2 52.0441 1 59.823 1)
Average genome size in population (length): 56.705
Average program size in population (points): 57.705
Average percent parens in population: 0.018
Minimum age in population: 85.44487736109048
Maximum age in population: 90.11234142029738
Average age in population: 88.08947759244218
Median age in population: 88.10397257898768
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 18
Genome diversity (% unique Plush genomes):	 0.791
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 18
Syntactic diversity (% unique Push programs):	 0.791
Total error diversity:				 0.077
Error (vector) diversity:			 0.083
Behavioral diversity:				 0.084
--- Run Statistics ---
Number of program evaluations used so far: 62000
Number of point (instruction) evaluations so far: 81001388
--- Timings ---
Current time: 1529615642400 milliseconds
Total Time:         192.4 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        68.7 seconds, 35.7%
Fitness Testing:     98.6 seconds, 51.2%
Report:              25.0 seconds, 13.0%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 61
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 62
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 62
;;******************************
;; -*- Number IO problem report - generation 62
Test total error for best: 59460.0
Test mean error for best: 29.73000
;;------------------------------
Outputs of best individual on training cases:
Correct output: 150.3639690164 | Program output: 45.3639690164 
Correct output: -129.2046261   | Program output: -114.2046261  
Correct output: 43.6336388837  | Program output: 37.6336388837 
Correct output: 168.6824809869 | Program output: 44.6824809869 
Correct output: -24.6347316794 | Program output: -27.6347316794
Correct output: 39.9291320135  | Program output: 17.9291320135 
Correct output: -20.9190282536 | Program output: 23.0809717464 
Correct output: 61.9263871894  | Program output: 58.9263871894 
Correct output: -28.8395473609 | Program output: -23.8395473609
Correct output: -39.146556962  | Program output: -0.146556962  
Correct output: -134.9331989268 | Program output: -111.9331989268
Correct output: -126.4496738486 | Program output: -110.4496738486
Correct output: -51.218440095  | Program output: -102.218440095
Correct output: 45.5895106217  | Program output: 26.5895106217 
Correct output: 136.6637618296 | Program output: 47.6637618296 
Correct output: -104.5625509424 | Program output: -97.5625509424
Correct output: 80.9125656746  | Program output: 11.9125656746 
Correct output: -63.4657032446 | Program output: -0.4657032446 
Correct output: -52.106433034  | Program output: -44.106433034 
Correct output: -99.9152304515 | Program output: -104.9152304515
Correct output: -78.2834351958 | Program output: -22.2834351958
Correct output: -64.2911152024 | Program output: -39.2911152024
Correct output: 93.5722006381  | Program output: -14.4277993619
Correct output: 141.452540764  | Program output: 33.452540764  
Correct output: 102.2088941323 | Program output: -14.7911058677
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_shove} {:instruction print_integer} {:instruction in1} {:instruction integer_yank} {:instruction integer_dup_times} {:instruction integer_dup_items} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_div} {:instruction float_sub} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_div} {:instruction integer_yank} {:instruction integer_dup_times} {:instruction integer_dup_items} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_dup_items} {:instruction float_dec} {:instruction float_dec} {:instruction integer_dup_items} {:instruction float_sub} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_div} {:instruction float_dec} {:instruction float_dec} {:instruction integer_dup_items} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_div} {:instruction integer_dup_times} {:instruction integer_dup} {:instruction float_dec} {:instruction float_dec} {:instruction integer_div} {:instruction integer_dup_times} {:instruction integer_dup_items} {:instruction float_yankdup} {:instruction float_dec} {:instruction float_max} {:instruction print_float} {:instruction float_rot} {:instruction in1} {:instruction tag_integer_496} {:instruction tagged_490} {:instruction integer_min} {:instruction integer_fromfloat})
Best program: (integer_shove print_integer in1 integer_yank integer_dup_times integer_dup_items float_dec float_dec float_dec float_dec integer_div float_sub float_dec float_dec float_dec float_dec integer_div integer_yank integer_dup_times integer_dup_items float_dec float_dec float_dec float_dec integer_dup_items float_dec float_dec integer_dup_items float_sub float_dec float_dec float_dec float_dec integer_div float_dec float_dec integer_dup_items float_dec float_dec float_dec float_dec integer_div integer_dup_times integer_dup float_dec float_dec integer_div integer_dup_times integer_dup_items float_yankdup float_dec float_max print_float float_rot in1 tag_integer_496 tagged_490 integer_min integer_fromfloat)
Errors: [105.0 2 15.0 2 6.0 2 124.0 3 3.0 1 22.0 2 44.0 11 3.0 2 5.0 1 39.0 2 23.0 2 16.0 2 51.0 3 19.0 2 89.0 3 7.0 3 69.0 2 63.0 2 8.0 2 5.0 3 56.0 2 25.0 2 108.0 11 108.0 3 117.0 13]
Total: 1213.0
Mean: 24.26
Genome size: 59
Size: 60
Percent parens: 0.017
--- Population Statistics ---
Average total errors in population: 3034.937409099999
Median total errors in population: 1213.0
Error averages by case: (172.36021159999999 3.58 92.3392867 3.075 81.1155386 3.188 189.80187909999992 4.142 76.83115709999998 2.476 94.5507372 3.201 113.01949159999997 11.282 79.70568819999998 3.142 78.97024459999997 2.459 109.22990909999996 5.315 99.61921079999998 3.411 93.07102840000003 3.41 119.80079650000003 3.896 92.25068110000002 3.232 157.6471594 4.161 84.17747539999995 4.122 136.7794574 3.238 131.49984119999996 5.415 82.4909876 3.149 81.9966709 4.082 126.06087210000001 3.297 97.9749513 3.285 173.85318429999998 11.006 174.58359770000004 3.972 180.7413512 12.93)
Error minima by case: (12.4593 1 0.4577 1 0.0 0 6.5407 2 0.0 0 0.0 0 0.1904 8 0.0 0 0.0 0 0.8562 1 7.5423 1 0.5423 1 17.1522 1 2.0 1 2.7639 1 0.0 0 3.7796 1 24.0998 1 0.0 0 0.0 0 40.5423 1 9.5423 1 9.4593 2 9.4593 1 0.4593 2)
Average genome size in population (length): 56.441
Average program size in population (points): 57.441
Average percent parens in population: 0.018
Minimum age in population: 86.44487736109048
Maximum age in population: 91.48433894461425
Average age in population: 89.47166630705028
Median age in population: 89.50703704302109
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 16
Genome diversity (% unique Plush genomes):	 0.798
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 16
Syntactic diversity (% unique Push programs):	 0.798
Total error diversity:				 0.083
Error (vector) diversity:			 0.089
Behavioral diversity:				 0.09
--- Run Statistics ---
Number of program evaluations used so far: 63000
Number of point (instruction) evaluations so far: 82412438
--- Timings ---
Current time: 1529615645494 milliseconds
Total Time:         195.5 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        69.7 seconds, 35.7%
Fitness Testing:    100.2 seconds, 51.2%
Report:              25.5 seconds, 13.0%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 62
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 63
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 63
;;******************************
;; -*- Number IO problem report - generation 63
Test total error for best: 59460.0
Test mean error for best: 29.73000
;;------------------------------
Outputs of best individual on training cases:
Correct output: 150.3639690164 | Program output: 45.3639690164 
Correct output: -129.2046261   | Program output: -114.2046261  
Correct output: 43.6336388837  | Program output: 37.6336388837 
Correct output: 168.6824809869 | Program output: 44.6824809869 
Correct output: -24.6347316794 | Program output: -27.6347316794
Correct output: 39.9291320135  | Program output: 17.9291320135 
Correct output: -20.9190282536 | Program output: 23.0809717464 
Correct output: 61.9263871894  | Program output: 58.9263871894 
Correct output: -28.8395473609 | Program output: -23.8395473609
Correct output: -39.146556962  | Program output: -0.146556962  
Correct output: -134.9331989268 | Program output: -111.9331989268
Correct output: -126.4496738486 | Program output: -110.4496738486
Correct output: -51.218440095  | Program output: -102.218440095
Correct output: 45.5895106217  | Program output: 26.5895106217 
Correct output: 136.6637618296 | Program output: 47.6637618296 
Correct output: -104.5625509424 | Program output: -97.5625509424
Correct output: 80.9125656746  | Program output: 11.9125656746 
Correct output: -63.4657032446 | Program output: -0.4657032446 
Correct output: -52.106433034  | Program output: -44.106433034 
Correct output: -99.9152304515 | Program output: -104.9152304515
Correct output: -78.2834351958 | Program output: -22.2834351958
Correct output: -64.2911152024 | Program output: -39.2911152024
Correct output: 93.5722006381  | Program output: -14.4277993619
Correct output: 141.452540764  | Program output: 33.452540764  
Correct output: 102.2088941323 | Program output: -14.7911058677
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_flush} {:instruction in1} {:instruction integer_yank} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_div} {:instruction integer_dup_items} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_div} {:instruction float_dec} {:instruction integer_dup_items} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_dup_items} {:instruction float_dec} {:instruction float_dec} {:instruction integer_div} {:instruction integer_pop} {:instruction float_dec} {:instruction integer_dup_items} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_max} {:instruction integer_dup_times} {:instruction integer_dup_items} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction print_float} {:instruction float_dec} {:instruction float_dec} {:instruction integer_min} {:instruction float_div} {:instruction float_dec} {:instruction tag_integer_171} {:instruction float_dec} {:instruction integer_div} {:instruction integer_dup_times} {:instruction integer_dup_items} {:instruction float_dec} {:instruction float_dec} {:instruction integer_div} {:instruction float_dec} {:instruction integer_min} {:instruction integer_pop})
Best program: (float_flush in1 integer_yank float_dec float_dec float_dec float_dec float_dec integer_div integer_dup_items float_dec float_dec float_dec float_dec float_dec integer_div float_dec integer_dup_items float_dec float_dec float_dec integer_dup_items float_dec float_dec integer_div integer_pop float_dec integer_dup_items float_dec float_dec float_dec float_dec float_max integer_dup_times integer_dup_items float_dec float_dec float_dec float_dec float_dec float_dec print_float float_dec float_dec integer_min float_div float_dec tag_integer_171 float_dec integer_div integer_dup_times integer_dup_items float_dec float_dec integer_div float_dec integer_min integer_pop)
Errors: [105.0 2 15.0 2 6.0 2 124.0 3 3.0 1 22.0 2 44.0 11 3.0 2 5.0 1 39.0 2 23.0 2 16.0 2 51.0 3 19.0 2 89.0 3 7.0 3 69.0 2 63.0 2 8.0 2 5.0 3 56.0 2 25.0 2 108.0 11 108.0 3 117.0 13]
Total: 1213.0
Mean: 24.26
Genome size: 58
Size: 59
Percent parens: 0.017
--- Population Statistics ---
Average total errors in population: 3070.3945946999984
Median total errors in population: 1213.0
Error averages by case: (174.02477839999997 3.527 94.03717729999997 3.016 82.90529680000002 3.163 191.55440359999992 4.119 77.85543470000002 2.465 96.49374089999999 3.177 114.796594 11.335 81.35414949999996 3.104 79.65001720000002 2.477 109.55042349999994 5.124 101.32184779999999 3.36 94.81840939999996 3.353 122.30756939999999 3.862 94.11395410000003 3.194 159.35964089999996 4.121 86.1086914 4.072 139.10121139999998 3.211 131.75025680000002 5.23 84.30560570000003 3.104 84.01774170000004 4.028 126.4742112 3.298 99.32267830000002 3.253 173.58841549999994 10.964 176.3146856000001 3.91 181.88865959999998 12.912)
Error minima by case: (4.0 1 4.0 1 0.0 0 23.0 1 0.0 0 1.0 1 1.1808 9 0.0 0 0.0 0 2.1466 1 12.0 1 5.0 1 8.1114 1 2.0 1 12.0 1 0.0 0 3.6053 1 20.3587 1 0.0 0 0.0 0 11.7166 1 5.2911 1 19.5722 1 7.0 1 19.2089 1)
Average genome size in population (length): 56.424
Average program size in population (points): 57.424
Average percent parens in population: 0.018
Minimum age in population: 88.26939708537351
Maximum age in population: 92.96083304982525
Average age in population: 90.88821413954699
Median age in population: 90.94011587591373
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 18
Genome diversity (% unique Plush genomes):	 0.792
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 18
Syntactic diversity (% unique Push programs):	 0.792
Total error diversity:				 0.079
Error (vector) diversity:			 0.086
Behavioral diversity:				 0.086
--- Run Statistics ---
Number of program evaluations used so far: 64000
Number of point (instruction) evaluations so far: 83823113
--- Timings ---
Current time: 1529615648643 milliseconds
Total Time:         198.7 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        70.8 seconds, 35.6%
Fitness Testing:    101.8 seconds, 51.3%
Report:              25.9 seconds, 13.0%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 63
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 64
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 64
;;******************************
;; -*- Number IO problem report - generation 64
Test total error for best: 59460.0
Test mean error for best: 29.73000
;;------------------------------
Outputs of best individual on training cases:
Correct output: 150.3639690164 | Program output: 45.3639690164 
Correct output: -129.2046261   | Program output: -114.2046261  
Correct output: 43.6336388837  | Program output: 37.6336388837 
Correct output: 168.6824809869 | Program output: 44.6824809869 
Correct output: -24.6347316794 | Program output: -27.6347316794
Correct output: 39.9291320135  | Program output: 17.9291320135 
Correct output: -20.9190282536 | Program output: 23.0809717464 
Correct output: 61.9263871894  | Program output: 58.9263871894 
Correct output: -28.8395473609 | Program output: -23.8395473609
Correct output: -39.146556962  | Program output: -0.146556962  
Correct output: -134.9331989268 | Program output: -111.9331989268
Correct output: -126.4496738486 | Program output: -110.4496738486
Correct output: -51.218440095  | Program output: -102.218440095
Correct output: 45.5895106217  | Program output: 26.5895106217 
Correct output: 136.6637618296 | Program output: 47.6637618296 
Correct output: -104.5625509424 | Program output: -97.5625509424
Correct output: 80.9125656746  | Program output: 11.9125656746 
Correct output: -63.4657032446 | Program output: -0.4657032446 
Correct output: -52.106433034  | Program output: -44.106433034 
Correct output: -99.9152304515 | Program output: -104.9152304515
Correct output: -78.2834351958 | Program output: -22.2834351958
Correct output: -64.2911152024 | Program output: -39.2911152024
Correct output: 93.5722006381  | Program output: -14.4277993619
Correct output: 141.452540764  | Program output: 33.452540764  
Correct output: 102.2088941323 | Program output: -14.7911058677
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_shove} {:instruction print_integer} {:instruction in1} {:instruction integer_yank} {:instruction integer_dup_times} {:instruction integer_dup_items} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_div} {:instruction float_sub} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_div} {:instruction integer_yank} {:instruction integer_dup_times} {:instruction integer_rot} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_pop} {:instruction float_dec} {:instruction float_dec} {:instruction float_shove} {:instruction float_div} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_div} {:instruction float_dec} {:instruction float_dec} {:instruction integer_dup_items} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_div} {:instruction integer_dup_times} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_div} {:instruction integer_dup_times} {:instruction integer_dup_items} {:instruction float_yankdup} {:instruction float_dec} {:instruction integer_div} {:instruction print_float} {:instruction float_max} {:instruction in1} {:instruction tag_integer_496} {:instruction tagged_409} {:instruction integer_min} {:instruction integer_pop})
Best program: (integer_shove print_integer in1 integer_yank integer_dup_times integer_dup_items float_dec float_dec float_dec float_dec integer_div float_sub float_dec float_dec float_dec float_dec integer_div integer_yank integer_dup_times integer_rot float_dec float_dec float_dec float_dec integer_pop float_dec float_dec float_shove float_div float_dec float_dec float_dec float_dec integer_div float_dec float_dec integer_dup_items float_dec float_dec float_dec integer_div integer_dup_times float_dec float_dec float_dec integer_div integer_dup_times integer_dup_items float_yankdup float_dec integer_div print_float float_max in1 tag_integer_496 tagged_409 integer_min integer_pop)
Errors: [105.0 2 15.0 2 6.0 2 124.0 3 3.0 1 22.0 2 44.0 11 3.0 2 5.0 1 39.0 2 23.0 2 16.0 2 51.0 3 19.0 2 89.0 3 7.0 3 69.0 2 63.0 2 8.0 2 5.0 3 56.0 2 25.0 2 108.0 11 108.0 3 117.0 13]
Total: 1213.0
Mean: 24.26
Genome size: 58
Size: 59
Percent parens: 0.017
--- Population Statistics ---
Average total errors in population: 2995.3002813999997
Median total errors in population: 1213.0
Error averages by case: (171.1607775 3.393 89.8926383 2.923 80.0087813 2.966 188.6805569 3.945 74.87258680000001 2.276 93.83574669999999 3.026 113.5895603 11.315 78.1436957 2.921 76.7272518 2.322 108.96171689999998 5.267 97.2312936 3.191 90.73589619999998 3.194 119.6177597 3.729 91.3212236 3.009 156.3873834 3.94 82.19608540000002 3.913 136.51600399999995 3.036 130.23538610000003 5.35 80.9962945 2.978 79.94783350000002 3.889 123.826772 3.141 96.14145210000001 3.093 170.8852831 10.933 173.67908450000002 3.794 179.24921749999993 12.916)
Error minima by case: (32.636 1 0.0 0 0.0 0 52.3175 1 0.0 0 1.0 1 0.429 9 0.0 0 0.0 0 6.5257 1 1.0 1 1.0 1 4.9647 1 0.0 0 14.3362 1 0.0 0 4.1739 1 7.2825 1 0.0 0 0.0 0 7.4975 1 3.0 1 43.1739 1 43.1739 1 52.1739 1)
Average genome size in population (length): 55.62
Average program size in population (points): 56.62
Average percent parens in population: 0.018
Minimum age in population: 89.26939708537351
Maximum age in population: 94.76992747692489
Average age in population: 92.28303816329984
Median age in population: 92.3339996738711
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 23
Genome diversity (% unique Plush genomes):	 0.776
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 23
Syntactic diversity (% unique Push programs):	 0.776
Total error diversity:				 0.071
Error (vector) diversity:			 0.075
Behavioral diversity:				 0.076
--- Run Statistics ---
Number of program evaluations used so far: 65000
Number of point (instruction) evaluations so far: 85213688
--- Timings ---
Current time: 1529615651707 milliseconds
Total Time:         201.7 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        71.9 seconds, 35.6%
Fitness Testing:    103.4 seconds, 51.3%
Report:              26.3 seconds, 13.1%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 64
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 65
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 65
;;******************************
;; -*- Number IO problem report - generation 65
Test total error for best: 59460.0
Test mean error for best: 29.73000
;;------------------------------
Outputs of best individual on training cases:
Correct output: 150.3639690164 | Program output: 45.3639690164 
Correct output: -129.2046261   | Program output: -114.2046261  
Correct output: 43.6336388837  | Program output: 37.6336388837 
Correct output: 168.6824809869 | Program output: 44.6824809869 
Correct output: -24.6347316794 | Program output: -27.6347316794
Correct output: 39.9291320135  | Program output: 17.9291320135 
Correct output: -20.9190282536 | Program output: 23.0809717464 
Correct output: 61.9263871894  | Program output: 58.9263871894 
Correct output: -28.8395473609 | Program output: -23.8395473609
Correct output: -39.146556962  | Program output: -0.146556962  
Correct output: -134.9331989268 | Program output: -111.9331989268
Correct output: -126.4496738486 | Program output: -110.4496738486
Correct output: -51.218440095  | Program output: -102.218440095
Correct output: 45.5895106217  | Program output: 26.5895106217 
Correct output: 136.6637618296 | Program output: 47.6637618296 
Correct output: -104.5625509424 | Program output: -97.5625509424
Correct output: 80.9125656746  | Program output: 11.9125656746 
Correct output: -63.4657032446 | Program output: -0.4657032446 
Correct output: -52.106433034  | Program output: -44.106433034 
Correct output: -99.9152304515 | Program output: -104.9152304515
Correct output: -78.2834351958 | Program output: -22.2834351958
Correct output: -64.2911152024 | Program output: -39.2911152024
Correct output: 93.5722006381  | Program output: -14.4277993619
Correct output: 141.452540764  | Program output: 33.452540764  
Correct output: 102.2088941323 | Program output: -14.7911058677
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_inc} {:instruction float_flush} {:instruction in1} {:instruction integer_rot} {:instruction integer_dup_items} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_div} {:instruction float_sub} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_div} {:instruction float_dec} {:instruction integer_dup_items} {:instruction float_dec} {:instruction float_dec} {:instruction integer_yank} {:instruction integer_dup_times} {:instruction integer_dup_items} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_yankdup} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_div} {:instruction integer_yank} {:instruction integer_dup_times} {:instruction integer_max} {:instruction float_dec} {:instruction float_dec} {:instruction integer_mod} {:instruction float_dec} {:instruction integer_div} {:instruction print_float} {:instruction integer_max} {:instruction integer_dup_items} {:instruction float_sub})
Best program: (float_inc float_flush in1 integer_rot integer_dup_items float_dec float_dec float_dec float_dec float_dec float_dec integer_div float_sub float_dec float_dec float_dec float_dec integer_div float_dec integer_dup_items float_dec float_dec integer_yank integer_dup_times integer_dup_items float_dec float_dec float_dec float_dec float_yankdup float_dec float_dec float_dec float_dec float_dec float_dec float_dec integer_div integer_yank integer_dup_times integer_max float_dec float_dec integer_mod float_dec integer_div print_float integer_max integer_dup_items float_sub)
Errors: [105.0 2 15.0 2 6.0 2 124.0 3 3.0 1 22.0 2 44.0 11 3.0 2 5.0 1 39.0 2 23.0 2 16.0 2 51.0 3 19.0 2 89.0 3 7.0 3 69.0 2 63.0 2 8.0 2 5.0 3 56.0 2 25.0 2 108.0 11 108.0 3 117.0 13]
Total: 1213.0
Mean: 24.26
Genome size: 50
Size: 51
Percent parens: 0.020
--- Population Statistics ---
Average total errors in population: 3230.042122399999
Median total errors in population: 1213.0
Error averages by case: (180.87028730000003 3.55 100.3780614 3.044 90.31744420000001 3.14 198.28752169999999 4.133 82.81146890000001 2.465 103.98951699999998 3.177 122.62254240000001 11.33 88.55606049999997 3.07 84.64831140000003 2.465 116.35282349999999 5.284 107.6141273 3.37 101.1445202 3.386 129.05402099999998 3.902 101.5369646 3.177 166.28520680000003 4.108 92.57651670000004 4.076 146.45980739999996 3.216 138.37974709999995 5.388 90.20124190000001 3.146 90.41953590000001 4.042 131.1765097 3.294 104.82908770000003 3.27 178.06311619999994 10.976 183.2548524 3.934 186.36282920000002 12.907)
Error minima by case: (49.3379 1 1.0 1 0.0 0 68.3379 2 0.0 0 0.0 0 0.081 8 0.0 0 0.0 0 2.2114 1 9.0 1 2.0 1 4.6621 2 1.0 1 33.3379 1 0.0 0 13.3379 1 20.4657 1 0.0 0 0.0 0 27.9361 1 11.0 1 52.3379 2 52.3379 1 61.3379 1)
Average genome size in population (length): 55.394
Average program size in population (points): 56.394
Average percent parens in population: 0.018
Minimum age in population: 90.367713917851
Maximum age in population: 95.96108791279796
Average age in population: 93.74472146460022
Median age in population: 93.78309842557545
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 26
Genome diversity (% unique Plush genomes):	 0.789
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 26
Syntactic diversity (% unique Push programs):	 0.789
Total error diversity:				 0.078
Error (vector) diversity:			 0.085
Behavioral diversity:				 0.085
--- Run Statistics ---
Number of program evaluations used so far: 66000
Number of point (instruction) evaluations so far: 86598588
--- Timings ---
Current time: 1529615654738 milliseconds
Total Time:         204.8 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        72.9 seconds, 35.6%
Fitness Testing:    105.0 seconds, 51.3%
Report:              26.8 seconds, 13.1%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 65
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 66
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 66
;;******************************
;; -*- Number IO problem report - generation 66
Test total error for best: 59460.0
Test mean error for best: 29.73000
;;------------------------------
Outputs of best individual on training cases:
Correct output: 150.3639690164 | Program output: 45.3639690164 
Correct output: -129.2046261   | Program output: -114.2046261  
Correct output: 43.6336388837  | Program output: 37.6336388837 
Correct output: 168.6824809869 | Program output: 44.6824809869 
Correct output: -24.6347316794 | Program output: -27.6347316794
Correct output: 39.9291320135  | Program output: 17.9291320135 
Correct output: -20.9190282536 | Program output: 23.0809717464 
Correct output: 61.9263871894  | Program output: 58.9263871894 
Correct output: -28.8395473609 | Program output: -23.8395473609
Correct output: -39.146556962  | Program output: -0.146556962  
Correct output: -134.9331989268 | Program output: -111.9331989268
Correct output: -126.4496738486 | Program output: -110.4496738486
Correct output: -51.218440095  | Program output: -102.218440095
Correct output: 45.5895106217  | Program output: 26.5895106217 
Correct output: 136.6637618296 | Program output: 47.6637618296 
Correct output: -104.5625509424 | Program output: -97.5625509424
Correct output: 80.9125656746  | Program output: 11.9125656746 
Correct output: -63.4657032446 | Program output: -0.4657032446 
Correct output: -52.106433034  | Program output: -44.106433034 
Correct output: -99.9152304515 | Program output: -104.9152304515
Correct output: -78.2834351958 | Program output: -22.2834351958
Correct output: -64.2911152024 | Program output: -39.2911152024
Correct output: 93.5722006381  | Program output: -14.4277993619
Correct output: 141.452540764  | Program output: 33.452540764  
Correct output: 102.2088941323 | Program output: -14.7911058677
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction in1} {:instruction integer_yank} {:instruction integer_dup_times} {:instruction float_yank} {:instruction float_dec} {:instruction float_dec} {:instruction float_dup_items} {:instruction float_dec} {:instruction integer_dup_items} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_sub} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_div} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_div} {:instruction integer_div} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_dup_items} {:instruction float_dec} {:instruction float_dec} {:instruction float_shove} {:instruction float_sub} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_div} {:instruction float_dec} {:instruction integer_dup_times} {:instruction integer_dup_items} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_inc} {:instruction print_float} {:instruction float_dec} {:instruction float_dec} {:instruction integer_dup_items} {:instruction float_div} {:instruction float_dec} {:instruction tag_integer_171} {:instruction float_dec} {:instruction integer_div} {:instruction integer_dup_times})
Best program: (in1 integer_yank integer_dup_times float_yank float_dec float_dec float_dup_items float_dec integer_dup_items float_dec float_dec float_dec float_sub float_dec float_dec float_dec float_dec integer_div float_dec float_dec float_dec integer_div integer_div float_dec float_dec float_dec integer_dup_items float_dec float_dec float_shove float_sub float_dec float_dec float_dec float_dec integer_div float_dec integer_dup_times integer_dup_items float_dec float_dec float_dec float_dec integer_inc print_float float_dec float_dec integer_dup_items float_div float_dec tag_integer_171 float_dec integer_div integer_dup_times)
Errors: [105.0 2 15.0 2 6.0 2 124.0 3 3.0 1 22.0 2 44.0 11 3.0 2 5.0 1 39.0 2 23.0 2 16.0 2 51.0 3 19.0 2 89.0 3 7.0 3 69.0 2 63.0 2 8.0 2 5.0 3 56.0 2 25.0 2 108.0 11 108.0 3 117.0 13]
Total: 1213.0
Mean: 24.26
Genome size: 54
Size: 55
Percent parens: 0.018
--- Population Statistics ---
Average total errors in population: 3063.6762656999995
Median total errors in population: 1213.0
Error averages by case: (173.68563930000002 3.447 92.3962191 2.971 82.20035010000001 3.045 191.149139 4.039 78.56800330000002 2.373 96.04128190000002 3.088 115.1232776 11.278 80.43892749999998 3.01 80.57494490000002 2.371 111.09035069999995 5.159 99.7125406 3.272 93.24579569999999 3.274 121.50326769999997 3.807 93.56407909999999 3.109 158.9010825 4.049 84.57592650000002 4.04 139.30775759999997 3.12 133.2896294 5.267 83.85187029999999 3.045 82.29962480000002 3.974 127.43742190000002 3.207 99.35005430000002 3.184 174.5484297 10.951 176.10643829999998 3.856 182.8572139 12.921)
Error minima by case: (81.0 1 2.0 1 0.0 0 100.0 1 0.0 0 0.591 1 2.0988 8 0.0 0 0.0 0 10.3133 1 10.0 1 3.0 1 22.3852 1 1.0 1 65.0 1 0.0 0 45.0 1 34.2435 1 0.0 0 0.0 0 19.4258 1 12.0 1 65.8283 1 84.0 1 74.465 2)
Average genome size in population (length): 54.428
Average program size in population (points): 55.428
Average percent parens in population: 0.018
Minimum age in population: 92.16910460187
Maximum age in population: 97.16189857038816
Average age in population: 95.12122015844535
Median age in population: 95.1589749671401
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 30
Genome diversity (% unique Plush genomes):	 0.773
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 30
Syntactic diversity (% unique Push programs):	 0.773
Total error diversity:				 0.065
Error (vector) diversity:			 0.069
Behavioral diversity:				 0.07
--- Run Statistics ---
Number of program evaluations used so far: 67000
Number of point (instruction) evaluations so far: 87959313
--- Timings ---
Current time: 1529615657802 milliseconds
Total Time:         207.9 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        74.0 seconds, 35.6%
Fitness Testing:    106.5 seconds, 51.2%
Report:              27.2 seconds, 13.1%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 66
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 67
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 67
;;******************************
;; -*- Number IO problem report - generation 67
Test total error for best: 59460.0
Test mean error for best: 29.73000
;;------------------------------
Outputs of best individual on training cases:
Correct output: 150.3639690164 | Program output: 45.3639690164 
Correct output: -129.2046261   | Program output: -114.2046261  
Correct output: 43.6336388837  | Program output: 37.6336388837 
Correct output: 168.6824809869 | Program output: 44.6824809869 
Correct output: -24.6347316794 | Program output: -27.6347316794
Correct output: 39.9291320135  | Program output: 17.9291320135 
Correct output: -20.9190282536 | Program output: 23.0809717464 
Correct output: 61.9263871894  | Program output: 58.9263871894 
Correct output: -28.8395473609 | Program output: -23.8395473609
Correct output: -39.146556962  | Program output: -0.146556962  
Correct output: -134.9331989268 | Program output: -111.9331989268
Correct output: -126.4496738486 | Program output: -110.4496738486
Correct output: -51.218440095  | Program output: -102.218440095
Correct output: 45.5895106217  | Program output: 26.5895106217 
Correct output: 136.6637618296 | Program output: 47.6637618296 
Correct output: -104.5625509424 | Program output: -97.5625509424
Correct output: 80.9125656746  | Program output: 11.9125656746 
Correct output: -63.4657032446 | Program output: -0.4657032446 
Correct output: -52.106433034  | Program output: -44.106433034 
Correct output: -99.9152304515 | Program output: -104.9152304515
Correct output: -78.2834351958 | Program output: -22.2834351958
Correct output: -64.2911152024 | Program output: -39.2911152024
Correct output: 93.5722006381  | Program output: -14.4277993619
Correct output: 141.452540764  | Program output: 33.452540764  
Correct output: 102.2088941323 | Program output: -14.7911058677
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_max} {:instruction float_pop} {:instruction integer_div} {:instruction integer_div} {:instruction integer_add} {:instruction print_float} {:instruction float_dec} {:instruction print_float} {:instruction float_div} {:instruction in1} {:instruction integer_yank} {:instruction integer_dup_items} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_div} {:instruction float_dec} {:instruction float_dec} {:instruction integer_dup_times} {:instruction float_dec} {:instruction integer_yankdup} {:instruction float_sub} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_yank} {:instruction integer_dup_times} {:instruction integer_dup_items} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_dup_items} {:instruction float_dec} {:instruction float_dec} {:instruction integer_div} {:instruction integer_dup_items} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_div} {:instruction float_sub} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_div} {:instruction integer_div} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_div} {:instruction print_float} {:instruction float_dec} {:instruction integer_div} {:instruction print_float} {:instruction float_rot} {:instruction float_max} {:instruction integer_div} {:instruction print_float} {:instruction integer_dup_times} {:instruction integer_stackdepth} {:instruction float_cos} {:instruction tagged_490})
Best program: (integer_max float_pop integer_div integer_div integer_add print_float float_dec print_float float_div in1 integer_yank integer_dup_items float_dec float_dec float_dec float_dec integer_div float_dec float_dec integer_dup_times float_dec integer_yankdup float_sub float_dec float_dec float_dec integer_yank integer_dup_times integer_dup_items float_dec float_dec float_dec float_dec integer_dup_items float_dec float_dec integer_div integer_dup_items float_dec float_dec float_dec float_dec integer_div float_sub float_dec float_dec float_dec float_dec integer_div integer_div float_dec float_dec float_dec integer_div print_float float_dec integer_div print_float float_rot float_max integer_div print_float integer_dup_times integer_stackdepth float_cos tagged_490)
Errors: [105.0 2 15.0 2 6.0 2 124.0 3 3.0 1 22.0 2 44.0 11 3.0 2 5.0 1 39.0 2 23.0 2 16.0 2 51.0 3 19.0 2 89.0 3 7.0 3 69.0 2 63.0 2 8.0 2 5.0 3 56.0 2 25.0 2 108.0 11 108.0 3 117.0 13]
Total: 1213.0
Mean: 24.26
Genome size: 66
Size: 67
Percent parens: 0.015
--- Population Statistics ---
Average total errors in population: 3155.924396899999
Median total errors in population: 1213.0
Error averages by case: (177.80066150000005 3.55 97.79441499999997 3.047 86.7425782 3.138 195.28512649999993 4.087 79.7002864 2.438 100.29718280000002 3.164 118.71945579999999 11.348 85.07517459999997 3.076 81.62407400000002 2.429 115.56615509999996 5.377 105.0714414 3.379 98.58844049999996 3.348 126.10251909999998 3.871 97.88421470000002 3.188 163.11967819999995 4.12 89.95054449999999 4.073 142.99131160000002 3.203 135.73203750000005 5.476 87.02715779999998 3.099 87.66840780000004 4.069 128.5573884 3.249 101.7756146 3.25 175.31781989999996 10.989 180.10280460000004 3.905 183.6429064 12.914)
Error minima by case: (81.0 1 1.0 1 0.0 0 100.0 1 0.0 0 0.0 0 0.081 8 0.0 0 0.0 0 0.4743 1 6.0 1 1.0 1 18.4002 1 0.0 0 65.0 2 0.0 0 45.0 1 31.3414 1 0.0 0 0.0 0 16.5237 1 8.0 1 0.2286 1 84.0 1 16.7785 2)
Average genome size in population (length): 55.112
Average program size in population (points): 56.112
Average percent parens in population: 0.018
Minimum age in population: 93.35043119487234
Maximum age in population: 98.49847254711113
Average age in population: 96.5367154045417
Median age in population: 96.58840835022288
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 27
Genome diversity (% unique Plush genomes):	 0.795
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 27
Syntactic diversity (% unique Push programs):	 0.795
Total error diversity:				 0.085
Error (vector) diversity:			 0.094
Behavioral diversity:				 0.095
--- Run Statistics ---
Number of program evaluations used so far: 68000
Number of point (instruction) evaluations so far: 89337113
--- Timings ---
Current time: 1529615660958 milliseconds
Total Time:         211.0 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        75.2 seconds, 35.6%
Fitness Testing:    108.1 seconds, 51.2%
Report:              27.6 seconds, 13.1%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 67
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 68
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 68
;;******************************
;; -*- Number IO problem report - generation 68
Test total error for best: 59460.0
Test mean error for best: 29.73000
;;------------------------------
Outputs of best individual on training cases:
Correct output: 150.3639690164 | Program output: 45.3639690164 
Correct output: -129.2046261   | Program output: -114.2046261  
Correct output: 43.6336388837  | Program output: 37.6336388837 
Correct output: 168.6824809869 | Program output: 44.6824809869 
Correct output: -24.6347316794 | Program output: -27.6347316794
Correct output: 39.9291320135  | Program output: 17.9291320135 
Correct output: -20.9190282536 | Program output: 23.0809717464 
Correct output: 61.9263871894  | Program output: 58.9263871894 
Correct output: -28.8395473609 | Program output: -23.8395473609
Correct output: -39.146556962  | Program output: -0.146556962  
Correct output: -134.9331989268 | Program output: -111.9331989268
Correct output: -126.4496738486 | Program output: -110.4496738486
Correct output: -51.218440095  | Program output: -102.218440095
Correct output: 45.5895106217  | Program output: 26.5895106217 
Correct output: 136.6637618296 | Program output: 47.6637618296 
Correct output: -104.5625509424 | Program output: -97.5625509424
Correct output: 80.9125656746  | Program output: 11.9125656746 
Correct output: -63.4657032446 | Program output: -0.4657032446 
Correct output: -52.106433034  | Program output: -44.106433034 
Correct output: -99.9152304515 | Program output: -104.9152304515
Correct output: -78.2834351958 | Program output: -22.2834351958
Correct output: -64.2911152024 | Program output: -39.2911152024
Correct output: 93.5722006381  | Program output: -14.4277993619
Correct output: 141.452540764  | Program output: 33.452540764  
Correct output: 102.2088941323 | Program output: -14.7911058677
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_inc} {:instruction float_yank} {:instruction float_mult} {:instruction float_yank} {:instruction float_yankdup} {:instruction in1} {:instruction integer_yank} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_yankdup} {:instruction float_dec} {:instruction float_dec} {:instruction integer_div} {:instruction integer_dup_items} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_dup_items} {:instruction float_dec} {:instruction float_dec} {:instruction integer_div} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_dup_items} {:instruction float_dec} {:instruction float_dec} {:instruction integer_div} {:instruction float_sub} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_div} {:instruction float_dec} {:instruction integer_dup_times} {:instruction integer_dup_items} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_shove} {:instruction print_float} {:instruction float_rot})
Best program: (float_inc float_yank float_mult float_yank float_yankdup in1 integer_yank float_dec float_dec float_dec float_dec integer_yankdup float_dec float_dec integer_div integer_dup_items float_dec float_dec float_dec float_dec float_dec integer_dup_items float_dec float_dec integer_div float_dec float_dec float_dec integer_dup_items float_dec float_dec integer_div float_sub float_dec float_dec float_dec float_dec integer_div float_dec integer_dup_times integer_dup_items float_dec float_dec float_dec float_dec integer_shove print_float float_rot)
Errors: [105.0 2 15.0 2 6.0 2 124.0 3 3.0 1 22.0 2 44.0 11 3.0 2 5.0 1 39.0 2 23.0 2 16.0 2 51.0 3 19.0 2 89.0 3 7.0 3 69.0 2 63.0 2 8.0 2 5.0 3 56.0 2 25.0 2 108.0 11 108.0 3 117.0 13]
Total: 1213.0
Mean: 24.26
Genome size: 48
Size: 49
Percent parens: 0.020
--- Population Statistics ---
Average total errors in population: 3045.726456499999
Median total errors in population: 1213.0
Error averages by case: (172.88491000000002 3.525 92.26851149999997 3.041 81.75273750000002 3.139 190.26589209999997 4.118 77.05957170000002 2.425 95.0233418 3.167 113.70119650000001 11.287 80.02016189999995 3.091 78.76425910000002 2.451 110.17225169999999 5.288 99.72493799999998 3.345 93.58074349999997 3.339 120.54322639999997 3.862 92.73850929999999 3.193 157.9403568 4.129 84.8288893 4.077 137.42223990000005 3.206 132.37380409999997 5.384 83.27605199999999 3.121 82.25820610000004 4.035 126.59027290000002 3.303 98.61640340000002 3.245 173.44598889999997 10.957 175.22056879999994 3.904 181.74542329999997 12.876)
Error minima by case: (70.9687 1 0.0637 1 0.0 0 89.5729 2 0.0 0 1.0 1 0.9142 8 0.0 0 0.0 0 2.3992 1 8.0637 1 1.0637 1 1.7494 1 2.0 1 54.9687 2 0.0 0 1.803 1 1.7469 1 0.0 0 0.0 0 5.2531 1 10.0637 1 14.4626 2 62.3429 1 23.0993 1)
Average genome size in population (length): 54.802
Average program size in population (points): 55.802
Average percent parens in population: 0.018
Minimum age in population: 94.35043119487234
Maximum age in population: 100.0060144081999
Average age in population: 97.9525350313915
Median age in population: 97.99840905488124
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 29
Genome diversity (% unique Plush genomes):	 0.767
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 29
Syntactic diversity (% unique Push programs):	 0.767
Total error diversity:				 0.082
Error (vector) diversity:			 0.087
Behavioral diversity:				 0.087
--- Run Statistics ---
Number of program evaluations used so far: 69000
Number of point (instruction) evaluations so far: 90707163
--- Timings ---
Current time: 1529615663906 milliseconds
Total Time:         214.0 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        76.2 seconds, 35.6%
Fitness Testing:    109.6 seconds, 51.2%
Report:              28.0 seconds, 13.1%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 68
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 69
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 69
;;******************************
;; -*- Number IO problem report - generation 69
Test total error for best: 59460.0
Test mean error for best: 29.73000
;;------------------------------
Outputs of best individual on training cases:
Correct output: 150.3639690164 | Program output: 45.3639690164 
Correct output: -129.2046261   | Program output: -114.2046261  
Correct output: 43.6336388837  | Program output: 37.6336388837 
Correct output: 168.6824809869 | Program output: 44.6824809869 
Correct output: -24.6347316794 | Program output: -27.6347316794
Correct output: 39.9291320135  | Program output: 17.9291320135 
Correct output: -20.9190282536 | Program output: 23.0809717464 
Correct output: 61.9263871894  | Program output: 58.9263871894 
Correct output: -28.8395473609 | Program output: -23.8395473609
Correct output: -39.146556962  | Program output: -0.146556962  
Correct output: -134.9331989268 | Program output: -111.9331989268
Correct output: -126.4496738486 | Program output: -110.4496738486
Correct output: -51.218440095  | Program output: -102.218440095
Correct output: 45.5895106217  | Program output: 26.5895106217 
Correct output: 136.6637618296 | Program output: 47.6637618296 
Correct output: -104.5625509424 | Program output: -97.5625509424
Correct output: 80.9125656746  | Program output: 11.9125656746 
Correct output: -63.4657032446 | Program output: -0.4657032446 
Correct output: -52.106433034  | Program output: -44.106433034 
Correct output: -99.9152304515 | Program output: -104.9152304515
Correct output: -78.2834351958 | Program output: -22.2834351958
Correct output: -64.2911152024 | Program output: -39.2911152024
Correct output: 93.5722006381  | Program output: -14.4277993619
Correct output: 141.452540764  | Program output: 33.452540764  
Correct output: 102.2088941323 | Program output: -14.7911058677
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_max} {:instruction float_pop} {:instruction integer_div} {:instruction integer_div} {:instruction integer_add} {:instruction print_float} {:instruction float_dec} {:instruction print_float} {:instruction float_dup_times} {:instruction in1} {:instruction integer_yank} {:instruction integer_dup_items} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_div} {:instruction float_dec} {:instruction float_dec} {:instruction integer_dup_times} {:instruction float_dec} {:instruction integer_yankdup} {:instruction float_sub} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_dup_items} {:instruction float_dec} {:instruction float_dec} {:instruction integer_yank} {:instruction integer_dup_times} {:instruction integer_dup_items} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_dup_items} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_max} {:instruction integer_dup_times} {:instruction integer_dup_items} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_stackdepth} {:instruction print_float} {:instruction float_rot} {:instruction integer_dup_items} {:instruction float_cos} {:instruction integer_dup_items} {:instruction float_dec})
Best program: (integer_max float_pop integer_div integer_div integer_add print_float float_dec print_float float_dup_times in1 integer_yank integer_dup_items float_dec float_dec float_dec float_dec integer_div float_dec float_dec integer_dup_times float_dec integer_yankdup float_sub float_dec float_dec float_dec float_dec integer_dup_items float_dec float_dec integer_yank integer_dup_times integer_dup_items float_dec float_dec float_dec float_dec integer_dup_items float_dec float_dec float_dec float_dec float_max integer_dup_times integer_dup_items float_dec float_dec float_dec float_dec float_dec float_dec integer_stackdepth print_float float_rot integer_dup_items float_cos integer_dup_items float_dec)
Errors: [105.0 2 15.0 2 6.0 2 124.0 3 3.0 1 22.0 2 44.0 11 3.0 2 5.0 1 39.0 2 23.0 2 16.0 2 51.0 3 19.0 2 89.0 3 7.0 3 69.0 2 63.0 2 8.0 2 5.0 3 56.0 2 25.0 2 108.0 11 108.0 3 117.0 13]
Total: 1213.0
Mean: 24.26
Genome size: 58
Size: 59
Percent parens: 0.017
--- Population Statistics ---
Average total errors in population: 2956.8281093999994
Median total errors in population: 1213.0
Error averages by case: (170.3345249 3.438 87.99304249999999 2.959 77.70564420000001 3.048 187.85650159999994 4.039 73.7316685 2.311 90.93314249999997 3.09 110.44632949999995 11.28 75.99643829999997 2.997 75.82599290000002 2.335 106.38263459999995 5.088 95.31800129999998 3.262 88.78344549999998 3.238 117.98615379999998 3.806 88.85692700000001 3.082 155.5705727 4.043 80.06588830000003 4.001 135.7011944 3.132 128.5747247 5.183 79.15056620000001 3.04 77.85402120000005 3.967 122.75484719999997 3.219 94.65545110000002 3.171 170.91204489999996 10.976 172.69539750000007 3.875 179.25695409999997 12.906)
Error minima by case: (22.6052 1 2.0 1 0.0 0 42.2254 2 0.0 0 1.0 1 0.8096 8 0.0 0 0.0 0 2.4397 1 10.0 1 3.0 1 20.2023 1 1.0 1 2.5069 1 0.0 0 18.8734 1 21.0998 1 0.0 0 0.0 0 5.7166 1 11.2911 1 13.5722 1 37.166 1 13.2089 1)
Average genome size in population (length): 54.645
Average program size in population (points): 55.645
Average percent parens in population: 0.018
Minimum age in population: 96.73307254989174
Maximum age in population: 101.4233553115801
Average age in population: 99.33007212652603
Median age in population: 99.38653036216925
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 24
Genome diversity (% unique Plush genomes):	 0.749
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 24
Syntactic diversity (% unique Push programs):	 0.749
Total error diversity:				 0.082
Error (vector) diversity:			 0.087
Behavioral diversity:				 0.088
--- Run Statistics ---
Number of program evaluations used so far: 70000
Number of point (instruction) evaluations so far: 92073288
--- Timings ---
Current time: 1529615666929 milliseconds
Total Time:         217.0 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        77.3 seconds, 35.6%
Fitness Testing:    111.2 seconds, 51.2%
Report:              28.4 seconds, 13.1%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 69
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 70
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 70
;;******************************
;; -*- Number IO problem report - generation 70
Test total error for best: 59460.0
Test mean error for best: 29.73000
;;------------------------------
Outputs of best individual on training cases:
Correct output: 150.3639690164 | Program output: 45.3639690164 
Correct output: -129.2046261   | Program output: -114.2046261  
Correct output: 43.6336388837  | Program output: 37.6336388837 
Correct output: 168.6824809869 | Program output: 44.6824809869 
Correct output: -24.6347316794 | Program output: -27.6347316794
Correct output: 39.9291320135  | Program output: 17.9291320135 
Correct output: -20.9190282536 | Program output: 23.0809717464 
Correct output: 61.9263871894  | Program output: 58.9263871894 
Correct output: -28.8395473609 | Program output: -23.8395473609
Correct output: -39.146556962  | Program output: -0.146556962  
Correct output: -134.9331989268 | Program output: -111.9331989268
Correct output: -126.4496738486 | Program output: -110.4496738486
Correct output: -51.218440095  | Program output: -102.218440095
Correct output: 45.5895106217  | Program output: 26.5895106217 
Correct output: 136.6637618296 | Program output: 47.6637618296 
Correct output: -104.5625509424 | Program output: -97.5625509424
Correct output: 80.9125656746  | Program output: 11.9125656746 
Correct output: -63.4657032446 | Program output: -0.4657032446 
Correct output: -52.106433034  | Program output: -44.106433034 
Correct output: -99.9152304515 | Program output: -104.9152304515
Correct output: -78.2834351958 | Program output: -22.2834351958
Correct output: -64.2911152024 | Program output: -39.2911152024
Correct output: 93.5722006381  | Program output: -14.4277993619
Correct output: 141.452540764  | Program output: 33.452540764  
Correct output: 102.2088941323 | Program output: -14.7911058677
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_inc} {:instruction float_inc} {:instruction float_yank} {:instruction tagged_197} {:instruction float_yank} {:instruction integer_rot} {:instruction in1} {:instruction integer_yank} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_yankdup} {:instruction float_dec} {:instruction float_dec} {:instruction integer_div} {:instruction integer_rot} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_dup_items} {:instruction float_dec} {:instruction float_dec} {:instruction integer_div} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_dup_items} {:instruction float_dec} {:instruction float_dec} {:instruction integer_div} {:instruction float_sub} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_yank} {:instruction float_dec} {:instruction integer_dup_times} {:instruction integer_dup_items} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_div} {:instruction print_float} {:instruction float_rot} {:instruction float_dec} {:instruction float_dec})
Best program: (float_inc float_inc float_yank tagged_197 float_yank integer_rot in1 integer_yank float_dec float_dec float_dec float_dec integer_yankdup float_dec float_dec integer_div integer_rot float_dec float_dec float_dec float_dec float_dec integer_dup_items float_dec float_dec integer_div float_dec float_dec float_dec integer_dup_items float_dec float_dec integer_div float_sub float_dec float_dec float_dec float_dec integer_yank float_dec integer_dup_times integer_dup_items float_dec float_dec float_dec float_dec integer_div print_float float_rot float_dec float_dec)
Errors: [105.0 2 15.0 2 6.0 2 124.0 3 3.0 1 22.0 2 44.0 11 3.0 2 5.0 1 39.0 2 23.0 2 16.0 2 51.0 3 19.0 2 89.0 3 7.0 3 69.0 2 63.0 2 8.0 2 5.0 3 56.0 2 25.0 2 108.0 11 108.0 3 117.0 13]
Total: 1213.0
Mean: 24.26
Genome size: 51
Size: 52
Percent parens: 0.019
--- Population Statistics ---
Average total errors in population: 2749.3817916999988
Median total errors in population: 1213.0
Error averages by case: (162.48755210000002 3.313 80.38142139999998 2.869 69.5982781 2.926 180.26812719999992 3.937 64.69923829999998 2.228 83.57334039999998 2.994 102.2704024 11.266 67.94347089999998 2.881 66.7008993 2.249 96.85980239999999 4.852 87.80337820000003 3.156 81.17106889999998 3.159 109.29796909999997 3.715 81.10636930000001 2.996 147.5366353 3.922 72.36530199999999 3.879 127.2324311 3.086 119.41698119999998 4.953 70.76627859999999 2.951 70.19339310000004 3.853 114.21531749999998 3.095 86.27793970000002 3.05 162.7994287 10.995 164.83651640000005 3.768 170.53125009999994 12.956)
Error minima by case: (78.0 1 0.0 0 0.0 0 97.0 2 0.0 0 1.0 1 1.0175 8 0.0 0 0.0 0 6.1466 1 8.0 1 1.0 1 17.2184 1 0.0 0 62.0 1 0.0 0 42.0 1 30.4657 1 1.0 1 0.0 0 36.0644 1 10.0 1 81.0 1 81.0 1 90.0 1)
Average genome size in population (length): 54.543
Average program size in population (points): 55.543
Average percent parens in population: 0.018
Minimum age in population: 97.73307254989174
Maximum age in population: 102.5632058893978
Average age in population: 100.7082733181765
Median age in population: 100.7832803696683
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 20
Genome diversity (% unique Plush genomes):	 0.741
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 20
Syntactic diversity (% unique Push programs):	 0.741
Total error diversity:				 0.074
Error (vector) diversity:			 0.08
Behavioral diversity:				 0.08
--- Run Statistics ---
Number of program evaluations used so far: 71000
Number of point (instruction) evaluations so far: 93436863
--- Timings ---
Current time: 1529615670032 milliseconds
Total Time:         220.0 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:        78.3 seconds, 35.6%
Fitness Testing:    112.8 seconds, 51.2%
Report:              28.8 seconds, 13.1%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 70
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 71
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 71
;;******************************
;; -*- Number IO problem report - generation 71
Test total error for best: 59460.0
Test mean error for best: 29.73000
;;------------------------------
Outputs of best individual on training cases:
Correct output: 150.3639690164 | Program output: 45.3639690164 
Correct output: -129.2046261   | Program output: -114.2046261  
Correct output: 43.6336388837  | Program output: 37.6336388837 
Correct output: 168.6824809869 | Program output: 44.6824809869 
Correct output: -24.6347316794 | Program output: -27.6347316794
Correct output: 39.9291320135  | Program output: 17.9291320135 
Correct output: -20.9190282536 | Program output: 23.0809717464 
Correct output: 61.9263871894  | Program output: 58.9263871894 
Correct output: -28.8395473609 | Program output: -23.8395473609
Correct output: -39.146556962  | Program output: -0.146556962  
Correct output: -134.9331989268 | Program output: -111.9331989268
Correct output: -126.4496738486 | Program output: -110.4496738486
Correct output: -51.218440095  | Program output: -102.218440095
Correct output: 45.5895106217  | Program output: 26.5895106217 
Correct output: 136.6637618296 | Program output: 47.6637618296 
Correct output: -104.5625509424 | Program output: -97.5625509424
Correct output: 80.9125656746  | Program output: 11.9125656746 
Correct output: -63.4657032446 | Program output: -0.4657032446 
Correct output: -52.106433034  | Program output: -44.106433034 
Correct output: -99.9152304515 | Program output: -104.9152304515
Correct output: -78.2834351958 | Program output: -22.2834351958
Correct output: -64.2911152024 | Program output: -39.2911152024
Correct output: 93.5722006381  | Program output: -14.4277993619
Correct output: 141.452540764  | Program output: 33.452540764  
Correct output: 102.2088941323 | Program output: -14.7911058677
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction in1} {:instruction integer_yank} {:instruction integer_dup_times} {:instruction float_shove} {:instruction float_dec} {:instruction float_dec} {:instruction float_dup_items} {:instruction float_dec} {:instruction integer_dup_items} {:instruction float_dec} {:instruction float_dec} {:instruction integer_div} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_dup_items} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_div} {:instruction float_dec} {:instruction integer_div} {:instruction float_dec} {:instruction float_dec} {:instruction float_rot} {:instruction integer_dup_times} {:instruction integer_dup_items} {:instruction float_dec} {:instruction float_swap} {:instruction integer_dup_items} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_div} {:instruction float_sub} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_div} {:instruction float_rot} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_div} {:instruction print_float})
Best program: (in1 integer_yank integer_dup_times float_shove float_dec float_dec float_dup_items float_dec integer_dup_items float_dec float_dec integer_div float_dec float_dec float_dec integer_dup_items float_dec float_dec float_dec float_dec integer_div float_dec integer_div float_dec float_dec float_rot integer_dup_times integer_dup_items float_dec float_swap integer_dup_items float_dec float_dec float_dec float_dec integer_div float_sub float_dec float_dec float_dec float_dec integer_div float_rot float_dec float_dec float_dec integer_div print_float)
Errors: [105.0 2 15.0 2 6.0 2 124.0 3 3.0 1 22.0 2 44.0 11 3.0 2 5.0 1 39.0 2 23.0 2 16.0 2 51.0 3 19.0 2 89.0 3 7.0 3 69.0 2 63.0 2 8.0 2 5.0 3 56.0 2 25.0 2 108.0 11 108.0 3 117.0 13]
Total: 1213.0
Mean: 24.26
Genome size: 48
Size: 49
Percent parens: 0.020
--- Population Statistics ---
Average total errors in population: 3023.1458762999996
Median total errors in population: 1213.0
Error averages by case: (172.17727970000004 3.358 90.64228959999998 2.934 80.787037 2.958 189.7528069 3.953 76.97979029999999 2.235 94.18380710000001 3.004 114.28825949999998 11.274 78.79760629999998 2.919 79.07424950000001 2.289 109.42558580000001 5.242 97.9600502 3.182 91.47026489999998 3.191 120.47050270000001 3.745 92.0480989 3.009 157.4062446 3.955 82.91528279999999 3.999 137.2506661 3.037 131.5361663 5.357 82.7154742 2.987 80.45078810000003 3.906 125.85273830000003 3.124 98.22039520000001 3.104 172.6516623 10.976 174.68106749999998 3.768 180.96076250000004 12.941)
Error minima by case: (69.4431 1 2.0 1 0.0 0 88.4431 2 0.0 0 3.0 1 0.061 6 0.0 0 0.0 0 12.9972 1 4.0 1 3.0 1 15.4431 1 1.0 1 53.4431 2 0.0 0 33.4431 1 1.7618 1 0.0 0 0.0 0 1.9071 1 6.0 1 11.5946 1 72.4431 1 11.0302 1)
Average genome size in population (length): 54.457
Average program size in population (points): 55.457
Average percent parens in population: 0.018
Minimum age in population: 99.4338354770782
Maximum age in population: 104.2806937611883
Average age in population: 102.1535954040493
Median age in population: 102.2225507267675
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 13
Genome diversity (% unique Plush genomes):	 0.755
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 13
Syntactic diversity (% unique Push programs):	 0.755
Total error diversity:				 0.062
Error (vector) diversity:			 0.068
Behavioral diversity:				 0.069
--- Run Statistics ---
Number of program evaluations used so far: 72000
Number of point (instruction) evaluations so far: 94798288
--- Timings ---
Current time: 1529615673224 milliseconds
Total Time:         223.3 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:        79.5 seconds, 35.6%
Fitness Testing:    114.4 seconds, 51.2%
Report:              29.3 seconds, 13.1%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 71
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 72
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 72
;;******************************
;; -*- Number IO problem report - generation 72
Test total error for best: 59460.0
Test mean error for best: 29.73000
;;------------------------------
Outputs of best individual on training cases:
Correct output: 150.3639690164 | Program output: 45.3639690164 
Correct output: -129.2046261   | Program output: -114.2046261  
Correct output: 43.6336388837  | Program output: 37.6336388837 
Correct output: 168.6824809869 | Program output: 44.6824809869 
Correct output: -24.6347316794 | Program output: -27.6347316794
Correct output: 39.9291320135  | Program output: 17.9291320135 
Correct output: -20.9190282536 | Program output: 23.0809717464 
Correct output: 61.9263871894  | Program output: 58.9263871894 
Correct output: -28.8395473609 | Program output: -23.8395473609
Correct output: -39.146556962  | Program output: -0.146556962  
Correct output: -134.9331989268 | Program output: -111.9331989268
Correct output: -126.4496738486 | Program output: -110.4496738486
Correct output: -51.218440095  | Program output: -102.218440095
Correct output: 45.5895106217  | Program output: 26.5895106217 
Correct output: 136.6637618296 | Program output: 47.6637618296 
Correct output: -104.5625509424 | Program output: -97.5625509424
Correct output: 80.9125656746  | Program output: 11.9125656746 
Correct output: -63.4657032446 | Program output: -0.4657032446 
Correct output: -52.106433034  | Program output: -44.106433034 
Correct output: -99.9152304515 | Program output: -104.9152304515
Correct output: -78.2834351958 | Program output: -22.2834351958
Correct output: -64.2911152024 | Program output: -39.2911152024
Correct output: 93.5722006381  | Program output: -14.4277993619
Correct output: 141.452540764  | Program output: 33.452540764  
Correct output: 102.2088941323 | Program output: -14.7911058677
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction in1} {:instruction integer_yank} {:instruction integer_dup_times} {:instruction float_shove} {:instruction float_dec} {:instruction float_dec} {:instruction float_dup_items} {:instruction float_dec} {:instruction integer_dup_items} {:instruction float_dec} {:instruction float_dec} {:instruction integer_div} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_dup_items} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_div} {:instruction float_dec} {:instruction integer_div} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_dup_items} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_max} {:instruction integer_dup_times} {:instruction integer_dup_items} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction print_float} {:instruction integer_pop} {:instruction in2} {:instruction integer_dup_times} {:instruction integer_dup_items} {:instruction float_frominteger} {:instruction float_dec} {:instruction integer_yankdup} {:instruction print_float} {:instruction float_rot} {:instruction float_dup} {:instruction float_inc} {:instruction float_dec} {:instruction float_dec} {:instruction integer_div} {:instruction integer_dup_times} {:instruction integer_dup_items} {:instruction integer_pop})
Best program: (in1 integer_yank integer_dup_times float_shove float_dec float_dec float_dup_items float_dec integer_dup_items float_dec float_dec integer_div float_dec float_dec float_dec integer_dup_items float_dec float_dec float_dec float_dec integer_div float_dec integer_div float_dec float_dec float_dec float_dec integer_dup_items float_dec float_dec float_dec float_dec float_max integer_dup_times integer_dup_items float_dec float_dec float_dec float_dec float_dec float_dec print_float integer_pop in2 integer_dup_times integer_dup_items float_frominteger float_dec integer_yankdup print_float float_rot float_dup float_inc float_dec float_dec integer_div integer_dup_times integer_dup_items integer_pop)
Errors: [105.0 2 15.0 2 6.0 2 124.0 3 3.0 1 22.0 2 44.0 11 3.0 2 5.0 1 39.0 2 23.0 2 16.0 2 51.0 3 19.0 2 89.0 3 7.0 3 69.0 2 63.0 2 8.0 2 5.0 3 56.0 2 25.0 2 108.0 11 108.0 3 117.0 13]
Total: 1213.0
Mean: 24.26
Genome size: 59
Size: 60
Percent parens: 0.017
--- Population Statistics ---
Average total errors in population: 3034.853121099999
Median total errors in population: 1213.0
Error averages by case: (171.9765057 3.38 91.2411279 2.947 80.9700222 2.969 189.55811689999993 3.959 77.7056954 2.302 94.74515749999995 3.019 114.61745649999997 11.323 79.06567369999998 2.921 79.77531290000002 2.323 110.26490179999995 5.33 98.52794269999998 3.236 92.06254049999997 3.221 120.74328159999999 3.766 92.2046341 3.032 157.23878229999997 3.969 83.48887160000001 3.97 138.0010288 3.066 132.43413579999998 5.449 82.94810200000002 3.014 81.22000300000002 3.929 126.80092439999999 3.148 98.41225250000001 3.132 173.50107669999994 10.936 174.50308530000004 3.78 181.82848929999997 12.897)
Error minima by case: (2.7838 1 1.0 1 0.0 0 21.7838 2 0.0 0 0.7202 1 0.8096 7 0.0 0 0.0 0 10.1466 1 3.0 1 2.0 1 18.2184 1 0.0 0 13.2162 2 0.0 0 33.2162 1 3.9072 1 0.0 0 0.0 0 10.9072 1 1.7089 1 5.7838 1 5.7838 1 14.7838 1)
Average genome size in population (length): 54.695
Average program size in population (points): 55.695
Average percent parens in population: 0.018
Minimum age in population: 100.748047885792
Maximum age in population: 105.5049468642204
Average age in population: 103.5684399653919
Median age in population: 103.5950491590625
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 17
Genome diversity (% unique Plush genomes):	 0.766
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 17
Syntactic diversity (% unique Push programs):	 0.766
Total error diversity:				 0.073
Error (vector) diversity:			 0.078
Behavioral diversity:				 0.078
--- Run Statistics ---
Number of program evaluations used so far: 73000
Number of point (instruction) evaluations so far: 96165663
--- Timings ---
Current time: 1529615676320 milliseconds
Total Time:         226.3 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:        80.6 seconds, 35.6%
Fitness Testing:    115.9 seconds, 51.2%
Report:              29.7 seconds, 13.1%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 72
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 73
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 73
;;******************************
;; -*- Number IO problem report - generation 73
Test total error for best: 59460.0
Test mean error for best: 29.73000
;;------------------------------
Outputs of best individual on training cases:
Correct output: 150.3639690164 | Program output: 45.3639690164 
Correct output: -129.2046261   | Program output: -114.2046261  
Correct output: 43.6336388837  | Program output: 37.6336388837 
Correct output: 168.6824809869 | Program output: 44.6824809869 
Correct output: -24.6347316794 | Program output: -27.6347316794
Correct output: 39.9291320135  | Program output: 17.9291320135 
Correct output: -20.9190282536 | Program output: 23.0809717464 
Correct output: 61.9263871894  | Program output: 58.9263871894 
Correct output: -28.8395473609 | Program output: -23.8395473609
Correct output: -39.146556962  | Program output: -0.146556962  
Correct output: -134.9331989268 | Program output: -111.9331989268
Correct output: -126.4496738486 | Program output: -110.4496738486
Correct output: -51.218440095  | Program output: -102.218440095
Correct output: 45.5895106217  | Program output: 26.5895106217 
Correct output: 136.6637618296 | Program output: 47.6637618296 
Correct output: -104.5625509424 | Program output: -97.5625509424
Correct output: 80.9125656746  | Program output: 11.9125656746 
Correct output: -63.4657032446 | Program output: -0.4657032446 
Correct output: -52.106433034  | Program output: -44.106433034 
Correct output: -99.9152304515 | Program output: -104.9152304515
Correct output: -78.2834351958 | Program output: -22.2834351958
Correct output: -64.2911152024 | Program output: -39.2911152024
Correct output: 93.5722006381  | Program output: -14.4277993619
Correct output: 141.452540764  | Program output: 33.452540764  
Correct output: 102.2088941323 | Program output: -14.7911058677
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_max} {:instruction float_flush} {:instruction in1} {:instruction float_dec} {:instruction float_shove} {:instruction integer_dup_items} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_div} {:instruction float_sub} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_pop} {:instruction float_dec} {:instruction integer_dup_items} {:instruction float_dec} {:instruction float_dec} {:instruction float_dup_items} {:instruction integer_dup_times} {:instruction integer_dup_items} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_dup_items} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_max} {:instruction integer_dup_times} {:instruction integer_dup_items} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction print_float} {:instruction integer_pop} {:instruction integer_rot} {:instruction integer_dup_times} {:instruction integer_dup_items} {:instruction float_dec} {:instruction -43} {:instruction float_sin} {:instruction float_pop} {:instruction float_sub} {:instruction float_cos})
Best program: (integer_max float_flush in1 float_dec float_shove integer_dup_items float_dec float_dec float_dec float_dec float_dec integer_div float_sub float_dec float_dec float_dec float_dec integer_pop float_dec integer_dup_items float_dec float_dec float_dup_items integer_dup_times integer_dup_items float_dec float_dec float_dec float_dec integer_dup_items float_dec float_dec float_dec float_dec float_max integer_dup_times integer_dup_items float_dec float_dec float_dec float_dec float_dec float_dec print_float integer_pop integer_rot integer_dup_times integer_dup_items float_dec -43 float_sin float_pop float_sub float_cos)
Errors: [105.0 2 15.0 2 6.0 2 124.0 3 3.0 1 22.0 2 44.0 11 3.0 2 5.0 1 39.0 2 23.0 2 16.0 2 51.0 3 19.0 2 89.0 3 7.0 3 69.0 2 63.0 2 8.0 2 5.0 3 56.0 2 25.0 2 108.0 11 108.0 3 117.0 13]
Total: 1213.0
Mean: 24.26
Genome size: 54
Size: 55
Percent parens: 0.018
--- Population Statistics ---
Average total errors in population: 2675.404273
Median total errors in population: 1213.0
Error averages by case: (158.84778489999994 3.219 76.61345989999997 2.792 66.33592989999997 2.847 176.671954 3.839 62.5176307 2.107 80.3426415 2.892 100.1768779 11.241 64.4889107 2.797 64.6092218 2.119 95.85330109999998 5.004 84.04629049999998 3.034 77.44034920000001 3.04 106.48379220000002 3.624 77.8743373 2.901 143.90447840000002 3.85 68.63809200000001 3.787 124.16542400000002 2.908 118.42927569999996 5.103 67.90108449999998 2.857 66.36587020000002 3.765 112.641245 2.979 83.78120090000002 2.962 160.0914265 10.931 161.40798639999997 3.68 168.56770780000002 12.93)
Error minima by case: (13.4336 1 3.0 1 0.0 0 32.4336 1 0.0 0 1.0 1 0.9021 7 0.0 0 0.0 0 1.8562 1 11.0 1 4.0 1 2.6134 1 0.0 0 2.5664 1 0.0 0 21.0874 1 11.9314 1 0.0 0 0.0 0 44.0 1 3.7089 1 16.4336 1 16.4336 1 25.4336 3)
Average genome size in population (length): 54.534
Average program size in population (points): 55.534
Average percent parens in population: 0.018
Minimum age in population: 102.0964546710755
Maximum age in population: 107.0577582134606
Average age in population: 104.926505888361
Median age in population: 104.982438950758
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 23
Genome diversity (% unique Plush genomes):	 0.734
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 23
Syntactic diversity (% unique Push programs):	 0.734
Total error diversity:				 0.064
Error (vector) diversity:			 0.069
Behavioral diversity:				 0.07
--- Run Statistics ---
Number of program evaluations used so far: 74000
Number of point (instruction) evaluations so far: 97529013
--- Timings ---
Current time: 1529615679321 milliseconds
Total Time:         229.4 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:        81.6 seconds, 35.6%
Fitness Testing:    117.5 seconds, 51.2%
Report:              30.2 seconds, 13.1%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 73
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 74
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 74
;;******************************
;; -*- Number IO problem report - generation 74
Test total error for best: 59460.0
Test mean error for best: 29.73000
;;------------------------------
Outputs of best individual on training cases:
Correct output: 150.3639690164 | Program output: 45.3639690164 
Correct output: -129.2046261   | Program output: -114.2046261  
Correct output: 43.6336388837  | Program output: 37.6336388837 
Correct output: 168.6824809869 | Program output: 44.6824809869 
Correct output: -24.6347316794 | Program output: -27.6347316794
Correct output: 39.9291320135  | Program output: 17.9291320135 
Correct output: -20.9190282536 | Program output: 23.0809717464 
Correct output: 61.9263871894  | Program output: 58.9263871894 
Correct output: -28.8395473609 | Program output: -23.8395473609
Correct output: -39.146556962  | Program output: -0.146556962  
Correct output: -134.9331989268 | Program output: -111.9331989268
Correct output: -126.4496738486 | Program output: -110.4496738486
Correct output: -51.218440095  | Program output: -102.218440095
Correct output: 45.5895106217  | Program output: 26.5895106217 
Correct output: 136.6637618296 | Program output: 47.6637618296 
Correct output: -104.5625509424 | Program output: -97.5625509424
Correct output: 80.9125656746  | Program output: 11.9125656746 
Correct output: -63.4657032446 | Program output: -0.4657032446 
Correct output: -52.106433034  | Program output: -44.106433034 
Correct output: -99.9152304515 | Program output: -104.9152304515
Correct output: -78.2834351958 | Program output: -22.2834351958
Correct output: -64.2911152024 | Program output: -39.2911152024
Correct output: 93.5722006381  | Program output: -14.4277993619
Correct output: 141.452540764  | Program output: 33.452540764  
Correct output: 102.2088941323 | Program output: -14.7911058677
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_inc} {:instruction float_flush} {:instruction in1} {:instruction integer_dup_times} {:instruction float_div} {:instruction integer_min} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_dup_items} {:instruction float_dec} {:instruction float_dec} {:instruction integer_div} {:instruction integer_sub} {:instruction float_dec} {:instruction integer_dup_items} {:instruction float_dec} {:instruction float_dec} {:instruction integer_div} {:instruction integer_max} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_div} {:instruction float_sub} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_min} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_div} {:instruction integer_yank} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_div} {:instruction print_float} {:instruction float_rot} {:instruction in1} {:instruction float_rot} {:instruction float_rot} {:instruction integer_dup_items} {:instruction float_cos} {:instruction -43} {:instruction float_sin} {:instruction float_pop} {:instruction float_sub} {:instruction float_cos})
Best program: (float_inc float_flush in1 integer_dup_times float_div integer_min float_dec float_dec float_dec float_dec integer_dup_items float_dec float_dec integer_div integer_sub float_dec integer_dup_items float_dec float_dec integer_div integer_max float_dec float_dec float_dec float_dec integer_div float_sub float_dec float_dec float_dec float_dec float_dec float_dec float_min float_dec float_dec float_dec float_dec integer_div integer_yank float_dec float_dec float_dec float_dec integer_div print_float float_rot in1 float_rot float_rot integer_dup_items float_cos -43 float_sin float_pop float_sub float_cos)
Errors: [105.0 2 15.0 2 6.0 2 124.0 3 3.0 1 22.0 2 44.0 11 3.0 2 5.0 1 39.0 2 23.0 2 16.0 2 51.0 3 19.0 2 89.0 3 7.0 3 69.0 2 63.0 2 8.0 2 5.0 3 56.0 2 25.0 2 108.0 11 108.0 3 117.0 13]
Total: 1213.0
Mean: 24.26
Genome size: 57
Size: 58
Percent parens: 0.017
--- Population Statistics ---
Average total errors in population: 3205.4299199999996
Median total errors in population: 1213.0
Error averages by case: (179.06972410000006 3.451 98.78163569999998 3.007 88.19514880000001 3.089 196.51069239999995 4.063 84.10807319999998 2.393 101.5174969 3.122 120.76212609999999 11.345 86.34296149999997 3.045 85.85843800000002 2.408 116.14711189999997 5.025 106.0517909 3.308 99.61641379999999 3.29 128.24374519999998 3.843 99.47860600000001 3.13 164.43263269999997 4.069 91.0848737 4.053 143.9653427 3.167 138.14073009999996 5.099 90.2614773 3.105 88.90836920000001 3.995 132.3654191 3.234 105.52086540000002 3.219 178.9692714 11.039 181.49653640000002 3.878 187.22543750000003 12.998)
Error minima by case: (68.9917 1 0.0 0 0.0 0 87.3102 2 0.0 0 3.0 1 0.2171 8 0.0 0 0.0 0 1.6624 1 8.0 1 1.0 1 6.0066 2 4.0 1 55.2915 1 0.0 0 0.4597 1 2.6504 1 0.0 0 0.0 0 17.4681 1 3.4758 1 12.2 2 60.0803 1 16.552 1)
Average genome size in population (length): 54.355
Average program size in population (points): 55.355
Average percent parens in population: 0.018
Minimum age in population: 103.3276715816404
Maximum age in population: 108.4731630103068
Average age in population: 106.3340870780294
Median age in population: 106.3716727634082
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 21
Genome diversity (% unique Plush genomes):	 0.741
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 21
Syntactic diversity (% unique Push programs):	 0.741
Total error diversity:				 0.07
Error (vector) diversity:			 0.075
Behavioral diversity:				 0.075
--- Run Statistics ---
Number of program evaluations used so far: 75000
Number of point (instruction) evaluations so far: 98887888
--- Timings ---
Current time: 1529615682349 milliseconds
Total Time:         232.4 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:        82.7 seconds, 35.6%
Fitness Testing:    119.1 seconds, 51.2%
Report:              30.6 seconds, 13.1%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 74
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 75
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 75
;;******************************
;; -*- Number IO problem report - generation 75
Test total error for best: 59460.0
Test mean error for best: 29.73000
;;------------------------------
Outputs of best individual on training cases:
Correct output: 150.3639690164 | Program output: 45.3639690164 
Correct output: -129.2046261   | Program output: -114.2046261  
Correct output: 43.6336388837  | Program output: 37.6336388837 
Correct output: 168.6824809869 | Program output: 44.6824809869 
Correct output: -24.6347316794 | Program output: -27.6347316794
Correct output: 39.9291320135  | Program output: 17.9291320135 
Correct output: -20.9190282536 | Program output: 23.0809717464 
Correct output: 61.9263871894  | Program output: 58.9263871894 
Correct output: -28.8395473609 | Program output: -23.8395473609
Correct output: -39.146556962  | Program output: -0.146556962  
Correct output: -134.9331989268 | Program output: -111.9331989268
Correct output: -126.4496738486 | Program output: -110.4496738486
Correct output: -51.218440095  | Program output: -102.218440095
Correct output: 45.5895106217  | Program output: 26.5895106217 
Correct output: 136.6637618296 | Program output: 47.6637618296 
Correct output: -104.5625509424 | Program output: -97.5625509424
Correct output: 80.9125656746  | Program output: 11.9125656746 
Correct output: -63.4657032446 | Program output: -0.4657032446 
Correct output: -52.106433034  | Program output: -44.106433034 
Correct output: -99.9152304515 | Program output: -104.9152304515
Correct output: -78.2834351958 | Program output: -22.2834351958
Correct output: -64.2911152024 | Program output: -39.2911152024
Correct output: 93.5722006381  | Program output: -14.4277993619
Correct output: 141.452540764  | Program output: 33.452540764  
Correct output: 102.2088941323 | Program output: -14.7911058677
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_max} {:instruction float_flush} {:instruction in1} {:instruction float_dec} {:instruction float_shove} {:instruction integer_dup_items} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_div} {:instruction float_sub} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_pop} {:instruction float_dec} {:instruction integer_dup_items} {:instruction float_dec} {:instruction float_dec} {:instruction float_dup_items} {:instruction integer_dup_times} {:instruction integer_dup_items} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_dup_items} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_max} {:instruction integer_dup_times} {:instruction integer_dup_items} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction print_float} {:instruction float_dec} {:instruction float_dec} {:instruction integer_dup_items} {:instruction float_div} {:instruction integer_dup_items} {:instruction float_rot} {:instruction integer_div} {:instruction print_float})
Best program: (integer_max float_flush in1 float_dec float_shove integer_dup_items float_dec float_dec float_dec float_dec float_dec integer_div float_sub float_dec float_dec float_dec float_dec integer_pop float_dec integer_dup_items float_dec float_dec float_dup_items integer_dup_times integer_dup_items float_dec float_dec float_dec float_dec integer_dup_items float_dec float_dec float_dec float_dec float_max integer_dup_times integer_dup_items float_dec float_dec float_dec float_dec float_dec float_dec print_float float_dec float_dec integer_dup_items float_div integer_dup_items float_rot integer_div print_float)
Errors: [105.0 2 15.0 2 6.0 2 124.0 3 3.0 1 22.0 2 44.0 11 3.0 2 5.0 1 39.0 2 23.0 2 16.0 2 51.0 3 19.0 2 89.0 3 7.0 3 69.0 2 63.0 2 8.0 2 5.0 3 56.0 2 25.0 2 108.0 11 108.0 3 117.0 13]
Total: 1213.0
Mean: 24.26
Genome size: 52
Size: 53
Percent parens: 0.019
--- Population Statistics ---
Average total errors in population: 3379.7169263999995
Median total errors in population: 1213.0
Error averages by case: (185.17780190000002 3.661 105.3968423 3.117 95.20055220000002 3.233 202.48298079999995 4.206 91.70671709999999 2.568 108.8959984 3.267 127.49121559999999 11.332 93.37814519999996 3.179 93.59788079999998 2.535 123.58409729999995 5.342 112.6078541 3.489 106.1904474 3.46 134.1975243 3.96 106.46723309999999 3.28 170.70143939999997 4.213 97.68941439999999 4.18 151.38551989999996 3.305 145.46234229999996 5.449 96.79670279999999 3.22 95.66884800000003 4.201 139.773131 3.376 112.01894600000003 3.372 186.05645370000002 11.041 187.53723929999998 4.026 194.25259910000003 12.987)
Error minima by case: (3.21 1 0.0 0 0.0 0 15.79 2 0.0 0 0.0709 1 0.6554 8 0.0 0 0.0 0 8.9243 1 8.0 1 1.0 1 3.1476 1 2.0 1 19.21 1 0.0 0 1.5674 1 15.3948 1 0.0 0 0.0 0 30.2125 1 10.0 1 0.21 2 0.21 1 8.79 3)
Average genome size in population (length): 53.989
Average program size in population (points): 54.989
Average percent parens in population: 0.019
Minimum age in population: 105.2073657047645
Maximum age in population: 110.0395275213561
Average age in population: 107.7768038382661
Median age in population: 107.8447825159806
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 13
Genome diversity (% unique Plush genomes):	 0.766
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 13
Syntactic diversity (% unique Push programs):	 0.766
Total error diversity:				 0.073
Error (vector) diversity:			 0.078
Behavioral diversity:				 0.078
--- Run Statistics ---
Number of program evaluations used so far: 76000
Number of point (instruction) evaluations so far: 100237638
--- Timings ---
Current time: 1529615685397 milliseconds
Total Time:         235.5 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:        83.8 seconds, 35.6%
Fitness Testing:    120.6 seconds, 51.2%
Report:              31.0 seconds, 13.2%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 75
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 76
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 76
;;******************************
;; -*- Number IO problem report - generation 76
Test total error for best: 59460.0
Test mean error for best: 29.73000
;;------------------------------
Outputs of best individual on training cases:
Correct output: 150.3639690164 | Program output: 45.3639690164 
Correct output: -129.2046261   | Program output: -114.2046261  
Correct output: 43.6336388837  | Program output: 37.6336388837 
Correct output: 168.6824809869 | Program output: 44.6824809869 
Correct output: -24.6347316794 | Program output: -27.6347316794
Correct output: 39.9291320135  | Program output: 17.9291320135 
Correct output: -20.9190282536 | Program output: 23.0809717464 
Correct output: 61.9263871894  | Program output: 58.9263871894 
Correct output: -28.8395473609 | Program output: -23.8395473609
Correct output: -39.146556962  | Program output: -0.146556962  
Correct output: -134.9331989268 | Program output: -111.9331989268
Correct output: -126.4496738486 | Program output: -110.4496738486
Correct output: -51.218440095  | Program output: -102.218440095
Correct output: 45.5895106217  | Program output: 26.5895106217 
Correct output: 136.6637618296 | Program output: 47.6637618296 
Correct output: -104.5625509424 | Program output: -97.5625509424
Correct output: 80.9125656746  | Program output: 11.9125656746 
Correct output: -63.4657032446 | Program output: -0.4657032446 
Correct output: -52.106433034  | Program output: -44.106433034 
Correct output: -99.9152304515 | Program output: -104.9152304515
Correct output: -78.2834351958 | Program output: -22.2834351958
Correct output: -64.2911152024 | Program output: -39.2911152024
Correct output: 93.5722006381  | Program output: -14.4277993619
Correct output: 141.452540764  | Program output: 33.452540764  
Correct output: 102.2088941323 | Program output: -14.7911058677
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_inc} {:instruction integer_div} {:instruction in1} {:instruction integer_yank} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_div} {:instruction float_sub} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_pop} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_dup_items} {:instruction float_dec} {:instruction float_dec} {:instruction integer_yank} {:instruction integer_dup_times} {:instruction integer_dup_items} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_dup_items} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_max} {:instruction integer_dup_times} {:instruction integer_dup_items} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_div} {:instruction print_float})
Best program: (float_inc integer_div in1 integer_yank float_dec float_dec float_dec float_dec float_dec float_dec integer_div float_sub float_dec float_dec float_dec float_dec integer_pop float_dec float_dec float_dec integer_dup_items float_dec float_dec integer_yank integer_dup_times integer_dup_items float_dec float_dec float_dec float_dec integer_dup_items float_dec float_dec float_dec float_dec float_max integer_dup_times integer_dup_items float_dec float_dec float_dec float_dec integer_div print_float)
Errors: [105.0 2 15.0 2 6.0 2 124.0 3 3.0 1 22.0 2 44.0 11 3.0 2 5.0 1 39.0 2 23.0 2 16.0 2 51.0 3 19.0 2 89.0 3 7.0 3 69.0 2 63.0 2 8.0 2 5.0 3 56.0 2 25.0 2 108.0 11 108.0 3 117.0 13]
Total: 1213.0
Mean: 24.26
Genome size: 44
Size: 45
Percent parens: 0.022
--- Population Statistics ---
Average total errors in population: 2706.323432999999
Median total errors in population: 1213.0
Error averages by case: (159.93324010000006 3.332 78.10167109999998 2.853 67.66938689999999 2.95 177.78319209999995 3.924 63.65998120000001 2.203 81.44794649999994 2.997 101.03145959999996 11.236 65.96222199999998 2.886 65.96294350000001 2.248 96.94440099999997 5.273 85.48842889999999 3.125 78.91665159999997 3.119 107.15288619999998 3.676 78.9945799 2.987 144.92940439999998 3.937 70.14058729999998 3.898 125.13625369999997 3.001 119.49434060000004 5.374 69.26626169999997 2.924 67.67071500000004 3.836 113.52424570000002 3.098 84.9981935 3.051 160.90182819999993 10.919 162.38706120000006 3.74 169.35555109999996 12.883)
Error minima by case: (14.1338 1 0.0 0 0.0 0 33.1338 2 0.0 0 1.0 1 0.8985 8 0.0 0 0.0 0 9.9972 1 1.8362 1 1.0 1 23.2023 1 1.0 1 1.8662 1 0.0 0 15.9927 1 32.6277 1 0.0 0 0.0 0 17.81 1 3.8362 1 17.1338 1 17.1338 1 26.1338 1)
Average genome size in population (length): 53.798
Average program size in population (points): 54.798
Average percent parens in population: 0.019
Minimum age in population: 106.5724882358686
Maximum age in population: 111.0822783785768
Average age in population: 109.1804188187356
Median age in population: 109.2697980824854
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 13
Genome diversity (% unique Plush genomes):	 0.765
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 13
Syntactic diversity (% unique Push programs):	 0.765
Total error diversity:				 0.074
Error (vector) diversity:			 0.08
Behavioral diversity:				 0.08
--- Run Statistics ---
Number of program evaluations used so far: 77000
Number of point (instruction) evaluations so far: 101582613
--- Timings ---
Current time: 1529615688522 milliseconds
Total Time:         238.6 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:        84.9 seconds, 35.6%
Fitness Testing:    122.2 seconds, 51.2%
Report:              31.4 seconds, 13.1%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 76
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 77
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 77
;;******************************
;; -*- Number IO problem report - generation 77
Test total error for best: 59460.0
Test mean error for best: 29.73000
;;------------------------------
Outputs of best individual on training cases:
Correct output: 150.3639690164 | Program output: 45.3639690164 
Correct output: -129.2046261   | Program output: -114.2046261  
Correct output: 43.6336388837  | Program output: 37.6336388837 
Correct output: 168.6824809869 | Program output: 44.6824809869 
Correct output: -24.6347316794 | Program output: -27.6347316794
Correct output: 39.9291320135  | Program output: 17.9291320135 
Correct output: -20.9190282536 | Program output: 23.0809717464 
Correct output: 61.9263871894  | Program output: 58.9263871894 
Correct output: -28.8395473609 | Program output: -23.8395473609
Correct output: -39.146556962  | Program output: -0.146556962  
Correct output: -134.9331989268 | Program output: -111.9331989268
Correct output: -126.4496738486 | Program output: -110.4496738486
Correct output: -51.218440095  | Program output: -102.218440095
Correct output: 45.5895106217  | Program output: 26.5895106217 
Correct output: 136.6637618296 | Program output: 47.6637618296 
Correct output: -104.5625509424 | Program output: -97.5625509424
Correct output: 80.9125656746  | Program output: 11.9125656746 
Correct output: -63.4657032446 | Program output: -0.4657032446 
Correct output: -52.106433034  | Program output: -44.106433034 
Correct output: -99.9152304515 | Program output: -104.9152304515
Correct output: -78.2834351958 | Program output: -22.2834351958
Correct output: -64.2911152024 | Program output: -39.2911152024
Correct output: 93.5722006381  | Program output: -14.4277993619
Correct output: 141.452540764  | Program output: 33.452540764  
Correct output: 102.2088941323 | Program output: -14.7911058677
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_max} {:instruction float_pop} {:instruction integer_div} {:instruction integer_div} {:instruction integer_add} {:instruction integer_dup_times} {:instruction float_dec} {:instruction print_float} {:instruction float_dup_times} {:instruction in1} {:instruction integer_yank} {:instruction integer_dup_items} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_div} {:instruction float_dec} {:instruction float_dec} {:instruction integer_dup_times} {:instruction float_dec} {:instruction integer_div} {:instruction float_sub} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_yank} {:instruction integer_dup_times} {:instruction integer_dup_items} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_dup_items} {:instruction float_dec} {:instruction float_dec} {:instruction integer_div} {:instruction integer_dup_items} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_div} {:instruction float_sub} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_div} {:instruction integer_div} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_div} {:instruction print_float} {:instruction float_dec})
Best program: (integer_max float_pop integer_div integer_div integer_add integer_dup_times float_dec print_float float_dup_times in1 integer_yank integer_dup_items float_dec float_dec float_dec float_dec integer_div float_dec float_dec integer_dup_times float_dec integer_div float_sub float_dec float_dec float_dec integer_yank integer_dup_times integer_dup_items float_dec float_dec float_dec float_dec integer_dup_items float_dec float_dec integer_div integer_dup_items float_dec float_dec float_dec float_dec integer_div float_sub float_dec float_dec float_dec float_dec integer_div integer_div float_dec float_dec float_dec integer_div print_float float_dec)
Errors: [105.0 2 15.0 2 6.0 2 124.0 3 3.0 1 22.0 2 44.0 11 3.0 2 5.0 1 39.0 2 23.0 2 16.0 2 51.0 3 19.0 2 89.0 3 7.0 3 69.0 2 63.0 2 8.0 2 5.0 3 56.0 2 25.0 2 108.0 11 108.0 3 117.0 13]
Total: 1213.0
Mean: 24.26
Genome size: 56
Size: 57
Percent parens: 0.018
--- Population Statistics ---
Average total errors in population: 2940.244615599999
Median total errors in population: 1213.0
Error averages by case: (168.95712350000008 3.427 88.0460247 2.937 77.26497329999998 2.982 186.59516619999994 3.964 72.5594831 2.296 91.00921989999998 3.017 110.42457049999997 11.288 75.51846679999997 2.913 74.79820800000002 2.305 106.73662959999993 5.513 95.39160559999999 3.233 88.83618319999997 3.205 116.82957039999998 3.747 88.57686520000003 3.049 154.138318 3.997 80.1045716 3.921 134.18981899999997 3.059 128.1138931 5.61 78.67294100000004 2.998 77.73393060000004 3.931 122.01006110000002 3.161 94.12360480000001 3.129 169.6452396 10.941 171.35270210000004 3.809 177.30144470000005 12.882)
Error minima by case: (32.636 1 0.4105 1 0.0 0 52.3175 1 0.0 0 1.0 1 0.9142 8 0.0 0 0.0 0 13.8614 1 8.4105 1 1.4105 1 13.0 1 1.0 1 14.3362 2 0.0 0 5.0 1 38.1805 1 0.0 0 0.0 0 14.0644 1 10.4105 1 44.0 2 44.0 1 53.0 1)
Average genome size in population (length): 53.715
Average program size in population (points): 54.715
Average percent parens in population: 0.019
Minimum age in population: 107.9302269095952
Maximum age in population: 112.8866389532023
Average age in population: 110.6071811146267
Median age in population: 110.6685230206974
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 11
Genome diversity (% unique Plush genomes):	 0.785
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 11
Syntactic diversity (% unique Push programs):	 0.785
Total error diversity:				 0.07
Error (vector) diversity:			 0.075
Behavioral diversity:				 0.076
--- Run Statistics ---
Number of program evaluations used so far: 78000
Number of point (instruction) evaluations so far: 102925563
--- Timings ---
Current time: 1529615691509 milliseconds
Total Time:         241.5 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:        85.9 seconds, 35.6%
Fitness Testing:    123.7 seconds, 51.2%
Report:              31.8 seconds, 13.2%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 77
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 78
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 78
;;******************************
;; -*- Number IO problem report - generation 78
Test total error for best: 59460.0
Test mean error for best: 29.73000
;;------------------------------
Outputs of best individual on training cases:
Correct output: 150.3639690164 | Program output: 45.3639690164 
Correct output: -129.2046261   | Program output: -114.2046261  
Correct output: 43.6336388837  | Program output: 37.6336388837 
Correct output: 168.6824809869 | Program output: 44.6824809869 
Correct output: -24.6347316794 | Program output: -27.6347316794
Correct output: 39.9291320135  | Program output: 17.9291320135 
Correct output: -20.9190282536 | Program output: 23.0809717464 
Correct output: 61.9263871894  | Program output: 58.9263871894 
Correct output: -28.8395473609 | Program output: -23.8395473609
Correct output: -39.146556962  | Program output: -0.146556962  
Correct output: -134.9331989268 | Program output: -111.9331989268
Correct output: -126.4496738486 | Program output: -110.4496738486
Correct output: -51.218440095  | Program output: -102.218440095
Correct output: 45.5895106217  | Program output: 26.5895106217 
Correct output: 136.6637618296 | Program output: 47.6637618296 
Correct output: -104.5625509424 | Program output: -97.5625509424
Correct output: 80.9125656746  | Program output: 11.9125656746 
Correct output: -63.4657032446 | Program output: -0.4657032446 
Correct output: -52.106433034  | Program output: -44.106433034 
Correct output: -99.9152304515 | Program output: -104.9152304515
Correct output: -78.2834351958 | Program output: -22.2834351958
Correct output: -64.2911152024 | Program output: -39.2911152024
Correct output: 93.5722006381  | Program output: -14.4277993619
Correct output: 141.452540764  | Program output: 33.452540764  
Correct output: 102.2088941323 | Program output: -14.7911058677
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_swap} {:instruction integer_yank} {:instruction float_dec} {:instruction float_dec} {:instruction float_flush} {:instruction float_mod} {:instruction in1} {:instruction integer_yank} {:instruction float_div} {:instruction integer_dup_items} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_dup_items} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_dup_items} {:instruction float_dec} {:instruction float_dec} {:instruction integer_div} {:instruction integer_rot} {:instruction float_dec} {:instruction float_dec} {:instruction 79} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_div} {:instruction float_dec} {:instruction integer_dup_items} {:instruction float_dec} {:instruction float_dec} {:instruction integer_yank} {:instruction integer_dup_items} {:instruction float_add} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_dup_items} {:instruction float_dec} {:instruction float_dec} {:instruction integer_mod} {:instruction float_dec} {:instruction integer_inc} {:instruction float_dec} {:instruction integer_mod} {:instruction integer_div} {:instruction float_dec} {:instruction integer_div} {:instruction print_float} {:instruction float_inc} {:instruction float_dec})
Best program: (integer_swap integer_yank float_dec float_dec float_flush float_mod in1 integer_yank float_div integer_dup_items float_dec float_dec float_dec integer_dup_items float_dec float_dec float_dec float_dec integer_dup_items float_dec float_dec integer_div integer_rot float_dec float_dec 79 float_dec float_dec float_dec float_dec integer_div float_dec integer_dup_items float_dec float_dec integer_yank integer_dup_items float_add float_dec float_dec float_dec float_dec integer_dup_items float_dec float_dec integer_mod float_dec integer_inc float_dec integer_mod integer_div float_dec integer_div print_float float_inc float_dec)
Errors: [105.0 2 15.0 2 6.0 2 124.0 3 3.0 1 22.0 2 44.0 11 3.0 2 5.0 1 39.0 2 23.0 2 16.0 2 51.0 3 19.0 2 89.0 3 7.0 3 69.0 2 63.0 2 8.0 2 5.0 3 56.0 2 25.0 2 108.0 11 108.0 3 117.0 13]
Total: 1213.0
Mean: 24.26
Genome size: 56
Size: 57
Percent parens: 0.018
--- Population Statistics ---
Average total errors in population: 3127.3588712
Median total errors in population: 1213.0
Error averages by case: (176.23113180000004 3.449 95.018901 2.994 85.2457092 3.057 193.7435781 4.036 80.4482161 2.349 99.16981559999999 3.087 118.08916750000002 11.297 83.31029309999998 3.002 82.4562315 2.335 114.43376229999996 5.071 102.3473783 3.274 95.86094499999999 3.291 124.45036749999998 3.838 96.6405069 3.107 161.5414147 4.033 87.27368740000001 4.033 142.1704761 3.114 135.46882110000004 5.169 86.0753337 3.063 85.10703640000001 4.01 129.1620582 3.177 101.47842830000003 3.188 176.40877860000003 11.006 178.69648290000003 3.863 184.71534989999998 12.972)
Error minima by case: (7.2484 1 3.0 1 0.0 0 26.2484 2 0.0 0 2.0 1 1.8774 9 0.0 0 0.0 0 13.0721 1 11.0 1 4.0 1 3.9592 2 0.0 0 8.7516 1 0.0 0 14.0408 1 0.2266 1 0.0 0 0.0 0 11.2298 1 0.5988 1 10.2484 2 10.2484 1 19.2484 2)
Average genome size in population (length): 53.522
Average program size in population (points): 54.522
Average percent parens in population: 0.019
Minimum age in population: 109.4042521197025
Maximum age in population: 114.1654188212652
Average age in population: 112.0175268204523
Median age in population: 112.0738895654714
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 14
Genome diversity (% unique Plush genomes):	 0.751
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 14
Syntactic diversity (% unique Push programs):	 0.751
Total error diversity:				 0.066
Error (vector) diversity:			 0.07
Behavioral diversity:				 0.07
--- Run Statistics ---
Number of program evaluations used so far: 79000
Number of point (instruction) evaluations so far: 104263663
--- Timings ---
Current time: 1529615694589 milliseconds
Total Time:         244.7 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:        87.1 seconds, 35.6%
Fitness Testing:    125.2 seconds, 51.2%
Report:              32.2 seconds, 13.2%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 78
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 79
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 79
;;******************************
;; -*- Number IO problem report - generation 79
Test total error for best: 59460.0
Test mean error for best: 29.73000
;;------------------------------
Outputs of best individual on training cases:
Correct output: 150.3639690164 | Program output: 45.3639690164 
Correct output: -129.2046261   | Program output: -114.2046261  
Correct output: 43.6336388837  | Program output: 37.6336388837 
Correct output: 168.6824809869 | Program output: 44.6824809869 
Correct output: -24.6347316794 | Program output: -27.6347316794
Correct output: 39.9291320135  | Program output: 17.9291320135 
Correct output: -20.9190282536 | Program output: 23.0809717464 
Correct output: 61.9263871894  | Program output: 58.9263871894 
Correct output: -28.8395473609 | Program output: -23.8395473609
Correct output: -39.146556962  | Program output: -0.146556962  
Correct output: -134.9331989268 | Program output: -111.9331989268
Correct output: -126.4496738486 | Program output: -110.4496738486
Correct output: -51.218440095  | Program output: -102.218440095
Correct output: 45.5895106217  | Program output: 26.5895106217 
Correct output: 136.6637618296 | Program output: 47.6637618296 
Correct output: -104.5625509424 | Program output: -97.5625509424
Correct output: 80.9125656746  | Program output: 11.9125656746 
Correct output: -63.4657032446 | Program output: -0.4657032446 
Correct output: -52.106433034  | Program output: -44.106433034 
Correct output: -99.9152304515 | Program output: -104.9152304515
Correct output: -78.2834351958 | Program output: -22.2834351958
Correct output: -64.2911152024 | Program output: -39.2911152024
Correct output: 93.5722006381  | Program output: -14.4277993619
Correct output: 141.452540764  | Program output: 33.452540764  
Correct output: 102.2088941323 | Program output: -14.7911058677
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_flush} {:instruction in1} {:instruction float_stackdepth} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_div} {:instruction integer_dup_items} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_div} {:instruction float_dec} {:instruction integer_dup_items} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_dup_items} {:instruction float_dec} {:instruction float_dec} {:instruction integer_div} {:instruction integer_pop} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_div} {:instruction float_yank} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_inc} {:instruction integer_yank} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_div} {:instruction print_float})
Best program: (float_flush in1 float_stackdepth float_dec float_dec float_dec float_dec float_dec integer_div integer_dup_items float_dec float_dec float_dec float_dec float_dec integer_div float_dec integer_dup_items float_dec float_dec float_dec integer_dup_items float_dec float_dec integer_div integer_pop float_dec float_dec float_dec float_dec integer_div float_yank float_dec float_dec float_dec float_dec integer_inc integer_yank float_dec float_dec float_dec integer_div print_float)
Errors: [105.0 2 15.0 2 6.0 2 124.0 3 3.0 1 22.0 2 44.0 11 3.0 2 5.0 1 39.0 2 23.0 2 16.0 2 51.0 3 19.0 2 89.0 3 7.0 3 69.0 2 63.0 2 8.0 2 5.0 3 56.0 2 25.0 2 108.0 11 108.0 3 117.0 13]
Total: 1213.0
Mean: 24.26
Genome size: 43
Size: 44
Percent parens: 0.023
--- Population Statistics ---
Average total errors in population: 3440.4841673
Median total errors in population: 1213.0
Error averages by case: (188.37168629999996 3.589 108.4455179 3.117 98.81041870000001 3.186 205.60697909999993 4.158 92.113851 2.509 111.74069469999998 3.229 131.6355343 11.367 96.89428589999999 3.122 93.85693490000003 2.524 125.30391429999997 5.309 115.6189579 3.446 109.2573334 3.445 137.80027449999997 3.954 109.40887910000001 3.235 173.89565990000003 4.165 100.87229300000001 4.171 154.0283985 3.258 147.0895556 5.43 99.909921 3.193 98.70498669999999 4.123 140.16083089999998 3.354 114.47881250000003 3.33 186.15542349999998 11.026 190.8412974 3.976 194.31772629999995 12.948)
Error minima by case: (29.7031 1 2.0 1 0.0 0 48.7031 1 0.0 0 0.647 1 0.081 9 0.0 0 0.0 0 1.0721 1 1.4344 1 2.0 1 1.6978 1 2.0 1 13.7031 2 0.0 0 6.2969 1 3.1394 1 0.0 0 0.0 0 3.8606 1 0.5656 1 32.7031 1 32.7031 1 41.7031 2)
Average genome size in population (length): 53.483
Average program size in population (points): 54.483
Average percent parens in population: 0.019
Minimum age in population: 110.4042521197025
Maximum age in population: 115.3389098783631
Average age in population: 113.4147659268914
Median age in population: 113.4974751470457
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 9
Genome diversity (% unique Plush genomes):	 0.765
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 9
Syntactic diversity (% unique Push programs):	 0.765
Total error diversity:				 0.073
Error (vector) diversity:			 0.08
Behavioral diversity:				 0.08
--- Run Statistics ---
Number of program evaluations used so far: 80000
Number of point (instruction) evaluations so far: 105600763
--- Timings ---
Current time: 1529615697620 milliseconds
Total Time:         247.7 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:        88.2 seconds, 35.6%
Fitness Testing:    126.8 seconds, 51.2%
Report:              32.6 seconds, 13.2%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 79
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 80
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 80
;;******************************
;; -*- Number IO problem report - generation 80
Test total error for best: 59460.0
Test mean error for best: 29.73000
;;------------------------------
Outputs of best individual on training cases:
Correct output: 150.3639690164 | Program output: 45.3639690164 
Correct output: -129.2046261   | Program output: -114.2046261  
Correct output: 43.6336388837  | Program output: 37.6336388837 
Correct output: 168.6824809869 | Program output: 44.6824809869 
Correct output: -24.6347316794 | Program output: -27.6347316794
Correct output: 39.9291320135  | Program output: 17.9291320135 
Correct output: -20.9190282536 | Program output: 23.0809717464 
Correct output: 61.9263871894  | Program output: 58.9263871894 
Correct output: -28.8395473609 | Program output: -23.8395473609
Correct output: -39.146556962  | Program output: -0.146556962  
Correct output: -134.9331989268 | Program output: -111.9331989268
Correct output: -126.4496738486 | Program output: -110.4496738486
Correct output: -51.218440095  | Program output: -102.218440095
Correct output: 45.5895106217  | Program output: 26.5895106217 
Correct output: 136.6637618296 | Program output: 47.6637618296 
Correct output: -104.5625509424 | Program output: -97.5625509424
Correct output: 80.9125656746  | Program output: 11.9125656746 
Correct output: -63.4657032446 | Program output: -0.4657032446 
Correct output: -52.106433034  | Program output: -44.106433034 
Correct output: -99.9152304515 | Program output: -104.9152304515
Correct output: -78.2834351958 | Program output: -22.2834351958
Correct output: -64.2911152024 | Program output: -39.2911152024
Correct output: 93.5722006381  | Program output: -14.4277993619
Correct output: 141.452540764  | Program output: 33.452540764  
Correct output: 102.2088941323 | Program output: -14.7911058677
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_flush} {:instruction in1} {:instruction integer_yank} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_div} {:instruction integer_dup_items} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_div} {:instruction float_dec} {:instruction integer_dup_items} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_dup_items} {:instruction float_dec} {:instruction float_dec} {:instruction integer_div} {:instruction integer_pop} {:instruction float_dec} {:instruction integer_dup_items} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_max} {:instruction integer_dup_times} {:instruction integer_dup_items} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction print_float} {:instruction float_dec} {:instruction float_cos} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_yankdup} {:instruction print_float} {:instruction float_rot} {:instruction integer_dup_items})
Best program: (float_flush in1 integer_yank float_dec float_dec float_dec float_dec float_dec integer_div integer_dup_items float_dec float_dec float_dec float_dec float_dec integer_div float_dec integer_dup_items float_dec float_dec float_dec integer_dup_items float_dec float_dec integer_div integer_pop float_dec integer_dup_items float_dec float_dec float_dec float_dec float_max integer_dup_times integer_dup_items float_dec float_dec float_dec float_dec float_dec float_dec print_float float_dec float_cos float_dec float_dec float_dec float_dec integer_yankdup print_float float_rot integer_dup_items)
Errors: [105.0 2 15.0 2 6.0 2 124.0 3 3.0 1 22.0 2 44.0 11 3.0 2 5.0 1 39.0 2 23.0 2 16.0 2 51.0 3 19.0 2 89.0 3 7.0 3 69.0 2 63.0 2 8.0 2 5.0 3 56.0 2 25.0 2 108.0 11 108.0 3 117.0 13]
Total: 1213.0
Mean: 24.26
Genome size: 52
Size: 53
Percent parens: 0.019
--- Population Statistics ---
Average total errors in population: 2724.6816805
Median total errors in population: 1213.0
Error averages by case: (161.07671440000001 3.276 79.47299139999998 2.804 68.3515945 2.902 178.8179332 3.881 63.5670421 2.168 82.28671300000002 2.929 101.83303679999997 11.258 66.52611039999998 2.853 65.74056030000001 2.177 97.86865649999999 5.07 86.90195409999998 3.086 80.30509459999998 3.065 109.00006489999997 3.644 79.7781855 2.932 146.12773149999995 3.897 71.56961229999999 3.845 126.22204319999996 2.982 119.3921336 5.152 69.75421699999997 2.885 69.15247840000002 3.781 113.5551614 3.035 85.19258680000002 2.999 161.0647405 10.9 163.51804890000005 3.726 169.4972752 12.862)
Error minima by case: (78.0 1 1.0 1 0.0 0 89.7539 2 0.0 0 1.0 1 0.3738 8 0.0 0 0.0 0 2.5257 1 7.0 1 0.0 0 21.4002 1 0.0 0 62.0 1 0.0 0 42.0 1 15.8669 1 0.0 0 0.0 0 1.0491 1 9.0 1 37.488 1 81.0 1 19.8482 1)
Average genome size in population (length): 53.447
Average program size in population (points): 54.447
Average percent parens in population: 0.019
Minimum age in population: 111.4042521197025
Maximum age in population: 116.7508911123026
Average age in population: 114.8098315654135
Median age in population: 114.8462362035587
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 12
Genome diversity (% unique Plush genomes):	 0.746
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 12
Syntactic diversity (% unique Push programs):	 0.746
Total error diversity:				 0.074
Error (vector) diversity:			 0.078
Behavioral diversity:				 0.078
--- Run Statistics ---
Number of program evaluations used so far: 81000
Number of point (instruction) evaluations so far: 106936963
--- Timings ---
Current time: 1529615700622 milliseconds
Total Time:         250.7 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:        89.3 seconds, 35.6%
Fitness Testing:    128.3 seconds, 51.2%
Report:              33.0 seconds, 13.2%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 80
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 81
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 81
;;******************************
;; -*- Number IO problem report - generation 81
Test total error for best: 59460.0
Test mean error for best: 29.73000
;;------------------------------
Outputs of best individual on training cases:
Correct output: 150.3639690164 | Program output: 45.3639690164 
Correct output: -129.2046261   | Program output: -114.2046261  
Correct output: 43.6336388837  | Program output: 37.6336388837 
Correct output: 168.6824809869 | Program output: 44.6824809869 
Correct output: -24.6347316794 | Program output: -27.6347316794
Correct output: 39.9291320135  | Program output: 17.9291320135 
Correct output: -20.9190282536 | Program output: 23.0809717464 
Correct output: 61.9263871894  | Program output: 58.9263871894 
Correct output: -28.8395473609 | Program output: -23.8395473609
Correct output: -39.146556962  | Program output: -0.146556962  
Correct output: -134.9331989268 | Program output: -111.9331989268
Correct output: -126.4496738486 | Program output: -110.4496738486
Correct output: -51.218440095  | Program output: -102.218440095
Correct output: 45.5895106217  | Program output: 26.5895106217 
Correct output: 136.6637618296 | Program output: 47.6637618296 
Correct output: -104.5625509424 | Program output: -97.5625509424
Correct output: 80.9125656746  | Program output: 11.9125656746 
Correct output: -63.4657032446 | Program output: -0.4657032446 
Correct output: -52.106433034  | Program output: -44.106433034 
Correct output: -99.9152304515 | Program output: -104.9152304515
Correct output: -78.2834351958 | Program output: -22.2834351958
Correct output: -64.2911152024 | Program output: -39.2911152024
Correct output: 93.5722006381  | Program output: -14.4277993619
Correct output: 141.452540764  | Program output: 33.452540764  
Correct output: 102.2088941323 | Program output: -14.7911058677
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_inc} {:instruction float_yank} {:instruction in1} {:instruction integer_dup_times} {:instruction float_div} {:instruction float_add} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_yankdup} {:instruction float_dec} {:instruction float_dec} {:instruction integer_div} {:instruction integer_dup_items} {:instruction float_dec} {:instruction float_dec} {:instruction integer_div} {:instruction integer_yank} {:instruction float_dec} {:instruction integer_swap} {:instruction float_dec} {:instruction float_dec} {:instruction in1} {:instruction float_flush} {:instruction in1} {:instruction integer_shove} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_pop} {:instruction integer_dup_items} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_yankdup} {:instruction integer_div} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_dup_items} {:instruction float_dec} {:instruction float_dec} {:instruction integer_div} {:instruction float_sub} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_div} {:instruction integer_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_div} {:instruction integer_dup_times} {:instruction integer_min} {:instruction float_dec} {:instruction float_dec} {:instruction integer_div} {:instruction integer_dup_times} {:instruction integer_dup_items} {:instruction float_dec} {:instruction float_dec} {:instruction integer_div} {:instruction print_float} {:instruction float_rot})
Best program: (float_inc float_yank in1 integer_dup_times float_div float_add float_dec float_dec float_dec float_dec integer_yankdup float_dec float_dec integer_div integer_dup_items float_dec float_dec integer_div integer_yank float_dec integer_swap float_dec float_dec in1 float_flush in1 integer_shove float_dec float_dec float_dec float_dec float_dec integer_pop integer_dup_items float_dec float_dec float_dec float_dec float_dec float_yankdup integer_div float_dec float_dec float_dec integer_dup_items float_dec float_dec integer_div float_sub float_dec float_dec float_dec float_dec integer_div integer_dec float_dec float_dec float_dec float_dec integer_div integer_dup_times integer_min float_dec float_dec integer_div integer_dup_times integer_dup_items float_dec float_dec integer_div print_float float_rot)
Errors: [105.0 2 15.0 2 6.0 2 124.0 3 3.0 1 22.0 2 44.0 11 3.0 2 5.0 1 39.0 2 23.0 2 16.0 2 51.0 3 19.0 2 89.0 3 7.0 3 69.0 2 63.0 2 8.0 2 5.0 3 56.0 2 25.0 2 108.0 11 108.0 3 117.0 13]
Total: 1213.0
Mean: 24.26
Genome size: 72
Size: 73
Percent parens: 0.014
--- Population Statistics ---
Average total errors in population: 2917.7052506
Median total errors in population: 1213.0
Error averages by case: (168.4396934 3.416 86.73327979999996 2.933 76.67580540000002 3.015 186.00219739999994 3.997 71.7560573 2.306 90.40673049999998 3.056 109.39232719999998 11.297 74.95511569999996 2.971 73.89071660000003 2.361 104.88597869999995 5.125 94.0905854 3.222 87.52175529999998 3.206 115.80940939999998 3.757 87.97039380000004 3.073 153.5968215 4.005 78.8300775 3.958 133.77051379999995 3.103 127.1453619 5.217 77.51054490000001 2.997 76.58105200000004 3.907 120.85409120000001 3.202 92.8597705 3.122 169.67498559999996 10.943 170.80761340000004 3.844 176.6293724 12.882)
Error minima by case: (20.9524 1 0.0 0 0.0 0 41.1608 1 0.0 0 0.0 0 0.081 7 0.0 0 0.0 0 12.3072 1 2.6252 1 1.0 1 24.0 1 1.0 1 1.418 1 0.0 0 6.1357 1 11.8143 1 0.0 0 0.0 0 3.0034 1 0.6252 1 6.5239 1 35.2205 1 15.1606 1)
Average genome size in population (length): 53.323
Average program size in population (points): 54.323
Average percent parens in population: 0.019
Minimum age in population: 113.367046843568
Maximum age in population: 118.1371768628274
Average age in population: 116.236364781571
Median age in population: 116.274652314509
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 14
Genome diversity (% unique Plush genomes):	 0.726
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 14
Syntactic diversity (% unique Push programs):	 0.726
Total error diversity:				 0.079
Error (vector) diversity:			 0.083
Behavioral diversity:				 0.083
--- Run Statistics ---
Number of program evaluations used so far: 82000
Number of point (instruction) evaluations so far: 108270038
--- Timings ---
Current time: 1529615703785 milliseconds
Total Time:         253.7 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:        90.3 seconds, 35.6%
Fitness Testing:    129.9 seconds, 51.2%
Report:              33.4 seconds, 13.2%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 81
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 82
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 82
;;******************************
;; -*- Number IO problem report - generation 82
Test total error for best: 59460.0
Test mean error for best: 29.73000
;;------------------------------
Outputs of best individual on training cases:
Correct output: 150.3639690164 | Program output: 45.3639690164 
Correct output: -129.2046261   | Program output: -114.2046261  
Correct output: 43.6336388837  | Program output: 37.6336388837 
Correct output: 168.6824809869 | Program output: 44.6824809869 
Correct output: -24.6347316794 | Program output: -27.6347316794
Correct output: 39.9291320135  | Program output: 17.9291320135 
Correct output: -20.9190282536 | Program output: 23.0809717464 
Correct output: 61.9263871894  | Program output: 58.9263871894 
Correct output: -28.8395473609 | Program output: -23.8395473609
Correct output: -39.146556962  | Program output: -0.146556962  
Correct output: -134.9331989268 | Program output: -111.9331989268
Correct output: -126.4496738486 | Program output: -110.4496738486
Correct output: -51.218440095  | Program output: -102.218440095
Correct output: 45.5895106217  | Program output: 26.5895106217 
Correct output: 136.6637618296 | Program output: 47.6637618296 
Correct output: -104.5625509424 | Program output: -97.5625509424
Correct output: 80.9125656746  | Program output: 11.9125656746 
Correct output: -63.4657032446 | Program output: -0.4657032446 
Correct output: -52.106433034  | Program output: -44.106433034 
Correct output: -99.9152304515 | Program output: -104.9152304515
Correct output: -78.2834351958 | Program output: -22.2834351958
Correct output: -64.2911152024 | Program output: -39.2911152024
Correct output: 93.5722006381  | Program output: -14.4277993619
Correct output: 141.452540764  | Program output: 33.452540764  
Correct output: 102.2088941323 | Program output: -14.7911058677
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_inc} {:instruction float_inc} {:instruction float_flush} {:instruction in1} {:instruction integer_yank} {:instruction float_div} {:instruction float_add} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_dup_items} {:instruction float_dec} {:instruction float_dec} {:instruction integer_flush} {:instruction integer_rot} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_dup_items} {:instruction float_mult} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_div} {:instruction integer_yank} {:instruction integer_dup_times} {:instruction integer_dup_items} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_div} {:instruction integer_dup_times} {:instruction integer_dup_items} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_swap} {:instruction print_float} {:instruction float_rot})
Best program: (float_inc float_inc float_flush in1 integer_yank float_div float_add float_dec float_dec float_dec float_dec integer_dup_items float_dec float_dec integer_flush integer_rot float_dec float_dec float_dec float_dec float_dec integer_dup_items float_mult float_dec float_dec float_dec float_dec float_dec float_dec float_dec integer_div integer_yank integer_dup_times integer_dup_items float_dec float_dec float_dec integer_div integer_dup_times integer_dup_items float_dec float_dec float_dec float_dec float_dec float_dec integer_swap print_float float_rot)
Errors: [105.0 2 15.0 2 6.0 2 124.0 3 3.0 1 22.0 2 44.0 11 3.0 2 5.0 1 39.0 2 23.0 2 16.0 2 51.0 3 19.0 2 89.0 3 7.0 3 69.0 2 63.0 2 8.0 2 5.0 3 56.0 2 25.0 2 108.0 11 108.0 3 117.0 13]
Total: 1213.0
Mean: 24.26
Genome size: 49
Size: 50
Percent parens: 0.020
--- Population Statistics ---
Average total errors in population: 2668.2128345999995
Median total errors in population: 1213.0
Error averages by case: (159.4896951 3.198 75.85295889999999 2.765 65.91208180000001 2.782 177.16402709999997 3.786 61.63614660000001 2.064 80.15666390000001 2.838 100.19343520000001 11.241 63.854588699999994 2.746 63.604651100000005 2.086 95.35255860000001 4.941 83.3190765 3.006 76.70722309999998 3.013 107.28406899999999 3.605 77.5528101 2.842 144.50281389999998 3.78 67.98994569999998 3.756 124.9919328 2.85 117.9436316 5.031 67.21230460000001 2.804 65.83036870000002 3.742 111.7864924 2.931 82.86524870000001 2.909 160.13701319999996 10.923 162.0639971 3.638 168.6121002 12.92)
Error minima by case: (9.3618 1 2.0 1 0.0 0 28.3618 1 0.0 0 1.0 1 2.1349 8 0.0 0 0.0 0 12.9976 1 6.0 1 1.0 1 4.6873 1 0.0 0 6.6382 1 0.0 0 13.3127 1 5.045 1 0.0 0 0.0 0 19.8627 1 5.8704 1 12.3618 1 12.3618 1 21.3618 1)
Average genome size in population (length): 53.005
Average program size in population (points): 54.005
Average percent parens in population: 0.019
Minimum age in population: 114.7404751420255
Maximum age in population: 119.5951776439317
Average age in population: 117.6476627967729
Median age in population: 117.7020880965735
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 14
Genome diversity (% unique Plush genomes):	 0.741
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 14
Syntactic diversity (% unique Push programs):	 0.741
Total error diversity:				 0.065
Error (vector) diversity:			 0.07
Behavioral diversity:				 0.071
--- Run Statistics ---
Number of program evaluations used so far: 83000
Number of point (instruction) evaluations so far: 109595213
--- Timings ---
Current time: 1529615706843 milliseconds
Total Time:         256.9 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:        91.4 seconds, 35.6%
Fitness Testing:    131.5 seconds, 51.2%
Report:              33.9 seconds, 13.2%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 82
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 83
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 83
;;******************************
;; -*- Number IO problem report - generation 83
Test total error for best: 59460.0
Test mean error for best: 29.73000
;;------------------------------
Outputs of best individual on training cases:
Correct output: 150.3639690164 | Program output: 45.3639690164 
Correct output: -129.2046261   | Program output: -114.2046261  
Correct output: 43.6336388837  | Program output: 37.6336388837 
Correct output: 168.6824809869 | Program output: 44.6824809869 
Correct output: -24.6347316794 | Program output: -27.6347316794
Correct output: 39.9291320135  | Program output: 17.9291320135 
Correct output: -20.9190282536 | Program output: 23.0809717464 
Correct output: 61.9263871894  | Program output: 58.9263871894 
Correct output: -28.8395473609 | Program output: -23.8395473609
Correct output: -39.146556962  | Program output: -0.146556962  
Correct output: -134.9331989268 | Program output: -111.9331989268
Correct output: -126.4496738486 | Program output: -110.4496738486
Correct output: -51.218440095  | Program output: -102.218440095
Correct output: 45.5895106217  | Program output: 26.5895106217 
Correct output: 136.6637618296 | Program output: 47.6637618296 
Correct output: -104.5625509424 | Program output: -97.5625509424
Correct output: 80.9125656746  | Program output: 11.9125656746 
Correct output: -63.4657032446 | Program output: -0.4657032446 
Correct output: -52.106433034  | Program output: -44.106433034 
Correct output: -99.9152304515 | Program output: -104.9152304515
Correct output: -78.2834351958 | Program output: -22.2834351958
Correct output: -64.2911152024 | Program output: -39.2911152024
Correct output: 93.5722006381  | Program output: -14.4277993619
Correct output: 141.452540764  | Program output: 33.452540764  
Correct output: 102.2088941323 | Program output: -14.7911058677
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_inc} {:instruction float_flush} {:instruction in1} {:instruction integer_yank} {:instruction float_div} {:instruction print_integer} {:instruction integer_add} {:instruction float_dec} {:instruction tagged_467} {:instruction float_flush} {:instruction integer_add} {:instruction integer_add} {:instruction print_float} {:instruction float_dec} {:instruction in1} {:instruction float_dec} {:instruction integer_dup_times} {:instruction integer_dup_items} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_div} {:instruction tagged_526} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_mult} {:instruction float_dec} {:instruction integer_dup_items} {:instruction float_dec} {:instruction float_dec} {:instruction integer_pop} {:instruction integer_dup_times} {:instruction integer_dup_items} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_dup_items} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_dup_times} {:instruction integer_dup_times} {:instruction integer_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_yankdup} {:instruction print_float} {:instruction float_tan} {:instruction float_dec} {:instruction float_yankdup} {:instruction print_float})
Best program: (float_inc float_flush in1 integer_yank float_div print_integer integer_add float_dec tagged_467 float_flush integer_add integer_add print_float float_dec in1 float_dec integer_dup_times integer_dup_items float_dec float_dec float_dec float_dec float_dec integer_div tagged_526 float_dec float_dec float_dec float_dec float_mult float_dec integer_dup_items float_dec float_dec integer_pop integer_dup_times integer_dup_items float_dec float_dec float_dec float_dec integer_dup_items float_dec float_dec float_dec float_dec integer_dup_times integer_dup_times integer_dec float_dec float_dec float_dec float_dec float_dec float_dec integer_yankdup print_float float_tan float_dec float_yankdup print_float)
Errors: [105.0 2 15.0 2 6.0 2 124.0 3 3.0 1 22.0 2 44.0 11 3.0 2 5.0 1 39.0 2 23.0 2 16.0 2 51.0 3 19.0 2 89.0 3 7.0 3 69.0 2 63.0 2 8.0 2 5.0 3 56.0 2 25.0 2 108.0 11 108.0 3 117.0 13]
Total: 1213.0
Mean: 24.26
Genome size: 61
Size: 62
Percent parens: 0.016
--- Population Statistics ---
Average total errors in population: 3030.695961699999
Median total errors in population: 1213.0
Error averages by case: (172.472378 3.421 91.39370309999998 2.96 80.9670867 3.017 189.9638342 4.007 76.66544259999999 2.318 94.85242769999996 3.068 114.30992449999995 11.309 79.13646539999998 2.981 78.77289259999999 2.358 109.51955419999993 5.203 98.72049869999998 3.261 92.2178623 3.244 120.56677520000002 3.792 92.34235539999999 3.083 157.67564300000004 4.026 83.58962870000002 4.021 137.81315079999996 3.103 131.7293509 5.317 82.79317370000001 3.023 81.16561480000004 3.963 125.85922109999998 3.177 98.0783236 3.162 172.62882389999996 10.99 174.90940010000008 3.855 180.96843049999998 12.925)
Error minima by case: (78.0 1 0.0 0 0.0 0 97.0 2 0.0 0 0.0 0 0.081 8 0.0 0 0.0 0 5.5257 1 8.0 1 1.0 1 18.9547 1 1.0 1 62.0 1 0.0 0 33.6882 1 12.8072 1 0.0 0 0.0 0 19.8072 1 10.0 1 46.3478 2 81.0 1 54.9845 1)
Average genome size in population (length): 52.594
Average program size in population (points): 53.594
Average percent parens in population: 0.019
Minimum age in population: 115.7404751420255
Maximum age in population: 121.315553064441
Average age in population: 119.1096611980017
Median age in population: 119.1448869352333
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 14
Genome diversity (% unique Plush genomes):	 0.747
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 14
Syntactic diversity (% unique Push programs):	 0.747
Total error diversity:				 0.069
Error (vector) diversity:			 0.076
Behavioral diversity:				 0.076
--- Run Statistics ---
Number of program evaluations used so far: 84000
Number of point (instruction) evaluations so far: 110910113
--- Timings ---
Current time: 1529615709872 milliseconds
Total Time:         259.9 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:        92.5 seconds, 35.6%
Fitness Testing:    133.0 seconds, 51.2%
Report:              34.3 seconds, 13.2%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 83
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 84
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 84
;;******************************
;; -*- Number IO problem report - generation 84
Test total error for best: 59460.0
Test mean error for best: 29.73000
;;------------------------------
Outputs of best individual on training cases:
Correct output: 150.3639690164 | Program output: 45.3639690164 
Correct output: -129.2046261   | Program output: -114.2046261  
Correct output: 43.6336388837  | Program output: 37.6336388837 
Correct output: 168.6824809869 | Program output: 44.6824809869 
Correct output: -24.6347316794 | Program output: -27.6347316794
Correct output: 39.9291320135  | Program output: 17.9291320135 
Correct output: -20.9190282536 | Program output: 23.0809717464 
Correct output: 61.9263871894  | Program output: 58.9263871894 
Correct output: -28.8395473609 | Program output: -23.8395473609
Correct output: -39.146556962  | Program output: -0.146556962  
Correct output: -134.9331989268 | Program output: -111.9331989268
Correct output: -126.4496738486 | Program output: -110.4496738486
Correct output: -51.218440095  | Program output: -102.218440095
Correct output: 45.5895106217  | Program output: 26.5895106217 
Correct output: 136.6637618296 | Program output: 47.6637618296 
Correct output: -104.5625509424 | Program output: -97.5625509424
Correct output: 80.9125656746  | Program output: 11.9125656746 
Correct output: -63.4657032446 | Program output: -0.4657032446 
Correct output: -52.106433034  | Program output: -44.106433034 
Correct output: -99.9152304515 | Program output: -104.9152304515
Correct output: -78.2834351958 | Program output: -22.2834351958
Correct output: -64.2911152024 | Program output: -39.2911152024
Correct output: 93.5722006381  | Program output: -14.4277993619
Correct output: 141.452540764  | Program output: 33.452540764  
Correct output: 102.2088941323 | Program output: -14.7911058677
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_inc} {:instruction float_yank} {:instruction in1} {:instruction integer_dup_times} {:instruction float_div} {:instruction float_add} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction print_integer} {:instruction float_dec} {:instruction tagged_601} {:instruction float_flush} {:instruction integer_div} {:instruction integer_add} {:instruction float_mod} {:instruction float_dec} {:instruction in1} {:instruction float_dec} {:instruction integer_dup_times} {:instruction integer_dup_items} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_div} {:instruction tagged_526} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_dup_items} {:instruction float_dec} {:instruction float_dec} {:instruction integer_dup_items} {:instruction float_sub} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_div} {:instruction float_dec} {:instruction float_dec} {:instruction integer_dup_items} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_div} {:instruction integer_dup_times} {:instruction float_dec} {:instruction float_dec} {:instruction integer_div} {:instruction integer_dup_times} {:instruction integer_dup_items} {:instruction float_dec} {:instruction float_dec} {:instruction integer_div} {:instruction print_float} {:instruction float_rot})
Best program: (float_inc float_yank in1 integer_dup_times float_div float_add float_dec float_dec float_dec print_integer float_dec tagged_601 float_flush integer_div integer_add float_mod float_dec in1 float_dec integer_dup_times integer_dup_items float_dec float_dec float_dec float_dec float_dec integer_div tagged_526 float_dec float_dec float_dec float_dec float_dec integer_dup_items float_dec float_dec integer_dup_items float_sub float_dec float_dec float_dec float_dec integer_div float_dec float_dec integer_dup_items float_dec float_dec float_dec float_dec integer_div integer_dup_times float_dec float_dec integer_div integer_dup_times integer_dup_items float_dec float_dec integer_div print_float float_rot)
Errors: [105.0 2 15.0 2 6.0 2 124.0 3 3.0 1 22.0 2 44.0 11 3.0 2 5.0 1 39.0 2 23.0 2 16.0 2 51.0 3 19.0 2 89.0 3 7.0 3 69.0 2 63.0 2 8.0 2 5.0 3 56.0 2 25.0 2 108.0 11 108.0 3 117.0 13]
Total: 1213.0
Mean: 24.26
Genome size: 62
Size: 63
Percent parens: 0.016
--- Population Statistics ---
Average total errors in population: 3030.927626399999
Median total errors in population: 1213.0
Error averages by case: (172.77053910000004 3.44 91.99498609999996 2.973 81.32026360000002 3.069 190.2709251 4.058 76.00713179999998 2.397 95.130936 3.107 114.09692309999998 11.274 79.55051229999998 3.032 77.7652276 2.364 110.2599405 4.828 99.3169068 3.287 92.7854025 3.288 120.94383809999998 3.857 92.63258080000003 3.114 158.03887469999998 4.074 84.11687420000001 4.007 138.02018680000003 3.132 131.5416496 4.927 82.0877712 3.059 82.04420970000002 3.972 124.87810699999997 3.221 97.4168394 3.179 171.5398988 10.957 175.10811720000007 3.92 179.8659844 12.887)
Error minima by case: (55.6575 1 3.0 1 0.0 0 74.6575 2 0.0 0 2.0 1 1.6614 8 0.0 0 0.0 0 2.7269 1 11.0 1 4.0 1 1.6575 1 0.0 0 39.6575 1 0.0 0 7.9522 1 27.352 1 0.0 0 0.0 0 42.5669 1 13.0 1 20.6119 1 58.6575 1 19.8482 1)
Average genome size in population (length): 52.457
Average program size in population (points): 53.457
Average percent parens in population: 0.019
Minimum age in population: 117.8137662576941
Maximum age in population: 122.6402779103917
Average age in population: 120.5352362198642
Median age in population: 120.580895734808
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 19
Genome diversity (% unique Plush genomes):	 0.732
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 19
Syntactic diversity (% unique Push programs):	 0.732
Total error diversity:				 0.07
Error (vector) diversity:			 0.074
Behavioral diversity:				 0.074
--- Run Statistics ---
Number of program evaluations used so far: 85000
Number of point (instruction) evaluations so far: 112221538
--- Timings ---
Current time: 1529615712828 milliseconds
Total Time:         262.9 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:        93.5 seconds, 35.6%
Fitness Testing:    134.5 seconds, 51.2%
Report:              34.7 seconds, 13.2%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 84
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 85
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 85
;;******************************
;; -*- Number IO problem report - generation 85
Test total error for best: 59460.0
Test mean error for best: 29.73000
;;------------------------------
Outputs of best individual on training cases:
Correct output: 150.3639690164 | Program output: 45.3639690164 
Correct output: -129.2046261   | Program output: -114.2046261  
Correct output: 43.6336388837  | Program output: 37.6336388837 
Correct output: 168.6824809869 | Program output: 44.6824809869 
Correct output: -24.6347316794 | Program output: -27.6347316794
Correct output: 39.9291320135  | Program output: 17.9291320135 
Correct output: -20.9190282536 | Program output: 23.0809717464 
Correct output: 61.9263871894  | Program output: 58.9263871894 
Correct output: -28.8395473609 | Program output: -23.8395473609
Correct output: -39.146556962  | Program output: -0.146556962  
Correct output: -134.9331989268 | Program output: -111.9331989268
Correct output: -126.4496738486 | Program output: -110.4496738486
Correct output: -51.218440095  | Program output: -102.218440095
Correct output: 45.5895106217  | Program output: 26.5895106217 
Correct output: 136.6637618296 | Program output: 47.6637618296 
Correct output: -104.5625509424 | Program output: -97.5625509424
Correct output: 80.9125656746  | Program output: 11.9125656746 
Correct output: -63.4657032446 | Program output: -0.4657032446 
Correct output: -52.106433034  | Program output: -44.106433034 
Correct output: -99.9152304515 | Program output: -104.9152304515
Correct output: -78.2834351958 | Program output: -22.2834351958
Correct output: -64.2911152024 | Program output: -39.2911152024
Correct output: 93.5722006381  | Program output: -14.4277993619
Correct output: 141.452540764  | Program output: 33.452540764  
Correct output: 102.2088941323 | Program output: -14.7911058677
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction in1} {:instruction integer_yank} {:instruction float_dec} {:instruction float_dec} {:instruction integer_yank} {:instruction float_dec} {:instruction integer_yankdup} {:instruction float_dec} {:instruction float_dec} {:instruction integer_div} {:instruction float_dec} {:instruction integer_div} {:instruction float_sub} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_div} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_div} {:instruction float_sub} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_div} {:instruction integer_yank} {:instruction integer_dup} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_dup_items} {:instruction float_dec} {:instruction integer_div} {:instruction float_dec} {:instruction integer_dup_times} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_div} {:instruction print_float} {:instruction float_dec} {:instruction float_dec} {:instruction integer_div} {:instruction integer_swap} {:instruction float_rot} {:instruction integer_stackdepth} {:instruction integer_dup_items} {:instruction float_cos} {:instruction float_dec} {:instruction 54} {:instruction float_dec} {:instruction integer_div})
Best program: (in1 integer_yank float_dec float_dec integer_yank float_dec integer_yankdup float_dec float_dec integer_div float_dec integer_div float_sub float_dec float_dec float_dec float_dec integer_div float_dec float_dec float_dec integer_div float_sub float_dec float_dec float_dec float_dec integer_div integer_yank integer_dup float_dec float_dec float_dec float_dec integer_dup_items float_dec integer_div float_dec integer_dup_times float_dec float_dec float_dec float_dec integer_div print_float float_dec float_dec integer_div integer_swap float_rot integer_stackdepth integer_dup_items float_cos float_dec 54 float_dec integer_div)
Errors: [105.0 2 15.0 2 6.0 2 124.0 3 3.0 1 22.0 2 44.0 11 3.0 2 5.0 1 39.0 2 23.0 2 16.0 2 51.0 3 19.0 2 89.0 3 7.0 3 69.0 2 63.0 2 8.0 2 5.0 3 56.0 2 25.0 2 108.0 11 108.0 3 117.0 13]
Total: 1213.0
Mean: 24.26
Genome size: 57
Size: 58
Percent parens: 0.017
--- Population Statistics ---
Average total errors in population: 2949.6728175
Median total errors in population: 1213.0
Error averages by case: (169.59253470000002 3.32 87.8736128 2.857 77.8196072 2.916 187.14352559999998 3.929 73.4818717 2.198 91.8032065 2.977 111.65747879999998 11.285 75.90310909999997 2.879 75.60548299999999 2.199 106.59129669999999 5.18 95.24357010000001 3.135 88.71246060000001 3.14 117.8280307 3.682 89.2376385 2.968 154.79680249999993 3.92 80.08150209999997 3.904 135.29479049999998 3.012 128.7891834 5.266 79.19406330000001 2.94 77.68867990000001 3.838 122.79928819999998 3.052 94.64675 3.039 169.10778209999998 10.918 172.07808530000003 3.752 177.49746419999997 12.899)
Error minima by case: (82.0 1 2.0 1 0.0 0 90.7539 2 0.0 0 1.0 1 2.0381 9 0.0 0 0.0 0 0.6874 1 6.0 1 1.0 1 20.6827 1 0.0 0 66.0 2 0.0 0 46.0 1 8.4355 1 0.0 0 0.0 0 6.3823 1 7.61 1 67.0896 2 85.0 1 81.823 2)
Average genome size in population (length): 51.873
Average program size in population (points): 52.873
Average percent parens in population: 0.019
Minimum age in population: 118.8137662576941
Maximum age in population: 124.0450909780205
Average age in population: 121.9489470630676
Median age in population: 121.9942804823485
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 18
Genome diversity (% unique Plush genomes):	 0.728
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 18
Syntactic diversity (% unique Push programs):	 0.728
Total error diversity:				 0.063
Error (vector) diversity:			 0.068
Behavioral diversity:				 0.069
--- Run Statistics ---
Number of program evaluations used so far: 86000
Number of point (instruction) evaluations so far: 113518363
--- Timings ---
Current time: 1529615715868 milliseconds
Total Time:         265.9 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:        94.5 seconds, 35.6%
Fitness Testing:    136.1 seconds, 51.2%
Report:              35.1 seconds, 13.2%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 85
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 86
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 86
;;******************************
;; -*- Number IO problem report - generation 86
Test total error for best: 59460.0
Test mean error for best: 29.73000
;;------------------------------
Outputs of best individual on training cases:
Correct output: 150.3639690164 | Program output: 45.3639690164 
Correct output: -129.2046261   | Program output: -114.2046261  
Correct output: 43.6336388837  | Program output: 37.6336388837 
Correct output: 168.6824809869 | Program output: 44.6824809869 
Correct output: -24.6347316794 | Program output: -27.6347316794
Correct output: 39.9291320135  | Program output: 17.9291320135 
Correct output: -20.9190282536 | Program output: 23.0809717464 
Correct output: 61.9263871894  | Program output: 58.9263871894 
Correct output: -28.8395473609 | Program output: -23.8395473609
Correct output: -39.146556962  | Program output: -0.146556962  
Correct output: -134.9331989268 | Program output: -111.9331989268
Correct output: -126.4496738486 | Program output: -110.4496738486
Correct output: -51.218440095  | Program output: -102.218440095
Correct output: 45.5895106217  | Program output: 26.5895106217 
Correct output: 136.6637618296 | Program output: 47.6637618296 
Correct output: -104.5625509424 | Program output: -97.5625509424
Correct output: 80.9125656746  | Program output: 11.9125656746 
Correct output: -63.4657032446 | Program output: -0.4657032446 
Correct output: -52.106433034  | Program output: -44.106433034 
Correct output: -99.9152304515 | Program output: -104.9152304515
Correct output: -78.2834351958 | Program output: -22.2834351958
Correct output: -64.2911152024 | Program output: -39.2911152024
Correct output: 93.5722006381  | Program output: -14.4277993619
Correct output: 141.452540764  | Program output: 33.452540764  
Correct output: 102.2088941323 | Program output: -14.7911058677
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_inc} {:instruction float_yank} {:instruction float_mult} {:instruction float_flush} {:instruction float_yankdup} {:instruction integer_add} {:instruction print_float} {:instruction float_dec} {:instruction in1} {:instruction integer_yank} {:instruction integer_dup_items} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_dup} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_div} {:instruction integer_dup} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_div} {:instruction float_dec} {:instruction integer_dup_items} {:instruction float_dec} {:instruction float_dec} {:instruction integer_yank} {:instruction integer_dup_times} {:instruction integer_dup_items} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_yankdup} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_div} {:instruction integer_yank} {:instruction integer_dup} {:instruction integer_max} {:instruction float_dec} {:instruction integer_div} {:instruction print_float})
Best program: (float_inc float_yank float_mult float_flush float_yankdup integer_add print_float float_dec in1 integer_yank integer_dup_items float_dec float_dec float_dec float_dec integer_dup float_dec float_dec float_dec float_dec integer_div integer_dup float_dec float_dec float_dec float_dec integer_div float_dec integer_dup_items float_dec float_dec integer_yank integer_dup_times integer_dup_items float_dec float_dec float_dec float_dec float_yankdup float_dec float_dec float_dec float_dec float_dec float_dec float_dec integer_div integer_yank integer_dup integer_max float_dec integer_div print_float)
Errors: [105.0 2 15.0 2 6.0 2 124.0 3 3.0 1 22.0 2 44.0 11 3.0 2 5.0 1 39.0 2 23.0 2 16.0 2 51.0 3 19.0 2 89.0 3 7.0 3 69.0 2 63.0 2 8.0 2 5.0 3 56.0 2 25.0 2 108.0 11 108.0 3 117.0 13]
Total: 1213.0
Mean: 24.26
Genome size: 53
Size: 54
Percent parens: 0.019
--- Population Statistics ---
Average total errors in population: 3183.9964057
Median total errors in population: 1213.0
Error averages by case: (177.94574900000003 3.541 99.01179020000001 3.054 87.26875650000002 3.117 195.3995539 4.126 81.63542759999999 2.423 100.88473259999996 3.177 119.98470709999998 11.317 85.60150309999997 3.064 83.83524060000005 2.453 116.61589419999997 5.486 106.25623170000003 3.4 99.76939309999997 3.376 127.24494669999997 3.874 98.48674230000002 3.191 163.32358480000005 4.147 91.15641550000002 4.107 143.33592910000002 3.229 137.7298509 5.592 88.56378320000003 3.132 88.72078890000003 4.042 130.60432640000005 3.289 103.54667510000003 3.268 177.49425159999996 10.991 180.28219870000015 3.954 185.02493289999995 12.923)
Error minima by case: (5.0 1 2.0 1 0.0 0 24.0 2 0.0 0 0.0 0 0.018 7 0.0 0 0.0 0 9.0627 1 6.9373 1 3.0 1 5.8333 1 2.0 1 11.0 1 0.0 0 23.8333 1 33.0627 1 0.0 0 0.0 0 26.0627 1 4.9373 1 12.3436 2 8.0 1 4.5696 1)
Average genome size in population (length): 51.672
Average program size in population (points): 52.672
Average percent parens in population: 0.019
Minimum age in population: 121.1184578513682
Maximum age in population: 125.296288925135
Average age in population: 123.3714209436853
Median age in population: 123.4025383878822
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 14
Genome diversity (% unique Plush genomes):	 0.746
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 14
Syntactic diversity (% unique Push programs):	 0.746
Total error diversity:				 0.082
Error (vector) diversity:			 0.088
Behavioral diversity:				 0.089
--- Run Statistics ---
Number of program evaluations used so far: 87000
Number of point (instruction) evaluations so far: 114810163
--- Timings ---
Current time: 1529615718913 milliseconds
Total Time:         269.0 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:        95.7 seconds, 35.6%
Fitness Testing:    137.6 seconds, 51.2%
Report:              35.6 seconds, 13.2%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 86
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 87
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 87
;;******************************
;; -*- Number IO problem report - generation 87
Test total error for best: 59460.0
Test mean error for best: 29.73000
;;------------------------------
Outputs of best individual on training cases:
Correct output: 150.3639690164 | Program output: 45.3639690164 
Correct output: -129.2046261   | Program output: -114.2046261  
Correct output: 43.6336388837  | Program output: 37.6336388837 
Correct output: 168.6824809869 | Program output: 44.6824809869 
Correct output: -24.6347316794 | Program output: -27.6347316794
Correct output: 39.9291320135  | Program output: 17.9291320135 
Correct output: -20.9190282536 | Program output: 23.0809717464 
Correct output: 61.9263871894  | Program output: 58.9263871894 
Correct output: -28.8395473609 | Program output: -23.8395473609
Correct output: -39.146556962  | Program output: -0.146556962  
Correct output: -134.9331989268 | Program output: -111.9331989268
Correct output: -126.4496738486 | Program output: -110.4496738486
Correct output: -51.218440095  | Program output: -102.218440095
Correct output: 45.5895106217  | Program output: 26.5895106217 
Correct output: 136.6637618296 | Program output: 47.6637618296 
Correct output: -104.5625509424 | Program output: -97.5625509424
Correct output: 80.9125656746  | Program output: 11.9125656746 
Correct output: -63.4657032446 | Program output: -0.4657032446 
Correct output: -52.106433034  | Program output: -44.106433034 
Correct output: -99.9152304515 | Program output: -104.9152304515
Correct output: -78.2834351958 | Program output: -22.2834351958
Correct output: -64.2911152024 | Program output: -39.2911152024
Correct output: 93.5722006381  | Program output: -14.4277993619
Correct output: 141.452540764  | Program output: 33.452540764  
Correct output: 102.2088941323 | Program output: -14.7911058677
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_inc} {:instruction in1} {:instruction integer_yank} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_yankdup} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_dup_items} {:instruction float_dec} {:instruction float_dec} {:instruction integer_div} {:instruction integer_dup_items} {:instruction float_dec} {:instruction integer_yank} {:instruction integer_dup_times} {:instruction integer_dup_items} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_flush} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_stackdepth} {:instruction integer_dup_times} {:instruction integer_rot} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_div} {:instruction print_float} {:instruction integer_div} {:instruction print_float} {:instruction integer_yankdup} {:instruction integer_fromfloat} {:instruction float_rot} {:instruction integer_dup_items} {:instruction float_cos} {:instruction float_dec} {:instruction integer_div} {:instruction print_float} {:instruction integer_div} {:instruction print_float} {:instruction integer_yankdup} {:instruction integer_dup_items} {:instruction float_cos} {:instruction integer_mod} {:instruction float_add} {:instruction float_stackdepth})
Best program: (float_inc in1 integer_yank float_dec float_dec float_dec float_dec integer_yankdup float_dec float_dec float_dec float_dec float_dec float_dec integer_dup_items float_dec float_dec integer_div integer_dup_items float_dec integer_yank integer_dup_times integer_dup_items float_dec float_dec float_dec float_dec integer_flush float_dec float_dec float_dec float_dec float_stackdepth integer_dup_times integer_rot float_dec float_dec float_dec float_dec float_dec float_dec integer_div print_float integer_div print_float integer_yankdup integer_fromfloat float_rot integer_dup_items float_cos float_dec integer_div print_float integer_div print_float integer_yankdup integer_dup_items float_cos integer_mod float_add float_stackdepth)
Errors: [105.0 2 15.0 2 6.0 2 124.0 3 3.0 1 22.0 2 44.0 11 3.0 2 5.0 1 39.0 2 23.0 2 16.0 2 51.0 3 19.0 2 89.0 3 7.0 3 69.0 2 63.0 2 8.0 2 5.0 3 56.0 2 25.0 2 108.0 11 108.0 3 117.0 13]
Total: 1213.0
Mean: 24.26
Genome size: 61
Size: 62
Percent parens: 0.016
--- Population Statistics ---
Average total errors in population: 2877.2250035999996
Median total errors in population: 1213.0
Error averages by case: (167.28793519999996 3.218 84.64892349999998 2.804 74.664531 2.835 184.86198609999997 3.842 69.70000970000001 2.141 88.7140036 2.881 109.11302849999998 11.252 72.65047849999998 2.779 71.8199935 2.174 104.06293879999997 5.019 92.0589173 3.058 85.51109969999999 3.072 116.0810366 3.654 86.11037960000003 2.907 152.4528378 3.867 76.9418293 3.811 133.20748619999995 2.935 126.3498953 5.113 75.5005563 2.855 74.6440178 3.789 119.1202819 3.029 90.89987280000001 2.981 167.89408109999997 10.933 169.8528948 3.69 175.5369887 12.9)
Error minima by case: (5.6047 1 2.0 1 0.0 0 13.3953 2 0.0 0 1.0 1 0.919 8 0.0 0 0.0 0 11.8065 1 10.0 1 3.0 1 20.4975 1 1.0 1 21.6047 1 0.0 0 31.607 1 8.2503 1 0.0 0 0.0 0 6.5675 1 3.2911 1 2.6047 1 2.6047 1 6.3953 1)
Average genome size in population (length): 52.019
Average program size in population (points): 53.019
Average percent parens in population: 0.019
Minimum age in population: 122.2770820742931
Maximum age in population: 126.8255739142434
Average age in population: 124.7910957243994
Median age in population: 124.8574205996704
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 12
Genome diversity (% unique Plush genomes):	 0.713
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 12
Syntactic diversity (% unique Push programs):	 0.713
Total error diversity:				 0.065
Error (vector) diversity:			 0.07
Behavioral diversity:				 0.07
--- Run Statistics ---
Number of program evaluations used so far: 88000
Number of point (instruction) evaluations so far: 116110638
--- Timings ---
Current time: 1529615721937 milliseconds
Total Time:         272.0 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:        96.8 seconds, 35.6%
Fitness Testing:    139.1 seconds, 51.2%
Report:              35.9 seconds, 13.2%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 87
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 88
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 88
;;******************************
;; -*- Number IO problem report - generation 88
Test total error for best: 59460.0
Test mean error for best: 29.73000
;;------------------------------
Outputs of best individual on training cases:
Correct output: 150.3639690164 | Program output: 45.3639690164 
Correct output: -129.2046261   | Program output: -114.2046261  
Correct output: 43.6336388837  | Program output: 37.6336388837 
Correct output: 168.6824809869 | Program output: 44.6824809869 
Correct output: -24.6347316794 | Program output: -27.6347316794
Correct output: 39.9291320135  | Program output: 17.9291320135 
Correct output: -20.9190282536 | Program output: 23.0809717464 
Correct output: 61.9263871894  | Program output: 58.9263871894 
Correct output: -28.8395473609 | Program output: -23.8395473609
Correct output: -39.146556962  | Program output: -0.146556962  
Correct output: -134.9331989268 | Program output: -111.9331989268
Correct output: -126.4496738486 | Program output: -110.4496738486
Correct output: -51.218440095  | Program output: -102.218440095
Correct output: 45.5895106217  | Program output: 26.5895106217 
Correct output: 136.6637618296 | Program output: 47.6637618296 
Correct output: -104.5625509424 | Program output: -97.5625509424
Correct output: 80.9125656746  | Program output: 11.9125656746 
Correct output: -63.4657032446 | Program output: -0.4657032446 
Correct output: -52.106433034  | Program output: -44.106433034 
Correct output: -99.9152304515 | Program output: -104.9152304515
Correct output: -78.2834351958 | Program output: -22.2834351958
Correct output: -64.2911152024 | Program output: -39.2911152024
Correct output: 93.5722006381  | Program output: -14.4277993619
Correct output: 141.452540764  | Program output: 33.452540764  
Correct output: 102.2088941323 | Program output: -14.7911058677
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_inc} {:instruction float_flush} {:instruction float_div} {:instruction integer_div} {:instruction integer_pop} {:instruction integer_max} {:instruction tagged_517} {:instruction in1} {:instruction float_dec} {:instruction float_dup_items} {:instruction integer_dup_items} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_div} {:instruction float_sub} {:instruction float_dec} {:instruction float_sub} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_div} {:instruction float_dec} {:instruction in2} {:instruction float_dec} {:instruction float_dec} {:instruction integer_mod} {:instruction integer_dup_times} {:instruction tagged_99} {:instruction float_dec} {:instruction float_dec} {:instruction integer_dup_items} {:instruction float_dec} {:instruction float_dec} {:instruction integer_div} {:instruction float_dec} {:instruction integer_dup_items} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_div} {:instruction integer_dup_times} {:instruction integer_dup_items} {:instruction float_dec} {:instruction float_dec} {:instruction integer_div} {:instruction float_rot} {:instruction float_dec} {:instruction float_dec} {:instruction print_float} {:instruction print_float} {:instruction float_rot} {:instruction integer_dup_items} {:instruction float_cos} {:instruction tagged_490} {:instruction integer_stackdepth} {:instruction integer_div})
Best program: (float_inc float_flush float_div integer_div integer_pop integer_max tagged_517 in1 float_dec float_dup_items integer_dup_items float_dec float_dec float_dec float_dec float_dec integer_div float_sub float_dec float_sub float_dec float_dec float_dec float_dec integer_div float_dec in2 float_dec float_dec integer_mod integer_dup_times tagged_99 float_dec float_dec integer_dup_items float_dec float_dec integer_div float_dec integer_dup_items float_dec float_dec float_dec float_dec integer_div integer_dup_times integer_dup_items float_dec float_dec integer_div float_rot float_dec float_dec print_float print_float float_rot integer_dup_items float_cos tagged_490 integer_stackdepth integer_div)
Errors: [105.0 2 15.0 2 6.0 2 124.0 3 3.0 1 22.0 2 44.0 11 3.0 2 5.0 1 39.0 2 23.0 2 16.0 2 51.0 3 19.0 2 89.0 3 7.0 3 69.0 2 63.0 2 8.0 2 5.0 3 56.0 2 25.0 2 108.0 11 108.0 3 117.0 13]
Total: 1213.0
Mean: 24.26
Genome size: 61
Size: 62
Percent parens: 0.016
--- Population Statistics ---
Average total errors in population: 2871.3294505999993
Median total errors in population: 1213.0
Error averages by case: (166.51854680000002 3.259 84.50818209999997 2.818 73.7141281 2.841 184.13700839999998 3.855 70.62942860000001 2.155 87.8916337 2.893 107.95212020000001 11.268 71.6522469 2.795 72.6369988 2.184 103.04961449999996 4.97 91.8946121 3.083 85.35759759999996 3.068 116.09994209999999 3.646 85.2787015 2.909 151.6195284 3.862 76.81560060000001 3.827 132.3510465 2.957 125.4129793 5.065 76.1553327 2.858 74.6091974 3.813 119.82241499999999 3.0 91.63311010000001 2.986 168.19481489999995 10.966 169.07987190000003 3.712 176.58679239999995 12.938)
Error minima by case: (4.0 1 2.0 1 0.0 0 23.0 2 0.0 0 1.6377 1 0.2171 8 0.0 0 0.0 0 10.1466 1 10.0 1 3.0 1 1.298 1 0.0 0 12.0 1 0.0 0 2.733 1 11.9507 1 0.0 0 0.0 0 4.9507 1 12.0 1 9.9267 2 7.0 1 18.5634 1)
Average genome size in population (length): 51.949
Average program size in population (points): 52.949
Average percent parens in population: 0.019
Minimum age in population: 123.9546677278186
Maximum age in population: 128.0603075620709
Average age in population: 126.1469360844883
Median age in population: 126.1865741220107
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 15
Genome diversity (% unique Plush genomes):	 0.728
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 15
Syntactic diversity (% unique Push programs):	 0.728
Total error diversity:				 0.057
Error (vector) diversity:			 0.062
Behavioral diversity:				 0.062
--- Run Statistics ---
Number of program evaluations used so far: 89000
Number of point (instruction) evaluations so far: 117409388
--- Timings ---
Current time: 1529615724986 milliseconds
Total Time:         275.0 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:        97.8 seconds, 35.6%
Fitness Testing:    140.7 seconds, 51.2%
Report:              36.4 seconds, 13.2%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 88
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 89
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 89
;;******************************
;; -*- Number IO problem report - generation 89
Test total error for best: 59460.0
Test mean error for best: 29.73000
;;------------------------------
Outputs of best individual on training cases:
Correct output: 150.3639690164 | Program output: 45.3639690164 
Correct output: -129.2046261   | Program output: -114.2046261  
Correct output: 43.6336388837  | Program output: 37.6336388837 
Correct output: 168.6824809869 | Program output: 44.6824809869 
Correct output: -24.6347316794 | Program output: -27.6347316794
Correct output: 39.9291320135  | Program output: 17.9291320135 
Correct output: -20.9190282536 | Program output: 23.0809717464 
Correct output: 61.9263871894  | Program output: 58.9263871894 
Correct output: -28.8395473609 | Program output: -23.8395473609
Correct output: -39.146556962  | Program output: -0.146556962  
Correct output: -134.9331989268 | Program output: -111.9331989268
Correct output: -126.4496738486 | Program output: -110.4496738486
Correct output: -51.218440095  | Program output: -102.218440095
Correct output: 45.5895106217  | Program output: 26.5895106217 
Correct output: 136.6637618296 | Program output: 47.6637618296 
Correct output: -104.5625509424 | Program output: -97.5625509424
Correct output: 80.9125656746  | Program output: 11.9125656746 
Correct output: -63.4657032446 | Program output: -0.4657032446 
Correct output: -52.106433034  | Program output: -44.106433034 
Correct output: -99.9152304515 | Program output: -104.9152304515
Correct output: -78.2834351958 | Program output: -22.2834351958
Correct output: -64.2911152024 | Program output: -39.2911152024
Correct output: 93.5722006381  | Program output: -14.4277993619
Correct output: 141.452540764  | Program output: 33.452540764  
Correct output: 102.2088941323 | Program output: -14.7911058677
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_inc} {:instruction float_yank} {:instruction float_mult} {:instruction float_flush} {:instruction float_yankdup} {:instruction integer_add} {:instruction print_float} {:instruction float_dec} {:instruction in1} {:instruction integer_yank} {:instruction integer_dup_items} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_div} {:instruction 11} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_div} {:instruction float_dec} {:instruction integer_dup_items} {:instruction float_dec} {:instruction float_dec} {:instruction integer_yank} {:instruction integer_dup_times} {:instruction integer_dup_items} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_dup_items} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_min} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_inc} {:instruction integer_yank} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_div} {:instruction print_float})
Best program: (float_inc float_yank float_mult float_flush float_yankdup integer_add print_float float_dec in1 integer_yank integer_dup_items float_dec float_dec float_dec float_dec float_dec float_dec integer_div 11 float_dec float_dec float_dec float_dec integer_div float_dec integer_dup_items float_dec float_dec integer_yank integer_dup_times integer_dup_items float_dec float_dec float_dec float_dec integer_dup_items float_dec float_dec float_dec float_min float_dec float_dec float_dec float_dec integer_inc integer_yank float_dec float_dec float_dec integer_div print_float)
Errors: [105.0 2 15.0 2 6.0 2 124.0 3 3.0 1 22.0 2 44.0 11 3.0 2 5.0 1 39.0 2 23.0 2 16.0 2 51.0 3 19.0 2 89.0 3 7.0 3 69.0 2 63.0 2 8.0 2 5.0 3 56.0 2 25.0 2 108.0 11 108.0 3 117.0 13]
Total: 1213.0
Mean: 24.26
Genome size: 51
Size: 52
Percent parens: 0.019
--- Population Statistics ---
Average total errors in population: 3154.1463615
Median total errors in population: 1213.0
Error averages by case: (178.52055970000004 3.435 97.24390609999999 2.965 87.14471430000002 3.061 195.9246321 4.044 78.94124649999999 2.376 100.92887540000001 3.092 120.34949039999998 11.315 85.27060129999997 2.996 80.8445713 2.341 112.74390999999996 5.209 104.5364378 3.273 98.06244839999997 3.267 127.61262509999999 3.815 98.4361442 3.118 163.9156543 4.064 89.53127799999999 4.006 144.26444049999998 3.151 134.9045035 5.306 86.82891029999999 3.04 87.3145915 3.966 127.78218830000003 3.198 101.35106790000002 3.164 175.19505589999997 11.0 180.98332570000002 3.871 183.491183 12.951)
Error minima by case: (7.5836 1 0.0 0 0.0 0 26.5836 2 0.0 0 0.0 0 0.018 7 0.0 0 0.0 0 13.1353 1 8.0 1 1.0 1 24.3973 1 1.0 1 8.4164 1 0.0 0 28.0874 1 33.7275 1 0.0 0 0.0 0 40.4975 1 10.0 1 10.5836 1 10.5836 1 19.5836 2)
Average genome size in population (length): 51.878
Average program size in population (points): 52.878
Average percent parens in population: 0.019
Minimum age in population: 124.9546677278186
Maximum age in population: 129.5937223260759
Average age in population: 127.586864855412
Median age in population: 127.6393136914021
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 15
Genome diversity (% unique Plush genomes):	 0.742
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 15
Syntactic diversity (% unique Push programs):	 0.742
Total error diversity:				 0.078
Error (vector) diversity:			 0.083
Behavioral diversity:				 0.083
--- Run Statistics ---
Number of program evaluations used so far: 90000
Number of point (instruction) evaluations so far: 118706338
--- Timings ---
Current time: 1529615728167 milliseconds
Total Time:         278.2 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:        99.0 seconds, 35.6%
Fitness Testing:    142.2 seconds, 51.1%
Report:              36.9 seconds, 13.2%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 89
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 90
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 90
;;******************************
;; -*- Number IO problem report - generation 90
Test total error for best: 59460.0
Test mean error for best: 29.73000
;;------------------------------
Outputs of best individual on training cases:
Correct output: 150.3639690164 | Program output: 45.3639690164 
Correct output: -129.2046261   | Program output: -114.2046261  
Correct output: 43.6336388837  | Program output: 37.6336388837 
Correct output: 168.6824809869 | Program output: 44.6824809869 
Correct output: -24.6347316794 | Program output: -27.6347316794
Correct output: 39.9291320135  | Program output: 17.9291320135 
Correct output: -20.9190282536 | Program output: 23.0809717464 
Correct output: 61.9263871894  | Program output: 58.9263871894 
Correct output: -28.8395473609 | Program output: -23.8395473609
Correct output: -39.146556962  | Program output: -0.146556962  
Correct output: -134.9331989268 | Program output: -111.9331989268
Correct output: -126.4496738486 | Program output: -110.4496738486
Correct output: -51.218440095  | Program output: -102.218440095
Correct output: 45.5895106217  | Program output: 26.5895106217 
Correct output: 136.6637618296 | Program output: 47.6637618296 
Correct output: -104.5625509424 | Program output: -97.5625509424
Correct output: 80.9125656746  | Program output: 11.9125656746 
Correct output: -63.4657032446 | Program output: -0.4657032446 
Correct output: -52.106433034  | Program output: -44.106433034 
Correct output: -99.9152304515 | Program output: -104.9152304515
Correct output: -78.2834351958 | Program output: -22.2834351958
Correct output: -64.2911152024 | Program output: -39.2911152024
Correct output: 93.5722006381  | Program output: -14.4277993619
Correct output: 141.452540764  | Program output: 33.452540764  
Correct output: 102.2088941323 | Program output: -14.7911058677
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_shove} {:instruction float_inc} {:instruction float_yank} {:instruction float_mult} {:instruction float_yank} {:instruction float_dup_items} {:instruction in1} {:instruction integer_yank} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_yankdup} {:instruction float_dec} {:instruction float_dec} {:instruction in2} {:instruction integer_div} {:instruction 11} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_div} {:instruction float_dec} {:instruction integer_dup_items} {:instruction float_dec} {:instruction float_dec} {:instruction integer_yank} {:instruction integer_add} {:instruction integer_add} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_dup_items} {:instruction float_dec} {:instruction float_min} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_div} {:instruction integer_yank} {:instruction float_dec} {:instruction integer_dup_items} {:instruction float_dec} {:instruction float_dec} {:instruction integer_mod} {:instruction float_dec} {:instruction integer_max} {:instruction print_float} {:instruction float_rot})
Best program: (integer_shove float_inc float_yank float_mult float_yank float_dup_items in1 integer_yank float_dec float_dec float_dec float_dec integer_yankdup float_dec float_dec in2 integer_div 11 float_dec float_dec float_dec float_dec integer_div float_dec integer_dup_items float_dec float_dec integer_yank integer_add integer_add float_dec float_dec float_dec float_dec integer_dup_items float_dec float_min float_dec float_dec float_dec float_dec float_dec integer_div integer_yank float_dec integer_dup_items float_dec float_dec integer_mod float_dec integer_max print_float float_rot)
Errors: [105.0 2 15.0 2 6.0 2 124.0 3 3.0 1 22.0 2 44.0 11 3.0 2 5.0 1 39.0 2 23.0 2 16.0 2 51.0 3 19.0 2 89.0 3 7.0 3 69.0 2 63.0 2 8.0 2 5.0 3 56.0 2 25.0 2 108.0 11 108.0 3 117.0 13]
Total: 1213.0
Mean: 24.26
Genome size: 53
Size: 54
Percent parens: 0.019
--- Population Statistics ---
Average total errors in population: 3124.654853799999
Median total errors in population: 1213.0
Error averages by case: (175.85465660000003 3.419 94.98881839999999 2.951 84.8071421 3.039 193.35868949999997 4.031 80.90559639999998 2.357 98.74683229999997 3.075 118.22081619999997 11.277 82.85942529999998 2.997 82.83934540000001 2.358 113.42236769999997 4.974 102.30298659999997 3.267 95.83312249999997 3.257 124.8034493 3.802 96.20854390000001 3.092 161.1720275 4.049 87.32802430000002 4.013 141.4454899 3.112 135.4885832 5.072 86.76723250000003 3.03 85.21667940000002 3.978 129.6625152 3.183 101.99518730000003 3.164 176.25067829999998 10.981 178.35834080000006 3.856 184.55330319999996 12.931)
Error minima by case: (42.6346 1 1.0 1 0.0 0 61.6346 1 0.0 0 1.0 1 0.8096 2 0.0 0 0.0 0 13.8979 1 7.0 1 0.0 0 11.3654 1 1.0 1 26.6346 1 0.0 0 6.6346 1 6.0 1 0.0 0 0.0 0 13.0 1 9.0 1 45.6346 1 45.6346 1 54.6346 2)
Average genome size in population (length): 51.845
Average program size in population (points): 52.845
Average percent parens in population: 0.019
Minimum age in population: 126.7141388755193
Maximum age in population: 130.9921464252019
Average age in population: 128.981888913561
Median age in population: 129.0202360221551
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 17
Genome diversity (% unique Plush genomes):	 0.726
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 17
Syntactic diversity (% unique Push programs):	 0.726
Total error diversity:				 0.062
Error (vector) diversity:			 0.066
Behavioral diversity:				 0.067
--- Run Statistics ---
Number of program evaluations used so far: 91000
Number of point (instruction) evaluations so far: 120002463
--- Timings ---
Current time: 1529615731267 milliseconds
Total Time:         281.3 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       100.1 seconds, 35.6%
Fitness Testing:    143.8 seconds, 51.1%
Report:              37.3 seconds, 13.3%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 90
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 91
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 91
;;******************************
;; -*- Number IO problem report - generation 91
Test total error for best: 59460.0
Test mean error for best: 29.73000
;;------------------------------
Outputs of best individual on training cases:
Correct output: 150.3639690164 | Program output: 45.3639690164 
Correct output: -129.2046261   | Program output: -114.2046261  
Correct output: 43.6336388837  | Program output: 37.6336388837 
Correct output: 168.6824809869 | Program output: 44.6824809869 
Correct output: -24.6347316794 | Program output: -27.6347316794
Correct output: 39.9291320135  | Program output: 17.9291320135 
Correct output: -20.9190282536 | Program output: 23.0809717464 
Correct output: 61.9263871894  | Program output: 58.9263871894 
Correct output: -28.8395473609 | Program output: -23.8395473609
Correct output: -39.146556962  | Program output: -0.146556962  
Correct output: -134.9331989268 | Program output: -111.9331989268
Correct output: -126.4496738486 | Program output: -110.4496738486
Correct output: -51.218440095  | Program output: -102.218440095
Correct output: 45.5895106217  | Program output: 26.5895106217 
Correct output: 136.6637618296 | Program output: 47.6637618296 
Correct output: -104.5625509424 | Program output: -97.5625509424
Correct output: 80.9125656746  | Program output: 11.9125656746 
Correct output: -63.4657032446 | Program output: -0.4657032446 
Correct output: -52.106433034  | Program output: -44.106433034 
Correct output: -99.9152304515 | Program output: -104.9152304515
Correct output: -78.2834351958 | Program output: -22.2834351958
Correct output: -64.2911152024 | Program output: -39.2911152024
Correct output: 93.5722006381  | Program output: -14.4277993619
Correct output: 141.452540764  | Program output: 33.452540764  
Correct output: 102.2088941323 | Program output: -14.7911058677
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_inc} {:instruction float_inc} {:instruction float_yank} {:instruction float_inc} {:instruction float_yank} {:instruction float_mult} {:instruction float_yank} {:instruction float_yankdup} {:instruction integer_add} {:instruction print_float} {:instruction float_dec} {:instruction in1} {:instruction integer_yank} {:instruction float_rot} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_div} {:instruction 11} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_div} {:instruction float_dec} {:instruction integer_dup_items} {:instruction float_dec} {:instruction float_dec} {:instruction integer_dup_times} {:instruction integer_dup_items} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_min} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_div} {:instruction integer_yank} {:instruction integer_dup_times} {:instruction float_yankdup} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_div} {:instruction print_float} {:instruction float_rot} {:instruction print_float} {:instruction float_rot})
Best program: (float_inc float_inc float_yank float_inc float_yank float_mult float_yank float_yankdup integer_add print_float float_dec in1 integer_yank float_rot float_dec float_dec float_dec float_dec float_dec float_dec integer_div 11 float_dec float_dec float_dec float_dec integer_div float_dec integer_dup_items float_dec float_dec integer_dup_times integer_dup_items float_dec float_dec float_dec float_dec float_dec float_dec float_min float_dec float_dec float_dec float_dec integer_div integer_yank integer_dup_times float_yankdup float_dec float_dec float_dec float_dec integer_div print_float float_rot print_float float_rot)
Errors: [105.0 2 15.0 2 6.0 2 124.0 3 3.0 1 22.0 2 44.0 11 3.0 2 5.0 1 39.0 2 23.0 2 16.0 2 51.0 3 19.0 2 89.0 3 7.0 3 69.0 2 63.0 2 8.0 2 5.0 3 56.0 2 25.0 2 108.0 11 108.0 3 117.0 13]
Total: 1213.0
Mean: 24.26
Genome size: 57
Size: 58
Percent parens: 0.017
--- Population Statistics ---
Average total errors in population: 2513.116018699999
Median total errors in population: 1213.0
Error averages by case: (152.6585196 3.137 71.04954149999999 2.74 60.29746660000001 2.816 170.64711499999999 3.797 54.953003599999995 2.089 74.4244966 2.848 94.33403059999996 11.208 58.3379858 2.777 56.86678690000001 2.072 90.24110819999999 4.619 78.4602096 2.996 71.87270319999999 2.983 100.19035779999999 3.598 71.89037910000002 2.864 137.55286669999995 3.802 63.056071399999986 3.752 117.44865989999998 2.873 112.0257709 4.7 61.07462729999999 2.812 60.945317300000006 3.744 105.13530310000002 2.947 76.6468351 2.902 151.9134336 10.918 155.1511823 3.652 160.415247 12.881)
Error minima by case: (31.636 1 1.0 1 0.0 0 51.3175 2 0.0 0 0.0 0 0.081 1 0.0 0 0.0 0 2.7626 1 9.0 1 2.0 1 9.3093 1 1.0 1 13.3362 1 0.0 0 4.5727 1 18.0 1 0.0 0 0.0 0 11.0 1 11.0 1 2.1466 2 45.7337 1 6.4901 1)
Average genome size in population (length): 51.65
Average program size in population (points): 52.65
Average percent parens in population: 0.019
Minimum age in population: 127.7141388755193
Maximum age in population: 132.5985271684951
Average age in population: 130.3738513639778
Median age in population: 130.4088294766789
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 17
Genome diversity (% unique Plush genomes):	 0.698
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 17
Syntactic diversity (% unique Push programs):	 0.698
Total error diversity:				 0.071
Error (vector) diversity:			 0.076
Behavioral diversity:				 0.077
--- Run Statistics ---
Number of program evaluations used so far: 92000
Number of point (instruction) evaluations so far: 121293738
--- Timings ---
Current time: 1529615734315 milliseconds
Total Time:         284.4 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       101.2 seconds, 35.6%
Fitness Testing:    145.3 seconds, 51.1%
Report:              37.7 seconds, 13.3%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 91
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 92
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 92
;;******************************
;; -*- Number IO problem report - generation 92
Test total error for best: 59460.0
Test mean error for best: 29.73000
;;------------------------------
Outputs of best individual on training cases:
Correct output: 150.3639690164 | Program output: 45.3639690164 
Correct output: -129.2046261   | Program output: -114.2046261  
Correct output: 43.6336388837  | Program output: 37.6336388837 
Correct output: 168.6824809869 | Program output: 44.6824809869 
Correct output: -24.6347316794 | Program output: -27.6347316794
Correct output: 39.9291320135  | Program output: 17.9291320135 
Correct output: -20.9190282536 | Program output: 23.0809717464 
Correct output: 61.9263871894  | Program output: 58.9263871894 
Correct output: -28.8395473609 | Program output: -23.8395473609
Correct output: -39.146556962  | Program output: -0.146556962  
Correct output: -134.9331989268 | Program output: -111.9331989268
Correct output: -126.4496738486 | Program output: -110.4496738486
Correct output: -51.218440095  | Program output: -102.218440095
Correct output: 45.5895106217  | Program output: 26.5895106217 
Correct output: 136.6637618296 | Program output: 47.6637618296 
Correct output: -104.5625509424 | Program output: -97.5625509424
Correct output: 80.9125656746  | Program output: 11.9125656746 
Correct output: -63.4657032446 | Program output: -0.4657032446 
Correct output: -52.106433034  | Program output: -44.106433034 
Correct output: -99.9152304515 | Program output: -104.9152304515
Correct output: -78.2834351958 | Program output: -22.2834351958
Correct output: -64.2911152024 | Program output: -39.2911152024
Correct output: 93.5722006381  | Program output: -14.4277993619
Correct output: 141.452540764  | Program output: 33.452540764  
Correct output: 102.2088941323 | Program output: -14.7911058677
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_inc} {:instruction float_flush} {:instruction in1} {:instruction integer_yank} {:instruction integer_max} {:instruction float_add} {:instruction float_dec} {:instruction integer_fromfloat} {:instruction integer_stackdepth} {:instruction print_float} {:instruction integer_inc} {:instruction in1} {:instruction integer_yank} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_yankdup} {:instruction float_dec} {:instruction float_dec} {:instruction integer_div} {:instruction integer_dup_items} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_dup_items} {:instruction float_dec} {:instruction float_dec} {:instruction integer_div} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_dup_items} {:instruction float_dec} {:instruction float_dec} {:instruction integer_div} {:instruction float_sub} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction tagged_281} {:instruction float_dec} {:instruction integer_dup_times} {:instruction integer_dup_items} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_div} {:instruction print_float} {:instruction float_dup_items} {:instruction float_rot} {:instruction float_dec} {:instruction float_rot} {:instruction float_div} {:instruction float_dec} {:instruction tag_integer_171} {:instruction float_dec})
Best program: (float_inc float_flush in1 integer_yank integer_max float_add float_dec integer_fromfloat integer_stackdepth print_float integer_inc in1 integer_yank float_dec float_dec float_dec float_dec integer_yankdup float_dec float_dec integer_div integer_dup_items float_dec float_dec float_dec float_dec float_dec integer_dup_items float_dec float_dec integer_div float_dec float_dec float_dec integer_dup_items float_dec float_dec integer_div float_sub float_dec float_dec float_dec float_dec tagged_281 float_dec integer_dup_times integer_dup_items float_dec float_dec float_dec float_dec integer_div print_float float_dup_items float_rot float_dec float_rot float_div float_dec tag_integer_171 float_dec)
Errors: [105.0 2 15.0 2 6.0 2 124.0 3 3.0 1 22.0 2 44.0 11 3.0 2 5.0 1 39.0 2 23.0 2 16.0 2 51.0 3 19.0 2 89.0 3 7.0 3 69.0 2 63.0 2 8.0 2 5.0 3 56.0 2 25.0 2 108.0 11 108.0 3 117.0 13]
Total: 1213.0
Mean: 24.26
Genome size: 61
Size: 62
Percent parens: 0.016
--- Population Statistics ---
Average total errors in population: 3211.996329399998
Median total errors in population: 1213.0
Error averages by case: (178.6758943 3.45 98.90364209999997 2.992 88.8639104 3.065 196.11073699999997 4.054 84.53188599999997 2.397 102.71803170000001 3.099 121.99632789999995 11.297 87.03270709999997 3.016 86.63697230000001 2.394 117.04822059999995 5.237 106.1528384 3.315 99.70545719999997 3.297 127.36743579999998 3.797 100.20964749999999 3.117 164.02260350000003 4.078 91.21354250000002 4.06 144.7060253 3.14 138.98822939999997 5.365 90.18938390000001 3.058 88.92304590000002 3.986 133.0531468 3.21 105.41907249999998 3.206 178.85355859999996 10.989 181.11033570000004 3.869 187.112677 12.963)
Error minima by case: (82.0 1 2.0 1 0.0 0 96.6825 2 0.0 0 1.0 1 0.6554 8 0.0 0 0.0 0 16.1078 1 10.0 1 3.0 1 26.9716 1 1.0 1 66.0 1 0.0 0 46.0 1 15.2245 1 0.0 0 0.0 0 0.5152 1 12.0 1 34.5174 2 85.0 1 37.2089 2)
Average genome size in population (length): 51.472
Average program size in population (points): 52.472
Average percent parens in population: 0.019
Minimum age in population: 129.0215649759587
Maximum age in population: 133.7702599781171
Average age in population: 131.7993988232501
Median age in population: 131.8579395122188
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 16
Genome diversity (% unique Plush genomes):	 0.716
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 16
Syntactic diversity (% unique Push programs):	 0.716
Total error diversity:				 0.063
Error (vector) diversity:			 0.068
Behavioral diversity:				 0.068
--- Run Statistics ---
Number of program evaluations used so far: 93000
Number of point (instruction) evaluations so far: 122580538
--- Timings ---
Current time: 1529615737402 milliseconds
Total Time:         287.4 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       102.3 seconds, 35.6%
Fitness Testing:    146.9 seconds, 51.1%
Report:              38.1 seconds, 13.3%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 92
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 93
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 93
;;******************************
;; -*- Number IO problem report - generation 93
Test total error for best: 59460.0
Test mean error for best: 29.73000
;;------------------------------
Outputs of best individual on training cases:
Correct output: 150.3639690164 | Program output: 45.3639690164 
Correct output: -129.2046261   | Program output: -114.2046261  
Correct output: 43.6336388837  | Program output: 37.6336388837 
Correct output: 168.6824809869 | Program output: 44.6824809869 
Correct output: -24.6347316794 | Program output: -27.6347316794
Correct output: 39.9291320135  | Program output: 17.9291320135 
Correct output: -20.9190282536 | Program output: 23.0809717464 
Correct output: 61.9263871894  | Program output: 58.9263871894 
Correct output: -28.8395473609 | Program output: -23.8395473609
Correct output: -39.146556962  | Program output: -0.146556962  
Correct output: -134.9331989268 | Program output: -111.9331989268
Correct output: -126.4496738486 | Program output: -110.4496738486
Correct output: -51.218440095  | Program output: -102.218440095
Correct output: 45.5895106217  | Program output: 26.5895106217 
Correct output: 136.6637618296 | Program output: 47.6637618296 
Correct output: -104.5625509424 | Program output: -97.5625509424
Correct output: 80.9125656746  | Program output: 11.9125656746 
Correct output: -63.4657032446 | Program output: -0.4657032446 
Correct output: -52.106433034  | Program output: -44.106433034 
Correct output: -99.9152304515 | Program output: -104.9152304515
Correct output: -78.2834351958 | Program output: -22.2834351958
Correct output: -64.2911152024 | Program output: -39.2911152024
Correct output: 93.5722006381  | Program output: -14.4277993619
Correct output: 141.452540764  | Program output: 33.452540764  
Correct output: 102.2088941323 | Program output: -14.7911058677
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_inc} {:instruction in1} {:instruction integer_yank} {:instruction float_dec} {:instruction integer_yank} {:instruction integer_dup_times} {:instruction integer_yank} {:instruction integer_dup_items} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_div} {:instruction tagged_526} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_dup_items} {:instruction float_dec} {:instruction float_dec} {:instruction integer_dup_items} {:instruction float_sub} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_div} {:instruction float_dec} {:instruction float_dec} {:instruction float_max} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_div} {:instruction integer_dup_times} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_div} {:instruction integer_dup_times} {:instruction integer_dup_items} {:instruction float_yankdup} {:instruction float_dec} {:instruction integer_div} {:instruction print_float} {:instruction float_max} {:instruction in1} {:instruction tag_integer_496} {:instruction integer_dup_items} {:instruction integer_div} {:instruction integer_min} {:instruction integer_pop})
Best program: (float_inc in1 integer_yank float_dec integer_yank integer_dup_times integer_yank integer_dup_items float_dec float_dec float_dec float_dec float_dec integer_div tagged_526 float_dec float_dec float_dec float_dec float_dec integer_dup_items float_dec float_dec integer_dup_items float_sub float_dec float_dec float_dec float_dec integer_div float_dec float_dec float_max float_dec float_dec float_dec float_dec integer_div integer_dup_times float_dec float_dec float_dec integer_div integer_dup_times integer_dup_items float_yankdup float_dec integer_div print_float float_max in1 tag_integer_496 integer_dup_items integer_div integer_min integer_pop)
Errors: [105.0 2 15.0 2 6.0 2 124.0 3 3.0 1 22.0 2 44.0 11 3.0 2 5.0 1 39.0 2 23.0 2 16.0 2 51.0 3 19.0 2 89.0 3 7.0 3 69.0 2 63.0 2 8.0 2 5.0 3 56.0 2 25.0 2 108.0 11 108.0 3 117.0 13]
Total: 1213.0
Mean: 24.26
Genome size: 56
Size: 57
Percent parens: 0.018
--- Population Statistics ---
Average total errors in population: 3337.901259099999
Median total errors in population: 1213.0
Error averages by case: (183.58437350000003 3.504 103.6901077 3.04 93.52076269999999 3.09 200.91225379999995 4.109 89.5472978 2.455 107.26226209999997 3.163 126.96532009999997 11.303 91.65793259999997 3.074 91.64710730000002 2.457 122.31801559999994 5.248 110.91071509999999 3.367 104.51448119999996 3.374 133.20333760000003 3.871 104.75636879999999 3.168 169.02379219999997 4.118 96.0948339 4.117 149.92990189999998 3.17 144.24515340000002 5.373 95.2345334 3.122 93.82395200000003 4.022 137.93029769999998 3.304 110.39233940000003 3.247 184.81332789999993 10.977 186.06648180000008 3.926 192.32430960000002 12.933)
Error minima by case: (31.636 1 1.2094 1 0.0 0 51.3175 1 0.0 0 0.1392 1 0.5847 8 0.0 0 0.0 0 5.4141 1 6.5303 1 2.2094 1 25.2184 1 1.0 1 13.3362 2 0.0 0 29.0874 1 29.4141 1 0.0 0 0.0 0 22.4141 1 4.5303 1 53.7823 1 46.5475 1 62.4189 1)
Average genome size in population (length): 51.096
Average program size in population (points): 52.096
Average percent parens in population: 0.019
Minimum age in population: 130.2908822286917
Maximum age in population: 135.1633033090554
Average age in population: 133.2052949504151
Median age in population: 133.2556742320184
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 17
Genome diversity (% unique Plush genomes):	 0.748
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 17
Syntactic diversity (% unique Push programs):	 0.748
Total error diversity:				 0.058
Error (vector) diversity:			 0.063
Behavioral diversity:				 0.064
--- Run Statistics ---
Number of program evaluations used so far: 94000
Number of point (instruction) evaluations so far: 123857963
--- Timings ---
Current time: 1529615740556 milliseconds
Total Time:         290.6 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       103.5 seconds, 35.6%
Fitness Testing:    148.4 seconds, 51.1%
Report:              38.6 seconds, 13.3%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 93
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 94
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 94
;;******************************
;; -*- Number IO problem report - generation 94
Test total error for best: 59460.0
Test mean error for best: 29.73000
;;------------------------------
Outputs of best individual on training cases:
Correct output: 150.3639690164 | Program output: 45.3639690164 
Correct output: -129.2046261   | Program output: -114.2046261  
Correct output: 43.6336388837  | Program output: 37.6336388837 
Correct output: 168.6824809869 | Program output: 44.6824809869 
Correct output: -24.6347316794 | Program output: -27.6347316794
Correct output: 39.9291320135  | Program output: 17.9291320135 
Correct output: -20.9190282536 | Program output: 23.0809717464 
Correct output: 61.9263871894  | Program output: 58.9263871894 
Correct output: -28.8395473609 | Program output: -23.8395473609
Correct output: -39.146556962  | Program output: -0.146556962  
Correct output: -134.9331989268 | Program output: -111.9331989268
Correct output: -126.4496738486 | Program output: -110.4496738486
Correct output: -51.218440095  | Program output: -102.218440095
Correct output: 45.5895106217  | Program output: 26.5895106217 
Correct output: 136.6637618296 | Program output: 47.6637618296 
Correct output: -104.5625509424 | Program output: -97.5625509424
Correct output: 80.9125656746  | Program output: 11.9125656746 
Correct output: -63.4657032446 | Program output: -0.4657032446 
Correct output: -52.106433034  | Program output: -44.106433034 
Correct output: -99.9152304515 | Program output: -104.9152304515
Correct output: -78.2834351958 | Program output: -22.2834351958
Correct output: -64.2911152024 | Program output: -39.2911152024
Correct output: 93.5722006381  | Program output: -14.4277993619
Correct output: 141.452540764  | Program output: 33.452540764  
Correct output: 102.2088941323 | Program output: -14.7911058677
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction in1} {:instruction integer_yank} {:instruction float_mult} {:instruction float_shove} {:instruction float_dec} {:instruction float_dec} {:instruction float_dup_items} {:instruction float_dec} {:instruction integer_dup_items} {:instruction float_dec} {:instruction float_dec} {:instruction integer_div} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_dup_items} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_div} {:instruction float_dec} {:instruction integer_div} {:instruction float_dec} {:instruction float_dec} {:instruction float_rot} {:instruction integer_dup_times} {:instruction integer_dup_items} {:instruction float_dec} {:instruction integer_inc} {:instruction integer_dup_items} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_div} {:instruction float_sub} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_div} {:instruction float_rot} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_div} {:instruction print_float})
Best program: (in1 integer_yank float_mult float_shove float_dec float_dec float_dup_items float_dec integer_dup_items float_dec float_dec integer_div float_dec float_dec float_dec integer_dup_items float_dec float_dec float_dec float_dec integer_div float_dec integer_div float_dec float_dec float_rot integer_dup_times integer_dup_items float_dec integer_inc integer_dup_items float_dec float_dec float_dec float_dec integer_div float_sub float_dec float_dec float_dec float_dec integer_div float_rot float_dec float_dec float_dec integer_div print_float)
Errors: [105.0 2 15.0 2 6.0 2 124.0 3 3.0 1 22.0 2 44.0 11 3.0 2 5.0 1 39.0 2 23.0 2 16.0 2 51.0 3 19.0 2 89.0 3 7.0 3 69.0 2 63.0 2 8.0 2 5.0 3 56.0 2 25.0 2 108.0 11 108.0 3 117.0 13]
Total: 1213.0
Mean: 24.26
Genome size: 48
Size: 49
Percent parens: 0.020
--- Population Statistics ---
Average total errors in population: 2853.5521421999997
Median total errors in population: 1213.0
Error averages by case: (166.55541380000003 3.361 84.97990809999999 2.898 74.3852924 2.974 184.26012929999993 3.955 68.00225100000002 2.262 88.19797849999998 3.013 107.3268954 11.277 72.57136509999998 2.92 69.87765230000002 2.275 101.47447869999998 5.047 92.3758488 3.182 85.80281279999998 3.17 114.12936039999997 3.719 85.7689008 3.019 151.71375199999994 3.958 77.05181219999999 3.912 131.1850609 3.072 123.96085190000001 5.137 75.2273958 2.968 74.91449040000002 3.887 117.4137806 3.119 90.19816340000001 3.073 164.50951759999995 10.919 168.96151920000003 3.767 172.93051079999998 12.893)
Error minima by case: (73.18 1 1.0 1 0.0 0 91.4985 1 0.0 0 1.9441 1 0.9732 9 0.0 0 0.0 0 6.5257 1 6.0 1 0.0 0 24.0 1 0.0 0 59.4798 1 0.0 0 3.7286 1 34.7275 1 0.0 0 0.0 0 39.0 1 8.0 1 16.3882 1 64.2685 1 25.0249 1)
Average genome size in population (length): 50.938
Average program size in population (points): 51.938
Average percent parens in population: 0.020
Minimum age in population: 131.2908822286917
Maximum age in population: 136.570340059141
Average age in population: 134.6304310897197
Median age in population: 134.7043560487641
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 15
Genome diversity (% unique Plush genomes):	 0.724
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 15
Syntactic diversity (% unique Push programs):	 0.724
Total error diversity:				 0.07
Error (vector) diversity:			 0.074
Behavioral diversity:				 0.074
--- Run Statistics ---
Number of program evaluations used so far: 95000
Number of point (instruction) evaluations so far: 125131413
--- Timings ---
Current time: 1529615743537 milliseconds
Total Time:         293.6 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       104.5 seconds, 35.6%
Fitness Testing:    149.9 seconds, 51.1%
Report:              39.0 seconds, 13.3%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 94
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 95
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 95
;;******************************
;; -*- Number IO problem report - generation 95
Test total error for best: 53592.0
Test mean error for best: 26.79600
;;------------------------------
Outputs of best individual on training cases:
Correct output: 150.3639690164 | Program output: 57.3639690164 
Correct output: -129.2046261   | Program output: -114.2046261  
Correct output: 43.6336388837  | Program output: 37.6336388837 
Correct output: 168.6824809869 | Program output: 56.6824809869 
Correct output: -24.6347316794 | Program output: -27.6347316794
Correct output: 39.9291320135  | Program output: 17.9291320135 
Correct output: -20.9190282536 | Program output: 23.0809717464 
Correct output: 61.9263871894  | Program output: 58.9263871894 
Correct output: -28.8395473609 | Program output: -23.8395473609
Correct output: -39.146556962  | Program output: -0.146556962  
Correct output: -134.9331989268 | Program output: -111.9331989268
Correct output: -126.4496738486 | Program output: -110.4496738486
Correct output: -51.218440095  | Program output: -90.218440095 
Correct output: 45.5895106217  | Program output: 26.5895106217 
Correct output: 136.6637618296 | Program output: 59.6637618296 
Correct output: -104.5625509424 | Program output: -97.5625509424
Correct output: 80.9125656746  | Program output: 23.9125656746 
Correct output: -63.4657032446 | Program output: -0.4657032446 
Correct output: -52.106433034  | Program output: -44.106433034 
Correct output: -99.9152304515 | Program output: -104.9152304515
Correct output: -78.2834351958 | Program output: -22.2834351958
Correct output: -64.2911152024 | Program output: -39.2911152024
Correct output: 93.5722006381  | Program output: -2.4277993619 
Correct output: 141.452540764  | Program output: 45.452540764  
Correct output: 102.2088941323 | Program output: -2.7911058677 
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_flush} {:instruction float_inc} {:instruction float_yank} {:instruction float_mult} {:instruction float_yankdup} {:instruction float_dup_items} {:instruction in1} {:instruction integer_yank} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_yankdup} {:instruction float_dec} {:instruction float_dec} {:instruction in2} {:instruction integer_div} {:instruction 11} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_div} {:instruction float_dec} {:instruction float_dec} {:instruction float_dup_items} {:instruction integer_dup_times} {:instruction integer_dup_items} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_dup_items} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction print_integer} {:instruction integer_pop} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_max} {:instruction float_mod} {:instruction float_dec} {:instruction float_dec} {:instruction integer_stackdepth} {:instruction float_max} {:instruction integer_dup_times} {:instruction integer_dup_items} {:instruction float_frominteger} {:instruction float_dec} {:instruction integer_div} {:instruction print_float} {:instruction float_rot})
Best program: (float_flush float_inc float_yank float_mult float_yankdup float_dup_items in1 integer_yank float_dec float_dec float_dec float_dec integer_yankdup float_dec float_dec in2 integer_div 11 float_dec float_dec float_dec float_dec integer_div float_dec float_dec float_dup_items integer_dup_times integer_dup_items float_dec float_dec float_dec float_dec integer_dup_items float_dec float_dec float_dec print_integer integer_pop float_dec float_dec float_dec float_dec float_dec float_max float_mod float_dec float_dec integer_stackdepth float_max integer_dup_times integer_dup_items float_frominteger float_dec integer_div print_float float_rot)
Errors: [93.0 2 15.0 2 6.0 2 112.0 2 3.0 1 22.0 2 44.0 11 3.0 2 5.0 1 39.0 2 23.0 2 16.0 2 39.0 2 19.0 2 77.0 3 7.0 3 57.0 2 63.0 2 8.0 2 5.0 3 56.0 2 25.0 2 96.0 10 96.0 2 105.0 12]
Total: 1112.0
Mean: 22.24
Genome size: 56
Size: 57
Percent parens: 0.018
--- Population Statistics ---
Average total errors in population: 3064.012357999999
Median total errors in population: 1213.0
Error averages by case: (172.76519399999998 3.317 93.1904692 2.877 81.52576010000001 2.923 190.31671329999998 3.931 78.43484289999999 2.21 95.53053100000001 2.972 115.55521039999999 11.294 79.4403528 2.882 80.4643427 2.251 111.97810379999999 4.876 100.5372783 3.148 94.0420953 3.149 123.52777689999999 3.734 93.03298350000001 2.971 158.0300335 3.94 85.5397061 3.903 138.38816700000004 2.991 134.15276479999997 4.972 84.7599679 2.95 83.3078559 3.909 127.43912279999999 3.12 99.90013130000001 3.054 175.09831839999995 10.97 175.29349050000002 3.789 182.7081456 12.92)
Error minima by case: (5.0 1 2.0 1 0.0 0 24.0 1 0.0 0 1.0 1 1.9142 9 0.0 0 0.0 0 14.1466 1 6.0 1 1.0 1 24.0 1 0.0 0 11.0 2 0.0 0 31.0 1 38.4657 1 0.0 0 0.0 0 39.0 1 8.0 1 18.373 1 8.0 1 34.1963 1)
Average genome size in population (length): 51.043
Average program size in population (points): 52.043
Average percent parens in population: 0.020
Minimum age in population: 133.6795443908985
Maximum age in population: 138.0731345664111
Average age in population: 136.0852280011848
Median age in population: 136.1484157526875
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 12
Genome diversity (% unique Plush genomes):	 0.703
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 12
Syntactic diversity (% unique Push programs):	 0.703
Total error diversity:				 0.064
Error (vector) diversity:			 0.068
Behavioral diversity:				 0.069
--- Run Statistics ---
Number of program evaluations used so far: 96000
Number of point (instruction) evaluations so far: 126407488
--- Timings ---
Current time: 1529615746518 milliseconds
Total Time:         296.6 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       105.6 seconds, 35.6%
Fitness Testing:    151.5 seconds, 51.1%
Report:              39.4 seconds, 13.3%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 95
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 96
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 96
;;******************************
;; -*- Number IO problem report - generation 96
Test total error for best: 53592.0
Test mean error for best: 26.79600
;;------------------------------
Outputs of best individual on training cases:
Correct output: 150.3639690164 | Program output: 57.3639690164 
Correct output: -129.2046261   | Program output: -114.2046261  
Correct output: 43.6336388837  | Program output: 37.6336388837 
Correct output: 168.6824809869 | Program output: 56.6824809869 
Correct output: -24.6347316794 | Program output: -27.6347316794
Correct output: 39.9291320135  | Program output: 17.9291320135 
Correct output: -20.9190282536 | Program output: 23.0809717464 
Correct output: 61.9263871894  | Program output: 58.9263871894 
Correct output: -28.8395473609 | Program output: -23.8395473609
Correct output: -39.146556962  | Program output: -0.146556962  
Correct output: -134.9331989268 | Program output: -111.9331989268
Correct output: -126.4496738486 | Program output: -110.4496738486
Correct output: -51.218440095  | Program output: -90.218440095 
Correct output: 45.5895106217  | Program output: 26.5895106217 
Correct output: 136.6637618296 | Program output: 59.6637618296 
Correct output: -104.5625509424 | Program output: -97.5625509424
Correct output: 80.9125656746  | Program output: 23.9125656746 
Correct output: -63.4657032446 | Program output: -0.4657032446 
Correct output: -52.106433034  | Program output: -44.106433034 
Correct output: -99.9152304515 | Program output: -104.9152304515
Correct output: -78.2834351958 | Program output: -22.2834351958
Correct output: -64.2911152024 | Program output: -39.2911152024
Correct output: 93.5722006381  | Program output: -2.4277993619 
Correct output: 141.452540764  | Program output: 45.452540764  
Correct output: 102.2088941323 | Program output: -2.7911058677 
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_flush} {:instruction float_inc} {:instruction float_yank} {:instruction float_mult} {:instruction float_yankdup} {:instruction float_dup_items} {:instruction in1} {:instruction integer_yank} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_yankdup} {:instruction float_dec} {:instruction float_dec} {:instruction in2} {:instruction integer_div} {:instruction 11} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_div} {:instruction float_dec} {:instruction float_dec} {:instruction float_dup_items} {:instruction integer_dup_times} {:instruction integer_dup_items} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_dup_items} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction print_integer} {:instruction integer_pop} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_max} {:instruction float_mod} {:instruction float_dec} {:instruction float_dec} {:instruction integer_stackdepth} {:instruction float_max} {:instruction integer_dup_times} {:instruction integer_dup_items} {:instruction float_frominteger} {:instruction float_dec} {:instruction integer_div} {:instruction print_float} {:instruction float_rot})
Best program: (float_flush float_inc float_yank float_mult float_yankdup float_dup_items in1 integer_yank float_dec float_dec float_dec float_dec integer_yankdup float_dec float_dec in2 integer_div 11 float_dec float_dec float_dec float_dec integer_div float_dec float_dec float_dup_items integer_dup_times integer_dup_items float_dec float_dec float_dec float_dec integer_dup_items float_dec float_dec float_dec print_integer integer_pop float_dec float_dec float_dec float_dec float_dec float_max float_mod float_dec float_dec integer_stackdepth float_max integer_dup_times integer_dup_items float_frominteger float_dec integer_div print_float float_rot)
Errors: [93.0 2 15.0 2 6.0 2 112.0 2 3.0 1 22.0 2 44.0 11 3.0 2 5.0 1 39.0 2 23.0 2 16.0 2 39.0 2 19.0 2 77.0 3 7.0 3 57.0 2 63.0 2 8.0 2 5.0 3 56.0 2 25.0 2 96.0 10 96.0 2 105.0 12]
Total: 1112.0
Mean: 22.24
Genome size: 56
Size: 57
Percent parens: 0.018
--- Population Statistics ---
Average total errors in population: 3207.647505599998
Median total errors in population: 1213.0
Error averages by case: (179.2040603 3.601 99.96936109999999 3.117 88.66296180000002 3.218 196.48242139999994 4.213 82.96425319999999 2.562 102.02534629999997 3.256 120.74960669999999 11.278 87.26589809999994 3.195 85.00603699999999 2.556 116.06197009999994 5.388 107.1890491 3.48 100.70523189999996 3.489 126.97276169999998 3.931 99.66756700000002 3.278 164.5889618 4.217 91.90634500000002 4.195 144.4310662 3.261 138.08801019999999 5.524 89.55591199999999 3.208 89.49647200000005 4.096 131.6925448 3.391 104.5366629 3.328 177.59922079999993 10.903 181.45229780000008 3.989 185.84048639999997 12.859)
Error minima by case: (31.636 1 4.0 1 0.0 0 51.3175 1 0.0 0 1.0 1 0.1608 8 0.0 0 0.0 0 0.7747 1 12.0 1 5.0 1 11.2972 1 0.0 0 13.3362 1 0.0 0 10.857 1 12.8765 1 0.0 0 0.0 0 1.9413 1 12.0511 1 23.5166 1 46.5475 1 18.8482 1)
Average genome size in population (length): 50.531
Average program size in population (points): 51.531
Average percent parens in population: 0.020
Minimum age in population: 134.8982457788569
Maximum age in population: 139.559418292815
Average age in population: 137.4949043586781
Median age in population: 137.4903295286614
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 15
Genome diversity (% unique Plush genomes):	 0.758
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 15
Syntactic diversity (% unique Push programs):	 0.758
Total error diversity:				 0.079
Error (vector) diversity:			 0.086
Behavioral diversity:				 0.086
--- Run Statistics ---
Number of program evaluations used so far: 97000
Number of point (instruction) evaluations so far: 127670763
--- Timings ---
Current time: 1529615749639 milliseconds
Total Time:         299.6 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       106.7 seconds, 35.6%
Fitness Testing:    153.0 seconds, 51.1%
Report:              39.8 seconds, 13.3%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 96
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 97
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 97
;;******************************
;; -*- Number IO problem report - generation 97
Test total error for best: 53592.0
Test mean error for best: 26.79600
;;------------------------------
Outputs of best individual on training cases:
Correct output: 150.3639690164 | Program output: 57.3639690164 
Correct output: -129.2046261   | Program output: -114.2046261  
Correct output: 43.6336388837  | Program output: 37.6336388837 
Correct output: 168.6824809869 | Program output: 56.6824809869 
Correct output: -24.6347316794 | Program output: -27.6347316794
Correct output: 39.9291320135  | Program output: 17.9291320135 
Correct output: -20.9190282536 | Program output: 23.0809717464 
Correct output: 61.9263871894  | Program output: 58.9263871894 
Correct output: -28.8395473609 | Program output: -23.8395473609
Correct output: -39.146556962  | Program output: -0.146556962  
Correct output: -134.9331989268 | Program output: -111.9331989268
Correct output: -126.4496738486 | Program output: -110.4496738486
Correct output: -51.218440095  | Program output: -90.218440095 
Correct output: 45.5895106217  | Program output: 26.5895106217 
Correct output: 136.6637618296 | Program output: 59.6637618296 
Correct output: -104.5625509424 | Program output: -97.5625509424
Correct output: 80.9125656746  | Program output: 23.9125656746 
Correct output: -63.4657032446 | Program output: -0.4657032446 
Correct output: -52.106433034  | Program output: -44.106433034 
Correct output: -99.9152304515 | Program output: -104.9152304515
Correct output: -78.2834351958 | Program output: -22.2834351958
Correct output: -64.2911152024 | Program output: -39.2911152024
Correct output: 93.5722006381  | Program output: -2.4277993619 
Correct output: 141.452540764  | Program output: 45.452540764  
Correct output: 102.2088941323 | Program output: -2.7911058677 
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_flush} {:instruction float_inc} {:instruction float_yank} {:instruction float_mult} {:instruction float_yankdup} {:instruction float_dup_items} {:instruction in1} {:instruction integer_yank} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_yankdup} {:instruction float_dec} {:instruction float_dec} {:instruction in2} {:instruction integer_div} {:instruction 11} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_div} {:instruction float_dec} {:instruction float_dec} {:instruction float_dup_items} {:instruction integer_dup_times} {:instruction integer_dup_items} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_dup_items} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction print_integer} {:instruction integer_pop} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_max} {:instruction float_mod} {:instruction float_dec} {:instruction float_dec} {:instruction integer_stackdepth} {:instruction float_max} {:instruction integer_dup_times} {:instruction integer_dup_items} {:instruction float_frominteger} {:instruction float_dec} {:instruction integer_div} {:instruction print_float} {:instruction float_rot})
Best program: (float_flush float_inc float_yank float_mult float_yankdup float_dup_items in1 integer_yank float_dec float_dec float_dec float_dec integer_yankdup float_dec float_dec in2 integer_div 11 float_dec float_dec float_dec float_dec integer_div float_dec float_dec float_dup_items integer_dup_times integer_dup_items float_dec float_dec float_dec float_dec integer_dup_items float_dec float_dec float_dec print_integer integer_pop float_dec float_dec float_dec float_dec float_dec float_max float_mod float_dec float_dec integer_stackdepth float_max integer_dup_times integer_dup_items float_frominteger float_dec integer_div print_float float_rot)
Errors: [93.0 2 15.0 2 6.0 2 112.0 2 3.0 1 22.0 2 44.0 11 3.0 2 5.0 1 39.0 2 23.0 2 16.0 2 39.0 2 19.0 2 77.0 3 7.0 3 57.0 2 63.0 2 8.0 2 5.0 3 56.0 2 25.0 2 96.0 10 96.0 2 105.0 12]
Total: 1112.0
Mean: 22.24
Genome size: 56
Size: 57
Percent parens: 0.018
--- Population Statistics ---
Average total errors in population: 2905.9842767999985
Median total errors in population: 1213.0
Error averages by case: (166.44688090000002 3.3 87.2671027 2.867 74.9353686 2.923 184.0444450999999 3.911 72.68036640000001 2.23 88.82834360000003 2.967 108.58405010000001 11.247 73.08526189999998 2.894 74.8004104 2.259 104.3259408 4.962 94.6567314 3.138 88.11521459999999 3.137 116.53232869999998 3.68 86.3399455 2.972 151.58221689999993 3.923 79.4233668 3.895 131.9381605 2.966 126.64774820000001 5.061 78.2279876 2.93 77.19646460000003 3.852 121.92458200000002 3.106 93.70662910000003 3.046 170.10041669999995 10.9 168.81490860000002 3.721 177.01940509999994 12.873)
Error minima by case: (3.0 1 4.0 1 0.0 0 16.0 1 0.0 0 0.0 0 2.1239 9 0.0 0 0.0 0 11.9972 1 12.0 1 5.0 1 24.0 2 1.341 1 11.0 1 0.0 0 31.0 1 7.0686 1 0.0 0 0.0 0 15.4437 1 14.0 1 34.488 1 0.0 0 16.8482 1)
Average genome size in population (length): 50.458
Average program size in population (points): 51.458
Average percent parens in population: 0.020
Minimum age in population: 136.6203196359138
Maximum age in population: 140.9292790385933
Average age in population: 138.9159434450689
Median age in population: 138.9161658607004
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 15
Genome diversity (% unique Plush genomes):	 0.718
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 15
Syntactic diversity (% unique Push programs):	 0.718
Total error diversity:				 0.072
Error (vector) diversity:			 0.077
Behavioral diversity:				 0.078
--- Run Statistics ---
Number of program evaluations used so far: 98000
Number of point (instruction) evaluations so far: 128932213
--- Timings ---
Current time: 1529615752635 milliseconds
Total Time:         302.7 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       107.7 seconds, 35.6%
Fitness Testing:    154.5 seconds, 51.0%
Report:              40.3 seconds, 13.3%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 97
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 98
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 98
;;******************************
;; -*- Number IO problem report - generation 98
Test total error for best: 52449.0
Test mean error for best: 26.22450
;;------------------------------
Outputs of best individual on training cases:
Correct output: 150.3639690164 | Program output: 57.3639690164 
Correct output: -129.2046261   | Program output: -121.2046261  
Correct output: 43.6336388837  | Program output: 30.6336388837 
Correct output: 168.6824809869 | Program output: 56.6824809869 
Correct output: -24.6347316794 | Program output: -34.6347316794
Correct output: 39.9291320135  | Program output: 10.9291320135 
Correct output: -20.9190282536 | Program output: 16.0809717464 
Correct output: 61.9263871894  | Program output: 51.9263871894 
Correct output: -28.8395473609 | Program output: -30.8395473609
Correct output: -39.146556962  | Program output: -7.146556962  
Correct output: -134.9331989268 | Program output: -118.9331989268
Correct output: -126.4496738486 | Program output: -117.4496738486
Correct output: -51.218440095  | Program output: -90.218440095 
Correct output: 45.5895106217  | Program output: 19.5895106217 
Correct output: 136.6637618296 | Program output: 59.6637618296 
Correct output: -104.5625509424 | Program output: -104.5625509424
Correct output: 80.9125656746  | Program output: 23.9125656746 
Correct output: -63.4657032446 | Program output: -7.4657032446 
Correct output: -52.106433034  | Program output: -51.106433034 
Correct output: -99.9152304515 | Program output: -111.9152304515
Correct output: -78.2834351958 | Program output: -29.2834351958
Correct output: -64.2911152024 | Program output: -46.2911152024
Correct output: 93.5722006381  | Program output: -2.4277993619 
Correct output: 141.452540764  | Program output: 45.452540764  
Correct output: 102.2088941323 | Program output: -2.7911058677 
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_flush} {:instruction float_inc} {:instruction float_yank} {:instruction float_mult} {:instruction float_yankdup} {:instruction float_dup_items} {:instruction in1} {:instruction integer_yank} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_yankdup} {:instruction float_dec} {:instruction float_dec} {:instruction in2} {:instruction integer_div} {:instruction 11} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_div} {:instruction float_dec} {:instruction float_dec} {:instruction float_dup_items} {:instruction integer_dup_times} {:instruction integer_dup_items} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_dup_items} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_dup_items} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction print_integer} {:instruction integer_pop} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_max} {:instruction float_mod} {:instruction float_dec} {:instruction float_dec} {:instruction integer_stackdepth} {:instruction float_max} {:instruction integer_dup_times} {:instruction integer_dup_items} {:instruction float_frominteger} {:instruction float_dec} {:instruction integer_div} {:instruction print_float} {:instruction float_rot})
Best program: (float_flush float_inc float_yank float_mult float_yankdup float_dup_items in1 integer_yank float_dec float_dec float_dec float_dec integer_yankdup float_dec float_dec in2 integer_div 11 float_dec float_dec float_dec float_dec integer_div float_dec float_dec float_dup_items integer_dup_times integer_dup_items float_dec float_dec float_dec float_dec integer_dup_items float_dec float_dec float_dec float_dec float_dec float_dec integer_dup_items float_dec float_dec float_dec print_integer integer_pop float_dec float_dec float_dec float_dec float_dec float_dec float_max float_mod float_dec float_dec integer_stackdepth float_max integer_dup_times integer_dup_items float_frominteger float_dec integer_div print_float float_rot)
Errors: [93.0 2 8.0 1 13.0 2 112.0 2 10.0 1 29.0 2 37.0 12 10.0 1 2.0 2 32.0 2 16.0 2 9.0 2 39.0 2 26.0 2 77.0 3 0.0 0 57.0 2 56.0 2 1.0 1 12.0 3 49.0 2 18.0 2 96.0 10 96.0 2 105.0 12]
Total: 1077.0
Mean: 21.54
Genome size: 64
Size: 65
Percent parens: 0.015
--- Population Statistics ---
Average total errors in population: 3096.4323116999985
Median total errors in population: 1213.0
Error averages by case: (175.2178918 3.488 96.06362949999999 3.02 83.2378948 3.07 192.69425859999996 4.019 77.75654170000004 2.387 96.3828916 3.099 116.34031289999999 11.249 81.51845959999999 2.992 80.00939189999998 2.407 110.42403049999999 5.73 103.30142620000004 3.296 96.8505405 3.304 126.86811159999996 3.778 94.2792218 3.154 160.61812529999995 4.113 88.16484910000001 4.034 139.32678719999998 3.166 132.86185230000004 5.832 85.6163119 3.037 85.74995280000002 3.984 126.90604629999999 3.244 100.24747029999999 3.213 173.545817 10.802 177.5951118 3.809 181.86138470000003 12.767)
Error minima by case: (3.0 1 6.0 1 0.0 0 16.0 1 0.0 0 0.0 0 0.3386 8 0.0 0 0.0 0 1.5606 1 14.0 1 7.0 1 24.0 1 1.0 1 12.0 2 0.0 0 27.6716 1 13.964 1 0.0 0 0.0 0 6.964 1 10.7089 1 39.5174 1 0.0 0 48.968 1)
Average genome size in population (length): 51.186
Average program size in population (points): 52.186
Average percent parens in population: 0.019
Minimum age in population: 137.7869365977867
Maximum age in population: 142.5344453129767
Average age in population: 140.3441823887358
Median age in population: 140.3842766934553
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 35
Genome diversity (% unique Plush genomes):	 0.722
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 35
Syntactic diversity (% unique Push programs):	 0.722
Total error diversity:				 0.108
Error (vector) diversity:			 0.118
Behavioral diversity:				 0.118
--- Run Statistics ---
Number of program evaluations used so far: 99000
Number of point (instruction) evaluations so far: 130211863
--- Timings ---
Current time: 1529615755673 milliseconds
Total Time:         305.7 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       108.8 seconds, 35.6%
Fitness Testing:    156.0 seconds, 51.0%
Report:              40.8 seconds, 13.3%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 98
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 99
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 99
;;******************************
;; -*- Number IO problem report - generation 99
Test total error for best: 52449.0
Test mean error for best: 26.22450
;;------------------------------
Outputs of best individual on training cases:
Correct output: 150.3639690164 | Program output: 57.3639690164 
Correct output: -129.2046261   | Program output: -121.2046261  
Correct output: 43.6336388837  | Program output: 30.6336388837 
Correct output: 168.6824809869 | Program output: 56.6824809869 
Correct output: -24.6347316794 | Program output: -34.6347316794
Correct output: 39.9291320135  | Program output: 10.9291320135 
Correct output: -20.9190282536 | Program output: 16.0809717464 
Correct output: 61.9263871894  | Program output: 51.9263871894 
Correct output: -28.8395473609 | Program output: -30.8395473609
Correct output: -39.146556962  | Program output: -7.146556962  
Correct output: -134.9331989268 | Program output: -118.9331989268
Correct output: -126.4496738486 | Program output: -117.4496738486
Correct output: -51.218440095  | Program output: -90.218440095 
Correct output: 45.5895106217  | Program output: 19.5895106217 
Correct output: 136.6637618296 | Program output: 59.6637618296 
Correct output: -104.5625509424 | Program output: -104.5625509424
Correct output: 80.9125656746  | Program output: 23.9125656746 
Correct output: -63.4657032446 | Program output: -7.4657032446 
Correct output: -52.106433034  | Program output: -51.106433034 
Correct output: -99.9152304515 | Program output: -111.9152304515
Correct output: -78.2834351958 | Program output: -29.2834351958
Correct output: -64.2911152024 | Program output: -46.2911152024
Correct output: 93.5722006381  | Program output: -2.4277993619 
Correct output: 141.452540764  | Program output: 45.452540764  
Correct output: 102.2088941323 | Program output: -2.7911058677 
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_flush} {:instruction float_inc} {:instruction float_yank} {:instruction float_mult} {:instruction float_yankdup} {:instruction float_dup_items} {:instruction in1} {:instruction integer_yank} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_yankdup} {:instruction float_dec} {:instruction float_dec} {:instruction in2} {:instruction integer_div} {:instruction 11} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_div} {:instruction float_dec} {:instruction float_dec} {:instruction float_dup_items} {:instruction integer_dup_times} {:instruction integer_dup_items} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_dup_items} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_dup_items} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction print_integer} {:instruction integer_pop} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_max} {:instruction float_mod} {:instruction float_dec} {:instruction float_dec} {:instruction integer_stackdepth} {:instruction float_max} {:instruction integer_dup_times} {:instruction integer_dup_items} {:instruction float_frominteger} {:instruction float_dec} {:instruction integer_div} {:instruction print_float} {:instruction float_rot})
Best program: (float_flush float_inc float_yank float_mult float_yankdup float_dup_items in1 integer_yank float_dec float_dec float_dec float_dec integer_yankdup float_dec float_dec in2 integer_div 11 float_dec float_dec float_dec float_dec integer_div float_dec float_dec float_dup_items integer_dup_times integer_dup_items float_dec float_dec float_dec float_dec integer_dup_items float_dec float_dec float_dec float_dec float_dec float_dec integer_dup_items float_dec float_dec float_dec print_integer integer_pop float_dec float_dec float_dec float_dec float_dec float_dec float_max float_mod float_dec float_dec integer_stackdepth float_max integer_dup_times integer_dup_items float_frominteger float_dec integer_div print_float float_rot)
Errors: [93.0 2 8.0 1 13.0 2 112.0 2 10.0 1 29.0 2 37.0 12 10.0 1 2.0 2 32.0 2 16.0 2 9.0 2 39.0 2 26.0 2 77.0 3 0.0 0 57.0 2 56.0 2 1.0 1 12.0 3 49.0 2 18.0 2 96.0 10 96.0 2 105.0 12]
Total: 1077.0
Mean: 21.54
Genome size: 64
Size: 65
Percent parens: 0.015
--- Population Statistics ---
Average total errors in population: 3188.8705099999997
Median total errors in population: 1178.0
Error averages by case: (181.1332949 3.399 97.77901379999994 2.916 83.8844516 2.905 198.13091139999995 3.796 83.48476960000004 2.288 95.9406215 2.945 118.17230129999997 11.264 82.27298939999996 2.799 86.06260560000001 2.358 111.08774550000001 6.81 105.03521060000001 3.221 98.55614299999998 3.218 133.99493339999995 3.557 94.44458580000001 3.0 166.80707809999998 4.059 89.9765841 3.899 146.16016739999995 3.164 134.05534790000002 6.953 89.33247840000001 2.936 87.12470520000001 3.855 132.6348874 3.136 104.7572217 3.122 182.25684109999997 10.364 183.52120980000004 3.475 190.4064115 12.419)
Error minima by case: (8.0 1 4.0 1 0.0 0 27.0 1 0.0 0 0.0 0 4.081 8 0.0 0 0.0 0 1.2385 1 12.0 1 5.0 1 9.6134 1 0.0 0 8.0 1 0.0 0 38.9126 1 25.5576 1 0.0 0 0.0 0 4.7166 1 11.2911 1 12.5722 1 11.0 1 12.2089 1)
Average genome size in population (length): 53.876
Average program size in population (points): 54.876
Average percent parens in population: 0.018
Minimum age in population: 139.4676340982158
Maximum age in population: 143.8168034638577
Average age in population: 141.8154523519127
Median age in population: 141.8076031140234
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 107
Genome diversity (% unique Plush genomes):	 0.685
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 107
Syntactic diversity (% unique Push programs):	 0.685
Total error diversity:				 0.155
Error (vector) diversity:			 0.182
Behavioral diversity:				 0.183
--- Run Statistics ---
Number of program evaluations used so far: 100000
Number of point (instruction) evaluations so far: 131558763
--- Timings ---
Current time: 1529615758888 milliseconds
Total Time:         308.9 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       110.0 seconds, 35.6%
Fitness Testing:    157.6 seconds, 51.0%
Report:              41.2 seconds, 13.3%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 99
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 100
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 100
;;******************************
;; -*- Number IO problem report - generation 100
Test total error for best: 51936.0
Test mean error for best: 25.96800
;;------------------------------
Outputs of best individual on training cases:
Correct output: 150.3639690164 | Program output: 60.3639690164 
Correct output: -129.2046261   | Program output: -115.2046261  
Correct output: 43.6336388837  | Program output: 36.6336388837 
Correct output: 168.6824809869 | Program output: 59.6824809869 
Correct output: -24.6347316794 | Program output: -28.6347316794
Correct output: 39.9291320135  | Program output: 16.9291320135 
Correct output: -20.9190282536 | Program output: 22.0809717464 
Correct output: 61.9263871894  | Program output: 57.9263871894 
Correct output: -28.8395473609 | Program output: -24.8395473609
Correct output: -39.146556962  | Program output: -1.146556962  
Correct output: -134.9331989268 | Program output: -112.9331989268
Correct output: -126.4496738486 | Program output: -111.4496738486
Correct output: -51.218440095  | Program output: -87.218440095 
Correct output: 45.5895106217  | Program output: 25.5895106217 
Correct output: 136.6637618296 | Program output: 62.6637618296 
Correct output: -104.5625509424 | Program output: -98.5625509424
Correct output: 80.9125656746  | Program output: 26.9125656746 
Correct output: -63.4657032446 | Program output: -1.4657032446 
Correct output: -52.106433034  | Program output: -45.106433034 
Correct output: -99.9152304515 | Program output: -105.9152304515
Correct output: -78.2834351958 | Program output: -23.2834351958
Correct output: -64.2911152024 | Program output: -40.2911152024
Correct output: 93.5722006381  | Program output: 0.5722006381  
Correct output: 141.452540764  | Program output: 48.452540764  
Correct output: 102.2088941323 | Program output: 0.2088941323  
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_flush} {:instruction float_inc} {:instruction float_yank} {:instruction float_mult} {:instruction float_yankdup} {:instruction float_dup_items} {:instruction in1} {:instruction integer_yank} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction in2} {:instruction integer_div} {:instruction 11} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_div} {:instruction float_dec} {:instruction float_dec} {:instruction float_dup_items} {:instruction integer_dup_times} {:instruction integer_dup_items} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_dup_items} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_dup_items} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction print_integer} {:instruction integer_pop} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_max} {:instruction float_mod} {:instruction float_dec} {:instruction float_dec} {:instruction integer_stackdepth} {:instruction float_max} {:instruction integer_dup_times} {:instruction integer_dup_items} {:instruction float_frominteger} {:instruction float_dec} {:instruction integer_div} {:instruction print_float} {:instruction float_rot})
Best program: (float_flush float_inc float_yank float_mult float_yankdup float_dup_items in1 integer_yank float_dec float_dec float_dec in2 integer_div 11 float_dec float_dec float_dec float_dec integer_div float_dec float_dec float_dup_items integer_dup_times integer_dup_items float_dec float_dec float_dec float_dec integer_dup_items float_dec float_dec float_dec float_dec integer_dup_items float_dec float_dec float_dec print_integer integer_pop float_dec float_dec float_dec float_dec float_dec float_max float_mod float_dec float_dec integer_stackdepth float_max integer_dup_times integer_dup_items float_frominteger float_dec integer_div print_float float_rot)
Errors: [90.0 2 14.0 2 7.0 2 109.0 3 4.0 1 23.0 2 43.0 11 4.0 2 4.0 1 38.0 2 22.0 2 15.0 2 36.0 2 20.0 1 74.0 3 6.0 3 54.0 2 62.0 2 7.0 2 6.0 3 55.0 2 24.0 2 93.0 2 93.0 2 102.0 2]
Total: 1065.0
Mean: 21.3
Genome size: 57
Size: 58
Percent parens: 0.017
--- Population Statistics ---
Average total errors in population: 3385.9970393
Median total errors in population: 1116.0
Error averages by case: (174.2795208 3.502 112.63471229999999 3.123 99.0892135 3.13 191.58912209999994 3.72 98.04042839999998 2.567 109.75637219999997 3.168 132.00099509999998 11.331 97.54736269999994 3.002 100.25941970000002 2.614 126.07911209999995 6.453 119.75458200000003 3.516 113.36916009999995 3.492 126.48924429999994 3.412 108.96308720000002 3.211 159.7199295 4.278 104.81532840000001 4.081 139.6473571 3.338 149.469339 6.63 103.54853280000002 3.141 102.36572840000004 4.088 146.17965139999993 3.402 118.72644070000003 3.341 176.63657430000004 9.871 176.55979630000004 3.39 184.90802889999998 11.767)
Error minima by case: (41.636 1 4.0 1 0.0 0 61.3175 1 0.0 0 0.0 0 1.8717 8 0.0 0 0.0 0 14.1078 1 12.0 1 5.0 1 24.0 1 0.0 0 23.3362 1 0.0 0 2.2556 1 26.5343 1 0.0 0 0.0 0 4.7166 1 10.7089 1 12.5722 1 56.5475 1 12.2089 1)
Average genome size in population (length): 56.341
Average program size in population (points): 57.341
Average percent parens in population: 0.018
Minimum age in population: 140.7377618329787
Maximum age in population: 145.4337228681992
Average age in population: 143.1906798151714
Median age in population: 143.2219182446988
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 180
Genome diversity (% unique Plush genomes):	 0.656
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 180
Syntactic diversity (% unique Push programs):	 0.656
Total error diversity:				 0.175
Error (vector) diversity:			 0.215
Behavioral diversity:				 0.215
--- Run Statistics ---
Number of program evaluations used so far: 101000
Number of point (instruction) evaluations so far: 132967288
--- Timings ---
Current time: 1529615761949 milliseconds
Total Time:         312.0 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       111.0 seconds, 35.6%
Fitness Testing:    159.2 seconds, 51.0%
Report:              41.6 seconds, 13.3%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 100
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 101
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 101
;;******************************
;; -*- Number IO problem report - generation 101
Test total error for best: 50332.0
Test mean error for best: 25.16600
;;------------------------------
Outputs of best individual on training cases:
Correct output: 150.3639690164 | Program output: 60.3639690164 
Correct output: -129.2046261   | Program output: -119.2046261  
Correct output: 43.6336388837  | Program output: 32.6336388837 
Correct output: 168.6824809869 | Program output: 59.6824809869 
Correct output: -24.6347316794 | Program output: -32.6347316794
Correct output: 39.9291320135  | Program output: 12.9291320135 
Correct output: -20.9190282536 | Program output: 18.0809717464 
Correct output: 61.9263871894  | Program output: 53.9263871894 
Correct output: -28.8395473609 | Program output: -28.8395473609
Correct output: -39.146556962  | Program output: -5.146556962  
Correct output: -134.9331989268 | Program output: -116.9331989268
Correct output: -126.4496738486 | Program output: -115.4496738486
Correct output: -51.218440095  | Program output: -87.218440095 
Correct output: 45.5895106217  | Program output: 21.5895106217 
Correct output: 136.6637618296 | Program output: 62.6637618296 
Correct output: -104.5625509424 | Program output: -102.5625509424
Correct output: 80.9125656746  | Program output: 26.9125656746 
Correct output: -63.4657032446 | Program output: -5.4657032446 
Correct output: -52.106433034  | Program output: -49.106433034 
Correct output: -99.9152304515 | Program output: -109.9152304515
Correct output: -78.2834351958 | Program output: -27.2834351958
Correct output: -64.2911152024 | Program output: -44.2911152024
Correct output: 93.5722006381  | Program output: 0.5722006381  
Correct output: 141.452540764  | Program output: 48.452540764  
Correct output: 102.2088941323 | Program output: 0.2088941323  
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_flush} {:instruction float_inc} {:instruction float_yank} {:instruction float_mult} {:instruction float_yankdup} {:instruction float_dup_items} {:instruction in1} {:instruction integer_yank} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_yankdup} {:instruction float_dec} {:instruction float_dec} {:instruction in2} {:instruction float_dec} {:instruction integer_div} {:instruction float_dec} {:instruction float_dec} {:instruction float_dup_items} {:instruction integer_dup_times} {:instruction integer_dup_items} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_frominteger} {:instruction integer_dup_items} {:instruction float_dec} {:instruction integer_dup_items} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction print_integer} {:instruction integer_pop} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_dup_items} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction print_integer} {:instruction integer_pop} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_max} {:instruction float_mod} {:instruction float_dec} {:instruction float_dec} {:instruction integer_stackdepth} {:instruction float_max} {:instruction integer_dup_times} {:instruction integer_dup_items} {:instruction float_frominteger} {:instruction float_dec} {:instruction integer_div} {:instruction print_float} {:instruction float_rot})
Best program: (float_flush float_inc float_yank float_mult float_yankdup float_dup_items in1 integer_yank float_dec float_dec float_dec float_dec integer_yankdup float_dec float_dec in2 float_dec integer_div float_dec float_dec float_dup_items integer_dup_times integer_dup_items float_dec float_dec float_dec float_frominteger integer_dup_items float_dec integer_dup_items float_dec float_dec float_dec print_integer integer_pop float_dec float_dec float_dec float_dec float_dec integer_dup_items float_dec float_dec float_dec print_integer integer_pop float_dec float_dec float_dec float_dec float_dec float_max float_mod float_dec float_dec integer_stackdepth float_max integer_dup_times integer_dup_items float_frominteger float_dec integer_div print_float float_rot)
Errors: [90.0 2 10.0 1 11.0 2 109.0 3 8.0 2 27.0 2 39.0 12 8.0 2 0.0 0 34.0 2 18.0 2 11.0 2 36.0 2 24.0 2 74.0 3 2.0 1 54.0 2 58.0 2 3.0 2 10.0 2 51.0 2 20.0 1 93.0 2 93.0 2 102.0 2]
Total: 1042.0
Mean: 20.84
Genome size: 64
Size: 65
Percent parens: 0.015
--- Population Statistics ---
Average total errors in population: 2954.101225
Median total errors in population: 1112.0
Error averages by case: (166.0281609 3.836 89.90507099999996 2.865 79.62481550000001 2.834 183.48275050000004 4.064 77.2467666 2.402 90.18053729999997 2.927 111.03012079999996 11.398 78.11055879999998 2.746 77.74254669999999 2.43 105.74889689999998 5.528 97.1775491 3.251 90.67620129999999 3.241 122.48170809999993 3.754 89.35885380000003 2.927 151.34072459999996 4.545 82.11514089999999 3.508 130.64479489999997 3.635 128.73296679999999 5.679 80.67273299999998 2.859 80.78333310000001 3.874 124.41681729999996 3.215 96.16770469999999 3.095 167.4061233000001 9.238 168.8354736 3.76 175.69687550000006 10.883)
Error minima by case: (19.636 1 1.0 1 0.0 0 39.3175 2 0.0 0 0.0 0 0.153 9 0.0 0 0.0 0 5.8065 1 5.0 1 2.0 1 9.9753 1 0.0 0 1.3362 2 0.0 0 17.0874 1 29.8566 1 0.0 0 0.0 0 38.0 1 0.7089 1 81.0 1 34.5475 1 90.0 1)
Average genome size in population (length): 58.007
Average program size in population (points): 59.007
Average percent parens in population: 0.017
Minimum age in population: 142.227415829047
Maximum age in population: 146.3494451722687
Average age in population: 144.5693288234638
Median age in population: 144.6410341604131
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 94
Genome diversity (% unique Plush genomes):	 0.685
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 94
Syntactic diversity (% unique Push programs):	 0.685
Total error diversity:				 0.202
Error (vector) diversity:			 0.244
Behavioral diversity:				 0.245
--- Run Statistics ---
Number of program evaluations used so far: 102000
Number of point (instruction) evaluations so far: 134417463
--- Timings ---
Current time: 1529615765210 milliseconds
Total Time:         315.2 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       112.1 seconds, 35.6%
Fitness Testing:    160.9 seconds, 51.0%
Report:              42.1 seconds, 13.4%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 101
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 102
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 102
;;******************************
;; -*- Number IO problem report - generation 102
Test total error for best: 49742.0
Test mean error for best: 24.87100
;;------------------------------
Outputs of best individual on training cases:
Correct output: 150.3639690164 | Program output: 60.3639690164 
Correct output: -129.2046261   | Program output: -117.2046261  
Correct output: 43.6336388837  | Program output: 34.6336388837 
Correct output: 168.6824809869 | Program output: 59.6824809869 
Correct output: -24.6347316794 | Program output: -30.6347316794
Correct output: 39.9291320135  | Program output: 32.9291320135 
Correct output: -20.9190282536 | Program output: 20.0809717464 
Correct output: 61.9263871894  | Program output: 55.9263871894 
Correct output: -28.8395473609 | Program output: -26.8395473609
Correct output: -39.146556962  | Program output: -3.146556962  
Correct output: -134.9331989268 | Program output: -114.9331989268
Correct output: -126.4496738486 | Program output: -113.4496738486
Correct output: -51.218440095  | Program output: -87.218440095 
Correct output: 45.5895106217  | Program output: 41.5895106217 
Correct output: 136.6637618296 | Program output: 62.6637618296 
Correct output: -104.5625509424 | Program output: -100.5625509424
Correct output: 80.9125656746  | Program output: 26.9125656746 
Correct output: -63.4657032446 | Program output: -3.4657032446 
Correct output: -52.106433034  | Program output: -47.106433034 
Correct output: -99.9152304515 | Program output: -107.9152304515
Correct output: -78.2834351958 | Program output: -25.2834351958
Correct output: -64.2911152024 | Program output: -42.2911152024
Correct output: 93.5722006381  | Program output: 0.5722006381  
Correct output: 141.452540764  | Program output: 48.452540764  
Correct output: 102.2088941323 | Program output: 0.2088941323  
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_flush} {:instruction float_inc} {:instruction float_yank} {:instruction float_mult} {:instruction float_yankdup} {:instruction float_dup_items} {:instruction in1} {:instruction integer_yank} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_yankdup} {:instruction float_dec} {:instruction float_dec} {:instruction in2} {:instruction integer_div} {:instruction 11} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_div} {:instruction float_dec} {:instruction integer_inc} {:instruction float_dup_items} {:instruction integer_dup_times} {:instruction integer_dup_items} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_frominteger} {:instruction integer_dup_items} {:instruction float_dec} {:instruction integer_dup_items} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction print_integer} {:instruction integer_pop} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction print_integer} {:instruction integer_pop} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_stackdepth} {:instruction float_max} {:instruction integer_dup_times} {:instruction integer_dup_items} {:instruction float_frominteger} {:instruction float_dec} {:instruction integer_div} {:instruction print_float} {:instruction float_rot})
Best program: (float_flush float_inc float_yank float_mult float_yankdup float_dup_items in1 integer_yank float_dec float_dec float_dec float_dec integer_yankdup float_dec float_dec in2 integer_div 11 float_dec float_dec float_dec float_dec integer_div float_dec integer_inc float_dup_items integer_dup_times integer_dup_items float_dec float_dec float_dec float_frominteger integer_dup_items float_dec integer_dup_items float_dec float_dec float_dec print_integer integer_pop float_dec float_dec float_dec float_dec float_dec float_dec print_integer integer_pop float_dec float_dec float_dec float_dec float_dec integer_stackdepth float_max integer_dup_times integer_dup_items float_frominteger float_dec integer_div print_float float_rot)
Errors: [90.0 2 12.0 2 9.0 2 109.0 3 6.0 2 7.0 1 41.0 10 6.0 2 2.0 1 36.0 1 20.0 1 13.0 2 36.0 2 4.0 1 74.0 3 4.0 1 54.0 2 60.0 1 5.0 2 8.0 3 53.0 2 22.0 2 93.0 2 93.0 2 102.0 2]
Total: 1013.0
Mean: 20.26
Genome size: 62
Size: 63
Percent parens: 0.016
--- Population Statistics ---
Average total errors in population: 3505.8312492000014
Median total errors in population: 1088.18095
Error averages by case: (180.05043879999988 4.253 113.77682929999996 2.944 105.55954210000002 3.239 197.14606010000017 4.497 104.99806159999993 3.047 117.28035699999995 3.262 131.88958039999997 11.65 104.03180569999994 3.149 102.66510510000003 2.939 127.61144699999996 4.822 120.8258434 3.625 114.52850739999995 3.541 143.76466790000006 4.236 115.41196190000001 3.278 165.61092630000007 4.888 106.60334590000008 3.379 147.13554960000002 3.995 150.48321130000002 4.938 104.84427250000006 3.02 109.78355000000009 4.244 146.94513179999998 3.551 119.38227050000003 3.467 185.20676140000018 9.031 183.24029329999976 4.205 193.3307289000001 10.525)
Error minima by case: (32.636 1 0.0 0 0.0 0 52.3175 1 0.0 0 0.0 0 0.4604 2 0.0 0 0.0 0 0.4738 1 2.0 1 0.0 0 11.5981 1 0.0 0 14.3362 1 0.0 0 25.8145 1 23.8454 1 0.0 0 0.0 0 4.7166 1 0.0 0 12.5722 1 47.5475 1 12.2089 1)
Average genome size in population (length): 62.273
Average program size in population (points): 63.273
Average percent parens in population: 0.016
Minimum age in population: 143.8051226700735
Maximum age in population: 147.9405566502785
Average age in population: 146.0081038551878
Median age in population: 146.0223127426819
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 24
Genome diversity (% unique Plush genomes):	 0.755
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 24
Syntactic diversity (% unique Push programs):	 0.755
Total error diversity:				 0.224
Error (vector) diversity:			 0.291
Behavioral diversity:				 0.292
--- Run Statistics ---
Number of program evaluations used so far: 103000
Number of point (instruction) evaluations so far: 135974288
--- Timings ---
Current time: 1529615768433 milliseconds
Total Time:         318.5 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       113.2 seconds, 35.6%
Fitness Testing:    162.6 seconds, 51.1%
Report:              42.5 seconds, 13.4%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 102
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 103
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 103
;;******************************
;; -*- Number IO problem report - generation 103
Test total error for best: 48133.0
Test mean error for best: 24.06650
;;------------------------------
Outputs of best individual on training cases:
Correct output: 150.3639690164 | Program output: 64.3639690164 
Correct output: -129.2046261   | Program output: -119.2046261  
Correct output: 43.6336388837  | Program output: 32.6336388837 
Correct output: 168.6824809869 | Program output: 63.6824809869 
Correct output: -24.6347316794 | Program output: -32.6347316794
Correct output: 39.9291320135  | Program output: 12.9291320135 
Correct output: -20.9190282536 | Program output: 18.0809717464 
Correct output: 61.9263871894  | Program output: 53.9263871894 
Correct output: -28.8395473609 | Program output: -28.8395473609
Correct output: -39.146556962  | Program output: -5.146556962  
Correct output: -134.9331989268 | Program output: -116.9331989268
Correct output: -126.4496738486 | Program output: -115.4496738486
Correct output: -51.218440095  | Program output: -83.218440095 
Correct output: 45.5895106217  | Program output: 21.5895106217 
Correct output: 136.6637618296 | Program output: 66.6637618296 
Correct output: -104.5625509424 | Program output: -102.5625509424
Correct output: 80.9125656746  | Program output: 30.9125656746 
Correct output: -63.4657032446 | Program output: -5.4657032446 
Correct output: -52.106433034  | Program output: -49.106433034 
Correct output: -99.9152304515 | Program output: -109.9152304515
Correct output: -78.2834351958 | Program output: -27.2834351958
Correct output: -64.2911152024 | Program output: -44.2911152024
Correct output: 93.5722006381  | Program output: 4.5722006381  
Correct output: 141.452540764  | Program output: 52.452540764  
Correct output: 102.2088941323 | Program output: 4.2088941323  
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_flush} {:instruction float_inc} {:instruction float_yank} {:instruction float_mult} {:instruction float_yankdup} {:instruction integer_swap} {:instruction in1} {:instruction integer_yank} {:instruction integer_sub} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_yankdup} {:instruction float_dec} {:instruction float_dec} {:instruction in2} {:instruction integer_div} {:instruction float_dec} {:instruction integer_dup_items} {:instruction in2} {:instruction float_dec} {:instruction float_dup_items} {:instruction integer_dup_times} {:instruction integer_dup_items} {:instruction float_dec} {:instruction float_dec} {:instruction float_dup_items} {:instruction integer_dup_times} {:instruction float_dec} {:instruction float_dec} {:instruction float_dup_items} {:instruction integer_dup_times} {:instruction integer_dup_items} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_frominteger} {:instruction integer_dup_items} {:instruction float_dec} {:instruction integer_dup_items} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction print_integer} {:instruction integer_pop} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_dup_items} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction print_integer} {:instruction integer_pop} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_max} {:instruction integer_flush} {:instruction float_dec} {:instruction integer_div} {:instruction print_float} {:instruction integer_yankdup} {:instruction print_float} {:instruction float_rot} {:instruction integer_dup_items} {:instruction float_cos} {:instruction integer_mod} {:instruction integer_min} {:instruction float_cos})
Best program: (float_flush float_inc float_yank float_mult float_yankdup integer_swap in1 integer_yank integer_sub float_dec float_dec float_dec integer_yankdup float_dec float_dec in2 integer_div float_dec integer_dup_items in2 float_dec float_dup_items integer_dup_times integer_dup_items float_dec float_dec float_dup_items integer_dup_times float_dec float_dec float_dup_items integer_dup_times integer_dup_items float_dec float_dec float_dec float_frominteger integer_dup_items float_dec integer_dup_items float_dec float_dec float_dec print_integer integer_pop float_dec float_dec float_dec float_dec float_dec integer_dup_items float_dec float_dec float_dec print_integer integer_pop float_dec float_dec float_dec float_dec float_dec float_max integer_flush float_dec integer_div print_float integer_yankdup print_float float_rot integer_dup_items float_cos integer_mod integer_min float_cos)
Errors: [86.0 3 10.0 1 11.0 2 105.0 2 8.0 2 27.0 2 39.0 12 8.0 2 0.0 0 34.0 2 18.0 2 11.0 2 32.0 2 24.0 2 70.0 2 2.0 1 50.0 1 58.0 2 3.0 2 10.0 2 51.0 2 20.0 1 89.0 2 89.0 3 98.0 3]
Total: 1010.0
Mean: 20.2
Genome size: 74
Size: 75
Percent parens: 0.013
--- Population Statistics ---
Average total errors in population: 3326.8638385000004
Median total errors in population: 1073.0
Error averages by case: (175.05943549999995 4.08 106.02018689999996 2.776 98.94280759999998 3.089 192.26389900000007 4.235 97.980377 2.849 111.46880409999997 3.12 126.1444236 11.63 97.21086949999999 3.017 95.83473350000001 2.632 123.30769039999994 4.623 113.1121093 3.422 106.80396479999997 3.328 135.85050569999996 3.928 109.06804310000001 3.064 160.47786570000005 4.499 98.9530311 3.249 140.07575040000006 3.72 145.11360740000003 4.686 97.827573 2.858 101.88503360000003 4.018 140.23747859999995 3.277 112.58739100000001 3.23 174.7184395000002 7.33 177.96269109999997 3.928 182.8911271000001 8.478)
Error minima by case: (31.636 1 0.0 0 0.0 0 51.3175 1 0.0 0 0.0 0 0.0309 8 0.0 0 0.0 0 4.8065 1 2.0 1 0.0 0 24.0 1 0.0 0 13.3362 1 0.0 0 5.8499 1 27.0422 1 0.0 0 0.0 0 34.0422 1 4.0 1 6.8097 1 46.5475 1 10.15 1)
Average genome size in population (length): 62.997
Average program size in population (points): 63.997
Average percent parens in population: 0.016
Minimum age in population: 144.9899437701392
Maximum age in population: 149.3667191350251
Average age in population: 147.3343113041207
Median age in population: 147.3460313560478
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 22
Genome diversity (% unique Plush genomes):	 0.734
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 22
Syntactic diversity (% unique Push programs):	 0.734
Total error diversity:				 0.23
Error (vector) diversity:			 0.296
Behavioral diversity:				 0.297
--- Run Statistics ---
Number of program evaluations used so far: 104000
Number of point (instruction) evaluations so far: 137549213
--- Timings ---
Current time: 1529615771756 milliseconds
Total Time:         321.7 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       114.3 seconds, 35.5%
Fitness Testing:    164.3 seconds, 51.1%
Report:              43.0 seconds, 13.4%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 103
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 104
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 104
;;******************************
;; -*- Number IO problem report - generation 104
Test total error for best: 40740.821100000016
Test mean error for best: 20.37041
;;------------------------------
Outputs of best individual on training cases:
Correct output: 150.3639690164 | Program output: 68.3639690164 
Correct output: -129.2046261   | Program output: -120.2046261  
Correct output: 43.6336388837  | Program output: 31.6336388837 
Correct output: 168.6824809869 | Program output: 67.6824809869 
Correct output: -24.6347316794 | Program output: -33.6347316794
Correct output: 39.9291320135  | Program output: 21.9291320135 
Correct output: -20.9190282536 | Program output: 17.0809717464 
Correct output: 61.9263871894  | Program output: 52.9263871894 
Correct output: -28.8395473609 | Program output: -29.8395473609
Correct output: -39.146556962  | Program output: -6.146556962  
Correct output: -134.9331989268 | Program output: -117.9331989268
Correct output: -126.4496738486 | Program output: -116.4496738486
Correct output: -51.218440095  | Program output: -20.0         
Correct output: 45.5895106217  | Program output: 30.5895106217 
Correct output: 136.6637618296 | Program output: 70.6637618296 
Correct output: -104.5625509424 | Program output: -103.5625509424
Correct output: 80.9125656746  | Program output: 34.9125656746 
Correct output: -63.4657032446 | Program output: -6.4657032446 
Correct output: -52.106433034  | Program output: -50.106433034 
Correct output: -99.9152304515 | Program output: -110.9152304515
Correct output: -78.2834351958 | Program output: -28.2834351958
Correct output: -64.2911152024 | Program output: -45.2911152024
Correct output: 93.5722006381  | Program output: 8.5722006381  
Correct output: 141.452540764  | Program output: 56.452540764  
Correct output: 102.2088941323 | Program output: 8.2088941323  
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_flush} {:instruction float_inc} {:instruction float_yank} {:instruction float_mult} {:instruction float_yankdup} {:instruction float_dup_items} {:instruction in1} {:instruction integer_yank} {:instruction float_dec} {:instruction float_dec} {:instruction integer_dup_items} {:instruction in2} {:instruction float_dec} {:instruction float_dup_items} {:instruction integer_dup_times} {:instruction integer_dup_items} {:instruction float_dec} {:instruction float_dec} {:instruction float_dup_items} {:instruction integer_dup_times} {:instruction tagged_539} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_dup_items} {:instruction integer_dup_items} {:instruction integer_inc} {:instruction integer_dup_items} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_div} {:instruction float_dec} {:instruction float_dec} {:instruction in2} {:instruction integer_swap} {:instruction 11} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_add} {:instruction float_dec} {:instruction float_dec} {:instruction float_dup_items} {:instruction integer_inc} {:instruction integer_dup_items} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_dup_items} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction print_integer} {:instruction integer_pop} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_inc} {:instruction float_max} {:instruction float_mod} {:instruction float_dec} {:instruction float_dec} {:instruction integer_stackdepth} {:instruction float_max} {:instruction integer_dup_times} {:instruction integer_dup_items} {:instruction float_frominteger} {:instruction float_dec} {:instruction integer_div} {:instruction print_float})
Best program: (float_flush float_inc float_yank float_mult float_yankdup float_dup_items in1 integer_yank float_dec float_dec integer_dup_items in2 float_dec float_dup_items integer_dup_times integer_dup_items float_dec float_dec float_dup_items integer_dup_times tagged_539 float_dec float_dec float_dec float_dec integer_dup_items integer_dup_items integer_inc integer_dup_items float_dec float_dec float_dec integer_div float_dec float_dec in2 integer_swap 11 float_dec float_dec float_dec float_dec integer_add float_dec float_dec float_dup_items integer_inc integer_dup_items float_dec float_dec float_dec float_dec integer_dup_items float_dec float_dec float_dec print_integer integer_pop float_dec float_dec float_dec float_dec float_inc float_max float_mod float_dec float_dec integer_stackdepth float_max integer_dup_times integer_dup_items float_frominteger float_dec integer_div print_float)
Errors: [82.0 3 9.0 1 12.0 2 101.0 2 9.0 2 18.0 2 38.0 12 9.0 2 1.0 1 33.0 2 17.0 2 10.0 1 31.2184 10 15.0 2 66.0 3 1.0 1 46.0 2 57.0 1 2.0 1 11.0 3 50.0 1 19.0 2 85.0 2 85.0 3 94.0 3]
Total: 967.2184
Mean: 19.344368
Genome size: 75
Size: 76
Percent parens: 0.013
--- Population Statistics ---
Average total errors in population: 3428.6011004
Median total errors in population: 1056.0
Error averages by case: (180.0044457 4.124 111.16653929999994 2.895 103.6006325 3.162 197.10012129999998 4.06 101.98210449999996 2.949 112.05752319999996 3.131 130.5292422 11.589 101.97388349999999 3.16 99.55892310000002 2.642 126.45973369999996 4.303 118.3160938 3.479 111.92224409999996 3.431 134.99218039999988 3.764 111.31331899999999 3.116 165.64407109999993 4.329 104.04925470000002 3.349 145.40622349999995 3.572 149.68198759999996 4.401 102.16610690000003 3.015 107.03948770000004 4.106 144.66951390000006 3.343 116.8111768 3.302 180.66621570000004 5.095 182.4226262999999 3.822 189.16744990000004 5.761)
Error minima by case: (31.636 1 0.0 0 0.0 0 51.3175 1 0.0 0 0.0 0 0.3922 9 0.0 0 0.0 0 6.5257 1 3.0 1 0.0 0 4.7816 1 0.0 0 13.3362 2 0.0 0 29.0874 1 7.4657 1 0.0 0 0.0 0 4.7166 1 5.0 1 12.5722 1 46.5475 1 12.2089 1)
Average genome size in population (length): 64.083
Average program size in population (points): 65.083
Average percent parens in population: 0.016
Minimum age in population: 146.2579693060847
Maximum age in population: 150.7707645696588
Average age in population: 148.8086501779544
Median age in population: 148.8457434473016
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 19
Genome diversity (% unique Plush genomes):	 0.728
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 19
Syntactic diversity (% unique Push programs):	 0.728
Total error diversity:				 0.234
Error (vector) diversity:			 0.293
Behavioral diversity:				 0.294
--- Run Statistics ---
Number of program evaluations used so far: 105000
Number of point (instruction) evaluations so far: 139151288
--- Timings ---
Current time: 1529615775170 milliseconds
Total Time:         325.2 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       115.5 seconds, 35.5%
Fitness Testing:    166.1 seconds, 51.1%
Report:              43.5 seconds, 13.4%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 104
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 105
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 105
;;******************************
;; -*- Number IO problem report - generation 105
Test total error for best: 40740.821100000016
Test mean error for best: 20.37041
;;------------------------------
Outputs of best individual on training cases:
Correct output: 150.3639690164 | Program output: 68.3639690164 
Correct output: -129.2046261   | Program output: -120.2046261  
Correct output: 43.6336388837  | Program output: 31.6336388837 
Correct output: 168.6824809869 | Program output: 67.6824809869 
Correct output: -24.6347316794 | Program output: -33.6347316794
Correct output: 39.9291320135  | Program output: 21.9291320135 
Correct output: -20.9190282536 | Program output: 17.0809717464 
Correct output: 61.9263871894  | Program output: 52.9263871894 
Correct output: -28.8395473609 | Program output: -29.8395473609
Correct output: -39.146556962  | Program output: -6.146556962  
Correct output: -134.9331989268 | Program output: -117.9331989268
Correct output: -126.4496738486 | Program output: -116.4496738486
Correct output: -51.218440095  | Program output: -20.0         
Correct output: 45.5895106217  | Program output: 30.5895106217 
Correct output: 136.6637618296 | Program output: 70.6637618296 
Correct output: -104.5625509424 | Program output: -103.5625509424
Correct output: 80.9125656746  | Program output: 34.9125656746 
Correct output: -63.4657032446 | Program output: -6.4657032446 
Correct output: -52.106433034  | Program output: -50.106433034 
Correct output: -99.9152304515 | Program output: -110.9152304515
Correct output: -78.2834351958 | Program output: -28.2834351958
Correct output: -64.2911152024 | Program output: -45.2911152024
Correct output: 93.5722006381  | Program output: 8.5722006381  
Correct output: 141.452540764  | Program output: 56.452540764  
Correct output: 102.2088941323 | Program output: 8.2088941323  
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_flush} {:instruction float_inc} {:instruction float_yank} {:instruction float_mult} {:instruction float_yankdup} {:instruction float_dup_items} {:instruction in1} {:instruction integer_yank} {:instruction float_dec} {:instruction float_dec} {:instruction integer_dup_items} {:instruction in2} {:instruction float_dec} {:instruction float_dup_items} {:instruction integer_dup_times} {:instruction integer_dup_items} {:instruction float_dec} {:instruction float_dec} {:instruction float_dup_items} {:instruction integer_dup_times} {:instruction tagged_539} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_dup_items} {:instruction integer_dup_items} {:instruction integer_inc} {:instruction integer_dup_items} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_div} {:instruction float_dec} {:instruction float_dec} {:instruction in2} {:instruction integer_swap} {:instruction 11} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_add} {:instruction float_dec} {:instruction float_dec} {:instruction float_dup_items} {:instruction integer_inc} {:instruction integer_dup_items} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_dup_items} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction print_integer} {:instruction integer_pop} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_inc} {:instruction float_max} {:instruction float_mod} {:instruction float_dec} {:instruction float_dec} {:instruction integer_stackdepth} {:instruction float_max} {:instruction integer_dup_times} {:instruction integer_dup_items} {:instruction float_frominteger} {:instruction float_dec} {:instruction integer_div} {:instruction print_float})
Best program: (float_flush float_inc float_yank float_mult float_yankdup float_dup_items in1 integer_yank float_dec float_dec integer_dup_items in2 float_dec float_dup_items integer_dup_times integer_dup_items float_dec float_dec float_dup_items integer_dup_times tagged_539 float_dec float_dec float_dec float_dec integer_dup_items integer_dup_items integer_inc integer_dup_items float_dec float_dec float_dec integer_div float_dec float_dec in2 integer_swap 11 float_dec float_dec float_dec float_dec integer_add float_dec float_dec float_dup_items integer_inc integer_dup_items float_dec float_dec float_dec float_dec integer_dup_items float_dec float_dec float_dec print_integer integer_pop float_dec float_dec float_dec float_dec float_inc float_max float_mod float_dec float_dec integer_stackdepth float_max integer_dup_times integer_dup_items float_frominteger float_dec integer_div print_float)
Errors: [82.0 3 9.0 1 12.0 2 101.0 2 9.0 2 18.0 2 38.0 12 9.0 2 1.0 1 33.0 2 17.0 2 10.0 1 31.2184 10 15.0 2 66.0 3 1.0 1 46.0 2 57.0 1 2.0 1 11.0 3 50.0 1 19.0 2 85.0 2 85.0 3 94.0 3]
Total: 967.2184
Mean: 19.344368
Genome size: 75
Size: 76
Percent parens: 0.013
--- Population Statistics ---
Average total errors in population: 3328.6481343000014
Median total errors in population: 1036.0
Error averages by case: (170.51904440000004 3.978 109.51563969999995 2.725 103.81897200000002 3.105 187.71295889999996 3.63 104.41495439999998 3.082 112.41951879999999 3.027 128.0497799 11.664 102.02639389999996 3.101 100.37289080000002 2.777 126.76594129999995 3.828 116.5711238 3.386 110.26361419999996 3.301 124.90459979999981 3.904 110.59086430000004 3.069 156.10249689999995 4.018 103.17633409999999 2.936 134.50676789999991 3.269 148.3648555 3.904 101.85444819999996 2.79 108.36991510000009 4.093 143.40534809999997 3.381 116.01533290000003 3.236 166.06076280000002 4.461 172.8918700000001 3.683 174.28170659999995 5.324)
Error minima by case: (28.636 1 0.0 0 0.0 0 48.3175 1 0.0 0 0.0 0 0.3446 8 0.0 0 0.0 0 11.1887 1 5.0 1 0.0 0 1.0114 1 0.0 0 10.3362 2 0.0 0 10.4234 1 3.9084 1 0.0 0 0.0 0 4.7166 1 3.083 1 12.5722 1 43.5475 2 10.0 1)
Average genome size in population (length): 67.225
Average program size in population (points): 68.225
Average percent parens in population: 0.015
Minimum age in population: 147.9738755708144
Maximum age in population: 152.3370154052762
Average age in population: 150.310933222938
Median age in population: 150.3632466799857
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 22
Genome diversity (% unique Plush genomes):	 0.763
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 22
Syntactic diversity (% unique Push programs):	 0.763
Total error diversity:				 0.232
Error (vector) diversity:			 0.313
Behavioral diversity:				 0.313
--- Run Statistics ---
Number of program evaluations used so far: 106000
Number of point (instruction) evaluations so far: 140831963
--- Timings ---
Current time: 1529615778378 milliseconds
Total Time:         328.4 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       116.5 seconds, 35.5%
Fitness Testing:    167.8 seconds, 51.1%
Report:              44.0 seconds, 13.4%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 105
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 106
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 106
;;******************************
;; -*- Number IO problem report - generation 106
Test total error for best: 44313.0
Test mean error for best: 22.15650
;;------------------------------
Outputs of best individual on training cases:
Correct output: 150.3639690164 | Program output: 66.3639690164 
Correct output: -129.2046261   | Program output: -126.2046261  
Correct output: 43.6336388837  | Program output: 25.6336388837 
Correct output: 168.6824809869 | Program output: 65.6824809869 
Correct output: -24.6347316794 | Program output: -39.6347316794
Correct output: 39.9291320135  | Program output: 38.9291320135 
Correct output: -20.9190282536 | Program output: 11.0809717464 
Correct output: 61.9263871894  | Program output: 46.9263871894 
Correct output: -28.8395473609 | Program output: -35.8395473609
Correct output: -39.146556962  | Program output: -12.146556962 
Correct output: -134.9331989268 | Program output: -123.9331989268
Correct output: -126.4496738486 | Program output: -122.4496738486
Correct output: -51.218440095  | Program output: -81.218440095 
Correct output: 45.5895106217  | Program output: 47.5895106217 
Correct output: 136.6637618296 | Program output: 68.6637618296 
Correct output: -104.5625509424 | Program output: -109.5625509424
Correct output: 80.9125656746  | Program output: 32.9125656746 
Correct output: -63.4657032446 | Program output: -12.4657032446
Correct output: -52.106433034  | Program output: -56.106433034 
Correct output: -99.9152304515 | Program output: -116.9152304515
Correct output: -78.2834351958 | Program output: -34.2834351958
Correct output: -64.2911152024 | Program output: -51.2911152024
Correct output: 93.5722006381  | Program output: 6.5722006381  
Correct output: 141.452540764  | Program output: 54.452540764  
Correct output: 102.2088941323 | Program output: 6.2088941323  
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_flush} {:instruction float_inc} {:instruction float_yank} {:instruction float_mult} {:instruction float_flush} {:instruction float_inc} {:instruction float_yank} {:instruction float_mult} {:instruction float_yankdup} {:instruction float_dup_items} {:instruction in1} {:instruction integer_yank} {:instruction in2} {:instruction integer_div} {:instruction 11} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_div} {:instruction integer_inc} {:instruction float_dup_items} {:instruction integer_dup_times} {:instruction integer_dup_items} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_dup_items} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_div} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction print_integer} {:instruction integer_pop} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_max} {:instruction float_mod} {:instruction float_dec} {:instruction print_integer} {:instruction integer_stackdepth} {:instruction float_max} {:instruction integer_dup_times} {:instruction integer_dup_items} {:instruction float_frominteger} {:instruction float_dec} {:instruction integer_div} {:instruction print_float} {:instruction float_rot})
Best program: (float_flush float_inc float_yank float_mult float_flush float_inc float_yank float_mult float_yankdup float_dup_items in1 integer_yank in2 integer_div 11 float_dec float_dec float_dec float_dec integer_div integer_inc float_dup_items integer_dup_times integer_dup_items float_dec float_dec float_dec float_dec integer_dup_items float_dec float_dec float_dec float_dec integer_div float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec print_integer integer_pop float_dec float_dec float_dec float_dec float_dec float_max float_mod float_dec print_integer integer_stackdepth float_max integer_dup_times integer_dup_items float_frominteger float_dec integer_div print_float float_rot)
Errors: [84.0 3 3.0 1 18.0 2 103.0 2 15.0 2 1.0 1 32.0 12 15.0 2 7.0 2 27.0 2 11.0 2 4.0 1 30.0 1 2.0 1 68.0 3 5.0 1 48.0 2 51.0 2 4.0 1 17.0 3 44.0 2 13.0 2 87.0 2 87.0 2 96.0 3]
Total: 929.0
Mean: 18.58
Genome size: 74
Size: 75
Percent parens: 0.013
--- Population Statistics ---
Average total errors in population: 3339.322892
Median total errors in population: 1016.1092
Error averages by case: (174.58179750000002 3.942 107.31913659999998 2.614 104.73276920000002 3.041 191.7797115999999 3.505 102.87528859999999 3.08 111.84811279999994 3.034 128.5267475 11.744 102.96603999999998 3.035 97.57614340000002 2.713 124.50705269999999 3.931 114.47934389999998 3.342 108.13995899999996 3.246 126.17683029999984 4.031 110.71727340000004 3.023 160.15049580000002 3.943 101.1742325 2.791 138.57226260000002 3.135 146.2535115 4.033 99.81264020000003 2.729 106.87699260000005 3.993 140.59202899999994 3.337 113.85937310000003 3.161 173.0691578 4.06 176.9527337000001 3.723 181.54025669999996 5.057)
Error minima by case: (38.636 1 0.0 0 0.0 0 58.3175 1 0.0 0 0.0 0 2.3206 3 0.0 0 0.0 0 5.9972 1 1.0 1 0.0 0 15.4198 1 0.0 0 20.3362 1 0.0 0 36.0874 1 26.5343 1 0.0 0 0.0 0 4.7166 1 3.0 1 12.5722 1 53.5475 1 12.2089 1)
Average genome size in population (length): 69.008
Average program size in population (points): 70.008
Average percent parens in population: 0.014
Minimum age in population: 149.1673122065614
Maximum age in population: 153.7607529108737
Average age in population: 151.7856161205774
Median age in population: 151.8455170405272
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 20
Genome diversity (% unique Plush genomes):	 0.762
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 20
Syntactic diversity (% unique Push programs):	 0.762
Total error diversity:				 0.265
Error (vector) diversity:			 0.35
Behavioral diversity:				 0.351
--- Run Statistics ---
Number of program evaluations used so far: 107000
Number of point (instruction) evaluations so far: 142557188
--- Timings ---
Current time: 1529615781704 milliseconds
Total Time:         331.7 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       117.6 seconds, 35.4%
Fitness Testing:    169.5 seconds, 51.1%
Report:              44.4 seconds, 13.4%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 106
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 107
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 107
;;******************************
;; -*- Number IO problem report - generation 107
Test total error for best: 43736.0
Test mean error for best: 21.86800
;;------------------------------
Outputs of best individual on training cases:
Correct output: 150.3639690164 | Program output: 67.3639690164 
Correct output: -129.2046261   | Program output: -126.2046261  
Correct output: 43.6336388837  | Program output: 25.6336388837 
Correct output: 168.6824809869 | Program output: 66.6824809869 
Correct output: -24.6347316794 | Program output: -39.6347316794
Correct output: 39.9291320135  | Program output: 39.9291320135 
Correct output: -20.9190282536 | Program output: 11.0809717464 
Correct output: 61.9263871894  | Program output: 46.9263871894 
Correct output: -28.8395473609 | Program output: -35.8395473609
Correct output: -39.146556962  | Program output: -12.146556962 
Correct output: -134.9331989268 | Program output: -123.9331989268
Correct output: -126.4496738486 | Program output: -122.4496738486
Correct output: -51.218440095  | Program output: -80.218440095 
Correct output: 45.5895106217  | Program output: 48.5895106217 
Correct output: 136.6637618296 | Program output: 69.6637618296 
Correct output: -104.5625509424 | Program output: -109.5625509424
Correct output: 80.9125656746  | Program output: 33.9125656746 
Correct output: -63.4657032446 | Program output: -12.4657032446
Correct output: -52.106433034  | Program output: -56.106433034 
Correct output: -99.9152304515 | Program output: -116.9152304515
Correct output: -78.2834351958 | Program output: -34.2834351958
Correct output: -64.2911152024 | Program output: -51.2911152024
Correct output: 93.5722006381  | Program output: 7.5722006381  
Correct output: 141.452540764  | Program output: 55.452540764  
Correct output: 102.2088941323 | Program output: 7.2088941323  
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_flush} {:instruction float_inc} {:instruction float_yank} {:instruction float_mult} {:instruction float_flush} {:instruction float_inc} {:instruction float_yank} {:instruction float_mult} {:instruction float_yankdup} {:instruction float_dup_items} {:instruction in1} {:instruction integer_yank} {:instruction in2} {:instruction integer_div} {:instruction 11} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_div} {:instruction integer_inc} {:instruction float_dup_items} {:instruction integer_dup_times} {:instruction integer_dup_items} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_dup_items} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_div} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction print_integer} {:instruction integer_pop} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_dup_items} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction print_integer} {:instruction integer_pop} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_max} {:instruction integer_flush} {:instruction float_dec} {:instruction integer_div} {:instruction print_float} {:instruction integer_yankdup} {:instruction print_float} {:instruction float_rot} {:instruction integer_dup_items} {:instruction float_cos} {:instruction integer_mod} {:instruction integer_min} {:instruction float_cos})
Best program: (float_flush float_inc float_yank float_mult float_flush float_inc float_yank float_mult float_yankdup float_dup_items in1 integer_yank in2 integer_div 11 float_dec float_dec float_dec float_dec integer_div integer_inc float_dup_items integer_dup_times integer_dup_items float_dec float_dec float_dec float_dec integer_dup_items float_dec float_dec float_dec float_dec integer_div float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec print_integer integer_pop float_dec float_dec float_dec float_dec float_dec integer_dup_items float_dec float_dec float_dec print_integer integer_pop float_dec float_dec float_dec float_dec float_dec float_max integer_flush float_dec integer_div print_float integer_yankdup print_float float_rot integer_dup_items float_cos integer_mod integer_min float_cos)
Errors: [83.0 3 3.0 1 18.0 2 102.0 2 15.0 2 0.0 0 32.0 12 15.0 2 7.0 2 27.0 2 11.0 2 4.0 1 29.0 2 3.0 1 67.0 3 5.0 1 47.0 2 51.0 2 4.0 1 17.0 3 44.0 2 13.0 2 86.0 2 86.0 3 95.0 3]
Total: 922.0
Mean: 18.44
Genome size: 78
Size: 79
Percent parens: 0.013
--- Population Statistics ---
Average total errors in population: 3383.0873104000007
Median total errors in population: 1003.0
Error averages by case: (182.67106090000007 4.035 106.66730940000001 2.559 104.65631549999998 3.074 199.70432309999995 3.656 102.40005819999999 3.05 105.31079739999997 2.876 126.26697049999996 11.836 102.98852439999999 3.015 97.78415130000002 2.734 124.76774789999999 4.06 113.73377019999997 3.451 107.3895842 3.214 134.66786789999992 4.429 106.6539708 2.87 168.46002140000002 4.095 100.65084940000003 2.773 145.90987870000006 3.309 145.7664718 4.177 98.84244230000002 2.655 106.64787470000003 3.962 140.37550929999998 3.269 112.70307490000002 3.126 180.00680219999998 3.927 184.8121953000001 3.792 188.56373870000002 4.742)
Error minima by case: (43.636 2 0.0 0 0.0 0 63.3175 1 0.0 0 0.0 0 0.2079 1 0.0 0 0.0 0 6.4743 1 3.0 1 0.0 0 8.3299 1 0.0 0 25.3362 2 0.0 0 3.4857 1 27.7275 1 0.0 0 0.0 0 21.6588 1 5.0 1 16.1453 1 58.5475 1 24.782 1)
Average genome size in population (length): 70.271
Average program size in population (points): 71.271
Average percent parens in population: 0.014
Minimum age in population: 150.1673122065614
Maximum age in population: 155.0326590785395
Average age in population: 153.1568532840963
Median age in population: 153.2013382673794
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 27
Genome diversity (% unique Plush genomes):	 0.783
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 27
Syntactic diversity (% unique Push programs):	 0.783
Total error diversity:				 0.298
Error (vector) diversity:			 0.396
Behavioral diversity:				 0.396
--- Run Statistics ---
Number of program evaluations used so far: 108000
Number of point (instruction) evaluations so far: 144314013
--- Timings ---
Current time: 1529615785145 milliseconds
Total Time:         335.0 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       118.6 seconds, 35.4%
Fitness Testing:    171.4 seconds, 51.1%
Report:              45.0 seconds, 13.4%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 107
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 108
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 108
;;******************************
;; -*- Number IO problem report - generation 108
Test total error for best: 45439.56389999998
Test mean error for best: 22.71978
;;------------------------------
Outputs of best individual on training cases:
Correct output: 150.3639690164 | Program output: 108.7279380329
Correct output: -129.2046261   | Program output: -120.2046261  
Correct output: 43.6336388837  | Program output: 31.6336388837 
Correct output: 168.6824809869 | Program output: 107.3649619738
Correct output: -24.6347316794 | Program output: -33.6347316794
Correct output: 39.9291320135  | Program output: 36.8582640271 
Correct output: -20.9190282536 | Program output: 17.0809717464 
Correct output: 61.9263871894  | Program output: 52.9263871894 
Correct output: -28.8395473609 | Program output: -29.8395473609
Correct output: -39.146556962  | Program output: -6.146556962  
Correct output: -134.9331989268 | Program output: -117.9331989268
Correct output: -126.4496738486 | Program output: -116.4496738486
Correct output: -51.218440095  | Program output: -79.218440095 
Correct output: 45.5895106217  | Program output: 54.1790212434 
Correct output: 136.6637618296 | Program output: 113.3275236592
Correct output: -104.5625509424 | Program output: -103.5625509424
Correct output: 80.9125656746  | Program output: 41.8251313491 
Correct output: -63.4657032446 | Program output: -6.4657032446 
Correct output: -52.106433034  | Program output: -50.106433034 
Correct output: -99.9152304515 | Program output: -110.9152304515
Correct output: -78.2834351958 | Program output: -28.2834351958
Correct output: -64.2911152024 | Program output: -45.2911152024
Correct output: 93.5722006381  | Program output: 8.5722006381  
Correct output: 141.452540764  | Program output: 84.9050815281 
Correct output: 102.2088941323 | Program output: 8.2088941323  
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_flush} {:instruction float_inc} {:instruction float_yank} {:instruction float_mult} {:instruction float_yankdup} {:instruction float_dup_items} {:instruction in1} {:instruction integer_yank} {:instruction float_dec} {:instruction float_dec} {:instruction integer_dup_items} {:instruction in2} {:instruction float_dec} {:instruction float_dup_items} {:instruction integer_dup_times} {:instruction integer_dup_items} {:instruction float_dec} {:instruction float_dec} {:instruction float_dup_items} {:instruction integer_dup_times} {:instruction tagged_539} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_dup_items} {:instruction integer_dup_items} {:instruction integer_inc} {:instruction integer_dup_items} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_div} {:instruction float_dec} {:instruction float_dec} {:instruction in2} {:instruction integer_swap} {:instruction 11} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_add} {:instruction float_dec} {:instruction float_dec} {:instruction float_dup_items} {:instruction integer_inc} {:instruction integer_dup_items} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_dup_items} {:instruction float_dec} {:instruction float_dec} {:instruction integer_dup_items} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction print_integer} {:instruction float_add} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_max} {:instruction tag_integer_533} {:instruction integer_stackdepth} {:instruction float_max} {:instruction integer_dup_times} {:instruction integer_dup_items} {:instruction float_frominteger} {:instruction float_dec} {:instruction integer_div} {:instruction print_float} {:instruction float_rot})
Best program: (float_flush float_inc float_yank float_mult float_yankdup float_dup_items in1 integer_yank float_dec float_dec integer_dup_items in2 float_dec float_dup_items integer_dup_times integer_dup_items float_dec float_dec float_dup_items integer_dup_times tagged_539 float_dec float_dec float_dec float_dec integer_dup_items integer_dup_items integer_inc integer_dup_items float_dec float_dec float_dec integer_div float_dec float_dec in2 integer_swap 11 float_dec float_dec float_dec float_dec integer_add float_dec float_dec float_dup_items integer_inc integer_dup_items float_dec float_dec float_dec float_dec integer_dup_items float_dec float_dec integer_dup_items float_dec float_dec float_dec print_integer float_add float_dec float_dec float_dec float_max tag_integer_533 integer_stackdepth float_max integer_dup_times integer_dup_items float_frominteger float_dec integer_div print_float float_rot)
Errors: [41.636 10 9.0 1 12.0 2 61.3175 11 9.0 2 3.0709 10 38.0 12 9.0 2 1.0 1 33.0 2 17.0 2 10.0 1 28.0 2 8.5895 11 23.3362 11 1.0 1 39.0874 10 57.0 1 2.0 1 11.0 3 50.0 1 19.0 2 85.0 2 56.5475 11 94.0 3]
Total: 833.585
Mean: 16.6717
Genome size: 75
Size: 76
Percent parens: 0.013
--- Population Statistics ---
Average total errors in population: 3382.310365200002
Median total errors in population: 987.0
Error averages by case: (181.9436259 4.091 109.41413569999997 2.534 107.06655900000001 3.091 198.9449562999999 3.58 104.2897386 3.063 100.32460529999997 2.747 127.02890710000003 11.887 105.39518159999996 2.992 99.20900549999998 2.845 124.74273469999997 3.875 116.37358899999997 3.424 110.1076402 3.153 135.04207619999977 5.331 100.38459880000005 2.732 167.7042857 4.117 103.81881200000001 2.747 145.3487437 3.385 146.15069379999994 3.921 101.2687825 2.607 110.46250780000007 4.01 140.79349770000002 3.297 114.47458300000002 3.136 172.02786759999998 3.789 184.1465297000001 3.753 181.09870779999997 4.641)
Error minima by case: (34.636 1 0.0 0 0.0 0 54.3175 1 0.0 0 0.0 0 0.0687 8 0.0 0 0.0 0 5.7174 1 2.0 1 0.0 0 19.4463 1 0.0 0 16.3362 1 0.0 0 26.5128 1 15.5343 1 0.0 0 0.0 0 6.2834 1 4.0 1 1.5722 1 49.4525 1 1.2089 1)
Average genome size in population (length): 72.506
Average program size in population (points): 73.506
Average percent parens in population: 0.014
Minimum age in population: 152.29863080169
Maximum age in population: 156.410137008235
Average age in population: 154.6191224752195
Median age in population: 154.6654926862543
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 39
Genome diversity (% unique Plush genomes):	 0.775
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 39
Syntactic diversity (% unique Push programs):	 0.775
Total error diversity:				 0.328
Error (vector) diversity:			 0.445
Behavioral diversity:				 0.445
--- Run Statistics ---
Number of program evaluations used so far: 109000
Number of point (instruction) evaluations so far: 146126713
--- Timings ---
Current time: 1529615788705 milliseconds
Total Time:         338.7 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       119.8 seconds, 35.4%
Fitness Testing:    173.2 seconds, 51.1%
Report:              45.5 seconds, 13.4%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 108
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 109
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 109
;;******************************
;; -*- Number IO problem report - generation 109
Test total error for best: 45409.682099999976
Test mean error for best: 22.70484
;;------------------------------
Outputs of best individual on training cases:
Correct output: 150.3639690164 | Program output: 108.7279380329
Correct output: -129.2046261   | Program output: -120.2046261  
Correct output: 43.6336388837  | Program output: 31.6336388837 
Correct output: 168.6824809869 | Program output: 107.3649619738
Correct output: -24.6347316794 | Program output: -33.6347316794
Correct output: 39.9291320135  | Program output: 37.8582640271 
Correct output: -20.9190282536 | Program output: 17.0809717464 
Correct output: 61.9263871894  | Program output: 52.9263871894 
Correct output: -28.8395473609 | Program output: -29.8395473609
Correct output: -39.146556962  | Program output: -6.146556962  
Correct output: -134.9331989268 | Program output: -117.9331989268
Correct output: -126.4496738486 | Program output: -116.4496738486
Correct output: -51.218440095  | Program output: -79.218440095 
Correct output: 45.5895106217  | Program output: 55.1790212434 
Correct output: 136.6637618296 | Program output: 113.3275236592
Correct output: -104.5625509424 | Program output: -103.5625509424
Correct output: 80.9125656746  | Program output: 41.8251313491 
Correct output: -63.4657032446 | Program output: -6.4657032446 
Correct output: -52.106433034  | Program output: -50.106433034 
Correct output: -99.9152304515 | Program output: -110.9152304515
Correct output: -78.2834351958 | Program output: -28.2834351958
Correct output: -64.2911152024 | Program output: -45.2911152024
Correct output: 93.5722006381  | Program output: 8.5722006381  
Correct output: 141.452540764  | Program output: 84.9050815281 
Correct output: 102.2088941323 | Program output: 8.2088941323  
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_flush} {:instruction float_inc} {:instruction float_yank} {:instruction float_mult} {:instruction float_yankdup} {:instruction float_dup_items} {:instruction in1} {:instruction integer_yank} {:instruction float_dec} {:instruction float_dec} {:instruction integer_dup_items} {:instruction in2} {:instruction float_dec} {:instruction float_dup_items} {:instruction integer_dup_times} {:instruction integer_dup_items} {:instruction float_dec} {:instruction float_dec} {:instruction float_dup_items} {:instruction integer_dup_times} {:instruction tagged_539} {:instruction float_dec} {:instruction float_dec} {:instruction float_dup_times} {:instruction float_dec} {:instruction integer_dup_items} {:instruction integer_dup_items} {:instruction integer_inc} {:instruction integer_dup_items} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_div} {:instruction float_dec} {:instruction float_dec} {:instruction in2} {:instruction integer_swap} {:instruction 11} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_add} {:instruction float_dec} {:instruction float_dec} {:instruction float_dup_items} {:instruction integer_inc} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_dup_items} {:instruction float_dec} {:instruction float_dec} {:instruction integer_dup_items} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction print_integer} {:instruction float_add} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_max} {:instruction tag_integer_533} {:instruction integer_stackdepth} {:instruction float_max} {:instruction integer_dup_times} {:instruction integer_dup_items} {:instruction float_frominteger} {:instruction float_dec} {:instruction integer_div} {:instruction print_float} {:instruction float_rot})
Best program: (float_flush float_inc float_yank float_mult float_yankdup float_dup_items in1 integer_yank float_dec float_dec integer_dup_items in2 float_dec float_dup_items integer_dup_times integer_dup_items float_dec float_dec float_dup_items integer_dup_times tagged_539 float_dec float_dec float_dup_times float_dec integer_dup_items integer_dup_items integer_inc integer_dup_items float_dec float_dec float_dec integer_div float_dec float_dec in2 integer_swap 11 float_dec float_dec float_dec float_dec integer_add float_dec float_dec float_dup_items integer_inc float_dec float_dec float_dec float_dec float_dec integer_dup_items float_dec float_dec integer_dup_items float_dec float_dec float_dec print_integer float_add float_dec float_dec float_dec float_max tag_integer_533 integer_stackdepth float_max integer_dup_times integer_dup_items float_frominteger float_dec integer_div print_float float_rot)
Errors: [41.636 10 9.0 1 12.0 2 61.3175 11 9.0 2 2.0709 10 38.0 12 9.0 2 1.0 1 33.0 2 17.0 2 10.0 1 28.0 2 9.5895 10 23.3362 11 1.0 1 39.0874 10 57.0 1 2.0 1 11.0 3 50.0 1 19.0 2 85.0 2 56.5475 11 94.0 3]
Total: 832.585
Mean: 16.6517
Genome size: 75
Size: 76
Percent parens: 0.013
--- Population Statistics ---
Average total errors in population: 3451.7489732000026
Median total errors in population: 968.0
Error averages by case: (180.6309692 4.317 111.53365019999997 2.494 110.65129990000001 3.153 197.5300828999999 3.568 109.56170069999997 3.164 108.58291929999997 2.917 130.5062991 11.95 108.94544309999996 3.103 104.13510620000001 2.902 130.63835149999997 3.884 118.385363 3.451 112.20489899999995 3.097 135.4838784999999 5.372 108.98207650000003 2.943 166.47728160000003 4.313 106.94174340000002 2.784 145.4787325 3.49 150.2152651 3.966 105.26235140000003 2.61 113.9211904 3.989 144.4604402 3.331 117.83845240000001 3.171 172.76013820000006 3.837 182.82300860000015 3.968 181.0413303 4.983)
Error minima by case: (13.0 1 0.0 0 0.0 0 6.0 1 0.0 0 0.0 0 0.429 1 0.0 0 0.0 0 4.9901 1 0.0 0 0.0 0 2.0883 1 0.0 0 12.3362 2 0.0 0 28.0874 1 26.5343 1 0.0 0 0.0 0 4.7166 1 1.0 1 12.5722 1 10.0 1 9.0 1)
Average genome size in population (length): 75.444
Average program size in population (points): 76.444
Average percent parens in population: 0.013
Minimum age in population: 153.29863080169
Maximum age in population: 158.0898807354898
Average age in population: 156.1222993789422
Median age in population: 156.178710366224
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 28
Genome diversity (% unique Plush genomes):	 0.776
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 28
Syntactic diversity (% unique Push programs):	 0.776
Total error diversity:				 0.331
Error (vector) diversity:			 0.458
Behavioral diversity:				 0.459
--- Run Statistics ---
Number of program evaluations used so far: 110000
Number of point (instruction) evaluations so far: 148012838
--- Timings ---
Current time: 1529615792300 milliseconds
Total Time:         342.3 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       121.0 seconds, 35.3%
Fitness Testing:    175.2 seconds, 51.2%
Report:              46.0 seconds, 13.4%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 109
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 110
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 110
;;******************************
;; -*- Number IO problem report - generation 110
Test total error for best: 46599.325999999965
Test mean error for best: 23.29966
;;------------------------------
Outputs of best individual on training cases:
Correct output: 150.3639690164 | Program output: 118.7279380329
Correct output: -129.2046261   | Program output: -121.2046261  
Correct output: 43.6336388837  | Program output: 30.6336388837 
Correct output: 168.6824809869 | Program output: 117.3649619738
Correct output: -24.6347316794 | Program output: -34.6347316794
Correct output: 39.9291320135  | Program output: 21.9291320135 
Correct output: -20.9190282536 | Program output: 16.0809717464 
Correct output: 61.9263871894  | Program output: 51.9263871894 
Correct output: -28.8395473609 | Program output: -30.8395473609
Correct output: -39.146556962  | Program output: -7.146556962  
Correct output: -134.9331989268 | Program output: -118.9331989268
Correct output: -126.4496738486 | Program output: -117.4496738486
Correct output: -51.218440095  | Program output: -98.218440095 
Correct output: 45.5895106217  | Program output: 30.5895106217 
Correct output: 136.6637618296 | Program output: 123.3275236592
Correct output: -104.5625509424 | Program output: -104.5625509424
Correct output: 80.9125656746  | Program output: 51.8251313491 
Correct output: -63.4657032446 | Program output: -7.4657032446 
Correct output: -52.106433034  | Program output: -51.106433034 
Correct output: -99.9152304515 | Program output: -111.9152304515
Correct output: -78.2834351958 | Program output: -29.2834351958
Correct output: -64.2911152024 | Program output: -46.2911152024
Correct output: 93.5722006381  | Program output: 8.7166019144  
Correct output: 141.452540764  | Program output: 94.9050815281 
Correct output: 102.2088941323 | Program output: 7.626682397   
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_flush} {:instruction float_inc} {:instruction float_yank} {:instruction float_mult} {:instruction float_yankdup} {:instruction float_dup_items} {:instruction in1} {:instruction integer_yank} {:instruction float_dec} {:instruction float_dec} {:instruction integer_dup_items} {:instruction in2} {:instruction float_dec} {:instruction float_dup_items} {:instruction integer_dup_times} {:instruction integer_dup_items} {:instruction float_dec} {:instruction float_dec} {:instruction float_dup_items} {:instruction integer_dup_times} {:instruction tagged_539} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_dup_items} {:instruction integer_dup_items} {:instruction integer_inc} {:instruction integer_dup_items} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_div} {:instruction float_dec} {:instruction float_dec} {:instruction in2} {:instruction integer_swap} {:instruction 11} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_add} {:instruction float_dec} {:instruction float_dec} {:instruction float_dup_items} {:instruction integer_inc} {:instruction integer_dup_items} {:instruction in2} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_dup_items} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction print_integer} {:instruction integer_pop} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_max} {:instruction float_mod} {:instruction float_add} {:instruction float_dec} {:instruction integer_stackdepth} {:instruction float_max} {:instruction integer_dup_times} {:instruction integer_dup_items} {:instruction float_frominteger} {:instruction float_dec} {:instruction print_float} {:instruction print_float} {:instruction float_rot})
Best program: (float_flush float_inc float_yank float_mult float_yankdup float_dup_items in1 integer_yank float_dec float_dec integer_dup_items in2 float_dec float_dup_items integer_dup_times integer_dup_items float_dec float_dec float_dup_items integer_dup_times tagged_539 float_dec float_dec float_dec float_dec integer_dup_items integer_dup_items integer_inc integer_dup_items float_dec float_dec float_dec integer_div float_dec float_dec in2 integer_swap 11 float_dec float_dec float_dec float_dec float_dec integer_add float_dec float_dec float_dup_items integer_inc integer_dup_items in2 float_dec float_dec float_dec integer_dup_items float_dec float_dec float_dec print_integer integer_pop float_dec float_dec float_dec float_dec float_dec float_max float_mod float_add float_dec integer_stackdepth float_max integer_dup_times integer_dup_items float_frominteger float_dec print_float print_float float_rot)
Errors: [31.636 10 8.0 1 13.0 2 51.3175 11 10.0 1 18.0 2 37.0 12 10.0 1 2.0 2 32.0 2 16.0 2 9.0 2 47.0 2 15.0 2 13.3362 11 0.0 0 29.0874 10 56.0 2 1.0 1 12.0 3 49.0 2 18.0 2 84.8556 11 46.5475 11 94.5822 11]
Total: 820.3624
Mean: 16.407248
Genome size: 77
Size: 78
Percent parens: 0.013
--- Population Statistics ---
Average total errors in population: 3837.7417909000005
Median total errors in population: 952.0
Error averages by case: (196.5373502 4.536 128.8215418 2.729 127.00359729999998 3.457 213.17202370000004 3.747 125.08600259999997 3.438 115.13332379999994 2.96 144.01534210000003 11.936 125.73970939999997 3.407 119.81227120000003 3.299 141.47629890000002 4.106 135.5671039 3.708 129.48196119999994 3.346 153.91902180000005 4.302 118.89856670000006 3.119 182.58280800000003 4.552 124.92073960000002 3.097 160.1739276 3.741 163.1464925 4.27 121.2996254 2.871 132.04455640000003 4.25 158.40466450000005 3.733 132.40654010000003 3.455 189.8590908000001 3.894 198.88076259999997 4.289 198.11546879999997 5.001)
Error minima by case: (16.0 1 0.0 0 0.0 0 35.0 1 0.0 0 0.0 0 0.5903 1 0.0 0 0.0 0 3.9972 1 1.0 1 0.0 0 2.7808 1 0.0 0 0.0 0 0.0 0 10.0349 1 15.028 1 0.0 0 0.0 0 4.7166 1 0.0 0 9.0 1 19.0 1 0.0 0)
Average genome size in population (length): 76.22
Average program size in population (points): 77.22
Average percent parens in population: 0.013
Minimum age in population: 154.6895563271776
Maximum age in population: 159.6192387710488
Average age in population: 157.7300109927616
Median age in population: 157.7650582010171
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 18
Genome diversity (% unique Plush genomes):	 0.789
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 18
Syntactic diversity (% unique Push programs):	 0.789
Total error diversity:				 0.319
Error (vector) diversity:			 0.435
Behavioral diversity:				 0.436
--- Run Statistics ---
Number of program evaluations used so far: 111000
Number of point (instruction) evaluations so far: 149918338
--- Timings ---
Current time: 1529615795785 milliseconds
Total Time:         345.8 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       122.1 seconds, 35.3%
Fitness Testing:    177.1 seconds, 51.2%
Report:              46.5 seconds, 13.4%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 110
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 111
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 111
;;******************************
;; -*- Number IO problem report - generation 111
Test total error for best: 58113.05990000004
Test mean error for best: 29.05653
;;------------------------------
Outputs of best individual on training cases:
Correct output: 150.3639690164 | Program output: 134.7279380329
Correct output: -129.2046261   | Program output: -127.2046261  
Correct output: 43.6336388837  | Program output: 24.6336388837 
Correct output: 168.6824809869 | Program output: 133.3649619738
Correct output: -24.6347316794 | Program output: -40.6347316794
Correct output: 39.9291320135  | Program output: 45.8582640271 
Correct output: -20.9190282536 | Program output: 10.0809717464 
Correct output: 61.9263871894  | Program output: 45.9263871894 
Correct output: -28.8395473609 | Program output: -36.8395473609
Correct output: -39.146556962  | Program output: -13.146556962 
Correct output: -134.9331989268 | Program output: -124.9331989268
Correct output: -126.4496738486 | Program output: -123.4496738486
Correct output: -51.218440095  | Program output: -160.4368801899
Correct output: 45.5895106217  | Program output: 63.1790212434 
Correct output: 136.6637618296 | Program output: 139.3275236592
Correct output: -104.5625509424 | Program output: -110.5625509424
Correct output: 80.9125656746  | Program output: 67.8251313491 
Correct output: -63.4657032446 | Program output: -13.4657032446
Correct output: -52.106433034  | Program output: -57.106433034 
Correct output: -99.9152304515 | Program output: -117.9152304515
Correct output: -78.2834351958 | Program output: -35.2834351958
Correct output: -64.2911152024 | Program output: -52.2911152024
Correct output: 93.5722006381  | Program output: 15.1444012762 
Correct output: 141.452540764  | Program output: 110.9050815281
Correct output: 102.2088941323 | Program output: 14.4177882647 
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_flush} {:instruction float_inc} {:instruction float_yank} {:instruction float_mult} {:instruction float_flush} {:instruction float_inc} {:instruction float_yank} {:instruction float_mult} {:instruction float_yankdup} {:instruction float_dup_items} {:instruction in1} {:instruction integer_yank} {:instruction in2} {:instruction integer_div} {:instruction 11} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_div} {:instruction integer_inc} {:instruction float_dup_items} {:instruction in2} {:instruction float_add} {:instruction float_dec} {:instruction integer_inc} {:instruction float_dup_items} {:instruction integer_dup_times} {:instruction integer_dup_items} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_dup_items} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_div} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction print_integer} {:instruction integer_pop} {:instruction float_dec} {:instruction print_integer} {:instruction integer_pop} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_max} {:instruction float_mod} {:instruction tag_integer_405} {:instruction print_integer} {:instruction integer_stackdepth} {:instruction float_max} {:instruction integer_dup_times} {:instruction integer_dup_items} {:instruction float_frominteger} {:instruction float_dec} {:instruction integer_div} {:instruction print_float} {:instruction float_rot})
Best program: (float_flush float_inc float_yank float_mult float_flush float_inc float_yank float_mult float_yankdup float_dup_items in1 integer_yank in2 integer_div 11 float_dec float_dec float_dec float_dec integer_div integer_inc float_dup_items in2 float_add float_dec integer_inc float_dup_items integer_dup_times integer_dup_items float_dec float_dec float_dec float_dec integer_dup_items float_dec float_dec float_dec float_dec integer_div float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec print_integer integer_pop float_dec print_integer integer_pop float_dec float_dec float_dec float_dec float_dec float_max float_mod tag_integer_405 print_integer integer_stackdepth float_max integer_dup_times integer_dup_items float_frominteger float_dec integer_div print_float float_rot)
Errors: [15.636 10 2.0 1 19.0 2 35.3175 11 16.0 2 5.9291 11 31.0 11 16.0 2 8.0 2 26.0 2 10.0 1 3.0 1 109.2184 11 17.5895 11 2.6638 10 6.0 2 13.0874 10 50.0 1 5.0 1 18.0 3 43.0 2 12.0 2 78.4278 11 30.5475 11 87.7911 12]
Total: 804.2081000000001
Mean: 16.084162
Genome size: 82
Size: 83
Percent parens: 0.012
--- Population Statistics ---
Average total errors in population: 3358.4944398999996
Median total errors in population: 929.0
Error averages by case: (176.68518789999985 5.085 105.95013739999993 2.329 103.76102410000003 3.081 193.6227271000003 4.465 107.70092719999998 2.996 99.60736130000004 3.436 120.85361320000001 11.839 102.05518169999996 3.013 100.3117318 3.078 122.57556570000003 3.627 112.658336 3.26 106.58412209999996 2.808 143.5254765 3.667 105.01103500000015 3.723 162.2256539999999 5.234 103.14708470000001 2.606 145.64485749999994 4.371 144.50516330000002 3.726 101.22004309999997 2.317 112.42404530000003 3.949 138.7283815 3.384 112.1528544 3.07 174.61401150000015 4.043 180.42035369999957 5.083 183.2885639000001 5.031)
Error minima by case: (15.0 1 0.0 0 0.0 0 4.0 1 0.0 0 0.0 0 2.0799 1 0.0 0 0.0 0 3.4959 1 1.0 1 0.0 0 15.44 1 0.0 0 2.6638 1 0.0 0 13.0874 1 26.7275 1 0.0 0 0.0 0 24.2308 1 0.0 0 20.0 1 12.0 1 11.0 1)
Average genome size in population (length): 77.083
Average program size in population (points): 78.083
Average percent parens in population: 0.013
Minimum age in population: 156.8230007567525
Maximum age in population: 161.1326912441067
Average age in population: 159.3274491623262
Median age in population: 159.3653508346536
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 18
Genome diversity (% unique Plush genomes):	 0.796
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 18
Syntactic diversity (% unique Push programs):	 0.796
Total error diversity:				 0.304
Error (vector) diversity:			 0.396
Behavioral diversity:				 0.397
--- Run Statistics ---
Number of program evaluations used so far: 112000
Number of point (instruction) evaluations so far: 151845413
--- Timings ---
Current time: 1529615799461 milliseconds
Total Time:         349.4 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       123.3 seconds, 35.3%
Fitness Testing:    179.1 seconds, 51.2%
Report:              47.0 seconds, 13.4%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 111
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 112
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 112
;;******************************
;; -*- Number IO problem report - generation 112
Test total error for best: 46031.39769999999
Test mean error for best: 23.01570
;;------------------------------
Outputs of best individual on training cases:
Correct output: 150.3639690164 | Program output: 122.7279380329
Correct output: -129.2046261   | Program output: -119.2046261  
Correct output: 43.6336388837  | Program output: 32.6336388837 
Correct output: 168.6824809869 | Program output: 121.3649619738
Correct output: -24.6347316794 | Program output: -32.6347316794
Correct output: 39.9291320135  | Program output: 23.9291320135 
Correct output: -20.9190282536 | Program output: 18.0809717464 
Correct output: 61.9263871894  | Program output: 53.9263871894 
Correct output: -28.8395473609 | Program output: -28.8395473609
Correct output: -39.146556962  | Program output: -5.146556962  
Correct output: -134.9331989268 | Program output: -116.9331989268
Correct output: -126.4496738486 | Program output: -115.4496738486
Correct output: -51.218440095  | Program output: -96.218440095 
Correct output: 45.5895106217  | Program output: 32.5895106217 
Correct output: 136.6637618296 | Program output: 127.3275236592
Correct output: -104.5625509424 | Program output: -102.5625509424
Correct output: 80.9125656746  | Program output: 55.8251313491 
Correct output: -63.4657032446 | Program output: -5.4657032446 
Correct output: -52.106433034  | Program output: -49.106433034 
Correct output: -99.9152304515 | Program output: -109.9152304515
Correct output: -78.2834351958 | Program output: -27.2834351958
Correct output: -64.2911152024 | Program output: -44.2911152024
Correct output: 93.5722006381  | Program output: 14.7166019144 
Correct output: 141.452540764  | Program output: 98.9050815281 
Correct output: 102.2088941323 | Program output: 13.626682397  
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_flush} {:instruction float_inc} {:instruction float_yank} {:instruction float_mult} {:instruction float_flush} {:instruction float_inc} {:instruction float_yank} {:instruction float_mult} {:instruction float_yankdup} {:instruction float_dup_items} {:instruction in1} {:instruction integer_dup_items} {:instruction in2} {:instruction float_dec} {:instruction float_dup_items} {:instruction integer_dup_times} {:instruction integer_dup_items} {:instruction float_dec} {:instruction float_dec} {:instruction float_dup_items} {:instruction integer_dup_times} {:instruction tagged_539} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_dup_items} {:instruction integer_dup_items} {:instruction integer_inc} {:instruction integer_dup_items} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_div} {:instruction float_dec} {:instruction float_dec} {:instruction in2} {:instruction integer_swap} {:instruction 11} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_add} {:instruction float_dec} {:instruction float_dec} {:instruction float_dup_items} {:instruction integer_inc} {:instruction integer_dup_items} {:instruction in2} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_dup_items} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction print_integer} {:instruction integer_pop} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_max} {:instruction float_mod} {:instruction float_add} {:instruction float_dec} {:instruction integer_stackdepth} {:instruction float_max} {:instruction integer_dup_times} {:instruction integer_dup_items} {:instruction float_frominteger} {:instruction float_dec} {:instruction print_float} {:instruction print_float} {:instruction float_rot})
Best program: (float_flush float_inc float_yank float_mult float_flush float_inc float_yank float_mult float_yankdup float_dup_items in1 integer_dup_items in2 float_dec float_dup_items integer_dup_times integer_dup_items float_dec float_dec float_dup_items integer_dup_times tagged_539 float_dec float_dec float_dec float_dec integer_dup_items integer_dup_items integer_inc integer_dup_items float_dec float_dec float_dec integer_div float_dec float_dec in2 integer_swap 11 float_dec float_dec float_dec float_dec float_dec integer_add float_dec float_dec float_dup_items integer_inc integer_dup_items in2 float_dec float_dec float_dec integer_dup_items float_dec float_dec float_dec print_integer integer_pop float_dec float_dec float_dec float_dec float_dec float_max float_mod float_add float_dec integer_stackdepth float_max integer_dup_times integer_dup_items float_frominteger float_dec print_float print_float float_rot)
Errors: [27.636 10 10.0 1 11.0 2 47.3175 11 8.0 2 16.0 2 39.0 12 8.0 2 0.0 0 34.0 2 18.0 2 11.0 2 45.0 2 13.0 2 9.3362 11 2.0 1 25.0874 10 58.0 2 3.0 2 10.0 2 51.0 2 20.0 1 78.8556 11 42.5475 12 88.5822 10]
Total: 792.3624
Mean: 15.847248
Genome size: 78
Size: 79
Percent parens: 0.013
--- Population Statistics ---
Average total errors in population: 3546.7030750999993
Median total errors in population: 922.0
Error averages by case: (182.11062549999954 7.113 110.54784189999991 2.667 112.1229823 3.43 198.91588580000115 6.98 107.13427799999997 3.329 113.99161350000024 5.715 128.2669758 11.86 110.02966519999991 3.341 101.0577078 3.234 125.57731550000004 4.028 117.1038139 3.615 111.12350389999996 3.277 155.8468318 4.091 121.92022980000043 6.011 167.36636579999987 7.499 106.29748290000002 2.952 160.2320472999996 6.622 147.3920246 4.094 102.55396760000001 2.74 113.89435860000005 4.256 140.67900580000006 3.59 113.9377078 3.437 189.5408372000001 4.704 188.67936069999843 7.602 198.6236461000003 5.57)
Error minima by case: (15.636 1 0.0 0 0.0 0 31.0 1 0.0 0 0.0 0 1.0507 2 0.0 0 0.0 0 5.1353 1 2.0 1 0.0 0 12.4281 1 0.0 0 2.6638 2 0.0 0 13.0874 1 1.7297 1 0.0 0 0.0 0 4.7166 1 0.0 0 12.5722 1 30.5475 1 12.2089 1)
Average genome size in population (length): 77.159
Average program size in population (points): 78.159
Average percent parens in population: 0.013
Minimum age in population: 158.2771603764723
Maximum age in population: 162.6589581366839
Average age in population: 160.923035341582
Median age in population: 160.9455572139579
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 15
Genome diversity (% unique Plush genomes):	 0.818
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 15
Syntactic diversity (% unique Push programs):	 0.818
Total error diversity:				 0.387
Error (vector) diversity:			 0.455
Behavioral diversity:				 0.457
--- Run Statistics ---
Number of program evaluations used so far: 113000
Number of point (instruction) evaluations so far: 153774413
--- Timings ---
Current time: 1529615802971 milliseconds
Total Time:         352.9 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       124.3 seconds, 35.2%
Fitness Testing:    181.0 seconds, 51.3%
Report:              47.5 seconds, 13.5%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 112
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 113
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 113
;;******************************
;; -*- Number IO problem report - generation 113
Test total error for best: 46056.68850000001
Test mean error for best: 23.02834
;;------------------------------
Outputs of best individual on training cases:
Correct output: 150.3639690164 | Program output: 159.0919070493
Correct output: -129.2046261   | Program output: -122.2046261  
Correct output: 43.6336388837  | Program output: 29.6336388837 
Correct output: 168.6824809869 | Program output: 157.0474429607
Correct output: -24.6347316794 | Program output: -35.6347316794
Correct output: 39.9291320135  | Program output: 34.8582640271 
Correct output: -20.9190282536 | Program output: 15.0809717464 
Correct output: 61.9263871894  | Program output: 50.9263871894 
Correct output: -28.8395473609 | Program output: -31.8395473609
Correct output: -39.146556962  | Program output: -8.146556962  
Correct output: -134.9331989268 | Program output: -119.9331989268
Correct output: -126.4496738486 | Program output: -118.4496738486
Correct output: -51.218440095  | Program output: -78.218440095 
Correct output: 45.5895106217  | Program output: 52.1790212434 
Correct output: 136.6637618296 | Program output: 165.9912854889
Correct output: -104.5625509424 | Program output: -105.5625509424
Correct output: 80.9125656746  | Program output: 58.7376970237 
Correct output: -63.4657032446 | Program output: -8.4657032446 
Correct output: -52.106433034  | Program output: -52.106433034 
Correct output: -99.9152304515 | Program output: -112.9152304515
Correct output: -78.2834351958 | Program output: -30.2834351958
Correct output: -64.2911152024 | Program output: -47.2911152024
Correct output: 93.5722006381  | Program output: 9.5722006381  
Correct output: 141.452540764  | Program output: 123.3576222921
Correct output: 102.2088941323 | Program output: 9.2088941323  
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_flush} {:instruction float_inc} {:instruction float_flush} {:instruction float_inc} {:instruction float_yank} {:instruction float_mult} {:instruction float_dup_items} {:instruction in1} {:instruction integer_yank} {:instruction float_dec} {:instruction float_dec} {:instruction integer_dup_items} {:instruction in2} {:instruction float_dec} {:instruction float_dup_items} {:instruction integer_dup_times} {:instruction integer_dup_items} {:instruction float_dup_items} {:instruction integer_dup_times} {:instruction integer_dup_items} {:instruction float_dec} {:instruction float_dec} {:instruction float_dup_items} {:instruction integer_dup_times} {:instruction tagged_539} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_dup_items} {:instruction integer_dup_items} {:instruction integer_inc} {:instruction integer_dup_items} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_div} {:instruction float_dec} {:instruction float_dec} {:instruction in2} {:instruction integer_dup_times} {:instruction 11} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_add} {:instruction float_dec} {:instruction float_dec} {:instruction float_dup_items} {:instruction integer_inc} {:instruction integer_dup_items} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_dup_items} {:instruction float_dec} {:instruction float_dec} {:instruction integer_dup_items} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction print_integer} {:instruction float_add} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction print_integer} {:instruction float_add} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_max} {:instruction tag_integer_533} {:instruction print_float} {:instruction float_yank})
Best program: (float_flush float_inc float_flush float_inc float_yank float_mult float_dup_items in1 integer_yank float_dec float_dec integer_dup_items in2 float_dec float_dup_items integer_dup_times integer_dup_items float_dup_items integer_dup_times integer_dup_items float_dec float_dec float_dup_items integer_dup_times tagged_539 float_dec float_dec float_dec float_dec integer_dup_items integer_dup_items integer_inc integer_dup_items float_dec float_dec float_dec integer_div float_dec float_dec in2 integer_dup_times 11 float_dec float_dec float_dec float_dec integer_add float_dec float_dec float_dup_items integer_inc integer_dup_items float_dec float_dec float_dec float_dec integer_dup_items float_dec float_dec integer_dup_items float_dec float_dec float_dec print_integer float_add float_dec float_dec float_dec print_integer float_add float_dec float_dec float_dec float_max tag_integer_533 print_float float_yank)
Errors: [8.7279 9 7.0 1 14.0 2 11.635 10 11.0 2 5.0709 10 36.0 12 11.0 2 3.0 2 31.0 2 15.0 2 8.0 2 27.0 2 6.5895 11 29.3275 11 1.0 1 22.1749 12 55.0 2 0.0 0 13.0 3 48.0 2 17.0 2 84.0 1 18.0949 11 93.0 3]
Total: 692.6206
Mean: 13.852412
Genome size: 77
Size: 78
Percent parens: 0.013
--- Population Statistics ---
Average total errors in population: 3352.4941637000024
Median total errors in population: 839.585
Error averages by case: (153.2261523999992 9.431 111.64931269999994 2.642 105.68642380000004 3.392 170.1686468000017 10.058 105.55814679999996 3.227 91.44883290000041 7.763 127.6397032000001 11.845 104.51295659999992 3.258 99.72608869999999 2.88 124.69211850000012 3.657 118.18279109999999 3.581 112.25951439999993 3.327 151.0464177000001 4.057 98.86748150000047 8.085 137.93759900000092 10.183 105.09490400000007 2.758 143.52771450000003 9.183 146.98664839999998 3.607 101.77944110000004 2.789 112.79313820000007 4.242 141.59020320000005 3.401 114.78081110000004 3.397 180.62794350000007 5.662 164.11177489999795 10.534 189.21039870000052 6.43)
Error minima by case: (4.7279 1 0.0 0 0.0 0 3.365 1 0.0 0 0.0 0 0.6597 1 0.0 0 0.0 0 0.5041 1 2.0 1 0.0 0 4.2184 1 0.4105 1 0.3359 1 0.0 0 3.1749 1 12.9175 1 0.0 0 0.0 0 1.9003 1 1.7089 1 7.1537 1 0.9051 1 16.0 1)
Average genome size in population (length): 76.674
Average program size in population (points): 77.674
Average percent parens in population: 0.013
Minimum age in population: 160.1994073015341
Maximum age in population: 164.4394466709549
Average age in population: 162.4987302148876
Median age in population: 162.5393911047543
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 34
Genome diversity (% unique Plush genomes):	 0.772
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 34
Syntactic diversity (% unique Push programs):	 0.772
Total error diversity:				 0.383
Error (vector) diversity:			 0.448
Behavioral diversity:				 0.449
--- Run Statistics ---
Number of program evaluations used so far: 114000
Number of point (instruction) evaluations so far: 155691288
--- Timings ---
Current time: 1529615806653 milliseconds
Total Time:         356.5 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       125.5 seconds, 35.2%
Fitness Testing:    182.9 seconds, 51.3%
Report:              48.0 seconds, 13.5%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 113
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 114
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 114
;;******************************
;; -*- Number IO problem report - generation 114
Test total error for best: 46298.25320000001
Test mean error for best: 23.14913
;;------------------------------
Outputs of best individual on training cases:
Correct output: 150.3639690164 | Program output: 160.0919070493
Correct output: -129.2046261   | Program output: -121.2046261  
Correct output: 43.6336388837  | Program output: 30.6336388837 
Correct output: 168.6824809869 | Program output: 158.0474429607
Correct output: -24.6347316794 | Program output: -34.6347316794
Correct output: 39.9291320135  | Program output: 35.8582640271 
Correct output: -20.9190282536 | Program output: 16.0809717464 
Correct output: 61.9263871894  | Program output: 51.9263871894 
Correct output: -28.8395473609 | Program output: -30.8395473609
Correct output: -39.146556962  | Program output: -7.146556962  
Correct output: -134.9331989268 | Program output: -118.9331989268
Correct output: -126.4496738486 | Program output: -117.4496738486
Correct output: -51.218440095  | Program output: -78.218440095 
Correct output: 45.5895106217  | Program output: 53.1790212434 
Correct output: 136.6637618296 | Program output: 166.9912854889
Correct output: -104.5625509424 | Program output: -104.5625509424
Correct output: 80.9125656746  | Program output: 59.7376970237 
Correct output: -63.4657032446 | Program output: -7.4657032446 
Correct output: -52.106433034  | Program output: -51.106433034 
Correct output: -99.9152304515 | Program output: -111.9152304515
Correct output: -78.2834351958 | Program output: -29.2834351958
Correct output: -64.2911152024 | Program output: -46.2911152024
Correct output: 93.5722006381  | Program output: 9.5722006381  
Correct output: 141.452540764  | Program output: 124.3576222921
Correct output: 102.2088941323 | Program output: 9.2088941323  
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_flush} {:instruction float_inc} {:instruction float_flush} {:instruction float_inc} {:instruction float_yank} {:instruction float_mult} {:instruction float_dup_items} {:instruction in1} {:instruction integer_yank} {:instruction float_dec} {:instruction float_dec} {:instruction integer_dup_items} {:instruction in2} {:instruction float_dec} {:instruction float_dup_items} {:instruction integer_dup_times} {:instruction integer_dup_items} {:instruction float_dup_items} {:instruction integer_dup_times} {:instruction integer_dup_items} {:instruction float_dec} {:instruction float_dec} {:instruction float_dup_items} {:instruction integer_dup_times} {:instruction tagged_539} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_sub} {:instruction integer_dup_items} {:instruction integer_inc} {:instruction integer_dup_items} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_div} {:instruction float_dec} {:instruction float_dec} {:instruction in2} {:instruction integer_dup_times} {:instruction 11} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_add} {:instruction float_dec} {:instruction float_dec} {:instruction float_dup_items} {:instruction integer_inc} {:instruction integer_dup_items} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_dup_items} {:instruction float_dec} {:instruction float_dec} {:instruction integer_dup_items} {:instruction float_dec} {:instruction float_dec} {:instruction integer_min} {:instruction print_integer} {:instruction float_add} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction print_integer} {:instruction float_add} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_max} {:instruction tag_integer_533} {:instruction print_float} {:instruction float_yank})
Best program: (float_flush float_inc float_flush float_inc float_yank float_mult float_dup_items in1 integer_yank float_dec float_dec integer_dup_items in2 float_dec float_dup_items integer_dup_times integer_dup_items float_dup_items integer_dup_times integer_dup_items float_dec float_dec float_dup_items integer_dup_times tagged_539 float_dec float_dec float_dec float_dec integer_sub integer_dup_items integer_inc integer_dup_items float_dec float_dec float_dec integer_div float_dec float_dec in2 integer_dup_times 11 float_dec float_dec float_dec float_dec integer_add float_dec float_dec float_dup_items integer_inc integer_dup_items float_dec float_dec float_dec float_dec integer_dup_items float_dec float_dec integer_dup_items float_dec float_dec integer_min print_integer float_add float_dec float_dec float_dec print_integer float_add float_dec float_dec float_dec float_max tag_integer_533 print_float float_yank)
Errors: [9.7279 9 8.0 1 13.0 2 10.635 9 10.0 1 4.0709 10 37.0 12 10.0 1 2.0 2 32.0 2 16.0 2 9.0 2 27.0 2 7.5895 11 30.3275 10 0.0 0 21.1749 12 56.0 2 1.0 1 12.0 3 49.0 2 18.0 2 84.0 1 17.0949 11 93.0 3]
Total: 690.6206
Mean: 13.812412
Genome size: 77
Size: 78
Percent parens: 0.013
--- Population Statistics ---
Average total errors in population: 3303.0058709000023
Median total errors in population: 832.4432
Error averages by case: (157.22094919999918 9.552 103.78876999999991 2.462 101.87017680000004 3.195 173.30042970000164 10.228 99.50392639999998 3.001 95.23624570000035 5.604 123.2780810000001 11.646 100.6555760999999 3.097 93.8943684 2.754 119.2744956000001 3.575 110.20521449999998 3.346 104.36288279999994 3.109 164.01296410000015 4.343 100.39128860000034 5.744 143.18446710000077 10.331 97.78911389999999 2.574 148.54051389999978 9.455 140.64064460000003 3.561 95.52022709999996 2.605 105.11493930000007 4.023 134.9390555 3.275 108.45639440000001 3.136 183.42855390000034 8.175 167.73665189999798 10.7 192.5549404000013 8.614)
Error minima by case: (2.7279 1 0.0 0 0.0 0 3.365 1 0.0 0 0.0709 1 2.4192 1 0.0 0 0.0 0 7.8065 1 0.0 0 0.0 0 7.0 1 0.5895 1 0.3097 1 0.0 0 2.1749 1 8.6677 1 0.0 0 0.0 0 1.6677 1 0.7089 1 1.5722 1 1.9051 1 1.2089 1)
Average genome size in population (length): 77.205
Average program size in population (points): 78.205
Average percent parens in population: 0.013
Minimum age in population: 161.6420726274891
Maximum age in population: 165.8918523267348
Average age in population: 163.8842925542381
Median age in population: 163.9098203439868
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 50
Genome diversity (% unique Plush genomes):	 0.784
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 50
Syntactic diversity (% unique Push programs):	 0.784
Total error diversity:				 0.397
Error (vector) diversity:			 0.459
Behavioral diversity:				 0.46
--- Run Statistics ---
Number of program evaluations used so far: 115000
Number of point (instruction) evaluations so far: 157621463
--- Timings ---
Current time: 1529615810297 milliseconds
Total Time:         360.2 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       126.6 seconds, 35.1%
Fitness Testing:    184.9 seconds, 51.3%
Report:              48.6 seconds, 13.5%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 114
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 115
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 115
;;******************************
;; -*- Number IO problem report - generation 115
Test total error for best: 45948.91369999999
Test mean error for best: 22.97446
;;------------------------------
Outputs of best individual on training cases:
Correct output: 150.3639690164 | Program output: 166.0919070493
Correct output: -129.2046261   | Program output: -121.2046261  
Correct output: 43.6336388837  | Program output: 30.6336388837 
Correct output: 168.6824809869 | Program output: 164.0474429607
Correct output: -24.6347316794 | Program output: -34.6347316794
Correct output: 39.9291320135  | Program output: 38.8582640271 
Correct output: -20.9190282536 | Program output: 16.0809717464 
Correct output: 61.9263871894  | Program output: 51.9263871894 
Correct output: -28.8395473609 | Program output: -30.8395473609
Correct output: -39.146556962  | Program output: -7.146556962  
Correct output: -134.9331989268 | Program output: -118.9331989268
Correct output: -126.4496738486 | Program output: -117.4496738486
Correct output: -51.218440095  | Program output: -76.218440095 
Correct output: 45.5895106217  | Program output: 56.1790212434 
Correct output: 136.6637618296 | Program output: 172.9912854889
Correct output: -104.5625509424 | Program output: -104.5625509424
Correct output: 80.9125656746  | Program output: 65.7376970237 
Correct output: -63.4657032446 | Program output: -7.4657032446 
Correct output: -52.106433034  | Program output: -51.106433034 
Correct output: -99.9152304515 | Program output: -111.9152304515
Correct output: -78.2834351958 | Program output: -29.2834351958
Correct output: -64.2911152024 | Program output: -46.2911152024
Correct output: 93.5722006381  | Program output: 11.5722006381 
Correct output: 141.452540764  | Program output: 130.3576222921
Correct output: 102.2088941323 | Program output: 11.2088941323 
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_flush} {:instruction float_inc} {:instruction float_yank} {:instruction float_mult} {:instruction float_flush} {:instruction float_inc} {:instruction in1} {:instruction integer_yank} {:instruction in2} {:instruction integer_div} {:instruction integer_dup_items} {:instruction in2} {:instruction float_mod} {:instruction float_dup_items} {:instruction integer_dup_times} {:instruction integer_dup_items} {:instruction float_dec} {:instruction float_dec} {:instruction float_dup_items} {:instruction integer_dup_times} {:instruction tagged_539} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_dup_items} {:instruction integer_dup_items} {:instruction float_dec} {:instruction integer_dup_items} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_div} {:instruction float_dec} {:instruction float_dec} {:instruction in2} {:instruction integer_swap} {:instruction 11} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_add} {:instruction float_dec} {:instruction float_dec} {:instruction float_dup_items} {:instruction integer_inc} {:instruction integer_dup_items} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_dup_items} {:instruction float_dec} {:instruction float_dec} {:instruction integer_dup_items} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction print_integer} {:instruction float_add} {:instruction float_dec} {:instruction float_add} {:instruction float_dec} {:instruction integer_stackdepth} {:instruction float_max} {:instruction float_swap} {:instruction integer_dup_items} {:instruction float_frominteger} {:instruction float_dec} {:instruction print_float} {:instruction print_float} {:instruction float_rot})
Best program: (float_flush float_inc float_yank float_mult float_flush float_inc in1 integer_yank in2 integer_div integer_dup_items in2 float_mod float_dup_items integer_dup_times integer_dup_items float_dec float_dec float_dup_items integer_dup_times tagged_539 float_dec float_dec float_dec integer_dup_items integer_dup_items float_dec integer_dup_items float_dec float_dec float_dec integer_div float_dec float_dec in2 integer_swap 11 float_dec float_dec float_dec float_dec integer_add float_dec float_dec float_dup_items integer_inc integer_dup_items float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec integer_dup_items float_dec float_dec integer_dup_items float_dec float_dec float_dec print_integer float_add float_dec float_add float_dec integer_stackdepth float_max float_swap integer_dup_items float_frominteger float_dec print_float print_float float_rot)
Errors: [15.7279 10 8.0 1 13.0 2 4.635 9 10.0 1 1.0709 10 37.0 12 10.0 1 2.0 2 32.0 2 16.0 2 9.0 2 25.0 2 10.5895 11 36.3275 11 0.0 0 15.1749 12 56.0 2 1.0 1 12.0 3 49.0 2 18.0 2 82.0 2 11.0949 11 91.0 2]
Total: 680.6206
Mean: 13.612412
Genome size: 77
Size: 78
Percent parens: 0.013
--- Population Statistics ---
Average total errors in population: 3907.4555364999974
Median total errors in population: 814.6434999999999
Error averages by case: (182.75559869999915 9.266 127.07333759999996 2.648 123.4025955 3.097 197.51525780000182 9.946 122.7960073 3.049 116.51068080000009 4.68 143.98596600000008 11.416 121.95364499999994 3.106 118.11605680000001 2.801 138.48239820000006 3.757 133.41872010000003 3.428 127.66123199999996 3.224 197.08914740000034 4.708 125.57468750000021 4.667 171.31167940000023 9.944 121.75734460000004 2.856 175.8044967999994 9.403 159.35761549999998 3.804 120.05257220000003 2.701 128.03045450000008 4.101 157.12089560000007 3.44 132.07864130000002 3.174 213.13213040000107 9.486 192.56216019999786 10.47 221.1222153000016 9.618)
Error minima by case: (0.2721 1 0.0 0 0.0 0 0.635 1 0.0 0 0.0 0 0.3189 1 0.0 0 0.0 0 0.4339 1 1.0 1 0.0 0 17.2184 1 0.4105 1 0.3362 1 0.0 0 4.0 1 24.0 1 0.0 0 1.0 1 4.7166 1 0.0 0 12.5722 1 5.0949 1 8.0 1)
Average genome size in population (length): 77.659
Average program size in population (points): 78.659
Average percent parens in population: 0.013
Minimum age in population: 163.0830141272906
Maximum age in population: 167.6135969179635
Average age in population: 165.2862217280225
Median age in population: 165.3183214510607
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 17
Genome diversity (% unique Plush genomes):	 0.79
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 17
Syntactic diversity (% unique Push programs):	 0.79
Total error diversity:				 0.43
Error (vector) diversity:			 0.509
Behavioral diversity:				 0.51
--- Run Statistics ---
Number of program evaluations used so far: 116000
Number of point (instruction) evaluations so far: 159562938
--- Timings ---
Current time: 1529615813935 milliseconds
Total Time:         363.9 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       127.8 seconds, 35.1%
Fitness Testing:    186.8 seconds, 51.3%
Report:              49.2 seconds, 13.5%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 115
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 116
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 116
;;******************************
;; -*- Number IO problem report - generation 116
Test total error for best: 32384.941500000004
Test mean error for best: 16.19247
;;------------------------------
Outputs of best individual on training cases:
Correct output: 150.3639690164 | Program output: 125.3639690164
Correct output: -129.2046261   | Program output: -154.2046261  
Correct output: 43.6336388837  | Program output: 18.6336388837 
Correct output: 168.6824809869 | Program output: 143.6824809869
Correct output: -24.6347316794 | Program output: -49.6347316794
Correct output: 39.9291320135  | Program output: 42.9291320135 
Correct output: -20.9190282536 | Program output: -45.9190282536
Correct output: 61.9263871894  | Program output: 36.9263871894 
Correct output: -28.8395473609 | Program output: -53.8395473609
Correct output: -39.146556962  | Program output: -64.146556962 
Correct output: -134.9331989268 | Program output: -159.9331989268
Correct output: -126.4496738486 | Program output: -151.4496738486
Correct output: -51.218440095  | Program output: 8.0           
Correct output: 45.5895106217  | Program output: 51.5895106217 
Correct output: 136.6637618296 | Program output: 111.6637618296
Correct output: -104.5625509424 | Program output: -129.5625509424
Correct output: 80.9125656746  | Program output: 55.9125656746 
Correct output: -63.4657032446 | Program output: -88.4657032446
Correct output: -52.106433034  | Program output: -77.106433034 
Correct output: -99.9152304515 | Program output: -124.9152304515
Correct output: -78.2834351958 | Program output: -103.2834351958
Correct output: -64.2911152024 | Program output: -89.2911152024
Correct output: 93.5722006381  | Program output: 68.5722006381 
Correct output: 141.452540764  | Program output: 116.452540764 
Correct output: 102.2088941323 | Program output: 77.2088941323 
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_flush} {:instruction float_inc} {:instruction float_yank} {:instruction float_mult} {:instruction float_yankdup} {:instruction float_dup_items} {:instruction in1} {:instruction integer_yank} {:instruction float_dec} {:instruction integer_dec} {:instruction in2} {:instruction float_frominteger} {:instruction float_dup_items} {:instruction integer_dup_times} {:instruction integer_dup_items} {:instruction float_frominteger} {:instruction float_dec} {:instruction float_dup_items} {:instruction integer_dup_times} {:instruction tagged_539} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_dup_items} {:instruction integer_dup_items} {:instruction float_dec} {:instruction integer_dup_items} {:instruction integer_yank} {:instruction float_dec} {:instruction float_dec} {:instruction integer_div} {:instruction float_dec} {:instruction float_dec} {:instruction in2} {:instruction integer_swap} {:instruction 11} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_add} {:instruction float_dec} {:instruction integer_max} {:instruction float_dup_items} {:instruction integer_inc} {:instruction integer_dup_items} {:instruction float_dec} {:instruction float_dec} {:instruction integer_dup_items} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction print_integer} {:instruction float_add} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_max} {:instruction tag_integer_533} {:instruction integer_stackdepth} {:instruction float_max} {:instruction integer_dup_times} {:instruction integer_dup_items} {:instruction float_frominteger} {:instruction float_dec} {:instruction integer_div} {:instruction print_float} {:instruction float_rot})
Best program: (float_flush float_inc float_yank float_mult float_yankdup float_dup_items in1 integer_yank float_dec integer_dec in2 float_frominteger float_dup_items integer_dup_times integer_dup_items float_frominteger float_dec float_dup_items integer_dup_times tagged_539 float_dec float_dec float_dec float_dec integer_dup_items integer_dup_items float_dec integer_dup_items integer_yank float_dec float_dec integer_div float_dec float_dec in2 integer_swap 11 float_dec float_dec float_dec float_dec integer_add float_dec integer_max float_dup_items integer_inc integer_dup_items float_dec float_dec integer_dup_items float_dec float_dec float_dec print_integer float_add float_dec float_dec float_dec float_max tag_integer_533 integer_stackdepth float_max integer_dup_times integer_dup_items float_frominteger float_dec integer_div print_float float_rot)
Errors: [25.0 2 25.0 2 25.0 2 25.0 2 25.0 2 3.0 2 25.0 2 25.0 2 25.0 2 25.0 2 25.0 2 25.0 2 59.2184 11 6.0 2 25.0 2 25.0 2 25.0 2 25.0 2 25.0 2 25.0 3 25.0 3 25.0 2 25.0 2 25.0 2 25.0 3]
Total: 680.2184
Mean: 13.604368
Genome size: 69
Size: 70
Percent parens: 0.014
--- Population Statistics ---
Average total errors in population: 3771.8692825999974
Median total errors in population: 799.3624
Error averages by case: (170.95301369999922 9.208 125.24809349999987 3.034 119.90712860000002 3.473 181.45756080000126 9.793 119.72973549999995 3.394 113.08302900000028 6.315 141.86453460000007 11.207 119.22214359999991 3.514 114.63793210000001 3.254 137.16067130000008 4.071 130.95340819999996 3.849 125.62565809999991 3.66 183.6532461000004 4.702 120.17567580000032 6.363 167.1240180000007 9.939 119.9360539000001 3.292 165.80780890000003 9.71 157.56888730000003 4.167 116.67210010000001 3.063 126.14289450000011 4.506 152.27396860000002 3.851 127.85452380000004 3.563 202.4251087000007 7.507 178.81632939999793 10.252 210.02475850000073 7.864)
Error minima by case: (0.2721 1 0.0 0 0.0 0 0.365 1 0.0 0 0.0 0 1.0988 1 0.0 0 0.0 0 3.1466 1 2.0 1 0.0 0 15.0 1 0.4105 1 0.3362 1 0.0 0 0.1749 1 3.4657 1 0.0 0 0.0 0 4.7166 1 0.0 0 12.5722 1 0.0949 1 8.7911 1)
Average genome size in population (length): 77.427
Average program size in population (points): 78.427
Average percent parens in population: 0.013
Minimum age in population: 164.1498144024963
Maximum age in population: 168.519687614798
Average age in population: 166.8155510734462
Median age in population: 166.8631649453617
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 16
Genome diversity (% unique Plush genomes):	 0.802
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 16
Syntactic diversity (% unique Push programs):	 0.802
Total error diversity:				 0.495
Error (vector) diversity:			 0.588
Behavioral diversity:				 0.589
--- Run Statistics ---
Number of program evaluations used so far: 117000
Number of point (instruction) evaluations so far: 161498613
--- Timings ---
Current time: 1529615817544 milliseconds
Total Time:         367.5 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       128.9 seconds, 35.1%
Fitness Testing:    188.8 seconds, 51.4%
Report:              49.7 seconds, 13.5%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 116
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 117
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 117
;;******************************
;; -*- Number IO problem report - generation 117
Test total error for best: 45184.8328
Test mean error for best: 22.59242
;;------------------------------
Outputs of best individual on training cases:
Correct output: 150.3639690164 | Program output: 166.0919070493
Correct output: -129.2046261   | Program output: -123.2046261  
Correct output: 43.6336388837  | Program output: 28.6336388837 
Correct output: 168.6824809869 | Program output: 164.0474429607
Correct output: -24.6347316794 | Program output: -36.6347316794
Correct output: 39.9291320135  | Program output: 38.8582640271 
Correct output: -20.9190282536 | Program output: 14.0809717464 
Correct output: 61.9263871894  | Program output: 49.9263871894 
Correct output: -28.8395473609 | Program output: -32.8395473609
Correct output: -39.146556962  | Program output: -9.146556962  
Correct output: -134.9331989268 | Program output: -120.9331989268
Correct output: -126.4496738486 | Program output: -119.4496738486
Correct output: -51.218440095  | Program output: -75.218440095 
Correct output: 45.5895106217  | Program output: 56.1790212434 
Correct output: 136.6637618296 | Program output: 172.9912854889
Correct output: -104.5625509424 | Program output: -106.5625509424
Correct output: 80.9125656746  | Program output: 65.7376970237 
Correct output: -63.4657032446 | Program output: -9.4657032446 
Correct output: -52.106433034  | Program output: -53.106433034 
Correct output: -99.9152304515 | Program output: -113.9152304515
Correct output: -78.2834351958 | Program output: -31.2834351958
Correct output: -64.2911152024 | Program output: -48.2911152024
Correct output: 93.5722006381  | Program output: 12.5722006381 
Correct output: 141.452540764  | Program output: 130.3576222921
Correct output: 102.2088941323 | Program output: 12.2088941323 
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_flush} {:instruction float_inc} {:instruction float_yank} {:instruction float_mult} {:instruction float_flush} {:instruction float_inc} {:instruction in1} {:instruction integer_yank} {:instruction in2} {:instruction integer_div} {:instruction integer_dup_items} {:instruction in2} {:instruction float_mod} {:instruction float_dup_items} {:instruction integer_dup_times} {:instruction integer_dup_items} {:instruction float_dec} {:instruction float_dec} {:instruction float_dup_items} {:instruction integer_dup_times} {:instruction tagged_539} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_dup_items} {:instruction integer_dup_items} {:instruction integer_inc} {:instruction integer_dup_items} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_div} {:instruction float_dec} {:instruction float_dec} {:instruction in2} {:instruction integer_swap} {:instruction 11} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_add} {:instruction float_dup_items} {:instruction integer_inc} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_dup_items} {:instruction float_dec} {:instruction float_dec} {:instruction integer_dup_items} {:instruction integer_inc} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_dup_items} {:instruction float_dec} {:instruction float_dec} {:instruction integer_dup_items} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction print_integer} {:instruction float_add} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction print_integer} {:instruction float_add} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_max} {:instruction tag_integer_533} {:instruction print_float} {:instruction integer_dup_times} {:instruction integer_dup_items} {:instruction integer_sub} {:instruction float_add} {:instruction print_float} {:instruction float_rot})
Best program: (float_flush float_inc float_yank float_mult float_flush float_inc in1 integer_yank in2 integer_div integer_dup_items in2 float_mod float_dup_items integer_dup_times integer_dup_items float_dec float_dec float_dup_items integer_dup_times tagged_539 float_dec float_dec float_dec float_dec integer_dup_items integer_dup_items integer_inc integer_dup_items float_dec float_dec float_dec integer_div float_dec float_dec in2 integer_swap 11 float_dec float_dec float_dec float_dec integer_add float_dup_items integer_inc float_dec float_dec float_dec float_dec float_dec integer_dup_items float_dec float_dec integer_dup_items integer_inc float_dec float_dec float_dec integer_dup_items float_dec float_dec integer_dup_items float_dec float_dec float_dec print_integer float_add float_dec float_dec float_dec print_integer float_add float_dec float_dec float_dec float_max tag_integer_533 print_float integer_dup_times integer_dup_items integer_sub float_add print_float float_rot)
Errors: [15.7279 10 6.0 1 15.0 2 4.635 9 12.0 2 1.0709 10 35.0 12 12.0 2 4.0 2 30.0 1 14.0 2 7.0 2 24.0 2 10.5895 11 36.3275 11 2.0 1 15.1749 12 54.0 2 1.0 1 14.0 3 47.0 2 16.0 2 81.0 2 11.0949 11 90.0 1]
Total: 674.6206
Mean: 13.492412
Genome size: 84
Size: 85
Percent parens: 0.012
--- Population Statistics ---
Average total errors in population: 3476.902451300001
Median total errors in population: 721.6206
Error averages by case: (148.43229639999922 9.776 116.03859709999988 2.948 110.15900970000008 3.732 153.04872440000003 9.984 111.4104690999999 3.569 97.1262636000008 8.933 128.06746140000016 11.656 109.94202739999984 3.687 105.75698940000005 3.523 128.26084440000017 3.936 121.92456239999996 3.9 116.45402309999992 3.625 170.0903593000002 4.649 101.68578430000045 9.147 156.57047550000073 10.725 111.2682859000001 3.15 147.79935459999996 11.012 149.91114719999996 4.043 106.77430710000009 3.052 119.17880670000011 4.581 144.0376940000002 3.908 117.5261827 3.756 197.2175401000002 5.176 153.5631247999982 10.745 205.53212070000032 5.913)
Error minima by case: (0.2721 1 0.0 0 1.0 1 0.365 1 0.0 0 0.0 0 0.0529 1 0.0 0 0.0 0 4.4743 1 0.0 0 0.0 0 2.1686 1 0.0 0 0.6638 1 0.0 0 0.0 0 1.2716 1 0.0 0 0.0 0 10.7166 1 0.7089 1 12.5722 1 0.0949 1 12.2089 1)
Average genome size in population (length): 79.01
Average program size in population (points): 80.01
Average percent parens in population: 0.013
Minimum age in population: 166.1142916199884
Maximum age in population: 170.0437553619651
Average age in population: 168.3681548530545
Median age in population: 168.4154891857354
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 21
Genome diversity (% unique Plush genomes):	 0.816
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 21
Syntactic diversity (% unique Push programs):	 0.816
Total error diversity:				 0.464
Error (vector) diversity:			 0.566
Behavioral diversity:				 0.567
--- Run Statistics ---
Number of program evaluations used so far: 118000
Number of point (instruction) evaluations so far: 163473896
--- Timings ---
Current time: 1529615821173 milliseconds
Total Time:         371.1 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       130.0 seconds, 35.0%
Fitness Testing:    190.8 seconds, 51.4%
Report:              50.2 seconds, 13.5%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 117
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 118
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 118
;;******************************
;; -*- Number IO problem report - generation 118
Test total error for best: 31921.84450000001
Test mean error for best: 15.96092
;;------------------------------
Outputs of best individual on training cases:
Correct output: 150.3639690164 | Program output: 126.3639690164
Correct output: -129.2046261   | Program output: -153.2046261  
Correct output: 43.6336388837  | Program output: 19.6336388837 
Correct output: 168.6824809869 | Program output: 144.6824809869
Correct output: -24.6347316794 | Program output: -48.6347316794
Correct output: 39.9291320135  | Program output: 42.9291320135 
Correct output: -20.9190282536 | Program output: -44.9190282536
Correct output: 61.9263871894  | Program output: 37.9263871894 
Correct output: -28.8395473609 | Program output: -52.8395473609
Correct output: -39.146556962  | Program output: -63.146556962 
Correct output: -134.9331989268 | Program output: -158.9331989268
Correct output: -126.4496738486 | Program output: -150.4496738486
Correct output: -51.218440095  | Program output: 9.0           
Correct output: 45.5895106217  | Program output: 51.5895106217 
Correct output: 136.6637618296 | Program output: 112.6637618296
Correct output: -104.5625509424 | Program output: -128.5625509424
Correct output: 80.9125656746  | Program output: 56.9125656746 
Correct output: -63.4657032446 | Program output: -87.4657032446
Correct output: -52.106433034  | Program output: -76.106433034 
Correct output: -99.9152304515 | Program output: -123.9152304515
Correct output: -78.2834351958 | Program output: -102.2834351958
Correct output: -64.2911152024 | Program output: -88.2911152024
Correct output: 93.5722006381  | Program output: 69.5722006381 
Correct output: 141.452540764  | Program output: 117.452540764 
Correct output: 102.2088941323 | Program output: 78.2088941323 
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_flush} {:instruction float_inc} {:instruction float_yank} {:instruction float_mult} {:instruction float_yankdup} {:instruction float_dup_items} {:instruction in1} {:instruction integer_yank} {:instruction float_dec} {:instruction integer_dec} {:instruction in2} {:instruction float_frominteger} {:instruction float_dup_items} {:instruction integer_dup_times} {:instruction integer_dup_items} {:instruction float_frominteger} {:instruction float_dec} {:instruction float_dup_items} {:instruction integer_dup_times} {:instruction tagged_539} {:instruction float_dec} {:instruction integer_flush} {:instruction float_dec} {:instruction float_dec} {:instruction integer_dup_items} {:instruction integer_dup_items} {:instruction float_dec} {:instruction integer_dup_items} {:instruction integer_yank} {:instruction float_dec} {:instruction float_dec} {:instruction integer_div} {:instruction float_dec} {:instruction float_dec} {:instruction in2} {:instruction integer_swap} {:instruction 11} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_add} {:instruction float_dec} {:instruction integer_max} {:instruction float_dup_items} {:instruction integer_inc} {:instruction integer_dup_items} {:instruction float_dec} {:instruction float_dec} {:instruction integer_dup_items} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction print_integer} {:instruction float_add} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_max} {:instruction tag_integer_533} {:instruction integer_stackdepth} {:instruction float_max} {:instruction integer_dup_times} {:instruction integer_dup_items} {:instruction float_frominteger} {:instruction float_dec} {:instruction integer_div} {:instruction print_float} {:instruction float_rot})
Best program: (float_flush float_inc float_yank float_mult float_yankdup float_dup_items in1 integer_yank float_dec integer_dec in2 float_frominteger float_dup_items integer_dup_times integer_dup_items float_frominteger float_dec float_dup_items integer_dup_times tagged_539 float_dec integer_flush float_dec float_dec integer_dup_items integer_dup_items float_dec integer_dup_items integer_yank float_dec float_dec integer_div float_dec float_dec in2 integer_swap 11 float_dec float_dec float_dec float_dec integer_add float_dec integer_max float_dup_items integer_inc integer_dup_items float_dec float_dec integer_dup_items float_dec float_dec float_dec print_integer float_add float_dec float_dec float_dec float_max tag_integer_533 integer_stackdepth float_max integer_dup_times integer_dup_items float_frominteger float_dec integer_div print_float float_rot)
Errors: [24.0 2 24.0 2 24.0 2 24.0 2 24.0 2 3.0 2 24.0 2 24.0 2 24.0 2 24.0 2 24.0 2 24.0 2 60.2184 11 6.0 2 24.0 2 24.0 2 24.0 2 24.0 2 24.0 2 24.0 3 24.0 3 24.0 2 24.0 2 24.0 2 24.0 3]
Total: 659.2184
Mean: 13.184368
Genome size: 69
Size: 70
Percent parens: 0.014
--- Population Statistics ---
Average total errors in population: 3375.136820500005
Median total errors in population: 693.6206
Error averages by case: (136.96522189999894 9.945 113.73209009999988 2.921 109.64519110000005 3.81 138.52906669999928 10.017 110.09412799999988 3.609 100.92611060000053 9.799 128.4681210000001 11.857 109.14373129999984 3.66 103.61849990000006 3.56 127.8341985000002 3.835 119.6431611 4.002 114.17787519999985 3.733 162.38675760000007 4.343 104.8810400000007 10.164 149.49277710000072 10.983 108.78109480000009 3.065 136.49360839999943 11.452 149.09017609999995 3.944 104.33457360000004 3.035 118.07310970000013 4.695 142.44410600000003 3.856 115.23603690000006 3.823 185.6904746000001 4.215 140.7281914999981 10.954 194.4904788000002 4.96)
Error minima by case: (0.2721 1 0.0 0 0.0 0 0.365 1 0.81 1 0.0709 1 1.7308 2 1.0 1 0.0 0 2.8534 1 0.0 0 0.0 0 4.1932 1 0.0 0 1.3362 1 0.0 0 0.1749 1 8.7818 1 0.0 0 1.0 1 14.7166 1 0.2911 1 6.1208 1 0.0949 2 2.8792 1)
Average genome size in population (length): 79.202
Average program size in population (points): 80.202
Average percent parens in population: 0.013
Minimum age in population: 167.1142916199884
Maximum age in population: 171.809833306669
Average age in population: 169.8805292443439
Median age in population: 169.9147841550524
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 35
Genome diversity (% unique Plush genomes):	 0.787
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 35
Syntactic diversity (% unique Push programs):	 0.787
Total error diversity:				 0.355
Error (vector) diversity:			 0.47
Behavioral diversity:				 0.471
--- Run Statistics ---
Number of program evaluations used so far: 119000
Number of point (instruction) evaluations so far: 165454046
--- Timings ---
Current time: 1529615824767 milliseconds
Total Time:         374.7 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       131.1 seconds, 35.0%
Fitness Testing:    192.8 seconds, 51.5%
Report:              50.7 seconds, 13.5%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 118
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 119
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 119
;;******************************
;; -*- Number IO problem report - generation 119
Test total error for best: 31463.156100000007
Test mean error for best: 15.73158
;;------------------------------
Outputs of best individual on training cases:
Correct output: 150.3639690164 | Program output: 127.3639690164
Correct output: -129.2046261   | Program output: -152.2046261  
Correct output: 43.6336388837  | Program output: 20.6336388837 
Correct output: 168.6824809869 | Program output: 145.6824809869
Correct output: -24.6347316794 | Program output: -47.6347316794
Correct output: 39.9291320135  | Program output: 42.9291320135 
Correct output: -20.9190282536 | Program output: -43.9190282536
Correct output: 61.9263871894  | Program output: 38.9263871894 
Correct output: -28.8395473609 | Program output: -51.8395473609
Correct output: -39.146556962  | Program output: -62.146556962 
Correct output: -134.9331989268 | Program output: -157.9331989268
Correct output: -126.4496738486 | Program output: -149.4496738486
Correct output: -51.218440095  | Program output: 10.0          
Correct output: 45.5895106217  | Program output: 51.5895106217 
Correct output: 136.6637618296 | Program output: 113.6637618296
Correct output: -104.5625509424 | Program output: -127.5625509424
Correct output: 80.9125656746  | Program output: 57.9125656746 
Correct output: -63.4657032446 | Program output: -86.4657032446
Correct output: -52.106433034  | Program output: -75.106433034 
Correct output: -99.9152304515 | Program output: -122.9152304515
Correct output: -78.2834351958 | Program output: -101.2834351958
Correct output: -64.2911152024 | Program output: -87.2911152024
Correct output: 93.5722006381  | Program output: 70.5722006381 
Correct output: 141.452540764  | Program output: 118.452540764 
Correct output: 102.2088941323 | Program output: 79.2088941323 
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_flush} {:instruction float_inc} {:instruction float_yank} {:instruction float_mult} {:instruction float_flush} {:instruction float_inc} {:instruction float_yank} {:instruction in1} {:instruction integer_yank} {:instruction float_dec} {:instruction integer_dec} {:instruction in2} {:instruction float_frominteger} {:instruction float_dup_items} {:instruction integer_dup_times} {:instruction integer_dup_items} {:instruction float_frominteger} {:instruction float_dec} {:instruction float_dup_items} {:instruction integer_dup_times} {:instruction tagged_539} {:instruction float_dec} {:instruction integer_flush} {:instruction float_dec} {:instruction float_dec} {:instruction integer_dup_items} {:instruction integer_dup_items} {:instruction float_dec} {:instruction integer_dup_items} {:instruction integer_yank} {:instruction float_rot} {:instruction float_dec} {:instruction integer_div} {:instruction float_dec} {:instruction float_dec} {:instruction in2} {:instruction integer_swap} {:instruction 11} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_add} {:instruction float_dec} {:instruction integer_max} {:instruction float_dup_items} {:instruction integer_inc} {:instruction integer_dup_items} {:instruction float_dec} {:instruction float_dec} {:instruction integer_dup_items} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction print_integer} {:instruction float_add} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_max} {:instruction tag_integer_533} {:instruction integer_stackdepth} {:instruction float_max} {:instruction integer_dup_times} {:instruction integer_dup_items} {:instruction float_frominteger} {:instruction float_dec} {:instruction integer_div} {:instruction print_float} {:instruction float_rot})
Best program: (float_flush float_inc float_yank float_mult float_flush float_inc float_yank in1 integer_yank float_dec integer_dec in2 float_frominteger float_dup_items integer_dup_times integer_dup_items float_frominteger float_dec float_dup_items integer_dup_times tagged_539 float_dec integer_flush float_dec float_dec integer_dup_items integer_dup_items float_dec integer_dup_items integer_yank float_rot float_dec integer_div float_dec float_dec in2 integer_swap 11 float_dec float_dec float_dec float_dec integer_add float_dec integer_max float_dup_items integer_inc integer_dup_items float_dec float_dec integer_dup_items float_dec float_dec float_dec print_integer float_add float_dec float_dec float_dec float_max tag_integer_533 integer_stackdepth float_max integer_dup_times integer_dup_items float_frominteger float_dec integer_div print_float float_rot)
Errors: [23.0 2 23.0 2 23.0 2 23.0 2 23.0 2 3.0 2 23.0 2 23.0 2 23.0 2 23.0 2 23.0 2 23.0 2 61.2184 11 6.0 2 23.0 2 23.0 2 23.0 2 23.0 2 23.0 2 23.0 3 23.0 3 23.0 2 23.0 2 23.0 2 23.0 3]
Total: 638.2184
Mean: 12.764368
Genome size: 70
Size: 71
Percent parens: 0.014
--- Population Statistics ---
Average total errors in population: 3463.7606001000045
Median total errors in population: 690.6206
Error averages by case: (146.792555399999 9.791 116.19982759999986 2.9 114.35010410000005 3.717 145.7932698999997 9.761 112.43045069999997 3.565 100.10856450000118 9.54 132.3705014000002 11.518 114.05134359999984 3.662 106.45606350000006 3.499 127.9700639000002 3.823 121.65841469999998 3.883 116.55495789999986 3.606 167.03929440000022 4.636 104.32300710000077 9.743 158.89284610000132 10.747 112.24875470000003 3.109 143.18459759999996 11.131 148.49896639999994 3.956 107.65870539999999 3.004 121.12246940000013 4.617 142.94962370000005 3.843 117.16319940000004 3.748 192.11206360000003 4.466 146.54787409999815 10.633 199.75508100000025 4.63)
Error minima by case: (0.2721 2 0.0 0 1.0 1 0.365 1 0.2853 1 0.0 0 2.0979 2 0.2853 1 0.0 0 4.1353 1 1.0 1 0.0 0 3.2184 1 0.4105 1 0.6638 2 0.0 0 0.1749 1 10.4657 1 0.0 0 1.0 1 4.7166 1 0.7089 1 4.4278 1 0.0949 1 4.7911 1)
Average genome size in population (length): 80.608
Average program size in population (points): 81.608
Average percent parens in population: 0.012
Minimum age in population: 168.5839517236962
Maximum age in population: 173.555939086188
Average age in population: 171.3847315475422
Median age in population: 171.4524458356796
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 25
Genome diversity (% unique Plush genomes):	 0.813
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 25
Syntactic diversity (% unique Push programs):	 0.813
Total error diversity:				 0.415
Error (vector) diversity:			 0.556
Behavioral diversity:				 0.556
--- Run Statistics ---
Number of program evaluations used so far: 120000
Number of point (instruction) evaluations so far: 167469346
--- Timings ---
Current time: 1529615828378 milliseconds
Total Time:         378.4 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       132.2 seconds, 34.9%
Fitness Testing:    194.8 seconds, 51.5%
Report:              51.2 seconds, 13.5%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 119
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 120
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 120
;;******************************
;; -*- Number IO problem report - generation 120
Test total error for best: 31050.3074
Test mean error for best: 15.52515
;;------------------------------
Outputs of best individual on training cases:
Correct output: 150.3639690164 | Program output: 127.3639690164
Correct output: -129.2046261   | Program output: -152.2046261  
Correct output: 43.6336388837  | Program output: 20.6336388837 
Correct output: 168.6824809869 | Program output: 145.6824809869
Correct output: -24.6347316794 | Program output: -47.6347316794
Correct output: 39.9291320135  | Program output: 42.9291320135 
Correct output: -20.9190282536 | Program output: -43.9190282536
Correct output: 61.9263871894  | Program output: 38.9263871894 
Correct output: -28.8395473609 | Program output: -51.8395473609
Correct output: -39.146556962  | Program output: -62.146556962 
Correct output: -134.9331989268 | Program output: -157.9331989268
Correct output: -126.4496738486 | Program output: -149.4496738486
Correct output: -51.218440095  | Program output: 8.0           
Correct output: 45.5895106217  | Program output: 51.5895106217 
Correct output: 136.6637618296 | Program output: 113.6637618296
Correct output: -104.5625509424 | Program output: -127.5625509424
Correct output: 80.9125656746  | Program output: 57.9125656746 
Correct output: -63.4657032446 | Program output: -86.4657032446
Correct output: -52.106433034  | Program output: -75.106433034 
Correct output: -99.9152304515 | Program output: -122.9152304515
Correct output: -78.2834351958 | Program output: -101.2834351958
Correct output: -64.2911152024 | Program output: -87.2911152024
Correct output: 93.5722006381  | Program output: 70.5722006381 
Correct output: 141.452540764  | Program output: 118.452540764 
Correct output: 102.2088941323 | Program output: 79.2088941323 
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_flush} {:instruction float_inc} {:instruction float_yank} {:instruction float_mult} {:instruction float_yankdup} {:instruction float_dup_items} {:instruction in1} {:instruction integer_yank} {:instruction float_dec} {:instruction integer_dec} {:instruction in2} {:instruction float_frominteger} {:instruction float_dup_items} {:instruction integer_dup_times} {:instruction integer_dup_items} {:instruction float_frominteger} {:instruction float_dec} {:instruction float_dup_items} {:instruction integer_dup_times} {:instruction tagged_539} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_dup_items} {:instruction integer_dup_items} {:instruction float_dec} {:instruction integer_dup_items} {:instruction integer_yank} {:instruction float_dec} {:instruction float_dec} {:instruction integer_div} {:instruction float_dec} {:instruction float_dec} {:instruction in2} {:instruction integer_swap} {:instruction 11} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_add} {:instruction float_dec} {:instruction integer_yankdup} {:instruction float_dup_items} {:instruction integer_inc} {:instruction integer_dup_items} {:instruction float_dec} {:instruction float_dec} {:instruction integer_dup_items} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction print_integer} {:instruction float_add} {:instruction integer_yank} {:instruction float_dec} {:instruction float_swap} {:instruction float_max} {:instruction tag_integer_533} {:instruction integer_stackdepth} {:instruction float_max} {:instruction integer_dup_times} {:instruction integer_dup_items} {:instruction float_frominteger} {:instruction float_dec} {:instruction integer_div} {:instruction print_float} {:instruction float_rot})
Best program: (float_flush float_inc float_yank float_mult float_yankdup float_dup_items in1 integer_yank float_dec integer_dec in2 float_frominteger float_dup_items integer_dup_times integer_dup_items float_frominteger float_dec float_dup_items integer_dup_times tagged_539 float_dec float_dec float_dec float_dec integer_dup_items integer_dup_items float_dec integer_dup_items integer_yank float_dec float_dec integer_div float_dec float_dec in2 integer_swap 11 float_dec float_dec float_dec float_dec integer_add float_dec integer_yankdup float_dup_items integer_inc integer_dup_items float_dec float_dec integer_dup_items float_dec float_dec float_dec print_integer float_add integer_yank float_dec float_swap float_max tag_integer_533 integer_stackdepth float_max integer_dup_times integer_dup_items float_frominteger float_dec integer_div print_float float_rot)
Errors: [23.0 2 23.0 2 23.0 2 23.0 2 23.0 2 3.0 2 23.0 2 23.0 2 23.0 2 23.0 2 23.0 2 23.0 2 59.2184 11 6.0 2 23.0 2 23.0 2 23.0 2 23.0 2 23.0 2 23.0 3 23.0 3 23.0 2 23.0 2 23.0 2 23.0 3]
Total: 636.2184
Mean: 12.724368
Genome size: 69
Size: 70
Percent parens: 0.014
--- Population Statistics ---
Average total errors in population: 3603.7371748000037
Median total errors in population: 686.6206
Error averages by case: (164.5642286999991 9.274 118.42386149999992 2.987 116.53525540000004 3.63 162.34160340000025 9.222 115.5986949999999 3.622 106.85226680000096 8.743 131.24222300000008 10.721 116.05642849999988 3.573 110.81142860000001 3.694 128.9781025000001 4.015 123.81509779999999 3.938 118.83988649999989 3.658 179.2803921000005 5.462 109.7766964000006 8.959 173.16623490000157 10.019 114.82386190000007 3.328 156.2851865000006 10.283 147.4117387 4.224 110.67597530000002 3.012 122.19296820000011 4.656 143.256371 4.004 119.91964100000003 3.794 199.62737270000008 4.705 162.4523420999983 9.879 206.55331630000018 4.854)
Error minima by case: (0.2721 1 0.0 0 0.0 0 0.365 1 0.0 0 0.0 0 0.0529 1 0.0 0 0.0 0 0.0162 1 1.0 1 0.0 0 0.5755 1 0.4105 1 0.3362 1 0.0 0 0.1749 1 11.7535 1 0.0 0 0.0 0 4.7166 1 0.7089 1 12.4278 1 0.0949 1 1.3986 1)
Average genome size in population (length): 80.995
Average program size in population (points): 81.995
Average percent parens in population: 0.012
Minimum age in population: 170.7144324117682
Maximum age in population: 174.6115419587733
Average age in population: 172.7648558138055
Median age in population: 172.8044292421694
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 27
Genome diversity (% unique Plush genomes):	 0.808
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 27
Syntactic diversity (% unique Push programs):	 0.808
Total error diversity:				 0.423
Error (vector) diversity:			 0.546
Behavioral diversity:				 0.547
--- Run Statistics ---
Number of program evaluations used so far: 121000
Number of point (instruction) evaluations so far: 169494321
--- Timings ---
Current time: 1529615831965 milliseconds
Total Time:         382.0 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       133.4 seconds, 34.9%
Fitness Testing:    196.8 seconds, 51.5%
Report:              51.7 seconds, 13.5%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 120
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 121
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 121
;;******************************
;; -*- Number IO problem report - generation 121
Test total error for best: 29274.655500000008
Test mean error for best: 14.63733
;;------------------------------
Outputs of best individual on training cases:
Correct output: 150.3639690164 | Program output: 130.3639690164
Correct output: -129.2046261   | Program output: -149.2046261  
Correct output: 43.6336388837  | Program output: 23.6336388837 
Correct output: 168.6824809869 | Program output: 148.6824809869
Correct output: -24.6347316794 | Program output: -44.6347316794
Correct output: 39.9291320135  | Program output: 42.9291320135 
Correct output: -20.9190282536 | Program output: -40.9190282536
Correct output: 61.9263871894  | Program output: 41.9263871894 
Correct output: -28.8395473609 | Program output: -48.8395473609
Correct output: -39.146556962  | Program output: -59.146556962 
Correct output: -134.9331989268 | Program output: -154.9331989268
Correct output: -126.4496738486 | Program output: -146.4496738486
Correct output: -51.218440095  | Program output: 12.0          
Correct output: 45.5895106217  | Program output: 51.5895106217 
Correct output: 136.6637618296 | Program output: 116.6637618296
Correct output: -104.5625509424 | Program output: -124.5625509424
Correct output: 80.9125656746  | Program output: 60.9125656746 
Correct output: -63.4657032446 | Program output: -83.4657032446
Correct output: -52.106433034  | Program output: -72.106433034 
Correct output: -99.9152304515 | Program output: -119.9152304515
Correct output: -78.2834351958 | Program output: -98.2834351958
Correct output: -64.2911152024 | Program output: -84.2911152024
Correct output: 93.5722006381  | Program output: 73.5722006381 
Correct output: 141.452540764  | Program output: 121.452540764 
Correct output: 102.2088941323 | Program output: 82.2088941323 
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_flush} {:instruction float_inc} {:instruction float_yank} {:instruction float_mult} {:instruction float_flush} {:instruction float_inc} {:instruction float_yank} {:instruction float_mult} {:instruction float_yankdup} {:instruction float_dup_items} {:instruction in1} {:instruction integer_yank} {:instruction float_dec} {:instruction integer_dec} {:instruction in2} {:instruction float_frominteger} {:instruction float_dup_items} {:instruction integer_dup_times} {:instruction integer_dup_items} {:instruction float_frominteger} {:instruction float_dec} {:instruction in2} {:instruction integer_dup_times} {:instruction tagged_539} {:instruction float_dec} {:instruction integer_flush} {:instruction float_dec} {:instruction float_dec} {:instruction integer_dup_items} {:instruction integer_dup_items} {:instruction float_dec} {:instruction float_dec} {:instruction in2} {:instruction 11} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_add} {:instruction float_dec} {:instruction integer_yankdup} {:instruction float_dup_items} {:instruction integer_inc} {:instruction integer_dup_items} {:instruction float_dec} {:instruction float_dup_items} {:instruction integer_dup_items} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction print_integer} {:instruction float_add} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_max} {:instruction tag_integer_533} {:instruction integer_stackdepth} {:instruction float_max} {:instruction integer_dup_times} {:instruction integer_dup_items} {:instruction float_frominteger} {:instruction float_dec} {:instruction integer_div} {:instruction print_float} {:instruction float_rot})
Best program: (float_flush float_inc float_yank float_mult float_flush float_inc float_yank float_mult float_yankdup float_dup_items in1 integer_yank float_dec integer_dec in2 float_frominteger float_dup_items integer_dup_times integer_dup_items float_frominteger float_dec in2 integer_dup_times tagged_539 float_dec integer_flush float_dec float_dec integer_dup_items integer_dup_items float_dec float_dec in2 11 float_dec float_dec float_dec float_dec integer_add float_dec integer_yankdup float_dup_items integer_inc integer_dup_items float_dec float_dup_items integer_dup_items float_dec float_dec float_dec print_integer float_add float_dec float_dec float_dec float_max tag_integer_533 integer_stackdepth float_max integer_dup_times integer_dup_items float_frominteger float_dec integer_div print_float float_rot)
Errors: [20.0 1 20.0 1 20.0 1 20.0 1 20.0 1 3.0 2 20.0 1 20.0 1 20.0 1 20.0 1 20.0 1 20.0 1 63.2184 10 6.0 2 20.0 1 20.0 1 20.0 1 20.0 1 20.0 1 20.0 2 20.0 1 20.0 1 20.0 1 20.0 1 20.0 2]
Total: 550.2184
Mean: 11.004368
Genome size: 66
Size: 67
Percent parens: 0.015
--- Population Statistics ---
Average total errors in population: 3553.0494981000024
Median total errors in population: 681.3960999999999
Error averages by case: (164.8178531999993 8.314 119.82200059999987 3.177 117.11757200000004 3.717 162.83258270000007 8.279 115.71782960000004 3.716 106.39619900000068 7.797 128.59352610000013 9.444 117.44567749999985 3.734 110.87536520000005 3.876 125.94113840000014 4.323 124.04639709999996 4.105 119.9745556999999 3.836 175.38216710000063 6.195 109.76773840000048 7.886 171.3079771000014 8.883 117.1870775000001 3.66 155.2655012000005 9.046 141.92521199999996 4.589 112.80042359999997 3.188 122.74345830000014 4.691 138.2116083 4.338 119.96630830000002 3.841 184.5697585000001 4.558 160.94997419999882 8.784 190.56859650000004 4.846)
Error minima by case: (0.2721 1 0.0 0 0.0 0 0.3175 1 0.0 0 0.0709 1 4.3966 1 0.0 0 0.0 0 0.4537 1 0.0668 1 0.0 0 0.2184 1 0.0 0 1.0 1 0.0 0 0.0 0 15.7456 1 0.0 0 0.0 0 1.7675 1 0.2911 1 7.0 1 0.0949 1 12.2089 1)
Average genome size in population (length): 80.901
Average program size in population (points): 81.901
Average percent parens in population: 0.012
Minimum age in population: 172.0029275259433
Maximum age in population: 176.263335538648
Average age in population: 174.2478919623337
Median age in population: 174.2844680005778
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 14
Genome diversity (% unique Plush genomes):	 0.813
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 14
Syntactic diversity (% unique Push programs):	 0.813
Total error diversity:				 0.442
Error (vector) diversity:			 0.538
Behavioral diversity:				 0.539
--- Run Statistics ---
Number of program evaluations used so far: 122000
Number of point (instruction) evaluations so far: 171517046
--- Timings ---
Current time: 1529615835450 milliseconds
Total Time:         385.5 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       134.4 seconds, 34.9%
Fitness Testing:    198.8 seconds, 51.6%
Report:              52.1 seconds, 13.5%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 121
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 122
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 122
;;******************************
;; -*- Number IO problem report - generation 122
Test total error for best: 21202.6068
Test mean error for best: 10.60130
;;------------------------------
Outputs of best individual on training cases:
Correct output: 150.3639690164 | Program output: 132.3639690164
Correct output: -129.2046261   | Program output: -147.2046261  
Correct output: 43.6336388837  | Program output: 25.6336388837 
Correct output: 168.6824809869 | Program output: 150.6824809869
Correct output: -24.6347316794 | Program output: -42.6347316794
Correct output: 39.9291320135  | Program output: 21.9291320135 
Correct output: -20.9190282536 | Program output: -38.9190282536
Correct output: 61.9263871894  | Program output: 43.9263871894 
Correct output: -28.8395473609 | Program output: -46.8395473609
Correct output: -39.146556962  | Program output: -57.146556962 
Correct output: -134.9331989268 | Program output: -152.9331989268
Correct output: -126.4496738486 | Program output: -144.4496738486
Correct output: -51.218440095  | Program output: -69.218440095 
Correct output: 45.5895106217  | Program output: 27.5895106217 
Correct output: 136.6637618296 | Program output: 118.6637618296
Correct output: -104.5625509424 | Program output: -122.5625509424
Correct output: 80.9125656746  | Program output: 62.9125656746 
Correct output: -63.4657032446 | Program output: -81.4657032446
Correct output: -52.106433034  | Program output: -70.106433034 
Correct output: -99.9152304515 | Program output: -117.9152304515
Correct output: -78.2834351958 | Program output: -96.2834351958
Correct output: -64.2911152024 | Program output: -82.2911152024
Correct output: 93.5722006381  | Program output: 75.5722006381 
Correct output: 141.452540764  | Program output: 123.452540764 
Correct output: 102.2088941323 | Program output: 84.2088941323 
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_flush} {:instruction float_inc} {:instruction float_yank} {:instruction float_mult} {:instruction float_flush} {:instruction float_inc} {:instruction float_yank} {:instruction in1} {:instruction integer_yank} {:instruction float_dec} {:instruction integer_dec} {:instruction in2} {:instruction float_frominteger} {:instruction float_dup_items} {:instruction integer_dup_times} {:instruction integer_dup_items} {:instruction float_frominteger} {:instruction float_dec} {:instruction float_dup_items} {:instruction integer_dup_times} {:instruction tagged_539} {:instruction float_dec} {:instruction integer_flush} {:instruction float_dec} {:instruction float_dec} {:instruction integer_dup_items} {:instruction integer_dup_items} {:instruction float_dec} {:instruction integer_dup_items} {:instruction integer_yank} {:instruction float_rot} {:instruction float_dec} {:instruction integer_div} {:instruction float_dec} {:instruction integer_yank} {:instruction in2} {:instruction integer_swap} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_add} {:instruction float_dec} {:instruction integer_max} {:instruction float_dup_items} {:instruction integer_inc} {:instruction integer_dup_items} {:instruction float_dec} {:instruction float_dec} {:instruction integer_dup_items} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction print_integer} {:instruction float_add} {:instruction float_frominteger} {:instruction float_dec} {:instruction integer_div} {:instruction print_float} {:instruction float_rot})
Best program: (float_flush float_inc float_yank float_mult float_flush float_inc float_yank in1 integer_yank float_dec integer_dec in2 float_frominteger float_dup_items integer_dup_times integer_dup_items float_frominteger float_dec float_dup_items integer_dup_times tagged_539 float_dec integer_flush float_dec float_dec integer_dup_items integer_dup_items float_dec integer_dup_items integer_yank float_rot float_dec integer_div float_dec integer_yank in2 integer_swap float_dec float_dec float_dec integer_add float_dec integer_max float_dup_items integer_inc integer_dup_items float_dec float_dec integer_dup_items float_dec float_dec float_dec print_integer float_add float_frominteger float_dec integer_div print_float float_rot)
Errors: [18.0 2 18.0 2 18.0 2 18.0 2 18.0 2 18.0 2 18.0 2 18.0 2 18.0 2 18.0 2 18.0 2 18.0 2 18.0 2 18.0 2 18.0 2 18.0 2 18.0 2 18.0 2 18.0 2 18.0 3 18.0 2 18.0 2 18.0 2 18.0 2 18.0 3]
Total: 502.0
Mean: 10.04
Genome size: 59
Size: 60
Percent parens: 0.017
--- Population Statistics ---
Average total errors in population: 3248.7474738000055
Median total errors in population: 674.6206
Error averages by case: (141.04994129999977 5.685 119.1373588999999 3.328 116.10653230000004 3.481 141.5396144 5.91 105.15973580000004 3.435 101.86450840000016 5.432 124.85392679999998 6.522 117.69729329999996 3.476 105.87108110000003 3.876 121.51618280000004 4.559 121.3503167 3.955 119.02497219999994 3.83 154.97691310000056 8.327 107.51073320000019 5.509 140.60191830000014 5.952 117.44589810000005 3.787 133.16090559999995 5.876 130.1225289 4.809 112.08150619999998 3.256 119.0614183000001 4.548 123.42561019999998 4.59 116.9941782 3.579 148.40253459999997 4.373 138.85953339999966 6.052 151.9223317 4.863)
Error minima by case: (0.7279 1 0.0 0 0.0 0 0.365 1 0.0 0 0.0709 1 1.6605 1 0.0 0 0.0 0 0.3045 1 3.0 1 0.0 0 6.5184 1 0.0 0 1.0 1 0.0 0 0.9126 1 0.6236 1 0.0 0 0.0 0 2.1679 1 4.7089 1 2.6982 1 0.9051 1 5.9385 1)
Average genome size in population (length): 74.466
Average program size in population (points): 75.466
Average percent parens in population: 0.013
Minimum age in population: 173.3445356470642
Maximum age in population: 177.8753639815449
Average age in population: 175.6617289532753
Median age in population: 175.6987901014581
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 33
Genome diversity (% unique Plush genomes):	 0.753
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 33
Syntactic diversity (% unique Push programs):	 0.753
Total error diversity:				 0.368
Error (vector) diversity:			 0.421
Behavioral diversity:				 0.422
--- Run Statistics ---
Number of program evaluations used so far: 123000
Number of point (instruction) evaluations so far: 173378971
--- Timings ---
Current time: 1529615838842 milliseconds
Total Time:         388.8 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       135.5 seconds, 34.8%
Fitness Testing:    200.7 seconds, 51.6%
Report:              52.6 seconds, 13.5%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 122
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 123
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 123
;;******************************
;; -*- Number IO problem report - generation 123
Test total error for best: 16821.0
Test mean error for best: 8.41050
;;------------------------------
Outputs of best individual on training cases:
Correct output: 150.3639690164 | Program output: 136.3639690164
Correct output: -129.2046261   | Program output: -143.2046261  
Correct output: 43.6336388837  | Program output: 29.6336388837 
Correct output: 168.6824809869 | Program output: 154.6824809869
Correct output: -24.6347316794 | Program output: -38.6347316794
Correct output: 39.9291320135  | Program output: 25.9291320135 
Correct output: -20.9190282536 | Program output: -34.9190282536
Correct output: 61.9263871894  | Program output: 47.9263871894 
Correct output: -28.8395473609 | Program output: -42.8395473609
Correct output: -39.146556962  | Program output: -53.146556962 
Correct output: -134.9331989268 | Program output: -148.9331989268
Correct output: -126.4496738486 | Program output: -140.4496738486
Correct output: -51.218440095  | Program output: -65.218440095 
Correct output: 45.5895106217  | Program output: 31.5895106217 
Correct output: 136.6637618296 | Program output: 122.6637618296
Correct output: -104.5625509424 | Program output: -118.5625509424
Correct output: 80.9125656746  | Program output: 66.9125656746 
Correct output: -63.4657032446 | Program output: -77.4657032446
Correct output: -52.106433034  | Program output: -66.106433034 
Correct output: -99.9152304515 | Program output: -113.9152304515
Correct output: -78.2834351958 | Program output: -92.2834351958
Correct output: -64.2911152024 | Program output: -78.2911152024
Correct output: 93.5722006381  | Program output: 79.5722006381 
Correct output: 141.452540764  | Program output: 127.452540764 
Correct output: 102.2088941323 | Program output: 88.2088941323 
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_flush} {:instruction float_inc} {:instruction float_yank} {:instruction float_mult} {:instruction float_flush} {:instruction float_inc} {:instruction float_yank} {:instruction float_mult} {:instruction float_yankdup} {:instruction float_dup_items} {:instruction in1} {:instruction integer_yank} {:instruction float_dec} {:instruction integer_dec} {:instruction in2} {:instruction float_frominteger} {:instruction float_dup_items} {:instruction integer_dup_times} {:instruction integer_dup_items} {:instruction float_frominteger} {:instruction float_frominteger} {:instruction float_dup_items} {:instruction integer_dup_times} {:instruction tagged_539} {:instruction float_dec} {:instruction integer_flush} {:instruction float_dec} {:instruction float_dec} {:instruction integer_dup_items} {:instruction integer_dup_items} {:instruction float_dec} {:instruction integer_dup_items} {:instruction integer_yank} {:instruction float_dec} {:instruction float_dec} {:instruction integer_dup_items} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction print_integer} {:instruction float_add} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_max} {:instruction tag_integer_533} {:instruction integer_stackdepth} {:instruction float_max} {:instruction integer_dup_times} {:instruction integer_dup_items} {:instruction float_frominteger} {:instruction float_dec} {:instruction integer_div} {:instruction print_float} {:instruction float_rot})
Best program: (float_flush float_inc float_yank float_mult float_flush float_inc float_yank float_mult float_yankdup float_dup_items in1 integer_yank float_dec integer_dec in2 float_frominteger float_dup_items integer_dup_times integer_dup_items float_frominteger float_frominteger float_dup_items integer_dup_times tagged_539 float_dec integer_flush float_dec float_dec integer_dup_items integer_dup_items float_dec integer_dup_items integer_yank float_dec float_dec integer_dup_items float_dec float_dec float_dec print_integer float_add float_dec float_dec float_dec float_max tag_integer_533 integer_stackdepth float_max integer_dup_times integer_dup_items float_frominteger float_dec integer_div print_float float_rot)
Errors: [14.0 2 14.0 2 14.0 2 14.0 2 14.0 2 14.0 2 14.0 2 14.0 2 14.0 2 14.0 2 14.0 2 14.0 2 14.0 2 14.0 2 14.0 2 14.0 2 14.0 2 14.0 2 14.0 2 14.0 3 14.0 2 14.0 2 14.0 2 14.0 2 14.0 3]
Total: 402.0
Mean: 8.04
Genome size: 55
Size: 56
Percent parens: 0.018
--- Population Statistics ---
Average total errors in population: 2455.9674753000054
Median total errors in population: 637.2184
Error averages by case: (99.39907360000002 3.679 96.8456947999999 3.331 88.04004400000004 3.181 100.7748487 4.001 84.25859229999999 3.191 73.45051799999999 3.524 94.78854750000002 4.509 89.9054535999999 3.19 86.45227299999999 3.874 93.67017740000004 4.38 97.58212459999999 3.839 96.51257279999984 3.83 122.35937359999899 8.985 78.97322340000005 3.509 98.00555009999998 3.829 94.0144107000001 3.757 94.46597269999997 3.633 97.96047069999997 4.579 88.88388749999999 3.151 93.72010820000018 4.407 96.13208489999997 4.611 91.93372579999996 3.228 98.46523190000003 3.912 98.98102339999997 3.91 99.78449210000001 4.568)
Error minima by case: (0.5875 1 3.0 1 0.0 0 0.365 1 0.0 0 0.0 0 1.4603 1 0.0 0 1.0 1 3.0366 1 2.9332 1 4.0 1 6.0 1 1.0 1 0.9507 1 1.0 1 0.0 0 14.0 1 0.0 0 0.0 0 5.7166 1 1.7089 1 1.1597 1 0.4525 1 1.2089 1)
Average genome size in population (length): 67.716
Average program size in population (points): 68.716
Average percent parens in population: 0.015
Minimum age in population: 174.5500978170002
Maximum age in population: 179.2174772963626
Average age in population: 177.1669689057813
Median age in population: 177.2230717395196
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 20
Genome diversity (% unique Plush genomes):	 0.758
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 20
Syntactic diversity (% unique Push programs):	 0.758
Total error diversity:				 0.311
Error (vector) diversity:			 0.355
Behavioral diversity:				 0.356
--- Run Statistics ---
Number of program evaluations used so far: 124000
Number of point (instruction) evaluations so far: 175072346
--- Timings ---
Current time: 1529615842176 milliseconds
Total Time:         392.2 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       136.6 seconds, 34.8%
Fitness Testing:    202.5 seconds, 51.6%
Report:              53.0 seconds, 13.5%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 123
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 124
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 124
;;******************************
;; -*- Number IO problem report - generation 124
Test total error for best: 14684.0
Test mean error for best: 7.34200
;;------------------------------
Outputs of best individual on training cases:
Correct output: 150.3639690164 | Program output: 138.3639690164
Correct output: -129.2046261   | Program output: -141.2046261  
Correct output: 43.6336388837  | Program output: 31.6336388837 
Correct output: 168.6824809869 | Program output: 156.6824809869
Correct output: -24.6347316794 | Program output: -36.6347316794
Correct output: 39.9291320135  | Program output: 27.9291320135 
Correct output: -20.9190282536 | Program output: -32.9190282536
Correct output: 61.9263871894  | Program output: 49.9263871894 
Correct output: -28.8395473609 | Program output: -40.8395473609
Correct output: -39.146556962  | Program output: -51.146556962 
Correct output: -134.9331989268 | Program output: -146.9331989268
Correct output: -126.4496738486 | Program output: -138.4496738486
Correct output: -51.218440095  | Program output: -63.218440095 
Correct output: 45.5895106217  | Program output: 33.5895106217 
Correct output: 136.6637618296 | Program output: 124.6637618296
Correct output: -104.5625509424 | Program output: -116.5625509424
Correct output: 80.9125656746  | Program output: 68.9125656746 
Correct output: -63.4657032446 | Program output: -75.4657032446
Correct output: -52.106433034  | Program output: -64.106433034 
Correct output: -99.9152304515 | Program output: -111.9152304515
Correct output: -78.2834351958 | Program output: -90.2834351958
Correct output: -64.2911152024 | Program output: -76.2911152024
Correct output: 93.5722006381  | Program output: 81.5722006381 
Correct output: 141.452540764  | Program output: 129.452540764 
Correct output: 102.2088941323 | Program output: 90.2088941323 
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_flush} {:instruction float_inc} {:instruction float_yank} {:instruction float_mult} {:instruction float_yankdup} {:instruction float_dup_items} {:instruction in1} {:instruction integer_yank} {:instruction float_dec} {:instruction integer_dec} {:instruction in2} {:instruction float_frominteger} {:instruction float_dup_items} {:instruction integer_dup_times} {:instruction integer_dup_items} {:instruction float_frominteger} {:instruction float_dec} {:instruction float_dup_items} {:instruction integer_dup_times} {:instruction tagged_539} {:instruction float_dec} {:instruction integer_flush} {:instruction float_dec} {:instruction integer_dup_items} {:instruction float_dec} {:instruction float_dup_items} {:instruction integer_dup_items} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction print_integer} {:instruction float_add} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_max} {:instruction tag_integer_533} {:instruction integer_stackdepth} {:instruction float_max} {:instruction integer_dup_times} {:instruction integer_dup_items} {:instruction float_frominteger} {:instruction float_dec} {:instruction integer_div} {:instruction print_float} {:instruction float_rot})
Best program: (float_flush float_inc float_yank float_mult float_yankdup float_dup_items in1 integer_yank float_dec integer_dec in2 float_frominteger float_dup_items integer_dup_times integer_dup_items float_frominteger float_dec float_dup_items integer_dup_times tagged_539 float_dec integer_flush float_dec integer_dup_items float_dec float_dup_items integer_dup_items float_dec float_dec float_dec print_integer float_add float_dec float_dec float_dec float_max tag_integer_533 integer_stackdepth float_max integer_dup_times integer_dup_items float_frominteger float_dec integer_div print_float float_rot)
Errors: [12.0 2 12.0 2 12.0 2 12.0 2 12.0 2 12.0 2 12.0 2 12.0 2 12.0 2 12.0 2 12.0 2 12.0 2 12.0 2 12.0 2 12.0 2 12.0 2 12.0 2 12.0 2 12.0 2 12.0 3 12.0 2 12.0 2 12.0 2 12.0 2 12.0 2]
Total: 351.0
Mean: 7.02
Genome size: 46
Size: 47
Percent parens: 0.021
--- Population Statistics ---
Average total errors in population: 2503.148653700004
Median total errors in population: 556.10895
Error averages by case: (99.67359740000003 3.437 100.41286609999989 3.182 91.95638370000002 3.18 100.46268509999996 3.696 87.06885930000003 3.162 80.85502939999998 3.336 99.30043090000002 3.988 93.4013721999999 3.171 88.28581529999997 3.547 98.2144304000001 3.947 100.75924409999996 3.69 100.03409049999989 3.69 116.63729049999935 7.492 84.32827810000005 3.311 98.88922509999996 3.544 98.23693070000004 3.587 95.4317994 3.377 100.96384949999997 4.102 93.28421759999998 3.038 98.17333500000015 4.297 95.5092907 3.851 95.52567239999996 3.141 95.97486869999999 3.721 98.90563919999998 3.563 97.27445239999996 4.539)
Error minima by case: (7.636 1 9.0 1 0.0 0 0.3175 1 0.3653 1 0.0 0 0.2373 1 2.0 1 3.1605 1 12.0 1 2.9332 1 8.4497 1 3.0 1 0.0 0 2.3362 1 3.4374 1 3.0 1 12.0 1 0.1064 1 0.0 0 4.7166 1 0.2911 1 9.0 1 0.5475 1 9.0 1)
Average genome size in population (length): 63.606
Average program size in population (points): 64.606
Average percent parens in population: 0.016
Minimum age in population: 175.9161625797711
Maximum age in population: 180.8623366912291
Average age in population: 178.7333504475677
Median age in population: 178.7901829754973
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 24
Genome diversity (% unique Plush genomes):	 0.768
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 24
Syntactic diversity (% unique Push programs):	 0.768
Total error diversity:				 0.269
Error (vector) diversity:			 0.318
Behavioral diversity:				 0.32
--- Run Statistics ---
Number of program evaluations used so far: 125000
Number of point (instruction) evaluations so far: 176662596
--- Timings ---
Current time: 1529615845342 milliseconds
Total Time:         395.4 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       137.7 seconds, 34.8%
Fitness Testing:    204.2 seconds, 51.6%
Report:              53.5 seconds, 13.5%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 124
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 125
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 125
;;******************************
;; -*- Number IO problem report - generation 125
Test total error for best: 9200.3088
Test mean error for best: 4.60015
;;------------------------------
Outputs of best individual on training cases:
Correct output: 150.3639690164 | Program output: 143.3639690164
Correct output: -129.2046261   | Program output: -136.2046261  
Correct output: 43.6336388837  | Program output: 36.6336388837 
Correct output: 168.6824809869 | Program output: 161.6824809869
Correct output: -24.6347316794 | Program output: -31.6347316794
Correct output: 39.9291320135  | Program output: 32.9291320135 
Correct output: -20.9190282536 | Program output: -27.9190282536
Correct output: 61.9263871894  | Program output: 54.9263871894 
Correct output: -28.8395473609 | Program output: -35.8395473609
Correct output: -39.146556962  | Program output: -46.146556962 
Correct output: -134.9331989268 | Program output: -141.9331989268
Correct output: -126.4496738486 | Program output: -133.4496738486
Correct output: -51.218440095  | Program output: -58.218440095 
Correct output: 45.5895106217  | Program output: 38.5895106217 
Correct output: 136.6637618296 | Program output: 129.6637618296
Correct output: -104.5625509424 | Program output: -111.5625509424
Correct output: 80.9125656746  | Program output: 73.9125656746 
Correct output: -63.4657032446 | Program output: -70.4657032446
Correct output: -52.106433034  | Program output: -59.106433034 
Correct output: -99.9152304515 | Program output: -106.9152304515
Correct output: -78.2834351958 | Program output: -85.2834351958
Correct output: -64.2911152024 | Program output: -71.2911152024
Correct output: 93.5722006381  | Program output: 86.5722006381 
Correct output: 141.452540764  | Program output: 134.452540764 
Correct output: 102.2088941323 | Program output: 95.2088941323 
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_flush} {:instruction float_inc} {:instruction float_flush} {:instruction float_inc} {:instruction float_yank} {:instruction float_mult} {:instruction float_flush} {:instruction float_inc} {:instruction float_yank} {:instruction float_mult} {:instruction float_yankdup} {:instruction float_dup_items} {:instruction in1} {:instruction integer_yank} {:instruction print_integer} {:instruction integer_dec} {:instruction in2} {:instruction float_frominteger} {:instruction float_dup_items} {:instruction integer_dup_times} {:instruction integer_dup_items} {:instruction float_frominteger} {:instruction float_frominteger} {:instruction integer_div} {:instruction float_dec} {:instruction float_dec} {:instruction in2} {:instruction integer_swap} {:instruction 11} {:instruction integer_add} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_add} {:instruction float_dec} {:instruction integer_max} {:instruction float_dup_items} {:instruction integer_inc} {:instruction float_add} {:instruction float_frominteger} {:instruction float_dec} {:instruction integer_div} {:instruction print_float} {:instruction float_rot})
Best program: (float_flush float_inc float_flush float_inc float_yank float_mult float_flush float_inc float_yank float_mult float_yankdup float_dup_items in1 integer_yank print_integer integer_dec in2 float_frominteger float_dup_items integer_dup_times integer_dup_items float_frominteger float_frominteger integer_div float_dec float_dec in2 integer_swap 11 integer_add float_dec float_dec float_dec integer_add float_dec integer_max float_dup_items integer_inc float_add float_frominteger float_dec integer_div print_float float_rot)
Errors: [7.0 2 7.0 2 7.0 2 7.0 1 7.0 2 7.0 1 7.0 1 7.0 2 7.0 2 7.0 2 7.0 2 7.0 2 7.0 1 7.0 2 7.0 2 7.0 2 7.0 2 7.0 2 7.0 1 7.0 3 7.0 2 7.0 2 7.0 2 7.0 2 7.0 3]
Total: 222.0
Mean: 4.44
Genome size: 44
Size: 45
Percent parens: 0.022
--- Population Statistics ---
Average total errors in population: 2138.1141932000023
Median total errors in population: 502.0
Error averages by case: (82.93634190000006 3.469 85.85882719999987 3.157 78.59856890000003 3.23 84.17585130000005 3.64 76.44369859999996 3.165 71.52962740000002 3.332 85.11270069999996 4.023 80.1264055999999 3.223 77.55843079999995 3.557 83.98668340000002 3.929 86.30257679999997 3.565 85.43886519999988 3.577 90.76853609999976 4.788 74.45086460000006 3.344 82.14260200000004 3.535 83.57725449999994 3.514 78.14238610000008 3.438 86.98426489999997 4.119 79.32675099999996 3.093 83.48401960000014 4.213 84.37722929999998 3.756 81.54031419999998 3.184 80.7087666 3.706 82.20746599999997 3.48 81.70316049999998 4.595)
Error minima by case: (6.364 1 5.0 1 1.0 1 0.3175 1 0.3653 1 0.0 0 0.9398 1 4.0 1 3.1605 1 5.9398 1 5.0 1 5.0 1 1.0 1 0.0 0 0.4022 1 5.0 1 0.8494 1 7.0 1 0.1064 1 2.0 1 4.7166 1 0.2911 1 3.4278 1 0.4525 1 3.7911 1)
Average genome size in population (length): 59.873
Average program size in population (points): 60.873
Average percent parens in population: 0.017
Minimum age in population: 177.6525434984383
Maximum age in population: 182.2730973290751
Average age in population: 180.3139388759663
Median age in population: 180.3377300605592
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 16
Genome diversity (% unique Plush genomes):	 0.748
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 16
Syntactic diversity (% unique Push programs):	 0.748
Total error diversity:				 0.239
Error (vector) diversity:			 0.256
Behavioral diversity:				 0.257
--- Run Statistics ---
Number of program evaluations used so far: 126000
Number of point (instruction) evaluations so far: 178159446
--- Timings ---
Current time: 1529615848490 milliseconds
Total Time:         398.5 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       138.7 seconds, 34.8%
Fitness Testing:    205.8 seconds, 51.6%
Report:              53.8 seconds, 13.5%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 125
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 126
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 126
;;******************************
;; -*- Number IO problem report - generation 126
Test total error for best: 6791.0
Test mean error for best: 3.39550
;;------------------------------
Outputs of best individual on training cases:
Correct output: 150.3639690164 | Program output: 145.3639690164
Correct output: -129.2046261   | Program output: -134.2046261  
Correct output: 43.6336388837  | Program output: 38.6336388837 
Correct output: 168.6824809869 | Program output: 163.6824809869
Correct output: -24.6347316794 | Program output: -29.6347316794
Correct output: 39.9291320135  | Program output: 34.9291320135 
Correct output: -20.9190282536 | Program output: -25.9190282536
Correct output: 61.9263871894  | Program output: 56.9263871894 
Correct output: -28.8395473609 | Program output: -33.8395473609
Correct output: -39.146556962  | Program output: -44.146556962 
Correct output: -134.9331989268 | Program output: -139.9331989268
Correct output: -126.4496738486 | Program output: -131.4496738486
Correct output: -51.218440095  | Program output: -56.218440095 
Correct output: 45.5895106217  | Program output: 40.5895106217 
Correct output: 136.6637618296 | Program output: 131.6637618296
Correct output: -104.5625509424 | Program output: -109.5625509424
Correct output: 80.9125656746  | Program output: 75.9125656746 
Correct output: -63.4657032446 | Program output: -68.4657032446
Correct output: -52.106433034  | Program output: -57.106433034 
Correct output: -99.9152304515 | Program output: -104.9152304515
Correct output: -78.2834351958 | Program output: -83.2834351958
Correct output: -64.2911152024 | Program output: -69.2911152024
Correct output: 93.5722006381  | Program output: 88.5722006381 
Correct output: 141.452540764  | Program output: 136.452540764 
Correct output: 102.2088941323 | Program output: 97.2088941323 
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_flush} {:instruction float_inc} {:instruction integer_shove} {:instruction float_mult} {:instruction float_yankdup} {:instruction float_dup_items} {:instruction in1} {:instruction integer_yank} {:instruction float_dec} {:instruction integer_dec} {:instruction in2} {:instruction float_frominteger} {:instruction float_dup_items} {:instruction float_dup_items} {:instruction in1} {:instruction float_sin} {:instruction float_dec} {:instruction integer_dec} {:instruction in2} {:instruction float_frominteger} {:instruction float_dup_items} {:instruction integer_dup_times} {:instruction integer_dup_items} {:instruction float_frominteger} {:instruction float_dec} {:instruction float_dup_items} {:instruction integer_dup_times} {:instruction tagged_539} {:instruction float_dec} {:instruction integer_flush} {:instruction float_dec} {:instruction float_dec} {:instruction integer_mult} {:instruction integer_dup_items} {:instruction float_dec} {:instruction integer_dup_items} {:instruction integer_yank} {:instruction float_dec} {:instruction float_dec} {:instruction integer_div} {:instruction float_dec} {:instruction float_dec} {:instruction print_integer} {:instruction float_add} {:instruction integer_yank} {:instruction float_dec} {:instruction integer_dup_items} {:instruction float_max} {:instruction float_dec} {:instruction print_integer} {:instruction float_add} {:instruction 79} {:instruction float_dec} {:instruction float_dec} {:instruction float_max} {:instruction tag_integer_533} {:instruction integer_stackdepth} {:instruction float_max} {:instruction integer_dup_times} {:instruction integer_dup_items} {:instruction float_frominteger} {:instruction integer_dup_items} {:instruction float_swap} {:instruction float_dec} {:instruction integer_div} {:instruction print_float} {:instruction float_rot})
Best program: (float_flush float_inc integer_shove float_mult float_yankdup float_dup_items in1 integer_yank float_dec integer_dec in2 float_frominteger float_dup_items float_dup_items in1 float_sin float_dec integer_dec in2 float_frominteger float_dup_items integer_dup_times integer_dup_items float_frominteger float_dec float_dup_items integer_dup_times tagged_539 float_dec integer_flush float_dec float_dec integer_mult integer_dup_items float_dec integer_dup_items integer_yank float_dec float_dec integer_div float_dec float_dec print_integer float_add integer_yank float_dec integer_dup_items float_max float_dec print_integer float_add 79 float_dec float_dec float_max tag_integer_533 integer_stackdepth float_max integer_dup_times integer_dup_items float_frominteger integer_dup_items float_swap float_dec integer_div print_float float_rot)
Errors: [5.0 2 5.0 2 5.0 2 5.0 1 5.0 1 5.0 1 5.0 1 5.0 2 5.0 2 5.0 2 5.0 1 5.0 2 5.0 1 5.0 1 5.0 1 5.0 1 5.0 2 5.0 1 5.0 1 5.0 3 5.0 2 5.0 1 5.0 2 5.0 2 5.0 3]
Total: 165.0
Mean: 3.3
Genome size: 67
Size: 68
Percent parens: 0.015
--- Population Statistics ---
Average total errors in population: 2740.4443142
Median total errors in population: 427.0
Error averages by case: (106.8943417000001 3.706 111.3429787999999 3.424 98.75301780000001 3.375 108.15715259999992 3.895 101.99406150000009 3.459 94.30476129999992 3.358 110.40888430000008 4.216 100.22200429999991 3.382 103.05420359999997 3.809 109.34751340000012 4.121 111.61313649999997 3.94 111.02154719999986 3.953 110.24849629999986 3.971 96.17305960000003 3.381 105.86777899999989 3.713 109.32454720000014 3.873 100.83546689999994 3.617 112.17883069999999 4.307 105.44738160000001 3.333 109.30671830000014 4.524 109.83437049999998 3.969 107.43339059999998 3.423 102.14387649999998 3.896 106.36134359999998 3.732 103.08745039999997 4.711)
Error minima by case: (2.364 1 1.0 1 0.4523 1 1.6825 1 0.3653 1 0.0 0 5.0 1 2.219 1 1.0 1 5.0 1 0.9332 1 1.0 1 1.0 1 0.0 0 0.3362 1 1.0 1 4.9126 1 5.0 1 0.1064 1 0.0848 1 1.0 1 0.2911 1 1.0 1 0.4525 1 1.0 1)
Average genome size in population (length): 56.484
Average program size in population (points): 57.484
Average percent parens in population: 0.018
Minimum age in population: 179.8842257918488
Maximum age in population: 183.5966886553356
Average age in population: 181.8276271532243
Median age in population: 181.8594191553349
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 17
Genome diversity (% unique Plush genomes):	 0.735
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 17
Syntactic diversity (% unique Push programs):	 0.735
Total error diversity:				 0.18
Error (vector) diversity:			 0.184
Behavioral diversity:				 0.184
--- Run Statistics ---
Number of program evaluations used so far: 127000
Number of point (instruction) evaluations so far: 179571571
--- Timings ---
Current time: 1529615851727 milliseconds
Total Time:         401.7 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       140.0 seconds, 34.8%
Fitness Testing:    207.4 seconds, 51.6%
Report:              54.2 seconds, 13.5%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 126
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 127
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 127
;;******************************
;; -*- Number IO problem report - generation 127
Test total error for best: 6791.0
Test mean error for best: 3.39550
;;------------------------------
Outputs of best individual on training cases:
Correct output: 150.3639690164 | Program output: 145.3639690164
Correct output: -129.2046261   | Program output: -134.2046261  
Correct output: 43.6336388837  | Program output: 38.6336388837 
Correct output: 168.6824809869 | Program output: 163.6824809869
Correct output: -24.6347316794 | Program output: -29.6347316794
Correct output: 39.9291320135  | Program output: 34.9291320135 
Correct output: -20.9190282536 | Program output: -25.9190282536
Correct output: 61.9263871894  | Program output: 56.9263871894 
Correct output: -28.8395473609 | Program output: -33.8395473609
Correct output: -39.146556962  | Program output: -44.146556962 
Correct output: -134.9331989268 | Program output: -139.9331989268
Correct output: -126.4496738486 | Program output: -131.4496738486
Correct output: -51.218440095  | Program output: -56.218440095 
Correct output: 45.5895106217  | Program output: 40.5895106217 
Correct output: 136.6637618296 | Program output: 131.6637618296
Correct output: -104.5625509424 | Program output: -109.5625509424
Correct output: 80.9125656746  | Program output: 75.9125656746 
Correct output: -63.4657032446 | Program output: -68.4657032446
Correct output: -52.106433034  | Program output: -57.106433034 
Correct output: -99.9152304515 | Program output: -104.9152304515
Correct output: -78.2834351958 | Program output: -83.2834351958
Correct output: -64.2911152024 | Program output: -69.2911152024
Correct output: 93.5722006381  | Program output: 88.5722006381 
Correct output: 141.452540764  | Program output: 136.452540764 
Correct output: 102.2088941323 | Program output: 97.2088941323 
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_flush} {:instruction float_inc} {:instruction integer_shove} {:instruction float_mult} {:instruction float_yankdup} {:instruction float_dup_items} {:instruction in1} {:instruction integer_yank} {:instruction float_dec} {:instruction integer_dec} {:instruction in2} {:instruction float_frominteger} {:instruction float_dup_items} {:instruction float_dup_items} {:instruction in1} {:instruction float_sin} {:instruction float_dec} {:instruction integer_dec} {:instruction in2} {:instruction float_frominteger} {:instruction float_dup_items} {:instruction integer_dup_times} {:instruction integer_dup_items} {:instruction float_frominteger} {:instruction float_dec} {:instruction float_dup_items} {:instruction integer_dup_times} {:instruction tagged_539} {:instruction float_dec} {:instruction integer_flush} {:instruction float_dec} {:instruction float_dec} {:instruction integer_mult} {:instruction integer_dup_items} {:instruction float_dec} {:instruction integer_dup_items} {:instruction integer_yank} {:instruction float_dec} {:instruction float_dec} {:instruction integer_div} {:instruction float_dec} {:instruction float_dec} {:instruction print_integer} {:instruction float_add} {:instruction integer_yank} {:instruction float_dec} {:instruction integer_dup_items} {:instruction float_max} {:instruction float_dec} {:instruction print_integer} {:instruction float_add} {:instruction 79} {:instruction float_dec} {:instruction float_dec} {:instruction float_max} {:instruction tag_integer_533} {:instruction integer_stackdepth} {:instruction float_max} {:instruction integer_dup_times} {:instruction integer_dup_items} {:instruction float_frominteger} {:instruction integer_dup_items} {:instruction float_swap} {:instruction float_dec} {:instruction integer_div} {:instruction print_float} {:instruction float_rot})
Best program: (float_flush float_inc integer_shove float_mult float_yankdup float_dup_items in1 integer_yank float_dec integer_dec in2 float_frominteger float_dup_items float_dup_items in1 float_sin float_dec integer_dec in2 float_frominteger float_dup_items integer_dup_times integer_dup_items float_frominteger float_dec float_dup_items integer_dup_times tagged_539 float_dec integer_flush float_dec float_dec integer_mult integer_dup_items float_dec integer_dup_items integer_yank float_dec float_dec integer_div float_dec float_dec print_integer float_add integer_yank float_dec integer_dup_items float_max float_dec print_integer float_add 79 float_dec float_dec float_max tag_integer_533 integer_stackdepth float_max integer_dup_times integer_dup_items float_frominteger integer_dup_items float_swap float_dec integer_div print_float float_rot)
Errors: [5.0 2 5.0 2 5.0 2 5.0 1 5.0 1 5.0 1 5.0 1 5.0 2 5.0 2 5.0 2 5.0 1 5.0 2 5.0 1 5.0 1 5.0 1 5.0 1 5.0 2 5.0 1 5.0 1 5.0 3 5.0 2 5.0 1 5.0 2 5.0 2 5.0 3]
Total: 165.0
Mean: 3.3
Genome size: 67
Size: 68
Percent parens: 0.015
--- Population Statistics ---
Average total errors in population: 2398.8504787
Median total errors in population: 377.0
Error averages by case: (96.55839170000003 3.734 97.75436989999986 3.385 88.94570390000008 3.416 98.06861339999993 3.868 82.39210159999999 3.407 81.56881650000001 3.319 93.59621979999999 4.167 90.61624199999987 3.39 82.76262829999999 3.775 92.17270260000006 4.129 98.11754929999995 3.881 97.45244339999988 3.909 94.74717759999983 3.866 83.66781770000006 3.394 95.66157379999997 3.742 95.63175690000008 3.813 91.93296300000002 3.629 95.14220089999998 4.323 89.10994049999995 3.28 95.27031860000022 4.52 89.95972219999999 3.997 91.4308351 3.35 92.32582599999998 3.841 96.03227399999996 3.756 93.50628999999998 4.535)
Error minima by case: (0.636 1 5.0 1 1.6336 1 5.0 1 0.3653 1 0.0 0 2.5925 1 5.0 1 2.9754 1 5.0 1 0.9332 1 3.4497 1 5.0 1 0.537 1 0.3362 1 0.4374 1 1.9126 1 5.0 1 3.1064 1 5.0 1 4.5315 1 0.2535 1 1.2299 1 0.5475 1 5.0 1)
Average genome size in population (length): 52.203
Average program size in population (points): 53.203
Average percent parens in population: 0.019
Minimum age in population: 181.189780420364
Maximum age in population: 184.9191437867669
Average age in population: 183.2675667020039
Median age in population: 183.3264027033276
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 34
Genome diversity (% unique Plush genomes):	 0.678
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 34
Syntactic diversity (% unique Push programs):	 0.678
Total error diversity:				 0.17
Error (vector) diversity:			 0.174
Behavioral diversity:				 0.175
--- Run Statistics ---
Number of program evaluations used so far: 128000
Number of point (instruction) evaluations so far: 180876821
--- Timings ---
Current time: 1529615854757 milliseconds
Total Time:         404.7 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       141.0 seconds, 34.8%
Fitness Testing:    208.9 seconds, 51.6%
Report:              54.7 seconds, 13.5%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 127
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 128
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 128
;;******************************
;; -*- Number IO problem report - generation 128
Test total error for best: 5442.0
Test mean error for best: 2.72100
;;------------------------------
Outputs of best individual on training cases:
Correct output: 150.3639690164 | Program output: 
147.3639690164
Correct output: -129.2046261   | Program output: 
-132.2046261 
Correct output: 43.6336388837  | Program output: 
40.6336388837
Correct output: 168.6824809869 | Program output: 
165.6824809869
Correct output: -24.6347316794 | Program output: 
-27.6347316794
Correct output: 39.9291320135  | Program output: 
36.9291320135
Correct output: -20.9190282536 | Program output: 
-23.9190282536
Correct output: 61.9263871894  | Program output: 
58.9263871894
Correct output: -28.8395473609 | Program output: 
-31.8395473609
Correct output: -39.146556962  | Program output: 
-42.146556962
Correct output: -134.9331989268 | Program output: 
-137.9331989268
Correct output: -126.4496738486 | Program output: 
-129.4496738486
Correct output: -51.218440095  | Program output: 
-54.218440095
Correct output: 45.5895106217  | Program output: 
42.5895106217
Correct output: 136.6637618296 | Program output: 
133.6637618296
Correct output: -104.5625509424 | Program output: 
-107.5625509424
Correct output: 80.9125656746  | Program output: 
77.9125656746
Correct output: -63.4657032446 | Program output: 
-66.4657032446
Correct output: -52.106433034  | Program output: 
-55.106433034
Correct output: -99.9152304515 | Program output: 
-102.9152304515
Correct output: -78.2834351958 | Program output: 
-81.2834351958
Correct output: -64.2911152024 | Program output: 
-67.2911152024
Correct output: 93.5722006381  | Program output: 
90.5722006381
Correct output: 141.452540764  | Program output: 
138.452540764
Correct output: 102.2088941323 | Program output: 
99.2088941323
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_flush} {:instruction float_inc} {:instruction float_flush} {:instruction float_inc} {:instruction float_yank} {:instruction float_mult} {:instruction float_rot} {:instruction float_inc} {:instruction float_yank} {:instruction float_mult} {:instruction float_yankdup} {:instruction float_dup_items} {:instruction in1} {:instruction integer_yank} {:instruction print_integer} {:instruction integer_dec} {:instruction in2} {:instruction float_frominteger} {:instruction float_dup_items} {:instruction integer_dup_times} {:instruction integer_dup_items} {:instruction print_newline} {:instruction float_frominteger} {:instruction float_dup_items} {:instruction integer_dup_times} {:instruction tagged_539} {:instruction integer_dup_times} {:instruction tagged_539} {:instruction float_dec} {:instruction float_dup_items} {:instruction integer_dup_items} {:instruction integer_add} {:instruction float_dec} {:instruction integer_max} {:instruction float_dup_items} {:instruction integer_inc} {:instruction float_add} {:instruction float_frominteger} {:instruction float_dec} {:instruction integer_max} {:instruction print_float} {:instruction integer_sub})
Best program: (float_flush float_inc float_flush float_inc float_yank float_mult float_rot float_inc float_yank float_mult float_yankdup float_dup_items in1 integer_yank print_integer integer_dec in2 float_frominteger float_dup_items integer_dup_times integer_dup_items print_newline float_frominteger float_dup_items integer_dup_times tagged_539 integer_dup_times tagged_539 float_dec float_dup_items integer_dup_items integer_add float_dec integer_max float_dup_items integer_inc float_add float_frominteger float_dec integer_max print_float integer_sub)
Errors: [3.0 3 3.0 3 3.0 2 3.0 2 3.0 2 3.0 2 3.0 2 3.0 3 3.0 3 3.0 3 3.0 2 3.0 2 3.0 2 3.0 2 3.0 2 3.0 2 3.0 3 3.0 2 3.0 2 3.0 4 3.0 3 3.0 2 3.0 2 3.0 3 3.0 3]
Total: 136.0
Mean: 2.72
Genome size: 42
Size: 43
Percent parens: 0.023
--- Population Statistics ---
Average total errors in population: 2185.3724513999996
Median total errors in population: 277.0
Error averages by case: (88.32775500000004 3.445 87.57436519999989 3.117 80.13078690000003 3.096 89.66242109999997 3.28 77.1924064 3.14 77.04090539999994 2.766 84.44718020000005 3.431 81.5808144999999 3.106 77.86436639999998 3.449 83.44465520000006 3.707 87.91824099999997 3.518 87.34018459999989 3.543 86.0513875999999 3.212 78.99632210000006 3.077 87.48499279999993 3.321 85.75292800000003 3.443 83.9360078 3.369 85.7442655 3.793 81.04473430000003 2.892 85.7164719000001 4.209 83.08871899999998 3.583 82.62703180000004 3.133 84.37679009999998 3.374 87.97651859999998 3.37 85.46819999999995 4.21)
Error minima by case: (1.364 1 3.0 1 2.5196 1 3.0 1 0.3653 1 0.0 0 3.0 1 3.0 1 3.0 1 3.0 1 3.0 1 1.4497 1 0.4725 1 0.0 0 0.6638 1 3.0 1 3.0 1 3.0 1 3.0 1 2.2243 1 3.0 1 0.2911 1 1.5722 1 3.0 1 1.2089 1)
Average genome size in population (length): 47.993
Average program size in population (points): 48.993
Average percent parens in population: 0.021
Minimum age in population: 182.5326729453655
Maximum age in population: 186.5981432638835
Average age in population: 184.7014780123684
Median age in population: 184.7389582786519
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 40
Genome diversity (% unique Plush genomes):	 0.619
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 40
Syntactic diversity (% unique Push programs):	 0.619
Total error diversity:				 0.14
Error (vector) diversity:			 0.141
Behavioral diversity:				 0.142
--- Run Statistics ---
Number of program evaluations used so far: 129000
Number of point (instruction) evaluations so far: 182076896
--- Timings ---
Current time: 1529615857649 milliseconds
Total Time:         407.7 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       142.1 seconds, 34.8%
Fitness Testing:    210.4 seconds, 51.6%
Report:              55.2 seconds, 13.5%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 128
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 129
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 129
;;******************************
;; -*- Number IO problem report - generation 129
Test total error for best: 3311.0
Test mean error for best: 1.65550
;;------------------------------
Outputs of best individual on training cases:
Correct output: 150.3639690164 | Program output: 148.3639690164
Correct output: -129.2046261   | Program output: -131.2046261  
Correct output: 43.6336388837  | Program output: 41.6336388837 
Correct output: 168.6824809869 | Program output: 166.6824809869
Correct output: -24.6347316794 | Program output: -26.6347316794
Correct output: 39.9291320135  | Program output: 37.9291320135 
Correct output: -20.9190282536 | Program output: -22.9190282536
Correct output: 61.9263871894  | Program output: 59.9263871894 
Correct output: -28.8395473609 | Program output: -30.8395473609
Correct output: -39.146556962  | Program output: -41.146556962 
Correct output: -134.9331989268 | Program output: -136.9331989268
Correct output: -126.4496738486 | Program output: -128.4496738486
Correct output: -51.218440095  | Program output: -53.218440095 
Correct output: 45.5895106217  | Program output: 43.5895106217 
Correct output: 136.6637618296 | Program output: 134.6637618296
Correct output: -104.5625509424 | Program output: -106.5625509424
Correct output: 80.9125656746  | Program output: 78.9125656746 
Correct output: -63.4657032446 | Program output: -65.4657032446
Correct output: -52.106433034  | Program output: -54.106433034 
Correct output: -99.9152304515 | Program output: -101.9152304515
Correct output: -78.2834351958 | Program output: -80.2834351958
Correct output: -64.2911152024 | Program output: -66.2911152024
Correct output: 93.5722006381  | Program output: 91.5722006381 
Correct output: 141.452540764  | Program output: 139.452540764 
Correct output: 102.2088941323 | Program output: 100.2088941323
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_flush} {:instruction float_inc} {:instruction float_flush} {:instruction float_inc} {:instruction float_yank} {:instruction float_mult} {:instruction float_flush} {:instruction float_inc} {:instruction float_yank} {:instruction float_mult} {:instruction float_yankdup} {:instruction float_dup_items} {:instruction in1} {:instruction integer_yank} {:instruction print_integer} {:instruction integer_dec} {:instruction in2} {:instruction float_frominteger} {:instruction float_dup_items} {:instruction integer_dup_times} {:instruction integer_dup_items} {:instruction float_frominteger} {:instruction float_frominteger} {:instruction integer_div} {:instruction integer_dup_items} {:instruction float_dec} {:instruction integer_dup_items} {:instruction integer_inc} {:instruction float_add} {:instruction float_frominteger} {:instruction float_dec} {:instruction integer_div} {:instruction print_float} {:instruction float_rot})
Best program: (float_flush float_inc float_flush float_inc float_yank float_mult float_flush float_inc float_yank float_mult float_yankdup float_dup_items in1 integer_yank print_integer integer_dec in2 float_frominteger float_dup_items integer_dup_times integer_dup_items float_frominteger float_frominteger integer_div integer_dup_items float_dec integer_dup_items integer_inc float_add float_frominteger float_dec integer_div print_float float_rot)
Errors: [2.0 2 2.0 2 2.0 1 2.0 1 2.0 1 2.0 1 2.0 1 2.0 2 2.0 2 2.0 2 2.0 1 2.0 1 2.0 1 2.0 1 2.0 1 2.0 1 2.0 2 2.0 1 2.0 1 2.0 3 2.0 2 2.0 1 2.0 1 2.0 2 2.0 1]
Total: 85.0
Mean: 1.7
Genome size: 34
Size: 35
Percent parens: 0.029
--- Population Statistics ---
Average total errors in population: 2505.9481989
Median total errors in population: 222.0
Error averages by case: (98.56694990000005 3.901 102.12623449999992 3.415 92.21700550000003 3.515 99.62131979999995 3.319 90.7885965 3.325 87.78130729999992 2.823 98.94045690000007 3.286 93.7249932999999 3.467 91.47442439999998 3.65 97.63575220000008 3.932 102.28260749999997 3.729 101.77564209999994 3.866 101.39038529999989 3.195 89.87842790000005 3.442 98.51185409999992 3.581 100.34444350000005 3.679 94.28750339999998 3.806 99.39847059999997 3.837 95.04060990000005 2.768 100.66113250000008 4.526 95.5770356 3.828 96.44756370000005 3.337 93.82617769999997 3.827 98.1846057 3.785 94.94069909999996 4.685)
Error minima by case: (0.364 1 2.0 1 2.0 1 2.0 1 0.3653 1 0.0 0 2.0 1 2.0 1 2.0 1 2.0 1 2.0 1 2.0 1 2.0 1 1.0 1 0.3038 1 2.0 1 1.9126 1 0.0365 1 2.0 1 2.0 1 2.0 1 0.7889 1 1.5722 1 2.0 1 1.2089 1)
Average genome size in population (length): 44.434
Average program size in population (points): 45.434
Average percent parens in population: 0.023
Minimum age in population: 183.7380297560023
Maximum age in population: 188.1073687127963
Average age in population: 186.325398716709
Median age in population: 186.375143803386
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 76
Genome diversity (% unique Plush genomes):	 0.592
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 76
Syntactic diversity (% unique Push programs):	 0.592
Total error diversity:				 0.139
Error (vector) diversity:			 0.139
Behavioral diversity:				 0.139
--- Run Statistics ---
Number of program evaluations used so far: 130000
Number of point (instruction) evaluations so far: 183188746
--- Timings ---
Current time: 1529615860466 milliseconds
Total Time:         410.6 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       143.1 seconds, 34.9%
Fitness Testing:    211.8 seconds, 51.6%
Report:              55.5 seconds, 13.5%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 129
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 130
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 130
;;******************************
;; -*- Number IO problem report - generation 130
Test total error for best: 3311.0
Test mean error for best: 1.65550
;;------------------------------
Outputs of best individual on training cases:
Correct output: 150.3639690164 | Program output: 148.3639690164
Correct output: -129.2046261   | Program output: -131.2046261  
Correct output: 43.6336388837  | Program output: 41.6336388837 
Correct output: 168.6824809869 | Program output: 166.6824809869
Correct output: -24.6347316794 | Program output: -26.6347316794
Correct output: 39.9291320135  | Program output: 37.9291320135 
Correct output: -20.9190282536 | Program output: -22.9190282536
Correct output: 61.9263871894  | Program output: 59.9263871894 
Correct output: -28.8395473609 | Program output: -30.8395473609
Correct output: -39.146556962  | Program output: -41.146556962 
Correct output: -134.9331989268 | Program output: -136.9331989268
Correct output: -126.4496738486 | Program output: -128.4496738486
Correct output: -51.218440095  | Program output: -53.218440095 
Correct output: 45.5895106217  | Program output: 43.5895106217 
Correct output: 136.6637618296 | Program output: 134.6637618296
Correct output: -104.5625509424 | Program output: -106.5625509424
Correct output: 80.9125656746  | Program output: 78.9125656746 
Correct output: -63.4657032446 | Program output: -65.4657032446
Correct output: -52.106433034  | Program output: -54.106433034 
Correct output: -99.9152304515 | Program output: -101.9152304515
Correct output: -78.2834351958 | Program output: -80.2834351958
Correct output: -64.2911152024 | Program output: -66.2911152024
Correct output: 93.5722006381  | Program output: 91.5722006381 
Correct output: 141.452540764  | Program output: 139.452540764 
Correct output: 102.2088941323 | Program output: 100.2088941323
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_flush} {:instruction float_inc} {:instruction float_yank} {:instruction float_mult} {:instruction float_flush} {:instruction float_inc} {:instruction float_yank} {:instruction float_flush} {:instruction float_yankdup} {:instruction integer_shove} {:instruction in1} {:instruction integer_yank} {:instruction float_dec} {:instruction integer_dec} {:instruction float_yankdup} {:instruction float_dup_items} {:instruction in1} {:instruction integer_yank} {:instruction print_integer} {:instruction integer_dec} {:instruction in2} {:instruction float_frominteger} {:instruction float_dup_items} {:instruction integer_dup_times} {:instruction integer_dup_items} {:instruction float_frominteger} {:instruction float_frominteger} {:instruction integer_div} {:instruction integer_dup_items} {:instruction float_dec} {:instruction integer_dup_items} {:instruction integer_inc} {:instruction float_add} {:instruction float_frominteger} {:instruction float_dec} {:instruction integer_div} {:instruction print_float} {:instruction float_rot})
Best program: (float_flush float_inc float_yank float_mult float_flush float_inc float_yank float_flush float_yankdup integer_shove in1 integer_yank float_dec integer_dec float_yankdup float_dup_items in1 integer_yank print_integer integer_dec in2 float_frominteger float_dup_items integer_dup_times integer_dup_items float_frominteger float_frominteger integer_div integer_dup_items float_dec integer_dup_items integer_inc float_add float_frominteger float_dec integer_div print_float float_rot)
Errors: [2.0 2 2.0 2 2.0 1 2.0 1 2.0 1 2.0 1 2.0 1 2.0 2 2.0 2 2.0 2 2.0 1 2.0 1 2.0 1 2.0 1 2.0 1 2.0 1 2.0 2 2.0 1 2.0 1 2.0 3 2.0 2 2.0 1 2.0 1 2.0 2 2.0 1]
Total: 85.0
Mean: 1.7
Genome size: 38
Size: 39
Percent parens: 0.026
--- Population Statistics ---
Average total errors in population: 2255.5695159000006
Median total errors in population: 195.0
Error averages by case: (87.34669180000004 3.867 90.10421489999995 3.495 84.4333657 3.521 88.57110070000002 3.197 82.6921261 3.064 81.82874279999999 2.744 89.1923693 3.395 86.1833770999999 3.482 83.48310599999999 3.764 87.50285160000003 4.07 90.40816089999997 3.413 89.94600469999997 3.859 89.42149249999987 3.069 82.36381100000006 3.045 86.86399099999997 3.245 88.26342809999993 3.378 83.43078750000002 3.789 89.61480089999999 3.584 83.96863799999996 2.682 88.39574140000002 4.651 88.69998290000001 3.98 85.36325590000004 3.092 85.49771300000003 3.829 87.0898531 3.811 86.18890899999998 4.689)
Error minima by case: (0.364 1 2.0 1 2.0 1 2.0 1 0.3653 1 0.0 0 2.0 1 2.0 1 2.0 1 2.0 1 2.0 1 2.0 1 2.0 1 1.0 1 0.3362 1 2.0 1 0.0874 1 2.0 1 0.0916 1 2.0 1 2.0 1 0.2911 1 1.5722 1 0.7196 1 1.2089 1)
Average genome size in population (length): 46.363
Average program size in population (points): 47.363
Average percent parens in population: 0.022
Minimum age in population: 185.404624833842
Maximum age in population: 189.7497302098019
Average age in population: 187.7682678624782
Median age in population: 187.8150240642271
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 74
Genome diversity (% unique Plush genomes):	 0.584
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 74
Syntactic diversity (% unique Push programs):	 0.584
Total error diversity:				 0.126
Error (vector) diversity:			 0.128
Behavioral diversity:				 0.129
--- Run Statistics ---
Number of program evaluations used so far: 131000
Number of point (instruction) evaluations so far: 184351321
--- Timings ---
Current time: 1529615863369 milliseconds
Total Time:         413.5 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       144.2 seconds, 34.9%
Fitness Testing:    213.2 seconds, 51.6%
Report:              55.9 seconds, 13.5%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 130
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 131
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 131
;;******************************
;; -*- Number IO problem report - generation 131
Test total error for best: 2152.0
Test mean error for best: 1.07600
;;------------------------------
Outputs of best individual on training cases:
Correct output: 150.3639690164 | Program output: 149.3639690164
Correct output: -129.2046261   | Program output: -130.2046261  
Correct output: 43.6336388837  | Program output: 42.6336388837 
Correct output: 168.6824809869 | Program output: 167.6824809869
Correct output: -24.6347316794 | Program output: -25.6347316794
Correct output: 39.9291320135  | Program output: 38.9291320135 
Correct output: -20.9190282536 | Program output: -21.9190282536
Correct output: 61.9263871894  | Program output: 60.9263871894 
Correct output: -28.8395473609 | Program output: -29.8395473609
Correct output: -39.146556962  | Program output: -40.146556962 
Correct output: -134.9331989268 | Program output: -135.9331989268
Correct output: -126.4496738486 | Program output: -127.4496738486
Correct output: -51.218440095  | Program output: -52.218440095 
Correct output: 45.5895106217  | Program output: 44.5895106217 
Correct output: 136.6637618296 | Program output: 135.6637618296
Correct output: -104.5625509424 | Program output: -105.5625509424
Correct output: 80.9125656746  | Program output: 79.9125656746 
Correct output: -63.4657032446 | Program output: -64.4657032446
Correct output: -52.106433034  | Program output: -53.106433034 
Correct output: -99.9152304515 | Program output: -100.9152304515
Correct output: -78.2834351958 | Program output: -79.2834351958
Correct output: -64.2911152024 | Program output: -65.2911152024
Correct output: 93.5722006381  | Program output: 92.5722006381 
Correct output: 141.452540764  | Program output: 140.452540764 
Correct output: 102.2088941323 | Program output: 101.2088941323
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_flush} {:instruction float_inc} {:instruction float_yank} {:instruction float_mult} {:instruction float_flush} {:instruction float_inc} {:instruction float_mult} {:instruction float_yankdup} {:instruction float_dup_items} {:instruction in1} {:instruction integer_yank} {:instruction tag_float_258} {:instruction float_dec} {:instruction integer_dec} {:instruction in2} {:instruction float_frominteger} {:instruction float_dup_items} {:instruction integer_dup_times} {:instruction integer_dup_items} {:instruction float_frominteger} {:instruction float_frominteger} {:instruction tagged_539} {:instruction integer_dup_items} {:instruction integer_inc} {:instruction float_add} {:instruction float_frominteger} {:instruction float_dec} {:instruction integer_div} {:instruction print_float} {:instruction float_rot})
Best program: (float_flush float_inc float_yank float_mult float_flush float_inc float_mult float_yankdup float_dup_items in1 integer_yank tag_float_258 float_dec integer_dec in2 float_frominteger float_dup_items integer_dup_times integer_dup_items float_frominteger float_frominteger tagged_539 integer_dup_items integer_inc float_add float_frominteger float_dec integer_div print_float float_rot)
Errors: [1.0 2 1.0 2 1.0 1 1.0 1 1.0 1 1.0 1 1.0 1 1.0 1 1.0 1 1.0 2 1.0 1 1.0 1 1.0 1 1.0 1 1.0 1 1.0 1 1.0 2 1.0 1 1.0 1 1.0 3 1.0 1 1.0 1 1.0 1 1.0 1 1.0 1]
Total: 56.0
Mean: 1.12
Genome size: 30
Size: 31
Percent parens: 0.032
--- Population Statistics ---
Average total errors in population: 1760.6705195000009
Median total errors in population: 165.0
Error averages by case: (70.31351770000003 3.667 70.90811419999993 3.438 65.6660811 3.255 71.70312410000003 2.916 60.76229419999995 2.64 60.696288900000006 2.554 69.05005379999997 3.286 67.45744609999993 3.363 60.964521199999986 3.65 67.47746769999999 4.009 71.1539377 3.061 70.49015169999997 3.576 68.89489869999993 2.809 63.11057280000005 2.601 69.82993939999999 2.874 68.74201419999994 3.008 65.6285992000001 3.594 69.51799379999997 3.369 63.591147199999966 2.554 68.78683380000001 4.499 66.1750009 3.917 64.86693120000001 2.687 65.90672620000002 3.382 69.6111657 3.575 66.76269799999994 4.319)
Error minima by case: (0.636 1 1.0 1 1.0 1 1.0 1 0.3653 1 0.0 0 1.0 1 1.0 1 1.0 1 1.0 1 1.0 1 1.0 1 1.0 1 1.0 1 1.0 1 1.0 1 1.0 1 1.0 1 1.0 1 1.0 1 1.0 1 0.7089 1 0.5722 1 1.0 1 0.2089 1)
Average genome size in population (length): 44.007
Average program size in population (points): 45.007
Average percent parens in population: 0.024
Minimum age in population: 186.6011835382104
Maximum age in population: 191.3454879438677
Average age in population: 189.2958672782203
Median age in population: 189.31490306389
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 47
Genome diversity (% unique Plush genomes):	 0.603
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 47
Syntactic diversity (% unique Push programs):	 0.603
Total error diversity:				 0.124
Error (vector) diversity:			 0.125
Behavioral diversity:				 0.126
--- Run Statistics ---
Number of program evaluations used so far: 132000
Number of point (instruction) evaluations so far: 185457071
--- Timings ---
Current time: 1529615866223 milliseconds
Total Time:         416.3 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       145.3 seconds, 34.9%
Fitness Testing:    214.7 seconds, 51.6%
Report:              56.2 seconds, 13.5%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 131
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 132
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 132
;;******************************
;; -*- Number IO problem report - generation 132
Test total error for best: 2152.0
Test mean error for best: 1.07600
;;------------------------------
Outputs of best individual on training cases:
Correct output: 150.3639690164 | Program output: 149.3639690164
Correct output: -129.2046261   | Program output: -130.2046261  
Correct output: 43.6336388837  | Program output: 42.6336388837 
Correct output: 168.6824809869 | Program output: 167.6824809869
Correct output: -24.6347316794 | Program output: -25.6347316794
Correct output: 39.9291320135  | Program output: 38.9291320135 
Correct output: -20.9190282536 | Program output: -21.9190282536
Correct output: 61.9263871894  | Program output: 60.9263871894 
Correct output: -28.8395473609 | Program output: -29.8395473609
Correct output: -39.146556962  | Program output: -40.146556962 
Correct output: -134.9331989268 | Program output: -135.9331989268
Correct output: -126.4496738486 | Program output: -127.4496738486
Correct output: -51.218440095  | Program output: -52.218440095 
Correct output: 45.5895106217  | Program output: 44.5895106217 
Correct output: 136.6637618296 | Program output: 135.6637618296
Correct output: -104.5625509424 | Program output: -105.5625509424
Correct output: 80.9125656746  | Program output: 79.9125656746 
Correct output: -63.4657032446 | Program output: -64.4657032446
Correct output: -52.106433034  | Program output: -53.106433034 
Correct output: -99.9152304515 | Program output: -100.9152304515
Correct output: -78.2834351958 | Program output: -79.2834351958
Correct output: -64.2911152024 | Program output: -65.2911152024
Correct output: 93.5722006381  | Program output: 92.5722006381 
Correct output: 141.452540764  | Program output: 140.452540764 
Correct output: 102.2088941323 | Program output: 101.2088941323
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_flush} {:instruction float_inc} {:instruction float_yank} {:instruction float_mult} {:instruction float_flush} {:instruction float_inc} {:instruction float_yank} {:instruction float_flush} {:instruction float_yankdup} {:instruction integer_shove} {:instruction in1} {:instruction integer_yank} {:instruction integer_yank} {:instruction integer_dec} {:instruction float_yankdup} {:instruction float_dup_items} {:instruction in1} {:instruction integer_yank} {:instruction print_integer} {:instruction integer_dec} {:instruction in2} {:instruction float_frominteger} {:instruction float_dup_items} {:instruction integer_dup_times} {:instruction integer_dup_items} {:instruction float_frominteger} {:instruction float_frominteger} {:instruction integer_div} {:instruction integer_inc} {:instruction float_add} {:instruction float_frominteger} {:instruction float_dec} {:instruction integer_max} {:instruction print_float} {:instruction integer_sub})
Best program: (float_flush float_inc float_yank float_mult float_flush float_inc float_yank float_flush float_yankdup integer_shove in1 integer_yank integer_yank integer_dec float_yankdup float_dup_items in1 integer_yank print_integer integer_dec in2 float_frominteger float_dup_items integer_dup_times integer_dup_items float_frominteger float_frominteger integer_div integer_inc float_add float_frominteger float_dec integer_max print_float integer_sub)
Errors: [1.0 2 1.0 2 1.0 1 1.0 1 1.0 1 1.0 1 1.0 1 1.0 1 1.0 1 1.0 2 1.0 1 1.0 1 1.0 1 1.0 1 1.0 1 1.0 1 1.0 2 1.0 1 1.0 1 1.0 3 1.0 1 1.0 1 1.0 1 1.0 1 1.0 1]
Total: 56.0
Mean: 1.12
Genome size: 35
Size: 36
Percent parens: 0.028
--- Population Statistics ---
Average total errors in population: 1716.3285278000003
Median total errors in population: 112.0
Error averages by case: (67.09692530000002 3.604 67.04071309999992 3.343 65.78213570000004 2.888 68.20062609999998 2.757 61.068065899999944 2.681 61.66509590000004 2.646 67.37615099999995 2.958 67.3470908999999 3.492 61.590588299999965 3.705 65.8411584 3.704 66.99793289999998 2.883 66.76516969999993 3.048 67.00674309999992 2.661 63.51281050000004 2.645 66.79288430000003 2.813 65.75071899999992 2.834 64.17764550000005 3.561 67.20210859999997 2.957 62.58364689999997 2.588 66.01827230000008 4.415 65.08474239999998 3.813 63.50916480000002 2.687 65.7804419 2.863 66.9958732 3.532 66.28482209999996 3.779)
Error minima by case: (1.0 2 1.0 2 1.0 1 1.0 1 0.3653 1 1.0 1 1.0 1 1.0 1 0.8395 1 1.0 2 0.1767 1 1.0 1 1.0 1 1.0 1 1.0 1 1.0 1 0.0874 2 1.0 1 1.0 1 1.0 1 0.7166 1 0.7089 1 0.4278 1 1.0 1 0.7911 1)
Average genome size in population (length): 36.985
Average program size in population (points): 37.985
Average percent parens in population: 0.027
Minimum age in population: 187.8297452240073
Maximum age in population: 192.6214009958643
Average age in population: 190.9221255958867
Median age in population: 190.9732099213383
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 75
Genome diversity (% unique Plush genomes):	 0.531
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 75
Syntactic diversity (% unique Push programs):	 0.531
Total error diversity:				 0.068
Error (vector) diversity:			 0.071
Behavioral diversity:				 0.072
--- Run Statistics ---
Number of program evaluations used so far: 133000
Number of point (instruction) evaluations so far: 186387446
--- Timings ---
Current time: 1529615869010 milliseconds
Total Time:         419.2 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       146.4 seconds, 34.9%
Fitness Testing:    216.0 seconds, 51.5%
Report:              56.6 seconds, 13.5%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 132
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 133
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 133
;;******************************
;; -*- Number IO problem report - generation 133
Test total error for best: 0.0
Test mean error for best: 0.00000
Test Case    0 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case    1 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case    2 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case    3 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case    4 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case    5 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case    6 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case    7 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case    8 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case    9 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   10 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   11 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   12 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   13 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   14 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   15 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   16 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   17 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   18 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   19 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   20 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   21 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   22 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   23 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   24 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   25 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   26 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   27 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   28 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   29 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   30 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   31 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   32 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   33 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   34 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   35 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   36 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   37 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   38 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   39 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   40 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   41 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   42 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   43 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   44 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   45 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   46 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   47 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   48 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   49 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   50 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   51 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   52 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   53 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   54 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   55 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   56 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   57 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   58 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   59 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   60 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   61 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   62 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   63 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   64 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   65 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   66 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   67 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   68 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   69 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   70 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   71 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   72 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   73 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   74 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   75 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   76 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   77 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   78 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   79 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   80 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   81 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   82 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   83 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   84 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   85 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   86 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   87 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   88 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   89 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   90 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   91 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   92 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   93 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   94 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   95 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   96 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   97 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   98 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   99 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  100 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  101 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  102 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  103 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  104 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  105 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  106 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  107 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  108 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  109 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  110 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  111 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  112 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  113 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  114 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  115 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  116 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  117 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  118 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  119 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  120 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  121 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  122 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  123 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  124 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  125 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  126 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  127 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  128 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  129 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  130 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  131 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  132 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  133 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  134 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  135 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  136 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  137 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  138 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  139 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  140 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  141 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  142 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  143 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  144 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  145 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  146 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  147 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  148 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  149 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  150 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  151 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  152 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  153 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  154 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  155 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  156 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  157 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  158 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  159 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  160 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  161 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  162 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  163 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  164 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  165 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  166 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  167 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  168 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  169 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  170 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  171 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  172 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  173 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  174 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  175 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  176 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  177 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  178 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  179 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  180 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  181 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  182 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  183 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  184 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  185 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  186 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  187 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  188 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  189 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  190 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  191 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  192 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  193 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  194 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  195 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  196 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  197 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  198 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  199 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  200 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  201 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  202 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  203 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  204 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  205 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  206 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  207 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  208 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  209 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  210 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  211 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  212 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  213 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  214 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  215 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  216 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  217 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  218 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  219 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  220 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  221 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  222 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  223 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  224 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  225 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  226 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  227 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  228 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  229 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  230 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  231 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  232 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  233 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  234 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  235 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  236 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  237 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  238 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  239 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  240 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  241 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  242 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  243 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  244 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  245 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  246 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  247 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  248 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  249 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  250 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  251 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  252 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  253 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  254 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  255 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  256 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  257 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  258 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  259 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  260 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  261 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  262 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  263 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  264 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  265 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  266 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  267 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  268 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  269 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  270 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  271 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  272 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  273 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  274 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  275 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  276 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  277 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  278 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  279 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  280 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  281 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  282 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  283 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  284 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  285 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  286 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  287 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  288 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  289 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  290 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  291 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  292 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  293 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  294 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  295 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  296 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  297 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  298 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  299 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  300 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  301 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  302 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  303 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  304 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  305 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  306 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  307 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  308 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  309 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  310 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  311 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  312 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  313 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  314 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  315 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  316 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  317 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  318 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  319 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  320 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  321 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  322 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  323 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  324 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  325 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  326 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  327 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  328 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  329 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  330 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  331 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  332 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  333 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  334 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  335 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  336 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  337 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  338 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  339 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  340 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  341 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  342 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  343 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  344 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  345 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  346 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  347 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  348 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  349 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  350 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  351 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  352 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  353 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  354 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  355 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  356 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  357 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  358 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  359 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  360 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  361 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  362 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  363 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  364 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  365 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  366 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  367 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  368 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  369 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  370 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  371 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  372 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  373 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  374 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  375 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  376 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  377 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  378 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  379 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  380 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  381 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  382 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  383 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  384 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  385 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  386 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  387 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  388 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  389 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  390 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  391 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  392 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  393 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  394 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  395 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  396 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  397 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  398 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  399 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  400 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  401 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  402 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  403 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  404 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  405 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  406 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  407 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  408 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  409 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  410 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  411 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  412 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  413 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  414 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  415 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  416 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  417 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  418 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  419 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  420 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  421 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  422 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  423 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  424 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  425 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  426 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  427 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  428 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  429 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  430 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  431 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  432 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  433 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  434 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  435 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  436 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  437 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  438 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  439 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  440 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  441 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  442 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  443 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  444 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  445 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  446 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  447 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  448 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  449 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  450 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  451 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  452 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  453 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  454 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  455 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  456 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  457 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  458 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  459 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  460 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  461 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  462 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  463 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  464 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  465 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  466 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  467 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  468 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  469 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  470 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  471 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  472 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  473 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  474 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  475 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  476 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  477 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  478 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  479 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  480 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  481 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  482 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  483 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  484 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  485 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  486 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  487 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  488 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  489 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  490 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  491 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  492 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  493 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  494 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  495 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  496 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  497 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  498 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  499 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  500 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  501 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  502 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  503 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  504 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  505 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  506 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  507 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  508 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  509 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  510 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  511 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  512 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  513 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  514 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  515 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  516 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  517 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  518 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  519 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  520 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  521 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  522 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  523 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  524 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  525 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  526 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  527 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  528 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  529 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  530 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  531 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  532 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  533 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  534 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  535 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  536 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  537 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  538 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  539 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  540 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  541 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  542 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  543 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  544 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  545 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  546 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  547 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  548 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  549 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  550 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  551 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  552 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  553 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  554 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  555 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  556 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  557 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  558 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  559 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  560 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  561 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  562 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  563 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  564 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  565 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  566 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  567 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  568 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  569 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  570 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  571 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  572 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  573 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  574 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  575 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  576 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  577 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  578 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  579 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  580 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  581 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  582 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  583 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  584 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  585 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  586 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  587 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  588 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  589 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  590 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  591 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  592 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  593 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  594 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  595 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  596 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  597 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  598 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  599 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  600 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  601 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  602 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  603 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  604 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  605 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  606 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  607 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  608 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  609 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  610 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  611 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  612 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  613 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  614 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  615 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  616 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  617 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  618 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  619 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  620 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  621 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  622 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  623 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  624 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  625 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  626 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  627 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  628 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  629 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  630 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  631 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  632 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  633 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  634 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  635 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  636 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  637 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  638 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  639 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  640 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  641 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  642 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  643 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  644 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  645 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  646 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  647 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  648 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  649 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  650 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  651 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  652 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  653 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  654 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  655 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  656 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  657 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  658 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  659 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  660 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  661 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  662 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  663 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  664 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  665 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  666 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  667 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  668 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  669 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  670 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  671 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  672 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  673 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  674 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  675 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  676 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  677 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  678 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  679 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  680 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  681 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  682 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  683 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  684 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  685 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  686 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  687 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  688 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  689 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  690 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  691 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  692 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  693 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  694 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  695 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  696 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  697 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  698 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  699 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  700 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  701 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  702 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  703 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  704 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  705 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  706 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  707 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  708 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  709 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  710 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  711 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  712 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  713 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  714 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  715 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  716 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  717 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  718 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  719 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  720 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  721 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  722 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  723 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  724 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  725 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  726 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  727 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  728 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  729 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  730 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  731 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  732 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  733 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  734 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  735 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  736 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  737 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  738 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  739 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  740 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  741 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  742 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  743 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  744 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  745 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  746 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  747 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  748 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  749 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  750 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  751 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  752 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  753 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  754 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  755 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  756 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  757 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  758 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  759 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  760 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  761 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  762 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  763 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  764 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  765 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  766 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  767 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  768 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  769 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  770 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  771 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  772 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  773 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  774 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  775 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  776 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  777 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  778 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  779 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  780 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  781 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  782 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  783 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  784 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  785 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  786 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  787 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  788 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  789 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  790 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  791 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  792 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  793 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  794 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  795 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  796 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  797 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  798 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  799 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  800 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  801 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  802 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  803 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  804 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  805 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  806 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  807 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  808 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  809 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  810 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  811 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  812 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  813 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  814 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  815 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  816 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  817 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  818 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  819 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  820 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  821 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  822 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  823 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  824 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  825 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  826 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  827 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  828 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  829 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  830 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  831 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  832 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  833 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  834 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  835 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  836 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  837 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  838 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  839 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  840 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  841 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  842 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  843 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  844 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  845 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  846 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  847 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  848 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  849 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  850 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  851 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  852 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  853 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  854 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  855 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  856 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  857 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  858 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  859 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  860 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  861 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  862 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  863 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  864 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  865 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  866 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  867 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  868 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  869 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  870 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  871 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  872 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  873 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  874 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  875 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  876 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  877 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  878 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  879 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  880 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  881 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  882 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  883 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  884 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  885 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  886 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  887 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  888 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  889 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  890 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  891 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  892 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  893 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  894 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  895 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  896 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  897 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  898 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  899 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  900 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  901 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  902 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  903 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  904 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  905 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  906 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  907 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  908 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  909 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  910 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  911 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  912 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  913 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  914 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  915 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  916 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  917 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  918 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  919 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  920 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  921 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  922 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  923 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  924 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  925 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  926 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  927 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  928 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  929 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  930 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  931 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  932 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  933 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  934 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  935 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  936 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  937 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  938 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  939 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  940 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  941 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  942 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  943 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  944 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  945 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  946 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  947 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  948 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  949 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  950 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  951 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  952 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  953 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  954 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  955 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  956 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  957 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  958 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  959 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  960 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  961 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  962 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  963 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  964 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  965 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  966 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  967 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  968 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  969 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  970 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  971 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  972 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  973 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  974 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  975 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  976 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  977 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  978 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  979 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  980 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  981 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  982 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  983 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  984 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  985 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  986 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  987 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  988 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  989 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  990 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  991 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  992 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  993 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  994 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  995 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  996 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  997 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  998 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  999 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
;;------------------------------
Outputs of best individual on training cases:
Correct output: 150.3639690164 | Program output: 150.3639690164
Correct output: -129.2046261   | Program output: -129.2046261  
Correct output: 43.6336388837  | Program output: 43.6336388837 
Correct output: 168.6824809869 | Program output: 168.6824809869
Correct output: -24.6347316794 | Program output: -24.6347316794
Correct output: 39.9291320135  | Program output: 39.9291320135 
Correct output: -20.9190282536 | Program output: -20.9190282536
Correct output: 61.9263871894  | Program output: 61.9263871894 
Correct output: -28.8395473609 | Program output: -28.8395473609
Correct output: -39.146556962  | Program output: -39.146556962 
Correct output: -134.9331989268 | Program output: -134.9331989268
Correct output: -126.4496738486 | Program output: -126.4496738486
Correct output: -51.218440095  | Program output: -51.218440095 
Correct output: 45.5895106217  | Program output: 45.5895106217 
Correct output: 136.6637618296 | Program output: 136.6637618296
Correct output: -104.5625509424 | Program output: -104.5625509424
Correct output: 80.9125656746  | Program output: 80.9125656746 
Correct output: -63.4657032446 | Program output: -63.4657032446
Correct output: -52.106433034  | Program output: -52.106433034 
Correct output: -99.9152304515 | Program output: -99.9152304515
Correct output: -78.2834351958 | Program output: -78.2834351958
Correct output: -64.2911152024 | Program output: -64.2911152024
Correct output: 93.5722006381  | Program output: 93.5722006381 
Correct output: 141.452540764  | Program output: 141.452540764 
Correct output: 102.2088941323 | Program output: 102.2088941323
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_flush} {:instruction float_inc} {:instruction float_yank} {:instruction float_mult} {:instruction float_flush} {:instruction float_inc} {:instruction float_yank} {:instruction float_flush} {:instruction float_yankdup} {:instruction integer_shove} {:instruction in1} {:instruction integer_yank} {:instruction float_dec} {:instruction integer_dec} {:instruction float_yankdup} {:instruction float_dup_items} {:instruction in1} {:instruction integer_yank} {:instruction print_integer} {:instruction integer_dec} {:instruction in2} {:instruction float_frominteger} {:instruction float_dup_items} {:instruction integer_dup_times} {:instruction integer_dup_items} {:instruction float_frominteger} {:instruction float_frominteger} {:instruction integer_div} {:instruction integer_dup_items} {:instruction integer_max} {:instruction float_dup_items} {:instruction integer_inc} {:instruction float_add} {:instruction float_frominteger} {:instruction print_integer} {:instruction integer_max} {:instruction print_float} {:instruction integer_sub})
Best program: (float_flush float_inc float_yank float_mult float_flush float_inc float_yank float_flush float_yankdup integer_shove in1 integer_yank float_dec integer_dec float_yankdup float_dup_items in1 integer_yank print_integer integer_dec in2 float_frominteger float_dup_items integer_dup_times integer_dup_items float_frominteger float_frominteger integer_div integer_dup_items integer_max float_dup_items integer_inc float_add float_frominteger print_integer integer_max print_float integer_sub)
Errors: [0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0]
Total: 0.0
Mean: 0.0
Genome size: 38
Size: 39
Percent parens: 0.026
--- Population Statistics ---
Average total errors in population: 1340.8788524000001
Median total errors in population: 85.0
Error averages by case: (51.511164600000015 3.269 53.00743429999995 3.07 51.747356000000025 2.399 52.347686300000014 2.404 47.015403899999995 2.332 48.32504630000003 2.339 52.875107599999964 2.633 52.907150099999946 3.148 47.4144329 3.365 51.7481929 3.44 53.051165599999976 2.505 52.80442419999995 2.51 50.50884819999999 2.318 49.580335100000006 2.33 51.21083110000001 2.449 51.96670309999996 2.454 48.921913100000026 3.225 52.79404979999998 2.649 49.077704899999965 2.276 52.047891900000046 4.119 50.11995099999999 3.456 49.87738800000002 2.333 49.601651500000024 2.339 51.30491579999999 3.127 50.11810419999999 2.505)
Error minima by case: (0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0)
Average genome size in population (length): 35.65
Average program size in population (points): 36.65
Average percent parens in population: 0.028
Minimum age in population: 188.8297452240073
Maximum age in population: 194.2630942498707
Average age in population: 192.3985958440969
Median age in population: 192.4586251970234
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 71
Genome diversity (% unique Plush genomes):	 0.508
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 71
Syntactic diversity (% unique Push programs):	 0.508
Total error diversity:				 0.056
Error (vector) diversity:			 0.057
Behavioral diversity:				 0.058
--- Run Statistics ---
Number of program evaluations used so far: 134000
Number of point (instruction) evaluations so far: 187281721
--- Timings ---
Current time: 1529615871734 milliseconds
Total Time:         421.9 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       147.4 seconds, 34.9%
Fitness Testing:    217.4 seconds, 51.5%
Report:              56.9 seconds, 13.5%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 133
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;


SUCCESS at generation 133
Successful program: (float_flush float_inc float_yank float_mult float_flush float_inc float_yank float_flush float_yankdup integer_shove in1 integer_yank float_dec integer_dec float_yankdup float_dup_items in1 integer_yank print_integer integer_dec in2 float_frominteger float_dup_items integer_dup_times integer_dup_items float_frominteger float_frominteger integer_div integer_dup_items integer_max float_dup_items integer_inc float_add float_frominteger print_integer integer_max print_float integer_sub)
Errors: [0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0]
Total error: 0.0
History: null
Size: 39


Auto-simplifying with starting size: 39
step: 0
program: (float_flush float_inc float_yank float_mult float_flush float_inc float_yank float_flush float_yankdup integer_shove in1 integer_yank float_dec integer_dec float_yankdup float_dup_items in1 integer_yank print_integer integer_dec in2 float_frominteger float_dup_items integer_dup_times integer_dup_items float_frominteger float_frominteger integer_div integer_dup_items integer_max float_dup_items integer_inc float_add float_frominteger print_integer integer_max print_float integer_sub)
errors: [0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0]
total: 0.0
size: 39

step: 500
program: (in1 in2 float_frominteger float_add print_float)
errors: (0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0)
total: 0.0
size: 6

step: 1000
program: (in1 in2 float_frominteger float_add print_float)
errors: (0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0)
total: 0.0
size: 6

step: 1500
program: (in1 in2 float_frominteger float_add print_float)
errors: (0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0)
total: 0.0
size: 6

step: 2000
program: (in1 in2 float_frominteger float_add print_float)
errors: (0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0)
total: 0.0
size: 6

step: 2500
program: (in1 in2 float_frominteger float_add print_float)
errors: (0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0)
total: 0.0
size: 6

step: 3000
program: (in1 in2 float_frominteger float_add print_float)
errors: (0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0)
total: 0.0
size: 6

step: 3500
program: (in1 in2 float_frominteger float_add print_float)
errors: (0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0)
total: 0.0
size: 6

step: 4000
program: (in1 in2 float_frominteger float_add print_float)
errors: (0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0)
total: 0.0
size: 6

step: 4500
program: (in1 in2 float_frominteger float_add print_float)
errors: (0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0)
total: 0.0
size: 6

step: 5000
program: (in1 in2 float_frominteger float_add print_float)
errors: (0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0)
total: 0.0
size: 6

;;******************************
;; Problem-Specific Report of Simplified Solution
;;******************************
;; -*- Number IO problem report - generation 133
Test total error for best: 0.0
Test mean error for best: 0.00000
Test Case    0 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case    1 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case    2 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case    3 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case    4 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case    5 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case    6 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case    7 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case    8 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case    9 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   10 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   11 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   12 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   13 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   14 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   15 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   16 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   17 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   18 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   19 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   20 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   21 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   22 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   23 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   24 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   25 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   26 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   27 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   28 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   29 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   30 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   31 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   32 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   33 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   34 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   35 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   36 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   37 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   38 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   39 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   40 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   41 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   42 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   43 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   44 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   45 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   46 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   47 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   48 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   49 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   50 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   51 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   52 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   53 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   54 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   55 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   56 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   57 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   58 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   59 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   60 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   61 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   62 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   63 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   64 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   65 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   66 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   67 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   68 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   69 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   70 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   71 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   72 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   73 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   74 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   75 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   76 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   77 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   78 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   79 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   80 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   81 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   82 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   83 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   84 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   85 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   86 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   87 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   88 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   89 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   90 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   91 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   92 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   93 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   94 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   95 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   96 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   97 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   98 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   99 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  100 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  101 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  102 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  103 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  104 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  105 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  106 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  107 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  108 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  109 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  110 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  111 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  112 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  113 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  114 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  115 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  116 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  117 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  118 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  119 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  120 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  121 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  122 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  123 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  124 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  125 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  126 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  127 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  128 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  129 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  130 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  131 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  132 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  133 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  134 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  135 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  136 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  137 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  138 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  139 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  140 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  141 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  142 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  143 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  144 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  145 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  146 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  147 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  148 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  149 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  150 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  151 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  152 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  153 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  154 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  155 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  156 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  157 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  158 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  159 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  160 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  161 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  162 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  163 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  164 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  165 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  166 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  167 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  168 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  169 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  170 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  171 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  172 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  173 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  174 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  175 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  176 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  177 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  178 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  179 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  180 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  181 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  182 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  183 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  184 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  185 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  186 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  187 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  188 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  189 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  190 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  191 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  192 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  193 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  194 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  195 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  196 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  197 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  198 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  199 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  200 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  201 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  202 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  203 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  204 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  205 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  206 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  207 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  208 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  209 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  210 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  211 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  212 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  213 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  214 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  215 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  216 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  217 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  218 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  219 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  220 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  221 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  222 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  223 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  224 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  225 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  226 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  227 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  228 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  229 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  230 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  231 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  232 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  233 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  234 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  235 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  236 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  237 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  238 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  239 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  240 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  241 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  242 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  243 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  244 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  245 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  246 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  247 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  248 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  249 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  250 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  251 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  252 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  253 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  254 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  255 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  256 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  257 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  258 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  259 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  260 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  261 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  262 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  263 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  264 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  265 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  266 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  267 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  268 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  269 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  270 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  271 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  272 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  273 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  274 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  275 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  276 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  277 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  278 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  279 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  280 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  281 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  282 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  283 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  284 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  285 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  286 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  287 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  288 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  289 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  290 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  291 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  292 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  293 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  294 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  295 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  296 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  297 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  298 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  299 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  300 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  301 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  302 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  303 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  304 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  305 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  306 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  307 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  308 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  309 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  310 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  311 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  312 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  313 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  314 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  315 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  316 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  317 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  318 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  319 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  320 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  321 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  322 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  323 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  324 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  325 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  326 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  327 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  328 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  329 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  330 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  331 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  332 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  333 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  334 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  335 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  336 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  337 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  338 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  339 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  340 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  341 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  342 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  343 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  344 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  345 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  346 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  347 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  348 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  349 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  350 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  351 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  352 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  353 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  354 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  355 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  356 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  357 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  358 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  359 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  360 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  361 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  362 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  363 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  364 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  365 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  366 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  367 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  368 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  369 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  370 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  371 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  372 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  373 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  374 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  375 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  376 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  377 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  378 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  379 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  380 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  381 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  382 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  383 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  384 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  385 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  386 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  387 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  388 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  389 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  390 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  391 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  392 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  393 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  394 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  395 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  396 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  397 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  398 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  399 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  400 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  401 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  402 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  403 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  404 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  405 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  406 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  407 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  408 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  409 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  410 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  411 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  412 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  413 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  414 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  415 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  416 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  417 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  418 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  419 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  420 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  421 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  422 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  423 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  424 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  425 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  426 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  427 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  428 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  429 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  430 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  431 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  432 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  433 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  434 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  435 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  436 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  437 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  438 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  439 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  440 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  441 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  442 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  443 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  444 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  445 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  446 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  447 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  448 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  449 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  450 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  451 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  452 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  453 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  454 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  455 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  456 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  457 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  458 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  459 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  460 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  461 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  462 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  463 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  464 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  465 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  466 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  467 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  468 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  469 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  470 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  471 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  472 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  473 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  474 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  475 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  476 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  477 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  478 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  479 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  480 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  481 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  482 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  483 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  484 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  485 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  486 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  487 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  488 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  489 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  490 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  491 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  492 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  493 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  494 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  495 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  496 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  497 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  498 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  499 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  500 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  501 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  502 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  503 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  504 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  505 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  506 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  507 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  508 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  509 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  510 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  511 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  512 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  513 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  514 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  515 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  516 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  517 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  518 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  519 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  520 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  521 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  522 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  523 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  524 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  525 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  526 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  527 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  528 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  529 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  530 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  531 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  532 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  533 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  534 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  535 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  536 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  537 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  538 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  539 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  540 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  541 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  542 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  543 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  544 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  545 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  546 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  547 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  548 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  549 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  550 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  551 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  552 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  553 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  554 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  555 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  556 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  557 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  558 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  559 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  560 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  561 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  562 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  563 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  564 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  565 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  566 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  567 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  568 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  569 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  570 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  571 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  572 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  573 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  574 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  575 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  576 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  577 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  578 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  579 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  580 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  581 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  582 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  583 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  584 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  585 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  586 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  587 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  588 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  589 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  590 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  591 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  592 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  593 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  594 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  595 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  596 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  597 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  598 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  599 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  600 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  601 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  602 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  603 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  604 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  605 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  606 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  607 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  608 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  609 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  610 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  611 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  612 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  613 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  614 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  615 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  616 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  617 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  618 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  619 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  620 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  621 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  622 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  623 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  624 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  625 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  626 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  627 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  628 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  629 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  630 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  631 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  632 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  633 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  634 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  635 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  636 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  637 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  638 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  639 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  640 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  641 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  642 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  643 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  644 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  645 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  646 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  647 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  648 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  649 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  650 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  651 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  652 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  653 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  654 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  655 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  656 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  657 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  658 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  659 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  660 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  661 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  662 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  663 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  664 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  665 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  666 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  667 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  668 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  669 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  670 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  671 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  672 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  673 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  674 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  675 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  676 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  677 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  678 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  679 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  680 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  681 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  682 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  683 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  684 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  685 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  686 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  687 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  688 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  689 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  690 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  691 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  692 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  693 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  694 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  695 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  696 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  697 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  698 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  699 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  700 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  701 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  702 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  703 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  704 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  705 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  706 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  707 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  708 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  709 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  710 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  711 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  712 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  713 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  714 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  715 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  716 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  717 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  718 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  719 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  720 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  721 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  722 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  723 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  724 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  725 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  726 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  727 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  728 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  729 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  730 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  731 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  732 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  733 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  734 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  735 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  736 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  737 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  738 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  739 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  740 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  741 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  742 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  743 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  744 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  745 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  746 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  747 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  748 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  749 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  750 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  751 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  752 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  753 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  754 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  755 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  756 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  757 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  758 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  759 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  760 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  761 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  762 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  763 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  764 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  765 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  766 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  767 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  768 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  769 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  770 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  771 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  772 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  773 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  774 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  775 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  776 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  777 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  778 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  779 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  780 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  781 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  782 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  783 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  784 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  785 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  786 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  787 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  788 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  789 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  790 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  791 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  792 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  793 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  794 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  795 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  796 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  797 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  798 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  799 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  800 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  801 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  802 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  803 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  804 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  805 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  806 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  807 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  808 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  809 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  810 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  811 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  812 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  813 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  814 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  815 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  816 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  817 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  818 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  819 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  820 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  821 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  822 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  823 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  824 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  825 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  826 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  827 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  828 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  829 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  830 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  831 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  832 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  833 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  834 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  835 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  836 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  837 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  838 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  839 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  840 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  841 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  842 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  843 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  844 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  845 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  846 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  847 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  848 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  849 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  850 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  851 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  852 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  853 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  854 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  855 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  856 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  857 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  858 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  859 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  860 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  861 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  862 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  863 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  864 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  865 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  866 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  867 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  868 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  869 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  870 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  871 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  872 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  873 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  874 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  875 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  876 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  877 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  878 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  879 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  880 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  881 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  882 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  883 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  884 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  885 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  886 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  887 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  888 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  889 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  890 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  891 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  892 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  893 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  894 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  895 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  896 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  897 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  898 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  899 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  900 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  901 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  902 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  903 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  904 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  905 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  906 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  907 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  908 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  909 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  910 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  911 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  912 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  913 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  914 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  915 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  916 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  917 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  918 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  919 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  920 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  921 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  922 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  923 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  924 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  925 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  926 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  927 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  928 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  929 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  930 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  931 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  932 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  933 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  934 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  935 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  936 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  937 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  938 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  939 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  940 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  941 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  942 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  943 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  944 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  945 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  946 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  947 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  948 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  949 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  950 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  951 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  952 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  953 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  954 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  955 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  956 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  957 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  958 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  959 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  960 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  961 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  962 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  963 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  964 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  965 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  966 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  967 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  968 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  969 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  970 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  971 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  972 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  973 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  974 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  975 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  976 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  977 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  978 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  979 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  980 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  981 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  982 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  983 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  984 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  985 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  986 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  987 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  988 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  989 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  990 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  991 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  992 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  993 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  994 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  995 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  996 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  997 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  998 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  999 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
;;------------------------------
Outputs of best individual on training cases:
Correct output: 150.3639690164 | Program output: 150.3639690164
Correct output: -129.2046261   | Program output: -129.2046261  
Correct output: 43.6336388837  | Program output: 43.6336388837 
Correct output: 168.6824809869 | Program output: 168.6824809869
Correct output: -24.6347316794 | Program output: -24.6347316794
Correct output: 39.9291320135  | Program output: 39.9291320135 
Correct output: -20.9190282536 | Program output: -20.9190282536
Correct output: 61.9263871894  | Program output: 61.9263871894 
Correct output: -28.8395473609 | Program output: -28.8395473609
Correct output: -39.146556962  | Program output: -39.146556962 
Correct output: -134.9331989268 | Program output: -134.9331989268
Correct output: -126.4496738486 | Program output: -126.4496738486
Correct output: -51.218440095  | Program output: -51.218440095 
Correct output: 45.5895106217  | Program output: 45.5895106217 
Correct output: 136.6637618296 | Program output: 136.6637618296
Correct output: -104.5625509424 | Program output: -104.5625509424
Correct output: 80.9125656746  | Program output: 80.9125656746 
Correct output: -63.4657032446 | Program output: -63.4657032446
Correct output: -52.106433034  | Program output: -52.106433034 
Correct output: -99.9152304515 | Program output: -99.9152304515
Correct output: -78.2834351958 | Program output: -78.2834351958
Correct output: -64.2911152024 | Program output: -64.2911152024
Correct output: 93.5722006381  | Program output: 93.5722006381 
Correct output: 141.452540764  | Program output: 141.452540764 
Correct output: 102.2088941323 | Program output: 102.2088941323
;;******************************
