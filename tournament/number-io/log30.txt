Command line args: clojush.problems.software.number-io :parent-selection :tournament :print-timings true
######################################
Parameters set at command line or in problem file argmap; may or may not be default:
alignment-deviation = 5
alternation-rate = 0.01
atom-generators = (#object[clojush.problems.software.number_io$fn__6694 0x2beee3e8 clojush.problems.software.number_io$fn__6694@2beee3e8] #object[clojush.problems.software.number_io$fn__6696 0x58bad46f clojush.problems.software.number_io$fn__6696@58bad46f] #object[clojush.instructions.tag$tag_instruction_erc$fn__1963 0x20231384 clojush.instructions.tag$tag_instruction_erc$fn__1963@20231384] #object[clojush.instructions.tag$tagged_instruction_erc$fn__1969 0x35becbd4 clojush.instructions.tag$tagged_instruction_erc$fn__1969@35becbd4] in1 in2 print_newline integer_sub integer_inc integer_yankdup integer_mult float_sin float_frominteger float_mod integer_div integer_fromfloat integer_mod integer_rot float_yankdup integer_add integer_shove integer_max integer_stackdepth float_max float_dup_items float_stackdepth integer_dup_times integer_yank integer_min integer_dup_items print_integer print_float integer_flush float_shove float_pop float_sub float_min float_mult float_dec float_add float_dup float_swap integer_swap integer_dup float_tan integer_pop float_dup_times float_inc integer_dec float_rot float_flush float_cos float_div float_yank)
epigenetic-markers = []
error-function = #object[clojush.problems.software.number_io$make_number_io_error_function_from_cases$the_actual_num_io_error_function__6704 0x342723a3 clojush.problems.software.number_io$make_number_io_error_function_from_cases$the_actual_num_io_error_function__6704@342723a3]
error-threshold = 1.0E-4
evalpush-limit = 200
final-report-simplifications = 5000
genetic-operator-probabilities = {:alternation 0.3, :uniform-mutation 0.2, [:alternation :uniform-mutation] 0.5}
max-error = 5000
max-generations = 200
max-genome-size-in-initial-program = 100
max-points = 800
parent-selection = :tournament
population-size = 1000
print-timings = true
problem-specific-initial-report = #object[clojush.problems.software.number_io$number_io_initial_report 0x4ec427 clojush.problems.software.number_io$number_io_initial_report@4ec427]
problem-specific-report = #object[clojush.problems.software.number_io$num_io_report 0xfde487b clojush.problems.software.number_io$num_io_report@fde487b]
report-simplifications = 0
uniform-mutation-rate = 0.01
######################################
Train and test cases:
Train Case:   0 | Input/Output: [[-76.07640255298818 -40] -116.07640255298818]
Train Case:   1 | Input/Output: [[33.140084745612 -9] 24.140084745612]
Train Case:   2 | Input/Output: [[48.83329095404173 21] 69.83329095404173]
Train Case:   3 | Input/Output: [[-12.504140719876716 95] 82.49585928012328]
Train Case:   4 | Input/Output: [[-47.761488912611405 82] 34.238511087388595]
Train Case:   5 | Input/Output: [[-58.73581106654591 48] -10.735811066545907]
Train Case:   6 | Input/Output: [[11.970053209274141 -10] 1.9700532092741412]
Train Case:   7 | Input/Output: [[-96.79569766767287 52] -44.79569766767287]
Train Case:   8 | Input/Output: [[21.55765476729961 47] 68.55765476729961]
Train Case:   9 | Input/Output: [[-16.25365233786647 -53] -69.25365233786647]
Train Case:  10 | Input/Output: [[-56.22757453962355 42] -14.227574539623546]
Train Case:  11 | Input/Output: [[-87.97679058859251 -84] -171.9767905885925]
Train Case:  12 | Input/Output: [[-34.18460932648706 2] -32.18460932648706]
Train Case:  13 | Input/Output: [[-7.018785327856264 74] 66.98121467214374]
Train Case:  14 | Input/Output: [[65.02597810810306 35] 100.02597810810306]
Train Case:  15 | Input/Output: [[-57.259550399495886 -33] -90.25955039949588]
Train Case:  16 | Input/Output: [[12.53642923485829 -95] -82.46357076514171]
Train Case:  17 | Input/Output: [[40.25071037860107 -49] -8.74928962139893]
Train Case:  18 | Input/Output: [[-1.132934883125003 -81] -82.132934883125]
Train Case:  19 | Input/Output: [[96.52611299252379 -72] 24.526112992523792]
Train Case:  20 | Input/Output: [[40.59344109579823 -52] -11.406558904201773]
Train Case:  21 | Input/Output: [[86.32825409078978 -76] 10.328254090789784]
Train Case:  22 | Input/Output: [[25.223941970144566 -77] -51.776058029855434]
Train Case:  23 | Input/Output: [[-23.181499674727377 75] 51.81850032527262]
Train Case:  24 | Input/Output: [[89.74314892013237 21] 110.74314892013237]
Test Case:   0 | Input/Output: [[-75.47243377368696 0] -75.47243377368696]
Test Case:   1 | Input/Output: [[-86.74289272114133 77] -9.742892721141331]
Test Case:   2 | Input/Output: [[22.333880473721138 -100] -77.66611952627886]
Test Case:   3 | Input/Output: [[-13.475413983745128 -10] -23.475413983745128]
Test Case:   4 | Input/Output: [[60.259343858556576 -42] 18.259343858556576]
Test Case:   5 | Input/Output: [[-24.336425988812735 83] 58.663574011187265]
Test Case:   6 | Input/Output: [[89.4048528033232 89] 178.4048528033232]
Test Case:   7 | Input/Output: [[-90.33976884141907 -7] -97.33976884141907]
Test Case:   8 | Input/Output: [[58.63408265950204 -99] -40.36591734049796]
Test Case:   9 | Input/Output: [[74.09973320734349 33] 107.09973320734349]
Test Case:  10 | Input/Output: [[10.785301303699683 -96] -85.21469869630032]
Test Case:  11 | Input/Output: [[-70.83898021358385 -66] -136.83898021358385]
Test Case:  12 | Input/Output: [[-5.989122803523244 -50] -55.989122803523244]
Test Case:  13 | Input/Output: [[66.71013648528077 -52] 14.71013648528077]
Test Case:  14 | Input/Output: [[76.99578607207238 -83] -6.004213927927623]
Test Case:  15 | Input/Output: [[95.76887485676616 7] 102.76887485676616]
Test Case:  16 | Input/Output: [[36.40395614324319 -12] 24.403956143243192]
Test Case:  17 | Input/Output: [[-94.68452475394172 -34] -128.68452475394173]
Test Case:  18 | Input/Output: [[91.33034192454767 -60] 31.330341924547668]
Test Case:  19 | Input/Output: [[16.63099223311542 74] 90.63099223311542]
Test Case:  20 | Input/Output: [[42.93648296359683 11] 53.93648296359683]
Test Case:  21 | Input/Output: [[57.565019772611976 97] 154.56501977261198]
Test Case:  22 | Input/Output: [[16.0673641675628 -77] -60.9326358324372]
Test Case:  23 | Input/Output: [[-21.416006138584237 -26] -47.41600613858424]
Test Case:  24 | Input/Output: [[90.98486990581586 93] 183.98486990581586]
Test Case:  25 | Input/Output: [[-78.69303317446827 -39] -117.69303317446827]
Test Case:  26 | Input/Output: [[-79.44536374948592 58] -21.44536374948592]
Test Case:  27 | Input/Output: [[73.55247918660518 -91] -17.447520813394817]
Test Case:  28 | Input/Output: [[49.62659795296045 -88] -38.37340204703955]
Test Case:  29 | Input/Output: [[-81.05232822963926 68] -13.052328229639258]
Test Case:  30 | Input/Output: [[45.99942622323391 -23] 22.99942622323391]
Test Case:  31 | Input/Output: [[45.817906898301345 12] 57.817906898301345]
Test Case:  32 | Input/Output: [[64.06370161483696 -17] 47.06370161483696]
Test Case:  33 | Input/Output: [[41.73691338280733 -37] 4.73691338280733]
Test Case:  34 | Input/Output: [[1.3423070921019757 30] 31.342307092101976]
Test Case:  35 | Input/Output: [[-97.96070252037265 -93] -190.96070252037265]
Test Case:  36 | Input/Output: [[-34.18622593521489 36] 1.8137740647851075]
Test Case:  37 | Input/Output: [[43.62761784760414 -89] -45.37238215239586]
Test Case:  38 | Input/Output: [[67.03874674985963 65] 132.03874674985963]
Test Case:  39 | Input/Output: [[-99.22920163962962 -92] -191.22920163962962]
Test Case:  40 | Input/Output: [[-78.7313172025031 -86] -164.7313172025031]
Test Case:  41 | Input/Output: [[18.824783013099193 16] 34.82478301309919]
Test Case:  42 | Input/Output: [[25.75051585536059 37] 62.75051585536059]
Test Case:  43 | Input/Output: [[34.00942659291749 -20] 14.009426592917492]
Test Case:  44 | Input/Output: [[6.4846449263282295 88] 94.48464492632823]
Test Case:  45 | Input/Output: [[-4.858061733716326 -96] -100.85806173371633]
Test Case:  46 | Input/Output: [[-33.08606826997371 81] 47.91393173002629]
Test Case:  47 | Input/Output: [[-2.3976086012806377 -71] -73.39760860128064]
Test Case:  48 | Input/Output: [[16.639596599297548 94] 110.63959659929755]
Test Case:  49 | Input/Output: [[92.68545280692996 -63] 29.68545280692996]
Test Case:  50 | Input/Output: [[1.921555608768216 -32] -30.078444391231784]
Test Case:  51 | Input/Output: [[-59.09572923713971 -3] -62.09572923713971]
Test Case:  52 | Input/Output: [[84.738523437368 -78] 6.738523437368002]
Test Case:  53 | Input/Output: [[-8.910437260299318 -19] -27.910437260299318]
Test Case:  54 | Input/Output: [[-18.110263984225085 100] 81.88973601577491]
Test Case:  55 | Input/Output: [[-29.329780047784965 -65] -94.32978004778496]
Test Case:  56 | Input/Output: [[-60.061644651101396 -10] -70.0616446511014]
Test Case:  57 | Input/Output: [[67.99240999553112 -83] -15.00759000446888]
Test Case:  58 | Input/Output: [[48.839483081405234 -59] -10.160516918594766]
Test Case:  59 | Input/Output: [[64.07048456482718 -84] -19.929515435172817]
Test Case:  60 | Input/Output: [[-23.271839285683484 67] 43.728160714316516]
Test Case:  61 | Input/Output: [[32.15620832005524 93] 125.15620832005524]
Test Case:  62 | Input/Output: [[-6.696812189118347 1] -5.696812189118347]
Test Case:  63 | Input/Output: [[71.8133518221994 -55] 16.813351822199394]
Test Case:  64 | Input/Output: [[33.743296690400854 -61] -27.256703309599146]
Test Case:  65 | Input/Output: [[-21.295070902966714 77] 55.704929097033286]
Test Case:  66 | Input/Output: [[-4.419411381192532 10] 5.580588618807468]
Test Case:  67 | Input/Output: [[-34.65145533717653 62] 27.34854466282347]
Test Case:  68 | Input/Output: [[-30.59803740304004 -63] -93.59803740304004]
Test Case:  69 | Input/Output: [[71.5916226186159 -77] -5.408377381384099]
Test Case:  70 | Input/Output: [[-62.04925733183173 53] -9.049257331831733]
Test Case:  71 | Input/Output: [[0.20075985030338472 4] 4.200759850303385]
Test Case:  72 | Input/Output: [[76.38212096699272 -94] -17.617879033007284]
Test Case:  73 | Input/Output: [[-37.58214555031751 72] 34.41785444968249]
Test Case:  74 | Input/Output: [[24.586234362989586 93] 117.58623436298959]
Test Case:  75 | Input/Output: [[-32.88851243850708 25] -7.888512438507078]
Test Case:  76 | Input/Output: [[-94.966254740245 92] -2.966254740245006]
Test Case:  77 | Input/Output: [[28.182976016766645 -44] -15.817023983233355]
Test Case:  78 | Input/Output: [[55.20835271845422 -52] 3.208352718454222]
Test Case:  79 | Input/Output: [[-72.44643011340553 9] -63.446430113405526]
Test Case:  80 | Input/Output: [[-46.67086200225965 10] -36.67086200225965]
Test Case:  81 | Input/Output: [[-61.942919096584426 57] -4.942919096584426]
Test Case:  82 | Input/Output: [[-5.1402827388727985 -14] -19.1402827388728]
Test Case:  83 | Input/Output: [[41.835422104447446 8] 49.835422104447446]
Test Case:  84 | Input/Output: [[-34.76521430013162 -33] -67.76521430013162]
Test Case:  85 | Input/Output: [[-0.23498488004048568 96] 95.76501511995951]
Test Case:  86 | Input/Output: [[-89.55585495775627 6] -83.55585495775627]
Test Case:  87 | Input/Output: [[87.63988989345367 88] 175.63988989345367]
Test Case:  88 | Input/Output: [[9.162365203251738 -95] -85.83763479674826]
Test Case:  89 | Input/Output: [[-45.87413254090242 77] 31.125867459097577]
Test Case:  90 | Input/Output: [[-33.25197918916652 -33] -66.25197918916652]
Test Case:  91 | Input/Output: [[-75.30169071974086 62] -13.301690719740861]
Test Case:  92 | Input/Output: [[95.31381886978804 -91] 4.313818869788037]
Test Case:  93 | Input/Output: [[-67.92653612671526 -30] -97.92653612671526]
Test Case:  94 | Input/Output: [[-22.33913385869269 -98] -120.33913385869269]
Test Case:  95 | Input/Output: [[64.09410641102929 22] 86.09410641102929]
Test Case:  96 | Input/Output: [[64.03253249759629 -42] 22.032532497596293]
Test Case:  97 | Input/Output: [[-8.729657841123739 2] -6.729657841123739]
Test Case:  98 | Input/Output: [[-45.755278179455104 -32] -77.7552781794551]
Test Case:  99 | Input/Output: [[-31.916699800765386 -36] -67.91669980076539]
Test Case: 100 | Input/Output: [[-6.80946106672522 -80] -86.80946106672522]
Test Case: 101 | Input/Output: [[7.850100056876826 1] 8.850100056876826]
Test Case: 102 | Input/Output: [[49.50875975724517 -28] 21.508759757245173]
Test Case: 103 | Input/Output: [[-57.01063602192449 -24] -81.01063602192448]
Test Case: 104 | Input/Output: [[-93.37922348745846 -47] -140.37922348745846]
Test Case: 105 | Input/Output: [[-81.81563154666006 68] -13.815631546660057]
Test Case: 106 | Input/Output: [[-29.143448765304527 -37] -66.14344876530453]
Test Case: 107 | Input/Output: [[52.00901832552972 52] 104.00901832552972]
Test Case: 108 | Input/Output: [[27.45257274099393 85] 112.45257274099393]
Test Case: 109 | Input/Output: [[-96.97356008280661 47] -49.973560082806614]
Test Case: 110 | Input/Output: [[-99.99935356559106 82] -17.999353565591065]
Test Case: 111 | Input/Output: [[30.884235724586148 -3] 27.884235724586148]
Test Case: 112 | Input/Output: [[-49.10512215934841 47] -2.1051221593484115]
Test Case: 113 | Input/Output: [[70.39973963470189 -95] -24.600260365298112]
Test Case: 114 | Input/Output: [[-40.600232842162434 73] 32.399767157837566]
Test Case: 115 | Input/Output: [[-31.64568847137221 -33] -64.64568847137221]
Test Case: 116 | Input/Output: [[80.96755737967922 96] 176.96755737967922]
Test Case: 117 | Input/Output: [[0.3934232038892276 -59] -58.60657679611077]
Test Case: 118 | Input/Output: [[-10.318243491892389 14] 3.681756508107611]
Test Case: 119 | Input/Output: [[-16.13238856222665 -60] -76.13238856222665]
Test Case: 120 | Input/Output: [[-67.33599775513524 76] 8.664002244864761]
Test Case: 121 | Input/Output: [[36.160027648643336 -89] -52.839972351356664]
Test Case: 122 | Input/Output: [[-84.45514112402626 -81] -165.45514112402626]
Test Case: 123 | Input/Output: [[-96.71632457050295 -19] -115.71632457050295]
Test Case: 124 | Input/Output: [[93.09420550909263 61] 154.09420550909263]
Test Case: 125 | Input/Output: [[-56.571196457917864 -26] -82.57119645791786]
Test Case: 126 | Input/Output: [[-80.78586817716744 87] 6.214131822832556]
Test Case: 127 | Input/Output: [[29.996977820442538 63] 92.99697782044254]
Test Case: 128 | Input/Output: [[-20.552202695568027 -56] -76.55220269556803]
Test Case: 129 | Input/Output: [[54.46279462897127 -41] 13.462794628971267]
Test Case: 130 | Input/Output: [[0.4703224790680878 -45] -44.52967752093191]
Test Case: 131 | Input/Output: [[-74.5081142184211 -88] -162.5081142184211]
Test Case: 132 | Input/Output: [[-42.18831916970351 -36] -78.1883191697035]
Test Case: 133 | Input/Output: [[88.84041297330057 96] 184.84041297330057]
Test Case: 134 | Input/Output: [[-3.9621421323995207 33] 29.03785786760048]
Test Case: 135 | Input/Output: [[37.0789580148147 65] 102.0789580148147]
Test Case: 136 | Input/Output: [[32.264488501070986 -13] 19.264488501070986]
Test Case: 137 | Input/Output: [[-83.42671199157745 -63] -146.42671199157746]
Test Case: 138 | Input/Output: [[39.29091991092642 23] 62.29091991092642]
Test Case: 139 | Input/Output: [[-96.4708004873646 -22] -118.4708004873646]
Test Case: 140 | Input/Output: [[13.866129267321313 9] 22.866129267321313]
Test Case: 141 | Input/Output: [[34.82621850688113 -35] -0.1737814931188666]
Test Case: 142 | Input/Output: [[22.593698147261108 75] 97.59369814726111]
Test Case: 143 | Input/Output: [[42.4560531675817 -91] -48.5439468324183]
Test Case: 144 | Input/Output: [[89.86272286888675 48] 137.86272286888675]
Test Case: 145 | Input/Output: [[41.569399496730966 -53] -11.430600503269034]
Test Case: 146 | Input/Output: [[46.64915663242587 -45] 1.6491566324258713]
Test Case: 147 | Input/Output: [[-0.9395006462616777 75] 74.06049935373832]
Test Case: 148 | Input/Output: [[55.92982680968791 94] 149.9298268096879]
Test Case: 149 | Input/Output: [[-36.0577398583074 60] 23.9422601416926]
Test Case: 150 | Input/Output: [[-28.352948378408357 27] -1.3529483784083567]
Test Case: 151 | Input/Output: [[-48.27528532767129 52] 3.724714672328709]
Test Case: 152 | Input/Output: [[-46.669425964708175 -35] -81.66942596470818]
Test Case: 153 | Input/Output: [[-37.239637497484225 10] -27.239637497484225]
Test Case: 154 | Input/Output: [[-21.15255849446652 -18] -39.15255849446652]
Test Case: 155 | Input/Output: [[80.40500163500533 -50] 30.405001635005334]
Test Case: 156 | Input/Output: [[-54.487020688125924 -8] -62.487020688125924]
Test Case: 157 | Input/Output: [[-4.874409784224113 -64] -68.87440978422411]
Test Case: 158 | Input/Output: [[-41.508293430543894 27] -14.508293430543894]
Test Case: 159 | Input/Output: [[75.20018283152075 65] 140.20018283152075]
Test Case: 160 | Input/Output: [[-46.445369309227736 10] -36.445369309227736]
Test Case: 161 | Input/Output: [[21.129540309203236 11] 32.129540309203236]
Test Case: 162 | Input/Output: [[-87.97883545220442 -68] -155.9788354522044]
Test Case: 163 | Input/Output: [[59.28912526362973 -32] 27.289125263629728]
Test Case: 164 | Input/Output: [[62.989668266091115 41] 103.98966826609112]
Test Case: 165 | Input/Output: [[26.055866136966173 -29] -2.9441338630338265]
Test Case: 166 | Input/Output: [[74.28949051891516 -18] 56.28949051891516]
Test Case: 167 | Input/Output: [[4.766926906346569 -2] 2.766926906346569]
Test Case: 168 | Input/Output: [[-30.113265887001333 -17] -47.11326588700133]
Test Case: 169 | Input/Output: [[-29.253725905637168 -33] -62.25372590563717]
Test Case: 170 | Input/Output: [[39.30455225721116 96] 135.30455225721116]
Test Case: 171 | Input/Output: [[92.16409359145212 73] 165.16409359145212]
Test Case: 172 | Input/Output: [[-43.76834850582738 -83] -126.76834850582739]
Test Case: 173 | Input/Output: [[30.421818790639065 5] 35.421818790639065]
Test Case: 174 | Input/Output: [[-85.32302207082041 -61] -146.3230220708204]
Test Case: 175 | Input/Output: [[30.85447011852645 -48] -17.14552988147355]
Test Case: 176 | Input/Output: [[88.63104563007673 19] 107.63104563007673]
Test Case: 177 | Input/Output: [[66.352758925753 97] 163.352758925753]
Test Case: 178 | Input/Output: [[-11.527902529062189 28] 16.47209747093781]
Test Case: 179 | Input/Output: [[-24.560196130180472 -14] -38.56019613018047]
Test Case: 180 | Input/Output: [[22.508458919015965 84] 106.50845891901596]
Test Case: 181 | Input/Output: [[33.83159397080601 -18] 15.831593970806011]
Test Case: 182 | Input/Output: [[-28.577142888576248 -27] -55.57714288857625]
Test Case: 183 | Input/Output: [[65.61383995979477 85] 150.61383995979477]
Test Case: 184 | Input/Output: [[53.863698445984824 47] 100.86369844598482]
Test Case: 185 | Input/Output: [[44.98107599000389 42] 86.98107599000389]
Test Case: 186 | Input/Output: [[14.109072392194946 15] 29.109072392194946]
Test Case: 187 | Input/Output: [[48.62743622920061 -65] -16.37256377079939]
Test Case: 188 | Input/Output: [[29.980386045721872 3] 32.98038604572187]
Test Case: 189 | Input/Output: [[-16.168928279392446 -65] -81.16892827939245]
Test Case: 190 | Input/Output: [[88.56199670115012 89] 177.56199670115012]
Test Case: 191 | Input/Output: [[14.989571399374384 -53] -38.010428600625616]
Test Case: 192 | Input/Output: [[-75.29046804165647 -55] -130.29046804165648]
Test Case: 193 | Input/Output: [[-72.26223054248477 -79] -151.26223054248476]
Test Case: 194 | Input/Output: [[79.11980492362068 63] 142.11980492362068]
Test Case: 195 | Input/Output: [[-52.787943953367986 25] -27.787943953367986]
Test Case: 196 | Input/Output: [[34.01319423243007 20] 54.01319423243007]
Test Case: 197 | Input/Output: [[76.81326079094089 52] 128.8132607909409]
Test Case: 198 | Input/Output: [[-60.386955346542436 -78] -138.38695534654244]
Test Case: 199 | Input/Output: [[-59.20787193929049 -48] -107.2078719392905]
Test Case: 200 | Input/Output: [[41.78122590881233 -10] 31.78122590881233]
Test Case: 201 | Input/Output: [[11.964607844853802 75] 86.9646078448538]
Test Case: 202 | Input/Output: [[-80.443884105112 -49] -129.443884105112]
Test Case: 203 | Input/Output: [[-0.030265959753947413 -70] -70.03026595975395]
Test Case: 204 | Input/Output: [[25.60391750220677 97] 122.60391750220677]
Test Case: 205 | Input/Output: [[-2.668921687424458 -40] -42.66892168742446]
Test Case: 206 | Input/Output: [[-84.71322988477945 77] -7.713229884779452]
Test Case: 207 | Input/Output: [[-72.20838185382634 53] -19.20838185382634]
Test Case: 208 | Input/Output: [[-72.95270029104088 -23] -95.95270029104088]
Test Case: 209 | Input/Output: [[-69.68672096607995 -96] -165.68672096607995]
Test Case: 210 | Input/Output: [[-4.870243490319098 88] 83.1297565096809]
Test Case: 211 | Input/Output: [[81.1902028445964 -79] 2.1902028445963992]
Test Case: 212 | Input/Output: [[7.652383911818703 80] 87.6523839118187]
Test Case: 213 | Input/Output: [[-88.88033824484998 -90] -178.88033824484998]
Test Case: 214 | Input/Output: [[98.17463255418096 -74] 24.17463255418096]
Test Case: 215 | Input/Output: [[-87.9511464320226 91] 3.048853567977403]
Test Case: 216 | Input/Output: [[96.49979555423079 18] 114.49979555423079]
Test Case: 217 | Input/Output: [[-35.7954692249336 -15] -50.7954692249336]
Test Case: 218 | Input/Output: [[-82.68227691890925 95] 12.317723081090747]
Test Case: 219 | Input/Output: [[88.93460973775308 -62] 26.934609737753078]
Test Case: 220 | Input/Output: [[-45.23384057613378 10] -35.23384057613378]
Test Case: 221 | Input/Output: [[-94.91814821470686 -3] -97.91814821470686]
Test Case: 222 | Input/Output: [[31.873811090026038 -95] -63.12618890997396]
Test Case: 223 | Input/Output: [[84.12478721819087 62] 146.12478721819087]
Test Case: 224 | Input/Output: [[14.16873584800156 52] 66.16873584800156]
Test Case: 225 | Input/Output: [[-35.85255042733908 75] 39.14744957266092]
Test Case: 226 | Input/Output: [[6.353501405848405 -42] -35.646498594151595]
Test Case: 227 | Input/Output: [[-3.2391495532791765 -95] -98.23914955327918]
Test Case: 228 | Input/Output: [[-82.34237437247869 73] -9.342374372478687]
Test Case: 229 | Input/Output: [[-92.76034085101881 -58] -150.7603408510188]
Test Case: 230 | Input/Output: [[0.5514593313978366 7] 7.551459331397837]
Test Case: 231 | Input/Output: [[-55.5276358409867 75] 19.472364159013303]
Test Case: 232 | Input/Output: [[-47.97676723979642 65] 17.023232760203577]
Test Case: 233 | Input/Output: [[-14.502894794766078 67] 52.49710520523392]
Test Case: 234 | Input/Output: [[-26.805415008319144 99] 72.19458499168086]
Test Case: 235 | Input/Output: [[75.70012935803271 5] 80.70012935803271]
Test Case: 236 | Input/Output: [[90.74857498398978 51] 141.74857498398978]
Test Case: 237 | Input/Output: [[-84.42223224634242 26] -58.42223224634242]
Test Case: 238 | Input/Output: [[22.379634412982824 13] 35.379634412982824]
Test Case: 239 | Input/Output: [[-8.09452220336189 -7] -15.09452220336189]
Test Case: 240 | Input/Output: [[-38.2112927256681 90] 51.7887072743319]
Test Case: 241 | Input/Output: [[-40.225976484893344 11] -29.225976484893344]
Test Case: 242 | Input/Output: [[-26.934774982357055 7] -19.934774982357055]
Test Case: 243 | Input/Output: [[-96.60755958431699 -34] -130.607559584317]
Test Case: 244 | Input/Output: [[89.93400811084496 -62] 27.934008110844957]
Test Case: 245 | Input/Output: [[67.26567149835222 -2] 65.26567149835222]
Test Case: 246 | Input/Output: [[72.0814583066481 2] 74.0814583066481]
Test Case: 247 | Input/Output: [[-81.72361091777432 58] -23.723610917774323]
Test Case: 248 | Input/Output: [[-10.844942061454319 5] -5.844942061454319]
Test Case: 249 | Input/Output: [[49.82322347220139 47] 96.82322347220139]
Test Case: 250 | Input/Output: [[-8.887717140792972 -47] -55.88771714079297]
Test Case: 251 | Input/Output: [[-46.100877165757815 35] -11.100877165757815]
Test Case: 252 | Input/Output: [[2.0542544216742016 21] 23.0542544216742]
Test Case: 253 | Input/Output: [[84.13200078069627 80] 164.13200078069627]
Test Case: 254 | Input/Output: [[58.20535730980839 -5] 53.20535730980839]
Test Case: 255 | Input/Output: [[-36.054390874060886 6] -30.054390874060886]
Test Case: 256 | Input/Output: [[-93.63012061921845 92] -1.6301206192184452]
Test Case: 257 | Input/Output: [[-34.000424390055656 -98] -132.00042439005566]
Test Case: 258 | Input/Output: [[-39.3071138509213 37] -2.307113850921297]
Test Case: 259 | Input/Output: [[92.60224809630319 -32] 60.602248096303185]
Test Case: 260 | Input/Output: [[90.33199410913826 -53] 37.331994109138265]
Test Case: 261 | Input/Output: [[54.71113724894593 33] 87.71113724894593]
Test Case: 262 | Input/Output: [[-77.19912125142947 71] -6.1991212514294745]
Test Case: 263 | Input/Output: [[56.30644921214213 -15] 41.30644921214213]
Test Case: 264 | Input/Output: [[73.23970147479776 9] 82.23970147479776]
Test Case: 265 | Input/Output: [[6.805233672542315 25] 31.805233672542315]
Test Case: 266 | Input/Output: [[48.99889525101398 0] 48.99889525101398]
Test Case: 267 | Input/Output: [[-46.41311304108837 -83] -129.41311304108837]
Test Case: 268 | Input/Output: [[9.859126706324517 90] 99.85912670632452]
Test Case: 269 | Input/Output: [[-61.33495948349581 89] 27.66504051650419]
Test Case: 270 | Input/Output: [[-68.91556807458528 -94] -162.91556807458528]
Test Case: 271 | Input/Output: [[63.039926277720184 18] 81.03992627772018]
Test Case: 272 | Input/Output: [[-77.79528307318256 -74] -151.79528307318256]
Test Case: 273 | Input/Output: [[76.91845224858324 32] 108.91845224858324]
Test Case: 274 | Input/Output: [[77.0010655397192 60] 137.0010655397192]
Test Case: 275 | Input/Output: [[-38.038747133701946 -99] -137.03874713370195]
Test Case: 276 | Input/Output: [[3.003014131979782 -32] -28.996985868020218]
Test Case: 277 | Input/Output: [[-7.006780482157154 43] 35.993219517842846]
Test Case: 278 | Input/Output: [[79.9450976139633 57] 136.9450976139633]
Test Case: 279 | Input/Output: [[62.50942200282654 71] 133.50942200282654]
Test Case: 280 | Input/Output: [[-11.783198776427199 -60] -71.7831987764272]
Test Case: 281 | Input/Output: [[15.839648141915006 -94] -78.160351858085]
Test Case: 282 | Input/Output: [[28.47215114788989 42] 70.47215114788989]
Test Case: 283 | Input/Output: [[24.514396642763188 -94] -69.48560335723681]
Test Case: 284 | Input/Output: [[14.509515868480733 -24] -9.490484131519267]
Test Case: 285 | Input/Output: [[13.128189859338008 23] 36.12818985933801]
Test Case: 286 | Input/Output: [[48.393808471589125 -9] 39.393808471589125]
Test Case: 287 | Input/Output: [[87.48369196629625 -79] 8.483691966296249]
Test Case: 288 | Input/Output: [[34.912775218249266 60] 94.91277521824927]
Test Case: 289 | Input/Output: [[77.17363849201712 9] 86.17363849201712]
Test Case: 290 | Input/Output: [[-95.56615876038985 44] -51.566158760389854]
Test Case: 291 | Input/Output: [[35.50566579256372 -80] -44.49433420743628]
Test Case: 292 | Input/Output: [[87.92201228215143 37] 124.92201228215143]
Test Case: 293 | Input/Output: [[-57.21756726901746 -45] -102.21756726901745]
Test Case: 294 | Input/Output: [[43.16850624004681 -4] 39.16850624004681]
Test Case: 295 | Input/Output: [[71.99128107125236 -3] 68.99128107125236]
Test Case: 296 | Input/Output: [[67.53652568692735 82] 149.53652568692735]
Test Case: 297 | Input/Output: [[-70.8994795930935 -5] -75.8994795930935]
Test Case: 298 | Input/Output: [[-35.06833132859448 58] 22.931668671405518]
Test Case: 299 | Input/Output: [[23.396252109249204 -42] -18.603747890750796]
Test Case: 300 | Input/Output: [[18.214249552157796 -86] -67.7857504478422]
Test Case: 301 | Input/Output: [[-47.11698235395676 67] 19.883017646043243]
Test Case: 302 | Input/Output: [[34.975020184584 -10] 24.975020184583997]
Test Case: 303 | Input/Output: [[28.90178404328097 -49] -20.09821595671903]
Test Case: 304 | Input/Output: [[-55.92647436604168 64] 8.073525633958319]
Test Case: 305 | Input/Output: [[98.70186592080933 -14] 84.70186592080933]
Test Case: 306 | Input/Output: [[37.82735153487852 -70] -32.17264846512148]
Test Case: 307 | Input/Output: [[-46.505196476188914 20] -26.505196476188914]
Test Case: 308 | Input/Output: [[-14.27685313372811 59] 44.72314686627189]
Test Case: 309 | Input/Output: [[-7.53458883385963 61] 53.46541116614037]
Test Case: 310 | Input/Output: [[83.87692060629362 -42] 41.87692060629362]
Test Case: 311 | Input/Output: [[62.09523027167006 -51] 11.095230271670061]
Test Case: 312 | Input/Output: [[51.834162698261196 -46] 5.834162698261196]
Test Case: 313 | Input/Output: [[-49.66050803825475 -50] -99.66050803825475]
Test Case: 314 | Input/Output: [[93.42945831273437 -91] 2.4294583127343685]
Test Case: 315 | Input/Output: [[55.47705835332479 80] 135.4770583533248]
Test Case: 316 | Input/Output: [[67.50247192272948 -35] 32.502471922729484]
Test Case: 317 | Input/Output: [[-95.48820549760106 -74] -169.48820549760106]
Test Case: 318 | Input/Output: [[90.45973172138108 -56] 34.459731721381075]
Test Case: 319 | Input/Output: [[72.7964577006806 23] 95.7964577006806]
Test Case: 320 | Input/Output: [[-81.90355154537454 -47] -128.90355154537454]
Test Case: 321 | Input/Output: [[-76.76649206580852 -76] -152.7664920658085]
Test Case: 322 | Input/Output: [[58.24977061941095 -12] 46.24977061941095]
Test Case: 323 | Input/Output: [[-17.544419746181262 -16] -33.54441974618126]
Test Case: 324 | Input/Output: [[83.77537662171375 -76] 7.775376621713747]
Test Case: 325 | Input/Output: [[72.99449938666692 91] 163.99449938666692]
Test Case: 326 | Input/Output: [[-68.71263598410366 75] 6.287364015896344]
Test Case: 327 | Input/Output: [[-41.45734456721859 -14] -55.45734456721859]
Test Case: 328 | Input/Output: [[10.273950977615428 30] 40.27395097761543]
Test Case: 329 | Input/Output: [[65.61219620039586 -44] 21.612196200395857]
Test Case: 330 | Input/Output: [[-27.77915951353023 -50] -77.77915951353023]
Test Case: 331 | Input/Output: [[-14.018838524972296 -41] -55.018838524972296]
Test Case: 332 | Input/Output: [[-64.064381453976 -92] -156.064381453976]
Test Case: 333 | Input/Output: [[17.213057593089957 -30] -12.786942406910043]
Test Case: 334 | Input/Output: [[82.49654166016302 -47] 35.49654166016302]
Test Case: 335 | Input/Output: [[8.606248097905777 15] 23.606248097905777]
Test Case: 336 | Input/Output: [[63.8619861941344 54] 117.8619861941344]
Test Case: 337 | Input/Output: [[-20.22679840446473 -78] -98.22679840446473]
Test Case: 338 | Input/Output: [[16.658460917733976 49] 65.65846091773398]
Test Case: 339 | Input/Output: [[83.73608482496525 58] 141.73608482496525]
Test Case: 340 | Input/Output: [[-20.968488610357298 28] 7.031511389642702]
Test Case: 341 | Input/Output: [[68.31693233957881 -9] 59.31693233957881]
Test Case: 342 | Input/Output: [[-15.012990571850878 32] 16.987009428149122]
Test Case: 343 | Input/Output: [[86.40223973916531 -49] 37.40223973916531]
Test Case: 344 | Input/Output: [[31.776789798661582 -46] -14.223210201338418]
Test Case: 345 | Input/Output: [[-73.52794080837373 -54] -127.52794080837373]
Test Case: 346 | Input/Output: [[-32.65863773560764 -89] -121.65863773560764]
Test Case: 347 | Input/Output: [[-94.63136031094446 21] -73.63136031094446]
Test Case: 348 | Input/Output: [[-62.5572050070081 -40] -102.5572050070081]
Test Case: 349 | Input/Output: [[68.10307905523766 -100] -31.896920944762343]
Test Case: 350 | Input/Output: [[-94.56885676523132 -62] -156.56885676523132]
Test Case: 351 | Input/Output: [[-12.953877546702387 -1] -13.953877546702387]
Test Case: 352 | Input/Output: [[-57.970178198108925 99] 41.029821801891075]
Test Case: 353 | Input/Output: [[-23.495674342759514 18] -5.495674342759514]
Test Case: 354 | Input/Output: [[-42.07530045001862 -99] -141.07530045001863]
Test Case: 355 | Input/Output: [[77.1235827936975 81] 158.1235827936975]
Test Case: 356 | Input/Output: [[-0.8384469032220778 -18] -18.838446903222078]
Test Case: 357 | Input/Output: [[-27.91982311313079 47] 19.08017688686921]
Test Case: 358 | Input/Output: [[65.81747446871458 1] 66.81747446871458]
Test Case: 359 | Input/Output: [[-42.600312381140995 -63] -105.600312381141]
Test Case: 360 | Input/Output: [[-42.48015866438244 -7] -49.48015866438244]
Test Case: 361 | Input/Output: [[99.09066531752023 77] 176.09066531752023]
Test Case: 362 | Input/Output: [[82.40149463172412 74] 156.40149463172412]
Test Case: 363 | Input/Output: [[-68.08858845112916 -52] -120.08858845112916]
Test Case: 364 | Input/Output: [[-97.23677719060137 40] -57.23677719060137]
Test Case: 365 | Input/Output: [[-65.95143729987987 57] -8.95143729987987]
Test Case: 366 | Input/Output: [[89.02820725836116 -76] 13.028207258361164]
Test Case: 367 | Input/Output: [[-28.059170987167676 -93] -121.05917098716768]
Test Case: 368 | Input/Output: [[-92.75076860301546 -66] -158.75076860301544]
Test Case: 369 | Input/Output: [[-84.5598971554145 51] -33.559897155414504]
Test Case: 370 | Input/Output: [[-50.43011619719242 86] 35.56988380280758]
Test Case: 371 | Input/Output: [[30.14153002725439 -17] 13.14153002725439]
Test Case: 372 | Input/Output: [[-10.312373115238117 -14] -24.312373115238117]
Test Case: 373 | Input/Output: [[-61.61766512792144 94] 32.38233487207856]
Test Case: 374 | Input/Output: [[-88.23026453431319 13] -75.23026453431319]
Test Case: 375 | Input/Output: [[-50.908045066878785 -77] -127.90804506687878]
Test Case: 376 | Input/Output: [[22.23550447757728 -75] -52.76449552242272]
Test Case: 377 | Input/Output: [[-93.16444534815733 -69] -162.16444534815733]
Test Case: 378 | Input/Output: [[17.855853788993485 74] 91.85585378899349]
Test Case: 379 | Input/Output: [[-61.957261787209795 -6] -67.9572617872098]
Test Case: 380 | Input/Output: [[30.407396834960934 -73] -42.592603165039066]
Test Case: 381 | Input/Output: [[-52.09285489517956 79] 26.907145104820437]
Test Case: 382 | Input/Output: [[-37.34594995444147 74] 36.65405004555853]
Test Case: 383 | Input/Output: [[73.32131690096384 82] 155.32131690096384]
Test Case: 384 | Input/Output: [[-71.5393800090356 -13] -84.5393800090356]
Test Case: 385 | Input/Output: [[-30.462465456856933 -8] -38.46246545685693]
Test Case: 386 | Input/Output: [[-41.38522862659231 88] 46.61477137340769]
Test Case: 387 | Input/Output: [[-27.155487178438648 53] 25.844512821561352]
Test Case: 388 | Input/Output: [[-73.22365320324191 84] 10.77634679675809]
Test Case: 389 | Input/Output: [[-66.41481467122739 33] -33.41481467122739]
Test Case: 390 | Input/Output: [[42.77603415094387 -35] 7.776034150943872]
Test Case: 391 | Input/Output: [[53.0267118669839 -36] 17.026711866983902]
Test Case: 392 | Input/Output: [[-64.63373688578343 64] -0.6337368857834349]
Test Case: 393 | Input/Output: [[75.92855736479117 26] 101.92855736479117]
Test Case: 394 | Input/Output: [[78.26694124811104 27] 105.26694124811104]
Test Case: 395 | Input/Output: [[15.648527425713993 13] 28.648527425713993]
Test Case: 396 | Input/Output: [[71.26939729914264 -96] -24.73060270085736]
Test Case: 397 | Input/Output: [[19.86800881103852 23] 42.86800881103852]
Test Case: 398 | Input/Output: [[-65.3275490436202 -93] -158.3275490436202]
Test Case: 399 | Input/Output: [[-88.55829035195552 64] -24.55829035195552]
Test Case: 400 | Input/Output: [[-85.4969468436189 -73] -158.4969468436189]
Test Case: 401 | Input/Output: [[-73.30024750929955 -30] -103.30024750929955]
Test Case: 402 | Input/Output: [[-91.48533838489598 -91] -182.48533838489598]
Test Case: 403 | Input/Output: [[51.949488013053326 13] 64.94948801305333]
Test Case: 404 | Input/Output: [[47.1276552073854 89] 136.1276552073854]
Test Case: 405 | Input/Output: [[93.09471627202967 67] 160.09471627202967]
Test Case: 406 | Input/Output: [[0.9899026802871305 88] 88.98990268028713]
Test Case: 407 | Input/Output: [[47.83324080681456 -94] -46.16675919318544]
Test Case: 408 | Input/Output: [[-65.00747500650394 83] 17.992524993496062]
Test Case: 409 | Input/Output: [[61.50986167845497 15] 76.50986167845497]
Test Case: 410 | Input/Output: [[59.69347035590283 -16] 43.69347035590283]
Test Case: 411 | Input/Output: [[13.02732653697774 28] 41.02732653697774]
Test Case: 412 | Input/Output: [[57.2659791138353 82] 139.2659791138353]
Test Case: 413 | Input/Output: [[82.34210380175176 -97] -14.657896198248238]
Test Case: 414 | Input/Output: [[27.90373769077962 53] 80.90373769077962]
Test Case: 415 | Input/Output: [[23.151255015855597 10] 33.1512550158556]
Test Case: 416 | Input/Output: [[22.830571233911257 39] 61.83057123391126]
Test Case: 417 | Input/Output: [[-83.2192037547998 -65] -148.21920375479982]
Test Case: 418 | Input/Output: [[53.2578316081628 -53] 0.25783160816280315]
Test Case: 419 | Input/Output: [[-30.739687753661826 64] 33.260312246338174]
Test Case: 420 | Input/Output: [[-2.917668221356948 68] 65.08233177864305]
Test Case: 421 | Input/Output: [[-45.53520473461876 -7] -52.53520473461876]
Test Case: 422 | Input/Output: [[-99.0649546735177 -16] -115.0649546735177]
Test Case: 423 | Input/Output: [[-64.73224884886513 -39] -103.73224884886513]
Test Case: 424 | Input/Output: [[6.958787039879667 68] 74.95878703987967]
Test Case: 425 | Input/Output: [[91.38229532725387 16] 107.38229532725387]
Test Case: 426 | Input/Output: [[63.357121871792174 -56] 7.357121871792174]
Test Case: 427 | Input/Output: [[-3.9303497768777333 -47] -50.93034977687773]
Test Case: 428 | Input/Output: [[14.922226381801266 -86] -71.07777361819873]
Test Case: 429 | Input/Output: [[28.206937402347677 -63] -34.79306259765232]
Test Case: 430 | Input/Output: [[-78.67117876202761 -97] -175.6711787620276]
Test Case: 431 | Input/Output: [[70.52691224705106 -25] 45.52691224705106]
Test Case: 432 | Input/Output: [[-74.44817797514943 47] -27.448177975149434]
Test Case: 433 | Input/Output: [[98.62560419232585 -35] 63.62560419232585]
Test Case: 434 | Input/Output: [[-43.0982962302604 48] 4.901703769739598]
Test Case: 435 | Input/Output: [[7.586667472697542 37] 44.58666747269754]
Test Case: 436 | Input/Output: [[-17.59618563855159 91] 73.40381436144841]
Test Case: 437 | Input/Output: [[67.484740657629 -24] 43.484740657629004]
Test Case: 438 | Input/Output: [[-66.16951940806324 61] -5.169519408063238]
Test Case: 439 | Input/Output: [[-96.15191029163985 18] -78.15191029163985]
Test Case: 440 | Input/Output: [[-90.55416270876584 -14] -104.55416270876584]
Test Case: 441 | Input/Output: [[-84.73505488186521 26] -58.73505488186521]
Test Case: 442 | Input/Output: [[56.4091502814953 -62] -5.5908497185047]
Test Case: 443 | Input/Output: [[-51.09378528242332 -50] -101.09378528242331]
Test Case: 444 | Input/Output: [[-66.27408912423165 -92] -158.27408912423164]
Test Case: 445 | Input/Output: [[24.381083805954688 -30] -5.618916194045312]
Test Case: 446 | Input/Output: [[95.61107594850503 -2] 93.61107594850503]
Test Case: 447 | Input/Output: [[-76.21158582099127 87] 10.788414179008726]
Test Case: 448 | Input/Output: [[-95.79726706503011 -81] -176.7972670650301]
Test Case: 449 | Input/Output: [[-42.58242282423596 87] 44.41757717576404]
Test Case: 450 | Input/Output: [[-77.96296228472322 -30] -107.96296228472322]
Test Case: 451 | Input/Output: [[-62.15361460666114 20] -42.15361460666114]
Test Case: 452 | Input/Output: [[15.463923241679751 -68] -52.53607675832025]
Test Case: 453 | Input/Output: [[-96.61852505259812 59] -37.618525052598116]
Test Case: 454 | Input/Output: [[63.998641514507824 -35] 28.998641514507824]
Test Case: 455 | Input/Output: [[-47.65691963492038 -40] -87.65691963492037]
Test Case: 456 | Input/Output: [[-76.82611712615281 -40] -116.82611712615281]
Test Case: 457 | Input/Output: [[-15.182022873225591 35] 19.81797712677441]
Test Case: 458 | Input/Output: [[27.519756150359527 -26] 1.5197561503595267]
Test Case: 459 | Input/Output: [[-37.56511128676845 14] -23.56511128676845]
Test Case: 460 | Input/Output: [[-52.04284651096853 96] 43.95715348903147]
Test Case: 461 | Input/Output: [[98.88223323266641 97] 195.8822332326664]
Test Case: 462 | Input/Output: [[-49.77967773462186 -16] -65.77967773462186]
Test Case: 463 | Input/Output: [[71.08230468429036 -59] 12.082304684290364]
Test Case: 464 | Input/Output: [[10.798460635050304 -69] -58.201539364949696]
Test Case: 465 | Input/Output: [[17.22164237390578 33] 50.22164237390578]
Test Case: 466 | Input/Output: [[-86.80912507245588 22] -64.80912507245588]
Test Case: 467 | Input/Output: [[-44.32101660320471 86] 41.67898339679529]
Test Case: 468 | Input/Output: [[74.86975601794535 -42] 32.86975601794535]
Test Case: 469 | Input/Output: [[-55.959626463570046 48] -7.959626463570046]
Test Case: 470 | Input/Output: [[-70.76645169926026 -53] -123.76645169926026]
Test Case: 471 | Input/Output: [[20.235472290670998 7] 27.235472290670998]
Test Case: 472 | Input/Output: [[-95.6846323806617 -61] -156.6846323806617]
Test Case: 473 | Input/Output: [[42.81866382309701 85] 127.81866382309701]
Test Case: 474 | Input/Output: [[44.97798387853584 -43] 1.977983878535838]
Test Case: 475 | Input/Output: [[82.37689113072324 -4] 78.37689113072324]
Test Case: 476 | Input/Output: [[29.24318135655119 59] 88.24318135655119]
Test Case: 477 | Input/Output: [[74.33933495326289 95] 169.3393349532629]
Test Case: 478 | Input/Output: [[93.11792271344692 -32] 61.117922713446916]
Test Case: 479 | Input/Output: [[65.0168623796209 -32] 33.0168623796209]
Test Case: 480 | Input/Output: [[-48.68813063500526 63] 14.311869364994742]
Test Case: 481 | Input/Output: [[46.4392143933438 -91] -44.5607856066562]
Test Case: 482 | Input/Output: [[90.65387297617056 41] 131.65387297617056]
Test Case: 483 | Input/Output: [[-56.59748867165699 32] -24.59748867165699]
Test Case: 484 | Input/Output: [[-54.08558046686489 -10] -64.08558046686488]
Test Case: 485 | Input/Output: [[83.5935062681285 -30] 53.59350626812849]
Test Case: 486 | Input/Output: [[-50.799841855269065 -46] -96.79984185526907]
Test Case: 487 | Input/Output: [[-99.18127294614368 55] -44.18127294614368]
Test Case: 488 | Input/Output: [[-2.6561845292779225 -65] -67.65618452927792]
Test Case: 489 | Input/Output: [[40.39917727024408 -24] 16.39917727024408]
Test Case: 490 | Input/Output: [[61.51476142882356 -2] 59.51476142882356]
Test Case: 491 | Input/Output: [[75.95350403964571 33] 108.95350403964571]
Test Case: 492 | Input/Output: [[67.90179484249802 -54] 13.90179484249802]
Test Case: 493 | Input/Output: [[-56.781839576729624 -38] -94.78183957672962]
Test Case: 494 | Input/Output: [[38.20583747698967 59] 97.20583747698967]
Test Case: 495 | Input/Output: [[-77.83119814944297 84] 6.168801850557031]
Test Case: 496 | Input/Output: [[15.737965647898534 1] 16.737965647898534]
Test Case: 497 | Input/Output: [[13.401060321392961 51] 64.40106032139296]
Test Case: 498 | Input/Output: [[-55.12871031629432 13] -42.12871031629432]
Test Case: 499 | Input/Output: [[-39.860993649828025 36] -3.860993649828025]
Test Case: 500 | Input/Output: [[-14.276699018826776 -86] -100.27669901882678]
Test Case: 501 | Input/Output: [[-12.361233317588585 -37] -49.361233317588585]
Test Case: 502 | Input/Output: [[-32.57451784941037 54] 21.42548215058963]
Test Case: 503 | Input/Output: [[34.06327106809189 34] 68.0632710680919]
Test Case: 504 | Input/Output: [[71.34540731584741 31] 102.34540731584741]
Test Case: 505 | Input/Output: [[8.53563268410511 -47] -38.46436731589489]
Test Case: 506 | Input/Output: [[15.419025099344253 72] 87.41902509934425]
Test Case: 507 | Input/Output: [[-9.045471571025914 -21] -30.045471571025914]
Test Case: 508 | Input/Output: [[-4.232846793007909 -70] -74.23284679300791]
Test Case: 509 | Input/Output: [[25.849073705875014 -14] 11.849073705875014]
Test Case: 510 | Input/Output: [[35.30011662715037 3] 38.30011662715037]
Test Case: 511 | Input/Output: [[21.095982113054006 1] 22.095982113054006]
Test Case: 512 | Input/Output: [[-53.65937360840605 -49] -102.65937360840604]
Test Case: 513 | Input/Output: [[77.616719105053 -93] -15.383280894947006]
Test Case: 514 | Input/Output: [[-40.35343525560662 -33] -73.35343525560663]
Test Case: 515 | Input/Output: [[11.43641864838898 30] 41.43641864838898]
Test Case: 516 | Input/Output: [[95.8176396699281 68] 163.8176396699281]
Test Case: 517 | Input/Output: [[33.79552793926081 -68] -34.20447206073919]
Test Case: 518 | Input/Output: [[-10.93085381483047 -37] -47.93085381483047]
Test Case: 519 | Input/Output: [[49.2226643836139 -72] -22.777335616386097]
Test Case: 520 | Input/Output: [[71.6361317529543 -24] 47.6361317529543]
Test Case: 521 | Input/Output: [[90.66850043208694 -68] 22.668500432086944]
Test Case: 522 | Input/Output: [[-29.013648682456548 94] 64.98635131754345]
Test Case: 523 | Input/Output: [[-79.94855432534347 -84] -163.94855432534348]
Test Case: 524 | Input/Output: [[-62.53447176369909 79] 16.465528236300912]
Test Case: 525 | Input/Output: [[25.69327971056947 44] 69.69327971056947]
Test Case: 526 | Input/Output: [[81.96391153607419 -12] 69.96391153607419]
Test Case: 527 | Input/Output: [[42.5208883359673 99] 141.5208883359673]
Test Case: 528 | Input/Output: [[54.06769885274636 -96] -41.93230114725364]
Test Case: 529 | Input/Output: [[39.29013222338506 -43] -3.709867776614942]
Test Case: 530 | Input/Output: [[-1.2572702337681392 -15] -16.25727023376814]
Test Case: 531 | Input/Output: [[-38.530959191791524 45] 6.469040808208476]
Test Case: 532 | Input/Output: [[10.706409269800872 36] 46.70640926980087]
Test Case: 533 | Input/Output: [[57.24369767978962 -95] -37.75630232021038]
Test Case: 534 | Input/Output: [[-56.519037090937374 94] 37.480962909062626]
Test Case: 535 | Input/Output: [[-25.724751038427954 22] -3.7247510384279536]
Test Case: 536 | Input/Output: [[-94.50741255397924 3] -91.50741255397924]
Test Case: 537 | Input/Output: [[91.39708688626689 58] 149.3970868862669]
Test Case: 538 | Input/Output: [[-5.379390988790348 98] 92.62060901120965]
Test Case: 539 | Input/Output: [[82.46464547991604 -35] 47.464645479916044]
Test Case: 540 | Input/Output: [[7.4872594688651475 -23] -15.512740531134853]
Test Case: 541 | Input/Output: [[45.95402321541039 24] 69.95402321541039]
Test Case: 542 | Input/Output: [[34.21485956470434 -97] -62.78514043529566]
Test Case: 543 | Input/Output: [[-0.17492116678326397 -58] -58.174921166783264]
Test Case: 544 | Input/Output: [[-48.98510623174632 -18] -66.98510623174633]
Test Case: 545 | Input/Output: [[-44.00701137348095 29] -15.00701137348095]
Test Case: 546 | Input/Output: [[-83.02092393660652 52] -31.020923936606522]
Test Case: 547 | Input/Output: [[85.34256055192154 74] 159.34256055192154]
Test Case: 548 | Input/Output: [[-79.23155521034242 -36] -115.23155521034242]
Test Case: 549 | Input/Output: [[91.13518293845041 48] 139.1351829384504]
Test Case: 550 | Input/Output: [[-66.35912449090637 -26] -92.35912449090637]
Test Case: 551 | Input/Output: [[-66.43178053979848 -20] -86.43178053979848]
Test Case: 552 | Input/Output: [[-48.90940857998349 -94] -142.9094085799835]
Test Case: 553 | Input/Output: [[0.40724716665101823 -61] -60.59275283334898]
Test Case: 554 | Input/Output: [[-54.80630525879284 -51] -105.80630525879283]
Test Case: 555 | Input/Output: [[-36.04165520852878 -37] -73.04165520852878]
Test Case: 556 | Input/Output: [[-97.98959241585902 40] -57.98959241585902]
Test Case: 557 | Input/Output: [[-27.88754504331716 93] 65.11245495668284]
Test Case: 558 | Input/Output: [[0.3703357031098875 30] 30.370335703109888]
Test Case: 559 | Input/Output: [[-19.448604072532262 -84] -103.44860407253226]
Test Case: 560 | Input/Output: [[51.889085132500355 18] 69.88908513250036]
Test Case: 561 | Input/Output: [[71.16149699520912 69] 140.16149699520912]
Test Case: 562 | Input/Output: [[99.9756044839379 -7] 92.9756044839379]
Test Case: 563 | Input/Output: [[77.5999234922169 -36] 41.5999234922169]
Test Case: 564 | Input/Output: [[-24.15390963488339 30] 5.846090365116609]
Test Case: 565 | Input/Output: [[40.03773873977127 2] 42.03773873977127]
Test Case: 566 | Input/Output: [[-16.95419552236308 28] 11.04580447763692]
Test Case: 567 | Input/Output: [[77.27615166270786 17] 94.27615166270786]
Test Case: 568 | Input/Output: [[31.671546375241036 -55] -23.328453624758964]
Test Case: 569 | Input/Output: [[-19.812482125321765 -60] -79.81248212532176]
Test Case: 570 | Input/Output: [[22.47695214415674 -42] -19.52304785584326]
Test Case: 571 | Input/Output: [[-11.669217954577078 94] 82.33078204542292]
Test Case: 572 | Input/Output: [[-43.222681423650286 81] 37.777318576349714]
Test Case: 573 | Input/Output: [[13.734672699115563 -33] -19.265327300884437]
Test Case: 574 | Input/Output: [[-45.13429670803875 53] 7.865703291961253]
Test Case: 575 | Input/Output: [[60.82548110806249 -58] 2.8254811080624904]
Test Case: 576 | Input/Output: [[-64.21015239184592 63] -1.2101523918459236]
Test Case: 577 | Input/Output: [[-45.64935270461665 20] -25.649352704616653]
Test Case: 578 | Input/Output: [[-73.3463159532821 89] 15.653684046717899]
Test Case: 579 | Input/Output: [[-33.370806928582226 -94] -127.37080692858223]
Test Case: 580 | Input/Output: [[13.09376971126008 34] 47.09376971126008]
Test Case: 581 | Input/Output: [[-52.12987459363019 -87] -139.12987459363018]
Test Case: 582 | Input/Output: [[43.6248584150444 -89] -45.3751415849556]
Test Case: 583 | Input/Output: [[-27.546347394855133 1] -26.546347394855133]
Test Case: 584 | Input/Output: [[1.8033469436405767 -2] -0.19665305635942332]
Test Case: 585 | Input/Output: [[-81.28640772965055 -90] -171.28640772965053]
Test Case: 586 | Input/Output: [[60.54864627007291 -82] -21.451353729927092]
Test Case: 587 | Input/Output: [[42.9359286131498 -34] 8.935928613149798]
Test Case: 588 | Input/Output: [[-54.00379713513483 -21] -75.00379713513483]
Test Case: 589 | Input/Output: [[-32.853124683075734 -77] -109.85312468307573]
Test Case: 590 | Input/Output: [[79.39256376397668 -89] -9.607436236023318]
Test Case: 591 | Input/Output: [[10.678838528153207 -30] -19.321161471846793]
Test Case: 592 | Input/Output: [[-24.41837970330735 12] -12.418379703307352]
Test Case: 593 | Input/Output: [[-43.48714179567017 42] -1.4871417956701691]
Test Case: 594 | Input/Output: [[11.856770910846805 78] 89.8567709108468]
Test Case: 595 | Input/Output: [[-56.40516930899962 -21] -77.40516930899962]
Test Case: 596 | Input/Output: [[16.03922612320929 44] 60.03922612320929]
Test Case: 597 | Input/Output: [[8.479900610646496 18] 26.479900610646496]
Test Case: 598 | Input/Output: [[12.591920815123416 -8] 4.591920815123416]
Test Case: 599 | Input/Output: [[-21.387959856878737 89] 67.61204014312126]
Test Case: 600 | Input/Output: [[45.680712287793796 93] 138.6807122877938]
Test Case: 601 | Input/Output: [[44.1968757275491 -7] 37.1968757275491]
Test Case: 602 | Input/Output: [[-82.6423773538752 -62] -144.6423773538752]
Test Case: 603 | Input/Output: [[91.86980143580965 -56] 35.86980143580965]
Test Case: 604 | Input/Output: [[66.01028505840253 53] 119.01028505840253]
Test Case: 605 | Input/Output: [[-34.51262829911852 61] 26.487371700881482]
Test Case: 606 | Input/Output: [[-80.1957842189076 83] 2.8042157810923953]
Test Case: 607 | Input/Output: [[-40.986225703680354 -8] -48.986225703680354]
Test Case: 608 | Input/Output: [[52.70697939172737 1] 53.70697939172737]
Test Case: 609 | Input/Output: [[61.29000089849009 23] 84.29000089849009]
Test Case: 610 | Input/Output: [[-71.29362563784784 0] -71.29362563784784]
Test Case: 611 | Input/Output: [[5.974714297134369 42] 47.97471429713437]
Test Case: 612 | Input/Output: [[-33.72347709180781 -57] -90.72347709180781]
Test Case: 613 | Input/Output: [[-49.97011117551964 61] 11.02988882448036]
Test Case: 614 | Input/Output: [[36.08447137565781 -94] -57.91552862434219]
Test Case: 615 | Input/Output: [[-98.72769047647228 -8] -106.72769047647228]
Test Case: 616 | Input/Output: [[74.32956225805844 5] 79.32956225805844]
Test Case: 617 | Input/Output: [[-15.941718715439464 -87] -102.94171871543946]
Test Case: 618 | Input/Output: [[-78.40855399299971 -11] -89.40855399299971]
Test Case: 619 | Input/Output: [[-2.9096849063799226 -77] -79.90968490637992]
Test Case: 620 | Input/Output: [[-94.70530327891258 -92] -186.7053032789126]
Test Case: 621 | Input/Output: [[-68.29419148392392 70] 1.7058085160760754]
Test Case: 622 | Input/Output: [[-40.2117595402449 -65] -105.2117595402449]
Test Case: 623 | Input/Output: [[-26.896950995168936 66] 39.103049004831064]
Test Case: 624 | Input/Output: [[-75.75655797027272 -59] -134.75655797027272]
Test Case: 625 | Input/Output: [[32.03966990000765 -59] -26.960330099992348]
Test Case: 626 | Input/Output: [[25.837721941891488 -79] -53.16227805810851]
Test Case: 627 | Input/Output: [[-60.782008735612415 16] -44.782008735612415]
Test Case: 628 | Input/Output: [[-32.06063874540645 69] 36.93936125459355]
Test Case: 629 | Input/Output: [[34.78806328283716 -35] -0.21193671716284257]
Test Case: 630 | Input/Output: [[-19.120384620171166 -86] -105.12038462017117]
Test Case: 631 | Input/Output: [[58.23192068542343 94] 152.23192068542343]
Test Case: 632 | Input/Output: [[13.733920566822093 87] 100.73392056682209]
Test Case: 633 | Input/Output: [[-11.46831841169842 50] 38.53168158830158]
Test Case: 634 | Input/Output: [[-90.0265409433459 97] 6.973459056654093]
Test Case: 635 | Input/Output: [[10.36192217081097 -18] -7.638077829189029]
Test Case: 636 | Input/Output: [[16.466841714366765 19] 35.466841714366765]
Test Case: 637 | Input/Output: [[4.216850206873701 -80] -75.7831497931263]
Test Case: 638 | Input/Output: [[11.176317747946584 -73] -61.823682252053416]
Test Case: 639 | Input/Output: [[-21.045683283542502 -72] -93.0456832835425]
Test Case: 640 | Input/Output: [[-89.84810942426678 31] -58.84810942426678]
Test Case: 641 | Input/Output: [[-8.792243566502435 -25] -33.792243566502435]
Test Case: 642 | Input/Output: [[75.61034567357424 -86] -10.389654326425756]
Test Case: 643 | Input/Output: [[66.38510736399147 -20] 46.385107363991466]
Test Case: 644 | Input/Output: [[70.64934430947724 24] 94.64934430947724]
Test Case: 645 | Input/Output: [[-43.363898747643724 -98] -141.36389874764373]
Test Case: 646 | Input/Output: [[-60.56431157872269 -4] -64.56431157872268]
Test Case: 647 | Input/Output: [[9.020093831897185 -44] -34.979906168102815]
Test Case: 648 | Input/Output: [[-33.434526516829436 62] 28.565473483170564]
Test Case: 649 | Input/Output: [[66.36604962999641 -63] 3.366049629996411]
Test Case: 650 | Input/Output: [[10.787020662458417 64] 74.78702066245842]
Test Case: 651 | Input/Output: [[86.15049012957672 79] 165.15049012957672]
Test Case: 652 | Input/Output: [[-94.08469331453304 -43] -137.08469331453304]
Test Case: 653 | Input/Output: [[74.53969260425191 -34] 40.53969260425191]
Test Case: 654 | Input/Output: [[7.831662232246202 8] 15.831662232246202]
Test Case: 655 | Input/Output: [[-97.43845384446288 -70] -167.43845384446288]
Test Case: 656 | Input/Output: [[20.525478562005645 -56] -35.474521437994355]
Test Case: 657 | Input/Output: [[-53.602744077837514 -92] -145.6027440778375]
Test Case: 658 | Input/Output: [[14.260039953710816 61] 75.26003995371082]
Test Case: 659 | Input/Output: [[58.73492371353399 45] 103.73492371353399]
Test Case: 660 | Input/Output: [[-72.43016855288853 -79] -151.43016855288852]
Test Case: 661 | Input/Output: [[-44.79469142183812 -63] -107.79469142183811]
Test Case: 662 | Input/Output: [[-74.7676519434458 68] -6.767651943445799]
Test Case: 663 | Input/Output: [[-28.76180102996517 -87] -115.76180102996517]
Test Case: 664 | Input/Output: [[76.82433875651182 -57] 19.82433875651182]
Test Case: 665 | Input/Output: [[66.1139841817716 -86] -19.8860158182284]
Test Case: 666 | Input/Output: [[16.582567974268358 67] 83.58256797426836]
Test Case: 667 | Input/Output: [[47.89164713644834 94] 141.89164713644834]
Test Case: 668 | Input/Output: [[67.38047329163948 12] 79.38047329163948]
Test Case: 669 | Input/Output: [[-13.315026859628531 -95] -108.31502685962853]
Test Case: 670 | Input/Output: [[-86.63091727563628 90] 3.3690827243637216]
Test Case: 671 | Input/Output: [[66.79811133356901 -68] -1.201888666430989]
Test Case: 672 | Input/Output: [[24.121307800345733 -81] -56.87869219965427]
Test Case: 673 | Input/Output: [[-25.781301754714136 87] 61.218698245285864]
Test Case: 674 | Input/Output: [[-2.2806215340154523 49] 46.71937846598455]
Test Case: 675 | Input/Output: [[30.624276565675416 -63] -32.375723434324584]
Test Case: 676 | Input/Output: [[-0.6664039571415543 -10] -10.666403957141554]
Test Case: 677 | Input/Output: [[23.691347932674844 36] 59.691347932674844]
Test Case: 678 | Input/Output: [[-6.325622435436756 13] 6.674377564563244]
Test Case: 679 | Input/Output: [[80.92205268724243 -83] -2.0779473127575727]
Test Case: 680 | Input/Output: [[-13.551237161584396 60] 46.448762838415604]
Test Case: 681 | Input/Output: [[-92.1507634892123 -29] -121.1507634892123]
Test Case: 682 | Input/Output: [[34.28513519051799 -100] -65.71486480948201]
Test Case: 683 | Input/Output: [[-70.20495992136006 -39] -109.20495992136006]
Test Case: 684 | Input/Output: [[-39.21952866128593 -36] -75.21952866128592]
Test Case: 685 | Input/Output: [[-74.56180716193607 -62] -136.5618071619361]
Test Case: 686 | Input/Output: [[2.437973284766585 -34] -31.562026715233415]
Test Case: 687 | Input/Output: [[-52.15404345041592 33] -19.15404345041592]
Test Case: 688 | Input/Output: [[7.745162962495627 -85] -77.25483703750437]
Test Case: 689 | Input/Output: [[62.765601769217255 66] 128.76560176921726]
Test Case: 690 | Input/Output: [[-67.80882915924131 -7] -74.80882915924131]
Test Case: 691 | Input/Output: [[-88.11814692232709 28] -60.118146922327085]
Test Case: 692 | Input/Output: [[-65.2557244162688 -1] -66.2557244162688]
Test Case: 693 | Input/Output: [[-60.31441417015901 -15] -75.31441417015901]
Test Case: 694 | Input/Output: [[-18.254260164209413 -84] -102.25426016420941]
Test Case: 695 | Input/Output: [[32.346709333946364 -34] -1.6532906660536355]
Test Case: 696 | Input/Output: [[-62.34672066021296 -41] -103.34672066021295]
Test Case: 697 | Input/Output: [[15.087169823827693 -17] -1.9128301761723066]
Test Case: 698 | Input/Output: [[68.06452419365547 61] 129.06452419365547]
Test Case: 699 | Input/Output: [[25.067013500348722 57] 82.06701350034872]
Test Case: 700 | Input/Output: [[7.0180690858353785 36] 43.01806908583538]
Test Case: 701 | Input/Output: [[-33.93308547133729 19] -14.933085471337293]
Test Case: 702 | Input/Output: [[69.05212139710451 42] 111.05212139710451]
Test Case: 703 | Input/Output: [[-28.74125154600931 0] -28.74125154600931]
Test Case: 704 | Input/Output: [[22.54337205757166 -69] -46.45662794242834]
Test Case: 705 | Input/Output: [[73.11526255351322 -85] -11.884737446486781]
Test Case: 706 | Input/Output: [[39.89421929679261 11] 50.89421929679261]
Test Case: 707 | Input/Output: [[-73.07800211889148 -56] -129.07800211889148]
Test Case: 708 | Input/Output: [[55.628009360602846 67] 122.62800936060285]
Test Case: 709 | Input/Output: [[1.091104917076109 -53] -51.90889508292389]
Test Case: 710 | Input/Output: [[82.26609756481895 -55] 27.26609756481895]
Test Case: 711 | Input/Output: [[22.894358588137237 56] 78.89435858813724]
Test Case: 712 | Input/Output: [[-21.476345842804704 82] 60.523654157195296]
Test Case: 713 | Input/Output: [[41.77861959833294 -93] -51.22138040166706]
Test Case: 714 | Input/Output: [[32.46679806505358 2] 34.46679806505358]
Test Case: 715 | Input/Output: [[-43.2655832493364 -39] -82.2655832493364]
Test Case: 716 | Input/Output: [[-58.78596090872297 -48] -106.78596090872297]
Test Case: 717 | Input/Output: [[84.84408170820578 -88] -3.1559182917942223]
Test Case: 718 | Input/Output: [[-63.66786323866273 10] -53.66786323866273]
Test Case: 719 | Input/Output: [[97.33170228112112 -28] 69.33170228112112]
Test Case: 720 | Input/Output: [[57.225257757247704 21] 78.2252577572477]
Test Case: 721 | Input/Output: [[26.647898902245743 -42] -15.352101097754257]
Test Case: 722 | Input/Output: [[-58.462324919162256 60] 1.5376750808377437]
Test Case: 723 | Input/Output: [[91.02539558114788 38] 129.02539558114788]
Test Case: 724 | Input/Output: [[12.471917054590477 76] 88.47191705459048]
Test Case: 725 | Input/Output: [[96.26448510103006 -4] 92.26448510103006]
Test Case: 726 | Input/Output: [[6.724956970378912 8] 14.724956970378912]
Test Case: 727 | Input/Output: [[21.42641181133729 0] 21.42641181133729]
Test Case: 728 | Input/Output: [[-82.070802276564 -56] -138.070802276564]
Test Case: 729 | Input/Output: [[66.77603151082934 -9] 57.77603151082934]
Test Case: 730 | Input/Output: [[-96.13837900006781 71] -25.138379000067815]
Test Case: 731 | Input/Output: [[24.912278202032013 14] 38.91227820203201]
Test Case: 732 | Input/Output: [[-82.59023607020791 -76] -158.5902360702079]
Test Case: 733 | Input/Output: [[-79.49755732297605 1] -78.49755732297605]
Test Case: 734 | Input/Output: [[81.60059520406247 -85] -3.399404795937528]
Test Case: 735 | Input/Output: [[-76.3780345964967 93] 16.621965403503296]
Test Case: 736 | Input/Output: [[-39.13874464470861 1] -38.13874464470861]
Test Case: 737 | Input/Output: [[-25.502333591061927 -92] -117.50233359106193]
Test Case: 738 | Input/Output: [[-47.74181410881 -52] -99.74181410880999]
Test Case: 739 | Input/Output: [[68.73977026811576 60] 128.73977026811576]
Test Case: 740 | Input/Output: [[-46.67206282159129 5] -41.67206282159129]
Test Case: 741 | Input/Output: [[12.993600473160356 57] 69.99360047316036]
Test Case: 742 | Input/Output: [[46.176012087060656 9] 55.176012087060656]
Test Case: 743 | Input/Output: [[-68.4703302735615 88] 19.5296697264385]
Test Case: 744 | Input/Output: [[32.856950613815144 -74] -41.143049386184856]
Test Case: 745 | Input/Output: [[7.495226182092068 61] 68.49522618209207]
Test Case: 746 | Input/Output: [[91.33631205776445 -72] 19.336312057764445]
Test Case: 747 | Input/Output: [[-32.64610377458416 87] 54.35389622541584]
Test Case: 748 | Input/Output: [[58.28967782392823 -32] 26.28967782392823]
Test Case: 749 | Input/Output: [[-82.33276334240963 -75] -157.33276334240963]
Test Case: 750 | Input/Output: [[90.1221891851807 -9] 81.1221891851807]
Test Case: 751 | Input/Output: [[-10.38717434964876 -98] -108.38717434964876]
Test Case: 752 | Input/Output: [[84.24361249805804 36] 120.24361249805804]
Test Case: 753 | Input/Output: [[97.13387546292114 88] 185.13387546292114]
Test Case: 754 | Input/Output: [[29.911587192121175 55] 84.91158719212117]
Test Case: 755 | Input/Output: [[-92.43452398171415 19] -73.43452398171415]
Test Case: 756 | Input/Output: [[0.0513898667834809 -31] -30.94861013321652]
Test Case: 757 | Input/Output: [[-59.42404845884499 -86] -145.424048458845]
Test Case: 758 | Input/Output: [[72.57984558522546 -90] -17.420154414774544]
Test Case: 759 | Input/Output: [[45.7679928890916 66] 111.7679928890916]
Test Case: 760 | Input/Output: [[-0.7366286630258827 40] 39.26337133697412]
Test Case: 761 | Input/Output: [[34.24580324334113 -5] 29.24580324334113]
Test Case: 762 | Input/Output: [[86.41469403322046 -2] 84.41469403322046]
Test Case: 763 | Input/Output: [[-4.421326280626545 45] 40.578673719373455]
Test Case: 764 | Input/Output: [[79.42568084743533 -1] 78.42568084743533]
Test Case: 765 | Input/Output: [[21.648387129695053 -3] 18.648387129695053]
Test Case: 766 | Input/Output: [[51.312935136094836 98] 149.31293513609484]
Test Case: 767 | Input/Output: [[47.45882101012094 37] 84.45882101012094]
Test Case: 768 | Input/Output: [[57.758387526697135 29] 86.75838752669713]
Test Case: 769 | Input/Output: [[15.398766310992599 -46] -30.6012336890074]
Test Case: 770 | Input/Output: [[66.42273777861848 64] 130.42273777861848]
Test Case: 771 | Input/Output: [[-91.31479157345484 42] -49.31479157345484]
Test Case: 772 | Input/Output: [[-12.637222033575824 -7] -19.637222033575824]
Test Case: 773 | Input/Output: [[60.85292595273859 19] 79.85292595273859]
Test Case: 774 | Input/Output: [[6.08670553603055 84] 90.08670553603055]
Test Case: 775 | Input/Output: [[-99.55932716907955 94] -5.559327169079552]
Test Case: 776 | Input/Output: [[91.81302560986711 42] 133.8130256098671]
Test Case: 777 | Input/Output: [[-54.06985369150463 -29] -83.06985369150463]
Test Case: 778 | Input/Output: [[4.635051560152206 88] 92.6350515601522]
Test Case: 779 | Input/Output: [[20.845969626038 -2] 18.845969626038]
Test Case: 780 | Input/Output: [[10.699425661290178 -70] -59.30057433870982]
Test Case: 781 | Input/Output: [[48.5849093844206 -72] -23.415090615579402]
Test Case: 782 | Input/Output: [[12.259110123773382 -84] -71.74088987622662]
Test Case: 783 | Input/Output: [[-96.4238409839901 89] -7.423840983990104]
Test Case: 784 | Input/Output: [[-23.305401665520733 34] 10.694598334479267]
Test Case: 785 | Input/Output: [[34.97624738677305 92] 126.97624738677305]
Test Case: 786 | Input/Output: [[43.500139726870884 -42] 1.5001397268708843]
Test Case: 787 | Input/Output: [[-68.25292305050658 -20] -88.25292305050658]
Test Case: 788 | Input/Output: [[37.97910748142462 75] 112.97910748142462]
Test Case: 789 | Input/Output: [[-99.07046990631636 -44] -143.07046990631636]
Test Case: 790 | Input/Output: [[63.061764671289524 62] 125.06176467128952]
Test Case: 791 | Input/Output: [[-59.87260303492066 39] -20.872603034920658]
Test Case: 792 | Input/Output: [[-31.980348484789786 90] 58.019651515210214]
Test Case: 793 | Input/Output: [[49.439447742696785 71] 120.43944774269679]
Test Case: 794 | Input/Output: [[40.097217634114145 -87] -46.902782365885855]
Test Case: 795 | Input/Output: [[98.98807358744224 76] 174.98807358744224]
Test Case: 796 | Input/Output: [[-55.730213714453704 4] -51.730213714453704]
Test Case: 797 | Input/Output: [[46.76906376242417 42] 88.76906376242417]
Test Case: 798 | Input/Output: [[13.385125639392271 -34] -20.61487436060773]
Test Case: 799 | Input/Output: [[-36.52581810724651 -29] -65.52581810724651]
Test Case: 800 | Input/Output: [[86.47109998940957 72] 158.47109998940957]
Test Case: 801 | Input/Output: [[88.78524627603645 -42] 46.785246276036446]
Test Case: 802 | Input/Output: [[15.311500216259219 97] 112.31150021625922]
Test Case: 803 | Input/Output: [[21.391391782472596 -98] -76.6086082175274]
Test Case: 804 | Input/Output: [[8.663846163643669 78] 86.66384616364367]
Test Case: 805 | Input/Output: [[-57.961549440002955 -48] -105.96154944000295]
Test Case: 806 | Input/Output: [[51.41333089036323 70] 121.41333089036323]
Test Case: 807 | Input/Output: [[-73.9031615012828 -49] -122.9031615012828]
Test Case: 808 | Input/Output: [[0.9281313635453472 20] 20.928131363545347]
Test Case: 809 | Input/Output: [[22.36216324980819 59] 81.36216324980819]
Test Case: 810 | Input/Output: [[40.129241941911175 -33] 7.129241941911175]
Test Case: 811 | Input/Output: [[66.52711506336621 -67] -0.4728849366337897]
Test Case: 812 | Input/Output: [[93.16995923378639 -79] 14.169959233786386]
Test Case: 813 | Input/Output: [[55.53149228598144 -22] 33.53149228598144]
Test Case: 814 | Input/Output: [[-36.185000974181406 74] 37.814999025818594]
Test Case: 815 | Input/Output: [[-13.523839699465782 -37] -50.52383969946578]
Test Case: 816 | Input/Output: [[-26.216921127439008 -3] -29.216921127439008]
Test Case: 817 | Input/Output: [[-53.10897198758209 73] 19.891028012417912]
Test Case: 818 | Input/Output: [[-63.543430248124565 14] -49.543430248124565]
Test Case: 819 | Input/Output: [[-80.03663323726687 -35] -115.03663323726687]
Test Case: 820 | Input/Output: [[-43.15444943031919 -64] -107.15444943031919]
Test Case: 821 | Input/Output: [[41.2767010228869 84] 125.2767010228869]
Test Case: 822 | Input/Output: [[2.4691926068057626 26] 28.469192606805763]
Test Case: 823 | Input/Output: [[-42.89218379045088 53] 10.10781620954912]
Test Case: 824 | Input/Output: [[77.29173753765429 -9] 68.29173753765429]
Test Case: 825 | Input/Output: [[81.4129031489262 -97] -15.587096851073795]
Test Case: 826 | Input/Output: [[22.342381528594316 24] 46.342381528594316]
Test Case: 827 | Input/Output: [[-8.61342205176689 -50] -58.61342205176689]
Test Case: 828 | Input/Output: [[-56.277914057905456 88] 31.722085942094544]
Test Case: 829 | Input/Output: [[98.76555899501884 -17] 81.76555899501884]
Test Case: 830 | Input/Output: [[1.9377675382793456 88] 89.93776753827935]
Test Case: 831 | Input/Output: [[-3.358334879897896 62] 58.641665120102104]
Test Case: 832 | Input/Output: [[-87.00499180317065 72] -15.004991803170654]
Test Case: 833 | Input/Output: [[-30.104828904692482 -61] -91.10482890469248]
Test Case: 834 | Input/Output: [[25.19231179502222 78] 103.19231179502222]
Test Case: 835 | Input/Output: [[19.01009267591533 -33] -13.989907324084669]
Test Case: 836 | Input/Output: [[-87.96064992219787 -68] -155.9606499221979]
Test Case: 837 | Input/Output: [[76.81438079605522 8] 84.81438079605522]
Test Case: 838 | Input/Output: [[53.83292805980889 61] 114.83292805980889]
Test Case: 839 | Input/Output: [[38.38921564740869 44] 82.38921564740869]
Test Case: 840 | Input/Output: [[-22.38036485170987 41] 18.61963514829013]
Test Case: 841 | Input/Output: [[-47.14489283710952 49] 1.8551071628904765]
Test Case: 842 | Input/Output: [[2.496804955059531 36] 38.49680495505953]
Test Case: 843 | Input/Output: [[19.9550151546472 -16] 3.9550151546471994]
Test Case: 844 | Input/Output: [[32.73715205784933 77] 109.73715205784933]
Test Case: 845 | Input/Output: [[93.4491641287947 -2] 91.4491641287947]
Test Case: 846 | Input/Output: [[-63.48383725492985 27] -36.48383725492985]
Test Case: 847 | Input/Output: [[76.57377756490231 -14] 62.573777564902315]
Test Case: 848 | Input/Output: [[95.08275075917214 -70] 25.082750759172143]
Test Case: 849 | Input/Output: [[-55.682902710521965 -86] -141.68290271052197]
Test Case: 850 | Input/Output: [[68.66170797176031 72] 140.6617079717603]
Test Case: 851 | Input/Output: [[99.97474235525095 40] 139.97474235525095]
Test Case: 852 | Input/Output: [[-6.939730556668081 1] -5.939730556668081]
Test Case: 853 | Input/Output: [[72.11613162769174 97] 169.11613162769174]
Test Case: 854 | Input/Output: [[-36.52047487054715 81] 44.47952512945285]
Test Case: 855 | Input/Output: [[2.6379943865848787 6] 8.637994386584879]
Test Case: 856 | Input/Output: [[-31.055321478388052 -100] -131.05532147838807]
Test Case: 857 | Input/Output: [[1.7578448641531281 81] 82.75784486415313]
Test Case: 858 | Input/Output: [[14.936705298328846 0] 14.936705298328846]
Test Case: 859 | Input/Output: [[11.730973811222569 -16] -4.269026188777431]
Test Case: 860 | Input/Output: [[-18.852691349307023 -22] -40.85269134930702]
Test Case: 861 | Input/Output: [[53.722171451541044 4] 57.722171451541044]
Test Case: 862 | Input/Output: [[-17.579247627497608 -50] -67.57924762749761]
Test Case: 863 | Input/Output: [[-72.76238183648356 80] 7.237618163516444]
Test Case: 864 | Input/Output: [[-39.9996320248019 -65] -104.9996320248019]
Test Case: 865 | Input/Output: [[-72.46480864654335 68] -4.4648086465433465]
Test Case: 866 | Input/Output: [[76.41536753532833 -46] 30.41536753532833]
Test Case: 867 | Input/Output: [[71.99000228130711 15] 86.99000228130711]
Test Case: 868 | Input/Output: [[-71.88088963150925 26] -45.88088963150925]
Test Case: 869 | Input/Output: [[76.3657437877865 -39] 37.3657437877865]
Test Case: 870 | Input/Output: [[38.09079926795545 -3] 35.09079926795545]
Test Case: 871 | Input/Output: [[-71.53452405127013 65] -6.534524051270125]
Test Case: 872 | Input/Output: [[47.17518876143296 -94] -46.82481123856704]
Test Case: 873 | Input/Output: [[-48.835686923220976 -90] -138.83568692322098]
Test Case: 874 | Input/Output: [[-33.493404308855546 0] -33.493404308855546]
Test Case: 875 | Input/Output: [[1.3161772708453015 23] 24.3161772708453]
Test Case: 876 | Input/Output: [[60.101283230334076 -73] -12.898716769665924]
Test Case: 877 | Input/Output: [[86.2868214380886 -88] -1.7131785619114055]
Test Case: 878 | Input/Output: [[84.27206423404931 99] 183.2720642340493]
Test Case: 879 | Input/Output: [[-88.71032169775832 -13] -101.71032169775832]
Test Case: 880 | Input/Output: [[66.87903078764646 -29] 37.87903078764646]
Test Case: 881 | Input/Output: [[-27.65242630362421 -12] -39.65242630362421]
Test Case: 882 | Input/Output: [[-91.83610922323061 56] -35.83610922323061]
Test Case: 883 | Input/Output: [[17.863625688199306 -65] -47.136374311800694]
Test Case: 884 | Input/Output: [[-24.389801941085068 -59] -83.38980194108507]
Test Case: 885 | Input/Output: [[77.19578816781191 -11] 66.19578816781191]
Test Case: 886 | Input/Output: [[-14.683039237231881 -61] -75.68303923723188]
Test Case: 887 | Input/Output: [[32.0657834064165 -79] -46.9342165935835]
Test Case: 888 | Input/Output: [[13.029181220697978 85] 98.02918122069798]
Test Case: 889 | Input/Output: [[-81.3780440317785 3] -78.3780440317785]
Test Case: 890 | Input/Output: [[-27.881056093986572 -17] -44.88105609398657]
Test Case: 891 | Input/Output: [[11.967695618190248 80] 91.96769561819025]
Test Case: 892 | Input/Output: [[73.54905681603191 -22] 51.54905681603191]
Test Case: 893 | Input/Output: [[81.05320949031827 37] 118.05320949031827]
Test Case: 894 | Input/Output: [[-85.96892393368853 18] -67.96892393368853]
Test Case: 895 | Input/Output: [[18.559336321388315 -100] -81.44066367861168]
Test Case: 896 | Input/Output: [[64.37760695478019 -24] 40.37760695478019]
Test Case: 897 | Input/Output: [[16.900251517527607 7] 23.900251517527607]
Test Case: 898 | Input/Output: [[33.37144588819507 -20] 13.371445888195069]
Test Case: 899 | Input/Output: [[-9.884021886097756 84] 74.11597811390224]
Test Case: 900 | Input/Output: [[2.910771754771531 77] 79.91077175477153]
Test Case: 901 | Input/Output: [[-43.74704676539234 88] 44.25295323460766]
Test Case: 902 | Input/Output: [[-65.05620313772012 -100] -165.0562031377201]
Test Case: 903 | Input/Output: [[30.139144021872994 55] 85.139144021873]
Test Case: 904 | Input/Output: [[73.44174562237299 89] 162.441745622373]
Test Case: 905 | Input/Output: [[-12.652973833991624 -91] -103.65297383399162]
Test Case: 906 | Input/Output: [[62.316633208598006 72] 134.316633208598]
Test Case: 907 | Input/Output: [[38.98975030748102 66] 104.98975030748102]
Test Case: 908 | Input/Output: [[-75.6212300842235 -20] -95.6212300842235]
Test Case: 909 | Input/Output: [[3.8356314054716734 -74] -70.16436859452833]
Test Case: 910 | Input/Output: [[-36.4399190710867 86] 49.5600809289133]
Test Case: 911 | Input/Output: [[19.116064742717185 -22] -2.8839352572828147]
Test Case: 912 | Input/Output: [[99.28562806832701 -59] 40.285628068327014]
Test Case: 913 | Input/Output: [[4.385572298627821 9] 13.385572298627821]
Test Case: 914 | Input/Output: [[46.990278131591054 89] 135.99027813159105]
Test Case: 915 | Input/Output: [[23.03070852981068 79] 102.03070852981068]
Test Case: 916 | Input/Output: [[-48.14023992350356 -96] -144.14023992350354]
Test Case: 917 | Input/Output: [[-21.15899177305336 -2] -23.15899177305336]
Test Case: 918 | Input/Output: [[-54.651175518858786 -61] -115.65117551885879]
Test Case: 919 | Input/Output: [[-76.08995412011224 5] -71.08995412011224]
Test Case: 920 | Input/Output: [[-9.03057339812625 -65] -74.03057339812625]
Test Case: 921 | Input/Output: [[-59.393335964866736 -54] -113.39333596486674]
Test Case: 922 | Input/Output: [[49.96705040039856 -54] -4.032949599601437]
Test Case: 923 | Input/Output: [[-92.13883926292634 -51] -143.13883926292635]
Test Case: 924 | Input/Output: [[-16.422832499560343 -21] -37.42283249956034]
Test Case: 925 | Input/Output: [[61.7471884691702 -96] -34.2528115308298]
Test Case: 926 | Input/Output: [[11.820728152270291 -60] -48.17927184772971]
Test Case: 927 | Input/Output: [[-53.185078787151795 20] -33.185078787151795]
Test Case: 928 | Input/Output: [[-71.51490411446626 -23] -94.51490411446626]
Test Case: 929 | Input/Output: [[-73.80651403180569 93] 19.19348596819431]
Test Case: 930 | Input/Output: [[79.71237952299984 -54] 25.71237952299984]
Test Case: 931 | Input/Output: [[66.64770698485492 -41] 25.64770698485492]
Test Case: 932 | Input/Output: [[-53.237478930021844 -50] -103.23747893002184]
Test Case: 933 | Input/Output: [[-80.54233599701537 -40] -120.54233599701537]
Test Case: 934 | Input/Output: [[62.175035962015784 40] 102.17503596201578]
Test Case: 935 | Input/Output: [[-99.49578603377978 -96] -195.49578603377978]
Test Case: 936 | Input/Output: [[-67.51321988898471 88] 20.486780111015293]
Test Case: 937 | Input/Output: [[33.84875002917923 -33] 0.8487500291792287]
Test Case: 938 | Input/Output: [[30.858201772171725 -95] -64.14179822782828]
Test Case: 939 | Input/Output: [[-36.82923443094137 -1] -37.82923443094137]
Test Case: 940 | Input/Output: [[-28.05139015292724 41] 12.94860984707276]
Test Case: 941 | Input/Output: [[38.02335545925402 -12] 26.02335545925402]
Test Case: 942 | Input/Output: [[36.12736273912452 -50] -13.872637260875479]
Test Case: 943 | Input/Output: [[-36.73648068844633 -85] -121.73648068844633]
Test Case: 944 | Input/Output: [[35.611962297978636 -89] -53.388037702021364]
Test Case: 945 | Input/Output: [[33.03570734204183 -46] -12.964292657958168]
Test Case: 946 | Input/Output: [[-48.552216442970874 -30] -78.55221644297087]
Test Case: 947 | Input/Output: [[90.68435001448503 -82] 8.684350014485034]
Test Case: 948 | Input/Output: [[93.23730997184128 17] 110.23730997184128]
Test Case: 949 | Input/Output: [[-79.97189950507008 38] -41.971899505070084]
Test Case: 950 | Input/Output: [[13.87954063916456 -49] -35.12045936083544]
Test Case: 951 | Input/Output: [[73.68651406426571 37] 110.68651406426571]
Test Case: 952 | Input/Output: [[-81.84067602776817 -34] -115.84067602776817]
Test Case: 953 | Input/Output: [[39.390418078561595 -31] 8.390418078561595]
Test Case: 954 | Input/Output: [[24.600147732899174 52] 76.60014773289917]
Test Case: 955 | Input/Output: [[-85.48347779548243 43] -42.48347779548243]
Test Case: 956 | Input/Output: [[91.92525336981325 41] 132.92525336981325]
Test Case: 957 | Input/Output: [[-88.13905107071929 62] -26.13905107071929]
Test Case: 958 | Input/Output: [[95.9639940047108 61] 156.9639940047108]
Test Case: 959 | Input/Output: [[-75.5867107921841 7] -68.5867107921841]
Test Case: 960 | Input/Output: [[32.47956091629166 -50] -17.52043908370834]
Test Case: 961 | Input/Output: [[56.48750594254588 59] 115.48750594254588]
Test Case: 962 | Input/Output: [[6.316944721269735 9] 15.316944721269735]
Test Case: 963 | Input/Output: [[-12.113202725301647 -24] -36.11320272530165]
Test Case: 964 | Input/Output: [[86.50256340062506 -87] -0.4974365993749359]
Test Case: 965 | Input/Output: [[-37.374715434620676 24] -13.374715434620676]
Test Case: 966 | Input/Output: [[51.395471302406605 16] 67.3954713024066]
Test Case: 967 | Input/Output: [[-41.93946059750928 85] 43.06053940249072]
Test Case: 968 | Input/Output: [[67.12675146433486 -32] 35.12675146433486]
Test Case: 969 | Input/Output: [[64.00996513351694 -93] -28.990034866483057]
Test Case: 970 | Input/Output: [[-23.876311765868152 -7] -30.876311765868152]
Test Case: 971 | Input/Output: [[3.7005721487607843 -35] -31.299427851239216]
Test Case: 972 | Input/Output: [[68.84473899813409 -74] -5.1552610018659095]
Test Case: 973 | Input/Output: [[35.57179076374911 -58] -22.428209236250893]
Test Case: 974 | Input/Output: [[80.54961196865779 90] 170.54961196865779]
Test Case: 975 | Input/Output: [[30.086723962817928 -62] -31.913276037182072]
Test Case: 976 | Input/Output: [[78.76853241067064 3] 81.76853241067064]
Test Case: 977 | Input/Output: [[-3.2616249330624356 -1] -4.261624933062436]
Test Case: 978 | Input/Output: [[-93.46298517559832 80] -13.46298517559832]
Test Case: 979 | Input/Output: [[-94.0113555401481 67] -27.011355540148102]
Test Case: 980 | Input/Output: [[93.45315210211837 36] 129.45315210211837]
Test Case: 981 | Input/Output: [[40.848887139157455 51] 91.84888713915745]
Test Case: 982 | Input/Output: [[69.27747848425864 0] 69.27747848425864]
Test Case: 983 | Input/Output: [[25.588943541997054 45] 70.58894354199705]
Test Case: 984 | Input/Output: [[19.044908333828687 75] 94.04490833382869]
Test Case: 985 | Input/Output: [[60.31186834448036 34] 94.31186834448036]
Test Case: 986 | Input/Output: [[8.236553303386657 -9] -0.7634466966133431]
Test Case: 987 | Input/Output: [[-43.599704857587795 100] 56.400295142412205]
Test Case: 988 | Input/Output: [[27.24943950393626 20] 47.24943950393626]
Test Case: 989 | Input/Output: [[-96.1026396967886 -73] -169.1026396967886]
Test Case: 990 | Input/Output: [[24.812658102920977 -22] 2.8126581029209774]
Test Case: 991 | Input/Output: [[-22.94522246231938 81] 58.05477753768062]
Test Case: 992 | Input/Output: [[0.9634395755520444 84] 84.96343957555204]
Test Case: 993 | Input/Output: [[-17.65636907496922 84] 66.34363092503078]
Test Case: 994 | Input/Output: [[5.566590549578791 3] 8.566590549578791]
Test Case: 995 | Input/Output: [[-66.97727014231435 -5] -71.97727014231435]
Test Case: 996 | Input/Output: [[-48.364631963712476 90] 41.635368036287524]
Test Case: 997 | Input/Output: [[86.25895921397074 -86] 0.2589592139707406]
Test Case: 998 | Input/Output: [[-83.42841814078525 99] 15.571581859214746]
Test Case: 999 | Input/Output: [[-76.83119611497972 -13] -89.83119611497972]
;;******************************
Registered instructions: #{code_atom genome_uniform_tag_mutation code_car print_newline integer_sub integer_inc boolean_stackdepth return_exec_pop zip_dup_items integer_tag_string_instruction vector_integer_eq autoconstructive_integer_rand boolean_pop genome_close_inc string_fromchar vector_string_shove zip_yankdup genome_new genome_gene_genome_instruction vector_float_yankdup exec_yankdup vector_integer_shove integer_yankdup string_flush boolean_swap zip_empty exec_shove vector_boolean_yank code_eq exec_y boolean_yank integer_eq genome_silence string_butlast code_contains string_conjchar code_do*count vector_float_last genome_uniform_instruction_mutation genome_pop string_substring integer_mult vector_string_dup_times code_length vector_integer_dup boolean_or code_position boolean_empty zip_fromcode print_vector_string vector_boolean_swap return_frominteger char_dup_items vector_float_pushall return_genome_pop genome_gene_close char_iswhitespace code_cdr exec_do*vector_integer integer_rand vector_string_replacefirst string_first vector_boolean_first exec_do*while exec_string_iterate string_indexofchar vector_float_replace integer_fromstring code_list code_swap char_frominteger genome_gene_randomize vector_integer_emptyvector vector_string_eq exec_dup_items vector_float_butlast boolean_dup_items genome_uniform_string_mutation exec_empty zip_end? exec_fromzipnode string_shove vector_boolean_pushall zip_insert_left_fromcode exec_rot integer_tag_integer_instruction vector_string_concat vector_float_indexof genome_instruction_eq code_pop vector_string_subvec vector_integer_swap code_subst char_pop return_string_pop zip_yank exec_dup vector_integer_butlast vector_float_rest vector_string_flush boolean_fromfloat code_fromziprights float_sin boolean_flush char_isdigit float_lte exec_fromziproot vector_integer_empty print_code vector_string_stackdepth string_reverse exec_k vector_integer_yank float_frominteger char_rot vector_integer_dup_times print_char integer_tag_boolean_instruction vector_integer_stackdepth vector_boolean_concat boolean_xor integer_gte genome_yankdup vector_float_shove vector_integer_take boolean_dup_times code_quote string_replacefirst return_fromstring exec_fromziplefts vector_integer_yankdup boolean_shove float_lt vector_string_dup vector_string_occurrencesof vector_integer_replace zip_branch? vector_float_reverse float_mod vector_float_subvec integer_tag_code_instruction string_last print_boolean boolean_rot vector_string_rest integer_div vector_float_remove integer_tag_exec_instruction integer_fromfloat integer_lte code_fromzipchildren environment_end vector_integer_rot integer_mod string_concat vector_string_butlast genome_swap code_null exec_do*count vector_float_emptyvector vector_string_yankdup integer_tag_float_instruction integer_rot float_yankdup vector_string_rot zip_replace_fromexec genome_uniform_boolean_mutation vector_string_take vector_float_dup_items integer_add vector_integer_occurrencesof integer_shove string_dup_times genome_dup return_code_pop char_swap integer_max return_fromexec code_wrap genome_genesis return_float_pop code_flush genome_yank zip_shove vector_integer_flush vector_integer_subvec vector_boolean_indexof vector_float_pop char_dup_times genome_uniform_silence_mutation genome_uniform_crossover vector_string_remove vector_integer_contains zip_remove code_append vector_float_eq vector_integer_conj string_eq zip_leftmost code_yankdup code_rot integer_stackdepth float_max vector_boolean_set zip_append_child_fromexec zip_next vector_float_conj zip_fromexec code_dup_times float_dup_items string_take zip_left genome_if_gene_genome_instruction zip_replace_fromcode char_stackdepth return_fromchar genome_eq vector_integer_replacefirst float_stackdepth code_fromziproot integer_dup_times float_fromchar genome_uniform_combination_and_deletion float_gt boolean_dup float_fromboolean code_fromzipnode genome_rot vector_float_replacefirst vector_boolean_conj exec_dup_times vector_boolean_dup vector_integer_indexof vector_string_swap exec_eq string_emptystring string_swap integer_yank exec_while float_empty print_vector_boolean integer_min exec_swap genome_rotate integer_fromchar vector_string_yank string_stackdepth code_do*range string_replacechar char_allfromstring vector_integer_rest vector_boolean_length char_yank vector_float_empty code_fromfloat genome_parent2 return_fromcode string_pop code_dup_items float_eq integer_untag_instruction integer_dup_items vector_boolean_empty zip_insert_child_fromexec vector_string_last string_nth code_do* return_zip_pop vector_string_pop zip_rot vector_integer_nth exec_do*range vector_integer_dup_items exec_if char_shove zip_down zip_insert_left_fromexec code_frominteger vector_boolean_remove vector_integer_remove boolean_invert_first_then_and genome_flush print_string integer_fromboolean char_yankdup code_do vector_string_first boolean_frominteger string_setchar vector_integer_last char_isletter genome_gene_dup vector_integer_concat return_fromzip print_integer genome_uniform_float_mutation code_map boolean_eq float_gte return_fromfloat genome_gene_copy string_occurrencesofchar string_replacefirstchar print_float boolean_rand integer_flush float_shove string_replace char_dup float_pop char_eq vector_float_nth vector_string_conj integer_gt vector_float_dup_times return_integer_pop genome_gene_replace float_sub vector_integer_length vector_float_set vector_string_indexof vector_boolean_rest code_dup vector_boolean_shove zip_eq float_min boolean_not float_mult float_fromstring genome_unsilence code_if vector_boolean_dup_items vector_integer_pop vector_boolean_last exec_do*times zip_pop genome_gene_silent zip_rightmost float_dec vector_float_contains genome_gene_copy_range environment_new exec_do*vector_string code_nthcdr string_empty char_empty exec_pop vector_integer_set autoconstructive_boolean_rand genome_uniform_addition_and_deletion vector_float_rot string_yankdup exec_do*vector_float string_removechar code_extract vector_string_replace vector_float_first genome_parent1 return_tagspace char_flush genome_uniform_integer_mutation vector_float_occurrencesof vector_string_emptyvector float_add code_stackdepth exec_s zip_insert_right_fromexec float_dup integer_tag_char_instruction vector_string_nth zip_stackdepth vector_integer_reverse print_vector_integer char_fromfloat code_do*times code_noop zip_swap code_yank integer_lt vector_boolean_eq genome_stackdepth code_fromziplefts noop_open_paren genome_uniform_deletion vector_boolean_dup_times string_containschar string_yank char_rand zip_flush vector_boolean_rot float_swap exec_fromziprights vector_string_pushall vector_string_set vector_boolean_flush return_fromgenome exec_noop code_size vector_boolean_stackdepth vector_integer_pushall vector_boolean_reverse integer_swap string_split vector_boolean_contains string_fromboolean return_boolean_pop vector_float_dup vector_boolean_replace vector_string_dup_items integer_dup vector_boolean_nth vector_string_length genome_uniform_addition string_rest zip_insert_child_fromcode float_tan string_rot string_rand exec_yank string_parse_to_chars integer_pop integer_empty vector_float_flush genome_if_autoconstructing vector_float_yank noop_delete_prev_paren_pair print_exec zip_append_child_fromcode genome_gene_delete float_dup_times code_empty float_inc zip_right vector_float_length float_rand genome_uniform_close_mutation integer_dec string_contains return_fromboolean vector_float_concat vector_float_stackdepth exec_do*vector_boolean vector_integer_first genome_shove code_rand print_vector_float float_rot return_char_pop vector_string_contains genome_autoconstructing vector_boolean_occurrencesof string_dup_items genome_empty zip_prev genome_toggle_silent vector_string_reverse zip_dup code_cons code_member exec_stackdepth float_flush boolean_and integer_tagged_instruction vector_boolean_butlast string_length float_cos string_frominteger exec_flush vector_string_empty exec_when vector_float_swap genome_close_dec code_insert vector_boolean_pop float_div zip_insert_right_fromcode code_fromboolean vector_boolean_take code_shove environment_begin vector_float_take boolean_invert_second_then_and code_container code_nth vector_boolean_subvec float_yank zip_up vector_boolean_emptyvector vector_boolean_replacefirst genome_alternation zip_dup_times string_fromfloat vector_boolean_yankdup string_dup boolean_yankdup exec_fromzipchildren}
Starting PushGP run.
Clojush version = 3.11.1-1-SNAPSHOTHash of last Git commit = 8a64f874173fae27ed1a77827849de0fade43c2b
GitHub link = https://github.com/lspector/Clojush/commit/8a64f874173fae27ed1a77827849de0fade43c2b
age-combining-function = :average
age-mediated-parent-selection = false
alignment-deviation = 5
alternation-rate = 0.01
atom-generators = (#object[clojush.problems.software.number_io$fn__6694 0x2beee3e8 clojush.problems.software.number_io$fn__6694@2beee3e8] #object[clojush.problems.software.number_io$fn__6696 0x58bad46f clojush.problems.software.number_io$fn__6696@58bad46f] #object[clojush.instructions.tag$tag_instruction_erc$fn__1963 0x20231384 clojush.instructions.tag$tag_instruction_erc$fn__1963@20231384] #object[clojush.instructions.tag$tagged_instruction_erc$fn__1969 0x35becbd4 clojush.instructions.tag$tagged_instruction_erc$fn__1969@35becbd4] in1 in2 print_newline integer_sub integer_inc integer_yankdup integer_mult float_sin float_frominteger float_mod integer_div integer_fromfloat integer_mod integer_rot float_yankdup integer_add integer_shove integer_max integer_stackdepth float_max float_dup_items float_stackdepth integer_dup_times integer_yank integer_min integer_dup_items print_integer print_float integer_flush float_shove float_pop float_sub float_min float_mult float_dec float_add float_dup float_swap integer_swap integer_dup float_tan integer_pop float_dup_times float_inc integer_dec float_rot float_flush float_cos float_div float_yank)
autoconstructive = false
autoconstructive-boolean-rand-enrichment = 0
autoconstructive-clone-decay = :same
autoconstructive-clone-probability = 0.0
autoconstructive-decay = 0.0
autoconstructive-diffmeans-children = 10
autoconstructive-diversification-test = :gecco2016
autoconstructive-environments = false
autoconstructive-genome-instructions = :all
autoconstructive-integer-rand-enrichment = 0
autoconstructive-parent-decay = 0.0
autoconstructive-si-children = 8
autoconstructive-tag-types = [:integer :boolean :exec :float :char :string :code]
close-increment-rate = 0.2
close-parens-probabilities = [0.772 0.206 0.021 0.001]
csv-columns = [:generation :location :total-error :push-program-size]
csv-log-filename = log.csv
decimation-ratio = 1
decimation-tournament-size = 2
edn-additional-keys = [:generation :location]
edn-keys = [:uuid :parent-uuids :genetic-operators :program :genome :total-error :errors]
edn-log-filename = log.edn
epigenetic-markers = []
epsilon-lexicase-epsilon = nil
epsilon-lexicase-probability = 1
error-function = #object[clojush.problems.software.number_io$make_number_io_error_function_from_cases$the_actual_num_io_error_function__6704 0x342723a3 clojush.problems.software.number_io$make_number_io_error_function_from_cases$the_actual_num_io_error_function__6704@342723a3]
error-threshold = 1.0E-4
evalpush-limit = 200
evalpush-time-limit = 0
exit-on-success = true
final-report-simplifications = 5000
genetic-operator-probabilities = {:alternation 0.3, :uniform-mutation 0.2, [:alternation :uniform-mutation] 0.5}
improvement-discount = 0.5
individuals-for-novelty-archive-per-generation = 0
json-log-filename = log.json
json-log-program-strings = false
label = nil
lexicase-leakage = 0.1
lexicase-slippage = 0
log-fitnesses-for-all-cases = false
maintain-ancestors = false
max-error = 5000
max-generations = 200
max-genome-size-in-initial-program = 100
max-point-evaluations = 1.0E101
max-points = 800
meta-error-categories = []
normalization = :none
novelty-distance-metric = :euclidean
novelty-number-of-neighbors-k = 25
parent-reversion-probability = 1.0
parent-selection = :tournament
pop-when-tagging = true
population-size = 1000
print-ancestors-of-solution = false
print-cosmos-data = false
print-csv-logs = false
print-edn-logs = false
print-error-frequencies-by-case = false
print-errors = true
print-history = false
print-homology-data = false
print-json-logs = false
print-selection-counts = false
print-timings = true
problem-specific-initial-report = #object[clojush.problems.software.number_io$number_io_initial_report 0x4ec427 clojush.problems.software.number_io$number_io_initial_report@4ec427]
problem-specific-report = #object[clojush.problems.software.number_io$num_io_report 0xfde487b clojush.problems.software.number_io$num_io_report@fde487b]
random-screen = false
random-seed = -92 -95 -64 70 90 -31 24 78 90 63 -64 -120 -67 -12 122 44
random-threshold-lexicase-probability = 1
random-toggle-lexicase-probability = 1
randomly-truncated-lexicase-probability = 1
record-host = nil
replace-child-that-exceeds-size-limit-with = :random
report-simplifications = 0
return-simplified-on-failure = false
reuse-errors = true
self-mate-avoidance-limit = 0
silent-instruction-probability = 0.2
sort-meta-errors-for-lexicase = :random
tag-enrichment = 0
tag-enrichment-types = [:integer :boolean :exec :float :char :string :code]
tag-limit = 10000
top-level-pop-code = false
top-level-push-code = false
total-error-method = :sum
tournament-size = 7
track-instruction-maps = false
uniform-addition-and-deletion-rate = 0.01
uniform-addition-rate = 0.01
uniform-close-mutation-rate = 0.1
uniform-combination-and-deletion-rate = 0.01
uniform-combination-rate = 0.01
uniform-deletion-rate = 0.01
uniform-mutation-constant-tweak-rate = 0.5
uniform-mutation-float-gaussian-standard-deviation = 1.0
uniform-mutation-int-gaussian-standard-deviation = 1
uniform-mutation-rate = 0.01
uniform-mutation-string-char-change-rate = 0.1
uniform-mutation-tag-gaussian-standard-deviation = 100
uniform-silence-mutation-rate = 0.1
use-single-thread = false

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Generating initial population...
Processing generation: 0
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 0
;;******************************
;; -*- Number IO problem report - generation 0
Test total error for best: 60685.1809
Test mean error for best: 30.34259
;;------------------------------
Outputs of best individual on training cases:
Correct output: -116.076402553 | Program output: -40.0
        
Correct output: 24.1400847456  | Program output: -9.0
         
Correct output: 69.833290954   | Program output: 21.0
         
Correct output: 82.4958592801  | Program output: 95.0
         
Correct output: 34.2385110874  | Program output: 82.0
         
Correct output: -10.7358110665 | Program output: 48.0
         
Correct output: 1.9700532093   | Program output: -10.0
        
Correct output: -44.7956976677 | Program output: 52.0
         
Correct output: 68.5576547673  | Program output: 47.0
         
Correct output: -69.2536523379 | Program output: -53.0
        
Correct output: -14.2275745396 | Program output: 42.0
         
Correct output: -171.9767905886 | Program output: -84.0
        
Correct output: -32.1846093265 | Program output: 2.0
          
Correct output: 66.9812146721  | Program output: 74.0
         
Correct output: 100.0259781081 | Program output: 35.0
         
Correct output: -90.2595503995 | Program output: -33.0
        
Correct output: -82.4635707651 | Program output: -95.0
        
Correct output: -8.7492896214  | Program output: -49.0
        
Correct output: -82.1329348831 | Program output: -81.0
        
Correct output: 24.5261129925  | Program output: -72.0
        
Correct output: -11.4065589042 | Program output: -52.0
        
Correct output: 10.3282540908  | Program output: -76.0
        
Correct output: -51.7760580299 | Program output: -77.0
        
Correct output: 51.8185003253  | Program output: 75.0
         
Correct output: 110.7431489201 | Program output: 21.0
         
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_yankdup} {:instruction float_add} {:instruction integer_mult} {:instruction float_mult} {:instruction float_pop} {:instruction float_mult} {:instruction in2} {:instruction float_max} {:instruction integer_dup} {:instruction integer_pop} {:instruction float_dup} {:instruction float_cos} {:instruction float_frominteger} {:instruction integer_swap} {:instruction integer_mod} {:instruction integer_dup} {:instruction 80} {:instruction float_dup_items} {:instruction print_float} {:instruction integer_dup_items} {:instruction float_swap} {:instruction integer_yankdup} {:instruction float_mult} {:instruction integer_max} {:instruction integer_stackdepth} {:instruction tagged_481} {:instruction float_dup_items} {:instruction integer_dec} {:instruction print_newline} {:instruction -58.02524250502867} {:instruction float_mult} {:instruction integer_add} {:instruction float_dup_times} {:instruction integer_mod} {:instruction float_pop} {:instruction integer_dec} {:instruction integer_flush} {:instruction integer_yank} {:instruction integer_pop} {:instruction float_flush} {:instruction -15} {:instruction float_swap} {:instruction integer_dup_items} {:instruction integer_sub} {:instruction float_yank} {:instruction float_shove} {:instruction float_tan} {:instruction tagged_728} {:instruction float_add} {:instruction integer_add} {:instruction integer_fromfloat} {:instruction float_tan} {:instruction integer_min} {:instruction integer_stackdepth} {:instruction float_mult} {:instruction integer_dup} {:instruction integer_swap} {:instruction float_dup_items} {:instruction integer_min} {:instruction float_shove} {:instruction float_add} {:instruction integer_stackdepth} {:instruction float_dec} {:instruction tagged_550} {:instruction float_yank} {:instruction float_frominteger} {:instruction integer_sub} {:instruction tag_float_714} {:instruction tag_integer_742} {:instruction float_dec} {:instruction float_mod})
Best program: (float_yankdup float_add integer_mult float_mult float_pop float_mult in2 float_max integer_dup integer_pop float_dup float_cos float_frominteger integer_swap integer_mod integer_dup 80 float_dup_items print_float integer_dup_items float_swap integer_yankdup float_mult integer_max integer_stackdepth tagged_481 float_dup_items integer_dec print_newline -58.02524250502867 float_mult integer_add float_dup_times integer_mod float_pop integer_dec integer_flush integer_yank integer_pop float_flush -15 float_swap integer_dup_items integer_sub float_yank float_shove float_tan tagged_728 float_add integer_add integer_fromfloat float_tan integer_min integer_stackdepth float_mult integer_dup integer_swap float_dup_items integer_min float_shove float_add integer_stackdepth float_dec tagged_550 float_yank float_frominteger integer_sub tag_float_714 tag_integer_742 float_dec float_mod)
Errors: [76.0764 11 33.1401 11 48.8333 10 12.5041 10 47.7615 11 58.7358 12 11.9701 10 96.7957 13 21.5577 11 16.2537 11 56.2276 12 87.9768 12 34.1846 11 7.0188 12 65.026 12 57.2596 11 12.5364 11 40.2507 10 1.1329 11 96.5261 12 40.5934 11 86.3283 12 25.2239 10 23.1815 11 89.7431 11]
Total: 1425.8380999999997
Mean: 28.516762
Genome size: 71
Size: 72
Percent parens: 0.014
--- Population Statistics ---
Average total errors in population: 18202.0618754
Median total errors in population: 25338.0
Error averages by case: (735.1922257000019 13.106 706.7431751999995 12.429 708.3990207000014 11.679 717.4343737999986 13.175 710.9229312999992 13.166 707.9938625000018 13.081 703.1266141999998 11.552 714.9812354000012 13.304 707.4109060000003 12.523 721.7363875999998 13.177 706.6369706999988 13.195 750.3481573999978 13.942 700.0913938999995 12.977 714.0873300000003 13.183 715.3195429999995 13.12 729.5124594999987 13.124 721.0072838000011 13.831 707.0132511000015 13.098 725.6422927999998 13.091 710.9165496000012 12.538 707.5927438999992 13.8 710.4441094000005 12.396 713.4858819000009 13.845 712.1966980000003 13.23 718.2194779999998 13.045)
Error minima by case: (1.9236 2 0.5247 1 0.1667 1 1.4959 8 0.7615 8 0.2555 1 0.0299 1 1.0937 2 0.245 2 0.485 2 1.2715 2 47.2297 2 0.0 1 1.6916 8 0.026 3 2.7404 2 1.4636 10 0.7493 8 0.1329 1 0.1387 1 0.2593 9 0.3173 2 0.7761 9 1.8185 8 10.7431 2)
Average genome size in population (length): 52.125
Average program size in population (points): 53.125
Average percent parens in population: 0.038
Minimum age in population: 0.0
Maximum age in population: 0.0
Average age in population: 0.0
Median age in population: 0.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 2
Genome diversity (% unique Plush genomes):	 0.999
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 2
Syntactic diversity (% unique Push programs):	 0.999
Total error diversity:				 0.313
Error (vector) diversity:			 0.336
Behavioral diversity:				 0.355
--- Run Statistics ---
Number of program evaluations used so far: 1000
Number of point (instruction) evaluations so far: 1307038
--- Timings ---
Current time: 1529614898352 milliseconds
Total Time:           4.2 seconds
Initialization:       0.1 seconds,  2.7%
Reproduction:         0.6 seconds, 13.7%
Fitness Testing:      3.5 seconds, 83.5%
Report:               0.0 seconds,  0.0%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 0
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 1
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 1
;;******************************
;; -*- Number IO problem report - generation 1
Test total error for best: 60685.1809
Test mean error for best: 30.34259
;;------------------------------
Outputs of best individual on training cases:
Correct output: -116.076402553 | Program output: -40.0
        
Correct output: 24.1400847456  | Program output: -9.0
         
Correct output: 69.833290954   | Program output: 21.0
         
Correct output: 82.4958592801  | Program output: 95.0
         
Correct output: 34.2385110874  | Program output: 82.0
         
Correct output: -10.7358110665 | Program output: 48.0
         
Correct output: 1.9700532093   | Program output: -10.0
        
Correct output: -44.7956976677 | Program output: 52.0
         
Correct output: 68.5576547673  | Program output: 47.0
         
Correct output: -69.2536523379 | Program output: -53.0
        
Correct output: -14.2275745396 | Program output: 42.0
         
Correct output: -171.9767905886 | Program output: -84.0
        
Correct output: -32.1846093265 | Program output: 2.0
          
Correct output: 66.9812146721  | Program output: 74.0
         
Correct output: 100.0259781081 | Program output: 35.0
         
Correct output: -90.2595503995 | Program output: -33.0
        
Correct output: -82.4635707651 | Program output: -95.0
        
Correct output: -8.7492896214  | Program output: -49.0
        
Correct output: -82.1329348831 | Program output: -81.0
        
Correct output: 24.5261129925  | Program output: -72.0
        
Correct output: -11.4065589042 | Program output: -52.0
        
Correct output: 10.3282540908  | Program output: -76.0
        
Correct output: -51.7760580299 | Program output: -77.0
        
Correct output: 51.8185003253  | Program output: 75.0
         
Correct output: 110.7431489201 | Program output: 21.0
         
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_yankdup} {:instruction float_add} {:instruction integer_mult} {:instruction float_mult} {:instruction float_pop} {:instruction float_mult} {:instruction in2} {:instruction float_max} {:instruction integer_dup} {:instruction integer_pop} {:instruction float_dup} {:instruction float_cos} {:instruction float_frominteger} {:instruction integer_swap} {:instruction integer_mod} {:instruction integer_dup} {:instruction 80} {:instruction float_dup_items} {:instruction print_float} {:instruction integer_dup_items} {:instruction float_swap} {:instruction integer_yankdup} {:instruction float_mult} {:instruction integer_max} {:instruction integer_stackdepth} {:instruction tagged_481} {:instruction float_dup_items} {:instruction integer_dec} {:instruction print_newline} {:instruction -58.02524250502867} {:instruction float_mult} {:instruction integer_add} {:instruction float_dup_times} {:instruction integer_mod} {:instruction float_pop} {:instruction integer_dec} {:instruction integer_flush} {:instruction integer_yank} {:instruction integer_pop} {:instruction float_flush} {:instruction -15} {:instruction float_swap} {:instruction integer_dup_items} {:instruction integer_sub} {:instruction float_yank} {:instruction float_shove} {:instruction float_tan} {:instruction tagged_728} {:instruction float_add} {:instruction integer_add} {:instruction integer_rot} {:instruction float_yank} {:instruction integer_dup} {:instruction integer_shove} {:instruction integer_dec} {:instruction integer_inc} {:instruction float_yankdup} {:instruction float_yank} {:instruction float_sub} {:instruction print_float} {:instruction integer_stackdepth} {:instruction integer_pop} {:instruction integer_add} {:instruction float_tan} {:instruction integer_mod} {:instruction float_min} {:instruction integer_sub} {:instruction integer_fromfloat} {:instruction integer_shove} {:instruction -2.3811039718253397} {:instruction integer_add} {:instruction float_sin} {:instruction float_min} {:instruction 60.47175205380347} {:instruction integer_dup_items} {:instruction integer_mult} {:instruction float_flush} {:instruction 88.67311371479613} {:instruction print_integer} {:instruction integer_min} {:instruction integer_fromfloat} {:instruction integer_max} {:instruction float_mult} {:instruction integer_fromfloat} {:instruction integer_dup_times} {:instruction float_shove} {:instruction float_dup_items} {:instruction float_cos} {:instruction integer_swap} {:instruction float_max})
Best program: (float_yankdup float_add integer_mult float_mult float_pop float_mult in2 float_max integer_dup integer_pop float_dup float_cos float_frominteger integer_swap integer_mod integer_dup 80 float_dup_items print_float integer_dup_items float_swap integer_yankdup float_mult integer_max integer_stackdepth tagged_481 float_dup_items integer_dec print_newline -58.02524250502867 float_mult integer_add float_dup_times integer_mod float_pop integer_dec integer_flush integer_yank integer_pop float_flush -15 float_swap integer_dup_items integer_sub float_yank float_shove float_tan tagged_728 float_add integer_add integer_rot float_yank integer_dup integer_shove integer_dec integer_inc float_yankdup float_yank float_sub print_float integer_stackdepth integer_pop integer_add float_tan integer_mod float_min integer_sub integer_fromfloat integer_shove -2.3811039718253397 integer_add float_sin float_min 60.47175205380347 integer_dup_items integer_mult float_flush 88.67311371479613 print_integer integer_min integer_fromfloat integer_max float_mult integer_fromfloat integer_dup_times float_shove float_dup_items float_cos integer_swap float_max)
Errors: [76.0764 11 33.1401 11 48.8333 10 12.5041 10 47.7615 11 58.7358 12 11.9701 10 96.7957 13 21.5577 11 16.2537 11 56.2276 12 87.9768 12 34.1846 11 7.0188 12 65.026 12 57.2596 11 12.5364 11 40.2507 10 1.1329 11 96.5261 12 40.5934 11 86.3283 12 25.2239 10 23.1815 11 89.7431 11]
Total: 1425.8380999999997
Mean: 28.516762
Genome size: 90
Size: 91
Percent parens: 0.011
--- Population Statistics ---
Average total errors in population: 6213.580714700004
Median total errors in population: 1722.6975000000002
Error averages by case: (266.74917949999866 10.406 213.58302059999912 10.142 231.24311709999955 9.51 251.30802090000034 12.265 233.64013850000015 12.245 220.81998219999866 10.393 201.708936200001 9.192 239.6447764999982 10.804 233.48156440000125 10.176 240.46894400000042 10.537 220.1806092000017 10.59 302.81737880000117 11.126 207.64916570000034 10.273 238.97777070000035 12.16 250.70694630000227 10.654 252.49357369999868 10.441 252.27453059999934 12.605 217.48261869999982 12.066 249.924042299999 10.356 236.54014719999861 10.293 219.05274189999975 12.55 230.69857909999845 10.107 237.76604439999932 12.621 235.38326179999981 12.302 254.79062439999922 10.381)
Error minima by case: (1.9236 2 0.7015 1 0.1667 1 0.7776 9 0.7615 8 0.2555 2 0.0196 1 1.0937 2 1.4423 2 0.485 2 1.2715 2 8.0456 2 0.0 1 3.0188 8 0.026 3 2.509 2 1.4636 9 0.7493 8 0.1329 1 0.3155 2 0.2593 9 0.4128 2 0.7761 9 1.8185 7 0.7431 2)
Average genome size in population (length): 60.852
Average program size in population (points): 61.852
Average percent parens in population: 0.021
Minimum age in population: 1.0
Maximum age in population: 2.0
Average age in population: 1.533
Median age in population: 2.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 9
Genome diversity (% unique Plush genomes):	 0.786
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 9
Syntactic diversity (% unique Push programs):	 0.786
Total error diversity:				 0.286
Error (vector) diversity:			 0.304
Behavioral diversity:				 0.324
--- Run Statistics ---
Number of program evaluations used so far: 2000
Number of point (instruction) evaluations so far: 2832990
--- Timings ---
Current time: 1529614902824 milliseconds
Total Time:           8.9 seconds
Initialization:       0.1 seconds,  1.3%
Reproduction:         2.9 seconds, 32.3%
Fitness Testing:      5.2 seconds, 58.4%
Report:               0.7 seconds,  8.0%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 1
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 2
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 2
;;******************************
;; -*- Number IO problem report - generation 2
Test total error for best: 60685.1809
Test mean error for best: 30.34259
;;------------------------------
Outputs of best individual on training cases:
Correct output: -116.076402553 | Program output: -40.0
        
Correct output: 24.1400847456  | Program output: -9.0
         
Correct output: 69.833290954   | Program output: 21.0
         
Correct output: 82.4958592801  | Program output: 95.0
         
Correct output: 34.2385110874  | Program output: 82.0
         
Correct output: -10.7358110665 | Program output: 48.0
         
Correct output: 1.9700532093   | Program output: -10.0
        
Correct output: -44.7956976677 | Program output: 52.0
         
Correct output: 68.5576547673  | Program output: 47.0
         
Correct output: -69.2536523379 | Program output: -53.0
        
Correct output: -14.2275745396 | Program output: 42.0
         
Correct output: -171.9767905886 | Program output: -84.0
        
Correct output: -32.1846093265 | Program output: 2.0
          
Correct output: 66.9812146721  | Program output: 74.0
         
Correct output: 100.0259781081 | Program output: 35.0
         
Correct output: -90.2595503995 | Program output: -33.0
        
Correct output: -82.4635707651 | Program output: -95.0
        
Correct output: -8.7492896214  | Program output: -49.0
        
Correct output: -82.1329348831 | Program output: -81.0
        
Correct output: 24.5261129925  | Program output: -72.0
        
Correct output: -11.4065589042 | Program output: -52.0
        
Correct output: 10.3282540908  | Program output: -76.0
        
Correct output: -51.7760580299 | Program output: -77.0
        
Correct output: 51.8185003253  | Program output: 75.0
         
Correct output: 110.7431489201 | Program output: 21.0
         
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_yankdup} {:instruction float_add} {:instruction integer_mult} {:instruction float_mult} {:instruction float_pop} {:instruction float_mult} {:instruction in2} {:instruction float_max} {:instruction integer_dup} {:instruction integer_pop} {:instruction float_dup} {:instruction float_cos} {:instruction float_frominteger} {:instruction integer_swap} {:instruction integer_mod} {:instruction integer_dup} {:instruction 80} {:instruction float_dup_items} {:instruction print_float} {:instruction integer_dup_items} {:instruction float_swap} {:instruction integer_yankdup} {:instruction float_mult} {:instruction integer_max} {:instruction integer_stackdepth} {:instruction tagged_481} {:instruction float_dup_items} {:instruction integer_dec} {:instruction print_newline} {:instruction -58.02524250502867} {:instruction float_mult} {:instruction integer_add} {:instruction float_dup_times} {:instruction integer_mod} {:instruction float_pop} {:instruction integer_dec} {:instruction integer_flush} {:instruction integer_yank} {:instruction integer_pop} {:instruction float_flush} {:instruction -15} {:instruction float_swap} {:instruction integer_dup_items} {:instruction integer_sub} {:instruction float_yank} {:instruction integer_yankdup} {:instruction integer_dup_times} {:instruction float_sin} {:instruction float_stackdepth} {:instruction integer_pop} {:instruction in2} {:instruction float_dup_items} {:instruction float_flush} {:instruction integer_dup_items} {:instruction integer_stackdepth} {:instruction integer_shove} {:instruction integer_mod} {:instruction integer_rot} {:instruction float_mod} {:instruction float_mult} {:instruction float_yankdup})
Best program: (float_yankdup float_add integer_mult float_mult float_pop float_mult in2 float_max integer_dup integer_pop float_dup float_cos float_frominteger integer_swap integer_mod integer_dup 80 float_dup_items print_float integer_dup_items float_swap integer_yankdup float_mult integer_max integer_stackdepth tagged_481 float_dup_items integer_dec print_newline -58.02524250502867 float_mult integer_add float_dup_times integer_mod float_pop integer_dec integer_flush integer_yank integer_pop float_flush -15 float_swap integer_dup_items integer_sub float_yank integer_yankdup integer_dup_times float_sin float_stackdepth integer_pop in2 float_dup_items float_flush integer_dup_items integer_stackdepth integer_shove integer_mod integer_rot float_mod float_mult float_yankdup)
Errors: [76.0764 11 33.1401 11 48.8333 10 12.5041 10 47.7615 11 58.7358 12 11.9701 10 96.7957 13 21.5577 11 16.2537 11 56.2276 12 87.9768 12 34.1846 11 7.0188 12 65.026 12 57.2596 11 12.5364 11 40.2507 10 1.1329 11 96.5261 12 40.5934 11 86.3283 12 25.2239 10 23.1815 11 89.7431 11]
Total: 1425.8380999999997
Mean: 28.516762
Genome size: 61
Size: 62
Percent parens: 0.016
--- Population Statistics ---
Average total errors in population: 4810.666405100006
Median total errors in population: 1451.8380999999997
Error averages by case: (199.70321819999907 9.425 164.85755219999928 9.92 170.3714136999992 8.788 173.4736373999995 11.81 187.45205259999767 12.215 182.85462189999825 10.24 150.93509980000152 8.558 206.41412739999808 10.309 164.44859370000145 9.081 169.83160940000056 9.313 178.76745820000164 9.76 221.81465100000136 10.57 154.3617486999992 9.867 163.45004430000006 12.049 186.31239060000166 10.392 186.22631669999905 9.767 179.76102530000108 12.428 179.39547860000098 11.379 169.33469749999855 9.244 217.45067959999813 9.622 180.5244361000015 12.204 212.40676109999762 10.03 180.19097680000112 12.047 172.66796510000177 12.341 196.44384919999985 9.857)
Error minima by case: (25.0764 2 8.0 1 20.0 1 11.5041 3 8.7615 10 1.0519 2 0.0268 1 1.0937 2 20.5577 2 15.2537 2 1.2715 2 80.9768 2 0.0032 1 6.0188 8 0.5584 3 0.7404 2 8.5364 9 0.9346 8 0.1329 1 18.4739 2 1.7227 9 4.9068 2 24.2239 9 8.8185 9 11.2756 2)
Average genome size in population (length): 51.419
Average program size in population (points): 52.419
Average percent parens in population: 0.026
Minimum age in population: 2.0
Maximum age in population: 4.0
Average age in population: 2.97
Median age in population: 3.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 39
Genome diversity (% unique Plush genomes):	 0.661
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 39
Syntactic diversity (% unique Push programs):	 0.661
Total error diversity:				 0.107
Error (vector) diversity:			 0.114
Behavioral diversity:				 0.122
--- Run Statistics ---
Number of program evaluations used so far: 3000
Number of point (instruction) evaluations so far: 4121240
--- Timings ---
Current time: 1529614906137 milliseconds
Total Time:          12.2 seconds
Initialization:       0.1 seconds,  0.9%
Reproduction:         4.4 seconds, 35.6%
Fitness Testing:      6.5 seconds, 53.5%
Report:               1.2 seconds,  9.9%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 2
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 3
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 3
;;******************************
;; -*- Number IO problem report - generation 3
Test total error for best: 60484.18089999999
Test mean error for best: 30.24209
;;------------------------------
Outputs of best individual on training cases:
Correct output: -116.076402553 | Program output: -40.00        
Correct output: 24.1400847456  | Program output: -9.00         
Correct output: 69.833290954   | Program output: 21.00         
Correct output: 82.4958592801  | Program output: 95.00         
Correct output: 34.2385110874  | Program output: 82.00         
Correct output: -10.7358110665 | Program output: 48.00         
Correct output: 1.9700532093   | Program output: -10.00        
Correct output: -44.7956976677 | Program output: 52.00         
Correct output: 68.5576547673  | Program output: 47.00         
Correct output: -69.2536523379 | Program output: -53.00        
Correct output: -14.2275745396 | Program output: 42.00         
Correct output: -171.9767905886 | Program output: -84.00        
Correct output: -32.1846093265 | Program output: 2.00          
Correct output: 66.9812146721  | Program output: 74.00         
Correct output: 100.0259781081 | Program output: 35.00         
Correct output: -90.2595503995 | Program output: -33.00        
Correct output: -82.4635707651 | Program output: -95.00        
Correct output: -8.7492896214  | Program output: -49.00        
Correct output: -82.1329348831 | Program output: -81.00        
Correct output: 24.5261129925  | Program output: -72.00        
Correct output: -11.4065589042 | Program output: -52.00        
Correct output: 10.3282540908  | Program output: -76.00        
Correct output: -51.7760580299 | Program output: -77.00        
Correct output: 51.8185003253  | Program output: 75.00         
Correct output: 110.7431489201 | Program output: 21.00         
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_yankdup} {:instruction float_add} {:instruction integer_mult} {:instruction float_mult} {:instruction float_pop} {:instruction float_mult} {:instruction in2} {:instruction float_max} {:instruction integer_dup} {:instruction integer_pop} {:instruction float_dup} {:instruction float_cos} {:instruction float_frominteger} {:instruction integer_swap} {:instruction integer_mod} {:instruction integer_dup} {:instruction 80} {:instruction float_dup_items} {:instruction print_float} {:instruction integer_dup_items} {:instruction float_swap} {:instruction integer_yankdup} {:instruction float_mult} {:instruction integer_max} {:instruction integer_stackdepth} {:instruction float_dup} {:instruction integer_shove} {:instruction float_inc} {:instruction integer_mult} {:instruction integer_div} {:instruction print_integer} {:instruction float_mult})
Best program: (float_yankdup float_add integer_mult float_mult float_pop float_mult in2 float_max integer_dup integer_pop float_dup float_cos float_frominteger integer_swap integer_mod integer_dup 80 float_dup_items print_float integer_dup_items float_swap integer_yankdup float_mult integer_max integer_stackdepth float_dup integer_shove float_inc integer_mult integer_div print_integer float_mult)
Errors: [76.0764 10 33.1401 10 48.8333 10 12.5041 10 47.7615 11 58.7358 12 11.9701 10 96.7957 13 21.5577 11 16.2537 11 56.2276 12 87.9768 12 34.1846 11 7.0188 12 65.026 11 57.2596 11 12.5364 11 40.2507 10 1.1329 11 96.5261 12 40.5934 10 86.3283 11 25.2239 9 23.1815 10 89.7431 11]
Total: 1418.8380999999997
Mean: 28.376762
Genome size: 32
Size: 33
Percent parens: 0.030
--- Population Statistics ---
Average total errors in population: 4411.997961300025
Median total errors in population: 1442.8380999999997
Error averages by case: (193.90684489999853 11.297 156.96892539999914 12.334 162.53301009999876 10.789 134.06539680000162 10.968 164.26180259999677 11.691 173.15715499999777 12.735 136.76009000000212 10.82 206.14204819999682 13.064 141.1422564000017 11.195 142.91722580000086 11.443 170.29567740000155 12.243 205.36872510000165 12.958 138.6006285999977 12.474 128.69206770000187 12.161 178.73963950000186 12.726 177.41081279999887 11.952 140.28842429999904 11.964 162.92502990000133 10.579 129.72725149999792 11.283 212.429605499997 12.154 163.78066730000106 11.434 203.5767998999968 12.638 150.71829970000002 11.177 142.72350930000238 11.85 199.06606759999934 11.871)
Error minima by case: (40.0 2 9.0 2 21.0 2 11.5041 9 33.2385 9 9.7435 2 0.9701 1 23.5969 2 20.5577 2 15.2537 2 6.9712 2 84.0 2 2.0 1 6.0188 11 30.026 3 33.0 2 11.5364 10 7.7861 9 0.1329 2 23.5261 2 9.7922 9 9.3283 2 24.2239 9 22.1815 10 21.0 3)
Average genome size in population (length): 45.897
Average program size in population (points): 46.897
Average percent parens in population: 0.031
Minimum age in population: 3.0
Maximum age in population: 6.0
Average age in population: 4.449
Median age in population: 4.5
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 69
Genome diversity (% unique Plush genomes):	 0.595
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 69
Syntactic diversity (% unique Push programs):	 0.595
Total error diversity:				 0.042
Error (vector) diversity:			 0.045
Behavioral diversity:				 0.051
--- Run Statistics ---
Number of program evaluations used so far: 4000
Number of point (instruction) evaluations so far: 5269815
--- Timings ---
Current time: 1529614910108 milliseconds
Total Time:          16.4 seconds
Initialization:       0.1 seconds,  0.7%
Reproduction:         6.7 seconds, 40.9%
Fitness Testing:      7.9 seconds, 48.3%
Report:               1.7 seconds, 10.1%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 3
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 4
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 4
;;******************************
;; -*- Number IO problem report - generation 4
Test total error for best: 60484.18089999999
Test mean error for best: 30.24209
;;------------------------------
Outputs of best individual on training cases:
Correct output: -116.076402553 | Program output: -40.00        
Correct output: 24.1400847456  | Program output: -9.00         
Correct output: 69.833290954   | Program output: 21.00         
Correct output: 82.4958592801  | Program output: 95.00         
Correct output: 34.2385110874  | Program output: 82.00         
Correct output: -10.7358110665 | Program output: 48.00         
Correct output: 1.9700532093   | Program output: -10.00        
Correct output: -44.7956976677 | Program output: 52.00         
Correct output: 68.5576547673  | Program output: 47.00         
Correct output: -69.2536523379 | Program output: -53.00        
Correct output: -14.2275745396 | Program output: 42.00         
Correct output: -171.9767905886 | Program output: -84.00        
Correct output: -32.1846093265 | Program output: 2.00          
Correct output: 66.9812146721  | Program output: 74.00         
Correct output: 100.0259781081 | Program output: 35.00         
Correct output: -90.2595503995 | Program output: -33.00        
Correct output: -82.4635707651 | Program output: -95.00        
Correct output: -8.7492896214  | Program output: -49.00        
Correct output: -82.1329348831 | Program output: -81.00        
Correct output: 24.5261129925  | Program output: -72.00        
Correct output: -11.4065589042 | Program output: -52.00        
Correct output: 10.3282540908  | Program output: -76.00        
Correct output: -51.7760580299 | Program output: -77.00        
Correct output: 51.8185003253  | Program output: 75.00         
Correct output: 110.7431489201 | Program output: 21.00         
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_yankdup} {:instruction float_add} {:instruction integer_mult} {:instruction float_mult} {:instruction float_pop} {:instruction float_mult} {:instruction in2} {:instruction float_max} {:instruction integer_dup} {:instruction integer_pop} {:instruction float_dup} {:instruction float_cos} {:instruction float_frominteger} {:instruction integer_swap} {:instruction integer_mod} {:instruction integer_dup} {:instruction 80} {:instruction float_dup_items} {:instruction print_float} {:instruction integer_dup_items} {:instruction float_swap} {:instruction integer_yankdup} {:instruction float_mult} {:instruction integer_max} {:instruction integer_stackdepth} {:instruction float_dup} {:instruction integer_shove} {:instruction float_inc} {:instruction integer_mult} {:instruction integer_div} {:instruction print_integer} {:instruction float_mult})
Best program: (float_yankdup float_add integer_mult float_mult float_pop float_mult in2 float_max integer_dup integer_pop float_dup float_cos float_frominteger integer_swap integer_mod integer_dup 80 float_dup_items print_float integer_dup_items float_swap integer_yankdup float_mult integer_max integer_stackdepth float_dup integer_shove float_inc integer_mult integer_div print_integer float_mult)
Errors: [76.0764 10 33.1401 10 48.8333 10 12.5041 10 47.7615 11 58.7358 12 11.9701 10 96.7957 13 21.5577 11 16.2537 11 56.2276 12 87.9768 12 34.1846 11 7.0188 12 65.026 11 57.2596 11 12.5364 11 40.2507 10 1.1329 11 96.5261 12 40.5934 10 86.3283 11 25.2239 9 23.1815 10 89.7431 11]
Total: 1418.8380999999997
Mean: 28.376762
Genome size: 32
Size: 33
Percent parens: 0.030
--- Population Statistics ---
Average total errors in population: 3369.9187397000246
Median total errors in population: 1425.8380999999997
Error averages by case: (151.68476930000026 11.222 111.30360000000101 11.327 126.22495389999871 10.274 93.88584000000098 10.411 124.62137589999708 11.174 134.03395909999767 12.175 91.94767940000114 10.298 168.85174349999818 13.032 101.79358310000117 11.156 97.10265430000082 11.369 131.8530489999989 12.185 163.56639740000176 12.384 110.2835472999975 11.404 88.65891810000115 12.12 141.36433420000012 12.153 134.42771690000185 11.395 94.24857499999848 11.382 117.54014110000112 10.479 83.8712304999983 11.249 168.29683519999855 12.144 117.90703449999877 11.288 158.9083875999968 12.121 105.04101969999842 10.568 102.87576430000162 11.282 163.72063040000074 11.313)
Error minima by case: (40.0 3 4.811 3 10.1667 3 2.4959 9 14.9094 9 9.9676 3 1.1426 2 38.7424 3 11.4423 3 15.2537 3 13.3111 3 84.0 3 2.0 2 6.0188 9 20.026 4 33.0 3 11.5364 10 7.9183 9 0.1329 3 5.197 3 10.4199 9 9.0008 3 24.2239 9 22.1815 10 21.0 4)
Average genome size in population (length): 62.091
Average program size in population (points): 63.091
Average percent parens in population: 0.019
Minimum age in population: 4.0
Maximum age in population: 7.75
Average age in population: 5.9675
Median age in population: 6.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 13
Genome diversity (% unique Plush genomes):	 0.749
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 13
Syntactic diversity (% unique Push programs):	 0.749
Total error diversity:				 0.04
Error (vector) diversity:			 0.041
Behavioral diversity:				 0.047
--- Run Statistics ---
Number of program evaluations used so far: 5000
Number of point (instruction) evaluations so far: 6823065
--- Timings ---
Current time: 1529614913346 milliseconds
Total Time:          19.5 seconds
Initialization:       0.1 seconds,  0.6%
Reproduction:         8.1 seconds, 41.7%
Fitness Testing:      9.4 seconds, 47.9%
Report:               1.9 seconds,  9.8%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 4
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 5
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 5
;;******************************
;; -*- Number IO problem report - generation 5
Test total error for best: 60484.18089999999
Test mean error for best: 30.24209
;;------------------------------
Outputs of best individual on training cases:
Correct output: -116.076402553 | Program output: -40.00        
Correct output: 24.1400847456  | Program output: -9.00         
Correct output: 69.833290954   | Program output: 21.00         
Correct output: 82.4958592801  | Program output: 95.00         
Correct output: 34.2385110874  | Program output: 82.00         
Correct output: -10.7358110665 | Program output: 48.00         
Correct output: 1.9700532093   | Program output: -10.00        
Correct output: -44.7956976677 | Program output: 52.00         
Correct output: 68.5576547673  | Program output: 47.00         
Correct output: -69.2536523379 | Program output: -53.00        
Correct output: -14.2275745396 | Program output: 42.00         
Correct output: -171.9767905886 | Program output: -84.00        
Correct output: -32.1846093265 | Program output: 2.00          
Correct output: 66.9812146721  | Program output: 74.00         
Correct output: 100.0259781081 | Program output: 35.00         
Correct output: -90.2595503995 | Program output: -33.00        
Correct output: -82.4635707651 | Program output: -95.00        
Correct output: -8.7492896214  | Program output: -49.00        
Correct output: -82.1329348831 | Program output: -81.00        
Correct output: 24.5261129925  | Program output: -72.00        
Correct output: -11.4065589042 | Program output: -52.00        
Correct output: 10.3282540908  | Program output: -76.00        
Correct output: -51.7760580299 | Program output: -77.00        
Correct output: 51.8185003253  | Program output: 75.00         
Correct output: 110.7431489201 | Program output: 21.00         
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_yankdup} {:instruction float_add} {:instruction integer_mult} {:instruction float_mult} {:instruction float_pop} {:instruction integer_yankdup} {:instruction in2} {:instruction float_max} {:instruction integer_dup} {:instruction integer_pop} {:instruction float_dup} {:instruction float_cos} {:instruction float_frominteger} {:instruction integer_swap} {:instruction integer_mod} {:instruction integer_dup} {:instruction 80} {:instruction float_dup_items} {:instruction print_float} {:instruction integer_dup_items} {:instruction float_swap} {:instruction integer_yankdup} {:instruction float_mult} {:instruction integer_max} {:instruction integer_stackdepth} {:instruction float_dup} {:instruction integer_shove} {:instruction float_inc} {:instruction integer_mult} {:instruction integer_div} {:instruction print_integer} {:instruction float_mult})
Best program: (float_yankdup float_add integer_mult float_mult float_pop integer_yankdup in2 float_max integer_dup integer_pop float_dup float_cos float_frominteger integer_swap integer_mod integer_dup 80 float_dup_items print_float integer_dup_items float_swap integer_yankdup float_mult integer_max integer_stackdepth float_dup integer_shove float_inc integer_mult integer_div print_integer float_mult)
Errors: [76.0764 10 33.1401 10 48.8333 10 12.5041 10 47.7615 11 58.7358 12 11.9701 10 96.7957 13 21.5577 11 16.2537 11 56.2276 12 87.9768 12 34.1846 11 7.0188 12 65.026 11 57.2596 11 12.5364 11 40.2507 10 1.1329 11 96.5261 12 40.5934 10 86.3283 11 25.2239 9 23.1815 10 89.7431 11]
Total: 1418.8380999999997
Mean: 28.376762
Genome size: 32
Size: 33
Percent parens: 0.030
--- Population Statistics ---
Average total errors in population: 3215.7678798000243
Median total errors in population: 1425.8380999999997
Error averages by case: (146.43640860000153 11.108 105.47943510000052 11.065 119.4718532999988 10.156 87.12213249999995 10.248 117.99071819999739 11.157 127.47527629999814 12.085 86.04605500000021 10.132 162.56166729999939 13.023 94.9335052000004 11.138 91.53462640000077 11.197 125.29348889999875 12.114 158.52146590000174 12.199 105.75618899999806 11.175 81.83940330000007 12.048 134.75004079999925 12.002 128.89927960000185 11.204 88.60099119999859 11.194 111.74341430000078 10.256 78.29977699999836 11.199 162.6623893999997 12.075 112.11409679999888 11.115 153.23195899999692 11.979 99.27106029999851 10.255 96.1270813000009 11.072 157.23356510000198 11.176)
Error minima by case: (40.0 3 9.0 3 10.1667 3 2.4959 9 23.7615 10 10.0957 3 0.0299 2 43.9668 3 10.5577 3 15.2537 3 13.8276 3 84.0 3 2.0 2 6.0188 11 20.026 4 33.0 3 11.5364 10 7.9183 9 0.1329 3 22.5261 3 10.437 9 8.3283 3 24.2239 9 6.1815 9 21.0 4)
Average genome size in population (length): 61.811
Average program size in population (points): 62.811
Average percent parens in population: 0.018
Minimum age in population: 5.0
Maximum age in population: 9.375
Average age in population: 7.5076875
Median age in population: 7.53125
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 44
Genome diversity (% unique Plush genomes):	 0.795
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 44
Syntactic diversity (% unique Push programs):	 0.795
Total error diversity:				 0.026
Error (vector) diversity:			 0.027
Behavioral diversity:				 0.03
--- Run Statistics ---
Number of program evaluations used so far: 6000
Number of point (instruction) evaluations so far: 8369390
--- Timings ---
Current time: 1529614917153 milliseconds
Total Time:          23.4 seconds
Initialization:       0.1 seconds,  0.5%
Reproduction:        10.2 seconds, 43.6%
Fitness Testing:     10.8 seconds, 46.3%
Report:               2.2 seconds,  9.6%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 5
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 6
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 6
;;******************************
;; -*- Number IO problem report - generation 6
Test total error for best: 59661.192500000034
Test mean error for best: 29.83060
;;------------------------------
Outputs of best individual on training cases:
Correct output: -116.076402553 | Program output: -40.01600     
Correct output: 24.1400847456  | Program output: -9.081        
Correct output: 69.833290954   | Program output: 21.0441       
Correct output: 82.4958592801  | Program output: 95.09025      
Correct output: 34.2385110874  | Program output: 82.06724      
Correct output: -10.7358110665 | Program output: 48.02304      
Correct output: 1.9700532093   | Program output: -10.0100      
Correct output: -44.7956976677 | Program output: 52.02704      
Correct output: 68.5576547673  | Program output: 47.02209      
Correct output: -69.2536523379 | Program output: -53.02809     
Correct output: -14.2275745396 | Program output: 42.01764      
Correct output: -171.9767905886 | Program output: -84.07056     
Correct output: -32.1846093265 | Program output: 2.04          
Correct output: 66.9812146721  | Program output: 74.05476      
Correct output: 100.0259781081 | Program output: 35.01225      
Correct output: -90.2595503995 | Program output: -33.01089     
Correct output: -82.4635707651 | Program output: -95.09025     
Correct output: -8.7492896214  | Program output: -49.02401     
Correct output: -82.1329348831 | Program output: -81.06561     
Correct output: 24.5261129925  | Program output: -72.05184     
Correct output: -11.4065589042 | Program output: -52.02704     
Correct output: 10.3282540908  | Program output: -76.05776     
Correct output: -51.7760580299 | Program output: -77.05929     
Correct output: 51.8185003253  | Program output: 75.05625      
Correct output: 110.7431489201 | Program output: 21.0441       
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_yankdup} {:instruction float_add} {:instruction integer_mult} {:instruction float_mult} {:instruction float_pop} {:instruction float_mult} {:instruction in2} {:instruction float_max} {:instruction integer_dup} {:instruction float_add} {:instruction integer_mult} {:instruction float_mult} {:instruction float_pop} {:instruction float_mult} {:instruction in2} {:instruction float_max} {:instruction integer_dup} {:instruction integer_pop} {:instruction float_dup} {:instruction float_cos} {:instruction float_frominteger} {:instruction integer_swap} {:instruction integer_mod} {:instruction integer_dup} {:instruction 80} {:instruction float_dup_items} {:instruction print_float} {:instruction integer_dup_items} {:instruction float_swap} {:instruction integer_yankdup} {:instruction float_mult} {:instruction integer_max} {:instruction integer_stackdepth} {:instruction float_dup} {:instruction integer_shove} {:instruction float_inc} {:instruction integer_mult} {:instruction integer_div} {:instruction print_integer} {:instruction float_mult})
Best program: (float_yankdup float_add integer_mult float_mult float_pop float_mult in2 float_max integer_dup float_add integer_mult float_mult float_pop float_mult in2 float_max integer_dup integer_pop float_dup float_cos float_frominteger integer_swap integer_mod integer_dup 80 float_dup_items print_float integer_dup_items float_swap integer_yankdup float_mult integer_max integer_stackdepth float_dup integer_shove float_inc integer_mult integer_div print_integer float_mult)
Errors: [76.0604 9 33.2211 10 48.7892 10 12.5944 10 47.8287 10 58.7589 12 11.9801 10 96.8227 12 21.5356 12 16.2256 9 56.2452 11 87.9062 9 34.2246 11 7.0735 10 65.0137 11 57.2487 10 12.6267 10 40.2747 9 1.0673 10 96.578 12 40.6205 9 86.386 12 25.2832 7 23.2377 9 89.699 9]
Total: 1400.3017
Mean: 28.006035
Genome size: 40
Size: 41
Percent parens: 0.024
--- Population Statistics ---
Average total errors in population: 3275.4245827000227
Median total errors in population: 1425.8380999999997
Error averages by case: (155.64673380000056 10.826 112.15263390000126 10.808 114.23782899999874 10.139 84.69263250000078 10.249 113.90791419999728 11.129 122.67728529999789 12.063 92.94887100000156 10.114 157.83124719999935 13.002 92.05110150000102 11.143 101.48748630000081 11.211 120.61532999999866 12.097 168.51611470000196 12.18 98.98374019999768 11.157 79.19560810000048 12.025 131.75628349999877 11.711 138.11967650000142 11.201 98.81950849999839 11.186 119.7653729000012 10.278 88.85205999999803 11.188 169.32744009999857 12.055 120.14441969999878 10.837 159.9683914999967 11.695 108.56593379999839 10.019 92.87519560000156 10.794 152.01977290000175 11.159)
Error minima by case: (40.0 3 9.0 3 10.1667 3 2.4959 9 33.2385 10 9.9676 3 0.9701 2 43.9668 3 11.4423 3 16.2256 3 13.3111 3 84.0 3 2.0 2 7.0188 9 20.026 4 33.0 3 11.5364 10 7.9183 9 1.0673 3 23.5261 3 10.4199 9 9.3283 3 24.2239 7 23.1815 9 21.0 4)
Average genome size in population (length): 50.036
Average program size in population (points): 51.036
Average percent parens in population: 0.023
Minimum age in population: 6.5
Maximum age in population: 11.03125
Average age in population: 9.10103125
Median age in population: 9.125
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 159
Genome diversity (% unique Plush genomes):	 0.711
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 159
Syntactic diversity (% unique Push programs):	 0.711
Total error diversity:				 0.037
Error (vector) diversity:			 0.038
Behavioral diversity:				 0.045
--- Run Statistics ---
Number of program evaluations used so far: 7000
Number of point (instruction) evaluations so far: 9620890
--- Timings ---
Current time: 1529614920317 milliseconds
Total Time:          26.5 seconds
Initialization:       0.1 seconds,  0.4%
Reproduction:        11.7 seconds, 44.3%
Fitness Testing:     12.1 seconds, 45.7%
Report:               2.5 seconds,  9.6%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 6
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 7
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 7
;;******************************
;; -*- Number IO problem report - generation 7
Test total error for best: 59661.192500000034
Test mean error for best: 29.83060
;;------------------------------
Outputs of best individual on training cases:
Correct output: -116.076402553 | Program output: -40.01600     
Correct output: 24.1400847456  | Program output: -9.081        
Correct output: 69.833290954   | Program output: 21.0441       
Correct output: 82.4958592801  | Program output: 95.09025      
Correct output: 34.2385110874  | Program output: 82.06724      
Correct output: -10.7358110665 | Program output: 48.02304      
Correct output: 1.9700532093   | Program output: -10.0100      
Correct output: -44.7956976677 | Program output: 52.02704      
Correct output: 68.5576547673  | Program output: 47.02209      
Correct output: -69.2536523379 | Program output: -53.02809     
Correct output: -14.2275745396 | Program output: 42.01764      
Correct output: -171.9767905886 | Program output: -84.07056     
Correct output: -32.1846093265 | Program output: 2.04          
Correct output: 66.9812146721  | Program output: 74.05476      
Correct output: 100.0259781081 | Program output: 35.01225      
Correct output: -90.2595503995 | Program output: -33.01089     
Correct output: -82.4635707651 | Program output: -95.09025     
Correct output: -8.7492896214  | Program output: -49.02401     
Correct output: -82.1329348831 | Program output: -81.06561     
Correct output: 24.5261129925  | Program output: -72.05184     
Correct output: -11.4065589042 | Program output: -52.02704     
Correct output: 10.3282540908  | Program output: -76.05776     
Correct output: -51.7760580299 | Program output: -77.05929     
Correct output: 51.8185003253  | Program output: 75.05625      
Correct output: 110.7431489201 | Program output: 21.0441       
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_yankdup} {:instruction float_add} {:instruction integer_mult} {:instruction float_mult} {:instruction float_pop} {:instruction float_mult} {:instruction in2} {:instruction float_max} {:instruction integer_dup} {:instruction float_add} {:instruction integer_mult} {:instruction float_mult} {:instruction float_pop} {:instruction float_mult} {:instruction in2} {:instruction float_max} {:instruction integer_dup} {:instruction integer_pop} {:instruction float_dup} {:instruction float_cos} {:instruction float_frominteger} {:instruction integer_swap} {:instruction integer_mod} {:instruction integer_dup} {:instruction 80} {:instruction float_dup_items} {:instruction print_float} {:instruction integer_dup_items} {:instruction float_swap} {:instruction integer_yankdup} {:instruction float_mult} {:instruction integer_max} {:instruction integer_stackdepth} {:instruction float_dup} {:instruction integer_shove} {:instruction float_inc} {:instruction integer_mult} {:instruction integer_div} {:instruction print_integer} {:instruction float_mult})
Best program: (float_yankdup float_add integer_mult float_mult float_pop float_mult in2 float_max integer_dup float_add integer_mult float_mult float_pop float_mult in2 float_max integer_dup integer_pop float_dup float_cos float_frominteger integer_swap integer_mod integer_dup 80 float_dup_items print_float integer_dup_items float_swap integer_yankdup float_mult integer_max integer_stackdepth float_dup integer_shove float_inc integer_mult integer_div print_integer float_mult)
Errors: [76.0604 9 33.2211 10 48.7892 10 12.5944 10 47.8287 10 58.7589 12 11.9801 10 96.8227 12 21.5356 12 16.2256 9 56.2452 11 87.9062 9 34.2246 11 7.0735 10 65.0137 11 57.2487 10 12.6267 10 40.2747 9 1.0673 10 96.578 12 40.6205 9 86.386 12 25.2832 7 23.2377 9 89.699 9]
Total: 1400.3017
Mean: 28.006035
Genome size: 40
Size: 41
Percent parens: 0.024
--- Population Statistics ---
Average total errors in population: 2266.817960000024
Median total errors in population: 1418.8380999999997
Error averages by case: (115.95023660000223 10.33 70.36847789999894 10.354 76.39020629999888 10.114 45.58433829999912 10.177 74.49672629999931 11.081 83.05339429999931 12.085 50.15166909999911 10.111 119.74449520000147 13.037 52.915380199999404 11.141 59.389863600000744 11.2 81.02126159999881 12.114 130.32221440000134 12.159 60.20381580000038 11.17 39.66711909999995 12.031 94.25012899999898 11.267 97.4210608000011 11.181 56.96799879999905 11.142 76.77503579999973 10.247 46.7598405999991 11.193 127.93902460000182 12.073 77.25634299999909 10.33 117.95560799999745 11.238 66.23712119999887 9.48 53.34879659999931 10.291 115.97080290000287 11.131)
Error minima by case: (75.0764 8 22.1401 9 10.1667 9 2.4959 9 32.2385 9 10.0957 11 0.0299 8 44.6327 11 11.4423 9 15.2537 9 13.8276 11 86.9768 9 31.7685 9 6.0188 10 20.026 10 56.2596 10 12.5364 10 8.7493 9 0.1329 8 22.5261 11 11.2436 9 8.3283 9 25.2239 7 22.1815 9 30.7431 9)
Average genome size in population (length): 34.481
Average program size in population (points): 35.481
Average percent parens in population: 0.029
Minimum age in population: 8.3125
Maximum age in population: 12.640625
Average age in population: 10.606671875
Median age in population: 10.671875
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 293
Genome diversity (% unique Plush genomes):	 0.479
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 293
Syntactic diversity (% unique Push programs):	 0.479
Total error diversity:				 0.027
Error (vector) diversity:			 0.027
Behavioral diversity:				 0.031
--- Run Statistics ---
Number of program evaluations used so far: 8000
Number of point (instruction) evaluations so far: 10482940
--- Timings ---
Current time: 1529614923312 milliseconds
Total Time:          29.4 seconds
Initialization:       0.1 seconds,  0.4%
Reproduction:        13.3 seconds, 45.3%
Fitness Testing:     13.1 seconds, 44.3%
Report:               2.9 seconds, 10.0%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 7
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 8
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 8
;;******************************
;; -*- Number IO problem report - generation 8
Test total error for best: 59661.192500000034
Test mean error for best: 29.83060
;;------------------------------
Outputs of best individual on training cases:
Correct output: -116.076402553 | Program output: -40.01600     
Correct output: 24.1400847456  | Program output: -9.081        
Correct output: 69.833290954   | Program output: 21.0441       
Correct output: 82.4958592801  | Program output: 95.09025      
Correct output: 34.2385110874  | Program output: 82.06724      
Correct output: -10.7358110665 | Program output: 48.02304      
Correct output: 1.9700532093   | Program output: -10.0100      
Correct output: -44.7956976677 | Program output: 52.02704      
Correct output: 68.5576547673  | Program output: 47.02209      
Correct output: -69.2536523379 | Program output: -53.02809     
Correct output: -14.2275745396 | Program output: 42.01764      
Correct output: -171.9767905886 | Program output: -84.07056     
Correct output: -32.1846093265 | Program output: 2.04          
Correct output: 66.9812146721  | Program output: 74.05476      
Correct output: 100.0259781081 | Program output: 35.01225      
Correct output: -90.2595503995 | Program output: -33.01089     
Correct output: -82.4635707651 | Program output: -95.09025     
Correct output: -8.7492896214  | Program output: -49.02401     
Correct output: -82.1329348831 | Program output: -81.06561     
Correct output: 24.5261129925  | Program output: -72.05184     
Correct output: -11.4065589042 | Program output: -52.02704     
Correct output: 10.3282540908  | Program output: -76.05776     
Correct output: -51.7760580299 | Program output: -77.05929     
Correct output: 51.8185003253  | Program output: 75.05625      
Correct output: 110.7431489201 | Program output: 21.0441       
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_yankdup} {:instruction float_add} {:instruction integer_mult} {:instruction float_mult} {:instruction float_pop} {:instruction float_mult} {:instruction in2} {:instruction float_max} {:instruction integer_dup} {:instruction float_add} {:instruction integer_mult} {:instruction float_mult} {:instruction float_pop} {:instruction float_mult} {:instruction in2} {:instruction float_max} {:instruction integer_dup} {:instruction integer_pop} {:instruction float_dup} {:instruction float_cos} {:instruction float_frominteger} {:instruction integer_swap} {:instruction integer_mod} {:instruction integer_dup} {:instruction 80} {:instruction float_dup_items} {:instruction print_float} {:instruction integer_dup_items} {:instruction float_swap} {:instruction integer_yankdup} {:instruction float_mult} {:instruction integer_max} {:instruction integer_stackdepth} {:instruction float_dup} {:instruction integer_shove} {:instruction float_inc} {:instruction integer_mult} {:instruction integer_div} {:instruction print_integer} {:instruction float_mult})
Best program: (float_yankdup float_add integer_mult float_mult float_pop float_mult in2 float_max integer_dup float_add integer_mult float_mult float_pop float_mult in2 float_max integer_dup integer_pop float_dup float_cos float_frominteger integer_swap integer_mod integer_dup 80 float_dup_items print_float integer_dup_items float_swap integer_yankdup float_mult integer_max integer_stackdepth float_dup integer_shove float_inc integer_mult integer_div print_integer float_mult)
Errors: [76.0604 9 33.2211 10 48.7892 10 12.5944 10 47.8287 10 58.7589 12 11.9801 10 96.8227 12 21.5356 12 16.2256 9 56.2452 11 87.9062 9 34.2246 11 7.0735 10 65.0137 11 57.2487 10 12.6267 10 40.2747 9 1.0673 10 96.578 12 40.6205 9 86.386 12 25.2832 7 23.2377 9 89.699 9]
Total: 1400.3017
Mean: 28.006035
Genome size: 40
Size: 41
Percent parens: 0.024
--- Population Statistics ---
Average total errors in population: 2256.093707600023
Median total errors in population: 1418.8380999999997
Error averages by case: (116.41053400000195 10.259 70.36941749999937 10.296 75.35261069999889 10.116 45.13277929999919 10.181 73.23500719999971 11.056 81.18109439999965 12.047 50.15083759999924 10.097 117.92072620000141 12.976 51.7467722999994 11.139 60.17271840000062 11.151 79.13880489999885 12.065 131.46209820000107 12.084 57.43382060000036 11.123 38.896965000000215 11.962 92.8440021999991 11.179 97.81098540000085 11.154 58.29200619999937 11.103 76.96763039999988 10.215 48.033099199999235 11.142 128.06672390000162 12.055 77.48916459999938 10.25 118.07949939999787 11.193 67.09030999999914 9.408 52.3288693999994 10.221 114.95423060000252 11.061)
Error minima by case: (76.0254 5 23.1401 4 10.1667 4 2.4959 9 21.1999 9 9.7358 4 0.9701 4 43.7957 4 11.4423 4 16.1747 5 13.2276 4 87.9062 5 2.0 2 7.0188 10 20.026 5 57.2086 5 11.5364 9 7.7493 9 1.0673 5 23.5261 5 10.4066 8 9.3283 5 24.2239 7 3.6199 9 21.0 5)
Average genome size in population (length): 32.779
Average program size in population (points): 33.779
Average percent parens in population: 0.030
Minimum age in population: 9.6875
Maximum age in population: 13.921875
Average age in population: 12.1038671875
Median age in population: 12.1640625
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 223
Genome diversity (% unique Plush genomes):	 0.54
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 223
Syntactic diversity (% unique Push programs):	 0.54
Total error diversity:				 0.04
Error (vector) diversity:			 0.041
Behavioral diversity:				 0.042
--- Run Statistics ---
Number of program evaluations used so far: 9000
Number of point (instruction) evaluations so far: 11302415
--- Timings ---
Current time: 1529614926145 milliseconds
Total Time:          32.4 seconds
Initialization:       0.1 seconds,  0.4%
Reproduction:        14.9 seconds, 46.1%
Fitness Testing:     14.0 seconds, 43.2%
Report:               3.3 seconds, 10.3%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 8
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 9
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 9
;;******************************
;; -*- Number IO problem report - generation 9
Test total error for best: 59661.192500000034
Test mean error for best: 29.83060
;;------------------------------
Outputs of best individual on training cases:
Correct output: -116.076402553 | Program output: -40.01600     
Correct output: 24.1400847456  | Program output: -9.081        
Correct output: 69.833290954   | Program output: 21.0441       
Correct output: 82.4958592801  | Program output: 95.09025      
Correct output: 34.2385110874  | Program output: 82.06724      
Correct output: -10.7358110665 | Program output: 48.02304      
Correct output: 1.9700532093   | Program output: -10.0100      
Correct output: -44.7956976677 | Program output: 52.02704      
Correct output: 68.5576547673  | Program output: 47.02209      
Correct output: -69.2536523379 | Program output: -53.02809     
Correct output: -14.2275745396 | Program output: 42.01764      
Correct output: -171.9767905886 | Program output: -84.07056     
Correct output: -32.1846093265 | Program output: 2.04          
Correct output: 66.9812146721  | Program output: 74.05476      
Correct output: 100.0259781081 | Program output: 35.01225      
Correct output: -90.2595503995 | Program output: -33.01089     
Correct output: -82.4635707651 | Program output: -95.09025     
Correct output: -8.7492896214  | Program output: -49.02401     
Correct output: -82.1329348831 | Program output: -81.06561     
Correct output: 24.5261129925  | Program output: -72.05184     
Correct output: -11.4065589042 | Program output: -52.02704     
Correct output: 10.3282540908  | Program output: -76.05776     
Correct output: -51.7760580299 | Program output: -77.05929     
Correct output: 51.8185003253  | Program output: 75.05625      
Correct output: 110.7431489201 | Program output: 21.0441       
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_yankdup} {:instruction float_add} {:instruction float_rot} {:instruction float_mult} {:instruction float_pop} {:instruction float_mult} {:instruction in2} {:instruction float_max} {:instruction integer_dup} {:instruction float_add} {:instruction integer_mult} {:instruction float_mult} {:instruction float_pop} {:instruction float_mult} {:instruction in2} {:instruction float_max} {:instruction integer_dup} {:instruction integer_pop} {:instruction float_dup} {:instruction float_cos} {:instruction float_frominteger} {:instruction integer_swap} {:instruction integer_mod} {:instruction integer_dup} {:instruction 80} {:instruction float_dup_items} {:instruction print_float} {:instruction integer_dup_items} {:instruction float_swap} {:instruction integer_yankdup} {:instruction float_mult} {:instruction integer_max} {:instruction integer_stackdepth} {:instruction float_dup} {:instruction integer_shove} {:instruction tagged_472} {:instruction integer_mult} {:instruction integer_div} {:instruction print_integer} {:instruction float_mult})
Best program: (float_yankdup float_add float_rot float_mult float_pop float_mult in2 float_max integer_dup float_add integer_mult float_mult float_pop float_mult in2 float_max integer_dup integer_pop float_dup float_cos float_frominteger integer_swap integer_mod integer_dup 80 float_dup_items print_float integer_dup_items float_swap integer_yankdup float_mult integer_max integer_stackdepth float_dup integer_shove tagged_472 integer_mult integer_div print_integer float_mult)
Errors: [76.0604 9 33.2211 10 48.7892 10 12.5944 10 47.8287 10 58.7589 12 11.9801 10 96.8227 12 21.5356 12 16.2256 9 56.2452 11 87.9062 9 34.2246 11 7.0735 10 65.0137 11 57.2487 10 12.6267 10 40.2747 9 1.0673 10 96.578 12 40.6205 9 86.386 12 25.2832 7 23.2377 9 89.699 9]
Total: 1400.3017
Mean: 28.006035
Genome size: 40
Size: 41
Percent parens: 0.024
--- Population Statistics ---
Average total errors in population: 2522.9720827000233
Median total errors in population: 1418.8380999999997
Error averages by case: (133.20661350000177 10.101 79.28128419999985 10.29 75.75698489999907 10.096 50.401296399999396 10.109 79.92310149999928 10.89 88.23778949999956 12.023 60.149000899999415 10.049 124.8997268000013 12.862 57.002320899999454 11.212 78.04608260000072 10.905 86.02378509999902 11.896 147.38639420000078 11.721 53.70785810000039 11.087 44.21988459999981 11.694 97.98869859999907 11.138 115.17088170000065 11.016 76.25343949999912 10.906 96.32667829999983 10.043 65.81716509999912 10.94 147.4822011 11.977 96.81984559999935 10.115 137.83056879999785 11.323 85.68051729999911 9.166 58.227104099999416 10.078 114.7248594000017 10.771)
Error minima by case: (75.0764 9 10.2813 9 10.1667 9 2.4959 9 0.1829 6 9.9676 9 0.0999 8 38.7424 11 11.4423 9 15.2537 9 13.3111 10 86.9768 9 29.9996 9 6.0188 9 20.026 9 56.2596 10 11.5364 8 8.7493 9 0.1329 9 9.8953 9 10.4199 8 8.2883 9 24.2239 7 17.3971 9 30.7431 8)
Average genome size in population (length): 33.82
Average program size in population (points): 34.82
Average percent parens in population: 0.029
Minimum age in population: 10.9921875
Maximum age in population: 15.58984375
Average age in population: 13.64225390625
Median age in population: 13.740234375
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 154
Genome diversity (% unique Plush genomes):	 0.575
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 154
Syntactic diversity (% unique Push programs):	 0.575
Total error diversity:				 0.052
Error (vector) diversity:			 0.053
Behavioral diversity:				 0.054
--- Run Statistics ---
Number of program evaluations used so far: 10000
Number of point (instruction) evaluations so far: 12147915
--- Timings ---
Current time: 1529614929041 milliseconds
Total Time:          35.2 seconds
Initialization:       0.1 seconds,  0.3%
Reproduction:        16.5 seconds, 46.7%
Fitness Testing:     15.0 seconds, 42.6%
Report:               3.6 seconds, 10.3%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 9
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 10
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 10
;;******************************
;; -*- Number IO problem report - generation 10
Test total error for best: 59801.639999999934
Test mean error for best: 29.90082
;;------------------------------
Outputs of best individual on training cases:
Correct output: -116.076402553 | Program output: -40.015600    
Correct output: 24.1400847456  | Program output: -9.0720       
Correct output: 69.833290954   | Program output: 21.0210       
Correct output: 82.4958592801  | Program output: 95.0950       
Correct output: 34.2385110874  | Program output: 82.0820       
Correct output: -10.7358110665 | Program output: 48.0480       
Correct output: 1.9700532093   | Program output: -10.0900      
Correct output: -44.7956976677 | Program output: 52.0520       
Correct output: 68.5576547673  | Program output: 47.0470       
Correct output: -69.2536523379 | Program output: -53.027560    
Correct output: -14.2275745396 | Program output: 42.0420       
Correct output: -171.9767905886 | Program output: -84.069720    
Correct output: -32.1846093265 | Program output: 2.020         
Correct output: 66.9812146721  | Program output: 74.0740       
Correct output: 100.0259781081 | Program output: 35.0350       
Correct output: -90.2595503995 | Program output: -33.010560    
Correct output: -82.4635707651 | Program output: -95.089300    
Correct output: -8.7492896214  | Program output: -49.023520    
Correct output: -82.1329348831 | Program output: -81.064800    
Correct output: 24.5261129925  | Program output: -72.051120    
Correct output: -11.4065589042 | Program output: -52.026520    
Correct output: 10.3282540908  | Program output: -76.057000    
Correct output: -51.7760580299 | Program output: -77.058520    
Correct output: 51.8185003253  | Program output: 75.0750       
Correct output: 110.7431489201 | Program output: 21.0210       
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_yankdup} {:instruction float_add} {:instruction integer_mult} {:instruction float_mult} {:instruction float_pop} {:instruction float_mult} {:instruction in2} {:instruction float_max} {:instruction integer_dup} {:instruction float_add} {:instruction integer_mult} {:instruction float_mult} {:instruction float_pop} {:instruction float_mult} {:instruction in2} {:instruction float_max} {:instruction float_pop} {:instruction float_mult} {:instruction in2} {:instruction float_max} {:instruction integer_dup} {:instruction integer_pop} {:instruction float_dup} {:instruction float_cos} {:instruction float_frominteger} {:instruction integer_swap} {:instruction integer_mod} {:instruction integer_dup} {:instruction 80} {:instruction float_dup_items} {:instruction print_float} {:instruction float_frominteger} {:instruction print_integer} {:instruction integer_yankdup} {:instruction float_mult} {:instruction integer_max} {:instruction integer_stackdepth} {:instruction float_dup} {:instruction integer_shove} {:instruction float_inc} {:instruction integer_mult} {:instruction integer_div} {:instruction print_integer} {:instruction float_mult})
Best program: (float_yankdup float_add integer_mult float_mult float_pop float_mult in2 float_max integer_dup float_add integer_mult float_mult float_pop float_mult in2 float_max float_pop float_mult in2 float_max integer_dup integer_pop float_dup float_cos float_frominteger integer_swap integer_mod integer_dup 80 float_dup_items print_float float_frominteger print_integer integer_yankdup float_mult integer_max integer_stackdepth float_dup integer_shove float_inc integer_mult integer_div print_integer float_mult)
Errors: [76.0608 10 33.2121 10 48.8123 9 12.5991 9 47.8435 10 58.7838 11 12.0601 10 96.8477 12 21.5107 10 16.2261 10 56.2696 11 87.9071 11 34.2046 10 7.0928 11 64.991 10 57.249 10 12.6257 11 40.2742 10 1.0681 9 96.5772 10 40.62 9 86.3853 10 25.2825 7 23.2565 10 89.7221 10]
Total: 1397.4818999999998
Mean: 27.949638
Genome size: 44
Size: 45
Percent parens: 0.022
--- Population Statistics ---
Average total errors in population: 3167.273569400013
Median total errors in population: 1415.5621
Error averages by case: (156.77063220000005 9.798 83.90033709999975 10.307 98.48869169999949 10.097 86.64818530000075 10.06 115.79223459999872 10.506 124.68104719999978 11.939 66.98937120000014 9.932 159.81990399999964 12.498 93.90801080000082 11.551 102.6835145000011 10.332 122.6229952000002 11.482 169.6146963999995 10.719 63.69288680000057 11.06 81.14774469999956 10.953 133.59240499999925 11.077 139.31813799999935 10.669 100.18963769999911 10.491 120.81041119999934 9.706 90.18811979999934 10.544 170.1789894999997 11.85 121.23387320000052 9.869 160.83348099999867 11.688 108.82535390000052 8.597 94.78886489999982 9.746 135.08404349999938 9.999)
Error minima by case: (36.0604 8 10.3563 9 10.1667 8 2.4959 9 0.2579 9 9.9676 9 1.426 8 38.7424 11 11.4423 9 16.1727 9 13.3111 10 3.9062 8 29.9996 9 7.0188 9 20.026 10 24.2487 10 11.5364 8 8.7493 9 1.0429 9 9.9703 9 10.4199 8 9.5039 9 24.2239 7 9.7623 8 30.7431 8)
Average genome size in population (length): 37.254
Average program size in population (points): 38.254
Average percent parens in population: 0.027
Minimum age in population: 12.58984375
Maximum age in population: 16.91015625
Average age in population: 15.2164140625
Median age in population: 15.2861328125
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 152
Genome diversity (% unique Plush genomes):	 0.556
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 152
Syntactic diversity (% unique Push programs):	 0.556
Total error diversity:				 0.079
Error (vector) diversity:			 0.08
Behavioral diversity:				 0.08
--- Run Statistics ---
Number of program evaluations used so far: 11000
Number of point (instruction) evaluations so far: 13079265
--- Timings ---
Current time: 1529614932086 milliseconds
Total Time:          38.3 seconds
Initialization:       0.1 seconds,  0.3%
Reproduction:        18.0 seconds, 47.0%
Fitness Testing:     16.2 seconds, 42.3%
Report:               4.0 seconds, 10.4%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 10
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 11
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 11
;;******************************
;; -*- Number IO problem report - generation 11
Test total error for best: 59801.639999999934
Test mean error for best: 29.90082
;;------------------------------
Outputs of best individual on training cases:
Correct output: -116.076402553 | Program output: -40.015600    
Correct output: 24.1400847456  | Program output: -9.0720       
Correct output: 69.833290954   | Program output: 21.0210       
Correct output: 82.4958592801  | Program output: 95.0950       
Correct output: 34.2385110874  | Program output: 82.0820       
Correct output: -10.7358110665 | Program output: 48.0480       
Correct output: 1.9700532093   | Program output: -10.0900      
Correct output: -44.7956976677 | Program output: 52.0520       
Correct output: 68.5576547673  | Program output: 47.0470       
Correct output: -69.2536523379 | Program output: -53.027560    
Correct output: -14.2275745396 | Program output: 42.0420       
Correct output: -171.9767905886 | Program output: -84.069720    
Correct output: -32.1846093265 | Program output: 2.020         
Correct output: 66.9812146721  | Program output: 74.0740       
Correct output: 100.0259781081 | Program output: 35.0350       
Correct output: -90.2595503995 | Program output: -33.010560    
Correct output: -82.4635707651 | Program output: -95.089300    
Correct output: -8.7492896214  | Program output: -49.023520    
Correct output: -82.1329348831 | Program output: -81.064800    
Correct output: 24.5261129925  | Program output: -72.051120    
Correct output: -11.4065589042 | Program output: -52.026520    
Correct output: 10.3282540908  | Program output: -76.057000    
Correct output: -51.7760580299 | Program output: -77.058520    
Correct output: 51.8185003253  | Program output: 75.0750       
Correct output: 110.7431489201 | Program output: 21.0210       
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_yankdup} {:instruction float_add} {:instruction integer_mult} {:instruction float_mult} {:instruction float_pop} {:instruction float_mult} {:instruction in2} {:instruction float_max} {:instruction integer_dup} {:instruction float_add} {:instruction integer_mult} {:instruction float_mult} {:instruction float_pop} {:instruction float_mult} {:instruction in2} {:instruction float_max} {:instruction float_pop} {:instruction float_mult} {:instruction in2} {:instruction float_max} {:instruction integer_dup} {:instruction integer_pop} {:instruction float_dup} {:instruction float_cos} {:instruction float_frominteger} {:instruction integer_swap} {:instruction integer_mod} {:instruction integer_dup} {:instruction 80} {:instruction float_dup_items} {:instruction print_float} {:instruction float_frominteger} {:instruction print_integer} {:instruction integer_yankdup} {:instruction float_mult} {:instruction integer_max} {:instruction integer_stackdepth} {:instruction float_dup} {:instruction integer_shove} {:instruction float_inc} {:instruction integer_mult} {:instruction integer_div} {:instruction print_integer} {:instruction float_mult})
Best program: (float_yankdup float_add integer_mult float_mult float_pop float_mult in2 float_max integer_dup float_add integer_mult float_mult float_pop float_mult in2 float_max float_pop float_mult in2 float_max integer_dup integer_pop float_dup float_cos float_frominteger integer_swap integer_mod integer_dup 80 float_dup_items print_float float_frominteger print_integer integer_yankdup float_mult integer_max integer_stackdepth float_dup integer_shove float_inc integer_mult integer_div print_integer float_mult)
Errors: [76.0608 10 33.2121 10 48.8123 9 12.5991 9 47.8435 10 58.7838 11 12.0601 10 96.8477 12 21.5107 10 16.2261 10 56.2696 11 87.9071 11 34.2046 10 7.0928 11 64.991 10 57.249 10 12.6257 11 40.2742 10 1.0681 9 96.5772 10 40.62 9 86.3853 10 25.2825 7 23.2565 10 89.7221 10]
Total: 1397.4818999999998
Mean: 27.949638
Genome size: 44
Size: 45
Percent parens: 0.022
--- Population Statistics ---
Average total errors in population: 3767.726389099993
Median total errors in population: 1400.3017
Error averages by case: (188.97514919999796 9.382 93.14779829999968 10.21 105.34689879999947 10.112 107.68450930000135 10.078 138.08578449999902 10.215 147.46304859999935 11.958 77.40022100000049 9.908 181.76305799999852 12.202 115.29074420000147 11.832 136.82740250000194 9.681 145.3030333000014 11.168 200.47309829999884 9.806 70.26053330000065 11.066 102.54590359999922 10.461 154.20750370000022 11.037 172.30258179999802 10.352 134.1305981999979 10.298 155.9629368000003 9.478 124.24042369999853 10.332 204.25123530000081 11.868 156.32345149999972 9.5 195.33960409999867 11.863 144.19970500000193 7.885 116.60593369999937 9.397 140.01023239999788 9.496)
Error minima by case: (40.0 6 0.3214 4 10.1667 5 1.5944 9 10.4198 9 10.0957 6 0.1199 4 44.183 6 11.4423 6 15.2537 6 13.8276 6 84.0 6 2.0 2 6.0188 9 16.0137 7 33.0 6 11.6267 8 8.7493 9 0.1329 6 0.7074 6 10.7938 7 8.2713 6 24.2832 7 22.1815 8 21.0 6)
Average genome size in population (length): 40.21
Average program size in population (points): 41.21
Average percent parens in population: 0.024
Minimum age in population: 14.48046875
Maximum age in population: 18.572265625
Average age in population: 16.690416015625
Median age in population: 16.7568359375
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 205
Genome diversity (% unique Plush genomes):	 0.541
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 205
Syntactic diversity (% unique Push programs):	 0.541
Total error diversity:				 0.062
Error (vector) diversity:			 0.063
Behavioral diversity:				 0.064
--- Run Statistics ---
Number of program evaluations used so far: 12000
Number of point (instruction) evaluations so far: 14084515
--- Timings ---
Current time: 1529614935110 milliseconds
Total Time:          41.3 seconds
Initialization:       0.1 seconds,  0.3%
Reproduction:        19.5 seconds, 47.2%
Fitness Testing:     17.4 seconds, 42.1%
Report:               4.3 seconds, 10.5%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 11
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 12
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 12
;;******************************
;; -*- Number IO problem report - generation 12
Test total error for best: 59801.639999999934
Test mean error for best: 29.90082
;;------------------------------
Outputs of best individual on training cases:
Correct output: -116.076402553 | Program output: -40.015600    
Correct output: 24.1400847456  | Program output: -9.0720       
Correct output: 69.833290954   | Program output: 21.0210       
Correct output: 82.4958592801  | Program output: 95.0950       
Correct output: 34.2385110874  | Program output: 82.0820       
Correct output: -10.7358110665 | Program output: 48.0480       
Correct output: 1.9700532093   | Program output: -10.0900      
Correct output: -44.7956976677 | Program output: 52.0520       
Correct output: 68.5576547673  | Program output: 47.0470       
Correct output: -69.2536523379 | Program output: -53.027560    
Correct output: -14.2275745396 | Program output: 42.0420       
Correct output: -171.9767905886 | Program output: -84.069720    
Correct output: -32.1846093265 | Program output: 2.020         
Correct output: 66.9812146721  | Program output: 74.0740       
Correct output: 100.0259781081 | Program output: 35.0350       
Correct output: -90.2595503995 | Program output: -33.010560    
Correct output: -82.4635707651 | Program output: -95.089300    
Correct output: -8.7492896214  | Program output: -49.023520    
Correct output: -82.1329348831 | Program output: -81.064800    
Correct output: 24.5261129925  | Program output: -72.051120    
Correct output: -11.4065589042 | Program output: -52.026520    
Correct output: 10.3282540908  | Program output: -76.057000    
Correct output: -51.7760580299 | Program output: -77.058520    
Correct output: 51.8185003253  | Program output: 75.0750       
Correct output: 110.7431489201 | Program output: 21.0210       
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_yankdup} {:instruction float_add} {:instruction integer_mult} {:instruction float_mult} {:instruction float_pop} {:instruction float_mult} {:instruction in2} {:instruction float_max} {:instruction integer_dup} {:instruction float_add} {:instruction integer_mult} {:instruction float_mult} {:instruction float_pop} {:instruction float_mult} {:instruction in2} {:instruction float_max} {:instruction float_pop} {:instruction float_mult} {:instruction in2} {:instruction float_max} {:instruction integer_dup} {:instruction integer_pop} {:instruction float_dup} {:instruction float_cos} {:instruction float_frominteger} {:instruction integer_swap} {:instruction integer_mod} {:instruction integer_dup} {:instruction 80} {:instruction float_dup_items} {:instruction print_float} {:instruction float_frominteger} {:instruction print_integer} {:instruction integer_yankdup} {:instruction float_mult} {:instruction integer_max} {:instruction integer_stackdepth} {:instruction float_dup} {:instruction integer_shove} {:instruction float_inc} {:instruction integer_mult} {:instruction integer_div} {:instruction print_integer})
Best program: (float_yankdup float_add integer_mult float_mult float_pop float_mult in2 float_max integer_dup float_add integer_mult float_mult float_pop float_mult in2 float_max float_pop float_mult in2 float_max integer_dup integer_pop float_dup float_cos float_frominteger integer_swap integer_mod integer_dup 80 float_dup_items print_float float_frominteger print_integer integer_yankdup float_mult integer_max integer_stackdepth float_dup integer_shove float_inc integer_mult integer_div print_integer)
Errors: [76.0608 10 33.2121 10 48.8123 9 12.5991 9 47.8435 10 58.7838 11 12.0601 10 96.8477 12 21.5107 10 16.2261 10 56.2696 11 87.9071 11 34.2046 10 7.0928 11 64.991 10 57.249 10 12.6257 11 40.2742 10 1.0681 9 96.5772 10 40.62 9 86.3853 10 25.2825 7 23.2565 10 89.7221 10]
Total: 1397.4818999999998
Mean: 27.949638
Genome size: 43
Size: 44
Percent parens: 0.023
--- Population Statistics ---
Average total errors in population: 3720.5541032999904
Median total errors in population: 1400.3017
Error averages by case: (188.7440883999978 9.364 99.18642579999934 10.192 103.71160789999946 10.095 102.64933790000129 10.074 133.08957279999882 10.204 142.1181357999997 11.963 83.40563900000048 9.912 176.72093089999865 12.188 109.86126380000151 11.849 136.49534380000193 9.648 139.88598070000145 11.161 200.11897429999883 9.764 64.55632660000069 11.064 97.25614899999918 10.446 148.96738089999977 11.036 172.07433419999782 10.323 133.72258419999747 10.273 155.82833609999975 9.466 123.81082989999835 10.311 204.379594300001 11.87 156.18248180000012 9.468 195.37522669999865 11.86 143.90764300000188 7.832 110.43221129999928 9.365 138.8737041999978 9.472)
Error minima by case: (40.0 6 9.0 4 10.1667 4 2.4959 9 33.2385 9 10.0957 4 0.9701 3 44.6327 4 11.4423 4 16.1737 6 13.8276 4 84.0 6 2.0 2 7.0188 10 20.026 5 33.0 6 11.6267 8 8.7493 9 1.0529 6 23.5261 6 11.2436 8 9.3283 6 24.2832 7 23.1815 9 21.0 5)
Average genome size in population (length): 40.458
Average program size in population (points): 41.458
Average percent parens in population: 0.024
Minimum age in population: 15.5703125
Maximum age in population: 19.9462890625
Average age in population: 18.13822705078125
Median age in population: 18.18994140625
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 165
Genome diversity (% unique Plush genomes):	 0.584
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 165
Syntactic diversity (% unique Push programs):	 0.584
Total error diversity:				 0.061
Error (vector) diversity:			 0.063
Behavioral diversity:				 0.063
--- Run Statistics ---
Number of program evaluations used so far: 13000
Number of point (instruction) evaluations so far: 15095965
--- Timings ---
Current time: 1529614938302 milliseconds
Total Time:          44.4 seconds
Initialization:       0.1 seconds,  0.3%
Reproduction:        21.0 seconds, 47.3%
Fitness Testing:     18.6 seconds, 41.9%
Report:               4.7 seconds, 10.6%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 12
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 13
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 13
;;******************************
;; -*- Number IO problem report - generation 13
Test total error for best: 59692.56750000004
Test mean error for best: 29.84628
;;------------------------------
Outputs of best individual on training cases:
Correct output: -116.076402553 | Program output: -40.015601600 
Correct output: 24.1400847456  | Program output: -9.07281      
Correct output: 69.833290954   | Program output: 21.021441     
Correct output: 82.4958592801  | Program output: 95.0959025    
Correct output: 34.2385110874  | Program output: 82.0826724    
Correct output: -10.7358110665 | Program output: 48.0482304    
Correct output: 1.9700532093   | Program output: -10.090100    
Correct output: -44.7956976677 | Program output: 52.0522704    
Correct output: 68.5576547673  | Program output: 47.0472209    
Correct output: -69.2536523379 | Program output: -53.027562809 
Correct output: -14.2275745396 | Program output: 42.0421764    
Correct output: -171.9767905886 | Program output: -84.069727056 
Correct output: -32.1846093265 | Program output: 2.024         
Correct output: 66.9812146721  | Program output: 74.0745476    
Correct output: 100.0259781081 | Program output: 35.0351225    
Correct output: -90.2595503995 | Program output: -33.010561089 
Correct output: -82.4635707651 | Program output: -95.089309025 
Correct output: -8.7492896214  | Program output: -49.023522401 
Correct output: -82.1329348831 | Program output: -81.064806561 
Correct output: 24.5261129925  | Program output: -72.051125184 
Correct output: -11.4065589042 | Program output: -52.026522704 
Correct output: 10.3282540908  | Program output: -76.057005776 
Correct output: -51.7760580299 | Program output: -77.058525929 
Correct output: 51.8185003253  | Program output: 75.0755625    
Correct output: 110.7431489201 | Program output: 21.021441     
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_yankdup} {:instruction float_add} {:instruction integer_mult} {:instruction float_mult} {:instruction float_pop} {:instruction float_mult} {:instruction in2} {:instruction float_max} {:instruction integer_dup} {:instruction float_add} {:instruction integer_mult} {:instruction float_mult} {:instruction integer_dup} {:instruction float_mult} {:instruction in2} {:instruction float_max} {:instruction float_pop} {:instruction float_mult} {:instruction in2} {:instruction float_max} {:instruction integer_dup} {:instruction integer_pop} {:instruction float_dup} {:instruction float_cos} {:instruction float_frominteger} {:instruction integer_swap} {:instruction integer_mod} {:instruction integer_dup} {:instruction 80} {:instruction float_dup_items} {:instruction print_float} {:instruction float_frominteger} {:instruction print_integer} {:instruction integer_yankdup} {:instruction float_stackdepth} {:instruction integer_max} {:instruction integer_stackdepth} {:instruction float_dup} {:instruction integer_shove} {:instruction float_inc} {:instruction integer_mult} {:instruction integer_div} {:instruction print_integer} {:instruction float_mult})
Best program: (float_yankdup float_add integer_mult float_mult float_pop float_mult in2 float_max integer_dup float_add integer_mult float_mult integer_dup float_mult in2 float_max float_pop float_mult in2 float_max integer_dup integer_pop float_dup float_cos float_frominteger integer_swap integer_mod integer_dup 80 float_dup_items print_float float_frominteger print_integer integer_yankdup float_stackdepth integer_max integer_stackdepth float_dup integer_shove float_inc integer_mult integer_div print_integer float_mult)
Errors: [76.0608 10 33.2129 10 48.8118 10 12.6 9 47.8442 10 58.784 11 12.0602 10 96.848 11 21.5104 11 16.2261 9 56.2698 11 87.9071 9 34.2086 10 7.0933 10 64.9909 10 57.249 10 12.6257 10 40.2742 11 1.0681 10 96.5772 10 40.62 8 86.3853 13 25.2825 7 23.2571 9 89.7217 9]
Total: 1395.4889
Mean: 27.909779
Genome size: 44
Size: 45
Percent parens: 0.022
--- Population Statistics ---
Average total errors in population: 3915.9868685999904
Median total errors in population: 1400.3017
Error averages by case: (194.43615529999815 9.414 98.54102129999943 10.215 112.97886239999954 10.109 114.94208160000147 10.064 143.73046559999977 10.218 152.8161632999987 11.95 82.17870880000058 9.924 186.86010699999844 12.215 122.45714620000157 11.813 143.51450330000185 9.726 150.68813450000167 11.174 205.88863579999892 9.84 70.23024590000057 11.053 108.78230649999924 10.489 161.18320120000106 11.017 178.78144429999784 10.35 140.7869052999977 10.331 162.49181780000052 9.522 130.99930659999856 10.322 209.61221570000083 11.82 161.87466339999926 9.489 200.6741353999985 11.819 150.7593054000018 7.862 123.56602419999932 9.409 147.52731179999776 9.541)
Error minima by case: (55.6555 8 16.9409 9 10.1667 9 2.4959 9 6.8287 9 0.7358 8 0.0399 8 15.6252 11 11.4423 10 8.8327 9 1.6486 10 86.9062 9 16.3084 10 6.0735 10 20.026 9 29.8386 9 11.6267 8 1.2507 8 0.0673 8 16.5257 7 1.4066 8 8.2705 9 8.6449 7 10.7623 8 30.7431 8)
Average genome size in population (length): 40.616
Average program size in population (points): 41.616
Average percent parens in population: 0.024
Minimum age in population: 16.828125
Maximum age in population: 21.397705078125
Average age in population: 19.528759765625
Median age in population: 19.54931640625
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 114
Genome diversity (% unique Plush genomes):	 0.636
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 114
Syntactic diversity (% unique Push programs):	 0.636
Total error diversity:				 0.077
Error (vector) diversity:			 0.081
Behavioral diversity:				 0.082
--- Run Statistics ---
Number of program evaluations used so far: 14000
Number of point (instruction) evaluations so far: 16111365
--- Timings ---
Current time: 1529614941767 milliseconds
Total Time:          47.8 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        22.6 seconds, 47.3%
Fitness Testing:     20.0 seconds, 41.7%
Report:               5.1 seconds, 10.7%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 13
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 14
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 14
;;******************************
;; -*- Number IO problem report - generation 14
Test total error for best: 59692.57050000003
Test mean error for best: 29.84629
;;------------------------------
Outputs of best individual on training cases:
Correct output: -116.076402553 | Program output: -40.015601600 
Correct output: 24.1400847456  | Program output: -9.07281      
Correct output: 69.833290954   | Program output: 21.021441     
Correct output: 82.4958592801  | Program output: 95.0959025    
Correct output: 34.2385110874  | Program output: 82.0826724    
Correct output: -10.7358110665 | Program output: 48.0482304    
Correct output: 1.9700532093   | Program output: -10.090100    
Correct output: -44.7956976677 | Program output: 52.0522704    
Correct output: 68.5576547673  | Program output: 47.0472209    
Correct output: -69.2536523379 | Program output: -53.027562809 
Correct output: -14.2275745396 | Program output: 42.0421764    
Correct output: -171.9767905886 | Program output: -84.069727056 
Correct output: -32.1846093265 | Program output: 2.024         
Correct output: 66.9812146721  | Program output: 74.0745476    
Correct output: 100.0259781081 | Program output: 35.0351225    
Correct output: -90.2595503995 | Program output: -33.010561089 
Correct output: -82.4635707651 | Program output: -95.089309025 
Correct output: -8.7492896214  | Program output: -49.023522401 
Correct output: -82.1329348831 | Program output: -81.064806561 
Correct output: 24.5261129925  | Program output: -72.051125184 
Correct output: -11.4065589042 | Program output: -52.026522704 
Correct output: 10.3282540908  | Program output: -76.057005776 
Correct output: -51.7760580299 | Program output: -77.058525929 
Correct output: 51.8185003253  | Program output: 75.0755625    
Correct output: 110.7431489201 | Program output: 21.021441     
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_yankdup} {:instruction float_add} {:instruction integer_mult} {:instruction float_mult} {:instruction float_pop} {:instruction float_mult} {:instruction in2} {:instruction float_max} {:instruction integer_dup} {:instruction float_add} {:instruction integer_mult} {:instruction float_mult} {:instruction float_pop} {:instruction float_mult} {:instruction in2} {:instruction float_max} {:instruction integer_dup} {:instruction float_add} {:instruction integer_mult} {:instruction float_mult} {:instruction float_pop} {:instruction float_mult} {:instruction in2} {:instruction float_max} {:instruction float_pop} {:instruction float_mult} {:instruction in2} {:instruction float_max} {:instruction integer_dup} {:instruction integer_pop} {:instruction float_dup} {:instruction float_cos} {:instruction float_frominteger} {:instruction integer_swap} {:instruction integer_mod} {:instruction integer_dup} {:instruction 80} {:instruction float_dup_items} {:instruction print_float} {:instruction float_frominteger} {:instruction print_integer} {:instruction integer_yankdup} {:instruction float_mult} {:instruction integer_max} {:instruction integer_stackdepth} {:instruction float_dup} {:instruction integer_shove} {:instruction float_inc} {:instruction integer_mult} {:instruction integer_div} {:instruction print_integer} {:instruction float_mult})
Best program: (float_yankdup float_add integer_mult float_mult float_pop float_mult in2 float_max integer_dup float_add integer_mult float_mult float_pop float_mult in2 float_max integer_dup float_add integer_mult float_mult float_pop float_mult in2 float_max float_pop float_mult in2 float_max integer_dup integer_pop float_dup float_cos float_frominteger integer_swap integer_mod integer_dup 80 float_dup_items print_float float_frominteger print_integer integer_yankdup float_mult integer_max integer_stackdepth float_dup integer_shove float_inc integer_mult integer_div print_integer float_mult)
Errors: [76.0608 10 33.2129 10 48.8118 10 12.6 9 47.8442 10 58.784 11 12.0602 10 96.848 11 21.5104 11 16.2261 9 56.2698 11 87.9071 9 34.2086 10 7.0933 10 64.9909 10 57.249 10 12.6257 10 40.2742 11 1.0681 10 96.5772 10 40.62 8 86.3853 13 25.2825 7 23.2571 9 89.7217 9]
Total: 1395.4889
Mean: 27.909779
Genome size: 52
Size: 53
Percent parens: 0.019
--- Population Statistics ---
Average total errors in population: 3552.4550750999897
Median total errors in population: 1400.3017
Error averages by case: (180.4033658999994 9.514 93.01717319999983 10.168 98.58250189999983 9.909 97.6990140000014 9.853 127.90276289999943 10.188 136.27388080000046 11.8 77.13479370000073 9.88 171.13370779999968 12.173 103.97274910000091 11.472 127.6313510000016 9.8 133.92661160000125 11.146 191.93007859999946 10.072 63.502989200000236 10.856 91.86133909999923 10.577 142.9561496999994 10.842 163.55609159999875 10.31 124.8647076999985 10.458 147.20786459999965 9.634 114.83367289999899 10.114 196.2404169000003 11.485 147.56169250000016 9.398 187.14506919999835 11.485 135.12423310000185 7.735 106.0517995999999 9.504 133.94905849999805 9.619)
Error minima by case: (40.0 8 9.0 6 10.2108 6 2.4056 8 33.1713 9 10.3852 6 0.9601 5 8.207 6 11.4644 6 15.2256 9 14.2233 6 84.0 9 2.0 3 6.0188 10 20.0137 7 33.0 9 11.6267 8 8.7493 8 0.0673 8 23.4743 9 10.7938 8 9.2705 9 1.2299 7 22.1815 8 21.0 7)
Average genome size in population (length): 41.209
Average program size in population (points): 42.209
Average percent parens in population: 0.024
Minimum age in population: 18.414794921875
Maximum age in population: 22.86181640625
Average age in population: 20.94336071777344
Median age in population: 20.96380615234375
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 84
Genome diversity (% unique Plush genomes):	 0.633
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 84
Syntactic diversity (% unique Push programs):	 0.633
Total error diversity:				 0.086
Error (vector) diversity:			 0.091
Behavioral diversity:				 0.091
--- Run Statistics ---
Number of program evaluations used so far: 15000
Number of point (instruction) evaluations so far: 17141590
--- Timings ---
Current time: 1529614944826 milliseconds
Total Time:          51.0 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        24.1 seconds, 47.2%
Fitness Testing:     21.2 seconds, 41.6%
Report:               5.6 seconds, 11.0%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 14
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 15
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 15
;;******************************
;; -*- Number IO problem report - generation 15
Test total error for best: 59692.57050000003
Test mean error for best: 29.84629
;;------------------------------
Outputs of best individual on training cases:
Correct output: -116.076402553 | Program output: -40.015601600 
Correct output: 24.1400847456  | Program output: -9.07281      
Correct output: 69.833290954   | Program output: 21.021441     
Correct output: 82.4958592801  | Program output: 95.0959025    
Correct output: 34.2385110874  | Program output: 82.0826724    
Correct output: -10.7358110665 | Program output: 48.0482304    
Correct output: 1.9700532093   | Program output: -10.090100    
Correct output: -44.7956976677 | Program output: 52.0522704    
Correct output: 68.5576547673  | Program output: 47.0472209    
Correct output: -69.2536523379 | Program output: -53.027562809 
Correct output: -14.2275745396 | Program output: 42.0421764    
Correct output: -171.9767905886 | Program output: -84.069727056 
Correct output: -32.1846093265 | Program output: 2.024         
Correct output: 66.9812146721  | Program output: 74.0745476    
Correct output: 100.0259781081 | Program output: 35.0351225    
Correct output: -90.2595503995 | Program output: -33.010561089 
Correct output: -82.4635707651 | Program output: -95.089309025 
Correct output: -8.7492896214  | Program output: -49.023522401 
Correct output: -82.1329348831 | Program output: -81.064806561 
Correct output: 24.5261129925  | Program output: -72.051125184 
Correct output: -11.4065589042 | Program output: -52.026522704 
Correct output: 10.3282540908  | Program output: -76.057005776 
Correct output: -51.7760580299 | Program output: -77.058525929 
Correct output: 51.8185003253  | Program output: 75.0755625    
Correct output: 110.7431489201 | Program output: 21.021441     
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_yankdup} {:instruction float_add} {:instruction integer_mult} {:instruction float_mult} {:instruction float_pop} {:instruction float_mult} {:instruction in2} {:instruction float_max} {:instruction integer_dup} {:instruction float_pop} {:instruction float_mult} {:instruction in2} {:instruction float_max} {:instruction integer_dup} {:instruction float_add} {:instruction integer_mult} {:instruction float_mult} {:instruction float_pop} {:instruction float_mult} {:instruction in2} {:instruction float_max} {:instruction float_pop} {:instruction float_mult} {:instruction in2} {:instruction float_max} {:instruction integer_dup} {:instruction integer_pop} {:instruction float_dup} {:instruction float_cos} {:instruction float_frominteger} {:instruction integer_swap} {:instruction integer_mod} {:instruction integer_dup} {:instruction 80} {:instruction float_dup_items} {:instruction print_float} {:instruction float_frominteger} {:instruction print_integer} {:instruction integer_yankdup} {:instruction float_mult} {:instruction integer_stackdepth} {:instruction float_dup} {:instruction integer_shove} {:instruction float_inc} {:instruction integer_mult} {:instruction integer_div} {:instruction print_integer})
Best program: (float_yankdup float_add integer_mult float_mult float_pop float_mult in2 float_max integer_dup float_pop float_mult in2 float_max integer_dup float_add integer_mult float_mult float_pop float_mult in2 float_max float_pop float_mult in2 float_max integer_dup integer_pop float_dup float_cos float_frominteger integer_swap integer_mod integer_dup 80 float_dup_items print_float float_frominteger print_integer integer_yankdup float_mult integer_stackdepth float_dup integer_shove float_inc integer_mult integer_div print_integer)
Errors: [76.0608 10 33.2129 10 48.8118 10 12.6 9 47.8442 10 58.784 11 12.0602 10 96.848 11 21.5104 11 16.2261 9 56.2698 11 87.9071 9 34.2086 10 7.0933 10 64.9909 10 57.249 10 12.6257 10 40.2742 11 1.0681 10 96.5772 10 40.62 8 86.3853 13 25.2825 7 23.2571 9 89.7217 9]
Total: 1395.4889
Mean: 27.909779
Genome size: 47
Size: 48
Percent parens: 0.021
--- Population Statistics ---
Average total errors in population: 3871.6006471999995
Median total errors in population: 1397.4818999999998
Error averages by case: (195.1856792000019 9.855 123.73874270000049 10.153 115.59299950000069 9.553 102.63839700000162 9.483 133.1999147000007 10.174 141.55579240000094 11.419 109.07362270000107 9.849 176.3925519000009 12.115 108.61868519999985 10.7 143.39554660000042 10.146 139.14146460000003 11.162 206.60873240000146 10.758 70.78494169999942 10.46 96.75627419999918 10.895 147.1786813000001 10.487 178.6266408000007 10.322 141.0064566000004 10.801 163.1146269000019 10.022 130.9036385000003 9.691 211.67281020000004 10.706 163.47503409999848 9.324 202.82714789999767 10.756 151.19955900000107 7.761 111.10572820000102 9.859 151.39797890000037 9.958)
Error minima by case: (75.0508 6 22.0681 5 10.1667 5 2.4959 8 32.1565 9 9.9676 5 0.1199 5 44.6327 5 11.4423 5 15.1747 6 13.3111 5 86.9062 6 2.0 3 6.0188 10 3.9001 6 56.2477 6 11.6257 8 8.7493 8 0.0673 6 22.475 6 10.4199 7 8.2713 6 24.2825 7 22.1815 9 14.6173 6)
Average genome size in population (length): 43.03
Average program size in population (points): 44.03
Average percent parens in population: 0.023
Minimum age in population: 20.23046875
Maximum age in population: 24.5667724609375
Average age in population: 22.33643646240234
Median age in population: 22.35165405273438
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 176
Genome diversity (% unique Plush genomes):	 0.579
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 176
Syntactic diversity (% unique Push programs):	 0.579
Total error diversity:				 0.121
Error (vector) diversity:			 0.13
Behavioral diversity:				 0.13
--- Run Statistics ---
Number of program evaluations used so far: 16000
Number of point (instruction) evaluations so far: 18217340
--- Timings ---
Current time: 1529614947992 milliseconds
Total Time:          54.2 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        25.6 seconds, 47.3%
Fitness Testing:     22.5 seconds, 41.5%
Report:               6.0 seconds, 11.1%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 15
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 16
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 16
;;******************************
;; -*- Number IO problem report - generation 16
Test total error for best: 59771.30110000003
Test mean error for best: 29.88565
;;------------------------------
Outputs of best individual on training cases:
Correct output: -116.076402553 | Program output: -41.015601600 
Correct output: 24.1400847456  | Program output: -10.07281     
Correct output: 69.833290954   | Program output: 20.021441     
Correct output: 82.4958592801  | Program output: 94.0959025    
Correct output: 34.2385110874  | Program output: 81.0826724    
Correct output: -10.7358110665 | Program output: 47.0482304    
Correct output: 1.9700532093   | Program output: -11.090100    
Correct output: -44.7956976677 | Program output: 51.0522704    
Correct output: 68.5576547673  | Program output: 46.0472209    
Correct output: -69.2536523379 | Program output: -54.027562809 
Correct output: -14.2275745396 | Program output: 41.0421764    
Correct output: -171.9767905886 | Program output: -85.069727056 
Correct output: -32.1846093265 | Program output: 1.024         
Correct output: 66.9812146721  | Program output: 73.0745476    
Correct output: 100.0259781081 | Program output: 34.0351225    
Correct output: -90.2595503995 | Program output: -34.010561089 
Correct output: -82.4635707651 | Program output: -96.089309025 
Correct output: -8.7492896214  | Program output: -50.023522401 
Correct output: -82.1329348831 | Program output: -82.064806561 
Correct output: 24.5261129925  | Program output: -73.051125184 
Correct output: -11.4065589042 | Program output: -53.026522704 
Correct output: 10.3282540908  | Program output: -77.057005776 
Correct output: -51.7760580299 | Program output: -78.058525929 
Correct output: 51.8185003253  | Program output: 74.0755625    
Correct output: 110.7431489201 | Program output: 20.021441     
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_yankdup} {:instruction float_pop} {:instruction float_mult} {:instruction in2} {:instruction float_max} {:instruction integer_dup} {:instruction float_add} {:instruction integer_mult} {:instruction float_mult} {:instruction float_pop} {:instruction float_mult} {:instruction in2} {:instruction float_max} {:instruction float_pop} {:instruction float_mult} {:instruction integer_dup} {:instruction float_add} {:instruction float_mult} {:instruction integer_mult} {:instruction float_mult} {:instruction float_pop} {:instruction float_yankdup} {:instruction in2} {:instruction float_max} {:instruction float_pop} {:instruction float_mult} {:instruction in2} {:instruction float_max} {:instruction integer_dup} {:instruction integer_pop} {:instruction integer_dec} {:instruction float_cos} {:instruction float_frominteger} {:instruction integer_swap} {:instruction integer_mod} {:instruction integer_dup} {:instruction 80} {:instruction float_dup_items} {:instruction print_float} {:instruction float_frominteger} {:instruction print_integer} {:instruction integer_yankdup} {:instruction float_mult} {:instruction integer_max} {:instruction integer_stackdepth} {:instruction float_dup} {:instruction float_add} {:instruction float_inc} {:instruction integer_mult} {:instruction integer_div} {:instruction print_integer} {:instruction integer_flush})
Best program: (float_yankdup float_pop float_mult in2 float_max integer_dup float_add integer_mult float_mult float_pop float_mult in2 float_max float_pop float_mult integer_dup float_add float_mult integer_mult float_mult float_pop float_yankdup in2 float_max float_pop float_mult in2 float_max integer_dup integer_pop integer_dec float_cos float_frominteger integer_swap integer_mod integer_dup 80 float_dup_items print_float float_frominteger print_integer integer_yankdup float_mult integer_max integer_stackdepth float_dup float_add float_inc integer_mult integer_div print_integer integer_flush)
Errors: [75.0608 9 34.2129 10 49.8118 10 11.6 9 46.8442 10 57.784 11 13.0602 10 95.848 11 22.5104 11 15.2261 9 55.2698 11 86.9071 9 33.2086 11 6.0933 10 65.9909 10 56.249 10 13.6257 10 41.2742 11 0.0681 9 97.5772 10 41.62 8 87.3853 13 26.2825 8 22.2571 9 90.7217 9]
Total: 1394.4889
Mean: 27.889778
Genome size: 52
Size: 53
Percent parens: 0.019
--- Population Statistics ---
Average total errors in population: 4098.403727800006
Median total errors in population: 1397.4818999999998
Error averages by case: (207.30962770000295 9.941 148.0204878000011 10.147 119.71949740000096 9.477 106.89785430000182 9.312 136.79938170000122 10.061 144.00329670000144 11.244 134.01068540000134 9.842 178.6370985000011 11.98 111.33259619999939 10.461 156.54176860000004 10.213 141.41406579999975 11.117 218.73044530000223 10.833 75.36691149999906 10.341 100.39466299999911 10.891 149.17586949999978 10.309 191.07754640000132 10.306 154.4905592000012 10.863 175.85593260000243 10.295 144.46846690000092 9.541 223.50231219999984 10.41 176.2214632999982 9.208 214.80730329999747 10.79 164.34717000000086 7.811 114.66004830000132 9.87 155.41567620000035 9.94)
Error minima by case: (36.0604 3 9.0 3 9.1667 3 2.4959 8 33.2385 8 10.7358 3 0.9701 2 9.7957 3 10.4423 3 3.9912 3 14.2276 3 3.9062 3 2.0 2 6.0188 10 20.026 4 24.2487 3 11.6267 9 1.2507 8 0.0673 3 23.5261 3 1.4066 8 9.3283 3 13.4864 7 22.1815 8 21.0 4)
Average genome size in population (length): 44.832
Average program size in population (points): 45.832
Average percent parens in population: 0.022
Minimum age in population: 21.56036376953125
Maximum age in population: 25.58010864257812
Average age in population: 23.77522583007812
Median age in population: 23.80868530273438
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 146
Genome diversity (% unique Plush genomes):	 0.544
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 146
Syntactic diversity (% unique Push programs):	 0.544
Total error diversity:				 0.11
Error (vector) diversity:			 0.122
Behavioral diversity:				 0.122
--- Run Statistics ---
Number of program evaluations used so far: 17000
Number of point (instruction) evaluations so far: 19338140
--- Timings ---
Current time: 1529614951461 milliseconds
Total Time:          57.5 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        27.3 seconds, 47.4%
Fitness Testing:     23.8 seconds, 41.3%
Report:               6.4 seconds, 11.0%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 16
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 17
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 17
;;******************************
;; -*- Number IO problem report - generation 17
Test total error for best: 59771.30110000003
Test mean error for best: 29.88565
;;------------------------------
Outputs of best individual on training cases:
Correct output: -116.076402553 | Program output: -41.015601600 
Correct output: 24.1400847456  | Program output: -10.07281     
Correct output: 69.833290954   | Program output: 20.021441     
Correct output: 82.4958592801  | Program output: 94.0959025    
Correct output: 34.2385110874  | Program output: 81.0826724    
Correct output: -10.7358110665 | Program output: 47.0482304    
Correct output: 1.9700532093   | Program output: -11.090100    
Correct output: -44.7956976677 | Program output: 51.0522704    
Correct output: 68.5576547673  | Program output: 46.0472209    
Correct output: -69.2536523379 | Program output: -54.027562809 
Correct output: -14.2275745396 | Program output: 41.0421764    
Correct output: -171.9767905886 | Program output: -85.069727056 
Correct output: -32.1846093265 | Program output: 1.024         
Correct output: 66.9812146721  | Program output: 73.0745476    
Correct output: 100.0259781081 | Program output: 34.0351225    
Correct output: -90.2595503995 | Program output: -34.010561089 
Correct output: -82.4635707651 | Program output: -96.089309025 
Correct output: -8.7492896214  | Program output: -50.023522401 
Correct output: -82.1329348831 | Program output: -82.064806561 
Correct output: 24.5261129925  | Program output: -73.051125184 
Correct output: -11.4065589042 | Program output: -53.026522704 
Correct output: 10.3282540908  | Program output: -77.057005776 
Correct output: -51.7760580299 | Program output: -78.058525929 
Correct output: 51.8185003253  | Program output: 74.0755625    
Correct output: 110.7431489201 | Program output: 20.021441     
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_yankdup} {:instruction float_pop} {:instruction float_mult} {:instruction in2} {:instruction float_max} {:instruction integer_dup} {:instruction float_add} {:instruction integer_mult} {:instruction float_mult} {:instruction float_pop} {:instruction float_mult} {:instruction in2} {:instruction float_max} {:instruction float_pop} {:instruction float_mult} {:instruction integer_dup} {:instruction float_add} {:instruction float_mult} {:instruction integer_mult} {:instruction float_mult} {:instruction float_pop} {:instruction float_yankdup} {:instruction in2} {:instruction float_max} {:instruction float_pop} {:instruction float_mult} {:instruction in2} {:instruction float_max} {:instruction integer_dup} {:instruction integer_pop} {:instruction integer_dec} {:instruction float_cos} {:instruction float_frominteger} {:instruction integer_swap} {:instruction integer_mod} {:instruction integer_dup} {:instruction 80} {:instruction float_dup_items} {:instruction print_float} {:instruction float_frominteger} {:instruction print_integer} {:instruction integer_yankdup} {:instruction float_mult} {:instruction integer_max} {:instruction integer_stackdepth} {:instruction float_dup} {:instruction float_add} {:instruction float_inc} {:instruction integer_mult} {:instruction integer_div} {:instruction print_integer} {:instruction integer_flush})
Best program: (float_yankdup float_pop float_mult in2 float_max integer_dup float_add integer_mult float_mult float_pop float_mult in2 float_max float_pop float_mult integer_dup float_add float_mult integer_mult float_mult float_pop float_yankdup in2 float_max float_pop float_mult in2 float_max integer_dup integer_pop integer_dec float_cos float_frominteger integer_swap integer_mod integer_dup 80 float_dup_items print_float float_frominteger print_integer integer_yankdup float_mult integer_max integer_stackdepth float_dup float_add float_inc integer_mult integer_div print_integer integer_flush)
Errors: [75.0608 9 34.2129 10 49.8118 10 11.6 9 46.8442 10 57.784 11 13.0602 10 95.848 11 22.5104 11 15.2261 9 55.2698 11 86.9071 9 33.2086 11 6.0933 10 65.9909 10 56.249 10 13.6257 10 41.2742 11 0.0681 9 97.5772 10 41.62 8 87.3853 13 26.2825 8 22.2571 9 90.7217 9]
Total: 1394.4889
Mean: 27.889778
Genome size: 52
Size: 53
Percent parens: 0.019
--- Population Statistics ---
Average total errors in population: 5264.147787699998
Median total errors in population: 1397.4818999999998
Error averages by case: (259.3424111000032 9.953 204.91572720000195 10.207 160.90874489999922 9.797 144.1977299000022 9.352 173.2897425000001 10.068 181.23949330000184 11.296 190.64446880000244 9.868 214.46413600000065 11.783 149.9809642000001 10.767 212.17350040000008 10.091 178.9261942000001 11.185 269.771950000003 10.369 116.64216469999872 10.412 138.50871549999837 10.673 186.84508790000118 10.353 243.2967836000023 10.382 211.01959920000172 10.619 230.5391121000039 10.601 200.35151870000146 9.837 274.7086116999999 10.488 230.93272969999785 9.015 267.5901477999974 11.682 220.09655570000092 7.971 152.2027999000002 9.637 195.43689869999986 9.716)
Error minima by case: (75.0364 7 23.1401 9 10.1667 9 2.4959 8 32.2385 8 9.9676 10 0.9701 8 38.7424 11 11.4423 9 15.2137 8 13.3111 10 86.9054 9 29.9996 9 5.0735 9 20.026 9 56.2196 9 11.6257 8 6.7253 8 0.0665 7 16.5261 8 9.3795 7 6.3283 9 24.2825 7 21.2377 8 30.7431 8)
Average genome size in population (length): 47.116
Average program size in population (points): 48.116
Average percent parens in population: 0.021
Minimum age in population: 22.64910888671875
Maximum age in population: 27.13619995117188
Average age in population: 25.15455894470215
Median age in population: 25.16481018066406
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 134
Genome diversity (% unique Plush genomes):	 0.585
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 134
Syntactic diversity (% unique Push programs):	 0.585
Total error diversity:				 0.155
Error (vector) diversity:			 0.168
Behavioral diversity:				 0.168
--- Run Statistics ---
Number of program evaluations used so far: 18000
Number of point (instruction) evaluations so far: 20516040
--- Timings ---
Current time: 1529614954768 milliseconds
Total Time:          60.9 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        28.7 seconds, 47.2%
Fitness Testing:     25.2 seconds, 41.4%
Report:               6.9 seconds, 11.3%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 17
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 18
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 18
;;******************************
;; -*- Number IO problem report - generation 18
Test total error for best: 59771.30110000003
Test mean error for best: 29.88565
;;------------------------------
Outputs of best individual on training cases:
Correct output: -116.076402553 | Program output: -41.015601600 
Correct output: 24.1400847456  | Program output: -10.07281     
Correct output: 69.833290954   | Program output: 20.021441     
Correct output: 82.4958592801  | Program output: 94.0959025    
Correct output: 34.2385110874  | Program output: 81.0826724    
Correct output: -10.7358110665 | Program output: 47.0482304    
Correct output: 1.9700532093   | Program output: -11.090100    
Correct output: -44.7956976677 | Program output: 51.0522704    
Correct output: 68.5576547673  | Program output: 46.0472209    
Correct output: -69.2536523379 | Program output: -54.027562809 
Correct output: -14.2275745396 | Program output: 41.0421764    
Correct output: -171.9767905886 | Program output: -85.069727056 
Correct output: -32.1846093265 | Program output: 1.024         
Correct output: 66.9812146721  | Program output: 73.0745476    
Correct output: 100.0259781081 | Program output: 34.0351225    
Correct output: -90.2595503995 | Program output: -34.010561089 
Correct output: -82.4635707651 | Program output: -96.089309025 
Correct output: -8.7492896214  | Program output: -50.023522401 
Correct output: -82.1329348831 | Program output: -82.064806561 
Correct output: 24.5261129925  | Program output: -73.051125184 
Correct output: -11.4065589042 | Program output: -53.026522704 
Correct output: 10.3282540908  | Program output: -77.057005776 
Correct output: -51.7760580299 | Program output: -78.058525929 
Correct output: 51.8185003253  | Program output: 74.0755625    
Correct output: 110.7431489201 | Program output: 20.021441     
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_yankdup} {:instruction float_pop} {:instruction float_mult} {:instruction in2} {:instruction float_max} {:instruction integer_dup} {:instruction float_add} {:instruction integer_mult} {:instruction float_mult} {:instruction float_pop} {:instruction float_mult} {:instruction in2} {:instruction float_max} {:instruction float_pop} {:instruction float_mult} {:instruction integer_dup} {:instruction float_add} {:instruction float_mult} {:instruction integer_mult} {:instruction float_mult} {:instruction float_pop} {:instruction float_yankdup} {:instruction in2} {:instruction float_max} {:instruction float_pop} {:instruction float_mult} {:instruction in2} {:instruction float_max} {:instruction integer_dup} {:instruction integer_pop} {:instruction integer_dec} {:instruction float_cos} {:instruction float_frominteger} {:instruction integer_swap} {:instruction integer_mod} {:instruction integer_dup} {:instruction 80} {:instruction float_dup_items} {:instruction print_float} {:instruction float_frominteger} {:instruction print_integer} {:instruction integer_yankdup} {:instruction float_mult} {:instruction integer_max} {:instruction integer_stackdepth} {:instruction float_dup} {:instruction float_add} {:instruction float_inc} {:instruction integer_mult} {:instruction integer_div} {:instruction print_integer} {:instruction integer_flush})
Best program: (float_yankdup float_pop float_mult in2 float_max integer_dup float_add integer_mult float_mult float_pop float_mult in2 float_max float_pop float_mult integer_dup float_add float_mult integer_mult float_mult float_pop float_yankdup in2 float_max float_pop float_mult in2 float_max integer_dup integer_pop integer_dec float_cos float_frominteger integer_swap integer_mod integer_dup 80 float_dup_items print_float float_frominteger print_integer integer_yankdup float_mult integer_max integer_stackdepth float_dup float_add float_inc integer_mult integer_div print_integer integer_flush)
Errors: [75.0608 9 34.2129 10 49.8118 10 11.6 9 46.8442 10 57.784 11 13.0602 10 95.848 11 22.5104 11 15.2261 9 55.2698 11 86.9071 9 33.2086 11 6.0933 10 65.9909 10 56.249 10 13.6257 10 41.2742 11 0.0681 9 97.5772 10 41.62 8 87.3853 13 26.2825 8 22.2571 9 90.7217 9]
Total: 1394.4889
Mean: 27.889778
Genome size: 52
Size: 53
Percent parens: 0.019
--- Population Statistics ---
Average total errors in population: 5179.328245899996
Median total errors in population: 1395.4889
Error averages by case: (267.6054518000027 10.056 214.78855580000297 10.161 146.86797319999903 9.988 125.47674180000156 9.309 155.86961820000056 10.101 164.71873860000179 11.242 199.2371571000031 9.879 198.56007579999934 11.496 132.27462169999953 10.903 220.30668190000003 9.732 162.4284748000001 11.158 277.26713930000324 9.875 109.24980889999918 10.284 120.1239467999983 10.406 170.32283560000127 10.328 252.64539590000305 10.35 217.71694360000177 10.374 238.8884694000045 10.826 208.54484830000163 10.067 283.2145162999999 10.401 239.1817114999978 8.739 275.13582239999835 12.399 227.43369490000086 7.872 134.25245580000092 9.394 182.43956649999842 9.437)
Error minima by case: (36.0608 7 20.132 8 10.1711 9 2.4868 8 29.1558 8 10.1578 9 0.9701 8 43.9668 10 11.4446 8 15.2256 9 14.2276 10 3.9071 8 31.2533 9 6.0188 9 20.0248 9 24.249 9 7.6257 9 7.9183 8 0.0673 7 20.5209 8 10.437 7 6.3225 9 20.2825 7 22.1815 8 30.7387 8)
Average genome size in population (length): 48.547
Average program size in population (points): 49.547
Average percent parens in population: 0.020
Minimum age in population: 24.59480285644531
Maximum age in population: 28.77430725097656
Average age in population: 26.59222972106934
Median age in population: 26.62751770019531
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 170
Genome diversity (% unique Plush genomes):	 0.585
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 170
Syntactic diversity (% unique Push programs):	 0.585
Total error diversity:				 0.142
Error (vector) diversity:			 0.153
Behavioral diversity:				 0.153
--- Run Statistics ---
Number of program evaluations used so far: 19000
Number of point (instruction) evaluations so far: 21729715
--- Timings ---
Current time: 1529614958174 milliseconds
Total Time:          64.3 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        30.3 seconds, 47.1%
Fitness Testing:     26.6 seconds, 41.4%
Report:               7.3 seconds, 11.3%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 18
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 19
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 19
;;******************************
;; -*- Number IO problem report - generation 19
Test total error for best: 59771.30110000003
Test mean error for best: 29.88565
;;------------------------------
Outputs of best individual on training cases:
Correct output: -116.076402553 | Program output: -41.015601600 
Correct output: 24.1400847456  | Program output: -10.07281     
Correct output: 69.833290954   | Program output: 20.021441     
Correct output: 82.4958592801  | Program output: 94.0959025    
Correct output: 34.2385110874  | Program output: 81.0826724    
Correct output: -10.7358110665 | Program output: 47.0482304    
Correct output: 1.9700532093   | Program output: -11.090100    
Correct output: -44.7956976677 | Program output: 51.0522704    
Correct output: 68.5576547673  | Program output: 46.0472209    
Correct output: -69.2536523379 | Program output: -54.027562809 
Correct output: -14.2275745396 | Program output: 41.0421764    
Correct output: -171.9767905886 | Program output: -85.069727056 
Correct output: -32.1846093265 | Program output: 1.024         
Correct output: 66.9812146721  | Program output: 73.0745476    
Correct output: 100.0259781081 | Program output: 34.0351225    
Correct output: -90.2595503995 | Program output: -34.010561089 
Correct output: -82.4635707651 | Program output: -96.089309025 
Correct output: -8.7492896214  | Program output: -50.023522401 
Correct output: -82.1329348831 | Program output: -82.064806561 
Correct output: 24.5261129925  | Program output: -73.051125184 
Correct output: -11.4065589042 | Program output: -53.026522704 
Correct output: 10.3282540908  | Program output: -77.057005776 
Correct output: -51.7760580299 | Program output: -78.058525929 
Correct output: 51.8185003253  | Program output: 74.0755625    
Correct output: 110.7431489201 | Program output: 20.021441     
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_yankdup} {:instruction float_pop} {:instruction float_mult} {:instruction in2} {:instruction float_max} {:instruction integer_dup} {:instruction float_add} {:instruction integer_mult} {:instruction float_mult} {:instruction float_pop} {:instruction float_mult} {:instruction in2} {:instruction float_max} {:instruction float_pop} {:instruction float_mult} {:instruction integer_dup} {:instruction float_add} {:instruction float_mult} {:instruction integer_mult} {:instruction float_mult} {:instruction float_pop} {:instruction float_yankdup} {:instruction in2} {:instruction float_max} {:instruction float_pop} {:instruction float_mult} {:instruction in2} {:instruction float_max} {:instruction integer_dup} {:instruction integer_pop} {:instruction integer_dec} {:instruction float_cos} {:instruction float_frominteger} {:instruction integer_swap} {:instruction integer_mod} {:instruction integer_dup} {:instruction 80} {:instruction float_dup_items} {:instruction print_float} {:instruction float_frominteger} {:instruction print_integer} {:instruction integer_yankdup} {:instruction float_mult} {:instruction integer_max} {:instruction integer_stackdepth} {:instruction float_dup} {:instruction float_add} {:instruction float_inc} {:instruction integer_mult} {:instruction integer_div} {:instruction print_integer} {:instruction integer_flush})
Best program: (float_yankdup float_pop float_mult in2 float_max integer_dup float_add integer_mult float_mult float_pop float_mult in2 float_max float_pop float_mult integer_dup float_add float_mult integer_mult float_mult float_pop float_yankdup in2 float_max float_pop float_mult in2 float_max integer_dup integer_pop integer_dec float_cos float_frominteger integer_swap integer_mod integer_dup 80 float_dup_items print_float float_frominteger print_integer integer_yankdup float_mult integer_max integer_stackdepth float_dup float_add float_inc integer_mult integer_div print_integer integer_flush)
Errors: [75.0608 9 34.2129 10 49.8118 10 11.6 9 46.8442 10 57.784 11 13.0602 10 95.848 11 22.5104 11 15.2261 9 55.2698 11 86.9071 9 33.2086 11 6.0933 10 65.9909 10 56.249 10 13.6257 10 41.2742 11 0.0681 9 97.5772 10 41.62 8 87.3853 13 26.2825 8 22.2571 9 90.7217 9]
Total: 1394.4889
Mean: 27.889778
Genome size: 52
Size: 53
Percent parens: 0.019
--- Population Statistics ---
Average total errors in population: 5270.794158399995
Median total errors in population: 1395.4889
Error averages by case: (264.42493710000326 9.968 213.5204303000032 10.191 156.80626289999861 10.012 138.47446760000201 9.303 168.2400141000001 10.117 176.8821442000024 11.247 198.47586400000333 9.854 210.21985199999943 11.489 145.1840210999997 10.931 217.38803639999995 9.725 174.6346438000003 11.143 274.96642310000345 9.847 100.64462789999929 10.358 133.17439129999795 10.387 182.55783790000172 10.319 249.3249832000032 10.334 215.73450230000185 10.332 235.93249220000482 10.819 206.18456710000143 10.013 280.7357100999998 10.372 236.28505619999774 8.721 272.6808007999979 12.426 225.06608280000088 7.893 147.02237370000003 9.368 191.61963629999826 9.445)
Error minima by case: (36.0764 7 21.132 9 10.1882 8 2.4 8 28.2302 8 10.7358 10 0.0299 7 44.7957 11 11.4896 8 15.2256 8 14.2276 10 3.9768 9 32.1846 9 6.0188 9 15.0092 9 24.2596 10 11.5364 9 8.7493 8 0.0673 7 16.475 8 11.4066 7 6.2713 8 24.2239 7 22.1815 9 9.722 8)
Average genome size in population (length): 48.825
Average program size in population (points): 49.825
Average percent parens in population: 0.020
Minimum age in population: 25.70709228515625
Maximum age in population: 30.10738754272461
Average age in population: 28.0783784866333
Median age in population: 28.12045478820801
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 140
Genome diversity (% unique Plush genomes):	 0.606
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 140
Syntactic diversity (% unique Push programs):	 0.606
Total error diversity:				 0.14
Error (vector) diversity:			 0.152
Behavioral diversity:				 0.154
--- Run Statistics ---
Number of program evaluations used so far: 20000
Number of point (instruction) evaluations so far: 22950340
--- Timings ---
Current time: 1529614961900 milliseconds
Total Time:          67.9 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        32.0 seconds, 47.1%
Fitness Testing:     28.1 seconds, 41.4%
Report:               7.7 seconds, 11.3%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 19
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 20
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 20
;;******************************
;; -*- Number IO problem report - generation 20
Test total error for best: 59652.456900000034
Test mean error for best: 29.82623
;;------------------------------
Outputs of best individual on training cases:
Correct output: -116.076402553 | Program output: -41.0401600   
Correct output: 24.1400847456  | Program output: -10.07281     
Correct output: 69.833290954   | Program output: 20.021441     
Correct output: 82.4958592801  | Program output: 94.0159025    
Correct output: 34.2385110874  | Program output: 81.026724     
Correct output: -10.7358110665 | Program output: 47.0482304    
Correct output: 1.9700532093   | Program output: -11.010100    
Correct output: -44.7956976677 | Program output: 51.0522704    
Correct output: 68.5576547673  | Program output: 46.0472209    
Correct output: -69.2536523379 | Program output: -54.0362809   
Correct output: -14.2275745396 | Program output: 41.0421764    
Correct output: -171.9767905886 | Program output: -85.0127056   
Correct output: -32.1846093265 | Program output: 1.024         
Correct output: 66.9812146721  | Program output: 73.0745476    
Correct output: 100.0259781081 | Program output: 34.0351225    
Correct output: -90.2595503995 | Program output: -34.0161089   
Correct output: -82.4635707651 | Program output: -96.0509025   
Correct output: -8.7492896214  | Program output: -50.0322401   
Correct output: -82.1329348831 | Program output: -82.006561    
Correct output: 24.5261129925  | Program output: -73.0725184   
Correct output: -11.4065589042 | Program output: -53.0122704   
Correct output: 10.3282540908  | Program output: -77.0205776   
Correct output: -51.7760580299 | Program output: -78.0125929   
Correct output: 51.8185003253  | Program output: 74.0755625    
Correct output: 110.7431489201 | Program output: 20.021441     
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_yankdup} {:instruction float_pop} {:instruction float_mult} {:instruction in2} {:instruction float_max} {:instruction integer_dup} {:instruction float_add} {:instruction integer_mult} {:instruction float_mult} {:instruction float_pop} {:instruction float_mult} {:instruction in2} {:instruction float_max} {:instruction float_pop} {:instruction float_mult} {:instruction integer_dup} {:instruction float_add} {:instruction float_mult} {:instruction integer_mult} {:instruction float_mult} {:instruction float_pop} {:instruction float_yankdup} {:instruction in2} {:instruction float_max} {:instruction float_pop} {:instruction float_mult} {:instruction in2} {:instruction float_max} {:instruction integer_dup} {:instruction integer_pop} {:instruction integer_dec} {:instruction float_cos} {:instruction float_frominteger} {:instruction integer_swap} {:instruction integer_mod} {:instruction integer_dup} {:instruction 80} {:instruction integer_mod} {:instruction integer_dup} {:instruction 80} {:instruction float_dup_items} {:instruction print_float} {:instruction float_frominteger} {:instruction print_integer} {:instruction integer_yankdup} {:instruction float_mult} {:instruction integer_max} {:instruction integer_stackdepth} {:instruction float_dup} {:instruction float_dup} {:instruction float_inc} {:instruction integer_mult} {:instruction integer_div} {:instruction print_integer} {:instruction integer_flush})
Best program: (float_yankdup float_pop float_mult in2 float_max integer_dup float_add integer_mult float_mult float_pop float_mult in2 float_max float_pop float_mult integer_dup float_add float_mult integer_mult float_mult float_pop float_yankdup in2 float_max float_pop float_mult in2 float_max integer_dup integer_pop integer_dec float_cos float_frominteger integer_swap integer_mod integer_dup 80 integer_mod integer_dup 80 float_dup_items print_float float_frominteger print_integer integer_yankdup float_mult integer_max integer_stackdepth float_dup float_dup float_inc integer_mult integer_div print_integer integer_flush)
Errors: [75.0362 8 34.2129 10 49.8118 10 11.52 10 46.7882 10 57.784 11 12.9802 10 95.848 11 22.5104 11 15.2174 8 55.2698 11 86.9641 9 33.2086 11 6.0933 10 65.9909 10 56.2434 10 13.5873 10 41.283 10 0.1264 9 97.5986 12 41.6057 9 87.3488 11 26.2365 9 22.2571 9 90.7217 9]
Total: 1394.2443000000003
Mean: 27.884886
Genome size: 55
Size: 56
Percent parens: 0.018
--- Population Statistics ---
Average total errors in population: 5188.568184899997
Median total errors in population: 1395.4889
Error averages by case: (257.26980250000304 9.641 200.05007920000213 10.194 157.40279139999876 9.969 141.24453100000187 9.368 168.99957020000033 10.059 176.9736328000019 11.274 185.23607080000306 9.836 211.0857090999994 11.568 149.01726119999975 10.915 209.38180670000003 9.889 174.7819980000003 11.149 267.28269700000317 9.966 112.93314859999893 10.664 134.2155465999983 10.443 186.50073180000157 10.331 242.06770400000252 10.359 207.49032970000167 10.399 228.51662980000407 10.827 197.59615420000142 9.69 273.28709679999974 10.5 228.81992339999772 8.805 265.07669339999745 12.231 217.13013230000095 8.193 148.9531170000001 9.407 192.0740273999984 9.504)
Error minima by case: (35.0548 5 23.1401 5 10.1667 6 2.4959 7 6.7615 9 9.7128 6 0.9701 4 8.7476 6 11.4423 6 14.2261 5 13.2099 6 2.9498 5 3.8634 4 5.0243 9 20.026 7 23.2385 5 11.6257 8 7.7253 8 0.0673 5 23.5261 5 10.3795 7 9.3283 5 15.728 7 21.1871 8 30.7431 7)
Average genome size in population (length): 50.313
Average program size in population (points): 51.313
Average percent parens in population: 0.020
Minimum age in population: 27.45735168457031
Maximum age in population: 31.57877349853516
Average age in population: 29.65703277778625
Median age in population: 29.69834613800049
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 78
Genome diversity (% unique Plush genomes):	 0.642
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 78
Syntactic diversity (% unique Push programs):	 0.642
Total error diversity:				 0.18
Error (vector) diversity:			 0.193
Behavioral diversity:				 0.194
--- Run Statistics ---
Number of program evaluations used so far: 21000
Number of point (instruction) evaluations so far: 24208165
--- Timings ---
Current time: 1529614965404 milliseconds
Total Time:          71.5 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        33.5 seconds, 46.9%
Fitness Testing:     29.7 seconds, 41.5%
Report:               8.2 seconds, 11.4%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 20
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 21
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 21
;;******************************
;; -*- Number IO problem report - generation 21
Test total error for best: 59652.456900000034
Test mean error for best: 29.82623
;;------------------------------
Outputs of best individual on training cases:
Correct output: -116.076402553 | Program output: -41.0401600   
Correct output: 24.1400847456  | Program output: -10.07281     
Correct output: 69.833290954   | Program output: 20.021441     
Correct output: 82.4958592801  | Program output: 94.0159025    
Correct output: 34.2385110874  | Program output: 81.026724     
Correct output: -10.7358110665 | Program output: 47.0482304    
Correct output: 1.9700532093   | Program output: -11.010100    
Correct output: -44.7956976677 | Program output: 51.0522704    
Correct output: 68.5576547673  | Program output: 46.0472209    
Correct output: -69.2536523379 | Program output: -54.0362809   
Correct output: -14.2275745396 | Program output: 41.0421764    
Correct output: -171.9767905886 | Program output: -85.0127056   
Correct output: -32.1846093265 | Program output: 1.024         
Correct output: 66.9812146721  | Program output: 73.0745476    
Correct output: 100.0259781081 | Program output: 34.0351225    
Correct output: -90.2595503995 | Program output: -34.0161089   
Correct output: -82.4635707651 | Program output: -96.0509025   
Correct output: -8.7492896214  | Program output: -50.0322401   
Correct output: -82.1329348831 | Program output: -82.006561    
Correct output: 24.5261129925  | Program output: -73.0725184   
Correct output: -11.4065589042 | Program output: -53.0122704   
Correct output: 10.3282540908  | Program output: -77.0205776   
Correct output: -51.7760580299 | Program output: -78.0125929   
Correct output: 51.8185003253  | Program output: 74.0755625    
Correct output: 110.7431489201 | Program output: 20.021441     
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_yankdup} {:instruction float_pop} {:instruction float_mult} {:instruction in2} {:instruction float_max} {:instruction integer_dup} {:instruction print_float} {:instruction integer_mult} {:instruction float_mult} {:instruction float_pop} {:instruction float_mult} {:instruction in2} {:instruction float_min} {:instruction float_sub} {:instruction float_mult} {:instruction integer_dup} {:instruction float_add} {:instruction float_mult} {:instruction integer_mult} {:instruction float_mult} {:instruction float_pop} {:instruction float_yankdup} {:instruction in2} {:instruction float_max} {:instruction float_pop} {:instruction float_mult} {:instruction in2} {:instruction float_max} {:instruction integer_dup} {:instruction integer_pop} {:instruction integer_dec} {:instruction float_cos} {:instruction float_frominteger} {:instruction integer_swap} {:instruction integer_mod} {:instruction integer_dup} {:instruction 80} {:instruction integer_mod} {:instruction integer_dup} {:instruction 80} {:instruction float_dup_items} {:instruction print_float} {:instruction float_frominteger} {:instruction print_integer} {:instruction integer_yankdup} {:instruction float_mult} {:instruction integer_max} {:instruction integer_stackdepth} {:instruction float_dup} {:instruction float_dup} {:instruction float_inc} {:instruction integer_mult} {:instruction integer_div} {:instruction print_integer} {:instruction integer_flush})
Best program: (float_yankdup float_pop float_mult in2 float_max integer_dup print_float integer_mult float_mult float_pop float_mult in2 float_min float_sub float_mult integer_dup float_add float_mult integer_mult float_mult float_pop float_yankdup in2 float_max float_pop float_mult in2 float_max integer_dup integer_pop integer_dec float_cos float_frominteger integer_swap integer_mod integer_dup 80 integer_mod integer_dup 80 float_dup_items print_float float_frominteger print_integer integer_yankdup float_mult integer_max integer_stackdepth float_dup float_dup float_inc integer_mult integer_div print_integer integer_flush)
Errors: [75.0362 8 34.2129 10 49.8118 10 11.52 10 46.7882 10 57.784 11 12.9802 10 95.848 11 22.5104 11 15.2174 8 55.2698 11 86.9641 9 33.2086 11 6.0933 10 65.9909 10 56.2434 10 13.5873 10 41.283 10 0.1264 9 97.5986 12 41.6057 9 87.3488 11 26.2365 9 22.2571 9 90.7217 9]
Total: 1394.2443000000003
Mean: 27.884886
Genome size: 55
Size: 56
Percent parens: 0.018
--- Population Statistics ---
Average total errors in population: 4666.499524599996
Median total errors in population: 1394.4889
Error averages by case: (234.8502003000031 9.358 179.93894790000186 10.226 141.190349199999 9.99 118.38623060000172 9.364 147.8359487000011 10.023 157.01728720000162 11.261 165.77686510000294 9.881 191.1864789999994 11.516 127.57478929999954 10.976 186.4343194 9.877 154.67699659999997 11.121 245.147454600003 9.85 95.81364599999928 11.047 112.37493809999849 10.414 166.1765088000015 10.34 219.59472020000302 10.359 185.0619414000016 10.393 206.83788320000428 10.885 174.2131130000013 9.378 251.95953139999986 10.504 206.18577769999797 8.789 243.54361179999722 12.335 195.04890810000092 8.512 127.40045490000114 9.384 177.0296220999984 9.46)
Error minima by case: (74.0608 8 2.8599 9 9.1711 9 2.4868 8 30.1568 8 9.7128 9 0.0299 8 23.0697 10 10.4446 8 14.2261 8 7.4984 9 85.9071 9 10.4586 10 5.0933 9 20.0248 9 55.249 9 11.6257 9 7.7253 8 0.0673 7 20.5261 9 10.3194 7 6.3283 9 24.2825 7 21.2571 8 30.7387 8)
Average genome size in population (length): 51.748
Average program size in population (points): 52.748
Average percent parens in population: 0.019
Minimum age in population: 28.62733459472656
Maximum age in population: 32.96529293060303
Average age in population: 31.19892552089691
Median age in population: 31.24889087677002
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 157
Genome diversity (% unique Plush genomes):	 0.624
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 157
Syntactic diversity (% unique Push programs):	 0.624
Total error diversity:				 0.143
Error (vector) diversity:			 0.157
Behavioral diversity:				 0.158
--- Run Statistics ---
Number of program evaluations used so far: 22000
Number of point (instruction) evaluations so far: 25501865
--- Timings ---
Current time: 1529614968726 milliseconds
Total Time:          74.9 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        34.9 seconds, 46.7%
Fitness Testing:     31.2 seconds, 41.7%
Report:               8.6 seconds, 11.5%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 21
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 22
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 22
;;******************************
;; -*- Number IO problem report - generation 22
Test total error for best: 59652.456900000034
Test mean error for best: 29.82623
;;------------------------------
Outputs of best individual on training cases:
Correct output: -116.076402553 | Program output: -41.0401600   
Correct output: 24.1400847456  | Program output: -10.07281     
Correct output: 69.833290954   | Program output: 20.021441     
Correct output: 82.4958592801  | Program output: 94.0159025    
Correct output: 34.2385110874  | Program output: 81.026724     
Correct output: -10.7358110665 | Program output: 47.0482304    
Correct output: 1.9700532093   | Program output: -11.010100    
Correct output: -44.7956976677 | Program output: 51.0522704    
Correct output: 68.5576547673  | Program output: 46.0472209    
Correct output: -69.2536523379 | Program output: -54.0362809   
Correct output: -14.2275745396 | Program output: 41.0421764    
Correct output: -171.9767905886 | Program output: -85.0127056   
Correct output: -32.1846093265 | Program output: 1.024         
Correct output: 66.9812146721  | Program output: 73.0745476    
Correct output: 100.0259781081 | Program output: 34.0351225    
Correct output: -90.2595503995 | Program output: -34.0161089   
Correct output: -82.4635707651 | Program output: -96.0509025   
Correct output: -8.7492896214  | Program output: -50.0322401   
Correct output: -82.1329348831 | Program output: -82.006561    
Correct output: 24.5261129925  | Program output: -73.0725184   
Correct output: -11.4065589042 | Program output: -53.0122704   
Correct output: 10.3282540908  | Program output: -77.0205776   
Correct output: -51.7760580299 | Program output: -78.0125929   
Correct output: 51.8185003253  | Program output: 74.0755625    
Correct output: 110.7431489201 | Program output: 20.021441     
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_yankdup} {:instruction float_pop} {:instruction float_mult} {:instruction in2} {:instruction float_max} {:instruction integer_dup} {:instruction print_float} {:instruction integer_mult} {:instruction float_mult} {:instruction float_pop} {:instruction float_mult} {:instruction in2} {:instruction float_min} {:instruction float_sub} {:instruction float_mult} {:instruction integer_dup} {:instruction float_add} {:instruction float_mult} {:instruction integer_mult} {:instruction float_mult} {:instruction float_pop} {:instruction float_yankdup} {:instruction in2} {:instruction float_max} {:instruction float_pop} {:instruction float_mult} {:instruction in2} {:instruction float_max} {:instruction integer_dup} {:instruction float_frominteger} {:instruction integer_dec} {:instruction float_cos} {:instruction float_frominteger} {:instruction integer_swap} {:instruction integer_mod} {:instruction integer_dup} {:instruction 80} {:instruction integer_mod} {:instruction integer_dup} {:instruction 80} {:instruction float_dup_items} {:instruction print_float} {:instruction float_frominteger} {:instruction print_integer} {:instruction integer_yankdup} {:instruction float_mult} {:instruction integer_max} {:instruction integer_stackdepth} {:instruction float_dup} {:instruction float_dup} {:instruction float_inc} {:instruction integer_mult} {:instruction integer_div} {:instruction print_integer} {:instruction integer_flush})
Best program: (float_yankdup float_pop float_mult in2 float_max integer_dup print_float integer_mult float_mult float_pop float_mult in2 float_min float_sub float_mult integer_dup float_add float_mult integer_mult float_mult float_pop float_yankdup in2 float_max float_pop float_mult in2 float_max integer_dup float_frominteger integer_dec float_cos float_frominteger integer_swap integer_mod integer_dup 80 integer_mod integer_dup 80 float_dup_items print_float float_frominteger print_integer integer_yankdup float_mult integer_max integer_stackdepth float_dup float_dup float_inc integer_mult integer_div print_integer integer_flush)
Errors: [75.0362 8 34.2129 10 49.8118 10 11.52 10 46.7882 10 57.784 11 12.9802 10 95.848 11 22.5104 11 15.2174 8 55.2698 11 86.9641 9 33.2086 11 6.0933 10 65.9909 10 56.2434 10 13.5873 10 41.283 10 0.1264 9 97.5986 12 41.6057 9 87.3488 11 26.2365 9 22.2571 9 90.7217 9]
Total: 1394.2443000000003
Mean: 27.884886
Genome size: 55
Size: 56
Percent parens: 0.018
--- Population Statistics ---
Average total errors in population: 4458.649712599998
Median total errors in population: 1394.4889
Error averages by case: (217.95594360000322 9.225 159.863078000001 10.22 143.01797169999875 10.023 119.93457570000187 9.359 150.63193280000078 10.011 158.27576590000166 11.258 144.8435343000029 9.898 193.1026075999991 11.462 129.35566349999954 11.074 168.47903910000002 9.773 157.0556725 11.139 228.44420260000257 9.723 97.65004019999918 11.141 114.93303769999807 10.372 167.94284000000164 10.316 202.90335650000236 10.341 167.26718740000157 10.331 189.6443254000035 10.976 155.97233140000114 9.357 235.75061889999986 10.563 188.96162829999798 8.689 227.1701188999973 12.474 177.53817610000095 8.55 128.09803930000132 9.321 178.8550251999979 9.407)
Error minima by case: (40.0 7 0.868 6 21.0 6 10.5041 8 4.8442 8 10.6113 6 0.0309 5 44.7957 6 21.5084 6 14.2537 8 14.2276 6 84.0 8 2.0 3 5.0188 9 35.0 7 33.0 9 12.5364 8 8.7493 8 0.0519 7 0.4791 9 1.5934 8 6.3273 9 25.2239 7 12.7429 7 21.0 7)
Average genome size in population (length): 52.612
Average program size in population (points): 53.612
Average percent parens in population: 0.019
Minimum age in population: 29.85355377197266
Maximum age in population: 34.49108600616455
Average age in population: 32.56670828914642
Median age in population: 32.57542204856873
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 145
Genome diversity (% unique Plush genomes):	 0.645
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 145
Syntactic diversity (% unique Push programs):	 0.645
Total error diversity:				 0.141
Error (vector) diversity:			 0.147
Behavioral diversity:				 0.147
--- Run Statistics ---
Number of program evaluations used so far: 23000
Number of point (instruction) evaluations so far: 26817165
--- Timings ---
Current time: 1529614972300 milliseconds
Total Time:          78.4 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        36.5 seconds, 46.5%
Fitness Testing:     32.9 seconds, 41.9%
Report:               9.0 seconds, 11.4%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 22
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 23
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 23
;;******************************
;; -*- Number IO problem report - generation 23
Test total error for best: 59652.456900000034
Test mean error for best: 29.82623
;;------------------------------
Outputs of best individual on training cases:
Correct output: -116.076402553 | Program output: -41.0401600   
Correct output: 24.1400847456  | Program output: -10.07281     
Correct output: 69.833290954   | Program output: 20.021441     
Correct output: 82.4958592801  | Program output: 94.0159025    
Correct output: 34.2385110874  | Program output: 81.026724     
Correct output: -10.7358110665 | Program output: 47.0482304    
Correct output: 1.9700532093   | Program output: -11.010100    
Correct output: -44.7956976677 | Program output: 51.0522704    
Correct output: 68.5576547673  | Program output: 46.0472209    
Correct output: -69.2536523379 | Program output: -54.0362809   
Correct output: -14.2275745396 | Program output: 41.0421764    
Correct output: -171.9767905886 | Program output: -85.0127056   
Correct output: -32.1846093265 | Program output: 1.024         
Correct output: 66.9812146721  | Program output: 73.0745476    
Correct output: 100.0259781081 | Program output: 34.0351225    
Correct output: -90.2595503995 | Program output: -34.0161089   
Correct output: -82.4635707651 | Program output: -96.0509025   
Correct output: -8.7492896214  | Program output: -50.0322401   
Correct output: -82.1329348831 | Program output: -82.006561    
Correct output: 24.5261129925  | Program output: -73.0725184   
Correct output: -11.4065589042 | Program output: -53.0122704   
Correct output: 10.3282540908  | Program output: -77.0205776   
Correct output: -51.7760580299 | Program output: -78.0125929   
Correct output: 51.8185003253  | Program output: 74.0755625    
Correct output: 110.7431489201 | Program output: 20.021441     
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_yankdup} {:instruction float_pop} {:instruction float_mult} {:instruction in2} {:instruction float_max} {:instruction integer_dup} {:instruction float_add} {:instruction integer_mult} {:instruction float_mult} {:instruction float_pop} {:instruction float_mult} {:instruction integer_mult} {:instruction print_float} {:instruction integer_mult} {:instruction float_mult} {:instruction integer_swap} {:instruction float_mult} {:instruction in2} {:instruction float_min} {:instruction float_sub} {:instruction float_mult} {:instruction integer_dup} {:instruction float_add} {:instruction float_mult} {:instruction integer_mult} {:instruction float_mult} {:instruction float_pop} {:instruction float_yankdup} {:instruction in2} {:instruction float_max} {:instruction float_pop} {:instruction float_mult} {:instruction in2} {:instruction float_max} {:instruction integer_dup} {:instruction integer_pop} {:instruction integer_dec} {:instruction float_cos} {:instruction float_frominteger} {:instruction integer_swap} {:instruction integer_mod} {:instruction integer_dup} {:instruction 80} {:instruction integer_mod} {:instruction integer_dup} {:instruction 80} {:instruction float_dup_items} {:instruction print_float} {:instruction float_frominteger} {:instruction print_integer} {:instruction integer_yankdup} {:instruction float_mult} {:instruction integer_max} {:instruction integer_stackdepth} {:instruction float_dup} {:instruction float_dup} {:instruction float_inc} {:instruction integer_mult} {:instruction integer_div} {:instruction print_integer} {:instruction integer_flush})
Best program: (float_yankdup float_pop float_mult in2 float_max integer_dup float_add integer_mult float_mult float_pop float_mult integer_mult print_float integer_mult float_mult integer_swap float_mult in2 float_min float_sub float_mult integer_dup float_add float_mult integer_mult float_mult float_pop float_yankdup in2 float_max float_pop float_mult in2 float_max integer_dup integer_pop integer_dec float_cos float_frominteger integer_swap integer_mod integer_dup 80 integer_mod integer_dup 80 float_dup_items print_float float_frominteger print_integer integer_yankdup float_mult integer_max integer_stackdepth float_dup float_dup float_inc integer_mult integer_div print_integer integer_flush)
Errors: [75.0362 8 34.2129 10 49.8118 10 11.52 10 46.7882 10 57.784 11 12.9802 10 95.848 11 22.5104 11 15.2174 8 55.2698 11 86.9641 9 33.2086 11 6.0933 10 65.9909 10 56.2434 10 13.5873 10 41.283 10 0.1264 9 97.5986 12 41.6057 9 87.3488 11 26.2365 9 22.2571 9 90.7217 9]
Total: 1394.2443000000003
Mean: 27.884886
Genome size: 61
Size: 62
Percent parens: 0.016
--- Population Statistics ---
Average total errors in population: 4475.597390699997
Median total errors in population: 1394.4889
Error averages by case: (224.04345140000288 9.203 174.7437890000018 10.241 141.21340529999887 10.014 115.3598627000015 9.387 138.33079070000142 10.012 145.9253230000007 11.254 158.089809400003 9.908 181.27940219999925 11.49 124.66219639999956 11.028 176.45382819999998 9.821 144.6494431999991 11.115 234.79367230000273 9.803 89.84729639999914 11.158 102.35186779999856 10.38 163.41265840000136 10.34 209.88223790000234 10.364 175.40191920000152 10.356 197.03536550000356 10.97 164.23107980000125 9.33 242.11256419999967 10.616 195.5439153999978 8.763 233.52011029999753 12.445 185.44151200000078 8.686 124.41915470000126 9.377 177.37773529999816 9.414)
Error minima by case: (35.0764 7 21.3491 10 27.8333 8 10.5991 7 6.7615 8 9.9676 9 0.8209 7 44.7957 11 21.5068 9 14.2261 8 13.3111 10 2.9768 9 32.1846 9 5.0928 10 30.026 9 23.2596 10 12.5364 8 7.7493 8 0.0673 7 21.7351 8 10.4066 8 7.5373 9 25.2239 7 21.2565 8 68.7431 8)
Average genome size in population (length): 52.843
Average program size in population (points): 53.843
Average percent parens in population: 0.019
Minimum age in population: 31.65793514251709
Maximum age in population: 36.02438879013062
Average age in population: 33.94630134725571
Median age in population: 33.97878444194794
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 120
Genome diversity (% unique Plush genomes):	 0.693
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 120
Syntactic diversity (% unique Push programs):	 0.693
Total error diversity:				 0.141
Error (vector) diversity:			 0.151
Behavioral diversity:				 0.151
--- Run Statistics ---
Number of program evaluations used so far: 24000
Number of point (instruction) evaluations so far: 28138240
--- Timings ---
Current time: 1529614975652 milliseconds
Total Time:          81.7 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        37.8 seconds, 46.3%
Fitness Testing:     34.4 seconds, 42.1%
Report:               9.4 seconds, 11.5%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 23
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 24
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 24
;;******************************
;; -*- Number IO problem report - generation 24
Test total error for best: 59612.167800000105
Test mean error for best: 29.80608
;;------------------------------
Outputs of best individual on training cases:
Correct output: -116.076402553 | Program output: -41.0401600   
Correct output: 24.1400847456  | Program output: -10.07181     
Correct output: 69.833290954   | Program output: 20.021441     
Correct output: 82.4958592801  | Program output: 94.0159025    
Correct output: 34.2385110874  | Program output: 81.026724     
Correct output: -10.7358110665 | Program output: 47.0482304    
Correct output: 1.9700532093   | Program output: -11.070100    
Correct output: -44.7956976677 | Program output: 51.0522704    
Correct output: 68.5576547673  | Program output: 46.0472209    
Correct output: -69.2536523379 | Program output: -54.0272809   
Correct output: -14.2275745396 | Program output: 41.0421764    
Correct output: -171.9767905886 | Program output: -85.0767056   
Correct output: -32.1846093265 | Program output: 1.024         
Correct output: 66.9812146721  | Program output: 73.0745476    
Correct output: 100.0259781081 | Program output: 34.0351225    
Correct output: -90.2595503995 | Program output: -34.0471089   
Correct output: -82.4635707651 | Program output: -96.0659025   
Correct output: -8.7492896214  | Program output: -50.0312401   
Correct output: -82.1329348831 | Program output: -82.0796561   
Correct output: 24.5261129925  | Program output: -73.085184    
Correct output: -11.4065589042 | Program output: -53.0282704   
Correct output: 10.3282540908  | Program output: -77.045776    
Correct output: -51.7760580299 | Program output: -78.035929    
Correct output: 51.8185003253  | Program output: 74.0755625    
Correct output: 110.7431489201 | Program output: 20.021441     
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_yankdup} {:instruction float_pop} {:instruction float_mult} {:instruction in2} {:instruction float_max} {:instruction integer_dup} {:instruction float_add} {:instruction integer_mult} {:instruction float_mult} {:instruction float_pop} {:instruction float_mult} {:instruction in2} {:instruction float_max} {:instruction float_pop} {:instruction float_mult} {:instruction integer_dup} {:instruction float_add} {:instruction float_mult} {:instruction integer_mult} {:instruction float_mult} {:instruction float_pop} {:instruction float_yankdup} {:instruction in2} {:instruction float_max} {:instruction float_mult} {:instruction integer_mult} {:instruction float_mult} {:instruction float_pop} {:instruction float_yankdup} {:instruction in2} {:instruction float_max} {:instruction float_pop} {:instruction float_mult} {:instruction in2} {:instruction float_max} {:instruction integer_dup} {:instruction integer_pop} {:instruction integer_dec} {:instruction float_cos} {:instruction float_frominteger} {:instruction integer_swap} {:instruction integer_mod} {:instruction integer_dup} {:instruction 80} {:instruction integer_mod} {:instruction integer_dup} {:instruction 80} {:instruction float_dup_items} {:instruction print_float} {:instruction float_frominteger} {:instruction print_integer} {:instruction integer_yankdup} {:instruction float_mult} {:instruction integer_max} {:instruction integer_stackdepth} {:instruction float_dup} {:instruction float_dup} {:instruction float_inc} {:instruction integer_mult} {:instruction integer_div} {:instruction print_integer} {:instruction integer_flush})
Best program: (float_yankdup float_pop float_mult in2 float_max integer_dup float_add integer_mult float_mult float_pop float_mult in2 float_max float_pop float_mult integer_dup float_add float_mult integer_mult float_mult float_pop float_yankdup in2 float_max float_mult integer_mult float_mult float_pop float_yankdup in2 float_max float_pop float_mult in2 float_max integer_dup integer_pop integer_dec float_cos float_frominteger integer_swap integer_mod integer_dup 80 integer_mod integer_dup 80 float_dup_items print_float float_frominteger print_integer integer_yankdup float_mult integer_max integer_stackdepth float_dup float_dup float_inc integer_mult integer_div print_integer integer_flush)
Errors: [75.0362 8 34.2119 10 49.8118 10 11.52 10 46.7882 10 57.784 11 13.0402 9 95.848 11 22.5104 11 15.2264 10 55.2698 11 86.9001 7 33.2086 11 6.0933 10 65.9909 10 56.2124 10 13.6023 8 41.282 10 0.0533 8 97.6113 12 41.6217 9 87.374 12 26.2599 9 22.2571 9 90.7217 9]
Total: 1391.2355000000002
Mean: 27.82471
Genome size: 62
Size: 63
Percent parens: 0.016
--- Population Statistics ---
Average total errors in population: 4767.713497599999
Median total errors in population: 1394.4889
Error averages by case: (234.04746640000272 9.103 186.015984400002 10.257 150.19485279999867 10.048 130.54085420000195 9.539 151.05386800000113 10.063 155.39543590000136 11.279 167.71332790000235 9.907 191.76085009999903 11.505 138.98703319999962 11.037 191.7712593999998 9.705 155.05816489999998 11.127 243.10327920000262 9.816 99.98142869999913 11.181 115.44091479999821 10.381 176.6215929000017 10.344 222.13561250000288 10.368 191.05694660000162 10.343 211.74681980000366 10.897 175.98454270000096 9.354 250.70044549999963 10.794 206.7651357999979 8.88 243.34291769999822 12.254 200.81894540000073 8.793 136.1443071000006 9.401 185.52251169999815 9.433)
Error minima by case: (36.0764 7 9.0 7 1.1882 8 2.4941 8 12.9157 9 9.7358 9 0.9701 7 35.2043 9 2.4896 9 10.7463 8 13.2276 9 84.0 7 2.0 4 4.0933 9 20.0174 9 10.2596 9 2.4636 8 1.2507 8 0.0519 7 22.6281 9 1.4066 8 10.3283 9 25.2239 7 4.6643 8 21.0 8)
Average genome size in population (length): 53.441
Average program size in population (points): 54.441
Average percent parens in population: 0.018
Minimum age in population: 32.81729698181152
Maximum age in population: 37.27414083480835
Average age in population: 35.34630811583996
Median age in population: 35.39079982042313
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 73
Genome diversity (% unique Plush genomes):	 0.707
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 73
Syntactic diversity (% unique Push programs):	 0.707
Total error diversity:				 0.158
Error (vector) diversity:			 0.164
Behavioral diversity:				 0.164
--- Run Statistics ---
Number of program evaluations used so far: 25000
Number of point (instruction) evaluations so far: 29474265
--- Timings ---
Current time: 1529614979319 milliseconds
Total Time:          85.4 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        39.3 seconds, 46.1%
Fitness Testing:     36.2 seconds, 42.3%
Report:               9.8 seconds, 11.5%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 24
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 25
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 25
;;******************************
;; -*- Number IO problem report - generation 25
Test total error for best: 74087.97659999998
Test mean error for best: 37.04399
;;------------------------------
Outputs of best individual on training cases:
Correct output: -116.076402553 | Program output: -41.0401600   
Correct output: 24.1400847456  | Program output: -10.07181     
Correct output: 69.833290954   | Program output: 20.021441     
Correct output: 82.4958592801  | Program output: 94.0159025    
Correct output: 34.2385110874  | Program output: 81.026724     
Correct output: -10.7358110665 | Program output: 47.0482304    
Correct output: 1.9700532093   | Program output: -11.050100    
Correct output: -44.7956976677 | Program output: 51.0522704    
Correct output: 68.5576547673  | Program output: 46.0472209    
Correct output: -69.2536523379 | Program output: -54.0192809   
Correct output: -14.2275745396 | Program output: 41.0421764    
Correct output: -171.9767905886 | Program output: -85.0767056   
Correct output: -32.1846093265 | Program output: 1.024         
Correct output: 66.9812146721  | Program output: 73.0745476    
Correct output: 100.0259781081 | Program output: 34.0351225    
Correct output: -90.2595503995 | Program output: -34.0791089   
Correct output: -82.4635707651 | Program output: -96.0659025   
Correct output: -8.7492896214  | Program output: -50.0312401   
Correct output: -82.1329348831 | Program output: -82.0796561   
Correct output: 24.5261129925  | Program output: -73.0405184   
Correct output: -11.4065589042 | Program output: -53.0602704   
Correct output: 10.3282540908  | Program output: -77.045776    
Correct output: -51.7760580299 | Program output: -78.0755929   
Correct output: 51.8185003253  | Program output: 74.0755625    
Correct output: 110.7431489201 | Program output: 20.021441     
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_yankdup} {:instruction float_pop} {:instruction float_mult} {:instruction in2} {:instruction float_max} {:instruction integer_dup} {:instruction print_float} {:instruction integer_mult} {:instruction float_mult} {:instruction float_pop} {:instruction float_mult} {:instruction in2} {:instruction float_min} {:instruction float_sub} {:instruction float_mult} {:instruction integer_dup} {:instruction float_add} {:instruction float_mult} {:instruction integer_mult} {:instruction integer_dup} {:instruction float_add} {:instruction integer_dec} {:instruction integer_mult} {:instruction float_mult} {:instruction float_pop} {:instruction float_yankdup} {:instruction in2} {:instruction float_max} {:instruction float_pop} {:instruction float_mult} {:instruction in2} {:instruction float_max} {:instruction integer_dup} {:instruction integer_pop} {:instruction integer_dec} {:instruction float_cos} {:instruction float_frominteger} {:instruction integer_swap} {:instruction integer_mod} {:instruction integer_dup} {:instruction 80} {:instruction integer_mod} {:instruction integer_dup} {:instruction 80} {:instruction float_dup_items} {:instruction print_float} {:instruction float_frominteger} {:instruction print_integer} {:instruction integer_yankdup} {:instruction float_mult} {:instruction integer_max} {:instruction integer_stackdepth} {:instruction float_dup} {:instruction float_dup} {:instruction float_inc} {:instruction integer_mult} {:instruction integer_div} {:instruction print_integer} {:instruction integer_flush})
Best program: (float_yankdup float_pop float_mult in2 float_max integer_dup print_float integer_mult float_mult float_pop float_mult in2 float_min float_sub float_mult integer_dup float_add float_mult integer_mult integer_dup float_add integer_dec integer_mult float_mult float_pop float_yankdup in2 float_max float_pop float_mult in2 float_max integer_dup integer_pop integer_dec float_cos float_frominteger integer_swap integer_mod integer_dup 80 integer_mod integer_dup 80 float_dup_items print_float float_frominteger print_integer integer_yankdup float_mult integer_max integer_stackdepth float_dup float_dup float_inc integer_mult integer_div print_integer integer_flush)
Errors: [75.0362 8 34.2119 10 49.8118 10 11.52 10 46.7882 10 57.784 11 13.0202 9 95.848 11 22.5104 11 15.2344 10 55.2698 11 86.9001 7 33.2086 11 6.0933 10 65.9909 10 56.1804 9 13.6023 8 41.282 10 0.0533 8 97.5666 12 41.6537 8 87.374 12 26.2995 8 22.2571 9 90.7217 9]
Total: 1388.2184000000004
Mean: 27.764368
Genome size: 59
Size: 60
Percent parens: 0.017
--- Population Statistics ---
Average total errors in population: 5147.296964499997
Median total errors in population: 1394.4889
Error averages by case: (239.15246800000213 8.834 198.72232900000265 10.213 178.07358319999855 10.038 153.46780690000077 9.813 177.0511804000001 10.065 182.10254760000248 11.229 178.68488660000094 9.892 218.8693829999992 11.477 164.00081819999966 10.993 193.95387549999884 9.436 179.9319375000006 11.122 250.17292960000313 9.834 130.11579359999908 11.145 142.45810249999855 10.395 199.9932817000018 10.317 227.37209970000285 10.4 191.7385840000024 10.298 214.55796040000143 10.715 177.84109440000088 9.29 257.63198839999905 11.297 211.95486649999714 9.135 249.18743750000033 11.807 202.70030650000015 9.046 159.13272289999895 9.396 212.84698089999802 9.395)
Error minima by case: (74.0748 7 24.132 9 48.8118 8 10.5132 8 6.7615 8 9.7435 8 1.9656 8 44.7957 8 21.5089 8 14.2508 8 13.2402 8 85.9697 7 32.1846 6 5.0243 9 64.9906 9 55.2585 9 12.5364 8 8.7493 8 0.0329 7 24.5209 9 10.4883 8 8.6923 9 25.2239 7 21.1871 8 89.7217 8)
Average genome size in population (length): 54.521
Average program size in population (points): 55.521
Average percent parens in population: 0.018
Minimum age in population: 34.29936027526855
Maximum age in population: 38.45263969898224
Average age in population: 36.69605753922462
Median age in population: 36.74953231215477
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 45
Genome diversity (% unique Plush genomes):	 0.67
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 45
Syntactic diversity (% unique Push programs):	 0.67
Total error diversity:				 0.161
Error (vector) diversity:			 0.175
Behavioral diversity:				 0.175
--- Run Statistics ---
Number of program evaluations used so far: 26000
Number of point (instruction) evaluations so far: 30837315
--- Timings ---
Current time: 1529614982779 milliseconds
Total Time:          88.9 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        40.8 seconds, 45.9%
Fitness Testing:     37.7 seconds, 42.4%
Report:              10.2 seconds, 11.5%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 25
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 26
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 26
;;******************************
;; -*- Number IO problem report - generation 26
Test total error for best: 74087.97659999998
Test mean error for best: 37.04399
;;------------------------------
Outputs of best individual on training cases:
Correct output: -116.076402553 | Program output: -41.0401600   
Correct output: 24.1400847456  | Program output: -10.07181     
Correct output: 69.833290954   | Program output: 20.021441     
Correct output: 82.4958592801  | Program output: 94.0159025    
Correct output: 34.2385110874  | Program output: 81.026724     
Correct output: -10.7358110665 | Program output: 47.0482304    
Correct output: 1.9700532093   | Program output: -11.050100    
Correct output: -44.7956976677 | Program output: 51.0522704    
Correct output: 68.5576547673  | Program output: 46.0472209    
Correct output: -69.2536523379 | Program output: -54.0192809   
Correct output: -14.2275745396 | Program output: 41.0421764    
Correct output: -171.9767905886 | Program output: -85.0767056   
Correct output: -32.1846093265 | Program output: 1.024         
Correct output: 66.9812146721  | Program output: 73.0745476    
Correct output: 100.0259781081 | Program output: 34.0351225    
Correct output: -90.2595503995 | Program output: -34.0791089   
Correct output: -82.4635707651 | Program output: -96.0659025   
Correct output: -8.7492896214  | Program output: -50.0312401   
Correct output: -82.1329348831 | Program output: -82.0796561   
Correct output: 24.5261129925  | Program output: -73.0405184   
Correct output: -11.4065589042 | Program output: -53.0602704   
Correct output: 10.3282540908  | Program output: -77.045776    
Correct output: -51.7760580299 | Program output: -78.0755929   
Correct output: 51.8185003253  | Program output: 74.0755625    
Correct output: 110.7431489201 | Program output: 20.021441     
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_yankdup} {:instruction float_pop} {:instruction float_mult} {:instruction in2} {:instruction float_max} {:instruction integer_dup} {:instruction print_float} {:instruction integer_mult} {:instruction float_mult} {:instruction float_pop} {:instruction float_mult} {:instruction in2} {:instruction float_min} {:instruction float_sub} {:instruction float_mult} {:instruction integer_dup} {:instruction float_add} {:instruction float_mult} {:instruction integer_mult} {:instruction integer_dup} {:instruction float_add} {:instruction integer_dec} {:instruction integer_mult} {:instruction float_mult} {:instruction float_pop} {:instruction float_yankdup} {:instruction in2} {:instruction float_max} {:instruction float_pop} {:instruction float_mult} {:instruction in2} {:instruction float_max} {:instruction integer_dup} {:instruction integer_pop} {:instruction integer_dec} {:instruction float_cos} {:instruction float_frominteger} {:instruction integer_swap} {:instruction integer_mod} {:instruction integer_dup} {:instruction 80} {:instruction integer_mod} {:instruction integer_dup} {:instruction 80} {:instruction float_dup_items} {:instruction print_float} {:instruction float_frominteger} {:instruction print_integer} {:instruction integer_yankdup} {:instruction float_mult} {:instruction integer_max} {:instruction integer_stackdepth} {:instruction float_dup} {:instruction float_dup} {:instruction float_inc} {:instruction integer_mult} {:instruction integer_div} {:instruction print_integer} {:instruction integer_flush})
Best program: (float_yankdup float_pop float_mult in2 float_max integer_dup print_float integer_mult float_mult float_pop float_mult in2 float_min float_sub float_mult integer_dup float_add float_mult integer_mult integer_dup float_add integer_dec integer_mult float_mult float_pop float_yankdup in2 float_max float_pop float_mult in2 float_max integer_dup integer_pop integer_dec float_cos float_frominteger integer_swap integer_mod integer_dup 80 integer_mod integer_dup 80 float_dup_items print_float float_frominteger print_integer integer_yankdup float_mult integer_max integer_stackdepth float_dup float_dup float_inc integer_mult integer_div print_integer integer_flush)
Errors: [75.0362 8 34.2119 10 49.8118 10 11.52 10 46.7882 10 57.784 11 13.0202 9 95.848 11 22.5104 11 15.2344 10 55.2698 11 86.9001 7 33.2086 11 6.0933 10 65.9909 10 56.1804 9 13.6023 8 41.282 10 0.0533 8 97.5666 12 41.6537 8 87.374 12 26.2995 8 22.2571 9 90.7217 9]
Total: 1388.2184000000004
Mean: 27.764368
Genome size: 59
Size: 60
Percent parens: 0.017
--- Population Statistics ---
Average total errors in population: 5867.120428800004
Median total errors in population: 1394.2443000000003
Error averages by case: (273.0473611000006 8.606 229.1337079000027 10.262 203.7081975999985 10.07 184.102618899999 10.187 193.31713790000072 10.091 206.32162690000263 11.317 212.0833315999992 9.831 239.22137659999905 11.579 188.43170419999967 10.972 230.05885019999837 9.388 204.24061900000086 11.171 286.25960130000186 10.03 147.26751740000017 11.155 164.15708219999948 10.486 224.00015010000183 10.4 260.1094987000023 10.553 228.35065690000343 10.255 247.69803839999946 10.563 209.48876190000047 9.375 290.35055700000026 11.952 247.50975149999624 9.581 280.3280969000017 11.275 237.0730365999998 9.527 186.11904749999817 9.518 237.12810049999808 9.47)
Error minima by case: (40.0 3 6.7851 3 21.0 3 9.52 8 3.3133 8 9.7358 3 0.9701 2 43.7957 3 21.5084 3 14.1729 3 13.2276 3 84.0 3 2.0 2 5.0928 9 7.9909 4 33.0 3 12.5364 8 7.7493 8 0.0529 3 6.3991 3 10.4066 8 7.2492 3 25.2239 8 12.1182 8 18.7217 4)
Average genome size in population (length): 55.55
Average program size in population (points): 56.55
Average percent parens in population: 0.018
Minimum age in population: 35.62790870666504
Maximum age in population: 40.03486457467079
Average age in population: 38.12459975755215
Median age in population: 38.18989771604538
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 72
Genome diversity (% unique Plush genomes):	 0.668
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 72
Syntactic diversity (% unique Push programs):	 0.668
Total error diversity:				 0.196
Error (vector) diversity:			 0.206
Behavioral diversity:				 0.206
--- Run Statistics ---
Number of program evaluations used so far: 27000
Number of point (instruction) evaluations so far: 32226065
--- Timings ---
Current time: 1529614986383 milliseconds
Total Time:          92.4 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        42.3 seconds, 45.8%
Fitness Testing:     39.3 seconds, 42.5%
Report:              10.6 seconds, 11.5%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 26
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 27
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 27
;;******************************
;; -*- Number IO problem report - generation 27
Test total error for best: 74087.97659999998
Test mean error for best: 37.04399
;;------------------------------
Outputs of best individual on training cases:
Correct output: -116.076402553 | Program output: -41.0401600   
Correct output: 24.1400847456  | Program output: -10.07181     
Correct output: 69.833290954   | Program output: 20.021441     
Correct output: 82.4958592801  | Program output: 94.0159025    
Correct output: 34.2385110874  | Program output: 81.026724     
Correct output: -10.7358110665 | Program output: 47.0482304    
Correct output: 1.9700532093   | Program output: -11.050100    
Correct output: -44.7956976677 | Program output: 51.0522704    
Correct output: 68.5576547673  | Program output: 46.0472209    
Correct output: -69.2536523379 | Program output: -54.0192809   
Correct output: -14.2275745396 | Program output: 41.0421764    
Correct output: -171.9767905886 | Program output: -85.0767056   
Correct output: -32.1846093265 | Program output: 1.024         
Correct output: 66.9812146721  | Program output: 73.0745476    
Correct output: 100.0259781081 | Program output: 34.0351225    
Correct output: -90.2595503995 | Program output: -34.0791089   
Correct output: -82.4635707651 | Program output: -96.0659025   
Correct output: -8.7492896214  | Program output: -50.0312401   
Correct output: -82.1329348831 | Program output: -82.0796561   
Correct output: 24.5261129925  | Program output: -73.0405184   
Correct output: -11.4065589042 | Program output: -53.0602704   
Correct output: 10.3282540908  | Program output: -77.045776    
Correct output: -51.7760580299 | Program output: -78.0755929   
Correct output: 51.8185003253  | Program output: 74.0755625    
Correct output: 110.7431489201 | Program output: 20.021441     
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_yankdup} {:instruction float_pop} {:instruction float_mult} {:instruction in2} {:instruction float_max} {:instruction integer_dup} {:instruction print_float} {:instruction integer_mult} {:instruction float_mult} {:instruction float_pop} {:instruction float_mult} {:instruction in2} {:instruction float_min} {:instruction float_sub} {:instruction float_mult} {:instruction integer_dup} {:instruction float_add} {:instruction float_mult} {:instruction integer_mult} {:instruction integer_dup} {:instruction float_add} {:instruction integer_dec} {:instruction integer_mult} {:instruction float_mult} {:instruction float_pop} {:instruction float_yankdup} {:instruction in2} {:instruction float_max} {:instruction float_pop} {:instruction float_mult} {:instruction in2} {:instruction float_max} {:instruction integer_dup} {:instruction integer_pop} {:instruction integer_dec} {:instruction float_cos} {:instruction float_frominteger} {:instruction integer_swap} {:instruction integer_mod} {:instruction integer_dup} {:instruction 80} {:instruction integer_mod} {:instruction integer_dup} {:instruction 80} {:instruction float_dup_items} {:instruction print_float} {:instruction float_frominteger} {:instruction print_integer} {:instruction integer_yankdup} {:instruction float_mult} {:instruction integer_max} {:instruction integer_stackdepth} {:instruction float_dup} {:instruction float_dup} {:instruction float_inc} {:instruction integer_mult} {:instruction integer_div} {:instruction print_integer} {:instruction integer_flush})
Best program: (float_yankdup float_pop float_mult in2 float_max integer_dup print_float integer_mult float_mult float_pop float_mult in2 float_min float_sub float_mult integer_dup float_add float_mult integer_mult integer_dup float_add integer_dec integer_mult float_mult float_pop float_yankdup in2 float_max float_pop float_mult in2 float_max integer_dup integer_pop integer_dec float_cos float_frominteger integer_swap integer_mod integer_dup 80 integer_mod integer_dup 80 float_dup_items print_float float_frominteger print_integer integer_yankdup float_mult integer_max integer_stackdepth float_dup float_dup float_inc integer_mult integer_div print_integer integer_flush)
Errors: [75.0362 8 34.2119 10 49.8118 10 11.52 10 46.7882 10 57.784 11 13.0202 9 95.848 11 22.5104 11 15.2344 10 55.2698 11 86.9001 7 33.2086 11 6.0933 10 65.9909 10 56.1804 9 13.6023 8 41.282 10 0.0533 8 97.5666 12 41.6537 8 87.374 12 26.2995 8 22.2571 9 90.7217 9]
Total: 1388.2184000000004
Mean: 27.764368
Genome size: 59
Size: 60
Percent parens: 0.017
--- Population Statistics ---
Average total errors in population: 5535.7471452000045
Median total errors in population: 1394.2443000000003
Error averages by case: (260.09030250000126 8.543 211.75609200000181 10.267 190.4469506999987 10.104 169.56710829999892 10.299 187.52437870000057 10.116 192.33429030000255 11.325 198.37458669999913 9.723 228.71666989999906 11.583 178.38453679999955 11.001 215.1575849999985 9.53 191.06987370000064 11.149 270.0913236000021 9.799 137.43915899999965 11.17 153.98343929999928 10.483 214.64866050000174 10.436 244.36938660000195 10.493 214.1294124000025 10.057 234.40566619999947 10.509 194.06662690000002 9.241 273.8910721999992 12.077 231.05343499999645 9.577 266.8461619000025 11.329 222.42196899999985 9.577 173.07133599999858 9.521 224.527121999998 9.471)
Error minima by case: (74.0362 7 2.8599 9 9.1667 8 2.4959 8 3.7782 8 1.1883 9 0.96 8 32.8716 10 10.4423 9 14.1558 8 2.3034 10 85.9603 7 20.2605 6 5.0551 9 20.026 9 55.2104 9 12.5364 8 3.1749 8 0.0519 7 13.5534 9 0.5176 8 7.3077 8 25.2239 8 13.7439 8 30.7431 8)
Average genome size in population (length): 56.181
Average program size in population (points): 57.181
Average percent parens in population: 0.018
Minimum age in population: 37.27019488811493
Maximum age in population: 41.38486824929714
Average age in population: 39.54443510949612
Median age in population: 39.55173460394144
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 63
Genome diversity (% unique Plush genomes):	 0.678
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 63
Syntactic diversity (% unique Push programs):	 0.678
Total error diversity:				 0.2
Error (vector) diversity:			 0.215
Behavioral diversity:				 0.215
--- Run Statistics ---
Number of program evaluations used so far: 28000
Number of point (instruction) evaluations so far: 33630590
--- Timings ---
Current time: 1529614989939 milliseconds
Total Time:          96.0 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        43.8 seconds, 45.6%
Fitness Testing:     40.9 seconds, 42.6%
Report:              11.1 seconds, 11.6%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 27
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 28
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 28
;;******************************
;; -*- Number IO problem report - generation 28
Test total error for best: 74087.97659999998
Test mean error for best: 37.04399
;;------------------------------
Outputs of best individual on training cases:
Correct output: -116.076402553 | Program output: -41.0401600   
Correct output: 24.1400847456  | Program output: -10.07181     
Correct output: 69.833290954   | Program output: 20.021441     
Correct output: 82.4958592801  | Program output: 94.0159025    
Correct output: 34.2385110874  | Program output: 81.026724     
Correct output: -10.7358110665 | Program output: 47.0482304    
Correct output: 1.9700532093   | Program output: -11.050100    
Correct output: -44.7956976677 | Program output: 51.0522704    
Correct output: 68.5576547673  | Program output: 46.0472209    
Correct output: -69.2536523379 | Program output: -54.0192809   
Correct output: -14.2275745396 | Program output: 41.0421764    
Correct output: -171.9767905886 | Program output: -85.0767056   
Correct output: -32.1846093265 | Program output: 1.024         
Correct output: 66.9812146721  | Program output: 73.0745476    
Correct output: 100.0259781081 | Program output: 34.0351225    
Correct output: -90.2595503995 | Program output: -34.0791089   
Correct output: -82.4635707651 | Program output: -96.0659025   
Correct output: -8.7492896214  | Program output: -50.0312401   
Correct output: -82.1329348831 | Program output: -82.0796561   
Correct output: 24.5261129925  | Program output: -73.0405184   
Correct output: -11.4065589042 | Program output: -53.0602704   
Correct output: 10.3282540908  | Program output: -77.045776    
Correct output: -51.7760580299 | Program output: -78.0755929   
Correct output: 51.8185003253  | Program output: 74.0755625    
Correct output: 110.7431489201 | Program output: 20.021441     
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_yankdup} {:instruction float_pop} {:instruction float_mult} {:instruction in2} {:instruction float_max} {:instruction integer_dup} {:instruction print_float} {:instruction integer_mult} {:instruction float_mult} {:instruction float_pop} {:instruction float_mult} {:instruction in2} {:instruction float_min} {:instruction float_sub} {:instruction float_mult} {:instruction integer_dup} {:instruction float_add} {:instruction float_mult} {:instruction integer_mult} {:instruction integer_dup} {:instruction float_add} {:instruction integer_dec} {:instruction integer_mult} {:instruction float_mult} {:instruction float_pop} {:instruction float_yankdup} {:instruction in2} {:instruction float_max} {:instruction float_pop} {:instruction float_mult} {:instruction in2} {:instruction float_max} {:instruction integer_dup} {:instruction integer_pop} {:instruction integer_dec} {:instruction float_cos} {:instruction float_frominteger} {:instruction integer_swap} {:instruction integer_mod} {:instruction integer_dup} {:instruction 80} {:instruction integer_mod} {:instruction integer_dup} {:instruction 80} {:instruction float_dup_items} {:instruction print_float} {:instruction float_frominteger} {:instruction print_integer} {:instruction integer_yankdup} {:instruction float_mult} {:instruction integer_max} {:instruction integer_stackdepth} {:instruction float_dup} {:instruction float_dup} {:instruction float_inc} {:instruction integer_mult} {:instruction integer_div} {:instruction print_integer} {:instruction integer_flush})
Best program: (float_yankdup float_pop float_mult in2 float_max integer_dup print_float integer_mult float_mult float_pop float_mult in2 float_min float_sub float_mult integer_dup float_add float_mult integer_mult integer_dup float_add integer_dec integer_mult float_mult float_pop float_yankdup in2 float_max float_pop float_mult in2 float_max integer_dup integer_pop integer_dec float_cos float_frominteger integer_swap integer_mod integer_dup 80 integer_mod integer_dup 80 float_dup_items print_float float_frominteger print_integer integer_yankdup float_mult integer_max integer_stackdepth float_dup float_dup float_inc integer_mult integer_div print_integer integer_flush)
Errors: [75.0362 8 34.2119 10 49.8118 10 11.52 10 46.7882 10 57.784 11 13.0202 9 95.848 11 22.5104 11 15.2344 10 55.2698 11 86.9001 7 33.2086 11 6.0933 10 65.9909 10 56.1804 9 13.6023 8 41.282 10 0.0533 8 97.5666 12 41.6537 8 87.374 12 26.2995 8 22.2571 9 90.7217 9]
Total: 1388.2184000000004
Mean: 27.764368
Genome size: 59
Size: 60
Percent parens: 0.017
--- Population Statistics ---
Average total errors in population: 6046.616536900005
Median total errors in population: 1394.2443000000003
Error averages by case: (278.1165675000002 8.553 236.47214719999977 10.255 208.70818459999882 10.055 189.51195499999903 10.23 206.09065630000052 10.101 213.81252270000235 11.308 220.253546499999 9.471 247.32822189999905 11.598 195.9765409999996 10.917 237.29005370000033 10.04 212.61682540000086 11.166 290.40031340000144 9.349 152.86369640000015 11.178 174.75774739999935 10.448 231.60388920000173 10.394 266.12985090000035 10.456 236.2349319000007 9.587 255.843223600001 10.529 218.06368189999975 8.957 294.5189748999989 12.081 256.09327029999736 9.477 288.3068424000022 11.525 244.7054042000004 9.523 192.77957459999857 9.508 241.96791399999822 9.464)
Error minima by case: (35.0362 7 23.1401 9 28.8118 8 10.52 9 12.2118 8 9.7435 9 0.9701 7 44.7957 10 21.4777 8 14.2264 8 13.2402 9 2.9001 7 31.1846 10 5.0933 8 30.9909 9 23.2124 8 12.5364 8 8.7493 8 0.0525 7 17.475 9 11.2436 7 7.2712 8 25.2239 8 21.2571 8 69.7217 8)
Average genome size in population (length): 57.983
Average program size in population (points): 58.983
Average percent parens in population: 0.017
Minimum age in population: 38.27223527431488
Maximum age in population: 42.9602338001132
Average age in population: 40.94173829533905
Median age in population: 40.98209636285901
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 61
Genome diversity (% unique Plush genomes):	 0.678
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 61
Syntactic diversity (% unique Push programs):	 0.678
Total error diversity:				 0.212
Error (vector) diversity:			 0.23
Behavioral diversity:				 0.232
--- Run Statistics ---
Number of program evaluations used so far: 29000
Number of point (instruction) evaluations so far: 35080165
--- Timings ---
Current time: 1529614993442 milliseconds
Total Time:          99.6 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        45.3 seconds, 45.5%
Fitness Testing:     42.5 seconds, 42.7%
Report:              11.6 seconds, 11.6%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 28
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 29
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 29
;;******************************
;; -*- Number IO problem report - generation 29
Test total error for best: 74087.97659999998
Test mean error for best: 37.04399
;;------------------------------
Outputs of best individual on training cases:
Correct output: -116.076402553 | Program output: -41.0401600   
Correct output: 24.1400847456  | Program output: -10.07181     
Correct output: 69.833290954   | Program output: 20.021441     
Correct output: 82.4958592801  | Program output: 94.0159025    
Correct output: 34.2385110874  | Program output: 81.026724     
Correct output: -10.7358110665 | Program output: 47.0482304    
Correct output: 1.9700532093   | Program output: -11.050100    
Correct output: -44.7956976677 | Program output: 51.0522704    
Correct output: 68.5576547673  | Program output: 46.0472209    
Correct output: -69.2536523379 | Program output: -54.0192809   
Correct output: -14.2275745396 | Program output: 41.0421764    
Correct output: -171.9767905886 | Program output: -85.0767056   
Correct output: -32.1846093265 | Program output: 1.024         
Correct output: 66.9812146721  | Program output: 73.0745476    
Correct output: 100.0259781081 | Program output: 34.0351225    
Correct output: -90.2595503995 | Program output: -34.0791089   
Correct output: -82.4635707651 | Program output: -96.0659025   
Correct output: -8.7492896214  | Program output: -50.0312401   
Correct output: -82.1329348831 | Program output: -82.0796561   
Correct output: 24.5261129925  | Program output: -73.0405184   
Correct output: -11.4065589042 | Program output: -53.0602704   
Correct output: 10.3282540908  | Program output: -77.045776    
Correct output: -51.7760580299 | Program output: -78.0755929   
Correct output: 51.8185003253  | Program output: 74.0755625    
Correct output: 110.7431489201 | Program output: 20.021441     
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_yankdup} {:instruction float_pop} {:instruction float_mult} {:instruction in2} {:instruction float_max} {:instruction integer_dup} {:instruction print_float} {:instruction integer_mult} {:instruction float_mult} {:instruction float_pop} {:instruction float_mult} {:instruction in2} {:instruction float_min} {:instruction float_sub} {:instruction float_mult} {:instruction integer_dup} {:instruction float_add} {:instruction float_mult} {:instruction integer_mult} {:instruction integer_dup} {:instruction float_add} {:instruction integer_dec} {:instruction integer_mult} {:instruction float_mult} {:instruction float_pop} {:instruction float_tan} {:instruction in2} {:instruction float_max} {:instruction float_pop} {:instruction float_mult} {:instruction in2} {:instruction float_max} {:instruction integer_dup} {:instruction integer_pop} {:instruction integer_dec} {:instruction float_cos} {:instruction float_frominteger} {:instruction integer_swap} {:instruction integer_mod} {:instruction integer_dup} {:instruction 80} {:instruction integer_mod} {:instruction integer_dup} {:instruction 80} {:instruction float_dup_items} {:instruction print_float} {:instruction float_frominteger} {:instruction print_integer} {:instruction integer_yankdup} {:instruction float_mult} {:instruction integer_max} {:instruction integer_stackdepth} {:instruction float_dup} {:instruction float_dup} {:instruction float_inc} {:instruction integer_mult} {:instruction integer_div} {:instruction print_integer} {:instruction integer_flush})
Best program: (float_yankdup float_pop float_mult in2 float_max integer_dup print_float integer_mult float_mult float_pop float_mult in2 float_min float_sub float_mult integer_dup float_add float_mult integer_mult integer_dup float_add integer_dec integer_mult float_mult float_pop float_tan in2 float_max float_pop float_mult in2 float_max integer_dup integer_pop integer_dec float_cos float_frominteger integer_swap integer_mod integer_dup 80 integer_mod integer_dup 80 float_dup_items print_float float_frominteger print_integer integer_yankdup float_mult integer_max integer_stackdepth float_dup float_dup float_inc integer_mult integer_div print_integer integer_flush)
Errors: [75.0362 8 34.2119 10 49.8118 10 11.52 10 46.7882 10 57.784 11 13.0202 9 95.848 11 22.5104 11 15.2344 10 55.2698 11 86.9001 7 33.2086 11 6.0933 10 65.9909 10 56.1804 9 13.6023 8 41.282 10 0.0533 8 97.5666 12 41.6537 8 87.374 12 26.2995 8 22.2571 9 90.7217 9]
Total: 1388.2184000000004
Mean: 27.764368
Genome size: 59
Size: 60
Percent parens: 0.017
--- Population Statistics ---
Average total errors in population: 5591.266015199991
Median total errors in population: 1391.2355000000002
Error averages by case: (260.40849250000116 8.45 222.50523229999789 10.195 189.57173759999858 10.015 166.883689899999 10.203 189.26741660000087 10.111 195.83613260000283 11.251 206.5029204999986 9.212 233.02084929999893 11.502 176.18863069999958 10.877 216.51550180000083 10.399 194.64250790000108 11.144 270.5801207000003 8.635 149.52329260000067 11.116 158.89255369999913 10.381 211.48428250000185 10.34 245.76492019999972 10.205 214.42695419999976 8.956 236.25743950000276 10.496 200.9817922999996 8.654 274.8794157999978 12.139 234.6742848999978 9.214 269.6609379000033 11.815 225.0167980000002 9.301 170.43432689999872 9.469 223.87478429999786 9.391)
Error minima by case: (74.0362 6 2.8599 7 9.7714 7 2.4868 9 6.7615 9 9.6876 7 0.1 6 43.7434 8 6.4946 8 14.2264 8 13.1854 7 85.9001 6 31.1606 4 5.0933 8 20.0248 9 55.1804 8 12.5455 6 7.718 8 0.0525 7 15.4739 8 10.3463 7 6.3283 8 25.2299 7 17.7831 7 21.0 8)
Average genome size in population (length): 59.593
Average program size in population (points): 60.593
Average percent parens in population: 0.017
Minimum age in population: 40.00742302834988
Maximum age in population: 44.32465132698417
Average age in population: 42.34284583532438
Median age in population: 42.34848505072296
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 73
Genome diversity (% unique Plush genomes):	 0.641
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 73
Syntactic diversity (% unique Push programs):	 0.641
Total error diversity:				 0.196
Error (vector) diversity:			 0.207
Behavioral diversity:				 0.21
--- Run Statistics ---
Number of program evaluations used so far: 30000
Number of point (instruction) evaluations so far: 36569990
--- Timings ---
Current time: 1529614997145 milliseconds
Total Time:         103.3 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        46.9 seconds, 45.4%
Fitness Testing:     44.2 seconds, 42.8%
Report:              12.0 seconds, 11.6%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 29
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 30
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 30
;;******************************
;; -*- Number IO problem report - generation 30
Test total error for best: 74087.97659999998
Test mean error for best: 37.04399
;;------------------------------
Outputs of best individual on training cases:
Correct output: -116.076402553 | Program output: -41.0401600   
Correct output: 24.1400847456  | Program output: -10.07181     
Correct output: 69.833290954   | Program output: 20.021441     
Correct output: 82.4958592801  | Program output: 94.0159025    
Correct output: 34.2385110874  | Program output: 81.026724     
Correct output: -10.7358110665 | Program output: 47.0482304    
Correct output: 1.9700532093   | Program output: -11.050100    
Correct output: -44.7956976677 | Program output: 51.0522704    
Correct output: 68.5576547673  | Program output: 46.0472209    
Correct output: -69.2536523379 | Program output: -54.0192809   
Correct output: -14.2275745396 | Program output: 41.0421764    
Correct output: -171.9767905886 | Program output: -85.0767056   
Correct output: -32.1846093265 | Program output: 1.024         
Correct output: 66.9812146721  | Program output: 73.0745476    
Correct output: 100.0259781081 | Program output: 34.0351225    
Correct output: -90.2595503995 | Program output: -34.0791089   
Correct output: -82.4635707651 | Program output: -96.0659025   
Correct output: -8.7492896214  | Program output: -50.0312401   
Correct output: -82.1329348831 | Program output: -82.0796561   
Correct output: 24.5261129925  | Program output: -73.0405184   
Correct output: -11.4065589042 | Program output: -53.0602704   
Correct output: 10.3282540908  | Program output: -77.045776    
Correct output: -51.7760580299 | Program output: -78.0755929   
Correct output: 51.8185003253  | Program output: 74.0755625    
Correct output: 110.7431489201 | Program output: 20.021441     
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_yankdup} {:instruction float_pop} {:instruction float_mult} {:instruction in2} {:instruction float_max} {:instruction integer_dup} {:instruction print_float} {:instruction integer_mult} {:instruction float_mult} {:instruction float_pop} {:instruction float_mult} {:instruction in2} {:instruction float_min} {:instruction float_sub} {:instruction float_mult} {:instruction integer_dup} {:instruction float_add} {:instruction float_mult} {:instruction integer_mult} {:instruction integer_dup} {:instruction float_add} {:instruction integer_dec} {:instruction integer_mult} {:instruction float_mult} {:instruction float_pop} {:instruction float_tan} {:instruction in2} {:instruction float_max} {:instruction float_pop} {:instruction float_mult} {:instruction in2} {:instruction float_max} {:instruction integer_dup} {:instruction integer_pop} {:instruction integer_dec} {:instruction float_cos} {:instruction float_frominteger} {:instruction integer_swap} {:instruction integer_mod} {:instruction integer_dup} {:instruction 80} {:instruction integer_mod} {:instruction integer_dup} {:instruction 80} {:instruction float_dup_items} {:instruction print_float} {:instruction float_frominteger} {:instruction print_integer} {:instruction integer_yankdup} {:instruction float_mult} {:instruction integer_max} {:instruction integer_stackdepth} {:instruction float_dup} {:instruction float_dup} {:instruction float_inc} {:instruction integer_mult} {:instruction integer_div} {:instruction print_integer} {:instruction integer_flush})
Best program: (float_yankdup float_pop float_mult in2 float_max integer_dup print_float integer_mult float_mult float_pop float_mult in2 float_min float_sub float_mult integer_dup float_add float_mult integer_mult integer_dup float_add integer_dec integer_mult float_mult float_pop float_tan in2 float_max float_pop float_mult in2 float_max integer_dup integer_pop integer_dec float_cos float_frominteger integer_swap integer_mod integer_dup 80 integer_mod integer_dup 80 float_dup_items print_float float_frominteger print_integer integer_yankdup float_mult integer_max integer_stackdepth float_dup float_dup float_inc integer_mult integer_div print_integer integer_flush)
Errors: [75.0362 8 34.2119 10 49.8118 10 11.52 10 46.7882 10 57.784 11 13.0202 9 95.848 11 22.5104 11 15.2344 10 55.2698 11 86.9001 7 33.2086 11 6.0933 10 65.9909 10 56.1804 9 13.6023 8 41.282 10 0.0533 8 97.5666 12 41.6537 8 87.374 12 26.2995 8 22.2571 9 90.7217 9]
Total: 1388.2184000000004
Mean: 27.764368
Genome size: 59
Size: 60
Percent parens: 0.017
--- Population Statistics ---
Average total errors in population: 5990.922201299999
Median total errors in population: 1391.2355000000002
Error averages by case: (269.5965273000002 8.749 227.54680469999775 10.265 216.88043189999837 10.054 194.34117959999878 10.254 216.2158508000011 10.159 224.2098972000031 11.339 212.72180419999924 9.234 257.26237529999884 11.594 200.9891274999997 10.973 223.19570209999824 10.713 222.9858302000015 11.211 279.80450880000143 8.84 155.52320260000096 11.175 185.83602809999954 10.509 235.62664520000192 10.413 254.59582270000206 10.034 221.73794229999942 9.232 241.19355480000294 10.673 209.95370439999954 8.963 284.8693752999988 12.241 242.62873069999804 9.163 276.6717690000033 11.999 230.41293429999814 9.169 200.38123259999853 9.556 249.73121969999795 9.498)
Error minima by case: (22.0362 7 9.0 5 10.1667 6 2.4056 8 14.2385 9 1.6407 7 0.9701 5 32.4191 7 11.4423 7 14.1608 7 1.851 7 77.9001 6 2.0 3 5.0933 8 20.0137 8 3.8196 7 11.5364 8 3.6273 8 0.0329 7 14.5464 7 0.97 7 6.2825 7 24.2239 7 21.2571 8 21.0 7)
Average genome size in population (length): 59.187
Average program size in population (points): 60.187
Average percent parens in population: 0.017
Minimum age in population: 41.65828691422939
Maximum age in population: 45.66962989419699
Average age in population: 43.76089753840305
Median age in population: 43.76949601341039
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 128
Genome diversity (% unique Plush genomes):	 0.642
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 128
Syntactic diversity (% unique Push programs):	 0.642
Total error diversity:				 0.216
Error (vector) diversity:			 0.23
Behavioral diversity:				 0.23
--- Run Statistics ---
Number of program evaluations used so far: 31000
Number of point (instruction) evaluations so far: 38049665
--- Timings ---
Current time: 1529615000581 milliseconds
Total Time:         106.7 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        48.3 seconds, 45.3%
Fitness Testing:     45.9 seconds, 43.0%
Report:              12.4 seconds, 11.6%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 30
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 31
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 31
;;******************************
;; -*- Number IO problem report - generation 31
Test total error for best: 74087.97659999998
Test mean error for best: 37.04399
;;------------------------------
Outputs of best individual on training cases:
Correct output: -116.076402553 | Program output: -41.0401600   
Correct output: 24.1400847456  | Program output: -10.07181     
Correct output: 69.833290954   | Program output: 20.021441     
Correct output: 82.4958592801  | Program output: 94.0159025    
Correct output: 34.2385110874  | Program output: 81.026724     
Correct output: -10.7358110665 | Program output: 47.0482304    
Correct output: 1.9700532093   | Program output: -11.050100    
Correct output: -44.7956976677 | Program output: 51.0522704    
Correct output: 68.5576547673  | Program output: 46.0472209    
Correct output: -69.2536523379 | Program output: -54.0192809   
Correct output: -14.2275745396 | Program output: 41.0421764    
Correct output: -171.9767905886 | Program output: -85.0767056   
Correct output: -32.1846093265 | Program output: 1.024         
Correct output: 66.9812146721  | Program output: 73.0745476    
Correct output: 100.0259781081 | Program output: 34.0351225    
Correct output: -90.2595503995 | Program output: -34.0791089   
Correct output: -82.4635707651 | Program output: -96.0659025   
Correct output: -8.7492896214  | Program output: -50.0312401   
Correct output: -82.1329348831 | Program output: -82.0796561   
Correct output: 24.5261129925  | Program output: -73.0405184   
Correct output: -11.4065589042 | Program output: -53.0602704   
Correct output: 10.3282540908  | Program output: -77.045776    
Correct output: -51.7760580299 | Program output: -78.0755929   
Correct output: 51.8185003253  | Program output: 74.0755625    
Correct output: 110.7431489201 | Program output: 20.021441     
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_yankdup} {:instruction float_pop} {:instruction float_mult} {:instruction in2} {:instruction integer_sub} {:instruction integer_dup} {:instruction print_float} {:instruction integer_mult} {:instruction float_mult} {:instruction float_pop} {:instruction float_mult} {:instruction in2} {:instruction float_min} {:instruction float_sub} {:instruction float_mult} {:instruction integer_dup} {:instruction float_add} {:instruction float_mult} {:instruction integer_mult} {:instruction integer_dup} {:instruction float_add} {:instruction integer_dec} {:instruction integer_mult} {:instruction float_mult} {:instruction float_pop} {:instruction float_tan} {:instruction in2} {:instruction float_max} {:instruction float_pop} {:instruction float_mult} {:instruction in2} {:instruction float_max} {:instruction integer_dup} {:instruction integer_pop} {:instruction integer_dec} {:instruction float_cos} {:instruction float_frominteger} {:instruction integer_swap} {:instruction integer_mod} {:instruction integer_dup} {:instruction 80} {:instruction integer_mod} {:instruction integer_dup} {:instruction 80} {:instruction float_dup_items} {:instruction print_float} {:instruction float_frominteger} {:instruction print_integer} {:instruction integer_yankdup} {:instruction float_mult} {:instruction integer_max} {:instruction integer_stackdepth} {:instruction float_dup} {:instruction float_dup} {:instruction float_inc} {:instruction float_rot} {:instruction integer_div} {:instruction print_integer} {:instruction integer_flush})
Best program: (float_yankdup float_pop float_mult in2 integer_sub integer_dup print_float integer_mult float_mult float_pop float_mult in2 float_min float_sub float_mult integer_dup float_add float_mult integer_mult integer_dup float_add integer_dec integer_mult float_mult float_pop float_tan in2 float_max float_pop float_mult in2 float_max integer_dup integer_pop integer_dec float_cos float_frominteger integer_swap integer_mod integer_dup 80 integer_mod integer_dup 80 float_dup_items print_float float_frominteger print_integer integer_yankdup float_mult integer_max integer_stackdepth float_dup float_dup float_inc float_rot integer_div print_integer integer_flush)
Errors: [75.0362 8 34.2119 10 49.8118 10 11.52 10 46.7882 10 57.784 11 13.0202 9 95.848 11 22.5104 11 15.2344 10 55.2698 11 86.9001 7 33.2086 11 6.0933 10 65.9909 10 56.1804 9 13.6023 8 41.282 10 0.0533 8 97.5666 12 41.6537 8 87.374 12 26.2995 8 22.2571 9 90.7217 9]
Total: 1388.2184000000004
Mean: 27.764368
Genome size: 59
Size: 60
Percent parens: 0.017
--- Population Statistics ---
Average total errors in population: 5465.652264500001
Median total errors in population: 1388.2184000000004
Error averages by case: (250.59134360000095 8.714 218.75140819999817 10.238 197.23912979999875 10.023 167.34664999999939 10.213 186.45619170000091 10.125 196.70873050000247 11.303 199.79670259999946 9.227 229.2465327999992 11.551 175.82017639999967 10.953 204.04030759999793 10.704 194.54051900000073 11.167 262.3989164999997 8.8 137.10543529999984 11.172 153.98486509999918 10.442 211.73339530000155 10.346 238.18204360000277 9.887 203.65740129999932 9.163 223.52559360000242 10.669 194.0860961999996 8.888 265.7960792999986 12.259 222.02568069999802 9.046 257.64612490000303 11.99 212.35787779999788 9.094 176.32409289999862 9.489 231.38096979999807 9.447)
Error minima by case: (35.0764 6 24.1401 6 9.1711 6 2.4 8 6.7615 8 9.7033 6 1.9656 6 43.763 6 10.4446 6 14.2315 7 13.2153 6 2.9768 7 2.0 3 5.0243 9 19.9909 7 23.2596 7 12.5364 8 7.7435 8 0.0378 7 1.4536 6 10.3738 8 3.6863 6 25.2239 8 21.1871 7 21.0 7)
Average genome size in population (length): 59.231
Average program size in population (points): 60.231
Average percent parens in population: 0.017
Minimum age in population: 42.93351882696152
Maximum age in population: 47.09926661197096
Average age in population: 45.18665682486258
Median age in population: 45.25142842112109
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 116
Genome diversity (% unique Plush genomes):	 0.668
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 116
Syntactic diversity (% unique Push programs):	 0.668
Total error diversity:				 0.209
Error (vector) diversity:			 0.222
Behavioral diversity:				 0.222
--- Run Statistics ---
Number of program evaluations used so far: 32000
Number of point (instruction) evaluations so far: 39530440
--- Timings ---
Current time: 1529615004440 milliseconds
Total Time:         110.5 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        49.8 seconds, 45.1%
Fitness Testing:     47.7 seconds, 43.2%
Report:              12.8 seconds, 11.6%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 31
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 32
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 32
;;******************************
;; -*- Number IO problem report - generation 32
Test total error for best: 74087.97659999998
Test mean error for best: 37.04399
;;------------------------------
Outputs of best individual on training cases:
Correct output: -116.076402553 | Program output: -41.0401600   
Correct output: 24.1400847456  | Program output: -10.07181     
Correct output: 69.833290954   | Program output: 20.021441     
Correct output: 82.4958592801  | Program output: 94.0159025    
Correct output: 34.2385110874  | Program output: 81.026724     
Correct output: -10.7358110665 | Program output: 47.0482304    
Correct output: 1.9700532093   | Program output: -11.050100    
Correct output: -44.7956976677 | Program output: 51.0522704    
Correct output: 68.5576547673  | Program output: 46.0472209    
Correct output: -69.2536523379 | Program output: -54.0192809   
Correct output: -14.2275745396 | Program output: 41.0421764    
Correct output: -171.9767905886 | Program output: -85.0767056   
Correct output: -32.1846093265 | Program output: 1.024         
Correct output: 66.9812146721  | Program output: 73.0745476    
Correct output: 100.0259781081 | Program output: 34.0351225    
Correct output: -90.2595503995 | Program output: -34.0791089   
Correct output: -82.4635707651 | Program output: -96.0659025   
Correct output: -8.7492896214  | Program output: -50.0312401   
Correct output: -82.1329348831 | Program output: -82.0796561   
Correct output: 24.5261129925  | Program output: -73.0405184   
Correct output: -11.4065589042 | Program output: -53.0602704   
Correct output: 10.3282540908  | Program output: -77.045776    
Correct output: -51.7760580299 | Program output: -78.0755929   
Correct output: 51.8185003253  | Program output: 74.0755625    
Correct output: 110.7431489201 | Program output: 20.021441     
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_yankdup} {:instruction float_pop} {:instruction float_mult} {:instruction in2} {:instruction float_max} {:instruction integer_dup} {:instruction print_float} {:instruction integer_mult} {:instruction float_mult} {:instruction float_pop} {:instruction float_mult} {:instruction in2} {:instruction float_min} {:instruction float_sub} {:instruction float_mult} {:instruction integer_dup} {:instruction float_add} {:instruction float_mult} {:instruction integer_mult} {:instruction integer_dup} {:instruction float_add} {:instruction integer_dec} {:instruction integer_mult} {:instruction float_mult} {:instruction float_pop} {:instruction float_tan} {:instruction in2} {:instruction float_max} {:instruction float_pop} {:instruction float_mult} {:instruction in2} {:instruction float_max} {:instruction integer_dup} {:instruction integer_pop} {:instruction integer_dec} {:instruction float_cos} {:instruction float_frominteger} {:instruction integer_swap} {:instruction integer_mod} {:instruction integer_dup} {:instruction 80} {:instruction integer_mod} {:instruction integer_dup} {:instruction 80} {:instruction float_dup_items} {:instruction print_float} {:instruction float_frominteger} {:instruction print_integer} {:instruction integer_yankdup} {:instruction float_mult} {:instruction integer_max} {:instruction integer_stackdepth} {:instruction float_dup} {:instruction float_dup} {:instruction float_inc} {:instruction integer_mult} {:instruction integer_div} {:instruction print_integer} {:instruction integer_flush})
Best program: (float_yankdup float_pop float_mult in2 float_max integer_dup print_float integer_mult float_mult float_pop float_mult in2 float_min float_sub float_mult integer_dup float_add float_mult integer_mult integer_dup float_add integer_dec integer_mult float_mult float_pop float_tan in2 float_max float_pop float_mult in2 float_max integer_dup integer_pop integer_dec float_cos float_frominteger integer_swap integer_mod integer_dup 80 integer_mod integer_dup 80 float_dup_items print_float float_frominteger print_integer integer_yankdup float_mult integer_max integer_stackdepth float_dup float_dup float_inc integer_mult integer_div print_integer integer_flush)
Errors: [75.0362 8 34.2119 10 49.8118 10 11.52 10 46.7882 10 57.784 11 13.0202 9 95.848 11 22.5104 11 15.2344 10 55.2698 11 86.9001 7 33.2086 11 6.0933 10 65.9909 10 56.1804 9 13.6023 8 41.282 10 0.0533 8 97.5666 12 41.6537 8 87.374 12 26.2995 8 22.2571 9 90.7217 9]
Total: 1388.2184000000004
Mean: 27.764368
Genome size: 59
Size: 60
Percent parens: 0.017
--- Population Statistics ---
Average total errors in population: 5814.570861800002
Median total errors in population: 1388.2184000000004
Error averages by case: (266.2929737000009 8.772 230.0819904999979 10.231 203.49628059999873 10.018 178.76372109999903 10.246 201.02843280000113 10.124 211.1197780000027 11.352 211.8427074999993 9.252 243.01906899999926 11.597 186.4732659999996 10.931 221.24262629999785 10.765 208.96738320000094 11.201 277.41739760000047 8.904 151.7451166000002 11.157 168.7304349999993 10.47 221.82924100000176 10.408 253.1063189000025 9.938 221.42958129999948 9.224 240.8960245000025 10.719 210.74195989999973 8.929 282.2085145999991 12.26 239.3254487999981 9.102 275.2096254000029 12.01 229.96444099999778 9.123 187.00581979999822 9.527 236.90370869999825 9.469)
Error minima by case: (35.0354 7 9.0 5 9.1667 7 2.4799 8 23.2385 9 10.7358 8 1.9701 6 3.7937 8 10.4423 8 14.2174 8 14.069 8 2.8998 7 2.0 4 5.0225 9 19.9906 8 23.2116 8 12.5364 8 8.7493 8 0.0469 7 24.5261 8 11.4066 8 10.3283 7 10.774 7 21.2565 7 21.0 8)
Average genome size in population (length): 59.041
Average program size in population (points): 60.041
Average percent parens in population: 0.017
Minimum age in population: 44.32297523133457
Maximum age in population: 48.53347594290972
Average age in population: 46.62187987124873
Median age in population: 46.66514648706652
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 95
Genome diversity (% unique Plush genomes):	 0.716
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 95
Syntactic diversity (% unique Push programs):	 0.716
Total error diversity:				 0.203
Error (vector) diversity:			 0.22
Behavioral diversity:				 0.22
--- Run Statistics ---
Number of program evaluations used so far: 33000
Number of point (instruction) evaluations so far: 41006465
--- Timings ---
Current time: 1529615007976 milliseconds
Total Time:         114.1 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        51.3 seconds, 45.0%
Fitness Testing:     49.4 seconds, 43.3%
Report:              13.3 seconds, 11.6%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 32
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 33
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 33
;;******************************
;; -*- Number IO problem report - generation 33
Test total error for best: 59601.72740000004
Test mean error for best: 29.80086
;;------------------------------
Outputs of best individual on training cases:
Correct output: -116.076402553 | Program output: -41.0401600   
Correct output: 24.1400847456  | Program output: -10.07181     
Correct output: 69.833290954   | Program output: 20.021441     
Correct output: 82.4958592801  | Program output: 94.0159025    
Correct output: 34.2385110874  | Program output: 81.026724     
Correct output: -10.7358110665 | Program output: 47.0482304    
Correct output: 1.9700532093   | Program output: -11.050100    
Correct output: -44.7956976677 | Program output: 51.0522704    
Correct output: 68.5576547673  | Program output: 46.0472209    
Correct output: -69.2536523379 | Program output: -54.0192809   
Correct output: -14.2275745396 | Program output: 41.0421764    
Correct output: -171.9767905886 | Program output: -85.0767056   
Correct output: -32.1846093265 | Program output: 1.024         
Correct output: 66.9812146721  | Program output: 73.0745476    
Correct output: 100.0259781081 | Program output: 34.0351225    
Correct output: -90.2595503995 | Program output: -34.0791089   
Correct output: -82.4635707651 | Program output: -96.0659025   
Correct output: -8.7492896214  | Program output: -50.0312401   
Correct output: -82.1329348831 | Program output: -82.0796561   
Correct output: 24.5261129925  | Program output: -73.0405184   
Correct output: -11.4065589042 | Program output: -53.0602704   
Correct output: 10.3282540908  | Program output: -77.045776    
Correct output: -51.7760580299 | Program output: -78.0755929   
Correct output: 51.8185003253  | Program output: 74.0755625    
Correct output: 110.7431489201 | Program output: 20.021441     
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_yankdup} {:instruction float_max} {:instruction float_mult} {:instruction in2} {:instruction float_max} {:instruction integer_dup} {:instruction print_float} {:instruction integer_mult} {:instruction float_mult} {:instruction float_pop} {:instruction float_mult} {:instruction in2} {:instruction float_min} {:instruction float_sub} {:instruction float_mult} {:instruction integer_dup} {:instruction float_mult} {:instruction integer_mult} {:instruction integer_dup} {:instruction float_add} {:instruction integer_dec} {:instruction integer_mult} {:instruction float_mult} {:instruction float_pop} {:instruction float_yankdup} {:instruction in2} {:instruction float_max} {:instruction float_pop} {:instruction float_mult} {:instruction in2} {:instruction float_max} {:instruction integer_dup} {:instruction integer_pop} {:instruction integer_dec} {:instruction float_cos} {:instruction float_frominteger} {:instruction integer_swap} {:instruction integer_mod} {:instruction float_swap} {:instruction 80} {:instruction integer_mod} {:instruction integer_dup} {:instruction 80} {:instruction float_dup_items} {:instruction print_float} {:instruction float_frominteger} {:instruction print_integer} {:instruction integer_yankdup} {:instruction float_mult} {:instruction integer_max} {:instruction integer_stackdepth} {:instruction float_dup} {:instruction float_dup} {:instruction float_inc} {:instruction integer_mult} {:instruction integer_div} {:instruction print_integer} {:instruction integer_flush})
Best program: (float_yankdup float_max float_mult in2 float_max integer_dup print_float integer_mult float_mult float_pop float_mult in2 float_min float_sub float_mult integer_dup float_mult integer_mult integer_dup float_add integer_dec integer_mult float_mult float_pop float_yankdup in2 float_max float_pop float_mult in2 float_max integer_dup integer_pop integer_dec float_cos float_frominteger integer_swap integer_mod float_swap 80 integer_mod integer_dup 80 float_dup_items print_float float_frominteger print_integer integer_yankdup float_mult integer_max integer_stackdepth float_dup float_dup float_inc integer_mult integer_div print_integer integer_flush)
Errors: [75.0362 8 34.2119 10 49.8118 10 11.52 10 46.7882 10 57.784 11 13.0202 9 95.848 11 22.5104 11 15.2344 10 55.2698 11 86.9001 7 33.2086 11 6.0933 10 65.9909 10 56.1804 9 13.6023 8 41.282 10 0.0533 8 97.5666 12 41.6537 8 87.374 12 26.2995 8 22.2571 9 90.7217 9]
Total: 1388.2184000000004
Mean: 27.764368
Genome size: 58
Size: 59
Percent parens: 0.017
--- Population Statistics ---
Average total errors in population: 5537.941267200003
Median total errors in population: 1388.2184000000004
Error averages by case: (255.016461500001 8.722 215.99087999999782 10.239 197.56353479999845 10.009 169.44734909999926 10.225 188.35259180000057 10.117 196.9917853000028 11.336 198.8411137999997 9.25 231.2934568999992 11.59 178.29475849999974 10.903 208.99792059999743 10.747 195.70512710000088 11.172 266.0734461 8.932 142.78279660000004 11.149 156.76478609999938 10.473 214.06045180000174 10.374 241.69504770000268 9.939 208.8536919999994 9.268 228.75208270000263 10.71 198.21524569999966 8.946 270.40255849999863 12.253 227.22000439999817 9.097 263.18629050000266 11.973 217.60895819999791 9.177 178.9365099999987 9.516 231.31441749999797 9.463)
Error minima by case: (35.0764 7 23.1401 9 10.1711 8 2.4868 8 6.7615 9 9.7435 9 0.9701 8 1.6988 10 11.4446 9 14.1811 8 13.2402 9 2.9768 7 14.3099 10 5.0789 9 20.0248 8 23.2596 7 12.5364 7 8.7493 8 0.0329 7 14.5144 9 11.4066 8 7.2825 8 5.2816 8 21.2216 7 30.7387 8)
Average genome size in population (length): 59.192
Average program size in population (points): 60.192
Average percent parens in population: 0.017
Minimum age in population: 45.35926808416843
Maximum age in population: 50.04806007537991
Average age in population: 47.99468243090878
Median age in population: 48.00399737386033
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 62
Genome diversity (% unique Plush genomes):	 0.737
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 62
Syntactic diversity (% unique Push programs):	 0.737
Total error diversity:				 0.216
Error (vector) diversity:			 0.235
Behavioral diversity:				 0.235
--- Run Statistics ---
Number of program evaluations used so far: 34000
Number of point (instruction) evaluations so far: 42486265
--- Timings ---
Current time: 1529615011643 milliseconds
Total Time:         117.8 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        52.8 seconds, 44.9%
Fitness Testing:     51.1 seconds, 43.4%
Report:              13.7 seconds, 11.6%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 33
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 34
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 34
;;******************************
;; -*- Number IO problem report - generation 34
Test total error for best: 74087.97659999998
Test mean error for best: 37.04399
;;------------------------------
Outputs of best individual on training cases:
Correct output: -116.076402553 | Program output: -41.0401600   
Correct output: 24.1400847456  | Program output: -10.07181     
Correct output: 69.833290954   | Program output: 20.021441     
Correct output: 82.4958592801  | Program output: 94.0159025    
Correct output: 34.2385110874  | Program output: 81.026724     
Correct output: -10.7358110665 | Program output: 47.0482304    
Correct output: 1.9700532093   | Program output: -11.050100    
Correct output: -44.7956976677 | Program output: 51.0522704    
Correct output: 68.5576547673  | Program output: 46.0472209    
Correct output: -69.2536523379 | Program output: -54.0192809   
Correct output: -14.2275745396 | Program output: 41.0421764    
Correct output: -171.9767905886 | Program output: -85.0767056   
Correct output: -32.1846093265 | Program output: 1.024         
Correct output: 66.9812146721  | Program output: 73.0745476    
Correct output: 100.0259781081 | Program output: 34.0351225    
Correct output: -90.2595503995 | Program output: -34.0791089   
Correct output: -82.4635707651 | Program output: -96.0659025   
Correct output: -8.7492896214  | Program output: -50.0312401   
Correct output: -82.1329348831 | Program output: -82.0796561   
Correct output: 24.5261129925  | Program output: -73.0405184   
Correct output: -11.4065589042 | Program output: -53.0602704   
Correct output: 10.3282540908  | Program output: -77.045776    
Correct output: -51.7760580299 | Program output: -78.0755929   
Correct output: 51.8185003253  | Program output: 74.0755625    
Correct output: 110.7431489201 | Program output: 20.021441     
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_mult} {:instruction float_pop} {:instruction float_mult} {:instruction in2} {:instruction float_max} {:instruction integer_dup} {:instruction print_float} {:instruction integer_mult} {:instruction float_mult} {:instruction float_pop} {:instruction float_mult} {:instruction in2} {:instruction float_min} {:instruction float_sub} {:instruction float_mult} {:instruction integer_dup} {:instruction float_add} {:instruction float_mult} {:instruction integer_mult} {:instruction float_mult} {:instruction float_pop} {:instruction float_yankdup} {:instruction integer_dup} {:instruction float_add} {:instruction integer_dec} {:instruction integer_mult} {:instruction float_mult} {:instruction float_pop} {:instruction float_tan} {:instruction in2} {:instruction float_max} {:instruction float_pop} {:instruction float_mult} {:instruction in2} {:instruction float_max} {:instruction integer_dup} {:instruction integer_pop} {:instruction integer_dec} {:instruction float_cos} {:instruction float_frominteger} {:instruction integer_swap} {:instruction integer_mod} {:instruction integer_dup} {:instruction 80} {:instruction integer_mod} {:instruction integer_dup} {:instruction 80} {:instruction float_dup_items} {:instruction print_float} {:instruction float_frominteger} {:instruction print_integer} {:instruction integer_yankdup} {:instruction float_mult} {:instruction integer_max} {:instruction integer_stackdepth} {:instruction float_dup} {:instruction float_dup} {:instruction float_inc} {:instruction integer_mult} {:instruction integer_div} {:instruction print_integer} {:instruction integer_flush})
Best program: (float_mult float_pop float_mult in2 float_max integer_dup print_float integer_mult float_mult float_pop float_mult in2 float_min float_sub float_mult integer_dup float_add float_mult integer_mult float_mult float_pop float_yankdup integer_dup float_add integer_dec integer_mult float_mult float_pop float_tan in2 float_max float_pop float_mult in2 float_max integer_dup integer_pop integer_dec float_cos float_frominteger integer_swap integer_mod integer_dup 80 integer_mod integer_dup 80 float_dup_items print_float float_frominteger print_integer integer_yankdup float_mult integer_max integer_stackdepth float_dup float_dup float_inc integer_mult integer_div print_integer integer_flush)
Errors: [75.0362 8 34.2119 10 49.8118 10 11.52 10 46.7882 10 57.784 11 13.0202 9 95.848 11 22.5104 11 15.2344 10 55.2698 11 86.9001 7 33.2086 11 6.0933 10 65.9909 10 56.1804 9 13.6023 8 41.282 10 0.0533 8 97.5666 12 41.6537 8 87.374 12 26.2995 8 22.2571 9 90.7217 9]
Total: 1388.2184000000004
Mean: 27.764368
Genome size: 62
Size: 63
Percent parens: 0.016
--- Population Statistics ---
Average total errors in population: 5674.2189735
Median total errors in population: 1388.2184000000004
Error averages by case: (255.355355900001 8.75 213.25876249999817 10.255 201.7007498999987 10.056 181.8355025999992 10.243 200.83509910000078 10.131 210.2074509000028 11.333 195.72597669999956 9.228 244.020283099999 11.598 191.1143136999997 10.975 211.8923917999979 10.74 207.50224040000106 11.192 266.71552219999995 8.868 149.6016529999999 11.178 170.30468959999914 10.474 225.2075734000017 10.386 244.55010810000246 9.946 212.28934279999942 9.256 231.2406113000025 10.704 199.4095951999997 8.935 270.3048545999984 12.216 228.66369839999825 9.082 263.17737540000303 11.966 220.58813039999808 9.11 188.1314522999988 9.519 234.9602401999981 9.485)
Error minima by case: (74.0362 7 14.1401 8 9.1711 8 3.4868 9 5.7615 9 9.6876 9 0.9091 8 43.7434 10 10.4446 9 14.2207 8 13.1854 10 85.9001 6 31.1606 10 5.0928 9 7.5049 8 55.1804 8 12.5364 8 7.718 8 0.0529 7 15.5257 9 10.3463 7 6.2705 8 25.2239 7 21.2565 8 18.2221 8)
Average genome size in population (length): 59.422
Average program size in population (points): 60.422
Average percent parens in population: 0.017
Minimum age in population: 46.42733525577933
Maximum age in population: 51.30426752823405
Average age in population: 49.36764863714902
Median age in population: 49.41446330578765
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 48
Genome diversity (% unique Plush genomes):	 0.749
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 48
Syntactic diversity (% unique Push programs):	 0.749
Total error diversity:				 0.214
Error (vector) diversity:			 0.239
Behavioral diversity:				 0.24
--- Run Statistics ---
Number of program evaluations used so far: 35000
Number of point (instruction) evaluations so far: 43971815
--- Timings ---
Current time: 1529615015313 milliseconds
Total Time:         121.4 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        54.4 seconds, 44.8%
Fitness Testing:     52.8 seconds, 43.5%
Report:              14.1 seconds, 11.6%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 34
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 35
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 35
;;******************************
;; -*- Number IO problem report - generation 35
Test total error for best: 59627.032100000055
Test mean error for best: 29.81352
;;------------------------------
Outputs of best individual on training cases:
Correct output: -116.076402553 | Program output: -41.0401600   
Correct output: 24.1400847456  | Program output: -10.02181     
Correct output: 69.833290954   | Program output: 20.021441     
Correct output: 82.4958592801  | Program output: 94.0159025    
Correct output: 34.2385110874  | Program output: 81.026724     
Correct output: -10.7358110665 | Program output: 47.0482304    
Correct output: 1.9700532093   | Program output: -11.050100    
Correct output: -44.7956976677 | Program output: 51.0522704    
Correct output: 68.5576547673  | Program output: 46.0472209    
Correct output: -69.2536523379 | Program output: -54.0692809   
Correct output: -14.2275745396 | Program output: 41.0421764    
Correct output: -171.9767905886 | Program output: -85.0767056   
Correct output: -32.1846093265 | Program output: 1.024         
Correct output: 66.9812146721  | Program output: 73.0745476    
Correct output: 100.0259781081 | Program output: 34.0351225    
Correct output: -90.2595503995 | Program output: -34.0691089   
Correct output: -82.4635707651 | Program output: -96.0659025   
Correct output: -8.7492896214  | Program output: -50.0212401   
Correct output: -82.1329348831 | Program output: -82.056561    
Correct output: 24.5261129925  | Program output: -73.0245184   
Correct output: -11.4065589042 | Program output: -53.0442704   
Correct output: 10.3282540908  | Program output: -77.0205776   
Correct output: -51.7760580299 | Program output: -78.0695929   
Correct output: 51.8185003253  | Program output: 74.0755625    
Correct output: 110.7431489201 | Program output: 20.021441     
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_yankdup} {:instruction float_pop} {:instruction float_mult} {:instruction in2} {:instruction float_max} {:instruction integer_dup} {:instruction print_float} {:instruction integer_mult} {:instruction float_mult} {:instruction float_pop} {:instruction float_mult} {:instruction in2} {:instruction float_min} {:instruction float_sub} {:instruction float_mult} {:instruction integer_dup} {:instruction integer_dup} {:instruction float_add} {:instruction integer_dec} {:instruction integer_mult} {:instruction float_mult} {:instruction float_add} {:instruction float_mult} {:instruction integer_mult} {:instruction integer_dup} {:instruction float_add} {:instruction integer_dec} {:instruction integer_mult} {:instruction float_mult} {:instruction float_pop} {:instruction float_tan} {:instruction in2} {:instruction float_max} {:instruction float_pop} {:instruction float_mult} {:instruction in2} {:instruction float_yankdup} {:instruction integer_dup} {:instruction integer_pop} {:instruction integer_dec} {:instruction float_cos} {:instruction float_frominteger} {:instruction integer_swap} {:instruction integer_mod} {:instruction integer_dup} {:instruction 80} {:instruction integer_mod} {:instruction integer_dup} {:instruction 80} {:instruction float_dup_items} {:instruction print_float} {:instruction float_frominteger} {:instruction print_integer} {:instruction integer_yankdup} {:instruction float_mult} {:instruction integer_max} {:instruction integer_stackdepth} {:instruction float_shove} {:instruction float_dup} {:instruction float_inc} {:instruction integer_mult} {:instruction integer_shove} {:instruction print_integer} {:instruction integer_flush})
Best program: (float_yankdup float_pop float_mult in2 float_max integer_dup print_float integer_mult float_mult float_pop float_mult in2 float_min float_sub float_mult integer_dup integer_dup float_add integer_dec integer_mult float_mult float_add float_mult integer_mult integer_dup float_add integer_dec integer_mult float_mult float_pop float_tan in2 float_max float_pop float_mult in2 float_yankdup integer_dup integer_pop integer_dec float_cos float_frominteger integer_swap integer_mod integer_dup 80 integer_mod integer_dup 80 float_dup_items print_float float_frominteger print_integer integer_yankdup float_mult integer_max integer_stackdepth float_shove float_dup float_inc integer_mult integer_shove print_integer integer_flush)
Errors: [75.0362 8 34.1619 11 49.8118 10 11.52 10 46.7882 10 57.784 11 13.0202 9 95.848 11 22.5104 11 15.1844 9 55.2698 11 86.9001 7 33.2086 11 6.0933 10 65.9909 10 56.1904 9 13.6023 8 41.272 10 0.0764 9 97.5506 11 41.6377 9 87.3488 11 26.2935 8 22.2571 9 90.7217 9]
Total: 1388.0783000000001
Mean: 27.761566
Genome size: 64
Size: 65
Percent parens: 0.015
--- Population Statistics ---
Average total errors in population: 5409.107940800004
Median total errors in population: 1388.2184000000004
Error averages by case: (247.65112890000088 8.69 208.62573949999836 10.233 190.84270829999892 10.048 168.61788069999938 10.226 189.8943572000007 10.126 195.43461200000246 11.31 191.94761729999956 9.244 231.65415089999894 11.57 175.6543306999995 10.927 201.9760264999982 10.669 193.2591478000008 11.188 256.20618029999974 8.781 147.82880550000036 11.149 156.60891389999932 10.443 211.70968200000155 10.385 233.1497273000025 9.876 200.9082009999992 9.167 221.85653100000243 10.669 187.1373406999996 8.83 260.458832499998 12.275 219.33977009999828 9.027 255.81591300000315 12.034 210.58138959999818 9.064 172.04135319999924 9.485 225.04560089999802 9.446)
Error minima by case: (73.9959 7 23.1401 9 9.1711 9 2.4959 8 32.2103 9 9.6716 9 0.9701 8 43.7314 10 10.4446 8 14.1735 8 13.1854 9 85.8958 6 31.1406 10 5.0208 9 20.026 9 55.1793 9 12.5364 8 7.718 8 0.0517 7 15.5464 9 10.3423 7 6.3077 8 25.2239 7 21.1835 8 30.7431 8)
Average genome size in population (length): 59.141
Average program size in population (points): 60.141
Average percent parens in population: 0.017
Minimum age in population: 48.50916140526533
Maximum age in population: 52.71662124304567
Average age in population: 50.78623053825868
Median age in population: 50.80199658602942
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 36
Genome diversity (% unique Plush genomes):	 0.735
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 36
Syntactic diversity (% unique Push programs):	 0.735
Total error diversity:				 0.197
Error (vector) diversity:			 0.214
Behavioral diversity:				 0.216
--- Run Statistics ---
Number of program evaluations used so far: 36000
Number of point (instruction) evaluations so far: 45450340
--- Timings ---
Current time: 1529615019081 milliseconds
Total Time:         125.2 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        56.0 seconds, 44.8%
Fitness Testing:     54.4 seconds, 43.5%
Report:              14.6 seconds, 11.6%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 35
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 36
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 36
;;******************************
;; -*- Number IO problem report - generation 36
Test total error for best: 59627.032100000055
Test mean error for best: 29.81352
;;------------------------------
Outputs of best individual on training cases:
Correct output: -116.076402553 | Program output: -41.0401600   
Correct output: 24.1400847456  | Program output: -10.02181     
Correct output: 69.833290954   | Program output: 20.021441     
Correct output: 82.4958592801  | Program output: 94.0159025    
Correct output: 34.2385110874  | Program output: 81.026724     
Correct output: -10.7358110665 | Program output: 47.0482304    
Correct output: 1.9700532093   | Program output: -11.050100    
Correct output: -44.7956976677 | Program output: 51.0522704    
Correct output: 68.5576547673  | Program output: 46.0472209    
Correct output: -69.2536523379 | Program output: -54.0692809   
Correct output: -14.2275745396 | Program output: 41.0421764    
Correct output: -171.9767905886 | Program output: -85.0767056   
Correct output: -32.1846093265 | Program output: 1.024         
Correct output: 66.9812146721  | Program output: 73.0745476    
Correct output: 100.0259781081 | Program output: 34.0351225    
Correct output: -90.2595503995 | Program output: -34.0691089   
Correct output: -82.4635707651 | Program output: -96.0659025   
Correct output: -8.7492896214  | Program output: -50.0212401   
Correct output: -82.1329348831 | Program output: -82.056561    
Correct output: 24.5261129925  | Program output: -73.0245184   
Correct output: -11.4065589042 | Program output: -53.0442704   
Correct output: 10.3282540908  | Program output: -77.0205776   
Correct output: -51.7760580299 | Program output: -78.0695929   
Correct output: 51.8185003253  | Program output: 74.0755625    
Correct output: 110.7431489201 | Program output: 20.021441     
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_yankdup} {:instruction float_pop} {:instruction float_mult} {:instruction in2} {:instruction float_max} {:instruction integer_dup} {:instruction print_float} {:instruction integer_mult} {:instruction float_mult} {:instruction float_pop} {:instruction float_mult} {:instruction in2} {:instruction float_min} {:instruction float_sub} {:instruction float_mult} {:instruction integer_dup} {:instruction integer_dup} {:instruction float_add} {:instruction integer_dec} {:instruction integer_mult} {:instruction float_mult} {:instruction float_add} {:instruction float_mult} {:instruction integer_mult} {:instruction integer_dup} {:instruction float_add} {:instruction integer_dec} {:instruction integer_mult} {:instruction float_mult} {:instruction float_pop} {:instruction float_tan} {:instruction in2} {:instruction float_max} {:instruction float_pop} {:instruction float_mult} {:instruction in2} {:instruction float_yankdup} {:instruction integer_dup} {:instruction integer_pop} {:instruction integer_dec} {:instruction float_cos} {:instruction float_frominteger} {:instruction integer_swap} {:instruction integer_mod} {:instruction integer_dup} {:instruction 80} {:instruction integer_mod} {:instruction integer_dup} {:instruction 80} {:instruction float_dup_items} {:instruction print_float} {:instruction float_frominteger} {:instruction print_integer} {:instruction integer_yankdup} {:instruction float_mult} {:instruction integer_max} {:instruction integer_stackdepth} {:instruction float_shove} {:instruction float_dup} {:instruction float_inc} {:instruction integer_mult} {:instruction integer_shove} {:instruction print_integer} {:instruction integer_flush})
Best program: (float_yankdup float_pop float_mult in2 float_max integer_dup print_float integer_mult float_mult float_pop float_mult in2 float_min float_sub float_mult integer_dup integer_dup float_add integer_dec integer_mult float_mult float_add float_mult integer_mult integer_dup float_add integer_dec integer_mult float_mult float_pop float_tan in2 float_max float_pop float_mult in2 float_yankdup integer_dup integer_pop integer_dec float_cos float_frominteger integer_swap integer_mod integer_dup 80 integer_mod integer_dup 80 float_dup_items print_float float_frominteger print_integer integer_yankdup float_mult integer_max integer_stackdepth float_shove float_dup float_inc integer_mult integer_shove print_integer integer_flush)
Errors: [75.0362 8 34.1619 11 49.8118 10 11.52 10 46.7882 10 57.784 11 13.0202 9 95.848 11 22.5104 11 15.1844 9 55.2698 11 86.9001 7 33.2086 11 6.0933 10 65.9909 10 56.1904 9 13.6023 8 41.272 10 0.0764 9 97.5506 11 41.6377 9 87.3488 11 26.2935 8 22.2571 9 90.7217 9]
Total: 1388.0783000000001
Mean: 27.761566
Genome size: 64
Size: 65
Percent parens: 0.015
--- Population Statistics ---
Average total errors in population: 5366.706104300006
Median total errors in population: 1388.2184000000004
Error averages by case: (244.39583820000092 8.721 203.97093409999806 10.237 188.1743510999987 10.059 168.42569629999934 10.25 190.18146030000068 10.149 196.7043716000021 11.312 185.93762849999953 9.238 231.74237949999878 11.573 176.24529359999957 10.986 197.63476779999849 10.725 195.41321850000074 11.208 254.1426806999996 8.784 142.48370859999943 11.132 158.7048050999992 10.496 211.96253760000184 10.362 231.10372810000183 9.889 198.63058999999936 9.176 218.11370280000273 10.684 186.86846709999966 8.937 257.7843960999983 12.268 216.00423609999822 9.049 251.9654833000024 11.967 208.04809629999764 9.054 174.97229439999944 9.518 221.84143859999762 9.48)
Error minima by case: (35.0764 7 9.0 8 9.1688 7 0.5048 8 6.7615 9 4.3127 8 0.9701 7 8.2566 8 10.447 8 14.2344 8 0.8148 7 2.9122 7 2.0 3 5.0188 9 18.0349 8 23.224 8 12.5364 8 7.6693 8 0.0521 7 7.4739 9 10.3266 8 6.2825 9 25.2239 8 21.1815 7 21.0 8)
Average genome size in population (length): 59.343
Average program size in population (points): 60.343
Average percent parens in population: 0.017
Minimum age in population: 49.50916140526533
Maximum age in population: 54.07313606454409
Average age in population: 52.14857714893913
Median age in population: 52.17291230168485
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 22
Genome diversity (% unique Plush genomes):	 0.736
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 22
Syntactic diversity (% unique Push programs):	 0.736
Total error diversity:				 0.22
Error (vector) diversity:			 0.235
Behavioral diversity:				 0.237
--- Run Statistics ---
Number of program evaluations used so far: 37000
Number of point (instruction) evaluations so far: 46933915
--- Timings ---
Current time: 1529615022818 milliseconds
Total Time:         128.9 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        57.5 seconds, 44.6%
Fitness Testing:     56.3 seconds, 43.7%
Report:              15.0 seconds, 11.6%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 36
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 37
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 37
;;******************************
;; -*- Number IO problem report - generation 37
Test total error for best: 59627.032100000055
Test mean error for best: 29.81352
;;------------------------------
Outputs of best individual on training cases:
Correct output: -116.076402553 | Program output: -41.0401600   
Correct output: 24.1400847456  | Program output: -10.02181     
Correct output: 69.833290954   | Program output: 20.021441     
Correct output: 82.4958592801  | Program output: 94.0159025    
Correct output: 34.2385110874  | Program output: 81.026724     
Correct output: -10.7358110665 | Program output: 47.0482304    
Correct output: 1.9700532093   | Program output: -11.050100    
Correct output: -44.7956976677 | Program output: 51.0522704    
Correct output: 68.5576547673  | Program output: 46.0472209    
Correct output: -69.2536523379 | Program output: -54.0692809   
Correct output: -14.2275745396 | Program output: 41.0421764    
Correct output: -171.9767905886 | Program output: -85.0767056   
Correct output: -32.1846093265 | Program output: 1.024         
Correct output: 66.9812146721  | Program output: 73.0745476    
Correct output: 100.0259781081 | Program output: 34.0351225    
Correct output: -90.2595503995 | Program output: -34.0691089   
Correct output: -82.4635707651 | Program output: -96.0659025   
Correct output: -8.7492896214  | Program output: -50.0212401   
Correct output: -82.1329348831 | Program output: -82.056561    
Correct output: 24.5261129925  | Program output: -73.0245184   
Correct output: -11.4065589042 | Program output: -53.0442704   
Correct output: 10.3282540908  | Program output: -77.0205776   
Correct output: -51.7760580299 | Program output: -78.0695929   
Correct output: 51.8185003253  | Program output: 74.0755625    
Correct output: 110.7431489201 | Program output: 20.021441     
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_yankdup} {:instruction float_pop} {:instruction float_mult} {:instruction in2} {:instruction float_max} {:instruction integer_dup} {:instruction print_float} {:instruction integer_mult} {:instruction float_mult} {:instruction float_pop} {:instruction float_mult} {:instruction in2} {:instruction float_min} {:instruction float_sub} {:instruction float_mult} {:instruction integer_dup} {:instruction integer_dup} {:instruction float_add} {:instruction integer_dec} {:instruction integer_mult} {:instruction float_mult} {:instruction float_add} {:instruction float_mult} {:instruction integer_mult} {:instruction integer_dup} {:instruction float_add} {:instruction integer_dec} {:instruction integer_mult} {:instruction float_mult} {:instruction float_pop} {:instruction float_tan} {:instruction in2} {:instruction float_max} {:instruction float_pop} {:instruction float_mult} {:instruction in2} {:instruction float_yankdup} {:instruction integer_dup} {:instruction integer_pop} {:instruction integer_dec} {:instruction float_cos} {:instruction float_frominteger} {:instruction integer_swap} {:instruction integer_mod} {:instruction integer_dup} {:instruction 80} {:instruction integer_mod} {:instruction integer_dup} {:instruction 80} {:instruction float_dup_items} {:instruction print_float} {:instruction float_frominteger} {:instruction print_integer} {:instruction integer_yankdup} {:instruction float_mult} {:instruction integer_max} {:instruction integer_stackdepth} {:instruction float_shove} {:instruction float_dup} {:instruction float_inc} {:instruction integer_mult} {:instruction integer_shove} {:instruction print_integer} {:instruction integer_flush})
Best program: (float_yankdup float_pop float_mult in2 float_max integer_dup print_float integer_mult float_mult float_pop float_mult in2 float_min float_sub float_mult integer_dup integer_dup float_add integer_dec integer_mult float_mult float_add float_mult integer_mult integer_dup float_add integer_dec integer_mult float_mult float_pop float_tan in2 float_max float_pop float_mult in2 float_yankdup integer_dup integer_pop integer_dec float_cos float_frominteger integer_swap integer_mod integer_dup 80 integer_mod integer_dup 80 float_dup_items print_float float_frominteger print_integer integer_yankdup float_mult integer_max integer_stackdepth float_shove float_dup float_inc integer_mult integer_shove print_integer integer_flush)
Errors: [75.0362 8 34.1619 11 49.8118 10 11.52 10 46.7882 10 57.784 11 13.0202 9 95.848 11 22.5104 11 15.1844 9 55.2698 11 86.9001 7 33.2086 11 6.0933 10 65.9909 10 56.1904 9 13.6023 8 41.272 10 0.0764 9 97.5506 11 41.6377 9 87.3488 11 26.2935 8 22.2571 9 90.7217 9]
Total: 1388.0783000000001
Mean: 27.761566
Genome size: 64
Size: 65
Percent parens: 0.015
--- Population Statistics ---
Average total errors in population: 5877.813531700004
Median total errors in population: 1388.2184000000004
Error averages by case: (265.8342274000007 8.729 224.20835629999812 10.278 207.60651849999863 10.069 186.3347033999988 10.267 208.92752680000146 10.16 217.0333224000032 11.371 208.80827729999942 9.245 249.59342769999913 11.617 192.85792329999967 10.938 220.4989232999976 10.734 216.94529620000148 11.208 277.36561600000067 8.919 154.39462420000078 11.173 177.41524999999956 10.501 227.65958470000157 10.429 253.80325540000246 9.965 221.38105619999948 9.263 240.06954730000248 10.737 210.98271699999967 8.969 281.4558267999996 12.291 239.322562999998 9.141 274.1862279000028 12.038 230.0775676999978 9.149 194.0811436999982 9.574 240.720049199998 9.485)
Error minima by case: (36.0764 7 23.5755 9 1.5457 8 2.4 8 13.2385 9 9.7435 9 1.4055 7 37.7488 10 2.8213 9 14.1748 8 13.2402 10 3.9768 7 25.1826 10 4.3978 9 19.9909 8 24.2596 9 12.5364 8 8.7493 8 0.0521 7 15.4739 9 10.4883 8 6.2705 9 25.2239 8 19.5605 7 30.7217 8)
Average genome size in population (length): 59.449
Average program size in population (points): 60.449
Average percent parens in population: 0.017
Minimum age in population: 51.11422262905398
Maximum age in population: 56.07313606454409
Average age in population: 53.59097766481782
Median age in population: 53.65607015896239
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 17
Genome diversity (% unique Plush genomes):	 0.765
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 17
Syntactic diversity (% unique Push programs):	 0.765
Total error diversity:				 0.207
Error (vector) diversity:			 0.226
Behavioral diversity:				 0.226
--- Run Statistics ---
Number of program evaluations used so far: 38000
Number of point (instruction) evaluations so far: 48420140
--- Timings ---
Current time: 1529615026418 milliseconds
Total Time:         132.5 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        59.0 seconds, 44.5%
Fitness Testing:     57.9 seconds, 43.7%
Report:              15.5 seconds, 11.7%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 37
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 38
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 38
;;******************************
;; -*- Number IO problem report - generation 38
Test total error for best: 69306.00440000003
Test mean error for best: 34.65300
;;------------------------------
Outputs of best individual on training cases:
Correct output: -116.076402553 | Program output: -41.0401600   
Correct output: 24.1400847456  | Program output: -10.02181     
Correct output: 69.833290954   | Program output: 20.021441     
Correct output: 82.4958592801  | Program output: 94.0159025    
Correct output: 34.2385110874  | Program output: 81.026724     
Correct output: -10.7358110665 | Program output: 47.0482304    
Correct output: 1.9700532093   | Program output: -11.050100    
Correct output: -44.7956976677 | Program output: 51.0522704    
Correct output: 68.5576547673  | Program output: 46.0472209    
Correct output: -69.2536523379 | Program output: -54.0692809   
Correct output: -14.2275745396 | Program output: 41.0421764    
Correct output: -171.9767905886 | Program output: -85.0767056   
Correct output: -32.1846093265 | Program output: 1.024         
Correct output: 66.9812146721  | Program output: 73.0745476    
Correct output: 100.0259781081 | Program output: 34.0351225    
Correct output: -90.2595503995 | Program output: -34.0691089   
Correct output: -82.4635707651 | Program output: -96.0659025   
Correct output: -8.7492896214  | Program output: -50.0212401   
Correct output: -82.1329348831 | Program output: -82.056561    
Correct output: 24.5261129925  | Program output: -73.0245184   
Correct output: -11.4065589042 | Program output: -53.0442704   
Correct output: 10.3282540908  | Program output: -77.0205776   
Correct output: -51.7760580299 | Program output: -78.0695929   
Correct output: 51.8185003253  | Program output: 74.0755625    
Correct output: 110.7431489201 | Program output: 20.021441     
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_yankdup} {:instruction float_pop} {:instruction float_mult} {:instruction in2} {:instruction float_max} {:instruction integer_dup} {:instruction print_float} {:instruction integer_mult} {:instruction float_mult} {:instruction float_pop} {:instruction float_mult} {:instruction in2} {:instruction float_min} {:instruction float_sub} {:instruction float_mult} {:instruction integer_dup} {:instruction integer_dup} {:instruction float_add} {:instruction integer_dec} {:instruction integer_mult} {:instruction float_mult} {:instruction float_add} {:instruction float_mult} {:instruction integer_mult} {:instruction integer_dup} {:instruction float_add} {:instruction integer_dec} {:instruction integer_mult} {:instruction float_mult} {:instruction float_pop} {:instruction float_tan} {:instruction in2} {:instruction float_max} {:instruction float_pop} {:instruction float_mult} {:instruction float_mult} {:instruction in2} {:instruction float_max} {:instruction integer_dup} {:instruction integer_pop} {:instruction integer_dec} {:instruction float_cos} {:instruction float_frominteger} {:instruction integer_swap} {:instruction integer_mod} {:instruction integer_dup} {:instruction 80} {:instruction integer_mod} {:instruction integer_dup} {:instruction 80} {:instruction float_dup_items} {:instruction print_float} {:instruction float_frominteger} {:instruction print_integer} {:instruction integer_yankdup} {:instruction float_mult} {:instruction integer_max} {:instruction integer_stackdepth} {:instruction float_dup} {:instruction float_dup} {:instruction float_inc} {:instruction integer_mult} {:instruction integer_div} {:instruction print_integer} {:instruction integer_flush})
Best program: (float_yankdup float_pop float_mult in2 float_max integer_dup print_float integer_mult float_mult float_pop float_mult in2 float_min float_sub float_mult integer_dup integer_dup float_add integer_dec integer_mult float_mult float_add float_mult integer_mult integer_dup float_add integer_dec integer_mult float_mult float_pop float_tan in2 float_max float_pop float_mult float_mult in2 float_max integer_dup integer_pop integer_dec float_cos float_frominteger integer_swap integer_mod integer_dup 80 integer_mod integer_dup 80 float_dup_items print_float float_frominteger print_integer integer_yankdup float_mult integer_max integer_stackdepth float_dup float_dup float_inc integer_mult integer_div print_integer integer_flush)
Errors: [75.0362 8 34.1619 11 49.8118 10 11.52 10 46.7882 10 57.784 11 13.0202 9 95.848 11 22.5104 11 15.1844 9 55.2698 11 86.9001 7 33.2086 11 6.0933 10 65.9909 10 56.1904 9 13.6023 8 41.272 10 0.0764 9 97.5506 11 41.6377 9 87.3488 11 26.2935 8 22.2571 9 90.7217 9]
Total: 1388.0783000000001
Mean: 27.761566
Genome size: 65
Size: 66
Percent parens: 0.015
--- Population Statistics ---
Average total errors in population: 5681.745674600003
Median total errors in population: 1388.2184000000004
Error averages by case: (257.44108520000094 8.801 223.28537369999833 10.322 206.0429342999984 10.073 179.1751373999992 10.312 197.24560490000053 10.189 205.84302400000252 11.366 203.95643069999932 9.27 239.7666965999992 11.618 187.43608249999966 10.994 212.48174929999826 10.705 204.73974420000084 11.219 267.6805433 8.939 148.2897130000001 11.177 165.3511078999991 10.513 223.15248960000184 10.439 245.05345410000234 10.001 211.44117719999946 9.321 232.06132730000238 10.729 199.82844829999956 8.969 272.58390279999855 12.252 229.54139659999794 9.187 265.40518560000265 12.02 220.96668069999805 9.217 186.46544469999856 9.615 239.77794069999797 9.485)
Error minima by case: (74.0361 7 17.9846 8 9.1879 8 2.4 8 6.7615 8 9.9676 8 0.9701 8 44.7957 8 10.4898 8 14.1748 8 13.3111 8 85.9001 7 32.1846 6 5.0928 9 10.9909 9 55.1804 9 12.5364 8 8.7493 8 0.0329 7 14.5464 9 10.4199 8 7.3077 8 25.2239 8 9.6938 9 21.7217 8)
Average genome size in population (length): 59.847
Average program size in population (points): 60.847
Average percent parens in population: 0.017
Minimum age in population: 52.61748783753137
Maximum age in population: 57.12787668333476
Average age in population: 55.11601821448714
Median age in population: 55.13802301056057
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 17
Genome diversity (% unique Plush genomes):	 0.78
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 17
Syntactic diversity (% unique Push programs):	 0.78
Total error diversity:				 0.231
Error (vector) diversity:			 0.247
Behavioral diversity:				 0.247
--- Run Statistics ---
Number of program evaluations used so far: 39000
Number of point (instruction) evaluations so far: 49916315
--- Timings ---
Current time: 1529615030228 milliseconds
Total Time:         136.2 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        60.6 seconds, 44.5%
Fitness Testing:     59.6 seconds, 43.7%
Report:              15.9 seconds, 11.7%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 38
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 39
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 39
;;******************************
;; -*- Number IO problem report - generation 39
Test total error for best: 59627.03210000008
Test mean error for best: 29.81352
;;------------------------------
Outputs of best individual on training cases:
Correct output: -116.076402553 | Program output: -41.0401600   
Correct output: 24.1400847456  | Program output: -10.02181     
Correct output: 69.833290954   | Program output: 20.021441     
Correct output: 82.4958592801  | Program output: 94.0159025    
Correct output: 34.2385110874  | Program output: 81.026724     
Correct output: -10.7358110665 | Program output: 47.0482304    
Correct output: 1.9700532093   | Program output: -11.050100    
Correct output: -44.7956976677 | Program output: 51.0522704    
Correct output: 68.5576547673  | Program output: 46.0472209    
Correct output: -69.2536523379 | Program output: -54.0692809   
Correct output: -14.2275745396 | Program output: 41.0421764    
Correct output: -171.9767905886 | Program output: -85.0767056   
Correct output: -32.1846093265 | Program output: 1.024         
Correct output: 66.9812146721  | Program output: 73.0745476    
Correct output: 100.0259781081 | Program output: 34.0351225    
Correct output: -90.2595503995 | Program output: -34.0691089   
Correct output: -82.4635707651 | Program output: -96.0659025   
Correct output: -8.7492896214  | Program output: -50.0212401   
Correct output: -82.1329348831 | Program output: -82.056561    
Correct output: 24.5261129925  | Program output: -73.0245184   
Correct output: -11.4065589042 | Program output: -53.0442704   
Correct output: 10.3282540908  | Program output: -77.0205776   
Correct output: -51.7760580299 | Program output: -78.0695929   
Correct output: 51.8185003253  | Program output: 74.0755625    
Correct output: 110.7431489201 | Program output: 20.021441     
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_sin} {:instruction float_mult} {:instruction in2} {:instruction float_max} {:instruction integer_dup} {:instruction print_float} {:instruction integer_mult} {:instruction float_mult} {:instruction float_pop} {:instruction float_mult} {:instruction in2} {:instruction float_min} {:instruction float_sub} {:instruction float_mult} {:instruction integer_dup} {:instruction integer_dup} {:instruction float_add} {:instruction integer_dec} {:instruction integer_mult} {:instruction float_mult} {:instruction float_add} {:instruction float_mult} {:instruction integer_mult} {:instruction integer_dup} {:instruction float_add} {:instruction integer_dec} {:instruction integer_mult} {:instruction float_mult} {:instruction float_mult} {:instruction float_pop} {:instruction float_yankdup} {:instruction in2} {:instruction float_max} {:instruction float_pop} {:instruction float_mult} {:instruction in2} {:instruction float_max} {:instruction integer_dup} {:instruction integer_pop} {:instruction integer_dec} {:instruction float_cos} {:instruction float_frominteger} {:instruction integer_swap} {:instruction integer_mod} {:instruction integer_dup} {:instruction 80} {:instruction integer_mod} {:instruction integer_dup} {:instruction 80} {:instruction float_dup_items} {:instruction print_float} {:instruction float_frominteger} {:instruction print_integer} {:instruction integer_yankdup} {:instruction float_mult} {:instruction float_dup_times} {:instruction integer_stackdepth} {:instruction float_dup} {:instruction float_dup} {:instruction float_inc} {:instruction integer_mult} {:instruction float_dup} {:instruction float_dup} {:instruction float_inc} {:instruction integer_mult} {:instruction integer_div} {:instruction print_integer} {:instruction integer_flush})
Best program: (float_sin float_mult in2 float_max integer_dup print_float integer_mult float_mult float_pop float_mult in2 float_min float_sub float_mult integer_dup integer_dup float_add integer_dec integer_mult float_mult float_add float_mult integer_mult integer_dup float_add integer_dec integer_mult float_mult float_mult float_pop float_yankdup in2 float_max float_pop float_mult in2 float_max integer_dup integer_pop integer_dec float_cos float_frominteger integer_swap integer_mod integer_dup 80 integer_mod integer_dup 80 float_dup_items print_float float_frominteger print_integer integer_yankdup float_mult float_dup_times integer_stackdepth float_dup float_dup float_inc integer_mult float_dup float_dup float_inc integer_mult integer_div print_integer integer_flush)
Errors: [75.0362 8 34.1619 11 49.8118 10 11.52 10 46.7882 10 57.784 11 13.0202 9 95.848 11 22.5104 11 15.1844 9 55.2698 11 86.9001 7 33.2086 11 6.0933 10 65.9909 10 56.1904 9 13.6023 8 41.272 10 0.0764 9 97.5506 11 41.6377 9 87.3488 11 26.2935 8 22.2571 9 90.7217 9]
Total: 1388.0783000000001
Mean: 27.761566
Genome size: 68
Size: 69
Percent parens: 0.014
--- Population Statistics ---
Average total errors in population: 5439.380275200002
Median total errors in population: 1388.2184000000004
Error averages by case: (252.48226950000102 8.912 216.0173750999988 10.432 186.14142359999872 10.098 161.72709569999918 10.317 181.14881250000082 10.193 190.4336055000025 11.4 195.1517359999993 9.3 225.90386579999915 11.634 171.2836447999997 10.982 210.6664033999978 10.702 188.2529548000008 11.219 265.39952920000013 8.985 128.93767769999914 11.176 150.5090115999991 10.526 206.41515950000166 10.467 242.65803010000195 10.078 210.71665609999954 9.415 230.25336660000195 10.814 198.8143819999995 9.159 269.4284179999985 12.205 227.84297259999786 9.331 262.3408873000029 12.062 219.77418999999824 9.285 168.9214021999989 9.596 220.3854055999981 9.486)
Error minima by case: (35.0721 7 6.0288 9 9.1711 8 2.48 8 4.0696 8 9.7198 9 0.08 7 14.7435 10 8.6001 9 14.2256 8 13.2136 8 2.9732 7 2.1324 6 5.0218 9 11.054 8 23.2374 7 12.5364 7 7.7493 8 0.0523 7 5.6427 9 10.4066 8 6.3077 8 21.7239 7 8.1391 8 0.3369 8)
Average genome size in population (length): 60.288
Average program size in population (points): 61.288
Average percent parens in population: 0.016
Minimum age in population: 53.71479538432322
Maximum age in population: 58.43393953113264
Average age in population: 56.6126409078036
Median age in population: 56.65766289788007
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 43
Genome diversity (% unique Plush genomes):	 0.772
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 43
Syntactic diversity (% unique Push programs):	 0.772
Total error diversity:				 0.241
Error (vector) diversity:			 0.263
Behavioral diversity:				 0.263
--- Run Statistics ---
Number of program evaluations used so far: 40000
Number of point (instruction) evaluations so far: 51423515
--- Timings ---
Current time: 1529615034143 milliseconds
Total Time:         140.1 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        62.1 seconds, 44.3%
Fitness Testing:     61.4 seconds, 43.8%
Report:              16.5 seconds, 11.8%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 39
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 40
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 40
;;******************************
;; -*- Number IO problem report - generation 40
Test total error for best: 59627.032100000055
Test mean error for best: 29.81352
;;------------------------------
Outputs of best individual on training cases:
Correct output: -116.076402553 | Program output: -41.0401600   
Correct output: 24.1400847456  | Program output: -10.02181     
Correct output: 69.833290954   | Program output: 20.021441     
Correct output: 82.4958592801  | Program output: 94.0159025    
Correct output: 34.2385110874  | Program output: 81.026724     
Correct output: -10.7358110665 | Program output: 47.0482304    
Correct output: 1.9700532093   | Program output: -11.050100    
Correct output: -44.7956976677 | Program output: 51.0522704    
Correct output: 68.5576547673  | Program output: 46.0472209    
Correct output: -69.2536523379 | Program output: -54.0692809   
Correct output: -14.2275745396 | Program output: 41.0421764    
Correct output: -171.9767905886 | Program output: -85.0767056   
Correct output: -32.1846093265 | Program output: 1.024         
Correct output: 66.9812146721  | Program output: 73.0745476    
Correct output: 100.0259781081 | Program output: 34.0351225    
Correct output: -90.2595503995 | Program output: -34.0691089   
Correct output: -82.4635707651 | Program output: -96.0659025   
Correct output: -8.7492896214  | Program output: -50.0212401   
Correct output: -82.1329348831 | Program output: -82.056561    
Correct output: 24.5261129925  | Program output: -73.0245184   
Correct output: -11.4065589042 | Program output: -53.0442704   
Correct output: 10.3282540908  | Program output: -77.0205776   
Correct output: -51.7760580299 | Program output: -78.0695929   
Correct output: 51.8185003253  | Program output: 74.0755625    
Correct output: 110.7431489201 | Program output: 20.021441     
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_yankdup} {:instruction float_pop} {:instruction float_mult} {:instruction in2} {:instruction float_max} {:instruction integer_dup} {:instruction print_float} {:instruction integer_mult} {:instruction float_mult} {:instruction float_pop} {:instruction float_mult} {:instruction in2} {:instruction float_min} {:instruction float_sub} {:instruction float_mult} {:instruction integer_dup} {:instruction integer_dup} {:instruction float_add} {:instruction integer_dec} {:instruction integer_mult} {:instruction float_mult} {:instruction float_add} {:instruction float_mult} {:instruction integer_mult} {:instruction integer_dup} {:instruction float_add} {:instruction integer_dec} {:instruction integer_mult} {:instruction float_mult} {:instruction float_pop} {:instruction float_tan} {:instruction in2} {:instruction float_max} {:instruction float_pop} {:instruction float_mult} {:instruction in2} {:instruction float_yankdup} {:instruction integer_dup} {:instruction integer_pop} {:instruction integer_dec} {:instruction float_cos} {:instruction float_frominteger} {:instruction integer_swap} {:instruction integer_mod} {:instruction integer_dup} {:instruction 80} {:instruction integer_mod} {:instruction integer_dup} {:instruction 80} {:instruction float_dup_items} {:instruction print_float} {:instruction float_frominteger} {:instruction print_integer} {:instruction integer_yankdup} {:instruction float_mult} {:instruction integer_max} {:instruction integer_stackdepth} {:instruction float_shove} {:instruction float_dup} {:instruction float_inc} {:instruction integer_mult} {:instruction integer_shove} {:instruction print_integer} {:instruction integer_flush})
Best program: (float_yankdup float_pop float_mult in2 float_max integer_dup print_float integer_mult float_mult float_pop float_mult in2 float_min float_sub float_mult integer_dup integer_dup float_add integer_dec integer_mult float_mult float_add float_mult integer_mult integer_dup float_add integer_dec integer_mult float_mult float_pop float_tan in2 float_max float_pop float_mult in2 float_yankdup integer_dup integer_pop integer_dec float_cos float_frominteger integer_swap integer_mod integer_dup 80 integer_mod integer_dup 80 float_dup_items print_float float_frominteger print_integer integer_yankdup float_mult integer_max integer_stackdepth float_shove float_dup float_inc integer_mult integer_shove print_integer integer_flush)
Errors: [75.0362 8 34.1619 11 49.8118 10 11.52 10 46.7882 10 57.784 11 13.0202 9 95.848 11 22.5104 11 15.1844 9 55.2698 11 86.9001 7 33.2086 11 6.0933 10 65.9909 10 56.1904 9 13.6023 8 41.272 10 0.0764 9 97.5506 11 41.6377 9 87.3488 11 26.2935 8 22.2571 9 90.7217 9]
Total: 1388.0783000000001
Mean: 27.761566
Genome size: 64
Size: 65
Percent parens: 0.015
--- Population Statistics ---
Average total errors in population: 5046.163548299998
Median total errors in population: 1388.2184000000004
Error averages by case: (234.40762540000088 9.078 194.60482840000034 10.772 173.7612691999989 10.152 149.02641960000014 10.458 174.33705940000002 10.246 183.66053650000148 11.466 177.62250779999937 9.415 218.4149328999992 11.71 159.54231459999968 11.029 188.2588667999994 10.651 182.4014046000002 11.25 245.6645654999998 9.109 111.81861679999926 11.143 143.3543330999987 10.624 196.18297830000137 10.548 220.58946080000072 10.207 186.78758949999943 9.602 209.0155439000006 10.983 175.61819669999988 9.421 250.8135555999982 12.132 205.63369999999904 9.791 242.55100910000263 12.026 196.21246649999915 9.523 156.99556109999958 9.735 208.31220619999834 9.505)
Error minima by case: (40.0 6 3.1183 5 9.1711 7 2.4 8 18.5035 9 10.6113 8 0.9701 6 44.7957 8 10.4446 8 14.1844 8 14.2276 8 84.0 7 2.0 3 5.0933 9 19.9909 9 33.0 8 11.6023 7 8.7493 8 0.0329 7 0.5016 8 1.5934 8 5.4067 7 24.2935 7 21.2571 8 21.0 8)
Average genome size in population (length): 62.032
Average program size in population (points): 63.032
Average percent parens in population: 0.016
Minimum age in population: 55.7924154829816
Maximum age in population: 60.02983963873521
Average age in population: 58.06672385213858
Median age in population: 58.10283336495195
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 100
Genome diversity (% unique Plush genomes):	 0.746
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 100
Syntactic diversity (% unique Push programs):	 0.746
Total error diversity:				 0.261
Error (vector) diversity:			 0.274
Behavioral diversity:				 0.274
--- Run Statistics ---
Number of program evaluations used so far: 41000
Number of point (instruction) evaluations so far: 52974315
--- Timings ---
Current time: 1529615037855 milliseconds
Total Time:         143.9 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        63.7 seconds, 44.2%
Fitness Testing:     63.1 seconds, 43.8%
Report:              17.1 seconds, 11.9%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 40
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 41
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 41
;;******************************
;; -*- Number IO problem report - generation 41
Test total error for best: 59627.032100000055
Test mean error for best: 29.81352
;;------------------------------
Outputs of best individual on training cases:
Correct output: -116.076402553 | Program output: -41.0401600   
Correct output: 24.1400847456  | Program output: -10.02181     
Correct output: 69.833290954   | Program output: 20.021441     
Correct output: 82.4958592801  | Program output: 94.0159025    
Correct output: 34.2385110874  | Program output: 81.026724     
Correct output: -10.7358110665 | Program output: 47.0482304    
Correct output: 1.9700532093   | Program output: -11.050100    
Correct output: -44.7956976677 | Program output: 51.0522704    
Correct output: 68.5576547673  | Program output: 46.0472209    
Correct output: -69.2536523379 | Program output: -54.0692809   
Correct output: -14.2275745396 | Program output: 41.0421764    
Correct output: -171.9767905886 | Program output: -85.0767056   
Correct output: -32.1846093265 | Program output: 1.024         
Correct output: 66.9812146721  | Program output: 73.0745476    
Correct output: 100.0259781081 | Program output: 34.0351225    
Correct output: -90.2595503995 | Program output: -34.0691089   
Correct output: -82.4635707651 | Program output: -96.0659025   
Correct output: -8.7492896214  | Program output: -50.0212401   
Correct output: -82.1329348831 | Program output: -82.056561    
Correct output: 24.5261129925  | Program output: -73.0245184   
Correct output: -11.4065589042 | Program output: -53.0442704   
Correct output: 10.3282540908  | Program output: -77.0205776   
Correct output: -51.7760580299 | Program output: -78.0695929   
Correct output: 51.8185003253  | Program output: 74.0755625    
Correct output: 110.7431489201 | Program output: 20.021441     
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_swap} {:instruction float_pop} {:instruction float_mult} {:instruction in2} {:instruction float_max} {:instruction integer_dup} {:instruction print_float} {:instruction integer_mult} {:instruction float_mult} {:instruction float_pop} {:instruction float_mult} {:instruction in2} {:instruction float_min} {:instruction float_sub} {:instruction float_mult} {:instruction integer_dup} {:instruction integer_dup} {:instruction float_add} {:instruction integer_dec} {:instruction integer_mult} {:instruction float_mult} {:instruction float_add} {:instruction float_mult} {:instruction integer_mult} {:instruction integer_dup} {:instruction float_add} {:instruction integer_dec} {:instruction integer_mult} {:instruction float_mult} {:instruction float_pop} {:instruction float_tan} {:instruction in2} {:instruction float_max} {:instruction float_pop} {:instruction float_dec} {:instruction in2} {:instruction float_swap} {:instruction integer_dup} {:instruction integer_pop} {:instruction integer_dec} {:instruction float_cos} {:instruction float_frominteger} {:instruction integer_swap} {:instruction integer_mod} {:instruction integer_dup} {:instruction 80} {:instruction integer_mod} {:instruction integer_dup} {:instruction 80} {:instruction float_dup_items} {:instruction print_float} {:instruction float_frominteger} {:instruction print_integer} {:instruction integer_yankdup} {:instruction float_mult} {:instruction integer_max} {:instruction integer_stackdepth} {:instruction float_shove} {:instruction float_dup} {:instruction float_inc} {:instruction integer_mult} {:instruction float_rot} {:instruction print_integer} {:instruction in2})
Best program: (integer_swap float_pop float_mult in2 float_max integer_dup print_float integer_mult float_mult float_pop float_mult in2 float_min float_sub float_mult integer_dup integer_dup float_add integer_dec integer_mult float_mult float_add float_mult integer_mult integer_dup float_add integer_dec integer_mult float_mult float_pop float_tan in2 float_max float_pop float_dec in2 float_swap integer_dup integer_pop integer_dec float_cos float_frominteger integer_swap integer_mod integer_dup 80 integer_mod integer_dup 80 float_dup_items print_float float_frominteger print_integer integer_yankdup float_mult integer_max integer_stackdepth float_shove float_dup float_inc integer_mult float_rot print_integer in2)
Errors: [75.0362 8 34.1619 11 49.8118 10 11.52 10 46.7882 10 57.784 11 13.0202 9 95.848 11 22.5104 11 15.1844 9 55.2698 11 86.9001 7 33.2086 11 6.0933 10 65.9909 10 56.1904 9 13.6023 8 41.272 10 0.0764 9 97.5506 11 41.6377 9 87.3488 11 26.2935 8 22.2571 9 90.7217 9]
Total: 1388.0783000000001
Mean: 27.761566
Genome size: 64
Size: 65
Percent parens: 0.015
--- Population Statistics ---
Average total errors in population: 4519.708148499997
Median total errors in population: 1388.2184000000004
Error averages by case: (223.0551521000009 9.242 175.5331112000016 11.079 144.62632299999882 10.18 119.46006480000074 10.444 144.42925629999945 10.252 155.79764960000148 11.442 161.3156072999994 9.469 190.76349759999917 11.701 127.9314874999998 11.049 174.0765412999993 10.551 153.56032229999994 11.205 233.90421339999995 9.247 82.22349799999957 11.155 111.81034709999842 10.579 166.35405340000142 10.552 207.21514589999987 10.344 172.99496949999929 9.775 194.35849429999922 11.109 161.49472819999968 9.793 238.91769739999754 12.015 194.87377269999942 10.168 232.27985680000282 11.95 182.01217199999996 9.713 127.9106059000008 9.696 180.64958089999837 9.45)
Error minima by case: (40.0 3 3.0591 3 9.1711 3 3.4868 9 23.2385 9 9.6876 3 0.0309 2 43.7434 3 10.4446 3 14.1844 3 13.1854 3 84.0 3 2.0 2 5.0204 8 21.0248 4 33.0 3 12.5364 8 7.728 8 0.0519 3 0.4536 3 10.3623 8 7.6923 3 25.2239 7 21.1832 8 21.0 4)
Average genome size in population (length): 63.82
Average program size in population (points): 64.82
Average percent parens in population: 0.015
Minimum age in population: 56.7924154829816
Maximum age in population: 61.45007732692284
Average age in population: 59.52232733076952
Median age in population: 59.5843677719381
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 135
Genome diversity (% unique Plush genomes):	 0.698
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 135
Syntactic diversity (% unique Push programs):	 0.698
Total error diversity:				 0.247
Error (vector) diversity:			 0.254
Behavioral diversity:				 0.254
--- Run Statistics ---
Number of program evaluations used so far: 42000
Number of point (instruction) evaluations so far: 54569815
--- Timings ---
Current time: 1529615041645 milliseconds
Total Time:         147.7 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        65.2 seconds, 44.2%
Fitness Testing:     64.9 seconds, 43.9%
Report:              17.5 seconds, 11.9%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 41
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 42
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 42
;;******************************
;; -*- Number IO problem report - generation 42
Test total error for best: 69306.00440000003
Test mean error for best: 34.65300
;;------------------------------
Outputs of best individual on training cases:
Correct output: -116.076402553 | Program output: -41.0401600   
Correct output: 24.1400847456  | Program output: -10.02181     
Correct output: 69.833290954   | Program output: 20.021441     
Correct output: 82.4958592801  | Program output: 94.0159025    
Correct output: 34.2385110874  | Program output: 81.026724     
Correct output: -10.7358110665 | Program output: 47.0482304    
Correct output: 1.9700532093   | Program output: -11.050100    
Correct output: -44.7956976677 | Program output: 51.0522704    
Correct output: 68.5576547673  | Program output: 46.0472209    
Correct output: -69.2536523379 | Program output: -54.0692809   
Correct output: -14.2275745396 | Program output: 41.0421764    
Correct output: -171.9767905886 | Program output: -85.0767056   
Correct output: -32.1846093265 | Program output: 1.024         
Correct output: 66.9812146721  | Program output: 73.0745476    
Correct output: 100.0259781081 | Program output: 34.0351225    
Correct output: -90.2595503995 | Program output: -34.0691089   
Correct output: -82.4635707651 | Program output: -96.0659025   
Correct output: -8.7492896214  | Program output: -50.0212401   
Correct output: -82.1329348831 | Program output: -82.056561    
Correct output: 24.5261129925  | Program output: -73.0245184   
Correct output: -11.4065589042 | Program output: -53.0442704   
Correct output: 10.3282540908  | Program output: -77.0205776   
Correct output: -51.7760580299 | Program output: -78.0695929   
Correct output: 51.8185003253  | Program output: 74.0755625    
Correct output: 110.7431489201 | Program output: 20.021441     
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_yankdup} {:instruction float_pop} {:instruction float_yankdup} {:instruction float_cos} {:instruction float_mult} {:instruction in2} {:instruction float_max} {:instruction integer_dup} {:instruction print_float} {:instruction integer_mult} {:instruction float_mult} {:instruction float_pop} {:instruction float_mult} {:instruction in2} {:instruction float_min} {:instruction float_sub} {:instruction float_mult} {:instruction integer_dup} {:instruction integer_dup} {:instruction float_add} {:instruction integer_dec} {:instruction integer_mult} {:instruction float_mult} {:instruction float_add} {:instruction float_mult} {:instruction integer_mult} {:instruction integer_dup} {:instruction float_add} {:instruction integer_dec} {:instruction integer_mult} {:instruction float_mult} {:instruction float_pop} {:instruction float_tan} {:instruction in2} {:instruction float_max} {:instruction float_pop} {:instruction float_mult} {:instruction in2} {:instruction float_yankdup} {:instruction integer_dup} {:instruction integer_pop} {:instruction integer_dec} {:instruction float_cos} {:instruction float_frominteger} {:instruction integer_swap} {:instruction integer_mod} {:instruction integer_dup} {:instruction 80} {:instruction integer_mod} {:instruction integer_dup} {:instruction 80} {:instruction float_dup_items} {:instruction print_float} {:instruction float_frominteger} {:instruction print_integer} {:instruction integer_yankdup} {:instruction float_mult} {:instruction integer_max} {:instruction integer_stackdepth} {:instruction float_dup} {:instruction float_dup} {:instruction float_inc} {:instruction integer_mult} {:instruction integer_div} {:instruction print_integer} {:instruction integer_flush})
Best program: (float_yankdup float_pop float_yankdup float_cos float_mult in2 float_max integer_dup print_float integer_mult float_mult float_pop float_mult in2 float_min float_sub float_mult integer_dup integer_dup float_add integer_dec integer_mult float_mult float_add float_mult integer_mult integer_dup float_add integer_dec integer_mult float_mult float_pop float_tan in2 float_max float_pop float_mult in2 float_yankdup integer_dup integer_pop integer_dec float_cos float_frominteger integer_swap integer_mod integer_dup 80 integer_mod integer_dup 80 float_dup_items print_float float_frominteger print_integer integer_yankdup float_mult integer_max integer_stackdepth float_dup float_dup float_inc integer_mult integer_div print_integer integer_flush)
Errors: [75.0362 8 34.1619 11 49.8118 10 11.52 10 46.7882 10 57.784 11 13.0202 9 95.848 11 22.5104 11 15.1844 9 55.2698 11 86.9001 7 33.2086 11 6.0933 10 65.9909 10 56.1904 9 13.6023 8 41.272 10 0.0764 9 97.5506 11 41.6377 9 87.3488 11 26.2935 8 22.2571 9 90.7217 9]
Total: 1388.0783000000001
Mean: 27.761566
Genome size: 66
Size: 67
Percent parens: 0.015
--- Population Statistics ---
Average total errors in population: 4353.156322600002
Median total errors in population: 1388.0783000000001
Error averages by case: (218.53998080000096 9.195 170.76647300000192 11.162 137.77704059999877 10.168 109.56057680000066 10.469 137.83119049999874 10.26 148.46190810000073 11.454 156.41116199999942 9.489 183.69219739999917 11.711 119.29914109999973 11.118 167.04474999999937 10.477 147.14962059999928 11.273 228.54746929999956 9.107 72.66022549999961 11.174 104.11903279999846 10.623 158.78866710000145 10.568 202.11885589999952 10.305 167.29538609999938 9.672 188.10100809999915 11.091 155.10197559999997 9.771 233.98830969999713 11.955 188.42868919999933 10.107 226.28507990000304 11.864 175.89748010000014 9.609 119.358374000001 9.688 174.16672839999808 9.455)
Error minima by case: (34.0764 7 3.1183 9 10.1667 9 2.4864 9 14.2385 8 9.6876 9 0.9701 8 43.7434 10 11.4423 8 14.1844 8 13.1854 7 1.9768 6 20.1826 9 5.0204 8 20.0225 10 22.2596 8 12.5364 8 7.728 8 0.0329 7 0.5016 8 10.3623 8 9.6923 9 25.2239 7 21.1832 8 30.7397 8)
Average genome size in population (length): 64.269
Average program size in population (points): 65.269
Average percent parens in population: 0.015
Minimum age in population: 58.57040160374163
Maximum age in population: 62.90679247110393
Average age in population: 60.88308204116372
Median age in population: 60.90631474199972
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 129
Genome diversity (% unique Plush genomes):	 0.705
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 129
Syntactic diversity (% unique Push programs):	 0.705
Total error diversity:				 0.22
Error (vector) diversity:			 0.227
Behavioral diversity:				 0.228
--- Run Statistics ---
Number of program evaluations used so far: 43000
Number of point (instruction) evaluations so far: 56176565
--- Timings ---
Current time: 1529615045372 milliseconds
Total Time:         151.5 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        66.8 seconds, 44.1%
Fitness Testing:     66.6 seconds, 44.0%
Report:              18.0 seconds, 11.9%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 42
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 43
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 43
;;******************************
;; -*- Number IO problem report - generation 43
Test total error for best: 59725.05400000006
Test mean error for best: 29.86253
;;------------------------------
Outputs of best individual on training cases:
Correct output: -116.076402553 | Program output: -41.0401600   
Correct output: 24.1400847456  | Program output: -10.02181     
Correct output: 69.833290954   | Program output: 20.0218820    
Correct output: 82.4958592801  | Program output: 94.015848350  
Correct output: 34.2385110874  | Program output: 81.02544644   
Correct output: -10.7358110665 | Program output: 47.048108288  
Correct output: 1.9700532093   | Program output: -11.050100    
Correct output: -44.7956976677 | Program output: 51.052137904  
Correct output: 68.5576547673  | Program output: 46.047101614  
Correct output: -69.2536523379 | Program output: -54.0692809   
Correct output: -14.2275745396 | Program output: 41.04272324   
Correct output: -171.9767905886 | Program output: -85.0767056   
Correct output: -32.1846093265 | Program output: 1.024         
Correct output: 66.9812146721  | Program output: 73.074399748  
Correct output: 100.0259781081 | Program output: 34.03541650   
Correct output: -90.2595503995 | Program output: -34.0691089   
Correct output: -82.4635707651 | Program output: -96.0659025   
Correct output: -8.7492896214  | Program output: -50.0212401   
Correct output: -82.1329348831 | Program output: -82.056561    
Correct output: 24.5261129925  | Program output: -73.0245184   
Correct output: -11.4065589042 | Program output: -53.0442704   
Correct output: 10.3282540908  | Program output: -77.0205776   
Correct output: -51.7760580299 | Program output: -78.0695929   
Correct output: 51.8185003253  | Program output: 74.075416250  
Correct output: 110.7431489201 | Program output: 20.0218820    
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_yankdup} {:instruction float_pop} {:instruction float_mult} {:instruction in2} {:instruction float_max} {:instruction integer_dup} {:instruction print_float} {:instruction integer_mult} {:instruction float_mult} {:instruction float_pop} {:instruction float_mult} {:instruction in2} {:instruction float_sub} {:instruction float_sub} {:instruction float_mult} {:instruction integer_dup} {:instruction integer_dup} {:instruction float_add} {:instruction integer_dec} {:instruction integer_mult} {:instruction float_mult} {:instruction float_add} {:instruction float_mult} {:instruction integer_mult} {:instruction integer_dup} {:instruction float_add} {:instruction integer_dup} {:instruction float_add} {:instruction integer_dec} {:instruction integer_mult} {:instruction float_mult} {:instruction float_pop} {:instruction float_tan} {:instruction in2} {:instruction float_max} {:instruction float_pop} {:instruction float_mult} {:instruction in2} {:instruction float_yankdup} {:instruction integer_dup} {:instruction integer_pop} {:instruction integer_dec} {:instruction float_cos} {:instruction float_frominteger} {:instruction integer_swap} {:instruction integer_mod} {:instruction integer_dup} {:instruction 80} {:instruction integer_mod} {:instruction integer_dup} {:instruction 80} {:instruction float_dup_items} {:instruction print_float} {:instruction float_frominteger} {:instruction print_integer} {:instruction integer_yankdup} {:instruction float_mult} {:instruction integer_max} {:instruction integer_stackdepth} {:instruction float_shove} {:instruction float_mult} {:instruction integer_max} {:instruction integer_stackdepth} {:instruction float_shove} {:instruction float_dup} {:instruction float_inc} {:instruction integer_mult} {:instruction integer_shove} {:instruction print_integer} {:instruction integer_flush})
Best program: (float_yankdup float_pop float_mult in2 float_max integer_dup print_float integer_mult float_mult float_pop float_mult in2 float_sub float_sub float_mult integer_dup integer_dup float_add integer_dec integer_mult float_mult float_add float_mult integer_mult integer_dup float_add integer_dup float_add integer_dec integer_mult float_mult float_pop float_tan in2 float_max float_pop float_mult in2 float_yankdup integer_dup integer_pop integer_dec float_cos float_frominteger integer_swap integer_mod integer_dup 80 integer_mod integer_dup 80 float_dup_items print_float float_frominteger print_integer integer_yankdup float_mult integer_max integer_stackdepth float_shove float_mult integer_max integer_stackdepth float_shove float_dup float_inc integer_mult integer_shove print_integer integer_flush)
Errors: [75.0362 8 34.1619 11 49.8114 10 11.52 9 46.7869 10 57.7839 11 13.0202 9 95.8478 12 22.5106 10 15.1844 9 55.2703 10 86.9001 7 33.2086 11 6.0932 11 65.9906 10 56.1904 9 13.6023 8 41.272 10 0.0764 9 97.5506 11 41.6377 9 87.3488 11 26.2935 8 22.2569 9 90.7213 8]
Total: 1386.076
Mean: 27.72152
Genome size: 70
Size: 71
Percent parens: 0.014
--- Population Statistics ---
Average total errors in population: 4375.820194400006
Median total errors in population: 1388.0783000000001
Error averages by case: (221.6777454000009 9.22 176.0011947000022 11.164 130.39151699999897 10.186 105.15525480000058 10.478 134.54586219999896 10.266 146.25942970000065 11.482 161.23480579999938 9.467 180.58407419999915 11.728 114.84148589999964 11.102 173.5433433999993 10.504 143.97020959999924 11.255 233.54345259999974 9.2 72.27199479999948 11.136 100.21737669999854 10.617 153.9825311000013 10.565 207.7327931999991 10.358 172.2512622999992 9.718 194.26535679999904 11.148 159.93741459999973 9.788 240.20123539999724 12.022 195.1467520999993 10.202 231.5029432000031 11.952 182.69460749999996 9.723 114.63552620000085 9.7 166.82602519999827 9.425)
Error minima by case: (18.0754 7 5.8599 9 9.1667 9 2.4302 8 22.2385 9 9.7335 9 1.9701 8 0.7281 10 10.4423 8 14.1844 8 13.2258 7 3.9758 7 11.883 6 5.0228 8 20.0001 8 7.7414 9 12.5364 8 7.7469 8 0.0329 7 8.5261 8 10.4039 8 5.6717 9 25.2239 7 21.1857 8 30.7018 8)
Average genome size in population (length): 64.402
Average program size in population (points): 65.402
Average percent parens in population: 0.015
Minimum age in population: 60.1129778940267
Maximum age in population: 64.1984542625587
Average age in population: 62.32938862309222
Median age in population: 62.34234962828896
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 102
Genome diversity (% unique Plush genomes):	 0.731
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 102
Syntactic diversity (% unique Push programs):	 0.731
Total error diversity:				 0.244
Error (vector) diversity:			 0.25
Behavioral diversity:				 0.25
--- Run Statistics ---
Number of program evaluations used so far: 44000
Number of point (instruction) evaluations so far: 57786665
--- Timings ---
Current time: 1529615049406 milliseconds
Total Time:         155.4 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        68.4 seconds, 44.0%
Fitness Testing:     68.5 seconds, 44.1%
Report:              18.4 seconds, 11.8%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 43
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 44
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 44
;;******************************
;; -*- Number IO problem report - generation 44
Test total error for best: 59725.05400000006
Test mean error for best: 29.86253
;;------------------------------
Outputs of best individual on training cases:
Correct output: -116.076402553 | Program output: -41.0401600   
Correct output: 24.1400847456  | Program output: -10.02181     
Correct output: 69.833290954   | Program output: 20.0218820    
Correct output: 82.4958592801  | Program output: 94.015848350  
Correct output: 34.2385110874  | Program output: 81.02544644   
Correct output: -10.7358110665 | Program output: 47.048108288  
Correct output: 1.9700532093   | Program output: -11.050100    
Correct output: -44.7956976677 | Program output: 51.052137904  
Correct output: 68.5576547673  | Program output: 46.047101614  
Correct output: -69.2536523379 | Program output: -54.0692809   
Correct output: -14.2275745396 | Program output: 41.04272324   
Correct output: -171.9767905886 | Program output: -85.0767056   
Correct output: -32.1846093265 | Program output: 1.024         
Correct output: 66.9812146721  | Program output: 73.074399748  
Correct output: 100.0259781081 | Program output: 34.03541650   
Correct output: -90.2595503995 | Program output: -34.0691089   
Correct output: -82.4635707651 | Program output: -96.0659025   
Correct output: -8.7492896214  | Program output: -50.0212401   
Correct output: -82.1329348831 | Program output: -82.056561    
Correct output: 24.5261129925  | Program output: -73.0245184   
Correct output: -11.4065589042 | Program output: -53.0442704   
Correct output: 10.3282540908  | Program output: -77.0205776   
Correct output: -51.7760580299 | Program output: -78.0695929   
Correct output: 51.8185003253  | Program output: 74.075416250  
Correct output: 110.7431489201 | Program output: 20.0218820    
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_yankdup} {:instruction float_pop} {:instruction float_mult} {:instruction in2} {:instruction float_max} {:instruction integer_dup} {:instruction print_float} {:instruction integer_mult} {:instruction float_mult} {:instruction float_pop} {:instruction float_mult} {:instruction in2} {:instruction float_sub} {:instruction float_sub} {:instruction float_mult} {:instruction integer_dup} {:instruction integer_dup} {:instruction float_add} {:instruction integer_dec} {:instruction integer_mult} {:instruction float_mult} {:instruction float_add} {:instruction float_mult} {:instruction integer_mult} {:instruction integer_dup} {:instruction float_add} {:instruction integer_dup} {:instruction float_add} {:instruction integer_dec} {:instruction integer_mult} {:instruction float_mult} {:instruction float_pop} {:instruction float_tan} {:instruction in2} {:instruction float_max} {:instruction float_pop} {:instruction float_mult} {:instruction in2} {:instruction float_yankdup} {:instruction integer_dup} {:instruction integer_pop} {:instruction integer_dec} {:instruction float_cos} {:instruction float_frominteger} {:instruction integer_swap} {:instruction integer_mod} {:instruction integer_dup} {:instruction 80} {:instruction integer_mod} {:instruction integer_dup} {:instruction 80} {:instruction float_dup_items} {:instruction print_float} {:instruction float_frominteger} {:instruction print_integer} {:instruction integer_yankdup} {:instruction float_mult} {:instruction integer_max} {:instruction integer_stackdepth} {:instruction float_shove} {:instruction float_mult} {:instruction integer_max} {:instruction integer_stackdepth} {:instruction float_shove} {:instruction float_dup} {:instruction float_inc} {:instruction integer_mult} {:instruction integer_shove} {:instruction print_integer} {:instruction integer_flush})
Best program: (float_yankdup float_pop float_mult in2 float_max integer_dup print_float integer_mult float_mult float_pop float_mult in2 float_sub float_sub float_mult integer_dup integer_dup float_add integer_dec integer_mult float_mult float_add float_mult integer_mult integer_dup float_add integer_dup float_add integer_dec integer_mult float_mult float_pop float_tan in2 float_max float_pop float_mult in2 float_yankdup integer_dup integer_pop integer_dec float_cos float_frominteger integer_swap integer_mod integer_dup 80 integer_mod integer_dup 80 float_dup_items print_float float_frominteger print_integer integer_yankdup float_mult integer_max integer_stackdepth float_shove float_mult integer_max integer_stackdepth float_shove float_dup float_inc integer_mult integer_shove print_integer integer_flush)
Errors: [75.0362 8 34.1619 11 49.8114 10 11.52 9 46.7869 10 57.7839 11 13.0202 9 95.8478 12 22.5106 10 15.1844 9 55.2703 10 86.9001 7 33.2086 11 6.0932 11 65.9906 10 56.1904 9 13.6023 8 41.272 10 0.0764 9 97.5506 11 41.6377 9 87.3488 11 26.2935 8 22.2569 9 90.7213 8]
Total: 1386.076
Mean: 27.72152
Genome size: 70
Size: 71
Percent parens: 0.014
--- Population Statistics ---
Average total errors in population: 4970.9853151000025
Median total errors in population: 1388.0783000000001
Error averages by case: (249.64799550000097 9.36 201.2749577000019 11.199 149.74662679999898 10.157 128.14948160000085 10.518 154.29686620000004 10.307 165.123871500002 11.473 185.26270229999935 9.486 198.73202909999907 11.734 135.85199759999978 11.067 202.45301029999968 10.652 162.93334530000058 11.247 261.84342259999977 9.4 85.97581869999925 11.135 120.94491629999825 10.697 173.7342348000016 10.608 235.24574029999908 10.499 202.35606549999954 9.926 222.2515095999991 11.246 190.55396639999915 9.926 267.0803468999973 12.027 222.58787239999882 10.338 258.85253640000315 11.961 210.99581640000002 9.884 135.85585120000013 9.807 185.11333369999832 9.467)
Error minima by case: (40.0 4 4.0674 5 10.1667 4 2.4959 9 6.7615 8 9.6876 4 0.9701 3 43.7434 4 11.4423 4 14.1844 5 13.1854 4 84.0 5 2.0 2 5.0243 9 20.026 5 33.0 5 12.5364 8 7.7369 9 0.0329 5 1.4536 5 10.3423 7 1.6717 5 25.2239 7 21.1871 8 21.0 5)
Average genome size in population (length): 64.498
Average program size in population (points): 65.498
Average percent parens in population: 0.015
Minimum age in population: 61.1129778940267
Maximum age in population: 65.60070182930576
Average age in population: 63.74755204608902
Median age in population: 63.80028549927107
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 63
Genome diversity (% unique Plush genomes):	 0.784
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 63
Syntactic diversity (% unique Push programs):	 0.784
Total error diversity:				 0.243
Error (vector) diversity:			 0.257
Behavioral diversity:				 0.258
--- Run Statistics ---
Number of program evaluations used so far: 45000
Number of point (instruction) evaluations so far: 59399190
--- Timings ---
Current time: 1529615053144 milliseconds
Total Time:         159.2 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        69.9 seconds, 43.9%
Fitness Testing:     70.3 seconds, 44.2%
Report:              18.9 seconds, 11.9%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 44
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 45
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 45
;;******************************
;; -*- Number IO problem report - generation 45
Test total error for best: 59725.05400000006
Test mean error for best: 29.86253
;;------------------------------
Outputs of best individual on training cases:
Correct output: -116.076402553 | Program output: -41.0401600   
Correct output: 24.1400847456  | Program output: -10.02181     
Correct output: 69.833290954   | Program output: 20.0218820    
Correct output: 82.4958592801  | Program output: 94.015848350  
Correct output: 34.2385110874  | Program output: 81.02544644   
Correct output: -10.7358110665 | Program output: 47.048108288  
Correct output: 1.9700532093   | Program output: -11.050100    
Correct output: -44.7956976677 | Program output: 51.052137904  
Correct output: 68.5576547673  | Program output: 46.047101614  
Correct output: -69.2536523379 | Program output: -54.0692809   
Correct output: -14.2275745396 | Program output: 41.04272324   
Correct output: -171.9767905886 | Program output: -85.0767056   
Correct output: -32.1846093265 | Program output: 1.024         
Correct output: 66.9812146721  | Program output: 73.074399748  
Correct output: 100.0259781081 | Program output: 34.03541650   
Correct output: -90.2595503995 | Program output: -34.0691089   
Correct output: -82.4635707651 | Program output: -96.0659025   
Correct output: -8.7492896214  | Program output: -50.0212401   
Correct output: -82.1329348831 | Program output: -82.056561    
Correct output: 24.5261129925  | Program output: -73.0245184   
Correct output: -11.4065589042 | Program output: -53.0442704   
Correct output: 10.3282540908  | Program output: -77.0205776   
Correct output: -51.7760580299 | Program output: -78.0695929   
Correct output: 51.8185003253  | Program output: 74.075416250  
Correct output: 110.7431489201 | Program output: 20.0218820    
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_yankdup} {:instruction float_pop} {:instruction float_mult} {:instruction in2} {:instruction float_max} {:instruction integer_dup} {:instruction print_float} {:instruction integer_mult} {:instruction float_mult} {:instruction float_pop} {:instruction float_mult} {:instruction in2} {:instruction float_sub} {:instruction float_sub} {:instruction float_mult} {:instruction integer_dup} {:instruction integer_dup} {:instruction float_add} {:instruction integer_dec} {:instruction integer_mult} {:instruction float_mult} {:instruction float_add} {:instruction float_mult} {:instruction integer_mult} {:instruction integer_dup} {:instruction float_add} {:instruction integer_dup} {:instruction float_add} {:instruction integer_dec} {:instruction integer_mult} {:instruction float_mult} {:instruction float_pop} {:instruction float_tan} {:instruction in2} {:instruction float_max} {:instruction float_pop} {:instruction float_mult} {:instruction in2} {:instruction float_yankdup} {:instruction integer_dup} {:instruction integer_pop} {:instruction integer_dec} {:instruction float_cos} {:instruction float_frominteger} {:instruction integer_swap} {:instruction integer_mod} {:instruction integer_dup} {:instruction 80} {:instruction integer_mod} {:instruction integer_dup} {:instruction 80} {:instruction float_dup_items} {:instruction print_float} {:instruction float_frominteger} {:instruction print_integer} {:instruction integer_yankdup} {:instruction float_mult} {:instruction integer_max} {:instruction integer_stackdepth} {:instruction float_shove} {:instruction float_mult} {:instruction integer_max} {:instruction integer_stackdepth} {:instruction float_shove} {:instruction float_dup} {:instruction float_inc} {:instruction integer_mult} {:instruction integer_shove} {:instruction print_integer} {:instruction integer_flush})
Best program: (float_yankdup float_pop float_mult in2 float_max integer_dup print_float integer_mult float_mult float_pop float_mult in2 float_sub float_sub float_mult integer_dup integer_dup float_add integer_dec integer_mult float_mult float_add float_mult integer_mult integer_dup float_add integer_dup float_add integer_dec integer_mult float_mult float_pop float_tan in2 float_max float_pop float_mult in2 float_yankdup integer_dup integer_pop integer_dec float_cos float_frominteger integer_swap integer_mod integer_dup 80 integer_mod integer_dup 80 float_dup_items print_float float_frominteger print_integer integer_yankdup float_mult integer_max integer_stackdepth float_shove float_mult integer_max integer_stackdepth float_shove float_dup float_inc integer_mult integer_shove print_integer integer_flush)
Errors: [75.0362 8 34.1619 11 49.8114 10 11.52 9 46.7869 10 57.7839 11 13.0202 9 95.8478 12 22.5106 10 15.1844 9 55.2703 10 86.9001 7 33.2086 11 6.0932 11 65.9906 10 56.1904 9 13.6023 8 41.272 10 0.0764 9 97.5506 11 41.6377 9 87.3488 11 26.2935 8 22.2569 9 90.7213 8]
Total: 1386.076
Mean: 27.72152
Genome size: 70
Size: 71
Percent parens: 0.014
--- Population Statistics ---
Average total errors in population: 4698.8599705000015
Median total errors in population: 1388.0783000000001
Error averages by case: (238.37118070000096 9.306 192.46765000000215 11.147 142.12640149999896 10.233 118.29830430000084 10.54 141.52290529999928 10.357 154.72326770000154 11.554 176.6190568999993 9.47 188.76429979999907 11.807 127.35302549999969 11.182 190.51581749999954 10.539 152.50970719999992 11.336 249.2475693999997 9.237 71.70792009999961 11.142 109.13445839999835 10.721 165.83739290000148 10.636 223.8685835999992 10.421 189.61814279999933 9.762 210.06848439999897 11.15 178.46232219999933 9.855 254.10666879999673 12.018 209.5521865999991 10.241 245.95361590000317 11.929 199.17284029999993 9.735 127.2361361000007 9.8 178.01103259999826 9.493)
Error minima by case: (36.0764 7 3.1183 8 8.7721 9 2.4 8 6.7615 8 9.6876 9 0.9701 8 43.7434 10 1.4902 9 14.1844 8 13.1854 7 3.9768 6 2.0 4 5.0188 9 19.9909 9 24.2596 8 12.5364 8 7.728 8 0.0523 7 0.5016 8 10.3623 8 7.3283 7 25.2239 7 3.2368 8 21.0 8)
Average genome size in population (length): 64.596
Average program size in population (points): 65.596
Average percent parens in population: 0.015
Minimum age in population: 62.72986487478465
Maximum age in population: 67.35410551365396
Average age in population: 65.12808047023135
Median age in population: 65.18001480975263
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 48
Genome diversity (% unique Plush genomes):	 0.788
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 48
Syntactic diversity (% unique Push programs):	 0.788
Total error diversity:				 0.252
Error (vector) diversity:			 0.261
Behavioral diversity:				 0.261
--- Run Statistics ---
Number of program evaluations used so far: 46000
Number of point (instruction) evaluations so far: 61014115
--- Timings ---
Current time: 1529615056940 milliseconds
Total Time:         163.0 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        71.3 seconds, 43.7%
Fitness Testing:     72.2 seconds, 44.3%
Report:              19.4 seconds, 11.9%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 45
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 46
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 46
;;******************************
;; -*- Number IO problem report - generation 46
Test total error for best: 59725.05400000006
Test mean error for best: 29.86253
;;------------------------------
Outputs of best individual on training cases:
Correct output: -116.076402553 | Program output: -41.0401600   
Correct output: 24.1400847456  | Program output: -10.02181     
Correct output: 69.833290954   | Program output: 20.0218820    
Correct output: 82.4958592801  | Program output: 94.015848350  
Correct output: 34.2385110874  | Program output: 81.02544644   
Correct output: -10.7358110665 | Program output: 47.048108288  
Correct output: 1.9700532093   | Program output: -11.050100    
Correct output: -44.7956976677 | Program output: 51.052137904  
Correct output: 68.5576547673  | Program output: 46.047101614  
Correct output: -69.2536523379 | Program output: -54.0692809   
Correct output: -14.2275745396 | Program output: 41.04272324   
Correct output: -171.9767905886 | Program output: -85.0767056   
Correct output: -32.1846093265 | Program output: 1.024         
Correct output: 66.9812146721  | Program output: 73.074399748  
Correct output: 100.0259781081 | Program output: 34.03541650   
Correct output: -90.2595503995 | Program output: -34.0691089   
Correct output: -82.4635707651 | Program output: -96.0659025   
Correct output: -8.7492896214  | Program output: -50.0212401   
Correct output: -82.1329348831 | Program output: -82.056561    
Correct output: 24.5261129925  | Program output: -73.0245184   
Correct output: -11.4065589042 | Program output: -53.0442704   
Correct output: 10.3282540908  | Program output: -77.0205776   
Correct output: -51.7760580299 | Program output: -78.0695929   
Correct output: 51.8185003253  | Program output: 74.075416250  
Correct output: 110.7431489201 | Program output: 20.0218820    
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_yankdup} {:instruction float_pop} {:instruction float_mult} {:instruction in2} {:instruction float_max} {:instruction integer_dup} {:instruction print_float} {:instruction integer_mult} {:instruction float_mult} {:instruction float_pop} {:instruction float_mult} {:instruction in2} {:instruction float_sub} {:instruction float_sub} {:instruction tagged_584} {:instruction integer_dup} {:instruction integer_dup} {:instruction float_add} {:instruction integer_dec} {:instruction integer_mult} {:instruction float_mult} {:instruction float_add} {:instruction float_add} {:instruction integer_mult} {:instruction integer_dup} {:instruction float_add} {:instruction integer_dup} {:instruction float_add} {:instruction integer_dec} {:instruction integer_mult} {:instruction float_mult} {:instruction float_pop} {:instruction float_tan} {:instruction in2} {:instruction float_max} {:instruction float_pop} {:instruction float_mult} {:instruction in2} {:instruction float_yankdup} {:instruction integer_dup} {:instruction integer_pop} {:instruction integer_dec} {:instruction float_cos} {:instruction float_frominteger} {:instruction integer_swap} {:instruction integer_mod} {:instruction integer_dup} {:instruction 80} {:instruction integer_mod} {:instruction integer_dup} {:instruction 80} {:instruction float_dup_items} {:instruction print_float} {:instruction float_frominteger} {:instruction print_integer} {:instruction integer_yankdup} {:instruction float_mult} {:instruction integer_max} {:instruction integer_stackdepth} {:instruction float_shove} {:instruction float_mult} {:instruction integer_max} {:instruction integer_stackdepth} {:instruction float_shove} {:instruction float_dup} {:instruction float_inc} {:instruction integer_mult} {:instruction integer_shove} {:instruction print_integer} {:instruction integer_flush})
Best program: (float_yankdup float_pop float_mult in2 float_max integer_dup print_float integer_mult float_mult float_pop float_mult in2 float_sub float_sub tagged_584 integer_dup integer_dup float_add integer_dec integer_mult float_mult float_add float_add integer_mult integer_dup float_add integer_dup float_add integer_dec integer_mult float_mult float_pop float_tan in2 float_max float_pop float_mult in2 float_yankdup integer_dup integer_pop integer_dec float_cos float_frominteger integer_swap integer_mod integer_dup 80 integer_mod integer_dup 80 float_dup_items print_float float_frominteger print_integer integer_yankdup float_mult integer_max integer_stackdepth float_shove float_mult integer_max integer_stackdepth float_shove float_dup float_inc integer_mult integer_shove print_integer integer_flush)
Errors: [75.0362 8 34.1619 11 49.8114 10 11.52 9 46.7869 10 57.7839 11 13.0202 9 95.8478 12 22.5106 10 15.1844 9 55.2703 10 86.9001 7 33.2086 11 6.0932 11 65.9906 10 56.1904 9 13.6023 8 41.272 10 0.0764 9 97.5506 11 41.6377 9 87.3488 11 26.2935 8 22.2569 9 90.7213 8]
Total: 1386.076
Mean: 27.72152
Genome size: 70
Size: 71
Percent parens: 0.014
--- Population Statistics ---
Average total errors in population: 4405.736291500006
Median total errors in population: 1388.0783000000001
Error averages by case: (220.2737585000008 9.083 178.05438100000205 11.09 136.315832799999 10.131 107.27887720000075 10.468 135.64628539999885 10.286 147.556440200001 11.449 160.13155349999934 9.424 181.8615007999991 11.734 118.08080829999963 11.081 172.93586059999933 10.372 145.85558229999978 11.206 232.00720579999967 9.13 82.20395199999933 11.137 101.8400533999986 10.696 157.5618950000014 10.541 207.1403384999989 10.263 169.97753579999923 9.623 193.43491389999903 11.05 160.62222729999993 9.664 239.79684399999667 11.95 192.86186819999918 10.1 230.44264080000283 11.806 181.83742349999997 9.647 118.17796000000074 9.762 172.71455269999836 9.433)
Error minima by case: (40.0 4 3.1401 4 10.1745 4 2.4056 8 24.2385 8 9.7358 4 1.9001 3 17.5143 4 11.4434 4 6.9437 4 13.2276 4 84.0 4 2.0 3 5.0188 9 14.3207 5 27.9496 4 11.5374 8 7.7493 8 0.0518 4 0.5261 4 10.4066 8 8.6923 4 10.5339 8 21.1815 8 21.0 5)
Average genome size in population (length): 64.715
Average program size in population (points): 65.715
Average percent parens in population: 0.015
Minimum age in population: 64.0800338883688
Maximum age in population: 68.49224230017705
Average age in population: 66.50340896849869
Median age in population: 66.53940380081445
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 36
Genome diversity (% unique Plush genomes):	 0.788
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 36
Syntactic diversity (% unique Push programs):	 0.788
Total error diversity:				 0.241
Error (vector) diversity:			 0.251
Behavioral diversity:				 0.251
--- Run Statistics ---
Number of program evaluations used so far: 47000
Number of point (instruction) evaluations so far: 62631990
--- Timings ---
Current time: 1529615060667 milliseconds
Total Time:         166.7 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        72.8 seconds, 43.7%
Fitness Testing:     74.0 seconds, 44.4%
Report:              19.9 seconds, 11.9%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 46
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 47
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 47
;;******************************
;; -*- Number IO problem report - generation 47
Test total error for best: 59725.05400000006
Test mean error for best: 29.86253
;;------------------------------
Outputs of best individual on training cases:
Correct output: -116.076402553 | Program output: -41.0401600   
Correct output: 24.1400847456  | Program output: -10.02181     
Correct output: 69.833290954   | Program output: 20.0218820    
Correct output: 82.4958592801  | Program output: 94.015848350  
Correct output: 34.2385110874  | Program output: 81.02544644   
Correct output: -10.7358110665 | Program output: 47.048108288  
Correct output: 1.9700532093   | Program output: -11.050100    
Correct output: -44.7956976677 | Program output: 51.052137904  
Correct output: 68.5576547673  | Program output: 46.047101614  
Correct output: -69.2536523379 | Program output: -54.0692809   
Correct output: -14.2275745396 | Program output: 41.04272324   
Correct output: -171.9767905886 | Program output: -85.0767056   
Correct output: -32.1846093265 | Program output: 1.024         
Correct output: 66.9812146721  | Program output: 73.074399748  
Correct output: 100.0259781081 | Program output: 34.03541650   
Correct output: -90.2595503995 | Program output: -34.0691089   
Correct output: -82.4635707651 | Program output: -96.0659025   
Correct output: -8.7492896214  | Program output: -50.0212401   
Correct output: -82.1329348831 | Program output: -82.056561    
Correct output: 24.5261129925  | Program output: -73.0245184   
Correct output: -11.4065589042 | Program output: -53.0442704   
Correct output: 10.3282540908  | Program output: -77.0205776   
Correct output: -51.7760580299 | Program output: -78.0695929   
Correct output: 51.8185003253  | Program output: 74.075416250  
Correct output: 110.7431489201 | Program output: 20.0218820    
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_yankdup} {:instruction float_pop} {:instruction float_mult} {:instruction in2} {:instruction float_max} {:instruction integer_dup} {:instruction print_float} {:instruction integer_mult} {:instruction float_mult} {:instruction float_pop} {:instruction float_mult} {:instruction in2} {:instruction float_sub} {:instruction float_sub} {:instruction tagged_584} {:instruction integer_dup} {:instruction integer_dup} {:instruction float_add} {:instruction integer_dec} {:instruction integer_mult} {:instruction float_mult} {:instruction float_add} {:instruction float_add} {:instruction integer_mult} {:instruction integer_dup} {:instruction float_add} {:instruction integer_dup} {:instruction float_add} {:instruction integer_dec} {:instruction integer_mult} {:instruction float_mult} {:instruction float_pop} {:instruction float_tan} {:instruction in2} {:instruction float_max} {:instruction float_pop} {:instruction float_mult} {:instruction in2} {:instruction float_yankdup} {:instruction integer_dup} {:instruction integer_pop} {:instruction integer_dec} {:instruction float_cos} {:instruction float_frominteger} {:instruction integer_swap} {:instruction integer_mod} {:instruction integer_dup} {:instruction 80} {:instruction integer_mod} {:instruction integer_dup} {:instruction 80} {:instruction float_dup_items} {:instruction print_float} {:instruction float_frominteger} {:instruction print_integer} {:instruction integer_yankdup} {:instruction float_mult} {:instruction integer_max} {:instruction integer_stackdepth} {:instruction float_shove} {:instruction float_mult} {:instruction integer_max} {:instruction integer_stackdepth} {:instruction float_shove} {:instruction float_dup} {:instruction float_inc} {:instruction integer_mult} {:instruction integer_shove} {:instruction print_integer})
Best program: (float_yankdup float_pop float_mult in2 float_max integer_dup print_float integer_mult float_mult float_pop float_mult in2 float_sub float_sub tagged_584 integer_dup integer_dup float_add integer_dec integer_mult float_mult float_add float_add integer_mult integer_dup float_add integer_dup float_add integer_dec integer_mult float_mult float_pop float_tan in2 float_max float_pop float_mult in2 float_yankdup integer_dup integer_pop integer_dec float_cos float_frominteger integer_swap integer_mod integer_dup 80 integer_mod integer_dup 80 float_dup_items print_float float_frominteger print_integer integer_yankdup float_mult integer_max integer_stackdepth float_shove float_mult integer_max integer_stackdepth float_shove float_dup float_inc integer_mult integer_shove print_integer)
Errors: [75.0362 8 34.1619 11 49.8114 10 11.52 9 46.7869 10 57.7839 11 13.0202 9 95.8478 12 22.5106 10 15.1844 9 55.2703 10 86.9001 7 33.2086 11 6.0932 11 65.9906 10 56.1904 9 13.6023 8 41.272 10 0.0764 9 97.5506 11 41.6377 9 87.3488 11 26.2935 8 22.2569 9 90.7213 8]
Total: 1386.076
Mean: 27.72152
Genome size: 69
Size: 70
Percent parens: 0.014
--- Population Statistics ---
Average total errors in population: 4411.301222700004
Median total errors in population: 1388.0783000000001
Error averages by case: (229.30903550000087 9.14 184.08005630000187 11.149 127.37735469999929 10.159 98.7492171000005 10.397 129.9396817999989 10.258 139.66266779999995 11.477 168.1147945999994 9.489 174.20546809999897 11.755 108.12248879999946 11.005 180.83173509999943 10.408 137.41263279999896 11.138 240.82712679999963 9.141 75.32623229999943 11.177 93.58574979999909 10.667 147.34238390000124 10.558 214.5053623999992 10.297 179.8178182999994 9.645 201.46500939999902 11.058 168.7186038999996 9.727 247.60968319999705 11.93 201.79519489999936 10.107 239.22221350000274 11.858 189.79260830000018 9.633 107.99671580000062 9.694 164.22538759999856 9.399)
Error minima by case: (40.0 4 2.8937 4 2.1253 4 2.4959 8 7.2047 8 9.6876 5 0.9701 3 17.5691 5 3.4009 5 2.2508 6 12.999 5 84.0 6 2.0 3 4.9773 9 20.026 6 23.2585 6 12.5364 8 7.728 8 0.0329 6 2.5077 5 10.3623 8 10.3283 6 15.2299 7 8.6632 8 21.0 5)
Average genome size in population (length): 65.109
Average program size in population (points): 66.109
Average percent parens in population: 0.015
Minimum age in population: 65.12509173404897
Maximum age in population: 69.868285115093
Average age in population: 67.90405764059174
Median age in population: 67.94599353661226
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 29
Genome diversity (% unique Plush genomes):	 0.798
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 29
Syntactic diversity (% unique Push programs):	 0.798
Total error diversity:				 0.235
Error (vector) diversity:			 0.243
Behavioral diversity:				 0.244
--- Run Statistics ---
Number of program evaluations used so far: 48000
Number of point (instruction) evaluations so far: 64259740
--- Timings ---
Current time: 1529615064538 milliseconds
Total Time:         170.6 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        74.2 seconds, 43.5%
Fitness Testing:     76.0 seconds, 44.5%
Report:              20.3 seconds, 11.9%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 47
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 48
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 48
;;******************************
;; -*- Number IO problem report - generation 48
Test total error for best: 59725.05400000006
Test mean error for best: 29.86253
;;------------------------------
Outputs of best individual on training cases:
Correct output: -116.076402553 | Program output: -41.0401600   
Correct output: 24.1400847456  | Program output: -10.02181     
Correct output: 69.833290954   | Program output: 20.0218820    
Correct output: 82.4958592801  | Program output: 94.015848350  
Correct output: 34.2385110874  | Program output: 81.02544644   
Correct output: -10.7358110665 | Program output: 47.048108288  
Correct output: 1.9700532093   | Program output: -11.050100    
Correct output: -44.7956976677 | Program output: 51.052137904  
Correct output: 68.5576547673  | Program output: 46.047101614  
Correct output: -69.2536523379 | Program output: -54.0692809   
Correct output: -14.2275745396 | Program output: 41.04272324   
Correct output: -171.9767905886 | Program output: -85.0767056   
Correct output: -32.1846093265 | Program output: 1.024         
Correct output: 66.9812146721  | Program output: 73.074399748  
Correct output: 100.0259781081 | Program output: 34.03541650   
Correct output: -90.2595503995 | Program output: -34.0691089   
Correct output: -82.4635707651 | Program output: -96.0659025   
Correct output: -8.7492896214  | Program output: -50.0212401   
Correct output: -82.1329348831 | Program output: -82.056561    
Correct output: 24.5261129925  | Program output: -73.0245184   
Correct output: -11.4065589042 | Program output: -53.0442704   
Correct output: 10.3282540908  | Program output: -77.0205776   
Correct output: -51.7760580299 | Program output: -78.0695929   
Correct output: 51.8185003253  | Program output: 74.075416250  
Correct output: 110.7431489201 | Program output: 20.0218820    
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_yankdup} {:instruction float_pop} {:instruction float_mult} {:instruction in2} {:instruction float_max} {:instruction integer_dup} {:instruction print_float} {:instruction integer_mult} {:instruction float_mult} {:instruction float_pop} {:instruction float_mult} {:instruction in2} {:instruction float_sub} {:instruction float_sub} {:instruction float_mult} {:instruction integer_dup} {:instruction integer_dup} {:instruction float_add} {:instruction integer_dec} {:instruction integer_mult} {:instruction float_mult} {:instruction float_add} {:instruction float_mult} {:instruction integer_mult} {:instruction integer_dup} {:instruction float_add} {:instruction integer_dup} {:instruction float_add} {:instruction integer_dec} {:instruction integer_mult} {:instruction float_mult} {:instruction float_pop} {:instruction float_tan} {:instruction in2} {:instruction float_max} {:instruction float_pop} {:instruction float_mult} {:instruction in2} {:instruction float_yankdup} {:instruction integer_dup} {:instruction integer_pop} {:instruction integer_dec} {:instruction float_cos} {:instruction float_frominteger} {:instruction integer_swap} {:instruction integer_mod} {:instruction integer_dup} {:instruction 80} {:instruction integer_mod} {:instruction integer_dup} {:instruction 80} {:instruction float_dup_items} {:instruction print_float} {:instruction float_frominteger} {:instruction print_integer} {:instruction integer_yankdup} {:instruction float_mult} {:instruction integer_max} {:instruction integer_stackdepth} {:instruction float_shove} {:instruction float_mult} {:instruction integer_max} {:instruction integer_stackdepth} {:instruction float_shove} {:instruction float_dup} {:instruction float_inc} {:instruction integer_mult} {:instruction integer_shove} {:instruction print_integer} {:instruction integer_flush})
Best program: (float_yankdup float_pop float_mult in2 float_max integer_dup print_float integer_mult float_mult float_pop float_mult in2 float_sub float_sub float_mult integer_dup integer_dup float_add integer_dec integer_mult float_mult float_add float_mult integer_mult integer_dup float_add integer_dup float_add integer_dec integer_mult float_mult float_pop float_tan in2 float_max float_pop float_mult in2 float_yankdup integer_dup integer_pop integer_dec float_cos float_frominteger integer_swap integer_mod integer_dup 80 integer_mod integer_dup 80 float_dup_items print_float float_frominteger print_integer integer_yankdup float_mult integer_max integer_stackdepth float_shove float_mult integer_max integer_stackdepth float_shove float_dup float_inc integer_mult integer_shove print_integer integer_flush)
Errors: [75.0362 8 34.1619 11 49.8114 10 11.52 9 46.7869 10 57.7839 11 13.0202 9 95.8478 12 22.5106 10 15.1844 9 55.2703 10 86.9001 7 33.2086 11 6.0932 11 65.9906 10 56.1904 9 13.6023 8 41.272 10 0.0764 9 97.5506 11 41.6377 9 87.3488 11 26.2935 8 22.2569 9 90.7213 8]
Total: 1386.076
Mean: 27.72152
Genome size: 70
Size: 71
Percent parens: 0.014
--- Population Statistics ---
Average total errors in population: 4363.312526900002
Median total errors in population: 1388.0783000000001
Error averages by case: (220.93398040000102 9.117 178.88903470000164 11.089 134.1102585999997 10.229 107.71320500000026 10.353 135.60060379999965 10.349 146.83206209999997 11.52 161.74192169999947 9.47 181.03629789999917 11.909 116.16957409999951 11.052 170.76711849999927 10.398 144.63240279999965 11.062 231.71567769999947 9.118 70.54774459999985 11.158 101.58073049999949 10.851 155.282309700001 10.56 204.99175559999966 10.312 168.65110569999916 9.615 191.50342179999916 11.031 156.92429180000045 9.752 236.9091096999976 12.005 191.8494680999998 10.1 228.01076430000262 11.897 178.81930560000012 9.63 115.77348430000019 9.752 170.68589789999902 9.312)
Error minima by case: (18.0595 7 5.1183 9 9.1711 8 2.48 7 33.2118 9 9.6558 9 0.9701 7 8.4874 10 10.4446 9 14.1736 8 13.1476 6 73.9598 7 2.8174 9 5.0243 9 19.9909 9 7.7574 9 11.5455 8 7.6693 8 0.0329 7 2.5016 9 10.3266 8 7.2425 9 1.5071 7 21.1871 7 30.7217 8)
Average genome size in population (length): 66.421
Average program size in population (points): 67.421
Average percent parens in population: 0.015
Minimum age in population: 66.12509173404897
Maximum age in population: 71.44229477266695
Average age in population: 69.32995887286947
Median age in population: 69.37411345987442
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 47
Genome diversity (% unique Plush genomes):	 0.777
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 47
Syntactic diversity (% unique Push programs):	 0.777
Total error diversity:				 0.271
Error (vector) diversity:			 0.282
Behavioral diversity:				 0.283
--- Run Statistics ---
Number of program evaluations used so far: 49000
Number of point (instruction) evaluations so far: 65920265
--- Timings ---
Current time: 1529615068291 milliseconds
Total Time:         174.3 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        75.7 seconds, 43.4%
Fitness Testing:     77.8 seconds, 44.6%
Report:              20.8 seconds, 11.9%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 48
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 49
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 49
;;******************************
;; -*- Number IO problem report - generation 49
Test total error for best: 59669.73249999999
Test mean error for best: 29.83487
;;------------------------------
Outputs of best individual on training cases:
Correct output: -116.076402553 | Program output: -41.0401600   
Correct output: 24.1400847456  | Program output: -10.07181     
Correct output: 69.833290954   | Program output: 20.0219261    
Correct output: 82.4958592801  | Program output: 94.015857375  
Correct output: 34.2385110874  | Program output: 81.02551368   
Correct output: -10.7358110665 | Program output: 47.048110592  
Correct output: 1.9700532093   | Program output: -11.050100    
Correct output: -44.7956976677 | Program output: 51.052140608  
Correct output: 68.5576547673  | Program output: 46.047103823  
Correct output: -69.2536523379 | Program output: -54.0192809   
Correct output: -14.2275745396 | Program output: 41.04274088   
Correct output: -171.9767905886 | Program output: -85.0767056   
Correct output: -32.1846093265 | Program output: 1.024         
Correct output: 66.9812146721  | Program output: 73.074405224  
Correct output: 100.0259781081 | Program output: 34.03542875   
Correct output: -90.2595503995 | Program output: -34.0791089   
Correct output: -82.4635707651 | Program output: -96.0659025   
Correct output: -8.7492896214  | Program output: -50.0312401   
Correct output: -82.1329348831 | Program output: -82.0796561   
Correct output: 24.5261129925  | Program output: -73.0405184   
Correct output: -11.4065589042 | Program output: -53.0602704   
Correct output: 10.3282540908  | Program output: -77.045776    
Correct output: -51.7760580299 | Program output: -78.0755929   
Correct output: 51.8185003253  | Program output: 74.075421875  
Correct output: 110.7431489201 | Program output: 20.0219261    
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_yankdup} {:instruction float_pop} {:instruction float_mult} {:instruction in2} {:instruction float_max} {:instruction integer_dup} {:instruction print_float} {:instruction integer_mult} {:instruction float_mult} {:instruction float_pop} {:instruction float_mult} {:instruction in2} {:instruction float_sub} {:instruction float_sub} {:instruction float_mult} {:instruction integer_dup} {:instruction integer_dup} {:instruction float_add} {:instruction integer_dec} {:instruction integer_shove} {:instruction float_mult} {:instruction float_add} {:instruction float_mult} {:instruction integer_mult} {:instruction integer_dup} {:instruction float_add} {:instruction integer_dup} {:instruction float_add} {:instruction integer_dec} {:instruction integer_mult} {:instruction float_mult} {:instruction float_pop} {:instruction float_tan} {:instruction in2} {:instruction float_max} {:instruction float_pop} {:instruction float_mult} {:instruction in2} {:instruction float_yankdup} {:instruction integer_dup} {:instruction integer_pop} {:instruction integer_dec} {:instruction float_cos} {:instruction float_frominteger} {:instruction integer_swap} {:instruction integer_mod} {:instruction integer_dup} {:instruction 80} {:instruction integer_mod} {:instruction integer_dup} {:instruction 80} {:instruction float_dup_items} {:instruction print_float} {:instruction float_frominteger} {:instruction print_integer} {:instruction integer_yankdup} {:instruction float_mult} {:instruction integer_max} {:instruction integer_stackdepth} {:instruction float_shove} {:instruction float_mult} {:instruction integer_max} {:instruction integer_stackdepth} {:instruction float_shove} {:instruction float_dup} {:instruction float_inc} {:instruction integer_mult} {:instruction integer_shove} {:instruction print_integer} {:instruction integer_flush})
Best program: (float_yankdup float_pop float_mult in2 float_max integer_dup print_float integer_mult float_mult float_pop float_mult in2 float_sub float_sub float_mult integer_dup integer_dup float_add integer_dec integer_shove float_mult float_add float_mult integer_mult integer_dup float_add integer_dup float_add integer_dec integer_mult float_mult float_pop float_tan in2 float_max float_pop float_mult in2 float_yankdup integer_dup integer_pop integer_dec float_cos float_frominteger integer_swap integer_mod integer_dup 80 integer_mod integer_dup 80 float_dup_items print_float float_frominteger print_integer integer_yankdup float_mult integer_max integer_stackdepth float_shove float_mult integer_max integer_stackdepth float_shove float_dup float_inc integer_mult integer_shove print_integer integer_flush)
Errors: [75.0362 8 34.2119 10 49.8114 10 11.52 9 46.787 9 57.7839 9 13.0202 9 95.8478 11 22.5106 10 15.2344 10 55.2703 10 86.9001 7 33.2086 11 6.0932 11 65.9905 10 56.1804 9 13.6023 8 41.282 10 0.0533 8 97.5666 12 41.6537 8 87.374 12 26.2995 8 22.2569 11 90.7212 8]
Total: 1384.2160000000003
Mean: 27.68432
Genome size: 70
Size: 71
Percent parens: 0.014
--- Population Statistics ---
Average total errors in population: 4937.354477400001
Median total errors in population: 1388.0783000000001
Error averages by case: (250.76796460000105 9.041 207.29582620000247 11.071 149.00812710000082 10.183 121.93818760000083 10.144 149.92188110000103 10.359 161.4582593000002 11.553 192.76339189999922 9.394 195.1971904999989 12.146 130.22449579999872 10.845 203.71419739999945 10.316 159.26498630000074 10.798 261.0458071999996 8.997 75.53241719999937 11.137 115.99053620000014 11.121 168.4599883000009 10.562 236.44846209999912 10.216 202.77445939999916 9.535 223.62753579999878 10.976 191.8753309999992 9.631 268.2722409999967 11.854 224.0046522999992 10.053 260.22485640000343 11.757 212.436359 9.539 130.2004739999988 9.786 184.8458497000005 9.047)
Error minima by case: (35.0748 7 3.1183 5 10.1667 6 2.48 6 23.156 9 9.7358 7 0.9701 5 43.7957 7 11.4423 7 14.1796 7 13.2276 6 2.9697 7 2.0 3 5.0872 9 19.9909 8 23.2585 7 6.2899 8 7.7493 8 0.0329 7 0.5016 7 10.4066 8 9.6923 7 25.2239 7 21.1919 8 21.0 7)
Average genome size in population (length): 68.193
Average program size in population (points): 69.193
Average percent parens in population: 0.015
Minimum age in population: 68.36546319106145
Maximum age in population: 72.92120464765672
Average age in population: 70.81380341083641
Median age in population: 70.85611472140641
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 76
Genome diversity (% unique Plush genomes):	 0.748
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 76
Syntactic diversity (% unique Push programs):	 0.748
Total error diversity:				 0.256
Error (vector) diversity:			 0.263
Behavioral diversity:				 0.264
--- Run Statistics ---
Number of program evaluations used so far: 50000
Number of point (instruction) evaluations so far: 67625115
--- Timings ---
Current time: 1529615072039 milliseconds
Total Time:         178.1 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        77.1 seconds, 43.3%
Fitness Testing:     79.6 seconds, 44.7%
Report:              21.2 seconds, 11.9%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 49
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 50
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 50
;;******************************
;; -*- Number IO problem report - generation 50
Test total error for best: 59669.73249999999
Test mean error for best: 29.83487
;;------------------------------
Outputs of best individual on training cases:
Correct output: -116.076402553 | Program output: -41.0401600   
Correct output: 24.1400847456  | Program output: -10.07181     
Correct output: 69.833290954   | Program output: 20.0219261    
Correct output: 82.4958592801  | Program output: 94.015857375  
Correct output: 34.2385110874  | Program output: 81.02551368   
Correct output: -10.7358110665 | Program output: 47.048110592  
Correct output: 1.9700532093   | Program output: -11.050100    
Correct output: -44.7956976677 | Program output: 51.052140608  
Correct output: 68.5576547673  | Program output: 46.047103823  
Correct output: -69.2536523379 | Program output: -54.0192809   
Correct output: -14.2275745396 | Program output: 41.04274088   
Correct output: -171.9767905886 | Program output: -85.0767056   
Correct output: -32.1846093265 | Program output: 1.024         
Correct output: 66.9812146721  | Program output: 73.074405224  
Correct output: 100.0259781081 | Program output: 34.03542875   
Correct output: -90.2595503995 | Program output: -34.0791089   
Correct output: -82.4635707651 | Program output: -96.0659025   
Correct output: -8.7492896214  | Program output: -50.0312401   
Correct output: -82.1329348831 | Program output: -82.0796561   
Correct output: 24.5261129925  | Program output: -73.0405184   
Correct output: -11.4065589042 | Program output: -53.0602704   
Correct output: 10.3282540908  | Program output: -77.045776    
Correct output: -51.7760580299 | Program output: -78.0755929   
Correct output: 51.8185003253  | Program output: 74.075421875  
Correct output: 110.7431489201 | Program output: 20.0219261    
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_yankdup} {:instruction float_pop} {:instruction float_mult} {:instruction in2} {:instruction float_max} {:instruction integer_dup} {:instruction print_float} {:instruction integer_mult} {:instruction float_mult} {:instruction float_pop} {:instruction float_mult} {:instruction in2} {:instruction float_sub} {:instruction float_sub} {:instruction float_mult} {:instruction integer_dup} {:instruction integer_dup} {:instruction float_add} {:instruction integer_dec} {:instruction integer_shove} {:instruction float_mult} {:instruction float_add} {:instruction float_mult} {:instruction integer_mult} {:instruction integer_dup} {:instruction float_add} {:instruction integer_dup} {:instruction float_add} {:instruction integer_dec} {:instruction integer_mult} {:instruction float_mult} {:instruction float_pop} {:instruction float_tan} {:instruction in2} {:instruction float_max} {:instruction float_pop} {:instruction float_mult} {:instruction in2} {:instruction float_yankdup} {:instruction integer_dup} {:instruction integer_pop} {:instruction integer_dec} {:instruction float_cos} {:instruction float_frominteger} {:instruction integer_swap} {:instruction integer_mod} {:instruction integer_dup} {:instruction 80} {:instruction integer_mod} {:instruction integer_dup} {:instruction 80} {:instruction float_dup_items} {:instruction print_float} {:instruction float_frominteger} {:instruction print_integer} {:instruction integer_yankdup} {:instruction float_mult} {:instruction integer_max} {:instruction integer_stackdepth} {:instruction float_shove} {:instruction float_mult} {:instruction integer_max} {:instruction integer_stackdepth} {:instruction float_shove} {:instruction float_dup} {:instruction float_inc} {:instruction integer_mult} {:instruction integer_shove} {:instruction print_integer} {:instruction integer_flush})
Best program: (float_yankdup float_pop float_mult in2 float_max integer_dup print_float integer_mult float_mult float_pop float_mult in2 float_sub float_sub float_mult integer_dup integer_dup float_add integer_dec integer_shove float_mult float_add float_mult integer_mult integer_dup float_add integer_dup float_add integer_dec integer_mult float_mult float_pop float_tan in2 float_max float_pop float_mult in2 float_yankdup integer_dup integer_pop integer_dec float_cos float_frominteger integer_swap integer_mod integer_dup 80 integer_mod integer_dup 80 float_dup_items print_float float_frominteger print_integer integer_yankdup float_mult integer_max integer_stackdepth float_shove float_mult integer_max integer_stackdepth float_shove float_dup float_inc integer_mult integer_shove print_integer integer_flush)
Errors: [75.0362 8 34.2119 10 49.8114 10 11.52 9 46.787 9 57.7839 9 13.0202 9 95.8478 11 22.5106 10 15.2344 10 55.2703 10 86.9001 7 33.2086 11 6.0932 11 65.9905 10 56.1804 9 13.6023 8 41.282 10 0.0533 8 97.5666 12 41.6537 8 87.374 12 26.2995 8 22.2569 11 90.7212 8]
Total: 1384.2160000000003
Mean: 27.68432
Genome size: 70
Size: 71
Percent parens: 0.014
--- Population Statistics ---
Average total errors in population: 4494.683211799996
Median total errors in population: 1386.076
Error averages by case: (232.30032910000125 9.018 191.93431980000167 11.022 134.10440090000117 10.216 103.1213128000001 10.014 131.65671580000094 10.358 143.60396999999926 11.592 175.85343949999918 9.375 178.13740609999945 12.345 112.33134709999909 10.693 183.21733069999925 10.279 141.31310860000045 10.615 242.3265916999996 8.943 72.07032679999965 11.181 97.84519420000089 11.294 151.55067030000046 10.578 216.8903266999994 10.217 181.35303129999906 9.469 203.73120019999902 10.899 169.43724869999988 9.576 250.3666579999975 11.935 204.32510019999967 9.965 241.9046140000032 11.769 192.46062540000017 9.456 112.2639203999988 9.822 171.04602350000116 8.907)
Error minima by case: (74.0364 7 4.0683 9 48.8114 9 10.5191 8 23.1944 8 8.7435 9 0.9701 7 38.6328 11 21.5102 9 14.1847 8 12.2402 6 85.9008 7 31.1046 5 5.0928 9 64.9759 8 55.1906 8 12.5364 8 7.6693 8 0.0329 7 1.4409 8 9.4883 8 8.7175 9 25.2239 8 21.2565 8 89.7213 7)
Average genome size in population (length): 69.86
Average program size in population (points): 70.86
Average percent parens in population: 0.014
Minimum age in population: 69.61397087641141
Maximum age in population: 74.17856696254815
Average age in population: 72.21190048081996
Median age in population: 72.2446901323461
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 81
Genome diversity (% unique Plush genomes):	 0.696
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 81
Syntactic diversity (% unique Push programs):	 0.696
Total error diversity:				 0.243
Error (vector) diversity:			 0.251
Behavioral diversity:				 0.253
--- Run Statistics ---
Number of program evaluations used so far: 51000
Number of point (instruction) evaluations so far: 69371690
--- Timings ---
Current time: 1529615076036 milliseconds
Total Time:         182.1 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        78.6 seconds, 43.2%
Fitness Testing:     81.6 seconds, 44.8%
Report:              21.7 seconds, 11.9%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 50
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 51
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 51
;;******************************
;; -*- Number IO problem report - generation 51
Test total error for best: 59669.73249999999
Test mean error for best: 29.83487
;;------------------------------
Outputs of best individual on training cases:
Correct output: -116.076402553 | Program output: -41.0401600   
Correct output: 24.1400847456  | Program output: -10.07181     
Correct output: 69.833290954   | Program output: 20.0219261    
Correct output: 82.4958592801  | Program output: 94.015857375  
Correct output: 34.2385110874  | Program output: 81.02551368   
Correct output: -10.7358110665 | Program output: 47.048110592  
Correct output: 1.9700532093   | Program output: -11.050100    
Correct output: -44.7956976677 | Program output: 51.052140608  
Correct output: 68.5576547673  | Program output: 46.047103823  
Correct output: -69.2536523379 | Program output: -54.0192809   
Correct output: -14.2275745396 | Program output: 41.04274088   
Correct output: -171.9767905886 | Program output: -85.0767056   
Correct output: -32.1846093265 | Program output: 1.024         
Correct output: 66.9812146721  | Program output: 73.074405224  
Correct output: 100.0259781081 | Program output: 34.03542875   
Correct output: -90.2595503995 | Program output: -34.0791089   
Correct output: -82.4635707651 | Program output: -96.0659025   
Correct output: -8.7492896214  | Program output: -50.0312401   
Correct output: -82.1329348831 | Program output: -82.0796561   
Correct output: 24.5261129925  | Program output: -73.0405184   
Correct output: -11.4065589042 | Program output: -53.0602704   
Correct output: 10.3282540908  | Program output: -77.045776    
Correct output: -51.7760580299 | Program output: -78.0755929   
Correct output: 51.8185003253  | Program output: 74.075421875  
Correct output: 110.7431489201 | Program output: 20.0219261    
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_yankdup} {:instruction float_pop} {:instruction float_mult} {:instruction in2} {:instruction float_max} {:instruction integer_dup} {:instruction print_float} {:instruction integer_mult} {:instruction float_mult} {:instruction float_pop} {:instruction float_mult} {:instruction in2} {:instruction float_sub} {:instruction float_sub} {:instruction float_mult} {:instruction integer_dup} {:instruction integer_dup} {:instruction float_add} {:instruction integer_dec} {:instruction integer_shove} {:instruction float_mult} {:instruction float_add} {:instruction float_mult} {:instruction integer_mult} {:instruction integer_dup} {:instruction float_add} {:instruction integer_dup} {:instruction float_add} {:instruction integer_dec} {:instruction integer_mult} {:instruction float_mult} {:instruction float_pop} {:instruction float_tan} {:instruction in2} {:instruction float_max} {:instruction float_pop} {:instruction float_mult} {:instruction in2} {:instruction float_yankdup} {:instruction integer_dup} {:instruction integer_pop} {:instruction integer_dec} {:instruction float_cos} {:instruction float_frominteger} {:instruction integer_swap} {:instruction integer_mod} {:instruction integer_dup} {:instruction 80} {:instruction integer_mod} {:instruction integer_dup} {:instruction 80} {:instruction float_dup_items} {:instruction print_float} {:instruction float_frominteger} {:instruction print_integer} {:instruction integer_yankdup} {:instruction float_mult} {:instruction integer_max} {:instruction integer_stackdepth} {:instruction float_shove} {:instruction float_mult} {:instruction integer_max} {:instruction integer_stackdepth} {:instruction float_shove} {:instruction float_dup} {:instruction float_inc} {:instruction integer_mult} {:instruction integer_shove} {:instruction print_integer} {:instruction integer_flush})
Best program: (float_yankdup float_pop float_mult in2 float_max integer_dup print_float integer_mult float_mult float_pop float_mult in2 float_sub float_sub float_mult integer_dup integer_dup float_add integer_dec integer_shove float_mult float_add float_mult integer_mult integer_dup float_add integer_dup float_add integer_dec integer_mult float_mult float_pop float_tan in2 float_max float_pop float_mult in2 float_yankdup integer_dup integer_pop integer_dec float_cos float_frominteger integer_swap integer_mod integer_dup 80 integer_mod integer_dup 80 float_dup_items print_float float_frominteger print_integer integer_yankdup float_mult integer_max integer_stackdepth float_shove float_mult integer_max integer_stackdepth float_shove float_dup float_inc integer_mult integer_shove print_integer integer_flush)
Errors: [75.0362 8 34.2119 10 49.8114 10 11.52 9 46.787 9 57.7839 9 13.0202 9 95.8478 11 22.5106 10 15.2344 10 55.2703 10 86.9001 7 33.2086 11 6.0932 11 65.9905 10 56.1804 9 13.6023 8 41.282 10 0.0533 8 97.5666 12 41.6537 8 87.374 12 26.2995 8 22.2569 11 90.7212 8]
Total: 1384.2160000000003
Mean: 27.68432
Genome size: 70
Size: 71
Percent parens: 0.014
--- Population Statistics ---
Average total errors in population: 4697.912109999994
Median total errors in population: 1386.076
Error averages by case: (240.70453730000128 9.02 198.3027154000019 10.995 142.4981826000016 10.202 112.36113540000088 9.94 142.3034018000017 10.357 153.1878748999999 11.483 182.9330711999992 9.396 187.31442219999875 12.336 121.98812299999848 10.698 190.80214439999946 10.228 151.8512644000013 10.624 250.6485814999993 8.883 73.61094349999948 11.183 107.76943650000098 11.311 161.60312350000024 10.549 225.34255359999867 10.169 190.18090129999936 9.399 211.17567899999918 10.857 178.3081132999995 9.66 256.4076091999967 11.864 211.50861589999886 9.92 248.05044480000308 11.719 199.30955850000007 9.411 122.07386209999822 9.81 178.80581470000138 8.856)
Error minima by case: (35.0748 7 3.1183 8 10.1706 9 2.4882 8 14.1939 9 9.7348 9 1.9656 7 16.1307 11 11.4446 9 8.3272 8 13.2266 6 2.9697 7 2.0 3 5.0188 9 20.0209 8 23.2585 8 12.5364 8 7.7483 8 0.0364 7 0.5016 8 10.4056 8 0.7575 9 9.1504 8 21.1815 8 21.0 7)
Average genome size in population (length): 70.187
Average program size in population (points): 71.187
Average percent parens in population: 0.014
Minimum age in population: 70.61397087641141
Maximum age in population: 75.5497460451936
Average age in population: 73.55743554378908
Median age in population: 73.61461766909034
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 76
Genome diversity (% unique Plush genomes):	 0.719
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 76
Syntactic diversity (% unique Push programs):	 0.719
Total error diversity:				 0.258
Error (vector) diversity:			 0.264
Behavioral diversity:				 0.266
--- Run Statistics ---
Number of program evaluations used so far: 52000
Number of point (instruction) evaluations so far: 71126440
--- Timings ---
Current time: 1529615079855 milliseconds
Total Time:         185.9 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        80.0 seconds, 43.0%
Fitness Testing:     83.5 seconds, 44.9%
Report:              22.2 seconds, 12.0%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 51
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 52
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 52
;;******************************
;; -*- Number IO problem report - generation 52
Test total error for best: 59669.73249999999
Test mean error for best: 29.83487
;;------------------------------
Outputs of best individual on training cases:
Correct output: -116.076402553 | Program output: -41.0401600   
Correct output: 24.1400847456  | Program output: -10.07181     
Correct output: 69.833290954   | Program output: 20.0219261    
Correct output: 82.4958592801  | Program output: 94.015857375  
Correct output: 34.2385110874  | Program output: 81.02551368   
Correct output: -10.7358110665 | Program output: 47.048110592  
Correct output: 1.9700532093   | Program output: -11.050100    
Correct output: -44.7956976677 | Program output: 51.052140608  
Correct output: 68.5576547673  | Program output: 46.047103823  
Correct output: -69.2536523379 | Program output: -54.0192809   
Correct output: -14.2275745396 | Program output: 41.04274088   
Correct output: -171.9767905886 | Program output: -85.0767056   
Correct output: -32.1846093265 | Program output: 1.024         
Correct output: 66.9812146721  | Program output: 73.074405224  
Correct output: 100.0259781081 | Program output: 34.03542875   
Correct output: -90.2595503995 | Program output: -34.0791089   
Correct output: -82.4635707651 | Program output: -96.0659025   
Correct output: -8.7492896214  | Program output: -50.0312401   
Correct output: -82.1329348831 | Program output: -82.0796561   
Correct output: 24.5261129925  | Program output: -73.0405184   
Correct output: -11.4065589042 | Program output: -53.0602704   
Correct output: 10.3282540908  | Program output: -77.045776    
Correct output: -51.7760580299 | Program output: -78.0755929   
Correct output: 51.8185003253  | Program output: 74.075421875  
Correct output: 110.7431489201 | Program output: 20.0219261    
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_yankdup} {:instruction float_pop} {:instruction float_mult} {:instruction in2} {:instruction float_max} {:instruction integer_dup} {:instruction print_float} {:instruction integer_mult} {:instruction float_mult} {:instruction float_pop} {:instruction float_mult} {:instruction in2} {:instruction float_sub} {:instruction float_sub} {:instruction float_mult} {:instruction integer_dup} {:instruction integer_dup} {:instruction float_add} {:instruction integer_dec} {:instruction integer_shove} {:instruction float_mult} {:instruction float_add} {:instruction float_mult} {:instruction integer_mult} {:instruction integer_dup} {:instruction float_add} {:instruction integer_dup} {:instruction float_add} {:instruction integer_dec} {:instruction integer_mult} {:instruction float_mult} {:instruction float_pop} {:instruction float_tan} {:instruction in2} {:instruction float_max} {:instruction float_pop} {:instruction float_mult} {:instruction in2} {:instruction float_yankdup} {:instruction integer_dup} {:instruction integer_pop} {:instruction integer_dec} {:instruction float_cos} {:instruction float_frominteger} {:instruction integer_swap} {:instruction integer_mod} {:instruction integer_dup} {:instruction 80} {:instruction integer_mod} {:instruction integer_dup} {:instruction 80} {:instruction float_dup_items} {:instruction print_float} {:instruction float_frominteger} {:instruction print_integer} {:instruction integer_yankdup} {:instruction float_mult} {:instruction integer_max} {:instruction integer_stackdepth} {:instruction float_shove} {:instruction float_mult} {:instruction integer_max} {:instruction integer_stackdepth} {:instruction float_shove} {:instruction float_dup} {:instruction float_inc} {:instruction integer_mult} {:instruction integer_shove} {:instruction print_integer} {:instruction integer_flush})
Best program: (float_yankdup float_pop float_mult in2 float_max integer_dup print_float integer_mult float_mult float_pop float_mult in2 float_sub float_sub float_mult integer_dup integer_dup float_add integer_dec integer_shove float_mult float_add float_mult integer_mult integer_dup float_add integer_dup float_add integer_dec integer_mult float_mult float_pop float_tan in2 float_max float_pop float_mult in2 float_yankdup integer_dup integer_pop integer_dec float_cos float_frominteger integer_swap integer_mod integer_dup 80 integer_mod integer_dup 80 float_dup_items print_float float_frominteger print_integer integer_yankdup float_mult integer_max integer_stackdepth float_shove float_mult integer_max integer_stackdepth float_shove float_dup float_inc integer_mult integer_shove print_integer integer_flush)
Errors: [75.0362 8 34.2119 10 49.8114 10 11.52 9 46.787 9 57.7839 9 13.0202 9 95.8478 11 22.5106 10 15.2344 10 55.2703 10 86.9001 7 33.2086 11 6.0932 11 65.9905 10 56.1804 9 13.6023 8 41.282 10 0.0533 8 97.5666 12 41.6537 8 87.374 12 26.2995 8 22.2569 11 90.7212 8]
Total: 1384.2160000000003
Mean: 27.68432
Genome size: 70
Size: 71
Percent parens: 0.014
--- Population Statistics ---
Average total errors in population: 4732.152483799992
Median total errors in population: 1386.076
Error averages by case: (249.76683210000093 9.116 209.65355320000137 10.937 133.93750940000126 10.277 101.36119670000029 10.05 132.61720350000067 10.365 142.3656287999995 11.468 194.49930609999936 9.467 175.98311479999913 12.395 110.8668728999992 10.691 202.53984729999937 10.499 140.1501843000008 10.608 260.9100724999995 9.083 77.3850102999995 11.134 96.33777250000082 11.423 150.01632390000032 10.612 235.35117099999925 10.309 201.57077889999923 9.641 222.50366449999964 11.045 190.7896699999993 9.541 267.31880619999765 12.11 222.83221579999923 10.025 259.1801058000026 11.966 211.21296599999988 9.604 110.73654009999869 10.076 170.91513720000114 8.909)
Error minima by case: (35.0748 7 9.0 5 3.6567 7 2.48 6 30.2375 9 9.6886 8 0.9701 5 43.7324 9 4.9323 8 14.1844 7 13.1958 6 2.9697 7 2.0 3 5.0243 9 19.9905 8 23.2585 7 12.5364 7 8.7493 8 0.0329 7 20.5251 7 10.4883 8 6.3273 7 25.2239 7 21.1871 8 21.0 7)
Average genome size in population (length): 70.643
Average program size in population (points): 71.643
Average percent parens in population: 0.014
Minimum age in population: 71.61397087641141
Maximum age in population: 77.0337115811192
Average age in population: 74.99768500435695
Median age in population: 75.0247801758134
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 46
Genome diversity (% unique Plush genomes):	 0.75
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 46
Syntactic diversity (% unique Push programs):	 0.75
Total error diversity:				 0.263
Error (vector) diversity:			 0.271
Behavioral diversity:				 0.272
--- Run Statistics ---
Number of program evaluations used so far: 53000
Number of point (instruction) evaluations so far: 72892515
--- Timings ---
Current time: 1529615083765 milliseconds
Total Time:         189.8 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        81.5 seconds, 42.9%
Fitness Testing:     85.5 seconds, 45.0%
Report:              22.7 seconds, 12.0%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 52
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 53
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 53
;;******************************
;; -*- Number IO problem report - generation 53
Test total error for best: 59714.74090000001
Test mean error for best: 29.85737
;;------------------------------
Outputs of best individual on training cases:
Correct output: -116.076402553 | Program output: -41.0401600   
Correct output: 24.1400847456  | Program output: -10.07181     
Correct output: 69.833290954   | Program output: 20.0219240    
Correct output: 82.4958592801  | Program output: 94.015857280  
Correct output: 34.2385110874  | Program output: 81.02551286   
Correct output: -10.7358110665 | Program output: 47.048110544  
Correct output: 1.9700532093   | Program output: -11.050100    
Correct output: -44.7956976677 | Program output: 51.052140556  
Correct output: 68.5576547673  | Program output: 46.047103776  
Correct output: -69.2536523379 | Program output: -54.0192809   
Correct output: -14.2275745396 | Program output: 41.04274046   
Correct output: -171.9767905886 | Program output: -85.0767056   
Correct output: -32.1846093265 | Program output: 1.024         
Correct output: 66.9812146721  | Program output: 73.074405150  
Correct output: 100.0259781081 | Program output: 34.03542840   
Correct output: -90.2595503995 | Program output: -34.0791089   
Correct output: -82.4635707651 | Program output: -96.0659025   
Correct output: -8.7492896214  | Program output: -50.0312401   
Correct output: -82.1329348831 | Program output: -82.0796561   
Correct output: 24.5261129925  | Program output: -73.0405184   
Correct output: -11.4065589042 | Program output: -53.0602704   
Correct output: 10.3282540908  | Program output: -77.045776    
Correct output: -51.7760580299 | Program output: -78.0755929   
Correct output: 51.8185003253  | Program output: 74.075421800  
Correct output: 110.7431489201 | Program output: 20.0219240    
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_yankdup} {:instruction float_pop} {:instruction float_mult} {:instruction in2} {:instruction float_max} {:instruction integer_dup} {:instruction print_float} {:instruction integer_mult} {:instruction float_mult} {:instruction float_pop} {:instruction float_mult} {:instruction in2} {:instruction float_sub} {:instruction float_sub} {:instruction float_mult} {:instruction integer_dup} {:instruction integer_dup} {:instruction float_add} {:instruction integer_dec} {:instruction integer_shove} {:instruction float_mult} {:instruction float_add} {:instruction float_mult} {:instruction integer_mult} {:instruction integer_dup} {:instruction float_add} {:instruction integer_dup} {:instruction float_add} {:instruction integer_dec} {:instruction integer_mult} {:instruction float_mult} {:instruction float_pop} {:instruction float_tan} {:instruction in2} {:instruction float_max} {:instruction float_pop} {:instruction float_mult} {:instruction in2} {:instruction float_yankdup} {:instruction integer_dup} {:instruction integer_pop} {:instruction integer_dec} {:instruction float_cos} {:instruction float_frominteger} {:instruction integer_swap} {:instruction integer_mod} {:instruction integer_dup} {:instruction 80} {:instruction integer_mod} {:instruction integer_dup} {:instruction 80} {:instruction float_dup_items} {:instruction print_float} {:instruction float_frominteger} {:instruction print_integer} {:instruction integer_sub} {:instruction float_mult} {:instruction integer_max} {:instruction integer_stackdepth} {:instruction float_shove} {:instruction float_mult} {:instruction integer_max} {:instruction integer_stackdepth} {:instruction float_shove} {:instruction float_dup} {:instruction float_inc} {:instruction integer_mult} {:instruction integer_shove} {:instruction print_integer} {:instruction integer_flush})
Best program: (float_yankdup float_pop float_mult in2 float_max integer_dup print_float integer_mult float_mult float_pop float_mult in2 float_sub float_sub float_mult integer_dup integer_dup float_add integer_dec integer_shove float_mult float_add float_mult integer_mult integer_dup float_add integer_dup float_add integer_dec integer_mult float_mult float_pop float_tan in2 float_max float_pop float_mult in2 float_yankdup integer_dup integer_pop integer_dec float_cos float_frominteger integer_swap integer_mod integer_dup 80 integer_mod integer_dup 80 float_dup_items print_float float_frominteger print_integer integer_sub float_mult integer_max integer_stackdepth float_shove float_mult integer_max integer_stackdepth float_shove float_dup float_inc integer_mult integer_shove print_integer integer_flush)
Errors: [75.0362 8 34.2119 10 49.8114 9 11.52 6 46.787 9 57.7839 9 13.0202 9 95.8478 12 22.5106 9 15.2344 10 55.2703 9 86.9001 7 33.2086 11 6.0932 12 65.9905 9 56.1804 9 13.6023 8 41.282 10 0.0533 8 97.5666 12 41.6537 8 87.374 12 26.2995 8 22.2569 11 90.7212 9]
Total: 1380.2160000000003
Mean: 27.60432
Genome size: 70
Size: 71
Percent parens: 0.014
--- Population Statistics ---
Average total errors in population: 4492.012891399994
Median total errors in population: 1388.0783000000001
Error averages by case: (229.44517010000115 9.115 186.07047410000033 10.71 138.84078510000128 10.237 106.84901120000063 10.063 134.06853650000008 10.104 147.91022209999937 11.065 169.05951519999914 9.39 182.20356109999912 12.14 116.94834499999904 10.654 179.9460514999993 10.604 145.7163195000006 10.635 240.05273049999926 9.069 69.08450849999993 11.189 102.56160590000076 11.326 155.78659560000057 10.651 213.7319416000002 10.244 178.99051439999903 9.594 201.34598320000052 10.955 169.86836199999996 9.427 245.5018508999981 12.178 200.77740929999916 9.799 237.07877400000288 12.051 187.9832680999993 9.532 116.76797109999853 10.37 175.37038490000077 8.951)
Error minima by case: (35.0604 7 4.1191 8 2.5601 6 2.4873 6 23.2081 8 9.6873 6 0.92 7 43.743 6 3.8357 6 14.1839 8 13.1853 6 2.9062 7 2.0 3 5.0188 8 20.0217 7 23.2487 9 12.5374 8 7.7334 9 0.0523 7 1.5021 8 10.3191 7 6.3077 8 25.2249 8 20.5749 8 10.2569 7)
Average genome size in population (length): 70.917
Average program size in population (points): 71.917
Average percent parens in population: 0.014
Minimum age in population: 72.61397087641141
Maximum age in population: 78.66231336874888
Average age in population: 76.40111559200422
Median age in population: 76.45807379599782
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 78
Genome diversity (% unique Plush genomes):	 0.752
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 78
Syntactic diversity (% unique Push programs):	 0.752
Total error diversity:				 0.305
Error (vector) diversity:			 0.314
Behavioral diversity:				 0.314
--- Run Statistics ---
Number of program evaluations used so far: 54000
Number of point (instruction) evaluations so far: 74665465
--- Timings ---
Current time: 1529615087639 milliseconds
Total Time:         193.7 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        83.0 seconds, 42.8%
Fitness Testing:     87.5 seconds, 45.1%
Report:              23.2 seconds, 12.0%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 53
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 54
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 54
;;******************************
;; -*- Number IO problem report - generation 54
Test total error for best: 59714.74090000001
Test mean error for best: 29.85737
;;------------------------------
Outputs of best individual on training cases:
Correct output: -116.076402553 | Program output: -41.0401600   
Correct output: 24.1400847456  | Program output: -10.07181     
Correct output: 69.833290954   | Program output: 20.0219240    
Correct output: 82.4958592801  | Program output: 94.015857280  
Correct output: 34.2385110874  | Program output: 81.02551286   
Correct output: -10.7358110665 | Program output: 47.048110544  
Correct output: 1.9700532093   | Program output: -11.050100    
Correct output: -44.7956976677 | Program output: 51.052140556  
Correct output: 68.5576547673  | Program output: 46.047103776  
Correct output: -69.2536523379 | Program output: -54.0192809   
Correct output: -14.2275745396 | Program output: 41.04274046   
Correct output: -171.9767905886 | Program output: -85.0767056   
Correct output: -32.1846093265 | Program output: 1.024         
Correct output: 66.9812146721  | Program output: 73.074405150  
Correct output: 100.0259781081 | Program output: 34.03542840   
Correct output: -90.2595503995 | Program output: -34.0791089   
Correct output: -82.4635707651 | Program output: -96.0659025   
Correct output: -8.7492896214  | Program output: -50.0312401   
Correct output: -82.1329348831 | Program output: -82.0796561   
Correct output: 24.5261129925  | Program output: -73.0405184   
Correct output: -11.4065589042 | Program output: -53.0602704   
Correct output: 10.3282540908  | Program output: -77.045776    
Correct output: -51.7760580299 | Program output: -78.0755929   
Correct output: 51.8185003253  | Program output: 74.075421800  
Correct output: 110.7431489201 | Program output: 20.0219240    
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_yankdup} {:instruction float_pop} {:instruction float_mult} {:instruction in2} {:instruction float_max} {:instruction integer_dup} {:instruction print_float} {:instruction integer_mult} {:instruction float_mult} {:instruction float_pop} {:instruction float_mult} {:instruction in2} {:instruction float_sub} {:instruction float_sub} {:instruction float_mult} {:instruction integer_dup} {:instruction integer_dup} {:instruction float_add} {:instruction integer_dec} {:instruction integer_shove} {:instruction float_mult} {:instruction float_add} {:instruction float_mult} {:instruction integer_mult} {:instruction integer_dup} {:instruction float_add} {:instruction integer_dup} {:instruction float_add} {:instruction integer_dec} {:instruction integer_mult} {:instruction float_mult} {:instruction float_pop} {:instruction float_tan} {:instruction in2} {:instruction float_max} {:instruction float_pop} {:instruction float_mult} {:instruction in2} {:instruction float_yankdup} {:instruction integer_dup} {:instruction integer_pop} {:instruction integer_dec} {:instruction float_cos} {:instruction float_frominteger} {:instruction integer_swap} {:instruction integer_mod} {:instruction integer_dup} {:instruction 80} {:instruction integer_mod} {:instruction integer_dup} {:instruction 80} {:instruction float_dup_items} {:instruction print_float} {:instruction float_frominteger} {:instruction print_integer} {:instruction integer_sub} {:instruction float_mult} {:instruction integer_max} {:instruction integer_stackdepth} {:instruction float_shove} {:instruction float_mult} {:instruction integer_max} {:instruction integer_stackdepth} {:instruction float_shove} {:instruction float_dup} {:instruction float_inc} {:instruction integer_mult} {:instruction integer_shove} {:instruction print_integer} {:instruction integer_flush})
Best program: (float_yankdup float_pop float_mult in2 float_max integer_dup print_float integer_mult float_mult float_pop float_mult in2 float_sub float_sub float_mult integer_dup integer_dup float_add integer_dec integer_shove float_mult float_add float_mult integer_mult integer_dup float_add integer_dup float_add integer_dec integer_mult float_mult float_pop float_tan in2 float_max float_pop float_mult in2 float_yankdup integer_dup integer_pop integer_dec float_cos float_frominteger integer_swap integer_mod integer_dup 80 integer_mod integer_dup 80 float_dup_items print_float float_frominteger print_integer integer_sub float_mult integer_max integer_stackdepth float_shove float_mult integer_max integer_stackdepth float_shove float_dup float_inc integer_mult integer_shove print_integer integer_flush)
Errors: [75.0362 8 34.2119 10 49.8114 9 11.52 6 46.787 9 57.7839 9 13.0202 9 95.8478 12 22.5106 9 15.2344 10 55.2703 9 86.9001 7 33.2086 11 6.0932 12 65.9905 9 56.1804 9 13.6023 8 41.282 10 0.0533 8 97.5666 12 41.6537 8 87.374 12 26.2995 8 22.2569 11 90.7212 9]
Total: 1380.2160000000003
Mean: 27.60432
Genome size: 70
Size: 71
Percent parens: 0.014
--- Population Statistics ---
Average total errors in population: 3798.1945609999993
Median total errors in population: 1386.076
Error averages by case: (202.7357359000011 8.793 153.63342159999877 10.326 111.18117730000101 10.152 78.1057864999998 9.851 108.1527253999986 9.717 119.22574449999888 10.38 136.6099482999994 9.303 155.55986689999963 11.742 87.09865339999945 10.361 151.3126618999991 10.491 116.89841540000033 10.557 213.9237268999995 8.675 60.32616749999978 11.16 73.42510200000083 11.191 127.17386080000026 10.561 186.36896050000104 9.906 150.27647689999898 9.192 172.27691200000194 10.615 138.82838639999972 8.827 219.78599359999876 12.214 172.68624509999842 9.162 211.05640490000215 12.123 160.2921876999984 9.133 88.12074799999897 10.722 149.1682516000002 8.817)
Error minima by case: (54.7953 7 5.7243 9 9.176 8 2.3999 6 4.3742 9 9.6877 7 0.9691 7 15.5777 10 10.4434 9 7.9726 8 13.1848 7 85.9001 6 28.1888 6 5.0242 9 19.9906 9 28.9785 9 12.5364 8 7.718 8 0.0329 7 5.3382 9 10.3463 7 3.9545 9 8.5974 7 21.187 8 10.2569 7)
Average genome size in population (length): 71.378
Average program size in population (points): 72.378
Average percent parens in population: 0.014
Minimum age in population: 75.59774437457254
Maximum age in population: 79.92715417374029
Average age in population: 77.8375034648788
Median age in population: 77.88498697030616
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 118
Genome diversity (% unique Plush genomes):	 0.71
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 118
Syntactic diversity (% unique Push programs):	 0.71
Total error diversity:				 0.271
Error (vector) diversity:			 0.276
Behavioral diversity:				 0.277
--- Run Statistics ---
Number of program evaluations used so far: 55000
Number of point (instruction) evaluations so far: 76449915
--- Timings ---
Current time: 1529615091437 milliseconds
Total Time:         197.5 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        84.4 seconds, 42.7%
Fitness Testing:     89.4 seconds, 45.3%
Report:              23.6 seconds, 12.0%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 54
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 55
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 55
;;******************************
;; -*- Number IO problem report - generation 55
Test total error for best: 59714.74090000001
Test mean error for best: 29.85737
;;------------------------------
Outputs of best individual on training cases:
Correct output: -116.076402553 | Program output: -41.0401600   
Correct output: 24.1400847456  | Program output: -10.07181     
Correct output: 69.833290954   | Program output: 20.0219240    
Correct output: 82.4958592801  | Program output: 94.015857280  
Correct output: 34.2385110874  | Program output: 81.02551286   
Correct output: -10.7358110665 | Program output: 47.048110544  
Correct output: 1.9700532093   | Program output: -11.050100    
Correct output: -44.7956976677 | Program output: 51.052140556  
Correct output: 68.5576547673  | Program output: 46.047103776  
Correct output: -69.2536523379 | Program output: -54.0192809   
Correct output: -14.2275745396 | Program output: 41.04274046   
Correct output: -171.9767905886 | Program output: -85.0767056   
Correct output: -32.1846093265 | Program output: 1.024         
Correct output: 66.9812146721  | Program output: 73.074405150  
Correct output: 100.0259781081 | Program output: 34.03542840   
Correct output: -90.2595503995 | Program output: -34.0791089   
Correct output: -82.4635707651 | Program output: -96.0659025   
Correct output: -8.7492896214  | Program output: -50.0312401   
Correct output: -82.1329348831 | Program output: -82.0796561   
Correct output: 24.5261129925  | Program output: -73.0405184   
Correct output: -11.4065589042 | Program output: -53.0602704   
Correct output: 10.3282540908  | Program output: -77.045776    
Correct output: -51.7760580299 | Program output: -78.0755929   
Correct output: 51.8185003253  | Program output: 74.075421800  
Correct output: 110.7431489201 | Program output: 20.0219240    
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_yankdup} {:instruction float_pop} {:instruction float_mult} {:instruction in2} {:instruction float_max} {:instruction integer_dup} {:instruction print_float} {:instruction integer_mult} {:instruction float_mult} {:instruction float_pop} {:instruction float_mult} {:instruction in2} {:instruction float_sub} {:instruction float_sub} {:instruction float_mult} {:instruction integer_dup} {:instruction integer_dup} {:instruction float_add} {:instruction integer_dec} {:instruction integer_shove} {:instruction float_mult} {:instruction float_add} {:instruction float_mult} {:instruction integer_mult} {:instruction integer_dup} {:instruction float_add} {:instruction integer_dup} {:instruction float_add} {:instruction integer_dec} {:instruction integer_mult} {:instruction float_mult} {:instruction float_pop} {:instruction float_tan} {:instruction in2} {:instruction float_max} {:instruction float_pop} {:instruction float_mult} {:instruction in2} {:instruction float_yankdup} {:instruction integer_dup} {:instruction integer_pop} {:instruction integer_dec} {:instruction float_cos} {:instruction float_frominteger} {:instruction integer_swap} {:instruction integer_mod} {:instruction integer_dup} {:instruction 80} {:instruction integer_mod} {:instruction integer_dup} {:instruction 80} {:instruction float_dup_items} {:instruction print_float} {:instruction float_frominteger} {:instruction print_integer} {:instruction integer_sub} {:instruction float_mult} {:instruction integer_max} {:instruction integer_stackdepth} {:instruction float_shove} {:instruction float_mult} {:instruction integer_max} {:instruction integer_stackdepth} {:instruction float_shove} {:instruction float_dup} {:instruction float_inc} {:instruction integer_mult} {:instruction integer_shove} {:instruction print_integer} {:instruction integer_flush})
Best program: (float_yankdup float_pop float_mult in2 float_max integer_dup print_float integer_mult float_mult float_pop float_mult in2 float_sub float_sub float_mult integer_dup integer_dup float_add integer_dec integer_shove float_mult float_add float_mult integer_mult integer_dup float_add integer_dup float_add integer_dec integer_mult float_mult float_pop float_tan in2 float_max float_pop float_mult in2 float_yankdup integer_dup integer_pop integer_dec float_cos float_frominteger integer_swap integer_mod integer_dup 80 integer_mod integer_dup 80 float_dup_items print_float float_frominteger print_integer integer_sub float_mult integer_max integer_stackdepth float_shove float_mult integer_max integer_stackdepth float_shove float_dup float_inc integer_mult integer_shove print_integer integer_flush)
Errors: [75.0362 8 34.2119 10 49.8114 9 11.52 6 46.787 9 57.7839 9 13.0202 9 95.8478 12 22.5106 9 15.2344 10 55.2703 9 86.9001 7 33.2086 11 6.0932 12 65.9905 9 56.1804 9 13.6023 8 41.282 10 0.0533 8 97.5666 12 41.6537 8 87.374 12 26.2995 8 22.2569 11 90.7212 9]
Total: 1380.2160000000003
Mean: 27.60432
Genome size: 70
Size: 71
Percent parens: 0.014
--- Population Statistics ---
Average total errors in population: 4382.441435799994
Median total errors in population: 1388.2184000000004
Error averages by case: (228.280282100001 8.873 184.0074886999985 10.24 132.84358650000107 10.197 100.00969830000017 9.921 125.16348449999823 9.731 140.4486646999993 10.384 166.87071259999928 9.332 175.07735889999958 11.795 109.02279859999926 10.36 178.63190129999907 10.598 138.23004620000043 10.636 238.70968079999946 8.772 61.25152119999983 11.165 94.46725130000083 11.23 148.83087930000067 10.666 212.47741830000166 9.986 177.5217959999992 9.286 199.30432290000238 10.646 166.41030159999957 8.848 245.65356829999843 12.298 199.64061689999838 9.198 237.18742140000234 12.249 187.55092189999814 9.222 109.3379217999989 10.891 170.03079169999998 8.957)
Error minima by case: (35.0748 7 5.2122 6 10.176 6 2.4806 6 15.3106 9 9.731 6 0.9701 6 43.7905 6 11.4434 6 14.2344 8 13.2234 6 2.9697 7 2.0 4 5.0928 9 19.9906 7 23.2585 7 12.5364 8 7.7469 8 0.0329 6 5.5982 8 10.4039 8 5.3263 8 25.2239 7 21.2565 8 21.0 7)
Average genome size in population (length): 71.819
Average program size in population (points): 72.819
Average percent parens in population: 0.014
Minimum age in population: 76.7454289498253
Maximum age in population: 81.20890095205453
Average age in population: 79.3444100745651
Median age in population: 79.39733760426957
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 83
Genome diversity (% unique Plush genomes):	 0.756
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 83
Syntactic diversity (% unique Push programs):	 0.756
Total error diversity:				 0.271
Error (vector) diversity:			 0.276
Behavioral diversity:				 0.276
--- Run Statistics ---
Number of program evaluations used so far: 56000
Number of point (instruction) evaluations so far: 78245390
--- Timings ---
Current time: 1529615095346 milliseconds
Total Time:         201.4 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        85.9 seconds, 42.6%
Fitness Testing:     91.3 seconds, 45.3%
Report:              24.1 seconds, 12.0%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 55
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 56
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 56
;;******************************
;; -*- Number IO problem report - generation 56
Test total error for best: 59714.74090000001
Test mean error for best: 29.85737
;;------------------------------
Outputs of best individual on training cases:
Correct output: -116.076402553 | Program output: -41.0401600   
Correct output: 24.1400847456  | Program output: -10.07181     
Correct output: 69.833290954   | Program output: 20.0219240    
Correct output: 82.4958592801  | Program output: 94.015857280  
Correct output: 34.2385110874  | Program output: 81.02551286   
Correct output: -10.7358110665 | Program output: 47.048110544  
Correct output: 1.9700532093   | Program output: -11.050100    
Correct output: -44.7956976677 | Program output: 51.052140556  
Correct output: 68.5576547673  | Program output: 46.047103776  
Correct output: -69.2536523379 | Program output: -54.0192809   
Correct output: -14.2275745396 | Program output: 41.04274046   
Correct output: -171.9767905886 | Program output: -85.0767056   
Correct output: -32.1846093265 | Program output: 1.024         
Correct output: 66.9812146721  | Program output: 73.074405150  
Correct output: 100.0259781081 | Program output: 34.03542840   
Correct output: -90.2595503995 | Program output: -34.0791089   
Correct output: -82.4635707651 | Program output: -96.0659025   
Correct output: -8.7492896214  | Program output: -50.0312401   
Correct output: -82.1329348831 | Program output: -82.0796561   
Correct output: 24.5261129925  | Program output: -73.0405184   
Correct output: -11.4065589042 | Program output: -53.0602704   
Correct output: 10.3282540908  | Program output: -77.045776    
Correct output: -51.7760580299 | Program output: -78.0755929   
Correct output: 51.8185003253  | Program output: 74.075421800  
Correct output: 110.7431489201 | Program output: 20.0219240    
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_yankdup} {:instruction float_yankdup} {:instruction float_pop} {:instruction float_mult} {:instruction in2} {:instruction float_max} {:instruction integer_dup} {:instruction print_float} {:instruction integer_mult} {:instruction float_mult} {:instruction float_pop} {:instruction float_mult} {:instruction in2} {:instruction float_sub} {:instruction float_sub} {:instruction float_mult} {:instruction integer_dup} {:instruction integer_dup} {:instruction float_add} {:instruction integer_dec} {:instruction integer_shove} {:instruction float_mult} {:instruction float_add} {:instruction float_mult} {:instruction integer_mult} {:instruction integer_dup} {:instruction float_add} {:instruction integer_dup} {:instruction float_add} {:instruction integer_dec} {:instruction integer_mult} {:instruction float_mult} {:instruction float_pop} {:instruction float_tan} {:instruction in2} {:instruction float_max} {:instruction float_pop} {:instruction float_mult} {:instruction in2} {:instruction float_yankdup} {:instruction integer_dup} {:instruction integer_pop} {:instruction integer_dec} {:instruction float_cos} {:instruction float_frominteger} {:instruction integer_swap} {:instruction integer_mod} {:instruction integer_dup} {:instruction 80} {:instruction integer_mod} {:instruction integer_dup} {:instruction 80} {:instruction float_dup_items} {:instruction print_float} {:instruction float_frominteger} {:instruction print_integer} {:instruction integer_sub} {:instruction float_mult} {:instruction integer_max} {:instruction integer_stackdepth} {:instruction float_shove} {:instruction float_mult} {:instruction integer_max} {:instruction integer_stackdepth} {:instruction float_shove} {:instruction float_dup} {:instruction float_inc} {:instruction integer_mult} {:instruction integer_shove} {:instruction print_integer} {:instruction integer_flush})
Best program: (float_yankdup float_yankdup float_pop float_mult in2 float_max integer_dup print_float integer_mult float_mult float_pop float_mult in2 float_sub float_sub float_mult integer_dup integer_dup float_add integer_dec integer_shove float_mult float_add float_mult integer_mult integer_dup float_add integer_dup float_add integer_dec integer_mult float_mult float_pop float_tan in2 float_max float_pop float_mult in2 float_yankdup integer_dup integer_pop integer_dec float_cos float_frominteger integer_swap integer_mod integer_dup 80 integer_mod integer_dup 80 float_dup_items print_float float_frominteger print_integer integer_sub float_mult integer_max integer_stackdepth float_shove float_mult integer_max integer_stackdepth float_shove float_dup float_inc integer_mult integer_shove print_integer integer_flush)
Errors: [75.0362 8 34.2119 10 49.8114 9 11.52 6 46.787 9 57.7839 9 13.0202 9 95.8478 12 22.5106 9 15.2344 10 55.2703 9 86.9001 7 33.2086 11 6.0932 12 65.9905 9 56.1804 9 13.6023 8 41.282 10 0.0533 8 97.5666 12 41.6537 8 87.374 12 26.2995 8 22.2569 11 90.7212 9]
Total: 1380.2160000000003
Mean: 27.60432
Genome size: 71
Size: 72
Percent parens: 0.014
--- Population Statistics ---
Average total errors in population: 4042.6765803
Median total errors in population: 1384.6647000000003
Error averages by case: (210.07255140000106 8.829 161.07532969999852 10.242 123.72083480000116 10.085 91.15585580000057 9.621 121.84596289999833 9.652 132.3753321999989 10.28 143.72188609999958 9.29 167.41908709999942 11.783 100.41211939999907 10.29 159.27166069999905 10.615 130.06061260000055 10.533 221.14995219999952 8.761 61.04568619999977 11.182 85.77316500000077 11.245 140.11799050000056 10.515 193.93409350000195 9.927 158.5145499999991 9.241 180.60221040000218 10.618 147.02569229999946 8.822 228.2681203999984 12.291 181.01832549999853 9.097 219.63189070000243 12.201 168.7464250999982 9.163 100.41544509999852 10.843 161.2148007000001 8.961)
Error minima by case: (74.0362 7 2.8192 9 2.8124 8 2.4959 5 12.9176 9 5.2652 9 1.9656 7 28.7947 11 1.5115 8 14.2344 8 1.7734 9 85.9001 7 16.1822 10 0.0919 9 20.026 9 55.1804 9 12.5364 8 7.2517 8 0.0523 7 3.2052 9 4.5944 8 1.3263 8 25.2239 7 15.2557 8 30.7431 8)
Average genome size in population (length): 71.714
Average program size in population (points): 72.714
Average percent parens in population: 0.014
Minimum age in population: 78.56160701566228
Maximum age in population: 82.4910683454922
Average age in population: 80.73056399076492
Median age in population: 80.77690037177373
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 49
Genome diversity (% unique Plush genomes):	 0.757
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 49
Syntactic diversity (% unique Push programs):	 0.757
Total error diversity:				 0.268
Error (vector) diversity:			 0.271
Behavioral diversity:				 0.271
--- Run Statistics ---
Number of program evaluations used so far: 57000
Number of point (instruction) evaluations so far: 80038240
--- Timings ---
Current time: 1529615099260 milliseconds
Total Time:         205.3 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        87.3 seconds, 42.5%
Fitness Testing:     93.3 seconds, 45.5%
Report:              24.6 seconds, 12.0%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 56
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 57
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 57
;;******************************
;; -*- Number IO problem report - generation 57
Test total error for best: 59714.74090000001
Test mean error for best: 29.85737
;;------------------------------
Outputs of best individual on training cases:
Correct output: -116.076402553 | Program output: -41.0401600   
Correct output: 24.1400847456  | Program output: -10.07181     
Correct output: 69.833290954   | Program output: 20.0219240    
Correct output: 82.4958592801  | Program output: 94.015857280  
Correct output: 34.2385110874  | Program output: 81.02551286   
Correct output: -10.7358110665 | Program output: 47.048110544  
Correct output: 1.9700532093   | Program output: -11.050100    
Correct output: -44.7956976677 | Program output: 51.052140556  
Correct output: 68.5576547673  | Program output: 46.047103776  
Correct output: -69.2536523379 | Program output: -54.0192809   
Correct output: -14.2275745396 | Program output: 41.04274046   
Correct output: -171.9767905886 | Program output: -85.0767056   
Correct output: -32.1846093265 | Program output: 1.024         
Correct output: 66.9812146721  | Program output: 73.074405150  
Correct output: 100.0259781081 | Program output: 34.03542840   
Correct output: -90.2595503995 | Program output: -34.0791089   
Correct output: -82.4635707651 | Program output: -96.0659025   
Correct output: -8.7492896214  | Program output: -50.0312401   
Correct output: -82.1329348831 | Program output: -82.0796561   
Correct output: 24.5261129925  | Program output: -73.0405184   
Correct output: -11.4065589042 | Program output: -53.0602704   
Correct output: 10.3282540908  | Program output: -77.045776    
Correct output: -51.7760580299 | Program output: -78.0755929   
Correct output: 51.8185003253  | Program output: 74.075421800  
Correct output: 110.7431489201 | Program output: 20.0219240    
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_yankdup} {:instruction float_pop} {:instruction float_mult} {:instruction in2} {:instruction float_max} {:instruction integer_dup} {:instruction print_float} {:instruction integer_mult} {:instruction float_mult} {:instruction float_pop} {:instruction float_mult} {:instruction in2} {:instruction float_sub} {:instruction float_sub} {:instruction float_mult} {:instruction integer_dup} {:instruction integer_dup} {:instruction float_add} {:instruction integer_dec} {:instruction integer_shove} {:instruction float_mult} {:instruction float_add} {:instruction float_mult} {:instruction integer_mult} {:instruction integer_dup} {:instruction float_add} {:instruction integer_dup} {:instruction float_add} {:instruction integer_dec} {:instruction integer_mult} {:instruction float_mult} {:instruction float_pop} {:instruction float_tan} {:instruction in2} {:instruction float_max} {:instruction integer_fromfloat} {:instruction float_mult} {:instruction in2} {:instruction float_yankdup} {:instruction integer_dup} {:instruction integer_pop} {:instruction integer_dec} {:instruction float_cos} {:instruction float_frominteger} {:instruction integer_swap} {:instruction integer_mod} {:instruction integer_dup} {:instruction 80} {:instruction integer_mod} {:instruction integer_dup} {:instruction 80} {:instruction float_dup_items} {:instruction print_float} {:instruction float_frominteger} {:instruction print_integer} {:instruction integer_sub} {:instruction float_mult} {:instruction integer_max} {:instruction integer_stackdepth} {:instruction float_shove} {:instruction float_mult} {:instruction integer_max} {:instruction integer_stackdepth} {:instruction float_shove} {:instruction float_dup} {:instruction float_inc} {:instruction integer_mult} {:instruction integer_shove} {:instruction print_integer} {:instruction integer_flush})
Best program: (float_yankdup float_pop float_mult in2 float_max integer_dup print_float integer_mult float_mult float_pop float_mult in2 float_sub float_sub float_mult integer_dup integer_dup float_add integer_dec integer_shove float_mult float_add float_mult integer_mult integer_dup float_add integer_dup float_add integer_dec integer_mult float_mult float_pop float_tan in2 float_max integer_fromfloat float_mult in2 float_yankdup integer_dup integer_pop integer_dec float_cos float_frominteger integer_swap integer_mod integer_dup 80 integer_mod integer_dup 80 float_dup_items print_float float_frominteger print_integer integer_sub float_mult integer_max integer_stackdepth float_shove float_mult integer_max integer_stackdepth float_shove float_dup float_inc integer_mult integer_shove print_integer integer_flush)
Errors: [75.0362 8 34.2119 10 49.8114 9 11.52 6 46.787 9 57.7839 9 13.0202 9 95.8478 12 22.5106 9 15.2344 10 55.2703 9 86.9001 7 33.2086 11 6.0932 12 65.9905 9 56.1804 9 13.6023 8 41.282 10 0.0533 8 97.5666 12 41.6537 8 87.374 12 26.2995 8 22.2569 11 90.7212 9]
Total: 1380.2160000000003
Mean: 27.60432
Genome size: 70
Size: 71
Percent parens: 0.014
--- Population Statistics ---
Average total errors in population: 4670.305837899998
Median total errors in population: 1388.2184000000004
Error averages by case: (241.5815556000011 8.939 191.8229218999982 10.259 144.37481990000148 9.931 112.06867680000045 9.153 141.33969819999874 9.674 152.60013209999946 10.271 175.5820537999992 9.307 185.84231159999894 11.948 121.46841389999892 10.134 191.67377299999862 10.693 150.4042594000008 10.383 251.32627669999943 8.936 61.083926699999786 11.167 106.94018320000093 11.435 160.2799979000012 10.372 225.08520400000182 10.013 190.67865099999923 9.343 211.67952630000244 10.695 179.85488149999958 8.912 256.8843476999982 12.331 212.03761709999824 9.218 248.6174792000027 12.226 200.28596939999804 9.266 121.21131889999863 10.886 180.9278421 9.162)
Error minima by case: (20.0748 7 4.3912 9 4.8315 8 2.4873 6 5.7073 8 9.6876 9 0.9701 7 43.7433 10 3.5526 8 14.1748 8 13.1854 9 75.9697 7 31.163 9 1.9802 9 20.0217 9 5.7415 8 11.6023 8 7.7377 8 0.0364 7 4.0051 10 10.3378 7 7.2425 9 24.2995 7 13.1825 9 10.2569 8)
Average genome size in population (length): 71.37
Average program size in population (points): 72.37
Average percent parens in population: 0.014
Minimum age in population: 80.02451156623968
Maximum age in population: 83.94613704468026
Average age in population: 82.10221898879016
Median age in population: 82.08449739679001
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 109
Genome diversity (% unique Plush genomes):	 0.76
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 109
Syntactic diversity (% unique Push programs):	 0.76
Total error diversity:				 0.272
Error (vector) diversity:			 0.278
Behavioral diversity:				 0.278
--- Run Statistics ---
Number of program evaluations used so far: 58000
Number of point (instruction) evaluations so far: 81822490
--- Timings ---
Current time: 1529615103273 milliseconds
Total Time:         209.2 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        88.7 seconds, 42.4%
Fitness Testing:     95.3 seconds, 45.6%
Report:              25.1 seconds, 12.0%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 57
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 58
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 58
;;******************************
;; -*- Number IO problem report - generation 58
Test total error for best: 59714.74090000001
Test mean error for best: 29.85737
;;------------------------------
Outputs of best individual on training cases:
Correct output: -116.076402553 | Program output: -41.0401600   
Correct output: 24.1400847456  | Program output: -10.07181     
Correct output: 69.833290954   | Program output: 20.0219240    
Correct output: 82.4958592801  | Program output: 94.015857280  
Correct output: 34.2385110874  | Program output: 81.02551286   
Correct output: -10.7358110665 | Program output: 47.048110544  
Correct output: 1.9700532093   | Program output: -11.050100    
Correct output: -44.7956976677 | Program output: 51.052140556  
Correct output: 68.5576547673  | Program output: 46.047103776  
Correct output: -69.2536523379 | Program output: -54.0192809   
Correct output: -14.2275745396 | Program output: 41.04274046   
Correct output: -171.9767905886 | Program output: -85.0767056   
Correct output: -32.1846093265 | Program output: 1.024         
Correct output: 66.9812146721  | Program output: 73.074405150  
Correct output: 100.0259781081 | Program output: 34.03542840   
Correct output: -90.2595503995 | Program output: -34.0791089   
Correct output: -82.4635707651 | Program output: -96.0659025   
Correct output: -8.7492896214  | Program output: -50.0312401   
Correct output: -82.1329348831 | Program output: -82.0796561   
Correct output: 24.5261129925  | Program output: -73.0405184   
Correct output: -11.4065589042 | Program output: -53.0602704   
Correct output: 10.3282540908  | Program output: -77.045776    
Correct output: -51.7760580299 | Program output: -78.0755929   
Correct output: 51.8185003253  | Program output: 74.075421800  
Correct output: 110.7431489201 | Program output: 20.0219240    
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_yankdup} {:instruction float_pop} {:instruction float_mult} {:instruction in2} {:instruction float_max} {:instruction integer_dup} {:instruction print_float} {:instruction integer_mult} {:instruction float_mult} {:instruction float_pop} {:instruction float_mult} {:instruction in2} {:instruction float_sub} {:instruction float_sub} {:instruction float_mult} {:instruction integer_dup} {:instruction integer_dup} {:instruction float_add} {:instruction integer_dec} {:instruction integer_shove} {:instruction float_mult} {:instruction float_add} {:instruction float_mult} {:instruction integer_mult} {:instruction integer_dup} {:instruction float_add} {:instruction integer_dup} {:instruction float_add} {:instruction integer_dec} {:instruction integer_mult} {:instruction float_mult} {:instruction float_pop} {:instruction float_tan} {:instruction in2} {:instruction float_max} {:instruction float_pop} {:instruction float_mult} {:instruction in2} {:instruction float_yankdup} {:instruction integer_dup} {:instruction integer_pop} {:instruction integer_dec} {:instruction float_cos} {:instruction float_frominteger} {:instruction integer_swap} {:instruction integer_mod} {:instruction integer_dup} {:instruction 80} {:instruction integer_mod} {:instruction integer_dup} {:instruction 80} {:instruction float_dup_items} {:instruction print_float} {:instruction float_frominteger} {:instruction print_integer} {:instruction integer_sub} {:instruction float_mult} {:instruction integer_max} {:instruction integer_stackdepth} {:instruction float_shove} {:instruction float_mult} {:instruction integer_max} {:instruction integer_stackdepth} {:instruction float_shove} {:instruction float_dup} {:instruction float_inc} {:instruction integer_mult} {:instruction integer_shove} {:instruction print_integer} {:instruction integer_flush})
Best program: (float_yankdup float_pop float_mult in2 float_max integer_dup print_float integer_mult float_mult float_pop float_mult in2 float_sub float_sub float_mult integer_dup integer_dup float_add integer_dec integer_shove float_mult float_add float_mult integer_mult integer_dup float_add integer_dup float_add integer_dec integer_mult float_mult float_pop float_tan in2 float_max float_pop float_mult in2 float_yankdup integer_dup integer_pop integer_dec float_cos float_frominteger integer_swap integer_mod integer_dup 80 integer_mod integer_dup 80 float_dup_items print_float float_frominteger print_integer integer_sub float_mult integer_max integer_stackdepth float_shove float_mult integer_max integer_stackdepth float_shove float_dup float_inc integer_mult integer_shove print_integer integer_flush)
Errors: [75.0362 8 34.2119 10 49.8114 9 11.52 6 46.787 9 57.7839 9 13.0202 9 95.8478 12 22.5106 9 15.2344 10 55.2703 9 86.9001 7 33.2086 11 6.0932 12 65.9905 9 56.1804 9 13.6023 8 41.282 10 0.0533 8 97.5666 12 41.6537 8 87.374 12 26.2995 8 22.2569 11 90.7212 9]
Total: 1380.2160000000003
Mean: 27.60432
Genome size: 70
Size: 71
Percent parens: 0.014
--- Population Statistics ---
Average total errors in population: 4705.065659399999
Median total errors in population: 1384.2160000000003
Error averages by case: (249.51919150000137 8.762 205.7376969999979 10.312 133.41438090000167 9.646 102.01440690000076 8.142 131.76784239999833 9.668 142.6953324999992 10.119 191.53316699999917 9.304 177.31937769999874 12.156 110.70179549999852 9.897 202.7385491999977 10.664 140.43283280000102 10.076 259.82117049999925 8.697 68.55087069999956 11.11 95.95610450000108 11.732 150.0250934000017 9.984 234.99237860000272 9.913 201.41846139999933 9.211 222.8814966000029 10.63 189.45677489999957 8.835 267.759080599998 12.318 222.80680699999803 9.009 259.2777937000034 12.136 211.63507839999764 9.119 110.56940479999811 10.982 170.33757090000012 9.281)
Error minima by case: (74.0362 7 24.9694 9 9.1837 8 3.4959 5 32.213 8 9.7435 8 1.9656 7 43.9663 10 10.4753 8 14.2264 8 13.2402 9 85.9001 7 31.1766 9 5.0188 9 21.016 9 55.1804 9 11.6023 8 7.9199 8 0.0429 7 15.4739 9 10.4883 7 6.2825 9 24.2995 8 21.1815 9 10.2569 8)
Average genome size in population (length): 71.076
Average program size in population (points): 72.076
Average percent parens in population: 0.014
Minimum age in population: 81.6997666253799
Maximum age in population: 85.54499343003204
Average age in population: 83.56597569582212
Median age in population: 83.59797202262077
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 181
Genome diversity (% unique Plush genomes):	 0.693
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 181
Syntactic diversity (% unique Push programs):	 0.693
Total error diversity:				 0.253
Error (vector) diversity:			 0.258
Behavioral diversity:				 0.258
--- Run Statistics ---
Number of program evaluations used so far: 59000
Number of point (instruction) evaluations so far: 83599390
--- Timings ---
Current time: 1529615107272 milliseconds
Total Time:         213.3 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        90.2 seconds, 42.3%
Fitness Testing:     97.3 seconds, 45.6%
Report:              25.7 seconds, 12.0%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 58
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 59
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 59
;;******************************
;; -*- Number IO problem report - generation 59
Test total error for best: 59714.73690000001
Test mean error for best: 29.85737
;;------------------------------
Outputs of best individual on training cases:
Correct output: -116.076402553 | Program output: -41.0401600   
Correct output: 24.1400847456  | Program output: -10.07181     
Correct output: 69.833290954   | Program output: 20.0219240    
Correct output: 82.4958592801  | Program output: 94.015857280  
Correct output: 34.2385110874  | Program output: 81.02551286   
Correct output: -10.7358110665 | Program output: 47.048110544  
Correct output: 1.9700532093   | Program output: -11.050100    
Correct output: -44.7956976677 | Program output: 51.052140556  
Correct output: 68.5576547673  | Program output: 46.047103776  
Correct output: -69.2536523379 | Program output: -54.0192809   
Correct output: -14.2275745396 | Program output: 41.04274046   
Correct output: -171.9767905886 | Program output: -85.0767056   
Correct output: -32.1846093265 | Program output: 1.026         
Correct output: 66.9812146721  | Program output: 73.074405150  
Correct output: 100.0259781081 | Program output: 34.03542840   
Correct output: -90.2595503995 | Program output: -34.0791089   
Correct output: -82.4635707651 | Program output: -96.0659025   
Correct output: -8.7492896214  | Program output: -50.0312401   
Correct output: -82.1329348831 | Program output: -82.0796561   
Correct output: 24.5261129925  | Program output: -73.0405184   
Correct output: -11.4065589042 | Program output: -53.0602704   
Correct output: 10.3282540908  | Program output: -77.045776    
Correct output: -51.7760580299 | Program output: -78.0755929   
Correct output: 51.8185003253  | Program output: 74.075421800  
Correct output: 110.7431489201 | Program output: 20.0219240    
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_yankdup} {:instruction float_pop} {:instruction float_mult} {:instruction in2} {:instruction float_max} {:instruction integer_dup} {:instruction print_float} {:instruction integer_mult} {:instruction float_mult} {:instruction float_pop} {:instruction float_mult} {:instruction in2} {:instruction float_sub} {:instruction float_sub} {:instruction float_mult} {:instruction integer_dup} {:instruction integer_dup} {:instruction float_add} {:instruction integer_shove} {:instruction float_mult} {:instruction float_add} {:instruction float_mult} {:instruction integer_mult} {:instruction integer_dup} {:instruction float_add} {:instruction integer_dup} {:instruction float_add} {:instruction integer_dec} {:instruction integer_mult} {:instruction float_mult} {:instruction float_pop} {:instruction float_tan} {:instruction in2} {:instruction float_max} {:instruction float_pop} {:instruction float_mult} {:instruction in2} {:instruction float_yankdup} {:instruction integer_dup} {:instruction integer_pop} {:instruction integer_dec} {:instruction float_cos} {:instruction float_frominteger} {:instruction integer_swap} {:instruction integer_mod} {:instruction integer_dup} {:instruction 80} {:instruction integer_mod} {:instruction integer_dup} {:instruction 80} {:instruction float_dup_items} {:instruction print_float} {:instruction float_frominteger} {:instruction print_integer} {:instruction integer_sub} {:instruction float_mult} {:instruction integer_max} {:instruction integer_stackdepth} {:instruction float_shove} {:instruction float_mult} {:instruction integer_max} {:instruction integer_stackdepth} {:instruction float_shove} {:instruction float_dup} {:instruction float_inc} {:instruction integer_mult} {:instruction integer_shove} {:instruction print_integer} {:instruction integer_flush})
Best program: (float_yankdup float_pop float_mult in2 float_max integer_dup print_float integer_mult float_mult float_pop float_mult in2 float_sub float_sub float_mult integer_dup integer_dup float_add integer_shove float_mult float_add float_mult integer_mult integer_dup float_add integer_dup float_add integer_dec integer_mult float_mult float_pop float_tan in2 float_max float_pop float_mult in2 float_yankdup integer_dup integer_pop integer_dec float_cos float_frominteger integer_swap integer_mod integer_dup 80 integer_mod integer_dup 80 float_dup_items print_float float_frominteger print_integer integer_sub float_mult integer_max integer_stackdepth float_shove float_mult integer_max integer_stackdepth float_shove float_dup float_inc integer_mult integer_shove print_integer integer_flush)
Errors: [75.0362 8 34.2119 10 49.8114 9 11.52 6 46.787 9 57.7839 9 13.0202 9 95.8478 12 22.5106 9 15.2344 10 55.2703 9 86.9001 7 33.2106 10 6.0932 12 65.9905 9 56.1804 9 13.6023 8 41.282 10 0.0533 8 97.5666 12 41.6537 8 87.374 12 26.2995 8 22.2569 11 90.7212 9]
Total: 1379.2180000000003
Mean: 27.58436
Genome size: 69
Size: 70
Percent parens: 0.014
--- Population Statistics ---
Average total errors in population: 4715.259144299997
Median total errors in population: 1380.2160000000003
Error averages by case: (245.17410120000133 8.808 197.2044811999982 10.302 140.3646523000016 9.529 109.10152470000082 7.926 140.12491369999938 9.599 151.41856300000015 10.103 181.58855579999937 9.29 185.7164492999985 12.152 119.86943229999858 9.786 196.0683895999976 10.689 149.15506730000095 9.958 256.35234609999935 8.84 63.91648949999973 11.122 105.61648580000094 11.711 158.6008203000021 9.882 230.58356010000227 9.954 196.1422084999994 9.346 216.42752990000258 10.661 185.60018929999953 8.9 261.60879069999834 12.271 217.42728509999816 9.106 252.7093343000026 12.126 206.03081209999783 9.224 120.00370369999837 10.852 176.9424585000002 9.374)
Error minima by case: (36.0748 4 9.0 4 9.1687 8 2.4868 6 14.2385 8 9.7435 8 1.9656 3 44.8009 9 10.4434 8 14.1748 4 13.2402 9 3.9697 4 2.0 3 5.0932 8 20.0217 8 24.2585 4 12.5364 8 8.7517 8 0.0329 4 15.4811 4 10.4883 8 5.2489 4 25.2239 7 21.2569 8 30.7339 8)
Average genome size in population (length): 70.515
Average program size in population (points): 71.515
Average percent parens in population: 0.014
Minimum age in population: 82.87490305338417
Maximum age in population: 86.76455810767658
Average age in population: 84.9498879495186
Median age in population: 84.97528008250691
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 159
Genome diversity (% unique Plush genomes):	 0.723
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 159
Syntactic diversity (% unique Push programs):	 0.723
Total error diversity:				 0.255
Error (vector) diversity:			 0.261
Behavioral diversity:				 0.261
--- Run Statistics ---
Number of program evaluations used so far: 60000
Number of point (instruction) evaluations so far: 85362265
--- Timings ---
Current time: 1529615111125 milliseconds
Total Time:         217.2 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        91.7 seconds, 42.2%
Fitness Testing:     99.3 seconds, 45.7%
Report:              26.1 seconds, 12.0%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 59
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 60
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 60
;;******************************
;; -*- Number IO problem report - generation 60
Test total error for best: 59714.73690000001
Test mean error for best: 29.85737
;;------------------------------
Outputs of best individual on training cases:
Correct output: -116.076402553 | Program output: -41.0401600   
Correct output: 24.1400847456  | Program output: -10.07181     
Correct output: 69.833290954   | Program output: 20.0219240    
Correct output: 82.4958592801  | Program output: 94.015857280  
Correct output: 34.2385110874  | Program output: 81.02551286   
Correct output: -10.7358110665 | Program output: 47.048110544  
Correct output: 1.9700532093   | Program output: -11.050100    
Correct output: -44.7956976677 | Program output: 51.052140556  
Correct output: 68.5576547673  | Program output: 46.047103776  
Correct output: -69.2536523379 | Program output: -54.0192809   
Correct output: -14.2275745396 | Program output: 41.04274046   
Correct output: -171.9767905886 | Program output: -85.0767056   
Correct output: -32.1846093265 | Program output: 1.026         
Correct output: 66.9812146721  | Program output: 73.074405150  
Correct output: 100.0259781081 | Program output: 34.03542840   
Correct output: -90.2595503995 | Program output: -34.0791089   
Correct output: -82.4635707651 | Program output: -96.0659025   
Correct output: -8.7492896214  | Program output: -50.0312401   
Correct output: -82.1329348831 | Program output: -82.0796561   
Correct output: 24.5261129925  | Program output: -73.0405184   
Correct output: -11.4065589042 | Program output: -53.0602704   
Correct output: 10.3282540908  | Program output: -77.045776    
Correct output: -51.7760580299 | Program output: -78.0755929   
Correct output: 51.8185003253  | Program output: 74.075421800  
Correct output: 110.7431489201 | Program output: 20.0219240    
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_yankdup} {:instruction float_pop} {:instruction float_mult} {:instruction in2} {:instruction float_max} {:instruction integer_dup} {:instruction print_float} {:instruction integer_mult} {:instruction float_mult} {:instruction float_pop} {:instruction float_mult} {:instruction in2} {:instruction float_sub} {:instruction float_sub} {:instruction float_mult} {:instruction integer_dup} {:instruction integer_dup} {:instruction float_add} {:instruction float_shove} {:instruction integer_shove} {:instruction float_mult} {:instruction float_add} {:instruction float_mult} {:instruction integer_mult} {:instruction integer_dup} {:instruction float_add} {:instruction integer_dup} {:instruction float_add} {:instruction integer_dec} {:instruction integer_mult} {:instruction float_mult} {:instruction float_pop} {:instruction float_tan} {:instruction in2} {:instruction float_max} {:instruction float_pop} {:instruction float_mult} {:instruction in2} {:instruction float_yankdup} {:instruction integer_dup} {:instruction integer_pop} {:instruction integer_dec} {:instruction float_cos} {:instruction float_frominteger} {:instruction integer_swap} {:instruction integer_mod} {:instruction integer_dup} {:instruction 80} {:instruction integer_mod} {:instruction integer_dup} {:instruction 80} {:instruction float_dup_items} {:instruction print_float} {:instruction float_frominteger} {:instruction print_integer} {:instruction integer_sub} {:instruction float_mult} {:instruction integer_max} {:instruction integer_stackdepth} {:instruction float_shove} {:instruction float_mult} {:instruction integer_max} {:instruction integer_stackdepth} {:instruction float_shove} {:instruction float_dup} {:instruction float_inc} {:instruction integer_mult} {:instruction integer_shove} {:instruction print_integer} {:instruction integer_flush})
Best program: (float_yankdup float_pop float_mult in2 float_max integer_dup print_float integer_mult float_mult float_pop float_mult in2 float_sub float_sub float_mult integer_dup integer_dup float_add float_shove integer_shove float_mult float_add float_mult integer_mult integer_dup float_add integer_dup float_add integer_dec integer_mult float_mult float_pop float_tan in2 float_max float_pop float_mult in2 float_yankdup integer_dup integer_pop integer_dec float_cos float_frominteger integer_swap integer_mod integer_dup 80 integer_mod integer_dup 80 float_dup_items print_float float_frominteger print_integer integer_sub float_mult integer_max integer_stackdepth float_shove float_mult integer_max integer_stackdepth float_shove float_dup float_inc integer_mult integer_shove print_integer integer_flush)
Errors: [75.0362 8 34.2119 10 49.8114 9 11.52 6 46.787 9 57.7839 9 13.0202 9 95.8478 12 22.5106 9 15.2344 10 55.2703 9 86.9001 7 33.2106 10 6.0932 12 65.9905 9 56.1804 9 13.6023 8 41.282 10 0.0533 8 97.5666 12 41.6537 8 87.374 12 26.2995 8 22.2569 11 90.7212 9]
Total: 1379.2180000000003
Mean: 27.58436
Genome size: 70
Size: 71
Percent parens: 0.014
--- Population Statistics ---
Average total errors in population: 4641.871843599997
Median total errors in population: 1380.2165000000005
Error averages by case: (246.34129100000112 8.871 199.61945999999824 10.299 132.48552410000156 9.654 101.27873200000091 8.129 131.58864509999842 9.714 141.8189925999995 10.25 184.53277499999916 9.304 176.36831489999912 12.226 110.35984749999874 9.914 198.08734679999816 10.718 139.55844630000075 10.11 257.09238009999933 8.864 68.59465589999957 11.098 96.05436710000079 11.76 149.30203430000122 10.002 231.4131147000023 10.037 197.76421479999937 9.372 217.64226490000243 10.684 186.27618399999966 8.901 263.0510559999981 12.284 218.67265059999818 9.152 254.40819600000304 12.167 206.62495759999797 9.292 110.44275249999836 10.953 169.31463979999992 9.424)
Error minima by case: (40.0 4 9.0 4 9.1711 5 2.4877 5 29.2355 8 9.7435 5 1.92 3 15.7482 5 10.4434 5 14.1739 4 13.2402 5 84.0 4 2.0 3 5.0204 9 10.6145 6 33.0 4 12.5364 7 8.7493 8 0.0523 4 19.5234 4 10.4883 8 5.3249 4 22.6901 8 21.1833 8 21.0 6)
Average genome size in population (length): 70.661
Average program size in population (points): 71.661
Average percent parens in population: 0.014
Minimum age in population: 83.87490305338417
Maximum age in population: 88.39724099103653
Average age in population: 86.35059632116896
Median age in population: 86.40695007827613
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 130
Genome diversity (% unique Plush genomes):	 0.758
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 130
Syntactic diversity (% unique Push programs):	 0.758
Total error diversity:				 0.289
Error (vector) diversity:			 0.295
Behavioral diversity:				 0.295
--- Run Statistics ---
Number of program evaluations used so far: 61000
Number of point (instruction) evaluations so far: 87128790
--- Timings ---
Current time: 1529615114892 milliseconds
Total Time:         220.9 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        93.1 seconds, 42.1%
Fitness Testing:    101.1 seconds, 45.8%
Report:              26.6 seconds, 12.0%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 60
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 61
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 61
;;******************************
;; -*- Number IO problem report - generation 61
Test total error for best: 59653.740700000024
Test mean error for best: 29.82687
;;------------------------------
Outputs of best individual on training cases:
Correct output: -116.076402553 | Program output: -41.0401600   
Correct output: 24.1400847456  | Program output: -10.07181     
Correct output: 69.833290954   | Program output: 20.0219241    
Correct output: 82.4958592801  | Program output: 94.015857281  
Correct output: 34.2385110874  | Program output: 81.02551287   
Correct output: -10.7358110665 | Program output: 47.048110545  
Correct output: 1.9700532093   | Program output: -11.050100    
Correct output: -44.7956976677 | Program output: 51.052140557  
Correct output: 68.5576547673  | Program output: 46.047103777  
Correct output: -69.2536523379 | Program output: -54.0192809   
Correct output: -14.2275745396 | Program output: 41.04274047   
Correct output: -171.9767905886 | Program output: -85.0767056   
Correct output: -32.1846093265 | Program output: 1.024         
Correct output: 66.9812146721  | Program output: 73.074405151  
Correct output: 100.0259781081 | Program output: 34.03542841   
Correct output: -90.2595503995 | Program output: -34.0791089   
Correct output: -82.4635707651 | Program output: -96.0659025   
Correct output: -8.7492896214  | Program output: -50.0312401   
Correct output: -82.1329348831 | Program output: -82.0796561   
Correct output: 24.5261129925  | Program output: -73.0405184   
Correct output: -11.4065589042 | Program output: -53.0602704   
Correct output: 10.3282540908  | Program output: -77.045776    
Correct output: -51.7760580299 | Program output: -78.0755929   
Correct output: 51.8185003253  | Program output: 74.075421801  
Correct output: 110.7431489201 | Program output: 20.0219241    
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_yankdup} {:instruction float_pop} {:instruction float_mult} {:instruction in2} {:instruction float_max} {:instruction integer_dup} {:instruction print_float} {:instruction integer_mult} {:instruction float_mult} {:instruction float_pop} {:instruction float_mult} {:instruction in2} {:instruction float_sub} {:instruction float_sub} {:instruction float_mult} {:instruction integer_dup} {:instruction integer_dup} {:instruction float_add} {:instruction integer_dec} {:instruction integer_shove} {:instruction float_mult} {:instruction float_add} {:instruction float_mult} {:instruction integer_mult} {:instruction integer_dup} {:instruction float_add} {:instruction integer_dup} {:instruction float_add} {:instruction integer_dec} {:instruction integer_mult} {:instruction float_mult} {:instruction float_pop} {:instruction float_tan} {:instruction in2} {:instruction float_max} {:instruction float_pop} {:instruction float_mult} {:instruction in2} {:instruction float_yankdup} {:instruction integer_dup} {:instruction integer_pop} {:instruction integer_dec} {:instruction float_cos} {:instruction float_frominteger} {:instruction integer_swap} {:instruction integer_mod} {:instruction integer_dup} {:instruction 80} {:instruction integer_mod} {:instruction integer_dup} {:instruction integer_dup} {:instruction float_dup_items} {:instruction print_float} {:instruction float_frominteger} {:instruction print_integer} {:instruction integer_sub} {:instruction integer_inc} {:instruction integer_max} {:instruction integer_stackdepth} {:instruction float_shove} {:instruction float_mult} {:instruction integer_max} {:instruction integer_stackdepth} {:instruction float_shove} {:instruction float_dup} {:instruction float_inc} {:instruction integer_mult} {:instruction integer_shove} {:instruction print_integer} {:instruction integer_flush})
Best program: (float_yankdup float_pop float_mult in2 float_max integer_dup print_float integer_mult float_mult float_pop float_mult in2 float_sub float_sub float_mult integer_dup integer_dup float_add integer_dec integer_shove float_mult float_add float_mult integer_mult integer_dup float_add integer_dup float_add integer_dec integer_mult float_mult float_pop float_tan in2 float_max float_pop float_mult in2 float_yankdup integer_dup integer_pop integer_dec float_cos float_frominteger integer_swap integer_mod integer_dup 80 integer_mod integer_dup integer_dup float_dup_items print_float float_frominteger print_integer integer_sub integer_inc integer_max integer_stackdepth float_shove float_mult integer_max integer_stackdepth float_shove float_dup float_inc integer_mult integer_shove print_integer integer_flush)
Errors: [75.0362 8 34.2119 10 49.8114 9 11.52 6 46.787 8 57.7839 8 13.0202 9 95.8478 11 22.5106 9 15.2344 10 55.2703 10 86.9001 7 33.2086 11 6.0932 11 65.9905 9 56.1804 9 13.6023 8 41.282 10 0.0533 8 97.5666 12 41.6537 8 87.374 12 26.2995 8 22.2569 11 90.7212 8]
Total: 1376.2160000000001
Mean: 27.52432
Genome size: 70
Size: 71
Percent parens: 0.014
--- Population Statistics ---
Average total errors in population: 4641.719616599998
Median total errors in population: 1380.2160000000003
Error averages by case: (246.18997800000113 8.751 200.81271229999803 10.319 135.58037410000153 9.529 101.52210490000053 7.845 131.2463036999984 9.627 142.61507619999935 10.088 185.06862369999922 9.302 177.12894319999907 12.177 111.48395389999884 9.765 197.72986859999807 10.65 140.35434630000063 9.952 256.70065109999945 8.807 60.79814959999969 11.095 97.11886400000085 11.74 150.5533965000012 9.886 230.69579520000246 9.933 196.66764369999945 9.267 217.5218200000027 10.635 185.8858876999996 8.818 262.4717622999982 12.291 217.8531214999982 9.039 254.24882550000285 12.145 206.27096689999811 9.189 111.4499522999986 10.91 172.6284953999999 9.362)
Error minima by case: (28.0362 7 9.0 5 9.1711 6 2.4868 5 29.1565 8 9.6877 6 0.9701 6 43.2564 6 10.4446 6 14.2177 7 13.1848 5 83.9001 6 2.0 3 5.0228 9 20.0248 7 2.1804 8 5.6023 7 7.718 8 0.0329 7 14.6911 8 6.8828 7 5.2705 8 25.2239 7 21.1857 9 21.0 7)
Average genome size in population (length): 70.604
Average program size in population (points): 71.604
Average percent parens in population: 0.014
Minimum age in population: 84.87490305338417
Maximum age in population: 89.61494845258368
Average age in population: 87.72139216877974
Median age in population: 87.76071255824795
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 103
Genome diversity (% unique Plush genomes):	 0.77
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 103
Syntactic diversity (% unique Push programs):	 0.77
Total error diversity:				 0.277
Error (vector) diversity:			 0.278
Behavioral diversity:				 0.278
--- Run Statistics ---
Number of program evaluations used so far: 62000
Number of point (instruction) evaluations so far: 88893915
--- Timings ---
Current time: 1529615118807 milliseconds
Total Time:         224.8 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        94.6 seconds, 42.1%
Fitness Testing:    103.1 seconds, 45.8%
Report:              27.1 seconds, 12.0%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 61
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 62
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 62
;;******************************
;; -*- Number IO problem report - generation 62
Test total error for best: 59653.740700000024
Test mean error for best: 29.82687
;;------------------------------
Outputs of best individual on training cases:
Correct output: -116.076402553 | Program output: -41.0401600   
Correct output: 24.1400847456  | Program output: -10.07181     
Correct output: 69.833290954   | Program output: 20.0219241    
Correct output: 82.4958592801  | Program output: 94.015857281  
Correct output: 34.2385110874  | Program output: 81.02551287   
Correct output: -10.7358110665 | Program output: 47.048110545  
Correct output: 1.9700532093   | Program output: -11.050100    
Correct output: -44.7956976677 | Program output: 51.052140557  
Correct output: 68.5576547673  | Program output: 46.047103777  
Correct output: -69.2536523379 | Program output: -54.0192809   
Correct output: -14.2275745396 | Program output: 41.04274047   
Correct output: -171.9767905886 | Program output: -85.0767056   
Correct output: -32.1846093265 | Program output: 1.024         
Correct output: 66.9812146721  | Program output: 73.074405151  
Correct output: 100.0259781081 | Program output: 34.03542841   
Correct output: -90.2595503995 | Program output: -34.0791089   
Correct output: -82.4635707651 | Program output: -96.0659025   
Correct output: -8.7492896214  | Program output: -50.0312401   
Correct output: -82.1329348831 | Program output: -82.0796561   
Correct output: 24.5261129925  | Program output: -73.0405184   
Correct output: -11.4065589042 | Program output: -53.0602704   
Correct output: 10.3282540908  | Program output: -77.045776    
Correct output: -51.7760580299 | Program output: -78.0755929   
Correct output: 51.8185003253  | Program output: 74.075421801  
Correct output: 110.7431489201 | Program output: 20.0219241    
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_yankdup} {:instruction float_pop} {:instruction float_mult} {:instruction in2} {:instruction float_max} {:instruction integer_dup} {:instruction print_float} {:instruction integer_mult} {:instruction float_mult} {:instruction float_pop} {:instruction float_mult} {:instruction in2} {:instruction float_sub} {:instruction float_sub} {:instruction float_mult} {:instruction integer_dup} {:instruction integer_dup} {:instruction float_add} {:instruction integer_dec} {:instruction integer_shove} {:instruction float_mult} {:instruction float_add} {:instruction float_mult} {:instruction integer_mult} {:instruction integer_dup} {:instruction float_add} {:instruction integer_dup} {:instruction float_add} {:instruction integer_dec} {:instruction integer_mult} {:instruction float_mult} {:instruction float_pop} {:instruction float_tan} {:instruction in2} {:instruction float_max} {:instruction float_pop} {:instruction float_mult} {:instruction in2} {:instruction float_yankdup} {:instruction integer_dup} {:instruction integer_pop} {:instruction integer_dec} {:instruction float_cos} {:instruction float_frominteger} {:instruction integer_swap} {:instruction integer_mod} {:instruction integer_dup} {:instruction 80} {:instruction integer_mod} {:instruction integer_dup} {:instruction integer_dup} {:instruction float_dup_items} {:instruction print_float} {:instruction float_frominteger} {:instruction print_integer} {:instruction integer_sub} {:instruction integer_inc} {:instruction integer_max} {:instruction integer_stackdepth} {:instruction float_shove} {:instruction float_mult} {:instruction integer_max} {:instruction integer_stackdepth} {:instruction float_shove} {:instruction float_dup} {:instruction float_inc} {:instruction integer_mult} {:instruction integer_shove} {:instruction print_integer} {:instruction integer_flush})
Best program: (float_yankdup float_pop float_mult in2 float_max integer_dup print_float integer_mult float_mult float_pop float_mult in2 float_sub float_sub float_mult integer_dup integer_dup float_add integer_dec integer_shove float_mult float_add float_mult integer_mult integer_dup float_add integer_dup float_add integer_dec integer_mult float_mult float_pop float_tan in2 float_max float_pop float_mult in2 float_yankdup integer_dup integer_pop integer_dec float_cos float_frominteger integer_swap integer_mod integer_dup 80 integer_mod integer_dup integer_dup float_dup_items print_float float_frominteger print_integer integer_sub integer_inc integer_max integer_stackdepth float_shove float_mult integer_max integer_stackdepth float_shove float_dup float_inc integer_mult integer_shove print_integer integer_flush)
Errors: [75.0362 8 34.2119 10 49.8114 9 11.52 6 46.787 8 57.7839 8 13.0202 9 95.8478 11 22.5106 9 15.2344 10 55.2703 10 86.9001 7 33.2086 11 6.0932 11 65.9905 9 56.1804 9 13.6023 8 41.282 10 0.0533 8 97.5666 12 41.6537 8 87.374 12 26.2995 8 22.2569 11 90.7212 8]
Total: 1376.2160000000001
Mean: 27.52432
Genome size: 70
Size: 71
Percent parens: 0.014
--- Population Statistics ---
Average total errors in population: 4974.028173099999
Median total errors in population: 1380.2160000000003
Error averages by case: (263.0985353000013 8.813 213.65359999999805 10.314 145.20688640000168 9.627 112.67242790000068 8.113 138.79280139999858 9.742 152.51059539999952 10.249 198.11994709999914 9.29 186.57117559999892 12.231 121.91473449999872 9.879 214.64286969999785 10.717 149.47445220000097 10.087 274.3152162000001 8.888 71.03467489999956 11.054 107.54466390000101 11.767 160.5901881000016 10.006 248.36281770000232 9.997 215.22228019999932 9.308 234.08134200000268 10.683 205.05193079999964 8.975 277.4546657999986 12.279 234.84523799999806 9.122 269.13253780000304 12.11 223.43024479999778 9.263 121.5744819999983 10.939 181.82586540000017 9.451)
Error minima by case: (40.0 7 1.4773 7 0.8114 7 2.4864 6 8.6211 8 9.6873 8 0.92 6 30.0877 10 0.4894 8 5.6298 8 13.1852 7 84.0 7 2.0 3 2.0932 9 20.0217 8 15.3761 8 7.5801 7 7.7369 8 0.0523 6 1.0913 9 10.3423 7 6.2825 8 23.1074 8 17.2569 9 30.7339 8)
Average genome size in population (length): 70.375
Average program size in population (points): 71.375
Average percent parens in population: 0.014
Minimum age in population: 85.87490305338417
Maximum age in population: 90.99505902179955
Average age in population: 89.10755665395722
Median age in population: 89.14544655805642
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 59
Genome diversity (% unique Plush genomes):	 0.781
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 59
Syntactic diversity (% unique Push programs):	 0.781
Total error diversity:				 0.295
Error (vector) diversity:			 0.306
Behavioral diversity:				 0.306
--- Run Statistics ---
Number of program evaluations used so far: 63000
Number of point (instruction) evaluations so far: 90653290
--- Timings ---
Current time: 1529615122730 milliseconds
Total Time:         228.7 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:        96.0 seconds, 42.0%
Fitness Testing:    105.1 seconds, 45.9%
Report:              27.6 seconds, 12.1%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 62
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 63
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 63
;;******************************
;; -*- Number IO problem report - generation 63
Test total error for best: 59653.740700000024
Test mean error for best: 29.82687
;;------------------------------
Outputs of best individual on training cases:
Correct output: -116.076402553 | Program output: -41.0401600   
Correct output: 24.1400847456  | Program output: -10.07181     
Correct output: 69.833290954   | Program output: 20.0219241    
Correct output: 82.4958592801  | Program output: 94.015857281  
Correct output: 34.2385110874  | Program output: 81.02551287   
Correct output: -10.7358110665 | Program output: 47.048110545  
Correct output: 1.9700532093   | Program output: -11.050100    
Correct output: -44.7956976677 | Program output: 51.052140557  
Correct output: 68.5576547673  | Program output: 46.047103777  
Correct output: -69.2536523379 | Program output: -54.0192809   
Correct output: -14.2275745396 | Program output: 41.04274047   
Correct output: -171.9767905886 | Program output: -85.0767056   
Correct output: -32.1846093265 | Program output: 1.024         
Correct output: 66.9812146721  | Program output: 73.074405151  
Correct output: 100.0259781081 | Program output: 34.03542841   
Correct output: -90.2595503995 | Program output: -34.0791089   
Correct output: -82.4635707651 | Program output: -96.0659025   
Correct output: -8.7492896214  | Program output: -50.0312401   
Correct output: -82.1329348831 | Program output: -82.0796561   
Correct output: 24.5261129925  | Program output: -73.0405184   
Correct output: -11.4065589042 | Program output: -53.0602704   
Correct output: 10.3282540908  | Program output: -77.045776    
Correct output: -51.7760580299 | Program output: -78.0755929   
Correct output: 51.8185003253  | Program output: 74.075421801  
Correct output: 110.7431489201 | Program output: 20.0219241    
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_yankdup} {:instruction float_pop} {:instruction float_mult} {:instruction in2} {:instruction float_max} {:instruction integer_dup} {:instruction print_float} {:instruction integer_mult} {:instruction float_mult} {:instruction float_pop} {:instruction float_mult} {:instruction in2} {:instruction float_sub} {:instruction float_sub} {:instruction float_mult} {:instruction integer_dup} {:instruction integer_dup} {:instruction float_add} {:instruction integer_dec} {:instruction integer_shove} {:instruction float_mult} {:instruction float_add} {:instruction float_mult} {:instruction integer_mult} {:instruction integer_dup} {:instruction float_add} {:instruction integer_dup} {:instruction float_add} {:instruction integer_dec} {:instruction integer_mult} {:instruction float_mult} {:instruction float_pop} {:instruction float_tan} {:instruction in2} {:instruction float_max} {:instruction float_pop} {:instruction float_mult} {:instruction in2} {:instruction float_yankdup} {:instruction integer_dup} {:instruction integer_pop} {:instruction integer_dec} {:instruction float_cos} {:instruction float_frominteger} {:instruction integer_swap} {:instruction integer_mod} {:instruction integer_dup} {:instruction 80} {:instruction integer_mod} {:instruction integer_dup} {:instruction integer_dup} {:instruction float_dup_items} {:instruction print_float} {:instruction float_frominteger} {:instruction print_integer} {:instruction integer_sub} {:instruction integer_inc} {:instruction integer_max} {:instruction integer_stackdepth} {:instruction float_shove} {:instruction float_mult} {:instruction integer_max} {:instruction integer_stackdepth} {:instruction float_shove} {:instruction float_dup} {:instruction float_inc} {:instruction integer_mult} {:instruction integer_shove} {:instruction print_integer} {:instruction integer_flush})
Best program: (float_yankdup float_pop float_mult in2 float_max integer_dup print_float integer_mult float_mult float_pop float_mult in2 float_sub float_sub float_mult integer_dup integer_dup float_add integer_dec integer_shove float_mult float_add float_mult integer_mult integer_dup float_add integer_dup float_add integer_dec integer_mult float_mult float_pop float_tan in2 float_max float_pop float_mult in2 float_yankdup integer_dup integer_pop integer_dec float_cos float_frominteger integer_swap integer_mod integer_dup 80 integer_mod integer_dup integer_dup float_dup_items print_float float_frominteger print_integer integer_sub integer_inc integer_max integer_stackdepth float_shove float_mult integer_max integer_stackdepth float_shove float_dup float_inc integer_mult integer_shove print_integer integer_flush)
Errors: [75.0362 8 34.2119 10 49.8114 9 11.52 6 46.787 8 57.7839 8 13.0202 9 95.8478 11 22.5106 9 15.2344 10 55.2703 10 86.9001 7 33.2086 11 6.0932 11 65.9905 9 56.1804 9 13.6023 8 41.282 10 0.0533 8 97.5666 12 41.6537 8 87.374 12 26.2995 8 22.2569 11 90.7212 8]
Total: 1376.2160000000001
Mean: 27.52432
Genome size: 70
Size: 71
Percent parens: 0.014
--- Population Statistics ---
Average total errors in population: 5053.036627799999
Median total errors in population: 1380.2160000000003
Error averages by case: (268.9481306000009 8.788 225.23562569999774 10.347 144.10644230000165 9.585 110.01149720000059 8.044 139.66328739999912 9.663 151.9522114000001 10.23 209.28650359999918 9.304 186.14222919999887 12.208 120.4919801999986 9.836 221.58429099999722 10.69 149.74464000000097 10.061 279.3974157000005 8.905 69.75015569999974 10.901 105.99460430000099 11.728 159.34128140000172 9.991 254.39151040000291 9.98 221.12334689999946 9.254 241.10687800000267 10.654 210.77556099999967 8.865 283.8375705999991 12.278 241.7754800999979 9.085 275.5237994000031 12.103 229.70040649999765 9.203 120.34910799999837 10.889 180.7846712000002 9.426)
Error minima by case: (35.0748 7 24.132 9 9.176 8 2.4877 5 32.2185 8 9.7435 8 1.9656 8 19.6389 10 10.4434 9 14.2344 8 10.9293 9 2.9697 7 7.0278 10 5.0911 9 20.0245 9 23.2585 9 12.5364 8 8.7493 8 0.0523 7 15.4739 9 10.4883 7 6.3075 8 25.2239 8 21.2518 9 30.7412 8)
Average genome size in population (length): 69.726
Average program size in population (points): 70.726
Average percent parens in population: 0.014
Minimum age in population: 86.87490305338417
Maximum age in population: 92.47130593101966
Average age in population: 90.52373013392295
Median age in population: 90.57686410742072
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 36
Genome diversity (% unique Plush genomes):	 0.769
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 36
Syntactic diversity (% unique Push programs):	 0.769
Total error diversity:				 0.296
Error (vector) diversity:			 0.303
Behavioral diversity:				 0.303
--- Run Statistics ---
Number of program evaluations used so far: 64000
Number of point (instruction) evaluations so far: 92396440
--- Timings ---
Current time: 1529615126698 milliseconds
Total Time:         232.7 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:        97.6 seconds, 41.9%
Fitness Testing:    107.0 seconds, 46.0%
Report:              28.1 seconds, 12.1%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 63
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 64
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 64
;;******************************
;; -*- Number IO problem report - generation 64
Test total error for best: 59653.740700000024
Test mean error for best: 29.82687
;;------------------------------
Outputs of best individual on training cases:
Correct output: -116.076402553 | Program output: -41.0401600   
Correct output: 24.1400847456  | Program output: -10.07181     
Correct output: 69.833290954   | Program output: 20.0219241    
Correct output: 82.4958592801  | Program output: 94.015857281  
Correct output: 34.2385110874  | Program output: 81.02551287   
Correct output: -10.7358110665 | Program output: 47.048110545  
Correct output: 1.9700532093   | Program output: -11.050100    
Correct output: -44.7956976677 | Program output: 51.052140557  
Correct output: 68.5576547673  | Program output: 46.047103777  
Correct output: -69.2536523379 | Program output: -54.0192809   
Correct output: -14.2275745396 | Program output: 41.04274047   
Correct output: -171.9767905886 | Program output: -85.0767056   
Correct output: -32.1846093265 | Program output: 1.024         
Correct output: 66.9812146721  | Program output: 73.074405151  
Correct output: 100.0259781081 | Program output: 34.03542841   
Correct output: -90.2595503995 | Program output: -34.0791089   
Correct output: -82.4635707651 | Program output: -96.0659025   
Correct output: -8.7492896214  | Program output: -50.0312401   
Correct output: -82.1329348831 | Program output: -82.0796561   
Correct output: 24.5261129925  | Program output: -73.0405184   
Correct output: -11.4065589042 | Program output: -53.0602704   
Correct output: 10.3282540908  | Program output: -77.045776    
Correct output: -51.7760580299 | Program output: -78.0755929   
Correct output: 51.8185003253  | Program output: 74.075421801  
Correct output: 110.7431489201 | Program output: 20.0219241    
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_yankdup} {:instruction float_pop} {:instruction float_mult} {:instruction in2} {:instruction float_max} {:instruction integer_dup} {:instruction print_float} {:instruction integer_mult} {:instruction float_mult} {:instruction float_pop} {:instruction float_mult} {:instruction in2} {:instruction float_sub} {:instruction float_sub} {:instruction float_mult} {:instruction integer_dup} {:instruction integer_dup} {:instruction float_add} {:instruction integer_dec} {:instruction integer_shove} {:instruction float_mult} {:instruction float_add} {:instruction float_mult} {:instruction integer_mult} {:instruction integer_dup} {:instruction float_add} {:instruction integer_dup} {:instruction float_add} {:instruction integer_dec} {:instruction integer_mult} {:instruction float_mult} {:instruction float_pop} {:instruction float_tan} {:instruction in2} {:instruction float_max} {:instruction float_pop} {:instruction float_mult} {:instruction in2} {:instruction float_yankdup} {:instruction integer_dup} {:instruction integer_pop} {:instruction integer_dec} {:instruction float_cos} {:instruction float_frominteger} {:instruction integer_swap} {:instruction integer_mod} {:instruction integer_dup} {:instruction 80} {:instruction integer_mod} {:instruction integer_dup} {:instruction integer_dup} {:instruction float_dup_items} {:instruction print_float} {:instruction float_frominteger} {:instruction print_integer} {:instruction integer_sub} {:instruction integer_inc} {:instruction integer_max} {:instruction integer_stackdepth} {:instruction float_shove} {:instruction float_mult} {:instruction integer_max} {:instruction integer_stackdepth} {:instruction float_shove} {:instruction float_dup} {:instruction float_inc} {:instruction integer_mult} {:instruction integer_shove} {:instruction print_integer} {:instruction integer_flush})
Best program: (float_yankdup float_pop float_mult in2 float_max integer_dup print_float integer_mult float_mult float_pop float_mult in2 float_sub float_sub float_mult integer_dup integer_dup float_add integer_dec integer_shove float_mult float_add float_mult integer_mult integer_dup float_add integer_dup float_add integer_dec integer_mult float_mult float_pop float_tan in2 float_max float_pop float_mult in2 float_yankdup integer_dup integer_pop integer_dec float_cos float_frominteger integer_swap integer_mod integer_dup 80 integer_mod integer_dup integer_dup float_dup_items print_float float_frominteger print_integer integer_sub integer_inc integer_max integer_stackdepth float_shove float_mult integer_max integer_stackdepth float_shove float_dup float_inc integer_mult integer_shove print_integer integer_flush)
Errors: [75.0362 8 34.2119 10 49.8114 9 11.52 6 46.787 8 57.7839 8 13.0202 9 95.8478 11 22.5106 9 15.2344 10 55.2703 10 86.9001 7 33.2086 11 6.0932 11 65.9905 9 56.1804 9 13.6023 8 41.282 10 0.0533 8 97.5666 12 41.6537 8 87.374 12 26.2995 8 22.2569 11 90.7212 8]
Total: 1376.2160000000001
Mean: 27.52432
Genome size: 70
Size: 71
Percent parens: 0.014
--- Population Statistics ---
Average total errors in population: 4627.395943099992
Median total errors in population: 1380.2160000000003
Error averages by case: (241.0825784000012 8.754 192.08505019999814 10.32 136.18825360000136 9.602 106.48382350000077 8.076 134.73175659999896 9.693 145.96498109999973 10.238 176.72989319999917 9.291 181.18936329999877 12.198 114.96980109999883 9.859 193.259747099998 10.648 143.73739530000083 10.046 252.5062977999993 8.838 74.01522039999989 10.658 101.29572320000077 11.724 154.15208340000177 9.984 227.02600600000235 9.975 192.7834639999994 9.27 212.77452070000245 10.625 179.4062416999995 8.859 259.79936539999807 12.242 214.62110449999815 9.068 250.25962220000284 12.117 202.11547249999805 9.223 115.60043219999837 10.901 172.98874570000007 9.42)
Error minima by case: (34.9974 5 9.0 5 9.1688 6 3.4864 5 32.2118 8 9.6878 6 0.9701 4 22.8676 6 10.447 6 11.8253 5 7.7005 6 84.0 5 2.0 3 5.093 10 21.0225 7 9.1806 5 1.3846 7 7.7168 8 0.0523 5 15.5144 5 10.394 8 6.2825 4 25.2239 8 21.2567 8 21.0 7)
Average genome size in population (length): 69.12
Average program size in population (points): 70.12
Average percent parens in population: 0.014
Minimum age in population: 89.53923650862353
Maximum age in population: 93.99023944966571
Average age in population: 92.03278518802723
Median age in population: 92.07000398507292
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 32
Genome diversity (% unique Plush genomes):	 0.727
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 32
Syntactic diversity (% unique Push programs):	 0.727
Total error diversity:				 0.29
Error (vector) diversity:			 0.296
Behavioral diversity:				 0.296
--- Run Statistics ---
Number of program evaluations used so far: 65000
Number of point (instruction) evaluations so far: 94124465
--- Timings ---
Current time: 1529615130761 milliseconds
Total Time:         236.7 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:        99.0 seconds, 41.8%
Fitness Testing:    109.0 seconds, 46.1%
Report:              28.6 seconds, 12.1%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 64
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 65
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 65
;;******************************
;; -*- Number IO problem report - generation 65
Test total error for best: 59653.740700000024
Test mean error for best: 29.82687
;;------------------------------
Outputs of best individual on training cases:
Correct output: -116.076402553 | Program output: -41.0401600   
Correct output: 24.1400847456  | Program output: -10.07181     
Correct output: 69.833290954   | Program output: 20.0219241    
Correct output: 82.4958592801  | Program output: 94.015857281  
Correct output: 34.2385110874  | Program output: 81.02551287   
Correct output: -10.7358110665 | Program output: 47.048110545  
Correct output: 1.9700532093   | Program output: -11.050100    
Correct output: -44.7956976677 | Program output: 51.052140557  
Correct output: 68.5576547673  | Program output: 46.047103777  
Correct output: -69.2536523379 | Program output: -54.0192809   
Correct output: -14.2275745396 | Program output: 41.04274047   
Correct output: -171.9767905886 | Program output: -85.0767056   
Correct output: -32.1846093265 | Program output: 1.024         
Correct output: 66.9812146721  | Program output: 73.074405151  
Correct output: 100.0259781081 | Program output: 34.03542841   
Correct output: -90.2595503995 | Program output: -34.0791089   
Correct output: -82.4635707651 | Program output: -96.0659025   
Correct output: -8.7492896214  | Program output: -50.0312401   
Correct output: -82.1329348831 | Program output: -82.0796561   
Correct output: 24.5261129925  | Program output: -73.0405184   
Correct output: -11.4065589042 | Program output: -53.0602704   
Correct output: 10.3282540908  | Program output: -77.045776    
Correct output: -51.7760580299 | Program output: -78.0755929   
Correct output: 51.8185003253  | Program output: 74.075421801  
Correct output: 110.7431489201 | Program output: 20.0219241    
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_yankdup} {:instruction float_pop} {:instruction float_mult} {:instruction in2} {:instruction float_max} {:instruction integer_dup} {:instruction print_float} {:instruction integer_mult} {:instruction float_mult} {:instruction float_pop} {:instruction float_flush} {:instruction in2} {:instruction float_sub} {:instruction float_sub} {:instruction float_mult} {:instruction integer_dup} {:instruction integer_dup} {:instruction float_add} {:instruction integer_dec} {:instruction integer_shove} {:instruction float_mult} {:instruction float_add} {:instruction float_mult} {:instruction integer_mult} {:instruction integer_dup} {:instruction float_add} {:instruction integer_dup} {:instruction float_add} {:instruction integer_dec} {:instruction integer_mult} {:instruction float_mult} {:instruction float_pop} {:instruction float_tan} {:instruction in2} {:instruction float_max} {:instruction float_pop} {:instruction float_mult} {:instruction in2} {:instruction float_yankdup} {:instruction integer_dup} {:instruction integer_pop} {:instruction integer_dec} {:instruction float_cos} {:instruction float_frominteger} {:instruction integer_swap} {:instruction integer_mod} {:instruction integer_dup} {:instruction 80} {:instruction integer_mod} {:instruction integer_dup} {:instruction integer_dup} {:instruction float_dup_items} {:instruction print_float} {:instruction float_frominteger} {:instruction print_integer} {:instruction integer_sub} {:instruction integer_inc} {:instruction integer_max} {:instruction integer_stackdepth} {:instruction float_shove} {:instruction float_mult} {:instruction integer_max} {:instruction integer_stackdepth} {:instruction float_shove} {:instruction float_dup} {:instruction float_inc} {:instruction integer_mult} {:instruction integer_shove} {:instruction print_integer} {:instruction integer_flush})
Best program: (float_yankdup float_pop float_mult in2 float_max integer_dup print_float integer_mult float_mult float_pop float_flush in2 float_sub float_sub float_mult integer_dup integer_dup float_add integer_dec integer_shove float_mult float_add float_mult integer_mult integer_dup float_add integer_dup float_add integer_dec integer_mult float_mult float_pop float_tan in2 float_max float_pop float_mult in2 float_yankdup integer_dup integer_pop integer_dec float_cos float_frominteger integer_swap integer_mod integer_dup 80 integer_mod integer_dup integer_dup float_dup_items print_float float_frominteger print_integer integer_sub integer_inc integer_max integer_stackdepth float_shove float_mult integer_max integer_stackdepth float_shove float_dup float_inc integer_mult integer_shove print_integer integer_flush)
Errors: [75.0362 8 34.2119 10 49.8114 9 11.52 6 46.787 8 57.7839 8 13.0202 9 95.8478 11 22.5106 9 15.2344 10 55.2703 10 86.9001 7 33.2086 11 6.0932 11 65.9905 9 56.1804 9 13.6023 8 41.282 10 0.0533 8 97.5666 12 41.6537 8 87.374 12 26.2995 8 22.2569 11 90.7212 8]
Total: 1376.2160000000001
Mean: 27.52432
Genome size: 70
Size: 71
Percent parens: 0.014
--- Population Statistics ---
Average total errors in population: 5008.307140499986
Median total errors in population: 1379.2180000000003
Error averages by case: (258.18945690000135 8.88 211.0847473999979 10.267 148.60531210000158 9.64 118.87277620000071 8.148 148.17762849999917 9.726 159.0315489 10.252 195.1800601999992 9.294 193.93437689999925 12.232 127.59372729999866 9.865 211.28815249999818 10.701 156.775940800001 10.143 269.26193559999996 8.976 81.46272869999989 10.58 114.44388000000089 11.77 166.9572606000017 10.033 244.04549970000238 10.063 210.38217319999976 9.364 231.18554280000274 10.662 200.75640679999952 8.948 275.50015299999865 12.303 231.59375089999799 9.178 267.4124870000028 12.196 219.99083479999783 9.317 128.73672169999827 10.983 184.913038 9.41)
Error minima by case: (35.0748 7 20.0673 8 5.8114 7 2.4 4 14.2385 8 10.784 8 0.9691 7 44.848 8 4.5106 7 14.2264 8 14.2697 7 2.9697 7 32.1846 5 2.9068 9 19.9905 7 23.2585 8 12.5364 8 7.7493 8 0.0329 6 14.5459 8 10.4066 7 6.2825 7 25.2239 8 12.2569 8 30.7212 6)
Average genome size in population (length): 69.107
Average program size in population (points): 70.107
Average percent parens in population: 0.014
Minimum age in population: 90.9144320400362
Maximum age in population: 95.27687611648648
Average age in population: 93.48656412968928
Median age in population: 93.50610512500046
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 35
Genome diversity (% unique Plush genomes):	 0.765
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 35
Syntactic diversity (% unique Push programs):	 0.765
Total error diversity:				 0.317
Error (vector) diversity:			 0.325
Behavioral diversity:				 0.325
--- Run Statistics ---
Number of program evaluations used so far: 66000
Number of point (instruction) evaluations so far: 95852140
--- Timings ---
Current time: 1529615134529 milliseconds
Total Time:         240.6 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       100.5 seconds, 41.8%
Fitness Testing:    110.9 seconds, 46.1%
Report:              29.1 seconds, 12.1%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 65
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 66
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 66
;;******************************
;; -*- Number IO problem report - generation 66
Test total error for best: 59653.740700000024
Test mean error for best: 29.82687
;;------------------------------
Outputs of best individual on training cases:
Correct output: -116.076402553 | Program output: -41.0401600   
Correct output: 24.1400847456  | Program output: -10.07181     
Correct output: 69.833290954   | Program output: 20.0219241    
Correct output: 82.4958592801  | Program output: 94.015857281  
Correct output: 34.2385110874  | Program output: 81.02551287   
Correct output: -10.7358110665 | Program output: 47.048110545  
Correct output: 1.9700532093   | Program output: -11.050100    
Correct output: -44.7956976677 | Program output: 51.052140557  
Correct output: 68.5576547673  | Program output: 46.047103777  
Correct output: -69.2536523379 | Program output: -54.0192809   
Correct output: -14.2275745396 | Program output: 41.04274047   
Correct output: -171.9767905886 | Program output: -85.0767056   
Correct output: -32.1846093265 | Program output: 1.024         
Correct output: 66.9812146721  | Program output: 73.074405151  
Correct output: 100.0259781081 | Program output: 34.03542841   
Correct output: -90.2595503995 | Program output: -34.0791089   
Correct output: -82.4635707651 | Program output: -96.0659025   
Correct output: -8.7492896214  | Program output: -50.0312401   
Correct output: -82.1329348831 | Program output: -82.0796561   
Correct output: 24.5261129925  | Program output: -73.0405184   
Correct output: -11.4065589042 | Program output: -53.0602704   
Correct output: 10.3282540908  | Program output: -77.045776    
Correct output: -51.7760580299 | Program output: -78.0755929   
Correct output: 51.8185003253  | Program output: 74.075421801  
Correct output: 110.7431489201 | Program output: 20.0219241    
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_yankdup} {:instruction float_pop} {:instruction float_mult} {:instruction in2} {:instruction float_max} {:instruction integer_dup} {:instruction print_float} {:instruction integer_mult} {:instruction float_mult} {:instruction float_pop} {:instruction float_mult} {:instruction in2} {:instruction float_sub} {:instruction float_sub} {:instruction float_mult} {:instruction integer_dup} {:instruction integer_dup} {:instruction float_add} {:instruction integer_dec} {:instruction integer_shove} {:instruction float_mult} {:instruction float_add} {:instruction float_mult} {:instruction integer_mult} {:instruction integer_dup} {:instruction float_add} {:instruction integer_dup} {:instruction float_add} {:instruction integer_dec} {:instruction integer_mult} {:instruction float_mult} {:instruction float_pop} {:instruction float_tan} {:instruction in2} {:instruction float_max} {:instruction float_pop} {:instruction float_mult} {:instruction in2} {:instruction float_yankdup} {:instruction integer_dup} {:instruction integer_pop} {:instruction integer_dec} {:instruction float_cos} {:instruction float_frominteger} {:instruction integer_swap} {:instruction integer_mod} {:instruction integer_dup} {:instruction 80} {:instruction integer_mod} {:instruction integer_dup} {:instruction integer_dup} {:instruction float_dup_items} {:instruction print_float} {:instruction float_frominteger} {:instruction print_integer} {:instruction integer_sub} {:instruction integer_inc} {:instruction integer_max} {:instruction integer_stackdepth} {:instruction float_shove} {:instruction float_mult} {:instruction integer_max} {:instruction integer_stackdepth} {:instruction float_shove} {:instruction float_dup} {:instruction float_inc} {:instruction integer_mult} {:instruction integer_shove} {:instruction print_integer} {:instruction integer_flush})
Best program: (float_yankdup float_pop float_mult in2 float_max integer_dup print_float integer_mult float_mult float_pop float_mult in2 float_sub float_sub float_mult integer_dup integer_dup float_add integer_dec integer_shove float_mult float_add float_mult integer_mult integer_dup float_add integer_dup float_add integer_dec integer_mult float_mult float_pop float_tan in2 float_max float_pop float_mult in2 float_yankdup integer_dup integer_pop integer_dec float_cos float_frominteger integer_swap integer_mod integer_dup 80 integer_mod integer_dup integer_dup float_dup_items print_float float_frominteger print_integer integer_sub integer_inc integer_max integer_stackdepth float_shove float_mult integer_max integer_stackdepth float_shove float_dup float_inc integer_mult integer_shove print_integer integer_flush)
Errors: [75.0362 8 34.2119 10 49.8114 9 11.52 6 46.787 8 57.7839 8 13.0202 9 95.8478 11 22.5106 9 15.2344 10 55.2703 10 86.9001 7 33.2086 11 6.0932 11 65.9905 9 56.1804 9 13.6023 8 41.282 10 0.0533 8 97.5666 12 41.6537 8 87.374 12 26.2995 8 22.2569 11 90.7212 8]
Total: 1376.2160000000001
Mean: 27.52432
Genome size: 70
Size: 71
Percent parens: 0.014
--- Population Statistics ---
Average total errors in population: 4571.454342299992
Median total errors in population: 1382.2566500000003
Error averages by case: (248.4237939000011 8.792 199.32702339999832 10.293 124.47633380000111 9.618 92.4392620000002 8.064 120.65957209999847 9.591 133.61015719999875 10.133 184.8673588999994 9.298 168.58514449999947 12.102 101.40117669999927 9.844 201.02829779999794 10.704 131.31414650000042 10.138 258.9748563999994 8.968 69.45807649999968 10.667 86.9936366000007 11.609 140.75049590000032 9.962 234.03838960000232 10.029 199.22894409999938 9.331 220.66570690000242 10.631 187.76070539999952 8.894 265.22631419999806 12.266 221.09561419999832 9.152 256.20605880000284 12.174 209.72423229999808 9.32 101.63958469999886 10.929 161.72345990000002 9.327)
Error minima by case: (35.0362 3 9.0 3 0.9041 3 2.4873 5 32.213 8 9.6873 3 1.9592 2 43.7432 3 2.1798 3 14.2264 3 13.1852 3 2.9001 3 2.0 2 3.7562 9 20.0217 4 23.1804 3 12.5364 8 7.7182 8 0.0401 3 14.5466 3 10.3465 8 6.2825 3 25.2239 8 18.9189 9 10.2569 4)
Average genome size in population (length): 69.293
Average program size in population (points): 70.293
Average percent parens in population: 0.014
Minimum age in population: 92.68151064189053
Maximum age in population: 96.9507320369246
Average age in population: 94.8574682387613
Median age in population: 94.90685116007884
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 28
Genome diversity (% unique Plush genomes):	 0.796
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 28
Syntactic diversity (% unique Push programs):	 0.796
Total error diversity:				 0.328
Error (vector) diversity:			 0.335
Behavioral diversity:				 0.335
--- Run Statistics ---
Number of program evaluations used so far: 67000
Number of point (instruction) evaluations so far: 97584490
--- Timings ---
Current time: 1529615138491 milliseconds
Total Time:         244.5 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       101.9 seconds, 41.7%
Fitness Testing:    112.9 seconds, 46.2%
Report:              29.6 seconds, 12.1%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 66
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 67
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 67
;;******************************
;; -*- Number IO problem report - generation 67
Test total error for best: 59653.740700000024
Test mean error for best: 29.82687
;;------------------------------
Outputs of best individual on training cases:
Correct output: -116.076402553 | Program output: -41.0401600   
Correct output: 24.1400847456  | Program output: -10.07181     
Correct output: 69.833290954   | Program output: 20.0219241    
Correct output: 82.4958592801  | Program output: 94.015857281  
Correct output: 34.2385110874  | Program output: 81.02551287   
Correct output: -10.7358110665 | Program output: 47.048110545  
Correct output: 1.9700532093   | Program output: -11.050100    
Correct output: -44.7956976677 | Program output: 51.052140557  
Correct output: 68.5576547673  | Program output: 46.047103777  
Correct output: -69.2536523379 | Program output: -54.0192809   
Correct output: -14.2275745396 | Program output: 41.04274047   
Correct output: -171.9767905886 | Program output: -85.0767056   
Correct output: -32.1846093265 | Program output: 1.024         
Correct output: 66.9812146721  | Program output: 73.074405151  
Correct output: 100.0259781081 | Program output: 34.03542841   
Correct output: -90.2595503995 | Program output: -34.0791089   
Correct output: -82.4635707651 | Program output: -96.0659025   
Correct output: -8.7492896214  | Program output: -50.0312401   
Correct output: -82.1329348831 | Program output: -82.0796561   
Correct output: 24.5261129925  | Program output: -73.0405184   
Correct output: -11.4065589042 | Program output: -53.0602704   
Correct output: 10.3282540908  | Program output: -77.045776    
Correct output: -51.7760580299 | Program output: -78.0755929   
Correct output: 51.8185003253  | Program output: 74.075421801  
Correct output: 110.7431489201 | Program output: 20.0219241    
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_yankdup} {:instruction float_pop} {:instruction float_mult} {:instruction in2} {:instruction float_max} {:instruction integer_dup} {:instruction print_float} {:instruction integer_mult} {:instruction float_mult} {:instruction float_pop} {:instruction float_mult} {:instruction in2} {:instruction float_sub} {:instruction float_sub} {:instruction float_mult} {:instruction integer_dup} {:instruction integer_dup} {:instruction float_add} {:instruction integer_dec} {:instruction integer_shove} {:instruction float_mult} {:instruction float_add} {:instruction float_mult} {:instruction integer_mult} {:instruction integer_dup} {:instruction float_add} {:instruction integer_dup} {:instruction float_add} {:instruction integer_dec} {:instruction integer_mult} {:instruction float_mult} {:instruction float_pop} {:instruction float_tan} {:instruction in2} {:instruction float_max} {:instruction float_pop} {:instruction float_mult} {:instruction in2} {:instruction float_yankdup} {:instruction integer_dup} {:instruction integer_pop} {:instruction integer_dec} {:instruction float_cos} {:instruction float_frominteger} {:instruction integer_swap} {:instruction integer_mod} {:instruction integer_dup} {:instruction 80} {:instruction integer_mod} {:instruction integer_dup} {:instruction integer_dup} {:instruction float_dup_items} {:instruction print_float} {:instruction float_frominteger} {:instruction print_integer} {:instruction integer_sub} {:instruction integer_inc} {:instruction integer_max} {:instruction integer_stackdepth} {:instruction float_shove} {:instruction float_mult} {:instruction integer_max} {:instruction integer_stackdepth} {:instruction float_shove} {:instruction float_dup} {:instruction float_inc} {:instruction integer_mult} {:instruction integer_shove} {:instruction print_integer} {:instruction integer_flush})
Best program: (float_yankdup float_pop float_mult in2 float_max integer_dup print_float integer_mult float_mult float_pop float_mult in2 float_sub float_sub float_mult integer_dup integer_dup float_add integer_dec integer_shove float_mult float_add float_mult integer_mult integer_dup float_add integer_dup float_add integer_dec integer_mult float_mult float_pop float_tan in2 float_max float_pop float_mult in2 float_yankdup integer_dup integer_pop integer_dec float_cos float_frominteger integer_swap integer_mod integer_dup 80 integer_mod integer_dup integer_dup float_dup_items print_float float_frominteger print_integer integer_sub integer_inc integer_max integer_stackdepth float_shove float_mult integer_max integer_stackdepth float_shove float_dup float_inc integer_mult integer_shove print_integer integer_flush)
Errors: [75.0362 8 34.2119 10 49.8114 9 11.52 6 46.787 8 57.7839 8 13.0202 9 95.8478 11 22.5106 9 15.2344 10 55.2703 10 86.9001 7 33.2086 11 6.0932 11 65.9905 9 56.1804 9 13.6023 8 41.282 10 0.0533 8 97.5666 12 41.6537 8 87.374 12 26.2995 8 22.2569 11 90.7212 8]
Total: 1376.2160000000001
Mean: 27.52432
Genome size: 70
Size: 71
Percent parens: 0.014
--- Population Statistics ---
Average total errors in population: 5177.724176099989
Median total errors in population: 1385.2786500000002
Error averages by case: (278.3468109000005 8.89 231.6039561999982 10.322 142.25082950000112 9.66 109.39518680000029 8.228 137.68657249999873 9.522 150.14876759999942 10.098 217.09979599999932 9.343 184.41840229999912 11.997 118.686259499999 9.902 232.98059449999764 10.778 147.93335480000061 10.397 289.34209620000104 9.068 81.81026289999981 10.807 104.23889490000074 11.507 157.48606230000124 10.025 264.17836630000255 10.087 232.71915849999965 9.422 251.13619280000253 10.681 221.66662899999983 8.943 293.9530663999995 12.284 253.16700709999813 9.229 286.51358120000276 12.202 240.478816899998 9.407 118.58721779999874 11.0 178.86729319999992 9.23)
Error minima by case: (35.0764 7 9.0 5 9.1882 7 2.4873 5 8.9005 8 9.4562 8 0.9701 5 43.3936 9 10.4896 8 14.1637 7 13.2266 8 2.9768 7 2.0 3 5.0263 8 20.0217 9 23.2596 7 12.5446 8 4.2647 9 0.0329 7 14.5144 7 9.0663 8 4.6883 7 25.2275 7 8.6795 9 9.2569 8)
Average genome size in population (length): 69.713
Average program size in population (points): 70.713
Average percent parens in population: 0.014
Minimum age in population: 93.68151064189053
Maximum age in population: 98.00504800549272
Average age in population: 96.2681996733813
Median age in population: 96.29556526559004
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 55
Genome diversity (% unique Plush genomes):	 0.784
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 55
Syntactic diversity (% unique Push programs):	 0.784
Total error diversity:				 0.326
Error (vector) diversity:			 0.332
Behavioral diversity:				 0.332
--- Run Statistics ---
Number of program evaluations used so far: 68000
Number of point (instruction) evaluations so far: 99327315
--- Timings ---
Current time: 1529615142297 milliseconds
Total Time:         248.3 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       103.4 seconds, 41.6%
Fitness Testing:    114.8 seconds, 46.2%
Report:              30.1 seconds, 12.1%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 67
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 68
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 68
;;******************************
;; -*- Number IO problem report - generation 68
Test total error for best: 59653.740700000024
Test mean error for best: 29.82687
;;------------------------------
Outputs of best individual on training cases:
Correct output: -116.076402553 | Program output: -41.0401600   
Correct output: 24.1400847456  | Program output: -10.07181     
Correct output: 69.833290954   | Program output: 20.0219241    
Correct output: 82.4958592801  | Program output: 94.015857281  
Correct output: 34.2385110874  | Program output: 81.02551287   
Correct output: -10.7358110665 | Program output: 47.048110545  
Correct output: 1.9700532093   | Program output: -11.050100    
Correct output: -44.7956976677 | Program output: 51.052140557  
Correct output: 68.5576547673  | Program output: 46.047103777  
Correct output: -69.2536523379 | Program output: -54.0192809   
Correct output: -14.2275745396 | Program output: 41.04274047   
Correct output: -171.9767905886 | Program output: -85.0767056   
Correct output: -32.1846093265 | Program output: 1.024         
Correct output: 66.9812146721  | Program output: 73.074405151  
Correct output: 100.0259781081 | Program output: 34.03542841   
Correct output: -90.2595503995 | Program output: -34.0791089   
Correct output: -82.4635707651 | Program output: -96.0659025   
Correct output: -8.7492896214  | Program output: -50.0312401   
Correct output: -82.1329348831 | Program output: -82.0796561   
Correct output: 24.5261129925  | Program output: -73.0405184   
Correct output: -11.4065589042 | Program output: -53.0602704   
Correct output: 10.3282540908  | Program output: -77.045776    
Correct output: -51.7760580299 | Program output: -78.0755929   
Correct output: 51.8185003253  | Program output: 74.075421801  
Correct output: 110.7431489201 | Program output: 20.0219241    
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_yankdup} {:instruction float_pop} {:instruction float_mult} {:instruction in2} {:instruction float_max} {:instruction integer_dup} {:instruction print_float} {:instruction integer_mult} {:instruction float_mult} {:instruction float_pop} {:instruction float_mult} {:instruction in2} {:instruction float_sub} {:instruction float_sub} {:instruction float_mult} {:instruction integer_dup} {:instruction integer_dup} {:instruction float_add} {:instruction integer_dec} {:instruction integer_shove} {:instruction float_mult} {:instruction float_add} {:instruction float_mult} {:instruction integer_mult} {:instruction integer_dup} {:instruction float_add} {:instruction integer_dup} {:instruction float_add} {:instruction integer_dec} {:instruction integer_mult} {:instruction float_mult} {:instruction float_pop} {:instruction float_tan} {:instruction in2} {:instruction float_max} {:instruction float_pop} {:instruction float_mult} {:instruction in2} {:instruction float_yankdup} {:instruction integer_dup} {:instruction integer_pop} {:instruction integer_dec} {:instruction float_cos} {:instruction float_frominteger} {:instruction integer_swap} {:instruction integer_mod} {:instruction integer_dup} {:instruction 80} {:instruction integer_mod} {:instruction integer_dup} {:instruction integer_dup} {:instruction float_dup_items} {:instruction print_float} {:instruction float_frominteger} {:instruction print_integer} {:instruction integer_sub} {:instruction integer_inc} {:instruction integer_max} {:instruction integer_stackdepth} {:instruction float_shove} {:instruction float_mult} {:instruction integer_max} {:instruction integer_stackdepth} {:instruction float_shove} {:instruction float_dup} {:instruction float_inc} {:instruction integer_mult} {:instruction integer_stackdepth} {:instruction float_shove} {:instruction float_mult} {:instruction integer_max} {:instruction integer_stackdepth} {:instruction float_shove} {:instruction print_integer} {:instruction integer_sub} {:instruction integer_inc} {:instruction integer_max} {:instruction integer_stackdepth} {:instruction float_shove} {:instruction float_mult})
Best program: (float_yankdup float_pop float_mult in2 float_max integer_dup print_float integer_mult float_mult float_pop float_mult in2 float_sub float_sub float_mult integer_dup integer_dup float_add integer_dec integer_shove float_mult float_add float_mult integer_mult integer_dup float_add integer_dup float_add integer_dec integer_mult float_mult float_pop float_tan in2 float_max float_pop float_mult in2 float_yankdup integer_dup integer_pop integer_dec float_cos float_frominteger integer_swap integer_mod integer_dup 80 integer_mod integer_dup integer_dup float_dup_items print_float float_frominteger print_integer integer_sub integer_inc integer_max integer_stackdepth float_shove float_mult integer_max integer_stackdepth float_shove float_dup float_inc integer_mult integer_stackdepth float_shove float_mult integer_max integer_stackdepth float_shove print_integer integer_sub integer_inc integer_max integer_stackdepth float_shove float_mult)
Errors: [75.0362 8 34.2119 10 49.8114 9 11.52 6 46.787 8 57.7839 8 13.0202 9 95.8478 11 22.5106 9 15.2344 10 55.2703 10 86.9001 7 33.2086 11 6.0932 11 65.9905 9 56.1804 9 13.6023 8 41.282 10 0.0533 8 97.5666 12 41.6537 8 87.374 12 26.2995 8 22.2569 11 90.7212 8]
Total: 1376.2160000000001
Mean: 27.52432
Genome size: 80
Size: 81
Percent parens: 0.012
--- Population Statistics ---
Average total errors in population: 4823.519142799988
Median total errors in population: 1379.2180000000003
Error averages by case: (257.87228950000116 8.863 212.9850985999981 10.363 137.01324400000144 9.692 104.64241250000056 8.17 130.34176679999842 9.345 144.68689249999932 9.834 197.3663498999992 9.354 179.12287139999904 11.805 113.38989769999871 9.937 210.18485569999777 10.733 142.43777740000098 10.537 268.72067989999954 8.965 65.33460109999972 11.025 99.13104510000078 11.398 152.22961170000096 9.991 242.61884070000238 10.034 209.7861309999994 9.331 229.57639600000232 10.64 199.09522079999974 8.92 273.84579699999847 12.289 230.02169539999812 9.189 264.840871600003 12.257 218.93879779999799 9.374 113.45666379999851 11.083 173.73633489999983 9.014)
Error minima by case: (40.0 4 9.0 4 9.176 4 2.4873 5 12.1557 8 9.1784 4 1.8901 3 10.3239 4 10.4434 4 14.1341 4 12.6702 4 84.0 4 2.0 3 5.0262 9 20.0217 5 33.0 4 12.5364 8 6.7469 8 0.0523 4 14.5144 4 9.4039 7 3.3283 4 3.3435 7 21.1833 9 10.2569 5)
Average genome size in population (length): 70.207
Average program size in population (points): 71.207
Average percent parens in population: 0.014
Minimum age in population: 94.68151064189053
Maximum age in population: 99.64939732514563
Average age in population: 97.65426181217876
Median age in population: 97.69466803944145
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 91
Genome diversity (% unique Plush genomes):	 0.727
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 91
Syntactic diversity (% unique Push programs):	 0.727
Total error diversity:				 0.316
Error (vector) diversity:			 0.323
Behavioral diversity:				 0.324
--- Run Statistics ---
Number of program evaluations used so far: 69000
Number of point (instruction) evaluations so far: 101082490
--- Timings ---
Current time: 1529615146234 milliseconds
Total Time:         252.2 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       104.9 seconds, 41.6%
Fitness Testing:    116.7 seconds, 46.3%
Report:              30.5 seconds, 12.1%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 68
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 69
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 69
;;******************************
;; -*- Number IO problem report - generation 69
Test total error for best: 59656.74070000001
Test mean error for best: 29.82837
;;------------------------------
Outputs of best individual on training cases:
Correct output: -116.076402553 | Program output: -41.0401600   
Correct output: 24.1400847456  | Program output: -10.07181     
Correct output: 69.833290954   | Program output: 20.0219241    
Correct output: 82.4958592801  | Program output: 94.015857281  
Correct output: 34.2385110874  | Program output: 81.02551287   
Correct output: -10.7358110665 | Program output: 47.048110545  
Correct output: 1.9700532093   | Program output: -11.050100    
Correct output: -44.7956976677 | Program output: 51.052140557  
Correct output: 68.5576547673  | Program output: 46.047103777  
Correct output: -69.2536523379 | Program output: -54.0192809   
Correct output: -14.2275745396 | Program output: 41.04274047   
Correct output: -171.9767905886 | Program output: -85.0767056   
Correct output: -32.1846093265 | Program output: 1.024         
Correct output: 66.9812146721  | Program output: 73.074405151  
Correct output: 100.0259781081 | Program output: 34.03542841   
Correct output: -90.2595503995 | Program output: -34.0791089   
Correct output: -82.4635707651 | Program output: -96.0659025   
Correct output: -8.7492896214  | Program output: -50.0312401   
Correct output: -82.1329348831 | Program output: -82.0796561   
Correct output: 24.5261129925  | Program output: -73.0405184   
Correct output: -11.4065589042 | Program output: -53.0602704   
Correct output: 10.3282540908  | Program output: -77.045776    
Correct output: -51.7760580299 | Program output: -78.0755929   
Correct output: 51.8185003253  | Program output: 74.075421801  
Correct output: 110.7431489201 | Program output: 20.0219241    
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_yankdup} {:instruction float_pop} {:instruction float_mult} {:instruction in2} {:instruction float_max} {:instruction integer_dup} {:instruction print_float} {:instruction integer_mult} {:instruction float_mult} {:instruction float_pop} {:instruction float_mult} {:instruction in2} {:instruction float_sub} {:instruction float_sub} {:instruction float_mult} {:instruction integer_dup} {:instruction integer_dup} {:instruction float_add} {:instruction integer_dec} {:instruction integer_shove} {:instruction float_mult} {:instruction float_add} {:instruction float_mult} {:instruction integer_mult} {:instruction integer_dup} {:instruction float_add} {:instruction integer_dup} {:instruction float_add} {:instruction integer_dec} {:instruction integer_mult} {:instruction float_mult} {:instruction float_pop} {:instruction float_tan} {:instruction in2} {:instruction float_max} {:instruction float_pop} {:instruction float_mult} {:instruction in2} {:instruction float_yankdup} {:instruction integer_dup} {:instruction integer_pop} {:instruction integer_dec} {:instruction float_cos} {:instruction float_frominteger} {:instruction integer_swap} {:instruction integer_mod} {:instruction integer_dup} {:instruction 80} {:instruction integer_mod} {:instruction integer_dup} {:instruction integer_dup} {:instruction float_dup_items} {:instruction print_float} {:instruction float_frominteger} {:instruction print_integer} {:instruction integer_sub} {:instruction integer_inc} {:instruction integer_max} {:instruction integer_mult} {:instruction integer_shove} {:instruction print_integer} {:instruction integer_flush})
Best program: (float_yankdup float_pop float_mult in2 float_max integer_dup print_float integer_mult float_mult float_pop float_mult in2 float_sub float_sub float_mult integer_dup integer_dup float_add integer_dec integer_shove float_mult float_add float_mult integer_mult integer_dup float_add integer_dup float_add integer_dec integer_mult float_mult float_pop float_tan in2 float_max float_pop float_mult in2 float_yankdup integer_dup integer_pop integer_dec float_cos float_frominteger integer_swap integer_mod integer_dup 80 integer_mod integer_dup integer_dup float_dup_items print_float float_frominteger print_integer integer_sub integer_inc integer_max integer_mult integer_shove print_integer integer_flush)
Errors: [75.0362 8 34.2119 10 49.8114 9 11.52 6 46.787 8 57.7839 8 13.0202 9 95.8478 11 22.5106 9 15.2344 10 55.2703 10 86.9001 7 33.2086 11 6.0932 11 65.9905 9 56.1804 9 13.6023 8 41.282 10 0.0533 8 97.5666 12 41.6537 8 87.374 12 26.2995 8 22.2569 11 90.7212 8]
Total: 1376.2160000000001
Mean: 27.52432
Genome size: 62
Size: 63
Percent parens: 0.016
--- Population Statistics ---
Average total errors in population: 5128.643669699993
Median total errors in population: 1379.7245500000004
Error averages by case: (272.2071226000008 8.798 218.68211989999827 10.329 148.9808872000017 9.609 115.39997590000102 8.127 140.99987449999895 9.203 156.5988722 9.731 204.84398269999923 9.318 190.44890819999875 11.669 125.62226129999823 9.9 224.10367969999692 10.664 154.10135050000105 10.531 283.4529048000007 8.933 67.14471179999956 11.112 111.29311550000092 11.227 164.2403994000018 9.969 257.0869539000031 9.989 226.6256261999995 9.25 243.57439770000275 10.56 215.33107379999947 8.907 287.31343249999895 12.159 244.62695329999798 9.162 279.58788030000323 12.161 234.92371929999803 9.33 125.4453051999979 10.979 185.4541613 8.937)
Error minima by case: (36.0748 3 9.0 3 9.2593 6 2.4949 5 8.7625 7 9.7435 7 0.9701 2 17.1637 7 10.4527 7 0.7542 3 13.2402 7 3.9697 3 29.7747 5 5.0198 9 20.025 8 20.2584 3 12.4554 7 8.5317 9 0.0329 3 14.5466 3 10.6355 8 4.6717 3 10.1833 8 8.8175 9 21.0 7)
Average genome size in population (length): 70.027
Average program size in population (points): 71.027
Average percent parens in population: 0.014
Minimum age in population: 97.04315096916233
Maximum age in population: 101.6493973251456
Average age in population: 99.04310899868375
Median age in population: 99.05372097032392
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 93
Genome diversity (% unique Plush genomes):	 0.72
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 93
Syntactic diversity (% unique Push programs):	 0.72
Total error diversity:				 0.292
Error (vector) diversity:			 0.303
Behavioral diversity:				 0.303
--- Run Statistics ---
Number of program evaluations used so far: 70000
Number of point (instruction) evaluations so far: 102833165
--- Timings ---
Current time: 1529615149977 milliseconds
Total Time:         256.1 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       106.3 seconds, 41.5%
Fitness Testing:    118.6 seconds, 46.3%
Report:              31.1 seconds, 12.1%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 69
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 70
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 70
;;******************************
;; -*- Number IO problem report - generation 70
Test total error for best: 59656.74070000001
Test mean error for best: 29.82837
;;------------------------------
Outputs of best individual on training cases:
Correct output: -116.076402553 | Program output: -41.0401600   
Correct output: 24.1400847456  | Program output: -10.07181     
Correct output: 69.833290954   | Program output: 20.0219241    
Correct output: 82.4958592801  | Program output: 94.015857281  
Correct output: 34.2385110874  | Program output: 81.02551287   
Correct output: -10.7358110665 | Program output: 47.048110545  
Correct output: 1.9700532093   | Program output: -11.050100    
Correct output: -44.7956976677 | Program output: 51.052140557  
Correct output: 68.5576547673  | Program output: 46.047103777  
Correct output: -69.2536523379 | Program output: -54.0192809   
Correct output: -14.2275745396 | Program output: 41.04274047   
Correct output: -171.9767905886 | Program output: -85.0767056   
Correct output: -32.1846093265 | Program output: 1.024         
Correct output: 66.9812146721  | Program output: 73.074405151  
Correct output: 100.0259781081 | Program output: 34.03542841   
Correct output: -90.2595503995 | Program output: -34.0791089   
Correct output: -82.4635707651 | Program output: -96.0659025   
Correct output: -8.7492896214  | Program output: -50.0312401   
Correct output: -82.1329348831 | Program output: -82.0796561   
Correct output: 24.5261129925  | Program output: -73.0405184   
Correct output: -11.4065589042 | Program output: -53.0602704   
Correct output: 10.3282540908  | Program output: -77.045776    
Correct output: -51.7760580299 | Program output: -78.0755929   
Correct output: 51.8185003253  | Program output: 74.075421801  
Correct output: 110.7431489201 | Program output: 20.0219241    
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_yankdup} {:instruction float_pop} {:instruction float_mult} {:instruction in2} {:instruction float_max} {:instruction integer_dup} {:instruction print_float} {:instruction integer_mult} {:instruction float_mult} {:instruction float_pop} {:instruction float_mult} {:instruction in2} {:instruction float_sub} {:instruction float_sub} {:instruction float_mult} {:instruction integer_dup} {:instruction integer_dup} {:instruction float_add} {:instruction integer_dec} {:instruction integer_shove} {:instruction float_mult} {:instruction float_add} {:instruction float_mult} {:instruction integer_mult} {:instruction integer_dup} {:instruction float_add} {:instruction integer_dup} {:instruction float_add} {:instruction integer_dec} {:instruction integer_mult} {:instruction float_mult} {:instruction float_pop} {:instruction float_tan} {:instruction in2} {:instruction float_max} {:instruction float_pop} {:instruction float_mult} {:instruction in2} {:instruction float_yankdup} {:instruction integer_dup} {:instruction integer_pop} {:instruction integer_dec} {:instruction float_cos} {:instruction float_frominteger} {:instruction integer_swap} {:instruction integer_mod} {:instruction integer_dup} {:instruction 80} {:instruction integer_mod} {:instruction integer_dup} {:instruction integer_dup} {:instruction float_dup_items} {:instruction print_float} {:instruction float_frominteger} {:instruction print_integer} {:instruction integer_sub} {:instruction integer_inc} {:instruction integer_max} {:instruction integer_mult} {:instruction integer_shove} {:instruction print_integer} {:instruction integer_flush})
Best program: (float_yankdup float_pop float_mult in2 float_max integer_dup print_float integer_mult float_mult float_pop float_mult in2 float_sub float_sub float_mult integer_dup integer_dup float_add integer_dec integer_shove float_mult float_add float_mult integer_mult integer_dup float_add integer_dup float_add integer_dec integer_mult float_mult float_pop float_tan in2 float_max float_pop float_mult in2 float_yankdup integer_dup integer_pop integer_dec float_cos float_frominteger integer_swap integer_mod integer_dup 80 integer_mod integer_dup integer_dup float_dup_items print_float float_frominteger print_integer integer_sub integer_inc integer_max integer_mult integer_shove print_integer integer_flush)
Errors: [75.0362 8 34.2119 10 49.8114 9 11.52 6 46.787 8 57.7839 8 13.0202 9 95.8478 11 22.5106 9 15.2344 10 55.2703 10 86.9001 7 33.2086 11 6.0932 11 65.9905 9 56.1804 9 13.6023 8 41.282 10 0.0533 8 97.5666 12 41.6537 8 87.374 12 26.2995 8 22.2569 11 90.7212 8]
Total: 1376.2160000000001
Mean: 27.52432
Genome size: 62
Size: 63
Percent parens: 0.016
--- Population Statistics ---
Average total errors in population: 4783.470474599992
Median total errors in population: 1376.2160000000001
Error averages by case: (251.12358430000126 8.79 203.35968619999844 10.328 139.0102436000014 9.568 105.69987490000041 7.886 136.66928619999874 9.046 148.07539779999982 9.525 188.23834309999927 9.359 182.48154349999916 11.597 116.62703659999876 9.801 205.16753539999803 10.714 145.81549340000086 10.48 263.7975249999995 8.974 66.87700849999975 11.083 102.36504720000086 11.209 155.40785340000147 9.843 237.69750870000186 9.99 204.64391319999942 9.283 224.7949401000023 10.635 193.0011620999996 8.89 269.5107346999987 12.245 225.26054309999836 9.187 261.41422330000285 12.245 214.0693789999981 9.357 116.73289139999846 11.016 175.75171990000015 8.827)
Error minima by case: (24.9236 3 9.0 3 9.1667 3 2.4959 6 32.2385 7 9.7435 3 0.9701 2 44.7957 3 10.4423 3 14.2344 3 13.2402 3 13.0232 3 2.0 2 5.0932 9 20.026 4 33.0 3 12.5364 8 8.7493 8 0.0529 3 14.5466 3 10.4883 8 6.3283 3 25.2239 7 21.2569 9 21.0 4)
Average genome size in population (length): 70.053
Average program size in population (points): 71.053
Average percent parens in population: 0.014
Minimum age in population: 98.24158631956857
Maximum age in population: 102.5627182795521
Average age in population: 100.3710266353198
Median age in population: 100.3770888545546
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 79
Genome diversity (% unique Plush genomes):	 0.724
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 79
Syntactic diversity (% unique Push programs):	 0.724
Total error diversity:				 0.283
Error (vector) diversity:			 0.289
Behavioral diversity:				 0.289
--- Run Statistics ---
Number of program evaluations used so far: 71000
Number of point (instruction) evaluations so far: 104584490
--- Timings ---
Current time: 1529615154056 milliseconds
Total Time:         260.0 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       107.8 seconds, 41.5%
Fitness Testing:    120.6 seconds, 46.4%
Report:              31.5 seconds, 12.1%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 70
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 71
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 71
;;******************************
;; -*- Number IO problem report - generation 71
Test total error for best: 59653.740700000024
Test mean error for best: 29.82687
;;------------------------------
Outputs of best individual on training cases:
Correct output: -116.076402553 | Program output: -41.0401600   
Correct output: 24.1400847456  | Program output: -10.07181     
Correct output: 69.833290954   | Program output: 20.0219241    
Correct output: 82.4958592801  | Program output: 94.015857281  
Correct output: 34.2385110874  | Program output: 81.02551287   
Correct output: -10.7358110665 | Program output: 47.048110545  
Correct output: 1.9700532093   | Program output: -11.050100    
Correct output: -44.7956976677 | Program output: 51.052140557  
Correct output: 68.5576547673  | Program output: 46.047103777  
Correct output: -69.2536523379 | Program output: -54.0192809   
Correct output: -14.2275745396 | Program output: 41.04274047   
Correct output: -171.9767905886 | Program output: -85.0767056   
Correct output: -32.1846093265 | Program output: 1.024         
Correct output: 66.9812146721  | Program output: 73.074405151  
Correct output: 100.0259781081 | Program output: 34.03542841   
Correct output: -90.2595503995 | Program output: -34.0791089   
Correct output: -82.4635707651 | Program output: -96.0659025   
Correct output: -8.7492896214  | Program output: -50.0312401   
Correct output: -82.1329348831 | Program output: -82.0796561   
Correct output: 24.5261129925  | Program output: -73.0405184   
Correct output: -11.4065589042 | Program output: -53.0602704   
Correct output: 10.3282540908  | Program output: -77.045776    
Correct output: -51.7760580299 | Program output: -78.0755929   
Correct output: 51.8185003253  | Program output: 74.075421801  
Correct output: 110.7431489201 | Program output: 20.0219241    
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_yankdup} {:instruction float_pop} {:instruction float_mult} {:instruction in2} {:instruction integer_add} {:instruction float_pop} {:instruction float_mult} {:instruction in2} {:instruction float_max} {:instruction float_dup_times} {:instruction print_float} {:instruction integer_mult} {:instruction float_mult} {:instruction float_pop} {:instruction float_mult} {:instruction in2} {:instruction float_sub} {:instruction float_sub} {:instruction float_mult} {:instruction integer_dup} {:instruction integer_dup} {:instruction float_add} {:instruction integer_dec} {:instruction integer_shove} {:instruction float_mult} {:instruction float_add} {:instruction float_mult} {:instruction integer_mult} {:instruction integer_dup} {:instruction float_add} {:instruction integer_dup} {:instruction float_add} {:instruction integer_dec} {:instruction integer_mult} {:instruction float_mult} {:instruction float_pop} {:instruction float_tan} {:instruction in2} {:instruction float_max} {:instruction float_pop} {:instruction float_mult} {:instruction in2} {:instruction float_yankdup} {:instruction integer_dup} {:instruction integer_pop} {:instruction integer_dec} {:instruction float_cos} {:instruction float_frominteger} {:instruction integer_swap} {:instruction integer_mod} {:instruction integer_dup} {:instruction 80} {:instruction integer_mod} {:instruction integer_dup} {:instruction integer_dup} {:instruction float_dup_items} {:instruction print_float} {:instruction float_frominteger} {:instruction print_integer} {:instruction integer_sub} {:instruction integer_inc} {:instruction integer_max} {:instruction integer_stackdepth} {:instruction float_shove} {:instruction float_mult} {:instruction integer_max} {:instruction integer_stackdepth} {:instruction float_shove} {:instruction float_dup} {:instruction float_inc} {:instruction integer_mult} {:instruction integer_shove} {:instruction print_integer} {:instruction integer_flush})
Best program: (float_yankdup float_pop float_mult in2 integer_add float_pop float_mult in2 float_max float_dup_times print_float integer_mult float_mult float_pop float_mult in2 float_sub float_sub float_mult integer_dup integer_dup float_add integer_dec integer_shove float_mult float_add float_mult integer_mult integer_dup float_add integer_dup float_add integer_dec integer_mult float_mult float_pop float_tan in2 float_max float_pop float_mult in2 float_yankdup integer_dup integer_pop integer_dec float_cos float_frominteger integer_swap integer_mod integer_dup 80 integer_mod integer_dup integer_dup float_dup_items print_float float_frominteger print_integer integer_sub integer_inc integer_max integer_stackdepth float_shove float_mult integer_max integer_stackdepth float_shove float_dup float_inc integer_mult integer_shove print_integer integer_flush)
Errors: [75.0362 8 34.2119 10 49.8114 9 11.52 6 46.787 8 57.7839 8 13.0202 9 95.8478 11 22.5106 9 15.2344 10 55.2703 10 86.9001 7 33.2086 11 6.0932 11 65.9905 9 56.1804 9 13.6023 8 41.282 10 0.0533 8 97.5666 12 41.6537 8 87.374 12 26.2995 8 22.2569 11 90.7212 8]
Total: 1376.2160000000001
Mean: 27.52432
Genome size: 74
Size: 75
Percent parens: 0.013
--- Population Statistics ---
Average total errors in population: 4809.04822499999
Median total errors in population: 1376.2190000000003
Error averages by case: (254.9089572000013 8.798 207.81725179999822 10.287 139.73861370000142 9.618 107.59043770000035 8.123 135.13759449999836 9.2 147.93515269999932 9.676 192.3511602999991 9.326 182.149214599999 11.672 116.8252700999988 9.88 206.816527399998 10.715 145.73815950000076 10.51 265.9251869999994 8.947 60.43612319999994 11.102 102.38135080000104 11.221 155.6706118000011 9.925 240.09345360000222 9.963 206.5135571999993 9.284 226.20276130000232 10.599 195.97098109999956 8.897 270.39657979999834 12.191 226.9571586999982 9.203 261.9810968000029 12.198 215.872911699998 9.357 116.63095649999855 11.011 176.4171560000001 8.887)
Error minima by case: (40.0 4 9.0 4 9.176 4 2.4873 6 29.2203 8 10.1578 4 0.9701 3 17.3557 4 10.4434 4 14.1779 4 13.2124 4 84.0 4 1.9555 2 5.0204 9 20.0217 5 33.0 4 12.5364 8 7.9183 9 0.0329 4 14.5466 4 10.437 8 5.2487 4 21.547 8 21.1833 8 21.0 5)
Average genome size in population (length): 69.974
Average program size in population (points): 70.974
Average percent parens in population: 0.014
Minimum age in population: 99.39811095949544
Maximum age in population: 103.6950949065908
Average age in population: 101.7415666498777
Median age in population: 101.762730941924
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 54
Genome diversity (% unique Plush genomes):	 0.769
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 54
Syntactic diversity (% unique Push programs):	 0.769
Total error diversity:				 0.289
Error (vector) diversity:			 0.297
Behavioral diversity:				 0.298
--- Run Statistics ---
Number of program evaluations used so far: 72000
Number of point (instruction) evaluations so far: 106333840
--- Timings ---
Current time: 1529615158211 milliseconds
Total Time:         264.3 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       109.4 seconds, 41.4%
Fitness Testing:    122.7 seconds, 46.4%
Report:              32.1 seconds, 12.2%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 71
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 72
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 72
;;******************************
;; -*- Number IO problem report - generation 72
Test total error for best: 59656.74070000001
Test mean error for best: 29.82837
;;------------------------------
Outputs of best individual on training cases:
Correct output: -116.076402553 | Program output: -41.0401600   
Correct output: 24.1400847456  | Program output: -10.07181     
Correct output: 69.833290954   | Program output: 20.0219241    
Correct output: 82.4958592801  | Program output: 94.015857281  
Correct output: 34.2385110874  | Program output: 81.02551287   
Correct output: -10.7358110665 | Program output: 47.048110545  
Correct output: 1.9700532093   | Program output: -11.050100    
Correct output: -44.7956976677 | Program output: 51.052140557  
Correct output: 68.5576547673  | Program output: 46.047103777  
Correct output: -69.2536523379 | Program output: -54.0192809   
Correct output: -14.2275745396 | Program output: 41.04274047   
Correct output: -171.9767905886 | Program output: -85.0767056   
Correct output: -32.1846093265 | Program output: 1.024         
Correct output: 66.9812146721  | Program output: 73.074405151  
Correct output: 100.0259781081 | Program output: 34.03542841   
Correct output: -90.2595503995 | Program output: -34.0791089   
Correct output: -82.4635707651 | Program output: -96.0659025   
Correct output: -8.7492896214  | Program output: -50.0312401   
Correct output: -82.1329348831 | Program output: -82.0796561   
Correct output: 24.5261129925  | Program output: -73.0405184   
Correct output: -11.4065589042 | Program output: -53.0602704   
Correct output: 10.3282540908  | Program output: -77.045776    
Correct output: -51.7760580299 | Program output: -78.0755929   
Correct output: 51.8185003253  | Program output: 74.075421801  
Correct output: 110.7431489201 | Program output: 20.0219241    
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_shove} {:instruction float_pop} {:instruction float_mult} {:instruction in2} {:instruction float_max} {:instruction integer_dup} {:instruction integer_fromfloat} {:instruction integer_mult} {:instruction float_mult} {:instruction float_pop} {:instruction float_mult} {:instruction in2} {:instruction float_sub} {:instruction float_sub} {:instruction float_mult} {:instruction integer_dup} {:instruction integer_dup} {:instruction float_add} {:instruction integer_dec} {:instruction integer_shove} {:instruction float_mult} {:instruction float_add} {:instruction float_mult} {:instruction integer_mult} {:instruction integer_dup} {:instruction float_add} {:instruction integer_dup} {:instruction float_add} {:instruction integer_dec} {:instruction integer_mult} {:instruction float_mult} {:instruction float_pop} {:instruction float_tan} {:instruction in2} {:instruction float_max} {:instruction float_pop} {:instruction float_mult} {:instruction in2} {:instruction float_yankdup} {:instruction integer_dup} {:instruction integer_pop} {:instruction integer_dec} {:instruction float_cos} {:instruction float_frominteger} {:instruction integer_swap} {:instruction integer_mod} {:instruction integer_dup} {:instruction 80} {:instruction integer_mod} {:instruction integer_dup} {:instruction integer_dup} {:instruction float_dup_items} {:instruction print_float} {:instruction float_frominteger} {:instruction print_integer} {:instruction integer_sub} {:instruction integer_inc} {:instruction integer_max} {:instruction integer_mult} {:instruction integer_shove} {:instruction print_integer} {:instruction integer_flush})
Best program: (integer_shove float_pop float_mult in2 float_max integer_dup integer_fromfloat integer_mult float_mult float_pop float_mult in2 float_sub float_sub float_mult integer_dup integer_dup float_add integer_dec integer_shove float_mult float_add float_mult integer_mult integer_dup float_add integer_dup float_add integer_dec integer_mult float_mult float_pop float_tan in2 float_max float_pop float_mult in2 float_yankdup integer_dup integer_pop integer_dec float_cos float_frominteger integer_swap integer_mod integer_dup 80 integer_mod integer_dup integer_dup float_dup_items print_float float_frominteger print_integer integer_sub integer_inc integer_max integer_mult integer_shove print_integer integer_flush)
Errors: [75.0362 8 34.2119 10 49.8114 9 11.52 6 46.787 8 57.7839 8 13.0202 9 95.8478 11 22.5106 9 15.2344 10 55.2703 10 86.9001 7 33.2086 11 6.0932 11 65.9905 9 56.1804 9 13.6023 8 41.282 10 0.0533 8 97.5666 12 41.6537 8 87.374 12 26.2995 8 22.2569 11 90.7212 8]
Total: 1376.2160000000001
Mean: 27.52432
Genome size: 62
Size: 63
Percent parens: 0.016
--- Population Statistics ---
Average total errors in population: 5138.749150899992
Median total errors in population: 1376.2160000000001
Error averages by case: (277.35664390000034 8.851 234.47618739999774 10.343 140.4477080000014 9.619 109.61446080000013 8.034 138.96197379999873 9.151 149.24125339999924 9.639 219.98896319999912 9.349 183.4622873999991 11.667 118.12481059999901 9.86 230.69853269999726 10.723 146.89276360000085 10.553 287.66181510000064 8.941 66.56578289999969 11.086 104.104019500001 11.208 157.10474680000135 9.899 262.613771500003 9.977 229.84493569999947 9.302 249.53320650000288 10.617 219.48069469999967 8.937 292.64306109999893 12.257 249.9510108999979 9.185 284.72102180000326 12.242 238.96176239999753 9.352 118.45336909999872 11.007 177.16436810000013 8.881)
Error minima by case: (65.9971 7 21.0683 8 10.176 9 2.4873 5 31.157 7 9.6558 6 1.08 8 5.2555 10 11.4434 8 14.1748 8 13.1476 9 85.9003 6 17.8266 9 5.0243 9 20.0217 8 40.1804 9 12.5364 8 7.6693 8 0.0523 7 14.5144 10 10.3266 7 6.2825 9 1.6967 7 21.1871 8 9.2569 7)
Average genome size in population (length): 70.079
Average program size in population (points): 71.079
Average percent parens in population: 0.014
Minimum age in population: 100.6558729452086
Maximum age in population: 104.9863489170724
Average age in population: 103.1312234757603
Median age in population: 103.1925626063324
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 40
Genome diversity (% unique Plush genomes):	 0.795
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 40
Syntactic diversity (% unique Push programs):	 0.795
Total error diversity:				 0.288
Error (vector) diversity:			 0.296
Behavioral diversity:				 0.296
--- Run Statistics ---
Number of program evaluations used so far: 73000
Number of point (instruction) evaluations so far: 108085815
--- Timings ---
Current time: 1529615161965 milliseconds
Total Time:         268.0 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       110.8 seconds, 41.3%
Fitness Testing:    124.6 seconds, 46.5%
Report:              32.6 seconds, 12.2%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 72
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 73
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 73
;;******************************
;; -*- Number IO problem report - generation 73
Test total error for best: 64463.01760000003
Test mean error for best: 32.23151
;;------------------------------
Outputs of best individual on training cases:
Correct output: -116.076402553 | Program output: -41.0401600   
Correct output: 24.1400847456  | Program output: -10.07181     
Correct output: 69.833290954   | Program output: 20.0219241    
Correct output: 82.4958592801  | Program output: 94.015857281  
Correct output: 34.2385110874  | Program output: 81.02551287   
Correct output: -10.7358110665 | Program output: 47.048110545  
Correct output: 1.9700532093   | Program output: -11.050100    
Correct output: -44.7956976677 | Program output: 51.052140557  
Correct output: 68.5576547673  | Program output: 46.047103777  
Correct output: -69.2536523379 | Program output: -54.0192809   
Correct output: -14.2275745396 | Program output: 41.04274047   
Correct output: -171.9767905886 | Program output: -85.0767056   
Correct output: -32.1846093265 | Program output: 1.024         
Correct output: 66.9812146721  | Program output: 73.074405151  
Correct output: 100.0259781081 | Program output: 34.03542841   
Correct output: -90.2595503995 | Program output: -34.0791089   
Correct output: -82.4635707651 | Program output: -96.0659025   
Correct output: -8.7492896214  | Program output: -50.0312401   
Correct output: -82.1329348831 | Program output: -82.0796561   
Correct output: 24.5261129925  | Program output: -73.0405184   
Correct output: -11.4065589042 | Program output: -53.0602704   
Correct output: 10.3282540908  | Program output: -77.045776    
Correct output: -51.7760580299 | Program output: -78.0755929   
Correct output: 51.8185003253  | Program output: 74.075421801  
Correct output: 110.7431489201 | Program output: 20.0219241    
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_yankdup} {:instruction float_pop} {:instruction float_mult} {:instruction in2} {:instruction float_yankdup} {:instruction float_pop} {:instruction float_mult} {:instruction in2} {:instruction float_max} {:instruction integer_dup} {:instruction print_float} {:instruction integer_mult} {:instruction float_mult} {:instruction float_pop} {:instruction float_mult} {:instruction in2} {:instruction float_sub} {:instruction float_sub} {:instruction float_mult} {:instruction integer_dup} {:instruction integer_dup} {:instruction float_add} {:instruction integer_dec} {:instruction integer_shove} {:instruction float_mult} {:instruction float_add} {:instruction float_mult} {:instruction integer_mult} {:instruction integer_dup} {:instruction float_add} {:instruction integer_dup} {:instruction float_add} {:instruction integer_dec} {:instruction integer_mult} {:instruction float_mult} {:instruction float_pop} {:instruction float_tan} {:instruction in2} {:instruction float_max} {:instruction float_pop} {:instruction float_mult} {:instruction in2} {:instruction float_yankdup} {:instruction integer_dup} {:instruction integer_pop} {:instruction integer_dec} {:instruction float_cos} {:instruction float_frominteger} {:instruction integer_swap} {:instruction integer_mod} {:instruction integer_dup} {:instruction 80} {:instruction integer_mod} {:instruction integer_dup} {:instruction integer_dup} {:instruction float_dup_items} {:instruction print_float} {:instruction float_frominteger} {:instruction print_integer} {:instruction integer_sub} {:instruction integer_inc} {:instruction integer_max} {:instruction integer_stackdepth} {:instruction float_shove} {:instruction float_mult} {:instruction integer_max} {:instruction integer_stackdepth} {:instruction float_shove} {:instruction float_dup} {:instruction float_inc} {:instruction integer_mult} {:instruction integer_shove} {:instruction print_integer} {:instruction integer_flush})
Best program: (float_yankdup float_pop float_mult in2 float_yankdup float_pop float_mult in2 float_max integer_dup print_float integer_mult float_mult float_pop float_mult in2 float_sub float_sub float_mult integer_dup integer_dup float_add integer_dec integer_shove float_mult float_add float_mult integer_mult integer_dup float_add integer_dup float_add integer_dec integer_mult float_mult float_pop float_tan in2 float_max float_pop float_mult in2 float_yankdup integer_dup integer_pop integer_dec float_cos float_frominteger integer_swap integer_mod integer_dup 80 integer_mod integer_dup integer_dup float_dup_items print_float float_frominteger print_integer integer_sub integer_inc integer_max integer_stackdepth float_shove float_mult integer_max integer_stackdepth float_shove float_dup float_inc integer_mult integer_shove print_integer integer_flush)
Errors: [75.0362 8 34.2119 10 49.8114 9 11.52 6 46.787 8 57.7839 8 13.0202 9 95.8478 11 22.5106 9 15.2344 10 55.2703 10 86.9001 7 33.2086 11 6.0932 11 65.9905 9 56.1804 9 13.6023 8 41.282 10 0.0533 8 97.5666 12 41.6537 8 87.374 12 26.2995 8 22.2569 11 90.7212 8]
Total: 1376.2160000000001
Mean: 27.52432
Genome size: 74
Size: 75
Percent parens: 0.013
--- Population Statistics ---
Average total errors in population: 4643.441778799991
Median total errors in population: 1376.2160000000001
Error averages by case: (253.63798310000126 8.744 212.77726419999823 10.311 123.3995174000011 9.589 93.28857450000017 7.973 122.06907539999843 9.08 133.41331579999883 9.615 195.1773595999992 9.325 169.33245289999925 11.605 101.44078929999895 9.81 205.46391999999778 10.708 131.1145734000006 10.493 264.8739192999996 8.95 56.91502909999983 11.091 87.85626440000085 11.145 141.00319420000068 9.861 238.38532910000234 9.994 205.4449865999995 9.247 227.14148550000255 10.612 195.76144959999974 8.868 269.77841299999824 12.239 225.6095844999981 9.161 262.57000650000316 12.215 214.06752879999814 9.328 102.44585029999861 10.953 160.6889123 8.868)
Error minima by case: (74.0362 7 2.1401 9 1.8314 8 2.4873 5 12.2385 8 9.7309 8 1.9656 7 43.7904 10 0.5528 7 14.1748 8 13.2233 9 85.9001 7 31.1796 7 1.0218 9 20.0217 9 55.1804 9 12.5364 7 7.7469 8 0.0525 7 2.5261 10 10.4039 8 6.2705 8 25.2239 8 2.6779 8 10.2569 8)
Average genome size in population (length): 70.011
Average program size in population (points): 71.011
Average percent parens in population: 0.014
Minimum age in population: 101.6558729452086
Maximum age in population: 106.5867789310186
Average age in population: 104.4920890274851
Median age in population: 104.506512795362
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 35
Genome diversity (% unique Plush genomes):	 0.791
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 35
Syntactic diversity (% unique Push programs):	 0.791
Total error diversity:				 0.276
Error (vector) diversity:			 0.286
Behavioral diversity:				 0.286
--- Run Statistics ---
Number of program evaluations used so far: 74000
Number of point (instruction) evaluations so far: 109836090
--- Timings ---
Current time: 1529615165894 milliseconds
Total Time:         271.9 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       112.3 seconds, 41.3%
Fitness Testing:    126.5 seconds, 46.5%
Report:              33.0 seconds, 12.2%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 73
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 74
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 74
;;******************************
;; -*- Number IO problem report - generation 74
Test total error for best: 59653.740700000024
Test mean error for best: 29.82687
;;------------------------------
Outputs of best individual on training cases:
Correct output: -116.076402553 | Program output: -41.0401600   
Correct output: 24.1400847456  | Program output: -10.07181     
Correct output: 69.833290954   | Program output: 20.0219241    
Correct output: 82.4958592801  | Program output: 94.015857281  
Correct output: 34.2385110874  | Program output: 81.02551287   
Correct output: -10.7358110665 | Program output: 47.048110545  
Correct output: 1.9700532093   | Program output: -11.050100    
Correct output: -44.7956976677 | Program output: 51.052140557  
Correct output: 68.5576547673  | Program output: 46.047103777  
Correct output: -69.2536523379 | Program output: -54.0192809   
Correct output: -14.2275745396 | Program output: 41.04274047   
Correct output: -171.9767905886 | Program output: -85.0767056   
Correct output: -32.1846093265 | Program output: 1.024         
Correct output: 66.9812146721  | Program output: 73.074405151  
Correct output: 100.0259781081 | Program output: 34.03542841   
Correct output: -90.2595503995 | Program output: -34.0791089   
Correct output: -82.4635707651 | Program output: -96.0659025   
Correct output: -8.7492896214  | Program output: -50.0312401   
Correct output: -82.1329348831 | Program output: -82.0796561   
Correct output: 24.5261129925  | Program output: -73.0405184   
Correct output: -11.4065589042 | Program output: -53.0602704   
Correct output: 10.3282540908  | Program output: -77.045776    
Correct output: -51.7760580299 | Program output: -78.0755929   
Correct output: 51.8185003253  | Program output: 74.075421801  
Correct output: 110.7431489201 | Program output: 20.0219241    
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_yankdup} {:instruction float_pop} {:instruction float_mult} {:instruction in2} {:instruction float_max} {:instruction integer_dup} {:instruction print_float} {:instruction integer_mult} {:instruction float_mult} {:instruction float_pop} {:instruction float_mult} {:instruction in2} {:instruction float_sub} {:instruction float_sub} {:instruction float_mult} {:instruction integer_dup} {:instruction integer_dup} {:instruction float_add} {:instruction integer_dec} {:instruction integer_shove} {:instruction float_mult} {:instruction float_add} {:instruction float_mult} {:instruction integer_mult} {:instruction integer_dup} {:instruction float_add} {:instruction integer_dup} {:instruction float_add} {:instruction integer_dec} {:instruction integer_mult} {:instruction float_mult} {:instruction float_pop} {:instruction float_tan} {:instruction in2} {:instruction float_max} {:instruction float_pop} {:instruction float_mult} {:instruction in2} {:instruction float_yankdup} {:instruction integer_dup} {:instruction integer_pop} {:instruction integer_dec} {:instruction float_cos} {:instruction float_frominteger} {:instruction integer_swap} {:instruction integer_mod} {:instruction integer_dup} {:instruction 80} {:instruction integer_mod} {:instruction integer_dup} {:instruction integer_dup} {:instruction float_dup_items} {:instruction print_float} {:instruction float_frominteger} {:instruction print_integer} {:instruction integer_sub} {:instruction integer_inc} {:instruction integer_max} {:instruction integer_stackdepth} {:instruction float_shove} {:instruction float_mult} {:instruction integer_max} {:instruction integer_stackdepth} {:instruction float_shove} {:instruction float_dup} {:instruction float_inc} {:instruction integer_mult} {:instruction integer_shove} {:instruction print_integer} {:instruction 23})
Best program: (float_yankdup float_pop float_mult in2 float_max integer_dup print_float integer_mult float_mult float_pop float_mult in2 float_sub float_sub float_mult integer_dup integer_dup float_add integer_dec integer_shove float_mult float_add float_mult integer_mult integer_dup float_add integer_dup float_add integer_dec integer_mult float_mult float_pop float_tan in2 float_max float_pop float_mult in2 float_yankdup integer_dup integer_pop integer_dec float_cos float_frominteger integer_swap integer_mod integer_dup 80 integer_mod integer_dup integer_dup float_dup_items print_float float_frominteger print_integer integer_sub integer_inc integer_max integer_stackdepth float_shove float_mult integer_max integer_stackdepth float_shove float_dup float_inc integer_mult integer_shove print_integer 23)
Errors: [75.0362 8 34.2119 10 49.8114 9 11.52 6 46.787 8 57.7839 8 13.0202 9 95.8478 11 22.5106 9 15.2344 10 55.2703 10 86.9001 7 33.2086 11 6.0932 11 65.9905 9 56.1804 9 13.6023 8 41.282 10 0.0533 8 97.5666 12 41.6537 8 87.374 12 26.2995 8 22.2569 11 90.7212 8]
Total: 1376.2160000000001
Mean: 27.52432
Genome size: 70
Size: 71
Percent parens: 0.014
--- Population Statistics ---
Average total errors in population: 4962.191303399987
Median total errors in population: 1379.2160000000003
Error averages by case: (266.94764100000094 8.775 224.60721149999824 10.327 137.5792024000015 9.616 105.1604946000004 8.067 135.16914179999867 9.198 145.5805813999997 9.714 210.48896389999916 9.318 180.00297989999873 11.658 114.1428117999987 9.851 219.40339349999766 10.708 143.048226400001 10.499 276.2695130000008 8.982 69.30939029999954 11.061 99.84160640000093 11.206 153.06109280000172 9.89 251.81429520000253 9.989 219.07013489999946 9.287 238.89157150000264 10.592 206.83807779999972 8.87 283.2126697999995 12.217 239.6291253999979 9.188 274.80693870000295 12.195 228.2600185999979 9.336 114.25094389999857 10.998 174.3982768999999 8.865)
Error minima by case: (40.0 7 9.0 6 10.1667 6 2.4959 5 21.9786 8 9.7299 6 0.9599 6 43.7947 6 11.4423 6 14.2344 8 13.2253 6 29.0232 7 2.0 3 5.0932 9 20.026 7 33.0 8 12.5364 7 7.7479 8 0.0513 7 12.2662 8 10.4046 8 1.9317 8 25.2239 7 21.2569 9 21.0 7)
Average genome size in population (length): 70.025
Average program size in population (points): 71.025
Average percent parens in population: 0.014
Minimum age in population: 102.6626514247459
Maximum age in population: 108.2967898774853
Average age in population: 105.8991900309579
Median age in population: 105.9488559447453
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 36
Genome diversity (% unique Plush genomes):	 0.799
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 36
Syntactic diversity (% unique Push programs):	 0.799
Total error diversity:				 0.296
Error (vector) diversity:			 0.303
Behavioral diversity:				 0.303
--- Run Statistics ---
Number of program evaluations used so far: 75000
Number of point (instruction) evaluations so far: 111586715
--- Timings ---
Current time: 1529615170001 milliseconds
Total Time:         276.0 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       113.7 seconds, 41.2%
Fitness Testing:    128.6 seconds, 46.6%
Report:              33.6 seconds, 12.2%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 74
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 75
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 75
;;******************************
;; -*- Number IO problem report - generation 75
Test total error for best: 59656.74070000001
Test mean error for best: 29.82837
;;------------------------------
Outputs of best individual on training cases:
Correct output: -116.076402553 | Program output: -41.0401600   
Correct output: 24.1400847456  | Program output: -10.07181     
Correct output: 69.833290954   | Program output: 20.0219241    
Correct output: 82.4958592801  | Program output: 94.015857281  
Correct output: 34.2385110874  | Program output: 81.02551287   
Correct output: -10.7358110665 | Program output: 47.048110545  
Correct output: 1.9700532093   | Program output: -11.050100    
Correct output: -44.7956976677 | Program output: 51.052140557  
Correct output: 68.5576547673  | Program output: 46.047103777  
Correct output: -69.2536523379 | Program output: -54.0192809   
Correct output: -14.2275745396 | Program output: 41.04274047   
Correct output: -171.9767905886 | Program output: -85.0767056   
Correct output: -32.1846093265 | Program output: 1.024         
Correct output: 66.9812146721  | Program output: 73.074405151  
Correct output: 100.0259781081 | Program output: 34.03542841   
Correct output: -90.2595503995 | Program output: -34.0791089   
Correct output: -82.4635707651 | Program output: -96.0659025   
Correct output: -8.7492896214  | Program output: -50.0312401   
Correct output: -82.1329348831 | Program output: -82.0796561   
Correct output: 24.5261129925  | Program output: -73.0405184   
Correct output: -11.4065589042 | Program output: -53.0602704   
Correct output: 10.3282540908  | Program output: -77.045776    
Correct output: -51.7760580299 | Program output: -78.0755929   
Correct output: 51.8185003253  | Program output: 74.075421801  
Correct output: 110.7431489201 | Program output: 20.0219241    
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_yankdup} {:instruction float_pop} {:instruction float_mult} {:instruction in2} {:instruction float_max} {:instruction integer_dup} {:instruction print_float} {:instruction integer_mult} {:instruction float_mult} {:instruction float_pop} {:instruction float_mult} {:instruction in2} {:instruction float_sub} {:instruction in1} {:instruction float_mult} {:instruction integer_dup} {:instruction integer_dup} {:instruction float_add} {:instruction integer_dec} {:instruction integer_shove} {:instruction float_mult} {:instruction float_add} {:instruction float_dec} {:instruction integer_mult} {:instruction integer_dup} {:instruction float_add} {:instruction integer_dup} {:instruction float_add} {:instruction integer_dec} {:instruction integer_mult} {:instruction float_mult} {:instruction float_pop} {:instruction float_tan} {:instruction in2} {:instruction float_max} {:instruction float_pop} {:instruction float_mult} {:instruction in2} {:instruction float_yankdup} {:instruction integer_dup} {:instruction integer_pop} {:instruction integer_dec} {:instruction float_cos} {:instruction float_frominteger} {:instruction integer_swap} {:instruction integer_mod} {:instruction integer_dup} {:instruction 80} {:instruction integer_mod} {:instruction integer_dup} {:instruction integer_dup} {:instruction float_dup_items} {:instruction print_float} {:instruction float_frominteger} {:instruction print_integer} {:instruction integer_sub} {:instruction integer_inc} {:instruction integer_max} {:instruction integer_mult} {:instruction integer_shove} {:instruction print_integer} {:instruction integer_flush})
Best program: (float_yankdup float_pop float_mult in2 float_max integer_dup print_float integer_mult float_mult float_pop float_mult in2 float_sub in1 float_mult integer_dup integer_dup float_add integer_dec integer_shove float_mult float_add float_dec integer_mult integer_dup float_add integer_dup float_add integer_dec integer_mult float_mult float_pop float_tan in2 float_max float_pop float_mult in2 float_yankdup integer_dup integer_pop integer_dec float_cos float_frominteger integer_swap integer_mod integer_dup 80 integer_mod integer_dup integer_dup float_dup_items print_float float_frominteger print_integer integer_sub integer_inc integer_max integer_mult integer_shove print_integer integer_flush)
Errors: [75.0362 8 34.2119 10 49.8114 9 11.52 6 46.787 8 57.7839 8 13.0202 9 95.8478 11 22.5106 9 15.2344 10 55.2703 10 86.9001 7 33.2086 11 6.0932 11 65.9905 9 56.1804 9 13.6023 8 41.282 10 0.0533 8 97.5666 12 41.6537 8 87.374 12 26.2995 8 22.2569 11 90.7212 8]
Total: 1376.2160000000001
Mean: 27.52432
Genome size: 62
Size: 63
Percent parens: 0.016
--- Population Statistics ---
Average total errors in population: 4985.41968059999
Median total errors in population: 1379.6945500000002
Error averages by case: (265.53303690000104 8.834 226.50137039999808 10.31 140.48040980000127 9.635 107.76996070000062 8.145 136.36917619999866 9.186 146.95561029999948 9.745 209.26413629999908 9.297 181.25338469999932 11.706 116.86020339999877 9.879 220.15128849999738 10.736 144.74373150000076 10.533 276.76938290000015 8.993 67.86196749999966 11.051 101.4221997000008 11.214 155.86358660000144 9.941 252.49806540000276 10.023 218.44675209999934 9.323 239.4381623000028 10.619 209.0346673999996 8.9 282.26590799999883 12.205 238.94903669999786 9.241 273.20627120000347 12.231 228.77979789999767 9.366 116.6352426999984 10.979 177.34033150000042 8.934)
Error minima by case: (35.0748 4 9.0 4 10.176 4 2.4 4 12.2185 8 9.7299 4 0.9701 3 0.2095 4 3.4423 4 14.2344 4 13.2233 4 2.9697 4 2.0 3 5.0204 8 19.9905 5 23.2585 4 12.5364 7 7.7479 8 0.0329 4 14.5144 4 10.4046 8 5.2489 4 6.7701 7 6.8185 8 21.0 5)
Average genome size in population (length): 70.27
Average program size in population (points): 71.27
Average percent parens in population: 0.014
Minimum age in population: 103.6694299042832
Maximum age in population: 109.5088128065054
Average age in population: 107.2159984565621
Median age in population: 107.2906650157156
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 30
Genome diversity (% unique Plush genomes):	 0.813
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 30
Syntactic diversity (% unique Push programs):	 0.813
Total error diversity:				 0.286
Error (vector) diversity:			 0.3
Behavioral diversity:				 0.3
--- Run Statistics ---
Number of program evaluations used so far: 76000
Number of point (instruction) evaluations so far: 113343465
--- Timings ---
Current time: 1529615173977 milliseconds
Total Time:         280.1 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       115.2 seconds, 41.1%
Fitness Testing:    130.6 seconds, 46.6%
Report:              34.1 seconds, 12.2%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 75
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 76
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 76
;;******************************
;; -*- Number IO problem report - generation 76
Test total error for best: 59657.73969999999
Test mean error for best: 29.82887
;;------------------------------
Outputs of best individual on training cases:
Correct output: -116.076402553 | Program output: -41.0401600   
Correct output: 24.1400847456  | Program output: -10.07181     
Correct output: 69.833290954   | Program output: 20.0219241    
Correct output: 82.4958592801  | Program output: 94.015857281  
Correct output: 34.2385110874  | Program output: 81.02551287   
Correct output: -10.7358110665 | Program output: 47.048110545  
Correct output: 1.9700532093   | Program output: -11.050100    
Correct output: -44.7956976677 | Program output: 51.052140557  
Correct output: 68.5576547673  | Program output: 46.047103777  
Correct output: -69.2536523379 | Program output: -54.0192809   
Correct output: -14.2275745396 | Program output: 41.04274047   
Correct output: -171.9767905886 | Program output: -85.0767056   
Correct output: -32.1846093265 | Program output: 1.026         
Correct output: 66.9812146721  | Program output: 73.074405151  
Correct output: 100.0259781081 | Program output: 34.03542841   
Correct output: -90.2595503995 | Program output: -34.0791089   
Correct output: -82.4635707651 | Program output: -96.0659025   
Correct output: -8.7492896214  | Program output: -50.0312401   
Correct output: -82.1329348831 | Program output: -82.0796561   
Correct output: 24.5261129925  | Program output: -73.0405184   
Correct output: -11.4065589042 | Program output: -53.0602704   
Correct output: 10.3282540908  | Program output: -77.045776    
Correct output: -51.7760580299 | Program output: -78.0755929   
Correct output: 51.8185003253  | Program output: 74.075421801  
Correct output: 110.7431489201 | Program output: 20.0219241    
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_mult} {:instruction in2} {:instruction integer_dup} {:instruction print_float} {:instruction integer_mult} {:instruction float_mult} {:instruction float_pop} {:instruction float_mult} {:instruction in2} {:instruction float_sub} {:instruction float_sub} {:instruction float_mult} {:instruction integer_add} {:instruction float_mult} {:instruction float_pop} {:instruction float_mult} {:instruction in2} {:instruction float_max} {:instruction integer_dup} {:instruction print_float} {:instruction integer_mult} {:instruction float_mult} {:instruction float_pop} {:instruction float_mult} {:instruction in2} {:instruction float_sub} {:instruction float_sub} {:instruction float_mult} {:instruction integer_dup} {:instruction integer_dup} {:instruction float_add} {:instruction integer_dec} {:instruction integer_shove} {:instruction float_mult} {:instruction float_add} {:instruction float_mult} {:instruction integer_mult} {:instruction integer_dup} {:instruction float_add} {:instruction integer_dup} {:instruction float_add} {:instruction integer_dec} {:instruction integer_mult} {:instruction float_mult} {:instruction float_pop} {:instruction float_tan} {:instruction in2} {:instruction float_max} {:instruction float_pop} {:instruction float_mult} {:instruction in2} {:instruction float_yankdup} {:instruction integer_dup} {:instruction integer_pop} {:instruction integer_dec} {:instruction float_cos} {:instruction float_frominteger} {:instruction integer_swap} {:instruction integer_mod} {:instruction integer_dup} {:instruction 80} {:instruction integer_mod} {:instruction integer_dup} {:instruction integer_dup} {:instruction float_dup_items} {:instruction print_float} {:instruction float_frominteger} {:instruction print_integer} {:instruction integer_sub} {:instruction integer_inc} {:instruction integer_max} {:instruction integer_stackdepth} {:instruction float_shove} {:instruction float_mult} {:instruction integer_max} {:instruction integer_stackdepth} {:instruction float_shove} {:instruction float_dup} {:instruction float_dup} {:instruction integer_mult} {:instruction integer_add} {:instruction print_integer} {:instruction integer_flush})
Best program: (float_mult in2 integer_dup print_float integer_mult float_mult float_pop float_mult in2 float_sub float_sub float_mult integer_add float_mult float_pop float_mult in2 float_max integer_dup print_float integer_mult float_mult float_pop float_mult in2 float_sub float_sub float_mult integer_dup integer_dup float_add integer_dec integer_shove float_mult float_add float_mult integer_mult integer_dup float_add integer_dup float_add integer_dec integer_mult float_mult float_pop float_tan in2 float_max float_pop float_mult in2 float_yankdup integer_dup integer_pop integer_dec float_cos float_frominteger integer_swap integer_mod integer_dup 80 integer_mod integer_dup integer_dup float_dup_items print_float float_frominteger print_integer integer_sub integer_inc integer_max integer_stackdepth float_shove float_mult integer_max integer_stackdepth float_shove float_dup float_dup integer_mult integer_add print_integer integer_flush)
Errors: [75.0362 8 34.2119 10 49.8114 9 11.52 6 46.787 8 57.7839 8 13.0202 9 95.8478 11 22.5106 9 15.2344 10 55.2703 10 86.9001 7 33.2106 10 6.0932 11 65.9905 9 56.1804 9 13.6023 8 41.282 10 0.0533 8 97.5666 12 41.6537 8 87.374 12 26.2995 8 22.2569 11 90.7212 8]
Total: 1375.218
Mean: 27.50436
Genome size: 83
Size: 84
Percent parens: 0.012
--- Population Statistics ---
Average total errors in population: 4599.196899099995
Median total errors in population: 1376.2160000000001
Error averages by case: (242.84249910000133 8.797 190.25308919999853 10.329 134.19351890000135 9.598 102.80916700000061 7.983 131.78250029999845 9.16 144.09110439999935 9.638 175.13652609999937 9.309 179.503436399999 11.655 113.00371509999869 9.83 194.38456329999795 10.718 141.89321470000078 10.52 254.3289735999994 8.819 61.839929699999765 11.07 98.45437670000089 11.23 152.18155660000113 9.89 228.0709734000025 9.915 194.55690709999928 9.203 213.96966730000253 10.564 183.07676009999975 8.892 258.8312651999984 12.194 215.14315129999832 9.125 251.9248931000028 12.203 203.430171499998 9.253 112.72734759999842 11.018 171.0125914 8.842)
Error minima by case: (74.0364 7 22.1401 8 10.1667 9 2.4959 6 14.2385 8 9.6876 7 0.9701 7 43.7434 10 11.4423 8 14.2347 8 13.1854 8 85.9008 7 31.1794 6 5.0928 8 20.026 8 55.1806 9 11.6023 7 7.7469 8 0.0525 7 14.5466 9 10.4039 7 6.2705 9 24.2995 7 21.2565 9 10.2569 8)
Average genome size in population (length): 70.283
Average program size in population (points): 71.283
Average percent parens in population: 0.014
Minimum age in population: 105.7340591778769
Maximum age in population: 110.9701973173597
Average age in population: 108.5652375023632
Median age in population: 108.6021379651639
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 28
Genome diversity (% unique Plush genomes):	 0.787
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 28
Syntactic diversity (% unique Push programs):	 0.787
Total error diversity:				 0.275
Error (vector) diversity:			 0.282
Behavioral diversity:				 0.282
--- Run Statistics ---
Number of program evaluations used so far: 77000
Number of point (instruction) evaluations so far: 115100540
--- Timings ---
Current time: 1529615177968 milliseconds
Total Time:         284.0 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       116.8 seconds, 41.1%
Fitness Testing:    132.5 seconds, 46.7%
Report:              34.6 seconds, 12.2%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 76
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 77
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 77
;;******************************
;; -*- Number IO problem report - generation 77
Test total error for best: 59657.73969999999
Test mean error for best: 29.82887
;;------------------------------
Outputs of best individual on training cases:
Correct output: -116.076402553 | Program output: -41.0401600   
Correct output: 24.1400847456  | Program output: -10.07181     
Correct output: 69.833290954   | Program output: 20.0219241    
Correct output: 82.4958592801  | Program output: 94.015857281  
Correct output: 34.2385110874  | Program output: 81.02551287   
Correct output: -10.7358110665 | Program output: 47.048110545  
Correct output: 1.9700532093   | Program output: -11.050100    
Correct output: -44.7956976677 | Program output: 51.052140557  
Correct output: 68.5576547673  | Program output: 46.047103777  
Correct output: -69.2536523379 | Program output: -54.0192809   
Correct output: -14.2275745396 | Program output: 41.04274047   
Correct output: -171.9767905886 | Program output: -85.0767056   
Correct output: -32.1846093265 | Program output: 1.026         
Correct output: 66.9812146721  | Program output: 73.074405151  
Correct output: 100.0259781081 | Program output: 34.03542841   
Correct output: -90.2595503995 | Program output: -34.0791089   
Correct output: -82.4635707651 | Program output: -96.0659025   
Correct output: -8.7492896214  | Program output: -50.0312401   
Correct output: -82.1329348831 | Program output: -82.0796561   
Correct output: 24.5261129925  | Program output: -73.0405184   
Correct output: -11.4065589042 | Program output: -53.0602704   
Correct output: 10.3282540908  | Program output: -77.045776    
Correct output: -51.7760580299 | Program output: -78.0755929   
Correct output: 51.8185003253  | Program output: 74.075421801  
Correct output: 110.7431489201 | Program output: 20.0219241    
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_mult} {:instruction in2} {:instruction integer_dup} {:instruction print_float} {:instruction integer_mult} {:instruction float_mult} {:instruction float_pop} {:instruction float_mult} {:instruction in2} {:instruction float_sub} {:instruction float_sub} {:instruction float_mult} {:instruction integer_add} {:instruction float_mult} {:instruction float_pop} {:instruction float_mult} {:instruction in2} {:instruction float_max} {:instruction integer_dup} {:instruction print_float} {:instruction integer_mult} {:instruction float_mult} {:instruction float_pop} {:instruction float_mult} {:instruction in2} {:instruction float_sub} {:instruction float_sub} {:instruction float_mult} {:instruction integer_dup} {:instruction integer_dup} {:instruction float_add} {:instruction integer_dec} {:instruction integer_shove} {:instruction float_mult} {:instruction float_add} {:instruction float_mult} {:instruction integer_mult} {:instruction integer_dup} {:instruction float_add} {:instruction integer_dup} {:instruction float_add} {:instruction integer_dec} {:instruction integer_mult} {:instruction float_mult} {:instruction float_pop} {:instruction float_tan} {:instruction in2} {:instruction float_max} {:instruction float_pop} {:instruction float_mult} {:instruction in2} {:instruction float_yankdup} {:instruction integer_dup} {:instruction integer_pop} {:instruction integer_dec} {:instruction float_cos} {:instruction float_frominteger} {:instruction integer_swap} {:instruction integer_mod} {:instruction integer_dup} {:instruction 80} {:instruction integer_mod} {:instruction integer_dup} {:instruction integer_dup} {:instruction float_dup_items} {:instruction print_float} {:instruction float_frominteger} {:instruction print_integer} {:instruction integer_sub} {:instruction integer_inc} {:instruction integer_max} {:instruction integer_stackdepth} {:instruction float_shove} {:instruction float_mult} {:instruction integer_max} {:instruction integer_stackdepth} {:instruction float_shove} {:instruction float_dup} {:instruction float_dup} {:instruction integer_mult} {:instruction integer_add} {:instruction print_integer} {:instruction integer_flush})
Best program: (float_mult in2 integer_dup print_float integer_mult float_mult float_pop float_mult in2 float_sub float_sub float_mult integer_add float_mult float_pop float_mult in2 float_max integer_dup print_float integer_mult float_mult float_pop float_mult in2 float_sub float_sub float_mult integer_dup integer_dup float_add integer_dec integer_shove float_mult float_add float_mult integer_mult integer_dup float_add integer_dup float_add integer_dec integer_mult float_mult float_pop float_tan in2 float_max float_pop float_mult in2 float_yankdup integer_dup integer_pop integer_dec float_cos float_frominteger integer_swap integer_mod integer_dup 80 integer_mod integer_dup integer_dup float_dup_items print_float float_frominteger print_integer integer_sub integer_inc integer_max integer_stackdepth float_shove float_mult integer_max integer_stackdepth float_shove float_dup float_dup integer_mult integer_add print_integer integer_flush)
Errors: [75.0362 8 34.2119 10 49.8114 9 11.52 6 46.787 8 57.7839 8 13.0202 9 95.8478 11 22.5106 9 15.2344 10 55.2703 10 86.9001 7 33.2106 10 6.0932 11 65.9905 9 56.1804 9 13.6023 8 41.282 10 0.0533 8 97.5666 12 41.6537 8 87.374 12 26.2995 8 22.2569 11 90.7212 8]
Total: 1375.218
Mean: 27.50436
Genome size: 83
Size: 84
Percent parens: 0.012
--- Population Statistics ---
Average total errors in population: 4986.900308899993
Median total errors in population: 1376.2160000000001
Error averages by case: (265.60850970000126 8.855 209.59000469999825 10.36 141.23856490000162 9.631 111.87204010000069 8.057 140.21901089999898 9.158 152.1978346999995 9.685 197.57766749999922 9.355 186.423304299999 11.662 120.94815509999856 9.841 219.28960979999775 10.782 149.92315560000122 10.536 276.28912729999996 8.986 63.97395979999963 11.106 105.63341670000095 11.187 159.7680398000015 9.944 251.38601280000253 10.03 218.52509749999933 9.343 237.01166830000275 10.61 206.1966214999996 8.956 283.02829819999863 12.231 239.27449189999808 9.212 274.2188104000033 12.242 227.95575909999766 9.396 119.98538579999826 10.98 177.71176250000013 8.909)
Error minima by case: (46.7117 7 1.132 8 9.176 8 3.4873 6 11.233 8 4.7346 8 0.9701 7 14.7769 10 10.4434 8 0.1111 8 8.2221 9 85.9001 7 2.1658 9 5.0263 9 21.0217 8 20.8948 9 12.5364 8 2.7435 8 0.0329 7 1.5209 9 5.3992 8 6.3283 9 17.5887 8 21.1891 8 31.7339 8)
Average genome size in population (length): 70.111
Average program size in population (points): 71.111
Average percent parens in population: 0.014
Minimum age in population: 107.6197713136971
Maximum age in population: 111.9740855973339
Average age in population: 109.9498465167726
Median age in population: 110.0085411241285
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 19
Genome diversity (% unique Plush genomes):	 0.814
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 19
Syntactic diversity (% unique Push programs):	 0.814
Total error diversity:				 0.277
Error (vector) diversity:			 0.284
Behavioral diversity:				 0.284
--- Run Statistics ---
Number of program evaluations used so far: 78000
Number of point (instruction) evaluations so far: 116853315
--- Timings ---
Current time: 1529615182204 milliseconds
Total Time:         288.2 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       118.2 seconds, 41.0%
Fitness Testing:    134.8 seconds, 46.8%
Report:              35.1 seconds, 12.2%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 77
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 78
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 78
;;******************************
;; -*- Number IO problem report - generation 78
Test total error for best: 59657.73969999999
Test mean error for best: 29.82887
;;------------------------------
Outputs of best individual on training cases:
Correct output: -116.076402553 | Program output: -41.0401600   
Correct output: 24.1400847456  | Program output: -10.07181     
Correct output: 69.833290954   | Program output: 20.0219241    
Correct output: 82.4958592801  | Program output: 94.015857281  
Correct output: 34.2385110874  | Program output: 81.02551287   
Correct output: -10.7358110665 | Program output: 47.048110545  
Correct output: 1.9700532093   | Program output: -11.050100    
Correct output: -44.7956976677 | Program output: 51.052140557  
Correct output: 68.5576547673  | Program output: 46.047103777  
Correct output: -69.2536523379 | Program output: -54.0192809   
Correct output: -14.2275745396 | Program output: 41.04274047   
Correct output: -171.9767905886 | Program output: -85.0767056   
Correct output: -32.1846093265 | Program output: 1.026         
Correct output: 66.9812146721  | Program output: 73.074405151  
Correct output: 100.0259781081 | Program output: 34.03542841   
Correct output: -90.2595503995 | Program output: -34.0791089   
Correct output: -82.4635707651 | Program output: -96.0659025   
Correct output: -8.7492896214  | Program output: -50.0312401   
Correct output: -82.1329348831 | Program output: -82.0796561   
Correct output: 24.5261129925  | Program output: -73.0405184   
Correct output: -11.4065589042 | Program output: -53.0602704   
Correct output: 10.3282540908  | Program output: -77.045776    
Correct output: -51.7760580299 | Program output: -78.0755929   
Correct output: 51.8185003253  | Program output: 74.075421801  
Correct output: 110.7431489201 | Program output: 20.0219241    
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_mult} {:instruction in2} {:instruction integer_dup} {:instruction print_float} {:instruction integer_mult} {:instruction float_mult} {:instruction float_pop} {:instruction float_mult} {:instruction in2} {:instruction float_sub} {:instruction float_sub} {:instruction float_mult} {:instruction integer_add} {:instruction float_mult} {:instruction float_pop} {:instruction float_mult} {:instruction in2} {:instruction float_max} {:instruction integer_dup} {:instruction print_float} {:instruction integer_mult} {:instruction float_mult} {:instruction float_pop} {:instruction float_mult} {:instruction in2} {:instruction float_sub} {:instruction float_sub} {:instruction float_mult} {:instruction integer_dup} {:instruction integer_dup} {:instruction float_add} {:instruction integer_dec} {:instruction integer_shove} {:instruction float_mult} {:instruction float_add} {:instruction float_mult} {:instruction integer_mult} {:instruction integer_dup} {:instruction float_add} {:instruction integer_dup} {:instruction float_add} {:instruction integer_dec} {:instruction integer_mult} {:instruction float_mult} {:instruction float_pop} {:instruction float_tan} {:instruction in2} {:instruction float_max} {:instruction float_pop} {:instruction float_mult} {:instruction in2} {:instruction float_yankdup} {:instruction integer_dup} {:instruction integer_pop} {:instruction integer_dec} {:instruction float_cos} {:instruction float_frominteger} {:instruction integer_swap} {:instruction integer_mod} {:instruction integer_dup} {:instruction 80} {:instruction integer_mod} {:instruction integer_dup} {:instruction integer_dup} {:instruction float_dup_items} {:instruction print_float} {:instruction float_frominteger} {:instruction print_integer} {:instruction integer_sub} {:instruction integer_inc} {:instruction integer_max} {:instruction integer_stackdepth} {:instruction float_shove} {:instruction float_mult} {:instruction integer_max} {:instruction integer_stackdepth} {:instruction float_shove} {:instruction float_dup} {:instruction float_dup} {:instruction integer_mult} {:instruction integer_add} {:instruction print_integer} {:instruction integer_flush})
Best program: (float_mult in2 integer_dup print_float integer_mult float_mult float_pop float_mult in2 float_sub float_sub float_mult integer_add float_mult float_pop float_mult in2 float_max integer_dup print_float integer_mult float_mult float_pop float_mult in2 float_sub float_sub float_mult integer_dup integer_dup float_add integer_dec integer_shove float_mult float_add float_mult integer_mult integer_dup float_add integer_dup float_add integer_dec integer_mult float_mult float_pop float_tan in2 float_max float_pop float_mult in2 float_yankdup integer_dup integer_pop integer_dec float_cos float_frominteger integer_swap integer_mod integer_dup 80 integer_mod integer_dup integer_dup float_dup_items print_float float_frominteger print_integer integer_sub integer_inc integer_max integer_stackdepth float_shove float_mult integer_max integer_stackdepth float_shove float_dup float_dup integer_mult integer_add print_integer integer_flush)
Errors: [75.0362 8 34.2119 10 49.8114 9 11.52 6 46.787 8 57.7839 8 13.0202 9 95.8478 11 22.5106 9 15.2344 10 55.2703 10 86.9001 7 33.2106 10 6.0932 11 65.9905 9 56.1804 9 13.6023 8 41.282 10 0.0533 8 97.5666 12 41.6537 8 87.374 12 26.2995 8 22.2569 11 90.7212 8]
Total: 1375.218
Mean: 27.50436
Genome size: 83
Size: 84
Percent parens: 0.012
--- Population Statistics ---
Average total errors in population: 5180.957052399993
Median total errors in population: 1384.2160000000003
Error averages by case: (273.20229840000064 8.831 221.44252089999802 10.385 150.68229830000155 9.718 120.40807650000066 8.225 145.67854039999906 9.298 159.83988469999963 9.807 208.3662134999992 9.378 193.75491429999894 11.715 128.95214929999872 9.98 226.44461009999736 10.783 157.61515800000086 10.58 283.53694470000045 9.054 67.1421058999997 11.084 114.94900910000091 11.262 167.19962280000138 10.0 258.3367865000025 10.041 225.54351909999954 9.368 245.26866950000252 10.668 216.13611199999943 9.007 288.4293019999994 12.24 245.6625875999981 9.279 279.48191610000293 12.242 234.64456909999765 9.47 129.07317549999843 11.046 186.7260681 8.979)
Error minima by case: (40.0 6 9.0 5 5.7178 7 2.4959 5 25.2349 8 8.6492 8 0.9701 5 43.7434 9 4.4421 9 14.1748 7 13.1104 8 84.0 6 2.0 3 2.8657 9 20.026 8 33.0 7 11.6016 8 7.718 9 0.0525 7 14.5144 7 10.3463 7 1.6717 7 24.2521 7 12.297 8 10.2569 8)
Average genome size in population (length): 70.779
Average program size in population (points): 71.779
Average percent parens in population: 0.014
Minimum age in population: 108.6197713136971
Maximum age in population: 113.5008450226249
Average age in population: 111.3397623966088
Median age in population: 111.3815742477193
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 13
Genome diversity (% unique Plush genomes):	 0.82
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 13
Syntactic diversity (% unique Push programs):	 0.82
Total error diversity:				 0.321
Error (vector) diversity:			 0.328
Behavioral diversity:				 0.328
--- Run Statistics ---
Number of program evaluations used so far: 79000
Number of point (instruction) evaluations so far: 118622790
--- Timings ---
Current time: 1529615186044 milliseconds
Total Time:         292.0 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       119.6 seconds, 41.0%
Fitness Testing:    136.7 seconds, 46.8%
Report:              35.6 seconds, 12.2%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 78
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 79
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 79
;;******************************
;; -*- Number IO problem report - generation 79
Test total error for best: 64454.01560000002
Test mean error for best: 32.22701
;;------------------------------
Outputs of best individual on training cases:
Correct output: -116.076402553 | Program output: -41.0401600   
Correct output: 24.1400847456  | Program output: -10.07181     
Correct output: 69.833290954   | Program output: 20.0219241    
Correct output: 82.4958592801  | Program output: 94.015857281  
Correct output: 34.2385110874  | Program output: 81.02551287   
Correct output: -10.7358110665 | Program output: 47.048110545  
Correct output: 1.9700532093   | Program output: -11.050100    
Correct output: -44.7956976677 | Program output: 51.052140557  
Correct output: 68.5576547673  | Program output: 46.047103777  
Correct output: -69.2536523379 | Program output: -54.0192809   
Correct output: -14.2275745396 | Program output: 41.04274047   
Correct output: -171.9767905886 | Program output: -85.0767056   
Correct output: -32.1846093265 | Program output: 1.025         
Correct output: 66.9812146721  | Program output: 73.074405151  
Correct output: 100.0259781081 | Program output: 34.03542841   
Correct output: -90.2595503995 | Program output: -34.0791089   
Correct output: -82.4635707651 | Program output: -96.0659025   
Correct output: -8.7492896214  | Program output: -50.0312401   
Correct output: -82.1329348831 | Program output: -82.0796561   
Correct output: 24.5261129925  | Program output: -73.0405184   
Correct output: -11.4065589042 | Program output: -53.0602704   
Correct output: 10.3282540908  | Program output: -77.045776    
Correct output: -51.7760580299 | Program output: -78.0755929   
Correct output: 51.8185003253  | Program output: 74.075421801  
Correct output: 110.7431489201 | Program output: 20.0219241    
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_yankdup} {:instruction float_pop} {:instruction float_mult} {:instruction in2} {:instruction integer_inc} {:instruction float_yankdup} {:instruction float_yank} {:instruction float_mult} {:instruction in2} {:instruction integer_add} {:instruction float_pop} {:instruction float_mult} {:instruction in2} {:instruction float_max} {:instruction integer_dup} {:instruction print_float} {:instruction integer_mult} {:instruction float_mult} {:instruction float_pop} {:instruction float_mult} {:instruction float_mult} {:instruction in2} {:instruction float_sub} {:instruction float_sub} {:instruction float_mult} {:instruction integer_dup} {:instruction integer_dup} {:instruction float_add} {:instruction integer_dec} {:instruction integer_shove} {:instruction float_mult} {:instruction float_add} {:instruction float_mult} {:instruction integer_mult} {:instruction integer_dup} {:instruction float_add} {:instruction integer_dup} {:instruction float_add} {:instruction integer_dec} {:instruction integer_mult} {:instruction float_mult} {:instruction float_pop} {:instruction float_tan} {:instruction in2} {:instruction float_max} {:instruction float_pop} {:instruction float_mod} {:instruction in2} {:instruction float_yankdup} {:instruction integer_dup} {:instruction integer_pop} {:instruction integer_dec} {:instruction float_cos} {:instruction float_frominteger} {:instruction integer_swap} {:instruction integer_mod} {:instruction integer_dup} {:instruction 80} {:instruction integer_mod} {:instruction integer_dup} {:instruction print_float} {:instruction float_frominteger} {:instruction print_integer} {:instruction integer_sub} {:instruction integer_inc} {:instruction integer_max} {:instruction integer_stackdepth} {:instruction float_shove} {:instruction float_mult} {:instruction integer_max} {:instruction integer_stackdepth} {:instruction float_shove} {:instruction float_dup} {:instruction float_dup} {:instruction float_inc} {:instruction integer_mult} {:instruction integer_shove} {:instruction print_integer} {:instruction integer_swap})
Best program: (float_yankdup float_pop float_mult in2 integer_inc float_yankdup float_yank float_mult in2 integer_add float_pop float_mult in2 float_max integer_dup print_float integer_mult float_mult float_pop float_mult float_mult in2 float_sub float_sub float_mult integer_dup integer_dup float_add integer_dec integer_shove float_mult float_add float_mult integer_mult integer_dup float_add integer_dup float_add integer_dec integer_mult float_mult float_pop float_tan in2 float_max float_pop float_mod in2 float_yankdup integer_dup integer_pop integer_dec float_cos float_frominteger integer_swap integer_mod integer_dup 80 integer_mod integer_dup print_float float_frominteger print_integer integer_sub integer_inc integer_max integer_stackdepth float_shove float_mult integer_max integer_stackdepth float_shove float_dup float_dup float_inc integer_mult integer_shove print_integer integer_swap)
Errors: [75.0362 8 34.2119 10 49.8114 9 11.52 6 46.787 8 57.7839 8 13.0202 9 95.8478 11 22.5106 9 15.2344 10 55.2703 10 86.9001 7 33.2096 10 6.0932 11 65.9905 9 56.1804 9 13.6023 8 41.282 10 0.0533 8 97.5666 12 41.6537 8 87.374 12 26.2995 8 22.2569 11 90.7212 8]
Total: 1375.2170000000003
Mean: 27.50434
Genome size: 79
Size: 80
Percent parens: 0.013
--- Population Statistics ---
Average total errors in population: 4729.682719599993
Median total errors in population: 1376.2160000000001
Error averages by case: (252.46558690000128 8.777 201.40504289999788 10.294 135.14450120000143 9.622 104.42888430000023 8.061 132.65747829999844 9.179 144.79559159999923 9.661 184.6814360999992 9.3 179.19336599999934 11.649 113.6667470999989 9.884 203.47249989999784 10.721 142.5728867000008 10.551 262.39547069999935 8.911 64.11880319999969 11.027 99.06291510000086 11.253 152.80512510000113 9.911 236.85112890000227 9.987 203.3273753999993 9.23 223.93084030000276 10.625 193.03140459999938 8.883 268.0919949999983 12.178 224.08672039999792 9.19 259.4368462000029 12.171 212.23264529999784 9.344 113.39962849999868 11.068 172.0267999000002 8.924)
Error minima by case: (40.0 3 9.0 3 9.176 4 3.4873 6 32.1834 8 9.7348 4 0.031 3 8.7905 4 10.4434 4 14.1748 4 13.2266 4 84.0 3 2.0 3 5.0912 8 21.0217 5 33.0 4 12.5364 8 7.7483 8 0.0525 3 14.5143 4 10.4056 8 6.2705 3 15.7701 8 21.2519 9 21.0 5)
Average genome size in population (length): 71.058
Average program size in population (points): 72.058
Average percent parens in population: 0.014
Minimum age in population: 110.1226496729682
Maximum age in population: 114.7674500883596
Average age in population: 112.690865932818
Median age in population: 112.7067678831602
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 13
Genome diversity (% unique Plush genomes):	 0.786
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 13
Syntactic diversity (% unique Push programs):	 0.786
Total error diversity:				 0.287
Error (vector) diversity:			 0.29
Behavioral diversity:				 0.29
--- Run Statistics ---
Number of program evaluations used so far: 80000
Number of point (instruction) evaluations so far: 120399240
--- Timings ---
Current time: 1529615190251 milliseconds
Total Time:         296.3 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       121.1 seconds, 40.9%
Fitness Testing:    138.9 seconds, 46.9%
Report:              36.1 seconds, 12.2%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 79
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 80
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 80
;;******************************
;; -*- Number IO problem report - generation 80
Test total error for best: 64454.01560000002
Test mean error for best: 32.22701
;;------------------------------
Outputs of best individual on training cases:
Correct output: -116.076402553 | Program output: -41.0401600   
Correct output: 24.1400847456  | Program output: -10.07181     
Correct output: 69.833290954   | Program output: 20.0219241    
Correct output: 82.4958592801  | Program output: 94.015857281  
Correct output: 34.2385110874  | Program output: 81.02551287   
Correct output: -10.7358110665 | Program output: 47.048110545  
Correct output: 1.9700532093   | Program output: -11.050100    
Correct output: -44.7956976677 | Program output: 51.052140557  
Correct output: 68.5576547673  | Program output: 46.047103777  
Correct output: -69.2536523379 | Program output: -54.0192809   
Correct output: -14.2275745396 | Program output: 41.04274047   
Correct output: -171.9767905886 | Program output: -85.0767056   
Correct output: -32.1846093265 | Program output: 1.025         
Correct output: 66.9812146721  | Program output: 73.074405151  
Correct output: 100.0259781081 | Program output: 34.03542841   
Correct output: -90.2595503995 | Program output: -34.0791089   
Correct output: -82.4635707651 | Program output: -96.0659025   
Correct output: -8.7492896214  | Program output: -50.0312401   
Correct output: -82.1329348831 | Program output: -82.0796561   
Correct output: 24.5261129925  | Program output: -73.0405184   
Correct output: -11.4065589042 | Program output: -53.0602704   
Correct output: 10.3282540908  | Program output: -77.045776    
Correct output: -51.7760580299 | Program output: -78.0755929   
Correct output: 51.8185003253  | Program output: 74.075421801  
Correct output: 110.7431489201 | Program output: 20.0219241    
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_yankdup} {:instruction float_pop} {:instruction float_mult} {:instruction in2} {:instruction integer_inc} {:instruction float_yankdup} {:instruction float_yank} {:instruction float_mult} {:instruction in2} {:instruction integer_add} {:instruction float_pop} {:instruction float_mult} {:instruction in2} {:instruction float_max} {:instruction integer_dup} {:instruction print_float} {:instruction integer_mult} {:instruction float_mult} {:instruction float_pop} {:instruction float_mult} {:instruction float_mult} {:instruction in2} {:instruction float_sub} {:instruction float_sub} {:instruction float_mult} {:instruction integer_dup} {:instruction integer_dup} {:instruction float_add} {:instruction integer_dec} {:instruction integer_shove} {:instruction float_mult} {:instruction float_add} {:instruction float_mult} {:instruction integer_mult} {:instruction integer_dup} {:instruction float_add} {:instruction integer_dup} {:instruction float_add} {:instruction integer_dec} {:instruction integer_mult} {:instruction float_mult} {:instruction float_pop} {:instruction float_tan} {:instruction in2} {:instruction float_max} {:instruction float_pop} {:instruction float_mod} {:instruction in2} {:instruction float_yankdup} {:instruction integer_dup} {:instruction integer_pop} {:instruction integer_dec} {:instruction float_cos} {:instruction float_frominteger} {:instruction integer_swap} {:instruction integer_mod} {:instruction integer_dup} {:instruction 80} {:instruction integer_mod} {:instruction integer_dup} {:instruction print_float} {:instruction float_frominteger} {:instruction print_integer} {:instruction integer_sub} {:instruction integer_inc} {:instruction integer_max} {:instruction integer_stackdepth} {:instruction float_shove} {:instruction float_mult} {:instruction integer_max} {:instruction integer_stackdepth} {:instruction float_shove} {:instruction float_dup} {:instruction float_dup} {:instruction float_inc} {:instruction integer_mult} {:instruction integer_shove} {:instruction print_integer} {:instruction integer_swap})
Best program: (float_yankdup float_pop float_mult in2 integer_inc float_yankdup float_yank float_mult in2 integer_add float_pop float_mult in2 float_max integer_dup print_float integer_mult float_mult float_pop float_mult float_mult in2 float_sub float_sub float_mult integer_dup integer_dup float_add integer_dec integer_shove float_mult float_add float_mult integer_mult integer_dup float_add integer_dup float_add integer_dec integer_mult float_mult float_pop float_tan in2 float_max float_pop float_mod in2 float_yankdup integer_dup integer_pop integer_dec float_cos float_frominteger integer_swap integer_mod integer_dup 80 integer_mod integer_dup print_float float_frominteger print_integer integer_sub integer_inc integer_max integer_stackdepth float_shove float_mult integer_max integer_stackdepth float_shove float_dup float_dup float_inc integer_mult integer_shove print_integer integer_swap)
Errors: [75.0362 8 34.2119 10 49.8114 9 11.52 6 46.787 8 57.7839 8 13.0202 9 95.8478 11 22.5106 9 15.2344 10 55.2703 10 86.9001 7 33.2096 10 6.0932 11 65.9905 9 56.1804 9 13.6023 8 41.282 10 0.0533 8 97.5666 12 41.6537 8 87.374 12 26.2995 8 22.2569 11 90.7212 8]
Total: 1375.2170000000003
Mean: 27.50434
Genome size: 79
Size: 80
Percent parens: 0.013
--- Population Statistics ---
Average total errors in population: 4873.62386049999
Median total errors in population: 1382.2953000000002
Error averages by case: (256.2596701000016 8.778 209.135537699998 10.343 141.99608150000148 9.675 110.68588360000068 8.167 138.81782739999906 9.245 150.65028149999975 9.748 192.45549119999907 9.322 184.7484557999988 11.708 119.88799409999856 9.932 209.37614969999785 10.774 148.4684595000008 10.559 266.70323989999963 9.049 70.26656039999956 10.999 105.321862900001 11.249 158.95182990000174 9.975 242.0005460000025 10.037 208.3926506999995 9.275 229.77656810000255 10.647 197.72806079999955 8.944 272.2813224999988 12.237 228.26529109999802 9.214 264.0081011000031 12.149 217.85899859999793 9.385 119.55163179999832 11.027 178.61036460000008 8.987)
Error minima by case: (31.5328 7 15.8599 9 9.8333 8 10.52 5 21.7615 7 9.6877 6 0.9701 7 10.5253 10 2.5577 8 13.9327 8 13.1848 9 85.9001 6 4.8154 9 5.0188 9 64.026 8 5.7159 8 2.08 7 7.718 8 0.0364 7 7.4739 10 10.3463 7 6.2825 8 3.5449 7 18.1815 9 50.7431 8)
Average genome size in population (length): 72.422
Average program size in population (points): 73.422
Average percent parens in population: 0.014
Minimum age in population: 111.1226496729682
Maximum age in population: 116.1032516967142
Average age in population: 114.0047862437303
Median age in population: 114.0314653892989
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 37
Genome diversity (% unique Plush genomes):	 0.824
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 37
Syntactic diversity (% unique Push programs):	 0.824
Total error diversity:				 0.337
Error (vector) diversity:			 0.349
Behavioral diversity:				 0.349
--- Run Statistics ---
Number of program evaluations used so far: 81000
Number of point (instruction) evaluations so far: 122209790
--- Timings ---
Current time: 1529615194162 milliseconds
Total Time:         300.2 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       122.6 seconds, 40.8%
Fitness Testing:    140.9 seconds, 46.9%
Report:              36.6 seconds, 12.2%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 80
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 81
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 81
;;******************************
;; -*- Number IO problem report - generation 81
Test total error for best: 64454.01560000002
Test mean error for best: 32.22701
;;------------------------------
Outputs of best individual on training cases:
Correct output: -116.076402553 | Program output: -41.0401600   
Correct output: 24.1400847456  | Program output: -10.07181     
Correct output: 69.833290954   | Program output: 20.0219241    
Correct output: 82.4958592801  | Program output: 94.015857281  
Correct output: 34.2385110874  | Program output: 81.02551287   
Correct output: -10.7358110665 | Program output: 47.048110545  
Correct output: 1.9700532093   | Program output: -11.050100    
Correct output: -44.7956976677 | Program output: 51.052140557  
Correct output: 68.5576547673  | Program output: 46.047103777  
Correct output: -69.2536523379 | Program output: -54.0192809   
Correct output: -14.2275745396 | Program output: 41.04274047   
Correct output: -171.9767905886 | Program output: -85.0767056   
Correct output: -32.1846093265 | Program output: 1.025         
Correct output: 66.9812146721  | Program output: 73.074405151  
Correct output: 100.0259781081 | Program output: 34.03542841   
Correct output: -90.2595503995 | Program output: -34.0791089   
Correct output: -82.4635707651 | Program output: -96.0659025   
Correct output: -8.7492896214  | Program output: -50.0312401   
Correct output: -82.1329348831 | Program output: -82.0796561   
Correct output: 24.5261129925  | Program output: -73.0405184   
Correct output: -11.4065589042 | Program output: -53.0602704   
Correct output: 10.3282540908  | Program output: -77.045776    
Correct output: -51.7760580299 | Program output: -78.0755929   
Correct output: 51.8185003253  | Program output: 74.075421801  
Correct output: 110.7431489201 | Program output: 20.0219241    
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_yankdup} {:instruction float_pop} {:instruction float_mult} {:instruction in2} {:instruction integer_inc} {:instruction float_yankdup} {:instruction float_yank} {:instruction float_mult} {:instruction in2} {:instruction integer_add} {:instruction float_pop} {:instruction float_mult} {:instruction in2} {:instruction float_max} {:instruction integer_dup} {:instruction print_float} {:instruction integer_mult} {:instruction float_mult} {:instruction float_pop} {:instruction float_mult} {:instruction float_mult} {:instruction in2} {:instruction float_sub} {:instruction float_sub} {:instruction float_mult} {:instruction integer_dup} {:instruction integer_dup} {:instruction float_add} {:instruction integer_dec} {:instruction integer_shove} {:instruction float_mult} {:instruction float_add} {:instruction float_mult} {:instruction integer_mult} {:instruction integer_dup} {:instruction float_add} {:instruction integer_dup} {:instruction float_add} {:instruction integer_dec} {:instruction integer_mult} {:instruction float_mult} {:instruction float_pop} {:instruction float_tan} {:instruction in2} {:instruction float_max} {:instruction float_pop} {:instruction float_mod} {:instruction in2} {:instruction float_yankdup} {:instruction integer_dup} {:instruction integer_pop} {:instruction integer_dec} {:instruction float_cos} {:instruction float_frominteger} {:instruction integer_swap} {:instruction integer_mod} {:instruction integer_dup} {:instruction 80} {:instruction integer_mod} {:instruction integer_dup} {:instruction print_float} {:instruction float_frominteger} {:instruction print_integer} {:instruction integer_sub} {:instruction integer_inc} {:instruction integer_max} {:instruction integer_stackdepth} {:instruction float_shove} {:instruction float_mult} {:instruction integer_max} {:instruction integer_stackdepth} {:instruction float_shove} {:instruction float_dup} {:instruction float_dup} {:instruction float_inc} {:instruction integer_mult} {:instruction integer_shove} {:instruction print_integer} {:instruction integer_swap})
Best program: (float_yankdup float_pop float_mult in2 integer_inc float_yankdup float_yank float_mult in2 integer_add float_pop float_mult in2 float_max integer_dup print_float integer_mult float_mult float_pop float_mult float_mult in2 float_sub float_sub float_mult integer_dup integer_dup float_add integer_dec integer_shove float_mult float_add float_mult integer_mult integer_dup float_add integer_dup float_add integer_dec integer_mult float_mult float_pop float_tan in2 float_max float_pop float_mod in2 float_yankdup integer_dup integer_pop integer_dec float_cos float_frominteger integer_swap integer_mod integer_dup 80 integer_mod integer_dup print_float float_frominteger print_integer integer_sub integer_inc integer_max integer_stackdepth float_shove float_mult integer_max integer_stackdepth float_shove float_dup float_dup float_inc integer_mult integer_shove print_integer integer_swap)
Errors: [75.0362 8 34.2119 10 49.8114 9 11.52 6 46.787 8 57.7839 8 13.0202 9 95.8478 11 22.5106 9 15.2344 10 55.2703 10 86.9001 7 33.2096 10 6.0932 11 65.9905 9 56.1804 9 13.6023 8 41.282 10 0.0533 8 97.5666 12 41.6537 8 87.374 12 26.2995 8 22.2569 11 90.7212 8]
Total: 1375.2170000000003
Mean: 27.50434
Genome size: 79
Size: 80
Percent parens: 0.013
--- Population Statistics ---
Average total errors in population: 5473.688969899996
Median total errors in population: 1390.221
Error averages by case: (288.02443009999945 8.868 241.19150319999818 10.405 158.9193718000015 9.745 126.92465130000085 8.409 156.29400619999967 9.429 167.26255450000045 9.969 229.161360199999 9.347 200.87920589999848 11.822 136.59039559999928 10.077 240.3416805999971 10.819 165.0382477000009 10.692 296.5264832000015 9.266 77.3270364999998 10.923 122.58109840000077 11.318 174.62222070000206 10.085 271.6673074000029 10.105 240.80629799999954 9.423 259.1056738000025 10.723 228.59465419999972 8.984 301.97833849999955 12.27 260.5560274999981 9.321 295.08543710000293 12.17 248.87348079999805 9.486 136.64808159999885 11.098 194.8404251 9.095)
Error minima by case: (74.0508 7 18.1401 7 9.1711 5 2.4959 6 32.1834 8 9.7335 5 0.9602 6 43.793 5 10.4446 5 14.1748 7 13.2258 5 85.927 7 2.0 3 5.0929 8 20.026 6 55.2477 7 12.5364 8 7.7469 8 0.0486 7 14.5464 6 10.4039 8 4.3283 6 25.2239 7 21.2567 8 21.0 6)
Average genome size in population (length): 74.575
Average program size in population (points): 75.575
Average percent parens in population: 0.013
Minimum age in population: 113.0403939699009
Maximum age in population: 117.390263500194
Average age in population: 115.4015370758938
Median age in population: 115.4037356603502
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 67
Genome diversity (% unique Plush genomes):	 0.805
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 67
Syntactic diversity (% unique Push programs):	 0.805
Total error diversity:				 0.351
Error (vector) diversity:			 0.362
Behavioral diversity:				 0.364
--- Run Statistics ---
Number of program evaluations used so far: 82000
Number of point (instruction) evaluations so far: 124074165
--- Timings ---
Current time: 1529615198373 milliseconds
Total Time:         304.4 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       124.1 seconds, 40.8%
Fitness Testing:    143.0 seconds, 47.0%
Report:              37.1 seconds, 12.2%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 81
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 82
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 82
;;******************************
;; -*- Number IO problem report - generation 82
Test total error for best: 64454.01560000002
Test mean error for best: 32.22701
;;------------------------------
Outputs of best individual on training cases:
Correct output: -116.076402553 | Program output: -41.0401600   
Correct output: 24.1400847456  | Program output: -10.07181     
Correct output: 69.833290954   | Program output: 20.0219241    
Correct output: 82.4958592801  | Program output: 94.015857281  
Correct output: 34.2385110874  | Program output: 81.02551287   
Correct output: -10.7358110665 | Program output: 47.048110545  
Correct output: 1.9700532093   | Program output: -11.050100    
Correct output: -44.7956976677 | Program output: 51.052140557  
Correct output: 68.5576547673  | Program output: 46.047103777  
Correct output: -69.2536523379 | Program output: -54.0192809   
Correct output: -14.2275745396 | Program output: 41.04274047   
Correct output: -171.9767905886 | Program output: -85.0767056   
Correct output: -32.1846093265 | Program output: 1.025         
Correct output: 66.9812146721  | Program output: 73.074405151  
Correct output: 100.0259781081 | Program output: 34.03542841   
Correct output: -90.2595503995 | Program output: -34.0791089   
Correct output: -82.4635707651 | Program output: -96.0659025   
Correct output: -8.7492896214  | Program output: -50.0312401   
Correct output: -82.1329348831 | Program output: -82.0796561   
Correct output: 24.5261129925  | Program output: -73.0405184   
Correct output: -11.4065589042 | Program output: -53.0602704   
Correct output: 10.3282540908  | Program output: -77.045776    
Correct output: -51.7760580299 | Program output: -78.0755929   
Correct output: 51.8185003253  | Program output: 74.075421801  
Correct output: 110.7431489201 | Program output: 20.0219241    
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_yankdup} {:instruction float_pop} {:instruction float_mult} {:instruction in2} {:instruction integer_inc} {:instruction float_yankdup} {:instruction float_yank} {:instruction float_mult} {:instruction in2} {:instruction integer_add} {:instruction float_pop} {:instruction float_mult} {:instruction in2} {:instruction float_max} {:instruction integer_dup} {:instruction print_float} {:instruction integer_mult} {:instruction float_mult} {:instruction float_pop} {:instruction float_mult} {:instruction float_mult} {:instruction in2} {:instruction float_sub} {:instruction float_sub} {:instruction float_mult} {:instruction integer_dup} {:instruction integer_dup} {:instruction float_add} {:instruction integer_dec} {:instruction integer_shove} {:instruction float_mult} {:instruction float_add} {:instruction float_mult} {:instruction integer_mult} {:instruction integer_dup} {:instruction float_add} {:instruction integer_dup} {:instruction float_add} {:instruction integer_dec} {:instruction integer_mult} {:instruction float_mult} {:instruction float_pop} {:instruction float_tan} {:instruction in2} {:instruction float_max} {:instruction float_pop} {:instruction float_mod} {:instruction in2} {:instruction float_yankdup} {:instruction integer_dup} {:instruction integer_pop} {:instruction integer_dec} {:instruction float_cos} {:instruction float_frominteger} {:instruction integer_swap} {:instruction integer_mod} {:instruction integer_dup} {:instruction 80} {:instruction integer_mod} {:instruction integer_dup} {:instruction print_float} {:instruction float_frominteger} {:instruction print_integer} {:instruction integer_sub} {:instruction integer_inc} {:instruction integer_max} {:instruction integer_stackdepth} {:instruction float_shove} {:instruction float_mult} {:instruction integer_max} {:instruction integer_stackdepth} {:instruction float_shove} {:instruction float_dup} {:instruction float_dup} {:instruction float_inc} {:instruction integer_mult} {:instruction integer_shove} {:instruction print_integer} {:instruction integer_swap})
Best program: (float_yankdup float_pop float_mult in2 integer_inc float_yankdup float_yank float_mult in2 integer_add float_pop float_mult in2 float_max integer_dup print_float integer_mult float_mult float_pop float_mult float_mult in2 float_sub float_sub float_mult integer_dup integer_dup float_add integer_dec integer_shove float_mult float_add float_mult integer_mult integer_dup float_add integer_dup float_add integer_dec integer_mult float_mult float_pop float_tan in2 float_max float_pop float_mod in2 float_yankdup integer_dup integer_pop integer_dec float_cos float_frominteger integer_swap integer_mod integer_dup 80 integer_mod integer_dup print_float float_frominteger print_integer integer_sub integer_inc integer_max integer_stackdepth float_shove float_mult integer_max integer_stackdepth float_shove float_dup float_dup float_inc integer_mult integer_shove print_integer integer_swap)
Errors: [75.0362 8 34.2119 10 49.8114 9 11.52 6 46.787 8 57.7839 8 13.0202 9 95.8478 11 22.5106 9 15.2344 10 55.2703 10 86.9001 7 33.2096 10 6.0932 11 65.9905 9 56.1804 9 13.6023 8 41.282 10 0.0533 8 97.5666 12 41.6537 8 87.374 12 26.2995 8 22.2569 11 90.7212 8]
Total: 1375.2170000000003
Mean: 27.50434
Genome size: 79
Size: 80
Percent parens: 0.013
--- Population Statistics ---
Average total errors in population: 5516.317775399997
Median total errors in population: 1390.2314500000002
Error averages by case: (280.2872286 8.878 225.44443449999847 10.397 166.4451298000017 9.743 141.5735045000004 8.543 169.25132239999994 9.494 180.79106170000068 9.949 211.4451808999993 9.282 213.73963899999833 11.872 151.14160949999953 10.076 235.24403519999748 10.865 178.64348960000106 10.747 291.381324600001 9.307 78.03542039999978 10.762 137.3828134000008 11.377 188.54048060000238 10.116 265.6254772000028 10.11 234.57641129999942 9.546 253.9455010000023 10.761 223.18698559999982 9.019 296.67953289999963 12.239 253.3387951999984 9.385 288.818986600003 12.059 243.5543680999982 9.548 150.99101859999914 11.154 201.85302420000033 9.172)
Error minima by case: (36.0764 4 9.0 4 10.176 4 2.4873 6 21.0292 7 9.7335 4 0.9701 3 43.7929 4 11.4434 4 14.2339 4 13.2258 4 3.9768 4 2.0 3 5.0931 9 20.0217 5 24.2596 4 12.5364 7 7.7469 8 0.0329 4 14.5144 4 10.4039 8 4.2491 4 25.2239 8 2.1815 8 21.0 5)
Average genome size in population (length): 78.237
Average program size in population (points): 79.237
Average percent parens in population: 0.013
Minimum age in population: 114.0403939699009
Maximum age in population: 118.6516070775057
Average age in population: 116.7566785201642
Median age in population: 116.7990567622444
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 92
Genome diversity (% unique Plush genomes):	 0.778
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 92
Syntactic diversity (% unique Push programs):	 0.778
Total error diversity:				 0.391
Error (vector) diversity:			 0.401
Behavioral diversity:				 0.401
--- Run Statistics ---
Number of program evaluations used so far: 83000
Number of point (instruction) evaluations so far: 126030115
--- Timings ---
Current time: 1529615202492 milliseconds
Total Time:         308.5 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       125.7 seconds, 40.7%
Fitness Testing:    145.1 seconds, 47.0%
Report:              37.7 seconds, 12.2%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 82
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 83
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 83
;;******************************
;; -*- Number IO problem report - generation 83
Test total error for best: 64454.01560000002
Test mean error for best: 32.22701
;;------------------------------
Outputs of best individual on training cases:
Correct output: -116.076402553 | Program output: -41.0401600   
Correct output: 24.1400847456  | Program output: -10.07181     
Correct output: 69.833290954   | Program output: 20.0219241    
Correct output: 82.4958592801  | Program output: 94.015857281  
Correct output: 34.2385110874  | Program output: 81.02551287   
Correct output: -10.7358110665 | Program output: 47.048110545  
Correct output: 1.9700532093   | Program output: -11.050100    
Correct output: -44.7956976677 | Program output: 51.052140557  
Correct output: 68.5576547673  | Program output: 46.047103777  
Correct output: -69.2536523379 | Program output: -54.0192809   
Correct output: -14.2275745396 | Program output: 41.04274047   
Correct output: -171.9767905886 | Program output: -85.0767056   
Correct output: -32.1846093265 | Program output: 1.025         
Correct output: 66.9812146721  | Program output: 73.074405151  
Correct output: 100.0259781081 | Program output: 34.03542841   
Correct output: -90.2595503995 | Program output: -34.0791089   
Correct output: -82.4635707651 | Program output: -96.0659025   
Correct output: -8.7492896214  | Program output: -50.0312401   
Correct output: -82.1329348831 | Program output: -82.0796561   
Correct output: 24.5261129925  | Program output: -73.0405184   
Correct output: -11.4065589042 | Program output: -53.0602704   
Correct output: 10.3282540908  | Program output: -77.045776    
Correct output: -51.7760580299 | Program output: -78.0755929   
Correct output: 51.8185003253  | Program output: 74.075421801  
Correct output: 110.7431489201 | Program output: 20.0219241    
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_yankdup} {:instruction float_yankdup} {:instruction float_pop} {:instruction float_mult} {:instruction in2} {:instruction integer_inc} {:instruction float_yankdup} {:instruction float_yank} {:instruction float_mult} {:instruction in2} {:instruction integer_add} {:instruction float_pop} {:instruction float_mult} {:instruction in2} {:instruction float_max} {:instruction integer_dup} {:instruction print_float} {:instruction integer_mult} {:instruction float_mult} {:instruction float_pop} {:instruction float_mult} {:instruction float_mult} {:instruction in2} {:instruction float_sub} {:instruction float_sub} {:instruction float_mult} {:instruction integer_dup} {:instruction integer_dup} {:instruction float_add} {:instruction integer_dec} {:instruction integer_shove} {:instruction float_mult} {:instruction float_add} {:instruction float_mult} {:instruction integer_mult} {:instruction integer_dup} {:instruction float_add} {:instruction integer_dup} {:instruction float_add} {:instruction integer_dec} {:instruction integer_mult} {:instruction float_mult} {:instruction float_pop} {:instruction float_tan} {:instruction in2} {:instruction float_max} {:instruction float_pop} {:instruction float_mod} {:instruction in2} {:instruction float_yankdup} {:instruction integer_dup} {:instruction integer_pop} {:instruction integer_dec} {:instruction float_cos} {:instruction float_frominteger} {:instruction integer_swap} {:instruction integer_mod} {:instruction integer_dup} {:instruction 80} {:instruction integer_mod} {:instruction integer_dup} {:instruction print_float} {:instruction float_frominteger} {:instruction print_integer} {:instruction integer_sub} {:instruction integer_inc} {:instruction integer_max} {:instruction integer_stackdepth} {:instruction float_shove} {:instruction float_mult} {:instruction integer_max} {:instruction integer_stackdepth} {:instruction float_shove} {:instruction float_dup} {:instruction float_dup} {:instruction float_inc} {:instruction integer_mult} {:instruction integer_shove} {:instruction print_integer} {:instruction integer_swap})
Best program: (float_yankdup float_yankdup float_pop float_mult in2 integer_inc float_yankdup float_yank float_mult in2 integer_add float_pop float_mult in2 float_max integer_dup print_float integer_mult float_mult float_pop float_mult float_mult in2 float_sub float_sub float_mult integer_dup integer_dup float_add integer_dec integer_shove float_mult float_add float_mult integer_mult integer_dup float_add integer_dup float_add integer_dec integer_mult float_mult float_pop float_tan in2 float_max float_pop float_mod in2 float_yankdup integer_dup integer_pop integer_dec float_cos float_frominteger integer_swap integer_mod integer_dup 80 integer_mod integer_dup print_float float_frominteger print_integer integer_sub integer_inc integer_max integer_stackdepth float_shove float_mult integer_max integer_stackdepth float_shove float_dup float_dup float_inc integer_mult integer_shove print_integer integer_swap)
Errors: [75.0362 8 34.2119 10 49.8114 9 11.52 6 46.787 8 57.7839 8 13.0202 9 95.8478 11 22.5106 9 15.2344 10 55.2703 10 86.9001 7 33.2096 10 6.0932 11 65.9905 9 56.1804 9 13.6023 8 41.282 10 0.0533 8 97.5666 12 41.6537 8 87.374 12 26.2995 8 22.2569 11 90.7212 8]
Total: 1375.2170000000003
Mean: 27.50434
Genome size: 80
Size: 81
Percent parens: 0.012
--- Population Statistics ---
Average total errors in population: 5574.724803099995
Median total errors in population: 1394.2353000000003
Error averages by case: (292.05612209999936 8.941 248.96959739999846 10.401 159.76753990000142 9.754 129.86273010000056 8.585 158.70202849999973 9.471 168.93792670000036 10.053 235.21752669999938 9.304 202.41826679999872 11.896 139.02646159999955 10.08 246.70416019999743 10.965 167.695796900001 10.726 301.6610729000016 9.433 77.01685069999988 10.579 124.86766120000071 11.319 177.0031327000018 10.1 277.72243570000273 10.132 246.06528929999953 9.517 265.7966758000023 10.821 235.85268679999993 9.023 308.2020954000005 12.264 266.20386959999877 9.429 300.50898710000274 12.103 255.23829389999833 9.598 138.95053049999888 11.095 195.52006460000018 9.168)
Error minima by case: (36.0764 5 9.0 5 10.1667 6 2.4959 5 31.2185 8 9.6558 6 0.969 4 43.7157 6 11.4423 6 15.1558 5 13.1476 6 3.9768 5 2.0 3 5.0931 9 8.2878 7 24.2596 5 12.5364 8 7.6693 8 0.0387 5 14.5144 5 10.3266 7 6.2863 4 25.2239 7 21.2568 8 19.005 7)
Average genome size in population (length): 81.13
Average program size in population (points): 82.13
Average percent parens in population: 0.012
Minimum age in population: 115.1106988496443
Maximum age in population: 120.5517231279625
Average age in population: 118.1091578344621
Median age in population: 118.1190170050003
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 74
Genome diversity (% unique Plush genomes):	 0.766
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 74
Syntactic diversity (% unique Push programs):	 0.766
Total error diversity:				 0.383
Error (vector) diversity:			 0.394
Behavioral diversity:				 0.395
--- Run Statistics ---
Number of program evaluations used so far: 84000
Number of point (instruction) evaluations so far: 128058365
--- Timings ---
Current time: 1529615206737 milliseconds
Total Time:         312.8 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       127.2 seconds, 40.7%
Fitness Testing:    147.3 seconds, 47.1%
Report:              38.2 seconds, 12.2%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 83
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 84
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 84
;;******************************
;; -*- Number IO problem report - generation 84
Test total error for best: 59651.73870000001
Test mean error for best: 29.82587
;;------------------------------
Outputs of best individual on training cases:
Correct output: -116.076402553 | Program output: -41.0401600   
Correct output: 24.1400847456  | Program output: -10.07181     
Correct output: 69.833290954   | Program output: 20.0219241    
Correct output: 82.4958592801  | Program output: 94.015857281  
Correct output: 34.2385110874  | Program output: 81.02551287   
Correct output: -10.7358110665 | Program output: 47.048110545  
Correct output: 1.9700532093   | Program output: -11.050100    
Correct output: -44.7956976677 | Program output: 51.052140557  
Correct output: 68.5576547673  | Program output: 46.047103777  
Correct output: -69.2536523379 | Program output: -54.0192809   
Correct output: -14.2275745396 | Program output: 41.04274047   
Correct output: -171.9767905886 | Program output: -85.0767056   
Correct output: -32.1846093265 | Program output: 1.025         
Correct output: 66.9812146721  | Program output: 73.074405151  
Correct output: 100.0259781081 | Program output: 34.03542841   
Correct output: -90.2595503995 | Program output: -34.0791089   
Correct output: -82.4635707651 | Program output: -96.0659025   
Correct output: -8.7492896214  | Program output: -50.0312401   
Correct output: -82.1329348831 | Program output: -82.0796561   
Correct output: 24.5261129925  | Program output: -73.0405184   
Correct output: -11.4065589042 | Program output: -53.0602704   
Correct output: 10.3282540908  | Program output: -77.045776    
Correct output: -51.7760580299 | Program output: -78.0755929   
Correct output: 51.8185003253  | Program output: 74.075421801  
Correct output: 110.7431489201 | Program output: 20.0219241    
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_yankdup} {:instruction float_pop} {:instruction float_mult} {:instruction in2} {:instruction integer_inc} {:instruction float_yankdup} {:instruction float_yank} {:instruction float_mult} {:instruction in2} {:instruction integer_add} {:instruction float_pop} {:instruction float_mult} {:instruction in2} {:instruction float_max} {:instruction integer_dup} {:instruction print_float} {:instruction integer_mult} {:instruction float_mult} {:instruction float_pop} {:instruction float_mult} {:instruction float_mult} {:instruction in2} {:instruction float_sub} {:instruction float_sub} {:instruction float_mult} {:instruction integer_dup} {:instruction integer_dup} {:instruction float_add} {:instruction integer_dec} {:instruction integer_shove} {:instruction float_mult} {:instruction float_add} {:instruction float_mult} {:instruction integer_mult} {:instruction integer_dup} {:instruction float_add} {:instruction integer_dup} {:instruction float_add} {:instruction integer_dec} {:instruction integer_mult} {:instruction float_mult} {:instruction float_pop} {:instruction float_tan} {:instruction in2} {:instruction float_max} {:instruction float_pop} {:instruction float_mod} {:instruction in2} {:instruction float_yankdup} {:instruction integer_dup} {:instruction integer_pop} {:instruction integer_dec} {:instruction float_cos} {:instruction float_frominteger} {:instruction integer_swap} {:instruction integer_mod} {:instruction integer_dup} {:instruction 80} {:instruction integer_mod} {:instruction integer_dup} {:instruction print_float} {:instruction float_frominteger} {:instruction print_integer} {:instruction integer_sub} {:instruction integer_inc} {:instruction integer_max} {:instruction integer_stackdepth} {:instruction float_shove} {:instruction float_mult} {:instruction integer_max} {:instruction integer_stackdepth} {:instruction float_shove} {:instruction integer_max} {:instruction integer_stackdepth} {:instruction float_shove} {:instruction float_mult} {:instruction integer_max} {:instruction integer_stackdepth} {:instruction float_shove} {:instruction float_dup} {:instruction float_dup} {:instruction integer_mult} {:instruction integer_add} {:instruction print_integer} {:instruction integer_flush})
Best program: (float_yankdup float_pop float_mult in2 integer_inc float_yankdup float_yank float_mult in2 integer_add float_pop float_mult in2 float_max integer_dup print_float integer_mult float_mult float_pop float_mult float_mult in2 float_sub float_sub float_mult integer_dup integer_dup float_add integer_dec integer_shove float_mult float_add float_mult integer_mult integer_dup float_add integer_dup float_add integer_dec integer_mult float_mult float_pop float_tan in2 float_max float_pop float_mod in2 float_yankdup integer_dup integer_pop integer_dec float_cos float_frominteger integer_swap integer_mod integer_dup 80 integer_mod integer_dup print_float float_frominteger print_integer integer_sub integer_inc integer_max integer_stackdepth float_shove float_mult integer_max integer_stackdepth float_shove integer_max integer_stackdepth float_shove float_mult integer_max integer_stackdepth float_shove float_dup float_dup integer_mult integer_add print_integer integer_flush)
Errors: [75.0362 8 34.2119 10 49.8114 9 11.52 6 46.787 8 57.7839 8 13.0202 9 95.8478 11 22.5106 9 15.2344 10 55.2703 10 86.9001 7 33.2096 10 6.0932 11 65.9905 9 56.1804 9 13.6023 8 41.282 10 0.0533 8 97.5666 12 41.6537 8 87.374 12 26.2995 8 22.2569 11 90.7212 8]
Total: 1375.2170000000003
Mean: 27.50434
Genome size: 85
Size: 86
Percent parens: 0.012
--- Population Statistics ---
Average total errors in population: 5338.9815343
Median total errors in population: 1389.0684
Error averages by case: (302.96121619999866 8.815 261.40679729999823 10.353 125.58171890000094 9.664 97.12641470000005 8.388 126.1751739999985 9.353 133.78958229999913 9.896 245.67256879999925 9.32 168.5704073999994 11.819 105.42890379999918 9.938 259.0735496999977 10.85 134.4064840000005 10.642 313.97568080000235 9.164 64.16628200000005 10.454 90.83237240000092 11.215 144.808932500001 9.996 289.69040870000265 9.955 259.4240309999997 9.294 277.0031066000022 10.679 248.5461995999998 8.909 317.34483260000053 12.207 276.4637846999992 9.209 309.75421560000234 12.109 267.012708899998 9.371 105.17822479999876 11.038 162.8959370000002 9.054)
Error minima by case: (37.0764 5 14.1294 8 9.1688 8 2.4959 6 23.2052 7 6.3919 7 0.9701 8 2.7436 9 10.4434 8 14.2344 8 9.8837 9 4.9768 7 9.8404 8 5.0198 8 20.026 8 25.2596 9 12.5391 7 4.4054 8 0.0366 7 14.5466 8 7.0627 8 6.2825 7 9.7005 7 21.1825 8 10.2569 7)
Average genome size in population (length): 81.27
Average program size in population (points): 82.27
Average percent parens in population: 0.012
Minimum age in population: 117.0633203968664
Maximum age in population: 121.4826637510839
Average age in population: 119.5146304271061
Median age in population: 119.5317315717813
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 55
Genome diversity (% unique Plush genomes):	 0.74
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 55
Syntactic diversity (% unique Push programs):	 0.74
Total error diversity:				 0.372
Error (vector) diversity:			 0.381
Behavioral diversity:				 0.381
--- Run Statistics ---
Number of program evaluations used so far: 85000
Number of point (instruction) evaluations so far: 130090115
--- Timings ---
Current time: 1529615211135 milliseconds
Total Time:         317.0 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       128.7 seconds, 40.6%
Fitness Testing:    149.5 seconds, 47.2%
Report:              38.7 seconds, 12.2%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 84
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 85
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 85
;;******************************
;; -*- Number IO problem report - generation 85
Test total error for best: 59638.73390000003
Test mean error for best: 29.81937
;;------------------------------
Outputs of best individual on training cases:
Correct output: -116.076402553 | Program output: -41.0401600   
Correct output: 24.1400847456  | Program output: -10.07181     
Correct output: 69.833290954   | Program output: 20.0219241    
Correct output: 82.4958592801  | Program output: 94.015857281  
Correct output: 34.2385110874  | Program output: 81.02551287   
Correct output: -10.7358110665 | Program output: 47.048110545  
Correct output: 1.9700532093   | Program output: -11.050100    
Correct output: -44.7956976677 | Program output: 51.052140557  
Correct output: 68.5576547673  | Program output: 46.047103777  
Correct output: -69.2536523379 | Program output: -54.0192809   
Correct output: -14.2275745396 | Program output: 41.04274047   
Correct output: -171.9767905886 | Program output: -85.0767056   
Correct output: -32.1846093265 | Program output: 1.0232        
Correct output: 66.9812146721  | Program output: 73.074405151  
Correct output: 100.0259781081 | Program output: 34.03542841   
Correct output: -90.2595503995 | Program output: -34.0791089   
Correct output: -82.4635707651 | Program output: -96.0659025   
Correct output: -8.7492896214  | Program output: -50.0312401   
Correct output: -82.1329348831 | Program output: -82.0796561   
Correct output: 24.5261129925  | Program output: -73.0405184   
Correct output: -11.4065589042 | Program output: -53.0602704   
Correct output: 10.3282540908  | Program output: -77.045776    
Correct output: -51.7760580299 | Program output: -78.0755929   
Correct output: 51.8185003253  | Program output: 74.075421801  
Correct output: 110.7431489201 | Program output: 20.0219241    
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_yankdup} {:instruction float_pop} {:instruction float_mult} {:instruction float_yankdup} {:instruction float_pop} {:instruction float_mult} {:instruction in2} {:instruction integer_inc} {:instruction float_yankdup} {:instruction float_yank} {:instruction float_mult} {:instruction 28} {:instruction integer_add} {:instruction float_pop} {:instruction integer_inc} {:instruction in2} {:instruction float_max} {:instruction integer_dup} {:instruction print_float} {:instruction integer_mult} {:instruction float_mult} {:instruction float_pop} {:instruction float_mult} {:instruction float_mult} {:instruction in2} {:instruction float_sub} {:instruction float_sub} {:instruction float_mult} {:instruction integer_dup} {:instruction integer_dup} {:instruction float_add} {:instruction integer_dec} {:instruction integer_shove} {:instruction float_mult} {:instruction float_add} {:instruction float_mult} {:instruction integer_mult} {:instruction integer_dup} {:instruction float_add} {:instruction integer_dup} {:instruction float_add} {:instruction integer_dec} {:instruction integer_mult} {:instruction float_mult} {:instruction float_pop} {:instruction float_tan} {:instruction in2} {:instruction float_max} {:instruction float_pop} {:instruction float_mod} {:instruction in2} {:instruction float_yankdup} {:instruction integer_dup} {:instruction integer_pop} {:instruction integer_dec} {:instruction float_cos} {:instruction float_frominteger} {:instruction integer_swap} {:instruction integer_mod} {:instruction integer_dup} {:instruction 80} {:instruction integer_mod} {:instruction integer_dup} {:instruction print_float} {:instruction float_frominteger} {:instruction print_integer} {:instruction integer_sub} {:instruction integer_inc} {:instruction integer_max} {:instruction integer_stackdepth} {:instruction float_shove} {:instruction float_mult} {:instruction integer_max} {:instruction float_dup} {:instruction float_inc} {:instruction integer_mult} {:instruction integer_shove} {:instruction print_integer} {:instruction integer_swap})
Best program: (float_yankdup float_pop float_mult float_yankdup float_pop float_mult in2 integer_inc float_yankdup float_yank float_mult 28 integer_add float_pop integer_inc in2 float_max integer_dup print_float integer_mult float_mult float_pop float_mult float_mult in2 float_sub float_sub float_mult integer_dup integer_dup float_add integer_dec integer_shove float_mult float_add float_mult integer_mult integer_dup float_add integer_dup float_add integer_dec integer_mult float_mult float_pop float_tan in2 float_max float_pop float_mod in2 float_yankdup integer_dup integer_pop integer_dec float_cos float_frominteger integer_swap integer_mod integer_dup 80 integer_mod integer_dup print_float float_frominteger print_integer integer_sub integer_inc integer_max integer_stackdepth float_shove float_mult integer_max float_dup float_inc integer_mult integer_shove print_integer integer_swap)
Errors: [75.0362 8 34.2119 10 49.8114 9 11.52 6 46.787 8 57.7839 8 13.0202 9 95.8478 11 22.5106 9 15.2344 10 55.2703 10 86.9001 7 33.2078 10 6.0932 11 65.9905 9 56.1804 9 13.6023 8 41.282 10 0.0533 8 97.5666 12 41.6537 8 87.374 12 26.2995 8 22.2569 11 90.7212 8]
Total: 1375.2152000000003
Mean: 27.504305
Genome size: 79
Size: 80
Percent parens: 0.013
--- Population Statistics ---
Average total errors in population: 6285.865254200003
Median total errors in population: 1390.1799999999998
Error averages by case: (364.8089444999976 8.792 329.86566469999815 10.397 137.0174794000012 9.641 108.09596460000034 8.392 137.10282829999895 9.391 146.45090129999954 9.965 315.6892592000021 9.36 180.88621799999927 11.823 116.54258409999893 9.898 323.06937919999893 10.859 146.0832319000008 10.601 372.0878187000035 9.205 58.64522400000016 10.473 102.1885485000009 11.189 155.463655600001 9.988 350.88307970000346 9.931 322.33971890000225 9.327 340.6204235000024 10.649 313.05179300000214 8.895 379.0520547000013 12.197 340.89983970000134 9.203 372.1324445000029 12.192 330.7532210000003 9.414 116.62960939999827 10.982 173.73436780000003 9.007)
Error minima by case: (37.0764 7 8.3972 6 10.1667 6 2.4873 5 1.7012 8 0.3032 6 0.9701 6 34.3631 7 11.4423 6 14.2344 8 3.7949 6 4.9768 7 2.0 4 5.0931 8 20.0217 7 25.2596 8 12.5455 7 8.7503 8 0.0329 6 8.0112 8 11.4076 7 9.3283 8 25.2299 7 19.2812 8 21.0 7)
Average genome size in population (length): 80.842
Average program size in population (points): 81.842
Average percent parens in population: 0.012
Minimum age in population: 118.664831830666
Maximum age in population: 122.8737772036353
Average age in population: 120.9966523428113
Median age in population: 121.0460143970062
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 58
Genome diversity (% unique Plush genomes):	 0.755
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 58
Syntactic diversity (% unique Push programs):	 0.755
Total error diversity:				 0.331
Error (vector) diversity:			 0.34
Behavioral diversity:				 0.34
--- Run Statistics ---
Number of program evaluations used so far: 86000
Number of point (instruction) evaluations so far: 132111165
--- Timings ---
Current time: 1529615215222 milliseconds
Total Time:         321.2 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       130.2 seconds, 40.5%
Fitness Testing:    151.6 seconds, 47.2%
Report:              39.3 seconds, 12.2%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 85
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 86
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 86
;;******************************
;; -*- Number IO problem report - generation 86
Test total error for best: 59638.73390000003
Test mean error for best: 29.81937
;;------------------------------
Outputs of best individual on training cases:
Correct output: -116.076402553 | Program output: -41.0401600   
Correct output: 24.1400847456  | Program output: -10.07181     
Correct output: 69.833290954   | Program output: 20.0219241    
Correct output: 82.4958592801  | Program output: 94.015857281  
Correct output: 34.2385110874  | Program output: 81.02551287   
Correct output: -10.7358110665 | Program output: 47.048110545  
Correct output: 1.9700532093   | Program output: -11.050100    
Correct output: -44.7956976677 | Program output: 51.052140557  
Correct output: 68.5576547673  | Program output: 46.047103777  
Correct output: -69.2536523379 | Program output: -54.0192809   
Correct output: -14.2275745396 | Program output: 41.04274047   
Correct output: -171.9767905886 | Program output: -85.0767056   
Correct output: -32.1846093265 | Program output: 1.0232        
Correct output: 66.9812146721  | Program output: 73.074405151  
Correct output: 100.0259781081 | Program output: 34.03542841   
Correct output: -90.2595503995 | Program output: -34.0791089   
Correct output: -82.4635707651 | Program output: -96.0659025   
Correct output: -8.7492896214  | Program output: -50.0312401   
Correct output: -82.1329348831 | Program output: -82.0796561   
Correct output: 24.5261129925  | Program output: -73.0405184   
Correct output: -11.4065589042 | Program output: -53.0602704   
Correct output: 10.3282540908  | Program output: -77.045776    
Correct output: -51.7760580299 | Program output: -78.0755929   
Correct output: 51.8185003253  | Program output: 74.075421801  
Correct output: 110.7431489201 | Program output: 20.0219241    
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_yankdup} {:instruction float_pop} {:instruction float_mult} {:instruction float_yankdup} {:instruction float_pop} {:instruction float_mult} {:instruction in2} {:instruction integer_inc} {:instruction float_yankdup} {:instruction float_yank} {:instruction float_mult} {:instruction 28} {:instruction integer_add} {:instruction float_pop} {:instruction integer_inc} {:instruction in2} {:instruction float_max} {:instruction integer_dup} {:instruction print_float} {:instruction integer_mult} {:instruction float_mult} {:instruction float_pop} {:instruction float_mult} {:instruction float_mult} {:instruction in2} {:instruction float_sub} {:instruction float_sub} {:instruction float_mult} {:instruction integer_dup} {:instruction integer_dup} {:instruction float_add} {:instruction integer_dec} {:instruction integer_shove} {:instruction float_mult} {:instruction float_add} {:instruction float_mult} {:instruction integer_mult} {:instruction integer_dup} {:instruction float_add} {:instruction integer_dup} {:instruction float_add} {:instruction integer_dec} {:instruction integer_mult} {:instruction float_mult} {:instruction float_pop} {:instruction float_tan} {:instruction in2} {:instruction float_max} {:instruction float_pop} {:instruction float_mod} {:instruction in2} {:instruction float_yankdup} {:instruction integer_dup} {:instruction integer_pop} {:instruction integer_dec} {:instruction float_cos} {:instruction float_frominteger} {:instruction integer_swap} {:instruction integer_mod} {:instruction integer_dup} {:instruction 80} {:instruction integer_mod} {:instruction integer_dup} {:instruction print_float} {:instruction float_frominteger} {:instruction print_integer} {:instruction integer_sub} {:instruction integer_inc} {:instruction integer_max} {:instruction integer_stackdepth} {:instruction float_shove} {:instruction float_mult} {:instruction integer_max} {:instruction float_dup} {:instruction float_inc} {:instruction integer_mult} {:instruction integer_shove} {:instruction print_integer} {:instruction integer_swap})
Best program: (float_yankdup float_pop float_mult float_yankdup float_pop float_mult in2 integer_inc float_yankdup float_yank float_mult 28 integer_add float_pop integer_inc in2 float_max integer_dup print_float integer_mult float_mult float_pop float_mult float_mult in2 float_sub float_sub float_mult integer_dup integer_dup float_add integer_dec integer_shove float_mult float_add float_mult integer_mult integer_dup float_add integer_dup float_add integer_dec integer_mult float_mult float_pop float_tan in2 float_max float_pop float_mod in2 float_yankdup integer_dup integer_pop integer_dec float_cos float_frominteger integer_swap integer_mod integer_dup 80 integer_mod integer_dup print_float float_frominteger print_integer integer_sub integer_inc integer_max integer_stackdepth float_shove float_mult integer_max float_dup float_inc integer_mult integer_shove print_integer integer_swap)
Errors: [75.0362 8 34.2119 10 49.8114 9 11.52 6 46.787 8 57.7839 8 13.0202 9 95.8478 11 22.5106 9 15.2344 10 55.2703 10 86.9001 7 33.2078 10 6.0932 11 65.9905 9 56.1804 9 13.6023 8 41.282 10 0.0533 8 97.5666 12 41.6537 8 87.374 12 26.2995 8 22.2569 11 90.7212 8]
Total: 1375.2152000000003
Mean: 27.504305
Genome size: 79
Size: 80
Percent parens: 0.013
--- Population Statistics ---
Average total errors in population: 6564.899917600007
Median total errors in population: 1392.6617
Error averages by case: (378.3706212999973 8.852 341.8956314999981 10.43 142.9449633000012 9.74 116.09116240000048 8.604 145.19065809999935 9.539 152.9958901999996 10.083 327.09885380000196 9.396 187.9545338999996 11.973 123.35207119999905 10.045 339.3087689999983 10.894 152.64466100000072 10.693 387.2225406000038 9.309 71.91368770000017 10.493 110.91961080000087 11.334 161.79811520000078 10.097 366.65973070000337 9.956 339.05777770000225 9.374 355.9060316000021 10.68 330.2683553000021 8.974 390.9968723000009 12.219 355.25317600000193 9.216 383.2838562000027 12.221 345.45461470000026 9.472 125.22961769999847 11.103 179.27311540000017 9.118)
Error minima by case: (37.0764 5 9.0 5 5.8333 6 2.4939 5 12.2081 7 9.6878 6 0.9701 4 43.7437 6 11.4423 6 14.1627 5 13.1856 6 4.9768 5 2.0 3 5.0932 9 5.974 7 25.2596 5 11.5364 7 7.6933 8 0.0529 5 1.4409 5 10.3766 8 6.3075 4 24.2239 7 21.2569 8 10.2569 7)
Average genome size in population (length): 81.386
Average program size in population (points): 82.386
Average percent parens in population: 0.012
Minimum age in population: 119.7169111079068
Maximum age in population: 124.4171822815712
Average age in population: 122.3705849930749
Median age in population: 122.4026396697653
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 39
Genome diversity (% unique Plush genomes):	 0.808
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 39
Syntactic diversity (% unique Push programs):	 0.808
Total error diversity:				 0.356
Error (vector) diversity:			 0.366
Behavioral diversity:				 0.367
--- Run Statistics ---
Number of program evaluations used so far: 87000
Number of point (instruction) evaluations so far: 134145815
--- Timings ---
Current time: 1529615219616 milliseconds
Total Time:         325.6 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       132.0 seconds, 40.5%
Fitness Testing:    153.7 seconds, 47.2%
Report:              39.9 seconds, 12.2%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 86
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 87
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 87
;;******************************
;; -*- Number IO problem report - generation 87
Test total error for best: 59638.73390000003
Test mean error for best: 29.81937
;;------------------------------
Outputs of best individual on training cases:
Correct output: -116.076402553 | Program output: -41.0401600   
Correct output: 24.1400847456  | Program output: -10.07181     
Correct output: 69.833290954   | Program output: 20.0219241    
Correct output: 82.4958592801  | Program output: 94.015857281  
Correct output: 34.2385110874  | Program output: 81.02551287   
Correct output: -10.7358110665 | Program output: 47.048110545  
Correct output: 1.9700532093   | Program output: -11.050100    
Correct output: -44.7956976677 | Program output: 51.052140557  
Correct output: 68.5576547673  | Program output: 46.047103777  
Correct output: -69.2536523379 | Program output: -54.0192809   
Correct output: -14.2275745396 | Program output: 41.04274047   
Correct output: -171.9767905886 | Program output: -85.0767056   
Correct output: -32.1846093265 | Program output: 1.0232        
Correct output: 66.9812146721  | Program output: 73.074405151  
Correct output: 100.0259781081 | Program output: 34.03542841   
Correct output: -90.2595503995 | Program output: -34.0791089   
Correct output: -82.4635707651 | Program output: -96.0659025   
Correct output: -8.7492896214  | Program output: -50.0312401   
Correct output: -82.1329348831 | Program output: -82.0796561   
Correct output: 24.5261129925  | Program output: -73.0405184   
Correct output: -11.4065589042 | Program output: -53.0602704   
Correct output: 10.3282540908  | Program output: -77.045776    
Correct output: -51.7760580299 | Program output: -78.0755929   
Correct output: 51.8185003253  | Program output: 74.075421801  
Correct output: 110.7431489201 | Program output: 20.0219241    
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_yankdup} {:instruction float_pop} {:instruction float_mult} {:instruction float_yankdup} {:instruction float_pop} {:instruction float_mult} {:instruction in2} {:instruction integer_inc} {:instruction float_yankdup} {:instruction float_yank} {:instruction float_mult} {:instruction 28} {:instruction integer_add} {:instruction float_pop} {:instruction integer_inc} {:instruction in2} {:instruction float_max} {:instruction integer_dup} {:instruction print_float} {:instruction integer_mult} {:instruction float_mult} {:instruction float_pop} {:instruction float_mult} {:instruction float_mult} {:instruction in2} {:instruction float_sub} {:instruction float_sub} {:instruction float_mult} {:instruction integer_dup} {:instruction integer_dup} {:instruction float_add} {:instruction integer_dec} {:instruction integer_shove} {:instruction float_mult} {:instruction float_add} {:instruction float_mult} {:instruction integer_mult} {:instruction integer_dup} {:instruction float_add} {:instruction integer_dup} {:instruction float_add} {:instruction integer_dec} {:instruction integer_mult} {:instruction float_mult} {:instruction float_pop} {:instruction float_tan} {:instruction in2} {:instruction float_max} {:instruction float_pop} {:instruction float_mod} {:instruction in2} {:instruction float_yankdup} {:instruction integer_dup} {:instruction integer_pop} {:instruction integer_dec} {:instruction float_cos} {:instruction float_frominteger} {:instruction integer_swap} {:instruction integer_mod} {:instruction integer_dup} {:instruction 80} {:instruction integer_mod} {:instruction integer_dup} {:instruction print_float} {:instruction float_frominteger} {:instruction print_integer} {:instruction integer_sub} {:instruction integer_inc} {:instruction integer_max} {:instruction integer_stackdepth} {:instruction float_shove} {:instruction float_mult} {:instruction integer_max} {:instruction float_dup} {:instruction float_inc} {:instruction integer_mult} {:instruction float_dup} {:instruction float_dup} {:instruction float_inc} {:instruction integer_mult} {:instruction integer_shove} {:instruction print_integer} {:instruction integer_swap})
Best program: (float_yankdup float_pop float_mult float_yankdup float_pop float_mult in2 integer_inc float_yankdup float_yank float_mult 28 integer_add float_pop integer_inc in2 float_max integer_dup print_float integer_mult float_mult float_pop float_mult float_mult in2 float_sub float_sub float_mult integer_dup integer_dup float_add integer_dec integer_shove float_mult float_add float_mult integer_mult integer_dup float_add integer_dup float_add integer_dec integer_mult float_mult float_pop float_tan in2 float_max float_pop float_mod in2 float_yankdup integer_dup integer_pop integer_dec float_cos float_frominteger integer_swap integer_mod integer_dup 80 integer_mod integer_dup print_float float_frominteger print_integer integer_sub integer_inc integer_max integer_stackdepth float_shove float_mult integer_max float_dup float_inc integer_mult float_dup float_dup float_inc integer_mult integer_shove print_integer integer_swap)
Errors: [75.0362 8 34.2119 10 49.8114 9 11.52 6 46.787 8 57.7839 8 13.0202 9 95.8478 11 22.5106 9 15.2344 10 55.2703 10 86.9001 7 33.2078 10 6.0932 11 65.9905 9 56.1804 9 13.6023 8 41.282 10 0.0533 8 97.5666 12 41.6537 8 87.374 12 26.2995 8 22.2569 11 90.7212 8]
Total: 1375.2152000000003
Mean: 27.504305
Genome size: 83
Size: 84
Percent parens: 0.012
--- Population Statistics ---
Average total errors in population: 6253.572111900005
Median total errors in population: 1379.2165000000005
Error averages by case: (366.5859261999974 8.736 331.510639799998 10.401 131.75160740000112 9.603 101.72394730000018 8.273 130.4942210999984 9.276 138.87985189999938 9.777 317.20717040000244 9.337 174.29895879999924 11.79 108.28185379999903 9.839 326.7428920999991 10.773 137.54734000000082 10.577 375.93926720000354 9.095 62.403542700000216 10.424 95.61677410000094 11.196 147.535163200001 9.932 354.5965295000036 9.831 326.8833745000026 9.217 343.9236215000026 10.569 317.76165640000244 8.824 381.2133495000013 12.149 344.2254229000015 9.109 375.14041070000314 12.169 334.2171587000009 9.31 110.04680149999841 10.963 168.93863070000003 8.936)
Error minima by case: (37.0764 6 19.1401 6 21.0 6 10.52 6 23.1902 7 1.1597 6 1.1043 5 35.2195 6 20.5104 6 14.2044 7 4.6514 6 4.9768 6 2.0 3 5.0932 8 29.026 7 25.2596 6 11.6196 7 0.8269 8 0.0529 6 15.4739 7 1.8304 7 5.3283 7 24.26 7 21.2569 8 10.2569 7)
Average genome size in population (length): 80.8
Average program size in population (points): 81.8
Average percent parens in population: 0.012
Minimum age in population: 120.941547412413
Maximum age in population: 125.613971833449
Average age in population: 123.7284012204977
Median age in population: 123.7396722070099
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 37
Genome diversity (% unique Plush genomes):	 0.805
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 37
Syntactic diversity (% unique Push programs):	 0.805
Total error diversity:				 0.337
Error (vector) diversity:			 0.347
Behavioral diversity:				 0.348
--- Run Statistics ---
Number of program evaluations used so far: 88000
Number of point (instruction) evaluations so far: 136165815
--- Timings ---
Current time: 1529615223981 milliseconds
Total Time:         329.9 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       133.4 seconds, 40.4%
Fitness Testing:    156.0 seconds, 47.3%
Report:              40.4 seconds, 12.2%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 87
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 88
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 88
;;******************************
;; -*- Number IO problem report - generation 88
Test total error for best: 59638.73390000003
Test mean error for best: 29.81937
;;------------------------------
Outputs of best individual on training cases:
Correct output: -116.076402553 | Program output: -41.0401600   
Correct output: 24.1400847456  | Program output: -10.07181     
Correct output: 69.833290954   | Program output: 20.0219241    
Correct output: 82.4958592801  | Program output: 94.015857281  
Correct output: 34.2385110874  | Program output: 81.02551287   
Correct output: -10.7358110665 | Program output: 47.048110545  
Correct output: 1.9700532093   | Program output: -11.050100    
Correct output: -44.7956976677 | Program output: 51.052140557  
Correct output: 68.5576547673  | Program output: 46.047103777  
Correct output: -69.2536523379 | Program output: -54.0192809   
Correct output: -14.2275745396 | Program output: 41.04274047   
Correct output: -171.9767905886 | Program output: -85.0767056   
Correct output: -32.1846093265 | Program output: 1.0232        
Correct output: 66.9812146721  | Program output: 73.074405151  
Correct output: 100.0259781081 | Program output: 34.03542841   
Correct output: -90.2595503995 | Program output: -34.0791089   
Correct output: -82.4635707651 | Program output: -96.0659025   
Correct output: -8.7492896214  | Program output: -50.0312401   
Correct output: -82.1329348831 | Program output: -82.0796561   
Correct output: 24.5261129925  | Program output: -73.0405184   
Correct output: -11.4065589042 | Program output: -53.0602704   
Correct output: 10.3282540908  | Program output: -77.045776    
Correct output: -51.7760580299 | Program output: -78.0755929   
Correct output: 51.8185003253  | Program output: 74.075421801  
Correct output: 110.7431489201 | Program output: 20.0219241    
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_yankdup} {:instruction float_pop} {:instruction float_mult} {:instruction float_yankdup} {:instruction float_pop} {:instruction float_mult} {:instruction in2} {:instruction integer_inc} {:instruction float_yankdup} {:instruction float_yank} {:instruction float_mult} {:instruction 28} {:instruction integer_add} {:instruction float_pop} {:instruction integer_inc} {:instruction in2} {:instruction float_max} {:instruction integer_dup} {:instruction print_float} {:instruction integer_mult} {:instruction float_mult} {:instruction float_pop} {:instruction float_mult} {:instruction float_mult} {:instruction in2} {:instruction float_sub} {:instruction float_sub} {:instruction float_mult} {:instruction integer_dup} {:instruction integer_dup} {:instruction float_add} {:instruction integer_dec} {:instruction integer_shove} {:instruction float_mult} {:instruction float_add} {:instruction float_mult} {:instruction integer_mult} {:instruction integer_dup} {:instruction float_add} {:instruction integer_dup} {:instruction float_add} {:instruction integer_dec} {:instruction integer_mult} {:instruction float_sub} {:instruction float_pop} {:instruction float_tan} {:instruction in2} {:instruction float_max} {:instruction float_pop} {:instruction float_mod} {:instruction in2} {:instruction float_yankdup} {:instruction integer_dup} {:instruction integer_pop} {:instruction integer_dec} {:instruction float_cos} {:instruction float_frominteger} {:instruction integer_swap} {:instruction integer_mod} {:instruction integer_dup} {:instruction 80} {:instruction integer_mod} {:instruction integer_dup} {:instruction print_float} {:instruction float_frominteger} {:instruction print_integer} {:instruction integer_sub} {:instruction integer_inc} {:instruction integer_max} {:instruction integer_stackdepth} {:instruction float_shove} {:instruction float_mult} {:instruction integer_max} {:instruction float_dup} {:instruction float_inc} {:instruction integer_mult} {:instruction integer_shove} {:instruction print_integer} {:instruction integer_swap})
Best program: (float_yankdup float_pop float_mult float_yankdup float_pop float_mult in2 integer_inc float_yankdup float_yank float_mult 28 integer_add float_pop integer_inc in2 float_max integer_dup print_float integer_mult float_mult float_pop float_mult float_mult in2 float_sub float_sub float_mult integer_dup integer_dup float_add integer_dec integer_shove float_mult float_add float_mult integer_mult integer_dup float_add integer_dup float_add integer_dec integer_mult float_sub float_pop float_tan in2 float_max float_pop float_mod in2 float_yankdup integer_dup integer_pop integer_dec float_cos float_frominteger integer_swap integer_mod integer_dup 80 integer_mod integer_dup print_float float_frominteger print_integer integer_sub integer_inc integer_max integer_stackdepth float_shove float_mult integer_max float_dup float_inc integer_mult integer_shove print_integer integer_swap)
Errors: [75.0362 8 34.2119 10 49.8114 9 11.52 6 46.787 8 57.7839 8 13.0202 9 95.8478 11 22.5106 9 15.2344 10 55.2703 10 86.9001 7 33.2078 10 6.0932 11 65.9905 9 56.1804 9 13.6023 8 41.282 10 0.0533 8 97.5666 12 41.6537 8 87.374 12 26.2995 8 22.2569 11 90.7212 8]
Total: 1375.2152000000003
Mean: 27.504305
Genome size: 79
Size: 80
Percent parens: 0.013
--- Population Statistics ---
Average total errors in population: 6368.485937000005
Median total errors in population: 1390.139
Error averages by case: (372.7771977999964 8.836 325.00793029999824 10.413 135.0657070000011 9.652 107.12645490000048 8.439 138.59997709999917 9.365 145.66526689999944 9.945 311.0241246000023 9.376 180.91523779999926 11.846 113.62804629999896 9.92 332.55858569999907 10.839 143.4229732000008 10.66 381.41201170000454 9.19 66.83900670000017 10.433 100.02852890000084 11.227 153.5942698000011 9.997 360.47576730000316 9.956 332.38843300000275 9.285 349.20882420000214 10.669 321.758819200003 8.9 387.30968150000217 12.225 350.20510220000244 9.196 380.09833390000296 12.214 339.93263360000105 9.396 115.46675479999821 11.044 171.94626860000008 9.007)
Error minima by case: (37.0764 6 3.1401 9 4.1546 8 2.4922 5 13.787 7 9.6877 6 3.0202 8 43.7436 9 2.8789 8 14.2344 8 13.1848 9 4.9768 6 31.1606 9 1.3025 8 20.0209 8 25.2596 7 12.5455 8 7.718 8 0.0525 6 1.5261 10 10.3463 7 6.3283 9 3.7761 7 3.7431 7 30.7413 8)
Average genome size in population (length): 80.879
Average program size in population (points): 81.879
Average percent parens in population: 0.012
Minimum age in population: 122.5754389620279
Maximum age in population: 127.3987842022742
Average age in population: 125.0756007236173
Median age in population: 125.0523657896005
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 23
Genome diversity (% unique Plush genomes):	 0.819
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 23
Syntactic diversity (% unique Push programs):	 0.819
Total error diversity:				 0.352
Error (vector) diversity:			 0.371
Behavioral diversity:				 0.371
--- Run Statistics ---
Number of program evaluations used so far: 89000
Number of point (instruction) evaluations so far: 138187790
--- Timings ---
Current time: 1529615228252 milliseconds
Total Time:         334.3 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       135.1 seconds, 40.4%
Fitness Testing:    158.1 seconds, 47.3%
Report:              40.9 seconds, 12.2%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 88
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 89
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 89
;;******************************
;; -*- Number IO problem report - generation 89
Test total error for best: 59638.73390000003
Test mean error for best: 29.81937
;;------------------------------
Outputs of best individual on training cases:
Correct output: -116.076402553 | Program output: -41.0401600   
Correct output: 24.1400847456  | Program output: -10.07181     
Correct output: 69.833290954   | Program output: 20.0219241    
Correct output: 82.4958592801  | Program output: 94.015857281  
Correct output: 34.2385110874  | Program output: 81.02551287   
Correct output: -10.7358110665 | Program output: 47.048110545  
Correct output: 1.9700532093   | Program output: -11.050100    
Correct output: -44.7956976677 | Program output: 51.052140557  
Correct output: 68.5576547673  | Program output: 46.047103777  
Correct output: -69.2536523379 | Program output: -54.0192809   
Correct output: -14.2275745396 | Program output: 41.04274047   
Correct output: -171.9767905886 | Program output: -85.0767056   
Correct output: -32.1846093265 | Program output: 1.0232        
Correct output: 66.9812146721  | Program output: 73.074405151  
Correct output: 100.0259781081 | Program output: 34.03542841   
Correct output: -90.2595503995 | Program output: -34.0791089   
Correct output: -82.4635707651 | Program output: -96.0659025   
Correct output: -8.7492896214  | Program output: -50.0312401   
Correct output: -82.1329348831 | Program output: -82.0796561   
Correct output: 24.5261129925  | Program output: -73.0405184   
Correct output: -11.4065589042 | Program output: -53.0602704   
Correct output: 10.3282540908  | Program output: -77.045776    
Correct output: -51.7760580299 | Program output: -78.0755929   
Correct output: 51.8185003253  | Program output: 74.075421801  
Correct output: 110.7431489201 | Program output: 20.0219241    
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_yankdup} {:instruction float_pop} {:instruction float_mult} {:instruction float_yankdup} {:instruction float_pop} {:instruction float_mult} {:instruction in2} {:instruction integer_inc} {:instruction float_yankdup} {:instruction float_yank} {:instruction float_mult} {:instruction 28} {:instruction integer_add} {:instruction float_pop} {:instruction integer_inc} {:instruction in2} {:instruction float_max} {:instruction integer_dup} {:instruction print_float} {:instruction integer_mult} {:instruction float_mult} {:instruction float_pop} {:instruction float_mult} {:instruction float_mult} {:instruction in2} {:instruction float_sub} {:instruction float_sub} {:instruction float_mult} {:instruction integer_dup} {:instruction integer_dup} {:instruction float_add} {:instruction integer_dec} {:instruction integer_shove} {:instruction float_mult} {:instruction float_add} {:instruction float_mult} {:instruction integer_mult} {:instruction integer_dup} {:instruction float_add} {:instruction integer_dup} {:instruction float_add} {:instruction integer_dec} {:instruction integer_mult} {:instruction float_mult} {:instruction float_pop} {:instruction float_tan} {:instruction in2} {:instruction float_max} {:instruction float_pop} {:instruction float_mod} {:instruction in2} {:instruction float_yankdup} {:instruction integer_dup} {:instruction integer_pop} {:instruction integer_dec} {:instruction float_cos} {:instruction float_frominteger} {:instruction integer_swap} {:instruction integer_mod} {:instruction integer_dup} {:instruction 80} {:instruction integer_mod} {:instruction integer_dup} {:instruction print_float} {:instruction float_frominteger} {:instruction print_integer} {:instruction integer_sub} {:instruction integer_inc} {:instruction integer_max} {:instruction integer_stackdepth} {:instruction float_shove} {:instruction float_mult} {:instruction integer_max} {:instruction integer_stackdepth} {:instruction float_shove} {:instruction float_dup} {:instruction float_dup} {:instruction float_inc} {:instruction integer_mult} {:instruction print_integer})
Best program: (float_yankdup float_pop float_mult float_yankdup float_pop float_mult in2 integer_inc float_yankdup float_yank float_mult 28 integer_add float_pop integer_inc in2 float_max integer_dup print_float integer_mult float_mult float_pop float_mult float_mult in2 float_sub float_sub float_mult integer_dup integer_dup float_add integer_dec integer_shove float_mult float_add float_mult integer_mult integer_dup float_add integer_dup float_add integer_dec integer_mult float_mult float_pop float_tan in2 float_max float_pop float_mod in2 float_yankdup integer_dup integer_pop integer_dec float_cos float_frominteger integer_swap integer_mod integer_dup 80 integer_mod integer_dup print_float float_frominteger print_integer integer_sub integer_inc integer_max integer_stackdepth float_shove float_mult integer_max integer_stackdepth float_shove float_dup float_dup float_inc integer_mult print_integer)
Errors: [75.0362 8 34.2119 10 49.8114 9 11.52 6 46.787 8 57.7839 8 13.0202 9 95.8478 11 22.5106 9 15.2344 10 55.2703 10 86.9001 7 33.2078 10 6.0932 11 65.9905 9 56.1804 9 13.6023 8 41.282 10 0.0533 8 97.5666 12 41.6537 8 87.374 12 26.2995 8 22.2569 11 90.7212 8]
Total: 1375.2152000000003
Mean: 27.504305
Genome size: 80
Size: 81
Percent parens: 0.012
--- Population Statistics ---
Average total errors in population: 6152.4458663999985
Median total errors in population: 1387.6647500000004
Error averages by case: (364.55327839999705 8.802 287.9107869999982 10.398 133.0340619000012 9.683 103.7894140000004 8.357 130.64615979999857 9.327 140.0005980999993 9.862 272.8569128000004 9.335 174.70761309999915 11.853 110.44280939999919 9.905 323.47855939999926 10.806 139.6680719000008 10.61 373.42287230000454 9.125 65.1394394 10.44 96.73214120000101 11.272 149.785804400001 9.997 351.96620770000357 9.902 323.216411800003 9.215 340.7303999000022 10.62 314.1599960000031 8.87 378.97076470000155 12.18 341.3347150000024 9.109 371.6793481000031 12.173 331.56713170000114 9.367 111.13182779999865 11.024 170.27354060000005 9.015)
Error minima by case: (37.0764 6 3.1401 9 4.5058 8 2.4873 6 18.5648 7 9.726 8 0.9701 8 43.7946 9 5.7814 8 14.2347 8 13.219 8 4.9768 7 31.1796 9 5.0928 9 20.0217 8 25.2596 9 11.5364 8 7.7469 9 0.0531 6 8.8524 9 10.4039 8 4.2489 9 24.2239 7 21.2565 8 30.7339 8)
Average genome size in population (length): 81.01
Average program size in population (points): 82.01
Average percent parens in population: 0.012
Minimum age in population: 123.9808230762799
Maximum age in population: 128.5204474661843
Average age in population: 126.4656749554667
Median age in population: 126.4608203469421
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 35
Genome diversity (% unique Plush genomes):	 0.813
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 35
Syntactic diversity (% unique Push programs):	 0.813
Total error diversity:				 0.362
Error (vector) diversity:			 0.369
Behavioral diversity:				 0.369
--- Run Statistics ---
Number of program evaluations used so far: 90000
Number of point (instruction) evaluations so far: 140213040
--- Timings ---
Current time: 1529615232777 milliseconds
Total Time:         338.8 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       136.5 seconds, 40.3%
Fitness Testing:    160.6 seconds, 47.4%
Report:              41.5 seconds, 12.2%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 89
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 90
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 90
;;******************************
;; -*- Number IO problem report - generation 90
Test total error for best: 59638.73390000003
Test mean error for best: 29.81937
;;------------------------------
Outputs of best individual on training cases:
Correct output: -116.076402553 | Program output: -41.0401600   
Correct output: 24.1400847456  | Program output: -10.07181     
Correct output: 69.833290954   | Program output: 20.0219241    
Correct output: 82.4958592801  | Program output: 94.015857281  
Correct output: 34.2385110874  | Program output: 81.02551287   
Correct output: -10.7358110665 | Program output: 47.048110545  
Correct output: 1.9700532093   | Program output: -11.050100    
Correct output: -44.7956976677 | Program output: 51.052140557  
Correct output: 68.5576547673  | Program output: 46.047103777  
Correct output: -69.2536523379 | Program output: -54.0192809   
Correct output: -14.2275745396 | Program output: 41.04274047   
Correct output: -171.9767905886 | Program output: -85.0767056   
Correct output: -32.1846093265 | Program output: 1.0232        
Correct output: 66.9812146721  | Program output: 73.074405151  
Correct output: 100.0259781081 | Program output: 34.03542841   
Correct output: -90.2595503995 | Program output: -34.0791089   
Correct output: -82.4635707651 | Program output: -96.0659025   
Correct output: -8.7492896214  | Program output: -50.0312401   
Correct output: -82.1329348831 | Program output: -82.0796561   
Correct output: 24.5261129925  | Program output: -73.0405184   
Correct output: -11.4065589042 | Program output: -53.0602704   
Correct output: 10.3282540908  | Program output: -77.045776    
Correct output: -51.7760580299 | Program output: -78.0755929   
Correct output: 51.8185003253  | Program output: 74.075421801  
Correct output: 110.7431489201 | Program output: 20.0219241    
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_yankdup} {:instruction float_pop} {:instruction float_mult} {:instruction float_yankdup} {:instruction float_dec} {:instruction float_mult} {:instruction in2} {:instruction integer_inc} {:instruction float_yankdup} {:instruction float_yank} {:instruction float_mult} {:instruction 28} {:instruction integer_add} {:instruction float_pop} {:instruction integer_inc} {:instruction in2} {:instruction float_max} {:instruction integer_dup} {:instruction print_float} {:instruction integer_mult} {:instruction float_mult} {:instruction float_pop} {:instruction float_mult} {:instruction float_mult} {:instruction in2} {:instruction float_sub} {:instruction float_sub} {:instruction float_mult} {:instruction integer_dup} {:instruction integer_dup} {:instruction float_add} {:instruction integer_dec} {:instruction integer_shove} {:instruction float_mult} {:instruction float_add} {:instruction float_mult} {:instruction integer_mult} {:instruction integer_dup} {:instruction float_add} {:instruction integer_dup} {:instruction float_add} {:instruction integer_dec} {:instruction integer_mult} {:instruction float_mult} {:instruction float_pop} {:instruction float_tan} {:instruction in2} {:instruction float_max} {:instruction float_pop} {:instruction float_mod} {:instruction in2} {:instruction float_yankdup} {:instruction integer_dup} {:instruction integer_pop} {:instruction integer_dec} {:instruction float_cos} {:instruction float_frominteger} {:instruction integer_swap} {:instruction integer_mod} {:instruction integer_dup} {:instruction 80} {:instruction integer_mod} {:instruction integer_dup} {:instruction print_float} {:instruction float_frominteger} {:instruction print_integer} {:instruction integer_sub} {:instruction integer_inc} {:instruction integer_max} {:instruction integer_stackdepth} {:instruction float_shove} {:instruction float_mult} {:instruction integer_max} {:instruction float_dup} {:instruction float_inc} {:instruction integer_mult} {:instruction integer_shove} {:instruction print_integer} {:instruction integer_swap})
Best program: (float_yankdup float_pop float_mult float_yankdup float_dec float_mult in2 integer_inc float_yankdup float_yank float_mult 28 integer_add float_pop integer_inc in2 float_max integer_dup print_float integer_mult float_mult float_pop float_mult float_mult in2 float_sub float_sub float_mult integer_dup integer_dup float_add integer_dec integer_shove float_mult float_add float_mult integer_mult integer_dup float_add integer_dup float_add integer_dec integer_mult float_mult float_pop float_tan in2 float_max float_pop float_mod in2 float_yankdup integer_dup integer_pop integer_dec float_cos float_frominteger integer_swap integer_mod integer_dup 80 integer_mod integer_dup print_float float_frominteger print_integer integer_sub integer_inc integer_max integer_stackdepth float_shove float_mult integer_max float_dup float_inc integer_mult integer_shove print_integer integer_swap)
Errors: [75.0362 8 34.2119 10 49.8114 9 11.52 6 46.787 8 57.7839 8 13.0202 9 95.8478 11 22.5106 9 15.2344 10 55.2703 10 86.9001 7 33.2078 10 6.0932 11 65.9905 9 56.1804 9 13.6023 8 41.282 10 0.0533 8 97.5666 12 41.6537 8 87.374 12 26.2995 8 22.2569 11 90.7212 8]
Total: 1375.2152000000003
Mean: 27.504305
Genome size: 79
Size: 80
Percent parens: 0.013
--- Population Statistics ---
Average total errors in population: 5944.233044699999
Median total errors in population: 1385.21475
Error averages by case: (352.0587251999975 8.812 232.99686019999814 10.42 137.93601390000106 9.586 102.85483190000024 8.348 132.49600309999872 9.298 146.19503979999908 9.806 217.97470679999952 9.225 180.5308564999993 11.798 112.94378199999926 9.857 309.5307778999976 10.706 141.12029540000066 10.602 360.78215680000386 9.107 78.89338149999988 10.424 97.60808960000082 11.246 154.90280260000063 9.959 336.53471100000337 9.871 309.8991722000015 9.204 326.9726763000024 10.572 300.6286505000011 8.822 366.8848224000016 12.138 327.3462253000011 9.157 359.774096300003 12.109 318.2300925999998 9.369 113.92655939999861 10.949 174.7777155 9.049)
Error minima by case: (35.0362 7 3.1401 6 10.1879 6 2.4799 5 32.2103 8 9.7435 8 0.969 6 15.203 7 8.4423 8 9.2549 8 13.2402 8 2.9001 6 2.0 4 5.0198 9 19.9906 7 23.1804 8 12.5455 7 8.7517 8 0.0531 6 14.5466 8 10.4883 8 6.3075 8 4.7761 7 21.1826 8 21.0 7)
Average genome size in population (length): 80.71
Average program size in population (points): 81.71
Average percent parens in population: 0.012
Minimum age in population: 125.6832352341032
Maximum age in population: 130.1033187220562
Average age in population: 127.9466145457357
Median age in population: 127.9754831178565
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 58
Genome diversity (% unique Plush genomes):	 0.804
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 58
Syntactic diversity (% unique Push programs):	 0.804
Total error diversity:				 0.388
Error (vector) diversity:			 0.4
Behavioral diversity:				 0.4
--- Run Statistics ---
Number of program evaluations used so far: 91000
Number of point (instruction) evaluations so far: 142230790
--- Timings ---
Current time: 1529615236934 milliseconds
Total Time:         343.0 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       138.1 seconds, 40.3%
Fitness Testing:    162.8 seconds, 47.5%
Report:              42.0 seconds, 12.2%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 90
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 91
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 91
;;******************************
;; -*- Number IO problem report - generation 91
Test total error for best: 59638.73390000003
Test mean error for best: 29.81937
;;------------------------------
Outputs of best individual on training cases:
Correct output: -116.076402553 | Program output: -41.0401600   
Correct output: 24.1400847456  | Program output: -10.07181     
Correct output: 69.833290954   | Program output: 20.0219241    
Correct output: 82.4958592801  | Program output: 94.015857281  
Correct output: 34.2385110874  | Program output: 81.02551287   
Correct output: -10.7358110665 | Program output: 47.048110545  
Correct output: 1.9700532093   | Program output: -11.050100    
Correct output: -44.7956976677 | Program output: 51.052140557  
Correct output: 68.5576547673  | Program output: 46.047103777  
Correct output: -69.2536523379 | Program output: -54.0192809   
Correct output: -14.2275745396 | Program output: 41.04274047   
Correct output: -171.9767905886 | Program output: -85.0767056   
Correct output: -32.1846093265 | Program output: 1.0232        
Correct output: 66.9812146721  | Program output: 73.074405151  
Correct output: 100.0259781081 | Program output: 34.03542841   
Correct output: -90.2595503995 | Program output: -34.0791089   
Correct output: -82.4635707651 | Program output: -96.0659025   
Correct output: -8.7492896214  | Program output: -50.0312401   
Correct output: -82.1329348831 | Program output: -82.0796561   
Correct output: 24.5261129925  | Program output: -73.0405184   
Correct output: -11.4065589042 | Program output: -53.0602704   
Correct output: 10.3282540908  | Program output: -77.045776    
Correct output: -51.7760580299 | Program output: -78.0755929   
Correct output: 51.8185003253  | Program output: 74.075421801  
Correct output: 110.7431489201 | Program output: 20.0219241    
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_yankdup} {:instruction float_pop} {:instruction float_mult} {:instruction float_yankdup} {:instruction float_pop} {:instruction float_mult} {:instruction in2} {:instruction integer_inc} {:instruction float_yankdup} {:instruction float_yank} {:instruction float_mult} {:instruction 28} {:instruction integer_add} {:instruction float_pop} {:instruction integer_inc} {:instruction in2} {:instruction float_max} {:instruction integer_dup} {:instruction print_float} {:instruction integer_mult} {:instruction float_mult} {:instruction float_pop} {:instruction float_mult} {:instruction float_mult} {:instruction in2} {:instruction float_sub} {:instruction float_sub} {:instruction float_mult} {:instruction integer_dup} {:instruction integer_dup} {:instruction float_add} {:instruction integer_dec} {:instruction integer_shove} {:instruction float_mult} {:instruction float_add} {:instruction float_mult} {:instruction integer_mult} {:instruction integer_dup} {:instruction float_add} {:instruction integer_dup} {:instruction float_add} {:instruction integer_dec} {:instruction integer_mult} {:instruction float_mult} {:instruction float_pop} {:instruction float_tan} {:instruction in2} {:instruction float_max} {:instruction float_pop} {:instruction float_mod} {:instruction in2} {:instruction float_yankdup} {:instruction integer_dup} {:instruction integer_pop} {:instruction integer_dec} {:instruction float_cos} {:instruction float_frominteger} {:instruction integer_swap} {:instruction integer_mod} {:instruction integer_dup} {:instruction 80} {:instruction integer_mod} {:instruction integer_dup} {:instruction print_float} {:instruction float_frominteger} {:instruction print_integer} {:instruction integer_sub} {:instruction integer_inc} {:instruction integer_max} {:instruction integer_stackdepth} {:instruction float_shove} {:instruction float_mult} {:instruction integer_max} {:instruction float_dup} {:instruction float_inc} {:instruction integer_mult} {:instruction integer_shove} {:instruction integer_mult} {:instruction integer_shove} {:instruction print_integer} {:instruction integer_swap})
Best program: (float_yankdup float_pop float_mult float_yankdup float_pop float_mult in2 integer_inc float_yankdup float_yank float_mult 28 integer_add float_pop integer_inc in2 float_max integer_dup print_float integer_mult float_mult float_pop float_mult float_mult in2 float_sub float_sub float_mult integer_dup integer_dup float_add integer_dec integer_shove float_mult float_add float_mult integer_mult integer_dup float_add integer_dup float_add integer_dec integer_mult float_mult float_pop float_tan in2 float_max float_pop float_mod in2 float_yankdup integer_dup integer_pop integer_dec float_cos float_frominteger integer_swap integer_mod integer_dup 80 integer_mod integer_dup print_float float_frominteger print_integer integer_sub integer_inc integer_max integer_stackdepth float_shove float_mult integer_max float_dup float_inc integer_mult integer_shove integer_mult integer_shove print_integer integer_swap)
Errors: [75.0362 8 34.2119 10 49.8114 9 11.52 6 46.787 8 57.7839 8 13.0202 9 95.8478 11 22.5106 9 15.2344 10 55.2703 10 86.9001 7 33.2078 10 6.0932 11 65.9905 9 56.1804 9 13.6023 8 41.282 10 0.0533 8 97.5666 12 41.6537 8 87.374 12 26.2995 8 22.2569 11 90.7212 8]
Total: 1375.2152000000003
Mean: 27.504305
Genome size: 81
Size: 82
Percent parens: 0.012
--- Population Statistics ---
Average total errors in population: 5583.702261399994
Median total errors in population: 1381.2411000000002
Error averages by case: (339.8395136999967 8.775 180.51953679999812 10.306 129.56624650000128 9.642 87.07644520000025 8.358 124.2686155999984 9.337 135.91864209999878 9.784 164.8461696999994 9.132 169.89668809999912 11.774 97.90402649999918 9.853 297.99765399999893 10.607 127.03748970000055 10.607 350.0669270000045 9.085 75.4826137999996 10.372 81.92921980000094 11.281 143.5039059000007 9.975 326.76920530000336 9.84 298.44608190000287 9.103 314.98202950000245 10.529 289.22796020000254 8.781 356.12453420000236 12.163 316.2089301000022 9.079 348.577292900003 12.103 307.0284795000009 9.377 103.59384729999859 10.998 166.99120610000008 9.038)
Error minima by case: (37.0764 7 3.1379 9 9.176 9 2.4959 5 30.2169 7 9.7309 8 2.1 7 43.7904 9 7.4423 8 14.2347 8 13.2233 9 4.9768 7 31.1813 9 5.0928 8 20.026 8 25.2596 8 12.5364 7 9.0212 9 0.0329 6 14.5466 9 10.5934 8 5.3283 9 4.7761 7 21.2565 8 30.7431 7)
Average genome size in population (length): 80.166
Average program size in population (points): 81.166
Average percent parens in population: 0.012
Minimum age in population: 127.095302669726
Maximum age in population: 131.2457417284964
Average age in population: 129.3697698260248
Median age in population: 129.4411053860967
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 72
Genome diversity (% unique Plush genomes):	 0.77
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 72
Syntactic diversity (% unique Push programs):	 0.77
Total error diversity:				 0.352
Error (vector) diversity:			 0.36
Behavioral diversity:				 0.361
--- Run Statistics ---
Number of program evaluations used so far: 92000
Number of point (instruction) evaluations so far: 144234940
--- Timings ---
Current time: 1529615240998 milliseconds
Total Time:         347.0 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       139.5 seconds, 40.2%
Fitness Testing:    164.8 seconds, 47.5%
Report:              42.5 seconds, 12.3%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 91
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 92
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 92
;;******************************
;; -*- Number IO problem report - generation 92
Test total error for best: 59638.73390000003
Test mean error for best: 29.81937
;;------------------------------
Outputs of best individual on training cases:
Correct output: -116.076402553 | Program output: -41.0401600   
Correct output: 24.1400847456  | Program output: -10.07181     
Correct output: 69.833290954   | Program output: 20.0219241    
Correct output: 82.4958592801  | Program output: 94.015857281  
Correct output: 34.2385110874  | Program output: 81.02551287   
Correct output: -10.7358110665 | Program output: 47.048110545  
Correct output: 1.9700532093   | Program output: -11.050100    
Correct output: -44.7956976677 | Program output: 51.052140557  
Correct output: 68.5576547673  | Program output: 46.047103777  
Correct output: -69.2536523379 | Program output: -54.0192809   
Correct output: -14.2275745396 | Program output: 41.04274047   
Correct output: -171.9767905886 | Program output: -85.0767056   
Correct output: -32.1846093265 | Program output: 1.0232        
Correct output: 66.9812146721  | Program output: 73.074405151  
Correct output: 100.0259781081 | Program output: 34.03542841   
Correct output: -90.2595503995 | Program output: -34.0791089   
Correct output: -82.4635707651 | Program output: -96.0659025   
Correct output: -8.7492896214  | Program output: -50.0312401   
Correct output: -82.1329348831 | Program output: -82.0796561   
Correct output: 24.5261129925  | Program output: -73.0405184   
Correct output: -11.4065589042 | Program output: -53.0602704   
Correct output: 10.3282540908  | Program output: -77.045776    
Correct output: -51.7760580299 | Program output: -78.0755929   
Correct output: 51.8185003253  | Program output: 74.075421801  
Correct output: 110.7431489201 | Program output: 20.0219241    
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_pop} {:instruction float_mult} {:instruction float_yankdup} {:instruction float_pop} {:instruction float_mult} {:instruction in2} {:instruction integer_inc} {:instruction float_yankdup} {:instruction float_yank} {:instruction float_mult} {:instruction 28} {:instruction integer_add} {:instruction float_pop} {:instruction integer_inc} {:instruction in2} {:instruction float_max} {:instruction integer_dup} {:instruction print_float} {:instruction integer_mult} {:instruction float_mult} {:instruction float_pop} {:instruction float_mult} {:instruction float_mult} {:instruction in2} {:instruction float_sub} {:instruction float_sub} {:instruction float_mult} {:instruction integer_dup} {:instruction integer_dup} {:instruction float_add} {:instruction integer_dec} {:instruction integer_shove} {:instruction float_mult} {:instruction float_add} {:instruction float_mult} {:instruction integer_mult} {:instruction integer_dup} {:instruction float_add} {:instruction integer_dup} {:instruction float_add} {:instruction integer_dec} {:instruction integer_mult} {:instruction float_mult} {:instruction float_pop} {:instruction float_tan} {:instruction in2} {:instruction float_max} {:instruction float_pop} {:instruction float_mod} {:instruction in2} {:instruction float_yankdup} {:instruction integer_dup} {:instruction integer_pop} {:instruction integer_dec} {:instruction float_cos} {:instruction float_frominteger} {:instruction integer_swap} {:instruction integer_mod} {:instruction integer_dup} {:instruction 80} {:instruction integer_mod} {:instruction integer_dup} {:instruction print_float} {:instruction float_frominteger} {:instruction print_integer} {:instruction integer_sub} {:instruction integer_inc} {:instruction integer_max} {:instruction integer_stackdepth} {:instruction float_shove} {:instruction float_mult} {:instruction integer_max} {:instruction float_dup} {:instruction float_inc} {:instruction integer_mult} {:instruction integer_shove} {:instruction print_integer} {:instruction integer_swap})
Best program: (float_pop float_mult float_yankdup float_pop float_mult in2 integer_inc float_yankdup float_yank float_mult 28 integer_add float_pop integer_inc in2 float_max integer_dup print_float integer_mult float_mult float_pop float_mult float_mult in2 float_sub float_sub float_mult integer_dup integer_dup float_add integer_dec integer_shove float_mult float_add float_mult integer_mult integer_dup float_add integer_dup float_add integer_dec integer_mult float_mult float_pop float_tan in2 float_max float_pop float_mod in2 float_yankdup integer_dup integer_pop integer_dec float_cos float_frominteger integer_swap integer_mod integer_dup 80 integer_mod integer_dup print_float float_frominteger print_integer integer_sub integer_inc integer_max integer_stackdepth float_shove float_mult integer_max float_dup float_inc integer_mult integer_shove print_integer integer_swap)
Errors: [75.0362 8 34.2119 10 49.8114 9 11.52 6 46.787 8 57.7839 8 13.0202 9 95.8478 11 22.5106 9 15.2344 10 55.2703 10 86.9001 7 33.2078 10 6.0932 11 65.9905 9 56.1804 9 13.6023 8 41.282 10 0.0533 8 97.5666 12 41.6537 8 87.374 12 26.2995 8 22.2569 11 90.7212 8]
Total: 1375.2152000000003
Mean: 27.504305
Genome size: 78
Size: 79
Percent parens: 0.013
--- Population Statistics ---
Average total errors in population: 5822.232638299996
Median total errors in population: 1382.1964
Error averages by case: (351.29596139999677 8.806 180.75934819999816 10.324 135.96011400000123 9.675 102.76158730000002 8.37 132.0417403999984 9.322 144.0344320999995 9.78 165.21332859999947 9.12 178.50286369999915 11.764 112.02491519999914 9.872 309.37956189999863 10.603 140.9019621000005 10.681 359.97184840000426 9.123 81.71859839999965 10.397 97.6397143000009 11.31 152.10217830000101 10.047 338.05620860000346 9.924 308.2677325000021 9.173 326.8072161000026 10.54 298.9939471000017 8.834 365.90176960000184 12.122 327.11035540000165 9.131 359.7119092000029 12.072 316.7739645000005 9.371 112.86657089999865 11.044 172.94481010000027 9.085)
Error minima by case: (74.0362 7 3.1401 8 9.176 8 2.4959 5 28.2303 7 9.6873 6 0.9701 7 43.7432 8 8.4423 8 14.2204 8 13.1851 9 85.9001 6 2.0 6 5.0198 9 20.026 8 55.1804 9 10.5364 8 7.718 8 0.0523 6 15.4739 10 10.3463 7 6.3283 9 4.7761 7 21.1826 8 21.0 8)
Average genome size in population (length): 79.957
Average program size in population (points): 80.957
Average percent parens in population: 0.012
Minimum age in population: 128.095302669726
Maximum age in population: 133.1742104765949
Average age in population: 130.7833106549953
Median age in population: 130.8381810156315
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 49
Genome diversity (% unique Plush genomes):	 0.802
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 49
Syntactic diversity (% unique Push programs):	 0.802
Total error diversity:				 0.353
Error (vector) diversity:			 0.36
Behavioral diversity:				 0.36
--- Run Statistics ---
Number of program evaluations used so far: 93000
Number of point (instruction) evaluations so far: 146233865
--- Timings ---
Current time: 1529615245194 milliseconds
Total Time:         351.1 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       141.0 seconds, 40.2%
Fitness Testing:    167.0 seconds, 47.6%
Report:              43.0 seconds, 12.3%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 92
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 93
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 93
;;******************************
;; -*- Number IO problem report - generation 93
Test total error for best: 59638.73390000003
Test mean error for best: 29.81937
;;------------------------------
Outputs of best individual on training cases:
Correct output: -116.076402553 | Program output: -41.0401600   
Correct output: 24.1400847456  | Program output: -10.07181     
Correct output: 69.833290954   | Program output: 20.0219241    
Correct output: 82.4958592801  | Program output: 94.015857281  
Correct output: 34.2385110874  | Program output: 81.02551287   
Correct output: -10.7358110665 | Program output: 47.048110545  
Correct output: 1.9700532093   | Program output: -11.050100    
Correct output: -44.7956976677 | Program output: 51.052140557  
Correct output: 68.5576547673  | Program output: 46.047103777  
Correct output: -69.2536523379 | Program output: -54.0192809   
Correct output: -14.2275745396 | Program output: 41.04274047   
Correct output: -171.9767905886 | Program output: -85.0767056   
Correct output: -32.1846093265 | Program output: 1.0232        
Correct output: 66.9812146721  | Program output: 73.074405151  
Correct output: 100.0259781081 | Program output: 34.03542841   
Correct output: -90.2595503995 | Program output: -34.0791089   
Correct output: -82.4635707651 | Program output: -96.0659025   
Correct output: -8.7492896214  | Program output: -50.0312401   
Correct output: -82.1329348831 | Program output: -82.0796561   
Correct output: 24.5261129925  | Program output: -73.0405184   
Correct output: -11.4065589042 | Program output: -53.0602704   
Correct output: 10.3282540908  | Program output: -77.045776    
Correct output: -51.7760580299 | Program output: -78.0755929   
Correct output: 51.8185003253  | Program output: 74.075421801  
Correct output: 110.7431489201 | Program output: 20.0219241    
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_yankdup} {:instruction float_pop} {:instruction float_mult} {:instruction float_yankdup} {:instruction float_add} {:instruction float_mult} {:instruction in2} {:instruction integer_inc} {:instruction float_yankdup} {:instruction float_yank} {:instruction float_mult} {:instruction 28} {:instruction integer_add} {:instruction float_pop} {:instruction integer_inc} {:instruction in2} {:instruction float_max} {:instruction integer_dup} {:instruction integer_fromfloat} {:instruction integer_mult} {:instruction float_mult} {:instruction float_pop} {:instruction float_mult} {:instruction float_mult} {:instruction in2} {:instruction float_sub} {:instruction float_sub} {:instruction float_mult} {:instruction integer_dup} {:instruction integer_dup} {:instruction float_add} {:instruction integer_dec} {:instruction integer_shove} {:instruction float_mult} {:instruction float_add} {:instruction float_mult} {:instruction integer_mult} {:instruction integer_dup} {:instruction float_add} {:instruction integer_dup} {:instruction float_add} {:instruction integer_dec} {:instruction integer_mult} {:instruction float_mult} {:instruction float_pop} {:instruction float_tan} {:instruction in2} {:instruction float_max} {:instruction float_pop} {:instruction float_mod} {:instruction in2} {:instruction float_yankdup} {:instruction integer_stackdepth} {:instruction integer_pop} {:instruction integer_dec} {:instruction float_cos} {:instruction float_frominteger} {:instruction integer_swap} {:instruction integer_mod} {:instruction integer_dup} {:instruction 80} {:instruction integer_mod} {:instruction integer_dup} {:instruction print_float} {:instruction float_frominteger} {:instruction print_integer} {:instruction integer_sub} {:instruction integer_inc} {:instruction integer_max} {:instruction integer_stackdepth} {:instruction float_shove} {:instruction float_mult} {:instruction integer_max} {:instruction float_inc} {:instruction integer_mult} {:instruction integer_shove} {:instruction print_integer} {:instruction integer_swap})
Best program: (float_yankdup float_pop float_mult float_yankdup float_add float_mult in2 integer_inc float_yankdup float_yank float_mult 28 integer_add float_pop integer_inc in2 float_max integer_dup integer_fromfloat integer_mult float_mult float_pop float_mult float_mult in2 float_sub float_sub float_mult integer_dup integer_dup float_add integer_dec integer_shove float_mult float_add float_mult integer_mult integer_dup float_add integer_dup float_add integer_dec integer_mult float_mult float_pop float_tan in2 float_max float_pop float_mod in2 float_yankdup integer_stackdepth integer_pop integer_dec float_cos float_frominteger integer_swap integer_mod integer_dup 80 integer_mod integer_dup print_float float_frominteger print_integer integer_sub integer_inc integer_max integer_stackdepth float_shove float_mult integer_max float_inc integer_mult integer_shove print_integer integer_swap)
Errors: [75.0362 8 34.2119 10 49.8114 9 11.52 6 46.787 8 57.7839 8 13.0202 9 95.8478 11 22.5106 9 15.2344 10 55.2703 10 86.9001 7 33.2078 10 6.0932 11 65.9905 9 56.1804 9 13.6023 8 41.282 10 0.0533 8 97.5666 12 41.6537 8 87.374 12 26.2995 8 22.2569 11 90.7212 8]
Total: 1375.2152000000003
Mean: 27.504305
Genome size: 78
Size: 79
Percent parens: 0.013
--- Population Statistics ---
Average total errors in population: 5720.424996199994
Median total errors in population: 1382.2211500000003
Error averages by case: (347.43788589999724 8.797 171.26051899999806 10.307 132.5250201000014 9.569 97.3405183000005 8.275 126.82277569999852 9.204 141.3707482999992 9.73 154.2116043999997 9.113 175.244498199999 11.69 105.30452929999896 9.772 306.91132479999806 10.586 135.18379230000076 10.553 359.5020926000042 9.088 74.6787861999993 10.409 91.66889560000092 11.178 148.14539750000083 9.988 334.44551600000335 9.877 307.43079830000147 9.116 323.9840337000025 10.506 298.3757029000013 8.848 363.84310980000174 12.069 324.702556700001 9.087 356.40407440000274 12.014 315.8416880999998 9.338 109.19450659999823 10.881 169.55062150000018 9.049)
Error minima by case: (36.0748 6 3.1401 8 9.1678 8 2.4873 5 10.2385 7 10.7358 8 0.0487 7 44.7957 9 8.4423 8 14.2169 8 14.2276 8 3.9697 7 32.1846 7 5.0929 9 20.0217 8 24.2585 8 11.6023 7 8.7493 8 0.0529 6 14.0563 9 10.5934 7 0.1415 9 4.7761 8 21.2567 8 30.7339 8)
Average genome size in population (length): 79.782
Average program size in population (points): 80.782
Average percent parens in population: 0.012
Minimum age in population: 129.6543451135933
Maximum age in population: 133.9968719557953
Average age in population: 132.1584154535868
Median age in population: 132.1690838904348
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 34
Genome diversity (% unique Plush genomes):	 0.815
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 34
Syntactic diversity (% unique Push programs):	 0.815
Total error diversity:				 0.361
Error (vector) diversity:			 0.367
Behavioral diversity:				 0.367
--- Run Statistics ---
Number of program evaluations used so far: 94000
Number of point (instruction) evaluations so far: 148228415
--- Timings ---
Current time: 1529615249520 milliseconds
Total Time:         355.6 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       142.6 seconds, 40.1%
Fitness Testing:    169.1 seconds, 47.6%
Report:              43.7 seconds, 12.3%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 93
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 94
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 94
;;******************************
;; -*- Number IO problem report - generation 94
Test total error for best: 59638.73390000003
Test mean error for best: 29.81937
;;------------------------------
Outputs of best individual on training cases:
Correct output: -116.076402553 | Program output: -41.0401600   
Correct output: 24.1400847456  | Program output: -10.07181     
Correct output: 69.833290954   | Program output: 20.0219241    
Correct output: 82.4958592801  | Program output: 94.015857281  
Correct output: 34.2385110874  | Program output: 81.02551287   
Correct output: -10.7358110665 | Program output: 47.048110545  
Correct output: 1.9700532093   | Program output: -11.050100    
Correct output: -44.7956976677 | Program output: 51.052140557  
Correct output: 68.5576547673  | Program output: 46.047103777  
Correct output: -69.2536523379 | Program output: -54.0192809   
Correct output: -14.2275745396 | Program output: 41.04274047   
Correct output: -171.9767905886 | Program output: -85.0767056   
Correct output: -32.1846093265 | Program output: 1.0232        
Correct output: 66.9812146721  | Program output: 73.074405151  
Correct output: 100.0259781081 | Program output: 34.03542841   
Correct output: -90.2595503995 | Program output: -34.0791089   
Correct output: -82.4635707651 | Program output: -96.0659025   
Correct output: -8.7492896214  | Program output: -50.0312401   
Correct output: -82.1329348831 | Program output: -82.0796561   
Correct output: 24.5261129925  | Program output: -73.0405184   
Correct output: -11.4065589042 | Program output: -53.0602704   
Correct output: 10.3282540908  | Program output: -77.045776    
Correct output: -51.7760580299 | Program output: -78.0755929   
Correct output: 51.8185003253  | Program output: 74.075421801  
Correct output: 110.7431489201 | Program output: 20.0219241    
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_yankdup} {:instruction float_pop} {:instruction float_mult} {:instruction float_yankdup} {:instruction integer_max} {:instruction float_mult} {:instruction in2} {:instruction integer_inc} {:instruction float_yankdup} {:instruction 28} {:instruction integer_add} {:instruction float_pop} {:instruction integer_inc} {:instruction in2} {:instruction float_max} {:instruction integer_dup} {:instruction print_float} {:instruction integer_mult} {:instruction float_mult} {:instruction float_pop} {:instruction float_mult} {:instruction float_flush} {:instruction in2} {:instruction float_sub} {:instruction float_sub} {:instruction float_mult} {:instruction integer_dup} {:instruction integer_dup} {:instruction integer_shove} {:instruction float_mult} {:instruction float_add} {:instruction float_mult} {:instruction integer_mult} {:instruction integer_dup} {:instruction float_add} {:instruction integer_dup} {:instruction float_add} {:instruction integer_dec} {:instruction integer_mult} {:instruction float_mult} {:instruction float_pop} {:instruction float_tan} {:instruction in2} {:instruction float_max} {:instruction float_swap} {:instruction float_mod} {:instruction in2} {:instruction float_yankdup} {:instruction integer_dup} {:instruction integer_pop} {:instruction integer_dec} {:instruction float_cos} {:instruction float_frominteger} {:instruction integer_swap} {:instruction integer_mod} {:instruction integer_dup} {:instruction 80} {:instruction integer_mod} {:instruction integer_dup} {:instruction print_float} {:instruction float_frominteger} {:instruction print_integer} {:instruction integer_sub} {:instruction integer_inc} {:instruction integer_max} {:instruction integer_stackdepth} {:instruction float_shove} {:instruction float_mult} {:instruction integer_max} {:instruction float_dup} {:instruction float_inc} {:instruction integer_mult} {:instruction integer_shove} {:instruction print_integer} {:instruction integer_swap})
Best program: (float_yankdup float_pop float_mult float_yankdup integer_max float_mult in2 integer_inc float_yankdup 28 integer_add float_pop integer_inc in2 float_max integer_dup print_float integer_mult float_mult float_pop float_mult float_flush in2 float_sub float_sub float_mult integer_dup integer_dup integer_shove float_mult float_add float_mult integer_mult integer_dup float_add integer_dup float_add integer_dec integer_mult float_mult float_pop float_tan in2 float_max float_swap float_mod in2 float_yankdup integer_dup integer_pop integer_dec float_cos float_frominteger integer_swap integer_mod integer_dup 80 integer_mod integer_dup print_float float_frominteger print_integer integer_sub integer_inc integer_max integer_stackdepth float_shove float_mult integer_max float_dup float_inc integer_mult integer_shove print_integer integer_swap)
Errors: [75.0362 8 34.2119 10 49.8114 9 11.52 6 46.787 8 57.7839 8 13.0202 9 95.8478 11 22.5106 9 15.2344 10 55.2703 10 86.9001 7 33.2078 10 6.0932 11 65.9905 9 56.1804 9 13.6023 8 41.282 10 0.0533 8 97.5666 12 41.6537 8 87.374 12 26.2995 8 22.2569 11 90.7212 8]
Total: 1375.2152000000003
Mean: 27.504305
Genome size: 75
Size: 76
Percent parens: 0.013
--- Population Statistics ---
Average total errors in population: 6146.926447700001
Median total errors in population: 1386.2155500000003
Error averages by case: (364.16105769999734 8.779 189.47736729999824 10.362 150.67584360000149 9.661 116.82965260000024 8.403 145.7829771999992 9.323 158.6735606999998 9.82 172.68539219999965 9.099 192.61983809999882 11.811 126.15315619999905 9.84 322.6475231999988 10.591 155.4994323000008 10.665 373.5505424000034 9.178 88.49809239999958 10.406 111.78590520000101 11.283 165.77576430000127 10.046 351.57586050000293 9.89 322.6094657000018 9.085 339.85657760000225 10.535 313.84887140000177 8.8 378.1554861000015 12.126 340.79596130000135 9.109 369.58134270000284 12.044 331.1061985000003 9.368 127.13442669999847 11.012 187.1061518000001 9.104)
Error minima by case: (40.0 7 3.1401 5 10.1667 6 2.4959 6 32.2102 8 9.7435 6 1.9656 6 44.8011 6 8.4423 6 14.1737 7 13.2402 5 84.0 7 2.0 4 5.0936 9 20.026 7 33.0 8 12.5446 7 8.7517 8 0.0533 6 14.5459 8 10.4883 8 6.3075 8 4.7761 7 21.2573 8 21.0 7)
Average genome size in population (length): 79.844
Average program size in population (points): 80.844
Average percent parens in population: 0.012
Minimum age in population: 130.9939153594443
Maximum age in population: 135.4785731833176
Average age in population: 133.5898191244508
Median age in population: 133.6065852471384
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 24
Genome diversity (% unique Plush genomes):	 0.828
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 24
Syntactic diversity (% unique Push programs):	 0.828
Total error diversity:				 0.344
Error (vector) diversity:			 0.351
Behavioral diversity:				 0.352
--- Run Statistics ---
Number of program evaluations used so far: 95000
Number of point (instruction) evaluations so far: 150224515
--- Timings ---
Current time: 1529615253667 milliseconds
Total Time:         359.6 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       144.1 seconds, 40.1%
Fitness Testing:    171.2 seconds, 47.6%
Report:              44.1 seconds, 12.3%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 94
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 95
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 95
;;******************************
;; -*- Number IO problem report - generation 95
Test total error for best: 59638.73390000003
Test mean error for best: 29.81937
;;------------------------------
Outputs of best individual on training cases:
Correct output: -116.076402553 | Program output: -41.0401600   
Correct output: 24.1400847456  | Program output: -10.07181     
Correct output: 69.833290954   | Program output: 20.0219241    
Correct output: 82.4958592801  | Program output: 94.015857281  
Correct output: 34.2385110874  | Program output: 81.02551287   
Correct output: -10.7358110665 | Program output: 47.048110545  
Correct output: 1.9700532093   | Program output: -11.050100    
Correct output: -44.7956976677 | Program output: 51.052140557  
Correct output: 68.5576547673  | Program output: 46.047103777  
Correct output: -69.2536523379 | Program output: -54.0192809   
Correct output: -14.2275745396 | Program output: 41.04274047   
Correct output: -171.9767905886 | Program output: -85.0767056   
Correct output: -32.1846093265 | Program output: 1.0232        
Correct output: 66.9812146721  | Program output: 73.074405151  
Correct output: 100.0259781081 | Program output: 34.03542841   
Correct output: -90.2595503995 | Program output: -34.0791089   
Correct output: -82.4635707651 | Program output: -96.0659025   
Correct output: -8.7492896214  | Program output: -50.0312401   
Correct output: -82.1329348831 | Program output: -82.0796561   
Correct output: 24.5261129925  | Program output: -73.0405184   
Correct output: -11.4065589042 | Program output: -53.0602704   
Correct output: 10.3282540908  | Program output: -77.045776    
Correct output: -51.7760580299 | Program output: -78.0755929   
Correct output: 51.8185003253  | Program output: 74.075421801  
Correct output: 110.7431489201 | Program output: 20.0219241    
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_yankdup} {:instruction float_pop} {:instruction float_mult} {:instruction float_yankdup} {:instruction float_mult} {:instruction in2} {:instruction integer_inc} {:instruction float_yankdup} {:instruction float_yank} {:instruction float_mult} {:instruction 28} {:instruction integer_add} {:instruction float_pop} {:instruction integer_inc} {:instruction in2} {:instruction float_max} {:instruction integer_dup} {:instruction print_float} {:instruction integer_mult} {:instruction float_mult} {:instruction float_pop} {:instruction float_mult} {:instruction float_mult} {:instruction in2} {:instruction float_sub} {:instruction float_sub} {:instruction float_mult} {:instruction integer_dup} {:instruction integer_dup} {:instruction float_yankdup} {:instruction integer_dec} {:instruction integer_shove} {:instruction float_mult} {:instruction float_add} {:instruction float_mult} {:instruction integer_mult} {:instruction integer_dup} {:instruction float_yank} {:instruction integer_dup} {:instruction float_add} {:instruction integer_dec} {:instruction integer_mult} {:instruction float_mult} {:instruction float_pop} {:instruction float_tan} {:instruction in2} {:instruction float_max} {:instruction float_pop} {:instruction float_mod} {:instruction in2} {:instruction float_yankdup} {:instruction integer_dup} {:instruction integer_pop} {:instruction integer_dec} {:instruction float_cos} {:instruction float_frominteger} {:instruction integer_swap} {:instruction integer_mod} {:instruction integer_dup} {:instruction 80} {:instruction integer_mod} {:instruction integer_dup} {:instruction print_float} {:instruction float_frominteger} {:instruction print_integer} {:instruction integer_sub} {:instruction integer_inc} {:instruction integer_max} {:instruction integer_stackdepth} {:instruction float_shove} {:instruction float_flush} {:instruction integer_max} {:instruction float_dup} {:instruction float_inc} {:instruction integer_mult} {:instruction integer_shove} {:instruction print_integer} {:instruction integer_swap})
Best program: (float_yankdup float_pop float_mult float_yankdup float_mult in2 integer_inc float_yankdup float_yank float_mult 28 integer_add float_pop integer_inc in2 float_max integer_dup print_float integer_mult float_mult float_pop float_mult float_mult in2 float_sub float_sub float_mult integer_dup integer_dup float_yankdup integer_dec integer_shove float_mult float_add float_mult integer_mult integer_dup float_yank integer_dup float_add integer_dec integer_mult float_mult float_pop float_tan in2 float_max float_pop float_mod in2 float_yankdup integer_dup integer_pop integer_dec float_cos float_frominteger integer_swap integer_mod integer_dup 80 integer_mod integer_dup print_float float_frominteger print_integer integer_sub integer_inc integer_max integer_stackdepth float_shove float_flush integer_max float_dup float_inc integer_mult integer_shove print_integer integer_swap)
Errors: [75.0362 8 34.2119 10 49.8114 9 11.52 6 46.787 8 57.7839 8 13.0202 9 95.8478 11 22.5106 9 15.2344 10 55.2703 10 86.9001 7 33.2078 10 6.0932 11 65.9905 9 56.1804 9 13.6023 8 41.282 10 0.0533 8 97.5666 12 41.6537 8 87.374 12 26.2995 8 22.2569 11 90.7212 8]
Total: 1375.2152000000003
Mean: 27.504305
Genome size: 78
Size: 79
Percent parens: 0.013
--- Population Statistics ---
Average total errors in population: 6396.350547600001
Median total errors in population: 1391.5694
Error averages by case: (388.7253322999961 8.833 187.67603609999819 10.372 147.37173860000163 9.677 114.33949330000068 8.546 142.4365617999993 9.422 155.45112970000005 9.912 172.94407079999965 9.112 189.55264139999815 11.895 121.79475799999862 9.908 349.85473020000006 10.642 151.08433650000117 10.677 398.8143113000053 9.262 82.8728050999998 10.429 107.35486440000099 11.347 162.47390810000206 10.096 376.15446840000345 9.918 351.6705278000044 9.188 365.7582252000022 10.563 342.41107360000416 8.841 404.9096537000026 12.111 367.1222837000034 9.179 397.50141230000315 12.054 358.87626320000203 9.501 123.73807209999782 11.018 183.8838500000001 9.075)
Error minima by case: (35.0748 7 3.0669 9 10.176 8 2.4873 5 21.9284 8 4.3254 8 2.9711 7 10.7446 9 8.4423 8 14.2344 8 0.8336 9 2.9697 7 1.8292 6 5.0198 9 20.0217 8 23.2585 8 10.5364 8 6.3119 9 0.0329 6 14.5466 9 3.6547 8 7.3075 8 4.7761 7 4.3484 8 30.7339 7)
Average genome size in population (length): 79.984
Average program size in population (points): 80.984
Average percent parens in population: 0.012
Minimum age in population: 132.1987525670959
Maximum age in population: 136.9843177080525
Average age in population: 135.0096317901234
Median age in population: 135.0428513831461
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 21
Genome diversity (% unique Plush genomes):	 0.85
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 21
Syntactic diversity (% unique Push programs):	 0.85
Total error diversity:				 0.354
Error (vector) diversity:			 0.367
Behavioral diversity:				 0.367
--- Run Statistics ---
Number of program evaluations used so far: 96000
Number of point (instruction) evaluations so far: 152224115
--- Timings ---
Current time: 1529615257674 milliseconds
Total Time:         363.7 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       145.5 seconds, 40.0%
Fitness Testing:    173.3 seconds, 47.7%
Report:              44.8 seconds, 12.3%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 95
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 96
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 96
;;******************************
;; -*- Number IO problem report - generation 96
Test total error for best: 64453.020200000035
Test mean error for best: 32.22651
;;------------------------------
Outputs of best individual on training cases:
Correct output: -116.076402553 | Program output: -41.0401600   
Correct output: 24.1400847456  | Program output: -10.07181     
Correct output: 69.833290954   | Program output: 20.0219241    
Correct output: 82.4958592801  | Program output: 94.015857281  
Correct output: 34.2385110874  | Program output: 81.02551287   
Correct output: -10.7358110665 | Program output: 47.048110545  
Correct output: 1.9700532093   | Program output: -11.050100    
Correct output: -44.7956976677 | Program output: 51.052140557  
Correct output: 68.5576547673  | Program output: 46.047103777  
Correct output: -69.2536523379 | Program output: -54.0192809   
Correct output: -14.2275745396 | Program output: 41.04274047   
Correct output: -171.9767905886 | Program output: -85.0767056   
Correct output: -32.1846093265 | Program output: 1.0265        
Correct output: 66.9812146721  | Program output: 73.074405151  
Correct output: 100.0259781081 | Program output: 34.03542841   
Correct output: -90.2595503995 | Program output: -34.0791089   
Correct output: -82.4635707651 | Program output: -96.0659025   
Correct output: -8.7492896214  | Program output: -50.0312401   
Correct output: -82.1329348831 | Program output: -82.0796561   
Correct output: 24.5261129925  | Program output: -73.0405184   
Correct output: -11.4065589042 | Program output: -53.0602704   
Correct output: 10.3282540908  | Program output: -77.045776    
Correct output: -51.7760580299 | Program output: -78.0755929   
Correct output: 51.8185003253  | Program output: 74.075421801  
Correct output: 110.7431489201 | Program output: 20.0219241    
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_yankdup} {:instruction float_cos} {:instruction float_mult} {:instruction float_yankdup} {:instruction float_pop} {:instruction float_mult} {:instruction in2} {:instruction integer_inc} {:instruction float_yankdup} {:instruction float_yank} {:instruction float_mult} {:instruction 28} {:instruction integer_add} {:instruction float_pop} {:instruction integer_inc} {:instruction in2} {:instruction float_max} {:instruction float_rot} {:instruction print_float} {:instruction integer_mult} {:instruction float_mult} {:instruction float_pop} {:instruction float_mult} {:instruction integer_inc} {:instruction in2} {:instruction float_max} {:instruction integer_dup} {:instruction print_float} {:instruction integer_mult} {:instruction float_mult} {:instruction float_pop} {:instruction float_mult} {:instruction float_mult} {:instruction in2} {:instruction float_sub} {:instruction float_sub} {:instruction float_mult} {:instruction integer_dup} {:instruction integer_dup} {:instruction float_add} {:instruction integer_dec} {:instruction integer_shove} {:instruction float_mult} {:instruction float_add} {:instruction float_mult} {:instruction integer_mult} {:instruction integer_dup} {:instruction float_add} {:instruction integer_dup} {:instruction float_add} {:instruction integer_dec} {:instruction integer_mult} {:instruction float_mult} {:instruction float_yankdup} {:instruction float_tan} {:instruction in2} {:instruction float_max} {:instruction float_pop} {:instruction float_mod} {:instruction in2} {:instruction float_yankdup} {:instruction integer_dup} {:instruction integer_pop} {:instruction integer_dec} {:instruction float_cos} {:instruction float_frominteger} {:instruction integer_swap} {:instruction integer_mod} {:instruction integer_dup} {:instruction 80} {:instruction integer_mod} {:instruction integer_dup} {:instruction print_float} {:instruction float_frominteger} {:instruction print_integer} {:instruction integer_sub} {:instruction integer_inc} {:instruction integer_max} {:instruction integer_stackdepth} {:instruction float_shove} {:instruction float_mult} {:instruction integer_max} {:instruction float_dup} {:instruction float_inc} {:instruction integer_mult} {:instruction integer_shove} {:instruction print_integer} {:instruction integer_swap})
Best program: (float_yankdup float_cos float_mult float_yankdup float_pop float_mult in2 integer_inc float_yankdup float_yank float_mult 28 integer_add float_pop integer_inc in2 float_max float_rot print_float integer_mult float_mult float_pop float_mult integer_inc in2 float_max integer_dup print_float integer_mult float_mult float_pop float_mult float_mult in2 float_sub float_sub float_mult integer_dup integer_dup float_add integer_dec integer_shove float_mult float_add float_mult integer_mult integer_dup float_add integer_dup float_add integer_dec integer_mult float_mult float_yankdup float_tan in2 float_max float_pop float_mod in2 float_yankdup integer_dup integer_pop integer_dec float_cos float_frominteger integer_swap integer_mod integer_dup 80 integer_mod integer_dup print_float float_frominteger print_integer integer_sub integer_inc integer_max integer_stackdepth float_shove float_mult integer_max float_dup float_inc integer_mult integer_shove print_integer integer_swap)
Errors: [75.0362 8 34.2119 10 49.8114 9 11.52 6 46.787 8 57.7839 8 13.0202 9 95.8478 11 22.5106 9 15.2344 10 55.2703 10 86.9001 7 33.2111 9 6.0932 11 65.9905 9 56.1804 9 13.6023 8 41.282 10 0.0533 8 97.5666 12 41.6537 8 87.374 12 26.2995 8 22.2569 11 90.7212 8]
Total: 1374.2185000000002
Mean: 27.48437
Genome size: 88
Size: 89
Percent parens: 0.011
--- Population Statistics ---
Average total errors in population: 5741.010023399994
Median total errors in population: 1382.1964
Error averages by case: (347.4949032999977 8.733 169.8962183999983 10.324 134.9550653000011 9.588 100.39806540000016 8.275 129.2755036999984 9.226 143.32488809999947 9.701 152.66605289999973 9.042 177.86427329999927 11.717 110.80783359999917 9.774 305.4629009999983 10.543 140.14047930000064 10.586 357.0761333000031 9.058 78.40578039999936 10.379 96.28608990000103 11.215 151.03876110000095 9.928 334.2029899000035 9.807 305.3575952000018 9.095 322.9471297000024 10.454 296.0908776000017 8.778 362.99733900000115 12.06 323.2543455000011 9.056 355.4830623000033 11.979 313.23714629999995 9.334 111.70456689999857 10.968 172.00102200000015 9.021)
Error minima by case: (35.0754 3 3.1401 3 9.1667 3 3.4959 5 33.2103 7 9.6874 3 0.969 2 43.7433 3 7.4895 3 14.2344 3 13.1853 3 2.9726 3 2.0 2 5.0932 7 21.026 4 23.1952 3 11.5364 8 8.7517 8 0.0529 3 4.4739 3 10.5934 8 7.3075 3 3.744 8 21.2569 8 21.0 4)
Average genome size in population (length): 79.886
Average program size in population (points): 80.886
Average percent parens in population: 0.012
Minimum age in population: 133.5217890991921
Maximum age in population: 138.4543936412326
Average age in population: 136.385807947576
Median age in population: 136.4192429416236
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 15
Genome diversity (% unique Plush genomes):	 0.842
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 15
Syntactic diversity (% unique Push programs):	 0.842
Total error diversity:				 0.336
Error (vector) diversity:			 0.349
Behavioral diversity:				 0.35
--- Run Statistics ---
Number of program evaluations used so far: 97000
Number of point (instruction) evaluations so far: 154221290
--- Timings ---
Current time: 1529615262373 milliseconds
Total Time:         368.2 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       147.0 seconds, 39.9%
Fitness Testing:    175.8 seconds, 47.7%
Report:              45.3 seconds, 12.3%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 96
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 97
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 97
;;******************************
;; -*- Number IO problem report - generation 97
Test total error for best: 64453.020200000035
Test mean error for best: 32.22651
;;------------------------------
Outputs of best individual on training cases:
Correct output: -116.076402553 | Program output: -41.0401600   
Correct output: 24.1400847456  | Program output: -10.07181     
Correct output: 69.833290954   | Program output: 20.0219241    
Correct output: 82.4958592801  | Program output: 94.015857281  
Correct output: 34.2385110874  | Program output: 81.02551287   
Correct output: -10.7358110665 | Program output: 47.048110545  
Correct output: 1.9700532093   | Program output: -11.050100    
Correct output: -44.7956976677 | Program output: 51.052140557  
Correct output: 68.5576547673  | Program output: 46.047103777  
Correct output: -69.2536523379 | Program output: -54.0192809   
Correct output: -14.2275745396 | Program output: 41.04274047   
Correct output: -171.9767905886 | Program output: -85.0767056   
Correct output: -32.1846093265 | Program output: 1.0265        
Correct output: 66.9812146721  | Program output: 73.074405151  
Correct output: 100.0259781081 | Program output: 34.03542841   
Correct output: -90.2595503995 | Program output: -34.0791089   
Correct output: -82.4635707651 | Program output: -96.0659025   
Correct output: -8.7492896214  | Program output: -50.0312401   
Correct output: -82.1329348831 | Program output: -82.0796561   
Correct output: 24.5261129925  | Program output: -73.0405184   
Correct output: -11.4065589042 | Program output: -53.0602704   
Correct output: 10.3282540908  | Program output: -77.045776    
Correct output: -51.7760580299 | Program output: -78.0755929   
Correct output: 51.8185003253  | Program output: 74.075421801  
Correct output: 110.7431489201 | Program output: 20.0219241    
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_yankdup} {:instruction float_cos} {:instruction float_mult} {:instruction float_yankdup} {:instruction float_pop} {:instruction float_mult} {:instruction in2} {:instruction integer_inc} {:instruction float_yankdup} {:instruction float_yank} {:instruction float_mult} {:instruction 28} {:instruction integer_add} {:instruction float_pop} {:instruction integer_inc} {:instruction in2} {:instruction float_max} {:instruction float_rot} {:instruction print_float} {:instruction integer_mult} {:instruction float_mult} {:instruction float_pop} {:instruction float_mult} {:instruction integer_inc} {:instruction in2} {:instruction float_max} {:instruction integer_dup} {:instruction print_float} {:instruction integer_mult} {:instruction float_mult} {:instruction float_pop} {:instruction float_mult} {:instruction float_mult} {:instruction in2} {:instruction float_sub} {:instruction float_sub} {:instruction float_mult} {:instruction integer_dup} {:instruction integer_dup} {:instruction float_add} {:instruction integer_dec} {:instruction integer_shove} {:instruction float_mult} {:instruction float_add} {:instruction float_mult} {:instruction integer_mult} {:instruction integer_dup} {:instruction float_add} {:instruction integer_dup} {:instruction float_add} {:instruction integer_dec} {:instruction integer_mult} {:instruction float_mult} {:instruction float_yankdup} {:instruction float_tan} {:instruction in2} {:instruction float_max} {:instruction float_pop} {:instruction float_mod} {:instruction in2} {:instruction float_yankdup} {:instruction integer_dup} {:instruction integer_pop} {:instruction integer_dec} {:instruction float_cos} {:instruction float_frominteger} {:instruction integer_swap} {:instruction integer_mod} {:instruction integer_dup} {:instruction 80} {:instruction integer_mod} {:instruction integer_dup} {:instruction print_float} {:instruction float_frominteger} {:instruction print_integer} {:instruction integer_sub} {:instruction integer_inc} {:instruction integer_max} {:instruction integer_stackdepth} {:instruction float_shove} {:instruction float_mult} {:instruction integer_max} {:instruction float_dup} {:instruction float_inc} {:instruction integer_mult} {:instruction integer_shove} {:instruction print_integer} {:instruction integer_swap})
Best program: (float_yankdup float_cos float_mult float_yankdup float_pop float_mult in2 integer_inc float_yankdup float_yank float_mult 28 integer_add float_pop integer_inc in2 float_max float_rot print_float integer_mult float_mult float_pop float_mult integer_inc in2 float_max integer_dup print_float integer_mult float_mult float_pop float_mult float_mult in2 float_sub float_sub float_mult integer_dup integer_dup float_add integer_dec integer_shove float_mult float_add float_mult integer_mult integer_dup float_add integer_dup float_add integer_dec integer_mult float_mult float_yankdup float_tan in2 float_max float_pop float_mod in2 float_yankdup integer_dup integer_pop integer_dec float_cos float_frominteger integer_swap integer_mod integer_dup 80 integer_mod integer_dup print_float float_frominteger print_integer integer_sub integer_inc integer_max integer_stackdepth float_shove float_mult integer_max float_dup float_inc integer_mult integer_shove print_integer integer_swap)
Errors: [75.0362 8 34.2119 10 49.8114 9 11.52 6 46.787 8 57.7839 8 13.0202 9 95.8478 11 22.5106 9 15.2344 10 55.2703 10 86.9001 7 33.2111 9 6.0932 11 65.9905 9 56.1804 9 13.6023 8 41.282 10 0.0533 8 97.5666 12 41.6537 8 87.374 12 26.2995 8 22.2569 11 90.7212 8]
Total: 1374.2185000000002
Mean: 27.48437
Genome size: 88
Size: 89
Percent parens: 0.011
--- Population Statistics ---
Average total errors in population: 6026.176601000001
Median total errors in population: 1388.2265000000002
Error averages by case: (359.9144380999967 8.818 183.00004579999825 10.403 144.44807120000132 9.694 111.28713950000041 8.452 139.77025499999914 9.372 152.74365719999997 9.853 166.0428131999996 9.13 187.75745789999885 11.834 118.87099949999906 9.878 320.6544601999999 10.618 147.7116531000009 10.666 370.69565520000424 9.16 79.63483849999955 10.401 105.20940750000089 11.287 161.5688229000016 10.018 345.83025050000305 9.92 320.03258830000317 9.149 337.75763190000237 10.53 310.8089901000027 8.855 374.49603440000226 12.167 338.0797227000027 9.16 368.350912500003 12.074 327.2755791000014 9.413 122.39054009999832 11.006 180.91963659999993 9.067)
Error minima by case: (45.6115 7 3.1401 9 10.1667 8 2.4959 6 12.1803 8 9.7435 8 0.9701 7 25.6692 9 8.4423 8 1.2112 8 13.2402 9 85.8961 7 31.2533 9 5.0928 9 20.026 8 19.7947 9 3.4636 7 7.9183 8 0.0521 6 14.5466 9 10.437 8 5.3077 9 4.7761 8 21.2565 8 30.7431 8)
Average genome size in population (length): 80.068
Average program size in population (points): 81.068
Average percent parens in population: 0.012
Minimum age in population: 135.2311880233945
Maximum age in population: 139.7406232908793
Average age in population: 137.7640544291223
Median age in population: 137.758640416773
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 14
Genome diversity (% unique Plush genomes):	 0.844
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 14
Syntactic diversity (% unique Push programs):	 0.844
Total error diversity:				 0.369
Error (vector) diversity:			 0.378
Behavioral diversity:				 0.378
--- Run Statistics ---
Number of program evaluations used so far: 98000
Number of point (instruction) evaluations so far: 156222990
--- Timings ---
Current time: 1529615266515 milliseconds
Total Time:         372.5 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       148.5 seconds, 39.9%
Fitness Testing:    177.9 seconds, 47.8%
Report:              46.0 seconds, 12.3%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 97
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 98
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 98
;;******************************
;; -*- Number IO problem report - generation 98
Test total error for best: 64453.020200000035
Test mean error for best: 32.22651
;;------------------------------
Outputs of best individual on training cases:
Correct output: -116.076402553 | Program output: -41.0401600   
Correct output: 24.1400847456  | Program output: -10.07181     
Correct output: 69.833290954   | Program output: 20.0219241    
Correct output: 82.4958592801  | Program output: 94.015857281  
Correct output: 34.2385110874  | Program output: 81.02551287   
Correct output: -10.7358110665 | Program output: 47.048110545  
Correct output: 1.9700532093   | Program output: -11.050100    
Correct output: -44.7956976677 | Program output: 51.052140557  
Correct output: 68.5576547673  | Program output: 46.047103777  
Correct output: -69.2536523379 | Program output: -54.0192809   
Correct output: -14.2275745396 | Program output: 41.04274047   
Correct output: -171.9767905886 | Program output: -85.0767056   
Correct output: -32.1846093265 | Program output: 1.0265        
Correct output: 66.9812146721  | Program output: 73.074405151  
Correct output: 100.0259781081 | Program output: 34.03542841   
Correct output: -90.2595503995 | Program output: -34.0791089   
Correct output: -82.4635707651 | Program output: -96.0659025   
Correct output: -8.7492896214  | Program output: -50.0312401   
Correct output: -82.1329348831 | Program output: -82.0796561   
Correct output: 24.5261129925  | Program output: -73.0405184   
Correct output: -11.4065589042 | Program output: -53.0602704   
Correct output: 10.3282540908  | Program output: -77.045776    
Correct output: -51.7760580299 | Program output: -78.0755929   
Correct output: 51.8185003253  | Program output: 74.075421801  
Correct output: 110.7431489201 | Program output: 20.0219241    
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_yankdup} {:instruction float_pop} {:instruction float_mult} {:instruction float_yankdup} {:instruction float_pop} {:instruction float_mult} {:instruction in2} {:instruction integer_inc} {:instruction float_yankdup} {:instruction float_yank} {:instruction float_mult} {:instruction 28} {:instruction integer_add} {:instruction float_pop} {:instruction integer_inc} {:instruction in2} {:instruction float_max} {:instruction float_max} {:instruction float_rot} {:instruction print_float} {:instruction integer_mult} {:instruction float_mult} {:instruction float_pop} {:instruction float_mult} {:instruction integer_inc} {:instruction in2} {:instruction float_max} {:instruction integer_dup} {:instruction print_float} {:instruction integer_mult} {:instruction float_mult} {:instruction float_pop} {:instruction float_mult} {:instruction float_mult} {:instruction in2} {:instruction float_sub} {:instruction float_sub} {:instruction float_mult} {:instruction integer_dup} {:instruction integer_dup} {:instruction float_add} {:instruction integer_dec} {:instruction integer_shove} {:instruction float_mult} {:instruction float_add} {:instruction float_mult} {:instruction integer_mult} {:instruction integer_dup} {:instruction float_add} {:instruction integer_dup} {:instruction float_add} {:instruction integer_dec} {:instruction integer_mult} {:instruction float_mult} {:instruction float_yankdup} {:instruction float_tan} {:instruction in2} {:instruction float_max} {:instruction float_pop} {:instruction float_mod} {:instruction in2} {:instruction float_yankdup} {:instruction integer_dup} {:instruction integer_pop} {:instruction integer_dec} {:instruction float_cos} {:instruction float_frominteger} {:instruction integer_swap} {:instruction integer_mod} {:instruction integer_dup} {:instruction 80} {:instruction integer_mod} {:instruction integer_dup} {:instruction print_float} {:instruction float_frominteger} {:instruction print_integer} {:instruction integer_sub} {:instruction integer_inc} {:instruction integer_max} {:instruction integer_stackdepth} {:instruction float_shove} {:instruction float_mult} {:instruction integer_max} {:instruction float_dup} {:instruction float_inc} {:instruction integer_mult} {:instruction integer_shove} {:instruction print_integer} {:instruction integer_swap})
Best program: (float_yankdup float_pop float_mult float_yankdup float_pop float_mult in2 integer_inc float_yankdup float_yank float_mult 28 integer_add float_pop integer_inc in2 float_max float_max float_rot print_float integer_mult float_mult float_pop float_mult integer_inc in2 float_max integer_dup print_float integer_mult float_mult float_pop float_mult float_mult in2 float_sub float_sub float_mult integer_dup integer_dup float_add integer_dec integer_shove float_mult float_add float_mult integer_mult integer_dup float_add integer_dup float_add integer_dec integer_mult float_mult float_yankdup float_tan in2 float_max float_pop float_mod in2 float_yankdup integer_dup integer_pop integer_dec float_cos float_frominteger integer_swap integer_mod integer_dup 80 integer_mod integer_dup print_float float_frominteger print_integer integer_sub integer_inc integer_max integer_stackdepth float_shove float_mult integer_max float_dup float_inc integer_mult integer_shove print_integer integer_swap)
Errors: [75.0362 8 34.2119 10 49.8114 9 11.52 6 46.787 8 57.7839 8 13.0202 9 95.8478 11 22.5106 9 15.2344 10 55.2703 10 86.9001 7 33.2111 9 6.0932 11 65.9905 9 56.1804 9 13.6023 8 41.282 10 0.0533 8 97.5666 12 41.6537 8 87.374 12 26.2995 8 22.2569 11 90.7212 8]
Total: 1374.2185000000002
Mean: 27.48437
Genome size: 89
Size: 90
Percent parens: 0.011
--- Population Statistics ---
Average total errors in population: 5911.619804199998
Median total errors in population: 1386.2326000000003
Error averages by case: (356.33872249999746 8.793 179.25212989999798 10.345 140.19524450000148 9.651 104.71578780000027 8.374 133.3218906999985 9.385 148.8858277999996 9.845 163.87376739999948 9.103 183.26596739999894 11.775 114.23293099999903 9.837 315.2862034999983 10.585 143.82715050000095 10.641 367.1237725000041 9.18 73.6195919999995 10.421 100.66925170000114 11.308 155.16470800000118 10.051 342.2605828000035 9.896 315.44519830000195 9.149 331.58452060000235 10.496 304.5894993000017 8.83 371.7763690000016 12.082 333.0032486000013 9.136 364.73467160000325 12.043 324.1015471000002 9.423 116.99096439999826 10.982 176.93225530000007 9.097)
Error minima by case: (36.0748 7 3.1401 8 16.8946 8 10.5041 5 1.2992 7 9.7435 8 0.969 7 44.8468 9 8.4423 8 14.2259 8 13.2402 9 3.9697 7 31.1833 7 5.0188 9 30.0194 8 24.2585 8 12.5364 8 9.0117 9 0.0529 6 11.0116 9 10.4883 8 9.3225 9 3.7761 8 1.1202 8 40.2569 8)
Average genome size in population (length): 80.158
Average program size in population (points): 81.158
Average percent parens in population: 0.012
Minimum age in population: 136.7269020723497
Maximum age in population: 141.0390687318821
Average age in population: 139.1551520258818
Median age in population: 139.1807126458622
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 8
Genome diversity (% unique Plush genomes):	 0.878
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 8
Syntactic diversity (% unique Push programs):	 0.878
Total error diversity:				 0.372
Error (vector) diversity:			 0.375
Behavioral diversity:				 0.375
--- Run Statistics ---
Number of program evaluations used so far: 99000
Number of point (instruction) evaluations so far: 158226940
--- Timings ---
Current time: 1529615270958 milliseconds
Total Time:         376.8 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       150.2 seconds, 39.9%
Fitness Testing:    180.0 seconds, 47.8%
Report:              46.6 seconds, 12.4%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 98
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 99
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 99
;;******************************
;; -*- Number IO problem report - generation 99
Test total error for best: 64453.020200000035
Test mean error for best: 32.22651
;;------------------------------
Outputs of best individual on training cases:
Correct output: -116.076402553 | Program output: -41.0401600   
Correct output: 24.1400847456  | Program output: -10.07181     
Correct output: 69.833290954   | Program output: 20.0219241    
Correct output: 82.4958592801  | Program output: 94.015857281  
Correct output: 34.2385110874  | Program output: 81.02551287   
Correct output: -10.7358110665 | Program output: 47.048110545  
Correct output: 1.9700532093   | Program output: -11.050100    
Correct output: -44.7956976677 | Program output: 51.052140557  
Correct output: 68.5576547673  | Program output: 46.047103777  
Correct output: -69.2536523379 | Program output: -54.0192809   
Correct output: -14.2275745396 | Program output: 41.04274047   
Correct output: -171.9767905886 | Program output: -85.0767056   
Correct output: -32.1846093265 | Program output: 1.0265        
Correct output: 66.9812146721  | Program output: 73.074405151  
Correct output: 100.0259781081 | Program output: 34.03542841   
Correct output: -90.2595503995 | Program output: -34.0791089   
Correct output: -82.4635707651 | Program output: -96.0659025   
Correct output: -8.7492896214  | Program output: -50.0312401   
Correct output: -82.1329348831 | Program output: -82.0796561   
Correct output: 24.5261129925  | Program output: -73.0405184   
Correct output: -11.4065589042 | Program output: -53.0602704   
Correct output: 10.3282540908  | Program output: -77.045776    
Correct output: -51.7760580299 | Program output: -78.0755929   
Correct output: 51.8185003253  | Program output: 74.075421801  
Correct output: 110.7431489201 | Program output: 20.0219241    
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_yankdup} {:instruction float_cos} {:instruction float_mult} {:instruction float_yankdup} {:instruction float_pop} {:instruction float_mult} {:instruction in2} {:instruction integer_inc} {:instruction float_yankdup} {:instruction float_yank} {:instruction float_mult} {:instruction 28} {:instruction integer_add} {:instruction float_pop} {:instruction integer_inc} {:instruction in2} {:instruction float_max} {:instruction float_rot} {:instruction print_float} {:instruction integer_mult} {:instruction float_mult} {:instruction float_pop} {:instruction float_mult} {:instruction integer_inc} {:instruction in2} {:instruction float_max} {:instruction integer_dup} {:instruction print_float} {:instruction integer_mult} {:instruction float_mult} {:instruction float_pop} {:instruction float_mult} {:instruction float_mult} {:instruction in2} {:instruction float_sub} {:instruction float_sub} {:instruction float_mult} {:instruction integer_dup} {:instruction integer_dup} {:instruction float_add} {:instruction integer_dec} {:instruction integer_shove} {:instruction float_mult} {:instruction float_add} {:instruction float_mult} {:instruction integer_mult} {:instruction integer_dup} {:instruction float_add} {:instruction integer_dup} {:instruction float_add} {:instruction integer_dec} {:instruction integer_mult} {:instruction float_mult} {:instruction float_yankdup} {:instruction float_tan} {:instruction in2} {:instruction float_max} {:instruction float_pop} {:instruction float_mod} {:instruction in2} {:instruction float_yankdup} {:instruction integer_dup} {:instruction integer_pop} {:instruction integer_dec} {:instruction float_cos} {:instruction float_frominteger} {:instruction integer_swap} {:instruction integer_mod} {:instruction integer_dup} {:instruction 80} {:instruction integer_mod} {:instruction integer_dup} {:instruction print_float} {:instruction float_frominteger} {:instruction print_integer} {:instruction integer_sub} {:instruction integer_inc} {:instruction integer_max} {:instruction integer_stackdepth} {:instruction float_shove} {:instruction float_mult} {:instruction integer_max} {:instruction float_dup} {:instruction float_inc} {:instruction integer_mult} {:instruction integer_shove} {:instruction print_integer} {:instruction integer_swap})
Best program: (float_yankdup float_cos float_mult float_yankdup float_pop float_mult in2 integer_inc float_yankdup float_yank float_mult 28 integer_add float_pop integer_inc in2 float_max float_rot print_float integer_mult float_mult float_pop float_mult integer_inc in2 float_max integer_dup print_float integer_mult float_mult float_pop float_mult float_mult in2 float_sub float_sub float_mult integer_dup integer_dup float_add integer_dec integer_shove float_mult float_add float_mult integer_mult integer_dup float_add integer_dup float_add integer_dec integer_mult float_mult float_yankdup float_tan in2 float_max float_pop float_mod in2 float_yankdup integer_dup integer_pop integer_dec float_cos float_frominteger integer_swap integer_mod integer_dup 80 integer_mod integer_dup print_float float_frominteger print_integer integer_sub integer_inc integer_max integer_stackdepth float_shove float_mult integer_max float_dup float_inc integer_mult integer_shove print_integer integer_swap)
Errors: [75.0362 8 34.2119 10 49.8114 9 11.52 6 46.787 8 57.7839 8 13.0202 9 95.8478 11 22.5106 9 15.2344 10 55.2703 10 86.9001 7 33.2111 9 6.0932 11 65.9905 9 56.1804 9 13.6023 8 41.282 10 0.0533 8 97.5666 12 41.6537 8 87.374 12 26.2995 8 22.2569 11 90.7212 8]
Total: 1374.2185000000002
Mean: 27.48437
Genome size: 88
Size: 89
Percent parens: 0.011
--- Population Statistics ---
Average total errors in population: 5826.713650699997
Median total errors in population: 1392.2152000000003
Error averages by case: (342.4603751999984 8.785 187.4742215999984 10.323 143.17662340000112 9.619 110.84329810000028 8.427 135.07886069999867 9.305 149.87061299999968 9.788 172.5254601999996 9.137 184.9484602999992 11.735 119.86858369999919 9.864 301.15564299999863 10.582 147.56927850000068 10.631 354.6513971000025 9.135 82.16902459999972 10.355 105.52234930000085 11.197 158.51815000000101 10.017 328.4763836000029 9.924 302.44747220000124 9.19 318.1337059000021 10.523 293.13873490000094 8.835 358.9631877000007 12.1 318.67797090000056 9.146 350.9131255000029 11.993 310.7258538999999 9.386 119.63067409999853 10.936 179.75220330000013 9.089)
Error minima by case: (40.0 4 3.1401 4 9.176 4 2.4873 5 1.2992 7 9.6875 4 0.9701 3 43.7433 4 7.4433 4 14.2344 4 13.1848 4 84.0 4 2.0 2 5.0198 8 20.0217 5 33.0 4 8.5364 7 7.7179 8 0.0523 4 11.0116 4 10.3461 7 6.2825 4 21.2239 7 3.2322 8 21.0 5)
Average genome size in population (length): 80.647
Average program size in population (points): 81.647
Average percent parens in population: 0.012
Minimum age in population: 137.7269020723497
Maximum age in population: 142.7582345247262
Average age in population: 140.521508293897
Median age in population: 140.5775259925324
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 7
Genome diversity (% unique Plush genomes):	 0.867
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 7
Syntactic diversity (% unique Push programs):	 0.867
Total error diversity:				 0.386
Error (vector) diversity:			 0.397
Behavioral diversity:				 0.398
--- Run Statistics ---
Number of program evaluations used so far: 100000
Number of point (instruction) evaluations so far: 160243115
--- Timings ---
Current time: 1529615275225 milliseconds
Total Time:         381.2 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       151.7 seconds, 39.8%
Fitness Testing:    182.2 seconds, 47.8%
Report:              47.2 seconds, 12.4%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 99
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 100
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 100
;;******************************
;; -*- Number IO problem report - generation 100
Test total error for best: 64453.020200000035
Test mean error for best: 32.22651
;;------------------------------
Outputs of best individual on training cases:
Correct output: -116.076402553 | Program output: -41.0401600   
Correct output: 24.1400847456  | Program output: -10.07181     
Correct output: 69.833290954   | Program output: 20.0219241    
Correct output: 82.4958592801  | Program output: 94.015857281  
Correct output: 34.2385110874  | Program output: 81.02551287   
Correct output: -10.7358110665 | Program output: 47.048110545  
Correct output: 1.9700532093   | Program output: -11.050100    
Correct output: -44.7956976677 | Program output: 51.052140557  
Correct output: 68.5576547673  | Program output: 46.047103777  
Correct output: -69.2536523379 | Program output: -54.0192809   
Correct output: -14.2275745396 | Program output: 41.04274047   
Correct output: -171.9767905886 | Program output: -85.0767056   
Correct output: -32.1846093265 | Program output: 1.0265        
Correct output: 66.9812146721  | Program output: 73.074405151  
Correct output: 100.0259781081 | Program output: 34.03542841   
Correct output: -90.2595503995 | Program output: -34.0791089   
Correct output: -82.4635707651 | Program output: -96.0659025   
Correct output: -8.7492896214  | Program output: -50.0312401   
Correct output: -82.1329348831 | Program output: -82.0796561   
Correct output: 24.5261129925  | Program output: -73.0405184   
Correct output: -11.4065589042 | Program output: -53.0602704   
Correct output: 10.3282540908  | Program output: -77.045776    
Correct output: -51.7760580299 | Program output: -78.0755929   
Correct output: 51.8185003253  | Program output: 74.075421801  
Correct output: 110.7431489201 | Program output: 20.0219241    
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_yankdup} {:instruction float_cos} {:instruction float_mult} {:instruction float_yankdup} {:instruction float_pop} {:instruction float_mult} {:instruction in2} {:instruction integer_inc} {:instruction float_yankdup} {:instruction float_yank} {:instruction float_mult} {:instruction 28} {:instruction integer_add} {:instruction float_pop} {:instruction integer_inc} {:instruction in2} {:instruction float_max} {:instruction float_rot} {:instruction print_float} {:instruction integer_mult} {:instruction float_mult} {:instruction float_pop} {:instruction float_mult} {:instruction integer_inc} {:instruction in2} {:instruction float_max} {:instruction integer_dup} {:instruction print_float} {:instruction integer_mult} {:instruction float_mult} {:instruction float_pop} {:instruction float_mult} {:instruction float_mult} {:instruction in2} {:instruction float_sub} {:instruction float_sub} {:instruction float_mult} {:instruction integer_dup} {:instruction integer_dup} {:instruction float_add} {:instruction integer_dec} {:instruction integer_shove} {:instruction float_mult} {:instruction float_add} {:instruction float_rot} {:instruction integer_mult} {:instruction integer_dup} {:instruction float_add} {:instruction integer_dup} {:instruction float_add} {:instruction integer_dec} {:instruction integer_mult} {:instruction float_mult} {:instruction float_yankdup} {:instruction float_tan} {:instruction in2} {:instruction float_max} {:instruction float_pop} {:instruction float_mod} {:instruction in2} {:instruction float_yankdup} {:instruction integer_dup} {:instruction integer_pop} {:instruction integer_dec} {:instruction float_cos} {:instruction float_frominteger} {:instruction integer_swap} {:instruction integer_mod} {:instruction integer_dup} {:instruction 80} {:instruction integer_mod} {:instruction integer_dup} {:instruction print_float} {:instruction float_frominteger} {:instruction print_integer} {:instruction integer_sub} {:instruction integer_inc} {:instruction integer_max} {:instruction integer_stackdepth} {:instruction float_shove} {:instruction float_mult} {:instruction integer_max} {:instruction float_dup} {:instruction float_inc} {:instruction integer_mult} {:instruction integer_shove} {:instruction print_integer} {:instruction integer_swap})
Best program: (float_yankdup float_cos float_mult float_yankdup float_pop float_mult in2 integer_inc float_yankdup float_yank float_mult 28 integer_add float_pop integer_inc in2 float_max float_rot print_float integer_mult float_mult float_pop float_mult integer_inc in2 float_max integer_dup print_float integer_mult float_mult float_pop float_mult float_mult in2 float_sub float_sub float_mult integer_dup integer_dup float_add integer_dec integer_shove float_mult float_add float_rot integer_mult integer_dup float_add integer_dup float_add integer_dec integer_mult float_mult float_yankdup float_tan in2 float_max float_pop float_mod in2 float_yankdup integer_dup integer_pop integer_dec float_cos float_frominteger integer_swap integer_mod integer_dup 80 integer_mod integer_dup print_float float_frominteger print_integer integer_sub integer_inc integer_max integer_stackdepth float_shove float_mult integer_max float_dup float_inc integer_mult integer_shove print_integer integer_swap)
Errors: [75.0362 8 34.2119 10 49.8114 9 11.52 6 46.787 8 57.7839 8 13.0202 9 95.8478 11 22.5106 9 15.2344 10 55.2703 10 86.9001 7 33.2111 9 6.0932 11 65.9905 9 56.1804 9 13.6023 8 41.282 10 0.0533 8 97.5666 12 41.6537 8 87.374 12 26.2995 8 22.2569 11 90.7212 8]
Total: 1374.2185000000002
Mean: 27.48437
Genome size: 88
Size: 89
Percent parens: 0.011
--- Population Statistics ---
Average total errors in population: 5452.300367499991
Median total errors in population: 1379.2163500000001
Error averages by case: (318.7304141999986 8.755 177.76700259999808 10.359 137.39367490000134 9.67 103.0320073000006 8.344 134.75776659999866 9.286 146.45454879999963 9.797 162.1212899999996 9.18 180.80718349999918 11.766 112.63307219999886 9.849 274.3385327999977 10.592 142.21302450000076 10.622 327.5442624000021 9.053 78.62532609999967 10.309 97.72464150000101 11.258 153.6290672000012 10.022 304.52080680000296 9.898 273.1131106000004 9.091 291.8287247000024 10.54 263.26807310000004 8.826 333.2337540000003 12.107 292.7512427000001 9.109 325.63090960000284 12.065 281.992459899999 9.353 114.21369379999824 10.994 174.07777770000007 9.053)
Error minima by case: (40.0 5 1.1444 5 10.1667 6 2.4959 5 11.2429 8 10.6113 6 0.9701 4 10.8916 6 8.4423 6 13.5664 5 14.069 6 84.0 5 2.0 4 5.0198 8 0.6339 6 33.0 5 11.6014 8 9.0117 8 0.0523 5 1.5305 5 10.5934 8 6.3075 5 3.9112 7 3.7429 8 11.3511 7)
Average genome size in population (length): 81.576
Average program size in population (points): 82.576
Average percent parens in population: 0.012
Minimum age in population: 139.737880636836
Maximum age in population: 144.0757904800159
Average age in population: 141.8817767086154
Median age in population: 141.9083024677098
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 16
Genome diversity (% unique Plush genomes):	 0.847
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 16
Syntactic diversity (% unique Push programs):	 0.847
Total error diversity:				 0.376
Error (vector) diversity:			 0.389
Behavioral diversity:				 0.391
--- Run Statistics ---
Number of program evaluations used so far: 101000
Number of point (instruction) evaluations so far: 162282515
--- Timings ---
Current time: 1529615279564 milliseconds
Total Time:         385.4 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       153.1 seconds, 39.7%
Fitness Testing:    184.4 seconds, 47.9%
Report:              47.8 seconds, 12.4%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 100
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 101
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 101
;;******************************
;; -*- Number IO problem report - generation 101
Test total error for best: 64453.020200000035
Test mean error for best: 32.22651
;;------------------------------
Outputs of best individual on training cases:
Correct output: -116.076402553 | Program output: -41.0401600   
Correct output: 24.1400847456  | Program output: -10.07181     
Correct output: 69.833290954   | Program output: 20.0219241    
Correct output: 82.4958592801  | Program output: 94.015857281  
Correct output: 34.2385110874  | Program output: 81.02551287   
Correct output: -10.7358110665 | Program output: 47.048110545  
Correct output: 1.9700532093   | Program output: -11.050100    
Correct output: -44.7956976677 | Program output: 51.052140557  
Correct output: 68.5576547673  | Program output: 46.047103777  
Correct output: -69.2536523379 | Program output: -54.0192809   
Correct output: -14.2275745396 | Program output: 41.04274047   
Correct output: -171.9767905886 | Program output: -85.0767056   
Correct output: -32.1846093265 | Program output: 1.0265        
Correct output: 66.9812146721  | Program output: 73.074405151  
Correct output: 100.0259781081 | Program output: 34.03542841   
Correct output: -90.2595503995 | Program output: -34.0791089   
Correct output: -82.4635707651 | Program output: -96.0659025   
Correct output: -8.7492896214  | Program output: -50.0312401   
Correct output: -82.1329348831 | Program output: -82.0796561   
Correct output: 24.5261129925  | Program output: -73.0405184   
Correct output: -11.4065589042 | Program output: -53.0602704   
Correct output: 10.3282540908  | Program output: -77.045776    
Correct output: -51.7760580299 | Program output: -78.0755929   
Correct output: 51.8185003253  | Program output: 74.075421801  
Correct output: 110.7431489201 | Program output: 20.0219241    
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_yankdup} {:instruction float_cos} {:instruction float_mult} {:instruction float_yankdup} {:instruction float_pop} {:instruction float_mult} {:instruction in2} {:instruction integer_inc} {:instruction float_yankdup} {:instruction float_yank} {:instruction float_mult} {:instruction 28} {:instruction integer_add} {:instruction float_pop} {:instruction integer_inc} {:instruction in2} {:instruction float_max} {:instruction float_rot} {:instruction print_float} {:instruction integer_mult} {:instruction float_mult} {:instruction float_pop} {:instruction float_mult} {:instruction integer_inc} {:instruction in2} {:instruction float_max} {:instruction integer_dup} {:instruction print_float} {:instruction integer_mult} {:instruction float_mult} {:instruction float_pop} {:instruction float_mult} {:instruction float_mult} {:instruction in2} {:instruction float_sub} {:instruction float_sub} {:instruction float_mult} {:instruction integer_dup} {:instruction integer_dup} {:instruction float_add} {:instruction integer_dec} {:instruction integer_shove} {:instruction float_mult} {:instruction float_add} {:instruction float_rot} {:instruction integer_mult} {:instruction integer_dup} {:instruction float_add} {:instruction integer_dup} {:instruction float_add} {:instruction integer_dec} {:instruction integer_mult} {:instruction float_mult} {:instruction float_yankdup} {:instruction float_tan} {:instruction in2} {:instruction float_max} {:instruction float_pop} {:instruction float_mod} {:instruction in2} {:instruction float_yankdup} {:instruction integer_dup} {:instruction integer_pop} {:instruction integer_dec} {:instruction float_cos} {:instruction float_frominteger} {:instruction integer_swap} {:instruction integer_mod} {:instruction integer_dup} {:instruction 80} {:instruction integer_mod} {:instruction integer_dup} {:instruction print_float} {:instruction float_frominteger} {:instruction print_integer} {:instruction integer_sub} {:instruction integer_inc} {:instruction integer_max} {:instruction integer_stackdepth} {:instruction float_shove} {:instruction float_mult} {:instruction integer_max} {:instruction float_dup} {:instruction float_inc} {:instruction integer_mult} {:instruction integer_shove} {:instruction print_integer} {:instruction integer_swap})
Best program: (float_yankdup float_cos float_mult float_yankdup float_pop float_mult in2 integer_inc float_yankdup float_yank float_mult 28 integer_add float_pop integer_inc in2 float_max float_rot print_float integer_mult float_mult float_pop float_mult integer_inc in2 float_max integer_dup print_float integer_mult float_mult float_pop float_mult float_mult in2 float_sub float_sub float_mult integer_dup integer_dup float_add integer_dec integer_shove float_mult float_add float_rot integer_mult integer_dup float_add integer_dup float_add integer_dec integer_mult float_mult float_yankdup float_tan in2 float_max float_pop float_mod in2 float_yankdup integer_dup integer_pop integer_dec float_cos float_frominteger integer_swap integer_mod integer_dup 80 integer_mod integer_dup print_float float_frominteger print_integer integer_sub integer_inc integer_max integer_stackdepth float_shove float_mult integer_max float_dup float_inc integer_mult integer_shove print_integer integer_swap)
Errors: [75.0362 8 34.2119 10 49.8114 9 11.52 6 46.787 8 57.7839 8 13.0202 9 95.8478 11 22.5106 9 15.2344 10 55.2703 10 86.9001 7 33.2111 9 6.0932 11 65.9905 9 56.1804 9 13.6023 8 41.282 10 0.0533 8 97.5666 12 41.6537 8 87.374 12 26.2995 8 22.2569 11 90.7212 8]
Total: 1374.2185000000002
Mean: 27.48437
Genome size: 88
Size: 89
Percent parens: 0.011
--- Population Statistics ---
Average total errors in population: 5766.039189000002
Median total errors in population: 1394.73405
Error averages by case: (323.94169889999824 8.82 243.081667399998 10.444 144.62745830000117 9.743 117.33372470000036 8.559 146.23546229999909 9.43 154.77281039999986 9.996 229.11555139999942 9.217 189.7225068999988 11.91 124.70034979999915 9.935 281.97861249999823 10.677 152.56069860000065 10.707 333.8599981000028 9.227 73.85901789999973 10.215 110.27802950000104 11.261 163.37310820000138 10.072 309.2223944000028 9.956 280.0657826000013 9.233 299.5695195000025 10.529 270.5321422 8.954 339.3382358000013 12.074 300.14310780000017 9.227 331.86129800000276 12.039 288.64950399999947 9.434 124.48544989999861 11.063 180.8360599000002 9.173)
Error minima by case: (24.3215 7 2.1401 8 18.8333 9 10.52 5 29.2375 7 5.6879 8 1.9581 7 39.7446 9 8.4423 8 15.154 8 9.1862 8 2.8858 7 27.1733 8 5.0933 8 30.9906 8 1.4953 8 9.2913 8 3.6702 8 0.0523 6 14.5144 8 6.3274 7 5.3271 9 4.7761 8 21.2571 8 40.2569 8)
Average genome size in population (length): 83.496
Average program size in population (points): 84.496
Average percent parens in population: 0.012
Minimum age in population: 140.7731687244408
Maximum age in population: 145.3363371910259
Average age in population: 143.2684191910952
Median age in population: 143.3408946135282
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 42
Genome diversity (% unique Plush genomes):	 0.83
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 42
Syntactic diversity (% unique Push programs):	 0.83
Total error diversity:				 0.414
Error (vector) diversity:			 0.422
Behavioral diversity:				 0.422
--- Run Statistics ---
Number of program evaluations used so far: 102000
Number of point (instruction) evaluations so far: 164369915
--- Timings ---
Current time: 1529615283921 milliseconds
Total Time:         389.9 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       154.6 seconds, 39.6%
Fitness Testing:    186.8 seconds, 47.9%
Report:              48.4 seconds, 12.4%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 101
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 102
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 102
;;******************************
;; -*- Number IO problem report - generation 102
Test total error for best: 64453.020200000035
Test mean error for best: 32.22651
;;------------------------------
Outputs of best individual on training cases:
Correct output: -116.076402553 | Program output: -41.0401600   
Correct output: 24.1400847456  | Program output: -10.07181     
Correct output: 69.833290954   | Program output: 20.0219241    
Correct output: 82.4958592801  | Program output: 94.015857281  
Correct output: 34.2385110874  | Program output: 81.02551287   
Correct output: -10.7358110665 | Program output: 47.048110545  
Correct output: 1.9700532093   | Program output: -11.050100    
Correct output: -44.7956976677 | Program output: 51.052140557  
Correct output: 68.5576547673  | Program output: 46.047103777  
Correct output: -69.2536523379 | Program output: -54.0192809   
Correct output: -14.2275745396 | Program output: 41.04274047   
Correct output: -171.9767905886 | Program output: -85.0767056   
Correct output: -32.1846093265 | Program output: 1.0265        
Correct output: 66.9812146721  | Program output: 73.074405151  
Correct output: 100.0259781081 | Program output: 34.03542841   
Correct output: -90.2595503995 | Program output: -34.0791089   
Correct output: -82.4635707651 | Program output: -96.0659025   
Correct output: -8.7492896214  | Program output: -50.0312401   
Correct output: -82.1329348831 | Program output: -82.0796561   
Correct output: 24.5261129925  | Program output: -73.0405184   
Correct output: -11.4065589042 | Program output: -53.0602704   
Correct output: 10.3282540908  | Program output: -77.045776    
Correct output: -51.7760580299 | Program output: -78.0755929   
Correct output: 51.8185003253  | Program output: 74.075421801  
Correct output: 110.7431489201 | Program output: 20.0219241    
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_yankdup} {:instruction float_cos} {:instruction float_mult} {:instruction float_yankdup} {:instruction float_pop} {:instruction float_mult} {:instruction in2} {:instruction integer_inc} {:instruction float_yankdup} {:instruction float_yank} {:instruction float_mult} {:instruction 28} {:instruction integer_add} {:instruction float_pop} {:instruction integer_inc} {:instruction in2} {:instruction float_max} {:instruction float_rot} {:instruction print_float} {:instruction integer_mult} {:instruction float_mult} {:instruction float_pop} {:instruction float_mult} {:instruction integer_inc} {:instruction in2} {:instruction float_max} {:instruction integer_dup} {:instruction print_float} {:instruction integer_mult} {:instruction float_mult} {:instruction float_pop} {:instruction float_mult} {:instruction float_mult} {:instruction in2} {:instruction float_sub} {:instruction float_sub} {:instruction float_mult} {:instruction integer_dup} {:instruction integer_dup} {:instruction float_add} {:instruction integer_dec} {:instruction integer_shove} {:instruction float_mult} {:instruction float_add} {:instruction float_mult} {:instruction integer_mult} {:instruction integer_dup} {:instruction float_add} {:instruction integer_dup} {:instruction float_add} {:instruction integer_dec} {:instruction integer_mult} {:instruction float_mult} {:instruction float_yankdup} {:instruction float_tan} {:instruction in2} {:instruction float_max} {:instruction float_pop} {:instruction float_mod} {:instruction in2} {:instruction float_yankdup} {:instruction integer_dup} {:instruction integer_pop} {:instruction integer_dec} {:instruction float_cos} {:instruction float_frominteger} {:instruction integer_swap} {:instruction integer_mod} {:instruction integer_dup} {:instruction 80} {:instruction integer_mod} {:instruction integer_dup} {:instruction print_float} {:instruction float_frominteger} {:instruction print_integer} {:instruction integer_sub} {:instruction integer_inc} {:instruction integer_max} {:instruction integer_stackdepth} {:instruction float_shove} {:instruction float_mult} {:instruction integer_max} {:instruction float_dup} {:instruction float_inc} {:instruction integer_mult} {:instruction integer_shove} {:instruction print_integer} {:instruction integer_swap})
Best program: (float_yankdup float_cos float_mult float_yankdup float_pop float_mult in2 integer_inc float_yankdup float_yank float_mult 28 integer_add float_pop integer_inc in2 float_max float_rot print_float integer_mult float_mult float_pop float_mult integer_inc in2 float_max integer_dup print_float integer_mult float_mult float_pop float_mult float_mult in2 float_sub float_sub float_mult integer_dup integer_dup float_add integer_dec integer_shove float_mult float_add float_mult integer_mult integer_dup float_add integer_dup float_add integer_dec integer_mult float_mult float_yankdup float_tan in2 float_max float_pop float_mod in2 float_yankdup integer_dup integer_pop integer_dec float_cos float_frominteger integer_swap integer_mod integer_dup 80 integer_mod integer_dup print_float float_frominteger print_integer integer_sub integer_inc integer_max integer_stackdepth float_shove float_mult integer_max float_dup float_inc integer_mult integer_shove print_integer integer_swap)
Errors: [75.0362 8 34.2119 10 49.8114 9 11.52 6 46.787 8 57.7839 8 13.0202 9 95.8478 11 22.5106 9 15.2344 10 55.2703 10 86.9001 7 33.2111 9 6.0932 11 65.9905 9 56.1804 9 13.6023 8 41.282 10 0.0533 8 97.5666 12 41.6537 8 87.374 12 26.2995 8 22.2569 11 90.7212 8]
Total: 1374.2185000000002
Mean: 27.48437
Genome size: 88
Size: 89
Percent parens: 0.011
--- Population Statistics ---
Average total errors in population: 5456.922101099995
Median total errors in population: 1389.2573500000003
Error averages by case: (287.2408033000001 8.82 277.63272019999783 10.539 147.92674310000123 9.744 114.88414110000022 8.592 143.52082219999892 9.418 155.63881119999962 9.958 264.2365455999995 9.306 189.71033119999876 11.975 123.55329789999901 9.951 245.36251279999797 10.685 153.44146020000093 10.771 299.724339200001 9.157 89.14216189999995 10.009 109.1264192000012 11.339 162.57993850000096 10.043 270.12967780000196 9.985 243.2629196 9.225 264.1096770000024 10.535 233.01173259999982 8.902 306.3934791999998 12.107 264.9285197999983 9.166 298.6286012000023 12.09 252.59687809999818 9.413 123.70995079999845 11.105 184.46361740000017 9.131)
Error minima by case: (74.0372 7 23.1401 9 9.1678 8 2.4959 6 17.7615 8 9.7435 8 0.9701 8 44.7957 9 8.4423 8 14.2274 8 13.2402 9 85.9011 7 32.1846 8 5.0243 8 20.026 8 55.2134 9 11.5364 8 8.7493 8 0.0402 6 16.5261 8 10.4883 8 6.3283 9 24.2239 7 0.1815 8 30.7431 8)
Average genome size in population (length): 86.368
Average program size in population (points): 87.368
Average percent parens in population: 0.011
Minimum age in population: 142.4562530506416
Maximum age in population: 146.6448254962927
Average age in population: 144.5635541162126
Median age in population: 144.5803152041593
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 57
Genome diversity (% unique Plush genomes):	 0.788
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 57
Syntactic diversity (% unique Push programs):	 0.788
Total error diversity:				 0.39
Error (vector) diversity:			 0.399
Behavioral diversity:				 0.399
--- Run Statistics ---
Number of program evaluations used so far: 103000
Number of point (instruction) evaluations so far: 166529115
--- Timings ---
Current time: 1529615288210 milliseconds
Total Time:         394.2 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       156.1 seconds, 39.6%
Fitness Testing:    189.0 seconds, 47.9%
Report:              49.0 seconds, 12.4%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 102
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 103
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 103
;;******************************
;; -*- Number IO problem report - generation 103
Test total error for best: 64453.020200000035
Test mean error for best: 32.22651
;;------------------------------
Outputs of best individual on training cases:
Correct output: -116.076402553 | Program output: -41.0401600   
Correct output: 24.1400847456  | Program output: -10.07181     
Correct output: 69.833290954   | Program output: 20.0219241    
Correct output: 82.4958592801  | Program output: 94.015857281  
Correct output: 34.2385110874  | Program output: 81.02551287   
Correct output: -10.7358110665 | Program output: 47.048110545  
Correct output: 1.9700532093   | Program output: -11.050100    
Correct output: -44.7956976677 | Program output: 51.052140557  
Correct output: 68.5576547673  | Program output: 46.047103777  
Correct output: -69.2536523379 | Program output: -54.0192809   
Correct output: -14.2275745396 | Program output: 41.04274047   
Correct output: -171.9767905886 | Program output: -85.0767056   
Correct output: -32.1846093265 | Program output: 1.0265        
Correct output: 66.9812146721  | Program output: 73.074405151  
Correct output: 100.0259781081 | Program output: 34.03542841   
Correct output: -90.2595503995 | Program output: -34.0791089   
Correct output: -82.4635707651 | Program output: -96.0659025   
Correct output: -8.7492896214  | Program output: -50.0312401   
Correct output: -82.1329348831 | Program output: -82.0796561   
Correct output: 24.5261129925  | Program output: -73.0405184   
Correct output: -11.4065589042 | Program output: -53.0602704   
Correct output: 10.3282540908  | Program output: -77.045776    
Correct output: -51.7760580299 | Program output: -78.0755929   
Correct output: 51.8185003253  | Program output: 74.075421801  
Correct output: 110.7431489201 | Program output: 20.0219241    
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_yankdup} {:instruction float_pop} {:instruction float_mult} {:instruction float_yankdup} {:instruction float_cos} {:instruction float_mult} {:instruction float_yankdup} {:instruction float_pop} {:instruction float_mult} {:instruction in2} {:instruction integer_inc} {:instruction float_yankdup} {:instruction float_yank} {:instruction float_mult} {:instruction 28} {:instruction integer_add} {:instruction float_sub} {:instruction integer_inc} {:instruction in2} {:instruction float_max} {:instruction float_rot} {:instruction print_float} {:instruction integer_mult} {:instruction float_mult} {:instruction float_pop} {:instruction float_mult} {:instruction integer_inc} {:instruction in2} {:instruction float_max} {:instruction integer_dup} {:instruction print_float} {:instruction integer_mult} {:instruction float_mult} {:instruction float_pop} {:instruction float_mult} {:instruction float_mult} {:instruction in2} {:instruction float_sub} {:instruction float_sub} {:instruction float_mult} {:instruction integer_dup} {:instruction integer_dup} {:instruction float_add} {:instruction integer_dec} {:instruction integer_shove} {:instruction float_mult} {:instruction float_add} {:instruction float_mult} {:instruction integer_mult} {:instruction integer_dup} {:instruction float_add} {:instruction integer_dup} {:instruction float_add} {:instruction integer_dec} {:instruction integer_mult} {:instruction float_mult} {:instruction float_yankdup} {:instruction float_tan} {:instruction in2} {:instruction float_max} {:instruction float_pop} {:instruction float_mod} {:instruction in2} {:instruction float_yankdup} {:instruction integer_dup} {:instruction integer_pop} {:instruction integer_dec} {:instruction float_cos} {:instruction float_frominteger} {:instruction integer_swap} {:instruction integer_mod} {:instruction integer_dup} {:instruction 80} {:instruction integer_mod} {:instruction integer_dup} {:instruction print_float} {:instruction float_frominteger} {:instruction print_integer} {:instruction integer_sub} {:instruction integer_inc} {:instruction integer_max} {:instruction integer_stackdepth} {:instruction float_shove} {:instruction float_mult} {:instruction integer_max} {:instruction float_dup} {:instruction float_inc} {:instruction integer_mult} {:instruction integer_shove} {:instruction print_integer} {:instruction integer_swap})
Best program: (float_yankdup float_pop float_mult float_yankdup float_cos float_mult float_yankdup float_pop float_mult in2 integer_inc float_yankdup float_yank float_mult 28 integer_add float_sub integer_inc in2 float_max float_rot print_float integer_mult float_mult float_pop float_mult integer_inc in2 float_max integer_dup print_float integer_mult float_mult float_pop float_mult float_mult in2 float_sub float_sub float_mult integer_dup integer_dup float_add integer_dec integer_shove float_mult float_add float_mult integer_mult integer_dup float_add integer_dup float_add integer_dec integer_mult float_mult float_yankdup float_tan in2 float_max float_pop float_mod in2 float_yankdup integer_dup integer_pop integer_dec float_cos float_frominteger integer_swap integer_mod integer_dup 80 integer_mod integer_dup print_float float_frominteger print_integer integer_sub integer_inc integer_max integer_stackdepth float_shove float_mult integer_max float_dup float_inc integer_mult integer_shove print_integer integer_swap)
Errors: [75.0362 8 34.2119 10 49.8114 9 11.52 6 46.787 8 57.7839 8 13.0202 9 95.8478 11 22.5106 9 15.2344 10 55.2703 10 86.9001 7 33.2111 9 6.0932 11 65.9905 9 56.1804 9 13.6023 8 41.282 10 0.0533 8 97.5666 12 41.6537 8 87.374 12 26.2995 8 22.2569 11 90.7212 8]
Total: 1374.2185000000002
Mean: 27.48437
Genome size: 91
Size: 92
Percent parens: 0.011
--- Population Statistics ---
Average total errors in population: 4845.2518070000015
Median total errors in population: 1398.2377999999999
Error averages by case: (241.56535760000097 8.84 326.57100279999815 10.578 129.3968530000009 9.839 98.06000890000006 8.822 126.61910369999859 9.497 138.2327180999992 10.055 312.55377160000154 9.372 172.89635799999968 12.023 106.67203339999956 10.068 197.27060659999904 10.792 135.97431140000032 10.786 256.1682374999994 9.423 74.01942680000002 9.903 91.93807830000063 11.371 146.1864297000003 10.138 225.66713170000133 10.069 196.30561069999996 9.373 217.11859150000222 10.634 185.43585669999976 8.956 261.96014949999926 12.177 217.89158229999862 9.26 253.619580600002 12.136 206.0080087999986 9.546 106.45256169999931 11.132 166.60443610000013 9.274)
Error minima by case: (28.9564 7 3.1401 9 10.176 8 2.4873 5 12.1632 8 9.6713 8 2.9711 8 3.4055 9 11.4434 8 14.1734 8 13.2112 9 2.9001 6 9.2056 8 5.0932 9 20.0217 7 23.1804 9 12.5364 7 7.74 8 0.0402 6 15.4739 9 10.4039 8 6.3283 9 4.7761 7 21.2569 9 30.7339 8)
Average genome size in population (length): 88.252
Average program size in population (points): 89.252
Average percent parens in population: 0.011
Minimum age in population: 143.5802979869027
Maximum age in population: 148.0845763704372
Average age in population: 145.9578834220865
Median age in population: 145.9954317109551
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 55
Genome diversity (% unique Plush genomes):	 0.815
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 55
Syntactic diversity (% unique Push programs):	 0.815
Total error diversity:				 0.387
Error (vector) diversity:			 0.394
Behavioral diversity:				 0.395
--- Run Statistics ---
Number of program evaluations used so far: 104000
Number of point (instruction) evaluations so far: 168735415
--- Timings ---
Current time: 1529615292592 milliseconds
Total Time:         398.6 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       157.6 seconds, 39.5%
Fitness Testing:    191.4 seconds, 48.0%
Report:              49.5 seconds, 12.4%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 103
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 104
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 104
;;******************************
;; -*- Number IO problem report - generation 104
Test total error for best: 64453.020200000035
Test mean error for best: 32.22651
;;------------------------------
Outputs of best individual on training cases:
Correct output: -116.076402553 | Program output: -41.0401600   
Correct output: 24.1400847456  | Program output: -10.07181     
Correct output: 69.833290954   | Program output: 20.0219241    
Correct output: 82.4958592801  | Program output: 94.015857281  
Correct output: 34.2385110874  | Program output: 81.02551287   
Correct output: -10.7358110665 | Program output: 47.048110545  
Correct output: 1.9700532093   | Program output: -11.050100    
Correct output: -44.7956976677 | Program output: 51.052140557  
Correct output: 68.5576547673  | Program output: 46.047103777  
Correct output: -69.2536523379 | Program output: -54.0192809   
Correct output: -14.2275745396 | Program output: 41.04274047   
Correct output: -171.9767905886 | Program output: -85.0767056   
Correct output: -32.1846093265 | Program output: 1.0265        
Correct output: 66.9812146721  | Program output: 73.074405151  
Correct output: 100.0259781081 | Program output: 34.03542841   
Correct output: -90.2595503995 | Program output: -34.0791089   
Correct output: -82.4635707651 | Program output: -96.0659025   
Correct output: -8.7492896214  | Program output: -50.0312401   
Correct output: -82.1329348831 | Program output: -82.0796561   
Correct output: 24.5261129925  | Program output: -73.0405184   
Correct output: -11.4065589042 | Program output: -53.0602704   
Correct output: 10.3282540908  | Program output: -77.045776    
Correct output: -51.7760580299 | Program output: -78.0755929   
Correct output: 51.8185003253  | Program output: 74.075421801  
Correct output: 110.7431489201 | Program output: 20.0219241    
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_yankdup} {:instruction float_cos} {:instruction float_mult} {:instruction float_yankdup} {:instruction float_pop} {:instruction float_mult} {:instruction in2} {:instruction integer_inc} {:instruction float_yankdup} {:instruction float_yank} {:instruction float_mult} {:instruction 28} {:instruction integer_add} {:instruction float_pop} {:instruction integer_inc} {:instruction in2} {:instruction float_max} {:instruction float_max} {:instruction float_rot} {:instruction print_float} {:instruction integer_mult} {:instruction float_mult} {:instruction float_pop} {:instruction float_mult} {:instruction integer_inc} {:instruction in2} {:instruction float_max} {:instruction integer_dup} {:instruction print_float} {:instruction integer_mult} {:instruction float_mult} {:instruction float_pop} {:instruction float_mult} {:instruction float_mult} {:instruction in2} {:instruction float_sub} {:instruction float_sub} {:instruction float_mult} {:instruction integer_dup} {:instruction integer_dup} {:instruction float_add} {:instruction integer_dec} {:instruction integer_shove} {:instruction float_mult} {:instruction float_add} {:instruction float_mult} {:instruction integer_mult} {:instruction integer_dup} {:instruction float_add} {:instruction integer_dup} {:instruction float_add} {:instruction integer_dec} {:instruction integer_mult} {:instruction float_mult} {:instruction float_yankdup} {:instruction float_tan} {:instruction in2} {:instruction float_max} {:instruction float_pop} {:instruction float_mod} {:instruction in2} {:instruction float_yankdup} {:instruction integer_dup} {:instruction integer_pop} {:instruction integer_dec} {:instruction float_cos} {:instruction float_frominteger} {:instruction integer_swap} {:instruction integer_mod} {:instruction integer_dup} {:instruction 80} {:instruction integer_mod} {:instruction integer_dup} {:instruction print_float} {:instruction float_frominteger} {:instruction print_integer} {:instruction integer_sub} {:instruction integer_inc} {:instruction integer_max} {:instruction integer_stackdepth} {:instruction float_shove} {:instruction float_mult} {:instruction integer_max} {:instruction float_dup} {:instruction float_inc} {:instruction integer_mult} {:instruction integer_shove} {:instruction print_integer} {:instruction integer_swap})
Best program: (float_yankdup float_cos float_mult float_yankdup float_pop float_mult in2 integer_inc float_yankdup float_yank float_mult 28 integer_add float_pop integer_inc in2 float_max float_max float_rot print_float integer_mult float_mult float_pop float_mult integer_inc in2 float_max integer_dup print_float integer_mult float_mult float_pop float_mult float_mult in2 float_sub float_sub float_mult integer_dup integer_dup float_add integer_dec integer_shove float_mult float_add float_mult integer_mult integer_dup float_add integer_dup float_add integer_dec integer_mult float_mult float_yankdup float_tan in2 float_max float_pop float_mod in2 float_yankdup integer_dup integer_pop integer_dec float_cos float_frominteger integer_swap integer_mod integer_dup 80 integer_mod integer_dup print_float float_frominteger print_integer integer_sub integer_inc integer_max integer_stackdepth float_shove float_mult integer_max float_dup float_inc integer_mult integer_shove print_integer integer_swap)
Errors: [75.0362 8 34.2119 10 49.8114 9 11.52 6 46.787 8 57.7839 8 13.0202 9 95.8478 11 22.5106 9 15.2344 10 55.2703 10 86.9001 7 33.2111 9 6.0932 11 65.9905 9 56.1804 9 13.6023 8 41.282 10 0.0533 8 97.5666 12 41.6537 8 87.374 12 26.2995 8 22.2569 11 90.7212 8]
Total: 1374.2185000000002
Mean: 27.48437
Genome size: 89
Size: 90
Percent parens: 0.011
--- Population Statistics ---
Average total errors in population: 5070.1674283
Median total errors in population: 1393.2285000000002
Error averages by case: (250.38607210000112 8.784 325.1466694999982 10.498 142.26546210000103 9.743 109.1737333000005 8.63 137.21132959999858 9.391 149.95868239999973 9.968 312.10284920000197 9.332 184.21373529999917 11.9 118.69473769999907 9.969 206.23476369999838 10.716 147.75590000000085 10.743 264.4204461999992 9.201 77.75991439999999 9.804 104.16494400000083 11.295 158.50426690000106 10.08 233.62931210000173 9.967 204.64528579999995 9.265 225.85524310000244 10.554 194.25509779999976 8.917 270.728092899999 12.054 226.20237519999833 9.199 263.00863360000244 12.019 214.82479369999845 9.417 118.47458329999841 11.122 178.78550440000032 9.197)
Error minima by case: (40.0 7 3.1401 8 10.1667 6 2.4873 5 19.2366 8 9.7309 6 0.969 7 43.7904 6 11.4423 6 14.1737 8 13.2233 6 84.0 7 2.0 3 5.0198 8 20.0217 7 33.0 7 12.5364 8 7.74 8 0.0523 6 23.4959 8 10.4054 8 9.2933 8 4.7761 8 21.1825 7 10.2569 7)
Average genome size in population (length): 88.868
Average program size in population (points): 89.868
Average percent parens in population: 0.011
Minimum age in population: 144.5802979869027
Maximum age in population: 149.0982617709291
Average age in population: 147.2268699544826
Median age in population: 147.2432201805213
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 41
Genome diversity (% unique Plush genomes):	 0.829
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 41
Syntactic diversity (% unique Push programs):	 0.829
Total error diversity:				 0.373
Error (vector) diversity:			 0.382
Behavioral diversity:				 0.385
--- Run Statistics ---
Number of program evaluations used so far: 105000
Number of point (instruction) evaluations so far: 170957115
--- Timings ---
Current time: 1529615296996 milliseconds
Total Time:         403.0 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       159.2 seconds, 39.5%
Fitness Testing:    193.6 seconds, 48.0%
Report:              50.0 seconds, 12.4%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 104
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 105
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 105
;;******************************
;; -*- Number IO problem report - generation 105
Test total error for best: 64453.020200000035
Test mean error for best: 32.22651
;;------------------------------
Outputs of best individual on training cases:
Correct output: -116.076402553 | Program output: -41.0401600   
Correct output: 24.1400847456  | Program output: -10.07181     
Correct output: 69.833290954   | Program output: 20.0219241    
Correct output: 82.4958592801  | Program output: 94.015857281  
Correct output: 34.2385110874  | Program output: 81.02551287   
Correct output: -10.7358110665 | Program output: 47.048110545  
Correct output: 1.9700532093   | Program output: -11.050100    
Correct output: -44.7956976677 | Program output: 51.052140557  
Correct output: 68.5576547673  | Program output: 46.047103777  
Correct output: -69.2536523379 | Program output: -54.0192809   
Correct output: -14.2275745396 | Program output: 41.04274047   
Correct output: -171.9767905886 | Program output: -85.0767056   
Correct output: -32.1846093265 | Program output: 1.0265        
Correct output: 66.9812146721  | Program output: 73.074405151  
Correct output: 100.0259781081 | Program output: 34.03542841   
Correct output: -90.2595503995 | Program output: -34.0791089   
Correct output: -82.4635707651 | Program output: -96.0659025   
Correct output: -8.7492896214  | Program output: -50.0312401   
Correct output: -82.1329348831 | Program output: -82.0796561   
Correct output: 24.5261129925  | Program output: -73.0405184   
Correct output: -11.4065589042 | Program output: -53.0602704   
Correct output: 10.3282540908  | Program output: -77.045776    
Correct output: -51.7760580299 | Program output: -78.0755929   
Correct output: 51.8185003253  | Program output: 74.075421801  
Correct output: 110.7431489201 | Program output: 20.0219241    
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_yankdup} {:instruction float_cos} {:instruction float_mult} {:instruction float_yankdup} {:instruction float_pop} {:instruction float_mult} {:instruction in2} {:instruction integer_inc} {:instruction float_yankdup} {:instruction float_yank} {:instruction float_mult} {:instruction 28} {:instruction integer_add} {:instruction float_pop} {:instruction integer_inc} {:instruction in2} {:instruction float_max} {:instruction float_rot} {:instruction print_float} {:instruction integer_mult} {:instruction float_mult} {:instruction float_pop} {:instruction float_mult} {:instruction integer_inc} {:instruction in2} {:instruction float_max} {:instruction integer_dup} {:instruction print_float} {:instruction integer_mult} {:instruction float_mult} {:instruction float_pop} {:instruction float_mult} {:instruction float_mult} {:instruction in2} {:instruction float_sub} {:instruction float_sub} {:instruction float_mult} {:instruction integer_dup} {:instruction integer_dup} {:instruction float_add} {:instruction integer_dec} {:instruction integer_shove} {:instruction float_mult} {:instruction float_add} {:instruction float_mult} {:instruction integer_mult} {:instruction integer_dup} {:instruction float_add} {:instruction integer_dup} {:instruction float_add} {:instruction integer_dec} {:instruction integer_mult} {:instruction float_mult} {:instruction float_yankdup} {:instruction float_tan} {:instruction in2} {:instruction float_max} {:instruction float_pop} {:instruction float_mod} {:instruction in2} {:instruction float_yankdup} {:instruction integer_dup} {:instruction integer_pop} {:instruction integer_dec} {:instruction float_cos} {:instruction float_frominteger} {:instruction integer_swap} {:instruction integer_mod} {:instruction integer_dup} {:instruction 80} {:instruction integer_mod} {:instruction integer_dup} {:instruction print_float} {:instruction float_frominteger} {:instruction print_integer} {:instruction integer_sub} {:instruction integer_inc} {:instruction integer_max} {:instruction integer_stackdepth} {:instruction float_shove} {:instruction float_mult} {:instruction integer_max} {:instruction float_dup} {:instruction float_inc} {:instruction integer_mult} {:instruction integer_shove} {:instruction print_integer} {:instruction integer_swap})
Best program: (float_yankdup float_cos float_mult float_yankdup float_pop float_mult in2 integer_inc float_yankdup float_yank float_mult 28 integer_add float_pop integer_inc in2 float_max float_rot print_float integer_mult float_mult float_pop float_mult integer_inc in2 float_max integer_dup print_float integer_mult float_mult float_pop float_mult float_mult in2 float_sub float_sub float_mult integer_dup integer_dup float_add integer_dec integer_shove float_mult float_add float_mult integer_mult integer_dup float_add integer_dup float_add integer_dec integer_mult float_mult float_yankdup float_tan in2 float_max float_pop float_mod in2 float_yankdup integer_dup integer_pop integer_dec float_cos float_frominteger integer_swap integer_mod integer_dup 80 integer_mod integer_dup print_float float_frominteger print_integer integer_sub integer_inc integer_max integer_stackdepth float_shove float_mult integer_max float_dup float_inc integer_mult integer_shove print_integer integer_swap)
Errors: [75.0362 8 34.2119 10 49.8114 9 11.52 6 46.787 8 57.7839 8 13.0202 9 95.8478 11 22.5106 9 15.2344 10 55.2703 10 86.9001 7 33.2111 9 6.0932 11 65.9905 9 56.1804 9 13.6023 8 41.282 10 0.0533 8 97.5666 12 41.6537 8 87.374 12 26.2995 8 22.2569 11 90.7212 8]
Total: 1374.2185000000002
Mean: 27.48437
Genome size: 88
Size: 89
Percent parens: 0.011
--- Population Statistics ---
Average total errors in population: 5257.087952800005
Median total errors in population: 1398.2319
Error averages by case: (261.8337877000009 8.875 343.6191822999985 10.528 147.18139580000118 9.827 116.36320650000043 8.841 141.20681729999876 9.532 155.65711309999975 10.082 331.7169660000019 9.398 189.5613414999988 12.048 124.69225629999909 10.088 213.96640989999835 10.823 152.49168440000074 10.861 270.7089733999995 9.414 76.46481560000002 9.873 110.30671690000086 11.42 162.40513160000103 10.191 244.92588210000176 10.069 212.0478286999999 9.393 234.70669350000227 10.661 201.46237129999983 9.02 277.2903841999994 12.124 234.25525419999832 9.333 270.0657635000022 12.137 221.49906299999859 9.544 124.52252559999863 11.239 183.53738840000025 9.278)
Error minima by case: (36.0748 7 17.132 8 9.1687 6 3.4877 5 27.2293 7 9.7321 6 0.9656 7 6.6433 6 10.4472 6 13.752 8 13.2245 6 3.9697 7 2.0 5 5.0919 8 21.0245 6 24.2585 7 12.5415 8 8.7503 8 0.0528 6 9.5231 8 11.4076 8 3.3039 8 0.3371 7 21.2556 8 10.2569 7)
Average genome size in population (length): 89.184
Average program size in population (points): 90.184
Average percent parens in population: 0.011
Minimum age in population: 145.5802979869027
Maximum age in population: 150.5486094771924
Average age in population: 148.5798800798341
Median age in population: 148.6003662219669
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 29
Genome diversity (% unique Plush genomes):	 0.857
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 29
Syntactic diversity (% unique Push programs):	 0.857
Total error diversity:				 0.4
Error (vector) diversity:			 0.41
Behavioral diversity:				 0.411
--- Run Statistics ---
Number of program evaluations used so far: 106000
Number of point (instruction) evaluations so far: 173186715
--- Timings ---
Current time: 1529615301227 milliseconds
Total Time:         407.2 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       160.6 seconds, 39.5%
Fitness Testing:    195.8 seconds, 48.1%
Report:              50.6 seconds, 12.4%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 105
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 106
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 106
;;******************************
;; -*- Number IO problem report - generation 106
Test total error for best: 64453.020200000035
Test mean error for best: 32.22651
;;------------------------------
Outputs of best individual on training cases:
Correct output: -116.076402553 | Program output: -41.0401600   
Correct output: 24.1400847456  | Program output: -10.07181     
Correct output: 69.833290954   | Program output: 20.0219241    
Correct output: 82.4958592801  | Program output: 94.015857281  
Correct output: 34.2385110874  | Program output: 81.02551287   
Correct output: -10.7358110665 | Program output: 47.048110545  
Correct output: 1.9700532093   | Program output: -11.050100    
Correct output: -44.7956976677 | Program output: 51.052140557  
Correct output: 68.5576547673  | Program output: 46.047103777  
Correct output: -69.2536523379 | Program output: -54.0192809   
Correct output: -14.2275745396 | Program output: 41.04274047   
Correct output: -171.9767905886 | Program output: -85.0767056   
Correct output: -32.1846093265 | Program output: 1.0265        
Correct output: 66.9812146721  | Program output: 73.074405151  
Correct output: 100.0259781081 | Program output: 34.03542841   
Correct output: -90.2595503995 | Program output: -34.0791089   
Correct output: -82.4635707651 | Program output: -96.0659025   
Correct output: -8.7492896214  | Program output: -50.0312401   
Correct output: -82.1329348831 | Program output: -82.0796561   
Correct output: 24.5261129925  | Program output: -73.0405184   
Correct output: -11.4065589042 | Program output: -53.0602704   
Correct output: 10.3282540908  | Program output: -77.045776    
Correct output: -51.7760580299 | Program output: -78.0755929   
Correct output: 51.8185003253  | Program output: 74.075421801  
Correct output: 110.7431489201 | Program output: 20.0219241    
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_yankdup} {:instruction float_cos} {:instruction float_mult} {:instruction float_yankdup} {:instruction float_pop} {:instruction float_mult} {:instruction in2} {:instruction integer_inc} {:instruction float_yankdup} {:instruction float_yank} {:instruction float_mult} {:instruction 28} {:instruction integer_add} {:instruction float_pop} {:instruction integer_inc} {:instruction in2} {:instruction float_max} {:instruction float_rot} {:instruction print_float} {:instruction integer_mult} {:instruction float_mult} {:instruction float_pop} {:instruction float_mult} {:instruction integer_inc} {:instruction in2} {:instruction float_max} {:instruction integer_dup} {:instruction print_float} {:instruction integer_mult} {:instruction float_mult} {:instruction float_pop} {:instruction float_mult} {:instruction float_mult} {:instruction in2} {:instruction float_sub} {:instruction float_sub} {:instruction float_mult} {:instruction integer_dup} {:instruction integer_dup} {:instruction float_add} {:instruction integer_dec} {:instruction integer_shove} {:instruction float_mult} {:instruction float_add} {:instruction float_rot} {:instruction integer_mult} {:instruction integer_dup} {:instruction float_add} {:instruction integer_dup} {:instruction float_add} {:instruction integer_dec} {:instruction integer_mult} {:instruction float_mult} {:instruction float_yankdup} {:instruction float_tan} {:instruction in2} {:instruction float_max} {:instruction float_pop} {:instruction float_mod} {:instruction in2} {:instruction float_yankdup} {:instruction integer_dup} {:instruction integer_pop} {:instruction integer_dec} {:instruction float_cos} {:instruction float_frominteger} {:instruction integer_swap} {:instruction integer_mod} {:instruction integer_dup} {:instruction 80} {:instruction integer_mod} {:instruction integer_dup} {:instruction print_float} {:instruction float_frominteger} {:instruction print_integer} {:instruction integer_sub} {:instruction integer_inc} {:instruction integer_max} {:instruction integer_stackdepth} {:instruction float_shove} {:instruction float_mult} {:instruction integer_max} {:instruction float_dup} {:instruction float_inc} {:instruction integer_mult} {:instruction integer_shove} {:instruction print_integer} {:instruction integer_swap})
Best program: (float_yankdup float_cos float_mult float_yankdup float_pop float_mult in2 integer_inc float_yankdup float_yank float_mult 28 integer_add float_pop integer_inc in2 float_max float_rot print_float integer_mult float_mult float_pop float_mult integer_inc in2 float_max integer_dup print_float integer_mult float_mult float_pop float_mult float_mult in2 float_sub float_sub float_mult integer_dup integer_dup float_add integer_dec integer_shove float_mult float_add float_rot integer_mult integer_dup float_add integer_dup float_add integer_dec integer_mult float_mult float_yankdup float_tan in2 float_max float_pop float_mod in2 float_yankdup integer_dup integer_pop integer_dec float_cos float_frominteger integer_swap integer_mod integer_dup 80 integer_mod integer_dup print_float float_frominteger print_integer integer_sub integer_inc integer_max integer_stackdepth float_shove float_mult integer_max float_dup float_inc integer_mult integer_shove print_integer integer_swap)
Errors: [75.0362 8 34.2119 10 49.8114 9 11.52 6 46.787 8 57.7839 8 13.0202 9 95.8478 11 22.5106 9 15.2344 10 55.2703 10 86.9001 7 33.2111 9 6.0932 11 65.9905 9 56.1804 9 13.6023 8 41.282 10 0.0533 8 97.5666 12 41.6537 8 87.374 12 26.2995 8 22.2569 11 90.7212 8]
Total: 1374.2185000000002
Mean: 27.48437
Genome size: 88
Size: 89
Percent parens: 0.011
--- Population Statistics ---
Average total errors in population: 4671.663875800003
Median total errors in population: 1382.26905
Error averages by case: (222.776976700001 8.734 311.1523898999979 10.484 134.20155810000122 9.676 105.18110580000025 8.431 132.10453109999852 9.278 144.6016353999995 9.803 297.1342700000014 9.311 179.1293563999987 11.808 113.21532379999913 9.893 176.3908592999987 10.695 141.67868480000067 10.683 237.81281979999937 9.088 79.2530125000001 9.781 98.917541500001 11.289 152.2303810000012 9.968 208.37082460000175 9.916 176.6636797999995 9.194 196.91828460000258 10.494 165.44553069999975 8.868 244.2122274999987 12.065 197.35184989999843 9.16 235.79656870000207 12.048 186.4532470999984 9.369 113.31045129999858 11.105 171.10876550000006 9.111)
Error minima by case: (35.0748 7 3.1401 8 9.1687 7 2.4873 5 28.2275 8 9.731 8 1.1262 7 43.7905 9 10.4472 8 14.1621 8 13.2234 9 2.9697 7 2.0 5 5.0362 8 20.0217 8 23.2585 8 11.5364 8 7.74 8 0.0511 6 14.5462 8 10.4054 8 4.2491 9 24.2239 8 21.2179 8 21.0 8)
Average genome size in population (length): 89.005
Average program size in population (points): 90.005
Average percent parens in population: 0.011
Minimum age in population: 146.5802979869027
Maximum age in population: 151.8686151246163
Average age in population: 149.9399354232286
Median age in population: 149.9445426856521
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 21
Genome diversity (% unique Plush genomes):	 0.834
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 21
Syntactic diversity (% unique Push programs):	 0.834
Total error diversity:				 0.374
Error (vector) diversity:			 0.388
Behavioral diversity:				 0.39
--- Run Statistics ---
Number of program evaluations used so far: 107000
Number of point (instruction) evaluations so far: 175411840
--- Timings ---
Current time: 1529615306075 milliseconds
Total Time:         411.9 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       162.2 seconds, 39.4%
Fitness Testing:    198.4 seconds, 48.2%
Report:              51.2 seconds, 12.4%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 106
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 107
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 107
;;******************************
;; -*- Number IO problem report - generation 107
Test total error for best: 64453.020200000035
Test mean error for best: 32.22651
;;------------------------------
Outputs of best individual on training cases:
Correct output: -116.076402553 | Program output: -41.0401600   
Correct output: 24.1400847456  | Program output: -10.07181     
Correct output: 69.833290954   | Program output: 20.0219241    
Correct output: 82.4958592801  | Program output: 94.015857281  
Correct output: 34.2385110874  | Program output: 81.02551287   
Correct output: -10.7358110665 | Program output: 47.048110545  
Correct output: 1.9700532093   | Program output: -11.050100    
Correct output: -44.7956976677 | Program output: 51.052140557  
Correct output: 68.5576547673  | Program output: 46.047103777  
Correct output: -69.2536523379 | Program output: -54.0192809   
Correct output: -14.2275745396 | Program output: 41.04274047   
Correct output: -171.9767905886 | Program output: -85.0767056   
Correct output: -32.1846093265 | Program output: 1.0265        
Correct output: 66.9812146721  | Program output: 73.074405151  
Correct output: 100.0259781081 | Program output: 34.03542841   
Correct output: -90.2595503995 | Program output: -34.0791089   
Correct output: -82.4635707651 | Program output: -96.0659025   
Correct output: -8.7492896214  | Program output: -50.0312401   
Correct output: -82.1329348831 | Program output: -82.0796561   
Correct output: 24.5261129925  | Program output: -73.0405184   
Correct output: -11.4065589042 | Program output: -53.0602704   
Correct output: 10.3282540908  | Program output: -77.045776    
Correct output: -51.7760580299 | Program output: -78.0755929   
Correct output: 51.8185003253  | Program output: 74.075421801  
Correct output: 110.7431489201 | Program output: 20.0219241    
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_yankdup} {:instruction float_pop} {:instruction float_mult} {:instruction float_yankdup} {:instruction float_cos} {:instruction float_mult} {:instruction float_yankdup} {:instruction float_pop} {:instruction float_mult} {:instruction in2} {:instruction integer_inc} {:instruction float_yankdup} {:instruction float_yank} {:instruction float_mult} {:instruction 28} {:instruction integer_add} {:instruction float_pop} {:instruction integer_inc} {:instruction in2} {:instruction float_max} {:instruction float_rot} {:instruction print_float} {:instruction integer_mult} {:instruction float_mult} {:instruction float_pop} {:instruction float_mult} {:instruction integer_inc} {:instruction in2} {:instruction float_max} {:instruction integer_dup} {:instruction print_float} {:instruction integer_mult} {:instruction float_min} {:instruction float_tan} {:instruction float_mult} {:instruction float_mult} {:instruction in2} {:instruction float_sub} {:instruction float_sub} {:instruction float_mult} {:instruction integer_dup} {:instruction integer_dup} {:instruction float_add} {:instruction float_rot} {:instruction integer_shove} {:instruction float_mult} {:instruction float_add} {:instruction float_mult} {:instruction integer_mult} {:instruction integer_dup} {:instruction float_add} {:instruction integer_dup} {:instruction float_add} {:instruction integer_dec} {:instruction integer_mult} {:instruction float_mult} {:instruction float_yankdup} {:instruction float_tan} {:instruction in2} {:instruction float_max} {:instruction float_pop} {:instruction float_mod} {:instruction in2} {:instruction float_yankdup} {:instruction integer_dup} {:instruction integer_pop} {:instruction integer_dec} {:instruction float_cos} {:instruction float_frominteger} {:instruction integer_swap} {:instruction integer_mod} {:instruction integer_dup} {:instruction 80} {:instruction integer_mod} {:instruction integer_dup} {:instruction print_float} {:instruction float_frominteger} {:instruction print_integer} {:instruction integer_sub} {:instruction integer_inc} {:instruction integer_max} {:instruction integer_stackdepth} {:instruction float_shove} {:instruction float_mult} {:instruction integer_max} {:instruction float_dup} {:instruction float_inc} {:instruction integer_mult} {:instruction integer_shove} {:instruction print_integer} {:instruction integer_max})
Best program: (float_yankdup float_pop float_mult float_yankdup float_cos float_mult float_yankdup float_pop float_mult in2 integer_inc float_yankdup float_yank float_mult 28 integer_add float_pop integer_inc in2 float_max float_rot print_float integer_mult float_mult float_pop float_mult integer_inc in2 float_max integer_dup print_float integer_mult float_min float_tan float_mult float_mult in2 float_sub float_sub float_mult integer_dup integer_dup float_add float_rot integer_shove float_mult float_add float_mult integer_mult integer_dup float_add integer_dup float_add integer_dec integer_mult float_mult float_yankdup float_tan in2 float_max float_pop float_mod in2 float_yankdup integer_dup integer_pop integer_dec float_cos float_frominteger integer_swap integer_mod integer_dup 80 integer_mod integer_dup print_float float_frominteger print_integer integer_sub integer_inc integer_max integer_stackdepth float_shove float_mult integer_max float_dup float_inc integer_mult integer_shove print_integer integer_max)
Errors: [75.0362 8 34.2119 10 49.8114 9 11.52 6 46.787 8 57.7839 8 13.0202 9 95.8478 11 22.5106 9 15.2344 10 55.2703 10 86.9001 7 33.2111 9 6.0932 11 65.9905 9 56.1804 9 13.6023 8 41.282 10 0.0533 8 97.5666 12 41.6537 8 87.374 12 26.2995 8 22.2569 11 90.7212 8]
Total: 1374.2185000000002
Mean: 27.48437
Genome size: 91
Size: 92
Percent parens: 0.011
--- Population Statistics ---
Average total errors in population: 5049.9566571000005
Median total errors in population: 1394.2371999999998
Error averages by case: (249.01251850000125 8.857 327.6892075999981 10.593 140.41109830000102 9.756 109.9501966000002 8.679 139.27994229999882 9.399 150.93519309999985 9.995 312.6038337000016 9.424 185.20655259999904 11.968 119.48207499999918 9.978 203.07336719999842 10.767 148.7070384000007 10.795 260.5342659999992 9.328 82.81047480000002 9.87 104.85985670000082 11.312 158.50595430000112 10.101 232.06564190000196 10.047 200.93188859999995 9.372 223.08393160000224 10.578 190.07969069999965 8.981 267.5455117999988 12.139 223.70218869999854 9.31 259.2748291000026 12.138 210.80583949999857 9.542 119.26402789999862 11.123 176.8985322000003 9.191)
Error minima by case: (73.9764 7 3.0899 8 17.8333 8 10.5053 5 23.2003 7 9.7435 8 1.9656 8 45.5379 9 9.4423 8 14.1537 8 13.2402 9 85.8768 7 31.0988 8 5.0265 8 1.2591 8 55.1596 9 11.5364 8 8.7503 8 0.0525 5 15.5144 9 10.4883 8 4.2493 9 24.2239 8 21.1894 8 11.9762 8)
Average genome size in population (length): 88.819
Average program size in population (points): 89.819
Average percent parens in population: 0.011
Minimum age in population: 147.5802979869027
Maximum age in population: 153.1799757081885
Average age in population: 151.2639909647584
Median age in population: 151.307927628458
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 15
Genome diversity (% unique Plush genomes):	 0.862
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 15
Syntactic diversity (% unique Push programs):	 0.862
Total error diversity:				 0.379
Error (vector) diversity:			 0.392
Behavioral diversity:				 0.393
--- Run Statistics ---
Number of program evaluations used so far: 108000
Number of point (instruction) evaluations so far: 177632315
--- Timings ---
Current time: 1529615310431 milliseconds
Total Time:         416.4 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       163.7 seconds, 39.3%
Fitness Testing:    200.6 seconds, 48.2%
Report:              51.9 seconds, 12.5%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 107
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 108
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 108
;;******************************
;; -*- Number IO problem report - generation 108
Test total error for best: 64453.020200000035
Test mean error for best: 32.22651
;;------------------------------
Outputs of best individual on training cases:
Correct output: -116.076402553 | Program output: -41.0401600   
Correct output: 24.1400847456  | Program output: -10.07181     
Correct output: 69.833290954   | Program output: 20.0219241    
Correct output: 82.4958592801  | Program output: 94.015857281  
Correct output: 34.2385110874  | Program output: 81.02551287   
Correct output: -10.7358110665 | Program output: 47.048110545  
Correct output: 1.9700532093   | Program output: -11.050100    
Correct output: -44.7956976677 | Program output: 51.052140557  
Correct output: 68.5576547673  | Program output: 46.047103777  
Correct output: -69.2536523379 | Program output: -54.0192809   
Correct output: -14.2275745396 | Program output: 41.04274047   
Correct output: -171.9767905886 | Program output: -85.0767056   
Correct output: -32.1846093265 | Program output: 1.0265        
Correct output: 66.9812146721  | Program output: 73.074405151  
Correct output: 100.0259781081 | Program output: 34.03542841   
Correct output: -90.2595503995 | Program output: -34.0791089   
Correct output: -82.4635707651 | Program output: -96.0659025   
Correct output: -8.7492896214  | Program output: -50.0312401   
Correct output: -82.1329348831 | Program output: -82.0796561   
Correct output: 24.5261129925  | Program output: -73.0405184   
Correct output: -11.4065589042 | Program output: -53.0602704   
Correct output: 10.3282540908  | Program output: -77.045776    
Correct output: -51.7760580299 | Program output: -78.0755929   
Correct output: 51.8185003253  | Program output: 74.075421801  
Correct output: 110.7431489201 | Program output: 20.0219241    
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_yankdup} {:instruction float_pop} {:instruction float_mult} {:instruction float_yankdup} {:instruction float_dup} {:instruction float_mult} {:instruction in2} {:instruction integer_inc} {:instruction float_yankdup} {:instruction float_min} {:instruction float_mult} {:instruction 28} {:instruction integer_add} {:instruction float_pop} {:instruction integer_inc} {:instruction in2} {:instruction float_max} {:instruction float_max} {:instruction float_flush} {:instruction print_float} {:instruction integer_mult} {:instruction float_mult} {:instruction float_pop} {:instruction float_mult} {:instruction integer_inc} {:instruction in2} {:instruction float_max} {:instruction integer_dup} {:instruction print_float} {:instruction integer_mult} {:instruction float_mult} {:instruction float_pop} {:instruction float_mult} {:instruction float_mult} {:instruction in2} {:instruction float_sub} {:instruction float_sub} {:instruction float_mult} {:instruction integer_dup} {:instruction integer_dup} {:instruction float_add} {:instruction integer_dec} {:instruction integer_shove} {:instruction float_mult} {:instruction float_add} {:instruction float_mult} {:instruction integer_mult} {:instruction integer_dup} {:instruction float_add} {:instruction integer_dup} {:instruction float_add} {:instruction integer_dec} {:instruction integer_mult} {:instruction float_mult} {:instruction float_yankdup} {:instruction float_tan} {:instruction in2} {:instruction float_max} {:instruction float_pop} {:instruction float_mod} {:instruction in2} {:instruction float_yankdup} {:instruction integer_dup} {:instruction integer_pop} {:instruction integer_dec} {:instruction float_cos} {:instruction float_frominteger} {:instruction integer_swap} {:instruction integer_mod} {:instruction integer_dup} {:instruction 80} {:instruction integer_mod} {:instruction integer_dup} {:instruction print_float} {:instruction float_frominteger} {:instruction print_integer} {:instruction integer_sub} {:instruction integer_inc} {:instruction integer_max} {:instruction integer_stackdepth} {:instruction float_shove} {:instruction float_mult} {:instruction integer_max} {:instruction float_dup} {:instruction float_inc} {:instruction integer_mult} {:instruction float_flush} {:instruction print_integer} {:instruction integer_swap})
Best program: (float_yankdup float_pop float_mult float_yankdup float_dup float_mult in2 integer_inc float_yankdup float_min float_mult 28 integer_add float_pop integer_inc in2 float_max float_max float_flush print_float integer_mult float_mult float_pop float_mult integer_inc in2 float_max integer_dup print_float integer_mult float_mult float_pop float_mult float_mult in2 float_sub float_sub float_mult integer_dup integer_dup float_add integer_dec integer_shove float_mult float_add float_mult integer_mult integer_dup float_add integer_dup float_add integer_dec integer_mult float_mult float_yankdup float_tan in2 float_max float_pop float_mod in2 float_yankdup integer_dup integer_pop integer_dec float_cos float_frominteger integer_swap integer_mod integer_dup 80 integer_mod integer_dup print_float float_frominteger print_integer integer_sub integer_inc integer_max integer_stackdepth float_shove float_mult integer_max float_dup float_inc integer_mult float_flush print_integer integer_swap)
Errors: [75.0362 8 34.2119 10 49.8114 9 11.52 6 46.787 8 57.7839 8 13.0202 9 95.8478 11 22.5106 9 15.2344 10 55.2703 10 86.9001 7 33.2111 9 6.0932 11 65.9905 9 56.1804 9 13.6023 8 41.282 10 0.0533 8 97.5666 12 41.6537 8 87.374 12 26.2995 8 22.2569 11 90.7212 8]
Total: 1374.2185000000002
Mean: 27.48437
Genome size: 89
Size: 90
Percent parens: 0.011
--- Population Statistics ---
Average total errors in population: 4541.648439900001
Median total errors in population: 1390.2241000000001
Error averages by case: (218.35184810000104 8.728 313.4499748999982 10.479 131.00213630000115 9.753 99.39335330000031 8.668 127.55210189999835 9.462 140.39251719999905 9.978 301.08595790000106 9.312 175.0893059999993 11.981 108.15149389999915 9.986 170.25506589999873 10.703 138.07367730000072 10.775 229.6803386999995 9.165 68.01363310000009 9.808 93.95637970000091 11.356 147.11963970000056 10.066 201.16501090000136 9.916 168.3817073000001 9.235 190.8786547000023 10.523 156.91576859999986 8.903 236.5579339999988 12.038 191.5843363999986 9.174 228.17329400000224 12.04 178.2928212999986 9.387 108.57190739999854 11.152 167.8095814000003 9.162)
Error minima by case: (34.997 6 9.0 4 9.176 5 2.4864 5 28.2375 7 9.7279 5 2.9711 3 43.7874 5 10.4434 5 14.2344 7 13.2203 5 2.8973 7 2.0 4 5.0228 8 20.0217 6 23.1805 6 12.5455 8 7.7469 8 0.0464 6 14.5462 7 10.4039 8 4.3273 7 25.2299 7 21.1857 8 10.2569 6)
Average genome size in population (length): 89.076
Average program size in population (points): 90.076
Average percent parens in population: 0.011
Minimum age in population: 149.6310499914766
Maximum age in population: 154.9029630523724
Average age in population: 152.6466129401067
Median age in population: 152.7236142214283
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 7
Genome diversity (% unique Plush genomes):	 0.89
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 7
Syntactic diversity (% unique Push programs):	 0.89
Total error diversity:				 0.389
Error (vector) diversity:			 0.397
Behavioral diversity:				 0.397
--- Run Statistics ---
Number of program evaluations used so far: 109000
Number of point (instruction) evaluations so far: 179859215
--- Timings ---
Current time: 1529615314921 milliseconds
Total Time:         420.9 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       165.3 seconds, 39.3%
Fitness Testing:    203.0 seconds, 48.2%
Report:              52.5 seconds, 12.5%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 108
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 109
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 109
;;******************************
;; -*- Number IO problem report - generation 109
Test total error for best: 64453.020200000035
Test mean error for best: 32.22651
;;------------------------------
Outputs of best individual on training cases:
Correct output: -116.076402553 | Program output: -41.0401600   
Correct output: 24.1400847456  | Program output: -10.07181     
Correct output: 69.833290954   | Program output: 20.0219241    
Correct output: 82.4958592801  | Program output: 94.015857281  
Correct output: 34.2385110874  | Program output: 81.02551287   
Correct output: -10.7358110665 | Program output: 47.048110545  
Correct output: 1.9700532093   | Program output: -11.050100    
Correct output: -44.7956976677 | Program output: 51.052140557  
Correct output: 68.5576547673  | Program output: 46.047103777  
Correct output: -69.2536523379 | Program output: -54.0192809   
Correct output: -14.2275745396 | Program output: 41.04274047   
Correct output: -171.9767905886 | Program output: -85.0767056   
Correct output: -32.1846093265 | Program output: 1.0265        
Correct output: 66.9812146721  | Program output: 73.074405151  
Correct output: 100.0259781081 | Program output: 34.03542841   
Correct output: -90.2595503995 | Program output: -34.0791089   
Correct output: -82.4635707651 | Program output: -96.0659025   
Correct output: -8.7492896214  | Program output: -50.0312401   
Correct output: -82.1329348831 | Program output: -82.0796561   
Correct output: 24.5261129925  | Program output: -73.0405184   
Correct output: -11.4065589042 | Program output: -53.0602704   
Correct output: 10.3282540908  | Program output: -77.045776    
Correct output: -51.7760580299 | Program output: -78.0755929   
Correct output: 51.8185003253  | Program output: 74.075421801  
Correct output: 110.7431489201 | Program output: 20.0219241    
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_yankdup} {:instruction float_cos} {:instruction float_mult} {:instruction float_yankdup} {:instruction float_pop} {:instruction float_mult} {:instruction in2} {:instruction integer_inc} {:instruction float_yankdup} {:instruction float_yank} {:instruction float_mult} {:instruction 28} {:instruction integer_add} {:instruction float_pop} {:instruction integer_inc} {:instruction in2} {:instruction float_max} {:instruction float_rot} {:instruction print_float} {:instruction integer_mult} {:instruction float_mult} {:instruction float_pop} {:instruction float_mult} {:instruction integer_inc} {:instruction in2} {:instruction float_max} {:instruction integer_dup} {:instruction float_swap} {:instruction integer_mult} {:instruction float_mult} {:instruction float_pop} {:instruction float_mult} {:instruction float_mult} {:instruction in2} {:instruction float_sub} {:instruction integer_dup} {:instruction integer_dup} {:instruction float_add} {:instruction integer_dec} {:instruction integer_shove} {:instruction float_mult} {:instruction float_add} {:instruction float_mult} {:instruction integer_mult} {:instruction integer_dup} {:instruction float_add} {:instruction integer_dup} {:instruction float_add} {:instruction integer_dec} {:instruction integer_mult} {:instruction float_mult} {:instruction float_yankdup} {:instruction float_tan} {:instruction in2} {:instruction float_max} {:instruction float_pop} {:instruction float_mod} {:instruction in2} {:instruction float_yankdup} {:instruction integer_dup} {:instruction integer_pop} {:instruction integer_dec} {:instruction float_cos} {:instruction float_frominteger} {:instruction integer_swap} {:instruction integer_mod} {:instruction integer_dup} {:instruction 80} {:instruction integer_mod} {:instruction integer_dup} {:instruction print_float} {:instruction float_frominteger} {:instruction print_integer} {:instruction integer_sub} {:instruction integer_inc} {:instruction integer_max} {:instruction integer_stackdepth} {:instruction float_shove} {:instruction float_mult} {:instruction integer_max} {:instruction float_dup} {:instruction float_inc} {:instruction integer_mult} {:instruction integer_shove} {:instruction print_integer} {:instruction integer_swap})
Best program: (float_yankdup float_cos float_mult float_yankdup float_pop float_mult in2 integer_inc float_yankdup float_yank float_mult 28 integer_add float_pop integer_inc in2 float_max float_rot print_float integer_mult float_mult float_pop float_mult integer_inc in2 float_max integer_dup float_swap integer_mult float_mult float_pop float_mult float_mult in2 float_sub integer_dup integer_dup float_add integer_dec integer_shove float_mult float_add float_mult integer_mult integer_dup float_add integer_dup float_add integer_dec integer_mult float_mult float_yankdup float_tan in2 float_max float_pop float_mod in2 float_yankdup integer_dup integer_pop integer_dec float_cos float_frominteger integer_swap integer_mod integer_dup 80 integer_mod integer_dup print_float float_frominteger print_integer integer_sub integer_inc integer_max integer_stackdepth float_shove float_mult integer_max float_dup float_inc integer_mult integer_shove print_integer integer_swap)
Errors: [75.0362 8 34.2119 10 49.8114 9 11.52 6 46.787 8 57.7839 8 13.0202 9 95.8478 11 22.5106 9 15.2344 10 55.2703 10 86.9001 7 33.2111 9 6.0932 11 65.9905 9 56.1804 9 13.6023 8 41.282 10 0.0533 8 97.5666 12 41.6537 8 87.374 12 26.2995 8 22.2569 11 90.7212 8]
Total: 1374.2185000000002
Mean: 27.48437
Genome size: 86
Size: 87
Percent parens: 0.011
--- Population Statistics ---
Average total errors in population: 5090.789201000002
Median total errors in population: 1397.2388
Error averages by case: (243.3694264000009 8.778 335.920439899998 10.522 148.6521146000011 9.75 118.9499851000003 8.701 147.04220029999914 9.41 158.33817060000015 10.0 322.65953990000173 9.342 192.2203279999989 11.91 127.46890539999923 9.972 197.17944389999843 10.739 156.15311270000072 10.736 256.7743641999994 9.294 69.95591390000004 9.797 112.99629960000091 11.252 166.12079240000128 10.101 227.76061650000116 9.972 196.85341029999984 9.294 217.27362580000232 10.55 185.98524979999993 8.949 263.8909465999993 12.053 218.54024799999846 9.287 255.63329890000165 12.036 206.81610969999872 9.472 127.14503979999861 11.132 184.8326187000001 9.208)
Error minima by case: (68.5982 6 5.822 8 9.176 8 2.4959 6 0.2385 7 9.7321 8 0.9701 8 2.6825 8 10.4434 8 14.1624 8 13.2245 8 85.9001 7 15.2936 5 5.0198 7 20.026 8 42.7813 8 12.5379 8 7.7483 8 0.0329 6 5.436 9 10.4056 8 6.3075 8 4.2978 7 17.8185 8 30.7431 8)
Average genome size in population (length): 88.946
Average program size in population (points): 89.946
Average percent parens in population: 0.011
Minimum age in population: 150.6310499914766
Maximum age in population: 156.5105524570877
Average age in population: 153.9794274365521
Median age in population: 154.041654474272
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 9
Genome diversity (% unique Plush genomes):	 0.898
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 9
Syntactic diversity (% unique Push programs):	 0.898
Total error diversity:				 0.397
Error (vector) diversity:			 0.406
Behavioral diversity:				 0.41
--- Run Statistics ---
Number of program evaluations used so far: 110000
Number of point (instruction) evaluations so far: 182082890
--- Timings ---
Current time: 1529615319259 milliseconds
Total Time:         425.1 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       166.7 seconds, 39.2%
Fitness Testing:    205.3 seconds, 48.3%
Report:              53.0 seconds, 12.5%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 109
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 110
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 110
;;******************************
;; -*- Number IO problem report - generation 110
Test total error for best: 64458.02020000005
Test mean error for best: 32.22901
;;------------------------------
Outputs of best individual on training cases:
Correct output: -116.076402553 | Program output: -41.0401600   
Correct output: 24.1400847456  | Program output: -10.07181     
Correct output: 69.833290954   | Program output: 20.0219241    
Correct output: 82.4958592801  | Program output: 94.015857281  
Correct output: 34.2385110874  | Program output: 81.02551287   
Correct output: -10.7358110665 | Program output: 47.048110545  
Correct output: 1.9700532093   | Program output: -11.050100    
Correct output: -44.7956976677 | Program output: 51.052140557  
Correct output: 68.5576547673  | Program output: 46.047103777  
Correct output: -69.2536523379 | Program output: -54.0192809   
Correct output: -14.2275745396 | Program output: 41.04274047   
Correct output: -171.9767905886 | Program output: -85.0767056   
Correct output: -32.1846093265 | Program output: 1.0265        
Correct output: 66.9812146721  | Program output: 73.074405151  
Correct output: 100.0259781081 | Program output: 34.03542841   
Correct output: -90.2595503995 | Program output: -34.0791089   
Correct output: -82.4635707651 | Program output: -96.0659025   
Correct output: -8.7492896214  | Program output: -50.0312401   
Correct output: -82.1329348831 | Program output: -82.0796561   
Correct output: 24.5261129925  | Program output: -73.0405184   
Correct output: -11.4065589042 | Program output: -53.0602704   
Correct output: 10.3282540908  | Program output: -77.045776    
Correct output: -51.7760580299 | Program output: -78.0755929   
Correct output: 51.8185003253  | Program output: 74.075421801  
Correct output: 110.7431489201 | Program output: 20.0219241    
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_yankdup} {:instruction float_pop} {:instruction float_mult} {:instruction float_yankdup} {:instruction float_pop} {:instruction float_mult} {:instruction in2} {:instruction integer_inc} {:instruction float_yankdup} {:instruction float_yank} {:instruction float_mult} {:instruction 28} {:instruction integer_add} {:instruction float_pop} {:instruction integer_inc} {:instruction in2} {:instruction float_max} {:instruction float_max} {:instruction float_rot} {:instruction print_float} {:instruction integer_mult} {:instruction float_mult} {:instruction float_pop} {:instruction float_inc} {:instruction integer_inc} {:instruction in2} {:instruction float_max} {:instruction integer_dup} {:instruction print_float} {:instruction integer_mult} {:instruction float_mult} {:instruction float_pop} {:instruction float_mult} {:instruction float_mult} {:instruction in2} {:instruction float_sub} {:instruction float_sub} {:instruction float_mult} {:instruction integer_dup} {:instruction integer_dup} {:instruction float_add} {:instruction integer_dec} {:instruction integer_shove} {:instruction float_mult} {:instruction float_add} {:instruction float_mult} {:instruction integer_mult} {:instruction integer_dup} {:instruction float_add} {:instruction integer_dup} {:instruction float_add} {:instruction integer_dec} {:instruction integer_mult} {:instruction float_mult} {:instruction float_yankdup} {:instruction float_tan} {:instruction in2} {:instruction float_max} {:instruction float_pop} {:instruction float_mod} {:instruction in2} {:instruction float_yankdup} {:instruction integer_dup} {:instruction integer_pop} {:instruction integer_dec} {:instruction float_cos} {:instruction float_frominteger} {:instruction integer_swap} {:instruction integer_mod} {:instruction integer_dup} {:instruction 80} {:instruction integer_mod} {:instruction integer_dup} {:instruction print_float} {:instruction float_frominteger} {:instruction print_integer} {:instruction integer_sub} {:instruction integer_inc} {:instruction integer_max} {:instruction integer_stackdepth} {:instruction float_shove} {:instruction float_mult} {:instruction integer_max} {:instruction float_dup} {:instruction integer_shove} {:instruction print_integer} {:instruction integer_swap})
Best program: (float_yankdup float_pop float_mult float_yankdup float_pop float_mult in2 integer_inc float_yankdup float_yank float_mult 28 integer_add float_pop integer_inc in2 float_max float_max float_rot print_float integer_mult float_mult float_pop float_inc integer_inc in2 float_max integer_dup print_float integer_mult float_mult float_pop float_mult float_mult in2 float_sub float_sub float_mult integer_dup integer_dup float_add integer_dec integer_shove float_mult float_add float_mult integer_mult integer_dup float_add integer_dup float_add integer_dec integer_mult float_mult float_yankdup float_tan in2 float_max float_pop float_mod in2 float_yankdup integer_dup integer_pop integer_dec float_cos float_frominteger integer_swap integer_mod integer_dup 80 integer_mod integer_dup print_float float_frominteger print_integer integer_sub integer_inc integer_max integer_stackdepth float_shove float_mult integer_max float_dup integer_shove print_integer integer_swap)
Errors: [75.0362 8 34.2119 10 49.8114 9 11.52 6 46.787 8 57.7839 8 13.0202 9 95.8478 11 22.5106 9 15.2344 10 55.2703 10 86.9001 7 33.2111 9 6.0932 11 65.9905 9 56.1804 9 13.6023 8 41.282 10 0.0533 8 97.5666 12 41.6537 8 87.374 12 26.2995 8 22.2569 11 90.7212 8]
Total: 1374.2185000000002
Mean: 27.48437
Genome size: 87
Size: 88
Percent parens: 0.011
--- Population Statistics ---
Average total errors in population: 5310.386371100002
Median total errors in population: 1394.163
Error averages by case: (260.92895830000083 8.845 341.346399099998 10.564 149.0176267000013 9.784 117.86005660000032 8.667 145.7217717999987 9.461 157.24825999999962 9.982 329.0996176000024 9.399 191.20105479999907 11.966 126.15582529999882 10.017 217.47886019999828 10.742 154.67655170000094 10.798 274.3830644999998 9.266 83.80193530000014 9.847 111.9036294000012 11.346 164.50554280000114 10.105 243.65609280000203 10.015 216.88155559999979 9.326 237.4559011000025 10.603 205.65143439999974 8.95 281.0328422999993 12.082 237.48022259999834 9.25 272.94526460000225 12.036 225.78979949999825 9.478 126.08456249999819 11.192 185.13854160000008 9.22)
Error minima by case: (31.5846 7 3.1401 9 9.3936 8 2.4873 6 33.2185 8 9.6877 6 0.969 7 39.6961 9 10.6692 8 14.2344 8 13.1848 9 2.9697 6 31.1581 7 5.0932 8 1.5967 8 5.7677 8 2.0282 8 7.718 8 0.0523 6 17.4461 8 10.3463 7 7.2883 9 25.2239 7 21.2569 8 12.3138 8)
Average genome size in population (length): 88.747
Average program size in population (points): 89.747
Average percent parens in population: 0.011
Minimum age in population: 152.6872671378218
Maximum age in population: 157.4277940718072
Average age in population: 155.3701889260313
Median age in population: 155.4297563952533
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 8
Genome diversity (% unique Plush genomes):	 0.875
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 8
Syntactic diversity (% unique Push programs):	 0.875
Total error diversity:				 0.405
Error (vector) diversity:			 0.412
Behavioral diversity:				 0.413
--- Run Statistics ---
Number of program evaluations used so far: 111000
Number of point (instruction) evaluations so far: 184301565
--- Timings ---
Current time: 1529615323629 milliseconds
Total Time:         429.6 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       168.3 seconds, 39.2%
Fitness Testing:    207.5 seconds, 48.3%
Report:              53.7 seconds, 12.5%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 110
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 111
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 111
;;******************************
;; -*- Number IO problem report - generation 111
Test total error for best: 64453.020200000035
Test mean error for best: 32.22651
;;------------------------------
Outputs of best individual on training cases:
Correct output: -116.076402553 | Program output: -41.0401600   
Correct output: 24.1400847456  | Program output: -10.07181     
Correct output: 69.833290954   | Program output: 20.0219241    
Correct output: 82.4958592801  | Program output: 94.015857281  
Correct output: 34.2385110874  | Program output: 81.02551287   
Correct output: -10.7358110665 | Program output: 47.048110545  
Correct output: 1.9700532093   | Program output: -11.050100    
Correct output: -44.7956976677 | Program output: 51.052140557  
Correct output: 68.5576547673  | Program output: 46.047103777  
Correct output: -69.2536523379 | Program output: -54.0192809   
Correct output: -14.2275745396 | Program output: 41.04274047   
Correct output: -171.9767905886 | Program output: -85.0767056   
Correct output: -32.1846093265 | Program output: 1.0265        
Correct output: 66.9812146721  | Program output: 73.074405151  
Correct output: 100.0259781081 | Program output: 34.03542841   
Correct output: -90.2595503995 | Program output: -34.0791089   
Correct output: -82.4635707651 | Program output: -96.0659025   
Correct output: -8.7492896214  | Program output: -50.0312401   
Correct output: -82.1329348831 | Program output: -82.0796561   
Correct output: 24.5261129925  | Program output: -73.0405184   
Correct output: -11.4065589042 | Program output: -53.0602704   
Correct output: 10.3282540908  | Program output: -77.045776    
Correct output: -51.7760580299 | Program output: -78.0755929   
Correct output: 51.8185003253  | Program output: 74.075421801  
Correct output: 110.7431489201 | Program output: 20.0219241    
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_yankdup} {:instruction float_cos} {:instruction float_mult} {:instruction float_yankdup} {:instruction float_sin} {:instruction float_mult} {:instruction in2} {:instruction integer_inc} {:instruction float_yankdup} {:instruction float_yank} {:instruction float_mult} {:instruction 28} {:instruction integer_add} {:instruction float_pop} {:instruction integer_inc} {:instruction in2} {:instruction float_max} {:instruction float_rot} {:instruction print_float} {:instruction integer_mult} {:instruction float_mult} {:instruction float_pop} {:instruction float_mult} {:instruction integer_inc} {:instruction in2} {:instruction float_max} {:instruction integer_dup} {:instruction print_float} {:instruction integer_mult} {:instruction float_mult} {:instruction float_pop} {:instruction float_mult} {:instruction float_mult} {:instruction in2} {:instruction float_sub} {:instruction float_sub} {:instruction float_mult} {:instruction integer_dup} {:instruction integer_dup} {:instruction float_add} {:instruction integer_dec} {:instruction integer_shove} {:instruction float_mult} {:instruction float_add} {:instruction float_mult} {:instruction integer_mult} {:instruction integer_dup} {:instruction float_add} {:instruction integer_dup} {:instruction float_add} {:instruction integer_dec} {:instruction integer_mult} {:instruction float_dup} {:instruction float_yankdup} {:instruction float_tan} {:instruction in2} {:instruction float_max} {:instruction float_pop} {:instruction float_mod} {:instruction in2} {:instruction float_yankdup} {:instruction integer_dup} {:instruction integer_pop} {:instruction integer_dec} {:instruction float_cos} {:instruction float_frominteger} {:instruction integer_swap} {:instruction integer_mod} {:instruction integer_dup} {:instruction 80} {:instruction integer_mod} {:instruction integer_dup} {:instruction print_float} {:instruction float_frominteger} {:instruction print_integer} {:instruction integer_sub} {:instruction integer_inc} {:instruction integer_max} {:instruction integer_stackdepth} {:instruction float_shove} {:instruction float_mult} {:instruction integer_max} {:instruction float_dup} {:instruction float_inc} {:instruction integer_mult} {:instruction integer_shove} {:instruction print_integer} {:instruction integer_swap})
Best program: (float_yankdup float_cos float_mult float_yankdup float_sin float_mult in2 integer_inc float_yankdup float_yank float_mult 28 integer_add float_pop integer_inc in2 float_max float_rot print_float integer_mult float_mult float_pop float_mult integer_inc in2 float_max integer_dup print_float integer_mult float_mult float_pop float_mult float_mult in2 float_sub float_sub float_mult integer_dup integer_dup float_add integer_dec integer_shove float_mult float_add float_mult integer_mult integer_dup float_add integer_dup float_add integer_dec integer_mult float_dup float_yankdup float_tan in2 float_max float_pop float_mod in2 float_yankdup integer_dup integer_pop integer_dec float_cos float_frominteger integer_swap integer_mod integer_dup 80 integer_mod integer_dup print_float float_frominteger print_integer integer_sub integer_inc integer_max integer_stackdepth float_shove float_mult integer_max float_dup float_inc integer_mult integer_shove print_integer integer_swap)
Errors: [75.0362 8 34.2119 10 49.8114 9 11.52 6 46.787 8 57.7839 8 13.0202 9 95.8478 11 22.5106 9 15.2344 10 55.2703 10 86.9001 7 33.2111 9 6.0932 11 65.9905 9 56.1804 9 13.6023 8 41.282 10 0.0533 8 97.5666 12 41.6537 8 87.374 12 26.2995 8 22.2569 11 90.7212 8]
Total: 1374.2185000000002
Mean: 27.48437
Genome size: 88
Size: 89
Percent parens: 0.011
--- Population Statistics ---
Average total errors in population: 5067.493658899998
Median total errors in population: 1393.7262
Error averages by case: (248.17679490000117 8.752 315.4792727999977 10.506 145.47490210000115 9.716 114.20258570000051 8.551 143.32150169999892 9.317 155.50849259999964 9.908 301.4664074000009 9.332 189.5727516999987 11.878 124.54062409999895 9.942 203.29665449999806 10.725 153.32312270000082 10.726 260.8150803999993 9.127 76.13517519999999 9.843 110.10598860000093 11.226 163.24859400000116 10.031 230.59294350000167 9.933 201.31765269999988 9.183 222.98459840000234 10.522 190.53322419999972 8.851 267.3956646999992 12.063 223.7487264999984 9.143 259.1735987000025 12.024 211.01959489999868 9.362 123.32501739999837 11.043 181.8666895000003 9.164)
Error minima by case: (35.0748 7 20.1319 8 10.1688 8 2.4864 5 30.233 7 9.7321 8 0.9701 8 43.7914 9 11.4434 8 14.1814 8 13.1872 9 2.9697 7 31.1781 7 5.0188 8 20.018 7 23.2585 8 12.5402 7 7.7204 8 0.0329 6 15.514 9 10.4044 8 6.2863 9 25.2253 8 21.1815 8 30.7339 8)
Average genome size in population (length): 88.93
Average program size in population (points): 89.93
Average percent parens in population: 0.011
Minimum age in population: 153.6872671378218
Maximum age in population: 158.6925511536322
Average age in population: 156.7257341571908
Median age in population: 156.7666113240892
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 7
Genome diversity (% unique Plush genomes):	 0.871
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 7
Syntactic diversity (% unique Push programs):	 0.871
Total error diversity:				 0.369
Error (vector) diversity:			 0.38
Behavioral diversity:				 0.38
--- Run Statistics ---
Number of program evaluations used so far: 112000
Number of point (instruction) evaluations so far: 186524815
--- Timings ---
Current time: 1529615328164 milliseconds
Total Time:         434.0 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       169.8 seconds, 39.1%
Fitness Testing:    209.8 seconds, 48.3%
Report:              54.2 seconds, 12.5%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 111
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 112
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 112
;;******************************
;; -*- Number IO problem report - generation 112
Test total error for best: 64453.020200000035
Test mean error for best: 32.22651
;;------------------------------
Outputs of best individual on training cases:
Correct output: -116.076402553 | Program output: -41.0401600   
Correct output: 24.1400847456  | Program output: -10.07181     
Correct output: 69.833290954   | Program output: 20.0219241    
Correct output: 82.4958592801  | Program output: 94.015857281  
Correct output: 34.2385110874  | Program output: 81.02551287   
Correct output: -10.7358110665 | Program output: 47.048110545  
Correct output: 1.9700532093   | Program output: -11.050100    
Correct output: -44.7956976677 | Program output: 51.052140557  
Correct output: 68.5576547673  | Program output: 46.047103777  
Correct output: -69.2536523379 | Program output: -54.0192809   
Correct output: -14.2275745396 | Program output: 41.04274047   
Correct output: -171.9767905886 | Program output: -85.0767056   
Correct output: -32.1846093265 | Program output: 1.0265        
Correct output: 66.9812146721  | Program output: 73.074405151  
Correct output: 100.0259781081 | Program output: 34.03542841   
Correct output: -90.2595503995 | Program output: -34.0791089   
Correct output: -82.4635707651 | Program output: -96.0659025   
Correct output: -8.7492896214  | Program output: -50.0312401   
Correct output: -82.1329348831 | Program output: -82.0796561   
Correct output: 24.5261129925  | Program output: -73.0405184   
Correct output: -11.4065589042 | Program output: -53.0602704   
Correct output: 10.3282540908  | Program output: -77.045776    
Correct output: -51.7760580299 | Program output: -78.0755929   
Correct output: 51.8185003253  | Program output: 74.075421801  
Correct output: 110.7431489201 | Program output: 20.0219241    
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_yankdup} {:instruction float_pop} {:instruction float_mult} {:instruction float_yankdup} {:instruction float_pop} {:instruction float_mult} {:instruction in2} {:instruction integer_inc} {:instruction float_yankdup} {:instruction float_min} {:instruction float_mult} {:instruction 28} {:instruction integer_add} {:instruction float_pop} {:instruction integer_inc} {:instruction in2} {:instruction float_max} {:instruction float_max} {:instruction float_rot} {:instruction print_float} {:instruction integer_mult} {:instruction float_mult} {:instruction float_pop} {:instruction float_mult} {:instruction integer_inc} {:instruction in2} {:instruction float_max} {:instruction integer_dup} {:instruction print_float} {:instruction integer_mult} {:instruction float_mult} {:instruction float_pop} {:instruction float_yank} {:instruction float_mult} {:instruction in2} {:instruction float_sub} {:instruction float_sub} {:instruction float_mult} {:instruction integer_dup} {:instruction integer_dup} {:instruction float_add} {:instruction integer_dec} {:instruction integer_shove} {:instruction float_mult} {:instruction float_add} {:instruction float_mult} {:instruction integer_mult} {:instruction integer_dup} {:instruction float_add} {:instruction integer_dup} {:instruction float_add} {:instruction integer_dec} {:instruction integer_mult} {:instruction float_mult} {:instruction float_yankdup} {:instruction float_tan} {:instruction in2} {:instruction float_max} {:instruction float_pop} {:instruction float_mod} {:instruction in2} {:instruction float_yankdup} {:instruction integer_dup} {:instruction integer_pop} {:instruction integer_dec} {:instruction float_cos} {:instruction float_frominteger} {:instruction integer_swap} {:instruction integer_mod} {:instruction integer_dup} {:instruction 80} {:instruction integer_mod} {:instruction integer_dup} {:instruction print_float} {:instruction float_frominteger} {:instruction print_integer} {:instruction integer_sub} {:instruction integer_inc} {:instruction integer_max} {:instruction integer_stackdepth} {:instruction float_shove} {:instruction float_mult} {:instruction integer_max} {:instruction float_dup} {:instruction float_inc} {:instruction integer_mult} {:instruction integer_shove} {:instruction print_integer} {:instruction integer_swap})
Best program: (float_yankdup float_pop float_mult float_yankdup float_pop float_mult in2 integer_inc float_yankdup float_min float_mult 28 integer_add float_pop integer_inc in2 float_max float_max float_rot print_float integer_mult float_mult float_pop float_mult integer_inc in2 float_max integer_dup print_float integer_mult float_mult float_pop float_yank float_mult in2 float_sub float_sub float_mult integer_dup integer_dup float_add integer_dec integer_shove float_mult float_add float_mult integer_mult integer_dup float_add integer_dup float_add integer_dec integer_mult float_mult float_yankdup float_tan in2 float_max float_pop float_mod in2 float_yankdup integer_dup integer_pop integer_dec float_cos float_frominteger integer_swap integer_mod integer_dup 80 integer_mod integer_dup print_float float_frominteger print_integer integer_sub integer_inc integer_max integer_stackdepth float_shove float_mult integer_max float_dup float_inc integer_mult integer_shove print_integer integer_swap)
Errors: [75.0362 8 34.2119 10 49.8114 9 11.52 6 46.787 8 57.7839 8 13.0202 9 95.8478 11 22.5106 9 15.2344 10 55.2703 10 86.9001 7 33.2111 9 6.0932 11 65.9905 9 56.1804 9 13.6023 8 41.282 10 0.0533 8 97.5666 12 41.6537 8 87.374 12 26.2995 8 22.2569 11 90.7212 8]
Total: 1374.2185000000002
Mean: 27.48437
Genome size: 89
Size: 90
Percent parens: 0.011
--- Population Statistics ---
Average total errors in population: 5294.563810700005
Median total errors in population: 1393.2783000000002
Error averages by case: (261.7981793000011 8.882 319.04589319999826 10.554 148.96870630000123 9.764 119.02368150000034 8.658 147.225765699999 9.467 159.83406979999995 9.947 302.07510700000074 9.366 193.7170125999986 11.952 128.03969659999916 9.989 220.93431389999816 10.831 157.59370210000063 10.737 275.15274299999953 9.367 80.03089380000006 9.81 114.84633970000093 11.366 166.99457970000108 10.07 247.32339280000193 10.062 216.9340481999998 9.45 240.1692996000022 10.7 206.33166329999972 9.056 281.79775199999915 12.183 238.98872039999844 9.347 273.77960920000254 12.188 226.49945299999865 9.579 128.9874627999985 11.209 184.75772520000027 9.18)
Error minima by case: (40.0 4 9.0 4 10.1667 4 2.4959 6 7.7625 7 9.7299 4 0.9701 3 43.7905 4 11.4423 4 15.154 4 13.2234 4 84.0 4 2.0 2 6.0198 7 20.026 5 33.0 4 12.5364 8 7.74 8 0.0525 4 17.482 4 10.3982 8 4.3271 3 25.2239 8 9.8175 8 10.2569 5)
Average genome size in population (length): 89.002
Average program size in population (points): 90.002
Average percent parens in population: 0.011
Minimum age in population: 155.1792961997827
Maximum age in population: 160.0073433244052
Average age in population: 158.1163748035581
Median age in population: 158.1896483039961
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 6
Genome diversity (% unique Plush genomes):	 0.889
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 6
Syntactic diversity (% unique Push programs):	 0.889
Total error diversity:				 0.395
Error (vector) diversity:			 0.405
Behavioral diversity:				 0.407
--- Run Statistics ---
Number of program evaluations used so far: 113000
Number of point (instruction) evaluations so far: 188749865
--- Timings ---
Current time: 1529615332649 milliseconds
Total Time:         438.6 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       171.4 seconds, 39.1%
Fitness Testing:    212.2 seconds, 48.4%
Report:              54.9 seconds, 12.5%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 112
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 113
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 113
;;******************************
;; -*- Number IO problem report - generation 113
Test total error for best: 64453.020200000035
Test mean error for best: 32.22651
;;------------------------------
Outputs of best individual on training cases:
Correct output: -116.076402553 | Program output: -41.0401600   
Correct output: 24.1400847456  | Program output: -10.07181     
Correct output: 69.833290954   | Program output: 20.0219241    
Correct output: 82.4958592801  | Program output: 94.015857281  
Correct output: 34.2385110874  | Program output: 81.02551287   
Correct output: -10.7358110665 | Program output: 47.048110545  
Correct output: 1.9700532093   | Program output: -11.050100    
Correct output: -44.7956976677 | Program output: 51.052140557  
Correct output: 68.5576547673  | Program output: 46.047103777  
Correct output: -69.2536523379 | Program output: -54.0192809   
Correct output: -14.2275745396 | Program output: 41.04274047   
Correct output: -171.9767905886 | Program output: -85.0767056   
Correct output: -32.1846093265 | Program output: 1.0265        
Correct output: 66.9812146721  | Program output: 73.074405151  
Correct output: 100.0259781081 | Program output: 34.03542841   
Correct output: -90.2595503995 | Program output: -34.0791089   
Correct output: -82.4635707651 | Program output: -96.0659025   
Correct output: -8.7492896214  | Program output: -50.0312401   
Correct output: -82.1329348831 | Program output: -82.0796561   
Correct output: 24.5261129925  | Program output: -73.0405184   
Correct output: -11.4065589042 | Program output: -53.0602704   
Correct output: 10.3282540908  | Program output: -77.045776    
Correct output: -51.7760580299 | Program output: -78.0755929   
Correct output: 51.8185003253  | Program output: 74.075421801  
Correct output: 110.7431489201 | Program output: 20.0219241    
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_yankdup} {:instruction float_cos} {:instruction float_mult} {:instruction float_yankdup} {:instruction float_pop} {:instruction float_mult} {:instruction in2} {:instruction integer_inc} {:instruction float_yankdup} {:instruction float_yank} {:instruction float_mult} {:instruction 28} {:instruction integer_add} {:instruction integer_min} {:instruction integer_inc} {:instruction in2} {:instruction float_tan} {:instruction float_rot} {:instruction integer_mult} {:instruction float_mult} {:instruction float_pop} {:instruction float_mult} {:instruction integer_inc} {:instruction in2} {:instruction float_max} {:instruction integer_dup} {:instruction print_float} {:instruction integer_mult} {:instruction float_mult} {:instruction float_pop} {:instruction float_mult} {:instruction float_mult} {:instruction in2} {:instruction float_sub} {:instruction float_sub} {:instruction float_mult} {:instruction integer_dup} {:instruction integer_dup} {:instruction float_add} {:instruction integer_dec} {:instruction integer_shove} {:instruction float_mult} {:instruction float_swap} {:instruction float_mult} {:instruction integer_mult} {:instruction integer_dup} {:instruction float_add} {:instruction integer_dup} {:instruction float_add} {:instruction integer_dec} {:instruction integer_mult} {:instruction float_mult} {:instruction float_yankdup} {:instruction float_tan} {:instruction in2} {:instruction float_max} {:instruction float_pop} {:instruction float_mod} {:instruction in2} {:instruction float_yankdup} {:instruction integer_dup} {:instruction integer_pop} {:instruction integer_dec} {:instruction float_cos} {:instruction float_frominteger} {:instruction integer_swap} {:instruction integer_mod} {:instruction integer_dup} {:instruction 80} {:instruction integer_mod} {:instruction integer_dup} {:instruction print_float} {:instruction float_frominteger} {:instruction print_integer} {:instruction integer_sub} {:instruction integer_inc} {:instruction integer_max} {:instruction integer_stackdepth} {:instruction float_shove} {:instruction float_mult} {:instruction integer_max} {:instruction tagged_229} {:instruction float_inc} {:instruction integer_mult} {:instruction integer_mult} {:instruction print_integer} {:instruction integer_swap})
Best program: (float_yankdup float_cos float_mult float_yankdup float_pop float_mult in2 integer_inc float_yankdup float_yank float_mult 28 integer_add integer_min integer_inc in2 float_tan float_rot integer_mult float_mult float_pop float_mult integer_inc in2 float_max integer_dup print_float integer_mult float_mult float_pop float_mult float_mult in2 float_sub float_sub float_mult integer_dup integer_dup float_add integer_dec integer_shove float_mult float_swap float_mult integer_mult integer_dup float_add integer_dup float_add integer_dec integer_mult float_mult float_yankdup float_tan in2 float_max float_pop float_mod in2 float_yankdup integer_dup integer_pop integer_dec float_cos float_frominteger integer_swap integer_mod integer_dup 80 integer_mod integer_dup print_float float_frominteger print_integer integer_sub integer_inc integer_max integer_stackdepth float_shove float_mult integer_max tagged_229 float_inc integer_mult integer_mult print_integer integer_swap)
Errors: [75.0362 8 34.2119 10 49.8114 9 11.52 6 46.787 8 57.7839 8 13.0202 9 95.8478 11 22.5106 9 15.2344 10 55.2703 10 86.9001 7 33.2111 9 6.0932 11 65.9905 9 56.1804 9 13.6023 8 41.282 10 0.0533 8 97.5666 12 41.6537 8 87.374 12 26.2995 8 22.2569 11 90.7212 8]
Total: 1374.2185000000002
Mean: 27.48437
Genome size: 87
Size: 88
Percent parens: 0.011
--- Population Statistics ---
Average total errors in population: 5286.9259986000025
Median total errors in population: 1389.7133500000002
Error averages by case: (257.9961146000009 8.835 329.0691830999982 10.513 150.16529780000124 9.738 121.09453290000049 8.58 147.6648116999993 9.367 160.39197539999978 9.935 316.85748160000185 9.372 194.1740291999986 11.91 129.4828884999989 9.919 214.71809929999804 10.736 158.1903860000009 10.737 272.2647105999996 9.182 83.08193319999997 9.848 115.09745840000113 11.31 167.87962590000166 10.067 240.72227120000204 10.002 213.67207559999983 9.227 234.50900860000255 10.543 203.04293709999973 8.972 279.3236926999991 12.07 235.3189879999982 9.212 271.21318070000245 12.135 223.5148531999983 9.4 129.2628171999983 11.153 186.27464610000024 9.18)
Error minima by case: (30.9314 6 9.0 4 9.176 5 3.4873 6 5.2385 7 9.7435 5 1.951 3 40.3493 5 10.4434 5 14.2264 7 13.2402 5 84.0 7 2.0 4 5.0932 8 21.0217 6 5.1145 6 2.6815 8 8.7517 8 0.0527 6 14.5462 7 11.4093 8 6.2825 7 24.2995 7 21.2569 8 10.2569 6)
Average genome size in population (length): 88.945
Average program size in population (points): 89.945
Average percent parens in population: 0.011
Minimum age in population: 156.1792961997827
Maximum age in population: 161.4926405640114
Average age in population: 159.4914418322799
Median age in population: 159.5224520113571
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 5
Genome diversity (% unique Plush genomes):	 0.873
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 5
Syntactic diversity (% unique Push programs):	 0.873
Total error diversity:				 0.386
Error (vector) diversity:			 0.395
Behavioral diversity:				 0.395
--- Run Statistics ---
Number of program evaluations used so far: 114000
Number of point (instruction) evaluations so far: 190973490
--- Timings ---
Current time: 1529615337094 milliseconds
Total Time:         443.1 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       173.1 seconds, 39.1%
Fitness Testing:    214.4 seconds, 48.4%
Report:              55.5 seconds, 12.5%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 113
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 114
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 114
;;******************************
;; -*- Number IO problem report - generation 114
Test total error for best: 64453.020200000035
Test mean error for best: 32.22651
;;------------------------------
Outputs of best individual on training cases:
Correct output: -116.076402553 | Program output: -41.0401600   
Correct output: 24.1400847456  | Program output: -10.07181     
Correct output: 69.833290954   | Program output: 20.0219241    
Correct output: 82.4958592801  | Program output: 94.015857281  
Correct output: 34.2385110874  | Program output: 81.02551287   
Correct output: -10.7358110665 | Program output: 47.048110545  
Correct output: 1.9700532093   | Program output: -11.050100    
Correct output: -44.7956976677 | Program output: 51.052140557  
Correct output: 68.5576547673  | Program output: 46.047103777  
Correct output: -69.2536523379 | Program output: -54.0192809   
Correct output: -14.2275745396 | Program output: 41.04274047   
Correct output: -171.9767905886 | Program output: -85.0767056   
Correct output: -32.1846093265 | Program output: 1.0265        
Correct output: 66.9812146721  | Program output: 73.074405151  
Correct output: 100.0259781081 | Program output: 34.03542841   
Correct output: -90.2595503995 | Program output: -34.0791089   
Correct output: -82.4635707651 | Program output: -96.0659025   
Correct output: -8.7492896214  | Program output: -50.0312401   
Correct output: -82.1329348831 | Program output: -82.0796561   
Correct output: 24.5261129925  | Program output: -73.0405184   
Correct output: -11.4065589042 | Program output: -53.0602704   
Correct output: 10.3282540908  | Program output: -77.045776    
Correct output: -51.7760580299 | Program output: -78.0755929   
Correct output: 51.8185003253  | Program output: 74.075421801  
Correct output: 110.7431489201 | Program output: 20.0219241    
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_yankdup} {:instruction float_cos} {:instruction float_mult} {:instruction in2} {:instruction integer_inc} {:instruction float_yankdup} {:instruction float_yank} {:instruction float_mult} {:instruction 28} {:instruction integer_add} {:instruction float_pop} {:instruction integer_inc} {:instruction in2} {:instruction float_max} {:instruction float_rot} {:instruction print_float} {:instruction integer_mult} {:instruction float_mult} {:instruction float_pop} {:instruction float_mult} {:instruction integer_inc} {:instruction in2} {:instruction float_max} {:instruction integer_dup} {:instruction print_float} {:instruction integer_mult} {:instruction float_mult} {:instruction float_pop} {:instruction float_mult} {:instruction float_mult} {:instruction in2} {:instruction float_max} {:instruction float_sub} {:instruction float_mult} {:instruction float_mult} {:instruction integer_dup} {:instruction integer_dup} {:instruction float_add} {:instruction integer_dec} {:instruction integer_shove} {:instruction float_mult} {:instruction float_add} {:instruction float_add} {:instruction float_rot} {:instruction integer_mult} {:instruction integer_dup} {:instruction float_add} {:instruction integer_dup} {:instruction float_add} {:instruction integer_dec} {:instruction integer_mult} {:instruction float_yankdup} {:instruction float_tan} {:instruction in2} {:instruction float_max} {:instruction float_pop} {:instruction float_mod} {:instruction in2} {:instruction float_yankdup} {:instruction integer_dup} {:instruction integer_pop} {:instruction integer_dec} {:instruction float_cos} {:instruction float_frominteger} {:instruction integer_swap} {:instruction integer_mod} {:instruction integer_dup} {:instruction 80} {:instruction integer_mod} {:instruction integer_dup} {:instruction print_float} {:instruction float_frominteger} {:instruction print_integer} {:instruction integer_sub} {:instruction integer_inc} {:instruction integer_max} {:instruction integer_stackdepth} {:instruction float_shove} {:instruction float_mult} {:instruction integer_max} {:instruction float_dup} {:instruction float_inc} {:instruction integer_mult} {:instruction integer_shove} {:instruction print_integer} {:instruction integer_swap})
Best program: (float_yankdup float_cos float_mult in2 integer_inc float_yankdup float_yank float_mult 28 integer_add float_pop integer_inc in2 float_max float_rot print_float integer_mult float_mult float_pop float_mult integer_inc in2 float_max integer_dup print_float integer_mult float_mult float_pop float_mult float_mult in2 float_max float_sub float_mult float_mult integer_dup integer_dup float_add integer_dec integer_shove float_mult float_add float_add float_rot integer_mult integer_dup float_add integer_dup float_add integer_dec integer_mult float_yankdup float_tan in2 float_max float_pop float_mod in2 float_yankdup integer_dup integer_pop integer_dec float_cos float_frominteger integer_swap integer_mod integer_dup 80 integer_mod integer_dup print_float float_frominteger print_integer integer_sub integer_inc integer_max integer_stackdepth float_shove float_mult integer_max float_dup float_inc integer_mult integer_shove print_integer integer_swap)
Errors: [75.0362 8 34.2119 10 49.8114 9 11.52 6 46.787 8 57.7839 8 13.0202 9 95.8478 11 22.5106 9 15.2344 10 55.2703 10 86.9001 7 33.2111 9 6.0932 11 65.9905 9 56.1804 9 13.6023 8 41.282 10 0.0533 8 97.5666 12 41.6537 8 87.374 12 26.2995 8 22.2569 11 90.7212 8]
Total: 1374.2185000000002
Mean: 27.48437
Genome size: 86
Size: 87
Percent parens: 0.011
--- Population Statistics ---
Average total errors in population: 5128.323572700001
Median total errors in population: 1390.2241000000001
Error averages by case: (254.0433240000011 8.805 321.08376449999827 10.517 144.51224340000127 9.695 113.17625990000026 8.566 140.28560529999882 9.348 153.71914439999983 9.901 308.33705470000217 9.325 187.82200409999845 11.886 122.53080779999918 9.926 208.4575276999979 10.771 151.51492320000096 10.736 266.6191766999999 9.184 79.55047280000007 9.826 108.12904720000111 11.241 161.2759363000016 10.033 237.24024190000185 10.016 207.51671399999998 9.267 227.99365150000241 10.537 196.84984569999972 8.868 272.7048161999994 12.065 228.63666769999827 9.219 264.61347290000253 12.078 216.93587269999855 9.436 122.40629219999823 11.102 180.9147059000004 9.106)
Error minima by case: (35.0764 7 6.8599 4 9.1667 6 2.4873 5 32.2094 7 9.7347 8 1.9681 4 14.3057 9 8.4423 6 14.1702 8 13.2202 8 2.9768 7 1.6946 8 5.0228 8 20.0217 7 23.2596 8 12.5364 7 7.7469 8 0.0329 6 6.4739 6 10.4039 7 6.3079 6 21.286 8 21.1857 9 21.0 7)
Average genome size in population (length): 89.415
Average program size in population (points): 90.415
Average percent parens in population: 0.011
Minimum age in population: 158.6062944850587
Maximum age in population: 162.6671713000536
Average age in population: 160.8204549837524
Median age in population: 160.8552903326868
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 9
Genome diversity (% unique Plush genomes):	 0.884
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 9
Syntactic diversity (% unique Push programs):	 0.884
Total error diversity:				 0.389
Error (vector) diversity:			 0.401
Behavioral diversity:				 0.404
--- Run Statistics ---
Number of program evaluations used so far: 115000
Number of point (instruction) evaluations so far: 193208865
--- Timings ---
Current time: 1529615341552 milliseconds
Total Time:         447.6 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       174.6 seconds, 39.0%
Fitness Testing:    216.8 seconds, 48.4%
Report:              56.0 seconds, 12.5%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 114
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 115
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 115
;;******************************
;; -*- Number IO problem report - generation 115
Test total error for best: 64453.020200000035
Test mean error for best: 32.22651
;;------------------------------
Outputs of best individual on training cases:
Correct output: -116.076402553 | Program output: -41.0401600   
Correct output: 24.1400847456  | Program output: -10.07181     
Correct output: 69.833290954   | Program output: 20.0219241    
Correct output: 82.4958592801  | Program output: 94.015857281  
Correct output: 34.2385110874  | Program output: 81.02551287   
Correct output: -10.7358110665 | Program output: 47.048110545  
Correct output: 1.9700532093   | Program output: -11.050100    
Correct output: -44.7956976677 | Program output: 51.052140557  
Correct output: 68.5576547673  | Program output: 46.047103777  
Correct output: -69.2536523379 | Program output: -54.0192809   
Correct output: -14.2275745396 | Program output: 41.04274047   
Correct output: -171.9767905886 | Program output: -85.0767056   
Correct output: -32.1846093265 | Program output: 1.0265        
Correct output: 66.9812146721  | Program output: 73.074405151  
Correct output: 100.0259781081 | Program output: 34.03542841   
Correct output: -90.2595503995 | Program output: -34.0791089   
Correct output: -82.4635707651 | Program output: -96.0659025   
Correct output: -8.7492896214  | Program output: -50.0312401   
Correct output: -82.1329348831 | Program output: -82.0796561   
Correct output: 24.5261129925  | Program output: -73.0405184   
Correct output: -11.4065589042 | Program output: -53.0602704   
Correct output: 10.3282540908  | Program output: -77.045776    
Correct output: -51.7760580299 | Program output: -78.0755929   
Correct output: 51.8185003253  | Program output: 74.075421801  
Correct output: 110.7431489201 | Program output: 20.0219241    
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_yankdup} {:instruction float_pop} {:instruction float_mult} {:instruction float_yankdup} {:instruction float_pop} {:instruction float_mult} {:instruction in2} {:instruction integer_inc} {:instruction float_yankdup} {:instruction float_yank} {:instruction float_mult} {:instruction 28} {:instruction integer_add} {:instruction float_pop} {:instruction integer_inc} {:instruction in2} {:instruction float_max} {:instruction float_max} {:instruction float_rot} {:instruction print_float} {:instruction integer_mult} {:instruction float_mult} {:instruction float_pop} {:instruction float_inc} {:instruction print_float} {:instruction integer_mult} {:instruction float_mult} {:instruction float_pop} {:instruction float_mult} {:instruction integer_inc} {:instruction in2} {:instruction float_max} {:instruction integer_dup} {:instruction print_float} {:instruction integer_mult} {:instruction float_mult} {:instruction float_pop} {:instruction float_mult} {:instruction float_mult} {:instruction in2} {:instruction float_sub} {:instruction float_sub} {:instruction float_mult} {:instruction integer_dup} {:instruction integer_dup} {:instruction float_add} {:instruction integer_dec} {:instruction integer_shove} {:instruction float_mult} {:instruction float_add} {:instruction float_mult} {:instruction integer_mult} {:instruction integer_dup} {:instruction float_add} {:instruction integer_dup} {:instruction float_add} {:instruction integer_dec} {:instruction integer_mult} {:instruction float_dup} {:instruction float_yankdup} {:instruction float_tan} {:instruction in2} {:instruction float_max} {:instruction float_pop} {:instruction float_mod} {:instruction in2} {:instruction float_yankdup} {:instruction integer_dup} {:instruction integer_pop} {:instruction integer_dec} {:instruction float_cos} {:instruction float_frominteger} {:instruction integer_swap} {:instruction integer_mod} {:instruction integer_dup} {:instruction 80} {:instruction integer_mod} {:instruction integer_dup} {:instruction print_float} {:instruction float_frominteger} {:instruction print_integer} {:instruction integer_sub} {:instruction integer_inc} {:instruction integer_max} {:instruction integer_stackdepth} {:instruction float_shove} {:instruction float_mult} {:instruction integer_max} {:instruction float_dup} {:instruction float_inc} {:instruction integer_mult} {:instruction integer_shove} {:instruction print_integer} {:instruction float_sub})
Best program: (float_yankdup float_pop float_mult float_yankdup float_pop float_mult in2 integer_inc float_yankdup float_yank float_mult 28 integer_add float_pop integer_inc in2 float_max float_max float_rot print_float integer_mult float_mult float_pop float_inc print_float integer_mult float_mult float_pop float_mult integer_inc in2 float_max integer_dup print_float integer_mult float_mult float_pop float_mult float_mult in2 float_sub float_sub float_mult integer_dup integer_dup float_add integer_dec integer_shove float_mult float_add float_mult integer_mult integer_dup float_add integer_dup float_add integer_dec integer_mult float_dup float_yankdup float_tan in2 float_max float_pop float_mod in2 float_yankdup integer_dup integer_pop integer_dec float_cos float_frominteger integer_swap integer_mod integer_dup 80 integer_mod integer_dup print_float float_frominteger print_integer integer_sub integer_inc integer_max integer_stackdepth float_shove float_mult integer_max float_dup float_inc integer_mult integer_shove print_integer float_sub)
Errors: [75.0362 8 34.2119 10 49.8114 9 11.52 6 46.787 8 57.7839 8 13.0202 9 95.8478 11 22.5106 9 15.2344 10 55.2703 10 86.9001 7 33.2111 9 6.0932 11 65.9905 9 56.1804 9 13.6023 8 41.282 10 0.0533 8 97.5666 12 41.6537 8 87.374 12 26.2995 8 22.2569 11 90.7212 8]
Total: 1374.2185000000002
Mean: 27.48437
Genome size: 94
Size: 95
Percent parens: 0.011
--- Population Statistics ---
Average total errors in population: 4915.353399799997
Median total errors in population: 1392.2182000000003
Error averages by case: (240.37706220000103 8.803 314.7978407999982 10.506 139.05769220000118 9.709 108.01414550000025 8.556 135.81187279999847 9.346 148.1409533999993 9.882 301.33232660000107 9.344 182.45154279999898 11.845 116.5424613999991 9.91 195.40333029999866 10.746 145.76435340000054 10.674 253.64490999999936 9.174 84.60977919999999 9.87 101.896229200001 11.262 155.6462174000009 10.02 224.7482043000015 9.974 194.49020459999971 9.256 214.43988500000216 10.534 182.56074229999967 8.916 260.0550729999988 12.049 215.25312599999853 9.192 251.75305110000193 12.058 204.27652399999855 9.427 117.26168609999866 11.057 175.7571862000002 9.157)
Error minima by case: (40.0 7 3.1401 7 10.169 6 2.4873 6 30.7615 8 9.7435 6 0.9701 6 44.7979 6 11.4434 6 14.2344 8 13.2402 6 84.0 7 2.0 4 5.0932 8 20.018 7 33.0 9 12.5364 8 8.7517 8 0.0329 6 0.5018 7 10.4883 8 5.6717 8 4.7761 8 15.8185 8 21.0 7)
Average genome size in population (length): 89.048
Average program size in population (points): 90.048
Average percent parens in population: 0.011
Minimum age in population: 159.6206725491215
Maximum age in population: 164.3209846135858
Average age in population: 162.1521115457165
Median age in population: 162.1671231412741
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 7
Genome diversity (% unique Plush genomes):	 0.872
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 7
Syntactic diversity (% unique Push programs):	 0.872
Total error diversity:				 0.365
Error (vector) diversity:			 0.375
Behavioral diversity:				 0.375
--- Run Statistics ---
Number of program evaluations used so far: 116000
Number of point (instruction) evaluations so far: 195435090
--- Timings ---
Current time: 1529615346037 milliseconds
Total Time:         451.9 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       176.0 seconds, 39.0%
Fitness Testing:    219.2 seconds, 48.5%
Report:              56.5 seconds, 12.5%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 115
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 116
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 116
;;******************************
;; -*- Number IO problem report - generation 116
Test total error for best: 64453.020200000035
Test mean error for best: 32.22651
;;------------------------------
Outputs of best individual on training cases:
Correct output: -116.076402553 | Program output: -41.0401600   
Correct output: 24.1400847456  | Program output: -10.07181     
Correct output: 69.833290954   | Program output: 20.0219241    
Correct output: 82.4958592801  | Program output: 94.015857281  
Correct output: 34.2385110874  | Program output: 81.02551287   
Correct output: -10.7358110665 | Program output: 47.048110545  
Correct output: 1.9700532093   | Program output: -11.050100    
Correct output: -44.7956976677 | Program output: 51.052140557  
Correct output: 68.5576547673  | Program output: 46.047103777  
Correct output: -69.2536523379 | Program output: -54.0192809   
Correct output: -14.2275745396 | Program output: 41.04274047   
Correct output: -171.9767905886 | Program output: -85.0767056   
Correct output: -32.1846093265 | Program output: 1.0265        
Correct output: 66.9812146721  | Program output: 73.074405151  
Correct output: 100.0259781081 | Program output: 34.03542841   
Correct output: -90.2595503995 | Program output: -34.0791089   
Correct output: -82.4635707651 | Program output: -96.0659025   
Correct output: -8.7492896214  | Program output: -50.0312401   
Correct output: -82.1329348831 | Program output: -82.0796561   
Correct output: 24.5261129925  | Program output: -73.0405184   
Correct output: -11.4065589042 | Program output: -53.0602704   
Correct output: 10.3282540908  | Program output: -77.045776    
Correct output: -51.7760580299 | Program output: -78.0755929   
Correct output: 51.8185003253  | Program output: 74.075421801  
Correct output: 110.7431489201 | Program output: 20.0219241    
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_yankdup} {:instruction float_cos} {:instruction float_mult} {:instruction float_yankdup} {:instruction float_sin} {:instruction float_yankdup} {:instruction float_pop} {:instruction in2} {:instruction integer_inc} {:instruction float_yankdup} {:instruction float_yank} {:instruction float_mult} {:instruction 28} {:instruction integer_add} {:instruction float_inc} {:instruction integer_inc} {:instruction in2} {:instruction float_max} {:instruction float_rot} {:instruction print_float} {:instruction integer_mult} {:instruction float_mult} {:instruction float_pop} {:instruction float_mult} {:instruction integer_inc} {:instruction in2} {:instruction float_max} {:instruction integer_dup} {:instruction print_float} {:instruction integer_mult} {:instruction float_mult} {:instruction float_pop} {:instruction float_mult} {:instruction float_mult} {:instruction in2} {:instruction float_sub} {:instruction float_sub} {:instruction float_mult} {:instruction integer_dup} {:instruction integer_dup} {:instruction print_float} {:instruction integer_dec} {:instruction integer_shove} {:instruction float_pop} {:instruction float_add} {:instruction float_mult} {:instruction integer_mult} {:instruction integer_dup} {:instruction float_add} {:instruction integer_dup} {:instruction float_add} {:instruction integer_dec} {:instruction integer_mult} {:instruction float_mult} {:instruction float_yankdup} {:instruction float_tan} {:instruction in2} {:instruction float_max} {:instruction float_pop} {:instruction float_mod} {:instruction in2} {:instruction float_yankdup} {:instruction integer_dup} {:instruction integer_pop} {:instruction integer_dec} {:instruction float_cos} {:instruction float_frominteger} {:instruction integer_swap} {:instruction integer_mod} {:instruction integer_dup} {:instruction 80} {:instruction integer_mod} {:instruction integer_dup} {:instruction print_float} {:instruction float_frominteger} {:instruction print_integer} {:instruction integer_sub} {:instruction integer_inc} {:instruction integer_max} {:instruction integer_stackdepth} {:instruction float_shove} {:instruction float_mult} {:instruction integer_max} {:instruction float_dup} {:instruction float_inc} {:instruction integer_mult} {:instruction integer_mult} {:instruction integer_shove} {:instruction print_integer} {:instruction integer_swap})
Best program: (float_yankdup float_cos float_mult float_yankdup float_sin float_yankdup float_pop in2 integer_inc float_yankdup float_yank float_mult 28 integer_add float_inc integer_inc in2 float_max float_rot print_float integer_mult float_mult float_pop float_mult integer_inc in2 float_max integer_dup print_float integer_mult float_mult float_pop float_mult float_mult in2 float_sub float_sub float_mult integer_dup integer_dup print_float integer_dec integer_shove float_pop float_add float_mult integer_mult integer_dup float_add integer_dup float_add integer_dec integer_mult float_mult float_yankdup float_tan in2 float_max float_pop float_mod in2 float_yankdup integer_dup integer_pop integer_dec float_cos float_frominteger integer_swap integer_mod integer_dup 80 integer_mod integer_dup print_float float_frominteger print_integer integer_sub integer_inc integer_max integer_stackdepth float_shove float_mult integer_max float_dup float_inc integer_mult integer_mult integer_shove print_integer integer_swap)
Errors: [75.0362 8 34.2119 10 49.8114 9 11.52 6 46.787 8 57.7839 8 13.0202 9 95.8478 11 22.5106 9 15.2344 10 55.2703 10 86.9001 7 33.2111 9 6.0932 11 65.9905 9 56.1804 9 13.6023 8 41.282 10 0.0533 8 97.5666 12 41.6537 8 87.374 12 26.2995 8 22.2569 11 90.7212 8]
Total: 1374.2185000000002
Mean: 27.48437
Genome size: 90
Size: 91
Percent parens: 0.011
--- Population Statistics ---
Average total errors in population: 5159.9648334
Median total errors in population: 1395.2513000000001
Error averages by case: (247.99405010000095 8.836 336.4462840999981 10.489 151.09932110000128 9.773 119.38262250000037 8.739 147.64511279999905 9.511 159.61264569999966 10.036 321.84984230000214 9.339 193.43255709999917 11.965 128.54927569999896 10.003 201.23121769999813 10.746 157.4089274000007 10.795 258.81807849999956 9.258 93.40742520000002 9.838 114.33221070000104 11.369 166.77626540000122 10.111 231.0876889000019 9.993 199.25824329999995 9.31 221.1205012000022 10.569 188.4517218999998 8.959 265.5235505999988 12.08 221.77041899999847 9.286 257.3301421000025 12.091 208.99491449999843 9.467 128.52160369999837 11.187 186.9602119000002 9.21)
Error minima by case: (40.0 6 9.0 4 4.1667 5 3.4873 5 32.2385 8 9.6877 5 0.9701 3 43.7436 5 5.4423 5 13.2345 7 13.1848 5 84.0 6 2.0 4 4.0935 8 21.0217 6 33.0 6 11.5364 8 7.718 8 0.0488 6 14.5144 7 10.3463 7 6.3283 7 24.2239 7 20.2572 7 10.2569 6)
Average genome size in population (length): 88.836
Average program size in population (points): 89.836
Average percent parens in population: 0.011
Minimum age in population: 161.1619009706304
Maximum age in population: 165.6857236467796
Average age in population: 163.5340798671822
Median age in population: 163.5650728103873
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 8
Genome diversity (% unique Plush genomes):	 0.883
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 8
Syntactic diversity (% unique Push programs):	 0.883
Total error diversity:				 0.375
Error (vector) diversity:			 0.389
Behavioral diversity:				 0.39
--- Run Statistics ---
Number of program evaluations used so far: 117000
Number of point (instruction) evaluations so far: 197655990
--- Timings ---
Current time: 1529615350399 milliseconds
Total Time:         456.4 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       177.6 seconds, 38.9%
Fitness Testing:    221.5 seconds, 48.5%
Report:              57.2 seconds, 12.5%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 116
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 117
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 117
;;******************************
;; -*- Number IO problem report - generation 117
Test total error for best: 64453.020200000035
Test mean error for best: 32.22651
;;------------------------------
Outputs of best individual on training cases:
Correct output: -116.076402553 | Program output: -41.0401600   
Correct output: 24.1400847456  | Program output: -10.07181     
Correct output: 69.833290954   | Program output: 20.0219241    
Correct output: 82.4958592801  | Program output: 94.015857281  
Correct output: 34.2385110874  | Program output: 81.02551287   
Correct output: -10.7358110665 | Program output: 47.048110545  
Correct output: 1.9700532093   | Program output: -11.050100    
Correct output: -44.7956976677 | Program output: 51.052140557  
Correct output: 68.5576547673  | Program output: 46.047103777  
Correct output: -69.2536523379 | Program output: -54.0192809   
Correct output: -14.2275745396 | Program output: 41.04274047   
Correct output: -171.9767905886 | Program output: -85.0767056   
Correct output: -32.1846093265 | Program output: 1.0265        
Correct output: 66.9812146721  | Program output: 73.074405151  
Correct output: 100.0259781081 | Program output: 34.03542841   
Correct output: -90.2595503995 | Program output: -34.0791089   
Correct output: -82.4635707651 | Program output: -96.0659025   
Correct output: -8.7492896214  | Program output: -50.0312401   
Correct output: -82.1329348831 | Program output: -82.0796561   
Correct output: 24.5261129925  | Program output: -73.0405184   
Correct output: -11.4065589042 | Program output: -53.0602704   
Correct output: 10.3282540908  | Program output: -77.045776    
Correct output: -51.7760580299 | Program output: -78.0755929   
Correct output: 51.8185003253  | Program output: 74.075421801  
Correct output: 110.7431489201 | Program output: 20.0219241    
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_yankdup} {:instruction float_cos} {:instruction float_mult} {:instruction float_yankdup} {:instruction float_sin} {:instruction in2} {:instruction integer_inc} {:instruction float_yankdup} {:instruction float_yank} {:instruction float_mult} {:instruction 28} {:instruction integer_add} {:instruction float_pop} {:instruction integer_inc} {:instruction in2} {:instruction float_max} {:instruction float_rot} {:instruction float_dec} {:instruction integer_mult} {:instruction integer_shove} {:instruction float_pop} {:instruction float_mult} {:instruction integer_inc} {:instruction in2} {:instruction print_float} {:instruction integer_dup} {:instruction print_float} {:instruction integer_mult} {:instruction float_mult} {:instruction float_pop} {:instruction float_mult} {:instruction float_mult} {:instruction in2} {:instruction float_sub} {:instruction float_sub} {:instruction float_mult} {:instruction integer_dup} {:instruction integer_dup} {:instruction float_add} {:instruction integer_dec} {:instruction integer_shove} {:instruction float_mult} {:instruction float_rot} {:instruction integer_mult} {:instruction integer_dup} {:instruction float_add} {:instruction integer_dup} {:instruction float_add} {:instruction integer_dec} {:instruction integer_mult} {:instruction float_mult} {:instruction float_yankdup} {:instruction float_tan} {:instruction in2} {:instruction float_max} {:instruction float_pop} {:instruction float_mod} {:instruction in2} {:instruction float_yankdup} {:instruction integer_dup} {:instruction integer_pop} {:instruction integer_dec} {:instruction float_cos} {:instruction float_frominteger} {:instruction integer_swap} {:instruction integer_mod} {:instruction integer_dup} {:instruction 80} {:instruction integer_mod} {:instruction integer_dup} {:instruction print_float} {:instruction float_frominteger} {:instruction print_integer} {:instruction integer_sub} {:instruction integer_inc} {:instruction integer_max} {:instruction integer_stackdepth} {:instruction float_shove} {:instruction float_div} {:instruction integer_max} {:instruction float_dup} {:instruction float_inc} {:instruction integer_mult} {:instruction integer_shove} {:instruction print_integer} {:instruction integer_swap})
Best program: (float_yankdup float_cos float_mult float_yankdup float_sin in2 integer_inc float_yankdup float_yank float_mult 28 integer_add float_pop integer_inc in2 float_max float_rot float_dec integer_mult integer_shove float_pop float_mult integer_inc in2 print_float integer_dup print_float integer_mult float_mult float_pop float_mult float_mult in2 float_sub float_sub float_mult integer_dup integer_dup float_add integer_dec integer_shove float_mult float_rot integer_mult integer_dup float_add integer_dup float_add integer_dec integer_mult float_mult float_yankdup float_tan in2 float_max float_pop float_mod in2 float_yankdup integer_dup integer_pop integer_dec float_cos float_frominteger integer_swap integer_mod integer_dup 80 integer_mod integer_dup print_float float_frominteger print_integer integer_sub integer_inc integer_max integer_stackdepth float_shove float_div integer_max float_dup float_inc integer_mult integer_shove print_integer integer_swap)
Errors: [75.0362 8 34.2119 10 49.8114 9 11.52 6 46.787 8 57.7839 8 13.0202 9 95.8478 11 22.5106 9 15.2344 10 55.2703 10 86.9001 7 33.2111 9 6.0932 11 65.9905 9 56.1804 9 13.6023 8 41.282 10 0.0533 8 97.5666 12 41.6537 8 87.374 12 26.2995 8 22.2569 11 90.7212 8]
Total: 1374.2185000000002
Mean: 27.48437
Genome size: 86
Size: 87
Percent parens: 0.011
--- Population Statistics ---
Average total errors in population: 4990.665861399999
Median total errors in population: 1390.7302000000002
Error averages by case: (242.94957030000106 8.818 306.92730189999793 10.519 146.17455780000134 9.785 115.13140020000034 8.627 143.56321379999875 9.463 155.7824299999997 9.969 293.2326245000007 9.372 189.77176739999902 11.96 124.45206749999879 10.005 195.71360689999835 10.786 153.60282920000085 10.793 254.82536119999926 9.208 84.23050930000008 9.847 110.11656270000098 11.377 162.9387574000011 10.096 225.785588400002 10.006 194.69597379999965 9.327 215.57074610000242 10.606 183.84413409999962 8.991 260.03269429999875 12.11 216.25575509999823 9.279 251.83466730000248 12.101 203.5738843999984 9.473 124.35305719999829 11.232 182.33280060000033 9.224)
Error minima by case: (40.0 7 20.0683 6 7.6219 7 2.4947 6 4.2385 7 9.7435 8 1.9656 6 45.5379 8 6.3463 8 14.2344 7 13.2402 8 84.0 7 2.0 4 4.7699 8 20.0237 7 33.0 7 12.5364 8 9.0212 8 0.0527 6 15.5462 7 10.4883 8 6.2825 7 25.2239 7 10.3929 9 10.2569 8)
Average genome size in population (length): 88.882
Average program size in population (points): 89.882
Average percent parens in population: 0.011
Minimum age in population: 162.3568110496654
Maximum age in population: 167.038732826113
Average age in population: 164.8469358818325
Median age in population: 164.8495040254978
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 8
Genome diversity (% unique Plush genomes):	 0.861
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 8
Syntactic diversity (% unique Push programs):	 0.861
Total error diversity:				 0.38
Error (vector) diversity:			 0.394
Behavioral diversity:				 0.396
--- Run Statistics ---
Number of program evaluations used so far: 118000
Number of point (instruction) evaluations so far: 199878090
--- Timings ---
Current time: 1529615354972 milliseconds
Total Time:         460.8 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       179.2 seconds, 38.9%
Fitness Testing:    223.8 seconds, 48.6%
Report:              57.7 seconds, 12.5%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 117
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 118
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 118
;;******************************
;; -*- Number IO problem report - generation 118
Test total error for best: 59655.74330000003
Test mean error for best: 29.82787
;;------------------------------
Outputs of best individual on training cases:
Correct output: -116.076402553 | Program output: -41.0401600   
Correct output: 24.1400847456  | Program output: -10.07181     
Correct output: 69.833290954   | Program output: 20.0219241    
Correct output: 82.4958592801  | Program output: 94.015857281  
Correct output: 34.2385110874  | Program output: 81.02551287   
Correct output: -10.7358110665 | Program output: 47.048110545  
Correct output: 1.9700532093   | Program output: -11.050100    
Correct output: -44.7956976677 | Program output: 51.052140557  
Correct output: 68.5576547673  | Program output: 46.047103777  
Correct output: -69.2536523379 | Program output: -54.0192809   
Correct output: -14.2275745396 | Program output: 41.04274047   
Correct output: -171.9767905886 | Program output: -85.0767056   
Correct output: -32.1846093265 | Program output: 1.0265        
Correct output: 66.9812146721  | Program output: 73.074405151  
Correct output: 100.0259781081 | Program output: 34.03542841   
Correct output: -90.2595503995 | Program output: -34.0791089   
Correct output: -82.4635707651 | Program output: -96.0659025   
Correct output: -8.7492896214  | Program output: -50.0312401   
Correct output: -82.1329348831 | Program output: -82.0796561   
Correct output: 24.5261129925  | Program output: -73.0405184   
Correct output: -11.4065589042 | Program output: -53.0602704   
Correct output: 10.3282540908  | Program output: -77.045776    
Correct output: -51.7760580299 | Program output: -78.0755929   
Correct output: 51.8185003253  | Program output: 74.075421801  
Correct output: 110.7431489201 | Program output: 20.0219241    
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_yankdup} {:instruction float_cos} {:instruction float_mult} {:instruction float_yankdup} {:instruction float_pop} {:instruction float_mult} {:instruction in2} {:instruction integer_inc} {:instruction float_yankdup} {:instruction float_yank} {:instruction float_mult} {:instruction 28} {:instruction integer_add} {:instruction float_pop} {:instruction integer_inc} {:instruction in2} {:instruction float_max} {:instruction float_rot} {:instruction print_float} {:instruction integer_mult} {:instruction float_mult} {:instruction float_pop} {:instruction float_mult} {:instruction integer_inc} {:instruction in2} {:instruction float_max} {:instruction integer_dup} {:instruction print_float} {:instruction integer_mult} {:instruction float_mult} {:instruction float_pop} {:instruction float_mult} {:instruction float_mult} {:instruction in2} {:instruction float_sub} {:instruction float_sub} {:instruction float_mult} {:instruction float_mult} {:instruction integer_dup} {:instruction integer_dup} {:instruction float_add} {:instruction integer_dec} {:instruction integer_shove} {:instruction float_mult} {:instruction float_add} {:instruction float_mult} {:instruction integer_mult} {:instruction integer_dup} {:instruction float_add} {:instruction integer_dup} {:instruction float_add} {:instruction integer_dec} {:instruction integer_mult} {:instruction float_mult} {:instruction float_tan} {:instruction in2} {:instruction float_max} {:instruction in2} {:instruction float_yankdup} {:instruction integer_dup} {:instruction integer_pop} {:instruction integer_dec} {:instruction float_cos} {:instruction float_frominteger} {:instruction integer_swap} {:instruction integer_mod} {:instruction integer_dup} {:instruction 80} {:instruction integer_mod} {:instruction integer_dup} {:instruction print_float} {:instruction float_frominteger} {:instruction print_integer} {:instruction integer_sub} {:instruction integer_inc} {:instruction integer_max} {:instruction integer_stackdepth} {:instruction integer_yank} {:instruction float_mult} {:instruction integer_max} {:instruction float_dup} {:instruction float_inc} {:instruction integer_mult} {:instruction integer_shove} {:instruction print_integer} {:instruction integer_swap})
Best program: (float_yankdup float_cos float_mult float_yankdup float_pop float_mult in2 integer_inc float_yankdup float_yank float_mult 28 integer_add float_pop integer_inc in2 float_max float_rot print_float integer_mult float_mult float_pop float_mult integer_inc in2 float_max integer_dup print_float integer_mult float_mult float_pop float_mult float_mult in2 float_sub float_sub float_mult float_mult integer_dup integer_dup float_add integer_dec integer_shove float_mult float_add float_mult integer_mult integer_dup float_add integer_dup float_add integer_dec integer_mult float_mult float_tan in2 float_max in2 float_yankdup integer_dup integer_pop integer_dec float_cos float_frominteger integer_swap integer_mod integer_dup 80 integer_mod integer_dup print_float float_frominteger print_integer integer_sub integer_inc integer_max integer_stackdepth integer_yank float_mult integer_max float_dup float_inc integer_mult integer_shove print_integer integer_swap)
Errors: [75.0362 8 34.2119 10 49.8114 9 11.52 6 46.787 8 57.7839 8 13.0202 9 95.8478 11 22.5106 9 15.2344 10 55.2703 10 86.9001 7 33.2111 9 6.0932 11 65.9905 9 56.1804 9 13.6023 8 41.282 10 0.0533 8 97.5666 12 41.6537 8 87.374 12 26.2995 8 22.2569 11 90.7212 8]
Total: 1374.2185000000002
Mean: 27.48437
Genome size: 86
Size: 87
Percent parens: 0.011
--- Population Statistics ---
Average total errors in population: 5131.628252699996
Median total errors in population: 1394.6909999999998
Error averages by case: (249.4953496000009 8.81 321.33893139999805 10.501 148.91377890000135 9.747 115.9815905000003 8.668 143.76763479999852 9.398 156.6521254999998 9.968 309.5329173000013 9.358 190.58974269999857 11.924 125.44580949999917 9.974 203.8800359999983 10.74 155.38004730000083 10.781 262.4576979999994 9.219 89.35753299999992 9.835 111.02618160000107 11.299 165.04926470000117 10.125 233.25631410000182 9.972 203.02237829999987 9.292 223.15689480000253 10.574 192.2691954999997 8.926 269.2739989999992 12.104 224.09043889999828 9.247 261.1043536000024 12.083 212.88129339999833 9.411 126.27309059999858 11.121 185.2016537000003 9.153)
Error minima by case: (40.0 7 9.0 5 10.1667 7 1.52 5 6.8037 7 9.6877 6 3.0202 5 27.0485 7 11.4423 7 2.5905 7 13.1848 7 84.0 6 2.0 5 5.021 8 15.9905 8 18.4154 7 10.6194 8 7.718 8 0.0527 6 15.4739 7 10.3463 7 6.3075 7 20.0681 7 10.7763 8 21.0 8)
Average genome size in population (length): 88.941
Average program size in population (points): 89.941
Average percent parens in population: 0.011
Minimum age in population: 163.3568110496654
Maximum age in population: 168.3844352617563
Average age in population: 166.1546276454171
Median age in population: 166.2132579235583
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 5
Genome diversity (% unique Plush genomes):	 0.893
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 5
Syntactic diversity (% unique Push programs):	 0.893
Total error diversity:				 0.381
Error (vector) diversity:			 0.393
Behavioral diversity:				 0.393
--- Run Statistics ---
Number of program evaluations used so far: 119000
Number of point (instruction) evaluations so far: 202101615
--- Timings ---
Current time: 1529615359490 milliseconds
Total Time:         465.4 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       180.7 seconds, 38.8%
Fitness Testing:    226.2 seconds, 48.6%
Report:              58.4 seconds, 12.6%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 118
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 119
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 119
;;******************************
;; -*- Number IO problem report - generation 119
Test total error for best: 59655.743300000046
Test mean error for best: 29.82787
;;------------------------------
Outputs of best individual on training cases:
Correct output: -116.076402553 | Program output: -41.0401600   
Correct output: 24.1400847456  | Program output: -10.07181     
Correct output: 69.833290954   | Program output: 20.0219241    
Correct output: 82.4958592801  | Program output: 94.015857281  
Correct output: 34.2385110874  | Program output: 81.02551287   
Correct output: -10.7358110665 | Program output: 47.048110545  
Correct output: 1.9700532093   | Program output: -11.050100    
Correct output: -44.7956976677 | Program output: 51.052140557  
Correct output: 68.5576547673  | Program output: 46.047103777  
Correct output: -69.2536523379 | Program output: -54.0192809   
Correct output: -14.2275745396 | Program output: 41.04274047   
Correct output: -171.9767905886 | Program output: -85.0767056   
Correct output: -32.1846093265 | Program output: 1.0265        
Correct output: 66.9812146721  | Program output: 73.074405151  
Correct output: 100.0259781081 | Program output: 34.03542841   
Correct output: -90.2595503995 | Program output: -34.0791089   
Correct output: -82.4635707651 | Program output: -96.0659025   
Correct output: -8.7492896214  | Program output: -50.0312401   
Correct output: -82.1329348831 | Program output: -82.0796561   
Correct output: 24.5261129925  | Program output: -73.0405184   
Correct output: -11.4065589042 | Program output: -53.0602704   
Correct output: 10.3282540908  | Program output: -77.045776    
Correct output: -51.7760580299 | Program output: -78.0755929   
Correct output: 51.8185003253  | Program output: 74.075421801  
Correct output: 110.7431489201 | Program output: 20.0219241    
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_yankdup} {:instruction float_cos} {:instruction float_mult} {:instruction float_yankdup} {:instruction float_sin} {:instruction float_yankdup} {:instruction float_pop} {:instruction in2} {:instruction integer_inc} {:instruction float_yankdup} {:instruction float_yank} {:instruction float_mult} {:instruction 28} {:instruction integer_add} {:instruction float_inc} {:instruction integer_inc} {:instruction in2} {:instruction float_max} {:instruction float_rot} {:instruction print_float} {:instruction integer_mult} {:instruction float_mult} {:instruction float_pop} {:instruction float_mult} {:instruction float_mult} {:instruction integer_inc} {:instruction in2} {:instruction float_max} {:instruction integer_dup} {:instruction print_float} {:instruction integer_mult} {:instruction float_mult} {:instruction float_pop} {:instruction float_mult} {:instruction float_mult} {:instruction in2} {:instruction float_sub} {:instruction float_sub} {:instruction float_mult} {:instruction integer_dup} {:instruction integer_dup} {:instruction float_add} {:instruction integer_dec} {:instruction integer_shove} {:instruction float_mult} {:instruction float_add} {:instruction float_mult} {:instruction integer_mult} {:instruction integer_dup} {:instruction float_mod} {:instruction integer_dup} {:instruction float_add} {:instruction integer_dec} {:instruction integer_mult} {:instruction float_mult} {:instruction float_yankdup} {:instruction float_tan} {:instruction in2} {:instruction float_max} {:instruction in2} {:instruction float_yankdup} {:instruction integer_dup} {:instruction integer_pop} {:instruction integer_dec} {:instruction float_cos} {:instruction float_frominteger} {:instruction integer_swap} {:instruction integer_mod} {:instruction integer_dup} {:instruction 80} {:instruction integer_mod} {:instruction integer_dup} {:instruction print_float} {:instruction float_frominteger} {:instruction print_integer} {:instruction integer_sub} {:instruction integer_inc} {:instruction integer_max} {:instruction integer_stackdepth} {:instruction float_shove} {:instruction float_mult} {:instruction integer_max} {:instruction float_dup} {:instruction float_inc} {:instruction print_integer} {:instruction integer_sub} {:instruction in1} {:instruction integer_max})
Best program: (float_yankdup float_cos float_mult float_yankdup float_sin float_yankdup float_pop in2 integer_inc float_yankdup float_yank float_mult 28 integer_add float_inc integer_inc in2 float_max float_rot print_float integer_mult float_mult float_pop float_mult float_mult integer_inc in2 float_max integer_dup print_float integer_mult float_mult float_pop float_mult float_mult in2 float_sub float_sub float_mult integer_dup integer_dup float_add integer_dec integer_shove float_mult float_add float_mult integer_mult integer_dup float_mod integer_dup float_add integer_dec integer_mult float_mult float_yankdup float_tan in2 float_max in2 float_yankdup integer_dup integer_pop integer_dec float_cos float_frominteger integer_swap integer_mod integer_dup 80 integer_mod integer_dup print_float float_frominteger print_integer integer_sub integer_inc integer_max integer_stackdepth float_shove float_mult integer_max float_dup float_inc print_integer integer_sub in1 integer_max)
Errors: [75.0362 8 34.2119 10 49.8114 9 11.52 6 46.787 8 57.7839 8 13.0202 9 95.8478 11 22.5106 9 15.2344 10 55.2703 10 86.9001 7 33.2111 9 6.0932 11 65.9905 9 56.1804 9 13.6023 8 41.282 10 0.0533 8 97.5666 12 41.6537 8 87.374 12 26.2995 8 22.2569 11 90.7212 8]
Total: 1374.2185000000002
Mean: 27.48437
Genome size: 88
Size: 89
Percent parens: 0.011
--- Population Statistics ---
Average total errors in population: 5094.118169500004
Median total errors in population: 1395.2513000000001
Error averages by case: (243.53806450000081 8.871 331.34317719999825 10.57 150.29414120000112 9.796 117.17084260000031 8.719 145.88559039999905 9.493 159.07910949999996 10.079 318.5891356000022 9.422 192.02464839999894 11.962 126.26303159999938 10.012 197.41608329999852 10.802 155.93109940000062 10.798 256.47628689999954 9.363 86.47340039999997 9.833 111.93388700000072 11.366 166.69135050000136 10.15 226.55726700000116 10.042 196.58424089999983 9.387 217.06384110000224 10.633 185.83161919999984 9.006 262.39292909999915 12.132 217.77656759999874 9.325 254.150712800002 12.148 206.16111509999877 9.533 128.0789882999988 11.19 186.4920399000003 9.287)
Error minima by case: (35.0748 7 3.1379 9 10.1667 8 2.4959 6 12.1475 8 9.7435 8 0.9701 7 13.7519 9 11.4423 8 14.1737 8 13.2402 8 2.9697 7 1.1408 6 5.0925 8 20.026 7 23.2585 8 12.5364 8 8.7733 8 0.0364 6 15.4739 9 10.4883 8 5.3271 9 4.7761 8 21.2562 8 21.0 8)
Average genome size in population (length): 89.075
Average program size in population (points): 90.075
Average percent parens in population: 0.011
Minimum age in population: 165.0274168544121
Maximum age in population: 169.656031339949
Average age in population: 167.4943797436097
Median age in population: 167.5018051345905
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 7
Genome diversity (% unique Plush genomes):	 0.891
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 7
Syntactic diversity (% unique Push programs):	 0.891
Total error diversity:				 0.385
Error (vector) diversity:			 0.401
Behavioral diversity:				 0.402
--- Run Statistics ---
Number of program evaluations used so far: 120000
Number of point (instruction) evaluations so far: 204328490
--- Timings ---
Current time: 1529615363866 milliseconds
Total Time:         469.8 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       182.3 seconds, 38.8%
Fitness Testing:    228.4 seconds, 48.6%
Report:              59.0 seconds, 12.6%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 119
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 120
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 120
;;******************************
;; -*- Number IO problem report - generation 120
Test total error for best: 64453.020200000035
Test mean error for best: 32.22651
;;------------------------------
Outputs of best individual on training cases:
Correct output: -116.076402553 | Program output: -41.0401600   
Correct output: 24.1400847456  | Program output: -10.07181     
Correct output: 69.833290954   | Program output: 20.0219241    
Correct output: 82.4958592801  | Program output: 94.015857281  
Correct output: 34.2385110874  | Program output: 81.02551287   
Correct output: -10.7358110665 | Program output: 47.048110545  
Correct output: 1.9700532093   | Program output: -11.050100    
Correct output: -44.7956976677 | Program output: 51.052140557  
Correct output: 68.5576547673  | Program output: 46.047103777  
Correct output: -69.2536523379 | Program output: -54.0192809   
Correct output: -14.2275745396 | Program output: 41.04274047   
Correct output: -171.9767905886 | Program output: -85.0767056   
Correct output: -32.1846093265 | Program output: 1.0265        
Correct output: 66.9812146721  | Program output: 73.074405151  
Correct output: 100.0259781081 | Program output: 34.03542841   
Correct output: -90.2595503995 | Program output: -34.0791089   
Correct output: -82.4635707651 | Program output: -96.0659025   
Correct output: -8.7492896214  | Program output: -50.0312401   
Correct output: -82.1329348831 | Program output: -82.0796561   
Correct output: 24.5261129925  | Program output: -73.0405184   
Correct output: -11.4065589042 | Program output: -53.0602704   
Correct output: 10.3282540908  | Program output: -77.045776    
Correct output: -51.7760580299 | Program output: -78.0755929   
Correct output: 51.8185003253  | Program output: 74.075421801  
Correct output: 110.7431489201 | Program output: 20.0219241    
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_dup} {:instruction float_pop} {:instruction float_mult} {:instruction in2} {:instruction integer_inc} {:instruction float_yankdup} {:instruction float_yank} {:instruction float_mult} {:instruction 28} {:instruction integer_add} {:instruction float_pop} {:instruction integer_inc} {:instruction in2} {:instruction float_max} {:instruction float_rot} {:instruction print_float} {:instruction integer_mult} {:instruction float_mult} {:instruction float_pop} {:instruction integer_sub} {:instruction integer_inc} {:instruction in2} {:instruction float_max} {:instruction integer_dup} {:instruction print_float} {:instruction integer_mult} {:instruction float_shove} {:instruction float_pop} {:instruction float_mult} {:instruction float_mult} {:instruction in2} {:instruction float_sub} {:instruction float_sub} {:instruction float_mult} {:instruction integer_dup} {:instruction integer_dup} {:instruction float_add} {:instruction integer_dec} {:instruction integer_shove} {:instruction float_mult} {:instruction float_add} {:instruction float_rot} {:instruction integer_mult} {:instruction integer_dup} {:instruction float_add} {:instruction integer_dup} {:instruction float_add} {:instruction integer_dec} {:instruction integer_mult} {:instruction float_mult} {:instruction float_yankdup} {:instruction float_tan} {:instruction in2} {:instruction float_max} {:instruction float_pop} {:instruction float_mod} {:instruction in2} {:instruction float_yankdup} {:instruction integer_dup} {:instruction integer_pop} {:instruction integer_dec} {:instruction tagged_186} {:instruction float_frominteger} {:instruction integer_swap} {:instruction integer_mod} {:instruction integer_dup} {:instruction 80} {:instruction integer_mod} {:instruction integer_dup} {:instruction print_float} {:instruction float_frominteger} {:instruction print_integer} {:instruction integer_sub} {:instruction integer_inc} {:instruction integer_max} {:instruction integer_stackdepth} {:instruction float_shove} {:instruction float_mult} {:instruction integer_max} {:instruction float_dup} {:instruction float_inc} {:instruction integer_mult} {:instruction integer_shove} {:instruction print_integer} {:instruction integer_swap})
Best program: (integer_dup float_pop float_mult in2 integer_inc float_yankdup float_yank float_mult 28 integer_add float_pop integer_inc in2 float_max float_rot print_float integer_mult float_mult float_pop integer_sub integer_inc in2 float_max integer_dup print_float integer_mult float_shove float_pop float_mult float_mult in2 float_sub float_sub float_mult integer_dup integer_dup float_add integer_dec integer_shove float_mult float_add float_rot integer_mult integer_dup float_add integer_dup float_add integer_dec integer_mult float_mult float_yankdup float_tan in2 float_max float_pop float_mod in2 float_yankdup integer_dup integer_pop integer_dec tagged_186 float_frominteger integer_swap integer_mod integer_dup 80 integer_mod integer_dup print_float float_frominteger print_integer integer_sub integer_inc integer_max integer_stackdepth float_shove float_mult integer_max float_dup float_inc integer_mult integer_shove print_integer integer_swap)
Errors: [75.0362 8 34.2119 10 49.8114 9 11.52 6 46.787 8 57.7839 8 13.0202 9 95.8478 11 22.5106 9 15.2344 10 55.2703 10 86.9001 7 33.2111 9 6.0932 11 65.9905 9 56.1804 9 13.6023 8 41.282 10 0.0533 8 97.5666 12 41.6537 8 87.374 12 26.2995 8 22.2569 11 90.7212 8]
Total: 1374.2185000000002
Mean: 27.48437
Genome size: 85
Size: 86
Percent parens: 0.012
--- Population Statistics ---
Average total errors in population: 4969.985995399997
Median total errors in population: 1381.7262
Error averages by case: (243.227541800001 8.794 302.82563199999817 10.52 145.3823697000016 9.75 113.44699150000056 8.526 143.07688389999925 9.365 154.4285156 9.885 287.41079490000067 9.376 188.48569499999851 11.884 123.03930259999883 9.994 196.78973909999803 10.757 152.19697780000098 10.738 253.75241949999926 9.113 74.02571150000007 9.864 108.49141580000109 11.353 161.82400450000173 10.005 229.26532930000204 9.931 195.73127529999985 9.254 217.64818870000283 10.595 182.79680339999976 8.885 262.3838639999984 12.161 218.04151569999823 9.237 254.10571860000258 12.152 204.89513669999812 9.415 122.86363609999827 11.182 181.92153240000027 9.193)
Error minima by case: (28.4172 7 9.0 5 10.1689 7 2.3999 6 32.213 7 9.6876 8 0.9701 5 42.8635 9 11.4471 8 14.2524 7 13.1854 8 84.0 7 2.0 4 5.0262 8 19.9906 7 2.6004 7 5.1956 7 9.0117 8 0.0486 6 15.5144 7 10.4199 7 6.2825 7 25.2276 8 21.189 8 21.0 8)
Average genome size in population (length): 89.572
Average program size in population (points): 90.572
Average percent parens in population: 0.011
Minimum age in population: 166.2357604272139
Maximum age in population: 171.0056386739245
Average age in population: 168.8428125709715
Median age in population: 168.8720775888423
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 6
Genome diversity (% unique Plush genomes):	 0.87
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 6
Syntactic diversity (% unique Push programs):	 0.87
Total error diversity:				 0.374
Error (vector) diversity:			 0.382
Behavioral diversity:				 0.384
--- Run Statistics ---
Number of program evaluations used so far: 121000
Number of point (instruction) evaluations so far: 206567790
--- Timings ---
Current time: 1529615368520 milliseconds
Total Time:         474.5 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       183.9 seconds, 38.8%
Fitness Testing:    230.9 seconds, 48.7%
Report:              59.6 seconds, 12.6%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 120
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 121
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 121
;;******************************
;; -*- Number IO problem report - generation 121
Test total error for best: 64453.020200000035
Test mean error for best: 32.22651
;;------------------------------
Outputs of best individual on training cases:
Correct output: -116.076402553 | Program output: -41.0401600   
Correct output: 24.1400847456  | Program output: -10.07181     
Correct output: 69.833290954   | Program output: 20.0219241    
Correct output: 82.4958592801  | Program output: 94.015857281  
Correct output: 34.2385110874  | Program output: 81.02551287   
Correct output: -10.7358110665 | Program output: 47.048110545  
Correct output: 1.9700532093   | Program output: -11.050100    
Correct output: -44.7956976677 | Program output: 51.052140557  
Correct output: 68.5576547673  | Program output: 46.047103777  
Correct output: -69.2536523379 | Program output: -54.0192809   
Correct output: -14.2275745396 | Program output: 41.04274047   
Correct output: -171.9767905886 | Program output: -85.0767056   
Correct output: -32.1846093265 | Program output: 1.0265        
Correct output: 66.9812146721  | Program output: 73.074405151  
Correct output: 100.0259781081 | Program output: 34.03542841   
Correct output: -90.2595503995 | Program output: -34.0791089   
Correct output: -82.4635707651 | Program output: -96.0659025   
Correct output: -8.7492896214  | Program output: -50.0312401   
Correct output: -82.1329348831 | Program output: -82.0796561   
Correct output: 24.5261129925  | Program output: -73.0405184   
Correct output: -11.4065589042 | Program output: -53.0602704   
Correct output: 10.3282540908  | Program output: -77.045776    
Correct output: -51.7760580299 | Program output: -78.0755929   
Correct output: 51.8185003253  | Program output: 74.075421801  
Correct output: 110.7431489201 | Program output: 20.0219241    
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_yankdup} {:instruction float_cos} {:instruction float_mult} {:instruction float_yankdup} {:instruction float_pop} {:instruction float_mult} {:instruction float_add} {:instruction float_yankdup} {:instruction in2} {:instruction integer_inc} {:instruction float_yankdup} {:instruction float_yank} {:instruction float_mult} {:instruction 28} {:instruction integer_add} {:instruction float_pop} {:instruction integer_inc} {:instruction in2} {:instruction float_max} {:instruction float_rot} {:instruction print_float} {:instruction integer_mult} {:instruction float_mult} {:instruction float_pop} {:instruction integer_add} {:instruction integer_inc} {:instruction in2} {:instruction float_max} {:instruction integer_dup} {:instruction print_float} {:instruction integer_mult} {:instruction float_mult} {:instruction float_pop} {:instruction float_mult} {:instruction float_mult} {:instruction in2} {:instruction float_sub} {:instruction float_sub} {:instruction float_mult} {:instruction integer_dup} {:instruction integer_dup} {:instruction float_add} {:instruction integer_dec} {:instruction integer_shove} {:instruction float_mult} {:instruction float_add} {:instruction float_mult} {:instruction integer_mult} {:instruction integer_dup} {:instruction float_add} {:instruction integer_dup} {:instruction float_add} {:instruction integer_dec} {:instruction integer_mult} {:instruction float_mult} {:instruction float_yankdup} {:instruction float_tan} {:instruction in2} {:instruction float_max} {:instruction float_pop} {:instruction float_mod} {:instruction in2} {:instruction float_yankdup} {:instruction integer_dup} {:instruction integer_pop} {:instruction integer_dec} {:instruction float_cos} {:instruction float_frominteger} {:instruction integer_swap} {:instruction integer_mod} {:instruction integer_dup} {:instruction 80} {:instruction integer_mod} {:instruction integer_dup} {:instruction print_float} {:instruction float_frominteger} {:instruction print_integer} {:instruction integer_sub} {:instruction integer_inc} {:instruction integer_max} {:instruction integer_stackdepth} {:instruction float_shove} {:instruction float_mult} {:instruction integer_max} {:instruction float_dup} {:instruction float_inc} {:instruction integer_mult} {:instruction integer_shove} {:instruction print_integer} {:instruction float_shove} {:instruction float_mult} {:instruction integer_max} {:instruction integer_add} {:instruction float_inc} {:instruction float_max} {:instruction print_integer})
Best program: (float_yankdup float_cos float_mult float_yankdup float_pop float_mult float_add float_yankdup in2 integer_inc float_yankdup float_yank float_mult 28 integer_add float_pop integer_inc in2 float_max float_rot print_float integer_mult float_mult float_pop integer_add integer_inc in2 float_max integer_dup print_float integer_mult float_mult float_pop float_mult float_mult in2 float_sub float_sub float_mult integer_dup integer_dup float_add integer_dec integer_shove float_mult float_add float_mult integer_mult integer_dup float_add integer_dup float_add integer_dec integer_mult float_mult float_yankdup float_tan in2 float_max float_pop float_mod in2 float_yankdup integer_dup integer_pop integer_dec float_cos float_frominteger integer_swap integer_mod integer_dup 80 integer_mod integer_dup print_float float_frominteger print_integer integer_sub integer_inc integer_max integer_stackdepth float_shove float_mult integer_max float_dup float_inc integer_mult integer_shove print_integer float_shove float_mult integer_max integer_add float_inc float_max print_integer)
Errors: [75.0362 8 34.2119 10 49.8114 9 11.52 6 46.787 8 57.7839 8 13.0202 9 95.8478 11 22.5106 9 15.2344 10 55.2703 10 86.9001 7 33.2111 9 6.0932 11 65.9905 9 56.1804 9 13.6023 8 41.282 10 0.0533 8 97.5666 12 41.6537 8 87.374 12 26.2995 8 22.2569 11 90.7212 8]
Total: 1374.2185000000002
Mean: 27.48437
Genome size: 96
Size: 97
Percent parens: 0.010
--- Population Statistics ---
Average total errors in population: 4886.660465199996
Median total errors in population: 1395.2513000000001
Error averages by case: (233.52042050000117 8.868 317.2402313999983 10.501 144.93285570000126 9.793 113.77076520000038 8.785 143.13763359999922 9.527 153.46251180000016 10.113 303.2267605000022 9.36 186.527342699999 11.977 122.06363229999903 10.065 186.61174049999892 10.813 151.2906388000007 10.801 246.6063711999994 9.361 74.2985583 9.773 108.67040460000102 11.368 161.69328280000147 10.11 216.12782840000156 10.041 185.67556379999974 9.374 206.62518320000225 10.603 174.76143829999967 9.055 252.57190729999897 12.107 207.30819639999868 9.312 244.15806370000212 12.11 195.4320624999984 9.508 121.72753259999831 11.153 181.46753910000027 9.274)
Error minima by case: (74.036 7 9.0 7 9.176 7 2.4948 5 23.182 7 9.6873 6 0.9701 7 12.4887 7 10.4434 7 14.2147 8 13.1848 7 85.9001 6 0.1224 5 5.0198 8 20.0232 7 55.1804 9 12.5455 8 7.718 8 0.0523 6 13.5109 9 10.3463 7 0.6875 8 19.4691 7 21.1825 8 10.2569 7)
Average genome size in population (length): 89.58
Average program size in population (points): 90.58
Average percent parens in population: 0.011
Minimum age in population: 167.2357604272139
Maximum age in population: 172.2229921169095
Average age in population: 170.1672266694224
Median age in population: 170.1965848176551
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 9
Genome diversity (% unique Plush genomes):	 0.894
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 9
Syntactic diversity (% unique Push programs):	 0.894
Total error diversity:				 0.393
Error (vector) diversity:			 0.402
Behavioral diversity:				 0.404
--- Run Statistics ---
Number of program evaluations used so far: 122000
Number of point (instruction) evaluations so far: 208807290
--- Timings ---
Current time: 1529615372892 milliseconds
Total Time:         478.8 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       185.4 seconds, 38.7%
Fitness Testing:    233.2 seconds, 48.7%
Report:              60.1 seconds, 12.6%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 121
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 122
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 122
;;******************************
;; -*- Number IO problem report - generation 122
Test total error for best: 59652.743300000046
Test mean error for best: 29.82637
;;------------------------------
Outputs of best individual on training cases:
Correct output: -116.076402553 | Program output: -41.0401600   
Correct output: 24.1400847456  | Program output: -10.07181     
Correct output: 69.833290954   | Program output: 20.0219241    
Correct output: 82.4958592801  | Program output: 94.015857281  
Correct output: 34.2385110874  | Program output: 81.02551287   
Correct output: -10.7358110665 | Program output: 47.048110545  
Correct output: 1.9700532093   | Program output: -11.050100    
Correct output: -44.7956976677 | Program output: 51.052140557  
Correct output: 68.5576547673  | Program output: 46.047103777  
Correct output: -69.2536523379 | Program output: -54.0192809   
Correct output: -14.2275745396 | Program output: 41.04274047   
Correct output: -171.9767905886 | Program output: -85.0767056   
Correct output: -32.1846093265 | Program output: 1.0265        
Correct output: 66.9812146721  | Program output: 73.074405151  
Correct output: 100.0259781081 | Program output: 34.03542841   
Correct output: -90.2595503995 | Program output: -34.0791089   
Correct output: -82.4635707651 | Program output: -96.0659025   
Correct output: -8.7492896214  | Program output: -50.0312401   
Correct output: -82.1329348831 | Program output: -82.0796561   
Correct output: 24.5261129925  | Program output: -73.0405184   
Correct output: -11.4065589042 | Program output: -53.0602704   
Correct output: 10.3282540908  | Program output: -77.045776    
Correct output: -51.7760580299 | Program output: -78.0755929   
Correct output: 51.8185003253  | Program output: 74.075421801  
Correct output: 110.7431489201 | Program output: 20.0219241    
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_yankdup} {:instruction float_yank} {:instruction float_mult} {:instruction float_yankdup} {:instruction float_mult} {:instruction in2} {:instruction integer_inc} {:instruction float_yankdup} {:instruction float_yank} {:instruction float_mult} {:instruction 28} {:instruction integer_add} {:instruction float_pop} {:instruction integer_inc} {:instruction in2} {:instruction float_max} {:instruction float_rot} {:instruction print_float} {:instruction integer_mult} {:instruction float_mult} {:instruction float_pop} {:instruction float_mult} {:instruction integer_inc} {:instruction in2} {:instruction float_max} {:instruction integer_dup} {:instruction print_float} {:instruction integer_mult} {:instruction float_mult} {:instruction float_pop} {:instruction float_mult} {:instruction float_mult} {:instruction in2} {:instruction float_sub} {:instruction float_sub} {:instruction float_mult} {:instruction integer_dup} {:instruction integer_dup} {:instruction float_add} {:instruction integer_dec} {:instruction integer_shove} {:instruction float_mult} {:instruction float_add} {:instruction float_mult} {:instruction integer_mult} {:instruction integer_dup} {:instruction float_add} {:instruction integer_dup} {:instruction float_add} {:instruction integer_dec} {:instruction integer_mult} {:instruction float_mult} {:instruction float_yankdup} {:instruction float_tan} {:instruction in2} {:instruction float_max} {:instruction float_pop} {:instruction float_mod} {:instruction in2} {:instruction float_yankdup} {:instruction integer_dup} {:instruction integer_pop} {:instruction integer_dec} {:instruction float_cos} {:instruction float_frominteger} {:instruction integer_swap} {:instruction integer_mod} {:instruction integer_dup} {:instruction 80} {:instruction integer_mod} {:instruction integer_dup} {:instruction print_float} {:instruction float_frominteger} {:instruction print_integer} {:instruction integer_sub} {:instruction integer_inc} {:instruction integer_max} {:instruction integer_stackdepth} {:instruction float_shove} {:instruction 71.1123123388266} {:instruction integer_max} {:instruction integer_stackdepth} {:instruction integer_yank} {:instruction float_mult} {:instruction integer_max} {:instruction float_dup} {:instruction float_max} {:instruction integer_mult} {:instruction integer_shove} {:instruction print_integer} {:instruction integer_swap})
Best program: (float_yankdup float_yank float_mult float_yankdup float_mult in2 integer_inc float_yankdup float_yank float_mult 28 integer_add float_pop integer_inc in2 float_max float_rot print_float integer_mult float_mult float_pop float_mult integer_inc in2 float_max integer_dup print_float integer_mult float_mult float_pop float_mult float_mult in2 float_sub float_sub float_mult integer_dup integer_dup float_add integer_dec integer_shove float_mult float_add float_mult integer_mult integer_dup float_add integer_dup float_add integer_dec integer_mult float_mult float_yankdup float_tan in2 float_max float_pop float_mod in2 float_yankdup integer_dup integer_pop integer_dec float_cos float_frominteger integer_swap integer_mod integer_dup 80 integer_mod integer_dup print_float float_frominteger print_integer integer_sub integer_inc integer_max integer_stackdepth float_shove 71.1123123388266 integer_max integer_stackdepth integer_yank float_mult integer_max float_dup float_max integer_mult integer_shove print_integer integer_swap)
Errors: [75.0362 8 34.2119 10 49.8114 9 11.52 6 46.787 8 57.7839 8 13.0202 9 95.8478 11 22.5106 9 15.2344 10 55.2703 10 86.9001 7 33.2111 9 6.0932 11 65.9905 9 56.1804 9 13.6023 8 41.282 10 0.0533 8 97.5666 12 41.6537 8 87.374 12 26.2995 8 22.2569 11 90.7212 8]
Total: 1374.2185000000002
Mean: 27.48437
Genome size: 91
Size: 92
Percent parens: 0.011
--- Population Statistics ---
Average total errors in population: 4956.1685948999975
Median total errors in population: 1391.2185000000002
Error averages by case: (245.34574400000113 8.8 313.934493399998 10.523 139.35534120000125 9.757 107.59324030000057 8.609 136.53102819999873 9.429 147.90311749999935 9.939 300.2777578000016 9.36 182.21307799999892 11.917 116.83945559999894 10.001 199.88863099999773 10.759 145.5861453000007 10.779 257.81488099999945 9.173 82.02823639999997 9.88 102.11983990000081 11.366 155.18848080000126 10.057 228.84621550000224 9.967 197.0633939 9.239 219.30025000000262 10.549 187.2247483999998 8.922 263.4655437999987 12.128 220.02768089999824 9.2 255.2642402000027 12.091 207.4999128999986 9.426 116.61041899999836 11.169 176.03571990000023 9.171)
Error minima by case: (35.0748 6 13.1401 8 9.1688 8 2.3999 5 16.6507 8 4.2226 8 0.0299 7 38.2825 9 10.447 8 15.154 8 7.7144 9 2.9697 7 2.0 6 6.0188 9 19.9906 7 23.2585 8 11.5364 8 2.2361 8 0.0519 6 14.5144 9 4.8934 8 4.6752 8 24.2239 8 0.9293 8 21.0 8)
Average genome size in population (length): 89.277
Average program size in population (points): 90.277
Average percent parens in population: 0.011
Minimum age in population: 169.274765005236
Maximum age in population: 173.5881916983302
Average age in population: 171.5397435856622
Median age in population: 171.5867551654193
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 9
Genome diversity (% unique Plush genomes):	 0.885
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 9
Syntactic diversity (% unique Push programs):	 0.885
Total error diversity:				 0.388
Error (vector) diversity:			 0.398
Behavioral diversity:				 0.4
--- Run Statistics ---
Number of program evaluations used so far: 123000
Number of point (instruction) evaluations so far: 211039215
--- Timings ---
Current time: 1529615377431 milliseconds
Total Time:         483.4 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       186.9 seconds, 38.7%
Fitness Testing:    235.6 seconds, 48.7%
Report:              60.7 seconds, 12.6%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 122
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 123
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 123
;;******************************
;; -*- Number IO problem report - generation 123
Test total error for best: 64453.020200000035
Test mean error for best: 32.22651
;;------------------------------
Outputs of best individual on training cases:
Correct output: -116.076402553 | Program output: -41.0401600   
Correct output: 24.1400847456  | Program output: -10.07181     
Correct output: 69.833290954   | Program output: 20.0219241    
Correct output: 82.4958592801  | Program output: 94.015857281  
Correct output: 34.2385110874  | Program output: 81.02551287   
Correct output: -10.7358110665 | Program output: 47.048110545  
Correct output: 1.9700532093   | Program output: -11.050100    
Correct output: -44.7956976677 | Program output: 51.052140557  
Correct output: 68.5576547673  | Program output: 46.047103777  
Correct output: -69.2536523379 | Program output: -54.0192809   
Correct output: -14.2275745396 | Program output: 41.04274047   
Correct output: -171.9767905886 | Program output: -85.0767056   
Correct output: -32.1846093265 | Program output: 1.0265        
Correct output: 66.9812146721  | Program output: 73.074405151  
Correct output: 100.0259781081 | Program output: 34.03542841   
Correct output: -90.2595503995 | Program output: -34.0791089   
Correct output: -82.4635707651 | Program output: -96.0659025   
Correct output: -8.7492896214  | Program output: -50.0312401   
Correct output: -82.1329348831 | Program output: -82.0796561   
Correct output: 24.5261129925  | Program output: -73.0405184   
Correct output: -11.4065589042 | Program output: -53.0602704   
Correct output: 10.3282540908  | Program output: -77.045776    
Correct output: -51.7760580299 | Program output: -78.0755929   
Correct output: 51.8185003253  | Program output: 74.075421801  
Correct output: 110.7431489201 | Program output: 20.0219241    
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_yankdup} {:instruction float_pop} {:instruction integer_swap} {:instruction float_yankdup} {:instruction float_pop} {:instruction float_mult} {:instruction in2} {:instruction integer_inc} {:instruction float_yankdup} {:instruction float_yank} {:instruction float_mult} {:instruction 28} {:instruction integer_add} {:instruction float_pop} {:instruction integer_inc} {:instruction in2} {:instruction float_max} {:instruction float_max} {:instruction float_rot} {:instruction print_float} {:instruction integer_mult} {:instruction float_mult} {:instruction float_pop} {:instruction float_inc} {:instruction integer_inc} {:instruction in2} {:instruction float_max} {:instruction integer_dup} {:instruction print_float} {:instruction integer_mult} {:instruction float_mult} {:instruction float_pop} {:instruction float_cos} {:instruction float_mult} {:instruction in2} {:instruction float_sub} {:instruction float_sub} {:instruction float_mult} {:instruction integer_dup} {:instruction integer_dup} {:instruction float_add} {:instruction integer_dec} {:instruction integer_shove} {:instruction float_mult} {:instruction float_add} {:instruction float_mult} {:instruction integer_mult} {:instruction integer_dup} {:instruction float_add} {:instruction integer_dup} {:instruction float_add} {:instruction integer_dec} {:instruction integer_mult} {:instruction float_mult} {:instruction float_yankdup} {:instruction float_tan} {:instruction in2} {:instruction float_max} {:instruction float_pop} {:instruction float_mod} {:instruction in2} {:instruction float_yankdup} {:instruction integer_dup} {:instruction integer_pop} {:instruction integer_dec} {:instruction float_cos} {:instruction float_frominteger} {:instruction integer_swap} {:instruction integer_mod} {:instruction integer_dup} {:instruction 80} {:instruction integer_mod} {:instruction integer_dup} {:instruction print_float} {:instruction float_frominteger} {:instruction print_integer} {:instruction integer_sub} {:instruction integer_inc} {:instruction integer_max} {:instruction integer_stackdepth} {:instruction float_shove} {:instruction 72.91027992373763} {:instruction integer_max} {:instruction float_dup} {:instruction float_inc} {:instruction integer_mult} {:instruction integer_shove} {:instruction print_integer} {:instruction integer_swap})
Best program: (float_yankdup float_pop integer_swap float_yankdup float_pop float_mult in2 integer_inc float_yankdup float_yank float_mult 28 integer_add float_pop integer_inc in2 float_max float_max float_rot print_float integer_mult float_mult float_pop float_inc integer_inc in2 float_max integer_dup print_float integer_mult float_mult float_pop float_cos float_mult in2 float_sub float_sub float_mult integer_dup integer_dup float_add integer_dec integer_shove float_mult float_add float_mult integer_mult integer_dup float_add integer_dup float_add integer_dec integer_mult float_mult float_yankdup float_tan in2 float_max float_pop float_mod in2 float_yankdup integer_dup integer_pop integer_dec float_cos float_frominteger integer_swap integer_mod integer_dup 80 integer_mod integer_dup print_float float_frominteger print_integer integer_sub integer_inc integer_max integer_stackdepth float_shove 72.91027992373763 integer_max float_dup float_inc integer_mult integer_shove print_integer integer_swap)
Errors: [75.0362 8 34.2119 10 49.8114 9 11.52 6 46.787 8 57.7839 8 13.0202 9 95.8478 11 22.5106 9 15.2344 10 55.2703 10 86.9001 7 33.2111 9 6.0932 11 65.9905 9 56.1804 9 13.6023 8 41.282 10 0.0533 8 97.5666 12 41.6537 8 87.374 12 26.2995 8 22.2569 11 90.7212 8]
Total: 1374.2185000000002
Mean: 27.48437
Genome size: 89
Size: 90
Percent parens: 0.011
--- Population Statistics ---
Average total errors in population: 5028.381800099996
Median total errors in population: 1388.7293000000002
Error averages by case: (242.633383300001 8.86 308.3751167999978 10.537 149.82442450000144 9.748 119.18618850000045 8.63 146.2955558999989 9.417 157.36256339999952 9.936 295.0500362000012 9.362 191.25067919999904 11.936 126.4993926999988 9.975 195.39283219999842 10.821 155.16597260000083 10.782 255.3625414999995 9.271 88.03261399999991 9.83 112.14315200000118 11.39 164.47294320000128 10.12 226.26827810000188 10.026 195.39606369999956 9.397 215.50639600000244 10.653 184.55687839999985 9.014 260.91467439999843 12.182 216.0704037999984 9.267 252.6243706000024 12.196 204.26554949999806 9.521 126.30231539999818 11.206 186.19547420000006 9.157)
Error minima by case: (40.0 6 9.0 5 9.176 7 2.4959 5 23.1565 8 10.6113 8 1.9701 6 44.7957 8 10.4434 8 14.2329 7 14.069 8 84.0 6 2.0 4 5.0198 8 20.026 8 33.0 7 11.5427 8 8.7493 8 0.0523 6 12.5261 7 11.4066 7 1.6717 6 24.2276 7 21.1825 9 21.0 8)
Average genome size in population (length): 89.481
Average program size in population (points): 90.481
Average percent parens in population: 0.011
Minimum age in population: 170.7142712170578
Maximum age in population: 174.9607070348412
Average age in population: 172.8885390571116
Median age in population: 172.9271433865765
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 6
Genome diversity (% unique Plush genomes):	 0.868
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 6
Syntactic diversity (% unique Push programs):	 0.868
Total error diversity:				 0.38
Error (vector) diversity:			 0.386
Behavioral diversity:				 0.386
--- Run Statistics ---
Number of program evaluations used so far: 124000
Number of point (instruction) evaluations so far: 213276240
--- Timings ---
Current time: 1529615381819 milliseconds
Total Time:         487.8 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       188.5 seconds, 38.6%
Fitness Testing:    237.9 seconds, 48.8%
Report:              61.3 seconds, 12.6%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 123
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 124
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 124
;;******************************
;; -*- Number IO problem report - generation 124
Test total error for best: 64453.020200000035
Test mean error for best: 32.22651
;;------------------------------
Outputs of best individual on training cases:
Correct output: -116.076402553 | Program output: -41.0401600   
Correct output: 24.1400847456  | Program output: -10.07181     
Correct output: 69.833290954   | Program output: 20.0219241    
Correct output: 82.4958592801  | Program output: 94.015857281  
Correct output: 34.2385110874  | Program output: 81.02551287   
Correct output: -10.7358110665 | Program output: 47.048110545  
Correct output: 1.9700532093   | Program output: -11.050100    
Correct output: -44.7956976677 | Program output: 51.052140557  
Correct output: 68.5576547673  | Program output: 46.047103777  
Correct output: -69.2536523379 | Program output: -54.0192809   
Correct output: -14.2275745396 | Program output: 41.04274047   
Correct output: -171.9767905886 | Program output: -85.0767056   
Correct output: -32.1846093265 | Program output: 1.0265        
Correct output: 66.9812146721  | Program output: 73.074405151  
Correct output: 100.0259781081 | Program output: 34.03542841   
Correct output: -90.2595503995 | Program output: -34.0791089   
Correct output: -82.4635707651 | Program output: -96.0659025   
Correct output: -8.7492896214  | Program output: -50.0312401   
Correct output: -82.1329348831 | Program output: -82.0796561   
Correct output: 24.5261129925  | Program output: -73.0405184   
Correct output: -11.4065589042 | Program output: -53.0602704   
Correct output: 10.3282540908  | Program output: -77.045776    
Correct output: -51.7760580299 | Program output: -78.0755929   
Correct output: 51.8185003253  | Program output: 74.075421801  
Correct output: 110.7431489201 | Program output: 20.0219241    
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_cos} {:instruction float_pop} {:instruction float_mult} {:instruction float_yankdup} {:instruction float_pop} {:instruction float_mult} {:instruction in2} {:instruction integer_inc} {:instruction float_yankdup} {:instruction float_yank} {:instruction float_mult} {:instruction 28} {:instruction integer_add} {:instruction float_pop} {:instruction integer_inc} {:instruction in2} {:instruction float_max} {:instruction float_dup} {:instruction float_rot} {:instruction print_float} {:instruction integer_mult} {:instruction float_sub} {:instruction float_pop} {:instruction float_mult} {:instruction integer_inc} {:instruction in2} {:instruction float_max} {:instruction integer_dup} {:instruction print_float} {:instruction integer_mult} {:instruction float_mult} {:instruction tagged_556} {:instruction float_mult} {:instruction float_mult} {:instruction in2} {:instruction float_sub} {:instruction float_sub} {:instruction float_sin} {:instruction integer_dup} {:instruction integer_dup} {:instruction float_add} {:instruction integer_dec} {:instruction integer_shove} {:instruction float_add} {:instruction float_add} {:instruction float_mult} {:instruction integer_mult} {:instruction integer_dup} {:instruction float_add} {:instruction float_add} {:instruction integer_dup} {:instruction float_add} {:instruction integer_dec} {:instruction integer_mult} {:instruction float_mult} {:instruction float_yankdup} {:instruction float_tan} {:instruction in2} {:instruction float_max} {:instruction float_pop} {:instruction float_mod} {:instruction in2} {:instruction float_yankdup} {:instruction integer_dup} {:instruction integer_pop} {:instruction integer_dec} {:instruction float_cos} {:instruction float_frominteger} {:instruction integer_swap} {:instruction integer_mod} {:instruction integer_dup} {:instruction 80} {:instruction integer_mod} {:instruction integer_dup} {:instruction print_float} {:instruction float_frominteger} {:instruction print_integer} {:instruction integer_sub} {:instruction integer_inc} {:instruction integer_max} {:instruction integer_stackdepth} {:instruction float_shove} {:instruction float_mult} {:instruction integer_max} {:instruction float_dup} {:instruction float_inc} {:instruction integer_mult} {:instruction integer_shove} {:instruction print_integer} {:instruction float_tan})
Best program: (float_cos float_pop float_mult float_yankdup float_pop float_mult in2 integer_inc float_yankdup float_yank float_mult 28 integer_add float_pop integer_inc in2 float_max float_dup float_rot print_float integer_mult float_sub float_pop float_mult integer_inc in2 float_max integer_dup print_float integer_mult float_mult tagged_556 float_mult float_mult in2 float_sub float_sub float_sin integer_dup integer_dup float_add integer_dec integer_shove float_add float_add float_mult integer_mult integer_dup float_add float_add integer_dup float_add integer_dec integer_mult float_mult float_yankdup float_tan in2 float_max float_pop float_mod in2 float_yankdup integer_dup integer_pop integer_dec float_cos float_frominteger integer_swap integer_mod integer_dup 80 integer_mod integer_dup print_float float_frominteger print_integer integer_sub integer_inc integer_max integer_stackdepth float_shove float_mult integer_max float_dup float_inc integer_mult integer_shove print_integer float_tan)
Errors: [75.0362 8 34.2119 10 49.8114 9 11.52 6 46.787 8 57.7839 8 13.0202 9 95.8478 11 22.5106 9 15.2344 10 55.2703 10 86.9001 7 33.2111 9 6.0932 11 65.9905 9 56.1804 9 13.6023 8 41.282 10 0.0533 8 97.5666 12 41.6537 8 87.374 12 26.2995 8 22.2569 11 90.7212 8]
Total: 1374.2185000000002
Mean: 27.48437
Genome size: 90
Size: 91
Percent parens: 0.011
--- Population Statistics ---
Average total errors in population: 5311.651839499999
Median total errors in population: 1392.22055
Error averages by case: (264.158538600001 8.857 320.5533877999983 10.536 147.5151082000015 9.749 117.59232780000023 8.668 146.80024319999893 9.428 156.23775299999932 10.005 308.8089097000012 9.345 191.00984839999944 11.915 125.90757809999877 9.998 222.9823010999981 10.835 153.78238760000067 10.736 277.19072870000014 9.285 89.27893879999995 9.839 112.59320440000108 11.33 164.38655590000099 10.032 249.28652640000175 10.051 218.99626669999975 9.389 240.98537450000254 10.633 208.45294349999966 9.012 284.32198539999933 12.131 242.6855652999982 9.299 275.3703201000025 12.13 229.41098519999818 9.5 126.57337329999824 11.149 183.72268780000013 9.196)
Error minima by case: (40.0 7 9.0 7 10.1667 6 2.4873 6 28.2175 7 9.6873 6 0.969 6 0.1115 6 11.4423 6 14.2344 8 13.1632 6 84.0 7 2.0 4 5.023 8 20.0217 7 33.0 9 12.5364 7 7.6754 8 0.0329 6 18.4447 8 10.4039 8 4.2863 8 25.2239 8 21.1859 8 10.2569 7)
Average genome size in population (length): 89.693
Average program size in population (points): 90.693
Average percent parens in population: 0.011
Minimum age in population: 171.7142712170578
Maximum age in population: 176.1210136480406
Average age in population: 174.2217135420968
Median age in population: 174.2794420063571
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 6
Genome diversity (% unique Plush genomes):	 0.867
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 6
Syntactic diversity (% unique Push programs):	 0.867
Total error diversity:				 0.403
Error (vector) diversity:			 0.413
Behavioral diversity:				 0.416
--- Run Statistics ---
Number of program evaluations used so far: 125000
Number of point (instruction) evaluations so far: 215518565
--- Timings ---
Current time: 1529615386620 milliseconds
Total Time:         492.4 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       190.0 seconds, 38.6%
Fitness Testing:    240.4 seconds, 48.8%
Report:              61.8 seconds, 12.6%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 124
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 125
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 125
;;******************************
;; -*- Number IO problem report - generation 125
Test total error for best: 64453.020200000035
Test mean error for best: 32.22651
;;------------------------------
Outputs of best individual on training cases:
Correct output: -116.076402553 | Program output: -41.0401600   
Correct output: 24.1400847456  | Program output: -10.07181     
Correct output: 69.833290954   | Program output: 20.0219241    
Correct output: 82.4958592801  | Program output: 94.015857281  
Correct output: 34.2385110874  | Program output: 81.02551287   
Correct output: -10.7358110665 | Program output: 47.048110545  
Correct output: 1.9700532093   | Program output: -11.050100    
Correct output: -44.7956976677 | Program output: 51.052140557  
Correct output: 68.5576547673  | Program output: 46.047103777  
Correct output: -69.2536523379 | Program output: -54.0192809   
Correct output: -14.2275745396 | Program output: 41.04274047   
Correct output: -171.9767905886 | Program output: -85.0767056   
Correct output: -32.1846093265 | Program output: 1.0265        
Correct output: 66.9812146721  | Program output: 73.074405151  
Correct output: 100.0259781081 | Program output: 34.03542841   
Correct output: -90.2595503995 | Program output: -34.0791089   
Correct output: -82.4635707651 | Program output: -96.0659025   
Correct output: -8.7492896214  | Program output: -50.0312401   
Correct output: -82.1329348831 | Program output: -82.0796561   
Correct output: 24.5261129925  | Program output: -73.0405184   
Correct output: -11.4065589042 | Program output: -53.0602704   
Correct output: 10.3282540908  | Program output: -77.045776    
Correct output: -51.7760580299 | Program output: -78.0755929   
Correct output: 51.8185003253  | Program output: 74.075421801  
Correct output: 110.7431489201 | Program output: 20.0219241    
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_yankdup} {:instruction float_cos} {:instruction float_mult} {:instruction integer_fromfloat} {:instruction float_pop} {:instruction integer_mod} {:instruction in2} {:instruction integer_inc} {:instruction float_yankdup} {:instruction float_yank} {:instruction float_mult} {:instruction 28} {:instruction integer_add} {:instruction float_pop} {:instruction integer_inc} {:instruction in2} {:instruction float_max} {:instruction float_rot} {:instruction print_float} {:instruction integer_mult} {:instruction float_mult} {:instruction float_mult} {:instruction float_pop} {:instruction float_mult} {:instruction integer_inc} {:instruction in2} {:instruction float_max} {:instruction integer_dup} {:instruction print_float} {:instruction integer_mult} {:instruction float_mult} {:instruction tagged_556} {:instruction float_mult} {:instruction float_mult} {:instruction in2} {:instruction float_sub} {:instruction float_sub} {:instruction float_mult} {:instruction integer_dup} {:instruction integer_dup} {:instruction float_add} {:instruction integer_dec} {:instruction integer_shove} {:instruction float_add} {:instruction float_add} {:instruction float_mult} {:instruction integer_mult} {:instruction integer_dup} {:instruction float_add} {:instruction float_add} {:instruction integer_dup} {:instruction float_add} {:instruction integer_dec} {:instruction integer_mult} {:instruction float_mult} {:instruction float_yankdup} {:instruction float_tan} {:instruction in2} {:instruction float_max} {:instruction float_pop} {:instruction float_mod} {:instruction in2} {:instruction float_yankdup} {:instruction integer_dup} {:instruction integer_pop} {:instruction integer_dec} {:instruction float_cos} {:instruction float_frominteger} {:instruction integer_swap} {:instruction integer_mod} {:instruction integer_dup} {:instruction 80} {:instruction integer_mod} {:instruction integer_dup} {:instruction print_float} {:instruction float_frominteger} {:instruction print_integer} {:instruction integer_sub} {:instruction integer_inc} {:instruction integer_max} {:instruction integer_stackdepth} {:instruction float_shove} {:instruction float_mult} {:instruction integer_max} {:instruction float_dup} {:instruction float_inc} {:instruction integer_mult} {:instruction float_mult} {:instruction print_integer} {:instruction integer_swap})
Best program: (float_yankdup float_cos float_mult integer_fromfloat float_pop integer_mod in2 integer_inc float_yankdup float_yank float_mult 28 integer_add float_pop integer_inc in2 float_max float_rot print_float integer_mult float_mult float_mult float_pop float_mult integer_inc in2 float_max integer_dup print_float integer_mult float_mult tagged_556 float_mult float_mult in2 float_sub float_sub float_mult integer_dup integer_dup float_add integer_dec integer_shove float_add float_add float_mult integer_mult integer_dup float_add float_add integer_dup float_add integer_dec integer_mult float_mult float_yankdup float_tan in2 float_max float_pop float_mod in2 float_yankdup integer_dup integer_pop integer_dec float_cos float_frominteger integer_swap integer_mod integer_dup 80 integer_mod integer_dup print_float float_frominteger print_integer integer_sub integer_inc integer_max integer_stackdepth float_shove float_mult integer_max float_dup float_inc integer_mult float_mult print_integer integer_swap)
Errors: [75.0362 8 34.2119 10 49.8114 9 11.52 6 46.787 8 57.7839 8 13.0202 9 95.8478 11 22.5106 9 15.2344 10 55.2703 10 86.9001 7 33.2111 9 6.0932 11 65.9905 9 56.1804 9 13.6023 8 41.282 10 0.0533 8 97.5666 12 41.6537 8 87.374 12 26.2995 8 22.2569 11 90.7212 8]
Total: 1374.2185000000002
Mean: 27.48437
Genome size: 90
Size: 91
Percent parens: 0.011
--- Population Statistics ---
Average total errors in population: 4908.372015999999
Median total errors in population: 1394.2371999999998
Error averages by case: (232.14338360000104 8.871 305.13202119999835 10.534 147.3695804000013 9.748 116.95677150000051 8.638 145.54203239999907 9.412 157.10427430000001 9.979 290.62421010000077 9.376 191.1890001999989 11.937 125.71165629999918 9.966 186.31014029999878 10.791 155.39703920000085 10.728 245.54240299999927 9.302 87.45177929999998 9.894 111.926396100001 11.313 164.22490590000123 10.053 215.26714100000152 10.012 185.38919649999957 9.322 206.81436580000212 10.598 174.36269169999963 9.028 252.94181289999892 12.083 207.90909549999859 9.261 244.80141920000213 12.118 195.46924139999862 9.475 126.2269151999986 11.127 183.7795430000004 9.219)
Error minima by case: (35.0748 7 24.9792 9 10.1667 8 2.4873 6 29.2303 7 10.6113 8 1.9656 7 44.8077 9 11.4423 8 14.2264 8 14.069 9 2.9697 7 32.2073 7 5.0932 8 20.0217 7 23.2585 7 11.5364 7 9.0117 8 0.0329 6 15.4739 8 10.4883 8 5.3248 8 4.7761 8 21.2569 8 30.7339 8)
Average genome size in population (length): 89.81
Average program size in population (points): 90.81
Average percent parens in population: 0.011
Minimum age in population: 173.0798649675076
Maximum age in population: 177.5103136451651
Average age in population: 175.5376515578995
Median age in population: 175.5923413863625
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 8
Genome diversity (% unique Plush genomes):	 0.883
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 8
Syntactic diversity (% unique Push programs):	 0.883
Total error diversity:				 0.397
Error (vector) diversity:			 0.405
Behavioral diversity:				 0.407
--- Run Statistics ---
Number of program evaluations used so far: 126000
Number of point (instruction) evaluations so far: 217763840
--- Timings ---
Current time: 1529615390880 milliseconds
Total Time:         496.9 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       191.5 seconds, 38.5%
Fitness Testing:    242.7 seconds, 48.8%
Report:              62.6 seconds, 12.6%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 125
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 126
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 126
;;******************************
;; -*- Number IO problem report - generation 126
Test total error for best: 64453.020200000035
Test mean error for best: 32.22651
;;------------------------------
Outputs of best individual on training cases:
Correct output: -116.076402553 | Program output: -41.0401600   
Correct output: 24.1400847456  | Program output: -10.07181     
Correct output: 69.833290954   | Program output: 20.0219241    
Correct output: 82.4958592801  | Program output: 94.015857281  
Correct output: 34.2385110874  | Program output: 81.02551287   
Correct output: -10.7358110665 | Program output: 47.048110545  
Correct output: 1.9700532093   | Program output: -11.050100    
Correct output: -44.7956976677 | Program output: 51.052140557  
Correct output: 68.5576547673  | Program output: 46.047103777  
Correct output: -69.2536523379 | Program output: -54.0192809   
Correct output: -14.2275745396 | Program output: 41.04274047   
Correct output: -171.9767905886 | Program output: -85.0767056   
Correct output: -32.1846093265 | Program output: 1.0265        
Correct output: 66.9812146721  | Program output: 73.074405151  
Correct output: 100.0259781081 | Program output: 34.03542841   
Correct output: -90.2595503995 | Program output: -34.0791089   
Correct output: -82.4635707651 | Program output: -96.0659025   
Correct output: -8.7492896214  | Program output: -50.0312401   
Correct output: -82.1329348831 | Program output: -82.0796561   
Correct output: 24.5261129925  | Program output: -73.0405184   
Correct output: -11.4065589042 | Program output: -53.0602704   
Correct output: 10.3282540908  | Program output: -77.045776    
Correct output: -51.7760580299 | Program output: -78.0755929   
Correct output: 51.8185003253  | Program output: 74.075421801  
Correct output: 110.7431489201 | Program output: 20.0219241    
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_yankdup} {:instruction float_cos} {:instruction float_mult} {:instruction integer_fromfloat} {:instruction float_pop} {:instruction integer_mod} {:instruction in2} {:instruction integer_inc} {:instruction float_yankdup} {:instruction float_yank} {:instruction float_mult} {:instruction 28} {:instruction integer_add} {:instruction float_pop} {:instruction integer_inc} {:instruction in2} {:instruction float_max} {:instruction float_rot} {:instruction print_float} {:instruction integer_mult} {:instruction float_mult} {:instruction float_pop} {:instruction float_mult} {:instruction integer_inc} {:instruction in2} {:instruction float_max} {:instruction integer_dup} {:instruction print_float} {:instruction integer_mult} {:instruction float_mult} {:instruction float_mult} {:instruction float_mult} {:instruction in2} {:instruction float_sub} {:instruction float_sub} {:instruction float_sin} {:instruction integer_dup} {:instruction integer_dup} {:instruction float_add} {:instruction integer_dec} {:instruction integer_shove} {:instruction integer_swap} {:instruction float_add} {:instruction float_mult} {:instruction integer_mult} {:instruction integer_dup} {:instruction float_add} {:instruction float_add} {:instruction integer_dup} {:instruction float_add} {:instruction integer_dec} {:instruction integer_mult} {:instruction float_mult} {:instruction float_yankdup} {:instruction float_tan} {:instruction in2} {:instruction float_max} {:instruction float_pop} {:instruction float_inc} {:instruction in2} {:instruction float_yankdup} {:instruction integer_dup} {:instruction integer_pop} {:instruction integer_dec} {:instruction float_cos} {:instruction float_frominteger} {:instruction integer_swap} {:instruction integer_mod} {:instruction integer_dup} {:instruction 80} {:instruction integer_mod} {:instruction integer_dup} {:instruction print_float} {:instruction float_frominteger} {:instruction print_integer} {:instruction integer_sub} {:instruction integer_inc} {:instruction integer_max} {:instruction integer_stackdepth} {:instruction float_shove} {:instruction float_mult} {:instruction integer_max} {:instruction float_dup} {:instruction float_inc} {:instruction integer_mult} {:instruction integer_stackdepth} {:instruction float_shove} {:instruction float_mult} {:instruction integer_max} {:instruction float_dup} {:instruction integer_mult} {:instruction integer_shove} {:instruction print_integer} {:instruction integer_swap})
Best program: (float_yankdup float_cos float_mult integer_fromfloat float_pop integer_mod in2 integer_inc float_yankdup float_yank float_mult 28 integer_add float_pop integer_inc in2 float_max float_rot print_float integer_mult float_mult float_pop float_mult integer_inc in2 float_max integer_dup print_float integer_mult float_mult float_mult float_mult in2 float_sub float_sub float_sin integer_dup integer_dup float_add integer_dec integer_shove integer_swap float_add float_mult integer_mult integer_dup float_add float_add integer_dup float_add integer_dec integer_mult float_mult float_yankdup float_tan in2 float_max float_pop float_inc in2 float_yankdup integer_dup integer_pop integer_dec float_cos float_frominteger integer_swap integer_mod integer_dup 80 integer_mod integer_dup print_float float_frominteger print_integer integer_sub integer_inc integer_max integer_stackdepth float_shove float_mult integer_max float_dup float_inc integer_mult integer_stackdepth float_shove float_mult integer_max float_dup integer_mult integer_shove print_integer integer_swap)
Errors: [75.0362 8 34.2119 10 49.8114 9 11.52 6 46.787 8 57.7839 8 13.0202 9 95.8478 11 22.5106 9 15.2344 10 55.2703 10 86.9001 7 33.2111 9 6.0932 11 65.9905 9 56.1804 9 13.6023 8 41.282 10 0.0533 8 97.5666 12 41.6537 8 87.374 12 26.2995 8 22.2569 11 90.7212 8]
Total: 1374.2185000000002
Mean: 27.48437
Genome size: 94
Size: 95
Percent parens: 0.011
--- Population Statistics ---
Average total errors in population: 5050.728635899996
Median total errors in population: 1389.7260500000002
Error averages by case: (249.70036120000108 8.791 293.17362969999795 10.5 146.9083819000013 9.692 115.34194290000069 8.59 144.94935609999902 9.343 155.32570129999965 9.884 279.7159467999999 9.311 189.4630535999985 11.872 123.70517429999883 9.929 204.52377899999806 10.73 152.88337550000077 10.726 262.0990420999992 9.128 85.46918210000008 9.879 109.734546800001 11.286 162.13314440000147 10.022 232.73917120000206 9.925 202.98002929999967 9.26 223.86042790000212 10.534 192.20695619999964 8.942 267.9761340999989 12.055 224.8757135999983 9.181 259.8231049000026 12.051 212.48967389999828 9.391 124.05881399999826 11.119 183.2819931000002 9.169)
Error minima by case: (35.0748 7 9.0 6 9.7733 8 2.4873 5 24.2385 7 9.6682 6 0.9701 6 43.7433 8 6.4957 8 14.1743 8 13.179 8 2.9697 6 2.0 4 5.0265 8 20.0217 7 23.2585 7 11.5364 7 7.6971 8 0.0329 6 14.5144 8 10.3463 7 4.6867 8 24.2239 7 17.7845 8 21.0 8)
Average genome size in population (length): 89.511
Average program size in population (points): 90.511
Average percent parens in population: 0.011
Minimum age in population: 174.5249426893836
Maximum age in population: 179.1684046139601
Average age in population: 176.8724465338494
Median age in population: 176.9143911006362
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 8
Genome diversity (% unique Plush genomes):	 0.875
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 8
Syntactic diversity (% unique Push programs):	 0.875
Total error diversity:				 0.41
Error (vector) diversity:			 0.423
Behavioral diversity:				 0.424
--- Run Statistics ---
Number of program evaluations used so far: 127000
Number of point (instruction) evaluations so far: 220001640
--- Timings ---
Current time: 1529615395288 milliseconds
Total Time:         501.2 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       193.1 seconds, 38.5%
Fitness Testing:    245.0 seconds, 48.9%
Report:              63.1 seconds, 12.6%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 126
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 127
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 127
;;******************************
;; -*- Number IO problem report - generation 127
Test total error for best: 64453.020200000035
Test mean error for best: 32.22651
;;------------------------------
Outputs of best individual on training cases:
Correct output: -116.076402553 | Program output: -41.0401600   
Correct output: 24.1400847456  | Program output: -10.07181     
Correct output: 69.833290954   | Program output: 20.0219241    
Correct output: 82.4958592801  | Program output: 94.015857281  
Correct output: 34.2385110874  | Program output: 81.02551287   
Correct output: -10.7358110665 | Program output: 47.048110545  
Correct output: 1.9700532093   | Program output: -11.050100    
Correct output: -44.7956976677 | Program output: 51.052140557  
Correct output: 68.5576547673  | Program output: 46.047103777  
Correct output: -69.2536523379 | Program output: -54.0192809   
Correct output: -14.2275745396 | Program output: 41.04274047   
Correct output: -171.9767905886 | Program output: -85.0767056   
Correct output: -32.1846093265 | Program output: 1.0265        
Correct output: 66.9812146721  | Program output: 73.074405151  
Correct output: 100.0259781081 | Program output: 34.03542841   
Correct output: -90.2595503995 | Program output: -34.0791089   
Correct output: -82.4635707651 | Program output: -96.0659025   
Correct output: -8.7492896214  | Program output: -50.0312401   
Correct output: -82.1329348831 | Program output: -82.0796561   
Correct output: 24.5261129925  | Program output: -73.0405184   
Correct output: -11.4065589042 | Program output: -53.0602704   
Correct output: 10.3282540908  | Program output: -77.045776    
Correct output: -51.7760580299 | Program output: -78.0755929   
Correct output: 51.8185003253  | Program output: 74.075421801  
Correct output: 110.7431489201 | Program output: 20.0219241    
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_yankdup} {:instruction float_cos} {:instruction float_mult} {:instruction float_yankdup} {:instruction float_pop} {:instruction float_mult} {:instruction in2} {:instruction integer_inc} {:instruction float_yankdup} {:instruction float_yankdup} {:instruction float_yank} {:instruction float_mult} {:instruction 28} {:instruction integer_add} {:instruction float_pop} {:instruction integer_inc} {:instruction in2} {:instruction float_max} {:instruction float_rot} {:instruction print_float} {:instruction integer_mult} {:instruction float_mult} {:instruction float_pop} {:instruction float_mult} {:instruction integer_inc} {:instruction in2} {:instruction float_max} {:instruction integer_dup} {:instruction print_float} {:instruction integer_mult} {:instruction float_mult} {:instruction float_pop} {:instruction float_mult} {:instruction float_mult} {:instruction in2} {:instruction float_sub} {:instruction float_sub} {:instruction float_mult} {:instruction integer_dup} {:instruction integer_dup} {:instruction float_add} {:instruction integer_dec} {:instruction integer_shove} {:instruction float_mult} {:instruction float_add} {:instruction float_rot} {:instruction integer_mult} {:instruction integer_dup} {:instruction float_add} {:instruction integer_dup} {:instruction float_add} {:instruction integer_dec} {:instruction integer_mult} {:instruction float_mult} {:instruction float_yankdup} {:instruction float_tan} {:instruction in2} {:instruction in2} {:instruction float_yankdup} {:instruction integer_dup} {:instruction integer_pop} {:instruction integer_dec} {:instruction float_cos} {:instruction float_frominteger} {:instruction integer_swap} {:instruction integer_mod} {:instruction integer_dup} {:instruction 80} {:instruction integer_mod} {:instruction integer_dup} {:instruction print_float} {:instruction float_frominteger} {:instruction print_integer} {:instruction integer_sub} {:instruction integer_inc} {:instruction integer_max} {:instruction integer_stackdepth} {:instruction float_shove} {:instruction float_mult} {:instruction integer_max} {:instruction float_dup} {:instruction float_inc} {:instruction integer_mult} {:instruction integer_shove} {:instruction print_integer} {:instruction integer_swap})
Best program: (float_yankdup float_cos float_mult float_yankdup float_pop float_mult in2 integer_inc float_yankdup float_yankdup float_yank float_mult 28 integer_add float_pop integer_inc in2 float_max float_rot print_float integer_mult float_mult float_pop float_mult integer_inc in2 float_max integer_dup print_float integer_mult float_mult float_pop float_mult float_mult in2 float_sub float_sub float_mult integer_dup integer_dup float_add integer_dec integer_shove float_mult float_add float_rot integer_mult integer_dup float_add integer_dup float_add integer_dec integer_mult float_mult float_yankdup float_tan in2 in2 float_yankdup integer_dup integer_pop integer_dec float_cos float_frominteger integer_swap integer_mod integer_dup 80 integer_mod integer_dup print_float float_frominteger print_integer integer_sub integer_inc integer_max integer_stackdepth float_shove float_mult integer_max float_dup float_inc integer_mult integer_shove print_integer integer_swap)
Errors: [75.0362 8 34.2119 10 49.8114 9 11.52 6 46.787 8 57.7839 8 13.0202 9 95.8478 11 22.5106 9 15.2344 10 55.2703 10 86.9001 7 33.2111 9 6.0932 11 65.9905 9 56.1804 9 13.6023 8 41.282 10 0.0533 8 97.5666 12 41.6537 8 87.374 12 26.2995 8 22.2569 11 90.7212 8]
Total: 1374.2185000000002
Mean: 27.48437
Genome size: 86
Size: 87
Percent parens: 0.011
--- Population Statistics ---
Average total errors in population: 5062.212153199998
Median total errors in population: 1393.2413000000001
Error averages by case: (242.2970232000011 8.828 325.88862799999816 10.583 148.98647160000132 9.791 116.19802530000062 8.702 146.2496956999992 9.446 157.52418859999997 9.971 313.42883130000234 9.391 191.45547929999867 11.969 126.58553899999882 10.049 197.0496714999982 10.755 155.31889640000085 10.791 255.73019749999935 9.254 81.6131302 9.872 111.19171600000107 11.363 165.1998626000015 10.067 224.57706290000195 10.033 195.93996379999962 9.32 217.14424540000238 10.561 184.9949315999997 8.96 263.00936919999873 12.121 217.88580849999872 9.216 254.7133657000024 12.12 205.8159833999985 9.463 125.41321559999838 11.15 185.02585090000028 9.199)
Error minima by case: (36.0748 7 19.136 9 9.169 9 3.4945 6 29.2344 8 9.7309 8 0.9701 7 18.2043 9 10.4483 8 6.2537 8 13.2233 9 3.9697 7 30.8154 8 5.0919 8 21.0242 8 24.2585 9 11.6014 7 7.7395 8 0.0378 6 0.5016 8 10.4054 8 5.3242 8 11.2239 7 21.2556 8 10.2569 8)
Average genome size in population (length): 89.956
Average program size in population (points): 90.956
Average percent parens in population: 0.011
Minimum age in population: 175.5249426893836
Maximum age in population: 180.0915319009905
Average age in population: 178.3160187602379
Median age in population: 178.3700601241975
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 8
Genome diversity (% unique Plush genomes):	 0.866
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 8
Syntactic diversity (% unique Push programs):	 0.866
Total error diversity:				 0.389
Error (vector) diversity:			 0.399
Behavioral diversity:				 0.4
--- Run Statistics ---
Number of program evaluations used so far: 128000
Number of point (instruction) evaluations so far: 222250540
--- Timings ---
Current time: 1529615399880 milliseconds
Total Time:         505.7 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       194.5 seconds, 38.5%
Fitness Testing:    247.4 seconds, 48.9%
Report:              63.7 seconds, 12.6%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 127
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 128
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 128
;;******************************
;; -*- Number IO problem report - generation 128
Test total error for best: 64453.020200000035
Test mean error for best: 32.22651
;;------------------------------
Outputs of best individual on training cases:
Correct output: -116.076402553 | Program output: -41.0401600   
Correct output: 24.1400847456  | Program output: -10.07181     
Correct output: 69.833290954   | Program output: 20.0219241    
Correct output: 82.4958592801  | Program output: 94.015857281  
Correct output: 34.2385110874  | Program output: 81.02551287   
Correct output: -10.7358110665 | Program output: 47.048110545  
Correct output: 1.9700532093   | Program output: -11.050100    
Correct output: -44.7956976677 | Program output: 51.052140557  
Correct output: 68.5576547673  | Program output: 46.047103777  
Correct output: -69.2536523379 | Program output: -54.0192809   
Correct output: -14.2275745396 | Program output: 41.04274047   
Correct output: -171.9767905886 | Program output: -85.0767056   
Correct output: -32.1846093265 | Program output: 1.0265        
Correct output: 66.9812146721  | Program output: 73.074405151  
Correct output: 100.0259781081 | Program output: 34.03542841   
Correct output: -90.2595503995 | Program output: -34.0791089   
Correct output: -82.4635707651 | Program output: -96.0659025   
Correct output: -8.7492896214  | Program output: -50.0312401   
Correct output: -82.1329348831 | Program output: -82.0796561   
Correct output: 24.5261129925  | Program output: -73.0405184   
Correct output: -11.4065589042 | Program output: -53.0602704   
Correct output: 10.3282540908  | Program output: -77.045776    
Correct output: -51.7760580299 | Program output: -78.0755929   
Correct output: 51.8185003253  | Program output: 74.075421801  
Correct output: 110.7431489201 | Program output: 20.0219241    
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_yankdup} {:instruction float_pop} {:instruction integer_swap} {:instruction float_yankdup} {:instruction float_pop} {:instruction float_pop} {:instruction float_mult} {:instruction in2} {:instruction integer_inc} {:instruction float_yankdup} {:instruction float_yank} {:instruction float_mult} {:instruction 28} {:instruction integer_add} {:instruction float_pop} {:instruction integer_inc} {:instruction in2} {:instruction float_max} {:instruction float_rot} {:instruction integer_mult} {:instruction float_mult} {:instruction float_pop} {:instruction float_mult} {:instruction integer_inc} {:instruction in2} {:instruction float_max} {:instruction integer_dup} {:instruction print_float} {:instruction integer_mult} {:instruction float_mult} {:instruction float_pop} {:instruction float_mult} {:instruction float_mult} {:instruction in2} {:instruction float_sub} {:instruction float_sub} {:instruction float_mult} {:instruction integer_dup} {:instruction integer_dup} {:instruction float_add} {:instruction integer_dec} {:instruction integer_shove} {:instruction float_mult} {:instruction float_add} {:instruction float_mult} {:instruction integer_mult} {:instruction integer_dup} {:instruction float_add} {:instruction integer_dup} {:instruction float_add} {:instruction integer_dec} {:instruction integer_mult} {:instruction float_mult} {:instruction float_yankdup} {:instruction float_tan} {:instruction in2} {:instruction float_max} {:instruction float_pop} {:instruction float_mod} {:instruction in2} {:instruction float_yankdup} {:instruction integer_dup} {:instruction integer_pop} {:instruction integer_dec} {:instruction float_max} {:instruction float_frominteger} {:instruction integer_swap} {:instruction integer_mod} {:instruction integer_dup} {:instruction 80} {:instruction integer_mod} {:instruction integer_dup} {:instruction print_float} {:instruction float_frominteger} {:instruction print_integer} {:instruction integer_sub} {:instruction integer_inc} {:instruction integer_max} {:instruction integer_stackdepth} {:instruction float_shove} {:instruction float_mult} {:instruction integer_max} {:instruction float_min} {:instruction float_inc} {:instruction integer_mult} {:instruction integer_shove} {:instruction print_integer} {:instruction integer_swap})
Best program: (float_yankdup float_pop integer_swap float_yankdup float_pop float_pop float_mult in2 integer_inc float_yankdup float_yank float_mult 28 integer_add float_pop integer_inc in2 float_max float_rot integer_mult float_mult float_pop float_mult integer_inc in2 float_max integer_dup print_float integer_mult float_mult float_pop float_mult float_mult in2 float_sub float_sub float_mult integer_dup integer_dup float_add integer_dec integer_shove float_mult float_add float_mult integer_mult integer_dup float_add integer_dup float_add integer_dec integer_mult float_mult float_yankdup float_tan in2 float_max float_pop float_mod in2 float_yankdup integer_dup integer_pop integer_dec float_max float_frominteger integer_swap integer_mod integer_dup 80 integer_mod integer_dup print_float float_frominteger print_integer integer_sub integer_inc integer_max integer_stackdepth float_shove float_mult integer_max float_min float_inc integer_mult integer_shove print_integer integer_swap)
Errors: [75.0362 8 34.2119 10 49.8114 9 11.52 6 46.787 8 57.7839 8 13.0202 9 95.8478 11 22.5106 9 15.2344 10 55.2703 10 86.9001 7 33.2111 9 6.0932 11 65.9905 9 56.1804 9 13.6023 8 41.282 10 0.0533 8 97.5666 12 41.6537 8 87.374 12 26.2995 8 22.2569 11 90.7212 8]
Total: 1374.2185000000002
Mean: 27.48437
Genome size: 88
Size: 89
Percent parens: 0.011
--- Population Statistics ---
Average total errors in population: 5046.888736099998
Median total errors in population: 1394.2169500000002
Error averages by case: (245.64729900000114 8.825 319.21880199999845 10.502 148.28928370000102 9.795 115.21704460000028 8.725 143.66213319999912 9.502 155.4931365999997 10.049 303.9563750000012 9.355 189.64024729999912 11.976 125.08463379999915 10.04 197.60334219999817 10.763 152.29167420000047 10.826 256.7648373999993 9.252 83.19093820000009 9.888 109.95161890000088 11.389 163.51763970000124 10.081 230.73386790000188 10.028 196.9069958999997 9.335 218.7417704000025 10.598 185.92826409999972 8.959 262.42104879999886 12.12 218.16270249999846 9.271 254.14619300000246 12.078 207.36157819999858 9.482 125.24855559999867 11.167 184.46375390000028 9.239)
Error minima by case: (74.0508 7 2.1401 9 10.176 8 2.4001 5 33.2094 7 9.7299 8 0.9701 7 43.7947 8 6.4716 8 14.1748 8 13.2253 8 85.927 7 2.0 5 5.0198 8 19.9908 8 55.2477 9 12.5364 7 7.7479 8 0.0525 6 16.5261 9 10.4046 8 6.3283 8 4.7761 8 21.1825 8 21.0 7)
Average genome size in population (length): 90.188
Average program size in population (points): 91.188
Average percent parens in population: 0.011
Minimum age in population: 176.5249426893836
Maximum age in population: 181.670096644566
Average age in population: 179.6554235228655
Median age in population: 179.6626672072599
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 8
Genome diversity (% unique Plush genomes):	 0.868
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 8
Syntactic diversity (% unique Push programs):	 0.868
Total error diversity:				 0.41
Error (vector) diversity:			 0.416
Behavioral diversity:				 0.417
--- Run Statistics ---
Number of program evaluations used so far: 129000
Number of point (instruction) evaluations so far: 224505265
--- Timings ---
Current time: 1529615404328 milliseconds
Total Time:         510.3 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       196.0 seconds, 38.4%
Fitness Testing:    249.8 seconds, 49.0%
Report:              64.3 seconds, 12.6%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 128
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 129
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 129
;;******************************
;; -*- Number IO problem report - generation 129
Test total error for best: 64453.020200000035
Test mean error for best: 32.22651
;;------------------------------
Outputs of best individual on training cases:
Correct output: -116.076402553 | Program output: -41.0401600   
Correct output: 24.1400847456  | Program output: -10.07181     
Correct output: 69.833290954   | Program output: 20.0219241    
Correct output: 82.4958592801  | Program output: 94.015857281  
Correct output: 34.2385110874  | Program output: 81.02551287   
Correct output: -10.7358110665 | Program output: 47.048110545  
Correct output: 1.9700532093   | Program output: -11.050100    
Correct output: -44.7956976677 | Program output: 51.052140557  
Correct output: 68.5576547673  | Program output: 46.047103777  
Correct output: -69.2536523379 | Program output: -54.0192809   
Correct output: -14.2275745396 | Program output: 41.04274047   
Correct output: -171.9767905886 | Program output: -85.0767056   
Correct output: -32.1846093265 | Program output: 1.0265        
Correct output: 66.9812146721  | Program output: 73.074405151  
Correct output: 100.0259781081 | Program output: 34.03542841   
Correct output: -90.2595503995 | Program output: -34.0791089   
Correct output: -82.4635707651 | Program output: -96.0659025   
Correct output: -8.7492896214  | Program output: -50.0312401   
Correct output: -82.1329348831 | Program output: -82.0796561   
Correct output: 24.5261129925  | Program output: -73.0405184   
Correct output: -11.4065589042 | Program output: -53.0602704   
Correct output: 10.3282540908  | Program output: -77.045776    
Correct output: -51.7760580299 | Program output: -78.0755929   
Correct output: 51.8185003253  | Program output: 74.075421801  
Correct output: 110.7431489201 | Program output: 20.0219241    
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_yankdup} {:instruction float_pop} {:instruction float_mult} {:instruction in2} {:instruction integer_inc} {:instruction float_yank} {:instruction float_mult} {:instruction 28} {:instruction integer_add} {:instruction float_pop} {:instruction integer_inc} {:instruction in2} {:instruction float_max} {:instruction print_float} {:instruction integer_mult} {:instruction float_mult} {:instruction integer_mult} {:instruction float_mult} {:instruction float_pop} {:instruction float_mult} {:instruction integer_inc} {:instruction in2} {:instruction integer_rot} {:instruction integer_dup} {:instruction float_rot} {:instruction integer_mult} {:instruction integer_rot} {:instruction float_pop} {:instruction float_mult} {:instruction float_mult} {:instruction in2} {:instruction float_sub} {:instruction float_sub} {:instruction float_mult} {:instruction integer_dup} {:instruction integer_dup} {:instruction float_add} {:instruction integer_dec} {:instruction float_add} {:instruction integer_dec} {:instruction integer_shove} {:instruction float_rot} {:instruction float_add} {:instruction float_mult} {:instruction integer_mult} {:instruction integer_dup} {:instruction float_add} {:instruction integer_dup} {:instruction float_add} {:instruction integer_dec} {:instruction integer_mult} {:instruction float_mult} {:instruction float_mult} {:instruction float_tan} {:instruction in2} {:instruction float_max} {:instruction float_pop} {:instruction float_mod} {:instruction in2} {:instruction float_yankdup} {:instruction integer_dup} {:instruction integer_pop} {:instruction integer_dec} {:instruction float_mod} {:instruction float_frominteger} {:instruction integer_swap} {:instruction integer_mod} {:instruction integer_dup} {:instruction 80} {:instruction integer_mod} {:instruction integer_dup} {:instruction print_float} {:instruction float_frominteger} {:instruction print_integer} {:instruction integer_sub} {:instruction integer_inc} {:instruction integer_max} {:instruction integer_stackdepth} {:instruction float_shove} {:instruction float_mult} {:instruction integer_max} {:instruction float_dup} {:instruction integer_mult} {:instruction integer_mult} {:instruction print_integer} {:instruction integer_swap})
Best program: (float_yankdup float_pop float_mult in2 integer_inc float_yank float_mult 28 integer_add float_pop integer_inc in2 float_max print_float integer_mult float_mult integer_mult float_mult float_pop float_mult integer_inc in2 integer_rot integer_dup float_rot integer_mult integer_rot float_pop float_mult float_mult in2 float_sub float_sub float_mult integer_dup integer_dup float_add integer_dec float_add integer_dec integer_shove float_rot float_add float_mult integer_mult integer_dup float_add integer_dup float_add integer_dec integer_mult float_mult float_mult float_tan in2 float_max float_pop float_mod in2 float_yankdup integer_dup integer_pop integer_dec float_mod float_frominteger integer_swap integer_mod integer_dup 80 integer_mod integer_dup print_float float_frominteger print_integer integer_sub integer_inc integer_max integer_stackdepth float_shove float_mult integer_max float_dup integer_mult integer_mult print_integer integer_swap)
Errors: [75.0362 8 34.2119 10 49.8114 9 11.52 6 46.787 8 57.7839 8 13.0202 9 95.8478 11 22.5106 9 15.2344 10 55.2703 10 86.9001 7 33.2111 9 6.0932 11 65.9905 9 56.1804 9 13.6023 8 41.282 10 0.0533 8 97.5666 12 41.6537 8 87.374 12 26.2995 8 22.2569 11 90.7212 8]
Total: 1374.2185000000002
Mean: 27.48437
Genome size: 86
Size: 87
Percent parens: 0.011
--- Population Statistics ---
Average total errors in population: 4919.186134
Median total errors in population: 1392.2130000000002
Error averages by case: (232.79352350000102 8.897 307.43565629999796 10.515 150.37126540000125 9.763 118.00774310000041 8.652 145.71124869999912 9.433 159.47797509999987 10.018 292.24418020000104 9.393 192.3961210999987 11.915 128.35361299999892 10.001 185.91585869999824 10.803 157.30493550000062 10.786 244.73239369999936 9.314 84.86250160000006 9.826 114.07042230000113 11.352 166.72981480000146 10.091 215.47051920000172 10.054 183.87304739999993 9.363 205.9885206000023 10.646 171.95217159999982 9.03 251.10877009999896 12.144 206.6169305999983 9.308 242.7773969000021 12.137 193.70782549999842 9.503 127.29996349999831 11.131 186.64473560000016 9.264)
Error minima by case: (36.0764 7 23.1401 9 6.8481 8 2.4007 5 33.1503 8 9.731 8 0.9701 7 43.7905 9 8.1237 8 14.2205 8 13.2234 9 3.9768 7 2.0 6 5.0188 8 11.937 7 24.2596 8 12.5364 8 7.74 8 0.0329 6 16.5261 8 10.4054 8 6.3283 8 25.2239 8 21.1815 8 21.0 8)
Average genome size in population (length): 89.632
Average program size in population (points): 90.632
Average percent parens in population: 0.011
Minimum age in population: 177.5249426893836
Maximum age in population: 183.064192019879
Average age in population: 180.9968144070519
Median age in population: 181.0471695946137
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 6
Genome diversity (% unique Plush genomes):	 0.89
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 6
Syntactic diversity (% unique Push programs):	 0.89
Total error diversity:				 0.391
Error (vector) diversity:			 0.4
Behavioral diversity:				 0.405
--- Run Statistics ---
Number of program evaluations used so far: 130000
Number of point (instruction) evaluations so far: 226746065
--- Timings ---
Current time: 1529615408829 milliseconds
Total Time:         514.8 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       197.6 seconds, 38.4%
Fitness Testing:    252.3 seconds, 49.0%
Report:              64.9 seconds, 12.6%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 129
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 130
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 130
;;******************************
;; -*- Number IO problem report - generation 130
Test total error for best: 64453.020200000035
Test mean error for best: 32.22651
;;------------------------------
Outputs of best individual on training cases:
Correct output: -116.076402553 | Program output: -41.0401600   
Correct output: 24.1400847456  | Program output: -10.07181     
Correct output: 69.833290954   | Program output: 20.0219241    
Correct output: 82.4958592801  | Program output: 94.015857281  
Correct output: 34.2385110874  | Program output: 81.02551287   
Correct output: -10.7358110665 | Program output: 47.048110545  
Correct output: 1.9700532093   | Program output: -11.050100    
Correct output: -44.7956976677 | Program output: 51.052140557  
Correct output: 68.5576547673  | Program output: 46.047103777  
Correct output: -69.2536523379 | Program output: -54.0192809   
Correct output: -14.2275745396 | Program output: 41.04274047   
Correct output: -171.9767905886 | Program output: -85.0767056   
Correct output: -32.1846093265 | Program output: 1.0265        
Correct output: 66.9812146721  | Program output: 73.074405151  
Correct output: 100.0259781081 | Program output: 34.03542841   
Correct output: -90.2595503995 | Program output: -34.0791089   
Correct output: -82.4635707651 | Program output: -96.0659025   
Correct output: -8.7492896214  | Program output: -50.0312401   
Correct output: -82.1329348831 | Program output: -82.0796561   
Correct output: 24.5261129925  | Program output: -73.0405184   
Correct output: -11.4065589042 | Program output: -53.0602704   
Correct output: 10.3282540908  | Program output: -77.045776    
Correct output: -51.7760580299 | Program output: -78.0755929   
Correct output: 51.8185003253  | Program output: 74.075421801  
Correct output: 110.7431489201 | Program output: 20.0219241    
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_yankdup} {:instruction in2} {:instruction integer_inc} {:instruction float_yankdup} {:instruction float_yank} {:instruction float_mult} {:instruction 28} {:instruction integer_add} {:instruction integer_add} {:instruction integer_inc} {:instruction in2} {:instruction integer_mult} {:instruction float_rot} {:instruction float_max} {:instruction integer_max} {:instruction print_float} {:instruction float_max} {:instruction float_rot} {:instruction print_float} {:instruction integer_mult} {:instruction float_mult} {:instruction float_pop} {:instruction integer_sub} {:instruction integer_inc} {:instruction in2} {:instruction float_max} {:instruction integer_dup} {:instruction print_float} {:instruction integer_mult} {:instruction float_shove} {:instruction float_pop} {:instruction float_mult} {:instruction float_mult} {:instruction in2} {:instruction float_cos} {:instruction float_sub} {:instruction float_mult} {:instruction integer_dup} {:instruction integer_dup} {:instruction float_add} {:instruction integer_dec} {:instruction integer_shove} {:instruction float_mult} {:instruction float_add} {:instruction float_rot} {:instruction integer_mult} {:instruction integer_dup} {:instruction float_add} {:instruction integer_dup} {:instruction float_add} {:instruction integer_dec} {:instruction integer_mult} {:instruction float_mult} {:instruction in2} {:instruction float_max} {:instruction float_pop} {:instruction float_mod} {:instruction in2} {:instruction float_yankdup} {:instruction integer_dup} {:instruction integer_pop} {:instruction integer_dec} {:instruction float_mod} {:instruction float_frominteger} {:instruction integer_swap} {:instruction integer_mod} {:instruction integer_dup} {:instruction 80} {:instruction integer_mod} {:instruction integer_dup} {:instruction print_float} {:instruction float_frominteger} {:instruction print_integer} {:instruction integer_sub} {:instruction integer_inc} {:instruction integer_max} {:instruction integer_stackdepth} {:instruction float_shove} {:instruction float_mult} {:instruction integer_max} {:instruction float_dup} {:instruction float_inc} {:instruction integer_mult} {:instruction integer_shove} {:instruction print_integer} {:instruction integer_mult} {:instruction integer_shove} {:instruction print_integer} {:instruction float_shove} {:instruction float_mult} {:instruction integer_mult} {:instruction integer_shove} {:instruction print_integer} {:instruction integer_mult} {:instruction integer_shove} {:instruction print_integer} {:instruction float_shove} {:instruction float_mult} {:instruction integer_max} {:instruction integer_add} {:instruction float_inc} {:instruction float_max} {:instruction print_integer} {:instruction integer_swap})
Best program: (float_yankdup in2 integer_inc float_yankdup float_yank float_mult 28 integer_add integer_add integer_inc in2 integer_mult float_rot float_max integer_max print_float float_max float_rot print_float integer_mult float_mult float_pop integer_sub integer_inc in2 float_max integer_dup print_float integer_mult float_shove float_pop float_mult float_mult in2 float_cos float_sub float_mult integer_dup integer_dup float_add integer_dec integer_shove float_mult float_add float_rot integer_mult integer_dup float_add integer_dup float_add integer_dec integer_mult float_mult in2 float_max float_pop float_mod in2 float_yankdup integer_dup integer_pop integer_dec float_mod float_frominteger integer_swap integer_mod integer_dup 80 integer_mod integer_dup print_float float_frominteger print_integer integer_sub integer_inc integer_max integer_stackdepth float_shove float_mult integer_max float_dup float_inc integer_mult integer_shove print_integer integer_mult integer_shove print_integer float_shove float_mult integer_mult integer_shove print_integer integer_mult integer_shove print_integer float_shove float_mult integer_max integer_add float_inc float_max print_integer integer_swap)
Errors: [75.0362 8 34.2119 10 49.8114 9 11.52 6 46.787 8 57.7839 8 13.0202 9 95.8478 11 22.5106 9 15.2344 10 55.2703 10 86.9001 7 33.2111 9 6.0932 11 65.9905 9 56.1804 9 13.6023 8 41.282 10 0.0533 8 97.5666 12 41.6537 8 87.374 12 26.2995 8 22.2569 11 90.7212 8]
Total: 1374.2185000000002
Mean: 27.48437
Genome size: 104
Size: 105
Percent parens: 0.010
--- Population Statistics ---
Average total errors in population: 5057.888883799997
Median total errors in population: 1390.2241000000001
Error averages by case: (239.13670140000121 8.878 287.01567659999796 10.458 158.78331970000156 9.767 129.10183480000063 8.661 154.22609009999942 9.453 168.81613640000035 9.967 271.68706000000026 9.325 202.2539480999986 11.978 138.37950009999938 10.052 192.63064349999811 10.761 166.6822957000012 10.784 252.0105003999994 9.21 81.5196053000001 9.874 124.15471360000103 11.408 176.3713323000019 10.104 222.74379970000209 10.026 191.56740639999967 9.339 212.48744790000248 10.567 180.6622734999997 9.02 258.0701880999988 12.15 213.06558649999823 9.228 249.71403110000244 12.125 201.28284909999815 9.462 138.08835969999873 11.182 194.42158380000035 9.237)
Error minima by case: (53.036 7 13.1401 8 9.176 8 2.4864 6 23.1458 8 10.6113 8 0.969 7 18.2568 9 10.4434 8 6.2265 8 14.2688 9 85.9001 7 30.8419 8 5.0228 8 20.0195 8 27.2125 9 12.5364 8 7.67 8 0.0329 6 13.4743 9 10.3273 8 0.7295 8 11.2576 7 11.1815 8 10.2569 8)
Average genome size in population (length): 89.986
Average program size in population (points): 90.986
Average percent parens in population: 0.011
Minimum age in population: 180.0383147862943
Maximum age in population: 184.5544405061146
Average age in population: 182.3254130629606
Median age in population: 182.3563534063517
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 6
Genome diversity (% unique Plush genomes):	 0.879
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 6
Syntactic diversity (% unique Push programs):	 0.879
Total error diversity:				 0.385
Error (vector) diversity:			 0.396
Behavioral diversity:				 0.396
--- Run Statistics ---
Number of program evaluations used so far: 131000
Number of point (instruction) evaluations so far: 228995740
--- Timings ---
Current time: 1529615413114 milliseconds
Total Time:         519.1 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       199.0 seconds, 38.3%
Fitness Testing:    254.5 seconds, 49.0%
Report:              65.4 seconds, 12.6%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 130
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 131
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 131
;;******************************
;; -*- Number IO problem report - generation 131
Test total error for best: 64453.020200000035
Test mean error for best: 32.22651
;;------------------------------
Outputs of best individual on training cases:
Correct output: -116.076402553 | Program output: -41.0401600   
Correct output: 24.1400847456  | Program output: -10.07181     
Correct output: 69.833290954   | Program output: 20.0219241    
Correct output: 82.4958592801  | Program output: 94.015857281  
Correct output: 34.2385110874  | Program output: 81.02551287   
Correct output: -10.7358110665 | Program output: 47.048110545  
Correct output: 1.9700532093   | Program output: -11.050100    
Correct output: -44.7956976677 | Program output: 51.052140557  
Correct output: 68.5576547673  | Program output: 46.047103777  
Correct output: -69.2536523379 | Program output: -54.0192809   
Correct output: -14.2275745396 | Program output: 41.04274047   
Correct output: -171.9767905886 | Program output: -85.0767056   
Correct output: -32.1846093265 | Program output: 1.0265        
Correct output: 66.9812146721  | Program output: 73.074405151  
Correct output: 100.0259781081 | Program output: 34.03542841   
Correct output: -90.2595503995 | Program output: -34.0791089   
Correct output: -82.4635707651 | Program output: -96.0659025   
Correct output: -8.7492896214  | Program output: -50.0312401   
Correct output: -82.1329348831 | Program output: -82.0796561   
Correct output: 24.5261129925  | Program output: -73.0405184   
Correct output: -11.4065589042 | Program output: -53.0602704   
Correct output: 10.3282540908  | Program output: -77.045776    
Correct output: -51.7760580299 | Program output: -78.0755929   
Correct output: 51.8185003253  | Program output: 74.075421801  
Correct output: 110.7431489201 | Program output: 20.0219241    
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_yankdup} {:instruction float_yankdup} {:instruction float_cos} {:instruction float_mult} {:instruction float_yankdup} {:instruction print_integer} {:instruction float_mult} {:instruction in2} {:instruction integer_inc} {:instruction float_yankdup} {:instruction float_yank} {:instruction float_mult} {:instruction 28} {:instruction integer_add} {:instruction float_pop} {:instruction integer_inc} {:instruction in2} {:instruction float_max} {:instruction float_rot} {:instruction print_float} {:instruction integer_mult} {:instruction float_mult} {:instruction float_pop} {:instruction float_mult} {:instruction integer_inc} {:instruction in2} {:instruction float_max} {:instruction integer_dup} {:instruction float_rot} {:instruction print_float} {:instruction integer_mult} {:instruction float_mult} {:instruction float_mult} {:instruction float_mult} {:instruction in2} {:instruction float_sub} {:instruction integer_dup} {:instruction integer_dup} {:instruction float_add} {:instruction integer_dec} {:instruction integer_shove} {:instruction float_tan} {:instruction float_mult} {:instruction integer_mult} {:instruction integer_dup} {:instruction float_add} {:instruction integer_dup} {:instruction float_add} {:instruction integer_dec} {:instruction integer_mult} {:instruction float_mult} {:instruction float_yankdup} {:instruction float_tan} {:instruction in2} {:instruction float_max} {:instruction float_pop} {:instruction float_mod} {:instruction in2} {:instruction float_yankdup} {:instruction integer_dup} {:instruction integer_pop} {:instruction integer_dec} {:instruction float_cos} {:instruction float_frominteger} {:instruction integer_swap} {:instruction integer_mod} {:instruction integer_dup} {:instruction 80} {:instruction integer_mod} {:instruction integer_dup} {:instruction print_float} {:instruction float_frominteger} {:instruction print_integer} {:instruction integer_sub} {:instruction integer_inc} {:instruction integer_max} {:instruction integer_dup} {:instruction float_shove} {:instruction float_mult} {:instruction integer_max} {:instruction float_dup} {:instruction float_inc} {:instruction integer_mult} {:instruction integer_shove} {:instruction print_integer} {:instruction integer_swap})
Best program: (float_yankdup float_yankdup float_cos float_mult float_yankdup print_integer float_mult in2 integer_inc float_yankdup float_yank float_mult 28 integer_add float_pop integer_inc in2 float_max float_rot print_float integer_mult float_mult float_pop float_mult integer_inc in2 float_max integer_dup float_rot print_float integer_mult float_mult float_mult float_mult in2 float_sub integer_dup integer_dup float_add integer_dec integer_shove float_tan float_mult integer_mult integer_dup float_add integer_dup float_add integer_dec integer_mult float_mult float_yankdup float_tan in2 float_max float_pop float_mod in2 float_yankdup integer_dup integer_pop integer_dec float_cos float_frominteger integer_swap integer_mod integer_dup 80 integer_mod integer_dup print_float float_frominteger print_integer integer_sub integer_inc integer_max integer_dup float_shove float_mult integer_max float_dup float_inc integer_mult integer_shove print_integer integer_swap)
Errors: [75.0362 8 34.2119 10 49.8114 9 11.52 6 46.787 8 57.7839 8 13.0202 9 95.8478 11 22.5106 9 15.2344 10 55.2703 10 86.9001 7 33.2111 9 6.0932 11 65.9905 9 56.1804 9 13.6023 8 41.282 10 0.0533 8 97.5666 12 41.6537 8 87.374 12 26.2995 8 22.2569 11 90.7212 8]
Total: 1374.2185000000002
Mean: 27.48437
Genome size: 86
Size: 87
Percent parens: 0.011
--- Population Statistics ---
Average total errors in population: 5126.810327000001
Median total errors in population: 1395.2513000000001
Error averages by case: (247.308747700001 8.882 317.90965559999825 10.505 153.92427350000116 9.808 120.64391670000039 8.768 148.15980279999917 9.521 159.51575729999973 10.016 303.1489986000016 9.36 193.8608641999986 11.999 130.1351555999991 10.102 201.13884029999846 10.843 157.72541570000078 10.817 259.11117759999934 9.41 89.79362260000009 9.873 114.90103520000099 11.402 168.35165480000134 10.112 231.39651630000176 10.068 199.8904814999999 9.441 220.2226596000021 10.664 188.55503609999977 9.07 263.75852369999893 12.161 221.46301469999887 9.339 255.0840389000022 12.133 207.74835119999867 9.565 129.1021764999985 11.174 189.6836103000002 9.244)
Error minima by case: (35.07 7 13.1401 8 9.176 6 2.4007 6 12.2293 8 8.9917 6 0.9701 7 43.0516 6 8.4423 6 14.1905 8 12.4835 6 2.9736 7 2.0 4 5.0932 8 4.1121 7 23.2585 8 12.5364 8 7.0052 8 0.0511 6 14.5144 9 9.6625 6 3.3283 8 25.2239 8 21.2569 8 14.8293 7)
Average genome size in population (length): 90.066
Average program size in population (points): 91.066
Average percent parens in population: 0.011
Minimum age in population: 181.0383147862943
Maximum age in population: 186.2755444229016
Average age in population: 183.6800152711273
Median age in population: 183.7135322462742
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 5
Genome diversity (% unique Plush genomes):	 0.918
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 5
Syntactic diversity (% unique Push programs):	 0.918
Total error diversity:				 0.429
Error (vector) diversity:			 0.446
Behavioral diversity:				 0.447
--- Run Statistics ---
Number of program evaluations used so far: 132000
Number of point (instruction) evaluations so far: 231247465
--- Timings ---
Current time: 1529615417534 milliseconds
Total Time:         523.5 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       200.5 seconds, 38.3%
Fitness Testing:    256.9 seconds, 49.1%
Report:              66.0 seconds, 12.6%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 131
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 132
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 132
;;******************************
;; -*- Number IO problem report - generation 132
Test total error for best: 64453.020200000035
Test mean error for best: 32.22651
;;------------------------------
Outputs of best individual on training cases:
Correct output: -116.076402553 | Program output: -41.0401600   
Correct output: 24.1400847456  | Program output: -10.07181     
Correct output: 69.833290954   | Program output: 20.0219241    
Correct output: 82.4958592801  | Program output: 94.015857281  
Correct output: 34.2385110874  | Program output: 81.02551287   
Correct output: -10.7358110665 | Program output: 47.048110545  
Correct output: 1.9700532093   | Program output: -11.050100    
Correct output: -44.7956976677 | Program output: 51.052140557  
Correct output: 68.5576547673  | Program output: 46.047103777  
Correct output: -69.2536523379 | Program output: -54.0192809   
Correct output: -14.2275745396 | Program output: 41.04274047   
Correct output: -171.9767905886 | Program output: -85.0767056   
Correct output: -32.1846093265 | Program output: 1.0265        
Correct output: 66.9812146721  | Program output: 73.074405151  
Correct output: 100.0259781081 | Program output: 34.03542841   
Correct output: -90.2595503995 | Program output: -34.0791089   
Correct output: -82.4635707651 | Program output: -96.0659025   
Correct output: -8.7492896214  | Program output: -50.0312401   
Correct output: -82.1329348831 | Program output: -82.0796561   
Correct output: 24.5261129925  | Program output: -73.0405184   
Correct output: -11.4065589042 | Program output: -53.0602704   
Correct output: 10.3282540908  | Program output: -77.045776    
Correct output: -51.7760580299 | Program output: -78.0755929   
Correct output: 51.8185003253  | Program output: 74.075421801  
Correct output: 110.7431489201 | Program output: 20.0219241    
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction in1} {:instruction float_pop} {:instruction float_pop} {:instruction float_mult} {:instruction in2} {:instruction integer_inc} {:instruction float_yankdup} {:instruction float_min} {:instruction float_mult} {:instruction 28} {:instruction integer_add} {:instruction float_pop} {:instruction integer_inc} {:instruction in2} {:instruction float_max} {:instruction float_max} {:instruction float_rot} {:instruction print_float} {:instruction integer_mult} {:instruction float_mult} {:instruction float_pop} {:instruction float_mult} {:instruction integer_inc} {:instruction in2} {:instruction float_max} {:instruction integer_dup} {:instruction print_float} {:instruction integer_mult} {:instruction integer_fromfloat} {:instruction float_pop} {:instruction float_mult} {:instruction float_shove} {:instruction in2} {:instruction float_sub} {:instruction float_sub} {:instruction float_mult} {:instruction integer_dup} {:instruction integer_dup} {:instruction float_add} {:instruction integer_dec} {:instruction integer_shove} {:instruction float_mult} {:instruction float_add} {:instruction float_mult} {:instruction integer_mult} {:instruction integer_dup} {:instruction float_add} {:instruction integer_dup} {:instruction float_add} {:instruction integer_dec} {:instruction integer_mult} {:instruction float_mult} {:instruction float_yankdup} {:instruction float_tan} {:instruction in2} {:instruction tagged_805} {:instruction float_pop} {:instruction float_mod} {:instruction in2} {:instruction float_yankdup} {:instruction integer_dup} {:instruction integer_pop} {:instruction integer_dec} {:instruction float_cos} {:instruction float_frominteger} {:instruction integer_swap} {:instruction integer_mod} {:instruction integer_dup} {:instruction 80} {:instruction integer_mod} {:instruction integer_dup} {:instruction print_float} {:instruction float_frominteger} {:instruction print_integer} {:instruction integer_sub} {:instruction integer_inc} {:instruction integer_max} {:instruction integer_stackdepth} {:instruction float_shove} {:instruction float_mult} {:instruction integer_max} {:instruction float_dup} {:instruction 61.04843371059775} {:instruction integer_mult} {:instruction integer_shove} {:instruction print_integer} {:instruction integer_swap})
Best program: (in1 float_pop float_pop float_mult in2 integer_inc float_yankdup float_min float_mult 28 integer_add float_pop integer_inc in2 float_max float_max float_rot print_float integer_mult float_mult float_pop float_mult integer_inc in2 float_max integer_dup print_float integer_mult integer_fromfloat float_pop float_mult float_shove in2 float_sub float_sub float_mult integer_dup integer_dup float_add integer_dec integer_shove float_mult float_add float_mult integer_mult integer_dup float_add integer_dup float_add integer_dec integer_mult float_mult float_yankdup float_tan in2 tagged_805 float_pop float_mod in2 float_yankdup integer_dup integer_pop integer_dec float_cos float_frominteger integer_swap integer_mod integer_dup 80 integer_mod integer_dup print_float float_frominteger print_integer integer_sub integer_inc integer_max integer_stackdepth float_shove float_mult integer_max float_dup 61.04843371059775 integer_mult integer_shove print_integer integer_swap)
Errors: [75.0362 8 34.2119 10 49.8114 9 11.52 6 46.787 8 57.7839 8 13.0202 9 95.8478 11 22.5106 9 15.2344 10 55.2703 10 86.9001 7 33.2111 9 6.0932 11 65.9905 9 56.1804 9 13.6023 8 41.282 10 0.0533 8 97.5666 12 41.6537 8 87.374 12 26.2995 8 22.2569 11 90.7212 8]
Total: 1374.2185000000002
Mean: 27.48437
Genome size: 87
Size: 88
Percent parens: 0.011
--- Population Statistics ---
Average total errors in population: 5325.567121300002
Median total errors in population: 1392.2216000000003
Error averages by case: (260.71190150000103 8.873 314.36254869999823 10.528 157.23655360000143 9.765 126.05533090000061 8.636 152.32440889999972 9.445 164.9563774000004 9.934 300.8025968000016 9.365 198.57116959999846 11.902 134.2897471999991 10.011 215.4653468999978 10.768 162.78956130000103 10.768 272.72230249999984 9.244 87.21165010000009 9.916 120.08016270000107 11.353 172.48212940000192 10.039 245.80505190000218 10.038 213.95052169999985 9.323 234.9622529000025 10.63 203.4977072999998 9.01 278.30057829999936 12.127 235.69790439999835 9.285 269.8959478000027 12.082 223.4570832999983 9.473 134.1258726999984 11.138 192.9484135000003 9.211)
Error minima by case: (40.0 4 9.0 4 10.1667 4 2.4873 6 28.2303 8 10.6113 4 0.969 3 44.7957 4 8.4423 4 14.2344 4 14.069 4 84.0 4 2.0 2 5.0209 8 20.0217 5 33.0 4 12.5415 8 7.9183 8 0.0329 4 16.5261 4 10.437 8 4.3248 3 25.2252 8 21.1837 8 21.0 5)
Average genome size in population (length): 90.218
Average program size in population (points): 91.218
Average percent parens in population: 0.011
Minimum age in population: 182.708081545401
Maximum age in population: 186.9928530246696
Average age in population: 185.0122171346552
Median age in population: 185.03200528694
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 5
Genome diversity (% unique Plush genomes):	 0.897
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 5
Syntactic diversity (% unique Push programs):	 0.897
Total error diversity:				 0.397
Error (vector) diversity:			 0.409
Behavioral diversity:				 0.411
--- Run Statistics ---
Number of program evaluations used so far: 133000
Number of point (instruction) evaluations so far: 233502915
--- Timings ---
Current time: 1529615421913 milliseconds
Total Time:         527.9 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       201.9 seconds, 38.2%
Fitness Testing:    259.4 seconds, 49.1%
Report:              66.5 seconds, 12.6%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 132
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 133
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 133
;;******************************
;; -*- Number IO problem report - generation 133
Test total error for best: 64453.020200000035
Test mean error for best: 32.22651
;;------------------------------
Outputs of best individual on training cases:
Correct output: -116.076402553 | Program output: -41.0401600   
Correct output: 24.1400847456  | Program output: -10.07181     
Correct output: 69.833290954   | Program output: 20.0219241    
Correct output: 82.4958592801  | Program output: 94.015857281  
Correct output: 34.2385110874  | Program output: 81.02551287   
Correct output: -10.7358110665 | Program output: 47.048110545  
Correct output: 1.9700532093   | Program output: -11.050100    
Correct output: -44.7956976677 | Program output: 51.052140557  
Correct output: 68.5576547673  | Program output: 46.047103777  
Correct output: -69.2536523379 | Program output: -54.0192809   
Correct output: -14.2275745396 | Program output: 41.04274047   
Correct output: -171.9767905886 | Program output: -85.0767056   
Correct output: -32.1846093265 | Program output: 1.0265        
Correct output: 66.9812146721  | Program output: 73.074405151  
Correct output: 100.0259781081 | Program output: 34.03542841   
Correct output: -90.2595503995 | Program output: -34.0791089   
Correct output: -82.4635707651 | Program output: -96.0659025   
Correct output: -8.7492896214  | Program output: -50.0312401   
Correct output: -82.1329348831 | Program output: -82.0796561   
Correct output: 24.5261129925  | Program output: -73.0405184   
Correct output: -11.4065589042 | Program output: -53.0602704   
Correct output: 10.3282540908  | Program output: -77.045776    
Correct output: -51.7760580299 | Program output: -78.0755929   
Correct output: 51.8185003253  | Program output: 74.075421801  
Correct output: 110.7431489201 | Program output: 20.0219241    
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_yankdup} {:instruction in2} {:instruction integer_inc} {:instruction float_dec} {:instruction float_yank} {:instruction float_mult} {:instruction 28} {:instruction integer_add} {:instruction float_pop} {:instruction integer_inc} {:instruction in2} {:instruction float_max} {:instruction float_max} {:instruction float_rot} {:instruction print_float} {:instruction integer_mult} {:instruction float_mult} {:instruction float_pop} {:instruction float_dup_times} {:instruction integer_inc} {:instruction in2} {:instruction float_max} {:instruction integer_dup} {:instruction print_float} {:instruction integer_mult} {:instruction float_mult} {:instruction float_pop} {:instruction float_mult} {:instruction float_mult} {:instruction in2} {:instruction float_sub} {:instruction float_sub} {:instruction float_mult} {:instruction integer_dup} {:instruction integer_dup} {:instruction float_add} {:instruction integer_dec} {:instruction integer_shove} {:instruction float_mult} {:instruction float_sin} {:instruction float_mult} {:instruction integer_mult} {:instruction integer_dup} {:instruction float_add} {:instruction integer_dup} {:instruction float_tan} {:instruction integer_dec} {:instruction integer_mult} {:instruction float_mult} {:instruction float_yankdup} {:instruction float_tan} {:instruction in2} {:instruction float_min} {:instruction float_pop} {:instruction float_mod} {:instruction in2} {:instruction float_yankdup} {:instruction integer_dup} {:instruction integer_pop} {:instruction integer_dec} {:instruction float_flush} {:instruction float_frominteger} {:instruction integer_swap} {:instruction integer_mod} {:instruction integer_dup} {:instruction 80} {:instruction integer_mod} {:instruction integer_dup} {:instruction print_float} {:instruction float_frominteger} {:instruction print_integer} {:instruction integer_sub} {:instruction integer_inc} {:instruction integer_max} {:instruction integer_stackdepth} {:instruction float_shove} {:instruction float_mult} {:instruction integer_max} {:instruction float_dup} {:instruction float_inc} {:instruction integer_mult} {:instruction integer_shove} {:instruction print_integer})
Best program: (float_yankdup in2 integer_inc float_dec float_yank float_mult 28 integer_add float_pop integer_inc in2 float_max float_max float_rot print_float integer_mult float_mult float_pop float_dup_times integer_inc in2 float_max integer_dup print_float integer_mult float_mult float_pop float_mult float_mult in2 float_sub float_sub float_mult integer_dup integer_dup float_add integer_dec integer_shove float_mult float_sin float_mult integer_mult integer_dup float_add integer_dup float_tan integer_dec integer_mult float_mult float_yankdup float_tan in2 float_min float_pop float_mod in2 float_yankdup integer_dup integer_pop integer_dec float_flush float_frominteger integer_swap integer_mod integer_dup 80 integer_mod integer_dup print_float float_frominteger print_integer integer_sub integer_inc integer_max integer_stackdepth float_shove float_mult integer_max float_dup float_inc integer_mult integer_shove print_integer)
Errors: [75.0362 8 34.2119 10 49.8114 9 11.52 6 46.787 8 57.7839 8 13.0202 9 95.8478 11 22.5106 9 15.2344 10 55.2703 10 86.9001 7 33.2111 9 6.0932 11 65.9905 9 56.1804 9 13.6023 8 41.282 10 0.0533 8 97.5666 12 41.6537 8 87.374 12 26.2995 8 22.2569 11 90.7212 8]
Total: 1374.2185000000002
Mean: 27.48437
Genome size: 83
Size: 84
Percent parens: 0.012
--- Population Statistics ---
Average total errors in population: 5586.242492499999
Median total errors in population: 1390.6950000000002
Error averages by case: (273.7423525000003 9.004 303.1233646999981 10.569 168.80528640000165 9.919 140.17580310000028 8.79 165.8505154000003 9.582 178.3871399000005 10.123 288.8228445000007 9.441 211.48707319999798 12.106 148.57650609999945 10.198 228.87548989999775 10.93 176.23111750000146 10.922 284.3044381000003 9.341 91.7390421999999 9.896 134.85921390000095 11.524 186.0383967000024 10.208 258.6870250000022 10.168 225.40649139999985 9.483 245.56968890000255 10.721 215.96908709999983 9.137 288.56002079999985 12.246 247.08661199999835 9.418 280.5751067000029 12.221 234.4379878999983 9.591 148.55379569999891 11.346 204.15909290000042 9.335)
Error minima by case: (62.9993 7 13.0683 9 8.7667 8 2.4873 6 23.213 8 9.7321 7 0.9084 8 8.2814 9 7.4911 8 14.1746 8 13.2245 9 85.8977 6 20.8924 7 5.0919 9 20.0217 8 37.1825 8 12.5377 8 7.7469 8 0.0511 6 13.4856 8 10.4039 7 0.7175 9 1.301 7 9.2481 9 30.7339 7)
Average genome size in population (length): 90.484
Average program size in population (points): 91.484
Average percent parens in population: 0.011
Minimum age in population: 184.1425155671826
Maximum age in population: 188.6862310937699
Average age in population: 186.3610298570196
Median age in population: 186.4039093709275
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 7
Genome diversity (% unique Plush genomes):	 0.877
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 7
Syntactic diversity (% unique Push programs):	 0.877
Total error diversity:				 0.422
Error (vector) diversity:			 0.436
Behavioral diversity:				 0.436
--- Run Statistics ---
Number of program evaluations used so far: 134000
Number of point (instruction) evaluations so far: 235765090
--- Timings ---
Current time: 1529615426296 milliseconds
Total Time:         532.2 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       203.3 seconds, 38.2%
Fitness Testing:    261.7 seconds, 49.2%
Report:              67.1 seconds, 12.6%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 133
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 134
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 134
;;******************************
;; -*- Number IO problem report - generation 134
Test total error for best: 64452.02020000002
Test mean error for best: 32.22601
;;------------------------------
Outputs of best individual on training cases:
Correct output: -116.076402553 | Program output: -41.0401600   
Correct output: 24.1400847456  | Program output: -10.07181     
Correct output: 69.833290954   | Program output: 20.0219241    
Correct output: 82.4958592801  | Program output: 94.015857281  
Correct output: 34.2385110874  | Program output: 81.02551287   
Correct output: -10.7358110665 | Program output: 47.048110545  
Correct output: 1.9700532093   | Program output: -11.050100    
Correct output: -44.7956976677 | Program output: 51.052140557  
Correct output: 68.5576547673  | Program output: 46.047103777  
Correct output: -69.2536523379 | Program output: -54.0192809   
Correct output: -14.2275745396 | Program output: 41.04274047   
Correct output: -171.9767905886 | Program output: -85.0767056   
Correct output: -32.1846093265 | Program output: 1.0265        
Correct output: 66.9812146721  | Program output: 73.074405151  
Correct output: 100.0259781081 | Program output: 34.03542841   
Correct output: -90.2595503995 | Program output: -34.0791089   
Correct output: -82.4635707651 | Program output: -96.0659025   
Correct output: -8.7492896214  | Program output: -50.0312401   
Correct output: -82.1329348831 | Program output: -82.0796561   
Correct output: 24.5261129925  | Program output: -73.0405184   
Correct output: -11.4065589042 | Program output: -53.0602704   
Correct output: 10.3282540908  | Program output: -77.045776    
Correct output: -51.7760580299 | Program output: -78.0755929   
Correct output: 51.8185003253  | Program output: 74.075421801  
Correct output: 110.7431489201 | Program output: 20.0219241    
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_yankdup} {:instruction float_swap} {:instruction float_mult} {:instruction float_yankdup} {:instruction float_pop} {:instruction float_mult} {:instruction in2} {:instruction integer_inc} {:instruction float_yankdup} {:instruction float_yank} {:instruction float_mult} {:instruction 28} {:instruction integer_add} {:instruction float_pop} {:instruction integer_inc} {:instruction in2} {:instruction float_max} {:instruction float_rot} {:instruction print_float} {:instruction integer_mult} {:instruction float_mult} {:instruction float_pop} {:instruction float_mult} {:instruction integer_inc} {:instruction in2} {:instruction float_max} {:instruction integer_dup} {:instruction print_float} {:instruction integer_mult} {:instruction float_mult} {:instruction float_pop} {:instruction float_mult} {:instruction float_mult} {:instruction in2} {:instruction float_sub} {:instruction float_sub} {:instruction float_mult} {:instruction integer_dup} {:instruction integer_dup} {:instruction float_add} {:instruction integer_dec} {:instruction integer_shove} {:instruction float_mult} {:instruction float_add} {:instruction float_rot} {:instruction integer_mult} {:instruction integer_dup} {:instruction float_add} {:instruction integer_dup} {:instruction float_add} {:instruction integer_dec} {:instruction integer_mult} {:instruction float_mult} {:instruction float_yankdup} {:instruction float_tan} {:instruction float_tan} {:instruction in2} {:instruction in2} {:instruction float_yankdup} {:instruction integer_dup} {:instruction integer_pop} {:instruction integer_dec} {:instruction float_cos} {:instruction float_frominteger} {:instruction integer_swap} {:instruction integer_mod} {:instruction integer_dup} {:instruction 80} {:instruction integer_mod} {:instruction integer_dup} {:instruction print_float} {:instruction float_frominteger} {:instruction print_integer} {:instruction integer_sub} {:instruction integer_inc} {:instruction integer_max} {:instruction integer_stackdepth} {:instruction float_shove} {:instruction float_mult} {:instruction integer_max} {:instruction integer_add} {:instruction float_inc} {:instruction integer_mult} {:instruction integer_shove} {:instruction print_integer} {:instruction float_dup})
Best program: (float_yankdup float_swap float_mult float_yankdup float_pop float_mult in2 integer_inc float_yankdup float_yank float_mult 28 integer_add float_pop integer_inc in2 float_max float_rot print_float integer_mult float_mult float_pop float_mult integer_inc in2 float_max integer_dup print_float integer_mult float_mult float_pop float_mult float_mult in2 float_sub float_sub float_mult integer_dup integer_dup float_add integer_dec integer_shove float_mult float_add float_rot integer_mult integer_dup float_add integer_dup float_add integer_dec integer_mult float_mult float_yankdup float_tan float_tan in2 in2 float_yankdup integer_dup integer_pop integer_dec float_cos float_frominteger integer_swap integer_mod integer_dup 80 integer_mod integer_dup print_float float_frominteger print_integer integer_sub integer_inc integer_max integer_stackdepth float_shove float_mult integer_max integer_add float_inc integer_mult integer_shove print_integer float_dup)
Errors: [75.0362 8 34.2119 10 49.8114 9 11.52 6 46.787 8 57.7839 8 13.0202 9 95.8478 11 22.5106 9 15.2344 10 55.2703 10 86.9001 7 33.2111 9 6.0932 11 65.9905 9 56.1804 9 13.6023 8 41.282 10 0.0533 8 97.5666 12 41.6537 8 87.374 12 26.2995 8 22.2569 11 90.7212 8]
Total: 1374.2185000000002
Mean: 27.48437
Genome size: 86
Size: 87
Percent parens: 0.011
--- Population Statistics ---
Average total errors in population: 5408.227392699998
Median total errors in population: 1395.18615
Error averages by case: (261.99555920000114 8.877 325.65529719999824 10.54 156.9374913000012 9.773 130.0030343000004 8.679 156.7320372999992 9.452 168.2296967000001 9.989 311.9456547000011 9.38 201.64166839999874 11.952 137.71178539999923 10.003 219.14376049999805 10.759 166.00208620000083 10.761 275.61777529999995 9.302 85.72148929999989 9.882 123.79738530000097 11.325 175.55502300000177 10.075 244.78536610000162 10.039 217.28513999999998 9.351 238.2244713000021 10.592 206.69698859999963 8.998 281.65941579999924 12.122 239.12399489999848 9.298 273.61076330000225 12.083 226.66638289999844 9.501 137.80146779999856 11.137 192.58365790000025 9.23)
Error minima by case: (40.0 7 9.0 8 9.176 8 2.4959 6 30.213 7 9.6874 8 2.08 7 2.8473 9 10.4434 8 14.2264 8 13.1853 9 84.0 7 2.0 4 5.0931 8 13.916 8 33.0 8 12.5364 8 7.7171 8 0.0527 6 15.5144 8 10.3944 8 4.6775 8 4.133 7 21.2568 8 21.0 8)
Average genome size in population (length): 90.407
Average program size in population (points): 91.407
Average percent parens in population: 0.011
Minimum age in population: 185.6340146366455
Maximum age in population: 189.6898225039926
Average age in population: 187.7387613352256
Median age in population: 187.7872580997754
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 8
Genome diversity (% unique Plush genomes):	 0.881
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 8
Syntactic diversity (% unique Push programs):	 0.881
Total error diversity:				 0.412
Error (vector) diversity:			 0.426
Behavioral diversity:				 0.427
--- Run Statistics ---
Number of program evaluations used so far: 135000
Number of point (instruction) evaluations so far: 238025265
--- Timings ---
Current time: 1529615430884 milliseconds
Total Time:         536.9 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       204.9 seconds, 38.2%
Fitness Testing:    264.2 seconds, 49.2%
Report:              67.7 seconds, 12.6%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 134
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 135
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 135
;;******************************
;; -*- Number IO problem report - generation 135
Test total error for best: 64453.020200000035
Test mean error for best: 32.22651
;;------------------------------
Outputs of best individual on training cases:
Correct output: -116.076402553 | Program output: -41.0401600   
Correct output: 24.1400847456  | Program output: -10.07181     
Correct output: 69.833290954   | Program output: 20.0219241    
Correct output: 82.4958592801  | Program output: 94.015857281  
Correct output: 34.2385110874  | Program output: 81.02551287   
Correct output: -10.7358110665 | Program output: 47.048110545  
Correct output: 1.9700532093   | Program output: -11.050100    
Correct output: -44.7956976677 | Program output: 51.052140557  
Correct output: 68.5576547673  | Program output: 46.047103777  
Correct output: -69.2536523379 | Program output: -54.0192809   
Correct output: -14.2275745396 | Program output: 41.04274047   
Correct output: -171.9767905886 | Program output: -85.0767056   
Correct output: -32.1846093265 | Program output: 1.0265        
Correct output: 66.9812146721  | Program output: 73.074405151  
Correct output: 100.0259781081 | Program output: 34.03542841   
Correct output: -90.2595503995 | Program output: -34.0791089   
Correct output: -82.4635707651 | Program output: -96.0659025   
Correct output: -8.7492896214  | Program output: -50.0312401   
Correct output: -82.1329348831 | Program output: -82.0796561   
Correct output: 24.5261129925  | Program output: -73.0405184   
Correct output: -11.4065589042 | Program output: -53.0602704   
Correct output: 10.3282540908  | Program output: -77.045776    
Correct output: -51.7760580299 | Program output: -78.0755929   
Correct output: 51.8185003253  | Program output: 74.075421801  
Correct output: 110.7431489201 | Program output: 20.0219241    
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_yankdup} {:instruction float_cos} {:instruction float_mult} {:instruction float_inc} {:instruction float_mult} {:instruction in2} {:instruction integer_inc} {:instruction float_yankdup} {:instruction float_yank} {:instruction float_mult} {:instruction 28} {:instruction integer_add} {:instruction float_pop} {:instruction integer_inc} {:instruction in2} {:instruction float_max} {:instruction float_rot} {:instruction print_float} {:instruction integer_mult} {:instruction float_mult} {:instruction float_pop} {:instruction float_dup_times} {:instruction integer_inc} {:instruction in2} {:instruction float_max} {:instruction integer_dup} {:instruction float_rot} {:instruction print_float} {:instruction integer_mult} {:instruction float_mult} {:instruction float_mult} {:instruction float_mult} {:instruction in2} {:instruction float_sub} {:instruction integer_dup} {:instruction integer_dup} {:instruction float_add} {:instruction integer_dec} {:instruction integer_shove} {:instruction float_mult} {:instruction float_add} {:instruction float_rot} {:instruction integer_mult} {:instruction integer_dup} {:instruction float_add} {:instruction integer_dup} {:instruction float_add} {:instruction integer_dec} {:instruction integer_mult} {:instruction float_mult} {:instruction float_yankdup} {:instruction float_tan} {:instruction in2} {:instruction float_max} {:instruction float_pop} {:instruction float_mod} {:instruction in2} {:instruction float_yankdup} {:instruction integer_dup} {:instruction integer_pop} {:instruction integer_dec} {:instruction float_cos} {:instruction float_frominteger} {:instruction integer_swap} {:instruction integer_mod} {:instruction integer_dup} {:instruction 80} {:instruction integer_mod} {:instruction integer_dup} {:instruction print_float} {:instruction float_frominteger} {:instruction print_integer} {:instruction integer_sub} {:instruction integer_inc} {:instruction integer_max} {:instruction integer_stackdepth} {:instruction float_shove} {:instruction float_mult} {:instruction integer_max} {:instruction float_dup} {:instruction float_inc} {:instruction integer_mult} {:instruction integer_shove} {:instruction print_integer} {:instruction integer_swap})
Best program: (float_yankdup float_cos float_mult float_inc float_mult in2 integer_inc float_yankdup float_yank float_mult 28 integer_add float_pop integer_inc in2 float_max float_rot print_float integer_mult float_mult float_pop float_dup_times integer_inc in2 float_max integer_dup float_rot print_float integer_mult float_mult float_mult float_mult in2 float_sub integer_dup integer_dup float_add integer_dec integer_shove float_mult float_add float_rot integer_mult integer_dup float_add integer_dup float_add integer_dec integer_mult float_mult float_yankdup float_tan in2 float_max float_pop float_mod in2 float_yankdup integer_dup integer_pop integer_dec float_cos float_frominteger integer_swap integer_mod integer_dup 80 integer_mod integer_dup print_float float_frominteger print_integer integer_sub integer_inc integer_max integer_stackdepth float_shove float_mult integer_max float_dup float_inc integer_mult integer_shove print_integer integer_swap)
Errors: [75.0362 8 34.2119 10 49.8114 9 11.52 6 46.787 8 57.7839 8 13.0202 9 95.8478 11 22.5106 9 15.2344 10 55.2703 10 86.9001 7 33.2111 9 6.0932 11 65.9905 9 56.1804 9 13.6023 8 41.282 10 0.0533 8 97.5666 12 41.6537 8 87.374 12 26.2995 8 22.2569 11 90.7212 8]
Total: 1374.2185000000002
Mean: 27.48437
Genome size: 85
Size: 86
Percent parens: 0.012
--- Population Statistics ---
Average total errors in population: 5152.6329443999975
Median total errors in population: 1380.19645
Error averages by case: (240.77769560000092 8.803 315.135196399998 10.543 161.9144015000016 9.757 129.26295980000083 8.461 157.66087039999965 9.369 169.76056910000025 9.876 299.0068081000018 9.422 202.21360549999812 11.916 139.45065289999937 9.964 193.45386689999833 10.762 167.59329930000115 10.711 252.8576957999993 9.143 96.35180589999992 9.796 124.25694260000112 11.336 177.522755700002 10.031 223.66496160000187 9.985 192.44949129999958 9.259 214.25936390000237 10.598 181.63159419999977 8.95 258.9300023999987 12.079 213.98040969999823 9.211 250.56734640000224 12.118 202.17866329999828 9.409 138.18551399999876 11.181 197.6954721000003 9.191)
Error minima by case: (20.9973 7 21.1401 8 10.176 8 2.4873 5 6.21 8 9.7238 8 0.9701 7 31.1971 9 11.4434 8 6.7391 8 13.2156 8 76.8976 7 31.1396 8 5.0911 9 20.0217 7 4.8196 8 6.4708 8 7.6918 8 0.0527 6 14.5144 8 10.3921 8 6.2825 9 24.2167 8 4.7712 8 10.2569 8)
Average genome size in population (length): 90.786
Average program size in population (points): 91.786
Average percent parens in population: 0.011
Minimum age in population: 186.6340146366455
Maximum age in population: 191.3497493672425
Average age in population: 189.0457164874292
Median age in population: 189.064592117595
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 6
Genome diversity (% unique Plush genomes):	 0.88
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 6
Syntactic diversity (% unique Push programs):	 0.88
Total error diversity:				 0.394
Error (vector) diversity:			 0.406
Behavioral diversity:				 0.406
--- Run Statistics ---
Number of program evaluations used so far: 136000
Number of point (instruction) evaluations so far: 240294915
--- Timings ---
Current time: 1529615435233 milliseconds
Total Time:         541.2 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       206.4 seconds, 38.1%
Fitness Testing:    266.5 seconds, 49.2%
Report:              68.2 seconds, 12.6%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 135
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 136
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 136
;;******************************
;; -*- Number IO problem report - generation 136
Test total error for best: 64457.02010000003
Test mean error for best: 32.22851
;;------------------------------
Outputs of best individual on training cases:
Correct output: -116.076402553 | Program output: -41.0401600   
Correct output: 24.1400847456  | Program output: -10.07181     
Correct output: 69.833290954   | Program output: 20.0219241    
Correct output: 82.4958592801  | Program output: 94.015857281  
Correct output: 34.2385110874  | Program output: 81.02551287   
Correct output: -10.7358110665 | Program output: 47.048110545  
Correct output: 1.9700532093   | Program output: -11.050100    
Correct output: -44.7956976677 | Program output: 51.052140557  
Correct output: 68.5576547673  | Program output: 46.047103777  
Correct output: -69.2536523379 | Program output: -54.0192809   
Correct output: -14.2275745396 | Program output: 41.04274047   
Correct output: -171.9767905886 | Program output: -85.0767056   
Correct output: -32.1846093265 | Program output: 1.0265        
Correct output: 66.9812146721  | Program output: 73.074405151  
Correct output: 100.0259781081 | Program output: 34.03542841   
Correct output: -90.2595503995 | Program output: -34.0791089   
Correct output: -82.4635707651 | Program output: -96.0659025   
Correct output: -8.7492896214  | Program output: -50.0312401   
Correct output: -82.1329348831 | Program output: -82.0796561   
Correct output: 24.5261129925  | Program output: -73.0405184   
Correct output: -11.4065589042 | Program output: -53.0602704   
Correct output: 10.3282540908  | Program output: -77.045776    
Correct output: -51.7760580299 | Program output: -78.0755929   
Correct output: 51.8185003253  | Program output: 74.075421801  
Correct output: 110.7431489201 | Program output: 20.0219241    
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_yankdup} {:instruction float_cos} {:instruction float_mult} {:instruction float_yankdup} {:instruction integer_div} {:instruction float_mult} {:instruction in2} {:instruction integer_inc} {:instruction float_yankdup} {:instruction float_yank} {:instruction float_mult} {:instruction 28} {:instruction integer_add} {:instruction float_pop} {:instruction integer_inc} {:instruction in2} {:instruction float_max} {:instruction float_rot} {:instruction print_float} {:instruction integer_mult} {:instruction float_mult} {:instruction print_float} {:instruction integer_mult} {:instruction float_mult} {:instruction integer_sub} {:instruction float_mult} {:instruction integer_inc} {:instruction in2} {:instruction float_max} {:instruction integer_dup} {:instruction print_float} {:instruction integer_mult} {:instruction float_mult} {:instruction float_pop} {:instruction float_mult} {:instruction float_mult} {:instruction float_mult} {:instruction in2} {:instruction float_sub} {:instruction float_sub} {:instruction float_mult} {:instruction integer_dup} {:instruction integer_dup} {:instruction float_add} {:instruction integer_dec} {:instruction integer_shove} {:instruction float_mult} {:instruction float_add} {:instruction float_mult} {:instruction integer_mult} {:instruction integer_dup} {:instruction float_add} {:instruction integer_dup} {:instruction float_add} {:instruction integer_dec} {:instruction integer_mult} {:instruction float_mult} {:instruction float_yankdup} {:instruction float_tan} {:instruction in2} {:instruction float_frominteger} {:instruction in2} {:instruction float_max} {:instruction float_pop} {:instruction float_mod} {:instruction in2} {:instruction float_yankdup} {:instruction integer_dup} {:instruction integer_pop} {:instruction integer_dec} {:instruction float_cos} {:instruction float_frominteger} {:instruction integer_swap} {:instruction integer_mod} {:instruction integer_dup} {:instruction 80} {:instruction integer_mod} {:instruction integer_dup} {:instruction print_float} {:instruction float_frominteger} {:instruction print_integer} {:instruction integer_sub} {:instruction integer_inc} {:instruction integer_max} {:instruction integer_stackdepth} {:instruction integer_inc} {:instruction integer_max} {:instruction integer_stackdepth} {:instruction float_shove} {:instruction float_mult} {:instruction integer_max} {:instruction float_dup} {:instruction float_inc} {:instruction integer_mult} {:instruction integer_shove} {:instruction print_integer} {:instruction integer_swap})
Best program: (float_yankdup float_cos float_mult float_yankdup integer_div float_mult in2 integer_inc float_yankdup float_yank float_mult 28 integer_add float_pop integer_inc in2 float_max float_rot print_float integer_mult float_mult print_float integer_mult float_mult integer_sub float_mult integer_inc in2 float_max integer_dup print_float integer_mult float_mult float_pop float_mult float_mult float_mult in2 float_sub float_sub float_mult integer_dup integer_dup float_add integer_dec integer_shove float_mult float_add float_mult integer_mult integer_dup float_add integer_dup float_add integer_dec integer_mult float_mult float_yankdup float_tan in2 float_frominteger in2 float_max float_pop float_mod in2 float_yankdup integer_dup integer_pop integer_dec float_cos float_frominteger integer_swap integer_mod integer_dup 80 integer_mod integer_dup print_float float_frominteger print_integer integer_sub integer_inc integer_max integer_stackdepth integer_inc integer_max integer_stackdepth float_shove float_mult integer_max float_dup float_inc integer_mult integer_shove print_integer integer_swap)
Errors: [75.0362 8 34.2119 10 49.8114 9 11.52 6 46.787 8 57.7839 8 13.0202 9 95.8478 11 22.5106 9 15.2344 10 55.2703 10 86.9001 7 33.2111 9 6.0932 11 65.9905 9 56.1804 9 13.6023 8 41.282 10 0.0533 8 97.5666 12 41.6537 8 87.374 12 26.2995 8 22.2569 11 90.7212 8]
Total: 1374.2185000000002
Mean: 27.48437
Genome size: 97
Size: 98
Percent parens: 0.010
--- Population Statistics ---
Average total errors in population: 4897.437496399997
Median total errors in population: 1390.65875
Error averages by case: (241.15819640000095 8.777 303.77857499999834 10.538 139.968546600001 9.791 109.90388040000028 8.615 140.32378959999883 9.438 150.98348349999932 9.988 289.7075298000003 9.364 185.24584509999897 11.979 118.46825689999942 10.049 194.2569562999988 10.756 147.82885150000084 10.797 253.32920919999935 9.14 77.69893649999993 9.903 104.88620330000086 11.381 156.55086790000092 10.075 221.89774320000114 9.965 192.09644939999953 9.234 213.38469030000226 10.527 181.26172889999972 8.898 259.29152529999914 12.096 214.09064329999845 9.155 251.00395330000183 12.081 202.07036879999873 9.374 119.26450149999879 11.207 176.6417644000003 9.217)
Error minima by case: (74.0362 7 15.9317 8 9.1721 8 0.9809 5 5.787 7 9.7435 7 0.9701 7 44.8468 9 9.4423 8 14.2344 8 13.2402 9 85.9001 7 32.2024 8 5.0932 8 16.5492 7 55.1804 7 12.5364 7 8.8288 8 0.0511 6 14.5462 9 10.4883 8 4.2489 9 25.2239 8 11.7431 8 27.2664 8)
Average genome size in population (length): 90.626
Average program size in population (points): 91.626
Average percent parens in population: 0.011
Minimum age in population: 188.0078607916068
Maximum age in population: 192.8045050765312
Average age in population: 190.4611536907368
Median age in population: 190.4760053597677
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 8
Genome diversity (% unique Plush genomes):	 0.888
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 8
Syntactic diversity (% unique Push programs):	 0.888
Total error diversity:				 0.391
Error (vector) diversity:			 0.4
Behavioral diversity:				 0.401
--- Run Statistics ---
Number of program evaluations used so far: 137000
Number of point (instruction) evaluations so far: 242560615
--- Timings ---
Current time: 1529615439668 milliseconds
Total Time:         545.6 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       207.9 seconds, 38.1%
Fitness Testing:    268.7 seconds, 49.3%
Report:              68.8 seconds, 12.6%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 136
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 137
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 137
;;******************************
;; -*- Number IO problem report - generation 137
Test total error for best: 64453.020200000035
Test mean error for best: 32.22651
;;------------------------------
Outputs of best individual on training cases:
Correct output: -116.076402553 | Program output: -41.0401600   
Correct output: 24.1400847456  | Program output: -10.07181     
Correct output: 69.833290954   | Program output: 20.0219241    
Correct output: 82.4958592801  | Program output: 94.015857281  
Correct output: 34.2385110874  | Program output: 81.02551287   
Correct output: -10.7358110665 | Program output: 47.048110545  
Correct output: 1.9700532093   | Program output: -11.050100    
Correct output: -44.7956976677 | Program output: 51.052140557  
Correct output: 68.5576547673  | Program output: 46.047103777  
Correct output: -69.2536523379 | Program output: -54.0192809   
Correct output: -14.2275745396 | Program output: 41.04274047   
Correct output: -171.9767905886 | Program output: -85.0767056   
Correct output: -32.1846093265 | Program output: 1.0265        
Correct output: 66.9812146721  | Program output: 73.074405151  
Correct output: 100.0259781081 | Program output: 34.03542841   
Correct output: -90.2595503995 | Program output: -34.0791089   
Correct output: -82.4635707651 | Program output: -96.0659025   
Correct output: -8.7492896214  | Program output: -50.0312401   
Correct output: -82.1329348831 | Program output: -82.0796561   
Correct output: 24.5261129925  | Program output: -73.0405184   
Correct output: -11.4065589042 | Program output: -53.0602704   
Correct output: 10.3282540908  | Program output: -77.045776    
Correct output: -51.7760580299 | Program output: -78.0755929   
Correct output: 51.8185003253  | Program output: 74.075421801  
Correct output: 110.7431489201 | Program output: 20.0219241    
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_yankdup} {:instruction float_cos} {:instruction float_mult} {:instruction float_yankdup} {:instruction float_sin} {:instruction float_yankdup} {:instruction float_pop} {:instruction float_mult} {:instruction float_yankdup} {:instruction float_mod} {:instruction float_mult} {:instruction in2} {:instruction integer_inc} {:instruction float_yankdup} {:instruction float_min} {:instruction integer_add} {:instruction 28} {:instruction integer_add} {:instruction float_pop} {:instruction integer_inc} {:instruction in2} {:instruction float_dup_times} {:instruction float_max} {:instruction print_float} {:instruction integer_mult} {:instruction float_mult} {:instruction float_pop} {:instruction float_mult} {:instruction integer_inc} {:instruction in2} {:instruction float_max} {:instruction integer_dup} {:instruction print_float} {:instruction integer_mult} {:instruction float_mult} {:instruction float_pop} {:instruction float_min} {:instruction float_mult} {:instruction in2} {:instruction float_sub} {:instruction float_sub} {:instruction float_mult} {:instruction integer_dup} {:instruction integer_dup} {:instruction float_add} {:instruction integer_dec} {:instruction integer_shove} {:instruction float_mult} {:instruction float_add} {:instruction float_rot} {:instruction integer_mult} {:instruction integer_dup} {:instruction float_add} {:instruction integer_dup} {:instruction float_add} {:instruction integer_dec} {:instruction integer_mult} {:instruction float_mult} {:instruction float_yankdup} {:instruction float_tan} {:instruction in2} {:instruction in2} {:instruction float_dup_times} {:instruction float_yankdup} {:instruction integer_dup} {:instruction integer_pop} {:instruction integer_dec} {:instruction float_cos} {:instruction float_frominteger} {:instruction integer_swap} {:instruction integer_mod} {:instruction integer_dup} {:instruction 80} {:instruction integer_mod} {:instruction integer_dup} {:instruction print_float} {:instruction float_frominteger} {:instruction print_integer} {:instruction integer_sub} {:instruction integer_inc} {:instruction integer_max} {:instruction integer_stackdepth} {:instruction float_shove} {:instruction float_mult} {:instruction integer_max} {:instruction float_dup} {:instruction float_inc} {:instruction integer_mult} {:instruction float_min} {:instruction print_integer} {:instruction integer_swap})
Best program: (float_yankdup float_cos float_mult float_yankdup float_sin float_yankdup float_pop float_mult float_yankdup float_mod float_mult in2 integer_inc float_yankdup float_min integer_add 28 integer_add float_pop integer_inc in2 float_dup_times float_max print_float integer_mult float_mult float_pop float_mult integer_inc in2 float_max integer_dup print_float integer_mult float_mult float_pop float_min float_mult in2 float_sub float_sub float_mult integer_dup integer_dup float_add integer_dec integer_shove float_mult float_add float_rot integer_mult integer_dup float_add integer_dup float_add integer_dec integer_mult float_mult float_yankdup float_tan in2 in2 float_dup_times float_yankdup integer_dup integer_pop integer_dec float_cos float_frominteger integer_swap integer_mod integer_dup 80 integer_mod integer_dup print_float float_frominteger print_integer integer_sub integer_inc integer_max integer_stackdepth float_shove float_mult integer_max float_dup float_inc integer_mult float_min print_integer integer_swap)
Errors: [75.0362 8 34.2119 10 49.8114 9 11.52 6 46.787 8 57.7839 8 13.0202 9 95.8478 11 22.5106 9 15.2344 10 55.2703 10 86.9001 7 33.2111 9 6.0932 11 65.9905 9 56.1804 9 13.6023 8 41.282 10 0.0533 8 97.5666 12 41.6537 8 87.374 12 26.2995 8 22.2569 11 90.7212 8]
Total: 1374.2185000000002
Mean: 27.48437
Genome size: 91
Size: 92
Percent parens: 0.011
--- Population Statistics ---
Average total errors in population: 5337.250673600003
Median total errors in population: 1399.1342000000002
Error averages by case: (255.25764970000088 8.907 323.0519735999984 10.562 160.92092960000144 9.859 129.60960040000055 8.884 155.87135389999935 9.581 170.0915769 10.188 309.23145190000065 9.383 203.52690459999886 12.052 138.85046879999922 10.172 210.41712989999866 10.803 166.99838590000095 10.857 268.5426210999998 9.393 77.80586110000004 9.933 125.65996220000096 11.41 177.7950145000013 10.209 240.30763630000166 10.113 209.71985369999987 9.43 230.23173930000243 10.609 198.9397593999999 9.101 275.1439438999991 12.092 230.71489899999852 9.375 266.99261310000196 12.141 219.23649719999872 9.584 140.52990759999867 11.224 196.5899400000003 9.351)
Error minima by case: (74.036 7 13.0647 9 9.176 8 3.4873 5 16.8789 8 9.7321 8 0.9701 8 5.9628 9 10.4434 8 14.1608 8 13.2245 9 85.9001 7 6.6483 6 5.0608 8 21.0217 7 51.4266 8 11.6023 8 7.7469 7 0.0329 6 7.1665 9 10.4039 7 0.753 9 12.9432 8 21.2515 9 12.2569 7)
Average genome size in population (length): 90.537
Average program size in population (points): 91.537
Average percent parens in population: 0.011
Minimum age in population: 189.1219209553293
Maximum age in population: 193.8116936594669
Average age in population: 191.7881471428962
Median age in population: 191.8554224967305
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 6
Genome diversity (% unique Plush genomes):	 0.895
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 6
Syntactic diversity (% unique Push programs):	 0.895
Total error diversity:				 0.43
Error (vector) diversity:			 0.441
Behavioral diversity:				 0.442
--- Run Statistics ---
Number of program evaluations used so far: 138000
Number of point (instruction) evaluations so far: 244824040
--- Timings ---
Current time: 1529615444564 milliseconds
Total Time:         550.3 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       209.6 seconds, 38.1%
Fitness Testing:    271.2 seconds, 49.3%
Report:              69.4 seconds, 12.6%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 137
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 138
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 138
;;******************************
;; -*- Number IO problem report - generation 138
Test total error for best: 64452.02020000002
Test mean error for best: 32.22601
;;------------------------------
Outputs of best individual on training cases:
Correct output: -116.076402553 | Program output: -41.0401600   
Correct output: 24.1400847456  | Program output: -10.07181     
Correct output: 69.833290954   | Program output: 20.0219241    
Correct output: 82.4958592801  | Program output: 94.015857281  
Correct output: 34.2385110874  | Program output: 81.02551287   
Correct output: -10.7358110665 | Program output: 47.048110545  
Correct output: 1.9700532093   | Program output: -11.050100    
Correct output: -44.7956976677 | Program output: 51.052140557  
Correct output: 68.5576547673  | Program output: 46.047103777  
Correct output: -69.2536523379 | Program output: -54.0192809   
Correct output: -14.2275745396 | Program output: 41.04274047   
Correct output: -171.9767905886 | Program output: -85.0767056   
Correct output: -32.1846093265 | Program output: 1.0265        
Correct output: 66.9812146721  | Program output: 73.074405151  
Correct output: 100.0259781081 | Program output: 34.03542841   
Correct output: -90.2595503995 | Program output: -34.0791089   
Correct output: -82.4635707651 | Program output: -96.0659025   
Correct output: -8.7492896214  | Program output: -50.0312401   
Correct output: -82.1329348831 | Program output: -82.0796561   
Correct output: 24.5261129925  | Program output: -73.0405184   
Correct output: -11.4065589042 | Program output: -53.0602704   
Correct output: 10.3282540908  | Program output: -77.045776    
Correct output: -51.7760580299 | Program output: -78.0755929   
Correct output: 51.8185003253  | Program output: 74.075421801  
Correct output: 110.7431489201 | Program output: 20.0219241    
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_yankdup} {:instruction float_cos} {:instruction float_mult} {:instruction float_cos} {:instruction float_pop} {:instruction float_mult} {:instruction float_cos} {:instruction float_mult} {:instruction float_yankdup} {:instruction float_pop} {:instruction float_mult} {:instruction in2} {:instruction integer_inc} {:instruction float_yankdup} {:instruction float_yank} {:instruction float_mult} {:instruction 28} {:instruction integer_add} {:instruction float_pop} {:instruction integer_inc} {:instruction in2} {:instruction float_max} {:instruction float_max} {:instruction float_rot} {:instruction print_float} {:instruction integer_mult} {:instruction float_mult} {:instruction float_pop} {:instruction float_mult} {:instruction integer_inc} {:instruction in2} {:instruction float_max} {:instruction integer_dup} {:instruction print_float} {:instruction integer_mult} {:instruction float_mult} {:instruction float_swap} {:instruction float_mult} {:instruction float_mult} {:instruction in2} {:instruction float_sub} {:instruction float_sub} {:instruction float_mult} {:instruction integer_dup} {:instruction integer_dup} {:instruction float_add} {:instruction integer_dec} {:instruction integer_shove} {:instruction float_mult} {:instruction float_add} {:instruction float_rot} {:instruction integer_mult} {:instruction integer_dup} {:instruction integer_dup} {:instruction float_add} {:instruction integer_dec} {:instruction integer_mult} {:instruction float_mult} {:instruction float_yankdup} {:instruction float_tan} {:instruction in2} {:instruction float_max} {:instruction float_pop} {:instruction float_mod} {:instruction in2} {:instruction float_yankdup} {:instruction integer_dup} {:instruction integer_pop} {:instruction integer_dec} {:instruction float_cos} {:instruction float_frominteger} {:instruction integer_swap} {:instruction integer_mod} {:instruction integer_dup} {:instruction 80} {:instruction integer_mod} {:instruction integer_dup} {:instruction print_float} {:instruction float_frominteger} {:instruction print_integer} {:instruction integer_sub} {:instruction integer_inc} {:instruction integer_max} {:instruction integer_stackdepth} {:instruction float_shove} {:instruction float_mult} {:instruction integer_max} {:instruction integer_add} {:instruction float_inc} {:instruction float_max} {:instruction integer_shove} {:instruction float_dup} {:instruction float_inc} {:instruction integer_mult} {:instruction integer_shove} {:instruction print_integer} {:instruction float_shove} {:instruction float_mult} {:instruction float_dup} {:instruction float_inc} {:instruction integer_mult} {:instruction float_frominteger})
Best program: (float_yankdup float_cos float_mult float_cos float_pop float_mult float_cos float_mult float_yankdup float_pop float_mult in2 integer_inc float_yankdup float_yank float_mult 28 integer_add float_pop integer_inc in2 float_max float_max float_rot print_float integer_mult float_mult float_pop float_mult integer_inc in2 float_max integer_dup print_float integer_mult float_mult float_swap float_mult float_mult in2 float_sub float_sub float_mult integer_dup integer_dup float_add integer_dec integer_shove float_mult float_add float_rot integer_mult integer_dup integer_dup float_add integer_dec integer_mult float_mult float_yankdup float_tan in2 float_max float_pop float_mod in2 float_yankdup integer_dup integer_pop integer_dec float_cos float_frominteger integer_swap integer_mod integer_dup 80 integer_mod integer_dup print_float float_frominteger print_integer integer_sub integer_inc integer_max integer_stackdepth float_shove float_mult integer_max integer_add float_inc float_max integer_shove float_dup float_inc integer_mult integer_shove print_integer float_shove float_mult float_dup float_inc integer_mult float_frominteger)
Errors: [75.0362 8 34.2119 10 49.8114 9 11.52 6 46.787 8 57.7839 8 13.0202 9 95.8478 11 22.5106 9 15.2344 10 55.2703 10 86.9001 7 33.2111 9 6.0932 11 65.9905 9 56.1804 9 13.6023 8 41.282 10 0.0533 8 97.5666 12 41.6537 8 87.374 12 26.2995 8 22.2569 11 90.7212 8]
Total: 1374.2185000000002
Mean: 27.48437
Genome size: 102
Size: 103
Percent parens: 0.010
--- Population Statistics ---
Average total errors in population: 5379.3427995
Median total errors in population: 1395.7327500000001
Error averages by case: (265.69991700000094 8.965 328.45595279999833 10.553 156.10047340000102 9.805 123.14916690000075 8.727 151.9000737999994 9.477 163.26665860000028 10.044 313.6258205000016 9.418 197.02799369999858 11.975 132.33815769999916 10.08 219.45327599999766 10.909 161.10854230000086 10.8 275.07101620000003 9.412 95.10939510000013 9.882 118.13241140000088 11.333 170.52386520000164 10.137 247.88770720000232 10.107 216.57039740000002 9.405 240.38138930000244 10.691 206.0849690999998 9.076 280.73651599999926 12.173 239.23010359999853 9.362 272.72048330000257 12.125 226.00847389999862 9.63 132.22823709999858 11.167 192.00780200000037 9.271)
Error minima by case: (35.0748 7 2.1401 6 10.1667 8 2.4947 5 32.2094 8 9.7238 8 0.9701 7 43.7837 9 11.4423 8 14.2174 8 13.2156 9 2.9697 7 31.1396 7 5.0228 7 20.0237 7 23.2585 9 12.5415 8 7.6918 8 0.0329 6 13.5261 9 9.5934 8 0.6717 9 5.7761 8 21.1857 8 10.2569 8)
Average genome size in population (length): 90.736
Average program size in population (points): 91.736
Average percent parens in population: 0.011
Minimum age in population: 190.1219209553293
Maximum age in population: 195.0665599436175
Average age in population: 193.1078967130382
Median age in population: 193.1546690966209
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 6
Genome diversity (% unique Plush genomes):	 0.877
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 6
Syntactic diversity (% unique Push programs):	 0.877
Total error diversity:				 0.416
Error (vector) diversity:			 0.431
Behavioral diversity:				 0.432
--- Run Statistics ---
Number of program evaluations used so far: 139000
Number of point (instruction) evaluations so far: 247092440
--- Timings ---
Current time: 1529615449239 milliseconds
Total Time:         555.1 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       211.2 seconds, 38.0%
Fitness Testing:    273.6 seconds, 49.3%
Report:              70.2 seconds, 12.6%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 138
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 139
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 139
;;******************************
;; -*- Number IO problem report - generation 139
Test total error for best: 64453.020200000035
Test mean error for best: 32.22651
;;------------------------------
Outputs of best individual on training cases:
Correct output: -116.076402553 | Program output: -41.0401600   
Correct output: 24.1400847456  | Program output: -10.07181     
Correct output: 69.833290954   | Program output: 20.0219241    
Correct output: 82.4958592801  | Program output: 94.015857281  
Correct output: 34.2385110874  | Program output: 81.02551287   
Correct output: -10.7358110665 | Program output: 47.048110545  
Correct output: 1.9700532093   | Program output: -11.050100    
Correct output: -44.7956976677 | Program output: 51.052140557  
Correct output: 68.5576547673  | Program output: 46.047103777  
Correct output: -69.2536523379 | Program output: -54.0192809   
Correct output: -14.2275745396 | Program output: 41.04274047   
Correct output: -171.9767905886 | Program output: -85.0767056   
Correct output: -32.1846093265 | Program output: 1.0265        
Correct output: 66.9812146721  | Program output: 73.074405151  
Correct output: 100.0259781081 | Program output: 34.03542841   
Correct output: -90.2595503995 | Program output: -34.0791089   
Correct output: -82.4635707651 | Program output: -96.0659025   
Correct output: -8.7492896214  | Program output: -50.0312401   
Correct output: -82.1329348831 | Program output: -82.0796561   
Correct output: 24.5261129925  | Program output: -73.0405184   
Correct output: -11.4065589042 | Program output: -53.0602704   
Correct output: 10.3282540908  | Program output: -77.045776    
Correct output: -51.7760580299 | Program output: -78.0755929   
Correct output: 51.8185003253  | Program output: 74.075421801  
Correct output: 110.7431489201 | Program output: 20.0219241    
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_yankdup} {:instruction float_cos} {:instruction float_mult} {:instruction integer_fromfloat} {:instruction float_pop} {:instruction integer_mod} {:instruction float_inc} {:instruction integer_mult} {:instruction integer_pop} {:instruction float_pop} {:instruction integer_mod} {:instruction float_inc} {:instruction float_pop} {:instruction float_mult} {:instruction in2} {:instruction integer_inc} {:instruction float_yankdup} {:instruction float_yank} {:instruction float_mult} {:instruction 28} {:instruction integer_add} {:instruction float_pop} {:instruction integer_inc} {:instruction in2} {:instruction float_max} {:instruction float_max} {:instruction float_rot} {:instruction print_float} {:instruction integer_mult} {:instruction float_mult} {:instruction float_pop} {:instruction float_swap} {:instruction integer_inc} {:instruction in2} {:instruction float_max} {:instruction integer_dup} {:instruction print_float} {:instruction integer_mult} {:instruction float_inc} {:instruction float_pop} {:instruction float_cos} {:instruction float_mult} {:instruction in2} {:instruction float_sub} {:instruction float_sub} {:instruction float_mult} {:instruction integer_dup} {:instruction integer_dup} {:instruction float_add} {:instruction integer_dec} {:instruction integer_shove} {:instruction float_mult} {:instruction float_add} {:instruction float_mult} {:instruction integer_mult} {:instruction integer_dup} {:instruction float_add} {:instruction integer_dup} {:instruction float_add} {:instruction integer_dec} {:instruction integer_mult} {:instruction float_mult} {:instruction float_yankdup} {:instruction float_tan} {:instruction in2} {:instruction float_max} {:instruction float_pop} {:instruction float_mod} {:instruction in2} {:instruction float_yankdup} {:instruction integer_dup} {:instruction integer_pop} {:instruction integer_dec} {:instruction float_cos} {:instruction float_frominteger} {:instruction integer_swap} {:instruction integer_mod} {:instruction integer_dup} {:instruction 80} {:instruction integer_mod} {:instruction integer_dup} {:instruction print_float} {:instruction float_frominteger} {:instruction print_integer} {:instruction integer_sub} {:instruction integer_inc} {:instruction integer_max} {:instruction integer_stackdepth} {:instruction float_shove} {:instruction 72.91027992373763} {:instruction integer_max} {:instruction float_dup} {:instruction float_inc} {:instruction integer_mult} {:instruction integer_shove} {:instruction print_integer} {:instruction integer_swap})
Best program: (float_yankdup float_cos float_mult integer_fromfloat float_pop integer_mod float_inc integer_mult integer_pop float_pop integer_mod float_inc float_pop float_mult in2 integer_inc float_yankdup float_yank float_mult 28 integer_add float_pop integer_inc in2 float_max float_max float_rot print_float integer_mult float_mult float_pop float_swap integer_inc in2 float_max integer_dup print_float integer_mult float_inc float_pop float_cos float_mult in2 float_sub float_sub float_mult integer_dup integer_dup float_add integer_dec integer_shove float_mult float_add float_mult integer_mult integer_dup float_add integer_dup float_add integer_dec integer_mult float_mult float_yankdup float_tan in2 float_max float_pop float_mod in2 float_yankdup integer_dup integer_pop integer_dec float_cos float_frominteger integer_swap integer_mod integer_dup 80 integer_mod integer_dup print_float float_frominteger print_integer integer_sub integer_inc integer_max integer_stackdepth float_shove 72.91027992373763 integer_max float_dup float_inc integer_mult integer_shove print_integer integer_swap)
Errors: [75.0362 8 34.2119 10 49.8114 9 11.52 6 46.787 8 57.7839 8 13.0202 9 95.8478 11 22.5106 9 15.2344 10 55.2703 10 86.9001 7 33.2111 9 6.0932 11 65.9905 9 56.1804 9 13.6023 8 41.282 10 0.0533 8 97.5666 12 41.6537 8 87.374 12 26.2995 8 22.2569 11 90.7212 8]
Total: 1374.2185000000002
Mean: 27.48437
Genome size: 97
Size: 98
Percent parens: 0.010
--- Population Statistics ---
Average total errors in population: 4812.211905399996
Median total errors in population: 1387.2199000000003
Error averages by case: (244.80726320000124 8.796 280.5619933999981 10.47 134.42673240000144 9.749 105.3035286000006 8.576 133.56868399999868 9.437 145.20081259999958 9.93 267.00560779999967 9.351 179.65367259999888 11.919 112.85671669999874 9.994 197.38317549999815 10.727 142.8342917000009 10.743 254.11036179999948 9.161 74.5969651000001 9.791 99.21133370000103 11.372 152.02621750000137 10.01 229.45488130000209 9.967 192.83708569999993 9.291 216.75208410000226 10.568 183.08317939999955 8.949 259.53284509999855 12.103 217.45285569999842 9.206 249.8937099000025 12.119 202.7797014999982 9.423 113.60998529999817 11.155 171.29022080000027 9.171)
Error minima by case: (40.0 5 23.1401 6 10.1667 4 2.4946 5 12.2102 8 8.9917 4 0.1426 5 43.0516 4 11.4423 4 14.1737 6 12.4835 4 84.0 6 2.0 3 5.0218 8 20.0195 5 33.0 5 12.5455 8 7.0052 8 0.0523 6 14.5144 6 9.6625 7 6.3079 6 25.2299 7 21.1847 8 10.2569 5)
Average genome size in population (length): 90.62
Average program size in population (points): 91.62
Average percent parens in population: 0.011
Minimum age in population: 191.9411585075838
Maximum age in population: 196.5728931154941
Average age in population: 194.4286891637174
Median age in population: 194.4630634620732
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 8
Genome diversity (% unique Plush genomes):	 0.89
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 8
Syntactic diversity (% unique Push programs):	 0.89
Total error diversity:				 0.411
Error (vector) diversity:			 0.419
Behavioral diversity:				 0.419
--- Run Statistics ---
Number of program evaluations used so far: 140000
Number of point (instruction) evaluations so far: 249357940
--- Timings ---
Current time: 1529615453793 milliseconds
Total Time:         559.7 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       212.9 seconds, 38.0%
Fitness Testing:    275.9 seconds, 49.3%
Report:              70.9 seconds, 12.7%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 139
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 140
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 140
;;******************************
;; -*- Number IO problem report - generation 140
Test total error for best: 59652.743300000046
Test mean error for best: 29.82637
;;------------------------------
Outputs of best individual on training cases:
Correct output: -116.076402553 | Program output: -41.0401600   
Correct output: 24.1400847456  | Program output: -10.07181     
Correct output: 69.833290954   | Program output: 20.0219241    
Correct output: 82.4958592801  | Program output: 94.015857281  
Correct output: 34.2385110874  | Program output: 81.02551287   
Correct output: -10.7358110665 | Program output: 47.048110545  
Correct output: 1.9700532093   | Program output: -11.050100    
Correct output: -44.7956976677 | Program output: 51.052140557  
Correct output: 68.5576547673  | Program output: 46.047103777  
Correct output: -69.2536523379 | Program output: -54.0192809   
Correct output: -14.2275745396 | Program output: 41.04274047   
Correct output: -171.9767905886 | Program output: -85.0767056   
Correct output: -32.1846093265 | Program output: 1.0265        
Correct output: 66.9812146721  | Program output: 73.074405151  
Correct output: 100.0259781081 | Program output: 34.03542841   
Correct output: -90.2595503995 | Program output: -34.0791089   
Correct output: -82.4635707651 | Program output: -96.0659025   
Correct output: -8.7492896214  | Program output: -50.0312401   
Correct output: -82.1329348831 | Program output: -82.0796561   
Correct output: 24.5261129925  | Program output: -73.0405184   
Correct output: -11.4065589042 | Program output: -53.0602704   
Correct output: 10.3282540908  | Program output: -77.045776    
Correct output: -51.7760580299 | Program output: -78.0755929   
Correct output: 51.8185003253  | Program output: 74.075421801  
Correct output: 110.7431489201 | Program output: 20.0219241    
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_tan} {:instruction float_cos} {:instruction float_mult} {:instruction float_yankdup} {:instruction float_sin} {:instruction integer_swap} {:instruction in2} {:instruction integer_inc} {:instruction float_yankdup} {:instruction float_yank} {:instruction float_mult} {:instruction 28} {:instruction integer_add} {:instruction float_pop} {:instruction integer_inc} {:instruction in2} {:instruction float_max} {:instruction float_rot} {:instruction integer_mult} {:instruction float_mult} {:instruction float_pop} {:instruction float_mult} {:instruction integer_inc} {:instruction in2} {:instruction float_max} {:instruction integer_dup} {:instruction print_float} {:instruction integer_mult} {:instruction float_mult} {:instruction float_div} {:instruction float_mult} {:instruction float_mult} {:instruction in2} {:instruction float_sub} {:instruction float_sub} {:instruction float_mult} {:instruction integer_dup} {:instruction integer_dup} {:instruction float_add} {:instruction integer_dec} {:instruction integer_shove} {:instruction float_mult} {:instruction float_add} {:instruction float_mult} {:instruction integer_mult} {:instruction integer_dup} {:instruction float_add} {:instruction integer_dup} {:instruction float_add} {:instruction integer_dec} {:instruction integer_mult} {:instruction float_mult} {:instruction float_yankdup} {:instruction float_tan} {:instruction in2} {:instruction float_max} {:instruction float_pop} {:instruction float_mod} {:instruction in2} {:instruction float_yankdup} {:instruction integer_dup} {:instruction integer_pop} {:instruction integer_dec} {:instruction float_max} {:instruction float_frominteger} {:instruction integer_swap} {:instruction integer_mod} {:instruction integer_dup} {:instruction 80} {:instruction integer_mod} {:instruction integer_dup} {:instruction print_float} {:instruction float_frominteger} {:instruction print_integer} {:instruction integer_sub} {:instruction integer_inc} {:instruction integer_max} {:instruction integer_stackdepth} {:instruction float_shove} {:instruction integer_max} {:instruction integer_stackdepth} {:instruction float_shove} {:instruction 72.91027992373763} {:instruction integer_max} {:instruction float_dup} {:instruction float_inc} {:instruction integer_mult} {:instruction integer_shove} {:instruction print_integer} {:instruction integer_swap})
Best program: (float_tan float_cos float_mult float_yankdup float_sin integer_swap in2 integer_inc float_yankdup float_yank float_mult 28 integer_add float_pop integer_inc in2 float_max float_rot integer_mult float_mult float_pop float_mult integer_inc in2 float_max integer_dup print_float integer_mult float_mult float_div float_mult float_mult in2 float_sub float_sub float_mult integer_dup integer_dup float_add integer_dec integer_shove float_mult float_add float_mult integer_mult integer_dup float_add integer_dup float_add integer_dec integer_mult float_mult float_yankdup float_tan in2 float_max float_pop float_mod in2 float_yankdup integer_dup integer_pop integer_dec float_max float_frominteger integer_swap integer_mod integer_dup 80 integer_mod integer_dup print_float float_frominteger print_integer integer_sub integer_inc integer_max integer_stackdepth float_shove integer_max integer_stackdepth float_shove 72.91027992373763 integer_max float_dup float_inc integer_mult integer_shove print_integer integer_swap)
Errors: [75.0362 8 34.2119 10 49.8114 9 11.52 6 46.787 8 57.7839 8 13.0202 9 95.8478 11 22.5106 9 15.2344 10 55.2703 10 86.9001 7 33.2111 9 6.0932 11 65.9905 9 56.1804 9 13.6023 8 41.282 10 0.0533 8 97.5666 12 41.6537 8 87.374 12 26.2995 8 22.2569 11 90.7212 8]
Total: 1374.2185000000002
Mean: 27.48437
Genome size: 90
Size: 91
Percent parens: 0.011
--- Population Statistics ---
Average total errors in population: 5166.4263077999985
Median total errors in population: 1388.7363500000001
Error averages by case: (245.46578040000097 8.787 313.0421657999979 10.484 159.55090610000155 9.73 127.73643430000055 8.532 155.3887466999993 9.36 167.14756050000014 9.944 300.58774370000094 9.344 200.79579489999844 11.859 135.6800273999989 9.95 198.98090299999788 10.736 163.98717340000093 10.754 256.52787969999946 9.162 84.71801689999995 9.776 121.62402380000108 11.287 174.69360070000178 10.071 230.0055552000019 9.958 196.8567502999997 9.257 219.25617870000272 10.545 185.87573349999977 8.956 263.50774599999863 12.076 219.63137529999847 9.256 255.2297897000027 12.08 206.59701969999833 9.42 136.63108879999825 11.176 195.21931330000018 9.189)
Error minima by case: (73.997 6 9.0 6 10.1879 7 2.4007 6 12.1834 7 9.7358 8 0.9701 6 43.7957 9 11.4895 8 14.1745 8 13.2276 9 85.8973 7 31.1846 7 5.0263 8 19.9908 7 55.1804 8 11.6023 8 7.7493 8 0.0525 6 15.5462 7 10.4066 7 3.3248 7 24.2995 8 21.1891 8 21.0 8)
Average genome size in population (length): 90.974
Average program size in population (points): 91.974
Average percent parens in population: 0.011
Minimum age in population: 192.9411585075838
Maximum age in population: 198.0682895187492
Average age in population: 195.8476946061069
Median age in population: 195.8804805945934
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 8
Genome diversity (% unique Plush genomes):	 0.879
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 8
Syntactic diversity (% unique Push programs):	 0.879
Total error diversity:				 0.391
Error (vector) diversity:			 0.404
Behavioral diversity:				 0.405
--- Run Statistics ---
Number of program evaluations used so far: 141000
Number of point (instruction) evaluations so far: 251632290
--- Timings ---
Current time: 1529615458320 milliseconds
Total Time:         564.3 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       214.3 seconds, 38.0%
Fitness Testing:    278.4 seconds, 49.3%
Report:              71.4 seconds, 12.7%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 140
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 141
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 141
;;******************************
;; -*- Number IO problem report - generation 141
Test total error for best: 64453.020200000035
Test mean error for best: 32.22651
;;------------------------------
Outputs of best individual on training cases:
Correct output: -116.076402553 | Program output: -41.0401600   
Correct output: 24.1400847456  | Program output: -10.07181     
Correct output: 69.833290954   | Program output: 20.0219241    
Correct output: 82.4958592801  | Program output: 94.015857281  
Correct output: 34.2385110874  | Program output: 81.02551287   
Correct output: -10.7358110665 | Program output: 47.048110545  
Correct output: 1.9700532093   | Program output: -11.050100    
Correct output: -44.7956976677 | Program output: 51.052140557  
Correct output: 68.5576547673  | Program output: 46.047103777  
Correct output: -69.2536523379 | Program output: -54.0192809   
Correct output: -14.2275745396 | Program output: 41.04274047   
Correct output: -171.9767905886 | Program output: -85.0767056   
Correct output: -32.1846093265 | Program output: 1.0265        
Correct output: 66.9812146721  | Program output: 73.074405151  
Correct output: 100.0259781081 | Program output: 34.03542841   
Correct output: -90.2595503995 | Program output: -34.0791089   
Correct output: -82.4635707651 | Program output: -96.0659025   
Correct output: -8.7492896214  | Program output: -50.0312401   
Correct output: -82.1329348831 | Program output: -82.0796561   
Correct output: 24.5261129925  | Program output: -73.0405184   
Correct output: -11.4065589042 | Program output: -53.0602704   
Correct output: 10.3282540908  | Program output: -77.045776    
Correct output: -51.7760580299 | Program output: -78.0755929   
Correct output: 51.8185003253  | Program output: 74.075421801  
Correct output: 110.7431489201 | Program output: 20.0219241    
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_yankdup} {:instruction float_rot} {:instruction float_yankdup} {:instruction float_sin} {:instruction float_mult} {:instruction float_yankdup} {:instruction float_pop} {:instruction integer_pop} {:instruction in2} {:instruction integer_inc} {:instruction float_yankdup} {:instruction 28} {:instruction integer_add} {:instruction float_pop} {:instruction integer_inc} {:instruction in2} {:instruction float_max} {:instruction float_max} {:instruction float_rot} {:instruction print_float} {:instruction integer_mult} {:instruction float_mult} {:instruction float_dup} {:instruction float_rot} {:instruction integer_inc} {:instruction in2} {:instruction float_max} {:instruction integer_dup} {:instruction float_rot} {:instruction integer_mult} {:instruction integer_fromfloat} {:instruction float_pop} {:instruction float_mult} {:instruction float_mult} {:instruction in2} {:instruction float_sub} {:instruction float_sub} {:instruction float_dec} {:instruction float_yankdup} {:instruction float_mult} {:instruction integer_dup} {:instruction integer_dup} {:instruction float_add} {:instruction integer_dec} {:instruction integer_shove} {:instruction float_mult} {:instruction float_add} {:instruction float_mult} {:instruction integer_mult} {:instruction integer_dup} {:instruction float_add} {:instruction integer_dup} {:instruction float_add} {:instruction integer_dec} {:instruction integer_mult} {:instruction float_mult} {:instruction float_yankdup} {:instruction float_tan} {:instruction in2} {:instruction float_max} {:instruction float_pop} {:instruction float_mod} {:instruction in2} {:instruction float_yankdup} {:instruction integer_dup} {:instruction integer_pop} {:instruction integer_dec} {:instruction float_max} {:instruction float_frominteger} {:instruction integer_swap} {:instruction integer_mod} {:instruction integer_dup} {:instruction 80} {:instruction integer_mod} {:instruction integer_dup} {:instruction print_float} {:instruction float_frominteger} {:instruction print_integer} {:instruction integer_sub} {:instruction integer_inc} {:instruction integer_max} {:instruction integer_stackdepth} {:instruction float_shove} {:instruction float_mult} {:instruction integer_max} {:instruction float_dup} {:instruction float_inc} {:instruction integer_mult} {:instruction integer_shove} {:instruction print_integer} {:instruction float_sin})
Best program: (float_yankdup float_rot float_yankdup float_sin float_mult float_yankdup float_pop integer_pop in2 integer_inc float_yankdup 28 integer_add float_pop integer_inc in2 float_max float_max float_rot print_float integer_mult float_mult float_dup float_rot integer_inc in2 float_max integer_dup float_rot integer_mult integer_fromfloat float_pop float_mult float_mult in2 float_sub float_sub float_dec float_yankdup float_mult integer_dup integer_dup float_add integer_dec integer_shove float_mult float_add float_mult integer_mult integer_dup float_add integer_dup float_add integer_dec integer_mult float_mult float_yankdup float_tan in2 float_max float_pop float_mod in2 float_yankdup integer_dup integer_pop integer_dec float_max float_frominteger integer_swap integer_mod integer_dup 80 integer_mod integer_dup print_float float_frominteger print_integer integer_sub integer_inc integer_max integer_stackdepth float_shove float_mult integer_max float_dup float_inc integer_mult integer_shove print_integer float_sin)
Errors: [75.0362 8 34.2119 10 49.8114 9 11.52 6 46.787 8 57.7839 8 13.0202 9 95.8478 11 22.5106 9 15.2344 10 55.2703 10 86.9001 7 33.2111 9 6.0932 11 65.9905 9 56.1804 9 13.6023 8 41.282 10 0.0533 8 97.5666 12 41.6537 8 87.374 12 26.2995 8 22.2569 11 90.7212 8]
Total: 1374.2185000000002
Mean: 27.48437
Genome size: 91
Size: 92
Percent parens: 0.011
--- Population Statistics ---
Average total errors in population: 4917.211102700001
Median total errors in population: 1391.2185000000002
Error averages by case: (234.48040630000114 8.861 304.79170229999806 10.503 149.70494150000155 9.793 117.45720710000055 8.668 143.510668199999 9.419 157.23373859999967 10.036 292.09058670000155 9.385 191.1228680999987 11.946 126.67875729999875 10.078 187.59729539999853 10.796 155.06955850000097 10.767 246.56254869999924 9.251 83.7073279000001 9.876 112.29107610000106 11.371 165.25655510000138 10.106 218.78800880000202 10.056 185.68489949999972 9.344 207.76139620000268 10.589 174.76247689999957 8.977 251.69055549999882 12.106 208.36132089999822 9.265 242.37858830000263 12.121 194.6402409999982 9.456 126.37343699999828 11.185 186.0219408000003 9.238)
Error minima by case: (40.0 6 9.0 4 10.1667 6 1.4959 5 12.1826 8 1.8469 6 0.9701 4 0.0127 6 11.4423 6 14.2344 7 1.6448 5 84.0 7 2.0 4 5.0228 8 19.026 7 33.0 7 12.5364 8 8.7493 8 0.0329 6 14.5041 8 1.5944 8 4.3248 8 6.993 8 21.1857 8 21.0 7)
Average genome size in population (length): 90.816
Average program size in population (points): 91.816
Average percent parens in population: 0.011
Minimum age in population: 194.2927304835225
Maximum age in population: 199.5952757547843
Average age in population: 197.130637443725
Median age in population: 197.1572350619431
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 5
Genome diversity (% unique Plush genomes):	 0.893
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 5
Syntactic diversity (% unique Push programs):	 0.893
Total error diversity:				 0.417
Error (vector) diversity:			 0.426
Behavioral diversity:				 0.428
--- Run Statistics ---
Number of program evaluations used so far: 142000
Number of point (instruction) evaluations so far: 253902690
--- Timings ---
Current time: 1529615462798 milliseconds
Total Time:         568.7 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       215.9 seconds, 38.0%
Fitness Testing:    280.7 seconds, 49.4%
Report:              72.0 seconds, 12.7%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 141
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 142
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 142
;;******************************
;; -*- Number IO problem report - generation 142
Test total error for best: 64458.02020000005
Test mean error for best: 32.22901
;;------------------------------
Outputs of best individual on training cases:
Correct output: -116.076402553 | Program output: -41.0401600   
Correct output: 24.1400847456  | Program output: -10.07181     
Correct output: 69.833290954   | Program output: 20.0219241    
Correct output: 82.4958592801  | Program output: 94.015857281  
Correct output: 34.2385110874  | Program output: 81.02551287   
Correct output: -10.7358110665 | Program output: 47.048110545  
Correct output: 1.9700532093   | Program output: -11.050100    
Correct output: -44.7956976677 | Program output: 51.052140557  
Correct output: 68.5576547673  | Program output: 46.047103777  
Correct output: -69.2536523379 | Program output: -54.0192809   
Correct output: -14.2275745396 | Program output: 41.04274047   
Correct output: -171.9767905886 | Program output: -85.0767056   
Correct output: -32.1846093265 | Program output: 1.0265        
Correct output: 66.9812146721  | Program output: 73.074405151  
Correct output: 100.0259781081 | Program output: 34.03542841   
Correct output: -90.2595503995 | Program output: -34.0791089   
Correct output: -82.4635707651 | Program output: -96.0659025   
Correct output: -8.7492896214  | Program output: -50.0312401   
Correct output: -82.1329348831 | Program output: -82.0796561   
Correct output: 24.5261129925  | Program output: -73.0405184   
Correct output: -11.4065589042 | Program output: -53.0602704   
Correct output: 10.3282540908  | Program output: -77.045776    
Correct output: -51.7760580299 | Program output: -78.0755929   
Correct output: 51.8185003253  | Program output: 74.075421801  
Correct output: 110.7431489201 | Program output: 20.0219241    
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_dup_items} {:instruction float_mult} {:instruction float_yankdup} {:instruction float_pop} {:instruction float_mult} {:instruction float_dup_times} {:instruction float_shove} {:instruction float_pop} {:instruction float_mult} {:instruction in2} {:instruction integer_inc} {:instruction float_yank} {:instruction float_mult} {:instruction 28} {:instruction integer_add} {:instruction float_pop} {:instruction integer_inc} {:instruction in2} {:instruction float_max} {:instruction integer_mult} {:instruction float_mult} {:instruction float_pop} {:instruction float_mult} {:instruction integer_inc} {:instruction in2} {:instruction float_inc} {:instruction integer_dup} {:instruction float_swap} {:instruction integer_mult} {:instruction float_mult} {:instruction float_pop} {:instruction float_mult} {:instruction float_mult} {:instruction in2} {:instruction float_sub} {:instruction float_sub} {:instruction float_mult} {:instruction integer_dup} {:instruction integer_dup} {:instruction float_add} {:instruction integer_dec} {:instruction integer_shove} {:instruction float_tan} {:instruction float_add} {:instruction float_mult} {:instruction integer_mult} {:instruction integer_dup} {:instruction float_add} {:instruction integer_dup} {:instruction float_add} {:instruction integer_dec} {:instruction integer_mult} {:instruction float_mult} {:instruction float_yankdup} {:instruction float_tan} {:instruction in2} {:instruction float_max} {:instruction float_pop} {:instruction float_shove} {:instruction in2} {:instruction float_cos} {:instruction integer_dup} {:instruction integer_pop} {:instruction integer_dec} {:instruction float_cos} {:instruction float_frominteger} {:instruction integer_swap} {:instruction integer_mod} {:instruction integer_dup} {:instruction 80} {:instruction integer_mod} {:instruction integer_dup} {:instruction print_float} {:instruction float_frominteger} {:instruction print_integer} {:instruction integer_sub} {:instruction integer_inc} {:instruction integer_max} {:instruction integer_max} {:instruction integer_stackdepth} {:instruction float_inc} {:instruction integer_mult} {:instruction integer_shove} {:instruction print_integer} {:instruction integer_swap})
Best program: (integer_dup_items float_mult float_yankdup float_pop float_mult float_dup_times float_shove float_pop float_mult in2 integer_inc float_yank float_mult 28 integer_add float_pop integer_inc in2 float_max integer_mult float_mult float_pop float_mult integer_inc in2 float_inc integer_dup float_swap integer_mult float_mult float_pop float_mult float_mult in2 float_sub float_sub float_mult integer_dup integer_dup float_add integer_dec integer_shove float_tan float_add float_mult integer_mult integer_dup float_add integer_dup float_add integer_dec integer_mult float_mult float_yankdup float_tan in2 float_max float_pop float_shove in2 float_cos integer_dup integer_pop integer_dec float_cos float_frominteger integer_swap integer_mod integer_dup 80 integer_mod integer_dup print_float float_frominteger print_integer integer_sub integer_inc integer_max integer_max integer_stackdepth float_inc integer_mult integer_shove print_integer integer_swap)
Errors: [75.0362 8 34.2119 10 49.8114 9 11.52 6 46.787 8 57.7839 8 13.0202 9 95.8478 11 22.5106 9 15.2344 10 55.2703 10 86.9001 7 33.2111 9 6.0932 11 65.9905 9 56.1804 9 13.6023 8 41.282 10 0.0533 8 97.5666 12 41.6537 8 87.374 12 26.2995 8 22.2569 11 90.7212 8]
Total: 1374.2185000000002
Mean: 27.48437
Genome size: 85
Size: 86
Percent parens: 0.012
--- Population Statistics ---
Average total errors in population: 5022.534963399999
Median total errors in population: 1389.2215
Error averages by case: (247.310057700001 8.803 280.1145168999978 10.483 147.76891060000136 9.728 116.81997620000072 8.531 143.87282129999895 9.347 157.5090300999997 9.953 267.4457258999996 9.352 191.49626009999872 11.875 126.32248699999869 9.983 202.49030939999784 10.74 155.31055010000088 10.738 259.8529118999995 9.155 88.13081290000005 9.882 111.84164950000122 11.322 164.88397740000147 10.068 232.25453490000206 9.99 199.91327919999992 9.216 222.50311620000258 10.548 189.2535715999998 8.917 265.90043289999875 12.099 223.41290159999824 9.19 256.4328538000025 12.078 209.84411729999815 9.396 126.09892199999814 11.138 184.03823690000024 9.181)
Error minima by case: (74.0362 7 9.0 5 9.1678 8 0.5472 6 29.2385 7 9.6877 6 0.92 4 43.7436 9 10.446 8 14.2267 8 13.1848 8 85.9001 6 31.1581 6 5.0928 8 16.9829 8 55.1804 9 11.616 8 7.718 8 0.0329 6 14.5462 9 10.3463 7 5.3283 9 24.3033 7 21.2565 8 21.0 8)
Average genome size in population (length): 90.943
Average program size in population (points): 91.943
Average percent parens in population: 0.011
Minimum age in population: 196.1944955203073
Maximum age in population: 200.7912820741045
Average age in population: 198.4255316856228
Median age in population: 198.4460511239906
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 4
Genome diversity (% unique Plush genomes):	 0.903
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 4
Syntactic diversity (% unique Push programs):	 0.903
Total error diversity:				 0.4
Error (vector) diversity:			 0.405
Behavioral diversity:				 0.406
--- Run Statistics ---
Number of program evaluations used so far: 143000
Number of point (instruction) evaluations so far: 256176290
--- Timings ---
Current time: 1529615467654 milliseconds
Total Time:         573.5 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       217.5 seconds, 37.9%
Fitness Testing:    283.2 seconds, 49.4%
Report:              72.7 seconds, 12.7%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 142
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 143
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 143
;;******************************
;; -*- Number IO problem report - generation 143
Test total error for best: 64453.020200000035
Test mean error for best: 32.22651
;;------------------------------
Outputs of best individual on training cases:
Correct output: -116.076402553 | Program output: -41.0401600   
Correct output: 24.1400847456  | Program output: -10.07181     
Correct output: 69.833290954   | Program output: 20.0219241    
Correct output: 82.4958592801  | Program output: 94.015857281  
Correct output: 34.2385110874  | Program output: 81.02551287   
Correct output: -10.7358110665 | Program output: 47.048110545  
Correct output: 1.9700532093   | Program output: -11.050100    
Correct output: -44.7956976677 | Program output: 51.052140557  
Correct output: 68.5576547673  | Program output: 46.047103777  
Correct output: -69.2536523379 | Program output: -54.0192809   
Correct output: -14.2275745396 | Program output: 41.04274047   
Correct output: -171.9767905886 | Program output: -85.0767056   
Correct output: -32.1846093265 | Program output: 1.0265        
Correct output: 66.9812146721  | Program output: 73.074405151  
Correct output: 100.0259781081 | Program output: 34.03542841   
Correct output: -90.2595503995 | Program output: -34.0791089   
Correct output: -82.4635707651 | Program output: -96.0659025   
Correct output: -8.7492896214  | Program output: -50.0312401   
Correct output: -82.1329348831 | Program output: -82.0796561   
Correct output: 24.5261129925  | Program output: -73.0405184   
Correct output: -11.4065589042 | Program output: -53.0602704   
Correct output: 10.3282540908  | Program output: -77.045776    
Correct output: -51.7760580299 | Program output: -78.0755929   
Correct output: 51.8185003253  | Program output: 74.075421801  
Correct output: 110.7431489201 | Program output: 20.0219241    
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction in1} {:instruction float_pop} {:instruction integer_div} {:instruction float_mult} {:instruction in2} {:instruction integer_inc} {:instruction -63.07973767650861} {:instruction float_min} {:instruction float_mult} {:instruction 28} {:instruction integer_add} {:instruction float_pop} {:instruction integer_inc} {:instruction in2} {:instruction float_max} {:instruction float_rot} {:instruction print_float} {:instruction integer_mult} {:instruction float_mult} {:instruction float_pop} {:instruction float_mult} {:instruction integer_inc} {:instruction in2} {:instruction float_rot} {:instruction integer_dup} {:instruction print_float} {:instruction integer_mult} {:instruction float_mult} {:instruction float_mult} {:instruction float_mult} {:instruction in2} {:instruction float_sub} {:instruction float_sub} {:instruction float_mult} {:instruction integer_dup} {:instruction integer_dup} {:instruction float_cos} {:instruction integer_dec} {:instruction integer_shove} {:instruction float_mult} {:instruction float_sin} {:instruction float_mult} {:instruction integer_mult} {:instruction integer_dup} {:instruction float_add} {:instruction integer_dup} {:instruction float_tan} {:instruction integer_dec} {:instruction integer_mult} {:instruction float_mult} {:instruction float_yankdup} {:instruction float_tan} {:instruction in2} {:instruction float_max} {:instruction float_pop} {:instruction float_mod} {:instruction in2} {:instruction float_yankdup} {:instruction integer_dup} {:instruction integer_pop} {:instruction integer_dec} {:instruction float_flush} {:instruction float_frominteger} {:instruction integer_swap} {:instruction integer_mod} {:instruction integer_dup} {:instruction 80} {:instruction integer_mod} {:instruction integer_dup} {:instruction print_float} {:instruction float_frominteger} {:instruction print_integer} {:instruction integer_sub} {:instruction integer_inc} {:instruction integer_max} {:instruction integer_stackdepth} {:instruction float_shove} {:instruction float_mult} {:instruction integer_max} {:instruction float_div} {:instruction float_inc} {:instruction integer_mult} {:instruction float_mult} {:instruction integer_max} {:instruction float_dup} {:instruction integer_max} {:instruction integer_mult} {:instruction integer_shove} {:instruction print_integer} {:instruction float_tan})
Best program: (in1 float_pop integer_div float_mult in2 integer_inc -63.07973767650861 float_min float_mult 28 integer_add float_pop integer_inc in2 float_max float_rot print_float integer_mult float_mult float_pop float_mult integer_inc in2 float_rot integer_dup print_float integer_mult float_mult float_mult float_mult in2 float_sub float_sub float_mult integer_dup integer_dup float_cos integer_dec integer_shove float_mult float_sin float_mult integer_mult integer_dup float_add integer_dup float_tan integer_dec integer_mult float_mult float_yankdup float_tan in2 float_max float_pop float_mod in2 float_yankdup integer_dup integer_pop integer_dec float_flush float_frominteger integer_swap integer_mod integer_dup 80 integer_mod integer_dup print_float float_frominteger print_integer integer_sub integer_inc integer_max integer_stackdepth float_shove float_mult integer_max float_div float_inc integer_mult float_mult integer_max float_dup integer_max integer_mult integer_shove print_integer float_tan)
Errors: [75.0362 8 34.2119 10 49.8114 9 11.52 6 46.787 8 57.7839 8 13.0202 9 95.8478 11 22.5106 9 15.2344 10 55.2703 10 86.9001 7 33.2111 9 6.0932 11 65.9905 9 56.1804 9 13.6023 8 41.282 10 0.0533 8 97.5666 12 41.6537 8 87.374 12 26.2995 8 22.2569 11 90.7212 8]
Total: 1374.2185000000002
Mean: 27.48437
Genome size: 90
Size: 91
Percent parens: 0.011
--- Population Statistics ---
Average total errors in population: 5352.986317
Median total errors in population: 1393.2707
Error averages by case: (255.87468830000125 8.941 298.868642899998 10.568 164.6025663000014 9.877 132.49676580000087 8.758 162.81034740000024 9.516 173.25136220000059 10.076 285.31665720000075 9.435 206.58372129999842 11.971 142.74421809999922 10.155 211.71006229999767 10.877 171.08225330000113 10.835 269.70571449999966 9.312 94.52200290000007 9.917 128.4574853000009 11.433 180.7598212000023 10.162 241.30285380000245 10.107 210.6313150999999 9.428 230.5448153000026 10.714 199.23148419999973 9.093 275.9086905999991 12.265 231.64545339999833 9.391 267.3716954000027 12.185 219.62027169999823 9.538 142.45097039999865 11.222 200.36745810000042 9.349)
Error minima by case: (74.036 7 2.1401 9 41.8333 8 10.5201 6 15.2385 7 9.7321 8 0.9701 8 43.7914 9 20.5106 8 14.2345 8 13.2245 8 85.9003 7 31.1781 6 5.0935 8 63.9905 8 55.1805 9 11.6023 8 7.7469 8 0.0527 6 1.5261 8 9.5934 7 4.2489 9 5.7761 7 19.8185 8 82.7431 8)
Average genome size in population (length): 90.925
Average program size in population (points): 91.925
Average percent parens in population: 0.011
Minimum age in population: 197.7068128029831
Maximum age in population: 201.7476874034232
Average age in population: 199.7323522213055
Median age in population: 199.7681429175696
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 5
Genome diversity (% unique Plush genomes):	 0.884
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 5
Syntactic diversity (% unique Push programs):	 0.884
Total error diversity:				 0.41
Error (vector) diversity:			 0.423
Behavioral diversity:				 0.423
--- Run Statistics ---
Number of program evaluations used so far: 144000
Number of point (instruction) evaluations so far: 258449440
--- Timings ---
Current time: 1529615472375 milliseconds
Total Time:         578.3 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       219.1 seconds, 37.9%
Fitness Testing:    285.8 seconds, 49.4%
Report:              73.3 seconds, 12.7%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 143
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 144
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 144
;;******************************
;; -*- Number IO problem report - generation 144
Test total error for best: 59655.743300000046
Test mean error for best: 29.82787
;;------------------------------
Outputs of best individual on training cases:
Correct output: -116.076402553 | Program output: -41.0401600   
Correct output: 24.1400847456  | Program output: -10.07181     
Correct output: 69.833290954   | Program output: 20.0219241    
Correct output: 82.4958592801  | Program output: 94.015857281  
Correct output: 34.2385110874  | Program output: 81.02551287   
Correct output: -10.7358110665 | Program output: 47.048110545  
Correct output: 1.9700532093   | Program output: -11.050100    
Correct output: -44.7956976677 | Program output: 51.052140557  
Correct output: 68.5576547673  | Program output: 46.047103777  
Correct output: -69.2536523379 | Program output: -54.0192809   
Correct output: -14.2275745396 | Program output: 41.04274047   
Correct output: -171.9767905886 | Program output: -85.0767056   
Correct output: -32.1846093265 | Program output: 1.0265        
Correct output: 66.9812146721  | Program output: 73.074405151  
Correct output: 100.0259781081 | Program output: 34.03542841   
Correct output: -90.2595503995 | Program output: -34.0791089   
Correct output: -82.4635707651 | Program output: -96.0659025   
Correct output: -8.7492896214  | Program output: -50.0312401   
Correct output: -82.1329348831 | Program output: -82.0796561   
Correct output: 24.5261129925  | Program output: -73.0405184   
Correct output: -11.4065589042 | Program output: -53.0602704   
Correct output: 10.3282540908  | Program output: -77.045776    
Correct output: -51.7760580299 | Program output: -78.0755929   
Correct output: 51.8185003253  | Program output: 74.075421801  
Correct output: 110.7431489201 | Program output: 20.0219241    
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_yankdup} {:instruction float_pop} {:instruction float_mult} {:instruction float_yankdup} {:instruction float_mod} {:instruction float_mult} {:instruction in2} {:instruction integer_inc} {:instruction float_yankdup} {:instruction float_min} {:instruction integer_add} {:instruction 28} {:instruction float_swap} {:instruction float_yankdup} {:instruction float_pop} {:instruction float_pop} {:instruction float_mult} {:instruction in2} {:instruction integer_inc} {:instruction float_yankdup} {:instruction float_rot} {:instruction float_mult} {:instruction 28} {:instruction integer_add} {:instruction float_pop} {:instruction integer_inc} {:instruction in2} {:instruction tagged_109} {:instruction float_rot} {:instruction integer_mult} {:instruction float_mult} {:instruction float_pop} {:instruction float_mult} {:instruction integer_inc} {:instruction in2} {:instruction float_max} {:instruction integer_dup} {:instruction print_float} {:instruction integer_mult} {:instruction float_mult} {:instruction float_pop} {:instruction float_mult} {:instruction float_mult} {:instruction in2} {:instruction float_sub} {:instruction float_sub} {:instruction float_mult} {:instruction integer_dup} {:instruction integer_dup} {:instruction float_add} {:instruction integer_dec} {:instruction integer_shove} {:instruction float_mult} {:instruction float_add} {:instruction float_mult} {:instruction integer_mult} {:instruction integer_dup} {:instruction float_add} {:instruction integer_dup} {:instruction float_add} {:instruction integer_dec} {:instruction integer_mult} {:instruction float_mult} {:instruction float_yankdup} {:instruction float_tan} {:instruction in2} {:instruction float_max} {:instruction float_pop} {:instruction float_mod} {:instruction in2} {:instruction float_yankdup} {:instruction integer_dup} {:instruction integer_pop} {:instruction integer_dec} {:instruction float_max} {:instruction float_frominteger} {:instruction integer_swap} {:instruction integer_mod} {:instruction integer_dup} {:instruction 80} {:instruction integer_mod} {:instruction integer_dup} {:instruction print_float} {:instruction float_frominteger} {:instruction print_integer} {:instruction integer_sub} {:instruction integer_inc} {:instruction integer_max} {:instruction integer_stackdepth} {:instruction float_shove} {:instruction float_mult} {:instruction integer_max} {:instruction float_dup} {:instruction float_inc} {:instruction print_integer} {:instruction integer_swap})
Best program: (float_yankdup float_pop float_mult float_yankdup float_mod float_mult in2 integer_inc float_yankdup float_min integer_add 28 float_swap float_yankdup float_pop float_pop float_mult in2 integer_inc float_yankdup float_rot float_mult 28 integer_add float_pop integer_inc in2 tagged_109 float_rot integer_mult float_mult float_pop float_mult integer_inc in2 float_max integer_dup print_float integer_mult float_mult float_pop float_mult float_mult in2 float_sub float_sub float_mult integer_dup integer_dup float_add integer_dec integer_shove float_mult float_add float_mult integer_mult integer_dup float_add integer_dup float_add integer_dec integer_mult float_mult float_yankdup float_tan in2 float_max float_pop float_mod in2 float_yankdup integer_dup integer_pop integer_dec float_max float_frominteger integer_swap integer_mod integer_dup 80 integer_mod integer_dup print_float float_frominteger print_integer integer_sub integer_inc integer_max integer_stackdepth float_shove float_mult integer_max float_dup float_inc print_integer integer_swap)
Errors: [75.0362 8 34.2119 10 49.8114 9 11.52 6 46.787 8 57.7839 8 13.0202 9 95.8478 11 22.5106 9 15.2344 10 55.2703 10 86.9001 7 33.2111 9 6.0932 11 65.9905 9 56.1804 9 13.6023 8 41.282 10 0.0533 8 97.5666 12 41.6537 8 87.374 12 26.2995 8 22.2569 11 90.7212 8]
Total: 1374.2185000000002
Mean: 27.48437
Genome size: 96
Size: 97
Percent parens: 0.010
--- Population Statistics ---
Average total errors in population: 5405.573450600001
Median total errors in population: 1396.3291
Error averages by case: (255.39580840000107 8.873 331.54867829999813 10.538 165.68564020000153 9.865 134.1803027000004 8.77 160.45884309999957 9.515 172.72780900000015 10.13 318.15576130000164 9.407 206.0133389999985 11.984 142.1189077999994 10.138 210.46919669999784 10.813 170.56529120000104 10.805 268.73392379999996 9.31 94.95534140000004 9.929 128.002037700001 11.41 179.92665860000156 10.198 240.17614610000211 10.091 209.5969215 9.38 229.81502500000244 10.649 199.08597359999973 9.019 274.2924276999994 12.138 230.57488769999853 9.353 266.17401650000244 12.099 219.1053648999984 9.528 141.98609369999872 11.242 201.31505470000042 9.33)
Error minima by case: (20.0754 7 3.1401 7 9.176 6 2.4959 5 23.2285 7 9.7321 6 1.9656 6 43.7914 6 9.4423 6 15.1558 8 13.2245 6 75.9745 7 2.0 4 6.0188 8 5.026 7 5.7416 8 12.5387 8 7.7469 8 0.0523 6 14.5144 8 10.4039 8 4.3225 9 3.7761 8 22.1815 8 21.0 7)
Average genome size in population (length): 90.66
Average program size in population (points): 91.66
Average percent parens in population: 0.011
Minimum age in population: 198.9536147173022
Maximum age in population: 203.018023472224
Average age in population: 201.0942270182027
Median age in population: 201.1582046464895
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 7
Genome diversity (% unique Plush genomes):	 0.882
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 7
Syntactic diversity (% unique Push programs):	 0.882
Total error diversity:				 0.424
Error (vector) diversity:			 0.438
Behavioral diversity:				 0.441
--- Run Statistics ---
Number of program evaluations used so far: 145000
Number of point (instruction) evaluations so far: 260715990
--- Timings ---
Current time: 1529615477004 milliseconds
Total Time:         582.9 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       220.7 seconds, 37.9%
Fitness Testing:    288.2 seconds, 49.4%
Report:              73.9 seconds, 12.7%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 144
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 145
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 145
;;******************************
;; -*- Number IO problem report - generation 145
Test total error for best: 64453.020200000035
Test mean error for best: 32.22651
;;------------------------------
Outputs of best individual on training cases:
Correct output: -116.076402553 | Program output: -41.0401600   
Correct output: 24.1400847456  | Program output: -10.07181     
Correct output: 69.833290954   | Program output: 20.0219241    
Correct output: 82.4958592801  | Program output: 94.015857281  
Correct output: 34.2385110874  | Program output: 81.02551287   
Correct output: -10.7358110665 | Program output: 47.048110545  
Correct output: 1.9700532093   | Program output: -11.050100    
Correct output: -44.7956976677 | Program output: 51.052140557  
Correct output: 68.5576547673  | Program output: 46.047103777  
Correct output: -69.2536523379 | Program output: -54.0192809   
Correct output: -14.2275745396 | Program output: 41.04274047   
Correct output: -171.9767905886 | Program output: -85.0767056   
Correct output: -32.1846093265 | Program output: 1.0265        
Correct output: 66.9812146721  | Program output: 73.074405151  
Correct output: 100.0259781081 | Program output: 34.03542841   
Correct output: -90.2595503995 | Program output: -34.0791089   
Correct output: -82.4635707651 | Program output: -96.0659025   
Correct output: -8.7492896214  | Program output: -50.0312401   
Correct output: -82.1329348831 | Program output: -82.0796561   
Correct output: 24.5261129925  | Program output: -73.0405184   
Correct output: -11.4065589042 | Program output: -53.0602704   
Correct output: 10.3282540908  | Program output: -77.045776    
Correct output: -51.7760580299 | Program output: -78.0755929   
Correct output: 51.8185003253  | Program output: 74.075421801  
Correct output: 110.7431489201 | Program output: 20.0219241    
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_yankdup} {:instruction float_pop} {:instruction integer_swap} {:instruction integer_min} {:instruction float_pop} {:instruction float_mult} {:instruction float_mult} {:instruction in2} {:instruction integer_inc} {:instruction integer_div} {:instruction float_yank} {:instruction float_mult} {:instruction 28} {:instruction integer_add} {:instruction float_pop} {:instruction integer_inc} {:instruction in2} {:instruction float_max} {:instruction float_rot} {:instruction print_float} {:instruction integer_mult} {:instruction float_mult} {:instruction float_pop} {:instruction float_mult} {:instruction integer_inc} {:instruction in2} {:instruction float_max} {:instruction integer_dup} {:instruction print_float} {:instruction integer_mult} {:instruction float_mult} {:instruction float_pop} {:instruction float_mult} {:instruction float_mult} {:instruction in2} {:instruction float_sub} {:instruction float_sub} {:instruction float_mult} {:instruction integer_dup} {:instruction integer_dup} {:instruction float_add} {:instruction integer_dec} {:instruction integer_shove} {:instruction float_mult} {:instruction float_add} {:instruction float_mult} {:instruction integer_mult} {:instruction integer_dup} {:instruction float_add} {:instruction integer_dup} {:instruction float_add} {:instruction integer_dec} {:instruction integer_mult} {:instruction float_mult} {:instruction float_yankdup} {:instruction float_tan} {:instruction in2} {:instruction float_max} {:instruction in2} {:instruction float_yankdup} {:instruction integer_dup} {:instruction integer_pop} {:instruction integer_dec} {:instruction float_cos} {:instruction float_frominteger} {:instruction integer_swap} {:instruction integer_mod} {:instruction integer_dup} {:instruction 80} {:instruction integer_mod} {:instruction integer_dup} {:instruction print_float} {:instruction float_frominteger} {:instruction print_integer} {:instruction integer_sub} {:instruction integer_inc} {:instruction integer_max} {:instruction integer_stackdepth} {:instruction float_shove} {:instruction float_mult} {:instruction integer_max} {:instruction float_dup} {:instruction float_inc} {:instruction integer_mult} {:instruction float_add} {:instruction print_integer} {:instruction float_dup_items})
Best program: (float_yankdup float_pop integer_swap integer_min float_pop float_mult float_mult in2 integer_inc integer_div float_yank float_mult 28 integer_add float_pop integer_inc in2 float_max float_rot print_float integer_mult float_mult float_pop float_mult integer_inc in2 float_max integer_dup print_float integer_mult float_mult float_pop float_mult float_mult in2 float_sub float_sub float_mult integer_dup integer_dup float_add integer_dec integer_shove float_mult float_add float_mult integer_mult integer_dup float_add integer_dup float_add integer_dec integer_mult float_mult float_yankdup float_tan in2 float_max in2 float_yankdup integer_dup integer_pop integer_dec float_cos float_frominteger integer_swap integer_mod integer_dup 80 integer_mod integer_dup print_float float_frominteger print_integer integer_sub integer_inc integer_max integer_stackdepth float_shove float_mult integer_max float_dup float_inc integer_mult float_add print_integer float_dup_items)
Errors: [75.0362 8 34.2119 10 49.8114 9 11.52 6 46.787 8 57.7839 8 13.0202 9 95.8478 11 22.5106 9 15.2344 10 55.2703 10 86.9001 7 33.2111 9 6.0932 11 65.9905 9 56.1804 9 13.6023 8 41.282 10 0.0533 8 97.5666 12 41.6537 8 87.374 12 26.2995 8 22.2569 11 90.7212 8]
Total: 1374.2185000000002
Mean: 27.48437
Genome size: 87
Size: 88
Percent parens: 0.011
--- Population Statistics ---
Average total errors in population: 5129.256352799996
Median total errors in population: 1396.2435
Error averages by case: (254.33958210000088 8.765 301.3112639999982 10.509 149.1686073000011 9.787 116.68771350000011 8.616 144.3830214999989 9.413 157.3567365999998 9.958 288.90434380000056 9.346 191.30791999999934 11.897 126.0187870999992 10.046 208.8230555999982 10.718 154.42993590000077 10.753 264.9549850999996 9.166 82.0588411 9.889 111.61646230000102 11.348 164.63783590000105 10.071 239.32115560000153 10.0 205.71901149999988 9.206 228.6695060000027 10.537 194.92831549999983 8.87 271.81189519999936 12.057 229.29343909999818 9.178 264.53443710000215 12.026 215.5948818999987 9.382 125.92161039999874 11.132 185.54200870000014 9.251)
Error minima by case: (40.0 6 9.0 5 9.8333 6 2.4873 5 21.7615 7 9.6877 6 0.9701 4 43.7436 6 2.5577 6 14.1743 7 13.1848 6 84.0 6 2.0 4 5.0188 9 20.0217 7 33.0 6 11.616 8 7.718 8 0.0468 6 7.4739 7 10.3463 7 6.2883 6 24.3033 7 18.1815 7 21.0 7)
Average genome size in population (length): 90.833
Average program size in population (points): 91.833
Average percent parens in population: 0.011
Minimum age in population: 200.0391658680321
Maximum age in population: 204.124539593556
Average age in population: 202.4316457554305
Median age in population: 202.4756268381111
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 8
Genome diversity (% unique Plush genomes):	 0.88
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 8
Syntactic diversity (% unique Push programs):	 0.88
Total error diversity:				 0.412
Error (vector) diversity:			 0.424
Behavioral diversity:				 0.425
--- Run Statistics ---
Number of program evaluations used so far: 146000
Number of point (instruction) evaluations so far: 262986840
--- Timings ---
Current time: 1529615481524 milliseconds
Total Time:         587.5 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       222.4 seconds, 37.9%
Fitness Testing:    290.5 seconds, 49.4%
Report:              74.5 seconds, 12.7%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 145
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 146
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 146
;;******************************
;; -*- Number IO problem report - generation 146
Test total error for best: 64453.020200000035
Test mean error for best: 32.22651
;;------------------------------
Outputs of best individual on training cases:
Correct output: -116.076402553 | Program output: -41.0401600   
Correct output: 24.1400847456  | Program output: -10.07181     
Correct output: 69.833290954   | Program output: 20.0219241    
Correct output: 82.4958592801  | Program output: 94.015857281  
Correct output: 34.2385110874  | Program output: 81.02551287   
Correct output: -10.7358110665 | Program output: 47.048110545  
Correct output: 1.9700532093   | Program output: -11.050100    
Correct output: -44.7956976677 | Program output: 51.052140557  
Correct output: 68.5576547673  | Program output: 46.047103777  
Correct output: -69.2536523379 | Program output: -54.0192809   
Correct output: -14.2275745396 | Program output: 41.04274047   
Correct output: -171.9767905886 | Program output: -85.0767056   
Correct output: -32.1846093265 | Program output: 1.0265        
Correct output: 66.9812146721  | Program output: 73.074405151  
Correct output: 100.0259781081 | Program output: 34.03542841   
Correct output: -90.2595503995 | Program output: -34.0791089   
Correct output: -82.4635707651 | Program output: -96.0659025   
Correct output: -8.7492896214  | Program output: -50.0312401   
Correct output: -82.1329348831 | Program output: -82.0796561   
Correct output: 24.5261129925  | Program output: -73.0405184   
Correct output: -11.4065589042 | Program output: -53.0602704   
Correct output: 10.3282540908  | Program output: -77.045776    
Correct output: -51.7760580299 | Program output: -78.0755929   
Correct output: 51.8185003253  | Program output: 74.075421801  
Correct output: 110.7431489201 | Program output: 20.0219241    
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_yankdup} {:instruction float_yankdup} {:instruction float_cos} {:instruction float_mult} {:instruction float_mult} {:instruction print_integer} {:instruction float_mult} {:instruction in2} {:instruction integer_inc} {:instruction float_yankdup} {:instruction float_yank} {:instruction float_mult} {:instruction 28} {:instruction integer_add} {:instruction float_pop} {:instruction integer_inc} {:instruction in2} {:instruction float_max} {:instruction float_rot} {:instruction print_float} {:instruction integer_mult} {:instruction float_mult} {:instruction float_pop} {:instruction float_mult} {:instruction integer_inc} {:instruction in2} {:instruction float_max} {:instruction integer_dup} {:instruction print_float} {:instruction integer_mult} {:instruction float_mult} {:instruction float_pop} {:instruction float_mult} {:instruction float_mult} {:instruction in2} {:instruction float_sub} {:instruction float_sub} {:instruction float_mult} {:instruction integer_dup} {:instruction integer_dup} {:instruction float_add} {:instruction integer_dec} {:instruction integer_shove} {:instruction float_pop} {:instruction float_add} {:instruction float_mult} {:instruction integer_mult} {:instruction integer_dup} {:instruction float_add} {:instruction integer_dup} {:instruction float_add} {:instruction integer_dec} {:instruction integer_mult} {:instruction float_mult} {:instruction float_yankdup} {:instruction float_tan} {:instruction in2} {:instruction float_max} {:instruction float_pop} {:instruction float_mod} {:instruction tagged_580} {:instruction in2} {:instruction float_inc} {:instruction integer_dup} {:instruction integer_pop} {:instruction integer_dec} {:instruction float_cos} {:instruction float_frominteger} {:instruction integer_swap} {:instruction integer_mod} {:instruction integer_dup} {:instruction 80} {:instruction integer_mod} {:instruction integer_dup} {:instruction print_float} {:instruction float_frominteger} {:instruction print_integer} {:instruction integer_sub} {:instruction integer_inc} {:instruction integer_max} {:instruction integer_stackdepth} {:instruction float_shove} {:instruction float_mult} {:instruction integer_max} {:instruction float_dup} {:instruction float_inc} {:instruction integer_mult} {:instruction integer_shove} {:instruction print_integer} {:instruction integer_shove} {:instruction print_integer} {:instruction integer_swap})
Best program: (float_yankdup float_yankdup float_cos float_mult float_mult print_integer float_mult in2 integer_inc float_yankdup float_yank float_mult 28 integer_add float_pop integer_inc in2 float_max float_rot print_float integer_mult float_mult float_pop float_mult integer_inc in2 float_max integer_dup print_float integer_mult float_mult float_pop float_mult float_mult in2 float_sub float_sub float_mult integer_dup integer_dup float_add integer_dec integer_shove float_pop float_add float_mult integer_mult integer_dup float_add integer_dup float_add integer_dec integer_mult float_mult float_yankdup float_tan in2 float_max float_pop float_mod tagged_580 in2 float_inc integer_dup integer_pop integer_dec float_cos float_frominteger integer_swap integer_mod integer_dup 80 integer_mod integer_dup print_float float_frominteger print_integer integer_sub integer_inc integer_max integer_stackdepth float_shove float_mult integer_max float_dup float_inc integer_mult integer_shove print_integer integer_shove print_integer integer_swap)
Errors: [75.0362 8 34.2119 10 49.8114 9 11.52 6 46.787 8 57.7839 8 13.0202 9 95.8478 11 22.5106 9 15.2344 10 55.2703 10 86.9001 7 33.2111 9 6.0932 11 65.9905 9 56.1804 9 13.6023 8 41.282 10 0.0533 8 97.5666 12 41.6537 8 87.374 12 26.2995 8 22.2569 11 90.7212 8]
Total: 1374.2185000000002
Mean: 27.48437
Genome size: 92
Size: 93
Percent parens: 0.011
--- Population Statistics ---
Average total errors in population: 4890.513405099998
Median total errors in population: 1389.7353000000003
Error averages by case: (225.68451160000106 8.764 268.71315959999777 10.499 164.46893880000147 9.734 130.91180420000083 8.5 157.9100886 9.326 172.60631370000044 9.911 253.18530619999933 9.371 204.97914559999836 11.837 141.15232309999942 9.967 175.90177829999848 10.753 169.51078490000117 10.681 234.52413619999933 9.086 93.83547479999991 9.852 126.97114270000101 11.26 180.02077130000188 10.035 208.31208180000172 9.958 172.9182269999997 9.201 197.4692330000023 10.534 162.79442119999965 8.898 242.01012479999866 12.102 197.0223890999986 9.151 233.56436680000232 12.086 183.97369119999846 9.333 140.90837149999885 11.062 200.05881910000042 9.205)
Error minima by case: (35.0748 7 0.4797 8 9.1687 8 2.4959 5 10.5781 8 9.6877 6 0.93 7 35.2053 9 10.4472 8 10.756 8 13.1848 9 2.9747 6 2.0 4 5.093 8 5.0399 7 10.2584 9 2.4585 7 7.718 8 0.0515 6 0.8658 8 10.3463 7 6.2825 9 25.2239 7 3.7431 8 15.757 8)
Average genome size in population (length): 90.781
Average program size in population (points): 91.781
Average percent parens in population: 0.011
Minimum age in population: 201.0391658680321
Maximum age in population: 205.5578156204802
Average age in population: 203.7890950751607
Median age in population: 203.8571846477332
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 10
Genome diversity (% unique Plush genomes):	 0.885
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 10
Syntactic diversity (% unique Push programs):	 0.885
Total error diversity:				 0.393
Error (vector) diversity:			 0.409
Behavioral diversity:				 0.41
--- Run Statistics ---
Number of program evaluations used so far: 147000
Number of point (instruction) evaluations so far: 265256540
--- Timings ---
Current time: 1529615486194 milliseconds
Total Time:         592.2 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       224.1 seconds, 37.8%
Fitness Testing:    292.9 seconds, 49.5%
Report:              75.0 seconds, 12.7%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 146
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 147
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 147
;;******************************
;; -*- Number IO problem report - generation 147
Test total error for best: 64449.02020000003
Test mean error for best: 32.22451
;;------------------------------
Outputs of best individual on training cases:
Correct output: -116.076402553 | Program output: -41.0401600   
Correct output: 24.1400847456  | Program output: -10.07181     
Correct output: 69.833290954   | Program output: 20.0219241    
Correct output: 82.4958592801  | Program output: 94.015857281  
Correct output: 34.2385110874  | Program output: 81.02551287   
Correct output: -10.7358110665 | Program output: 47.048110545  
Correct output: 1.9700532093   | Program output: -11.050100    
Correct output: -44.7956976677 | Program output: 51.052140557  
Correct output: 68.5576547673  | Program output: 46.047103777  
Correct output: -69.2536523379 | Program output: -54.0192809   
Correct output: -14.2275745396 | Program output: 41.04274047   
Correct output: -171.9767905886 | Program output: -85.0767056   
Correct output: -32.1846093265 | Program output: 1.0265        
Correct output: 66.9812146721  | Program output: 73.074405151  
Correct output: 100.0259781081 | Program output: 34.03542841   
Correct output: -90.2595503995 | Program output: -34.0791089   
Correct output: -82.4635707651 | Program output: -96.0659025   
Correct output: -8.7492896214  | Program output: -50.0312401   
Correct output: -82.1329348831 | Program output: -82.0796561   
Correct output: 24.5261129925  | Program output: -73.0405184   
Correct output: -11.4065589042 | Program output: -53.0602704   
Correct output: 10.3282540908  | Program output: -77.045776    
Correct output: -51.7760580299 | Program output: -78.0755929   
Correct output: 51.8185003253  | Program output: 74.075421801  
Correct output: 110.7431489201 | Program output: 20.0219241    
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_yankdup} {:instruction float_pop} {:instruction float_mult} {:instruction float_yankdup} {:instruction float_pop} {:instruction float_mult} {:instruction float_yankdup} {:instruction float_sin} {:instruction float_mult} {:instruction in2} {:instruction integer_inc} {:instruction float_yankdup} {:instruction float_flush} {:instruction float_mult} {:instruction 28} {:instruction integer_add} {:instruction float_pop} {:instruction integer_inc} {:instruction in2} {:instruction float_max} {:instruction print_float} {:instruction integer_mult} {:instruction float_mult} {:instruction float_rot} {:instruction print_float} {:instruction integer_mult} {:instruction float_max} {:instruction tag_float_282} {:instruction integer_max} {:instruction integer_inc} {:instruction in2} {:instruction float_max} {:instruction integer_dup} {:instruction tagged_72} {:instruction integer_mult} {:instruction float_mult} {:instruction float_pop} {:instruction float_sin} {:instruction float_mult} {:instruction in2} {:instruction float_sub} {:instruction float_sub} {:instruction float_mult} {:instruction integer_dup} {:instruction integer_dup} {:instruction tagged_547} {:instruction integer_dec} {:instruction integer_shove} {:instruction float_mult} {:instruction float_min} {:instruction float_mult} {:instruction integer_mult} {:instruction integer_dup} {:instruction float_add} {:instruction integer_dup} {:instruction float_add} {:instruction integer_dec} {:instruction integer_mult} {:instruction float_mult} {:instruction float_yankdup} {:instruction float_tan} {:instruction float_tan} {:instruction in2} {:instruction in2} {:instruction float_yankdup} {:instruction integer_dec} {:instruction float_cos} {:instruction float_frominteger} {:instruction integer_swap} {:instruction integer_mod} {:instruction integer_dup} {:instruction 80} {:instruction integer_mod} {:instruction integer_dup} {:instruction print_float} {:instruction float_frominteger} {:instruction print_integer} {:instruction integer_sub} {:instruction integer_inc} {:instruction integer_max} {:instruction integer_stackdepth} {:instruction integer_max} {:instruction integer_stackdepth} {:instruction float_shove} {:instruction float_mult} {:instruction integer_max} {:instruction float_dup} {:instruction float_inc} {:instruction integer_mult} {:instruction integer_shove} {:instruction print_integer} {:instruction integer_swap})
Best program: (float_yankdup float_pop float_mult float_yankdup float_pop float_mult float_yankdup float_sin float_mult in2 integer_inc float_yankdup float_flush float_mult 28 integer_add float_pop integer_inc in2 float_max print_float integer_mult float_mult float_rot print_float integer_mult float_max tag_float_282 integer_max integer_inc in2 float_max integer_dup tagged_72 integer_mult float_mult float_pop float_sin float_mult in2 float_sub float_sub float_mult integer_dup integer_dup tagged_547 integer_dec integer_shove float_mult float_min float_mult integer_mult integer_dup float_add integer_dup float_add integer_dec integer_mult float_mult float_yankdup float_tan float_tan in2 in2 float_yankdup integer_dec float_cos float_frominteger integer_swap integer_mod integer_dup 80 integer_mod integer_dup print_float float_frominteger print_integer integer_sub integer_inc integer_max integer_stackdepth integer_max integer_stackdepth float_shove float_mult integer_max float_dup float_inc integer_mult integer_shove print_integer integer_swap)
Errors: [75.0362 8 34.2119 10 49.8114 9 11.52 6 46.787 8 57.7839 8 13.0202 9 95.8478 11 22.5106 9 15.2344 10 55.2703 10 86.9001 7 33.2111 9 6.0932 11 65.9905 9 56.1804 9 13.6023 8 41.282 10 0.0533 8 97.5666 12 41.6537 8 87.374 12 26.2995 8 22.2569 11 90.7212 8]
Total: 1374.2185000000002
Mean: 27.48437
Genome size: 92
Size: 93
Percent parens: 0.011
--- Population Statistics ---
Average total errors in population: 5141.229498799997
Median total errors in population: 1388.1556500000002
Error averages by case: (248.64431430000107 8.795 285.0769175999982 10.5 156.74458030000116 9.734 127.01217130000042 8.511 150.86175789999928 9.34 165.3307858000002 9.903 272.68009010000003 9.352 199.04472769999865 11.888 134.75629159999923 9.969 205.05726089999814 10.741 163.12264730000086 10.754 261.9225101999993 9.124 85.3207937000001 9.881 120.7995833000011 11.289 172.79298080000154 10.076 231.05353660000165 9.979 202.63560829999972 9.236 224.23436990000258 10.527 191.7551828999997 8.931 266.765482899999 12.061 225.12747939999846 9.184 260.3518465000022 12.045 211.08337889999822 9.403 134.82114379999854 11.159 192.66605680000015 9.186)
Error minima by case: (35.0362 6 23.5961 8 10.1667 8 2.4944 5 12.1503 8 9.6878 8 0.9701 7 43.7437 9 11.4423 8 14.1739 8 13.1856 8 2.9001 6 31.178 7 5.0593 8 6.1134 7 23.1804 9 11.6023 8 7.74 8 0.0329 6 14.5462 9 10.4039 7 6.2825 8 24.2995 8 21.2237 8 16.8305 8)
Average genome size in population (length): 90.831
Average program size in population (points): 91.831
Average percent parens in population: 0.011
Minimum age in population: 202.8648268871685
Maximum age in population: 207.4100925962297
Average age in population: 205.1883054980224
Median age in population: 205.1952062147626
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 6
Genome diversity (% unique Plush genomes):	 0.876
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 6
Syntactic diversity (% unique Push programs):	 0.876
Total error diversity:				 0.412
Error (vector) diversity:			 0.421
Behavioral diversity:				 0.422
--- Run Statistics ---
Number of program evaluations used so far: 148000
Number of point (instruction) evaluations so far: 267527365
--- Timings ---
Current time: 1529615490601 milliseconds
Total Time:         596.6 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       225.6 seconds, 37.8%
Fitness Testing:    295.2 seconds, 49.5%
Report:              75.6 seconds, 12.7%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 147
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 148
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 148
;;******************************
;; -*- Number IO problem report - generation 148
Test total error for best: 64453.020200000035
Test mean error for best: 32.22651
;;------------------------------
Outputs of best individual on training cases:
Correct output: -116.076402553 | Program output: -41.0401600   
Correct output: 24.1400847456  | Program output: -10.07181     
Correct output: 69.833290954   | Program output: 20.0219241    
Correct output: 82.4958592801  | Program output: 94.015857281  
Correct output: 34.2385110874  | Program output: 81.02551287   
Correct output: -10.7358110665 | Program output: 47.048110545  
Correct output: 1.9700532093   | Program output: -11.050100    
Correct output: -44.7956976677 | Program output: 51.052140557  
Correct output: 68.5576547673  | Program output: 46.047103777  
Correct output: -69.2536523379 | Program output: -54.0192809   
Correct output: -14.2275745396 | Program output: 41.04274047   
Correct output: -171.9767905886 | Program output: -85.0767056   
Correct output: -32.1846093265 | Program output: 1.0265        
Correct output: 66.9812146721  | Program output: 73.074405151  
Correct output: 100.0259781081 | Program output: 34.03542841   
Correct output: -90.2595503995 | Program output: -34.0791089   
Correct output: -82.4635707651 | Program output: -96.0659025   
Correct output: -8.7492896214  | Program output: -50.0312401   
Correct output: -82.1329348831 | Program output: -82.0796561   
Correct output: 24.5261129925  | Program output: -73.0405184   
Correct output: -11.4065589042 | Program output: -53.0602704   
Correct output: 10.3282540908  | Program output: -77.045776    
Correct output: -51.7760580299 | Program output: -78.0755929   
Correct output: 51.8185003253  | Program output: 74.075421801  
Correct output: 110.7431489201 | Program output: 20.0219241    
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_yankdup} {:instruction float_pop} {:instruction float_mult} {:instruction float_yankdup} {:instruction float_mod} {:instruction float_mult} {:instruction in2} {:instruction integer_inc} {:instruction float_yankdup} {:instruction float_min} {:instruction integer_add} {:instruction 28} {:instruction integer_add} {:instruction float_pop} {:instruction integer_inc} {:instruction in2} {:instruction float_dup_times} {:instruction float_max} {:instruction print_float} {:instruction integer_mult} {:instruction float_mult} {:instruction float_pop} {:instruction float_mult} {:instruction integer_inc} {:instruction in2} {:instruction float_max} {:instruction integer_dup} {:instruction print_float} {:instruction integer_mult} {:instruction float_mult} {:instruction float_pop} {:instruction float_min} {:instruction float_mult} {:instruction in2} {:instruction float_sub} {:instruction float_sub} {:instruction float_mult} {:instruction integer_dup} {:instruction integer_dup} {:instruction float_add} {:instruction integer_dec} {:instruction integer_shove} {:instruction float_mult} {:instruction float_add} {:instruction float_rot} {:instruction integer_mult} {:instruction integer_dup} {:instruction float_dup} {:instruction integer_dup} {:instruction float_add} {:instruction integer_dec} {:instruction integer_mult} {:instruction float_mult} {:instruction float_yankdup} {:instruction float_tan} {:instruction float_tan} {:instruction in2} {:instruction float_max} {:instruction in2} {:instruction integer_dup} {:instruction integer_pop} {:instruction integer_dec} {:instruction float_cos} {:instruction float_frominteger} {:instruction integer_swap} {:instruction integer_mod} {:instruction integer_dup} {:instruction 80} {:instruction integer_mod} {:instruction integer_dup} {:instruction print_float} {:instruction print_float} {:instruction float_frominteger} {:instruction print_integer} {:instruction integer_sub} {:instruction integer_inc} {:instruction integer_max} {:instruction -86} {:instruction float_shove} {:instruction float_mult} {:instruction integer_max} {:instruction float_dup} {:instruction float_sub} {:instruction integer_mult} {:instruction integer_shove} {:instruction print_integer} {:instruction integer_shove} {:instruction print_integer} {:instruction integer_swap})
Best program: (float_yankdup float_pop float_mult float_yankdup float_mod float_mult in2 integer_inc float_yankdup float_min integer_add 28 integer_add float_pop integer_inc in2 float_dup_times float_max print_float integer_mult float_mult float_pop float_mult integer_inc in2 float_max integer_dup print_float integer_mult float_mult float_pop float_min float_mult in2 float_sub float_sub float_mult integer_dup integer_dup float_add integer_dec integer_shove float_mult float_add float_rot integer_mult integer_dup float_dup integer_dup float_add integer_dec integer_mult float_mult float_yankdup float_tan float_tan in2 float_max in2 integer_dup integer_pop integer_dec float_cos float_frominteger integer_swap integer_mod integer_dup 80 integer_mod integer_dup print_float print_float float_frominteger print_integer integer_sub integer_inc integer_max -86 float_shove float_mult integer_max float_dup float_sub integer_mult integer_shove print_integer integer_shove print_integer integer_swap)
Errors: [75.0362 8 34.2119 10 49.8114 9 11.52 6 46.787 8 57.7839 8 13.0202 9 95.8478 11 22.5106 9 15.2344 10 55.2703 10 86.9001 7 33.2111 9 6.0932 11 65.9905 9 56.1804 9 13.6023 8 41.282 10 0.0533 8 97.5666 12 41.6537 8 87.374 12 26.2995 8 22.2569 11 90.7212 8]
Total: 1374.2185000000002
Mean: 27.48437
Genome size: 89
Size: 90
Percent parens: 0.011
--- Population Statistics ---
Average total errors in population: 5019.0970694
Median total errors in population: 1384.2781500000003
Error averages by case: (240.51591100000115 8.816 294.3472535999982 10.508 153.4787765000014 9.757 123.38810150000054 8.535 149.9250065999993 9.414 160.35417779999975 9.947 279.25574050000046 9.373 194.1756291999987 11.913 131.07834899999887 10.006 194.85805699999833 10.754 158.2014785000008 10.792 253.02642629999926 9.111 92.90479399999992 9.862 118.18053700000102 11.33 169.0929441000013 10.097 224.63173370000203 9.978 191.97446039999974 9.232 213.0521817000024 10.545 181.80896489999975 8.961 257.0286378999985 12.089 214.24584629999833 9.193 248.75324250000247 12.056 201.1558377999983 9.359 132.07835559999822 11.197 189.5956260000003 9.164)
Error minima by case: (40.0 7 9.0 6 6.1816 8 2.4158 6 27.2385 8 9.6878 8 0.969 6 43.7084 8 7.4725 8 14.2344 8 13.1712 8 84.0 7 2.0 5 5.0932 8 19.9459 7 33.0 8 12.5364 8 7.7183 8 0.0329 6 17.5261 8 10.3466 8 3.3283 8 25.2239 7 21.2569 9 21.0 8)
Average genome size in population (length): 90.285
Average program size in population (points): 91.285
Average percent parens in population: 0.011
Minimum age in population: 204.3839828029713
Maximum age in population: 208.5916599831485
Average age in population: 206.5264344244812
Median age in population: 206.5744499479252
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 8
Genome diversity (% unique Plush genomes):	 0.873
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 8
Syntactic diversity (% unique Push programs):	 0.873
Total error diversity:				 0.388
Error (vector) diversity:			 0.398
Behavioral diversity:				 0.403
--- Run Statistics ---
Number of program evaluations used so far: 149000
Number of point (instruction) evaluations so far: 269784515
--- Timings ---
Current time: 1529615495050 milliseconds
Total Time:         601.0 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       227.2 seconds, 37.8%
Fitness Testing:    297.6 seconds, 49.5%
Report:              76.2 seconds, 12.7%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 148
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 149
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 149
;;******************************
;; -*- Number IO problem report - generation 149
Test total error for best: 64453.020200000035
Test mean error for best: 32.22651
;;------------------------------
Outputs of best individual on training cases:
Correct output: -116.076402553 | Program output: -41.0401600   
Correct output: 24.1400847456  | Program output: -10.07181     
Correct output: 69.833290954   | Program output: 20.0219241    
Correct output: 82.4958592801  | Program output: 94.015857281  
Correct output: 34.2385110874  | Program output: 81.02551287   
Correct output: -10.7358110665 | Program output: 47.048110545  
Correct output: 1.9700532093   | Program output: -11.050100    
Correct output: -44.7956976677 | Program output: 51.052140557  
Correct output: 68.5576547673  | Program output: 46.047103777  
Correct output: -69.2536523379 | Program output: -54.0192809   
Correct output: -14.2275745396 | Program output: 41.04274047   
Correct output: -171.9767905886 | Program output: -85.0767056   
Correct output: -32.1846093265 | Program output: 1.0265        
Correct output: 66.9812146721  | Program output: 73.074405151  
Correct output: 100.0259781081 | Program output: 34.03542841   
Correct output: -90.2595503995 | Program output: -34.0791089   
Correct output: -82.4635707651 | Program output: -96.0659025   
Correct output: -8.7492896214  | Program output: -50.0312401   
Correct output: -82.1329348831 | Program output: -82.0796561   
Correct output: 24.5261129925  | Program output: -73.0405184   
Correct output: -11.4065589042 | Program output: -53.0602704   
Correct output: 10.3282540908  | Program output: -77.045776    
Correct output: -51.7760580299 | Program output: -78.0755929   
Correct output: 51.8185003253  | Program output: 74.075421801  
Correct output: 110.7431489201 | Program output: 20.0219241    
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_dup_items} {:instruction float_dup} {:instruction float_yankdup} {:instruction float_pop} {:instruction float_mult} {:instruction float_dup_times} {:instruction float_shove} {:instruction float_pop} {:instruction float_mult} {:instruction in2} {:instruction integer_inc} {:instruction float_yank} {:instruction float_mult} {:instruction 28} {:instruction integer_add} {:instruction float_pop} {:instruction integer_inc} {:instruction in2} {:instruction float_max} {:instruction integer_mult} {:instruction float_mult} {:instruction tagged_742} {:instruction float_mult} {:instruction integer_inc} {:instruction in2} {:instruction float_inc} {:instruction integer_dup} {:instruction float_swap} {:instruction integer_mult} {:instruction float_mult} {:instruction float_pop} {:instruction float_min} {:instruction float_mult} {:instruction in2} {:instruction float_sub} {:instruction float_sub} {:instruction float_mult} {:instruction integer_dup} {:instruction integer_dup} {:instruction tag_float_899} {:instruction integer_dec} {:instruction integer_shove} {:instruction float_mult} {:instruction float_add} {:instruction float_rot} {:instruction integer_mult} {:instruction integer_dup} {:instruction float_dup} {:instruction integer_dup} {:instruction float_add} {:instruction integer_dec} {:instruction integer_mult} {:instruction float_mult} {:instruction float_yankdup} {:instruction float_tan} {:instruction float_tan} {:instruction in2} {:instruction float_max} {:instruction in2} {:instruction integer_dup} {:instruction integer_pop} {:instruction integer_dec} {:instruction float_cos} {:instruction float_frominteger} {:instruction integer_swap} {:instruction integer_mod} {:instruction integer_dup} {:instruction 80} {:instruction integer_mod} {:instruction integer_dup} {:instruction print_float} {:instruction print_float} {:instruction float_frominteger} {:instruction print_integer} {:instruction integer_sub} {:instruction integer_inc} {:instruction integer_max} {:instruction -86} {:instruction float_shove} {:instruction float_mult} {:instruction integer_max} {:instruction float_dup} {:instruction float_sub} {:instruction integer_mult} {:instruction integer_shove} {:instruction print_integer} {:instruction integer_shove} {:instruction print_integer} {:instruction integer_swap})
Best program: (integer_dup_items float_dup float_yankdup float_pop float_mult float_dup_times float_shove float_pop float_mult in2 integer_inc float_yank float_mult 28 integer_add float_pop integer_inc in2 float_max integer_mult float_mult tagged_742 float_mult integer_inc in2 float_inc integer_dup float_swap integer_mult float_mult float_pop float_min float_mult in2 float_sub float_sub float_mult integer_dup integer_dup tag_float_899 integer_dec integer_shove float_mult float_add float_rot integer_mult integer_dup float_dup integer_dup float_add integer_dec integer_mult float_mult float_yankdup float_tan float_tan in2 float_max in2 integer_dup integer_pop integer_dec float_cos float_frominteger integer_swap integer_mod integer_dup 80 integer_mod integer_dup print_float print_float float_frominteger print_integer integer_sub integer_inc integer_max -86 float_shove float_mult integer_max float_dup float_sub integer_mult integer_shove print_integer integer_shove print_integer integer_swap)
Errors: [75.0362 8 34.2119 10 49.8114 9 11.52 6 46.787 8 57.7839 8 13.0202 9 95.8478 11 22.5106 9 15.2344 10 55.2703 10 86.9001 7 33.2111 9 6.0932 11 65.9905 9 56.1804 9 13.6023 8 41.282 10 0.0533 8 97.5666 12 41.6537 8 87.374 12 26.2995 8 22.2569 11 90.7212 8]
Total: 1374.2185000000002
Mean: 27.48437
Genome size: 89
Size: 90
Percent parens: 0.011
--- Population Statistics ---
Average total errors in population: 5026.545772199996
Median total errors in population: 1389.7419
Error averages by case: (250.03566640000093 8.787 313.4483474999981 10.495 142.24082950000118 9.749 111.4578841000004 8.5 136.66485879999857 9.375 150.7457505999995 9.903 300.24822020000147 9.38 184.99732339999898 11.852 119.81047859999909 9.919 204.13244229999833 10.759 148.42369450000075 10.679 260.98699969999944 9.083 83.81250320000011 9.835 105.286027200001 11.252 158.57525810000112 9.962 234.54595380000194 9.986 201.13093489999963 9.205 223.7335955000025 10.573 190.37956389999965 8.882 265.81981579999905 12.108 224.25844729999835 9.171 256.51248980000224 12.066 209.86384229999837 9.355 119.51830609999847 11.089 178.81853870000012 9.133)
Error minima by case: (74.0362 7 13.1401 9 27.8128 8 10.5127 6 12.1585 8 9.6683 8 0.9289 7 43.7435 9 21.4772 8 14.1748 8 13.1792 9 85.9001 7 31.162 7 5.0228 8 29.9917 7 55.1804 9 12.5364 8 7.73 8 0.0527 6 12.5261 9 10.3464 8 1.6717 9 25.2239 8 21.1857 8 10.2569 8)
Average genome size in population (length): 90.214
Average program size in population (points): 91.214
Average percent parens in population: 0.011
Minimum age in population: 205.7043914857446
Maximum age in population: 209.9997569305531
Average age in population: 207.8835810849091
Median age in population: 207.9448119693259
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 6
Genome diversity (% unique Plush genomes):	 0.888
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 6
Syntactic diversity (% unique Push programs):	 0.888
Total error diversity:				 0.402
Error (vector) diversity:			 0.413
Behavioral diversity:				 0.415
--- Run Statistics ---
Number of program evaluations used so far: 150000
Number of point (instruction) evaluations so far: 272039915
--- Timings ---
Current time: 1529615499399 milliseconds
Total Time:         605.4 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       228.7 seconds, 37.8%
Fitness Testing:    299.8 seconds, 49.5%
Report:              76.7 seconds, 12.7%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 149
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 150
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 150
;;******************************
;; -*- Number IO problem report - generation 150
Test total error for best: 64453.020200000035
Test mean error for best: 32.22651
;;------------------------------
Outputs of best individual on training cases:
Correct output: -116.076402553 | Program output: -41.0401600   
Correct output: 24.1400847456  | Program output: -10.07181     
Correct output: 69.833290954   | Program output: 20.0219241    
Correct output: 82.4958592801  | Program output: 94.015857281  
Correct output: 34.2385110874  | Program output: 81.02551287   
Correct output: -10.7358110665 | Program output: 47.048110545  
Correct output: 1.9700532093   | Program output: -11.050100    
Correct output: -44.7956976677 | Program output: 51.052140557  
Correct output: 68.5576547673  | Program output: 46.047103777  
Correct output: -69.2536523379 | Program output: -54.0192809   
Correct output: -14.2275745396 | Program output: 41.04274047   
Correct output: -171.9767905886 | Program output: -85.0767056   
Correct output: -32.1846093265 | Program output: 1.0265        
Correct output: 66.9812146721  | Program output: 73.074405151  
Correct output: 100.0259781081 | Program output: 34.03542841   
Correct output: -90.2595503995 | Program output: -34.0791089   
Correct output: -82.4635707651 | Program output: -96.0659025   
Correct output: -8.7492896214  | Program output: -50.0312401   
Correct output: -82.1329348831 | Program output: -82.0796561   
Correct output: 24.5261129925  | Program output: -73.0405184   
Correct output: -11.4065589042 | Program output: -53.0602704   
Correct output: 10.3282540908  | Program output: -77.045776    
Correct output: -51.7760580299 | Program output: -78.0755929   
Correct output: 51.8185003253  | Program output: 74.075421801  
Correct output: 110.7431489201 | Program output: 20.0219241    
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_yankdup} {:instruction float_cos} {:instruction integer_dup_times} {:instruction float_yankdup} {:instruction integer_dup_items} {:instruction float_mult} {:instruction float_pop} {:instruction float_yank} {:instruction in2} {:instruction integer_inc} {:instruction float_yankdup} {:instruction float_yank} {:instruction float_mult} {:instruction 28} {:instruction integer_add} {:instruction float_pop} {:instruction integer_inc} {:instruction in2} {:instruction float_max} {:instruction float_rot} {:instruction print_float} {:instruction integer_mult} {:instruction integer_mod} {:instruction float_sub} {:instruction integer_max} {:instruction integer_inc} {:instruction in2} {:instruction float_max} {:instruction integer_dup} {:instruction tagged_72} {:instruction integer_mult} {:instruction float_mult} {:instruction float_pop} {:instruction float_sin} {:instruction float_mult} {:instruction in2} {:instruction float_sub} {:instruction float_sub} {:instruction float_mult} {:instruction integer_dup} {:instruction integer_dup} {:instruction tagged_426} {:instruction integer_dec} {:instruction integer_shove} {:instruction float_mult} {:instruction float_min} {:instruction float_mult} {:instruction integer_mult} {:instruction integer_dup} {:instruction float_add} {:instruction integer_dup} {:instruction float_add} {:instruction integer_dec} {:instruction integer_mult} {:instruction float_mult} {:instruction float_yankdup} {:instruction float_tan} {:instruction in2} {:instruction float_max} {:instruction in2} {:instruction float_yankdup} {:instruction integer_dup} {:instruction integer_pop} {:instruction integer_dec} {:instruction float_cos} {:instruction float_frominteger} {:instruction integer_swap} {:instruction integer_mod} {:instruction integer_dup} {:instruction 80} {:instruction integer_mod} {:instruction integer_dup} {:instruction print_float} {:instruction float_frominteger} {:instruction print_integer} {:instruction integer_sub} {:instruction integer_inc} {:instruction integer_max} {:instruction integer_stackdepth} {:instruction float_shove} {:instruction float_mult} {:instruction integer_max} {:instruction float_min} {:instruction float_inc} {:instruction integer_mult} {:instruction integer_shove} {:instruction print_integer} {:instruction integer_swap})
Best program: (float_yankdup float_cos integer_dup_times float_yankdup integer_dup_items float_mult float_pop float_yank in2 integer_inc float_yankdup float_yank float_mult 28 integer_add float_pop integer_inc in2 float_max float_rot print_float integer_mult integer_mod float_sub integer_max integer_inc in2 float_max integer_dup tagged_72 integer_mult float_mult float_pop float_sin float_mult in2 float_sub float_sub float_mult integer_dup integer_dup tagged_426 integer_dec integer_shove float_mult float_min float_mult integer_mult integer_dup float_add integer_dup float_add integer_dec integer_mult float_mult float_yankdup float_tan in2 float_max in2 float_yankdup integer_dup integer_pop integer_dec float_cos float_frominteger integer_swap integer_mod integer_dup 80 integer_mod integer_dup print_float float_frominteger print_integer integer_sub integer_inc integer_max integer_stackdepth float_shove float_mult integer_max float_min float_inc integer_mult integer_shove print_integer integer_swap)
Errors: [75.0362 8 34.2119 10 49.8114 9 11.52 6 46.787 8 57.7839 8 13.0202 9 95.8478 11 22.5106 9 15.2344 10 55.2703 10 86.9001 7 33.2111 9 6.0932 11 65.9905 9 56.1804 9 13.6023 8 41.282 10 0.0533 8 97.5666 12 41.6537 8 87.374 12 26.2995 8 22.2569 11 90.7212 8]
Total: 1374.2185000000002
Mean: 27.48437
Genome size: 88
Size: 89
Percent parens: 0.011
--- Population Statistics ---
Average total errors in population: 4890.2632627
Median total errors in population: 1388.2060000000001
Error averages by case: (231.44674140000095 8.796 290.75034099999766 10.493 149.8033631000014 9.766 118.03289010000051 8.566 145.6000539999988 9.407 157.5404027999998 9.97 279.24321260000033 9.368 191.50415699999894 11.902 127.3696702999988 9.958 186.1428508999987 10.794 156.23837330000083 10.777 247.13225179999952 9.112 81.47562700000002 9.809 112.93427810000108 11.342 165.94028930000124 10.097 214.08219570000148 9.966 186.56771189999964 9.232 206.0993466000026 10.551 175.52184469999963 8.896 253.39019959999877 12.11 206.99992989999848 9.234 245.07055710000205 12.083 196.31773059999804 9.392 127.16883259999825 11.189 185.85841130000028 9.222)
Error minima by case: (40.0 7 3.1401 9 10.1667 8 2.4877 5 32.2094 8 0.7348 8 0.9701 8 34.7947 9 11.4423 8 13.2344 8 4.2266 9 84.0 7 2.0 6 4.0936 8 8.8688 7 33.0 8 12.5426 8 1.2517 8 0.0523 6 15.4739 9 1.4056 8 6.3079 9 4.7761 7 20.2573 8 19.5859 8)
Average genome size in population (length): 90.181
Average program size in population (points): 91.181
Average percent parens in population: 0.011
Minimum age in population: 206.896040465204
Maximum age in population: 211.2734342283956
Average age in population: 209.2749500667556
Median age in population: 209.3487751446687
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 7
Genome diversity (% unique Plush genomes):	 0.892
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 7
Syntactic diversity (% unique Push programs):	 0.892
Total error diversity:				 0.392
Error (vector) diversity:			 0.399
Behavioral diversity:				 0.401
--- Run Statistics ---
Number of program evaluations used so far: 151000
Number of point (instruction) evaluations so far: 274294515
--- Timings ---
Current time: 1529615503913 milliseconds
Total Time:         609.9 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       230.4 seconds, 37.8%
Fitness Testing:    302.1 seconds, 49.5%
Report:              77.2 seconds, 12.7%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 150
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 151
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 151
;;******************************
;; -*- Number IO problem report - generation 151
Test total error for best: 64453.020200000035
Test mean error for best: 32.22651
;;------------------------------
Outputs of best individual on training cases:
Correct output: -116.076402553 | Program output: -41.0401600   
Correct output: 24.1400847456  | Program output: -10.07181     
Correct output: 69.833290954   | Program output: 20.0219241    
Correct output: 82.4958592801  | Program output: 94.015857281  
Correct output: 34.2385110874  | Program output: 81.02551287   
Correct output: -10.7358110665 | Program output: 47.048110545  
Correct output: 1.9700532093   | Program output: -11.050100    
Correct output: -44.7956976677 | Program output: 51.052140557  
Correct output: 68.5576547673  | Program output: 46.047103777  
Correct output: -69.2536523379 | Program output: -54.0192809   
Correct output: -14.2275745396 | Program output: 41.04274047   
Correct output: -171.9767905886 | Program output: -85.0767056   
Correct output: -32.1846093265 | Program output: 1.0265        
Correct output: 66.9812146721  | Program output: 73.074405151  
Correct output: 100.0259781081 | Program output: 34.03542841   
Correct output: -90.2595503995 | Program output: -34.0791089   
Correct output: -82.4635707651 | Program output: -96.0659025   
Correct output: -8.7492896214  | Program output: -50.0312401   
Correct output: -82.1329348831 | Program output: -82.0796561   
Correct output: 24.5261129925  | Program output: -73.0405184   
Correct output: -11.4065589042 | Program output: -53.0602704   
Correct output: 10.3282540908  | Program output: -77.045776    
Correct output: -51.7760580299 | Program output: -78.0755929   
Correct output: 51.8185003253  | Program output: 74.075421801  
Correct output: 110.7431489201 | Program output: 20.0219241    
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_yankdup} {:instruction float_shove} {:instruction integer_min} {:instruction float_pop} {:instruction float_mult} {:instruction in2} {:instruction integer_inc} {:instruction float_yankdup} {:instruction float_yank} {:instruction float_mult} {:instruction 28} {:instruction integer_add} {:instruction float_pop} {:instruction integer_inc} {:instruction in2} {:instruction float_max} {:instruction float_rot} {:instruction print_float} {:instruction integer_mult} {:instruction float_mult} {:instruction float_pop} {:instruction float_cos} {:instruction integer_inc} {:instruction in2} {:instruction float_max} {:instruction integer_dup} {:instruction print_float} {:instruction integer_mult} {:instruction float_mult} {:instruction print_float} {:instruction float_sin} {:instruction float_mult} {:instruction float_mult} {:instruction in2} {:instruction float_sub} {:instruction float_sub} {:instruction float_mult} {:instruction integer_dup} {:instruction integer_dup} {:instruction float_add} {:instruction integer_swap} {:instruction integer_shove} {:instruction float_tan} {:instruction float_mult} {:instruction integer_mult} {:instruction integer_dup} {:instruction float_shove} {:instruction integer_dup} {:instruction float_add} {:instruction integer_dec} {:instruction integer_mult} {:instruction float_mult} {:instruction float_yankdup} {:instruction integer_fromfloat} {:instruction float_max} {:instruction in2} {:instruction in2} {:instruction float_yankdup} {:instruction integer_dec} {:instruction float_cos} {:instruction float_frominteger} {:instruction integer_swap} {:instruction integer_mod} {:instruction integer_dup} {:instruction 80} {:instruction integer_mod} {:instruction integer_dup} {:instruction print_float} {:instruction float_frominteger} {:instruction print_integer} {:instruction integer_sub} {:instruction integer_inc} {:instruction integer_max} {:instruction integer_stackdepth} {:instruction float_shove} {:instruction float_mult} {:instruction integer_max} {:instruction 82.47679184163479} {:instruction float_inc} {:instruction integer_mult} {:instruction float_mod} {:instruction print_integer} {:instruction integer_dec} {:instruction float_rot} {:instruction print_integer} {:instruction float_inc} {:instruction print_integer} {:instruction integer_sub} {:instruction integer_inc} {:instruction integer_max} {:instruction integer_dup_items} {:instruction float_shove} {:instruction 72.91027992373763} {:instruction integer_max} {:instruction float_dup} {:instruction float_inc} {:instruction integer_mult} {:instruction integer_shove})
Best program: (float_yankdup float_shove integer_min float_pop float_mult in2 integer_inc float_yankdup float_yank float_mult 28 integer_add float_pop integer_inc in2 float_max float_rot print_float integer_mult float_mult float_pop float_cos integer_inc in2 float_max integer_dup print_float integer_mult float_mult print_float float_sin float_mult float_mult in2 float_sub float_sub float_mult integer_dup integer_dup float_add integer_swap integer_shove float_tan float_mult integer_mult integer_dup float_shove integer_dup float_add integer_dec integer_mult float_mult float_yankdup integer_fromfloat float_max in2 in2 float_yankdup integer_dec float_cos float_frominteger integer_swap integer_mod integer_dup 80 integer_mod integer_dup print_float float_frominteger print_integer integer_sub integer_inc integer_max integer_stackdepth float_shove float_mult integer_max 82.47679184163479 float_inc integer_mult float_mod print_integer integer_dec float_rot print_integer float_inc print_integer integer_sub integer_inc integer_max integer_dup_items float_shove 72.91027992373763 integer_max float_dup float_inc integer_mult integer_shove)
Errors: [75.0362 8 34.2119 10 49.8114 9 11.52 6 46.787 8 57.7839 8 13.0202 9 95.8478 11 22.5106 9 15.2344 10 55.2703 10 86.9001 7 33.2111 9 6.0932 11 65.9905 9 56.1804 9 13.6023 8 41.282 10 0.0533 8 97.5666 12 41.6537 8 87.374 12 26.2995 8 22.2569 11 90.7212 8]
Total: 1374.2185000000002
Mean: 27.48437
Genome size: 98
Size: 99
Percent parens: 0.010
--- Population Statistics ---
Average total errors in population: 5223.5558471999975
Median total errors in population: 1392.2212
Error averages by case: (251.10597130000096 8.868 309.67310209999823 10.492 158.84923960000154 9.81 128.00299350000068 8.69 155.93307579999941 9.487 167.83041200000002 10.03 295.7812208000007 9.368 201.3636464999986 11.961 137.28983799999904 10.075 204.32472849999854 10.823 165.67061830000105 10.852 261.0185147999996 9.255 89.67035550000008 9.843 123.031735300001 11.431 175.41892840000142 10.163 233.85124960000198 10.064 201.29338369999962 9.372 224.03470740000222 10.616 190.56437349999976 9.02 267.1615921999987 12.15 224.52827899999852 9.3 259.84095010000254 12.131 211.82924729999837 9.474 137.02044499999818 11.271 194.65623900000037 9.265)
Error minima by case: (73.9972 7 18.1401 8 9.1667 8 2.4959 5 12.9184 8 9.6873 6 0.969 7 17.7436 8 10.4423 8 14.1744 8 12.8145 8 85.8971 6 2.0 4 5.0228 8 20.026 8 55.1804 8 11.6022 8 7.6917 8 0.0329 6 16.5098 9 10.3335 6 4.3283 8 24.2993 7 4.6616 8 9.2569 7)
Average genome size in population (length): 89.7
Average program size in population (points): 90.7
Average percent parens in population: 0.011
Minimum age in population: 208.4827388800559
Maximum age in population: 212.647886750752
Average age in population: 210.6836700791254
Median age in population: 210.7261696649587
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 5
Genome diversity (% unique Plush genomes):	 0.909
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 5
Syntactic diversity (% unique Push programs):	 0.909
Total error diversity:				 0.416
Error (vector) diversity:			 0.424
Behavioral diversity:				 0.425
--- Run Statistics ---
Number of program evaluations used so far: 152000
Number of point (instruction) evaluations so far: 276537115
--- Timings ---
Current time: 1529615508342 milliseconds
Total Time:         614.2 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       231.9 seconds, 37.8%
Fitness Testing:    304.4 seconds, 49.6%
Report:              77.8 seconds, 12.7%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 151
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 152
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 152
;;******************************
;; -*- Number IO problem report - generation 152
Test total error for best: 64453.020200000035
Test mean error for best: 32.22651
;;------------------------------
Outputs of best individual on training cases:
Correct output: -116.076402553 | Program output: -41.0401600   
Correct output: 24.1400847456  | Program output: -10.07181     
Correct output: 69.833290954   | Program output: 20.0219241    
Correct output: 82.4958592801  | Program output: 94.015857281  
Correct output: 34.2385110874  | Program output: 81.02551287   
Correct output: -10.7358110665 | Program output: 47.048110545  
Correct output: 1.9700532093   | Program output: -11.050100    
Correct output: -44.7956976677 | Program output: 51.052140557  
Correct output: 68.5576547673  | Program output: 46.047103777  
Correct output: -69.2536523379 | Program output: -54.0192809   
Correct output: -14.2275745396 | Program output: 41.04274047   
Correct output: -171.9767905886 | Program output: -85.0767056   
Correct output: -32.1846093265 | Program output: 1.0265        
Correct output: 66.9812146721  | Program output: 73.074405151  
Correct output: 100.0259781081 | Program output: 34.03542841   
Correct output: -90.2595503995 | Program output: -34.0791089   
Correct output: -82.4635707651 | Program output: -96.0659025   
Correct output: -8.7492896214  | Program output: -50.0312401   
Correct output: -82.1329348831 | Program output: -82.0796561   
Correct output: 24.5261129925  | Program output: -73.0405184   
Correct output: -11.4065589042 | Program output: -53.0602704   
Correct output: 10.3282540908  | Program output: -77.045776    
Correct output: -51.7760580299 | Program output: -78.0755929   
Correct output: 51.8185003253  | Program output: 74.075421801  
Correct output: 110.7431489201 | Program output: 20.0219241    
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_dup_items} {:instruction float_mult} {:instruction float_rot} {:instruction integer_mult} {:instruction float_pop} {:instruction float_mult} {:instruction float_yankdup} {:instruction float_pop} {:instruction float_mult} {:instruction float_yankdup} {:instruction float_sin} {:instruction float_mult} {:instruction in2} {:instruction integer_inc} {:instruction float_yankdup} {:instruction float_flush} {:instruction float_mult} {:instruction 28} {:instruction integer_add} {:instruction float_pop} {:instruction integer_inc} {:instruction in2} {:instruction float_max} {:instruction print_float} {:instruction integer_mult} {:instruction float_mult} {:instruction float_rot} {:instruction print_float} {:instruction float_mult} {:instruction float_pop} {:instruction float_mult} {:instruction integer_inc} {:instruction in2} {:instruction integer_dup} {:instruction print_float} {:instruction integer_mult} {:instruction float_mult} {:instruction float_pop} {:instruction float_mult} {:instruction float_mult} {:instruction in2} {:instruction float_mult} {:instruction integer_dup} {:instruction integer_dup} {:instruction float_max} {:instruction integer_dec} {:instruction integer_shove} {:instruction float_mult} {:instruction float_rot} {:instruction float_mult} {:instruction float_add} {:instruction float_mult} {:instruction integer_mult} {:instruction integer_dup} {:instruction float_add} {:instruction integer_dup} {:instruction float_add} {:instruction integer_dec} {:instruction integer_mult} {:instruction float_mult} {:instruction float_yankdup} {:instruction float_tan} {:instruction in2} {:instruction float_max} {:instruction float_rot} {:instruction float_mod} {:instruction in2} {:instruction integer_dup} {:instruction integer_pop} {:instruction integer_dec} {:instruction float_cos} {:instruction float_frominteger} {:instruction integer_swap} {:instruction integer_mod} {:instruction integer_dup} {:instruction 80} {:instruction integer_mod} {:instruction integer_dup} {:instruction print_float} {:instruction float_frominteger} {:instruction print_integer} {:instruction integer_sub} {:instruction integer_inc} {:instruction integer_max} {:instruction float_dup} {:instruction integer_max} {:instruction integer_mult} {:instruction integer_mult} {:instruction print_integer} {:instruction float_dup} {:instruction float_inc} {:instruction print_integer} {:instruction integer_swap})
Best program: (integer_dup_items float_mult float_rot integer_mult float_pop float_mult float_yankdup float_pop float_mult float_yankdup float_sin float_mult in2 integer_inc float_yankdup float_flush float_mult 28 integer_add float_pop integer_inc in2 float_max print_float integer_mult float_mult float_rot print_float float_mult float_pop float_mult integer_inc in2 integer_dup print_float integer_mult float_mult float_pop float_mult float_mult in2 float_mult integer_dup integer_dup float_max integer_dec integer_shove float_mult float_rot float_mult float_add float_mult integer_mult integer_dup float_add integer_dup float_add integer_dec integer_mult float_mult float_yankdup float_tan in2 float_max float_rot float_mod in2 integer_dup integer_pop integer_dec float_cos float_frominteger integer_swap integer_mod integer_dup 80 integer_mod integer_dup print_float float_frominteger print_integer integer_sub integer_inc integer_max float_dup integer_max integer_mult integer_mult print_integer float_dup float_inc print_integer integer_swap)
Errors: [75.0362 8 34.2119 10 49.8114 9 11.52 6 46.787 8 57.7839 8 13.0202 9 95.8478 11 22.5106 9 15.2344 10 55.2703 10 86.9001 7 33.2111 9 6.0932 11 65.9905 9 56.1804 9 13.6023 8 41.282 10 0.0533 8 97.5666 12 41.6537 8 87.374 12 26.2995 8 22.2569 11 90.7212 8]
Total: 1374.2185000000002
Mean: 27.48437
Genome size: 93
Size: 94
Percent parens: 0.011
--- Population Statistics ---
Average total errors in population: 5063.895946999998
Median total errors in population: 1394.2293
Error averages by case: (244.408411100001 8.87 333.8253645999981 10.554 149.5448450000012 9.821 116.25224620000047 8.659 142.61793809999892 9.46 156.5103809999998 10.024 320.3964224000014 9.428 190.57348739999912 11.971 125.80282649999897 10.026 196.1244106999986 10.833 154.27636420000064 10.786 253.5993442999995 9.308 88.4738254 9.864 111.71787570000095 11.32 164.25003430000098 10.111 228.65390450000126 10.063 193.27867879999968 9.312 216.01070250000217 10.608 182.42997209999965 8.991 259.4434721999992 12.127 216.4921472999985 9.324 251.15473860000188 12.091 202.95505619999872 9.484 125.85986849999821 11.171 185.78162940000024 9.256)
Error minima by case: (36.0724 7 3.1401 8 10.176 8 2.4873 5 24.2385 7 9.6873 7 0.9701 8 18.6103 9 8.4423 8 14.1748 8 11.9578 8 3.9723 7 5.9992 8 5.0228 8 20.0217 7 24.2586 8 10.5364 7 7.7174 8 0.0329 6 14.5462 9 10.3463 7 6.2825 9 23.2239 8 21.1857 8 30.7339 8)
Average genome size in population (length): 89.762
Average program size in population (points): 90.762
Average percent parens in population: 0.011
Minimum age in population: 209.7337617965419
Maximum age in population: 214.0715066993329
Average age in population: 212.082754443028
Median age in population: 212.1169935841047
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 6
Genome diversity (% unique Plush genomes):	 0.875
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 6
Syntactic diversity (% unique Push programs):	 0.875
Total error diversity:				 0.437
Error (vector) diversity:			 0.445
Behavioral diversity:				 0.445
--- Run Statistics ---
Number of program evaluations used so far: 153000
Number of point (instruction) evaluations so far: 278781165
--- Timings ---
Current time: 1529615513219 milliseconds
Total Time:         619.0 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       233.5 seconds, 37.7%
Fitness Testing:    306.9 seconds, 49.6%
Report:              78.5 seconds, 12.7%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 152
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 153
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 153
;;******************************
;; -*- Number IO problem report - generation 153
Test total error for best: 64453.020200000035
Test mean error for best: 32.22651
;;------------------------------
Outputs of best individual on training cases:
Correct output: -116.076402553 | Program output: -41.0401600   
Correct output: 24.1400847456  | Program output: -10.07181     
Correct output: 69.833290954   | Program output: 20.0219241    
Correct output: 82.4958592801  | Program output: 94.015857281  
Correct output: 34.2385110874  | Program output: 81.02551287   
Correct output: -10.7358110665 | Program output: 47.048110545  
Correct output: 1.9700532093   | Program output: -11.050100    
Correct output: -44.7956976677 | Program output: 51.052140557  
Correct output: 68.5576547673  | Program output: 46.047103777  
Correct output: -69.2536523379 | Program output: -54.0192809   
Correct output: -14.2275745396 | Program output: 41.04274047   
Correct output: -171.9767905886 | Program output: -85.0767056   
Correct output: -32.1846093265 | Program output: 1.0265        
Correct output: 66.9812146721  | Program output: 73.074405151  
Correct output: 100.0259781081 | Program output: 34.03542841   
Correct output: -90.2595503995 | Program output: -34.0791089   
Correct output: -82.4635707651 | Program output: -96.0659025   
Correct output: -8.7492896214  | Program output: -50.0312401   
Correct output: -82.1329348831 | Program output: -82.0796561   
Correct output: 24.5261129925  | Program output: -73.0405184   
Correct output: -11.4065589042 | Program output: -53.0602704   
Correct output: 10.3282540908  | Program output: -77.045776    
Correct output: -51.7760580299 | Program output: -78.0755929   
Correct output: 51.8185003253  | Program output: 74.075421801  
Correct output: 110.7431489201 | Program output: 20.0219241    
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_yankdup} {:instruction float_cos} {:instruction integer_dup_times} {:instruction float_yankdup} {:instruction integer_dup_items} {:instruction in2} {:instruction integer_inc} {:instruction float_yank} {:instruction float_mult} {:instruction 28} {:instruction integer_add} {:instruction float_pop} {:instruction integer_inc} {:instruction in2} {:instruction float_max} {:instruction integer_mult} {:instruction float_mult} {:instruction float_pop} {:instruction float_mult} {:instruction integer_inc} {:instruction in2} {:instruction float_inc} {:instruction integer_dup} {:instruction float_mult} {:instruction integer_inc} {:instruction in2} {:instruction float_max} {:instruction integer_dup} {:instruction print_float} {:instruction integer_mult} {:instruction float_mult} {:instruction float_pop} {:instruction float_mult} {:instruction float_mult} {:instruction in2} {:instruction float_sub} {:instruction float_sub} {:instruction float_mult} {:instruction integer_dup} {:instruction integer_dup} {:instruction print_float} {:instruction integer_dec} {:instruction integer_shove} {:instruction float_rot} {:instruction integer_mult} {:instruction integer_dup} {:instruction float_add} {:instruction integer_dup} {:instruction float_add} {:instruction integer_dec} {:instruction integer_mult} {:instruction float_mult} {:instruction float_yankdup} {:instruction float_tan} {:instruction float_tan} {:instruction in2} {:instruction in2} {:instruction float_yankdup} {:instruction integer_dec} {:instruction float_rot} {:instruction float_frominteger} {:instruction integer_swap} {:instruction integer_mod} {:instruction integer_dup} {:instruction 80} {:instruction integer_mod} {:instruction integer_dup} {:instruction print_float} {:instruction float_frominteger} {:instruction print_integer} {:instruction integer_sub} {:instruction integer_inc} {:instruction integer_max} {:instruction integer_stackdepth} {:instruction float_shove} {:instruction float_mult} {:instruction integer_max} {:instruction 82.47679184163479} {:instruction integer_max} {:instruction integer_stackdepth} {:instruction float_shove} {:instruction float_mult} {:instruction integer_max} {:instruction float_dup} {:instruction float_inc} {:instruction integer_mult} {:instruction integer_shove} {:instruction print_integer} {:instruction integer_swap})
Best program: (float_yankdup float_cos integer_dup_times float_yankdup integer_dup_items in2 integer_inc float_yank float_mult 28 integer_add float_pop integer_inc in2 float_max integer_mult float_mult float_pop float_mult integer_inc in2 float_inc integer_dup float_mult integer_inc in2 float_max integer_dup print_float integer_mult float_mult float_pop float_mult float_mult in2 float_sub float_sub float_mult integer_dup integer_dup print_float integer_dec integer_shove float_rot integer_mult integer_dup float_add integer_dup float_add integer_dec integer_mult float_mult float_yankdup float_tan float_tan in2 in2 float_yankdup integer_dec float_rot float_frominteger integer_swap integer_mod integer_dup 80 integer_mod integer_dup print_float float_frominteger print_integer integer_sub integer_inc integer_max integer_stackdepth float_shove float_mult integer_max 82.47679184163479 integer_max integer_stackdepth float_shove float_mult integer_max float_dup float_inc integer_mult integer_shove print_integer integer_swap)
Errors: [75.0362 8 34.2119 10 49.8114 9 11.52 6 46.787 8 57.7839 8 13.0202 9 95.8478 11 22.5106 9 15.2344 10 55.2703 10 86.9001 7 33.2111 9 6.0932 11 65.9905 9 56.1804 9 13.6023 8 41.282 10 0.0533 8 97.5666 12 41.6537 8 87.374 12 26.2995 8 22.2569 11 90.7212 8]
Total: 1374.2185000000002
Mean: 27.48437
Genome size: 89
Size: 90
Percent parens: 0.011
--- Population Statistics ---
Average total errors in population: 5465.164537799998
Median total errors in population: 1389.1987000000001
Error averages by case: (249.29613030000107 8.837 321.7549264999982 10.535 176.66585900000197 9.933 146.5596134000002 8.74 172.57216840000032 9.61 185.02667220000097 10.124 310.3573173000027 9.403 217.8531768999977 12.073 154.9072169999999 10.133 205.0999293999974 10.821 182.89381080000135 10.93 263.3025628999996 9.206 96.22718320000001 9.833 140.94708740000115 11.538 192.2812092000025 10.241 232.00860270000226 10.037 204.25003170000002 9.275 225.38467400000278 10.614 193.30259839999982 8.969 271.1293087999989 12.172 226.06408529999783 9.302 262.0521104000026 12.138 214.16221709999834 9.444 154.71194739999896 11.396 211.73309810000043 9.317)
Error minima by case: (18.2374 7 18.1203 8 16.7666 8 8.4959 5 18.8282 8 9.7321 8 1.9701 7 43.7914 8 15.4909 8 14.1748 8 13.2245 8 74.1378 7 31.1396 5 5.0902 9 34.974 8 7.5794 7 12.5364 8 7.74 8 0.0523 6 16.5261 8 10.4054 8 4.3225 8 25.2239 8 1.2482 8 10.2569 8)
Average genome size in population (length): 89.395
Average program size in population (points): 90.395
Average percent parens in population: 0.011
Minimum age in population: 210.92332851459
Maximum age in population: 215.2734220146843
Average age in population: 213.4786265469354
Median age in population: 213.5501546568317
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 6
Genome diversity (% unique Plush genomes):	 0.892
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 6
Syntactic diversity (% unique Push programs):	 0.892
Total error diversity:				 0.416
Error (vector) diversity:			 0.428
Behavioral diversity:				 0.43
--- Run Statistics ---
Number of program evaluations used so far: 154000
Number of point (instruction) evaluations so far: 281016065
--- Timings ---
Current time: 1529615517495 milliseconds
Total Time:         623.4 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       234.9 seconds, 37.7%
Fitness Testing:    309.2 seconds, 49.6%
Report:              79.2 seconds, 12.7%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 153
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 154
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 154
;;******************************
;; -*- Number IO problem report - generation 154
Test total error for best: 64449.02020000003
Test mean error for best: 32.22451
;;------------------------------
Outputs of best individual on training cases:
Correct output: -116.076402553 | Program output: -41.0401600   
Correct output: 24.1400847456  | Program output: -10.07181     
Correct output: 69.833290954   | Program output: 20.0219241    
Correct output: 82.4958592801  | Program output: 94.015857281  
Correct output: 34.2385110874  | Program output: 81.02551287   
Correct output: -10.7358110665 | Program output: 47.048110545  
Correct output: 1.9700532093   | Program output: -11.050100    
Correct output: -44.7956976677 | Program output: 51.052140557  
Correct output: 68.5576547673  | Program output: 46.047103777  
Correct output: -69.2536523379 | Program output: -54.0192809   
Correct output: -14.2275745396 | Program output: 41.04274047   
Correct output: -171.9767905886 | Program output: -85.0767056   
Correct output: -32.1846093265 | Program output: 1.0265        
Correct output: 66.9812146721  | Program output: 73.074405151  
Correct output: 100.0259781081 | Program output: 34.03542841   
Correct output: -90.2595503995 | Program output: -34.0791089   
Correct output: -82.4635707651 | Program output: -96.0659025   
Correct output: -8.7492896214  | Program output: -50.0312401   
Correct output: -82.1329348831 | Program output: -82.0796561   
Correct output: 24.5261129925  | Program output: -73.0405184   
Correct output: -11.4065589042 | Program output: -53.0602704   
Correct output: 10.3282540908  | Program output: -77.045776    
Correct output: -51.7760580299 | Program output: -78.0755929   
Correct output: 51.8185003253  | Program output: 74.075421801  
Correct output: 110.7431489201 | Program output: 20.0219241    
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_dup_items} {:instruction float_mult} {:instruction float_yankdup} {:instruction float_sin} {:instruction float_mult} {:instruction in2} {:instruction integer_inc} {:instruction float_yankdup} {:instruction float_flush} {:instruction float_mult} {:instruction 28} {:instruction integer_add} {:instruction float_pop} {:instruction integer_inc} {:instruction in2} {:instruction float_max} {:instruction print_float} {:instruction integer_mult} {:instruction float_mult} {:instruction float_rot} {:instruction print_float} {:instruction integer_mult} {:instruction float_max} {:instruction tag_float_282} {:instruction integer_max} {:instruction integer_inc} {:instruction in2} {:instruction float_max} {:instruction integer_dup} {:instruction tagged_72} {:instruction integer_mult} {:instruction float_mult} {:instruction float_pop} {:instruction float_sin} {:instruction float_mult} {:instruction in2} {:instruction float_sub} {:instruction float_sub} {:instruction float_mult} {:instruction integer_dup} {:instruction integer_dup} {:instruction tagged_426} {:instruction integer_dec} {:instruction integer_shove} {:instruction float_mult} {:instruction float_min} {:instruction float_mult} {:instruction integer_mult} {:instruction integer_dup} {:instruction float_add} {:instruction integer_dup} {:instruction float_add} {:instruction integer_dec} {:instruction integer_mult} {:instruction float_mult} {:instruction float_yankdup} {:instruction float_tan} {:instruction float_tan} {:instruction in2} {:instruction in2} {:instruction float_yankdup} {:instruction integer_dec} {:instruction float_cos} {:instruction float_frominteger} {:instruction integer_swap} {:instruction integer_mod} {:instruction integer_dup} {:instruction 80} {:instruction integer_mod} {:instruction integer_dup} {:instruction print_float} {:instruction float_frominteger} {:instruction print_integer} {:instruction integer_sub} {:instruction integer_inc} {:instruction integer_max} {:instruction integer_stackdepth} {:instruction integer_max} {:instruction integer_stackdepth} {:instruction float_shove} {:instruction float_mult} {:instruction integer_max} {:instruction float_dup} {:instruction float_inc} {:instruction integer_mult} {:instruction integer_shove} {:instruction print_integer} {:instruction integer_swap})
Best program: (integer_dup_items float_mult float_yankdup float_sin float_mult in2 integer_inc float_yankdup float_flush float_mult 28 integer_add float_pop integer_inc in2 float_max print_float integer_mult float_mult float_rot print_float integer_mult float_max tag_float_282 integer_max integer_inc in2 float_max integer_dup tagged_72 integer_mult float_mult float_pop float_sin float_mult in2 float_sub float_sub float_mult integer_dup integer_dup tagged_426 integer_dec integer_shove float_mult float_min float_mult integer_mult integer_dup float_add integer_dup float_add integer_dec integer_mult float_mult float_yankdup float_tan float_tan in2 in2 float_yankdup integer_dec float_cos float_frominteger integer_swap integer_mod integer_dup 80 integer_mod integer_dup print_float float_frominteger print_integer integer_sub integer_inc integer_max integer_stackdepth integer_max integer_stackdepth float_shove float_mult integer_max float_dup float_inc integer_mult integer_shove print_integer integer_swap)
Errors: [75.0362 8 34.2119 10 49.8114 9 11.52 6 46.787 8 57.7839 8 13.0202 9 95.8478 11 22.5106 9 15.2344 10 55.2703 10 86.9001 7 33.2111 9 6.0932 11 65.9905 9 56.1804 9 13.6023 8 41.282 10 0.0533 8 97.5666 12 41.6537 8 87.374 12 26.2995 8 22.2569 11 90.7212 8]
Total: 1374.2185000000002
Mean: 27.48437
Genome size: 88
Size: 89
Percent parens: 0.011
--- Population Statistics ---
Average total errors in population: 5101.749785399999
Median total errors in population: 1386.7586500000002
Error averages by case: (247.5721289000011 8.808 313.0631628999979 10.555 147.8170596000014 9.767 116.43828610000052 8.566 146.39401539999906 9.398 155.87384449999956 9.931 298.8653881000018 9.401 189.9894993999988 11.953 124.46656109999874 9.974 203.2225534999976 10.791 153.59249010000084 10.814 261.94073979999945 9.226 95.31667459999994 9.835 110.20012700000113 11.364 163.06230560000168 10.085 230.37856750000205 10.051 201.58291889999967 9.279 223.11197460000255 10.611 191.63926849999964 8.895 268.8726567999986 12.172 224.01886149999808 9.234 260.6841814000028 12.135 212.3359273999982 9.422 124.57119509999826 11.228 184.0593971000002 9.185)
Error minima by case: (74.995 7 23.1401 9 10.176 8 2.4873 5 32.2094 8 6.7299 8 0.9701 8 40.7947 9 11.4434 8 15.154 8 10.2253 9 86.8953 7 2.0 4 6.0188 8 20.0217 7 56.1686 8 12.5402 8 4.7439 8 0.0388 6 14.5462 9 7.3982 8 6.3079 9 25.2253 8 22.1815 8 21.0 8)
Average genome size in population (length): 89.324
Average program size in population (points): 90.324
Average percent parens in population: 0.011
Minimum age in population: 212.3417105390672
Maximum age in population: 216.4895731693641
Average age in population: 214.8680322086779
Median age in population: 214.9055997809066
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 9
Genome diversity (% unique Plush genomes):	 0.886
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 9
Syntactic diversity (% unique Push programs):	 0.886
Total error diversity:				 0.38
Error (vector) diversity:			 0.394
Behavioral diversity:				 0.395
--- Run Statistics ---
Number of program evaluations used so far: 155000
Number of point (instruction) evaluations so far: 283249165
--- Timings ---
Current time: 1529615522269 milliseconds
Total Time:         628.1 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       236.6 seconds, 37.7%
Fitness Testing:    311.5 seconds, 49.6%
Report:              79.8 seconds, 12.7%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 154
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 155
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 155
;;******************************
;; -*- Number IO problem report - generation 155
Test total error for best: 64453.020200000035
Test mean error for best: 32.22651
;;------------------------------
Outputs of best individual on training cases:
Correct output: -116.076402553 | Program output: -41.0401600   
Correct output: 24.1400847456  | Program output: -10.07181     
Correct output: 69.833290954   | Program output: 20.0219241    
Correct output: 82.4958592801  | Program output: 94.015857281  
Correct output: 34.2385110874  | Program output: 81.02551287   
Correct output: -10.7358110665 | Program output: 47.048110545  
Correct output: 1.9700532093   | Program output: -11.050100    
Correct output: -44.7956976677 | Program output: 51.052140557  
Correct output: 68.5576547673  | Program output: 46.047103777  
Correct output: -69.2536523379 | Program output: -54.0192809   
Correct output: -14.2275745396 | Program output: 41.04274047   
Correct output: -171.9767905886 | Program output: -85.0767056   
Correct output: -32.1846093265 | Program output: 1.0265        
Correct output: 66.9812146721  | Program output: 73.074405151  
Correct output: 100.0259781081 | Program output: 34.03542841   
Correct output: -90.2595503995 | Program output: -34.0791089   
Correct output: -82.4635707651 | Program output: -96.0659025   
Correct output: -8.7492896214  | Program output: -50.0312401   
Correct output: -82.1329348831 | Program output: -82.0796561   
Correct output: 24.5261129925  | Program output: -73.0405184   
Correct output: -11.4065589042 | Program output: -53.0602704   
Correct output: 10.3282540908  | Program output: -77.045776    
Correct output: -51.7760580299 | Program output: -78.0755929   
Correct output: 51.8185003253  | Program output: 74.075421801  
Correct output: 110.7431489201 | Program output: 20.0219241    
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_yankdup} {:instruction float_cos} {:instruction float_mult} {:instruction float_yankdup} {:instruction tag_float_180} {:instruction integer_shove} {:instruction in2} {:instruction integer_inc} {:instruction float_yankdup} {:instruction float_mod} {:instruction float_mult} {:instruction 28} {:instruction integer_add} {:instruction integer_add} {:instruction integer_mod} {:instruction integer_inc} {:instruction in2} {:instruction float_max} {:instruction float_rot} {:instruction print_float} {:instruction integer_mult} {:instruction float_mult} {:instruction float_pop} {:instruction float_dec} {:instruction integer_inc} {:instruction in2} {:instruction integer_rot} {:instruction integer_dup} {:instruction float_rot} {:instruction integer_mult} {:instruction integer_fromfloat} {:instruction float_pop} {:instruction float_mult} {:instruction float_mult} {:instruction in2} {:instruction float_sub} {:instruction float_sub} {:instruction float_dec} {:instruction integer_dup} {:instruction integer_dup} {:instruction float_add} {:instruction integer_dec} {:instruction integer_shove} {:instruction float_mult} {:instruction float_add} {:instruction float_mult} {:instruction integer_mult} {:instruction integer_dup} {:instruction float_add} {:instruction integer_dup} {:instruction float_add} {:instruction integer_dec} {:instruction integer_mult} {:instruction float_mult} {:instruction -38.1345207837881} {:instruction float_tan} {:instruction in2} {:instruction float_max} {:instruction float_pop} {:instruction tagged_580} {:instruction float_mod} {:instruction in2} {:instruction float_yankdup} {:instruction integer_dup} {:instruction integer_pop} {:instruction integer_dec} {:instruction float_max} {:instruction float_frominteger} {:instruction integer_swap} {:instruction integer_mod} {:instruction integer_dup} {:instruction 80} {:instruction integer_mod} {:instruction integer_dup} {:instruction print_float} {:instruction float_frominteger} {:instruction print_integer} {:instruction integer_sub} {:instruction integer_inc} {:instruction integer_max} {:instruction integer_stackdepth} {:instruction float_shove} {:instruction float_mult} {:instruction integer_max} {:instruction float_dup} {:instruction float_inc} {:instruction integer_mult} {:instruction integer_shove} {:instruction print_integer} {:instruction integer_max} {:instruction integer_mult} {:instruction integer_shove} {:instruction print_integer} {:instruction 53})
Best program: (float_yankdup float_cos float_mult float_yankdup tag_float_180 integer_shove in2 integer_inc float_yankdup float_mod float_mult 28 integer_add integer_add integer_mod integer_inc in2 float_max float_rot print_float integer_mult float_mult float_pop float_dec integer_inc in2 integer_rot integer_dup float_rot integer_mult integer_fromfloat float_pop float_mult float_mult in2 float_sub float_sub float_dec integer_dup integer_dup float_add integer_dec integer_shove float_mult float_add float_mult integer_mult integer_dup float_add integer_dup float_add integer_dec integer_mult float_mult -38.1345207837881 float_tan in2 float_max float_pop tagged_580 float_mod in2 float_yankdup integer_dup integer_pop integer_dec float_max float_frominteger integer_swap integer_mod integer_dup 80 integer_mod integer_dup print_float float_frominteger print_integer integer_sub integer_inc integer_max integer_stackdepth float_shove float_mult integer_max float_dup float_inc integer_mult integer_shove print_integer integer_max integer_mult integer_shove print_integer 53)
Errors: [75.0362 8 34.2119 10 49.8114 9 11.52 6 46.787 8 57.7839 8 13.0202 9 95.8478 11 22.5106 9 15.2344 10 55.2703 10 86.9001 7 33.2111 9 6.0932 11 65.9905 9 56.1804 9 13.6023 8 41.282 10 0.0533 8 97.5666 12 41.6537 8 87.374 12 26.2995 8 22.2569 11 90.7212 8]
Total: 1374.2185000000002
Mean: 27.48437
Genome size: 94
Size: 95
Percent parens: 0.011
--- Population Statistics ---
Average total errors in population: 4918.924982999999
Median total errors in population: 1388.2155
Error averages by case: (232.54341900000077 8.866 292.87296669999796 10.564 148.7113635000015 9.846 124.1092871000005 8.568 147.39135239999905 9.451 163.0062943999997 9.946 279.1609439000003 9.409 196.61879639999887 11.913 132.30546739999897 10.044 184.8949508999986 10.842 160.72692970000097 10.788 243.6701478999994 9.158 90.66458780000008 9.847 118.74365390000106 11.392 170.10199220000132 10.046 215.86509260000165 10.06 182.9658491999995 9.304 205.92734760000243 10.666 171.96808269999957 8.998 249.05473029999888 12.18 205.4802657999985 9.293 239.69798050000176 12.162 191.78371219999846 9.485 132.77375839999837 11.239 184.5860105000001 9.233)
Error minima by case: (35.0362 7 9.0 5 10.1667 7 1.52 5 11.1834 7 9.7321 8 2.9701 5 5.8298 8 9.4605 8 14.1627 7 13.2221 8 2.9001 7 0.7545 4 0.0531 9 15.9905 8 23.1804 7 12.5364 8 7.6964 8 0.053 6 11.5247 7 7.3992 8 2.6737 7 1.1506 8 14.2138 8 21.0 8)
Average genome size in population (length): 89.012
Average program size in population (points): 90.012
Average percent parens in population: 0.011
Minimum age in population: 213.78853952661
Maximum age in population: 218.1492108880524
Average age in population: 216.2524339917335
Median age in population: 216.267987507551
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 7
Genome diversity (% unique Plush genomes):	 0.885
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 7
Syntactic diversity (% unique Push programs):	 0.885
Total error diversity:				 0.39
Error (vector) diversity:			 0.403
Behavioral diversity:				 0.405
--- Run Statistics ---
Number of program evaluations used so far: 156000
Number of point (instruction) evaluations so far: 285474540
--- Timings ---
Current time: 1529615527277 milliseconds
Total Time:         633.1 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       238.1 seconds, 37.6%
Fitness Testing:    314.3 seconds, 49.6%
Report:              80.5 seconds, 12.7%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 155
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 156
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 156
;;******************************
;; -*- Number IO problem report - generation 156
Test total error for best: 59649.734300000026
Test mean error for best: 29.82487
;;------------------------------
Outputs of best individual on training cases:
Correct output: -116.076402553 | Program output: -41.0401600   
Correct output: 24.1400847456  | Program output: -10.07181     
Correct output: 69.833290954   | Program output: 20.0219241    
Correct output: 82.4958592801  | Program output: 94.015857281  
Correct output: 34.2385110874  | Program output: 81.02551287   
Correct output: -10.7358110665 | Program output: 47.048110545  
Correct output: 1.9700532093   | Program output: -11.050100    
Correct output: -44.7956976677 | Program output: 51.052140557  
Correct output: 68.5576547673  | Program output: 46.047103777  
Correct output: -69.2536523379 | Program output: -54.0192809   
Correct output: -14.2275745396 | Program output: 41.04274047   
Correct output: -171.9767905886 | Program output: -85.0767056   
Correct output: -32.1846093265 | Program output: 1.0265        
Correct output: 66.9812146721  | Program output: 73.074405151  
Correct output: 100.0259781081 | Program output: 34.03542841   
Correct output: -90.2595503995 | Program output: -34.0791089   
Correct output: -82.4635707651 | Program output: -96.0659025   
Correct output: -8.7492896214  | Program output: -50.0312401   
Correct output: -82.1329348831 | Program output: -82.0796561   
Correct output: 24.5261129925  | Program output: -73.0405184   
Correct output: -11.4065589042 | Program output: -53.0602704   
Correct output: 10.3282540908  | Program output: -77.045776    
Correct output: -51.7760580299 | Program output: -78.0755929   
Correct output: 51.8185003253  | Program output: 74.075421801  
Correct output: 110.7431489201 | Program output: 20.0219241    
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_dup_items} {:instruction float_mult} {:instruction float_yankdup} {:instruction float_pop} {:instruction float_mult} {:instruction float_dup_times} {:instruction float_shove} {:instruction float_pop} {:instruction float_mult} {:instruction in2} {:instruction integer_inc} {:instruction float_yank} {:instruction float_mult} {:instruction 28} {:instruction integer_add} {:instruction float_yank} {:instruction integer_inc} {:instruction in2} {:instruction float_max} {:instruction integer_mult} {:instruction float_mult} {:instruction float_add} {:instruction float_mult} {:instruction integer_inc} {:instruction in2} {:instruction float_inc} {:instruction integer_dup} {:instruction float_swap} {:instruction integer_mult} {:instruction in2} {:instruction float_sub} {:instruction float_sub} {:instruction float_mult} {:instruction integer_dup} {:instruction integer_dup} {:instruction float_add} {:instruction integer_dec} {:instruction integer_shove} {:instruction float_tan} {:instruction float_mult} {:instruction integer_mult} {:instruction integer_dup} {:instruction float_add} {:instruction integer_dup} {:instruction float_add} {:instruction integer_dec} {:instruction integer_mult} {:instruction float_tan} {:instruction in2} {:instruction in2} {:instruction float_yankdup} {:instruction integer_dec} {:instruction float_cos} {:instruction float_frominteger} {:instruction integer_swap} {:instruction integer_mod} {:instruction integer_dup} {:instruction 80} {:instruction integer_mod} {:instruction integer_dup} {:instruction print_float} {:instruction float_frominteger} {:instruction print_integer} {:instruction integer_sub} {:instruction integer_inc} {:instruction integer_max} {:instruction integer_stackdepth} {:instruction integer_inc} {:instruction integer_max} {:instruction integer_stackdepth} {:instruction float_shove} {:instruction float_mult} {:instruction integer_max} {:instruction float_dup} {:instruction float_inc} {:instruction integer_max} {:instruction float_dup} {:instruction float_inc} {:instruction integer_shove} {:instruction print_integer} {:instruction tag_integer_509})
Best program: (integer_dup_items float_mult float_yankdup float_pop float_mult float_dup_times float_shove float_pop float_mult in2 integer_inc float_yank float_mult 28 integer_add float_yank integer_inc in2 float_max integer_mult float_mult float_add float_mult integer_inc in2 float_inc integer_dup float_swap integer_mult in2 float_sub float_sub float_mult integer_dup integer_dup float_add integer_dec integer_shove float_tan float_mult integer_mult integer_dup float_add integer_dup float_add integer_dec integer_mult float_tan in2 in2 float_yankdup integer_dec float_cos float_frominteger integer_swap integer_mod integer_dup 80 integer_mod integer_dup print_float float_frominteger print_integer integer_sub integer_inc integer_max integer_stackdepth integer_inc integer_max integer_stackdepth float_shove float_mult integer_max float_dup float_inc integer_max float_dup float_inc integer_shove print_integer tag_integer_509)
Errors: [75.0362 8 34.2119 10 49.8114 9 11.52 6 46.787 8 57.7839 8 13.0202 9 95.8478 11 22.5106 9 15.2344 10 55.2703 10 86.9001 7 33.2111 9 6.0932 11 65.9905 9 56.1804 9 13.6023 8 41.282 10 0.0533 8 97.5666 12 41.6537 8 87.374 12 26.2995 8 22.2569 11 90.7212 8]
Total: 1374.2185000000002
Mean: 27.48437
Genome size: 81
Size: 82
Percent parens: 0.012
--- Population Statistics ---
Average total errors in population: 5378.746802899999
Median total errors in population: 1389.7097
Error averages by case: (253.31492200000108 8.823 300.84751829999806 10.492 167.70418580000143 9.81 137.05320420000027 8.603 165.17518980000023 9.419 176.82649960000074 9.986 287.5484216000012 9.328 209.0585570999982 11.904 145.38563139999965 10.061 211.1836903999976 10.808 174.6286410000006 10.77 268.2708131999999 9.12 98.10519100000006 9.84 131.64139220000112 11.335 182.94856890000221 10.092 237.26718450000214 9.966 209.3005578999998 9.267 229.65508880000246 10.59 198.6706976999998 8.951 275.5251547999993 12.1 231.49476439999833 9.255 266.4179359000026 12.1 219.81759129999847 9.409 145.55418799999902 11.212 202.8712131000003 9.239)
Error minima by case: (35.0362 7 13.0684 9 10.1667 8 2.4948 5 13.2385 8 9.7435 8 0.5272 7 3.6762 9 9.4605 8 14.2372 8 13.2402 9 2.9001 6 2.0 5 0.0531 8 14.7236 7 23.1804 7 11.602 8 7.7483 8 0.0527 6 13.4434 8 10.4056 7 0.7151 8 10.6566 8 14.2138 8 21.0 8)
Average genome size in population (length): 89.305
Average program size in population (points): 90.305
Average percent parens in population: 0.011
Minimum age in population: 215.2699293490105
Maximum age in population: 219.5766624165792
Average age in population: 217.6444296914062
Median age in population: 217.6988197677926
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 10
Genome diversity (% unique Plush genomes):	 0.882
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 10
Syntactic diversity (% unique Push programs):	 0.882
Total error diversity:				 0.417
Error (vector) diversity:			 0.433
Behavioral diversity:				 0.434
--- Run Statistics ---
Number of program evaluations used so far: 157000
Number of point (instruction) evaluations so far: 287707190
--- Timings ---
Current time: 1529615531589 milliseconds
Total Time:         637.6 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       239.7 seconds, 37.6%
Fitness Testing:    316.5 seconds, 49.6%
Report:              81.3 seconds, 12.7%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 156
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 157
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 157
;;******************************
;; -*- Number IO problem report - generation 157
Test total error for best: 64453.020200000035
Test mean error for best: 32.22651
;;------------------------------
Outputs of best individual on training cases:
Correct output: -116.076402553 | Program output: -41.0401600   
Correct output: 24.1400847456  | Program output: -10.07181     
Correct output: 69.833290954   | Program output: 20.0219241    
Correct output: 82.4958592801  | Program output: 94.015857281  
Correct output: 34.2385110874  | Program output: 81.02551287   
Correct output: -10.7358110665 | Program output: 47.048110545  
Correct output: 1.9700532093   | Program output: -11.050100    
Correct output: -44.7956976677 | Program output: 51.052140557  
Correct output: 68.5576547673  | Program output: 46.047103777  
Correct output: -69.2536523379 | Program output: -54.0192809   
Correct output: -14.2275745396 | Program output: 41.04274047   
Correct output: -171.9767905886 | Program output: -85.0767056   
Correct output: -32.1846093265 | Program output: 1.0265        
Correct output: 66.9812146721  | Program output: 73.074405151  
Correct output: 100.0259781081 | Program output: 34.03542841   
Correct output: -90.2595503995 | Program output: -34.0791089   
Correct output: -82.4635707651 | Program output: -96.0659025   
Correct output: -8.7492896214  | Program output: -50.0312401   
Correct output: -82.1329348831 | Program output: -82.0796561   
Correct output: 24.5261129925  | Program output: -73.0405184   
Correct output: -11.4065589042 | Program output: -53.0602704   
Correct output: 10.3282540908  | Program output: -77.045776    
Correct output: -51.7760580299 | Program output: -78.0755929   
Correct output: 51.8185003253  | Program output: 74.075421801  
Correct output: 110.7431489201 | Program output: 20.0219241    
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_yankdup} {:instruction float_mod} {:instruction float_pop} {:instruction print_integer} {:instruction in2} {:instruction integer_inc} {:instruction float_yankdup} {:instruction float_yank} {:instruction float_mult} {:instruction 28} {:instruction integer_add} {:instruction float_shove} {:instruction integer_inc} {:instruction in2} {:instruction float_max} {:instruction integer_mult} {:instruction print_float} {:instruction print_float} {:instruction integer_mult} {:instruction float_min} {:instruction float_pop} {:instruction float_mult} {:instruction print_float} {:instruction integer_mult} {:instruction float_mult} {:instruction float_pop} {:instruction float_mult} {:instruction integer_inc} {:instruction in2} {:instruction float_max} {:instruction integer_dup} {:instruction float_mod} {:instruction integer_mult} {:instruction float_mult} {:instruction float_pop} {:instruction float_min} {:instruction float_mult} {:instruction in2} {:instruction float_sub} {:instruction float_sub} {:instruction float_mult} {:instruction integer_dup} {:instruction integer_dup} {:instruction float_add} {:instruction integer_dec} {:instruction integer_shove} {:instruction float_mult} {:instruction float_add} {:instruction float_mod} {:instruction integer_mult} {:instruction integer_dup} {:instruction float_dup} {:instruction integer_dup} {:instruction float_add} {:instruction integer_dec} {:instruction integer_mult} {:instruction float_mult} {:instruction float_yankdup} {:instruction float_tan} {:instruction float_tan} {:instruction in2} {:instruction float_max} {:instruction in2} {:instruction integer_dup} {:instruction integer_pop} {:instruction integer_dec} {:instruction float_cos} {:instruction float_frominteger} {:instruction integer_swap} {:instruction integer_mod} {:instruction integer_dup} {:instruction 80} {:instruction integer_mod} {:instruction integer_dup} {:instruction print_float} {:instruction print_float} {:instruction float_frominteger} {:instruction print_integer} {:instruction integer_sub} {:instruction integer_inc} {:instruction integer_max} {:instruction -86} {:instruction float_shove} {:instruction float_mult} {:instruction integer_max} {:instruction float_dup} {:instruction float_sub} {:instruction integer_mult} {:instruction integer_shove} {:instruction print_integer} {:instruction float_max} {:instruction print_integer} {:instruction integer_swap})
Best program: (float_yankdup float_mod float_pop print_integer in2 integer_inc float_yankdup float_yank float_mult 28 integer_add float_shove integer_inc in2 float_max integer_mult print_float print_float integer_mult float_min float_pop float_mult print_float integer_mult float_mult float_pop float_mult integer_inc in2 float_max integer_dup float_mod integer_mult float_mult float_pop float_min float_mult in2 float_sub float_sub float_mult integer_dup integer_dup float_add integer_dec integer_shove float_mult float_add float_mod integer_mult integer_dup float_dup integer_dup float_add integer_dec integer_mult float_mult float_yankdup float_tan float_tan in2 float_max in2 integer_dup integer_pop integer_dec float_cos float_frominteger integer_swap integer_mod integer_dup 80 integer_mod integer_dup print_float print_float float_frominteger print_integer integer_sub integer_inc integer_max -86 float_shove float_mult integer_max float_dup float_sub integer_mult integer_shove print_integer float_max print_integer integer_swap)
Errors: [75.0362 8 34.2119 10 49.8114 9 11.52 6 46.787 8 57.7839 8 13.0202 9 95.8478 11 22.5106 9 15.2344 10 55.2703 10 86.9001 7 33.2111 9 6.0932 11 65.9905 9 56.1804 9 13.6023 8 41.282 10 0.0533 8 97.5666 12 41.6537 8 87.374 12 26.2995 8 22.2569 11 90.7212 8]
Total: 1374.2185000000002
Mean: 27.48437
Genome size: 93
Size: 94
Percent parens: 0.011
--- Population Statistics ---
Average total errors in population: 5637.7155397999995
Median total errors in population: 1393.72865
Error averages by case: (271.0784012000003 8.93 319.0187128999979 10.575 169.5824997000013 9.857 140.65680640000008 8.783 166.15192619999954 9.566 178.60502669999997 10.11 305.85776500000134 9.455 210.83255219999876 12.016 147.31595809999962 10.07 229.5634769999978 10.871 176.25734270000095 10.893 284.55799050000076 9.351 104.38360569999995 9.837 134.51597200000103 11.463 185.75854780000168 10.183 254.63932480000219 10.137 226.95214280000005 9.435 247.79900950000226 10.694 216.5336748999998 9.036 291.02883359999987 12.164 248.9973085999984 9.397 282.81691020000244 12.132 237.0791024999985 9.61 147.42627459999895 11.286 205.13337420000036 9.322)
Error minima by case: (40.0 7 9.0 6 10.1667 7 2.4959 6 32.211 8 9.6874 7 0.0299 5 43.7433 7 11.4423 7 14.1737 8 13.1853 7 84.0 7 2.0 5 5.0262 9 20.026 7 33.0 8 11.5364 8 7.7164 8 0.0527 6 14.5462 9 10.3944 8 4.3283 9 24.2239 7 21.189 8 21.0 7)
Average genome size in population (length): 89.523
Average program size in population (points): 90.523
Average percent parens in population: 0.011
Minimum age in population: 216.7912322339829
Maximum age in population: 220.9986092989519
Average age in population: 218.9500730961474
Median age in population: 218.9492358357521
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 6
Genome diversity (% unique Plush genomes):	 0.883
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 6
Syntactic diversity (% unique Push programs):	 0.883
Total error diversity:				 0.425
Error (vector) diversity:			 0.44
Behavioral diversity:				 0.44
--- Run Statistics ---
Number of program evaluations used so far: 158000
Number of point (instruction) evaluations so far: 289945265
--- Timings ---
Current time: 1529615536509 milliseconds
Total Time:         642.3 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       241.1 seconds, 37.5%
Fitness Testing:    319.3 seconds, 49.7%
Report:              81.8 seconds, 12.7%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 157
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 158
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 158
;;******************************
;; -*- Number IO problem report - generation 158
Test total error for best: 59652.743300000046
Test mean error for best: 29.82637
;;------------------------------
Outputs of best individual on training cases:
Correct output: -116.076402553 | Program output: -41.0401600   
Correct output: 24.1400847456  | Program output: -10.07181     
Correct output: 69.833290954   | Program output: 20.0219241    
Correct output: 82.4958592801  | Program output: 94.015857281  
Correct output: 34.2385110874  | Program output: 81.02551287   
Correct output: -10.7358110665 | Program output: 47.048110545  
Correct output: 1.9700532093   | Program output: -11.050100    
Correct output: -44.7956976677 | Program output: 51.052140557  
Correct output: 68.5576547673  | Program output: 46.047103777  
Correct output: -69.2536523379 | Program output: -54.0192809   
Correct output: -14.2275745396 | Program output: 41.04274047   
Correct output: -171.9767905886 | Program output: -85.0767056   
Correct output: -32.1846093265 | Program output: 1.0265        
Correct output: 66.9812146721  | Program output: 73.074405151  
Correct output: 100.0259781081 | Program output: 34.03542841   
Correct output: -90.2595503995 | Program output: -34.0791089   
Correct output: -82.4635707651 | Program output: -96.0659025   
Correct output: -8.7492896214  | Program output: -50.0312401   
Correct output: -82.1329348831 | Program output: -82.0796561   
Correct output: 24.5261129925  | Program output: -73.0405184   
Correct output: -11.4065589042 | Program output: -53.0602704   
Correct output: 10.3282540908  | Program output: -77.045776    
Correct output: -51.7760580299 | Program output: -78.0755929   
Correct output: 51.8185003253  | Program output: 74.075421801  
Correct output: 110.7431489201 | Program output: 20.0219241    
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_yankdup} {:instruction float_cos} {:instruction tag_float_383} {:instruction print_float} {:instruction float_dup_times} {:instruction integer_dup_times} {:instruction float_mult} {:instruction float_dup_times} {:instruction float_shove} {:instruction float_pop} {:instruction float_min} {:instruction in2} {:instruction integer_inc} {:instruction float_yank} {:instruction integer_swap} {:instruction 28} {:instruction integer_add} {:instruction float_pop} {:instruction integer_inc} {:instruction in2} {:instruction float_max} {:instruction integer_mult} {:instruction float_swap} {:instruction integer_inc} {:instruction in2} {:instruction float_max} {:instruction integer_dup} {:instruction print_float} {:instruction integer_mult} {:instruction float_mult} {:instruction float_pop} {:instruction float_mult} {:instruction float_cos} {:instruction in2} {:instruction float_sub} {:instruction float_sub} {:instruction float_mult} {:instruction integer_dup} {:instruction integer_dup} {:instruction float_add} {:instruction integer_dec} {:instruction integer_shove} {:instruction float_mult} {:instruction float_rot} {:instruction integer_mult} {:instruction integer_dup} {:instruction float_add} {:instruction integer_dup} {:instruction float_add} {:instruction integer_dec} {:instruction integer_mult} {:instruction float_mult} {:instruction float_yankdup} {:instruction float_tan} {:instruction in2} {:instruction in2} {:instruction float_yankdup} {:instruction integer_dup} {:instruction integer_pop} {:instruction integer_dec} {:instruction float_cos} {:instruction float_frominteger} {:instruction integer_swap} {:instruction integer_mod} {:instruction integer_dup} {:instruction 80} {:instruction integer_mod} {:instruction integer_dup} {:instruction print_float} {:instruction float_frominteger} {:instruction print_integer} {:instruction integer_sub} {:instruction integer_inc} {:instruction integer_max} {:instruction integer_stackdepth} {:instruction float_shove} {:instruction float_mult} {:instruction integer_max} {:instruction float_mult} {:instruction integer_max} {:instruction float_dup} {:instruction integer_yank} {:instruction integer_mult} {:instruction integer_shove} {:instruction print_integer} {:instruction integer_rot})
Best program: (float_yankdup float_cos tag_float_383 print_float float_dup_times integer_dup_times float_mult float_dup_times float_shove float_pop float_min in2 integer_inc float_yank integer_swap 28 integer_add float_pop integer_inc in2 float_max integer_mult float_swap integer_inc in2 float_max integer_dup print_float integer_mult float_mult float_pop float_mult float_cos in2 float_sub float_sub float_mult integer_dup integer_dup float_add integer_dec integer_shove float_mult float_rot integer_mult integer_dup float_add integer_dup float_add integer_dec integer_mult float_mult float_yankdup float_tan in2 in2 float_yankdup integer_dup integer_pop integer_dec float_cos float_frominteger integer_swap integer_mod integer_dup 80 integer_mod integer_dup print_float float_frominteger print_integer integer_sub integer_inc integer_max integer_stackdepth float_shove float_mult integer_max float_mult integer_max float_dup integer_yank integer_mult integer_shove print_integer integer_rot)
Errors: [75.0362 8 34.2119 10 49.8114 9 11.52 6 46.787 8 57.7839 8 13.0202 9 95.8478 11 22.5106 9 15.2344 10 55.2703 10 86.9001 7 33.2111 9 6.0932 11 65.9905 9 56.1804 9 13.6023 8 41.282 10 0.0533 8 97.5666 12 41.6537 8 87.374 12 26.2995 8 22.2569 11 90.7212 8]
Total: 1374.2185000000002
Mean: 27.48437
Genome size: 86
Size: 87
Percent parens: 0.011
--- Population Statistics ---
Average total errors in population: 5399.750899099999
Median total errors in population: 1391.2105500000002
Error averages by case: (258.65836300000103 8.874 293.0549556999981 10.506 167.93001660000135 9.76 138.10351820000045 8.555 165.49365030000007 9.388 175.40169460000044 9.934 278.9266631000002 9.385 210.45671009999853 11.871 145.95108439999956 10.004 214.72727179999765 10.806 173.24178220000127 10.749 271.6820906 9.245 91.26057450000005 9.883 131.9500483000011 11.285 183.7015135000023 10.094 241.06932860000205 10.045 214.3033778999999 9.353 233.5675016000026 10.608 202.47076749999962 9.027 277.75299079999945 12.1 234.85309719999853 9.301 270.40268230000277 12.087 223.7132805999985 9.476 144.8651769999986 11.153 203.52075870000053 9.203)
Error minima by case: (35.0748 5 1.8923 5 3.6091 6 9.0534 5 11.9908 7 9.6877 6 0.0299 4 43.7436 6 4.4776 6 14.1813 5 13.1848 6 2.9697 5 2.0 4 2.9011 9 26.5836 7 23.2585 5 12.5364 7 7.718 8 0.0523 5 2.2784 5 10.3463 7 6.2825 4 25.2239 7 12.2616 8 21.0 7)
Average genome size in population (length): 89.272
Average program size in population (points): 90.272
Average percent parens in population: 0.011
Minimum age in population: 217.8585687322561
Maximum age in population: 222.2466813493918
Average age in population: 220.3612489900508
Median age in population: 220.4277733701649
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 5
Genome diversity (% unique Plush genomes):	 0.892
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 5
Syntactic diversity (% unique Push programs):	 0.892
Total error diversity:				 0.422
Error (vector) diversity:			 0.428
Behavioral diversity:				 0.428
--- Run Statistics ---
Number of program evaluations used so far: 159000
Number of point (instruction) evaluations so far: 292177090
--- Timings ---
Current time: 1529615540887 milliseconds
Total Time:         646.9 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       242.6 seconds, 37.5%
Fitness Testing:    321.6 seconds, 49.7%
Report:              82.5 seconds, 12.8%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 158
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 159
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 159
;;******************************
;; -*- Number IO problem report - generation 159
Test total error for best: 59649.734300000026
Test mean error for best: 29.82487
;;------------------------------
Outputs of best individual on training cases:
Correct output: -116.076402553 | Program output: -41.0401600   
Correct output: 24.1400847456  | Program output: -10.07181     
Correct output: 69.833290954   | Program output: 20.0219241    
Correct output: 82.4958592801  | Program output: 94.015857281  
Correct output: 34.2385110874  | Program output: 81.02551287   
Correct output: -10.7358110665 | Program output: 47.048110545  
Correct output: 1.9700532093   | Program output: -11.050100    
Correct output: -44.7956976677 | Program output: 51.052140557  
Correct output: 68.5576547673  | Program output: 46.047103777  
Correct output: -69.2536523379 | Program output: -54.0192809   
Correct output: -14.2275745396 | Program output: 41.04274047   
Correct output: -171.9767905886 | Program output: -85.0767056   
Correct output: -32.1846093265 | Program output: 1.0265        
Correct output: 66.9812146721  | Program output: 73.074405151  
Correct output: 100.0259781081 | Program output: 34.03542841   
Correct output: -90.2595503995 | Program output: -34.0791089   
Correct output: -82.4635707651 | Program output: -96.0659025   
Correct output: -8.7492896214  | Program output: -50.0312401   
Correct output: -82.1329348831 | Program output: -82.0796561   
Correct output: 24.5261129925  | Program output: -73.0405184   
Correct output: -11.4065589042 | Program output: -53.0602704   
Correct output: 10.3282540908  | Program output: -77.045776    
Correct output: -51.7760580299 | Program output: -78.0755929   
Correct output: 51.8185003253  | Program output: 74.075421801  
Correct output: 110.7431489201 | Program output: 20.0219241    
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_add} {:instruction float_cos} {:instruction integer_dup_times} {:instruction float_yankdup} {:instruction float_shove} {:instruction float_pop} {:instruction float_mult} {:instruction in2} {:instruction integer_inc} {:instruction float_yank} {:instruction float_mult} {:instruction 28} {:instruction integer_add} {:instruction float_tan} {:instruction integer_inc} {:instruction in2} {:instruction float_max} {:instruction integer_mult} {:instruction float_mult} {:instruction float_pop} {:instruction float_mult} {:instruction integer_inc} {:instruction in2} {:instruction float_max} {:instruction integer_dup} {:instruction float_yank} {:instruction print_float} {:instruction integer_mult} {:instruction float_mult} {:instruction float_pop} {:instruction float_mult} {:instruction float_cos} {:instruction in2} {:instruction float_sub} {:instruction float_sub} {:instruction float_mult} {:instruction integer_dup} {:instruction integer_dup} {:instruction integer_shove} {:instruction float_mult} {:instruction float_add} {:instruction float_mult} {:instruction integer_mult} {:instruction integer_dup} {:instruction float_add} {:instruction integer_dup} {:instruction float_add} {:instruction integer_dec} {:instruction integer_mult} {:instruction float_mult} {:instruction float_tan} {:instruction in2} {:instruction float_max} {:instruction float_pop} {:instruction float_mod} {:instruction integer_dup} {:instruction float_yankdup} {:instruction integer_dup} {:instruction integer_pop} {:instruction integer_dec} {:instruction float_cos} {:instruction float_frominteger} {:instruction integer_swap} {:instruction integer_mod} {:instruction integer_dup} {:instruction 80} {:instruction integer_mod} {:instruction integer_dup} {:instruction print_float} {:instruction float_frominteger} {:instruction print_integer} {:instruction integer_sub} {:instruction integer_inc} {:instruction integer_max} {:instruction integer_stackdepth} {:instruction integer_inc} {:instruction integer_max} {:instruction integer_stackdepth} {:instruction float_shove} {:instruction float_mult} {:instruction integer_max} {:instruction float_dup} {:instruction float_inc} {:instruction integer_max} {:instruction float_dup} {:instruction float_inc} {:instruction integer_shove} {:instruction print_integer} {:instruction tag_integer_509})
Best program: (integer_add float_cos integer_dup_times float_yankdup float_shove float_pop float_mult in2 integer_inc float_yank float_mult 28 integer_add float_tan integer_inc in2 float_max integer_mult float_mult float_pop float_mult integer_inc in2 float_max integer_dup float_yank print_float integer_mult float_mult float_pop float_mult float_cos in2 float_sub float_sub float_mult integer_dup integer_dup integer_shove float_mult float_add float_mult integer_mult integer_dup float_add integer_dup float_add integer_dec integer_mult float_mult float_tan in2 float_max float_pop float_mod integer_dup float_yankdup integer_dup integer_pop integer_dec float_cos float_frominteger integer_swap integer_mod integer_dup 80 integer_mod integer_dup print_float float_frominteger print_integer integer_sub integer_inc integer_max integer_stackdepth integer_inc integer_max integer_stackdepth float_shove float_mult integer_max float_dup float_inc integer_max float_dup float_inc integer_shove print_integer tag_integer_509)
Errors: [75.0362 8 34.2119 10 49.8114 9 11.52 6 46.787 8 57.7839 8 13.0202 9 95.8478 11 22.5106 9 15.2344 10 55.2703 10 86.9001 7 33.2111 9 6.0932 11 65.9905 9 56.1804 9 13.6023 8 41.282 10 0.0533 8 97.5666 12 41.6537 8 87.374 12 26.2995 8 22.2569 11 90.7212 8]
Total: 1374.2185000000002
Mean: 27.48437
Genome size: 89
Size: 90
Percent parens: 0.011
--- Population Statistics ---
Average total errors in population: 4944.138470099999
Median total errors in population: 1382.2581500000001
Error averages by case: (236.290387000001 8.79 273.3931053999983 10.504 153.55110210000134 9.733 122.6284716000008 8.364 152.43417859999965 9.284 163.13553190000053 9.812 260.81445439999925 9.385 196.8946855999983 11.831 132.30556329999902 9.919 189.64998469999856 10.729 160.59906800000084 10.674 248.24044959999932 9.054 88.70713270000013 9.863 118.26512350000097 11.253 170.50376510000206 9.988 221.4125992000019 9.976 187.4721655999998 9.228 210.03880520000237 10.536 176.56845759999973 8.9 254.46864509999864 12.091 210.55307269999852 9.198 246.15638310000242 12.056 197.28168039999852 9.365 132.38402819999826 11.143 189.57762950000043 9.136)
Error minima by case: (74.99 7 13.1401 8 10.176 8 2.4873 6 12.8059 8 9.6874 8 0.9701 7 6.6612 8 7.4898 8 15.1574 8 13.1853 8 86.8977 6 5.9499 5 6.0188 8 20.0217 7 52.125 7 12.5364 7 7.718 8 0.0511 6 14.5224 8 10.3463 7 6.2825 8 13.6415 7 21.2259 8 30.7339 8)
Average genome size in population (length): 89.218
Average program size in population (points): 90.218
Average percent parens in population: 0.011
Minimum age in population: 218.947948103353
Maximum age in population: 223.504354147002
Average age in population: 221.7242497420137
Median age in population: 221.7534146426922
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 6
Genome diversity (% unique Plush genomes):	 0.878
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 6
Syntactic diversity (% unique Push programs):	 0.878
Total error diversity:				 0.412
Error (vector) diversity:			 0.423
Behavioral diversity:				 0.424
--- Run Statistics ---
Number of program evaluations used so far: 160000
Number of point (instruction) evaluations so far: 294407540
--- Timings ---
Current time: 1529615545558 milliseconds
Total Time:         651.4 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       244.2 seconds, 37.5%
Fitness Testing:    324.0 seconds, 49.7%
Report:              83.1 seconds, 12.8%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 159
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 160
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 160
;;******************************
;; -*- Number IO problem report - generation 160
Test total error for best: 64453.020200000035
Test mean error for best: 32.22651
;;------------------------------
Outputs of best individual on training cases:
Correct output: -116.076402553 | Program output: -41.0401600   
Correct output: 24.1400847456  | Program output: -10.07181     
Correct output: 69.833290954   | Program output: 20.0219241    
Correct output: 82.4958592801  | Program output: 94.015857281  
Correct output: 34.2385110874  | Program output: 81.02551287   
Correct output: -10.7358110665 | Program output: 47.048110545  
Correct output: 1.9700532093   | Program output: -11.050100    
Correct output: -44.7956976677 | Program output: 51.052140557  
Correct output: 68.5576547673  | Program output: 46.047103777  
Correct output: -69.2536523379 | Program output: -54.0192809   
Correct output: -14.2275745396 | Program output: 41.04274047   
Correct output: -171.9767905886 | Program output: -85.0767056   
Correct output: -32.1846093265 | Program output: 1.0265        
Correct output: 66.9812146721  | Program output: 73.074405151  
Correct output: 100.0259781081 | Program output: 34.03542841   
Correct output: -90.2595503995 | Program output: -34.0791089   
Correct output: -82.4635707651 | Program output: -96.0659025   
Correct output: -8.7492896214  | Program output: -50.0312401   
Correct output: -82.1329348831 | Program output: -82.0796561   
Correct output: 24.5261129925  | Program output: -73.0405184   
Correct output: -11.4065589042 | Program output: -53.0602704   
Correct output: 10.3282540908  | Program output: -77.045776    
Correct output: -51.7760580299 | Program output: -78.0755929   
Correct output: 51.8185003253  | Program output: 74.075421801  
Correct output: 110.7431489201 | Program output: 20.0219241    
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_dup_items} {:instruction float_mult} {:instruction float_yankdup} {:instruction float_pop} {:instruction float_mult} {:instruction float_dup_times} {:instruction float_shove} {:instruction float_pop} {:instruction float_mult} {:instruction in2} {:instruction integer_inc} {:instruction float_yank} {:instruction float_mult} {:instruction 28} {:instruction integer_add} {:instruction float_tan} {:instruction integer_inc} {:instruction in2} {:instruction float_max} {:instruction float_max} {:instruction float_rot} {:instruction print_float} {:instruction integer_mult} {:instruction float_mult} {:instruction float_pop} {:instruction float_mult} {:instruction integer_inc} {:instruction in2} {:instruction float_max} {:instruction integer_dup} {:instruction print_float} {:instruction integer_mult} {:instruction integer_fromfloat} {:instruction float_pop} {:instruction float_mult} {:instruction in1} {:instruction in2} {:instruction float_sub} {:instruction float_sub} {:instruction float_mult} {:instruction integer_dup} {:instruction integer_dup} {:instruction float_add} {:instruction integer_dec} {:instruction integer_shove} {:instruction float_mult} {:instruction float_add} {:instruction float_mult} {:instruction integer_mult} {:instruction integer_dup} {:instruction float_add} {:instruction integer_dup} {:instruction float_add} {:instruction integer_dec} {:instruction integer_mult} {:instruction float_mult} {:instruction float_tan} {:instruction in2} {:instruction float_max} {:instruction float_pop} {:instruction in2} {:instruction integer_dup} {:instruction integer_pop} {:instruction integer_dec} {:instruction float_cos} {:instruction float_frominteger} {:instruction integer_swap} {:instruction integer_mod} {:instruction integer_dup} {:instruction 80} {:instruction integer_mod} {:instruction integer_dup} {:instruction print_float} {:instruction print_float} {:instruction float_frominteger} {:instruction print_integer} {:instruction integer_sub} {:instruction integer_inc} {:instruction integer_max} {:instruction -86} {:instruction float_shove} {:instruction float_mult} {:instruction integer_max} {:instruction float_mult} {:instruction float_sub} {:instruction integer_mult} {:instruction integer_shove} {:instruction print_integer} {:instruction integer_shove} {:instruction print_integer} {:instruction float_rot})
Best program: (integer_dup_items float_mult float_yankdup float_pop float_mult float_dup_times float_shove float_pop float_mult in2 integer_inc float_yank float_mult 28 integer_add float_tan integer_inc in2 float_max float_max float_rot print_float integer_mult float_mult float_pop float_mult integer_inc in2 float_max integer_dup print_float integer_mult integer_fromfloat float_pop float_mult in1 in2 float_sub float_sub float_mult integer_dup integer_dup float_add integer_dec integer_shove float_mult float_add float_mult integer_mult integer_dup float_add integer_dup float_add integer_dec integer_mult float_mult float_tan in2 float_max float_pop in2 integer_dup integer_pop integer_dec float_cos float_frominteger integer_swap integer_mod integer_dup 80 integer_mod integer_dup print_float print_float float_frominteger print_integer integer_sub integer_inc integer_max -86 float_shove float_mult integer_max float_mult float_sub integer_mult integer_shove print_integer integer_shove print_integer float_rot)
Errors: [75.0362 8 34.2119 10 49.8114 9 11.52 6 46.787 8 57.7839 8 13.0202 9 95.8478 11 22.5106 9 15.2344 10 55.2703 10 86.9001 7 33.2111 9 6.0932 11 65.9905 9 56.1804 9 13.6023 8 41.282 10 0.0533 8 97.5666 12 41.6537 8 87.374 12 26.2995 8 22.2569 11 90.7212 8]
Total: 1374.2185000000002
Mean: 27.48437
Genome size: 91
Size: 92
Percent parens: 0.011
--- Population Statistics ---
Average total errors in population: 5426.063739499994
Median total errors in population: 1379.71675
Error averages by case: (255.61319380000094 8.885 303.1428431999979 10.513 169.24512950000155 9.779 139.61767739999993 8.456 168.09994170000024 9.383 179.52662060000074 9.908 289.03737690000116 9.38 212.71718749999835 11.88 147.96695109999982 10.032 213.35841569999758 10.792 177.34264820000107 10.766 271.1350952999999 9.178 92.64794190000002 9.864 135.2899483000012 11.376 186.2949148000025 10.076 236.21090880000196 10.028 211.47119269999982 9.286 232.07420540000282 10.606 201.90785689999984 8.962 276.03489499999927 12.148 232.29174869999795 9.234 268.0155426000027 12.105 220.87686139999803 9.44 149.17441159999922 11.202 204.47923050000026 9.212)
Error minima by case: (35.0748 7 12.3426 9 9.1678 8 2.4959 5 2.2442 7 9.7435 8 0.0299 7 44.5703 9 10.4434 8 14.1748 8 13.2402 9 2.9697 7 31.178 8 5.0218 8 20.026 8 23.2585 8 12.5364 8 7.4865 8 0.0511 6 1.4538 8 10.4054 7 7.2825 8 25.2239 7 15.3358 8 30.7431 8)
Average genome size in population (length): 89.165
Average program size in population (points): 90.165
Average percent parens in population: 0.011
Minimum age in population: 220.774830418538
Maximum age in population: 225.1183254471841
Average age in population: 223.0415648611879
Median age in population: 223.0666317904841
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 9
Genome diversity (% unique Plush genomes):	 0.865
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 9
Syntactic diversity (% unique Push programs):	 0.865
Total error diversity:				 0.404
Error (vector) diversity:			 0.414
Behavioral diversity:				 0.415
--- Run Statistics ---
Number of program evaluations used so far: 161000
Number of point (instruction) evaluations so far: 296636715
--- Timings ---
Current time: 1529615550458 milliseconds
Total Time:         656.3 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       245.8 seconds, 37.5%
Fitness Testing:    326.6 seconds, 49.8%
Report:              83.8 seconds, 12.8%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 160
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 161
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 161
;;******************************
;; -*- Number IO problem report - generation 161
Test total error for best: 64453.020200000035
Test mean error for best: 32.22651
;;------------------------------
Outputs of best individual on training cases:
Correct output: -116.076402553 | Program output: -41.0401600   
Correct output: 24.1400847456  | Program output: -10.07181     
Correct output: 69.833290954   | Program output: 20.0219241    
Correct output: 82.4958592801  | Program output: 94.015857281  
Correct output: 34.2385110874  | Program output: 81.02551287   
Correct output: -10.7358110665 | Program output: 47.048110545  
Correct output: 1.9700532093   | Program output: -11.050100    
Correct output: -44.7956976677 | Program output: 51.052140557  
Correct output: 68.5576547673  | Program output: 46.047103777  
Correct output: -69.2536523379 | Program output: -54.0192809   
Correct output: -14.2275745396 | Program output: 41.04274047   
Correct output: -171.9767905886 | Program output: -85.0767056   
Correct output: -32.1846093265 | Program output: 1.0265        
Correct output: 66.9812146721  | Program output: 73.074405151  
Correct output: 100.0259781081 | Program output: 34.03542841   
Correct output: -90.2595503995 | Program output: -34.0791089   
Correct output: -82.4635707651 | Program output: -96.0659025   
Correct output: -8.7492896214  | Program output: -50.0312401   
Correct output: -82.1329348831 | Program output: -82.0796561   
Correct output: 24.5261129925  | Program output: -73.0405184   
Correct output: -11.4065589042 | Program output: -53.0602704   
Correct output: 10.3282540908  | Program output: -77.045776    
Correct output: -51.7760580299 | Program output: -78.0755929   
Correct output: 51.8185003253  | Program output: 74.075421801  
Correct output: 110.7431489201 | Program output: 20.0219241    
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_dup_items} {:instruction float_mult} {:instruction float_dup_times} {:instruction float_pop} {:instruction float_mult} {:instruction float_dup_times} {:instruction float_shove} {:instruction float_mult} {:instruction float_mult} {:instruction in2} {:instruction integer_inc} {:instruction tagged_714} {:instruction float_mult} {:instruction float_yankdup} {:instruction float_flush} {:instruction float_mult} {:instruction 28} {:instruction integer_add} {:instruction float_pop} {:instruction integer_inc} {:instruction in2} {:instruction float_max} {:instruction print_float} {:instruction integer_mult} {:instruction float_mult} {:instruction float_rot} {:instruction print_float} {:instruction integer_mult} {:instruction float_max} {:instruction tag_float_282} {:instruction integer_max} {:instruction integer_inc} {:instruction in2} {:instruction float_max} {:instruction integer_dup} {:instruction print_float} {:instruction integer_mult} {:instruction float_mult} {:instruction float_div} {:instruction float_mult} {:instruction float_mult} {:instruction in2} {:instruction float_sub} {:instruction float_sub} {:instruction float_mult} {:instruction integer_dup} {:instruction integer_dup} {:instruction float_div} {:instruction integer_dec} {:instruction integer_shove} {:instruction float_mult} {:instruction float_add} {:instruction float_mult} {:instruction integer_mult} {:instruction integer_dup} {:instruction float_add} {:instruction integer_dup} {:instruction float_add} {:instruction integer_dec} {:instruction integer_mult} {:instruction float_mult} {:instruction float_dec} {:instruction float_tan} {:instruction in2} {:instruction float_mod} {:instruction in2} {:instruction integer_swap} {:instruction integer_dup} {:instruction tag_integer_466} {:instruction integer_dec} {:instruction float_cos} {:instruction float_frominteger} {:instruction integer_swap} {:instruction integer_mod} {:instruction integer_dup} {:instruction 80} {:instruction integer_mod} {:instruction integer_dup} {:instruction print_float} {:instruction float_frominteger} {:instruction print_integer} {:instruction integer_sub} {:instruction integer_inc} {:instruction integer_max} {:instruction integer_stackdepth} {:instruction float_shove} {:instruction float_mult} {:instruction integer_max} {:instruction float_dup} {:instruction float_inc} {:instruction integer_mult} {:instruction integer_mult} {:instruction print_integer} {:instruction integer_swap})
Best program: (integer_dup_items float_mult float_dup_times float_pop float_mult float_dup_times float_shove float_mult float_mult in2 integer_inc tagged_714 float_mult float_yankdup float_flush float_mult 28 integer_add float_pop integer_inc in2 float_max print_float integer_mult float_mult float_rot print_float integer_mult float_max tag_float_282 integer_max integer_inc in2 float_max integer_dup print_float integer_mult float_mult float_div float_mult float_mult in2 float_sub float_sub float_mult integer_dup integer_dup float_div integer_dec integer_shove float_mult float_add float_mult integer_mult integer_dup float_add integer_dup float_add integer_dec integer_mult float_mult float_dec float_tan in2 float_mod in2 integer_swap integer_dup tag_integer_466 integer_dec float_cos float_frominteger integer_swap integer_mod integer_dup 80 integer_mod integer_dup print_float float_frominteger print_integer integer_sub integer_inc integer_max integer_stackdepth float_shove float_mult integer_max float_dup float_inc integer_mult integer_mult print_integer integer_swap)
Errors: [75.0362 8 34.2119 10 49.8114 9 11.52 6 46.787 8 57.7839 8 13.0202 9 95.8478 11 22.5106 9 15.2344 10 55.2703 10 86.9001 7 33.2111 9 6.0932 11 65.9905 9 56.1804 9 13.6023 8 41.282 10 0.0533 8 97.5666 12 41.6537 8 87.374 12 26.2995 8 22.2569 11 90.7212 8]
Total: 1374.2185000000002
Mean: 27.48437
Genome size: 94
Size: 95
Percent parens: 0.011
--- Population Statistics ---
Average total errors in population: 4898.283070499998
Median total errors in population: 1380.2444
Error averages by case: (230.18937140000094 8.829 277.8272138999981 10.486 153.93533570000133 9.745 124.28251140000079 8.416 147.67312609999928 9.347 162.98149029999985 9.825 263.8994464999996 9.379 196.57340989999864 11.834 132.51849299999884 9.947 184.27216989999826 10.757 160.83848830000082 10.72 244.36171539999944 9.035 95.37294359999999 9.847 118.332376900001 11.352 170.69267370000196 10.042 212.81674410000196 9.967 183.34491279999975 9.245 203.8790698000025 10.563 172.40331849999964 8.969 249.63774629999864 12.096 204.55300609999833 9.22 241.34854780000242 12.073 192.95098329999834 9.374 132.25268899999824 11.197 189.93028680000023 9.15)
Error minima by case: (40.0 4 3.1401 5 9.1678 5 2.4 4 0.1813 8 9.6877 5 0.9701 4 0.0973 5 10.446 5 14.1744 4 13.1848 5 84.0 4 2.0 4 5.0243 9 19.9905 6 33.0 4 12.5364 8 7.718 8 0.0329 4 9.5311 4 10.3463 7 4.3172 4 7.0776 7 3.2383 9 21.0 6)
Average genome size in population (length): 88.997
Average program size in population (points): 89.997
Average percent parens in population: 0.011
Minimum age in population: 221.774830418538
Maximum age in population: 226.4328956476733
Average age in population: 224.3723751901299
Median age in population: 224.4138290373342
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 7
Genome diversity (% unique Plush genomes):	 0.88
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 7
Syntactic diversity (% unique Push programs):	 0.88
Total error diversity:				 0.394
Error (vector) diversity:			 0.409
Behavioral diversity:				 0.411
--- Run Statistics ---
Number of program evaluations used so far: 162000
Number of point (instruction) evaluations so far: 298861665
--- Timings ---
Current time: 1529615555062 milliseconds
Total Time:         661.0 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       247.3 seconds, 37.4%
Fitness Testing:    329.0 seconds, 49.8%
Report:              84.5 seconds, 12.8%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 161
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 162
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 162
;;******************************
;; -*- Number IO problem report - generation 162
Test total error for best: 64453.020200000035
Test mean error for best: 32.22651
;;------------------------------
Outputs of best individual on training cases:
Correct output: -116.076402553 | Program output: -41.0401600   
Correct output: 24.1400847456  | Program output: -10.07181     
Correct output: 69.833290954   | Program output: 20.0219241    
Correct output: 82.4958592801  | Program output: 94.015857281  
Correct output: 34.2385110874  | Program output: 81.02551287   
Correct output: -10.7358110665 | Program output: 47.048110545  
Correct output: 1.9700532093   | Program output: -11.050100    
Correct output: -44.7956976677 | Program output: 51.052140557  
Correct output: 68.5576547673  | Program output: 46.047103777  
Correct output: -69.2536523379 | Program output: -54.0192809   
Correct output: -14.2275745396 | Program output: 41.04274047   
Correct output: -171.9767905886 | Program output: -85.0767056   
Correct output: -32.1846093265 | Program output: 1.0265        
Correct output: 66.9812146721  | Program output: 73.074405151  
Correct output: 100.0259781081 | Program output: 34.03542841   
Correct output: -90.2595503995 | Program output: -34.0791089   
Correct output: -82.4635707651 | Program output: -96.0659025   
Correct output: -8.7492896214  | Program output: -50.0312401   
Correct output: -82.1329348831 | Program output: -82.0796561   
Correct output: 24.5261129925  | Program output: -73.0405184   
Correct output: -11.4065589042 | Program output: -53.0602704   
Correct output: 10.3282540908  | Program output: -77.045776    
Correct output: -51.7760580299 | Program output: -78.0755929   
Correct output: 51.8185003253  | Program output: 74.075421801  
Correct output: 110.7431489201 | Program output: 20.0219241    
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction in1} {:instruction in1} {:instruction float_rot} {:instruction float_mult} {:instruction in2} {:instruction integer_inc} {:instruction float_swap} {:instruction float_min} {:instruction float_mult} {:instruction 28} {:instruction integer_add} {:instruction float_pop} {:instruction integer_inc} {:instruction in2} {:instruction float_max} {:instruction float_max} {:instruction float_rot} {:instruction print_float} {:instruction integer_mult} {:instruction float_mult} {:instruction float_pop} {:instruction float_mult} {:instruction integer_inc} {:instruction in2} {:instruction float_max} {:instruction integer_dup} {:instruction print_float} {:instruction integer_mult} {:instruction integer_fromfloat} {:instruction float_pop} {:instruction float_mult} {:instruction in1} {:instruction in2} {:instruction float_sub} {:instruction float_sub} {:instruction float_mult} {:instruction integer_dup} {:instruction integer_dup} {:instruction float_add} {:instruction integer_dec} {:instruction integer_shove} {:instruction float_mult} {:instruction float_add} {:instruction float_mult} {:instruction integer_mult} {:instruction integer_dup} {:instruction float_add} {:instruction integer_dup} {:instruction float_add} {:instruction integer_dec} {:instruction integer_mult} {:instruction float_mult} {:instruction float_tan} {:instruction in2} {:instruction float_max} {:instruction float_pop} {:instruction in2} {:instruction integer_dup} {:instruction integer_pop} {:instruction integer_dec} {:instruction float_cos} {:instruction float_frominteger} {:instruction integer_swap} {:instruction integer_mod} {:instruction integer_dup} {:instruction 80} {:instruction integer_mod} {:instruction integer_dup} {:instruction print_float} {:instruction print_float} {:instruction float_frominteger} {:instruction print_integer} {:instruction integer_sub} {:instruction integer_inc} {:instruction integer_max} {:instruction -86} {:instruction float_shove} {:instruction float_mult} {:instruction integer_max} {:instruction integer_mult} {:instruction integer_shove} {:instruction print_integer} {:instruction integer_rot})
Best program: (in1 in1 float_rot float_mult in2 integer_inc float_swap float_min float_mult 28 integer_add float_pop integer_inc in2 float_max float_max float_rot print_float integer_mult float_mult float_pop float_mult integer_inc in2 float_max integer_dup print_float integer_mult integer_fromfloat float_pop float_mult in1 in2 float_sub float_sub float_mult integer_dup integer_dup float_add integer_dec integer_shove float_mult float_add float_mult integer_mult integer_dup float_add integer_dup float_add integer_dec integer_mult float_mult float_tan in2 float_max float_pop in2 integer_dup integer_pop integer_dec float_cos float_frominteger integer_swap integer_mod integer_dup 80 integer_mod integer_dup print_float print_float float_frominteger print_integer integer_sub integer_inc integer_max -86 float_shove float_mult integer_max integer_mult integer_shove print_integer integer_rot)
Errors: [75.0362 8 34.2119 10 49.8114 9 11.52 6 46.787 8 57.7839 8 13.0202 9 95.8478 11 22.5106 9 15.2344 10 55.2703 10 86.9001 7 33.2111 9 6.0932 11 65.9905 9 56.1804 9 13.6023 8 41.282 10 0.0533 8 97.5666 12 41.6537 8 87.374 12 26.2995 8 22.2569 11 90.7212 8]
Total: 1374.2185000000002
Mean: 27.48437
Genome size: 83
Size: 84
Percent parens: 0.012
--- Population Statistics ---
Average total errors in population: 5011.238139300001
Median total errors in population: 1386.2281500000001
Error averages by case: (240.99717750000093 8.874 286.93361589999813 10.533 151.82929210000134 9.803 119.85110780000038 8.56 147.79369039999904 9.445 160.77010189999967 10.001 273.0054818999997 9.408 194.69272039999888 11.985 129.6246863999989 9.999 195.7375760999984 10.844 158.13158220000093 10.805 254.09748929999958 9.197 93.19138480000007 9.876 115.43512450000105 11.339 168.03942090000092 10.08 225.66398230000198 10.045 193.10082649999956 9.256 215.85006770000263 10.636 183.10158089999973 8.985 260.7754816999988 12.142 215.53558039999814 9.255 252.48794790000238 12.173 203.80079559999837 9.44 129.68723349999817 11.26 187.9571907000002 9.206)
Error minima by case: (73.9971 6 4.1401 8 10.1678 8 2.4007 5 13.2385 7 9.6877 6 0.9701 7 43.7436 9 11.446 8 14.1739 8 13.1848 9 85.8973 7 31.1581 8 5.0243 8 19.9908 7 55.1804 8 11.5364 8 7.6917 8 0.0527 6 14.5462 7 10.3335 7 6.2825 8 24.2239 7 21.1871 8 30.722 8)
Average genome size in population (length): 89.543
Average program size in population (points): 90.543
Average percent parens in population: 0.011
Minimum age in population: 222.976129487656
Maximum age in population: 227.9088521095899
Average age in population: 225.7583640186815
Median age in population: 225.8280040231404
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 7
Genome diversity (% unique Plush genomes):	 0.878
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 7
Syntactic diversity (% unique Push programs):	 0.878
Total error diversity:				 0.424
Error (vector) diversity:			 0.437
Behavioral diversity:				 0.437
--- Run Statistics ---
Number of program evaluations used so far: 163000
Number of point (instruction) evaluations so far: 301100265
--- Timings ---
Current time: 1529615559626 milliseconds
Total Time:         665.5 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       248.9 seconds, 37.4%
Fitness Testing:    331.4 seconds, 49.8%
Report:              85.1 seconds, 12.8%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 162
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 163
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 163
;;******************************
;; -*- Number IO problem report - generation 163
Test total error for best: 64453.020200000035
Test mean error for best: 32.22651
;;------------------------------
Outputs of best individual on training cases:
Correct output: -116.076402553 | Program output: -41.0401600   
Correct output: 24.1400847456  | Program output: -10.07181     
Correct output: 69.833290954   | Program output: 20.0219241    
Correct output: 82.4958592801  | Program output: 94.015857281  
Correct output: 34.2385110874  | Program output: 81.02551287   
Correct output: -10.7358110665 | Program output: 47.048110545  
Correct output: 1.9700532093   | Program output: -11.050100    
Correct output: -44.7956976677 | Program output: 51.052140557  
Correct output: 68.5576547673  | Program output: 46.047103777  
Correct output: -69.2536523379 | Program output: -54.0192809   
Correct output: -14.2275745396 | Program output: 41.04274047   
Correct output: -171.9767905886 | Program output: -85.0767056   
Correct output: -32.1846093265 | Program output: 1.0265        
Correct output: 66.9812146721  | Program output: 73.074405151  
Correct output: 100.0259781081 | Program output: 34.03542841   
Correct output: -90.2595503995 | Program output: -34.0791089   
Correct output: -82.4635707651 | Program output: -96.0659025   
Correct output: -8.7492896214  | Program output: -50.0312401   
Correct output: -82.1329348831 | Program output: -82.0796561   
Correct output: 24.5261129925  | Program output: -73.0405184   
Correct output: -11.4065589042 | Program output: -53.0602704   
Correct output: 10.3282540908  | Program output: -77.045776    
Correct output: -51.7760580299 | Program output: -78.0755929   
Correct output: 51.8185003253  | Program output: 74.075421801  
Correct output: 110.7431489201 | Program output: 20.0219241    
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction in2} {:instruction integer_inc} {:instruction float_yankdup} {:instruction float_yank} {:instruction float_mult} {:instruction 28} {:instruction integer_add} {:instruction float_mod} {:instruction integer_inc} {:instruction in2} {:instruction integer_mult} {:instruction float_rot} {:instruction float_max} {:instruction integer_max} {:instruction print_float} {:instruction float_max} {:instruction float_rot} {:instruction print_float} {:instruction integer_mult} {:instruction float_mult} {:instruction integer_mult} {:instruction float_mult} {:instruction float_add} {:instruction float_mult} {:instruction integer_inc} {:instruction in2} {:instruction float_inc} {:instruction integer_dup} {:instruction float_swap} {:instruction integer_mult} {:instruction float_mult} {:instruction float_shove} {:instruction float_shove} {:instruction float_mult} {:instruction float_mult} {:instruction in2} {:instruction float_sub} {:instruction float_sub} {:instruction float_mult} {:instruction integer_dup} {:instruction integer_dup} {:instruction float_add} {:instruction tag_float_500} {:instruction integer_shove} {:instruction float_tan} {:instruction float_mult} {:instruction integer_mult} {:instruction integer_dup} {:instruction float_add} {:instruction integer_dup} {:instruction float_add} {:instruction integer_dec} {:instruction integer_mult} {:instruction float_mult} {:instruction float_mod} {:instruction float_pop} {:instruction float_tan} {:instruction in2} {:instruction in2} {:instruction float_dup} {:instruction integer_dec} {:instruction float_cos} {:instruction float_frominteger} {:instruction integer_swap} {:instruction integer_mod} {:instruction integer_dup} {:instruction 80} {:instruction integer_mod} {:instruction integer_dup} {:instruction print_float} {:instruction float_frominteger} {:instruction print_integer} {:instruction integer_sub} {:instruction integer_inc} {:instruction integer_max} {:instruction integer_max} {:instruction float_dup} {:instruction integer_stackdepth} {:instruction float_shove} {:instruction float_dup} {:instruction float_inc} {:instruction integer_mult} {:instruction integer_rot} {:instruction print_integer} {:instruction integer_swap})
Best program: (in2 integer_inc float_yankdup float_yank float_mult 28 integer_add float_mod integer_inc in2 integer_mult float_rot float_max integer_max print_float float_max float_rot print_float integer_mult float_mult integer_mult float_mult float_add float_mult integer_inc in2 float_inc integer_dup float_swap integer_mult float_mult float_shove float_shove float_mult float_mult in2 float_sub float_sub float_mult integer_dup integer_dup float_add tag_float_500 integer_shove float_tan float_mult integer_mult integer_dup float_add integer_dup float_add integer_dec integer_mult float_mult float_mod float_pop float_tan in2 in2 float_dup integer_dec float_cos float_frominteger integer_swap integer_mod integer_dup 80 integer_mod integer_dup print_float float_frominteger print_integer integer_sub integer_inc integer_max integer_max float_dup integer_stackdepth float_shove float_dup float_inc integer_mult integer_rot print_integer integer_swap)
Errors: [75.0362 8 34.2119 10 49.8114 9 11.52 6 46.787 8 57.7839 8 13.0202 9 95.8478 11 22.5106 9 15.2344 10 55.2703 10 86.9001 7 33.2111 9 6.0932 11 65.9905 9 56.1804 9 13.6023 8 41.282 10 0.0533 8 97.5666 12 41.6537 8 87.374 12 26.2995 8 22.2569 11 90.7212 8]
Total: 1374.2185000000002
Mean: 27.48437
Genome size: 85
Size: 86
Percent parens: 0.012
--- Population Statistics ---
Average total errors in population: 5278.250259199999
Median total errors in population: 1390.2178500000002
Error averages by case: (254.58879880000092 8.82 297.56293479999795 10.517 162.7646029000016 9.762 130.50048550000074 8.635 158.07526039999962 9.45 171.4361749 9.995 282.6679965000004 9.359 204.85297129999844 11.921 140.00471409999903 9.995 206.88902589999742 10.777 169.23522910000125 10.787 267.4792046999996 9.164 82.45250939999997 9.878 127.09878960000104 11.358 178.79468210000186 10.109 240.07273070000224 9.998 208.04310989999996 9.233 226.7589243000027 10.551 196.67261549999975 8.942 271.7839276999986 12.069 227.43456649999837 9.226 264.35038690000255 12.053 216.79117529999843 9.39 141.0476127999984 11.182 198.4888296000004 9.232)
Error minima by case: (74.0362 6 2.0761 8 9.1687 8 2.4959 6 13.2385 7 9.6874 8 0.9701 7 43.7433 9 10.4472 8 14.2344 8 13.1853 9 85.9001 7 31.1781 8 5.0932 8 20.026 7 55.1804 8 11.5364 7 7.73 8 0.0523 6 14.5041 8 10.3424 8 6.287 9 24.2239 7 21.2569 8 30.7431 7)
Average genome size in population (length): 88.832
Average program size in population (points): 89.832
Average percent parens in population: 0.011
Minimum age in population: 223.976129487656
Maximum age in population: 229.4239066370966
Average age in population: 227.0819504689421
Median age in population: 227.1169485418741
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 5
Genome diversity (% unique Plush genomes):	 0.89
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 5
Syntactic diversity (% unique Push programs):	 0.89
Total error diversity:				 0.414
Error (vector) diversity:			 0.423
Behavioral diversity:				 0.425
--- Run Statistics ---
Number of program evaluations used so far: 164000
Number of point (instruction) evaluations so far: 303321115
--- Timings ---
Current time: 1529615564438 milliseconds
Total Time:         670.3 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       250.6 seconds, 37.4%
Fitness Testing:    333.8 seconds, 49.8%
Report:              85.8 seconds, 12.8%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 163
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 164
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 164
;;******************************
;; -*- Number IO problem report - generation 164
Test total error for best: 64453.020200000035
Test mean error for best: 32.22651
;;------------------------------
Outputs of best individual on training cases:
Correct output: -116.076402553 | Program output: -41.0401600   
Correct output: 24.1400847456  | Program output: -10.07181     
Correct output: 69.833290954   | Program output: 20.0219241    
Correct output: 82.4958592801  | Program output: 94.015857281  
Correct output: 34.2385110874  | Program output: 81.02551287   
Correct output: -10.7358110665 | Program output: 47.048110545  
Correct output: 1.9700532093   | Program output: -11.050100    
Correct output: -44.7956976677 | Program output: 51.052140557  
Correct output: 68.5576547673  | Program output: 46.047103777  
Correct output: -69.2536523379 | Program output: -54.0192809   
Correct output: -14.2275745396 | Program output: 41.04274047   
Correct output: -171.9767905886 | Program output: -85.0767056   
Correct output: -32.1846093265 | Program output: 1.0265        
Correct output: 66.9812146721  | Program output: 73.074405151  
Correct output: 100.0259781081 | Program output: 34.03542841   
Correct output: -90.2595503995 | Program output: -34.0791089   
Correct output: -82.4635707651 | Program output: -96.0659025   
Correct output: -8.7492896214  | Program output: -50.0312401   
Correct output: -82.1329348831 | Program output: -82.0796561   
Correct output: 24.5261129925  | Program output: -73.0405184   
Correct output: -11.4065589042 | Program output: -53.0602704   
Correct output: 10.3282540908  | Program output: -77.045776    
Correct output: -51.7760580299 | Program output: -78.0755929   
Correct output: 51.8185003253  | Program output: 74.075421801  
Correct output: 110.7431489201 | Program output: 20.0219241    
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_yankdup} {:instruction float_cos} {:instruction float_mult} {:instruction float_yankdup} {:instruction float_pop} {:instruction integer_swap} {:instruction float_shove} {:instruction float_pop} {:instruction float_pop} {:instruction float_mult} {:instruction in2} {:instruction integer_inc} {:instruction integer_swap} {:instruction float_yank} {:instruction float_mult} {:instruction 28} {:instruction integer_add} {:instruction float_pop} {:instruction integer_inc} {:instruction in2} {:instruction float_max} {:instruction float_rot} {:instruction integer_mult} {:instruction print_float} {:instruction integer_mult} {:instruction float_mult} {:instruction float_pop} {:instruction float_swap} {:instruction integer_inc} {:instruction in2} {:instruction float_max} {:instruction integer_dup} {:instruction print_float} {:instruction integer_mult} {:instruction float_mult} {:instruction float_pop} {:instruction float_mult} {:instruction float_cos} {:instruction in2} {:instruction float_sub} {:instruction float_sub} {:instruction float_mult} {:instruction integer_dup} {:instruction integer_dup} {:instruction integer_yankdup} {:instruction integer_dec} {:instruction integer_shove} {:instruction float_mult} {:instruction float_rot} {:instruction integer_mult} {:instruction integer_dup} {:instruction float_add} {:instruction integer_dup} {:instruction float_add} {:instruction integer_dec} {:instruction integer_mult} {:instruction float_mult} {:instruction float_yankdup} {:instruction float_tan} {:instruction in2} {:instruction float_pop} {:instruction float_sub} {:instruction in2} {:instruction integer_fromfloat} {:instruction in2} {:instruction integer_pop} {:instruction integer_dec} {:instruction float_cos} {:instruction float_frominteger} {:instruction integer_swap} {:instruction integer_mod} {:instruction integer_dup} {:instruction 80} {:instruction integer_mod} {:instruction integer_dup} {:instruction print_float} {:instruction float_frominteger} {:instruction print_integer} {:instruction integer_sub} {:instruction integer_inc} {:instruction integer_max} {:instruction integer_stackdepth} {:instruction float_shove} {:instruction float_mult} {:instruction integer_max} {:instruction float_dup} {:instruction float_inc} {:instruction integer_mult} {:instruction integer_yank} {:instruction print_integer})
Best program: (float_yankdup float_cos float_mult float_yankdup float_pop integer_swap float_shove float_pop float_pop float_mult in2 integer_inc integer_swap float_yank float_mult 28 integer_add float_pop integer_inc in2 float_max float_rot integer_mult print_float integer_mult float_mult float_pop float_swap integer_inc in2 float_max integer_dup print_float integer_mult float_mult float_pop float_mult float_cos in2 float_sub float_sub float_mult integer_dup integer_dup integer_yankdup integer_dec integer_shove float_mult float_rot integer_mult integer_dup float_add integer_dup float_add integer_dec integer_mult float_mult float_yankdup float_tan in2 float_pop float_sub in2 integer_fromfloat in2 integer_pop integer_dec float_cos float_frominteger integer_swap integer_mod integer_dup 80 integer_mod integer_dup print_float float_frominteger print_integer integer_sub integer_inc integer_max integer_stackdepth float_shove float_mult integer_max float_dup float_inc integer_mult integer_yank print_integer)
Errors: [75.0362 8 34.2119 10 49.8114 9 11.52 6 46.787 8 57.7839 8 13.0202 9 95.8478 11 22.5106 9 15.2344 10 55.2703 10 86.9001 7 33.2111 9 6.0932 11 65.9905 9 56.1804 9 13.6023 8 41.282 10 0.0533 8 97.5666 12 41.6537 8 87.374 12 26.2995 8 22.2569 11 90.7212 8]
Total: 1374.2185000000002
Mean: 27.48437
Genome size: 90
Size: 91
Percent parens: 0.011
--- Population Statistics ---
Average total errors in population: 5269.650495699998
Median total errors in population: 1390.7282
Error averages by case: (247.10263200000105 8.848 278.490339399998 10.479 172.07519090000156 9.804 140.8909054000001 8.672 169.1053058999999 9.466 180.01730250000048 9.985 265.38337699999954 9.375 212.98392049999828 11.947 149.0023538999997 10.105 200.55553179999805 10.8 177.89293280000123 10.784 259.3662146999993 9.173 96.63147630000005 9.855 135.93836220000102 11.411 187.53828190000198 10.125 231.2617839000021 10.041 198.46957959999992 9.319 219.32289140000245 10.588 188.7479320999997 9.041 264.41892999999845 12.082 219.8447899999983 9.282 256.2111345000027 12.108 208.18961729999856 9.435 149.699748799999 11.208 207.32896090000042 9.248)
Error minima by case: (70.1852 5 21.1169 4 10.1667 4 2.4873 5 12.7697 7 9.6877 4 0.0299 3 1.0955 4 11.4423 4 14.2194 5 13.1848 4 85.9001 5 2.0 2 5.0228 8 20.0217 5 44.3684 5 11.5364 7 7.718 8 0.0527 5 14.5464 5 10.3463 7 4.3271 5 5.8849 7 4.811 8 21.0 5)
Average genome size in population (length): 88.428
Average program size in population (points): 89.428
Average percent parens in population: 0.011
Minimum age in population: 224.976129487656
Maximum age in population: 230.605345652349
Average age in population: 228.3994028769056
Median age in population: 228.4079548763251
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 7
Genome diversity (% unique Plush genomes):	 0.887
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 7
Syntactic diversity (% unique Push programs):	 0.887
Total error diversity:				 0.436
Error (vector) diversity:			 0.445
Behavioral diversity:				 0.447
--- Run Statistics ---
Number of program evaluations used so far: 165000
Number of point (instruction) evaluations so far: 305531840
--- Timings ---
Current time: 1529615569015 milliseconds
Total Time:         675.0 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       252.1 seconds, 37.3%
Fitness Testing:    336.3 seconds, 49.8%
Report:              86.5 seconds, 12.8%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 164
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 165
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 165
;;******************************
;; -*- Number IO problem report - generation 165
Test total error for best: 64459.02020000002
Test mean error for best: 32.22951
;;------------------------------
Outputs of best individual on training cases:
Correct output: -116.076402553 | Program output: -41.0401600   
Correct output: 24.1400847456  | Program output: -10.07181     
Correct output: 69.833290954   | Program output: 20.0219241    
Correct output: 82.4958592801  | Program output: 94.015857281  
Correct output: 34.2385110874  | Program output: 81.02551287   
Correct output: -10.7358110665 | Program output: 47.048110545  
Correct output: 1.9700532093   | Program output: -11.050100    
Correct output: -44.7956976677 | Program output: 51.052140557  
Correct output: 68.5576547673  | Program output: 46.047103777  
Correct output: -69.2536523379 | Program output: -54.0192809   
Correct output: -14.2275745396 | Program output: 41.04274047   
Correct output: -171.9767905886 | Program output: -85.0767056   
Correct output: -32.1846093265 | Program output: 1.0265        
Correct output: 66.9812146721  | Program output: 73.074405151  
Correct output: 100.0259781081 | Program output: 34.03542841   
Correct output: -90.2595503995 | Program output: -34.0791089   
Correct output: -82.4635707651 | Program output: -96.0659025   
Correct output: -8.7492896214  | Program output: -50.0312401   
Correct output: -82.1329348831 | Program output: -82.0796561   
Correct output: 24.5261129925  | Program output: -73.0405184   
Correct output: -11.4065589042 | Program output: -53.0602704   
Correct output: 10.3282540908  | Program output: -77.045776    
Correct output: -51.7760580299 | Program output: -78.0755929   
Correct output: 51.8185003253  | Program output: 74.075421801  
Correct output: 110.7431489201 | Program output: 20.0219241    
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_cos} {:instruction float_mult} {:instruction float_yankdup} {:instruction float_yankdup} {:instruction float_pop} {:instruction float_mult} {:instruction in2} {:instruction integer_inc} {:instruction float_min} {:instruction float_yank} {:instruction float_mult} {:instruction 28} {:instruction integer_add} {:instruction float_pop} {:instruction integer_inc} {:instruction in2} {:instruction float_max} {:instruction float_dup_times} {:instruction print_float} {:instruction integer_mult} {:instruction float_mult} {:instruction float_pop} {:instruction float_swap} {:instruction integer_inc} {:instruction in2} {:instruction float_max} {:instruction integer_dup} {:instruction print_float} {:instruction integer_mult} {:instruction float_dup_times} {:instruction float_pop} {:instruction float_mult} {:instruction float_mult} {:instruction in2} {:instruction float_sub} {:instruction float_sub} {:instruction float_mult} {:instruction integer_dup} {:instruction integer_dup} {:instruction float_add} {:instruction float_shove} {:instruction integer_shove} {:instruction float_mult} {:instruction float_add} {:instruction float_rot} {:instruction integer_mult} {:instruction integer_dup} {:instruction float_add} {:instruction integer_dup} {:instruction float_add} {:instruction integer_dec} {:instruction integer_mult} {:instruction float_yankdup} {:instruction float_tan} {:instruction in2} {:instruction in2} {:instruction float_yankdup} {:instruction integer_dup} {:instruction integer_pop} {:instruction integer_dec} {:instruction float_cos} {:instruction float_frominteger} {:instruction integer_swap} {:instruction integer_mod} {:instruction integer_dup} {:instruction 80} {:instruction integer_mod} {:instruction integer_dup} {:instruction print_float} {:instruction float_frominteger} {:instruction print_integer} {:instruction integer_sub} {:instruction integer_inc} {:instruction integer_max} {:instruction integer_stackdepth} {:instruction float_yank} {:instruction float_sub} {:instruction integer_max} {:instruction integer_sub} {:instruction float_inc} {:instruction float_sub} {:instruction integer_shove} {:instruction print_integer} {:instruction integer_sub})
Best program: (float_cos float_mult float_yankdup float_yankdup float_pop float_mult in2 integer_inc float_min float_yank float_mult 28 integer_add float_pop integer_inc in2 float_max float_dup_times print_float integer_mult float_mult float_pop float_swap integer_inc in2 float_max integer_dup print_float integer_mult float_dup_times float_pop float_mult float_mult in2 float_sub float_sub float_mult integer_dup integer_dup float_add float_shove integer_shove float_mult float_add float_rot integer_mult integer_dup float_add integer_dup float_add integer_dec integer_mult float_yankdup float_tan in2 in2 float_yankdup integer_dup integer_pop integer_dec float_cos float_frominteger integer_swap integer_mod integer_dup 80 integer_mod integer_dup print_float float_frominteger print_integer integer_sub integer_inc integer_max integer_stackdepth float_yank float_sub integer_max integer_sub float_inc float_sub integer_shove print_integer integer_sub)
Errors: [75.0362 8 34.2119 10 49.8114 9 11.52 6 46.787 8 57.7839 8 13.0202 9 95.8478 11 22.5106 9 15.2344 10 55.2703 10 86.9001 7 33.2111 9 6.0932 11 65.9905 9 56.1804 9 13.6023 8 41.282 10 0.0533 8 97.5666 12 41.6537 8 87.374 12 26.2995 8 22.2569 11 90.7212 8]
Total: 1374.2185000000002
Mean: 27.48437
Genome size: 84
Size: 85
Percent parens: 0.012
--- Population Statistics ---
Average total errors in population: 4838.825657299999
Median total errors in population: 1385.2104000000002
Error averages by case: (225.07483550000117 8.708 282.9016948999979 10.504 151.8261945000017 9.738 122.59880110000095 8.451 153.77435929999973 9.302 163.50836020000025 9.846 270.14638709999997 9.354 198.18886289999784 11.844 132.14656349999856 9.971 178.47691039999802 10.697 161.3131331000012 10.697 237.72146829999912 8.982 84.79795100000001 9.88 117.7703911000012 11.293 170.37792860000198 10.015 209.10543140000215 9.895 176.27653309999957 9.132 199.4033767000026 10.518 165.10738259999954 8.816 245.01505899999813 12.083 199.8863193999982 9.129 236.60402770000275 12.058 186.5505723999983 9.284 132.02683429999792 11.177 187.7112792000003 9.141)
Error minima by case: (73.997 7 6.8599 9 0.7818 8 2.4959 6 2.767 8 10.7358 8 0.9701 8 44.7957 9 2.0574 8 14.1745 8 14.2276 9 85.8973 7 32.1846 6 3.6339 8 20.026 8 55.1804 9 12.5364 8 8.7493 8 0.0329 6 6.4739 8 11.4066 8 6.2705 9 25.2239 8 14.8143 8 9.278 7)
Average genome size in population (length): 88.304
Average program size in population (points): 89.304
Average percent parens in population: 0.011
Minimum age in population: 227.2523297974281
Maximum age in population: 231.7474323128245
Average age in population: 229.7301798733864
Median age in population: 229.7828529324617
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 5
Genome diversity (% unique Plush genomes):	 0.89
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 5
Syntactic diversity (% unique Push programs):	 0.89
Total error diversity:				 0.406
Error (vector) diversity:			 0.417
Behavioral diversity:				 0.418
--- Run Statistics ---
Number of program evaluations used so far: 166000
Number of point (instruction) evaluations so far: 307739515
--- Timings ---
Current time: 1529615573453 milliseconds
Total Time:         679.5 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       253.8 seconds, 37.3%
Fitness Testing:    338.6 seconds, 49.8%
Report:              87.0 seconds, 12.8%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 165
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 166
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 166
;;******************************
;; -*- Number IO problem report - generation 166
Test total error for best: 64453.020200000035
Test mean error for best: 32.22651
;;------------------------------
Outputs of best individual on training cases:
Correct output: -116.076402553 | Program output: -41.0401600   
Correct output: 24.1400847456  | Program output: -10.07181     
Correct output: 69.833290954   | Program output: 20.0219241    
Correct output: 82.4958592801  | Program output: 94.015857281  
Correct output: 34.2385110874  | Program output: 81.02551287   
Correct output: -10.7358110665 | Program output: 47.048110545  
Correct output: 1.9700532093   | Program output: -11.050100    
Correct output: -44.7956976677 | Program output: 51.052140557  
Correct output: 68.5576547673  | Program output: 46.047103777  
Correct output: -69.2536523379 | Program output: -54.0192809   
Correct output: -14.2275745396 | Program output: 41.04274047   
Correct output: -171.9767905886 | Program output: -85.0767056   
Correct output: -32.1846093265 | Program output: 1.0265        
Correct output: 66.9812146721  | Program output: 73.074405151  
Correct output: 100.0259781081 | Program output: 34.03542841   
Correct output: -90.2595503995 | Program output: -34.0791089   
Correct output: -82.4635707651 | Program output: -96.0659025   
Correct output: -8.7492896214  | Program output: -50.0312401   
Correct output: -82.1329348831 | Program output: -82.0796561   
Correct output: 24.5261129925  | Program output: -73.0405184   
Correct output: -11.4065589042 | Program output: -53.0602704   
Correct output: 10.3282540908  | Program output: -77.045776    
Correct output: -51.7760580299 | Program output: -78.0755929   
Correct output: 51.8185003253  | Program output: 74.075421801  
Correct output: 110.7431489201 | Program output: 20.0219241    
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_yankdup} {:instruction float_pop} {:instruction float_mult} {:instruction float_yankdup} {:instruction integer_dup_items} {:instruction float_mult} {:instruction float_yankdup} {:instruction float_pop} {:instruction float_mult} {:instruction float_dup_times} {:instruction float_shove} {:instruction float_mult} {:instruction float_mult} {:instruction in2} {:instruction integer_inc} {:instruction float_yank} {:instruction float_mult} {:instruction 28} {:instruction integer_add} {:instruction float_pop} {:instruction integer_inc} {:instruction in2} {:instruction float_max} {:instruction integer_mult} {:instruction float_mult} {:instruction float_pop} {:instruction float_mult} {:instruction integer_inc} {:instruction in2} {:instruction integer_dup} {:instruction print_float} {:instruction integer_mult} {:instruction float_mult} {:instruction float_pop} {:instruction float_mult} {:instruction float_mult} {:instruction in2} {:instruction float_mult} {:instruction integer_dup} {:instruction integer_dup} {:instruction float_max} {:instruction integer_dec} {:instruction integer_shove} {:instruction float_mult} {:instruction float_rot} {:instruction float_mult} {:instruction float_add} {:instruction float_mult} {:instruction integer_mult} {:instruction integer_dup} {:instruction float_add} {:instruction integer_dup} {:instruction float_add} {:instruction integer_dec} {:instruction integer_mult} {:instruction float_mult} {:instruction float_yankdup} {:instruction float_tan} {:instruction in2} {:instruction float_max} {:instruction float_rot} {:instruction float_mod} {:instruction in2} {:instruction integer_dup} {:instruction integer_pop} {:instruction integer_dec} {:instruction float_cos} {:instruction float_frominteger} {:instruction integer_swap} {:instruction integer_mod} {:instruction integer_dup} {:instruction 80} {:instruction integer_mod} {:instruction integer_dup} {:instruction print_float} {:instruction float_frominteger} {:instruction print_integer} {:instruction integer_sub} {:instruction integer_inc} {:instruction integer_max} {:instruction float_dup} {:instruction integer_max} {:instruction integer_mult} {:instruction integer_shove} {:instruction print_integer} {:instruction float_dup} {:instruction float_inc} {:instruction print_integer} {:instruction integer_swap})
Best program: (float_yankdup float_pop float_mult float_yankdup integer_dup_items float_mult float_yankdup float_pop float_mult float_dup_times float_shove float_mult float_mult in2 integer_inc float_yank float_mult 28 integer_add float_pop integer_inc in2 float_max integer_mult float_mult float_pop float_mult integer_inc in2 integer_dup print_float integer_mult float_mult float_pop float_mult float_mult in2 float_mult integer_dup integer_dup float_max integer_dec integer_shove float_mult float_rot float_mult float_add float_mult integer_mult integer_dup float_add integer_dup float_add integer_dec integer_mult float_mult float_yankdup float_tan in2 float_max float_rot float_mod in2 integer_dup integer_pop integer_dec float_cos float_frominteger integer_swap integer_mod integer_dup 80 integer_mod integer_dup print_float float_frominteger print_integer integer_sub integer_inc integer_max float_dup integer_max integer_mult integer_shove print_integer float_dup float_inc print_integer integer_swap)
Errors: [75.0362 8 34.2119 10 49.8114 9 11.52 6 46.787 8 57.7839 8 13.0202 9 95.8478 11 22.5106 9 15.2344 10 55.2703 10 86.9001 7 33.2111 9 6.0932 11 65.9905 9 56.1804 9 13.6023 8 41.282 10 0.0533 8 97.5666 12 41.6537 8 87.374 12 26.2995 8 22.2569 11 90.7212 8]
Total: 1374.2185000000002
Mean: 27.48437
Genome size: 89
Size: 90
Percent parens: 0.011
--- Population Statistics ---
Average total errors in population: 5270.398090299999
Median total errors in population: 1390.2241000000001
Error averages by case: (248.6804688000012 8.774 283.5812006999979 10.433 168.24698590000156 9.769 136.89418850000047 8.576 161.52525870000008 9.384 177.4774029000007 9.949 270.4374115999995 9.315 211.07368729999848 11.88 147.1975013999995 9.959 204.06850599999757 10.739 175.02589780000116 10.758 261.67096699999945 9.054 88.23282100000006 9.837 133.55992290000083 11.275 184.7596878000024 10.09 233.4750042000023 9.984 202.20466579999984 9.202 223.60180180000248 10.536 192.23785359999982 8.945 268.17712709999853 12.063 224.4149357999985 9.201 260.01509520000275 12.057 212.28691879999815 9.369 146.478232099999 11.125 203.60954760000055 9.191)
Error minima by case: (74.9962 7 2.4559 9 9.176 8 3.4873 5 3.2303 8 9.731 8 1.1839 7 43.7942 9 10.4434 8 15.154 8 13.2234 9 86.8961 7 31.1787 7 6.0188 8 21.0217 7 56.1606 9 12.5364 8 7.74 9 0.0523 6 14.5459 9 10.4039 8 2.3248 8 25.2239 8 20.811 8 31.7339 8)
Average genome size in population (length): 88.414
Average program size in population (points): 89.414
Average percent parens in population: 0.011
Minimum age in population: 228.7849703089317
Maximum age in population: 233.2711304944928
Average age in population: 231.1372162370343
Median age in population: 231.142270220483
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 5
Genome diversity (% unique Plush genomes):	 0.883
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 5
Syntactic diversity (% unique Push programs):	 0.883
Total error diversity:				 0.418
Error (vector) diversity:			 0.432
Behavioral diversity:				 0.434
--- Run Statistics ---
Number of program evaluations used so far: 167000
Number of point (instruction) evaluations so far: 309949865
--- Timings ---
Current time: 1529615578084 milliseconds
Total Time:         683.9 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       255.4 seconds, 37.3%
Fitness Testing:    340.9 seconds, 49.8%
Report:              87.5 seconds, 12.8%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 166
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 167
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 167
;;******************************
;; -*- Number IO problem report - generation 167
Test total error for best: 64453.020200000035
Test mean error for best: 32.22651
;;------------------------------
Outputs of best individual on training cases:
Correct output: -116.076402553 | Program output: -41.0401600   
Correct output: 24.1400847456  | Program output: -10.07181     
Correct output: 69.833290954   | Program output: 20.0219241    
Correct output: 82.4958592801  | Program output: 94.015857281  
Correct output: 34.2385110874  | Program output: 81.02551287   
Correct output: -10.7358110665 | Program output: 47.048110545  
Correct output: 1.9700532093   | Program output: -11.050100    
Correct output: -44.7956976677 | Program output: 51.052140557  
Correct output: 68.5576547673  | Program output: 46.047103777  
Correct output: -69.2536523379 | Program output: -54.0192809   
Correct output: -14.2275745396 | Program output: 41.04274047   
Correct output: -171.9767905886 | Program output: -85.0767056   
Correct output: -32.1846093265 | Program output: 1.0265        
Correct output: 66.9812146721  | Program output: 73.074405151  
Correct output: 100.0259781081 | Program output: 34.03542841   
Correct output: -90.2595503995 | Program output: -34.0791089   
Correct output: -82.4635707651 | Program output: -96.0659025   
Correct output: -8.7492896214  | Program output: -50.0312401   
Correct output: -82.1329348831 | Program output: -82.0796561   
Correct output: 24.5261129925  | Program output: -73.0405184   
Correct output: -11.4065589042 | Program output: -53.0602704   
Correct output: 10.3282540908  | Program output: -77.045776    
Correct output: -51.7760580299 | Program output: -78.0755929   
Correct output: 51.8185003253  | Program output: 74.075421801  
Correct output: 110.7431489201 | Program output: 20.0219241    
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_dup_times} {:instruction float_pop} {:instruction float_mult} {:instruction float_yankdup} {:instruction integer_dup_items} {:instruction float_mult} {:instruction float_yankdup} {:instruction float_pop} {:instruction float_mult} {:instruction float_dup_times} {:instruction float_shove} {:instruction float_mult} {:instruction float_mult} {:instruction in2} {:instruction integer_inc} {:instruction float_yank} {:instruction float_mult} {:instruction 28} {:instruction integer_add} {:instruction float_pop} {:instruction integer_inc} {:instruction in2} {:instruction float_max} {:instruction integer_mult} {:instruction float_mult} {:instruction float_yank} {:instruction float_tan} {:instruction integer_inc} {:instruction in2} {:instruction integer_dup} {:instruction print_float} {:instruction integer_mult} {:instruction float_mult} {:instruction float_pop} {:instruction float_pop} {:instruction float_mult} {:instruction in2} {:instruction float_mult} {:instruction integer_dup} {:instruction integer_dup} {:instruction float_max} {:instruction integer_inc} {:instruction integer_shove} {:instruction float_min} {:instruction float_rot} {:instruction float_mult} {:instruction float_add} {:instruction float_mult} {:instruction integer_mult} {:instruction integer_dup} {:instruction float_add} {:instruction integer_dup} {:instruction float_add} {:instruction integer_dec} {:instruction integer_mult} {:instruction float_yank} {:instruction float_yankdup} {:instruction float_tan} {:instruction in2} {:instruction float_max} {:instruction float_rot} {:instruction float_mod} {:instruction in2} {:instruction integer_dup} {:instruction integer_pop} {:instruction integer_dec} {:instruction float_cos} {:instruction float_frominteger} {:instruction integer_swap} {:instruction integer_mod} {:instruction integer_dup} {:instruction 80} {:instruction integer_mod} {:instruction integer_dup} {:instruction print_float} {:instruction print_float} {:instruction float_frominteger} {:instruction print_integer} {:instruction integer_sub} {:instruction integer_inc} {:instruction integer_max} {:instruction -86} {:instruction float_shove} {:instruction float_mult} {:instruction integer_max} {:instruction float_dup} {:instruction float_sub} {:instruction integer_mult} {:instruction integer_shove} {:instruction print_integer} {:instruction integer_shove} {:instruction print_integer} {:instruction integer_swap})
Best program: (float_dup_times float_pop float_mult float_yankdup integer_dup_items float_mult float_yankdup float_pop float_mult float_dup_times float_shove float_mult float_mult in2 integer_inc float_yank float_mult 28 integer_add float_pop integer_inc in2 float_max integer_mult float_mult float_yank float_tan integer_inc in2 integer_dup print_float integer_mult float_mult float_pop float_pop float_mult in2 float_mult integer_dup integer_dup float_max integer_inc integer_shove float_min float_rot float_mult float_add float_mult integer_mult integer_dup float_add integer_dup float_add integer_dec integer_mult float_yank float_yankdup float_tan in2 float_max float_rot float_mod in2 integer_dup integer_pop integer_dec float_cos float_frominteger integer_swap integer_mod integer_dup 80 integer_mod integer_dup print_float print_float float_frominteger print_integer integer_sub integer_inc integer_max -86 float_shove float_mult integer_max float_dup float_sub integer_mult integer_shove print_integer integer_shove print_integer integer_swap)
Errors: [75.0362 8 34.2119 10 49.8114 9 11.52 6 46.787 8 57.7839 8 13.0202 9 95.8478 11 22.5106 9 15.2344 10 55.2703 10 86.9001 7 33.2111 9 6.0932 11 65.9905 9 56.1804 9 13.6023 8 41.282 10 0.0533 8 97.5666 12 41.6537 8 87.374 12 26.2995 8 22.2569 11 90.7212 8]
Total: 1374.2185000000002
Mean: 27.48437
Genome size: 93
Size: 94
Percent parens: 0.011
--- Population Statistics ---
Average total errors in population: 4980.315514500002
Median total errors in population: 1390.2330000000002
Error averages by case: (234.36084020000095 8.79 300.01195189999805 10.492 154.10709350000144 9.802 122.98176030000072 8.639 151.18221429999988 9.415 164.1138019000002 9.986 286.417641700001 9.354 196.9046243999981 11.886 132.4256821999988 10.027 189.60046869999778 10.793 161.94389630000126 10.742 246.51114859999916 9.183 81.1902212000001 9.855 118.94877210000115 11.283 171.68586330000184 10.082 217.00293140000258 10.012 186.12033799999963 9.283 209.48397630000287 10.585 174.51740369999973 8.95 253.42059159999843 12.07 210.90763839999812 9.262 244.57722490000293 12.098 195.51123719999825 9.436 134.00814969999826 11.142 189.98704270000022 9.226)
Error minima by case: (74.036 7 2.117 8 9.176 9 2.4959 5 32.2385 8 9.6873 8 1.8901 7 20.7862 9 10.4434 8 14.2124 8 9.7774 9 85.9001 7 8.1827 6 5.0262 8 20.026 7 55.1805 9 12.5364 8 7.7174 8 0.0521 6 15.4739 8 10.3464 8 6.3283 8 25.2239 8 21.189 8 30.7431 8)
Average genome size in population (length): 88.255
Average program size in population (points): 89.255
Average percent parens in population: 0.011
Minimum age in population: 230.0856198553652
Maximum age in population: 234.5362288270545
Average age in population: 232.4924458442209
Median age in population: 232.5424648707996
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 4
Genome diversity (% unique Plush genomes):	 0.904
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 4
Syntactic diversity (% unique Push programs):	 0.904
Total error diversity:				 0.396
Error (vector) diversity:			 0.409
Behavioral diversity:				 0.41
--- Run Statistics ---
Number of program evaluations used so far: 168000
Number of point (instruction) evaluations so far: 312156340
--- Timings ---
Current time: 1529615582764 milliseconds
Total Time:         688.7 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       257.0 seconds, 37.3%
Fitness Testing:    343.4 seconds, 49.9%
Report:              88.2 seconds, 12.8%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 167
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 168
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 168
;;******************************
;; -*- Number IO problem report - generation 168
Test total error for best: 59649.734300000026
Test mean error for best: 29.82487
;;------------------------------
Outputs of best individual on training cases:
Correct output: -116.076402553 | Program output: -41.0401600   
Correct output: 24.1400847456  | Program output: -10.07181     
Correct output: 69.833290954   | Program output: 20.0219241    
Correct output: 82.4958592801  | Program output: 94.015857281  
Correct output: 34.2385110874  | Program output: 81.02551287   
Correct output: -10.7358110665 | Program output: 47.048110545  
Correct output: 1.9700532093   | Program output: -11.050100    
Correct output: -44.7956976677 | Program output: 51.052140557  
Correct output: 68.5576547673  | Program output: 46.047103777  
Correct output: -69.2536523379 | Program output: -54.0192809   
Correct output: -14.2275745396 | Program output: 41.04274047   
Correct output: -171.9767905886 | Program output: -85.0767056   
Correct output: -32.1846093265 | Program output: 1.0265        
Correct output: 66.9812146721  | Program output: 73.074405151  
Correct output: 100.0259781081 | Program output: 34.03542841   
Correct output: -90.2595503995 | Program output: -34.0791089   
Correct output: -82.4635707651 | Program output: -96.0659025   
Correct output: -8.7492896214  | Program output: -50.0312401   
Correct output: -82.1329348831 | Program output: -82.0796561   
Correct output: 24.5261129925  | Program output: -73.0405184   
Correct output: -11.4065589042 | Program output: -53.0602704   
Correct output: 10.3282540908  | Program output: -77.045776    
Correct output: -51.7760580299 | Program output: -78.0755929   
Correct output: 51.8185003253  | Program output: 74.075421801  
Correct output: 110.7431489201 | Program output: 20.0219241    
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_flush} {:instruction float_cos} {:instruction integer_dup_times} {:instruction tag_float_309} {:instruction float_shove} {:instruction float_pop} {:instruction float_mult} {:instruction in2} {:instruction integer_inc} {:instruction float_yank} {:instruction float_mult} {:instruction 28} {:instruction integer_add} {:instruction float_tan} {:instruction integer_inc} {:instruction in2} {:instruction float_max} {:instruction integer_mult} {:instruction integer_mult} {:instruction float_mult} {:instruction integer_inc} {:instruction in2} {:instruction integer_dup} {:instruction print_float} {:instruction integer_mult} {:instruction float_mult} {:instruction float_pop} {:instruction float_mult} {:instruction float_mult} {:instruction in2} {:instruction float_mult} {:instruction float_sub} {:instruction float_flush} {:instruction float_mult} {:instruction integer_dup} {:instruction integer_dup} {:instruction tagged_426} {:instruction integer_dec} {:instruction integer_shove} {:instruction float_mult} {:instruction float_min} {:instruction float_mult} {:instruction integer_mult} {:instruction integer_dup} {:instruction float_add} {:instruction integer_dup} {:instruction float_add} {:instruction integer_dec} {:instruction integer_mult} {:instruction float_mult} {:instruction float_yankdup} {:instruction float_mult} {:instruction in2} {:instruction in2} {:instruction float_yankdup} {:instruction integer_dec} {:instruction float_add} {:instruction float_frominteger} {:instruction integer_swap} {:instruction integer_mod} {:instruction integer_dup} {:instruction 80} {:instruction integer_mod} {:instruction integer_dup} {:instruction print_float} {:instruction float_frominteger} {:instruction print_integer} {:instruction integer_sub} {:instruction integer_inc} {:instruction integer_max} {:instruction integer_stackdepth} {:instruction integer_inc} {:instruction integer_max} {:instruction integer_stackdepth} {:instruction float_shove} {:instruction float_mult} {:instruction integer_max} {:instruction float_dup} {:instruction float_inc} {:instruction integer_max} {:instruction float_dup} {:instruction float_inc} {:instruction integer_shove} {:instruction print_integer})
Best program: (float_flush float_cos integer_dup_times tag_float_309 float_shove float_pop float_mult in2 integer_inc float_yank float_mult 28 integer_add float_tan integer_inc in2 float_max integer_mult integer_mult float_mult integer_inc in2 integer_dup print_float integer_mult float_mult float_pop float_mult float_mult in2 float_mult float_sub float_flush float_mult integer_dup integer_dup tagged_426 integer_dec integer_shove float_mult float_min float_mult integer_mult integer_dup float_add integer_dup float_add integer_dec integer_mult float_mult float_yankdup float_mult in2 in2 float_yankdup integer_dec float_add float_frominteger integer_swap integer_mod integer_dup 80 integer_mod integer_dup print_float float_frominteger print_integer integer_sub integer_inc integer_max integer_stackdepth integer_inc integer_max integer_stackdepth float_shove float_mult integer_max float_dup float_inc integer_max float_dup float_inc integer_shove print_integer)
Errors: [75.0362 8 34.2119 10 49.8114 9 11.52 6 46.787 8 57.7839 8 13.0202 9 95.8478 11 22.5106 9 15.2344 10 55.2703 10 86.9001 7 33.2111 9 6.0932 11 65.9905 9 56.1804 9 13.6023 8 41.282 10 0.0533 8 97.5666 12 41.6537 8 87.374 12 26.2995 8 22.2569 11 90.7212 8]
Total: 1374.2185000000002
Mean: 27.48437
Genome size: 84
Size: 85
Percent parens: 0.012
--- Population Statistics ---
Average total errors in population: 5491.845157399997
Median total errors in population: 1386.2296000000001
Error averages by case: (257.4122259000014 8.858 308.5257511999978 10.57 172.269547900002 9.807 142.16118520000066 8.541 170.36677800000012 9.406 181.40663880000076 9.963 294.81273950000036 9.467 214.4559916999983 11.888 151.3328905999993 10.001 214.5725495999976 10.835 179.26941810000142 10.761 270.1673823 9.252 107.0803315 9.941 137.31199080000115 11.33 188.92044090000243 10.083 240.3786810000028 10.055 211.4368572000001 9.307 234.32582830000274 10.622 201.6651304999998 8.996 276.624247999999 12.172 234.13821499999813 9.287 269.34683700000323 12.145 222.2045564999982 9.444 151.1046211999987 11.186 207.41632070000043 9.221)
Error minima by case: (74.0362 7 1.3738 8 19.8121 8 10.52 6 11.4722 8 9.731 8 0.9701 7 44.8009 8 7.4898 6 14.2344 8 13.2234 8 85.8966 7 31.1781 8 5.0932 8 35.9906 8 55.1804 8 12.5374 8 6.74 8 0.0527 7 1.7598 8 10.4054 7 5.6752 8 25.2249 8 21.2569 8 60.7219 7)
Average genome size in population (length): 88.066
Average program size in population (points): 89.066
Average percent parens in population: 0.011
Minimum age in population: 231.2975557520858
Maximum age in population: 236.0612518402698
Average age in population: 233.8769560033957
Median age in population: 233.8948205497241
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 8
Genome diversity (% unique Plush genomes):	 0.883
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 8
Syntactic diversity (% unique Push programs):	 0.883
Total error diversity:				 0.407
Error (vector) diversity:			 0.425
Behavioral diversity:				 0.426
--- Run Statistics ---
Number of program evaluations used so far: 169000
Number of point (instruction) evaluations so far: 314358015
--- Timings ---
Current time: 1529615587024 milliseconds
Total Time:         693.0 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       258.5 seconds, 37.3%
Fitness Testing:    345.6 seconds, 49.9%
Report:              88.7 seconds, 12.8%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 168
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 169
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 169
;;******************************
;; -*- Number IO problem report - generation 169
Test total error for best: 63866.66699999995
Test mean error for best: 31.93333
;;------------------------------
Outputs of best individual on training cases:
Correct output: -116.076402553 | Program output: -41.0401600   
Correct output: 24.1400847456  | Program output: -10.07181     
Correct output: 69.833290954   | Program output: 47.001800894081
Correct output: 82.4958592801  | Program output: 0.001000000000000
Correct output: 34.2385110874  | Program output: -2.001000000000000
Correct output: -10.7358110665 | Program output: -4.00587063033904
Correct output: 1.9700532093   | Program output: -11.050100    
Correct output: -44.7956976677 | Program output: 0.001000000000000
Correct output: 68.5576547673  | Program output: 20.00506618240829
Correct output: -69.2536523379 | Program output: -54.0192809   
Correct output: -14.2275745396 | Program output: -1.00230536221594
Correct output: -171.9767905886 | Program output: -85.0767056   
Correct output: -32.1846093265 | Program output: -1.001710     
Correct output: 66.9812146721  | Program output: -1.001000000000000
Correct output: 100.0259781081 | Program output: 101.0064337796285
Correct output: -90.2595503995 | Program output: -34.0791089   
Correct output: -82.4635707651 | Program output: -96.0659025   
Correct output: -8.7492896214  | Program output: -50.0312401   
Correct output: -82.1329348831 | Program output: -82.0796561   
Correct output: 24.5261129925  | Program output: -73.0405184   
Correct output: -11.4065589042 | Program output: -53.0602704   
Correct output: 10.3282540908  | Program output: -77.045776    
Correct output: -51.7760580299 | Program output: -78.0755929   
Correct output: 51.8185003253  | Program output: -1.001000000000000
Correct output: 110.7431489201 | Program output: 88.001800894081
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_yankdup} {:instruction float_cos} {:instruction float_mult} {:instruction float_yankdup} {:instruction float_pop} {:instruction float_mult} {:instruction float_dup_times} {:instruction float_shove} {:instruction float_pop} {:instruction float_mult} {:instruction in2} {:instruction integer_inc} {:instruction float_yank} {:instruction float_mult} {:instruction in1} {:instruction float_dup_times} {:instruction float_mult} {:instruction 28} {:instruction integer_add} {:instruction float_pop} {:instruction integer_inc} {:instruction in2} {:instruction float_max} {:instruction float_rot} {:instruction float_dup_times} {:instruction integer_mult} {:instruction float_mult} {:instruction tag_float_282} {:instruction integer_max} {:instruction integer_inc} {:instruction in2} {:instruction float_max} {:instruction integer_dup} {:instruction tagged_72} {:instruction integer_mult} {:instruction float_mult} {:instruction float_pop} {:instruction float_sin} {:instruction float_mult} {:instruction in2} {:instruction float_sub} {:instruction float_sub} {:instruction float_mult} {:instruction integer_dup} {:instruction integer_dup} {:instruction tagged_426} {:instruction tagged_496} {:instruction integer_shove} {:instruction float_mult} {:instruction float_min} {:instruction float_mult} {:instruction integer_mult} {:instruction integer_dup} {:instruction float_add} {:instruction integer_dup} {:instruction float_add} {:instruction integer_dec} {:instruction integer_mult} {:instruction float_mult} {:instruction float_tan} {:instruction float_tan} {:instruction in2} {:instruction float_max} {:instruction in2} {:instruction integer_fromfloat} {:instruction integer_dup} {:instruction integer_pop} {:instruction integer_dec} {:instruction float_cos} {:instruction float_frominteger} {:instruction integer_swap} {:instruction integer_mod} {:instruction integer_dup} {:instruction 80} {:instruction integer_mod} {:instruction integer_dup} {:instruction print_float} {:instruction float_frominteger} {:instruction print_integer} {:instruction integer_sub} {:instruction integer_inc} {:instruction integer_max} {:instruction integer_stackdepth} {:instruction float_shove} {:instruction float_mult} {:instruction integer_max} {:instruction float_min} {:instruction float_inc} {:instruction integer_mult} {:instruction integer_shove} {:instruction print_integer} {:instruction integer_swap})
Best program: (float_yankdup float_cos float_mult float_yankdup float_pop float_mult float_dup_times float_shove float_pop float_mult in2 integer_inc float_yank float_mult in1 float_dup_times float_mult 28 integer_add float_pop integer_inc in2 float_max float_rot float_dup_times integer_mult float_mult tag_float_282 integer_max integer_inc in2 float_max integer_dup tagged_72 integer_mult float_mult float_pop float_sin float_mult in2 float_sub float_sub float_mult integer_dup integer_dup tagged_426 tagged_496 integer_shove float_mult float_min float_mult integer_mult integer_dup float_add integer_dup float_add integer_dec integer_mult float_mult float_tan float_tan in2 float_max in2 integer_fromfloat integer_dup integer_pop integer_dec float_cos float_frominteger integer_swap integer_mod integer_dup 80 integer_mod integer_dup print_float float_frominteger print_integer integer_sub integer_inc integer_max integer_stackdepth float_shove float_mult integer_max float_min float_inc integer_mult integer_shove print_integer integer_swap)
Errors: [75.0362 8 34.2119 10 22.8315 12 82.4949 16 36.2395 16 6.7299 13 13.0202 9 44.7967 17 48.5526 13 15.2344 10 13.2253 12 86.9001 7 31.1829 11 67.9822 16 0.9805 11 56.1804 9 13.6023 8 41.282 10 0.0533 8 97.5666 12 41.6537 8 87.374 12 26.2995 8 52.8195 13 22.7413 11]
Total: 1298.9914
Mean: 25.979828
Genome size: 92
Size: 93
Percent parens: 0.011
--- Population Statistics ---
Average total errors in population: 5057.288062099999
Median total errors in population: 1385.22755
Error averages by case: (233.36812220000095 8.818 279.4052744999982 10.507 162.26399680000142 9.783 133.0801506000006 8.555 162.71961889999977 9.415 172.5310361000001 9.949 266.81212779999964 9.379 205.8942806999986 11.908 142.15793009999942 10.053 188.15546029999882 10.784 169.93504820000095 10.78 248.30498259999933 9.064 91.82037850000002 9.855 127.0841527000011 11.382 179.97686190000164 10.062 217.70349090000119 9.978 188.16466829999965 9.24 208.73136700000265 10.581 177.1448394999997 8.984 255.88026469999923 12.103 209.32309109999827 9.221 246.5425667000023 12.073 198.15372419999846 9.37 142.01175819999855 11.235 197.8188696000004 9.225)
Error minima by case: (35.0748 6 4.8862 7 21.0 5 10.5193 5 14.9846 8 6.7299 5 0.9701 6 44.6986 5 21.5085 5 14.1733 7 13.2253 5 2.9696 7 2.0 4 5.0911 8 0.9805 6 23.2584 6 12.5364 8 8.7493 8 0.0527 6 5.2722 7 11.0106 8 7.2825 7 25.2239 8 21.2518 9 10.2569 6)
Average genome size in population (length): 88.566
Average program size in population (points): 89.566
Average percent parens in population: 0.011
Minimum age in population: 232.4871299471907
Maximum age in population: 237.2241775801035
Average age in population: 235.2498737257711
Median age in population: 235.2927132987508
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 6
Genome diversity (% unique Plush genomes):	 0.882
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 6
Syntactic diversity (% unique Push programs):	 0.882
Total error diversity:				 0.414
Error (vector) diversity:			 0.427
Behavioral diversity:				 0.427
--- Run Statistics ---
Number of program evaluations used so far: 170000
Number of point (instruction) evaluations so far: 316572226
--- Timings ---
Current time: 1529615591998 milliseconds
Total Time:         697.7 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       260.1 seconds, 37.3%
Fitness Testing:    348.2 seconds, 49.9%
Report:              89.3 seconds, 12.8%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 169
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 170
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 170
;;******************************
;; -*- Number IO problem report - generation 170
Test total error for best: 63866.66699999995
Test mean error for best: 31.93333
;;------------------------------
Outputs of best individual on training cases:
Correct output: -116.076402553 | Program output: -41.0401600   
Correct output: 24.1400847456  | Program output: -10.07181     
Correct output: 69.833290954   | Program output: 47.001800894081
Correct output: 82.4958592801  | Program output: 0.001000000000000
Correct output: 34.2385110874  | Program output: -2.001000000000000
Correct output: -10.7358110665 | Program output: -4.00587063033904
Correct output: 1.9700532093   | Program output: -11.050100    
Correct output: -44.7956976677 | Program output: 0.001000000000000
Correct output: 68.5576547673  | Program output: 20.00506618240829
Correct output: -69.2536523379 | Program output: -54.0192809   
Correct output: -14.2275745396 | Program output: -1.00230536221594
Correct output: -171.9767905886 | Program output: -85.0767056   
Correct output: -32.1846093265 | Program output: -1.001710     
Correct output: 66.9812146721  | Program output: -1.001000000000000
Correct output: 100.0259781081 | Program output: 101.0064337796285
Correct output: -90.2595503995 | Program output: -34.0791089   
Correct output: -82.4635707651 | Program output: -96.0659025   
Correct output: -8.7492896214  | Program output: -50.0312401   
Correct output: -82.1329348831 | Program output: -82.0796561   
Correct output: 24.5261129925  | Program output: -73.0405184   
Correct output: -11.4065589042 | Program output: -53.0602704   
Correct output: 10.3282540908  | Program output: -77.045776    
Correct output: -51.7760580299 | Program output: -78.0755929   
Correct output: 51.8185003253  | Program output: -1.001000000000000
Correct output: 110.7431489201 | Program output: 88.001800894081
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_yankdup} {:instruction float_cos} {:instruction float_mult} {:instruction float_yankdup} {:instruction float_pop} {:instruction float_mult} {:instruction float_dup_times} {:instruction float_shove} {:instruction float_pop} {:instruction float_mult} {:instruction in2} {:instruction integer_inc} {:instruction float_yank} {:instruction float_mult} {:instruction in1} {:instruction float_dup_times} {:instruction float_mult} {:instruction 28} {:instruction integer_add} {:instruction float_pop} {:instruction integer_inc} {:instruction in2} {:instruction float_max} {:instruction float_rot} {:instruction float_dup_times} {:instruction integer_mult} {:instruction float_mult} {:instruction tag_float_282} {:instruction integer_max} {:instruction integer_inc} {:instruction in2} {:instruction float_max} {:instruction integer_dup} {:instruction tagged_72} {:instruction integer_mult} {:instruction float_mult} {:instruction float_pop} {:instruction float_sin} {:instruction float_mult} {:instruction in2} {:instruction float_sub} {:instruction float_sub} {:instruction float_mult} {:instruction integer_dup} {:instruction integer_dup} {:instruction tagged_426} {:instruction tagged_496} {:instruction integer_shove} {:instruction float_mult} {:instruction float_min} {:instruction float_mult} {:instruction integer_mult} {:instruction integer_dup} {:instruction float_add} {:instruction integer_dup} {:instruction float_add} {:instruction integer_dec} {:instruction integer_mult} {:instruction float_mult} {:instruction float_tan} {:instruction float_tan} {:instruction in2} {:instruction float_max} {:instruction in2} {:instruction integer_fromfloat} {:instruction integer_dup} {:instruction integer_pop} {:instruction integer_dec} {:instruction float_cos} {:instruction float_frominteger} {:instruction integer_swap} {:instruction integer_mod} {:instruction integer_dup} {:instruction 80} {:instruction integer_mod} {:instruction integer_dup} {:instruction print_float} {:instruction float_frominteger} {:instruction print_integer} {:instruction integer_sub} {:instruction integer_inc} {:instruction integer_max} {:instruction integer_stackdepth} {:instruction float_shove} {:instruction float_mult} {:instruction integer_max} {:instruction float_min} {:instruction float_inc} {:instruction integer_mult} {:instruction integer_shove} {:instruction print_integer} {:instruction integer_swap})
Best program: (float_yankdup float_cos float_mult float_yankdup float_pop float_mult float_dup_times float_shove float_pop float_mult in2 integer_inc float_yank float_mult in1 float_dup_times float_mult 28 integer_add float_pop integer_inc in2 float_max float_rot float_dup_times integer_mult float_mult tag_float_282 integer_max integer_inc in2 float_max integer_dup tagged_72 integer_mult float_mult float_pop float_sin float_mult in2 float_sub float_sub float_mult integer_dup integer_dup tagged_426 tagged_496 integer_shove float_mult float_min float_mult integer_mult integer_dup float_add integer_dup float_add integer_dec integer_mult float_mult float_tan float_tan in2 float_max in2 integer_fromfloat integer_dup integer_pop integer_dec float_cos float_frominteger integer_swap integer_mod integer_dup 80 integer_mod integer_dup print_float float_frominteger print_integer integer_sub integer_inc integer_max integer_stackdepth float_shove float_mult integer_max float_min float_inc integer_mult integer_shove print_integer integer_swap)
Errors: [75.0362 8 34.2119 10 22.8315 12 82.4949 16 36.2395 16 6.7299 13 13.0202 9 44.7967 17 48.5526 13 15.2344 10 13.2253 12 86.9001 7 31.1829 11 67.9822 16 0.9805 11 56.1804 9 13.6023 8 41.282 10 0.0533 8 97.5666 12 41.6537 8 87.374 12 26.2995 8 52.8195 13 22.7413 11]
Total: 1298.9914
Mean: 25.979828
Genome size: 92
Size: 93
Percent parens: 0.011
--- Population Statistics ---
Average total errors in population: 5167.927793899999
Median total errors in population: 1387.2289500000002
Error averages by case: (241.32355320000107 8.885 277.0591183999981 10.537 167.3514754000016 9.857 138.48951070000032 8.564 165.03624829999973 9.471 176.10198690000024 9.984 263.04089889999955 9.4 209.19358529999877 11.979 146.26226439999934 10.083 194.52806279999842 10.821 173.97918160000106 10.79 253.67094609999933 9.122 95.73119949999995 9.856 132.39459260000112 11.43 183.66401460000182 10.086 226.20338290000174 10.054 193.67641619999966 9.309 214.63004220000255 10.655 182.85696579999964 9.064 260.0074948999988 12.208 215.19859889999833 9.282 251.70584430000244 12.18 203.48670699999835 9.443 146.11516919999877 11.247 202.68453380000037 9.229)
Error minima by case: (31.1208 7 1.1401 5 10.1667 7 2.4959 5 32.213 7 6.7299 6 0.9701 5 40.1599 9 11.4423 8 14.1748 7 12.2234 8 2.9723 6 2.0 4 5.0932 8 0.9805 7 5.304 7 2.492 8 7.718 8 0.0329 6 15.4739 7 10.3463 7 6.2825 7 25.2239 7 21.2569 8 21.0 7)
Average genome size in population (length): 88.717
Average program size in population (points): 89.717
Average percent parens in population: 0.011
Minimum age in population: 234.2747513233311
Maximum age in population: 238.5744009219422
Average age in population: 236.6022811378878
Median age in population: 236.6267800538251
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 7
Genome diversity (% unique Plush genomes):	 0.888
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 7
Syntactic diversity (% unique Push programs):	 0.888
Total error diversity:				 0.417
Error (vector) diversity:			 0.428
Behavioral diversity:				 0.429
--- Run Statistics ---
Number of program evaluations used so far: 171000
Number of point (instruction) evaluations so far: 318790343
--- Timings ---
Current time: 1529615596405 milliseconds
Total Time:         702.3 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       261.6 seconds, 37.3%
Fitness Testing:    350.4 seconds, 49.9%
Report:              90.1 seconds, 12.8%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 170
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 171
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 171
;;******************************
;; -*- Number IO problem report - generation 171
Test total error for best: 63866.66699999994
Test mean error for best: 31.93333
;;------------------------------
Outputs of best individual on training cases:
Correct output: -116.076402553 | Program output: -41.0401600   
Correct output: 24.1400847456  | Program output: -10.07181     
Correct output: 69.833290954   | Program output: 47.001800894081
Correct output: 82.4958592801  | Program output: 0.001000000000000
Correct output: 34.2385110874  | Program output: -2.001000000000000
Correct output: -10.7358110665 | Program output: -4.00587063033904
Correct output: 1.9700532093   | Program output: -11.050100    
Correct output: -44.7956976677 | Program output: 0.001000000000000
Correct output: 68.5576547673  | Program output: 20.00506618240829
Correct output: -69.2536523379 | Program output: -54.0192809   
Correct output: -14.2275745396 | Program output: -1.00230536221594
Correct output: -171.9767905886 | Program output: -85.0767056   
Correct output: -32.1846093265 | Program output: -1.001653     
Correct output: 66.9812146721  | Program output: -1.001000000000000
Correct output: 100.0259781081 | Program output: 101.0064337796285
Correct output: -90.2595503995 | Program output: -34.0791089   
Correct output: -82.4635707651 | Program output: -96.0659025   
Correct output: -8.7492896214  | Program output: -50.0312401   
Correct output: -82.1329348831 | Program output: -82.0796561   
Correct output: 24.5261129925  | Program output: -73.0405184   
Correct output: -11.4065589042 | Program output: -53.0602704   
Correct output: 10.3282540908  | Program output: -77.045776    
Correct output: -51.7760580299 | Program output: -78.0755929   
Correct output: 51.8185003253  | Program output: -1.001000000000000
Correct output: 110.7431489201 | Program output: 88.001800894081
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_yankdup} {:instruction float_cos} {:instruction float_mult} {:instruction float_yankdup} {:instruction float_pop} {:instruction float_mult} {:instruction float_dup_times} {:instruction float_shove} {:instruction float_pop} {:instruction float_mult} {:instruction in2} {:instruction integer_inc} {:instruction float_yank} {:instruction float_mult} {:instruction in1} {:instruction float_dup_times} {:instruction float_mult} {:instruction 28} {:instruction integer_add} {:instruction float_pop} {:instruction integer_inc} {:instruction in2} {:instruction float_max} {:instruction float_rot} {:instruction float_dup_times} {:instruction integer_mult} {:instruction float_mult} {:instruction tag_float_282} {:instruction integer_max} {:instruction float_inc} {:instruction in2} {:instruction float_max} {:instruction integer_dup} {:instruction tagged_72} {:instruction integer_mult} {:instruction float_mult} {:instruction float_pop} {:instruction float_sin} {:instruction float_mult} {:instruction in2} {:instruction float_sub} {:instruction float_sub} {:instruction float_mult} {:instruction integer_dup} {:instruction integer_dup} {:instruction tagged_426} {:instruction tagged_496} {:instruction integer_shove} {:instruction float_mult} {:instruction float_min} {:instruction float_mult} {:instruction integer_mult} {:instruction integer_dup} {:instruction float_add} {:instruction integer_dup} {:instruction float_add} {:instruction integer_dec} {:instruction integer_mult} {:instruction float_mult} {:instruction float_tan} {:instruction float_tan} {:instruction in2} {:instruction float_max} {:instruction in2} {:instruction integer_fromfloat} {:instruction integer_dup} {:instruction integer_pop} {:instruction integer_dec} {:instruction float_cos} {:instruction float_frominteger} {:instruction integer_swap} {:instruction integer_mod} {:instruction integer_dup} {:instruction 80} {:instruction integer_mod} {:instruction integer_dup} {:instruction print_float} {:instruction float_frominteger} {:instruction print_integer} {:instruction integer_sub} {:instruction integer_inc} {:instruction integer_max} {:instruction integer_stackdepth} {:instruction float_shove} {:instruction float_mult} {:instruction integer_max} {:instruction float_min} {:instruction float_inc} {:instruction integer_mult} {:instruction integer_shove} {:instruction print_integer} {:instruction integer_swap})
Best program: (float_yankdup float_cos float_mult float_yankdup float_pop float_mult float_dup_times float_shove float_pop float_mult in2 integer_inc float_yank float_mult in1 float_dup_times float_mult 28 integer_add float_pop integer_inc in2 float_max float_rot float_dup_times integer_mult float_mult tag_float_282 integer_max float_inc in2 float_max integer_dup tagged_72 integer_mult float_mult float_pop float_sin float_mult in2 float_sub float_sub float_mult integer_dup integer_dup tagged_426 tagged_496 integer_shove float_mult float_min float_mult integer_mult integer_dup float_add integer_dup float_add integer_dec integer_mult float_mult float_tan float_tan in2 float_max in2 integer_fromfloat integer_dup integer_pop integer_dec float_cos float_frominteger integer_swap integer_mod integer_dup 80 integer_mod integer_dup print_float float_frominteger print_integer integer_sub integer_inc integer_max integer_stackdepth float_shove float_mult integer_max float_min float_inc integer_mult integer_shove print_integer integer_swap)
Errors: [75.0362 8 34.2119 10 22.8315 12 82.4949 16 36.2395 16 6.7299 13 13.0202 9 44.7967 17 48.5526 13 15.2344 10 13.2253 12 86.9001 7 31.183 10 67.9822 16 0.9805 11 56.1804 9 13.6023 8 41.282 10 0.0533 8 97.5666 12 41.6537 8 87.374 12 26.2995 8 52.8195 13 22.7413 11]
Total: 1297.9915
Mean: 25.95983
Genome size: 92
Size: 93
Percent parens: 0.011
--- Population Statistics ---
Average total errors in population: 5349.5421544
Median total errors in population: 1390.2241000000001
Error averages by case: (255.19733160000098 8.758 302.5967481999981 10.475 165.02588800000137 9.816 137.53287680000068 8.63 163.3572471999996 9.477 175.17849520000007 10.018 287.1074729000002 9.341 208.38619149999874 11.941 146.25135829999908 10.018 212.07562949999837 10.731 173.9354278000011 10.789 265.64308569999974 9.069 92.26295990000003 9.887 131.4668111000009 11.32 183.15638760000147 10.118 238.86744990000187 9.988 206.27137969999973 9.221 231.5907275000025 10.547 194.63167279999973 8.873 270.7051780999989 12.097 232.34994179999836 9.22 262.4601006000026 12.058 214.05236639999845 9.365 146.12491329999824 11.172 201.13751300000035 9.248)
Error minima by case: (59.0362 7 2.1401 8 9.1688 8 2.4873 5 23.1817 8 6.7299 6 0.9701 7 12.2564 9 10.447 8 12.2344 8 13.1848 9 85.9001 6 24.8419 5 5.0228 8 0.9752 8 33.1804 9 12.5364 8 7.718 8 0.0523 6 14.5462 8 10.3463 7 4.3225 8 5.2995 7 21.1857 8 10.2569 8)
Average genome size in population (length): 88.747
Average program size in population (points): 89.747
Average percent parens in population: 0.011
Minimum age in population: 235.4453401428977
Maximum age in population: 240.0928694728731
Average age in population: 237.9361265759091
Median age in population: 237.9402053978206
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 10
Genome diversity (% unique Plush genomes):	 0.878
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 10
Syntactic diversity (% unique Push programs):	 0.878
Total error diversity:				 0.419
Error (vector) diversity:			 0.429
Behavioral diversity:				 0.433
--- Run Statistics ---
Number of program evaluations used so far: 172000
Number of point (instruction) evaluations so far: 321009480
--- Timings ---
Current time: 1529615601312 milliseconds
Total Time:         707.0 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       263.2 seconds, 37.2%
Fitness Testing:    352.8 seconds, 49.9%
Report:              90.8 seconds, 12.8%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 171
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 172
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 172
;;******************************
;; -*- Number IO problem report - generation 172
Test total error for best: 57528.13340000004
Test mean error for best: 28.76407
;;------------------------------
Outputs of best individual on training cases:
Correct output: -116.076402553 | Program output: -41.001       
Correct output: 24.1400847456  | Program output: -10.011       
Correct output: 69.833290954   | Program output: 47.0601       
Correct output: 82.4958592801  | Program output: 0.0501        
Correct output: 34.2385110874  | Program output: -2.0561       
Correct output: -10.7358110665 | Program output: -4.0321       
Correct output: 1.9700532093   | Program output: -11.0201      
Correct output: -44.7956976677 | Program output: 0.0161        
Correct output: 68.5576547673  | Program output: 20.0661       
Correct output: -69.2536523379 | Program output: -54.091       
Correct output: -14.2275745396 | Program output: -1.0561       
Correct output: -171.9767905886 | Program output: -85.0161      
Correct output: -32.1846093265 | Program output: -1.0561       
Correct output: 66.9812146721  | Program output: -1.0721       
Correct output: 100.0259781081 | Program output: 101.0301      
Correct output: -90.2595503995 | Program output: -34.0491      
Correct output: -82.4635707651 | Program output: -96.0651      
Correct output: -8.7492896214  | Program output: -50.011       
Correct output: -82.1329348831 | Program output: -82.011       
Correct output: 24.5261129925  | Program output: -73.0641      
Correct output: -11.4065589042 | Program output: -53.0641      
Correct output: 10.3282540908  | Program output: -77.0161      
Correct output: -51.7760580299 | Program output: -78.091       
Correct output: 51.8185003253  | Program output: -1.0701       
Correct output: 110.7431489201 | Program output: 88.0601       
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_yankdup} {:instruction float_cos} {:instruction float_mult} {:instruction float_yankdup} {:instruction float_pop} {:instruction float_mult} {:instruction float_dup_times} {:instruction float_shove} {:instruction float_pop} {:instruction float_mult} {:instruction in2} {:instruction integer_inc} {:instruction float_yank} {:instruction float_mult} {:instruction in1} {:instruction float_dup_times} {:instruction float_mult} {:instruction 28} {:instruction integer_add} {:instruction float_pop} {:instruction integer_inc} {:instruction in2} {:instruction float_max} {:instruction float_rot} {:instruction float_dup_times} {:instruction integer_mult} {:instruction float_mult} {:instruction tag_float_282} {:instruction integer_max} {:instruction integer_inc} {:instruction in2} {:instruction float_max} {:instruction integer_dup} {:instruction tagged_72} {:instruction integer_mult} {:instruction float_mult} {:instruction float_pop} {:instruction float_sin} {:instruction float_mult} {:instruction in2} {:instruction float_sub} {:instruction float_sub} {:instruction float_mult} {:instruction integer_dup} {:instruction integer_dup} {:instruction tagged_426} {:instruction tagged_496} {:instruction integer_shove} {:instruction float_mult} {:instruction float_min} {:instruction float_mult} {:instruction integer_mult} {:instruction integer_dup} {:instruction float_add} {:instruction integer_dup} {:instruction float_add} {:instruction integer_dec} {:instruction integer_mult} {:instruction float_mult} {:instruction float_tan} {:instruction float_tan} {:instruction in2} {:instruction float_max} {:instruction in2} {:instruction integer_fromfloat} {:instruction integer_dup} {:instruction integer_pop} {:instruction integer_dec} {:instruction float_cos} {:instruction float_frominteger} {:instruction integer_swap} {:instruction integer_mod} {:instruction integer_dup_items} {:instruction 80} {:instruction integer_mod} {:instruction integer_dup} {:instruction print_float} {:instruction float_frominteger} {:instruction print_integer} {:instruction integer_sub} {:instruction integer_inc} {:instruction integer_max} {:instruction integer_stackdepth} {:instruction float_shove} {:instruction float_mult} {:instruction integer_max} {:instruction float_min} {:instruction float_inc} {:instruction integer_mult} {:instruction integer_stackdepth} {:instruction print_integer} {:instruction integer_swap})
Best program: (float_yankdup float_cos float_mult float_yankdup float_pop float_mult float_dup_times float_shove float_pop float_mult in2 integer_inc float_yank float_mult in1 float_dup_times float_mult 28 integer_add float_pop integer_inc in2 float_max float_rot float_dup_times integer_mult float_mult tag_float_282 integer_max integer_inc in2 float_max integer_dup tagged_72 integer_mult float_mult float_pop float_sin float_mult in2 float_sub float_sub float_mult integer_dup integer_dup tagged_426 tagged_496 integer_shove float_mult float_min float_mult integer_mult integer_dup float_add integer_dup float_add integer_dec integer_mult float_mult float_tan float_tan in2 float_max in2 integer_fromfloat integer_dup integer_pop integer_dec float_cos float_frominteger integer_swap integer_mod integer_dup_items 80 integer_mod integer_dup print_float float_frominteger print_integer integer_sub integer_inc integer_max integer_stackdepth float_shove float_mult integer_max float_min float_inc integer_mult integer_stackdepth print_integer integer_swap)
Errors: [75.0754 9 34.1511 11 22.7732 10 82.4458 9 36.2946 10 6.7037 10 12.9902 9 44.8118 12 48.4916 10 15.1627 12 13.1715 10 86.9607 12 31.1285 10 68.0533 9 1.0041 8 56.2105 10 13.6015 8 41.2617 11 0.1219 9 97.5902 11 41.6575 9 87.3444 12 26.3149 10 52.8886 10 22.683 11]
Total: 1270.8924
Mean: 25.417849
Genome size: 92
Size: 93
Percent parens: 0.011
--- Population Statistics ---
Average total errors in population: 5505.4129687
Median total errors in population: 1395.2513000000001
Error averages by case: (262.819686900001 8.924 321.7022615999982 10.573 169.18337310000143 9.931 137.6265580000007 8.942 165.7747824999995 9.673 174.26722719999984 10.204 309.93729630000155 9.427 207.37516159999856 12.095 146.5043827999992 10.199 219.01773269999794 10.873 172.19016430000113 10.882 276.3588701000002 9.292 96.75934470000004 10.001 131.82847780000122 11.499 182.72188300000167 10.276 246.94511320000183 10.106 218.05185179999995 9.408 237.0788786000023 10.661 207.10519029999972 9.073 280.37952979999903 12.118 238.6764981999984 9.342 271.8684339000025 12.141 226.4983012999984 9.516 145.3085694999985 11.29 203.57839950000027 9.409)
Error minima by case: (39.0508 7 7.9255 9 10.1667 8 2.4959 5 28.2255 8 6.6552 8 0.969 7 19.8529 9 11.4423 7 4.605 8 10.2261 9 83.927 7 2.8796 7 5.0218 8 0.9759 7 25.6109 8 12.5364 7 7.7181 7 0.0329 6 14.4766 9 10.3462 7 4.2489 9 12.8726 7 21.1847 8 10.2569 7)
Average genome size in population (length): 88.693
Average program size in population (points): 89.693
Average percent parens in population: 0.011
Minimum age in population: 236.4453401428977
Maximum age in population: 241.5488493430903
Average age in population: 239.2842422549632
Median age in population: 239.3028264053614
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 5
Genome diversity (% unique Plush genomes):	 0.891
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 5
Syntactic diversity (% unique Push programs):	 0.891
Total error diversity:				 0.452
Error (vector) diversity:			 0.462
Behavioral diversity:				 0.463
--- Run Statistics ---
Number of program evaluations used so far: 173000
Number of point (instruction) evaluations so far: 323228050
--- Timings ---
Current time: 1529615605867 milliseconds
Total Time:         711.8 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       264.8 seconds, 37.2%
Fitness Testing:    355.2 seconds, 49.9%
Report:              91.6 seconds, 12.9%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 172
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 173
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 173
;;******************************
;; -*- Number IO problem report - generation 173
Test total error for best: 57426.36910000003
Test mean error for best: 28.71318
;;------------------------------
Outputs of best individual on training cases:
Correct output: -116.076402553 | Program output: -41.04015610  
Correct output: 24.1400847456  | Program output: -10.071730    
Correct output: 69.833290954   | Program output: 47.0063922    
Correct output: 82.4958592801  | Program output: 0.00278596    
Correct output: 34.2385110874  | Program output: -2.00240883   
Correct output: -10.7358110665 | Program output: -4.00142249   
Correct output: 1.9700532093   | Program output: -11.050910    
Correct output: -44.7956976677 | Program output: 0.00153853    
Correct output: 68.5576547673  | Program output: 20.00139348   
Correct output: -69.2536523379 | Program output: -54.01927570  
Correct output: -14.2275745396 | Program output: -1.00124843   
Correct output: -171.9767905886 | Program output: -85.07669730  
Correct output: -32.1846093265 | Program output: -1.00289      
Correct output: 66.9812146721  | Program output: -1.00217675   
Correct output: 100.0259781081 | Program output: 101.00104536  
Correct output: -90.2595503995 | Program output: -34.07910570  
Correct output: -82.4635707651 | Program output: -96.06589310  
Correct output: -8.7492896214  | Program output: -50.03123530  
Correct output: -82.1329348831 | Program output: -82.07964810  
Correct output: 24.5261129925  | Program output: -73.04051130  
Correct output: -11.4065589042 | Program output: -53.06026530  
Correct output: 10.3282540908  | Program output: -77.0457010   
Correct output: -51.7760580299 | Program output: -78.07558530  
Correct output: 51.8185003253  | Program output: -1.00220576   
Correct output: 110.7431489201 | Program output: 88.0063922    
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_yankdup} {:instruction float_cos} {:instruction float_mult} {:instruction float_yankdup} {:instruction float_pop} {:instruction float_mult} {:instruction float_dup_times} {:instruction float_shove} {:instruction float_pop} {:instruction float_mult} {:instruction in2} {:instruction integer_inc} {:instruction float_yank} {:instruction float_mult} {:instruction in1} {:instruction float_dup_times} {:instruction float_mult} {:instruction 28} {:instruction integer_add} {:instruction float_pop} {:instruction integer_inc} {:instruction in2} {:instruction float_max} {:instruction float_rot} {:instruction integer_inc} {:instruction in2} {:instruction float_max} {:instruction float_rot} {:instruction float_dup_times} {:instruction integer_mult} {:instruction float_mult} {:instruction tag_float_282} {:instruction integer_max} {:instruction integer_inc} {:instruction in2} {:instruction float_max} {:instruction integer_dup} {:instruction tagged_72} {:instruction integer_mult} {:instruction float_mult} {:instruction float_pop} {:instruction float_sin} {:instruction float_mult} {:instruction in2} {:instruction float_sub} {:instruction float_sub} {:instruction float_mult} {:instruction integer_dup} {:instruction integer_dup} {:instruction tagged_426} {:instruction tagged_496} {:instruction integer_shove} {:instruction float_mult} {:instruction float_min} {:instruction float_mult} {:instruction integer_mult} {:instruction integer_dup} {:instruction float_add} {:instruction integer_dup} {:instruction float_add} {:instruction integer_dec} {:instruction integer_mult} {:instruction float_mult} {:instruction float_tan} {:instruction float_tan} {:instruction in2} {:instruction float_max} {:instruction in2} {:instruction integer_fromfloat} {:instruction integer_dup} {:instruction integer_pop} {:instruction integer_dec} {:instruction float_cos} {:instruction float_frominteger} {:instruction integer_swap} {:instruction integer_mod} {:instruction integer_dup} {:instruction 80} {:instruction integer_mod} {:instruction integer_dup} {:instruction print_float} {:instruction float_frominteger} {:instruction print_integer} {:instruction integer_sub} {:instruction integer_inc} {:instruction integer_max} {:instruction integer_stackdepth} {:instruction float_shove} {:instruction float_mult} {:instruction float_frominteger} {:instruction print_integer} {:instruction integer_sub} {:instruction integer_inc} {:instruction integer_max} {:instruction integer_stackdepth} {:instruction integer_mult} {:instruction integer_shove} {:instruction print_integer} {:instruction integer_swap})
Best program: (float_yankdup float_cos float_mult float_yankdup float_pop float_mult float_dup_times float_shove float_pop float_mult in2 integer_inc float_yank float_mult in1 float_dup_times float_mult 28 integer_add float_pop integer_inc in2 float_max float_rot integer_inc in2 float_max float_rot float_dup_times integer_mult float_mult tag_float_282 integer_max integer_inc in2 float_max integer_dup tagged_72 integer_mult float_mult float_pop float_sin float_mult in2 float_sub float_sub float_mult integer_dup integer_dup tagged_426 tagged_496 integer_shove float_mult float_min float_mult integer_mult integer_dup float_add integer_dup float_add integer_dec integer_mult float_mult float_tan float_tan in2 float_max in2 integer_fromfloat integer_dup integer_pop integer_dec float_cos float_frominteger integer_swap integer_mod integer_dup 80 integer_mod integer_dup print_float float_frominteger print_integer integer_sub integer_inc integer_max integer_stackdepth float_shove float_mult float_frominteger print_integer integer_sub integer_inc integer_max integer_stackdepth integer_mult integer_shove print_integer integer_swap)
Errors: [75.0362 8 34.2118 10 22.8269 10 82.4931 10 36.2409 10 6.7344 11 13.021 9 44.7972 13 48.5563 12 15.2344 10 13.2263 10 86.9001 10 31.1817 10 67.9834 8 0.9751 10 56.1804 10 13.6023 10 41.2819 11 0.0533 7 97.5666 12 41.6537 10 87.374 10 26.2995 9 52.8207 9 22.7368 11]
Total: 1268.9879999999998
Mean: 25.37976
Genome size: 99
Size: 100
Percent parens: 0.010
--- Population Statistics ---
Average total errors in population: 5614.859579600005
Median total errors in population: 1393.2168000000001
Error averages by case: (258.286826200001 8.901 314.8968716999981 10.57 178.05679890000116 10.006 155.93112399999998 9.153 180.73399960000026 9.876 190.98497880000068 10.313 301.66273760000126 9.424 220.9402909999984 12.255 162.39357409999965 10.342 214.29652429999797 10.819 187.90162490000108 10.996 270.8641210999998 9.345 96.22605049999994 9.989 150.69906650000087 11.596 195.36423770000195 10.306 244.08120620000187 10.131 213.60296019999967 9.408 235.25302370000233 10.642 201.76488859999972 9.024 278.317970399999 12.124 235.77958539999855 9.344 270.27177260000263 12.124 223.23190309999848 9.507 164.19170879999916 11.332 212.11873370000032 9.48)
Error minima by case: (35.0748 7 3.1401 5 3.8114 7 2.4959 6 28.1584 7 6.6552 8 0.9701 5 25.7937 9 2.5106 7 14.1748 7 12.2266 8 2.9697 7 2.0 4 0.9068 8 0.974 7 23.2585 7 12.5415 8 7.7483 8 0.0329 6 23.4699 7 10.4056 8 9.3161 7 25.2252 7 4.7932 7 21.0 7)
Average genome size in population (length): 89.128
Average program size in population (points): 90.128
Average percent parens in population: 0.011
Minimum age in population: 237.4453401428977
Maximum age in population: 243.1723728097687
Average age in population: 240.581505528803
Median age in population: 240.6063437525009
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 9
Genome diversity (% unique Plush genomes):	 0.867
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 9
Syntactic diversity (% unique Push programs):	 0.867
Total error diversity:				 0.456
Error (vector) diversity:			 0.466
Behavioral diversity:				 0.467
--- Run Statistics ---
Number of program evaluations used so far: 174000
Number of point (instruction) evaluations so far: 325458522
--- Timings ---
Current time: 1529615610535 milliseconds
Total Time:         716.4 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       266.5 seconds, 37.2%
Fitness Testing:    357.5 seconds, 49.9%
Report:              92.3 seconds, 12.9%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 173
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 174
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 174
;;******************************
;; -*- Number IO problem report - generation 174
Test total error for best: 57920.74990000006
Test mean error for best: 28.96037
;;------------------------------
Outputs of best individual on training cases:
Correct output: -116.076402553 | Program output: -41.0400      
Correct output: 24.1400847456  | Program output: -10.010       
Correct output: 69.833290954   | Program output: 47.00210      
Correct output: 82.4958592801  | Program output: 0.00950       
Correct output: 34.2385110874  | Program output: -2.00820      
Correct output: -10.7358110665 | Program output: -2.00480      
Correct output: 1.9700532093   | Program output: -11.0300      
Correct output: -44.7956976677 | Program output: -10.00520     
Correct output: 68.5576547673  | Program output: 20.00470      
Correct output: -69.2536523379 | Program output: -54.0330      
Correct output: -14.2275745396 | Program output: -1.00420      
Correct output: -171.9767905886 | Program output: -85.0760      
Correct output: -32.1846093265 | Program output: -1.0020       
Correct output: 66.9812146721  | Program output: 4.00740       
Correct output: 100.0259781081 | Program output: 101.00350     
Correct output: -90.2595503995 | Program output: -34.0330      
Correct output: -82.4635707651 | Program output: -96.0650      
Correct output: -8.7492896214  | Program output: -50.010       
Correct output: -82.1329348831 | Program output: -82.010       
Correct output: 24.5261129925  | Program output: -73.0400      
Correct output: -11.4065589042 | Program output: -53.0600      
Correct output: 10.3282540908  | Program output: -77.0360      
Correct output: -51.7760580299 | Program output: -78.0650      
Correct output: 51.8185003253  | Program output: -1.00750      
Correct output: 110.7431489201 | Program output: 88.00210      
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_yankdup} {:instruction float_cos} {:instruction float_mult} {:instruction float_yankdup} {:instruction float_pop} {:instruction float_mult} {:instruction float_dup_times} {:instruction float_shove} {:instruction float_pop} {:instruction float_mult} {:instruction in2} {:instruction integer_inc} {:instruction float_yank} {:instruction float_mult} {:instruction in1} {:instruction float_dup_times} {:instruction float_mult} {:instruction 28} {:instruction integer_add} {:instruction float_pop} {:instruction integer_inc} {:instruction in2} {:instruction float_max} {:instruction float_rot} {:instruction integer_inc} {:instruction in2} {:instruction float_max} {:instruction float_rot} {:instruction float_dup_times} {:instruction integer_mult} {:instruction float_mult} {:instruction tag_float_282} {:instruction integer_max} {:instruction integer_inc} {:instruction in2} {:instruction float_max} {:instruction integer_dup} {:instruction tagged_8} {:instruction integer_mult} {:instruction float_mult} {:instruction float_pop} {:instruction float_sin} {:instruction float_mult} {:instruction in2} {:instruction float_sub} {:instruction float_sub} {:instruction float_mult} {:instruction integer_dup} {:instruction float_max} {:instruction tagged_426} {:instruction tagged_496} {:instruction integer_shove} {:instruction float_mult} {:instruction float_min} {:instruction float_mult} {:instruction integer_mult} {:instruction integer_dup} {:instruction float_add} {:instruction integer_dup} {:instruction float_add} {:instruction integer_dec} {:instruction integer_mult} {:instruction float_mult} {:instruction float_tan} {:instruction float_tan} {:instruction in2} {:instruction float_max} {:instruction in2} {:instruction integer_fromfloat} {:instruction integer_dup} {:instruction integer_pop} {:instruction integer_dec} {:instruction float_cos} {:instruction float_frominteger} {:instruction integer_swap} {:instruction integer_mod} {:instruction integer_dup} {:instruction 80} {:instruction integer_mod} {:instruction integer_dup} {:instruction print_float} {:instruction float_frominteger} {:instruction print_integer} {:instruction integer_sub} {:instruction integer_inc} {:instruction integer_max} {:instruction integer_stackdepth} {:instruction float_shove} {:instruction float_mult} {:instruction float_frominteger} {:instruction print_integer} {:instruction integer_sub} {:instruction integer_inc} {:instruction integer_max} {:instruction integer_stackdepth} {:instruction integer_mult} {:instruction integer_shove} {:instruction print_integer} {:instruction integer_swap})
Best program: (float_yankdup float_cos float_mult float_yankdup float_pop float_mult float_dup_times float_shove float_pop float_mult in2 integer_inc float_yank float_mult in1 float_dup_times float_mult 28 integer_add float_pop integer_inc in2 float_max float_rot integer_inc in2 float_max float_rot float_dup_times integer_mult float_mult tag_float_282 integer_max integer_inc in2 float_max integer_dup tagged_8 integer_mult float_mult float_pop float_sin float_mult in2 float_sub float_sub float_mult integer_dup float_max tagged_426 tagged_496 integer_shove float_mult float_min float_mult integer_mult integer_dup float_add integer_dup float_add integer_dec integer_mult float_mult float_tan float_tan in2 float_max in2 integer_fromfloat integer_dup integer_pop integer_dec float_cos float_frominteger integer_swap integer_mod integer_dup 80 integer_mod integer_dup print_float float_frominteger print_integer integer_sub integer_inc integer_max integer_stackdepth float_shove float_mult float_frominteger print_integer integer_sub integer_inc integer_max integer_stackdepth integer_mult integer_shove print_integer integer_swap)
Errors: [75.0364 8 34.1501 11 22.8312 9 82.4864 10 36.2467 10 8.731 10 13.0001 9 34.7905 11 48.553 10 15.2207 10 13.2234 10 86.9008 10 31.1826 10 62.9738 11 0.9775 9 56.2266 10 13.6014 9 41.2607 11 0.1229 10 97.5661 13 41.6534 9 87.3643 12 26.2889 9 52.826 8 22.741 11]
Total: 1255.9554999999998
Mean: 25.11911
Genome size: 99
Size: 100
Percent parens: 0.010
--- Population Statistics ---
Average total errors in population: 5482.315363399998
Median total errors in population: 1390.2241000000001
Error averages by case: (257.914136700001 8.956 293.99636619999814 10.556 170.50877260000135 10.264 155.4778196 9.754 170.7821647000001 10.373 177.09516620000065 10.633 281.1579483000002 9.422 208.8794167999987 12.546 158.44944940000002 10.765 213.26708839999802 10.921 175.16158190000115 11.166 272.8824897999998 9.402 97.49993369999997 10.184 147.05330570000095 11.931 185.58851660000175 10.493 241.8564497000021 10.148 214.3864055 9.424 233.01899140000245 10.684 203.62040469999957 9.109 278.4517635999991 12.173 233.27324809999848 9.404 270.36614720000256 12.137 223.71057369999846 9.628 156.9309809999992 11.485 199.59424190000016 9.834)
Error minima by case: (35.0748 7 2.0604 8 10.1667 8 2.4959 6 12.2355 8 5.7346 7 1.9656 7 25.7937 9 11.4423 8 14.2343 8 9.2221 9 2.9697 7 27.1781 6 5.0198 5 0.974 7 23.2585 8 11.6023 7 3.7435 8 0.0525 6 2.4468 9 6.3992 7 0.6717 9 24.2995 8 18.7435 7 10.2569 8)
Average genome size in population (length): 89.86
Average program size in population (points): 90.86
Average percent parens in population: 0.011
Minimum age in population: 239.5674653698257
Maximum age in population: 244.2768214792669
Average age in population: 242.0210016016418
Median age in population: 242.0426368760555
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 11
Genome diversity (% unique Plush genomes):	 0.882
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 11
Syntactic diversity (% unique Push programs):	 0.882
Total error diversity:				 0.517
Error (vector) diversity:			 0.526
Behavioral diversity:				 0.528
--- Run Statistics ---
Number of program evaluations used so far: 175000
Number of point (instruction) evaluations so far: 327711620
--- Timings ---
Current time: 1529615615580 milliseconds
Total Time:         721.3 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       268.1 seconds, 37.2%
Fitness Testing:    360.2 seconds, 49.9%
Report:              92.9 seconds, 12.9%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 174
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 175
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 175
;;******************************
;; -*- Number IO problem report - generation 175
Test total error for best: 54576.016899999966
Test mean error for best: 27.28801
;;------------------------------
Outputs of best individual on training cases:
Correct output: -116.076402553 | Program output: -41.0401601   
Correct output: 24.1400847456  | Program output: 32.006481     
Correct output: 69.833290954   | Program output: 47.00370273   
Correct output: 82.4958592801  | Program output: 0.007587271   
Correct output: 34.2385110874  | Program output: -2.005652507  
Correct output: -10.7358110665 | Program output: -4.001936273  
Correct output: 1.9700532093   | Program output: 10.009901     
Correct output: -44.7956976677 | Program output: 0.002272557   
Correct output: 68.5576547673  | Program output: 20.001856407  
Correct output: -69.2536523379 | Program output: -54.0192810   
Correct output: -14.2275745396 | Program output: -1.001482307  
Correct output: -171.9767905886 | Program output: -85.0767057   
Correct output: -32.1846093265 | Program output: 1.003307      
Correct output: 66.9812146721  | Program output: -1.004603171  
Correct output: 100.0259781081 | Program output: 101.001029211 
Correct output: -90.2595503995 | Program output: -34.0791090   
Correct output: -82.4635707651 | Program output: -96.0659026   
Correct output: -8.7492896214  | Program output: -50.0312402   
Correct output: -82.1329348831 | Program output: -82.0796562   
Correct output: 24.5261129925  | Program output: -73.0405185   
Correct output: -11.4065589042 | Program output: -53.0602705   
Correct output: 10.3282540908  | Program output: -77.045777    
Correct output: -51.7760580299 | Program output: -78.0755930   
Correct output: 51.8185003253  | Program output: -1.004728451  
Correct output: 110.7431489201 | Program output: 88.00370273   
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_dup_items} {:instruction float_mult} {:instruction float_yankdup} {:instruction float_pop} {:instruction float_frominteger} {:instruction float_dup_times} {:instruction float_mult} {:instruction float_dup_times} {:instruction float_shove} {:instruction float_pop} {:instruction float_mult} {:instruction in2} {:instruction integer_inc} {:instruction float_yank} {:instruction float_mult} {:instruction 28} {:instruction integer_add} {:instruction float_tan} {:instruction in1} {:instruction float_dup_times} {:instruction float_mult} {:instruction 28} {:instruction integer_add} {:instruction float_pop} {:instruction float_dup_times} {:instruction float_mult} {:instruction 28} {:instruction integer_add} {:instruction float_pop} {:instruction integer_inc} {:instruction in2} {:instruction float_max} {:instruction float_rot} {:instruction float_dup_times} {:instruction integer_mult} {:instruction float_mult} {:instruction tag_float_282} {:instruction float_pop} {:instruction float_sin} {:instruction float_mult} {:instruction in2} {:instruction float_sub} {:instruction float_sub} {:instruction float_mult} {:instruction integer_dup} {:instruction integer_dup} {:instruction tagged_426} {:instruction tagged_496} {:instruction integer_shove} {:instruction float_mult} {:instruction float_min} {:instruction float_mult} {:instruction integer_mult} {:instruction integer_dup} {:instruction float_add} {:instruction integer_dup} {:instruction float_add} {:instruction integer_dec} {:instruction integer_mult} {:instruction float_mult} {:instruction float_tan} {:instruction float_tan} {:instruction in2} {:instruction float_max} {:instruction in2} {:instruction integer_fromfloat} {:instruction integer_dup} {:instruction integer_pop} {:instruction integer_dec} {:instruction float_cos} {:instruction float_frominteger} {:instruction integer_swap} {:instruction integer_mod} {:instruction integer_dup} {:instruction 80} {:instruction integer_mod} {:instruction integer_dup} {:instruction print_float} {:instruction float_frominteger} {:instruction print_integer} {:instruction float_dup_times} {:instruction integer_inc} {:instruction integer_max} {:instruction integer_stackdepth} {:instruction float_shove} {:instruction float_mult} {:instruction integer_max} {:instruction float_min} {:instruction float_inc} {:instruction integer_mult} {:instruction integer_shove} {:instruction print_integer} {:instruction integer_swap})
Best program: (integer_dup_items float_mult float_yankdup float_pop float_frominteger float_dup_times float_mult float_dup_times float_shove float_pop float_mult in2 integer_inc float_yank float_mult 28 integer_add float_tan in1 float_dup_times float_mult 28 integer_add float_pop float_dup_times float_mult 28 integer_add float_pop integer_inc in2 float_max float_rot float_dup_times integer_mult float_mult tag_float_282 float_pop float_sin float_mult in2 float_sub float_sub float_mult integer_dup integer_dup tagged_426 tagged_496 integer_shove float_mult float_min float_mult integer_mult integer_dup float_add integer_dup float_add integer_dec integer_mult float_mult float_tan float_tan in2 float_max in2 integer_fromfloat integer_dup integer_pop integer_dec float_cos float_frominteger integer_swap integer_mod integer_dup 80 integer_mod integer_dup print_float float_frominteger print_integer float_dup_times integer_inc integer_max integer_stackdepth float_shove float_mult integer_max float_min float_inc integer_mult integer_shove print_integer integer_swap)
Errors: [75.0362 8 7.8664 9 22.8296 9 82.4883 9 36.2442 10 6.7339 11 8.0398 8 44.798 11 48.5558 10 15.2344 11 13.2261 10 86.9001 8 33.1879 11 67.9858 10 0.9751 9 56.1804 9 13.6023 8 41.282 10 0.0533 9 97.5666 11 41.6537 9 87.374 12 26.2995 10 52.8232 10 22.7394 11]
Total: 1232.676
Mean: 24.65352
Genome size: 93
Size: 94
Percent parens: 0.011
--- Population Statistics ---
Average total errors in population: 5148.024923999995
Median total errors in population: 1374.2185000000002
Error averages by case: (257.925566700001 9.07 244.90805109999832 10.55 146.99933340000032 10.789 151.54373780000037 10.913 153.66978129999953 11.368 146.7295345999997 11.243 230.33404909999948 9.436 178.46811879999993 12.945 146.03958919999965 11.464 210.901482699999 10.995 148.84552620000036 11.422 269.26016419999974 9.75 104.33917109999983 10.38 142.44742790000038 12.381 154.60596220000045 10.806 244.04842420000105 10.281 211.2806199999999 9.606 229.73180070000217 10.84 199.41100199999963 9.248 275.0345840999992 12.294 231.47760589999888 9.547 265.93936050000184 12.144 219.34883649999878 9.812 149.55662269999945 11.421 165.8055710999998 10.668)
Error minima by case: (36.0748 7 3.1401 8 0.8114 6 2.4873 5 4.2385 7 4.731 6 0.0299 7 25.7937 6 0.5106 7 14.1737 8 3.2253 7 3.9697 7 2.0 5 5.0789 8 0.0225 7 24.2585 8 11.6023 8 7.2565 8 0.0521 6 14.4739 8 10.3266 7 4.6883 9 4.7761 7 8.7434 7 0.7212 6)
Average genome size in population (length): 91.539
Average program size in population (points): 92.539
Average percent parens in population: 0.011
Minimum age in population: 241.349766214495
Maximum age in population: 245.7271028951548
Average age in population: 243.4855522507389
Median age in population: 243.5509187903752
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 11
Genome diversity (% unique Plush genomes):	 0.868
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 11
Syntactic diversity (% unique Push programs):	 0.868
Total error diversity:				 0.6
Error (vector) diversity:			 0.606
Behavioral diversity:				 0.607
--- Run Statistics ---
Number of program evaluations used so far: 176000
Number of point (instruction) evaluations so far: 330017540
--- Timings ---
Current time: 1529615620528 milliseconds
Total Time:         726.3 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       269.6 seconds, 37.1%
Fitness Testing:    362.7 seconds, 49.9%
Report:              93.8 seconds, 12.9%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 175
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 176
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 176
;;******************************
;; -*- Number IO problem report - generation 176
Test total error for best: 54576.016899999966
Test mean error for best: 27.28801
;;------------------------------
Outputs of best individual on training cases:
Correct output: -116.076402553 | Program output: -41.0401601   
Correct output: 24.1400847456  | Program output: 32.006481     
Correct output: 69.833290954   | Program output: 47.00370273   
Correct output: 82.4958592801  | Program output: 0.007587271   
Correct output: 34.2385110874  | Program output: -2.005652507  
Correct output: -10.7358110665 | Program output: -4.001936273  
Correct output: 1.9700532093   | Program output: 10.009901     
Correct output: -44.7956976677 | Program output: 0.002272557   
Correct output: 68.5576547673  | Program output: 20.001856407  
Correct output: -69.2536523379 | Program output: -54.0192810   
Correct output: -14.2275745396 | Program output: -1.001482307  
Correct output: -171.9767905886 | Program output: -85.0767057   
Correct output: -32.1846093265 | Program output: 1.003307      
Correct output: 66.9812146721  | Program output: -1.004603171  
Correct output: 100.0259781081 | Program output: 101.001029211 
Correct output: -90.2595503995 | Program output: -34.0791090   
Correct output: -82.4635707651 | Program output: -96.0659026   
Correct output: -8.7492896214  | Program output: -50.0312402   
Correct output: -82.1329348831 | Program output: -82.0796562   
Correct output: 24.5261129925  | Program output: -73.0405185   
Correct output: -11.4065589042 | Program output: -53.0602705   
Correct output: 10.3282540908  | Program output: -77.045777    
Correct output: -51.7760580299 | Program output: -78.0755930   
Correct output: 51.8185003253  | Program output: -1.004728451  
Correct output: 110.7431489201 | Program output: 88.00370273   
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_dup_items} {:instruction float_mult} {:instruction float_yankdup} {:instruction float_pop} {:instruction float_frominteger} {:instruction float_dup_times} {:instruction float_mult} {:instruction float_dup_times} {:instruction float_shove} {:instruction float_pop} {:instruction float_mult} {:instruction in2} {:instruction integer_inc} {:instruction float_yank} {:instruction float_mult} {:instruction 28} {:instruction integer_add} {:instruction float_tan} {:instruction in1} {:instruction float_dup_times} {:instruction float_mult} {:instruction 28} {:instruction integer_add} {:instruction float_pop} {:instruction float_dup_times} {:instruction float_mult} {:instruction 28} {:instruction integer_add} {:instruction float_pop} {:instruction integer_inc} {:instruction in2} {:instruction float_max} {:instruction float_rot} {:instruction float_dup_times} {:instruction integer_mult} {:instruction float_mult} {:instruction tag_float_282} {:instruction float_pop} {:instruction float_sin} {:instruction float_mult} {:instruction in2} {:instruction float_sub} {:instruction float_sub} {:instruction float_mult} {:instruction integer_dup} {:instruction integer_dup} {:instruction tagged_426} {:instruction tagged_496} {:instruction integer_shove} {:instruction float_mult} {:instruction float_min} {:instruction float_mult} {:instruction integer_mult} {:instruction integer_dup} {:instruction float_add} {:instruction integer_dup} {:instruction float_add} {:instruction integer_dec} {:instruction integer_mult} {:instruction float_mult} {:instruction float_tan} {:instruction float_tan} {:instruction in2} {:instruction float_max} {:instruction in2} {:instruction integer_fromfloat} {:instruction integer_dup} {:instruction integer_pop} {:instruction integer_dec} {:instruction float_cos} {:instruction float_frominteger} {:instruction integer_swap} {:instruction integer_mod} {:instruction integer_dup} {:instruction 80} {:instruction integer_mod} {:instruction integer_dup} {:instruction print_float} {:instruction float_frominteger} {:instruction print_integer} {:instruction float_dup_times} {:instruction integer_inc} {:instruction integer_max} {:instruction integer_stackdepth} {:instruction float_shove} {:instruction float_mult} {:instruction integer_max} {:instruction float_min} {:instruction float_inc} {:instruction integer_mult} {:instruction integer_shove} {:instruction print_integer} {:instruction integer_swap})
Best program: (integer_dup_items float_mult float_yankdup float_pop float_frominteger float_dup_times float_mult float_dup_times float_shove float_pop float_mult in2 integer_inc float_yank float_mult 28 integer_add float_tan in1 float_dup_times float_mult 28 integer_add float_pop float_dup_times float_mult 28 integer_add float_pop integer_inc in2 float_max float_rot float_dup_times integer_mult float_mult tag_float_282 float_pop float_sin float_mult in2 float_sub float_sub float_mult integer_dup integer_dup tagged_426 tagged_496 integer_shove float_mult float_min float_mult integer_mult integer_dup float_add integer_dup float_add integer_dec integer_mult float_mult float_tan float_tan in2 float_max in2 integer_fromfloat integer_dup integer_pop integer_dec float_cos float_frominteger integer_swap integer_mod integer_dup 80 integer_mod integer_dup print_float float_frominteger print_integer float_dup_times integer_inc integer_max integer_stackdepth float_shove float_mult integer_max float_min float_inc integer_mult integer_shove print_integer integer_swap)
Errors: [75.0362 8 7.8664 9 22.8296 9 82.4883 9 36.2442 10 6.7339 11 8.0398 8 44.798 11 48.5558 10 15.2344 11 13.2261 10 86.9001 8 33.1879 11 67.9858 10 0.9751 9 56.1804 9 13.6023 8 41.282 10 0.0533 9 97.5666 11 41.6537 9 87.374 12 26.2995 10 52.8232 10 22.7394 11]
Total: 1232.676
Mean: 24.65352
Genome size: 93
Size: 94
Percent parens: 0.011
--- Population Statistics ---
Average total errors in population: 4559.4265208000015
Median total errors in population: 1316.9577999999997
Error averages by case: (243.40727450000097 9.037 205.58161889999846 10.531 109.07282769999975 10.611 148.86002090000014 11.453 122.37874419999989 11.636 99.09507629999997 11.324 192.50163239999947 9.337 131.51558930000036 12.798 128.00051809999962 11.649 197.23431109999922 10.968 107.04273389999993 11.246 255.86821069999942 10.268 97.55720519999967 10.695 132.44166359999997 12.034 115.40762630000022 10.376 227.98828100000037 10.289 194.6228405000002 9.544 213.61096550000167 10.808 183.96764549999938 9.282 258.75455429999937 12.089 215.4188921999993 9.535 249.2724136000012 11.951 206.36763079999912 9.925 130.64220009999985 10.676 123.6230442000002 11.131)
Error minima by case: (36.0748 5 5.8599 5 0.8114 3 2.4959 6 4.1391 7 3.7358 3 0.0299 4 3.7857 3 0.5106 3 0.01 5 2.7724 3 3.9697 5 2.0 4 0.5374 6 0.009 4 21.0159 5 11.6015 8 2.7435 8 0.0329 5 5.4739 5 10.3463 7 3.3283 5 17.4676 7 4.8118 7 0.7212 4)
Average genome size in population (length): 92.273
Average program size in population (points): 93.273
Average percent parens in population: 0.011
Minimum age in population: 242.7003043715524
Maximum age in population: 247.3803984303847
Average age in population: 244.9650070101844
Median age in population: 244.9913788935121
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 14
Genome diversity (% unique Plush genomes):	 0.859
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 14
Syntactic diversity (% unique Push programs):	 0.859
Total error diversity:				 0.672
Error (vector) diversity:			 0.676
Behavioral diversity:				 0.677
--- Run Statistics ---
Number of program evaluations used so far: 177000
Number of point (instruction) evaluations so far: 332354663
--- Timings ---
Current time: 1529615625661 milliseconds
Total Time:         731.2 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       271.3 seconds, 37.1%
Fitness Testing:    365.3 seconds, 50.0%
Report:              94.5 seconds, 12.9%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 176
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 177
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 177
;;******************************
;; -*- Number IO problem report - generation 177
Test total error for best: 55007.63320000007
Test mean error for best: 27.50382
;;------------------------------
Outputs of best individual on training cases:
Correct output: -116.076402553 | Program output: -41.0400      
Correct output: 24.1400847456  | Program output: 32.00300      
Correct output: 69.833290954   | Program output: 47.00210      
Correct output: 82.4958592801  | Program output: 0.00950       
Correct output: 34.2385110874  | Program output: -2.00820      
Correct output: -10.7358110665 | Program output: -2.00480      
Correct output: 1.9700532093   | Program output: 10.00300      
Correct output: -44.7956976677 | Program output: -10.00520     
Correct output: 68.5576547673  | Program output: 20.00470      
Correct output: -69.2536523379 | Program output: -54.0330      
Correct output: -14.2275745396 | Program output: -1.00420      
Correct output: -171.9767905886 | Program output: -85.0760      
Correct output: -32.1846093265 | Program output: -1.0020       
Correct output: 66.9812146721  | Program output: 4.00740       
Correct output: 100.0259781081 | Program output: 101.00350     
Correct output: -90.2595503995 | Program output: -34.0330      
Correct output: -82.4635707651 | Program output: -96.0650      
Correct output: -8.7492896214  | Program output: -50.010       
Correct output: -82.1329348831 | Program output: -82.010       
Correct output: 24.5261129925  | Program output: -73.0400      
Correct output: -11.4065589042 | Program output: -53.0600      
Correct output: 10.3282540908  | Program output: -77.0360      
Correct output: -51.7760580299 | Program output: -78.0650      
Correct output: 51.8185003253  | Program output: -1.00750      
Correct output: 110.7431489201 | Program output: 88.00210      
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_dup_items} {:instruction float_mult} {:instruction float_yankdup} {:instruction float_pop} {:instruction float_frominteger} {:instruction float_dup_times} {:instruction float_mult} {:instruction float_dup_times} {:instruction float_shove} {:instruction float_pop} {:instruction float_mult} {:instruction in2} {:instruction integer_inc} {:instruction float_yank} {:instruction float_mult} {:instruction 28} {:instruction integer_add} {:instruction float_tan} {:instruction in1} {:instruction float_dup_times} {:instruction float_mult} {:instruction 28} {:instruction integer_add} {:instruction float_pop} {:instruction float_dup_times} {:instruction float_mult} {:instruction 28} {:instruction integer_add} {:instruction float_pop} {:instruction integer_inc} {:instruction in2} {:instruction float_max} {:instruction float_rot} {:instruction float_dup_times} {:instruction integer_mult} {:instruction tag_float_282} {:instruction integer_max} {:instruction integer_inc} {:instruction in2} {:instruction float_max} {:instruction integer_dup} {:instruction tagged_8} {:instruction integer_mult} {:instruction float_pop} {:instruction float_pop} {:instruction float_sin} {:instruction float_mult} {:instruction float_pop} {:instruction float_sin} {:instruction float_mult} {:instruction in2} {:instruction float_sub} {:instruction float_sub} {:instruction float_mult} {:instruction integer_dup} {:instruction float_max} {:instruction tagged_426} {:instruction tagged_496} {:instruction integer_shove} {:instruction float_mult} {:instruction float_min} {:instruction float_mult} {:instruction integer_mult} {:instruction integer_dup} {:instruction float_add} {:instruction integer_dup} {:instruction float_add} {:instruction integer_dec} {:instruction integer_mult} {:instruction float_mult} {:instruction float_tan} {:instruction float_tan} {:instruction in2} {:instruction float_max} {:instruction in2} {:instruction integer_fromfloat} {:instruction integer_dup} {:instruction integer_pop} {:instruction integer_dec} {:instruction float_cos} {:instruction float_frominteger} {:instruction integer_swap} {:instruction integer_mod} {:instruction integer_dup} {:instruction 80} {:instruction integer_mod} {:instruction integer_dup} {:instruction print_float} {:instruction float_frominteger} {:instruction print_integer} {:instruction integer_sub} {:instruction integer_inc} {:instruction integer_max} {:instruction integer_stackdepth} {:instruction float_shove} {:instruction float_mult} {:instruction float_frominteger} {:instruction print_integer} {:instruction integer_sub} {:instruction integer_inc} {:instruction integer_max} {:instruction integer_stackdepth} {:instruction integer_mult} {:instruction integer_shove} {:instruction print_integer} {:instruction integer_swap})
Best program: (integer_dup_items float_mult float_yankdup float_pop float_frominteger float_dup_times float_mult float_dup_times float_shove float_pop float_mult in2 integer_inc float_yank float_mult 28 integer_add float_tan in1 float_dup_times float_mult 28 integer_add float_pop float_dup_times float_mult 28 integer_add float_pop integer_inc in2 float_max float_rot float_dup_times integer_mult tag_float_282 integer_max integer_inc in2 float_max integer_dup tagged_8 integer_mult float_pop float_pop float_sin float_mult float_pop float_sin float_mult in2 float_sub float_sub float_mult integer_dup float_max tagged_426 tagged_496 integer_shove float_mult float_min float_mult integer_mult integer_dup float_add integer_dup float_add integer_dec integer_mult float_mult float_tan float_tan in2 float_max in2 integer_fromfloat integer_dup integer_pop integer_dec float_cos float_frominteger integer_swap integer_mod integer_dup 80 integer_mod integer_dup print_float float_frominteger print_integer integer_sub integer_inc integer_max integer_stackdepth float_shove float_mult float_frominteger print_integer integer_sub integer_inc integer_max integer_stackdepth integer_mult integer_shove print_integer integer_swap)
Errors: [75.0364 8 7.8629 10 22.8312 9 82.4864 10 36.2467 10 8.731 10 8.0329 7 34.7905 11 48.553 10 15.2207 10 13.2234 10 86.9008 10 31.1826 10 62.9738 11 0.9775 9 56.2266 10 13.6014 9 41.2607 11 0.1229 10 97.5661 13 41.6534 9 87.3643 12 26.2889 9 52.826 8 22.741 11]
Total: 1221.7011
Mean: 24.434023
Genome size: 106
Size: 107
Percent parens: 0.009
--- Population Statistics ---
Average total errors in population: 4138.393365299998
Median total errors in population: 1291.96415
Error averages by case: (216.09626700000098 9.086 165.93862759999922 10.593 109.3446219999998 10.192 145.1554324 10.725 118.28791070000007 10.95 97.42790529999986 10.855 154.22115159999962 9.32 125.86510450000004 12.236 126.46245249999951 11.095 170.8199811999996 11.08 100.18732789999977 10.804 231.23281119999922 10.911 92.02599799999984 10.671 131.72112959999987 11.105 104.51188770000003 9.786 203.0988261999999 10.414 169.15124509999973 9.547 184.86013420000108 10.878 156.46327669999926 9.323 234.1350844999999 11.971 189.32658159999943 9.667 223.1369453000007 11.858 180.1340067999993 10.157 127.3816031000002 10.0 117.04905260000012 11.134)
Error minima by case: (40.0 7 3.8599 7 9.8333 3 2.4868 6 20.1975 8 2.7346 3 0.0299 6 3.7857 3 2.5577 3 14.1627 8 1.7734 3 84.0 7 1.6497 2 5.0188 8 0.004 4 33.0 8 11.6014 7 3.7493 9 0.0329 6 3.4739 9 6.3788 7 5.6717 8 17.9417 8 8.7784 7 3.7237 4)
Average genome size in population (length): 92.252
Average program size in population (points): 93.252
Average percent parens in population: 0.011
Minimum age in population: 243.7366056416282
Maximum age in population: 248.8683811555733
Average age in population: 246.3678725140415
Median age in population: 246.3998985360102
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 18
Genome diversity (% unique Plush genomes):	 0.844
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 18
Syntactic diversity (% unique Push programs):	 0.844
Total error diversity:				 0.653
Error (vector) diversity:			 0.657
Behavioral diversity:				 0.657
--- Run Statistics ---
Number of program evaluations used so far: 178000
Number of point (instruction) evaluations so far: 334693669
--- Timings ---
Current time: 1529615630385 milliseconds
Total Time:         736.2 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       272.8 seconds, 37.1%
Fitness Testing:    367.7 seconds, 49.9%
Report:              95.5 seconds, 13.0%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 177
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 178
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 178
;;******************************
;; -*- Number IO problem report - generation 178
Test total error for best: 54939.74490000001
Test mean error for best: 27.46987
;;------------------------------
Outputs of best individual on training cases:
Correct output: -116.076402553 | Program output: -41.0400      
Correct output: 24.1400847456  | Program output: 32.00290      
Correct output: 69.833290954   | Program output: 47.00210      
Correct output: 82.4958592801  | Program output: 0.00950       
Correct output: 34.2385110874  | Program output: -2.00820      
Correct output: -10.7358110665 | Program output: -2.00480      
Correct output: 1.9700532093   | Program output: 10.00290      
Correct output: -44.7956976677 | Program output: -10.00520     
Correct output: 68.5576547673  | Program output: 20.00470      
Correct output: -69.2536523379 | Program output: -54.0190      
Correct output: -14.2275745396 | Program output: -1.00420      
Correct output: -171.9767905886 | Program output: -85.0760      
Correct output: -32.1846093265 | Program output: -1.0020       
Correct output: 66.9812146721  | Program output: 4.00740       
Correct output: 100.0259781081 | Program output: 101.00350     
Correct output: -90.2595503995 | Program output: -34.0790      
Correct output: -82.4635707651 | Program output: -96.0650      
Correct output: -8.7492896214  | Program output: -50.0310      
Correct output: -82.1329348831 | Program output: -82.0790      
Correct output: 24.5261129925  | Program output: -73.0400      
Correct output: -11.4065589042 | Program output: -53.0600      
Correct output: 10.3282540908  | Program output: -77.040       
Correct output: -51.7760580299 | Program output: -78.0750      
Correct output: 51.8185003253  | Program output: -1.00750      
Correct output: 110.7431489201 | Program output: 88.00210      
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_dup_items} {:instruction float_mult} {:instruction float_yankdup} {:instruction float_pop} {:instruction float_frominteger} {:instruction float_dup_times} {:instruction float_mult} {:instruction float_dup_times} {:instruction float_shove} {:instruction float_pop} {:instruction float_mult} {:instruction in2} {:instruction integer_inc} {:instruction float_yank} {:instruction float_mult} {:instruction 28} {:instruction integer_add} {:instruction float_tan} {:instruction in1} {:instruction float_dup_times} {:instruction float_mult} {:instruction 28} {:instruction integer_add} {:instruction float_pop} {:instruction float_dup_times} {:instruction float_mult} {:instruction 28} {:instruction integer_add} {:instruction float_pop} {:instruction integer_inc} {:instruction in2} {:instruction float_max} {:instruction float_rot} {:instruction float_dup_times} {:instruction integer_mult} {:instruction float_mult} {:instruction tag_float_282} {:instruction float_pop} {:instruction float_sin} {:instruction float_mult} {:instruction in2} {:instruction float_sub} {:instruction float_mult} {:instruction float_pop} {:instruction float_sin} {:instruction float_mult} {:instruction in2} {:instruction float_sub} {:instruction float_sub} {:instruction float_mult} {:instruction integer_min} {:instruction float_pop} {:instruction float_sin} {:instruction float_mult} {:instruction in2} {:instruction float_sub} {:instruction float_sub} {:instruction float_mult} {:instruction integer_dup} {:instruction float_max} {:instruction tagged_426} {:instruction tagged_496} {:instruction integer_shove} {:instruction float_mult} {:instruction float_min} {:instruction float_mult} {:instruction integer_mult} {:instruction integer_dup} {:instruction float_add} {:instruction integer_dup} {:instruction float_add} {:instruction integer_dec} {:instruction integer_mult} {:instruction float_mult} {:instruction float_tan} {:instruction float_tan} {:instruction in2} {:instruction float_max} {:instruction in2} {:instruction integer_fromfloat} {:instruction integer_dup} {:instruction integer_pop} {:instruction integer_dec} {:instruction float_cos} {:instruction float_frominteger} {:instruction integer_swap} {:instruction integer_mod} {:instruction integer_dup} {:instruction 80} {:instruction integer_mod} {:instruction integer_dup} {:instruction print_float} {:instruction float_frominteger} {:instruction print_integer} {:instruction integer_sub} {:instruction integer_inc} {:instruction integer_max} {:instruction integer_stackdepth} {:instruction float_shove} {:instruction float_mult} {:instruction float_frominteger} {:instruction print_integer} {:instruction integer_sub} {:instruction integer_inc} {:instruction integer_max} {:instruction integer_stackdepth} {:instruction integer_mult} {:instruction integer_shove} {:instruction print_integer} {:instruction integer_swap})
Best program: (integer_dup_items float_mult float_yankdup float_pop float_frominteger float_dup_times float_mult float_dup_times float_shove float_pop float_mult in2 integer_inc float_yank float_mult 28 integer_add float_tan in1 float_dup_times float_mult 28 integer_add float_pop float_dup_times float_mult 28 integer_add float_pop integer_inc in2 float_max float_rot float_dup_times integer_mult float_mult tag_float_282 float_pop float_sin float_mult in2 float_sub float_mult float_pop float_sin float_mult in2 float_sub float_sub float_mult integer_min float_pop float_sin float_mult in2 float_sub float_sub float_mult integer_dup float_max tagged_426 tagged_496 integer_shove float_mult float_min float_mult integer_mult integer_dup float_add integer_dup float_add integer_dec integer_mult float_mult float_tan float_tan in2 float_max in2 integer_fromfloat integer_dup integer_pop integer_dec float_cos float_frominteger integer_swap integer_mod integer_dup 80 integer_mod integer_dup print_float float_frominteger print_integer integer_sub integer_inc integer_max integer_stackdepth float_shove float_mult float_frominteger print_integer integer_sub integer_inc integer_max integer_stackdepth integer_mult integer_shove print_integer integer_swap)
Errors: [75.0364 8 7.8628 10 22.8312 9 82.4864 10 36.2467 10 8.731 10 8.0328 7 34.7905 11 48.553 10 15.2347 12 13.2234 10 86.9008 10 31.1826 10 62.9738 11 0.9775 9 56.1806 10 13.6014 9 41.2817 11 0.0539 9 97.5661 13 41.6534 9 87.3683 11 26.2989 9 52.826 8 22.741 11]
Total: 1221.6349
Mean: 24.432697
Genome size: 110
Size: 111
Percent parens: 0.009
--- Population Statistics ---
Average total errors in population: 4386.699499300001
Median total errors in population: 1284.2232
Error averages by case: (232.6258965000012 8.982 185.18358829999917 10.484 109.01417509999979 10.23 150.04884369999945 10.641 121.37200840000028 10.937 97.65185679999999 10.835 170.16617859999974 9.217 129.60172910000028 12.214 128.20419899999985 11.027 185.55091149999964 10.994 103.6532503 10.882 247.1843602999992 10.587 100.34811969999987 10.609 135.0488318 11.174 106.2539838 9.783 220.95846170000004 10.373 185.8634665999999 9.608 204.2714197000013 10.826 174.41897359999936 9.286 249.68735139999964 11.969 206.3510038999994 9.616 240.14473950000075 11.865 194.10867060000004 10.059 129.5332562999999 9.985 116.16422310000011 11.107)
Error minima by case: (24.0362 5 4.8599 4 20.8333 4 11.5041 5 4.2385 8 2.7348 4 0.0299 4 2.1593 4 20.5107 4 14.2204 5 3.7824 4 79.9001 5 2.0 2 6.0188 8 0.009 5 1.8196 5 9.6023 7 2.7435 7 0.0329 5 20.5261 5 0.5961 7 3.7127 5 4.8211 8 8.7484 7 20.7431 5)
Average genome size in population (length): 93.367
Average program size in population (points): 94.367
Average percent parens in population: 0.011
Minimum age in population: 244.9608672682701
Maximum age in population: 249.8147458939274
Average age in population: 247.7716189835135
Median age in population: 247.826613672008
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 30
Genome diversity (% unique Plush genomes):	 0.845
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 30
Syntactic diversity (% unique Push programs):	 0.845
Total error diversity:				 0.663
Error (vector) diversity:			 0.668
Behavioral diversity:				 0.668
--- Run Statistics ---
Number of program evaluations used so far: 179000
Number of point (instruction) evaluations so far: 337060369
--- Timings ---
Current time: 1529615635699 milliseconds
Total Time:         741.3 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       274.6 seconds, 37.0%
Fitness Testing:    370.3 seconds, 50.0%
Report:              96.3 seconds, 13.0%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 178
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 179
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 179
;;******************************
;; -*- Number IO problem report - generation 179
Test total error for best: 54740.997799999954
Test mean error for best: 27.37050
;;------------------------------
Outputs of best individual on training cases:
Correct output: -116.076402553 | Program output: -41.0401601   
Correct output: 24.1400847456  | Program output: 32.006481     
Correct output: 69.833290954   | Program output: 47.00370273   
Correct output: 82.4958592801  | Program output: 0.007587271   
Correct output: 34.2385110874  | Program output: -2.005652507  
Correct output: -10.7358110665 | Program output: -2.001936273  
Correct output: 1.9700532093   | Program output: 10.009901     
Correct output: -44.7956976677 | Program output: -10.002272557 
Correct output: 68.5576547673  | Program output: 20.001856407  
Correct output: -69.2536523379 | Program output: -54.0192810   
Correct output: -14.2275745396 | Program output: -1.001482307  
Correct output: -171.9767905886 | Program output: -85.0767057   
Correct output: -32.1846093265 | Program output: -1.003307     
Correct output: 66.9812146721  | Program output: 4.004603171   
Correct output: 100.0259781081 | Program output: 101.001029211 
Correct output: -90.2595503995 | Program output: -34.0791090   
Correct output: -82.4635707651 | Program output: -96.0659026   
Correct output: -8.7492896214  | Program output: -50.0312402   
Correct output: -82.1329348831 | Program output: -82.0796562   
Correct output: 24.5261129925  | Program output: -73.0405185   
Correct output: -11.4065589042 | Program output: -53.0602705   
Correct output: 10.3282540908  | Program output: -77.045777    
Correct output: -51.7760580299 | Program output: -78.0755930   
Correct output: 51.8185003253  | Program output: -1.004728451  
Correct output: 110.7431489201 | Program output: 88.00370273   
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_dup_items} {:instruction float_mult} {:instruction float_yankdup} {:instruction float_pop} {:instruction float_frominteger} {:instruction float_dup_times} {:instruction float_mult} {:instruction float_dup_times} {:instruction float_shove} {:instruction float_pop} {:instruction float_mult} {:instruction in2} {:instruction integer_inc} {:instruction float_yank} {:instruction float_mult} {:instruction 28} {:instruction integer_add} {:instruction float_tan} {:instruction in1} {:instruction float_dup_times} {:instruction float_mult} {:instruction 28} {:instruction integer_add} {:instruction float_pop} {:instruction float_dup_times} {:instruction float_mult} {:instruction 28} {:instruction integer_add} {:instruction float_pop} {:instruction integer_inc} {:instruction in2} {:instruction float_max} {:instruction float_rot} {:instruction float_dup_times} {:instruction integer_mult} {:instruction float_mult} {:instruction tag_float_282} {:instruction float_pop} {:instruction float_sin} {:instruction float_mult} {:instruction in2} {:instruction float_sub} {:instruction float_sub} {:instruction float_pop} {:instruction float_sin} {:instruction float_mult} {:instruction in2} {:instruction float_sub} {:instruction float_sub} {:instruction float_mult} {:instruction integer_dup} {:instruction float_max} {:instruction tagged_426} {:instruction tagged_496} {:instruction integer_shove} {:instruction float_mult} {:instruction float_min} {:instruction float_mult} {:instruction integer_mult} {:instruction integer_dup} {:instruction float_add} {:instruction integer_dup} {:instruction float_add} {:instruction integer_dec} {:instruction integer_mult} {:instruction float_mult} {:instruction float_tan} {:instruction float_tan} {:instruction in2} {:instruction float_max} {:instruction in2} {:instruction integer_fromfloat} {:instruction integer_dup} {:instruction integer_pop} {:instruction integer_dec} {:instruction float_cos} {:instruction float_frominteger} {:instruction integer_swap} {:instruction integer_mod} {:instruction integer_dup} {:instruction 80} {:instruction integer_mod} {:instruction integer_dup} {:instruction print_float} {:instruction float_frominteger} {:instruction print_integer} {:instruction float_dup_times} {:instruction integer_inc} {:instruction integer_max} {:instruction integer_stackdepth} {:instruction float_shove} {:instruction float_mult} {:instruction integer_max} {:instruction float_min} {:instruction float_inc} {:instruction integer_mult} {:instruction integer_shove} {:instruction print_integer} {:instruction integer_swap})
Best program: (integer_dup_items float_mult float_yankdup float_pop float_frominteger float_dup_times float_mult float_dup_times float_shove float_pop float_mult in2 integer_inc float_yank float_mult 28 integer_add float_tan in1 float_dup_times float_mult 28 integer_add float_pop float_dup_times float_mult 28 integer_add float_pop integer_inc in2 float_max float_rot float_dup_times integer_mult float_mult tag_float_282 float_pop float_sin float_mult in2 float_sub float_sub float_pop float_sin float_mult in2 float_sub float_sub float_mult integer_dup float_max tagged_426 tagged_496 integer_shove float_mult float_min float_mult integer_mult integer_dup float_add integer_dup float_add integer_dec integer_mult float_mult float_tan float_tan in2 float_max in2 integer_fromfloat integer_dup integer_pop integer_dec float_cos float_frominteger integer_swap integer_mod integer_dup 80 integer_mod integer_dup print_float float_frominteger print_integer float_dup_times integer_inc integer_max integer_stackdepth float_shove float_mult integer_max float_min float_inc integer_mult integer_shove print_integer integer_swap)
Errors: [75.0362 8 7.8664 9 22.8296 9 82.4883 9 36.2442 10 8.7339 11 8.0398 8 34.7934 10 48.5558 10 15.2344 11 13.2261 10 86.9001 8 31.1813 10 62.9766 10 0.9751 9 56.1804 9 13.6023 8 41.282 10 0.0533 9 97.5666 11 41.6537 9 87.374 12 26.2995 10 52.8232 10 22.7394 11]
Total: 1215.6555999999998
Mean: 24.313112
Genome size: 99
Size: 100
Percent parens: 0.010
--- Population Statistics ---
Average total errors in population: 4496.6986573999975
Median total errors in population: 1275.9200500000002
Error averages by case: (247.5753283000012 8.913 179.29112279999958 10.279 107.23491369999975 10.078 147.0523388999992 10.646 117.41125610000076 10.844 100.63651940000001 10.832 163.01104509999962 8.973 131.2769635000003 12.007 127.50938380000015 10.857 201.08610009999964 10.902 97.6365976 10.82 258.77613489999936 10.294 99.76474419999992 10.656 132.4565306999998 11.272 107.19208589999992 9.81 232.16887640000047 10.352 197.56167020000024 9.647 218.63783020000156 10.802 187.98203409999968 9.3 261.2932227999988 11.973 219.33615889999928 9.625 252.78318960000144 11.749 207.30172179999948 9.975 124.31032519999984 9.847 115.81456320000028 11.145)
Error minima by case: (40.0 7 0.1401 4 10.1667 3 2.4959 5 5.2385 8 0.3123 5 0.9701 4 0.2043 5 6.4628 3 14.1617 8 8.2155 5 84.0 7 1.8384 3 6.0188 7 0.0041 4 33.0 7 12.5364 8 6.7483 8 0.0526 6 14.5261 9 6.3745 7 9.2826 8 25.2239 8 7.7431 7 20.7212 4)
Average genome size in population (length): 94.717
Average program size in population (points): 95.717
Average percent parens in population: 0.011
Minimum age in population: 246.3970799147082
Maximum age in population: 251.2450834656118
Average age in population: 249.0798097989884
Median age in population: 249.1024781321399
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 35
Genome diversity (% unique Plush genomes):	 0.825
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 35
Syntactic diversity (% unique Push programs):	 0.825
Total error diversity:				 0.652
Error (vector) diversity:			 0.657
Behavioral diversity:				 0.657
--- Run Statistics ---
Number of program evaluations used so far: 180000
Number of point (instruction) evaluations so far: 339459555
--- Timings ---
Current time: 1529615641100 milliseconds
Total Time:         746.9 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       276.2 seconds, 37.0%
Fitness Testing:    373.4 seconds, 50.0%
Report:              97.1 seconds, 13.0%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 179
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 180
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 180
;;******************************
;; -*- Number IO problem report - generation 180
Test total error for best: 54740.997799999954
Test mean error for best: 27.37050
;;------------------------------
Outputs of best individual on training cases:
Correct output: -116.076402553 | Program output: -41.0401601   
Correct output: 24.1400847456  | Program output: 32.006481     
Correct output: 69.833290954   | Program output: 47.00370273   
Correct output: 82.4958592801  | Program output: 0.007587271   
Correct output: 34.2385110874  | Program output: -2.005652507  
Correct output: -10.7358110665 | Program output: -2.001936273  
Correct output: 1.9700532093   | Program output: 10.009901     
Correct output: -44.7956976677 | Program output: -10.002272557 
Correct output: 68.5576547673  | Program output: 20.001856407  
Correct output: -69.2536523379 | Program output: -54.0192810   
Correct output: -14.2275745396 | Program output: -1.001482307  
Correct output: -171.9767905886 | Program output: -85.0767057   
Correct output: -32.1846093265 | Program output: -1.003307     
Correct output: 66.9812146721  | Program output: 4.004603171   
Correct output: 100.0259781081 | Program output: 101.001029211 
Correct output: -90.2595503995 | Program output: -34.0791090   
Correct output: -82.4635707651 | Program output: -96.0659026   
Correct output: -8.7492896214  | Program output: -50.0312402   
Correct output: -82.1329348831 | Program output: -82.0796562   
Correct output: 24.5261129925  | Program output: -73.0405185   
Correct output: -11.4065589042 | Program output: -53.0602705   
Correct output: 10.3282540908  | Program output: -77.045777    
Correct output: -51.7760580299 | Program output: -78.0755930   
Correct output: 51.8185003253  | Program output: -1.004728451  
Correct output: 110.7431489201 | Program output: 88.00370273   
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_yankdup} {:instruction float_cos} {:instruction float_mult} {:instruction float_yankdup} {:instruction float_pop} {:instruction float_mult} {:instruction float_yankdup} {:instruction float_pop} {:instruction float_frominteger} {:instruction float_dup_times} {:instruction float_pop} {:instruction float_frominteger} {:instruction float_dup_times} {:instruction float_mult} {:instruction float_dup_times} {:instruction float_shove} {:instruction float_pop} {:instruction float_mult} {:instruction in2} {:instruction integer_inc} {:instruction float_yank} {:instruction float_mult} {:instruction 28} {:instruction integer_add} {:instruction float_tan} {:instruction in1} {:instruction float_dup_times} {:instruction float_mult} {:instruction 28} {:instruction integer_add} {:instruction float_pop} {:instruction float_dup_times} {:instruction float_mult} {:instruction 28} {:instruction integer_add} {:instruction float_pop} {:instruction integer_inc} {:instruction in2} {:instruction float_max} {:instruction float_rot} {:instruction float_dup_times} {:instruction integer_mult} {:instruction float_mult} {:instruction tag_float_282} {:instruction float_pop} {:instruction float_sin} {:instruction float_mult} {:instruction in2} {:instruction float_sub} {:instruction float_sub} {:instruction float_pop} {:instruction float_sin} {:instruction float_mult} {:instruction in2} {:instruction float_sub} {:instruction float_sub} {:instruction float_mult} {:instruction integer_dup} {:instruction float_max} {:instruction tagged_426} {:instruction tagged_496} {:instruction integer_shove} {:instruction float_mult} {:instruction float_min} {:instruction float_mult} {:instruction integer_mult} {:instruction integer_dup} {:instruction float_add} {:instruction integer_dup} {:instruction float_add} {:instruction integer_dec} {:instruction integer_mult} {:instruction float_mult} {:instruction float_tan} {:instruction float_tan} {:instruction in2} {:instruction float_max} {:instruction in2} {:instruction integer_fromfloat} {:instruction integer_dup} {:instruction integer_pop} {:instruction integer_dec} {:instruction float_cos} {:instruction float_frominteger} {:instruction integer_swap} {:instruction integer_mod} {:instruction integer_dup} {:instruction 80} {:instruction integer_mod} {:instruction integer_dup} {:instruction print_float} {:instruction float_frominteger} {:instruction print_integer} {:instruction float_dup_times} {:instruction integer_inc} {:instruction integer_max} {:instruction integer_stackdepth} {:instruction float_shove} {:instruction float_mult} {:instruction integer_max} {:instruction float_min} {:instruction float_inc} {:instruction integer_mult} {:instruction integer_shove} {:instruction print_integer} {:instruction integer_swap})
Best program: (float_yankdup float_cos float_mult float_yankdup float_pop float_mult float_yankdup float_pop float_frominteger float_dup_times float_pop float_frominteger float_dup_times float_mult float_dup_times float_shove float_pop float_mult in2 integer_inc float_yank float_mult 28 integer_add float_tan in1 float_dup_times float_mult 28 integer_add float_pop float_dup_times float_mult 28 integer_add float_pop integer_inc in2 float_max float_rot float_dup_times integer_mult float_mult tag_float_282 float_pop float_sin float_mult in2 float_sub float_sub float_pop float_sin float_mult in2 float_sub float_sub float_mult integer_dup float_max tagged_426 tagged_496 integer_shove float_mult float_min float_mult integer_mult integer_dup float_add integer_dup float_add integer_dec integer_mult float_mult float_tan float_tan in2 float_max in2 integer_fromfloat integer_dup integer_pop integer_dec float_cos float_frominteger integer_swap integer_mod integer_dup 80 integer_mod integer_dup print_float float_frominteger print_integer float_dup_times integer_inc integer_max integer_stackdepth float_shove float_mult integer_max float_min float_inc integer_mult integer_shove print_integer integer_swap)
Errors: [75.0362 8 7.8664 9 22.8296 9 82.4883 9 36.2442 10 8.7339 11 8.0398 8 34.7934 10 48.5558 10 15.2344 11 13.2261 10 86.9001 8 31.1813 10 62.9766 10 0.9751 9 56.1804 9 13.6023 8 41.282 10 0.0533 9 97.5666 11 41.6537 9 87.374 12 26.2995 10 52.8232 10 22.7394 11]
Total: 1215.6555999999998
Mean: 24.313112
Genome size: 106
Size: 107
Percent parens: 0.009
--- Population Statistics ---
Average total errors in population: 5138.740098700002
Median total errors in population: 1267.7523500000002
Error averages by case: (277.018200500001 8.999 182.57728689999956 10.095 130.46704219999933 10.109 159.4739520999989 10.666 148.05719980000015 11.058 121.5438832000005 11.024 168.7544040999993 8.732 146.28507969999998 12.083 146.8559222000009 10.928 232.2638607999989 11.033 129.34454839999995 10.858 293.6571141000009 10.196 120.56410449999987 10.86 147.62274899999983 11.332 132.0526194999997 9.887 264.9772063000009 10.415 235.0184210000005 9.697 248.3045922000017 10.816 223.17467649999966 9.507 294.44792639999963 11.926 250.8862581999994 9.705 286.6875073000011 11.808 244.42166549999934 10.153 150.07278390000008 10.085 140.90409440000062 11.335)
Error minima by case: (36.0754 5 4.8599 4 21.0 5 10.5197 5 3.7671 8 2.7305 5 0.0299 3 0.2053 5 21.51 5 14.1747 5 3.8145 4 3.9758 5 1.8184 3 5.0931 8 0.0062 5 24.2586 5 12.5364 8 7.7435 8 0.0515 5 3.4739 5 7.4066 8 3.3283 5 25.2239 7 4.811 7 21.0 6)
Average genome size in population (length): 96.164
Average program size in population (points): 97.164
Average percent parens in population: 0.010
Minimum age in population: 247.9456572823206
Maximum age in population: 252.3498947864809
Average age in population: 250.4946520985735
Median age in population: 250.5560847129193
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 52
Genome diversity (% unique Plush genomes):	 0.843
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 52
Syntactic diversity (% unique Push programs):	 0.843
Total error diversity:				 0.639
Error (vector) diversity:			 0.648
Behavioral diversity:				 0.649
--- Run Statistics ---
Number of program evaluations used so far: 181000
Number of point (instruction) evaluations so far: 341893727
--- Timings ---
Current time: 1529615646647 milliseconds
Total Time:         752.1 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       277.6 seconds, 36.9%
Fitness Testing:    376.5 seconds, 50.1%
Report:              97.9 seconds, 13.0%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 180
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 181
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 181
;;******************************
;; -*- Number IO problem report - generation 181
Test total error for best: 54766.03819999995
Test mean error for best: 27.38302
;;------------------------------
Outputs of best individual on training cases:
Correct output: -116.076402553 | Program output: -41.0401601   
Correct output: 24.1400847456  | Program output: 32.006481     
Correct output: 69.833290954   | Program output: 47.00370273   
Correct output: 82.4958592801  | Program output: 0.007587271   
Correct output: 34.2385110874  | Program output: -2.005652507  
Correct output: -10.7358110665 | Program output: -2.001936273  
Correct output: 1.9700532093   | Program output: 10.009901     
Correct output: -44.7956976677 | Program output: -10.002272557 
Correct output: 68.5576547673  | Program output: 20.001856407  
Correct output: -69.2536523379 | Program output: -54.0192810   
Correct output: -14.2275745396 | Program output: -1.001482307  
Correct output: -171.9767905886 | Program output: -85.0767057   
Correct output: -32.1846093265 | Program output: -1.003307     
Correct output: 66.9812146721  | Program output: 4.004603171   
Correct output: 100.0259781081 | Program output: 101.001029211 
Correct output: -90.2595503995 | Program output: -34.0791090   
Correct output: -82.4635707651 | Program output: -96.0659026   
Correct output: -8.7492896214  | Program output: -50.0312402   
Correct output: -82.1329348831 | Program output: -82.0796562   
Correct output: 24.5261129925  | Program output: -73.0405185   
Correct output: -11.4065589042 | Program output: -53.0602705   
Correct output: 10.3282540908  | Program output: -77.045777    
Correct output: -51.7760580299 | Program output: -78.0755930   
Correct output: 51.8185003253  | Program output: -1.004728451  
Correct output: 110.7431489201 | Program output: 88.00370273   
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_yankdup} {:instruction float_cos} {:instruction float_mult} {:instruction float_yankdup} {:instruction float_pop} {:instruction float_mult} {:instruction float_dup_times} {:instruction float_shove} {:instruction float_mult} {:instruction float_yankdup} {:instruction integer_dup_items} {:instruction float_mult} {:instruction float_yankdup} {:instruction float_pop} {:instruction float_frominteger} {:instruction float_dup_times} {:instruction float_mult} {:instruction float_dup_times} {:instruction float_shove} {:instruction float_pop} {:instruction float_mult} {:instruction in2} {:instruction integer_inc} {:instruction float_yank} {:instruction float_mult} {:instruction 28} {:instruction integer_add} {:instruction float_tan} {:instruction in1} {:instruction float_dup_times} {:instruction integer_mult} {:instruction 28} {:instruction integer_add} {:instruction float_pop} {:instruction float_dup_times} {:instruction float_mult} {:instruction 28} {:instruction integer_add} {:instruction float_pop} {:instruction integer_inc} {:instruction in2} {:instruction float_max} {:instruction float_rot} {:instruction float_dup_times} {:instruction integer_mult} {:instruction float_mult} {:instruction tag_float_282} {:instruction float_mult} {:instruction in2} {:instruction float_sub} {:instruction float_sub} {:instruction float_pop} {:instruction float_sin} {:instruction float_mult} {:instruction in2} {:instruction float_sub} {:instruction float_sub} {:instruction float_mult} {:instruction integer_dup} {:instruction float_max} {:instruction tagged_426} {:instruction tagged_496} {:instruction integer_shove} {:instruction float_mult} {:instruction float_min} {:instruction float_mult} {:instruction integer_mult} {:instruction integer_dup} {:instruction float_add} {:instruction integer_dup} {:instruction float_add} {:instruction integer_dec} {:instruction integer_mult} {:instruction float_mult} {:instruction float_tan} {:instruction float_tan} {:instruction in2} {:instruction float_max} {:instruction in2} {:instruction integer_fromfloat} {:instruction integer_dup} {:instruction integer_pop} {:instruction integer_dec} {:instruction float_cos} {:instruction float_frominteger} {:instruction integer_swap} {:instruction integer_mod} {:instruction integer_dup} {:instruction 80} {:instruction integer_mod} {:instruction integer_dup} {:instruction print_float} {:instruction float_frominteger} {:instruction print_integer} {:instruction float_dup_times} {:instruction integer_inc} {:instruction integer_max} {:instruction integer_stackdepth} {:instruction float_shove} {:instruction float_mult} {:instruction integer_max} {:instruction float_min} {:instruction float_inc} {:instruction integer_mult} {:instruction integer_shove} {:instruction print_integer} {:instruction integer_swap})
Best program: (float_yankdup float_cos float_mult float_yankdup float_pop float_mult float_dup_times float_shove float_mult float_yankdup integer_dup_items float_mult float_yankdup float_pop float_frominteger float_dup_times float_mult float_dup_times float_shove float_pop float_mult in2 integer_inc float_yank float_mult 28 integer_add float_tan in1 float_dup_times integer_mult 28 integer_add float_pop float_dup_times float_mult 28 integer_add float_pop integer_inc in2 float_max float_rot float_dup_times integer_mult float_mult tag_float_282 float_mult in2 float_sub float_sub float_pop float_sin float_mult in2 float_sub float_sub float_mult integer_dup float_max tagged_426 tagged_496 integer_shove float_mult float_min float_mult integer_mult integer_dup float_add integer_dup float_add integer_dec integer_mult float_mult float_tan float_tan in2 float_max in2 integer_fromfloat integer_dup integer_pop integer_dec float_cos float_frominteger integer_swap integer_mod integer_dup 80 integer_mod integer_dup print_float float_frominteger print_integer float_dup_times integer_inc integer_max integer_stackdepth float_shove float_mult integer_max float_min float_inc integer_mult integer_shove print_integer integer_swap)
Errors: [75.0362 8 7.8664 9 22.8296 9 82.4883 9 36.2442 10 8.7339 11 8.0398 8 34.7934 10 48.5558 10 15.2344 11 13.2261 10 86.9001 8 31.1813 10 62.9766 10 0.9751 9 56.1804 9 13.6023 8 41.282 10 0.0533 9 97.5666 11 41.6537 9 87.374 12 26.2995 10 52.8232 10 22.7394 11]
Total: 1215.6555999999998
Mean: 24.313112
Genome size: 107
Size: 108
Percent parens: 0.009
--- Population Statistics ---
Average total errors in population: 4339.085709799999
Median total errors in population: 1259.2202
Error averages by case: (248.88629640000138 8.884 124.04309579999943 9.864 105.11357639999943 9.933 136.17263499999916 10.476 121.70877350000063 11.0 103.21613100000056 10.995 101.85614059999959 8.479 133.69663429999986 11.98 118.97812210000046 10.763 200.8391585999986 11.023 103.58150859999998 10.692 255.53305830000005 9.783 104.35282609999997 10.807 121.97140729999958 11.212 102.50914529999996 9.829 233.2899599000011 10.243 194.20030720000014 9.462 218.87405480000194 10.74 183.66405089999935 9.428 256.88019189999864 11.92 219.35185259999912 9.569 249.7678617000014 11.861 203.07294759999917 10.044 124.54191389999974 10.091 112.68506000000046 11.221)
Error minima by case: (37.0764 7 3.8599 3 10.1667 3 2.4949 5 2.7671 8 2.7037 6 0.1889 2 0.2053 6 11.4423 3 9.7463 8 1.8152 6 83.8973 6 2.0 2 5.0188 7 0.009 4 11.2596 9 3.4636 8 7.282 8 0.0513 7 3.4739 9 4.6537 7 3.6717 7 25.2239 7 4.811 7 10.741 4)
Average genome size in population (length): 95.772
Average program size in population (points): 96.772
Average percent parens in population: 0.010
Minimum age in population: 249.1184496093416
Maximum age in population: 253.8570671721227
Average age in population: 251.97033010394
Median age in population: 252.0163984909724
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 47
Genome diversity (% unique Plush genomes):	 0.827
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 47
Syntactic diversity (% unique Push programs):	 0.827
Total error diversity:				 0.609
Error (vector) diversity:			 0.616
Behavioral diversity:				 0.616
--- Run Statistics ---
Number of program evaluations used so far: 182000
Number of point (instruction) evaluations so far: 344318018
--- Timings ---
Current time: 1529615651925 milliseconds
Total Time:         757.6 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       279.1 seconds, 36.8%
Fitness Testing:    379.4 seconds, 50.1%
Report:              98.9 seconds, 13.1%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 181
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 182
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 182
;;******************************
;; -*- Number IO problem report - generation 182
Test total error for best: 54766.03819999995
Test mean error for best: 27.38302
;;------------------------------
Outputs of best individual on training cases:
Correct output: -116.076402553 | Program output: -41.0401601   
Correct output: 24.1400847456  | Program output: 32.006481     
Correct output: 69.833290954   | Program output: 47.00370273   
Correct output: 82.4958592801  | Program output: 0.007587271   
Correct output: 34.2385110874  | Program output: -2.005652507  
Correct output: -10.7358110665 | Program output: -2.001936273  
Correct output: 1.9700532093   | Program output: 10.009901     
Correct output: -44.7956976677 | Program output: -10.002272557 
Correct output: 68.5576547673  | Program output: 20.001856407  
Correct output: -69.2536523379 | Program output: -54.0192810   
Correct output: -14.2275745396 | Program output: -1.001482307  
Correct output: -171.9767905886 | Program output: -85.0767057   
Correct output: -32.1846093265 | Program output: -1.003307     
Correct output: 66.9812146721  | Program output: 4.004603171   
Correct output: 100.0259781081 | Program output: 101.001029211 
Correct output: -90.2595503995 | Program output: -34.0791090   
Correct output: -82.4635707651 | Program output: -96.0659026   
Correct output: -8.7492896214  | Program output: -50.0312402   
Correct output: -82.1329348831 | Program output: -82.0796562   
Correct output: 24.5261129925  | Program output: -73.0405185   
Correct output: -11.4065589042 | Program output: -53.0602705   
Correct output: 10.3282540908  | Program output: -77.045777    
Correct output: -51.7760580299 | Program output: -78.0755930   
Correct output: 51.8185003253  | Program output: -1.004728451  
Correct output: 110.7431489201 | Program output: 88.00370273   
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_yankdup} {:instruction float_cos} {:instruction float_mult} {:instruction float_yankdup} {:instruction float_pop} {:instruction float_mult} {:instruction float_dup_times} {:instruction float_stackdepth} {:instruction float_mult} {:instruction float_yankdup} {:instruction integer_dup_items} {:instruction float_mult} {:instruction float_yankdup} {:instruction float_pop} {:instruction float_frominteger} {:instruction float_dup_times} {:instruction float_mult} {:instruction float_dup_times} {:instruction float_shove} {:instruction float_pop} {:instruction float_mult} {:instruction in2} {:instruction integer_inc} {:instruction float_yank} {:instruction float_mult} {:instruction 28} {:instruction integer_add} {:instruction float_tan} {:instruction in1} {:instruction float_dup_times} {:instruction integer_mult} {:instruction 28} {:instruction integer_add} {:instruction float_pop} {:instruction float_dup_times} {:instruction float_mult} {:instruction 28} {:instruction integer_add} {:instruction float_pop} {:instruction integer_inc} {:instruction in2} {:instruction float_max} {:instruction float_rot} {:instruction float_dup_times} {:instruction integer_mult} {:instruction float_mult} {:instruction tag_float_282} {:instruction float_mult} {:instruction in2} {:instruction float_sub} {:instruction float_sub} {:instruction float_pop} {:instruction float_sin} {:instruction float_mult} {:instruction in2} {:instruction float_sub} {:instruction float_sub} {:instruction float_mult} {:instruction integer_dup} {:instruction float_max} {:instruction tagged_426} {:instruction tagged_496} {:instruction integer_shove} {:instruction float_mult} {:instruction float_min} {:instruction float_mult} {:instruction integer_mult} {:instruction integer_dup} {:instruction float_add} {:instruction integer_dup} {:instruction float_add} {:instruction integer_dec} {:instruction integer_mult} {:instruction float_mult} {:instruction float_tan} {:instruction float_tan} {:instruction in2} {:instruction float_max} {:instruction in2} {:instruction integer_fromfloat} {:instruction integer_dup} {:instruction integer_pop} {:instruction integer_dec} {:instruction float_cos} {:instruction float_frominteger} {:instruction integer_swap} {:instruction integer_mod} {:instruction integer_dup} {:instruction 80} {:instruction integer_mod} {:instruction integer_dup} {:instruction print_float} {:instruction float_frominteger} {:instruction print_integer} {:instruction float_dup_times} {:instruction integer_inc} {:instruction integer_max} {:instruction integer_stackdepth} {:instruction float_shove} {:instruction float_mult} {:instruction integer_max} {:instruction float_min} {:instruction float_inc} {:instruction integer_mult} {:instruction integer_shove} {:instruction print_integer} {:instruction float_sin})
Best program: (float_yankdup float_cos float_mult float_yankdup float_pop float_mult float_dup_times float_stackdepth float_mult float_yankdup integer_dup_items float_mult float_yankdup float_pop float_frominteger float_dup_times float_mult float_dup_times float_shove float_pop float_mult in2 integer_inc float_yank float_mult 28 integer_add float_tan in1 float_dup_times integer_mult 28 integer_add float_pop float_dup_times float_mult 28 integer_add float_pop integer_inc in2 float_max float_rot float_dup_times integer_mult float_mult tag_float_282 float_mult in2 float_sub float_sub float_pop float_sin float_mult in2 float_sub float_sub float_mult integer_dup float_max tagged_426 tagged_496 integer_shove float_mult float_min float_mult integer_mult integer_dup float_add integer_dup float_add integer_dec integer_mult float_mult float_tan float_tan in2 float_max in2 integer_fromfloat integer_dup integer_pop integer_dec float_cos float_frominteger integer_swap integer_mod integer_dup 80 integer_mod integer_dup print_float float_frominteger print_integer float_dup_times integer_inc integer_max integer_stackdepth float_shove float_mult integer_max float_min float_inc integer_mult integer_shove print_integer float_sin)
Errors: [75.0362 8 7.8664 9 22.8296 9 82.4883 9 36.2442 10 8.7339 11 8.0398 8 34.7934 10 48.5558 10 15.2344 11 13.2261 10 86.9001 8 31.1813 10 62.9766 10 0.9751 9 56.1804 9 13.6023 8 41.282 10 0.0533 9 97.5666 11 41.6537 9 87.374 12 26.2995 10 52.8232 10 22.7394 11]
Total: 1215.6555999999998
Mean: 24.313112
Genome size: 107
Size: 108
Percent parens: 0.009
--- Population Statistics ---
Average total errors in population: 4937.052083799999
Median total errors in population: 1258.789
Error averages by case: (266.2949491000014 9.026 162.3609622999997 9.873 129.25723109999944 9.858 164.43718629999893 10.525 143.00999610000025 11.104 124.0601036000007 11.067 144.9220181999995 8.417 152.3019963000001 11.972 147.9562393000007 10.807 220.97363039999885 11.116 124.07512320000004 10.6 280.6711486000008 9.909 113.5449754999999 10.676 147.3440960999996 11.303 128.2215556999995 9.842 253.64349660000124 10.373 220.6839679000005 9.659 236.19802690000176 10.94 209.51075839999945 9.563 279.38715589999913 12.164 238.94926769999964 9.626 272.3072152000017 11.898 228.74241429999884 10.014 149.67148789999985 10.064 136.9190812000004 11.212)
Error minima by case: (35.0754 7 3.8599 3 10.1688 3 2.4864 6 5.2385 8 1.7339 3 0.9701 2 0.2127 3 11.447 3 14.1825 8 2.8145 3 2.9758 7 0.1585 2 5.0929 7 0.0162 4 23.2586 9 12.5364 7 6.7479 8 0.0329 6 3.4739 6 5.4066 7 2.6717 7 25.2239 7 5.1815 7 20.0 4)
Average genome size in population (length): 96.628
Average program size in population (points): 97.628
Average percent parens in population: 0.010
Minimum age in population: 250.4410222307499
Maximum age in population: 255.5784910255065
Average age in population: 253.3477712946822
Median age in population: 253.431917550968
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 50
Genome diversity (% unique Plush genomes):	 0.826
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 50
Syntactic diversity (% unique Push programs):	 0.826
Total error diversity:				 0.607
Error (vector) diversity:			 0.614
Behavioral diversity:				 0.614
--- Run Statistics ---
Number of program evaluations used so far: 183000
Number of point (instruction) evaluations so far: 346765996
--- Timings ---
Current time: 1529615657380 milliseconds
Total Time:         762.9 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       280.7 seconds, 36.8%
Fitness Testing:    382.3 seconds, 50.1%
Report:              99.8 seconds, 13.1%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 182
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 183
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 183
;;******************************
;; -*- Number IO problem report - generation 183
Test total error for best: 55330.86369999995
Test mean error for best: 27.66543
;;------------------------------
Outputs of best individual on training cases:
Correct output: -116.076402553 | Program output: -41.0401600   
Correct output: 24.1400847456  | Program output: 32.006480     
Correct output: 69.833290954   | Program output: 47.0057       
Correct output: 82.4958592801  | Program output: 0.0057        
Correct output: 34.2385110874  | Program output: -2.0057       
Correct output: -10.7358110665 | Program output: -2.0057       
Correct output: 1.9700532093   | Program output: -1.009900     
Correct output: -44.7956976677 | Program output: -10.0057      
Correct output: 68.5576547673  | Program output: 20.0057       
Correct output: -69.2536523379 | Program output: -54.0192809   
Correct output: -14.2275745396 | Program output: -1.0057       
Correct output: -171.9767905886 | Program output: -85.0767056   
Correct output: -32.1846093265 | Program output: -1.0026680    
Correct output: 66.9812146721  | Program output: 4.0057        
Correct output: 100.0259781081 | Program output: 101.0057      
Correct output: -90.2595503995 | Program output: -34.0791089   
Correct output: -82.4635707651 | Program output: -96.0659025   
Correct output: -8.7492896214  | Program output: -50.0312401   
Correct output: -82.1329348831 | Program output: -82.0796561   
Correct output: 24.5261129925  | Program output: -73.0405184   
Correct output: -11.4065589042 | Program output: -53.0602704   
Correct output: 10.3282540908  | Program output: -77.045776    
Correct output: -51.7760580299 | Program output: -78.0755929   
Correct output: 51.8185003253  | Program output: -1.0057       
Correct output: 110.7431489201 | Program output: 88.0057       
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_dup_items} {:instruction float_mult} {:instruction float_yankdup} {:instruction float_pop} {:instruction float_frominteger} {:instruction float_dup_times} {:instruction float_dup} {:instruction float_dup_times} {:instruction float_shove} {:instruction float_pop} {:instruction float_mult} {:instruction in2} {:instruction integer_inc} {:instruction float_yank} {:instruction float_mult} {:instruction 28} {:instruction integer_add} {:instruction float_tan} {:instruction in1} {:instruction float_dup_times} {:instruction in2} {:instruction integer_inc} {:instruction float_yank} {:instruction float_mult} {:instruction 28} {:instruction float_mult} {:instruction 28} {:instruction integer_add} {:instruction float_pop} {:instruction integer_inc} {:instruction in2} {:instruction float_max} {:instruction integer_dup_times} {:instruction float_dup_times} {:instruction integer_mult} {:instruction tag_float_282} {:instruction integer_max} {:instruction integer_inc} {:instruction in2} {:instruction float_max} {:instruction integer_dup} {:instruction tagged_8} {:instruction integer_min} {:instruction float_pop} {:instruction float_pop} {:instruction float_sin} {:instruction float_mult} {:instruction float_pop} {:instruction float_sin} {:instruction float_mult} {:instruction in2} {:instruction float_sub} {:instruction float_sub} {:instruction float_mult} {:instruction integer_dup} {:instruction float_max} {:instruction tagged_426} {:instruction tagged_496} {:instruction integer_shove} {:instruction float_mult} {:instruction float_min} {:instruction float_mult} {:instruction integer_mult} {:instruction integer_dup} {:instruction float_add} {:instruction integer_dup} {:instruction float_add} {:instruction integer_dec} {:instruction integer_mult} {:instruction float_mult} {:instruction float_tan} {:instruction float_tan} {:instruction in2} {:instruction float_max} {:instruction in2} {:instruction integer_fromfloat} {:instruction integer_dup} {:instruction integer_pop} {:instruction integer_dec} {:instruction float_cos} {:instruction float_frominteger} {:instruction integer_swap} {:instruction integer_mod} {:instruction integer_dup} {:instruction 80} {:instruction integer_mod} {:instruction integer_dup} {:instruction print_float} {:instruction float_frominteger} {:instruction print_integer} {:instruction float_dup_times} {:instruction float_mult} {:instruction tagged_587} {:instruction integer_stackdepth} {:instruction float_shove} {:instruction float_mult} {:instruction integer_max} {:instruction float_min} {:instruction float_inc} {:instruction integer_mult} {:instruction integer_shove} {:instruction print_integer} {:instruction integer_swap})
Best program: (integer_dup_items float_mult float_yankdup float_pop float_frominteger float_dup_times float_dup float_dup_times float_shove float_pop float_mult in2 integer_inc float_yank float_mult 28 integer_add float_tan in1 float_dup_times in2 integer_inc float_yank float_mult 28 float_mult 28 integer_add float_pop integer_inc in2 float_max integer_dup_times float_dup_times integer_mult tag_float_282 integer_max integer_inc in2 float_max integer_dup tagged_8 integer_min float_pop float_pop float_sin float_mult float_pop float_sin float_mult in2 float_sub float_sub float_mult integer_dup float_max tagged_426 tagged_496 integer_shove float_mult float_min float_mult integer_mult integer_dup float_add integer_dup float_add integer_dec integer_mult float_mult float_tan float_tan in2 float_max in2 integer_fromfloat integer_dup integer_pop integer_dec float_cos float_frominteger integer_swap integer_mod integer_dup 80 integer_mod integer_dup print_float float_frominteger print_integer float_dup_times float_mult tagged_587 integer_stackdepth float_shove float_mult integer_max float_min float_inc integer_mult integer_shove print_integer integer_swap)
Errors: [75.0362 8 7.8664 9 22.8276 9 82.4902 11 36.2442 10 8.7301 11 2.98 8 34.79 10 48.552 10 15.2344 10 13.2219 9 86.9001 7 31.1819 11 62.9755 11 0.9797 8 56.1804 9 13.6023 8 41.282 10 0.0533 8 97.5666 12 41.6537 8 87.374 12 26.2995 8 52.8242 8 22.7374 13]
Total: 1207.5836000000002
Mean: 24.151672
Genome size: 103
Size: 104
Percent parens: 0.010
--- Population Statistics ---
Average total errors in population: 5143.1427708
Median total errors in population: 1258.705
Error averages by case: (284.65071640000053 8.926 169.4659333999999 10.102 132.99285129999964 9.952 161.08613189999906 10.787 140.4860589000002 11.172 117.12873410000047 10.995 157.7939958999993 8.364 144.76495060000005 11.901 143.63493950000068 11.005 238.53040929999872 10.999 122.39816930000042 10.682 297.5526199000012 10.096 118.70702339999974 10.571 146.86316100000022 11.401 126.80274659999925 10.053 270.95285720000106 10.41 241.71713930000115 9.692 254.83272810000148 10.969 230.44729749999937 9.566 298.85629729999914 12.368 256.3688597 9.519 289.96586320000074 11.802 248.1183906999996 9.867 145.48849649999988 9.885 141.05939980000036 11.393)
Error minima by case: (74.0001 7 2.1401 4 9.1745 4 0.8001 6 4.1391 8 5.731 3 0.9108 2 3.7436 3 10.4511 3 14.1763 8 3.7724 3 85.9 7 1.8271 2 5.0933 7 0.0225 5 55.1803 9 12.5364 7 7.6563 8 0.0329 7 4.4739 9 7.4024 7 1.6717 8 25.2239 7 4.8185 8 18.0651 5)
Average genome size in population (length): 99.513
Average program size in population (points): 100.513
Average percent parens in population: 0.010
Minimum age in population: 252.5512538723305
Maximum age in population: 256.6744213968237
Average age in population: 254.7070523547083
Median age in population: 254.7637529779567
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 28
Genome diversity (% unique Plush genomes):	 0.828
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 28
Syntactic diversity (% unique Push programs):	 0.828
Total error diversity:				 0.623
Error (vector) diversity:			 0.632
Behavioral diversity:				 0.632
--- Run Statistics ---
Number of program evaluations used so far: 184000
Number of point (instruction) evaluations so far: 349290345
--- Timings ---
Current time: 1529615662799 milliseconds
Total Time:         768.5 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       282.3 seconds, 36.7%
Fitness Testing:    385.3 seconds, 50.1%
Report:             100.8 seconds, 13.1%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 183
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 184
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 184
;;******************************
;; -*- Number IO problem report - generation 184
Test total error for best: 55330.86369999995
Test mean error for best: 27.66543
;;------------------------------
Outputs of best individual on training cases:
Correct output: -116.076402553 | Program output: -41.0401600   
Correct output: 24.1400847456  | Program output: 32.006480     
Correct output: 69.833290954   | Program output: 47.0057       
Correct output: 82.4958592801  | Program output: 0.0057        
Correct output: 34.2385110874  | Program output: -2.0057       
Correct output: -10.7358110665 | Program output: -2.0057       
Correct output: 1.9700532093   | Program output: -1.009900     
Correct output: -44.7956976677 | Program output: -10.0057      
Correct output: 68.5576547673  | Program output: 20.0057       
Correct output: -69.2536523379 | Program output: -54.0192809   
Correct output: -14.2275745396 | Program output: -1.0057       
Correct output: -171.9767905886 | Program output: -85.0767056   
Correct output: -32.1846093265 | Program output: -1.0026680    
Correct output: 66.9812146721  | Program output: 4.0057        
Correct output: 100.0259781081 | Program output: 101.0057      
Correct output: -90.2595503995 | Program output: -34.0791089   
Correct output: -82.4635707651 | Program output: -96.0659025   
Correct output: -8.7492896214  | Program output: -50.0312401   
Correct output: -82.1329348831 | Program output: -82.0796561   
Correct output: 24.5261129925  | Program output: -73.0405184   
Correct output: -11.4065589042 | Program output: -53.0602704   
Correct output: 10.3282540908  | Program output: -77.045776    
Correct output: -51.7760580299 | Program output: -78.0755929   
Correct output: 51.8185003253  | Program output: -1.0057       
Correct output: 110.7431489201 | Program output: 88.0057       
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_dup_items} {:instruction float_mult} {:instruction float_yankdup} {:instruction float_yankdup} {:instruction float_cos} {:instruction integer_dup_items} {:instruction float_mult} {:instruction float_yankdup} {:instruction float_pop} {:instruction float_frominteger} {:instruction float_dup_times} {:instruction float_dup_times} {:instruction float_mult} {:instruction float_dup_times} {:instruction float_shove} {:instruction float_pop} {:instruction float_pop} {:instruction float_frominteger} {:instruction float_dup_times} {:instruction float_mult} {:instruction float_dup_times} {:instruction float_shove} {:instruction float_pop} {:instruction float_mult} {:instruction in2} {:instruction integer_inc} {:instruction float_yank} {:instruction float_mult} {:instruction 28} {:instruction integer_add} {:instruction float_tan} {:instruction in1} {:instruction float_dup_times} {:instruction float_mult} {:instruction 28} {:instruction integer_add} {:instruction float_mult} {:instruction 28} {:instruction integer_add} {:instruction float_pop} {:instruction integer_inc} {:instruction in2} {:instruction float_max} {:instruction integer_dup_times} {:instruction float_dup_times} {:instruction integer_mult} {:instruction tag_float_282} {:instruction integer_max} {:instruction integer_inc} {:instruction in2} {:instruction float_max} {:instruction integer_dup} {:instruction tagged_8} {:instruction integer_min} {:instruction float_pop} {:instruction float_pop} {:instruction float_sin} {:instruction float_mult} {:instruction float_pop} {:instruction float_sin} {:instruction float_mult} {:instruction in2} {:instruction float_sub} {:instruction float_sub} {:instruction float_mult} {:instruction integer_dup} {:instruction float_max} {:instruction tagged_426} {:instruction tagged_496} {:instruction integer_shove} {:instruction float_mult} {:instruction float_min} {:instruction float_mult} {:instruction integer_mult} {:instruction integer_dup} {:instruction float_add} {:instruction integer_dup} {:instruction float_add} {:instruction integer_dec} {:instruction integer_mult} {:instruction float_mult} {:instruction float_tan} {:instruction float_tan} {:instruction in2} {:instruction float_max} {:instruction in2} {:instruction integer_fromfloat} {:instruction integer_dup} {:instruction integer_pop} {:instruction integer_dec} {:instruction float_cos} {:instruction float_frominteger} {:instruction integer_swap} {:instruction integer_mod} {:instruction integer_dup} {:instruction 80} {:instruction integer_mod} {:instruction integer_dup} {:instruction print_float} {:instruction float_frominteger} {:instruction print_integer} {:instruction float_dup_times} {:instruction float_mult} {:instruction tagged_587} {:instruction integer_stackdepth} {:instruction float_shove} {:instruction float_mult} {:instruction integer_max} {:instruction float_min} {:instruction float_inc} {:instruction integer_mult} {:instruction integer_shove} {:instruction print_integer} {:instruction integer_swap})
Best program: (integer_dup_items float_mult float_yankdup float_yankdup float_cos integer_dup_items float_mult float_yankdup float_pop float_frominteger float_dup_times float_dup_times float_mult float_dup_times float_shove float_pop float_pop float_frominteger float_dup_times float_mult float_dup_times float_shove float_pop float_mult in2 integer_inc float_yank float_mult 28 integer_add float_tan in1 float_dup_times float_mult 28 integer_add float_mult 28 integer_add float_pop integer_inc in2 float_max integer_dup_times float_dup_times integer_mult tag_float_282 integer_max integer_inc in2 float_max integer_dup tagged_8 integer_min float_pop float_pop float_sin float_mult float_pop float_sin float_mult in2 float_sub float_sub float_mult integer_dup float_max tagged_426 tagged_496 integer_shove float_mult float_min float_mult integer_mult integer_dup float_add integer_dup float_add integer_dec integer_mult float_mult float_tan float_tan in2 float_max in2 integer_fromfloat integer_dup integer_pop integer_dec float_cos float_frominteger integer_swap integer_mod integer_dup 80 integer_mod integer_dup print_float float_frominteger print_integer float_dup_times float_mult tagged_587 integer_stackdepth float_shove float_mult integer_max float_min float_inc integer_mult integer_shove print_integer integer_swap)
Errors: [75.0362 8 7.8664 9 22.8276 9 82.4902 11 36.2442 10 8.7301 11 2.98 8 34.79 10 48.552 10 15.2344 10 13.2219 9 86.9001 7 31.1819 11 62.9755 11 0.9797 8 56.1804 9 13.6023 8 41.282 10 0.0533 8 97.5666 12 41.6537 8 87.374 12 26.2995 8 52.8242 8 22.7374 13]
Total: 1207.5836000000002
Mean: 24.151672
Genome size: 114
Size: 115
Percent parens: 0.009
--- Population Statistics ---
Average total errors in population: 4985.426672800001
Median total errors in population: 1268.6964500000001
Error averages by case: (277.005143300001 8.862 181.33071540000003 9.996 122.54065950000005 9.859 150.66661949999914 10.829 134.7669410000005 11.081 113.29460920000054 10.99 172.77054439999915 8.309 142.29742479999993 11.679 138.56852660000044 11.094 231.047555999999 11.059 116.91410880000045 10.736 292.1488495000011 10.053 108.93199819999971 10.524 134.6921277000005 11.322 120.50805889999923 10.027 263.03119860000055 10.368 234.104305400001 9.713 245.5259295000015 10.971 222.64261589999916 9.587 286.8632775999994 12.314 247.09041600000003 9.503 279.8002616000003 11.779 238.30635149999958 9.935 138.5017992999999 9.683 130.37063460000002 11.433)
Error minima by case: (35.0364 6 3.1401 4 10.1696 4 2.493 8 5.2385 8 5.7133 5 0.1426 3 3.7836 5 11.4452 4 14.2069 6 3.7724 5 2.9008 6 2.0 4 5.0209 7 0.0091 5 23.2266 6 12.5364 8 2.7464 8 0.0329 6 14.5139 6 7.4024 7 4.7437 6 25.2239 7 8.8169 7 3.7431 5)
Average genome size in population (length): 102.104
Average program size in population (points): 103.104
Average percent parens in population: 0.010
Minimum age in population: 253.5512538723305
Maximum age in population: 258.1721313511772
Average age in population: 256.0707532599546
Median age in population: 256.1452369541846
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 21
Genome diversity (% unique Plush genomes):	 0.849
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 21
Syntactic diversity (% unique Push programs):	 0.849
Total error diversity:				 0.645
Error (vector) diversity:			 0.657
Behavioral diversity:				 0.658
--- Run Statistics ---
Number of program evaluations used so far: 185000
Number of point (instruction) evaluations so far: 351883488
--- Timings ---
Current time: 1529615668267 milliseconds
Total Time:         773.9 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       283.8 seconds, 36.7%
Fitness Testing:    388.4 seconds, 50.2%
Report:             101.6 seconds, 13.1%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 184
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 185
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 185
;;******************************
;; -*- Number IO problem report - generation 185
Test total error for best: 55330.86369999995
Test mean error for best: 27.66543
;;------------------------------
Outputs of best individual on training cases:
Correct output: -116.076402553 | Program output: -41.0401600   
Correct output: 24.1400847456  | Program output: 32.006480     
Correct output: 69.833290954   | Program output: 47.0057       
Correct output: 82.4958592801  | Program output: 0.0057        
Correct output: 34.2385110874  | Program output: -2.0057       
Correct output: -10.7358110665 | Program output: -2.0057       
Correct output: 1.9700532093   | Program output: -1.009900     
Correct output: -44.7956976677 | Program output: -10.0057      
Correct output: 68.5576547673  | Program output: 20.0057       
Correct output: -69.2536523379 | Program output: -54.0192809   
Correct output: -14.2275745396 | Program output: -1.0057       
Correct output: -171.9767905886 | Program output: -85.0767056   
Correct output: -32.1846093265 | Program output: -1.0026680    
Correct output: 66.9812146721  | Program output: 4.0057        
Correct output: 100.0259781081 | Program output: 101.0057      
Correct output: -90.2595503995 | Program output: -34.0791089   
Correct output: -82.4635707651 | Program output: -96.0659025   
Correct output: -8.7492896214  | Program output: -50.0312401   
Correct output: -82.1329348831 | Program output: -82.0796561   
Correct output: 24.5261129925  | Program output: -73.0405184   
Correct output: -11.4065589042 | Program output: -53.0602704   
Correct output: 10.3282540908  | Program output: -77.045776    
Correct output: -51.7760580299 | Program output: -78.0755929   
Correct output: 51.8185003253  | Program output: -1.0057       
Correct output: 110.7431489201 | Program output: 88.0057       
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_dup_items} {:instruction float_mult} {:instruction float_yankdup} {:instruction float_yankdup} {:instruction float_cos} {:instruction integer_dup_items} {:instruction float_mult} {:instruction float_yankdup} {:instruction float_pop} {:instruction float_frominteger} {:instruction float_dup_times} {:instruction float_dup_times} {:instruction float_mult} {:instruction float_dup_times} {:instruction float_shove} {:instruction float_pop} {:instruction float_pop} {:instruction float_frominteger} {:instruction float_yank} {:instruction float_mult} {:instruction float_dup_times} {:instruction float_shove} {:instruction float_pop} {:instruction float_mult} {:instruction in2} {:instruction integer_inc} {:instruction float_yank} {:instruction float_mult} {:instruction 28} {:instruction integer_add} {:instruction float_tan} {:instruction in1} {:instruction float_dup_times} {:instruction float_mult} {:instruction 28} {:instruction integer_add} {:instruction float_mult} {:instruction 28} {:instruction integer_add} {:instruction float_pop} {:instruction integer_inc} {:instruction in2} {:instruction float_max} {:instruction integer_dup_times} {:instruction float_dup_times} {:instruction integer_mult} {:instruction tag_float_282} {:instruction integer_max} {:instruction integer_inc} {:instruction in2} {:instruction float_max} {:instruction integer_dup} {:instruction tagged_8} {:instruction integer_min} {:instruction float_pop} {:instruction float_pop} {:instruction float_sin} {:instruction float_mult} {:instruction float_pop} {:instruction float_sin} {:instruction float_mult} {:instruction in2} {:instruction float_sub} {:instruction float_sub} {:instruction float_mult} {:instruction integer_dup} {:instruction float_max} {:instruction tagged_426} {:instruction tagged_496} {:instruction integer_shove} {:instruction float_mult} {:instruction float_min} {:instruction float_mult} {:instruction integer_mult} {:instruction integer_dup} {:instruction float_add} {:instruction integer_dup} {:instruction float_add} {:instruction integer_dec} {:instruction integer_mult} {:instruction float_mult} {:instruction float_tan} {:instruction float_tan} {:instruction in2} {:instruction float_max} {:instruction in2} {:instruction integer_fromfloat} {:instruction integer_dup} {:instruction integer_pop} {:instruction integer_dec} {:instruction float_cos} {:instruction float_frominteger} {:instruction integer_swap} {:instruction integer_mod} {:instruction integer_dup} {:instruction 80} {:instruction integer_mod} {:instruction integer_dup} {:instruction print_float} {:instruction float_frominteger} {:instruction print_integer} {:instruction float_dup_times} {:instruction float_mult} {:instruction tagged_587} {:instruction integer_stackdepth} {:instruction float_shove} {:instruction float_mult} {:instruction integer_max} {:instruction float_min} {:instruction float_inc} {:instruction integer_mult} {:instruction integer_shove} {:instruction print_integer} {:instruction integer_swap})
Best program: (integer_dup_items float_mult float_yankdup float_yankdup float_cos integer_dup_items float_mult float_yankdup float_pop float_frominteger float_dup_times float_dup_times float_mult float_dup_times float_shove float_pop float_pop float_frominteger float_yank float_mult float_dup_times float_shove float_pop float_mult in2 integer_inc float_yank float_mult 28 integer_add float_tan in1 float_dup_times float_mult 28 integer_add float_mult 28 integer_add float_pop integer_inc in2 float_max integer_dup_times float_dup_times integer_mult tag_float_282 integer_max integer_inc in2 float_max integer_dup tagged_8 integer_min float_pop float_pop float_sin float_mult float_pop float_sin float_mult in2 float_sub float_sub float_mult integer_dup float_max tagged_426 tagged_496 integer_shove float_mult float_min float_mult integer_mult integer_dup float_add integer_dup float_add integer_dec integer_mult float_mult float_tan float_tan in2 float_max in2 integer_fromfloat integer_dup integer_pop integer_dec float_cos float_frominteger integer_swap integer_mod integer_dup 80 integer_mod integer_dup print_float float_frominteger print_integer float_dup_times float_mult tagged_587 integer_stackdepth float_shove float_mult integer_max float_min float_inc integer_mult integer_shove print_integer integer_swap)
Errors: [75.0362 8 7.8664 9 22.8276 9 82.4902 11 36.2442 10 8.7301 11 2.98 8 34.79 10 48.552 10 15.2344 10 13.2219 9 86.9001 7 31.1819 11 62.9755 11 0.9797 8 56.1804 9 13.6023 8 41.282 10 0.0533 8 97.5666 12 41.6537 8 87.374 12 26.2995 8 52.8242 8 22.7374 13]
Total: 1207.5836000000002
Mean: 24.151672
Genome size: 114
Size: 115
Percent parens: 0.009
--- Population Statistics ---
Average total errors in population: 5078.7513004
Median total errors in population: 1268.7158
Error averages by case: (284.2384675000003 8.835 164.29809539999957 9.851 129.39125560000005 9.917 158.9359365999991 10.825 140.28056010000037 11.135 116.32210950000086 11.09 151.0160927999994 8.383 143.61423689999995 11.606 145.31729560000065 11.076 237.96051559999827 11.066 119.50869140000032 10.722 295.3166128000006 9.832 113.50619049999956 10.443 141.96659409999998 11.324 125.29272549999949 10.007 268.2944947000014 10.231 238.35318040000053 9.587 254.05653950000178 10.842 228.13448899999963 9.458 294.8399831999993 12.054 254.91955459999943 9.506 286.6024118000014 11.792 245.64657909999866 9.993 146.22831849999997 9.877 133.81236970000023 11.446)
Error minima by case: (26.7866 4 1.0688 4 1.8121 4 11.5041 8 5.2385 8 5.731 4 0.7767 3 3.7836 4 1.5102 4 14.2338 4 3.8145 4 2.9768 4 1.8173 3 6.0188 7 0.023 5 0.9697 4 6.8262 8 2.7468 8 0.0329 4 9.5101 4 9.4046 7 3.6814 4 25.2239 8 5.1815 7 1.7219 5)
Average genome size in population (length): 102.911
Average program size in population (points): 103.911
Average percent parens in population: 0.010
Minimum age in population: 255.0019101895763
Maximum age in population: 259.8129074630697
Average age in population: 257.3385302961711
Median age in population: 257.4142072678035
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 26
Genome diversity (% unique Plush genomes):	 0.867
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 26
Syntactic diversity (% unique Push programs):	 0.867
Total error diversity:				 0.664
Error (vector) diversity:			 0.668
Behavioral diversity:				 0.669
--- Run Statistics ---
Number of program evaluations used so far: 186000
Number of point (instruction) evaluations so far: 354495653
--- Timings ---
Current time: 1529615673710 milliseconds
Total Time:         779.4 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       285.3 seconds, 36.6%
Fitness Testing:    391.5 seconds, 50.2%
Report:             102.5 seconds, 13.1%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 185
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 186
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 186
;;******************************
;; -*- Number IO problem report - generation 186
Test total error for best: 55330.86369999995
Test mean error for best: 27.66543
;;------------------------------
Outputs of best individual on training cases:
Correct output: -116.076402553 | Program output: -41.0401600   
Correct output: 24.1400847456  | Program output: 32.006480     
Correct output: 69.833290954   | Program output: 47.0057       
Correct output: 82.4958592801  | Program output: 0.0057        
Correct output: 34.2385110874  | Program output: -2.0057       
Correct output: -10.7358110665 | Program output: -2.0057       
Correct output: 1.9700532093   | Program output: -1.009900     
Correct output: -44.7956976677 | Program output: -10.0057      
Correct output: 68.5576547673  | Program output: 20.0057       
Correct output: -69.2536523379 | Program output: -54.0192809   
Correct output: -14.2275745396 | Program output: -1.0057       
Correct output: -171.9767905886 | Program output: -85.0767056   
Correct output: -32.1846093265 | Program output: -1.0026680    
Correct output: 66.9812146721  | Program output: 4.0057        
Correct output: 100.0259781081 | Program output: 101.0057      
Correct output: -90.2595503995 | Program output: -34.0791089   
Correct output: -82.4635707651 | Program output: -96.0659025   
Correct output: -8.7492896214  | Program output: -50.0312401   
Correct output: -82.1329348831 | Program output: -82.0796561   
Correct output: 24.5261129925  | Program output: -73.0405184   
Correct output: -11.4065589042 | Program output: -53.0602704   
Correct output: 10.3282540908  | Program output: -77.045776    
Correct output: -51.7760580299 | Program output: -78.0755929   
Correct output: 51.8185003253  | Program output: -1.0057       
Correct output: 110.7431489201 | Program output: 88.0057       
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_dup_items} {:instruction float_mult} {:instruction float_yankdup} {:instruction float_yankdup} {:instruction float_cos} {:instruction integer_dup_items} {:instruction float_mult} {:instruction float_yankdup} {:instruction float_pop} {:instruction float_frominteger} {:instruction float_dup_times} {:instruction float_dup_times} {:instruction float_mult} {:instruction float_dup_times} {:instruction float_shove} {:instruction float_pop} {:instruction float_pop} {:instruction float_frominteger} {:instruction float_dup_times} {:instruction float_mult} {:instruction float_dup_times} {:instruction float_shove} {:instruction integer_dup_times} {:instruction float_mult} {:instruction in2} {:instruction integer_inc} {:instruction float_yank} {:instruction float_mult} {:instruction 28} {:instruction integer_add} {:instruction float_tan} {:instruction in1} {:instruction float_dup_times} {:instruction float_mult} {:instruction 28} {:instruction integer_add} {:instruction float_mult} {:instruction 28} {:instruction integer_add} {:instruction float_pop} {:instruction integer_inc} {:instruction in2} {:instruction float_max} {:instruction integer_dup_times} {:instruction float_dup_times} {:instruction integer_mult} {:instruction tag_float_282} {:instruction integer_max} {:instruction integer_inc} {:instruction in2} {:instruction float_max} {:instruction integer_dup} {:instruction tagged_8} {:instruction integer_min} {:instruction float_pop} {:instruction float_pop} {:instruction float_sin} {:instruction float_mult} {:instruction float_pop} {:instruction float_sin} {:instruction float_mult} {:instruction in2} {:instruction float_sub} {:instruction float_sub} {:instruction float_mult} {:instruction integer_dup} {:instruction float_max} {:instruction tagged_426} {:instruction tagged_496} {:instruction integer_shove} {:instruction float_mult} {:instruction float_min} {:instruction float_mult} {:instruction integer_mult} {:instruction integer_dup} {:instruction float_add} {:instruction integer_dup} {:instruction float_add} {:instruction integer_dec} {:instruction integer_mult} {:instruction float_mult} {:instruction float_tan} {:instruction float_tan} {:instruction in2} {:instruction float_max} {:instruction in2} {:instruction integer_fromfloat} {:instruction integer_dup} {:instruction integer_pop} {:instruction integer_dec} {:instruction float_cos} {:instruction float_frominteger} {:instruction integer_swap} {:instruction integer_mod} {:instruction integer_dup} {:instruction 80} {:instruction integer_mod} {:instruction integer_dup} {:instruction print_float} {:instruction float_frominteger} {:instruction print_integer} {:instruction float_dup_times} {:instruction float_mult} {:instruction tagged_587} {:instruction integer_stackdepth} {:instruction float_shove} {:instruction float_mult} {:instruction integer_max} {:instruction float_min} {:instruction float_inc} {:instruction integer_mult} {:instruction integer_shove} {:instruction print_integer} {:instruction integer_swap})
Best program: (integer_dup_items float_mult float_yankdup float_yankdup float_cos integer_dup_items float_mult float_yankdup float_pop float_frominteger float_dup_times float_dup_times float_mult float_dup_times float_shove float_pop float_pop float_frominteger float_dup_times float_mult float_dup_times float_shove integer_dup_times float_mult in2 integer_inc float_yank float_mult 28 integer_add float_tan in1 float_dup_times float_mult 28 integer_add float_mult 28 integer_add float_pop integer_inc in2 float_max integer_dup_times float_dup_times integer_mult tag_float_282 integer_max integer_inc in2 float_max integer_dup tagged_8 integer_min float_pop float_pop float_sin float_mult float_pop float_sin float_mult in2 float_sub float_sub float_mult integer_dup float_max tagged_426 tagged_496 integer_shove float_mult float_min float_mult integer_mult integer_dup float_add integer_dup float_add integer_dec integer_mult float_mult float_tan float_tan in2 float_max in2 integer_fromfloat integer_dup integer_pop integer_dec float_cos float_frominteger integer_swap integer_mod integer_dup 80 integer_mod integer_dup print_float float_frominteger print_integer float_dup_times float_mult tagged_587 integer_stackdepth float_shove float_mult integer_max float_min float_inc integer_mult integer_shove print_integer integer_swap)
Errors: [75.0362 8 7.8664 9 22.8276 9 82.4902 11 36.2442 10 8.7301 11 2.98 8 34.79 10 48.552 10 15.2344 10 13.2219 9 86.9001 7 31.1819 11 62.9755 11 0.9797 8 56.1804 9 13.6023 8 41.282 10 0.0533 8 97.5666 12 41.6537 8 87.374 12 26.2995 8 52.8242 8 22.7374 13]
Total: 1207.5836000000002
Mean: 24.151672
Genome size: 114
Size: 115
Percent parens: 0.009
--- Population Statistics ---
Average total errors in population: 5012.0198918
Median total errors in population: 1269.1836500000002
Error averages by case: (280.9671983000005 8.886 154.47397669999972 9.897 123.6270418999998 10.016 154.39372369999936 10.871 136.35667110000068 11.047 110.90433260000063 11.112 138.89903319999942 8.537 140.9758266999998 11.608 138.98486020000044 10.959 235.84023379999806 11.033 119.59429650000007 10.769 295.78577860000115 9.692 111.76085989999933 10.504 138.8034911999998 11.221 124.29846129999973 9.982 267.104819900002 10.228 236.65893499999999 9.448 252.32861710000182 10.737 228.7537446999996 9.458 297.80717759999936 11.924 253.55670919999918 9.537 288.852447500002 11.916 246.96442069999858 10.092 140.7204308999999 10.044 132.6318035000005 11.457)
Error minima by case: (40.0 4 1.8629 4 7.1689 4 3.4883 7 1.2303 9 1.7346 4 0.9644 3 7.2563 4 6.4442 4 14.1814 4 2.8182 4 84.0 4 1.0687 3 5.0929 7 0.0092 5 33.0 4 11.6014 8 2.6703 8 0.0364 4 8.4739 4 10.3266 7 3.6775 4 16.8844 7 18.811 7 20.741 5)
Average genome size in population (length): 103.709
Average program size in population (points): 104.709
Average percent parens in population: 0.010
Minimum age in population: 256.0019101895763
Maximum age in population: 260.788466858563
Average age in population: 258.6226032985983
Median age in population: 258.6847814635089
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 18
Genome diversity (% unique Plush genomes):	 0.89
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 18
Syntactic diversity (% unique Push programs):	 0.89
Total error diversity:				 0.658
Error (vector) diversity:			 0.663
Behavioral diversity:				 0.663
--- Run Statistics ---
Number of program evaluations used so far: 187000
Number of point (instruction) evaluations so far: 357125174
--- Timings ---
Current time: 1529615679244 milliseconds
Total Time:         784.9 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       286.8 seconds, 36.5%
Fitness Testing:    394.7 seconds, 50.3%
Report:             103.3 seconds, 13.2%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 186
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 187
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 187
;;******************************
;; -*- Number IO problem report - generation 187
Test total error for best: 55753.526299999925
Test mean error for best: 27.87676
;;------------------------------
Outputs of best individual on training cases:
Correct output: -116.076402553 | Program output: -41.040281600 
Correct output: 24.1400847456  | Program output: 32.008181     
Correct output: 69.833290954   | Program output: 47.00219261   
Correct output: 82.4958592801  | Program output: -1.0095857375 
Correct output: 34.2385110874  | Program output: -1.0082551368 
Correct output: -10.7358110665 | Program output: -1.0048110592 
Correct output: 1.9700532093   | Program output: 10.00100100   
Correct output: -44.7956976677 | Program output: 1.0052140608  
Correct output: 68.5576547673  | Program output: 20.0047103823 
Correct output: -69.2536523379 | Program output: -54.019282809 
Correct output: -14.2275745396 | Program output: 0.004274088   
Correct output: -171.9767905886 | Program output: -85.076287056 
Correct output: -32.1846093265 | Program output: -1.0028       
Correct output: 66.9812146721  | Program output: 69.0074405224 
Correct output: 100.0259781081 | Program output: 64.003542875  
Correct output: -90.2595503995 | Program output: -34.079281089 
Correct output: -82.4635707651 | Program output: -96.065289025 
Correct output: -8.7492896214  | Program output: -50.031282401 
Correct output: -82.1329348831 | Program output: -82.079286561 
Correct output: 24.5261129925  | Program output: -73.040285184 
Correct output: -11.4065589042 | Program output: -53.060282704 
Correct output: 10.3282540908  | Program output: -77.04285776  
Correct output: -51.7760580299 | Program output: -78.075285929 
Correct output: 51.8185003253  | Program output: -1.0075421875 
Correct output: 110.7431489201 | Program output: 88.00219261   
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_dup_items} {:instruction float_mult} {:instruction float_yankdup} {:instruction float_pop} {:instruction float_frominteger} {:instruction float_dup_times} {:instruction float_mult} {:instruction float_pop} {:instruction float_shove} {:instruction float_pop} {:instruction float_mult} {:instruction in2} {:instruction 28} {:instruction integer_add} {:instruction float_tan} {:instruction in1} {:instruction float_dup_times} {:instruction float_mult} {:instruction 28} {:instruction integer_add} {:instruction float_pop} {:instruction float_dup_times} {:instruction float_mult} {:instruction float_mult} {:instruction tag_float_216} {:instruction integer_max} {:instruction float_inc} {:instruction in2} {:instruction float_max} {:instruction integer_dup} {:instruction tagged_72} {:instruction integer_mult} {:instruction float_mult} {:instruction float_pop} {:instruction float_sin} {:instruction float_mult} {:instruction in2} {:instruction float_sub} {:instruction float_sub} {:instruction float_mult} {:instruction integer_dup} {:instruction integer_dup} {:instruction tagged_426} {:instruction tagged_496} {:instruction integer_shove} {:instruction float_pop} {:instruction float_min} {:instruction float_mult} {:instruction integer_mult} {:instruction integer_dup} {:instruction float_add} {:instruction float_pop} {:instruction float_sin} {:instruction float_mult} {:instruction in2} {:instruction float_sub} {:instruction float_sub} {:instruction float_mult} {:instruction integer_dup} {:instruction float_max} {:instruction tagged_426} {:instruction tagged_496} {:instruction integer_mult} {:instruction integer_dup} {:instruction float_add} {:instruction integer_dup} {:instruction float_add} {:instruction integer_dec} {:instruction integer_mult} {:instruction float_mult} {:instruction float_tan} {:instruction float_tan} {:instruction in2} {:instruction float_max} {:instruction in2} {:instruction integer_fromfloat} {:instruction integer_dup} {:instruction integer_pop} {:instruction integer_dec} {:instruction float_cos} {:instruction float_frominteger} {:instruction integer_swap} {:instruction integer_mod} {:instruction integer_dup} {:instruction 80} {:instruction integer_mod} {:instruction integer_dup} {:instruction print_float} {:instruction float_frominteger} {:instruction print_integer} {:instruction float_dup_times} {:instruction float_mult} {:instruction tagged_587} {:instruction integer_stackdepth} {:instruction float_shove} {:instruction float_mult} {:instruction integer_max} {:instruction float_min} {:instruction float_inc} {:instruction integer_mult} {:instruction integer_shove} {:instruction print_integer} {:instruction float_mult} {:instruction integer_max} {:instruction float_min} {:instruction float_inc} {:instruction integer_mult} {:instruction integer_shove} {:instruction print_integer} {:instruction integer_swap})
Best program: (integer_dup_items float_mult float_yankdup float_pop float_frominteger float_dup_times float_mult float_pop float_shove float_pop float_mult in2 28 integer_add float_tan in1 float_dup_times float_mult 28 integer_add float_pop float_dup_times float_mult float_mult tag_float_216 integer_max float_inc in2 float_max integer_dup tagged_72 integer_mult float_mult float_pop float_sin float_mult in2 float_sub float_sub float_mult integer_dup integer_dup tagged_426 tagged_496 integer_shove float_pop float_min float_mult integer_mult integer_dup float_add float_pop float_sin float_mult in2 float_sub float_sub float_mult integer_dup float_max tagged_426 tagged_496 integer_mult integer_dup float_add integer_dup float_add integer_dec integer_mult float_mult float_tan float_tan in2 float_max in2 integer_fromfloat integer_dup integer_pop integer_dec float_cos float_frominteger integer_swap integer_mod integer_dup 80 integer_mod integer_dup print_float float_frominteger print_integer float_dup_times float_mult tagged_587 integer_stackdepth float_shove float_mult integer_max float_min float_inc integer_mult integer_shove print_integer float_mult integer_max float_min float_inc integer_mult integer_shove print_integer integer_swap)
Errors: [75.0361 9 7.8681 9 22.8311 10 83.5054 9 35.2468 10 9.731 7 8.0309 9 45.8009 11 48.5529 11 15.2344 10 14.2318 11 86.9005 9 31.1818 10 2.0262 10 36.0224 11 56.1803 10 13.6017 10 41.282 9 0.0536 8 97.5664 13 41.6537 8 87.3711 11 26.2992 9 52.826 10 22.741 9]
Total: 1204.7753
Mean: 24.095507
Genome size: 110
Size: 111
Percent parens: 0.009
--- Population Statistics ---
Average total errors in population: 5238.118257800001
Median total errors in population: 1264.5425
Error averages by case: (284.1556262000003 8.89 169.31830119999952 9.925 142.61071219999963 10.098 165.1917926999991 10.897 147.51951690000018 11.07 130.9209200000007 11.221 148.57754409999927 8.636 159.51383369999994 11.688 160.71867100000085 10.928 239.21851239999845 10.973 129.96384630000014 10.856 295.97619160000085 9.703 126.64243159999927 10.634 148.30047169999978 11.309 142.49639799999994 10.024 270.1745399000017 10.269 235.38619399999993 9.456 255.25008390000178 10.721 227.14138619999954 9.428 299.0846152999996 11.961 258.1893064999988 9.563 290.2794347000015 11.909 246.96452639999842 10.041 153.1427585999998 10.058 149.62864270000037 11.494)
Error minima by case: (74.0362 7 0.8652 4 8.8121 4 2.4959 7 4.2385 8 4.731 5 0.8989 4 7.0824 5 6.4472 4 14.2082 8 5.2218 5 3.9768 7 2.0 3 2.0262 7 0.0231 5 55.1804 8 11.5364 8 7.7417 7 0.0523 6 2.5261 9 10.399 7 1.3283 8 24.2239 7 8.8138 7 21.0 5)
Average genome size in population (length): 104.555
Average program size in population (points): 105.555
Average percent parens in population: 0.010
Minimum age in population: 257.0069513102367
Maximum age in population: 261.8684701594946
Average age in population: 259.9038758306199
Median age in population: 259.9672944674099
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 14
Genome diversity (% unique Plush genomes):	 0.881
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 14
Syntactic diversity (% unique Push programs):	 0.881
Total error diversity:				 0.653
Error (vector) diversity:			 0.66
Behavioral diversity:				 0.66
--- Run Statistics ---
Number of program evaluations used so far: 188000
Number of point (instruction) evaluations so far: 359777124
--- Timings ---
Current time: 1529615684896 milliseconds
Total Time:         790.6 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       288.4 seconds, 36.5%
Fitness Testing:    397.9 seconds, 50.3%
Report:             104.2 seconds, 13.2%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 187
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 188
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 188
;;******************************
;; -*- Number IO problem report - generation 188
Test total error for best: 55753.526299999925
Test mean error for best: 27.87676
;;------------------------------
Outputs of best individual on training cases:
Correct output: -116.076402553 | Program output: -41.040281600 
Correct output: 24.1400847456  | Program output: 32.008181     
Correct output: 69.833290954   | Program output: 47.00219261   
Correct output: 82.4958592801  | Program output: -1.0095857375 
Correct output: 34.2385110874  | Program output: -1.0082551368 
Correct output: -10.7358110665 | Program output: -1.0048110592 
Correct output: 1.9700532093   | Program output: 10.00100100   
Correct output: -44.7956976677 | Program output: 1.0052140608  
Correct output: 68.5576547673  | Program output: 20.0047103823 
Correct output: -69.2536523379 | Program output: -54.019282809 
Correct output: -14.2275745396 | Program output: 0.004274088   
Correct output: -171.9767905886 | Program output: -85.076287056 
Correct output: -32.1846093265 | Program output: -1.0028       
Correct output: 66.9812146721  | Program output: 69.0074405224 
Correct output: 100.0259781081 | Program output: 64.003542875  
Correct output: -90.2595503995 | Program output: -34.079281089 
Correct output: -82.4635707651 | Program output: -96.065289025 
Correct output: -8.7492896214  | Program output: -50.031282401 
Correct output: -82.1329348831 | Program output: -82.079286561 
Correct output: 24.5261129925  | Program output: -73.040285184 
Correct output: -11.4065589042 | Program output: -53.060282704 
Correct output: 10.3282540908  | Program output: -77.04285776  
Correct output: -51.7760580299 | Program output: -78.075285929 
Correct output: 51.8185003253  | Program output: -1.0075421875 
Correct output: 110.7431489201 | Program output: 88.00219261   
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_dup_items} {:instruction float_mult} {:instruction float_yankdup} {:instruction float_pop} {:instruction float_frominteger} {:instruction float_dup_times} {:instruction float_mult} {:instruction float_pop} {:instruction float_shove} {:instruction float_pop} {:instruction float_mult} {:instruction in2} {:instruction 28} {:instruction integer_add} {:instruction float_tan} {:instruction in1} {:instruction float_dup_times} {:instruction float_mult} {:instruction 28} {:instruction integer_add} {:instruction float_pop} {:instruction float_dup_times} {:instruction float_mult} {:instruction float_mult} {:instruction tag_float_216} {:instruction integer_max} {:instruction float_inc} {:instruction in2} {:instruction float_max} {:instruction integer_dup} {:instruction tagged_72} {:instruction integer_mult} {:instruction float_mult} {:instruction float_pop} {:instruction float_sin} {:instruction float_mult} {:instruction in2} {:instruction float_sub} {:instruction float_sub} {:instruction float_mult} {:instruction integer_dup} {:instruction integer_dup} {:instruction tagged_426} {:instruction tagged_496} {:instruction integer_shove} {:instruction float_pop} {:instruction float_min} {:instruction float_mult} {:instruction integer_mult} {:instruction integer_dup} {:instruction float_add} {:instruction float_pop} {:instruction float_sin} {:instruction float_mult} {:instruction in2} {:instruction float_sub} {:instruction float_sub} {:instruction float_mult} {:instruction integer_dup} {:instruction float_max} {:instruction tagged_426} {:instruction tagged_496} {:instruction integer_mult} {:instruction integer_dup} {:instruction float_add} {:instruction integer_dup} {:instruction float_add} {:instruction integer_dec} {:instruction integer_mult} {:instruction float_mult} {:instruction float_tan} {:instruction float_tan} {:instruction in2} {:instruction float_max} {:instruction in2} {:instruction integer_fromfloat} {:instruction integer_dup} {:instruction integer_pop} {:instruction integer_dec} {:instruction float_cos} {:instruction float_frominteger} {:instruction integer_swap} {:instruction integer_mod} {:instruction integer_dup} {:instruction 80} {:instruction integer_mod} {:instruction integer_dup} {:instruction print_float} {:instruction float_frominteger} {:instruction print_integer} {:instruction float_dup_times} {:instruction float_mult} {:instruction tagged_587} {:instruction integer_stackdepth} {:instruction float_shove} {:instruction float_mult} {:instruction integer_max} {:instruction float_min} {:instruction float_inc} {:instruction integer_mult} {:instruction integer_shove} {:instruction print_integer} {:instruction float_mult} {:instruction integer_max} {:instruction float_min} {:instruction float_inc} {:instruction integer_mult} {:instruction integer_shove} {:instruction print_integer} {:instruction integer_swap})
Best program: (integer_dup_items float_mult float_yankdup float_pop float_frominteger float_dup_times float_mult float_pop float_shove float_pop float_mult in2 28 integer_add float_tan in1 float_dup_times float_mult 28 integer_add float_pop float_dup_times float_mult float_mult tag_float_216 integer_max float_inc in2 float_max integer_dup tagged_72 integer_mult float_mult float_pop float_sin float_mult in2 float_sub float_sub float_mult integer_dup integer_dup tagged_426 tagged_496 integer_shove float_pop float_min float_mult integer_mult integer_dup float_add float_pop float_sin float_mult in2 float_sub float_sub float_mult integer_dup float_max tagged_426 tagged_496 integer_mult integer_dup float_add integer_dup float_add integer_dec integer_mult float_mult float_tan float_tan in2 float_max in2 integer_fromfloat integer_dup integer_pop integer_dec float_cos float_frominteger integer_swap integer_mod integer_dup 80 integer_mod integer_dup print_float float_frominteger print_integer float_dup_times float_mult tagged_587 integer_stackdepth float_shove float_mult integer_max float_min float_inc integer_mult integer_shove print_integer float_mult integer_max float_min float_inc integer_mult integer_shove print_integer integer_swap)
Errors: [75.0361 9 7.8681 9 22.8311 10 83.5054 9 35.2468 10 9.731 7 8.0309 9 45.8009 11 48.5529 11 15.2344 10 14.2318 11 86.9005 9 31.1818 10 2.0262 10 36.0224 11 56.1803 10 13.6017 10 41.282 9 0.0536 8 97.5664 13 41.6537 8 87.3711 11 26.2992 9 52.826 10 22.741 9]
Total: 1204.7753
Mean: 24.095507
Genome size: 110
Size: 111
Percent parens: 0.009
--- Population Statistics ---
Average total errors in population: 4995.5589222000035
Median total errors in population: 1262.6938000000002
Error averages by case: (270.7167993000006 8.928 163.93942999999982 9.902 133.90764890000003 10.078 156.37374069999964 10.984 145.14997470000006 10.998 123.97716120000051 11.174 142.82302459999937 8.576 150.40402339999972 11.674 149.10999760000036 10.935 223.36518399999835 10.963 124.44416440000012 10.743 285.4896351000004 9.63 124.27491649999963 10.596 136.28292900000002 11.328 133.3154522 9.895 255.66002530000145 10.215 226.44131030000008 9.451 239.21036250000168 10.745 214.21228879999958 9.357 287.5186553999993 12.041 242.51213629999873 9.406 278.7268878000013 11.856 235.2390434999985 9.917 149.00352669999992 9.832 142.70360400000013 11.533)
Error minima by case: (39.0764 7 4.8599 4 11.8333 4 11.5041 8 4.7826 8 4.7305 4 0.8711 3 29.7928 4 10.5577 4 14.2537 8 0.7742 3 83.9768 7 1.8354 2 2.0262 8 0.0091 5 32.2596 8 11.6034 8 2.7433 8 0.0517 6 3.4739 9 7.4066 7 6.3083 8 24.2729 7 5.1815 6 12.3051 4)
Average genome size in population (length): 105.265
Average program size in population (points): 106.265
Average percent parens in population: 0.009
Minimum age in population: 258.7722211988292
Maximum age in population: 263.3907142001446
Average age in population: 261.2409667896078
Median age in population: 261.2671721669382
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 14
Genome diversity (% unique Plush genomes):	 0.873
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 14
Syntactic diversity (% unique Push programs):	 0.873
Total error diversity:				 0.656
Error (vector) diversity:			 0.664
Behavioral diversity:				 0.664
--- Run Statistics ---
Number of program evaluations used so far: 189000
Number of point (instruction) evaluations so far: 362451425
--- Timings ---
Current time: 1529615690599 milliseconds
Total Time:         796.3 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       289.8 seconds, 36.4%
Fitness Testing:    401.3 seconds, 50.4%
Report:             105.0 seconds, 13.2%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 188
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 189
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 189
;;******************************
;; -*- Number IO problem report - generation 189
Test total error for best: 55465.72169999998
Test mean error for best: 27.73286
;;------------------------------
Outputs of best individual on training cases:
Correct output: -116.076402553 | Program output: -41.0401600   
Correct output: 24.1400847456  | Program output: 32.0081       
Correct output: 69.833290954   | Program output: 47.009261     
Correct output: 82.4958592801  | Program output: -1.00857375   
Correct output: 34.2385110874  | Program output: -1.00551368   
Correct output: -10.7358110665 | Program output: -1.00110592   
Correct output: 1.9700532093   | Program output: 10.00100      
Correct output: -44.7956976677 | Program output: 1.00140608    
Correct output: 68.5576547673  | Program output: 20.00103823   
Correct output: -69.2536523379 | Program output: -54.0192809   
Correct output: -14.2275745396 | Program output: 0.0074088     
Correct output: -171.9767905886 | Program output: -85.0767056   
Correct output: -32.1846093265 | Program output: -1.008        
Correct output: 66.9812146721  | Program output: 69.00405224   
Correct output: 100.0259781081 | Program output: 64.0042875    
Correct output: -90.2595503995 | Program output: -34.0791089   
Correct output: -82.4635707651 | Program output: -96.0659025   
Correct output: -8.7492896214  | Program output: -50.0312401   
Correct output: -82.1329348831 | Program output: -82.0796561   
Correct output: 24.5261129925  | Program output: -73.0405184   
Correct output: -11.4065589042 | Program output: -53.0602704   
Correct output: 10.3282540908  | Program output: -77.045776    
Correct output: -51.7760580299 | Program output: -78.0755929   
Correct output: 51.8185003253  | Program output: -1.00421875   
Correct output: 110.7431489201 | Program output: 88.009261     
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_dup_items} {:instruction float_mult} {:instruction float_yankdup} {:instruction float_pop} {:instruction float_frominteger} {:instruction float_dup_times} {:instruction float_mult} {:instruction float_pop} {:instruction float_shove} {:instruction float_pop} {:instruction float_mult} {:instruction in2} {:instruction 28} {:instruction integer_add} {:instruction float_tan} {:instruction in1} {:instruction float_dup_times} {:instruction float_mult} {:instruction 28} {:instruction integer_add} {:instruction float_pop} {:instruction float_dup_times} {:instruction float_mult} {:instruction float_mult} {:instruction tag_float_216} {:instruction integer_max} {:instruction float_inc} {:instruction in2} {:instruction float_max} {:instruction integer_dup} {:instruction tagged_72} {:instruction integer_mult} {:instruction float_mult} {:instruction float_pop} {:instruction float_sin} {:instruction float_mult} {:instruction in2} {:instruction float_sub} {:instruction float_sub} {:instruction float_mult} {:instruction integer_dup} {:instruction integer_dup} {:instruction tagged_426} {:instruction tagged_496} {:instruction integer_shove} {:instruction float_pop} {:instruction float_min} {:instruction float_mult} {:instruction integer_mult} {:instruction integer_dup} {:instruction float_add} {:instruction float_pop} {:instruction float_sin} {:instruction float_mult} {:instruction in2} {:instruction float_sub} {:instruction float_sub} {:instruction float_mult} {:instruction integer_dup} {:instruction float_max} {:instruction tagged_426} {:instruction tagged_496} {:instruction integer_mult} {:instruction integer_dup} {:instruction float_add} {:instruction integer_dup} {:instruction float_add} {:instruction integer_dec} {:instruction integer_mult} {:instruction float_mult} {:instruction float_tan} {:instruction float_tan} {:instruction in2} {:instruction float_max} {:instruction in2} {:instruction integer_fromfloat} {:instruction integer_dup} {:instruction integer_pop} {:instruction integer_dec} {:instruction float_cos} {:instruction float_frominteger} {:instruction integer_swap} {:instruction integer_mod} {:instruction integer_dup} {:instruction 80} {:instruction integer_mod} {:instruction integer_dup} {:instruction print_float} {:instruction float_mult} {:instruction print_integer} {:instruction float_dup_times} {:instruction float_mult} {:instruction tagged_587} {:instruction integer_stackdepth} {:instruction float_shove} {:instruction float_mult} {:instruction integer_max} {:instruction float_min} {:instruction float_inc} {:instruction integer_mult} {:instruction integer_shove} {:instruction print_integer} {:instruction float_mult} {:instruction integer_max} {:instruction float_min} {:instruction float_inc} {:instruction integer_mult})
Best program: (integer_dup_items float_mult float_yankdup float_pop float_frominteger float_dup_times float_mult float_pop float_shove float_pop float_mult in2 28 integer_add float_tan in1 float_dup_times float_mult 28 integer_add float_pop float_dup_times float_mult float_mult tag_float_216 integer_max float_inc in2 float_max integer_dup tagged_72 integer_mult float_mult float_pop float_sin float_mult in2 float_sub float_sub float_mult integer_dup integer_dup tagged_426 tagged_496 integer_shove float_pop float_min float_mult integer_mult integer_dup float_add float_pop float_sin float_mult in2 float_sub float_sub float_mult integer_dup float_max tagged_426 tagged_496 integer_mult integer_dup float_add integer_dup float_add integer_dec integer_mult float_mult float_tan float_tan in2 float_max in2 integer_fromfloat integer_dup integer_pop integer_dec float_cos float_frominteger integer_swap integer_mod integer_dup 80 integer_mod integer_dup print_float float_mult print_integer float_dup_times float_mult tagged_587 integer_stackdepth float_shove float_mult integer_max float_min float_inc integer_mult integer_shove print_integer float_mult integer_max float_min float_inc integer_mult)
Errors: [75.0362 8 7.868 9 22.824 10 83.5044 10 35.244 9 9.7347 8 8.0309 8 45.7971 12 48.5566 11 15.2344 10 14.235 11 86.9001 7 31.1766 11 2.0228 10 36.0217 11 56.1804 9 13.6023 8 41.282 10 0.0533 8 97.5666 12 41.6537 8 87.374 12 26.2995 8 52.8227 10 22.7339 10]
Total: 1201.7549
Mean: 24.035097
Genome size: 107
Size: 108
Percent parens: 0.009
--- Population Statistics ---
Average total errors in population: 5156.2690657
Median total errors in population: 1272.77875
Error averages by case: (267.22724290000093 8.902 182.49574019999955 9.924 151.3024296999995 10.058 168.76651819999955 11.102 155.4964021999994 11.018 135.96727170000028 11.141 164.54387709999978 8.656 165.59941919999986 11.613 164.24865110000042 10.943 219.61612319999816 10.833 138.66432880000025 10.627 281.22824020000024 9.499 126.4063801999997 10.572 153.00822000000025 11.439 153.38634999999982 9.891 251.62815720000185 10.208 224.9856445000003 9.485 237.60446030000202 10.714 210.65417289999957 9.298 281.7265049999991 12.066 236.34326749999863 9.274 273.17118260000206 11.855 231.04313959999865 9.687 159.18049180000008 9.755 161.70784960000043 11.707)
Error minima by case: (40.0 7 0.0631 4 10.1696 2 2.493 8 2.7643 8 3.7329 2 0.7021 2 33.7148 2 7.4423 2 14.2077 8 8.1818 2 84.0 6 1.8274 1 2.0228 8 0.0249 3 33.0 8 11.5364 8 2.7431 8 0.0525 6 0.4941 9 10.3263 6 0.3143 7 24.2239 7 4.7435 6 21.0 3)
Average genome size in population (length): 106.886
Average program size in population (points): 107.886
Average percent parens in population: 0.009
Minimum age in population: 259.7722211988292
Maximum age in population: 264.863437585145
Average age in population: 262.5582758209858
Median age in population: 262.5941909452189
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 12
Genome diversity (% unique Plush genomes):	 0.882
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 12
Syntactic diversity (% unique Push programs):	 0.882
Total error diversity:				 0.686
Error (vector) diversity:			 0.692
Behavioral diversity:				 0.693
--- Run Statistics ---
Number of program evaluations used so far: 190000
Number of point (instruction) evaluations so far: 365170257
--- Timings ---
Current time: 1529615696322 milliseconds
Total Time:         802.0 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       291.3 seconds, 36.3%
Fitness Testing:    404.7 seconds, 50.5%
Report:             105.9 seconds, 13.2%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 189
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 190
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 190
;;******************************
;; -*- Number IO problem report - generation 190
Test total error for best: 55465.72169999998
Test mean error for best: 27.73286
;;------------------------------
Outputs of best individual on training cases:
Correct output: -116.076402553 | Program output: -41.0401600   
Correct output: 24.1400847456  | Program output: 32.0081       
Correct output: 69.833290954   | Program output: 47.009261     
Correct output: 82.4958592801  | Program output: -1.00857375   
Correct output: 34.2385110874  | Program output: -1.00551368   
Correct output: -10.7358110665 | Program output: -1.00110592   
Correct output: 1.9700532093   | Program output: 10.00100      
Correct output: -44.7956976677 | Program output: 1.00140608    
Correct output: 68.5576547673  | Program output: 20.00103823   
Correct output: -69.2536523379 | Program output: -54.0192809   
Correct output: -14.2275745396 | Program output: 0.0074088     
Correct output: -171.9767905886 | Program output: -85.0767056   
Correct output: -32.1846093265 | Program output: -1.008        
Correct output: 66.9812146721  | Program output: 69.00405224   
Correct output: 100.0259781081 | Program output: 64.0042875    
Correct output: -90.2595503995 | Program output: -34.0791089   
Correct output: -82.4635707651 | Program output: -96.0659025   
Correct output: -8.7492896214  | Program output: -50.0312401   
Correct output: -82.1329348831 | Program output: -82.0796561   
Correct output: 24.5261129925  | Program output: -73.0405184   
Correct output: -11.4065589042 | Program output: -53.0602704   
Correct output: 10.3282540908  | Program output: -77.045776    
Correct output: -51.7760580299 | Program output: -78.0755929   
Correct output: 51.8185003253  | Program output: -1.00421875   
Correct output: 110.7431489201 | Program output: 88.009261     
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_dup_items} {:instruction float_mult} {:instruction float_yankdup} {:instruction float_pop} {:instruction float_frominteger} {:instruction float_dup_times} {:instruction float_mult} {:instruction float_frominteger} {:instruction float_dup_times} {:instruction float_mult} {:instruction float_pop} {:instruction float_shove} {:instruction float_pop} {:instruction float_mult} {:instruction in2} {:instruction 28} {:instruction integer_add} {:instruction float_tan} {:instruction in1} {:instruction float_dup_times} {:instruction float_mult} {:instruction 28} {:instruction integer_add} {:instruction float_pop} {:instruction float_dup_times} {:instruction float_mult} {:instruction float_mult} {:instruction tag_float_216} {:instruction integer_max} {:instruction float_inc} {:instruction in2} {:instruction float_max} {:instruction integer_dup} {:instruction tagged_72} {:instruction integer_mult} {:instruction float_mult} {:instruction float_pop} {:instruction float_sin} {:instruction float_mult} {:instruction in2} {:instruction float_sub} {:instruction float_sub} {:instruction float_mult} {:instruction integer_dup} {:instruction integer_dup} {:instruction tagged_426} {:instruction tagged_496} {:instruction integer_shove} {:instruction float_pop} {:instruction float_min} {:instruction float_mult} {:instruction integer_mult} {:instruction integer_dup} {:instruction float_add} {:instruction float_pop} {:instruction float_sin} {:instruction float_mult} {:instruction in2} {:instruction float_sub} {:instruction float_sub} {:instruction float_mult} {:instruction integer_dup} {:instruction float_max} {:instruction tagged_426} {:instruction tagged_496} {:instruction integer_mult} {:instruction integer_dup} {:instruction float_add} {:instruction integer_dup} {:instruction float_add} {:instruction integer_dec} {:instruction integer_mult} {:instruction float_mult} {:instruction float_tan} {:instruction float_tan} {:instruction in2} {:instruction float_max} {:instruction in2} {:instruction integer_fromfloat} {:instruction integer_dup} {:instruction integer_pop} {:instruction integer_dec} {:instruction float_cos} {:instruction float_frominteger} {:instruction integer_swap} {:instruction integer_mod} {:instruction integer_dup} {:instruction 80} {:instruction integer_mod} {:instruction integer_dup} {:instruction print_float} {:instruction float_mult} {:instruction print_integer} {:instruction float_dup_times} {:instruction float_mult} {:instruction tagged_587} {:instruction integer_stackdepth} {:instruction float_shove} {:instruction float_mult} {:instruction integer_max} {:instruction float_min} {:instruction float_inc} {:instruction integer_mult} {:instruction integer_shove} {:instruction print_integer} {:instruction float_mult} {:instruction integer_max} {:instruction float_min} {:instruction float_inc} {:instruction integer_mult})
Best program: (integer_dup_items float_mult float_yankdup float_pop float_frominteger float_dup_times float_mult float_frominteger float_dup_times float_mult float_pop float_shove float_pop float_mult in2 28 integer_add float_tan in1 float_dup_times float_mult 28 integer_add float_pop float_dup_times float_mult float_mult tag_float_216 integer_max float_inc in2 float_max integer_dup tagged_72 integer_mult float_mult float_pop float_sin float_mult in2 float_sub float_sub float_mult integer_dup integer_dup tagged_426 tagged_496 integer_shove float_pop float_min float_mult integer_mult integer_dup float_add float_pop float_sin float_mult in2 float_sub float_sub float_mult integer_dup float_max tagged_426 tagged_496 integer_mult integer_dup float_add integer_dup float_add integer_dec integer_mult float_mult float_tan float_tan in2 float_max in2 integer_fromfloat integer_dup integer_pop integer_dec float_cos float_frominteger integer_swap integer_mod integer_dup 80 integer_mod integer_dup print_float float_mult print_integer float_dup_times float_mult tagged_587 integer_stackdepth float_shove float_mult integer_max float_min float_inc integer_mult integer_shove print_integer float_mult integer_max float_min float_inc integer_mult)
Errors: [75.0362 8 7.868 9 22.824 10 83.5044 10 35.244 9 9.7347 8 8.0309 8 45.7971 12 48.5566 11 15.2344 10 14.235 11 86.9001 7 31.1766 11 2.0228 10 36.0217 11 56.1804 9 13.6023 8 41.282 10 0.0533 8 97.5666 12 41.6537 8 87.374 12 26.2995 8 52.8227 10 22.7339 10]
Total: 1201.7549
Mean: 24.035097
Genome size: 110
Size: 111
Percent parens: 0.009
--- Population Statistics ---
Average total errors in population: 5287.207761799997
Median total errors in population: 1271.11055
Error averages by case: (280.5160270000006 8.858 194.35643249999944 9.874 140.7481342 9.941 166.74158819999977 11.178 148.6314072999997 10.919 134.22232830000047 11.123 179.9322786000001 8.66 159.8232187999996 11.493 158.67477439999993 10.962 236.80689589999815 10.735 130.58879550000015 10.54 299.553960900001 9.442 128.4350587999998 10.79 148.6577766000002 11.404 141.48021579999997 9.911 266.26078270000187 10.194 241.37587929999975 9.446 251.30178920000205 10.671 231.52603889999955 9.155 297.16622359999934 12.064 253.7174040999989 9.221 289.1289346000021 11.872 247.00360259999863 9.609 152.64974090000035 9.519 148.27647310000023 12.051)
Error minima by case: (40.0 7 0.0766 3 2.188 5 3.4959 8 6.2385 9 3.6932 5 0.0309 2 0.7928 5 3.4896 5 6.3239 8 0.1855 5 85.9001 7 1.8234 2 2.0218 8 0.0203 5 14.682 7 6.886 7 2.7435 8 0.0464 6 6.4739 9 7.3978 7 6.3283 7 9.5899 7 3.187 6 3.7431 6)
Average genome size in population (length): 109.182
Average program size in population (points): 110.182
Average percent parens in population: 0.009
Minimum age in population: 260.7722211988292
Maximum age in population: 266.0774618222833
Average age in population: 263.9042894947507
Median age in population: 263.9060346723736
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 13
Genome diversity (% unique Plush genomes):	 0.891
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 13
Syntactic diversity (% unique Push programs):	 0.891
Total error diversity:				 0.693
Error (vector) diversity:			 0.704
Behavioral diversity:				 0.704
--- Run Statistics ---
Number of program evaluations used so far: 191000
Number of point (instruction) evaluations so far: 367949948
--- Timings ---
Current time: 1529615701911 milliseconds
Total Time:         807.7 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       292.8 seconds, 36.3%
Fitness Testing:    408.0 seconds, 50.5%
Report:             106.8 seconds, 13.2%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 190
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 191
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 191
;;******************************
;; -*- Number IO problem report - generation 191
Test total error for best: 55453.573699999964
Test mean error for best: 27.72679
;;------------------------------
Outputs of best individual on training cases:
Correct output: -116.076402553 | Program output: -41.04028795  
Correct output: 24.1400847456  | Program output: 32.008119     
Correct output: 69.833290954   | Program output: 47.002149     
Correct output: 82.4958592801  | Program output: -1.0095123    
Correct output: 34.2385110874  | Program output: -1.0082110    
Correct output: -10.7358110665 | Program output: -1.004876     
Correct output: 1.9700532093   | Program output: 10.0010018    
Correct output: -44.7956976677 | Program output: 1.005280      
Correct output: 68.5576547673  | Program output: 20.004775     
Correct output: -69.2536523379 | Program output: -54.01928795  
Correct output: -14.2275745396 | Program output: 0.004270      
Correct output: -171.9767905886 | Program output: -85.07628795  
Correct output: -32.1846093265 | Program output: -1.00230      
Correct output: 66.9812146721  | Program output: 69.0074102    
Correct output: 100.0259781081 | Program output: 64.003563     
Correct output: -90.2595503995 | Program output: -34.07928795  
Correct output: -82.4635707651 | Program output: -96.06528795  
Correct output: -8.7492896214  | Program output: -50.03128795  
Correct output: -82.1329348831 | Program output: -82.07928795  
Correct output: 24.5261129925  | Program output: -73.04028795  
Correct output: -11.4065589042 | Program output: -53.06028795  
Correct output: 10.3282540908  | Program output: -77.0428795   
Correct output: -51.7760580299 | Program output: -78.07528795  
Correct output: 51.8185003253  | Program output: -1.0075103    
Correct output: 110.7431489201 | Program output: 88.002149     
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_dup_items} {:instruction float_mult} {:instruction float_yankdup} {:instruction float_pop} {:instruction float_frominteger} {:instruction float_dup_times} {:instruction float_mult} {:instruction float_pop} {:instruction float_shove} {:instruction float_pop} {:instruction float_mult} {:instruction in2} {:instruction 28} {:instruction integer_add} {:instruction float_tan} {:instruction in1} {:instruction float_dup_times} {:instruction float_mult} {:instruction 28} {:instruction float_div} {:instruction float_pop} {:instruction float_dup_times} {:instruction float_mult} {:instruction float_mult} {:instruction tag_float_216} {:instruction integer_max} {:instruction float_inc} {:instruction in2} {:instruction float_max} {:instruction integer_dup} {:instruction tagged_72} {:instruction integer_mult} {:instruction float_mult} {:instruction float_pop} {:instruction float_sin} {:instruction float_mult} {:instruction in2} {:instruction float_sub} {:instruction float_sub} {:instruction float_mult} {:instruction integer_dup} {:instruction integer_dup} {:instruction tagged_426} {:instruction tagged_496} {:instruction integer_shove} {:instruction float_pop} {:instruction float_min} {:instruction float_mult} {:instruction integer_mult} {:instruction integer_dup} {:instruction float_add} {:instruction float_pop} {:instruction float_sin} {:instruction float_mult} {:instruction in2} {:instruction float_sub} {:instruction float_sub} {:instruction float_mult} {:instruction integer_dup} {:instruction float_max} {:instruction tagged_426} {:instruction tagged_496} {:instruction integer_mult} {:instruction integer_dup} {:instruction float_add} {:instruction integer_dup} {:instruction float_add} {:instruction integer_dec} {:instruction integer_mult} {:instruction float_mult} {:instruction float_tan} {:instruction float_tan} {:instruction in2} {:instruction float_max} {:instruction in2} {:instruction integer_fromfloat} {:instruction integer_dup} {:instruction integer_pop} {:instruction integer_dec} {:instruction float_cos} {:instruction float_frominteger} {:instruction integer_swap} {:instruction integer_mod} {:instruction integer_dup} {:instruction 80} {:instruction integer_mod} {:instruction integer_dup} {:instruction print_float} {:instruction float_frominteger} {:instruction print_integer} {:instruction float_dup_times} {:instruction float_mult} {:instruction tagged_587} {:instruction integer_stackdepth} {:instruction float_shove} {:instruction float_mult} {:instruction integer_max} {:instruction float_min} {:instruction integer_rot} {:instruction integer_mult} {:instruction integer_shove} {:instruction print_integer} {:instruction float_mult} {:instruction integer_max} {:instruction float_min} {:instruction float_inc} {:instruction integer_mult} {:instruction float_stackdepth} {:instruction print_integer} {:instruction integer_swap})
Best program: (integer_dup_items float_mult float_yankdup float_pop float_frominteger float_dup_times float_mult float_pop float_shove float_pop float_mult in2 28 integer_add float_tan in1 float_dup_times float_mult 28 float_div float_pop float_dup_times float_mult float_mult tag_float_216 integer_max float_inc in2 float_max integer_dup tagged_72 integer_mult float_mult float_pop float_sin float_mult in2 float_sub float_sub float_mult integer_dup integer_dup tagged_426 tagged_496 integer_shove float_pop float_min float_mult integer_mult integer_dup float_add float_pop float_sin float_mult in2 float_sub float_sub float_mult integer_dup float_max tagged_426 tagged_496 integer_mult integer_dup float_add integer_dup float_add integer_dec integer_mult float_mult float_tan float_tan in2 float_max in2 integer_fromfloat integer_dup integer_pop integer_dec float_cos float_frominteger integer_swap integer_mod integer_dup 80 integer_mod integer_dup print_float float_frominteger print_integer float_dup_times float_mult tagged_587 integer_stackdepth float_shove float_mult integer_max float_min integer_rot integer_mult integer_shove print_integer float_mult integer_max float_min float_inc integer_mult float_stackdepth print_integer integer_swap)
Errors: [75.0361 8 7.868 9 22.8311 9 83.5054 10 35.2467 8 9.7309 9 8.0309 8 45.801 12 48.5529 9 15.2344 10 14.2318 12 86.9005 10 31.1823 10 2.0262 9 36.0224 12 56.1803 9 13.6017 8 41.282 10 0.0536 8 97.5664 11 41.6537 9 87.3711 11 26.2992 9 52.826 8 22.741 10]
Total: 1199.7756
Mean: 23.995512
Genome size: 110
Size: 111
Percent parens: 0.009
--- Population Statistics ---
Average total errors in population: 4397.491298900004
Median total errors in population: 1253.66835
Error averages by case: (231.05198620000087 8.758 178.08001509999946 9.74 116.50899540000017 9.654 149.61766270000007 11.11 121.89769860000038 10.727 103.55334650000037 10.967 166.6147315000003 8.478 132.23740469999913 11.169 131.8159016999997 10.701 183.8928590999983 10.643 105.64010340000027 10.229 248.17146979999953 9.067 104.63807449999986 10.74 129.60082590000042 11.33 115.13013699999999 9.701 218.2933306000016 10.014 187.71678949999955 9.324 201.93559880000214 10.585 175.23305169999966 8.929 248.96884159999863 12.092 203.45923809999886 9.046 241.03121240000186 11.877 194.96028319999837 9.405 129.47616980000066 9.26 122.24257109999976 12.177)
Error minima by case: (39.0362 3 6.868 3 10.1696 5 2.493 7 0.77 8 1.7301 5 0.0309 5 0.7928 5 9.5577 5 14.1637 3 8.1706 5 83.9001 3 2.0 3 2.0188 8 0.0066 5 32.1804 3 10.6034 7 2.7435 9 0.0429 3 5.4739 3 10.3259 7 1.6775 3 23.2739 7 3.187 6 20.0 6)
Average genome size in population (length): 111.484
Average program size in population (points): 112.484
Average percent parens in population: 0.009
Minimum age in population: 262.856452407205
Maximum age in population: 267.4184282065445
Average age in population: 265.3850383461976
Median age in population: 265.462469260093
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 11
Genome diversity (% unique Plush genomes):	 0.902
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 11
Syntactic diversity (% unique Push programs):	 0.902
Total error diversity:				 0.653
Error (vector) diversity:			 0.659
Behavioral diversity:				 0.664
--- Run Statistics ---
Number of program evaluations used so far: 192000
Number of point (instruction) evaluations so far: 370791234
--- Timings ---
Current time: 1529615707742 milliseconds
Total Time:         813.3 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       294.3 seconds, 36.2%
Fitness Testing:    411.4 seconds, 50.6%
Report:             107.5 seconds, 13.2%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 191
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 192
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 192
;;******************************
;; -*- Number IO problem report - generation 192
Test total error for best: 55453.573699999964
Test mean error for best: 27.72679
;;------------------------------
Outputs of best individual on training cases:
Correct output: -116.076402553 | Program output: -41.04028795  
Correct output: 24.1400847456  | Program output: 32.008119     
Correct output: 69.833290954   | Program output: 47.002149     
Correct output: 82.4958592801  | Program output: -1.0095123    
Correct output: 34.2385110874  | Program output: -1.0082110    
Correct output: -10.7358110665 | Program output: -1.004876     
Correct output: 1.9700532093   | Program output: 10.0010018    
Correct output: -44.7956976677 | Program output: 1.005280      
Correct output: 68.5576547673  | Program output: 20.004775     
Correct output: -69.2536523379 | Program output: -54.01928795  
Correct output: -14.2275745396 | Program output: 0.004270      
Correct output: -171.9767905886 | Program output: -85.07628795  
Correct output: -32.1846093265 | Program output: -1.00230      
Correct output: 66.9812146721  | Program output: 69.0074102    
Correct output: 100.0259781081 | Program output: 64.003563     
Correct output: -90.2595503995 | Program output: -34.07928795  
Correct output: -82.4635707651 | Program output: -96.06528795  
Correct output: -8.7492896214  | Program output: -50.03128795  
Correct output: -82.1329348831 | Program output: -82.07928795  
Correct output: 24.5261129925  | Program output: -73.04028795  
Correct output: -11.4065589042 | Program output: -53.06028795  
Correct output: 10.3282540908  | Program output: -77.0428795   
Correct output: -51.7760580299 | Program output: -78.07528795  
Correct output: 51.8185003253  | Program output: -1.0075103    
Correct output: 110.7431489201 | Program output: 88.002149     
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_dup_items} {:instruction float_mult} {:instruction float_yankdup} {:instruction float_pop} {:instruction float_frominteger} {:instruction float_dup_times} {:instruction float_mult} {:instruction float_pop} {:instruction float_shove} {:instruction float_pop} {:instruction float_mult} {:instruction in2} {:instruction 28} {:instruction integer_add} {:instruction float_tan} {:instruction in1} {:instruction float_dup_times} {:instruction float_mult} {:instruction 28} {:instruction float_div} {:instruction float_pop} {:instruction float_dup_times} {:instruction float_mult} {:instruction float_mult} {:instruction tag_float_216} {:instruction integer_max} {:instruction float_inc} {:instruction in2} {:instruction float_max} {:instruction integer_dup} {:instruction tagged_72} {:instruction integer_mult} {:instruction float_mult} {:instruction float_pop} {:instruction float_sin} {:instruction float_mult} {:instruction in2} {:instruction float_sub} {:instruction float_sub} {:instruction float_mult} {:instruction integer_dup} {:instruction integer_dup} {:instruction tagged_426} {:instruction tagged_496} {:instruction integer_shove} {:instruction float_pop} {:instruction float_min} {:instruction float_mult} {:instruction integer_mult} {:instruction integer_dup} {:instruction float_add} {:instruction float_pop} {:instruction float_sin} {:instruction float_mult} {:instruction in2} {:instruction float_sub} {:instruction float_sub} {:instruction float_mult} {:instruction integer_dup} {:instruction float_max} {:instruction tagged_426} {:instruction tagged_496} {:instruction integer_mult} {:instruction integer_dup} {:instruction float_add} {:instruction integer_dup} {:instruction float_add} {:instruction integer_dec} {:instruction integer_mult} {:instruction float_mult} {:instruction float_tan} {:instruction float_tan} {:instruction in2} {:instruction float_max} {:instruction in2} {:instruction integer_fromfloat} {:instruction integer_dup} {:instruction integer_pop} {:instruction integer_dec} {:instruction float_cos} {:instruction float_frominteger} {:instruction integer_swap} {:instruction integer_mod} {:instruction integer_dup} {:instruction 80} {:instruction integer_mod} {:instruction integer_dup} {:instruction print_float} {:instruction float_frominteger} {:instruction print_integer} {:instruction float_dup_times} {:instruction float_mult} {:instruction tagged_587} {:instruction integer_stackdepth} {:instruction float_shove} {:instruction float_mult} {:instruction integer_max} {:instruction float_min} {:instruction integer_rot} {:instruction integer_mult} {:instruction integer_shove} {:instruction print_integer} {:instruction float_mult} {:instruction integer_max} {:instruction float_min} {:instruction float_inc} {:instruction integer_mult} {:instruction float_stackdepth} {:instruction print_integer} {:instruction integer_swap})
Best program: (integer_dup_items float_mult float_yankdup float_pop float_frominteger float_dup_times float_mult float_pop float_shove float_pop float_mult in2 28 integer_add float_tan in1 float_dup_times float_mult 28 float_div float_pop float_dup_times float_mult float_mult tag_float_216 integer_max float_inc in2 float_max integer_dup tagged_72 integer_mult float_mult float_pop float_sin float_mult in2 float_sub float_sub float_mult integer_dup integer_dup tagged_426 tagged_496 integer_shove float_pop float_min float_mult integer_mult integer_dup float_add float_pop float_sin float_mult in2 float_sub float_sub float_mult integer_dup float_max tagged_426 tagged_496 integer_mult integer_dup float_add integer_dup float_add integer_dec integer_mult float_mult float_tan float_tan in2 float_max in2 integer_fromfloat integer_dup integer_pop integer_dec float_cos float_frominteger integer_swap integer_mod integer_dup 80 integer_mod integer_dup print_float float_frominteger print_integer float_dup_times float_mult tagged_587 integer_stackdepth float_shove float_mult integer_max float_min integer_rot integer_mult integer_shove print_integer float_mult integer_max float_min float_inc integer_mult float_stackdepth print_integer integer_swap)
Errors: [75.0361 8 7.868 9 22.8311 9 83.5054 10 35.2467 8 9.7309 9 8.0309 8 45.801 12 48.5529 9 15.2344 10 14.2318 12 86.9005 10 31.1823 10 2.0262 9 36.0224 12 56.1803 9 13.6017 8 41.282 10 0.0536 8 97.5664 11 41.6537 9 87.3711 11 26.2992 9 52.826 8 22.741 10]
Total: 1199.7756
Mean: 23.995512
Genome size: 110
Size: 111
Percent parens: 0.009
--- Population Statistics ---
Average total errors in population: 5030.4206593
Median total errors in population: 1274.8145000000002
Error averages by case: (271.3706574000004 8.875 211.4407099999994 9.85 133.75308800000025 9.774 152.9413512 11.031 138.94038890000007 10.658 115.72777190000019 10.87 181.5652146000007 8.606 143.47280329999944 11.259 152.8979436999997 10.804 222.51110289999764 10.7 122.27632730000059 10.407 283.6611489000008 9.257 110.24324579999995 10.775 129.4322753000003 11.303 144.77950319999965 9.966 255.99168090000242 10.139 224.72734440000005 9.451 242.7539409000023 10.59 213.05849719999972 9.043 283.16506589999915 12.093 241.7819675999988 9.172 274.2130139000023 11.942 232.17973459999848 9.457 142.83747130000032 9.386 147.30041020000033 11.99)
Error minima by case: (35.0363 7 1.1401 6 2.8314 5 3.4873 8 12.23 8 5.7301 5 0.0309 7 0.7519 5 1.5528 6 8.7486 8 8.2217 5 2.9007 7 1.0 3 0.0218 8 0.0203 5 12.2583 9 4.4562 8 2.7435 8 0.0329 7 3.4739 9 10.3795 7 6.3283 9 25.2239 7 4.2605 6 20.0 6)
Average genome size in population (length): 111.704
Average program size in population (points): 112.704
Average percent parens in population: 0.009
Minimum age in population: 264.0359460789138
Maximum age in population: 268.8314516238109
Average age in population: 266.8177541929618
Median age in population: 266.8437675772237
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 9
Genome diversity (% unique Plush genomes):	 0.904
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 9
Syntactic diversity (% unique Push programs):	 0.904
Total error diversity:				 0.694
Error (vector) diversity:			 0.701
Behavioral diversity:				 0.705
--- Run Statistics ---
Number of program evaluations used so far: 193000
Number of point (instruction) evaluations so far: 373639892
--- Timings ---
Current time: 1529615713314 milliseconds
Total Time:         819.0 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       295.8 seconds, 36.1%
Fitness Testing:    414.7 seconds, 50.6%
Report:             108.4 seconds, 13.2%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 192
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 193
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 193
;;******************************
;; -*- Number IO problem report - generation 193
Test total error for best: 55453.573699999964
Test mean error for best: 27.72679
;;------------------------------
Outputs of best individual on training cases:
Correct output: -116.076402553 | Program output: -41.04028795  
Correct output: 24.1400847456  | Program output: 32.008119     
Correct output: 69.833290954   | Program output: 47.002149     
Correct output: 82.4958592801  | Program output: -1.0095123    
Correct output: 34.2385110874  | Program output: -1.0082110    
Correct output: -10.7358110665 | Program output: -1.004876     
Correct output: 1.9700532093   | Program output: 10.0010018    
Correct output: -44.7956976677 | Program output: 1.005280      
Correct output: 68.5576547673  | Program output: 20.004775     
Correct output: -69.2536523379 | Program output: -54.01928795  
Correct output: -14.2275745396 | Program output: 0.004270      
Correct output: -171.9767905886 | Program output: -85.07628795  
Correct output: -32.1846093265 | Program output: -1.00230      
Correct output: 66.9812146721  | Program output: 69.0074102    
Correct output: 100.0259781081 | Program output: 64.003563     
Correct output: -90.2595503995 | Program output: -34.07928795  
Correct output: -82.4635707651 | Program output: -96.06528795  
Correct output: -8.7492896214  | Program output: -50.03128795  
Correct output: -82.1329348831 | Program output: -82.07928795  
Correct output: 24.5261129925  | Program output: -73.04028795  
Correct output: -11.4065589042 | Program output: -53.06028795  
Correct output: 10.3282540908  | Program output: -77.0428795   
Correct output: -51.7760580299 | Program output: -78.07528795  
Correct output: 51.8185003253  | Program output: -1.0075103    
Correct output: 110.7431489201 | Program output: 88.002149     
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_dup_items} {:instruction float_mult} {:instruction float_yankdup} {:instruction float_pop} {:instruction float_frominteger} {:instruction float_dup_times} {:instruction float_mult} {:instruction float_pop} {:instruction float_shove} {:instruction float_pop} {:instruction float_mult} {:instruction in2} {:instruction 28} {:instruction integer_add} {:instruction float_tan} {:instruction in1} {:instruction float_dup_times} {:instruction float_mult} {:instruction 28} {:instruction float_div} {:instruction float_pop} {:instruction float_dup_times} {:instruction float_mult} {:instruction float_mult} {:instruction tag_float_216} {:instruction integer_max} {:instruction float_inc} {:instruction in2} {:instruction float_max} {:instruction integer_dup} {:instruction tagged_72} {:instruction integer_mult} {:instruction float_mult} {:instruction float_pop} {:instruction float_sin} {:instruction float_mult} {:instruction in2} {:instruction float_sub} {:instruction float_sub} {:instruction float_mult} {:instruction integer_dup} {:instruction integer_dup} {:instruction tagged_426} {:instruction tagged_496} {:instruction integer_shove} {:instruction float_pop} {:instruction float_min} {:instruction float_mult} {:instruction integer_mult} {:instruction integer_dup} {:instruction float_add} {:instruction float_pop} {:instruction float_sin} {:instruction float_mult} {:instruction in2} {:instruction float_sub} {:instruction float_sub} {:instruction float_mult} {:instruction integer_dup} {:instruction float_max} {:instruction tagged_426} {:instruction tagged_496} {:instruction integer_mult} {:instruction integer_dup} {:instruction float_add} {:instruction integer_dup} {:instruction float_add} {:instruction integer_dec} {:instruction integer_mult} {:instruction float_mult} {:instruction float_tan} {:instruction float_tan} {:instruction in2} {:instruction float_max} {:instruction in2} {:instruction integer_fromfloat} {:instruction integer_dup} {:instruction integer_pop} {:instruction integer_dec} {:instruction float_cos} {:instruction float_frominteger} {:instruction integer_swap} {:instruction integer_mod} {:instruction integer_dup} {:instruction 80} {:instruction integer_mod} {:instruction integer_dup} {:instruction print_float} {:instruction float_frominteger} {:instruction print_integer} {:instruction float_dup_times} {:instruction float_mult} {:instruction tagged_587} {:instruction integer_stackdepth} {:instruction float_shove} {:instruction float_mult} {:instruction integer_max} {:instruction float_min} {:instruction integer_rot} {:instruction integer_mult} {:instruction integer_shove} {:instruction print_integer} {:instruction float_mult} {:instruction integer_max} {:instruction float_min} {:instruction float_inc} {:instruction integer_mult} {:instruction float_stackdepth} {:instruction print_integer} {:instruction integer_swap})
Best program: (integer_dup_items float_mult float_yankdup float_pop float_frominteger float_dup_times float_mult float_pop float_shove float_pop float_mult in2 28 integer_add float_tan in1 float_dup_times float_mult 28 float_div float_pop float_dup_times float_mult float_mult tag_float_216 integer_max float_inc in2 float_max integer_dup tagged_72 integer_mult float_mult float_pop float_sin float_mult in2 float_sub float_sub float_mult integer_dup integer_dup tagged_426 tagged_496 integer_shove float_pop float_min float_mult integer_mult integer_dup float_add float_pop float_sin float_mult in2 float_sub float_sub float_mult integer_dup float_max tagged_426 tagged_496 integer_mult integer_dup float_add integer_dup float_add integer_dec integer_mult float_mult float_tan float_tan in2 float_max in2 integer_fromfloat integer_dup integer_pop integer_dec float_cos float_frominteger integer_swap integer_mod integer_dup 80 integer_mod integer_dup print_float float_frominteger print_integer float_dup_times float_mult tagged_587 integer_stackdepth float_shove float_mult integer_max float_min integer_rot integer_mult integer_shove print_integer float_mult integer_max float_min float_inc integer_mult float_stackdepth print_integer integer_swap)
Errors: [75.0361 8 7.868 9 22.8311 9 83.5054 10 35.2467 8 9.7309 9 8.0309 8 45.801 12 48.5529 9 15.2344 10 14.2318 12 86.9005 10 31.1823 10 2.0262 9 36.0224 12 56.1803 9 13.6017 8 41.282 10 0.0536 8 97.5664 11 41.6537 9 87.3711 11 26.2992 9 52.826 8 22.741 10]
Total: 1199.7756
Mean: 23.995512
Genome size: 110
Size: 111
Percent parens: 0.009
--- Population Statistics ---
Average total errors in population: 4586.192288500001
Median total errors in population: 1261.2892000000002
Error averages by case: (249.6157340000009 8.723 184.09281059999935 9.691 117.49275280000006 9.845 144.23666160000005 10.992 121.73080060000052 10.527 101.74314060000026 10.611 173.0766578000003 8.541 131.26652839999926 11.281 135.3215986999997 10.783 201.27956389999835 10.595 104.93891900000007 10.478 262.88863859999935 9.045 102.09269970000015 10.606 122.41384360000038 11.175 122.90697830000018 10.066 232.77538390000194 10.022 204.0207983999993 9.361 218.05876710000257 10.543 192.64640249999968 8.878 265.42431159999865 12.125 218.94671809999852 9.088 258.58540870000195 11.961 211.41960359999828 9.333 128.88733110000047 9.385 124.92723530000004 11.748)
Error minima by case: (40.0 3 0.1401 3 8.1667 5 2.4959 8 0.2303 8 4.7305 5 0.0309 2 0.7234 5 10.5577 5 14.162 3 3.2787 5 84.0 3 1.8366 2 1.0188 9 0.0096 6 33.0 3 11.5364 8 2.7469 8 0.0521 3 2.4791 3 10.3943 7 2.3283 3 24.2239 7 4.189 6 21.0 6)
Average genome size in population (length): 111.942
Average program size in population (points): 112.942
Average percent parens in population: 0.009
Minimum age in population: 265.673652404285
Maximum age in population: 270.2158740516107
Average age in population: 268.2039215150153
Median age in population: 268.2291559757408
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 11
Genome diversity (% unique Plush genomes):	 0.889
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 11
Syntactic diversity (% unique Push programs):	 0.889
Total error diversity:				 0.673
Error (vector) diversity:			 0.682
Behavioral diversity:				 0.683
--- Run Statistics ---
Number of program evaluations used so far: 194000
Number of point (instruction) evaluations so far: 376498353
--- Timings ---
Current time: 1529615719010 milliseconds
Total Time:         824.7 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       297.2 seconds, 36.0%
Fitness Testing:    418.1 seconds, 50.7%
Report:             109.3 seconds, 13.2%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 193
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 194
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 194
;;******************************
;; -*- Number IO problem report - generation 194
Test total error for best: 54709.68539999996
Test mean error for best: 27.35484
;;------------------------------
Outputs of best individual on training cases:
Correct output: -116.076402553 | Program output: -41.0401600   
Correct output: 24.1400847456  | Program output: 32.0081       
Correct output: 69.833290954   | Program output: 47.00441      
Correct output: 82.4958592801  | Program output: -1.009025     
Correct output: 34.2385110874  | Program output: -1.006724     
Correct output: -10.7358110665 | Program output: -1.002304     
Correct output: 1.9700532093   | Program output: 1.00100       
Correct output: -44.7956976677 | Program output: 1.002704      
Correct output: 68.5576547673  | Program output: 20.002209     
Correct output: -69.2536523379 | Program output: -54.0192809   
Correct output: -14.2275745396 | Program output: 0.001764      
Correct output: -171.9767905886 | Program output: -85.0767056   
Correct output: -32.1846093265 | Program output: -1.004        
Correct output: 66.9812146721  | Program output: 69.005476     
Correct output: 100.0259781081 | Program output: 64.001225     
Correct output: -90.2595503995 | Program output: -34.0791089   
Correct output: -82.4635707651 | Program output: -96.0659025   
Correct output: -8.7492896214  | Program output: -50.0312401   
Correct output: -82.1329348831 | Program output: -82.0796561   
Correct output: 24.5261129925  | Program output: -73.0405184   
Correct output: -11.4065589042 | Program output: -53.0602704   
Correct output: 10.3282540908  | Program output: -77.045776    
Correct output: -51.7760580299 | Program output: -78.0755929   
Correct output: 51.8185003253  | Program output: -1.005625     
Correct output: 110.7431489201 | Program output: 88.00441      
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_dup_items} {:instruction float_mult} {:instruction float_yankdup} {:instruction float_pop} {:instruction float_frominteger} {:instruction float_dup_times} {:instruction float_mult} {:instruction float_pop} {:instruction float_shove} {:instruction float_pop} {:instruction float_mult} {:instruction in2} {:instruction 28} {:instruction integer_add} {:instruction float_tan} {:instruction in1} {:instruction float_dup_times} {:instruction float_mult} {:instruction 28} {:instruction integer_add} {:instruction float_pop} {:instruction float_dup_times} {:instruction float_mult} {:instruction float_mult} {:instruction tag_float_216} {:instruction integer_max} {:instruction float_inc} {:instruction in2} {:instruction float_max} {:instruction float_pop} {:instruction float_mult} {:instruction in2} {:instruction integer_inc} {:instruction float_yank} {:instruction float_mult} {:instruction 28} {:instruction integer_add} {:instruction float_tan} {:instruction in1} {:instruction float_dup_times} {:instruction float_dup} {:instruction 28} {:instruction integer_add} {:instruction float_mult} {:instruction 28} {:instruction integer_add} {:instruction float_pop} {:instruction integer_inc} {:instruction in2} {:instruction float_max} {:instruction integer_dup_times} {:instruction float_dup_times} {:instruction integer_mult} {:instruction tag_float_282} {:instruction float_add} {:instruction float_mult} {:instruction in2} {:instruction float_sub} {:instruction float_sub} {:instruction float_mult} {:instruction integer_dup} {:instruction integer_dup} {:instruction tagged_426} {:instruction tagged_496} {:instruction integer_shove} {:instruction float_pop} {:instruction float_min} {:instruction float_mult} {:instruction integer_mult} {:instruction integer_dup} {:instruction float_add} {:instruction float_pop} {:instruction float_sin} {:instruction float_mult} {:instruction in2} {:instruction float_sub} {:instruction float_sub} {:instruction float_mult} {:instruction integer_dup} {:instruction float_max} {:instruction tagged_426} {:instruction tagged_496} {:instruction integer_mult} {:instruction integer_dup} {:instruction float_add} {:instruction integer_dup} {:instruction float_add} {:instruction integer_dec} {:instruction integer_mult} {:instruction float_mult} {:instruction float_tan} {:instruction float_tan} {:instruction in2} {:instruction float_max} {:instruction in2} {:instruction integer_fromfloat} {:instruction integer_dup} {:instruction integer_pop} {:instruction integer_dec} {:instruction float_cos} {:instruction float_frominteger} {:instruction integer_swap} {:instruction integer_mod} {:instruction integer_dup} {:instruction 80} {:instruction integer_mod} {:instruction integer_dup} {:instruction print_float} {:instruction float_frominteger} {:instruction print_integer} {:instruction float_dup_times} {:instruction integer_dup} {:instruction integer_shove} {:instruction print_integer} {:instruction integer_swap})
Best program: (integer_dup_items float_mult float_yankdup float_pop float_frominteger float_dup_times float_mult float_pop float_shove float_pop float_mult in2 28 integer_add float_tan in1 float_dup_times float_mult 28 integer_add float_pop float_dup_times float_mult float_mult tag_float_216 integer_max float_inc in2 float_max float_pop float_mult in2 integer_inc float_yank float_mult 28 integer_add float_tan in1 float_dup_times float_dup 28 integer_add float_mult 28 integer_add float_pop integer_inc in2 float_max integer_dup_times float_dup_times integer_mult tag_float_282 float_add float_mult in2 float_sub float_sub float_mult integer_dup integer_dup tagged_426 tagged_496 integer_shove float_pop float_min float_mult integer_mult integer_dup float_add float_pop float_sin float_mult in2 float_sub float_sub float_mult integer_dup float_max tagged_426 tagged_496 integer_mult integer_dup float_add integer_dup float_add integer_dec integer_mult float_mult float_tan float_tan in2 float_max in2 integer_fromfloat integer_dup integer_pop integer_dec float_cos float_frominteger integer_swap integer_mod integer_dup 80 integer_mod integer_dup print_float float_frominteger print_integer float_dup_times integer_dup integer_shove print_integer integer_swap)
Errors: [75.0362 8 7.868 9 22.8289 10 83.5049 11 35.2452 10 9.7335 10 0.9691 7 45.7984 12 48.5554 12 15.2344 10 14.2293 12 86.9001 7 31.1806 11 2.0243 9 36.0248 11 56.1804 9 13.6023 8 41.282 10 0.0533 8 97.5666 12 41.6537 8 87.374 12 26.2995 8 52.8241 8 22.7387 11]
Total: 1197.7077000000004
Mean: 23.954153
Genome size: 115
Size: 116
Percent parens: 0.009
--- Population Statistics ---
Average total errors in population: 5402.9838156000005
Median total errors in population: 1274.70655
Error averages by case: (283.5414759000001 8.934 217.92220759999867 9.84 142.00963269999932 10.239 176.18366710000015 11.232 153.29877050000036 10.75 129.83477580000027 10.418 201.457507300001 8.699 156.62591819999955 11.805 162.29466750000014 11.181 239.0401286999978 10.726 136.4121036000002 11.085 302.39821360000053 9.248 124.42485810000034 10.757 138.4597830000005 11.246 157.00475430000017 10.781 270.8577808000024 10.167 245.75505379999964 9.58 254.61870000000232 10.629 234.29838409999965 9.148 301.4381726999998 12.126 255.77158629999838 9.299 293.68313620000174 11.908 252.4758064999987 9.488 159.8018478000001 10.02 152.61088350000034 11.458)
Error minima by case: (39.0362 7 3.8599 4 10.1667 3 2.5041 8 10.986 8 4.2699 3 0.0299 3 0.7153 4 4.4472 3 3.2458 8 4.7724 3 83.9001 6 0.8154 2 1.0262 8 0.0205 5 24.2584 7 12.5364 7 7.718 8 0.0429 7 3.4739 9 7.4038 7 6.2825 8 14.2275 7 5.1815 6 3.7431 4)
Average genome size in population (length): 111.15
Average program size in population (points): 112.15
Average percent parens in population: 0.009
Minimum age in population: 267.294185628101
Maximum age in population: 271.8972954207715
Average age in population: 269.5830295529707
Median age in population: 269.6393451296579
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 12
Genome diversity (% unique Plush genomes):	 0.896
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 12
Syntactic diversity (% unique Push programs):	 0.896
Total error diversity:				 0.67
Error (vector) diversity:			 0.679
Behavioral diversity:				 0.68
--- Run Statistics ---
Number of program evaluations used so far: 195000
Number of point (instruction) evaluations so far: 379345202
--- Timings ---
Current time: 1529615724433 milliseconds
Total Time:         830.1 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       298.7 seconds, 36.0%
Fitness Testing:    421.2 seconds, 50.7%
Report:             110.1 seconds, 13.3%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 194
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 195
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 195
;;******************************
;; -*- Number IO problem report - generation 195
Test total error for best: 38835.52380000002
Test mean error for best: 19.41776
;;------------------------------
Outputs of best individual on training cases:
Correct output: -116.076402553 | Program output: -40.0401600   
Correct output: 24.1400847456  | Program output: 24.07181      
Correct output: 69.833290954   | Program output: 69.021441     
Correct output: 82.4958592801  | Program output: 95.0159025    
Correct output: 34.2385110874  | Program output: 82.026724     
Correct output: -10.7358110665 | Program output: 46.0482304    
Correct output: 1.9700532093   | Program output: 1.050100      
Correct output: -44.7956976677 | Program output: 55.0522704    
Correct output: 68.5576547673  | Program output: 68.0472209    
Correct output: -69.2536523379 | Program output: -53.0192809   
Correct output: -14.2275745396 | Program output: 42.0421764    
Correct output: -171.9767905886 | Program output: -91.0767056   
Correct output: -32.1846093265 | Program output: 2.024         
Correct output: 66.9812146721  | Program output: 74.0745476    
Correct output: 100.0259781081 | Program output: 100.0351225   
Correct output: -90.2595503995 | Program output: -34.0791089   
Correct output: -82.4635707651 | Program output: -83.0659025   
Correct output: -8.7492896214  | Program output: -9.0312401    
Correct output: -82.1329348831 | Program output: -80.0796561   
Correct output: 24.5261129925  | Program output: 24.0405184    
Correct output: -11.4065589042 | Program output: -12.0602704   
Correct output: 10.3282540908  | Program output: 10.045776     
Correct output: -51.7760580299 | Program output: -52.0755929   
Correct output: 51.8185003253  | Program output: 73.0755625    
Correct output: 110.7431489201 | Program output: 110.021441    
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_dup_items} {:instruction float_mult} {:instruction float_yankdup} {:instruction float_yankdup} {:instruction float_cos} {:instruction integer_dup_items} {:instruction float_mult} {:instruction float_yankdup} {:instruction float_pop} {:instruction float_mult} {:instruction float_mult} {:instruction integer_dup} {:instruction float_shove} {:instruction float_pop} {:instruction float_pop} {:instruction float_frominteger} {:instruction float_dup_times} {:instruction float_mult} {:instruction float_dup_times} {:instruction float_shove} {:instruction 28} {:instruction integer_add} {:instruction float_tan} {:instruction in1} {:instruction float_dup_times} {:instruction float_mult} {:instruction 28} {:instruction integer_add} {:instruction float_pop} {:instruction float_dup_times} {:instruction float_mult} {:instruction float_mult} {:instruction tag_float_216} {:instruction integer_max} {:instruction float_inc} {:instruction in2} {:instruction float_max} {:instruction integer_dup} {:instruction tagged_72} {:instruction integer_mult} {:instruction float_mult} {:instruction float_pop} {:instruction float_sin} {:instruction float_mult} {:instruction in2} {:instruction float_sub} {:instruction float_sub} {:instruction float_mult} {:instruction integer_dup} {:instruction integer_dup} {:instruction tagged_426} {:instruction float_pop} {:instruction float_sin} {:instruction tagged_496} {:instruction integer_mult} {:instruction integer_dup} {:instruction float_add} {:instruction integer_dup} {:instruction float_add} {:instruction integer_dec} {:instruction integer_mult} {:instruction float_mult} {:instruction float_tan} {:instruction float_tan} {:instruction in2} {:instruction float_max} {:instruction in2} {:instruction integer_fromfloat} {:instruction integer_dup} {:instruction integer_pop} {:instruction integer_add} {:instruction float_cos} {:instruction float_frominteger} {:instruction integer_swap} {:instruction integer_mod} {:instruction integer_dup} {:instruction 80} {:instruction integer_mod} {:instruction integer_dup} {:instruction print_float} {:instruction float_mult} {:instruction print_integer} {:instruction float_dup_times} {:instruction float_mult} {:instruction tagged_587} {:instruction integer_stackdepth} {:instruction float_sin} {:instruction float_mult} {:instruction integer_max} {:instruction float_min} {:instruction float_inc} {:instruction integer_mult} {:instruction integer_mult} {:instruction integer_shove} {:instruction print_integer} {:instruction integer_div})
Best program: (integer_dup_items float_mult float_yankdup float_yankdup float_cos integer_dup_items float_mult float_yankdup float_pop float_mult float_mult integer_dup float_shove float_pop float_pop float_frominteger float_dup_times float_mult float_dup_times float_shove 28 integer_add float_tan in1 float_dup_times float_mult 28 integer_add float_pop float_dup_times float_mult float_mult tag_float_216 integer_max float_inc in2 float_max integer_dup tagged_72 integer_mult float_mult float_pop float_sin float_mult in2 float_sub float_sub float_mult integer_dup integer_dup tagged_426 float_pop float_sin tagged_496 integer_mult integer_dup float_add integer_dup float_add integer_dec integer_mult float_mult float_tan float_tan in2 float_max in2 integer_fromfloat integer_dup integer_pop integer_add float_cos float_frominteger integer_swap integer_mod integer_dup 80 integer_mod integer_dup print_float float_mult print_integer float_dup_times float_mult tagged_587 integer_stackdepth float_sin float_mult integer_max float_min float_inc integer_mult integer_mult integer_shove print_integer integer_div)
Errors: [76.0362 9 0.0683 8 0.8118 8 12.52 10 47.7882 11 56.784 11 0.92 7 99.848 11 0.5104 9 16.2344 10 56.2698 11 80.9001 6 34.2086 10 7.0933 10 0.0091 7 56.1804 9 0.6023 7 0.282 9 2.0533 9 0.4856 9 0.6537 7 0.2825 9 0.2995 7 21.2571 9 0.7217 7]
Total: 792.8203000000001
Mean: 15.856406
Genome size: 96
Size: 97
Percent parens: 0.010
--- Population Statistics ---
Average total errors in population: 4893.3096516
Median total errors in population: 1251.2166
Error averages by case: (249.32081000000073 8.73 186.62404659999842 9.69 134.92572539999884 10.241 173.65941560000044 11.029 151.2428466000012 10.473 125.48871220000034 10.119 176.68323120000082 8.587 154.27578909999966 12.001 155.4463477000003 11.233 206.09349479999815 10.635 131.28168480000022 11.272 267.4945836999993 9.135 106.2875554000004 10.753 128.62389030000045 10.909 155.14539600000003 11.016 238.92502480000226 10.065 207.7862244999994 9.43 223.7436343000024 10.542 197.5181010999997 8.984 266.392725099999 12.115 223.9147581999983 9.199 259.3411545000019 11.893 215.26950859999874 9.32 155.21944520000014 9.947 144.12054590000076 11.167)
Error minima by case: (39.0364 7 0.0683 6 0.8118 5 11.5041 8 2.2356 8 5.7128 5 0.0299 6 0.7928 5 0.5104 5 14.2074 8 0.7742 5 80.9001 6 1.8174 3 1.0188 8 0.0091 6 32.1806 8 0.6023 7 0.282 8 0.0348 7 0.4856 9 0.6537 7 0.2825 9 0.2995 7 5.1815 6 0.7217 6)
Average genome size in population (length): 111.112
Average program size in population (points): 112.112
Average percent parens in population: 0.009
Minimum age in population: 268.294185628101
Maximum age in population: 273.1341442622649
Average age in population: 270.9251720912814
Median age in population: 270.9419292888537
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 9
Genome diversity (% unique Plush genomes):	 0.889
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 9
Syntactic diversity (% unique Push programs):	 0.889
Total error diversity:				 0.648
Error (vector) diversity:			 0.656
Behavioral diversity:				 0.656
--- Run Statistics ---
Number of program evaluations used so far: 196000
Number of point (instruction) evaluations so far: 382197005
--- Timings ---
Current time: 1529615730050 milliseconds
Total Time:         835.9 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       300.3 seconds, 35.9%
Fitness Testing:    424.6 seconds, 50.8%
Report:             110.9 seconds, 13.3%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 195
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 196
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 196
;;******************************
;; -*- Number IO problem report - generation 196
Test total error for best: 38835.52380000002
Test mean error for best: 19.41776
;;------------------------------
Outputs of best individual on training cases:
Correct output: -116.076402553 | Program output: -40.0401600   
Correct output: 24.1400847456  | Program output: 24.07181      
Correct output: 69.833290954   | Program output: 69.021441     
Correct output: 82.4958592801  | Program output: 95.0159025    
Correct output: 34.2385110874  | Program output: 82.026724     
Correct output: -10.7358110665 | Program output: 46.0482304    
Correct output: 1.9700532093   | Program output: 1.050100      
Correct output: -44.7956976677 | Program output: 55.0522704    
Correct output: 68.5576547673  | Program output: 68.0472209    
Correct output: -69.2536523379 | Program output: -53.0192809   
Correct output: -14.2275745396 | Program output: 42.0421764    
Correct output: -171.9767905886 | Program output: -91.0767056   
Correct output: -32.1846093265 | Program output: 2.024         
Correct output: 66.9812146721  | Program output: 74.0745476    
Correct output: 100.0259781081 | Program output: 100.0351225   
Correct output: -90.2595503995 | Program output: -34.0791089   
Correct output: -82.4635707651 | Program output: -83.0659025   
Correct output: -8.7492896214  | Program output: -9.0312401    
Correct output: -82.1329348831 | Program output: -80.0796561   
Correct output: 24.5261129925  | Program output: 24.0405184    
Correct output: -11.4065589042 | Program output: -12.0602704   
Correct output: 10.3282540908  | Program output: 10.045776     
Correct output: -51.7760580299 | Program output: -52.0755929   
Correct output: 51.8185003253  | Program output: 73.0755625    
Correct output: 110.7431489201 | Program output: 110.021441    
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_dup_items} {:instruction float_mult} {:instruction float_yankdup} {:instruction float_yankdup} {:instruction float_cos} {:instruction integer_dup_items} {:instruction float_mult} {:instruction float_yankdup} {:instruction float_pop} {:instruction float_mult} {:instruction float_mult} {:instruction integer_dup} {:instruction float_shove} {:instruction float_pop} {:instruction float_pop} {:instruction float_frominteger} {:instruction float_dup_times} {:instruction float_mult} {:instruction float_dup_times} {:instruction float_shove} {:instruction 28} {:instruction integer_add} {:instruction float_tan} {:instruction in1} {:instruction float_dup_times} {:instruction float_mult} {:instruction 28} {:instruction integer_add} {:instruction float_pop} {:instruction float_dup_times} {:instruction float_mult} {:instruction float_mult} {:instruction tag_float_216} {:instruction integer_max} {:instruction float_inc} {:instruction in2} {:instruction float_max} {:instruction integer_dup} {:instruction tagged_72} {:instruction integer_mult} {:instruction float_mult} {:instruction float_pop} {:instruction float_sin} {:instruction float_mult} {:instruction in2} {:instruction float_sub} {:instruction float_sub} {:instruction float_mult} {:instruction integer_dup} {:instruction integer_dup} {:instruction tagged_426} {:instruction float_pop} {:instruction float_sin} {:instruction tagged_496} {:instruction integer_mult} {:instruction integer_dup} {:instruction float_add} {:instruction integer_dup} {:instruction float_add} {:instruction integer_dec} {:instruction integer_mult} {:instruction float_mult} {:instruction float_tan} {:instruction float_tan} {:instruction in2} {:instruction float_max} {:instruction in2} {:instruction integer_fromfloat} {:instruction integer_dup} {:instruction integer_pop} {:instruction integer_add} {:instruction float_cos} {:instruction float_frominteger} {:instruction integer_swap} {:instruction integer_mod} {:instruction integer_dup} {:instruction 80} {:instruction integer_mod} {:instruction integer_dup} {:instruction print_float} {:instruction float_mult} {:instruction print_integer} {:instruction float_dup_times} {:instruction float_mult} {:instruction tagged_587} {:instruction integer_stackdepth} {:instruction float_sin} {:instruction float_mult} {:instruction integer_max} {:instruction float_min} {:instruction float_inc} {:instruction integer_mult} {:instruction integer_mult} {:instruction integer_shove} {:instruction print_integer} {:instruction integer_div})
Best program: (integer_dup_items float_mult float_yankdup float_yankdup float_cos integer_dup_items float_mult float_yankdup float_pop float_mult float_mult integer_dup float_shove float_pop float_pop float_frominteger float_dup_times float_mult float_dup_times float_shove 28 integer_add float_tan in1 float_dup_times float_mult 28 integer_add float_pop float_dup_times float_mult float_mult tag_float_216 integer_max float_inc in2 float_max integer_dup tagged_72 integer_mult float_mult float_pop float_sin float_mult in2 float_sub float_sub float_mult integer_dup integer_dup tagged_426 float_pop float_sin tagged_496 integer_mult integer_dup float_add integer_dup float_add integer_dec integer_mult float_mult float_tan float_tan in2 float_max in2 integer_fromfloat integer_dup integer_pop integer_add float_cos float_frominteger integer_swap integer_mod integer_dup 80 integer_mod integer_dup print_float float_mult print_integer float_dup_times float_mult tagged_587 integer_stackdepth float_sin float_mult integer_max float_min float_inc integer_mult integer_mult integer_shove print_integer integer_div)
Errors: [76.0362 9 0.0683 8 0.8118 8 12.52 10 47.7882 11 56.784 11 0.92 7 99.848 11 0.5104 9 16.2344 10 56.2698 11 80.9001 6 34.2086 10 7.0933 10 0.0091 7 56.1804 9 0.6023 7 0.282 9 2.0533 9 0.4856 9 0.6537 7 0.2825 9 0.2995 7 21.2571 9 0.7217 7]
Total: 792.8203000000001
Mean: 15.856406
Genome size: 96
Size: 97
Percent parens: 0.010
--- Population Statistics ---
Average total errors in population: 5144.779114799998
Median total errors in population: 1266.2341000000001
Error averages by case: (259.33153990000073 8.75 203.98698799999812 9.799 143.8249959999986 10.341 185.49285440000037 11.179 164.98499110000068 10.523 137.09368660000035 10.067 190.20331580000112 8.718 162.96861229999988 12.157 164.053588800001 11.249 214.2757865999982 10.654 143.92328729999997 11.465 273.6837853 9.162 122.60617590000065 10.794 129.50741210000035 10.918 170.68555170000081 11.349 245.46250230000223 9.983 214.75832479999974 9.408 230.10770860000213 10.506 203.30061529999978 9.056 274.85265699999934 11.958 231.5507888999983 9.234 264.94304700000157 11.762 223.44092649999874 9.267 170.17341239999936 10.246 159.98256020000025 11.039)
Error minima by case: (36.0736 6 0.0683 4 0.8118 4 2.5041 7 3.7714 8 5.6916 4 0.0309 3 0.7928 4 0.5102 4 14.2074 7 0.7742 4 3.974 6 2.0 3 1.0188 8 0.0091 5 24.2568 7 0.6022 7 0.282 8 0.0364 6 0.4434 7 0.5934 7 0.2825 7 0.2575 7 3.7428 6 0.7217 5)
Average genome size in population (length): 111.243
Average program size in population (points): 112.243
Average percent parens in population: 0.009
Minimum age in population: 269.6590793753912
Maximum age in population: 274.1722858376462
Average age in population: 272.3155794046596
Median age in population: 272.35916438542
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 12
Genome diversity (% unique Plush genomes):	 0.897
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 12
Syntactic diversity (% unique Push programs):	 0.897
Total error diversity:				 0.642
Error (vector) diversity:			 0.648
Behavioral diversity:				 0.648
--- Run Statistics ---
Number of program evaluations used so far: 197000
Number of point (instruction) evaluations so far: 385056039
--- Timings ---
Current time: 1529615735663 milliseconds
Total Time:         841.5 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       301.8 seconds, 35.9%
Fitness Testing:    428.0 seconds, 50.9%
Report:             111.6 seconds, 13.3%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 196
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 197
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 197
;;******************************
;; -*- Number IO problem report - generation 197
Test total error for best: 38835.52380000002
Test mean error for best: 19.41776
;;------------------------------
Outputs of best individual on training cases:
Correct output: -116.076402553 | Program output: -40.0401600   
Correct output: 24.1400847456  | Program output: 24.07181      
Correct output: 69.833290954   | Program output: 69.021441     
Correct output: 82.4958592801  | Program output: 95.0159025    
Correct output: 34.2385110874  | Program output: 82.026724     
Correct output: -10.7358110665 | Program output: 46.0482304    
Correct output: 1.9700532093   | Program output: 1.050100      
Correct output: -44.7956976677 | Program output: 55.0522704    
Correct output: 68.5576547673  | Program output: 68.0472209    
Correct output: -69.2536523379 | Program output: -53.0192809   
Correct output: -14.2275745396 | Program output: 42.0421764    
Correct output: -171.9767905886 | Program output: -91.0767056   
Correct output: -32.1846093265 | Program output: 2.024         
Correct output: 66.9812146721  | Program output: 74.0745476    
Correct output: 100.0259781081 | Program output: 100.0351225   
Correct output: -90.2595503995 | Program output: -34.0791089   
Correct output: -82.4635707651 | Program output: -83.0659025   
Correct output: -8.7492896214  | Program output: -9.0312401    
Correct output: -82.1329348831 | Program output: -80.0796561   
Correct output: 24.5261129925  | Program output: 24.0405184    
Correct output: -11.4065589042 | Program output: -12.0602704   
Correct output: 10.3282540908  | Program output: 10.045776     
Correct output: -51.7760580299 | Program output: -52.0755929   
Correct output: 51.8185003253  | Program output: 73.0755625    
Correct output: 110.7431489201 | Program output: 110.021441    
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_dup_items} {:instruction float_mult} {:instruction float_yankdup} {:instruction float_yankdup} {:instruction float_cos} {:instruction integer_dup_items} {:instruction float_mult} {:instruction float_yankdup} {:instruction float_pop} {:instruction float_mult} {:instruction float_mult} {:instruction integer_dup} {:instruction float_shove} {:instruction float_pop} {:instruction float_pop} {:instruction float_frominteger} {:instruction float_dup_times} {:instruction float_mult} {:instruction float_dup_times} {:instruction float_shove} {:instruction 28} {:instruction integer_add} {:instruction float_tan} {:instruction in1} {:instruction float_dup_times} {:instruction float_mult} {:instruction 28} {:instruction integer_add} {:instruction float_pop} {:instruction float_dup_times} {:instruction float_mult} {:instruction float_mult} {:instruction tag_float_216} {:instruction integer_max} {:instruction float_inc} {:instruction in2} {:instruction float_max} {:instruction integer_dup} {:instruction tagged_72} {:instruction integer_mult} {:instruction float_mult} {:instruction float_pop} {:instruction float_sin} {:instruction float_mult} {:instruction in2} {:instruction float_sub} {:instruction float_sub} {:instruction float_mult} {:instruction integer_dup} {:instruction integer_dup} {:instruction tagged_426} {:instruction float_pop} {:instruction float_sin} {:instruction tagged_496} {:instruction integer_mult} {:instruction integer_dup} {:instruction float_add} {:instruction integer_dup} {:instruction float_add} {:instruction integer_dec} {:instruction integer_mult} {:instruction float_mult} {:instruction float_tan} {:instruction float_tan} {:instruction in2} {:instruction float_max} {:instruction in2} {:instruction integer_fromfloat} {:instruction integer_dup} {:instruction integer_pop} {:instruction integer_add} {:instruction float_cos} {:instruction float_frominteger} {:instruction integer_swap} {:instruction integer_mod} {:instruction integer_dup} {:instruction 80} {:instruction integer_mod} {:instruction integer_dup} {:instruction print_float} {:instruction float_mult} {:instruction print_integer} {:instruction float_dup_times} {:instruction float_mult} {:instruction tagged_587} {:instruction integer_stackdepth} {:instruction float_sin} {:instruction float_mult} {:instruction integer_max} {:instruction float_min} {:instruction float_inc} {:instruction integer_mult} {:instruction integer_mult} {:instruction integer_shove} {:instruction print_integer} {:instruction integer_div})
Best program: (integer_dup_items float_mult float_yankdup float_yankdup float_cos integer_dup_items float_mult float_yankdup float_pop float_mult float_mult integer_dup float_shove float_pop float_pop float_frominteger float_dup_times float_mult float_dup_times float_shove 28 integer_add float_tan in1 float_dup_times float_mult 28 integer_add float_pop float_dup_times float_mult float_mult tag_float_216 integer_max float_inc in2 float_max integer_dup tagged_72 integer_mult float_mult float_pop float_sin float_mult in2 float_sub float_sub float_mult integer_dup integer_dup tagged_426 float_pop float_sin tagged_496 integer_mult integer_dup float_add integer_dup float_add integer_dec integer_mult float_mult float_tan float_tan in2 float_max in2 integer_fromfloat integer_dup integer_pop integer_add float_cos float_frominteger integer_swap integer_mod integer_dup 80 integer_mod integer_dup print_float float_mult print_integer float_dup_times float_mult tagged_587 integer_stackdepth float_sin float_mult integer_max float_min float_inc integer_mult integer_mult integer_shove print_integer integer_div)
Errors: [76.0362 9 0.0683 8 0.8118 8 12.52 10 47.7882 11 56.784 11 0.92 7 99.848 11 0.5104 9 16.2344 10 56.2698 11 80.9001 6 34.2086 10 7.0933 10 0.0091 7 56.1804 9 0.6023 7 0.282 9 2.0533 9 0.4856 9 0.6537 7 0.2825 9 0.2995 7 21.2571 9 0.7217 7]
Total: 792.8203000000001
Mean: 15.856406
Genome size: 96
Size: 97
Percent parens: 0.010
--- Population Statistics ---
Average total errors in population: 4791.488639899997
Median total errors in population: 1230.28935
Error averages by case: (238.77496010000044 8.779 188.4379271999986 9.767 140.51690429999869 10.275 173.94803610000002 11.14 152.71765720000067 10.457 128.05161550000022 10.122 176.23159950000104 8.589 158.8758598000001 12.23 159.86347810000072 11.229 190.98388919999772 10.697 135.1572954000001 11.469 254.1674820999988 9.185 110.59435540000064 10.731 120.96505170000043 10.815 162.99646130000045 11.363 221.91809490000287 9.928 195.40017549999942 9.377 209.29812490000253 10.584 183.60474509999963 9.086 258.1680087999987 12.004 209.8385952999981 9.305 248.6726265000019 11.856 203.90565439999864 9.297 158.41109689999982 10.137 150.49594470000045 11.071)
Error minima by case: (35.0764 4 0.0683 4 0.8117 4 0.2874 7 1.9878 8 1.6936 4 0.0299 3 0.7928 4 0.5098 4 14.2259 4 0.5499 4 2.9768 4 0.0063 3 1.0026 7 0.0091 5 23.2596 4 0.6022 7 0.2818 8 0.0523 4 0.4434 4 0.4044 7 0.2825 4 0.256 7 1.8929 7 0.0114 5)
Average genome size in population (length): 110.693
Average program size in population (points): 111.693
Average percent parens in population: 0.009
Minimum age in population: 271.2999926206697
Maximum age in population: 275.7279872663417
Average age in population: 273.695083141476
Median age in population: 273.7050717230513
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 10
Genome diversity (% unique Plush genomes):	 0.907
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 10
Syntactic diversity (% unique Push programs):	 0.907
Total error diversity:				 0.627
Error (vector) diversity:			 0.63
Behavioral diversity:				 0.631
--- Run Statistics ---
Number of program evaluations used so far: 198000
Number of point (instruction) evaluations so far: 387902299
--- Timings ---
Current time: 1529615741212 milliseconds
Total Time:         847.1 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       303.4 seconds, 35.8%
Fitness Testing:    431.3 seconds, 50.9%
Report:             112.3 seconds, 13.3%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 197
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 198
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 198
;;******************************
;; -*- Number IO problem report - generation 198
Test total error for best: 13241.644399999996
Test mean error for best: 6.62082
;;------------------------------
Outputs of best individual on training cases:
Correct output: -116.076402553 | Program output: -117.89912462390065
Correct output: 24.1400847456  | Program output: 23.37351124990083
Correct output: 69.833290954   | Program output: 68.5095127122057169
Correct output: 82.4958592801  | Program output: 82.2084381338057243
Correct output: 34.2385110874  | Program output: 32.2507401911057230
Correct output: -10.7358110665 | Program output: -12.4294475404057196
Correct output: 1.9700532093   | Program output: 1.87515048180082
Correct output: -44.7956976677 | Program output: -46.5331762358057200
Correct output: 68.5576547673  | Program output: 66.6251880341057195
Correct output: -69.2536523379 | Program output: -70.80316524170065
Correct output: -14.2275745396 | Program output: -14.777460109057190
Correct output: -171.9767905886 | Program output: -172.49926820710065
Correct output: -32.1846093265 | Program output: -32.190874756402150
Correct output: 66.9812146721  | Program output: 65.9786562943057222
Correct output: 100.0259781081 | Program output: 98.2062681923057183
Correct output: -90.2595503995 | Program output: -90.31582949860065
Correct output: -82.4635707651 | Program output: -82.53317376480065
Correct output: -8.7492896214  | Program output: -10.6693424220065
Correct output: -82.1329348831 | Program output: -82.61473746150065
Correct output: 24.5261129925  | Program output: 23.07237135630065
Correct output: -11.4065589042 | Program output: -13.27904548610065
Correct output: 10.3282540908  | Program output: 9.07996792070065
Correct output: -51.7760580299 | Program output: -53.44028422280065
Correct output: 51.8185003253  | Program output: 49.9256404502057223
Correct output: 110.7431489201 | Program output: 110.7317243915057169
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_dup_items} {:instruction float_mult} {:instruction float_yankdup} {:instruction float_pop} {:instruction float_frominteger} {:instruction float_dup_times} {:instruction float_mult} {:instruction float_pop} {:instruction float_shove} {:instruction float_pop} {:instruction float_mult} {:instruction in2} {:instruction 28} {:instruction integer_add} {:instruction float_tan} {:instruction in1} {:instruction float_dup_times} {:instruction float_mult} {:instruction 29} {:instruction float_tan} {:instruction in1} {:instruction float_dup_times} {:instruction float_mult} {:instruction 28} {:instruction integer_add} {:instruction float_pop} {:instruction 28} {:instruction integer_add} {:instruction float_tan} {:instruction in1} {:instruction float_dup_times} {:instruction float_dup} {:instruction 28} {:instruction integer_add} {:instruction float_mult} {:instruction 28} {:instruction integer_add} {:instruction float_pop} {:instruction integer_inc} {:instruction in2} {:instruction float_max} {:instruction integer_dup_times} {:instruction float_dup_times} {:instruction integer_mult} {:instruction tag_float_282} {:instruction float_add} {:instruction float_mult} {:instruction in2} {:instruction float_sub} {:instruction float_sub} {:instruction float_mult} {:instruction integer_dup} {:instruction integer_dup} {:instruction tagged_426} {:instruction tagged_496} {:instruction integer_shove} {:instruction float_pop} {:instruction float_min} {:instruction float_mult} {:instruction integer_mult} {:instruction integer_dup} {:instruction float_add} {:instruction float_pop} {:instruction float_sin} {:instruction float_mult} {:instruction in2} {:instruction integer_dec} {:instruction float_cos} {:instruction float_frominteger} {:instruction integer_swap} {:instruction integer_mod} {:instruction integer_dup} {:instruction 80} {:instruction integer_mod} {:instruction integer_dup} {:instruction float_add} {:instruction integer_dup} {:instruction float_add} {:instruction integer_dec} {:instruction integer_mult} {:instruction integer_dup} {:instruction print_float} {:instruction float_frominteger} {:instruction print_integer} {:instruction float_dup_times} {:instruction float_mult} {:instruction tagged_587} {:instruction integer_stackdepth} {:instruction float_shove} {:instruction float_mult} {:instruction integer_max} {:instruction float_min} {:instruction integer_rot} {:instruction integer_mult} {:instruction integer_shove} {:instruction print_integer} {:instruction float_mult} {:instruction integer_max} {:instruction float_min} {:instruction float_inc} {:instruction integer_mult} {:instruction float_stackdepth} {:instruction print_integer} {:instruction integer_swap})
Best program: (integer_dup_items float_mult float_yankdup float_pop float_frominteger float_dup_times float_mult float_pop float_shove float_pop float_mult in2 28 integer_add float_tan in1 float_dup_times float_mult 29 float_tan in1 float_dup_times float_mult 28 integer_add float_pop 28 integer_add float_tan in1 float_dup_times float_dup 28 integer_add float_mult 28 integer_add float_pop integer_inc in2 float_max integer_dup_times float_dup_times integer_mult tag_float_282 float_add float_mult in2 float_sub float_sub float_mult integer_dup integer_dup tagged_426 tagged_496 integer_shove float_pop float_min float_mult integer_mult integer_dup float_add float_pop float_sin float_mult in2 integer_dec float_cos float_frominteger integer_swap integer_mod integer_dup 80 integer_mod integer_dup float_add integer_dup float_add integer_dec integer_mult integer_dup print_float float_frominteger print_integer float_dup_times float_mult tagged_587 integer_stackdepth float_shove float_mult integer_max float_min integer_rot integer_mult integer_shove print_integer float_mult integer_max float_min float_inc integer_mult float_stackdepth print_integer integer_swap)
Errors: [1.8227 13 0.7666 14 1.3238 15 0.2874 13 1.9878 12 1.6936 15 0.0949 11 1.7375 15 1.9325 14 1.5495 11 0.5499 12 0.5225 11 0.0063 10 1.0026 11 1.8197 15 0.0563 11 0.0696 10 1.9201 13 0.4818 12 1.4537 12 1.8725 11 1.2483 13 1.6642 13 1.8929 13 0.0114 10]
Total: 337.76809999999995
Mean: 6.755362
Genome size: 104
Size: 105
Percent parens: 0.010
--- Population Statistics ---
Average total errors in population: 5031.905726499998
Median total errors in population: 1269.6934499999998
Error averages by case: (252.26148060000065 8.98 202.07880579999878 9.801 144.82969509999882 10.398 180.99168890000027 11.344 157.71894940000055 10.7 137.0069192000001 10.484 194.57146790000112 8.69 167.45184889999985 12.365 163.65131120000078 11.377 204.18166259999867 10.815 138.77724489999986 11.526 265.1175027999989 9.451 114.71870150000038 10.694 132.5584616000001 10.997 167.11764890000066 11.461 236.047518300002 10.039 207.8317629999996 9.514 223.01403890000205 10.652 196.44056559999987 9.392 267.1691162999998 11.945 224.99773639999853 9.475 258.6312644000011 11.716 216.3543321999992 9.358 164.08396589999958 10.339 151.61003619999977 11.179)
Error minima by case: (1.8227 7 0.0673 5 0.2072 6 0.2874 7 1.9878 8 1.6936 7 0.0299 5 1.7375 7 0.4746 6 1.5495 8 0.2233 7 0.5225 6 0.0063 3 1.0026 7 5.0E-4 6 0.0563 8 0.0696 7 0.2818 8 0.0523 6 0.4381 8 0.6057 7 0.2473 8 0.0078 7 1.8929 7 0.0114 5)
Average genome size in population (length): 110.382
Average program size in population (points): 111.382
Average percent parens in population: 0.009
Minimum age in population: 272.8534046428663
Maximum age in population: 277.0154500819889
Average age in population: 275.0145651189042
Median age in population: 275.0247558048334
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 9
Genome diversity (% unique Plush genomes):	 0.908
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 9
Syntactic diversity (% unique Push programs):	 0.908
Total error diversity:				 0.689
Error (vector) diversity:			 0.695
Behavioral diversity:				 0.695
--- Run Statistics ---
Number of program evaluations used so far: 199000
Number of point (instruction) evaluations so far: 390741270
--- Timings ---
Current time: 1529615747179 milliseconds
Total Time:         852.6 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       304.8 seconds, 35.8%
Fitness Testing:    434.8 seconds, 51.0%
Report:             112.9 seconds, 13.2%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 198
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 199
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 199
;;******************************
;; -*- Number IO problem report - generation 199
Test total error for best: 9356.251500000008
Test mean error for best: 4.67813
;;------------------------------
Outputs of best individual on training cases:
Correct output: -116.076402553 | Program output: -116.000      
Correct output: 24.1400847456  | Program output: 24.000        
Correct output: 69.833290954   | Program output: 69.009261     
Correct output: 82.4958592801  | Program output: 83.00857375   
Correct output: 34.2385110874  | Program output: 35.00551368   
Correct output: -10.7358110665 | Program output: -10.00110592  
Correct output: 1.9700532093   | Program output: 1.000         
Correct output: -44.7956976677 | Program output: -44.00140608  
Correct output: 68.5576547673  | Program output: 68.00103823   
Correct output: -69.2536523379 | Program output: -69.000       
Correct output: -14.2275745396 | Program output: -14.0074088   
Correct output: -171.9767905886 | Program output: -171.000      
Correct output: -32.1846093265 | Program output: -32.008       
Correct output: 66.9812146721  | Program output: 67.00405224   
Correct output: 100.0259781081 | Program output: 100.0042875   
Correct output: -90.2595503995 | Program output: -90.000       
Correct output: -82.4635707651 | Program output: -83.000       
Correct output: -8.7492896214  | Program output: -9.000        
Correct output: -82.1329348831 | Program output: -82.000       
Correct output: 24.5261129925  | Program output: 24.000        
Correct output: -11.4065589042 | Program output: -12.000       
Correct output: 10.3282540908  | Program output: 10.000        
Correct output: -51.7760580299 | Program output: -52.000       
Correct output: 51.8185003253  | Program output: 52.00421875   
Correct output: 110.7431489201 | Program output: 110.009261    
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_dup_items} {:instruction float_mult} {:instruction float_yankdup} {:instruction float_yankdup} {:instruction float_cos} {:instruction integer_dup_items} {:instruction float_mult} {:instruction float_yankdup} {:instruction float_pop} {:instruction float_mult} {:instruction float_mult} {:instruction integer_dup} {:instruction float_shove} {:instruction float_pop} {:instruction float_pop} {:instruction float_frominteger} {:instruction float_dup_times} {:instruction float_mult} {:instruction float_dup_times} {:instruction float_shove} {:instruction 28} {:instruction integer_add} {:instruction float_tan} {:instruction in1} {:instruction float_dup_times} {:instruction float_mult} {:instruction 28} {:instruction integer_add} {:instruction float_pop} {:instruction float_dup_times} {:instruction float_mult} {:instruction float_mult} {:instruction tag_float_216} {:instruction integer_max} {:instruction float_inc} {:instruction in2} {:instruction float_max} {:instruction integer_dup} {:instruction tagged_72} {:instruction integer_mult} {:instruction float_mult} {:instruction float_pop} {:instruction float_sin} {:instruction tagged_72} {:instruction integer_mult} {:instruction float_mult} {:instruction float_pop} {:instruction float_sin} {:instruction float_mult} {:instruction in2} {:instruction float_sub} {:instruction float_sub} {:instruction float_mult} {:instruction integer_dup} {:instruction integer_dup} {:instruction tagged_426} {:instruction float_pop} {:instruction float_sin} {:instruction tagged_496} {:instruction integer_mult} {:instruction integer_dup} {:instruction float_add} {:instruction integer_dup} {:instruction float_add} {:instruction integer_dec} {:instruction integer_mult} {:instruction float_mult} {:instruction float_tan} {:instruction float_tan} {:instruction tag_float_411} {:instruction float_max} {:instruction in2} {:instruction integer_fromfloat} {:instruction integer_dup} {:instruction integer_pop} {:instruction integer_add} {:instruction float_cos} {:instruction float_frominteger} {:instruction integer_swap} {:instruction integer_mod} {:instruction integer_dup} {:instruction 80} {:instruction integer_mod} {:instruction integer_dup} {:instruction print_float} {:instruction float_mult} {:instruction print_integer} {:instruction float_dup_times} {:instruction float_mult} {:instruction tagged_587} {:instruction tagged_824} {:instruction float_sin} {:instruction float_mult} {:instruction integer_max} {:instruction float_min} {:instruction float_inc} {:instruction integer_mult} {:instruction integer_mult} {:instruction integer_shove} {:instruction print_integer} {:instruction integer_div})
Best program: (integer_dup_items float_mult float_yankdup float_yankdup float_cos integer_dup_items float_mult float_yankdup float_pop float_mult float_mult integer_dup float_shove float_pop float_pop float_frominteger float_dup_times float_mult float_dup_times float_shove 28 integer_add float_tan in1 float_dup_times float_mult 28 integer_add float_pop float_dup_times float_mult float_mult tag_float_216 integer_max float_inc in2 float_max integer_dup tagged_72 integer_mult float_mult float_pop float_sin tagged_72 integer_mult float_mult float_pop float_sin float_mult in2 float_sub float_sub float_mult integer_dup integer_dup tagged_426 float_pop float_sin tagged_496 integer_mult integer_dup float_add integer_dup float_add integer_dec integer_mult float_mult float_tan float_tan tag_float_411 float_max in2 integer_fromfloat integer_dup integer_pop integer_add float_cos float_frominteger integer_swap integer_mod integer_dup 80 integer_mod integer_dup print_float float_mult print_integer float_dup_times float_mult tagged_587 tagged_824 float_sin float_mult integer_max float_min float_inc integer_mult integer_mult integer_shove print_integer integer_div)
Errors: [0.0764 7 0.1401 8 0.824 8 0.5127 9 0.767 8 0.7347 7 0.9701 7 0.7943 9 0.5566 9 0.2537 10 0.2202 8 0.9768 9 0.1766 9 0.0228 10 0.0217 8 0.2596 9 0.5364 10 0.2507 11 0.1329 10 0.5261 10 0.5934 9 0.3283 8 0.2239 9 0.1857 10 0.7339 7]
Total: 229.8186
Mean: 4.596372
Genome size: 101
Size: 102
Percent parens: 0.010
--- Population Statistics ---
Average total errors in population: 4988.653422499998
Median total errors in population: 1272.25025
Error averages by case: (244.54891560000033 9.09 204.30112059999863 9.73 148.51000429999888 10.208 174.9801125999995 11.111 160.11926180000034 10.699 142.27069250000008 10.638 197.0564805000011 8.613 171.33949440000012 12.203 162.6732721000006 11.145 200.41179769999852 10.799 147.09838640000004 11.35 259.29961819999903 9.525 108.26918900000024 10.57 130.79661169999974 10.847 168.37251170000008 11.144 230.7718233000021 10.098 206.46973959999963 9.641 216.58353500000203 10.632 194.4680022000001 9.545 258.2801521999998 11.739 216.68026049999838 9.515 250.33486290000084 11.532 211.23137649999939 9.481 162.8562836999996 10.274 159.83991749999996 10.961)
Error minima by case: (0.0764 7 0.0673 4 0.4376 5 0.0077 7 0.1948 8 0.3284 5 0.0949 3 0.2687 5 0.5027 5 0.2537 7 0.1855 5 3.0E-4 6 0.0063 3 0.0228 7 0.0091 5 0.0563 7 0.0018 7 0.2507 7 0.0523 7 0.4381 7 0.5934 7 0.2473 6 0.0166 7 0.1857 7 0.0114 5)
Average genome size in population (length): 108.518
Average program size in population (points): 109.518
Average percent parens in population: 0.009
Minimum age in population: 274.3109372357234
Maximum age in population: 278.1551007326733
Average age in population: 276.3123622213678
Median age in population: 276.3740909244497
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 12
Genome diversity (% unique Plush genomes):	 0.899
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 12
Syntactic diversity (% unique Push programs):	 0.899
Total error diversity:				 0.693
Error (vector) diversity:			 0.699
Behavioral diversity:				 0.699
--- Run Statistics ---
Number of program evaluations used so far: 200000
Number of point (instruction) evaluations so far: 393534152
--- Timings ---
Current time: 1529615752669 milliseconds
Total Time:         858.5 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       306.4 seconds, 35.7%
Fitness Testing:    438.0 seconds, 51.0%
Report:             114.0 seconds, 13.3%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 199
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 200
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 200
;;******************************
;; -*- Number IO problem report - generation 200
Test total error for best: 9356.251500000008
Test mean error for best: 4.67813
;;------------------------------
Outputs of best individual on training cases:
Correct output: -116.076402553 | Program output: -116.000      
Correct output: 24.1400847456  | Program output: 24.000        
Correct output: 69.833290954   | Program output: 69.009261     
Correct output: 82.4958592801  | Program output: 83.00857375   
Correct output: 34.2385110874  | Program output: 35.00551368   
Correct output: -10.7358110665 | Program output: -10.00110592  
Correct output: 1.9700532093   | Program output: 1.000         
Correct output: -44.7956976677 | Program output: -44.00140608  
Correct output: 68.5576547673  | Program output: 68.00103823   
Correct output: -69.2536523379 | Program output: -69.000       
Correct output: -14.2275745396 | Program output: -14.0074088   
Correct output: -171.9767905886 | Program output: -171.000      
Correct output: -32.1846093265 | Program output: -32.008       
Correct output: 66.9812146721  | Program output: 67.00405224   
Correct output: 100.0259781081 | Program output: 100.0042875   
Correct output: -90.2595503995 | Program output: -90.000       
Correct output: -82.4635707651 | Program output: -83.000       
Correct output: -8.7492896214  | Program output: -9.000        
Correct output: -82.1329348831 | Program output: -82.000       
Correct output: 24.5261129925  | Program output: 24.000        
Correct output: -11.4065589042 | Program output: -12.000       
Correct output: 10.3282540908  | Program output: 10.000        
Correct output: -51.7760580299 | Program output: -52.000       
Correct output: 51.8185003253  | Program output: 52.00421875   
Correct output: 110.7431489201 | Program output: 110.009261    
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_dup_items} {:instruction float_mult} {:instruction float_yankdup} {:instruction float_yankdup} {:instruction float_cos} {:instruction integer_dup_items} {:instruction float_mult} {:instruction float_yankdup} {:instruction float_pop} {:instruction float_mult} {:instruction float_mult} {:instruction integer_dup} {:instruction float_shove} {:instruction float_shove} {:instruction float_pop} {:instruction float_frominteger} {:instruction float_dup_times} {:instruction float_mult} {:instruction float_dup_times} {:instruction float_shove} {:instruction 28} {:instruction integer_add} {:instruction float_tan} {:instruction in1} {:instruction float_dup_times} {:instruction float_mult} {:instruction 28} {:instruction integer_add} {:instruction float_pop} {:instruction float_dup_times} {:instruction float_mult} {:instruction float_mult} {:instruction tag_float_216} {:instruction integer_max} {:instruction float_inc} {:instruction in2} {:instruction float_max} {:instruction integer_dup} {:instruction tagged_72} {:instruction integer_mult} {:instruction float_mult} {:instruction float_pop} {:instruction float_sin} {:instruction tagged_72} {:instruction integer_mult} {:instruction float_mult} {:instruction float_pop} {:instruction float_sin} {:instruction float_mult} {:instruction in2} {:instruction float_sub} {:instruction float_sub} {:instruction float_mult} {:instruction integer_dup} {:instruction integer_dup} {:instruction tagged_426} {:instruction float_pop} {:instruction float_sin} {:instruction tagged_496} {:instruction integer_mult} {:instruction integer_dup} {:instruction float_add} {:instruction integer_dup} {:instruction float_add} {:instruction integer_dec} {:instruction integer_mult} {:instruction float_mult} {:instruction float_tan} {:instruction float_tan} {:instruction tag_float_411} {:instruction float_max} {:instruction in2} {:instruction integer_fromfloat} {:instruction integer_dup} {:instruction integer_pop} {:instruction integer_add} {:instruction float_cos} {:instruction float_frominteger} {:instruction integer_swap} {:instruction integer_mod} {:instruction integer_dup} {:instruction 80} {:instruction integer_mod} {:instruction integer_dup} {:instruction print_float} {:instruction float_mult} {:instruction print_integer} {:instruction float_dup_times} {:instruction float_mult} {:instruction tagged_587} {:instruction tagged_824} {:instruction float_sin} {:instruction float_mult} {:instruction integer_max} {:instruction float_min} {:instruction float_inc} {:instruction integer_mult} {:instruction integer_mult} {:instruction integer_shove} {:instruction print_integer} {:instruction integer_div})
Best program: (integer_dup_items float_mult float_yankdup float_yankdup float_cos integer_dup_items float_mult float_yankdup float_pop float_mult float_mult integer_dup float_shove float_shove float_pop float_frominteger float_dup_times float_mult float_dup_times float_shove 28 integer_add float_tan in1 float_dup_times float_mult 28 integer_add float_pop float_dup_times float_mult float_mult tag_float_216 integer_max float_inc in2 float_max integer_dup tagged_72 integer_mult float_mult float_pop float_sin tagged_72 integer_mult float_mult float_pop float_sin float_mult in2 float_sub float_sub float_mult integer_dup integer_dup tagged_426 float_pop float_sin tagged_496 integer_mult integer_dup float_add integer_dup float_add integer_dec integer_mult float_mult float_tan float_tan tag_float_411 float_max in2 integer_fromfloat integer_dup integer_pop integer_add float_cos float_frominteger integer_swap integer_mod integer_dup 80 integer_mod integer_dup print_float float_mult print_integer float_dup_times float_mult tagged_587 tagged_824 float_sin float_mult integer_max float_min float_inc integer_mult integer_mult integer_shove print_integer integer_div)
Errors: [0.0764 7 0.1401 8 0.824 8 0.5127 9 0.767 8 0.7347 7 0.9701 7 0.7943 9 0.5566 9 0.2537 10 0.2202 8 0.9768 9 0.1766 9 0.0228 10 0.0217 8 0.2596 9 0.5364 10 0.2507 11 0.1329 10 0.5261 10 0.5934 9 0.3283 8 0.2239 9 0.1857 10 0.7339 7]
Total: 229.8186
Mean: 4.596372
Genome size: 101
Size: 102
Percent parens: 0.010
--- Population Statistics ---
Average total errors in population: 5381.8173068
Median total errors in population: 1213.3215
Error averages by case: (272.87497030000054 9.851 227.94205169999913 9.946 143.25331329999906 10.244 171.07901389999964 11.256 167.1093849 11.071 157.47659930000015 11.366 221.12798820000108 8.794 184.72683219999976 12.441 156.53374329999983 11.079 233.03535579999829 11.232 157.96182340000013 11.505 287.0585131999996 10.169 115.07518880000002 10.523 141.78966380000003 11.093 158.76207809999985 10.834 260.9913014000016 10.692 236.46661459999967 9.999 246.8751171000015 10.943 226.16955059999975 10.158 273.5520973000006 11.763 245.93870089999885 9.828 272.5801668000003 11.437 244.0683270999999 9.933 164.57667859999978 10.74 147.46623219999992 10.429)
Error minima by case: (0.0362 6 0.0623 4 0.1882 5 0.0077 6 0.0102 7 0.0098 5 6.0E-4 3 0.617 5 0.0248 5 0.1189 6 0.0016 5 3.0E-4 6 0.0036 3 0.0188 6 9.0E-4 6 0.0039 7 0.0018 6 0.023 8 0.0364 7 0.4361 7 0.1198 7 0.1995 6 0.0 7 0.1097 8 0.0114 5)
Average genome size in population (length): 105.717
Average program size in population (points): 106.717
Average percent parens in population: 0.009
Minimum age in population: 275.6797919813644
Maximum age in population: 279.5990704869568
Average age in population: 277.7035463294198
Median age in population: 277.7133831450042
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 11
Genome diversity (% unique Plush genomes):	 0.908
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 11
Syntactic diversity (% unique Push programs):	 0.908
Total error diversity:				 0.691
Error (vector) diversity:			 0.706
Behavioral diversity:				 0.706
--- Run Statistics ---
Number of program evaluations used so far: 201000
Number of point (instruction) evaluations so far: 396264715
--- Timings ---
Current time: 1529615758322 milliseconds
Total Time:         864.2 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       308.1 seconds, 35.7%
Fitness Testing:    441.3 seconds, 51.1%
Report:             114.7 seconds, 13.3%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 200
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

FAILURE
