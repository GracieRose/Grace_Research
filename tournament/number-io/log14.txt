Command line args: clojush.problems.software.number-io :parent-selection :tournament :print-timings true
######################################
Parameters set at command line or in problem file argmap; may or may not be default:
alignment-deviation = 5
alternation-rate = 0.01
atom-generators = (#object[clojush.problems.software.number_io$fn__6694 0x2beee3e8 clojush.problems.software.number_io$fn__6694@2beee3e8] #object[clojush.problems.software.number_io$fn__6696 0x58bad46f clojush.problems.software.number_io$fn__6696@58bad46f] #object[clojush.instructions.tag$tag_instruction_erc$fn__1963 0x20231384 clojush.instructions.tag$tag_instruction_erc$fn__1963@20231384] #object[clojush.instructions.tag$tagged_instruction_erc$fn__1969 0x35becbd4 clojush.instructions.tag$tagged_instruction_erc$fn__1969@35becbd4] in1 in2 print_newline integer_sub integer_inc integer_yankdup integer_mult float_sin float_frominteger float_mod integer_div integer_fromfloat integer_mod integer_rot float_yankdup integer_add integer_shove integer_max integer_stackdepth float_max float_dup_items float_stackdepth integer_dup_times integer_yank integer_min integer_dup_items print_integer print_float integer_flush float_shove float_pop float_sub float_min float_mult float_dec float_add float_dup float_swap integer_swap integer_dup float_tan integer_pop float_dup_times float_inc integer_dec float_rot float_flush float_cos float_div float_yank)
epigenetic-markers = []
error-function = #object[clojush.problems.software.number_io$make_number_io_error_function_from_cases$the_actual_num_io_error_function__6704 0x342723a3 clojush.problems.software.number_io$make_number_io_error_function_from_cases$the_actual_num_io_error_function__6704@342723a3]
error-threshold = 1.0E-4
evalpush-limit = 200
final-report-simplifications = 5000
genetic-operator-probabilities = {:alternation 0.3, :uniform-mutation 0.2, [:alternation :uniform-mutation] 0.5}
max-error = 5000
max-generations = 200
max-genome-size-in-initial-program = 100
max-points = 800
parent-selection = :tournament
population-size = 1000
print-timings = true
problem-specific-initial-report = #object[clojush.problems.software.number_io$number_io_initial_report 0x4ec427 clojush.problems.software.number_io$number_io_initial_report@4ec427]
problem-specific-report = #object[clojush.problems.software.number_io$num_io_report 0xfde487b clojush.problems.software.number_io$num_io_report@fde487b]
report-simplifications = 0
uniform-mutation-rate = 0.01
######################################
Train and test cases:
Train Case:   0 | Input/Output: [[-56.04733768671157 58] 1.9526623132884282]
Train Case:   1 | Input/Output: [[-15.800977352166854 -55] -70.80097735216685]
Train Case:   2 | Input/Output: [[53.21609905693089 -67] -13.783900943069114]
Train Case:   3 | Input/Output: [[70.87274063956104 73] 143.87274063956104]
Train Case:   4 | Input/Output: [[45.439602717435974 91] 136.43960271743597]
Train Case:   5 | Input/Output: [[92.50442806126537 -74] 18.504428061265372]
Train Case:   6 | Input/Output: [[42.0568646791894 50] 92.0568646791894]
Train Case:   7 | Input/Output: [[97.88734762045064 -26] 71.88734762045064]
Train Case:   8 | Input/Output: [[-70.83887492432248 60] -10.838874924322482]
Train Case:   9 | Input/Output: [[49.929982598129584 -49] 0.929982598129584]
Train Case:  10 | Input/Output: [[-50.784041228385846 24] -26.784041228385846]
Train Case:  11 | Input/Output: [[-96.126422126699 -6] -102.126422126699]
Train Case:  12 | Input/Output: [[24.806166864184775 16] 40.806166864184775]
Train Case:  13 | Input/Output: [[-35.25449663305422 30] -5.254496633054217]
Train Case:  14 | Input/Output: [[35.985588624354136 67] 102.98558862435414]
Train Case:  15 | Input/Output: [[-85.05077237661587 -33] -118.05077237661587]
Train Case:  16 | Input/Output: [[52.937176992800374 3] 55.937176992800374]
Train Case:  17 | Input/Output: [[5.265798998380461 -1] 4.265798998380461]
Train Case:  18 | Input/Output: [[90.7057987603182 6] 96.7057987603182]
Train Case:  19 | Input/Output: [[83.16244661096115 39] 122.16244661096115]
Train Case:  20 | Input/Output: [[-22.989797205462352 53] 30.010202794537648]
Train Case:  21 | Input/Output: [[75.58223870354658 29] 104.58223870354658]
Train Case:  22 | Input/Output: [[-72.55387433663265 71] -1.5538743366326457]
Train Case:  23 | Input/Output: [[69.80704961150511 97] 166.8070496115051]
Train Case:  24 | Input/Output: [[74.61889452808731 -16] 58.61889452808731]
Test Case:   0 | Input/Output: [[50.04940851625989 -52] -1.9505914837401122]
Test Case:   1 | Input/Output: [[68.12814233250975 52] 120.12814233250975]
Test Case:   2 | Input/Output: [[7.825619094304642 -4] 3.825619094304642]
Test Case:   3 | Input/Output: [[58.24315792225724 79] 137.24315792225724]
Test Case:   4 | Input/Output: [[66.37197892710304 7] 73.37197892710304]
Test Case:   5 | Input/Output: [[-24.644233014503996 61] 36.355766985496004]
Test Case:   6 | Input/Output: [[-46.98765170153367 -42] -88.98765170153368]
Test Case:   7 | Input/Output: [[-56.320411752510616 56] -0.3204117525106156]
Test Case:   8 | Input/Output: [[-88.57377748405875 51] -37.57377748405875]
Test Case:   9 | Input/Output: [[69.03648004094728 92] 161.03648004094728]
Test Case:  10 | Input/Output: [[-4.590337201226944 19] 14.409662798773056]
Test Case:  11 | Input/Output: [[-15.04803867208011 -42] -57.04803867208011]
Test Case:  12 | Input/Output: [[-0.43907651967106176 23] 22.56092348032894]
Test Case:  13 | Input/Output: [[-75.10596863310761 -70] -145.1059686331076]
Test Case:  14 | Input/Output: [[-66.97280697643342 57] -9.972806976433418]
Test Case:  15 | Input/Output: [[33.28536252937849 -95] -61.71463747062151]
Test Case:  16 | Input/Output: [[72.77996728655182 47] 119.77996728655182]
Test Case:  17 | Input/Output: [[41.8415311527435 -71] -29.1584688472565]
Test Case:  18 | Input/Output: [[43.43347892636643 28] 71.43347892636643]
Test Case:  19 | Input/Output: [[68.28133485753582 -27] 41.281334857535825]
Test Case:  20 | Input/Output: [[-5.384607995199772 35] 29.615392004800228]
Test Case:  21 | Input/Output: [[-6.787217717551513 10] 3.2127822824484866]
Test Case:  22 | Input/Output: [[73.38667035264311 -68] 5.386670352643108]
Test Case:  23 | Input/Output: [[82.35995516786247 69] 151.35995516786247]
Test Case:  24 | Input/Output: [[-44.87130564860775 -38] -82.87130564860774]
Test Case:  25 | Input/Output: [[-48.42825025900706 31] -17.428250259007058]
Test Case:  26 | Input/Output: [[16.50384065787111 58] 74.50384065787111]
Test Case:  27 | Input/Output: [[5.295152630187587 -56] -50.70484736981241]
Test Case:  28 | Input/Output: [[-57.7589280454542 8] -49.7589280454542]
Test Case:  29 | Input/Output: [[-0.2699092690273517 -16] -16.26990926902735]
Test Case:  30 | Input/Output: [[3.430524068236622 -78] -74.56947593176338]
Test Case:  31 | Input/Output: [[-56.122600152580326 24] -32.122600152580326]
Test Case:  32 | Input/Output: [[55.61613652375854 -4] 51.61613652375854]
Test Case:  33 | Input/Output: [[-65.65628524082982 83] 17.343714759170183]
Test Case:  34 | Input/Output: [[-50.28490238222838 67] 16.71509761777162]
Test Case:  35 | Input/Output: [[-44.725180136272115 36] -8.725180136272115]
Test Case:  36 | Input/Output: [[-42.064824602515195 -28] -70.06482460251519]
Test Case:  37 | Input/Output: [[16.054055186588755 -25] -8.945944813411245]
Test Case:  38 | Input/Output: [[-30.445566461780487 2] -28.445566461780487]
Test Case:  39 | Input/Output: [[-93.24694946886744 -9] -102.24694946886744]
Test Case:  40 | Input/Output: [[43.01199975985483 74] 117.01199975985483]
Test Case:  41 | Input/Output: [[34.95854128843408 79] 113.95854128843408]
Test Case:  42 | Input/Output: [[-91.58255066811616 -100] -191.58255066811614]
Test Case:  43 | Input/Output: [[12.901274775107652 -84] -71.09872522489235]
Test Case:  44 | Input/Output: [[21.3805739977509 5] 26.3805739977509]
Test Case:  45 | Input/Output: [[21.65292640204879 33] 54.65292640204879]
Test Case:  46 | Input/Output: [[-68.33517340012193 -47] -115.33517340012193]
Test Case:  47 | Input/Output: [[-79.31110683468725 -43] -122.31110683468725]
Test Case:  48 | Input/Output: [[26.88364746879381 -24] 2.8836474687938107]
Test Case:  49 | Input/Output: [[91.87438169565587 18] 109.87438169565587]
Test Case:  50 | Input/Output: [[-92.80351581807957 -3] -95.80351581807957]
Test Case:  51 | Input/Output: [[29.791106408321752 8] 37.79110640832175]
Test Case:  52 | Input/Output: [[-16.47673569126289 -47] -63.47673569126289]
Test Case:  53 | Input/Output: [[55.90782433242475 -46] 9.907824332424752]
Test Case:  54 | Input/Output: [[14.584768055709759 52] 66.58476805570976]
Test Case:  55 | Input/Output: [[82.23259417720709 19] 101.23259417720709]
Test Case:  56 | Input/Output: [[-25.22028716795471 -94] -119.22028716795471]
Test Case:  57 | Input/Output: [[37.361438038969794 -87] -49.638561961030206]
Test Case:  58 | Input/Output: [[28.244001907436598 37] 65.2440019074366]
Test Case:  59 | Input/Output: [[1.9644128487665569 39] 40.96441284876656]
Test Case:  60 | Input/Output: [[9.657320093734683 -58] -48.34267990626532]
Test Case:  61 | Input/Output: [[3.500247754776396 60] 63.500247754776396]
Test Case:  62 | Input/Output: [[53.01947424271083 -38] 15.019474242710828]
Test Case:  63 | Input/Output: [[23.452836633183367 -73] -49.54716336681663]
Test Case:  64 | Input/Output: [[24.647043055256532 13] 37.64704305525653]
Test Case:  65 | Input/Output: [[-34.07674222884897 -70] -104.07674222884897]
Test Case:  66 | Input/Output: [[3.6579470950600808 -65] -61.34205290493992]
Test Case:  67 | Input/Output: [[44.395280130545046 92] 136.39528013054505]
Test Case:  68 | Input/Output: [[3.3045409128203573 -18] -14.695459087179643]
Test Case:  69 | Input/Output: [[-43.52474498849197 3] -40.52474498849197]
Test Case:  70 | Input/Output: [[92.34777252054877 50] 142.34777252054877]
Test Case:  71 | Input/Output: [[7.050543184328092 83] 90.05054318432809]
Test Case:  72 | Input/Output: [[-34.885599657528374 59] 24.114400342471626]
Test Case:  73 | Input/Output: [[-61.35256320239415 87] 25.64743679760585]
Test Case:  74 | Input/Output: [[-19.084526512906947 -46] -65.08452651290695]
Test Case:  75 | Input/Output: [[79.39027856288453 -51] 28.390278562884532]
Test Case:  76 | Input/Output: [[-64.02199550063378 -5] -69.02199550063378]
Test Case:  77 | Input/Output: [[51.31991147139968 39] 90.31991147139968]
Test Case:  78 | Input/Output: [[89.48431238144232 -19] 70.48431238144232]
Test Case:  79 | Input/Output: [[36.85060715770885 -48] -11.14939284229115]
Test Case:  80 | Input/Output: [[25.1820995218947 -19] 6.182099521894699]
Test Case:  81 | Input/Output: [[12.63217960609282 -65] -52.36782039390718]
Test Case:  82 | Input/Output: [[-49.48906959560748 -58] -107.48906959560748]
Test Case:  83 | Input/Output: [[55.823380007921884 -15] 40.823380007921884]
Test Case:  84 | Input/Output: [[98.35522440170956 86] 184.35522440170956]
Test Case:  85 | Input/Output: [[51.78679071017055 -89] -37.21320928982945]
Test Case:  86 | Input/Output: [[-36.5522380665104 19] -17.552238066510398]
Test Case:  87 | Input/Output: [[21.412751385114873 13] 34.41275138511487]
Test Case:  88 | Input/Output: [[86.38587472827604 -19] 67.38587472827604]
Test Case:  89 | Input/Output: [[4.587842475411904 -45] -40.412157524588096]
Test Case:  90 | Input/Output: [[-99.2870553363996 -28] -127.2870553363996]
Test Case:  91 | Input/Output: [[43.12624177511816 -2] 41.12624177511816]
Test Case:  92 | Input/Output: [[46.95700392123405 -84] -37.04299607876595]
Test Case:  93 | Input/Output: [[-41.50906054356265 -3] -44.50906054356265]
Test Case:  94 | Input/Output: [[78.6511319618563 92] 170.6511319618563]
Test Case:  95 | Input/Output: [[-85.12187684814279 85] -0.1218768481427901]
Test Case:  96 | Input/Output: [[98.94703737845396 50] 148.94703737845396]
Test Case:  97 | Input/Output: [[-61.744431852329626 5] -56.744431852329626]
Test Case:  98 | Input/Output: [[66.07462027915352 -92] -25.92537972084648]
Test Case:  99 | Input/Output: [[-38.12236359311605 -94] -132.12236359311606]
Test Case: 100 | Input/Output: [[76.36387732063247 65] 141.36387732063247]
Test Case: 101 | Input/Output: [[73.36039321344643 71] 144.36039321344643]
Test Case: 102 | Input/Output: [[54.881888040651205 -99] -44.118111959348795]
Test Case: 103 | Input/Output: [[-55.83761325840071 -87] -142.83761325840072]
Test Case: 104 | Input/Output: [[27.842041586654176 61] 88.84204158665418]
Test Case: 105 | Input/Output: [[26.271614153454536 -65] -38.728385846545464]
Test Case: 106 | Input/Output: [[34.3226560489274 -13] 21.3226560489274]
Test Case: 107 | Input/Output: [[37.591202659916945 -42] -4.408797340083055]
Test Case: 108 | Input/Output: [[-2.602805034156418 -71] -73.60280503415642]
Test Case: 109 | Input/Output: [[73.69472457430146 -73] 0.6947245743014605]
Test Case: 110 | Input/Output: [[35.51820752231299 44] 79.51820752231299]
Test Case: 111 | Input/Output: [[9.724020227834075 83] 92.72402022783407]
Test Case: 112 | Input/Output: [[77.16720286264717 -16] 61.16720286264717]
Test Case: 113 | Input/Output: [[-86.27352269508593 41] -45.27352269508593]
Test Case: 114 | Input/Output: [[24.93070542449904 9] 33.93070542449904]
Test Case: 115 | Input/Output: [[-46.82058352075271 96] 49.17941647924729]
Test Case: 116 | Input/Output: [[85.60282310581707 59] 144.60282310581707]
Test Case: 117 | Input/Output: [[-99.93060300361793 6] -93.93060300361793]
Test Case: 118 | Input/Output: [[-41.168631028727766 34] -7.168631028727766]
Test Case: 119 | Input/Output: [[-5.000469300910424 3] -2.0004693009104244]
Test Case: 120 | Input/Output: [[79.81478148573288 61] 140.81478148573288]
Test Case: 121 | Input/Output: [[-45.188371498593824 -27] -72.18837149859382]
Test Case: 122 | Input/Output: [[31.201144366215942 44] 75.20114436621594]
Test Case: 123 | Input/Output: [[81.60818168482163 -26] 55.60818168482163]
Test Case: 124 | Input/Output: [[-88.26873018743882 24] -64.26873018743882]
Test Case: 125 | Input/Output: [[-8.409405233419733 -19] -27.409405233419733]
Test Case: 126 | Input/Output: [[-44.682697735698376 18] -26.682697735698376]
Test Case: 127 | Input/Output: [[-1.6251489816629316 35] 33.37485101833707]
Test Case: 128 | Input/Output: [[-65.80702739812384 -43] -108.80702739812384]
Test Case: 129 | Input/Output: [[54.950125479324896 -8] 46.950125479324896]
Test Case: 130 | Input/Output: [[-5.782261370466088 -59] -64.78226137046609]
Test Case: 131 | Input/Output: [[-39.34851157752688 -15] -54.34851157752688]
Test Case: 132 | Input/Output: [[-11.349951501542293 -64] -75.3499515015423]
Test Case: 133 | Input/Output: [[55.331992700569515 -5] 50.331992700569515]
Test Case: 134 | Input/Output: [[64.94134383655049 -74] -9.058656163449513]
Test Case: 135 | Input/Output: [[-39.60832019759803 -67] -106.60832019759803]
Test Case: 136 | Input/Output: [[41.49695458852432 -43] -1.5030454114756822]
Test Case: 137 | Input/Output: [[-80.2635523450013 -100] -180.2635523450013]
Test Case: 138 | Input/Output: [[56.952249903615666 9] 65.95224990361567]
Test Case: 139 | Input/Output: [[62.823664568030665 -93] -30.176335431969335]
Test Case: 140 | Input/Output: [[53.41910935628232 -22] 31.41910935628232]
Test Case: 141 | Input/Output: [[-34.55198540749808 -74] -108.55198540749808]
Test Case: 142 | Input/Output: [[25.92839576206096 -91] -65.07160423793904]
Test Case: 143 | Input/Output: [[-86.45995643935294 -75] -161.45995643935294]
Test Case: 144 | Input/Output: [[15.700771512383298 57] 72.7007715123833]
Test Case: 145 | Input/Output: [[-74.20824897254398 -23] -97.20824897254398]
Test Case: 146 | Input/Output: [[4.847779725322837 42] 46.84777972532284]
Test Case: 147 | Input/Output: [[-96.35116312698635 91] -5.35116312698635]
Test Case: 148 | Input/Output: [[31.494184979102243 -48] -16.505815020897757]
Test Case: 149 | Input/Output: [[46.05904293881798 -25] 21.05904293881798]
Test Case: 150 | Input/Output: [[62.89790052483005 100] 162.89790052483005]
Test Case: 151 | Input/Output: [[36.96123265912837 22] 58.96123265912837]
Test Case: 152 | Input/Output: [[-88.65791171645445 -84] -172.65791171645446]
Test Case: 153 | Input/Output: [[-69.04563342406254 -92] -161.04563342406254]
Test Case: 154 | Input/Output: [[69.90173125847858 -88] -18.098268741521423]
Test Case: 155 | Input/Output: [[37.06753000860675 -2] 35.06753000860675]
Test Case: 156 | Input/Output: [[-58.5506550616476 67] 8.449344938352397]
Test Case: 157 | Input/Output: [[-49.55485562711275 -51] -100.55485562711274]
Test Case: 158 | Input/Output: [[-65.07885709226322 -39] -104.07885709226322]
Test Case: 159 | Input/Output: [[67.78977420890709 73] 140.7897742089071]
Test Case: 160 | Input/Output: [[-58.2932589681594 -68] -126.29325896815939]
Test Case: 161 | Input/Output: [[54.59761743179186 4] 58.59761743179186]
Test Case: 162 | Input/Output: [[69.65171690486446 -47] 22.651716904864458]
Test Case: 163 | Input/Output: [[56.780738640851695 48] 104.7807386408517]
Test Case: 164 | Input/Output: [[51.54950508154167 -37] 14.549505081541668]
Test Case: 165 | Input/Output: [[-62.69162619877504 55] -7.69162619877504]
Test Case: 166 | Input/Output: [[-61.51338581062782 16] -45.51338581062782]
Test Case: 167 | Input/Output: [[18.798494855865272 24] 42.79849485586527]
Test Case: 168 | Input/Output: [[-12.789925125315875 61] 48.210074874684125]
Test Case: 169 | Input/Output: [[-37.25452927096522 -4] -41.25452927096522]
Test Case: 170 | Input/Output: [[-55.42757293558127 11] -44.42757293558127]
Test Case: 171 | Input/Output: [[85.69169237959849 60] 145.6916923795985]
Test Case: 172 | Input/Output: [[32.09333833272379 38] 70.09333833272379]
Test Case: 173 | Input/Output: [[32.29672844511066 47] 79.29672844511066]
Test Case: 174 | Input/Output: [[-21.921038159570827 5] -16.921038159570827]
Test Case: 175 | Input/Output: [[26.183104178313513 -28] -1.8168958216864866]
Test Case: 176 | Input/Output: [[14.790318455825613 35] 49.79031845582561]
Test Case: 177 | Input/Output: [[-99.30813015685023 -89] -188.3081301568502]
Test Case: 178 | Input/Output: [[57.53312731193901 -90] -32.46687268806099]
Test Case: 179 | Input/Output: [[74.86988838926166 48] 122.86988838926166]
Test Case: 180 | Input/Output: [[86.70386684977979 -30] 56.703866849779786]
Test Case: 181 | Input/Output: [[77.13297062116752 77] 154.13297062116752]
Test Case: 182 | Input/Output: [[89.24488324842926 38] 127.24488324842926]
Test Case: 183 | Input/Output: [[57.7222198628362 -37] 20.722219862836198]
Test Case: 184 | Input/Output: [[95.81299699586017 95] 190.81299699586017]
Test Case: 185 | Input/Output: [[-9.067830153485687 -83] -92.06783015348569]
Test Case: 186 | Input/Output: [[75.23085114629973 95] 170.23085114629973]
Test Case: 187 | Input/Output: [[68.81540684399542 -48] 20.81540684399542]
Test Case: 188 | Input/Output: [[-91.40895543220155 91] -0.4089554322015516]
Test Case: 189 | Input/Output: [[14.463178350134626 -34] -19.536821649865374]
Test Case: 190 | Input/Output: [[-73.02543734417905 45] -28.025437344179053]
Test Case: 191 | Input/Output: [[65.43423650267454 -10] 55.43423650267454]
Test Case: 192 | Input/Output: [[30.642263117522646 65] 95.64226311752265]
Test Case: 193 | Input/Output: [[57.170112520222176 -49] 8.170112520222176]
Test Case: 194 | Input/Output: [[-96.84672795377836 -83] -179.84672795377836]
Test Case: 195 | Input/Output: [[37.450829212000826 -5] 32.450829212000826]
Test Case: 196 | Input/Output: [[8.102637930536716 13] 21.102637930536716]
Test Case: 197 | Input/Output: [[-48.7165761280935 14] -34.7165761280935]
Test Case: 198 | Input/Output: [[68.05866319334248 -92] -23.941336806657517]
Test Case: 199 | Input/Output: [[27.14996573120206 -11] 16.14996573120206]
Test Case: 200 | Input/Output: [[-14.173490383288566 -78] -92.17349038328857]
Test Case: 201 | Input/Output: [[-69.9483788584528 14] -55.9483788584528]
Test Case: 202 | Input/Output: [[34.36049870928224 94] 128.36049870928224]
Test Case: 203 | Input/Output: [[73.61555345959715 34] 107.61555345959715]
Test Case: 204 | Input/Output: [[-67.2183633057921 24] -43.218363305792096]
Test Case: 205 | Input/Output: [[71.68167428928601 5] 76.68167428928601]
Test Case: 206 | Input/Output: [[-6.2477087258434665 -13] -19.247708725843466]
Test Case: 207 | Input/Output: [[-37.49764946579211 -60] -97.49764946579211]
Test Case: 208 | Input/Output: [[-85.68537627436386 -3] -88.68537627436386]
Test Case: 209 | Input/Output: [[-6.419119471178064 -18] -24.419119471178064]
Test Case: 210 | Input/Output: [[30.90113679893284 -40] -9.09886320106716]
Test Case: 211 | Input/Output: [[-44.38983888835075 28] -16.389838888350752]
Test Case: 212 | Input/Output: [[38.673860257450514 95] 133.6738602574505]
Test Case: 213 | Input/Output: [[-91.07580333632382 -71] -162.07580333632382]
Test Case: 214 | Input/Output: [[70.3371371139863 -14] 56.3371371139863]
Test Case: 215 | Input/Output: [[-4.46963023972107 -54] -58.46963023972107]
Test Case: 216 | Input/Output: [[92.50553584619573 -51] 41.50553584619573]
Test Case: 217 | Input/Output: [[98.95738708307198 -11] 87.95738708307198]
Test Case: 218 | Input/Output: [[47.857188873599256 -45] 2.857188873599256]
Test Case: 219 | Input/Output: [[-55.75279079628315 -68] -123.75279079628315]
Test Case: 220 | Input/Output: [[-48.45835022626495 -19] -67.45835022626494]
Test Case: 221 | Input/Output: [[66.77412392532145 54] 120.77412392532145]
Test Case: 222 | Input/Output: [[-22.313658054179257 -43] -65.31365805417926]
Test Case: 223 | Input/Output: [[23.10290500453347 87] 110.10290500453347]
Test Case: 224 | Input/Output: [[92.48544283399391 72] 164.48544283399391]
Test Case: 225 | Input/Output: [[-67.3318567087428 -55] -122.3318567087428]
Test Case: 226 | Input/Output: [[69.61303671611427 -20] 49.613036716114266]
Test Case: 227 | Input/Output: [[72.43435802568018 73] 145.43435802568018]
Test Case: 228 | Input/Output: [[-98.88423306398744 -86] -184.88423306398744]
Test Case: 229 | Input/Output: [[-24.261439024170045 52] 27.738560975829955]
Test Case: 230 | Input/Output: [[-97.60408639378664 -11] -108.60408639378664]
Test Case: 231 | Input/Output: [[-36.89711804734386 93] 56.10288195265614]
Test Case: 232 | Input/Output: [[28.301804353283813 95] 123.30180435328381]
Test Case: 233 | Input/Output: [[47.841709307098 1] 48.841709307098]
Test Case: 234 | Input/Output: [[-92.79355886944589 -9] -101.79355886944589]
Test Case: 235 | Input/Output: [[34.517662018343884 21] 55.517662018343884]
Test Case: 236 | Input/Output: [[-76.72571551249878 -33] -109.72571551249878]
Test Case: 237 | Input/Output: [[-46.64645892346193 -3] -49.64645892346193]
Test Case: 238 | Input/Output: [[45.99990406700033 -71] -25.00009593299967]
Test Case: 239 | Input/Output: [[49.48126257107654 -98] -48.51873742892346]
Test Case: 240 | Input/Output: [[-60.57408110451945 -39] -99.57408110451945]
Test Case: 241 | Input/Output: [[2.5585157444873374 58] 60.55851574448734]
Test Case: 242 | Input/Output: [[-28.386513729743214 -6] -34.386513729743214]
Test Case: 243 | Input/Output: [[32.098959184789834 -15] 17.098959184789834]
Test Case: 244 | Input/Output: [[36.931158011289426 100] 136.93115801128943]
Test Case: 245 | Input/Output: [[-43.14871201879995 89] 45.85128798120005]
Test Case: 246 | Input/Output: [[-85.06724915629664 -12] -97.06724915629664]
Test Case: 247 | Input/Output: [[-32.66457741118988 -51] -83.66457741118988]
Test Case: 248 | Input/Output: [[-91.66593600833353 -58] -149.66593600833352]
Test Case: 249 | Input/Output: [[55.25687892151882 -65] -9.743121078481181]
Test Case: 250 | Input/Output: [[12.790413442175549 3] 15.790413442175549]
Test Case: 251 | Input/Output: [[59.256511956734215 -73] -13.743488043265785]
Test Case: 252 | Input/Output: [[33.45360176060922 59] 92.45360176060922]
Test Case: 253 | Input/Output: [[-82.39801143756719 -1] -83.39801143756719]
Test Case: 254 | Input/Output: [[59.27044383254102 -79] -19.72955616745898]
Test Case: 255 | Input/Output: [[-76.80523180554088 -85] -161.80523180554087]
Test Case: 256 | Input/Output: [[-43.31867629726665 -54] -97.31867629726665]
Test Case: 257 | Input/Output: [[-82.28297071655831 75] -7.28297071655831]
Test Case: 258 | Input/Output: [[-19.89841230242699 -41] -60.89841230242699]
Test Case: 259 | Input/Output: [[-89.03761242090064 36] -53.03761242090064]
Test Case: 260 | Input/Output: [[9.943643855882314 6] 15.943643855882314]
Test Case: 261 | Input/Output: [[-14.636246573200623 86] 71.36375342679938]
Test Case: 262 | Input/Output: [[50.720115331668836 62] 112.72011533166884]
Test Case: 263 | Input/Output: [[66.37586844769143 -69] -2.624131552308569]
Test Case: 264 | Input/Output: [[56.91057598408605 85] 141.91057598408605]
Test Case: 265 | Input/Output: [[-48.56752735658772 -14] -62.56752735658772]
Test Case: 266 | Input/Output: [[58.23232417002055 45] 103.23232417002055]
Test Case: 267 | Input/Output: [[39.18020380462028 -31] 8.180203804620277]
Test Case: 268 | Input/Output: [[73.8696926083741 -29] 44.869692608374095]
Test Case: 269 | Input/Output: [[93.72093684649946 -39] 54.720936846499455]
Test Case: 270 | Input/Output: [[-56.694053548328974 60] 3.3059464516710264]
Test Case: 271 | Input/Output: [[-55.68636167820857 -84] -139.68636167820858]
Test Case: 272 | Input/Output: [[-63.47049063390151 -72] -135.4704906339015]
Test Case: 273 | Input/Output: [[-12.158482009422826 -100] -112.15848200942283]
Test Case: 274 | Input/Output: [[-48.52699174443333 -81] -129.52699174443333]
Test Case: 275 | Input/Output: [[-81.3534817847567 76] -5.353481784756696]
Test Case: 276 | Input/Output: [[81.81353138270617 39] 120.81353138270617]
Test Case: 277 | Input/Output: [[43.13003345391792 97] 140.13003345391792]
Test Case: 278 | Input/Output: [[3.6180649460477525 65] 68.61806494604775]
Test Case: 279 | Input/Output: [[-2.4426784539446373 -58] -60.44267845394464]
Test Case: 280 | Input/Output: [[-23.957686541516637 -95] -118.95768654151664]
Test Case: 281 | Input/Output: [[-22.92619265531725 -44] -66.92619265531725]
Test Case: 282 | Input/Output: [[9.120299227566406 15] 24.120299227566406]
Test Case: 283 | Input/Output: [[-3.526691603288711 66] 62.47330839671129]
Test Case: 284 | Input/Output: [[-84.63363998814111 -79] -163.6336399881411]
Test Case: 285 | Input/Output: [[64.25266722668582 92] 156.25266722668582]
Test Case: 286 | Input/Output: [[-81.74915845618196 -83] -164.74915845618196]
Test Case: 287 | Input/Output: [[58.33813750557354 -75] -16.661862494426458]
Test Case: 288 | Input/Output: [[-46.10007863403516 -39] -85.10007863403516]
Test Case: 289 | Input/Output: [[69.77954167325612 -78] -8.22045832674388]
Test Case: 290 | Input/Output: [[35.005219179241465 100] 135.00521917924146]
Test Case: 291 | Input/Output: [[91.39228189084 15] 106.39228189084]
Test Case: 292 | Input/Output: [[32.14145847628714 94] 126.14145847628714]
Test Case: 293 | Input/Output: [[-33.45741900131718 -23] -56.45741900131718]
Test Case: 294 | Input/Output: [[-1.8106261419300438 -37] -38.810626141930044]
Test Case: 295 | Input/Output: [[38.74498517963056 83] 121.74498517963056]
Test Case: 296 | Input/Output: [[43.12955616848072 -82] -38.87044383151928]
Test Case: 297 | Input/Output: [[47.39652532792266 -89] -41.60347467207734]
Test Case: 298 | Input/Output: [[-56.03318699505637 81] 24.96681300494363]
Test Case: 299 | Input/Output: [[52.365787569234726 74] 126.36578756923473]
Test Case: 300 | Input/Output: [[-62.644131568098494 36] -26.644131568098494]
Test Case: 301 | Input/Output: [[39.228999821003725 -46] -6.771000178996275]
Test Case: 302 | Input/Output: [[-81.95501983409532 -36] -117.95501983409532]
Test Case: 303 | Input/Output: [[76.29753787012734 -7] 69.29753787012734]
Test Case: 304 | Input/Output: [[65.9183180654992 -68] -2.081681934500807]
Test Case: 305 | Input/Output: [[50.938333311348345 -45] 5.9383333113483445]
Test Case: 306 | Input/Output: [[91.67992896469673 45] 136.67992896469673]
Test Case: 307 | Input/Output: [[22.844339616515768 89] 111.84433961651577]
Test Case: 308 | Input/Output: [[-80.57141172525317 -85] -165.57141172525317]
Test Case: 309 | Input/Output: [[67.97915857194388 -23] 44.979158571943884]
Test Case: 310 | Input/Output: [[-63.65655038481848 53] -10.65655038481848]
Test Case: 311 | Input/Output: [[79.52208874908212 -95] -15.477911250917884]
Test Case: 312 | Input/Output: [[-40.2434399892142 14] -26.243439989214203]
Test Case: 313 | Input/Output: [[-29.7524042973711 -37] -66.7524042973711]
Test Case: 314 | Input/Output: [[-57.06797426670356 -1] -58.06797426670356]
Test Case: 315 | Input/Output: [[93.77562230292068 -4] 89.77562230292068]
Test Case: 316 | Input/Output: [[92.34009642131491 -88] 4.340096421314911]
Test Case: 317 | Input/Output: [[-16.686224585073404 55] 38.313775414926596]
Test Case: 318 | Input/Output: [[2.5129090927801627 -51] -48.48709090721984]
Test Case: 319 | Input/Output: [[-6.5544561514036275 35] 28.445543848596373]
Test Case: 320 | Input/Output: [[61.738951593442295 -82] -20.261048406557705]
Test Case: 321 | Input/Output: [[-88.52972801668078 43] -45.52972801668078]
Test Case: 322 | Input/Output: [[4.62091705654521 -21] -16.37908294345479]
Test Case: 323 | Input/Output: [[-91.92249934345232 86] -5.922499343452316]
Test Case: 324 | Input/Output: [[-79.81521673517491 -88] -167.81521673517491]
Test Case: 325 | Input/Output: [[97.69408178204085 0] 97.69408178204085]
Test Case: 326 | Input/Output: [[-68.8261137224741 29] -39.826113722474105]
Test Case: 327 | Input/Output: [[60.16660547084513 98] 158.16660547084513]
Test Case: 328 | Input/Output: [[56.45791288848423 -98] -41.54208711151577]
Test Case: 329 | Input/Output: [[-44.389701049149565 -94] -138.38970104914955]
Test Case: 330 | Input/Output: [[44.356874224326816 92] 136.35687422432682]
Test Case: 331 | Input/Output: [[-78.6816746560878 -81] -159.6816746560878]
Test Case: 332 | Input/Output: [[47.856120729193975 37] 84.85612072919398]
Test Case: 333 | Input/Output: [[20.72193656702686 83] 103.72193656702686]
Test Case: 334 | Input/Output: [[3.06948546830985 62] 65.06948546830985]
Test Case: 335 | Input/Output: [[-50.39294242900647 -97] -147.39294242900647]
Test Case: 336 | Input/Output: [[74.0448017320573 -38] 36.044801732057294]
Test Case: 337 | Input/Output: [[52.99599122366118 -29] 23.99599122366118]
Test Case: 338 | Input/Output: [[2.4788930155044824 68] 70.47889301550448]
Test Case: 339 | Input/Output: [[-44.695331445989986 57] 12.304668554010014]
Test Case: 340 | Input/Output: [[68.04978396031376 -93] -24.95021603968624]
Test Case: 341 | Input/Output: [[-49.85024546056995 -25] -74.85024546056995]
Test Case: 342 | Input/Output: [[2.7857837814587754 -21] -18.214216218541225]
Test Case: 343 | Input/Output: [[-96.78848369912126 12] -84.78848369912126]
Test Case: 344 | Input/Output: [[-10.97092368691142 78] 67.02907631308858]
Test Case: 345 | Input/Output: [[26.590728382419655 -17] 9.590728382419655]
Test Case: 346 | Input/Output: [[9.120312666243152 -53] -43.87968733375685]
Test Case: 347 | Input/Output: [[77.19981277243014 94] 171.19981277243014]
Test Case: 348 | Input/Output: [[63.97195800130086 -49] 14.971958001300862]
Test Case: 349 | Input/Output: [[60.85935164226396 -73] -12.14064835773604]
Test Case: 350 | Input/Output: [[-58.567270041344344 -70] -128.56727004134433]
Test Case: 351 | Input/Output: [[-3.0187022979596634 82] 78.98129770204034]
Test Case: 352 | Input/Output: [[92.77304484936158 -75] 17.773044849361582]
Test Case: 353 | Input/Output: [[48.24640356930411 -44] 4.246403569304107]
Test Case: 354 | Input/Output: [[45.42141012562183 9] 54.42141012562183]
Test Case: 355 | Input/Output: [[-80.20523343669575 30] -50.20523343669575]
Test Case: 356 | Input/Output: [[53.537613972885396 -8] 45.537613972885396]
Test Case: 357 | Input/Output: [[44.809618120490484 -27] 17.809618120490484]
Test Case: 358 | Input/Output: [[28.55662544838549 71] 99.55662544838549]
Test Case: 359 | Input/Output: [[83.02893675100552 86] 169.02893675100552]
Test Case: 360 | Input/Output: [[24.943528966756716 -97] -72.05647103324328]
Test Case: 361 | Input/Output: [[-82.0607192609925 -27] -109.0607192609925]
Test Case: 362 | Input/Output: [[-58.558863205984025 76] 17.441136794015975]
Test Case: 363 | Input/Output: [[2.4254957471538745 46] 48.425495747153875]
Test Case: 364 | Input/Output: [[27.058708552512115 91] 118.05870855251212]
Test Case: 365 | Input/Output: [[60.47293141487742 87] 147.47293141487742]
Test Case: 366 | Input/Output: [[-25.55259259037605 80] 54.44740740962395]
Test Case: 367 | Input/Output: [[-20.503423171735506 -22] -42.503423171735506]
Test Case: 368 | Input/Output: [[-84.3364731991834 34] -50.3364731991834]
Test Case: 369 | Input/Output: [[20.26822366809465 -88] -67.73177633190535]
Test Case: 370 | Input/Output: [[-93.36916823806143 43] -50.369168238061434]
Test Case: 371 | Input/Output: [[-80.28516846599278 38] -42.28516846599278]
Test Case: 372 | Input/Output: [[-47.76824240121249 -97] -144.7682424012125]
Test Case: 373 | Input/Output: [[89.55079366614731 -29] 60.550793666147314]
Test Case: 374 | Input/Output: [[12.339382362746704 66] 78.3393823627467]
Test Case: 375 | Input/Output: [[64.17946039399143 70] 134.17946039399143]
Test Case: 376 | Input/Output: [[65.59630941421801 -87] -21.403690585781987]
Test Case: 377 | Input/Output: [[55.49178608241277 -35] 20.491786082412773]
Test Case: 378 | Input/Output: [[-49.64252415733672 -72] -121.64252415733672]
Test Case: 379 | Input/Output: [[-43.74142006063726 -1] -44.74142006063726]
Test Case: 380 | Input/Output: [[43.23800614284704 16] 59.23800614284704]
Test Case: 381 | Input/Output: [[-60.471200937170025 26] -34.471200937170025]
Test Case: 382 | Input/Output: [[-6.102095333791894 35] 28.897904666208106]
Test Case: 383 | Input/Output: [[-42.20999407421044 42] -0.20999407421044225]
Test Case: 384 | Input/Output: [[66.52514005023946 26] 92.52514005023946]
Test Case: 385 | Input/Output: [[72.22898674372428 25] 97.22898674372428]
Test Case: 386 | Input/Output: [[-35.703122336476795 18] -17.703122336476795]
Test Case: 387 | Input/Output: [[-1.8518625669449165 4] 2.1481374330550835]
Test Case: 388 | Input/Output: [[-1.7154898905521065 -20] -21.715489890552107]
Test Case: 389 | Input/Output: [[-80.83055508316673 60] -20.83055508316673]
Test Case: 390 | Input/Output: [[-77.80593355217798 -88] -165.80593355217798]
Test Case: 391 | Input/Output: [[31.274509067950362 -91] -59.72549093204964]
Test Case: 392 | Input/Output: [[85.14705178452843 55] 140.14705178452843]
Test Case: 393 | Input/Output: [[62.47554230963911 -50] 12.47554230963911]
Test Case: 394 | Input/Output: [[-5.305927667103319 36] 30.69407233289668]
Test Case: 395 | Input/Output: [[5.53955453650903 92] 97.53955453650903]
Test Case: 396 | Input/Output: [[38.24610199031025 -74] -35.75389800968975]
Test Case: 397 | Input/Output: [[-85.9709825732318 85] -0.9709825732317938]
Test Case: 398 | Input/Output: [[86.06136790415664 72] 158.06136790415664]
Test Case: 399 | Input/Output: [[6.819791819246063 29] 35.81979181924606]
Test Case: 400 | Input/Output: [[96.47140381337508 -46] 50.471403813375076]
Test Case: 401 | Input/Output: [[22.272488725869096 77] 99.2724887258691]
Test Case: 402 | Input/Output: [[-26.71233579420651 -97] -123.71233579420651]
Test Case: 403 | Input/Output: [[-22.776896848464716 -95] -117.77689684846472]
Test Case: 404 | Input/Output: [[21.695144209806003 -96] -74.304855790194]
Test Case: 405 | Input/Output: [[46.46734734581909 -49] -2.5326526541809073]
Test Case: 406 | Input/Output: [[-73.78021846781061 31] -42.78021846781061]
Test Case: 407 | Input/Output: [[-48.45571544511167 73] 24.54428455488833]
Test Case: 408 | Input/Output: [[-94.41370398626925 -41] -135.41370398626924]
Test Case: 409 | Input/Output: [[-53.485068034326176 93] 39.514931965673824]
Test Case: 410 | Input/Output: [[15.822625993215183 89] 104.82262599321518]
Test Case: 411 | Input/Output: [[-21.85771745358616 -11] -32.85771745358616]
Test Case: 412 | Input/Output: [[7.755835714746155 -24] -16.244164285253845]
Test Case: 413 | Input/Output: [[-1.9690424054092688 21] 19.03095759459073]
Test Case: 414 | Input/Output: [[-2.2929210999240723 -78] -80.29292109992407]
Test Case: 415 | Input/Output: [[-39.281843705623466 2] -37.281843705623466]
Test Case: 416 | Input/Output: [[-2.711627586415105 17] 14.288372413584895]
Test Case: 417 | Input/Output: [[-98.23415827668498 98] -0.23415827668497968]
Test Case: 418 | Input/Output: [[-98.9408500084989 2] -96.9408500084989]
Test Case: 419 | Input/Output: [[51.3999906099649 -70] -18.600009390035098]
Test Case: 420 | Input/Output: [[79.51218687501697 -9] 70.51218687501697]
Test Case: 421 | Input/Output: [[-91.28363517597256 -38] -129.28363517597256]
Test Case: 422 | Input/Output: [[-23.229933770995743 -85] -108.22993377099574]
Test Case: 423 | Input/Output: [[-71.9235999738055 93] 21.076400026194506]
Test Case: 424 | Input/Output: [[48.37901636223546 -66] -17.62098363776454]
Test Case: 425 | Input/Output: [[-90.3517702194137 -9] -99.3517702194137]
Test Case: 426 | Input/Output: [[-25.818922439402996 38] 12.181077560597004]
Test Case: 427 | Input/Output: [[33.24009400681226 19] 52.24009400681226]
Test Case: 428 | Input/Output: [[84.83471653831776 58] 142.83471653831776]
Test Case: 429 | Input/Output: [[-6.878298294294254 -79] -85.87829829429425]
Test Case: 430 | Input/Output: [[66.47562961171761 1] 67.47562961171761]
Test Case: 431 | Input/Output: [[-24.96720687422244 14] -10.967206874222441]
Test Case: 432 | Input/Output: [[-50.910138694488104 33] -17.910138694488104]
Test Case: 433 | Input/Output: [[64.81825620150147 53] 117.81825620150147]
Test Case: 434 | Input/Output: [[57.11524742928111 96] 153.1152474292811]
Test Case: 435 | Input/Output: [[-11.581763557442088 21] 9.418236442557912]
Test Case: 436 | Input/Output: [[-85.16069247912765 27] -58.16069247912765]
Test Case: 437 | Input/Output: [[-11.514846468241416 80] 68.48515353175858]
Test Case: 438 | Input/Output: [[-6.40509475853797 -79] -85.40509475853797]
Test Case: 439 | Input/Output: [[27.00722867950067 -7] 20.00722867950067]
Test Case: 440 | Input/Output: [[-74.89609226150542 -26] -100.89609226150542]
Test Case: 441 | Input/Output: [[-94.40349024061491 -54] -148.40349024061493]
Test Case: 442 | Input/Output: [[-9.946557020244583 59] 49.05344297975542]
Test Case: 443 | Input/Output: [[-0.854984822995462 34] 33.14501517700454]
Test Case: 444 | Input/Output: [[-68.16477787086194 -83] -151.16477787086194]
Test Case: 445 | Input/Output: [[84.49147181077663 -75] 9.49147181077663]
Test Case: 446 | Input/Output: [[14.754267092917601 -83] -68.2457329070824]
Test Case: 447 | Input/Output: [[-37.83545421698149 8] -29.83545421698149]
Test Case: 448 | Input/Output: [[38.814959837824716 -70] -31.185040162175284]
Test Case: 449 | Input/Output: [[-16.294806791916727 -17] -33.29480679191673]
Test Case: 450 | Input/Output: [[74.4966814766843 -90] -15.503318523315698]
Test Case: 451 | Input/Output: [[74.25228441031135 -92] -17.747715589688653]
Test Case: 452 | Input/Output: [[-51.151273038159516 -19] -70.15127303815952]
Test Case: 453 | Input/Output: [[-32.81261294716353 81] 48.18738705283647]
Test Case: 454 | Input/Output: [[-89.02738151533327 83] -6.027381515333275]
Test Case: 455 | Input/Output: [[81.41863277249311 81] 162.4186327724931]
Test Case: 456 | Input/Output: [[-29.355515227394278 -43] -72.35551522739428]
Test Case: 457 | Input/Output: [[32.562311159683986 -59] -26.437688840316014]
Test Case: 458 | Input/Output: [[-82.60760128937707 26] -56.60760128937707]
Test Case: 459 | Input/Output: [[-21.08246615547698 -25] -46.08246615547698]
Test Case: 460 | Input/Output: [[54.45799381870674 -98] -43.54200618129326]
Test Case: 461 | Input/Output: [[57.067268351994244 -96] -38.932731648005756]
Test Case: 462 | Input/Output: [[24.65492969301002 6] 30.65492969301002]
Test Case: 463 | Input/Output: [[5.74004058102129 -59] -53.25995941897871]
Test Case: 464 | Input/Output: [[-62.516315637414955 -18] -80.51631563741495]
Test Case: 465 | Input/Output: [[58.47180592584178 -89] -30.528194074158222]
Test Case: 466 | Input/Output: [[-10.155964855254027 33] 22.844035144745973]
Test Case: 467 | Input/Output: [[-75.5569883149083 -55] -130.5569883149083]
Test Case: 468 | Input/Output: [[-41.06414843983159 -33] -74.0641484398316]
Test Case: 469 | Input/Output: [[-70.07325198729346 17] -53.07325198729346]
Test Case: 470 | Input/Output: [[-41.0791498650509 85] 43.9208501349491]
Test Case: 471 | Input/Output: [[-87.4118591231727 -66] -153.4118591231727]
Test Case: 472 | Input/Output: [[-71.62434532503497 -36] -107.62434532503497]
Test Case: 473 | Input/Output: [[-11.91254111288751 -54] -65.91254111288751]
Test Case: 474 | Input/Output: [[-6.7184029179693 -86] -92.7184029179693]
Test Case: 475 | Input/Output: [[15.13455630247455 41] 56.13455630247455]
Test Case: 476 | Input/Output: [[-58.81821391802893 -44] -102.81821391802893]
Test Case: 477 | Input/Output: [[66.54312912593761 29] 95.54312912593761]
Test Case: 478 | Input/Output: [[91.9680909018299 51] 142.9680909018299]
Test Case: 479 | Input/Output: [[-6.487309499478954 -93] -99.48730949947895]
Test Case: 480 | Input/Output: [[63.151133033939715 -47] 16.151133033939715]
Test Case: 481 | Input/Output: [[75.53149534568522 45] 120.53149534568522]
Test Case: 482 | Input/Output: [[-12.17801035592376 -82] -94.17801035592376]
Test Case: 483 | Input/Output: [[28.657292791308492 -93] -64.34270720869151]
Test Case: 484 | Input/Output: [[-75.32689511144915 79] 3.673104888550853]
Test Case: 485 | Input/Output: [[-90.04799309655915 -66] -156.04799309655914]
Test Case: 486 | Input/Output: [[-11.212583169543166 18] 6.787416830456834]
Test Case: 487 | Input/Output: [[75.66561730945142 100] 175.66561730945142]
Test Case: 488 | Input/Output: [[-65.89105889995614 -23] -88.89105889995614]
Test Case: 489 | Input/Output: [[-8.29415791473778 -60] -68.29415791473778]
Test Case: 490 | Input/Output: [[77.05532010750173 -87] -9.944679892498272]
Test Case: 491 | Input/Output: [[74.96410455905473 100] 174.96410455905473]
Test Case: 492 | Input/Output: [[-62.81554415956805 -60] -122.81554415956805]
Test Case: 493 | Input/Output: [[32.014043341324594 -20] 12.014043341324594]
Test Case: 494 | Input/Output: [[-52.27670067763168 -19] -71.27670067763168]
Test Case: 495 | Input/Output: [[-42.90522682565474 -72] -114.90522682565475]
Test Case: 496 | Input/Output: [[-97.91917063434954 11] -86.91917063434954]
Test Case: 497 | Input/Output: [[-13.131626428254407 19] 5.868373571745593]
Test Case: 498 | Input/Output: [[-74.39235607313373 -87] -161.39235607313373]
Test Case: 499 | Input/Output: [[86.06480251149219 -77] 9.06480251149219]
Test Case: 500 | Input/Output: [[-12.395892532281792 47] 34.60410746771821]
Test Case: 501 | Input/Output: [[-99.76159616972673 -47] -146.76159616972672]
Test Case: 502 | Input/Output: [[-79.70828621903394 -81] -160.70828621903394]
Test Case: 503 | Input/Output: [[41.70699178368994 44] 85.70699178368994]
Test Case: 504 | Input/Output: [[-6.956713122564423 64] 57.04328687743558]
Test Case: 505 | Input/Output: [[-62.480759509744075 41] -21.480759509744075]
Test Case: 506 | Input/Output: [[61.76640706547275 -90] -28.233592934527252]
Test Case: 507 | Input/Output: [[70.28387600424264 -79] -8.716123995757357]
Test Case: 508 | Input/Output: [[6.064580369087153 -18] -11.935419630912847]
Test Case: 509 | Input/Output: [[-47.16185681065059 -80] -127.16185681065059]
Test Case: 510 | Input/Output: [[40.9951581454427 6] 46.9951581454427]
Test Case: 511 | Input/Output: [[85.61764757914338 -80] 5.61764757914338]
Test Case: 512 | Input/Output: [[2.767278109975152 -1] 1.7672781099751518]
Test Case: 513 | Input/Output: [[68.96349320293783 -24] 44.963493202937826]
Test Case: 514 | Input/Output: [[8.716865381932237 54] 62.71686538193224]
Test Case: 515 | Input/Output: [[1.0784198045020048 96] 97.078419804502]
Test Case: 516 | Input/Output: [[-1.4674924355517334 15] 13.532507564448267]
Test Case: 517 | Input/Output: [[-60.077948436608565 85] 24.922051563391435]
Test Case: 518 | Input/Output: [[-23.06956508981915 -18] -41.06956508981915]
Test Case: 519 | Input/Output: [[-72.34050640220622 50] -22.340506402206216]
Test Case: 520 | Input/Output: [[-52.122075039421254 8] -44.122075039421254]
Test Case: 521 | Input/Output: [[-83.30075837969522 56] -27.300758379695225]
Test Case: 522 | Input/Output: [[-85.63833330211403 -14] -99.63833330211403]
Test Case: 523 | Input/Output: [[89.88485801498658 -93] -3.115141985013423]
Test Case: 524 | Input/Output: [[-14.240390676954334 15] 0.759609323045666]
Test Case: 525 | Input/Output: [[88.19296432773294 -78] 10.192964327732938]
Test Case: 526 | Input/Output: [[-62.51417387857296 -4] -66.51417387857296]
Test Case: 527 | Input/Output: [[84.91730800861393 -15] 69.91730800861393]
Test Case: 528 | Input/Output: [[96.46864755453146 66] 162.46864755453146]
Test Case: 529 | Input/Output: [[-16.356022514282316 57] 40.643977485717684]
Test Case: 530 | Input/Output: [[77.10401997417497 -70] 7.1040199741749745]
Test Case: 531 | Input/Output: [[96.9116173665827 -56] 40.9116173665827]
Test Case: 532 | Input/Output: [[50.73093871320117 44] 94.73093871320117]
Test Case: 533 | Input/Output: [[0.49785216892183826 16] 16.49785216892184]
Test Case: 534 | Input/Output: [[44.768898500820114 -30] 14.768898500820114]
Test Case: 535 | Input/Output: [[-10.703716229861286 12] 1.2962837701387144]
Test Case: 536 | Input/Output: [[47.93173879160676 78] 125.93173879160676]
Test Case: 537 | Input/Output: [[28.33892047941805 48] 76.33892047941805]
Test Case: 538 | Input/Output: [[21.736400835610652 3] 24.736400835610652]
Test Case: 539 | Input/Output: [[43.42721658927715 31] 74.42721658927715]
Test Case: 540 | Input/Output: [[24.09486496495572 -62] -37.90513503504428]
Test Case: 541 | Input/Output: [[35.1420259800216 -14] 21.1420259800216]
Test Case: 542 | Input/Output: [[-27.604474766204888 45] 17.395525233795112]
Test Case: 543 | Input/Output: [[-65.85938611452353 -6] -71.85938611452353]
Test Case: 544 | Input/Output: [[-90.93933931160294 -25] -115.93933931160294]
Test Case: 545 | Input/Output: [[86.09827988806128 -31] 55.098279888061285]
Test Case: 546 | Input/Output: [[88.51264502028832 -25] 63.51264502028832]
Test Case: 547 | Input/Output: [[20.2941124098939 -22] -1.7058875901061015]
Test Case: 548 | Input/Output: [[-34.334059380283264 65] 30.665940619716736]
Test Case: 549 | Input/Output: [[80.56713889945934 82] 162.56713889945934]
Test Case: 550 | Input/Output: [[-61.964855865328516 49] -12.964855865328516]
Test Case: 551 | Input/Output: [[-77.53175753463286 -86] -163.53175753463285]
Test Case: 552 | Input/Output: [[1.2886858734915592 -96] -94.71131412650844]
Test Case: 553 | Input/Output: [[-96.46106177897904 -1] -97.46106177897904]
Test Case: 554 | Input/Output: [[71.04047925246232 -9] 62.04047925246232]
Test Case: 555 | Input/Output: [[-45.47118829788486 -86] -131.47118829788485]
Test Case: 556 | Input/Output: [[-14.315662779531863 -89] -103.31566277953186]
Test Case: 557 | Input/Output: [[97.5717737632508 -86] 11.571773763250803]
Test Case: 558 | Input/Output: [[81.65298378766565 45] 126.65298378766565]
Test Case: 559 | Input/Output: [[-38.02249282116461 6] -32.02249282116461]
Test Case: 560 | Input/Output: [[-28.391620448120378 84] 55.60837955187962]
Test Case: 561 | Input/Output: [[41.7815426241543 -89] -47.2184573758457]
Test Case: 562 | Input/Output: [[-49.232741372019184 -54] -103.23274137201918]
Test Case: 563 | Input/Output: [[-23.184583944650356 -72] -95.18458394465036]
Test Case: 564 | Input/Output: [[-63.831799924074836 61] -2.8317999240748364]
Test Case: 565 | Input/Output: [[-90.77655564919367 -69] -159.77655564919365]
Test Case: 566 | Input/Output: [[8.66424819622027 52] 60.66424819622027]
Test Case: 567 | Input/Output: [[-81.35155689521679 -6] -87.35155689521679]
Test Case: 568 | Input/Output: [[-31.497180524262888 -78] -109.49718052426289]
Test Case: 569 | Input/Output: [[60.374237267687306 5] 65.3742372676873]
Test Case: 570 | Input/Output: [[53.286612405366554 14] 67.28661240536655]
Test Case: 571 | Input/Output: [[-84.05632907883066 -46] -130.05632907883066]
Test Case: 572 | Input/Output: [[-26.498896469810603 17] -9.498896469810603]
Test Case: 573 | Input/Output: [[37.08724611188185 -46] -8.912753888118147]
Test Case: 574 | Input/Output: [[-55.12678303839414 -6] -61.12678303839414]
Test Case: 575 | Input/Output: [[-32.62599672648825 -71] -103.62599672648825]
Test Case: 576 | Input/Output: [[16.172881741581875 21] 37.172881741581875]
Test Case: 577 | Input/Output: [[-56.273811028270046 -73] -129.27381102827005]
Test Case: 578 | Input/Output: [[93.90287841010988 37] 130.90287841010988]
Test Case: 579 | Input/Output: [[47.66014987839361 81] 128.6601498783936]
Test Case: 580 | Input/Output: [[63.82724142644298 14] 77.82724142644298]
Test Case: 581 | Input/Output: [[-20.392653356932172 59] 38.60734664306783]
Test Case: 582 | Input/Output: [[-32.032742209091055 -91] -123.03274220909105]
Test Case: 583 | Input/Output: [[-24.896173288453554 -87] -111.89617328845355]
Test Case: 584 | Input/Output: [[-78.7314465440984 22] -56.731446544098404]
Test Case: 585 | Input/Output: [[78.32267999853767 -7] 71.32267999853767]
Test Case: 586 | Input/Output: [[-42.94986290979115 -93] -135.94986290979114]
Test Case: 587 | Input/Output: [[78.60435919780224 -91] -12.39564080219776]
Test Case: 588 | Input/Output: [[40.46906720030984 -83] -42.53093279969016]
Test Case: 589 | Input/Output: [[95.24240024974486 8] 103.24240024974486]
Test Case: 590 | Input/Output: [[41.37026807191768 69] 110.37026807191768]
Test Case: 591 | Input/Output: [[-90.74458129778813 96] 5.25541870221187]
Test Case: 592 | Input/Output: [[-67.12896725502102 5] -62.128967255021024]
Test Case: 593 | Input/Output: [[-39.57317624801819 84] 44.42682375198181]
Test Case: 594 | Input/Output: [[-36.20397665516495 -99] -135.20397665516495]
Test Case: 595 | Input/Output: [[-91.34638555089751 -40] -131.3463855508975]
Test Case: 596 | Input/Output: [[-91.18066751145417 79] -12.180667511454175]
Test Case: 597 | Input/Output: [[26.65134140862284 1] 27.65134140862284]
Test Case: 598 | Input/Output: [[-72.78837397339359 -97] -169.7883739733936]
Test Case: 599 | Input/Output: [[-66.06217288144211 68] 1.937827118557891]
Test Case: 600 | Input/Output: [[-50.137789753150756 38] -12.137789753150756]
Test Case: 601 | Input/Output: [[-69.76692585385187 80] 10.233074146148127]
Test Case: 602 | Input/Output: [[86.49435125208075 83] 169.49435125208075]
Test Case: 603 | Input/Output: [[27.13059230696038 -39] -11.86940769303962]
Test Case: 604 | Input/Output: [[16.64922158280808 10] 26.64922158280808]
Test Case: 605 | Input/Output: [[25.471027571574552 49] 74.47102757157455]
Test Case: 606 | Input/Output: [[81.25122694527957 40] 121.25122694527957]
Test Case: 607 | Input/Output: [[-15.378014647580372 -18] -33.37801464758037]
Test Case: 608 | Input/Output: [[43.660446974510705 -85] -41.339553025489295]
Test Case: 609 | Input/Output: [[-9.793462241127543 39] 29.206537758872457]
Test Case: 610 | Input/Output: [[-97.77095969489527 -78] -175.77095969489528]
Test Case: 611 | Input/Output: [[-80.14204714974132 -41] -121.14204714974132]
Test Case: 612 | Input/Output: [[-47.88854133577547 56] 8.111458664224529]
Test Case: 613 | Input/Output: [[1.7561612677808824 -70] -68.24383873221912]
Test Case: 614 | Input/Output: [[-28.782100106978874 -95] -123.78210010697887]
Test Case: 615 | Input/Output: [[-50.33612623950889 -64] -114.3361262395089]
Test Case: 616 | Input/Output: [[78.35978798918032 -91] -12.640212010819681]
Test Case: 617 | Input/Output: [[85.22784513277259 59] 144.2278451327726]
Test Case: 618 | Input/Output: [[13.519308071429847 57] 70.51930807142985]
Test Case: 619 | Input/Output: [[-58.346581367463514 -64] -122.34658136746351]
Test Case: 620 | Input/Output: [[-11.909950223575976 30] 18.090049776424024]
Test Case: 621 | Input/Output: [[-73.33739218312414 74] 0.6626078168758625]
Test Case: 622 | Input/Output: [[-39.392020559020445 -84] -123.39202055902044]
Test Case: 623 | Input/Output: [[-39.37049519801581 -30] -69.37049519801582]
Test Case: 624 | Input/Output: [[7.14684672963719 -52] -44.85315327036281]
Test Case: 625 | Input/Output: [[17.380217727243945 -80] -62.619782272756055]
Test Case: 626 | Input/Output: [[-76.72627834078952 44] -32.72627834078952]
Test Case: 627 | Input/Output: [[-6.047981786639099 9] 2.952018213360901]
Test Case: 628 | Input/Output: [[-30.741388975053525 28] -2.7413889750535247]
Test Case: 629 | Input/Output: [[76.71205408973617 25] 101.71205408973617]
Test Case: 630 | Input/Output: [[-53.276425758392534 79] 25.723574241607466]
Test Case: 631 | Input/Output: [[-88.01192548749313 12] -76.01192548749313]
Test Case: 632 | Input/Output: [[-5.402233358574705 14] 8.597766641425295]
Test Case: 633 | Input/Output: [[-12.549049290154656 86] 73.45095070984534]
Test Case: 634 | Input/Output: [[-69.89847541094274 -73] -142.89847541094275]
Test Case: 635 | Input/Output: [[-87.81271423930423 10] -77.81271423930423]
Test Case: 636 | Input/Output: [[85.21958874225902 -92] -6.78041125774098]
Test Case: 637 | Input/Output: [[10.363782658127633 44] 54.36378265812763]
Test Case: 638 | Input/Output: [[-53.09398246931589 -89] -142.0939824693159]
Test Case: 639 | Input/Output: [[75.34301436997401 66] 141.34301436997401]
Test Case: 640 | Input/Output: [[57.96724091347144 59] 116.96724091347144]
Test Case: 641 | Input/Output: [[-7.979149245508339 -61] -68.97914924550834]
Test Case: 642 | Input/Output: [[-95.64308984809668 84] -11.643089848096679]
Test Case: 643 | Input/Output: [[64.44156023982507 14] 78.44156023982507]
Test Case: 644 | Input/Output: [[21.01497119788054 100] 121.01497119788054]
Test Case: 645 | Input/Output: [[-30.510315862784083 33] 2.4896841372159173]
Test Case: 646 | Input/Output: [[-79.5691479043285 -91] -170.5691479043285]
Test Case: 647 | Input/Output: [[56.470848949177366 74] 130.47084894917737]
Test Case: 648 | Input/Output: [[-64.17041746858246 -41] -105.17041746858246]
Test Case: 649 | Input/Output: [[73.70609982223718 -60] 13.706099822237178]
Test Case: 650 | Input/Output: [[-60.89119934669647 -62] -122.89119934669647]
Test Case: 651 | Input/Output: [[65.78100864594535 -54] 11.781008645945349]
Test Case: 652 | Input/Output: [[52.1018874926645 -65] -12.898112507335497]
Test Case: 653 | Input/Output: [[-30.962602032113367 -71] -101.96260203211337]
Test Case: 654 | Input/Output: [[-92.6786336117167 35] -57.678633611716705]
Test Case: 655 | Input/Output: [[-91.69558250910102 45] -46.695582509101015]
Test Case: 656 | Input/Output: [[50.48955134640633 49] 99.48955134640633]
Test Case: 657 | Input/Output: [[73.03542335365191 -100] -26.964576646348092]
Test Case: 658 | Input/Output: [[-54.22860436842516 -69] -123.22860436842515]
Test Case: 659 | Input/Output: [[-66.42719927102623 -93] -159.4271992710262]
Test Case: 660 | Input/Output: [[-67.8628949417284 2] -65.8628949417284]
Test Case: 661 | Input/Output: [[-5.743269583463601 21] 15.2567304165364]
Test Case: 662 | Input/Output: [[24.986491222945602 50] 74.9864912229456]
Test Case: 663 | Input/Output: [[2.173821088939036 -83] -80.82617891106096]
Test Case: 664 | Input/Output: [[5.898226368590144 8] 13.898226368590144]
Test Case: 665 | Input/Output: [[-42.1164956830264 2] -40.1164956830264]
Test Case: 666 | Input/Output: [[37.87466314858378 13] 50.87466314858378]
Test Case: 667 | Input/Output: [[-34.92112495137647 -48] -82.92112495137647]
Test Case: 668 | Input/Output: [[28.091208487869267 59] 87.09120848786927]
Test Case: 669 | Input/Output: [[-81.10908521827582 3] -78.10908521827582]
Test Case: 670 | Input/Output: [[-16.186351744134654 19] 2.8136482558653455]
Test Case: 671 | Input/Output: [[7.869677224219856 31] 38.869677224219856]
Test Case: 672 | Input/Output: [[-70.52233118552104 66] -4.52233118552104]
Test Case: 673 | Input/Output: [[-9.808494051498442 -75] -84.80849405149844]
Test Case: 674 | Input/Output: [[-48.52010589720508 -77] -125.52010589720507]
Test Case: 675 | Input/Output: [[48.86407290335762 28] 76.86407290335762]
Test Case: 676 | Input/Output: [[6.205472890127311 -26] -19.79452710987269]
Test Case: 677 | Input/Output: [[-60.106331318600056 -54] -114.10633131860006]
Test Case: 678 | Input/Output: [[-96.34990237049217 -22] -118.34990237049217]
Test Case: 679 | Input/Output: [[-30.28776281609302 -70] -100.28776281609302]
Test Case: 680 | Input/Output: [[13.591446256396367 76] 89.59144625639637]
Test Case: 681 | Input/Output: [[86.4384720986271 31] 117.4384720986271]
Test Case: 682 | Input/Output: [[-98.81320471945511 -48] -146.81320471945511]
Test Case: 683 | Input/Output: [[29.08653365332313 65] 94.08653365332313]
Test Case: 684 | Input/Output: [[94.32890006251787 72] 166.32890006251787]
Test Case: 685 | Input/Output: [[-33.61211760354357 -85] -118.61211760354357]
Test Case: 686 | Input/Output: [[-82.01345936821262 -14] -96.01345936821262]
Test Case: 687 | Input/Output: [[48.024000009791365 -27] 21.024000009791365]
Test Case: 688 | Input/Output: [[-45.80273531047141 -60] -105.8027353104714]
Test Case: 689 | Input/Output: [[-24.692813132734216 -14] -38.692813132734216]
Test Case: 690 | Input/Output: [[-60.12406876044256 28] -32.12406876044256]
Test Case: 691 | Input/Output: [[89.37251746138304 -3] 86.37251746138304]
Test Case: 692 | Input/Output: [[-8.134672770772895 -38] -46.134672770772895]
Test Case: 693 | Input/Output: [[-33.35875376109965 -100] -133.35875376109965]
Test Case: 694 | Input/Output: [[-13.43646650587283 83] 69.56353349412717]
Test Case: 695 | Input/Output: [[23.457497911921422 -44] -20.542502088078578]
Test Case: 696 | Input/Output: [[-80.8574157857629 54] -26.857415785762896]
Test Case: 697 | Input/Output: [[-38.31473812664068 83] 44.68526187335932]
Test Case: 698 | Input/Output: [[21.26060731371105 -46] -24.73939268628895]
Test Case: 699 | Input/Output: [[-56.99406167404311 11] -45.99406167404311]
Test Case: 700 | Input/Output: [[1.1029216968723148 10] 11.102921696872315]
Test Case: 701 | Input/Output: [[61.14303698900224 48] 109.14303698900224]
Test Case: 702 | Input/Output: [[-15.19046636211938 9] -6.1904663621193805]
Test Case: 703 | Input/Output: [[-97.88412707245638 22] -75.88412707245638]
Test Case: 704 | Input/Output: [[-73.31397131934101 -60] -133.31397131934102]
Test Case: 705 | Input/Output: [[57.41300849830219 89] 146.4130084983022]
Test Case: 706 | Input/Output: [[-40.34339093699213 -23] -63.34339093699213]
Test Case: 707 | Input/Output: [[24.78354884304362 39] 63.78354884304362]
Test Case: 708 | Input/Output: [[90.23218959600294 36] 126.23218959600294]
Test Case: 709 | Input/Output: [[-56.28560037945351 36] -20.285600379453513]
Test Case: 710 | Input/Output: [[-66.40257697496321 66] -0.40257697496321043]
Test Case: 711 | Input/Output: [[67.57365586941287 31] 98.57365586941287]
Test Case: 712 | Input/Output: [[34.89881199652373 -77] -42.10118800347627]
Test Case: 713 | Input/Output: [[75.18024889847749 57] 132.1802488984775]
Test Case: 714 | Input/Output: [[-61.85537152459999 -81] -142.8553715246]
Test Case: 715 | Input/Output: [[-59.60405758597172 91] 31.395942414028283]
Test Case: 716 | Input/Output: [[29.6436390234189 -76] -46.3563609765811]
Test Case: 717 | Input/Output: [[83.53541057374042 -80] 3.535410573740421]
Test Case: 718 | Input/Output: [[-22.540923372395085 -2] -24.540923372395085]
Test Case: 719 | Input/Output: [[56.80223423780845 -6] 50.80223423780845]
Test Case: 720 | Input/Output: [[-2.515888396265126 47] 44.484111603734874]
Test Case: 721 | Input/Output: [[-14.717759057327157 -69] -83.71775905732716]
Test Case: 722 | Input/Output: [[18.316227825324205 -66] -47.683772174675795]
Test Case: 723 | Input/Output: [[29.70418138540043 -38] -8.295818614599568]
Test Case: 724 | Input/Output: [[-63.18709839154775 -1] -64.18709839154775]
Test Case: 725 | Input/Output: [[-93.9236021734168 92] -1.9236021734167963]
Test Case: 726 | Input/Output: [[26.296373681236872 -45] -18.703626318763128]
Test Case: 727 | Input/Output: [[29.106219920190256 -27] 2.106219920190256]
Test Case: 728 | Input/Output: [[96.24058984163835 70] 166.24058984163835]
Test Case: 729 | Input/Output: [[-13.494197134492111 33] 19.50580286550789]
Test Case: 730 | Input/Output: [[95.92617690467955 37] 132.92617690467955]
Test Case: 731 | Input/Output: [[-20.673461192280172 -52] -72.67346119228017]
Test Case: 732 | Input/Output: [[-33.616712239996744 -90] -123.61671223999674]
Test Case: 733 | Input/Output: [[68.5824439685193 -88] -19.4175560314807]
Test Case: 734 | Input/Output: [[-11.518695677292897 97] 85.4813043227071]
Test Case: 735 | Input/Output: [[43.49969492004857 43] 86.49969492004857]
Test Case: 736 | Input/Output: [[-64.72256562011881 10] -54.722565620118814]
Test Case: 737 | Input/Output: [[31.00959222272627 -90] -58.99040777727373]
Test Case: 738 | Input/Output: [[-5.091122748309985 48] 42.908877251690015]
Test Case: 739 | Input/Output: [[16.969630308723737 -38] -21.030369691276263]
Test Case: 740 | Input/Output: [[93.63495731673333 -34] 59.634957316733335]
Test Case: 741 | Input/Output: [[20.741773624229396 81] 101.7417736242294]
Test Case: 742 | Input/Output: [[99.88024787685333 29] 128.88024787685333]
Test Case: 743 | Input/Output: [[-49.02463373151156 -11] -60.02463373151156]
Test Case: 744 | Input/Output: [[-48.49735305023104 -40] -88.49735305023104]
Test Case: 745 | Input/Output: [[10.46560471531042 70] 80.46560471531042]
Test Case: 746 | Input/Output: [[-25.621375199732583 41] 15.378624800267417]
Test Case: 747 | Input/Output: [[-39.26610943991993 -55] -94.26610943991993]
Test Case: 748 | Input/Output: [[6.0267742467593735 -8] -1.9732257532406265]
Test Case: 749 | Input/Output: [[19.013275680930747 -64] -44.98672431906925]
Test Case: 750 | Input/Output: [[12.717817842190613 37] 49.71781784219061]
Test Case: 751 | Input/Output: [[-32.94094480627162 -97] -129.9409448062716]
Test Case: 752 | Input/Output: [[-83.8490585734109 47] -36.8490585734109]
Test Case: 753 | Input/Output: [[59.8651187612721 53] 112.8651187612721]
Test Case: 754 | Input/Output: [[-64.1936304744722 -84] -148.1936304744722]
Test Case: 755 | Input/Output: [[93.16567343034353 91] 184.16567343034353]
Test Case: 756 | Input/Output: [[-35.83457368397825 13] -22.83457368397825]
Test Case: 757 | Input/Output: [[77.79840004564596 -45] 32.79840004564596]
Test Case: 758 | Input/Output: [[46.792180126440144 -44] 2.792180126440144]
Test Case: 759 | Input/Output: [[-20.142398222517826 -90] -110.14239822251783]
Test Case: 760 | Input/Output: [[-91.89787898159891 4] -87.89787898159891]
Test Case: 761 | Input/Output: [[43.83299678929103 34] 77.83299678929103]
Test Case: 762 | Input/Output: [[47.08852692120979 -32] 15.088526921209791]
Test Case: 763 | Input/Output: [[53.98153956682597 -97] -43.01846043317403]
Test Case: 764 | Input/Output: [[-67.32099138001952 -54] -121.32099138001952]
Test Case: 765 | Input/Output: [[92.80701386855023 93] 185.80701386855023]
Test Case: 766 | Input/Output: [[52.74667452375718 3] 55.74667452375718]
Test Case: 767 | Input/Output: [[47.89682823181113 -94] -46.10317176818887]
Test Case: 768 | Input/Output: [[4.50079690907215 -100] -95.49920309092785]
Test Case: 769 | Input/Output: [[34.66691085424196 62] 96.66691085424196]
Test Case: 770 | Input/Output: [[76.43273494456625 76] 152.43273494456625]
Test Case: 771 | Input/Output: [[12.352158291942118 -25] -12.647841708057882]
Test Case: 772 | Input/Output: [[19.210612248420333 -75] -55.78938775157967]
Test Case: 773 | Input/Output: [[90.23912418908748 -63] 27.239124189087477]
Test Case: 774 | Input/Output: [[-54.900220010930155 83] 28.099779989069845]
Test Case: 775 | Input/Output: [[-65.38692194415376 -2] -67.38692194415376]
Test Case: 776 | Input/Output: [[-25.584377462313725 -7] -32.584377462313725]
Test Case: 777 | Input/Output: [[65.9313822965691 -99] -33.0686177034309]
Test Case: 778 | Input/Output: [[-98.30504372544324 44] -54.30504372544324]
Test Case: 779 | Input/Output: [[-41.282873094563755 79] 37.717126905436245]
Test Case: 780 | Input/Output: [[-75.06397227009313 63] -12.063972270093132]
Test Case: 781 | Input/Output: [[-19.32681945519799 -17] -36.32681945519799]
Test Case: 782 | Input/Output: [[-93.60815993032236 80] -13.608159930322358]
Test Case: 783 | Input/Output: [[51.53734802301824 10] 61.53734802301824]
Test Case: 784 | Input/Output: [[-76.3380688998817 69] -7.338068899881705]
Test Case: 785 | Input/Output: [[-75.4192296233897 100] 24.580770376610303]
Test Case: 786 | Input/Output: [[-19.656709465816036 5] -14.656709465816036]
Test Case: 787 | Input/Output: [[22.006498283065397 95] 117.0064982830654]
Test Case: 788 | Input/Output: [[53.36304688267583 48] 101.36304688267583]
Test Case: 789 | Input/Output: [[-93.4736613195557 -81] -174.4736613195557]
Test Case: 790 | Input/Output: [[37.64865979851305 -72] -34.35134020148695]
Test Case: 791 | Input/Output: [[-26.85212954651655 41] 14.14787045348345]
Test Case: 792 | Input/Output: [[-67.8684155239013 91] 23.131584476098695]
Test Case: 793 | Input/Output: [[90.45651841115921 37] 127.45651841115921]
Test Case: 794 | Input/Output: [[-79.29674706517491 -3] -82.29674706517491]
Test Case: 795 | Input/Output: [[-76.59334673429768 63] -13.593346734297683]
Test Case: 796 | Input/Output: [[97.92543344704993 0] 97.92543344704993]
Test Case: 797 | Input/Output: [[-28.051796326574646 -37] -65.05179632657465]
Test Case: 798 | Input/Output: [[-0.6486504707139176 -92] -92.64865047071392]
Test Case: 799 | Input/Output: [[20.603434215438313 -95] -74.39656578456169]
Test Case: 800 | Input/Output: [[30.534342883437517 43] 73.53434288343752]
Test Case: 801 | Input/Output: [[17.23641302033259 28] 45.23641302033259]
Test Case: 802 | Input/Output: [[-51.72184746099822 33] -18.72184746099822]
Test Case: 803 | Input/Output: [[89.55610128407255 -62] 27.556101284072554]
Test Case: 804 | Input/Output: [[-58.5968153886619 -29] -87.5968153886619]
Test Case: 805 | Input/Output: [[-94.81568359496913 29] -65.81568359496913]
Test Case: 806 | Input/Output: [[3.1957767445914556 -71] -67.80422325540854]
Test Case: 807 | Input/Output: [[-46.89309751689152 -88] -134.89309751689152]
Test Case: 808 | Input/Output: [[-5.532510537679983 -50] -55.53251053767998]
Test Case: 809 | Input/Output: [[-38.06982126589094 86] 47.93017873410906]
Test Case: 810 | Input/Output: [[95.73268918090821 -23] 72.73268918090821]
Test Case: 811 | Input/Output: [[-5.681264060370353 -88] -93.68126406037035]
Test Case: 812 | Input/Output: [[44.91500496814956 -14] 30.91500496814956]
Test Case: 813 | Input/Output: [[-60.92212463095941 -48] -108.92212463095942]
Test Case: 814 | Input/Output: [[-19.786436918796383 -72] -91.78643691879638]
Test Case: 815 | Input/Output: [[72.5503818179318 -38] 34.55038181793179]
Test Case: 816 | Input/Output: [[4.680894081917472 90] 94.68089408191747]
Test Case: 817 | Input/Output: [[-46.73012467310254 64] 17.269875326897463]
Test Case: 818 | Input/Output: [[7.683891205436382 -44] -36.31610879456362]
Test Case: 819 | Input/Output: [[-66.92890380438484 22] -44.928903804384845]
Test Case: 820 | Input/Output: [[21.655748181635275 73] 94.65574818163527]
Test Case: 821 | Input/Output: [[-35.284950462439596 1] -34.284950462439596]
Test Case: 822 | Input/Output: [[79.68329827714464 -29] 50.683298277144644]
Test Case: 823 | Input/Output: [[38.61033267398551 12] 50.61033267398551]
Test Case: 824 | Input/Output: [[99.3543998578844 80] 179.3543998578844]
Test Case: 825 | Input/Output: [[-14.834838889846978 58] 43.16516111015302]
Test Case: 826 | Input/Output: [[-34.05605709420587 -15] -49.05605709420587]
Test Case: 827 | Input/Output: [[-17.30295506279471 34] 16.69704493720529]
Test Case: 828 | Input/Output: [[-97.55094815337866 -31] -128.55094815337867]
Test Case: 829 | Input/Output: [[-81.94763915537679 96] 14.052360844623209]
Test Case: 830 | Input/Output: [[-98.22763959189027 32] -66.22763959189027]
Test Case: 831 | Input/Output: [[10.395797894113116 -94] -83.60420210588688]
Test Case: 832 | Input/Output: [[-96.53428204998929 -44] -140.5342820499893]
Test Case: 833 | Input/Output: [[-77.72993993148015 4] -73.72993993148015]
Test Case: 834 | Input/Output: [[74.76713737817443 95] 169.76713737817443]
Test Case: 835 | Input/Output: [[-73.46051329839294 7] -66.46051329839294]
Test Case: 836 | Input/Output: [[33.65872063552723 88] 121.65872063552723]
Test Case: 837 | Input/Output: [[-60.890825677152534 38] -22.890825677152534]
Test Case: 838 | Input/Output: [[25.833595823098193 22] 47.83359582309819]
Test Case: 839 | Input/Output: [[21.69186271260746 97] 118.69186271260746]
Test Case: 840 | Input/Output: [[-55.69693350339384 5] -50.69693350339384]
Test Case: 841 | Input/Output: [[87.21479012078683 92] 179.21479012078683]
Test Case: 842 | Input/Output: [[-54.446731010091234 -90] -144.44673101009124]
Test Case: 843 | Input/Output: [[-24.942541137216054 -53] -77.94254113721605]
Test Case: 844 | Input/Output: [[27.4933923193408 -57] -29.5066076806592]
Test Case: 845 | Input/Output: [[1.2852675999330359 -71] -69.71473240006696]
Test Case: 846 | Input/Output: [[-24.65863975118694 39] 14.34136024881306]
Test Case: 847 | Input/Output: [[86.81784341255602 2] 88.81784341255602]
Test Case: 848 | Input/Output: [[74.85616792315571 86] 160.8561679231557]
Test Case: 849 | Input/Output: [[0.7968894639391664 -64] -63.203110536060834]
Test Case: 850 | Input/Output: [[-76.79170648243236 49] -27.79170648243236]
Test Case: 851 | Input/Output: [[-61.42580930144228 -39] -100.42580930144229]
Test Case: 852 | Input/Output: [[40.11163261531186 33] 73.11163261531186]
Test Case: 853 | Input/Output: [[49.93268298941254 9] 58.93268298941254]
Test Case: 854 | Input/Output: [[-66.56337427409318 34] -32.56337427409318]
Test Case: 855 | Input/Output: [[-35.97896601593604 48] 12.021033984063962]
Test Case: 856 | Input/Output: [[54.02423118469878 11] 65.02423118469878]
Test Case: 857 | Input/Output: [[87.24036880943876 33] 120.24036880943876]
Test Case: 858 | Input/Output: [[-14.64601193019162 70] 55.35398806980838]
Test Case: 859 | Input/Output: [[-82.33806121912588 -27] -109.33806121912588]
Test Case: 860 | Input/Output: [[-87.08030439652241 6] -81.08030439652241]
Test Case: 861 | Input/Output: [[90.96331805880763 -73] 17.96331805880763]
Test Case: 862 | Input/Output: [[84.57193734883029 41] 125.57193734883029]
Test Case: 863 | Input/Output: [[-54.82252175406788 -76] -130.82252175406788]
Test Case: 864 | Input/Output: [[89.67674200339627 42] 131.67674200339627]
Test Case: 865 | Input/Output: [[-44.62872449025759 66] 21.37127550974241]
Test Case: 866 | Input/Output: [[-25.93426074136957 -39] -64.93426074136957]
Test Case: 867 | Input/Output: [[9.017934750443942 68] 77.01793475044394]
Test Case: 868 | Input/Output: [[-62.09418002754119 10] -52.09418002754119]
Test Case: 869 | Input/Output: [[-26.907294856543814 -1] -27.907294856543814]
Test Case: 870 | Input/Output: [[-36.70566072507402 -37] -73.70566072507401]
Test Case: 871 | Input/Output: [[-80.83936674494205 -56] -136.83936674494205]
Test Case: 872 | Input/Output: [[13.870745217907256 91] 104.87074521790726]
Test Case: 873 | Input/Output: [[50.91177413834228 -10] 40.91177413834228]
Test Case: 874 | Input/Output: [[-13.266804700384142 99] 85.73319529961586]
Test Case: 875 | Input/Output: [[89.98771030099914 76] 165.98771030099914]
Test Case: 876 | Input/Output: [[82.00226592381748 25] 107.00226592381748]
Test Case: 877 | Input/Output: [[74.14583842156202 50] 124.14583842156202]
Test Case: 878 | Input/Output: [[71.85887875376173 -64] 7.858878753761729]
Test Case: 879 | Input/Output: [[-21.59789264087688 -14] -35.59789264087688]
Test Case: 880 | Input/Output: [[3.210854200565734 -61] -57.789145799434266]
Test Case: 881 | Input/Output: [[89.59845426108558 39] 128.59845426108558]
Test Case: 882 | Input/Output: [[92.1770328344953 -54] 38.17703283449529]
Test Case: 883 | Input/Output: [[-5.448567451701038 12] 6.551432548298962]
Test Case: 884 | Input/Output: [[-78.0335312419489 -44] -122.0335312419489]
Test Case: 885 | Input/Output: [[24.061591453611243 10] 34.06159145361124]
Test Case: 886 | Input/Output: [[32.225072788830374 70] 102.22507278883037]
Test Case: 887 | Input/Output: [[-86.79846524549339 40] -46.79846524549339]
Test Case: 888 | Input/Output: [[-9.824849968878425 -46] -55.824849968878425]
Test Case: 889 | Input/Output: [[-75.67625638239228 -11] -86.67625638239228]
Test Case: 890 | Input/Output: [[13.922931562547205 65] 78.9229315625472]
Test Case: 891 | Input/Output: [[82.93194046474528 91] 173.93194046474528]
Test Case: 892 | Input/Output: [[-8.067227735178093 -24] -32.06722773517809]
Test Case: 893 | Input/Output: [[35.19372434250931 100] 135.1937243425093]
Test Case: 894 | Input/Output: [[-97.05840825712295 -40] -137.05840825712295]
Test Case: 895 | Input/Output: [[75.0937287074016 -95] -19.906271292598404]
Test Case: 896 | Input/Output: [[-7.757236686439256 -2] -9.757236686439256]
Test Case: 897 | Input/Output: [[66.31367725810807 -12] 54.31367725810807]
Test Case: 898 | Input/Output: [[-51.76654726336387 88] 36.23345273663613]
Test Case: 899 | Input/Output: [[-72.8285342554388 64] -8.828534255438797]
Test Case: 900 | Input/Output: [[25.391971138607758 100] 125.39197113860776]
Test Case: 901 | Input/Output: [[69.43686653120312 -68] 1.4368665312031226]
Test Case: 902 | Input/Output: [[65.56686334226086 -78] -12.43313665773914]
Test Case: 903 | Input/Output: [[64.45299992140002 -40] 24.45299992140002]
Test Case: 904 | Input/Output: [[1.714951794551368 30] 31.714951794551368]
Test Case: 905 | Input/Output: [[-81.31224589415113 -53] -134.31224589415115]
Test Case: 906 | Input/Output: [[57.57704290646663 45] 102.57704290646663]
Test Case: 907 | Input/Output: [[-82.1166920694833 -35] -117.1166920694833]
Test Case: 908 | Input/Output: [[-72.83855897927161 45] -27.83855897927161]
Test Case: 909 | Input/Output: [[-81.3526875788661 10] -71.3526875788661]
Test Case: 910 | Input/Output: [[5.9827032220539 90] 95.9827032220539]
Test Case: 911 | Input/Output: [[-65.76612454649211 78] 12.233875453507892]
Test Case: 912 | Input/Output: [[22.63962228173301 -23] -0.3603777182669887]
Test Case: 913 | Input/Output: [[-98.42443093678585 46] -52.42443093678585]
Test Case: 914 | Input/Output: [[-10.610406089105837 3] -7.610406089105837]
Test Case: 915 | Input/Output: [[-39.01873310477673 -75] -114.01873310477673]
Test Case: 916 | Input/Output: [[36.88380670975377 -57] -20.11619329024623]
Test Case: 917 | Input/Output: [[99.08391275708502 -99] 0.08391275708501666]
Test Case: 918 | Input/Output: [[98.05838283093007 -87] 11.058382830930071]
Test Case: 919 | Input/Output: [[-69.40543969526134 20] -49.405439695261336]
Test Case: 920 | Input/Output: [[62.70271173502633 -18] 44.70271173502633]
Test Case: 921 | Input/Output: [[57.654130856074914 -93] -35.345869143925086]
Test Case: 922 | Input/Output: [[-54.51312555029233 -72] -126.51312555029233]
Test Case: 923 | Input/Output: [[-86.64115264401475 85] -1.6411526440147526]
Test Case: 924 | Input/Output: [[30.18203959703868 -61] -30.81796040296132]
Test Case: 925 | Input/Output: [[97.40648268099119 92] 189.4064826809912]
Test Case: 926 | Input/Output: [[49.281900791431895 -2] 47.281900791431895]
Test Case: 927 | Input/Output: [[69.03727896372004 20] 89.03727896372004]
Test Case: 928 | Input/Output: [[-86.48415294279576 -24] -110.48415294279576]
Test Case: 929 | Input/Output: [[-63.63151768227367 -73] -136.63151768227368]
Test Case: 930 | Input/Output: [[-70.3626285880646 -26] -96.3626285880646]
Test Case: 931 | Input/Output: [[-37.12091751669215 -48] -85.12091751669215]
Test Case: 932 | Input/Output: [[20.359047704511227 84] 104.35904770451123]
Test Case: 933 | Input/Output: [[-86.32851007320536 -56] -142.32851007320536]
Test Case: 934 | Input/Output: [[-99.35567438106871 -2] -101.35567438106871]
Test Case: 935 | Input/Output: [[67.49356363105869 5] 72.49356363105869]
Test Case: 936 | Input/Output: [[30.370469009662912 -56] -25.629530990337088]
Test Case: 937 | Input/Output: [[-77.58678836495142 77] -0.586788364951417]
Test Case: 938 | Input/Output: [[56.38707816616841 -60] -3.6129218338315923]
Test Case: 939 | Input/Output: [[-70.67002974897912 -14] -84.67002974897912]
Test Case: 940 | Input/Output: [[-83.58218089303098 -60] -143.58218089303097]
Test Case: 941 | Input/Output: [[-95.82620396147712 23] -72.82620396147712]
Test Case: 942 | Input/Output: [[70.99839435009312 -24] 46.99839435009312]
Test Case: 943 | Input/Output: [[-92.00033299676087 78] -14.000332996760875]
Test Case: 944 | Input/Output: [[66.6603488559407 -66] 0.6603488559406969]
Test Case: 945 | Input/Output: [[52.92178876895662 100] 152.92178876895662]
Test Case: 946 | Input/Output: [[86.46141322545006 -66] 20.46141322545006]
Test Case: 947 | Input/Output: [[-56.19050521420456 97] 40.80949478579544]
Test Case: 948 | Input/Output: [[41.59660631378313 -6] 35.59660631378313]
Test Case: 949 | Input/Output: [[34.58382266308428 52] 86.58382266308428]
Test Case: 950 | Input/Output: [[-86.29021573849221 -78] -164.2902157384922]
Test Case: 951 | Input/Output: [[-88.38063907658464 -89] -177.38063907658466]
Test Case: 952 | Input/Output: [[84.90495139676543 29] 113.90495139676543]
Test Case: 953 | Input/Output: [[-88.76477465333122 76] -12.764774653331216]
Test Case: 954 | Input/Output: [[-66.76297402177156 -70] -136.76297402177156]
Test Case: 955 | Input/Output: [[18.007200103368092 -16] 2.007200103368092]
Test Case: 956 | Input/Output: [[72.92995134511892 59] 131.92995134511892]
Test Case: 957 | Input/Output: [[84.08523255793489 73] 157.0852325579349]
Test Case: 958 | Input/Output: [[5.876796598153746 -84] -78.12320340184625]
Test Case: 959 | Input/Output: [[-39.983786580046285 61] 21.016213419953715]
Test Case: 960 | Input/Output: [[98.87828393784875 10] 108.87828393784875]
Test Case: 961 | Input/Output: [[-20.56531585933871 -10] -30.56531585933871]
Test Case: 962 | Input/Output: [[-61.69359289918006 30] -31.69359289918006]
Test Case: 963 | Input/Output: [[-19.01292321175832 66] 46.98707678824168]
Test Case: 964 | Input/Output: [[-91.46015238617267 -2] -93.46015238617267]
Test Case: 965 | Input/Output: [[-1.3427784105636675 91] 89.65722158943633]
Test Case: 966 | Input/Output: [[-5.744628621528619 -71] -76.74462862152862]
Test Case: 967 | Input/Output: [[-76.73736218654025 60] -16.737362186540253]
Test Case: 968 | Input/Output: [[-39.61380585497929 -25] -64.61380585497929]
Test Case: 969 | Input/Output: [[-84.74437420177321 68] -16.744374201773212]
Test Case: 970 | Input/Output: [[-65.72616945794809 -94] -159.7261694579481]
Test Case: 971 | Input/Output: [[-62.245684610668015 -58] -120.24568461066801]
Test Case: 972 | Input/Output: [[-78.95372130393459 -45] -123.95372130393459]
Test Case: 973 | Input/Output: [[-24.684769948236692 -52] -76.68476994823669]
Test Case: 974 | Input/Output: [[70.86362911488996 -60] 10.86362911488996]
Test Case: 975 | Input/Output: [[-89.11053500085376 98] 8.889464999146242]
Test Case: 976 | Input/Output: [[-30.777489929084595 -62] -92.7774899290846]
Test Case: 977 | Input/Output: [[40.226279514238485 -8] 32.226279514238485]
Test Case: 978 | Input/Output: [[53.26483216149137 -59] -5.73516783850863]
Test Case: 979 | Input/Output: [[-57.22291574383895 77] 19.777084256161046]
Test Case: 980 | Input/Output: [[72.08137161626632 77] 149.08137161626632]
Test Case: 981 | Input/Output: [[-80.18947109760188 77] -3.1894710976018814]
Test Case: 982 | Input/Output: [[77.53373511251951 -20] 57.53373511251951]
Test Case: 983 | Input/Output: [[-39.781908151616484 61] 21.218091848383516]
Test Case: 984 | Input/Output: [[4.236880920936528 97] 101.23688092093653]
Test Case: 985 | Input/Output: [[2.6257741289362997 27] 29.6257741289363]
Test Case: 986 | Input/Output: [[34.609581863962774 16] 50.609581863962774]
Test Case: 987 | Input/Output: [[-58.9846629412347 6] -52.9846629412347]
Test Case: 988 | Input/Output: [[51.62705434668638 19] 70.62705434668638]
Test Case: 989 | Input/Output: [[-15.566607251966772 23] 7.433392748033228]
Test Case: 990 | Input/Output: [[-15.635210665328273 -37] -52.63521066532827]
Test Case: 991 | Input/Output: [[-68.58195349344504 27] -41.58195349344504]
Test Case: 992 | Input/Output: [[-47.75767907007102 87] 39.24232092992898]
Test Case: 993 | Input/Output: [[21.76241383120805 49] 70.76241383120805]
Test Case: 994 | Input/Output: [[-7.377286824471014 2] -5.377286824471014]
Test Case: 995 | Input/Output: [[75.67042893386562 -69] 6.670428933865622]
Test Case: 996 | Input/Output: [[4.415984756317059 64] 68.41598475631706]
Test Case: 997 | Input/Output: [[70.73181880978092 11] 81.73181880978092]
Test Case: 998 | Input/Output: [[-57.69330312610279 100] 42.30669687389721]
Test Case: 999 | Input/Output: [[-47.336936555604666 75] 27.663063444395334]
;;******************************
Registered instructions: #{code_atom genome_uniform_tag_mutation code_car print_newline integer_sub integer_inc boolean_stackdepth return_exec_pop zip_dup_items integer_tag_string_instruction vector_integer_eq autoconstructive_integer_rand boolean_pop genome_close_inc string_fromchar vector_string_shove zip_yankdup genome_new genome_gene_genome_instruction vector_float_yankdup exec_yankdup vector_integer_shove integer_yankdup string_flush boolean_swap zip_empty exec_shove vector_boolean_yank code_eq exec_y boolean_yank integer_eq genome_silence string_butlast code_contains string_conjchar code_do*count vector_float_last genome_uniform_instruction_mutation genome_pop string_substring integer_mult vector_string_dup_times code_length vector_integer_dup boolean_or code_position boolean_empty zip_fromcode print_vector_string vector_boolean_swap return_frominteger char_dup_items vector_float_pushall return_genome_pop genome_gene_close char_iswhitespace code_cdr exec_do*vector_integer integer_rand vector_string_replacefirst string_first vector_boolean_first exec_do*while exec_string_iterate string_indexofchar vector_float_replace integer_fromstring code_list code_swap char_frominteger genome_gene_randomize vector_integer_emptyvector vector_string_eq exec_dup_items vector_float_butlast boolean_dup_items genome_uniform_string_mutation exec_empty zip_end? exec_fromzipnode string_shove vector_boolean_pushall zip_insert_left_fromcode exec_rot integer_tag_integer_instruction vector_string_concat vector_float_indexof genome_instruction_eq code_pop vector_string_subvec vector_integer_swap code_subst char_pop return_string_pop zip_yank exec_dup vector_integer_butlast vector_float_rest vector_string_flush boolean_fromfloat code_fromziprights float_sin boolean_flush char_isdigit float_lte exec_fromziproot vector_integer_empty print_code vector_string_stackdepth string_reverse exec_k vector_integer_yank float_frominteger char_rot vector_integer_dup_times print_char integer_tag_boolean_instruction vector_integer_stackdepth vector_boolean_concat boolean_xor integer_gte genome_yankdup vector_float_shove vector_integer_take boolean_dup_times code_quote string_replacefirst return_fromstring exec_fromziplefts vector_integer_yankdup boolean_shove float_lt vector_string_dup vector_string_occurrencesof vector_integer_replace zip_branch? vector_float_reverse float_mod vector_float_subvec integer_tag_code_instruction string_last print_boolean boolean_rot vector_string_rest integer_div vector_float_remove integer_tag_exec_instruction integer_fromfloat integer_lte code_fromzipchildren environment_end vector_integer_rot integer_mod string_concat vector_string_butlast genome_swap code_null exec_do*count vector_float_emptyvector vector_string_yankdup integer_tag_float_instruction integer_rot float_yankdup vector_string_rot zip_replace_fromexec genome_uniform_boolean_mutation vector_string_take vector_float_dup_items integer_add vector_integer_occurrencesof integer_shove string_dup_times genome_dup return_code_pop char_swap integer_max return_fromexec code_wrap genome_genesis return_float_pop code_flush genome_yank zip_shove vector_integer_flush vector_integer_subvec vector_boolean_indexof vector_float_pop char_dup_times genome_uniform_silence_mutation genome_uniform_crossover vector_string_remove vector_integer_contains zip_remove code_append vector_float_eq vector_integer_conj string_eq zip_leftmost code_yankdup code_rot integer_stackdepth float_max vector_boolean_set zip_append_child_fromexec zip_next vector_float_conj zip_fromexec code_dup_times float_dup_items string_take zip_left genome_if_gene_genome_instruction zip_replace_fromcode char_stackdepth return_fromchar genome_eq vector_integer_replacefirst float_stackdepth code_fromziproot integer_dup_times float_fromchar genome_uniform_combination_and_deletion float_gt boolean_dup float_fromboolean code_fromzipnode genome_rot vector_float_replacefirst vector_boolean_conj exec_dup_times vector_boolean_dup vector_integer_indexof vector_string_swap exec_eq string_emptystring string_swap integer_yank exec_while float_empty print_vector_boolean integer_min exec_swap genome_rotate integer_fromchar vector_string_yank string_stackdepth code_do*range string_replacechar char_allfromstring vector_integer_rest vector_boolean_length char_yank vector_float_empty code_fromfloat genome_parent2 return_fromcode string_pop code_dup_items float_eq integer_untag_instruction integer_dup_items vector_boolean_empty zip_insert_child_fromexec vector_string_last string_nth code_do* return_zip_pop vector_string_pop zip_rot vector_integer_nth exec_do*range vector_integer_dup_items exec_if char_shove zip_down zip_insert_left_fromexec code_frominteger vector_boolean_remove vector_integer_remove boolean_invert_first_then_and genome_flush print_string integer_fromboolean char_yankdup code_do vector_string_first boolean_frominteger string_setchar vector_integer_last char_isletter genome_gene_dup vector_integer_concat return_fromzip print_integer genome_uniform_float_mutation code_map boolean_eq float_gte return_fromfloat genome_gene_copy string_occurrencesofchar string_replacefirstchar print_float boolean_rand integer_flush float_shove string_replace char_dup float_pop char_eq vector_float_nth vector_string_conj integer_gt vector_float_dup_times return_integer_pop genome_gene_replace float_sub vector_integer_length vector_float_set vector_string_indexof vector_boolean_rest code_dup vector_boolean_shove zip_eq float_min boolean_not float_mult float_fromstring genome_unsilence code_if vector_boolean_dup_items vector_integer_pop vector_boolean_last exec_do*times zip_pop genome_gene_silent zip_rightmost float_dec vector_float_contains genome_gene_copy_range environment_new exec_do*vector_string code_nthcdr string_empty char_empty exec_pop vector_integer_set autoconstructive_boolean_rand genome_uniform_addition_and_deletion vector_float_rot string_yankdup exec_do*vector_float string_removechar code_extract vector_string_replace vector_float_first genome_parent1 return_tagspace char_flush genome_uniform_integer_mutation vector_float_occurrencesof vector_string_emptyvector float_add code_stackdepth exec_s zip_insert_right_fromexec float_dup integer_tag_char_instruction vector_string_nth zip_stackdepth vector_integer_reverse print_vector_integer char_fromfloat code_do*times code_noop zip_swap code_yank integer_lt vector_boolean_eq genome_stackdepth code_fromziplefts noop_open_paren genome_uniform_deletion vector_boolean_dup_times string_containschar string_yank char_rand zip_flush vector_boolean_rot float_swap exec_fromziprights vector_string_pushall vector_string_set vector_boolean_flush return_fromgenome exec_noop code_size vector_boolean_stackdepth vector_integer_pushall vector_boolean_reverse integer_swap string_split vector_boolean_contains string_fromboolean return_boolean_pop vector_float_dup vector_boolean_replace vector_string_dup_items integer_dup vector_boolean_nth vector_string_length genome_uniform_addition string_rest zip_insert_child_fromcode float_tan string_rot string_rand exec_yank string_parse_to_chars integer_pop integer_empty vector_float_flush genome_if_autoconstructing vector_float_yank noop_delete_prev_paren_pair print_exec zip_append_child_fromcode genome_gene_delete float_dup_times code_empty float_inc zip_right vector_float_length float_rand genome_uniform_close_mutation integer_dec string_contains return_fromboolean vector_float_concat vector_float_stackdepth exec_do*vector_boolean vector_integer_first genome_shove code_rand print_vector_float float_rot return_char_pop vector_string_contains genome_autoconstructing vector_boolean_occurrencesof string_dup_items genome_empty zip_prev genome_toggle_silent vector_string_reverse zip_dup code_cons code_member exec_stackdepth float_flush boolean_and integer_tagged_instruction vector_boolean_butlast string_length float_cos string_frominteger exec_flush vector_string_empty exec_when vector_float_swap genome_close_dec code_insert vector_boolean_pop float_div zip_insert_right_fromcode code_fromboolean vector_boolean_take code_shove environment_begin vector_float_take boolean_invert_second_then_and code_container code_nth vector_boolean_subvec float_yank zip_up vector_boolean_emptyvector vector_boolean_replacefirst genome_alternation zip_dup_times string_fromfloat vector_boolean_yankdup string_dup boolean_yankdup exec_fromzipchildren}
Starting PushGP run.
Clojush version = 3.11.1-1-SNAPSHOTHash of last Git commit = 8a64f874173fae27ed1a77827849de0fade43c2b
GitHub link = https://github.com/lspector/Clojush/commit/8a64f874173fae27ed1a77827849de0fade43c2b
age-combining-function = :average
age-mediated-parent-selection = false
alignment-deviation = 5
alternation-rate = 0.01
atom-generators = (#object[clojush.problems.software.number_io$fn__6694 0x2beee3e8 clojush.problems.software.number_io$fn__6694@2beee3e8] #object[clojush.problems.software.number_io$fn__6696 0x58bad46f clojush.problems.software.number_io$fn__6696@58bad46f] #object[clojush.instructions.tag$tag_instruction_erc$fn__1963 0x20231384 clojush.instructions.tag$tag_instruction_erc$fn__1963@20231384] #object[clojush.instructions.tag$tagged_instruction_erc$fn__1969 0x35becbd4 clojush.instructions.tag$tagged_instruction_erc$fn__1969@35becbd4] in1 in2 print_newline integer_sub integer_inc integer_yankdup integer_mult float_sin float_frominteger float_mod integer_div integer_fromfloat integer_mod integer_rot float_yankdup integer_add integer_shove integer_max integer_stackdepth float_max float_dup_items float_stackdepth integer_dup_times integer_yank integer_min integer_dup_items print_integer print_float integer_flush float_shove float_pop float_sub float_min float_mult float_dec float_add float_dup float_swap integer_swap integer_dup float_tan integer_pop float_dup_times float_inc integer_dec float_rot float_flush float_cos float_div float_yank)
autoconstructive = false
autoconstructive-boolean-rand-enrichment = 0
autoconstructive-clone-decay = :same
autoconstructive-clone-probability = 0.0
autoconstructive-decay = 0.0
autoconstructive-diffmeans-children = 10
autoconstructive-diversification-test = :gecco2016
autoconstructive-environments = false
autoconstructive-genome-instructions = :all
autoconstructive-integer-rand-enrichment = 0
autoconstructive-parent-decay = 0.0
autoconstructive-si-children = 8
autoconstructive-tag-types = [:integer :boolean :exec :float :char :string :code]
close-increment-rate = 0.2
close-parens-probabilities = [0.772 0.206 0.021 0.001]
csv-columns = [:generation :location :total-error :push-program-size]
csv-log-filename = log.csv
decimation-ratio = 1
decimation-tournament-size = 2
edn-additional-keys = [:generation :location]
edn-keys = [:uuid :parent-uuids :genetic-operators :program :genome :total-error :errors]
edn-log-filename = log.edn
epigenetic-markers = []
epsilon-lexicase-epsilon = nil
epsilon-lexicase-probability = 1
error-function = #object[clojush.problems.software.number_io$make_number_io_error_function_from_cases$the_actual_num_io_error_function__6704 0x342723a3 clojush.problems.software.number_io$make_number_io_error_function_from_cases$the_actual_num_io_error_function__6704@342723a3]
error-threshold = 1.0E-4
evalpush-limit = 200
evalpush-time-limit = 0
exit-on-success = true
final-report-simplifications = 5000
genetic-operator-probabilities = {:alternation 0.3, :uniform-mutation 0.2, [:alternation :uniform-mutation] 0.5}
improvement-discount = 0.5
individuals-for-novelty-archive-per-generation = 0
json-log-filename = log.json
json-log-program-strings = false
label = nil
lexicase-leakage = 0.1
lexicase-slippage = 0
log-fitnesses-for-all-cases = false
maintain-ancestors = false
max-error = 5000
max-generations = 200
max-genome-size-in-initial-program = 100
max-point-evaluations = 1.0E101
max-points = 800
meta-error-categories = []
normalization = :none
novelty-distance-metric = :euclidean
novelty-number-of-neighbors-k = 25
parent-reversion-probability = 1.0
parent-selection = :tournament
pop-when-tagging = true
population-size = 1000
print-ancestors-of-solution = false
print-cosmos-data = false
print-csv-logs = false
print-edn-logs = false
print-error-frequencies-by-case = false
print-errors = true
print-history = false
print-homology-data = false
print-json-logs = false
print-selection-counts = false
print-timings = true
problem-specific-initial-report = #object[clojush.problems.software.number_io$number_io_initial_report 0x4ec427 clojush.problems.software.number_io$number_io_initial_report@4ec427]
problem-specific-report = #object[clojush.problems.software.number_io$num_io_report 0xfde487b clojush.problems.software.number_io$num_io_report@fde487b]
random-screen = false
random-seed = -25 -15 -44 -111 102 45 -104 5 -82 -115 -3 100 44 -100 41 -124
random-threshold-lexicase-probability = 1
random-toggle-lexicase-probability = 1
randomly-truncated-lexicase-probability = 1
record-host = nil
replace-child-that-exceeds-size-limit-with = :random
report-simplifications = 0
return-simplified-on-failure = false
reuse-errors = true
self-mate-avoidance-limit = 0
silent-instruction-probability = 0.2
sort-meta-errors-for-lexicase = :random
tag-enrichment = 0
tag-enrichment-types = [:integer :boolean :exec :float :char :string :code]
tag-limit = 10000
top-level-pop-code = false
top-level-push-code = false
total-error-method = :sum
tournament-size = 7
track-instruction-maps = false
uniform-addition-and-deletion-rate = 0.01
uniform-addition-rate = 0.01
uniform-close-mutation-rate = 0.1
uniform-combination-and-deletion-rate = 0.01
uniform-combination-rate = 0.01
uniform-deletion-rate = 0.01
uniform-mutation-constant-tweak-rate = 0.5
uniform-mutation-float-gaussian-standard-deviation = 1.0
uniform-mutation-int-gaussian-standard-deviation = 1
uniform-mutation-rate = 0.01
uniform-mutation-string-char-change-rate = 0.1
uniform-mutation-tag-gaussian-standard-deviation = 100
uniform-silence-mutation-rate = 0.1
use-single-thread = false

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Generating initial population...
Processing generation: 0
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 0
;;******************************
;; -*- Number IO problem report - generation 0
Test total error for best: 55381.0
Test mean error for best: 27.69050
;;------------------------------
Outputs of best individual on training cases:
Correct output: 1.9526623133   | Program output: -56.0473376867
Correct output: -70.8009773522 | Program output: -15.8009773522
Correct output: -13.7839009431 | Program output: 53.2160990569 
Correct output: 143.8727406396 | Program output: 70.8727406396 
Correct output: 136.4396027174 | Program output: 45.4396027174 
Correct output: 18.5044280613  | Program output: 92.5044280613 
Correct output: 92.0568646792  | Program output: 42.0568646792 
Correct output: 71.8873476205  | Program output: 97.8873476205 
Correct output: -10.8388749243 | Program output: -70.8388749243
Correct output: 0.9299825981   | Program output: 49.9299825981 
Correct output: -26.7840412284 | Program output: -50.7840412284
Correct output: -102.1264221267 | Program output: -96.1264221267
Correct output: 40.8061668642  | Program output: 24.8061668642 
Correct output: -5.2544966331  | Program output: -35.2544966331
Correct output: 102.9855886244 | Program output: 35.9855886244 
Correct output: -118.0507723766 | Program output: -85.0507723766
Correct output: 55.9371769928  | Program output: 52.9371769928 
Correct output: 4.2657989984   | Program output: 5.2657989984  
Correct output: 96.7057987603  | Program output: 90.7057987603 
Correct output: 122.162446611  | Program output: 83.162446611  
Correct output: 30.0102027945  | Program output: -22.9897972055
Correct output: 104.5822387035 | Program output: 75.5822387035 
Correct output: -1.5538743366  | Program output: -72.5538743366
Correct output: 166.8070496115 | Program output: 69.8070496115 
Correct output: 58.6188945281  | Program output: 74.6188945281 
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_div} {:instruction integer_min} {:instruction float_dup_items} {:instruction integer_stackdepth} {:instruction float_sub} {:instruction integer_dup_items} {:instruction integer_yankdup} {:instruction float_stackdepth} {:instruction integer_flush} {:instruction float_stackdepth} {:instruction float_flush} {:instruction float_max} {:instruction integer_sub} {:instruction in1} {:instruction print_float} {:instruction integer_yank} {:instruction float_sub} {:instruction float_cos} {:instruction float_cos} {:instruction integer_fromfloat} {:instruction float_dup} {:instruction float_yankdup} {:instruction float_max} {:instruction integer_flush} {:instruction float_cos} {:instruction 74} {:instruction print_float} {:instruction float_stackdepth} {:instruction integer_max})
Best program: (integer_div integer_min float_dup_items integer_stackdepth float_sub integer_dup_items integer_yankdup float_stackdepth integer_flush float_stackdepth float_flush float_max integer_sub in1 print_float integer_yank float_sub float_cos float_cos integer_fromfloat float_dup float_yankdup float_max integer_flush float_cos 74 print_float float_stackdepth integer_max)
Errors: [58.0 13 55.0 2 67.0 11 73.0 3 91.0 3 74.0 2 50.0 1 26.0 2 60.0 1 49.0 2 24.0 2 6.0 3 16.0 2 30.0 1 67.0 3 33.0 3 3.0 1 1.0 1 6.0 1 39.0 3 53.0 12 29.0 3 71.0 2 97.0 2 16.0 2]
Total: 1175.0
Mean: 23.5
Genome size: 29
Size: 30
Percent parens: 0.033
--- Population Statistics ---
Average total errors in population: 17871.732544100003
Median total errors in population: 25335.0
Error averages by case: (692.7285064000008 12.579 709.9588254999982 13.037 698.7959916000007 13.725 718.364991899998 13.178 716.3481527000015 13.135 701.8052229999981 12.417 702.6447220999995 12.345 707.3747258999975 12.413 693.7138017999982 13.004 695.7576374000007 11.681 692.0428594999994 13.087 714.5336021999975 13.968 687.8632548999992 12.29 688.7806564000006 12.353 706.3287512000019 13.294 720.2857384999998 13.959 686.4863026000007 12.403 685.8593766000012 11.705 698.6965218999994 12.322 710.0496475999998 12.643 695.3968785000008 13.141 705.3367488999974 13.142 694.2326836000022 12.422 725.5197378999998 13.13 702.9402055000002 12.514)
Error minima by case: (0.0036 8 4.0571 2 0.5733 4 2.1273 2 9.0 2 2.2689 2 0.0569 1 1.1127 2 0.1611 1 0.0143 1 0.784 2 2.1264 3 0.8062 2 2.2545 1 3.9856 2 18.0508 3 0.3475 1 0.0 0 0.4179 1 16.8376 2 0.0102 6 5.5822 2 0.127 2 3.0 1 2.3343 2)
Average genome size in population (length): 50.923
Average program size in population (points): 51.923
Average percent parens in population: 0.040
Minimum age in population: 0.0
Maximum age in population: 0.0
Average age in population: 0.0
Median age in population: 0.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 1
Genome diversity (% unique Plush genomes):	 1.0
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 1
Syntactic diversity (% unique Push programs):	 1.0
Total error diversity:				 0.339
Error (vector) diversity:			 0.367
Behavioral diversity:				 0.383
--- Run Statistics ---
Number of program evaluations used so far: 1000
Number of point (instruction) evaluations so far: 1276718
--- Timings ---
Current time: 1529614858399 milliseconds
Total Time:           3.3 seconds
Initialization:       0.1 seconds,  3.4%
Reproduction:         0.5 seconds, 15.4%
Fitness Testing:      2.7 seconds, 81.2%
Report:               0.0 seconds,  0.0%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 0
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 1
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 1
;;******************************
;; -*- Number IO problem report - generation 1
Test total error for best: 55381.0
Test mean error for best: 27.69050
;;------------------------------
Outputs of best individual on training cases:
Correct output: 1.9526623133   | Program output: -56.0473376867
Correct output: -70.8009773522 | Program output: -15.8009773522
Correct output: -13.7839009431 | Program output: 53.2160990569 
Correct output: 143.8727406396 | Program output: 70.8727406396 
Correct output: 136.4396027174 | Program output: 45.4396027174 
Correct output: 18.5044280613  | Program output: 92.5044280613 
Correct output: 92.0568646792  | Program output: 42.0568646792 
Correct output: 71.8873476205  | Program output: 97.8873476205 
Correct output: -10.8388749243 | Program output: -70.8388749243
Correct output: 0.9299825981   | Program output: 49.9299825981 
Correct output: -26.7840412284 | Program output: -50.7840412284
Correct output: -102.1264221267 | Program output: -96.1264221267
Correct output: 40.8061668642  | Program output: 24.8061668642 
Correct output: -5.2544966331  | Program output: -35.2544966331
Correct output: 102.9855886244 | Program output: 35.9855886244 
Correct output: -118.0507723766 | Program output: -85.0507723766
Correct output: 55.9371769928  | Program output: 52.9371769928 
Correct output: 4.2657989984   | Program output: 5.2657989984  
Correct output: 96.7057987603  | Program output: 90.7057987603 
Correct output: 122.162446611  | Program output: 83.162446611  
Correct output: 30.0102027945  | Program output: -22.9897972055
Correct output: 104.5822387035 | Program output: 75.5822387035 
Correct output: -1.5538743366  | Program output: -72.5538743366
Correct output: 166.8070496115 | Program output: 69.8070496115 
Correct output: 58.6188945281  | Program output: 74.6188945281 
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_mult} {:instruction float_frominteger} {:instruction in1} {:instruction integer_pop} {:instruction integer_yankdup} {:instruction integer_sub} {:instruction float_max} {:instruction integer_div} {:instruction float_rot} {:instruction -4} {:instruction integer_yank} {:instruction integer_shove} {:instruction integer_stackdepth} {:instruction integer_sub} {:instruction integer_dup} {:instruction integer_flush} {:instruction print_integer} {:instruction print_float} {:instruction float_div} {:instruction tagged_846} {:instruction float_yankdup} {:instruction tagged_787} {:instruction integer_dup_items} {:instruction float_tan})
Best program: (float_mult float_frominteger in1 integer_pop integer_yankdup integer_sub float_max integer_div float_rot -4 integer_yank integer_shove integer_stackdepth integer_sub integer_dup integer_flush print_integer print_float float_div tagged_846 float_yankdup tagged_787 integer_dup_items float_tan)
Errors: [58.0 13 55.0 2 67.0 11 73.0 3 91.0 3 74.0 2 50.0 1 26.0 2 60.0 1 49.0 2 24.0 2 6.0 3 16.0 2 30.0 1 67.0 3 33.0 3 3.0 1 1.0 1 6.0 1 39.0 3 53.0 12 29.0 3 71.0 2 97.0 2 16.0 2]
Total: 1175.0
Mean: 23.5
Genome size: 24
Size: 25
Percent parens: 0.040
--- Population Statistics ---
Average total errors in population: 6322.939305300007
Median total errors in population: 1863.29885
Error averages by case: (222.9489149000002 11.995 248.36733320000147 10.178 237.87678879999996 12.298 279.664469500002 10.472 276.3509542000016 10.452 248.52250710000104 9.919 247.76052769999933 9.709 253.3792847000005 9.895 228.53993610000072 10.124 228.7754295999991 9.299 219.02570750000191 10.279 259.9737196000013 11.224 215.69454059999939 9.572 210.80301220000095 9.713 256.2019972000028 10.748 270.1722230999995 11.174 215.2203543999979 9.769 204.85662809999883 9.373 239.8089970999991 9.626 260.70729790000024 10.385 224.53618769999974 12.258 250.403540700001 10.492 228.5237462999998 9.953 294.73467289999917 10.375 240.77953420000048 10.029)
Error minima by case: (0.0473 8 4.0571 2 0.5733 4 2.1273 3 9.0 3 2.1132 2 2.7797 1 1.1127 2 0.575 1 0.0143 1 4.216 2 5.0 3 0.8062 2 2.2545 1 3.9856 3 3.0508 3 0.3475 1 0.0 0 0.4179 1 16.8376 2 0.0102 7 5.5822 2 0.4461 2 3.0 2 2.3343 2)
Average genome size in population (length): 58.116
Average program size in population (points): 59.116
Average percent parens in population: 0.022
Minimum age in population: 1.0
Maximum age in population: 2.0
Average age in population: 1.508
Median age in population: 2.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 8
Genome diversity (% unique Plush genomes):	 0.779
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 8
Syntactic diversity (% unique Push programs):	 0.779
Total error diversity:				 0.301
Error (vector) diversity:			 0.314
Behavioral diversity:				 0.328
--- Run Statistics ---
Number of program evaluations used so far: 2000
Number of point (instruction) evaluations so far: 2735400
--- Timings ---
Current time: 1529614861795 milliseconds
Total Time:           6.8 seconds
Initialization:       0.1 seconds,  1.6%
Reproduction:         2.0 seconds, 29.5%
Fitness Testing:      4.2 seconds, 61.8%
Report:               0.5 seconds,  7.0%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 1
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 2
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 2
;;******************************
;; -*- Number IO problem report - generation 2
Test total error for best: 55417.0
Test mean error for best: 27.70850
;;------------------------------
Outputs of best individual on training cases:
Correct output: 1.9526623133   | Program output: -55.0473376867
Correct output: -70.8009773522 | Program output: -14.8009773522
Correct output: -13.7839009431 | Program output: 54.2160990569 
Correct output: 143.8727406396 | Program output: 71.8727406396 
Correct output: 136.4396027174 | Program output: 46.4396027174 
Correct output: 18.5044280613  | Program output: 93.5044280613 
Correct output: 92.0568646792  | Program output: 43.0568646792 
Correct output: 71.8873476205  | Program output: 98.8873476205 
Correct output: -10.8388749243 | Program output: -69.8388749243
Correct output: 0.9299825981   | Program output: 50.9299825981 
Correct output: -26.7840412284 | Program output: -49.7840412284
Correct output: -102.1264221267 | Program output: -95.1264221267
Correct output: 40.8061668642  | Program output: 25.8061668642 
Correct output: -5.2544966331  | Program output: -34.2544966331
Correct output: 102.9855886244 | Program output: 36.9855886244 
Correct output: -118.0507723766 | Program output: -84.0507723766
Correct output: 55.9371769928  | Program output: 53.9371769928 
Correct output: 4.2657989984   | Program output: 6.2657989984  
Correct output: 96.7057987603  | Program output: 91.7057987603 
Correct output: 122.162446611  | Program output: 84.162446611  
Correct output: 30.0102027945  | Program output: -21.9897972055
Correct output: 104.5822387035 | Program output: 76.5822387035 
Correct output: -1.5538743366  | Program output: -71.5538743366
Correct output: 166.8070496115 | Program output: 70.8070496115 
Correct output: 58.6188945281  | Program output: 75.6188945281 
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction in1} {:instruction integer_max} {:instruction integer_dup_items} {:instruction integer_sub} {:instruction integer_mod} {:instruction integer_div} {:instruction float_mult} {:instruction float_dup_items} {:instruction float_div} {:instruction float_inc} {:instruction float_yankdup} {:instruction print_float} {:instruction float_mod} {:instruction integer_yankdup} {:instruction integer_shove} {:instruction float_cos} {:instruction float_dec} {:instruction integer_stackdepth} {:instruction integer_max} {:instruction float_max} {:instruction print_float} {:instruction float_flush} {:instruction integer_stackdepth} {:instruction tag_float_856} {:instruction float_add} {:instruction integer_dup_times} {:instruction in2} {:instruction float_cos} {:instruction float_dup_times} {:instruction float_min} {:instruction print_float} {:instruction tagged_465} {:instruction integer_fromfloat} {:instruction print_float} {:instruction integer_stackdepth} {:instruction -44} {:instruction float_pop} {:instruction integer_shove} {:instruction float_swap} {:instruction in2} {:instruction 52} {:instruction float_shove} {:instruction float_stackdepth} {:instruction float_sin} {:instruction float_flush} {:instruction integer_mult} {:instruction float_dup} {:instruction integer_pop} {:instruction integer_yankdup} {:instruction -13} {:instruction integer_dup} {:instruction integer_rot} {:instruction float_pop} {:instruction integer_dup} {:instruction integer_mod} {:instruction float_swap} {:instruction float_tan} {:instruction integer_dup_times} {:instruction float_inc} {:instruction float_sub} {:instruction float_rot} {:instruction integer_dec} {:instruction integer_yankdup})
Best program: (in1 integer_max integer_dup_items integer_sub integer_mod integer_div float_mult float_dup_items float_div float_inc float_yankdup print_float float_mod integer_yankdup integer_shove float_cos float_dec integer_stackdepth integer_max float_max print_float float_flush integer_stackdepth tag_float_856 float_add integer_dup_times in2 float_cos float_dup_times float_min print_float tagged_465 integer_fromfloat print_float integer_stackdepth -44 float_pop integer_shove float_swap in2 52 float_shove float_stackdepth float_sin float_flush integer_mult float_dup integer_pop integer_yankdup -13 integer_dup integer_rot float_pop integer_dup integer_mod float_swap float_tan integer_dup_times float_inc float_sub float_rot integer_dec integer_yankdup)
Errors: [57.0 13 56.0 2 68.0 12 72.0 3 90.0 2 75.0 2 49.0 2 27.0 2 59.0 2 50.0 1 23.0 2 7.0 3 15.0 2 29.0 2 66.0 3 34.0 3 2.0 1 2.0 1 5.0 1 38.0 3 52.0 12 28.0 3 70.0 1 96.0 3 17.0 2]
Total: 1170.0
Mean: 23.4
Genome size: 63
Size: 64
Percent parens: 0.016
--- Population Statistics ---
Average total errors in population: 4465.624792200004
Median total errors in population: 1192.0
Error averages by case: (178.87633640000018 12.951 179.9931519000006 5.836 188.75554490000005 11.876 197.9700880000006 6.247 207.08074180000017 6.243 197.19146590000037 5.67 174.7644809999997 4.976 164.8687877000002 5.676 181.9962828000002 5.308 174.6502188999997 5.442 154.69833220000004 5.861 153.41387289999966 6.831 145.6063200000003 5.525 156.60431139999986 5.026 187.0597210000003 6.429 172.8905930999998 6.79 137.48670570000004 4.933 132.91357739999984 4.743 146.4075611999999 4.906 172.39470270000004 6.184 173.1758678 12.76 163.34721100000024 6.333 189.80680249999983 5.718 215.43606560000006 5.688 154.61304840000014 5.671)
Error minima by case: (0.0473 8 14.801 2 3.2419 8 46.8727 3 39.4396 2 2.2689 2 4.9431 1 6.6548 2 0.575 1 0.0143 1 13.3132 2 5.0 3 0.8062 2 0.2545 1 5.9856 3 32.0 3 2.0 1 0.0 0 0.2942 1 25.1624 2 0.0102 8 7.5822 2 0.425 1 67.807 2 6.6137 2)
Average genome size in population (length): 48.819
Average program size in population (points): 49.819
Average percent parens in population: 0.029
Minimum age in population: 2.0
Maximum age in population: 4.0
Average age in population: 2.997
Median age in population: 3.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 40
Genome diversity (% unique Plush genomes):	 0.645
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 40
Syntactic diversity (% unique Push programs):	 0.645
Total error diversity:				 0.131
Error (vector) diversity:			 0.138
Behavioral diversity:				 0.148
--- Run Statistics ---
Number of program evaluations used so far: 3000
Number of point (instruction) evaluations so far: 3962234
--- Timings ---
Current time: 1529614864934 milliseconds
Total Time:           9.8 seconds
Initialization:       0.1 seconds,  1.1%
Reproduction:         3.4 seconds, 34.3%
Fitness Testing:      5.5 seconds, 56.4%
Report:               0.8 seconds,  8.2%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 2
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 3
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 3
;;******************************
;; -*- Number IO problem report - generation 3
Test total error for best: 55417.0
Test mean error for best: 27.70850
;;------------------------------
Outputs of best individual on training cases:
Correct output: 1.9526623133   | Program output: -55.0473376867
Correct output: -70.8009773522 | Program output: -14.8009773522
Correct output: -13.7839009431 | Program output: 54.2160990569 
Correct output: 143.8727406396 | Program output: 71.8727406396 
Correct output: 136.4396027174 | Program output: 46.4396027174 
Correct output: 18.5044280613  | Program output: 93.5044280613 
Correct output: 92.0568646792  | Program output: 43.0568646792 
Correct output: 71.8873476205  | Program output: 98.8873476205 
Correct output: -10.8388749243 | Program output: -69.8388749243
Correct output: 0.9299825981   | Program output: 50.9299825981 
Correct output: -26.7840412284 | Program output: -49.7840412284
Correct output: -102.1264221267 | Program output: -95.1264221267
Correct output: 40.8061668642  | Program output: 25.8061668642 
Correct output: -5.2544966331  | Program output: -34.2544966331
Correct output: 102.9855886244 | Program output: 36.9855886244 
Correct output: -118.0507723766 | Program output: -84.0507723766
Correct output: 55.9371769928  | Program output: 53.9371769928 
Correct output: 4.2657989984   | Program output: 6.2657989984  
Correct output: 96.7057987603  | Program output: 91.7057987603 
Correct output: 122.162446611  | Program output: 84.162446611  
Correct output: 30.0102027945  | Program output: -21.9897972055
Correct output: 104.5822387035 | Program output: 76.5822387035 
Correct output: -1.5538743366  | Program output: -71.5538743366
Correct output: 166.8070496115 | Program output: 70.8070496115 
Correct output: 58.6188945281  | Program output: 75.6188945281 
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction in1} {:instruction integer_max} {:instruction integer_dup_items} {:instruction integer_sub} {:instruction integer_mod} {:instruction integer_div} {:instruction float_mult} {:instruction float_dup_items} {:instruction float_div} {:instruction float_inc} {:instruction float_yankdup} {:instruction print_float} {:instruction float_mod} {:instruction integer_yankdup} {:instruction integer_shove} {:instruction float_cos} {:instruction float_dec} {:instruction integer_stackdepth} {:instruction integer_max} {:instruction float_max} {:instruction print_float} {:instruction float_flush} {:instruction integer_stackdepth} {:instruction tag_float_856} {:instruction float_add} {:instruction integer_dup_times} {:instruction in2} {:instruction float_cos} {:instruction float_dup_times} {:instruction float_min} {:instruction print_float} {:instruction tagged_465} {:instruction integer_fromfloat} {:instruction print_float} {:instruction integer_stackdepth} {:instruction -44} {:instruction float_pop} {:instruction integer_shove} {:instruction float_swap} {:instruction in2} {:instruction 52} {:instruction float_shove} {:instruction float_stackdepth} {:instruction float_sin} {:instruction float_flush} {:instruction integer_mult} {:instruction float_dup} {:instruction integer_pop} {:instruction integer_yankdup} {:instruction -13} {:instruction integer_dup} {:instruction integer_rot} {:instruction float_pop} {:instruction integer_dup} {:instruction integer_mod} {:instruction float_swap} {:instruction float_tan} {:instruction integer_dup_times} {:instruction float_inc} {:instruction float_sub} {:instruction float_rot} {:instruction integer_dec} {:instruction integer_yankdup})
Best program: (in1 integer_max integer_dup_items integer_sub integer_mod integer_div float_mult float_dup_items float_div float_inc float_yankdup print_float float_mod integer_yankdup integer_shove float_cos float_dec integer_stackdepth integer_max float_max print_float float_flush integer_stackdepth tag_float_856 float_add integer_dup_times in2 float_cos float_dup_times float_min print_float tagged_465 integer_fromfloat print_float integer_stackdepth -44 float_pop integer_shove float_swap in2 52 float_shove float_stackdepth float_sin float_flush integer_mult float_dup integer_pop integer_yankdup -13 integer_dup integer_rot float_pop integer_dup integer_mod float_swap float_tan integer_dup_times float_inc float_sub float_rot integer_dec integer_yankdup)
Errors: [57.0 13 56.0 2 68.0 12 72.0 3 90.0 2 75.0 2 49.0 2 27.0 2 59.0 2 50.0 1 23.0 2 7.0 3 15.0 2 29.0 2 66.0 3 34.0 3 2.0 1 2.0 1 5.0 1 38.0 3 52.0 12 28.0 3 70.0 1 96.0 3 17.0 2]
Total: 1170.0
Mean: 23.4
Genome size: 63
Size: 64
Percent parens: 0.016
--- Population Statistics ---
Average total errors in population: 4145.2936522
Median total errors in population: 1175.0
Error averages by case: (175.2820068 13.096 174.1052497 3.616 179.4989578 11.505 185.79152020000004 4.397 201.23965230000002 4.403 185.72102310000002 3.507 165.29198459999998 2.618 144.7144841 3.503 177.1520459 2.755 163.792076 3.407 146.1722767 3.617 132.57398539999997 4.589 135.31842220000004 3.472 151.09811450000004 2.657 180.1065129 4.426 155.87838630000002 4.596 123.6503293 2.611 121.4948654 2.488 127.09812690000001 2.604 156.22635809999997 4.28 171.06722659999997 12.334 147.39018620000002 4.414 186.5595103 3.524 206.7950481 3.535 135.8273028 3.494)
Error minima by case: (1.0473 9 15.801 2 8.296 9 2.1273 3 45.4396 2 2.6497 2 7.9431 1 25.0 2 9.8506 1 0.0143 1 4.7041 2 5.0 3 8.8062 2 4.4174 1 31.0144 3 32.0 3 2.0 1 0.0 0 5.0 1 38.0 2 14.1555 9 28.0 2 0.5977 1 27.193 2 15.0 2)
Average genome size in population (length): 36.426
Average program size in population (points): 37.426
Average percent parens in population: 0.038
Minimum age in population: 3.0
Maximum age in population: 6.0
Average age in population: 4.4755
Median age in population: 4.5
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 85
Genome diversity (% unique Plush genomes):	 0.516
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 85
Syntactic diversity (% unique Push programs):	 0.516
Total error diversity:				 0.032
Error (vector) diversity:			 0.033
Behavioral diversity:				 0.034
--- Run Statistics ---
Number of program evaluations used so far: 4000
Number of point (instruction) evaluations so far: 4877934
--- Timings ---
Current time: 1529614867965 milliseconds
Total Time:          12.8 seconds
Initialization:       0.1 seconds,  0.9%
Reproduction:         4.7 seconds, 36.4%
Fitness Testing:      6.8 seconds, 52.6%
Report:               1.3 seconds, 10.2%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 3
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 4
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 4
;;******************************
;; -*- Number IO problem report - generation 4
Test total error for best: 55417.0
Test mean error for best: 27.70850
;;------------------------------
Outputs of best individual on training cases:
Correct output: 1.9526623133   | Program output: -55.0473376867
Correct output: -70.8009773522 | Program output: -14.8009773522
Correct output: -13.7839009431 | Program output: 54.2160990569 
Correct output: 143.8727406396 | Program output: 71.8727406396 
Correct output: 136.4396027174 | Program output: 46.4396027174 
Correct output: 18.5044280613  | Program output: 93.5044280613 
Correct output: 92.0568646792  | Program output: 43.0568646792 
Correct output: 71.8873476205  | Program output: 98.8873476205 
Correct output: -10.8388749243 | Program output: -69.8388749243
Correct output: 0.9299825981   | Program output: 50.9299825981 
Correct output: -26.7840412284 | Program output: -49.7840412284
Correct output: -102.1264221267 | Program output: -95.1264221267
Correct output: 40.8061668642  | Program output: 25.8061668642 
Correct output: -5.2544966331  | Program output: -34.2544966331
Correct output: 102.9855886244 | Program output: 36.9855886244 
Correct output: -118.0507723766 | Program output: -84.0507723766
Correct output: 55.9371769928  | Program output: 53.9371769928 
Correct output: 4.2657989984   | Program output: 6.2657989984  
Correct output: 96.7057987603  | Program output: 91.7057987603 
Correct output: 122.162446611  | Program output: 84.162446611  
Correct output: 30.0102027945  | Program output: -21.9897972055
Correct output: 104.5822387035 | Program output: 76.5822387035 
Correct output: -1.5538743366  | Program output: -71.5538743366
Correct output: 166.8070496115 | Program output: 70.8070496115 
Correct output: 58.6188945281  | Program output: 75.6188945281 
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction in1} {:instruction integer_max} {:instruction integer_dup_items} {:instruction integer_sub} {:instruction integer_mod} {:instruction integer_div} {:instruction float_mult} {:instruction float_dup_items} {:instruction float_div} {:instruction float_inc} {:instruction float_yankdup} {:instruction print_float} {:instruction float_mod} {:instruction integer_yankdup} {:instruction integer_shove} {:instruction float_cos} {:instruction float_dec} {:instruction integer_stackdepth} {:instruction integer_max} {:instruction float_max} {:instruction print_float} {:instruction float_flush} {:instruction integer_stackdepth} {:instruction tag_float_856} {:instruction float_add} {:instruction integer_dup_times} {:instruction in2} {:instruction float_cos} {:instruction float_dup_times} {:instruction float_min} {:instruction print_float} {:instruction tagged_465} {:instruction integer_fromfloat} {:instruction print_float} {:instruction integer_stackdepth} {:instruction -44} {:instruction float_pop} {:instruction integer_shove} {:instruction float_swap} {:instruction in2} {:instruction 52} {:instruction float_shove})
Best program: (in1 integer_max integer_dup_items integer_sub integer_mod integer_div float_mult float_dup_items float_div float_inc float_yankdup print_float float_mod integer_yankdup integer_shove float_cos float_dec integer_stackdepth integer_max float_max print_float float_flush integer_stackdepth tag_float_856 float_add integer_dup_times in2 float_cos float_dup_times float_min print_float tagged_465 integer_fromfloat print_float integer_stackdepth -44 float_pop integer_shove float_swap in2 52 float_shove)
Errors: [57.0 13 56.0 2 68.0 12 72.0 3 90.0 2 75.0 2 49.0 2 27.0 2 59.0 2 50.0 1 23.0 2 7.0 3 15.0 2 29.0 2 66.0 3 34.0 3 2.0 1 2.0 1 5.0 1 38.0 3 52.0 12 28.0 3 70.0 1 96.0 3 17.0 2]
Total: 1170.0
Mean: 23.4
Genome size: 42
Size: 43
Percent parens: 0.023
--- Population Statistics ---
Average total errors in population: 3673.5036364000002
Median total errors in population: 1175.0
Error averages by case: (155.5212031 13.089 152.2944538 3.335 161.7001194 11.429 169.1843674 4.233 184.9555828 4.212 168.11768300000006 3.251 148.2678606 2.392 126.093082 3.246 157.3831233 2.511 145.6841485 3.14 125.572941 3.374 109.45991269999998 4.318 117.66467340000001 3.242 130.71860119999997 2.426 163.3881153 4.257 133.4598821 4.333 106.3851183 2.361 103.05259889999996 2.238 109.52169329999998 2.366 138.9193423 4.138 151.258508 12.262 129.8972412 4.247 167.05750910000003 3.281 190.619512 3.367 117.0413637 3.237)
Error minima by case: (1.0757 9 15.801 2 12.8021 6 69.8727 3 44.4396 2 12.7668 2 41.0569 1 26.0 2 10.6864 1 0.0143 1 17.0529 2 6.0 3 15.0 2 4.4174 1 34.9856 3 33.0 3 2.0 1 1.0 1 5.0 1 38.0 3 22.9898 10 28.0 3 0.5977 1 68.807 2 16.0 2)
Average genome size in population (length): 32.985
Average program size in population (points): 33.985
Average percent parens in population: 0.042
Minimum age in population: 4.0
Maximum age in population: 7.875
Average age in population: 5.946875
Median age in population: 6.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 84
Genome diversity (% unique Plush genomes):	 0.544
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 84
Syntactic diversity (% unique Push programs):	 0.544
Total error diversity:				 0.023
Error (vector) diversity:			 0.023
Behavioral diversity:				 0.024
--- Run Statistics ---
Number of program evaluations used so far: 5000
Number of point (instruction) evaluations so far: 5707184
--- Timings ---
Current time: 1529614870924 milliseconds
Total Time:          15.9 seconds
Initialization:       0.1 seconds,  0.7%
Reproduction:         6.0 seconds, 37.9%
Fitness Testing:      8.0 seconds, 50.2%
Report:               1.8 seconds, 11.2%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 4
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 5
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 5
;;******************************
;; -*- Number IO problem report - generation 5
Test total error for best: 55417.0
Test mean error for best: 27.70850
;;------------------------------
Outputs of best individual on training cases:
Correct output: 1.9526623133   | Program output: -55.0473376867
Correct output: -70.8009773522 | Program output: -14.8009773522
Correct output: -13.7839009431 | Program output: 54.2160990569 
Correct output: 143.8727406396 | Program output: 71.8727406396 
Correct output: 136.4396027174 | Program output: 46.4396027174 
Correct output: 18.5044280613  | Program output: 93.5044280613 
Correct output: 92.0568646792  | Program output: 43.0568646792 
Correct output: 71.8873476205  | Program output: 98.8873476205 
Correct output: -10.8388749243 | Program output: -69.8388749243
Correct output: 0.9299825981   | Program output: 50.9299825981 
Correct output: -26.7840412284 | Program output: -49.7840412284
Correct output: -102.1264221267 | Program output: -95.1264221267
Correct output: 40.8061668642  | Program output: 25.8061668642 
Correct output: -5.2544966331  | Program output: -34.2544966331
Correct output: 102.9855886244 | Program output: 36.9855886244 
Correct output: -118.0507723766 | Program output: -84.0507723766
Correct output: 55.9371769928  | Program output: 53.9371769928 
Correct output: 4.2657989984   | Program output: 6.2657989984  
Correct output: 96.7057987603  | Program output: 91.7057987603 
Correct output: 122.162446611  | Program output: 84.162446611  
Correct output: 30.0102027945  | Program output: -21.9897972055
Correct output: 104.5822387035 | Program output: 76.5822387035 
Correct output: -1.5538743366  | Program output: -71.5538743366
Correct output: 166.8070496115 | Program output: 70.8070496115 
Correct output: 58.6188945281  | Program output: 75.6188945281 
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction in1} {:instruction integer_max} {:instruction integer_dup_items} {:instruction integer_sub} {:instruction integer_mod} {:instruction integer_div} {:instruction float_mult} {:instruction float_dup_items} {:instruction float_div} {:instruction float_inc} {:instruction float_yankdup} {:instruction print_float} {:instruction float_mod} {:instruction integer_yankdup} {:instruction integer_shove} {:instruction float_cos} {:instruction float_dec} {:instruction integer_stackdepth} {:instruction integer_max} {:instruction float_max} {:instruction print_float} {:instruction float_flush} {:instruction integer_stackdepth} {:instruction tag_float_856} {:instruction float_add} {:instruction integer_dup_times} {:instruction float_cos} {:instruction float_dup_times})
Best program: (in1 integer_max integer_dup_items integer_sub integer_mod integer_div float_mult float_dup_items float_div float_inc float_yankdup print_float float_mod integer_yankdup integer_shove float_cos float_dec integer_stackdepth integer_max float_max print_float float_flush integer_stackdepth tag_float_856 float_add integer_dup_times float_cos float_dup_times)
Errors: [57.0 13 56.0 2 68.0 12 72.0 3 90.0 2 75.0 2 49.0 2 27.0 2 59.0 2 50.0 1 23.0 2 7.0 3 15.0 2 29.0 2 66.0 3 34.0 3 2.0 1 2.0 1 5.0 1 38.0 3 52.0 12 28.0 3 70.0 1 96.0 3 17.0 2]
Total: 1170.0
Mean: 23.4
Genome size: 28
Size: 29
Percent parens: 0.034
--- Population Statistics ---
Average total errors in population: 3544.1950768000006
Median total errors in population: 1175.0
Error averages by case: (150.6219134 13.106 144.07775850000004 3.274 157.1766583 11.524 165.19558100000003 4.182 181.0212759 4.044 163.57462850000002 3.179 144.20909919999997 2.454 121.2631451 3.184 152.51627119999998 2.59 141.0511292 2.984 120.6153262 3.34 103.8666263 4.263 111.80574730000002 3.212 125.71827919999998 2.509 159.38021930000002 4.195 127.97716139999999 4.27 101.4845625 2.303 92.36664709999997 2.172 104.9255309 2.31 134.8276978 4.085 144.2840905 12.273 125.77372630000002 4.204 162.2135778 3.148 186.7009694 3.423 112.1494545 3.17)
Error minima by case: (0.9527 9 15.801 2 8.296 9 70.8727 3 45.4396 2 2.5044 2 42.0569 1 26.0 2 10.241 1 0.0143 1 4.7041 2 6.0 3 15.0 2 3.3001 1 35.9856 3 33.0 3 2.0 1 1.0 1 5.0 1 38.0 3 14.0102 10 28.0 3 0.1416 1 69.807 2 16.0 2)
Average genome size in population (length): 33.148
Average program size in population (points): 34.148
Average percent parens in population: 0.040
Minimum age in population: 5.0
Maximum age in population: 9.375
Average age in population: 7.5199375
Median age in population: 7.5625
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 61
Genome diversity (% unique Plush genomes):	 0.604
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 61
Syntactic diversity (% unique Push programs):	 0.604
Total error diversity:				 0.03
Error (vector) diversity:			 0.031
Behavioral diversity:				 0.031
--- Run Statistics ---
Number of program evaluations used so far: 6000
Number of point (instruction) evaluations so far: 6539159
--- Timings ---
Current time: 1529614873809 milliseconds
Total Time:          18.8 seconds
Initialization:       0.1 seconds,  0.6%
Reproduction:         7.4 seconds, 39.0%
Fitness Testing:      9.2 seconds, 48.9%
Report:               2.2 seconds, 11.4%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 5
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 6
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 6
;;******************************
;; -*- Number IO problem report - generation 6
Test total error for best: 55404.0
Test mean error for best: 27.70200
;;------------------------------
Outputs of best individual on training cases:
Correct output: 1.9526623133   | Program output: -54.0473376867
Correct output: -70.8009773522 | Program output: -13.8009773522
Correct output: -13.7839009431 | Program output: 55.2160990569 
Correct output: 143.8727406396 | Program output: 72.8727406396 
Correct output: 136.4396027174 | Program output: 47.4396027174 
Correct output: 18.5044280613  | Program output: 94.5044280613 
Correct output: 92.0568646792  | Program output: 44.0568646792 
Correct output: 71.8873476205  | Program output: 99.8873476205 
Correct output: -10.8388749243 | Program output: -68.8388749243
Correct output: 0.9299825981   | Program output: 51.9299825981 
Correct output: -26.7840412284 | Program output: -48.7840412284
Correct output: -102.1264221267 | Program output: -94.1264221267
Correct output: 40.8061668642  | Program output: 26.8061668642 
Correct output: -5.2544966331  | Program output: -33.2544966331
Correct output: 102.9855886244 | Program output: 37.9855886244 
Correct output: -118.0507723766 | Program output: -83.0507723766
Correct output: 55.9371769928  | Program output: 54.9371769928 
Correct output: 4.2657989984   | Program output: 7.2657989984  
Correct output: 96.7057987603  | Program output: 92.7057987603 
Correct output: 122.162446611  | Program output: 85.162446611  
Correct output: 30.0102027945  | Program output: -20.9897972055
Correct output: 104.5822387035 | Program output: 77.5822387035 
Correct output: -1.5538743366  | Program output: -70.5538743366
Correct output: 166.8070496115 | Program output: 71.8070496115 
Correct output: 58.6188945281  | Program output: 76.6188945281 
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction in1} {:instruction integer_max} {:instruction integer_dup_items} {:instruction integer_sub} {:instruction integer_mod} {:instruction integer_div} {:instruction float_mult} {:instruction float_dup_items} {:instruction float_div} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_inc} {:instruction float_yankdup} {:instruction print_float} {:instruction float_mod} {:instruction integer_yankdup} {:instruction integer_shove} {:instruction float_cos} {:instruction float_dec} {:instruction integer_stackdepth} {:instruction integer_max} {:instruction integer_stackdepth} {:instruction integer_max} {:instruction float_max} {:instruction print_float} {:instruction float_flush} {:instruction integer_stackdepth} {:instruction tag_float_856} {:instruction float_add} {:instruction integer_dup_times} {:instruction in2} {:instruction float_cos} {:instruction float_dup_times} {:instruction float_min} {:instruction print_float} {:instruction tagged_465} {:instruction integer_fromfloat} {:instruction print_float} {:instruction integer_stackdepth} {:instruction -43} {:instruction float_pop} {:instruction integer_shove} {:instruction float_swap} {:instruction in2} {:instruction 52} {:instruction float_shove} {:instruction float_stackdepth} {:instruction float_sin} {:instruction float_flush} {:instruction integer_mult} {:instruction float_dup} {:instruction integer_pop} {:instruction integer_yankdup} {:instruction -13} {:instruction integer_dup} {:instruction integer_rot} {:instruction float_pop} {:instruction integer_dup} {:instruction integer_mod} {:instruction float_swap} {:instruction float_tan} {:instruction integer_dup_times} {:instruction float_inc} {:instruction float_sub} {:instruction float_rot} {:instruction integer_dec} {:instruction integer_yankdup})
Best program: (in1 integer_max integer_dup_items integer_sub integer_mod integer_div float_mult float_dup_items float_div float_inc float_yankdup float_inc float_yankdup print_float float_mod integer_yankdup integer_shove float_cos float_dec integer_stackdepth integer_max integer_stackdepth integer_max float_max print_float float_flush integer_stackdepth tag_float_856 float_add integer_dup_times in2 float_cos float_dup_times float_min print_float tagged_465 integer_fromfloat print_float integer_stackdepth -43 float_pop integer_shove float_swap in2 52 float_shove float_stackdepth float_sin float_flush integer_mult float_dup integer_pop integer_yankdup -13 integer_dup integer_rot float_pop integer_dup integer_mod float_swap float_tan integer_dup_times float_inc float_sub float_rot integer_dec integer_yankdup)
Errors: [56.0 13 57.0 2 69.0 12 71.0 3 89.0 3 76.0 2 48.0 2 28.0 2 58.0 2 51.0 2 22.0 2 8.0 3 14.0 2 28.0 2 65.0 3 35.0 3 1.0 1 3.0 1 4.0 1 37.0 3 51.0 11 27.0 3 69.0 2 95.0 3 18.0 2]
Total: 1165.0
Mean: 23.3
Genome size: 67
Size: 68
Percent parens: 0.015
--- Population Statistics ---
Average total errors in population: 2863.0485919000007
Median total errors in population: 1170.0
Error averages by case: (122.58258620000002 13.022 116.88993000000004 3.018 132.1974693 11.826 138.93871180000002 3.941 155.1493333 3.351 138.7673364 2.957 117.0861647 2.626 96.07844180000001 2.951 124.61318030000004 2.71 115.61929539999998 2.331 92.15916810000002 3.046 78.50137739999998 4.022 81.74052219999999 2.966 96.934789 2.649 132.64135160000004 3.922 103.18257949999999 4.017 71.7022597 2.046 64.22817930000001 1.955 77.11682160000001 2.033 107.54859919999998 3.87 114.55316380000004 12.163 98.18926960000002 3.941 134.3732456 2.407 161.2180078 3.612 86.70280830000002 2.952)
Error minima by case: (0.0757 9 15.801 2 8.7839 8 70.8727 3 45.4396 2 2.6497 2 42.0569 1 25.0 2 2.8389 1 0.0143 1 20.784 2 5.0 3 14.0 2 0.2545 1 35.9856 3 32.0 3 1.0 1 0.0 0 4.0 1 37.0 2 14.1555 10 27.0 2 0.2092 1 69.807 2 15.0 2)
Average genome size in population (length): 39.772
Average program size in population (points): 40.772
Average percent parens in population: 0.032
Minimum age in population: 6.75
Maximum age in population: 11.03125
Average age in population: 9.090375
Median age in population: 9.125
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 96
Genome diversity (% unique Plush genomes):	 0.614
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 96
Syntactic diversity (% unique Push programs):	 0.614
Total error diversity:				 0.034
Error (vector) diversity:			 0.034
Behavioral diversity:				 0.035
--- Run Statistics ---
Number of program evaluations used so far: 7000
Number of point (instruction) evaluations so far: 7534584
--- Timings ---
Current time: 1529614876946 milliseconds
Total Time:          21.8 seconds
Initialization:       0.1 seconds,  0.5%
Reproduction:         8.7 seconds, 39.8%
Fitness Testing:     10.5 seconds, 48.3%
Report:               2.5 seconds, 11.4%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 6
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 7
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 7
;;******************************
;; -*- Number IO problem report - generation 7
Test total error for best: 55404.0
Test mean error for best: 27.70200
;;------------------------------
Outputs of best individual on training cases:
Correct output: 1.9526623133   | Program output: -54.0473376867
Correct output: -70.8009773522 | Program output: -13.8009773522
Correct output: -13.7839009431 | Program output: 55.2160990569 
Correct output: 143.8727406396 | Program output: 72.8727406396 
Correct output: 136.4396027174 | Program output: 47.4396027174 
Correct output: 18.5044280613  | Program output: 94.5044280613 
Correct output: 92.0568646792  | Program output: 44.0568646792 
Correct output: 71.8873476205  | Program output: 99.8873476205 
Correct output: -10.8388749243 | Program output: -68.8388749243
Correct output: 0.9299825981   | Program output: 51.9299825981 
Correct output: -26.7840412284 | Program output: -48.7840412284
Correct output: -102.1264221267 | Program output: -94.1264221267
Correct output: 40.8061668642  | Program output: 26.8061668642 
Correct output: -5.2544966331  | Program output: -33.2544966331
Correct output: 102.9855886244 | Program output: 37.9855886244 
Correct output: -118.0507723766 | Program output: -83.0507723766
Correct output: 55.9371769928  | Program output: 54.9371769928 
Correct output: 4.2657989984   | Program output: 7.2657989984  
Correct output: 96.7057987603  | Program output: 92.7057987603 
Correct output: 122.162446611  | Program output: 85.162446611  
Correct output: 30.0102027945  | Program output: -20.9897972055
Correct output: 104.5822387035 | Program output: 77.5822387035 
Correct output: -1.5538743366  | Program output: -70.5538743366
Correct output: 166.8070496115 | Program output: 71.8070496115 
Correct output: 58.6188945281  | Program output: 76.6188945281 
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction in1} {:instruction integer_max} {:instruction integer_dup_items} {:instruction integer_sub} {:instruction integer_mod} {:instruction integer_div} {:instruction float_mult} {:instruction float_dup_items} {:instruction float_div} {:instruction float_inc} {:instruction integer_dup_items} {:instruction integer_sub} {:instruction integer_mod} {:instruction integer_div} {:instruction float_mult} {:instruction float_dup_items} {:instruction float_div} {:instruction float_inc} {:instruction float_yankdup} {:instruction print_float} {:instruction float_mod} {:instruction integer_yankdup} {:instruction integer_shove} {:instruction float_cos} {:instruction float_dec} {:instruction integer_stackdepth} {:instruction integer_max} {:instruction float_max} {:instruction print_float} {:instruction float_flush} {:instruction integer_stackdepth} {:instruction tag_float_856} {:instruction float_dup} {:instruction float_add} {:instruction integer_dup_times} {:instruction in2} {:instruction float_cos} {:instruction float_dup_times} {:instruction float_min} {:instruction print_float} {:instruction tagged_465} {:instruction integer_fromfloat} {:instruction print_float} {:instruction integer_stackdepth} {:instruction -44} {:instruction float_pop} {:instruction integer_shove} {:instruction float_swap} {:instruction in2} {:instruction 52} {:instruction float_shove} {:instruction float_stackdepth} {:instruction float_sin} {:instruction float_flush} {:instruction integer_mult} {:instruction float_dup} {:instruction integer_pop} {:instruction integer_yankdup} {:instruction float_shove} {:instruction float_stackdepth} {:instruction float_sin} {:instruction float_add} {:instruction integer_mult} {:instruction float_dup} {:instruction integer_pop} {:instruction float_dup} {:instruction -13} {:instruction integer_dup} {:instruction integer_rot} {:instruction float_pop} {:instruction integer_dup} {:instruction integer_mod} {:instruction float_swap} {:instruction float_tan} {:instruction integer_dup_times} {:instruction float_inc} {:instruction float_sub} {:instruction float_rot} {:instruction integer_dec} {:instruction integer_yankdup})
Best program: (in1 integer_max integer_dup_items integer_sub integer_mod integer_div float_mult float_dup_items float_div float_inc integer_dup_items integer_sub integer_mod integer_div float_mult float_dup_items float_div float_inc float_yankdup print_float float_mod integer_yankdup integer_shove float_cos float_dec integer_stackdepth integer_max float_max print_float float_flush integer_stackdepth tag_float_856 float_dup float_add integer_dup_times in2 float_cos float_dup_times float_min print_float tagged_465 integer_fromfloat print_float integer_stackdepth -44 float_pop integer_shove float_swap in2 52 float_shove float_stackdepth float_sin float_flush integer_mult float_dup integer_pop integer_yankdup float_shove float_stackdepth float_sin float_add integer_mult float_dup integer_pop float_dup -13 integer_dup integer_rot float_pop integer_dup integer_mod float_swap float_tan integer_dup_times float_inc float_sub float_rot integer_dec integer_yankdup)
Errors: [56.0 13 57.0 2 69.0 12 71.0 3 89.0 3 76.0 2 48.0 2 28.0 2 58.0 2 51.0 2 22.0 2 8.0 3 14.0 2 28.0 2 65.0 3 35.0 3 1.0 1 3.0 1 4.0 1 37.0 3 51.0 11 27.0 3 69.0 2 95.0 3 18.0 2]
Total: 1165.0
Mean: 23.3
Genome size: 80
Size: 81
Percent parens: 0.012
--- Population Statistics ---
Average total errors in population: 2253.6197530000013
Median total errors in population: 1170.0
Error averages by case: (99.50604430000001 13.056 90.54891470000003 2.659 109.04770559999999 12.071 115.86583370000002 3.665 132.6142524 2.718 115.7084297 2.64 93.44498270000001 2.65 71.5043877 2.648 101.52896709999999 2.679 91.95885730000002 1.722 68.01602210000001 2.702 53.19762010000001 3.674 55.63513650000001 2.678 73.27653140000001 2.639 109.5596438 3.609 78.78847519999998 3.677 48.7970014 1.724 35.22957190000001 1.636 52.263076399999996 1.701 83.60770430000001 3.61 89.27767130000002 12.143 73.94490030000001 3.654 111.68154249999999 1.762 138.7281971 3.643 61.889283500000005 2.639)
Error minima by case: (0.0473 9 54.0 2 11.8021 8 71.0 3 89.0 2 12.7668 2 48.0 1 25.0 2 9.6864 1 0.0143 1 22.0 2 5.0 3 14.0 2 3.3001 1 65.0 3 32.0 3 1.0 1 0.0 0 4.0 1 37.0 2 28.0102 10 27.0 2 0.2092 1 95.0 2 15.0 2)
Average genome size in population (length): 45.35
Average program size in population (points): 46.35
Average percent parens in population: 0.024
Minimum age in population: 8.125
Maximum age in population: 12.90625
Average age in population: 10.672796875
Median age in population: 10.734375
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 83
Genome diversity (% unique Plush genomes):	 0.646
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 83
Syntactic diversity (% unique Push programs):	 0.646
Total error diversity:				 0.027
Error (vector) diversity:			 0.028
Behavioral diversity:				 0.029
--- Run Statistics ---
Number of program evaluations used so far: 8000
Number of point (instruction) evaluations so far: 8668384
--- Timings ---
Current time: 1529614880218 milliseconds
Total Time:          25.0 seconds
Initialization:       0.1 seconds,  0.4%
Reproduction:        10.0 seconds, 40.1%
Fitness Testing:     11.9 seconds, 47.6%
Report:               3.0 seconds, 11.9%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 7
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 8
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 8
;;******************************
;; -*- Number IO problem report - generation 8
Test total error for best: 55470.0
Test mean error for best: 27.73500
;;------------------------------
Outputs of best individual on training cases:
Correct output: 1.9526623133   | Program output: -53.0473376867
Correct output: -70.8009773522 | Program output: -12.8009773522
Correct output: -13.7839009431 | Program output: 56.2160990569 
Correct output: 143.8727406396 | Program output: 73.8727406396 
Correct output: 136.4396027174 | Program output: 48.4396027174 
Correct output: 18.5044280613  | Program output: 95.5044280613 
Correct output: 92.0568646792  | Program output: 45.0568646792 
Correct output: 71.8873476205  | Program output: 100.8873476205
Correct output: -10.8388749243 | Program output: -67.8388749243
Correct output: 0.9299825981   | Program output: 52.9299825981 
Correct output: -26.7840412284 | Program output: -47.7840412284
Correct output: -102.1264221267 | Program output: -93.1264221267
Correct output: 40.8061668642  | Program output: 27.8061668642 
Correct output: -5.2544966331  | Program output: -32.2544966331
Correct output: 102.9855886244 | Program output: 38.9855886244 
Correct output: -118.0507723766 | Program output: -82.0507723766
Correct output: 55.9371769928  | Program output: 55.9371769928 
Correct output: 4.2657989984   | Program output: 8.2657989984  
Correct output: 96.7057987603  | Program output: 93.7057987603 
Correct output: 122.162446611  | Program output: 86.162446611  
Correct output: 30.0102027945  | Program output: -19.9897972055
Correct output: 104.5822387035 | Program output: 78.5822387035 
Correct output: -1.5538743366  | Program output: -69.5538743366
Correct output: 166.8070496115 | Program output: 72.8070496115 
Correct output: 58.6188945281  | Program output: 77.6188945281 
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction in1} {:instruction integer_max} {:instruction integer_dup_items} {:instruction integer_sub} {:instruction integer_mod} {:instruction integer_div} {:instruction float_mult} {:instruction float_dup_items} {:instruction float_div} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_inc} {:instruction integer_mod} {:instruction integer_div} {:instruction float_mult} {:instruction float_dup_items} {:instruction integer_shove} {:instruction integer_stackdepth} {:instruction integer_sub} {:instruction float_inc} {:instruction integer_flush} {:instruction print_integer} {:instruction print_float} {:instruction float_div})
Best program: (in1 integer_max integer_dup_items integer_sub integer_mod integer_div float_mult float_dup_items float_div float_inc float_yankdup float_inc integer_mod integer_div float_mult float_dup_items integer_shove integer_stackdepth integer_sub float_inc integer_flush print_integer print_float float_div)
Errors: [55.0 13 58.0 2 70.0 12 70.0 2 88.0 3 77.0 2 47.0 2 29.0 3 57.0 2 52.0 2 21.0 2 9.0 3 13.0 2 27.0 2 64.0 3 36.0 3 0.0 0 4.0 1 3.0 1 36.0 3 50.0 12 26.0 3 68.0 2 94.0 3 19.0 2]
Total: 1158.0
Mean: 23.16
Genome size: 24
Size: 25
Percent parens: 0.040
--- Population Statistics ---
Average total errors in population: 2033.980228700002
Median total errors in population: 1170.0
Error averages by case: (88.71904339999999 12.951 83.97817459999997 2.674 101.32852869999996 11.995 106.91208540000004 3.615 123.40584460000005 2.754 108.31588310000001 2.644 83.72982920000003 2.641 65.08984329999998 2.636 90.93923539999997 2.661 84.20352730000003 1.797 57.59802540000001 2.68 47.15655620000001 3.673 45.6915317 2.653 62.4743283 2.613 99.92161490000002 3.586 72.67541420000003 3.67 38.8643828 1.735 27.826095 1.649 43.08178780000001 1.679 74.56355400000001 3.579 79.1468274 11.971 64.6686976 3.61 100.9483881 1.8 130.0076147 3.621 55.20041560000002 2.646)
Error minima by case: (0.0473 8 24.2603 2 11.0937 8 1.1273 2 44.5604 2 11.7668 2 6.9431 1 25.0 2 9.5881 1 0.0143 1 21.0 2 5.0 3 9.8062 2 2.3001 1 30.0144 3 22.9895 3 0.0 0 0.0 0 3.0 1 36.0 2 28.0102 9 26.0 2 0.178 1 26.193 2 15.0 2)
Average genome size in population (length): 46.18
Average program size in population (points): 47.18
Average percent parens in population: 0.024
Minimum age in population: 9.5625
Maximum age in population: 14.6015625
Average age in population: 12.1735546875
Median age in population: 12.2109375
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 62
Genome diversity (% unique Plush genomes):	 0.719
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 62
Syntactic diversity (% unique Push programs):	 0.719
Total error diversity:				 0.036
Error (vector) diversity:			 0.036
Behavioral diversity:				 0.038
--- Run Statistics ---
Number of program evaluations used so far: 9000
Number of point (instruction) evaluations so far: 9823034
--- Timings ---
Current time: 1529614883263 milliseconds
Total Time:          28.3 seconds
Initialization:       0.1 seconds,  0.4%
Reproduction:        11.3 seconds, 40.1%
Fitness Testing:     13.4 seconds, 47.2%
Report:               3.5 seconds, 12.4%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 8
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 9
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 9
;;******************************
;; -*- Number IO problem report - generation 9
Test total error for best: 55470.0
Test mean error for best: 27.73500
;;------------------------------
Outputs of best individual on training cases:
Correct output: 1.9526623133   | Program output: -53.0473376867
Correct output: -70.8009773522 | Program output: -12.8009773522
Correct output: -13.7839009431 | Program output: 56.2160990569 
Correct output: 143.8727406396 | Program output: 73.8727406396 
Correct output: 136.4396027174 | Program output: 48.4396027174 
Correct output: 18.5044280613  | Program output: 95.5044280613 
Correct output: 92.0568646792  | Program output: 45.0568646792 
Correct output: 71.8873476205  | Program output: 100.8873476205
Correct output: -10.8388749243 | Program output: -67.8388749243
Correct output: 0.9299825981   | Program output: 52.9299825981 
Correct output: -26.7840412284 | Program output: -47.7840412284
Correct output: -102.1264221267 | Program output: -93.1264221267
Correct output: 40.8061668642  | Program output: 27.8061668642 
Correct output: -5.2544966331  | Program output: -32.2544966331
Correct output: 102.9855886244 | Program output: 38.9855886244 
Correct output: -118.0507723766 | Program output: -82.0507723766
Correct output: 55.9371769928  | Program output: 55.9371769928 
Correct output: 4.2657989984   | Program output: 8.2657989984  
Correct output: 96.7057987603  | Program output: 93.7057987603 
Correct output: 122.162446611  | Program output: 86.162446611  
Correct output: 30.0102027945  | Program output: -19.9897972055
Correct output: 104.5822387035 | Program output: 78.5822387035 
Correct output: -1.5538743366  | Program output: -69.5538743366
Correct output: 166.8070496115 | Program output: 72.8070496115 
Correct output: 58.6188945281  | Program output: 77.6188945281 
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction in1} {:instruction integer_max} {:instruction integer_dup_items} {:instruction integer_sub} {:instruction integer_mod} {:instruction integer_div} {:instruction float_mult} {:instruction float_dup_items} {:instruction float_div} {:instruction float_inc} {:instruction integer_dup_items} {:instruction integer_sub} {:instruction integer_mod} {:instruction integer_div} {:instruction float_mult} {:instruction float_dup_items} {:instruction float_div} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_inc} {:instruction float_yankdup} {:instruction print_float} {:instruction float_mod} {:instruction integer_yankdup} {:instruction integer_shove} {:instruction float_cos} {:instruction float_dec} {:instruction integer_stackdepth} {:instruction integer_max} {:instruction integer_stackdepth} {:instruction integer_max} {:instruction float_max} {:instruction print_float} {:instruction float_flush} {:instruction integer_stackdepth} {:instruction tag_float_856} {:instruction float_add} {:instruction integer_dup_times} {:instruction in2} {:instruction float_cos} {:instruction float_add} {:instruction integer_dup_times} {:instruction in2} {:instruction float_cos} {:instruction float_dup_times} {:instruction float_min} {:instruction print_float} {:instruction tagged_465} {:instruction integer_fromfloat} {:instruction print_float} {:instruction integer_stackdepth} {:instruction float_flush} {:instruction float_pop} {:instruction integer_shove} {:instruction float_swap} {:instruction in2} {:instruction 52} {:instruction float_shove} {:instruction float_stackdepth} {:instruction float_sin} {:instruction float_flush} {:instruction integer_mult} {:instruction float_dup} {:instruction integer_pop} {:instruction integer_yankdup} {:instruction -13} {:instruction integer_dup} {:instruction integer_rot} {:instruction float_pop} {:instruction integer_dup} {:instruction integer_mod} {:instruction float_swap} {:instruction float_tan} {:instruction float_swap} {:instruction float_tan} {:instruction integer_dup_times} {:instruction float_inc} {:instruction float_sub} {:instruction float_rot} {:instruction integer_dec} {:instruction integer_yankdup})
Best program: (in1 integer_max integer_dup_items integer_sub integer_mod integer_div float_mult float_dup_items float_div float_inc integer_dup_items integer_sub integer_mod integer_div float_mult float_dup_items float_div float_inc float_yankdup float_inc float_yankdup print_float float_mod integer_yankdup integer_shove float_cos float_dec integer_stackdepth integer_max integer_stackdepth integer_max float_max print_float float_flush integer_stackdepth tag_float_856 float_add integer_dup_times in2 float_cos float_add integer_dup_times in2 float_cos float_dup_times float_min print_float tagged_465 integer_fromfloat print_float integer_stackdepth float_flush float_pop integer_shove float_swap in2 52 float_shove float_stackdepth float_sin float_flush integer_mult float_dup integer_pop integer_yankdup -13 integer_dup integer_rot float_pop integer_dup integer_mod float_swap float_tan float_swap float_tan integer_dup_times float_inc float_sub float_rot integer_dec integer_yankdup)
Errors: [55.0 13 58.0 2 70.0 12 70.0 2 88.0 3 77.0 2 47.0 2 29.0 3 57.0 2 52.0 2 21.0 2 9.0 3 13.0 2 27.0 2 64.0 3 36.0 3 0.0 0 4.0 1 3.0 1 36.0 3 50.0 12 26.0 3 68.0 2 94.0 3 19.0 2]
Total: 1158.0
Mean: 23.16
Genome size: 81
Size: 82
Percent parens: 0.012
--- Population Statistics ---
Average total errors in population: 2489.3667205000024
Median total errors in population: 1170.0
Error averages by case: (108.09967670000002 12.952 98.35693119999999 2.839 120.36043219999999 12.044 124.3515832 3.819 140.6713916 3.263 126.91110210000002 2.8 101.9341958 2.805 83.98939619999997 2.835 110.1580878 2.85 103.52344900000001 2.293 77.4051824 2.875 67.18701200000004 3.851 61.407168400000025 2.844 82.38602069999997 2.806 117.80415720000002 3.727 92.3441688 3.871 56.952775 1.907 40.100875000000016 1.815 61.63163450000001 1.872 92.5338733 3.727 94.68358440000009 11.653 82.93837060000001 3.794 120.02588760000002 2.342 146.9378808 3.804 74.48788400000001 2.796)
Error minima by case: (0.0473 9 55.0 2 11.8021 8 28.0 2 10.0 1 10.7668 2 47.0 1 26.0 2 9.6864 1 0.0143 1 21.0 2 6.0 3 13.0 2 3.3001 1 34.0 2 33.0 3 0.0 0 1.0 1 3.0 1 36.0 2 28.0102 8 26.0 2 0.2092 1 4.0 2 16.0 2)
Average genome size in population (length): 48.764
Average program size in population (points): 49.764
Average percent parens in population: 0.023
Minimum age in population: 10.5625
Maximum age in population: 15.60546875
Average age in population: 13.7818671875
Median age in population: 13.8359375
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 24
Genome diversity (% unique Plush genomes):	 0.765
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 24
Syntactic diversity (% unique Push programs):	 0.765
Total error diversity:				 0.032
Error (vector) diversity:			 0.034
Behavioral diversity:				 0.035
--- Run Statistics ---
Number of program evaluations used so far: 10000
Number of point (instruction) evaluations so far: 11042209
--- Timings ---
Current time: 1529614886652 milliseconds
Total Time:          31.4 seconds
Initialization:       0.1 seconds,  0.4%
Reproduction:        12.7 seconds, 40.4%
Fitness Testing:     14.8 seconds, 47.2%
Report:               3.8 seconds, 12.1%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 9
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 10
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 10
;;******************************
;; -*- Number IO problem report - generation 10
Test total error for best: 55501.0
Test mean error for best: 27.75050
;;------------------------------
Outputs of best individual on training cases:
Correct output: 1.9526623133   | Program output: -52.0473376867
Correct output: -70.8009773522 | Program output: -11.8009773522
Correct output: -13.7839009431 | Program output: 57.2160990569 
Correct output: 143.8727406396 | Program output: 74.8727406396 
Correct output: 136.4396027174 | Program output: 49.4396027174 
Correct output: 18.5044280613  | Program output: 96.5044280613 
Correct output: 92.0568646792  | Program output: 46.0568646792 
Correct output: 71.8873476205  | Program output: 101.8873476205
Correct output: -10.8388749243 | Program output: -66.8388749243
Correct output: 0.9299825981   | Program output: 53.9299825981 
Correct output: -26.7840412284 | Program output: -46.7840412284
Correct output: -102.1264221267 | Program output: -92.1264221267
Correct output: 40.8061668642  | Program output: 28.8061668642 
Correct output: -5.2544966331  | Program output: -31.2544966331
Correct output: 102.9855886244 | Program output: 39.9855886244 
Correct output: -118.0507723766 | Program output: -81.0507723766
Correct output: 55.9371769928  | Program output: 56.9371769928 
Correct output: 4.2657989984   | Program output: 9.2657989984  
Correct output: 96.7057987603  | Program output: 94.7057987603 
Correct output: 122.162446611  | Program output: 87.162446611  
Correct output: 30.0102027945  | Program output: -18.9897972055
Correct output: 104.5822387035 | Program output: 79.5822387035 
Correct output: -1.5538743366  | Program output: -68.5538743366
Correct output: 166.8070496115 | Program output: 73.8070496115 
Correct output: 58.6188945281  | Program output: 78.6188945281 
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction in1} {:instruction integer_max} {:instruction integer_dup_items} {:instruction integer_sub} {:instruction integer_mod} {:instruction integer_div} {:instruction float_mult} {:instruction float_dup_items} {:instruction float_div} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_mult} {:instruction float_dup_items} {:instruction float_div} {:instruction float_inc} {:instruction integer_dup_items} {:instruction integer_sub} {:instruction integer_mod} {:instruction integer_div} {:instruction float_mult} {:instruction float_dup_items} {:instruction float_div} {:instruction float_inc} {:instruction float_yankdup} {:instruction print_float} {:instruction float_max} {:instruction integer_yankdup} {:instruction integer_min} {:instruction float_cos} {:instruction float_dec} {:instruction integer_stackdepth} {:instruction integer_max} {:instruction float_max} {:instruction print_float} {:instruction float_flush} {:instruction integer_stackdepth} {:instruction tag_float_856} {:instruction float_dup} {:instruction float_add} {:instruction integer_dup_times} {:instruction in2} {:instruction float_cos} {:instruction float_dup_times} {:instruction float_min} {:instruction print_float} {:instruction tagged_465} {:instruction integer_fromfloat} {:instruction print_float} {:instruction integer_stackdepth} {:instruction -44} {:instruction float_pop} {:instruction integer_shove} {:instruction float_swap} {:instruction in2} {:instruction 52} {:instruction float_shove} {:instruction float_stackdepth} {:instruction float_sin} {:instruction float_flush} {:instruction integer_mult} {:instruction float_dup} {:instruction integer_pop} {:instruction integer_yankdup} {:instruction float_shove} {:instruction float_stackdepth} {:instruction float_sin} {:instruction float_add} {:instruction integer_dup} {:instruction integer_mod} {:instruction float_swap} {:instruction float_tan} {:instruction integer_dup_times} {:instruction float_inc} {:instruction float_sub} {:instruction float_rot} {:instruction integer_dec} {:instruction integer_yankdup})
Best program: (in1 integer_max integer_dup_items integer_sub integer_mod integer_div float_mult float_dup_items float_div float_inc float_yankdup float_inc float_yankdup float_mult float_dup_items float_div float_inc integer_dup_items integer_sub integer_mod integer_div float_mult float_dup_items float_div float_inc float_yankdup print_float float_max integer_yankdup integer_min float_cos float_dec integer_stackdepth integer_max float_max print_float float_flush integer_stackdepth tag_float_856 float_dup float_add integer_dup_times in2 float_cos float_dup_times float_min print_float tagged_465 integer_fromfloat print_float integer_stackdepth -44 float_pop integer_shove float_swap in2 52 float_shove float_stackdepth float_sin float_flush integer_mult float_dup integer_pop integer_yankdup float_shove float_stackdepth float_sin float_add integer_dup integer_mod float_swap float_tan integer_dup_times float_inc float_sub float_rot integer_dec integer_yankdup)
Errors: [54.0 13 59.0 2 71.0 12 69.0 2 87.0 3 78.0 2 46.0 2 30.0 2 56.0 2 53.0 2 20.0 1 10.0 2 12.0 2 26.0 2 63.0 3 37.0 2 1.0 1 5.0 1 2.0 1 35.0 3 49.0 12 25.0 3 67.0 2 93.0 3 20.0 1]
Total: 1149.0
Mean: 22.98
Genome size: 79
Size: 80
Percent parens: 0.013
--- Population Statistics ---
Average total errors in population: 2217.6048203000028
Median total errors in population: 1165.0
Error averages by case: (96.41872910000001 12.969 89.5741745 2.705 109.78967469999999 12.028 113.75158310000002 3.616 130.20492819999998 3.581 116.54404110000004 2.666 90.877118 2.67 72.94316759999998 2.756 98.53913810000003 2.711 92.7563327 2.617 65.3282101 2.726 55.074555500000024 3.692 51.68928040000002 2.691 70.13070300000001 2.668 106.8216824 3.616 80.5593588 3.715 46.3526033 1.702 33.3580623 1.665 50.24330100000002 1.726 81.5632652 3.612 84.79738030000004 11.238 71.7957749 3.655 108.56837180000002 2.647 136.66957399999998 3.66 63.25781020000001 2.664)
Error minima by case: (0.5279 9 55.0 2 9.6659 8 69.0 2 87.0 2 13.3312 2 46.0 1 26.0 2 9.6864 1 0.8534 1 20.0 1 6.0 2 12.0 2 3.3001 1 63.0 3 33.0 2 0.0 0 1.0 1 2.0 1 35.0 3 27.0102 9 25.0 3 0.2092 1 93.0 2 16.0 1)
Average genome size in population (length): 51.347
Average program size in population (points): 52.347
Average percent parens in population: 0.021
Minimum age in population: 12.15625
Maximum age in population: 17.23046875
Average age in population: 15.322130859375
Median age in population: 15.35546875
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 22
Genome diversity (% unique Plush genomes):	 0.697
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 22
Syntactic diversity (% unique Push programs):	 0.697
Total error diversity:				 0.036
Error (vector) diversity:			 0.037
Behavioral diversity:				 0.039
--- Run Statistics ---
Number of program evaluations used so far: 11000
Number of point (instruction) evaluations so far: 12325909
--- Timings ---
Current time: 1529614890030 milliseconds
Total Time:          34.9 seconds
Initialization:       0.1 seconds,  0.3%
Reproduction:        14.0 seconds, 40.3%
Fitness Testing:     16.3 seconds, 46.9%
Report:               4.4 seconds, 12.6%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 10
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 11
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 11
;;******************************
;; -*- Number IO problem report - generation 11
Test total error for best: 55553.0
Test mean error for best: 27.77650
;;------------------------------
Outputs of best individual on training cases:
Correct output: 1.9526623133   | Program output: -51.0473376867
Correct output: -70.8009773522 | Program output: -10.8009773522
Correct output: -13.7839009431 | Program output: 58.2160990569 
Correct output: 143.8727406396 | Program output: 75.8727406396 
Correct output: 136.4396027174 | Program output: 50.4396027174 
Correct output: 18.5044280613  | Program output: 97.5044280613 
Correct output: 92.0568646792  | Program output: 47.0568646792 
Correct output: 71.8873476205  | Program output: 102.8873476205
Correct output: -10.8388749243 | Program output: -65.8388749243
Correct output: 0.9299825981   | Program output: 54.9299825981 
Correct output: -26.7840412284 | Program output: -45.7840412284
Correct output: -102.1264221267 | Program output: -91.1264221267
Correct output: 40.8061668642  | Program output: 29.8061668642 
Correct output: -5.2544966331  | Program output: -30.2544966331
Correct output: 102.9855886244 | Program output: 40.9855886244 
Correct output: -118.0507723766 | Program output: -80.0507723766
Correct output: 55.9371769928  | Program output: 57.9371769928 
Correct output: 4.2657989984   | Program output: 10.2657989984 
Correct output: 96.7057987603  | Program output: 95.7057987603 
Correct output: 122.162446611  | Program output: 88.162446611  
Correct output: 30.0102027945  | Program output: -17.9897972055
Correct output: 104.5822387035 | Program output: 80.5822387035 
Correct output: -1.5538743366  | Program output: -67.5538743366
Correct output: 166.8070496115 | Program output: 74.8070496115 
Correct output: 58.6188945281  | Program output: 79.6188945281 
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction in1} {:instruction integer_max} {:instruction integer_dup_items} {:instruction integer_sub} {:instruction integer_mod} {:instruction integer_div} {:instruction float_mult} {:instruction float_dup_items} {:instruction float_div} {:instruction float_inc} {:instruction float_yankdup} {:instruction integer_mod} {:instruction integer_div} {:instruction float_mult} {:instruction integer_rot} {:instruction float_div} {:instruction float_inc} {:instruction float_mult} {:instruction float_dup_items} {:instruction float_div} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_dup_items} {:instruction float_div} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_inc} {:instruction float_yankdup} {:instruction print_float} {:instruction float_mod} {:instruction integer_yankdup} {:instruction integer_shove} {:instruction float_cos} {:instruction float_dec} {:instruction integer_stackdepth} {:instruction integer_max} {:instruction integer_stackdepth} {:instruction integer_dup} {:instruction integer_stackdepth} {:instruction integer_max} {:instruction float_max} {:instruction print_float} {:instruction float_flush} {:instruction integer_stackdepth} {:instruction tag_float_856} {:instruction float_add} {:instruction integer_dup_times} {:instruction in2} {:instruction float_cos} {:instruction float_add} {:instruction integer_dup_times} {:instruction in2} {:instruction float_cos} {:instruction float_dup_times} {:instruction float_min} {:instruction print_float} {:instruction tagged_465} {:instruction integer_fromfloat} {:instruction print_float} {:instruction integer_stackdepth} {:instruction float_flush} {:instruction float_pop} {:instruction integer_shove} {:instruction float_swap} {:instruction in2} {:instruction 52} {:instruction float_shove} {:instruction float_stackdepth} {:instruction float_sin} {:instruction float_flush} {:instruction integer_mult} {:instruction float_dup} {:instruction integer_pop} {:instruction integer_yankdup} {:instruction -13} {:instruction integer_dup} {:instruction integer_rot} {:instruction float_pop} {:instruction integer_dup} {:instruction integer_mod} {:instruction float_swap})
Best program: (in1 integer_max integer_dup_items integer_sub integer_mod integer_div float_mult float_dup_items float_div float_inc float_yankdup integer_mod integer_div float_mult integer_rot float_div float_inc float_mult float_dup_items float_div float_inc float_yankdup float_dup_items float_div float_inc float_yankdup float_inc float_yankdup print_float float_mod integer_yankdup integer_shove float_cos float_dec integer_stackdepth integer_max integer_stackdepth integer_dup integer_stackdepth integer_max float_max print_float float_flush integer_stackdepth tag_float_856 float_add integer_dup_times in2 float_cos float_add integer_dup_times in2 float_cos float_dup_times float_min print_float tagged_465 integer_fromfloat print_float integer_stackdepth float_flush float_pop integer_shove float_swap in2 52 float_shove float_stackdepth float_sin float_flush integer_mult float_dup integer_pop integer_yankdup -13 integer_dup integer_rot float_pop integer_dup integer_mod float_swap)
Errors: [53.0 12 60.0 1 72.0 12 68.0 3 86.0 3 79.0 2 45.0 2 31.0 3 55.0 2 54.0 2 19.0 2 11.0 3 11.0 2 25.0 2 62.0 2 38.0 3 2.0 1 6.0 2 1.0 1 34.0 3 48.0 12 24.0 2 66.0 2 92.0 3 21.0 2]
Total: 1147.0
Mean: 22.94
Genome size: 81
Size: 82
Percent parens: 0.012
--- Population Statistics ---
Average total errors in population: 2468.0753589000024
Median total errors in population: 1165.0
Error averages by case: (106.01161750000003 12.965 97.99712100000005 2.9 118.90594599999994 12.078 123.98790070000004 3.563 140.19325959999998 3.782 125.39081220000003 2.845 101.35633069999997 2.841 82.9901197 3.131 108.15718030000004 2.922 102.05894030000002 2.822 75.68394620000002 2.883 65.6094922 3.862 61.638246400000014 2.871 80.5142993 2.865 117.22557530000003 3.775 90.7825312 3.881 56.313256700000004 1.669 41.59546920000001 1.869 61.28700080000002 1.922 92.17688589999996 3.76 93.68702900000005 11.464 82.5284458 3.826 117.92572849999999 2.867 146.6152259 3.82 73.44399850000002 2.816)
Error minima by case: (0.0473 8 55.0 1 9.6659 8 68.0 2 86.0 2 9.7668 2 45.0 1 26.0 2 9.1906 1 0.3133 1 19.0 1 6.0 2 11.0 2 2.3001 1 62.0 2 33.0 2 0.0 0 0.2658 1 1.0 1 34.0 3 26.0102 9 24.0 2 0.2092 1 92.0 2 16.0 1)
Average genome size in population (length): 51.698
Average program size in population (points): 52.698
Average percent parens in population: 0.022
Minimum age in population: 14.21875
Maximum age in population: 18.9775390625
Average age in population: 16.755546875
Median age in population: 16.7978515625
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 38
Genome diversity (% unique Plush genomes):	 0.759
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 38
Syntactic diversity (% unique Push programs):	 0.759
Total error diversity:				 0.048
Error (vector) diversity:			 0.049
Behavioral diversity:				 0.05
--- Run Statistics ---
Number of program evaluations used so far: 12000
Number of point (instruction) evaluations so far: 13618459
--- Timings ---
Current time: 1529614893389 milliseconds
Total Time:          38.2 seconds
Initialization:       0.1 seconds,  0.3%
Reproduction:        15.3 seconds, 40.1%
Fitness Testing:     17.8 seconds, 46.7%
Report:               4.9 seconds, 12.9%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 11
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 12
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 12
;;******************************
;; -*- Number IO problem report - generation 12
Test total error for best: 55553.0
Test mean error for best: 27.77650
;;------------------------------
Outputs of best individual on training cases:
Correct output: 1.9526623133   | Program output: -51.0473376867
Correct output: -70.8009773522 | Program output: -10.8009773522
Correct output: -13.7839009431 | Program output: 58.2160990569 
Correct output: 143.8727406396 | Program output: 75.8727406396 
Correct output: 136.4396027174 | Program output: 50.4396027174 
Correct output: 18.5044280613  | Program output: 97.5044280613 
Correct output: 92.0568646792  | Program output: 47.0568646792 
Correct output: 71.8873476205  | Program output: 102.8873476205
Correct output: -10.8388749243 | Program output: -65.8388749243
Correct output: 0.9299825981   | Program output: 54.9299825981 
Correct output: -26.7840412284 | Program output: -45.7840412284
Correct output: -102.1264221267 | Program output: -91.1264221267
Correct output: 40.8061668642  | Program output: 29.8061668642 
Correct output: -5.2544966331  | Program output: -30.2544966331
Correct output: 102.9855886244 | Program output: 40.9855886244 
Correct output: -118.0507723766 | Program output: -80.0507723766
Correct output: 55.9371769928  | Program output: 57.9371769928 
Correct output: 4.2657989984   | Program output: 10.2657989984 
Correct output: 96.7057987603  | Program output: 95.7057987603 
Correct output: 122.162446611  | Program output: 88.162446611  
Correct output: 30.0102027945  | Program output: -17.9897972055
Correct output: 104.5822387035 | Program output: 80.5822387035 
Correct output: -1.5538743366  | Program output: -67.5538743366
Correct output: 166.8070496115 | Program output: 74.8070496115 
Correct output: 58.6188945281  | Program output: 79.6188945281 
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction in1} {:instruction integer_max} {:instruction float_add} {:instruction integer_sub} {:instruction integer_max} {:instruction float_dup_items} {:instruction float_div} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_inc} {:instruction integer_sub} {:instruction integer_mod} {:instruction integer_div} {:instruction float_mult} {:instruction float_dup_items} {:instruction float_div} {:instruction float_inc} {:instruction integer_dup_items} {:instruction integer_sub} {:instruction integer_mod} {:instruction integer_div} {:instruction float_mult} {:instruction float_dup_items} {:instruction float_div} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_inc} {:instruction float_yankdup} {:instruction print_float} {:instruction float_mod} {:instruction integer_yankdup} {:instruction integer_shove} {:instruction float_cos} {:instruction integer_pop} {:instruction integer_stackdepth} {:instruction integer_max} {:instruction integer_stackdepth} {:instruction float_div} {:instruction float_max} {:instruction print_float} {:instruction float_flush} {:instruction integer_stackdepth} {:instruction tag_float_856} {:instruction float_add} {:instruction integer_dup_times} {:instruction in2})
Best program: (in1 integer_max float_add integer_sub integer_max float_dup_items float_div float_inc float_yankdup float_inc integer_sub integer_mod integer_div float_mult float_dup_items float_div float_inc integer_dup_items integer_sub integer_mod integer_div float_mult float_dup_items float_div float_inc float_yankdup float_inc float_yankdup print_float float_mod integer_yankdup integer_shove float_cos integer_pop integer_stackdepth integer_max integer_stackdepth float_div float_max print_float float_flush integer_stackdepth tag_float_856 float_add integer_dup_times in2)
Errors: [53.0 12 60.0 1 72.0 12 68.0 3 86.0 3 79.0 2 45.0 2 31.0 3 55.0 2 54.0 2 19.0 2 11.0 3 11.0 2 25.0 2 62.0 2 38.0 3 2.0 1 6.0 2 1.0 1 34.0 3 48.0 12 24.0 2 66.0 2 92.0 3 21.0 2]
Total: 1147.0
Mean: 22.94
Genome size: 46
Size: 47
Percent parens: 0.021
--- Population Statistics ---
Average total errors in population: 2404.372473600002
Median total errors in population: 1158.0
Error averages by case: (103.56627830000002 12.888 98.1757436 2.82 116.88059389999997 12.055 120.42081600000002 3.052 136.7196064 3.744 123.3988743 2.797 97.75922530000001 2.795 80.6471402 3.447 105.70053200000002 2.873 99.97641600000001 2.777 73.03507080000001 2.715 64.16188970000002 3.708 58.73769800000001 2.82 77.94665250000003 2.815 113.69017410000002 3.706 89.41234699999998 3.707 53.912796199999995 1.282 41.2103896 1.84 57.44778710000001 1.873 88.4910043 3.708 92.21828140000002 11.884 78.82688609999997 3.757 115.5254825 2.832 143.12629230000002 3.761 71.09249600000001 2.636)
Error minima by case: (0.0473 8 55.0 1 3.5407 9 68.0 2 86.0 2 9.7668 2 45.0 1 2.9486 2 10.1293 1 0.1546 1 7.4845 1 6.0 2 11.0 2 3.3001 1 62.0 2 33.0 2 0.0 0 0.2658 1 1.0 1 34.0 3 25.0102 9 24.0 2 0.2092 1 92.0 2 0.8588 1)
Average genome size in population (length): 53.678
Average program size in population (points): 54.678
Average percent parens in population: 0.022
Minimum age in population: 15.646484375
Maximum age in population: 20.150390625
Average age in population: 18.177857421875
Median age in population: 18.206298828125
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 70
Genome diversity (% unique Plush genomes):	 0.715
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 70
Syntactic diversity (% unique Push programs):	 0.715
Total error diversity:				 0.042
Error (vector) diversity:			 0.044
Behavioral diversity:				 0.044
--- Run Statistics ---
Number of program evaluations used so far: 13000
Number of point (instruction) evaluations so far: 14960484
--- Timings ---
Current time: 1529614896588 milliseconds
Total Time:          41.5 seconds
Initialization:       0.1 seconds,  0.3%
Reproduction:        16.6 seconds, 40.0%
Fitness Testing:     19.3 seconds, 46.6%
Report:               5.5 seconds, 13.2%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 12
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 13
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 13
;;******************************
;; -*- Number IO problem report - generation 13
Test total error for best: 55731.0
Test mean error for best: 27.86550
;;------------------------------
Outputs of best individual on training cases:
Correct output: 1.9526623133   | Program output: -49.0473376867
Correct output: -70.8009773522 | Program output: -8.8009773522 
Correct output: -13.7839009431 | Program output: 60.2160990569 
Correct output: 143.8727406396 | Program output: 77.8727406396 
Correct output: 136.4396027174 | Program output: 52.4396027174 
Correct output: 18.5044280613  | Program output: 99.5044280613 
Correct output: 92.0568646792  | Program output: 49.0568646792 
Correct output: 71.8873476205  | Program output: 104.8873476205
Correct output: -10.8388749243 | Program output: -63.8388749243
Correct output: 0.9299825981   | Program output: 56.9299825981 
Correct output: -26.7840412284 | Program output: -43.7840412284
Correct output: -102.1264221267 | Program output: -89.1264221267
Correct output: 40.8061668642  | Program output: 31.8061668642 
Correct output: -5.2544966331  | Program output: -28.2544966331
Correct output: 102.9855886244 | Program output: 42.9855886244 
Correct output: -118.0507723766 | Program output: -78.0507723766
Correct output: 55.9371769928  | Program output: 59.9371769928 
Correct output: 4.2657989984   | Program output: 12.2657989984 
Correct output: 96.7057987603  | Program output: 97.7057987603 
Correct output: 122.162446611  | Program output: 90.162446611  
Correct output: 30.0102027945  | Program output: -15.9897972055
Correct output: 104.5822387035 | Program output: 82.5822387035 
Correct output: -1.5538743366  | Program output: -65.5538743366
Correct output: 166.8070496115 | Program output: 76.8070496115 
Correct output: 58.6188945281  | Program output: 81.6188945281 
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction in1} {:instruction integer_max} {:instruction float_dup_items} {:instruction float_div} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_inc} {:instruction float_dup_items} {:instruction float_div} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_div} {:instruction float_inc} {:instruction float_div} {:instruction float_inc} {:instruction float_yankdup} {:instruction integer_mod} {:instruction integer_div} {:instruction float_mult} {:instruction integer_rot} {:instruction float_div} {:instruction float_inc} {:instruction float_mult} {:instruction float_dup_items} {:instruction float_div} {:instruction float_inc} {:instruction float_yankdup} {:instruction print_float} {:instruction float_mod} {:instruction integer_yankdup} {:instruction integer_shove} {:instruction float_cos} {:instruction float_dec} {:instruction integer_stackdepth} {:instruction integer_max} {:instruction float_max} {:instruction print_float} {:instruction tagged_465} {:instruction integer_fromfloat} {:instruction print_float} {:instruction integer_stackdepth} {:instruction -44} {:instruction float_pop} {:instruction integer_shove} {:instruction float_swap} {:instruction in2} {:instruction 52} {:instruction float_shove})
Best program: (in1 integer_max float_dup_items float_div float_inc float_yankdup float_inc float_dup_items float_div float_inc float_yankdup float_div float_inc float_div float_inc float_yankdup integer_mod integer_div float_mult integer_rot float_div float_inc float_mult float_dup_items float_div float_inc float_yankdup print_float float_mod integer_yankdup integer_shove float_cos float_dec integer_stackdepth integer_max float_max print_float tagged_465 integer_fromfloat print_float integer_stackdepth -44 float_pop integer_shove float_swap in2 52 float_shove)
Errors: [51.0 12 62.0 2 74.0 12 66.0 3 84.0 3 81.0 2 43.0 2 33.0 3 53.0 2 56.0 2 17.0 2 13.0 3 9.0 2 23.0 2 60.0 2 40.0 2 4.0 1 8.0 2 1.0 1 32.0 3 46.0 12 22.0 3 64.0 2 90.0 2 23.0 2]
Total: 1139.0
Mean: 22.78
Genome size: 48
Size: 49
Percent parens: 0.020
--- Population Statistics ---
Average total errors in population: 2851.887301800002
Median total errors in population: 1149.0
Error averages by case: (122.19108390000005 12.813 110.49673020000002 2.906 136.6170997 12.109 137.70379330000003 3.223 153.8336020000001 3.924 143.0556671 2.958 115.73182259999999 2.957 100.7618803 3.369 124.27628530000001 3.064 120.01172890000004 2.965 91.9826883 2.53 84.33972369999998 3.526 74.00092970000003 2.986 96.91626809999998 3.014 131.37707410000002 3.763 108.99005650000001 3.529 72.21918 1.816 52.26709030000001 2.102 76.24867009999998 2.047 106.52587609999999 3.866 105.12558440000005 12.035 97.13531350000002 3.843 134.01910209999997 3.035 159.9135545 3.944 91.3754971 2.447)
Error minima by case: (0.0473 7 44.199 1 12.403 9 2.8727 2 40.5604 2 8.7668 1 2.9431 1 26.0 2 9.1906 1 0.4469 1 17.0 1 6.0 2 9.0 1 4.923 1 26.0144 2 33.0 2 0.0 0 0.7342 1 0.0 0 32.0 3 25.0102 8 22.0 2 1.4005 1 22.193 2 16.0 1)
Average genome size in population (length): 51.98
Average program size in population (points): 52.98
Average percent parens in population: 0.022
Minimum age in population: 16.7734375
Maximum age in population: 21.598388671875
Average age in population: 19.79982495117188
Median age in population: 19.861083984375
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 65
Genome diversity (% unique Plush genomes):	 0.697
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 65
Syntactic diversity (% unique Push programs):	 0.697
Total error diversity:				 0.048
Error (vector) diversity:			 0.049
Behavioral diversity:				 0.05
--- Run Statistics ---
Number of program evaluations used so far: 14000
Number of point (instruction) evaluations so far: 16260109
--- Timings ---
Current time: 1529614899805 milliseconds
Total Time:          44.8 seconds
Initialization:       0.1 seconds,  0.3%
Reproduction:        17.9 seconds, 40.1%
Fitness Testing:     20.8 seconds, 46.5%
Report:               5.9 seconds, 13.1%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 13
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 14
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 14
;;******************************
;; -*- Number IO problem report - generation 14
Test total error for best: 55856.0
Test mean error for best: 27.92800
;;------------------------------
Outputs of best individual on training cases:
Correct output: 1.9526623133   | Program output: -48.0473376867
Correct output: -70.8009773522 | Program output: -7.8009773522 
Correct output: -13.7839009431 | Program output: 61.2160990569 
Correct output: 143.8727406396 | Program output: 78.8727406396 
Correct output: 136.4396027174 | Program output: 53.4396027174 
Correct output: 18.5044280613  | Program output: 100.5044280613
Correct output: 92.0568646792  | Program output: 50.0568646792 
Correct output: 71.8873476205  | Program output: 105.8873476205
Correct output: -10.8388749243 | Program output: -62.8388749243
Correct output: 0.9299825981   | Program output: 57.9299825981 
Correct output: -26.7840412284 | Program output: -42.7840412284
Correct output: -102.1264221267 | Program output: -88.1264221267
Correct output: 40.8061668642  | Program output: 32.8061668642 
Correct output: -5.2544966331  | Program output: -27.2544966331
Correct output: 102.9855886244 | Program output: 43.9855886244 
Correct output: -118.0507723766 | Program output: -77.0507723766
Correct output: 55.9371769928  | Program output: 60.9371769928 
Correct output: 4.2657989984   | Program output: 13.2657989984 
Correct output: 96.7057987603  | Program output: 98.7057987603 
Correct output: 122.162446611  | Program output: 91.162446611  
Correct output: 30.0102027945  | Program output: -14.9897972055
Correct output: 104.5822387035 | Program output: 83.5822387035 
Correct output: -1.5538743366  | Program output: -64.5538743366
Correct output: 166.8070496115 | Program output: 77.8070496115 
Correct output: 58.6188945281  | Program output: 82.6188945281 
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction in1} {:instruction integer_max} {:instruction integer_dup_items} {:instruction integer_sub} {:instruction integer_mod} {:instruction integer_div} {:instruction float_mult} {:instruction float_dup_items} {:instruction float_div} {:instruction float_inc} {:instruction integer_max} {:instruction integer_dup_items} {:instruction integer_sub} {:instruction integer_mod} {:instruction integer_div} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_inc} {:instruction float_yankdup} {:instruction integer_dup_items} {:instruction integer_sub} {:instruction integer_mod} {:instruction integer_div} {:instruction float_mult} {:instruction float_inc} {:instruction float_dup_items} {:instruction float_div} {:instruction float_inc} {:instruction integer_dup_items} {:instruction integer_sub} {:instruction integer_mod} {:instruction integer_div} {:instruction float_mult} {:instruction float_dup_items} {:instruction float_div} {:instruction float_inc} {:instruction float_yankdup} {:instruction integer_mod} {:instruction integer_div} {:instruction float_mult} {:instruction float_dup_items} {:instruction -16} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_inc} {:instruction float_yankdup} {:instruction integer_stackdepth} {:instruction integer_max} {:instruction integer_stackdepth} {:instruction integer_max} {:instruction float_max} {:instruction print_float} {:instruction float_flush} {:instruction integer_stackdepth} {:instruction -44} {:instruction float_pop} {:instruction integer_shove} {:instruction float_mult} {:instruction in2} {:instruction 52} {:instruction float_shove} {:instruction print_float} {:instruction tagged_465} {:instruction integer_dup_times} {:instruction in2} {:instruction float_min} {:instruction float_dup_times} {:instruction in2} {:instruction print_float} {:instruction tagged_465} {:instruction integer_fromfloat} {:instruction float_shove} {:instruction print_float} {:instruction tagged_465} {:instruction integer_fromfloat} {:instruction print_float} {:instruction integer_stackdepth} {:instruction -44} {:instruction float_pop} {:instruction float_swap} {:instruction in2} {:instruction 52} {:instruction float_shove})
Best program: (in1 integer_max integer_dup_items integer_sub integer_mod integer_div float_mult float_dup_items float_div float_inc integer_max integer_dup_items integer_sub integer_mod integer_div float_inc float_yankdup float_inc float_yankdup integer_dup_items integer_sub integer_mod integer_div float_mult float_inc float_dup_items float_div float_inc integer_dup_items integer_sub integer_mod integer_div float_mult float_dup_items float_div float_inc float_yankdup integer_mod integer_div float_mult float_dup_items -16 float_inc float_yankdup float_inc float_yankdup integer_stackdepth integer_max integer_stackdepth integer_max float_max print_float float_flush integer_stackdepth -44 float_pop integer_shove float_mult in2 52 float_shove print_float tagged_465 integer_dup_times in2 float_min float_dup_times in2 print_float tagged_465 integer_fromfloat float_shove print_float tagged_465 integer_fromfloat print_float integer_stackdepth -44 float_pop float_swap in2 52 float_shove)
Errors: [50.0 13 63.0 1 75.0 11 65.0 3 83.0 2 82.0 2 42.0 2 34.0 3 52.0 2 57.0 2 16.0 2 14.0 3 8.0 2 22.0 2 59.0 3 41.0 3 5.0 2 9.0 2 2.0 1 31.0 3 45.0 12 21.0 3 63.0 2 89.0 3 24.0 2]
Total: 1138.0
Mean: 22.76
Genome size: 83
Size: 84
Percent parens: 0.012
--- Population Statistics ---
Average total errors in population: 2406.538170500001
Median total errors in population: 1147.0
Error averages by case: (101.00046499999999 12.457 103.95620560000003 2.461 119.23572829999998 12.088 118.26381710000004 3.495 134.50972070000003 3.822 125.73403630000001 2.79 95.49664399999996 2.856 83.50367229999999 3.45 103.17553920000006 2.933 102.37707550000002 2.824 70.70932020000001 2.585 67.1399027 3.503 58.72578070000001 2.798 75.50985150000001 2.884 111.429481 3.336 92.25779449999999 3.535 54.4896436 1.946 47.80544060000002 2.405 55.60642540000001 1.877 86.47145529999999 3.792 92.02117650000004 12.035 76.75092670000002 3.389 112.9513182 2.892 141.01326060000002 3.798 73.931489 2.521)
Error minima by case: (0.0164 8 16.6125 1 3.5407 8 2.8727 2 40.5604 2 7.7668 1 2.9431 2 27.0 2 9.1906 2 0.0235 1 16.0 1 7.0 2 8.0 1 3.9899 2 26.0144 2 30.6373 2 0.0 0 0.1165 1 0.0 0 31.0 3 22.0102 7 21.0 2 0.6855 1 22.193 2 17.0 1)
Average genome size in population (length): 56.64
Average program size in population (points): 57.64
Average percent parens in population: 0.020
Minimum age in population: 18.657958984375
Maximum age in population: 23.007080078125
Average age in population: 21.37291979980469
Median age in population: 21.43701171875
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 35
Genome diversity (% unique Plush genomes):	 0.705
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 35
Syntactic diversity (% unique Push programs):	 0.705
Total error diversity:				 0.059
Error (vector) diversity:			 0.061
Behavioral diversity:				 0.062
--- Run Statistics ---
Number of program evaluations used so far: 15000
Number of point (instruction) evaluations so far: 17676334
--- Timings ---
Current time: 1529614903313 milliseconds
Total Time:          48.1 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        19.3 seconds, 40.1%
Fitness Testing:     22.4 seconds, 46.6%
Report:               6.3 seconds, 13.0%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 14
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 15
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 15
;;******************************
;; -*- Number IO problem report - generation 15
Test total error for best: 56251.0
Test mean error for best: 28.12550
;;------------------------------
Outputs of best individual on training cases:
Correct output: 1.9526623133   | Program output: -45.0473376867
Correct output: -70.8009773522 | Program output: -4.8009773522 
Correct output: -13.7839009431 | Program output: 64.2160990569 
Correct output: 143.8727406396 | Program output: 81.8727406396 
Correct output: 136.4396027174 | Program output: 56.4396027174 
Correct output: 18.5044280613  | Program output: 103.5044280613
Correct output: 92.0568646792  | Program output: 53.0568646792 
Correct output: 71.8873476205  | Program output: 108.8873476205
Correct output: -10.8388749243 | Program output: -59.8388749243
Correct output: 0.9299825981   | Program output: 60.9299825981 
Correct output: -26.7840412284 | Program output: -39.7840412284
Correct output: -102.1264221267 | Program output: -85.1264221267
Correct output: 40.8061668642  | Program output: 35.8061668642 
Correct output: -5.2544966331  | Program output: -24.2544966331
Correct output: 102.9855886244 | Program output: 46.9855886244 
Correct output: -118.0507723766 | Program output: -74.0507723766
Correct output: 55.9371769928  | Program output: 63.9371769928 
Correct output: 4.2657989984   | Program output: 16.2657989984 
Correct output: 96.7057987603  | Program output: 101.7057987603
Correct output: 122.162446611  | Program output: 94.162446611  
Correct output: 30.0102027945  | Program output: -11.9897972055
Correct output: 104.5822387035 | Program output: 86.5822387035 
Correct output: -1.5538743366  | Program output: -61.5538743366
Correct output: 166.8070496115 | Program output: 80.8070496115 
Correct output: 58.6188945281  | Program output: 85.6188945281 
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction in1} {:instruction float_max} {:instruction integer_dup_items} {:instruction integer_sub} {:instruction integer_mod} {:instruction integer_div} {:instruction float_div} {:instruction float_inc} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_div} {:instruction float_inc} {:instruction float_inc} {:instruction float_dup_items} {:instruction float_div} {:instruction float_inc} {:instruction float_div} {:instruction float_inc} {:instruction float_rot} {:instruction float_mult} {:instruction float_dup_items} {:instruction float_div} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_rot} {:instruction -4} {:instruction integer_yank} {:instruction integer_shove} {:instruction integer_stackdepth} {:instruction integer_sub} {:instruction float_inc} {:instruction integer_flush} {:instruction float_dup_items} {:instruction float_div} {:instruction float_inc} {:instruction float_yankdup} {:instruction print_float} {:instruction float_mod} {:instruction integer_yankdup} {:instruction integer_shove} {:instruction float_cos} {:instruction float_dec} {:instruction integer_stackdepth} {:instruction integer_max} {:instruction float_max} {:instruction print_float} {:instruction float_flush} {:instruction integer_stackdepth} {:instruction tag_float_856} {:instruction float_add} {:instruction integer_fromfloat} {:instruction print_float} {:instruction integer_stackdepth} {:instruction -43} {:instruction float_pop} {:instruction integer_shove} {:instruction float_swap} {:instruction in2} {:instruction 52} {:instruction integer_flush} {:instruction float_stackdepth} {:instruction float_sin} {:instruction float_flush} {:instruction integer_mult} {:instruction float_dup} {:instruction integer_pop} {:instruction integer_yankdup} {:instruction -13} {:instruction integer_dup} {:instruction integer_rot} {:instruction float_pop} {:instruction integer_dup} {:instruction integer_mod} {:instruction float_swap} {:instruction float_tan} {:instruction integer_dup_times} {:instruction float_swap} {:instruction float_sub} {:instruction float_rot} {:instruction integer_dec} {:instruction integer_yankdup})
Best program: (in1 float_max integer_dup_items integer_sub integer_mod integer_div float_div float_inc float_inc float_yankdup float_div float_inc float_inc float_dup_items float_div float_inc float_div float_inc float_rot float_mult float_dup_items float_div float_inc float_inc float_inc float_rot -4 integer_yank integer_shove integer_stackdepth integer_sub float_inc integer_flush float_dup_items float_div float_inc float_yankdup print_float float_mod integer_yankdup integer_shove float_cos float_dec integer_stackdepth integer_max float_max print_float float_flush integer_stackdepth tag_float_856 float_add integer_fromfloat print_float integer_stackdepth -43 float_pop integer_shove float_swap in2 52 integer_flush float_stackdepth float_sin float_flush integer_mult float_dup integer_pop integer_yankdup -13 integer_dup integer_rot float_pop integer_dup integer_mod float_swap float_tan integer_dup_times float_swap float_sub float_rot integer_dec integer_yankdup)
Errors: [47.0 13 66.0 2 78.0 12 62.0 3 80.0 2 85.0 2 39.0 2 37.0 3 49.0 2 60.0 1 13.0 2 17.0 3 5.0 2 19.0 2 56.0 3 44.0 3 8.0 2 12.0 2 5.0 3 28.0 3 42.0 12 18.0 3 60.0 1 86.0 3 27.0 2]
Total: 1131.0
Mean: 22.62
Genome size: 82
Size: 83
Percent parens: 0.012
--- Population Statistics ---
Average total errors in population: 2645.1079663000014
Median total errors in population: 1147.0
Error averages by case: (110.18741760000005 12.343 110.12697400000008 2.606 127.63898409999996 12.062 128.38541520000007 3.951 144.27172970000007 3.953 133.9790087 2.76 105.68965369999998 3.022 93.18668059999999 3.856 112.42313220000004 3.114 110.92631370000004 2.943 80.65822330000002 3.059 76.51325869999998 3.777 68.4582 2.792 85.20219059999995 3.063 121.39867179999997 3.388 101.36736559999996 3.79 66.9809124 2.15 54.0360633 2.83 67.07580850000001 1.898 97.06609250000001 3.944 99.41867670000006 12.055 87.39889340000006 3.595 121.96545489999998 3.056 150.80223099999998 3.807 83.20661410000002 2.93)
Error minima by case: (0.0473 8 45.199 1 11.8942 9 3.8727 2 39.5604 2 9.5044 1 1.9431 2 27.0 2 8.8479 2 0.0674 1 13.0 1 7.0 2 5.0 1 3.6976 2 25.0144 2 34.0 2 0.0 0 0.2658 1 0.0 0 28.0 2 21.0102 8 18.0 2 0.2824 1 21.193 2 17.0 1)
Average genome size in population (length): 61.771
Average program size in population (points): 62.771
Average percent parens in population: 0.017
Minimum age in population: 20.336669921875
Maximum age in population: 24.59881591796875
Average age in population: 22.82109240722656
Median age in population: 22.86038208007812
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 15
Genome diversity (% unique Plush genomes):	 0.758
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 15
Syntactic diversity (% unique Push programs):	 0.758
Total error diversity:				 0.065
Error (vector) diversity:			 0.067
Behavioral diversity:				 0.067
--- Run Statistics ---
Number of program evaluations used so far: 16000
Number of point (instruction) evaluations so far: 19220709
--- Timings ---
Current time: 1529614906840 milliseconds
Total Time:          51.7 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        20.6 seconds, 39.9%
Fitness Testing:     24.1 seconds, 46.7%
Report:               6.8 seconds, 13.2%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 15
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 16
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 16
;;******************************
;; -*- Number IO problem report - generation 16
Test total error for best: 56376.0
Test mean error for best: 28.18800
;;------------------------------
Outputs of best individual on training cases:
Correct output: 1.9526623133   | Program output: -44.0473376867
Correct output: -70.8009773522 | Program output: -3.8009773522 
Correct output: -13.7839009431 | Program output: 65.2160990569 
Correct output: 143.8727406396 | Program output: 82.8727406396 
Correct output: 136.4396027174 | Program output: 57.4396027174 
Correct output: 18.5044280613  | Program output: 104.5044280613
Correct output: 92.0568646792  | Program output: 54.0568646792 
Correct output: 71.8873476205  | Program output: 109.8873476205
Correct output: -10.8388749243 | Program output: -58.8388749243
Correct output: 0.9299825981   | Program output: 61.9299825981 
Correct output: -26.7840412284 | Program output: -38.7840412284
Correct output: -102.1264221267 | Program output: -84.1264221267
Correct output: 40.8061668642  | Program output: 36.8061668642 
Correct output: -5.2544966331  | Program output: -23.2544966331
Correct output: 102.9855886244 | Program output: 47.9855886244 
Correct output: -118.0507723766 | Program output: -73.0507723766
Correct output: 55.9371769928  | Program output: 64.9371769928 
Correct output: 4.2657989984   | Program output: 17.2657989984 
Correct output: 96.7057987603  | Program output: 102.7057987603
Correct output: 122.162446611  | Program output: 95.162446611  
Correct output: 30.0102027945  | Program output: -10.9897972055
Correct output: 104.5822387035 | Program output: 87.5822387035 
Correct output: -1.5538743366  | Program output: -60.5538743366
Correct output: 166.8070496115 | Program output: 81.8070496115 
Correct output: 58.6188945281  | Program output: 86.6188945281 
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction in1} {:instruction float_max} {:instruction integer_dup_items} {:instruction integer_sub} {:instruction integer_mod} {:instruction integer_div} {:instruction float_div} {:instruction float_inc} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_div} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_inc} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_div} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_yankdup} {:instruction float_div} {:instruction float_inc} {:instruction float_div} {:instruction float_inc} {:instruction float_yankdup} {:instruction integer_mod} {:instruction integer_div} {:instruction float_mult} {:instruction integer_rot} {:instruction float_div} {:instruction float_inc} {:instruction float_mult} {:instruction float_dup_items} {:instruction float_div} {:instruction float_inc} {:instruction float_yankdup} {:instruction integer_max} {:instruction float_max} {:instruction print_float} {:instruction integer_inc} {:instruction integer_stackdepth} {:instruction tag_float_856} {:instruction float_add} {:instruction integer_dup_times} {:instruction in2} {:instruction float_cos} {:instruction float_add} {:instruction integer_dup_times} {:instruction in2} {:instruction float_cos} {:instruction float_dup_times} {:instruction float_min} {:instruction print_float} {:instruction tagged_465} {:instruction integer_fromfloat} {:instruction float_tan} {:instruction integer_stackdepth} {:instruction float_flush} {:instruction float_pop} {:instruction integer_shove} {:instruction float_swap} {:instruction in2} {:instruction 52} {:instruction float_shove} {:instruction float_stackdepth} {:instruction float_sin} {:instruction float_flush} {:instruction integer_mult} {:instruction float_dup} {:instruction integer_pop} {:instruction integer_yankdup} {:instruction -13} {:instruction integer_dup} {:instruction integer_rot} {:instruction float_pop} {:instruction integer_dup})
Best program: (in1 float_max integer_dup_items integer_sub integer_mod integer_div float_div float_inc float_inc float_yankdup float_div float_inc float_yankdup float_inc float_yankdup float_inc float_yankdup float_inc float_inc float_yankdup float_div float_inc float_yankdup float_yankdup float_div float_inc float_div float_inc float_yankdup integer_mod integer_div float_mult integer_rot float_div float_inc float_mult float_dup_items float_div float_inc float_yankdup integer_max float_max print_float integer_inc integer_stackdepth tag_float_856 float_add integer_dup_times in2 float_cos float_add integer_dup_times in2 float_cos float_dup_times float_min print_float tagged_465 integer_fromfloat float_tan integer_stackdepth float_flush float_pop integer_shove float_swap in2 52 float_shove float_stackdepth float_sin float_flush integer_mult float_dup integer_pop integer_yankdup -13 integer_dup integer_rot float_pop integer_dup)
Errors: [46.0 13 67.0 2 79.0 12 61.0 3 79.0 3 86.0 2 38.0 2 38.0 3 48.0 2 61.0 2 12.0 2 18.0 3 4.0 2 18.0 2 55.0 3 45.0 3 9.0 2 13.0 2 6.0 3 27.0 3 41.0 11 17.0 3 59.0 2 85.0 3 28.0 2]
Total: 1130.0
Mean: 22.6
Genome size: 80
Size: 81
Percent parens: 0.012
--- Population Statistics ---
Average total errors in population: 2647.1147760000013
Median total errors in population: 1139.0
Error averages by case: (108.5647813 12.456 110.84962940000003 2.927 127.98555899999998 11.909 128.27372060000005 4.079 143.94179250000002 3.946 134.19764229999998 2.895 105.3888182 3.107 93.59334399999997 3.92 110.83277660000003 3.2 111.29268809999998 2.979 79.48571319999998 3.174 77.27542860000003 3.887 69.41364609999998 2.941 83.2779498 3.138 120.9084447 3.596 102.13752290000001 3.606 68.0988827 2.417 57.21338689999999 2.897 68.40296060000001 2.086 96.9461488 4.009 97.85785810000002 12.053 87.24203749999998 4.009 120.19672950000003 3.118 150.64599649999994 3.661 84.05931810000001 3.022)
Error minima by case: (0.0776 7 56.0 1 11.8942 9 61.0 2 79.0 2 5.7668 1 38.0 1 27.0 2 8.8479 1 0.2036 1 12.0 1 7.0 2 4.0 1 3.2547 1 55.0 2 34.0 2 0.0 0 0.1075 1 0.0 0 27.0 2 17.9149 7 17.0 2 0.0052 1 85.0 2 17.0 1)
Average genome size in population (length): 64.785
Average program size in population (points): 65.785
Average percent parens in population: 0.016
Minimum age in population: 21.6337890625
Maximum age in population: 26.14306640625
Average age in population: 24.29934039306641
Median age in population: 24.31527709960938
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 19
Genome diversity (% unique Plush genomes):	 0.793
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 19
Syntactic diversity (% unique Push programs):	 0.793
Total error diversity:				 0.074
Error (vector) diversity:			 0.077
Behavioral diversity:				 0.079
--- Run Statistics ---
Number of program evaluations used so far: 17000
Number of point (instruction) evaluations so far: 20840534
--- Timings ---
Current time: 1529614910429 milliseconds
Total Time:          55.2 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        21.9 seconds, 39.8%
Fitness Testing:     25.8 seconds, 46.7%
Report:               7.4 seconds, 13.3%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 16
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 17
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 17
;;******************************
;; -*- Number IO problem report - generation 17
Test total error for best: 56680.0
Test mean error for best: 28.34000
;;------------------------------
Outputs of best individual on training cases:
Correct output: 1.9526623133   | Program output: -42.0473376867
Correct output: -70.8009773522 | Program output: -1.8009773522 
Correct output: -13.7839009431 | Program output: 67.2160990569 
Correct output: 143.8727406396 | Program output: 84.8727406396 
Correct output: 136.4396027174 | Program output: 59.4396027174 
Correct output: 18.5044280613  | Program output: 106.5044280613
Correct output: 92.0568646792  | Program output: 56.0568646792 
Correct output: 71.8873476205  | Program output: 111.8873476205
Correct output: -10.8388749243 | Program output: -56.8388749243
Correct output: 0.9299825981   | Program output: 63.9299825981 
Correct output: -26.7840412284 | Program output: -36.7840412284
Correct output: -102.1264221267 | Program output: -82.1264221267
Correct output: 40.8061668642  | Program output: 38.8061668642 
Correct output: -5.2544966331  | Program output: -21.2544966331
Correct output: 102.9855886244 | Program output: 49.9855886244 
Correct output: -118.0507723766 | Program output: -71.0507723766
Correct output: 55.9371769928  | Program output: 66.9371769928 
Correct output: 4.2657989984   | Program output: 19.2657989984 
Correct output: 96.7057987603  | Program output: 104.7057987603
Correct output: 122.162446611  | Program output: 97.162446611  
Correct output: 30.0102027945  | Program output: -8.9897972055 
Correct output: 104.5822387035 | Program output: 89.5822387035 
Correct output: -1.5538743366  | Program output: -58.5538743366
Correct output: 166.8070496115 | Program output: 83.8070496115 
Correct output: 58.6188945281  | Program output: 88.6188945281 
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction in1} {:instruction integer_max} {:instruction integer_dup_items} {:instruction integer_sub} {:instruction integer_mod} {:instruction integer_div} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_inc} {:instruction integer_mod} {:instruction float_inc} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_div} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_inc} {:instruction float_yankdup} {:instruction integer_sub} {:instruction integer_mod} {:instruction integer_div} {:instruction float_mult} {:instruction float_dup_items} {:instruction float_div} {:instruction float_inc} {:instruction float_yankdup} {:instruction integer_mod} {:instruction integer_div} {:instruction float_mult} {:instruction integer_rot} {:instruction float_div} {:instruction float_inc} {:instruction float_mult} {:instruction float_dup_items} {:instruction float_div} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_dup_items} {:instruction float_div} {:instruction float_inc} {:instruction float_mult} {:instruction integer_max} {:instruction float_div} {:instruction float_inc} {:instruction float_inc} {:instruction float_yank} {:instruction float_inc} {:instruction float_yankdup} {:instruction print_float} {:instruction float_sub} {:instruction integer_yankdup} {:instruction integer_shove} {:instruction float_cos} {:instruction float_dup_items} {:instruction float_div} {:instruction integer_max} {:instruction float_yankdup} {:instruction float_inc} {:instruction float_yankdup} {:instruction integer_stackdepth} {:instruction float_mod} {:instruction integer_yankdup} {:instruction integer_shove} {:instruction float_cos} {:instruction float_dec} {:instruction integer_stackdepth} {:instruction integer_max} {:instruction float_max} {:instruction print_float} {:instruction float_flush} {:instruction float_shove})
Best program: (in1 integer_max integer_dup_items integer_sub integer_mod integer_div float_inc float_yankdup float_inc float_yankdup float_inc integer_mod float_inc float_inc float_yankdup float_div float_inc float_yankdup float_inc float_yankdup integer_sub integer_mod integer_div float_mult float_dup_items float_div float_inc float_yankdup integer_mod integer_div float_mult integer_rot float_div float_inc float_mult float_dup_items float_div float_inc float_yankdup float_dup_items float_div float_inc float_mult integer_max float_div float_inc float_inc float_yank float_inc float_yankdup print_float float_sub integer_yankdup integer_shove float_cos float_dup_items float_div integer_max float_yankdup float_inc float_yankdup integer_stackdepth float_mod integer_yankdup integer_shove float_cos float_dec integer_stackdepth integer_max float_max print_float float_flush float_shove)
Errors: [44.0 13 69.0 2 81.0 12 59.0 2 77.0 3 88.0 2 36.0 2 40.0 2 46.0 2 63.0 2 10.0 1 20.0 2 2.0 2 16.0 2 53.0 3 47.0 2 11.0 2 15.0 2 8.0 3 25.0 3 39.0 11 15.0 3 57.0 2 83.0 3 30.0 1]
Total: 1118.0
Mean: 22.36
Genome size: 73
Size: 74
Percent parens: 0.014
--- Population Statistics ---
Average total errors in population: 2626.910032200001
Median total errors in population: 1138.0
Error averages by case: (107.0174519 12.75 113.21810480000002 2.648 131.04717029999998 11.726 124.94054810000003 3.891 140.99822160000002 3.514 137.2941307 2.898 102.43877400000001 2.862 95.24086630000001 3.824 109.17077430000002 2.96 114.30162979999999 2.801 77.14682470000001 2.994 78.4645589 3.944 66.1331761 2.915 81.69325740000001 2.899 118.1820974 3.713 103.43417949999998 3.794 67.66786350000001 2.724 58.892159500000005 2.614 67.24315120000001 2.304 93.43830260000001 3.622 96.38553560000005 12.035 83.8250657 3.685 118.82514789999999 2.894 147.42205230000002 3.763 85.8019881 2.913)
Error minima by case: (0.0473 7 55.0 1 11.8942 9 59.0 2 59.7691 2 4.7668 1 15.3864 1 4.7831 2 6.7741 1 0.0018 1 10.0 1 6.0 2 2.0 1 0.497 1 26.3151 2 33.0 2 0.0 0 0.0095 1 0.0 0 25.0 2 12.1226 7 15.0 2 0.2824 1 83.0 2 16.0 1)
Average genome size in population (length): 67.708
Average program size in population (points): 68.708
Average percent parens in population: 0.015
Minimum age in population: 23.73980712890625
Maximum age in population: 27.75918579101562
Average age in population: 25.90489378356934
Median age in population: 25.95867919921875
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 14
Genome diversity (% unique Plush genomes):	 0.799
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 14
Syntactic diversity (% unique Push programs):	 0.799
Total error diversity:				 0.073
Error (vector) diversity:			 0.075
Behavioral diversity:				 0.076
--- Run Statistics ---
Number of program evaluations used so far: 18000
Number of point (instruction) evaluations so far: 22533409
--- Timings ---
Current time: 1529614914030 milliseconds
Total Time:          58.9 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        23.3 seconds, 39.6%
Fitness Testing:     27.5 seconds, 46.7%
Report:               7.9 seconds, 13.4%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 17
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 18
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 18
;;******************************
;; -*- Number IO problem report - generation 18
Test total error for best: 56841.0
Test mean error for best: 28.42050
;;------------------------------
Outputs of best individual on training cases:
Correct output: 1.9526623133   | Program output: -41.0473376867
Correct output: -70.8009773522 | Program output: -0.8009773522 
Correct output: -13.7839009431 | Program output: 68.2160990569 
Correct output: 143.8727406396 | Program output: 85.8727406396 
Correct output: 136.4396027174 | Program output: 60.4396027174 
Correct output: 18.5044280613  | Program output: 107.5044280613
Correct output: 92.0568646792  | Program output: 57.0568646792 
Correct output: 71.8873476205  | Program output: 112.8873476205
Correct output: -10.8388749243 | Program output: -55.8388749243
Correct output: 0.9299825981   | Program output: 64.9299825981 
Correct output: -26.7840412284 | Program output: -35.7840412284
Correct output: -102.1264221267 | Program output: -81.1264221267
Correct output: 40.8061668642  | Program output: 39.8061668642 
Correct output: -5.2544966331  | Program output: -20.2544966331
Correct output: 102.9855886244 | Program output: 50.9855886244 
Correct output: -118.0507723766 | Program output: -70.0507723766
Correct output: 55.9371769928  | Program output: 67.9371769928 
Correct output: 4.2657989984   | Program output: 20.2657989984 
Correct output: 96.7057987603  | Program output: 105.7057987603
Correct output: 122.162446611  | Program output: 98.162446611  
Correct output: 30.0102027945  | Program output: -7.9897972055 
Correct output: 104.5822387035 | Program output: 90.5822387035 
Correct output: -1.5538743366  | Program output: -57.5538743366
Correct output: 166.8070496115 | Program output: 84.8070496115 
Correct output: 58.6188945281  | Program output: 89.6188945281 
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction in1} {:instruction float_max} {:instruction integer_dup_items} {:instruction integer_sub} {:instruction integer_mod} {:instruction integer_div} {:instruction float_div} {:instruction float_inc} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_div} {:instruction float_inc} {:instruction float_inc} {:instruction float_dup_items} {:instruction float_div} {:instruction float_inc} {:instruction float_div} {:instruction float_inc} {:instruction float_rot} {:instruction float_mult} {:instruction float_dup_items} {:instruction float_div} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_rot} {:instruction -4} {:instruction integer_yank} {:instruction integer_shove} {:instruction integer_stackdepth} {:instruction integer_sub} {:instruction float_mult} {:instruction integer_rot} {:instruction float_div} {:instruction float_inc} {:instruction float_mult} {:instruction float_dup_items} {:instruction float_div} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_dup_items} {:instruction float_div} {:instruction float_inc} {:instruction float_mult} {:instruction integer_max} {:instruction float_div} {:instruction float_inc} {:instruction float_inc} {:instruction float_yank} {:instruction float_inc} {:instruction float_yankdup} {:instruction print_float} {:instruction float_sub} {:instruction integer_yankdup} {:instruction integer_shove} {:instruction float_cos} {:instruction float_dup_items} {:instruction float_div} {:instruction integer_max} {:instruction float_yankdup} {:instruction float_inc} {:instruction float_yankdup} {:instruction integer_stackdepth} {:instruction float_mod} {:instruction integer_yankdup} {:instruction integer_shove} {:instruction float_cos} {:instruction float_dec} {:instruction integer_stackdepth} {:instruction integer_max} {:instruction float_max} {:instruction print_float} {:instruction float_flush} {:instruction float_shove})
Best program: (in1 float_max integer_dup_items integer_sub integer_mod integer_div float_div float_inc float_inc float_yankdup float_div float_inc float_inc float_dup_items float_div float_inc float_div float_inc float_rot float_mult float_dup_items float_div float_inc float_inc float_inc float_rot -4 integer_yank integer_shove integer_stackdepth integer_sub float_mult integer_rot float_div float_inc float_mult float_dup_items float_div float_inc float_yankdup float_dup_items float_div float_inc float_mult integer_max float_div float_inc float_inc float_yank float_inc float_yankdup print_float float_sub integer_yankdup integer_shove float_cos float_dup_items float_div integer_max float_yankdup float_inc float_yankdup integer_stackdepth float_mod integer_yankdup integer_shove float_cos float_dec integer_stackdepth integer_max float_max print_float float_flush float_shove)
Errors: [43.0 12 70.0 1 82.0 12 58.0 3 76.0 3 89.0 2 35.0 2 41.0 2 45.0 2 64.0 2 9.0 2 21.0 3 1.0 2 15.0 2 52.0 2 48.0 3 12.0 2 16.0 2 9.0 3 24.0 3 38.0 11 14.0 2 56.0 2 82.0 3 31.0 2]
Total: 1116.0
Mean: 22.32
Genome size: 74
Size: 75
Percent parens: 0.013
--- Population Statistics ---
Average total errors in population: 2348.474049900001
Median total errors in population: 1133.0
Error averages by case: (91.19400000000003 12.823 107.08551830000002 3.201 119.67571219999998 11.803 113.31520830000005 4.033 128.5094418 3.799 125.81641550000003 3.062 89.3156842 2.906 86.40436380000003 3.917 93.82847810000004 3.006 102.77866490000002 2.796 62.59034179999999 3.182 70.98374930000001 4.08 54.2225082 3.075 65.66045370000002 2.933 105.00700149999997 4.057 95.8125972 4.075 58.49471679999999 3.052 54.17057660000001 2.793 58.69422170000002 3.423 81.86983440000003 3.82 83.88112030000002 11.837 71.86767769999999 3.832 103.04325860000002 2.868 136.03190329999995 4.068 76.71160170000005 3.068)
Error minima by case: (0.0473 7 0.9813 1 11.919 9 56.0 2 74.0 2 1.7668 1 33.0 1 25.1127 2 8.8479 1 0.255 1 7.0 1 6.1264 2 0.0 0 3.2547 1 50.0 2 33.0508 2 0.0 0 0.4381 1 0.0 0 22.0 2 16.0102 9 12.0 2 0.0031 1 80.0 2 15.3811 1)
Average genome size in population (length): 70.521
Average program size in population (points): 71.521
Average percent parens in population: 0.014
Minimum age in population: 25.20892333984375
Maximum age in population: 29.63127899169922
Average age in population: 27.40676123046875
Median age in population: 27.4466438293457
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 16
Genome diversity (% unique Plush genomes):	 0.788
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 16
Syntactic diversity (% unique Push programs):	 0.788
Total error diversity:				 0.089
Error (vector) diversity:			 0.091
Behavioral diversity:				 0.091
--- Run Statistics ---
Number of program evaluations used so far: 19000
Number of point (instruction) evaluations so far: 24296884
--- Timings ---
Current time: 1529614917646 milliseconds
Total Time:          62.5 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        24.7 seconds, 39.5%
Fitness Testing:     29.3 seconds, 46.9%
Report:               8.4 seconds, 13.5%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 18
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 19
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 19
;;******************************
;; -*- Number IO problem report - generation 19
Test total error for best: 58838.0
Test mean error for best: 29.41900
;;------------------------------
Outputs of best individual on training cases:
Correct output: 1.9526623133   | Program output: -33.0473376867
Correct output: -70.8009773522 | Program output: 7.1990226478  
Correct output: -13.7839009431 | Program output: 76.2160990569 
Correct output: 143.8727406396 | Program output: 93.8727406396 
Correct output: 136.4396027174 | Program output: 68.4396027174 
Correct output: 18.5044280613  | Program output: 115.5044280613
Correct output: 92.0568646792  | Program output: 65.0568646792 
Correct output: 71.8873476205  | Program output: 120.8873476205
Correct output: -10.8388749243 | Program output: -47.8388749243
Correct output: 0.9299825981   | Program output: 72.9299825981 
Correct output: -26.7840412284 | Program output: -27.7840412284
Correct output: -102.1264221267 | Program output: -73.1264221267
Correct output: 40.8061668642  | Program output: 47.8061668642 
Correct output: -5.2544966331  | Program output: -12.2544966331
Correct output: 102.9855886244 | Program output: 58.9855886244 
Correct output: -118.0507723766 | Program output: -62.0507723766
Correct output: 55.9371769928  | Program output: 75.9371769928 
Correct output: 4.2657989984   | Program output: 28.2657989984 
Correct output: 96.7057987603  | Program output: 113.7057987603
Correct output: 122.162446611  | Program output: 106.162446611 
Correct output: 30.0102027945  | Program output: 0.0102027945  
Correct output: 104.5822387035 | Program output: 98.5822387035 
Correct output: -1.5538743366  | Program output: -49.5538743366
Correct output: 166.8070496115 | Program output: 92.8070496115 
Correct output: 58.6188945281  | Program output: 97.6188945281 
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction in1} {:instruction integer_max} {:instruction integer_dup_items} {:instruction integer_sub} {:instruction integer_mod} {:instruction integer_div} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_inc} {:instruction float_div} {:instruction float_inc} {:instruction float_div} {:instruction float_inc} {:instruction float_rot} {:instruction float_inc} {:instruction float_inc} {:instruction float_div} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_inc} {:instruction float_div} {:instruction float_inc} {:instruction float_div} {:instruction float_inc} {:instruction float_rot} {:instruction float_inc} {:instruction float_inc} {:instruction float_div} {:instruction float_inc} {:instruction float_yankdup} {:instruction integer_mod} {:instruction integer_div} {:instruction float_mult} {:instruction float_dup_items} {:instruction float_div} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_inc} {:instruction float_yankdup} {:instruction integer_stackdepth} {:instruction float_inc} {:instruction float_mult} {:instruction float_dup_items} {:instruction float_div} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_dup_items} {:instruction float_div} {:instruction float_inc} {:instruction float_mult} {:instruction integer_max} {:instruction float_div} {:instruction float_inc} {:instruction float_inc} {:instruction float_yank} {:instruction float_inc} {:instruction float_yankdup} {:instruction print_float} {:instruction float_flush} {:instruction integer_stackdepth} {:instruction tag_float_856} {:instruction float_add} {:instruction integer_dup_times} {:instruction in2} {:instruction float_min} {:instruction float_dup_times} {:instruction in2} {:instruction print_float} {:instruction tagged_465} {:instruction integer_fromfloat} {:instruction print_float} {:instruction integer_stackdepth} {:instruction -43} {:instruction float_pop} {:instruction integer_shove} {:instruction float_swap} {:instruction in2} {:instruction 52} {:instruction float_shove})
Best program: (in1 integer_max integer_dup_items integer_sub integer_mod integer_div float_inc float_yankdup float_inc float_yankdup float_inc float_div float_inc float_div float_inc float_rot float_inc float_inc float_div float_inc float_yankdup float_inc float_yankdup float_inc float_div float_inc float_div float_inc float_rot float_inc float_inc float_div float_inc float_yankdup integer_mod integer_div float_mult float_dup_items float_div float_inc float_yankdup float_inc float_yankdup integer_stackdepth float_inc float_mult float_dup_items float_div float_inc float_yankdup float_dup_items float_div float_inc float_mult integer_max float_div float_inc float_inc float_yank float_inc float_yankdup print_float float_flush integer_stackdepth tag_float_856 float_add integer_dup_times in2 float_min float_dup_times in2 print_float tagged_465 integer_fromfloat print_float integer_stackdepth -43 float_pop integer_shove float_swap in2 52 float_shove)
Errors: [35.0 13 78.0 12 90.0 12 50.0 2 68.0 3 97.0 2 27.0 2 49.0 3 37.0 2 72.0 2 1.0 1 29.0 3 7.0 1 7.0 2 44.0 3 56.0 3 20.0 1 24.0 2 17.0 3 16.0 2 30.0 1 6.0 3 48.0 2 74.0 3 39.0 2]
Total: 1106.0
Mean: 22.12
Genome size: 83
Size: 84
Percent parens: 0.012
--- Population Statistics ---
Average total errors in population: 2620.6971757000015
Median total errors in population: 1130.0
Error averages by case: (101.01973270000006 12.749 119.6633022 3.996 130.47328 11.978 122.67399819999999 4.012 137.78744319999996 4.056 136.30406079999997 3.197 99.02814979999992 3.248 98.01954530000002 3.811 102.7363586 3.327 113.92879470000007 2.987 72.57999550000001 3.285 83.30584559999997 4.166 65.23478539999998 3.163 75.5271061 3.259 114.571427 4.194 107.93173969999997 4.189 71.80781219999999 3.126 67.7000991 3.175 72.1173436 4.031 91.57526959999998 4.138 93.79556450000008 11.349 81.65181550000001 4.163 111.62825610000002 3.074 145.160233 4.23 88.40821730000003 3.164)
Error minima by case: (0.0686 7 8.8898 1 1.7407 8 50.0 2 68.0 2 1.6761 1 27.0 1 25.2582 2 1.2259 1 0.805 1 1.0 1 6.0 2 0.0 0 0.7195 1 44.0 2 33.0 2 0.0 0 0.1311 1 0.0 0 16.0 2 13.5516 1 6.0 2 0.0215 1 74.0 2 16.0 1)
Average genome size in population (length): 73.951
Average program size in population (points): 74.951
Average percent parens in population: 0.014
Minimum age in population: 26.625732421875
Maximum age in population: 30.81013488769531
Average age in population: 28.85898595046997
Median age in population: 28.88230323791504
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 22
Genome diversity (% unique Plush genomes):	 0.798
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 22
Syntactic diversity (% unique Push programs):	 0.798
Total error diversity:				 0.095
Error (vector) diversity:			 0.101
Behavioral diversity:				 0.102
--- Run Statistics ---
Number of program evaluations used so far: 20000
Number of point (instruction) evaluations so far: 26145784
--- Timings ---
Current time: 1529614921400 milliseconds
Total Time:          66.2 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        26.0 seconds, 39.3%
Fitness Testing:     31.1 seconds, 47.0%
Report:               8.9 seconds, 13.5%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 19
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 20
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 20
;;******************************
;; -*- Number IO problem report - generation 20
Test total error for best: 59131.0
Test mean error for best: 29.56550
;;------------------------------
Outputs of best individual on training cases:
Correct output: 1.9526623133   | Program output: -32.0473376867
Correct output: -70.8009773522 | Program output: 8.1990226478  
Correct output: -13.7839009431 | Program output: 77.2160990569 
Correct output: 143.8727406396 | Program output: 94.8727406396 
Correct output: 136.4396027174 | Program output: 69.4396027174 
Correct output: 18.5044280613  | Program output: 116.5044280613
Correct output: 92.0568646792  | Program output: 66.0568646792 
Correct output: 71.8873476205  | Program output: 121.8873476205
Correct output: -10.8388749243 | Program output: -46.8388749243
Correct output: 0.9299825981   | Program output: 73.9299825981 
Correct output: -26.7840412284 | Program output: -26.7840412284
Correct output: -102.1264221267 | Program output: -72.1264221267
Correct output: 40.8061668642  | Program output: 48.8061668642 
Correct output: -5.2544966331  | Program output: -11.2544966331
Correct output: 102.9855886244 | Program output: 59.9855886244 
Correct output: -118.0507723766 | Program output: -61.0507723766
Correct output: 55.9371769928  | Program output: 76.9371769928 
Correct output: 4.2657989984   | Program output: 29.2657989984 
Correct output: 96.7057987603  | Program output: 114.7057987603
Correct output: 122.162446611  | Program output: 107.162446611 
Correct output: 30.0102027945  | Program output: 1.0102027945  
Correct output: 104.5822387035 | Program output: 99.5822387035 
Correct output: -1.5538743366  | Program output: -48.5538743366
Correct output: 166.8070496115 | Program output: 93.8070496115 
Correct output: 58.6188945281  | Program output: 98.6188945281 
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction in1} {:instruction integer_max} {:instruction integer_dup_items} {:instruction integer_sub} {:instruction float_sub} {:instruction integer_div} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_inc} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_div} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_dup_items} {:instruction float_div} {:instruction float_inc} {:instruction float_yankdup} {:instruction integer_rot} {:instruction float_yankdup} {:instruction float_inc} {:instruction float_dup_items} {:instruction float_div} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_inc} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_div} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_mult} {:instruction float_dup_items} {:instruction float_div} {:instruction float_inc} {:instruction float_mult} {:instruction float_dup_items} {:instruction float_div} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_inc} {:instruction integer_mod} {:instruction float_inc} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_div} {:instruction integer_flush} {:instruction float_yankdup} {:instruction float_mult} {:instruction float_dup_items} {:instruction float_div} {:instruction float_inc} {:instruction integer_dup_items} {:instruction integer_sub} {:instruction integer_mod} {:instruction integer_div} {:instruction float_mult} {:instruction float_dup_items} {:instruction float_div} {:instruction float_inc} {:instruction float_yankdup} {:instruction print_float} {:instruction float_max} {:instruction integer_yankdup} {:instruction integer_min} {:instruction float_cos} {:instruction float_dec} {:instruction integer_stackdepth} {:instruction integer_max} {:instruction float_max} {:instruction integer_fromfloat} {:instruction print_float} {:instruction integer_stackdepth} {:instruction -44} {:instruction float_pop} {:instruction integer_shove} {:instruction float_swap} {:instruction in2} {:instruction 52} {:instruction float_shove} {:instruction float_stackdepth} {:instruction float_sin} {:instruction float_flush} {:instruction integer_mult} {:instruction float_dup} {:instruction integer_pop} {:instruction integer_yankdup} {:instruction float_shove} {:instruction float_stackdepth} {:instruction float_sin} {:instruction integer_rot} {:instruction float_pop} {:instruction integer_dup} {:instruction integer_mod} {:instruction float_swap})
Best program: (in1 integer_max integer_dup_items integer_sub float_sub integer_div float_inc float_yankdup float_inc float_yankdup float_inc float_inc float_yankdup float_div float_inc float_yankdup float_dup_items float_div float_inc float_yankdup integer_rot float_yankdup float_inc float_dup_items float_div float_inc float_yankdup float_inc float_yankdup float_inc float_inc float_yankdup float_div float_inc float_yankdup float_inc float_yankdup float_inc float_yankdup float_inc float_yankdup float_mult float_dup_items float_div float_inc float_mult float_dup_items float_div float_inc float_yankdup float_inc float_yankdup float_inc float_yankdup float_inc integer_mod float_inc float_inc float_yankdup float_div integer_flush float_yankdup float_mult float_dup_items float_div float_inc integer_dup_items integer_sub integer_mod integer_div float_mult float_dup_items float_div float_inc float_yankdup print_float float_max integer_yankdup integer_min float_cos float_dec integer_stackdepth integer_max float_max integer_fromfloat print_float integer_stackdepth -44 float_pop integer_shove float_swap in2 52 float_shove float_stackdepth float_sin float_flush integer_mult float_dup integer_pop integer_yankdup float_shove float_stackdepth float_sin integer_rot float_pop integer_dup integer_mod float_swap)
Errors: [34.0 13 79.0 13 91.0 12 49.0 2 67.0 3 98.0 2 26.0 2 50.0 2 36.0 2 73.0 2 0.0 0 30.0 2 8.0 1 6.0 2 43.0 3 57.0 2 21.0 2 25.0 2 18.0 3 15.0 2 29.0 2 5.0 3 47.0 2 73.0 3 40.0 1]
Total: 1103.0
Mean: 22.06
Genome size: 109
Size: 110
Percent parens: 0.009
--- Population Statistics ---
Average total errors in population: 2595.2359186000012
Median total errors in population: 1121.0
Error averages by case: (98.35906710000002 12.532 118.46443140000007 5.229 131.46929989999995 12.001 120.57349870000004 3.83 135.64159960000003 4.173 136.8089476 3.169 96.87097659999999 3.276 98.65268540000002 3.392 100.94228370000005 3.365 114.79153990000005 3.163 70.86258610000002 3.133 84.64938409999999 3.977 63.81398089999997 3.002 72.6154882 3.3 112.4000392 3.993 109.28171069999998 3.992 73.33905 3.164 66.53922850000001 3.173 73.69400670000002 4.05 89.47379610000003 4.06 89.08302430000009 11.073 79.5391413 4.032 109.8204089 3.257 142.96549059999998 4.192 89.0442531 3.012)
Error minima by case: (0.072 7 60.0 1 12.0572 7 49.0 2 63.4857 2 2.5044 1 19.1029 1 1.0666 2 8.369 1 0.0652 1 0.0 0 11.0 2 0.0 0 3.9132 1 30.0317 2 38.0 2 2.0 1 0.1105 1 0.0 0 15.0 1 14.0102 1 5.0 2 0.0958 1 73.0 2 7.1305 1)
Average genome size in population (length): 75.323
Average program size in population (points): 76.323
Average percent parens in population: 0.013
Minimum age in population: 28.00236511230469
Maximum age in population: 32.03760719299316
Average age in population: 30.29713829421997
Median age in population: 30.32251644134521
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 20
Genome diversity (% unique Plush genomes):	 0.81
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 20
Syntactic diversity (% unique Push programs):	 0.81
Total error diversity:				 0.095
Error (vector) diversity:			 0.101
Behavioral diversity:				 0.102
--- Run Statistics ---
Number of program evaluations used so far: 21000
Number of point (instruction) evaluations so far: 28028934
--- Timings ---
Current time: 1529614925191 milliseconds
Total Time:          69.9 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        27.4 seconds, 39.1%
Fitness Testing:     32.9 seconds, 47.1%
Report:               9.5 seconds, 13.6%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 20
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 21
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 21
;;******************************
;; -*- Number IO problem report - generation 21
Test total error for best: 59131.0
Test mean error for best: 29.56550
;;------------------------------
Outputs of best individual on training cases:
Correct output: 1.9526623133   | Program output: -32.0473376867
Correct output: -70.8009773522 | Program output: 8.1990226478  
Correct output: -13.7839009431 | Program output: 77.2160990569 
Correct output: 143.8727406396 | Program output: 94.8727406396 
Correct output: 136.4396027174 | Program output: 69.4396027174 
Correct output: 18.5044280613  | Program output: 116.5044280613
Correct output: 92.0568646792  | Program output: 66.0568646792 
Correct output: 71.8873476205  | Program output: 121.8873476205
Correct output: -10.8388749243 | Program output: -46.8388749243
Correct output: 0.9299825981   | Program output: 73.9299825981 
Correct output: -26.7840412284 | Program output: -26.7840412284
Correct output: -102.1264221267 | Program output: -72.1264221267
Correct output: 40.8061668642  | Program output: 48.8061668642 
Correct output: -5.2544966331  | Program output: -11.2544966331
Correct output: 102.9855886244 | Program output: 59.9855886244 
Correct output: -118.0507723766 | Program output: -61.0507723766
Correct output: 55.9371769928  | Program output: 76.9371769928 
Correct output: 4.2657989984   | Program output: 29.2657989984 
Correct output: 96.7057987603  | Program output: 114.7057987603
Correct output: 122.162446611  | Program output: 107.162446611 
Correct output: 30.0102027945  | Program output: 1.0102027945  
Correct output: 104.5822387035 | Program output: 99.5822387035 
Correct output: -1.5538743366  | Program output: -48.5538743366
Correct output: 166.8070496115 | Program output: 93.8070496115 
Correct output: 58.6188945281  | Program output: 98.6188945281 
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction in1} {:instruction integer_max} {:instruction integer_dup_items} {:instruction integer_sub} {:instruction float_sub} {:instruction integer_div} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_inc} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_div} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_dup_items} {:instruction float_div} {:instruction float_inc} {:instruction float_yankdup} {:instruction integer_rot} {:instruction float_yankdup} {:instruction float_inc} {:instruction float_dup_items} {:instruction float_div} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_inc} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_div} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_mult} {:instruction float_dup_items} {:instruction float_div} {:instruction float_inc} {:instruction float_mult} {:instruction float_dup_items} {:instruction float_div} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_inc} {:instruction integer_mod} {:instruction float_inc} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_div} {:instruction integer_flush} {:instruction float_yankdup} {:instruction float_mult} {:instruction float_dup_items} {:instruction float_div} {:instruction float_inc} {:instruction integer_dup_items} {:instruction integer_sub} {:instruction integer_mod} {:instruction integer_div} {:instruction float_mult} {:instruction float_dup_items} {:instruction float_div} {:instruction float_inc} {:instruction float_yankdup} {:instruction print_float} {:instruction float_max} {:instruction integer_yankdup} {:instruction integer_min} {:instruction float_cos} {:instruction float_dec} {:instruction integer_stackdepth} {:instruction integer_max} {:instruction float_max} {:instruction integer_fromfloat} {:instruction print_float} {:instruction integer_stackdepth} {:instruction -44} {:instruction float_pop} {:instruction integer_shove} {:instruction float_swap} {:instruction in2} {:instruction 52} {:instruction float_shove} {:instruction float_stackdepth} {:instruction float_sin} {:instruction float_flush} {:instruction integer_mult} {:instruction float_dup} {:instruction integer_pop} {:instruction integer_yankdup} {:instruction float_shove} {:instruction float_stackdepth} {:instruction float_sin} {:instruction integer_rot} {:instruction float_pop} {:instruction integer_dup} {:instruction integer_mod} {:instruction float_swap})
Best program: (in1 integer_max integer_dup_items integer_sub float_sub integer_div float_inc float_yankdup float_inc float_yankdup float_inc float_inc float_yankdup float_div float_inc float_yankdup float_dup_items float_div float_inc float_yankdup integer_rot float_yankdup float_inc float_dup_items float_div float_inc float_yankdup float_inc float_yankdup float_inc float_inc float_yankdup float_div float_inc float_yankdup float_inc float_yankdup float_inc float_yankdup float_inc float_yankdup float_mult float_dup_items float_div float_inc float_mult float_dup_items float_div float_inc float_yankdup float_inc float_yankdup float_inc float_yankdup float_inc integer_mod float_inc float_inc float_yankdup float_div integer_flush float_yankdup float_mult float_dup_items float_div float_inc integer_dup_items integer_sub integer_mod integer_div float_mult float_dup_items float_div float_inc float_yankdup print_float float_max integer_yankdup integer_min float_cos float_dec integer_stackdepth integer_max float_max integer_fromfloat print_float integer_stackdepth -44 float_pop integer_shove float_swap in2 52 float_shove float_stackdepth float_sin float_flush integer_mult float_dup integer_pop integer_yankdup float_shove float_stackdepth float_sin integer_rot float_pop integer_dup integer_mod float_swap)
Errors: [34.0 13 79.0 13 91.0 12 49.0 2 67.0 3 98.0 2 26.0 2 50.0 2 36.0 2 73.0 2 0.0 0 30.0 2 8.0 1 6.0 2 43.0 3 57.0 2 21.0 2 25.0 2 18.0 3 15.0 2 29.0 2 5.0 3 47.0 2 73.0 3 40.0 1]
Total: 1103.0
Mean: 22.06
Genome size: 109
Size: 110
Percent parens: 0.009
--- Population Statistics ---
Average total errors in population: 2216.460438700001
Median total errors in population: 1118.0
Error averages by case: (82.66481230000004 12.305 103.66667580000002 4.215 119.3992791 12.009 104.62298420000005 3.76 120.0598326 3.994 124.98464890000007 3.029 80.71808050000003 3.071 85.86254720000002 3.155 85.23248830000004 3.144 102.47033590000002 2.997 54.3018645 2.938 71.1326711 3.882 47.9047247 2.875 54.79875430000003 3.074 96.5102719 3.543 96.08909849999998 3.899 58.08350579999999 3.023 54.06853830000001 3.012 58.258104800000055 3.915 73.07702890000003 3.886 71.5398404 10.831 63.020946799999976 3.532 94.39533459999994 3.08 127.43445990000004 4.002 76.09060940000002 2.902)
Error minima by case: (0.0182 8 15.801 1 12.7323 7 21.8727 2 21.5604 2 0.485 1 16.0569 1 1.7488 2 5.899 1 0.0396 1 0.0 0 6.0 2 0.0 0 3.0 1 7.0144 2 28.0508 2 1.0 1 0.2658 1 0.0 0 12.0 1 8.8601 1 2.0 1 0.5887 1 3.193 2 0.2142 1)
Average genome size in population (length): 74.504
Average program size in population (points): 75.504
Average percent parens in population: 0.014
Minimum age in population: 29.34661102294922
Maximum age in population: 33.61966609954834
Average age in population: 31.72769949245453
Median age in population: 31.79581880569458
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 17
Genome diversity (% unique Plush genomes):	 0.786
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 17
Syntactic diversity (% unique Push programs):	 0.786
Total error diversity:				 0.098
Error (vector) diversity:			 0.103
Behavioral diversity:				 0.104
--- Run Statistics ---
Number of program evaluations used so far: 22000
Number of point (instruction) evaluations so far: 29891584
--- Timings ---
Current time: 1529614928966 milliseconds
Total Time:          73.7 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        28.7 seconds, 39.0%
Fitness Testing:     34.8 seconds, 47.2%
Report:              10.1 seconds, 13.7%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 21
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 22
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 22
;;******************************
;; -*- Number IO problem report - generation 22
Test total error for best: 59131.0
Test mean error for best: 29.56550
;;------------------------------
Outputs of best individual on training cases:
Correct output: 1.9526623133   | Program output: -32.0473376867
Correct output: -70.8009773522 | Program output: 8.1990226478  
Correct output: -13.7839009431 | Program output: 77.2160990569 
Correct output: 143.8727406396 | Program output: 94.8727406396 
Correct output: 136.4396027174 | Program output: 69.4396027174 
Correct output: 18.5044280613  | Program output: 116.5044280613
Correct output: 92.0568646792  | Program output: 66.0568646792 
Correct output: 71.8873476205  | Program output: 121.8873476205
Correct output: -10.8388749243 | Program output: -46.8388749243
Correct output: 0.9299825981   | Program output: 73.9299825981 
Correct output: -26.7840412284 | Program output: -26.7840412284
Correct output: -102.1264221267 | Program output: -72.1264221267
Correct output: 40.8061668642  | Program output: 48.8061668642 
Correct output: -5.2544966331  | Program output: -11.2544966331
Correct output: 102.9855886244 | Program output: 59.9855886244 
Correct output: -118.0507723766 | Program output: -61.0507723766
Correct output: 55.9371769928  | Program output: 76.9371769928 
Correct output: 4.2657989984   | Program output: 29.2657989984 
Correct output: 96.7057987603  | Program output: 114.7057987603
Correct output: 122.162446611  | Program output: 107.162446611 
Correct output: 30.0102027945  | Program output: 1.0102027945  
Correct output: 104.5822387035 | Program output: 99.5822387035 
Correct output: -1.5538743366  | Program output: -48.5538743366
Correct output: 166.8070496115 | Program output: 93.8070496115 
Correct output: 58.6188945281  | Program output: 98.6188945281 
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction in1} {:instruction integer_max} {:instruction integer_dup_items} {:instruction integer_sub} {:instruction float_sub} {:instruction integer_div} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_inc} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_div} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_dup_items} {:instruction float_div} {:instruction float_inc} {:instruction float_div} {:instruction integer_rot} {:instruction float_yankdup} {:instruction float_inc} {:instruction float_dup_items} {:instruction float_div} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_inc} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_div} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_mult} {:instruction float_dup_items} {:instruction float_div} {:instruction float_inc} {:instruction float_mult} {:instruction float_dup_items} {:instruction float_div} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_inc} {:instruction integer_mod} {:instruction float_inc} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_div} {:instruction integer_flush} {:instruction float_yankdup} {:instruction float_mult} {:instruction float_dup_items} {:instruction float_div} {:instruction float_inc} {:instruction integer_dup_items} {:instruction integer_sub} {:instruction integer_mod} {:instruction integer_div} {:instruction float_mult} {:instruction float_stackdepth} {:instruction float_div} {:instruction float_inc} {:instruction float_yankdup} {:instruction print_float} {:instruction float_max} {:instruction integer_yankdup} {:instruction integer_min} {:instruction float_cos} {:instruction float_dec} {:instruction integer_stackdepth} {:instruction integer_max} {:instruction float_max} {:instruction integer_fromfloat} {:instruction print_float} {:instruction integer_stackdepth} {:instruction -44} {:instruction float_pop} {:instruction integer_shove} {:instruction float_swap} {:instruction in2} {:instruction 52} {:instruction float_shove} {:instruction float_stackdepth} {:instruction float_sin} {:instruction float_flush} {:instruction integer_mult} {:instruction float_dup} {:instruction integer_pop} {:instruction integer_yankdup} {:instruction float_shove} {:instruction float_stackdepth} {:instruction float_sin} {:instruction integer_rot} {:instruction float_pop} {:instruction integer_dup} {:instruction integer_mod} {:instruction float_swap})
Best program: (in1 integer_max integer_dup_items integer_sub float_sub integer_div float_inc float_yankdup float_inc float_yankdup float_inc float_inc float_yankdup float_div float_inc float_yankdup float_dup_items float_div float_inc float_div integer_rot float_yankdup float_inc float_dup_items float_div float_inc float_yankdup float_inc float_yankdup float_inc float_inc float_yankdup float_div float_inc float_yankdup float_inc float_yankdup float_inc float_yankdup float_inc float_yankdup float_mult float_dup_items float_div float_inc float_mult float_dup_items float_div float_inc float_yankdup float_inc float_yankdup float_inc float_yankdup float_inc integer_mod float_inc float_inc float_yankdup float_div integer_flush float_yankdup float_mult float_dup_items float_div float_inc integer_dup_items integer_sub integer_mod integer_div float_mult float_stackdepth float_div float_inc float_yankdup print_float float_max integer_yankdup integer_min float_cos float_dec integer_stackdepth integer_max float_max integer_fromfloat print_float integer_stackdepth -44 float_pop integer_shove float_swap in2 52 float_shove float_stackdepth float_sin float_flush integer_mult float_dup integer_pop integer_yankdup float_shove float_stackdepth float_sin integer_rot float_pop integer_dup integer_mod float_swap)
Errors: [34.0 13 79.0 13 91.0 12 49.0 2 67.0 3 98.0 2 26.0 2 50.0 2 36.0 2 73.0 2 0.0 0 30.0 2 8.0 1 6.0 2 43.0 3 57.0 2 21.0 2 25.0 2 18.0 3 15.0 2 29.0 2 5.0 3 47.0 2 73.0 3 40.0 1]
Total: 1103.0
Mean: 22.06
Genome size: 109
Size: 110
Percent parens: 0.009
--- Population Statistics ---
Average total errors in population: 2644.1054830000007
Median total errors in population: 1116.0
Error averages by case: (99.41592950000003 12.305 123.57440410000004 4.848 136.28403089999995 12.108 120.06135300000007 3.943 135.53035089999997 4.101 142.024099 3.114 96.87833099999993 3.172 102.65388309999999 3.257 102.24589370000001 3.25 119.57664910000004 3.095 71.0661022 3.06 87.42630709999997 4.113 65.7149889 2.935 73.37608000000002 3.178 112.5921999 3.561 112.15073879999994 4.102 76.15940969999998 3.098 73.26394129999998 3.087 75.87366610000002 3.999 88.86094389999998 3.91 91.17951240000001 10.356 79.0469282 3.557 111.04781019999999 3.176 142.4910329 4.103 93.08189709999999 3.101)
Error minima by case: (0.0177 7 55.0 1 11.8021 8 44.0 2 62.0 2 2.2332 1 21.0 1 26.0 2 8.369 1 0.115 1 0.0 0 6.0 2 0.0 0 1.0 1 38.0 2 33.0 2 3.0 1 0.0518 1 0.0 0 10.0 1 14.0102 1 0.0 0 0.1037 1 68.0 2 16.0 1)
Average genome size in population (length): 76.306
Average program size in population (points): 77.306
Average percent parens in population: 0.013
Minimum age in population: 31.10454559326172
Maximum age in population: 34.94120407104492
Average age in population: 33.13660549497604
Median age in population: 33.14460420608521
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 10
Genome diversity (% unique Plush genomes):	 0.825
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 10
Syntactic diversity (% unique Push programs):	 0.825
Total error diversity:				 0.086
Error (vector) diversity:			 0.093
Behavioral diversity:				 0.095
--- Run Statistics ---
Number of program evaluations used so far: 23000
Number of point (instruction) evaluations so far: 31799309
--- Timings ---
Current time: 1529614932769 milliseconds
Total Time:          77.5 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        30.0 seconds, 38.8%
Fitness Testing:     36.6 seconds, 47.2%
Report:              10.7 seconds, 13.9%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 22
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 23
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 23
;;******************************
;; -*- Number IO problem report - generation 23
Test total error for best: 59131.0
Test mean error for best: 29.56550
;;------------------------------
Outputs of best individual on training cases:
Correct output: 1.9526623133   | Program output: -32.0473376867
Correct output: -70.8009773522 | Program output: 8.1990226478  
Correct output: -13.7839009431 | Program output: 77.2160990569 
Correct output: 143.8727406396 | Program output: 94.8727406396 
Correct output: 136.4396027174 | Program output: 69.4396027174 
Correct output: 18.5044280613  | Program output: 116.5044280613
Correct output: 92.0568646792  | Program output: 66.0568646792 
Correct output: 71.8873476205  | Program output: 121.8873476205
Correct output: -10.8388749243 | Program output: -46.8388749243
Correct output: 0.9299825981   | Program output: 73.9299825981 
Correct output: -26.7840412284 | Program output: -26.7840412284
Correct output: -102.1264221267 | Program output: -72.1264221267
Correct output: 40.8061668642  | Program output: 48.8061668642 
Correct output: -5.2544966331  | Program output: -11.2544966331
Correct output: 102.9855886244 | Program output: 59.9855886244 
Correct output: -118.0507723766 | Program output: -61.0507723766
Correct output: 55.9371769928  | Program output: 76.9371769928 
Correct output: 4.2657989984   | Program output: 29.2657989984 
Correct output: 96.7057987603  | Program output: 114.7057987603
Correct output: 122.162446611  | Program output: 107.162446611 
Correct output: 30.0102027945  | Program output: 1.0102027945  
Correct output: 104.5822387035 | Program output: 99.5822387035 
Correct output: -1.5538743366  | Program output: -48.5538743366
Correct output: 166.8070496115 | Program output: 93.8070496115 
Correct output: 58.6188945281  | Program output: 98.6188945281 
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction in1} {:instruction integer_max} {:instruction integer_dup_items} {:instruction integer_sub} {:instruction integer_mod} {:instruction integer_div} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_inc} {:instruction float_div} {:instruction float_inc} {:instruction float_div} {:instruction float_inc} {:instruction float_rot} {:instruction float_inc} {:instruction float_inc} {:instruction float_div} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_inc} {:instruction float_div} {:instruction float_inc} {:instruction float_div} {:instruction float_inc} {:instruction float_rot} {:instruction float_inc} {:instruction float_inc} {:instruction float_div} {:instruction float_inc} {:instruction float_yankdup} {:instruction integer_mod} {:instruction integer_div} {:instruction float_mult} {:instruction float_dup_items} {:instruction float_div} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_inc} {:instruction float_yankdup} {:instruction integer_stackdepth} {:instruction float_inc} {:instruction float_mult} {:instruction float_dup_items} {:instruction float_div} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_dup_items} {:instruction float_div} {:instruction float_div} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_dup_items} {:instruction float_div} {:instruction float_inc} {:instruction float_mult} {:instruction integer_max} {:instruction float_div} {:instruction float_inc} {:instruction float_inc} {:instruction float_yank} {:instruction float_inc} {:instruction float_yankdup} {:instruction print_float} {:instruction float_flush} {:instruction integer_stackdepth} {:instruction tag_float_856} {:instruction float_add} {:instruction integer_add} {:instruction in2} {:instruction float_min} {:instruction float_dup_times} {:instruction in2} {:instruction print_float} {:instruction tagged_465} {:instruction integer_fromfloat} {:instruction print_float} {:instruction integer_stackdepth} {:instruction -43} {:instruction float_pop} {:instruction integer_shove} {:instruction float_swap} {:instruction in2} {:instruction 52} {:instruction float_shove})
Best program: (in1 integer_max integer_dup_items integer_sub integer_mod integer_div float_inc float_yankdup float_inc float_yankdup float_inc float_div float_inc float_div float_inc float_rot float_inc float_inc float_div float_inc float_yankdup float_inc float_yankdup float_inc float_div float_inc float_div float_inc float_rot float_inc float_inc float_div float_inc float_yankdup integer_mod integer_div float_mult float_dup_items float_div float_inc float_yankdup float_inc float_yankdup integer_stackdepth float_inc float_mult float_dup_items float_div float_inc float_yankdup float_dup_items float_div float_div float_inc float_yankdup float_dup_items float_div float_inc float_mult integer_max float_div float_inc float_inc float_yank float_inc float_yankdup print_float float_flush integer_stackdepth tag_float_856 float_add integer_add in2 float_min float_dup_times in2 print_float tagged_465 integer_fromfloat print_float integer_stackdepth -43 float_pop integer_shove float_swap in2 52 float_shove)
Errors: [34.0 13 79.0 13 91.0 12 49.0 2 67.0 3 98.0 2 26.0 2 50.0 2 36.0 2 73.0 2 0.0 0 30.0 2 8.0 1 6.0 2 43.0 3 57.0 2 21.0 2 25.0 2 18.0 3 15.0 2 29.0 2 5.0 3 47.0 2 73.0 3 40.0 1]
Total: 1103.0
Mean: 22.06
Genome size: 88
Size: 89
Percent parens: 0.011
--- Population Statistics ---
Average total errors in population: 3360.5301587000004
Median total errors in population: 1116.0
Error averages by case: (125.73438120000003 12.332 150.50550520000007 7.913 165.76658170000002 12.075 146.62631620000005 4.252 161.29252350000004 4.475 170.77546629999998 3.523 123.86396079999997 3.554 133.6209473 3.791 128.22215100000005 3.689 149.68114269999998 3.417 99.2589703 3.251 119.94098909999998 4.487 96.89934019999998 3.121 98.82140480000004 3.552 138.8881883 4.141 143.74249139999998 4.502 108.18207699999998 3.433 101.86479089999999 3.428 108.36396000000002 4.356 116.57084630000003 4.01 114.07821190000004 8.301 106.99234120000001 4.021 136.98521939999998 3.558 168.34946970000001 4.512 124.31588230000006 3.493)
Error minima by case: (0.0127 7 55.0 1 12.2781 8 44.0 2 62.0 2 0.8622 1 21.0 1 26.0 2 8.996 1 0.0376 1 0.0 0 6.0 2 0.0 0 1.0 1 38.0 2 33.0 2 1.0 1 0.003 1 0.0 0 10.0 1 6.0102 1 0.0 0 0.133 1 68.0 2 16.0 1)
Average genome size in population (length): 82.057
Average program size in population (points): 83.057
Average percent parens in population: 0.012
Minimum age in population: 32.12515640258789
Maximum age in population: 36.28901982307434
Average age in population: 34.50239202904701
Median age in population: 34.52133047580719
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 18
Genome diversity (% unique Plush genomes):	 0.857
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 18
Syntactic diversity (% unique Push programs):	 0.857
Total error diversity:				 0.092
Error (vector) diversity:			 0.1
Behavioral diversity:				 0.101
--- Run Statistics ---
Number of program evaluations used so far: 24000
Number of point (instruction) evaluations so far: 33850809
--- Timings ---
Current time: 1529614936605 milliseconds
Total Time:          81.4 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        31.4 seconds, 38.6%
Fitness Testing:     38.5 seconds, 47.3%
Report:              11.4 seconds, 14.0%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 23
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 24
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 24
;;******************************
;; -*- Number IO problem report - generation 24
Test total error for best: 59131.0
Test mean error for best: 29.56550
;;------------------------------
Outputs of best individual on training cases:
Correct output: 1.9526623133   | Program output: -32.0473376867
Correct output: -70.8009773522 | Program output: 8.1990226478  
Correct output: -13.7839009431 | Program output: 77.2160990569 
Correct output: 143.8727406396 | Program output: 94.8727406396 
Correct output: 136.4396027174 | Program output: 69.4396027174 
Correct output: 18.5044280613  | Program output: 116.5044280613
Correct output: 92.0568646792  | Program output: 66.0568646792 
Correct output: 71.8873476205  | Program output: 121.8873476205
Correct output: -10.8388749243 | Program output: -46.8388749243
Correct output: 0.9299825981   | Program output: 73.9299825981 
Correct output: -26.7840412284 | Program output: -26.7840412284
Correct output: -102.1264221267 | Program output: -72.1264221267
Correct output: 40.8061668642  | Program output: 48.8061668642 
Correct output: -5.2544966331  | Program output: -11.2544966331
Correct output: 102.9855886244 | Program output: 59.9855886244 
Correct output: -118.0507723766 | Program output: -61.0507723766
Correct output: 55.9371769928  | Program output: 76.9371769928 
Correct output: 4.2657989984   | Program output: 29.2657989984 
Correct output: 96.7057987603  | Program output: 114.7057987603
Correct output: 122.162446611  | Program output: 107.162446611 
Correct output: 30.0102027945  | Program output: 1.0102027945  
Correct output: 104.5822387035 | Program output: 99.5822387035 
Correct output: -1.5538743366  | Program output: -48.5538743366
Correct output: 166.8070496115 | Program output: 93.8070496115 
Correct output: 58.6188945281  | Program output: 98.6188945281 
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction in1} {:instruction integer_max} {:instruction integer_dup_items} {:instruction integer_sub} {:instruction float_sub} {:instruction integer_div} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_inc} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_div} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_dup_items} {:instruction float_div} {:instruction float_inc} {:instruction float_yankdup} {:instruction integer_rot} {:instruction float_yankdup} {:instruction float_inc} {:instruction float_dup_items} {:instruction float_div} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_inc} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_div} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_mult} {:instruction float_dup_items} {:instruction float_div} {:instruction float_inc} {:instruction float_mult} {:instruction float_dup_items} {:instruction float_div} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_inc} {:instruction integer_mod} {:instruction float_inc} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_div} {:instruction integer_flush} {:instruction float_yankdup} {:instruction float_mult} {:instruction float_dup_items} {:instruction float_div} {:instruction float_inc} {:instruction integer_dup_items} {:instruction integer_sub} {:instruction integer_mod} {:instruction integer_div} {:instruction float_mult} {:instruction float_dup_items} {:instruction float_div} {:instruction float_inc} {:instruction float_yankdup} {:instruction print_float} {:instruction float_max} {:instruction integer_yankdup} {:instruction integer_min} {:instruction float_cos} {:instruction float_dec} {:instruction integer_stackdepth} {:instruction integer_max} {:instruction float_max} {:instruction integer_fromfloat} {:instruction print_float} {:instruction integer_stackdepth} {:instruction -44} {:instruction float_pop} {:instruction integer_shove} {:instruction float_swap} {:instruction in2} {:instruction 52})
Best program: (in1 integer_max integer_dup_items integer_sub float_sub integer_div float_inc float_yankdup float_inc float_yankdup float_inc float_inc float_yankdup float_div float_inc float_yankdup float_dup_items float_div float_inc float_yankdup integer_rot float_yankdup float_inc float_dup_items float_div float_inc float_yankdup float_inc float_yankdup float_inc float_inc float_yankdup float_div float_inc float_yankdup float_inc float_yankdup float_inc float_yankdup float_inc float_yankdup float_mult float_dup_items float_div float_inc float_mult float_dup_items float_div float_inc float_yankdup float_inc float_yankdup float_inc float_yankdup float_inc integer_mod float_inc float_inc float_yankdup float_div integer_flush float_yankdup float_mult float_dup_items float_div float_inc integer_dup_items integer_sub integer_mod integer_div float_mult float_dup_items float_div float_inc float_yankdup print_float float_max integer_yankdup integer_min float_cos float_dec integer_stackdepth integer_max float_max integer_fromfloat print_float integer_stackdepth -44 float_pop integer_shove float_swap in2 52)
Errors: [34.0 13 79.0 13 91.0 12 49.0 2 67.0 3 98.0 2 26.0 2 50.0 2 36.0 2 73.0 2 0.0 0 30.0 2 8.0 1 6.0 2 43.0 3 57.0 2 21.0 2 25.0 2 18.0 3 15.0 2 29.0 2 5.0 3 47.0 2 73.0 3 40.0 1]
Total: 1103.0
Mean: 22.06
Genome size: 93
Size: 94
Percent parens: 0.011
--- Population Statistics ---
Average total errors in population: 3351.176037000001
Median total errors in population: 1106.0
Error averages by case: (122.31103029999998 12.642 150.11750100000006 11.794 168.25110420000001 12.064 143.26812270000002 4.145 158.66486600000005 4.553 173.18837949999997 3.566 120.52618849999998 3.643 136.22035520000006 4.054 125.11759530000005 3.787 152.13144240000008 3.516 96.75943609999999 2.843 123.71777409999991 4.414 99.96331160000004 2.959 94.95803930000002 3.563 135.7077134 4.486 147.14900289999997 4.453 112.32811749999998 3.442 104.66851999999997 3.51 112.41786820000003 4.42 114.11283090000003 3.77 107.7345273 5.085 103.90804150000001 4.161 133.4167781 3.668 164.99725509999996 4.592 126.89323590000001 3.517)
Error minima by case: (0.0473 8 55.0 1 12.004 7 8.1273 2 0.5604 2 0.1686 1 18.0 1 2.4791 2 2.3357 1 0.7117 1 0.0 0 6.0 2 0.0 0 0.0 0 13.9856 2 7.0508 2 0.0 0 0.1291 1 1.0 1 7.0 1 1.8601 1 0.0 0 0.1075 1 14.807 2 0.9531 1)
Average genome size in population (length): 94.062
Average program size in population (points): 95.062
Average percent parens in population: 0.011
Minimum age in population: 34.05622482299805
Maximum age in population: 37.64800047874451
Average age in population: 35.94484320616722
Median age in population: 35.98897469043732
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 10
Genome diversity (% unique Plush genomes):	 0.868
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 10
Syntactic diversity (% unique Push programs):	 0.868
Total error diversity:				 0.104
Error (vector) diversity:			 0.115
Behavioral diversity:				 0.117
--- Run Statistics ---
Number of program evaluations used so far: 25000
Number of point (instruction) evaluations so far: 36202584
--- Timings ---
Current time: 1529614940695 milliseconds
Total Time:          85.5 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        32.7 seconds, 38.3%
Fitness Testing:     40.6 seconds, 47.5%
Report:              12.0 seconds, 14.0%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 24
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 25
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 25
;;******************************
;; -*- Number IO problem report - generation 25
Test total error for best: 59131.0
Test mean error for best: 29.56550
;;------------------------------
Outputs of best individual on training cases:
Correct output: 1.9526623133   | Program output: -32.0473376867
Correct output: -70.8009773522 | Program output: 8.1990226478  
Correct output: -13.7839009431 | Program output: 77.2160990569 
Correct output: 143.8727406396 | Program output: 94.8727406396 
Correct output: 136.4396027174 | Program output: 69.4396027174 
Correct output: 18.5044280613  | Program output: 116.5044280613
Correct output: 92.0568646792  | Program output: 66.0568646792 
Correct output: 71.8873476205  | Program output: 121.8873476205
Correct output: -10.8388749243 | Program output: -46.8388749243
Correct output: 0.9299825981   | Program output: 73.9299825981 
Correct output: -26.7840412284 | Program output: -26.7840412284
Correct output: -102.1264221267 | Program output: -72.1264221267
Correct output: 40.8061668642  | Program output: 48.8061668642 
Correct output: -5.2544966331  | Program output: -11.2544966331
Correct output: 102.9855886244 | Program output: 59.9855886244 
Correct output: -118.0507723766 | Program output: -61.0507723766
Correct output: 55.9371769928  | Program output: 76.9371769928 
Correct output: 4.2657989984   | Program output: 29.2657989984 
Correct output: 96.7057987603  | Program output: 114.7057987603
Correct output: 122.162446611  | Program output: 107.162446611 
Correct output: 30.0102027945  | Program output: 1.0102027945  
Correct output: 104.5822387035 | Program output: 99.5822387035 
Correct output: -1.5538743366  | Program output: -48.5538743366
Correct output: 166.8070496115 | Program output: 93.8070496115 
Correct output: 58.6188945281  | Program output: 98.6188945281 
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction in1} {:instruction integer_max} {:instruction integer_dup_items} {:instruction integer_sub} {:instruction float_sub} {:instruction integer_div} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_inc} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_div} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_dup_items} {:instruction float_div} {:instruction float_inc} {:instruction float_yankdup} {:instruction integer_rot} {:instruction float_yankdup} {:instruction float_inc} {:instruction float_dup_items} {:instruction float_div} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_inc} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_div} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_mult} {:instruction float_dup_items} {:instruction float_div} {:instruction float_inc} {:instruction float_mult} {:instruction float_dup_items} {:instruction float_div} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_inc} {:instruction integer_mod} {:instruction float_inc} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_div} {:instruction integer_flush} {:instruction float_yankdup} {:instruction float_mult} {:instruction float_dup_items} {:instruction float_div} {:instruction float_inc} {:instruction integer_dup_items} {:instruction integer_sub} {:instruction integer_mod} {:instruction integer_div} {:instruction float_mult} {:instruction float_dup_items} {:instruction float_div} {:instruction float_inc} {:instruction float_yankdup} {:instruction print_float} {:instruction float_max} {:instruction integer_yankdup} {:instruction integer_min} {:instruction float_cos} {:instruction float_dec} {:instruction integer_stackdepth} {:instruction integer_max} {:instruction float_max} {:instruction float_div} {:instruction print_float} {:instruction integer_stackdepth} {:instruction -44} {:instruction float_dup_times} {:instruction integer_shove} {:instruction float_swap} {:instruction in2} {:instruction 52} {:instruction float_shove} {:instruction float_stackdepth} {:instruction float_sin} {:instruction float_flush} {:instruction integer_mult} {:instruction float_dup} {:instruction integer_pop} {:instruction integer_yankdup} {:instruction float_shove} {:instruction float_stackdepth} {:instruction float_sin} {:instruction integer_rot} {:instruction float_pop} {:instruction integer_dup} {:instruction integer_mod} {:instruction float_swap})
Best program: (in1 integer_max integer_dup_items integer_sub float_sub integer_div float_inc float_yankdup float_inc float_yankdup float_inc float_inc float_yankdup float_div float_inc float_yankdup float_dup_items float_div float_inc float_yankdup integer_rot float_yankdup float_inc float_dup_items float_div float_inc float_yankdup float_inc float_yankdup float_inc float_inc float_yankdup float_div float_inc float_yankdup float_inc float_yankdup float_inc float_yankdup float_inc float_yankdup float_mult float_dup_items float_div float_inc float_mult float_dup_items float_div float_inc float_yankdup float_inc float_yankdup float_inc float_yankdup float_inc integer_mod float_inc float_inc float_yankdup float_div integer_flush float_yankdup float_mult float_dup_items float_div float_inc integer_dup_items integer_sub integer_mod integer_div float_mult float_dup_items float_div float_inc float_yankdup print_float float_max integer_yankdup integer_min float_cos float_dec integer_stackdepth integer_max float_max float_div print_float integer_stackdepth -44 float_dup_times integer_shove float_swap in2 52 float_shove float_stackdepth float_sin float_flush integer_mult float_dup integer_pop integer_yankdup float_shove float_stackdepth float_sin integer_rot float_pop integer_dup integer_mod float_swap)
Errors: [34.0 13 79.0 13 91.0 12 49.0 2 67.0 3 98.0 2 26.0 2 50.0 2 36.0 2 73.0 2 0.0 0 30.0 2 8.0 1 6.0 2 43.0 3 57.0 2 21.0 2 25.0 2 18.0 3 15.0 2 29.0 2 5.0 3 47.0 2 73.0 3 40.0 1]
Total: 1103.0
Mean: 22.06
Genome size: 109
Size: 110
Percent parens: 0.009
--- Population Statistics ---
Average total errors in population: 2932.6156711999997
Median total errors in population: 1106.0
Error averages by case: (103.9363679 12.693 138.55266210000002 12.68 154.31708129999998 12.01 125.78492940000011 3.842 140.5161903 4.377 158.93723109999996 3.364 102.29817529999997 3.457 121.71099240000004 3.753 106.58023860000003 3.602 137.9398409000001 3.321 77.7707855 2.359 108.8745221 4.019 82.8368943 2.681 75.20995320000002 3.38 117.5868417 4.341 132.9713835999999 4.055 94.95703059999998 3.343 91.92593070000001 3.312 95.5281877 4.28 95.23385579999999 3.499 90.58945960000001 4.211 85.42874399999998 4.049 115.33756349999997 3.509 147.91955040000002 4.391 112.22625920000002 3.117)
Error minima by case: (0.0198 7 55.0 1 12.9143 9 41.0 2 59.0 2 0.1378 1 18.0 1 26.0 2 8.6908 1 0.07 1 0.0 0 6.0 2 1.0 1 0.0 0 35.0 2 33.0 2 0.0 0 0.1524 1 2.0 1 7.0 1 2.0537 1 0.0 0 0.2172 1 65.0 2 16.0 1)
Average genome size in population (length): 98.729
Average program size in population (points): 99.729
Average percent parens in population: 0.010
Minimum age in population: 35.22608304023743
Maximum age in population: 39.24810034036636
Average age in population: 37.39057165712118
Median age in population: 37.42769157886505
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 10
Genome diversity (% unique Plush genomes):	 0.903
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 10
Syntactic diversity (% unique Push programs):	 0.903
Total error diversity:				 0.096
Error (vector) diversity:			 0.107
Behavioral diversity:				 0.108
--- Run Statistics ---
Number of program evaluations used so far: 26000
Number of point (instruction) evaluations so far: 38670859
--- Timings ---
Current time: 1529614944877 milliseconds
Total Time:          89.6 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        34.1 seconds, 38.1%
Fitness Testing:     42.8 seconds, 47.8%
Report:              12.6 seconds, 14.0%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 25
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 26
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 26
;;******************************
;; -*- Number IO problem report - generation 26
Test total error for best: 59131.0
Test mean error for best: 29.56550
;;------------------------------
Outputs of best individual on training cases:
Correct output: 1.9526623133   | Program output: -32.0473376867
Correct output: -70.8009773522 | Program output: 8.1990226478  
Correct output: -13.7839009431 | Program output: 77.2160990569 
Correct output: 143.8727406396 | Program output: 94.8727406396 
Correct output: 136.4396027174 | Program output: 69.4396027174 
Correct output: 18.5044280613  | Program output: 116.5044280613
Correct output: 92.0568646792  | Program output: 66.0568646792 
Correct output: 71.8873476205  | Program output: 121.8873476205
Correct output: -10.8388749243 | Program output: -46.8388749243
Correct output: 0.9299825981   | Program output: 73.9299825981 
Correct output: -26.7840412284 | Program output: -26.7840412284
Correct output: -102.1264221267 | Program output: -72.1264221267
Correct output: 40.8061668642  | Program output: 48.8061668642 
Correct output: -5.2544966331  | Program output: -11.2544966331
Correct output: 102.9855886244 | Program output: 59.9855886244 
Correct output: -118.0507723766 | Program output: -61.0507723766
Correct output: 55.9371769928  | Program output: 76.9371769928 
Correct output: 4.2657989984   | Program output: 29.2657989984 
Correct output: 96.7057987603  | Program output: 114.7057987603
Correct output: 122.162446611  | Program output: 107.162446611 
Correct output: 30.0102027945  | Program output: 1.0102027945  
Correct output: 104.5822387035 | Program output: 99.5822387035 
Correct output: -1.5538743366  | Program output: -48.5538743366
Correct output: 166.8070496115 | Program output: 93.8070496115 
Correct output: 58.6188945281  | Program output: 98.6188945281 
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction in1} {:instruction integer_max} {:instruction integer_dup_items} {:instruction integer_sub} {:instruction integer_mod} {:instruction integer_div} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_inc} {:instruction float_div} {:instruction float_inc} {:instruction float_div} {:instruction float_inc} {:instruction float_rot} {:instruction float_inc} {:instruction float_inc} {:instruction float_div} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_div} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_inc} {:instruction float_div} {:instruction float_inc} {:instruction float_div} {:instruction float_inc} {:instruction float_rot} {:instruction float_inc} {:instruction float_inc} {:instruction float_div} {:instruction float_dup_items} {:instruction float_div} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_inc} {:instruction float_yankdup} {:instruction integer_stackdepth} {:instruction float_inc} {:instruction float_mult} {:instruction float_dup_items} {:instruction float_div} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_dup_items} {:instruction float_inc} {:instruction float_inc} {:instruction float_mult} {:instruction integer_max} {:instruction float_div} {:instruction float_inc} {:instruction float_inc} {:instruction float_swap} {:instruction float_inc} {:instruction float_yankdup} {:instruction print_float} {:instruction float_flush} {:instruction integer_stackdepth} {:instruction tag_float_856} {:instruction float_dup_items} {:instruction integer_dup_times} {:instruction float_mult} {:instruction float_min} {:instruction float_dup_times} {:instruction in2} {:instruction print_float} {:instruction tagged_465} {:instruction integer_fromfloat} {:instruction print_float} {:instruction integer_stackdepth} {:instruction -43} {:instruction float_pop} {:instruction integer_shove} {:instruction float_swap} {:instruction in2} {:instruction 52} {:instruction float_shove})
Best program: (in1 integer_max integer_dup_items integer_sub integer_mod integer_div float_inc float_yankdup float_inc float_yankdup float_inc float_div float_inc float_div float_inc float_rot float_inc float_inc float_div float_inc float_yankdup float_div float_inc float_yankdup float_inc float_yankdup float_inc float_div float_inc float_div float_inc float_rot float_inc float_inc float_div float_dup_items float_div float_inc float_yankdup float_inc float_yankdup integer_stackdepth float_inc float_mult float_dup_items float_div float_inc float_yankdup float_dup_items float_inc float_inc float_mult integer_max float_div float_inc float_inc float_swap float_inc float_yankdup print_float float_flush integer_stackdepth tag_float_856 float_dup_items integer_dup_times float_mult float_min float_dup_times in2 print_float tagged_465 integer_fromfloat print_float integer_stackdepth -43 float_pop integer_shove float_swap in2 52 float_shove)
Errors: [34.0 13 79.0 13 91.0 12 49.0 2 67.0 3 98.0 2 26.0 2 50.0 2 36.0 2 73.0 2 0.0 0 30.0 2 8.0 1 6.0 2 43.0 3 57.0 2 21.0 2 25.0 2 18.0 3 15.0 2 29.0 2 5.0 3 47.0 2 73.0 3 40.0 1]
Total: 1103.0
Mean: 22.06
Genome size: 81
Size: 82
Percent parens: 0.012
--- Population Statistics ---
Average total errors in population: 3593.0455078
Median total errors in population: 1104.0
Error averages by case: (130.49406690000006 12.748 162.94801 12.741 177.9933944 12.091 152.32546910000005 4.179 166.35169320000006 4.715 182.24410919999994 3.75 129.37999340000002 3.81 146.86847490000008 4.031 133.26971850000004 4.024 162.05390490000005 3.642 105.54989439999994 2.739 134.964924 4.394 109.51464220000003 3.06 103.0467198 3.791 144.1463419 4.737 158.19525359999994 4.395 121.80984030000003 3.744 117.06374269999996 3.684 122.77072030000006 4.639 122.73939609999995 3.881 117.37451449999995 4.624 113.19781700000001 4.537 141.48428509999997 3.865 173.72733200000002 4.768 137.55024940000004 3.392)
Error minima by case: (0.0473 7 15.801 1 7.7813 8 41.0 2 45.4396 2 0.4541 1 18.0 1 25.4155 2 8.8792 1 0.1724 1 0.0 0 7.0 2 0.0 0 0.0 0 35.0 2 34.0 2 0.0 0 0.2746 1 0.0 0 7.0 1 3.1695 1 0.0 0 0.4135 1 65.0 2 17.0 1)
Average genome size in population (length): 97.537
Average program size in population (points): 98.537
Average percent parens in population: 0.010
Minimum age in population: 36.66726624965668
Maximum age in population: 40.70475775003433
Average age in population: 38.83031965512037
Median age in population: 38.8853926807642
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 6
Genome diversity (% unique Plush genomes):	 0.919
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 6
Syntactic diversity (% unique Push programs):	 0.919
Total error diversity:				 0.109
Error (vector) diversity:			 0.119
Behavioral diversity:				 0.119
--- Run Statistics ---
Number of program evaluations used so far: 27000
Number of point (instruction) evaluations so far: 41109359
--- Timings ---
Current time: 1529614948985 milliseconds
Total Time:          93.8 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        35.4 seconds, 37.8%
Fitness Testing:     45.0 seconds, 48.0%
Report:              13.2 seconds, 14.1%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 26
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 27
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 27
;;******************************
;; -*- Number IO problem report - generation 27
Test total error for best: 59131.0
Test mean error for best: 29.56550
;;------------------------------
Outputs of best individual on training cases:
Correct output: 1.9526623133   | Program output: -32.0473376867
Correct output: -70.8009773522 | Program output: 8.1990226478  
Correct output: -13.7839009431 | Program output: 77.2160990569 
Correct output: 143.8727406396 | Program output: 94.8727406396 
Correct output: 136.4396027174 | Program output: 69.4396027174 
Correct output: 18.5044280613  | Program output: 116.5044280613
Correct output: 92.0568646792  | Program output: 66.0568646792 
Correct output: 71.8873476205  | Program output: 121.8873476205
Correct output: -10.8388749243 | Program output: -46.8388749243
Correct output: 0.9299825981   | Program output: 73.9299825981 
Correct output: -26.7840412284 | Program output: -26.7840412284
Correct output: -102.1264221267 | Program output: -72.1264221267
Correct output: 40.8061668642  | Program output: 48.8061668642 
Correct output: -5.2544966331  | Program output: -11.2544966331
Correct output: 102.9855886244 | Program output: 59.9855886244 
Correct output: -118.0507723766 | Program output: -61.0507723766
Correct output: 55.9371769928  | Program output: 76.9371769928 
Correct output: 4.2657989984   | Program output: 29.2657989984 
Correct output: 96.7057987603  | Program output: 114.7057987603
Correct output: 122.162446611  | Program output: 107.162446611 
Correct output: 30.0102027945  | Program output: 1.0102027945  
Correct output: 104.5822387035 | Program output: 99.5822387035 
Correct output: -1.5538743366  | Program output: -48.5538743366
Correct output: 166.8070496115 | Program output: 93.8070496115 
Correct output: 58.6188945281  | Program output: 98.6188945281 
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction in1} {:instruction integer_max} {:instruction integer_dup_items} {:instruction integer_sub} {:instruction integer_mod} {:instruction integer_div} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_inc} {:instruction float_div} {:instruction float_inc} {:instruction integer_mod} {:instruction integer_div} {:instruction float_min} {:instruction float_yankdup} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_inc} {:instruction integer_mod} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_div} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_inc} {:instruction float_div} {:instruction float_inc} {:instruction float_div} {:instruction float_inc} {:instruction float_rot} {:instruction float_inc} {:instruction float_inc} {:instruction float_div} {:instruction float_inc} {:instruction float_yankdup} {:instruction integer_mod} {:instruction integer_div} {:instruction float_mult} {:instruction float_dup_items} {:instruction float_div} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_inc} {:instruction float_yankdup} {:instruction integer_stackdepth} {:instruction float_inc} {:instruction float_mult} {:instruction float_dup_items} {:instruction float_div} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_dup_items} {:instruction float_sub} {:instruction float_inc} {:instruction float_mult} {:instruction integer_max} {:instruction float_div} {:instruction float_inc} {:instruction float_inc} {:instruction float_yank} {:instruction float_inc} {:instruction float_yankdup} {:instruction print_float} {:instruction float_flush} {:instruction integer_stackdepth} {:instruction tag_float_856} {:instruction float_add} {:instruction integer_flush} {:instruction in2} {:instruction float_min} {:instruction float_dup_times} {:instruction in2} {:instruction print_float} {:instruction tagged_465} {:instruction integer_fromfloat} {:instruction print_float} {:instruction integer_stackdepth} {:instruction -43} {:instruction float_pop} {:instruction float_dup_times} {:instruction integer_shove} {:instruction float_swap} {:instruction in2} {:instruction 52} {:instruction float_shove} {:instruction float_stackdepth} {:instruction float_sin} {:instruction float_flush} {:instruction integer_mult} {:instruction float_dup} {:instruction integer_pop} {:instruction integer_yankdup} {:instruction float_shove} {:instruction float_stackdepth} {:instruction float_sin} {:instruction integer_rot} {:instruction float_pop} {:instruction integer_dup} {:instruction integer_mod} {:instruction float_swap})
Best program: (in1 integer_max integer_dup_items integer_sub integer_mod integer_div float_inc float_yankdup float_inc float_div float_inc integer_mod integer_div float_min float_yankdup float_inc float_yankdup float_inc integer_mod float_inc float_inc float_inc float_div float_inc float_yankdup float_inc float_yankdup float_inc float_div float_inc float_div float_inc float_rot float_inc float_inc float_div float_inc float_yankdup integer_mod integer_div float_mult float_dup_items float_div float_inc float_yankdup float_inc float_yankdup integer_stackdepth float_inc float_mult float_dup_items float_div float_inc float_yankdup float_dup_items float_sub float_inc float_mult integer_max float_div float_inc float_inc float_yank float_inc float_yankdup print_float float_flush integer_stackdepth tag_float_856 float_add integer_flush in2 float_min float_dup_times in2 print_float tagged_465 integer_fromfloat print_float integer_stackdepth -43 float_pop float_dup_times integer_shove float_swap in2 52 float_shove float_stackdepth float_sin float_flush integer_mult float_dup integer_pop integer_yankdup float_shove float_stackdepth float_sin integer_rot float_pop integer_dup integer_mod float_swap)
Errors: [34.0 13 79.0 13 91.0 12 49.0 2 67.0 3 98.0 2 26.0 2 50.0 2 36.0 2 73.0 2 0.0 0 30.0 2 8.0 1 6.0 2 43.0 3 57.0 2 21.0 2 25.0 2 18.0 3 15.0 2 29.0 2 5.0 3 47.0 2 73.0 3 40.0 1]
Total: 1103.0
Mean: 22.06
Genome size: 103
Size: 104
Percent parens: 0.010
--- Population Statistics ---
Average total errors in population: 3129.9413710000003
Median total errors in population: 1104.0
Error averages by case: (111.9715405 12.677 144.82455910000013 12.659 162.1026661999999 12.041 133.65142350000008 3.857 148.2421616 4.475 166.73429460000006 3.539 110.39698920000002 3.523 130.0256222 3.808 114.56961080000008 3.674 145.86245930000004 3.426 85.4987747 2.385 117.40250699999994 4.116 90.80867230000003 2.753 82.11141850000001 3.523 125.50273580000002 4.461 141.31767929999995 4.115 102.62488219999999 3.443 99.7624636 3.426 103.15879999999997 4.379 103.36610910000006 3.573 97.39368039999997 4.32 93.6562781 4.255 123.12770350000002 3.574 155.52050519999997 4.48 120.6948343 3.131)
Error minima by case: (0.0473 7 26.7885 1 12.5393 9 36.9384 1 30.0512 2 0.1378 1 14.2137 1 26.0 2 8.8792 1 5.0E-4 1 0.0 0 6.0 2 0.0 0 0.0 0 3.0237 2 33.0 2 1.0 1 0.1372 1 0.0 0 5.0 1 2.0102 1 0.0 0 0.4135 1 59.888 2 16.0 1)
Average genome size in population (length): 98.608
Average program size in population (points): 99.608
Average percent parens in population: 0.010
Minimum age in population: 37.71973466873169
Maximum age in population: 42.38771139085293
Average age in population: 40.19044330921769
Median age in population: 40.23411919921637
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 4
Genome diversity (% unique Plush genomes):	 0.927
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 4
Syntactic diversity (% unique Push programs):	 0.927
Total error diversity:				 0.108
Error (vector) diversity:			 0.117
Behavioral diversity:				 0.119
--- Run Statistics ---
Number of program evaluations used so far: 28000
Number of point (instruction) evaluations so far: 43574559
--- Timings ---
Current time: 1529614953147 milliseconds
Total Time:          97.9 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        36.8 seconds, 37.6%
Fitness Testing:     47.2 seconds, 48.2%
Report:              13.8 seconds, 14.1%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 27
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 28
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 28
;;******************************
;; -*- Number IO problem report - generation 28
Test total error for best: 59131.0
Test mean error for best: 29.56550
;;------------------------------
Outputs of best individual on training cases:
Correct output: 1.9526623133   | Program output: -32.0473376867
Correct output: -70.8009773522 | Program output: 8.1990226478  
Correct output: -13.7839009431 | Program output: 77.2160990569 
Correct output: 143.8727406396 | Program output: 94.8727406396 
Correct output: 136.4396027174 | Program output: 69.4396027174 
Correct output: 18.5044280613  | Program output: 116.5044280613
Correct output: 92.0568646792  | Program output: 66.0568646792 
Correct output: 71.8873476205  | Program output: 121.8873476205
Correct output: -10.8388749243 | Program output: -46.8388749243
Correct output: 0.9299825981   | Program output: 73.9299825981 
Correct output: -26.7840412284 | Program output: -26.7840412284
Correct output: -102.1264221267 | Program output: -72.1264221267
Correct output: 40.8061668642  | Program output: 48.8061668642 
Correct output: -5.2544966331  | Program output: -11.2544966331
Correct output: 102.9855886244 | Program output: 59.9855886244 
Correct output: -118.0507723766 | Program output: -61.0507723766
Correct output: 55.9371769928  | Program output: 76.9371769928 
Correct output: 4.2657989984   | Program output: 29.2657989984 
Correct output: 96.7057987603  | Program output: 114.7057987603
Correct output: 122.162446611  | Program output: 107.162446611 
Correct output: 30.0102027945  | Program output: 1.0102027945  
Correct output: 104.5822387035 | Program output: 99.5822387035 
Correct output: -1.5538743366  | Program output: -48.5538743366
Correct output: 166.8070496115 | Program output: 93.8070496115 
Correct output: 58.6188945281  | Program output: 98.6188945281 
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction in1} {:instruction integer_max} {:instruction integer_dup_items} {:instruction integer_sub} {:instruction integer_mod} {:instruction integer_div} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_sub} {:instruction integer_div} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_inc} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_div} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_dup_items} {:instruction float_div} {:instruction float_inc} {:instruction float_yankdup} {:instruction integer_rot} {:instruction float_yankdup} {:instruction float_inc} {:instruction float_dup_items} {:instruction float_div} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_inc} {:instruction float_inc} {:instruction float_dup_items} {:instruction float_div} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_mult} {:instruction float_max} {:instruction float_div} {:instruction float_inc} {:instruction float_mult} {:instruction float_dup_items} {:instruction float_div} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_yankdup} {:instruction float_dup_items} {:instruction float_inc} {:instruction float_inc} {:instruction float_mult} {:instruction integer_max} {:instruction float_div} {:instruction float_inc} {:instruction float_inc} {:instruction float_swap} {:instruction float_inc} {:instruction float_yankdup} {:instruction print_float} {:instruction float_flush} {:instruction integer_stackdepth} {:instruction tag_float_856})
Best program: (in1 integer_max integer_dup_items integer_sub integer_mod integer_div float_inc float_yankdup float_sub integer_div float_inc float_yankdup float_inc float_yankdup float_inc float_inc float_yankdup float_div float_inc float_yankdup float_dup_items float_div float_inc float_yankdup integer_rot float_yankdup float_inc float_dup_items float_div float_inc float_yankdup float_inc float_yankdup float_inc float_inc float_dup_items float_div float_inc float_yankdup float_inc float_yankdup float_inc float_yankdup float_inc float_yankdup float_mult float_max float_div float_inc float_mult float_dup_items float_div float_inc float_yankdup float_inc float_yankdup float_yankdup float_dup_items float_inc float_inc float_mult integer_max float_div float_inc float_inc float_swap float_inc float_yankdup print_float float_flush integer_stackdepth tag_float_856)
Errors: [34.0 13 79.0 13 91.0 12 49.0 2 67.0 3 98.0 2 26.0 2 50.0 2 36.0 2 73.0 2 0.0 0 30.0 2 8.0 1 6.0 2 43.0 3 57.0 2 21.0 2 25.0 2 18.0 3 15.0 2 29.0 2 5.0 3 47.0 2 73.0 3 40.0 1]
Total: 1103.0
Mean: 22.06
Genome size: 72
Size: 73
Percent parens: 0.014
--- Population Statistics ---
Average total errors in population: 2943.6187093000003
Median total errors in population: 1104.0
Error averages by case: (105.14779810000005 12.777 139.88991570000002 12.782 154.79607649999994 12.081 125.85803370000008 3.716 140.87312339999997 4.315 159.6954617 3.37 102.73982479999998 3.381 121.65698850000004 3.68 107.67317130000008 3.51 138.34376160000008 3.292 78.16274010000001 2.203 107.90263559999997 3.939 83.64316509999999 2.61 76.25907790000001 3.355 118.0692687 4.318 132.18276089999995 3.936 94.68808929999999 3.27 92.4344002 3.297 95.71128060000001 4.232 95.18028320000002 3.434 94.05680959999998 4.11 85.47042149999999 4.071 116.5577004 3.428 147.97781700000002 4.36 112.20810390000004 2.973)
Error minima by case: (0.0473 8 41.9506 1 12.8358 8 40.0 1 58.0 2 0.5044 1 17.0 1 26.0 2 9.5085 1 0.0376 1 0.0 0 6.0 2 2.0 1 0.0 0 34.0 2 33.0 2 1.0 1 0.016 1 0.0 0 6.0 1 3.7879 1 0.0 0 0.2235 1 64.0 2 16.0 1)
Average genome size in population (length): 98.716
Average program size in population (points): 99.716
Average percent parens in population: 0.010
Minimum age in population: 38.85695099830627
Maximum age in population: 43.76811926811934
Average age in population: 41.47360229660571
Median age in population: 41.52525682374835
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 4
Genome diversity (% unique Plush genomes):	 0.93
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 4
Syntactic diversity (% unique Push programs):	 0.93
Total error diversity:				 0.091
Error (vector) diversity:			 0.097
Behavioral diversity:				 0.098
--- Run Statistics ---
Number of program evaluations used so far: 29000
Number of point (instruction) evaluations so far: 46042559
--- Timings ---
Current time: 1529614957239 milliseconds
Total Time:         102.1 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        38.1 seconds, 37.4%
Fitness Testing:     49.4 seconds, 48.4%
Report:              14.4 seconds, 14.1%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 28
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 29
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 29
;;******************************
;; -*- Number IO problem report - generation 29
Test total error for best: 59131.0
Test mean error for best: 29.56550
;;------------------------------
Outputs of best individual on training cases:
Correct output: 1.9526623133   | Program output: -32.0473376867
Correct output: -70.8009773522 | Program output: 8.1990226478  
Correct output: -13.7839009431 | Program output: 77.2160990569 
Correct output: 143.8727406396 | Program output: 94.8727406396 
Correct output: 136.4396027174 | Program output: 69.4396027174 
Correct output: 18.5044280613  | Program output: 116.5044280613
Correct output: 92.0568646792  | Program output: 66.0568646792 
Correct output: 71.8873476205  | Program output: 121.8873476205
Correct output: -10.8388749243 | Program output: -46.8388749243
Correct output: 0.9299825981   | Program output: 73.9299825981 
Correct output: -26.7840412284 | Program output: -26.7840412284
Correct output: -102.1264221267 | Program output: -72.1264221267
Correct output: 40.8061668642  | Program output: 48.8061668642 
Correct output: -5.2544966331  | Program output: -11.2544966331
Correct output: 102.9855886244 | Program output: 59.9855886244 
Correct output: -118.0507723766 | Program output: -61.0507723766
Correct output: 55.9371769928  | Program output: 76.9371769928 
Correct output: 4.2657989984   | Program output: 29.2657989984 
Correct output: 96.7057987603  | Program output: 114.7057987603
Correct output: 122.162446611  | Program output: 107.162446611 
Correct output: 30.0102027945  | Program output: 1.0102027945  
Correct output: 104.5822387035 | Program output: 99.5822387035 
Correct output: -1.5538743366  | Program output: -48.5538743366
Correct output: 166.8070496115 | Program output: 93.8070496115 
Correct output: 58.6188945281  | Program output: 98.6188945281 
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction in1} {:instruction integer_max} {:instruction integer_dup_items} {:instruction integer_sub} {:instruction float_sub} {:instruction integer_div} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_inc} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_div} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_dup_items} {:instruction float_div} {:instruction float_inc} {:instruction float_yankdup} {:instruction integer_rot} {:instruction float_yankdup} {:instruction float_inc} {:instruction float_dup_items} {:instruction integer_sub} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_inc} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_div} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_mult} {:instruction float_dup_items} {:instruction float_div} {:instruction float_inc} {:instruction float_max} {:instruction float_dup_items} {:instruction float_div} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_inc} {:instruction integer_mod} {:instruction float_inc} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_div} {:instruction integer_pop} {:instruction float_yankdup} {:instruction float_mult} {:instruction float_dup_items} {:instruction float_rot} {:instruction float_inc} {:instruction integer_dup_items} {:instruction print_integer} {:instruction integer_mod} {:instruction integer_div} {:instruction float_mult} {:instruction float_dup_items} {:instruction float_div} {:instruction float_inc} {:instruction float_yankdup} {:instruction print_float} {:instruction integer_add} {:instruction integer_yankdup} {:instruction integer_min} {:instruction float_cos} {:instruction print_float} {:instruction integer_stackdepth} {:instruction -44} {:instruction print_float} {:instruction integer_shove} {:instruction float_swap} {:instruction integer_swap} {:instruction float_mod} {:instruction float_shove} {:instruction float_stackdepth} {:instruction float_sin} {:instruction float_flush} {:instruction integer_mult} {:instruction float_dup} {:instruction float_sin} {:instruction integer_rot} {:instruction float_pop} {:instruction integer_dup} {:instruction integer_mod} {:instruction float_swap})
Best program: (in1 integer_max integer_dup_items integer_sub float_sub integer_div float_inc float_yankdup float_inc float_yankdup float_inc float_inc float_yankdup float_div float_inc float_yankdup float_dup_items float_div float_inc float_yankdup integer_rot float_yankdup float_inc float_dup_items integer_sub float_inc float_yankdup float_inc float_yankdup float_inc float_inc float_yankdup float_div float_inc float_yankdup float_inc float_yankdup float_inc float_yankdup float_inc float_yankdup float_mult float_dup_items float_div float_inc float_max float_dup_items float_div float_inc float_yankdup float_inc float_yankdup float_inc float_yankdup float_inc integer_mod float_inc float_inc float_yankdup float_div integer_pop float_yankdup float_mult float_dup_items float_rot float_inc integer_dup_items print_integer integer_mod integer_div float_mult float_dup_items float_div float_inc float_yankdup print_float integer_add integer_yankdup integer_min float_cos print_float integer_stackdepth -44 print_float integer_shove float_swap integer_swap float_mod float_shove float_stackdepth float_sin float_flush integer_mult float_dup float_sin integer_rot float_pop integer_dup integer_mod float_swap)
Errors: [34.0 13 79.0 13 91.0 12 49.0 2 67.0 3 98.0 2 26.0 2 50.0 2 36.0 2 73.0 2 0.0 0 30.0 2 8.0 1 6.0 2 43.0 3 57.0 2 21.0 2 25.0 2 18.0 3 15.0 2 29.0 2 5.0 3 47.0 2 73.0 3 40.0 1]
Total: 1103.0
Mean: 22.06
Genome size: 100
Size: 101
Percent parens: 0.010
--- Population Statistics ---
Average total errors in population: 2826.0286106999997
Median total errors in population: 1103.0
Error averages by case: (100.10379210000004 12.648 132.81317850000013 12.743 149.5823071 12.021 122.23935430000007 3.772 136.7667919 4.331 154.23995549999998 3.412 98.40052389999994 3.413 116.97793910000001 3.663 102.97537900000002 3.563 133.18957090000012 3.315 73.5328169 2.219 104.54575869999998 3.975 78.40000150000002 2.643 70.86355849999997 3.409 113.61301979999999 4.337 128.56514859999993 3.965 90.99533700000005 3.382 85.30083579999999 3.35 91.71137949999996 4.292 91.6383454 3.47 86.05147840000001 4.256 81.76667899999998 4.14 112.78512349999997 3.447 144.36652170000008 4.4 107.4518141 2.986)
Error minima by case: (0.0473 7 45.0543 1 1.2103 8 40.0 1 24.8792 2 0.134 1 16.0538 1 4.1157 2 1.7348 1 0.1323 1 0.0 0 13.0 2 0.0 0 0.0 0 26.9825 2 40.0 2 4.0 1 0.0874 1 1.0 1 6.0 1 1.1121 1 0.0 0 0.4154 1 64.0 2 17.3842 1)
Average genome size in population (length): 98.103
Average program size in population (points): 99.103
Average percent parens in population: 0.010
Minimum age in population: 40.22744461894035
Maximum age in population: 45.12996524572372
Average age in population: 42.8744765750207
Median age in population: 42.93390110321343
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 5
Genome diversity (% unique Plush genomes):	 0.922
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 5
Syntactic diversity (% unique Push programs):	 0.922
Total error diversity:				 0.102
Error (vector) diversity:			 0.112
Behavioral diversity:				 0.113
--- Run Statistics ---
Number of program evaluations used so far: 30000
Number of point (instruction) evaluations so far: 48495234
--- Timings ---
Current time: 1529614961387 milliseconds
Total Time:         106.1 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        39.5 seconds, 37.2%
Fitness Testing:     51.6 seconds, 48.6%
Report:              14.9 seconds, 14.1%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 29
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 30
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 30
;;******************************
;; -*- Number IO problem report - generation 30
Test total error for best: 59131.0
Test mean error for best: 29.56550
;;------------------------------
Outputs of best individual on training cases:
Correct output: 1.9526623133   | Program output: -32.0473376867
Correct output: -70.8009773522 | Program output: 8.1990226478  
Correct output: -13.7839009431 | Program output: 77.2160990569 
Correct output: 143.8727406396 | Program output: 94.8727406396 
Correct output: 136.4396027174 | Program output: 69.4396027174 
Correct output: 18.5044280613  | Program output: 116.5044280613
Correct output: 92.0568646792  | Program output: 66.0568646792 
Correct output: 71.8873476205  | Program output: 121.8873476205
Correct output: -10.8388749243 | Program output: -46.8388749243
Correct output: 0.9299825981   | Program output: 73.9299825981 
Correct output: -26.7840412284 | Program output: -26.7840412284
Correct output: -102.1264221267 | Program output: -72.1264221267
Correct output: 40.8061668642  | Program output: 48.8061668642 
Correct output: -5.2544966331  | Program output: -11.2544966331
Correct output: 102.9855886244 | Program output: 59.9855886244 
Correct output: -118.0507723766 | Program output: -61.0507723766
Correct output: 55.9371769928  | Program output: 76.9371769928 
Correct output: 4.2657989984   | Program output: 29.2657989984 
Correct output: 96.7057987603  | Program output: 114.7057987603
Correct output: 122.162446611  | Program output: 107.162446611 
Correct output: 30.0102027945  | Program output: 1.0102027945  
Correct output: 104.5822387035 | Program output: 99.5822387035 
Correct output: -1.5538743366  | Program output: -48.5538743366
Correct output: 166.8070496115 | Program output: 93.8070496115 
Correct output: 58.6188945281  | Program output: 98.6188945281 
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction in1} {:instruction integer_max} {:instruction integer_dup_items} {:instruction integer_sub} {:instruction float_sub} {:instruction integer_div} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_inc} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_div} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_dup_items} {:instruction float_div} {:instruction float_inc} {:instruction float_yankdup} {:instruction integer_rot} {:instruction float_yankdup} {:instruction float_inc} {:instruction float_dup_items} {:instruction float_div} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_inc} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_div} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_mult} {:instruction float_dup_items} {:instruction float_div} {:instruction float_inc} {:instruction float_mult} {:instruction float_dup_items} {:instruction float_div} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_inc} {:instruction integer_mod} {:instruction float_inc} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_div} {:instruction integer_flush} {:instruction float_yankdup} {:instruction float_mult} {:instruction float_dup_items} {:instruction float_div} {:instruction float_inc} {:instruction integer_dup_items} {:instruction integer_sub} {:instruction integer_mod} {:instruction integer_div} {:instruction float_mult} {:instruction float_dup_items} {:instruction float_div} {:instruction float_inc} {:instruction float_yankdup} {:instruction print_float} {:instruction float_max} {:instruction integer_yankdup} {:instruction integer_min} {:instruction float_cos} {:instruction integer_stackdepth} {:instruction -44} {:instruction float_pop} {:instruction integer_shove} {:instruction float_swap} {:instruction in2} {:instruction 52} {:instruction float_shove} {:instruction float_stackdepth} {:instruction float_sin} {:instruction float_flush} {:instruction integer_mult} {:instruction float_dup} {:instruction integer_pop} {:instruction integer_yankdup} {:instruction float_shove} {:instruction float_stackdepth} {:instruction float_sin} {:instruction integer_rot} {:instruction float_pop} {:instruction integer_dup} {:instruction integer_mod} {:instruction float_swap})
Best program: (in1 integer_max integer_dup_items integer_sub float_sub integer_div float_inc float_yankdup float_inc float_yankdup float_inc float_inc float_yankdup float_div float_inc float_yankdup float_dup_items float_div float_inc float_yankdup integer_rot float_yankdup float_inc float_dup_items float_div float_inc float_yankdup float_inc float_yankdup float_inc float_inc float_yankdup float_div float_inc float_yankdup float_inc float_yankdup float_inc float_yankdup float_inc float_yankdup float_mult float_dup_items float_div float_inc float_mult float_dup_items float_div float_inc float_yankdup float_inc float_yankdup float_inc float_yankdup float_inc integer_mod float_inc float_inc float_yankdup float_div integer_flush float_yankdup float_mult float_dup_items float_div float_inc integer_dup_items integer_sub integer_mod integer_div float_mult float_dup_items float_div float_inc float_yankdup print_float float_max integer_yankdup integer_min float_cos integer_stackdepth -44 float_pop integer_shove float_swap in2 52 float_shove float_stackdepth float_sin float_flush integer_mult float_dup integer_pop integer_yankdup float_shove float_stackdepth float_sin integer_rot float_pop integer_dup integer_mod float_swap)
Errors: [34.0 13 79.0 13 91.0 12 49.0 2 67.0 3 98.0 2 26.0 2 50.0 2 36.0 2 73.0 2 0.0 0 30.0 2 8.0 1 6.0 2 43.0 3 57.0 2 21.0 2 25.0 2 18.0 3 15.0 2 29.0 2 5.0 3 47.0 2 73.0 3 40.0 1]
Total: 1103.0
Mean: 22.06
Genome size: 103
Size: 104
Percent parens: 0.010
--- Population Statistics ---
Average total errors in population: 2927.0452766000003
Median total errors in population: 1104.0
Error averages by case: (102.51241849999998 12.627 140.94231020000007 12.707 150.9023563999999 12.043 126.56785570000007 3.951 140.81494490000006 4.509 155.0849752 3.578 102.50501009999998 3.584 120.04309420000003 3.863 105.38983680000003 3.758 134.52232850000013 3.488 77.21438030000002 2.452 108.540002 4.176 82.32644149999996 2.808 76.73109070000002 3.585 117.6691127 4.497 132.51826459999987 4.196 94.37287600000002 3.514 92.26915489999998 3.513 95.823246 4.425 96.18819250000004 3.647 94.14958969999996 4.315 86.22164649999999 4.285 113.64572499999996 3.635 148.7128701 4.552 110.46655360000005 3.203)
Error minima by case: (0.0473 7 55.0 1 11.8928 7 41.0 2 59.0 2 0.4723 1 18.0 1 26.0 2 10.1029 1 0.0635 1 0.0 0 6.0 2 1.0 1 0.0 0 35.0 2 33.0 2 2.0 1 0.186 1 0.0 0 7.0 1 4.8777 1 0.0 0 1.5539 1 65.0 2 16.0 1)
Average genome size in population (length): 98.026
Average program size in population (points): 99.026
Average percent parens in population: 0.010
Minimum age in population: 41.22744461894035
Maximum age in population: 46.37971541285515
Average age in population: 44.25721919192001
Median age in population: 44.30337281804532
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 4
Genome diversity (% unique Plush genomes):	 0.931
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 4
Syntactic diversity (% unique Push programs):	 0.931
Total error diversity:				 0.116
Error (vector) diversity:			 0.122
Behavioral diversity:				 0.123
--- Run Statistics ---
Number of program evaluations used so far: 31000
Number of point (instruction) evaluations so far: 50946059
--- Timings ---
Current time: 1529614965517 milliseconds
Total Time:         110.2 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        40.8 seconds, 37.0%
Fitness Testing:     53.8 seconds, 48.8%
Report:              15.5 seconds, 14.1%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 30
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 31
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 31
;;******************************
;; -*- Number IO problem report - generation 31
Test total error for best: 59131.0
Test mean error for best: 29.56550
;;------------------------------
Outputs of best individual on training cases:
Correct output: 1.9526623133   | Program output: -32.0473376867
Correct output: -70.8009773522 | Program output: 8.1990226478  
Correct output: -13.7839009431 | Program output: 77.2160990569 
Correct output: 143.8727406396 | Program output: 94.8727406396 
Correct output: 136.4396027174 | Program output: 69.4396027174 
Correct output: 18.5044280613  | Program output: 116.5044280613
Correct output: 92.0568646792  | Program output: 66.0568646792 
Correct output: 71.8873476205  | Program output: 121.8873476205
Correct output: -10.8388749243 | Program output: -46.8388749243
Correct output: 0.9299825981   | Program output: 73.9299825981 
Correct output: -26.7840412284 | Program output: -26.7840412284
Correct output: -102.1264221267 | Program output: -72.1264221267
Correct output: 40.8061668642  | Program output: 48.8061668642 
Correct output: -5.2544966331  | Program output: -11.2544966331
Correct output: 102.9855886244 | Program output: 59.9855886244 
Correct output: -118.0507723766 | Program output: -61.0507723766
Correct output: 55.9371769928  | Program output: 76.9371769928 
Correct output: 4.2657989984   | Program output: 29.2657989984 
Correct output: 96.7057987603  | Program output: 114.7057987603
Correct output: 122.162446611  | Program output: 107.162446611 
Correct output: 30.0102027945  | Program output: 1.0102027945  
Correct output: 104.5822387035 | Program output: 99.5822387035 
Correct output: -1.5538743366  | Program output: -48.5538743366
Correct output: 166.8070496115 | Program output: 93.8070496115 
Correct output: 58.6188945281  | Program output: 98.6188945281 
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction in1} {:instruction integer_max} {:instruction integer_dup_items} {:instruction integer_sub} {:instruction integer_mod} {:instruction integer_div} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_inc} {:instruction float_div} {:instruction float_inc} {:instruction float_div} {:instruction float_inc} {:instruction float_rot} {:instruction float_inc} {:instruction float_inc} {:instruction float_div} {:instruction float_inc} {:instruction integer_dup_times} {:instruction float_div} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_inc} {:instruction float_div} {:instruction float_inc} {:instruction float_div} {:instruction float_inc} {:instruction float_rot} {:instruction float_inc} {:instruction float_inc} {:instruction float_div} {:instruction float_dup_items} {:instruction float_div} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_inc} {:instruction float_yankdup} {:instruction integer_stackdepth} {:instruction float_inc} {:instruction float_mult} {:instruction float_dup_items} {:instruction float_div} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_dup_items} {:instruction float_inc} {:instruction float_inc} {:instruction float_mult} {:instruction integer_max} {:instruction float_div} {:instruction float_inc} {:instruction float_inc} {:instruction float_swap} {:instruction float_inc} {:instruction float_yankdup} {:instruction print_float} {:instruction float_flush} {:instruction integer_stackdepth} {:instruction tag_float_856} {:instruction float_add} {:instruction integer_dup_times} {:instruction integer_flush} {:instruction float_yankdup} {:instruction float_mult} {:instruction float_dup_items} {:instruction float_div} {:instruction float_inc} {:instruction integer_dup_items} {:instruction print_float} {:instruction integer_stackdepth} {:instruction -43} {:instruction float_pop} {:instruction integer_shove} {:instruction float_swap} {:instruction in2} {:instruction 52} {:instruction float_shove})
Best program: (in1 integer_max integer_dup_items integer_sub integer_mod integer_div float_inc float_yankdup float_inc float_yankdup float_inc float_div float_inc float_div float_inc float_rot float_inc float_inc float_div float_inc integer_dup_times float_div float_inc float_yankdup float_inc float_yankdup float_inc float_div float_inc float_div float_inc float_rot float_inc float_inc float_div float_dup_items float_div float_inc float_yankdup float_inc float_yankdup integer_stackdepth float_inc float_mult float_dup_items float_div float_inc float_yankdup float_dup_items float_inc float_inc float_mult integer_max float_div float_inc float_inc float_swap float_inc float_yankdup print_float float_flush integer_stackdepth tag_float_856 float_add integer_dup_times integer_flush float_yankdup float_mult float_dup_items float_div float_inc integer_dup_items print_float integer_stackdepth -43 float_pop integer_shove float_swap in2 52 float_shove)
Errors: [34.0 13 79.0 13 91.0 12 49.0 2 67.0 3 98.0 2 26.0 2 50.0 2 36.0 2 73.0 2 0.0 0 30.0 2 8.0 1 6.0 2 43.0 3 57.0 2 21.0 2 25.0 2 18.0 3 15.0 2 29.0 2 5.0 3 47.0 2 73.0 3 40.0 1]
Total: 1103.0
Mean: 22.06
Genome size: 81
Size: 82
Percent parens: 0.012
--- Population Statistics ---
Average total errors in population: 3479.6035234
Median total errors in population: 1104.0
Error averages by case: (127.7701243 12.741 153.28391870000013 12.764 175.97950950000003 12.092 147.66926750000005 3.992 162.25171920000003 4.562 180.69970959999998 3.586 125.15065939999997 3.62 143.5771788 3.869 130.69466590000005 3.789 159.92921660000007 3.513 101.36024659999995 2.469 130.55666979999992 4.181 105.81165130000001 2.883 96.05479479999998 3.587 140.14988380000003 4.559 154.32153789999995 4.197 118.2923951 3.556 108.73451350000003 3.505 118.34352279999995 4.472 117.8932154 3.672 108.2087018 4.477 108.4365313 4.342 138.93044199999997 3.666 169.2708496 4.605 134.3145982 3.219)
Error minima by case: (0.0473 7 25.1496 1 12.9018 9 8.1273 2 15.5604 2 0.5044 1 9.5525 1 26.0 2 9.0838 1 0.2679 1 0.0 0 6.0 2 0.0 0 0.0 0 13.2017 2 33.0 2 2.0 1 0.3758 1 1.0 1 1.1819 1 3.7996 1 0.0 0 0.58 1 14.807 2 16.0 1)
Average genome size in population (length): 96.344
Average program size in population (points): 97.344
Average percent parens in population: 0.010
Minimum age in population: 42.59816321730614
Maximum age in population: 47.73352214507759
Average age in population: 45.64966344072483
Median age in population: 45.68167084362358
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 5
Genome diversity (% unique Plush genomes):	 0.927
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 5
Syntactic diversity (% unique Push programs):	 0.927
Total error diversity:				 0.104
Error (vector) diversity:			 0.113
Behavioral diversity:				 0.114
--- Run Statistics ---
Number of program evaluations used so far: 32000
Number of point (instruction) evaluations so far: 53354809
--- Timings ---
Current time: 1529614969571 milliseconds
Total Time:         114.4 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        42.1 seconds, 36.8%
Fitness Testing:     56.0 seconds, 48.9%
Report:              16.2 seconds, 14.1%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 31
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 32
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 32
;;******************************
;; -*- Number IO problem report - generation 32
Test total error for best: 59131.0
Test mean error for best: 29.56550
;;------------------------------
Outputs of best individual on training cases:
Correct output: 1.9526623133   | Program output: -32.0473376867
Correct output: -70.8009773522 | Program output: 8.1990226478  
Correct output: -13.7839009431 | Program output: 77.2160990569 
Correct output: 143.8727406396 | Program output: 94.8727406396 
Correct output: 136.4396027174 | Program output: 69.4396027174 
Correct output: 18.5044280613  | Program output: 116.5044280613
Correct output: 92.0568646792  | Program output: 66.0568646792 
Correct output: 71.8873476205  | Program output: 121.8873476205
Correct output: -10.8388749243 | Program output: -46.8388749243
Correct output: 0.9299825981   | Program output: 73.9299825981 
Correct output: -26.7840412284 | Program output: -26.7840412284
Correct output: -102.1264221267 | Program output: -72.1264221267
Correct output: 40.8061668642  | Program output: 48.8061668642 
Correct output: -5.2544966331  | Program output: -11.2544966331
Correct output: 102.9855886244 | Program output: 59.9855886244 
Correct output: -118.0507723766 | Program output: -61.0507723766
Correct output: 55.9371769928  | Program output: 76.9371769928 
Correct output: 4.2657989984   | Program output: 29.2657989984 
Correct output: 96.7057987603  | Program output: 114.7057987603
Correct output: 122.162446611  | Program output: 107.162446611 
Correct output: 30.0102027945  | Program output: 1.0102027945  
Correct output: 104.5822387035 | Program output: 99.5822387035 
Correct output: -1.5538743366  | Program output: -48.5538743366
Correct output: 166.8070496115 | Program output: 93.8070496115 
Correct output: 58.6188945281  | Program output: 98.6188945281 
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction in1} {:instruction integer_max} {:instruction integer_dup_items} {:instruction integer_sub} {:instruction integer_mod} {:instruction integer_div} {:instruction float_yankdup} {:instruction float_inc} {:instruction integer_swap} {:instruction float_inc} {:instruction float_div} {:instruction float_inc} {:instruction float_rot} {:instruction float_swap} {:instruction float_inc} {:instruction float_div} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_inc} {:instruction float_div} {:instruction float_inc} {:instruction float_yankdup} {:instruction integer_max} {:instruction integer_div} {:instruction float_mult} {:instruction float_dup_items} {:instruction float_div} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_inc} {:instruction integer_div} {:instruction float_inc} {:instruction float_div} {:instruction float_inc} {:instruction float_rot} {:instruction float_mult} {:instruction float_dup_items} {:instruction float_div} {:instruction float_inc} {:instruction integer_dup_items} {:instruction integer_sub} {:instruction integer_mod} {:instruction integer_div} {:instruction float_mult} {:instruction integer_stackdepth} {:instruction float_inc} {:instruction float_mult} {:instruction float_dup_items} {:instruction float_div} {:instruction float_inc} {:instruction float_inc} {:instruction float_mult} {:instruction float_dup_items} {:instruction float_div} {:instruction float_inc} {:instruction float_inc} {:instruction float_yank} {:instruction float_inc} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_dup_items} {:instruction float_div} {:instruction float_inc} {:instruction float_mult} {:instruction integer_max} {:instruction float_div} {:instruction float_inc} {:instruction float_inc} {:instruction float_yank} {:instruction float_inc} {:instruction float_yankdup} {:instruction print_float} {:instruction integer_dup_items} {:instruction integer_yankdup} {:instruction integer_shove} {:instruction float_cos} {:instruction float_dup_items} {:instruction float_div} {:instruction integer_max} {:instruction integer_inc} {:instruction float_inc} {:instruction print_integer} {:instruction integer_stackdepth} {:instruction float_mod} {:instruction integer_yankdup} {:instruction integer_shove} {:instruction float_cos} {:instruction float_dec} {:instruction float_dec} {:instruction integer_yankdup} {:instruction integer_min} {:instruction float_cos} {:instruction float_dec} {:instruction integer_stackdepth} {:instruction integer_stackdepth} {:instruction -44} {:instruction float_dup_times} {:instruction integer_shove} {:instruction float_swap} {:instruction in2} {:instruction 52} {:instruction float_shove} {:instruction float_stackdepth} {:instruction float_sin})
Best program: (in1 integer_max integer_dup_items integer_sub integer_mod integer_div float_yankdup float_inc integer_swap float_inc float_div float_inc float_rot float_swap float_inc float_div float_inc float_yankdup float_inc float_yankdup float_inc float_div float_inc float_yankdup integer_max integer_div float_mult float_dup_items float_div float_inc float_yankdup float_inc integer_div float_inc float_div float_inc float_rot float_mult float_dup_items float_div float_inc integer_dup_items integer_sub integer_mod integer_div float_mult integer_stackdepth float_inc float_mult float_dup_items float_div float_inc float_inc float_mult float_dup_items float_div float_inc float_inc float_yank float_inc float_inc float_yankdup float_dup_items float_div float_inc float_mult integer_max float_div float_inc float_inc float_yank float_inc float_yankdup print_float integer_dup_items integer_yankdup integer_shove float_cos float_dup_items float_div integer_max integer_inc float_inc print_integer integer_stackdepth float_mod integer_yankdup integer_shove float_cos float_dec float_dec integer_yankdup integer_min float_cos float_dec integer_stackdepth integer_stackdepth -44 float_dup_times integer_shove float_swap in2 52 float_shove float_stackdepth float_sin)
Errors: [34.0 13 79.0 13 91.0 12 49.0 2 67.0 3 98.0 2 26.0 2 50.0 2 36.0 2 73.0 2 0.0 0 30.0 2 8.0 1 6.0 2 43.0 3 57.0 2 21.0 2 25.0 2 18.0 3 15.0 2 29.0 2 5.0 3 47.0 2 73.0 3 40.0 1]
Total: 1103.0
Mean: 22.06
Genome size: 106
Size: 107
Percent parens: 0.009
--- Population Statistics ---
Average total errors in population: 2720.3022688999995
Median total errors in population: 1103.0
Error averages by case: (95.09160180000002 12.675 128.87011090000007 12.711 146.2682409 12.004 118.08517090000012 3.786 132.68335169999997 4.364 150.34464770000008 3.437 94.04039999999999 3.446 113.97373680000005 3.7 98.44086810000006 3.589 129.7641018000001 3.356 69.1137368 2.285 102.31185749999997 3.991 74.00789009999998 2.649 64.59940810000003 3.421 109.51818409999998 4.364 126.54202159999994 3.978 86.1658865 3.388 81.2451406 3.37 87.15877490000001 4.298 87.35642600000004 3.504 78.37189889999995 4.219 77.37165529999997 4.15 106.55171009999997 3.487 140.4219844 4.434 104.36146340000003 3.036)
Error minima by case: (0.0473 7 5.1496 1 13.0213 8 41.0 2 46.7891 2 0.451 1 2.431 1 17.9395 2 7.7569 1 0.1229 1 0.0 0 6.0 2 1.0 1 0.0 0 13.4137 2 33.0 2 1.0 1 0.2658 1 1.0 1 7.0 1 0.0102 1 0.0 0 1.2695 1 65.0 2 16.0 1)
Average genome size in population (length): 95.595
Average program size in population (points): 96.595
Average percent parens in population: 0.011
Minimum age in population: 44.68716021068394
Maximum age in population: 49.0307682598941
Average age in population: 47.07215360287996
Median age in population: 47.13534882315435
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 4
Genome diversity (% unique Plush genomes):	 0.926
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 4
Syntactic diversity (% unique Push programs):	 0.926
Total error diversity:				 0.104
Error (vector) diversity:			 0.115
Behavioral diversity:				 0.115
--- Run Statistics ---
Number of program evaluations used so far: 33000
Number of point (instruction) evaluations so far: 55744759
--- Timings ---
Current time: 1529614973760 milliseconds
Total Time:         118.4 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        43.5 seconds, 36.7%
Fitness Testing:     58.2 seconds, 49.1%
Report:              16.7 seconds, 14.1%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 32
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 33
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 33
;;******************************
;; -*- Number IO problem report - generation 33
Test total error for best: 59131.0
Test mean error for best: 29.56550
;;------------------------------
Outputs of best individual on training cases:
Correct output: 1.9526623133   | Program output: -32.0473376867
Correct output: -70.8009773522 | Program output: 8.1990226478  
Correct output: -13.7839009431 | Program output: 77.2160990569 
Correct output: 143.8727406396 | Program output: 94.8727406396 
Correct output: 136.4396027174 | Program output: 69.4396027174 
Correct output: 18.5044280613  | Program output: 116.5044280613
Correct output: 92.0568646792  | Program output: 66.0568646792 
Correct output: 71.8873476205  | Program output: 121.8873476205
Correct output: -10.8388749243 | Program output: -46.8388749243
Correct output: 0.9299825981   | Program output: 73.9299825981 
Correct output: -26.7840412284 | Program output: -26.7840412284
Correct output: -102.1264221267 | Program output: -72.1264221267
Correct output: 40.8061668642  | Program output: 48.8061668642 
Correct output: -5.2544966331  | Program output: -11.2544966331
Correct output: 102.9855886244 | Program output: 59.9855886244 
Correct output: -118.0507723766 | Program output: -61.0507723766
Correct output: 55.9371769928  | Program output: 76.9371769928 
Correct output: 4.2657989984   | Program output: 29.2657989984 
Correct output: 96.7057987603  | Program output: 114.7057987603
Correct output: 122.162446611  | Program output: 107.162446611 
Correct output: 30.0102027945  | Program output: 1.0102027945  
Correct output: 104.5822387035 | Program output: 99.5822387035 
Correct output: -1.5538743366  | Program output: -48.5538743366
Correct output: 166.8070496115 | Program output: 93.8070496115 
Correct output: 58.6188945281  | Program output: 98.6188945281 
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction in1} {:instruction integer_max} {:instruction integer_dup_items} {:instruction integer_sub} {:instruction float_sub} {:instruction integer_div} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_inc} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_div} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_dup_items} {:instruction float_div} {:instruction float_inc} {:instruction float_yankdup} {:instruction integer_rot} {:instruction integer_rot} {:instruction float_yankdup} {:instruction float_inc} {:instruction float_dup_items} {:instruction float_div} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_inc} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_div} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_mult} {:instruction float_dup_items} {:instruction float_div} {:instruction float_inc} {:instruction float_mult} {:instruction float_mult} {:instruction float_dup_items} {:instruction float_div} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_inc} {:instruction integer_mod} {:instruction float_inc} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_div} {:instruction integer_flush} {:instruction float_yankdup} {:instruction integer_rot} {:instruction float_dup_items} {:instruction float_div} {:instruction float_inc} {:instruction integer_dup_items} {:instruction integer_sub} {:instruction float_yank} {:instruction integer_div} {:instruction float_yank} {:instruction float_inc} {:instruction float_yankdup} {:instruction print_float} {:instruction float_flush} {:instruction integer_stackdepth} {:instruction tag_float_856} {:instruction float_add} {:instruction integer_add} {:instruction in2} {:instruction float_min} {:instruction float_dup_times} {:instruction float_sub} {:instruction print_float} {:instruction float_shove})
Best program: (in1 integer_max integer_dup_items integer_sub float_sub integer_div float_inc float_yankdup float_inc float_yankdup float_inc float_inc float_yankdup float_div float_inc float_yankdup float_dup_items float_div float_inc float_yankdup integer_rot integer_rot float_yankdup float_inc float_dup_items float_div float_inc float_yankdup float_inc float_yankdup float_inc float_inc float_yankdup float_div float_inc float_yankdup float_inc float_yankdup float_inc float_yankdup float_inc float_yankdup float_mult float_dup_items float_div float_inc float_mult float_mult float_dup_items float_div float_inc float_yankdup float_inc float_yankdup float_inc float_yankdup float_inc integer_mod float_inc float_inc float_yankdup float_div integer_flush float_yankdup integer_rot float_dup_items float_div float_inc integer_dup_items integer_sub float_yank integer_div float_yank float_inc float_yankdup print_float float_flush integer_stackdepth tag_float_856 float_add integer_add in2 float_min float_dup_times float_sub print_float float_shove)
Errors: [34.0 13 79.0 13 91.0 12 49.0 2 67.0 3 98.0 2 26.0 2 50.0 2 36.0 2 73.0 2 0.0 0 30.0 2 8.0 1 6.0 2 43.0 3 57.0 2 21.0 2 25.0 2 18.0 3 15.0 2 29.0 2 5.0 3 47.0 2 73.0 3 40.0 1]
Total: 1103.0
Mean: 22.06
Genome size: 87
Size: 88
Percent parens: 0.011
--- Population Statistics ---
Average total errors in population: 3238.0187799000005
Median total errors in population: 1104.0
Error averages by case: (115.86897100000003 12.734 153.8299580000001 12.779 166.34967089999998 12.068 136.84656220000014 3.93 151.54496550000002 4.497 170.91390520000002 3.518 113.7910241 3.577 133.77933810000007 3.761 119.2039142 3.715 150.1304086000001 3.412 89.0307653 2.414 120.86257849999996 4.099 94.41461870000003 2.799 88.40337449999997 3.553 129.17160650000002 4.479 144.73517040000002 4.117 106.37917139999998 3.456 106.1185476 3.429 106.71967020000004 4.411 106.63523570000004 3.608 105.68256199999993 4.429 96.97929719999999 4.317 127.0643313 3.606 158.71109540000006 4.536 124.48603740000004 3.122)
Error minima by case: (0.0132 8 55.0 1 13.5393 8 42.0 2 60.0 2 0.6192 1 19.0 1 13.023 2 9.8792 1 0.2883 1 0.0 0 6.0 2 0.0 0 0.0 0 36.0 2 33.0 2 1.0 1 0.2223 1 2.0 1 8.0 1 4.0102 1 0.0 0 1.4135 1 66.0 2 16.0 1)
Average genome size in population (length): 95.548
Average program size in population (points): 96.548
Average percent parens in population: 0.011
Minimum age in population: 45.69381972961128
Maximum age in population: 50.42124290205538
Average age in population: 48.40560455944948
Median age in population: 48.43985741573852
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 5
Genome diversity (% unique Plush genomes):	 0.928
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 5
Syntactic diversity (% unique Push programs):	 0.928
Total error diversity:				 0.102
Error (vector) diversity:			 0.11
Behavioral diversity:				 0.112
--- Run Statistics ---
Number of program evaluations used so far: 34000
Number of point (instruction) evaluations so far: 58133584
--- Timings ---
Current time: 1529614977791 milliseconds
Total Time:         122.6 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        44.8 seconds, 36.6%
Fitness Testing:     60.3 seconds, 49.2%
Report:              17.4 seconds, 14.2%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 33
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 34
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 34
;;******************************
;; -*- Number IO problem report - generation 34
Test total error for best: 59131.0
Test mean error for best: 29.56550
;;------------------------------
Outputs of best individual on training cases:
Correct output: 1.9526623133   | Program output: -32.0473376867
Correct output: -70.8009773522 | Program output: 8.1990226478  
Correct output: -13.7839009431 | Program output: 77.2160990569 
Correct output: 143.8727406396 | Program output: 94.8727406396 
Correct output: 136.4396027174 | Program output: 69.4396027174 
Correct output: 18.5044280613  | Program output: 116.5044280613
Correct output: 92.0568646792  | Program output: 66.0568646792 
Correct output: 71.8873476205  | Program output: 121.8873476205
Correct output: -10.8388749243 | Program output: -46.8388749243
Correct output: 0.9299825981   | Program output: 73.9299825981 
Correct output: -26.7840412284 | Program output: -26.7840412284
Correct output: -102.1264221267 | Program output: -72.1264221267
Correct output: 40.8061668642  | Program output: 48.8061668642 
Correct output: -5.2544966331  | Program output: -11.2544966331
Correct output: 102.9855886244 | Program output: 59.9855886244 
Correct output: -118.0507723766 | Program output: -61.0507723766
Correct output: 55.9371769928  | Program output: 76.9371769928 
Correct output: 4.2657989984   | Program output: 29.2657989984 
Correct output: 96.7057987603  | Program output: 114.7057987603
Correct output: 122.162446611  | Program output: 107.162446611 
Correct output: 30.0102027945  | Program output: 1.0102027945  
Correct output: 104.5822387035 | Program output: 99.5822387035 
Correct output: -1.5538743366  | Program output: -48.5538743366
Correct output: 166.8070496115 | Program output: 93.8070496115 
Correct output: 58.6188945281  | Program output: 98.6188945281 
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction in1} {:instruction integer_max} {:instruction float_dup_items} {:instruction float_div} {:instruction float_yankdup} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_inc} {:instruction float_div} {:instruction float_inc} {:instruction float_div} {:instruction float_inc} {:instruction float_rot} {:instruction float_inc} {:instruction float_inc} {:instruction float_max} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_inc} {:instruction integer_rot} {:instruction float_inc} {:instruction integer_swap} {:instruction float_inc} {:instruction float_div} {:instruction float_inc} {:instruction float_rot} {:instruction float_inc} {:instruction float_inc} {:instruction float_div} {:instruction float_inc} {:instruction float_yankdup} {:instruction integer_mod} {:instruction integer_div} {:instruction float_mult} {:instruction float_dup_items} {:instruction float_div} {:instruction float_yankdup} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_mult} {:instruction float_inc} {:instruction float_mult} {:instruction float_dup_items} {:instruction float_div} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_inc} {:instruction integer_mod} {:instruction float_inc} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_div} {:instruction integer_flush} {:instruction float_yankdup} {:instruction float_mult} {:instruction float_dup_items} {:instruction float_div} {:instruction float_inc} {:instruction integer_dup_items} {:instruction integer_sub} {:instruction integer_mod} {:instruction integer_div} {:instruction float_mult} {:instruction float_dup_items} {:instruction float_div} {:instruction float_inc} {:instruction float_swap} {:instruction print_float} {:instruction float_max} {:instruction integer_yankdup} {:instruction float_swap} {:instruction 13.387114346091792} {:instruction 52} {:instruction float_shove})
Best program: (in1 integer_max float_dup_items float_div float_yankdup float_inc float_yankdup float_inc float_div float_inc float_div float_inc float_rot float_inc float_inc float_max float_inc float_yankdup float_inc integer_rot float_inc integer_swap float_inc float_div float_inc float_rot float_inc float_inc float_div float_inc float_yankdup integer_mod integer_div float_mult float_dup_items float_div float_yankdup float_inc float_yankdup float_mult float_inc float_mult float_dup_items float_div float_inc float_yankdup float_inc float_yankdup float_inc float_yankdup float_inc integer_mod float_inc float_inc float_yankdup float_div integer_flush float_yankdup float_mult float_dup_items float_div float_inc integer_dup_items integer_sub integer_mod integer_div float_mult float_dup_items float_div float_inc float_swap print_float float_max integer_yankdup float_swap 13.387114346091792 52 float_shove)
Errors: [34.0 13 79.0 13 91.0 12 49.0 2 67.0 3 98.0 2 26.0 2 50.0 2 36.0 2 73.0 2 0.0 0 30.0 2 8.0 1 6.0 2 43.0 3 57.0 2 21.0 2 25.0 2 18.0 3 15.0 2 29.0 2 5.0 3 47.0 2 73.0 3 40.0 1]
Total: 1103.0
Mean: 22.06
Genome size: 78
Size: 79
Percent parens: 0.013
--- Population Statistics ---
Average total errors in population: 3152.6718696
Median total errors in population: 1103.0
Error averages by case: (113.29024470000007 12.663 142.99820640000002 12.766 163.41788980000007 12.03 135.06639720000013 3.857 149.71601230000016 4.414 167.97585549999997 3.508 111.91672409999995 3.519 131.1660644000001 3.756 116.15878360000006 3.648 147.18076110000007 3.396 86.86742090000001 2.336 118.23143099999993 4.074 92.38060740000006 2.747 83.00620580000003 3.499 127.0456223 4.423 142.1237511999999 4.068 104.58725460000001 3.438 96.13940200000003 3.434 105.00457579999997 4.364 104.7981102 3.551 95.73016110000003 4.371 95.13202130000005 4.225 124.78294349999992 3.525 156.98151960000004 4.464 121.77590379999998 3.122)
Error minima by case: (0.0473 7 50.0995 1 15.1629 8 36.0 2 54.0 2 0.3388 1 13.0 1 26.0 2 12.4945 1 0.1717 1 0.0 0 6.0 2 1.0 1 0.0 0 30.0 2 33.0 2 1.0 1 0.132 1 4.0 1 2.0 1 5.0102 1 0.0 0 2.8325 1 60.0 1 16.0 1)
Average genome size in population (length): 95.401
Average program size in population (points): 96.401
Average percent parens in population: 0.011
Minimum age in population: 47.17281175777316
Maximum age in population: 51.6612229134189
Average age in population: 49.74695306253701
Median age in population: 49.79991401766893
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 4
Genome diversity (% unique Plush genomes):	 0.921
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 4
Syntactic diversity (% unique Push programs):	 0.921
Total error diversity:				 0.102
Error (vector) diversity:			 0.112
Behavioral diversity:				 0.113
--- Run Statistics ---
Number of program evaluations used so far: 35000
Number of point (instruction) evaluations so far: 60518709
--- Timings ---
Current time: 1529614981761 milliseconds
Total Time:         126.6 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        46.2 seconds, 36.5%
Fitness Testing:     62.4 seconds, 49.3%
Report:              17.9 seconds, 14.2%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 34
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 35
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 35
;;******************************
;; -*- Number IO problem report - generation 35
Test total error for best: 59131.0
Test mean error for best: 29.56550
;;------------------------------
Outputs of best individual on training cases:
Correct output: 1.9526623133   | Program output: -32.0473376867
Correct output: -70.8009773522 | Program output: 8.1990226478  
Correct output: -13.7839009431 | Program output: 77.2160990569 
Correct output: 143.8727406396 | Program output: 94.8727406396 
Correct output: 136.4396027174 | Program output: 69.4396027174 
Correct output: 18.5044280613  | Program output: 116.5044280613
Correct output: 92.0568646792  | Program output: 66.0568646792 
Correct output: 71.8873476205  | Program output: 121.8873476205
Correct output: -10.8388749243 | Program output: -46.8388749243
Correct output: 0.9299825981   | Program output: 73.9299825981 
Correct output: -26.7840412284 | Program output: -26.7840412284
Correct output: -102.1264221267 | Program output: -72.1264221267
Correct output: 40.8061668642  | Program output: 48.8061668642 
Correct output: -5.2544966331  | Program output: -11.2544966331
Correct output: 102.9855886244 | Program output: 59.9855886244 
Correct output: -118.0507723766 | Program output: -61.0507723766
Correct output: 55.9371769928  | Program output: 76.9371769928 
Correct output: 4.2657989984   | Program output: 29.2657989984 
Correct output: 96.7057987603  | Program output: 114.7057987603
Correct output: 122.162446611  | Program output: 107.162446611 
Correct output: 30.0102027945  | Program output: 1.0102027945  
Correct output: 104.5822387035 | Program output: 99.5822387035 
Correct output: -1.5538743366  | Program output: -48.5538743366
Correct output: 166.8070496115 | Program output: 93.8070496115 
Correct output: 58.6188945281  | Program output: 98.6188945281 
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction in1} {:instruction integer_max} {:instruction integer_dup_items} {:instruction integer_sub} {:instruction float_sub} {:instruction integer_div} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_inc} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_div} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_dup_items} {:instruction float_div} {:instruction float_inc} {:instruction float_yankdup} {:instruction integer_rot} {:instruction float_yankdup} {:instruction float_inc} {:instruction float_dup_items} {:instruction float_div} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_inc} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_div} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_mult} {:instruction float_max} {:instruction float_div} {:instruction float_inc} {:instruction float_mult} {:instruction float_dup_items} {:instruction float_div} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_div} {:instruction integer_flush} {:instruction float_yankdup} {:instruction float_mult} {:instruction float_dup_items} {:instruction integer_max} {:instruction float_inc} {:instruction float_frominteger} {:instruction integer_sub} {:instruction integer_mod} {:instruction integer_div} {:instruction float_mult} {:instruction float_dup_items} {:instruction float_div} {:instruction float_inc} {:instruction float_yankdup} {:instruction print_float} {:instruction float_max} {:instruction integer_yankdup} {:instruction integer_min} {:instruction float_cos} {:instruction float_dec} {:instruction float_mod} {:instruction integer_yankdup} {:instruction integer_shove} {:instruction float_cos} {:instruction float_max} {:instruction integer_fromfloat} {:instruction print_float} {:instruction integer_yankdup} {:instruction -44} {:instruction float_pop} {:instruction integer_yankdup} {:instruction integer_shove} {:instruction float_cos} {:instruction float_dec} {:instruction integer_dup})
Best program: (in1 integer_max integer_dup_items integer_sub float_sub integer_div float_inc float_yankdup float_inc float_yankdup float_inc float_inc float_yankdup float_div float_inc float_yankdup float_dup_items float_div float_inc float_yankdup integer_rot float_yankdup float_inc float_dup_items float_div float_inc float_yankdup float_inc float_yankdup float_inc float_inc float_yankdup float_div float_inc float_yankdup float_inc float_yankdup float_inc float_yankdup float_inc float_yankdup float_mult float_max float_div float_inc float_mult float_dup_items float_div float_inc float_yankdup float_inc float_yankdup float_inc float_yankdup float_inc float_inc float_inc float_yankdup float_div integer_flush float_yankdup float_mult float_dup_items integer_max float_inc float_frominteger integer_sub integer_mod integer_div float_mult float_dup_items float_div float_inc float_yankdup print_float float_max integer_yankdup integer_min float_cos float_dec float_mod integer_yankdup integer_shove float_cos float_max integer_fromfloat print_float integer_yankdup -44 float_pop integer_yankdup integer_shove float_cos float_dec integer_dup)
Errors: [34.0 13 79.0 13 91.0 12 49.0 2 67.0 3 98.0 2 26.0 2 50.0 2 36.0 2 73.0 2 0.0 0 30.0 2 8.0 1 6.0 2 43.0 3 57.0 2 21.0 2 25.0 2 18.0 3 15.0 2 29.0 2 5.0 3 47.0 2 73.0 3 40.0 1]
Total: 1103.0
Mean: 22.06
Genome size: 95
Size: 96
Percent parens: 0.010
--- Population Statistics ---
Average total errors in population: 2752.5349130999994
Median total errors in population: 1103.0
Error averages by case: (97.83330780000004 12.705 131.9789871000001 12.755 147.56378500000005 12.021 118.39618260000006 3.635 133.4745408 4.225 152.27692629999996 3.272 95.10719519999999 3.307 113.92968630000003 3.532 100.43176430000005 3.418 130.97362850000007 3.207 70.48395010000002 2.098 100.76258829999995 3.842 75.7299418 2.5 68.65053960000002 3.257 110.5437134 4.219 125.22283909999999 3.841 87.86242100000004 3.217 84.3823358 3.219 87.88080160000004 4.153 87.49034380000002 3.346 84.96184240000001 4.202 77.721983 3.99 109.34217949999997 3.309 140.71109300000003 4.253 104.42233680000004 2.877)
Error minima by case: (0.1455 8 55.0 1 12.5393 8 25.3515 2 32.8775 2 0.4541 1 19.0 1 7.3205 2 8.8792 1 0.1724 1 0.0 0 6.0 2 0.0 0 0.0 0 36.0 2 33.0 2 1.0 1 0.0116 1 1.0 1 8.0 1 1.1019 1 0.0 0 0.3372 1 46.1574 2 16.0 1)
Average genome size in population (length): 94.8
Average program size in population (points): 95.8
Average percent parens in population: 0.011
Minimum age in population: 49.08847392071038
Maximum age in population: 53.32271887647221
Average age in population: 51.11932086018322
Median age in population: 51.16136159465532
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 6
Genome diversity (% unique Plush genomes):	 0.914
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 6
Syntactic diversity (% unique Push programs):	 0.914
Total error diversity:				 0.1
Error (vector) diversity:			 0.11
Behavioral diversity:				 0.111
--- Run Statistics ---
Number of program evaluations used so far: 36000
Number of point (instruction) evaluations so far: 62888759
--- Timings ---
Current time: 1529614985793 milliseconds
Total Time:         130.6 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        47.5 seconds, 36.4%
Fitness Testing:     64.6 seconds, 49.4%
Report:              18.4 seconds, 14.1%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 35
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 36
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 36
;;******************************
;; -*- Number IO problem report - generation 36
Test total error for best: 59131.0
Test mean error for best: 29.56550
;;------------------------------
Outputs of best individual on training cases:
Correct output: 1.9526623133   | Program output: -32.0473376867
Correct output: -70.8009773522 | Program output: 8.1990226478  
Correct output: -13.7839009431 | Program output: 77.2160990569 
Correct output: 143.8727406396 | Program output: 94.8727406396 
Correct output: 136.4396027174 | Program output: 69.4396027174 
Correct output: 18.5044280613  | Program output: 116.5044280613
Correct output: 92.0568646792  | Program output: 66.0568646792 
Correct output: 71.8873476205  | Program output: 121.8873476205
Correct output: -10.8388749243 | Program output: -46.8388749243
Correct output: 0.9299825981   | Program output: 73.9299825981 
Correct output: -26.7840412284 | Program output: -26.7840412284
Correct output: -102.1264221267 | Program output: -72.1264221267
Correct output: 40.8061668642  | Program output: 48.8061668642 
Correct output: -5.2544966331  | Program output: -11.2544966331
Correct output: 102.9855886244 | Program output: 59.9855886244 
Correct output: -118.0507723766 | Program output: -61.0507723766
Correct output: 55.9371769928  | Program output: 76.9371769928 
Correct output: 4.2657989984   | Program output: 29.2657989984 
Correct output: 96.7057987603  | Program output: 114.7057987603
Correct output: 122.162446611  | Program output: 107.162446611 
Correct output: 30.0102027945  | Program output: 1.0102027945  
Correct output: 104.5822387035 | Program output: 99.5822387035 
Correct output: -1.5538743366  | Program output: -48.5538743366
Correct output: 166.8070496115 | Program output: 93.8070496115 
Correct output: 58.6188945281  | Program output: 98.6188945281 
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction in1} {:instruction integer_max} {:instruction integer_dup_items} {:instruction integer_sub} {:instruction integer_mod} {:instruction integer_div} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_inc} {:instruction float_div} {:instruction float_inc} {:instruction integer_min} {:instruction float_inc} {:instruction float_rot} {:instruction float_inc} {:instruction float_inc} {:instruction float_div} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_inc} {:instruction float_div} {:instruction float_inc} {:instruction float_div} {:instruction float_inc} {:instruction float_rot} {:instruction float_inc} {:instruction float_inc} {:instruction float_div} {:instruction float_inc} {:instruction float_yankdup} {:instruction integer_mod} {:instruction integer_div} {:instruction float_mult} {:instruction float_dup_items} {:instruction float_div} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_inc} {:instruction integer_mod} {:instruction float_inc} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_div} {:instruction integer_flush} {:instruction float_yankdup} {:instruction float_mult} {:instruction float_dup_items} {:instruction integer_add} {:instruction float_inc} {:instruction integer_dup_items} {:instruction integer_sub} {:instruction integer_mod} {:instruction float_rot} {:instruction float_mult} {:instruction float_dup_items} {:instruction float_div} {:instruction float_inc} {:instruction float_yankdup} {:instruction print_float} {:instruction float_max} {:instruction integer_sub} {:instruction integer_mod} {:instruction integer_div} {:instruction float_mult} {:instruction float_dup_items} {:instruction float_div} {:instruction float_inc} {:instruction float_yankdup} {:instruction print_float} {:instruction float_max} {:instruction integer_yankdup} {:instruction integer_min} {:instruction float_dec} {:instruction integer_yankdup} {:instruction integer_min} {:instruction float_cos} {:instruction float_dec} {:instruction integer_stackdepth} {:instruction integer_max} {:instruction float_max} {:instruction integer_stackdepth} {:instruction integer_max})
Best program: (in1 integer_max integer_dup_items integer_sub integer_mod integer_div float_inc float_yankdup float_inc float_yankdup float_inc float_div float_inc integer_min float_inc float_rot float_inc float_inc float_div float_inc float_yankdup float_inc float_yankdup float_inc float_div float_inc float_div float_inc float_rot float_inc float_inc float_div float_inc float_yankdup integer_mod integer_div float_mult float_dup_items float_div float_inc float_yankdup float_inc float_inc float_inc float_yankdup float_inc integer_mod float_inc float_inc float_yankdup float_div integer_flush float_yankdup float_mult float_dup_items integer_add float_inc integer_dup_items integer_sub integer_mod float_rot float_mult float_dup_items float_div float_inc float_yankdup print_float float_max integer_sub integer_mod integer_div float_mult float_dup_items float_div float_inc float_yankdup print_float float_max integer_yankdup integer_min float_dec integer_yankdup integer_min float_cos float_dec integer_stackdepth integer_max float_max integer_stackdepth integer_max)
Errors: [34.0 13 79.0 13 91.0 12 49.0 2 67.0 3 98.0 2 26.0 2 50.0 2 36.0 2 73.0 2 0.0 0 30.0 2 8.0 1 6.0 2 43.0 3 57.0 2 21.0 2 25.0 2 18.0 3 15.0 2 29.0 2 5.0 3 47.0 2 73.0 3 40.0 1]
Total: 1103.0
Mean: 22.06
Genome size: 90
Size: 91
Percent parens: 0.011
--- Population Statistics ---
Average total errors in population: 2846.4197342
Median total errors in population: 1103.0
Error averages by case: (101.29137720000006 12.674 131.3981235000001 12.706 151.18816460000008 12.037 123.17229420000008 3.765 137.90706770000003 4.342 155.61539420000003 3.424 99.55838359999998 3.416 118.71760940000004 3.687 104.26817890000008 3.546 134.75510860000009 3.33 74.90683670000001 2.226 106.34715329999995 3.953 79.77310950000003 2.644 70.62949820000003 3.385 114.97761099999998 4.349 130.52222959999995 3.978 91.95437259999999 3.364 84.2850134 3.356 92.56643240000001 4.233 92.55244990000006 3.472 83.10661750000003 4.265 82.66739330000001 4.137 112.48870789999995 3.452 145.37980319999997 4.371 109.24680380000002 3.032)
Error minima by case: (0.0473 7 10.3487 1 11.8999 7 36.9172 1 29.484 2 0.4443 1 14.8987 1 26.0 2 9.8792 1 0.3249 1 0.0 0 6.0 2 0.0 0 0.0 0 3.97 2 33.0 2 2.0 1 0.1165 1 0.0 0 5.0 1 1.0102 1 0.0 0 1.2024 1 59.8515 2 16.0 1)
Average genome size in population (length): 94.26
Average program size in population (points): 95.26
Average percent parens in population: 0.011
Minimum age in population: 50.19350443803705
Maximum age in population: 54.54657881127787
Average age in population: 52.54022805081605
Median age in population: 52.59124971163692
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 6
Genome diversity (% unique Plush genomes):	 0.923
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 6
Syntactic diversity (% unique Push programs):	 0.923
Total error diversity:				 0.102
Error (vector) diversity:			 0.111
Behavioral diversity:				 0.112
--- Run Statistics ---
Number of program evaluations used so far: 37000
Number of point (instruction) evaluations so far: 65245284
--- Timings ---
Current time: 1529614989801 milliseconds
Total Time:         134.6 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        48.8 seconds, 36.3%
Fitness Testing:     66.7 seconds, 49.5%
Report:              19.0 seconds, 14.1%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 36
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 37
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 37
;;******************************
;; -*- Number IO problem report - generation 37
Test total error for best: 59131.0
Test mean error for best: 29.56550
;;------------------------------
Outputs of best individual on training cases:
Correct output: 1.9526623133   | Program output: -32.0473376867
Correct output: -70.8009773522 | Program output: 8.1990226478  
Correct output: -13.7839009431 | Program output: 77.2160990569 
Correct output: 143.8727406396 | Program output: 94.8727406396 
Correct output: 136.4396027174 | Program output: 69.4396027174 
Correct output: 18.5044280613  | Program output: 116.5044280613
Correct output: 92.0568646792  | Program output: 66.0568646792 
Correct output: 71.8873476205  | Program output: 121.8873476205
Correct output: -10.8388749243 | Program output: -46.8388749243
Correct output: 0.9299825981   | Program output: 73.9299825981 
Correct output: -26.7840412284 | Program output: -26.7840412284
Correct output: -102.1264221267 | Program output: -72.1264221267
Correct output: 40.8061668642  | Program output: 48.8061668642 
Correct output: -5.2544966331  | Program output: -11.2544966331
Correct output: 102.9855886244 | Program output: 59.9855886244 
Correct output: -118.0507723766 | Program output: -61.0507723766
Correct output: 55.9371769928  | Program output: 76.9371769928 
Correct output: 4.2657989984   | Program output: 29.2657989984 
Correct output: 96.7057987603  | Program output: 114.7057987603
Correct output: 122.162446611  | Program output: 107.162446611 
Correct output: 30.0102027945  | Program output: 1.0102027945  
Correct output: 104.5822387035 | Program output: 99.5822387035 
Correct output: -1.5538743366  | Program output: -48.5538743366
Correct output: 166.8070496115 | Program output: 93.8070496115 
Correct output: 58.6188945281  | Program output: 98.6188945281 
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction in1} {:instruction integer_max} {:instruction integer_dup_items} {:instruction integer_sub} {:instruction integer_mod} {:instruction integer_div} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_inc} {:instruction float_div} {:instruction float_inc} {:instruction float_div} {:instruction float_inc} {:instruction float_rot} {:instruction float_inc} {:instruction float_inc} {:instruction float_div} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_inc} {:instruction float_div} {:instruction float_inc} {:instruction float_div} {:instruction float_inc} {:instruction float_rot} {:instruction float_inc} {:instruction float_inc} {:instruction float_dup_items} {:instruction float_inc} {:instruction float_yankdup} {:instruction integer_mod} {:instruction integer_div} {:instruction float_mult} {:instruction float_dup_items} {:instruction float_div} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_inc} {:instruction float_yankdup} {:instruction integer_stackdepth} {:instruction float_inc} {:instruction float_mult} {:instruction float_dup_items} {:instruction float_div} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_dup_items} {:instruction float_div} {:instruction float_div} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_dup_items} {:instruction float_div} {:instruction float_inc} {:instruction float_mult} {:instruction float_add} {:instruction float_div} {:instruction float_inc} {:instruction float_inc} {:instruction float_yank} {:instruction float_inc} {:instruction float_yankdup} {:instruction print_float} {:instruction float_flush} {:instruction integer_stackdepth} {:instruction integer_rot} {:instruction integer_fromfloat} {:instruction integer_add} {:instruction in2} {:instruction float_min} {:instruction float_dup_times} {:instruction integer_mod} {:instruction float_add} {:instruction float_mult} {:instruction integer_max} {:instruction float_div} {:instruction float_inc} {:instruction float_div} {:instruction print_float} {:instruction float_max} {:instruction integer_shove} {:instruction integer_min} {:instruction float_inc} {:instruction float_yankdup} {:instruction print_float} {:instruction float_max} {:instruction integer_yankdup} {:instruction integer_min} {:instruction float_cos} {:instruction float_dec} {:instruction float_swap} {:instruction integer_max} {:instruction float_yank} {:instruction integer_fromfloat} {:instruction print_float} {:instruction float_dec} {:instruction -44} {:instruction float_pop} {:instruction integer_shove} {:instruction float_swap} {:instruction in2} {:instruction 52} {:instruction float_shove} {:instruction integer_stackdepth} {:instruction -44} {:instruction float_dup_times} {:instruction integer_shove} {:instruction integer_add})
Best program: (in1 integer_max integer_dup_items integer_sub integer_mod integer_div float_inc float_yankdup float_inc float_yankdup float_inc float_div float_inc float_div float_inc float_rot float_inc float_inc float_div float_inc float_yankdup float_inc float_yankdup float_inc float_div float_inc float_div float_inc float_rot float_inc float_inc float_dup_items float_inc float_yankdup integer_mod integer_div float_mult float_dup_items float_div float_inc float_yankdup float_inc float_yankdup integer_stackdepth float_inc float_mult float_dup_items float_div float_inc float_yankdup float_dup_items float_div float_div float_inc float_yankdup float_dup_items float_div float_inc float_mult float_add float_div float_inc float_inc float_yank float_inc float_yankdup print_float float_flush integer_stackdepth integer_rot integer_fromfloat integer_add in2 float_min float_dup_times integer_mod float_add float_mult integer_max float_div float_inc float_div print_float float_max integer_shove integer_min float_inc float_yankdup print_float float_max integer_yankdup integer_min float_cos float_dec float_swap integer_max float_yank integer_fromfloat print_float float_dec -44 float_pop integer_shove float_swap in2 52 float_shove integer_stackdepth -44 float_dup_times integer_shove integer_add)
Errors: [34.0 13 79.0 13 91.0 12 49.0 2 67.0 3 98.0 2 26.0 2 50.0 2 36.0 2 73.0 2 0.0 0 30.0 2 8.0 1 6.0 2 43.0 3 57.0 2 21.0 2 25.0 2 18.0 3 15.0 2 29.0 2 5.0 3 47.0 2 73.0 3 40.0 1]
Total: 1103.0
Mean: 22.06
Genome size: 112
Size: 113
Percent parens: 0.009
--- Population Statistics ---
Average total errors in population: 2788.7146079000004
Median total errors in population: 1103.0
Error averages by case: (97.96199480000001 12.687 133.7583951000001 12.743 147.58314459999997 12.017 120.62130490000008 3.743 135.31707099999997 4.373 152.14518159999997 3.439 96.87508110000002 3.445 115.25629990000007 3.681 100.91331790000007 3.568 131.1931193000001 3.389 71.4736875 2.21 102.28115859999996 3.961 77.03154339999998 2.656 70.27627560000006 3.405 112.20077230000001 4.373 126.54078419999995 3.969 89.26865619999998 3.399 85.25555400000002 3.369 90.02150370000001 4.288 89.89188149999998 3.493 87.1909107 4.095 80.03332619999999 4.192 109.71353389999992 3.473 142.87236469999996 4.399 105.66174519999998 3.009)
Error minima by case: (0.0473 7 19.4055 1 9.8193 8 17.6474 2 35.6474 2 0.3889 1 5.3526 1 23.483 2 4.6474 1 0.2168 1 0.0 0 3.483 2 0.0 0 0.0 0 11.6474 2 25.3742 2 5.0 1 0.1291 1 2.0 1 9.0 1 2.3526 1 0.0 0 0.1075 1 41.6474 2 13.483 1)
Average genome size in population (length): 93.343
Average program size in population (points): 94.343
Average percent parens in population: 0.011
Minimum age in population: 51.36322720407043
Maximum age in population: 56.03564907431428
Average age in population: 53.91740406802708
Median age in population: 53.96817322682909
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 10
Genome diversity (% unique Plush genomes):	 0.902
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 10
Syntactic diversity (% unique Push programs):	 0.902
Total error diversity:				 0.101
Error (vector) diversity:			 0.111
Behavioral diversity:				 0.112
--- Run Statistics ---
Number of program evaluations used so far: 38000
Number of point (instruction) evaluations so far: 67578909
--- Timings ---
Current time: 1529614993933 milliseconds
Total Time:         138.6 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        50.2 seconds, 36.2%
Fitness Testing:     68.8 seconds, 49.6%
Report:              19.5 seconds, 14.1%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 37
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 38
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 38
;;******************************
;; -*- Number IO problem report - generation 38
Test total error for best: 59131.0
Test mean error for best: 29.56550
;;------------------------------
Outputs of best individual on training cases:
Correct output: 1.9526623133   | Program output: -32.0473376867
Correct output: -70.8009773522 | Program output: 8.1990226478  
Correct output: -13.7839009431 | Program output: 77.2160990569 
Correct output: 143.8727406396 | Program output: 94.8727406396 
Correct output: 136.4396027174 | Program output: 69.4396027174 
Correct output: 18.5044280613  | Program output: 116.5044280613
Correct output: 92.0568646792  | Program output: 66.0568646792 
Correct output: 71.8873476205  | Program output: 121.8873476205
Correct output: -10.8388749243 | Program output: -46.8388749243
Correct output: 0.9299825981   | Program output: 73.9299825981 
Correct output: -26.7840412284 | Program output: -26.7840412284
Correct output: -102.1264221267 | Program output: -72.1264221267
Correct output: 40.8061668642  | Program output: 48.8061668642 
Correct output: -5.2544966331  | Program output: -11.2544966331
Correct output: 102.9855886244 | Program output: 59.9855886244 
Correct output: -118.0507723766 | Program output: -61.0507723766
Correct output: 55.9371769928  | Program output: 76.9371769928 
Correct output: 4.2657989984   | Program output: 29.2657989984 
Correct output: 96.7057987603  | Program output: 114.7057987603
Correct output: 122.162446611  | Program output: 107.162446611 
Correct output: 30.0102027945  | Program output: 1.0102027945  
Correct output: 104.5822387035 | Program output: 99.5822387035 
Correct output: -1.5538743366  | Program output: -48.5538743366
Correct output: 166.8070496115 | Program output: 93.8070496115 
Correct output: 58.6188945281  | Program output: 98.6188945281 
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction in1} {:instruction integer_max} {:instruction float_yankdup} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_inc} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_div} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_dup_items} {:instruction float_div} {:instruction float_inc} {:instruction float_yankdup} {:instruction integer_rot} {:instruction float_yankdup} {:instruction float_inc} {:instruction float_dup_items} {:instruction print_integer} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_inc} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_div} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_mult} {:instruction float_dup_items} {:instruction float_yankdup} {:instruction float_inc} {:instruction float_div} {:instruction float_inc} {:instruction float_inc} {:instruction float_yank} {:instruction float_inc} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_dup_items} {:instruction float_div} {:instruction float_inc} {:instruction float_mult} {:instruction integer_max} {:instruction float_div} {:instruction float_inc} {:instruction float_inc} {:instruction float_yank} {:instruction float_inc} {:instruction float_yankdup} {:instruction print_float} {:instruction tag_float_856} {:instruction 52} {:instruction float_shove})
Best program: (in1 integer_max float_yankdup float_inc float_yankdup float_inc float_inc float_yankdup float_div float_inc float_yankdup float_inc float_yankdup float_dup_items float_div float_inc float_yankdup integer_rot float_yankdup float_inc float_dup_items print_integer float_inc float_yankdup float_inc float_yankdup float_inc float_inc float_yankdup float_div float_inc float_yankdup float_inc float_yankdup float_inc float_yankdup float_inc float_yankdup float_mult float_dup_items float_yankdup float_inc float_div float_inc float_inc float_yank float_inc float_inc float_yankdup float_dup_items float_div float_inc float_mult integer_max float_div float_inc float_inc float_yank float_inc float_yankdup print_float tag_float_856 52 float_shove)
Errors: [34.0 13 79.0 13 91.0 12 49.0 2 67.0 3 98.0 2 26.0 2 50.0 2 36.0 2 73.0 2 0.0 0 30.0 2 8.0 1 6.0 2 43.0 3 57.0 2 21.0 2 25.0 2 18.0 3 15.0 2 29.0 2 5.0 3 47.0 2 73.0 3 40.0 1]
Total: 1103.0
Mean: 22.06
Genome size: 64
Size: 65
Percent parens: 0.015
--- Population Statistics ---
Average total errors in population: 2813.9787615
Median total errors in population: 1103.0
Error averages by case: (99.91578260000001 12.745 134.22124330000005 12.739 151.76351139999997 12.05 119.8154091000001 3.582 134.9128757 4.204 156.80546840000002 3.282 96.68966789999999 3.303 118.0128822 3.557 102.47655130000004 3.41 135.22580580000005 3.183 72.54816240000001 2.043 104.16309219999997 3.826 77.6368527 2.486 70.74762670000003 3.252 112.07024210000002 4.208 128.36271079999997 3.808 89.81295970000001 3.192 87.85915380000004 3.207 89.76678740000003 4.165 89.11648459999999 3.317 86.72732959999996 4.046 79.41614469999998 4.045 111.48749479999998 3.306 141.92325239999997 4.236 108.4642699 2.845)
Error minima by case: (0.6548 7 6.1013 1 14.7839 8 16.0452 1 9.213 2 0.4347 1 15.0569 1 26.0 2 9.6853 1 0.07 1 0.0 0 6.0 2 1.0 1 0.0 0 8.0144 2 29.0508 2 0.0 0 0.1086 1 0.0 0 5.8301 1 1.1121 1 0.0 0 2.1075 1 4.193 2 16.0 1)
Average genome size in population (length): 92.694
Average program size in population (points): 93.694
Average percent parens in population: 0.011
Minimum age in population: 53.12401660179603
Maximum age in population: 57.43922909427056
Average age in population: 55.33671806469721
Median age in population: 55.37497742193227
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 7
Genome diversity (% unique Plush genomes):	 0.916
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 7
Syntactic diversity (% unique Push programs):	 0.916
Total error diversity:				 0.096
Error (vector) diversity:			 0.104
Behavioral diversity:				 0.105
--- Run Statistics ---
Number of program evaluations used so far: 39000
Number of point (instruction) evaluations so far: 69896384
--- Timings ---
Current time: 1529614997823 milliseconds
Total Time:         142.7 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        51.5 seconds, 36.1%
Fitness Testing:     70.9 seconds, 49.7%
Report:              20.2 seconds, 14.1%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 38
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 39
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 39
;;******************************
;; -*- Number IO problem report - generation 39
Test total error for best: 59131.0
Test mean error for best: 29.56550
;;------------------------------
Outputs of best individual on training cases:
Correct output: 1.9526623133   | Program output: -32.0473376867
Correct output: -70.8009773522 | Program output: 8.1990226478  
Correct output: -13.7839009431 | Program output: 77.2160990569 
Correct output: 143.8727406396 | Program output: 94.8727406396 
Correct output: 136.4396027174 | Program output: 69.4396027174 
Correct output: 18.5044280613  | Program output: 116.5044280613
Correct output: 92.0568646792  | Program output: 66.0568646792 
Correct output: 71.8873476205  | Program output: 121.8873476205
Correct output: -10.8388749243 | Program output: -46.8388749243
Correct output: 0.9299825981   | Program output: 73.9299825981 
Correct output: -26.7840412284 | Program output: -26.7840412284
Correct output: -102.1264221267 | Program output: -72.1264221267
Correct output: 40.8061668642  | Program output: 48.8061668642 
Correct output: -5.2544966331  | Program output: -11.2544966331
Correct output: 102.9855886244 | Program output: 59.9855886244 
Correct output: -118.0507723766 | Program output: -61.0507723766
Correct output: 55.9371769928  | Program output: 76.9371769928 
Correct output: 4.2657989984   | Program output: 29.2657989984 
Correct output: 96.7057987603  | Program output: 114.7057987603
Correct output: 122.162446611  | Program output: 107.162446611 
Correct output: 30.0102027945  | Program output: 1.0102027945  
Correct output: 104.5822387035 | Program output: 99.5822387035 
Correct output: -1.5538743366  | Program output: -48.5538743366
Correct output: 166.8070496115 | Program output: 93.8070496115 
Correct output: 58.6188945281  | Program output: 98.6188945281 
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction in1} {:instruction integer_max} {:instruction integer_dup_items} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_inc} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_div} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_dup_items} {:instruction float_div} {:instruction float_inc} {:instruction float_yankdup} {:instruction integer_rot} {:instruction float_yankdup} {:instruction float_inc} {:instruction float_dup_items} {:instruction float_div} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_inc} {:instruction integer_dup_items} {:instruction float_inc} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_div} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_inc} {:instruction float_inc} {:instruction float_mult} {:instruction float_dup_items} {:instruction float_yankdup} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_inc} {:instruction integer_mod} {:instruction float_inc} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_div} {:instruction integer_flush} {:instruction float_yankdup} {:instruction float_mult} {:instruction float_dup_items} {:instruction integer_add} {:instruction float_inc} {:instruction integer_dup_items} {:instruction integer_sub} {:instruction integer_mod} {:instruction integer_div} {:instruction float_mult} {:instruction float_dup_items} {:instruction float_div} {:instruction float_inc} {:instruction float_yankdup} {:instruction print_float} {:instruction float_max} {:instruction integer_yankdup} {:instruction integer_dup_items} {:instruction integer_sub} {:instruction integer_mod} {:instruction integer_div} {:instruction float_mult} {:instruction float_dup_items} {:instruction integer_yankdup} {:instruction float_inc} {:instruction float_yankdup} {:instruction print_float} {:instruction print_float} {:instruction float_max} {:instruction integer_yankdup} {:instruction integer_min} {:instruction float_dec} {:instruction integer_yankdup} {:instruction integer_min} {:instruction float_cos} {:instruction float_dec} {:instruction integer_stackdepth} {:instruction integer_max} {:instruction float_max} {:instruction integer_stackdepth} {:instruction integer_max})
Best program: (in1 integer_max integer_dup_items float_inc float_yankdup float_inc float_yankdup float_inc float_inc float_yankdup float_div float_inc float_yankdup float_dup_items float_div float_inc float_yankdup integer_rot float_yankdup float_inc float_dup_items float_div float_inc float_yankdup float_inc integer_dup_items float_inc float_inc float_yankdup float_div float_inc float_yankdup float_inc float_yankdup float_inc float_yankdup float_inc float_inc float_mult float_dup_items float_yankdup float_inc float_yankdup float_inc float_yankdup float_inc float_yankdup float_inc integer_mod float_inc float_inc float_yankdup float_div integer_flush float_yankdup float_mult float_dup_items integer_add float_inc integer_dup_items integer_sub integer_mod integer_div float_mult float_dup_items float_div float_inc float_yankdup print_float float_max integer_yankdup integer_dup_items integer_sub integer_mod integer_div float_mult float_dup_items integer_yankdup float_inc float_yankdup print_float print_float float_max integer_yankdup integer_min float_dec integer_yankdup integer_min float_cos float_dec integer_stackdepth integer_max float_max integer_stackdepth integer_max)
Errors: [34.0 13 79.0 13 91.0 12 49.0 2 67.0 3 98.0 2 26.0 2 50.0 2 36.0 2 73.0 2 0.0 0 30.0 2 8.0 1 6.0 2 43.0 3 57.0 2 21.0 2 25.0 2 18.0 3 15.0 2 29.0 2 5.0 3 47.0 2 73.0 3 40.0 1]
Total: 1103.0
Mean: 22.06
Genome size: 95
Size: 96
Percent parens: 0.010
--- Population Statistics ---
Average total errors in population: 3077.3428619
Median total errors in population: 1103.0
Error averages by case: (111.26263199999998 12.731 144.4732094000001 12.763 159.78923240000003 12.062 131.11633940000004 3.725 146.24773650000003 4.294 164.98297760000005 3.325 108.30484929999999 3.367 126.37564989999998 3.611 114.42347660000003 3.49 143.4436150000001 3.229 83.98373489999999 2.166 112.2151105 3.895 89.3344841 2.561 82.92707070000002 3.318 123.86518480000001 4.297 136.31002519999998 3.919 101.46576219999997 3.292 96.4060349 3.26 101.29711110000001 4.209 100.61118260000002 3.378 99.12011890000004 4.153 90.9660598 4.056 122.61478629999995 3.365 153.1111141 4.317 116.97036370000004 2.942)
Error minima by case: (0.0473 8 3.6266 1 12.3419 8 42.0 2 60.0 2 0.058 1 19.0 1 25.3734 2 8.8792 1 0.0681 1 0.0 0 6.0 2 0.0 0 0.0 0 36.0 2 18.3734 2 2.0 1 0.1291 1 0.0 0 8.0 1 0.1223 1 0.0 0 0.1075 1 66.0 2 16.0 1)
Average genome size in population (length): 92.515
Average program size in population (points): 93.515
Average percent parens in population: 0.011
Minimum age in population: 54.12754174438305
Maximum age in population: 59.09862548463207
Average age in population: 56.76820343373049
Median age in population: 56.84638449118938
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 7
Genome diversity (% unique Plush genomes):	 0.933
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 7
Syntactic diversity (% unique Push programs):	 0.933
Total error diversity:				 0.086
Error (vector) diversity:			 0.094
Behavioral diversity:				 0.095
--- Run Statistics ---
Number of program evaluations used so far: 40000
Number of point (instruction) evaluations so far: 72209334
--- Timings ---
Current time: 1529615001804 milliseconds
Total Time:         146.6 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        52.8 seconds, 36.0%
Fitness Testing:     73.0 seconds, 49.8%
Report:              20.7 seconds, 14.1%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 39
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 40
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 40
;;******************************
;; -*- Number IO problem report - generation 40
Test total error for best: 59131.0
Test mean error for best: 29.56550
;;------------------------------
Outputs of best individual on training cases:
Correct output: 1.9526623133   | Program output: -32.0473376867
Correct output: -70.8009773522 | Program output: 8.1990226478  
Correct output: -13.7839009431 | Program output: 77.2160990569 
Correct output: 143.8727406396 | Program output: 94.8727406396 
Correct output: 136.4396027174 | Program output: 69.4396027174 
Correct output: 18.5044280613  | Program output: 116.5044280613
Correct output: 92.0568646792  | Program output: 66.0568646792 
Correct output: 71.8873476205  | Program output: 121.8873476205
Correct output: -10.8388749243 | Program output: -46.8388749243
Correct output: 0.9299825981   | Program output: 73.9299825981 
Correct output: -26.7840412284 | Program output: -26.7840412284
Correct output: -102.1264221267 | Program output: -72.1264221267
Correct output: 40.8061668642  | Program output: 48.8061668642 
Correct output: -5.2544966331  | Program output: -11.2544966331
Correct output: 102.9855886244 | Program output: 59.9855886244 
Correct output: -118.0507723766 | Program output: -61.0507723766
Correct output: 55.9371769928  | Program output: 76.9371769928 
Correct output: 4.2657989984   | Program output: 29.2657989984 
Correct output: 96.7057987603  | Program output: 114.7057987603
Correct output: 122.162446611  | Program output: 107.162446611 
Correct output: 30.0102027945  | Program output: 1.0102027945  
Correct output: 104.5822387035 | Program output: 99.5822387035 
Correct output: -1.5538743366  | Program output: -48.5538743366
Correct output: 166.8070496115 | Program output: 93.8070496115 
Correct output: 58.6188945281  | Program output: 98.6188945281 
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction in1} {:instruction integer_max} {:instruction integer_dup_items} {:instruction integer_mod} {:instruction float_sub} {:instruction integer_div} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_yank} {:instruction float_dup_items} {:instruction float_div} {:instruction float_inc} {:instruction float_yankdup} {:instruction integer_rot} {:instruction float_yankdup} {:instruction float_div} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_inc} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_inc} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_div} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_mult} {:instruction float_dup_items} {:instruction float_div} {:instruction float_inc} {:instruction float_mult} {:instruction float_dup_items} {:instruction float_div} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_inc} {:instruction integer_mod} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_yank} {:instruction float_inc} {:instruction float_yankdup} {:instruction print_float} {:instruction float_flush} {:instruction integer_stackdepth} {:instruction tag_float_856} {:instruction float_add} {:instruction integer_dup_times} {:instruction in2} {:instruction float_min} {:instruction float_dup_times} {:instruction in2} {:instruction float_yankdup} {:instruction tagged_465} {:instruction integer_fromfloat} {:instruction print_float} {:instruction integer_min} {:instruction float_cos} {:instruction float_dec} {:instruction integer_stackdepth} {:instruction integer_max} {:instruction float_max} {:instruction integer_fromfloat} {:instruction print_float} {:instruction integer_stackdepth})
Best program: (in1 integer_max integer_dup_items integer_mod float_sub integer_div float_inc float_yankdup float_inc float_yankdup float_inc float_inc float_inc integer_yank float_dup_items float_div float_inc float_yankdup integer_rot float_yankdup float_div float_inc float_yankdup float_inc float_inc float_yankdup float_inc float_inc float_yankdup float_div float_inc float_yankdup float_inc float_yankdup float_inc float_yankdup float_inc float_yankdup float_mult float_dup_items float_div float_inc float_mult float_dup_items float_div float_inc float_yankdup float_inc float_yankdup float_inc float_yankdup float_inc integer_mod float_inc float_inc float_inc float_yank float_inc float_yankdup print_float float_flush integer_stackdepth tag_float_856 float_add integer_dup_times in2 float_min float_dup_times in2 float_yankdup tagged_465 integer_fromfloat print_float integer_min float_cos float_dec integer_stackdepth integer_max float_max integer_fromfloat print_float integer_stackdepth)
Errors: [34.0 13 79.0 13 91.0 12 49.0 2 67.0 3 98.0 2 26.0 2 50.0 2 36.0 2 73.0 2 0.0 0 30.0 2 8.0 1 6.0 2 43.0 3 57.0 2 21.0 2 25.0 2 18.0 3 15.0 2 29.0 2 5.0 3 47.0 2 73.0 3 40.0 1]
Total: 1103.0
Mean: 22.06
Genome size: 82
Size: 83
Percent parens: 0.012
--- Population Statistics ---
Average total errors in population: 3111.7371909
Median total errors in population: 1103.0
Error averages by case: (112.00229289999999 12.624 139.34105680000005 12.747 160.1169289 12.043 134.73405690000004 3.879 149.15220370000006 4.479 164.5219689 3.549 111.2412333 3.591 128.36817560000003 3.797 114.8785199 3.72 143.83930170000005 3.446 85.8124678 2.369 116.1620302 4.112 91.51000200000003 2.815 79.1292919 3.565 126.26016100000001 4.481 139.99642440000002 4.09 103.80910750000001 3.519 95.36293649999998 3.471 104.60823450000001 4.415 104.49358490000002 3.617 92.66042740000002 4.232 94.76892550000002 4.268 123.350275 3.584 156.63566890000004 4.509 118.93691480000003 3.123)
Error minima by case: (0.171 7 8.4441 2 13.5393 8 41.0 2 59.0 2 0.4024 1 18.0 1 6.1876 2 2.8511 1 0.0283 1 0.0 0 6.0 2 0.0 0 0.0 0 35.0 2 33.0 2 1.0 1 0.2223 1 2.0 1 7.0 1 2.8879 1 0.0 0 1.4135 1 65.0 2 4.5515 1)
Average genome size in population (length): 92.192
Average program size in population (points): 93.192
Average percent parens in population: 0.011
Minimum age in population: 55.12754174438305
Maximum age in population: 60.19178146433114
Average age in population: 58.11701326804428
Median age in population: 58.15050020781291
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 5
Genome diversity (% unique Plush genomes):	 0.901
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 5
Syntactic diversity (% unique Push programs):	 0.901
Total error diversity:				 0.107
Error (vector) diversity:			 0.114
Behavioral diversity:				 0.115
--- Run Statistics ---
Number of program evaluations used so far: 41000
Number of point (instruction) evaluations so far: 74514134
--- Timings ---
Current time: 1529615005758 milliseconds
Total Time:         150.5 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        54.2 seconds, 36.0%
Fitness Testing:     75.0 seconds, 49.8%
Report:              21.3 seconds, 14.1%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 40
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 41
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 41
;;******************************
;; -*- Number IO problem report - generation 41
Test total error for best: 59131.0
Test mean error for best: 29.56550
;;------------------------------
Outputs of best individual on training cases:
Correct output: 1.9526623133   | Program output: -32.0473376867
Correct output: -70.8009773522 | Program output: 8.1990226478  
Correct output: -13.7839009431 | Program output: 77.2160990569 
Correct output: 143.8727406396 | Program output: 94.8727406396 
Correct output: 136.4396027174 | Program output: 69.4396027174 
Correct output: 18.5044280613  | Program output: 116.5044280613
Correct output: 92.0568646792  | Program output: 66.0568646792 
Correct output: 71.8873476205  | Program output: 121.8873476205
Correct output: -10.8388749243 | Program output: -46.8388749243
Correct output: 0.9299825981   | Program output: 73.9299825981 
Correct output: -26.7840412284 | Program output: -26.7840412284
Correct output: -102.1264221267 | Program output: -72.1264221267
Correct output: 40.8061668642  | Program output: 48.8061668642 
Correct output: -5.2544966331  | Program output: -11.2544966331
Correct output: 102.9855886244 | Program output: 59.9855886244 
Correct output: -118.0507723766 | Program output: -61.0507723766
Correct output: 55.9371769928  | Program output: 76.9371769928 
Correct output: 4.2657989984   | Program output: 29.2657989984 
Correct output: 96.7057987603  | Program output: 114.7057987603
Correct output: 122.162446611  | Program output: 107.162446611 
Correct output: 30.0102027945  | Program output: 1.0102027945  
Correct output: 104.5822387035 | Program output: 99.5822387035 
Correct output: -1.5538743366  | Program output: -48.5538743366
Correct output: 166.8070496115 | Program output: 93.8070496115 
Correct output: 58.6188945281  | Program output: 98.6188945281 
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction in1} {:instruction integer_max} {:instruction integer_dup_items} {:instruction integer_mult} {:instruction integer_flush} {:instruction integer_div} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_inc} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_div} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_inc} {:instruction float_inc} {:instruction float_div} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_inc} {:instruction float_div} {:instruction float_inc} {:instruction float_div} {:instruction float_inc} {:instruction float_rot} {:instruction float_inc} {:instruction float_inc} {:instruction float_div} {:instruction float_inc} {:instruction float_yankdup} {:instruction integer_mod} {:instruction integer_div} {:instruction float_mult} {:instruction float_dup_items} {:instruction float_div} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_frominteger} {:instruction float_add} {:instruction float_div} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_inc} {:instruction integer_mod} {:instruction float_inc} {:instruction float_inc} {:instruction float_yankdup} {:instruction integer_inc} {:instruction integer_flush} {:instruction float_yankdup} {:instruction float_mult} {:instruction float_dup_items} {:instruction integer_add} {:instruction float_inc} {:instruction integer_dup_items} {:instruction integer_sub} {:instruction integer_mod} {:instruction integer_div} {:instruction float_mult} {:instruction float_dup_items} {:instruction float_div} {:instruction float_inc} {:instruction float_yankdup} {:instruction print_float} {:instruction float_max} {:instruction integer_yankdup} {:instruction integer_min} {:instruction float_cos} {:instruction float_dec} {:instruction integer_stackdepth} {:instruction integer_max} {:instruction float_max} {:instruction float_add} {:instruction integer_swap})
Best program: (in1 integer_max integer_dup_items integer_mult integer_flush integer_div float_inc float_yankdup float_inc float_yankdup float_inc float_inc float_yankdup float_div float_inc float_yankdup float_inc float_inc float_div float_inc float_yankdup float_inc float_yankdup float_inc float_div float_inc float_div float_inc float_rot float_inc float_inc float_div float_inc float_yankdup integer_mod integer_div float_mult float_dup_items float_div float_inc float_yankdup float_frominteger float_add float_div float_inc float_yankdup float_inc float_yankdup float_inc float_yankdup float_inc integer_mod float_inc float_inc float_yankdup integer_inc integer_flush float_yankdup float_mult float_dup_items integer_add float_inc integer_dup_items integer_sub integer_mod integer_div float_mult float_dup_items float_div float_inc float_yankdup print_float float_max integer_yankdup integer_min float_cos float_dec integer_stackdepth integer_max float_max float_add integer_swap)
Errors: [34.0 13 79.0 13 91.0 12 49.0 2 67.0 3 98.0 2 26.0 2 50.0 2 36.0 2 73.0 2 0.0 0 30.0 2 8.0 1 6.0 2 43.0 3 57.0 2 21.0 2 25.0 2 18.0 3 15.0 2 29.0 2 5.0 3 47.0 2 73.0 3 40.0 1]
Total: 1103.0
Mean: 22.06
Genome size: 82
Size: 83
Percent parens: 0.012
--- Population Statistics ---
Average total errors in population: 3043.313809700001
Median total errors in population: 1103.0
Error averages by case: (109.53460850000003 12.709 141.33630510000003 12.725 160.8644279000001 12.072 129.20050640000005 3.684 144.28715860000003 4.245 165.77674639999998 3.33 106.41905719999995 3.347 127.13915880000002 3.62 111.97226150000002 3.478 144.56747740000006 3.254 82.2764664 2.132 113.27621859999994 3.877 87.19603930000004 2.563 78.61684409999997 3.3 121.61974370000001 4.244 137.46536959999995 3.891 99.3686036 3.279 96.30924450000002 3.259 99.18890159999998 4.199 98.648505 3.372 93.94928870000005 4.224 89.04941220000002 4.028 120.89281509999994 3.374 151.07841600000003 4.305 117.83223350000002 2.937)
Error minima by case: (0.0473 8 44.4523 1 13.9852 7 31.7087 2 55.1899 2 0.4541 1 14.9189 1 21.3051 2 9.3497 1 0.2607 1 0.0 0 6.0 2 0.0 0 0.0 0 33.0 2 33.0 2 1.0 1 0.2181 1 0.0 0 4.9399 1 1.0526 1 0.0 0 0.434 1 1.2044 2 8.4287 1)
Average genome size in population (length): 90.951
Average program size in population (points): 91.951
Average percent parens in population: 0.011
Minimum age in population: 56.12754174438305
Maximum age in population: 61.51441810619144
Average age in population: 59.48592067357138
Median age in population: 59.53546607705766
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 6
Genome diversity (% unique Plush genomes):	 0.913
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 6
Syntactic diversity (% unique Push programs):	 0.913
Total error diversity:				 0.095
Error (vector) diversity:			 0.101
Behavioral diversity:				 0.101
--- Run Statistics ---
Number of program evaluations used so far: 42000
Number of point (instruction) evaluations so far: 76788059
--- Timings ---
Current time: 1529615009708 milliseconds
Total Time:         154.5 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        55.5 seconds, 35.9%
Fitness Testing:     77.1 seconds, 49.9%
Report:              21.8 seconds, 14.1%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 41
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 42
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 42
;;******************************
;; -*- Number IO problem report - generation 42
Test total error for best: 59131.0
Test mean error for best: 29.56550
;;------------------------------
Outputs of best individual on training cases:
Correct output: 1.9526623133   | Program output: -32.0473376867
Correct output: -70.8009773522 | Program output: 8.1990226478  
Correct output: -13.7839009431 | Program output: 77.2160990569 
Correct output: 143.8727406396 | Program output: 94.8727406396 
Correct output: 136.4396027174 | Program output: 69.4396027174 
Correct output: 18.5044280613  | Program output: 116.5044280613
Correct output: 92.0568646792  | Program output: 66.0568646792 
Correct output: 71.8873476205  | Program output: 121.8873476205
Correct output: -10.8388749243 | Program output: -46.8388749243
Correct output: 0.9299825981   | Program output: 73.9299825981 
Correct output: -26.7840412284 | Program output: -26.7840412284
Correct output: -102.1264221267 | Program output: -72.1264221267
Correct output: 40.8061668642  | Program output: 48.8061668642 
Correct output: -5.2544966331  | Program output: -11.2544966331
Correct output: 102.9855886244 | Program output: 59.9855886244 
Correct output: -118.0507723766 | Program output: -61.0507723766
Correct output: 55.9371769928  | Program output: 76.9371769928 
Correct output: 4.2657989984   | Program output: 29.2657989984 
Correct output: 96.7057987603  | Program output: 114.7057987603
Correct output: 122.162446611  | Program output: 107.162446611 
Correct output: 30.0102027945  | Program output: 1.0102027945  
Correct output: 104.5822387035 | Program output: 99.5822387035 
Correct output: -1.5538743366  | Program output: -48.5538743366
Correct output: 166.8070496115 | Program output: 93.8070496115 
Correct output: 58.6188945281  | Program output: 98.6188945281 
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction in1} {:instruction integer_max} {:instruction integer_dup_items} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_inc} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_div} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_dup_items} {:instruction float_div} {:instruction float_inc} {:instruction float_yankdup} {:instruction integer_rot} {:instruction float_yankdup} {:instruction float_inc} {:instruction float_dup_items} {:instruction float_div} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_inc} {:instruction integer_dup_items} {:instruction float_inc} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_div} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_inc} {:instruction float_inc} {:instruction float_mult} {:instruction float_dup_items} {:instruction float_yankdup} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_inc} {:instruction integer_mod} {:instruction float_inc} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_div} {:instruction integer_flush} {:instruction float_yankdup} {:instruction float_mult} {:instruction float_dup_items} {:instruction integer_add} {:instruction float_inc} {:instruction integer_dup_items} {:instruction integer_sub} {:instruction integer_mod} {:instruction integer_div} {:instruction float_mult} {:instruction float_dup_items} {:instruction float_div} {:instruction float_inc} {:instruction float_yankdup} {:instruction print_float} {:instruction float_max} {:instruction integer_yankdup} {:instruction integer_dup_items} {:instruction integer_sub} {:instruction integer_mod} {:instruction integer_div} {:instruction integer_add} {:instruction integer_sub} {:instruction integer_dup} {:instruction integer_div} {:instruction float_mult} {:instruction float_dup_items} {:instruction float_div} {:instruction float_inc} {:instruction float_yankdup} {:instruction print_float} {:instruction float_max} {:instruction integer_yankdup} {:instruction integer_min} {:instruction float_swap} {:instruction integer_dup_items} {:instruction integer_stackdepth} {:instruction integer_max} {:instruction float_max} {:instruction 36} {:instruction print_float} {:instruction integer_stackdepth} {:instruction -44} {:instruction float_pop} {:instruction integer_shove} {:instruction float_swap} {:instruction in2} {:instruction 52} {:instruction float_rot} {:instruction float_stackdepth} {:instruction float_sin})
Best program: (in1 integer_max integer_dup_items float_inc float_yankdup float_inc float_yankdup float_inc float_inc float_yankdup float_div float_inc float_yankdup float_dup_items float_div float_inc float_yankdup integer_rot float_yankdup float_inc float_dup_items float_div float_inc float_yankdup float_inc integer_dup_items float_inc float_inc float_yankdup float_div float_inc float_yankdup float_inc float_yankdup float_inc float_yankdup float_inc float_inc float_mult float_dup_items float_yankdup float_inc float_yankdup float_inc float_yankdup float_inc float_yankdup float_inc integer_mod float_inc float_inc float_yankdup float_div integer_flush float_yankdup float_mult float_dup_items integer_add float_inc integer_dup_items integer_sub integer_mod integer_div float_mult float_dup_items float_div float_inc float_yankdup print_float float_max integer_yankdup integer_dup_items integer_sub integer_mod integer_div integer_add integer_sub integer_dup integer_div float_mult float_dup_items float_div float_inc float_yankdup print_float float_max integer_yankdup integer_min float_swap integer_dup_items integer_stackdepth integer_max float_max 36 print_float integer_stackdepth -44 float_pop integer_shove float_swap in2 52 float_rot float_stackdepth float_sin)
Errors: [34.0 13 79.0 13 91.0 12 49.0 2 67.0 3 98.0 2 26.0 2 50.0 2 36.0 2 73.0 2 0.0 0 30.0 2 8.0 1 6.0 2 43.0 3 57.0 2 21.0 2 25.0 2 18.0 3 15.0 2 29.0 2 5.0 3 47.0 2 73.0 3 40.0 1]
Total: 1103.0
Mean: 22.06
Genome size: 105
Size: 106
Percent parens: 0.009
--- Population Statistics ---
Average total errors in population: 3129.2768161999998
Median total errors in population: 1103.0
Error averages by case: (113.11825580000003 12.624 143.16498680000007 12.745 160.09832640000002 12.049 134.48993230000008 3.917 148.6580884 4.499 165.08434789999998 3.549 110.85048869999997 3.599 128.70131670000004 3.8 115.93405120000006 3.723 143.8419188000001 3.471 87.11816260000002 2.411 116.67869529999993 4.103 91.16912220000006 2.795 83.59637130000006 3.553 125.85131930000004 4.517 140.40650129999995 4.139 103.59805819999998 3.54 96.44008739999998 3.473 104.70337359999999 4.417 104.44879820000001 3.618 96.36969880000001 4.355 94.67677950000007 4.306 124.45564459999999 3.597 156.34837339999999 4.531 118.99911750000004 3.144)
Error minima by case: (0.0213 8 6.9951 1 13.3221 9 41.0 2 45.4396 2 0.0554 1 18.0 1 21.3285 2 10.0306 1 0.1229 1 0.0 0 1.3285 2 0.0 0 1.0 1 35.0 2 28.3285 2 5.8961 1 0.2746 1 4.0 2 7.0 1 3.5516 1 0.0 0 1.0921 1 65.0 2 11.3285 1)
Average genome size in population (length): 90.586
Average program size in population (points): 91.586
Average percent parens in population: 0.011
Minimum age in population: 57.42308730111108
Maximum age in population: 63.15065227905325
Average age in population: 60.91243083927306
Median age in population: 60.94670954860226
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 6
Genome diversity (% unique Plush genomes):	 0.899
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 6
Syntactic diversity (% unique Push programs):	 0.899
Total error diversity:				 0.106
Error (vector) diversity:			 0.115
Behavioral diversity:				 0.115
--- Run Statistics ---
Number of program evaluations used so far: 43000
Number of point (instruction) evaluations so far: 79052859
--- Timings ---
Current time: 1529615013790 milliseconds
Total Time:         158.5 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        56.8 seconds, 35.9%
Fitness Testing:     79.2 seconds, 50.0%
Report:              22.4 seconds, 14.1%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 42
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 43
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 43
;;******************************
;; -*- Number IO problem report - generation 43
Test total error for best: 59131.0
Test mean error for best: 29.56550
;;------------------------------
Outputs of best individual on training cases:
Correct output: 1.9526623133   | Program output: -32.0473376867
Correct output: -70.8009773522 | Program output: 8.1990226478  
Correct output: -13.7839009431 | Program output: 77.2160990569 
Correct output: 143.8727406396 | Program output: 94.8727406396 
Correct output: 136.4396027174 | Program output: 69.4396027174 
Correct output: 18.5044280613  | Program output: 116.5044280613
Correct output: 92.0568646792  | Program output: 66.0568646792 
Correct output: 71.8873476205  | Program output: 121.8873476205
Correct output: -10.8388749243 | Program output: -46.8388749243
Correct output: 0.9299825981   | Program output: 73.9299825981 
Correct output: -26.7840412284 | Program output: -26.7840412284
Correct output: -102.1264221267 | Program output: -72.1264221267
Correct output: 40.8061668642  | Program output: 48.8061668642 
Correct output: -5.2544966331  | Program output: -11.2544966331
Correct output: 102.9855886244 | Program output: 59.9855886244 
Correct output: -118.0507723766 | Program output: -61.0507723766
Correct output: 55.9371769928  | Program output: 76.9371769928 
Correct output: 4.2657989984   | Program output: 29.2657989984 
Correct output: 96.7057987603  | Program output: 114.7057987603
Correct output: 122.162446611  | Program output: 107.162446611 
Correct output: 30.0102027945  | Program output: 1.0102027945  
Correct output: 104.5822387035 | Program output: 99.5822387035 
Correct output: -1.5538743366  | Program output: -48.5538743366
Correct output: 166.8070496115 | Program output: 93.8070496115 
Correct output: 58.6188945281  | Program output: 98.6188945281 
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction in1} {:instruction integer_max} {:instruction integer_dup_items} {:instruction integer_sub} {:instruction integer_mod} {:instruction integer_div} {:instruction integer_div} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_inc} {:instruction float_inc} {:instruction float_swap} {:instruction float_div} {:instruction float_inc} {:instruction integer_yank} {:instruction float_dup_items} {:instruction float_div} {:instruction float_inc} {:instruction float_yankdup} {:instruction integer_rot} {:instruction float_yankdup} {:instruction float_inc} {:instruction float_dup_items} {:instruction float_swap} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_inc} {:instruction integer_dup} {:instruction float_inc} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_div} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_mult} {:instruction float_dup_items} {:instruction float_div} {:instruction float_inc} {:instruction float_mult} {:instruction float_dup_items} {:instruction float_div} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_inc} {:instruction integer_mod} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction print_integer} {:instruction float_inc} {:instruction float_yankdup} {:instruction print_float} {:instruction float_flush} {:instruction integer_stackdepth} {:instruction tag_float_856} {:instruction print_float} {:instruction integer_dup_times} {:instruction in2} {:instruction float_min} {:instruction float_dup_times} {:instruction in2} {:instruction integer_dup_items} {:instruction tagged_465} {:instruction integer_max} {:instruction print_float} {:instruction integer_min} {:instruction float_cos} {:instruction float_dec} {:instruction integer_stackdepth} {:instruction integer_max} {:instruction float_max} {:instruction integer_fromfloat} {:instruction print_float})
Best program: (in1 integer_max integer_dup_items integer_sub integer_mod integer_div integer_div float_inc float_yankdup float_inc float_yankdup float_inc float_inc float_swap float_div float_inc integer_yank float_dup_items float_div float_inc float_yankdup integer_rot float_yankdup float_inc float_dup_items float_swap float_inc float_yankdup float_inc integer_dup float_inc float_inc float_yankdup float_div float_inc float_yankdup float_inc float_yankdup float_inc float_yankdup float_inc float_yankdup float_mult float_dup_items float_div float_inc float_mult float_dup_items float_div float_inc float_yankdup float_inc float_yankdup float_inc float_yankdup float_inc integer_mod float_inc float_inc float_inc print_integer float_inc float_yankdup print_float float_flush integer_stackdepth tag_float_856 print_float integer_dup_times in2 float_min float_dup_times in2 integer_dup_items tagged_465 integer_max print_float integer_min float_cos float_dec integer_stackdepth integer_max float_max integer_fromfloat print_float)
Errors: [34.0 13 79.0 13 91.0 12 49.0 2 67.0 3 98.0 2 26.0 2 50.0 2 36.0 2 73.0 2 0.0 0 30.0 2 8.0 1 6.0 2 43.0 3 57.0 2 21.0 2 25.0 2 18.0 3 15.0 2 29.0 2 5.0 3 47.0 2 73.0 3 40.0 1]
Total: 1103.0
Mean: 22.06
Genome size: 85
Size: 86
Percent parens: 0.012
--- Population Statistics ---
Average total errors in population: 3019.2059331
Median total errors in population: 1103.0
Error averages by case: (109.35354430000002 12.775 145.31153380000006 12.742 157.24907580000004 12.091 127.94896020000012 3.71 143.16235369999998 4.283 162.4675104 3.3 105.16835299999995 3.339 123.34642010000005 3.578 111.71772680000005 3.486 140.84559270000017 3.211 81.80096389999996 2.152 109.89351479999995 3.878 86.30855750000006 2.548 82.72677719999997 3.288 120.53363960000003 4.282 134.12738739999998 3.892 98.3230428 3.263 95.87346440000003 3.222 97.9346566 4.215 97.2512051 3.384 99.87248090000006 4.226 87.62893420000007 4.033 120.86850119999997 3.373 150.0306368 4.309 113.97009990000001 2.911)
Error minima by case: (0.1577 7 41.9506 1 13.3678 9 42.0 2 60.0 2 0.3808 1 19.0 1 26.0 2 9.8792 1 0.07 1 0.0 0 6.0 2 0.0 0 0.0 0 36.0 2 33.0 2 3.0 1 0.2658 1 4.0 1 8.0 1 3.0102 1 0.0 0 1.1377 1 66.0 2 16.0 1)
Average genome size in population (length): 89.905
Average program size in population (points): 90.905
Average percent parens in population: 0.011
Minimum age in population: 58.42308730111108
Maximum age in population: 64.4420725358018
Average age in population: 62.29189503999615
Median age in population: 62.32489037536834
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 8
Genome diversity (% unique Plush genomes):	 0.901
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 8
Syntactic diversity (% unique Push programs):	 0.901
Total error diversity:				 0.08
Error (vector) diversity:			 0.092
Behavioral diversity:				 0.093
--- Run Statistics ---
Number of program evaluations used so far: 44000
Number of point (instruction) evaluations so far: 81300659
--- Timings ---
Current time: 1529615017751 milliseconds
Total Time:         162.5 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        58.2 seconds, 35.8%
Fitness Testing:     81.3 seconds, 50.0%
Report:              23.0 seconds, 14.1%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 43
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 44
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 44
;;******************************
;; -*- Number IO problem report - generation 44
Test total error for best: 59131.0
Test mean error for best: 29.56550
;;------------------------------
Outputs of best individual on training cases:
Correct output: 1.9526623133   | Program output: -32.0473376867
Correct output: -70.8009773522 | Program output: 8.1990226478  
Correct output: -13.7839009431 | Program output: 77.2160990569 
Correct output: 143.8727406396 | Program output: 94.8727406396 
Correct output: 136.4396027174 | Program output: 69.4396027174 
Correct output: 18.5044280613  | Program output: 116.5044280613
Correct output: 92.0568646792  | Program output: 66.0568646792 
Correct output: 71.8873476205  | Program output: 121.8873476205
Correct output: -10.8388749243 | Program output: -46.8388749243
Correct output: 0.9299825981   | Program output: 73.9299825981 
Correct output: -26.7840412284 | Program output: -26.7840412284
Correct output: -102.1264221267 | Program output: -72.1264221267
Correct output: 40.8061668642  | Program output: 48.8061668642 
Correct output: -5.2544966331  | Program output: -11.2544966331
Correct output: 102.9855886244 | Program output: 59.9855886244 
Correct output: -118.0507723766 | Program output: -61.0507723766
Correct output: 55.9371769928  | Program output: 76.9371769928 
Correct output: 4.2657989984   | Program output: 29.2657989984 
Correct output: 96.7057987603  | Program output: 114.7057987603
Correct output: 122.162446611  | Program output: 107.162446611 
Correct output: 30.0102027945  | Program output: 1.0102027945  
Correct output: 104.5822387035 | Program output: 99.5822387035 
Correct output: -1.5538743366  | Program output: -48.5538743366
Correct output: 166.8070496115 | Program output: 93.8070496115 
Correct output: 58.6188945281  | Program output: 98.6188945281 
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction in1} {:instruction integer_max} {:instruction integer_dup_items} {:instruction integer_sub} {:instruction float_sub} {:instruction integer_div} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_inc} {:instruction float_inc} {:instruction float_swap} {:instruction float_div} {:instruction float_inc} {:instruction integer_yank} {:instruction float_dup_items} {:instruction integer_pop} {:instruction float_inc} {:instruction float_yankdup} {:instruction integer_rot} {:instruction float_yankdup} {:instruction float_inc} {:instruction float_dup_items} {:instruction float_swap} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_inc} {:instruction integer_dup} {:instruction float_inc} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_div} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_mult} {:instruction float_dup_items} {:instruction float_div} {:instruction float_inc} {:instruction float_rot} {:instruction float_mult} {:instruction float_dup_items} {:instruction float_div} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_inc} {:instruction float_yankdup} {:instruction integer_sub} {:instruction float_inc} {:instruction float_mult} {:instruction float_dup_items} {:instruction float_div} {:instruction float_inc} {:instruction float_yankdup} {:instruction integer_shove} {:instruction integer_yank} {:instruction float_inc} {:instruction float_mult} {:instruction float_div} {:instruction float_swap} {:instruction float_inc} {:instruction float_inc} {:instruction float_yank} {:instruction float_inc} {:instruction integer_min} {:instruction print_float} {:instruction integer_dup_items} {:instruction integer_stackdepth} {:instruction tag_float_856} {:instruction 52} {:instruction float_shove})
Best program: (in1 integer_max integer_dup_items integer_sub float_sub integer_div float_inc float_yankdup float_inc float_yankdup float_inc float_inc float_swap float_div float_inc integer_yank float_dup_items integer_pop float_inc float_yankdup integer_rot float_yankdup float_inc float_dup_items float_swap float_inc float_yankdup float_inc integer_dup float_inc float_inc float_yankdup float_div float_inc float_yankdup float_inc float_yankdup float_inc float_yankdup float_inc float_yankdup float_mult float_dup_items float_div float_inc float_rot float_mult float_dup_items float_div float_inc float_yankdup float_inc float_yankdup integer_sub float_inc float_mult float_dup_items float_div float_inc float_yankdup integer_shove integer_yank float_inc float_mult float_div float_swap float_inc float_inc float_yank float_inc integer_min print_float integer_dup_items integer_stackdepth tag_float_856 52 float_shove)
Errors: [34.0 13 79.0 13 91.0 12 49.0 2 67.0 3 98.0 2 26.0 2 50.0 2 36.0 2 73.0 2 0.0 0 30.0 2 8.0 1 6.0 2 43.0 3 57.0 2 21.0 2 25.0 2 18.0 3 15.0 2 29.0 2 5.0 3 47.0 2 73.0 3 40.0 1]
Total: 1103.0
Mean: 22.06
Genome size: 77
Size: 78
Percent parens: 0.013
--- Population Statistics ---
Average total errors in population: 3145.0189777000005
Median total errors in population: 1103.0
Error averages by case: (113.08598130000003 12.704 143.6578713000001 12.742 164.4876631 12.049 133.9149695000001 3.824 148.60581950000008 4.406 168.92604660000006 3.499 110.78176939999996 3.468 131.86902550000005 3.727 115.64412410000007 3.626 148.27247260000004 3.386 86.90398770000003 2.314 119.18403569999995 4.044 91.47901150000004 2.717 81.61332650000001 3.438 125.93607039999999 4.411 143.08383239999995 4.043 103.48332440000001 3.433 97.28280669999998 3.388 103.78006070000004 4.333 103.55700190000005 3.519 94.23252580000003 4.401 93.904164 4.202 124.298792 3.493 155.8180769 4.454 122.52221820000003 3.073)
Error minima by case: (0.0473 8 27.4523 1 13.7839 8 40.0 1 58.0 2 0.4746 1 17.0 1 26.0 2 10.8389 1 0.7117 1 0.0 0 6.0 2 0.0 0 0.0 0 34.0 2 33.0 2 1.0 1 0.431 1 1.0 1 6.0 1 0.0102 1 0.0 0 1.5539 1 64.0 2 16.0 1)
Average genome size in population (length): 89.63
Average program size in population (points): 90.63
Average percent parens in population: 0.011
Minimum age in population: 61.02243640043525
Maximum age in population: 65.78594850727404
Average age in population: 63.77106147966031
Median age in population: 63.85228200464189
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 8
Genome diversity (% unique Plush genomes):	 0.908
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 8
Syntactic diversity (% unique Push programs):	 0.908
Total error diversity:				 0.104
Error (vector) diversity:			 0.114
Behavioral diversity:				 0.115
--- Run Statistics ---
Number of program evaluations used so far: 45000
Number of point (instruction) evaluations so far: 83541784
--- Timings ---
Current time: 1529615021650 milliseconds
Total Time:         166.5 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        59.5 seconds, 35.7%
Fitness Testing:     83.3 seconds, 50.0%
Report:              23.6 seconds, 14.1%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 44
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 45
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 45
;;******************************
;; -*- Number IO problem report - generation 45
Test total error for best: 59131.0
Test mean error for best: 29.56550
;;------------------------------
Outputs of best individual on training cases:
Correct output: 1.9526623133   | Program output: -32.0473376867
Correct output: -70.8009773522 | Program output: 8.1990226478  
Correct output: -13.7839009431 | Program output: 77.2160990569 
Correct output: 143.8727406396 | Program output: 94.8727406396 
Correct output: 136.4396027174 | Program output: 69.4396027174 
Correct output: 18.5044280613  | Program output: 116.5044280613
Correct output: 92.0568646792  | Program output: 66.0568646792 
Correct output: 71.8873476205  | Program output: 121.8873476205
Correct output: -10.8388749243 | Program output: -46.8388749243
Correct output: 0.9299825981   | Program output: 73.9299825981 
Correct output: -26.7840412284 | Program output: -26.7840412284
Correct output: -102.1264221267 | Program output: -72.1264221267
Correct output: 40.8061668642  | Program output: 48.8061668642 
Correct output: -5.2544966331  | Program output: -11.2544966331
Correct output: 102.9855886244 | Program output: 59.9855886244 
Correct output: -118.0507723766 | Program output: -61.0507723766
Correct output: 55.9371769928  | Program output: 76.9371769928 
Correct output: 4.2657989984   | Program output: 29.2657989984 
Correct output: 96.7057987603  | Program output: 114.7057987603
Correct output: 122.162446611  | Program output: 107.162446611 
Correct output: 30.0102027945  | Program output: 1.0102027945  
Correct output: 104.5822387035 | Program output: 99.5822387035 
Correct output: -1.5538743366  | Program output: -48.5538743366
Correct output: 166.8070496115 | Program output: 93.8070496115 
Correct output: 58.6188945281  | Program output: 98.6188945281 
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction in1} {:instruction integer_max} {:instruction integer_dup_items} {:instruction integer_sub} {:instruction float_sub} {:instruction float_yankdup} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_inc} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_div} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_dup_items} {:instruction float_div} {:instruction float_inc} {:instruction float_yankdup} {:instruction integer_rot} {:instruction float_yankdup} {:instruction float_inc} {:instruction float_dup_items} {:instruction float_dup_items} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_inc} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_yankdup} {:instruction float_inc} {:instruction integer_yank} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_mult} {:instruction float_dup_items} {:instruction float_div} {:instruction float_inc} {:instruction float_mult} {:instruction float_dup_items} {:instruction float_div} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_inc} {:instruction integer_mod} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_yank} {:instruction float_inc} {:instruction float_yankdup} {:instruction print_float} {:instruction float_flush} {:instruction float_inc} {:instruction float_yank} {:instruction float_inc} {:instruction float_yankdup} {:instruction print_float} {:instruction float_flush} {:instruction float_mod} {:instruction tag_float_856} {:instruction float_add} {:instruction integer_dup_times} {:instruction integer_fromfloat} {:instruction print_float} {:instruction integer_min} {:instruction float_cos} {:instruction float_dec} {:instruction float_shove} {:instruction integer_max} {:instruction float_max} {:instruction integer_fromfloat} {:instruction print_float} {:instruction integer_stackdepth})
Best program: (in1 integer_max integer_dup_items integer_sub float_sub float_yankdup float_inc float_yankdup float_inc float_inc float_yankdup float_div float_inc float_yankdup float_dup_items float_div float_inc float_yankdup integer_rot float_yankdup float_inc float_dup_items float_dup_items float_inc float_yankdup float_inc float_yankdup float_inc float_inc float_yankdup float_inc float_yankdup float_inc float_yankdup float_yankdup float_inc integer_yank float_inc float_yankdup float_inc float_yankdup float_mult float_dup_items float_div float_inc float_mult float_dup_items float_div float_inc float_yankdup float_inc float_yankdup float_inc float_yankdup float_inc integer_mod float_inc float_inc float_inc float_yank float_inc float_yankdup print_float float_flush float_inc float_yank float_inc float_yankdup print_float float_flush float_mod tag_float_856 float_add integer_dup_times integer_fromfloat print_float integer_min float_cos float_dec float_shove integer_max float_max integer_fromfloat print_float integer_stackdepth)
Errors: [34.0 13 79.0 13 91.0 12 49.0 2 67.0 3 98.0 2 26.0 2 50.0 2 36.0 2 73.0 2 0.0 0 30.0 2 8.0 1 6.0 2 43.0 3 57.0 2 21.0 2 25.0 2 18.0 3 15.0 2 29.0 2 5.0 3 47.0 2 73.0 3 40.0 1]
Total: 1103.0
Mean: 22.06
Genome size: 85
Size: 86
Percent parens: 0.012
--- Population Statistics ---
Average total errors in population: 3181.2378623
Median total errors in population: 1103.0
Error averages by case: (115.76565950000004 12.666 141.88107270000006 12.802 165.21975279999995 12.047 136.0281821000001 3.79 150.83023380000003 4.343 170.03448330000003 3.398 113.23741679999996 3.427 132.1100972 3.661 118.44521700000003 3.577 149.00134800000006 3.312 88.8843589 2.232 118.47807249999994 3.972 94.18266090000006 2.661 83.6515921 3.406 128.3467727 4.355 142.3917716 3.984 104.73496110000004 3.377 97.43593009999998 3.341 106.40472459999997 4.284 105.7723621 3.471 95.95296420000001 4.29 96.20500160000005 4.159 128.2001545 3.476 157.8579111 4.403 122.73816109999999 3.013)
Error minima by case: (0.0473 7 38.9506 2 6.3392 8 40.8727 2 2.5604 2 0.4448 1 18.0 1 26.0 2 10.3407 1 1.2688 1 0.0 0 6.0 2 1.0 1 0.0 0 11.9856 2 9.0508 2 3.0 1 0.132 1 0.0 0 7.0 1 4.0537 1 0.0 0 0.9746 1 15.807 2 16.0 1)
Average genome size in population (length): 88.514
Average program size in population (points): 89.514
Average percent parens in population: 0.011
Minimum age in population: 62.02243640043525
Maximum age in population: 67.0156676326643
Average age in population: 65.14707329952167
Median age in population: 65.20783406900534
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 6
Genome diversity (% unique Plush genomes):	 0.906
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 6
Syntactic diversity (% unique Push programs):	 0.906
Total error diversity:				 0.098
Error (vector) diversity:			 0.105
Behavioral diversity:				 0.106
--- Run Statistics ---
Number of program evaluations used so far: 46000
Number of point (instruction) evaluations so far: 85754759
--- Timings ---
Current time: 1529615025515 milliseconds
Total Time:         170.3 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        60.8 seconds, 35.7%
Fitness Testing:     85.3 seconds, 50.1%
Report:              24.1 seconds, 14.1%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 45
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 46
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 46
;;******************************
;; -*- Number IO problem report - generation 46
Test total error for best: 59131.0
Test mean error for best: 29.56550
;;------------------------------
Outputs of best individual on training cases:
Correct output: 1.9526623133   | Program output: -32.0473376867
Correct output: -70.8009773522 | Program output: 8.1990226478  
Correct output: -13.7839009431 | Program output: 77.2160990569 
Correct output: 143.8727406396 | Program output: 94.8727406396 
Correct output: 136.4396027174 | Program output: 69.4396027174 
Correct output: 18.5044280613  | Program output: 116.5044280613
Correct output: 92.0568646792  | Program output: 66.0568646792 
Correct output: 71.8873476205  | Program output: 121.8873476205
Correct output: -10.8388749243 | Program output: -46.8388749243
Correct output: 0.9299825981   | Program output: 73.9299825981 
Correct output: -26.7840412284 | Program output: -26.7840412284
Correct output: -102.1264221267 | Program output: -72.1264221267
Correct output: 40.8061668642  | Program output: 48.8061668642 
Correct output: -5.2544966331  | Program output: -11.2544966331
Correct output: 102.9855886244 | Program output: 59.9855886244 
Correct output: -118.0507723766 | Program output: -61.0507723766
Correct output: 55.9371769928  | Program output: 76.9371769928 
Correct output: 4.2657989984   | Program output: 29.2657989984 
Correct output: 96.7057987603  | Program output: 114.7057987603
Correct output: 122.162446611  | Program output: 107.162446611 
Correct output: 30.0102027945  | Program output: 1.0102027945  
Correct output: 104.5822387035 | Program output: 99.5822387035 
Correct output: -1.5538743366  | Program output: -48.5538743366
Correct output: 166.8070496115 | Program output: 93.8070496115 
Correct output: 58.6188945281  | Program output: 98.6188945281 
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction in1} {:instruction integer_max} {:instruction integer_dup_items} {:instruction integer_sub} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_inc} {:instruction float_rot} {:instruction float_inc} {:instruction float_inc} {:instruction float_sub} {:instruction float_div} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_dup_items} {:instruction float_div} {:instruction float_inc} {:instruction float_add} {:instruction float_min} {:instruction float_yankdup} {:instruction float_inc} {:instruction float_dup_items} {:instruction float_div} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_inc} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_div} {:instruction float_inc} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_mult} {:instruction float_sub} {:instruction float_div} {:instruction float_inc} {:instruction float_mult} {:instruction float_dup_items} {:instruction float_div} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_inc} {:instruction integer_mult} {:instruction float_inc} {:instruction integer_mod} {:instruction float_inc} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_div} {:instruction integer_flush} {:instruction float_yankdup} {:instruction float_mult} {:instruction float_dup_items} {:instruction float_div} {:instruction float_inc} {:instruction integer_dup_items} {:instruction integer_sub} {:instruction integer_mod} {:instruction integer_div} {:instruction float_mult} {:instruction float_dup_items} {:instruction float_div} {:instruction float_inc} {:instruction float_yankdup} {:instruction print_float} {:instruction float_max} {:instruction integer_yankdup} {:instruction integer_sub} {:instruction float_yank} {:instruction integer_div} {:instruction float_yank} {:instruction print_float} {:instruction float_max} {:instruction integer_yankdup} {:instruction float_swap} {:instruction integer_max} {:instruction float_max} {:instruction integer_fromfloat} {:instruction print_float} {:instruction integer_dup_times} {:instruction -44} {:instruction float_pop} {:instruction integer_dup_items} {:instruction float_swap} {:instruction in2} {:instruction 52} {:instruction float_shove})
Best program: (in1 integer_max integer_dup_items integer_sub float_inc float_yankdup float_inc float_rot float_inc float_inc float_sub float_div float_inc float_yankdup float_dup_items float_div float_inc float_add float_min float_yankdup float_inc float_dup_items float_div float_inc float_yankdup float_inc float_yankdup float_inc float_inc float_yankdup float_div float_inc float_inc float_yankdup float_inc float_yankdup float_inc float_yankdup float_mult float_sub float_div float_inc float_mult float_dup_items float_div float_inc float_yankdup float_inc float_yankdup float_inc integer_mult float_inc integer_mod float_inc float_inc float_yankdup float_div integer_flush float_yankdup float_mult float_dup_items float_div float_inc integer_dup_items integer_sub integer_mod integer_div float_mult float_dup_items float_div float_inc float_yankdup print_float float_max integer_yankdup integer_sub float_yank integer_div float_yank print_float float_max integer_yankdup float_swap integer_max float_max integer_fromfloat print_float integer_dup_times -44 float_pop integer_dup_items float_swap in2 52 float_shove)
Errors: [34.0 13 79.0 13 91.0 12 49.0 2 67.0 3 98.0 2 26.0 2 50.0 2 36.0 2 73.0 2 0.0 0 30.0 2 8.0 1 6.0 2 43.0 3 57.0 2 21.0 2 25.0 2 18.0 3 15.0 2 29.0 2 5.0 3 47.0 2 73.0 3 40.0 1]
Total: 1103.0
Mean: 22.06
Genome size: 95
Size: 96
Percent parens: 0.010
--- Population Statistics ---
Average total errors in population: 3175.0609108000003
Median total errors in population: 1103.0
Error averages by case: (115.87232850000005 12.676 139.78103100000007 12.771 165.1565563 12.04 136.1159256000001 3.788 150.9178574 4.361 169.94740500000006 3.407 113.3061998 3.467 132.16177169999997 3.706 118.38939150000006 3.596 148.90412890000005 3.356 89.09782919999999 2.271 118.63032259999996 3.981 94.56731080000002 2.67 82.08098979999997 3.443 128.41887009999996 4.36 142.50785159999995 3.988 106.54427090000001 3.417 95.73786059999995 3.369 106.61453990000007 4.291 105.89704140000003 3.503 92.5195714 4.161 96.3126645 4.115 127.1514251 3.493 157.9279116 4.406 122.81885560000003 3.045)
Error minima by case: (0.0473 8 11.6513 1 13.3419 8 37.8727 2 5.5604 2 0.2991 1 16.0 1 16.2173 2 9.8977 1 1.07 1 0.0 0 6.0 2 0.0 0 0.0 0 8.9856 2 9.2173 2 2.0 1 0.1291 1 1.0 1 5.0 1 3.0102 1 0.0 0 0.1075 1 12.807 2 16.0 1)
Average genome size in population (length): 87.856
Average program size in population (points): 88.856
Average percent parens in population: 0.011
Minimum age in population: 63.79265978686817
Maximum age in population: 68.62040677051223
Average age in population: 66.53318509789996
Median age in population: 66.62576021425807
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 6
Genome diversity (% unique Plush genomes):	 0.901
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 6
Syntactic diversity (% unique Push programs):	 0.901
Total error diversity:				 0.106
Error (vector) diversity:			 0.114
Behavioral diversity:				 0.115
--- Run Statistics ---
Number of program evaluations used so far: 47000
Number of point (instruction) evaluations so far: 87951359
--- Timings ---
Current time: 1529615029459 milliseconds
Total Time:         174.2 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        62.2 seconds, 35.7%
Fitness Testing:     87.3 seconds, 50.1%
Report:              24.6 seconds, 14.1%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 46
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 47
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 47
;;******************************
;; -*- Number IO problem report - generation 47
Test total error for best: 59131.0
Test mean error for best: 29.56550
;;------------------------------
Outputs of best individual on training cases:
Correct output: 1.9526623133   | Program output: -32.0473376867
Correct output: -70.8009773522 | Program output: 8.1990226478  
Correct output: -13.7839009431 | Program output: 77.2160990569 
Correct output: 143.8727406396 | Program output: 94.8727406396 
Correct output: 136.4396027174 | Program output: 69.4396027174 
Correct output: 18.5044280613  | Program output: 116.5044280613
Correct output: 92.0568646792  | Program output: 66.0568646792 
Correct output: 71.8873476205  | Program output: 121.8873476205
Correct output: -10.8388749243 | Program output: -46.8388749243
Correct output: 0.9299825981   | Program output: 73.9299825981 
Correct output: -26.7840412284 | Program output: -26.7840412284
Correct output: -102.1264221267 | Program output: -72.1264221267
Correct output: 40.8061668642  | Program output: 48.8061668642 
Correct output: -5.2544966331  | Program output: -11.2544966331
Correct output: 102.9855886244 | Program output: 59.9855886244 
Correct output: -118.0507723766 | Program output: -61.0507723766
Correct output: 55.9371769928  | Program output: 76.9371769928 
Correct output: 4.2657989984   | Program output: 29.2657989984 
Correct output: 96.7057987603  | Program output: 114.7057987603
Correct output: 122.162446611  | Program output: 107.162446611 
Correct output: 30.0102027945  | Program output: 1.0102027945  
Correct output: 104.5822387035 | Program output: 99.5822387035 
Correct output: -1.5538743366  | Program output: -48.5538743366
Correct output: 166.8070496115 | Program output: 93.8070496115 
Correct output: 58.6188945281  | Program output: 98.6188945281 
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction in1} {:instruction integer_max} {:instruction integer_dup_items} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_inc} {:instruction float_inc} {:instruction float_dup_items} {:instruction float_div} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_div} {:instruction float_inc} {:instruction float_yankdup} {:instruction integer_rot} {:instruction float_yankdup} {:instruction float_inc} {:instruction float_dup_items} {:instruction float_div} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_inc} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_div} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_inc} {:instruction float_inc} {:instruction float_mult} {:instruction float_yankdup} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_inc} {:instruction integer_mod} {:instruction float_inc} {:instruction float_inc} {:instruction float_yankdup} {:instruction integer_inc} {:instruction integer_flush} {:instruction float_inc} {:instruction float_yank} {:instruction integer_inc} {:instruction integer_flush} {:instruction float_yankdup} {:instruction float_mult} {:instruction float_dup_items} {:instruction integer_add} {:instruction float_inc} {:instruction integer_dup_items} {:instruction integer_sub} {:instruction integer_mod} {:instruction integer_div} {:instruction float_mult} {:instruction float_max} {:instruction float_div} {:instruction float_inc} {:instruction float_yankdup} {:instruction print_float} {:instruction float_max} {:instruction integer_yankdup} {:instruction integer_min} {:instruction float_cos} {:instruction float_dec} {:instruction integer_stackdepth} {:instruction integer_max} {:instruction float_max} {:instruction float_add} {:instruction integer_swap})
Best program: (in1 integer_max integer_dup_items float_inc float_yankdup float_inc float_yankdup float_inc float_inc float_dup_items float_div float_inc float_yankdup float_div float_inc float_yankdup integer_rot float_yankdup float_inc float_dup_items float_div float_inc float_yankdup float_inc float_yankdup float_inc float_inc float_yankdup float_div float_inc float_yankdup float_inc float_yankdup float_inc float_yankdup float_inc float_inc float_mult float_yankdup float_inc float_yankdup float_inc float_yankdup float_inc integer_mod float_inc float_inc float_yankdup integer_inc integer_flush float_inc float_yank integer_inc integer_flush float_yankdup float_mult float_dup_items integer_add float_inc integer_dup_items integer_sub integer_mod integer_div float_mult float_max float_div float_inc float_yankdup print_float float_max integer_yankdup integer_min float_cos float_dec integer_stackdepth integer_max float_max float_add integer_swap)
Errors: [34.0 13 79.0 13 91.0 12 49.0 2 67.0 3 98.0 2 26.0 2 50.0 2 36.0 2 73.0 2 0.0 0 30.0 2 8.0 1 6.0 2 43.0 3 57.0 2 21.0 2 25.0 2 18.0 3 15.0 2 29.0 2 5.0 3 47.0 2 73.0 3 40.0 1]
Total: 1103.0
Mean: 22.06
Genome size: 79
Size: 80
Percent parens: 0.013
--- Population Statistics ---
Average total errors in population: 3066.240634500001
Median total errors in population: 1104.0
Error averages by case: (111.45218160000005 12.732 140.16422110000005 12.753 159.5692037 12.049 130.30555450000003 3.805 145.1033706 4.388 164.5655016 3.44 107.1451438 3.472 126.77148010000003 3.713 114.05930330000002 3.601 143.89999160000005 3.31 85.03314700000001 2.284 115.30147479999997 4.006 88.59881999999999 2.693 80.41136440000001 3.444 122.3845226 4.38 139.90681319999996 3.981 100.53801050000001 3.352 94.9285908 3.353 100.65981509999999 4.333 99.79770020000002 3.498 94.5325248 4.268 89.96961199999997 4.169 123.34690109999998 3.469 152.20682620000002 4.43 117.62255990000004 3.043)
Error minima by case: (0.1649 8 6.0901 1 13.0027 8 32.8461 2 45.4396 2 0.4347 1 3.4995 1 6.5666 2 10.7307 1 0.0681 1 0.0 0 6.0 2 0.0 0 0.0 0 13.2894 2 33.0 2 2.0 1 0.0282 1 0.0 0 1.1539 1 0.437 1 0.0 0 0.7075 1 56.8461 2 16.0 1)
Average genome size in population (length): 87.214
Average program size in population (points): 88.214
Average percent parens in population: 0.012
Minimum age in population: 65.45815718918868
Maximum age in population: 69.93097489726784
Average age in population: 67.9045743473654
Median age in population: 67.95177085660045
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 5
Genome diversity (% unique Plush genomes):	 0.929
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 5
Syntactic diversity (% unique Push programs):	 0.929
Total error diversity:				 0.104
Error (vector) diversity:			 0.11
Behavioral diversity:				 0.111
--- Run Statistics ---
Number of program evaluations used so far: 48000
Number of point (instruction) evaluations so far: 90131959
--- Timings ---
Current time: 1529615033370 milliseconds
Total Time:         178.2 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        63.5 seconds, 35.6%
Fitness Testing:     89.4 seconds, 50.2%
Report:              25.2 seconds, 14.1%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 47
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 48
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 48
;;******************************
;; -*- Number IO problem report - generation 48
Test total error for best: 59131.0
Test mean error for best: 29.56550
;;------------------------------
Outputs of best individual on training cases:
Correct output: 1.9526623133   | Program output: -32.0473376867
Correct output: -70.8009773522 | Program output: 8.1990226478  
Correct output: -13.7839009431 | Program output: 77.2160990569 
Correct output: 143.8727406396 | Program output: 94.8727406396 
Correct output: 136.4396027174 | Program output: 69.4396027174 
Correct output: 18.5044280613  | Program output: 116.5044280613
Correct output: 92.0568646792  | Program output: 66.0568646792 
Correct output: 71.8873476205  | Program output: 121.8873476205
Correct output: -10.8388749243 | Program output: -46.8388749243
Correct output: 0.9299825981   | Program output: 73.9299825981 
Correct output: -26.7840412284 | Program output: -26.7840412284
Correct output: -102.1264221267 | Program output: -72.1264221267
Correct output: 40.8061668642  | Program output: 48.8061668642 
Correct output: -5.2544966331  | Program output: -11.2544966331
Correct output: 102.9855886244 | Program output: 59.9855886244 
Correct output: -118.0507723766 | Program output: -61.0507723766
Correct output: 55.9371769928  | Program output: 76.9371769928 
Correct output: 4.2657989984   | Program output: 29.2657989984 
Correct output: 96.7057987603  | Program output: 114.7057987603
Correct output: 122.162446611  | Program output: 107.162446611 
Correct output: 30.0102027945  | Program output: 1.0102027945  
Correct output: 104.5822387035 | Program output: 99.5822387035 
Correct output: -1.5538743366  | Program output: -48.5538743366
Correct output: 166.8070496115 | Program output: 93.8070496115 
Correct output: 58.6188945281  | Program output: 98.6188945281 
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction in1} {:instruction integer_max} {:instruction integer_dup_items} {:instruction integer_sub} {:instruction integer_mod} {:instruction integer_div} {:instruction float_inc} {:instruction float_yank} {:instruction float_inc} {:instruction float_inc} {:instruction integer_mod} {:instruction float_inc} {:instruction float_div} {:instruction float_inc} {:instruction float_rot} {:instruction float_inc} {:instruction float_inc} {:instruction float_div} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_inc} {:instruction float_div} {:instruction float_inc} {:instruction float_div} {:instruction float_inc} {:instruction float_rot} {:instruction float_inc} {:instruction float_inc} {:instruction float_div} {:instruction float_inc} {:instruction float_yankdup} {:instruction integer_mod} {:instruction integer_div} {:instruction float_mult} {:instruction float_dup_items} {:instruction float_div} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_inc} {:instruction float_yankdup} {:instruction integer_stackdepth} {:instruction float_inc} {:instruction float_mult} {:instruction float_dup_items} {:instruction float_div} {:instruction float_yankdup} {:instruction integer_mod} {:instruction float_inc} {:instruction float_inc} {:instruction float_mult} {:instruction integer_max} {:instruction float_div} {:instruction float_inc} {:instruction float_inc} {:instruction float_swap} {:instruction float_inc} {:instruction print_integer} {:instruction print_float} {:instruction float_mult} {:instruction tag_float_856} {:instruction float_add} {:instruction float_max})
Best program: (in1 integer_max integer_dup_items integer_sub integer_mod integer_div float_inc float_yank float_inc float_inc integer_mod float_inc float_div float_inc float_rot float_inc float_inc float_div float_inc float_yankdup float_inc float_yankdup float_inc float_div float_inc float_div float_inc float_rot float_inc float_inc float_div float_inc float_yankdup integer_mod integer_div float_mult float_dup_items float_div float_inc float_yankdup float_inc float_yankdup float_inc float_yankdup integer_stackdepth float_inc float_mult float_dup_items float_div float_yankdup integer_mod float_inc float_inc float_mult integer_max float_div float_inc float_inc float_swap float_inc print_integer print_float float_mult tag_float_856 float_add float_max)
Errors: [34.0 13 79.0 13 91.0 12 49.0 2 67.0 3 98.0 2 26.0 2 50.0 2 36.0 2 73.0 2 0.0 0 30.0 2 8.0 1 6.0 2 43.0 3 57.0 2 21.0 2 25.0 2 18.0 3 15.0 2 29.0 2 5.0 3 47.0 2 73.0 3 40.0 1]
Total: 1103.0
Mean: 22.06
Genome size: 66
Size: 67
Percent parens: 0.015
--- Population Statistics ---
Average total errors in population: 2768.5087324999995
Median total errors in population: 1103.0
Error averages by case: (99.07660460000002 12.776 130.26450020000004 12.745 150.98769009999992 12.035 118.4675323 3.486 133.45974159999997 4.091 155.9316534 3.173 94.99529509999995 3.161 116.55145720000003 3.441 101.8773261 3.287 134.39316150000005 3.112 71.1050328 1.932 102.35095799999996 3.701 75.7146299 2.369 67.61593819999999 3.12 110.55574909999994 4.11 126.80932289999996 3.718 88.30677739999999 3.076 84.5748171 3.121 88.03959030000003 4.057 87.4530655 3.217 81.91214979999995 4.101 77.7312498 3.913 110.64526989999996 3.184 140.77778220000005 4.146 107.07943750000001 2.76)
Error minima by case: (1.0473 8 6.1085 1 0.6648 9 42.0 2 60.0 2 0.0258 1 19.0 1 27.8873 2 9.9706 1 1.2688 1 0.0 0 11.0 2 0.0 0 0.0 0 36.0 2 34.6648 2 2.0 1 0.4438 1 0.0 0 8.0 1 0.8601 1 0.0 0 1.2572 1 66.0 2 14.6189 1)
Average genome size in population (length): 86.87
Average program size in population (points): 87.87
Average percent parens in population: 0.012
Minimum age in population: 66.80882608159203
Maximum age in population: 71.01273481316483
Average age in population: 69.23591997258355
Median age in population: 69.29086662654586
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 11
Genome diversity (% unique Plush genomes):	 0.87
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 11
Syntactic diversity (% unique Push programs):	 0.87
Total error diversity:				 0.091
Error (vector) diversity:			 0.1
Behavioral diversity:				 0.101
--- Run Statistics ---
Number of program evaluations used so far: 49000
Number of point (instruction) evaluations so far: 92303984
--- Timings ---
Current time: 1529615037175 milliseconds
Total Time:         182.1 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        64.9 seconds, 35.6%
Fitness Testing:     91.3 seconds, 50.2%
Report:              25.7 seconds, 14.1%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 48
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 49
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 49
;;******************************
;; -*- Number IO problem report - generation 49
Test total error for best: 59131.0
Test mean error for best: 29.56550
;;------------------------------
Outputs of best individual on training cases:
Correct output: 1.9526623133   | Program output: -32.0473376867
Correct output: -70.8009773522 | Program output: 8.1990226478  
Correct output: -13.7839009431 | Program output: 77.2160990569 
Correct output: 143.8727406396 | Program output: 94.8727406396 
Correct output: 136.4396027174 | Program output: 69.4396027174 
Correct output: 18.5044280613  | Program output: 116.5044280613
Correct output: 92.0568646792  | Program output: 66.0568646792 
Correct output: 71.8873476205  | Program output: 121.8873476205
Correct output: -10.8388749243 | Program output: -46.8388749243
Correct output: 0.9299825981   | Program output: 73.9299825981 
Correct output: -26.7840412284 | Program output: -26.7840412284
Correct output: -102.1264221267 | Program output: -72.1264221267
Correct output: 40.8061668642  | Program output: 48.8061668642 
Correct output: -5.2544966331  | Program output: -11.2544966331
Correct output: 102.9855886244 | Program output: 59.9855886244 
Correct output: -118.0507723766 | Program output: -61.0507723766
Correct output: 55.9371769928  | Program output: 76.9371769928 
Correct output: 4.2657989984   | Program output: 29.2657989984 
Correct output: 96.7057987603  | Program output: 114.7057987603
Correct output: 122.162446611  | Program output: 107.162446611 
Correct output: 30.0102027945  | Program output: 1.0102027945  
Correct output: 104.5822387035 | Program output: 99.5822387035 
Correct output: -1.5538743366  | Program output: -48.5538743366
Correct output: 166.8070496115 | Program output: 93.8070496115 
Correct output: 58.6188945281  | Program output: 98.6188945281 
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction in1} {:instruction integer_max} {:instruction integer_dup_items} {:instruction integer_mult} {:instruction integer_flush} {:instruction integer_div} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_inc} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_div} {:instruction float_inc} {:instruction float_rot} {:instruction float_inc} {:instruction float_inc} {:instruction float_div} {:instruction float_yankdup} {:instruction float_inc} {:instruction float_div} {:instruction float_inc} {:instruction float_div} {:instruction float_inc} {:instruction float_rot} {:instruction float_inc} {:instruction float_inc} {:instruction integer_rot} {:instruction float_inc} {:instruction float_yankdup} {:instruction integer_mod} {:instruction float_div} {:instruction float_inc} {:instruction print_integer} {:instruction float_inc} {:instruction integer_pop} {:instruction integer_mod} {:instruction integer_max} {:instruction float_mult} {:instruction float_dup_items} {:instruction integer_mod} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_inc} {:instruction float_yankdup} {:instruction integer_stackdepth} {:instruction float_inc} {:instruction float_mult} {:instruction float_dup_items} {:instruction float_add} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_dup_items} {:instruction integer_pop} {:instruction float_inc} {:instruction float_mult} {:instruction float_div} {:instruction float_inc} {:instruction float_inc} {:instruction float_swap} {:instruction float_inc} {:instruction float_yank} {:instruction float_inc} {:instruction float_yankdup} {:instruction print_float} {:instruction float_max} {:instruction integer_yankdup} {:instruction integer_min} {:instruction integer_div} {:instruction float_mult} {:instruction float_dup_items} {:instruction float_div} {:instruction float_inc} {:instruction float_min} {:instruction float_dup_times} {:instruction float_max})
Best program: (in1 integer_max integer_dup_items integer_mult integer_flush integer_div float_inc float_yankdup float_inc float_yankdup float_inc float_inc float_yankdup float_div float_inc float_rot float_inc float_inc float_div float_yankdup float_inc float_div float_inc float_div float_inc float_rot float_inc float_inc integer_rot float_inc float_yankdup integer_mod float_div float_inc print_integer float_inc integer_pop integer_mod integer_max float_mult float_dup_items integer_mod float_inc float_yankdup float_inc float_yankdup integer_stackdepth float_inc float_mult float_dup_items float_add float_inc float_yankdup float_dup_items integer_pop float_inc float_mult float_div float_inc float_inc float_swap float_inc float_yank float_inc float_yankdup print_float float_max integer_yankdup integer_min integer_div float_mult float_dup_items float_div float_inc float_min float_dup_times float_max)
Errors: [34.0 13 79.0 13 91.0 12 49.0 2 67.0 3 98.0 2 26.0 2 50.0 2 36.0 2 73.0 2 0.0 0 30.0 2 8.0 1 6.0 2 43.0 3 57.0 2 21.0 2 25.0 2 18.0 3 15.0 2 29.0 2 5.0 3 47.0 2 73.0 3 40.0 1]
Total: 1103.0
Mean: 22.06
Genome size: 77
Size: 78
Percent parens: 0.013
--- Population Statistics ---
Average total errors in population: 3109.286742400001
Median total errors in population: 1103.0
Error averages by case: (113.06066290000003 12.717 141.14878509999997 12.696 162.16822790000003 12.059 132.49068770000008 3.755 147.34123290000005 4.332 166.91037550000004 3.431 109.52620989999998 3.44 129.22293480000005 3.702 115.59954180000003 3.587 145.87825000000007 3.339 86.51002410000004 2.236 116.74640809999995 3.995 90.14586460000001 2.672 80.8452803 3.399 124.7049861 4.357 140.7027067 3.985 102.48352090000002 3.357 95.47218319999999 3.366 102.63236090000001 4.296 102.15202540000004 3.477 94.98942410000001 4.169 92.55513140000001 4.155 124.3598639 3.468 154.41849440000001 4.392 119.80055979999999 3.039)
Error minima by case: (0.1986 7 55.0 1 13.3419 8 20.8727 1 22.5604 2 0.4541 1 15.0569 1 26.0 2 11.7492 1 0.1229 1 0.0 0 6.0 2 0.0 0 0.0 0 8.0144 2 29.0508 2 2.0 1 0.1291 1 1.0 1 5.0 1 2.8305 1 0.0 0 0.1075 1 4.193 2 16.0 1)
Average genome size in population (length): 86.572
Average program size in population (points): 87.572
Average percent parens in population: 0.012
Minimum age in population: 67.80882608159203
Maximum age in population: 72.56786486964586
Average age in population: 70.66523074429512
Median age in population: 70.70944754378814
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 8
Genome diversity (% unique Plush genomes):	 0.907
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 8
Syntactic diversity (% unique Push programs):	 0.907
Total error diversity:				 0.108
Error (vector) diversity:			 0.119
Behavioral diversity:				 0.12
--- Run Statistics ---
Number of program evaluations used so far: 50000
Number of point (instruction) evaluations so far: 94468734
--- Timings ---
Current time: 1529615041038 milliseconds
Total Time:         185.9 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        66.2 seconds, 35.6%
Fitness Testing:     93.3 seconds, 50.2%
Report:              26.2 seconds, 14.1%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 49
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 50
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 50
;;******************************
;; -*- Number IO problem report - generation 50
Test total error for best: 59131.0
Test mean error for best: 29.56550
;;------------------------------
Outputs of best individual on training cases:
Correct output: 1.9526623133   | Program output: -32.0473376867
Correct output: -70.8009773522 | Program output: 8.1990226478  
Correct output: -13.7839009431 | Program output: 77.2160990569 
Correct output: 143.8727406396 | Program output: 94.8727406396 
Correct output: 136.4396027174 | Program output: 69.4396027174 
Correct output: 18.5044280613  | Program output: 116.5044280613
Correct output: 92.0568646792  | Program output: 66.0568646792 
Correct output: 71.8873476205  | Program output: 121.8873476205
Correct output: -10.8388749243 | Program output: -46.8388749243
Correct output: 0.9299825981   | Program output: 73.9299825981 
Correct output: -26.7840412284 | Program output: -26.7840412284
Correct output: -102.1264221267 | Program output: -72.1264221267
Correct output: 40.8061668642  | Program output: 48.8061668642 
Correct output: -5.2544966331  | Program output: -11.2544966331
Correct output: 102.9855886244 | Program output: 59.9855886244 
Correct output: -118.0507723766 | Program output: -61.0507723766
Correct output: 55.9371769928  | Program output: 76.9371769928 
Correct output: 4.2657989984   | Program output: 29.2657989984 
Correct output: 96.7057987603  | Program output: 114.7057987603
Correct output: 122.162446611  | Program output: 107.162446611 
Correct output: 30.0102027945  | Program output: 1.0102027945  
Correct output: 104.5822387035 | Program output: 99.5822387035 
Correct output: -1.5538743366  | Program output: -48.5538743366
Correct output: 166.8070496115 | Program output: 93.8070496115 
Correct output: 58.6188945281  | Program output: 98.6188945281 
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction in1} {:instruction integer_max} {:instruction integer_dup_items} {:instruction integer_max} {:instruction float_sub} {:instruction integer_min} {:instruction integer_mod} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_inc} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_div} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_dup_items} {:instruction float_div} {:instruction float_inc} {:instruction float_yankdup} {:instruction integer_rot} {:instruction float_yankdup} {:instruction float_inc} {:instruction float_dup_items} {:instruction float_div} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_inc} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_div} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_mult} {:instruction float_dup_items} {:instruction float_div} {:instruction float_inc} {:instruction float_mult} {:instruction float_dup_items} {:instruction float_div} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_inc} {:instruction integer_mod} {:instruction float_inc} {:instruction tagged_332} {:instruction float_inc} {:instruction integer_mod} {:instruction float_inc} {:instruction float_inc} {:instruction float_yankdup} {:instruction integer_stackdepth} {:instruction integer_flush} {:instruction float_yankdup} {:instruction float_mult} {:instruction float_dup_items} {:instruction float_div} {:instruction float_inc} {:instruction float_rot} {:instruction integer_sub} {:instruction integer_mod} {:instruction integer_div} {:instruction float_mult} {:instruction float_dup_items} {:instruction integer_div} {:instruction float_min} {:instruction float_dup_items} {:instruction tagged_899} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_yankdup} {:instruction print_float} {:instruction float_dec} {:instruction integer_yankdup} {:instruction float_yank} {:instruction print_float} {:instruction float_max} {:instruction integer_yankdup} {:instruction float_swap} {:instruction integer_max} {:instruction float_max} {:instruction integer_fromfloat} {:instruction print_float} {:instruction integer_dup_times} {:instruction -44} {:instruction float_pop} {:instruction integer_dup_items} {:instruction float_swap} {:instruction in2} {:instruction 52} {:instruction float_shove})
Best program: (in1 integer_max integer_dup_items integer_max float_sub integer_min integer_mod float_inc float_yankdup float_inc float_yankdup float_inc float_inc float_yankdup float_div float_inc float_yankdup float_dup_items float_div float_inc float_yankdup integer_rot float_yankdup float_inc float_dup_items float_div float_inc float_yankdup float_inc float_yankdup float_inc float_inc float_yankdup float_div float_inc float_yankdup float_inc float_yankdup float_inc float_yankdup float_inc float_yankdup float_mult float_dup_items float_div float_inc float_mult float_dup_items float_div float_inc float_yankdup float_inc integer_mod float_inc tagged_332 float_inc integer_mod float_inc float_inc float_yankdup integer_stackdepth integer_flush float_yankdup float_mult float_dup_items float_div float_inc float_rot integer_sub integer_mod integer_div float_mult float_dup_items integer_div float_min float_dup_items tagged_899 float_inc float_yankdup float_yankdup print_float float_dec integer_yankdup float_yank print_float float_max integer_yankdup float_swap integer_max float_max integer_fromfloat print_float integer_dup_times -44 float_pop integer_dup_items float_swap in2 52 float_shove)
Errors: [34.0 13 79.0 13 91.0 12 49.0 2 67.0 3 98.0 2 26.0 2 50.0 2 36.0 2 73.0 2 0.0 0 30.0 2 8.0 1 6.0 2 43.0 3 57.0 2 21.0 2 25.0 2 18.0 3 15.0 2 29.0 2 5.0 3 47.0 2 73.0 3 40.0 1]
Total: 1103.0
Mean: 22.06
Genome size: 100
Size: 101
Percent parens: 0.010
--- Population Statistics ---
Average total errors in population: 3093.7393217000003
Median total errors in population: 1103.0
Error averages by case: (111.85642380000002 12.671 139.8179295000001 12.768 160.2169215 12.055 133.11293500000005 3.851 147.78788900000004 4.44 164.4317355 3.485 109.92094619999997 3.522 127.41253250000005 3.75 114.82053840000009 3.65 143.79180670000005 3.396 85.53297380000001 2.31 114.3669533 4.02 90.43568410000002 2.712 80.92948110000002 3.479 125.18288079999999 4.436 138.57942079999998 4.026 102.66734680000003 3.453 94.9040058 3.422 103.34097920000005 4.344 102.78617320000001 3.551 92.90976470000004 4.231 93.51698610000001 4.223 123.3763335 3.547 155.16579610000005 4.466 117.97488430000004 3.092)
Error minima by case: (0.0473 7 7.689 1 10.8193 8 39.3349 2 59.0 2 0.3224 1 18.0 1 27.0 2 10.0838 1 0.7312 1 0.0 0 7.0 2 0.0 0 0.0 0 35.0 2 34.0 2 2.0 1 0.1331 1 0.0 0 7.0 1 4.1019 1 0.0 0 1.5539 1 65.0 2 17.0 1)
Average genome size in population (length): 86.03
Average program size in population (points): 87.03
Average percent parens in population: 0.012
Minimum age in population: 69.64252247630439
Maximum age in population: 73.83813010161967
Average age in population: 72.06776919990769
Median age in population: 72.10207256707473
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 5
Genome diversity (% unique Plush genomes):	 0.895
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 5
Syntactic diversity (% unique Push programs):	 0.895
Total error diversity:				 0.107
Error (vector) diversity:			 0.115
Behavioral diversity:				 0.116
--- Run Statistics ---
Number of program evaluations used so far: 51000
Number of point (instruction) evaluations so far: 96620109
--- Timings ---
Current time: 1529615044992 milliseconds
Total Time:         189.7 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        67.6 seconds, 35.6%
Fitness Testing:     95.3 seconds, 50.2%
Report:              26.7 seconds, 14.1%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 50
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 51
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 51
;;******************************
;; -*- Number IO problem report - generation 51
Test total error for best: 59131.0
Test mean error for best: 29.56550
;;------------------------------
Outputs of best individual on training cases:
Correct output: 1.9526623133   | Program output: -32.0473376867
Correct output: -70.8009773522 | Program output: 8.1990226478  
Correct output: -13.7839009431 | Program output: 77.2160990569 
Correct output: 143.8727406396 | Program output: 94.8727406396 
Correct output: 136.4396027174 | Program output: 69.4396027174 
Correct output: 18.5044280613  | Program output: 116.5044280613
Correct output: 92.0568646792  | Program output: 66.0568646792 
Correct output: 71.8873476205  | Program output: 121.8873476205
Correct output: -10.8388749243 | Program output: -46.8388749243
Correct output: 0.9299825981   | Program output: 73.9299825981 
Correct output: -26.7840412284 | Program output: -26.7840412284
Correct output: -102.1264221267 | Program output: -72.1264221267
Correct output: 40.8061668642  | Program output: 48.8061668642 
Correct output: -5.2544966331  | Program output: -11.2544966331
Correct output: 102.9855886244 | Program output: 59.9855886244 
Correct output: -118.0507723766 | Program output: -61.0507723766
Correct output: 55.9371769928  | Program output: 76.9371769928 
Correct output: 4.2657989984   | Program output: 29.2657989984 
Correct output: 96.7057987603  | Program output: 114.7057987603
Correct output: 122.162446611  | Program output: 107.162446611 
Correct output: 30.0102027945  | Program output: 1.0102027945  
Correct output: 104.5822387035 | Program output: 99.5822387035 
Correct output: -1.5538743366  | Program output: -48.5538743366
Correct output: 166.8070496115 | Program output: 93.8070496115 
Correct output: 58.6188945281  | Program output: 98.6188945281 
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction in1} {:instruction integer_max} {:instruction integer_dup_items} {:instruction integer_sub} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_inc} {:instruction float_rot} {:instruction float_inc} {:instruction float_inc} {:instruction float_sub} {:instruction float_div} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_dup_items} {:instruction float_div} {:instruction float_inc} {:instruction float_add} {:instruction float_min} {:instruction float_yankdup} {:instruction float_inc} {:instruction float_dup_items} {:instruction float_div} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_inc} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_div} {:instruction float_inc} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_mult} {:instruction float_sub} {:instruction float_div} {:instruction float_inc} {:instruction float_mult} {:instruction float_dup_items} {:instruction float_div} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_inc} {:instruction integer_mult} {:instruction float_inc} {:instruction integer_mod} {:instruction float_inc} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_div} {:instruction integer_flush} {:instruction float_yankdup} {:instruction float_mult} {:instruction float_dup_items} {:instruction float_div} {:instruction float_inc} {:instruction integer_dup_items} {:instruction integer_sub} {:instruction integer_mod} {:instruction integer_div} {:instruction float_mult} {:instruction float_dup_items} {:instruction float_div} {:instruction float_inc} {:instruction float_yankdup} {:instruction print_float} {:instruction float_max} {:instruction integer_yankdup} {:instruction integer_sub} {:instruction float_yank} {:instruction integer_div} {:instruction float_yank} {:instruction print_float} {:instruction float_max} {:instruction integer_yankdup} {:instruction -44} {:instruction float_pop} {:instruction integer_yankdup} {:instruction integer_shove} {:instruction float_cos} {:instruction float_dec} {:instruction integer_dup} {:instruction integer_max} {:instruction float_max} {:instruction print_float})
Best program: (in1 integer_max integer_dup_items integer_sub float_inc float_yankdup float_inc float_rot float_inc float_inc float_sub float_div float_inc float_yankdup float_dup_items float_div float_inc float_add float_min float_yankdup float_inc float_dup_items float_div float_inc float_yankdup float_inc float_yankdup float_inc float_inc float_yankdup float_div float_inc float_inc float_yankdup float_inc float_yankdup float_inc float_yankdup float_mult float_sub float_div float_inc float_mult float_dup_items float_div float_inc float_yankdup float_inc float_yankdup float_inc integer_mult float_inc integer_mod float_inc float_inc float_yankdup float_div integer_flush float_yankdup float_mult float_dup_items float_div float_inc integer_dup_items integer_sub integer_mod integer_div float_mult float_dup_items float_div float_inc float_yankdup print_float float_max integer_yankdup integer_sub float_yank integer_div float_yank print_float float_max integer_yankdup -44 float_pop integer_yankdup integer_shove float_cos float_dec integer_dup integer_max float_max print_float)
Errors: [34.0 13 79.0 13 91.0 12 49.0 2 67.0 3 98.0 2 26.0 2 50.0 2 36.0 2 73.0 2 0.0 0 30.0 2 8.0 1 6.0 2 43.0 3 57.0 2 21.0 2 25.0 2 18.0 3 15.0 2 29.0 2 5.0 3 47.0 2 73.0 3 40.0 1]
Total: 1103.0
Mean: 22.06
Genome size: 92
Size: 93
Percent parens: 0.011
--- Population Statistics ---
Average total errors in population: 3068.340047099999
Median total errors in population: 1104.0
Error averages by case: (111.11422530000004 12.678 141.9978308000001 12.707 159.630484 12.05 131.28019140000006 3.793 146.2007292 4.335 164.44548129999998 3.373 108.36063809999997 3.439 126.21778140000005 3.662 113.61888560000001 3.598 143.31779640000008 3.284 84.16782839999999 2.28 112.63612179999997 3.981 89.15119110000002 2.636 80.2359414 3.413 123.58383089999998 4.35 137.16016989999997 3.959 100.5809788 3.354 95.65780680000002 3.297 100.9043095 4.261 100.78869210000003 3.448 95.40154219999998 4.354 91.20919360000002 4.093 123.36748149999997 3.458 153.2414736 4.368 116.87044199999998 3.028)
Error minima by case: (0.0473 7 11.6513 1 5.3392 8 39.0 1 38.5853 2 0.2737 1 5.7974 1 25.9669 2 9.8792 1 0.1323 1 0.0 0 6.0 2 0.1938 1 0.0 0 5.1313 2 33.0 2 1.0 1 0.1291 1 0.0 0 5.0 1 1.1121 1 0.0 0 0.1075 1 63.0 2 16.0 1)
Average genome size in population (length): 85.333
Average program size in population (points): 86.333
Average percent parens in population: 0.012
Minimum age in population: 70.99134925844533
Maximum age in population: 75.45866909052177
Average age in population: 73.49965210908806
Median age in population: 73.54203971481535
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 5
Genome diversity (% unique Plush genomes):	 0.912
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 5
Syntactic diversity (% unique Push programs):	 0.912
Total error diversity:				 0.099
Error (vector) diversity:			 0.106
Behavioral diversity:				 0.107
--- Run Statistics ---
Number of program evaluations used so far: 52000
Number of point (instruction) evaluations so far: 98753934
--- Timings ---
Current time: 1529615048906 milliseconds
Total Time:         193.7 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        68.9 seconds, 35.6%
Fitness Testing:     97.3 seconds, 50.2%
Report:              27.3 seconds, 14.1%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 51
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 52
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 52
;;******************************
;; -*- Number IO problem report - generation 52
Test total error for best: 59131.0
Test mean error for best: 29.56550
;;------------------------------
Outputs of best individual on training cases:
Correct output: 1.9526623133   | Program output: -32.0473376867
Correct output: -70.8009773522 | Program output: 8.1990226478  
Correct output: -13.7839009431 | Program output: 77.2160990569 
Correct output: 143.8727406396 | Program output: 94.8727406396 
Correct output: 136.4396027174 | Program output: 69.4396027174 
Correct output: 18.5044280613  | Program output: 116.5044280613
Correct output: 92.0568646792  | Program output: 66.0568646792 
Correct output: 71.8873476205  | Program output: 121.8873476205
Correct output: -10.8388749243 | Program output: -46.8388749243
Correct output: 0.9299825981   | Program output: 73.9299825981 
Correct output: -26.7840412284 | Program output: -26.7840412284
Correct output: -102.1264221267 | Program output: -72.1264221267
Correct output: 40.8061668642  | Program output: 48.8061668642 
Correct output: -5.2544966331  | Program output: -11.2544966331
Correct output: 102.9855886244 | Program output: 59.9855886244 
Correct output: -118.0507723766 | Program output: -61.0507723766
Correct output: 55.9371769928  | Program output: 76.9371769928 
Correct output: 4.2657989984   | Program output: 29.2657989984 
Correct output: 96.7057987603  | Program output: 114.7057987603
Correct output: 122.162446611  | Program output: 107.162446611 
Correct output: 30.0102027945  | Program output: 1.0102027945  
Correct output: 104.5822387035 | Program output: 99.5822387035 
Correct output: -1.5538743366  | Program output: -48.5538743366
Correct output: 166.8070496115 | Program output: 93.8070496115 
Correct output: 58.6188945281  | Program output: 98.6188945281 
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction in1} {:instruction integer_max} {:instruction integer_dup_items} {:instruction integer_sub} {:instruction integer_mod} {:instruction integer_div} {:instruction integer_div} {:instruction float_inc} {:instruction float_max} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_inc} {:instruction float_div} {:instruction float_inc} {:instruction float_div} {:instruction float_inc} {:instruction float_rot} {:instruction float_inc} {:instruction float_inc} {:instruction float_div} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_inc} {:instruction float_div} {:instruction float_inc} {:instruction float_div} {:instruction float_inc} {:instruction float_rot} {:instruction float_mod} {:instruction float_inc} {:instruction float_div} {:instruction float_inc} {:instruction float_yankdup} {:instruction integer_mod} {:instruction integer_div} {:instruction float_mult} {:instruction float_dup_items} {:instruction float_add} {:instruction float_inc} {:instruction integer_yankdup} {:instruction float_div} {:instruction float_inc} {:instruction float_mult} {:instruction float_dup_items} {:instruction float_div} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_inc} {:instruction float_mult} {:instruction float_dup_items} {:instruction integer_dup_items} {:instruction float_inc} {:instruction integer_mod} {:instruction float_inc} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_div} {:instruction integer_flush} {:instruction float_yankdup} {:instruction float_mult} {:instruction integer_shove} {:instruction float_div} {:instruction float_inc} {:instruction integer_dup_items} {:instruction integer_sub} {:instruction integer_mod} {:instruction integer_div} {:instruction float_mult} {:instruction float_dup_items} {:instruction float_div} {:instruction float_inc} {:instruction float_yankdup} {:instruction print_float} {:instruction float_max} {:instruction integer_yankdup} {:instruction integer_min} {:instruction integer_max} {:instruction float_max} {:instruction integer_fromfloat} {:instruction print_float} {:instruction print_float} {:instruction -45} {:instruction float_pop} {:instruction integer_shove} {:instruction float_swap} {:instruction float_mod} {:instruction 52} {:instruction float_shove} {:instruction float_stackdepth} {:instruction integer_dup} {:instruction float_flush} {:instruction integer_mult} {:instruction float_dup} {:instruction integer_pop} {:instruction integer_yankdup})
Best program: (in1 integer_max integer_dup_items integer_sub integer_mod integer_div integer_div float_inc float_max float_inc float_yankdup float_inc float_div float_inc float_div float_inc float_rot float_inc float_inc float_div float_inc float_yankdup float_inc float_yankdup float_inc float_div float_inc float_div float_inc float_rot float_mod float_inc float_div float_inc float_yankdup integer_mod integer_div float_mult float_dup_items float_add float_inc integer_yankdup float_div float_inc float_mult float_dup_items float_div float_inc float_yankdup float_inc float_yankdup float_inc float_mult float_dup_items integer_dup_items float_inc integer_mod float_inc float_inc float_yankdup float_div integer_flush float_yankdup float_mult integer_shove float_div float_inc integer_dup_items integer_sub integer_mod integer_div float_mult float_dup_items float_div float_inc float_yankdup print_float float_max integer_yankdup integer_min integer_max float_max integer_fromfloat print_float print_float -45 float_pop integer_shove float_swap float_mod 52 float_shove float_stackdepth integer_dup float_flush integer_mult float_dup integer_pop integer_yankdup)
Errors: [34.0 13 79.0 13 91.0 12 49.0 2 67.0 3 98.0 2 26.0 2 50.0 2 36.0 2 73.0 2 0.0 0 30.0 2 8.0 1 6.0 2 43.0 3 57.0 2 21.0 2 25.0 2 18.0 3 15.0 2 29.0 2 5.0 3 47.0 2 73.0 3 40.0 1]
Total: 1103.0
Mean: 22.06
Genome size: 99
Size: 100
Percent parens: 0.010
--- Population Statistics ---
Average total errors in population: 2754.1418031000003
Median total errors in population: 1103.0
Error averages by case: (98.5509196 12.694 133.20144580000004 12.717 147.53783479999998 12.002 117.52806160000006 3.659 132.49863069999998 4.225 152.0312181 3.291 94.01944309999999 3.356 113.97697990000002 3.572 101.19094060000003 3.473 131.00049980000003 3.226 72.112882 2.141 103.31947989999999 3.867 74.13599749999999 2.558 71.32149380000001 3.304 109.41389509999999 4.246 127.65656379999994 3.876 86.96395099999998 3.256 83.16678379999999 3.242 87.17195940000002 4.196 86.66709940000003 3.348 84.67458900000001 4.132 76.82572399999995 4.004 109.96995919999999 3.341 139.8343095 4.264 104.4771417 2.904)
Error minima by case: (0.2939 7 55.0 1 12.3419 7 28.8727 2 21.4396 2 0.4396 1 10.3686 1 26.0 2 10.9706 1 0.1435 1 0.0 0 6.0 2 1.0 1 0.0 0 0.497 2 33.0 2 3.0 1 0.345 1 1.0 1 7.0 1 2.7568 1 0.0 0 0.8925 1 51.807 2 16.0 1)
Average genome size in population (length): 84.8
Average program size in population (points): 85.8
Average percent parens in population: 0.012
Minimum age in population: 71.99134925844533
Maximum age in population: 77.11037303644144
Average age in population: 74.89847921993876
Median age in population: 74.9785631292963
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 9
Genome diversity (% unique Plush genomes):	 0.887
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 9
Syntactic diversity (% unique Push programs):	 0.887
Total error diversity:				 0.107
Error (vector) diversity:			 0.115
Behavioral diversity:				 0.115
--- Run Statistics ---
Number of program evaluations used so far: 53000
Number of point (instruction) evaluations so far: 100874534
--- Timings ---
Current time: 1529615052831 milliseconds
Total Time:         197.6 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        70.3 seconds, 35.6%
Fitness Testing:     99.3 seconds, 50.3%
Report:              27.9 seconds, 14.1%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 52
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 53
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 53
;;******************************
;; -*- Number IO problem report - generation 53
Test total error for best: 59131.0
Test mean error for best: 29.56550
;;------------------------------
Outputs of best individual on training cases:
Correct output: 1.9526623133   | Program output: -32.0473376867
Correct output: -70.8009773522 | Program output: 8.1990226478  
Correct output: -13.7839009431 | Program output: 77.2160990569 
Correct output: 143.8727406396 | Program output: 94.8727406396 
Correct output: 136.4396027174 | Program output: 69.4396027174 
Correct output: 18.5044280613  | Program output: 116.5044280613
Correct output: 92.0568646792  | Program output: 66.0568646792 
Correct output: 71.8873476205  | Program output: 121.8873476205
Correct output: -10.8388749243 | Program output: -46.8388749243
Correct output: 0.9299825981   | Program output: 73.9299825981 
Correct output: -26.7840412284 | Program output: -26.7840412284
Correct output: -102.1264221267 | Program output: -72.1264221267
Correct output: 40.8061668642  | Program output: 48.8061668642 
Correct output: -5.2544966331  | Program output: -11.2544966331
Correct output: 102.9855886244 | Program output: 59.9855886244 
Correct output: -118.0507723766 | Program output: -61.0507723766
Correct output: 55.9371769928  | Program output: 76.9371769928 
Correct output: 4.2657989984   | Program output: 29.2657989984 
Correct output: 96.7057987603  | Program output: 114.7057987603
Correct output: 122.162446611  | Program output: 107.162446611 
Correct output: 30.0102027945  | Program output: 1.0102027945  
Correct output: 104.5822387035 | Program output: 99.5822387035 
Correct output: -1.5538743366  | Program output: -48.5538743366
Correct output: 166.8070496115 | Program output: 93.8070496115 
Correct output: 58.6188945281  | Program output: 98.6188945281 
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction in1} {:instruction integer_max} {:instruction float_shove} {:instruction integer_div} {:instruction integer_mod} {:instruction integer_div} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_inc} {:instruction float_div} {:instruction float_inc} {:instruction float_div} {:instruction float_inc} {:instruction float_rot} {:instruction float_inc} {:instruction float_inc} {:instruction float_div} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_div} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_inc} {:instruction float_rot} {:instruction float_inc} {:instruction float_div} {:instruction float_inc} {:instruction float_div} {:instruction float_inc} {:instruction float_rot} {:instruction float_inc} {:instruction float_inc} {:instruction float_div} {:instruction float_dup_items} {:instruction float_dup_items} {:instruction float_div} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_inc} {:instruction float_yankdup} {:instruction integer_stackdepth} {:instruction float_inc} {:instruction float_mult} {:instruction float_dup_items} {:instruction float_div} {:instruction float_yankdup} {:instruction integer_mod} {:instruction float_inc} {:instruction float_inc} {:instruction float_mult} {:instruction integer_max} {:instruction float_div} {:instruction float_inc} {:instruction float_inc} {:instruction float_swap} {:instruction float_inc} {:instruction print_integer} {:instruction print_float} {:instruction float_mult} {:instruction float_swap} {:instruction float_inc} {:instruction float_dup_times} {:instruction in2} {:instruction print_float} {:instruction tagged_465} {:instruction float_inc} {:instruction integer_dup_items} {:instruction integer_sub} {:instruction integer_mod} {:instruction integer_div} {:instruction float_dup_times} {:instruction float_dup_items} {:instruction integer_div} {:instruction float_min} {:instruction float_dup_items} {:instruction tagged_899} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_yankdup} {:instruction print_float} {:instruction float_dec} {:instruction integer_yankdup} {:instruction integer_min} {:instruction float_cos} {:instruction integer_stackdepth})
Best program: (in1 integer_max float_shove integer_div integer_mod integer_div float_inc float_yankdup float_inc float_yankdup float_inc float_div float_inc float_div float_inc float_rot float_inc float_inc float_div float_inc float_yankdup float_div float_inc float_yankdup float_inc float_rot float_inc float_div float_inc float_div float_inc float_rot float_inc float_inc float_div float_dup_items float_dup_items float_div float_inc float_yankdup float_inc float_yankdup float_inc float_yankdup integer_stackdepth float_inc float_mult float_dup_items float_div float_yankdup integer_mod float_inc float_inc float_mult integer_max float_div float_inc float_inc float_swap float_inc print_integer print_float float_mult float_swap float_inc float_dup_times in2 print_float tagged_465 float_inc integer_dup_items integer_sub integer_mod integer_div float_dup_times float_dup_items integer_div float_min float_dup_items tagged_899 float_inc float_yankdup float_yankdup print_float float_dec integer_yankdup integer_min float_cos integer_stackdepth)
Errors: [34.0 13 79.0 13 91.0 12 49.0 2 67.0 3 98.0 2 26.0 2 50.0 2 36.0 2 73.0 2 0.0 0 30.0 2 8.0 1 6.0 2 43.0 3 57.0 2 21.0 2 25.0 2 18.0 3 15.0 2 29.0 2 5.0 3 47.0 2 73.0 3 40.0 1]
Total: 1103.0
Mean: 22.06
Genome size: 89
Size: 90
Percent parens: 0.011
--- Population Statistics ---
Average total errors in population: 3102.3467645000005
Median total errors in population: 1103.0
Error averages by case: (111.65253530000004 12.723 145.62486130000008 12.776 163.8826332 12.045 130.68000760000007 3.646 145.8925276 4.216 169.2903316 3.296 108.09175549999998 3.294 130.31740010000001 3.603 113.99563860000002 3.421 147.96119900000008 3.214 84.3777199 2.129 115.59373789999997 3.874 89.59039820000001 2.518 82.62506920000004 3.236 123.394316 4.236 139.37274109999993 3.901 100.83961910000001 3.242 98.9253522 3.253 100.5845509 4.167 100.13291310000002 3.349 97.37112889999999 4.136 90.60589549999997 4.003 123.05624599999996 3.329 152.63960649999999 4.263 121.03558020000003 2.943)
Error minima by case: (0.0473 8 7.4523 2 10.7839 9 41.0 2 59.0 2 0.5044 1 18.0 1 32.0 2 7.8389 1 0.1323 1 0.0 0 12.0 2 0.0 0 0.0 0 35.0 2 30.3495 2 3.0 1 0.5759 1 0.0 0 7.0 1 0.0102 1 0.0 0 1.4461 1 65.0 2 20.6674 1)
Average genome size in population (length): 85.713
Average program size in population (points): 86.713
Average percent parens in population: 0.012
Minimum age in population: 73.86066730465292
Maximum age in population: 78.30133039992457
Average age in population: 76.30503304171586
Median age in population: 76.34675738291234
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 7
Genome diversity (% unique Plush genomes):	 0.902
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 7
Syntactic diversity (% unique Push programs):	 0.902
Total error diversity:				 0.086
Error (vector) diversity:			 0.094
Behavioral diversity:				 0.095
--- Run Statistics ---
Number of program evaluations used so far: 54000
Number of point (instruction) evaluations so far: 103017809
--- Timings ---
Current time: 1529615056765 milliseconds
Total Time:         201.6 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        71.6 seconds, 35.5%
Fitness Testing:    101.3 seconds, 50.3%
Report:              28.5 seconds, 14.1%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 53
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 54
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 54
;;******************************
;; -*- Number IO problem report - generation 54
Test total error for best: 59131.0
Test mean error for best: 29.56550
;;------------------------------
Outputs of best individual on training cases:
Correct output: 1.9526623133   | Program output: -32.0473376867
Correct output: -70.8009773522 | Program output: 8.1990226478  
Correct output: -13.7839009431 | Program output: 77.2160990569 
Correct output: 143.8727406396 | Program output: 94.8727406396 
Correct output: 136.4396027174 | Program output: 69.4396027174 
Correct output: 18.5044280613  | Program output: 116.5044280613
Correct output: 92.0568646792  | Program output: 66.0568646792 
Correct output: 71.8873476205  | Program output: 121.8873476205
Correct output: -10.8388749243 | Program output: -46.8388749243
Correct output: 0.9299825981   | Program output: 73.9299825981 
Correct output: -26.7840412284 | Program output: -26.7840412284
Correct output: -102.1264221267 | Program output: -72.1264221267
Correct output: 40.8061668642  | Program output: 48.8061668642 
Correct output: -5.2544966331  | Program output: -11.2544966331
Correct output: 102.9855886244 | Program output: 59.9855886244 
Correct output: -118.0507723766 | Program output: -61.0507723766
Correct output: 55.9371769928  | Program output: 76.9371769928 
Correct output: 4.2657989984   | Program output: 29.2657989984 
Correct output: 96.7057987603  | Program output: 114.7057987603
Correct output: 122.162446611  | Program output: 107.162446611 
Correct output: 30.0102027945  | Program output: 1.0102027945  
Correct output: 104.5822387035 | Program output: 99.5822387035 
Correct output: -1.5538743366  | Program output: -48.5538743366
Correct output: 166.8070496115 | Program output: 93.8070496115 
Correct output: 58.6188945281  | Program output: 98.6188945281 
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction in1} {:instruction integer_max} {:instruction integer_dup_items} {:instruction integer_sub} {:instruction float_sub} {:instruction integer_div} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_yankdup} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_inc} {:instruction float_div} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_dup_items} {:instruction float_div} {:instruction float_inc} {:instruction float_yankdup} {:instruction integer_rot} {:instruction float_yankdup} {:instruction float_inc} {:instruction float_dup_items} {:instruction float_div} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_inc} {:instruction float_inc} {:instruction integer_mult} {:instruction float_div} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_add} {:instruction float_yankdup} {:instruction float_inc} {:instruction integer_yank} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_mult} {:instruction float_dup_items} {:instruction float_div} {:instruction float_inc} {:instruction float_mult} {:instruction float_dup_items} {:instruction float_inc} {:instruction float_sub} {:instruction integer_mod} {:instruction integer_div} {:instruction float_yankdup} {:instruction float_mult} {:instruction float_dup_items} {:instruction float_div} {:instruction float_inc} {:instruction float_mult} {:instruction float_dup_items} {:instruction integer_shove} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_inc} {:instruction integer_swap} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_inc} {:instruction integer_mod} {:instruction float_inc} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_div} {:instruction integer_flush} {:instruction float_yankdup} {:instruction float_mult} {:instruction float_dup_items} {:instruction float_div} {:instruction float_inc} {:instruction float_dup_times} {:instruction in2} {:instruction print_float} {:instruction tagged_465} {:instruction integer_dup_times} {:instruction in2} {:instruction integer_yankdup} {:instruction float_tan} {:instruction float_cos} {:instruction float_stackdepth} {:instruction integer_stackdepth} {:instruction integer_dup} {:instruction float_max} {:instruction integer_dup_times} {:instruction integer_add})
Best program: (in1 integer_max integer_dup_items integer_sub float_sub integer_div float_inc float_yankdup float_yankdup float_inc float_yankdup float_inc float_div float_inc float_yankdup float_dup_items float_div float_inc float_yankdup integer_rot float_yankdup float_inc float_dup_items float_div float_inc float_yankdup float_inc float_yankdup float_inc float_inc integer_mult float_div float_inc float_yankdup float_add float_yankdup float_inc integer_yank float_inc float_yankdup float_inc float_yankdup float_mult float_dup_items float_div float_inc float_mult float_dup_items float_inc float_sub integer_mod integer_div float_yankdup float_mult float_dup_items float_div float_inc float_mult float_dup_items integer_shove float_inc float_yankdup float_inc integer_swap float_inc float_yankdup float_inc integer_mod float_inc float_inc float_yankdup float_div integer_flush float_yankdup float_mult float_dup_items float_div float_inc float_dup_times in2 print_float tagged_465 integer_dup_times in2 integer_yankdup float_tan float_cos float_stackdepth integer_stackdepth integer_dup float_max integer_dup_times integer_add)
Errors: [34.0 13 79.0 13 91.0 12 49.0 2 67.0 3 98.0 2 26.0 2 50.0 2 36.0 2 73.0 2 0.0 0 30.0 2 8.0 1 6.0 2 43.0 3 57.0 2 21.0 2 25.0 2 18.0 3 15.0 2 29.0 2 5.0 3 47.0 2 73.0 3 40.0 1]
Total: 1103.0
Mean: 22.06
Genome size: 93
Size: 94
Percent parens: 0.011
--- Population Statistics ---
Average total errors in population: 3008.12449
Median total errors in population: 1103.0
Error averages by case: (108.37444059999997 12.736 134.67664490000007 12.757 159.57567699999998 12.066 129.07404790000004 3.688 144.05739620000003 4.277 164.9865468 3.352 106.04252190000003 3.368 126.3454339 3.606 111.65840830000008 3.502 143.26187800000005 3.282 80.7318968 2.163 112.04806539999998 3.89 86.63634520000002 2.571 74.75201249999996 3.37 121.3510259 4.282 136.04132489999992 3.915 98.30283880000002 3.322 91.40347300000003 3.295 99.26205159999999 4.225 98.60958980000001 3.415 87.86912830000003 4.16 88.96000519999998 4.079 120.2558042 3.4 151.03233959999997 4.333 116.82659330000003 2.935)
Error minima by case: (0.0473 7 6.2141 1 6.7839 8 26.8727 1 16.5604 2 0.3808 1 17.0 1 0.9437 2 2.5806 1 0.1218 1 0.0 0 7.0 2 0.0 0 0.0 0 2.0144 2 23.0508 2 1.0 1 0.003 1 0.0 0 6.0 1 3.1121 1 0.0 0 1.5539 1 1.807 2 0.6906 1)
Average genome size in population (length): 86.226
Average program size in population (points): 87.226
Average percent parens in population: 0.012
Minimum age in population: 75.25960214649697
Maximum age in population: 80.11096496973948
Average age in population: 77.71259782603222
Median age in population: 77.75056959941104
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 6
Genome diversity (% unique Plush genomes):	 0.905
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 6
Syntactic diversity (% unique Push programs):	 0.905
Total error diversity:				 0.11
Error (vector) diversity:			 0.12
Behavioral diversity:				 0.121
--- Run Statistics ---
Number of program evaluations used so far: 55000
Number of point (instruction) evaluations so far: 105173984
--- Timings ---
Current time: 1529615060698 milliseconds
Total Time:         205.5 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        72.9 seconds, 35.5%
Fitness Testing:    103.4 seconds, 50.3%
Report:              29.1 seconds, 14.1%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 54
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 55
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 55
;;******************************
;; -*- Number IO problem report - generation 55
Test total error for best: 59131.0
Test mean error for best: 29.56550
;;------------------------------
Outputs of best individual on training cases:
Correct output: 1.9526623133   | Program output: -32.0473376867
Correct output: -70.8009773522 | Program output: 8.1990226478  
Correct output: -13.7839009431 | Program output: 77.2160990569 
Correct output: 143.8727406396 | Program output: 94.8727406396 
Correct output: 136.4396027174 | Program output: 69.4396027174 
Correct output: 18.5044280613  | Program output: 116.5044280613
Correct output: 92.0568646792  | Program output: 66.0568646792 
Correct output: 71.8873476205  | Program output: 121.8873476205
Correct output: -10.8388749243 | Program output: -46.8388749243
Correct output: 0.9299825981   | Program output: 73.9299825981 
Correct output: -26.7840412284 | Program output: -26.7840412284
Correct output: -102.1264221267 | Program output: -72.1264221267
Correct output: 40.8061668642  | Program output: 48.8061668642 
Correct output: -5.2544966331  | Program output: -11.2544966331
Correct output: 102.9855886244 | Program output: 59.9855886244 
Correct output: -118.0507723766 | Program output: -61.0507723766
Correct output: 55.9371769928  | Program output: 76.9371769928 
Correct output: 4.2657989984   | Program output: 29.2657989984 
Correct output: 96.7057987603  | Program output: 114.7057987603
Correct output: 122.162446611  | Program output: 107.162446611 
Correct output: 30.0102027945  | Program output: 1.0102027945  
Correct output: 104.5822387035 | Program output: 99.5822387035 
Correct output: -1.5538743366  | Program output: -48.5538743366
Correct output: 166.8070496115 | Program output: 93.8070496115 
Correct output: 58.6188945281  | Program output: 98.6188945281 
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction in1} {:instruction integer_max} {:instruction integer_div} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_inc} {:instruction float_inc} {:instruction float_dup_items} {:instruction float_div} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_div} {:instruction float_inc} {:instruction float_yankdup} {:instruction integer_rot} {:instruction float_yankdup} {:instruction float_inc} {:instruction float_dup_items} {:instruction float_div} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_inc} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_div} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_inc} {:instruction float_inc} {:instruction float_mult} {:instruction float_dup_items} {:instruction float_div} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_inc} {:instruction integer_mod} {:instruction float_inc} {:instruction float_inc} {:instruction float_yankdup} {:instruction integer_stackdepth} {:instruction integer_dup_items} {:instruction float_yankdup} {:instruction float_mult} {:instruction float_dup_items} {:instruction integer_add} {:instruction float_inc} {:instruction integer_dup_items} {:instruction integer_sub} {:instruction integer_mod} {:instruction integer_div} {:instruction float_mult} {:instruction float_dup_items} {:instruction float_div} {:instruction float_inc} {:instruction float_yankdup} {:instruction print_float} {:instruction float_max} {:instruction integer_yankdup} {:instruction integer_min} {:instruction float_cos} {:instruction float_dec} {:instruction integer_stackdepth} {:instruction integer_max} {:instruction float_max} {:instruction float_add} {:instruction integer_swap})
Best program: (in1 integer_max integer_div float_inc float_yankdup float_inc float_yankdup float_inc float_inc float_dup_items float_div float_inc float_yankdup float_div float_inc float_yankdup integer_rot float_yankdup float_inc float_dup_items float_div float_inc float_yankdup float_inc float_yankdup float_inc float_inc float_yankdup float_div float_inc float_yankdup float_inc float_yankdup float_inc float_yankdup float_inc float_inc float_mult float_dup_items float_div float_inc float_yankdup float_inc float_yankdup float_inc float_yankdup float_inc integer_mod float_inc float_inc float_yankdup integer_stackdepth integer_dup_items float_yankdup float_mult float_dup_items integer_add float_inc integer_dup_items integer_sub integer_mod integer_div float_mult float_dup_items float_div float_inc float_yankdup print_float float_max integer_yankdup integer_min float_cos float_dec integer_stackdepth integer_max float_max float_add integer_swap)
Errors: [34.0 13 79.0 13 91.0 12 49.0 2 67.0 3 98.0 2 26.0 2 50.0 2 36.0 2 73.0 2 0.0 0 30.0 2 8.0 1 6.0 2 43.0 3 57.0 2 21.0 2 25.0 2 18.0 3 15.0 2 29.0 2 5.0 3 47.0 2 73.0 3 40.0 1]
Total: 1103.0
Mean: 22.06
Genome size: 78
Size: 79
Percent parens: 0.013
--- Population Statistics ---
Average total errors in population: 2970.647965400001
Median total errors in population: 1103.0
Error averages by case: (107.58592250000002 12.703 134.7454562 12.707 158.59921549999999 12.039 126.178079 3.605 141.29797259999995 4.216 164.757011 3.262 103.35298090000002 3.292 125.55985810000003 3.532 110.06512350000004 3.43 142.27925470000002 3.17 80.29507180000002 2.064 111.51496690000002 3.81 84.53833689999999 2.483 74.97501109999999 3.26 118.72997610000003 4.205 135.31879409999993 3.834 96.63836029999999 3.214 91.46706710000001 3.184 97.24220670000001 4.13 96.5090443 3.307 86.46048669999998 4.027 86.06976429999997 3.996 118.98488549999998 3.325 148.23344400000002 4.236 115.36067560000004 2.858)
Error minima by case: (0.1409 8 18.2101 2 14.6028 8 40.0 1 24.005 2 1.5357 1 17.0 1 26.0 2 8.193 1 0.3909 1 0.0 0 6.0 2 0.0 0 0.0 0 34.0 2 29.0397 2 0.0 0 0.0282 1 1.0 1 6.0 1 0.1019 1 0.0 0 1.2103 1 26.0 2 16.0 1)
Average genome size in population (length): 84.906
Average program size in population (points): 85.906
Average percent parens in population: 0.012
Minimum age in population: 76.3806986703166
Maximum age in population: 81.20394855847265
Average age in population: 79.11372339856786
Median age in population: 79.12822031178479
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 7
Genome diversity (% unique Plush genomes):	 0.893
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 7
Syntactic diversity (% unique Push programs):	 0.893
Total error diversity:				 0.096
Error (vector) diversity:			 0.106
Behavioral diversity:				 0.107
--- Run Statistics ---
Number of program evaluations used so far: 56000
Number of point (instruction) evaluations so far: 107296959
--- Timings ---
Current time: 1529615064478 milliseconds
Total Time:         209.3 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        74.2 seconds, 35.5%
Fitness Testing:    105.3 seconds, 50.3%
Report:              29.6 seconds, 14.2%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 55
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 56
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 56
;;******************************
;; -*- Number IO problem report - generation 56
Test total error for best: 59131.0
Test mean error for best: 29.56550
;;------------------------------
Outputs of best individual on training cases:
Correct output: 1.9526623133   | Program output: -32.0473376867
Correct output: -70.8009773522 | Program output: 8.1990226478  
Correct output: -13.7839009431 | Program output: 77.2160990569 
Correct output: 143.8727406396 | Program output: 94.8727406396 
Correct output: 136.4396027174 | Program output: 69.4396027174 
Correct output: 18.5044280613  | Program output: 116.5044280613
Correct output: 92.0568646792  | Program output: 66.0568646792 
Correct output: 71.8873476205  | Program output: 121.8873476205
Correct output: -10.8388749243 | Program output: -46.8388749243
Correct output: 0.9299825981   | Program output: 73.9299825981 
Correct output: -26.7840412284 | Program output: -26.7840412284
Correct output: -102.1264221267 | Program output: -72.1264221267
Correct output: 40.8061668642  | Program output: 48.8061668642 
Correct output: -5.2544966331  | Program output: -11.2544966331
Correct output: 102.9855886244 | Program output: 59.9855886244 
Correct output: -118.0507723766 | Program output: -61.0507723766
Correct output: 55.9371769928  | Program output: 76.9371769928 
Correct output: 4.2657989984   | Program output: 29.2657989984 
Correct output: 96.7057987603  | Program output: 114.7057987603
Correct output: 122.162446611  | Program output: 107.162446611 
Correct output: 30.0102027945  | Program output: 1.0102027945  
Correct output: 104.5822387035 | Program output: 99.5822387035 
Correct output: -1.5538743366  | Program output: -48.5538743366
Correct output: 166.8070496115 | Program output: 93.8070496115 
Correct output: 58.6188945281  | Program output: 98.6188945281 
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction in1} {:instruction integer_max} {:instruction integer_dup_items} {:instruction integer_sub} {:instruction integer_mod} {:instruction integer_div} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_inc} {:instruction float_inc} {:instruction integer_mod} {:instruction float_inc} {:instruction float_div} {:instruction float_inc} {:instruction float_rot} {:instruction float_inc} {:instruction float_inc} {:instruction integer_mult} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_inc} {:instruction float_div} {:instruction float_inc} {:instruction float_div} {:instruction float_inc} {:instruction float_rot} {:instruction float_inc} {:instruction float_inc} {:instruction float_div} {:instruction float_inc} {:instruction float_yankdup} {:instruction integer_mod} {:instruction integer_div} {:instruction float_mult} {:instruction float_dup_items} {:instruction float_div} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_inc} {:instruction float_yankdup} {:instruction integer_stackdepth} {:instruction float_inc} {:instruction float_mult} {:instruction float_dup_items} {:instruction float_div} {:instruction float_yankdup} {:instruction integer_mod} {:instruction float_inc} {:instruction float_inc} {:instruction float_mult} {:instruction integer_max} {:instruction float_div} {:instruction float_inc} {:instruction float_inc} {:instruction float_swap} {:instruction float_inc} {:instruction print_integer} {:instruction print_float} {:instruction float_mult} {:instruction float_swap} {:instruction float_div} {:instruction integer_mod} {:instruction integer_div} {:instruction float_mult} {:instruction float_dup_items} {:instruction float_div} {:instruction float_inc} {:instruction float_sub} {:instruction print_float} {:instruction float_max} {:instruction float_yank} {:instruction integer_max} {:instruction float_max} {:instruction integer_fromfloat} {:instruction print_float} {:instruction 8.679657777986563} {:instruction -44} {:instruction float_dup_times} {:instruction integer_shove} {:instruction float_swap} {:instruction in2} {:instruction 52} {:instruction float_shove} {:instruction integer_pop} {:instruction float_sin} {:instruction integer_dec} {:instruction tagged_790} {:instruction float_dup} {:instruction integer_pop} {:instruction integer_yankdup} {:instruction print_float})
Best program: (in1 integer_max integer_dup_items integer_sub integer_mod integer_div float_inc float_yankdup float_inc float_inc integer_mod float_inc float_div float_inc float_rot float_inc float_inc integer_mult float_inc float_yankdup float_inc float_yankdup float_inc float_div float_inc float_div float_inc float_rot float_inc float_inc float_div float_inc float_yankdup integer_mod integer_div float_mult float_dup_items float_div float_inc float_yankdup float_inc float_yankdup float_inc float_yankdup integer_stackdepth float_inc float_mult float_dup_items float_div float_yankdup integer_mod float_inc float_inc float_mult integer_max float_div float_inc float_inc float_swap float_inc print_integer print_float float_mult float_swap float_div integer_mod integer_div float_mult float_dup_items float_div float_inc float_sub print_float float_max float_yank integer_max float_max integer_fromfloat print_float 8.679657777986563 -44 float_dup_times integer_shove float_swap in2 52 float_shove integer_pop float_sin integer_dec tagged_790 float_dup integer_pop integer_yankdup print_float)
Errors: [34.0 13 79.0 13 91.0 12 49.0 2 67.0 3 98.0 2 26.0 2 50.0 2 36.0 2 73.0 2 0.0 0 30.0 2 8.0 1 6.0 2 43.0 3 57.0 2 21.0 2 25.0 2 18.0 3 15.0 2 29.0 2 5.0 3 47.0 2 73.0 3 40.0 1]
Total: 1103.0
Mean: 22.06
Genome size: 95
Size: 96
Percent parens: 0.010
--- Population Statistics ---
Average total errors in population: 2753.6423187999994
Median total errors in population: 1103.0
Error averages by case: (99.17560820000003 12.812 128.36785440000003 12.796 149.83732569999998 12.058 117.74201430000006 3.479 132.4756888 4.095 155.11923969999998 3.135 94.31957190000003 3.182 115.17114100000002 3.412 102.01273630000007 3.288 133.16444120000003 3.1 71.08457219999998 1.909 101.46274949999994 3.64 75.4219453 2.353 69.28436270000002 3.112 109.52757630000002 4.101 125.59989919999995 3.675 87.13168660000002 3.109 82.9900806 3.081 88.21749979999998 4.057 86.88259340000002 3.202 83.1401318 3.908 77.25934129999997 3.847 111.32265749999998 3.222 139.86326370000003 4.128 105.61733740000003 2.75)
Error minima by case: (0.3712 7 5.7435 1 6.7839 8 35.8727 1 0.4396 2 0.4347 1 17.0 1 26.0 2 3.8389 1 1.7117 1 0.0 0 6.0 2 0.0 0 0.0 0 6.9856 2 6.0508 2 3.0 1 0.5281 1 6.0 1 6.0 1 5.0102 1 0.0 0 1.5126 1 10.807 2 16.0 1)
Average genome size in population (length): 84.859
Average program size in population (points): 85.859
Average percent parens in population: 0.012
Minimum age in population: 77.83219474046116
Maximum age in population: 82.78840475583576
Average age in population: 80.51253654884724
Median age in population: 80.54475133936883
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 5
Genome diversity (% unique Plush genomes):	 0.889
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 5
Syntactic diversity (% unique Push programs):	 0.889
Total error diversity:				 0.088
Error (vector) diversity:			 0.102
Behavioral diversity:				 0.104
--- Run Statistics ---
Number of program evaluations used so far: 57000
Number of point (instruction) evaluations so far: 109418609
--- Timings ---
Current time: 1529615068381 milliseconds
Total Time:         213.2 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        75.6 seconds, 35.4%
Fitness Testing:    107.3 seconds, 50.4%
Report:              30.2 seconds, 14.1%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 56
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 57
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 57
;;******************************
;; -*- Number IO problem report - generation 57
Test total error for best: 59131.0
Test mean error for best: 29.56550
;;------------------------------
Outputs of best individual on training cases:
Correct output: 1.9526623133   | Program output: -32.0473376867
Correct output: -70.8009773522 | Program output: 8.1990226478  
Correct output: -13.7839009431 | Program output: 77.2160990569 
Correct output: 143.8727406396 | Program output: 94.8727406396 
Correct output: 136.4396027174 | Program output: 69.4396027174 
Correct output: 18.5044280613  | Program output: 116.5044280613
Correct output: 92.0568646792  | Program output: 66.0568646792 
Correct output: 71.8873476205  | Program output: 121.8873476205
Correct output: -10.8388749243 | Program output: -46.8388749243
Correct output: 0.9299825981   | Program output: 73.9299825981 
Correct output: -26.7840412284 | Program output: -26.7840412284
Correct output: -102.1264221267 | Program output: -72.1264221267
Correct output: 40.8061668642  | Program output: 48.8061668642 
Correct output: -5.2544966331  | Program output: -11.2544966331
Correct output: 102.9855886244 | Program output: 59.9855886244 
Correct output: -118.0507723766 | Program output: -61.0507723766
Correct output: 55.9371769928  | Program output: 76.9371769928 
Correct output: 4.2657989984   | Program output: 29.2657989984 
Correct output: 96.7057987603  | Program output: 114.7057987603
Correct output: 122.162446611  | Program output: 107.162446611 
Correct output: 30.0102027945  | Program output: 1.0102027945  
Correct output: 104.5822387035 | Program output: 99.5822387035 
Correct output: -1.5538743366  | Program output: -48.5538743366
Correct output: 166.8070496115 | Program output: 93.8070496115 
Correct output: 58.6188945281  | Program output: 98.6188945281 
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction in1} {:instruction integer_max} {:instruction integer_dup_items} {:instruction integer_sub} {:instruction float_sub} {:instruction float_add} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_inc} {:instruction float_inc} {:instruction float_mod} {:instruction float_div} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_dup_items} {:instruction float_div} {:instruction float_inc} {:instruction float_yankdup} {:instruction integer_rot} {:instruction float_yankdup} {:instruction float_inc} {:instruction float_dup_items} {:instruction float_div} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_inc} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_div} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_sub} {:instruction float_yankdup} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_mult} {:instruction float_dup_items} {:instruction float_div} {:instruction float_inc} {:instruction float_dup_items} {:instruction float_dup_items} {:instruction float_mult} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_inc} {:instruction float_shove} {:instruction float_inc} {:instruction integer_mod} {:instruction float_inc} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_div} {:instruction integer_flush} {:instruction float_yankdup} {:instruction float_mult} {:instruction float_dup_items} {:instruction float_div} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_dup_items} {:instruction float_div} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_mult} {:instruction float_dup_items} {:instruction float_div} {:instruction float_inc} {:instruction float_yankdup} {:instruction print_float} {:instruction integer_add} {:instruction integer_yankdup} {:instruction integer_min})
Best program: (in1 integer_max integer_dup_items integer_sub float_sub float_add float_inc float_yankdup float_inc float_yankdup float_inc float_inc float_mod float_div float_inc float_yankdup float_dup_items float_div float_inc float_yankdup integer_rot float_yankdup float_inc float_dup_items float_div float_inc float_yankdup float_inc float_yankdup float_inc float_inc float_yankdup float_div float_inc float_yankdup float_inc float_yankdup float_sub float_yankdup float_inc float_yankdup float_mult float_dup_items float_div float_inc float_dup_items float_dup_items float_mult float_inc float_yankdup float_inc float_yankdup float_inc float_shove float_inc integer_mod float_inc float_inc float_yankdup float_div integer_flush float_yankdup float_mult float_dup_items float_div float_inc float_yankdup float_dup_items float_div float_inc float_yankdup float_mult float_dup_items float_div float_inc float_yankdup print_float integer_add integer_yankdup integer_min)
Errors: [34.0 13 79.0 13 91.0 12 49.0 2 67.0 3 98.0 2 26.0 2 50.0 2 36.0 2 73.0 2 0.0 0 30.0 2 8.0 1 6.0 2 43.0 3 57.0 2 21.0 2 25.0 2 18.0 3 15.0 2 29.0 2 5.0 3 47.0 2 73.0 3 40.0 1]
Total: 1103.0
Mean: 22.06
Genome size: 80
Size: 81
Percent parens: 0.012
--- Population Statistics ---
Average total errors in population: 2909.0786666000004
Median total errors in population: 1103.0
Error averages by case: (105.23954830000002 12.716 137.44019830000002 12.801 152.92622159999996 12.045 124.58002530000007 3.682 139.45335550000004 4.252 157.91190180000007 3.329 101.22743700000002 3.368 119.7206488 3.61 107.78766730000004 3.517 136.49536180000004 3.27 78.54777140000003 2.202 107.32335909999999 3.944 82.32261109999999 2.566 76.04486420000003 3.338 116.56225580000002 4.269 131.96356159999993 3.938 93.72019220000003 3.293 88.55864349999999 3.279 94.25956339999999 4.208 94.00980459999997 3.394 89.79374459999998 4.075 84.12620519999997 4.008 116.572679 3.4 146.72161650000007 4.31 109.98742870000001 2.968)
Error minima by case: (0.8351 7 2.602 1 0.9521 8 39.0 2 37.8517 2 0.4347 1 6.531 1 13.0862 2 1.9929 1 0.328 1 0.0 0 14.0 2 0.0 0 0.0 0 4.3977 2 41.0 2 5.0 1 0.132 1 1.8821 1 5.0 1 5.8601 1 0.0 0 2.2735 1 63.0 2 24.0 1)
Average genome size in population (length): 85.346
Average program size in population (points): 86.346
Average percent parens in population: 0.012
Minimum age in population: 79.40425812646448
Maximum age in population: 84.05375785580742
Average age in population: 81.90042648530542
Median age in population: 81.93787395512744
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 5
Genome diversity (% unique Plush genomes):	 0.903
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 5
Syntactic diversity (% unique Push programs):	 0.903
Total error diversity:				 0.097
Error (vector) diversity:			 0.107
Behavioral diversity:				 0.108
--- Run Statistics ---
Number of program evaluations used so far: 58000
Number of point (instruction) evaluations so far: 111552509
--- Timings ---
Current time: 1529615072214 milliseconds
Total Time:         217.1 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        76.9 seconds, 35.4%
Fitness Testing:    109.3 seconds, 50.4%
Report:              30.7 seconds, 14.2%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 57
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 58
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 58
;;******************************
;; -*- Number IO problem report - generation 58
Test total error for best: 59131.0
Test mean error for best: 29.56550
;;------------------------------
Outputs of best individual on training cases:
Correct output: 1.9526623133   | Program output: -32.0473376867
Correct output: -70.8009773522 | Program output: 8.1990226478  
Correct output: -13.7839009431 | Program output: 77.2160990569 
Correct output: 143.8727406396 | Program output: 94.8727406396 
Correct output: 136.4396027174 | Program output: 69.4396027174 
Correct output: 18.5044280613  | Program output: 116.5044280613
Correct output: 92.0568646792  | Program output: 66.0568646792 
Correct output: 71.8873476205  | Program output: 121.8873476205
Correct output: -10.8388749243 | Program output: -46.8388749243
Correct output: 0.9299825981   | Program output: 73.9299825981 
Correct output: -26.7840412284 | Program output: -26.7840412284
Correct output: -102.1264221267 | Program output: -72.1264221267
Correct output: 40.8061668642  | Program output: 48.8061668642 
Correct output: -5.2544966331  | Program output: -11.2544966331
Correct output: 102.9855886244 | Program output: 59.9855886244 
Correct output: -118.0507723766 | Program output: -61.0507723766
Correct output: 55.9371769928  | Program output: 76.9371769928 
Correct output: 4.2657989984   | Program output: 29.2657989984 
Correct output: 96.7057987603  | Program output: 114.7057987603
Correct output: 122.162446611  | Program output: 107.162446611 
Correct output: 30.0102027945  | Program output: 1.0102027945  
Correct output: 104.5822387035 | Program output: 99.5822387035 
Correct output: -1.5538743366  | Program output: -48.5538743366
Correct output: 166.8070496115 | Program output: 93.8070496115 
Correct output: 58.6188945281  | Program output: 98.6188945281 
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction in1} {:instruction integer_max} {:instruction integer_dup_items} {:instruction integer_sub} {:instruction float_sub} {:instruction float_yankdup} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_inc} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_div} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_dup_items} {:instruction float_div} {:instruction float_inc} {:instruction float_yankdup} {:instruction integer_rot} {:instruction float_yankdup} {:instruction float_inc} {:instruction float_dup_items} {:instruction float_dup_items} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_inc} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_yankdup} {:instruction float_inc} {:instruction integer_yank} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_mult} {:instruction float_dup_items} {:instruction float_div} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_frominteger} {:instruction float_add} {:instruction float_div} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_inc} {:instruction float_div} {:instruction float_inc} {:instruction float_add} {:instruction float_dup_items} {:instruction float_inc} {:instruction float_inc} {:instruction float_mult} {:instruction integer_max} {:instruction integer_dec} {:instruction float_inc} {:instruction float_inc} {:instruction float_swap} {:instruction float_inc} {:instruction float_yankdup} {:instruction print_float} {:instruction float_flush} {:instruction integer_stackdepth} {:instruction float_div} {:instruction float_inc} {:instruction integer_dup_items} {:instruction integer_sub} {:instruction integer_mod} {:instruction integer_div} {:instruction float_mult} {:instruction float_dup_items} {:instruction float_div} {:instruction float_cos} {:instruction float_dec} {:instruction integer_stackdepth} {:instruction integer_max} {:instruction integer_stackdepth} {:instruction integer_fromfloat} {:instruction float_dup_times} {:instruction integer_shove})
Best program: (in1 integer_max integer_dup_items integer_sub float_sub float_yankdup float_inc float_yankdup float_inc float_inc float_yankdup float_div float_inc float_yankdup float_dup_items float_div float_inc float_yankdup integer_rot float_yankdup float_inc float_dup_items float_dup_items float_inc float_yankdup float_inc float_yankdup float_inc float_inc float_yankdup float_inc float_yankdup float_inc float_yankdup float_yankdup float_inc integer_yank float_inc float_yankdup float_inc float_yankdup float_mult float_dup_items float_div float_inc float_yankdup float_frominteger float_add float_div float_inc float_yankdup float_inc float_div float_inc float_add float_dup_items float_inc float_inc float_mult integer_max integer_dec float_inc float_inc float_swap float_inc float_yankdup print_float float_flush integer_stackdepth float_div float_inc integer_dup_items integer_sub integer_mod integer_div float_mult float_dup_items float_div float_cos float_dec integer_stackdepth integer_max integer_stackdepth integer_fromfloat float_dup_times integer_shove)
Errors: [34.0 13 79.0 13 91.0 12 49.0 2 67.0 3 98.0 2 26.0 2 50.0 2 36.0 2 73.0 2 0.0 0 30.0 2 8.0 1 6.0 2 43.0 3 57.0 2 21.0 2 25.0 2 18.0 3 15.0 2 29.0 2 5.0 3 47.0 2 73.0 3 40.0 1]
Total: 1103.0
Mean: 22.06
Genome size: 86
Size: 87
Percent parens: 0.011
--- Population Statistics ---
Average total errors in population: 2809.0852016000003
Median total errors in population: 1103.0
Error averages by case: (99.51573100000005 12.64 131.9506976 12.73 148.79938110000003 12.025 121.66911860000009 3.777 136.26691819999996 4.366 152.9324239 3.391 97.93101259999997 3.456 116.17377760000001 3.679 102.22573720000005 3.619 132.4025826000001 3.33 73.5966138 2.284 104.22602740000005 3.986 77.85114910000001 2.69 70.72217470000001 3.432 113.19696409999996 4.352 128.42374779999994 3.981 90.37371089999999 3.371 84.5243918 3.362 91.1887351 4.308 91.04664779999996 3.481 84.1301008 4.126 81.19851670000001 4.117 110.86003870000002 3.496 143.81713000000008 4.383 106.64387250000004 3.036)
Error minima by case: (0.0473 7 7.8227 1 14.7847 8 40.0 1 58.0 2 0.0134 1 17.0 1 26.0 2 12.8363 1 1.07 1 0.0 0 6.0 2 1.0 1 0.0 0 34.0 2 33.0 2 2.0 1 0.4197 1 0.0 0 6.0 1 1.8879 1 0.0 0 2.5646 1 64.0 2 16.0 1)
Average genome size in population (length): 85.9
Average program size in population (points): 86.9
Average percent parens in population: 0.012
Minimum age in population: 80.67842159645716
Maximum age in population: 85.35723812203959
Average age in population: 83.3611928601571
Median age in population: 83.40681590034717
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 6
Genome diversity (% unique Plush genomes):	 0.896
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 6
Syntactic diversity (% unique Push programs):	 0.896
Total error diversity:				 0.104
Error (vector) diversity:			 0.112
Behavioral diversity:				 0.112
--- Run Statistics ---
Number of program evaluations used so far: 59000
Number of point (instruction) evaluations so far: 113700309
--- Timings ---
Current time: 1529615076126 milliseconds
Total Time:         220.9 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        78.3 seconds, 35.4%
Fitness Testing:    111.3 seconds, 50.4%
Report:              31.2 seconds, 14.1%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 58
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 59
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 59
;;******************************
;; -*- Number IO problem report - generation 59
Test total error for best: 59131.0
Test mean error for best: 29.56550
;;------------------------------
Outputs of best individual on training cases:
Correct output: 1.9526623133   | Program output: -32.0473376867
Correct output: -70.8009773522 | Program output: 8.1990226478  
Correct output: -13.7839009431 | Program output: 77.2160990569 
Correct output: 143.8727406396 | Program output: 94.8727406396 
Correct output: 136.4396027174 | Program output: 69.4396027174 
Correct output: 18.5044280613  | Program output: 116.5044280613
Correct output: 92.0568646792  | Program output: 66.0568646792 
Correct output: 71.8873476205  | Program output: 121.8873476205
Correct output: -10.8388749243 | Program output: -46.8388749243
Correct output: 0.9299825981   | Program output: 73.9299825981 
Correct output: -26.7840412284 | Program output: -26.7840412284
Correct output: -102.1264221267 | Program output: -72.1264221267
Correct output: 40.8061668642  | Program output: 48.8061668642 
Correct output: -5.2544966331  | Program output: -11.2544966331
Correct output: 102.9855886244 | Program output: 59.9855886244 
Correct output: -118.0507723766 | Program output: -61.0507723766
Correct output: 55.9371769928  | Program output: 76.9371769928 
Correct output: 4.2657989984   | Program output: 29.2657989984 
Correct output: 96.7057987603  | Program output: 114.7057987603
Correct output: 122.162446611  | Program output: 107.162446611 
Correct output: 30.0102027945  | Program output: 1.0102027945  
Correct output: 104.5822387035 | Program output: 99.5822387035 
Correct output: -1.5538743366  | Program output: -48.5538743366
Correct output: 166.8070496115 | Program output: 93.8070496115 
Correct output: 58.6188945281  | Program output: 98.6188945281 
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction in1} {:instruction integer_sub} {:instruction integer_dup_items} {:instruction integer_sub} {:instruction integer_div} {:instruction integer_div} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_inc} {:instruction float_inc} {:instruction float_rot} {:instruction float_inc} {:instruction float_inc} {:instruction integer_sub} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_inc} {:instruction float_dup_items} {:instruction float_swap} {:instruction float_inc} {:instruction tagged_512} {:instruction float_inc} {:instruction integer_dup} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_inc} {:instruction float_div} {:instruction float_inc} {:instruction integer_dup} {:instruction float_inc} {:instruction float_rot} {:instruction float_inc} {:instruction float_frominteger} {:instruction integer_mod} {:instruction integer_div} {:instruction float_mult} {:instruction float_dup_items} {:instruction float_div} {:instruction float_inc} {:instruction integer_pop} {:instruction float_inc} {:instruction integer_sub} {:instruction integer_stackdepth} {:instruction float_inc} {:instruction float_mult} {:instruction float_dup_items} {:instruction float_div} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_dup_items} {:instruction float_div} {:instruction float_inc} {:instruction float_mult} {:instruction integer_mod} {:instruction float_div} {:instruction float_inc} {:instruction float_inc} {:instruction float_yank} {:instruction float_inc} {:instruction float_yankdup} {:instruction print_float} {:instruction float_min} {:instruction integer_stackdepth} {:instruction tag_float_856} {:instruction float_add} {:instruction float_div} {:instruction float_inc} {:instruction float_swap} {:instruction float_inc} {:instruction float_yankdup} {:instruction print_float} {:instruction float_flush} {:instruction integer_stackdepth} {:instruction tag_float_856} {:instruction float_add} {:instruction integer_dup_times} {:instruction in2} {:instruction integer_yankdup} {:instruction float_tan} {:instruction float_cos} {:instruction float_stackdepth} {:instruction integer_stackdepth} {:instruction integer_dup} {:instruction float_mod} {:instruction integer_dup_times} {:instruction integer_add})
Best program: (in1 integer_sub integer_dup_items integer_sub integer_div integer_div float_inc float_yankdup float_inc float_yankdup float_inc float_inc float_rot float_inc float_inc integer_sub float_inc float_yankdup float_inc float_dup_items float_swap float_inc tagged_512 float_inc integer_dup float_inc float_yankdup float_inc float_yankdup float_inc float_div float_inc integer_dup float_inc float_rot float_inc float_frominteger integer_mod integer_div float_mult float_dup_items float_div float_inc integer_pop float_inc integer_sub integer_stackdepth float_inc float_mult float_dup_items float_div float_inc float_yankdup float_dup_items float_div float_inc float_mult integer_mod float_div float_inc float_inc float_yank float_inc float_yankdup print_float float_min integer_stackdepth tag_float_856 float_add float_div float_inc float_swap float_inc float_yankdup print_float float_flush integer_stackdepth tag_float_856 float_add integer_dup_times in2 integer_yankdup float_tan float_cos float_stackdepth integer_stackdepth integer_dup float_mod integer_dup_times integer_add)
Errors: [34.0 13 79.0 13 91.0 12 49.0 2 67.0 3 98.0 2 26.0 2 50.0 2 36.0 2 73.0 2 0.0 0 30.0 2 8.0 1 6.0 2 43.0 3 57.0 2 21.0 2 25.0 2 18.0 3 15.0 2 29.0 2 5.0 3 47.0 2 73.0 3 40.0 1]
Total: 1103.0
Mean: 22.06
Genome size: 90
Size: 91
Percent parens: 0.011
--- Population Statistics ---
Average total errors in population: 3176.3705485000005
Median total errors in population: 1103.0
Error averages by case: (116.17613340000007 12.691 146.33967960000007 12.78 164.4568300999999 12.08 134.17156440000005 3.751 149.65837100000007 4.326 169.3158767 3.412 112.02483499999997 3.426 131.02877740000002 3.666 118.62991050000005 3.532 148.17966910000004 3.31 89.20212009999999 2.217 118.10384509999997 3.969 93.16226250000003 2.612 85.79646899999999 3.376 127.18684860000005 4.313 142.07101269999995 3.971 105.16171089999997 3.347 99.59071269999994 3.329 104.93728100000001 4.264 104.35925579999999 3.467 99.56233409999997 4.272 94.76018960000003 4.103 127.50917669999998 3.427 156.46628080000005 4.351 121.54340170000005 2.984)
Error minima by case: (0.0198 7 55.0 1 13.8358 7 37.8727 1 5.5604 2 0.1316 1 17.0 1 26.0 2 10.8794 1 0.0558 1 0.0 0 6.0 2 0.0 0 0.0 0 8.9856 2 12.0508 2 2.0 1 0.7254 1 5.0 1 6.0 1 1.0102 1 0.0 0 1.6449 1 12.807 2 16.0 1)
Average genome size in population (length): 85.112
Average program size in population (points): 86.112
Average percent parens in population: 0.012
Minimum age in population: 81.86379083563459
Maximum age in population: 86.91196364094078
Average age in population: 84.7205024361237
Median age in population: 84.73185922616244
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 8
Genome diversity (% unique Plush genomes):	 0.897
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 8
Syntactic diversity (% unique Push programs):	 0.897
Total error diversity:				 0.086
Error (vector) diversity:			 0.097
Behavioral diversity:				 0.098
--- Run Statistics ---
Number of program evaluations used so far: 60000
Number of point (instruction) evaluations so far: 115828284
--- Timings ---
Current time: 1529615080019 milliseconds
Total Time:         224.8 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:        79.6 seconds, 35.4%
Fitness Testing:    113.3 seconds, 50.4%
Report:              31.8 seconds, 14.2%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 59
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 60
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 60
;;******************************
;; -*- Number IO problem report - generation 60
Test total error for best: 59131.0
Test mean error for best: 29.56550
;;------------------------------
Outputs of best individual on training cases:
Correct output: 1.9526623133   | Program output: -32.0473376867
Correct output: -70.8009773522 | Program output: 8.1990226478  
Correct output: -13.7839009431 | Program output: 77.2160990569 
Correct output: 143.8727406396 | Program output: 94.8727406396 
Correct output: 136.4396027174 | Program output: 69.4396027174 
Correct output: 18.5044280613  | Program output: 116.5044280613
Correct output: 92.0568646792  | Program output: 66.0568646792 
Correct output: 71.8873476205  | Program output: 121.8873476205
Correct output: -10.8388749243 | Program output: -46.8388749243
Correct output: 0.9299825981   | Program output: 73.9299825981 
Correct output: -26.7840412284 | Program output: -26.7840412284
Correct output: -102.1264221267 | Program output: -72.1264221267
Correct output: 40.8061668642  | Program output: 48.8061668642 
Correct output: -5.2544966331  | Program output: -11.2544966331
Correct output: 102.9855886244 | Program output: 59.9855886244 
Correct output: -118.0507723766 | Program output: -61.0507723766
Correct output: 55.9371769928  | Program output: 76.9371769928 
Correct output: 4.2657989984   | Program output: 29.2657989984 
Correct output: 96.7057987603  | Program output: 114.7057987603
Correct output: 122.162446611  | Program output: 107.162446611 
Correct output: 30.0102027945  | Program output: 1.0102027945  
Correct output: 104.5822387035 | Program output: 99.5822387035 
Correct output: -1.5538743366  | Program output: -48.5538743366
Correct output: 166.8070496115 | Program output: 93.8070496115 
Correct output: 58.6188945281  | Program output: 98.6188945281 
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction in1} {:instruction integer_max} {:instruction integer_dup_items} {:instruction integer_sub} {:instruction integer_mod} {:instruction integer_div} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_inc} {:instruction float_inc} {:instruction integer_mod} {:instruction float_inc} {:instruction float_div} {:instruction float_inc} {:instruction float_rot} {:instruction float_inc} {:instruction float_inc} {:instruction float_div} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_inc} {:instruction float_div} {:instruction float_inc} {:instruction float_div} {:instruction float_inc} {:instruction float_rot} {:instruction float_inc} {:instruction float_inc} {:instruction float_div} {:instruction float_inc} {:instruction float_yankdup} {:instruction integer_mod} {:instruction integer_div} {:instruction tagged_440} {:instruction integer_dec} {:instruction float_div} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_inc} {:instruction float_yankdup} {:instruction integer_stackdepth} {:instruction float_inc} {:instruction float_mult} {:instruction float_dup_items} {:instruction float_div} {:instruction float_yankdup} {:instruction integer_mod} {:instruction float_inc} {:instruction float_inc} {:instruction float_mult} {:instruction integer_max} {:instruction float_swap} {:instruction float_inc} {:instruction float_inc} {:instruction float_swap} {:instruction float_inc} {:instruction print_integer} {:instruction print_float} {:instruction float_mult} {:instruction float_swap} {:instruction float_inc} {:instruction float_dup_times} {:instruction in2} {:instruction print_float} {:instruction float_dup_items} {:instruction float_div} {:instruction float_inc} {:instruction integer_yankdup} {:instruction print_float} {:instruction float_max} {:instruction integer_stackdepth} {:instruction integer_min} {:instruction float_cos} {:instruction float_dec})
Best program: (in1 integer_max integer_dup_items integer_sub integer_mod integer_div float_inc float_yankdup float_inc float_inc integer_mod float_inc float_div float_inc float_rot float_inc float_inc float_div float_inc float_yankdup float_inc float_yankdup float_inc float_div float_inc float_div float_inc float_rot float_inc float_inc float_div float_inc float_yankdup integer_mod integer_div tagged_440 integer_dec float_div float_inc float_yankdup float_inc float_yankdup float_inc float_yankdup integer_stackdepth float_inc float_mult float_dup_items float_div float_yankdup integer_mod float_inc float_inc float_mult integer_max float_swap float_inc float_inc float_swap float_inc print_integer print_float float_mult float_swap float_inc float_dup_times in2 print_float float_dup_items float_div float_inc integer_yankdup print_float float_max integer_stackdepth integer_min float_cos float_dec)
Errors: [34.0 13 79.0 13 91.0 12 49.0 2 67.0 3 98.0 2 26.0 2 50.0 2 36.0 2 73.0 2 0.0 0 30.0 2 8.0 1 6.0 2 43.0 3 57.0 2 21.0 2 25.0 2 18.0 3 15.0 2 29.0 2 5.0 3 47.0 2 73.0 3 40.0 1]
Total: 1103.0
Mean: 22.06
Genome size: 78
Size: 79
Percent parens: 0.013
--- Population Statistics ---
Average total errors in population: 3325.7356788000006
Median total errors in population: 1104.0
Error averages by case: (120.93673050000002 12.772 154.0427366000001 12.758 171.5534322000001 12.097 139.60773460000001 3.868 153.974852 4.429 176.66603310000005 3.522 116.5276434 3.526 138.8745465 3.795 123.54246760000002 3.667 155.5030165 3.415 94.35776549999999 2.373 126.78225389999997 4.077 97.76989040000002 2.734 91.20808859999997 3.502 131.49631829999998 4.427 150.31641009999998 4.093 108.05370659999998 3.407 106.35548409999997 3.433 110.34228719999997 4.362 109.77915190000004 3.549 105.1615791 4.373 100.15571660000003 4.198 132.31822299999993 3.551 161.30780359999994 4.47 129.56780690000002 3.136)
Error minima by case: (0.0434 8 15.801 1 13.5393 8 35.4961 2 5.3645 2 0.1378 1 1.1069 1 12.0235 2 9.8792 1 0.5536 1 0.0 0 6.1605 2 0.0 0 0.0 0 12.7175 2 17.8602 2 1.0 1 0.3419 1 2.0 1 8.0 1 1.8777 1 0.0 0 1.4135 1 54.056 2 20.0 1)
Average genome size in population (length): 85.695
Average program size in population (points): 86.695
Average percent parens in population: 0.012
Minimum age in population: 82.86379083563459
Maximum age in population: 88.02026254043517
Average age in population: 86.07719702738855
Median age in population: 86.10414647104106
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 9
Genome diversity (% unique Plush genomes):	 0.9
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 9
Syntactic diversity (% unique Push programs):	 0.9
Total error diversity:				 0.098
Error (vector) diversity:			 0.109
Behavioral diversity:				 0.11
--- Run Statistics ---
Number of program evaluations used so far: 61000
Number of point (instruction) evaluations so far: 117970884
--- Timings ---
Current time: 1529615083861 milliseconds
Total Time:         228.7 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:        80.9 seconds, 35.4%
Fitness Testing:    115.2 seconds, 50.4%
Report:              32.4 seconds, 14.2%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 60
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 61
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 61
;;******************************
;; -*- Number IO problem report - generation 61
Test total error for best: 59131.0
Test mean error for best: 29.56550
;;------------------------------
Outputs of best individual on training cases:
Correct output: 1.9526623133   | Program output: -32.0473376867
Correct output: -70.8009773522 | Program output: 8.1990226478  
Correct output: -13.7839009431 | Program output: 77.2160990569 
Correct output: 143.8727406396 | Program output: 94.8727406396 
Correct output: 136.4396027174 | Program output: 69.4396027174 
Correct output: 18.5044280613  | Program output: 116.5044280613
Correct output: 92.0568646792  | Program output: 66.0568646792 
Correct output: 71.8873476205  | Program output: 121.8873476205
Correct output: -10.8388749243 | Program output: -46.8388749243
Correct output: 0.9299825981   | Program output: 73.9299825981 
Correct output: -26.7840412284 | Program output: -26.7840412284
Correct output: -102.1264221267 | Program output: -72.1264221267
Correct output: 40.8061668642  | Program output: 48.8061668642 
Correct output: -5.2544966331  | Program output: -11.2544966331
Correct output: 102.9855886244 | Program output: 59.9855886244 
Correct output: -118.0507723766 | Program output: -61.0507723766
Correct output: 55.9371769928  | Program output: 76.9371769928 
Correct output: 4.2657989984   | Program output: 29.2657989984 
Correct output: 96.7057987603  | Program output: 114.7057987603
Correct output: 122.162446611  | Program output: 107.162446611 
Correct output: 30.0102027945  | Program output: 1.0102027945  
Correct output: 104.5822387035 | Program output: 99.5822387035 
Correct output: -1.5538743366  | Program output: -48.5538743366
Correct output: 166.8070496115 | Program output: 93.8070496115 
Correct output: 58.6188945281  | Program output: 98.6188945281 
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction in1} {:instruction integer_dup_items} {:instruction integer_sub} {:instruction integer_mod} {:instruction print_integer} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_inc} {:instruction float_inc} {:instruction integer_mod} {:instruction float_inc} {:instruction float_div} {:instruction float_inc} {:instruction float_rot} {:instruction float_inc} {:instruction float_inc} {:instruction float_div} {:instruction float_inc} {:instruction float_add} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_inc} {:instruction float_div} {:instruction float_inc} {:instruction float_div} {:instruction float_inc} {:instruction float_rot} {:instruction float_inc} {:instruction float_inc} {:instruction float_div} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_mult} {:instruction integer_div} {:instruction float_mult} {:instruction float_dup_items} {:instruction float_div} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_mult} {:instruction float_dup_items} {:instruction float_div} {:instruction float_inc} {:instruction float_mult} {:instruction float_dup_items} {:instruction float_div} {:instruction integer_rot} {:instruction float_yankdup} {:instruction float_inc} {:instruction integer_mod} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_yank} {:instruction float_inc} {:instruction float_yankdup} {:instruction print_float} {:instruction float_flush} {:instruction float_dup_items} {:instruction float_div} {:instruction float_inc} {:instruction float_yankdup} {:instruction -45} {:instruction float_dup_times} {:instruction integer_shove} {:instruction print_float} {:instruction in1} {:instruction float_dec} {:instruction integer_min} {:instruction float_cos} {:instruction float_dec} {:instruction float_flush} {:instruction integer_max} {:instruction float_max} {:instruction integer_inc})
Best program: (in1 integer_dup_items integer_sub integer_mod print_integer float_inc float_yankdup float_inc float_inc integer_mod float_inc float_div float_inc float_rot float_inc float_inc float_div float_inc float_add float_inc float_yankdup float_inc float_div float_inc float_div float_inc float_rot float_inc float_inc float_div float_inc float_yankdup float_mult integer_div float_mult float_dup_items float_div float_inc float_yankdup float_inc float_yankdup float_inc float_yankdup float_mult float_dup_items float_div float_inc float_mult float_dup_items float_div integer_rot float_yankdup float_inc integer_mod float_inc float_inc float_inc float_yank float_inc float_yankdup print_float float_flush float_dup_items float_div float_inc float_yankdup -45 float_dup_times integer_shove print_float in1 float_dec integer_min float_cos float_dec float_flush integer_max float_max integer_inc)
Errors: [34.0 13 79.0 13 91.0 12 49.0 2 67.0 3 98.0 2 26.0 2 50.0 2 36.0 2 73.0 2 0.0 0 30.0 2 8.0 1 6.0 2 43.0 3 57.0 2 21.0 2 25.0 2 18.0 3 15.0 2 29.0 2 5.0 3 47.0 2 73.0 3 40.0 1]
Total: 1103.0
Mean: 22.06
Genome size: 79
Size: 80
Percent parens: 0.013
--- Population Statistics ---
Average total errors in population: 2685.7713462999995
Median total errors in population: 1103.0
Error averages by case: (95.80102680000002 12.711 128.61189640000006 12.708 144.99723590000002 12.04 115.51257890000008 3.577 130.65676530000002 4.174 149.742337 3.225 92.17777219999998 3.251 111.22918100000004 3.529 98.78132510000002 3.39 128.38631560000005 3.175 68.51321510000004 2.067 98.91285359999993 3.781 72.04512560000003 2.464 67.08139670000003 3.244 107.77950980000003 4.152 123.31878729999995 3.798 84.98705170000004 3.171 80.35703549999998 3.199 85.08929799999999 4.115 84.62876249999998 3.307 81.88306480000004 4.117 74.86911940000005 3.963 107.3716257 3.305 137.8125235 4.196 101.71254290000005 2.854)
Error minima by case: (0.9527 8 56.0 1 14.7535 9 37.0 1 28.9881 2 0.1954 1 14.0 1 27.0 2 10.5577 1 0.07 1 0.0 0 7.0 2 0.0 0 0.0 0 31.0 2 34.0 2 2.0 1 0.0282 1 1.0 1 3.0 1 2.9149 1 0.0 0 2.544 1 22.9881 2 17.0 1)
Average genome size in population (length): 84.43
Average program size in population (points): 85.43
Average percent parens in population: 0.012
Minimum age in population: 83.86379083563459
Maximum age in population: 89.49406373967123
Average age in population: 87.47840200351592
Median age in population: 87.51972785730422
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 12
Genome diversity (% unique Plush genomes):	 0.901
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 12
Syntactic diversity (% unique Push programs):	 0.901
Total error diversity:				 0.105
Error (vector) diversity:			 0.114
Behavioral diversity:				 0.115
--- Run Statistics ---
Number of program evaluations used so far: 62000
Number of point (instruction) evaluations so far: 120081784
--- Timings ---
Current time: 1529615087740 milliseconds
Total Time:         232.6 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:        82.2 seconds, 35.4%
Fitness Testing:    117.3 seconds, 50.4%
Report:              32.9 seconds, 14.2%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 61
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 62
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 62
;;******************************
;; -*- Number IO problem report - generation 62
Test total error for best: 59131.0
Test mean error for best: 29.56550
;;------------------------------
Outputs of best individual on training cases:
Correct output: 1.9526623133   | Program output: -32.0473376867
Correct output: -70.8009773522 | Program output: 8.1990226478  
Correct output: -13.7839009431 | Program output: 77.2160990569 
Correct output: 143.8727406396 | Program output: 94.8727406396 
Correct output: 136.4396027174 | Program output: 69.4396027174 
Correct output: 18.5044280613  | Program output: 116.5044280613
Correct output: 92.0568646792  | Program output: 66.0568646792 
Correct output: 71.8873476205  | Program output: 121.8873476205
Correct output: -10.8388749243 | Program output: -46.8388749243
Correct output: 0.9299825981   | Program output: 73.9299825981 
Correct output: -26.7840412284 | Program output: -26.7840412284
Correct output: -102.1264221267 | Program output: -72.1264221267
Correct output: 40.8061668642  | Program output: 48.8061668642 
Correct output: -5.2544966331  | Program output: -11.2544966331
Correct output: 102.9855886244 | Program output: 59.9855886244 
Correct output: -118.0507723766 | Program output: -61.0507723766
Correct output: 55.9371769928  | Program output: 76.9371769928 
Correct output: 4.2657989984   | Program output: 29.2657989984 
Correct output: 96.7057987603  | Program output: 114.7057987603
Correct output: 122.162446611  | Program output: 107.162446611 
Correct output: 30.0102027945  | Program output: 1.0102027945  
Correct output: 104.5822387035 | Program output: 99.5822387035 
Correct output: -1.5538743366  | Program output: -48.5538743366
Correct output: 166.8070496115 | Program output: 93.8070496115 
Correct output: 58.6188945281  | Program output: 98.6188945281 
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction in1} {:instruction integer_max} {:instruction integer_dup_items} {:instruction float_frominteger} {:instruction integer_max} {:instruction float_shove} {:instruction integer_sub} {:instruction integer_mod} {:instruction float_inc} {:instruction float_div} {:instruction float_inc} {:instruction float_rot} {:instruction float_inc} {:instruction float_inc} {:instruction float_div} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_inc} {:instruction float_shove} {:instruction float_inc} {:instruction float_div} {:instruction float_inc} {:instruction float_rot} {:instruction float_inc} {:instruction float_inc} {:instruction float_div} {:instruction float_inc} {:instruction float_yankdup} {:instruction integer_mod} {:instruction integer_div} {:instruction float_mult} {:instruction integer_inc} {:instruction float_div} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_inc} {:instruction tagged_319} {:instruction float_inc} {:instruction float_yankdup} {:instruction integer_stackdepth} {:instruction float_inc} {:instruction float_mult} {:instruction float_dup_items} {:instruction float_div} {:instruction float_yankdup} {:instruction integer_mod} {:instruction float_inc} {:instruction float_inc} {:instruction float_mult} {:instruction integer_max} {:instruction float_div} {:instruction float_inc} {:instruction float_inc} {:instruction float_swap} {:instruction float_inc} {:instruction float_div} {:instruction float_inc} {:instruction float_inc} {:instruction float_swap} {:instruction float_inc} {:instruction print_float} {:instruction print_float} {:instruction float_mult} {:instruction float_dup_items} {:instruction float_div} {:instruction float_inc} {:instruction float_yankdup} {:instruction print_float} {:instruction integer_max} {:instruction float_yankdup} {:instruction integer_fromfloat} {:instruction print_float} {:instruction float_div} {:instruction -45} {:instruction float_pop} {:instruction integer_shove} {:instruction float_swap} {:instruction float_mod} {:instruction 52} {:instruction float_shove} {:instruction float_stackdepth} {:instruction float_mult} {:instruction float_inc} {:instruction float_inc} {:instruction float_sub} {:instruction print_float} {:instruction float_max} {:instruction integer_shove} {:instruction integer_min} {:instruction float_cos} {:instruction float_dec} {:instruction integer_stackdepth} {:instruction integer_max})
Best program: (in1 integer_max integer_dup_items float_frominteger integer_max float_shove integer_sub integer_mod float_inc float_div float_inc float_rot float_inc float_inc float_div float_inc float_yankdup float_inc float_yankdup float_inc float_shove float_inc float_div float_inc float_rot float_inc float_inc float_div float_inc float_yankdup integer_mod integer_div float_mult integer_inc float_div float_inc float_yankdup float_inc tagged_319 float_inc float_yankdup integer_stackdepth float_inc float_mult float_dup_items float_div float_yankdup integer_mod float_inc float_inc float_mult integer_max float_div float_inc float_inc float_swap float_inc float_div float_inc float_inc float_swap float_inc print_float print_float float_mult float_dup_items float_div float_inc float_yankdup print_float integer_max float_yankdup integer_fromfloat print_float float_div -45 float_pop integer_shove float_swap float_mod 52 float_shove float_stackdepth float_mult float_inc float_inc float_sub print_float float_max integer_shove integer_min float_cos float_dec integer_stackdepth integer_max)
Errors: [34.0 13 79.0 13 91.0 12 49.0 2 67.0 3 98.0 2 26.0 2 50.0 2 36.0 2 73.0 2 0.0 0 30.0 2 8.0 1 6.0 2 43.0 3 57.0 2 21.0 2 25.0 2 18.0 3 15.0 2 29.0 2 5.0 3 47.0 2 73.0 3 40.0 1]
Total: 1103.0
Mean: 22.06
Genome size: 95
Size: 96
Percent parens: 0.010
--- Population Statistics ---
Average total errors in population: 2655.955525
Median total errors in population: 1103.0
Error averages by case: (95.00367460000004 12.722 127.3077634000001 12.648 143.1789037 12.022 115.22404390000008 3.568 130.4725723 4.169 148.03835719999995 3.177 91.88573610000002 3.257 108.9729658 3.505 97.58811930000002 3.391 126.53411450000009 3.142 67.40191080000001 2.052 95.34824539999997 3.763 72.06953680000001 2.453 64.82913080000002 3.206 107.39442969999999 4.187 119.87262529999992 3.784 84.5413015 3.182 79.36823059999998 3.129 84.60736239999999 4.098 84.26692850000005 3.285 80.8683967 4.145 74.47459879999995 3.962 106.5577318 3.296 137.57014370000005 4.212 99.38070140000004 2.843)
Error minima by case: (0.0473 8 55.0 1 5.5966 9 20.8727 2 22.5604 2 0.4024 1 14.0 1 18.6453 2 10.557 1 0.0376 1 0.0 0 6.0 2 0.0 0 0.0 0 8.0144 2 29.0508 2 0.0 0 0.6011 1 1.0 1 3.0 1 3.0102 1 0.0 0 0.6449 1 4.193 2 14.3499 1)
Average genome size in population (length): 84.638
Average program size in population (points): 85.638
Average percent parens in population: 0.012
Minimum age in population: 84.86379083563459
Maximum age in population: 90.97269384521124
Average age in population: 88.92438993423833
Median age in population: 88.97153672078767
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 8
Genome diversity (% unique Plush genomes):	 0.914
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 8
Syntactic diversity (% unique Push programs):	 0.914
Total error diversity:				 0.099
Error (vector) diversity:			 0.111
Behavioral diversity:				 0.112
--- Run Statistics ---
Number of program evaluations used so far: 63000
Number of point (instruction) evaluations so far: 122197784
--- Timings ---
Current time: 1529615091637 milliseconds
Total Time:         236.4 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:        83.6 seconds, 35.4%
Fitness Testing:    119.2 seconds, 50.4%
Report:              33.5 seconds, 14.2%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 62
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 63
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 63
;;******************************
;; -*- Number IO problem report - generation 63
Test total error for best: 59131.0
Test mean error for best: 29.56550
;;------------------------------
Outputs of best individual on training cases:
Correct output: 1.9526623133   | Program output: -32.0473376867
Correct output: -70.8009773522 | Program output: 8.1990226478  
Correct output: -13.7839009431 | Program output: 77.2160990569 
Correct output: 143.8727406396 | Program output: 94.8727406396 
Correct output: 136.4396027174 | Program output: 69.4396027174 
Correct output: 18.5044280613  | Program output: 116.5044280613
Correct output: 92.0568646792  | Program output: 66.0568646792 
Correct output: 71.8873476205  | Program output: 121.8873476205
Correct output: -10.8388749243 | Program output: -46.8388749243
Correct output: 0.9299825981   | Program output: 73.9299825981 
Correct output: -26.7840412284 | Program output: -26.7840412284
Correct output: -102.1264221267 | Program output: -72.1264221267
Correct output: 40.8061668642  | Program output: 48.8061668642 
Correct output: -5.2544966331  | Program output: -11.2544966331
Correct output: 102.9855886244 | Program output: 59.9855886244 
Correct output: -118.0507723766 | Program output: -61.0507723766
Correct output: 55.9371769928  | Program output: 76.9371769928 
Correct output: 4.2657989984   | Program output: 29.2657989984 
Correct output: 96.7057987603  | Program output: 114.7057987603
Correct output: 122.162446611  | Program output: 107.162446611 
Correct output: 30.0102027945  | Program output: 1.0102027945  
Correct output: 104.5822387035 | Program output: 99.5822387035 
Correct output: -1.5538743366  | Program output: -48.5538743366
Correct output: 166.8070496115 | Program output: 93.8070496115 
Correct output: 58.6188945281  | Program output: 98.6188945281 
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction in1} {:instruction integer_max} {:instruction integer_dup_items} {:instruction integer_sub} {:instruction integer_mod} {:instruction float_frominteger} {:instruction float_sub} {:instruction float_yankdup} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_inc} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_div} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_dup_items} {:instruction integer_div} {:instruction float_inc} {:instruction float_div} {:instruction float_inc} {:instruction integer_mod} {:instruction float_div} {:instruction float_inc} {:instruction integer_yank} {:instruction float_dup_items} {:instruction float_div} {:instruction float_inc} {:instruction float_yankdup} {:instruction integer_rot} {:instruction float_yankdup} {:instruction float_inc} {:instruction float_dup_items} {:instruction float_dup_items} {:instruction float_dup_items} {:instruction integer_rot} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_inc} {:instruction integer_dup} {:instruction float_inc} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_div} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_inc} {:instruction float_mult} {:instruction float_dup_items} {:instruction integer_sub} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_inc} {:instruction integer_mod} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_yank} {:instruction float_inc} {:instruction float_yankdup} {:instruction print_float} {:instruction float_flush} {:instruction integer_stackdepth} {:instruction tag_float_856} {:instruction float_add} {:instruction integer_dup_times} {:instruction in2} {:instruction float_min} {:instruction integer_yankdup} {:instruction float_pop} {:instruction float_dup_times} {:instruction print_float} {:instruction tagged_602} {:instruction integer_fromfloat} {:instruction print_float} {:instruction integer_min} {:instruction float_cos} {:instruction float_dec} {:instruction float_shove} {:instruction integer_max} {:instruction float_max} {:instruction integer_fromfloat} {:instruction float_yank} {:instruction integer_stackdepth})
Best program: (in1 integer_max integer_dup_items integer_sub integer_mod float_frominteger float_sub float_yankdup float_inc float_yankdup float_inc float_inc float_yankdup float_div float_inc float_yankdup float_dup_items integer_div float_inc float_div float_inc integer_mod float_div float_inc integer_yank float_dup_items float_div float_inc float_yankdup integer_rot float_yankdup float_inc float_dup_items float_dup_items float_dup_items integer_rot float_inc float_yankdup float_inc integer_dup float_inc float_inc float_yankdup float_div float_inc float_yankdup float_inc float_yankdup float_inc float_mult float_dup_items integer_sub float_inc float_yankdup float_inc float_yankdup float_inc float_yankdup float_inc integer_mod float_inc float_inc float_inc float_yank float_inc float_yankdup print_float float_flush integer_stackdepth tag_float_856 float_add integer_dup_times in2 float_min integer_yankdup float_pop float_dup_times print_float tagged_602 integer_fromfloat print_float integer_min float_cos float_dec float_shove integer_max float_max integer_fromfloat float_yank integer_stackdepth)
Errors: [34.0 13 79.0 13 91.0 12 49.0 2 67.0 3 98.0 2 26.0 2 50.0 2 36.0 2 73.0 2 0.0 0 30.0 2 8.0 1 6.0 2 43.0 3 57.0 2 21.0 2 25.0 2 18.0 3 15.0 2 29.0 2 5.0 3 47.0 2 73.0 3 40.0 1]
Total: 1103.0
Mean: 22.06
Genome size: 90
Size: 91
Percent parens: 0.011
--- Population Statistics ---
Average total errors in population: 2874.5596427000005
Median total errors in population: 1103.0
Error averages by case: (102.71153910000002 12.763 136.7331363000001 12.791 153.90336279999997 12.018 122.56014880000006 3.552 137.63335139999998 4.153 159.18667019999995 3.165 99.47069759999995 3.227 119.59429080000004 3.435 105.52641270000002 3.357 137.3234034000001 3.105 75.0153517 2.004 105.14103029999995 3.726 80.5171071 2.426 73.97726610000001 3.2 114.80806130000003 4.134 129.39770129999997 3.726 93.1558307 3.139 89.49154400000002 3.122 92.86679049999996 4.114 91.7682762 3.264 89.67489540000001 3.878 82.13122080000001 3.91 114.65584679999995 3.294 144.6988556 4.187 110.1778518 2.749)
Error minima by case: (0.1649 7 44.6513 1 14.5997 8 40.0 1 58.0 2 0.1378 1 17.0 1 26.0 2 11.6908 1 0.0241 1 0.0 0 6.0 2 0.0 0 0.0 0 34.0 2 33.0 2 3.0 1 0.3392 1 6.0 1 6.0 1 0.0102 1 0.0 0 2.2572 1 64.0 2 16.0 1)
Average genome size in population (length): 83.888
Average program size in population (points): 84.888
Average percent parens in population: 0.012
Minimum age in population: 85.86379083563459
Maximum age in population: 92.30578382648697
Average age in population: 90.26149970099966
Median age in population: 90.28695122803045
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 6
Genome diversity (% unique Plush genomes):	 0.882
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 6
Syntactic diversity (% unique Push programs):	 0.882
Total error diversity:				 0.082
Error (vector) diversity:			 0.093
Behavioral diversity:				 0.093
--- Run Statistics ---
Number of program evaluations used so far: 64000
Number of point (instruction) evaluations so far: 124294984
--- Timings ---
Current time: 1529615095549 milliseconds
Total Time:         240.3 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:        84.9 seconds, 35.3%
Fitness Testing:    121.2 seconds, 50.4%
Report:              34.0 seconds, 14.2%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 63
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 64
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 64
;;******************************
;; -*- Number IO problem report - generation 64
Test total error for best: 59131.0
Test mean error for best: 29.56550
;;------------------------------
Outputs of best individual on training cases:
Correct output: 1.9526623133   | Program output: -32.0473376867
Correct output: -70.8009773522 | Program output: 8.1990226478  
Correct output: -13.7839009431 | Program output: 77.2160990569 
Correct output: 143.8727406396 | Program output: 94.8727406396 
Correct output: 136.4396027174 | Program output: 69.4396027174 
Correct output: 18.5044280613  | Program output: 116.5044280613
Correct output: 92.0568646792  | Program output: 66.0568646792 
Correct output: 71.8873476205  | Program output: 121.8873476205
Correct output: -10.8388749243 | Program output: -46.8388749243
Correct output: 0.9299825981   | Program output: 73.9299825981 
Correct output: -26.7840412284 | Program output: -26.7840412284
Correct output: -102.1264221267 | Program output: -72.1264221267
Correct output: 40.8061668642  | Program output: 48.8061668642 
Correct output: -5.2544966331  | Program output: -11.2544966331
Correct output: 102.9855886244 | Program output: 59.9855886244 
Correct output: -118.0507723766 | Program output: -61.0507723766
Correct output: 55.9371769928  | Program output: 76.9371769928 
Correct output: 4.2657989984   | Program output: 29.2657989984 
Correct output: 96.7057987603  | Program output: 114.7057987603
Correct output: 122.162446611  | Program output: 107.162446611 
Correct output: 30.0102027945  | Program output: 1.0102027945  
Correct output: 104.5822387035 | Program output: 99.5822387035 
Correct output: -1.5538743366  | Program output: -48.5538743366
Correct output: 166.8070496115 | Program output: 93.8070496115 
Correct output: 58.6188945281  | Program output: 98.6188945281 
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction in1} {:instruction float_inc} {:instruction integer_max} {:instruction integer_dup_items} {:instruction float_yankdup} {:instruction float_inc} {:instruction integer_swap} {:instruction float_inc} {:instruction float_div} {:instruction float_inc} {:instruction integer_swap} {:instruction float_swap} {:instruction float_inc} {:instruction float_div} {:instruction float_div} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_div} {:instruction float_inc} {:instruction float_yankdup} {:instruction integer_rot} {:instruction integer_yank} {:instruction float_inc} {:instruction float_dup_items} {:instruction float_div} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_inc} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_div} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_inc} {:instruction float_mult} {:instruction float_dup_items} {:instruction float_div} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_inc} {:instruction float_max} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_inc} {:instruction integer_add} {:instruction float_inc} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_div} {:instruction integer_flush} {:instruction float_yankdup} {:instruction integer_rot} {:instruction float_dup_items} {:instruction print_integer} {:instruction float_inc} {:instruction integer_dup_items} {:instruction integer_sub} {:instruction integer_mod} {:instruction integer_div} {:instruction float_yank} {:instruction float_inc} {:instruction float_yankdup} {:instruction print_float} {:instruction float_flush} {:instruction integer_stackdepth} {:instruction in2} {:instruction float_inc} {:instruction float_cos})
Best program: (in1 float_inc integer_max integer_dup_items float_yankdup float_inc integer_swap float_inc float_div float_inc integer_swap float_swap float_inc float_div float_div float_inc float_yankdup float_div float_inc float_yankdup integer_rot integer_yank float_inc float_dup_items float_div float_inc float_yankdup float_inc float_yankdup float_inc float_inc float_yankdup float_div float_inc float_yankdup float_inc float_yankdup float_inc float_yankdup float_inc float_mult float_dup_items float_div float_inc float_yankdup float_inc float_max float_inc float_yankdup float_inc integer_add float_inc float_inc float_yankdup float_div integer_flush float_yankdup integer_rot float_dup_items print_integer float_inc integer_dup_items integer_sub integer_mod integer_div float_yank float_inc float_yankdup print_float float_flush integer_stackdepth in2 float_inc float_cos)
Errors: [34.0 13 79.0 13 91.0 12 49.0 2 67.0 3 98.0 2 26.0 2 50.0 2 36.0 2 73.0 2 0.0 0 30.0 2 8.0 1 6.0 2 43.0 3 57.0 2 21.0 2 25.0 2 18.0 3 15.0 2 29.0 2 5.0 3 47.0 2 73.0 3 40.0 1]
Total: 1103.0
Mean: 22.06
Genome size: 74
Size: 75
Percent parens: 0.013
--- Population Statistics ---
Average total errors in population: 2658.3728857
Median total errors in population: 1103.0
Error averages by case: (94.49685880000003 12.729 130.82190250000005 12.758 145.43533250000002 12.023 113.33631970000002 3.5 128.7743861 4.071 150.62372929999998 3.153 90.50553859999995 3.177 110.50070439999999 3.43 96.92306570000004 3.261 128.77090590000006 3.07 66.4330537 1.932 95.86303950000001 3.677 71.4603142 2.374 66.12633509999999 3.108 105.95697800000002 4.105 120.45299370000001 3.689 84.05496529999999 3.087 81.96547290000001 3.09 83.51849850000002 4.036 82.42249039999999 3.207 82.986202 4.035 72.81586810000002 3.864 106.12677299999997 3.18 135.5686912 4.128 100.9864666 2.762)
Error minima by case: (0.1553 7 7.4523 1 14.4677 9 2.1377 1 9.5604 2 0.5252 1 14.0569 1 27.0 2 5.8389 1 1.012 1 0.0 0 7.0 2 0.0 0 0.0 0 4.9856 2 16.0508 2 2.0 1 0.0282 1 2.0 1 6.0 1 4.0089 1 0.0 0 2.3112 1 5.193 2 17.0 1)
Average genome size in population (length): 82.867
Average program size in population (points): 83.867
Average percent parens in population: 0.012
Minimum age in population: 86.86379083563459
Maximum age in population: 93.82489726196587
Average age in population: 91.59223397318948
Median age in population: 91.64405584242012
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 9
Genome diversity (% unique Plush genomes):	 0.897
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 9
Syntactic diversity (% unique Push programs):	 0.897
Total error diversity:				 0.082
Error (vector) diversity:			 0.093
Behavioral diversity:				 0.094
--- Run Statistics ---
Number of program evaluations used so far: 65000
Number of point (instruction) evaluations so far: 126366709
--- Timings ---
Current time: 1529615099321 milliseconds
Total Time:         244.2 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:        86.3 seconds, 35.3%
Fitness Testing:    123.2 seconds, 50.5%
Report:              34.6 seconds, 14.2%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 64
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 65
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 65
;;******************************
;; -*- Number IO problem report - generation 65
Test total error for best: 59131.0
Test mean error for best: 29.56550
;;------------------------------
Outputs of best individual on training cases:
Correct output: 1.9526623133   | Program output: -32.0473376867
Correct output: -70.8009773522 | Program output: 8.1990226478  
Correct output: -13.7839009431 | Program output: 77.2160990569 
Correct output: 143.8727406396 | Program output: 94.8727406396 
Correct output: 136.4396027174 | Program output: 69.4396027174 
Correct output: 18.5044280613  | Program output: 116.5044280613
Correct output: 92.0568646792  | Program output: 66.0568646792 
Correct output: 71.8873476205  | Program output: 121.8873476205
Correct output: -10.8388749243 | Program output: -46.8388749243
Correct output: 0.9299825981   | Program output: 73.9299825981 
Correct output: -26.7840412284 | Program output: -26.7840412284
Correct output: -102.1264221267 | Program output: -72.1264221267
Correct output: 40.8061668642  | Program output: 48.8061668642 
Correct output: -5.2544966331  | Program output: -11.2544966331
Correct output: 102.9855886244 | Program output: 59.9855886244 
Correct output: -118.0507723766 | Program output: -61.0507723766
Correct output: 55.9371769928  | Program output: 76.9371769928 
Correct output: 4.2657989984   | Program output: 29.2657989984 
Correct output: 96.7057987603  | Program output: 114.7057987603
Correct output: 122.162446611  | Program output: 107.162446611 
Correct output: 30.0102027945  | Program output: 1.0102027945  
Correct output: 104.5822387035 | Program output: 99.5822387035 
Correct output: -1.5538743366  | Program output: -48.5538743366
Correct output: 166.8070496115 | Program output: 93.8070496115 
Correct output: 58.6188945281  | Program output: 98.6188945281 
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction in1} {:instruction integer_max} {:instruction integer_dup_items} {:instruction integer_sub} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_inc} {:instruction float_rot} {:instruction float_inc} {:instruction float_inc} {:instruction float_div} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_inc} {:instruction integer_inc} {:instruction float_inc} {:instruction float_div} {:instruction float_inc} {:instruction float_div} {:instruction float_inc} {:instruction float_rot} {:instruction float_mod} {:instruction float_inc} {:instruction float_div} {:instruction float_inc} {:instruction float_yankdup} {:instruction integer_mod} {:instruction integer_div} {:instruction float_mult} {:instruction float_dup_items} {:instruction float_add} {:instruction float_inc} {:instruction integer_yankdup} {:instruction float_div} {:instruction float_inc} {:instruction float_mult} {:instruction float_dup_items} {:instruction float_div} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_inc} {:instruction float_mult} {:instruction float_dup_items} {:instruction integer_dup_items} {:instruction float_inc} {:instruction integer_mod} {:instruction float_yankdup} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_inc} {:instruction integer_mod} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_yank} {:instruction float_inc} {:instruction float_yankdup} {:instruction print_float} {:instruction integer_yank} {:instruction float_dup_items} {:instruction float_div} {:instruction float_inc} {:instruction float_yankdup} {:instruction -44} {:instruction float_dup_times} {:instruction integer_shove} {:instruction float_swap} {:instruction float_div} {:instruction print_float} {:instruction integer_stackdepth} {:instruction -46} {:instruction float_pop} {:instruction integer_shove} {:instruction float_swap} {:instruction in2} {:instruction float_mod} {:instruction 52} {:instruction integer_fromfloat} {:instruction integer_min} {:instruction integer_shove})
Best program: (in1 integer_max integer_dup_items integer_sub float_inc float_yankdup float_inc float_yankdup float_inc float_rot float_inc float_inc float_div float_inc float_yankdup float_inc integer_inc float_inc float_div float_inc float_div float_inc float_rot float_mod float_inc float_div float_inc float_yankdup integer_mod integer_div float_mult float_dup_items float_add float_inc integer_yankdup float_div float_inc float_mult float_dup_items float_div float_inc float_yankdup float_inc float_yankdup float_inc float_mult float_dup_items integer_dup_items float_inc integer_mod float_yankdup float_inc float_yankdup float_inc integer_mod float_inc float_inc float_inc float_yank float_inc float_yankdup print_float integer_yank float_dup_items float_div float_inc float_yankdup -44 float_dup_times integer_shove float_swap float_div print_float integer_stackdepth -46 float_pop integer_shove float_swap in2 float_mod 52 integer_fromfloat integer_min integer_shove)
Errors: [34.0 13 79.0 13 91.0 12 49.0 2 67.0 3 98.0 2 26.0 2 50.0 2 36.0 2 73.0 2 0.0 0 30.0 2 8.0 1 6.0 2 43.0 3 57.0 2 21.0 2 25.0 2 18.0 3 15.0 2 29.0 2 5.0 3 47.0 2 73.0 3 40.0 1]
Total: 1103.0
Mean: 22.06
Genome size: 84
Size: 85
Percent parens: 0.012
--- Population Statistics ---
Average total errors in population: 2816.2122174000006
Median total errors in population: 1103.0
Error averages by case: (100.70921110000005 12.71 137.04659700000002 12.774 152.192718 12.04 118.93558670000007 3.55 134.36541659999997 4.141 157.3010579 3.191 96.10743949999998 3.227 117.78830459999999 3.471 103.15136150000002 3.362 135.66927670000004 3.136 72.84891170000003 1.997 104.60645069999997 3.751 76.88325049999999 2.426 72.08485780000001 3.191 111.58107660000006 4.12 129.03754149999992 3.76 89.65396349999996 3.15 88.22116199999998 3.139 89.06872409999998 4.072 87.98043230000003 3.224 88.28117639999998 3.944 78.36229819999996 3.883 112.36812479999995 3.226 141.1422864 4.167 108.36799130000001 2.805)
Error minima by case: (0.0842 7 46.2533 1 3.4679 9 26.1271 1 33.0762 2 0.1378 1 13.0 1 4.5791 2 10.9743 1 0.1755 1 0.0 0 8.0 2 0.0 0 0.0 0 27.1998 2 35.0 2 0.0 0 0.7342 1 0.0 0 2.0 1 5.9647 1 0.0 0 1.1075 1 3.1789 1 17.7159 1)
Average genome size in population (length): 83.353
Average program size in population (points): 84.353
Average percent parens in population: 0.012
Minimum age in population: 87.86379083563459
Maximum age in population: 95.01643370521592
Average age in population: 93.05704993512909
Median age in population: 93.10000131825268
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 4
Genome diversity (% unique Plush genomes):	 0.895
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 4
Syntactic diversity (% unique Push programs):	 0.895
Total error diversity:				 0.091
Error (vector) diversity:			 0.1
Behavioral diversity:				 0.101
--- Run Statistics ---
Number of program evaluations used so far: 66000
Number of point (instruction) evaluations so far: 128450584
--- Timings ---
Current time: 1529615103127 milliseconds
Total Time:         247.9 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:        87.6 seconds, 35.3%
Fitness Testing:    125.1 seconds, 50.5%
Report:              35.1 seconds, 14.2%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 65
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 66
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 66
;;******************************
;; -*- Number IO problem report - generation 66
Test total error for best: 59131.0
Test mean error for best: 29.56550
;;------------------------------
Outputs of best individual on training cases:
Correct output: 1.9526623133   | Program output: -32.0473376867
Correct output: -70.8009773522 | Program output: 8.1990226478  
Correct output: -13.7839009431 | Program output: 77.2160990569 
Correct output: 143.8727406396 | Program output: 94.8727406396 
Correct output: 136.4396027174 | Program output: 69.4396027174 
Correct output: 18.5044280613  | Program output: 116.5044280613
Correct output: 92.0568646792  | Program output: 66.0568646792 
Correct output: 71.8873476205  | Program output: 121.8873476205
Correct output: -10.8388749243 | Program output: -46.8388749243
Correct output: 0.9299825981   | Program output: 73.9299825981 
Correct output: -26.7840412284 | Program output: -26.7840412284
Correct output: -102.1264221267 | Program output: -72.1264221267
Correct output: 40.8061668642  | Program output: 48.8061668642 
Correct output: -5.2544966331  | Program output: -11.2544966331
Correct output: 102.9855886244 | Program output: 59.9855886244 
Correct output: -118.0507723766 | Program output: -61.0507723766
Correct output: 55.9371769928  | Program output: 76.9371769928 
Correct output: 4.2657989984   | Program output: 29.2657989984 
Correct output: 96.7057987603  | Program output: 114.7057987603
Correct output: 122.162446611  | Program output: 107.162446611 
Correct output: 30.0102027945  | Program output: 1.0102027945  
Correct output: 104.5822387035 | Program output: 99.5822387035 
Correct output: -1.5538743366  | Program output: -48.5538743366
Correct output: 166.8070496115 | Program output: 93.8070496115 
Correct output: 58.6188945281  | Program output: 98.6188945281 
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction in1} {:instruction integer_yank} {:instruction integer_dup_items} {:instruction integer_mod} {:instruction float_sub} {:instruction float_yankdup} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_inc} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_div} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_dup_items} {:instruction float_div} {:instruction float_inc} {:instruction float_div} {:instruction float_inc} {:instruction integer_mod} {:instruction float_inc} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_yankdup} {:instruction float_inc} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_div} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_inc} {:instruction float_div} {:instruction float_inc} {:instruction float_div} {:instruction float_inc} {:instruction float_rot} {:instruction float_inc} {:instruction float_inc} {:instruction float_div} {:instruction float_max} {:instruction integer_shove} {:instruction integer_mod} {:instruction float_rot} {:instruction float_mult} {:instruction float_dup_items} {:instruction integer_flush} {:instruction integer_sub} {:instruction float_yankdup} {:instruction float_inc} {:instruction float_yankdup} {:instruction integer_sub} {:instruction float_inc} {:instruction float_mult} {:instruction float_dup_items} {:instruction float_inc} {:instruction float_inc} {:instruction integer_inc} {:instruction float_div} {:instruction integer_flush} {:instruction float_yankdup} {:instruction float_mult} {:instruction float_dup_items} {:instruction float_mod} {:instruction float_inc} {:instruction integer_dup_items} {:instruction integer_yank} {:instruction integer_mod} {:instruction integer_div} {:instruction float_dup_items} {:instruction integer_div} {:instruction float_dup_items} {:instruction float_div} {:instruction float_inc} {:instruction integer_dup_items} {:instruction float_div} {:instruction float_inc} {:instruction integer_mod} {:instruction print_float} {:instruction float_shove})
Best program: (in1 integer_yank integer_dup_items integer_mod float_sub float_yankdup float_inc float_yankdup float_inc float_inc float_yankdup float_div float_inc float_yankdup float_dup_items float_div float_inc float_div float_inc integer_mod float_inc float_inc float_yankdup float_yankdup float_inc float_inc float_yankdup float_div float_inc float_yankdup float_inc float_yankdup float_inc float_div float_inc float_div float_inc float_rot float_inc float_inc float_div float_max integer_shove integer_mod float_rot float_mult float_dup_items integer_flush integer_sub float_yankdup float_inc float_yankdup integer_sub float_inc float_mult float_dup_items float_inc float_inc integer_inc float_div integer_flush float_yankdup float_mult float_dup_items float_mod float_inc integer_dup_items integer_yank integer_mod integer_div float_dup_items integer_div float_dup_items float_div float_inc integer_dup_items float_div float_inc integer_mod print_float float_shove)
Errors: [34.0 13 79.0 13 91.0 12 49.0 2 67.0 3 98.0 2 26.0 2 50.0 2 36.0 2 73.0 2 0.0 0 30.0 2 8.0 1 6.0 2 43.0 3 57.0 2 21.0 2 25.0 2 18.0 3 15.0 2 29.0 2 5.0 3 47.0 2 73.0 3 40.0 1]
Total: 1103.0
Mean: 22.06
Genome size: 81
Size: 82
Percent parens: 0.012
--- Population Statistics ---
Average total errors in population: 3250.3092229
Median total errors in population: 1103.0
Error averages by case: (117.9810953 12.687 148.1355346 12.722 168.6656067 12.027 138.00288250000003 3.782 152.6767734 4.353 173.43723000000003 3.448 115.07821909999998 3.442 135.8254903000001 3.688 120.46424180000002 3.574 152.5239468 3.373 91.1604317 2.282 122.48529740000001 4.01 95.5071617 2.661 86.76948900000001 3.417 130.05134999999999 4.389 146.36647749999997 4.035 106.96498890000004 3.384 100.86569090000003 3.383 108.23840000000004 4.29 107.7460916 3.492 99.6947451 4.32 98.21513950000003 4.157 129.2406412 3.484 159.81512230000004 4.405 126.54317560000003 3.049)
Error minima by case: (0.441 7 28.027 1 8.3924 7 37.0 1 39.6006 2 0.0858 1 4.7822 1 24.9517 2 11.7373 1 0.0389 1 0.0 0 6.0 2 0.0 0 0.0 0 6.1465 2 33.0 2 3.0 1 0.132 1 0.1332 1 3.0 1 1.1019 1 0.0 0 0.6 1 61.0 2 16.0 1)
Average genome size in population (length): 82.703
Average program size in population (points): 83.703
Average percent parens in population: 0.012
Minimum age in population: 91.79972992931378
Maximum age in population: 96.35053501616169
Average age in population: 94.48072747205188
Median age in population: 94.5049811606982
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 7
Genome diversity (% unique Plush genomes):	 0.887
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 7
Syntactic diversity (% unique Push programs):	 0.887
Total error diversity:				 0.104
Error (vector) diversity:			 0.113
Behavioral diversity:				 0.115
--- Run Statistics ---
Number of program evaluations used so far: 67000
Number of point (instruction) evaluations so far: 130518184
--- Timings ---
Current time: 1529615106884 milliseconds
Total Time:         251.7 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:        88.9 seconds, 35.3%
Fitness Testing:    127.1 seconds, 50.5%
Report:              35.7 seconds, 14.2%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 66
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 67
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 67
;;******************************
;; -*- Number IO problem report - generation 67
Test total error for best: 59131.0
Test mean error for best: 29.56550
;;------------------------------
Outputs of best individual on training cases:
Correct output: 1.9526623133   | Program output: -32.0473376867
Correct output: -70.8009773522 | Program output: 8.1990226478  
Correct output: -13.7839009431 | Program output: 77.2160990569 
Correct output: 143.8727406396 | Program output: 94.8727406396 
Correct output: 136.4396027174 | Program output: 69.4396027174 
Correct output: 18.5044280613  | Program output: 116.5044280613
Correct output: 92.0568646792  | Program output: 66.0568646792 
Correct output: 71.8873476205  | Program output: 121.8873476205
Correct output: -10.8388749243 | Program output: -46.8388749243
Correct output: 0.9299825981   | Program output: 73.9299825981 
Correct output: -26.7840412284 | Program output: -26.7840412284
Correct output: -102.1264221267 | Program output: -72.1264221267
Correct output: 40.8061668642  | Program output: 48.8061668642 
Correct output: -5.2544966331  | Program output: -11.2544966331
Correct output: 102.9855886244 | Program output: 59.9855886244 
Correct output: -118.0507723766 | Program output: -61.0507723766
Correct output: 55.9371769928  | Program output: 76.9371769928 
Correct output: 4.2657989984   | Program output: 29.2657989984 
Correct output: 96.7057987603  | Program output: 114.7057987603
Correct output: 122.162446611  | Program output: 107.162446611 
Correct output: 30.0102027945  | Program output: 1.0102027945  
Correct output: 104.5822387035 | Program output: 99.5822387035 
Correct output: -1.5538743366  | Program output: -48.5538743366
Correct output: 166.8070496115 | Program output: 93.8070496115 
Correct output: 58.6188945281  | Program output: 98.6188945281 
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction in1} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_inc} {:instruction float_inc} {:instruction integer_dec} {:instruction float_div} {:instruction float_inc} {:instruction float_inc} {:instruction float_div} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_inc} {:instruction float_div} {:instruction float_inc} {:instruction float_div} {:instruction integer_mod} {:instruction float_div} {:instruction float_inc} {:instruction float_rot} {:instruction float_inc} {:instruction integer_pop} {:instruction integer_mod} {:instruction float_mult} {:instruction integer_inc} {:instruction float_div} {:instruction float_inc} {:instruction float_rot} {:instruction float_dup_items} {:instruction float_div} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_inc} {:instruction float_inc} {:instruction float_mult} {:instruction float_dup_items} {:instruction float_div} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_yankdup} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_inc} {:instruction integer_mod} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_yank} {:instruction float_inc} {:instruction float_yankdup} {:instruction print_float} {:instruction float_flush} {:instruction integer_stackdepth} {:instruction tag_float_856} {:instruction float_add} {:instruction integer_div} {:instruction float_mult} {:instruction float_dup_items} {:instruction float_div} {:instruction float_inc} {:instruction integer_swap} {:instruction print_float} {:instruction float_max} {:instruction integer_swap} {:instruction integer_max} {:instruction float_inc} {:instruction float_yankdup} {:instruction print_float} {:instruction float_flush} {:instruction integer_stackdepth} {:instruction tag_float_856} {:instruction integer_min} {:instruction float_dup_times} {:instruction float_max} {:instruction integer_yankdup} {:instruction integer_min} {:instruction print_float} {:instruction integer_stackdepth} {:instruction -44} {:instruction integer_add} {:instruction integer_shove} {:instruction float_yank} {:instruction in2} {:instruction 52} {:instruction float_shove} {:instruction -44} {:instruction float_pop} {:instruction float_dup_times} {:instruction float_swap} {:instruction in2} {:instruction integer_stackdepth} {:instruction float_dup_times} {:instruction integer_rot} {:instruction float_dup_times} {:instruction float_sin} {:instruction float_flush} {:instruction float_shove} {:instruction float_stackdepth} {:instruction float_sin} {:instruction float_flush} {:instruction integer_mult} {:instruction in2} {:instruction 52} {:instruction float_shove} {:instruction float_stackdepth} {:instruction float_sin} {:instruction integer_dec} {:instruction integer_mult} {:instruction float_flush} {:instruction integer_mult} {:instruction float_dup})
Best program: (in1 float_inc float_yankdup float_inc float_yankdup float_inc float_inc integer_dec float_div float_inc float_inc float_div float_inc float_yankdup float_inc float_yankdup float_inc float_div float_inc float_div integer_mod float_div float_inc float_rot float_inc integer_pop integer_mod float_mult integer_inc float_div float_inc float_rot float_dup_items float_div float_inc float_yankdup float_inc float_inc float_mult float_dup_items float_div float_inc float_yankdup float_yankdup float_inc float_yankdup float_inc float_yankdup float_inc integer_mod float_inc float_inc float_inc float_yank float_inc float_yankdup print_float float_flush integer_stackdepth tag_float_856 float_add integer_div float_mult float_dup_items float_div float_inc integer_swap print_float float_max integer_swap integer_max float_inc float_yankdup print_float float_flush integer_stackdepth tag_float_856 integer_min float_dup_times float_max integer_yankdup integer_min print_float integer_stackdepth -44 integer_add integer_shove float_yank in2 52 float_shove -44 float_pop float_dup_times float_swap in2 integer_stackdepth float_dup_times integer_rot float_dup_times float_sin float_flush float_shove float_stackdepth float_sin float_flush integer_mult in2 52 float_shove float_stackdepth float_sin integer_dec integer_mult float_flush integer_mult float_dup)
Errors: [34.0 13 79.0 13 91.0 12 49.0 2 67.0 3 98.0 2 26.0 2 50.0 2 36.0 2 73.0 2 0.0 0 30.0 2 8.0 1 6.0 2 43.0 3 57.0 2 21.0 2 25.0 2 18.0 3 15.0 2 29.0 2 5.0 3 47.0 2 73.0 3 40.0 1]
Total: 1103.0
Mean: 22.06
Genome size: 117
Size: 118
Percent parens: 0.008
--- Population Statistics ---
Average total errors in population: 2717.955266600001
Median total errors in population: 1103.0
Error averages by case: (97.1158463 12.766 128.92542240000003 12.734 146.9130987 12.034 116.92047310000005 3.542 132.16930439999996 4.131 152.060689 3.148 93.74707449999997 3.227 112.53768829999999 3.419 99.68352180000004 3.329 130.26425660000004 3.1 69.15313219999996 1.977 98.03503989999999 3.7 74.7321203 2.416 67.36149400000002 3.169 109.20513100000004 4.136 122.68407969999996 3.684 86.9819908 3.146 83.5903094 3.103 86.8043921 4.081 86.05231389999999 3.238 83.45610640000002 4.054 76.29839319999999 3.93 108.8990422 3.225 139.28244880000003 4.16 102.89389760000003 2.739)
Error minima by case: (0.0473 8 25.1496 1 14.2099 7 35.8727 2 7.5604 2 0.4854 1 16.0 1 1.0465 2 11.0838 1 0.7117 1 0.0 0 6.0 2 0.0 0 0.0 0 6.9856 2 33.0 2 1.0 1 0.5686 1 0.0 0 5.0 1 1.9898 1 0.0 0 1.8963 1 10.807 2 14.315 1)
Average genome size in population (length): 82.758
Average program size in population (points): 83.758
Average percent parens in population: 0.012
Minimum age in population: 93.40364401079236
Maximum age in population: 97.94665378698016
Average age in population: 95.89763634255966
Median age in population: 95.94098410054744
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 8
Genome diversity (% unique Plush genomes):	 0.89
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 8
Syntactic diversity (% unique Push programs):	 0.89
Total error diversity:				 0.089
Error (vector) diversity:			 0.098
Behavioral diversity:				 0.098
--- Run Statistics ---
Number of program evaluations used so far: 68000
Number of point (instruction) evaluations so far: 132587209
--- Timings ---
Current time: 1529615110843 milliseconds
Total Time:         255.5 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:        90.2 seconds, 35.3%
Fitness Testing:    129.0 seconds, 50.5%
Report:              36.2 seconds, 14.2%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 67
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 68
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 68
;;******************************
;; -*- Number IO problem report - generation 68
Test total error for best: 59131.0
Test mean error for best: 29.56550
;;------------------------------
Outputs of best individual on training cases:
Correct output: 1.9526623133   | Program output: -32.0473376867
Correct output: -70.8009773522 | Program output: 8.1990226478  
Correct output: -13.7839009431 | Program output: 77.2160990569 
Correct output: 143.8727406396 | Program output: 94.8727406396 
Correct output: 136.4396027174 | Program output: 69.4396027174 
Correct output: 18.5044280613  | Program output: 116.5044280613
Correct output: 92.0568646792  | Program output: 66.0568646792 
Correct output: 71.8873476205  | Program output: 121.8873476205
Correct output: -10.8388749243 | Program output: -46.8388749243
Correct output: 0.9299825981   | Program output: 73.9299825981 
Correct output: -26.7840412284 | Program output: -26.7840412284
Correct output: -102.1264221267 | Program output: -72.1264221267
Correct output: 40.8061668642  | Program output: 48.8061668642 
Correct output: -5.2544966331  | Program output: -11.2544966331
Correct output: 102.9855886244 | Program output: 59.9855886244 
Correct output: -118.0507723766 | Program output: -61.0507723766
Correct output: 55.9371769928  | Program output: 76.9371769928 
Correct output: 4.2657989984   | Program output: 29.2657989984 
Correct output: 96.7057987603  | Program output: 114.7057987603
Correct output: 122.162446611  | Program output: 107.162446611 
Correct output: 30.0102027945  | Program output: 1.0102027945  
Correct output: 104.5822387035 | Program output: 99.5822387035 
Correct output: -1.5538743366  | Program output: -48.5538743366
Correct output: 166.8070496115 | Program output: 93.8070496115 
Correct output: 58.6188945281  | Program output: 98.6188945281 
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction in1} {:instruction integer_max} {:instruction integer_dup_items} {:instruction integer_sub} {:instruction float_sub} {:instruction integer_div} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_inc} {:instruction float_inc} {:instruction float_swap} {:instruction float_div} {:instruction float_inc} {:instruction integer_yank} {:instruction float_dup_items} {:instruction integer_pop} {:instruction float_inc} {:instruction float_yankdup} {:instruction integer_rot} {:instruction float_yankdup} {:instruction float_inc} {:instruction float_dup_items} {:instruction float_add} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_inc} {:instruction integer_dup} {:instruction float_inc} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_div} {:instruction float_inc} {:instruction float_div} {:instruction float_inc} {:instruction float_rot} {:instruction float_inc} {:instruction float_inc} {:instruction float_div} {:instruction float_dup_items} {:instruction float_div} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_inc} {:instruction float_yankdup} {:instruction integer_stackdepth} {:instruction float_inc} {:instruction float_mult} {:instruction float_dup_items} {:instruction float_div} {:instruction float_inc} {:instruction float_yankdup} {:instruction integer_dup} {:instruction float_inc} {:instruction float_inc} {:instruction float_mult} {:instruction integer_max} {:instruction float_div} {:instruction float_inc} {:instruction float_inc} {:instruction float_swap} {:instruction float_inc} {:instruction print_float} {:instruction float_max} {:instruction integer_mod} {:instruction float_min} {:instruction float_dup_items} {:instruction print_float} {:instruction integer_add} {:instruction integer_yankdup} {:instruction integer_min})
Best program: (in1 integer_max integer_dup_items integer_sub float_sub integer_div float_inc float_yankdup float_inc float_yankdup float_inc float_inc float_swap float_div float_inc integer_yank float_dup_items integer_pop float_inc float_yankdup integer_rot float_yankdup float_inc float_dup_items float_add float_inc float_yankdup float_inc integer_dup float_inc float_inc float_yankdup float_div float_inc float_div float_inc float_rot float_inc float_inc float_div float_dup_items float_div float_inc float_yankdup float_inc float_yankdup integer_stackdepth float_inc float_mult float_dup_items float_div float_inc float_yankdup integer_dup float_inc float_inc float_mult integer_max float_div float_inc float_inc float_swap float_inc print_float float_max integer_mod float_min float_dup_items print_float integer_add integer_yankdup integer_min)
Errors: [34.0 13 79.0 13 91.0 12 49.0 2 67.0 3 98.0 2 26.0 2 50.0 2 36.0 2 73.0 2 0.0 0 30.0 2 8.0 1 6.0 2 43.0 3 57.0 2 21.0 2 25.0 2 18.0 3 15.0 2 29.0 2 5.0 3 47.0 2 73.0 3 40.0 1]
Total: 1103.0
Mean: 22.06
Genome size: 72
Size: 73
Percent parens: 0.014
--- Population Statistics ---
Average total errors in population: 2838.4093133000006
Median total errors in population: 1103.0
Error averages by case: (101.27391699999997 12.731 134.17862 12.749 151.6655856999999 12.012 121.64953750000004 3.633 136.74684099999996 4.207 156.57750710000002 3.25 98.54696769999998 3.293 117.87307890000002 3.52 104.07451330000004 3.41 135.11810950000003 3.188 74.04152959999998 2.104 104.89411489999998 3.806 78.91002310000002 2.521 72.1228437 3.234 113.88960049999996 4.199 129.0967506 3.822 90.96073140000001 3.219 85.34323600000002 3.204 91.61375319999999 4.156 90.95930290000003 3.322 88.23547470000003 4.206 81.30049310000001 3.989 113.10908789999999 3.304 143.73073259999998 4.226 108.33296139999997 2.859)
Error minima by case: (0.1381 7 41.2533 1 13.5393 8 21.8727 2 4.5604 2 0.2737 1 16.0569 1 28.0 2 9.8792 1 0.6225 1 0.0 0 8.0 2 1.0 1 0.0 0 7.0144 2 11.0508 2 0.0 0 1.3392 1 0.0 0 7.0 1 2.8777 1 0.0 0 1.4135 1 3.193 2 18.0 1)
Average genome size in population (length): 82.245
Average program size in population (points): 83.245
Average percent parens in population: 0.012
Minimum age in population: 95.10014316550497
Maximum age in population: 99.42026395199692
Average age in population: 97.2840243425588
Median age in population: 97.29403412423476
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 7
Genome diversity (% unique Plush genomes):	 0.885
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 7
Syntactic diversity (% unique Push programs):	 0.885
Total error diversity:				 0.1
Error (vector) diversity:			 0.107
Behavioral diversity:				 0.108
--- Run Statistics ---
Number of program evaluations used so far: 69000
Number of point (instruction) evaluations so far: 134643384
--- Timings ---
Current time: 1529615114630 milliseconds
Total Time:         259.5 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:        91.6 seconds, 35.3%
Fitness Testing:    130.9 seconds, 50.5%
Report:              36.9 seconds, 14.2%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 68
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 69
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 69
;;******************************
;; -*- Number IO problem report - generation 69
Test total error for best: 59131.0
Test mean error for best: 29.56550
;;------------------------------
Outputs of best individual on training cases:
Correct output: 1.9526623133   | Program output: -32.0473376867
Correct output: -70.8009773522 | Program output: 8.1990226478  
Correct output: -13.7839009431 | Program output: 77.2160990569 
Correct output: 143.8727406396 | Program output: 94.8727406396 
Correct output: 136.4396027174 | Program output: 69.4396027174 
Correct output: 18.5044280613  | Program output: 116.5044280613
Correct output: 92.0568646792  | Program output: 66.0568646792 
Correct output: 71.8873476205  | Program output: 121.8873476205
Correct output: -10.8388749243 | Program output: -46.8388749243
Correct output: 0.9299825981   | Program output: 73.9299825981 
Correct output: -26.7840412284 | Program output: -26.7840412284
Correct output: -102.1264221267 | Program output: -72.1264221267
Correct output: 40.8061668642  | Program output: 48.8061668642 
Correct output: -5.2544966331  | Program output: -11.2544966331
Correct output: 102.9855886244 | Program output: 59.9855886244 
Correct output: -118.0507723766 | Program output: -61.0507723766
Correct output: 55.9371769928  | Program output: 76.9371769928 
Correct output: 4.2657989984   | Program output: 29.2657989984 
Correct output: 96.7057987603  | Program output: 114.7057987603
Correct output: 122.162446611  | Program output: 107.162446611 
Correct output: 30.0102027945  | Program output: 1.0102027945  
Correct output: 104.5822387035 | Program output: 99.5822387035 
Correct output: -1.5538743366  | Program output: -48.5538743366
Correct output: 166.8070496115 | Program output: 93.8070496115 
Correct output: 58.6188945281  | Program output: 98.6188945281 
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction in1} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_inc} {:instruction float_inc} {:instruction integer_dec} {:instruction float_div} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_inc} {:instruction float_inc} {:instruction float_div} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_inc} {:instruction float_div} {:instruction float_inc} {:instruction integer_flush} {:instruction float_inc} {:instruction float_rot} {:instruction float_inc} {:instruction float_inc} {:instruction float_div} {:instruction float_inc} {:instruction float_yankdup} {:instruction integer_mod} {:instruction integer_div} {:instruction float_mult} {:instruction integer_min} {:instruction integer_dup_items} {:instruction float_inc} {:instruction float_rot} {:instruction float_dup_items} {:instruction float_div} {:instruction float_yankdup} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_inc} {:instruction float_yankdup} {:instruction integer_stackdepth} {:instruction float_inc} {:instruction float_mult} {:instruction float_dup_items} {:instruction float_div} {:instruction float_yankdup} {:instruction float_dup_items} {:instruction float_div} {:instruction integer_div} {:instruction integer_mod} {:instruction float_inc} {:instruction float_inc} {:instruction float_mult} {:instruction integer_max} {:instruction float_div} {:instruction float_inc} {:instruction float_inc} {:instruction float_swap} {:instruction float_inc} {:instruction print_integer} {:instruction print_float} {:instruction float_mult} {:instruction float_swap} {:instruction float_div} {:instruction integer_mod} {:instruction integer_div} {:instruction float_mult} {:instruction float_dup_items} {:instruction float_div} {:instruction float_inc} {:instruction float_sub} {:instruction print_float} {:instruction float_max} {:instruction integer_stackdepth} {:instruction integer_max} {:instruction float_max} {:instruction integer_fromfloat} {:instruction float_dup_items} {:instruction float_cos} {:instruction print_float} {:instruction integer_stackdepth} {:instruction integer_max} {:instruction float_max} {:instruction integer_fromfloat} {:instruction print_float})
Best program: (in1 float_inc float_yankdup float_inc float_yankdup float_inc float_inc integer_dec float_div float_inc float_yankdup float_inc float_inc float_div float_inc float_yankdup float_inc float_yankdup float_inc float_div float_inc integer_flush float_inc float_rot float_inc float_inc float_div float_inc float_yankdup integer_mod integer_div float_mult integer_min integer_dup_items float_inc float_rot float_dup_items float_div float_yankdup float_inc float_yankdup float_inc float_yankdup integer_stackdepth float_inc float_mult float_dup_items float_div float_yankdup float_dup_items float_div integer_div integer_mod float_inc float_inc float_mult integer_max float_div float_inc float_inc float_swap float_inc print_integer print_float float_mult float_swap float_div integer_mod integer_div float_mult float_dup_items float_div float_inc float_sub print_float float_max integer_stackdepth integer_max float_max integer_fromfloat float_dup_items float_cos print_float integer_stackdepth integer_max float_max integer_fromfloat print_float)
Errors: [34.0 13 79.0 13 91.0 12 49.0 2 67.0 3 98.0 2 26.0 2 50.0 2 36.0 2 73.0 2 0.0 0 30.0 2 8.0 1 6.0 2 43.0 3 57.0 2 21.0 2 25.0 2 18.0 3 15.0 2 29.0 2 5.0 3 47.0 2 73.0 3 40.0 1]
Total: 1103.0
Mean: 22.06
Genome size: 88
Size: 89
Percent parens: 0.011
--- Population Statistics ---
Average total errors in population: 2726.3724908000013
Median total errors in population: 1103.0
Error averages by case: (97.63648070000002 12.721 127.77735530000004 12.706 146.66818990000002 12.021 117.40625889999998 3.603 132.44210999999999 4.195 151.396499 3.276 93.96649740000001 3.317 113.16736530000003 3.529 100.64106590000003 3.413 130.08820120000007 3.182 70.7037911 2.061 100.64145380000001 3.784 74.2074052 2.496 68.27983689999999 3.263 109.51952549999999 4.236 124.93641419999994 3.791 86.88637740000001 3.198 81.51597400000001 3.235 87.09751730000002 4.171 86.58180970000001 3.347 81.6606508 4.071 76.80071779999996 4.032 109.13626970000001 3.3 139.614497 4.25 103.5472268 2.855)
Error minima by case: (0.1747 7 37.1818 1 2.6154 9 20.8727 2 21.5604 2 0.2181 1 14.0 1 22.2642 2 10.5577 1 0.2688 1 0.0 0 8.0 2 0.0 0 0.0 0 7.0144 2 28.0508 2 0.0 0 0.3758 1 1.0 1 3.0 1 2.8777 1 0.0 0 1.8325 1 3.193 2 0.4668 1)
Average genome size in population (length): 81.945
Average program size in population (points): 82.945
Average percent parens in population: 0.012
Minimum age in population: 96.28985884382543
Maximum age in population: 100.4899190748274
Average age in population: 98.68549387920251
Median age in population: 98.70561437524943
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 5
Genome diversity (% unique Plush genomes):	 0.878
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 5
Syntactic diversity (% unique Push programs):	 0.878
Total error diversity:				 0.107
Error (vector) diversity:			 0.115
Behavioral diversity:				 0.116
--- Run Statistics ---
Number of program evaluations used so far: 70000
Number of point (instruction) evaluations so far: 136692009
--- Timings ---
Current time: 1529615118449 milliseconds
Total Time:         263.2 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:        92.9 seconds, 35.3%
Fitness Testing:    132.8 seconds, 50.5%
Report:              37.4 seconds, 14.2%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 69
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 70
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 70
;;******************************
;; -*- Number IO problem report - generation 70
Test total error for best: 59131.0
Test mean error for best: 29.56550
;;------------------------------
Outputs of best individual on training cases:
Correct output: 1.9526623133   | Program output: -32.0473376867
Correct output: -70.8009773522 | Program output: 8.1990226478  
Correct output: -13.7839009431 | Program output: 77.2160990569 
Correct output: 143.8727406396 | Program output: 94.8727406396 
Correct output: 136.4396027174 | Program output: 69.4396027174 
Correct output: 18.5044280613  | Program output: 116.5044280613
Correct output: 92.0568646792  | Program output: 66.0568646792 
Correct output: 71.8873476205  | Program output: 121.8873476205
Correct output: -10.8388749243 | Program output: -46.8388749243
Correct output: 0.9299825981   | Program output: 73.9299825981 
Correct output: -26.7840412284 | Program output: -26.7840412284
Correct output: -102.1264221267 | Program output: -72.1264221267
Correct output: 40.8061668642  | Program output: 48.8061668642 
Correct output: -5.2544966331  | Program output: -11.2544966331
Correct output: 102.9855886244 | Program output: 59.9855886244 
Correct output: -118.0507723766 | Program output: -61.0507723766
Correct output: 55.9371769928  | Program output: 76.9371769928 
Correct output: 4.2657989984   | Program output: 29.2657989984 
Correct output: 96.7057987603  | Program output: 114.7057987603
Correct output: 122.162446611  | Program output: 107.162446611 
Correct output: 30.0102027945  | Program output: 1.0102027945  
Correct output: 104.5822387035 | Program output: 99.5822387035 
Correct output: -1.5538743366  | Program output: -48.5538743366
Correct output: 166.8070496115 | Program output: 93.8070496115 
Correct output: 58.6188945281  | Program output: 98.6188945281 
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction in1} {:instruction integer_max} {:instruction integer_dup_items} {:instruction integer_sub} {:instruction integer_mod} {:instruction integer_div} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_inc} {:instruction float_yank} {:instruction float_div} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_dup_items} {:instruction float_div} {:instruction float_inc} {:instruction float_yankdup} {:instruction integer_rot} {:instruction float_yankdup} {:instruction float_inc} {:instruction float_dup_items} {:instruction float_dup_items} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_inc} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_inc} {:instruction tagged_142} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_yankdup} {:instruction float_inc} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_inc} {:instruction float_inc} {:instruction float_mult} {:instruction float_dup_items} {:instruction float_div} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_inc} {:instruction integer_mod} {:instruction integer_mod} {:instruction float_inc} {:instruction float_inc} {:instruction integer_stackdepth} {:instruction float_div} {:instruction integer_flush} {:instruction float_yankdup} {:instruction float_mult} {:instruction float_swap} {:instruction float_div} {:instruction float_inc} {:instruction float_inc} {:instruction integer_yankdup} {:instruction integer_swap} {:instruction integer_dec} {:instruction print_float} {:instruction float_add} {:instruction float_inc} {:instruction integer_dup_items} {:instruction integer_shove} {:instruction float_mult} {:instruction float_div} {:instruction float_inc} {:instruction float_yankdup} {:instruction print_float} {:instruction float_max} {:instruction integer_sub} {:instruction integer_mod} {:instruction integer_div} {:instruction float_mult} {:instruction float_dup_items} {:instruction float_div} {:instruction print_float} {:instruction integer_stackdepth} {:instruction -44} {:instruction float_pop} {:instruction integer_shove} {:instruction float_swap} {:instruction in2} {:instruction float_mod} {:instruction 52} {:instruction integer_fromfloat} {:instruction integer_min} {:instruction integer_shove})
Best program: (in1 integer_max integer_dup_items integer_sub integer_mod integer_div float_inc float_yankdup float_inc float_yankdup float_inc float_yank float_div float_inc float_yankdup float_dup_items float_div float_inc float_yankdup integer_rot float_yankdup float_inc float_dup_items float_dup_items float_inc float_yankdup float_inc float_yankdup float_inc float_inc float_yankdup float_inc tagged_142 float_inc float_yankdup float_yankdup float_inc float_inc float_yankdup float_inc float_inc float_mult float_dup_items float_div float_inc float_yankdup float_inc float_yankdup float_inc float_yankdup float_inc integer_mod integer_mod float_inc float_inc integer_stackdepth float_div integer_flush float_yankdup float_mult float_swap float_div float_inc float_inc integer_yankdup integer_swap integer_dec print_float float_add float_inc integer_dup_items integer_shove float_mult float_div float_inc float_yankdup print_float float_max integer_sub integer_mod integer_div float_mult float_dup_items float_div print_float integer_stackdepth -44 float_pop integer_shove float_swap in2 float_mod 52 integer_fromfloat integer_min integer_shove)
Errors: [34.0 13 79.0 13 91.0 12 49.0 2 67.0 3 98.0 2 26.0 2 50.0 2 36.0 2 73.0 2 0.0 0 30.0 2 8.0 1 6.0 2 43.0 3 57.0 2 21.0 2 25.0 2 18.0 3 15.0 2 29.0 2 5.0 3 47.0 2 73.0 3 40.0 1]
Total: 1103.0
Mean: 22.06
Genome size: 96
Size: 97
Percent parens: 0.010
--- Population Statistics ---
Average total errors in population: 2867.0525998
Median total errors in population: 1103.0
Error averages by case: (105.4266197 12.779 130.74044740000005 12.775 153.79248420000005 12.044 122.17472010000004 3.565 137.44650729999998 4.149 158.75056680000003 3.219 99.192512 3.244 119.58106930000002 3.464 107.87552900000003 3.355 137.29035380000008 3.152 77.99512359999997 2.007 108.29577599999999 3.686 79.95119890000001 2.45 73.74736830000005 3.185 114.64526670000001 4.151 132.5764418 3.724 91.81017489999999 3.184 83.44517840000003 3.14 92.16886190000005 4.11 91.3013425 3.277 82.89371189999997 4.05 81.6413557 3.931 116.90976090000001 3.254 144.3854675 4.196 110.13776120000007 2.786)
Error minima by case: (0.0336 8 55.0 1 11.4521 9 35.0 2 53.0 2 0.4541 1 12.0 1 26.0 2 10.5158 1 0.7117 1 0.0 0 6.0 2 0.0 0 0.0 0 29.0 2 33.0 2 1.0 1 0.2658 1 0.0 0 1.0 1 3.9149 1 0.0 0 1.1568 1 59.0 2 16.0 1)
Average genome size in population (length): 82.339
Average program size in population (points): 83.339
Average percent parens in population: 0.012
Minimum age in population: 97.28985884382543
Maximum age in population: 102.0009305928092
Average age in population: 100.0873288461822
Median age in population: 100.1462238135426
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 5
Genome diversity (% unique Plush genomes):	 0.887
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 5
Syntactic diversity (% unique Push programs):	 0.887
Total error diversity:				 0.103
Error (vector) diversity:			 0.113
Behavioral diversity:				 0.115
--- Run Statistics ---
Number of program evaluations used so far: 71000
Number of point (instruction) evaluations so far: 138750534
--- Timings ---
Current time: 1529615122337 milliseconds
Total Time:         267.1 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:        94.2 seconds, 35.3%
Fitness Testing:    134.8 seconds, 50.5%
Report:              38.0 seconds, 14.2%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 70
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 71
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 71
;;******************************
;; -*- Number IO problem report - generation 71
Test total error for best: 59131.0
Test mean error for best: 29.56550
;;------------------------------
Outputs of best individual on training cases:
Correct output: 1.9526623133   | Program output: -32.0473376867
Correct output: -70.8009773522 | Program output: 8.1990226478  
Correct output: -13.7839009431 | Program output: 77.2160990569 
Correct output: 143.8727406396 | Program output: 94.8727406396 
Correct output: 136.4396027174 | Program output: 69.4396027174 
Correct output: 18.5044280613  | Program output: 116.5044280613
Correct output: 92.0568646792  | Program output: 66.0568646792 
Correct output: 71.8873476205  | Program output: 121.8873476205
Correct output: -10.8388749243 | Program output: -46.8388749243
Correct output: 0.9299825981   | Program output: 73.9299825981 
Correct output: -26.7840412284 | Program output: -26.7840412284
Correct output: -102.1264221267 | Program output: -72.1264221267
Correct output: 40.8061668642  | Program output: 48.8061668642 
Correct output: -5.2544966331  | Program output: -11.2544966331
Correct output: 102.9855886244 | Program output: 59.9855886244 
Correct output: -118.0507723766 | Program output: -61.0507723766
Correct output: 55.9371769928  | Program output: 76.9371769928 
Correct output: 4.2657989984   | Program output: 29.2657989984 
Correct output: 96.7057987603  | Program output: 114.7057987603
Correct output: 122.162446611  | Program output: 107.162446611 
Correct output: 30.0102027945  | Program output: 1.0102027945  
Correct output: 104.5822387035 | Program output: 99.5822387035 
Correct output: -1.5538743366  | Program output: -48.5538743366
Correct output: 166.8070496115 | Program output: 93.8070496115 
Correct output: 58.6188945281  | Program output: 98.6188945281 
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction in1} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_inc} {:instruction float_inc} {:instruction integer_sub} {:instruction float_div} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_dup_items} {:instruction float_div} {:instruction float_yankdup} {:instruction float_inc} {:instruction float_dup_items} {:instruction float_div} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_inc} {:instruction float_shove} {:instruction float_inc} {:instruction float_div} {:instruction float_inc} {:instruction float_rot} {:instruction float_inc} {:instruction float_inc} {:instruction float_div} {:instruction float_inc} {:instruction float_yankdup} {:instruction integer_mod} {:instruction integer_div} {:instruction float_max} {:instruction float_yankdup} {:instruction float_div} {:instruction integer_div} {:instruction float_mult} {:instruction integer_max} {:instruction float_yankdup} {:instruction float_mult} {:instruction float_dup_items} {:instruction float_div} {:instruction float_inc} {:instruction integer_dup_items} {:instruction float_dup_items} {:instruction float_div} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_inc} {:instruction integer_mod} {:instruction float_inc} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_div} {:instruction float_min} {:instruction float_inc} {:instruction float_yank} {:instruction float_inc} {:instruction float_mult} {:instruction print_float} {:instruction float_div} {:instruction float_dup_items} {:instruction float_div} {:instruction float_inc} {:instruction integer_dup_items} {:instruction integer_sub} {:instruction integer_mod} {:instruction integer_div} {:instruction float_yank} {:instruction float_inc} {:instruction float_yankdup} {:instruction print_float} {:instruction float_flush} {:instruction integer_stackdepth} {:instruction in2} {:instruction float_inc} {:instruction float_cos})
Best program: (in1 float_inc float_yankdup float_inc float_yankdup float_inc float_inc integer_sub float_div float_inc float_yankdup float_dup_items float_div float_yankdup float_inc float_dup_items float_div float_inc float_yankdup float_inc float_yankdup float_inc float_yankdup float_inc float_shove float_inc float_div float_inc float_rot float_inc float_inc float_div float_inc float_yankdup integer_mod integer_div float_max float_yankdup float_div integer_div float_mult integer_max float_yankdup float_mult float_dup_items float_div float_inc integer_dup_items float_dup_items float_div float_inc float_yankdup float_inc float_yankdup float_inc float_yankdup float_inc integer_mod float_inc float_inc float_yankdup float_div float_min float_inc float_yank float_inc float_mult print_float float_div float_dup_items float_div float_inc integer_dup_items integer_sub integer_mod integer_div float_yank float_inc float_yankdup print_float float_flush integer_stackdepth in2 float_inc float_cos)
Errors: [34.0 13 79.0 13 91.0 12 49.0 2 67.0 3 98.0 2 26.0 2 50.0 2 36.0 2 73.0 2 0.0 0 30.0 2 8.0 1 6.0 2 43.0 3 57.0 2 21.0 2 25.0 2 18.0 3 15.0 2 29.0 2 5.0 3 47.0 2 73.0 3 40.0 1]
Total: 1103.0
Mean: 22.06
Genome size: 85
Size: 86
Percent parens: 0.012
--- Population Statistics ---
Average total errors in population: 2813.9065879999994
Median total errors in population: 1103.0
Error averages by case: (100.88003110000005 12.73 131.92494400000004 12.671 150.10236799999998 12.036 121.37251290000007 3.704 136.38634839999992 4.289 154.9188281 3.298 98.17043330000001 3.364 116.73510040000001 3.604 103.33945260000002 3.469 133.70370500000007 3.258 73.60509759999997 2.18 103.1052708 3.853 78.41431770000001 2.554 71.26882250000001 3.305 113.50180769999999 4.268 127.9139467999999 3.884 88.64992210000003 3.252 83.6114973 3.262 90.53604420000002 4.202 90.68099780000001 3.412 85.47956949999995 4.232 80.92752689999999 4.068 112.18220690000001 3.368 143.60953219999996 4.329 107.36330420000002 2.931)
Error minima by case: (0.441 7 11.801 1 1.6535 9 0.45 1 6.1911 2 0.4748 1 9.8006 1 16.612 2 4.5985 1 0.0376 1 0.0 0 6.0 2 0.0 0 0.0 0 2.6276 2 33.0 2 0.0 0 0.0282 1 0.0 0 6.0 1 2.8777 1 0.0 0 0.6449 1 17.121 2 16.0 1)
Average genome size in population (length): 81.655
Average program size in population (points): 82.655
Average percent parens in population: 0.012
Minimum age in population: 98.5357350317995
Maximum age in population: 103.5819499619127
Average age in population: 101.5509759862536
Median age in population: 101.6378963191431
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 6
Genome diversity (% unique Plush genomes):	 0.887
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 6
Syntactic diversity (% unique Push programs):	 0.887
Total error diversity:				 0.111
Error (vector) diversity:			 0.121
Behavioral diversity:				 0.122
--- Run Statistics ---
Number of program evaluations used so far: 72000
Number of point (instruction) evaluations so far: 140791934
--- Timings ---
Current time: 1529615126107 milliseconds
Total Time:         270.9 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:        95.6 seconds, 35.3%
Fitness Testing:    136.7 seconds, 50.5%
Report:              38.6 seconds, 14.2%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 71
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 72
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 72
;;******************************
;; -*- Number IO problem report - generation 72
Test total error for best: 59131.0
Test mean error for best: 29.56550
;;------------------------------
Outputs of best individual on training cases:
Correct output: 1.9526623133   | Program output: -32.0473376867
Correct output: -70.8009773522 | Program output: 8.1990226478  
Correct output: -13.7839009431 | Program output: 77.2160990569 
Correct output: 143.8727406396 | Program output: 94.8727406396 
Correct output: 136.4396027174 | Program output: 69.4396027174 
Correct output: 18.5044280613  | Program output: 116.5044280613
Correct output: 92.0568646792  | Program output: 66.0568646792 
Correct output: 71.8873476205  | Program output: 121.8873476205
Correct output: -10.8388749243 | Program output: -46.8388749243
Correct output: 0.9299825981   | Program output: 73.9299825981 
Correct output: -26.7840412284 | Program output: -26.7840412284
Correct output: -102.1264221267 | Program output: -72.1264221267
Correct output: 40.8061668642  | Program output: 48.8061668642 
Correct output: -5.2544966331  | Program output: -11.2544966331
Correct output: 102.9855886244 | Program output: 59.9855886244 
Correct output: -118.0507723766 | Program output: -61.0507723766
Correct output: 55.9371769928  | Program output: 76.9371769928 
Correct output: 4.2657989984   | Program output: 29.2657989984 
Correct output: 96.7057987603  | Program output: 114.7057987603
Correct output: 122.162446611  | Program output: 107.162446611 
Correct output: 30.0102027945  | Program output: 1.0102027945  
Correct output: 104.5822387035 | Program output: 99.5822387035 
Correct output: -1.5538743366  | Program output: -48.5538743366
Correct output: 166.8070496115 | Program output: 93.8070496115 
Correct output: 58.6188945281  | Program output: 98.6188945281 
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction in1} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_inc} {:instruction float_inc} {:instruction integer_dec} {:instruction float_div} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_inc} {:instruction float_inc} {:instruction float_div} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_inc} {:instruction float_div} {:instruction float_inc} {:instruction float_div} {:instruction float_inc} {:instruction float_rot} {:instruction float_inc} {:instruction float_inc} {:instruction float_div} {:instruction float_inc} {:instruction float_yankdup} {:instruction integer_mod} {:instruction integer_div} {:instruction float_mult} {:instruction integer_min} {:instruction float_div} {:instruction float_inc} {:instruction float_mult} {:instruction float_dup_items} {:instruction float_div} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_inc} {:instruction integer_add} {:instruction float_inc} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_div} {:instruction integer_flush} {:instruction float_yankdup} {:instruction integer_rot} {:instruction float_dup_items} {:instruction float_div} {:instruction float_inc} {:instruction integer_dup_items} {:instruction integer_sub} {:instruction integer_mod} {:instruction integer_div} {:instruction float_yank} {:instruction float_inc} {:instruction float_yankdup} {:instruction print_float} {:instruction float_flush} {:instruction integer_stackdepth} {:instruction in2} {:instruction float_inc} {:instruction float_dup_items} {:instruction float_pop} {:instruction float_pop} {:instruction print_float} {:instruction float_flush} {:instruction integer_mult} {:instruction integer_min} {:instruction float_cos} {:instruction float_dec})
Best program: (in1 float_inc float_yankdup float_inc float_yankdup float_inc float_inc integer_dec float_div float_inc float_yankdup float_inc float_inc float_div float_inc float_yankdup float_inc float_yankdup float_inc float_div float_inc float_div float_inc float_rot float_inc float_inc float_div float_inc float_yankdup integer_mod integer_div float_mult integer_min float_div float_inc float_mult float_dup_items float_div float_inc float_yankdup float_inc float_yankdup float_inc float_yankdup float_inc integer_add float_inc float_inc float_yankdup float_div integer_flush float_yankdup integer_rot float_dup_items float_div float_inc integer_dup_items integer_sub integer_mod integer_div float_yank float_inc float_yankdup print_float float_flush integer_stackdepth in2 float_inc float_dup_items float_pop float_pop print_float float_flush integer_mult integer_min float_cos float_dec)
Errors: [34.0 13 79.0 13 91.0 12 49.0 2 67.0 3 98.0 2 26.0 2 50.0 2 36.0 2 73.0 2 0.0 0 30.0 2 8.0 1 6.0 2 43.0 3 57.0 2 21.0 2 25.0 2 18.0 3 15.0 2 29.0 2 5.0 3 47.0 2 73.0 3 40.0 1]
Total: 1103.0
Mean: 22.06
Genome size: 77
Size: 78
Percent parens: 0.013
--- Population Statistics ---
Average total errors in population: 2850.0102925
Median total errors in population: 1103.0
Error averages by case: (103.50948600000007 12.742 132.87286520000004 12.73 150.51121650000002 12.067 122.00422570000008 3.639 136.9972953 4.247 156.11425990000004 3.305 98.82394899999998 3.32 117.63650650000004 3.548 106.00775790000003 3.445 133.99924110000006 3.21 76.47611640000001 2.061 105.07684399999994 3.784 79.34774680000005 2.512 73.93306169999997 3.3 114.15298770000001 4.221 129.44667829999992 3.786 91.75950500000002 3.251 86.62146390000005 3.228 92.64082040000001 4.188 92.2474033 3.356 87.47523260000003 4.011 81.58143010000006 4.036 114.9015466 3.342 144.0973879 4.282 107.32826469999998 2.836)
Error minima by case: (0.0862 8 10.2577 1 8.729 9 39.0 2 33.0 2 0.5044 1 5.2261 1 5.9408 2 5.784 1 0.2275 1 0.0 0 6.0 2 0.0 0 0.0 0 5.7026 2 33.0 2 1.0 1 0.132 1 0.5771 1 5.0 1 0.8879 1 0.0 0 1.1357 1 27.0 2 16.0 1)
Average genome size in population (length): 81.207
Average program size in population (points): 82.207
Average percent parens in population: 0.012
Minimum age in population: 100.6222070886946
Maximum age in population: 104.9657274707768
Average age in population: 102.9269525177259
Median age in population: 102.9605502979042
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 6
Genome diversity (% unique Plush genomes):	 0.856
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 6
Syntactic diversity (% unique Push programs):	 0.856
Total error diversity:				 0.104
Error (vector) diversity:			 0.116
Behavioral diversity:				 0.118
--- Run Statistics ---
Number of program evaluations used so far: 73000
Number of point (instruction) evaluations so far: 142822109
--- Timings ---
Current time: 1529615129858 milliseconds
Total Time:         274.7 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:        96.9 seconds, 35.3%
Fitness Testing:    138.6 seconds, 50.5%
Report:              39.1 seconds, 14.2%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 72
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 73
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 73
;;******************************
;; -*- Number IO problem report - generation 73
Test total error for best: 59131.0
Test mean error for best: 29.56550
;;------------------------------
Outputs of best individual on training cases:
Correct output: 1.9526623133   | Program output: -32.0473376867
Correct output: -70.8009773522 | Program output: 8.1990226478  
Correct output: -13.7839009431 | Program output: 77.2160990569 
Correct output: 143.8727406396 | Program output: 94.8727406396 
Correct output: 136.4396027174 | Program output: 69.4396027174 
Correct output: 18.5044280613  | Program output: 116.5044280613
Correct output: 92.0568646792  | Program output: 66.0568646792 
Correct output: 71.8873476205  | Program output: 121.8873476205
Correct output: -10.8388749243 | Program output: -46.8388749243
Correct output: 0.9299825981   | Program output: 73.9299825981 
Correct output: -26.7840412284 | Program output: -26.7840412284
Correct output: -102.1264221267 | Program output: -72.1264221267
Correct output: 40.8061668642  | Program output: 48.8061668642 
Correct output: -5.2544966331  | Program output: -11.2544966331
Correct output: 102.9855886244 | Program output: 59.9855886244 
Correct output: -118.0507723766 | Program output: -61.0507723766
Correct output: 55.9371769928  | Program output: 76.9371769928 
Correct output: 4.2657989984   | Program output: 29.2657989984 
Correct output: 96.7057987603  | Program output: 114.7057987603
Correct output: 122.162446611  | Program output: 107.162446611 
Correct output: 30.0102027945  | Program output: 1.0102027945  
Correct output: 104.5822387035 | Program output: 99.5822387035 
Correct output: -1.5538743366  | Program output: -48.5538743366
Correct output: 166.8070496115 | Program output: 93.8070496115 
Correct output: 58.6188945281  | Program output: 98.6188945281 
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction in1} {:instruction integer_max} {:instruction float_shove} {:instruction integer_sub} {:instruction float_inc} {:instruction float_mult} {:instruction float_inc} {:instruction float_dup_items} {:instruction float_inc} {:instruction float_inc} {:instruction float_mod} {:instruction float_div} {:instruction float_inc} {:instruction tagged_989} {:instruction float_dup_items} {:instruction float_div} {:instruction integer_rot} {:instruction float_yankdup} {:instruction float_inc} {:instruction float_dup_items} {:instruction float_dup_items} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_inc} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_inc} {:instruction tagged_165} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_yankdup} {:instruction float_inc} {:instruction integer_yank} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_inc} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_inc} {:instruction float_div} {:instruction integer_stackdepth} {:instruction float_inc} {:instruction float_mult} {:instruction float_dup_items} {:instruction float_div} {:instruction float_inc} {:instruction float_yankdup} {:instruction integer_min} {:instruction float_inc} {:instruction float_inc} {:instruction float_mult} {:instruction integer_max} {:instruction integer_dec} {:instruction float_inc} {:instruction float_inc} {:instruction float_swap} {:instruction float_inc} {:instruction float_yankdup} {:instruction print_float} {:instruction float_flush} {:instruction integer_stackdepth} {:instruction float_div} {:instruction float_inc} {:instruction integer_dup_items} {:instruction integer_sub} {:instruction integer_mod} {:instruction integer_dup_times} {:instruction in2} {:instruction float_min} {:instruction float_dup_times} {:instruction in2} {:instruction print_float} {:instruction float_swap} {:instruction integer_fromfloat} {:instruction float_inc} {:instruction float_stackdepth} {:instruction print_float} {:instruction float_inc} {:instruction float_yank} {:instruction float_inc} {:instruction integer_dup_times} {:instruction print_float} {:instruction float_flush} {:instruction integer_stackdepth})
Best program: (in1 integer_max float_shove integer_sub float_inc float_mult float_inc float_dup_items float_inc float_inc float_mod float_div float_inc tagged_989 float_dup_items float_div integer_rot float_yankdup float_inc float_dup_items float_dup_items float_inc float_yankdup float_inc float_yankdup float_inc float_inc float_yankdup float_inc tagged_165 float_inc float_yankdup float_yankdup float_inc integer_yank float_inc float_yankdup float_inc float_inc float_yankdup float_inc float_div integer_stackdepth float_inc float_mult float_dup_items float_div float_inc float_yankdup integer_min float_inc float_inc float_mult integer_max integer_dec float_inc float_inc float_swap float_inc float_yankdup print_float float_flush integer_stackdepth float_div float_inc integer_dup_items integer_sub integer_mod integer_dup_times in2 float_min float_dup_times in2 print_float float_swap integer_fromfloat float_inc float_stackdepth print_float float_inc float_yank float_inc integer_dup_times print_float float_flush integer_stackdepth)
Errors: [34.0 13 79.0 13 91.0 12 49.0 2 67.0 3 98.0 2 26.0 2 50.0 2 36.0 2 73.0 2 0.0 0 30.0 2 8.0 1 6.0 2 43.0 3 57.0 2 21.0 2 25.0 2 18.0 3 15.0 2 29.0 2 5.0 3 47.0 2 73.0 3 40.0 1]
Total: 1103.0
Mean: 22.06
Genome size: 86
Size: 87
Percent parens: 0.011
--- Population Statistics ---
Average total errors in population: 2596.2114764000003
Median total errors in population: 1103.0
Error averages by case: (91.84077360000003 12.733 123.58543820000001 12.73 141.31323439999994 12.012 112.99404460000004 3.566 127.66327119999997 4.182 146.96603950000002 3.204 88.9798107 3.265 108.12645470000001 3.47 95.05683670000002 3.383 124.50683190000007 3.129 64.1938186 2.014 94.23205649999998 3.712 68.77425169999998 2.47 61.356046800000016 3.242 104.49881749999997 4.189 118.72944739999994 3.735 82.03859980000001 3.191 76.14796340000002 3.159 82.79505510000006 4.13 82.22589500000004 3.32 77.48430489999998 3.976 72.24155079999998 3.968 103.71415259999998 3.296 135.38263100000006 4.211 98.3001498 2.777)
Error minima by case: (0.0473 7 57.801 1 14.1629 8 41.0 2 59.0 2 0.5604 1 18.0 1 0.278 2 2.5424 1 0.07 1 0.0 0 8.1264 2 0.0 0 0.0 0 35.0 2 35.0508 2 0.0 0 0.2223 1 1.0 1 7.0 1 0.1399 1 0.0 0 1.6308 1 65.0 2 1.749 1)
Average genome size in population (length): 80.664
Average program size in population (points): 81.664
Average percent parens in population: 0.012
Minimum age in population: 101.6222070886946
Maximum age in population: 106.2563890957268
Average age in population: 104.3149001984501
Median age in population: 104.3524917255351
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 7
Genome diversity (% unique Plush genomes):	 0.875
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 7
Syntactic diversity (% unique Push programs):	 0.875
Total error diversity:				 0.102
Error (vector) diversity:			 0.109
Behavioral diversity:				 0.109
--- Run Statistics ---
Number of program evaluations used so far: 74000
Number of point (instruction) evaluations so far: 144838734
--- Timings ---
Current time: 1529615133618 milliseconds
Total Time:         278.4 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:        98.2 seconds, 35.3%
Fitness Testing:    140.6 seconds, 50.5%
Report:              39.6 seconds, 14.2%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 73
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 74
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 74
;;******************************
;; -*- Number IO problem report - generation 74
Test total error for best: 59131.0
Test mean error for best: 29.56550
;;------------------------------
Outputs of best individual on training cases:
Correct output: 1.9526623133   | Program output: -32.0473376867
Correct output: -70.8009773522 | Program output: 8.1990226478  
Correct output: -13.7839009431 | Program output: 77.2160990569 
Correct output: 143.8727406396 | Program output: 94.8727406396 
Correct output: 136.4396027174 | Program output: 69.4396027174 
Correct output: 18.5044280613  | Program output: 116.5044280613
Correct output: 92.0568646792  | Program output: 66.0568646792 
Correct output: 71.8873476205  | Program output: 121.8873476205
Correct output: -10.8388749243 | Program output: -46.8388749243
Correct output: 0.9299825981   | Program output: 73.9299825981 
Correct output: -26.7840412284 | Program output: -26.7840412284
Correct output: -102.1264221267 | Program output: -72.1264221267
Correct output: 40.8061668642  | Program output: 48.8061668642 
Correct output: -5.2544966331  | Program output: -11.2544966331
Correct output: 102.9855886244 | Program output: 59.9855886244 
Correct output: -118.0507723766 | Program output: -61.0507723766
Correct output: 55.9371769928  | Program output: 76.9371769928 
Correct output: 4.2657989984   | Program output: 29.2657989984 
Correct output: 96.7057987603  | Program output: 114.7057987603
Correct output: 122.162446611  | Program output: 107.162446611 
Correct output: 30.0102027945  | Program output: 1.0102027945  
Correct output: 104.5822387035 | Program output: 99.5822387035 
Correct output: -1.5538743366  | Program output: -48.5538743366
Correct output: 166.8070496115 | Program output: 93.8070496115 
Correct output: 58.6188945281  | Program output: 98.6188945281 
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction in1} {:instruction integer_max} {:instruction integer_dup_items} {:instruction integer_sub} {:instruction integer_mod} {:instruction float_frominteger} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_inc} {:instruction float_inc} {:instruction integer_mod} {:instruction float_inc} {:instruction float_div} {:instruction float_inc} {:instruction float_rot} {:instruction float_inc} {:instruction float_inc} {:instruction float_rot} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_inc} {:instruction float_shove} {:instruction float_inc} {:instruction float_div} {:instruction float_inc} {:instruction float_rot} {:instruction float_inc} {:instruction float_inc} {:instruction integer_shove} {:instruction float_inc} {:instruction float_yankdup} {:instruction integer_mod} {:instruction integer_div} {:instruction float_mult} {:instruction float_dup_items} {:instruction float_div} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_inc} {:instruction float_yankdup} {:instruction integer_dec} {:instruction float_inc} {:instruction float_mult} {:instruction float_dup_items} {:instruction float_div} {:instruction float_yankdup} {:instruction integer_mod} {:instruction float_inc} {:instruction float_inc} {:instruction float_mult} {:instruction integer_max} {:instruction float_div} {:instruction float_inc} {:instruction float_inc} {:instruction float_swap} {:instruction float_inc} {:instruction print_integer} {:instruction print_float} {:instruction float_mult} {:instruction float_swap} {:instruction float_div} {:instruction integer_div} {:instruction float_inc} {:instruction tag_float_856} {:instruction float_add} {:instruction integer_dup_times} {:instruction in2} {:instruction float_min} {:instruction float_dup_times} {:instruction in2} {:instruction print_float} {:instruction float_sin} {:instruction integer_fromfloat} {:instruction float_inc} {:instruction float_stackdepth} {:instruction print_float} {:instruction float_yank})
Best program: (in1 integer_max integer_dup_items integer_sub integer_mod float_frominteger float_inc float_yankdup float_inc float_inc integer_mod float_inc float_div float_inc float_rot float_inc float_inc float_rot float_inc float_yankdup float_inc float_yankdup float_inc float_shove float_inc float_div float_inc float_rot float_inc float_inc integer_shove float_inc float_yankdup integer_mod integer_div float_mult float_dup_items float_div float_inc float_yankdup float_inc float_yankdup float_inc float_yankdup integer_dec float_inc float_mult float_dup_items float_div float_yankdup integer_mod float_inc float_inc float_mult integer_max float_div float_inc float_inc float_swap float_inc print_integer print_float float_mult float_swap float_div integer_div float_inc tag_float_856 float_add integer_dup_times in2 float_min float_dup_times in2 print_float float_sin integer_fromfloat float_inc float_stackdepth print_float float_yank)
Errors: [34.0 13 79.0 13 91.0 12 49.0 2 67.0 3 98.0 2 26.0 2 50.0 2 36.0 2 73.0 2 0.0 0 30.0 2 8.0 1 6.0 2 43.0 3 57.0 2 21.0 2 25.0 2 18.0 3 15.0 2 29.0 2 5.0 3 47.0 2 73.0 3 40.0 1]
Total: 1103.0
Mean: 22.06
Genome size: 81
Size: 82
Percent parens: 0.012
--- Population Statistics ---
Average total errors in population: 2771.8966259000003
Median total errors in population: 1103.0
Error averages by case: (100.3214186 12.782 131.1398411 12.686 149.5701862 12.039 118.34986040000008 3.517 133.72144029999998 4.117 154.81929780000002 3.176 95.52541149999995 3.213 115.12408780000004 3.444 102.6921668 3.314 133.06215820000003 3.095 72.590559 1.983 101.58774099999998 3.681 76.05983530000003 2.425 70.47502269999998 3.159 110.95592330000002 4.126 125.91632839999998 3.708 88.1423534 3.137 82.56216710000001 3.119 88.30362179999996 4.067 87.52756310000001 3.243 85.18241049999999 4.081 77.96438690000002 3.937 111.8560542 3.213 140.55419 4.158 105.72360050000003 2.749)
Error minima by case: (0.0858 8 10.801 1 14.2774 8 22.8727 2 5.5604 2 0.4744 1 12.1749 1 7.4437 2 7.2724 1 0.4365 1 0.0 0 6.0 2 0.0 0 0.0 0 1.5959 2 12.0508 2 1.0 1 0.7254 1 2.0 1 5.0 1 3.563 1 0.0 0 2.0474 1 2.193 2 5.8094 1)
Average genome size in population (length): 80.277
Average program size in population (points): 81.277
Average percent parens in population: 0.013
Minimum age in population: 103.6458596609465
Maximum age in population: 107.6753337824877
Average age in population: 105.727951910192
Median age in population: 105.7632665541658
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 5
Genome diversity (% unique Plush genomes):	 0.897
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 5
Syntactic diversity (% unique Push programs):	 0.897
Total error diversity:				 0.092
Error (vector) diversity:			 0.103
Behavioral diversity:				 0.104
--- Run Statistics ---
Number of program evaluations used so far: 75000
Number of point (instruction) evaluations so far: 146845684
--- Timings ---
Current time: 1529615137341 milliseconds
Total Time:         282.2 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:        99.5 seconds, 35.3%
Fitness Testing:    142.4 seconds, 50.5%
Report:              40.1 seconds, 14.2%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 74
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 75
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 75
;;******************************
;; -*- Number IO problem report - generation 75
Test total error for best: 59131.0
Test mean error for best: 29.56550
;;------------------------------
Outputs of best individual on training cases:
Correct output: 1.9526623133   | Program output: -32.0473376867
Correct output: -70.8009773522 | Program output: 8.1990226478  
Correct output: -13.7839009431 | Program output: 77.2160990569 
Correct output: 143.8727406396 | Program output: 94.8727406396 
Correct output: 136.4396027174 | Program output: 69.4396027174 
Correct output: 18.5044280613  | Program output: 116.5044280613
Correct output: 92.0568646792  | Program output: 66.0568646792 
Correct output: 71.8873476205  | Program output: 121.8873476205
Correct output: -10.8388749243 | Program output: -46.8388749243
Correct output: 0.9299825981   | Program output: 73.9299825981 
Correct output: -26.7840412284 | Program output: -26.7840412284
Correct output: -102.1264221267 | Program output: -72.1264221267
Correct output: 40.8061668642  | Program output: 48.8061668642 
Correct output: -5.2544966331  | Program output: -11.2544966331
Correct output: 102.9855886244 | Program output: 59.9855886244 
Correct output: -118.0507723766 | Program output: -61.0507723766
Correct output: 55.9371769928  | Program output: 76.9371769928 
Correct output: 4.2657989984   | Program output: 29.2657989984 
Correct output: 96.7057987603  | Program output: 114.7057987603
Correct output: 122.162446611  | Program output: 107.162446611 
Correct output: 30.0102027945  | Program output: 1.0102027945  
Correct output: 104.5822387035 | Program output: 99.5822387035 
Correct output: -1.5538743366  | Program output: -48.5538743366
Correct output: 166.8070496115 | Program output: 93.8070496115 
Correct output: 58.6188945281  | Program output: 98.6188945281 
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction in1} {:instruction integer_max} {:instruction integer_dup_items} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_inc} {:instruction float_inc} {:instruction float_mult} {:instruction float_inc} {:instruction tagged_132} {:instruction float_inc} {:instruction float_rot} {:instruction float_inc} {:instruction float_inc} {:instruction float_div} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_inc} {:instruction tag_integer_142} {:instruction float_inc} {:instruction float_div} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_inc} {:instruction integer_yank} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_mult} {:instruction float_dup_items} {:instruction float_div} {:instruction float_inc} {:instruction float_mult} {:instruction float_dup_items} {:instruction float_div} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_inc} {:instruction integer_mod} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_yank} {:instruction float_inc} {:instruction float_yankdup} {:instruction print_float} {:instruction float_flush} {:instruction integer_stackdepth} {:instruction tag_float_856} {:instruction float_add} {:instruction integer_dup_times} {:instruction float_min} {:instruction float_min} {:instruction float_inc} {:instruction integer_dup_items} {:instruction integer_sub})
Best program: (in1 integer_max integer_dup_items float_inc float_yankdup float_inc float_inc float_mult float_inc tagged_132 float_inc float_rot float_inc float_inc float_div float_inc float_yankdup float_inc float_yankdup float_inc tag_integer_142 float_inc float_div float_inc float_yankdup float_inc integer_yank float_inc float_yankdup float_inc float_yankdup float_mult float_dup_items float_div float_inc float_mult float_dup_items float_div float_inc float_yankdup float_inc float_yankdup float_inc float_yankdup float_inc integer_mod float_inc float_inc float_inc float_yank float_inc float_yankdup print_float float_flush integer_stackdepth tag_float_856 float_add integer_dup_times float_min float_min float_inc integer_dup_items integer_sub)
Errors: [34.0 13 79.0 13 91.0 12 49.0 2 67.0 3 98.0 2 26.0 2 50.0 2 36.0 2 73.0 2 0.0 0 30.0 2 8.0 1 6.0 2 43.0 3 57.0 2 21.0 2 25.0 2 18.0 3 15.0 2 29.0 2 5.0 3 47.0 2 73.0 3 40.0 1]
Total: 1103.0
Mean: 22.06
Genome size: 63
Size: 64
Percent parens: 0.016
--- Population Statistics ---
Average total errors in population: 2823.2998867000006
Median total errors in population: 1103.0
Error averages by case: (100.96275730000002 12.756 131.44330340000008 12.771 150.6344647 12.029 121.50763549999999 3.633 136.2689967 4.204 155.77560150000008 3.263 98.12046829999994 3.336 117.18018290000002 3.573 104.39250960000005 3.443 134.0687456 3.196 73.95864109999997 2.099 103.25191969999999 3.8 79.14514469999995 2.525 70.8682623 3.264 113.57485809999999 4.223 127.41872819999995 3.818 91.6803311 3.242 84.9728873 3.2 91.92865969999995 4.18 90.95206929999998 3.332 85.9698308 3.977 81.19045160000002 3.966 112.62424259999999 3.339 143.46306569999996 4.248 107.63512899999996 2.894)
Error minima by case: (0.363 7 18.6514 2 9.8193 8 35.8727 1 0.4396 2 0.2737 1 17.0 1 33.0 2 3.277 1 0.1426 1 0.0 0 13.0 2 1.0 1 0.0 0 6.9856 2 6.0508 2 4.0 1 0.1311 1 1.0 1 6.0 1 0.563 1 0.0 0 0.4386 1 10.807 2 14.9051 1)
Average genome size in population (length): 80.644
Average program size in population (points): 81.644
Average percent parens in population: 0.012
Minimum age in population: 104.8122170633258
Maximum age in population: 109.1415829881577
Average age in population: 107.1269205875068
Median age in population: 107.183905855949
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 4
Genome diversity (% unique Plush genomes):	 0.9
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 4
Syntactic diversity (% unique Push programs):	 0.9
Total error diversity:				 0.101
Error (vector) diversity:			 0.109
Behavioral diversity:				 0.111
--- Run Statistics ---
Number of program evaluations used so far: 76000
Number of point (instruction) evaluations so far: 148861834
--- Timings ---
Current time: 1529615141062 milliseconds
Total Time:         285.9 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       100.8 seconds, 35.3%
Fitness Testing:    144.4 seconds, 50.5%
Report:              40.7 seconds, 14.2%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 75
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 76
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 76
;;******************************
;; -*- Number IO problem report - generation 76
Test total error for best: 59131.0
Test mean error for best: 29.56550
;;------------------------------
Outputs of best individual on training cases:
Correct output: 1.9526623133   | Program output: -32.0473376867
Correct output: -70.8009773522 | Program output: 8.1990226478  
Correct output: -13.7839009431 | Program output: 77.2160990569 
Correct output: 143.8727406396 | Program output: 94.8727406396 
Correct output: 136.4396027174 | Program output: 69.4396027174 
Correct output: 18.5044280613  | Program output: 116.5044280613
Correct output: 92.0568646792  | Program output: 66.0568646792 
Correct output: 71.8873476205  | Program output: 121.8873476205
Correct output: -10.8388749243 | Program output: -46.8388749243
Correct output: 0.9299825981   | Program output: 73.9299825981 
Correct output: -26.7840412284 | Program output: -26.7840412284
Correct output: -102.1264221267 | Program output: -72.1264221267
Correct output: 40.8061668642  | Program output: 48.8061668642 
Correct output: -5.2544966331  | Program output: -11.2544966331
Correct output: 102.9855886244 | Program output: 59.9855886244 
Correct output: -118.0507723766 | Program output: -61.0507723766
Correct output: 55.9371769928  | Program output: 76.9371769928 
Correct output: 4.2657989984   | Program output: 29.2657989984 
Correct output: 96.7057987603  | Program output: 114.7057987603
Correct output: 122.162446611  | Program output: 107.162446611 
Correct output: 30.0102027945  | Program output: 1.0102027945  
Correct output: 104.5822387035 | Program output: 99.5822387035 
Correct output: -1.5538743366  | Program output: -48.5538743366
Correct output: 166.8070496115 | Program output: 93.8070496115 
Correct output: 58.6188945281  | Program output: 98.6188945281 
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction in1} {:instruction integer_max} {:instruction integer_dup_items} {:instruction integer_sub} {:instruction integer_mod} {:instruction integer_div} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_inc} {:instruction float_inc} {:instruction integer_mod} {:instruction float_inc} {:instruction float_div} {:instruction float_inc} {:instruction float_rot} {:instruction float_inc} {:instruction float_inc} {:instruction float_div} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_inc} {:instruction float_dup_times} {:instruction float_inc} {:instruction float_div} {:instruction float_inc} {:instruction float_rot} {:instruction float_inc} {:instruction float_inc} {:instruction float_div} {:instruction float_inc} {:instruction float_yankdup} {:instruction integer_mod} {:instruction float_yankdup} {:instruction float_inc} {:instruction float_mult} {:instruction float_mod} {:instruction float_div} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_inc} {:instruction float_stackdepth} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_mult} {:instruction integer_max} {:instruction float_div} {:instruction float_inc} {:instruction float_inc} {:instruction float_mod} {:instruction float_inc} {:instruction print_float} {:instruction float_max} {:instruction integer_mod} {:instruction float_inc} {:instruction float_dup_items} {:instruction integer_add} {:instruction float_inc} {:instruction integer_fromfloat} {:instruction integer_sub} {:instruction integer_mod} {:instruction integer_div} {:instruction float_mult} {:instruction integer_stackdepth} {:instruction in2} {:instruction float_inc} {:instruction float_cos})
Best program: (in1 integer_max integer_dup_items integer_sub integer_mod integer_div float_inc float_yankdup float_inc float_inc integer_mod float_inc float_div float_inc float_rot float_inc float_inc float_div float_inc float_yankdup float_inc float_yankdup float_inc float_dup_times float_inc float_div float_inc float_rot float_inc float_inc float_div float_inc float_yankdup integer_mod float_yankdup float_inc float_mult float_mod float_div float_inc float_yankdup float_inc float_stackdepth float_inc float_inc float_inc float_mult integer_max float_div float_inc float_inc float_mod float_inc print_float float_max integer_mod float_inc float_dup_items integer_add float_inc integer_fromfloat integer_sub integer_mod integer_div float_mult integer_stackdepth in2 float_inc float_cos)
Errors: [34.0 13 79.0 13 91.0 12 49.0 2 67.0 3 98.0 2 26.0 2 50.0 2 36.0 2 73.0 2 0.0 0 30.0 2 8.0 1 6.0 2 43.0 3 57.0 2 21.0 2 25.0 2 18.0 3 15.0 2 29.0 2 5.0 3 47.0 2 73.0 3 40.0 1]
Total: 1103.0
Mean: 22.06
Genome size: 69
Size: 70
Percent parens: 0.014
--- Population Statistics ---
Average total errors in population: 3050.7860836000004
Median total errors in population: 1103.0
Error averages by case: (110.76151330000002 12.694 142.06381720000005 12.746 157.90188310000002 12.06 130.3151074000001 3.821 145.10252209999996 4.392 162.98179650000006 3.43 107.1206287 3.469 125.71983380000003 3.705 113.22702350000004 3.601 141.6654489000001 3.354 84.19669410000002 2.281 113.60575009999997 3.979 87.90506080000003 2.687 81.68685160000003 3.406 122.35545319999999 4.405 138.0498976999999 4.006 98.5517637 3.417 94.01380950000001 3.351 99.81093739999997 4.29 99.91194150000003 3.521 95.06182650000002 4.11 90.1900121 4.173 122.0606454 3.492 152.35344880000002 4.441 116.29841669999999 3.043)
Error minima by case: (0.2033 8 12.2931 1 4.2932 9 42.0 2 60.0 2 0.3889 1 19.0 1 26.0 2 1.3481 1 0.07 1 0.0 0 6.0 2 0.0 0 0.0 0 36.0 2 33.0 2 1.0 1 0.1133 1 1.8984 1 8.0 1 2.0102 1 0.0 0 0.9107 1 66.0 2 16.0 1)
Average genome size in population (length): 80.358
Average program size in population (points): 81.358
Average percent parens in population: 0.013
Minimum age in population: 106.1015371518712
Maximum age in population: 110.4136523371447
Average age in population: 108.4909610685305
Median age in population: 108.5437528038374
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 6
Genome diversity (% unique Plush genomes):	 0.892
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 6
Syntactic diversity (% unique Push programs):	 0.892
Total error diversity:				 0.112
Error (vector) diversity:			 0.123
Behavioral diversity:				 0.125
--- Run Statistics ---
Number of program evaluations used so far: 77000
Number of point (instruction) evaluations so far: 150870884
--- Timings ---
Current time: 1529615144809 milliseconds
Total Time:         289.7 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       102.1 seconds, 35.3%
Fitness Testing:    146.3 seconds, 50.5%
Report:              41.2 seconds, 14.2%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 76
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 77
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 77
;;******************************
;; -*- Number IO problem report - generation 77
Test total error for best: 59131.0
Test mean error for best: 29.56550
;;------------------------------
Outputs of best individual on training cases:
Correct output: 1.9526623133   | Program output: -32.0473376867
Correct output: -70.8009773522 | Program output: 8.1990226478  
Correct output: -13.7839009431 | Program output: 77.2160990569 
Correct output: 143.8727406396 | Program output: 94.8727406396 
Correct output: 136.4396027174 | Program output: 69.4396027174 
Correct output: 18.5044280613  | Program output: 116.5044280613
Correct output: 92.0568646792  | Program output: 66.0568646792 
Correct output: 71.8873476205  | Program output: 121.8873476205
Correct output: -10.8388749243 | Program output: -46.8388749243
Correct output: 0.9299825981   | Program output: 73.9299825981 
Correct output: -26.7840412284 | Program output: -26.7840412284
Correct output: -102.1264221267 | Program output: -72.1264221267
Correct output: 40.8061668642  | Program output: 48.8061668642 
Correct output: -5.2544966331  | Program output: -11.2544966331
Correct output: 102.9855886244 | Program output: 59.9855886244 
Correct output: -118.0507723766 | Program output: -61.0507723766
Correct output: 55.9371769928  | Program output: 76.9371769928 
Correct output: 4.2657989984   | Program output: 29.2657989984 
Correct output: 96.7057987603  | Program output: 114.7057987603
Correct output: 122.162446611  | Program output: 107.162446611 
Correct output: 30.0102027945  | Program output: 1.0102027945  
Correct output: 104.5822387035 | Program output: 99.5822387035 
Correct output: -1.5538743366  | Program output: -48.5538743366
Correct output: 166.8070496115 | Program output: 93.8070496115 
Correct output: 58.6188945281  | Program output: 98.6188945281 
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction in1} {:instruction integer_max} {:instruction float_shove} {:instruction integer_sub} {:instruction integer_mod} {:instruction float_sub} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_inc} {:instruction integer_shove} {:instruction float_inc} {:instruction float_div} {:instruction float_inc} {:instruction float_div} {:instruction float_inc} {:instruction float_rot} {:instruction float_inc} {:instruction float_inc} {:instruction integer_yank} {:instruction float_inc} {:instruction integer_max} {:instruction float_div} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_inc} {:instruction float_div} {:instruction float_inc} {:instruction float_div} {:instruction float_inc} {:instruction float_rot} {:instruction float_inc} {:instruction float_inc} {:instruction float_div} {:instruction float_dup_items} {:instruction float_div} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_inc} {:instruction integer_mult} {:instruction integer_stackdepth} {:instruction float_inc} {:instruction float_mult} {:instruction float_dup_items} {:instruction float_div} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_dup_items} {:instruction float_inc} {:instruction float_inc} {:instruction float_mult} {:instruction integer_max} {:instruction float_div} {:instruction float_inc} {:instruction float_inc} {:instruction float_swap} {:instruction float_inc} {:instruction float_yankdup} {:instruction print_float} {:instruction float_flush} {:instruction integer_stackdepth} {:instruction tag_float_856} {:instruction float_add} {:instruction integer_dup_times} {:instruction in2} {:instruction float_min} {:instruction float_dup_times} {:instruction integer_pop} {:instruction 52} {:instruction float_shove} {:instruction integer_pop} {:instruction float_sin} {:instruction integer_dec} {:instruction integer_mult} {:instruction float_dup})
Best program: (in1 integer_max float_shove integer_sub integer_mod float_sub float_inc float_yankdup float_inc integer_shove float_inc float_div float_inc float_div float_inc float_rot float_inc float_inc integer_yank float_inc integer_max float_div float_inc float_yankdup float_inc float_yankdup float_inc float_div float_inc float_div float_inc float_rot float_inc float_inc float_div float_dup_items float_div float_inc float_yankdup float_inc integer_mult integer_stackdepth float_inc float_mult float_dup_items float_div float_inc float_yankdup float_dup_items float_inc float_inc float_mult integer_max float_div float_inc float_inc float_swap float_inc float_yankdup print_float float_flush integer_stackdepth tag_float_856 float_add integer_dup_times in2 float_min float_dup_times integer_pop 52 float_shove integer_pop float_sin integer_dec integer_mult float_dup)
Errors: [34.0 13 79.0 13 91.0 12 49.0 2 67.0 3 98.0 2 26.0 2 50.0 2 36.0 2 73.0 2 0.0 0 30.0 2 8.0 1 6.0 2 43.0 3 57.0 2 21.0 2 25.0 2 18.0 3 15.0 2 29.0 2 5.0 3 47.0 2 73.0 3 40.0 1]
Total: 1103.0
Mean: 22.06
Genome size: 76
Size: 77
Percent parens: 0.013
--- Population Statistics ---
Average total errors in population: 2792.1010077
Median total errors in population: 1103.0
Error averages by case: (101.19298080000002 12.731 132.31174940000002 12.733 148.59012080000002 12.026 119.15775490000003 3.522 134.25062860000003 4.133 154.89057669999997 3.191 95.91993640000001 3.224 115.68784430000004 3.418 104.18294300000001 3.34 132.05489400000002 3.115 73.5183702 1.956 102.41108909999998 3.718 76.74883399999999 2.4 71.2956527 3.209 111.43539269999998 4.144 126.72621539999996 3.718 89.0836722 3.137 84.91676839999998 3.138 90.04908830000002 4.074 89.2820127 3.253 88.08201170000004 4.083 78.6542812 3.963 112.84687840000001 3.253 141.34595920000004 4.153 105.10135260000003 2.732)
Error minima by case: (0.3161 8 0.418 1 12.8193 8 22.8727 1 20.5604 2 0.0618 1 14.0 1 25.1127 2 10.8389 1 0.5483 1 0.0 0 6.1264 2 0.0 0 0.0 0 6.0144 2 27.0508 2 0.0 0 0.2628 1 2.0 1 3.0 1 2.8777 1 0.0 0 1.5539 1 2.193 2 15.3811 1)
Average genome size in population (length): 80.205
Average program size in population (points): 81.205
Average percent parens in population: 0.013
Minimum age in population: 107.1015371518712
Maximum age in population: 111.7832248290616
Average age in population: 109.9308966709614
Median age in population: 109.985756349107
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 6
Genome diversity (% unique Plush genomes):	 0.885
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 6
Syntactic diversity (% unique Push programs):	 0.885
Total error diversity:				 0.092
Error (vector) diversity:			 0.102
Behavioral diversity:				 0.103
--- Run Statistics ---
Number of program evaluations used so far: 78000
Number of point (instruction) evaluations so far: 152876059
--- Timings ---
Current time: 1529615148581 milliseconds
Total Time:         293.4 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       103.5 seconds, 35.3%
Fitness Testing:    148.2 seconds, 50.5%
Report:              41.7 seconds, 14.2%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 77
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 78
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 78
;;******************************
;; -*- Number IO problem report - generation 78
Test total error for best: 59131.0
Test mean error for best: 29.56550
;;------------------------------
Outputs of best individual on training cases:
Correct output: 1.9526623133   | Program output: -32.0473376867
Correct output: -70.8009773522 | Program output: 8.1990226478  
Correct output: -13.7839009431 | Program output: 77.2160990569 
Correct output: 143.8727406396 | Program output: 94.8727406396 
Correct output: 136.4396027174 | Program output: 69.4396027174 
Correct output: 18.5044280613  | Program output: 116.5044280613
Correct output: 92.0568646792  | Program output: 66.0568646792 
Correct output: 71.8873476205  | Program output: 121.8873476205
Correct output: -10.8388749243 | Program output: -46.8388749243
Correct output: 0.9299825981   | Program output: 73.9299825981 
Correct output: -26.7840412284 | Program output: -26.7840412284
Correct output: -102.1264221267 | Program output: -72.1264221267
Correct output: 40.8061668642  | Program output: 48.8061668642 
Correct output: -5.2544966331  | Program output: -11.2544966331
Correct output: 102.9855886244 | Program output: 59.9855886244 
Correct output: -118.0507723766 | Program output: -61.0507723766
Correct output: 55.9371769928  | Program output: 76.9371769928 
Correct output: 4.2657989984   | Program output: 29.2657989984 
Correct output: 96.7057987603  | Program output: 114.7057987603
Correct output: 122.162446611  | Program output: 107.162446611 
Correct output: 30.0102027945  | Program output: 1.0102027945  
Correct output: 104.5822387035 | Program output: 99.5822387035 
Correct output: -1.5538743366  | Program output: -48.5538743366
Correct output: 166.8070496115 | Program output: 93.8070496115 
Correct output: 58.6188945281  | Program output: 98.6188945281 
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction in1} {:instruction integer_max} {:instruction float_sub} {:instruction integer_sub} {:instruction integer_mod} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_inc} {:instruction float_inc} {:instruction integer_mod} {:instruction float_inc} {:instruction integer_yankdup} {:instruction float_inc} {:instruction float_inc} {:instruction float_dup_items} {:instruction float_div} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_inc} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_div} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_inc} {:instruction tag_integer_979} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_mult} {:instruction float_dup_items} {:instruction float_div} {:instruction float_inc} {:instruction float_mult} {:instruction float_dup_items} {:instruction float_div} {:instruction float_inc} {:instruction float_sub} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_inc} {:instruction integer_mod} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_yank} {:instruction float_inc} {:instruction float_yankdup} {:instruction print_float} {:instruction float_inc} {:instruction float_swap} {:instruction float_inc} {:instruction float_yankdup} {:instruction print_float} {:instruction float_flush} {:instruction print_float} {:instruction float_flush} {:instruction float_dup_items} {:instruction float_dec} {:instruction float_inc} {:instruction float_yankdup} {:instruction -44} {:instruction float_dup_times} {:instruction integer_shove} {:instruction float_swap} {:instruction in2} {:instruction integer_fromfloat} {:instruction integer_shove} {:instruction float_swap})
Best program: (in1 integer_max float_sub integer_sub integer_mod float_inc float_yankdup float_inc float_yankdup float_inc float_inc integer_mod float_inc integer_yankdup float_inc float_inc float_dup_items float_div float_inc float_yankdup float_inc float_yankdup float_inc float_inc float_yankdup float_div float_inc float_yankdup float_inc tag_integer_979 float_inc float_yankdup float_inc float_yankdup float_mult float_dup_items float_div float_inc float_mult float_dup_items float_div float_inc float_sub float_inc float_yankdup float_inc float_yankdup float_inc integer_mod float_inc float_inc float_inc float_yank float_inc float_yankdup print_float float_inc float_swap float_inc float_yankdup print_float float_flush print_float float_flush float_dup_items float_dec float_inc float_yankdup -44 float_dup_times integer_shove float_swap in2 integer_fromfloat integer_shove float_swap)
Errors: [34.0 13 79.0 13 91.0 12 49.0 2 67.0 3 98.0 2 26.0 2 50.0 2 36.0 2 73.0 2 0.0 0 30.0 2 8.0 1 6.0 2 43.0 3 57.0 2 21.0 2 25.0 2 18.0 3 15.0 2 29.0 2 5.0 3 47.0 2 73.0 3 40.0 1]
Total: 1103.0
Mean: 22.06
Genome size: 76
Size: 77
Percent parens: 0.013
--- Population Statistics ---
Average total errors in population: 2905.1724846
Median total errors in population: 1103.0
Error averages by case: (105.56425860000003 12.723 131.82683520000006 12.734 154.37757840000003 12.024 125.25598970000007 3.606 140.43372589999998 4.195 159.18423840000003 3.257 102.3094414 3.279 120.40694920000001 3.51 108.03272760000004 3.398 137.88376020000004 3.196 77.75508810000004 2.044 106.53352159999994 3.783 83.25106600000001 2.473 73.33456810000003 3.248 117.68141410000004 4.204 130.90099459999996 3.81 93.27936770000001 3.216 87.09713170000005 3.207 95.04595890000002 4.14 94.51987000000001 3.321 86.46769520000002 4.08 84.83451959999996 4.022 117.03011770000002 3.305 147.354246 4.246 110.9334207 2.857)
Error minima by case: (0.1649 7 4.755 1 15.6028 9 42.0 2 59.2545 2 0.2737 1 14.8718 1 5.2978 2 13.1931 1 1.3909 1 0.0 0 6.1264 2 0.0 0 0.0 0 25.8005 2 33.0508 2 1.0 1 0.3518 1 0.0 0 8.0 1 4.0102 1 0.0 0 3.2695 1 66.0 2 15.3811 1)
Average genome size in population (length): 79.441
Average program size in population (points): 80.441
Average percent parens in population: 0.013
Minimum age in population: 108.1015371518712
Maximum age in population: 113.554013842103
Average age in population: 111.4077296723045
Median age in population: 111.4453316285738
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 7
Genome diversity (% unique Plush genomes):	 0.884
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 7
Syntactic diversity (% unique Push programs):	 0.884
Total error diversity:				 0.095
Error (vector) diversity:			 0.103
Behavioral diversity:				 0.104
--- Run Statistics ---
Number of program evaluations used so far: 79000
Number of point (instruction) evaluations so far: 154862084
--- Timings ---
Current time: 1529615152338 milliseconds
Total Time:         297.2 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       104.8 seconds, 35.3%
Fitness Testing:    150.1 seconds, 50.5%
Report:              42.2 seconds, 14.2%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 78
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 79
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 79
;;******************************
;; -*- Number IO problem report - generation 79
Test total error for best: 59131.0
Test mean error for best: 29.56550
;;------------------------------
Outputs of best individual on training cases:
Correct output: 1.9526623133   | Program output: -32.0473376867
Correct output: -70.8009773522 | Program output: 8.1990226478  
Correct output: -13.7839009431 | Program output: 77.2160990569 
Correct output: 143.8727406396 | Program output: 94.8727406396 
Correct output: 136.4396027174 | Program output: 69.4396027174 
Correct output: 18.5044280613  | Program output: 116.5044280613
Correct output: 92.0568646792  | Program output: 66.0568646792 
Correct output: 71.8873476205  | Program output: 121.8873476205
Correct output: -10.8388749243 | Program output: -46.8388749243
Correct output: 0.9299825981   | Program output: 73.9299825981 
Correct output: -26.7840412284 | Program output: -26.7840412284
Correct output: -102.1264221267 | Program output: -72.1264221267
Correct output: 40.8061668642  | Program output: 48.8061668642 
Correct output: -5.2544966331  | Program output: -11.2544966331
Correct output: 102.9855886244 | Program output: 59.9855886244 
Correct output: -118.0507723766 | Program output: -61.0507723766
Correct output: 55.9371769928  | Program output: 76.9371769928 
Correct output: 4.2657989984   | Program output: 29.2657989984 
Correct output: 96.7057987603  | Program output: 114.7057987603
Correct output: 122.162446611  | Program output: 107.162446611 
Correct output: 30.0102027945  | Program output: 1.0102027945  
Correct output: 104.5822387035 | Program output: 99.5822387035 
Correct output: -1.5538743366  | Program output: -48.5538743366
Correct output: 166.8070496115 | Program output: 93.8070496115 
Correct output: 58.6188945281  | Program output: 98.6188945281 
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction in1} {:instruction integer_max} {:instruction integer_dup_items} {:instruction integer_sub} {:instruction integer_mod} {:instruction integer_div} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_inc} {:instruction float_inc} {:instruction integer_mod} {:instruction float_inc} {:instruction float_div} {:instruction float_inc} {:instruction float_rot} {:instruction float_inc} {:instruction float_inc} {:instruction float_div} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_inc} {:instruction float_div} {:instruction float_inc} {:instruction float_div} {:instruction float_inc} {:instruction float_rot} {:instruction float_inc} {:instruction float_inc} {:instruction float_div} {:instruction float_inc} {:instruction float_yankdup} {:instruction integer_mod} {:instruction integer_div} {:instruction tagged_440} {:instruction integer_dec} {:instruction float_div} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_inc} {:instruction float_yankdup} {:instruction integer_stackdepth} {:instruction float_inc} {:instruction float_mult} {:instruction float_dup_items} {:instruction float_div} {:instruction integer_mod} {:instruction float_inc} {:instruction float_inc} {:instruction float_yankdup} {:instruction integer_mod} {:instruction float_dup_items} {:instruction float_div} {:instruction float_inc} {:instruction integer_dup_items} {:instruction integer_sub} {:instruction print_integer} {:instruction integer_div} {:instruction float_mult} {:instruction float_dup_items} {:instruction float_div} {:instruction float_inc} {:instruction integer_yankdup} {:instruction print_float} {:instruction float_mult} {:instruction integer_swap} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_yank} {:instruction integer_mod} {:instruction float_inc} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_div} {:instruction integer_flush} {:instruction float_yankdup} {:instruction float_mult} {:instruction float_rot} {:instruction float_div} {:instruction float_inc} {:instruction float_dup_times} {:instruction in2} {:instruction print_float} {:instruction tagged_465} {:instruction integer_yank} {:instruction float_inc} {:instruction float_yankdup} {:instruction print_float} {:instruction print_float} {:instruction float_div} {:instruction integer_shove} {:instruction print_float})
Best program: (in1 integer_max integer_dup_items integer_sub integer_mod integer_div float_inc float_yankdup float_inc float_yankdup float_inc float_inc integer_mod float_inc float_div float_inc float_rot float_inc float_inc float_div float_inc float_yankdup float_inc float_yankdup float_inc float_div float_inc float_div float_inc float_rot float_inc float_inc float_div float_inc float_yankdup integer_mod integer_div tagged_440 integer_dec float_div float_inc float_yankdup float_inc float_yankdup float_inc float_yankdup integer_stackdepth float_inc float_mult float_dup_items float_div integer_mod float_inc float_inc float_yankdup integer_mod float_dup_items float_div float_inc integer_dup_items integer_sub print_integer integer_div float_mult float_dup_items float_div float_inc integer_yankdup print_float float_mult integer_swap float_inc float_yankdup float_yank integer_mod float_inc float_inc float_yankdup float_div integer_flush float_yankdup float_mult float_rot float_div float_inc float_dup_times in2 print_float tagged_465 integer_yank float_inc float_yankdup print_float print_float float_div integer_shove print_float)
Errors: [34.0 13 79.0 13 91.0 12 49.0 2 67.0 3 98.0 2 26.0 2 50.0 2 36.0 2 73.0 2 0.0 0 30.0 2 8.0 1 6.0 2 43.0 3 57.0 2 21.0 2 25.0 2 18.0 3 15.0 2 29.0 2 5.0 3 47.0 2 73.0 3 40.0 1]
Total: 1103.0
Mean: 22.06
Genome size: 97
Size: 98
Percent parens: 0.010
--- Population Statistics ---
Average total errors in population: 3074.7584314
Median total errors in population: 1103.0
Error averages by case: (111.54607220000004 12.664 136.91296549999998 12.684 160.90837450000006 12.021 131.50880550000008 3.756 145.91811699999997 4.36 166.70241570000005 3.455 108.18631029999999 3.476 129.17803850000004 3.701 114.23613020000003 3.599 144.58164520000005 3.367 85.01916930000003 2.257 115.73860909999996 3.973 89.02230290000001 2.696 78.48305769999999 3.429 123.23100960000002 4.382 139.53468229999993 4.001 101.21357339999999 3.399 93.61449819999996 3.354 102.73756259999998 4.322 102.2353922 3.519 89.88300119999998 4.157 91.65402540000002 4.196 123.0104753 3.462 153.2349018 4.427 118.78429580000002 3.026)
Error minima by case: (0.0473 7 7.4523 1 12.8193 7 20.8727 2 22.5604 2 0.0546 1 15.0569 1 11.1717 2 7.4524 1 0.3909 1 0.0 0 6.0 2 0.0 0 0.0 0 8.0144 2 29.0508 2 1.0 1 0.2628 1 2.0 1 5.0 1 2.9149 1 0.0 0 0.6117 1 4.193 2 2.0967 1)
Average genome size in population (length): 79.244
Average program size in population (points): 80.244
Average percent parens in population: 0.013
Minimum age in population: 110.4401413665089
Maximum age in population: 114.7838321472596
Average age in population: 112.8158056300324
Median age in population: 112.8682850163527
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 12
Genome diversity (% unique Plush genomes):	 0.878
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 12
Syntactic diversity (% unique Push programs):	 0.878
Total error diversity:				 0.111
Error (vector) diversity:			 0.122
Behavioral diversity:				 0.124
--- Run Statistics ---
Number of program evaluations used so far: 80000
Number of point (instruction) evaluations so far: 156843234
--- Timings ---
Current time: 1529615156118 milliseconds
Total Time:         300.9 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       106.1 seconds, 35.3%
Fitness Testing:    152.0 seconds, 50.5%
Report:              42.7 seconds, 14.2%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 79
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 80
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 80
;;******************************
;; -*- Number IO problem report - generation 80
Test total error for best: 59131.0
Test mean error for best: 29.56550
;;------------------------------
Outputs of best individual on training cases:
Correct output: 1.9526623133   | Program output: -32.0473376867
Correct output: -70.8009773522 | Program output: 8.1990226478  
Correct output: -13.7839009431 | Program output: 77.2160990569 
Correct output: 143.8727406396 | Program output: 94.8727406396 
Correct output: 136.4396027174 | Program output: 69.4396027174 
Correct output: 18.5044280613  | Program output: 116.5044280613
Correct output: 92.0568646792  | Program output: 66.0568646792 
Correct output: 71.8873476205  | Program output: 121.8873476205
Correct output: -10.8388749243 | Program output: -46.8388749243
Correct output: 0.9299825981   | Program output: 73.9299825981 
Correct output: -26.7840412284 | Program output: -26.7840412284
Correct output: -102.1264221267 | Program output: -72.1264221267
Correct output: 40.8061668642  | Program output: 48.8061668642 
Correct output: -5.2544966331  | Program output: -11.2544966331
Correct output: 102.9855886244 | Program output: 59.9855886244 
Correct output: -118.0507723766 | Program output: -61.0507723766
Correct output: 55.9371769928  | Program output: 76.9371769928 
Correct output: 4.2657989984   | Program output: 29.2657989984 
Correct output: 96.7057987603  | Program output: 114.7057987603
Correct output: 122.162446611  | Program output: 107.162446611 
Correct output: 30.0102027945  | Program output: 1.0102027945  
Correct output: 104.5822387035 | Program output: 99.5822387035 
Correct output: -1.5538743366  | Program output: -48.5538743366
Correct output: 166.8070496115 | Program output: 93.8070496115 
Correct output: 58.6188945281  | Program output: 98.6188945281 
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction in1} {:instruction float_max} {:instruction integer_dup_items} {:instruction integer_shove} {:instruction integer_div} {:instruction float_div} {:instruction float_inc} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_dup_items} {:instruction float_inc} {:instruction integer_div} {:instruction float_div} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_dup_items} {:instruction tag_integer_411} {:instruction float_inc} {:instruction float_yankdup} {:instruction integer_rot} {:instruction integer_max} {:instruction integer_dup} {:instruction float_dup_items} {:instruction float_div} {:instruction float_yankdup} {:instruction float_inc} {:instruction float_dup_items} {:instruction integer_dec} {:instruction float_inc} {:instruction integer_max} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_inc} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_div} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_mult} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_inc} {:instruction float_yankdup} {:instruction integer_yankdup} {:instruction float_dup_items} {:instruction float_div} {:instruction float_inc} {:instruction float_mult} {:instruction float_dup_items} {:instruction float_rot} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_inc} {:instruction integer_yankdup} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_inc} {:instruction integer_mod} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_shove} {:instruction float_inc} {:instruction float_yankdup} {:instruction print_float} {:instruction float_flush} {:instruction integer_stackdepth} {:instruction in2} {:instruction float_add} {:instruction integer_dup_times} {:instruction in2} {:instruction float_min} {:instruction float_mod} {:instruction 52} {:instruction integer_fromfloat} {:instruction integer_add} {:instruction integer_shove} {:instruction float_yank} {:instruction in2} {:instruction 52} {:instruction float_shove} {:instruction -44} {:instruction float_pop} {:instruction integer_shove})
Best program: (in1 float_max integer_dup_items integer_shove integer_div float_div float_inc float_inc float_yankdup float_dup_items float_inc integer_div float_div float_inc float_yankdup float_dup_items tag_integer_411 float_inc float_yankdup integer_rot integer_max integer_dup float_dup_items float_div float_yankdup float_inc float_dup_items integer_dec float_inc integer_max float_inc float_yankdup float_inc float_inc float_yankdup float_div float_inc float_yankdup float_inc float_yankdup float_mult float_inc float_yankdup float_inc float_yankdup float_inc float_yankdup integer_yankdup float_dup_items float_div float_inc float_mult float_dup_items float_rot float_inc float_yankdup float_inc integer_yankdup float_inc float_yankdup float_inc integer_mod float_inc float_inc float_inc float_shove float_inc float_yankdup print_float float_flush integer_stackdepth in2 float_add integer_dup_times in2 float_min float_mod 52 integer_fromfloat integer_add integer_shove float_yank in2 52 float_shove -44 float_pop integer_shove)
Errors: [34.0 13 79.0 13 91.0 12 49.0 2 67.0 3 98.0 2 26.0 2 50.0 2 36.0 2 73.0 2 0.0 0 30.0 2 8.0 1 6.0 2 43.0 3 57.0 2 21.0 2 25.0 2 18.0 3 15.0 2 29.0 2 5.0 3 47.0 2 73.0 3 40.0 1]
Total: 1103.0
Mean: 22.06
Genome size: 88
Size: 89
Percent parens: 0.011
--- Population Statistics ---
Average total errors in population: 2604.2240802000006
Median total errors in population: 1103.0
Error averages by case: (91.90069400000003 12.674 121.57651180000002 12.673 143.83347739999994 12.006 112.87484720000003 3.596 127.86017549999997 4.184 148.7113667 3.265 89.30352769999999 3.283 110.67244490000002 3.546 94.59214460000001 3.367 127.21787620000003 3.204 64.6537594 2.042 96.93881510000001 3.781 69.56750369999997 2.51 58.727256200000014 3.214 104.6526802 4.187 121.21476949999993 3.794 82.23944720000003 3.218 74.99021379999999 3.236 82.67125700000004 4.147 82.12233549999999 3.332 72.17890739999999 4.102 72.29294560000001 4.001 103.54733019999996 3.289 135.16150930000003 4.226 100.97028410000001 2.875)
Error minima by case: (0.0198 7 28.7109 1 10.7839 9 20.8727 2 5.5604 2 0.3224 1 15.0569 1 27.0 2 7.8389 1 0.071 1 0.0 0 7.0 2 0.0 0 0.0 0 7.0144 2 12.0508 2 2.0 1 0.4181 1 0.0 0 8.0 1 2.7996 1 0.0 0 1.4461 1 3.193 2 17.0 1)
Average genome size in population (length): 78.553
Average program size in population (points): 79.553
Average percent parens in population: 0.013
Minimum age in population: 111.5225735890559
Maximum age in population: 116.1311510273442
Average age in population: 114.208339657457
Median age in population: 114.2459776573106
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 9
Genome diversity (% unique Plush genomes):	 0.892
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 9
Syntactic diversity (% unique Push programs):	 0.892
Total error diversity:				 0.106
Error (vector) diversity:			 0.116
Behavioral diversity:				 0.117
--- Run Statistics ---
Number of program evaluations used so far: 81000
Number of point (instruction) evaluations so far: 158807059
--- Timings ---
Current time: 1529615159950 milliseconds
Total Time:         304.7 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       107.4 seconds, 35.3%
Fitness Testing:    153.9 seconds, 50.5%
Report:              43.3 seconds, 14.2%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 80
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 81
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 81
;;******************************
;; -*- Number IO problem report - generation 81
Test total error for best: 59131.0
Test mean error for best: 29.56550
;;------------------------------
Outputs of best individual on training cases:
Correct output: 1.9526623133   | Program output: -32.0473376867
Correct output: -70.8009773522 | Program output: 8.1990226478  
Correct output: -13.7839009431 | Program output: 77.2160990569 
Correct output: 143.8727406396 | Program output: 94.8727406396 
Correct output: 136.4396027174 | Program output: 69.4396027174 
Correct output: 18.5044280613  | Program output: 116.5044280613
Correct output: 92.0568646792  | Program output: 66.0568646792 
Correct output: 71.8873476205  | Program output: 121.8873476205
Correct output: -10.8388749243 | Program output: -46.8388749243
Correct output: 0.9299825981   | Program output: 73.9299825981 
Correct output: -26.7840412284 | Program output: -26.7840412284
Correct output: -102.1264221267 | Program output: -72.1264221267
Correct output: 40.8061668642  | Program output: 48.8061668642 
Correct output: -5.2544966331  | Program output: -11.2544966331
Correct output: 102.9855886244 | Program output: 59.9855886244 
Correct output: -118.0507723766 | Program output: -61.0507723766
Correct output: 55.9371769928  | Program output: 76.9371769928 
Correct output: 4.2657989984   | Program output: 29.2657989984 
Correct output: 96.7057987603  | Program output: 114.7057987603
Correct output: 122.162446611  | Program output: 107.162446611 
Correct output: 30.0102027945  | Program output: 1.0102027945  
Correct output: 104.5822387035 | Program output: 99.5822387035 
Correct output: -1.5538743366  | Program output: -48.5538743366
Correct output: 166.8070496115 | Program output: 93.8070496115 
Correct output: 58.6188945281  | Program output: 98.6188945281 
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction in1} {:instruction integer_max} {:instruction integer_dup_items} {:instruction integer_sub} {:instruction integer_mod} {:instruction float_frominteger} {:instruction integer_mod} {:instruction float_yankdup} {:instruction float_inc} {:instruction float_inc} {:instruction integer_mod} {:instruction float_inc} {:instruction integer_add} {:instruction float_inc} {:instruction integer_min} {:instruction float_rot} {:instruction float_inc} {:instruction float_inc} {:instruction float_div} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_inc} {:instruction float_div} {:instruction float_inc} {:instruction float_rot} {:instruction float_inc} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_inc} {:instruction integer_yank} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_inc} {:instruction float_inc} {:instruction float_mult} {:instruction float_div} {:instruction float_inc} {:instruction float_mult} {:instruction float_dup_items} {:instruction float_div} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_inc} {:instruction integer_mod} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_yank} {:instruction float_inc} {:instruction in2} {:instruction print_float} {:instruction tagged_465} {:instruction integer_swap} {:instruction integer_stackdepth} {:instruction float_yankdup} {:instruction print_float} {:instruction float_max} {:instruction float_shove} {:instruction integer_min} {:instruction float_inc} {:instruction integer_dec} {:instruction float_swap} {:instruction float_div} {:instruction float_inc} {:instruction integer_shove} {:instruction float_swap})
Best program: (in1 integer_max integer_dup_items integer_sub integer_mod float_frominteger integer_mod float_yankdup float_inc float_inc integer_mod float_inc integer_add float_inc integer_min float_rot float_inc float_inc float_div float_inc float_yankdup float_inc float_div float_inc float_rot float_inc float_inc float_yankdup float_inc integer_yank float_inc float_yankdup float_inc float_inc float_mult float_div float_inc float_mult float_dup_items float_div float_inc float_yankdup float_inc float_yankdup float_inc float_yankdup float_inc integer_mod float_inc float_inc float_inc float_yank float_inc in2 print_float tagged_465 integer_swap integer_stackdepth float_yankdup print_float float_max float_shove integer_min float_inc integer_dec float_swap float_div float_inc integer_shove float_swap)
Errors: [34.0 13 79.0 13 91.0 12 49.0 2 67.0 3 98.0 2 26.0 2 50.0 2 36.0 2 73.0 2 0.0 0 30.0 2 8.0 1 6.0 2 43.0 3 57.0 2 21.0 2 25.0 2 18.0 3 15.0 2 29.0 2 5.0 3 47.0 2 73.0 3 40.0 1]
Total: 1103.0
Mean: 22.06
Genome size: 70
Size: 71
Percent parens: 0.014
--- Population Statistics ---
Average total errors in population: 2839.4891579
Median total errors in population: 1103.0
Error averages by case: (103.92500030000001 12.773 131.75597610000003 12.719 152.74698009999994 12.039 121.33609410000004 3.446 136.84736970000003 4.065 158.20801219999998 3.082 98.74155360000002 3.14 117.7790729 3.37 106.23387150000002 3.252 136.20535600000002 3.047 75.721854 1.873 103.26424820000001 3.6 79.18416560000001 2.348 73.3989246 3.081 114.18858279999999 4.039 127.70930529999998 3.598 92.3661103 3.071 83.62746430000001 3.051 91.5685556 4.001 90.43489290000001 3.178 85.66198019999999 3.879 80.8853915 3.835 115.55061620000001 3.159 143.44088460000003 4.09 108.30589529999999 2.665)
Error minima by case: (0.4075 8 11.036 1 11.3419 9 26.8727 2 16.5604 2 0.1741 1 16.0 1 19.039 2 7.4524 1 0.4145 1 0.0 0 13.0 2 0.0 0 0.0 0 2.0144 2 23.0508 2 4.0 1 0.7342 1 1.0 1 5.0 1 4.0102 1 0.0 0 1.8925 1 1.807 2 13.5276 1)
Average genome size in population (length): 77.38
Average program size in population (points): 78.38
Average percent parens in population: 0.013
Minimum age in population: 113.2691907775792
Maximum age in population: 117.7227580502558
Average age in population: 115.6085354854141
Median age in population: 115.6081906506667
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 8
Genome diversity (% unique Plush genomes):	 0.864
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 8
Syntactic diversity (% unique Push programs):	 0.864
Total error diversity:				 0.085
Error (vector) diversity:			 0.094
Behavioral diversity:				 0.095
--- Run Statistics ---
Number of program evaluations used so far: 82000
Number of point (instruction) evaluations so far: 160741659
--- Timings ---
Current time: 1529615163585 milliseconds
Total Time:         308.5 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       108.7 seconds, 35.3%
Fitness Testing:    155.8 seconds, 50.5%
Report:              43.9 seconds, 14.2%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 81
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 82
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 82
;;******************************
;; -*- Number IO problem report - generation 82
Test total error for best: 59131.0
Test mean error for best: 29.56550
;;------------------------------
Outputs of best individual on training cases:
Correct output: 1.9526623133   | Program output: -32.0473376867
Correct output: -70.8009773522 | Program output: 8.1990226478  
Correct output: -13.7839009431 | Program output: 77.2160990569 
Correct output: 143.8727406396 | Program output: 94.8727406396 
Correct output: 136.4396027174 | Program output: 69.4396027174 
Correct output: 18.5044280613  | Program output: 116.5044280613
Correct output: 92.0568646792  | Program output: 66.0568646792 
Correct output: 71.8873476205  | Program output: 121.8873476205
Correct output: -10.8388749243 | Program output: -46.8388749243
Correct output: 0.9299825981   | Program output: 73.9299825981 
Correct output: -26.7840412284 | Program output: -26.7840412284
Correct output: -102.1264221267 | Program output: -72.1264221267
Correct output: 40.8061668642  | Program output: 48.8061668642 
Correct output: -5.2544966331  | Program output: -11.2544966331
Correct output: 102.9855886244 | Program output: 59.9855886244 
Correct output: -118.0507723766 | Program output: -61.0507723766
Correct output: 55.9371769928  | Program output: 76.9371769928 
Correct output: 4.2657989984   | Program output: 29.2657989984 
Correct output: 96.7057987603  | Program output: 114.7057987603
Correct output: 122.162446611  | Program output: 107.162446611 
Correct output: 30.0102027945  | Program output: 1.0102027945  
Correct output: 104.5822387035 | Program output: 99.5822387035 
Correct output: -1.5538743366  | Program output: -48.5538743366
Correct output: 166.8070496115 | Program output: 93.8070496115 
Correct output: 58.6188945281  | Program output: 98.6188945281 
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction in1} {:instruction float_max} {:instruction integer_dup_items} {:instruction integer_shove} {:instruction integer_div} {:instruction float_add} {:instruction float_inc} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_dup_items} {:instruction float_inc} {:instruction integer_div} {:instruction float_div} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_dup_items} {:instruction float_div} {:instruction float_inc} {:instruction float_yankdup} {:instruction integer_rot} {:instruction integer_max} {:instruction integer_dup} {:instruction float_dup_items} {:instruction float_div} {:instruction float_yankdup} {:instruction float_inc} {:instruction float_dup_items} {:instruction integer_dec} {:instruction float_inc} {:instruction integer_max} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_inc} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_div} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_mult} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_inc} {:instruction float_yankdup} {:instruction integer_yankdup} {:instruction float_dup_items} {:instruction float_div} {:instruction float_inc} {:instruction float_mult} {:instruction float_dup_items} {:instruction float_rot} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_inc} {:instruction integer_yankdup} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_inc} {:instruction integer_mod} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_shove} {:instruction float_inc} {:instruction float_yankdup} {:instruction print_float} {:instruction float_flush} {:instruction integer_stackdepth} {:instruction in2} {:instruction float_add} {:instruction integer_dup_times} {:instruction in2} {:instruction float_min} {:instruction float_mod} {:instruction 52} {:instruction integer_fromfloat} {:instruction integer_add} {:instruction integer_shove})
Best program: (in1 float_max integer_dup_items integer_shove integer_div float_add float_inc float_inc float_yankdup float_dup_items float_inc integer_div float_div float_inc float_yankdup float_dup_items float_div float_inc float_yankdup integer_rot integer_max integer_dup float_dup_items float_div float_yankdup float_inc float_dup_items integer_dec float_inc integer_max float_inc float_yankdup float_inc float_inc float_yankdup float_div float_inc float_yankdup float_inc float_yankdup float_mult float_inc float_yankdup float_inc float_yankdup float_inc float_yankdup integer_yankdup float_dup_items float_div float_inc float_mult float_dup_items float_rot float_inc float_yankdup float_inc integer_yankdup float_inc float_yankdup float_inc integer_mod float_inc float_inc float_inc float_shove float_inc float_yankdup print_float float_flush integer_stackdepth in2 float_add integer_dup_times in2 float_min float_mod 52 integer_fromfloat integer_add integer_shove)
Errors: [34.0 13 79.0 13 91.0 12 49.0 2 67.0 3 98.0 2 26.0 2 50.0 2 36.0 2 73.0 2 0.0 0 30.0 2 8.0 1 6.0 2 43.0 3 57.0 2 21.0 2 25.0 2 18.0 3 15.0 2 29.0 2 5.0 3 47.0 2 73.0 3 40.0 1]
Total: 1103.0
Mean: 22.06
Genome size: 81
Size: 82
Percent parens: 0.012
--- Population Statistics ---
Average total errors in population: 2741.3224979999995
Median total errors in population: 1103.0
Error averages by case: (98.55633250000002 12.755 126.77254830000007 12.731 148.88359109999996 12.044 117.78632560000003 3.553 133.01810160000005 4.136 153.72950220000004 3.228 94.65407880000001 3.246 114.9399664 3.508 101.05650410000001 3.367 132.29081860000005 3.179 71.34755560000002 1.988 102.03058709999999 3.77 74.85214579999999 2.442 68.03233740000002 3.209 110.1123582 4.16 126.5144469 3.769 87.70942060000003 3.173 79.41256390000001 3.173 87.55082070000003 4.095 86.8755373 3.269 79.5054321 4.011 77.1107795 3.937 110.06370139999994 3.28 140.0768773 4.187 105.41516500000003 2.815)
Error minima by case: (0.4858 8 34.8424 1 13.3419 8 26.4476 1 8.4476 2 0.4347 1 17.0 1 27.0 2 10.5501 1 0.7117 1 0.0 0 7.0 2 1.0 1 0.0 0 32.4476 2 34.0 2 0.0 0 0.1291 1 1.0 1 6.0 1 4.0102 1 0.0 0 0.1075 1 2.4476 2 17.0 1)
Average genome size in population (length): 76.226
Average program size in population (points): 77.226
Average percent parens in population: 0.013
Minimum age in population: 114.3192577493645
Maximum age in population: 119.1000039974988
Average age in population: 117.0445969255886
Median age in population: 117.0873568632682
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 5
Genome diversity (% unique Plush genomes):	 0.865
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 5
Syntactic diversity (% unique Push programs):	 0.865
Total error diversity:				 0.103
Error (vector) diversity:			 0.111
Behavioral diversity:				 0.112
--- Run Statistics ---
Number of program evaluations used so far: 83000
Number of point (instruction) evaluations so far: 162647384
--- Timings ---
Current time: 1529615167313 milliseconds
Total Time:         312.1 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       110.1 seconds, 35.3%
Fitness Testing:    157.6 seconds, 50.5%
Report:              44.3 seconds, 14.2%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 82
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 83
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 83
;;******************************
;; -*- Number IO problem report - generation 83
Test total error for best: 59131.0
Test mean error for best: 29.56550
;;------------------------------
Outputs of best individual on training cases:
Correct output: 1.9526623133   | Program output: -32.0473376867
Correct output: -70.8009773522 | Program output: 8.1990226478  
Correct output: -13.7839009431 | Program output: 77.2160990569 
Correct output: 143.8727406396 | Program output: 94.8727406396 
Correct output: 136.4396027174 | Program output: 69.4396027174 
Correct output: 18.5044280613  | Program output: 116.5044280613
Correct output: 92.0568646792  | Program output: 66.0568646792 
Correct output: 71.8873476205  | Program output: 121.8873476205
Correct output: -10.8388749243 | Program output: -46.8388749243
Correct output: 0.9299825981   | Program output: 73.9299825981 
Correct output: -26.7840412284 | Program output: -26.7840412284
Correct output: -102.1264221267 | Program output: -72.1264221267
Correct output: 40.8061668642  | Program output: 48.8061668642 
Correct output: -5.2544966331  | Program output: -11.2544966331
Correct output: 102.9855886244 | Program output: 59.9855886244 
Correct output: -118.0507723766 | Program output: -61.0507723766
Correct output: 55.9371769928  | Program output: 76.9371769928 
Correct output: 4.2657989984   | Program output: 29.2657989984 
Correct output: 96.7057987603  | Program output: 114.7057987603
Correct output: 122.162446611  | Program output: 107.162446611 
Correct output: 30.0102027945  | Program output: 1.0102027945  
Correct output: 104.5822387035 | Program output: 99.5822387035 
Correct output: -1.5538743366  | Program output: -48.5538743366
Correct output: 166.8070496115 | Program output: 93.8070496115 
Correct output: 58.6188945281  | Program output: 98.6188945281 
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction in1} {:instruction integer_max} {:instruction integer_dup_items} {:instruction integer_dec} {:instruction float_sub} {:instruction float_yankdup} {:instruction float_yankdup} {:instruction integer_sub} {:instruction integer_mod} {:instruction float_sub} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_inc} {:instruction float_div} {:instruction float_inc} {:instruction float_div} {:instruction float_div} {:instruction float_inc} {:instruction float_div} {:instruction float_inc} {:instruction integer_mod} {:instruction float_inc} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_yankdup} {:instruction float_inc} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_div} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_inc} {:instruction integer_yank} {:instruction float_inc} {:instruction float_add} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_mult} {:instruction float_dup_items} {:instruction float_div} {:instruction float_inc} {:instruction float_mult} {:instruction float_dup_items} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_inc} {:instruction float_yankdup} {:instruction integer_stackdepth} {:instruction float_inc} {:instruction float_mult} {:instruction float_dup_items} {:instruction float_div} {:instruction float_yankdup} {:instruction integer_mod} {:instruction float_inc} {:instruction float_inc} {:instruction float_mult} {:instruction integer_max} {:instruction float_div} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_yankdup} {:instruction print_float} {:instruction float_flush} {:instruction float_div} {:instruction float_inc} {:instruction float_sub} {:instruction print_float} {:instruction float_max})
Best program: (in1 integer_max integer_dup_items integer_dec float_sub float_yankdup float_yankdup integer_sub integer_mod float_sub float_inc float_yankdup float_inc float_yankdup float_inc float_div float_inc float_div float_div float_inc float_div float_inc integer_mod float_inc float_inc float_yankdup float_yankdup float_inc float_inc float_yankdup float_div float_inc float_yankdup float_inc float_yankdup float_inc integer_yank float_inc float_add float_inc float_yankdup float_mult float_dup_items float_div float_inc float_mult float_dup_items float_inc float_yankdup float_inc float_yankdup integer_stackdepth float_inc float_mult float_dup_items float_div float_yankdup integer_mod float_inc float_inc float_mult integer_max float_div float_inc float_inc float_inc float_yankdup print_float float_flush float_div float_inc float_sub print_float float_max)
Errors: [34.0 13 79.0 13 91.0 12 49.0 2 67.0 3 98.0 2 26.0 2 50.0 2 36.0 2 73.0 2 0.0 0 30.0 2 8.0 1 6.0 2 43.0 3 57.0 2 21.0 2 25.0 2 18.0 3 15.0 2 29.0 2 5.0 3 47.0 2 73.0 3 40.0 1]
Total: 1103.0
Mean: 22.06
Genome size: 74
Size: 75
Percent parens: 0.013
--- Population Statistics ---
Average total errors in population: 2847.3968526
Median total errors in population: 1103.0
Error averages by case: (102.03120410000007 12.787 134.76015790000002 12.746 154.20865949999998 12.069 120.86498290000006 3.507 136.29436409999997 4.113 159.22843389999997 3.198 98.13085640000001 3.192 119.64023710000001 3.481 104.43004940000002 3.288 137.68895700000004 3.125 74.141773 1.935 105.28008449999996 3.718 78.75344290000002 2.389 72.42123090000003 3.124 113.58624980000003 4.133 129.74187769999997 3.735 91.4805312 3.1 87.0825142 3.142 90.91606329999999 4.055 89.93554550000002 3.223 87.35600410000002 4.048 80.3523309 3.898 113.6076746 3.207 143.05478479999996 4.146 110.2518429 2.798)
Error minima by case: (1.0132 7 55.0 1 9.7839 8 41.0 2 59.0 2 0.4443 1 18.0 1 26.0 2 6.8389 1 0.3073 1 0.0 0 6.0 2 1.0 1 0.0 0 35.0 2 33.0 2 1.0 1 0.3601 1 0.0 0 7.0 1 3.0102 1 0.0 0 2.0855 1 65.0 2 16.0 1)
Average genome size in population (length): 76.62
Average program size in population (points): 77.62
Average percent parens in population: 0.013
Minimum age in population: 115.6510598829112
Maximum age in population: 120.3941459238954
Average age in population: 118.4814833120945
Median age in population: 118.5186226551552
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 6
Genome diversity (% unique Plush genomes):	 0.885
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 6
Syntactic diversity (% unique Push programs):	 0.885
Total error diversity:				 0.094
Error (vector) diversity:			 0.1
Behavioral diversity:				 0.1
--- Run Statistics ---
Number of program evaluations used so far: 84000
Number of point (instruction) evaluations so far: 164562934
--- Timings ---
Current time: 1529615171027 milliseconds
Total Time:         315.9 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       111.4 seconds, 35.3%
Fitness Testing:    159.4 seconds, 50.5%
Report:              44.9 seconds, 14.2%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 83
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 84
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 84
;;******************************
;; -*- Number IO problem report - generation 84
Test total error for best: 59131.0
Test mean error for best: 29.56550
;;------------------------------
Outputs of best individual on training cases:
Correct output: 1.9526623133   | Program output: -32.0473376867
Correct output: -70.8009773522 | Program output: 8.1990226478  
Correct output: -13.7839009431 | Program output: 77.2160990569 
Correct output: 143.8727406396 | Program output: 94.8727406396 
Correct output: 136.4396027174 | Program output: 69.4396027174 
Correct output: 18.5044280613  | Program output: 116.5044280613
Correct output: 92.0568646792  | Program output: 66.0568646792 
Correct output: 71.8873476205  | Program output: 121.8873476205
Correct output: -10.8388749243 | Program output: -46.8388749243
Correct output: 0.9299825981   | Program output: 73.9299825981 
Correct output: -26.7840412284 | Program output: -26.7840412284
Correct output: -102.1264221267 | Program output: -72.1264221267
Correct output: 40.8061668642  | Program output: 48.8061668642 
Correct output: -5.2544966331  | Program output: -11.2544966331
Correct output: 102.9855886244 | Program output: 59.9855886244 
Correct output: -118.0507723766 | Program output: -61.0507723766
Correct output: 55.9371769928  | Program output: 76.9371769928 
Correct output: 4.2657989984   | Program output: 29.2657989984 
Correct output: 96.7057987603  | Program output: 114.7057987603
Correct output: 122.162446611  | Program output: 107.162446611 
Correct output: 30.0102027945  | Program output: 1.0102027945  
Correct output: 104.5822387035 | Program output: 99.5822387035 
Correct output: -1.5538743366  | Program output: -48.5538743366
Correct output: 166.8070496115 | Program output: 93.8070496115 
Correct output: 58.6188945281  | Program output: 98.6188945281 
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction in1} {:instruction integer_max} {:instruction integer_dup_items} {:instruction integer_sub} {:instruction integer_mod} {:instruction integer_div} {:instruction float_inc} {:instruction integer_yank} {:instruction float_inc} {:instruction float_inc} {:instruction integer_dup_items} {:instruction float_div} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_dup_items} {:instruction float_div} {:instruction float_inc} {:instruction float_div} {:instruction float_inc} {:instruction integer_mod} {:instruction float_inc} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_yankdup} {:instruction float_inc} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_div} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_inc} {:instruction integer_yank} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_mult} {:instruction float_dup_items} {:instruction float_div} {:instruction float_inc} {:instruction float_mult} {:instruction float_dup_items} {:instruction float_div} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_inc} {:instruction integer_mod} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_shove} {:instruction float_inc} {:instruction float_yankdup} {:instruction print_float} {:instruction print_integer} {:instruction integer_stackdepth} {:instruction tag_float_856} {:instruction float_add} {:instruction integer_dup_times} {:instruction integer_flush} {:instruction float_dup_items} {:instruction integer_flush} {:instruction float_yankdup} {:instruction float_inc} {:instruction float_yank} {:instruction integer_swap} {:instruction float_yankdup} {:instruction print_float} {:instruction float_dec} {:instruction float_inc} {:instruction integer_dup_items} {:instruction integer_sub} {:instruction integer_mod} {:instruction integer_div} {:instruction float_sub} {:instruction float_div} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_max} {:instruction float_max} {:instruction integer_sub} {:instruction integer_mod} {:instruction integer_div} {:instruction float_div} {:instruction tag_float_856} {:instruction float_add} {:instruction float_cos})
Best program: (in1 integer_max integer_dup_items integer_sub integer_mod integer_div float_inc integer_yank float_inc float_inc integer_dup_items float_div float_inc float_yankdup float_dup_items float_div float_inc float_div float_inc integer_mod float_inc float_inc float_yankdup float_yankdup float_inc float_inc float_yankdup float_div float_inc float_yankdup float_inc float_yankdup float_inc integer_yank float_inc float_yankdup float_inc float_yankdup float_mult float_dup_items float_div float_inc float_mult float_dup_items float_div float_inc float_yankdup float_inc float_yankdup float_inc float_yankdup float_inc integer_mod float_inc float_inc float_inc integer_shove float_inc float_yankdup print_float print_integer integer_stackdepth tag_float_856 float_add integer_dup_times integer_flush float_dup_items integer_flush float_yankdup float_inc float_yank integer_swap float_yankdup print_float float_dec float_inc integer_dup_items integer_sub integer_mod integer_div float_sub float_div float_inc float_yankdup float_max float_max integer_sub integer_mod integer_div float_div tag_float_856 float_add float_cos)
Errors: [34.0 13 79.0 13 91.0 12 49.0 2 67.0 3 98.0 2 26.0 2 50.0 2 36.0 2 73.0 2 0.0 0 30.0 2 8.0 1 6.0 2 43.0 3 57.0 2 21.0 2 25.0 2 18.0 3 15.0 2 29.0 2 5.0 3 47.0 2 73.0 3 40.0 1]
Total: 1103.0
Mean: 22.06
Genome size: 93
Size: 94
Percent parens: 0.011
--- Population Statistics ---
Average total errors in population: 2961.6623090000003
Median total errors in population: 1103.0
Error averages by case: (107.84856340000003 12.753 137.57093830000005 12.771 156.49268589999997 12.054 125.96256900000004 3.628 141.17880730000002 4.234 161.4526233 3.3 103.1914836 3.297 122.31043290000002 3.55 110.68512540000002 3.42 140.11415810000003 3.216 80.0567155 2.109 109.48129099999998 3.851 84.35960350000002 2.517 76.74011360000002 3.279 118.6519708 4.239 133.76820209999994 3.841 96.32378469999999 3.24 92.4514918 3.235 95.79123270000001 4.175 95.23956820000002 3.341 91.19425239999997 4.315 85.64492000000001 4.05 119.4481431 3.323 147.8624582 4.256 112.97017419999999 2.877)
Error minima by case: (0.3712 7 29.0703 1 4.4179 9 39.6877 1 39.116 2 0.455 1 2.0481 1 25.4362 2 6.8389 1 1.8828 1 0.0 0 6.0 2 0.0 0 0.0 0 5.662 2 33.0 2 1.0 1 0.1331 1 0.6178 1 6.0 1 0.8879 1 0.0 0 2.4461 1 16.7326 2 16.0 1)
Average genome size in population (length): 76.274
Average program size in population (points): 77.274
Average percent parens in population: 0.013
Minimum age in population: 117.5054517472512
Maximum age in population: 121.9377748486643
Average age in population: 119.8733689522241
Median age in population: 119.9498818873644
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 8
Genome diversity (% unique Plush genomes):	 0.884
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 8
Syntactic diversity (% unique Push programs):	 0.884
Total error diversity:				 0.093
Error (vector) diversity:			 0.102
Behavioral diversity:				 0.103
--- Run Statistics ---
Number of program evaluations used so far: 85000
Number of point (instruction) evaluations so far: 166469884
--- Timings ---
Current time: 1529615174807 milliseconds
Total Time:         319.6 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       112.8 seconds, 35.3%
Fitness Testing:    161.3 seconds, 50.5%
Report:              45.4 seconds, 14.2%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 84
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 85
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 85
;;******************************
;; -*- Number IO problem report - generation 85
Test total error for best: 59131.0
Test mean error for best: 29.56550
;;------------------------------
Outputs of best individual on training cases:
Correct output: 1.9526623133   | Program output: -32.0473376867
Correct output: -70.8009773522 | Program output: 8.1990226478  
Correct output: -13.7839009431 | Program output: 77.2160990569 
Correct output: 143.8727406396 | Program output: 94.8727406396 
Correct output: 136.4396027174 | Program output: 69.4396027174 
Correct output: 18.5044280613  | Program output: 116.5044280613
Correct output: 92.0568646792  | Program output: 66.0568646792 
Correct output: 71.8873476205  | Program output: 121.8873476205
Correct output: -10.8388749243 | Program output: -46.8388749243
Correct output: 0.9299825981   | Program output: 73.9299825981 
Correct output: -26.7840412284 | Program output: -26.7840412284
Correct output: -102.1264221267 | Program output: -72.1264221267
Correct output: 40.8061668642  | Program output: 48.8061668642 
Correct output: -5.2544966331  | Program output: -11.2544966331
Correct output: 102.9855886244 | Program output: 59.9855886244 
Correct output: -118.0507723766 | Program output: -61.0507723766
Correct output: 55.9371769928  | Program output: 76.9371769928 
Correct output: 4.2657989984   | Program output: 29.2657989984 
Correct output: 96.7057987603  | Program output: 114.7057987603
Correct output: 122.162446611  | Program output: 107.162446611 
Correct output: 30.0102027945  | Program output: 1.0102027945  
Correct output: 104.5822387035 | Program output: 99.5822387035 
Correct output: -1.5538743366  | Program output: -48.5538743366
Correct output: 166.8070496115 | Program output: 93.8070496115 
Correct output: 58.6188945281  | Program output: 98.6188945281 
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction in1} {:instruction integer_max} {:instruction integer_dup_items} {:instruction integer_sub} {:instruction float_sub} {:instruction float_yankdup} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_inc} {:instruction float_inc} {:instruction tag_integer_641} {:instruction float_div} {:instruction float_inc} {:instruction float_inc} {:instruction float_rot} {:instruction float_inc} {:instruction float_inc} {:instruction float_div} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_inc} {:instruction float_div} {:instruction float_inc} {:instruction integer_pop} {:instruction float_inc} {:instruction integer_yankdup} {:instruction float_inc} {:instruction float_inc} {:instruction float_dup_items} {:instruction float_inc} {:instruction float_yankdup} {:instruction integer_mod} {:instruction integer_yank} {:instruction float_mult} {:instruction float_div} {:instruction float_inc} {:instruction float_mult} {:instruction float_dup_items} {:instruction float_div} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_inc} {:instruction integer_swap} {:instruction float_inc} {:instruction integer_mod} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_yank} {:instruction float_inc} {:instruction float_yankdup} {:instruction print_float} {:instruction float_flush} {:instruction float_sin} {:instruction float_mult} {:instruction integer_yank} {:instruction float_div} {:instruction float_yank} {:instruction float_dup_times} {:instruction float_sub} {:instruction print_float} {:instruction float_flush} {:instruction integer_stackdepth} {:instruction tag_float_856} {:instruction float_mult} {:instruction float_dup_items} {:instruction float_div} {:instruction integer_mod} {:instruction integer_div} {:instruction float_mult} {:instruction float_shove})
Best program: (in1 integer_max integer_dup_items integer_sub float_sub float_yankdup float_inc float_yankdup float_inc float_inc tag_integer_641 float_div float_inc float_inc float_rot float_inc float_inc float_div float_inc float_yankdup float_inc float_yankdup float_inc float_div float_inc integer_pop float_inc integer_yankdup float_inc float_inc float_dup_items float_inc float_yankdup integer_mod integer_yank float_mult float_div float_inc float_mult float_dup_items float_div float_inc float_yankdup float_inc float_yankdup float_inc integer_swap float_inc integer_mod float_inc float_inc float_inc float_yank float_inc float_yankdup print_float float_flush float_sin float_mult integer_yank float_div float_yank float_dup_times float_sub print_float float_flush integer_stackdepth tag_float_856 float_mult float_dup_items float_div integer_mod integer_div float_mult float_shove)
Errors: [34.0 13 79.0 13 91.0 12 49.0 2 67.0 3 98.0 2 26.0 2 50.0 2 36.0 2 73.0 2 0.0 0 30.0 2 8.0 1 6.0 2 43.0 3 57.0 2 21.0 2 25.0 2 18.0 3 15.0 2 29.0 2 5.0 3 47.0 2 73.0 3 40.0 1]
Total: 1103.0
Mean: 22.06
Genome size: 75
Size: 76
Percent parens: 0.013
--- Population Statistics ---
Average total errors in population: 2824.0819392999997
Median total errors in population: 1103.0
Error averages by case: (100.68173980000002 12.707 135.716909 12.734 151.6825272000001 12.042 120.54093360000003 3.588 135.84766400000004 4.179 156.74357470000004 3.248 97.5390386 3.242 117.82802279999999 3.526 103.12796140000003 3.352 135.1379367 3.174 73.22374979999998 2.049 103.41663949999999 3.775 78.1909924 2.46 72.29409270000002 3.185 113.00188140000003 4.168 127.88059670000001 3.783 89.90039560000002 3.176 86.4730696 3.186 90.36136890000002 4.122 89.67068110000002 3.309 88.1705549 4.041 79.99290560000001 3.95 112.2224789 3.279 142.8119383 4.222 108.27228610000002 2.855)
Error minima by case: (0.7976 8 11.8234 1 14.3352 8 14.9212 2 58.2738 2 0.3239 1 17.2738 1 25.1127 2 10.0838 1 0.6427 1 0.0 0 6.1264 2 0.0 0 0.0 0 34.2738 2 33.0508 2 1.0 1 0.0282 1 0.0 0 6.2738 1 2.6249 1 0.0 0 2.0129 1 40.4216 2 15.3811 1)
Average genome size in population (length): 75.554
Average program size in population (points): 76.554
Average percent parens in population: 0.013
Minimum age in population: 118.5054517472512
Maximum age in population: 123.4389966558092
Average age in population: 121.2415119098263
Median age in population: 121.3291334443195
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 6
Genome diversity (% unique Plush genomes):	 0.876
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 6
Syntactic diversity (% unique Push programs):	 0.876
Total error diversity:				 0.093
Error (vector) diversity:			 0.1
Behavioral diversity:				 0.1
--- Run Statistics ---
Number of program evaluations used so far: 86000
Number of point (instruction) evaluations so far: 168358734
--- Timings ---
Current time: 1529615178455 milliseconds
Total Time:         323.3 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       114.1 seconds, 35.3%
Fitness Testing:    163.1 seconds, 50.5%
Report:              46.0 seconds, 14.2%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 85
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 86
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 86
;;******************************
;; -*- Number IO problem report - generation 86
Test total error for best: 59131.0
Test mean error for best: 29.56550
;;------------------------------
Outputs of best individual on training cases:
Correct output: 1.9526623133   | Program output: -32.0473376867
Correct output: -70.8009773522 | Program output: 8.1990226478  
Correct output: -13.7839009431 | Program output: 77.2160990569 
Correct output: 143.8727406396 | Program output: 94.8727406396 
Correct output: 136.4396027174 | Program output: 69.4396027174 
Correct output: 18.5044280613  | Program output: 116.5044280613
Correct output: 92.0568646792  | Program output: 66.0568646792 
Correct output: 71.8873476205  | Program output: 121.8873476205
Correct output: -10.8388749243 | Program output: -46.8388749243
Correct output: 0.9299825981   | Program output: 73.9299825981 
Correct output: -26.7840412284 | Program output: -26.7840412284
Correct output: -102.1264221267 | Program output: -72.1264221267
Correct output: 40.8061668642  | Program output: 48.8061668642 
Correct output: -5.2544966331  | Program output: -11.2544966331
Correct output: 102.9855886244 | Program output: 59.9855886244 
Correct output: -118.0507723766 | Program output: -61.0507723766
Correct output: 55.9371769928  | Program output: 76.9371769928 
Correct output: 4.2657989984   | Program output: 29.2657989984 
Correct output: 96.7057987603  | Program output: 114.7057987603
Correct output: 122.162446611  | Program output: 107.162446611 
Correct output: 30.0102027945  | Program output: 1.0102027945  
Correct output: 104.5822387035 | Program output: 99.5822387035 
Correct output: -1.5538743366  | Program output: -48.5538743366
Correct output: 166.8070496115 | Program output: 93.8070496115 
Correct output: 58.6188945281  | Program output: 98.6188945281 
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction in1} {:instruction integer_max} {:instruction integer_dup_items} {:instruction integer_sub} {:instruction float_sub} {:instruction float_yankdup} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_inc} {:instruction float_inc} {:instruction tag_integer_641} {:instruction float_div} {:instruction float_inc} {:instruction float_inc} {:instruction float_rot} {:instruction float_inc} {:instruction float_inc} {:instruction float_div} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_inc} {:instruction float_div} {:instruction float_inc} {:instruction integer_pop} {:instruction float_inc} {:instruction integer_yankdup} {:instruction float_inc} {:instruction float_inc} {:instruction float_dup_items} {:instruction float_inc} {:instruction float_mult} {:instruction float_dup_items} {:instruction float_div} {:instruction float_inc} {:instruction float_mult} {:instruction float_dup_items} {:instruction float_div} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_inc} {:instruction integer_mod} {:instruction integer_max} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_yank} {:instruction float_inc} {:instruction float_yankdup} {:instruction print_float} {:instruction float_swap} {:instruction integer_stackdepth} {:instruction tag_float_856} {:instruction float_inc} {:instruction float_inc} {:instruction float_max} {:instruction float_dup_items} {:instruction float_div} {:instruction float_inc} {:instruction integer_max} {:instruction float_dup_times} {:instruction float_swap} {:instruction integer_yankdup} {:instruction integer_min} {:instruction float_cos} {:instruction float_frominteger} {:instruction float_flush} {:instruction integer_stackdepth} {:instruction tag_float_856} {:instruction float_min} {:instruction tag_float_316} {:instruction in2})
Best program: (in1 integer_max integer_dup_items integer_sub float_sub float_yankdup float_inc float_yankdup float_inc float_inc tag_integer_641 float_div float_inc float_inc float_rot float_inc float_inc float_div float_inc float_yankdup float_inc float_yankdup float_inc float_div float_inc integer_pop float_inc integer_yankdup float_inc float_inc float_dup_items float_inc float_mult float_dup_items float_div float_inc float_mult float_dup_items float_div float_inc float_yankdup float_inc float_yankdup float_inc float_yankdup float_inc integer_mod integer_max float_inc float_inc float_inc float_yank float_inc float_yankdup print_float float_swap integer_stackdepth tag_float_856 float_inc float_inc float_max float_dup_items float_div float_inc integer_max float_dup_times float_swap integer_yankdup integer_min float_cos float_frominteger float_flush integer_stackdepth tag_float_856 float_min tag_float_316 in2)
Errors: [34.0 13 79.0 13 91.0 12 49.0 2 67.0 3 98.0 2 26.0 2 50.0 2 36.0 2 73.0 2 0.0 0 30.0 2 8.0 1 6.0 2 43.0 3 57.0 2 21.0 2 25.0 2 18.0 3 15.0 2 29.0 2 5.0 3 47.0 2 73.0 3 40.0 1]
Total: 1103.0
Mean: 22.06
Genome size: 77
Size: 78
Percent parens: 0.013
--- Population Statistics ---
Average total errors in population: 2744.950508899999
Median total errors in population: 1103.0
Error averages by case: (97.59516330000004 12.715 131.9627336000001 12.756 146.9381088 12.044 118.38111850000007 3.619 133.44996070000002 4.205 151.82326110000002 3.273 95.02640299999999 3.305 113.21881530000002 3.542 100.13538699999998 3.425 130.40116560000007 3.188 70.42615470000001 2.091 99.37180249999997 3.801 75.8418526 2.542 68.59114100000001 3.251 110.44981279999998 4.215 123.81689269999997 3.812 87.97454870000001 3.207 83.98557519999994 3.208 88.11377300000001 4.158 87.51651389999999 3.332 84.54508349999998 4.028 77.8020367 3.996 109.09358469999997 3.321 140.6471852 4.235 103.69943480000002 2.874)
Error minima by case: (0.8423 7 5.0795 1 10.5154 8 21.8727 1 21.5604 2 0.4753 1 16.0 1 27.0 2 10.0838 1 0.2015 1 0.0 0 7.0 2 1.0 1 0.0 0 7.0144 2 28.0508 2 0.9372 1 0.2658 1 1.0 1 5.0 1 0.0851 1 0.0 0 1.2572 1 3.193 2 17.0 1)
Average genome size in population (length): 74.947
Average program size in population (points): 75.947
Average percent parens in population: 0.013
Minimum age in population: 119.5054517472512
Maximum age in population: 124.8127857754379
Average age in population: 122.6801200077322
Median age in population: 122.7159552815007
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 6
Genome diversity (% unique Plush genomes):	 0.879
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 6
Syntactic diversity (% unique Push programs):	 0.879
Total error diversity:				 0.102
Error (vector) diversity:			 0.109
Behavioral diversity:				 0.109
--- Run Statistics ---
Number of program evaluations used so far: 87000
Number of point (instruction) evaluations so far: 170232434
--- Timings ---
Current time: 1529615182110 milliseconds
Total Time:         326.9 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       115.4 seconds, 35.3%
Fitness Testing:    164.9 seconds, 50.4%
Report:              46.5 seconds, 14.2%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 86
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 87
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 87
;;******************************
;; -*- Number IO problem report - generation 87
Test total error for best: 59131.0
Test mean error for best: 29.56550
;;------------------------------
Outputs of best individual on training cases:
Correct output: 1.9526623133   | Program output: -32.0473376867
Correct output: -70.8009773522 | Program output: 8.1990226478  
Correct output: -13.7839009431 | Program output: 77.2160990569 
Correct output: 143.8727406396 | Program output: 94.8727406396 
Correct output: 136.4396027174 | Program output: 69.4396027174 
Correct output: 18.5044280613  | Program output: 116.5044280613
Correct output: 92.0568646792  | Program output: 66.0568646792 
Correct output: 71.8873476205  | Program output: 121.8873476205
Correct output: -10.8388749243 | Program output: -46.8388749243
Correct output: 0.9299825981   | Program output: 73.9299825981 
Correct output: -26.7840412284 | Program output: -26.7840412284
Correct output: -102.1264221267 | Program output: -72.1264221267
Correct output: 40.8061668642  | Program output: 48.8061668642 
Correct output: -5.2544966331  | Program output: -11.2544966331
Correct output: 102.9855886244 | Program output: 59.9855886244 
Correct output: -118.0507723766 | Program output: -61.0507723766
Correct output: 55.9371769928  | Program output: 76.9371769928 
Correct output: 4.2657989984   | Program output: 29.2657989984 
Correct output: 96.7057987603  | Program output: 114.7057987603
Correct output: 122.162446611  | Program output: 107.162446611 
Correct output: 30.0102027945  | Program output: 1.0102027945  
Correct output: 104.5822387035 | Program output: 99.5822387035 
Correct output: -1.5538743366  | Program output: -48.5538743366
Correct output: 166.8070496115 | Program output: 93.8070496115 
Correct output: 58.6188945281  | Program output: 98.6188945281 
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction in1} {:instruction integer_max} {:instruction integer_dup_items} {:instruction integer_sub} {:instruction integer_mod} {:instruction integer_div} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_inc} {:instruction float_inc} {:instruction float_mod} {:instruction float_inc} {:instruction float_div} {:instruction float_inc} {:instruction float_rot} {:instruction float_inc} {:instruction float_inc} {:instruction float_div} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_inc} {:instruction float_div} {:instruction float_inc} {:instruction float_div} {:instruction float_inc} {:instruction float_rot} {:instruction float_inc} {:instruction float_inc} {:instruction float_div} {:instruction float_inc} {:instruction float_yankdup} {:instruction integer_mod} {:instruction integer_div} {:instruction tagged_440} {:instruction integer_dec} {:instruction float_div} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_inc} {:instruction float_yankdup} {:instruction integer_stackdepth} {:instruction float_inc} {:instruction float_mult} {:instruction float_dup_items} {:instruction float_div} {:instruction integer_mod} {:instruction float_inc} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_mult} {:instruction float_dup_items} {:instruction float_div} {:instruction float_inc} {:instruction integer_dup_items} {:instruction integer_sub} {:instruction print_integer} {:instruction float_frominteger} {:instruction float_mult} {:instruction float_dup_items} {:instruction float_div} {:instruction float_inc} {:instruction integer_yankdup} {:instruction print_float} {:instruction float_mult} {:instruction integer_swap} {:instruction float_inc} {:instruction float_stackdepth} {:instruction integer_div} {:instruction float_mult} {:instruction integer_stackdepth} {:instruction tag_float_775} {:instruction float_add} {:instruction integer_dup_times} {:instruction in2} {:instruction integer_yankdup} {:instruction float_tan} {:instruction float_cos} {:instruction float_stackdepth} {:instruction integer_stackdepth} {:instruction integer_dup} {:instruction float_rot} {:instruction integer_dup_times} {:instruction print_float} {:instruction print_float} {:instruction integer_pop} {:instruction float_swap} {:instruction in2} {:instruction 52} {:instruction float_shove} {:instruction float_stackdepth} {:instruction float_sin} {:instruction float_flush} {:instruction integer_mult})
Best program: (in1 integer_max integer_dup_items integer_sub integer_mod integer_div float_inc float_yankdup float_inc float_yankdup float_inc float_inc float_mod float_inc float_div float_inc float_rot float_inc float_inc float_div float_inc float_yankdup float_inc float_yankdup float_inc float_div float_inc float_div float_inc float_rot float_inc float_inc float_div float_inc float_yankdup integer_mod integer_div tagged_440 integer_dec float_div float_inc float_yankdup float_inc float_yankdup float_inc float_yankdup integer_stackdepth float_inc float_mult float_dup_items float_div integer_mod float_inc float_inc float_yankdup float_mult float_dup_items float_div float_inc integer_dup_items integer_sub print_integer float_frominteger float_mult float_dup_items float_div float_inc integer_yankdup print_float float_mult integer_swap float_inc float_stackdepth integer_div float_mult integer_stackdepth tag_float_775 float_add integer_dup_times in2 integer_yankdup float_tan float_cos float_stackdepth integer_stackdepth integer_dup float_rot integer_dup_times print_float print_float integer_pop float_swap in2 52 float_shove float_stackdepth float_sin float_flush integer_mult)
Errors: [34.0 13 79.0 13 91.0 12 49.0 2 67.0 3 98.0 2 26.0 2 50.0 2 36.0 2 73.0 2 0.0 0 30.0 2 8.0 1 6.0 2 43.0 3 57.0 2 21.0 2 25.0 2 18.0 3 15.0 2 29.0 2 5.0 3 47.0 2 73.0 3 40.0 1]
Total: 1103.0
Mean: 22.06
Genome size: 99
Size: 100
Percent parens: 0.010
--- Population Statistics ---
Average total errors in population: 2537.2393503999997
Median total errors in population: 1103.0
Error averages by case: (89.5639558 12.71 125.31839139999998 12.721 139.36935459999998 12.004 109.03752700000003 3.482 123.91375690000004 4.066 145.61154220000003 3.135 85.2655402 3.169 106.4713705 3.407 92.28969730000001 3.278 122.64444580000001 3.074 61.96690980000002 1.919 92.594365 3.659 65.9799874 2.363 61.09428630000001 3.098 100.7210401 4.083 116.99298359999997 3.696 78.5440495 3.091 75.91290760000003 3.099 79.95224580000001 4.017 78.88464090000002 3.201 77.46259409999999 3.936 68.17407340000001 3.844 101.43823099999997 3.16 131.29365140000002 4.102 95.70680280000002 2.721)
Error minima by case: (0.9664 8 15.801 2 1.5886 9 21.8727 1 21.5604 2 0.2737 1 16.0 1 18.0037 2 1.3565 1 0.1309 1 0.0 0 6.0 2 0.0 0 0.0 0 7.0144 2 28.0508 2 1.0 1 0.2746 1 3.0 1 5.0 1 4.0102 1 0.0 0 1.0953 1 3.193 2 16.0 1)
Average genome size in population (length): 74.653
Average program size in population (points): 75.653
Average percent parens in population: 0.013
Minimum age in population: 120.5054517472512
Maximum age in population: 126.0716024064321
Average age in population: 124.0895301729082
Median age in population: 124.1487843658897
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 7
Genome diversity (% unique Plush genomes):	 0.861
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 7
Syntactic diversity (% unique Push programs):	 0.861
Total error diversity:				 0.095
Error (vector) diversity:			 0.104
Behavioral diversity:				 0.105
--- Run Statistics ---
Number of program evaluations used so far: 88000
Number of point (instruction) evaluations so far: 172098809
--- Timings ---
Current time: 1529615185825 milliseconds
Total Time:         330.6 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       116.7 seconds, 35.3%
Fitness Testing:    166.7 seconds, 50.4%
Report:              47.0 seconds, 14.2%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 87
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 88
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 88
;;******************************
;; -*- Number IO problem report - generation 88
Test total error for best: 59131.0
Test mean error for best: 29.56550
;;------------------------------
Outputs of best individual on training cases:
Correct output: 1.9526623133   | Program output: -32.0473376867
Correct output: -70.8009773522 | Program output: 8.1990226478  
Correct output: -13.7839009431 | Program output: 77.2160990569 
Correct output: 143.8727406396 | Program output: 94.8727406396 
Correct output: 136.4396027174 | Program output: 69.4396027174 
Correct output: 18.5044280613  | Program output: 116.5044280613
Correct output: 92.0568646792  | Program output: 66.0568646792 
Correct output: 71.8873476205  | Program output: 121.8873476205
Correct output: -10.8388749243 | Program output: -46.8388749243
Correct output: 0.9299825981   | Program output: 73.9299825981 
Correct output: -26.7840412284 | Program output: -26.7840412284
Correct output: -102.1264221267 | Program output: -72.1264221267
Correct output: 40.8061668642  | Program output: 48.8061668642 
Correct output: -5.2544966331  | Program output: -11.2544966331
Correct output: 102.9855886244 | Program output: 59.9855886244 
Correct output: -118.0507723766 | Program output: -61.0507723766
Correct output: 55.9371769928  | Program output: 76.9371769928 
Correct output: 4.2657989984   | Program output: 29.2657989984 
Correct output: 96.7057987603  | Program output: 114.7057987603
Correct output: 122.162446611  | Program output: 107.162446611 
Correct output: 30.0102027945  | Program output: 1.0102027945  
Correct output: 104.5822387035 | Program output: 99.5822387035 
Correct output: -1.5538743366  | Program output: -48.5538743366
Correct output: 166.8070496115 | Program output: 93.8070496115 
Correct output: 58.6188945281  | Program output: 98.6188945281 
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction in1} {:instruction float_div} {:instruction float_shove} {:instruction integer_sub} {:instruction integer_mod} {:instruction integer_div} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_div} {:instruction float_inc} {:instruction float_rot} {:instruction float_inc} {:instruction float_inc} {:instruction float_frominteger} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_inc} {:instruction float_div} {:instruction float_inc} {:instruction float_swap} {:instruction float_inc} {:instruction float_rot} {:instruction float_inc} {:instruction float_inc} {:instruction integer_rot} {:instruction float_inc} {:instruction float_yankdup} {:instruction integer_mod} {:instruction integer_rot} {:instruction float_inc} {:instruction float_rot} {:instruction float_inc} {:instruction integer_pop} {:instruction integer_mod} {:instruction float_mult} {:instruction float_dup_items} {:instruction float_div} {:instruction float_inc} {:instruction float_mult} {:instruction float_inc} {:instruction float_div} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_inc} {:instruction integer_mod} {:instruction float_inc} {:instruction float_inc} {:instruction float_max} {:instruction float_yank} {:instruction float_inc} {:instruction float_yankdup} {:instruction print_float} {:instruction float_yankdup} {:instruction integer_rot} {:instruction float_dup_items} {:instruction float_div} {:instruction float_inc} {:instruction integer_dup_items} {:instruction integer_sub} {:instruction integer_mod} {:instruction integer_shove} {:instruction float_yank} {:instruction float_inc} {:instruction float_yankdup} {:instruction print_float} {:instruction float_flush} {:instruction integer_stackdepth})
Best program: (in1 float_div float_shove integer_sub integer_mod integer_div float_inc float_yankdup float_inc float_yankdup float_div float_inc float_rot float_inc float_inc float_frominteger float_inc float_yankdup float_inc float_yankdup float_inc float_div float_inc float_swap float_inc float_rot float_inc float_inc integer_rot float_inc float_yankdup integer_mod integer_rot float_inc float_rot float_inc integer_pop integer_mod float_mult float_dup_items float_div float_inc float_mult float_inc float_div float_inc float_yankdup float_inc float_yankdup float_inc float_yankdup float_inc integer_mod float_inc float_inc float_max float_yank float_inc float_yankdup print_float float_yankdup integer_rot float_dup_items float_div float_inc integer_dup_items integer_sub integer_mod integer_shove float_yank float_inc float_yankdup print_float float_flush integer_stackdepth)
Errors: [34.0 13 79.0 13 91.0 12 49.0 2 67.0 3 98.0 2 26.0 2 50.0 2 36.0 2 73.0 2 0.0 0 30.0 2 8.0 1 6.0 2 43.0 3 57.0 2 21.0 2 25.0 2 18.0 3 15.0 2 29.0 2 5.0 3 47.0 2 73.0 3 40.0 1]
Total: 1103.0
Mean: 22.06
Genome size: 75
Size: 76
Percent parens: 0.013
--- Population Statistics ---
Average total errors in population: 2781.5851443
Median total errors in population: 1103.0
Error averages by case: (99.5340648 12.76 136.35142240000005 12.764 149.15822900000003 12.074 118.26572380000005 3.531 133.38174740000005 4.129 154.46809749999994 3.181 94.9240245 3.206 114.851378 3.468 102.46949910000002 3.311 132.54079420000002 3.114 71.78180859999999 1.959 101.23006649999998 3.706 75.84213610000003 2.42 73.3305557 3.131 110.49576549999999 4.122 125.66101410000002 3.739 88.44544409999999 3.127 86.3531101 3.134 88.126083 4.062 87.24479010000002 3.241 90.06407960000003 3.944 77.53825609999998 3.886 111.3895301 3.205 140.567595 4.168 105.38692900000001 2.801)
Error minima by case: (0.4207 8 12.4533 1 2.1798 9 40.0 1 58.0 2 0.3889 1 17.0 1 16.5467 2 0.7329 1 0.5536 1 0.0 0 6.0 2 0.0 0 0.0 0 34.0 2 9.5467 2 1.0 1 0.2283 1 1.0 1 6.0 1 4.148 1 0.0 0 1.9707 1 64.0 2 16.0 1)
Average genome size in population (length): 73.84
Average program size in population (points): 74.84
Average percent parens in population: 0.014
Minimum age in population: 123.1053488534806
Maximum age in population: 127.3951712711429
Average age in population: 125.5006417971552
Median age in population: 125.5602354082339
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 7
Genome diversity (% unique Plush genomes):	 0.87
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 7
Syntactic diversity (% unique Push programs):	 0.87
Total error diversity:				 0.086
Error (vector) diversity:			 0.095
Behavioral diversity:				 0.096
--- Run Statistics ---
Number of program evaluations used so far: 89000
Number of point (instruction) evaluations so far: 173944809
--- Timings ---
Current time: 1529615189481 milliseconds
Total Time:         334.3 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       118.0 seconds, 35.3%
Fitness Testing:    168.6 seconds, 50.4%
Report:              47.6 seconds, 14.3%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 88
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 89
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 89
;;******************************
;; -*- Number IO problem report - generation 89
Test total error for best: 59131.0
Test mean error for best: 29.56550
;;------------------------------
Outputs of best individual on training cases:
Correct output: 1.9526623133   | Program output: -32.0473376867
Correct output: -70.8009773522 | Program output: 8.1990226478  
Correct output: -13.7839009431 | Program output: 77.2160990569 
Correct output: 143.8727406396 | Program output: 94.8727406396 
Correct output: 136.4396027174 | Program output: 69.4396027174 
Correct output: 18.5044280613  | Program output: 116.5044280613
Correct output: 92.0568646792  | Program output: 66.0568646792 
Correct output: 71.8873476205  | Program output: 121.8873476205
Correct output: -10.8388749243 | Program output: -46.8388749243
Correct output: 0.9299825981   | Program output: 73.9299825981 
Correct output: -26.7840412284 | Program output: -26.7840412284
Correct output: -102.1264221267 | Program output: -72.1264221267
Correct output: 40.8061668642  | Program output: 48.8061668642 
Correct output: -5.2544966331  | Program output: -11.2544966331
Correct output: 102.9855886244 | Program output: 59.9855886244 
Correct output: -118.0507723766 | Program output: -61.0507723766
Correct output: 55.9371769928  | Program output: 76.9371769928 
Correct output: 4.2657989984   | Program output: 29.2657989984 
Correct output: 96.7057987603  | Program output: 114.7057987603
Correct output: 122.162446611  | Program output: 107.162446611 
Correct output: 30.0102027945  | Program output: 1.0102027945  
Correct output: 104.5822387035 | Program output: 99.5822387035 
Correct output: -1.5538743366  | Program output: -48.5538743366
Correct output: 166.8070496115 | Program output: 93.8070496115 
Correct output: 58.6188945281  | Program output: 98.6188945281 
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction in1} {:instruction integer_dup_items} {:instruction integer_sub} {:instruction integer_mod} {:instruction integer_div} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_inc} {:instruction float_inc} {:instruction integer_mod} {:instruction float_inc} {:instruction integer_dup_items} {:instruction float_inc} {:instruction float_rot} {:instruction float_inc} {:instruction float_inc} {:instruction float_rot} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_inc} {:instruction integer_dup} {:instruction float_inc} {:instruction float_shove} {:instruction float_inc} {:instruction integer_dup} {:instruction float_inc} {:instruction integer_swap} {:instruction float_inc} {:instruction float_inc} {:instruction integer_shove} {:instruction float_inc} {:instruction float_yankdup} {:instruction integer_mod} {:instruction integer_div} {:instruction float_mult} {:instruction float_dup_items} {:instruction float_div} {:instruction float_div} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_inc} {:instruction integer_mult} {:instruction integer_stackdepth} {:instruction float_inc} {:instruction float_mult} {:instruction float_dup_items} {:instruction float_div} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_dup_items} {:instruction float_inc} {:instruction float_inc} {:instruction float_mult} {:instruction integer_max} {:instruction float_div} {:instruction float_inc} {:instruction float_inc} {:instruction float_swap} {:instruction float_inc} {:instruction float_yankdup} {:instruction print_float} {:instruction float_flush} {:instruction integer_stackdepth} {:instruction tag_float_856} {:instruction float_add} {:instruction integer_dup_times} {:instruction in2} {:instruction float_min} {:instruction float_dup_times} {:instruction integer_pop} {:instruction 52} {:instruction float_shove} {:instruction integer_pop} {:instruction float_sin} {:instruction integer_dec})
Best program: (in1 integer_dup_items integer_sub integer_mod integer_div float_inc float_yankdup float_inc float_inc integer_mod float_inc integer_dup_items float_inc float_rot float_inc float_inc float_rot float_inc float_yankdup float_inc integer_dup float_inc float_shove float_inc integer_dup float_inc integer_swap float_inc float_inc integer_shove float_inc float_yankdup integer_mod integer_div float_mult float_dup_items float_div float_div float_inc float_yankdup float_inc integer_mult integer_stackdepth float_inc float_mult float_dup_items float_div float_inc float_yankdup float_dup_items float_inc float_inc float_mult integer_max float_div float_inc float_inc float_swap float_inc float_yankdup print_float float_flush integer_stackdepth tag_float_856 float_add integer_dup_times in2 float_min float_dup_times integer_pop 52 float_shove integer_pop float_sin integer_dec)
Errors: [34.0 13 79.0 13 91.0 12 49.0 2 67.0 3 98.0 2 26.0 2 50.0 2 36.0 2 73.0 2 0.0 0 30.0 2 8.0 1 6.0 2 43.0 3 57.0 2 21.0 2 25.0 2 18.0 3 15.0 2 29.0 2 5.0 3 47.0 2 73.0 3 40.0 1]
Total: 1103.0
Mean: 22.06
Genome size: 75
Size: 76
Percent parens: 0.013
--- Population Statistics ---
Average total errors in population: 2584.9279129999995
Median total errors in population: 1103.0
Error averages by case: (92.00247990000003 12.794 126.23924150000006 12.747 141.4709538 12.076 111.19117040000005 3.431 126.58657309999995 4.045 146.45256710000004 3.143 87.84720789999996 3.127 107.1337685 3.372 94.50004169999998 3.263 124.74848590000003 3.06 64.27796749999999 1.848 94.04169869999996 3.614 68.0135644 2.313 64.31829990000001 3.125 103.4656816 4.057 118.72563959999994 3.641 80.6654136 3.052 76.73097979999997 3.091 80.45342670000002 4.011 79.93285860000002 3.165 80.46596710000001 3.98 70.10548959999998 3.886 103.6044546 3.164 133.67950739999998 4.09 97.53047410000005 2.649)
Error minima by case: (0.8137 8 13.557 1 14.4058 8 41.0 2 59.0 2 0.4069 1 18.0 1 26.0 2 10.9706 1 0.2436 1 0.0 0 6.0 2 0.0 0 0.0 0 35.0 2 33.0 2 1.0 1 0.132 1 1.0 1 7.0 1 0.0964 1 0.0 0 2.2069 1 65.0 2 16.0 1)
Average genome size in population (length): 73.345
Average program size in population (points): 74.345
Average percent parens in population: 0.014
Minimum age in population: 124.7499055267063
Maximum age in population: 128.8863338749012
Average age in population: 126.9229177248097
Median age in population: 126.9478168762149
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 7
Genome diversity (% unique Plush genomes):	 0.848
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 7
Syntactic diversity (% unique Push programs):	 0.848
Total error diversity:				 0.091
Error (vector) diversity:			 0.101
Behavioral diversity:				 0.103
--- Run Statistics ---
Number of program evaluations used so far: 90000
Number of point (instruction) evaluations so far: 175778459
--- Timings ---
Current time: 1529615193094 milliseconds
Total Time:         337.9 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       119.3 seconds, 35.3%
Fitness Testing:    170.3 seconds, 50.4%
Report:              48.2 seconds, 14.3%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 89
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 90
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 90
;;******************************
;; -*- Number IO problem report - generation 90
Test total error for best: 59131.0
Test mean error for best: 29.56550
;;------------------------------
Outputs of best individual on training cases:
Correct output: 1.9526623133   | Program output: -32.0473376867
Correct output: -70.8009773522 | Program output: 8.1990226478  
Correct output: -13.7839009431 | Program output: 77.2160990569 
Correct output: 143.8727406396 | Program output: 94.8727406396 
Correct output: 136.4396027174 | Program output: 69.4396027174 
Correct output: 18.5044280613  | Program output: 116.5044280613
Correct output: 92.0568646792  | Program output: 66.0568646792 
Correct output: 71.8873476205  | Program output: 121.8873476205
Correct output: -10.8388749243 | Program output: -46.8388749243
Correct output: 0.9299825981   | Program output: 73.9299825981 
Correct output: -26.7840412284 | Program output: -26.7840412284
Correct output: -102.1264221267 | Program output: -72.1264221267
Correct output: 40.8061668642  | Program output: 48.8061668642 
Correct output: -5.2544966331  | Program output: -11.2544966331
Correct output: 102.9855886244 | Program output: 59.9855886244 
Correct output: -118.0507723766 | Program output: -61.0507723766
Correct output: 55.9371769928  | Program output: 76.9371769928 
Correct output: 4.2657989984   | Program output: 29.2657989984 
Correct output: 96.7057987603  | Program output: 114.7057987603
Correct output: 122.162446611  | Program output: 107.162446611 
Correct output: 30.0102027945  | Program output: 1.0102027945  
Correct output: 104.5822387035 | Program output: 99.5822387035 
Correct output: -1.5538743366  | Program output: -48.5538743366
Correct output: 166.8070496115 | Program output: 93.8070496115 
Correct output: 58.6188945281  | Program output: 98.6188945281 
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction in1} {:instruction integer_max} {:instruction integer_dup_items} {:instruction integer_sub} {:instruction float_sub} {:instruction float_mod} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_inc} {:instruction float_inc} {:instruction tagged_557} {:instruction float_div} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_dup_items} {:instruction float_div} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_div} {:instruction float_inc} {:instruction float_rot} {:instruction float_inc} {:instruction float_inc} {:instruction float_div} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_inc} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_div} {:instruction float_inc} {:instruction integer_div} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_inc} {:instruction integer_mod} {:instruction float_inc} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_div} {:instruction integer_flush} {:instruction float_yankdup} {:instruction float_mult} {:instruction float_yankdup} {:instruction float_yankdup} {:instruction float_inc} {:instruction integer_mod} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_yank} {:instruction float_inc} {:instruction float_yankdup} {:instruction print_float} {:instruction float_flush} {:instruction integer_mult} {:instruction tag_float_780} {:instruction float_add} {:instruction integer_dup_times} {:instruction float_flush} {:instruction float_min} {:instruction float_dup_items} {:instruction integer_dup} {:instruction float_yankdup} {:instruction float_rot} {:instruction float_dup_times} {:instruction float_yank} {:instruction float_inc} {:instruction float_yankdup} {:instruction print_float})
Best program: (in1 integer_max integer_dup_items integer_sub float_sub float_mod float_inc float_yankdup float_inc float_inc tagged_557 float_div float_inc float_yankdup float_dup_items float_div float_inc float_yankdup float_div float_inc float_rot float_inc float_inc float_div float_inc float_yankdup float_inc float_yankdup float_inc float_inc float_yankdup float_div float_inc integer_div float_inc float_yankdup float_inc float_yankdup float_inc float_yankdup float_inc integer_mod float_inc float_inc float_yankdup float_div integer_flush float_yankdup float_mult float_yankdup float_yankdup float_inc integer_mod float_inc float_inc float_inc float_yank float_inc float_yankdup print_float float_flush integer_mult tag_float_780 float_add integer_dup_times float_flush float_min float_dup_items integer_dup float_yankdup float_rot float_dup_times float_yank float_inc float_yankdup print_float)
Errors: [34.0 13 79.0 13 91.0 12 49.0 2 67.0 3 98.0 2 26.0 2 50.0 2 36.0 2 73.0 2 0.0 0 30.0 2 8.0 1 6.0 2 43.0 3 57.0 2 21.0 2 25.0 2 18.0 3 15.0 2 29.0 2 5.0 3 47.0 2 73.0 3 40.0 1]
Total: 1103.0
Mean: 22.06
Genome size: 76
Size: 77
Percent parens: 0.013
--- Population Statistics ---
Average total errors in population: 2874.7946552000003
Median total errors in population: 1103.0
Error averages by case: (103.00190160000002 12.673 134.74846520000003 12.768 153.0149431000001 12.016 123.26896320000006 3.666 138.108787 4.241 158.2831267 3.304 99.99660279999998 3.332 119.71251070000001 3.583 105.62578790000005 3.417 136.50555390000008 3.215 75.78284930000001 2.112 105.4871376 3.861 80.73421210000002 2.509 73.48031250000003 3.277 115.24790570000002 4.237 129.57124269999994 3.858 93.15482699999998 3.246 86.8574989 3.231 93.44240579999997 4.172 92.76917400000005 3.356 88.1927211 4.23 83.04394000000002 4.029 114.63555430000001 3.303 145.3052497 4.288 109.99798240000003 2.901)
Error minima by case: (0.2939 7 55.0 2 13.5393 9 21.8727 1 6.5604 2 0.3808 1 16.0 1 1.0363 2 0.5515 1 0.1323 1 0.0 0 6.0 2 0.0 0 0.0 0 1.9856 2 13.0508 2 1.0 1 0.0969 1 1.2942 1 5.0 1 5.0102 1 0.0 0 1.4135 1 3.193 2 2.6644 1)
Average genome size in population (length): 73.034
Average program size in population (points): 74.034
Average percent parens in population: 0.014
Minimum age in population: 125.8402444067205
Maximum age in population: 130.406182148468
Average age in population: 128.3274348694252
Median age in population: 128.3697453671211
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 6
Genome diversity (% unique Plush genomes):	 0.873
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 6
Syntactic diversity (% unique Push programs):	 0.873
Total error diversity:				 0.095
Error (vector) diversity:			 0.104
Behavioral diversity:				 0.104
--- Run Statistics ---
Number of program evaluations used so far: 91000
Number of point (instruction) evaluations so far: 177604309
--- Timings ---
Current time: 1529615196686 milliseconds
Total Time:         341.5 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       120.6 seconds, 35.3%
Fitness Testing:    172.1 seconds, 50.4%
Report:              48.7 seconds, 14.3%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 90
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 91
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 91
;;******************************
;; -*- Number IO problem report - generation 91
Test total error for best: 59131.0
Test mean error for best: 29.56550
;;------------------------------
Outputs of best individual on training cases:
Correct output: 1.9526623133   | Program output: -32.0473376867
Correct output: -70.8009773522 | Program output: 8.1990226478  
Correct output: -13.7839009431 | Program output: 77.2160990569 
Correct output: 143.8727406396 | Program output: 94.8727406396 
Correct output: 136.4396027174 | Program output: 69.4396027174 
Correct output: 18.5044280613  | Program output: 116.5044280613
Correct output: 92.0568646792  | Program output: 66.0568646792 
Correct output: 71.8873476205  | Program output: 121.8873476205
Correct output: -10.8388749243 | Program output: -46.8388749243
Correct output: 0.9299825981   | Program output: 73.9299825981 
Correct output: -26.7840412284 | Program output: -26.7840412284
Correct output: -102.1264221267 | Program output: -72.1264221267
Correct output: 40.8061668642  | Program output: 48.8061668642 
Correct output: -5.2544966331  | Program output: -11.2544966331
Correct output: 102.9855886244 | Program output: 59.9855886244 
Correct output: -118.0507723766 | Program output: -61.0507723766
Correct output: 55.9371769928  | Program output: 76.9371769928 
Correct output: 4.2657989984   | Program output: 29.2657989984 
Correct output: 96.7057987603  | Program output: 114.7057987603
Correct output: 122.162446611  | Program output: 107.162446611 
Correct output: 30.0102027945  | Program output: 1.0102027945  
Correct output: 104.5822387035 | Program output: 99.5822387035 
Correct output: -1.5538743366  | Program output: -48.5538743366
Correct output: 166.8070496115 | Program output: 93.8070496115 
Correct output: 58.6188945281  | Program output: 98.6188945281 
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction in1} {:instruction integer_max} {:instruction integer_dup_items} {:instruction integer_sub} {:instruction float_mult} {:instruction integer_div} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_rot} {:instruction float_inc} {:instruction integer_mod} {:instruction float_inc} {:instruction float_div} {:instruction float_inc} {:instruction float_rot} {:instruction float_inc} {:instruction float_inc} {:instruction float_div} {:instruction float_inc} {:instruction float_frominteger} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_inc} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_div} {:instruction float_inc} {:instruction integer_div} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_inc} {:instruction integer_mod} {:instruction float_inc} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_div} {:instruction integer_flush} {:instruction float_yankdup} {:instruction float_mult} {:instruction float_shove} {:instruction float_yankdup} {:instruction float_inc} {:instruction float_mod} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_yank} {:instruction float_inc} {:instruction float_yankdup} {:instruction print_float} {:instruction float_flush} {:instruction integer_stackdepth} {:instruction tag_float_856} {:instruction float_add} {:instruction integer_dup_times} {:instruction float_min} {:instruction float_min} {:instruction integer_min} {:instruction float_div} {:instruction float_inc} {:instruction float_sub} {:instruction print_float} {:instruction integer_dec})
Best program: (in1 integer_max integer_dup_items integer_sub float_mult integer_div float_inc float_yankdup float_inc float_yankdup float_inc float_yankdup float_rot float_inc integer_mod float_inc float_div float_inc float_rot float_inc float_inc float_div float_inc float_frominteger float_inc float_yankdup float_inc float_inc float_yankdup float_div float_inc integer_div float_inc float_yankdup float_inc float_yankdup float_inc float_yankdup float_inc integer_mod float_inc float_inc float_yankdup float_div integer_flush float_yankdup float_mult float_shove float_yankdup float_inc float_mod float_inc float_inc float_inc float_yank float_inc float_yankdup print_float float_flush integer_stackdepth tag_float_856 float_add integer_dup_times float_min float_min integer_min float_div float_inc float_sub print_float integer_dec)
Errors: [34.0 13 79.0 13 91.0 12 49.0 2 67.0 3 98.0 2 26.0 2 50.0 2 36.0 2 73.0 2 0.0 0 30.0 2 8.0 1 6.0 2 43.0 3 57.0 2 21.0 2 25.0 2 18.0 3 15.0 2 29.0 2 5.0 3 47.0 2 73.0 3 40.0 1]
Total: 1103.0
Mean: 22.06
Genome size: 71
Size: 72
Percent parens: 0.014
--- Population Statistics ---
Average total errors in population: 2553.1877253000002
Median total errors in population: 1103.0
Error averages by case: (89.15921849999998 12.72 127.70156950000009 12.767 142.77531319999994 12.005 109.00108810000006 3.416 124.46307129999998 4.019 148.0537066 3.096 85.7128273 3.109 108.29231320000002 3.368 91.62646400000001 3.218 126.06991090000002 3.039 61.126077499999994 1.86 93.7953828 3.626 66.44071729999996 2.3 60.15434540000003 3.074 101.39242259999996 4.037 118.41649989999993 3.631 78.76920369999998 3.027 78.6447135 3.049 78.43591130000003 3.975 77.744888 3.135 76.42502719999997 3.968 67.87183469999998 3.849 100.82820919999997 3.136 131.4442471 4.053 98.68676250000001 2.679)
Error minima by case: (0.0473 8 58.0 1 14.102 8 33.8727 2 9.5604 2 0.4347 1 19.0 1 21.0272 2 9.8794 1 1.3813 1 0.0 0 9.0 2 0.0 0 0.0 0 4.9856 2 16.0508 2 0.0 0 0.1331 1 1.0 1 8.0 1 2.1336 1 0.0 0 1.9707 1 8.807 2 2.4377 1)
Average genome size in population (length): 72.545
Average program size in population (points): 73.545
Average percent parens in population: 0.014
Minimum age in population: 127.2707149590403
Maximum age in population: 132.1110815729851
Average age in population: 129.735783184863
Median age in population: 129.7905537131732
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 7
Genome diversity (% unique Plush genomes):	 0.846
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 7
Syntactic diversity (% unique Push programs):	 0.846
Total error diversity:				 0.088
Error (vector) diversity:			 0.096
Behavioral diversity:				 0.097
--- Run Statistics ---
Number of program evaluations used so far: 92000
Number of point (instruction) evaluations so far: 179417984
--- Timings ---
Current time: 1529615200278 milliseconds
Total Time:         345.1 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       121.9 seconds, 35.3%
Fitness Testing:    173.9 seconds, 50.4%
Report:              49.2 seconds, 14.3%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 91
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 92
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 92
;;******************************
;; -*- Number IO problem report - generation 92
Test total error for best: 59131.0
Test mean error for best: 29.56550
;;------------------------------
Outputs of best individual on training cases:
Correct output: 1.9526623133   | Program output: -32.0473376867
Correct output: -70.8009773522 | Program output: 8.1990226478  
Correct output: -13.7839009431 | Program output: 77.2160990569 
Correct output: 143.8727406396 | Program output: 94.8727406396 
Correct output: 136.4396027174 | Program output: 69.4396027174 
Correct output: 18.5044280613  | Program output: 116.5044280613
Correct output: 92.0568646792  | Program output: 66.0568646792 
Correct output: 71.8873476205  | Program output: 121.8873476205
Correct output: -10.8388749243 | Program output: -46.8388749243
Correct output: 0.9299825981   | Program output: 73.9299825981 
Correct output: -26.7840412284 | Program output: -26.7840412284
Correct output: -102.1264221267 | Program output: -72.1264221267
Correct output: 40.8061668642  | Program output: 48.8061668642 
Correct output: -5.2544966331  | Program output: -11.2544966331
Correct output: 102.9855886244 | Program output: 59.9855886244 
Correct output: -118.0507723766 | Program output: -61.0507723766
Correct output: 55.9371769928  | Program output: 76.9371769928 
Correct output: 4.2657989984   | Program output: 29.2657989984 
Correct output: 96.7057987603  | Program output: 114.7057987603
Correct output: 122.162446611  | Program output: 107.162446611 
Correct output: 30.0102027945  | Program output: 1.0102027945  
Correct output: 104.5822387035 | Program output: 99.5822387035 
Correct output: -1.5538743366  | Program output: -48.5538743366
Correct output: 166.8070496115 | Program output: 93.8070496115 
Correct output: 58.6188945281  | Program output: 98.6188945281 
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction in1} {:instruction integer_max} {:instruction integer_dup_items} {:instruction integer_div} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_inc} {:instruction integer_min} {:instruction float_inc} {:instruction integer_mult} {:instruction float_inc} {:instruction integer_min} {:instruction float_inc} {:instruction float_rot} {:instruction float_inc} {:instruction float_inc} {:instruction integer_inc} {:instruction float_inc} {:instruction float_yankdup} {:instruction integer_swap} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_inc} {:instruction float_inc} {:instruction integer_mult} {:instruction float_inc} {:instruction print_integer} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_inc} {:instruction float_mod} {:instruction float_inc} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_div} {:instruction integer_flush} {:instruction float_yankdup} {:instruction float_mult} {:instruction float_yankdup} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_inc} {:instruction integer_max} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_yank} {:instruction float_inc} {:instruction float_yankdup} {:instruction print_float} {:instruction float_flush} {:instruction integer_stackdepth} {:instruction tag_float_856} {:instruction float_inc} {:instruction float_yank} {:instruction float_inc} {:instruction float_yankdup} {:instruction print_float} {:instruction integer_yankdup} {:instruction integer_stackdepth} {:instruction tag_float_814} {:instruction integer_dup_times} {:instruction in2})
Best program: (in1 integer_max integer_dup_items integer_div float_inc float_yankdup float_inc integer_min float_inc integer_mult float_inc integer_min float_inc float_rot float_inc float_inc integer_inc float_inc float_yankdup integer_swap float_inc float_yankdup float_inc float_yankdup float_inc float_inc integer_mult float_inc print_integer float_inc float_yankdup float_inc float_yankdup float_inc float_mod float_inc float_inc float_yankdup float_div integer_flush float_yankdup float_mult float_yankdup float_inc float_yankdup float_inc integer_max float_inc float_inc float_inc float_yank float_inc float_yankdup print_float float_flush integer_stackdepth tag_float_856 float_inc float_yank float_inc float_yankdup print_float integer_yankdup integer_stackdepth tag_float_814 integer_dup_times in2)
Errors: [34.0 13 79.0 13 91.0 12 49.0 2 67.0 3 98.0 2 26.0 2 50.0 2 36.0 2 73.0 2 0.0 0 30.0 2 8.0 1 6.0 2 43.0 3 57.0 2 21.0 2 25.0 2 18.0 3 15.0 2 29.0 2 5.0 3 47.0 2 73.0 3 40.0 1]
Total: 1103.0
Mean: 22.06
Genome size: 67
Size: 68
Percent parens: 0.015
--- Population Statistics ---
Average total errors in population: 2951.7483916000006
Median total errors in population: 1103.0
Error averages by case: (106.30074290000002 12.728 139.90624330000003 12.789 155.82176580000007 12.047 125.74827650000003 3.618 140.2599139 4.217 161.0883775 3.31 102.22766509999998 3.298 122.4893015 3.583 109.44718910000002 3.422 139.29406380000006 3.209 78.77928830000002 2.083 108.84457960000002 3.819 82.64378850000001 2.523 78.59224950000001 3.233 117.51462410000002 4.221 133.20139189999998 3.835 94.34189539999998 3.232 91.15637310000004 3.222 96.01446919999998 4.163 95.35973910000001 3.338 94.0367025 4.056 85.634021 3.985 118.16510199999998 3.308 147.6843434 4.231 112.83028460000001 2.896)
Error minima by case: (0.3931 7 53.6279 1 11.2684 9 40.0 1 2.5604 2 0.1378 1 17.0 1 18.4054 2 11.6908 1 0.2688 1 0.0 0 7.0 2 0.0 0 0.0 0 11.9856 2 9.0508 2 1.0 1 0.4438 1 1.0 1 6.0 1 3.9149 1 0.0 0 2.2572 1 15.807 2 5.1369 1)
Average genome size in population (length): 72.845
Average program size in population (points): 73.845
Average percent parens in population: 0.014
Minimum age in population: 128.7143457110684
Maximum age in population: 133.2189922110533
Average age in population: 131.1239114671709
Median age in population: 131.187322741156
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 7
Genome diversity (% unique Plush genomes):	 0.867
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 7
Syntactic diversity (% unique Push programs):	 0.867
Total error diversity:				 0.096
Error (vector) diversity:			 0.105
Behavioral diversity:				 0.106
--- Run Statistics ---
Number of program evaluations used so far: 93000
Number of point (instruction) evaluations so far: 181239134
--- Timings ---
Current time: 1529615203862 milliseconds
Total Time:         348.7 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       123.3 seconds, 35.3%
Fitness Testing:    175.7 seconds, 50.4%
Report:              49.7 seconds, 14.3%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 92
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 93
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 93
;;******************************
;; -*- Number IO problem report - generation 93
Test total error for best: 59131.0
Test mean error for best: 29.56550
;;------------------------------
Outputs of best individual on training cases:
Correct output: 1.9526623133   | Program output: -32.0473376867
Correct output: -70.8009773522 | Program output: 8.1990226478  
Correct output: -13.7839009431 | Program output: 77.2160990569 
Correct output: 143.8727406396 | Program output: 94.8727406396 
Correct output: 136.4396027174 | Program output: 69.4396027174 
Correct output: 18.5044280613  | Program output: 116.5044280613
Correct output: 92.0568646792  | Program output: 66.0568646792 
Correct output: 71.8873476205  | Program output: 121.8873476205
Correct output: -10.8388749243 | Program output: -46.8388749243
Correct output: 0.9299825981   | Program output: 73.9299825981 
Correct output: -26.7840412284 | Program output: -26.7840412284
Correct output: -102.1264221267 | Program output: -72.1264221267
Correct output: 40.8061668642  | Program output: 48.8061668642 
Correct output: -5.2544966331  | Program output: -11.2544966331
Correct output: 102.9855886244 | Program output: 59.9855886244 
Correct output: -118.0507723766 | Program output: -61.0507723766
Correct output: 55.9371769928  | Program output: 76.9371769928 
Correct output: 4.2657989984   | Program output: 29.2657989984 
Correct output: 96.7057987603  | Program output: 114.7057987603
Correct output: 122.162446611  | Program output: 107.162446611 
Correct output: 30.0102027945  | Program output: 1.0102027945  
Correct output: 104.5822387035 | Program output: 99.5822387035 
Correct output: -1.5538743366  | Program output: -48.5538743366
Correct output: 166.8070496115 | Program output: 93.8070496115 
Correct output: 58.6188945281  | Program output: 98.6188945281 
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction in1} {:instruction float_max} {:instruction integer_div} {:instruction float_inc} {:instruction float_inc} {:instruction integer_dup_items} {:instruction integer_sub} {:instruction float_sub} {:instruction integer_flush} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_inc} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_div} {:instruction float_inc} {:instruction float_yankdup} {:instruction integer_dup} {:instruction float_div} {:instruction float_inc} {:instruction float_yankdup} {:instruction integer_inc} {:instruction float_yankdup} {:instruction float_div} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_inc} {:instruction float_div} {:instruction float_inc} {:instruction float_div} {:instruction float_inc} {:instruction float_rot} {:instruction float_inc} {:instruction float_inc} {:instruction float_div} {:instruction float_inc} {:instruction float_yankdup} {:instruction integer_mod} {:instruction integer_div} {:instruction tagged_440} {:instruction integer_dec} {:instruction float_div} {:instruction float_inc} {:instruction float_mult} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_inc} {:instruction float_yankdup} {:instruction integer_stackdepth} {:instruction float_inc} {:instruction float_mult} {:instruction float_dup_items} {:instruction float_div} {:instruction integer_mod} {:instruction float_inc} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_mult} {:instruction float_dup_items} {:instruction float_div} {:instruction float_inc} {:instruction integer_dup_items} {:instruction integer_sub} {:instruction print_integer} {:instruction float_frominteger} {:instruction integer_rot} {:instruction float_dup_items} {:instruction float_div} {:instruction float_inc} {:instruction integer_yankdup} {:instruction print_float} {:instruction float_mult} {:instruction integer_swap} {:instruction float_inc} {:instruction float_stackdepth} {:instruction integer_div} {:instruction float_mult} {:instruction integer_stackdepth} {:instruction tag_float_775} {:instruction integer_dup_times} {:instruction integer_dup_times} {:instruction in2} {:instruction integer_yankdup} {:instruction float_tan} {:instruction integer_rot} {:instruction float_stackdepth} {:instruction integer_stackdepth} {:instruction integer_dup} {:instruction float_rot} {:instruction integer_dup_times} {:instruction print_float} {:instruction print_float} {:instruction integer_pop} {:instruction float_swap})
Best program: (in1 float_max integer_div float_inc float_inc integer_dup_items integer_sub float_sub integer_flush float_inc float_yankdup float_inc float_yankdup float_inc float_inc float_yankdup float_div float_inc float_yankdup integer_dup float_div float_inc float_yankdup integer_inc float_yankdup float_div float_inc float_yankdup float_inc float_yankdup float_inc float_div float_inc float_div float_inc float_rot float_inc float_inc float_div float_inc float_yankdup integer_mod integer_div tagged_440 integer_dec float_div float_inc float_mult float_inc float_yankdup float_inc float_yankdup integer_stackdepth float_inc float_mult float_dup_items float_div integer_mod float_inc float_inc float_yankdup float_mult float_dup_items float_div float_inc integer_dup_items integer_sub print_integer float_frominteger integer_rot float_dup_items float_div float_inc integer_yankdup print_float float_mult integer_swap float_inc float_stackdepth integer_div float_mult integer_stackdepth tag_float_775 integer_dup_times integer_dup_times in2 integer_yankdup float_tan integer_rot float_stackdepth integer_stackdepth integer_dup float_rot integer_dup_times print_float print_float integer_pop float_swap)
Errors: [34.0 13 79.0 13 91.0 12 49.0 2 67.0 3 98.0 2 26.0 2 50.0 2 36.0 2 73.0 2 0.0 0 30.0 2 8.0 1 6.0 2 43.0 3 57.0 2 21.0 2 25.0 2 18.0 3 15.0 2 29.0 2 5.0 3 47.0 2 73.0 3 40.0 1]
Total: 1103.0
Mean: 22.06
Genome size: 98
Size: 99
Percent parens: 0.010
--- Population Statistics ---
Average total errors in population: 2580.2074727
Median total errors in population: 1103.0
Error averages by case: (90.28588640000007 12.766 130.90118250000003 12.79 143.25272150000004 12.06 109.40807580000003 3.404 125.1252038 4.017 148.60980810000007 3.068 86.39211830000002 3.06 108.08149779999998 3.321 93.04442479999999 3.206 126.52796410000008 3.003 62.03886160000002 1.847 93.21332639999997 3.617 67.13402810000001 2.255 64.88428110000002 3.049 102.22473160000001 3.998 117.94638570000002 3.627 79.63139079999996 3.004 81.04104330000001 3.011 78.88477119999997 3.965 78.05215650000001 3.093 82.93955389999999 4.042 68.3345791 3.768 101.9744222 3.103 131.9099121 4.031 98.62014599999999 2.644)
Error minima by case: (0.3931 8 55.0 1 14.3419 8 40.732 2 56.1412 2 0.4347 1 19.0 1 25.1127 2 2.8389 1 0.1229 1 0.0 0 6.0 2 0.1938 1 0.0 0 36.0 2 33.0 2 2.0 1 0.4424 1 0.0 0 8.0 1 2.9049 1 0.0 0 1.1075 1 40.8098 2 15.3811 1)
Average genome size in population (length): 72.531
Average program size in population (points): 73.531
Average percent parens in population: 0.014
Minimum age in population: 129.8137173143883
Maximum age in population: 134.6614174160338
Average age in population: 132.5347326028132
Median age in population: 132.555235406195
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 6
Genome diversity (% unique Plush genomes):	 0.861
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 6
Syntactic diversity (% unique Push programs):	 0.861
Total error diversity:				 0.079
Error (vector) diversity:			 0.087
Behavioral diversity:				 0.087
--- Run Statistics ---
Number of program evaluations used so far: 94000
Number of point (instruction) evaluations so far: 183052409
--- Timings ---
Current time: 1529615207604 milliseconds
Total Time:         352.3 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       124.6 seconds, 35.4%
Fitness Testing:    177.4 seconds, 50.4%
Report:              50.2 seconds, 14.2%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 93
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 94
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 94
;;******************************
;; -*- Number IO problem report - generation 94
Test total error for best: 59131.0
Test mean error for best: 29.56550
;;------------------------------
Outputs of best individual on training cases:
Correct output: 1.9526623133   | Program output: -32.0473376867
Correct output: -70.8009773522 | Program output: 8.1990226478  
Correct output: -13.7839009431 | Program output: 77.2160990569 
Correct output: 143.8727406396 | Program output: 94.8727406396 
Correct output: 136.4396027174 | Program output: 69.4396027174 
Correct output: 18.5044280613  | Program output: 116.5044280613
Correct output: 92.0568646792  | Program output: 66.0568646792 
Correct output: 71.8873476205  | Program output: 121.8873476205
Correct output: -10.8388749243 | Program output: -46.8388749243
Correct output: 0.9299825981   | Program output: 73.9299825981 
Correct output: -26.7840412284 | Program output: -26.7840412284
Correct output: -102.1264221267 | Program output: -72.1264221267
Correct output: 40.8061668642  | Program output: 48.8061668642 
Correct output: -5.2544966331  | Program output: -11.2544966331
Correct output: 102.9855886244 | Program output: 59.9855886244 
Correct output: -118.0507723766 | Program output: -61.0507723766
Correct output: 55.9371769928  | Program output: 76.9371769928 
Correct output: 4.2657989984   | Program output: 29.2657989984 
Correct output: 96.7057987603  | Program output: 114.7057987603
Correct output: 122.162446611  | Program output: 107.162446611 
Correct output: 30.0102027945  | Program output: 1.0102027945  
Correct output: 104.5822387035 | Program output: 99.5822387035 
Correct output: -1.5538743366  | Program output: -48.5538743366
Correct output: 166.8070496115 | Program output: 93.8070496115 
Correct output: 58.6188945281  | Program output: 98.6188945281 
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction in1} {:instruction float_max} {:instruction integer_div} {:instruction float_inc} {:instruction tag_integer_29} {:instruction float_inc} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_div} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_dup_items} {:instruction float_div} {:instruction float_inc} {:instruction float_div} {:instruction float_yankdup} {:instruction float_inc} {:instruction float_dup_items} {:instruction float_div} {:instruction float_inc} {:instruction float_min} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_inc} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_div} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_inc} {:instruction float_rot} {:instruction float_inc} {:instruction float_inc} {:instruction float_mult} {:instruction float_inc} {:instruction float_yankdup} {:instruction integer_mod} {:instruction integer_min} {:instruction float_mult} {:instruction float_dup_items} {:instruction float_div} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_inc} {:instruction integer_yank} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_div} {:instruction integer_flush} {:instruction float_yankdup} {:instruction float_mult} {:instruction float_yankdup} {:instruction float_inc} {:instruction float_div} {:instruction float_inc} {:instruction integer_max} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_sub} {:instruction float_inc} {:instruction float_yankdup} {:instruction print_float} {:instruction float_flush} {:instruction integer_stackdepth} {:instruction float_flush} {:instruction tag_float_856} {:instruction float_add} {:instruction integer_mod} {:instruction integer_flush} {:instruction float_mult} {:instruction float_shove})
Best program: (in1 float_max integer_div float_inc tag_integer_29 float_inc float_inc float_yankdup float_div float_inc float_yankdup float_dup_items float_div float_inc float_div float_yankdup float_inc float_dup_items float_div float_inc float_min float_inc float_yankdup float_inc float_inc float_yankdup float_div float_inc float_yankdup float_inc float_rot float_inc float_inc float_mult float_inc float_yankdup integer_mod integer_min float_mult float_dup_items float_div float_inc float_yankdup float_inc integer_yank float_inc float_yankdup float_div integer_flush float_yankdup float_mult float_yankdup float_inc float_div float_inc integer_max float_inc float_inc float_inc float_sub float_inc float_yankdup print_float float_flush integer_stackdepth float_flush tag_float_856 float_add integer_mod integer_flush float_mult float_shove)
Errors: [34.0 13 79.0 13 91.0 12 49.0 2 67.0 3 98.0 2 26.0 2 50.0 2 36.0 2 73.0 2 0.0 0 30.0 2 8.0 1 6.0 2 43.0 3 57.0 2 21.0 2 25.0 2 18.0 3 15.0 2 29.0 2 5.0 3 47.0 2 73.0 3 40.0 1]
Total: 1103.0
Mean: 22.06
Genome size: 72
Size: 73
Percent parens: 0.014
--- Population Statistics ---
Average total errors in population: 2472.0843336999997
Median total errors in population: 1103.0
Error averages by case: (87.51382070000001 12.784 121.51240460000005 12.721 138.73948270000002 12.014 106.45466050000006 3.332 122.23262379999997 3.929 144.10378970000002 2.988 83.37849380000002 3.024 103.32313989999994 3.262 89.83041620000002 3.094 121.94908780000006 2.943 58.8753043 1.733 88.02897419999995 3.498 64.41621269999997 2.189 58.19874390000001 2.957 99.12164709999998 3.955 112.99828810000001 3.512 76.55397660000001 2.918 73.6931173 2.941 75.91702930000001 3.883 74.93228020000002 3.044 75.22437889999999 3.875 65.1747192 3.71 99.29150460000001 3.015 129.02022839999998 3.961 93.74600920000002 2.572)
Error minima by case: (1.1747 7 14.5479 1 7.4231 9 40.0 1 58.0 2 0.0331 1 17.0 1 26.0 2 0.2259 1 0.8771 1 0.0 0 6.0 2 0.0 0 0.0 0 29.7071 2 33.0 2 0.0 0 0.3088 1 2.0 1 6.0 1 2.8601 1 0.0 0 0.5539 1 64.0 2 16.0 1)
Average genome size in population (length): 72.433
Average program size in population (points): 73.433
Average percent parens in population: 0.014
Minimum age in population: 130.8137173143883
Maximum age in population: 135.9645544260775
Average age in population: 133.9493974929645
Median age in population: 133.981607086948
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 7
Genome diversity (% unique Plush genomes):	 0.857
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 7
Syntactic diversity (% unique Push programs):	 0.857
Total error diversity:				 0.078
Error (vector) diversity:			 0.087
Behavioral diversity:				 0.087
--- Run Statistics ---
Number of program evaluations used so far: 95000
Number of point (instruction) evaluations so far: 184863284
--- Timings ---
Current time: 1529615211233 milliseconds
Total Time:         356.1 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       125.9 seconds, 35.4%
Fitness Testing:    179.2 seconds, 50.3%
Report:              50.8 seconds, 14.3%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 94
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 95
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 95
;;******************************
;; -*- Number IO problem report - generation 95
Test total error for best: 59131.0
Test mean error for best: 29.56550
;;------------------------------
Outputs of best individual on training cases:
Correct output: 1.9526623133   | Program output: -32.0473376867
Correct output: -70.8009773522 | Program output: 8.1990226478  
Correct output: -13.7839009431 | Program output: 77.2160990569 
Correct output: 143.8727406396 | Program output: 94.8727406396 
Correct output: 136.4396027174 | Program output: 69.4396027174 
Correct output: 18.5044280613  | Program output: 116.5044280613
Correct output: 92.0568646792  | Program output: 66.0568646792 
Correct output: 71.8873476205  | Program output: 121.8873476205
Correct output: -10.8388749243 | Program output: -46.8388749243
Correct output: 0.9299825981   | Program output: 73.9299825981 
Correct output: -26.7840412284 | Program output: -26.7840412284
Correct output: -102.1264221267 | Program output: -72.1264221267
Correct output: 40.8061668642  | Program output: 48.8061668642 
Correct output: -5.2544966331  | Program output: -11.2544966331
Correct output: 102.9855886244 | Program output: 59.9855886244 
Correct output: -118.0507723766 | Program output: -61.0507723766
Correct output: 55.9371769928  | Program output: 76.9371769928 
Correct output: 4.2657989984   | Program output: 29.2657989984 
Correct output: 96.7057987603  | Program output: 114.7057987603
Correct output: 122.162446611  | Program output: 107.162446611 
Correct output: 30.0102027945  | Program output: 1.0102027945  
Correct output: 104.5822387035 | Program output: 99.5822387035 
Correct output: -1.5538743366  | Program output: -48.5538743366
Correct output: 166.8070496115 | Program output: 93.8070496115 
Correct output: 58.6188945281  | Program output: 98.6188945281 
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction in1} {:instruction integer_max} {:instruction integer_dup_items} {:instruction float_yankdup} {:instruction float_sub} {:instruction float_yankdup} {:instruction float_inc} {:instruction integer_yank} {:instruction float_inc} {:instruction float_mod} {:instruction tag_integer_641} {:instruction float_div} {:instruction float_inc} {:instruction float_inc} {:instruction float_rot} {:instruction float_inc} {:instruction float_inc} {:instruction float_swap} {:instruction float_inc} {:instruction float_inc} {:instruction float_div} {:instruction float_inc} {:instruction float_frominteger} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_inc} {:instruction float_inc} {:instruction integer_dup_times} {:instruction float_div} {:instruction float_inc} {:instruction integer_div} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_inc} {:instruction integer_mod} {:instruction float_inc} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_div} {:instruction integer_flush} {:instruction float_yankdup} {:instruction float_mult} {:instruction float_shove} {:instruction float_yankdup} {:instruction float_inc} {:instruction float_mod} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_yank} {:instruction float_inc} {:instruction float_yankdup} {:instruction print_float} {:instruction float_flush} {:instruction integer_stackdepth} {:instruction tag_float_856} {:instruction float_add} {:instruction integer_dup_times} {:instruction float_min} {:instruction float_min} {:instruction integer_min})
Best program: (in1 integer_max integer_dup_items float_yankdup float_sub float_yankdup float_inc integer_yank float_inc float_mod tag_integer_641 float_div float_inc float_inc float_rot float_inc float_inc float_swap float_inc float_inc float_div float_inc float_frominteger float_inc float_yankdup float_inc float_inc integer_dup_times float_div float_inc integer_div float_inc float_yankdup float_inc float_yankdup float_inc float_yankdup float_inc integer_mod float_inc float_inc float_yankdup float_div integer_flush float_yankdup float_mult float_shove float_yankdup float_inc float_mod float_inc float_inc float_inc float_yank float_inc float_yankdup print_float float_flush integer_stackdepth tag_float_856 float_add integer_dup_times float_min float_min integer_min)
Errors: [34.0 13 79.0 13 91.0 12 49.0 2 67.0 3 98.0 2 26.0 2 50.0 2 36.0 2 73.0 2 0.0 0 30.0 2 8.0 1 6.0 2 43.0 3 57.0 2 21.0 2 25.0 2 18.0 3 15.0 2 29.0 2 5.0 3 47.0 2 73.0 3 40.0 1]
Total: 1103.0
Mean: 22.06
Genome size: 65
Size: 66
Percent parens: 0.015
--- Population Statistics ---
Average total errors in population: 2734.2856146
Median total errors in population: 1103.0
Error averages by case: (97.93186340000003 12.73 130.81233290000006 12.758 148.56976350000002 12.033 117.10558330000005 3.494 132.5564986 4.103 153.56846100000004 3.163 94.2071263 3.191 113.74635810000001 3.424 100.36298140000004 3.319 131.95347980000005 3.118 70.1590939 1.948 99.41781569999993 3.708 75.27813580000004 2.387 68.0289303 3.166 109.7183278 4.116 124.01690579999993 3.701 87.39567630000003 3.117 82.29177630000002 3.112 86.885057 4.061 86.09267130000002 3.207 82.76257020000001 4.032 76.39930590000003 3.908 109.5061575 3.206 139.39353130000006 4.146 104.22921119999998 2.748)
Error minima by case: (0.0473 8 17.0494 1 12.8585 7 40.0 1 28.7064 2 0.4443 1 17.0 1 21.5916 2 4.8926 1 0.0404 1 0.0 0 8.0 2 0.0 0 0.0 0 34.0 2 35.0 2 0.0 0 1.2658 1 1.0 1 6.0 1 3.0102 1 0.0 0 0.5935 1 22.7064 2 16.0793 1)
Average genome size in population (length): 72.404
Average program size in population (points): 73.404
Average percent parens in population: 0.014
Minimum age in population: 132.3737815751577
Maximum age in population: 137.3907472356149
Average age in population: 135.2965475102321
Median age in population: 135.3234429184218
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 7
Genome diversity (% unique Plush genomes):	 0.866
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 7
Syntactic diversity (% unique Push programs):	 0.866
Total error diversity:				 0.082
Error (vector) diversity:			 0.091
Behavioral diversity:				 0.092
--- Run Statistics ---
Number of program evaluations used so far: 96000
Number of point (instruction) evaluations so far: 186673459
--- Timings ---
Current time: 1529615214815 milliseconds
Total Time:         359.7 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       127.2 seconds, 35.4%
Fitness Testing:    181.0 seconds, 50.3%
Report:              51.3 seconds, 14.3%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 95
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 96
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 96
;;******************************
;; -*- Number IO problem report - generation 96
Test total error for best: 59131.0
Test mean error for best: 29.56550
;;------------------------------
Outputs of best individual on training cases:
Correct output: 1.9526623133   | Program output: -32.0473376867
Correct output: -70.8009773522 | Program output: 8.1990226478  
Correct output: -13.7839009431 | Program output: 77.2160990569 
Correct output: 143.8727406396 | Program output: 94.8727406396 
Correct output: 136.4396027174 | Program output: 69.4396027174 
Correct output: 18.5044280613  | Program output: 116.5044280613
Correct output: 92.0568646792  | Program output: 66.0568646792 
Correct output: 71.8873476205  | Program output: 121.8873476205
Correct output: -10.8388749243 | Program output: -46.8388749243
Correct output: 0.9299825981   | Program output: 73.9299825981 
Correct output: -26.7840412284 | Program output: -26.7840412284
Correct output: -102.1264221267 | Program output: -72.1264221267
Correct output: 40.8061668642  | Program output: 48.8061668642 
Correct output: -5.2544966331  | Program output: -11.2544966331
Correct output: 102.9855886244 | Program output: 59.9855886244 
Correct output: -118.0507723766 | Program output: -61.0507723766
Correct output: 55.9371769928  | Program output: 76.9371769928 
Correct output: 4.2657989984   | Program output: 29.2657989984 
Correct output: 96.7057987603  | Program output: 114.7057987603
Correct output: 122.162446611  | Program output: 107.162446611 
Correct output: 30.0102027945  | Program output: 1.0102027945  
Correct output: 104.5822387035 | Program output: 99.5822387035 
Correct output: -1.5538743366  | Program output: -48.5538743366
Correct output: 166.8070496115 | Program output: 93.8070496115 
Correct output: 58.6188945281  | Program output: 98.6188945281 
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction in1} {:instruction integer_max} {:instruction float_sub} {:instruction integer_sub} {:instruction integer_mod} {:instruction integer_sub} {:instruction integer_mod} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_inc} {:instruction float_inc} {:instruction integer_mod} {:instruction float_inc} {:instruction integer_yankdup} {:instruction float_inc} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_div} {:instruction float_yankdup} {:instruction float_inc} {:instruction float_dup_items} {:instruction float_div} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_rot} {:instruction float_inc} {:instruction tagged_165} {:instruction integer_mod} {:instruction integer_div} {:instruction tagged_440} {:instruction integer_dec} {:instruction float_mult} {:instruction float_dup_items} {:instruction float_div} {:instruction float_inc} {:instruction float_sub} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_inc} {:instruction integer_mod} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_yank} {:instruction float_inc} {:instruction float_inc} {:instruction float_yank} {:instruction float_inc} {:instruction float_yankdup} {:instruction print_float} {:instruction float_inc} {:instruction float_swap} {:instruction float_inc} {:instruction float_stackdepth} {:instruction print_float} {:instruction float_yankdup} {:instruction print_float} {:instruction float_flush} {:instruction integer_pop} {:instruction float_dec} {:instruction float_inc} {:instruction float_swap} {:instruction float_add} {:instruction integer_fromfloat})
Best program: (in1 integer_max float_sub integer_sub integer_mod integer_sub integer_mod float_inc float_yankdup float_inc float_yankdup float_inc float_inc integer_mod float_inc integer_yankdup float_inc float_inc float_yankdup float_inc float_yankdup float_div float_yankdup float_inc float_dup_items float_div float_inc float_yankdup float_inc float_inc float_inc integer_rot float_inc tagged_165 integer_mod integer_div tagged_440 integer_dec float_mult float_dup_items float_div float_inc float_sub float_inc float_yankdup float_inc float_yankdup float_inc integer_mod float_inc float_inc float_inc float_yank float_inc float_inc float_yank float_inc float_yankdup print_float float_inc float_swap float_inc float_stackdepth print_float float_yankdup print_float float_flush integer_pop float_dec float_inc float_swap float_add integer_fromfloat)
Errors: [34.0 13 79.0 13 91.0 12 49.0 2 67.0 3 98.0 2 26.0 2 50.0 2 36.0 2 73.0 2 0.0 0 30.0 2 8.0 1 6.0 2 43.0 3 57.0 2 21.0 2 25.0 2 18.0 3 15.0 2 29.0 2 5.0 3 47.0 2 73.0 3 40.0 1]
Total: 1103.0
Mean: 22.06
Genome size: 73
Size: 74
Percent parens: 0.014
--- Population Statistics ---
Average total errors in population: 2593.8528742000003
Median total errors in population: 1103.0
Error averages by case: (92.29228180000001 12.764 128.6344302 12.729 144.387533 12.03 110.06664530000006 3.355 125.78517699999998 3.961 149.73029749999998 3.004 87.10252820000001 3.012 108.76226190000001 3.27 94.67164410000001 3.139 127.67800130000005 2.936 63.9342318 1.782 94.72143689999999 3.524 67.9596656 2.22 63.805953400000014 2.998 102.79096310000003 3.952 119.50813509999996 3.537 80.36779399999999 2.949 81.1536316 2.959 79.52942500000003 3.901 78.6396904 3.073 78.98492590000002 3.914 68.9508703 3.739 104.13992430000002 3.061 132.5655147 3.992 99.3059118 2.583)
Error minima by case: (0.19 8 55.0 1 13.5393 8 40.0 1 58.0 2 0.4448 1 17.0 1 0.1127 2 8.3762 1 0.1161 1 0.0 0 6.0 2 0.0 0 0.0 0 28.9856 2 33.0 2 1.0 1 0.7254 1 2.0 1 6.0 1 1.7996 1 0.0 0 1.1146 1 64.0 2 3.3232 1)
Average genome size in population (length): 72.689
Average program size in population (points): 73.689
Average percent parens in population: 0.014
Minimum age in population: 133.3737815751577
Maximum age in population: 138.7006122839125
Average age in population: 136.6924977491296
Median age in population: 136.7362280888152
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 7
Genome diversity (% unique Plush genomes):	 0.843
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 7
Syntactic diversity (% unique Push programs):	 0.843
Total error diversity:				 0.08
Error (vector) diversity:			 0.09
Behavioral diversity:				 0.091
--- Run Statistics ---
Number of program evaluations used so far: 97000
Number of point (instruction) evaluations so far: 188490734
--- Timings ---
Current time: 1529615218442 milliseconds
Total Time:         363.3 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       128.6 seconds, 35.4%
Fitness Testing:    182.8 seconds, 50.3%
Report:              51.8 seconds, 14.3%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 96
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 97
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 97
;;******************************
;; -*- Number IO problem report - generation 97
Test total error for best: 59131.0
Test mean error for best: 29.56550
;;------------------------------
Outputs of best individual on training cases:
Correct output: 1.9526623133   | Program output: -32.0473376867
Correct output: -70.8009773522 | Program output: 8.1990226478  
Correct output: -13.7839009431 | Program output: 77.2160990569 
Correct output: 143.8727406396 | Program output: 94.8727406396 
Correct output: 136.4396027174 | Program output: 69.4396027174 
Correct output: 18.5044280613  | Program output: 116.5044280613
Correct output: 92.0568646792  | Program output: 66.0568646792 
Correct output: 71.8873476205  | Program output: 121.8873476205
Correct output: -10.8388749243 | Program output: -46.8388749243
Correct output: 0.9299825981   | Program output: 73.9299825981 
Correct output: -26.7840412284 | Program output: -26.7840412284
Correct output: -102.1264221267 | Program output: -72.1264221267
Correct output: 40.8061668642  | Program output: 48.8061668642 
Correct output: -5.2544966331  | Program output: -11.2544966331
Correct output: 102.9855886244 | Program output: 59.9855886244 
Correct output: -118.0507723766 | Program output: -61.0507723766
Correct output: 55.9371769928  | Program output: 76.9371769928 
Correct output: 4.2657989984   | Program output: 29.2657989984 
Correct output: 96.7057987603  | Program output: 114.7057987603
Correct output: 122.162446611  | Program output: 107.162446611 
Correct output: 30.0102027945  | Program output: 1.0102027945  
Correct output: 104.5822387035 | Program output: 99.5822387035 
Correct output: -1.5538743366  | Program output: -48.5538743366
Correct output: 166.8070496115 | Program output: 93.8070496115 
Correct output: 58.6188945281  | Program output: 98.6188945281 
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction in1} {:instruction integer_max} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_inc} {:instruction float_inc} {:instruction integer_mod} {:instruction float_inc} {:instruction float_mod} {:instruction float_inc} {:instruction float_inc} {:instruction float_dup_items} {:instruction float_div} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_inc} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_div} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_inc} {:instruction tag_integer_979} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_mult} {:instruction float_dup_items} {:instruction integer_max} {:instruction float_inc} {:instruction float_mult} {:instruction float_dup_items} {:instruction float_div} {:instruction float_inc} {:instruction float_sub} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_inc} {:instruction integer_mod} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_yank} {:instruction float_inc} {:instruction float_yankdup} {:instruction print_float} {:instruction float_add} {:instruction float_swap} {:instruction integer_dec} {:instruction print_float} {:instruction float_add} {:instruction float_inc} {:instruction float_yank} {:instruction integer_shove} {:instruction float_mult} {:instruction float_inc} {:instruction print_float} {:instruction float_yankdup} {:instruction print_float} {:instruction float_flush} {:instruction integer_pop} {:instruction float_dec} {:instruction float_inc} {:instruction float_swap} {:instruction float_add} {:instruction integer_fromfloat})
Best program: (in1 integer_max float_inc float_yankdup float_inc float_yankdup float_inc float_inc integer_mod float_inc float_mod float_inc float_inc float_dup_items float_div float_inc float_yankdup float_inc float_yankdup float_inc float_inc float_yankdup float_div float_inc float_yankdup float_inc tag_integer_979 float_inc float_yankdup float_inc float_yankdup float_mult float_dup_items integer_max float_inc float_mult float_dup_items float_div float_inc float_sub float_inc float_yankdup float_inc float_yankdup float_inc integer_mod float_inc float_inc float_inc float_yank float_inc float_yankdup print_float float_add float_swap integer_dec print_float float_add float_inc float_yank integer_shove float_mult float_inc print_float float_yankdup print_float float_flush integer_pop float_dec float_inc float_swap float_add integer_fromfloat)
Errors: [34.0 13 79.0 13 91.0 12 49.0 2 67.0 3 98.0 2 26.0 2 50.0 2 36.0 2 73.0 2 0.0 0 30.0 2 8.0 1 6.0 2 43.0 3 57.0 2 21.0 2 25.0 2 18.0 3 15.0 2 29.0 2 5.0 3 47.0 2 73.0 3 40.0 1]
Total: 1103.0
Mean: 22.06
Genome size: 73
Size: 74
Percent parens: 0.014
--- Population Statistics ---
Average total errors in population: 2499.0179150000004
Median total errors in population: 1103.0
Error averages by case: (88.4143868 12.73 123.38977530000004 12.763 139.61974890000002 12.033 107.40978680000006 3.366 123.04208599999997 3.997 144.71839849999998 3.033 84.2498277 3.066 104.38874270000002 3.288 91.65722160000003 3.159 122.8006773 2.994 60.09968279999999 1.752 89.65961599999999 3.54 64.94378679999998 2.246 59.62828380000001 2.984 100.15929509999998 3.98 114.4181116 3.538 77.61637420000001 2.991 74.0895818 2.979 77.09219320000003 3.94 76.12302420000003 3.08 75.44822460000002 3.994 66.33217089999998 3.764 100.22468310000001 3.065 129.8572758 4.001 94.75095950000001 2.601)
Error minima by case: (0.3712 8 62.0 1 16.7307 9 24.8727 2 13.5604 2 0.4347 1 18.0 1 33.0 2 13.9208 1 2.0144 1 0.0 0 13.0 2 1.0 1 0.0 0 0.9856 2 20.0508 2 4.0 1 0.4438 1 1.0 1 7.0 1 0.9898 1 0.0 0 4.633 1 0.193 2 23.0 1)
Average genome size in population (length): 72.216
Average program size in population (points): 73.216
Average percent parens in population: 0.014
Minimum age in population: 135.0258026981165
Maximum age in population: 140.1577874229853
Average age in population: 138.0843109114978
Median age in population: 138.1235595417614
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 8
Genome diversity (% unique Plush genomes):	 0.853
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 8
Syntactic diversity (% unique Push programs):	 0.853
Total error diversity:				 0.082
Error (vector) diversity:			 0.092
Behavioral diversity:				 0.092
--- Run Statistics ---
Number of program evaluations used so far: 98000
Number of point (instruction) evaluations so far: 190296184
--- Timings ---
Current time: 1529615222073 milliseconds
Total Time:         366.9 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       129.9 seconds, 35.4%
Fitness Testing:    184.6 seconds, 50.3%
Report:              52.3 seconds, 14.3%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 97
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 98
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 98
;;******************************
;; -*- Number IO problem report - generation 98
Test total error for best: 59131.0
Test mean error for best: 29.56550
;;------------------------------
Outputs of best individual on training cases:
Correct output: 1.9526623133   | Program output: -32.0473376867
Correct output: -70.8009773522 | Program output: 8.1990226478  
Correct output: -13.7839009431 | Program output: 77.2160990569 
Correct output: 143.8727406396 | Program output: 94.8727406396 
Correct output: 136.4396027174 | Program output: 69.4396027174 
Correct output: 18.5044280613  | Program output: 116.5044280613
Correct output: 92.0568646792  | Program output: 66.0568646792 
Correct output: 71.8873476205  | Program output: 121.8873476205
Correct output: -10.8388749243 | Program output: -46.8388749243
Correct output: 0.9299825981   | Program output: 73.9299825981 
Correct output: -26.7840412284 | Program output: -26.7840412284
Correct output: -102.1264221267 | Program output: -72.1264221267
Correct output: 40.8061668642  | Program output: 48.8061668642 
Correct output: -5.2544966331  | Program output: -11.2544966331
Correct output: 102.9855886244 | Program output: 59.9855886244 
Correct output: -118.0507723766 | Program output: -61.0507723766
Correct output: 55.9371769928  | Program output: 76.9371769928 
Correct output: 4.2657989984   | Program output: 29.2657989984 
Correct output: 96.7057987603  | Program output: 114.7057987603
Correct output: 122.162446611  | Program output: 107.162446611 
Correct output: 30.0102027945  | Program output: 1.0102027945  
Correct output: 104.5822387035 | Program output: 99.5822387035 
Correct output: -1.5538743366  | Program output: -48.5538743366
Correct output: 166.8070496115 | Program output: 93.8070496115 
Correct output: 58.6188945281  | Program output: 98.6188945281 
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction in1} {:instruction integer_max} {:instruction integer_dup_items} {:instruction integer_max} {:instruction integer_mod} {:instruction integer_div} {:instruction float_inc} {:instruction integer_yank} {:instruction float_inc} {:instruction float_inc} {:instruction integer_dup} {:instruction float_div} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_dup_items} {:instruction float_div} {:instruction float_inc} {:instruction float_div} {:instruction float_inc} {:instruction integer_mod} {:instruction float_inc} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_yankdup} {:instruction float_inc} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_div} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_inc} {:instruction integer_yank} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_mult} {:instruction float_dup_items} {:instruction float_div} {:instruction float_inc} {:instruction float_mult} {:instruction float_dup_items} {:instruction float_div} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_inc} {:instruction tagged_475} {:instruction float_inc} {:instruction integer_mod} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_shove} {:instruction float_inc} {:instruction float_yankdup} {:instruction print_float} {:instruction print_integer} {:instruction integer_stackdepth} {:instruction tag_float_856} {:instruction float_add} {:instruction integer_dup_times})
Best program: (in1 integer_max integer_dup_items integer_max integer_mod integer_div float_inc integer_yank float_inc float_inc integer_dup float_div float_inc float_yankdup float_dup_items float_div float_inc float_div float_inc integer_mod float_inc float_inc float_yankdup float_yankdup float_inc float_inc float_yankdup float_div float_inc float_yankdup float_inc float_yankdup float_inc integer_yank float_inc float_yankdup float_inc float_yankdup float_mult float_dup_items float_div float_inc float_mult float_dup_items float_div float_inc float_yankdup float_inc float_yankdup float_inc tagged_475 float_inc integer_mod float_inc float_inc float_inc integer_shove float_inc float_yankdup print_float print_integer integer_stackdepth tag_float_856 float_add integer_dup_times)
Errors: [34.0 13 79.0 13 91.0 12 49.0 2 67.0 3 98.0 2 26.0 2 50.0 2 36.0 2 73.0 2 0.0 0 30.0 2 8.0 1 6.0 2 43.0 3 57.0 2 21.0 2 25.0 2 18.0 3 15.0 2 29.0 2 5.0 3 47.0 2 73.0 3 40.0 1]
Total: 1103.0
Mean: 22.06
Genome size: 65
Size: 66
Percent parens: 0.015
--- Population Statistics ---
Average total errors in population: 2334.6527622999997
Median total errors in population: 1103.0
Error averages by case: (80.21663519999998 12.743 119.87927600000005 12.778 132.65939699999996 12.026 100.95087490000006 3.372 116.39107579999998 4.003 137.85611249999997 3.045 77.30599420000001 3.084 98.1281242 3.309 82.7840627 3.206 115.77538830000009 3.017 52.4187173 1.837 83.62846770000002 3.546 57.63335589999999 2.245 53.49274530000002 3.069 93.0255853 3.994 108.40615909999998 3.574 70.35718410000001 3.014 69.2806276 3.022 70.3103477 3.968 69.55040509999999 3.113 71.7287515 3.805 59.6176632 3.797 91.95209209999999 3.119 123.62191990000001 4.017 88.36279970000001 2.616)
Error minima by case: (0.0492 7 3.9917 1 13.004 8 34.8727 2 8.4396 2 0.4347 1 14.0 1 29.0 2 9.6908 1 0.0681 1 0.0 0 9.0 2 0.0 0 0.0 0 5.9856 2 1.9492 2 0.0 0 0.2746 1 2.0 1 3.0 1 1.0102 1 0.0 0 0.712 1 9.807 2 19.0 1)
Average genome size in population (length): 72.018
Average program size in population (points): 73.018
Average percent parens in population: 0.014
Minimum age in population: 136.3539088621716
Maximum age in population: 141.3375028953564
Average age in population: 139.4799676999338
Median age in population: 139.4988054330572
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 8
Genome diversity (% unique Plush genomes):	 0.871
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 8
Syntactic diversity (% unique Push programs):	 0.871
Total error diversity:				 0.096
Error (vector) diversity:			 0.106
Behavioral diversity:				 0.106
--- Run Statistics ---
Number of program evaluations used so far: 99000
Number of point (instruction) evaluations so far: 192096784
--- Timings ---
Current time: 1529615225709 milliseconds
Total Time:         370.6 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       131.3 seconds, 35.4%
Fitness Testing:    186.4 seconds, 50.3%
Report:              52.8 seconds, 14.3%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 98
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 99
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 99
;;******************************
;; -*- Number IO problem report - generation 99
Test total error for best: 59131.0
Test mean error for best: 29.56550
;;------------------------------
Outputs of best individual on training cases:
Correct output: 1.9526623133   | Program output: -32.0473376867
Correct output: -70.8009773522 | Program output: 8.1990226478  
Correct output: -13.7839009431 | Program output: 77.2160990569 
Correct output: 143.8727406396 | Program output: 94.8727406396 
Correct output: 136.4396027174 | Program output: 69.4396027174 
Correct output: 18.5044280613  | Program output: 116.5044280613
Correct output: 92.0568646792  | Program output: 66.0568646792 
Correct output: 71.8873476205  | Program output: 121.8873476205
Correct output: -10.8388749243 | Program output: -46.8388749243
Correct output: 0.9299825981   | Program output: 73.9299825981 
Correct output: -26.7840412284 | Program output: -26.7840412284
Correct output: -102.1264221267 | Program output: -72.1264221267
Correct output: 40.8061668642  | Program output: 48.8061668642 
Correct output: -5.2544966331  | Program output: -11.2544966331
Correct output: 102.9855886244 | Program output: 59.9855886244 
Correct output: -118.0507723766 | Program output: -61.0507723766
Correct output: 55.9371769928  | Program output: 76.9371769928 
Correct output: 4.2657989984   | Program output: 29.2657989984 
Correct output: 96.7057987603  | Program output: 114.7057987603
Correct output: 122.162446611  | Program output: 107.162446611 
Correct output: 30.0102027945  | Program output: 1.0102027945  
Correct output: 104.5822387035 | Program output: 99.5822387035 
Correct output: -1.5538743366  | Program output: -48.5538743366
Correct output: 166.8070496115 | Program output: 93.8070496115 
Correct output: 58.6188945281  | Program output: 98.6188945281 
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction in1} {:instruction integer_max} {:instruction integer_dup_items} {:instruction integer_sub} {:instruction float_sub} {:instruction float_mod} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_inc} {:instruction float_inc} {:instruction integer_dec} {:instruction float_div} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_inc} {:instruction float_inc} {:instruction integer_add} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_inc} {:instruction float_div} {:instruction float_inc} {:instruction integer_flush} {:instruction float_inc} {:instruction float_rot} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_div} {:instruction float_inc} {:instruction float_yankdup} {:instruction tagged_671} {:instruction float_dup_items} {:instruction float_div} {:instruction float_inc} {:instruction float_mult} {:instruction float_dup_times} {:instruction integer_flush} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_inc} {:instruction integer_mod} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_mult} {:instruction float_inc} {:instruction integer_flush} {:instruction print_float} {:instruction float_flush} {:instruction integer_dup_times} {:instruction integer_div} {:instruction float_mult} {:instruction integer_stackdepth} {:instruction tag_float_856} {:instruction float_add} {:instruction float_add} {:instruction integer_dup_times} {:instruction float_min} {:instruction float_min} {:instruction float_inc} {:instruction integer_dup_items} {:instruction integer_sub})
Best program: (in1 integer_max integer_dup_items integer_sub float_sub float_mod float_inc float_yankdup float_inc float_inc integer_dec float_div float_inc float_yankdup float_inc float_inc integer_add float_inc float_yankdup float_inc float_yankdup float_inc float_div float_inc integer_flush float_inc float_rot float_inc float_inc float_inc float_div float_inc float_yankdup tagged_671 float_dup_items float_div float_inc float_mult float_dup_times integer_flush float_inc float_yankdup float_inc float_yankdup float_inc float_yankdup float_inc integer_mod float_inc float_inc float_inc float_mult float_inc integer_flush print_float float_flush integer_dup_times integer_div float_mult integer_stackdepth tag_float_856 float_add float_add integer_dup_times float_min float_min float_inc integer_dup_items integer_sub)
Errors: [34.0 13 79.0 13 91.0 12 49.0 2 67.0 3 98.0 2 26.0 2 50.0 2 36.0 2 73.0 2 0.0 0 30.0 2 8.0 1 6.0 2 43.0 3 57.0 2 21.0 2 25.0 2 18.0 3 15.0 2 29.0 2 5.0 3 47.0 2 73.0 3 40.0 1]
Total: 1103.0
Mean: 22.06
Genome size: 69
Size: 70
Percent parens: 0.014
--- Population Statistics ---
Average total errors in population: 2953.2335521999994
Median total errors in population: 1103.0
Error averages by case: (106.20007779999997 12.71 140.3429227 12.837 155.2709224 12.064 125.42602160000003 3.641 140.57157999999998 4.249 161.15642789999998 3.308 102.49240040000001 3.322 122.44952660000003 3.577 109.20433890000001 3.453 138.86063650000006 3.235 78.43970199999998 2.095 108.45457700000001 3.845 83.54080139999999 2.521 77.73275770000001 3.289 117.955727 4.264 132.69091219999996 3.87 95.62610899999999 3.264 93.15787159999998 3.24 96.35566830000002 4.194 95.69095639999999 3.35 94.03803689999998 4.048 85.09675470000002 4.045 117.79888859999996 3.332 147.5207234 4.317 112.21021120000002 2.879)
Error minima by case: (0.7022 8 20.5245 2 4.1769 8 43.0 1 32.0 2 0.4443 1 20.0 1 3.3367 2 1.2319 1 0.1323 1 0.0 0 16.0 2 0.0 0 0.0 0 34.435 2 1.4755 2 7.0 1 0.0759 1 4.0 2 9.0 1 2.7996 1 0.0 0 2.2695 1 26.0 2 9.9317 1)
Average genome size in population (length): 71.205
Average program size in population (points): 72.205
Average percent parens in population: 0.014
Minimum age in population: 138.1873788411198
Maximum age in population: 142.8085366919315
Average age in population: 140.871726269433
Median age in population: 140.9157241260953
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 6
Genome diversity (% unique Plush genomes):	 0.87
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 6
Syntactic diversity (% unique Push programs):	 0.87
Total error diversity:				 0.086
Error (vector) diversity:			 0.093
Behavioral diversity:				 0.094
--- Run Statistics ---
Number of program evaluations used so far: 100000
Number of point (instruction) evaluations so far: 193876934
--- Timings ---
Current time: 1529615229253 milliseconds
Total Time:         374.1 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       132.6 seconds, 35.4%
Fitness Testing:    188.1 seconds, 50.3%
Report:              53.3 seconds, 14.2%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 99
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 100
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 100
;;******************************
;; -*- Number IO problem report - generation 100
Test total error for best: 59131.0
Test mean error for best: 29.56550
;;------------------------------
Outputs of best individual on training cases:
Correct output: 1.9526623133   | Program output: -32.0473376867
Correct output: -70.8009773522 | Program output: 8.1990226478  
Correct output: -13.7839009431 | Program output: 77.2160990569 
Correct output: 143.8727406396 | Program output: 94.8727406396 
Correct output: 136.4396027174 | Program output: 69.4396027174 
Correct output: 18.5044280613  | Program output: 116.5044280613
Correct output: 92.0568646792  | Program output: 66.0568646792 
Correct output: 71.8873476205  | Program output: 121.8873476205
Correct output: -10.8388749243 | Program output: -46.8388749243
Correct output: 0.9299825981   | Program output: 73.9299825981 
Correct output: -26.7840412284 | Program output: -26.7840412284
Correct output: -102.1264221267 | Program output: -72.1264221267
Correct output: 40.8061668642  | Program output: 48.8061668642 
Correct output: -5.2544966331  | Program output: -11.2544966331
Correct output: 102.9855886244 | Program output: 59.9855886244 
Correct output: -118.0507723766 | Program output: -61.0507723766
Correct output: 55.9371769928  | Program output: 76.9371769928 
Correct output: 4.2657989984   | Program output: 29.2657989984 
Correct output: 96.7057987603  | Program output: 114.7057987603
Correct output: 122.162446611  | Program output: 107.162446611 
Correct output: 30.0102027945  | Program output: 1.0102027945  
Correct output: 104.5822387035 | Program output: 99.5822387035 
Correct output: -1.5538743366  | Program output: -48.5538743366
Correct output: 166.8070496115 | Program output: 93.8070496115 
Correct output: 58.6188945281  | Program output: 98.6188945281 
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction in1} {:instruction integer_max} {:instruction integer_dup_items} {:instruction integer_sub} {:instruction float_sub} {:instruction float_yankdup} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_inc} {:instruction float_inc} {:instruction integer_div} {:instruction float_div} {:instruction float_inc} {:instruction float_inc} {:instruction float_rot} {:instruction float_inc} {:instruction float_inc} {:instruction float_div} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_inc} {:instruction float_div} {:instruction float_inc} {:instruction integer_pop} {:instruction float_inc} {:instruction integer_yankdup} {:instruction float_inc} {:instruction float_inc} {:instruction float_dup_items} {:instruction float_inc} {:instruction float_mult} {:instruction float_dup_items} {:instruction float_div} {:instruction float_inc} {:instruction float_mult} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_inc} {:instruction integer_swap} {:instruction float_inc} {:instruction integer_mod} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_yank} {:instruction float_inc} {:instruction print_float} {:instruction float_swap} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction print_float} {:instruction float_flush} {:instruction integer_stackdepth} {:instruction integer_add} {:instruction float_inc} {:instruction float_inc} {:instruction float_mult} {:instruction float_dup_items} {:instruction integer_dup_items} {:instruction float_inc})
Best program: (in1 integer_max integer_dup_items integer_sub float_sub float_yankdup float_inc float_yankdup float_inc float_inc integer_div float_div float_inc float_inc float_rot float_inc float_inc float_div float_inc float_yankdup float_inc float_yankdup float_inc float_div float_inc integer_pop float_inc integer_yankdup float_inc float_inc float_dup_items float_inc float_mult float_dup_items float_div float_inc float_mult float_inc float_yankdup float_inc float_yankdup float_inc integer_swap float_inc integer_mod float_inc float_inc float_inc float_yank float_inc print_float float_swap float_inc float_inc float_inc print_float float_flush integer_stackdepth integer_add float_inc float_inc float_mult float_dup_items integer_dup_items float_inc)
Errors: [34.0 13 79.0 13 91.0 12 49.0 2 67.0 3 98.0 2 26.0 2 50.0 2 36.0 2 73.0 2 0.0 0 30.0 2 8.0 1 6.0 2 43.0 3 57.0 2 21.0 2 25.0 2 18.0 3 15.0 2 29.0 2 5.0 3 47.0 2 73.0 3 40.0 1]
Total: 1103.0
Mean: 22.06
Genome size: 65
Size: 66
Percent parens: 0.015
--- Population Statistics ---
Average total errors in population: 2548.8737079999996
Median total errors in population: 1103.0
Error averages by case: (89.8922591 12.716 127.57619210000006 12.692 140.46280329999993 12.033 109.80131410000004 3.462 125.29654289999999 4.081 145.4787383 3.15 86.2832147 3.15 105.55467080000003 3.412 92.4307385 3.291 123.63838530000002 3.084 61.7698082 1.92 91.42146669999994 3.681 66.41870329999999 2.351 62.62236940000002 3.122 101.9859285 4.038 116.15710369999996 3.712 78.6991856 3.047 76.63739389999999 3.078 78.5909669 4.025 78.34042260000002 3.193 80.02318469999997 4.118 68.45615509999998 3.864 101.85668500000001 3.181 132.4247218 4.094 95.83075350000001 2.729)
Error minima by case: (0.5959 7 2.3444 1 13.2026 9 27.8727 2 6.5604 2 0.4852 1 15.0 1 3.9654 2 9.8792 1 0.0888 1 0.0 0 6.0 2 0.0 0 0.0 0 1.0144 2 13.0508 2 0.0 0 0.6382 1 2.0 1 4.0 1 1.1695 1 0.0 0 1.4135 1 2.807 2 3.0481 1)
Average genome size in population (length): 71.186
Average program size in population (points): 72.186
Average percent parens in population: 0.014
Minimum age in population: 139.2571269528816
Maximum age in population: 144.0623553587495
Average age in population: 142.2384348542873
Median age in population: 142.2971711517079
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 7
Genome diversity (% unique Plush genomes):	 0.865
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 7
Syntactic diversity (% unique Push programs):	 0.865
Total error diversity:				 0.097
Error (vector) diversity:			 0.106
Behavioral diversity:				 0.107
--- Run Statistics ---
Number of program evaluations used so far: 101000
Number of point (instruction) evaluations so far: 195656659
--- Timings ---
Current time: 1529615232827 milliseconds
Total Time:         377.7 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       133.9 seconds, 35.4%
Fitness Testing:    189.9 seconds, 50.3%
Report:              53.8 seconds, 14.2%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 100
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 101
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 101
;;******************************
;; -*- Number IO problem report - generation 101
Test total error for best: 59131.0
Test mean error for best: 29.56550
;;------------------------------
Outputs of best individual on training cases:
Correct output: 1.9526623133   | Program output: -32.0473376867
Correct output: -70.8009773522 | Program output: 8.1990226478  
Correct output: -13.7839009431 | Program output: 77.2160990569 
Correct output: 143.8727406396 | Program output: 94.8727406396 
Correct output: 136.4396027174 | Program output: 69.4396027174 
Correct output: 18.5044280613  | Program output: 116.5044280613
Correct output: 92.0568646792  | Program output: 66.0568646792 
Correct output: 71.8873476205  | Program output: 121.8873476205
Correct output: -10.8388749243 | Program output: -46.8388749243
Correct output: 0.9299825981   | Program output: 73.9299825981 
Correct output: -26.7840412284 | Program output: -26.7840412284
Correct output: -102.1264221267 | Program output: -72.1264221267
Correct output: 40.8061668642  | Program output: 48.8061668642 
Correct output: -5.2544966331  | Program output: -11.2544966331
Correct output: 102.9855886244 | Program output: 59.9855886244 
Correct output: -118.0507723766 | Program output: -61.0507723766
Correct output: 55.9371769928  | Program output: 76.9371769928 
Correct output: 4.2657989984   | Program output: 29.2657989984 
Correct output: 96.7057987603  | Program output: 114.7057987603
Correct output: 122.162446611  | Program output: 107.162446611 
Correct output: 30.0102027945  | Program output: 1.0102027945  
Correct output: 104.5822387035 | Program output: 99.5822387035 
Correct output: -1.5538743366  | Program output: -48.5538743366
Correct output: 166.8070496115 | Program output: 93.8070496115 
Correct output: 58.6188945281  | Program output: 98.6188945281 
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction in1} {:instruction float_div} {:instruction float_inc} {:instruction float_min} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_inc} {:instruction float_div} {:instruction float_inc} {:instruction float_div} {:instruction float_inc} {:instruction float_rot} {:instruction float_inc} {:instruction float_inc} {:instruction integer_dec} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_inc} {:instruction float_div} {:instruction float_inc} {:instruction integer_pop} {:instruction float_inc} {:instruction integer_yankdup} {:instruction float_inc} {:instruction float_inc} {:instruction float_dup_items} {:instruction float_inc} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_inc} {:instruction integer_mult} {:instruction integer_stackdepth} {:instruction float_inc} {:instruction float_mult} {:instruction float_dup_items} {:instruction float_div} {:instruction float_inc} {:instruction float_max} {:instruction float_dup_items} {:instruction float_inc} {:instruction float_inc} {:instruction float_mult} {:instruction integer_max} {:instruction float_div} {:instruction float_inc} {:instruction float_inc} {:instruction float_swap} {:instruction float_inc} {:instruction integer_yank} {:instruction print_float} {:instruction integer_yankdup} {:instruction float_mult} {:instruction tag_float_814} {:instruction float_flush} {:instruction in2} {:instruction integer_dup_times} {:instruction integer_sub} {:instruction float_dec} {:instruction integer_div} {:instruction integer_dec} {:instruction float_dup_items} {:instruction float_div} {:instruction tag_float_856} {:instruction integer_max} {:instruction integer_add})
Best program: (in1 float_div float_inc float_min float_inc float_yankdup float_inc float_div float_inc float_div float_inc float_rot float_inc float_inc integer_dec float_inc float_yankdup float_inc float_yankdup float_inc float_div float_inc integer_pop float_inc integer_yankdup float_inc float_inc float_dup_items float_inc float_inc float_yankdup float_inc integer_mult integer_stackdepth float_inc float_mult float_dup_items float_div float_inc float_max float_dup_items float_inc float_inc float_mult integer_max float_div float_inc float_inc float_swap float_inc integer_yank print_float integer_yankdup float_mult tag_float_814 float_flush in2 integer_dup_times integer_sub float_dec integer_div integer_dec float_dup_items float_div tag_float_856 integer_max integer_add)
Errors: [34.0 13 79.0 13 91.0 12 49.0 2 67.0 3 98.0 2 26.0 2 50.0 2 36.0 2 73.0 2 0.0 0 30.0 2 8.0 1 6.0 2 43.0 3 57.0 2 21.0 2 25.0 2 18.0 3 15.0 2 29.0 2 5.0 3 47.0 2 73.0 3 40.0 1]
Total: 1103.0
Mean: 22.06
Genome size: 67
Size: 68
Percent parens: 0.015
--- Population Statistics ---
Average total errors in population: 2855.7125587
Median total errors in population: 1103.0
Error averages by case: (102.00885080000002 12.763 139.22098930000007 12.786 152.38090560000003 12.078 121.10189570000006 3.571 136.29381000000004 4.159 157.5796455 3.246 98.23455410000001 3.26 118.01752820000004 3.528 104.50885430000007 3.417 135.89373990000004 3.174 74.3381122 2.044 103.72335419999995 3.816 79.5096642 2.467 74.92374789999998 3.24 113.58218560000002 4.205 127.88976449999994 3.806 91.66962939999999 3.175 90.75742910000002 3.185 91.38105439999997 4.141 90.42028870000001 3.289 92.3622129 4.021 80.8095568 3.987 113.7072026 3.308 143.2061657 4.229 108.46241710000001 2.834)
Error minima by case: (0.441 7 20.1588 1 8.1588 9 28.8727 1 2.5604 2 0.6111 1 17.0 1 2.8873 2 5.2987 1 0.5536 1 0.0 0 6.0 2 1.0 1 0.0 0 0.0144 2 9.0508 2 0.0 0 1.0 1 0.0 0 6.0 1 2.1695 1 0.0 0 1.4135 1 3.807 2 10.3811 1)
Average genome size in population (length): 71.289
Average program size in population (points): 72.289
Average percent parens in population: 0.014
Minimum age in population: 140.2571269528816
Maximum age in population: 145.6693722084659
Average age in population: 143.685177542113
Median age in population: 143.7094834390667
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 7
Genome diversity (% unique Plush genomes):	 0.862
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 7
Syntactic diversity (% unique Push programs):	 0.862
Total error diversity:				 0.087
Error (vector) diversity:			 0.099
Behavioral diversity:				 0.1
--- Run Statistics ---
Number of program evaluations used so far: 102000
Number of point (instruction) evaluations so far: 197438884
--- Timings ---
Current time: 1529615236373 milliseconds
Total Time:         381.2 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       135.2 seconds, 35.5%
Fitness Testing:    191.6 seconds, 50.3%
Report:              54.3 seconds, 14.2%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 101
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 102
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 102
;;******************************
;; -*- Number IO problem report - generation 102
Test total error for best: 59131.0
Test mean error for best: 29.56550
;;------------------------------
Outputs of best individual on training cases:
Correct output: 1.9526623133   | Program output: -32.0473376867
Correct output: -70.8009773522 | Program output: 8.1990226478  
Correct output: -13.7839009431 | Program output: 77.2160990569 
Correct output: 143.8727406396 | Program output: 94.8727406396 
Correct output: 136.4396027174 | Program output: 69.4396027174 
Correct output: 18.5044280613  | Program output: 116.5044280613
Correct output: 92.0568646792  | Program output: 66.0568646792 
Correct output: 71.8873476205  | Program output: 121.8873476205
Correct output: -10.8388749243 | Program output: -46.8388749243
Correct output: 0.9299825981   | Program output: 73.9299825981 
Correct output: -26.7840412284 | Program output: -26.7840412284
Correct output: -102.1264221267 | Program output: -72.1264221267
Correct output: 40.8061668642  | Program output: 48.8061668642 
Correct output: -5.2544966331  | Program output: -11.2544966331
Correct output: 102.9855886244 | Program output: 59.9855886244 
Correct output: -118.0507723766 | Program output: -61.0507723766
Correct output: 55.9371769928  | Program output: 76.9371769928 
Correct output: 4.2657989984   | Program output: 29.2657989984 
Correct output: 96.7057987603  | Program output: 114.7057987603
Correct output: 122.162446611  | Program output: 107.162446611 
Correct output: 30.0102027945  | Program output: 1.0102027945  
Correct output: 104.5822387035 | Program output: 99.5822387035 
Correct output: -1.5538743366  | Program output: -48.5538743366
Correct output: 166.8070496115 | Program output: 93.8070496115 
Correct output: 58.6188945281  | Program output: 98.6188945281 
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction in1} {:instruction float_max} {:instruction integer_div} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_inc} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_div} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_yank} {:instruction float_div} {:instruction float_inc} {:instruction float_div} {:instruction float_inc} {:instruction integer_mod} {:instruction float_inc} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_yankdup} {:instruction float_inc} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_div} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_inc} {:instruction integer_pop} {:instruction integer_mult} {:instruction float_sub} {:instruction float_yankdup} {:instruction float_div} {:instruction float_inc} {:instruction float_mult} {:instruction float_inc} {:instruction float_div} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_inc} {:instruction integer_mult} {:instruction float_inc} {:instruction float_inc} {:instruction float_max} {:instruction float_swap} {:instruction float_inc} {:instruction float_yankdup} {:instruction print_float} {:instruction float_yankdup} {:instruction float_div} {:instruction float_inc} {:instruction integer_dup_items} {:instruction integer_sub} {:instruction integer_mod} {:instruction float_mult} {:instruction float_swap} {:instruction float_yankdup} {:instruction float_div} {:instruction float_inc} {:instruction float_yankdup} {:instruction print_float} {:instruction float_flush} {:instruction integer_stackdepth})
Best program: (in1 float_max integer_div float_inc float_yankdup float_inc float_inc float_yankdup float_div float_inc float_yankdup float_yank float_div float_inc float_div float_inc integer_mod float_inc float_inc float_yankdup float_yankdup float_inc float_inc float_yankdup float_div float_inc float_yankdup float_inc float_yankdup float_inc float_yankdup float_inc float_yankdup float_inc integer_pop integer_mult float_sub float_yankdup float_div float_inc float_mult float_inc float_div float_inc float_yankdup float_inc float_yankdup float_inc float_yankdup float_inc integer_mult float_inc float_inc float_max float_swap float_inc float_yankdup print_float float_yankdup float_div float_inc integer_dup_items integer_sub integer_mod float_mult float_swap float_yankdup float_div float_inc float_yankdup print_float float_flush integer_stackdepth)
Errors: [34.0 13 79.0 13 91.0 12 49.0 2 67.0 3 98.0 2 26.0 2 50.0 2 36.0 2 73.0 2 0.0 0 30.0 2 8.0 1 6.0 2 43.0 3 57.0 2 21.0 2 25.0 2 18.0 3 15.0 2 29.0 2 5.0 3 47.0 2 73.0 3 40.0 1]
Total: 1103.0
Mean: 22.06
Genome size: 73
Size: 74
Percent parens: 0.014
--- Population Statistics ---
Average total errors in population: 2779.6263957000006
Median total errors in population: 1103.0
Error averages by case: (99.0875599 12.733 130.80627700000005 12.793 150.36692699999998 12.055 119.21353650000006 3.524 134.21431590000003 4.131 155.44303660000006 3.211 95.93173300000001 3.24 115.91723300000001 3.474 101.78191080000002 3.32 133.59745430000007 3.141 71.5837861 1.955 101.41950369999998 3.707 77.0557242 2.423 69.62561920000002 3.193 111.27572460000003 4.142 126.02082229999998 3.719 88.8577314 3.177 83.33336440000005 3.157 89.680531 4.112 88.42947889999998 3.265 85.13590750000002 4.011 79.0950078 3.914 111.15288699999998 3.25 141.4384471 4.175 106.55887650000003 2.781)
Error minima by case: (0.0989 7 16.1467 1 9.8193 8 18.8727 2 2.5604 2 0.4956 1 3.6769 1 3.205 2 2.8926 1 0.7312 1 0.0 0 10.0 2 1.0 1 0.0 0 6.5543 2 9.0508 2 1.0 1 0.132 1 1.0 1 5.0 1 3.0102 1 0.0 0 1.1075 1 6.193 2 1.5742 1)
Average genome size in population (length): 70.847
Average program size in population (points): 71.847
Average percent parens in population: 0.014
Minimum age in population: 141.2571269528816
Maximum age in population: 147.0567839376657
Average age in population: 145.0637150516775
Median age in population: 145.1097690262101
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 7
Genome diversity (% unique Plush genomes):	 0.853
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 7
Syntactic diversity (% unique Push programs):	 0.853
Total error diversity:				 0.093
Error (vector) diversity:			 0.104
Behavioral diversity:				 0.104
--- Run Statistics ---
Number of program evaluations used so far: 103000
Number of point (instruction) evaluations so far: 199210059
--- Timings ---
Current time: 1529615239953 milliseconds
Total Time:         384.8 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       136.5 seconds, 35.5%
Fitness Testing:    193.4 seconds, 50.3%
Report:              54.8 seconds, 14.2%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 102
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 103
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 103
;;******************************
;; -*- Number IO problem report - generation 103
Test total error for best: 59131.0
Test mean error for best: 29.56550
;;------------------------------
Outputs of best individual on training cases:
Correct output: 1.9526623133   | Program output: -32.0473376867
Correct output: -70.8009773522 | Program output: 8.1990226478  
Correct output: -13.7839009431 | Program output: 77.2160990569 
Correct output: 143.8727406396 | Program output: 94.8727406396 
Correct output: 136.4396027174 | Program output: 69.4396027174 
Correct output: 18.5044280613  | Program output: 116.5044280613
Correct output: 92.0568646792  | Program output: 66.0568646792 
Correct output: 71.8873476205  | Program output: 121.8873476205
Correct output: -10.8388749243 | Program output: -46.8388749243
Correct output: 0.9299825981   | Program output: 73.9299825981 
Correct output: -26.7840412284 | Program output: -26.7840412284
Correct output: -102.1264221267 | Program output: -72.1264221267
Correct output: 40.8061668642  | Program output: 48.8061668642 
Correct output: -5.2544966331  | Program output: -11.2544966331
Correct output: 102.9855886244 | Program output: 59.9855886244 
Correct output: -118.0507723766 | Program output: -61.0507723766
Correct output: 55.9371769928  | Program output: 76.9371769928 
Correct output: 4.2657989984   | Program output: 29.2657989984 
Correct output: 96.7057987603  | Program output: 114.7057987603
Correct output: 122.162446611  | Program output: 107.162446611 
Correct output: 30.0102027945  | Program output: 1.0102027945  
Correct output: 104.5822387035 | Program output: 99.5822387035 
Correct output: -1.5538743366  | Program output: -48.5538743366
Correct output: 166.8070496115 | Program output: 93.8070496115 
Correct output: 58.6188945281  | Program output: 98.6188945281 
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction in1} {:instruction integer_max} {:instruction integer_dup_items} {:instruction integer_sub} {:instruction float_sub} {:instruction float_yankdup} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_inc} {:instruction float_inc} {:instruction tag_integer_641} {:instruction float_div} {:instruction float_inc} {:instruction float_inc} {:instruction float_rot} {:instruction float_inc} {:instruction float_inc} {:instruction float_div} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_inc} {:instruction integer_dup_items} {:instruction float_inc} {:instruction float_div} {:instruction float_inc} {:instruction integer_pop} {:instruction float_inc} {:instruction integer_yankdup} {:instruction float_inc} {:instruction float_inc} {:instruction float_dup_items} {:instruction float_inc} {:instruction float_mult} {:instruction float_dup_items} {:instruction float_div} {:instruction float_yankdup} {:instruction integer_yankdup} {:instruction float_dup_items} {:instruction float_dup_times} {:instruction float_inc} {:instruction float_swap} {:instruction float_dup_items} {:instruction float_div} {:instruction float_inc} {:instruction float_sub} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_inc} {:instruction integer_mod} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_yank} {:instruction float_inc} {:instruction float_yankdup} {:instruction print_float} {:instruction float_inc} {:instruction float_swap} {:instruction float_yankdup} {:instruction float_div} {:instruction float_inc} {:instruction integer_dup_items} {:instruction integer_sub} {:instruction integer_mod} {:instruction in2} {:instruction integer_fromfloat})
Best program: (in1 integer_max integer_dup_items integer_sub float_sub float_yankdup float_inc float_yankdup float_inc float_inc tag_integer_641 float_div float_inc float_inc float_rot float_inc float_inc float_div float_inc float_yankdup float_inc integer_dup_items float_inc float_div float_inc integer_pop float_inc integer_yankdup float_inc float_inc float_dup_items float_inc float_mult float_dup_items float_div float_yankdup integer_yankdup float_dup_items float_dup_times float_inc float_swap float_dup_items float_div float_inc float_sub float_inc float_yankdup float_inc float_yankdup float_inc integer_mod float_inc float_inc float_inc float_yank float_inc float_yankdup print_float float_inc float_swap float_yankdup float_div float_inc integer_dup_items integer_sub integer_mod in2 integer_fromfloat)
Errors: [34.0 13 79.0 13 91.0 12 49.0 2 67.0 3 98.0 2 26.0 2 50.0 2 36.0 2 73.0 2 0.0 0 30.0 2 8.0 1 6.0 2 43.0 3 57.0 2 21.0 2 25.0 2 18.0 3 15.0 2 29.0 2 5.0 3 47.0 2 73.0 3 40.0 1]
Total: 1103.0
Mean: 22.06
Genome size: 68
Size: 69
Percent parens: 0.014
--- Population Statistics ---
Average total errors in population: 2672.4197107999994
Median total errors in population: 1103.0
Error averages by case: (96.1618226 12.783 128.72605870000007 12.791 144.73748630000003 12.053 114.12183000000005 3.506 129.49805789999996 4.105 150.80417110000002 3.178 91.0441709 3.178 111.31756420000004 3.419 98.5841283 3.3 128.15603150000004 3.097 68.37980089999999 1.913 97.77224079999995 3.686 71.8212194 2.371 66.9209532 3.124 106.5795325 4.113 122.30187149999993 3.688 84.0685607 3.107 80.66689229999999 3.113 84.5908718 4.051 83.96739050000002 3.214 81.87500769999995 4.102 73.3460586 3.893 107.7193556 3.214 136.44375259999995 4.135 100.96188120000004 2.719)
Error minima by case: (0.2876 8 2.2065 2 12.7839 8 41.0 1 32.0 2 0.4978 1 18.0 1 26.0 2 4.8389 1 0.0719 1 0.0 0 6.0 2 0.0 0 0.0 0 35.0 2 33.0 2 1.0 1 0.0141 1 3.0 1 7.0 1 1.9647 1 0.0 0 0.1075 1 26.0 2 16.0 1)
Average genome size in population (length): 71.06
Average program size in population (points): 72.06
Average percent parens in population: 0.014
Minimum age in population: 143.9661554736208
Maximum age in population: 148.654871086053
Average age in population: 146.5030002341984
Median age in population: 146.5450110505808
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 7
Genome diversity (% unique Plush genomes):	 0.849
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 7
Syntactic diversity (% unique Push programs):	 0.849
Total error diversity:				 0.095
Error (vector) diversity:			 0.102
Behavioral diversity:				 0.102
--- Run Statistics ---
Number of program evaluations used so far: 104000
Number of point (instruction) evaluations so far: 200986609
--- Timings ---
Current time: 1529615243470 milliseconds
Total Time:         388.3 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       137.8 seconds, 35.5%
Fitness Testing:    195.1 seconds, 50.2%
Report:              55.3 seconds, 14.2%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 103
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 104
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 104
;;******************************
;; -*- Number IO problem report - generation 104
Test total error for best: 59131.0
Test mean error for best: 29.56550
;;------------------------------
Outputs of best individual on training cases:
Correct output: 1.9526623133   | Program output: -32.0473376867
Correct output: -70.8009773522 | Program output: 8.1990226478  
Correct output: -13.7839009431 | Program output: 77.2160990569 
Correct output: 143.8727406396 | Program output: 94.8727406396 
Correct output: 136.4396027174 | Program output: 69.4396027174 
Correct output: 18.5044280613  | Program output: 116.5044280613
Correct output: 92.0568646792  | Program output: 66.0568646792 
Correct output: 71.8873476205  | Program output: 121.8873476205
Correct output: -10.8388749243 | Program output: -46.8388749243
Correct output: 0.9299825981   | Program output: 73.9299825981 
Correct output: -26.7840412284 | Program output: -26.7840412284
Correct output: -102.1264221267 | Program output: -72.1264221267
Correct output: 40.8061668642  | Program output: 48.8061668642 
Correct output: -5.2544966331  | Program output: -11.2544966331
Correct output: 102.9855886244 | Program output: 59.9855886244 
Correct output: -118.0507723766 | Program output: -61.0507723766
Correct output: 55.9371769928  | Program output: 76.9371769928 
Correct output: 4.2657989984   | Program output: 29.2657989984 
Correct output: 96.7057987603  | Program output: 114.7057987603
Correct output: 122.162446611  | Program output: 107.162446611 
Correct output: 30.0102027945  | Program output: 1.0102027945  
Correct output: 104.5822387035 | Program output: 99.5822387035 
Correct output: -1.5538743366  | Program output: -48.5538743366
Correct output: 166.8070496115 | Program output: 93.8070496115 
Correct output: 58.6188945281  | Program output: 98.6188945281 
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction in1} {:instruction integer_max} {:instruction integer_dup_items} {:instruction float_yank} {:instruction integer_yankdup} {:instruction integer_div} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_inc} {:instruction float_inc} {:instruction integer_mod} {:instruction float_inc} {:instruction integer_dup_items} {:instruction float_inc} {:instruction float_rot} {:instruction float_inc} {:instruction float_inc} {:instruction float_rot} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_yankdup} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_inc} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_div} {:instruction float_inc} {:instruction integer_shove} {:instruction float_inc} {:instruction float_rot} {:instruction float_inc} {:instruction float_inc} {:instruction float_mult} {:instruction float_inc} {:instruction float_yankdup} {:instruction integer_mod} {:instruction float_add} {:instruction float_mult} {:instruction float_dup_items} {:instruction 82} {:instruction float_inc} {:instruction integer_dup} {:instruction float_inc} {:instruction float_inc} {:instruction float_mult} {:instruction integer_max} {:instruction float_div} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction print_float} {:instruction float_max} {:instruction integer_mod} {:instruction float_inc} {:instruction float_inc} {:instruction integer_yankdup} {:instruction print_float} {:instruction integer_div} {:instruction float_sub} {:instruction float_dup_items} {:instruction float_rot} {:instruction float_mod} {:instruction integer_yank})
Best program: (in1 integer_max integer_dup_items float_yank integer_yankdup integer_div float_inc float_yankdup float_inc float_inc integer_mod float_inc integer_dup_items float_inc float_rot float_inc float_inc float_rot float_inc float_yankdup float_inc float_yankdup float_yankdup float_inc float_yankdup float_inc float_inc float_yankdup float_div float_inc integer_shove float_inc float_rot float_inc float_inc float_mult float_inc float_yankdup integer_mod float_add float_mult float_dup_items 82 float_inc integer_dup float_inc float_inc float_mult integer_max float_div float_inc float_inc float_inc float_inc print_float float_max integer_mod float_inc float_inc integer_yankdup print_float integer_div float_sub float_dup_items float_rot float_mod integer_yank)
Errors: [34.0 13 79.0 13 91.0 12 49.0 2 67.0 3 98.0 2 26.0 2 50.0 2 36.0 2 73.0 2 0.0 0 30.0 2 8.0 1 6.0 2 43.0 3 57.0 2 21.0 2 25.0 2 18.0 3 15.0 2 29.0 2 5.0 3 47.0 2 73.0 3 40.0 1]
Total: 1103.0
Mean: 22.06
Genome size: 67
Size: 68
Percent parens: 0.015
--- Population Statistics ---
Average total errors in population: 2767.2534313
Median total errors in population: 1103.0
Error averages by case: (100.1042524 12.756 130.07860870000005 12.789 149.01255789999996 12.053 119.15983600000008 3.548 134.10359359999993 4.153 153.7749711 3.239 95.75941970000004 3.254 114.93327470000003 3.491 102.44912660000004 3.354 132.51100180000006 3.182 71.9830004 1.975 101.60687599999999 3.722 76.19530259999998 2.444 69.13567250000004 3.193 111.2075504 4.18 126.50935859999994 3.746 87.96026079999997 3.179 82.5359421 3.182 88.22510260000004 4.112 87.98732280000003 3.283 82.8635024 3.981 78.18271249999998 3.97 111.42022339999995 3.254 141.0604938 4.206 105.43046790000004 2.817)
Error minima by case: (1.0473 8 21.5526 1 6.3444 9 40.0 1 58.0 2 0.0343 1 17.0 1 24.127 2 5.6722 1 0.5536 1 0.0 0 5.4882 2 0.0 0 0.0 0 34.0 2 21.4125 2 0.0 0 0.7342 1 0.0 0 6.0 1 1.7684 1 0.0 0 0.3854 1 16.6448 2 14.2981 1)
Average genome size in population (length): 71.517
Average program size in population (points): 72.517
Average percent parens in population: 0.014
Minimum age in population: 145.2514058321092
Maximum age in population: 149.771199332761
Average age in population: 147.857729092272
Median age in population: 147.8496813880422
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 7
Genome diversity (% unique Plush genomes):	 0.862
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 7
Syntactic diversity (% unique Push programs):	 0.862
Total error diversity:				 0.091
Error (vector) diversity:			 0.1
Behavioral diversity:				 0.1
--- Run Statistics ---
Number of program evaluations used so far: 105000
Number of point (instruction) evaluations so far: 202774609
--- Timings ---
Current time: 1529615247027 milliseconds
Total Time:         391.9 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       139.1 seconds, 35.5%
Fitness Testing:    196.9 seconds, 50.2%
Report:              55.7 seconds, 14.2%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 104
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 105
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 105
;;******************************
;; -*- Number IO problem report - generation 105
Test total error for best: 59131.0
Test mean error for best: 29.56550
;;------------------------------
Outputs of best individual on training cases:
Correct output: 1.9526623133   | Program output: -32.0473376867
Correct output: -70.8009773522 | Program output: 8.1990226478  
Correct output: -13.7839009431 | Program output: 77.2160990569 
Correct output: 143.8727406396 | Program output: 94.8727406396 
Correct output: 136.4396027174 | Program output: 69.4396027174 
Correct output: 18.5044280613  | Program output: 116.5044280613
Correct output: 92.0568646792  | Program output: 66.0568646792 
Correct output: 71.8873476205  | Program output: 121.8873476205
Correct output: -10.8388749243 | Program output: -46.8388749243
Correct output: 0.9299825981   | Program output: 73.9299825981 
Correct output: -26.7840412284 | Program output: -26.7840412284
Correct output: -102.1264221267 | Program output: -72.1264221267
Correct output: 40.8061668642  | Program output: 48.8061668642 
Correct output: -5.2544966331  | Program output: -11.2544966331
Correct output: 102.9855886244 | Program output: 59.9855886244 
Correct output: -118.0507723766 | Program output: -61.0507723766
Correct output: 55.9371769928  | Program output: 76.9371769928 
Correct output: 4.2657989984   | Program output: 29.2657989984 
Correct output: 96.7057987603  | Program output: 114.7057987603
Correct output: 122.162446611  | Program output: 107.162446611 
Correct output: 30.0102027945  | Program output: 1.0102027945  
Correct output: 104.5822387035 | Program output: 99.5822387035 
Correct output: -1.5538743366  | Program output: -48.5538743366
Correct output: 166.8070496115 | Program output: 93.8070496115 
Correct output: 58.6188945281  | Program output: 98.6188945281 
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction in1} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_inc} {:instruction float_inc} {:instruction float_max} {:instruction float_div} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_yank} {:instruction float_div} {:instruction float_inc} {:instruction float_div} {:instruction float_inc} {:instruction integer_mod} {:instruction float_inc} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_yankdup} {:instruction float_inc} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_div} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_inc} {:instruction integer_min} {:instruction float_inc} {:instruction integer_pop} {:instruction integer_mult} {:instruction float_sub} {:instruction float_yankdup} {:instruction float_div} {:instruction float_inc} {:instruction float_mult} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_inc} {:instruction integer_swap} {:instruction float_inc} {:instruction integer_mod} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_yank} {:instruction float_inc} {:instruction print_float} {:instruction float_swap} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_yank} {:instruction float_inc} {:instruction float_swap} {:instruction float_inc} {:instruction float_yankdup} {:instruction print_float} {:instruction float_flush} {:instruction tag_float_856} {:instruction float_inc} {:instruction float_yankdup} {:instruction print_float} {:instruction float_flush} {:instruction float_inc} {:instruction float_inc} {:instruction integer_shove} {:instruction print_float} {:instruction integer_stackdepth} {:instruction -44} {:instruction float_pop} {:instruction integer_shove})
Best program: (in1 float_inc float_yankdup float_inc float_inc float_max float_div float_inc float_yankdup float_yank float_div float_inc float_div float_inc integer_mod float_inc float_inc float_yankdup float_yankdup float_inc float_inc float_yankdup float_div float_inc float_yankdup float_inc float_yankdup float_inc float_yankdup float_inc integer_min float_inc integer_pop integer_mult float_sub float_yankdup float_div float_inc float_mult float_inc float_yankdup float_inc float_yankdup float_inc integer_swap float_inc integer_mod float_inc float_inc float_inc float_yank float_inc print_float float_swap float_inc float_inc float_inc float_yank float_inc float_swap float_inc float_yankdup print_float float_flush tag_float_856 float_inc float_yankdup print_float float_flush float_inc float_inc integer_shove print_float integer_stackdepth -44 float_pop integer_shove)
Errors: [34.0 13 79.0 13 91.0 12 49.0 2 67.0 3 98.0 2 26.0 2 50.0 2 36.0 2 73.0 2 0.0 0 30.0 2 8.0 1 6.0 2 43.0 3 57.0 2 21.0 2 25.0 2 18.0 3 15.0 2 29.0 2 5.0 3 47.0 2 73.0 3 40.0 1]
Total: 1103.0
Mean: 22.06
Genome size: 77
Size: 78
Percent parens: 0.013
--- Population Statistics ---
Average total errors in population: 2949.4548984000003
Median total errors in population: 1103.0
Error averages by case: (104.34452370000001 12.696 144.56899070000003 12.814 156.19234270000007 12.049 124.7902835 3.679 139.8419294 4.273 161.08129049999985 3.324 101.57099849999999 3.333 122.75335590000003 3.576 107.29755070000003 3.46 139.79454060000006 3.249 77.20049689999999 2.115 109.27373209999999 3.867 82.58791360000001 2.555 77.14721069999999 3.288 117.0690957 4.267 133.45094199999997 3.879 94.75504690000001 3.28 95.78959450000002 3.26 94.8268093 4.196 94.0892098 3.387 95.28189110000001 4.12 84.3572395 4.051 115.8235516 3.368 146.96851430000004 4.313 113.28184420000002 2.917)
Error minima by case: (0.0473 7 13.8504 1 13.8848 9 38.0 2 56.0 2 0.1378 1 15.0 1 2.9637 2 4.5515 1 0.3909 1 0.0 0 10.0 2 0.0 0 0.0 0 32.0 2 37.0 2 1.0 1 0.2283 1 2.0 1 4.0 1 5.0102 1 0.0 0 1.5487 1 62.0 2 1.3356 1)
Average genome size in population (length): 70.979
Average program size in population (points): 71.979
Average percent parens in population: 0.014
Minimum age in population: 146.2770454662957
Maximum age in population: 151.138932560228
Average age in population: 149.3241786152999
Median age in population: 149.3880616209389
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 8
Genome diversity (% unique Plush genomes):	 0.862
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 8
Syntactic diversity (% unique Push programs):	 0.862
Total error diversity:				 0.087
Error (vector) diversity:			 0.096
Behavioral diversity:				 0.097
--- Run Statistics ---
Number of program evaluations used so far: 106000
Number of point (instruction) evaluations so far: 204549109
--- Timings ---
Current time: 1529615250574 milliseconds
Total Time:         395.4 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       140.4 seconds, 35.5%
Fitness Testing:    198.7 seconds, 50.2%
Report:              56.2 seconds, 14.2%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 105
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 106
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 106
;;******************************
;; -*- Number IO problem report - generation 106
Test total error for best: 59131.0
Test mean error for best: 29.56550
;;------------------------------
Outputs of best individual on training cases:
Correct output: 1.9526623133   | Program output: -32.0473376867
Correct output: -70.8009773522 | Program output: 8.1990226478  
Correct output: -13.7839009431 | Program output: 77.2160990569 
Correct output: 143.8727406396 | Program output: 94.8727406396 
Correct output: 136.4396027174 | Program output: 69.4396027174 
Correct output: 18.5044280613  | Program output: 116.5044280613
Correct output: 92.0568646792  | Program output: 66.0568646792 
Correct output: 71.8873476205  | Program output: 121.8873476205
Correct output: -10.8388749243 | Program output: -46.8388749243
Correct output: 0.9299825981   | Program output: 73.9299825981 
Correct output: -26.7840412284 | Program output: -26.7840412284
Correct output: -102.1264221267 | Program output: -72.1264221267
Correct output: 40.8061668642  | Program output: 48.8061668642 
Correct output: -5.2544966331  | Program output: -11.2544966331
Correct output: 102.9855886244 | Program output: 59.9855886244 
Correct output: -118.0507723766 | Program output: -61.0507723766
Correct output: 55.9371769928  | Program output: 76.9371769928 
Correct output: 4.2657989984   | Program output: 29.2657989984 
Correct output: 96.7057987603  | Program output: 114.7057987603
Correct output: 122.162446611  | Program output: 107.162446611 
Correct output: 30.0102027945  | Program output: 1.0102027945  
Correct output: 104.5822387035 | Program output: 99.5822387035 
Correct output: -1.5538743366  | Program output: -48.5538743366
Correct output: 166.8070496115 | Program output: 93.8070496115 
Correct output: 58.6188945281  | Program output: 98.6188945281 
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction in1} {:instruction integer_max} {:instruction float_shove} {:instruction float_mod} {:instruction integer_mod} {:instruction float_sub} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_inc} {:instruction integer_shove} {:instruction float_inc} {:instruction float_div} {:instruction float_inc} {:instruction float_div} {:instruction float_inc} {:instruction float_rot} {:instruction float_inc} {:instruction float_inc} {:instruction integer_yank} {:instruction float_inc} {:instruction integer_max} {:instruction float_div} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_inc} {:instruction float_div} {:instruction float_inc} {:instruction float_div} {:instruction float_inc} {:instruction float_rot} {:instruction float_inc} {:instruction float_inc} {:instruction float_div} {:instruction float_dup_items} {:instruction float_div} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_yank} {:instruction float_yankdup} {:instruction float_dup_times} {:instruction float_div} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_inc} {:instruction float_dup} {:instruction float_inc} {:instruction integer_mod} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_yank} {:instruction float_inc} {:instruction print_integer} {:instruction print_float} {:instruction float_flush} {:instruction integer_dup_times} {:instruction integer_div} {:instruction float_mult} {:instruction float_dup_items} {:instruction float_dec} {:instruction float_inc} {:instruction float_swap} {:instruction in2} {:instruction integer_fromfloat})
Best program: (in1 integer_max float_shove float_mod integer_mod float_sub float_inc float_yankdup float_inc integer_shove float_inc float_div float_inc float_div float_inc float_rot float_inc float_inc integer_yank float_inc integer_max float_div float_inc float_yankdup float_inc float_yankdup float_inc float_div float_inc float_div float_inc float_rot float_inc float_inc float_div float_dup_items float_div float_inc float_yankdup float_yank float_yankdup float_dup_times float_div float_inc float_yankdup float_inc float_yankdup float_inc float_dup float_inc integer_mod float_inc float_inc float_inc float_yank float_inc print_integer print_float float_flush integer_dup_times integer_div float_mult float_dup_items float_dec float_inc float_swap in2 integer_fromfloat)
Errors: [34.0 13 79.0 13 91.0 12 49.0 2 67.0 3 98.0 2 26.0 2 50.0 2 36.0 2 73.0 2 0.0 0 30.0 2 8.0 1 6.0 2 43.0 3 57.0 2 21.0 2 25.0 2 18.0 3 15.0 2 29.0 2 5.0 3 47.0 2 73.0 3 40.0 1]
Total: 1103.0
Mean: 22.06
Genome size: 68
Size: 69
Percent parens: 0.014
--- Population Statistics ---
Average total errors in population: 2747.3463131999997
Median total errors in population: 1103.0
Error averages by case: (97.85161179999999 12.753 134.14476190000002 12.762 148.14667450000005 12.067 117.46280400000006 3.492 132.83570449999996 4.094 152.9864828 3.168 94.3731551 3.193 113.70766990000001 3.434 100.29362669999999 3.307 131.6006384 3.1 70.03576259999998 1.947 99.76577269999997 3.694 75.17231530000002 2.361 69.87073950000003 3.163 109.91624429999997 4.108 124.23320839999991 3.718 87.356581 3.106 85.20842139999996 3.131 87.0096978 4.061 86.43242559999995 3.219 86.75052829999997 4.044 76.69659460000003 3.917 109.61708400000002 3.205 139.7534316 4.155 104.19137650000003 2.734)
Error minima by case: (0.5178 8 58.0 1 14.8585 9 40.0 1 58.0 2 0.1378 1 17.0 1 29.0 2 3.1611 1 1.4942 1 0.0 0 9.0 2 0.0 0 0.0 0 34.0 2 36.0 2 0.0 0 0.2283 1 0.0 0 6.0 1 1.8777 1 0.0 0 2.5935 1 64.0 2 19.0 1)
Average genome size in population (length): 70.789
Average program size in population (points): 71.789
Average percent parens in population: 0.014
Minimum age in population: 148.1649171700862
Maximum age in population: 152.5351778913879
Average age in population: 150.7350163610781
Median age in population: 150.8033601017079
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 6
Genome diversity (% unique Plush genomes):	 0.861
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 6
Syntactic diversity (% unique Push programs):	 0.861
Total error diversity:				 0.09
Error (vector) diversity:			 0.1
Behavioral diversity:				 0.101
--- Run Statistics ---
Number of program evaluations used so far: 107000
Number of point (instruction) evaluations so far: 206318884
--- Timings ---
Current time: 1529615254132 milliseconds
Total Time:         399.0 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       141.7 seconds, 35.5%
Fitness Testing:    200.4 seconds, 50.2%
Report:              56.7 seconds, 14.2%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 106
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 107
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 107
;;******************************
;; -*- Number IO problem report - generation 107
Test total error for best: 59131.0
Test mean error for best: 29.56550
;;------------------------------
Outputs of best individual on training cases:
Correct output: 1.9526623133   | Program output: -32.0473376867
Correct output: -70.8009773522 | Program output: 8.1990226478  
Correct output: -13.7839009431 | Program output: 77.2160990569 
Correct output: 143.8727406396 | Program output: 94.8727406396 
Correct output: 136.4396027174 | Program output: 69.4396027174 
Correct output: 18.5044280613  | Program output: 116.5044280613
Correct output: 92.0568646792  | Program output: 66.0568646792 
Correct output: 71.8873476205  | Program output: 121.8873476205
Correct output: -10.8388749243 | Program output: -46.8388749243
Correct output: 0.9299825981   | Program output: 73.9299825981 
Correct output: -26.7840412284 | Program output: -26.7840412284
Correct output: -102.1264221267 | Program output: -72.1264221267
Correct output: 40.8061668642  | Program output: 48.8061668642 
Correct output: -5.2544966331  | Program output: -11.2544966331
Correct output: 102.9855886244 | Program output: 59.9855886244 
Correct output: -118.0507723766 | Program output: -61.0507723766
Correct output: 55.9371769928  | Program output: 76.9371769928 
Correct output: 4.2657989984   | Program output: 29.2657989984 
Correct output: 96.7057987603  | Program output: 114.7057987603
Correct output: 122.162446611  | Program output: 107.162446611 
Correct output: 30.0102027945  | Program output: 1.0102027945  
Correct output: 104.5822387035 | Program output: 99.5822387035 
Correct output: -1.5538743366  | Program output: -48.5538743366
Correct output: 166.8070496115 | Program output: 93.8070496115 
Correct output: 58.6188945281  | Program output: 98.6188945281 
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction in1} {:instruction integer_max} {:instruction integer_dup_items} {:instruction integer_sub} {:instruction integer_yankdup} {:instruction integer_div} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_inc} {:instruction float_inc} {:instruction integer_mod} {:instruction float_inc} {:instruction integer_dup_items} {:instruction float_inc} {:instruction float_rot} {:instruction float_inc} {:instruction float_rot} {:instruction float_inc} {:instruction float_inc} {:instruction float_min} {:instruction float_inc} {:instruction float_frominteger} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_inc} {:instruction float_inc} {:instruction integer_dup_times} {:instruction float_div} {:instruction float_inc} {:instruction integer_div} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_inc} {:instruction integer_mod} {:instruction float_inc} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_div} {:instruction integer_flush} {:instruction float_yankdup} {:instruction float_mult} {:instruction float_shove} {:instruction float_yankdup} {:instruction float_inc} {:instruction float_mod} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_yank} {:instruction float_inc} {:instruction float_yankdup} {:instruction print_float} {:instruction float_flush} {:instruction integer_stackdepth} {:instruction tag_float_856} {:instruction float_add} {:instruction print_float} {:instruction float_inc} {:instruction float_sub} {:instruction float_inc} {:instruction float_yankdup} {:instruction print_float} {:instruction float_flush} {:instruction integer_stackdepth} {:instruction float_dup} {:instruction tag_float_856} {:instruction float_add} {:instruction integer_mod} {:instruction print_float} {:instruction integer_stackdepth} {:instruction float_flush} {:instruction integer_add} {:instruction integer_shove})
Best program: (in1 integer_max integer_dup_items integer_sub integer_yankdup integer_div float_inc float_yankdup float_inc float_inc integer_mod float_inc integer_dup_items float_inc float_rot float_inc float_rot float_inc float_inc float_min float_inc float_frominteger float_inc float_yankdup float_inc float_inc integer_dup_times float_div float_inc integer_div float_inc float_yankdup float_inc float_yankdup float_inc float_yankdup float_inc integer_mod float_inc float_inc float_yankdup float_div integer_flush float_yankdup float_mult float_shove float_yankdup float_inc float_mod float_inc float_inc float_inc float_yank float_inc float_yankdup print_float float_flush integer_stackdepth tag_float_856 float_add print_float float_inc float_sub float_inc float_yankdup print_float float_flush integer_stackdepth float_dup tag_float_856 float_add integer_mod print_float integer_stackdepth float_flush integer_add integer_shove)
Errors: [34.0 13 79.0 13 91.0 12 49.0 2 67.0 3 98.0 2 26.0 2 50.0 2 36.0 2 73.0 2 0.0 0 30.0 2 8.0 1 6.0 2 43.0 3 57.0 2 21.0 2 25.0 2 18.0 3 15.0 2 29.0 2 5.0 3 47.0 2 73.0 3 40.0 1]
Total: 1103.0
Mean: 22.06
Genome size: 77
Size: 78
Percent parens: 0.013
--- Population Statistics ---
Average total errors in population: 2843.292507100001
Median total errors in population: 1103.0
Error averages by case: (102.73824889999997 12.774 136.5387402 12.742 150.9273426 12.078 121.3649711 3.577 136.60755400000002 4.179 155.78936679999998 3.237 98.34226999999998 3.252 116.49408720000001 3.514 105.20982699999999 3.402 134.42667500000002 3.167 74.9755202 2.046 103.60952799999998 3.761 79.00243539999998 2.478 75.22495300000006 3.235 113.80353050000001 4.202 127.94756829999999 3.78 91.36459350000001 3.177 87.42617649999995 3.17 91.07121740000004 4.129 90.44509700000002 3.277 90.65850340000001 4.067 80.77499870000001 3.967 114.3650061 3.296 143.5815808 4.219 107.04171550000002 2.835)
Error minima by case: (0.0473 8 18.179 1 6.179 8 32.0 2 50.0 2 0.2436 1 9.0 1 7.2782 2 6.8389 1 1.07 1 0.0 0 1.2005 2 0.0 0 0.0 0 26.0 2 28.2005 2 0.0 0 0.0282 1 1.0 1 2.0 1 1.7206 1 0.0 0 2.4461 1 56.0 2 5.9903 1)
Average genome size in population (length): 70.747
Average program size in population (points): 71.747
Average percent parens in population: 0.014
Minimum age in population: 150.0126056839114
Maximum age in population: 153.9260652154053
Average age in population: 152.1518614772182
Median age in population: 152.1874393349439
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 6
Genome diversity (% unique Plush genomes):	 0.86
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 6
Syntactic diversity (% unique Push programs):	 0.86
Total error diversity:				 0.095
Error (vector) diversity:			 0.104
Behavioral diversity:				 0.104
--- Run Statistics ---
Number of program evaluations used so far: 108000
Number of point (instruction) evaluations so far: 208087559
--- Timings ---
Current time: 1529615257777 milliseconds
Total Time:         402.6 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       143.1 seconds, 35.5%
Fitness Testing:    202.2 seconds, 50.2%
Report:              57.2 seconds, 14.2%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 107
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 108
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 108
;;******************************
;; -*- Number IO problem report - generation 108
Test total error for best: 59131.0
Test mean error for best: 29.56550
;;------------------------------
Outputs of best individual on training cases:
Correct output: 1.9526623133   | Program output: -32.0473376867
Correct output: -70.8009773522 | Program output: 8.1990226478  
Correct output: -13.7839009431 | Program output: 77.2160990569 
Correct output: 143.8727406396 | Program output: 94.8727406396 
Correct output: 136.4396027174 | Program output: 69.4396027174 
Correct output: 18.5044280613  | Program output: 116.5044280613
Correct output: 92.0568646792  | Program output: 66.0568646792 
Correct output: 71.8873476205  | Program output: 121.8873476205
Correct output: -10.8388749243 | Program output: -46.8388749243
Correct output: 0.9299825981   | Program output: 73.9299825981 
Correct output: -26.7840412284 | Program output: -26.7840412284
Correct output: -102.1264221267 | Program output: -72.1264221267
Correct output: 40.8061668642  | Program output: 48.8061668642 
Correct output: -5.2544966331  | Program output: -11.2544966331
Correct output: 102.9855886244 | Program output: 59.9855886244 
Correct output: -118.0507723766 | Program output: -61.0507723766
Correct output: 55.9371769928  | Program output: 76.9371769928 
Correct output: 4.2657989984   | Program output: 29.2657989984 
Correct output: 96.7057987603  | Program output: 114.7057987603
Correct output: 122.162446611  | Program output: 107.162446611 
Correct output: 30.0102027945  | Program output: 1.0102027945  
Correct output: 104.5822387035 | Program output: 99.5822387035 
Correct output: -1.5538743366  | Program output: -48.5538743366
Correct output: 166.8070496115 | Program output: 93.8070496115 
Correct output: 58.6188945281  | Program output: 98.6188945281 
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction in1} {:instruction float_div} {:instruction float_shove} {:instruction integer_sub} {:instruction integer_min} {:instruction integer_div} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_mod} {:instruction float_inc} {:instruction integer_dup_items} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_yank} {:instruction float_inc} {:instruction integer_max} {:instruction float_div} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_inc} {:instruction integer_dup_times} {:instruction float_inc} {:instruction float_div} {:instruction float_inc} {:instruction float_div} {:instruction float_inc} {:instruction float_rot} {:instruction float_inc} {:instruction float_inc} {:instruction float_div} {:instruction float_dup_items} {:instruction float_div} {:instruction float_inc} {:instruction float_yankdup} {:instruction integer_pop} {:instruction float_mult} {:instruction tag_integer_986} {:instruction float_div} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_inc} {:instruction integer_mod} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_yank} {:instruction float_inc} {:instruction print_integer} {:instruction print_float} {:instruction float_flush} {:instruction integer_dup_times} {:instruction integer_div} {:instruction integer_shove} {:instruction integer_stackdepth} {:instruction tag_float_856} {:instruction float_dup_times} {:instruction float_flush} {:instruction integer_pop} {:instruction integer_dup_times} {:instruction integer_stackdepth} {:instruction tag_float_856} {:instruction float_inc} {:instruction integer_div} {:instruction float_mult} {:instruction float_dup_times})
Best program: (in1 float_div float_shove integer_sub integer_min integer_div float_inc float_inc float_inc integer_mod float_inc integer_dup_items float_inc float_inc float_inc integer_yank float_inc integer_max float_div float_inc float_yankdup float_inc integer_dup_times float_inc float_div float_inc float_div float_inc float_rot float_inc float_inc float_div float_dup_items float_div float_inc float_yankdup integer_pop float_mult tag_integer_986 float_div float_inc float_yankdup float_inc float_yankdup float_inc float_yankdup float_inc integer_mod float_inc float_inc float_inc float_yank float_inc print_integer print_float float_flush integer_dup_times integer_div integer_shove integer_stackdepth tag_float_856 float_dup_times float_flush integer_pop integer_dup_times integer_stackdepth tag_float_856 float_inc integer_div float_mult float_dup_times)
Errors: [34.0 13 79.0 13 91.0 12 49.0 2 67.0 3 98.0 2 26.0 2 50.0 2 36.0 2 73.0 2 0.0 0 30.0 2 8.0 1 6.0 2 43.0 3 57.0 2 21.0 2 25.0 2 18.0 3 15.0 2 29.0 2 5.0 3 47.0 2 73.0 3 40.0 1]
Total: 1103.0
Mean: 22.06
Genome size: 71
Size: 72
Percent parens: 0.014
--- Population Statistics ---
Average total errors in population: 2739.2147893
Median total errors in population: 1103.0
Error averages by case: (96.81068220000003 12.728 134.9402234 12.767 146.74445660000003 12.06 117.43179690000008 3.55 132.58346169999996 4.195 151.653235 3.266 94.1493783 3.288 113.0771598 3.467 99.36550480000004 3.386 130.17243600000003 3.183 69.5073209 1.997 99.25324699999999 3.739 74.73447019999999 2.461 69.71240060000002 3.242 109.60334620000002 4.183 123.77273959999992 3.753 86.8193322 3.211 85.5798981 3.194 86.90032980000004 4.157 86.53285860000003 3.3 87.97196879999998 4.043 76.78358189999999 4.021 108.35524840000001 3.276 139.7515042 4.228 103.52720810000001 2.786)
Error minima by case: (0.5762 8 55.0 1 5.5465 9 15.1273 2 22.5604 2 0.2695 1 18.0 1 26.0 2 4.8389 1 0.3909 1 0.0 0 6.0 2 0.0 0 0.0 0 35.0 2 33.0 2 0.0 0 0.1763 1 3.0 1 7.0 1 4.0102 1 0.0 0 1.5539 1 7.807 2 16.0 1)
Average genome size in population (length): 70.809
Average program size in population (points): 71.809
Average percent parens in population: 0.014
Minimum age in population: 151.0704353668723
Maximum age in population: 155.7798803305064
Average age in population: 153.6273427908078
Median age in population: 153.6853737452788
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 7
Genome diversity (% unique Plush genomes):	 0.851
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 7
Syntactic diversity (% unique Push programs):	 0.851
Total error diversity:				 0.09
Error (vector) diversity:			 0.1
Behavioral diversity:				 0.1
--- Run Statistics ---
Number of program evaluations used so far: 109000
Number of point (instruction) evaluations so far: 209857809
--- Timings ---
Current time: 1529615261342 milliseconds
Total Time:         406.2 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       144.4 seconds, 35.5%
Fitness Testing:    203.9 seconds, 50.2%
Report:              57.8 seconds, 14.2%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 108
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 109
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 109
;;******************************
;; -*- Number IO problem report - generation 109
Test total error for best: 59131.0
Test mean error for best: 29.56550
;;------------------------------
Outputs of best individual on training cases:
Correct output: 1.9526623133   | Program output: -32.0473376867
Correct output: -70.8009773522 | Program output: 8.1990226478  
Correct output: -13.7839009431 | Program output: 77.2160990569 
Correct output: 143.8727406396 | Program output: 94.8727406396 
Correct output: 136.4396027174 | Program output: 69.4396027174 
Correct output: 18.5044280613  | Program output: 116.5044280613
Correct output: 92.0568646792  | Program output: 66.0568646792 
Correct output: 71.8873476205  | Program output: 121.8873476205
Correct output: -10.8388749243 | Program output: -46.8388749243
Correct output: 0.9299825981   | Program output: 73.9299825981 
Correct output: -26.7840412284 | Program output: -26.7840412284
Correct output: -102.1264221267 | Program output: -72.1264221267
Correct output: 40.8061668642  | Program output: 48.8061668642 
Correct output: -5.2544966331  | Program output: -11.2544966331
Correct output: 102.9855886244 | Program output: 59.9855886244 
Correct output: -118.0507723766 | Program output: -61.0507723766
Correct output: 55.9371769928  | Program output: 76.9371769928 
Correct output: 4.2657989984   | Program output: 29.2657989984 
Correct output: 96.7057987603  | Program output: 114.7057987603
Correct output: 122.162446611  | Program output: 107.162446611 
Correct output: 30.0102027945  | Program output: 1.0102027945  
Correct output: 104.5822387035 | Program output: 99.5822387035 
Correct output: -1.5538743366  | Program output: -48.5538743366
Correct output: 166.8070496115 | Program output: 93.8070496115 
Correct output: 58.6188945281  | Program output: 98.6188945281 
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction in1} {:instruction integer_max} {:instruction integer_dup_items} {:instruction float_swap} {:instruction integer_flush} {:instruction integer_div} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_yankdup} {:instruction float_inc} {:instruction float_inc} {:instruction float_yankdup} {:instruction integer_div} {:instruction float_inc} {:instruction float_yankdup} {:instruction integer_dec} {:instruction float_div} {:instruction float_inc} {:instruction float_div} {:instruction float_inc} {:instruction integer_mod} {:instruction float_inc} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_yankdup} {:instruction float_inc} {:instruction float_inc} {:instruction float_yankdup} {:instruction integer_inc} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_yankdup} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_inc} {:instruction integer_max} {:instruction float_mult} {:instruction float_dup_items} {:instruction float_div} {:instruction float_inc} {:instruction float_mult} {:instruction float_dup_items} {:instruction integer_dec} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_inc} {:instruction integer_flush} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_inc} {:instruction integer_dup_times} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction print_integer} {:instruction float_inc} {:instruction float_mult} {:instruction print_float} {:instruction float_flush} {:instruction integer_stackdepth} {:instruction tag_float_856} {:instruction float_inc} {:instruction integer_div} {:instruction float_mult})
Best program: (in1 integer_max integer_dup_items float_swap integer_flush integer_div float_inc float_yankdup float_yankdup float_inc float_inc float_yankdup integer_div float_inc float_yankdup integer_dec float_div float_inc float_div float_inc integer_mod float_inc float_inc float_yankdup float_yankdup float_inc float_inc float_yankdup integer_inc float_inc float_yankdup float_inc float_yankdup float_yankdup float_inc float_yankdup float_inc float_yankdup float_inc integer_max float_mult float_dup_items float_div float_inc float_mult float_dup_items integer_dec float_inc float_yankdup float_inc integer_flush float_inc float_yankdup float_inc integer_dup_times float_inc float_inc float_inc print_integer float_inc float_mult print_float float_flush integer_stackdepth tag_float_856 float_inc integer_div float_mult)
Errors: [34.0 13 79.0 13 91.0 12 49.0 2 67.0 3 98.0 2 26.0 2 50.0 2 36.0 2 73.0 2 0.0 0 30.0 2 8.0 1 6.0 2 43.0 3 57.0 2 21.0 2 25.0 2 18.0 3 15.0 2 29.0 2 5.0 3 47.0 2 73.0 3 40.0 1]
Total: 1103.0
Mean: 22.06
Genome size: 68
Size: 69
Percent parens: 0.014
--- Population Statistics ---
Average total errors in population: 2676.4127013
Median total errors in population: 1103.0
Error averages by case: (95.32135100000004 12.72 130.45556470000002 12.834 145.08359399999995 12.048 114.1102847000001 3.524 129.31640520000002 4.138 150.70036389999999 3.189 90.9310989 3.225 111.34851629999999 3.417 97.86191760000001 3.357 128.44346689999998 3.115 67.81626539999998 1.956 97.65754449999999 3.702 71.9614027 2.401 67.06017230000003 3.199 106.36899730000005 4.159 122.09484629999997 3.694 84.19710230000003 3.179 82.36669870000004 3.113 85.01543019999998 4.119 84.16931520000001 3.254 83.9147549 4.078 73.55692599999998 3.957 106.85684049999999 3.252 136.36180340000004 4.176 100.92003840000002 2.716)
Error minima by case: (0.1562 7 27.9837 2 13.7839 8 15.8727 2 18.5604 1 0.4309 1 3.7901 1 3.4288 2 5.1027 1 0.93 1 0.0 0 7.8056 2 0.0 0 0.0 0 4.0144 2 19.1944 2 1.0 1 0.6488 1 2.0 1 7.0 1 3.0102 1 0.0 0 1.1075 1 0.193 2 1.7901 1)
Average genome size in population (length): 71.387
Average program size in population (points): 72.387
Average percent parens in population: 0.014
Minimum age in population: 152.4881244119647
Maximum age in population: 157.1391293940091
Average age in population: 155.0134668004004
Median age in population: 155.0389770360659
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 6
Genome diversity (% unique Plush genomes):	 0.834
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 6
Syntactic diversity (% unique Push programs):	 0.834
Total error diversity:				 0.095
Error (vector) diversity:			 0.103
Behavioral diversity:				 0.103
--- Run Statistics ---
Number of program evaluations used so far: 110000
Number of point (instruction) evaluations so far: 211642559
--- Timings ---
Current time: 1529615264907 milliseconds
Total Time:         409.8 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       145.7 seconds, 35.6%
Fitness Testing:    205.7 seconds, 50.2%
Report:              58.3 seconds, 14.2%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 109
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 110
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 110
;;******************************
;; -*- Number IO problem report - generation 110
Test total error for best: 59131.0
Test mean error for best: 29.56550
;;------------------------------
Outputs of best individual on training cases:
Correct output: 1.9526623133   | Program output: -32.0473376867
Correct output: -70.8009773522 | Program output: 8.1990226478  
Correct output: -13.7839009431 | Program output: 77.2160990569 
Correct output: 143.8727406396 | Program output: 94.8727406396 
Correct output: 136.4396027174 | Program output: 69.4396027174 
Correct output: 18.5044280613  | Program output: 116.5044280613
Correct output: 92.0568646792  | Program output: 66.0568646792 
Correct output: 71.8873476205  | Program output: 121.8873476205
Correct output: -10.8388749243 | Program output: -46.8388749243
Correct output: 0.9299825981   | Program output: 73.9299825981 
Correct output: -26.7840412284 | Program output: -26.7840412284
Correct output: -102.1264221267 | Program output: -72.1264221267
Correct output: 40.8061668642  | Program output: 48.8061668642 
Correct output: -5.2544966331  | Program output: -11.2544966331
Correct output: 102.9855886244 | Program output: 59.9855886244 
Correct output: -118.0507723766 | Program output: -61.0507723766
Correct output: 55.9371769928  | Program output: 76.9371769928 
Correct output: 4.2657989984   | Program output: 29.2657989984 
Correct output: 96.7057987603  | Program output: 114.7057987603
Correct output: 122.162446611  | Program output: 107.162446611 
Correct output: 30.0102027945  | Program output: 1.0102027945  
Correct output: 104.5822387035 | Program output: 99.5822387035 
Correct output: -1.5538743366  | Program output: -48.5538743366
Correct output: 166.8070496115 | Program output: 93.8070496115 
Correct output: 58.6188945281  | Program output: 98.6188945281 
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction in1} {:instruction float_div} {:instruction float_inc} {:instruction float_min} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_inc} {:instruction float_div} {:instruction float_inc} {:instruction float_div} {:instruction float_inc} {:instruction float_rot} {:instruction float_inc} {:instruction float_inc} {:instruction integer_dec} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_inc} {:instruction float_div} {:instruction float_inc} {:instruction integer_pop} {:instruction float_inc} {:instruction integer_yankdup} {:instruction float_inc} {:instruction float_inc} {:instruction float_dup_items} {:instruction float_inc} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_inc} {:instruction integer_mult} {:instruction integer_stackdepth} {:instruction float_inc} {:instruction float_mult} {:instruction float_dup_items} {:instruction float_div} {:instruction float_inc} {:instruction float_max} {:instruction float_dup_items} {:instruction float_inc} {:instruction float_inc} {:instruction float_mult} {:instruction integer_max} {:instruction float_div} {:instruction float_inc} {:instruction float_inc} {:instruction float_swap} {:instruction float_inc} {:instruction integer_yank} {:instruction print_float} {:instruction integer_yankdup} {:instruction float_mult} {:instruction tag_float_814} {:instruction float_flush} {:instruction in2} {:instruction integer_dup_times} {:instruction integer_sub} {:instruction float_dec} {:instruction integer_dup} {:instruction integer_dec} {:instruction float_dup_items} {:instruction float_div} {:instruction tag_float_856} {:instruction integer_max} {:instruction integer_add})
Best program: (in1 float_div float_inc float_min float_inc float_yankdup float_inc float_div float_inc float_div float_inc float_rot float_inc float_inc integer_dec float_inc float_yankdup float_inc float_yankdup float_inc float_div float_inc integer_pop float_inc integer_yankdup float_inc float_inc float_dup_items float_inc float_inc float_yankdup float_inc integer_mult integer_stackdepth float_inc float_mult float_dup_items float_div float_inc float_max float_dup_items float_inc float_inc float_mult integer_max float_div float_inc float_inc float_swap float_inc integer_yank print_float integer_yankdup float_mult tag_float_814 float_flush in2 integer_dup_times integer_sub float_dec integer_dup integer_dec float_dup_items float_div tag_float_856 integer_max integer_add)
Errors: [34.0 13 79.0 13 91.0 12 49.0 2 67.0 3 98.0 2 26.0 2 50.0 2 36.0 2 73.0 2 0.0 0 30.0 2 8.0 1 6.0 2 43.0 3 57.0 2 21.0 2 25.0 2 18.0 3 15.0 2 29.0 2 5.0 3 47.0 2 73.0 3 40.0 1]
Total: 1103.0
Mean: 22.06
Genome size: 67
Size: 68
Percent parens: 0.015
--- Population Statistics ---
Average total errors in population: 2841.1957445
Median total errors in population: 1103.0
Error averages by case: (101.99488799999997 12.795 133.38091230000006 12.737 152.8756319 12.064 121.47972040000002 3.541 136.76509879999995 4.192 157.58912590000003 3.24 98.48408310000003 3.222 118.35706370000001 3.447 104.34533130000001 3.339 136.25096140000002 3.165 74.07316289999999 1.964 104.0009782 3.709 79.2144026 2.442 73.0719996 3.206 113.94877639999999 4.198 128.7807747 3.734 89.97642219999999 3.182 86.97742759999997 3.165 91.10172110000003 4.114 90.5313407 3.276 87.41908380000001 4.194 81.11649739999997 4.035 113.67962679999997 3.261 143.65380009999998 4.218 108.93091360000004 2.756)
Error minima by case: (0.0473 7 0.5204 1 9.7839 8 41.0 2 59.0 2 0.4751 1 18.0 1 26.0 2 5.8389 1 0.9319 1 0.0 0 6.0 2 0.0 0 0.0 0 35.0 2 22.5204 2 1.0 1 0.2746 1 1.8582 1 7.0 1 3.7127 1 0.0 0 1.712 1 58.1258 2 16.0 1)
Average genome size in population (length): 70.904
Average program size in population (points): 71.904
Average percent parens in population: 0.014
Minimum age in population: 153.6430633396622
Maximum age in population: 158.359110371314
Average age in population: 156.3976866321628
Median age in population: 156.4559042891346
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 6
Genome diversity (% unique Plush genomes):	 0.83
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 6
Syntactic diversity (% unique Push programs):	 0.83
Total error diversity:				 0.096
Error (vector) diversity:			 0.104
Behavioral diversity:				 0.104
--- Run Statistics ---
Number of program evaluations used so far: 111000
Number of point (instruction) evaluations so far: 213415184
--- Timings ---
Current time: 1529615268466 milliseconds
Total Time:         413.3 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       147.0 seconds, 35.6%
Fitness Testing:    207.5 seconds, 50.2%
Report:              58.7 seconds, 14.2%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 110
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 111
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 111
;;******************************
;; -*- Number IO problem report - generation 111
Test total error for best: 59131.0
Test mean error for best: 29.56550
;;------------------------------
Outputs of best individual on training cases:
Correct output: 1.9526623133   | Program output: -32.0473376867
Correct output: -70.8009773522 | Program output: 8.1990226478  
Correct output: -13.7839009431 | Program output: 77.2160990569 
Correct output: 143.8727406396 | Program output: 94.8727406396 
Correct output: 136.4396027174 | Program output: 69.4396027174 
Correct output: 18.5044280613  | Program output: 116.5044280613
Correct output: 92.0568646792  | Program output: 66.0568646792 
Correct output: 71.8873476205  | Program output: 121.8873476205
Correct output: -10.8388749243 | Program output: -46.8388749243
Correct output: 0.9299825981   | Program output: 73.9299825981 
Correct output: -26.7840412284 | Program output: -26.7840412284
Correct output: -102.1264221267 | Program output: -72.1264221267
Correct output: 40.8061668642  | Program output: 48.8061668642 
Correct output: -5.2544966331  | Program output: -11.2544966331
Correct output: 102.9855886244 | Program output: 59.9855886244 
Correct output: -118.0507723766 | Program output: -61.0507723766
Correct output: 55.9371769928  | Program output: 76.9371769928 
Correct output: 4.2657989984   | Program output: 29.2657989984 
Correct output: 96.7057987603  | Program output: 114.7057987603
Correct output: 122.162446611  | Program output: 107.162446611 
Correct output: 30.0102027945  | Program output: 1.0102027945  
Correct output: 104.5822387035 | Program output: 99.5822387035 
Correct output: -1.5538743366  | Program output: -48.5538743366
Correct output: 166.8070496115 | Program output: 93.8070496115 
Correct output: 58.6188945281  | Program output: 98.6188945281 
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction in1} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_inc} {:instruction float_inc} {:instruction tag_integer_29} {:instruction float_inc} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_div} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_dup_items} {:instruction float_div} {:instruction float_inc} {:instruction float_div} {:instruction float_yankdup} {:instruction float_inc} {:instruction float_dup_items} {:instruction float_div} {:instruction float_inc} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_div} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_inc} {:instruction integer_yank} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_mult} {:instruction float_dup_items} {:instruction float_div} {:instruction float_inc} {:instruction integer_dup_items} {:instruction float_dup_items} {:instruction float_div} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_inc} {:instruction integer_mod} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_div} {:instruction integer_dup_times} {:instruction float_yankdup} {:instruction float_max} {:instruction float_shove} {:instruction float_yankdup} {:instruction float_inc} {:instruction float_mod} {:instruction float_inc} {:instruction float_inc} {:instruction integer_dup} {:instruction print_float} {:instruction float_flush} {:instruction integer_dup_times} {:instruction integer_div} {:instruction float_mult} {:instruction integer_stackdepth} {:instruction tag_float_856} {:instruction float_yankdup} {:instruction float_dec} {:instruction float_flush} {:instruction integer_stackdepth} {:instruction tag_float_856} {:instruction float_add} {:instruction print_float} {:instruction float_sub} {:instruction float_dup_items} {:instruction float_dec} {:instruction float_inc} {:instruction float_swap} {:instruction in2} {:instruction integer_fromfloat})
Best program: (in1 float_inc float_yankdup float_inc float_inc tag_integer_29 float_inc float_inc float_yankdup float_div float_inc float_yankdup float_dup_items float_div float_inc float_div float_yankdup float_inc float_dup_items float_div float_inc float_inc float_yankdup float_div float_inc float_yankdup float_inc float_yankdup float_inc integer_yank float_inc float_yankdup float_inc float_yankdup float_mult float_dup_items float_div float_inc integer_dup_items float_dup_items float_div float_inc float_yankdup float_inc float_yankdup float_inc float_yankdup float_inc integer_mod float_inc float_yankdup float_div integer_dup_times float_yankdup float_max float_shove float_yankdup float_inc float_mod float_inc float_inc integer_dup print_float float_flush integer_dup_times integer_div float_mult integer_stackdepth tag_float_856 float_yankdup float_dec float_flush integer_stackdepth tag_float_856 float_add print_float float_sub float_dup_items float_dec float_inc float_swap in2 integer_fromfloat)
Errors: [34.0 13 79.0 13 91.0 12 49.0 2 67.0 3 98.0 2 26.0 2 50.0 2 36.0 2 73.0 2 0.0 0 30.0 2 8.0 1 6.0 2 43.0 3 57.0 2 21.0 2 25.0 2 18.0 3 15.0 2 29.0 2 5.0 3 47.0 2 73.0 3 40.0 1]
Total: 1103.0
Mean: 22.06
Genome size: 83
Size: 84
Percent parens: 0.012
--- Population Statistics ---
Average total errors in population: 2820.5098233
Median total errors in population: 1103.0
Error averages by case: (102.9089775 12.798 134.50920549999998 12.787 151.73471360000008 12.083 119.38477030000003 3.482 134.84792429999996 4.117 156.88811409999994 3.18 96.663037 3.192 116.83878330000003 3.444 105.30194470000004 3.304 135.19448720000005 3.105 75.00632009999998 1.879 104.05993749999998 3.656 78.0887407 2.365 74.57402720000003 3.135 112.12519579999999 4.143 128.50934889999994 3.677 88.8922151 3.11 84.55680680000002 3.11 89.59152420000002 4.063 88.46946190000001 3.22 88.24678270000001 3.823 78.94783650000001 3.903 114.69044989999999 3.194 141.55435569999997 4.157 107.2738628 2.724)
Error minima by case: (0.5484 8 17.801 1 14.5136 9 32.8727 1 10.5604 2 0.3889 1 17.0 1 30.0 2 11.3781 1 0.2953 1 0.0 0 10.0 2 0.0 0 0.0 0 3.9856 2 17.0508 2 1.0 1 0.0282 1 1.0 1 6.0 1 0.9898 1 0.0 0 2.2069 1 7.807 2 15.547 1)
Average genome size in population (length): 71.247
Average program size in population (points): 72.247
Average percent parens in population: 0.014
Minimum age in population: 155.1521111543665
Maximum age in population: 159.4192687627672
Average age in population: 157.7417171390371
Median age in population: 157.7833439260967
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 8
Genome diversity (% unique Plush genomes):	 0.837
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 8
Syntactic diversity (% unique Push programs):	 0.837
Total error diversity:				 0.084
Error (vector) diversity:			 0.096
Behavioral diversity:				 0.098
--- Run Statistics ---
Number of program evaluations used so far: 112000
Number of point (instruction) evaluations so far: 215196409
--- Timings ---
Current time: 1529615272094 milliseconds
Total Time:         416.9 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       148.3 seconds, 35.6%
Fitness Testing:    209.2 seconds, 50.2%
Report:              59.2 seconds, 14.2%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 111
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 112
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 112
;;******************************
;; -*- Number IO problem report - generation 112
Test total error for best: 59131.0
Test mean error for best: 29.56550
;;------------------------------
Outputs of best individual on training cases:
Correct output: 1.9526623133   | Program output: -32.0473376867
Correct output: -70.8009773522 | Program output: 8.1990226478  
Correct output: -13.7839009431 | Program output: 77.2160990569 
Correct output: 143.8727406396 | Program output: 94.8727406396 
Correct output: 136.4396027174 | Program output: 69.4396027174 
Correct output: 18.5044280613  | Program output: 116.5044280613
Correct output: 92.0568646792  | Program output: 66.0568646792 
Correct output: 71.8873476205  | Program output: 121.8873476205
Correct output: -10.8388749243 | Program output: -46.8388749243
Correct output: 0.9299825981   | Program output: 73.9299825981 
Correct output: -26.7840412284 | Program output: -26.7840412284
Correct output: -102.1264221267 | Program output: -72.1264221267
Correct output: 40.8061668642  | Program output: 48.8061668642 
Correct output: -5.2544966331  | Program output: -11.2544966331
Correct output: 102.9855886244 | Program output: 59.9855886244 
Correct output: -118.0507723766 | Program output: -61.0507723766
Correct output: 55.9371769928  | Program output: 76.9371769928 
Correct output: 4.2657989984   | Program output: 29.2657989984 
Correct output: 96.7057987603  | Program output: 114.7057987603
Correct output: 122.162446611  | Program output: 107.162446611 
Correct output: 30.0102027945  | Program output: 1.0102027945  
Correct output: 104.5822387035 | Program output: 99.5822387035 
Correct output: -1.5538743366  | Program output: -48.5538743366
Correct output: 166.8070496115 | Program output: 93.8070496115 
Correct output: 58.6188945281  | Program output: 98.6188945281 
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction in1} {:instruction integer_max} {:instruction integer_div} {:instruction integer_sub} {:instruction integer_mod} {:instruction integer_max} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_inc} {:instruction float_inc} {:instruction integer_mod} {:instruction float_inc} {:instruction integer_dup_items} {:instruction float_inc} {:instruction float_rot} {:instruction float_inc} {:instruction float_inc} {:instruction float_rot} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_inc} {:instruction float_shove} {:instruction float_inc} {:instruction integer_dup} {:instruction float_inc} {:instruction float_rot} {:instruction float_mult} {:instruction float_inc} {:instruction float_rot} {:instruction float_inc} {:instruction float_inc} {:instruction float_div} {:instruction float_dup_items} {:instruction float_yankdup} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_inc} {:instruction float_mult} {:instruction float_dup_items} {:instruction integer_mod} {:instruction float_inc} {:instruction integer_mod} {:instruction in2} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_add} {:instruction integer_max} {:instruction integer_dec} {:instruction float_inc} {:instruction float_inc} {:instruction integer_yank} {:instruction float_inc} {:instruction print_float} {:instruction float_flush} {:instruction float_mod} {:instruction tag_float_856} {:instruction float_inc} {:instruction float_yankdup} {:instruction print_float} {:instruction float_flush} {:instruction float_dup_items} {:instruction float_mod} {:instruction float_max} {:instruction tag_float_780} {:instruction float_add} {:instruction integer_dup_times} {:instruction float_min} {:instruction float_min} {:instruction float_dup_items} {:instruction 28} {:instruction float_inc} {:instruction float_sub} {:instruction float_swap})
Best program: (in1 integer_max integer_div integer_sub integer_mod integer_max float_inc float_yankdup float_inc float_inc integer_mod float_inc integer_dup_items float_inc float_rot float_inc float_inc float_rot float_inc float_yankdup float_inc float_yankdup float_inc float_shove float_inc integer_dup float_inc float_rot float_mult float_inc float_rot float_inc float_inc float_div float_dup_items float_yankdup float_inc float_yankdup float_inc float_mult float_dup_items integer_mod float_inc integer_mod in2 float_inc float_inc float_inc float_add integer_max integer_dec float_inc float_inc integer_yank float_inc print_float float_flush float_mod tag_float_856 float_inc float_yankdup print_float float_flush float_dup_items float_mod float_max tag_float_780 float_add integer_dup_times float_min float_min float_dup_items 28 float_inc float_sub float_swap)
Errors: [34.0 13 79.0 13 91.0 12 49.0 2 67.0 3 98.0 2 26.0 2 50.0 2 36.0 2 73.0 2 0.0 0 30.0 2 8.0 1 6.0 2 43.0 3 57.0 2 21.0 2 25.0 2 18.0 3 15.0 2 29.0 2 5.0 3 47.0 2 73.0 3 40.0 1]
Total: 1103.0
Mean: 22.06
Genome size: 76
Size: 77
Percent parens: 0.013
--- Population Statistics ---
Average total errors in population: 2806.127860000001
Median total errors in population: 1103.0
Error averages by case: (100.88346850000003 12.769 133.53179950000003 12.82 150.00941810000006 12.084 119.87310350000007 3.573 134.95519679999998 4.182 154.77432120000003 3.235 96.63070280000001 3.269 115.98824580000003 3.526 103.43773110000006 3.377 133.56839740000007 3.17 73.5144233 1.998 103.05734689999996 3.754 77.53239279999998 2.474 72.22814870000003 3.209 112.03875070000002 4.192 127.37260229999995 3.769 89.79219210000001 3.185 87.34385089999998 3.186 89.80011180000001 4.118 89.03742130000002 3.294 86.83498390000003 4.005 79.32185860000004 3.972 112.54631090000001 3.279 142.08502570000002 4.208 106.48605540000003 2.836)
Error minima by case: (2.0473 8 15.9842 2 3.9842 8 29.8727 1 13.5604 2 0.3889 1 17.0 1 26.0 2 13.9307 1 2.4937 1 0.0 0 6.0 2 0.0 0 0.0 0 0.9856 2 20.0508 2 3.0 1 0.2658 1 3.0 1 6.0 1 0.0102 1 0.0 0 5.5539 1 4.807 2 16.0 1)
Average genome size in population (length): 70.809
Average program size in population (points): 71.809
Average percent parens in population: 0.014
Minimum age in population: 156.1537285594517
Maximum age in population: 160.9933006409702
Average age in population: 159.1673097175147
Median age in population: 159.2354525206521
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 7
Genome diversity (% unique Plush genomes):	 0.847
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 7
Syntactic diversity (% unique Push programs):	 0.847
Total error diversity:				 0.092
Error (vector) diversity:			 0.104
Behavioral diversity:				 0.105
--- Run Statistics ---
Number of program evaluations used so far: 113000
Number of point (instruction) evaluations so far: 216966709
--- Timings ---
Current time: 1529615275667 milliseconds
Total Time:         420.5 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       149.6 seconds, 35.6%
Fitness Testing:    210.9 seconds, 50.2%
Report:              59.8 seconds, 14.2%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 112
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 113
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 113
;;******************************
;; -*- Number IO problem report - generation 113
Test total error for best: 59131.0
Test mean error for best: 29.56550
;;------------------------------
Outputs of best individual on training cases:
Correct output: 1.9526623133   | Program output: -32.0473376867
Correct output: -70.8009773522 | Program output: 8.1990226478  
Correct output: -13.7839009431 | Program output: 77.2160990569 
Correct output: 143.8727406396 | Program output: 94.8727406396 
Correct output: 136.4396027174 | Program output: 69.4396027174 
Correct output: 18.5044280613  | Program output: 116.5044280613
Correct output: 92.0568646792  | Program output: 66.0568646792 
Correct output: 71.8873476205  | Program output: 121.8873476205
Correct output: -10.8388749243 | Program output: -46.8388749243
Correct output: 0.9299825981   | Program output: 73.9299825981 
Correct output: -26.7840412284 | Program output: -26.7840412284
Correct output: -102.1264221267 | Program output: -72.1264221267
Correct output: 40.8061668642  | Program output: 48.8061668642 
Correct output: -5.2544966331  | Program output: -11.2544966331
Correct output: 102.9855886244 | Program output: 59.9855886244 
Correct output: -118.0507723766 | Program output: -61.0507723766
Correct output: 55.9371769928  | Program output: 76.9371769928 
Correct output: 4.2657989984   | Program output: 29.2657989984 
Correct output: 96.7057987603  | Program output: 114.7057987603
Correct output: 122.162446611  | Program output: 107.162446611 
Correct output: 30.0102027945  | Program output: 1.0102027945  
Correct output: 104.5822387035 | Program output: 99.5822387035 
Correct output: -1.5538743366  | Program output: -48.5538743366
Correct output: 166.8070496115 | Program output: 93.8070496115 
Correct output: 58.6188945281  | Program output: 98.6188945281 
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction in1} {:instruction integer_max} {:instruction integer_dup_items} {:instruction float_swap} {:instruction integer_flush} {:instruction integer_div} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_inc} {:instruction float_inc} {:instruction float_yank} {:instruction float_inc} {:instruction float_div} {:instruction float_inc} {:instruction float_min} {:instruction float_inc} {:instruction float_inc} {:instruction float_div} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_inc} {:instruction float_shove} {:instruction float_inc} {:instruction float_div} {:instruction float_inc} {:instruction float_rot} {:instruction float_inc} {:instruction float_inc} {:instruction float_div} {:instruction float_inc} {:instruction float_yankdup} {:instruction integer_mod} {:instruction integer_pop} {:instruction float_inc} {:instruction float_yank} {:instruction float_mod} {:instruction float_div} {:instruction float_inc} {:instruction in2} {:instruction float_inc} {:instruction integer_yankdup} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_mult} {:instruction integer_max} {:instruction float_div} {:instruction float_inc} {:instruction float_inc} {:instruction float_mod} {:instruction float_inc} {:instruction print_float} {:instruction float_max} {:instruction integer_mod} {:instruction float_inc} {:instruction tagged_425} {:instruction integer_add} {:instruction float_inc} {:instruction integer_dup_items} {:instruction integer_yank} {:instruction in1} {:instruction float_shove} {:instruction float_dec} {:instruction float_sin})
Best program: (in1 integer_max integer_dup_items float_swap integer_flush integer_div float_inc float_yankdup float_inc float_inc float_yank float_inc float_div float_inc float_min float_inc float_inc float_div float_inc float_yankdup float_inc float_yankdup float_inc float_shove float_inc float_div float_inc float_rot float_inc float_inc float_div float_inc float_yankdup integer_mod integer_pop float_inc float_yank float_mod float_div float_inc in2 float_inc integer_yankdup float_inc float_inc float_inc float_mult integer_max float_div float_inc float_inc float_mod float_inc print_float float_max integer_mod float_inc tagged_425 integer_add float_inc integer_dup_items integer_yank in1 float_shove float_dec float_sin)
Errors: [34.0 13 79.0 13 91.0 12 49.0 2 67.0 3 98.0 2 26.0 2 50.0 2 36.0 2 73.0 2 0.0 0 30.0 2 8.0 1 6.0 2 43.0 3 57.0 2 21.0 2 25.0 2 18.0 3 15.0 2 29.0 2 5.0 3 47.0 2 73.0 3 40.0 1]
Total: 1103.0
Mean: 22.06
Genome size: 66
Size: 67
Percent parens: 0.015
--- Population Statistics ---
Average total errors in population: 2958.5233481
Median total errors in population: 1103.0
Error averages by case: (107.62138010000002 12.763 138.28451450000006 12.783 156.7310827 12.066 124.91589940000004 3.585 140.071469 4.198 162.54541589999997 3.273 102.13721979999997 3.264 123.45754369999997 3.517 110.0534717 3.41 140.3240173 3.183 80.2408712 2.054 110.29161559999994 3.793 83.23938790000001 2.505 78.8244313 3.248 117.44047049999998 4.209 134.4871023 3.817 95.54532440000001 3.222 90.92897869999999 3.206 95.97925629999999 4.15 95.1488241 3.299 91.29362119999998 4.121 85.58168450000002 4.0 119.1866504 3.323 146.94807050000009 4.235 113.18504509999998 2.836)
Error minima by case: (0.0473 8 6.8948 1 13.7839 8 39.8727 1 3.5604 2 0.3889 1 2.9431 1 17.0509 2 5.8389 1 0.0558 1 0.0 0 2.9491 2 0.0 0 0.0 0 7.9856 2 10.0508 2 5.0 1 0.7254 1 1.7058 1 6.0 1 4.0102 1 0.0 0 1.5539 1 14.807 2 7.0509 1)
Average genome size in population (length): 70.676
Average program size in population (points): 71.676
Average percent parens in population: 0.014
Minimum age in population: 157.771671580199
Maximum age in population: 162.6704609691432
Average age in population: 160.5915941233974
Median age in population: 160.5758545540275
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 9
Genome diversity (% unique Plush genomes):	 0.844
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 9
Syntactic diversity (% unique Push programs):	 0.844
Total error diversity:				 0.093
Error (vector) diversity:			 0.101
Behavioral diversity:				 0.103
--- Run Statistics ---
Number of program evaluations used so far: 114000
Number of point (instruction) evaluations so far: 218733659
--- Timings ---
Current time: 1529615279212 milliseconds
Total Time:         424.1 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       151.0 seconds, 35.6%
Fitness Testing:    212.7 seconds, 50.1%
Report:              60.3 seconds, 14.2%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 113
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 114
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 114
;;******************************
;; -*- Number IO problem report - generation 114
Test total error for best: 59131.0
Test mean error for best: 29.56550
;;------------------------------
Outputs of best individual on training cases:
Correct output: 1.9526623133   | Program output: -32.0473376867
Correct output: -70.8009773522 | Program output: 8.1990226478  
Correct output: -13.7839009431 | Program output: 77.2160990569 
Correct output: 143.8727406396 | Program output: 94.8727406396 
Correct output: 136.4396027174 | Program output: 69.4396027174 
Correct output: 18.5044280613  | Program output: 116.5044280613
Correct output: 92.0568646792  | Program output: 66.0568646792 
Correct output: 71.8873476205  | Program output: 121.8873476205
Correct output: -10.8388749243 | Program output: -46.8388749243
Correct output: 0.9299825981   | Program output: 73.9299825981 
Correct output: -26.7840412284 | Program output: -26.7840412284
Correct output: -102.1264221267 | Program output: -72.1264221267
Correct output: 40.8061668642  | Program output: 48.8061668642 
Correct output: -5.2544966331  | Program output: -11.2544966331
Correct output: 102.9855886244 | Program output: 59.9855886244 
Correct output: -118.0507723766 | Program output: -61.0507723766
Correct output: 55.9371769928  | Program output: 76.9371769928 
Correct output: 4.2657989984   | Program output: 29.2657989984 
Correct output: 96.7057987603  | Program output: 114.7057987603
Correct output: 122.162446611  | Program output: 107.162446611 
Correct output: 30.0102027945  | Program output: 1.0102027945  
Correct output: 104.5822387035 | Program output: 99.5822387035 
Correct output: -1.5538743366  | Program output: -48.5538743366
Correct output: 166.8070496115 | Program output: 93.8070496115 
Correct output: 58.6188945281  | Program output: 98.6188945281 
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction in1} {:instruction integer_max} {:instruction integer_div} {:instruction integer_sub} {:instruction integer_mod} {:instruction integer_max} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_inc} {:instruction float_inc} {:instruction integer_mod} {:instruction float_inc} {:instruction integer_dup_items} {:instruction float_inc} {:instruction float_rot} {:instruction float_inc} {:instruction float_inc} {:instruction float_rot} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_inc} {:instruction float_shove} {:instruction float_inc} {:instruction integer_dup} {:instruction float_inc} {:instruction float_rot} {:instruction float_inc} {:instruction float_inc} {:instruction integer_shove} {:instruction float_inc} {:instruction float_mod} {:instruction integer_flush} {:instruction integer_mult} {:instruction float_rot} {:instruction float_inc} {:instruction float_mult} {:instruction float_inc} {:instruction integer_div} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_inc} {:instruction integer_mod} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_stackdepth} {:instruction float_inc} {:instruction integer_swap} {:instruction integer_dec} {:instruction print_float} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_yankdup} {:instruction print_float} {:instruction float_flush} {:instruction float_dup_items} {:instruction float_div} {:instruction float_inc} {:instruction float_yankdup} {:instruction -43} {:instruction float_dup_times} {:instruction integer_shove} {:instruction 45})
Best program: (in1 integer_max integer_div integer_sub integer_mod integer_max float_inc float_yankdup float_inc float_inc integer_mod float_inc integer_dup_items float_inc float_rot float_inc float_inc float_rot float_inc float_yankdup float_inc float_yankdup float_inc float_shove float_inc integer_dup float_inc float_rot float_inc float_inc integer_shove float_inc float_mod integer_flush integer_mult float_rot float_inc float_mult float_inc integer_div float_inc float_yankdup float_inc float_yankdup float_inc integer_mod float_inc float_inc float_inc integer_stackdepth float_inc integer_swap integer_dec print_float float_inc float_inc float_inc float_inc float_yankdup print_float float_flush float_dup_items float_div float_inc float_yankdup -43 float_dup_times integer_shove 45)
Errors: [34.0 13 79.0 13 91.0 12 49.0 2 67.0 3 98.0 2 26.0 2 50.0 2 36.0 2 73.0 2 0.0 0 30.0 2 8.0 1 6.0 2 43.0 3 57.0 2 21.0 2 25.0 2 18.0 3 15.0 2 29.0 2 5.0 3 47.0 2 73.0 3 40.0 1]
Total: 1103.0
Mean: 22.06
Genome size: 69
Size: 70
Percent parens: 0.014
--- Population Statistics ---
Average total errors in population: 2637.8058987
Median total errors in population: 1103.0
Error averages by case: (95.2441336 12.783 128.94456710000003 12.821 144.61438820000006 12.068 112.55598420000007 3.315 128.2919394 3.938 150.27954800000003 2.996 89.85212579999998 3.013 109.3477809 3.255 97.59713030000002 3.112 127.89216030000003 2.922 66.03208820000003 1.697 94.73873799999997 3.492 71.31211260000003 2.174 65.21676420000001 2.972 105.45057310000001 3.943 119.374473 3.499 82.93482480000003 2.923 81.41114820000004 2.936 82.7235404 3.904 81.38560620000001 3.023 81.178246 3.845 71.72595410000002 3.721 107.02870599999996 3.038 134.93197690000005 3.96 99.82938920000004 2.562)
Error minima by case: (0.0473 7 1.9226 2 13.9226 8 20.8727 2 2.5604 2 0.4643 1 15.0569 1 26.0 2 8.8389 1 0.0144 1 0.0 0 6.0 2 0.0 0 0.0 0 8.0144 2 9.0508 2 3.0 1 0.1696 1 6.0 1 8.0 1 3.0204 1 0.0 0 0.4461 1 4.193 2 16.0 1)
Average genome size in population (length): 70.543
Average program size in population (points): 71.543
Average percent parens in population: 0.014
Minimum age in population: 159.6294766577856
Maximum age in population: 163.8055027026008
Average age in population: 162.0373097187591
Median age in population: 162.0900799544969
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 5
Genome diversity (% unique Plush genomes):	 0.856
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 5
Syntactic diversity (% unique Push programs):	 0.856
Total error diversity:				 0.078
Error (vector) diversity:			 0.085
Behavioral diversity:				 0.085
--- Run Statistics ---
Number of program evaluations used so far: 115000
Number of point (instruction) evaluations so far: 220497234
--- Timings ---
Current time: 1529615282809 milliseconds
Total Time:         427.7 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       152.3 seconds, 35.6%
Fitness Testing:    214.5 seconds, 50.1%
Report:              60.8 seconds, 14.2%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 114
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 115
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 115
;;******************************
;; -*- Number IO problem report - generation 115
Test total error for best: 59131.0
Test mean error for best: 29.56550
;;------------------------------
Outputs of best individual on training cases:
Correct output: 1.9526623133   | Program output: -32.0473376867
Correct output: -70.8009773522 | Program output: 8.1990226478  
Correct output: -13.7839009431 | Program output: 77.2160990569 
Correct output: 143.8727406396 | Program output: 94.8727406396 
Correct output: 136.4396027174 | Program output: 69.4396027174 
Correct output: 18.5044280613  | Program output: 116.5044280613
Correct output: 92.0568646792  | Program output: 66.0568646792 
Correct output: 71.8873476205  | Program output: 121.8873476205
Correct output: -10.8388749243 | Program output: -46.8388749243
Correct output: 0.9299825981   | Program output: 73.9299825981 
Correct output: -26.7840412284 | Program output: -26.7840412284
Correct output: -102.1264221267 | Program output: -72.1264221267
Correct output: 40.8061668642  | Program output: 48.8061668642 
Correct output: -5.2544966331  | Program output: -11.2544966331
Correct output: 102.9855886244 | Program output: 59.9855886244 
Correct output: -118.0507723766 | Program output: -61.0507723766
Correct output: 55.9371769928  | Program output: 76.9371769928 
Correct output: 4.2657989984   | Program output: 29.2657989984 
Correct output: 96.7057987603  | Program output: 114.7057987603
Correct output: 122.162446611  | Program output: 107.162446611 
Correct output: 30.0102027945  | Program output: 1.0102027945  
Correct output: 104.5822387035 | Program output: 99.5822387035 
Correct output: -1.5538743366  | Program output: -48.5538743366
Correct output: 166.8070496115 | Program output: 93.8070496115 
Correct output: 58.6188945281  | Program output: 98.6188945281 
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction in1} {:instruction float_div} {:instruction float_shove} {:instruction integer_sub} {:instruction float_add} {:instruction integer_div} {:instruction float_inc} {:instruction integer_inc} {:instruction float_inc} {:instruction float_yankdup} {:instruction integer_dup} {:instruction float_inc} {:instruction float_rot} {:instruction float_inc} {:instruction float_inc} {:instruction float_frominteger} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_inc} {:instruction integer_dec} {:instruction float_inc} {:instruction integer_yank} {:instruction float_inc} {:instruction integer_yank} {:instruction float_inc} {:instruction float_inc} {:instruction integer_rot} {:instruction float_inc} {:instruction float_yankdup} {:instruction integer_mult} {:instruction integer_rot} {:instruction float_inc} {:instruction float_sub} {:instruction float_inc} {:instruction integer_pop} {:instruction float_dup_items} {:instruction float_dup_times} {:instruction float_inc} {:instruction float_swap} {:instruction float_dup_items} {:instruction float_yankdup} {:instruction float_inc} {:instruction float_sub} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_inc} {:instruction integer_mod} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_yank} {:instruction float_inc} {:instruction float_yankdup} {:instruction print_float} {:instruction float_inc} {:instruction float_swap} {:instruction float_inc} {:instruction float_yankdup} {:instruction print_float} {:instruction float_yankdup} {:instruction float_stackdepth} {:instruction float_flush} {:instruction float_dup_items} {:instruction float_dec} {:instruction float_inc} {:instruction print_float} {:instruction float_swap})
Best program: (in1 float_div float_shove integer_sub float_add integer_div float_inc integer_inc float_inc float_yankdup integer_dup float_inc float_rot float_inc float_inc float_frominteger float_inc float_yankdup float_inc float_yankdup float_inc integer_dec float_inc integer_yank float_inc integer_yank float_inc float_inc integer_rot float_inc float_yankdup integer_mult integer_rot float_inc float_sub float_inc integer_pop float_dup_items float_dup_times float_inc float_swap float_dup_items float_yankdup float_inc float_sub float_inc float_yankdup float_inc float_yankdup float_inc integer_mod float_inc float_inc float_inc float_yank float_inc float_yankdup print_float float_inc float_swap float_inc float_yankdup print_float float_yankdup float_stackdepth float_flush float_dup_items float_dec float_inc print_float float_swap)
Errors: [34.0 13 79.0 13 91.0 12 49.0 2 67.0 3 98.0 2 26.0 2 50.0 2 36.0 2 73.0 2 0.0 0 30.0 2 8.0 1 6.0 2 43.0 3 57.0 2 21.0 2 25.0 2 18.0 3 15.0 2 29.0 2 5.0 3 47.0 2 73.0 3 40.0 1]
Total: 1103.0
Mean: 22.06
Genome size: 71
Size: 72
Percent parens: 0.014
--- Population Statistics ---
Average total errors in population: 2685.3606528999994
Median total errors in population: 1103.0
Error averages by case: (95.75279250000001 12.823 130.68156280000002 12.802 146.60522740000008 12.086 114.81522090000007 3.411 130.1889798 4.044 152.42598359999994 3.119 91.69613549999995 3.14 112.13052230000002 3.369 98.79421210000005 3.213 129.96376350000006 3.082 66.9019065 1.823 96.75629299999996 3.589 72.75062390000001 2.301 66.35015240000006 3.1 107.3161921 4.036 121.13177579999997 3.591 85.2744997 3.062 82.01318810000002 3.079 84.9375627 4.013 83.9050648 3.151 82.92474260000002 3.882 74.20381309999999 3.874 107.81293709999997 3.147 137.08315860000005 4.069 102.48434210000002 2.654)
Error minima by case: (0.7966 8 4.7466 1 12.3419 8 20.8727 2 21.5604 2 0.4833 1 15.0569 1 8.7136 2 11.9456 1 0.0024 1 0.0 0 8.0 2 0.0 0 0.0 0 7.0144 2 15.7136 2 1.0 1 1.1291 1 1.0 1 5.0 1 4.8601 1 0.0 0 0.8925 1 3.193 2 1.2864 1)
Average genome size in population (length): 70.299
Average program size in population (points): 71.299
Average percent parens in population: 0.014
Minimum age in population: 160.6294766577856
Maximum age in population: 165.336267196729
Average age in population: 163.4132249727481
Median age in population: 163.4936798485577
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 8
Genome diversity (% unique Plush genomes):	 0.847
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 8
Syntactic diversity (% unique Push programs):	 0.847
Total error diversity:				 0.085
Error (vector) diversity:			 0.094
Behavioral diversity:				 0.094
--- Run Statistics ---
Number of program evaluations used so far: 116000
Number of point (instruction) evaluations so far: 222254734
--- Timings ---
Current time: 1529615286370 milliseconds
Total Time:         431.2 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       153.6 seconds, 35.6%
Fitness Testing:    216.2 seconds, 50.1%
Report:              61.3 seconds, 14.2%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 115
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 116
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 116
;;******************************
;; -*- Number IO problem report - generation 116
Test total error for best: 59131.0
Test mean error for best: 29.56550
;;------------------------------
Outputs of best individual on training cases:
Correct output: 1.9526623133   | Program output: -32.0473376867
Correct output: -70.8009773522 | Program output: 8.1990226478  
Correct output: -13.7839009431 | Program output: 77.2160990569 
Correct output: 143.8727406396 | Program output: 94.8727406396 
Correct output: 136.4396027174 | Program output: 69.4396027174 
Correct output: 18.5044280613  | Program output: 116.5044280613
Correct output: 92.0568646792  | Program output: 66.0568646792 
Correct output: 71.8873476205  | Program output: 121.8873476205
Correct output: -10.8388749243 | Program output: -46.8388749243
Correct output: 0.9299825981   | Program output: 73.9299825981 
Correct output: -26.7840412284 | Program output: -26.7840412284
Correct output: -102.1264221267 | Program output: -72.1264221267
Correct output: 40.8061668642  | Program output: 48.8061668642 
Correct output: -5.2544966331  | Program output: -11.2544966331
Correct output: 102.9855886244 | Program output: 59.9855886244 
Correct output: -118.0507723766 | Program output: -61.0507723766
Correct output: 55.9371769928  | Program output: 76.9371769928 
Correct output: 4.2657989984   | Program output: 29.2657989984 
Correct output: 96.7057987603  | Program output: 114.7057987603
Correct output: 122.162446611  | Program output: 107.162446611 
Correct output: 30.0102027945  | Program output: 1.0102027945  
Correct output: 104.5822387035 | Program output: 99.5822387035 
Correct output: -1.5538743366  | Program output: -48.5538743366
Correct output: 166.8070496115 | Program output: 93.8070496115 
Correct output: 58.6188945281  | Program output: 98.6188945281 
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction in1} {:instruction integer_max} {:instruction integer_dup_items} {:instruction tag_integer_144} {:instruction float_sub} {:instruction float_yankdup} {:instruction float_inc} {:instruction integer_div} {:instruction float_inc} {:instruction float_inc} {:instruction tag_integer_641} {:instruction float_div} {:instruction float_inc} {:instruction float_inc} {:instruction float_rot} {:instruction float_inc} {:instruction float_inc} {:instruction float_div} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_inc} {:instruction print_integer} {:instruction float_inc} {:instruction float_div} {:instruction float_inc} {:instruction float_rot} {:instruction float_inc} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_inc} {:instruction float_rot} {:instruction float_inc} {:instruction float_inc} {:instruction float_mult} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_dup_items} {:instruction integer_min} {:instruction integer_mod} {:instruction float_dup_items} {:instruction float_div} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_inc} {:instruction float_min} {:instruction float_mult} {:instruction float_mult} {:instruction integer_dup_items} {:instruction float_div} {:instruction float_inc} {:instruction float_inc} {:instruction float_swap} {:instruction float_inc} {:instruction float_yankdup} {:instruction print_float} {:instruction print_float} {:instruction float_flush} {:instruction print_float} {:instruction integer_swap} {:instruction integer_stackdepth} {:instruction tag_float_856} {:instruction float_mult} {:instruction float_dup_items} {:instruction float_div} {:instruction integer_mod} {:instruction integer_div} {:instruction float_mult})
Best program: (in1 integer_max integer_dup_items tag_integer_144 float_sub float_yankdup float_inc integer_div float_inc float_inc tag_integer_641 float_div float_inc float_inc float_rot float_inc float_inc float_div float_inc float_yankdup float_inc float_yankdup float_inc print_integer float_inc float_div float_inc float_rot float_inc float_inc float_yankdup float_inc float_rot float_inc float_inc float_mult float_inc float_yankdup float_dup_items integer_min integer_mod float_dup_items float_div float_inc float_yankdup float_inc float_yankdup float_inc float_min float_mult float_mult integer_dup_items float_div float_inc float_inc float_swap float_inc float_yankdup print_float print_float float_flush print_float integer_swap integer_stackdepth tag_float_856 float_mult float_dup_items float_div integer_mod integer_div float_mult)
Errors: [34.0 13 79.0 13 91.0 12 49.0 2 67.0 3 98.0 2 26.0 2 50.0 2 36.0 2 73.0 2 0.0 0 30.0 2 8.0 1 6.0 2 43.0 3 57.0 2 21.0 2 25.0 2 18.0 3 15.0 2 29.0 2 5.0 3 47.0 2 73.0 3 40.0 1]
Total: 1103.0
Mean: 22.06
Genome size: 71
Size: 72
Percent parens: 0.014
--- Population Statistics ---
Average total errors in population: 2877.4736065999996
Median total errors in population: 1103.0
Error averages by case: (104.18365030000005 12.79 135.92410230000002 12.788 153.68631749999997 12.066 122.50205850000006 3.489 138.31263329999996 4.129 159.1859476 3.215 100.32440029999997 3.223 119.7452985 3.474 107.33334540000001 3.312 137.2415188 3.142 75.28555769999997 1.909 105.88817689999995 3.682 80.58823840000002 2.43 73.2124964 3.13 116.13652259999995 4.142 129.9032988 3.71 91.67153789999999 3.126 86.47766060000004 3.131 92.99798119999998 4.098 92.03904000000003 3.235 89.396809 3.827 82.39909990000001 3.945 115.89032069999998 3.209 144.932789 4.183 110.069805 2.76)
Error minima by case: (0.9499 8 9.1057 1 9.8193 8 38.0 2 2.4396 2 0.5044 1 15.0 1 31.0 2 5.2479 1 0.8276 1 0.0 0 11.0 2 0.0 0 0.0 0 16.9856 2 4.0508 2 2.0 1 0.2108 1 0.0 0 4.0 1 3.0557 1 0.0 0 1.4135 1 20.807 2 21.0 1)
Average genome size in population (length): 70.454
Average program size in population (points): 71.454
Average percent parens in population: 0.014
Minimum age in population: 161.8667337769794
Maximum age in population: 166.8505698886137
Average age in population: 164.8325925706809
Median age in population: 164.8884307215587
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 8
Genome diversity (% unique Plush genomes):	 0.841
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 8
Syntactic diversity (% unique Push programs):	 0.841
Total error diversity:				 0.092
Error (vector) diversity:			 0.102
Behavioral diversity:				 0.103
--- Run Statistics ---
Number of program evaluations used so far: 117000
Number of point (instruction) evaluations so far: 224016084
--- Timings ---
Current time: 1529615290004 milliseconds
Total Time:         434.9 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       155.0 seconds, 35.6%
Fitness Testing:    218.0 seconds, 50.1%
Report:              61.8 seconds, 14.2%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 116
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 117
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 117
;;******************************
;; -*- Number IO problem report - generation 117
Test total error for best: 59131.0
Test mean error for best: 29.56550
;;------------------------------
Outputs of best individual on training cases:
Correct output: 1.9526623133   | Program output: -32.0473376867
Correct output: -70.8009773522 | Program output: 8.1990226478  
Correct output: -13.7839009431 | Program output: 77.2160990569 
Correct output: 143.8727406396 | Program output: 94.8727406396 
Correct output: 136.4396027174 | Program output: 69.4396027174 
Correct output: 18.5044280613  | Program output: 116.5044280613
Correct output: 92.0568646792  | Program output: 66.0568646792 
Correct output: 71.8873476205  | Program output: 121.8873476205
Correct output: -10.8388749243 | Program output: -46.8388749243
Correct output: 0.9299825981   | Program output: 73.9299825981 
Correct output: -26.7840412284 | Program output: -26.7840412284
Correct output: -102.1264221267 | Program output: -72.1264221267
Correct output: 40.8061668642  | Program output: 48.8061668642 
Correct output: -5.2544966331  | Program output: -11.2544966331
Correct output: 102.9855886244 | Program output: 59.9855886244 
Correct output: -118.0507723766 | Program output: -61.0507723766
Correct output: 55.9371769928  | Program output: 76.9371769928 
Correct output: 4.2657989984   | Program output: 29.2657989984 
Correct output: 96.7057987603  | Program output: 114.7057987603
Correct output: 122.162446611  | Program output: 107.162446611 
Correct output: 30.0102027945  | Program output: 1.0102027945  
Correct output: 104.5822387035 | Program output: 99.5822387035 
Correct output: -1.5538743366  | Program output: -48.5538743366
Correct output: 166.8070496115 | Program output: 93.8070496115 
Correct output: 58.6188945281  | Program output: 98.6188945281 
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction in1} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_inc} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_div} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_yank} {:instruction float_div} {:instruction float_inc} {:instruction float_div} {:instruction float_inc} {:instruction integer_mod} {:instruction float_inc} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_yankdup} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_div} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_inc} {:instruction tag_integer_979} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_inc} {:instruction float_yankdup} {:instruction integer_yankdup} {:instruction float_dup_items} {:instruction float_dup_times} {:instruction float_inc} {:instruction float_swap} {:instruction float_dup_items} {:instruction float_div} {:instruction float_inc} {:instruction float_sub} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_inc} {:instruction integer_mod} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_yank} {:instruction float_inc} {:instruction float_yankdup} {:instruction print_float} {:instruction float_inc} {:instruction float_swap} {:instruction float_inc} {:instruction float_tan} {:instruction print_float} {:instruction float_yankdup} {:instruction print_float} {:instruction float_flush} {:instruction float_dup_items} {:instruction integer_dec} {:instruction float_inc} {:instruction float_swap} {:instruction float_inc} {:instruction float_tan} {:instruction print_float} {:instruction float_yankdup} {:instruction print_float} {:instruction float_flush} {:instruction float_dup_items} {:instruction integer_dec} {:instruction float_inc} {:instruction float_yankdup} {:instruction -43} {:instruction tag_float_780} {:instruction float_add} {:instruction integer_dup_times} {:instruction float_min} {:instruction float_min} {:instruction float_dup_items} {:instruction 28})
Best program: (in1 float_inc float_yankdup float_inc float_inc float_yankdup float_div float_inc float_yankdup float_yank float_div float_inc float_div float_inc integer_mod float_inc float_inc float_yankdup float_yankdup float_inc float_inc float_inc float_yankdup float_div float_inc float_yankdup float_inc tag_integer_979 float_inc float_yankdup float_inc float_yankdup integer_yankdup float_dup_items float_dup_times float_inc float_swap float_dup_items float_div float_inc float_sub float_inc float_yankdup float_inc float_yankdup float_inc integer_mod float_inc float_inc float_inc float_yank float_inc float_yankdup print_float float_inc float_swap float_inc float_tan print_float float_yankdup print_float float_flush float_dup_items integer_dec float_inc float_swap float_inc float_tan print_float float_yankdup print_float float_flush float_dup_items integer_dec float_inc float_yankdup -43 tag_float_780 float_add integer_dup_times float_min float_min float_dup_items 28)
Errors: [34.0 13 79.0 13 91.0 12 49.0 2 67.0 3 98.0 2 26.0 2 50.0 2 36.0 2 73.0 2 0.0 0 30.0 2 8.0 1 6.0 2 43.0 3 57.0 2 21.0 2 25.0 2 18.0 3 15.0 2 29.0 2 5.0 3 47.0 2 73.0 3 40.0 1]
Total: 1103.0
Mean: 22.06
Genome size: 84
Size: 85
Percent parens: 0.012
--- Population Statistics ---
Average total errors in population: 2884.5733195000003
Median total errors in population: 1103.0
Error averages by case: (102.89335130000005 12.71 138.08326250000002 12.803 153.43908090000002 12.053 123.19629790000003 3.59 138.15542630000004 4.184 158.8702177 3.262 99.90549779999996 3.268 119.89589910000002 3.52 105.54055570000003 3.388 136.98638400000004 3.181 75.4172641 2.057 105.61312589999994 3.814 80.37817570000001 2.469 74.49554910000003 3.247 115.21531899999998 4.163 129.7695089 3.821 93.21917730000001 3.196 89.77945879999993 3.191 93.41983039999998 4.134 92.53839350000004 3.29 90.97681589999999 4.138 82.85268830000001 3.959 114.59357260000002 3.296 145.33676260000004 4.22 110.19770420000002 2.85)
Error minima by case: (1.6539 8 26.1184 1 9.8193 8 26.8727 1 16.5604 2 0.3808 1 8.0 1 24.3535 2 4.8389 1 1.5536 1 0.0 0 6.0 2 0.0 0 0.0 0 2.0144 2 23.0508 2 1.0 1 0.8338 1 1.0 1 3.0 1 0.2397 1 0.0 0 0.4461 1 1.807 2 16.0 1)
Average genome size in population (length): 70.815
Average program size in population (points): 71.815
Average percent parens in population: 0.014
Minimum age in population: 162.8667337769794
Maximum age in population: 168.142718442518
Average age in population: 166.2544258965063
Median age in population: 166.299563760726
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 7
Genome diversity (% unique Plush genomes):	 0.872
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 7
Syntactic diversity (% unique Push programs):	 0.872
Total error diversity:				 0.092
Error (vector) diversity:			 0.099
Behavioral diversity:				 0.099
--- Run Statistics ---
Number of program evaluations used so far: 118000
Number of point (instruction) evaluations so far: 225786484
--- Timings ---
Current time: 1529615293617 milliseconds
Total Time:         438.4 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       156.3 seconds, 35.6%
Fitness Testing:    219.7 seconds, 50.1%
Report:              62.3 seconds, 14.2%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 117
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 118
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 118
;;******************************
;; -*- Number IO problem report - generation 118
Test total error for best: 59131.0
Test mean error for best: 29.56550
;;------------------------------
Outputs of best individual on training cases:
Correct output: 1.9526623133   | Program output: -32.0473376867
Correct output: -70.8009773522 | Program output: 8.1990226478  
Correct output: -13.7839009431 | Program output: 77.2160990569 
Correct output: 143.8727406396 | Program output: 94.8727406396 
Correct output: 136.4396027174 | Program output: 69.4396027174 
Correct output: 18.5044280613  | Program output: 116.5044280613
Correct output: 92.0568646792  | Program output: 66.0568646792 
Correct output: 71.8873476205  | Program output: 121.8873476205
Correct output: -10.8388749243 | Program output: -46.8388749243
Correct output: 0.9299825981   | Program output: 73.9299825981 
Correct output: -26.7840412284 | Program output: -26.7840412284
Correct output: -102.1264221267 | Program output: -72.1264221267
Correct output: 40.8061668642  | Program output: 48.8061668642 
Correct output: -5.2544966331  | Program output: -11.2544966331
Correct output: 102.9855886244 | Program output: 59.9855886244 
Correct output: -118.0507723766 | Program output: -61.0507723766
Correct output: 55.9371769928  | Program output: 76.9371769928 
Correct output: 4.2657989984   | Program output: 29.2657989984 
Correct output: 96.7057987603  | Program output: 114.7057987603
Correct output: 122.162446611  | Program output: 107.162446611 
Correct output: 30.0102027945  | Program output: 1.0102027945  
Correct output: 104.5822387035 | Program output: 99.5822387035 
Correct output: -1.5538743366  | Program output: -48.5538743366
Correct output: 166.8070496115 | Program output: 93.8070496115 
Correct output: 58.6188945281  | Program output: 98.6188945281 
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction in1} {:instruction integer_max} {:instruction integer_dup_items} {:instruction integer_swap} {:instruction integer_flush} {:instruction integer_div} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_inc} {:instruction float_inc} {:instruction integer_mod} {:instruction float_inc} {:instruction float_div} {:instruction float_inc} {:instruction float_min} {:instruction float_inc} {:instruction float_inc} {:instruction float_div} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_inc} {:instruction float_inc} {:instruction integer_inc} {:instruction float_inc} {:instruction float_mult} {:instruction float_inc} {:instruction float_rot} {:instruction float_inc} {:instruction float_inc} {:instruction integer_yank} {:instruction float_dup_items} {:instruction float_yankdup} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_inc} {:instruction integer_yank} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_add} {:instruction integer_max} {:instruction integer_dec} {:instruction float_inc} {:instruction float_inc} {:instruction integer_add} {:instruction float_inc} {:instruction print_float} {:instruction integer_pop} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_inc} {:instruction float_dup_times} {:instruction float_inc} {:instruction float_inc} {:instruction float_max} {:instruction float_yank} {:instruction float_inc} {:instruction float_inc} {:instruction float_yankdup} {:instruction print_float} {:instruction float_flush} {:instruction float_div})
Best program: (in1 integer_max integer_dup_items integer_swap integer_flush integer_div float_inc float_yankdup float_inc float_inc integer_mod float_inc float_div float_inc float_min float_inc float_inc float_div float_inc float_yankdup float_inc float_yankdup float_inc float_inc integer_inc float_inc float_mult float_inc float_rot float_inc float_inc integer_yank float_dup_items float_yankdup float_inc float_yankdup float_inc integer_yank float_inc float_inc float_inc float_inc float_add integer_max integer_dec float_inc float_inc integer_add float_inc print_float integer_pop float_inc float_yankdup float_inc float_yankdup float_inc float_yankdup float_inc float_dup_times float_inc float_inc float_max float_yank float_inc float_inc float_yankdup print_float float_flush float_div)
Errors: [34.0 13 79.0 13 91.0 12 49.0 2 67.0 3 98.0 2 26.0 2 50.0 2 36.0 2 73.0 2 0.0 0 30.0 2 8.0 1 6.0 2 43.0 3 57.0 2 21.0 2 25.0 2 18.0 3 15.0 2 29.0 2 5.0 3 47.0 2 73.0 3 40.0 1]
Total: 1103.0
Mean: 22.06
Genome size: 69
Size: 70
Percent parens: 0.014
--- Population Statistics ---
Average total errors in population: 3005.2016100000014
Median total errors in population: 1103.0
Error averages by case: (107.53565320000001 12.811 145.6279012 12.841 158.22425850000008 12.125 126.28049170000006 3.614 141.19767710000002 4.204 164.7409536 3.278 103.31566430000002 3.295 125.64761970000002 3.547 110.08860560000001 3.405 141.79633059999998 3.204 79.37790919999998 2.045 110.3990672 3.8 84.8090236 2.495 80.45185739999997 3.25 118.55079440000003 4.22 134.411835 3.829 97.09978480000001 3.234 98.3711326 3.206 98.1074678 4.164 96.89181390000002 3.319 99.10870020000002 4.045 86.36099470000003 4.002 119.18238500000001 3.321 148.22365250000001 4.241 115.04503620000003 2.86)
Error minima by case: (0.0336 7 15.0993 2 14.5136 8 19.8727 1 19.5604 2 0.4541 1 14.0569 1 18.2582 2 5.8389 1 1.5536 1 0.0 0 6.0 2 0.0 0 0.0 0 5.0144 2 26.0508 2 0.0 0 1.0 1 2.0 1 4.0 1 5.0537 1 0.0 0 1.6308 1 1.193 2 12.7459 1)
Average genome size in population (length): 70.655
Average program size in population (points): 71.655
Average percent parens in population: 0.014
Minimum age in population: 165.3040995097167
Maximum age in population: 169.4693734338131
Average age in population: 167.6008620415175
Median age in population: 167.6590588652976
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 8
Genome diversity (% unique Plush genomes):	 0.86
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 8
Syntactic diversity (% unique Push programs):	 0.86
Total error diversity:				 0.091
Error (vector) diversity:			 0.1
Behavioral diversity:				 0.102
--- Run Statistics ---
Number of program evaluations used so far: 119000
Number of point (instruction) evaluations so far: 227552884
--- Timings ---
Current time: 1529615297192 milliseconds
Total Time:         442.1 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       157.6 seconds, 35.7%
Fitness Testing:    221.5 seconds, 50.1%
Report:              62.8 seconds, 14.2%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 118
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 119
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 119
;;******************************
;; -*- Number IO problem report - generation 119
Test total error for best: 59131.0
Test mean error for best: 29.56550
;;------------------------------
Outputs of best individual on training cases:
Correct output: 1.9526623133   | Program output: -32.0473376867
Correct output: -70.8009773522 | Program output: 8.1990226478  
Correct output: -13.7839009431 | Program output: 77.2160990569 
Correct output: 143.8727406396 | Program output: 94.8727406396 
Correct output: 136.4396027174 | Program output: 69.4396027174 
Correct output: 18.5044280613  | Program output: 116.5044280613
Correct output: 92.0568646792  | Program output: 66.0568646792 
Correct output: 71.8873476205  | Program output: 121.8873476205
Correct output: -10.8388749243 | Program output: -46.8388749243
Correct output: 0.9299825981   | Program output: 73.9299825981 
Correct output: -26.7840412284 | Program output: -26.7840412284
Correct output: -102.1264221267 | Program output: -72.1264221267
Correct output: 40.8061668642  | Program output: 48.8061668642 
Correct output: -5.2544966331  | Program output: -11.2544966331
Correct output: 102.9855886244 | Program output: 59.9855886244 
Correct output: -118.0507723766 | Program output: -61.0507723766
Correct output: 55.9371769928  | Program output: 76.9371769928 
Correct output: 4.2657989984   | Program output: 29.2657989984 
Correct output: 96.7057987603  | Program output: 114.7057987603
Correct output: 122.162446611  | Program output: 107.162446611 
Correct output: 30.0102027945  | Program output: 1.0102027945  
Correct output: 104.5822387035 | Program output: 99.5822387035 
Correct output: -1.5538743366  | Program output: -48.5538743366
Correct output: 166.8070496115 | Program output: 93.8070496115 
Correct output: 58.6188945281  | Program output: 98.6188945281 
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction in1} {:instruction integer_max} {:instruction float_shove} {:instruction integer_sub} {:instruction integer_max} {:instruction integer_flush} {:instruction integer_sub} {:instruction float_rot} {:instruction integer_div} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_inc} {:instruction float_inc} {:instruction integer_mod} {:instruction float_inc} {:instruction integer_min} {:instruction float_inc} {:instruction float_div} {:instruction float_inc} {:instruction integer_mod} {:instruction float_inc} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_yankdup} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_div} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_inc} {:instruction tag_integer_1127} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_inc} {:instruction float_yankdup} {:instruction integer_yankdup} {:instruction float_dup_items} {:instruction float_dup_times} {:instruction float_inc} {:instruction integer_shove} {:instruction float_dup_items} {:instruction float_div} {:instruction float_inc} {:instruction float_sub} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_inc} {:instruction integer_mod} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_yank} {:instruction float_inc} {:instruction float_yankdup} {:instruction print_float} {:instruction float_inc} {:instruction float_swap} {:instruction float_inc} {:instruction float_yankdup} {:instruction print_float} {:instruction float_yankdup} {:instruction print_float} {:instruction float_flush} {:instruction float_dup_items} {:instruction integer_dec} {:instruction float_inc} {:instruction float_yankdup} {:instruction -43} {:instruction tag_float_780} {:instruction float_add} {:instruction integer_dup_times} {:instruction float_min} {:instruction float_min} {:instruction float_dup_items} {:instruction 28} {:instruction float_inc} {:instruction float_sub} {:instruction float_swap} {:instruction float_frominteger} {:instruction integer_min} {:instruction float_cos} {:instruction float_frominteger} {:instruction float_flush} {:instruction integer_stackdepth} {:instruction tag_float_856} {:instruction float_min} {:instruction tag_float_316})
Best program: (in1 integer_max float_shove integer_sub integer_max integer_flush integer_sub float_rot integer_div float_inc float_yankdup float_inc float_inc integer_mod float_inc integer_min float_inc float_div float_inc integer_mod float_inc float_inc float_yankdup float_yankdup float_inc float_inc float_inc float_yankdup float_div float_inc float_yankdup float_inc tag_integer_1127 float_inc float_yankdup float_inc float_yankdup integer_yankdup float_dup_items float_dup_times float_inc integer_shove float_dup_items float_div float_inc float_sub float_inc float_yankdup float_inc float_yankdup float_inc integer_mod float_inc float_inc float_inc float_yank float_inc float_yankdup print_float float_inc float_swap float_inc float_yankdup print_float float_yankdup print_float float_flush float_dup_items integer_dec float_inc float_yankdup -43 tag_float_780 float_add integer_dup_times float_min float_min float_dup_items 28 float_inc float_sub float_swap float_frominteger integer_min float_cos float_frominteger float_flush integer_stackdepth tag_float_856 float_min tag_float_316)
Errors: [34.0 13 79.0 13 91.0 12 49.0 2 67.0 3 98.0 2 26.0 2 50.0 2 36.0 2 73.0 2 0.0 0 30.0 2 8.0 1 6.0 2 43.0 3 57.0 2 21.0 2 25.0 2 18.0 3 15.0 2 29.0 2 5.0 3 47.0 2 73.0 3 40.0 1]
Total: 1103.0
Mean: 22.06
Genome size: 91
Size: 92
Percent parens: 0.011
--- Population Statistics ---
Average total errors in population: 2438.170739999999
Median total errors in population: 1103.0
Error averages by case: (86.02665010000001 12.807 124.09018300000004 12.824 137.60853589999996 12.063 104.32768760000005 3.261 120.19846379999998 3.892 142.93206279999995 2.949 81.36163230000001 2.973 101.65702990000003 3.198 88.77267310000003 3.077 120.75824400000006 2.904 56.910037700000004 1.637 86.58215879999999 3.417 62.665050400000005 2.131 56.91154640000002 2.926 97.13860999999999 3.883 111.60435459999998 3.439 74.88209100000002 2.905 74.75938339999999 2.898 73.89475250000004 3.859 72.72606000000003 2.998 75.6149812 3.763 62.99209669999999 3.68 97.86539709999998 2.99 126.87573009999997 3.933 92.11132760000001 2.497)
Error minima by case: (0.3931 8 6.5081 2 14.5997 9 40.0 1 54.8203 2 0.6761 1 10.4376 1 9.7319 2 11.83 1 0.0612 1 0.0 0 8.0 2 0.0 0 1.0 1 21.3663 2 35.0 2 0.0 0 0.3814 1 2.0 1 6.0 1 0.8601 1 0.0 0 2.2572 1 64.0 2 4.9358 1)
Average genome size in population (length): 70.655
Average program size in population (points): 71.655
Average percent parens in population: 0.014
Minimum age in population: 166.3743107243123
Maximum age in population: 170.8140834743835
Average age in population: 168.9973486172933
Median age in population: 169.01652678713
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 8
Genome diversity (% unique Plush genomes):	 0.84
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 8
Syntactic diversity (% unique Push programs):	 0.84
Total error diversity:				 0.073
Error (vector) diversity:			 0.084
Behavioral diversity:				 0.085
--- Run Statistics ---
Number of program evaluations used so far: 120000
Number of point (instruction) evaluations so far: 229319284
--- Timings ---
Current time: 1529615300866 milliseconds
Total Time:         445.6 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       159.0 seconds, 35.7%
Fitness Testing:    223.2 seconds, 50.1%
Report:              63.3 seconds, 14.2%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 119
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 120
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 120
;;******************************
;; -*- Number IO problem report - generation 120
Test total error for best: 59131.0
Test mean error for best: 29.56550
;;------------------------------
Outputs of best individual on training cases:
Correct output: 1.9526623133   | Program output: -32.0473376867
Correct output: -70.8009773522 | Program output: 8.1990226478  
Correct output: -13.7839009431 | Program output: 77.2160990569 
Correct output: 143.8727406396 | Program output: 94.8727406396 
Correct output: 136.4396027174 | Program output: 69.4396027174 
Correct output: 18.5044280613  | Program output: 116.5044280613
Correct output: 92.0568646792  | Program output: 66.0568646792 
Correct output: 71.8873476205  | Program output: 121.8873476205
Correct output: -10.8388749243 | Program output: -46.8388749243
Correct output: 0.9299825981   | Program output: 73.9299825981 
Correct output: -26.7840412284 | Program output: -26.7840412284
Correct output: -102.1264221267 | Program output: -72.1264221267
Correct output: 40.8061668642  | Program output: 48.8061668642 
Correct output: -5.2544966331  | Program output: -11.2544966331
Correct output: 102.9855886244 | Program output: 59.9855886244 
Correct output: -118.0507723766 | Program output: -61.0507723766
Correct output: 55.9371769928  | Program output: 76.9371769928 
Correct output: 4.2657989984   | Program output: 29.2657989984 
Correct output: 96.7057987603  | Program output: 114.7057987603
Correct output: 122.162446611  | Program output: 107.162446611 
Correct output: 30.0102027945  | Program output: 1.0102027945  
Correct output: 104.5822387035 | Program output: 99.5822387035 
Correct output: -1.5538743366  | Program output: -48.5538743366
Correct output: 166.8070496115 | Program output: 93.8070496115 
Correct output: 58.6188945281  | Program output: 98.6188945281 
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction in1} {:instruction float_inc} {:instruction integer_yank} {:instruction float_inc} {:instruction float_inc} {:instruction integer_dup} {:instruction float_div} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_dup_items} {:instruction float_div} {:instruction float_div} {:instruction float_inc} {:instruction integer_mod} {:instruction float_inc} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_yankdup} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_div} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_inc} {:instruction tag_integer_979} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_inc} {:instruction float_dup_times} {:instruction float_inc} {:instruction float_mult} {:instruction float_inc} {:instruction float_yankdup} {:instruction integer_mod} {:instruction integer_min} {:instruction float_inc} {:instruction float_sub} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_inc} {:instruction float_div} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_yank} {:instruction float_inc} {:instruction float_yankdup} {:instruction print_float} {:instruction float_inc} {:instruction float_swap} {:instruction float_inc} {:instruction float_tan} {:instruction print_float} {:instruction float_yankdup} {:instruction print_float} {:instruction float_flush} {:instruction float_dup_items} {:instruction integer_dec} {:instruction float_inc} {:instruction integer_swap} {:instruction float_inc} {:instruction float_tan} {:instruction print_float} {:instruction float_yankdup} {:instruction print_float} {:instruction float_flush} {:instruction float_dup_items} {:instruction integer_dec} {:instruction float_inc} {:instruction float_yankdup} {:instruction -43} {:instruction tag_float_780} {:instruction float_add} {:instruction integer_dup_times} {:instruction float_min} {:instruction float_min} {:instruction float_dup_items} {:instruction 28})
Best program: (in1 float_inc integer_yank float_inc float_inc integer_dup float_div float_inc float_yankdup float_dup_items float_div float_div float_inc integer_mod float_inc float_inc float_yankdup float_yankdup float_inc float_inc float_inc float_yankdup float_div float_inc float_yankdup float_inc tag_integer_979 float_inc float_yankdup float_inc float_dup_times float_inc float_mult float_inc float_yankdup integer_mod integer_min float_inc float_sub float_inc float_yankdup float_inc float_yankdup float_inc float_div float_inc float_inc float_inc float_yank float_inc float_yankdup print_float float_inc float_swap float_inc float_tan print_float float_yankdup print_float float_flush float_dup_items integer_dec float_inc integer_swap float_inc float_tan print_float float_yankdup print_float float_flush float_dup_items integer_dec float_inc float_yankdup -43 tag_float_780 float_add integer_dup_times float_min float_min float_dup_items 28)
Errors: [34.0 13 79.0 13 91.0 12 49.0 2 67.0 3 98.0 2 26.0 2 50.0 2 36.0 2 73.0 2 0.0 0 30.0 2 8.0 1 6.0 2 43.0 3 57.0 2 21.0 2 25.0 2 18.0 3 15.0 2 29.0 2 5.0 3 47.0 2 73.0 3 40.0 1]
Total: 1103.0
Mean: 22.06
Genome size: 82
Size: 83
Percent parens: 0.012
--- Population Statistics ---
Average total errors in population: 2644.2945255
Median total errors in population: 1103.0
Error averages by case: (93.7839469 12.739 131.63605200000003 12.782 143.89818990000003 12.058 113.34389570000003 3.46 128.78550399999997 4.086 148.90556350000003 3.138 90.16884280000001 3.146 109.05045090000006 3.39 96.3241017 3.247 127.18487210000009 3.068 65.92173500000001 1.876 94.66904129999999 3.654 71.07898910000002 2.356 66.209061 3.094 105.6393882 4.069 119.40443459999996 3.645 83.59068720000003 3.077 81.21374819999998 3.075 83.1146612 4.038 82.1274512 3.156 84.1450946 3.883 72.4121196 3.859 105.53312629999999 3.154 135.7740313 4.096 99.53053720000007 2.703)
Error minima by case: (0.0473 8 31.9702 2 14.5997 9 39.0 2 57.0 2 0.3808 1 16.0 1 5.0718 2 10.9706 1 0.2688 1 0.0 0 7.1264 2 0.0 0 0.0 0 33.0 2 34.0508 2 1.0 1 0.1943 1 2.0 1 5.0 1 2.7996 1 0.0 0 1.6089 1 63.0 2 8.1967 1)
Average genome size in population (length): 70.594
Average program size in population (points): 71.594
Average percent parens in population: 0.014
Minimum age in population: 167.6875867973324
Maximum age in population: 172.4276472250688
Average age in population: 170.407596550698
Median age in population: 170.4632360768426
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 7
Genome diversity (% unique Plush genomes):	 0.845
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 7
Syntactic diversity (% unique Push programs):	 0.845
Total error diversity:				 0.082
Error (vector) diversity:			 0.093
Behavioral diversity:				 0.094
--- Run Statistics ---
Number of program evaluations used so far: 121000
Number of point (instruction) evaluations so far: 231084184
--- Timings ---
Current time: 1529615304478 milliseconds
Total Time:         449.3 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       160.3 seconds, 35.7%
Fitness Testing:    225.0 seconds, 50.1%
Report:              63.9 seconds, 14.2%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 120
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 121
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 121
;;******************************
;; -*- Number IO problem report - generation 121
Test total error for best: 59131.0
Test mean error for best: 29.56550
;;------------------------------
Outputs of best individual on training cases:
Correct output: 1.9526623133   | Program output: -32.0473376867
Correct output: -70.8009773522 | Program output: 8.1990226478  
Correct output: -13.7839009431 | Program output: 77.2160990569 
Correct output: 143.8727406396 | Program output: 94.8727406396 
Correct output: 136.4396027174 | Program output: 69.4396027174 
Correct output: 18.5044280613  | Program output: 116.5044280613
Correct output: 92.0568646792  | Program output: 66.0568646792 
Correct output: 71.8873476205  | Program output: 121.8873476205
Correct output: -10.8388749243 | Program output: -46.8388749243
Correct output: 0.9299825981   | Program output: 73.9299825981 
Correct output: -26.7840412284 | Program output: -26.7840412284
Correct output: -102.1264221267 | Program output: -72.1264221267
Correct output: 40.8061668642  | Program output: 48.8061668642 
Correct output: -5.2544966331  | Program output: -11.2544966331
Correct output: 102.9855886244 | Program output: 59.9855886244 
Correct output: -118.0507723766 | Program output: -61.0507723766
Correct output: 55.9371769928  | Program output: 76.9371769928 
Correct output: 4.2657989984   | Program output: 29.2657989984 
Correct output: 96.7057987603  | Program output: 114.7057987603
Correct output: 122.162446611  | Program output: 107.162446611 
Correct output: 30.0102027945  | Program output: 1.0102027945  
Correct output: 104.5822387035 | Program output: 99.5822387035 
Correct output: -1.5538743366  | Program output: -48.5538743366
Correct output: 166.8070496115 | Program output: 93.8070496115 
Correct output: 58.6188945281  | Program output: 98.6188945281 
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction in1} {:instruction float_inc} {:instruction float_div} {:instruction float_inc} {:instruction float_rot} {:instruction float_yankdup} {:instruction float_inc} {:instruction float_inc} {:instruction integer_dup_items} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_yank} {:instruction float_inc} {:instruction integer_max} {:instruction float_div} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_inc} {:instruction integer_dup_times} {:instruction float_inc} {:instruction float_div} {:instruction float_inc} {:instruction float_div} {:instruction float_inc} {:instruction float_rot} {:instruction float_inc} {:instruction float_inc} {:instruction float_div} {:instruction float_dup_items} {:instruction float_dup_items} {:instruction float_div} {:instruction float_inc} {:instruction float_mult} {:instruction float_dup_items} {:instruction float_div} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_inc} {:instruction float_sub} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_inc} {:instruction integer_mod} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction tagged_557} {:instruction float_inc} {:instruction float_yankdup} {:instruction print_float} {:instruction print_integer} {:instruction integer_stackdepth} {:instruction tag_float_856} {:instruction float_add} {:instruction float_min})
Best program: (in1 float_inc float_div float_inc float_rot float_yankdup float_inc float_inc integer_dup_items float_inc float_inc float_inc integer_yank float_inc integer_max float_div float_inc float_yankdup float_inc integer_dup_times float_inc float_div float_inc float_div float_inc float_rot float_inc float_inc float_div float_dup_items float_dup_items float_div float_inc float_mult float_dup_items float_div float_inc float_yankdup float_inc float_sub float_inc float_yankdup float_inc integer_mod float_inc float_inc float_inc tagged_557 float_inc float_yankdup print_float print_integer integer_stackdepth tag_float_856 float_add float_min)
Errors: [34.0 13 79.0 13 91.0 12 49.0 2 67.0 3 98.0 2 26.0 2 50.0 2 36.0 2 73.0 2 0.0 0 30.0 2 8.0 1 6.0 2 43.0 3 57.0 2 21.0 2 25.0 2 18.0 3 15.0 2 29.0 2 5.0 3 47.0 2 73.0 3 40.0 1]
Total: 1103.0
Mean: 22.06
Genome size: 56
Size: 57
Percent parens: 0.018
--- Population Statistics ---
Average total errors in population: 2502.7518751000007
Median total errors in population: 1103.0
Error averages by case: (88.36646850000001 12.762 124.76884470000007 12.724 139.7755366 12.009 107.11464410000005 3.325 122.79983560000001 3.944 145.13689979999995 3.03 84.08264790000001 3.025 104.37269870000002 3.288 90.8421778 3.122 123.12317200000005 2.943 60.6534017 1.749 89.39924539999996 3.54 65.44957769999999 2.214 61.15797210000003 2.972 99.75267709999999 3.964 114.37292629999999 3.535 77.51752500000002 2.964 73.6117596 2.954 77.54769120000002 3.92 75.80983390000002 3.052 77.38560149999999 3.91 66.21828180000001 3.739 100.3703362 3.039 129.61376679999998 3.973 95.20835310000002 2.603)
Error minima by case: (0.0441 7 55.0 1 13.004 8 21.8727 2 21.5604 2 0.2737 1 16.0569 1 7.3213 2 9.8389 1 0.0681 1 0.0 0 1.9476 2 1.0 1 0.0 0 7.0144 2 28.0508 2 1.0 1 0.1291 1 1.0 1 7.0 1 3.0102 1 0.0 0 0.1075 1 3.193 2 5.422 1)
Average genome size in population (length): 69.598
Average program size in population (points): 70.598
Average percent parens in population: 0.014
Minimum age in population: 168.9019420948063
Maximum age in population: 173.6985645299907
Average age in population: 171.8195830198885
Median age in population: 171.866645511671
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 8
Genome diversity (% unique Plush genomes):	 0.846
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 8
Syntactic diversity (% unique Push programs):	 0.846
Total error diversity:				 0.083
Error (vector) diversity:			 0.094
Behavioral diversity:				 0.094
--- Run Statistics ---
Number of program evaluations used so far: 122000
Number of point (instruction) evaluations so far: 232824184
--- Timings ---
Current time: 1529615308000 milliseconds
Total Time:         452.9 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       161.6 seconds, 35.7%
Fitness Testing:    226.7 seconds, 50.1%
Report:              64.4 seconds, 14.2%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 121
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 122
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 122
;;******************************
;; -*- Number IO problem report - generation 122
Test total error for best: 59131.0
Test mean error for best: 29.56550
;;------------------------------
Outputs of best individual on training cases:
Correct output: 1.9526623133   | Program output: -32.0473376867
Correct output: -70.8009773522 | Program output: 8.1990226478  
Correct output: -13.7839009431 | Program output: 77.2160990569 
Correct output: 143.8727406396 | Program output: 94.8727406396 
Correct output: 136.4396027174 | Program output: 69.4396027174 
Correct output: 18.5044280613  | Program output: 116.5044280613
Correct output: 92.0568646792  | Program output: 66.0568646792 
Correct output: 71.8873476205  | Program output: 121.8873476205
Correct output: -10.8388749243 | Program output: -46.8388749243
Correct output: 0.9299825981   | Program output: 73.9299825981 
Correct output: -26.7840412284 | Program output: -26.7840412284
Correct output: -102.1264221267 | Program output: -72.1264221267
Correct output: 40.8061668642  | Program output: 48.8061668642 
Correct output: -5.2544966331  | Program output: -11.2544966331
Correct output: 102.9855886244 | Program output: 59.9855886244 
Correct output: -118.0507723766 | Program output: -61.0507723766
Correct output: 55.9371769928  | Program output: 76.9371769928 
Correct output: 4.2657989984   | Program output: 29.2657989984 
Correct output: 96.7057987603  | Program output: 114.7057987603
Correct output: 122.162446611  | Program output: 107.162446611 
Correct output: 30.0102027945  | Program output: 1.0102027945  
Correct output: 104.5822387035 | Program output: 99.5822387035 
Correct output: -1.5538743366  | Program output: -48.5538743366
Correct output: 166.8070496115 | Program output: 93.8070496115 
Correct output: 58.6188945281  | Program output: 98.6188945281 
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction in1} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_inc} {:instruction integer_dup_items} {:instruction float_inc} {:instruction integer_dec} {:instruction integer_dec} {:instruction float_div} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_inc} {:instruction float_inc} {:instruction float_div} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_inc} {:instruction float_div} {:instruction float_inc} {:instruction integer_flush} {:instruction float_inc} {:instruction float_rot} {:instruction float_inc} {:instruction float_inc} {:instruction float_div} {:instruction float_inc} {:instruction integer_max} {:instruction integer_mod} {:instruction integer_div} {:instruction float_dup_times} {:instruction integer_min} {:instruction float_yankdup} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_inc} {:instruction float_div} {:instruction float_yankdup} {:instruction float_inc} {:instruction integer_mod} {:instruction float_inc} {:instruction float_inc} {:instruction integer_add} {:instruction float_div} {:instruction float_min} {:instruction float_yankdup} {:instruction float_mult} {:instruction float_yankdup} {:instruction float_yankdup} {:instruction float_inc} {:instruction integer_shove} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_yank} {:instruction float_inc} {:instruction tag_integer_34} {:instruction print_float} {:instruction float_flush} {:instruction integer_mult} {:instruction integer_flush} {:instruction float_add} {:instruction integer_add} {:instruction float_sin} {:instruction float_min} {:instruction float_dup_items} {:instruction float_div} {:instruction float_inc} {:instruction float_sub})
Best program: (in1 float_inc float_yankdup float_inc integer_dup_items float_inc integer_dec integer_dec float_div float_inc float_yankdup float_inc float_inc float_div float_inc float_yankdup float_inc float_yankdup float_inc float_div float_inc integer_flush float_inc float_rot float_inc float_inc float_div float_inc integer_max integer_mod integer_div float_dup_times integer_min float_yankdup float_inc float_yankdup float_inc float_div float_yankdup float_inc integer_mod float_inc float_inc integer_add float_div float_min float_yankdup float_mult float_yankdup float_yankdup float_inc integer_shove float_inc float_inc float_inc float_yank float_inc tag_integer_34 print_float float_flush integer_mult integer_flush float_add integer_add float_sin float_min float_dup_items float_div float_inc float_sub)
Errors: [34.0 13 79.0 13 91.0 12 49.0 2 67.0 3 98.0 2 26.0 2 50.0 2 36.0 2 73.0 2 0.0 0 30.0 2 8.0 1 6.0 2 43.0 3 57.0 2 21.0 2 25.0 2 18.0 3 15.0 2 29.0 2 5.0 3 47.0 2 73.0 3 40.0 1]
Total: 1103.0
Mean: 22.06
Genome size: 70
Size: 71
Percent parens: 0.014
--- Population Statistics ---
Average total errors in population: 2965.3051602999994
Median total errors in population: 1103.0
Error averages by case: (107.30678410000003 12.737 139.88272640000005 12.779 156.4567895 12.067 125.93088580000003 3.628 141.1329832 4.222 161.60433389999994 3.293 103.12094850000001 3.291 122.3232215 3.525 109.88841940000002 3.413 140.08321520000004 3.2 79.70277200000001 2.069 109.06600339999997 3.815 84.33153350000002 2.518 78.8538293 3.251 118.4750602 4.231 133.34198299999994 3.821 96.3375559 3.236 92.59730489999998 3.199 95.87789030000003 4.181 95.20278130000001 3.326 93.75790549999999 4.154 85.620944 4.009 119.06727619999998 3.307 148.02856199999997 4.26 112.93845130000001 2.843)
Error minima by case: (0.6843 7 16.801 1 12.7839 8 39.0 1 44.4396 2 0.4978 1 16.0 1 0.9535 2 4.8031 1 0.3925 1 0.0 0 6.0 2 0.0 0 0.0 0 32.0517 2 33.0 2 3.0 1 0.2658 1 1.0 1 5.0 1 5.0602 1 0.0 0 0.5539 1 63.0 2 1.5838 1)
Average genome size in population (length): 69.325
Average program size in population (points): 70.325
Average percent parens in population: 0.014
Minimum age in population: 170.413633289765
Maximum age in population: 175.0511092741086
Average age in population: 173.1739167381631
Median age in population: 173.1975387560792
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 8
Genome diversity (% unique Plush genomes):	 0.862
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 8
Syntactic diversity (% unique Push programs):	 0.862
Total error diversity:				 0.092
Error (vector) diversity:			 0.102
Behavioral diversity:				 0.104
--- Run Statistics ---
Number of program evaluations used so far: 123000
Number of point (instruction) evaluations so far: 234557334
--- Timings ---
Current time: 1529615311552 milliseconds
Total Time:         456.4 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       162.9 seconds, 35.7%
Fitness Testing:    228.5 seconds, 50.1%
Report:              64.9 seconds, 14.2%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 122
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 123
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 123
;;******************************
;; -*- Number IO problem report - generation 123
Test total error for best: 59131.0
Test mean error for best: 29.56550
;;------------------------------
Outputs of best individual on training cases:
Correct output: 1.9526623133   | Program output: -32.0473376867
Correct output: -70.8009773522 | Program output: 8.1990226478  
Correct output: -13.7839009431 | Program output: 77.2160990569 
Correct output: 143.8727406396 | Program output: 94.8727406396 
Correct output: 136.4396027174 | Program output: 69.4396027174 
Correct output: 18.5044280613  | Program output: 116.5044280613
Correct output: 92.0568646792  | Program output: 66.0568646792 
Correct output: 71.8873476205  | Program output: 121.8873476205
Correct output: -10.8388749243 | Program output: -46.8388749243
Correct output: 0.9299825981   | Program output: 73.9299825981 
Correct output: -26.7840412284 | Program output: -26.7840412284
Correct output: -102.1264221267 | Program output: -72.1264221267
Correct output: 40.8061668642  | Program output: 48.8061668642 
Correct output: -5.2544966331  | Program output: -11.2544966331
Correct output: 102.9855886244 | Program output: 59.9855886244 
Correct output: -118.0507723766 | Program output: -61.0507723766
Correct output: 55.9371769928  | Program output: 76.9371769928 
Correct output: 4.2657989984   | Program output: 29.2657989984 
Correct output: 96.7057987603  | Program output: 114.7057987603
Correct output: 122.162446611  | Program output: 107.162446611 
Correct output: 30.0102027945  | Program output: 1.0102027945  
Correct output: 104.5822387035 | Program output: 99.5822387035 
Correct output: -1.5538743366  | Program output: -48.5538743366
Correct output: 166.8070496115 | Program output: 93.8070496115 
Correct output: 58.6188945281  | Program output: 98.6188945281 
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction in1} {:instruction integer_max} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_inc} {:instruction float_inc} {:instruction float_max} {:instruction float_div} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_inc} {:instruction float_inc} {:instruction float_sub} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_inc} {:instruction float_div} {:instruction float_inc} {:instruction integer_mult} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_inc} {:instruction tag_integer_979} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_inc} {:instruction integer_dup} {:instruction integer_min} {:instruction float_mult} {:instruction float_div} {:instruction float_dup_times} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_inc} {:instruction float_mult} {:instruction float_dup_items} {:instruction float_div} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_dup_items} {:instruction float_inc} {:instruction float_inc} {:instruction float_mult} {:instruction integer_max} {:instruction float_sub} {:instruction float_inc} {:instruction float_inc} {:instruction float_swap} {:instruction float_inc} {:instruction integer_swap} {:instruction print_float} {:instruction float_flush} {:instruction integer_stackdepth} {:instruction float_inc} {:instruction integer_dup_items} {:instruction integer_dup} {:instruction in2} {:instruction print_float} {:instruction float_pop} {:instruction float_dup_items} {:instruction integer_div} {:instruction float_mult} {:instruction float_dup_times} {:instruction float_inc} {:instruction float_swap} {:instruction in2})
Best program: (in1 integer_max float_inc float_yankdup float_inc float_yankdup float_inc float_inc float_max float_div float_inc float_yankdup float_inc float_inc float_sub float_inc float_yankdup float_inc float_yankdup float_inc float_div float_inc integer_mult float_inc float_yankdup float_inc tag_integer_979 float_inc float_yankdup float_inc integer_dup integer_min float_mult float_div float_dup_times float_inc float_yankdup float_inc float_yankdup float_inc float_mult float_dup_items float_div float_inc float_yankdup float_dup_items float_inc float_inc float_mult integer_max float_sub float_inc float_inc float_swap float_inc integer_swap print_float float_flush integer_stackdepth float_inc integer_dup_items integer_dup in2 print_float float_pop float_dup_items integer_div float_mult float_dup_times float_inc float_swap in2)
Errors: [34.0 13 79.0 13 91.0 12 49.0 2 67.0 3 98.0 2 26.0 2 50.0 2 36.0 2 73.0 2 0.0 0 30.0 2 8.0 1 6.0 2 43.0 3 57.0 2 21.0 2 25.0 2 18.0 3 15.0 2 29.0 2 5.0 3 47.0 2 73.0 3 40.0 1]
Total: 1103.0
Mean: 22.06
Genome size: 72
Size: 73
Percent parens: 0.014
--- Population Statistics ---
Average total errors in population: 2200.8586861000003
Median total errors in population: 1103.0
Error averages by case: (75.78217329999998 12.747 114.08670849999997 12.751 129.49137489999998 12.001 94.94752530000005 3.194 110.96038259999999 3.832 134.8517273 2.92 71.65497690000001 2.925 93.6964583 3.173 78.24740440000001 3.001 112.4782531 2.863 46.520724400000006 1.614 78.4865196 3.411 52.2560213 2.083 45.815588000000005 2.885 87.58717570000002 3.823 103.65211069999998 3.404 64.72543910000002 2.856 64.94401119999999 2.889 63.97480880000001 3.819 63.1533401 2.944 64.69547799999998 3.876 53.28936379999999 3.656 87.8068561 2.935 117.812374 3.864 84.0158907 2.46)
Error minima by case: (0.7784 7 57.0 1 9.6382 8 12.5636 2 20.5604 2 0.4252 1 3.9716 1 3.205 2 4.8143 1 0.1309 1 0.0 0 8.0 2 0.0 0 0.0 0 6.0144 2 27.0508 2 1.0 1 0.2451 1 3.0 1 8.0 1 3.8002 1 0.0 0 1.4461 1 2.193 2 1.5742 1)
Average genome size in population (length): 68.494
Average program size in population (points): 69.494
Average percent parens in population: 0.015
Minimum age in population: 171.9927420012651
Maximum age in population: 176.6161777145585
Average age in population: 174.5963837979479
Median age in population: 174.6458917269598
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 11
Genome diversity (% unique Plush genomes):	 0.839
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 11
Syntactic diversity (% unique Push programs):	 0.839
Total error diversity:				 0.082
Error (vector) diversity:			 0.09
Behavioral diversity:				 0.092
--- Run Statistics ---
Number of program evaluations used so far: 124000
Number of point (instruction) evaluations so far: 236269759
--- Timings ---
Current time: 1529615315071 milliseconds
Total Time:         459.9 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       164.2 seconds, 35.7%
Fitness Testing:    230.2 seconds, 50.1%
Report:              65.4 seconds, 14.2%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 123
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 124
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 124
;;******************************
;; -*- Number IO problem report - generation 124
Test total error for best: 59131.0
Test mean error for best: 29.56550
;;------------------------------
Outputs of best individual on training cases:
Correct output: 1.9526623133   | Program output: -32.0473376867
Correct output: -70.8009773522 | Program output: 8.1990226478  
Correct output: -13.7839009431 | Program output: 77.2160990569 
Correct output: 143.8727406396 | Program output: 94.8727406396 
Correct output: 136.4396027174 | Program output: 69.4396027174 
Correct output: 18.5044280613  | Program output: 116.5044280613
Correct output: 92.0568646792  | Program output: 66.0568646792 
Correct output: 71.8873476205  | Program output: 121.8873476205
Correct output: -10.8388749243 | Program output: -46.8388749243
Correct output: 0.9299825981   | Program output: 73.9299825981 
Correct output: -26.7840412284 | Program output: -26.7840412284
Correct output: -102.1264221267 | Program output: -72.1264221267
Correct output: 40.8061668642  | Program output: 48.8061668642 
Correct output: -5.2544966331  | Program output: -11.2544966331
Correct output: 102.9855886244 | Program output: 59.9855886244 
Correct output: -118.0507723766 | Program output: -61.0507723766
Correct output: 55.9371769928  | Program output: 76.9371769928 
Correct output: 4.2657989984   | Program output: 29.2657989984 
Correct output: 96.7057987603  | Program output: 114.7057987603
Correct output: 122.162446611  | Program output: 107.162446611 
Correct output: 30.0102027945  | Program output: 1.0102027945  
Correct output: 104.5822387035 | Program output: 99.5822387035 
Correct output: -1.5538743366  | Program output: -48.5538743366
Correct output: 166.8070496115 | Program output: 93.8070496115 
Correct output: 58.6188945281  | Program output: 98.6188945281 
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction in1} {:instruction float_inc} {:instruction integer_yank} {:instruction float_inc} {:instruction float_inc} {:instruction integer_dup} {:instruction float_div} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_dup_items} {:instruction float_div} {:instruction float_div} {:instruction float_inc} {:instruction integer_mod} {:instruction float_inc} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_yankdup} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_div} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_inc} {:instruction integer_add} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_inc} {:instruction float_dup_times} {:instruction float_inc} {:instruction float_mult} {:instruction float_inc} {:instruction float_yankdup} {:instruction integer_mod} {:instruction integer_min} {:instruction float_inc} {:instruction float_sub} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_inc} {:instruction float_div} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_yank} {:instruction float_inc} {:instruction float_yankdup} {:instruction print_float} {:instruction float_inc} {:instruction float_swap} {:instruction float_inc} {:instruction integer_min} {:instruction float_inc} {:instruction float_inc} {:instruction float_swap} {:instruction float_inc} {:instruction print_integer} {:instruction float_yankdup} {:instruction print_float} {:instruction float_div} {:instruction integer_stackdepth} {:instruction in2} {:instruction integer_shove} {:instruction print_float})
Best program: (in1 float_inc integer_yank float_inc float_inc integer_dup float_div float_inc float_yankdup float_dup_items float_div float_div float_inc integer_mod float_inc float_inc float_yankdup float_yankdup float_inc float_inc float_inc float_yankdup float_div float_inc float_yankdup float_inc integer_add float_inc float_yankdup float_inc float_dup_times float_inc float_mult float_inc float_yankdup integer_mod integer_min float_inc float_sub float_inc float_yankdup float_inc float_yankdup float_inc float_div float_inc float_inc float_inc float_yank float_inc float_yankdup print_float float_inc float_swap float_inc integer_min float_inc float_inc float_swap float_inc print_integer float_yankdup print_float float_div integer_stackdepth in2 integer_shove print_float)
Errors: [34.0 13 79.0 13 91.0 12 49.0 2 67.0 3 98.0 2 26.0 2 50.0 2 36.0 2 73.0 2 0.0 0 30.0 2 8.0 1 6.0 2 43.0 3 57.0 2 21.0 2 25.0 2 18.0 3 15.0 2 29.0 2 5.0 3 47.0 2 73.0 3 40.0 1]
Total: 1103.0
Mean: 22.06
Genome size: 68
Size: 69
Percent parens: 0.014
--- Population Statistics ---
Average total errors in population: 2776.2222579999993
Median total errors in population: 1103.0
Error averages by case: (100.19525480000003 12.746 131.62261970000003 12.804 149.50845939999994 12.043 118.93990000000004 3.514 133.12010340000006 4.107 155.29632499999997 3.197 94.85747819999999 3.209 115.82696560000002 3.466 102.81998830000008 3.307 132.89606910000003 3.123 72.4839057 1.946 102.56120229999995 3.696 75.8780363 2.423 71.5326123 3.144 110.22705429999999 4.109 126.92830460000002 3.709 87.927933 3.133 82.2030711 3.119 89.10195850000001 4.082 87.97648310000001 3.239 84.48482019999997 3.927 78.33487009999999 3.891 111.98972340000002 3.23 141.06283309999998 4.166 106.3432865 2.773)
Error minima by case: (0.6773 8 15.801 1 13.82 8 40.0 1 42.0 2 0.3728 1 17.0 1 26.0 2 1.8491 1 0.3417 1 0.0 0 6.0 2 0.0 0 0.0 0 34.0 2 33.0 2 0.0 0 0.2283 1 2.0 1 6.0 1 0.5516 1 0.0 0 1.5539 1 64.0 2 16.0 1)
Average genome size in population (length): 68.561
Average program size in population (points): 69.561
Average percent parens in population: 0.015
Minimum age in population: 173.2709299721938
Maximum age in population: 177.8940237210082
Average age in population: 176.0009930592706
Median age in population: 176.0827027382499
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 11
Genome diversity (% unique Plush genomes):	 0.853
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 11
Syntactic diversity (% unique Push programs):	 0.853
Total error diversity:				 0.092
Error (vector) diversity:			 0.102
Behavioral diversity:				 0.103
--- Run Statistics ---
Number of program evaluations used so far: 125000
Number of point (instruction) evaluations so far: 237983834
--- Timings ---
Current time: 1529615318667 milliseconds
Total Time:         463.5 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       165.6 seconds, 35.7%
Fitness Testing:    231.9 seconds, 50.0%
Report:              65.9 seconds, 14.2%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 124
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 125
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 125
;;******************************
;; -*- Number IO problem report - generation 125
Test total error for best: 59131.0
Test mean error for best: 29.56550
;;------------------------------
Outputs of best individual on training cases:
Correct output: 1.9526623133   | Program output: -32.0473376867
Correct output: -70.8009773522 | Program output: 8.1990226478  
Correct output: -13.7839009431 | Program output: 77.2160990569 
Correct output: 143.8727406396 | Program output: 94.8727406396 
Correct output: 136.4396027174 | Program output: 69.4396027174 
Correct output: 18.5044280613  | Program output: 116.5044280613
Correct output: 92.0568646792  | Program output: 66.0568646792 
Correct output: 71.8873476205  | Program output: 121.8873476205
Correct output: -10.8388749243 | Program output: -46.8388749243
Correct output: 0.9299825981   | Program output: 73.9299825981 
Correct output: -26.7840412284 | Program output: -26.7840412284
Correct output: -102.1264221267 | Program output: -72.1264221267
Correct output: 40.8061668642  | Program output: 48.8061668642 
Correct output: -5.2544966331  | Program output: -11.2544966331
Correct output: 102.9855886244 | Program output: 59.9855886244 
Correct output: -118.0507723766 | Program output: -61.0507723766
Correct output: 55.9371769928  | Program output: 76.9371769928 
Correct output: 4.2657989984   | Program output: 29.2657989984 
Correct output: 96.7057987603  | Program output: 114.7057987603
Correct output: 122.162446611  | Program output: 107.162446611 
Correct output: 30.0102027945  | Program output: 1.0102027945  
Correct output: 104.5822387035 | Program output: 99.5822387035 
Correct output: -1.5538743366  | Program output: -48.5538743366
Correct output: 166.8070496115 | Program output: 93.8070496115 
Correct output: 58.6188945281  | Program output: 98.6188945281 
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction in1} {:instruction float_div} {:instruction float_shove} {:instruction integer_sub} {:instruction float_add} {:instruction integer_div} {:instruction float_inc} {:instruction float_yank} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_inc} {:instruction float_inc} {:instruction float_sub} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_inc} {:instruction float_div} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_inc} {:instruction float_swap} {:instruction float_inc} {:instruction integer_yank} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_inc} {:instruction float_div} {:instruction integer_dup_times} {:instruction float_div} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_yank} {:instruction float_mult} {:instruction float_dup_times} {:instruction float_div} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_inc} {:instruction integer_mod} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_yank} {:instruction float_inc} {:instruction print_integer} {:instruction integer_mod} {:instruction float_inc} {:instruction float_inc} {:instruction float_max} {:instruction float_yank} {:instruction float_inc} {:instruction float_yankdup} {:instruction print_float} {:instruction float_yankdup} {:instruction integer_rot} {:instruction integer_min} {:instruction float_div} {:instruction print_float} {:instruction integer_stackdepth} {:instruction float_shove} {:instruction integer_pop} {:instruction float_sin} {:instruction integer_dec} {:instruction integer_inc})
Best program: (in1 float_div float_shove integer_sub float_add integer_div float_inc float_yank float_inc float_yankdup float_inc float_inc float_sub float_inc float_yankdup float_inc float_yankdup float_inc float_div float_inc float_yankdup float_inc float_swap float_inc integer_yank float_inc float_yankdup float_inc float_div integer_dup_times float_div float_inc float_yankdup float_yank float_mult float_dup_times float_div float_inc float_yankdup float_inc float_yankdup float_inc float_yankdup float_inc integer_mod float_inc float_inc float_inc integer_yank float_inc print_integer integer_mod float_inc float_inc float_max float_yank float_inc float_yankdup print_float float_yankdup integer_rot integer_min float_div print_float integer_stackdepth float_shove integer_pop float_sin integer_dec integer_inc)
Errors: [34.0 13 79.0 13 91.0 12 49.0 2 67.0 3 98.0 2 26.0 2 50.0 2 36.0 2 73.0 2 0.0 0 30.0 2 8.0 1 6.0 2 43.0 3 57.0 2 21.0 2 25.0 2 18.0 3 15.0 2 29.0 2 5.0 3 47.0 2 73.0 3 40.0 1]
Total: 1103.0
Mean: 22.06
Genome size: 70
Size: 71
Percent parens: 0.014
--- Population Statistics ---
Average total errors in population: 2907.545749500001
Median total errors in population: 1103.0
Error averages by case: (104.88245939999999 12.799 139.27897600000003 12.805 155.04424879999996 12.098 123.57795110000006 3.51 139.02746409999997 4.159 160.20499619999998 3.222 100.88262710000002 3.229 120.35465530000003 3.479 107.15285190000003 3.328 138.56593420000002 3.149 76.71242560000002 1.947 105.56937929999997 3.717 82.15742790000003 2.407 75.72109200000003 3.166 116.35902499999999 4.146 130.00063479999994 3.729 93.4735181 3.148 91.10630299999994 3.143 93.52852860000003 4.096 92.68430780000003 3.241 92.4304079 3.941 83.0948878 3.965 116.439843 3.233 145.7544913 4.182 110.9383133 2.764)
Error minima by case: (1.8423 7 1.9279 1 13.6028 9 40.0 1 58.0 2 0.1378 1 17.0 1 3.9665 2 5.2259 1 0.5536 1 0.0 0 7.0 2 0.0 0 0.0 0 34.0 2 34.0 2 2.0 1 0.0119 1 1.0 1 6.0 1 0.0102 1 0.0 0 1.2695 1 64.0 2 3.8466 1)
Average genome size in population (length): 68.204
Average program size in population (points): 69.204
Average percent parens in population: 0.015
Minimum age in population: 174.674774984819
Maximum age in population: 179.5610297480035
Average age in population: 177.4450863414808
Median age in population: 177.4704750006805
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 9
Genome diversity (% unique Plush genomes):	 0.846
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 9
Syntactic diversity (% unique Push programs):	 0.846
Total error diversity:				 0.083
Error (vector) diversity:			 0.091
Behavioral diversity:				 0.092
--- Run Statistics ---
Number of program evaluations used so far: 126000
Number of point (instruction) evaluations so far: 239688959
--- Timings ---
Current time: 1529615322169 milliseconds
Total Time:         467.0 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       166.9 seconds, 35.7%
Fitness Testing:    233.7 seconds, 50.0%
Report:              66.4 seconds, 14.2%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 125
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 126
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 126
;;******************************
;; -*- Number IO problem report - generation 126
Test total error for best: 59131.0
Test mean error for best: 29.56550
;;------------------------------
Outputs of best individual on training cases:
Correct output: 1.9526623133   | Program output: -32.0473376867
Correct output: -70.8009773522 | Program output: 8.1990226478  
Correct output: -13.7839009431 | Program output: 77.2160990569 
Correct output: 143.8727406396 | Program output: 94.8727406396 
Correct output: 136.4396027174 | Program output: 69.4396027174 
Correct output: 18.5044280613  | Program output: 116.5044280613
Correct output: 92.0568646792  | Program output: 66.0568646792 
Correct output: 71.8873476205  | Program output: 121.8873476205
Correct output: -10.8388749243 | Program output: -46.8388749243
Correct output: 0.9299825981   | Program output: 73.9299825981 
Correct output: -26.7840412284 | Program output: -26.7840412284
Correct output: -102.1264221267 | Program output: -72.1264221267
Correct output: 40.8061668642  | Program output: 48.8061668642 
Correct output: -5.2544966331  | Program output: -11.2544966331
Correct output: 102.9855886244 | Program output: 59.9855886244 
Correct output: -118.0507723766 | Program output: -61.0507723766
Correct output: 55.9371769928  | Program output: 76.9371769928 
Correct output: 4.2657989984   | Program output: 29.2657989984 
Correct output: 96.7057987603  | Program output: 114.7057987603
Correct output: 122.162446611  | Program output: 107.162446611 
Correct output: 30.0102027945  | Program output: 1.0102027945  
Correct output: 104.5822387035 | Program output: 99.5822387035 
Correct output: -1.5538743366  | Program output: -48.5538743366
Correct output: 166.8070496115 | Program output: 93.8070496115 
Correct output: 58.6188945281  | Program output: 98.6188945281 
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction in1} {:instruction float_div} {:instruction float_shove} {:instruction integer_sub} {:instruction integer_mod} {:instruction integer_div} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_mod} {:instruction float_inc} {:instruction integer_dup_items} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_yank} {:instruction float_inc} {:instruction integer_max} {:instruction float_div} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_inc} {:instruction integer_dup_times} {:instruction float_inc} {:instruction float_div} {:instruction float_inc} {:instruction float_div} {:instruction float_inc} {:instruction float_rot} {:instruction float_inc} {:instruction float_inc} {:instruction float_div} {:instruction float_dup_items} {:instruction float_dup_items} {:instruction float_div} {:instruction float_inc} {:instruction float_mult} {:instruction float_dup_times} {:instruction integer_flush} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_inc} {:instruction integer_mod} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_swap} {:instruction float_inc} {:instruction integer_flush} {:instruction print_float} {:instruction float_inc} {:instruction float_yankdup} {:instruction print_float} {:instruction float_yankdup} {:instruction float_stackdepth} {:instruction float_flush} {:instruction float_dup_items} {:instruction float_dec} {:instruction float_inc} {:instruction float_min} {:instruction integer_dec} {:instruction print_float} {:instruction integer_add} {:instruction float_inc} {:instruction float_inc} {:instruction float_add})
Best program: (in1 float_div float_shove integer_sub integer_mod integer_div float_inc float_inc float_inc integer_mod float_inc integer_dup_items float_inc float_inc float_inc integer_yank float_inc integer_max float_div float_inc float_yankdup float_inc integer_dup_times float_inc float_div float_inc float_div float_inc float_rot float_inc float_inc float_div float_dup_items float_dup_items float_div float_inc float_mult float_dup_times integer_flush float_inc float_yankdup float_inc float_yankdup float_inc float_yankdup float_inc integer_mod float_inc float_inc float_inc integer_swap float_inc integer_flush print_float float_inc float_yankdup print_float float_yankdup float_stackdepth float_flush float_dup_items float_dec float_inc float_min integer_dec print_float integer_add float_inc float_inc float_add)
Errors: [34.0 13 79.0 13 91.0 12 49.0 2 67.0 3 98.0 2 26.0 2 50.0 2 36.0 2 73.0 2 0.0 0 30.0 2 8.0 1 6.0 2 43.0 3 57.0 2 21.0 2 25.0 2 18.0 3 15.0 2 29.0 2 5.0 3 47.0 2 73.0 3 40.0 1]
Total: 1103.0
Mean: 22.06
Genome size: 70
Size: 71
Percent parens: 0.014
--- Population Statistics ---
Average total errors in population: 2801.3057358
Median total errors in population: 1103.0
Error averages by case: (100.20394100000001 12.812 131.27491230000004 12.797 151.35630490000003 12.088 119.85612390000003 3.502 135.02278090000001 4.11 157.35570249999995 3.213 96.89241939999997 3.216 117.6878036 3.453 102.80187269999999 3.337 134.7788257 3.131 72.2359283 1.964 101.96752839999999 3.717 77.88274589999999 2.42 69.1022528 3.181 112.2255971 4.135 126.26037699999999 3.728 90.4622935 3.132 85.61970970000003 3.166 90.81411630000001 4.102 89.92908539999999 3.226 83.92979230000002 4.127 79.47515349999999 3.946 112.11745209999997 3.247 142.0484811 4.138 107.37053549999999 2.746)
Error minima by case: (0.0198 7 54.801 1 12.3419 7 19.182 2 4.5604 1 0.3889 1 3.818 1 24.1127 2 6.182 1 0.93 1 0.0 0 5.1264 2 0.0 0 0.0 0 9.9856 2 11.0508 2 4.0 1 0.2658 1 1.0 1 1.0 1 0.0102 1 0.0 0 0.8925 1 13.807 2 14.3811 1)
Average genome size in population (length): 68.244
Average program size in population (points): 69.244
Average percent parens in population: 0.015
Minimum age in population: 175.9280239173666
Maximum age in population: 180.7588888611961
Average age in population: 178.8284827931202
Median age in population: 178.8492274961343
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 9
Genome diversity (% unique Plush genomes):	 0.841
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 9
Syntactic diversity (% unique Push programs):	 0.841
Total error diversity:				 0.094
Error (vector) diversity:			 0.104
Behavioral diversity:				 0.106
--- Run Statistics ---
Number of program evaluations used so far: 127000
Number of point (instruction) evaluations so far: 241395134
--- Timings ---
Current time: 1529615325698 milliseconds
Total Time:         470.6 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       168.2 seconds, 35.7%
Fitness Testing:    235.4 seconds, 50.0%
Report:              66.9 seconds, 14.2%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 126
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 127
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 127
;;******************************
;; -*- Number IO problem report - generation 127
Test total error for best: 59131.0
Test mean error for best: 29.56550
;;------------------------------
Outputs of best individual on training cases:
Correct output: 1.9526623133   | Program output: -32.0473376867
Correct output: -70.8009773522 | Program output: 8.1990226478  
Correct output: -13.7839009431 | Program output: 77.2160990569 
Correct output: 143.8727406396 | Program output: 94.8727406396 
Correct output: 136.4396027174 | Program output: 69.4396027174 
Correct output: 18.5044280613  | Program output: 116.5044280613
Correct output: 92.0568646792  | Program output: 66.0568646792 
Correct output: 71.8873476205  | Program output: 121.8873476205
Correct output: -10.8388749243 | Program output: -46.8388749243
Correct output: 0.9299825981   | Program output: 73.9299825981 
Correct output: -26.7840412284 | Program output: -26.7840412284
Correct output: -102.1264221267 | Program output: -72.1264221267
Correct output: 40.8061668642  | Program output: 48.8061668642 
Correct output: -5.2544966331  | Program output: -11.2544966331
Correct output: 102.9855886244 | Program output: 59.9855886244 
Correct output: -118.0507723766 | Program output: -61.0507723766
Correct output: 55.9371769928  | Program output: 76.9371769928 
Correct output: 4.2657989984   | Program output: 29.2657989984 
Correct output: 96.7057987603  | Program output: 114.7057987603
Correct output: 122.162446611  | Program output: 107.162446611 
Correct output: 30.0102027945  | Program output: 1.0102027945  
Correct output: 104.5822387035 | Program output: 99.5822387035 
Correct output: -1.5538743366  | Program output: -48.5538743366
Correct output: 166.8070496115 | Program output: 93.8070496115 
Correct output: 58.6188945281  | Program output: 98.6188945281 
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction in1} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_inc} {:instruction float_inc} {:instruction tag_integer_29} {:instruction integer_rot} {:instruction float_inc} {:instruction in2} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_rot} {:instruction float_inc} {:instruction float_inc} {:instruction integer_yank} {:instruction float_inc} {:instruction integer_max} {:instruction float_div} {:instruction float_inc} {:instruction integer_flush} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_inc} {:instruction float_div} {:instruction float_inc} {:instruction float_mult} {:instruction float_inc} {:instruction float_rot} {:instruction float_inc} {:instruction float_inc} {:instruction float_div} {:instruction float_dup_items} {:instruction float_yank} {:instruction float_inc} {:instruction float_div} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_inc} {:instruction integer_mod} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_min} {:instruction float_inc} {:instruction float_mod} {:instruction print_float} {:instruction float_flush} {:instruction integer_dup_times} {:instruction integer_div} {:instruction float_max} {:instruction float_frominteger} {:instruction tag_float_856} {:instruction float_dup_items} {:instruction float_flush} {:instruction integer_pop} {:instruction integer_dup_times} {:instruction integer_stackdepth} {:instruction tag_float_856} {:instruction float_mult} {:instruction float_inc} {:instruction float_mult} {:instruction integer_max} {:instruction float_div} {:instruction float_inc} {:instruction float_inc} {:instruction integer_shove} {:instruction float_inc} {:instruction integer_dec} {:instruction print_float} {:instruction integer_dup_times} {:instruction integer_div} {:instruction integer_dup} {:instruction float_inc} {:instruction float_inc} {:instruction float_mult} {:instruction integer_max} {:instruction float_div} {:instruction float_inc})
Best program: (in1 float_inc float_yankdup float_inc float_inc tag_integer_29 integer_rot float_inc in2 float_inc float_inc float_inc float_rot float_inc float_inc integer_yank float_inc integer_max float_div float_inc integer_flush float_inc float_yankdup float_inc float_div float_inc float_mult float_inc float_rot float_inc float_inc float_div float_dup_items float_yank float_inc float_div float_inc float_yankdup float_inc integer_mod float_inc float_inc float_inc integer_min float_inc float_mod print_float float_flush integer_dup_times integer_div float_max float_frominteger tag_float_856 float_dup_items float_flush integer_pop integer_dup_times integer_stackdepth tag_float_856 float_mult float_inc float_mult integer_max float_div float_inc float_inc integer_shove float_inc integer_dec print_float integer_dup_times integer_div integer_dup float_inc float_inc float_mult integer_max float_div float_inc)
Errors: [34.0 13 79.0 13 91.0 12 49.0 2 67.0 3 98.0 2 26.0 2 50.0 2 36.0 2 73.0 2 0.0 0 30.0 2 8.0 1 6.0 2 43.0 3 57.0 2 21.0 2 25.0 2 18.0 3 15.0 2 29.0 2 5.0 3 47.0 2 73.0 3 40.0 1]
Total: 1103.0
Mean: 22.06
Genome size: 79
Size: 80
Percent parens: 0.013
--- Population Statistics ---
Average total errors in population: 2465.8613093999998
Median total errors in population: 1103.0
Error averages by case: (87.15182240000001 12.762 124.26156770000009 12.758 137.36179320000002 12.032 105.90842760000005 3.356 121.2937565 3.971 142.64514860000006 3.027 82.34037549999998 3.031 102.45639240000004 3.324 89.93351609999998 3.146 120.50853280000001 2.979 58.68049869999998 1.79 88.85738679999996 3.571 62.900487599999984 2.226 59.31931050000002 3.013 98.0547903 3.97 113.73553069999996 3.585 75.0656008 2.941 74.49814240000002 2.974 75.29907290000003 3.921 74.41705560000001 3.062 77.56461809999998 3.859 64.60694639999998 3.745 98.82198449999997 3.092 128.5307006 4.018 92.84385070000002 2.651)
Error minima by case: (0.0 0 45.8044 1 11.2127 8 36.0 2 54.0 2 0.5552 1 13.0 1 0.8336 1 7.8176 1 0.0681 1 0.0 0 6.0 2 0.0 0 0.0 0 30.0 2 33.0 2 3.0 1 0.2223 1 2.0 1 2.0 1 1.3071 1 0.0 0 0.712 1 60.0 1 1.5005 1)
Average genome size in population (length): 67.956
Average program size in population (points): 68.956
Average percent parens in population: 0.015
Minimum age in population: 177.622998481311
Maximum age in population: 182.7271086935972
Average age in population: 180.1900811049735
Median age in population: 180.2146755640274
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 11
Genome diversity (% unique Plush genomes):	 0.841
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 11
Syntactic diversity (% unique Push programs):	 0.841
Total error diversity:				 0.083
Error (vector) diversity:			 0.09
Behavioral diversity:				 0.09
--- Run Statistics ---
Number of program evaluations used so far: 128000
Number of point (instruction) evaluations so far: 243094084
--- Timings ---
Current time: 1529615329248 milliseconds
Total Time:         474.1 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       169.5 seconds, 35.8%
Fitness Testing:    237.1 seconds, 50.0%
Report:              67.3 seconds, 14.2%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 127
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 128
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 128
;;******************************
;; -*- Number IO problem report - generation 128
Test total error for best: 59131.0
Test mean error for best: 29.56550
;;------------------------------
Outputs of best individual on training cases:
Correct output: 1.9526623133   | Program output: -32.0473376867
Correct output: -70.8009773522 | Program output: 8.1990226478  
Correct output: -13.7839009431 | Program output: 77.2160990569 
Correct output: 143.8727406396 | Program output: 94.8727406396 
Correct output: 136.4396027174 | Program output: 69.4396027174 
Correct output: 18.5044280613  | Program output: 116.5044280613
Correct output: 92.0568646792  | Program output: 66.0568646792 
Correct output: 71.8873476205  | Program output: 121.8873476205
Correct output: -10.8388749243 | Program output: -46.8388749243
Correct output: 0.9299825981   | Program output: 73.9299825981 
Correct output: -26.7840412284 | Program output: -26.7840412284
Correct output: -102.1264221267 | Program output: -72.1264221267
Correct output: 40.8061668642  | Program output: 48.8061668642 
Correct output: -5.2544966331  | Program output: -11.2544966331
Correct output: 102.9855886244 | Program output: 59.9855886244 
Correct output: -118.0507723766 | Program output: -61.0507723766
Correct output: 55.9371769928  | Program output: 76.9371769928 
Correct output: 4.2657989984   | Program output: 29.2657989984 
Correct output: 96.7057987603  | Program output: 114.7057987603
Correct output: 122.162446611  | Program output: 107.162446611 
Correct output: 30.0102027945  | Program output: 1.0102027945  
Correct output: 104.5822387035 | Program output: 99.5822387035 
Correct output: -1.5538743366  | Program output: -48.5538743366
Correct output: 166.8070496115 | Program output: 93.8070496115 
Correct output: 58.6188945281  | Program output: 98.6188945281 
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction in1} {:instruction integer_max} {:instruction integer_dup_items} {:instruction float_inc} {:instruction float_yankdup} {:instruction integer_sub} {:instruction integer_dup} {:instruction float_shove} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_mod} {:instruction float_inc} {:instruction integer_dup_items} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_yank} {:instruction float_inc} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_yankdup} {:instruction float_inc} {:instruction float_inc} {:instruction integer_dup_times} {:instruction float_div} {:instruction float_inc} {:instruction integer_div} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_inc} {:instruction float_mult} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_inc} {:instruction integer_mod} {:instruction float_inc} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_inc} {:instruction float_inc} {:instruction float_add} {:instruction integer_max} {:instruction integer_dec} {:instruction float_inc} {:instruction float_inc} {:instruction float_swap} {:instruction float_inc} {:instruction print_float} {:instruction float_dup_items} {:instruction float_div} {:instruction float_inc} {:instruction float_inc} {:instruction float_yankdup} {:instruction print_float} {:instruction float_inc} {:instruction integer_swap} {:instruction float_inc} {:instruction float_yankdup} {:instruction integer_swap})
Best program: (in1 integer_max integer_dup_items float_inc float_yankdup integer_sub integer_dup float_shove float_inc float_inc float_inc integer_mod float_inc integer_dup_items float_inc float_inc float_inc integer_yank float_inc float_inc float_yankdup float_yankdup float_inc float_inc integer_dup_times float_div float_inc integer_div float_inc float_yankdup float_inc float_mult float_inc float_yankdup float_inc integer_mod float_inc float_inc float_yankdup float_inc float_inc float_add integer_max integer_dec float_inc float_inc float_swap float_inc print_float float_dup_items float_div float_inc float_inc float_yankdup print_float float_inc integer_swap float_inc float_yankdup integer_swap)
Errors: [34.0 13 79.0 13 91.0 12 49.0 2 67.0 3 98.0 2 26.0 2 50.0 2 36.0 2 73.0 2 0.0 0 30.0 2 8.0 1 6.0 2 43.0 3 57.0 2 21.0 2 25.0 2 18.0 3 15.0 2 29.0 2 5.0 3 47.0 2 73.0 3 40.0 1]
Total: 1103.0
Mean: 22.06
Genome size: 60
Size: 61
Percent parens: 0.016
--- Population Statistics ---
Average total errors in population: 2862.776210599999
Median total errors in population: 1103.0
Error averages by case: (102.54584779999998 12.741 136.38664110000008 12.786 152.34782590000006 12.054 121.80161730000006 3.596 136.94341310000004 4.254 158.04568360000002 3.305 98.69932429999994 3.324 119.61901170000002 3.555 105.3458659 3.433 135.92236680000005 3.249 75.341708 2.063 106.05627409999997 3.802 79.53837350000002 2.534 73.78604359999996 3.249 114.2222535 4.243 130.31910089999997 3.817 90.31162889999997 3.229 88.09567090000004 3.238 92.53163860000001 4.192 92.05222440000003 3.362 89.58007690000002 4.007 81.42343490000002 4.067 114.08024069999999 3.318 143.97806199999997 4.261 109.2738822 2.849)
Error minima by case: (0.7147 8 20.9506 1 2.9392 9 0.9894 1 27.0 2 0.3889 1 6.3266 1 13.8429 2 0.0058 1 0.0558 1 0.0 0 7.0 2 0.0 0 0.0 0 17.2554 2 34.0 2 1.0 1 1.2658 1 2.0 1 6.0 1 0.0102 1 0.0 0 1.9815 1 21.0 2 16.3811 1)
Average genome size in population (length): 67.61
Average program size in population (points): 68.61
Average percent parens in population: 0.015
Minimum age in population: 179.0000549108141
Maximum age in population: 183.8451952607738
Average age in population: 181.615706624242
Median age in population: 181.6644878945129
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 9
Genome diversity (% unique Plush genomes):	 0.819
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 9
Syntactic diversity (% unique Push programs):	 0.819
Total error diversity:				 0.104
Error (vector) diversity:			 0.114
Behavioral diversity:				 0.116
--- Run Statistics ---
Number of program evaluations used so far: 129000
Number of point (instruction) evaluations so far: 244784334
--- Timings ---
Current time: 1529615332701 milliseconds
Total Time:         477.6 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       170.8 seconds, 35.8%
Fitness Testing:    238.8 seconds, 50.0%
Report:              67.9 seconds, 14.2%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 128
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 129
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 129
;;******************************
;; -*- Number IO problem report - generation 129
Test total error for best: 59131.0
Test mean error for best: 29.56550
;;------------------------------
Outputs of best individual on training cases:
Correct output: 1.9526623133   | Program output: -32.0473376867
Correct output: -70.8009773522 | Program output: 8.1990226478  
Correct output: -13.7839009431 | Program output: 77.2160990569 
Correct output: 143.8727406396 | Program output: 94.8727406396 
Correct output: 136.4396027174 | Program output: 69.4396027174 
Correct output: 18.5044280613  | Program output: 116.5044280613
Correct output: 92.0568646792  | Program output: 66.0568646792 
Correct output: 71.8873476205  | Program output: 121.8873476205
Correct output: -10.8388749243 | Program output: -46.8388749243
Correct output: 0.9299825981   | Program output: 73.9299825981 
Correct output: -26.7840412284 | Program output: -26.7840412284
Correct output: -102.1264221267 | Program output: -72.1264221267
Correct output: 40.8061668642  | Program output: 48.8061668642 
Correct output: -5.2544966331  | Program output: -11.2544966331
Correct output: 102.9855886244 | Program output: 59.9855886244 
Correct output: -118.0507723766 | Program output: -61.0507723766
Correct output: 55.9371769928  | Program output: 76.9371769928 
Correct output: 4.2657989984   | Program output: 29.2657989984 
Correct output: 96.7057987603  | Program output: 114.7057987603
Correct output: 122.162446611  | Program output: 107.162446611 
Correct output: 30.0102027945  | Program output: 1.0102027945  
Correct output: 104.5822387035 | Program output: 99.5822387035 
Correct output: -1.5538743366  | Program output: -48.5538743366
Correct output: 166.8070496115 | Program output: 93.8070496115 
Correct output: 58.6188945281  | Program output: 98.6188945281 
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction in1} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_inc} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_div} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_yank} {:instruction float_inc} {:instruction float_div} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_inc} {:instruction float_rot} {:instruction float_inc} {:instruction float_inc} {:instruction integer_mult} {:instruction float_inc} {:instruction integer_max} {:instruction integer_mod} {:instruction integer_div} {:instruction float_mult} {:instruction integer_min} {:instruction float_yankdup} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_inc} {:instruction float_div} {:instruction float_yankdup} {:instruction float_inc} {:instruction float_inc} {:instruction float_swap} {:instruction float_dup_items} {:instruction float_div} {:instruction float_inc} {:instruction float_sub} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_inc} {:instruction integer_mod} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_yank} {:instruction float_inc} {:instruction float_yankdup} {:instruction print_float} {:instruction float_inc} {:instruction print_float} {:instruction float_inc} {:instruction float_swap} {:instruction float_inc} {:instruction float_tan} {:instruction tag_integer_667} {:instruction float_yankdup} {:instruction print_float} {:instruction float_flush} {:instruction float_dup_items} {:instruction integer_dec} {:instruction float_inc} {:instruction float_swap} {:instruction float_inc} {:instruction float_tan} {:instruction integer_dup_items} {:instruction integer_yank} {:instruction integer_mod} {:instruction float_div} {:instruction float_inc} {:instruction float_flush} {:instruction integer_stackdepth} {:instruction tag_float_856})
Best program: (in1 float_inc float_yankdup float_inc float_inc float_yankdup float_div float_inc float_yankdup float_yank float_inc float_div float_inc float_inc float_inc float_yankdup float_inc float_rot float_inc float_inc integer_mult float_inc integer_max integer_mod integer_div float_mult integer_min float_yankdup float_inc float_yankdup float_inc float_div float_yankdup float_inc float_inc float_swap float_dup_items float_div float_inc float_sub float_inc float_yankdup float_inc float_yankdup float_inc integer_mod float_inc float_inc float_inc float_yank float_inc float_yankdup print_float float_inc print_float float_inc float_swap float_inc float_tan tag_integer_667 float_yankdup print_float float_flush float_dup_items integer_dec float_inc float_swap float_inc float_tan integer_dup_items integer_yank integer_mod float_div float_inc float_flush integer_stackdepth tag_float_856)
Errors: [34.0 13 79.0 13 91.0 12 49.0 2 67.0 3 98.0 2 26.0 2 50.0 2 36.0 2 73.0 2 0.0 0 30.0 2 8.0 1 6.0 2 43.0 3 57.0 2 21.0 2 25.0 2 18.0 3 15.0 2 29.0 2 5.0 3 47.0 2 73.0 3 40.0 1]
Total: 1103.0
Mean: 22.06
Genome size: 77
Size: 78
Percent parens: 0.013
--- Population Statistics ---
Average total errors in population: 2772.1444213000004
Median total errors in population: 1103.0
Error averages by case: (100.02962010000005 12.78 132.92197870000004 12.818 149.99339360000002 12.087 117.65798760000008 3.505 132.86175949999998 4.088 155.2390395 3.177 94.48291689999999 3.189 115.65767920000003 3.454 102.59303960000003 3.316 133.36381420000012 3.106 72.42201760000002 1.95 103.11610189999998 3.725 75.65352519999998 2.417 71.21474160000001 3.136 109.9342527 4.099 127.46540499999996 3.729 87.3304322 3.122 84.76369230000002 3.146 87.84408559999997 4.061 86.74501630000003 3.219 84.1281955 3.991 77.02607920000001 3.893 111.72985389999998 3.222 139.84493789999996 4.127 105.98485550000001 2.783)
Error minima by case: (1.9664 7 52.2123 1 14.5136 9 38.0 2 56.0 2 0.5547 1 13.4088 1 23.2123 2 9.6853 1 0.3417 1 0.0 0 3.2123 2 0.1938 1 0.0 0 24.3375 2 30.2123 2 0.0 0 0.7254 1 2.0 1 4.0 1 4.8777 1 0.0 0 2.1949 1 62.0 2 13.2123 1)
Average genome size in population (length): 67.397
Average program size in population (points): 68.397
Average percent parens in population: 0.015
Minimum age in population: 180.2354125995016
Maximum age in population: 185.3141597863751
Average age in population: 183.0595329819515
Median age in population: 183.119629575619
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 9
Genome diversity (% unique Plush genomes):	 0.838
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 9
Syntactic diversity (% unique Push programs):	 0.838
Total error diversity:				 0.093
Error (vector) diversity:			 0.103
Behavioral diversity:				 0.103
--- Run Statistics ---
Number of program evaluations used so far: 130000
Number of point (instruction) evaluations so far: 246469309
--- Timings ---
Current time: 1529615336273 milliseconds
Total Time:         481.1 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       172.1 seconds, 35.8%
Fitness Testing:    240.5 seconds, 50.0%
Report:              68.3 seconds, 14.2%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 129
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 130
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 130
;;******************************
;; -*- Number IO problem report - generation 130
Test total error for best: 59131.0
Test mean error for best: 29.56550
;;------------------------------
Outputs of best individual on training cases:
Correct output: 1.9526623133   | Program output: -32.0473376867
Correct output: -70.8009773522 | Program output: 8.1990226478  
Correct output: -13.7839009431 | Program output: 77.2160990569 
Correct output: 143.8727406396 | Program output: 94.8727406396 
Correct output: 136.4396027174 | Program output: 69.4396027174 
Correct output: 18.5044280613  | Program output: 116.5044280613
Correct output: 92.0568646792  | Program output: 66.0568646792 
Correct output: 71.8873476205  | Program output: 121.8873476205
Correct output: -10.8388749243 | Program output: -46.8388749243
Correct output: 0.9299825981   | Program output: 73.9299825981 
Correct output: -26.7840412284 | Program output: -26.7840412284
Correct output: -102.1264221267 | Program output: -72.1264221267
Correct output: 40.8061668642  | Program output: 48.8061668642 
Correct output: -5.2544966331  | Program output: -11.2544966331
Correct output: 102.9855886244 | Program output: 59.9855886244 
Correct output: -118.0507723766 | Program output: -61.0507723766
Correct output: 55.9371769928  | Program output: 76.9371769928 
Correct output: 4.2657989984   | Program output: 29.2657989984 
Correct output: 96.7057987603  | Program output: 114.7057987603
Correct output: 122.162446611  | Program output: 107.162446611 
Correct output: 30.0102027945  | Program output: 1.0102027945  
Correct output: 104.5822387035 | Program output: 99.5822387035 
Correct output: -1.5538743366  | Program output: -48.5538743366
Correct output: 166.8070496115 | Program output: 93.8070496115 
Correct output: 58.6188945281  | Program output: 98.6188945281 
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction in1} {:instruction float_inc} {:instruction integer_yank} {:instruction float_inc} {:instruction float_inc} {:instruction integer_dup} {:instruction float_div} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_dup_items} {:instruction float_div} {:instruction float_inc} {:instruction float_div} {:instruction float_inc} {:instruction integer_mod} {:instruction float_inc} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_yankdup} {:instruction float_inc} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_frominteger} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_inc} {:instruction integer_yank} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_inc} {:instruction float_yankdup} {:instruction integer_swap} {:instruction float_mod} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_inc} {:instruction float_min} {:instruction float_inc} {:instruction float_yankdup} {:instruction integer_max} {:instruction float_inc} {:instruction float_sub} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_inc} {:instruction float_yankdup} {:instruction integer_dec} {:instruction in2} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_yankdup} {:instruction print_float} {:instruction integer_div} {:instruction float_inc} {:instruction float_add})
Best program: (in1 float_inc integer_yank float_inc float_inc integer_dup float_div float_inc float_yankdup float_dup_items float_div float_inc float_div float_inc integer_mod float_inc float_inc float_yankdup float_yankdup float_inc float_inc float_yankdup float_frominteger float_inc float_yankdup float_inc float_yankdup float_inc integer_yank float_inc float_yankdup float_inc float_yankdup integer_swap float_mod float_inc float_yankdup float_inc float_min float_inc float_yankdup integer_max float_inc float_sub float_inc float_yankdup float_inc float_yankdup integer_dec in2 float_inc float_inc float_inc float_yankdup print_float integer_div float_inc float_add)
Errors: [34.0 13 79.0 13 91.0 12 49.0 2 67.0 3 98.0 2 26.0 2 50.0 2 36.0 2 73.0 2 0.0 0 30.0 2 8.0 1 6.0 2 43.0 3 57.0 2 21.0 2 25.0 2 18.0 3 15.0 2 29.0 2 5.0 3 47.0 2 73.0 3 40.0 1]
Total: 1103.0
Mean: 22.06
Genome size: 58
Size: 59
Percent parens: 0.017
--- Population Statistics ---
Average total errors in population: 2986.6244919000005
Median total errors in population: 1103.0
Error averages by case: (107.94626109999996 12.799 140.66621160000005 12.803 159.81005000000002 12.072 126.11749740000003 3.581 141.48501659999994 4.182 164.92047059999996 3.254 103.63100830000003 3.25 125.0018136 3.496 110.25539580000003 3.335 143.41351990000004 3.172 80.1370877 2.008 110.301576 3.742 84.95943879999999 2.455 79.7335796 3.197 118.9662335 4.189 134.60844400000002 3.759 95.7764061 3.198 90.9727687 3.156 96.47841519999999 4.143 95.48780380000002 3.294 93.17904950000003 4.12 86.01180580000002 3.964 119.4825096 3.257 148.15195110000002 4.223 115.6681776 2.813)
Error minima by case: (0.1623 7 31.3822 2 0.4685 8 2.5547 1 29.7546 2 0.3808 1 4.1736 1 1.1949 2 2.8287 1 0.1323 1 0.0 0 6.0 2 0.0 0 0.0 0 17.3312 2 7.1387 2 1.0 1 1.0 1 3.0 1 5.0 1 1.5516 1 0.0 0 1.9785 1 0.0759 2 0.439 1)
Average genome size in population (length): 67.249
Average program size in population (points): 68.249
Average percent parens in population: 0.015
Minimum age in population: 181.2354125995016
Maximum age in population: 186.3287289125373
Average age in population: 184.4002655632432
Median age in population: 184.395201610786
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 8
Genome diversity (% unique Plush genomes):	 0.829
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 8
Syntactic diversity (% unique Push programs):	 0.829
Total error diversity:				 0.094
Error (vector) diversity:			 0.103
Behavioral diversity:				 0.105
--- Run Statistics ---
Number of program evaluations used so far: 131000
Number of point (instruction) evaluations so far: 248150559
--- Timings ---
Current time: 1529615339761 milliseconds
Total Time:         484.7 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       173.4 seconds, 35.8%
Fitness Testing:    242.3 seconds, 50.0%
Report:              68.9 seconds, 14.2%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 130
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 131
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 131
;;******************************
;; -*- Number IO problem report - generation 131
Test total error for best: 59131.0
Test mean error for best: 29.56550
;;------------------------------
Outputs of best individual on training cases:
Correct output: 1.9526623133   | Program output: -32.0473376867
Correct output: -70.8009773522 | Program output: 8.1990226478  
Correct output: -13.7839009431 | Program output: 77.2160990569 
Correct output: 143.8727406396 | Program output: 94.8727406396 
Correct output: 136.4396027174 | Program output: 69.4396027174 
Correct output: 18.5044280613  | Program output: 116.5044280613
Correct output: 92.0568646792  | Program output: 66.0568646792 
Correct output: 71.8873476205  | Program output: 121.8873476205
Correct output: -10.8388749243 | Program output: -46.8388749243
Correct output: 0.9299825981   | Program output: 73.9299825981 
Correct output: -26.7840412284 | Program output: -26.7840412284
Correct output: -102.1264221267 | Program output: -72.1264221267
Correct output: 40.8061668642  | Program output: 48.8061668642 
Correct output: -5.2544966331  | Program output: -11.2544966331
Correct output: 102.9855886244 | Program output: 59.9855886244 
Correct output: -118.0507723766 | Program output: -61.0507723766
Correct output: 55.9371769928  | Program output: 76.9371769928 
Correct output: 4.2657989984   | Program output: 29.2657989984 
Correct output: 96.7057987603  | Program output: 114.7057987603
Correct output: 122.162446611  | Program output: 107.162446611 
Correct output: 30.0102027945  | Program output: 1.0102027945  
Correct output: 104.5822387035 | Program output: 99.5822387035 
Correct output: -1.5538743366  | Program output: -48.5538743366
Correct output: 166.8070496115 | Program output: 93.8070496115 
Correct output: 58.6188945281  | Program output: 98.6188945281 
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction in1} {:instruction integer_max} {:instruction integer_div} {:instruction integer_sub} {:instruction integer_mod} {:instruction integer_max} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_inc} {:instruction float_inc} {:instruction integer_mod} {:instruction float_inc} {:instruction integer_dup_items} {:instruction float_inc} {:instruction float_rot} {:instruction float_inc} {:instruction float_inc} {:instruction float_rot} {:instruction float_inc} {:instruction integer_flush} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_inc} {:instruction float_shove} {:instruction float_inc} {:instruction integer_dup} {:instruction float_inc} {:instruction float_rot} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_div} {:instruction float_dup_items} {:instruction float_div} {:instruction float_inc} {:instruction float_inc} {:instruction integer_mod} {:instruction float_inc} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_div} {:instruction integer_flush} {:instruction float_yankdup} {:instruction float_mult} {:instruction float_shove} {:instruction float_yankdup} {:instruction float_inc} {:instruction float_min} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_div} {:instruction float_inc} {:instruction float_yankdup} {:instruction print_float} {:instruction float_flush} {:instruction float_inc} {:instruction float_inc} {:instruction integer_rot} {:instruction float_dup_items} {:instruction float_div} {:instruction float_pop} {:instruction float_div} {:instruction float_inc} {:instruction integer_add} {:instruction -43} {:instruction float_dup_times} {:instruction integer_shove} {:instruction in1})
Best program: (in1 integer_max integer_div integer_sub integer_mod integer_max float_inc float_yankdup float_inc float_inc integer_mod float_inc integer_dup_items float_inc float_rot float_inc float_inc float_rot float_inc integer_flush float_inc float_yankdup float_inc float_shove float_inc integer_dup float_inc float_rot float_inc float_inc float_inc float_div float_dup_items float_div float_inc float_inc integer_mod float_inc float_inc float_yankdup float_div integer_flush float_yankdup float_mult float_shove float_yankdup float_inc float_min float_inc float_inc float_inc integer_div float_inc float_yankdup print_float float_flush float_inc float_inc integer_rot float_dup_items float_div float_pop float_div float_inc integer_add -43 float_dup_times integer_shove in1)
Errors: [34.0 13 79.0 13 91.0 12 49.0 2 67.0 3 98.0 2 26.0 2 50.0 2 36.0 2 73.0 2 0.0 0 30.0 2 8.0 1 6.0 2 43.0 3 57.0 2 21.0 2 25.0 2 18.0 3 15.0 2 29.0 2 5.0 3 47.0 2 73.0 3 40.0 1]
Total: 1103.0
Mean: 22.06
Genome size: 69
Size: 70
Percent parens: 0.014
--- Population Statistics ---
Average total errors in population: 2537.008864600001
Median total errors in population: 1103.0
Error averages by case: (90.2738808 12.738 125.60215650000004 12.737 141.47794820000004 12.04 108.27009720000002 3.374 123.8648112 3.978 146.59464960000003 3.07 85.14736450000001 3.093 106.20070740000001 3.32 92.82739770000005 3.19 124.71437560000003 3.001 62.04825349999999 1.795 92.7408836 3.575 65.9103718 2.237 61.98891759999999 3.052 100.65762790000001 3.989 117.34857299999997 3.582 77.9830608 2.999 75.55614999999993 3.018 78.01006610000003 3.946 76.95719720000001 3.099 76.92319139999998 3.815 67.2536641 3.787 102.10794379999997 3.089 130.7131867 4.023 96.66538840000003 2.624)
Error minima by case: (0.4196 7 10.3069 1 13.158 9 21.8727 2 20.5604 2 0.0343 1 11.831 1 8.3385 2 2.8325 1 0.4229 1 0.0 0 6.0 2 0.0 0 0.0 0 6.0144 2 11.6931 2 1.0 1 0.7342 1 2.0 1 4.0 1 0.8879 1 0.0 0 1.0142 1 2.193 2 16.0 1)
Average genome size in population (length): 67.225
Average program size in population (points): 68.225
Average percent parens in population: 0.015
Minimum age in population: 183.3278991131437
Maximum age in population: 187.8483192727591
Average age in population: 185.8348263055466
Median age in population: 185.8747746385966
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 9
Genome diversity (% unique Plush genomes):	 0.841
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 9
Syntactic diversity (% unique Push programs):	 0.841
Total error diversity:				 0.089
Error (vector) diversity:			 0.096
Behavioral diversity:				 0.098
--- Run Statistics ---
Number of program evaluations used so far: 132000
Number of point (instruction) evaluations so far: 249831184
--- Timings ---
Current time: 1529615343302 milliseconds
Total Time:         488.2 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       174.8 seconds, 35.8%
Fitness Testing:    244.0 seconds, 50.0%
Report:              69.3 seconds, 14.2%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 131
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 132
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 132
;;******************************
;; -*- Number IO problem report - generation 132
Test total error for best: 59131.0
Test mean error for best: 29.56550
;;------------------------------
Outputs of best individual on training cases:
Correct output: 1.9526623133   | Program output: -32.0473376867
Correct output: -70.8009773522 | Program output: 8.1990226478  
Correct output: -13.7839009431 | Program output: 77.2160990569 
Correct output: 143.8727406396 | Program output: 94.8727406396 
Correct output: 136.4396027174 | Program output: 69.4396027174 
Correct output: 18.5044280613  | Program output: 116.5044280613
Correct output: 92.0568646792  | Program output: 66.0568646792 
Correct output: 71.8873476205  | Program output: 121.8873476205
Correct output: -10.8388749243 | Program output: -46.8388749243
Correct output: 0.9299825981   | Program output: 73.9299825981 
Correct output: -26.7840412284 | Program output: -26.7840412284
Correct output: -102.1264221267 | Program output: -72.1264221267
Correct output: 40.8061668642  | Program output: 48.8061668642 
Correct output: -5.2544966331  | Program output: -11.2544966331
Correct output: 102.9855886244 | Program output: 59.9855886244 
Correct output: -118.0507723766 | Program output: -61.0507723766
Correct output: 55.9371769928  | Program output: 76.9371769928 
Correct output: 4.2657989984   | Program output: 29.2657989984 
Correct output: 96.7057987603  | Program output: 114.7057987603
Correct output: 122.162446611  | Program output: 107.162446611 
Correct output: 30.0102027945  | Program output: 1.0102027945  
Correct output: 104.5822387035 | Program output: 99.5822387035 
Correct output: -1.5538743366  | Program output: -48.5538743366
Correct output: 166.8070496115 | Program output: 93.8070496115 
Correct output: 58.6188945281  | Program output: 98.6188945281 
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction in1} {:instruction integer_max} {:instruction integer_div} {:instruction integer_sub} {:instruction integer_mod} {:instruction integer_max} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_inc} {:instruction float_inc} {:instruction integer_mod} {:instruction float_inc} {:instruction integer_dup_items} {:instruction float_inc} {:instruction float_rot} {:instruction float_inc} {:instruction float_inc} {:instruction float_rot} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_inc} {:instruction float_shove} {:instruction float_inc} {:instruction integer_dup} {:instruction float_inc} {:instruction float_rot} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_div} {:instruction float_dup_items} {:instruction float_div} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_dup_items} {:instruction float_mult} {:instruction float_dup_times} {:instruction float_div} {:instruction float_inc} {:instruction integer_max} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_inc} {:instruction print_integer} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_yank} {:instruction float_inc} {:instruction print_float} {:instruction float_swap} {:instruction integer_stackdepth} {:instruction tag_float_856} {:instruction float_inc} {:instruction float_inc} {:instruction integer_dup})
Best program: (in1 integer_max integer_div integer_sub integer_mod integer_max float_inc float_yankdup float_inc float_inc integer_mod float_inc integer_dup_items float_inc float_rot float_inc float_inc float_rot float_inc float_yankdup float_inc float_yankdup float_inc float_shove float_inc integer_dup float_inc float_rot float_inc float_inc float_inc float_div float_dup_items float_div float_inc float_yankdup float_dup_items float_mult float_dup_times float_div float_inc integer_max float_inc float_yankdup float_inc float_yankdup float_inc print_integer float_inc float_inc float_inc float_yank float_inc print_float float_swap integer_stackdepth tag_float_856 float_inc float_inc integer_dup)
Errors: [34.0 13 79.0 13 91.0 12 49.0 2 67.0 3 98.0 2 26.0 2 50.0 2 36.0 2 73.0 2 0.0 0 30.0 2 8.0 1 6.0 2 43.0 3 57.0 2 21.0 2 25.0 2 18.0 3 15.0 2 29.0 2 5.0 3 47.0 2 73.0 3 40.0 1]
Total: 1103.0
Mean: 22.06
Genome size: 60
Size: 61
Percent parens: 0.016
--- Population Statistics ---
Average total errors in population: 2876.2089063999997
Median total errors in population: 1103.0
Error averages by case: (104.13208619999997 12.733 135.72661230000003 12.748 154.48455149999998 12.072 122.19676580000008 3.495 137.77938139999998 4.086 159.97753169999996 3.165 99.70258969999999 3.182 119.5534246 3.414 106.85951230000003 3.27 137.84026690000005 3.081 76.39832820000002 1.903 104.62947979999994 3.654 81.1336359 2.366 73.25168520000003 3.11 115.3057638 4.074 128.8993998 3.685 93.37670160000003 3.096 88.59294909999998 3.086 92.5019197 4.026 91.31400989999999 3.198 89.4140278 3.98 81.68857840000001 3.875 115.58423509999999 3.192 144.24830339999997 4.106 110.29016630000001 2.73)
Error minima by case: (0.1649 6 55.0 1 13.5393 9 21.8727 1 21.5604 2 0.4956 1 16.0569 1 26.0 2 9.8792 1 0.1323 1 0.0 0 6.0 2 0.0 0 1.0 1 7.0144 2 28.0508 2 1.0 1 0.2917 1 0.0 0 6.0 1 4.0102 1 0.0 0 1.4135 1 3.193 2 16.0 1)
Average genome size in population (length): 66.64
Average program size in population (points): 67.64
Average percent parens in population: 0.015
Minimum age in population: 184.3278991131437
Maximum age in population: 189.3928588195252
Average age in population: 187.2401937762521
Median age in population: 187.2732996330202
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 7
Genome diversity (% unique Plush genomes):	 0.862
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 7
Syntactic diversity (% unique Push programs):	 0.862
Total error diversity:				 0.079
Error (vector) diversity:			 0.089
Behavioral diversity:				 0.09
--- Run Statistics ---
Number of program evaluations used so far: 133000
Number of point (instruction) evaluations so far: 251497184
--- Timings ---
Current time: 1529615346722 milliseconds
Total Time:         491.6 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       176.1 seconds, 35.8%
Fitness Testing:    245.7 seconds, 50.0%
Report:              69.8 seconds, 14.2%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 132
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 133
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 133
;;******************************
;; -*- Number IO problem report - generation 133
Test total error for best: 59131.0
Test mean error for best: 29.56550
;;------------------------------
Outputs of best individual on training cases:
Correct output: 1.9526623133   | Program output: -32.0473376867
Correct output: -70.8009773522 | Program output: 8.1990226478  
Correct output: -13.7839009431 | Program output: 77.2160990569 
Correct output: 143.8727406396 | Program output: 94.8727406396 
Correct output: 136.4396027174 | Program output: 69.4396027174 
Correct output: 18.5044280613  | Program output: 116.5044280613
Correct output: 92.0568646792  | Program output: 66.0568646792 
Correct output: 71.8873476205  | Program output: 121.8873476205
Correct output: -10.8388749243 | Program output: -46.8388749243
Correct output: 0.9299825981   | Program output: 73.9299825981 
Correct output: -26.7840412284 | Program output: -26.7840412284
Correct output: -102.1264221267 | Program output: -72.1264221267
Correct output: 40.8061668642  | Program output: 48.8061668642 
Correct output: -5.2544966331  | Program output: -11.2544966331
Correct output: 102.9855886244 | Program output: 59.9855886244 
Correct output: -118.0507723766 | Program output: -61.0507723766
Correct output: 55.9371769928  | Program output: 76.9371769928 
Correct output: 4.2657989984   | Program output: 29.2657989984 
Correct output: 96.7057987603  | Program output: 114.7057987603
Correct output: 122.162446611  | Program output: 107.162446611 
Correct output: 30.0102027945  | Program output: 1.0102027945  
Correct output: 104.5822387035 | Program output: 99.5822387035 
Correct output: -1.5538743366  | Program output: -48.5538743366
Correct output: 166.8070496115 | Program output: 93.8070496115 
Correct output: 58.6188945281  | Program output: 98.6188945281 
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction in1} {:instruction integer_max} {:instruction -4} {:instruction integer_sub} {:instruction integer_dup_items} {:instruction integer_sub} {:instruction integer_yankdup} {:instruction integer_div} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_inc} {:instruction float_inc} {:instruction integer_mod} {:instruction float_inc} {:instruction integer_dup_items} {:instruction float_inc} {:instruction float_rot} {:instruction float_inc} {:instruction float_swap} {:instruction float_inc} {:instruction float_inc} {:instruction float_shove} {:instruction float_inc} {:instruction float_frominteger} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_inc} {:instruction float_inc} {:instruction integer_dup_times} {:instruction float_div} {:instruction float_inc} {:instruction integer_div} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_inc} {:instruction float_mult} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_inc} {:instruction integer_mod} {:instruction float_inc} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_div} {:instruction integer_flush} {:instruction float_yankdup} {:instruction float_mult} {:instruction float_shove} {:instruction float_yankdup} {:instruction float_inc} {:instruction float_mod} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_div} {:instruction float_inc} {:instruction float_yankdup} {:instruction print_float} {:instruction float_shove} {:instruction float_inc} {:instruction float_inc} {:instruction integer_rot} {:instruction float_dup_items} {:instruction float_div} {:instruction float_pop} {:instruction float_div} {:instruction float_frominteger} {:instruction float_rot})
Best program: (in1 integer_max -4 integer_sub integer_dup_items integer_sub integer_yankdup integer_div float_inc float_yankdup float_inc float_inc integer_mod float_inc integer_dup_items float_inc float_rot float_inc float_swap float_inc float_inc float_shove float_inc float_frominteger float_inc float_yankdup float_inc float_inc integer_dup_times float_div float_inc integer_div float_inc float_yankdup float_inc float_mult float_inc float_yankdup float_inc integer_mod float_inc float_inc float_yankdup float_div integer_flush float_yankdup float_mult float_shove float_yankdup float_inc float_mod float_inc float_inc float_inc integer_div float_inc float_yankdup print_float float_shove float_inc float_inc integer_rot float_dup_items float_div float_pop float_div float_frominteger float_rot)
Errors: [34.0 13 79.0 13 91.0 12 49.0 2 67.0 3 98.0 2 26.0 2 50.0 2 36.0 2 73.0 2 0.0 0 30.0 2 8.0 1 6.0 2 43.0 3 57.0 2 21.0 2 25.0 2 18.0 3 15.0 2 29.0 2 5.0 3 47.0 2 73.0 3 40.0 1]
Total: 1103.0
Mean: 22.06
Genome size: 68
Size: 69
Percent parens: 0.014
--- Population Statistics ---
Average total errors in population: 2580.976396399999
Median total errors in population: 1103.0
Error averages by case: (91.05363860000001 12.736 128.7464206 12.783 142.10503469999998 12.009 110.78742890000005 3.427 126.29918100000006 4.034 147.30051090000003 3.115 87.63706359999999 3.128 107.5260218 3.379 93.42881870000002 3.235 125.48373430000002 3.053 63.25250960000001 1.884 92.2940792 3.646 68.7016343 2.35 63.546690600000005 3.077 103.24727830000002 4.034 117.52475709999992 3.641 79.27030469999998 3.043 77.8782709 3.059 80.0487922 4.017 79.55305229999999 3.157 81.12755550000003 3.939 69.81587230000001 3.817 102.67214739999997 3.152 133.27693899999997 4.072 97.91465990000003 2.697)
Error minima by case: (0.0759 8 7.6969 1 9.2161 9 6.9089 2 11.0911 2 0.5247 1 16.0 1 2.205 2 3.8143 1 0.3909 1 0.0 0 8.1264 2 0.0 0 0.0 0 12.9089 2 35.0508 2 1.9372 1 0.2223 1 2.0 1 5.0 1 3.5516 1 0.0 0 2.2695 1 17.0911 2 0.5742 1)
Average genome size in population (length): 66.326
Average program size in population (points): 67.326
Average percent parens in population: 0.015
Minimum age in population: 186.0442079550335
Maximum age in population: 190.6245595645778
Average age in population: 188.6478745258654
Median age in population: 188.7068199128486
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 7
Genome diversity (% unique Plush genomes):	 0.855
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 7
Syntactic diversity (% unique Push programs):	 0.855
Total error diversity:				 0.09
Error (vector) diversity:			 0.098
Behavioral diversity:				 0.1
--- Run Statistics ---
Number of program evaluations used so far: 134000
Number of point (instruction) evaluations so far: 253155334
--- Timings ---
Current time: 1529615350180 milliseconds
Total Time:         495.0 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       177.4 seconds, 35.8%
Fitness Testing:    247.3 seconds, 50.0%
Report:              70.2 seconds, 14.2%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 133
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 134
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 134
;;******************************
;; -*- Number IO problem report - generation 134
Test total error for best: 59131.0
Test mean error for best: 29.56550
;;------------------------------
Outputs of best individual on training cases:
Correct output: 1.9526623133   | Program output: -32.0473376867
Correct output: -70.8009773522 | Program output: 8.1990226478  
Correct output: -13.7839009431 | Program output: 77.2160990569 
Correct output: 143.8727406396 | Program output: 94.8727406396 
Correct output: 136.4396027174 | Program output: 69.4396027174 
Correct output: 18.5044280613  | Program output: 116.5044280613
Correct output: 92.0568646792  | Program output: 66.0568646792 
Correct output: 71.8873476205  | Program output: 121.8873476205
Correct output: -10.8388749243 | Program output: -46.8388749243
Correct output: 0.9299825981   | Program output: 73.9299825981 
Correct output: -26.7840412284 | Program output: -26.7840412284
Correct output: -102.1264221267 | Program output: -72.1264221267
Correct output: 40.8061668642  | Program output: 48.8061668642 
Correct output: -5.2544966331  | Program output: -11.2544966331
Correct output: 102.9855886244 | Program output: 59.9855886244 
Correct output: -118.0507723766 | Program output: -61.0507723766
Correct output: 55.9371769928  | Program output: 76.9371769928 
Correct output: 4.2657989984   | Program output: 29.2657989984 
Correct output: 96.7057987603  | Program output: 114.7057987603
Correct output: 122.162446611  | Program output: 107.162446611 
Correct output: 30.0102027945  | Program output: 1.0102027945  
Correct output: 104.5822387035 | Program output: 99.5822387035 
Correct output: -1.5538743366  | Program output: -48.5538743366
Correct output: 166.8070496115 | Program output: 93.8070496115 
Correct output: 58.6188945281  | Program output: 98.6188945281 
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction in1} {:instruction float_div} {:instruction float_shove} {:instruction integer_sub} {:instruction integer_mod} {:instruction integer_div} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_div} {:instruction float_inc} {:instruction float_rot} {:instruction float_inc} {:instruction float_inc} {:instruction float_div} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_inc} {:instruction float_div} {:instruction float_inc} {:instruction float_swap} {:instruction float_inc} {:instruction float_rot} {:instruction float_inc} {:instruction float_inc} {:instruction print_integer} {:instruction float_inc} {:instruction float_yankdup} {:instruction integer_mod} {:instruction integer_rot} {:instruction float_inc} {:instruction integer_inc} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_mult} {:instruction float_yank} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_inc} {:instruction float_yankdup} {:instruction integer_dup_items} {:instruction float_yankdup} {:instruction float_inc} {:instruction integer_flush} {:instruction float_yankdup} {:instruction float_mult} {:instruction float_yankdup} {:instruction float_inc} {:instruction float_inc} {:instruction integer_mod} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_mult} {:instruction float_inc} {:instruction integer_flush} {:instruction print_float})
Best program: (in1 float_div float_shove integer_sub integer_mod integer_div float_inc float_yankdup float_inc float_yankdup float_div float_inc float_rot float_inc float_inc float_div float_inc float_yankdup float_inc float_yankdup float_inc float_div float_inc float_swap float_inc float_rot float_inc float_inc print_integer float_inc float_yankdup integer_mod integer_rot float_inc integer_inc float_inc float_yankdup float_mult float_yank float_inc float_yankdup float_inc float_yankdup integer_dup_items float_yankdup float_inc integer_flush float_yankdup float_mult float_yankdup float_inc float_inc integer_mod float_inc float_inc float_inc float_mult float_inc integer_flush print_float)
Errors: [34.0 13 79.0 13 91.0 12 49.0 2 67.0 3 98.0 2 26.0 2 50.0 2 36.0 2 73.0 2 0.0 0 30.0 2 8.0 1 6.0 2 43.0 3 57.0 2 21.0 2 25.0 2 18.0 3 15.0 2 29.0 2 5.0 3 47.0 2 73.0 3 40.0 1]
Total: 1103.0
Mean: 22.06
Genome size: 60
Size: 61
Percent parens: 0.016
--- Population Statistics ---
Average total errors in population: 2621.5534844
Median total errors in population: 1103.0
Error averages by case: (92.97751249999999 12.765 130.26615920000006 12.765 144.0368504999999 12.02 112.21722420000005 3.386 127.78959719999992 4.034 149.16185410000003 3.098 89.16717489999998 3.092 109.0321922 3.347 95.47533729999998 3.228 127.34529730000006 3.044 64.56983769999998 1.849 94.3788641 3.605 70.17417599999997 2.326 64.66221739999996 3.059 104.80705209999999 4.036 119.1216342 3.616 80.8193323 3.021 80.61015520000004 3.047 81.92880480000002 3.992 80.89841770000001 3.14 82.1057492 3.851 71.15556509999999 3.838 104.73069369999997 3.138 134.605901 4.052 99.5118845 2.655)
Error minima by case: (0.8961 1 25.2533 1 13.6028 8 40.0 1 58.0 2 0.4956 1 17.0 1 28.0 2 9.655 1 0.6091 1 0.0 0 8.0 2 1.0 1 0.0 0 34.0 2 35.0 2 1.0 1 0.0 0 0.7058 1 6.0 1 4.0102 1 0.0 0 0.1985 1 64.0 2 18.0 1)
Average genome size in population (length): 66.096
Average program size in population (points): 67.096
Average percent parens in population: 0.015
Minimum age in population: 187.6967759757491
Maximum age in population: 191.9445156592475
Average age in population: 190.0991230556948
Median age in population: 190.1125828971274
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 5
Genome diversity (% unique Plush genomes):	 0.831
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 5
Syntactic diversity (% unique Push programs):	 0.831
Total error diversity:				 0.091
Error (vector) diversity:			 0.1
Behavioral diversity:				 0.102
--- Run Statistics ---
Number of program evaluations used so far: 135000
Number of point (instruction) evaluations so far: 254807734
--- Timings ---
Current time: 1529615353653 milliseconds
Total Time:         498.6 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       178.7 seconds, 35.8%
Fitness Testing:    249.0 seconds, 49.9%
Report:              70.7 seconds, 14.2%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 134
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 135
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 135
;;******************************
;; -*- Number IO problem report - generation 135
Test total error for best: 59131.0
Test mean error for best: 29.56550
;;------------------------------
Outputs of best individual on training cases:
Correct output: 1.9526623133   | Program output: -32.0473376867
Correct output: -70.8009773522 | Program output: 8.1990226478  
Correct output: -13.7839009431 | Program output: 77.2160990569 
Correct output: 143.8727406396 | Program output: 94.8727406396 
Correct output: 136.4396027174 | Program output: 69.4396027174 
Correct output: 18.5044280613  | Program output: 116.5044280613
Correct output: 92.0568646792  | Program output: 66.0568646792 
Correct output: 71.8873476205  | Program output: 121.8873476205
Correct output: -10.8388749243 | Program output: -46.8388749243
Correct output: 0.9299825981   | Program output: 73.9299825981 
Correct output: -26.7840412284 | Program output: -26.7840412284
Correct output: -102.1264221267 | Program output: -72.1264221267
Correct output: 40.8061668642  | Program output: 48.8061668642 
Correct output: -5.2544966331  | Program output: -11.2544966331
Correct output: 102.9855886244 | Program output: 59.9855886244 
Correct output: -118.0507723766 | Program output: -61.0507723766
Correct output: 55.9371769928  | Program output: 76.9371769928 
Correct output: 4.2657989984   | Program output: 29.2657989984 
Correct output: 96.7057987603  | Program output: 114.7057987603
Correct output: 122.162446611  | Program output: 107.162446611 
Correct output: 30.0102027945  | Program output: 1.0102027945  
Correct output: 104.5822387035 | Program output: 99.5822387035 
Correct output: -1.5538743366  | Program output: -48.5538743366
Correct output: 166.8070496115 | Program output: 93.8070496115 
Correct output: 58.6188945281  | Program output: 98.6188945281 
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction in1} {:instruction float_div} {:instruction float_shove} {:instruction integer_sub} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_mod} {:instruction float_inc} {:instruction integer_dup_items} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_yank} {:instruction float_inc} {:instruction integer_max} {:instruction float_div} {:instruction float_inc} {:instruction float_yank} {:instruction float_inc} {:instruction integer_dup_times} {:instruction float_inc} {:instruction float_div} {:instruction float_inc} {:instruction float_div} {:instruction float_inc} {:instruction float_rot} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_inc} {:instruction integer_mod} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_mult} {:instruction float_inc} {:instruction integer_mod} {:instruction print_float} {:instruction float_flush} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_yank} {:instruction float_inc} {:instruction float_yankdup} {:instruction print_float} {:instruction float_inc} {:instruction float_swap} {:instruction float_inc} {:instruction float_tan} {:instruction integer_yank} {:instruction float_yankdup} {:instruction print_float} {:instruction float_flush} {:instruction float_yankdup} {:instruction integer_dec} {:instruction float_inc} {:instruction float_swap} {:instruction float_inc} {:instruction integer_dup_items} {:instruction integer_dup_items} {:instruction integer_yank} {:instruction integer_mod} {:instruction float_div} {:instruction float_inc} {:instruction float_flush} {:instruction integer_stackdepth})
Best program: (in1 float_div float_shove integer_sub float_inc float_inc float_inc integer_mod float_inc integer_dup_items float_inc float_inc float_inc integer_yank float_inc integer_max float_div float_inc float_yank float_inc integer_dup_times float_inc float_div float_inc float_div float_inc float_rot float_inc float_inc float_inc float_inc float_yankdup float_inc float_yankdup float_inc float_yankdup float_inc integer_mod float_inc float_inc float_inc float_mult float_inc integer_mod print_float float_flush float_inc float_inc float_inc float_yank float_inc float_yankdup print_float float_inc float_swap float_inc float_tan integer_yank float_yankdup print_float float_flush float_yankdup integer_dec float_inc float_swap float_inc integer_dup_items integer_dup_items integer_yank integer_mod float_div float_inc float_flush integer_stackdepth)
Errors: [34.0 13 79.0 13 91.0 12 49.0 2 67.0 3 98.0 2 26.0 2 50.0 2 36.0 2 73.0 2 0.0 0 30.0 2 8.0 1 6.0 2 43.0 3 57.0 2 21.0 2 25.0 2 18.0 3 15.0 2 29.0 2 5.0 3 47.0 2 73.0 3 40.0 1]
Total: 1103.0
Mean: 22.06
Genome size: 74
Size: 75
Percent parens: 0.013
--- Population Statistics ---
Average total errors in population: 2684.4913447000004
Median total errors in population: 1103.0
Error averages by case: (97.0714938 12.77 128.86019860000007 12.772 146.35656999999998 12.052 114.01491670000006 3.361 129.50783919999998 3.998 153.29121149999995 3.049 91.11745829999998 3.086 112.83063979999999 3.306 99.46959640000004 3.191 129.68594280000005 2.986 69.05857879999998 1.812 98.09075549999999 3.541 72.21628780000003 2.27 67.55115130000004 3.065 106.68371010000001 4.002 122.70824560000001 3.551 83.937603 2.992 80.25280450000001 2.983 85.73082620000004 3.969 84.7016898 3.09 81.26632300000001 3.883 74.17721099999999 3.807 108.73674099999997 3.097 136.2975795 4.036 101.60897050000003 2.598)
Error minima by case: (1.1455 8 55.0 2 13.5393 8 29.7602 1 27.0 2 0.5459 1 6.7602 1 9.4227 2 9.8792 1 0.5536 1 0.0 0 6.0 2 0.0 0 0.0 0 23.7602 2 33.0 2 1.0 1 0.0282 1 2.0 1 4.2398 1 4.9572 1 0.0 0 1.4135 1 21.0 2 3.8458 1)
Average genome size in population (length): 65.836
Average program size in population (points): 66.836
Average percent parens in population: 0.015
Minimum age in population: 189.0526256993496
Maximum age in population: 193.3214484340154
Average age in population: 191.4975699082003
Median age in population: 191.503155808431
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 7
Genome diversity (% unique Plush genomes):	 0.839
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 7
Syntactic diversity (% unique Push programs):	 0.839
Total error diversity:				 0.083
Error (vector) diversity:			 0.092
Behavioral diversity:				 0.092
--- Run Statistics ---
Number of program evaluations used so far: 136000
Number of point (instruction) evaluations so far: 256453634
--- Timings ---
Current time: 1529615357160 milliseconds
Total Time:         502.0 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       180.0 seconds, 35.9%
Fitness Testing:    250.7 seconds, 49.9%
Report:              71.2 seconds, 14.2%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 135
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 136
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 136
;;******************************
;; -*- Number IO problem report - generation 136
Test total error for best: 59131.0
Test mean error for best: 29.56550
;;------------------------------
Outputs of best individual on training cases:
Correct output: 1.9526623133   | Program output: -32.0473376867
Correct output: -70.8009773522 | Program output: 8.1990226478  
Correct output: -13.7839009431 | Program output: 77.2160990569 
Correct output: 143.8727406396 | Program output: 94.8727406396 
Correct output: 136.4396027174 | Program output: 69.4396027174 
Correct output: 18.5044280613  | Program output: 116.5044280613
Correct output: 92.0568646792  | Program output: 66.0568646792 
Correct output: 71.8873476205  | Program output: 121.8873476205
Correct output: -10.8388749243 | Program output: -46.8388749243
Correct output: 0.9299825981   | Program output: 73.9299825981 
Correct output: -26.7840412284 | Program output: -26.7840412284
Correct output: -102.1264221267 | Program output: -72.1264221267
Correct output: 40.8061668642  | Program output: 48.8061668642 
Correct output: -5.2544966331  | Program output: -11.2544966331
Correct output: 102.9855886244 | Program output: 59.9855886244 
Correct output: -118.0507723766 | Program output: -61.0507723766
Correct output: 55.9371769928  | Program output: 76.9371769928 
Correct output: 4.2657989984   | Program output: 29.2657989984 
Correct output: 96.7057987603  | Program output: 114.7057987603
Correct output: 122.162446611  | Program output: 107.162446611 
Correct output: 30.0102027945  | Program output: 1.0102027945  
Correct output: 104.5822387035 | Program output: 99.5822387035 
Correct output: -1.5538743366  | Program output: -48.5538743366
Correct output: 166.8070496115 | Program output: 93.8070496115 
Correct output: 58.6188945281  | Program output: 98.6188945281 
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction in1} {:instruction integer_max} {:instruction tagged_55} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_inc} {:instruction float_inc} {:instruction integer_dec} {:instruction float_inc} {:instruction float_rot} {:instruction float_inc} {:instruction float_inc} {:instruction float_div} {:instruction float_inc} {:instruction float_max} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_inc} {:instruction float_div} {:instruction float_inc} {:instruction float_swap} {:instruction float_inc} {:instruction float_rot} {:instruction float_div} {:instruction float_inc} {:instruction print_integer} {:instruction float_inc} {:instruction float_yankdup} {:instruction integer_mod} {:instruction integer_rot} {:instruction float_inc} {:instruction float_rot} {:instruction float_inc} {:instruction float_yankdup} {:instruction integer_swap} {:instruction float_mod} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_inc} {:instruction float_yankdup} {:instruction integer_max} {:instruction float_inc} {:instruction float_sub} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_inc} {:instruction float_yankdup} {:instruction integer_dec} {:instruction in2} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_yankdup} {:instruction print_float} {:instruction integer_div} {:instruction float_inc} {:instruction float_add})
Best program: (in1 integer_max tagged_55 float_inc float_yankdup float_inc float_inc integer_dec float_inc float_rot float_inc float_inc float_div float_inc float_max float_inc float_yankdup float_inc float_div float_inc float_swap float_inc float_rot float_div float_inc print_integer float_inc float_yankdup integer_mod integer_rot float_inc float_rot float_inc float_yankdup integer_swap float_mod float_inc float_yankdup float_inc float_yankdup float_inc float_yankdup integer_max float_inc float_sub float_inc float_yankdup float_inc float_yankdup integer_dec in2 float_inc float_inc float_inc float_yankdup print_float integer_div float_inc float_add)
Errors: [34.0 13 79.0 13 91.0 12 49.0 2 67.0 3 98.0 2 26.0 2 50.0 2 36.0 2 73.0 2 0.0 0 30.0 2 8.0 1 6.0 2 43.0 3 57.0 2 21.0 2 25.0 2 18.0 3 15.0 2 29.0 2 5.0 3 47.0 2 73.0 3 40.0 1]
Total: 1103.0
Mean: 22.06
Genome size: 59
Size: 60
Percent parens: 0.017
--- Population Statistics ---
Average total errors in population: 2716.3745079
Median total errors in population: 1103.0
Error averages by case: (96.06266839999998 12.764 135.41279120000004 12.856 147.67846210000005 12.061 115.27210470000009 3.456 130.6946493 4.108 152.81682450000005 3.17 92.30666360000001 3.194 113.0979982 3.402 98.83586930000003 3.252 131.11055560000005 3.099 67.94104719999999 1.851 98.41765090000003 3.603 73.61951749999999 2.363 68.34809860000004 3.115 107.94336110000002 4.107 122.94429929999995 3.611 85.80199659999998 3.117 86.4770491 3.119 85.29571710000002 4.065 84.29013619999999 3.222 87.14414240000004 3.903 74.60474059999997 3.94 107.69045980000001 3.171 137.557177 4.14 103.62152760000004 2.7)
Error minima by case: (0.5142 8 10.4948 1 1.5052 8 32.4999 2 7.4396 2 0.4347 1 11.8692 1 1.0563 2 0.5806 1 0.93 1 0.0 0 9.0 2 0.0 0 0.0 0 21.9856 2 0.9492 2 0.0 0 0.6213 1 3.0 1 5.0 1 4.0102 1 0.0 0 1.1075 1 8.4999 2 2.6906 1)
Average genome size in population (length): 66.3
Average program size in population (points): 67.3
Average percent parens in population: 0.015
Minimum age in population: 190.3202481397329
Maximum age in population: 194.8011050939627
Average age in population: 192.8928357247245
Median age in population: 192.9198276354373
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 9
Genome diversity (% unique Plush genomes):	 0.81
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 9
Syntactic diversity (% unique Push programs):	 0.81
Total error diversity:				 0.082
Error (vector) diversity:			 0.089
Behavioral diversity:				 0.09
--- Run Statistics ---
Number of program evaluations used so far: 137000
Number of point (instruction) evaluations so far: 258111159
--- Timings ---
Current time: 1529615360650 milliseconds
Total Time:         505.5 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       181.4 seconds, 35.9%
Fitness Testing:    252.4 seconds, 49.9%
Report:              71.7 seconds, 14.2%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 136
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 137
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 137
;;******************************
;; -*- Number IO problem report - generation 137
Test total error for best: 59131.0
Test mean error for best: 29.56550
;;------------------------------
Outputs of best individual on training cases:
Correct output: 1.9526623133   | Program output: -32.0473376867
Correct output: -70.8009773522 | Program output: 8.1990226478  
Correct output: -13.7839009431 | Program output: 77.2160990569 
Correct output: 143.8727406396 | Program output: 94.8727406396 
Correct output: 136.4396027174 | Program output: 69.4396027174 
Correct output: 18.5044280613  | Program output: 116.5044280613
Correct output: 92.0568646792  | Program output: 66.0568646792 
Correct output: 71.8873476205  | Program output: 121.8873476205
Correct output: -10.8388749243 | Program output: -46.8388749243
Correct output: 0.9299825981   | Program output: 73.9299825981 
Correct output: -26.7840412284 | Program output: -26.7840412284
Correct output: -102.1264221267 | Program output: -72.1264221267
Correct output: 40.8061668642  | Program output: 48.8061668642 
Correct output: -5.2544966331  | Program output: -11.2544966331
Correct output: 102.9855886244 | Program output: 59.9855886244 
Correct output: -118.0507723766 | Program output: -61.0507723766
Correct output: 55.9371769928  | Program output: 76.9371769928 
Correct output: 4.2657989984   | Program output: 29.2657989984 
Correct output: 96.7057987603  | Program output: 114.7057987603
Correct output: 122.162446611  | Program output: 107.162446611 
Correct output: 30.0102027945  | Program output: 1.0102027945  
Correct output: 104.5822387035 | Program output: 99.5822387035 
Correct output: -1.5538743366  | Program output: -48.5538743366
Correct output: 166.8070496115 | Program output: 93.8070496115 
Correct output: 58.6188945281  | Program output: 98.6188945281 
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction in1} {:instruction integer_max} {:instruction integer_dup_items} {:instruction integer_sub} {:instruction integer_max} {:instruction integer_dup_items} {:instruction integer_sub} {:instruction integer_mod} {:instruction integer_div} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_rot} {:instruction float_inc} {:instruction integer_mod} {:instruction float_inc} {:instruction float_div} {:instruction float_inc} {:instruction float_max} {:instruction float_inc} {:instruction float_inc} {:instruction float_div} {:instruction float_yankdup} {:instruction float_inc} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_inc} {:instruction float_div} {:instruction float_inc} {:instruction float_div} {:instruction float_inc} {:instruction float_rot} {:instruction float_inc} {:instruction float_inc} {:instruction float_yankdup} {:instruction integer_yankdup} {:instruction float_dup_items} {:instruction float_dup_times} {:instruction integer_min} {:instruction float_div} {:instruction float_inc} {:instruction integer_mod} {:instruction integer_div} {:instruction tagged_440} {:instruction integer_mod} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_inc} {:instruction integer_mult} {:instruction float_inc} {:instruction float_inc} {:instruction integer_mod} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_mult} {:instruction float_inc} {:instruction integer_flush} {:instruction print_float} {:instruction float_flush} {:instruction integer_stackdepth} {:instruction tag_float_856} {:instruction float_inc} {:instruction integer_div} {:instruction float_mult})
Best program: (in1 integer_max integer_dup_items integer_sub integer_max integer_dup_items integer_sub integer_mod integer_div float_inc float_yankdup float_inc float_yankdup float_inc float_yankdup float_rot float_inc integer_mod float_inc float_div float_inc float_max float_inc float_inc float_div float_yankdup float_inc float_inc float_yankdup float_inc float_div float_inc float_div float_inc float_rot float_inc float_inc float_yankdup integer_yankdup float_dup_items float_dup_times integer_min float_div float_inc integer_mod integer_div tagged_440 integer_mod float_inc float_yankdup float_inc integer_mult float_inc float_inc integer_mod float_inc float_inc float_inc float_mult float_inc integer_flush print_float float_flush integer_stackdepth tag_float_856 float_inc integer_div float_mult)
Errors: [34.0 13 79.0 13 91.0 12 49.0 2 67.0 3 98.0 2 26.0 2 50.0 2 36.0 2 73.0 2 0.0 0 30.0 2 8.0 1 6.0 2 43.0 3 57.0 2 21.0 2 25.0 2 18.0 3 15.0 2 29.0 2 5.0 3 47.0 2 73.0 3 40.0 1]
Total: 1103.0
Mean: 22.06
Genome size: 68
Size: 69
Percent parens: 0.014
--- Population Statistics ---
Average total errors in population: 2556.3670216
Median total errors in population: 1103.0
Error averages by case: (91.3498082 12.783 126.37536010000004 12.776 140.52731730000002 12.049 108.95376040000005 3.393 124.26191899999996 4.035 146.4907119 3.105 85.65406699999997 3.128 106.61023220000001 3.346 93.88450710000001 3.235 123.75018460000003 3.042 63.18366319999999 1.843 93.31645139999999 3.63 66.35563870000001 2.307 63.18113090000002 3.112 101.21433099999997 4.05 117.91955019999997 3.634 78.95728720000001 3.027 76.7883836 3.05 79.59415169999997 4.014 78.6868961 3.146 78.6986904 3.921 68.90569940000002 3.849 103.06652349999999 3.159 131.35330220000003 4.081 96.95145429999998 2.621)
Error minima by case: (0.9664 8 4.4081 1 15.8585 8 40.0 1 35.0 2 0.1378 1 17.0 1 27.0 2 5.8389 1 2.07 1 0.0 0 7.0 2 0.0 0 0.0 0 34.0 2 34.0 2 2.0 1 0.2746 1 2.0 1 6.0 1 6.0102 1 0.0 0 2.3825 1 29.0 2 17.0 1)
Average genome size in population (length): 66.02
Average program size in population (points): 67.02
Average percent parens in population: 0.015
Minimum age in population: 191.6932547761948
Maximum age in population: 196.5771345520247
Average age in population: 194.2861487100243
Median age in population: 194.3095256283617
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 9
Genome diversity (% unique Plush genomes):	 0.84
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 9
Syntactic diversity (% unique Push programs):	 0.84
Total error diversity:				 0.094
Error (vector) diversity:			 0.102
Behavioral diversity:				 0.102
--- Run Statistics ---
Number of program evaluations used so far: 138000
Number of point (instruction) evaluations so far: 259761659
--- Timings ---
Current time: 1529615364196 milliseconds
Total Time:         509.1 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       182.7 seconds, 35.9%
Fitness Testing:    254.2 seconds, 49.9%
Report:              72.1 seconds, 14.2%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 137
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 138
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 138
;;******************************
;; -*- Number IO problem report - generation 138
Test total error for best: 59131.0
Test mean error for best: 29.56550
;;------------------------------
Outputs of best individual on training cases:
Correct output: 1.9526623133   | Program output: -32.0473376867
Correct output: -70.8009773522 | Program output: 8.1990226478  
Correct output: -13.7839009431 | Program output: 77.2160990569 
Correct output: 143.8727406396 | Program output: 94.8727406396 
Correct output: 136.4396027174 | Program output: 69.4396027174 
Correct output: 18.5044280613  | Program output: 116.5044280613
Correct output: 92.0568646792  | Program output: 66.0568646792 
Correct output: 71.8873476205  | Program output: 121.8873476205
Correct output: -10.8388749243 | Program output: -46.8388749243
Correct output: 0.9299825981   | Program output: 73.9299825981 
Correct output: -26.7840412284 | Program output: -26.7840412284
Correct output: -102.1264221267 | Program output: -72.1264221267
Correct output: 40.8061668642  | Program output: 48.8061668642 
Correct output: -5.2544966331  | Program output: -11.2544966331
Correct output: 102.9855886244 | Program output: 59.9855886244 
Correct output: -118.0507723766 | Program output: -61.0507723766
Correct output: 55.9371769928  | Program output: 76.9371769928 
Correct output: 4.2657989984   | Program output: 29.2657989984 
Correct output: 96.7057987603  | Program output: 114.7057987603
Correct output: 122.162446611  | Program output: 107.162446611 
Correct output: 30.0102027945  | Program output: 1.0102027945  
Correct output: 104.5822387035 | Program output: 99.5822387035 
Correct output: -1.5538743366  | Program output: -48.5538743366
Correct output: 166.8070496115 | Program output: 93.8070496115 
Correct output: 58.6188945281  | Program output: 98.6188945281 
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction in1} {:instruction integer_max} {:instruction float_sub} {:instruction integer_mod} {:instruction integer_div} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_div} {:instruction float_inc} {:instruction float_rot} {:instruction float_inc} {:instruction float_inc} {:instruction float_div} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_inc} {:instruction float_min} {:instruction float_inc} {:instruction float_swap} {:instruction float_inc} {:instruction float_rot} {:instruction float_inc} {:instruction float_inc} {:instruction integer_dec} {:instruction float_inc} {:instruction print_integer} {:instruction integer_mod} {:instruction integer_rot} {:instruction float_inc} {:instruction float_rot} {:instruction float_inc} {:instruction float_yankdup} {:instruction integer_swap} {:instruction float_mod} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_inc} {:instruction tagged_319} {:instruction float_inc} {:instruction float_yankdup} {:instruction integer_swap} {:instruction float_inc} {:instruction float_mult} {:instruction float_dup_items} {:instruction float_div} {:instruction float_yankdup} {:instruction integer_mod} {:instruction float_inc} {:instruction float_inc} {:instruction tagged_853} {:instruction integer_max} {:instruction integer_min} {:instruction float_inc} {:instruction float_inc} {:instruction float_swap} {:instruction float_inc} {:instruction print_integer} {:instruction integer_dec} {:instruction print_float} {:instruction float_add} {:instruction float_inc} {:instruction float_tan})
Best program: (in1 integer_max float_sub integer_mod integer_div float_inc float_yankdup float_inc float_yankdup float_div float_inc float_rot float_inc float_inc float_div float_inc float_yankdup float_inc float_yankdup float_inc float_min float_inc float_swap float_inc float_rot float_inc float_inc integer_dec float_inc print_integer integer_mod integer_rot float_inc float_rot float_inc float_yankdup integer_swap float_mod float_inc float_yankdup float_inc tagged_319 float_inc float_yankdup integer_swap float_inc float_mult float_dup_items float_div float_yankdup integer_mod float_inc float_inc tagged_853 integer_max integer_min float_inc float_inc float_swap float_inc print_integer integer_dec print_float float_add float_inc float_tan)
Errors: [34.0 13 79.0 13 91.0 12 49.0 2 67.0 3 98.0 2 26.0 2 50.0 2 36.0 2 73.0 2 0.0 0 30.0 2 8.0 1 6.0 2 43.0 3 57.0 2 21.0 2 25.0 2 18.0 3 15.0 2 29.0 2 5.0 3 47.0 2 73.0 3 40.0 1]
Total: 1103.0
Mean: 22.06
Genome size: 66
Size: 67
Percent parens: 0.015
--- Population Statistics ---
Average total errors in population: 2667.9098452
Median total errors in population: 1103.0
Error averages by case: (93.97830080000001 12.718 134.87373810000008 12.766 144.6133811 12.032 113.86234110000001 3.462 129.22999149999993 4.087 149.55036040000002 3.136 90.6186301 3.176 110.19110700000002 3.38 96.83627120000003 3.271 127.97947220000005 3.073 66.33745850000001 1.893 95.76022909999998 3.621 71.5198108 2.358 68.62150790000005 3.1 106.3042978 4.112 120.36910989999996 3.631 83.10088830000002 3.097 83.44542440000002 3.075 83.59400650000002 4.036 82.8131231 3.191 87.74582120000005 3.924 73.05954889999997 3.893 105.59425310000002 3.177 136.2500459 4.129 100.61472630000003 2.708)
Error minima by case: (1.0473 8 5.5499 1 14.7267 9 20.8727 1 22.5604 2 0.2695 1 15.0569 1 28.0 2 11.9826 1 0.2763 1 0.0 0 8.0 2 0.0 0 0.0 0 8.0144 2 29.0508 2 1.0 1 0.1581 1 0.0 0 6.0 1 3.0102 1 0.0 0 2.6975 1 4.193 2 18.0 1)
Average genome size in population (length): 65.815
Average program size in population (points): 66.815
Average percent parens in population: 0.015
Minimum age in population: 193.1474059893231
Maximum age in population: 197.9923887601296
Average age in population: 195.7395917682394
Median age in population: 195.7612781985673
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 8
Genome diversity (% unique Plush genomes):	 0.837
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 8
Syntactic diversity (% unique Push programs):	 0.837
Total error diversity:				 0.078
Error (vector) diversity:			 0.088
Behavioral diversity:				 0.089
--- Run Statistics ---
Number of program evaluations used so far: 139000
Number of point (instruction) evaluations so far: 261407034
--- Timings ---
Current time: 1529615367607 milliseconds
Total Time:         512.5 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       184.0 seconds, 35.9%
Fitness Testing:    255.8 seconds, 49.9%
Report:              72.6 seconds, 14.2%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 138
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 139
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 139
;;******************************
;; -*- Number IO problem report - generation 139
Test total error for best: 59131.0
Test mean error for best: 29.56550
;;------------------------------
Outputs of best individual on training cases:
Correct output: 1.9526623133   | Program output: -32.0473376867
Correct output: -70.8009773522 | Program output: 8.1990226478  
Correct output: -13.7839009431 | Program output: 77.2160990569 
Correct output: 143.8727406396 | Program output: 94.8727406396 
Correct output: 136.4396027174 | Program output: 69.4396027174 
Correct output: 18.5044280613  | Program output: 116.5044280613
Correct output: 92.0568646792  | Program output: 66.0568646792 
Correct output: 71.8873476205  | Program output: 121.8873476205
Correct output: -10.8388749243 | Program output: -46.8388749243
Correct output: 0.9299825981   | Program output: 73.9299825981 
Correct output: -26.7840412284 | Program output: -26.7840412284
Correct output: -102.1264221267 | Program output: -72.1264221267
Correct output: 40.8061668642  | Program output: 48.8061668642 
Correct output: -5.2544966331  | Program output: -11.2544966331
Correct output: 102.9855886244 | Program output: 59.9855886244 
Correct output: -118.0507723766 | Program output: -61.0507723766
Correct output: 55.9371769928  | Program output: 76.9371769928 
Correct output: 4.2657989984   | Program output: 29.2657989984 
Correct output: 96.7057987603  | Program output: 114.7057987603
Correct output: 122.162446611  | Program output: 107.162446611 
Correct output: 30.0102027945  | Program output: 1.0102027945  
Correct output: 104.5822387035 | Program output: 99.5822387035 
Correct output: -1.5538743366  | Program output: -48.5538743366
Correct output: 166.8070496115 | Program output: 93.8070496115 
Correct output: 58.6188945281  | Program output: 98.6188945281 
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction in1} {:instruction integer_max} {:instruction float_sub} {:instruction float_shove} {:instruction integer_div} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_div} {:instruction float_inc} {:instruction float_rot} {:instruction float_inc} {:instruction float_inc} {:instruction float_div} {:instruction float_inc} {:instruction float_inc} {:instruction float_mod} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_inc} {:instruction float_div} {:instruction float_inc} {:instruction float_div} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_inc} {:instruction tag_integer_979} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_inc} {:instruction float_yankdup} {:instruction integer_min} {:instruction float_yank} {:instruction integer_dec} {:instruction float_div} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_inc} {:instruction integer_mod} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_yank} {:instruction float_inc} {:instruction integer_mult} {:instruction print_float} {:instruction integer_mult} {:instruction integer_yank} {:instruction integer_mod} {:instruction float_shove} {:instruction integer_flush} {:instruction float_sin})
Best program: (in1 integer_max float_sub float_shove integer_div float_inc float_yankdup float_inc float_yankdup float_div float_inc float_rot float_inc float_inc float_div float_inc float_inc float_mod float_inc float_yankdup float_inc float_yankdup float_inc float_div float_inc float_div float_inc float_yankdup float_inc tag_integer_979 float_inc float_yankdup float_inc float_yankdup integer_min float_yank integer_dec float_div float_inc float_yankdup float_inc float_yankdup float_inc float_yankdup float_inc float_yankdup float_inc integer_mod float_inc float_inc float_inc float_yank float_inc integer_mult print_float integer_mult integer_yank integer_mod float_shove integer_flush float_sin)
Errors: [34.0 13 79.0 13 91.0 12 49.0 2 67.0 3 98.0 2 26.0 2 50.0 2 36.0 2 73.0 2 0.0 0 30.0 2 8.0 1 6.0 2 43.0 3 57.0 2 21.0 2 25.0 2 18.0 3 15.0 2 29.0 2 5.0 3 47.0 2 73.0 3 40.0 1]
Total: 1103.0
Mean: 22.06
Genome size: 61
Size: 62
Percent parens: 0.016
--- Population Statistics ---
Average total errors in population: 2369.9146137
Median total errors in population: 1103.0
Error averages by case: (84.48970759999999 12.81 119.1910505 12.757 134.1814562 12.029 101.5561323 3.176 117.40451930000002 3.859 140.2566038 2.922 78.4233397 2.935 99.5360974 3.159 86.84968790000003 3.021 117.253526 2.898 55.734687499999986 1.587 85.29558699999998 3.346 59.402939999999994 2.1 55.859016899999986 2.891 94.24209250000001 3.866 110.33463429999998 3.377 70.72543770000001 2.849 69.44969500000002 2.891 71.8032767 3.827 70.82446690000002 2.964 71.47083409999998 3.668 60.14135920000001 3.697 96.307654 2.963 124.24203160000002 3.899 89.0017796 2.446)
Error minima by case: (0.0492 8 18.0494 1 15.1027 8 39.0 1 32.0 2 0.1378 1 16.0 1 26.0 2 12.1931 1 0.3863 1 0.0 0 6.0 2 0.0 0 0.0 0 33.0 2 33.0 2 0.0 0 1.0 1 3.0 1 5.0 1 4.0102 1 0.0 0 2.962 1 26.0 2 16.0 1)
Average genome size in population (length): 65.658
Average program size in population (points): 66.658
Average percent parens in population: 0.015
Minimum age in population: 194.1474059893231
Maximum age in population: 199.0222456247897
Average age in population: 197.1476899520339
Median age in population: 197.1883481976904
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 9
Genome diversity (% unique Plush genomes):	 0.817
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 9
Syntactic diversity (% unique Push programs):	 0.817
Total error diversity:				 0.079
Error (vector) diversity:			 0.089
Behavioral diversity:				 0.09
--- Run Statistics ---
Number of program evaluations used so far: 140000
Number of point (instruction) evaluations so far: 263048484
--- Timings ---
Current time: 1529615371076 milliseconds
Total Time:         516.0 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       185.3 seconds, 35.9%
Fitness Testing:    257.5 seconds, 49.9%
Report:              73.0 seconds, 14.2%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 139
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 140
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 140
;;******************************
;; -*- Number IO problem report - generation 140
Test total error for best: 59131.0
Test mean error for best: 29.56550
;;------------------------------
Outputs of best individual on training cases:
Correct output: 1.9526623133   | Program output: -32.0473376867
Correct output: -70.8009773522 | Program output: 8.1990226478  
Correct output: -13.7839009431 | Program output: 77.2160990569 
Correct output: 143.8727406396 | Program output: 94.8727406396 
Correct output: 136.4396027174 | Program output: 69.4396027174 
Correct output: 18.5044280613  | Program output: 116.5044280613
Correct output: 92.0568646792  | Program output: 66.0568646792 
Correct output: 71.8873476205  | Program output: 121.8873476205
Correct output: -10.8388749243 | Program output: -46.8388749243
Correct output: 0.9299825981   | Program output: 73.9299825981 
Correct output: -26.7840412284 | Program output: -26.7840412284
Correct output: -102.1264221267 | Program output: -72.1264221267
Correct output: 40.8061668642  | Program output: 48.8061668642 
Correct output: -5.2544966331  | Program output: -11.2544966331
Correct output: 102.9855886244 | Program output: 59.9855886244 
Correct output: -118.0507723766 | Program output: -61.0507723766
Correct output: 55.9371769928  | Program output: 76.9371769928 
Correct output: 4.2657989984   | Program output: 29.2657989984 
Correct output: 96.7057987603  | Program output: 114.7057987603
Correct output: 122.162446611  | Program output: 107.162446611 
Correct output: 30.0102027945  | Program output: 1.0102027945  
Correct output: 104.5822387035 | Program output: 99.5822387035 
Correct output: -1.5538743366  | Program output: -48.5538743366
Correct output: 166.8070496115 | Program output: 93.8070496115 
Correct output: 58.6188945281  | Program output: 98.6188945281 
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction in1} {:instruction integer_max} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_inc} {:instruction float_inc} {:instruction float_max} {:instruction float_div} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_inc} {:instruction float_inc} {:instruction float_sub} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_inc} {:instruction float_div} {:instruction float_inc} {:instruction integer_mult} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_inc} {:instruction tag_integer_979} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_inc} {:instruction integer_dup} {:instruction integer_min} {:instruction float_mult} {:instruction float_div} {:instruction float_dup_times} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_inc} {:instruction float_inc} {:instruction float_yankdup} {:instruction integer_max} {:instruction float_inc} {:instruction float_sub} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_inc} {:instruction float_yankdup} {:instruction integer_dec} {:instruction in2} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_yankdup} {:instruction print_float} {:instruction integer_div} {:instruction float_inc} {:instruction float_add})
Best program: (in1 integer_max float_inc float_yankdup float_inc float_yankdup float_inc float_inc float_max float_div float_inc float_yankdup float_inc float_inc float_sub float_inc float_yankdup float_inc float_yankdup float_inc float_div float_inc integer_mult float_inc float_yankdup float_inc tag_integer_979 float_inc float_yankdup float_inc integer_dup integer_min float_mult float_div float_dup_times float_inc float_yankdup float_inc float_inc float_yankdup integer_max float_inc float_sub float_inc float_yankdup float_inc float_yankdup integer_dec in2 float_inc float_inc float_inc float_yankdup print_float integer_div float_inc float_add)
Errors: [34.0 13 79.0 13 91.0 12 49.0 2 67.0 3 98.0 2 26.0 2 50.0 2 36.0 2 73.0 2 0.0 0 30.0 2 8.0 1 6.0 2 43.0 3 57.0 2 21.0 2 25.0 2 18.0 3 15.0 2 29.0 2 5.0 3 47.0 2 73.0 3 40.0 1]
Total: 1103.0
Mean: 22.06
Genome size: 57
Size: 58
Percent parens: 0.017
--- Population Statistics ---
Average total errors in population: 2764.6705482
Median total errors in population: 1103.0
Error averages by case: (99.59403200000006 12.716 133.99453710000006 12.758 147.65513180000005 12.01 118.06420610000005 3.538 133.2295826 4.18 152.38829439999998 3.253 94.77683110000002 3.275 113.89437970000003 3.497 102.51547980000004 3.37 131.07758700000005 3.197 72.54015320000003 2.03 101.71684889999999 3.76 75.51511249999997 2.482 73.29982450000004 3.217 110.35979010000001 4.167 126.58158969999994 3.777 85.58295179999998 3.183 83.15787739999999 3.214 87.21590270000006 4.119 87.16547209999999 3.29 87.7148802 4.076 77.40273869999996 4.004 111.07586820000002 3.284 140.3709204 4.213 104.34155620000006 2.829)
Error minima by case: (0.1649 7 15.801 1 15.0782 8 38.0 1 45.4396 2 0.4853 1 15.0 1 26.0 2 14.1931 1 0.3925 1 0.0 0 6.0 2 0.0 0 0.0 0 32.0 2 33.0 2 0.9372 1 0.132 1 2.0 1 4.0 1 3.0102 1 0.0 0 2.3384 1 62.0 2 16.0 1)
Average genome size in population (length): 64.957
Average program size in population (points): 65.957
Average percent parens in population: 0.015
Minimum age in population: 196.088398053824
Maximum age in population: 200.5402962849672
Average age in population: 198.5573722705224
Median age in population: 198.5842005607157
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 7
Genome diversity (% unique Plush genomes):	 0.842
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 7
Syntactic diversity (% unique Push programs):	 0.842
Total error diversity:				 0.099
Error (vector) diversity:			 0.109
Behavioral diversity:				 0.11
--- Run Statistics ---
Number of program evaluations used so far: 141000
Number of point (instruction) evaluations so far: 264672409
--- Timings ---
Current time: 1529615374497 milliseconds
Total Time:         519.4 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       186.6 seconds, 35.9%
Fitness Testing:    259.2 seconds, 49.9%
Report:              73.5 seconds, 14.2%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 140
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 141
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 141
;;******************************
;; -*- Number IO problem report - generation 141
Test total error for best: 59131.0
Test mean error for best: 29.56550
;;------------------------------
Outputs of best individual on training cases:
Correct output: 1.9526623133   | Program output: -32.0473376867
Correct output: -70.8009773522 | Program output: 8.1990226478  
Correct output: -13.7839009431 | Program output: 77.2160990569 
Correct output: 143.8727406396 | Program output: 94.8727406396 
Correct output: 136.4396027174 | Program output: 69.4396027174 
Correct output: 18.5044280613  | Program output: 116.5044280613
Correct output: 92.0568646792  | Program output: 66.0568646792 
Correct output: 71.8873476205  | Program output: 121.8873476205
Correct output: -10.8388749243 | Program output: -46.8388749243
Correct output: 0.9299825981   | Program output: 73.9299825981 
Correct output: -26.7840412284 | Program output: -26.7840412284
Correct output: -102.1264221267 | Program output: -72.1264221267
Correct output: 40.8061668642  | Program output: 48.8061668642 
Correct output: -5.2544966331  | Program output: -11.2544966331
Correct output: 102.9855886244 | Program output: 59.9855886244 
Correct output: -118.0507723766 | Program output: -61.0507723766
Correct output: 55.9371769928  | Program output: 76.9371769928 
Correct output: 4.2657989984   | Program output: 29.2657989984 
Correct output: 96.7057987603  | Program output: 114.7057987603
Correct output: 122.162446611  | Program output: 107.162446611 
Correct output: 30.0102027945  | Program output: 1.0102027945  
Correct output: 104.5822387035 | Program output: 99.5822387035 
Correct output: -1.5538743366  | Program output: -48.5538743366
Correct output: 166.8070496115 | Program output: 93.8070496115 
Correct output: 58.6188945281  | Program output: 98.6188945281 
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction in1} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_inc} {:instruction float_dup_items} {:instruction float_inc} {:instruction float_inc} {:instruction integer_dec} {:instruction tagged_646} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_inc} {:instruction float_inc} {:instruction float_div} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_inc} {:instruction float_div} {:instruction float_inc} {:instruction integer_flush} {:instruction float_inc} {:instruction integer_dup} {:instruction float_inc} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_inc} {:instruction tag_integer_134} {:instruction float_inc} {:instruction float_div} {:instruction float_yankdup} {:instruction float_inc} {:instruction integer_yank} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_add} {:instruction integer_max} {:instruction integer_dec} {:instruction float_inc} {:instruction float_inc} {:instruction integer_add} {:instruction float_inc} {:instruction print_float} {:instruction integer_mult} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_stackdepth} {:instruction float_yankdup} {:instruction float_inc} {:instruction integer_mod} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_yank} {:instruction float_inc} {:instruction integer_mult} {:instruction print_float} {:instruction integer_mult} {:instruction integer_yank} {:instruction integer_mod} {:instruction float_shove} {:instruction integer_flush} {:instruction float_sin})
Best program: (in1 float_inc float_yankdup float_inc float_dup_items float_inc float_inc integer_dec tagged_646 float_inc float_yankdup float_inc float_inc float_div float_inc float_yankdup float_inc float_yankdup float_inc float_div float_inc integer_flush float_inc integer_dup float_inc float_inc float_yankdup float_inc tag_integer_134 float_inc float_div float_yankdup float_inc integer_yank float_inc float_inc float_inc float_inc float_add integer_max integer_dec float_inc float_inc integer_add float_inc print_float integer_mult float_inc float_yankdup float_stackdepth float_yankdup float_inc integer_mod float_inc float_inc float_inc float_yank float_inc integer_mult print_float integer_mult integer_yank integer_mod float_shove integer_flush float_sin)
Errors: [34.0 13 79.0 13 91.0 12 49.0 2 67.0 3 98.0 2 26.0 2 50.0 2 36.0 2 73.0 2 0.0 0 30.0 2 8.0 1 6.0 2 43.0 3 57.0 2 21.0 2 25.0 2 18.0 3 15.0 2 29.0 2 5.0 3 47.0 2 73.0 3 40.0 1]
Total: 1103.0
Mean: 22.06
Genome size: 66
Size: 67
Percent parens: 0.015
--- Population Statistics ---
Average total errors in population: 2693.975823500001
Median total errors in population: 1103.0
Error averages by case: (98.10684409999998 12.812 129.35968260000004 12.797 145.5575683 12.069 113.44982340000001 3.43 128.78574430000003 4.018 153.1761385 3.105 90.65276740000002 3.144 113.24679350000004 3.386 100.45980880000003 3.215 128.92961280000003 3.06 69.86753879999999 1.861 98.94823439999998 3.598 72.00057930000003 2.327 69.922544 3.071 106.07435509999998 4.048 123.48095469999994 3.622 83.56009350000001 3.066 80.9783634 3.07 86.31030340000007 4.005 85.30720360000002 3.16 83.90786499999997 3.963 73.93501889999999 3.833 109.7674052 3.152 135.55594670000002 4.074 102.04363380000001 2.705)
Error minima by case: (0.9822 8 2.0193 1 7.177 9 23.8727 1 4.5604 1 0.4347 1 17.0 1 5.4437 2 7.0806 1 0.805 1 0.0 0 7.0 2 0.0 0 0.0 0 5.0144 1 11.0508 2 0.0 0 0.0282 1 1.2942 1 6.0 1 5.0102 1 0.0 0 3.3838 1 1.193 1 3.8094 1)
Average genome size in population (length): 65.064
Average program size in population (points): 66.064
Average percent parens in population: 0.015
Minimum age in population: 197.5152888107055
Maximum age in population: 202.031135779244
Average age in population: 199.9831312738311
Median age in population: 200.0426730369402
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 6
Genome diversity (% unique Plush genomes):	 0.849
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 6
Syntactic diversity (% unique Push programs):	 0.849
Total error diversity:				 0.095
Error (vector) diversity:			 0.106
Behavioral diversity:				 0.106
--- Run Statistics ---
Number of program evaluations used so far: 142000
Number of point (instruction) evaluations so far: 266299059
--- Timings ---
Current time: 1529615377959 milliseconds
Total Time:         522.8 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       187.9 seconds, 35.9%
Fitness Testing:    260.9 seconds, 49.9%
Report:              74.0 seconds, 14.1%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 141
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 142
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 142
;;******************************
;; -*- Number IO problem report - generation 142
Test total error for best: 59131.0
Test mean error for best: 29.56550
;;------------------------------
Outputs of best individual on training cases:
Correct output: 1.9526623133   | Program output: -32.0473376867
Correct output: -70.8009773522 | Program output: 8.1990226478  
Correct output: -13.7839009431 | Program output: 77.2160990569 
Correct output: 143.8727406396 | Program output: 94.8727406396 
Correct output: 136.4396027174 | Program output: 69.4396027174 
Correct output: 18.5044280613  | Program output: 116.5044280613
Correct output: 92.0568646792  | Program output: 66.0568646792 
Correct output: 71.8873476205  | Program output: 121.8873476205
Correct output: -10.8388749243 | Program output: -46.8388749243
Correct output: 0.9299825981   | Program output: 73.9299825981 
Correct output: -26.7840412284 | Program output: -26.7840412284
Correct output: -102.1264221267 | Program output: -72.1264221267
Correct output: 40.8061668642  | Program output: 48.8061668642 
Correct output: -5.2544966331  | Program output: -11.2544966331
Correct output: 102.9855886244 | Program output: 59.9855886244 
Correct output: -118.0507723766 | Program output: -61.0507723766
Correct output: 55.9371769928  | Program output: 76.9371769928 
Correct output: 4.2657989984   | Program output: 29.2657989984 
Correct output: 96.7057987603  | Program output: 114.7057987603
Correct output: 122.162446611  | Program output: 107.162446611 
Correct output: 30.0102027945  | Program output: 1.0102027945  
Correct output: 104.5822387035 | Program output: 99.5822387035 
Correct output: -1.5538743366  | Program output: -48.5538743366
Correct output: 166.8070496115 | Program output: 93.8070496115 
Correct output: 58.6188945281  | Program output: 98.6188945281 
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction in1} {:instruction integer_max} {:instruction integer_div} {:instruction integer_sub} {:instruction integer_inc} {:instruction integer_max} {:instruction integer_max} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_inc} {:instruction float_inc} {:instruction float_max} {:instruction float_div} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_inc} {:instruction float_inc} {:instruction float_sub} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_inc} {:instruction float_div} {:instruction float_inc} {:instruction integer_mult} {:instruction float_inc} {:instruction integer_yank} {:instruction float_inc} {:instruction tag_integer_979} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_inc} {:instruction integer_dup} {:instruction integer_min} {:instruction float_mult} {:instruction float_div} {:instruction float_dup_times} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_inc} {:instruction float_mult} {:instruction float_dup_items} {:instruction float_div} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_dup_items} {:instruction float_inc} {:instruction float_inc} {:instruction float_mult} {:instruction integer_max} {:instruction float_sub} {:instruction float_inc} {:instruction float_inc} {:instruction float_swap} {:instruction float_inc} {:instruction integer_swap} {:instruction print_float} {:instruction float_flush} {:instruction integer_stackdepth} {:instruction float_inc} {:instruction integer_dup_items} {:instruction integer_dup} {:instruction in2} {:instruction print_float} {:instruction float_dup_items} {:instruction float_div} {:instruction float_inc} {:instruction float_sub})
Best program: (in1 integer_max integer_div integer_sub integer_inc integer_max integer_max float_inc float_yankdup float_inc float_yankdup float_inc float_inc float_max float_div float_inc float_yankdup float_inc float_inc float_sub float_inc float_yankdup float_inc float_yankdup float_inc float_div float_inc integer_mult float_inc integer_yank float_inc tag_integer_979 float_inc float_yankdup float_inc integer_dup integer_min float_mult float_div float_dup_times float_inc float_yankdup float_inc float_yankdup float_inc float_mult float_dup_items float_div float_inc float_yankdup float_dup_items float_inc float_inc float_mult integer_max float_sub float_inc float_inc float_swap float_inc integer_swap print_float float_flush integer_stackdepth float_inc integer_dup_items integer_dup in2 print_float float_dup_items float_div float_inc float_sub)
Errors: [34.0 13 79.0 13 91.0 12 49.0 2 67.0 3 98.0 2 26.0 2 50.0 2 36.0 2 73.0 2 0.0 0 30.0 2 8.0 1 6.0 2 43.0 3 57.0 2 21.0 2 25.0 2 18.0 3 15.0 2 29.0 2 5.0 3 47.0 2 73.0 3 40.0 1]
Total: 1103.0
Mean: 22.06
Genome size: 73
Size: 74
Percent parens: 0.014
--- Population Statistics ---
Average total errors in population: 2728.2054928000002
Median total errors in population: 1103.0
Error averages by case: (97.80565089999997 12.69 134.36585330000003 12.769 145.39659429999998 12.028 115.96754690000002 3.512 131.104321 4.12 151.713046 3.206 92.81441839999998 3.224 112.95022990000004 3.45 100.30905620000001 3.321 128.7743576000001 3.14 70.4941905 1.997 99.20260070000002 3.733 73.63363460000002 2.425 71.4587299 3.182 108.19910250000005 4.141 123.68415649999999 3.728 85.87463489999998 3.119 84.86809570000004 3.138 87.59111469999998 4.103 86.95102870000004 3.239 87.9388747 4.053 75.43841199999999 3.957 109.3332052 3.246 138.1986467 4.16 101.66999100000001 2.787)
Error minima by case: (1.6843 7 40.6753 2 15.8511 8 35.8727 1 7.5604 2 0.4396 1 17.0 1 29.0 2 10.9706 1 0.6075 1 0.0 0 9.0 2 0.0 0 0.0 0 6.9856 2 14.0508 2 0.0 0 0.7777 1 3.0 1 6.0 1 1.5494 1 0.0 0 3.3384 1 10.807 2 19.0 1)
Average genome size in population (length): 65.439
Average program size in population (points): 66.439
Average percent parens in population: 0.015
Minimum age in population: 198.8675359217813
Maximum age in population: 203.495610163262
Average age in population: 201.3977055512841
Median age in population: 201.4283866853766
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 8
Genome diversity (% unique Plush genomes):	 0.84
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 8
Syntactic diversity (% unique Push programs):	 0.84
Total error diversity:				 0.085
Error (vector) diversity:			 0.095
Behavioral diversity:				 0.095
--- Run Statistics ---
Number of program evaluations used so far: 143000
Number of point (instruction) evaluations so far: 267935059
--- Timings ---
Current time: 1529615381445 milliseconds
Total Time:         526.3 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       189.2 seconds, 36.0%
Fitness Testing:    262.5 seconds, 49.9%
Report:              74.4 seconds, 14.1%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 142
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 143
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 143
;;******************************
;; -*- Number IO problem report - generation 143
Test total error for best: 59131.0
Test mean error for best: 29.56550
;;------------------------------
Outputs of best individual on training cases:
Correct output: 1.9526623133   | Program output: -32.0473376867
Correct output: -70.8009773522 | Program output: 8.1990226478  
Correct output: -13.7839009431 | Program output: 77.2160990569 
Correct output: 143.8727406396 | Program output: 94.8727406396 
Correct output: 136.4396027174 | Program output: 69.4396027174 
Correct output: 18.5044280613  | Program output: 116.5044280613
Correct output: 92.0568646792  | Program output: 66.0568646792 
Correct output: 71.8873476205  | Program output: 121.8873476205
Correct output: -10.8388749243 | Program output: -46.8388749243
Correct output: 0.9299825981   | Program output: 73.9299825981 
Correct output: -26.7840412284 | Program output: -26.7840412284
Correct output: -102.1264221267 | Program output: -72.1264221267
Correct output: 40.8061668642  | Program output: 48.8061668642 
Correct output: -5.2544966331  | Program output: -11.2544966331
Correct output: 102.9855886244 | Program output: 59.9855886244 
Correct output: -118.0507723766 | Program output: -61.0507723766
Correct output: 55.9371769928  | Program output: 76.9371769928 
Correct output: 4.2657989984   | Program output: 29.2657989984 
Correct output: 96.7057987603  | Program output: 114.7057987603
Correct output: 122.162446611  | Program output: 107.162446611 
Correct output: 30.0102027945  | Program output: 1.0102027945  
Correct output: 104.5822387035 | Program output: 99.5822387035 
Correct output: -1.5538743366  | Program output: -48.5538743366
Correct output: 166.8070496115 | Program output: 93.8070496115 
Correct output: 58.6188945281  | Program output: 98.6188945281 
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction in1} {:instruction integer_max} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_inc} {:instruction float_inc} {:instruction integer_dec} {:instruction float_div} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_inc} {:instruction float_div} {:instruction float_inc} {:instruction integer_mod} {:instruction float_inc} {:instruction float_inc} {:instruction integer_add} {:instruction float_yankdup} {:instruction float_inc} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_div} {:instruction float_inc} {:instruction integer_dup_items} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_inc} {:instruction float_min} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_inc} {:instruction integer_mod} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_yank} {:instruction float_inc} {:instruction print_float} {:instruction float_swap} {:instruction float_inc} {:instruction float_yankdup} {:instruction print_float} {:instruction integer_div} {:instruction float_inc} {:instruction float_add})
Best program: (in1 integer_max float_inc float_yankdup float_inc float_yankdup float_inc float_inc integer_dec float_div float_inc float_yankdup float_inc float_div float_inc integer_mod float_inc float_inc integer_add float_yankdup float_inc float_inc float_yankdup float_div float_inc integer_dup_items float_inc float_yankdup float_inc float_min float_inc float_yankdup float_inc float_yankdup float_inc float_yankdup float_inc float_yankdup float_inc float_yankdup float_inc integer_mod float_inc float_inc float_inc float_yank float_inc print_float float_swap float_inc float_yankdup print_float integer_div float_inc float_add)
Errors: [34.0 13 79.0 13 91.0 12 49.0 2 67.0 3 98.0 2 26.0 2 50.0 2 36.0 2 73.0 2 0.0 0 30.0 2 8.0 1 6.0 2 43.0 3 57.0 2 21.0 2 25.0 2 18.0 3 15.0 2 29.0 2 5.0 3 47.0 2 73.0 3 40.0 1]
Total: 1103.0
Mean: 22.06
Genome size: 55
Size: 56
Percent parens: 0.018
--- Population Statistics ---
Average total errors in population: 2495.9641534
Median total errors in population: 1103.0
Error averages by case: (88.2346557 12.749 126.41923910000001 12.778 138.37412109999994 12.021 105.36929520000004 3.362 120.71083069999997 4.014 144.8927955 3.105 82.06599209999997 3.119 105.52456260000002 3.337 90.7172562 3.19 121.61121210000006 3.036 60.548919500000004 1.798 92.38809300000004 3.565 62.75956190000001 2.297 62.452853900000015 3.072 97.63230940000004 4.008 117.10217849999997 3.597 74.61249120000002 3.025 75.3028279 3.06 76.86896399999999 4.01 75.97434320000004 3.12 78.56567779999995 3.837 65.31101409999998 3.834 99.85817660000004 3.128 127.85307600000004 4.054 95.0807061 2.617)
Error minima by case: (0.1649 6 16.801 1 13.5393 9 26.418 1 18.9848 2 0.4545 1 17.0 1 28.0 2 9.8792 1 0.124 1 0.0 0 8.0 2 0.0 0 0.0 0 14.4692 2 28.5744 2 1.0 1 0.1331 1 1.0 1 4.7077 1 1.0102 1 0.0 0 1.4135 1 15.9599 2 18.0 1)
Average genome size in population (length): 65.424
Average program size in population (points): 66.424
Average percent parens in population: 0.015
Minimum age in population: 199.8675359217813
Maximum age in population: 205.1586416342229
Average age in population: 202.8425155171883
Median age in population: 202.853992431835
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 6
Genome diversity (% unique Plush genomes):	 0.83
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 6
Syntactic diversity (% unique Push programs):	 0.83
Total error diversity:				 0.093
Error (vector) diversity:			 0.103
Behavioral diversity:				 0.104
--- Run Statistics ---
Number of program evaluations used so far: 144000
Number of point (instruction) evaluations so far: 269570659
--- Timings ---
Current time: 1529615384861 milliseconds
Total Time:         529.8 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       190.6 seconds, 36.0%
Fitness Testing:    264.2 seconds, 49.9%
Report:              74.9 seconds, 14.1%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 143
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 144
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 144
;;******************************
;; -*- Number IO problem report - generation 144
Test total error for best: 59131.0
Test mean error for best: 29.56550
;;------------------------------
Outputs of best individual on training cases:
Correct output: 1.9526623133   | Program output: -32.0473376867
Correct output: -70.8009773522 | Program output: 8.1990226478  
Correct output: -13.7839009431 | Program output: 77.2160990569 
Correct output: 143.8727406396 | Program output: 94.8727406396 
Correct output: 136.4396027174 | Program output: 69.4396027174 
Correct output: 18.5044280613  | Program output: 116.5044280613
Correct output: 92.0568646792  | Program output: 66.0568646792 
Correct output: 71.8873476205  | Program output: 121.8873476205
Correct output: -10.8388749243 | Program output: -46.8388749243
Correct output: 0.9299825981   | Program output: 73.9299825981 
Correct output: -26.7840412284 | Program output: -26.7840412284
Correct output: -102.1264221267 | Program output: -72.1264221267
Correct output: 40.8061668642  | Program output: 48.8061668642 
Correct output: -5.2544966331  | Program output: -11.2544966331
Correct output: 102.9855886244 | Program output: 59.9855886244 
Correct output: -118.0507723766 | Program output: -61.0507723766
Correct output: 55.9371769928  | Program output: 76.9371769928 
Correct output: 4.2657989984   | Program output: 29.2657989984 
Correct output: 96.7057987603  | Program output: 114.7057987603
Correct output: 122.162446611  | Program output: 107.162446611 
Correct output: 30.0102027945  | Program output: 1.0102027945  
Correct output: 104.5822387035 | Program output: 99.5822387035 
Correct output: -1.5538743366  | Program output: -48.5538743366
Correct output: 166.8070496115 | Program output: 93.8070496115 
Correct output: 58.6188945281  | Program output: 98.6188945281 
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction in1} {:instruction integer_max} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_inc} {:instruction float_inc} {:instruction integer_mod} {:instruction float_inc} {:instruction integer_min} {:instruction float_inc} {:instruction integer_dup_times} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_div} {:instruction float_inc} {:instruction integer_flush} {:instruction float_inc} {:instruction integer_dup_times} {:instruction float_inc} {:instruction float_inc} {:instruction float_div} {:instruction float_inc} {:instruction float_inc} {:instruction integer_flush} {:instruction integer_mult} {:instruction float_sub} {:instruction float_yankdup} {:instruction float_yankdup} {:instruction float_inc} {:instruction float_mult} {:instruction float_inc} {:instruction float_yankdup} {:instruction integer_inc} {:instruction float_mult} {:instruction float_dup_items} {:instruction integer_dec} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_inc} {:instruction integer_flush} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_inc} {:instruction integer_dup_times} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction print_integer} {:instruction float_inc} {:instruction print_integer} {:instruction print_float} {:instruction float_flush} {:instruction integer_stackdepth} {:instruction tag_float_856} {:instruction float_inc} {:instruction integer_div} {:instruction float_inc} {:instruction float_yankdup} {:instruction print_float} {:instruction integer_div} {:instruction float_inc} {:instruction float_add})
Best program: (in1 integer_max float_inc float_yankdup float_inc float_inc integer_mod float_inc integer_min float_inc integer_dup_times float_inc float_inc float_inc float_div float_inc integer_flush float_inc integer_dup_times float_inc float_inc float_div float_inc float_inc integer_flush integer_mult float_sub float_yankdup float_yankdup float_inc float_mult float_inc float_yankdup integer_inc float_mult float_dup_items integer_dec float_inc float_yankdup float_inc integer_flush float_inc float_yankdup float_inc integer_dup_times float_inc float_inc float_inc print_integer float_inc print_integer print_float float_flush integer_stackdepth tag_float_856 float_inc integer_div float_inc float_yankdup print_float integer_div float_inc float_add)
Errors: [34.0 13 79.0 13 91.0 12 49.0 2 67.0 3 98.0 2 26.0 2 50.0 2 36.0 2 73.0 2 0.0 0 30.0 2 8.0 1 6.0 2 43.0 3 57.0 2 21.0 2 25.0 2 18.0 3 15.0 2 29.0 2 5.0 3 47.0 2 73.0 3 40.0 1]
Total: 1103.0
Mean: 22.06
Genome size: 63
Size: 64
Percent parens: 0.016
--- Population Statistics ---
Average total errors in population: 2672.6719599000003
Median total errors in population: 1103.0
Error averages by case: (95.83804090000005 12.754 127.76712729999998 12.783 145.2828852 12.007 113.88846120000002 3.439 129.08740529999997 4.05 152.00693950000007 3.144 90.68596000000002 3.143 112.84573939999999 3.401 98.82592620000004 3.265 128.61890940000004 3.113 68.18073639999999 1.917 98.9951403 3.672 71.59251049999999 2.362 65.60665600000003 3.083 106.28529630000003 4.056 123.45921289999998 3.707 82.6927472 3.084 78.73035859999997 3.117 85.6166401 4.029 84.755117 3.17 80.5435949 3.991 74.11346089999998 3.848 107.52053249999996 3.189 136.16494989999998 4.083 102.41661200000001 2.744)
Error minima by case: (0.3712 7 1.4921 1 10.5079 8 40.0 1 31.0 2 0.4252 1 17.0 1 26.0 2 5.8389 1 0.2688 1 0.0 0 6.0 2 0.0 0 0.0 0 34.0 2 33.0 2 3.0 1 0.2777 1 3.0 1 6.0 1 2.1922 1 0.0 0 0.6059 1 25.0 2 16.0 1)
Average genome size in population (length): 65.119
Average program size in population (points): 66.119
Average percent parens in population: 0.015
Minimum age in population: 201.2574517378969
Maximum age in population: 206.0854018206654
Average age in population: 204.2362506066061
Median age in population: 204.2615736432247
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 6
Genome diversity (% unique Plush genomes):	 0.849
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 6
Syntactic diversity (% unique Push programs):	 0.849
Total error diversity:				 0.097
Error (vector) diversity:			 0.104
Behavioral diversity:				 0.104
--- Run Statistics ---
Number of program evaluations used so far: 145000
Number of point (instruction) evaluations so far: 271198659
--- Timings ---
Current time: 1529615388295 milliseconds
Total Time:         533.2 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       191.9 seconds, 36.0%
Fitness Testing:    265.8 seconds, 49.9%
Report:              75.4 seconds, 14.1%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 144
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 145
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 145
;;******************************
;; -*- Number IO problem report - generation 145
Test total error for best: 59131.0
Test mean error for best: 29.56550
;;------------------------------
Outputs of best individual on training cases:
Correct output: 1.9526623133   | Program output: -32.0473376867
Correct output: -70.8009773522 | Program output: 8.1990226478  
Correct output: -13.7839009431 | Program output: 77.2160990569 
Correct output: 143.8727406396 | Program output: 94.8727406396 
Correct output: 136.4396027174 | Program output: 69.4396027174 
Correct output: 18.5044280613  | Program output: 116.5044280613
Correct output: 92.0568646792  | Program output: 66.0568646792 
Correct output: 71.8873476205  | Program output: 121.8873476205
Correct output: -10.8388749243 | Program output: -46.8388749243
Correct output: 0.9299825981   | Program output: 73.9299825981 
Correct output: -26.7840412284 | Program output: -26.7840412284
Correct output: -102.1264221267 | Program output: -72.1264221267
Correct output: 40.8061668642  | Program output: 48.8061668642 
Correct output: -5.2544966331  | Program output: -11.2544966331
Correct output: 102.9855886244 | Program output: 59.9855886244 
Correct output: -118.0507723766 | Program output: -61.0507723766
Correct output: 55.9371769928  | Program output: 76.9371769928 
Correct output: 4.2657989984   | Program output: 29.2657989984 
Correct output: 96.7057987603  | Program output: 114.7057987603
Correct output: 122.162446611  | Program output: 107.162446611 
Correct output: 30.0102027945  | Program output: 1.0102027945  
Correct output: 104.5822387035 | Program output: 99.5822387035 
Correct output: -1.5538743366  | Program output: -48.5538743366
Correct output: 166.8070496115 | Program output: 93.8070496115 
Correct output: 58.6188945281  | Program output: 98.6188945281 
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction in1} {:instruction integer_add} {:instruction float_shove} {:instruction integer_sub} {:instruction integer_mod} {:instruction integer_div} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_div} {:instruction float_inc} {:instruction float_rot} {:instruction float_inc} {:instruction float_inc} {:instruction float_dup_times} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_inc} {:instruction float_div} {:instruction float_inc} {:instruction integer_min} {:instruction float_inc} {:instruction float_rot} {:instruction float_inc} {:instruction float_inc} {:instruction print_integer} {:instruction float_inc} {:instruction float_yankdup} {:instruction integer_pop} {:instruction integer_rot} {:instruction float_inc} {:instruction integer_inc} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_inc} {:instruction float_yankdup} {:instruction tagged_412} {:instruction float_inc} {:instruction float_yankdup} {:instruction integer_dup_items} {:instruction float_yankdup} {:instruction float_inc} {:instruction integer_flush} {:instruction float_yankdup} {:instruction float_mult} {:instruction float_yankdup} {:instruction float_inc} {:instruction float_inc} {:instruction integer_mod} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_stackdepth} {:instruction float_inc} {:instruction integer_flush} {:instruction print_float} {:instruction float_flush} {:instruction integer_swap} {:instruction integer_dec} {:instruction print_float} {:instruction float_add} {:instruction print_float} {:instruction float_flush} {:instruction float_inc} {:instruction float_inc} {:instruction integer_rot} {:instruction float_dup_items} {:instruction float_div} {:instruction float_pop} {:instruction float_div} {:instruction float_inc} {:instruction tagged_341} {:instruction -43} {:instruction float_dup_times} {:instruction integer_shove} {:instruction float_add})
Best program: (in1 integer_add float_shove integer_sub integer_mod integer_div float_inc float_yankdup float_inc float_yankdup float_div float_inc float_rot float_inc float_inc float_dup_times float_inc float_yankdup float_inc float_yankdup float_inc float_div float_inc integer_min float_inc float_rot float_inc float_inc print_integer float_inc float_yankdup integer_pop integer_rot float_inc integer_inc float_inc float_yankdup float_inc float_yankdup tagged_412 float_inc float_yankdup integer_dup_items float_yankdup float_inc integer_flush float_yankdup float_mult float_yankdup float_inc float_inc integer_mod float_inc float_inc float_inc float_stackdepth float_inc integer_flush print_float float_flush integer_swap integer_dec print_float float_add print_float float_flush float_inc float_inc integer_rot float_dup_items float_div float_pop float_div float_inc tagged_341 -43 float_dup_times integer_shove float_add)
Errors: [34.0 13 79.0 13 91.0 12 49.0 2 67.0 3 98.0 2 26.0 2 50.0 2 36.0 2 73.0 2 0.0 0 30.0 2 8.0 1 6.0 2 43.0 3 57.0 2 21.0 2 25.0 2 18.0 3 15.0 2 29.0 2 5.0 3 47.0 2 73.0 3 40.0 1]
Total: 1103.0
Mean: 22.06
Genome size: 79
Size: 80
Percent parens: 0.013
--- Population Statistics ---
Average total errors in population: 2588.0230471
Median total errors in population: 1103.0
Error averages by case: (90.7408992 12.707 127.9351524 12.753 141.07437829999998 12.017 111.7313681000001 3.528 126.8938586 4.15 145.7663088 3.218 88.17800150000001 3.22 107.1807629 3.485 93.31096679999999 3.335 124.3891497 3.156 63.596220599999995 1.981 93.61782610000002 3.717 68.6654932 2.449 63.66996669999998 3.181 103.72862800000003 4.16 118.24765539999994 3.707 80.90052290000001 3.156 78.32285929999996 3.144 81.06613190000004 4.107 80.65293049999998 3.268 80.95954769999999 3.938 70.75825719999999 3.948 102.31694209999996 3.243 134.1994827 4.186 97.58773650000003 2.778)
Error minima by case: (0.0342 8 32.801 1 13.3419 8 41.0 2 28.4396 2 0.3239 1 18.0 1 9.34 2 6.8828 1 0.07 1 0.0 0 6.0 2 1.0 1 0.0 0 18.9856 2 33.0 2 0.0 0 0.1291 1 3.0 1 7.0 1 2.8434 1 0.0 0 0.1075 1 52.807 2 7.7482 1)
Average genome size in population (length): 64.458
Average program size in population (points): 65.458
Average percent parens in population: 0.015
Minimum age in population: 202.6753490677724
Maximum age in population: 207.7185193548201
Average age in population: 205.652867931615
Median age in population: 205.7175484954901
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 8
Genome diversity (% unique Plush genomes):	 0.835
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 8
Syntactic diversity (% unique Push programs):	 0.835
Total error diversity:				 0.099
Error (vector) diversity:			 0.107
Behavioral diversity:				 0.108
--- Run Statistics ---
Number of program evaluations used so far: 146000
Number of point (instruction) evaluations so far: 272810109
--- Timings ---
Current time: 1529615391797 milliseconds
Total Time:         536.6 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       193.2 seconds, 36.0%
Fitness Testing:    267.5 seconds, 49.8%
Report:              75.8 seconds, 14.1%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 145
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 146
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 146
;;******************************
;; -*- Number IO problem report - generation 146
Test total error for best: 59131.0
Test mean error for best: 29.56550
;;------------------------------
Outputs of best individual on training cases:
Correct output: 1.9526623133   | Program output: -32.0473376867
Correct output: -70.8009773522 | Program output: 8.1990226478  
Correct output: -13.7839009431 | Program output: 77.2160990569 
Correct output: 143.8727406396 | Program output: 94.8727406396 
Correct output: 136.4396027174 | Program output: 69.4396027174 
Correct output: 18.5044280613  | Program output: 116.5044280613
Correct output: 92.0568646792  | Program output: 66.0568646792 
Correct output: 71.8873476205  | Program output: 121.8873476205
Correct output: -10.8388749243 | Program output: -46.8388749243
Correct output: 0.9299825981   | Program output: 73.9299825981 
Correct output: -26.7840412284 | Program output: -26.7840412284
Correct output: -102.1264221267 | Program output: -72.1264221267
Correct output: 40.8061668642  | Program output: 48.8061668642 
Correct output: -5.2544966331  | Program output: -11.2544966331
Correct output: 102.9855886244 | Program output: 59.9855886244 
Correct output: -118.0507723766 | Program output: -61.0507723766
Correct output: 55.9371769928  | Program output: 76.9371769928 
Correct output: 4.2657989984   | Program output: 29.2657989984 
Correct output: 96.7057987603  | Program output: 114.7057987603
Correct output: 122.162446611  | Program output: 107.162446611 
Correct output: 30.0102027945  | Program output: 1.0102027945  
Correct output: 104.5822387035 | Program output: 99.5822387035 
Correct output: -1.5538743366  | Program output: -48.5538743366
Correct output: 166.8070496115 | Program output: 93.8070496115 
Correct output: 58.6188945281  | Program output: 98.6188945281 
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction in1} {:instruction integer_max} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_inc} {:instruction float_inc} {:instruction integer_mod} {:instruction float_inc} {:instruction integer_mod} {:instruction float_inc} {:instruction float_min} {:instruction float_inc} {:instruction float_inc} {:instruction float_div} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_div} {:instruction float_inc} {:instruction float_sub} {:instruction float_inc} {:instruction integer_add} {:instruction float_inc} {:instruction integer_yank} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_inc} {:instruction integer_pop} {:instruction float_yank} {:instruction float_dup_items} {:instruction float_div} {:instruction float_inc} {:instruction float_mult} {:instruction float_sub} {:instruction float_div} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_mult} {:instruction float_yankdup} {:instruction float_inc} {:instruction float_inc} {:instruction integer_mod} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_mult} {:instruction float_inc} {:instruction print_integer} {:instruction print_float} {:instruction float_flush} {:instruction integer_dup_times} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_inc} {:instruction float_dup} {:instruction float_inc} {:instruction float_inc})
Best program: (in1 integer_max float_inc float_yankdup float_inc float_inc integer_mod float_inc integer_mod float_inc float_min float_inc float_inc float_div float_inc float_yankdup float_inc float_inc float_inc float_yankdup float_div float_inc float_sub float_inc integer_add float_inc integer_yank float_inc float_yankdup float_inc integer_pop float_yank float_dup_items float_div float_inc float_mult float_sub float_div float_inc float_yankdup float_mult float_yankdup float_inc float_inc integer_mod float_inc float_inc float_inc float_mult float_inc print_integer print_float float_flush integer_dup_times float_inc float_yankdup float_inc float_dup float_inc float_inc)
Errors: [34.0 13 79.0 13 91.0 12 49.0 2 67.0 3 98.0 2 26.0 2 50.0 2 36.0 2 73.0 2 0.0 0 30.0 2 8.0 1 6.0 2 43.0 3 57.0 2 21.0 2 25.0 2 18.0 3 15.0 2 29.0 2 5.0 3 47.0 2 73.0 3 40.0 1]
Total: 1103.0
Mean: 22.06
Genome size: 60
Size: 61
Percent parens: 0.016
--- Population Statistics ---
Average total errors in population: 2922.5354772000005
Median total errors in population: 1103.0
Error averages by case: (105.79889529999997 12.736 140.5018706 12.81 155.14599679999998 12.063 123.53906190000004 3.53 138.90750830000005 4.146 160.236477 3.203 100.8403037 3.246 120.5623279 3.464 108.57439610000003 3.34 138.6159402 3.141 77.90516429999998 2.0 106.90864529999998 3.73 82.15977590000003 2.429 77.90008400000002 3.172 116.3531628 4.143 131.1869336 3.749 94.29457510000002 3.166 92.63445100000001 3.136 93.79795259999997 4.105 92.84794670000001 3.266 93.79875739999999 4.108 83.23464700000001 3.937 117.35925029999999 3.236 145.54465750000003 4.181 111.0766959 2.773)
Error minima by case: (1.1455 8 20.9232 1 13.5393 8 20.8727 1 13.5604 2 0.0945 1 15.0569 1 26.0 2 9.8792 1 0.8276 1 0.0 0 6.0 2 0.0 0 0.0 0 0.9856 2 20.0508 2 1.9372 1 0.1331 1 0.0 0 6.0 1 3.0102 1 0.0 0 1.4135 1 4.193 2 10.2604 1)
Average genome size in population (length): 63.968
Average program size in population (points): 64.968
Average percent parens in population: 0.016
Minimum age in population: 204.2423957605595
Maximum age in population: 209.3331204278683
Average age in population: 207.0454922923273
Median age in population: 207.0697066696998
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 8
Genome diversity (% unique Plush genomes):	 0.835
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 8
Syntactic diversity (% unique Push programs):	 0.835
Total error diversity:				 0.083
Error (vector) diversity:			 0.093
Behavioral diversity:				 0.094
--- Run Statistics ---
Number of program evaluations used so far: 147000
Number of point (instruction) evaluations so far: 274409334
--- Timings ---
Current time: 1529615395227 milliseconds
Total Time:         540.1 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       194.5 seconds, 36.0%
Fitness Testing:    269.2 seconds, 49.8%
Report:              76.3 seconds, 14.1%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 146
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 147
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 147
;;******************************
;; -*- Number IO problem report - generation 147
Test total error for best: 59131.0
Test mean error for best: 29.56550
;;------------------------------
Outputs of best individual on training cases:
Correct output: 1.9526623133   | Program output: -32.0473376867
Correct output: -70.8009773522 | Program output: 8.1990226478  
Correct output: -13.7839009431 | Program output: 77.2160990569 
Correct output: 143.8727406396 | Program output: 94.8727406396 
Correct output: 136.4396027174 | Program output: 69.4396027174 
Correct output: 18.5044280613  | Program output: 116.5044280613
Correct output: 92.0568646792  | Program output: 66.0568646792 
Correct output: 71.8873476205  | Program output: 121.8873476205
Correct output: -10.8388749243 | Program output: -46.8388749243
Correct output: 0.9299825981   | Program output: 73.9299825981 
Correct output: -26.7840412284 | Program output: -26.7840412284
Correct output: -102.1264221267 | Program output: -72.1264221267
Correct output: 40.8061668642  | Program output: 48.8061668642 
Correct output: -5.2544966331  | Program output: -11.2544966331
Correct output: 102.9855886244 | Program output: 59.9855886244 
Correct output: -118.0507723766 | Program output: -61.0507723766
Correct output: 55.9371769928  | Program output: 76.9371769928 
Correct output: 4.2657989984   | Program output: 29.2657989984 
Correct output: 96.7057987603  | Program output: 114.7057987603
Correct output: 122.162446611  | Program output: 107.162446611 
Correct output: 30.0102027945  | Program output: 1.0102027945  
Correct output: 104.5822387035 | Program output: 99.5822387035 
Correct output: -1.5538743366  | Program output: -48.5538743366
Correct output: 166.8070496115 | Program output: 93.8070496115 
Correct output: 58.6188945281  | Program output: 98.6188945281 
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction in1} {:instruction integer_max} {:instruction integer_dup_items} {:instruction float_shove} {:instruction integer_stackdepth} {:instruction integer_dup_items} {:instruction integer_sub} {:instruction integer_mod} {:instruction integer_div} {:instruction float_inc} {:instruction float_yank} {:instruction float_inc} {:instruction float_max} {:instruction float_inc} {:instruction float_mod} {:instruction float_rot} {:instruction float_inc} {:instruction integer_mod} {:instruction float_inc} {:instruction float_div} {:instruction float_inc} {:instruction float_mult} {:instruction float_inc} {:instruction float_inc} {:instruction float_div} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_inc} {:instruction float_div} {:instruction float_inc} {:instruction float_div} {:instruction float_inc} {:instruction integer_yank} {:instruction float_inc} {:instruction float_inc} {:instruction float_yankdup} {:instruction integer_yankdup} {:instruction float_dup_items} {:instruction float_dup_times} {:instruction float_inc} {:instruction float_swap} {:instruction float_dup_items} {:instruction float_div} {:instruction float_inc} {:instruction float_sub} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_inc} {:instruction float_yank} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction print_integer} {:instruction float_inc} {:instruction float_yank} {:instruction print_float} {:instruction integer_yankdup} {:instruction float_inc} {:instruction integer_yank} {:instruction float_flush} {:instruction float_dup_items} {:instruction integer_dup} {:instruction float_inc} {:instruction float_inc} {:instruction float_mult})
Best program: (in1 integer_max integer_dup_items float_shove integer_stackdepth integer_dup_items integer_sub integer_mod integer_div float_inc float_yank float_inc float_max float_inc float_mod float_rot float_inc integer_mod float_inc float_div float_inc float_mult float_inc float_inc float_div float_inc float_yankdup float_inc float_yankdup float_inc float_div float_inc float_div float_inc integer_yank float_inc float_inc float_yankdup integer_yankdup float_dup_items float_dup_times float_inc float_swap float_dup_items float_div float_inc float_sub float_inc float_yankdup float_inc float_yankdup float_inc float_yank float_inc float_inc float_inc print_integer float_inc float_yank print_float integer_yankdup float_inc integer_yank float_flush float_dup_items integer_dup float_inc float_inc float_mult)
Errors: [34.0 13 79.0 13 91.0 12 49.0 2 67.0 3 98.0 2 26.0 2 50.0 2 36.0 2 73.0 2 0.0 0 30.0 2 8.0 1 6.0 2 43.0 3 57.0 2 21.0 2 25.0 2 18.0 3 15.0 2 29.0 2 5.0 3 47.0 2 73.0 3 40.0 1]
Total: 1103.0
Mean: 22.06
Genome size: 69
Size: 70
Percent parens: 0.014
--- Population Statistics ---
Average total errors in population: 2651.4808651
Median total errors in population: 1103.0
Error averages by case: (93.9916528 12.732 133.06493330000004 12.82 145.2169491 12.033 112.84515430000002 3.365 128.45237129999998 3.99 150.38703659999996 3.067 89.88371400000003 3.084 109.99586050000005 3.311 96.37680440000003 3.222 128.50715050000002 2.999 65.9003806 1.795 95.3423764 3.573 71.24104780000002 2.26 67.24503150000001 3.031 105.51889400000003 3.999 120.08211729999995 3.587 82.79122819999999 2.993 82.51799900000002 2.995 82.72374889999999 3.964 81.49917770000002 3.095 85.5251927 3.761 71.81945540000001 3.78 105.6572844 3.108 135.19477949999995 4.031 100.50352489999999 2.602)
Error minima by case: (0.8351 8 51.4286 1 12.8728 8 38.0 2 56.0 2 0.2576 1 15.0 1 22.4286 2 9.9277 1 0.0554 1 0.0 0 2.4286 2 0.0 0 0.0 0 32.0 2 29.4286 2 6.0 1 0.2223 1 3.0 1 4.0 1 0.563 1 0.0 0 0.6427 1 62.0 2 12.4286 1)
Average genome size in population (length): 64.297
Average program size in population (points): 65.297
Average percent parens in population: 0.016
Minimum age in population: 205.3637013546081
Maximum age in population: 210.3725841261886
Average age in population: 208.3984329054642
Median age in population: 208.4320375941559
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 7
Genome diversity (% unique Plush genomes):	 0.825
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 7
Syntactic diversity (% unique Push programs):	 0.825
Total error diversity:				 0.071
Error (vector) diversity:			 0.078
Behavioral diversity:				 0.078
--- Run Statistics ---
Number of program evaluations used so far: 148000
Number of point (instruction) evaluations so far: 276016784
--- Timings ---
Current time: 1529615398668 milliseconds
Total Time:         543.6 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       195.9 seconds, 36.0%
Fitness Testing:    270.8 seconds, 49.8%
Report:              76.8 seconds, 14.1%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 147
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 148
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 148
;;******************************
;; -*- Number IO problem report - generation 148
Test total error for best: 59131.0
Test mean error for best: 29.56550
;;------------------------------
Outputs of best individual on training cases:
Correct output: 1.9526623133   | Program output: -32.0473376867
Correct output: -70.8009773522 | Program output: 8.1990226478  
Correct output: -13.7839009431 | Program output: 77.2160990569 
Correct output: 143.8727406396 | Program output: 94.8727406396 
Correct output: 136.4396027174 | Program output: 69.4396027174 
Correct output: 18.5044280613  | Program output: 116.5044280613
Correct output: 92.0568646792  | Program output: 66.0568646792 
Correct output: 71.8873476205  | Program output: 121.8873476205
Correct output: -10.8388749243 | Program output: -46.8388749243
Correct output: 0.9299825981   | Program output: 73.9299825981 
Correct output: -26.7840412284 | Program output: -26.7840412284
Correct output: -102.1264221267 | Program output: -72.1264221267
Correct output: 40.8061668642  | Program output: 48.8061668642 
Correct output: -5.2544966331  | Program output: -11.2544966331
Correct output: 102.9855886244 | Program output: 59.9855886244 
Correct output: -118.0507723766 | Program output: -61.0507723766
Correct output: 55.9371769928  | Program output: 76.9371769928 
Correct output: 4.2657989984   | Program output: 29.2657989984 
Correct output: 96.7057987603  | Program output: 114.7057987603
Correct output: 122.162446611  | Program output: 107.162446611 
Correct output: 30.0102027945  | Program output: 1.0102027945  
Correct output: 104.5822387035 | Program output: 99.5822387035 
Correct output: -1.5538743366  | Program output: -48.5538743366
Correct output: 166.8070496115 | Program output: 93.8070496115 
Correct output: 58.6188945281  | Program output: 98.6188945281 
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction in1} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_inc} {:instruction float_dup_items} {:instruction float_inc} {:instruction float_inc} {:instruction integer_dec} {:instruction tagged_646} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_inc} {:instruction float_inc} {:instruction float_div} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_inc} {:instruction float_div} {:instruction float_inc} {:instruction float_inc} {:instruction integer_max} {:instruction float_div} {:instruction float_inc} {:instruction integer_div} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_inc} {:instruction float_mult} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_inc} {:instruction integer_mod} {:instruction float_inc} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_inc} {:instruction float_inc} {:instruction float_add} {:instruction integer_max} {:instruction integer_dec} {:instruction float_inc} {:instruction float_inc} {:instruction float_swap} {:instruction float_inc} {:instruction print_float} {:instruction float_dup_items} {:instruction float_div} {:instruction float_inc} {:instruction float_inc} {:instruction float_yankdup} {:instruction print_float} {:instruction integer_dec} {:instruction integer_swap} {:instruction float_inc} {:instruction float_inc} {:instruction print_integer} {:instruction float_inc} {:instruction float_yankdup} {:instruction print_float} {:instruction integer_yankdup} {:instruction float_inc} {:instruction integer_yank} {:instruction float_flush} {:instruction float_dup_items} {:instruction integer_dup} {:instruction float_inc} {:instruction float_dec} {:instruction float_inc} {:instruction float_min})
Best program: (in1 float_inc float_yankdup float_inc float_dup_items float_inc float_inc integer_dec tagged_646 float_inc float_yankdup float_inc float_inc float_div float_inc float_yankdup float_inc float_yankdup float_inc float_div float_inc float_inc integer_max float_div float_inc integer_div float_inc float_yankdup float_inc float_mult float_inc float_yankdup float_inc integer_mod float_inc float_inc float_yankdup float_inc float_inc float_add integer_max integer_dec float_inc float_inc float_swap float_inc print_float float_dup_items float_div float_inc float_inc float_yankdup print_float integer_dec integer_swap float_inc float_inc print_integer float_inc float_yankdup print_float integer_yankdup float_inc integer_yank float_flush float_dup_items integer_dup float_inc float_dec float_inc float_min)
Errors: [34.0 13 79.0 13 91.0 12 49.0 2 67.0 3 98.0 2 26.0 2 50.0 2 36.0 2 73.0 2 0.0 0 30.0 2 8.0 1 6.0 2 43.0 3 57.0 2 21.0 2 25.0 2 18.0 3 15.0 2 29.0 2 5.0 3 47.0 2 73.0 3 40.0 1]
Total: 1103.0
Mean: 22.06
Genome size: 71
Size: 72
Percent parens: 0.014
--- Population Statistics ---
Average total errors in population: 2702.1189626000005
Median total errors in population: 1103.0
Error averages by case: (96.13688010000003 12.759 135.62285090000003 12.821 146.5218174 12.046 113.87463450000001 3.405 129.0776738 4.031 153.65410830000002 3.086 90.78248430000001 3.115 113.73762010000004 3.308 98.70256330000002 3.241 129.81220600000006 3.032 68.31639940000001 1.87 98.6613804 3.601 71.85942769999998 2.312 70.611559 3.099 106.2117571 4.032 123.11992839999999 3.588 82.72962590000003 3.047 84.04761760000001 3.037 85.83290000000001 4.006 84.82551640000003 3.14 87.95050439999999 4.004 73.3894219 3.876 107.90602720000001 3.153 136.11284650000002 4.067 102.32321200000003 2.622)
Error minima by case: (0.1649 7 46.3932 2 12.3419 8 36.0 1 0.5604 2 0.4999 1 13.0 1 26.0 2 9.829 1 0.07 1 0.0 0 6.0 2 0.0 0 0.0 0 13.9856 2 7.0508 2 1.0 1 0.7777 1 2.0 1 2.0 1 2.0102 1 0.0 0 0.2571 1 17.807 1 16.0 1)
Average genome size in population (length): 64.725
Average program size in population (points): 65.725
Average percent parens in population: 0.015
Minimum age in population: 206.9132030328577
Maximum age in population: 211.7959935111273
Average age in population: 209.7371501278665
Median age in population: 209.7813833027811
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 7
Genome diversity (% unique Plush genomes):	 0.842
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 7
Syntactic diversity (% unique Push programs):	 0.842
Total error diversity:				 0.082
Error (vector) diversity:			 0.092
Behavioral diversity:				 0.092
--- Run Statistics ---
Number of program evaluations used so far: 149000
Number of point (instruction) evaluations so far: 277634934
--- Timings ---
Current time: 1529615402106 milliseconds
Total Time:         547.0 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       197.2 seconds, 36.0%
Fitness Testing:    272.5 seconds, 49.8%
Report:              77.2 seconds, 14.1%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 148
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 149
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 149
;;******************************
;; -*- Number IO problem report - generation 149
Test total error for best: 59131.0
Test mean error for best: 29.56550
;;------------------------------
Outputs of best individual on training cases:
Correct output: 1.9526623133   | Program output: -32.0473376867
Correct output: -70.8009773522 | Program output: 8.1990226478  
Correct output: -13.7839009431 | Program output: 77.2160990569 
Correct output: 143.8727406396 | Program output: 94.8727406396 
Correct output: 136.4396027174 | Program output: 69.4396027174 
Correct output: 18.5044280613  | Program output: 116.5044280613
Correct output: 92.0568646792  | Program output: 66.0568646792 
Correct output: 71.8873476205  | Program output: 121.8873476205
Correct output: -10.8388749243 | Program output: -46.8388749243
Correct output: 0.9299825981   | Program output: 73.9299825981 
Correct output: -26.7840412284 | Program output: -26.7840412284
Correct output: -102.1264221267 | Program output: -72.1264221267
Correct output: 40.8061668642  | Program output: 48.8061668642 
Correct output: -5.2544966331  | Program output: -11.2544966331
Correct output: 102.9855886244 | Program output: 59.9855886244 
Correct output: -118.0507723766 | Program output: -61.0507723766
Correct output: 55.9371769928  | Program output: 76.9371769928 
Correct output: 4.2657989984   | Program output: 29.2657989984 
Correct output: 96.7057987603  | Program output: 114.7057987603
Correct output: 122.162446611  | Program output: 107.162446611 
Correct output: 30.0102027945  | Program output: 1.0102027945  
Correct output: 104.5822387035 | Program output: 99.5822387035 
Correct output: -1.5538743366  | Program output: -48.5538743366
Correct output: 166.8070496115 | Program output: 93.8070496115 
Correct output: 58.6188945281  | Program output: 98.6188945281 
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction in1} {:instruction float_inc} {:instruction integer_sub} {:instruction float_inc} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_div} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_yank} {:instruction float_min} {:instruction float_inc} {:instruction float_div} {:instruction float_inc} {:instruction integer_mod} {:instruction float_inc} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_yankdup} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_div} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_inc} {:instruction tag_integer_979} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_inc} {:instruction float_yankdup} {:instruction integer_yankdup} {:instruction float_dup_items} {:instruction float_dup_times} {:instruction float_inc} {:instruction float_swap} {:instruction float_dup_items} {:instruction float_div} {:instruction float_inc} {:instruction in2} {:instruction float_inc} {:instruction integer_mult} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_inc} {:instruction integer_mod} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_yank} {:instruction float_inc} {:instruction integer_mult} {:instruction print_float} {:instruction float_flush} {:instruction integer_yank} {:instruction integer_mod} {:instruction float_shove} {:instruction integer_flush} {:instruction float_sin})
Best program: (in1 float_inc integer_sub float_inc float_inc float_yankdup float_div float_inc float_yankdup float_yank float_min float_inc float_div float_inc integer_mod float_inc float_inc float_yankdup float_yankdup float_inc float_inc float_inc float_yankdup float_div float_inc float_yankdup float_inc tag_integer_979 float_inc float_yankdup float_inc float_yankdup integer_yankdup float_dup_items float_dup_times float_inc float_swap float_dup_items float_div float_inc in2 float_inc integer_mult float_inc float_yankdup float_inc integer_mod float_inc float_inc float_inc float_yank float_inc integer_mult print_float float_flush integer_yank integer_mod float_shove integer_flush float_sin)
Errors: [34.0 13 79.0 13 91.0 12 49.0 2 67.0 3 98.0 2 26.0 2 50.0 2 36.0 2 73.0 2 0.0 0 30.0 2 8.0 1 6.0 2 43.0 3 57.0 2 21.0 2 25.0 2 18.0 3 15.0 2 29.0 2 5.0 3 47.0 2 73.0 3 40.0 1]
Total: 1103.0
Mean: 22.06
Genome size: 60
Size: 61
Percent parens: 0.016
--- Population Statistics ---
Average total errors in population: 2464.2139497
Median total errors in population: 1103.0
Error averages by case: (87.14814220000002 12.812 125.77447900000003 12.727 138.11194700000001 12.049 105.25694760000003 3.272 120.84801360000003 3.913 143.92655620000002 3.0 81.83872759999998 2.985 103.1597378 3.241 89.59247349999998 3.082 121.28497030000001 2.921 58.275575700000005 1.689 88.97526029999999 3.468 62.1392409 2.172 59.81983180000001 2.95 97.618736 3.93 113.73603539999996 3.501 74.32226850000002 2.91 74.69890240000004 2.939 74.5672416 3.894 73.774692 2.999 77.5510868 3.931 63.89670259999999 3.728 99.08951499999999 2.994 127.8605338 3.938 93.36333209999997 2.538)
Error minima by case: (0.3712 8 30.2497 1 13.681 9 40.0 1 58.0 2 0.5234 1 17.0 1 26.0 2 10.3626 1 0.8778 1 0.0 0 6.0 2 0.0 0 0.0 0 34.0 2 33.0 2 1.0 1 0.2223 1 1.0 1 6.0 1 5.0102 1 0.0 0 1.5637 1 64.0 2 16.0 1)
Average genome size in population (length): 64.229
Average program size in population (points): 65.229
Average percent parens in population: 0.016
Minimum age in population: 207.9132030328577
Maximum age in population: 213.2493654571051
Average age in population: 211.1881481133658
Median age in population: 211.2703746862987
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 6
Genome diversity (% unique Plush genomes):	 0.829
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 6
Syntactic diversity (% unique Push programs):	 0.829
Total error diversity:				 0.082
Error (vector) diversity:			 0.09
Behavioral diversity:				 0.091
--- Run Statistics ---
Number of program evaluations used so far: 150000
Number of point (instruction) evaluations so far: 279240759
--- Timings ---
Current time: 1529615405530 milliseconds
Total Time:         550.4 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       198.5 seconds, 36.1%
Fitness Testing:    274.1 seconds, 49.8%
Report:              77.7 seconds, 14.1%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 149
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 150
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 150
;;******************************
;; -*- Number IO problem report - generation 150
Test total error for best: 59131.0
Test mean error for best: 29.56550
;;------------------------------
Outputs of best individual on training cases:
Correct output: 1.9526623133   | Program output: -32.0473376867
Correct output: -70.8009773522 | Program output: 8.1990226478  
Correct output: -13.7839009431 | Program output: 77.2160990569 
Correct output: 143.8727406396 | Program output: 94.8727406396 
Correct output: 136.4396027174 | Program output: 69.4396027174 
Correct output: 18.5044280613  | Program output: 116.5044280613
Correct output: 92.0568646792  | Program output: 66.0568646792 
Correct output: 71.8873476205  | Program output: 121.8873476205
Correct output: -10.8388749243 | Program output: -46.8388749243
Correct output: 0.9299825981   | Program output: 73.9299825981 
Correct output: -26.7840412284 | Program output: -26.7840412284
Correct output: -102.1264221267 | Program output: -72.1264221267
Correct output: 40.8061668642  | Program output: 48.8061668642 
Correct output: -5.2544966331  | Program output: -11.2544966331
Correct output: 102.9855886244 | Program output: 59.9855886244 
Correct output: -118.0507723766 | Program output: -61.0507723766
Correct output: 55.9371769928  | Program output: 76.9371769928 
Correct output: 4.2657989984   | Program output: 29.2657989984 
Correct output: 96.7057987603  | Program output: 114.7057987603
Correct output: 122.162446611  | Program output: 107.162446611 
Correct output: 30.0102027945  | Program output: 1.0102027945  
Correct output: 104.5822387035 | Program output: 99.5822387035 
Correct output: -1.5538743366  | Program output: -48.5538743366
Correct output: 166.8070496115 | Program output: 93.8070496115 
Correct output: 58.6188945281  | Program output: 98.6188945281 
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction in1} {:instruction integer_max} {:instruction tagged_55} {:instruction float_shove} {:instruction integer_sub} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_mod} {:instruction float_inc} {:instruction integer_swap} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_yank} {:instruction float_inc} {:instruction integer_max} {:instruction integer_mod} {:instruction float_inc} {:instruction float_yank} {:instruction float_inc} {:instruction integer_yankdup} {:instruction float_inc} {:instruction float_div} {:instruction float_inc} {:instruction float_div} {:instruction float_inc} {:instruction float_rot} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_inc} {:instruction integer_mod} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_mult} {:instruction float_inc} {:instruction integer_pop} {:instruction print_float} {:instruction float_flush} {:instruction integer_dup_times} {:instruction integer_div} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_div} {:instruction float_frominteger} {:instruction float_inc} {:instruction integer_mod} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_yank} {:instruction integer_dup_items} {:instruction float_inc} {:instruction tagged_239} {:instruction print_float} {:instruction tag_float_711})
Best program: (in1 integer_max tagged_55 float_shove integer_sub float_inc float_inc float_inc integer_mod float_inc integer_swap float_inc float_inc float_inc integer_yank float_inc integer_max integer_mod float_inc float_yank float_inc integer_yankdup float_inc float_div float_inc float_div float_inc float_rot float_inc float_inc float_inc float_inc float_yankdup float_inc float_yankdup float_inc float_yankdup float_inc integer_mod float_inc float_inc float_inc float_mult float_inc integer_pop print_float float_flush integer_dup_times integer_div float_inc float_yankdup float_div float_frominteger float_inc integer_mod float_inc float_inc float_inc float_yank integer_dup_items float_inc tagged_239 print_float tag_float_711)
Errors: [34.0 13 79.0 13 91.0 12 49.0 2 67.0 3 98.0 2 26.0 2 50.0 2 36.0 2 73.0 2 0.0 0 30.0 2 8.0 1 6.0 2 43.0 3 57.0 2 21.0 2 25.0 2 18.0 3 15.0 2 29.0 2 5.0 3 47.0 2 73.0 3 40.0 1]
Total: 1103.0
Mean: 22.06
Genome size: 64
Size: 65
Percent parens: 0.015
--- Population Statistics ---
Average total errors in population: 2651.6815835
Median total errors in population: 1103.0
Error averages by case: (93.36514040000002 12.73 130.96749850000003 12.783 145.24334629999998 12.011 112.75790200000003 3.481 127.71729049999999 4.085 150.6611177 3.166 89.23934030000001 3.165 111.65930480000002 3.439 96.2578049 3.262 128.55919340000008 3.129 65.77423149999998 1.917 98.14999769999996 3.691 69.9150112 2.392 66.48852460000003 3.095 104.63041890000002 4.078 122.46344669999998 3.699 82.64287630000003 3.118 82.46342799999998 3.104 82.91991420000001 4.064 81.98493210000005 3.193 81.89724989999999 4.031 72.13199449999998 3.868 105.421136 3.196 135.06797550000002 4.125 101.71550760000001 2.765)
Error minima by case: (0.0473 7 15.801 1 9.8193 8 21.8727 1 21.5604 2 0.4448 1 16.0569 1 26.0 2 9.8792 1 0.1435 1 0.0 0 6.0 2 0.0 0 0.0 0 7.0144 2 28.0508 2 0.0628 1 0.4424 1 2.7058 1 6.0 1 2.1325 1 0.0 0 1.4135 1 3.193 2 16.0 1)
Average genome size in population (length): 64.318
Average program size in population (points): 65.318
Average percent parens in population: 0.016
Minimum age in population: 209.7372357426046
Maximum age in population: 214.492843615501
Average age in population: 212.5587124970899
Median age in population: 212.6522052834267
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 8
Genome diversity (% unique Plush genomes):	 0.823
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 8
Syntactic diversity (% unique Push programs):	 0.823
Total error diversity:				 0.094
Error (vector) diversity:			 0.104
Behavioral diversity:				 0.104
--- Run Statistics ---
Number of program evaluations used so far: 151000
Number of point (instruction) evaluations so far: 280848759
--- Timings ---
Current time: 1529615408993 milliseconds
Total Time:         553.9 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       199.8 seconds, 36.1%
Fitness Testing:    275.8 seconds, 49.8%
Report:              78.2 seconds, 14.1%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 150
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 151
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 151
;;******************************
;; -*- Number IO problem report - generation 151
Test total error for best: 59131.0
Test mean error for best: 29.56550
;;------------------------------
Outputs of best individual on training cases:
Correct output: 1.9526623133   | Program output: -32.0473376867
Correct output: -70.8009773522 | Program output: 8.1990226478  
Correct output: -13.7839009431 | Program output: 77.2160990569 
Correct output: 143.8727406396 | Program output: 94.8727406396 
Correct output: 136.4396027174 | Program output: 69.4396027174 
Correct output: 18.5044280613  | Program output: 116.5044280613
Correct output: 92.0568646792  | Program output: 66.0568646792 
Correct output: 71.8873476205  | Program output: 121.8873476205
Correct output: -10.8388749243 | Program output: -46.8388749243
Correct output: 0.9299825981   | Program output: 73.9299825981 
Correct output: -26.7840412284 | Program output: -26.7840412284
Correct output: -102.1264221267 | Program output: -72.1264221267
Correct output: 40.8061668642  | Program output: 48.8061668642 
Correct output: -5.2544966331  | Program output: -11.2544966331
Correct output: 102.9855886244 | Program output: 59.9855886244 
Correct output: -118.0507723766 | Program output: -61.0507723766
Correct output: 55.9371769928  | Program output: 76.9371769928 
Correct output: 4.2657989984   | Program output: 29.2657989984 
Correct output: 96.7057987603  | Program output: 114.7057987603
Correct output: 122.162446611  | Program output: 107.162446611 
Correct output: 30.0102027945  | Program output: 1.0102027945  
Correct output: 104.5822387035 | Program output: 99.5822387035 
Correct output: -1.5538743366  | Program output: -48.5538743366
Correct output: 166.8070496115 | Program output: 93.8070496115 
Correct output: 58.6188945281  | Program output: 98.6188945281 
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction in1} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_inc} {:instruction float_inc} {:instruction tag_integer_29} {:instruction integer_rot} {:instruction float_inc} {:instruction in2} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_rot} {:instruction float_inc} {:instruction float_inc} {:instruction integer_yank} {:instruction float_inc} {:instruction integer_max} {:instruction float_div} {:instruction float_inc} {:instruction integer_flush} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_inc} {:instruction float_div} {:instruction float_inc} {:instruction float_mult} {:instruction float_inc} {:instruction float_rot} {:instruction float_inc} {:instruction float_inc} {:instruction integer_flush} {:instruction float_dup_items} {:instruction float_yank} {:instruction float_inc} {:instruction float_div} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_inc} {:instruction integer_mod} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_min} {:instruction float_inc} {:instruction float_mod} {:instruction print_float} {:instruction integer_min} {:instruction integer_dup_times} {:instruction integer_div} {:instruction float_dup} {:instruction float_frominteger} {:instruction tag_float_856} {:instruction float_dup_items} {:instruction integer_sub})
Best program: (in1 float_inc float_yankdup float_inc float_inc tag_integer_29 integer_rot float_inc in2 float_inc float_inc float_inc float_rot float_inc float_inc integer_yank float_inc integer_max float_div float_inc integer_flush float_inc float_yankdup float_inc float_div float_inc float_mult float_inc float_rot float_inc float_inc integer_flush float_dup_items float_yank float_inc float_div float_inc float_yankdup float_inc integer_mod float_inc float_inc float_inc integer_min float_inc float_mod print_float integer_min integer_dup_times integer_div float_dup float_frominteger tag_float_856 float_dup_items integer_sub)
Errors: [34.0 13 79.0 13 91.0 12 49.0 2 67.0 3 98.0 2 26.0 2 50.0 2 36.0 2 73.0 2 0.0 0 30.0 2 8.0 1 6.0 2 43.0 3 57.0 2 21.0 2 25.0 2 18.0 3 15.0 2 29.0 2 5.0 3 47.0 2 73.0 3 40.0 1]
Total: 1103.0
Mean: 22.06
Genome size: 55
Size: 56
Percent parens: 0.018
--- Population Statistics ---
Average total errors in population: 2798.7124569000007
Median total errors in population: 1103.0
Error averages by case: (99.76592449999998 12.769 135.88125280000006 12.766 152.31993640000002 12.038 118.01206820000003 3.428 133.45878790000003 4.071 158.27122740000001 3.131 95.1425401 3.159 118.62974100000002 3.387 103.04201970000004 3.262 135.76345400000005 3.084 71.68676809999998 1.874 104.12143099999997 3.627 76.25014140000002 2.341 70.59258510000001 3.103 110.89315469999998 4.076 128.47212879999995 3.652 86.8999419 3.061 88.37114900000002 3.073 88.89678190000001 4.018 88.03260969999998 3.171 85.86492440000002 3.949 77.46875609999996 3.883 111.4641076 3.181 140.2222359 4.095 108.31578930000002 2.674)
Error minima by case: (1.3825 8 20.9506 1 14.7535 9 37.0 1 5.5604 2 0.4347 1 14.0 1 29.0 2 10.5577 1 1.9247 1 0.0 0 9.0 2 0.0 0 0.0 0 8.9856 2 12.0508 2 0.0 0 0.4438 1 0.0 0 3.0 1 0.7996 1 0.0 0 2.544 1 12.807 2 19.0 1)
Average genome size in population (length): 64.449
Average program size in population (points): 65.449
Average percent parens in population: 0.016
Minimum age in population: 211.0131377693794
Maximum age in population: 215.8870286893684
Average age in population: 213.9633431306327
Median age in population: 214.0105445872438
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 7
Genome diversity (% unique Plush genomes):	 0.804
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 7
Syntactic diversity (% unique Push programs):	 0.804
Total error diversity:				 0.09
Error (vector) diversity:			 0.1
Behavioral diversity:				 0.101
--- Run Statistics ---
Number of program evaluations used so far: 152000
Number of point (instruction) evaluations so far: 282460009
--- Timings ---
Current time: 1529615412423 milliseconds
Total Time:         557.3 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       201.1 seconds, 36.1%
Fitness Testing:    277.5 seconds, 49.8%
Report:              78.7 seconds, 14.1%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 151
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 152
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 152
;;******************************
;; -*- Number IO problem report - generation 152
Test total error for best: 59131.0
Test mean error for best: 29.56550
;;------------------------------
Outputs of best individual on training cases:
Correct output: 1.9526623133   | Program output: -32.0473376867
Correct output: -70.8009773522 | Program output: 8.1990226478  
Correct output: -13.7839009431 | Program output: 77.2160990569 
Correct output: 143.8727406396 | Program output: 94.8727406396 
Correct output: 136.4396027174 | Program output: 69.4396027174 
Correct output: 18.5044280613  | Program output: 116.5044280613
Correct output: 92.0568646792  | Program output: 66.0568646792 
Correct output: 71.8873476205  | Program output: 121.8873476205
Correct output: -10.8388749243 | Program output: -46.8388749243
Correct output: 0.9299825981   | Program output: 73.9299825981 
Correct output: -26.7840412284 | Program output: -26.7840412284
Correct output: -102.1264221267 | Program output: -72.1264221267
Correct output: 40.8061668642  | Program output: 48.8061668642 
Correct output: -5.2544966331  | Program output: -11.2544966331
Correct output: 102.9855886244 | Program output: 59.9855886244 
Correct output: -118.0507723766 | Program output: -61.0507723766
Correct output: 55.9371769928  | Program output: 76.9371769928 
Correct output: 4.2657989984   | Program output: 29.2657989984 
Correct output: 96.7057987603  | Program output: 114.7057987603
Correct output: 122.162446611  | Program output: 107.162446611 
Correct output: 30.0102027945  | Program output: 1.0102027945  
Correct output: 104.5822387035 | Program output: 99.5822387035 
Correct output: -1.5538743366  | Program output: -48.5538743366
Correct output: 166.8070496115 | Program output: 93.8070496115 
Correct output: 58.6188945281  | Program output: 98.6188945281 
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction in1} {:instruction integer_max} {:instruction integer_dup_items} {:instruction float_inc} {:instruction float_yankdup} {:instruction integer_sub} {:instruction integer_dup} {:instruction float_shove} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_mod} {:instruction float_inc} {:instruction integer_dup_items} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_yank} {:instruction float_inc} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_rot} {:instruction float_inc} {:instruction float_inc} {:instruction print_integer} {:instruction float_inc} {:instruction float_yankdup} {:instruction integer_mod} {:instruction integer_rot} {:instruction float_inc} {:instruction integer_inc} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_mult} {:instruction float_add} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_inc} {:instruction float_yankdup} {:instruction integer_dup_items} {:instruction float_yankdup} {:instruction float_inc} {:instruction integer_flush} {:instruction float_yankdup} {:instruction integer_mod} {:instruction float_yankdup} {:instruction float_inc} {:instruction float_inc} {:instruction integer_mod} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_mult} {:instruction float_inc} {:instruction integer_flush} {:instruction print_float})
Best program: (in1 integer_max integer_dup_items float_inc float_yankdup integer_sub integer_dup float_shove float_inc float_inc float_inc integer_mod float_inc integer_dup_items float_inc float_inc float_inc integer_yank float_inc float_inc float_yankdup float_rot float_inc float_inc print_integer float_inc float_yankdup integer_mod integer_rot float_inc integer_inc float_inc float_yankdup float_mult float_add float_inc float_yankdup float_inc float_yankdup integer_dup_items float_yankdup float_inc integer_flush float_yankdup integer_mod float_yankdup float_inc float_inc integer_mod float_inc float_inc float_inc float_mult float_inc integer_flush print_float)
Errors: [34.0 13 79.0 13 91.0 12 49.0 2 67.0 3 98.0 2 26.0 2 50.0 2 36.0 2 73.0 2 0.0 0 30.0 2 8.0 1 6.0 2 43.0 3 57.0 2 21.0 2 25.0 2 18.0 3 15.0 2 29.0 2 5.0 3 47.0 2 73.0 3 40.0 1]
Total: 1103.0
Mean: 22.06
Genome size: 56
Size: 57
Percent parens: 0.018
--- Population Statistics ---
Average total errors in population: 2474.6898478999997
Median total errors in population: 1103.0
Error averages by case: (86.74660130000001 12.746 126.28792810000009 12.741 139.6111506 12.002 105.02562319999997 3.334 120.40279649999997 3.991 144.86629279999997 3.053 81.68679860000002 3.064 104.67561970000003 3.315 89.29919550000001 3.13 122.85224580000003 2.985 58.5607315 1.752 90.79716480000002 3.508 62.283086600000004 2.281 59.4466715 2.987 97.26630779999999 3.986 115.4793297 3.52 75.4863136 2.984 75.49759239999999 2.997 74.87571940000001 3.952 73.86599530000001 3.096 75.80096479999999 3.812 64.06727939999999 3.817 98.64157119999999 3.044 127.45136039999998 4.017 94.99150740000002 2.61)
Error minima by case: (1.6839 8 15.801 1 10.8193 8 22.8727 2 20.5604 2 0.4746 1 16.0 1 27.0 2 12.1319 1 2.5813 1 0.0 0 7.0 2 0.0 0 0.0 0 6.0144 2 27.0508 2 2.0 1 0.7545 1 3.0 1 5.0 1 2.0102 1 0.0 0 4.5008 1 2.193 2 17.0 1)
Average genome size in population (length): 64.684
Average program size in population (points): 65.684
Average percent parens in population: 0.015
Minimum age in population: 212.6167685036373
Maximum age in population: 217.5378287765598
Average age in population: 215.3745143520291
Median age in population: 215.4162672001469
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 8
Genome diversity (% unique Plush genomes):	 0.82
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 8
Syntactic diversity (% unique Push programs):	 0.82
Total error diversity:				 0.083
Error (vector) diversity:			 0.093
Behavioral diversity:				 0.095
--- Run Statistics ---
Number of program evaluations used so far: 153000
Number of point (instruction) evaluations so far: 284077134
--- Timings ---
Current time: 1529615415821 milliseconds
Total Time:         560.8 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       202.4 seconds, 36.1%
Fitness Testing:    279.1 seconds, 49.8%
Report:              79.1 seconds, 14.1%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 152
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 153
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 153
;;******************************
;; -*- Number IO problem report - generation 153
Test total error for best: 59131.0
Test mean error for best: 29.56550
;;------------------------------
Outputs of best individual on training cases:
Correct output: 1.9526623133   | Program output: -32.0473376867
Correct output: -70.8009773522 | Program output: 8.1990226478  
Correct output: -13.7839009431 | Program output: 77.2160990569 
Correct output: 143.8727406396 | Program output: 94.8727406396 
Correct output: 136.4396027174 | Program output: 69.4396027174 
Correct output: 18.5044280613  | Program output: 116.5044280613
Correct output: 92.0568646792  | Program output: 66.0568646792 
Correct output: 71.8873476205  | Program output: 121.8873476205
Correct output: -10.8388749243 | Program output: -46.8388749243
Correct output: 0.9299825981   | Program output: 73.9299825981 
Correct output: -26.7840412284 | Program output: -26.7840412284
Correct output: -102.1264221267 | Program output: -72.1264221267
Correct output: 40.8061668642  | Program output: 48.8061668642 
Correct output: -5.2544966331  | Program output: -11.2544966331
Correct output: 102.9855886244 | Program output: 59.9855886244 
Correct output: -118.0507723766 | Program output: -61.0507723766
Correct output: 55.9371769928  | Program output: 76.9371769928 
Correct output: 4.2657989984   | Program output: 29.2657989984 
Correct output: 96.7057987603  | Program output: 114.7057987603
Correct output: 122.162446611  | Program output: 107.162446611 
Correct output: 30.0102027945  | Program output: 1.0102027945  
Correct output: 104.5822387035 | Program output: 99.5822387035 
Correct output: -1.5538743366  | Program output: -48.5538743366
Correct output: 166.8070496115 | Program output: 93.8070496115 
Correct output: 58.6188945281  | Program output: 98.6188945281 
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction in1} {:instruction integer_max} {:instruction float_dup_items} {:instruction integer_sub} {:instruction integer_max} {:instruction integer_dup_items} {:instruction integer_sub} {:instruction integer_mod} {:instruction integer_div} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_inc} {:instruction integer_div} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_rot} {:instruction float_inc} {:instruction integer_mod} {:instruction float_inc} {:instruction float_div} {:instruction float_inc} {:instruction float_max} {:instruction float_inc} {:instruction float_inc} {:instruction float_div} {:instruction float_yankdup} {:instruction float_inc} {:instruction float_inc} {:instruction float_dup_times} {:instruction float_inc} {:instruction float_div} {:instruction float_inc} {:instruction integer_flush} {:instruction float_inc} {:instruction float_rot} {:instruction float_inc} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_div} {:instruction float_inc} {:instruction float_mult} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_inc} {:instruction integer_swap} {:instruction float_inc} {:instruction integer_mod} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_yank} {:instruction float_inc} {:instruction print_float} {:instruction float_yankdup} {:instruction float_inc} {:instruction integer_mod} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_yank} {:instruction print_float} {:instruction float_flush} {:instruction float_flush} {:instruction integer_dec} {:instruction float_inc} {:instruction float_yankdup} {:instruction -43} {:instruction tag_float_780} {:instruction float_add} {:instruction float_max} {:instruction float_frominteger} {:instruction integer_yank} {:instruction float_dup_items} {:instruction float_flush} {:instruction integer_shove} {:instruction integer_dup_times} {:instruction integer_stackdepth} {:instruction tag_float_856} {:instruction float_mult} {:instruction float_mult})
Best program: (in1 integer_max float_dup_items integer_sub integer_max integer_dup_items integer_sub integer_mod integer_div float_inc float_yankdup float_inc integer_div float_inc float_yankdup float_rot float_inc integer_mod float_inc float_div float_inc float_max float_inc float_inc float_div float_yankdup float_inc float_inc float_dup_times float_inc float_div float_inc integer_flush float_inc float_rot float_inc float_inc float_yankdup float_div float_inc float_mult float_inc float_yankdup float_inc float_yankdup float_inc integer_swap float_inc integer_mod float_inc float_inc float_inc float_yank float_inc print_float float_yankdup float_inc integer_mod float_inc float_inc float_inc float_yank print_float float_flush float_flush integer_dec float_inc float_yankdup -43 tag_float_780 float_add float_max float_frominteger integer_yank float_dup_items float_flush integer_shove integer_dup_times integer_stackdepth tag_float_856 float_mult float_mult)
Errors: [34.0 13 79.0 13 91.0 12 49.0 2 67.0 3 98.0 2 26.0 2 50.0 2 36.0 2 73.0 2 0.0 0 30.0 2 8.0 1 6.0 2 43.0 3 57.0 2 21.0 2 25.0 2 18.0 3 15.0 2 29.0 2 5.0 3 47.0 2 73.0 3 40.0 1]
Total: 1103.0
Mean: 22.06
Genome size: 82
Size: 83
Percent parens: 0.012
--- Population Statistics ---
Average total errors in population: 2958.125707700001
Median total errors in population: 1103.0
Error averages by case: (105.87012650000003 12.754 144.93116729999997 12.794 157.1722917 12.067 124.41374230000004 3.535 139.69259150000005 4.157 162.54133240000002 3.255 101.79263450000002 3.262 122.75553400000005 3.482 108.60709320000004 3.323 140.7206518 3.155 77.89604570000003 1.971 107.6354164 3.744 83.42967040000003 2.459 79.2794364 3.173 117.23146340000001 4.19 131.73916189999994 3.737 95.5328807 3.189 95.86406799999997 3.171 94.97320810000002 4.129 93.8939484 3.286 97.56254489999998 4.002 84.37100620000004 4.008 117.47826289999999 3.253 146.36267790000005 4.222 113.28775120000003 2.773)
Error minima by case: (0.7787 7 7.4523 1 15.7674 9 22.8727 2 2.4396 2 0.4541 1 3.8961 1 10.1998 2 8.3154 1 0.8771 1 0.0 0 2.518 2 0.0 0 0.0 0 2.9856 2 4.0508 2 2.0 1 0.4438 1 2.0 1 4.0 1 5.8522 1 0.0 0 1.3983 1 2.193 2 7.482 1)
Average genome size in population (length): 63.926
Average program size in population (points): 64.926
Average percent parens in population: 0.016
Minimum age in population: 214.3783764884956
Maximum age in population: 218.866485702771
Average age in population: 216.7922158830464
Median age in population: 216.8194652711701
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 7
Genome diversity (% unique Plush genomes):	 0.802
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 7
Syntactic diversity (% unique Push programs):	 0.802
Total error diversity:				 0.085
Error (vector) diversity:			 0.094
Behavioral diversity:				 0.095
--- Run Statistics ---
Number of program evaluations used so far: 154000
Number of point (instruction) evaluations so far: 285675309
--- Timings ---
Current time: 1529615419323 milliseconds
Total Time:         564.1 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       203.7 seconds, 36.1%
Fitness Testing:    280.8 seconds, 49.8%
Report:              79.5 seconds, 14.1%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 153
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 154
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 154
;;******************************
;; -*- Number IO problem report - generation 154
Test total error for best: 59131.0
Test mean error for best: 29.56550
;;------------------------------
Outputs of best individual on training cases:
Correct output: 1.9526623133   | Program output: -32.0473376867
Correct output: -70.8009773522 | Program output: 8.1990226478  
Correct output: -13.7839009431 | Program output: 77.2160990569 
Correct output: 143.8727406396 | Program output: 94.8727406396 
Correct output: 136.4396027174 | Program output: 69.4396027174 
Correct output: 18.5044280613  | Program output: 116.5044280613
Correct output: 92.0568646792  | Program output: 66.0568646792 
Correct output: 71.8873476205  | Program output: 121.8873476205
Correct output: -10.8388749243 | Program output: -46.8388749243
Correct output: 0.9299825981   | Program output: 73.9299825981 
Correct output: -26.7840412284 | Program output: -26.7840412284
Correct output: -102.1264221267 | Program output: -72.1264221267
Correct output: 40.8061668642  | Program output: 48.8061668642 
Correct output: -5.2544966331  | Program output: -11.2544966331
Correct output: 102.9855886244 | Program output: 59.9855886244 
Correct output: -118.0507723766 | Program output: -61.0507723766
Correct output: 55.9371769928  | Program output: 76.9371769928 
Correct output: 4.2657989984   | Program output: 29.2657989984 
Correct output: 96.7057987603  | Program output: 114.7057987603
Correct output: 122.162446611  | Program output: 107.162446611 
Correct output: 30.0102027945  | Program output: 1.0102027945  
Correct output: 104.5822387035 | Program output: 99.5822387035 
Correct output: -1.5538743366  | Program output: -48.5538743366
Correct output: 166.8070496115 | Program output: 93.8070496115 
Correct output: 58.6188945281  | Program output: 98.6188945281 
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction in1} {:instruction integer_max} {:instruction integer_dup_items} {:instruction integer_max} {:instruction integer_sub} {:instruction float_yank} {:instruction integer_yankdup} {:instruction float_inc} {:instruction integer_pop} {:instruction float_inc} {:instruction integer_shove} {:instruction float_inc} {:instruction float_div} {:instruction float_inc} {:instruction integer_dec} {:instruction print_integer} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_inc} {:instruction float_inc} {:instruction integer_inc} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_inc} {:instruction float_div} {:instruction float_inc} {:instruction float_inc} {:instruction integer_dup} {:instruction float_inc} {:instruction tag_integer_979} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_inc} {:instruction integer_dup} {:instruction integer_min} {:instruction float_yankdup} {:instruction float_div} {:instruction float_dup_times} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_inc} {:instruction print_integer} {:instruction float_inc} {:instruction float_mult} {:instruction float_max} {:instruction float_div} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_dup_items} {:instruction float_inc} {:instruction float_inc} {:instruction float_mult} {:instruction integer_max} {:instruction float_sub} {:instruction float_inc} {:instruction float_inc} {:instruction float_swap} {:instruction float_inc} {:instruction integer_swap} {:instruction print_float} {:instruction float_flush} {:instruction integer_stackdepth} {:instruction integer_stackdepth} {:instruction integer_dup_items} {:instruction integer_dup} {:instruction in2} {:instruction print_float} {:instruction float_pop} {:instruction float_dup_items} {:instruction integer_shove})
Best program: (in1 integer_max integer_dup_items integer_max integer_sub float_yank integer_yankdup float_inc integer_pop float_inc integer_shove float_inc float_div float_inc integer_dec print_integer float_inc float_yankdup float_inc float_inc integer_inc float_inc float_yankdup float_inc float_yankdup float_inc float_div float_inc float_inc integer_dup float_inc tag_integer_979 float_inc float_yankdup float_inc integer_dup integer_min float_yankdup float_div float_dup_times float_inc float_yankdup float_inc print_integer float_inc float_mult float_max float_div float_inc float_yankdup float_dup_items float_inc float_inc float_mult integer_max float_sub float_inc float_inc float_swap float_inc integer_swap print_float float_flush integer_stackdepth integer_stackdepth integer_dup_items integer_dup in2 print_float float_pop float_dup_items integer_shove)
Errors: [34.0 13 79.0 13 91.0 12 49.0 2 67.0 3 98.0 2 26.0 2 50.0 2 36.0 2 73.0 2 0.0 0 30.0 2 8.0 1 6.0 2 43.0 3 57.0 2 21.0 2 25.0 2 18.0 3 15.0 2 29.0 2 5.0 3 47.0 2 73.0 3 40.0 1]
Total: 1103.0
Mean: 22.06
Genome size: 72
Size: 73
Percent parens: 0.014
--- Population Statistics ---
Average total errors in population: 2825.4986809
Median total errors in population: 1103.0
Error averages by case: (102.62984140000005 12.722 136.2900758000001 12.78 149.4749475 12.017 119.37662420000007 3.56 134.3698324 4.184 155.1727889 3.251 96.34309329999996 3.275 116.59776340000002 3.489 105.13223040000001 3.402 132.93238580000008 3.201 75.47129159999999 2.01 105.07691109999995 3.771 77.15001440000003 2.501 76.62493660000001 3.234 111.63679720000002 4.191 129.24934079999989 3.777 89.58563330000003 3.205 85.4759378 3.216 91.31931639999998 4.147 90.59124810000003 3.293 89.61410329999998 4.035 80.03310950000001 4.003 114.09356689999997 3.292 141.4419809 4.223 106.22690990000005 2.809)
Error minima by case: (0.1044 8 4.9611 1 2.7114 8 34.8727 1 8.5604 2 0.4642 1 17.0 1 24.0389 2 6.6443 1 1.0389 1 0.0 0 8.0 2 0.0 0 0.0 0 5.9856 2 15.0508 2 1.0 1 0.8709 1 1.0 1 6.0 1 4.0102 1 0.0 0 0.6771 1 9.807 2 18.0 1)
Average genome size in population (length): 63.788
Average program size in population (points): 64.788
Average percent parens in population: 0.016
Minimum age in population: 215.4177659243798
Maximum age in population: 220.711397843304
Average age in population: 218.1766093237508
Median age in population: 218.2267030447973
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 7
Genome diversity (% unique Plush genomes):	 0.817
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 7
Syntactic diversity (% unique Push programs):	 0.817
Total error diversity:				 0.094
Error (vector) diversity:			 0.103
Behavioral diversity:				 0.104
--- Run Statistics ---
Number of program evaluations used so far: 155000
Number of point (instruction) evaluations so far: 287270009
--- Timings ---
Current time: 1529615422832 milliseconds
Total Time:         567.7 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       205.0 seconds, 36.1%
Fitness Testing:    282.4 seconds, 49.8%
Report:              80.1 seconds, 14.1%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 154
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 155
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 155
;;******************************
;; -*- Number IO problem report - generation 155
Test total error for best: 59131.0
Test mean error for best: 29.56550
;;------------------------------
Outputs of best individual on training cases:
Correct output: 1.9526623133   | Program output: -32.0473376867
Correct output: -70.8009773522 | Program output: 8.1990226478  
Correct output: -13.7839009431 | Program output: 77.2160990569 
Correct output: 143.8727406396 | Program output: 94.8727406396 
Correct output: 136.4396027174 | Program output: 69.4396027174 
Correct output: 18.5044280613  | Program output: 116.5044280613
Correct output: 92.0568646792  | Program output: 66.0568646792 
Correct output: 71.8873476205  | Program output: 121.8873476205
Correct output: -10.8388749243 | Program output: -46.8388749243
Correct output: 0.9299825981   | Program output: 73.9299825981 
Correct output: -26.7840412284 | Program output: -26.7840412284
Correct output: -102.1264221267 | Program output: -72.1264221267
Correct output: 40.8061668642  | Program output: 48.8061668642 
Correct output: -5.2544966331  | Program output: -11.2544966331
Correct output: 102.9855886244 | Program output: 59.9855886244 
Correct output: -118.0507723766 | Program output: -61.0507723766
Correct output: 55.9371769928  | Program output: 76.9371769928 
Correct output: 4.2657989984   | Program output: 29.2657989984 
Correct output: 96.7057987603  | Program output: 114.7057987603
Correct output: 122.162446611  | Program output: 107.162446611 
Correct output: 30.0102027945  | Program output: 1.0102027945  
Correct output: 104.5822387035 | Program output: 99.5822387035 
Correct output: -1.5538743366  | Program output: -48.5538743366
Correct output: 166.8070496115 | Program output: 93.8070496115 
Correct output: 58.6188945281  | Program output: 98.6188945281 
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction in1} {:instruction float_sub} {:instruction integer_max} {:instruction integer_mod} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_inc} {:instruction integer_dup} {:instruction float_inc} {:instruction float_inc} {:instruction integer_mod} {:instruction float_inc} {:instruction integer_yankdup} {:instruction float_inc} {:instruction float_inc} {:instruction integer_min} {:instruction float_div} {:instruction float_inc} {:instruction float_yankdup} {:instruction integer_min} {:instruction float_div} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_inc} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_div} {:instruction float_inc} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_inc} {:instruction float_yankdup} {:instruction integer_dup_times} {:instruction float_dup_items} {:instruction float_dup_times} {:instruction float_inc} {:instruction float_swap} {:instruction float_dup_items} {:instruction float_div} {:instruction float_inc} {:instruction float_sub} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_yankdup} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_inc} {:instruction integer_mod} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_swap} {:instruction float_inc} {:instruction integer_flush} {:instruction print_float})
Best program: (in1 float_sub integer_max integer_mod float_inc float_yankdup float_inc integer_dup float_inc float_inc integer_mod float_inc integer_yankdup float_inc float_inc integer_min float_div float_inc float_yankdup integer_min float_div float_inc float_yankdup float_inc float_yankdup float_inc float_inc float_yankdup float_div float_inc float_inc float_yankdup float_inc float_yankdup integer_dup_times float_dup_items float_dup_times float_inc float_swap float_dup_items float_div float_inc float_sub float_inc float_yankdup float_yankdup float_inc float_yankdup float_inc integer_mod float_inc float_inc float_inc integer_swap float_inc integer_flush print_float)
Errors: [34.0 13 79.0 13 91.0 12 49.0 2 67.0 3 98.0 2 26.0 2 50.0 2 36.0 2 73.0 2 0.0 0 30.0 2 8.0 1 6.0 2 43.0 3 57.0 2 21.0 2 25.0 2 18.0 3 15.0 2 29.0 2 5.0 3 47.0 2 73.0 3 40.0 1]
Total: 1103.0
Mean: 22.06
Genome size: 57
Size: 58
Percent parens: 0.017
--- Population Statistics ---
Average total errors in population: 2568.026258700001
Median total errors in population: 1103.0
Error averages by case: (89.3870193 12.757 133.53357570000003 12.764 142.1478579 12.026 108.62757760000004 3.433 124.07412159999998 4.056 147.24298339999999 3.112 85.445072 3.141 107.3043212 3.363 91.9132162 3.23 125.41370180000007 3.083 61.5966779 1.867 93.0124458 3.644 66.5712794 2.354 64.19953730000002 3.084 101.00151300000002 4.056 117.60914979999998 3.645 78.76193370000001 3.043 82.20040979999997 3.049 78.39448619999999 3.981 77.46897 3.155 83.8899333 3.928 67.74193450000001 3.841 101.11751369999998 3.179 131.0754291 4.091 97.7135985 2.7)
Error minima by case: (0.5178 8 15.801 1 15.7674 8 23.8727 2 10.5604 2 0.4347 1 16.0 1 11.1868 2 11.9826 1 0.8771 1 0.0 0 6.0 2 0.0 0 0.0 0 3.9856 2 17.0508 2 0.0 0 1.0 1 1.0 1 5.0 1 2.1695 1 0.0 0 2.5935 1 1.193 2 2.0817 1)
Average genome size in population (length): 63.697
Average program size in population (points): 64.697
Average percent parens in population: 0.016
Minimum age in population: 216.9035855654733
Maximum age in population: 221.7875710885205
Average age in population: 219.5978552171118
Median age in population: 219.642132834095
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 8
Genome diversity (% unique Plush genomes):	 0.821
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 8
Syntactic diversity (% unique Push programs):	 0.821
Total error diversity:				 0.082
Error (vector) diversity:			 0.091
Behavioral diversity:				 0.092
--- Run Statistics ---
Number of program evaluations used so far: 156000
Number of point (instruction) evaluations so far: 288862459
--- Timings ---
Current time: 1529615426206 milliseconds
Total Time:         571.1 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       206.4 seconds, 36.1%
Fitness Testing:    284.1 seconds, 49.7%
Report:              80.6 seconds, 14.1%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 155
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 156
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 156
;;******************************
;; -*- Number IO problem report - generation 156
Test total error for best: 59131.0
Test mean error for best: 29.56550
;;------------------------------
Outputs of best individual on training cases:
Correct output: 1.9526623133   | Program output: -32.0473376867
Correct output: -70.8009773522 | Program output: 8.1990226478  
Correct output: -13.7839009431 | Program output: 77.2160990569 
Correct output: 143.8727406396 | Program output: 94.8727406396 
Correct output: 136.4396027174 | Program output: 69.4396027174 
Correct output: 18.5044280613  | Program output: 116.5044280613
Correct output: 92.0568646792  | Program output: 66.0568646792 
Correct output: 71.8873476205  | Program output: 121.8873476205
Correct output: -10.8388749243 | Program output: -46.8388749243
Correct output: 0.9299825981   | Program output: 73.9299825981 
Correct output: -26.7840412284 | Program output: -26.7840412284
Correct output: -102.1264221267 | Program output: -72.1264221267
Correct output: 40.8061668642  | Program output: 48.8061668642 
Correct output: -5.2544966331  | Program output: -11.2544966331
Correct output: 102.9855886244 | Program output: 59.9855886244 
Correct output: -118.0507723766 | Program output: -61.0507723766
Correct output: 55.9371769928  | Program output: 76.9371769928 
Correct output: 4.2657989984   | Program output: 29.2657989984 
Correct output: 96.7057987603  | Program output: 114.7057987603
Correct output: 122.162446611  | Program output: 107.162446611 
Correct output: 30.0102027945  | Program output: 1.0102027945  
Correct output: 104.5822387035 | Program output: 99.5822387035 
Correct output: -1.5538743366  | Program output: -48.5538743366
Correct output: 166.8070496115 | Program output: 93.8070496115 
Correct output: 58.6188945281  | Program output: 98.6188945281 
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction in1} {:instruction integer_max} {:instruction integer_div} {:instruction integer_sub} {:instruction integer_rot} {:instruction print_integer} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_rot} {:instruction float_inc} {:instruction float_inc} {:instruction integer_yank} {:instruction float_inc} {:instruction integer_max} {:instruction float_div} {:instruction float_inc} {:instruction integer_flush} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_inc} {:instruction tagged_125} {:instruction float_inc} {:instruction float_mult} {:instruction float_inc} {:instruction float_rot} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_div} {:instruction float_rot} {:instruction float_div} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_dup_items} {:instruction float_mult} {:instruction float_dup_times} {:instruction float_div} {:instruction float_inc} {:instruction float_mult} {:instruction integer_yank} {:instruction float_div} {:instruction integer_swap} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_mod} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_mult} {:instruction float_inc} {:instruction integer_flush} {:instruction print_float})
Best program: (in1 integer_max integer_div integer_sub integer_rot print_integer float_inc float_yankdup float_inc float_inc float_inc float_rot float_inc float_inc integer_yank float_inc integer_max float_div float_inc integer_flush float_inc float_yankdup float_inc tagged_125 float_inc float_mult float_inc float_rot float_inc float_inc float_inc float_div float_rot float_div float_inc float_yankdup float_dup_items float_mult float_dup_times float_div float_inc float_mult integer_yank float_div integer_swap float_inc float_inc float_inc integer_mod float_inc float_inc float_inc float_mult float_inc integer_flush print_float)
Errors: [34.0 13 79.0 13 91.0 12 49.0 2 67.0 3 98.0 2 26.0 2 50.0 2 36.0 2 73.0 2 0.0 0 30.0 2 8.0 1 6.0 2 43.0 3 57.0 2 21.0 2 25.0 2 18.0 3 15.0 2 29.0 2 5.0 3 47.0 2 73.0 3 40.0 1]
Total: 1103.0
Mean: 22.06
Genome size: 56
Size: 57
Percent parens: 0.018
--- Population Statistics ---
Average total errors in population: 2635.3604201999997
Median total errors in population: 1103.0
Error averages by case: (94.23060250000006 12.803 133.22482960000005 12.839 145.02180930000003 12.061 110.33186070000004 3.31 126.07685389999997 3.963 152.171838 3.025 87.75558469999999 3.038 111.07732920000004 3.239 96.81422500000004 3.096 128.32061620000005 2.947 65.1801584 1.682 95.28800389999998 3.457 69.3540312 2.209 67.78673850000001 2.981 103.302423 3.979 119.90393309999999 3.48 80.6531124 2.966 83.52982530000003 2.969 81.54629760000003 3.92 81.06347119999997 3.066 84.99139140000001 3.846 70.61632010000001 3.808 106.43233860000002 3.031 132.60904949999997 4.001 99.82777690000002 2.534)
Error minima by case: (0.7518 7 15.801 1 10.8193 8 8.0923 1 19.5604 2 0.3889 1 14.0569 1 11.2019 2 4.9077 1 0.3897 1 0.0 0 7.0 2 0.0 0 0.0 0 2.0923 2 4.2019 2 2.0 1 1.7372 1 2.0 1 6.0 1 5.0102 1 0.0 0 1.712 1 1.193 2 17.0 1)
Average genome size in population (length): 63.375
Average program size in population (points): 64.375
Average percent parens in population: 0.016
Minimum age in population: 218.3998598583562
Maximum age in population: 223.0440586740137
Average age in population: 221.0121464689284
Median age in population: 221.0346024498829
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 8
Genome diversity (% unique Plush genomes):	 0.799
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 8
Syntactic diversity (% unique Push programs):	 0.799
Total error diversity:				 0.072
Error (vector) diversity:			 0.08
Behavioral diversity:				 0.08
--- Run Statistics ---
Number of program evaluations used so far: 157000
Number of point (instruction) evaluations so far: 290446834
--- Timings ---
Current time: 1529615429564 milliseconds
Total Time:         574.5 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       207.7 seconds, 36.1%
Fitness Testing:    285.7 seconds, 49.7%
Report:              81.0 seconds, 14.1%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 156
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 157
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 157
;;******************************
;; -*- Number IO problem report - generation 157
Test total error for best: 59131.0
Test mean error for best: 29.56550
;;------------------------------
Outputs of best individual on training cases:
Correct output: 1.9526623133   | Program output: -32.0473376867
Correct output: -70.8009773522 | Program output: 8.1990226478  
Correct output: -13.7839009431 | Program output: 77.2160990569 
Correct output: 143.8727406396 | Program output: 94.8727406396 
Correct output: 136.4396027174 | Program output: 69.4396027174 
Correct output: 18.5044280613  | Program output: 116.5044280613
Correct output: 92.0568646792  | Program output: 66.0568646792 
Correct output: 71.8873476205  | Program output: 121.8873476205
Correct output: -10.8388749243 | Program output: -46.8388749243
Correct output: 0.9299825981   | Program output: 73.9299825981 
Correct output: -26.7840412284 | Program output: -26.7840412284
Correct output: -102.1264221267 | Program output: -72.1264221267
Correct output: 40.8061668642  | Program output: 48.8061668642 
Correct output: -5.2544966331  | Program output: -11.2544966331
Correct output: 102.9855886244 | Program output: 59.9855886244 
Correct output: -118.0507723766 | Program output: -61.0507723766
Correct output: 55.9371769928  | Program output: 76.9371769928 
Correct output: 4.2657989984   | Program output: 29.2657989984 
Correct output: 96.7057987603  | Program output: 114.7057987603
Correct output: 122.162446611  | Program output: 107.162446611 
Correct output: 30.0102027945  | Program output: 1.0102027945  
Correct output: 104.5822387035 | Program output: 99.5822387035 
Correct output: -1.5538743366  | Program output: -48.5538743366
Correct output: 166.8070496115 | Program output: 93.8070496115 
Correct output: 58.6188945281  | Program output: 98.6188945281 
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction in1} {:instruction integer_max} {:instruction tagged_55} {:instruction float_shove} {:instruction integer_sub} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_mod} {:instruction float_inc} {:instruction integer_yankdup} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_yank} {:instruction float_inc} {:instruction integer_max} {:instruction integer_mod} {:instruction float_inc} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_inc} {:instruction float_inc} {:instruction integer_dup_times} {:instruction float_div} {:instruction float_inc} {:instruction integer_div} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_inc} {:instruction float_mult} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_inc} {:instruction integer_mod} {:instruction float_inc} {:instruction float_inc} {:instruction float_add} {:instruction integer_max} {:instruction integer_dec} {:instruction float_inc} {:instruction float_inc} {:instruction integer_add} {:instruction integer_max} {:instruction integer_dec} {:instruction float_inc} {:instruction float_inc} {:instruction float_swap} {:instruction float_inc} {:instruction print_float} {:instruction float_dup_items} {:instruction float_div} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc})
Best program: (in1 integer_max tagged_55 float_shove integer_sub float_inc float_inc float_inc integer_mod float_inc integer_yankdup float_inc float_inc float_inc integer_yank float_inc integer_max integer_mod float_inc float_inc float_yankdup float_inc float_inc integer_dup_times float_div float_inc integer_div float_inc float_yankdup float_inc float_mult float_inc float_yankdup float_inc integer_mod float_inc float_inc float_add integer_max integer_dec float_inc float_inc integer_add integer_max integer_dec float_inc float_inc float_swap float_inc print_float float_dup_items float_div float_inc float_inc float_inc float_inc float_inc)
Errors: [34.0 13 79.0 13 91.0 12 49.0 2 67.0 3 98.0 2 26.0 2 50.0 2 36.0 2 73.0 2 0.0 0 30.0 2 8.0 1 6.0 2 43.0 3 57.0 2 21.0 2 25.0 2 18.0 3 15.0 2 29.0 2 5.0 3 47.0 2 73.0 3 40.0 1]
Total: 1103.0
Mean: 22.06
Genome size: 57
Size: 58
Percent parens: 0.017
--- Population Statistics ---
Average total errors in population: 2764.5529537
Median total errors in population: 1103.0
Error averages by case: (97.47953430000003 12.72 134.53302610000006 12.854 148.61971989999998 12.01 118.13818570000002 3.591 133.20138059999996 4.2 153.5061225 3.287 94.80334739999998 3.311 115.19015490000004 3.516 100.04990570000001 3.401 132.17669759999998 3.203 70.42506269999998 2.035 101.47931959999997 3.772 75.6822843 2.527 69.97763090000001 3.222 110.22601069999997 4.211 125.80586189999997 3.782 87.9092039 3.261 86.07988399999998 3.236 88.12154680000002 4.169 87.30819020000001 3.323 86.95898849999999 4.155 77.58774509999999 3.995 109.11860850000002 3.3 140.40647369999994 4.249 105.60306820000002 2.835)
Error minima by case: (0.1762 7 41.2421 1 9.5351 7 36.8727 1 6.5604 2 0.4616 1 16.0 1 28.0 2 6.2421 1 0.0404 1 0.0 0 8.0 2 0.0 0 0.0 0 7.9856 2 13.0508 2 1.0 1 0.1331 1 4.0 1 5.0 1 2.0102 1 0.0 0 0.5935 1 11.807 2 18.0 1)
Average genome size in population (length): 63.106
Average program size in population (points): 64.106
Average percent parens in population: 0.016
Minimum age in population: 219.3998598583562
Maximum age in population: 224.7361797894116
Average age in population: 222.515575987532
Median age in population: 222.5672660023343
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 8
Genome diversity (% unique Plush genomes):	 0.826
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 8
Syntactic diversity (% unique Push programs):	 0.826
Total error diversity:				 0.093
Error (vector) diversity:			 0.103
Behavioral diversity:				 0.104
--- Run Statistics ---
Number of program evaluations used so far: 158000
Number of point (instruction) evaluations so far: 292024534
--- Timings ---
Current time: 1529615432922 milliseconds
Total Time:         577.8 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       209.0 seconds, 36.2%
Fitness Testing:    287.3 seconds, 49.7%
Report:              81.4 seconds, 14.1%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 157
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 158
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 158
;;******************************
;; -*- Number IO problem report - generation 158
Test total error for best: 59131.0
Test mean error for best: 29.56550
;;------------------------------
Outputs of best individual on training cases:
Correct output: 1.9526623133   | Program output: -32.0473376867
Correct output: -70.8009773522 | Program output: 8.1990226478  
Correct output: -13.7839009431 | Program output: 77.2160990569 
Correct output: 143.8727406396 | Program output: 94.8727406396 
Correct output: 136.4396027174 | Program output: 69.4396027174 
Correct output: 18.5044280613  | Program output: 116.5044280613
Correct output: 92.0568646792  | Program output: 66.0568646792 
Correct output: 71.8873476205  | Program output: 121.8873476205
Correct output: -10.8388749243 | Program output: -46.8388749243
Correct output: 0.9299825981   | Program output: 73.9299825981 
Correct output: -26.7840412284 | Program output: -26.7840412284
Correct output: -102.1264221267 | Program output: -72.1264221267
Correct output: 40.8061668642  | Program output: 48.8061668642 
Correct output: -5.2544966331  | Program output: -11.2544966331
Correct output: 102.9855886244 | Program output: 59.9855886244 
Correct output: -118.0507723766 | Program output: -61.0507723766
Correct output: 55.9371769928  | Program output: 76.9371769928 
Correct output: 4.2657989984   | Program output: 29.2657989984 
Correct output: 96.7057987603  | Program output: 114.7057987603
Correct output: 122.162446611  | Program output: 107.162446611 
Correct output: 30.0102027945  | Program output: 1.0102027945  
Correct output: 104.5822387035 | Program output: 99.5822387035 
Correct output: -1.5538743366  | Program output: -48.5538743366
Correct output: 166.8070496115 | Program output: 93.8070496115 
Correct output: 58.6188945281  | Program output: 98.6188945281 
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction in1} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_inc} {:instruction float_dup_items} {:instruction float_inc} {:instruction float_inc} {:instruction integer_dec} {:instruction tagged_646} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_inc} {:instruction float_inc} {:instruction float_div} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_inc} {:instruction float_div} {:instruction float_inc} {:instruction integer_flush} {:instruction float_inc} {:instruction integer_dup} {:instruction float_inc} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_inc} {:instruction integer_pop} {:instruction float_inc} {:instruction integer_pop} {:instruction float_yank} {:instruction integer_mult} {:instruction float_div} {:instruction float_inc} {:instruction float_inc} {:instruction integer_yank} {:instruction float_dup_items} {:instruction float_yankdup} {:instruction float_inc} {:instruction float_inc} {:instruction integer_mod} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_yank} {:instruction float_inc} {:instruction integer_mult} {:instruction print_float} {:instruction float_pop} {:instruction integer_swap})
Best program: (in1 float_inc float_yankdup float_inc float_dup_items float_inc float_inc integer_dec tagged_646 float_inc float_yankdup float_inc float_inc float_div float_inc float_yankdup float_inc float_yankdup float_inc float_div float_inc integer_flush float_inc integer_dup float_inc float_inc float_yankdup float_inc integer_pop float_inc integer_pop float_yank integer_mult float_div float_inc float_inc integer_yank float_dup_items float_yankdup float_inc float_inc integer_mod float_inc float_inc float_inc float_yank float_inc integer_mult print_float float_pop integer_swap)
Errors: [34.0 13 79.0 13 91.0 12 49.0 2 67.0 3 98.0 2 26.0 2 50.0 2 36.0 2 73.0 2 0.0 0 30.0 2 8.0 1 6.0 2 43.0 3 57.0 2 21.0 2 25.0 2 18.0 3 15.0 2 29.0 2 5.0 3 47.0 2 73.0 3 40.0 1]
Total: 1103.0
Mean: 22.06
Genome size: 51
Size: 52
Percent parens: 0.019
--- Population Statistics ---
Average total errors in population: 2591.7005259000002
Median total errors in population: 1103.0
Error averages by case: (91.3275951 12.711 128.9228066000001 12.763 143.0911287 12.023 111.02806330000003 3.402 126.4148084 4.03 148.08316820000002 3.109 87.78145449999998 3.111 108.43599300000002 3.348 93.78015070000004 3.236 126.36824850000008 3.035 63.7370547 1.877 94.49041700000001 3.63 68.42656939999999 2.329 64.079155 3.095 103.34943689999999 4.028 119.15008250000001 3.622 79.8289623 3.042 77.1870255 3.05 80.65765300000001 3.998 79.84801559999998 3.135 80.06609580000003 4.005 70.1336616 3.831 102.9308269 3.163 133.41249199999996 4.05 98.89866070000004 2.648)
Error minima by case: (0.0473 7 28.6416 1 13.3419 8 37.8727 1 5.5604 2 0.5143 1 17.0 1 5.0449 2 0.6577 1 0.063 1 0.0 0 6.0 2 0.0 0 0.0 0 8.9856 2 12.0508 2 2.0 1 0.1291 1 0.0 0 6.0 1 2.1842 1 0.0 0 0.1075 1 12.807 2 8.2235 1)
Average genome size in population (length): 62.725
Average program size in population (points): 63.725
Average percent parens in population: 0.016
Minimum age in population: 221.5866922074178
Maximum age in population: 225.91315269361
Average age in population: 223.9362296285267
Median age in population: 223.9968988927932
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 9
Genome diversity (% unique Plush genomes):	 0.827
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 9
Syntactic diversity (% unique Push programs):	 0.827
Total error diversity:				 0.092
Error (vector) diversity:			 0.1
Behavioral diversity:				 0.1
--- Run Statistics ---
Number of program evaluations used so far: 159000
Number of point (instruction) evaluations so far: 293592734
--- Timings ---
Current time: 1529615436278 milliseconds
Total Time:         581.2 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       210.3 seconds, 36.2%
Fitness Testing:    288.9 seconds, 49.7%
Report:              81.9 seconds, 14.1%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 158
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 159
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 159
;;******************************
;; -*- Number IO problem report - generation 159
Test total error for best: 59131.0
Test mean error for best: 29.56550
;;------------------------------
Outputs of best individual on training cases:
Correct output: 1.9526623133   | Program output: -32.0473376867
Correct output: -70.8009773522 | Program output: 8.1990226478  
Correct output: -13.7839009431 | Program output: 77.2160990569 
Correct output: 143.8727406396 | Program output: 94.8727406396 
Correct output: 136.4396027174 | Program output: 69.4396027174 
Correct output: 18.5044280613  | Program output: 116.5044280613
Correct output: 92.0568646792  | Program output: 66.0568646792 
Correct output: 71.8873476205  | Program output: 121.8873476205
Correct output: -10.8388749243 | Program output: -46.8388749243
Correct output: 0.9299825981   | Program output: 73.9299825981 
Correct output: -26.7840412284 | Program output: -26.7840412284
Correct output: -102.1264221267 | Program output: -72.1264221267
Correct output: 40.8061668642  | Program output: 48.8061668642 
Correct output: -5.2544966331  | Program output: -11.2544966331
Correct output: 102.9855886244 | Program output: 59.9855886244 
Correct output: -118.0507723766 | Program output: -61.0507723766
Correct output: 55.9371769928  | Program output: 76.9371769928 
Correct output: 4.2657989984   | Program output: 29.2657989984 
Correct output: 96.7057987603  | Program output: 114.7057987603
Correct output: 122.162446611  | Program output: 107.162446611 
Correct output: 30.0102027945  | Program output: 1.0102027945  
Correct output: 104.5822387035 | Program output: 99.5822387035 
Correct output: -1.5538743366  | Program output: -48.5538743366
Correct output: 166.8070496115 | Program output: 93.8070496115 
Correct output: 58.6188945281  | Program output: 98.6188945281 
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction in1} {:instruction integer_max} {:instruction integer_dup_items} {:instruction integer_yank} {:instruction integer_sub} {:instruction float_yank} {:instruction integer_dup} {:instruction integer_dup_times} {:instruction float_sub} {:instruction float_yankdup} {:instruction float_inc} {:instruction float_sub} {:instruction float_inc} {:instruction float_dup_items} {:instruction float_inc} {:instruction float_inc} {:instruction integer_dec} {:instruction float_div} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_inc} {:instruction float_inc} {:instruction integer_min} {:instruction float_div} {:instruction float_inc} {:instruction integer_dup} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_inc} {:instruction float_inc} {:instruction float_yankdup} {:instruction integer_pop} {:instruction float_inc} {:instruction integer_div} {:instruction float_inc} {:instruction integer_inc} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_inc} {:instruction float_yankdup} {:instruction tagged_506} {:instruction float_dup_items} {:instruction float_dup_times} {:instruction float_inc} {:instruction float_inc} {:instruction integer_mod} {:instruction float_inc} {:instruction float_inc} {:instruction float_add} {:instruction float_inc} {:instruction float_inc} {:instruction float_add} {:instruction print_integer} {:instruction integer_mod} {:instruction float_inc} {:instruction float_inc} {:instruction float_mult} {:instruction float_yank} {:instruction float_inc} {:instruction float_yankdup} {:instruction in2} {:instruction print_float})
Best program: (in1 integer_max integer_dup_items integer_yank integer_sub float_yank integer_dup integer_dup_times float_sub float_yankdup float_inc float_sub float_inc float_dup_items float_inc float_inc integer_dec float_div float_inc float_yankdup float_inc float_inc integer_min float_div float_inc integer_dup float_inc float_yankdup float_inc float_inc float_yankdup integer_pop float_inc integer_div float_inc integer_inc float_inc float_yankdup float_inc float_yankdup tagged_506 float_dup_items float_dup_times float_inc float_inc integer_mod float_inc float_inc float_add float_inc float_inc float_add print_integer integer_mod float_inc float_inc float_mult float_yank float_inc float_yankdup in2 print_float)
Errors: [34.0 13 79.0 13 91.0 12 49.0 2 67.0 3 98.0 2 26.0 2 50.0 2 36.0 2 73.0 2 0.0 0 30.0 2 8.0 1 6.0 2 43.0 3 57.0 2 21.0 2 25.0 2 18.0 3 15.0 2 29.0 2 5.0 3 47.0 2 73.0 3 40.0 1]
Total: 1103.0
Mean: 22.06
Genome size: 62
Size: 63
Percent parens: 0.016
--- Population Statistics ---
Average total errors in population: 2482.6531598
Median total errors in population: 1103.0
Error averages by case: (87.51008350000001 12.766 125.32563199999998 12.705 138.8656073 12.011 105.76801940000001 3.307 121.25032449999999 3.926 144.8668142 2.999 82.64912609999999 3.041 104.76969840000002 3.272 89.94622129999999 3.086 122.05018900000007 2.969 59.41043159999999 1.755 89.66325979999999 3.48 63.6063843 2.224 61.69433820000001 2.937 98.25552959999997 3.935 114.24441549999997 3.513 74.6258458 2.933 75.14456440000001 2.968 76.57781819999997 3.901 75.5624208 3.047 76.1873992 3.95 64.97295319999999 3.728 99.31226230000001 3.032 128.14184780000002 3.949 94.2189734 2.599)
Error minima by case: (2.0441 7 9.4217 1 15.965 8 27.8727 2 4.4396 2 0.4347 1 14.0 1 31.0 2 9.6908 1 1.6075 1 0.0 0 11.0 2 0.0 0 0.0 0 1.0144 2 2.0508 2 2.0 1 0.5316 1 0.0 0 3.0 1 2.5099 1 0.0 0 3.8005 1 2.807 2 21.0 1)
Average genome size in population (length): 62.752
Average program size in population (points): 63.752
Average percent parens in population: 0.016
Minimum age in population: 222.5866922074178
Maximum age in population: 227.2578048807319
Average age in population: 225.3706455201817
Median age in population: 225.4224226232612
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 11
Genome diversity (% unique Plush genomes):	 0.83
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 11
Syntactic diversity (% unique Push programs):	 0.83
Total error diversity:				 0.092
Error (vector) diversity:			 0.1
Behavioral diversity:				 0.101
--- Run Statistics ---
Number of program evaluations used so far: 160000
Number of point (instruction) evaluations so far: 295161559
--- Timings ---
Current time: 1529615439687 milliseconds
Total Time:         584.6 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       211.6 seconds, 36.2%
Fitness Testing:    290.6 seconds, 49.7%
Report:              82.3 seconds, 14.1%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 159
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 160
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 160
;;******************************
;; -*- Number IO problem report - generation 160
Test total error for best: 59131.0
Test mean error for best: 29.56550
;;------------------------------
Outputs of best individual on training cases:
Correct output: 1.9526623133   | Program output: -32.0473376867
Correct output: -70.8009773522 | Program output: 8.1990226478  
Correct output: -13.7839009431 | Program output: 77.2160990569 
Correct output: 143.8727406396 | Program output: 94.8727406396 
Correct output: 136.4396027174 | Program output: 69.4396027174 
Correct output: 18.5044280613  | Program output: 116.5044280613
Correct output: 92.0568646792  | Program output: 66.0568646792 
Correct output: 71.8873476205  | Program output: 121.8873476205
Correct output: -10.8388749243 | Program output: -46.8388749243
Correct output: 0.9299825981   | Program output: 73.9299825981 
Correct output: -26.7840412284 | Program output: -26.7840412284
Correct output: -102.1264221267 | Program output: -72.1264221267
Correct output: 40.8061668642  | Program output: 48.8061668642 
Correct output: -5.2544966331  | Program output: -11.2544966331
Correct output: 102.9855886244 | Program output: 59.9855886244 
Correct output: -118.0507723766 | Program output: -61.0507723766
Correct output: 55.9371769928  | Program output: 76.9371769928 
Correct output: 4.2657989984   | Program output: 29.2657989984 
Correct output: 96.7057987603  | Program output: 114.7057987603
Correct output: 122.162446611  | Program output: 107.162446611 
Correct output: 30.0102027945  | Program output: 1.0102027945  
Correct output: 104.5822387035 | Program output: 99.5822387035 
Correct output: -1.5538743366  | Program output: -48.5538743366
Correct output: 166.8070496115 | Program output: 93.8070496115 
Correct output: 58.6188945281  | Program output: 98.6188945281 
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction in1} {:instruction integer_max} {:instruction integer_dup_items} {:instruction integer_yank} {:instruction integer_sub} {:instruction float_yank} {:instruction float_sub} {:instruction integer_dup_times} {:instruction float_sub} {:instruction float_yankdup} {:instruction float_inc} {:instruction float_sub} {:instruction float_inc} {:instruction float_dup_items} {:instruction float_inc} {:instruction float_inc} {:instruction integer_dec} {:instruction float_div} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_inc} {:instruction float_inc} {:instruction integer_min} {:instruction float_div} {:instruction float_inc} {:instruction integer_flush} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_inc} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_div} {:instruction float_inc} {:instruction integer_div} {:instruction float_inc} {:instruction tag_integer_979} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_inc} {:instruction integer_yankdup} {:instruction float_dup_items} {:instruction float_dup_times} {:instruction float_inc} {:instruction float_swap} {:instruction float_dup_items} {:instruction float_div} {:instruction float_inc} {:instruction float_sub} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_inc} {:instruction float_yank} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction print_integer} {:instruction float_inc} {:instruction float_yankdup} {:instruction print_float})
Best program: (in1 integer_max integer_dup_items integer_yank integer_sub float_yank float_sub integer_dup_times float_sub float_yankdup float_inc float_sub float_inc float_dup_items float_inc float_inc integer_dec float_div float_inc float_yankdup float_inc float_inc integer_min float_div float_inc integer_flush float_inc float_yankdup float_inc float_inc float_yankdup float_div float_inc integer_div float_inc tag_integer_979 float_inc float_yankdup float_inc integer_yankdup float_dup_items float_dup_times float_inc float_swap float_dup_items float_div float_inc float_sub float_inc float_yankdup float_inc float_yankdup float_inc float_yank float_inc float_inc float_inc print_integer float_inc float_yankdup print_float)
Errors: [34.0 13 79.0 13 91.0 12 49.0 2 67.0 3 98.0 2 26.0 2 50.0 2 36.0 2 73.0 2 0.0 0 30.0 2 8.0 1 6.0 2 43.0 3 57.0 2 21.0 2 25.0 2 18.0 3 15.0 2 29.0 2 5.0 3 47.0 2 73.0 3 40.0 1]
Total: 1103.0
Mean: 22.06
Genome size: 61
Size: 62
Percent parens: 0.016
--- Population Statistics ---
Average total errors in population: 2742.9302986000002
Median total errors in population: 1103.0
Error averages by case: (97.89069700000003 12.738 133.85435070000005 12.777 148.92125980000003 12.024 116.76805169999999 3.434 132.18567729999998 4.078 154.1583552 3.151 93.98882789999998 3.17 114.18049960000002 3.393 100.53089050000003 3.252 132.25592629999994 3.103 69.39933220000002 1.877 98.99042460000003 3.632 75.11607550000001 2.37 69.6086095 3.095 109.35422730000003 4.103 123.41029909999999 3.638 86.92062960000001 3.089 84.70421239999997 3.077 87.0758251 4.059 85.96977110000002 3.19 86.83927780000002 3.959 76.35293579999998 3.924 109.83969179999995 3.16 138.87611040000002 4.127 104.61634040000001 2.702)
Error minima by case: (0.3712 8 22.1309 1 13.7839 8 21.8727 2 3.4396 2 0.095 1 16.0569 1 1.631 2 10.8389 1 0.6427 1 0.0 0 10.0 2 0.0 0 0.0 0 5.0144 2 3.0508 2 1.0 1 1.7342 1 1.0 1 7.0 1 3.0102 1 0.0 0 1.5539 1 1.193 2 14.8994 1)
Average genome size in population (length): 62.217
Average program size in population (points): 63.217
Average percent parens in population: 0.016
Minimum age in population: 224.0323894637941
Maximum age in population: 228.8156783586599
Average age in population: 226.7509938980098
Median age in population: 226.7811853444238
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 10
Genome diversity (% unique Plush genomes):	 0.824
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 10
Syntactic diversity (% unique Push programs):	 0.824
Total error diversity:				 0.081
Error (vector) diversity:			 0.09
Behavioral diversity:				 0.09
--- Run Statistics ---
Number of program evaluations used so far: 161000
Number of point (instruction) evaluations so far: 296716984
--- Timings ---
Current time: 1529615443070 milliseconds
Total Time:         588.0 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       212.9 seconds, 36.2%
Fitness Testing:    292.2 seconds, 49.7%
Report:              82.7 seconds, 14.1%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 160
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 161
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 161
;;******************************
;; -*- Number IO problem report - generation 161
Test total error for best: 59131.0
Test mean error for best: 29.56550
;;------------------------------
Outputs of best individual on training cases:
Correct output: 1.9526623133   | Program output: -32.0473376867
Correct output: -70.8009773522 | Program output: 8.1990226478  
Correct output: -13.7839009431 | Program output: 77.2160990569 
Correct output: 143.8727406396 | Program output: 94.8727406396 
Correct output: 136.4396027174 | Program output: 69.4396027174 
Correct output: 18.5044280613  | Program output: 116.5044280613
Correct output: 92.0568646792  | Program output: 66.0568646792 
Correct output: 71.8873476205  | Program output: 121.8873476205
Correct output: -10.8388749243 | Program output: -46.8388749243
Correct output: 0.9299825981   | Program output: 73.9299825981 
Correct output: -26.7840412284 | Program output: -26.7840412284
Correct output: -102.1264221267 | Program output: -72.1264221267
Correct output: 40.8061668642  | Program output: 48.8061668642 
Correct output: -5.2544966331  | Program output: -11.2544966331
Correct output: 102.9855886244 | Program output: 59.9855886244 
Correct output: -118.0507723766 | Program output: -61.0507723766
Correct output: 55.9371769928  | Program output: 76.9371769928 
Correct output: 4.2657989984   | Program output: 29.2657989984 
Correct output: 96.7057987603  | Program output: 114.7057987603
Correct output: 122.162446611  | Program output: 107.162446611 
Correct output: 30.0102027945  | Program output: 1.0102027945  
Correct output: 104.5822387035 | Program output: 99.5822387035 
Correct output: -1.5538743366  | Program output: -48.5538743366
Correct output: 166.8070496115 | Program output: 93.8070496115 
Correct output: 58.6188945281  | Program output: 98.6188945281 
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction in1} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_inc} {:instruction float_inc} {:instruction tag_integer_29} {:instruction integer_rot} {:instruction float_inc} {:instruction in2} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_rot} {:instruction float_inc} {:instruction float_inc} {:instruction integer_yank} {:instruction float_inc} {:instruction integer_max} {:instruction float_div} {:instruction float_inc} {:instruction integer_flush} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_inc} {:instruction float_div} {:instruction float_inc} {:instruction float_mult} {:instruction float_inc} {:instruction float_rot} {:instruction float_inc} {:instruction float_inc} {:instruction integer_flush} {:instruction float_dup_items} {:instruction float_yank} {:instruction float_inc} {:instruction float_div} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_inc} {:instruction integer_mod} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_min} {:instruction float_inc} {:instruction float_mod} {:instruction print_float} {:instruction float_inc} {:instruction float_yank} {:instruction float_yank} {:instruction integer_dup_items} {:instruction float_inc} {:instruction tagged_239} {:instruction print_float} {:instruction tag_float_711})
Best program: (in1 float_inc float_yankdup float_inc float_inc tag_integer_29 integer_rot float_inc in2 float_inc float_inc float_inc float_rot float_inc float_inc integer_yank float_inc integer_max float_div float_inc integer_flush float_inc float_yankdup float_inc float_div float_inc float_mult float_inc float_rot float_inc float_inc integer_flush float_dup_items float_yank float_inc float_div float_inc float_yankdup float_inc integer_mod float_inc float_inc float_inc integer_min float_inc float_mod print_float float_inc float_yank float_yank integer_dup_items float_inc tagged_239 print_float tag_float_711)
Errors: [34.0 13 79.0 13 91.0 12 49.0 2 67.0 3 98.0 2 26.0 2 50.0 2 36.0 2 73.0 2 0.0 0 30.0 2 8.0 1 6.0 2 43.0 3 57.0 2 21.0 2 25.0 2 18.0 3 15.0 2 29.0 2 5.0 3 47.0 2 73.0 3 40.0 1]
Total: 1103.0
Mean: 22.06
Genome size: 55
Size: 56
Percent parens: 0.018
--- Population Statistics ---
Average total errors in population: 2536.1279201000007
Median total errors in population: 1103.0
Error averages by case: (88.00777290000006 12.707 129.82232080000003 12.825 139.99577810000002 12.007 108.40372870000003 3.442 123.55337749999997 4.062 145.08223909999995 3.164 84.9026232 3.167 106.06021350000002 3.379 90.63713280000002 3.265 123.29932200000002 3.093 60.577533600000024 1.914 91.73442809999997 3.64 65.79511980000001 2.378 61.66524620000002 3.104 100.41525910000001 4.062 116.1781213 3.669 78.3060912 3.089 79.21636979999998 3.087 78.43935079999999 4.053 77.41291420000002 3.174 80.80393449999997 3.941 67.6911145 3.877 99.94063979999996 3.201 130.73481339999995 4.116 96.33147520000004 2.705)
Error minima by case: (0.3931 8 62.199 2 2.5112 9 20.8727 1 3.5604 2 0.3889 1 15.0569 1 32.0054 2 8.5094 1 0.07 1 0.0 0 18.0 2 0.0 0 0.0 0 6.0144 2 10.0508 2 9.0 1 0.2746 1 6.0 2 5.0 1 3.8601 1 0.0 0 1.0623 1 2.193 2 28.0 1)
Average genome size in population (length): 62.302
Average program size in population (points): 63.302
Average percent parens in population: 0.016
Minimum age in population: 225.2875961305326
Maximum age in population: 230.3557496971018
Average age in population: 228.2165234792412
Median age in population: 228.2844436001841
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 12
Genome diversity (% unique Plush genomes):	 0.817
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 12
Syntactic diversity (% unique Push programs):	 0.817
Total error diversity:				 0.089
Error (vector) diversity:			 0.1
Behavioral diversity:				 0.1
--- Run Statistics ---
Number of program evaluations used so far: 162000
Number of point (instruction) evaluations so far: 298274534
--- Timings ---
Current time: 1529615446445 milliseconds
Total Time:         591.4 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       214.2 seconds, 36.2%
Fitness Testing:    293.8 seconds, 49.7%
Report:              83.2 seconds, 14.1%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 161
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 162
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 162
;;******************************
;; -*- Number IO problem report - generation 162
Test total error for best: 59131.0
Test mean error for best: 29.56550
;;------------------------------
Outputs of best individual on training cases:
Correct output: 1.9526623133   | Program output: -32.0473376867
Correct output: -70.8009773522 | Program output: 8.1990226478  
Correct output: -13.7839009431 | Program output: 77.2160990569 
Correct output: 143.8727406396 | Program output: 94.8727406396 
Correct output: 136.4396027174 | Program output: 69.4396027174 
Correct output: 18.5044280613  | Program output: 116.5044280613
Correct output: 92.0568646792  | Program output: 66.0568646792 
Correct output: 71.8873476205  | Program output: 121.8873476205
Correct output: -10.8388749243 | Program output: -46.8388749243
Correct output: 0.9299825981   | Program output: 73.9299825981 
Correct output: -26.7840412284 | Program output: -26.7840412284
Correct output: -102.1264221267 | Program output: -72.1264221267
Correct output: 40.8061668642  | Program output: 48.8061668642 
Correct output: -5.2544966331  | Program output: -11.2544966331
Correct output: 102.9855886244 | Program output: 59.9855886244 
Correct output: -118.0507723766 | Program output: -61.0507723766
Correct output: 55.9371769928  | Program output: 76.9371769928 
Correct output: 4.2657989984   | Program output: 29.2657989984 
Correct output: 96.7057987603  | Program output: 114.7057987603
Correct output: 122.162446611  | Program output: 107.162446611 
Correct output: 30.0102027945  | Program output: 1.0102027945  
Correct output: 104.5822387035 | Program output: 99.5822387035 
Correct output: -1.5538743366  | Program output: -48.5538743366
Correct output: 166.8070496115 | Program output: 93.8070496115 
Correct output: 58.6188945281  | Program output: 98.6188945281 
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction in1} {:instruction integer_max} {:instruction integer_dup_items} {:instruction float_shove} {:instruction integer_stackdepth} {:instruction integer_dup_items} {:instruction integer_sub} {:instruction integer_mod} {:instruction integer_div} {:instruction float_inc} {:instruction float_yank} {:instruction float_inc} {:instruction float_max} {:instruction float_inc} {:instruction float_mod} {:instruction float_rot} {:instruction float_inc} {:instruction integer_mod} {:instruction float_inc} {:instruction float_div} {:instruction float_inc} {:instruction float_sub} {:instruction float_inc} {:instruction float_inc} {:instruction float_div} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_inc} {:instruction float_div} {:instruction float_inc} {:instruction float_div} {:instruction float_inc} {:instruction integer_yank} {:instruction float_inc} {:instruction float_inc} {:instruction float_max} {:instruction integer_yankdup} {:instruction float_dup_items} {:instruction float_dup_times} {:instruction float_inc} {:instruction integer_dec} {:instruction float_dup_items} {:instruction float_div} {:instruction float_inc} {:instruction float_sub} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_inc} {:instruction float_yank} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction print_integer} {:instruction float_inc} {:instruction float_yankdup} {:instruction print_float} {:instruction integer_yankdup} {:instruction float_inc} {:instruction integer_yank} {:instruction float_flush} {:instruction integer_dup_times} {:instruction integer_div} {:instruction float_dup} {:instruction float_frominteger} {:instruction tag_float_856} {:instruction integer_yankdup} {:instruction float_yankdup} {:instruction -43} {:instruction tag_float_780} {:instruction float_add} {:instruction float_max} {:instruction float_frominteger} {:instruction integer_yank} {:instruction float_dup_items} {:instruction float_flush} {:instruction integer_shove} {:instruction integer_dup_times} {:instruction integer_stackdepth} {:instruction tag_float_856} {:instruction float_mult} {:instruction float_mult} {:instruction integer_sub} {:instruction integer_max} {:instruction float_div})
Best program: (in1 integer_max integer_dup_items float_shove integer_stackdepth integer_dup_items integer_sub integer_mod integer_div float_inc float_yank float_inc float_max float_inc float_mod float_rot float_inc integer_mod float_inc float_div float_inc float_sub float_inc float_inc float_div float_inc float_yankdup float_inc float_yankdup float_inc float_div float_inc float_div float_inc integer_yank float_inc float_inc float_max integer_yankdup float_dup_items float_dup_times float_inc integer_dec float_dup_items float_div float_inc float_sub float_inc float_yankdup float_inc float_yankdup float_inc float_yank float_inc float_inc float_inc print_integer float_inc float_yankdup print_float integer_yankdup float_inc integer_yank float_flush integer_dup_times integer_div float_dup float_frominteger tag_float_856 integer_yankdup float_yankdup -43 tag_float_780 float_add float_max float_frominteger integer_yank float_dup_items float_flush integer_shove integer_dup_times integer_stackdepth tag_float_856 float_mult float_mult integer_sub integer_max float_div)
Errors: [34.0 13 79.0 13 91.0 12 49.0 2 67.0 3 98.0 2 26.0 2 50.0 2 36.0 2 73.0 2 0.0 0 30.0 2 8.0 1 6.0 2 43.0 3 57.0 2 21.0 2 25.0 2 18.0 3 15.0 2 29.0 2 5.0 3 47.0 2 73.0 3 40.0 1]
Total: 1103.0
Mean: 22.06
Genome size: 88
Size: 89
Percent parens: 0.011
--- Population Statistics ---
Average total errors in population: 2429.9051317
Median total errors in population: 1103.0
Error averages by case: (84.50491159999997 12.731 124.93859439999994 12.779 136.4803342 11.989 103.9827879 3.323 119.6060455 3.975 142.67347469999996 3.054 80.76685720000002 3.056 102.13308470000004 3.251 87.05900000000003 3.147 119.65082989999999 2.999 56.22764030000001 1.785 86.9588034 3.557 61.4554506 2.254 57.8029656 3.02 96.42624520000003 3.991 111.63183619999995 3.541 73.22304920000002 2.984 73.7457353 2.972 74.5051248 3.951 72.9626576 3.067 76.31811510000001 4.049 63.04446350000001 3.825 96.32244939999997 3.074 126.50746450000003 4.001 92.02821089999999 2.574)
Error minima by case: (0.1649 8 16.801 2 9.8193 8 19.1871 1 5.5604 2 0.4466 1 15.0569 1 19.3231 2 9.173 1 0.3909 1 0.0 0 0.6769 2 0.0 0 0.0 0 7.0144 2 12.0508 2 0.5715 1 0.2658 1 2.0 1 6.0 1 6.0102 1 0.0 0 0.0638 1 3.193 2 9.3231 1)
Average genome size in population (length): 62.202
Average program size in population (points): 63.202
Average percent parens in population: 0.016
Minimum age in population: 227.2907423744244
Maximum age in population: 231.8241609242149
Average age in population: 229.5849856808198
Median age in population: 229.6147579429052
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 9
Genome diversity (% unique Plush genomes):	 0.804
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 9
Syntactic diversity (% unique Push programs):	 0.804
Total error diversity:				 0.087
Error (vector) diversity:			 0.093
Behavioral diversity:				 0.093
--- Run Statistics ---
Number of program evaluations used so far: 163000
Number of point (instruction) evaluations so far: 299829634
--- Timings ---
Current time: 1529615449989 milliseconds
Total Time:         594.8 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       215.5 seconds, 36.2%
Fitness Testing:    295.5 seconds, 49.7%
Report:              83.6 seconds, 14.1%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 162
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 163
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 163
;;******************************
;; -*- Number IO problem report - generation 163
Test total error for best: 59131.0
Test mean error for best: 29.56550
;;------------------------------
Outputs of best individual on training cases:
Correct output: 1.9526623133   | Program output: -32.0473376867
Correct output: -70.8009773522 | Program output: 8.1990226478  
Correct output: -13.7839009431 | Program output: 77.2160990569 
Correct output: 143.8727406396 | Program output: 94.8727406396 
Correct output: 136.4396027174 | Program output: 69.4396027174 
Correct output: 18.5044280613  | Program output: 116.5044280613
Correct output: 92.0568646792  | Program output: 66.0568646792 
Correct output: 71.8873476205  | Program output: 121.8873476205
Correct output: -10.8388749243 | Program output: -46.8388749243
Correct output: 0.9299825981   | Program output: 73.9299825981 
Correct output: -26.7840412284 | Program output: -26.7840412284
Correct output: -102.1264221267 | Program output: -72.1264221267
Correct output: 40.8061668642  | Program output: 48.8061668642 
Correct output: -5.2544966331  | Program output: -11.2544966331
Correct output: 102.9855886244 | Program output: 59.9855886244 
Correct output: -118.0507723766 | Program output: -61.0507723766
Correct output: 55.9371769928  | Program output: 76.9371769928 
Correct output: 4.2657989984   | Program output: 29.2657989984 
Correct output: 96.7057987603  | Program output: 114.7057987603
Correct output: 122.162446611  | Program output: 107.162446611 
Correct output: 30.0102027945  | Program output: 1.0102027945  
Correct output: 104.5822387035 | Program output: 99.5822387035 
Correct output: -1.5538743366  | Program output: -48.5538743366
Correct output: 166.8070496115 | Program output: 93.8070496115 
Correct output: 58.6188945281  | Program output: 98.6188945281 
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction in1} {:instruction integer_max} {:instruction integer_div} {:instruction integer_mult} {:instruction integer_mod} {:instruction integer_max} {:instruction float_inc} {:instruction float_dup_times} {:instruction float_sub} {:instruction integer_dup} {:instruction float_shove} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_mod} {:instruction float_inc} {:instruction integer_dup_items} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_inc} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_yankdup} {:instruction float_inc} {:instruction float_inc} {:instruction float_add} {:instruction float_div} {:instruction float_inc} {:instruction integer_pop} {:instruction float_inc} {:instruction float_swap} {:instruction float_inc} {:instruction integer_inc} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_inc} {:instruction integer_mod} {:instruction float_inc} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_inc} {:instruction float_inc} {:instruction float_add} {:instruction integer_max} {:instruction float_dup_items} {:instruction float_inc} {:instruction float_inc} {:instruction float_swap} {:instruction float_inc} {:instruction print_float} {:instruction float_dup_items} {:instruction float_div} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_inc} {:instruction float_inc} {:instruction float_yankdup} {:instruction print_float} {:instruction integer_sub})
Best program: (in1 integer_max integer_div integer_mult integer_mod integer_max float_inc float_dup_times float_sub integer_dup float_shove float_inc float_inc float_inc integer_mod float_inc integer_dup_items float_inc float_inc float_inc float_yankdup float_inc float_inc float_yankdup float_yankdup float_inc float_inc float_add float_div float_inc integer_pop float_inc float_swap float_inc integer_inc float_inc float_yankdup float_inc integer_mod float_inc float_inc float_yankdup float_inc float_inc float_add integer_max float_dup_items float_inc float_inc float_swap float_inc print_float float_dup_items float_div float_inc float_yankdup float_inc float_inc float_yankdup print_float integer_sub)
Errors: [34.0 13 79.0 13 91.0 12 49.0 2 67.0 3 98.0 2 26.0 2 50.0 2 36.0 2 73.0 2 0.0 0 30.0 2 8.0 1 6.0 2 43.0 3 57.0 2 21.0 2 25.0 2 18.0 3 15.0 2 29.0 2 5.0 3 47.0 2 73.0 3 40.0 1]
Total: 1103.0
Mean: 22.06
Genome size: 61
Size: 62
Percent parens: 0.016
--- Population Statistics ---
Average total errors in population: 2221.4860085000005
Median total errors in population: 1103.0
Error averages by case: (76.4738728 12.759 118.0007333 12.738 128.6133711 11.999 95.22184610000006 3.175 110.9725456 3.839 134.59119840000002 2.902 71.76144169999999 2.913 94.05370250000001 3.17 78.9746524 3.026 111.63426520000004 2.887 48.063376999999996 1.606 79.397911 3.395 52.690767199999996 2.101 49.76161800000001 2.844 87.60212920000001 3.837 104.45437289999995 3.414 64.62935629999998 2.845 66.54447589999998 2.864 65.5841539 3.813 64.43090940000003 2.937 68.79293559999999 3.651 53.6504317 3.597 88.45545929999997 2.976 118.02325429999996 3.868 83.4742277 2.477)
Error minima by case: (0.0818 8 35.5554 1 12.6008 8 38.8727 1 4.5604 2 0.4347 1 17.0 1 1.1127 2 5.8389 1 1.057 1 0.0 0 16.0 2 0.0 0 0.0 0 9.9856 2 11.0508 2 7.0 1 0.4424 1 4.0 2 6.0 1 5.0102 1 0.0 0 0.2615 1 13.807 2 14.3811 1)
Average genome size in population (length): 61.877
Average program size in population (points): 62.877
Average percent parens in population: 0.016
Minimum age in population: 228.7266367543095
Maximum age in population: 232.7863183562108
Average age in population: 231.0125758655125
Median age in population: 230.9996835746226
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 9
Genome diversity (% unique Plush genomes):	 0.814
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 9
Syntactic diversity (% unique Push programs):	 0.814
Total error diversity:				 0.079
Error (vector) diversity:			 0.09
Behavioral diversity:				 0.09
--- Run Statistics ---
Number of program evaluations used so far: 164000
Number of point (instruction) evaluations so far: 301376584
--- Timings ---
Current time: 1529615453392 milliseconds
Total Time:         598.3 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       216.8 seconds, 36.2%
Fitness Testing:    297.1 seconds, 49.7%
Report:              84.2 seconds, 14.1%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 163
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 164
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 164
;;******************************
;; -*- Number IO problem report - generation 164
Test total error for best: 59131.0
Test mean error for best: 29.56550
;;------------------------------
Outputs of best individual on training cases:
Correct output: 1.9526623133   | Program output: -32.0473376867
Correct output: -70.8009773522 | Program output: 8.1990226478  
Correct output: -13.7839009431 | Program output: 77.2160990569 
Correct output: 143.8727406396 | Program output: 94.8727406396 
Correct output: 136.4396027174 | Program output: 69.4396027174 
Correct output: 18.5044280613  | Program output: 116.5044280613
Correct output: 92.0568646792  | Program output: 66.0568646792 
Correct output: 71.8873476205  | Program output: 121.8873476205
Correct output: -10.8388749243 | Program output: -46.8388749243
Correct output: 0.9299825981   | Program output: 73.9299825981 
Correct output: -26.7840412284 | Program output: -26.7840412284
Correct output: -102.1264221267 | Program output: -72.1264221267
Correct output: 40.8061668642  | Program output: 48.8061668642 
Correct output: -5.2544966331  | Program output: -11.2544966331
Correct output: 102.9855886244 | Program output: 59.9855886244 
Correct output: -118.0507723766 | Program output: -61.0507723766
Correct output: 55.9371769928  | Program output: 76.9371769928 
Correct output: 4.2657989984   | Program output: 29.2657989984 
Correct output: 96.7057987603  | Program output: 114.7057987603
Correct output: 122.162446611  | Program output: 107.162446611 
Correct output: 30.0102027945  | Program output: 1.0102027945  
Correct output: 104.5822387035 | Program output: 99.5822387035 
Correct output: -1.5538743366  | Program output: -48.5538743366
Correct output: 166.8070496115 | Program output: 93.8070496115 
Correct output: 58.6188945281  | Program output: 98.6188945281 
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction in1} {:instruction float_sub} {:instruction integer_max} {:instruction integer_mod} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_inc} {:instruction integer_dup} {:instruction float_inc} {:instruction float_inc} {:instruction integer_mod} {:instruction float_inc} {:instruction integer_yankdup} {:instruction float_inc} {:instruction float_inc} {:instruction integer_min} {:instruction integer_yankdup} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_inc} {:instruction integer_max} {:instruction float_div} {:instruction float_inc} {:instruction integer_flush} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_inc} {:instruction float_div} {:instruction float_inc} {:instruction float_mult} {:instruction float_inc} {:instruction float_rot} {:instruction float_inc} {:instruction float_inc} {:instruction integer_flush} {:instruction float_dup_items} {:instruction float_yank} {:instruction float_inc} {:instruction float_div} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_inc} {:instruction integer_mod} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_min} {:instruction float_inc} {:instruction float_mod} {:instruction print_float})
Best program: (in1 float_sub integer_max integer_mod float_inc float_yankdup float_inc integer_dup float_inc float_inc integer_mod float_inc integer_yankdup float_inc float_inc integer_min integer_yankdup float_inc float_yankdup float_inc float_yankdup float_inc integer_max float_div float_inc integer_flush float_inc float_yankdup float_inc float_div float_inc float_mult float_inc float_rot float_inc float_inc integer_flush float_dup_items float_yank float_inc float_div float_inc float_yankdup float_inc integer_mod float_inc float_inc float_inc integer_min float_inc float_mod print_float)
Errors: [34.0 13 79.0 13 91.0 12 49.0 2 67.0 3 98.0 2 26.0 2 50.0 2 36.0 2 73.0 2 0.0 0 30.0 2 8.0 1 6.0 2 43.0 3 57.0 2 21.0 2 25.0 2 18.0 3 15.0 2 29.0 2 5.0 3 47.0 2 73.0 3 40.0 1]
Total: 1103.0
Mean: 22.06
Genome size: 52
Size: 53
Percent parens: 0.019
--- Population Statistics ---
Average total errors in population: 2409.5612946000006
Median total errors in population: 1103.0
Error averages by case: (83.73394279999998 12.763 121.2839228 12.721 136.8920826000001 11.993 103.50403690000005 3.322 118.99297199999998 3.97 142.4055665 3.03 80.20960679999996 3.071 102.38576030000004 3.28 86.24279360000003 3.128 120.1395373 2.998 55.156964699999996 1.745 86.97461759999999 3.469 61.11917189999998 2.268 53.95232480000002 2.979 95.84436759999998 3.974 111.60001469999996 3.485 73.50407949999999 2.989 73.08569920000004 2.992 73.37385250000004 3.953 72.36949129999999 3.079 71.60290549999999 3.767 62.42972849999998 3.769 95.80793979999997 3.076 125.96921730000003 4.006 92.56569809999998 2.588)
Error minima by case: (0.0496 8 22.2759 1 5.7839 7 17.8727 2 0.5604 2 0.3889 1 11.8387 1 8.3308 2 2.8389 1 0.6549 1 0.0 0 6.0 2 0.0 0 0.0 0 0.9856 2 7.0508 2 0.0 0 0.2052 1 1.0 1 7.0 1 2.7323 1 0.0 0 0.854 1 4.807 2 16.0 1)
Average genome size in population (length): 61.41
Average program size in population (points): 62.41
Average percent parens in population: 0.016
Minimum age in population: 230.1299108848707
Maximum age in population: 234.4986918541731
Average age in population: 232.4749416221656
Median age in population: 232.4964925520537
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 8
Genome diversity (% unique Plush genomes):	 0.809
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 8
Syntactic diversity (% unique Push programs):	 0.809
Total error diversity:				 0.094
Error (vector) diversity:			 0.101
Behavioral diversity:				 0.101
--- Run Statistics ---
Number of program evaluations used so far: 165000
Number of point (instruction) evaluations so far: 302911884
--- Timings ---
Current time: 1529615456751 milliseconds
Total Time:         601.7 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       218.2 seconds, 36.3%
Fitness Testing:    298.8 seconds, 49.7%
Report:              84.7 seconds, 14.1%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 164
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 165
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 165
;;******************************
;; -*- Number IO problem report - generation 165
Test total error for best: 59131.0
Test mean error for best: 29.56550
;;------------------------------
Outputs of best individual on training cases:
Correct output: 1.9526623133   | Program output: -32.0473376867
Correct output: -70.8009773522 | Program output: 8.1990226478  
Correct output: -13.7839009431 | Program output: 77.2160990569 
Correct output: 143.8727406396 | Program output: 94.8727406396 
Correct output: 136.4396027174 | Program output: 69.4396027174 
Correct output: 18.5044280613  | Program output: 116.5044280613
Correct output: 92.0568646792  | Program output: 66.0568646792 
Correct output: 71.8873476205  | Program output: 121.8873476205
Correct output: -10.8388749243 | Program output: -46.8388749243
Correct output: 0.9299825981   | Program output: 73.9299825981 
Correct output: -26.7840412284 | Program output: -26.7840412284
Correct output: -102.1264221267 | Program output: -72.1264221267
Correct output: 40.8061668642  | Program output: 48.8061668642 
Correct output: -5.2544966331  | Program output: -11.2544966331
Correct output: 102.9855886244 | Program output: 59.9855886244 
Correct output: -118.0507723766 | Program output: -61.0507723766
Correct output: 55.9371769928  | Program output: 76.9371769928 
Correct output: 4.2657989984   | Program output: 29.2657989984 
Correct output: 96.7057987603  | Program output: 114.7057987603
Correct output: 122.162446611  | Program output: 107.162446611 
Correct output: 30.0102027945  | Program output: 1.0102027945  
Correct output: 104.5822387035 | Program output: 99.5822387035 
Correct output: -1.5538743366  | Program output: -48.5538743366
Correct output: 166.8070496115 | Program output: 93.8070496115 
Correct output: 58.6188945281  | Program output: 98.6188945281 
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction in1} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_inc} {:instruction float_dup_items} {:instruction float_inc} {:instruction float_inc} {:instruction integer_dec} {:instruction tagged_646} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_inc} {:instruction float_inc} {:instruction float_div} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_inc} {:instruction float_div} {:instruction float_inc} {:instruction integer_flush} {:instruction float_inc} {:instruction integer_dup} {:instruction float_inc} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_inc} {:instruction tag_integer_134} {:instruction float_inc} {:instruction float_div} {:instruction float_yankdup} {:instruction float_inc} {:instruction integer_yank} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_add} {:instruction integer_max} {:instruction integer_dec} {:instruction float_inc} {:instruction float_inc} {:instruction integer_add} {:instruction float_inc} {:instruction print_float} {:instruction float_inc} {:instruction integer_yankdup} {:instruction integer_mod} {:instruction float_inc} {:instruction float_inc} {:instruction print_float} {:instruction integer_div} {:instruction float_inc} {:instruction integer_dup_items} {:instruction float_add})
Best program: (in1 float_inc float_yankdup float_inc float_dup_items float_inc float_inc integer_dec tagged_646 float_inc float_yankdup float_inc float_inc float_div float_inc float_yankdup float_inc float_yankdup float_inc float_div float_inc integer_flush float_inc integer_dup float_inc float_inc float_yankdup float_inc tag_integer_134 float_inc float_div float_yankdup float_inc integer_yank float_inc float_inc float_inc float_inc float_add integer_max integer_dec float_inc float_inc integer_add float_inc print_float float_inc integer_yankdup integer_mod float_inc float_inc print_float integer_div float_inc integer_dup_items float_add)
Errors: [34.0 13 79.0 13 91.0 12 49.0 2 67.0 3 98.0 2 26.0 2 50.0 2 36.0 2 73.0 2 0.0 0 30.0 2 8.0 1 6.0 2 43.0 3 57.0 2 21.0 2 25.0 2 18.0 3 15.0 2 29.0 2 5.0 3 47.0 2 73.0 3 40.0 1]
Total: 1103.0
Mean: 22.06
Genome size: 56
Size: 57
Percent parens: 0.018
--- Population Statistics ---
Average total errors in population: 2514.0370632999998
Median total errors in population: 1103.0
Error averages by case: (88.804566 12.734 123.99437799999998 12.757 140.673981 12.006 107.48563120000004 3.354 123.11011000000002 3.989 146.25783919999992 3.06 84.47632289999999 3.099 105.82370490000001 3.328 91.3003862 3.187 123.9899035 3.018 60.3496514 1.833 90.48614629999997 3.567 65.60918729999999 2.296 59.54751900000001 3.024 100.07392850000001 3.986 115.0526623 3.575 77.26589929999997 2.985 76.4935661 3.011 77.5710552 3.961 76.41282470000002 3.124 76.58390059999998 3.874 66.6532767 3.798 100.65866639999999 3.128 129.88994119999998 4.013 96.13201540000003 2.633)
Error minima by case: (0.3161 7 11.5624 1 8.3829 8 21.8727 2 6.5604 2 0.1954 1 15.0 1 17.4376 2 10.5577 1 0.2528 1 0.0 0 7.0 2 0.0 0 0.0 0 4.0144 2 10.4376 2 0.9372 1 0.1331 1 1.0 1 4.0 1 3.0102 1 0.0 0 0.8159 1 0.193 2 13.8729 1)
Average genome size in population (length): 61.675
Average program size in population (points): 62.675
Average percent parens in population: 0.016
Minimum age in population: 231.5151368254616
Maximum age in population: 235.9904125141698
Average age in population: 233.9363141914519
Median age in population: 233.9846056014396
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 9
Genome diversity (% unique Plush genomes):	 0.809
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 9
Syntactic diversity (% unique Push programs):	 0.809
Total error diversity:				 0.085
Error (vector) diversity:			 0.093
Behavioral diversity:				 0.094
--- Run Statistics ---
Number of program evaluations used so far: 166000
Number of point (instruction) evaluations so far: 304453809
--- Timings ---
Current time: 1529615460109 milliseconds
Total Time:         605.0 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       219.5 seconds, 36.3%
Fitness Testing:    300.4 seconds, 49.6%
Report:              85.1 seconds, 14.1%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 165
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 166
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 166
;;******************************
;; -*- Number IO problem report - generation 166
Test total error for best: 59131.0
Test mean error for best: 29.56550
;;------------------------------
Outputs of best individual on training cases:
Correct output: 1.9526623133   | Program output: -32.0473376867
Correct output: -70.8009773522 | Program output: 8.1990226478  
Correct output: -13.7839009431 | Program output: 77.2160990569 
Correct output: 143.8727406396 | Program output: 94.8727406396 
Correct output: 136.4396027174 | Program output: 69.4396027174 
Correct output: 18.5044280613  | Program output: 116.5044280613
Correct output: 92.0568646792  | Program output: 66.0568646792 
Correct output: 71.8873476205  | Program output: 121.8873476205
Correct output: -10.8388749243 | Program output: -46.8388749243
Correct output: 0.9299825981   | Program output: 73.9299825981 
Correct output: -26.7840412284 | Program output: -26.7840412284
Correct output: -102.1264221267 | Program output: -72.1264221267
Correct output: 40.8061668642  | Program output: 48.8061668642 
Correct output: -5.2544966331  | Program output: -11.2544966331
Correct output: 102.9855886244 | Program output: 59.9855886244 
Correct output: -118.0507723766 | Program output: -61.0507723766
Correct output: 55.9371769928  | Program output: 76.9371769928 
Correct output: 4.2657989984   | Program output: 29.2657989984 
Correct output: 96.7057987603  | Program output: 114.7057987603
Correct output: 122.162446611  | Program output: 107.162446611 
Correct output: 30.0102027945  | Program output: 1.0102027945  
Correct output: 104.5822387035 | Program output: 99.5822387035 
Correct output: -1.5538743366  | Program output: -48.5538743366
Correct output: 166.8070496115 | Program output: 93.8070496115 
Correct output: 58.6188945281  | Program output: 98.6188945281 
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction in1} {:instruction integer_max} {:instruction integer_stackdepth} {:instruction integer_dup_items} {:instruction integer_sub} {:instruction integer_mod} {:instruction integer_div} {:instruction float_inc} {:instruction float_yank} {:instruction float_inc} {:instruction float_max} {:instruction float_inc} {:instruction float_mod} {:instruction float_rot} {:instruction float_inc} {:instruction integer_mod} {:instruction float_inc} {:instruction float_div} {:instruction float_inc} {:instruction float_mult} {:instruction float_inc} {:instruction float_inc} {:instruction float_div} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_inc} {:instruction float_div} {:instruction float_inc} {:instruction float_div} {:instruction float_inc} {:instruction float_rot} {:instruction float_inc} {:instruction float_inc} {:instruction float_dup_items} {:instruction integer_dup_times} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_yank} {:instruction float_mult} {:instruction integer_yank} {:instruction float_div} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_mod} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_mult} {:instruction float_inc} {:instruction integer_flush} {:instruction print_float})
Best program: (in1 integer_max integer_stackdepth integer_dup_items integer_sub integer_mod integer_div float_inc float_yank float_inc float_max float_inc float_mod float_rot float_inc integer_mod float_inc float_div float_inc float_mult float_inc float_inc float_div float_inc float_yankdup float_inc float_yankdup float_inc float_yankdup float_inc float_div float_inc float_div float_inc float_rot float_inc float_inc float_dup_items integer_dup_times float_inc float_yankdup float_yank float_mult integer_yank float_div float_inc float_inc float_inc integer_mod float_inc float_inc float_inc float_mult float_inc integer_flush print_float)
Errors: [34.0 13 79.0 13 91.0 12 49.0 2 67.0 3 98.0 2 26.0 2 50.0 2 36.0 2 73.0 2 0.0 0 30.0 2 8.0 1 6.0 2 43.0 3 57.0 2 21.0 2 25.0 2 18.0 3 15.0 2 29.0 2 5.0 3 47.0 2 73.0 3 40.0 1]
Total: 1103.0
Mean: 22.06
Genome size: 56
Size: 57
Percent parens: 0.018
--- Population Statistics ---
Average total errors in population: 2677.0998413000007
Median total errors in population: 1103.0
Error averages by case: (96.861436 12.78 128.78982920000004 12.773 147.07208049999997 12.046 113.38426610000003 3.318 128.7463782 3.972 153.6036438 3.043 90.36478699999998 3.037 112.95293430000001 3.278 99.3732396 3.154 130.38030610000007 2.991 68.4498536 1.778 98.44245450000001 3.531 70.80576260000001 2.259 67.67366380000004 3.002 105.84277990000002 3.957 123.07570299999998 3.527 83.5954096 2.978 80.224308 2.978 84.54657890000004 3.957 83.30172939999999 3.071 80.89642869999997 3.941 72.81061579999997 3.784 108.90466869999996 3.091 135.66558709999998 3.979 102.51939690000005 2.591)
Error minima by case: (0.3931 7 26.8355 1 12.7839 8 23.8727 1 19.5604 2 0.4347 1 14.0 1 27.0 2 9.8389 1 0.2688 1 0.0 0 7.0 2 0.0 0 0.0 0 5.0144 2 26.0508 2 0.0 0 0.4424 1 1.0 1 3.0 1 4.0537 1 0.0 0 0.5539 1 1.193 2 17.0 1)
Average genome size in population (length): 61.218
Average program size in population (points): 62.218
Average percent parens in population: 0.016
Minimum age in population: 232.5151368254616
Maximum age in population: 237.3220161647856
Average age in population: 235.3356531749983
Median age in population: 235.3598941591198
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 8
Genome diversity (% unique Plush genomes):	 0.808
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 8
Syntactic diversity (% unique Push programs):	 0.808
Total error diversity:				 0.087
Error (vector) diversity:			 0.097
Behavioral diversity:				 0.098
--- Run Statistics ---
Number of program evaluations used so far: 167000
Number of point (instruction) evaluations so far: 305984309
--- Timings ---
Current time: 1529615463472 milliseconds
Total Time:         608.4 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       220.8 seconds, 36.3%
Fitness Testing:    302.0 seconds, 49.6%
Report:              85.5 seconds, 14.1%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 166
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 167
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 167
;;******************************
;; -*- Number IO problem report - generation 167
Test total error for best: 59131.0
Test mean error for best: 29.56550
;;------------------------------
Outputs of best individual on training cases:
Correct output: 1.9526623133   | Program output: -32.0473376867
Correct output: -70.8009773522 | Program output: 8.1990226478  
Correct output: -13.7839009431 | Program output: 77.2160990569 
Correct output: 143.8727406396 | Program output: 94.8727406396 
Correct output: 136.4396027174 | Program output: 69.4396027174 
Correct output: 18.5044280613  | Program output: 116.5044280613
Correct output: 92.0568646792  | Program output: 66.0568646792 
Correct output: 71.8873476205  | Program output: 121.8873476205
Correct output: -10.8388749243 | Program output: -46.8388749243
Correct output: 0.9299825981   | Program output: 73.9299825981 
Correct output: -26.7840412284 | Program output: -26.7840412284
Correct output: -102.1264221267 | Program output: -72.1264221267
Correct output: 40.8061668642  | Program output: 48.8061668642 
Correct output: -5.2544966331  | Program output: -11.2544966331
Correct output: 102.9855886244 | Program output: 59.9855886244 
Correct output: -118.0507723766 | Program output: -61.0507723766
Correct output: 55.9371769928  | Program output: 76.9371769928 
Correct output: 4.2657989984   | Program output: 29.2657989984 
Correct output: 96.7057987603  | Program output: 114.7057987603
Correct output: 122.162446611  | Program output: 107.162446611 
Correct output: 30.0102027945  | Program output: 1.0102027945  
Correct output: 104.5822387035 | Program output: 99.5822387035 
Correct output: -1.5538743366  | Program output: -48.5538743366
Correct output: 166.8070496115 | Program output: 93.8070496115 
Correct output: 58.6188945281  | Program output: 98.6188945281 
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction in1} {:instruction integer_max} {:instruction integer_dup_items} {:instruction float_shove} {:instruction integer_stackdepth} {:instruction integer_dup_items} {:instruction integer_shove} {:instruction float_yankdup} {:instruction integer_div} {:instruction float_inc} {:instruction float_yank} {:instruction float_inc} {:instruction float_max} {:instruction float_inc} {:instruction float_mod} {:instruction float_rot} {:instruction float_inc} {:instruction float_add} {:instruction float_inc} {:instruction float_div} {:instruction float_inc} {:instruction float_mult} {:instruction float_inc} {:instruction float_inc} {:instruction float_div} {:instruction float_inc} {:instruction float_add} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_inc} {:instruction float_min} {:instruction float_div} {:instruction float_inc} {:instruction integer_div} {:instruction float_inc} {:instruction float_rot} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_min} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_inc} {:instruction integer_mod} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_mult} {:instruction float_inc} {:instruction integer_pop} {:instruction print_float} {:instruction float_flush} {:instruction integer_div} {:instruction float_mult} {:instruction float_mod} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction print_float} {:instruction float_yankdup} {:instruction print_float} {:instruction float_sin} {:instruction float_div} {:instruction float_inc} {:instruction float_inc})
Best program: (in1 integer_max integer_dup_items float_shove integer_stackdepth integer_dup_items integer_shove float_yankdup integer_div float_inc float_yank float_inc float_max float_inc float_mod float_rot float_inc float_add float_inc float_div float_inc float_mult float_inc float_inc float_div float_inc float_add float_inc float_yankdup float_inc float_min float_div float_inc integer_div float_inc float_rot float_inc float_inc float_inc float_inc integer_min float_inc float_yankdup float_inc float_yankdup float_inc integer_mod float_inc float_inc float_inc float_mult float_inc integer_pop print_float float_flush integer_div float_mult float_mod float_inc float_inc float_inc print_float float_yankdup print_float float_sin float_div float_inc float_inc)
Errors: [34.0 13 79.0 13 91.0 12 49.0 2 67.0 3 98.0 2 26.0 2 50.0 2 36.0 2 73.0 2 0.0 0 30.0 2 8.0 1 6.0 2 43.0 3 57.0 2 21.0 2 25.0 2 18.0 3 15.0 2 29.0 2 5.0 3 47.0 2 73.0 3 40.0 1]
Total: 1103.0
Mean: 22.06
Genome size: 68
Size: 69
Percent parens: 0.014
--- Population Statistics ---
Average total errors in population: 2342.668662300001
Median total errors in population: 1103.0
Error averages by case: (81.35237070000002 12.719 118.6570662 12.711 133.7335635 11.992 101.29544910000004 3.324 116.91077860000003 3.962 138.7438177 3.0 77.8398107 3.022 98.6714249 3.278 83.84702590000003 3.123 116.83220520000005 2.98 53.3411864 1.772 84.18967429999998 3.515 58.55088799999998 2.22 52.035739900000024 2.966 93.606648 3.925 109.11454309999993 3.516 70.90311669999998 2.931 69.06514899999998 2.979 70.5867129 3.916 69.77307280000004 3.05 69.48625129999999 3.843 59.91449079999998 3.716 93.1328882 3.066 124.00646699999997 3.962 88.9983214 2.592)
Error minima by case: (1.2939 8 42.0396 1 12.8038 8 37.8727 1 5.5604 2 0.4347 1 16.0 1 26.0 2 6.9977 1 0.9442 1 0.0 0 6.0 2 0.0 0 0.0 0 8.9856 2 12.0508 2 0.0 0 0.4684 1 1.0 1 5.0 1 2.657 1 0.0 0 0.3506 1 12.807 2 16.0 1)
Average genome size in population (length): 60.635
Average program size in population (points): 61.635
Average percent parens in population: 0.017
Minimum age in population: 233.5151368254616
Maximum age in population: 238.8111607920196
Average age in population: 236.7528419109451
Median age in population: 236.7951363022557
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 8
Genome diversity (% unique Plush genomes):	 0.828
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 8
Syntactic diversity (% unique Push programs):	 0.828
Total error diversity:				 0.085
Error (vector) diversity:			 0.098
Behavioral diversity:				 0.098
--- Run Statistics ---
Number of program evaluations used so far: 168000
Number of point (instruction) evaluations so far: 307500184
--- Timings ---
Current time: 1529615466892 milliseconds
Total Time:         611.7 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       222.1 seconds, 36.3%
Fitness Testing:    303.6 seconds, 49.6%
Report:              85.9 seconds, 14.0%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 167
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 168
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 168
;;******************************
;; -*- Number IO problem report - generation 168
Test total error for best: 59131.0
Test mean error for best: 29.56550
;;------------------------------
Outputs of best individual on training cases:
Correct output: 1.9526623133   | Program output: -32.0473376867
Correct output: -70.8009773522 | Program output: 8.1990226478  
Correct output: -13.7839009431 | Program output: 77.2160990569 
Correct output: 143.8727406396 | Program output: 94.8727406396 
Correct output: 136.4396027174 | Program output: 69.4396027174 
Correct output: 18.5044280613  | Program output: 116.5044280613
Correct output: 92.0568646792  | Program output: 66.0568646792 
Correct output: 71.8873476205  | Program output: 121.8873476205
Correct output: -10.8388749243 | Program output: -46.8388749243
Correct output: 0.9299825981   | Program output: 73.9299825981 
Correct output: -26.7840412284 | Program output: -26.7840412284
Correct output: -102.1264221267 | Program output: -72.1264221267
Correct output: 40.8061668642  | Program output: 48.8061668642 
Correct output: -5.2544966331  | Program output: -11.2544966331
Correct output: 102.9855886244 | Program output: 59.9855886244 
Correct output: -118.0507723766 | Program output: -61.0507723766
Correct output: 55.9371769928  | Program output: 76.9371769928 
Correct output: 4.2657989984   | Program output: 29.2657989984 
Correct output: 96.7057987603  | Program output: 114.7057987603
Correct output: 122.162446611  | Program output: 107.162446611 
Correct output: 30.0102027945  | Program output: 1.0102027945  
Correct output: 104.5822387035 | Program output: 99.5822387035 
Correct output: -1.5538743366  | Program output: -48.5538743366
Correct output: 166.8070496115 | Program output: 93.8070496115 
Correct output: 58.6188945281  | Program output: 98.6188945281 
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction in1} {:instruction integer_max} {:instruction integer_div} {:instruction integer_dup_items} {:instruction float_yankdup} {:instruction integer_max} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_inc} {:instruction float_inc} {:instruction integer_mod} {:instruction float_inc} {:instruction integer_inc} {:instruction float_inc} {:instruction float_rot} {:instruction float_inc} {:instruction print_integer} {:instruction float_div} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_inc} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_inc} {:instruction float_div} {:instruction float_inc} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_inc} {:instruction float_rot} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_yankdup} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_shove} {:instruction float_inc} {:instruction integer_mult} {:instruction print_float} {:instruction float_swap} {:instruction float_inc} {:instruction integer_swap} {:instruction print_float} {:instruction float_shove} {:instruction integer_mult})
Best program: (in1 integer_max integer_div integer_dup_items float_yankdup integer_max float_inc float_yankdup float_inc float_inc integer_mod float_inc integer_inc float_inc float_rot float_inc print_integer float_div float_inc float_yankdup float_inc float_inc float_yankdup float_inc float_div float_inc float_inc float_yankdup float_inc float_rot float_inc float_inc float_inc float_inc float_yankdup float_inc float_yankdup float_yankdup float_inc float_yankdup float_inc float_inc float_inc float_inc integer_shove float_inc integer_mult print_float float_swap float_inc integer_swap print_float float_shove integer_mult)
Errors: [34.0 13 79.0 13 91.0 12 49.0 2 67.0 3 98.0 2 26.0 2 50.0 2 36.0 2 73.0 2 0.0 0 30.0 2 8.0 1 6.0 2 43.0 3 57.0 2 21.0 2 25.0 2 18.0 3 15.0 2 29.0 2 5.0 3 47.0 2 73.0 3 40.0 1]
Total: 1103.0
Mean: 22.06
Genome size: 54
Size: 55
Percent parens: 0.018
--- Population Statistics ---
Average total errors in population: 2323.5205964
Median total errors in population: 1103.0
Error averages by case: (81.97521659999998 12.751 120.9184564 12.741 133.15506050000002 12.008 99.02265490000002 3.201 114.842328 3.86 138.8551892 2.933 76.06896740000003 2.942 97.22917180000003 3.177 84.4025433 3.013 116.15738060000002 2.864 52.781697399999985 1.592 81.98621480000001 3.392 57.44188849999999 2.101 54.649041700000005 2.882 91.76147799999998 3.873 106.79329099999994 3.4 69.15614730000001 2.825 69.95726169999999 2.853 69.12408050000003 3.829 67.65784420000003 2.951 72.88042959999999 3.606 57.97089239999999 3.668 94.0226055 2.956 121.5062667 3.89 87.44448840000003 2.452)
Error minima by case: (0.4822 7 55.0 1 13.8585 9 20.8727 1 1.4396 2 0.455 1 12.0 1 26.0 2 12.2527 1 0.3909 1 0.0 0 6.0 2 0.0 0 0.0 0 1.0144 2 0.9492 2 1.0 1 0.2746 1 2.0 1 1.0 1 4.0102 1 0.0 0 1.5935 1 1.193 2 16.0 1)
Average genome size in population (length): 60.428
Average program size in population (points): 61.428
Average percent parens in population: 0.017
Minimum age in population: 235.7839314096343
Maximum age in population: 240.0879916470938
Average age in population: 238.0708191076876
Median age in population: 238.1216436148668
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 10
Genome diversity (% unique Plush genomes):	 0.772
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 10
Syntactic diversity (% unique Push programs):	 0.772
Total error diversity:				 0.071
Error (vector) diversity:			 0.081
Behavioral diversity:				 0.081
--- Run Statistics ---
Number of program evaluations used so far: 169000
Number of point (instruction) evaluations so far: 309010884
--- Timings ---
Current time: 1529615470215 milliseconds
Total Time:         615.1 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       223.4 seconds, 36.3%
Fitness Testing:    305.2 seconds, 49.6%
Report:              86.4 seconds, 14.1%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 168
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 169
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 169
;;******************************
;; -*- Number IO problem report - generation 169
Test total error for best: 59131.0
Test mean error for best: 29.56550
;;------------------------------
Outputs of best individual on training cases:
Correct output: 1.9526623133   | Program output: -32.0473376867
Correct output: -70.8009773522 | Program output: 8.1990226478  
Correct output: -13.7839009431 | Program output: 77.2160990569 
Correct output: 143.8727406396 | Program output: 94.8727406396 
Correct output: 136.4396027174 | Program output: 69.4396027174 
Correct output: 18.5044280613  | Program output: 116.5044280613
Correct output: 92.0568646792  | Program output: 66.0568646792 
Correct output: 71.8873476205  | Program output: 121.8873476205
Correct output: -10.8388749243 | Program output: -46.8388749243
Correct output: 0.9299825981   | Program output: 73.9299825981 
Correct output: -26.7840412284 | Program output: -26.7840412284
Correct output: -102.1264221267 | Program output: -72.1264221267
Correct output: 40.8061668642  | Program output: 48.8061668642 
Correct output: -5.2544966331  | Program output: -11.2544966331
Correct output: 102.9855886244 | Program output: 59.9855886244 
Correct output: -118.0507723766 | Program output: -61.0507723766
Correct output: 55.9371769928  | Program output: 76.9371769928 
Correct output: 4.2657989984   | Program output: 29.2657989984 
Correct output: 96.7057987603  | Program output: 114.7057987603
Correct output: 122.162446611  | Program output: 107.162446611 
Correct output: 30.0102027945  | Program output: 1.0102027945  
Correct output: 104.5822387035 | Program output: 99.5822387035 
Correct output: -1.5538743366  | Program output: -48.5538743366
Correct output: 166.8070496115 | Program output: 93.8070496115 
Correct output: 58.6188945281  | Program output: 98.6188945281 
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction in1} {:instruction integer_max} {:instruction tagged_55} {:instruction float_shove} {:instruction integer_max} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_mod} {:instruction float_inc} {:instruction integer_dup_items} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_yank} {:instruction float_inc} {:instruction integer_max} {:instruction integer_mod} {:instruction float_inc} {:instruction float_shove} {:instruction float_inc} {:instruction integer_dup_times} {:instruction float_inc} {:instruction float_div} {:instruction float_inc} {:instruction float_inc} {:instruction float_rot} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_inc} {:instruction integer_mod} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_mult} {:instruction float_inc} {:instruction integer_pop} {:instruction print_float} {:instruction float_inc} {:instruction float_inc} {:instruction float_swap} {:instruction float_inc} {:instruction print_float} {:instruction float_dup_items} {:instruction float_div} {:instruction float_inc} {:instruction float_inc})
Best program: (in1 integer_max tagged_55 float_shove integer_max float_inc float_inc float_inc integer_mod float_inc integer_dup_items float_inc float_inc float_inc integer_yank float_inc integer_max integer_mod float_inc float_shove float_inc integer_dup_times float_inc float_div float_inc float_inc float_rot float_inc float_inc float_inc float_inc float_yankdup float_inc float_yankdup float_inc float_yankdup float_inc integer_mod float_inc float_inc float_inc float_mult float_inc integer_pop print_float float_inc float_inc float_swap float_inc print_float float_dup_items float_div float_inc float_inc)
Errors: [34.0 13 79.0 13 91.0 12 49.0 2 67.0 3 98.0 2 26.0 2 50.0 2 36.0 2 73.0 2 0.0 0 30.0 2 8.0 1 6.0 2 43.0 3 57.0 2 21.0 2 25.0 2 18.0 3 15.0 2 29.0 2 5.0 3 47.0 2 73.0 3 40.0 1]
Total: 1103.0
Mean: 22.06
Genome size: 54
Size: 55
Percent parens: 0.018
--- Population Statistics ---
Average total errors in population: 2537.6752369
Median total errors in population: 1103.0
Error averages by case: (89.12759720000004 12.755 125.78775349999998 12.771 141.43276790000002 12.026 108.60563690000005 3.366 124.08461180000002 4.031 146.94362020000005 3.1 85.39445159999994 3.116 106.86044629999999 3.327 92.28405180000004 3.164 124.72155440000003 3.041 60.716678599999995 1.777 91.52665039999997 3.539 66.32743880000001 2.3 59.73438250000004 3.034 100.99348620000002 4.02 116.06103459999994 3.552 79.0476533 3.056 77.23582300000002 3.035 78.8186859 4.005 77.53110039999997 3.12 77.53814690000002 3.881 67.85970199999997 3.837 101.26190220000002 3.115 130.9715396 4.051 97.16852090000002 2.621)
Error minima by case: (0.3931 8 13.0375 1 3.9624 8 18.8727 1 20.5604 2 0.5044 1 13.0569 1 6.0203 2 9.8792 1 0.2688 1 0.0 0 8.0 2 0.0 0 0.0 0 6.0144 2 13.0203 2 1.0 1 0.4198 1 4.0 1 5.0 1 2.1325 1 0.0 0 0.3506 1 2.193 2 3.9797 1)
Average genome size in population (length): 60.016
Average program size in population (points): 61.016
Average percent parens in population: 0.017
Minimum age in population: 236.7839314096343
Maximum age in population: 241.4076716583753
Average age in population: 239.4518667152157
Median age in population: 239.4990069388436
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 10
Genome diversity (% unique Plush genomes):	 0.774
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 10
Syntactic diversity (% unique Push programs):	 0.774
Total error diversity:				 0.092
Error (vector) diversity:			 0.099
Behavioral diversity:				 0.1
--- Run Statistics ---
Number of program evaluations used so far: 170000
Number of point (instruction) evaluations so far: 310511284
--- Timings ---
Current time: 1529615473573 milliseconds
Total Time:         618.5 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       224.7 seconds, 36.3%
Fitness Testing:    306.8 seconds, 49.6%
Report:              86.9 seconds, 14.0%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 169
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 170
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 170
;;******************************
;; -*- Number IO problem report - generation 170
Test total error for best: 59131.0
Test mean error for best: 29.56550
;;------------------------------
Outputs of best individual on training cases:
Correct output: 1.9526623133   | Program output: -32.0473376867
Correct output: -70.8009773522 | Program output: 8.1990226478  
Correct output: -13.7839009431 | Program output: 77.2160990569 
Correct output: 143.8727406396 | Program output: 94.8727406396 
Correct output: 136.4396027174 | Program output: 69.4396027174 
Correct output: 18.5044280613  | Program output: 116.5044280613
Correct output: 92.0568646792  | Program output: 66.0568646792 
Correct output: 71.8873476205  | Program output: 121.8873476205
Correct output: -10.8388749243 | Program output: -46.8388749243
Correct output: 0.9299825981   | Program output: 73.9299825981 
Correct output: -26.7840412284 | Program output: -26.7840412284
Correct output: -102.1264221267 | Program output: -72.1264221267
Correct output: 40.8061668642  | Program output: 48.8061668642 
Correct output: -5.2544966331  | Program output: -11.2544966331
Correct output: 102.9855886244 | Program output: 59.9855886244 
Correct output: -118.0507723766 | Program output: -61.0507723766
Correct output: 55.9371769928  | Program output: 76.9371769928 
Correct output: 4.2657989984   | Program output: 29.2657989984 
Correct output: 96.7057987603  | Program output: 114.7057987603
Correct output: 122.162446611  | Program output: 107.162446611 
Correct output: 30.0102027945  | Program output: 1.0102027945  
Correct output: 104.5822387035 | Program output: 99.5822387035 
Correct output: -1.5538743366  | Program output: -48.5538743366
Correct output: 166.8070496115 | Program output: 93.8070496115 
Correct output: 58.6188945281  | Program output: 98.6188945281 
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction in1} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_inc} {:instruction float_dup_items} {:instruction float_inc} {:instruction float_inc} {:instruction integer_dec} {:instruction tagged_646} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_inc} {:instruction float_inc} {:instruction float_div} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_inc} {:instruction float_div} {:instruction float_inc} {:instruction integer_flush} {:instruction float_inc} {:instruction integer_dup} {:instruction float_inc} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_inc} {:instruction float_dup_items} {:instruction float_div} {:instruction float_inc} {:instruction float_mult} {:instruction float_dup_items} {:instruction integer_yankdup} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_inc} {:instruction integer_flush} {:instruction float_inc} {:instruction float_dup} {:instruction float_inc} {:instruction integer_dup_times} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction print_integer} {:instruction float_inc} {:instruction print_integer} {:instruction print_float} {:instruction float_flush} {:instruction integer_dec} {:instruction tag_float_856} {:instruction float_inc})
Best program: (in1 float_inc float_yankdup float_inc float_dup_items float_inc float_inc integer_dec tagged_646 float_inc float_yankdup float_inc float_inc float_div float_inc float_yankdup float_inc float_yankdup float_inc float_div float_inc integer_flush float_inc integer_dup float_inc float_inc float_yankdup float_inc float_dup_items float_div float_inc float_mult float_dup_items integer_yankdup float_inc float_yankdup float_inc integer_flush float_inc float_dup float_inc integer_dup_times float_inc float_inc float_inc print_integer float_inc print_integer print_float float_flush integer_dec tag_float_856 float_inc)
Errors: [34.0 13 79.0 13 91.0 12 49.0 2 67.0 3 98.0 2 26.0 2 50.0 2 36.0 2 73.0 2 0.0 0 30.0 2 8.0 1 6.0 2 43.0 3 57.0 2 21.0 2 25.0 2 18.0 3 15.0 2 29.0 2 5.0 3 47.0 2 73.0 3 40.0 1]
Total: 1103.0
Mean: 22.06
Genome size: 53
Size: 54
Percent parens: 0.019
--- Population Statistics ---
Average total errors in population: 2699.0274827000003
Median total errors in population: 1103.0
Error averages by case: (97.00669690000004 12.758 126.07034929999995 12.813 146.67486439999993 12.048 116.39254560000009 3.45 131.6806872 4.1 151.651882 3.162 93.389651 3.206 112.24386499999999 3.41 99.94864639999997 3.286 129.97084560000008 3.128 69.2378532 1.955 97.86614179999997 3.64 74.17790439999997 2.393 65.19005780000002 3.131 108.9163503 4.116 122.29502259999995 3.64 86.7568458 3.116 79.90207790000001 3.125 86.47761460000001 4.085 85.58885660000003 3.221 79.86927069999997 4.043 75.9291917 3.947 108.679426 3.226 138.624577 4.132 102.65125889999997 2.704)
Error minima by case: (1.0132 8 46.8455 2 13.7735 7 23.8727 1 3.5604 2 0.3677 1 17.0 1 27.0 2 9.1991 1 0.7117 1 0.0 0 7.0 2 0.0 0 0.0 0 1.0144 2 10.0508 2 2.0 1 0.5919 1 4.0 1 6.0 1 1.563 1 0.0 0 0.3718 1 1.193 2 17.0 1)
Average genome size in population (length): 59.853
Average program size in population (points): 60.853
Average percent parens in population: 0.017
Minimum age in population: 237.7839314096343
Maximum age in population: 242.9519085145838
Average age in population: 240.8780888630931
Median age in population: 240.8938018262977
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 11
Genome diversity (% unique Plush genomes):	 0.811
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 11
Syntactic diversity (% unique Push programs):	 0.811
Total error diversity:				 0.095
Error (vector) diversity:			 0.102
Behavioral diversity:				 0.103
--- Run Statistics ---
Number of program evaluations used so far: 171000
Number of point (instruction) evaluations so far: 312007609
--- Timings ---
Current time: 1529615476905 milliseconds
Total Time:         621.8 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       226.0 seconds, 36.3%
Fitness Testing:    308.4 seconds, 49.6%
Report:              87.3 seconds, 14.0%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 170
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 171
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 171
;;******************************
;; -*- Number IO problem report - generation 171
Test total error for best: 59131.0
Test mean error for best: 29.56550
;;------------------------------
Outputs of best individual on training cases:
Correct output: 1.9526623133   | Program output: -32.0473376867
Correct output: -70.8009773522 | Program output: 8.1990226478  
Correct output: -13.7839009431 | Program output: 77.2160990569 
Correct output: 143.8727406396 | Program output: 94.8727406396 
Correct output: 136.4396027174 | Program output: 69.4396027174 
Correct output: 18.5044280613  | Program output: 116.5044280613
Correct output: 92.0568646792  | Program output: 66.0568646792 
Correct output: 71.8873476205  | Program output: 121.8873476205
Correct output: -10.8388749243 | Program output: -46.8388749243
Correct output: 0.9299825981   | Program output: 73.9299825981 
Correct output: -26.7840412284 | Program output: -26.7840412284
Correct output: -102.1264221267 | Program output: -72.1264221267
Correct output: 40.8061668642  | Program output: 48.8061668642 
Correct output: -5.2544966331  | Program output: -11.2544966331
Correct output: 102.9855886244 | Program output: 59.9855886244 
Correct output: -118.0507723766 | Program output: -61.0507723766
Correct output: 55.9371769928  | Program output: 76.9371769928 
Correct output: 4.2657989984   | Program output: 29.2657989984 
Correct output: 96.7057987603  | Program output: 114.7057987603
Correct output: 122.162446611  | Program output: 107.162446611 
Correct output: 30.0102027945  | Program output: 1.0102027945  
Correct output: 104.5822387035 | Program output: 99.5822387035 
Correct output: -1.5538743366  | Program output: -48.5538743366
Correct output: 166.8070496115 | Program output: 93.8070496115 
Correct output: 58.6188945281  | Program output: 98.6188945281 
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction in1} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_inc} {:instruction float_dup_items} {:instruction float_inc} {:instruction float_inc} {:instruction integer_dec} {:instruction tagged_646} {:instruction float_inc} {:instruction float_yank} {:instruction float_inc} {:instruction float_inc} {:instruction float_div} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_inc} {:instruction float_div} {:instruction float_inc} {:instruction integer_flush} {:instruction float_inc} {:instruction integer_dup} {:instruction float_inc} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_inc} {:instruction tag_integer_134} {:instruction float_inc} {:instruction float_div} {:instruction float_yankdup} {:instruction float_inc} {:instruction integer_yank} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_add} {:instruction integer_max} {:instruction integer_dec} {:instruction float_inc} {:instruction float_inc} {:instruction integer_add} {:instruction float_inc} {:instruction print_float} {:instruction float_dec} {:instruction float_inc} {:instruction integer_mod} {:instruction float_yankdup} {:instruction float_inc} {:instruction float_tan} {:instruction float_sin} {:instruction integer_dup} {:instruction float_mod} {:instruction float_dec} {:instruction in2} {:instruction float_div} {:instruction print_float})
Best program: (in1 float_inc float_yankdup float_inc float_dup_items float_inc float_inc integer_dec tagged_646 float_inc float_yank float_inc float_inc float_div float_inc float_yankdup float_inc float_yankdup float_inc float_div float_inc integer_flush float_inc integer_dup float_inc float_inc float_yankdup float_inc tag_integer_134 float_inc float_div float_yankdup float_inc integer_yank float_inc float_inc float_inc float_inc float_add integer_max integer_dec float_inc float_inc integer_add float_inc print_float float_dec float_inc integer_mod float_yankdup float_inc float_tan float_sin integer_dup float_mod float_dec in2 float_div print_float)
Errors: [34.0 13 79.0 13 91.0 12 49.0 2 67.0 3 98.0 2 26.0 2 50.0 2 36.0 2 73.0 2 0.0 0 30.0 2 8.0 1 6.0 2 43.0 3 57.0 2 21.0 2 25.0 2 18.0 3 15.0 2 29.0 2 5.0 3 47.0 2 73.0 3 40.0 1]
Total: 1103.0
Mean: 22.06
Genome size: 59
Size: 60
Percent parens: 0.017
--- Population Statistics ---
Average total errors in population: 2556.930387
Median total errors in population: 1103.0
Error averages by case: (89.3722479 12.745 128.12742229999995 12.767 140.48253869999996 12.019 109.96931570000001 3.454 124.91553019999996 4.094 145.55259119999997 3.181 86.2604094 3.188 106.63012549999999 3.409 92.09060320000002 3.278 123.70250910000003 3.122 62.00500559999998 1.909 92.50790870000002 3.638 66.9890267 2.413 62.4278582 3.136 101.70233780000001 4.101 116.78983319999998 3.646 78.76156080000004 3.112 78.05741019999999 3.116 79.28795940000003 4.063 79.12613100000006 3.196 80.26718699999999 3.942 69.20333990000002 3.889 101.23408079999997 3.198 132.214551 4.114 97.7869035 2.736)
Error minima by case: (0.0473 8 43.7912 1 13.5393 8 20.8727 2 5.5604 2 0.2737 1 15.0569 1 12.5245 2 9.3942 1 0.8276 1 0.0 0 6.0 2 0.0 0 0.0 0 0.9856 2 12.0508 2 3.0 1 0.2573 1 3.0 1 5.0 1 1.8601 1 0.0 0 1.4135 1 4.193 2 16.0 1)
Average genome size in population (length): 60.153
Average program size in population (points): 61.153
Average percent parens in population: 0.017
Minimum age in population: 239.828361959809
Maximum age in population: 244.2465820925744
Average age in population: 242.3096130913595
Median age in population: 242.3430680082809
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 10
Genome diversity (% unique Plush genomes):	 0.806
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 10
Syntactic diversity (% unique Push programs):	 0.806
Total error diversity:				 0.096
Error (vector) diversity:			 0.103
Behavioral diversity:				 0.103
--- Run Statistics ---
Number of program evaluations used so far: 172000
Number of point (instruction) evaluations so far: 313511434
--- Timings ---
Current time: 1529615480298 milliseconds
Total Time:         625.2 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       227.3 seconds, 36.4%
Fitness Testing:    310.0 seconds, 49.6%
Report:              87.7 seconds, 14.0%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 171
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 172
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 172
;;******************************
;; -*- Number IO problem report - generation 172
Test total error for best: 59131.0
Test mean error for best: 29.56550
;;------------------------------
Outputs of best individual on training cases:
Correct output: 1.9526623133   | Program output: -32.0473376867
Correct output: -70.8009773522 | Program output: 8.1990226478  
Correct output: -13.7839009431 | Program output: 77.2160990569 
Correct output: 143.8727406396 | Program output: 94.8727406396 
Correct output: 136.4396027174 | Program output: 69.4396027174 
Correct output: 18.5044280613  | Program output: 116.5044280613
Correct output: 92.0568646792  | Program output: 66.0568646792 
Correct output: 71.8873476205  | Program output: 121.8873476205
Correct output: -10.8388749243 | Program output: -46.8388749243
Correct output: 0.9299825981   | Program output: 73.9299825981 
Correct output: -26.7840412284 | Program output: -26.7840412284
Correct output: -102.1264221267 | Program output: -72.1264221267
Correct output: 40.8061668642  | Program output: 48.8061668642 
Correct output: -5.2544966331  | Program output: -11.2544966331
Correct output: 102.9855886244 | Program output: 59.9855886244 
Correct output: -118.0507723766 | Program output: -61.0507723766
Correct output: 55.9371769928  | Program output: 76.9371769928 
Correct output: 4.2657989984   | Program output: 29.2657989984 
Correct output: 96.7057987603  | Program output: 114.7057987603
Correct output: 122.162446611  | Program output: 107.162446611 
Correct output: 30.0102027945  | Program output: 1.0102027945  
Correct output: 104.5822387035 | Program output: 99.5822387035 
Correct output: -1.5538743366  | Program output: -48.5538743366
Correct output: 166.8070496115 | Program output: 93.8070496115 
Correct output: 58.6188945281  | Program output: 98.6188945281 
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction in1} {:instruction integer_max} {:instruction tagged_55} {:instruction float_shove} {:instruction integer_sub} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_mod} {:instruction float_inc} {:instruction integer_dup_items} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_yank} {:instruction float_inc} {:instruction integer_max} {:instruction float_add} {:instruction float_inc} {:instruction float_yank} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_div} {:instruction float_inc} {:instruction integer_flush} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_mod} {:instruction integer_yankdup} {:instruction integer_sub} {:instruction float_inc} {:instruction float_mult} {:instruction float_dup_times} {:instruction integer_flush} {:instruction float_inc} {:instruction integer_min} {:instruction tagged_496} {:instruction integer_min} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_inc} {:instruction integer_mod} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_max} {:instruction float_inc} {:instruction integer_flush} {:instruction print_float})
Best program: (in1 integer_max tagged_55 float_shove integer_sub float_inc float_inc float_inc integer_mod float_inc integer_dup_items float_inc float_inc float_inc integer_yank float_inc integer_max float_add float_inc float_yank float_inc float_inc float_inc float_yankdup float_div float_inc integer_flush float_inc float_inc float_inc float_mod integer_yankdup integer_sub float_inc float_mult float_dup_times integer_flush float_inc integer_min tagged_496 integer_min float_inc float_yankdup float_inc integer_mod float_inc float_inc float_inc integer_max float_inc integer_flush print_float)
Errors: [34.0 13 79.0 13 91.0 12 49.0 2 67.0 3 98.0 2 26.0 2 50.0 2 36.0 2 73.0 2 0.0 0 30.0 2 8.0 1 6.0 2 43.0 3 57.0 2 21.0 2 25.0 2 18.0 3 15.0 2 29.0 2 5.0 3 47.0 2 73.0 3 40.0 1]
Total: 1103.0
Mean: 22.06
Genome size: 52
Size: 53
Percent parens: 0.019
--- Population Statistics ---
Average total errors in population: 2496.9146839
Median total errors in population: 1103.0
Error averages by case: (88.46009250000002 12.75 126.63897070000003 12.746 139.05206780000003 12.016 106.14200160000006 3.292 121.79963620000001 3.939 145.0500012 2.993 83.09868669999999 3.013 104.3241192 3.253 90.89159180000003 3.067 122.22312240000005 2.927 59.89316010000001 1.712 89.44504739999996 3.491 64.4914698 2.209 61.7340978 2.943 98.75525380000002 3.92 114.28491789999997 3.467 76.0589984 2.926 76.49967570000001 2.928 76.9130406 3.903 75.73307120000003 3.046 79.09660970000002 3.762 66.0255107 3.735 100.28280540000002 3.018 128.57712189999998 3.957 93.88461340000002 2.546)
Error minima by case: (2.6873 8 27.801 1 14.7674 8 32.8727 2 10.5604 2 0.4347 1 3.6464 1 12.8873 2 10.9826 1 1.8771 1 0.0 0 6.0 2 0.0 0 0.0 0 3.9856 2 17.0508 2 2.0 1 0.1186 1 3.0 1 2.0 1 1.1399 1 0.0 0 2.5126 1 7.807 1 0.3811 1)
Average genome size in population (length): 59.619
Average program size in population (points): 60.619
Average percent parens in population: 0.017
Minimum age in population: 240.9747577336387
Maximum age in population: 245.7599300367062
Average age in population: 243.7189189174398
Median age in population: 243.7500324751413
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 12
Genome diversity (% unique Plush genomes):	 0.812
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 12
Syntactic diversity (% unique Push programs):	 0.812
Total error diversity:				 0.078
Error (vector) diversity:			 0.086
Behavioral diversity:				 0.087
--- Run Statistics ---
Number of program evaluations used so far: 173000
Number of point (instruction) evaluations so far: 315001959
--- Timings ---
Current time: 1529615483606 milliseconds
Total Time:         628.5 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       228.6 seconds, 36.4%
Fitness Testing:    311.6 seconds, 49.6%
Report:              88.2 seconds, 14.0%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 172
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 173
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 173
;;******************************
;; -*- Number IO problem report - generation 173
Test total error for best: 59131.0
Test mean error for best: 29.56550
;;------------------------------
Outputs of best individual on training cases:
Correct output: 1.9526623133   | Program output: -32.0473376867
Correct output: -70.8009773522 | Program output: 8.1990226478  
Correct output: -13.7839009431 | Program output: 77.2160990569 
Correct output: 143.8727406396 | Program output: 94.8727406396 
Correct output: 136.4396027174 | Program output: 69.4396027174 
Correct output: 18.5044280613  | Program output: 116.5044280613
Correct output: 92.0568646792  | Program output: 66.0568646792 
Correct output: 71.8873476205  | Program output: 121.8873476205
Correct output: -10.8388749243 | Program output: -46.8388749243
Correct output: 0.9299825981   | Program output: 73.9299825981 
Correct output: -26.7840412284 | Program output: -26.7840412284
Correct output: -102.1264221267 | Program output: -72.1264221267
Correct output: 40.8061668642  | Program output: 48.8061668642 
Correct output: -5.2544966331  | Program output: -11.2544966331
Correct output: 102.9855886244 | Program output: 59.9855886244 
Correct output: -118.0507723766 | Program output: -61.0507723766
Correct output: 55.9371769928  | Program output: 76.9371769928 
Correct output: 4.2657989984   | Program output: 29.2657989984 
Correct output: 96.7057987603  | Program output: 114.7057987603
Correct output: 122.162446611  | Program output: 107.162446611 
Correct output: 30.0102027945  | Program output: 1.0102027945  
Correct output: 104.5822387035 | Program output: 99.5822387035 
Correct output: -1.5538743366  | Program output: -48.5538743366
Correct output: 166.8070496115 | Program output: 93.8070496115 
Correct output: 58.6188945281  | Program output: 98.6188945281 
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction in1} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_inc} {:instruction float_inc} {:instruction tag_integer_29} {:instruction integer_rot} {:instruction float_inc} {:instruction in2} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_rot} {:instruction float_inc} {:instruction float_inc} {:instruction float_min} {:instruction float_inc} {:instruction integer_max} {:instruction float_div} {:instruction float_inc} {:instruction integer_flush} {:instruction float_dec} {:instruction float_yankdup} {:instruction float_inc} {:instruction float_inc} {:instruction float_dec} {:instruction float_div} {:instruction float_inc} {:instruction float_mult} {:instruction float_inc} {:instruction float_rot} {:instruction float_inc} {:instruction float_inc} {:instruction integer_flush} {:instruction float_dup_items} {:instruction float_yank} {:instruction float_inc} {:instruction float_mult} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_inc} {:instruction integer_mod} {:instruction float_yankdup} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_inc} {:instruction integer_mod} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_mult} {:instruction float_inc} {:instruction integer_pop} {:instruction print_float} {:instruction float_flush} {:instruction integer_dup_times} {:instruction float_flush} {:instruction integer_dec})
Best program: (in1 float_inc float_yankdup float_inc float_inc tag_integer_29 integer_rot float_inc in2 float_inc float_inc float_inc float_rot float_inc float_inc float_min float_inc integer_max float_div float_inc integer_flush float_dec float_yankdup float_inc float_inc float_dec float_div float_inc float_mult float_inc float_rot float_inc float_inc integer_flush float_dup_items float_yank float_inc float_mult float_inc float_yankdup float_inc integer_mod float_yankdup float_inc float_yankdup float_inc integer_mod float_inc float_inc float_inc float_mult float_inc integer_pop print_float float_flush integer_dup_times float_flush integer_dec)
Errors: [34.0 13 79.0 13 91.0 12 49.0 2 67.0 3 98.0 2 26.0 2 50.0 2 36.0 2 73.0 2 0.0 0 30.0 2 8.0 1 6.0 2 43.0 3 57.0 2 21.0 2 25.0 2 18.0 3 15.0 2 29.0 2 5.0 3 47.0 2 73.0 3 40.0 1]
Total: 1103.0
Mean: 22.06
Genome size: 58
Size: 59
Percent parens: 0.017
--- Population Statistics ---
Average total errors in population: 2327.5866229
Median total errors in population: 1103.0
Error averages by case: (81.8490833 12.755 120.96081210000003 12.775 131.61884759999998 11.999 99.63725170000001 3.261 115.11145469999998 3.934 138.20229690000002 2.962 76.0335238 3.023 97.5721286 3.209 84.44406719999999 3.072 114.75559429999998 2.903 53.286534 1.646 83.27183660000003 3.396 56.87431029999999 2.197 55.373612000000016 2.959 91.69837850000002 3.929 108.19032019999997 3.43 67.82478689999999 2.914 69.41011689999998 2.907 70.2110317 3.89 69.17224280000002 3.025 73.76977369999999 3.711 58.30196030000001 3.746 93.78044349999999 3.009 122.19145750000001 3.968 86.9387578 2.486)
Error minima by case: (1.441 6 15.801 2 12.638 8 24.8727 2 15.5604 1 0.5547 1 15.6208 1 25.1127 2 10.8389 1 0.3909 1 0.0 0 6.0 2 0.0 0 0.0 0 1.0144 2 22.0508 2 3.0 1 0.7342 1 1.0 1 7.0 1 1.3039 1 0.0 0 1.5539 1 0.193 2 15.3811 1)
Average genome size in population (length): 59.164
Average program size in population (points): 60.164
Average percent parens in population: 0.017
Minimum age in population: 241.9747577336387
Maximum age in population: 247.4249992849561
Average age in population: 245.112899654382
Median age in population: 245.1890352615073
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 10
Genome diversity (% unique Plush genomes):	 0.775
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 10
Syntactic diversity (% unique Push programs):	 0.775
Total error diversity:				 0.085
Error (vector) diversity:			 0.093
Behavioral diversity:				 0.094
--- Run Statistics ---
Number of program evaluations used so far: 174000
Number of point (instruction) evaluations so far: 316481059
--- Timings ---
Current time: 1529615486950 milliseconds
Total Time:         631.9 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       230.0 seconds, 36.4%
Fitness Testing:    313.2 seconds, 49.6%
Report:              88.6 seconds, 14.0%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 173
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 174
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 174
;;******************************
;; -*- Number IO problem report - generation 174
Test total error for best: 59131.0
Test mean error for best: 29.56550
;;------------------------------
Outputs of best individual on training cases:
Correct output: 1.9526623133   | Program output: -32.0473376867
Correct output: -70.8009773522 | Program output: 8.1990226478  
Correct output: -13.7839009431 | Program output: 77.2160990569 
Correct output: 143.8727406396 | Program output: 94.8727406396 
Correct output: 136.4396027174 | Program output: 69.4396027174 
Correct output: 18.5044280613  | Program output: 116.5044280613
Correct output: 92.0568646792  | Program output: 66.0568646792 
Correct output: 71.8873476205  | Program output: 121.8873476205
Correct output: -10.8388749243 | Program output: -46.8388749243
Correct output: 0.9299825981   | Program output: 73.9299825981 
Correct output: -26.7840412284 | Program output: -26.7840412284
Correct output: -102.1264221267 | Program output: -72.1264221267
Correct output: 40.8061668642  | Program output: 48.8061668642 
Correct output: -5.2544966331  | Program output: -11.2544966331
Correct output: 102.9855886244 | Program output: 59.9855886244 
Correct output: -118.0507723766 | Program output: -61.0507723766
Correct output: 55.9371769928  | Program output: 76.9371769928 
Correct output: 4.2657989984   | Program output: 29.2657989984 
Correct output: 96.7057987603  | Program output: 114.7057987603
Correct output: 122.162446611  | Program output: 107.162446611 
Correct output: 30.0102027945  | Program output: 1.0102027945  
Correct output: 104.5822387035 | Program output: 99.5822387035 
Correct output: -1.5538743366  | Program output: -48.5538743366
Correct output: 166.8070496115 | Program output: 93.8070496115 
Correct output: 58.6188945281  | Program output: 98.6188945281 
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction in1} {:instruction integer_dup_items} {:instruction float_dup_items} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_inc} {:instruction float_dup_items} {:instruction float_inc} {:instruction float_inc} {:instruction integer_dec} {:instruction tagged_474} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_inc} {:instruction float_inc} {:instruction float_div} {:instruction float_inc} {:instruction float_yankdup} {:instruction integer_max} {:instruction integer_mod} {:instruction float_inc} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_inc} {:instruction float_inc} {:instruction integer_shove} {:instruction float_div} {:instruction float_inc} {:instruction integer_div} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_inc} {:instruction float_mult} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_inc} {:instruction integer_pop} {:instruction float_inc} {:instruction float_inc} {:instruction float_add} {:instruction integer_max} {:instruction integer_dec} {:instruction float_inc} {:instruction float_inc} {:instruction integer_add} {:instruction integer_max} {:instruction integer_dec} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction print_float} {:instruction integer_flush})
Best program: (in1 integer_dup_items float_dup_items float_inc float_yankdup float_inc float_dup_items float_inc float_inc integer_dec tagged_474 float_inc float_yankdup float_inc float_inc float_div float_inc float_yankdup integer_max integer_mod float_inc float_inc float_yankdup float_inc float_inc integer_shove float_div float_inc integer_div float_inc float_yankdup float_inc float_mult float_inc float_yankdup float_inc integer_pop float_inc float_inc float_add integer_max integer_dec float_inc float_inc integer_add integer_max integer_dec float_inc float_inc float_inc print_float integer_flush)
Errors: [34.0 13 79.0 13 91.0 12 49.0 2 67.0 3 98.0 2 26.0 2 50.0 2 36.0 2 73.0 2 0.0 0 30.0 2 8.0 1 6.0 2 43.0 3 57.0 2 21.0 2 25.0 2 18.0 3 15.0 2 29.0 2 5.0 3 47.0 2 73.0 3 40.0 1]
Total: 1103.0
Mean: 22.06
Genome size: 52
Size: 53
Percent parens: 0.019
--- Population Statistics ---
Average total errors in population: 2407.1334941999994
Median total errors in population: 1103.0
Error averages by case: (84.42317330000002 12.758 120.97450540000003 12.752 137.07123840000003 12.008 103.39996710000003 3.22 118.7047222 3.895 142.95896610000003 2.978 80.03544850000002 2.99 102.20726770000003 3.182 87.08133910000001 3.053 120.17151990000004 2.922 55.20826610000002 1.65 86.20962099999998 3.415 60.984695200000004 2.157 54.029573299999996 2.918 95.54400419999999 3.895 110.82413059999995 3.403 73.31571990000002 2.907 71.97749180000004 2.9 73.52122440000002 3.88 72.31201900000003 3.006 71.95081750000001 3.843 62.601523199999995 3.75 96.6081318 3.001 125.71679899999997 3.911 92.43532950000002 2.472)
Error minima by case: (0.1649 8 16.2114 1 1.4593 9 15.8727 2 2.5604 2 0.4648 1 10.0569 1 33.0 2 10.8389 1 0.7117 1 0.0 0 13.0 2 0.0 0 0.0 0 1.9856 2 9.0508 2 4.0 1 0.2658 1 1.0 1 5.0 1 2.1325 1 0.0 0 1.5539 1 0.807 2 23.0 1)
Average genome size in population (length): 59.405
Average program size in population (points): 60.405
Average percent parens in population: 0.017
Minimum age in population: 242.9747577336387
Maximum age in population: 248.3243525649892
Average age in population: 246.5367478652381
Median age in population: 246.5673995780378
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 7
Genome diversity (% unique Plush genomes):	 0.81
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 7
Syntactic diversity (% unique Push programs):	 0.81
Total error diversity:				 0.088
Error (vector) diversity:			 0.097
Behavioral diversity:				 0.097
--- Run Statistics ---
Number of program evaluations used so far: 175000
Number of point (instruction) evaluations so far: 317966209
--- Timings ---
Current time: 1529615490252 milliseconds
Total Time:         635.2 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       231.3 seconds, 36.4%
Fitness Testing:    314.8 seconds, 49.6%
Report:              89.0 seconds, 14.0%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 174
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 175
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 175
;;******************************
;; -*- Number IO problem report - generation 175
Test total error for best: 59131.0
Test mean error for best: 29.56550
;;------------------------------
Outputs of best individual on training cases:
Correct output: 1.9526623133   | Program output: -32.0473376867
Correct output: -70.8009773522 | Program output: 8.1990226478  
Correct output: -13.7839009431 | Program output: 77.2160990569 
Correct output: 143.8727406396 | Program output: 94.8727406396 
Correct output: 136.4396027174 | Program output: 69.4396027174 
Correct output: 18.5044280613  | Program output: 116.5044280613
Correct output: 92.0568646792  | Program output: 66.0568646792 
Correct output: 71.8873476205  | Program output: 121.8873476205
Correct output: -10.8388749243 | Program output: -46.8388749243
Correct output: 0.9299825981   | Program output: 73.9299825981 
Correct output: -26.7840412284 | Program output: -26.7840412284
Correct output: -102.1264221267 | Program output: -72.1264221267
Correct output: 40.8061668642  | Program output: 48.8061668642 
Correct output: -5.2544966331  | Program output: -11.2544966331
Correct output: 102.9855886244 | Program output: 59.9855886244 
Correct output: -118.0507723766 | Program output: -61.0507723766
Correct output: 55.9371769928  | Program output: 76.9371769928 
Correct output: 4.2657989984   | Program output: 29.2657989984 
Correct output: 96.7057987603  | Program output: 114.7057987603
Correct output: 122.162446611  | Program output: 107.162446611 
Correct output: 30.0102027945  | Program output: 1.0102027945  
Correct output: 104.5822387035 | Program output: 99.5822387035 
Correct output: -1.5538743366  | Program output: -48.5538743366
Correct output: 166.8070496115 | Program output: 93.8070496115 
Correct output: 58.6188945281  | Program output: 98.6188945281 
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction in1} {:instruction integer_max} {:instruction tagged_55} {:instruction float_shove} {:instruction integer_max} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_mod} {:instruction float_inc} {:instruction integer_dup_items} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_yank} {:instruction float_inc} {:instruction integer_max} {:instruction integer_mod} {:instruction float_inc} {:instruction float_shove} {:instruction float_inc} {:instruction integer_dup_times} {:instruction float_inc} {:instruction float_div} {:instruction float_inc} {:instruction float_inc} {:instruction integer_dup_times} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_inc} {:instruction integer_mod} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_mult} {:instruction float_inc} {:instruction integer_pop} {:instruction print_float} {:instruction float_flush} {:instruction integer_dup_times} {:instruction float_flush} {:instruction float_yankdup} {:instruction integer_swap} {:instruction integer_mod} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_add} {:instruction integer_dup_items} {:instruction float_inc} {:instruction tagged_239} {:instruction print_float} {:instruction float_flush} {:instruction float_yankdup} {:instruction integer_dec} {:instruction float_inc} {:instruction float_yankdup} {:instruction -43} {:instruction tag_float_853} {:instruction float_add} {:instruction float_max} {:instruction float_frominteger} {:instruction integer_yank} {:instruction float_dup_items} {:instruction float_flush} {:instruction integer_shove} {:instruction integer_dup_times} {:instruction integer_swap} {:instruction tag_float_856})
Best program: (in1 integer_max tagged_55 float_shove integer_max float_inc float_inc float_inc integer_mod float_inc integer_dup_items float_inc float_inc float_inc integer_yank float_inc integer_max integer_mod float_inc float_shove float_inc integer_dup_times float_inc float_div float_inc float_inc integer_dup_times float_inc float_inc float_inc float_inc float_yankdup float_inc float_yankdup float_inc float_yankdup float_inc integer_mod float_inc float_inc float_inc float_mult float_inc integer_pop print_float float_flush integer_dup_times float_flush float_yankdup integer_swap integer_mod float_inc float_inc float_inc integer_add integer_dup_items float_inc tagged_239 print_float float_flush float_yankdup integer_dec float_inc float_yankdup -43 tag_float_853 float_add float_max float_frominteger integer_yank float_dup_items float_flush integer_shove integer_dup_times integer_swap tag_float_856)
Errors: [34.0 13 79.0 13 91.0 12 49.0 2 67.0 3 98.0 2 26.0 2 50.0 2 36.0 2 73.0 2 0.0 0 30.0 2 8.0 1 6.0 2 43.0 3 57.0 2 21.0 2 25.0 2 18.0 3 15.0 2 29.0 2 5.0 3 47.0 2 73.0 3 40.0 1]
Total: 1103.0
Mean: 22.06
Genome size: 76
Size: 77
Percent parens: 0.013
--- Population Statistics ---
Average total errors in population: 2839.5086893000002
Median total errors in population: 1103.0
Error averages by case: (101.465675 12.758 138.83871410000006 12.811 153.4766656 12.075 119.65155820000007 3.47 134.85214720000005 4.128 159.23162310000004 3.177 97.06948100000001 3.204 118.77864469999997 3.432 103.87263490000001 3.311 136.93905610000004 3.116 72.9266847 1.938 102.81755779999995 3.689 78.7711029 2.404 72.93586649999999 3.155 112.32441789999997 4.1 127.11032719999996 3.683 91.04772370000002 3.095 90.89610859999999 3.116 90.52181 4.078 89.09767630000002 3.215 91.34743069999996 3.896 79.62710669999998 3.934 113.32934780000005 3.224 141.55709060000004 4.142 109.156238 2.715)
Error minima by case: (0.4234 8 2.5933 1 12.3235 9 28.8727 1 6.5604 2 0.1378 1 17.0 1 26.0 2 6.8389 1 0.5531 1 0.0 0 6.0 2 0.0 0 0.0 0 0.0144 2 13.0508 2 0.0 0 0.2043 1 1.0 1 6.0 1 3.0102 1 0.0 0 0.19 1 3.807 2 16.0 1)
Average genome size in population (length): 58.879
Average program size in population (points): 59.879
Average percent parens in population: 0.017
Minimum age in population: 245.691715992432
Maximum age in population: 250.1291121250749
Average age in population: 247.9751056047984
Median age in population: 248.0113330968273
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 9
Genome diversity (% unique Plush genomes):	 0.803
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 9
Syntactic diversity (% unique Push programs):	 0.803
Total error diversity:				 0.085
Error (vector) diversity:			 0.093
Behavioral diversity:				 0.094
--- Run Statistics ---
Number of program evaluations used so far: 176000
Number of point (instruction) evaluations so far: 319438209
--- Timings ---
Current time: 1529615493641 milliseconds
Total Time:         638.5 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       232.5 seconds, 36.4%
Fitness Testing:    316.4 seconds, 49.6%
Report:              89.4 seconds, 14.0%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 175
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 176
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 176
;;******************************
;; -*- Number IO problem report - generation 176
Test total error for best: 59131.0
Test mean error for best: 29.56550
;;------------------------------
Outputs of best individual on training cases:
Correct output: 1.9526623133   | Program output: -32.0473376867
Correct output: -70.8009773522 | Program output: 8.1990226478  
Correct output: -13.7839009431 | Program output: 77.2160990569 
Correct output: 143.8727406396 | Program output: 94.8727406396 
Correct output: 136.4396027174 | Program output: 69.4396027174 
Correct output: 18.5044280613  | Program output: 116.5044280613
Correct output: 92.0568646792  | Program output: 66.0568646792 
Correct output: 71.8873476205  | Program output: 121.8873476205
Correct output: -10.8388749243 | Program output: -46.8388749243
Correct output: 0.9299825981   | Program output: 73.9299825981 
Correct output: -26.7840412284 | Program output: -26.7840412284
Correct output: -102.1264221267 | Program output: -72.1264221267
Correct output: 40.8061668642  | Program output: 48.8061668642 
Correct output: -5.2544966331  | Program output: -11.2544966331
Correct output: 102.9855886244 | Program output: 59.9855886244 
Correct output: -118.0507723766 | Program output: -61.0507723766
Correct output: 55.9371769928  | Program output: 76.9371769928 
Correct output: 4.2657989984   | Program output: 29.2657989984 
Correct output: 96.7057987603  | Program output: 114.7057987603
Correct output: 122.162446611  | Program output: 107.162446611 
Correct output: 30.0102027945  | Program output: 1.0102027945  
Correct output: 104.5822387035 | Program output: 99.5822387035 
Correct output: -1.5538743366  | Program output: -48.5538743366
Correct output: 166.8070496115 | Program output: 93.8070496115 
Correct output: 58.6188945281  | Program output: 98.6188945281 
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction in1} {:instruction integer_max} {:instruction integer_div} {:instruction integer_dup_items} {:instruction float_yankdup} {:instruction integer_max} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_inc} {:instruction in2} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_rot} {:instruction float_inc} {:instruction float_inc} {:instruction integer_yank} {:instruction float_inc} {:instruction integer_max} {:instruction float_div} {:instruction float_inc} {:instruction integer_flush} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_inc} {:instruction float_div} {:instruction float_inc} {:instruction float_mult} {:instruction float_inc} {:instruction float_dup_items} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_rot} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_inc} {:instruction integer_mod} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_mult} {:instruction float_inc} {:instruction integer_pop} {:instruction print_float} {:instruction float_flush} {:instruction float_pop} {:instruction float_mult} {:instruction float_stackdepth} {:instruction float_div} {:instruction float_inc} {:instruction integer_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_mult} {:instruction float_sub} {:instruction integer_flush} {:instruction float_mult} {:instruction -58} {:instruction float_inc} {:instruction print_float} {:instruction float_max} {:instruction float_pop} {:instruction float_inc} {:instruction integer_mod} {:instruction float_shove} {:instruction print_float})
Best program: (in1 integer_max integer_div integer_dup_items float_yankdup integer_max float_inc float_yankdup float_inc in2 float_inc float_inc float_inc float_rot float_inc float_inc integer_yank float_inc integer_max float_div float_inc integer_flush float_inc float_yankdup float_inc float_div float_inc float_mult float_inc float_dup_items float_inc float_inc float_inc float_inc integer_rot float_inc float_yankdup float_inc float_yankdup float_inc integer_mod float_inc float_inc float_inc float_mult float_inc integer_pop print_float float_flush float_pop float_mult float_stackdepth float_div float_inc integer_inc float_inc float_inc float_inc float_mult float_sub integer_flush float_mult -58 float_inc print_float float_max float_pop float_inc integer_mod float_shove print_float)
Errors: [34.0 13 79.0 13 91.0 12 49.0 2 67.0 3 98.0 2 26.0 2 50.0 2 36.0 2 73.0 2 0.0 0 30.0 2 8.0 1 6.0 2 43.0 3 57.0 2 21.0 2 25.0 2 18.0 3 15.0 2 29.0 2 5.0 3 47.0 2 73.0 3 40.0 1]
Total: 1103.0
Mean: 22.06
Genome size: 71
Size: 72
Percent parens: 0.014
--- Population Statistics ---
Average total errors in population: 2362.6547489
Median total errors in population: 1103.0
Error averages by case: (81.75696979999998 12.738 120.6671543 12.705 134.28485759999998 11.988 101.20920849999999 3.306 116.06497919999997 3.937 140.90407100000002 3.016 77.1451765 3.063 100.98162890000005 3.285 84.68008730000003 3.144 117.34054579999999 2.984 53.61600679999998 1.801 86.22123880000004 3.532 57.47223430000001 2.24 54.91188539999998 3.0 92.62403300000001 3.958 110.77128979999996 3.533 69.98961010000001 2.934 70.5103913 2.972 71.96090390000003 3.934 71.10281489999998 3.071 71.76956640000002 3.849 60.340678100000005 3.783 93.97067299999998 3.083 123.61639260000003 3.977 90.31635160000002 2.593)
Error minima by case: (0.6288 8 13.3644 1 13.7839 8 19.8727 1 2.5604 2 0.4753 1 14.0569 1 11.1567 2 6.7251 1 0.93 1 0.0 0 9.0 2 0.0 0 0.0 0 2.0144 2 9.0508 2 0.0 0 0.1331 1 1.0 1 5.0 1 2.7879 1 0.0 0 1.5539 1 1.807 2 2.1117 1)
Average genome size in population (length): 58.328
Average program size in population (points): 59.328
Average percent parens in population: 0.017
Minimum age in population: 246.691715992432
Maximum age in population: 251.4577782996063
Average age in population: 249.3542878092724
Median age in population: 249.3849030575029
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 10
Genome diversity (% unique Plush genomes):	 0.811
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 10
Syntactic diversity (% unique Push programs):	 0.811
Total error diversity:				 0.093
Error (vector) diversity:			 0.103
Behavioral diversity:				 0.103
--- Run Statistics ---
Number of program evaluations used so far: 177000
Number of point (instruction) evaluations so far: 320896434
--- Timings ---
Current time: 1529615497023 milliseconds
Total Time:         641.9 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       233.8 seconds, 36.4%
Fitness Testing:    318.0 seconds, 49.5%
Report:              89.9 seconds, 14.0%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 176
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 177
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 177
;;******************************
;; -*- Number IO problem report - generation 177
Test total error for best: 59131.0
Test mean error for best: 29.56550
;;------------------------------
Outputs of best individual on training cases:
Correct output: 1.9526623133   | Program output: -32.0473376867
Correct output: -70.8009773522 | Program output: 8.1990226478  
Correct output: -13.7839009431 | Program output: 77.2160990569 
Correct output: 143.8727406396 | Program output: 94.8727406396 
Correct output: 136.4396027174 | Program output: 69.4396027174 
Correct output: 18.5044280613  | Program output: 116.5044280613
Correct output: 92.0568646792  | Program output: 66.0568646792 
Correct output: 71.8873476205  | Program output: 121.8873476205
Correct output: -10.8388749243 | Program output: -46.8388749243
Correct output: 0.9299825981   | Program output: 73.9299825981 
Correct output: -26.7840412284 | Program output: -26.7840412284
Correct output: -102.1264221267 | Program output: -72.1264221267
Correct output: 40.8061668642  | Program output: 48.8061668642 
Correct output: -5.2544966331  | Program output: -11.2544966331
Correct output: 102.9855886244 | Program output: 59.9855886244 
Correct output: -118.0507723766 | Program output: -61.0507723766
Correct output: 55.9371769928  | Program output: 76.9371769928 
Correct output: 4.2657989984   | Program output: 29.2657989984 
Correct output: 96.7057987603  | Program output: 114.7057987603
Correct output: 122.162446611  | Program output: 107.162446611 
Correct output: 30.0102027945  | Program output: 1.0102027945  
Correct output: 104.5822387035 | Program output: 99.5822387035 
Correct output: -1.5538743366  | Program output: -48.5538743366
Correct output: 166.8070496115 | Program output: 93.8070496115 
Correct output: 58.6188945281  | Program output: 98.6188945281 
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction in1} {:instruction integer_max} {:instruction tagged_89} {:instruction float_shove} {:instruction integer_max} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_mod} {:instruction float_inc} {:instruction integer_dup_items} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_yank} {:instruction float_inc} {:instruction integer_max} {:instruction integer_mod} {:instruction float_inc} {:instruction float_shove} {:instruction float_inc} {:instruction integer_dup_times} {:instruction float_inc} {:instruction float_div} {:instruction float_inc} {:instruction float_inc} {:instruction float_rot} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_inc} {:instruction integer_mod} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_mult} {:instruction float_inc} {:instruction integer_pop} {:instruction print_float} {:instruction float_inc} {:instruction float_inc} {:instruction float_swap} {:instruction float_inc} {:instruction print_float} {:instruction float_dup_items} {:instruction float_div} {:instruction float_inc} {:instruction float_inc})
Best program: (in1 integer_max tagged_89 float_shove integer_max float_inc float_inc float_inc integer_mod float_inc integer_dup_items float_inc float_inc float_inc integer_yank float_inc integer_max integer_mod float_inc float_shove float_inc integer_dup_times float_inc float_div float_inc float_inc float_rot float_inc float_inc float_inc float_inc float_yankdup float_inc float_yankdup float_inc float_yankdup float_inc integer_mod float_inc float_inc float_inc float_mult float_inc integer_pop print_float float_inc float_inc float_swap float_inc print_float float_dup_items float_div float_inc float_inc)
Errors: [34.0 13 79.0 13 91.0 12 49.0 2 67.0 3 98.0 2 26.0 2 50.0 2 36.0 2 73.0 2 0.0 0 30.0 2 8.0 1 6.0 2 43.0 3 57.0 2 21.0 2 25.0 2 18.0 3 15.0 2 29.0 2 5.0 3 47.0 2 73.0 3 40.0 1]
Total: 1103.0
Mean: 22.06
Genome size: 54
Size: 55
Percent parens: 0.018
--- Population Statistics ---
Average total errors in population: 2808.6239004999998
Median total errors in population: 1103.0
Error averages by case: (101.35969630000001 12.749 134.59820670000005 12.733 151.758291 12.043 119.5474001 3.434 134.97327669999999 4.084 157.0297123000001 3.154 96.89957510000002 3.175 116.8312776 3.384 103.76228459999999 3.261 135.1511026 3.089 72.72036849999999 1.896 101.63089690000001 3.645 78.00202790000002 2.361 70.6072333 3.123 112.2976683 4.08 125.98266889999998 3.638 89.49987949999998 3.07 87.30132719999997 3.074 89.51627830000001 4.065 88.7380398 3.166 88.04560169999999 4.1 79.13427189999996 3.924 113.08925749999997 3.178 141.66823179999997 4.11 107.27032599999998 2.673)
Error minima by case: (0.6288 7 44.4377 1 15.965 8 33.8727 2 7.5604 2 0.5245 1 17.6884 1 30.0 2 13.2964 1 2.7977 1 0.0 0 10.0 2 0.0 0 0.0 0 4.9856 2 10.9897 2 1.0 1 1.1331 1 0.0 0 6.6126 1 2.0102 1 0.0 0 3.8005 1 8.807 2 20.0 1)
Average genome size in population (length): 58.215
Average program size in population (points): 59.215
Average percent parens in population: 0.017
Minimum age in population: 247.691715992432
Maximum age in population: 252.9812154456144
Average age in population: 250.733358225519
Median age in population: 250.7981841829445
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 14
Genome diversity (% unique Plush genomes):	 0.793
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 14
Syntactic diversity (% unique Push programs):	 0.793
Total error diversity:				 0.079
Error (vector) diversity:			 0.09
Behavioral diversity:				 0.091
--- Run Statistics ---
Number of program evaluations used so far: 178000
Number of point (instruction) evaluations so far: 322351834
--- Timings ---
Current time: 1529615500334 milliseconds
Total Time:         645.3 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       235.2 seconds, 36.4%
Fitness Testing:    319.5 seconds, 49.5%
Report:              90.4 seconds, 14.0%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 177
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 178
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 178
;;******************************
;; -*- Number IO problem report - generation 178
Test total error for best: 59131.0
Test mean error for best: 29.56550
;;------------------------------
Outputs of best individual on training cases:
Correct output: 1.9526623133   | Program output: -32.0473376867
Correct output: -70.8009773522 | Program output: 8.1990226478  
Correct output: -13.7839009431 | Program output: 77.2160990569 
Correct output: 143.8727406396 | Program output: 94.8727406396 
Correct output: 136.4396027174 | Program output: 69.4396027174 
Correct output: 18.5044280613  | Program output: 116.5044280613
Correct output: 92.0568646792  | Program output: 66.0568646792 
Correct output: 71.8873476205  | Program output: 121.8873476205
Correct output: -10.8388749243 | Program output: -46.8388749243
Correct output: 0.9299825981   | Program output: 73.9299825981 
Correct output: -26.7840412284 | Program output: -26.7840412284
Correct output: -102.1264221267 | Program output: -72.1264221267
Correct output: 40.8061668642  | Program output: 48.8061668642 
Correct output: -5.2544966331  | Program output: -11.2544966331
Correct output: 102.9855886244 | Program output: 59.9855886244 
Correct output: -118.0507723766 | Program output: -61.0507723766
Correct output: 55.9371769928  | Program output: 76.9371769928 
Correct output: 4.2657989984   | Program output: 29.2657989984 
Correct output: 96.7057987603  | Program output: 114.7057987603
Correct output: 122.162446611  | Program output: 107.162446611 
Correct output: 30.0102027945  | Program output: 1.0102027945  
Correct output: 104.5822387035 | Program output: 99.5822387035 
Correct output: -1.5538743366  | Program output: -48.5538743366
Correct output: 166.8070496115 | Program output: 93.8070496115 
Correct output: 58.6188945281  | Program output: 98.6188945281 
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction in1} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_inc} {:instruction float_inc} {:instruction tag_integer_29} {:instruction integer_rot} {:instruction float_inc} {:instruction in2} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_rot} {:instruction float_inc} {:instruction float_inc} {:instruction float_min} {:instruction float_inc} {:instruction integer_max} {:instruction float_div} {:instruction float_inc} {:instruction integer_flush} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_inc} {:instruction float_div} {:instruction float_inc} {:instruction float_mult} {:instruction float_inc} {:instruction float_rot} {:instruction float_inc} {:instruction float_inc} {:instruction integer_flush} {:instruction float_dup_items} {:instruction float_yank} {:instruction float_inc} {:instruction float_div} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_inc} {:instruction integer_mod} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_min} {:instruction float_inc} {:instruction float_mod} {:instruction print_float})
Best program: (in1 float_inc float_yankdup float_inc float_inc tag_integer_29 integer_rot float_inc in2 float_inc float_inc float_inc float_rot float_inc float_inc float_min float_inc integer_max float_div float_inc integer_flush float_inc float_yankdup float_inc float_div float_inc float_mult float_inc float_rot float_inc float_inc integer_flush float_dup_items float_yank float_inc float_div float_inc float_yankdup float_inc integer_mod float_inc float_inc float_inc integer_min float_inc float_mod print_float)
Errors: [34.0 13 79.0 13 91.0 12 49.0 2 67.0 3 98.0 2 26.0 2 50.0 2 36.0 2 73.0 2 0.0 0 30.0 2 8.0 1 6.0 2 43.0 3 57.0 2 21.0 2 25.0 2 18.0 3 15.0 2 29.0 2 5.0 3 47.0 2 73.0 3 40.0 1]
Total: 1103.0
Mean: 22.06
Genome size: 47
Size: 48
Percent parens: 0.021
--- Population Statistics ---
Average total errors in population: 2397.7821746000004
Median total errors in population: 1103.0
Error averages by case: (84.28354110000001 12.751 120.70177639999999 12.757 135.830589 12.013 103.71783070000002 3.276 118.99895800000004 3.931 141.1179593 2.997 80.51754110000002 3.026 100.7185729 3.236 86.89274409999999 3.098 118.9983255 2.932 55.75568429999999 1.75 85.725876 3.479 60.84559039999998 2.176 55.016318199999986 2.971 95.7889007 3.907 110.38464209999997 3.476 70.52123270000001 2.903 70.53134529999998 2.91 73.39815530000003 3.901 72.5327484 3.034 71.65317329999999 3.881 62.6976299 3.735 96.2991946 3.049 126.08370219999998 3.969 91.08014310000003 2.532)
Error minima by case: (0.1577 7 17.8318 1 5.8318 9 20.8727 1 2.5604 2 0.4069 1 15.0 1 26.0 2 10.0723 1 0.8283 1 0.0 0 6.0 2 0.0 0 0.0 0 6.9856 2 9.0508 2 0.0628 1 0.3814 1 1.0 1 4.0 1 4.0102 1 0.0 0 1.5646 1 4.193 2 16.0 1)
Average genome size in population (length): 58.66
Average program size in population (points): 59.66
Average percent parens in population: 0.017
Minimum age in population: 248.691715992432
Maximum age in population: 254.3509048441998
Average age in population: 252.1833838956364
Median age in population: 252.2361535143555
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 13
Genome diversity (% unique Plush genomes):	 0.81
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 13
Syntactic diversity (% unique Push programs):	 0.81
Total error diversity:				 0.092
Error (vector) diversity:			 0.101
Behavioral diversity:				 0.101
--- Run Statistics ---
Number of program evaluations used so far: 179000
Number of point (instruction) evaluations so far: 323818434
--- Timings ---
Current time: 1529615503615 milliseconds
Total Time:         648.6 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       236.5 seconds, 36.5%
Fitness Testing:    321.1 seconds, 49.5%
Report:              90.9 seconds, 14.0%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 178
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 179
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 179
;;******************************
;; -*- Number IO problem report - generation 179
Test total error for best: 59131.0
Test mean error for best: 29.56550
;;------------------------------
Outputs of best individual on training cases:
Correct output: 1.9526623133   | Program output: -32.0473376867
Correct output: -70.8009773522 | Program output: 8.1990226478  
Correct output: -13.7839009431 | Program output: 77.2160990569 
Correct output: 143.8727406396 | Program output: 94.8727406396 
Correct output: 136.4396027174 | Program output: 69.4396027174 
Correct output: 18.5044280613  | Program output: 116.5044280613
Correct output: 92.0568646792  | Program output: 66.0568646792 
Correct output: 71.8873476205  | Program output: 121.8873476205
Correct output: -10.8388749243 | Program output: -46.8388749243
Correct output: 0.9299825981   | Program output: 73.9299825981 
Correct output: -26.7840412284 | Program output: -26.7840412284
Correct output: -102.1264221267 | Program output: -72.1264221267
Correct output: 40.8061668642  | Program output: 48.8061668642 
Correct output: -5.2544966331  | Program output: -11.2544966331
Correct output: 102.9855886244 | Program output: 59.9855886244 
Correct output: -118.0507723766 | Program output: -61.0507723766
Correct output: 55.9371769928  | Program output: 76.9371769928 
Correct output: 4.2657989984   | Program output: 29.2657989984 
Correct output: 96.7057987603  | Program output: 114.7057987603
Correct output: 122.162446611  | Program output: 107.162446611 
Correct output: 30.0102027945  | Program output: 1.0102027945  
Correct output: 104.5822387035 | Program output: 99.5822387035 
Correct output: -1.5538743366  | Program output: -48.5538743366
Correct output: 166.8070496115 | Program output: 93.8070496115 
Correct output: 58.6188945281  | Program output: 98.6188945281 
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction in1} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_inc} {:instruction float_dup_items} {:instruction float_inc} {:instruction float_inc} {:instruction float_max} {:instruction tagged_646} {:instruction float_inc} {:instruction float_yank} {:instruction float_inc} {:instruction float_inc} {:instruction float_div} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_inc} {:instruction float_div} {:instruction float_inc} {:instruction integer_flush} {:instruction float_inc} {:instruction integer_dup} {:instruction float_inc} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_inc} {:instruction tag_integer_134} {:instruction float_inc} {:instruction float_div} {:instruction float_yankdup} {:instruction float_inc} {:instruction integer_div} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_add} {:instruction float_swap} {:instruction integer_dec} {:instruction float_inc} {:instruction float_inc} {:instruction integer_add} {:instruction float_inc} {:instruction print_float} {:instruction float_inc} {:instruction float_inc} {:instruction integer_mod} {:instruction integer_mod} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_dup_times} {:instruction float_inc} {:instruction integer_flush} {:instruction print_float} {:instruction float_flush} {:instruction print_float} {:instruction -58} {:instruction float_inc} {:instruction print_float} {:instruction float_max} {:instruction float_pop} {:instruction float_inc} {:instruction integer_dup_times} {:instruction float_shove})
Best program: (in1 float_inc float_yankdup float_inc float_dup_items float_inc float_inc float_max tagged_646 float_inc float_yank float_inc float_inc float_div float_inc float_yankdup float_inc float_yankdup float_inc float_div float_inc integer_flush float_inc integer_dup float_inc float_inc float_yankdup float_inc tag_integer_134 float_inc float_div float_yankdup float_inc integer_div float_inc float_inc float_inc float_inc float_add float_swap integer_dec float_inc float_inc integer_add float_inc print_float float_inc float_inc integer_mod integer_mod float_inc float_inc float_inc integer_dup_times float_inc integer_flush print_float float_flush print_float -58 float_inc print_float float_max float_pop float_inc integer_dup_times float_shove)
Errors: [34.0 13 79.0 13 91.0 12 49.0 2 67.0 3 98.0 2 26.0 2 50.0 2 36.0 2 73.0 2 0.0 0 30.0 2 8.0 1 6.0 2 43.0 3 57.0 2 21.0 2 25.0 2 18.0 3 15.0 2 29.0 2 5.0 3 47.0 2 73.0 3 40.0 1]
Total: 1103.0
Mean: 22.06
Genome size: 67
Size: 68
Percent parens: 0.015
--- Population Statistics ---
Average total errors in population: 2359.5376789000006
Median total errors in population: 1103.0
Error averages by case: (82.47837850000003 12.732 118.09968839999996 12.779 134.0899268000001 11.958 101.9475022 3.303 117.33963349999998 3.951 139.35265330000001 3.041 78.54743740000005 3.075 99.37616980000001 3.288 85.01524170000003 3.124 117.171598 2.984 54.2467717 1.767 84.53469420000002 3.505 59.8167238 2.269 53.035089 2.987 94.13657460000002 3.98 109.04861769999994 3.493 70.84386099999998 2.989 69.16372679999999 2.991 72.35175500000003 3.955 70.92940290000001 3.072 70.2697824 3.789 61.15345560000001 3.756 94.33673839999996 3.08 124.22877899999997 3.989 89.57347720000006 2.593)
Error minima by case: (0.5178 2 18.0494 1 13.7839 2 19.8727 1 1.4396 2 0.2695 1 14.0569 1 23.1391 2 5.8389 1 0.5536 1 0.0 0 14.0 2 0.0 0 0.0 0 0.9856 2 20.0508 2 5.0 1 0.2658 1 2.0 1 6.0 1 3.7996 1 0.0 0 1.5539 1 1.193 2 19.4578 1)
Average genome size in population (length): 58.379
Average program size in population (points): 59.379
Average percent parens in population: 0.017
Minimum age in population: 249.691715992432
Maximum age in population: 255.3767498057598
Average age in population: 253.6430798280558
Median age in population: 253.6531557217555
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 11
Genome diversity (% unique Plush genomes):	 0.797
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 11
Syntactic diversity (% unique Push programs):	 0.797
Total error diversity:				 0.093
Error (vector) diversity:			 0.102
Behavioral diversity:				 0.102
--- Run Statistics ---
Number of program evaluations used so far: 180000
Number of point (instruction) evaluations so far: 325277959
--- Timings ---
Current time: 1529615506947 milliseconds
Total Time:         651.8 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       237.8 seconds, 36.5%
Fitness Testing:    322.7 seconds, 49.5%
Report:              91.2 seconds, 14.0%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 179
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 180
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 180
;;******************************
;; -*- Number IO problem report - generation 180
Test total error for best: 59131.0
Test mean error for best: 29.56550
;;------------------------------
Outputs of best individual on training cases:
Correct output: 1.9526623133   | Program output: -32.0473376867
Correct output: -70.8009773522 | Program output: 8.1990226478  
Correct output: -13.7839009431 | Program output: 77.2160990569 
Correct output: 143.8727406396 | Program output: 94.8727406396 
Correct output: 136.4396027174 | Program output: 69.4396027174 
Correct output: 18.5044280613  | Program output: 116.5044280613
Correct output: 92.0568646792  | Program output: 66.0568646792 
Correct output: 71.8873476205  | Program output: 121.8873476205
Correct output: -10.8388749243 | Program output: -46.8388749243
Correct output: 0.9299825981   | Program output: 73.9299825981 
Correct output: -26.7840412284 | Program output: -26.7840412284
Correct output: -102.1264221267 | Program output: -72.1264221267
Correct output: 40.8061668642  | Program output: 48.8061668642 
Correct output: -5.2544966331  | Program output: -11.2544966331
Correct output: 102.9855886244 | Program output: 59.9855886244 
Correct output: -118.0507723766 | Program output: -61.0507723766
Correct output: 55.9371769928  | Program output: 76.9371769928 
Correct output: 4.2657989984   | Program output: 29.2657989984 
Correct output: 96.7057987603  | Program output: 114.7057987603
Correct output: 122.162446611  | Program output: 107.162446611 
Correct output: 30.0102027945  | Program output: 1.0102027945  
Correct output: 104.5822387035 | Program output: 99.5822387035 
Correct output: -1.5538743366  | Program output: -48.5538743366
Correct output: 166.8070496115 | Program output: 93.8070496115 
Correct output: 58.6188945281  | Program output: 98.6188945281 
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction in1} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_inc} {:instruction float_inc} {:instruction float_yankdup} {:instruction integer_add} {:instruction float_inc} {:instruction integer_div} {:instruction integer_mod} {:instruction float_div} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_sub} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_inc} {:instruction float_div} {:instruction float_inc} {:instruction integer_dup_items} {:instruction float_yankdup} {:instruction float_div} {:instruction float_inc} {:instruction integer_div} {:instruction float_inc} {:instruction tag_integer_979} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_inc} {:instruction float_yankdup} {:instruction integer_yankdup} {:instruction float_dup_items} {:instruction float_yank} {:instruction float_inc} {:instruction float_inc} {:instruction integer_mod} {:instruction float_inc} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_inc} {:instruction float_inc} {:instruction float_add} {:instruction integer_pop} {:instruction integer_dec} {:instruction float_inc} {:instruction float_inc} {:instruction float_swap} {:instruction float_inc} {:instruction print_float} {:instruction float_dup_items} {:instruction float_div} {:instruction float_inc} {:instruction float_inc} {:instruction float_yankdup})
Best program: (in1 float_inc float_yankdup float_inc float_inc float_yankdup integer_add float_inc integer_div integer_mod float_div float_inc float_inc float_inc float_sub float_inc float_yankdup float_inc float_yankdup float_inc float_div float_inc integer_dup_items float_yankdup float_div float_inc integer_div float_inc tag_integer_979 float_inc float_yankdup float_inc float_yankdup integer_yankdup float_dup_items float_yank float_inc float_inc integer_mod float_inc float_inc float_yankdup float_inc float_inc float_add integer_pop integer_dec float_inc float_inc float_swap float_inc print_float float_dup_items float_div float_inc float_inc float_yankdup)
Errors: [34.0 13 79.0 13 91.0 12 49.0 2 67.0 3 98.0 2 26.0 2 50.0 2 36.0 2 73.0 2 0.0 0 30.0 2 8.0 1 6.0 2 43.0 3 57.0 2 21.0 2 25.0 2 18.0 3 15.0 2 29.0 2 5.0 3 47.0 2 73.0 3 40.0 1]
Total: 1103.0
Mean: 22.06
Genome size: 57
Size: 58
Percent parens: 0.017
--- Population Statistics ---
Average total errors in population: 2325.1200479000004
Median total errors in population: 1103.0
Error averages by case: (81.10135609999999 12.756 121.9410229 12.681 132.40109100000004 12.001 99.80598230000001 3.235 115.4838922 3.878 137.7309877 2.953 76.60774970000001 2.982 96.77431280000003 3.182 83.53689620000002 3.028 115.49865210000002 2.915 52.288512700000005 1.692 81.40548160000003 3.417 57.38404109999999 2.169 54.791401700000016 2.917 92.3083419 3.884 106.20918630000001 3.416 69.8180366 2.904 69.7025214 2.905 69.26938000000004 3.878 68.47888019999999 3.016 74.50400470000002 3.965 58.731055599999976 3.73 93.0780392 2.987 122.31903599999998 3.909 87.06218590000005 2.488)
Error minima by case: (0.517 7 6.7413 1 19.2781 7 20.8727 1 2.5604 2 0.4761 1 15.0569 1 6.1972 2 1.6354 1 5.071 1 0.0 0 7.0 2 0.0 0 0.0 0 5.0144 2 9.0508 2 1.0 1 1.4424 1 1.0 1 6.0 1 6.0102 1 0.0 0 0.0988 1 1.193 2 4.564 1)
Average genome size in population (length): 57.584
Average program size in population (points): 58.584
Average percent parens in population: 0.017
Minimum age in population: 252.3094267034957
Maximum age in population: 256.9486689349831
Average age in population: 255.0120297130623
Median age in population: 255.091878525297
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 13
Genome diversity (% unique Plush genomes):	 0.773
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 13
Syntactic diversity (% unique Push programs):	 0.773
Total error diversity:				 0.08
Error (vector) diversity:			 0.088
Behavioral diversity:				 0.089
--- Run Statistics ---
Number of program evaluations used so far: 181000
Number of point (instruction) evaluations so far: 326717634
--- Timings ---
Current time: 1529615510229 milliseconds
Total Time:         655.1 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       239.1 seconds, 36.5%
Fitness Testing:    324.2 seconds, 49.5%
Report:              91.7 seconds, 14.0%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 180
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 181
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 181
;;******************************
;; -*- Number IO problem report - generation 181
Test total error for best: 59131.0
Test mean error for best: 29.56550
;;------------------------------
Outputs of best individual on training cases:
Correct output: 1.9526623133   | Program output: -32.0473376867
Correct output: -70.8009773522 | Program output: 8.1990226478  
Correct output: -13.7839009431 | Program output: 77.2160990569 
Correct output: 143.8727406396 | Program output: 94.8727406396 
Correct output: 136.4396027174 | Program output: 69.4396027174 
Correct output: 18.5044280613  | Program output: 116.5044280613
Correct output: 92.0568646792  | Program output: 66.0568646792 
Correct output: 71.8873476205  | Program output: 121.8873476205
Correct output: -10.8388749243 | Program output: -46.8388749243
Correct output: 0.9299825981   | Program output: 73.9299825981 
Correct output: -26.7840412284 | Program output: -26.7840412284
Correct output: -102.1264221267 | Program output: -72.1264221267
Correct output: 40.8061668642  | Program output: 48.8061668642 
Correct output: -5.2544966331  | Program output: -11.2544966331
Correct output: 102.9855886244 | Program output: 59.9855886244 
Correct output: -118.0507723766 | Program output: -61.0507723766
Correct output: 55.9371769928  | Program output: 76.9371769928 
Correct output: 4.2657989984   | Program output: 29.2657989984 
Correct output: 96.7057987603  | Program output: 114.7057987603
Correct output: 122.162446611  | Program output: 107.162446611 
Correct output: 30.0102027945  | Program output: 1.0102027945  
Correct output: 104.5822387035 | Program output: 99.5822387035 
Correct output: -1.5538743366  | Program output: -48.5538743366
Correct output: 166.8070496115 | Program output: 93.8070496115 
Correct output: 58.6188945281  | Program output: 98.6188945281 
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction in1} {:instruction integer_max} {:instruction in1} {:instruction integer_flush} {:instruction tagged_55} {:instruction float_shove} {:instruction float_shove} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_max} {:instruction float_inc} {:instruction integer_dup_items} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_yank} {:instruction float_inc} {:instruction integer_max} {:instruction float_div} {:instruction float_inc} {:instruction float_yank} {:instruction float_inc} {:instruction integer_dup_times} {:instruction float_inc} {:instruction float_div} {:instruction float_inc} {:instruction float_div} {:instruction float_inc} {:instruction integer_pop} {:instruction float_div} {:instruction float_inc} {:instruction float_mult} {:instruction float_inc} {:instruction float_rot} {:instruction float_inc} {:instruction float_inc} {:instruction float_div} {:instruction float_dup_items} {:instruction float_yank} {:instruction float_inc} {:instruction float_div} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_inc} {:instruction float_add} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_min} {:instruction float_inc} {:instruction float_min} {:instruction print_float} {:instruction float_inc} {:instruction print_float} {:instruction float_inc} {:instruction float_min} {:instruction float_mult} {:instruction float_tan})
Best program: (in1 integer_max in1 integer_flush tagged_55 float_shove float_shove float_inc float_inc float_inc float_max float_inc integer_dup_items float_inc float_inc float_inc integer_yank float_inc integer_max float_div float_inc float_yank float_inc integer_dup_times float_inc float_div float_inc float_div float_inc integer_pop float_div float_inc float_mult float_inc float_rot float_inc float_inc float_div float_dup_items float_yank float_inc float_div float_inc float_yankdup float_inc float_add float_inc float_inc float_inc integer_min float_inc float_min print_float float_inc print_float float_inc float_min float_mult float_tan)
Errors: [34.0 13 79.0 13 91.0 12 49.0 2 67.0 3 98.0 2 26.0 2 50.0 2 36.0 2 73.0 2 0.0 0 30.0 2 8.0 1 6.0 2 43.0 3 57.0 2 21.0 2 25.0 2 18.0 3 15.0 2 29.0 2 5.0 3 47.0 2 73.0 3 40.0 1]
Total: 1103.0
Mean: 22.06
Genome size: 59
Size: 60
Percent parens: 0.017
--- Population Statistics ---
Average total errors in population: 2468.8195868
Median total errors in population: 1103.0
Error averages by case: (86.8805303 12.773 125.6596587 12.797 139.75158470000005 12.006 104.848836 3.226 120.61688880000001 3.903 145.4378452 2.951 81.94207169999997 2.991 104.04864810000002 3.183 89.24806590000004 3.076 122.89571930000001 2.9 57.85891679999998 1.636 88.0873964 3.421 63.4067141 2.171 58.99932590000002 2.921 97.61353340000001 3.885 112.79280649999997 3.406 74.99896570000003 2.895 76.5496114 2.907 75.15338870000002 3.874 73.57270820000002 2.994 77.43093770000002 3.71 63.90131959999997 3.696 98.84871429999998 2.987 127.25464099999999 3.912 94.32875839999998 2.471)
Error minima by case: (1.1455 9 19.9947 1 13.5393 8 20.8727 1 8.5604 2 0.4347 1 15.0569 1 14.5013 2 1.8403 1 0.8276 1 0.0 0 4.1987 2 1.0 1 0.0 0 5.9856 2 18.0508 2 0.0 0 4.0 1 0.0 0 6.0 1 2.0102 1 0.0 0 0.6055 1 3.193 2 10.8953 1)
Average genome size in population (length): 57.781
Average program size in population (points): 58.781
Average percent parens in population: 0.017
Minimum age in population: 253.8707585596864
Maximum age in population: 258.7615880562404
Average age in population: 256.4014626057215
Median age in population: 256.4426666495419
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 11
Genome diversity (% unique Plush genomes):	 0.769
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 11
Syntactic diversity (% unique Push programs):	 0.769
Total error diversity:				 0.075
Error (vector) diversity:			 0.082
Behavioral diversity:				 0.083
--- Run Statistics ---
Number of program evaluations used so far: 182000
Number of point (instruction) evaluations so far: 328162159
--- Timings ---
Current time: 1529615513524 milliseconds
Total Time:         658.4 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       240.4 seconds, 36.5%
Fitness Testing:    325.8 seconds, 49.5%
Report:              92.2 seconds, 14.0%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 181
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 182
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 182
;;******************************
;; -*- Number IO problem report - generation 182
Test total error for best: 59131.0
Test mean error for best: 29.56550
;;------------------------------
Outputs of best individual on training cases:
Correct output: 1.9526623133   | Program output: -32.0473376867
Correct output: -70.8009773522 | Program output: 8.1990226478  
Correct output: -13.7839009431 | Program output: 77.2160990569 
Correct output: 143.8727406396 | Program output: 94.8727406396 
Correct output: 136.4396027174 | Program output: 69.4396027174 
Correct output: 18.5044280613  | Program output: 116.5044280613
Correct output: 92.0568646792  | Program output: 66.0568646792 
Correct output: 71.8873476205  | Program output: 121.8873476205
Correct output: -10.8388749243 | Program output: -46.8388749243
Correct output: 0.9299825981   | Program output: 73.9299825981 
Correct output: -26.7840412284 | Program output: -26.7840412284
Correct output: -102.1264221267 | Program output: -72.1264221267
Correct output: 40.8061668642  | Program output: 48.8061668642 
Correct output: -5.2544966331  | Program output: -11.2544966331
Correct output: 102.9855886244 | Program output: 59.9855886244 
Correct output: -118.0507723766 | Program output: -61.0507723766
Correct output: 55.9371769928  | Program output: 76.9371769928 
Correct output: 4.2657989984   | Program output: 29.2657989984 
Correct output: 96.7057987603  | Program output: 114.7057987603
Correct output: 122.162446611  | Program output: 107.162446611 
Correct output: 30.0102027945  | Program output: 1.0102027945  
Correct output: 104.5822387035 | Program output: 99.5822387035 
Correct output: -1.5538743366  | Program output: -48.5538743366
Correct output: 166.8070496115 | Program output: 93.8070496115 
Correct output: 58.6188945281  | Program output: 98.6188945281 
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction in1} {:instruction integer_max} {:instruction integer_div} {:instruction integer_sub} {:instruction integer_mod} {:instruction integer_max} {:instruction float_inc} {:instruction float_rot} {:instruction float_inc} {:instruction float_inc} {:instruction integer_mod} {:instruction float_inc} {:instruction integer_yank} {:instruction float_inc} {:instruction float_rot} {:instruction float_inc} {:instruction float_inc} {:instruction float_dup_times} {:instruction float_inc} {:instruction integer_inc} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_yank} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_div} {:instruction float_inc} {:instruction integer_flush} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_inc} {:instruction integer_mod} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_mult} {:instruction float_inc} {:instruction integer_pop} {:instruction print_float} {:instruction float_flush} {:instruction integer_dup_times} {:instruction integer_div} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_div} {:instruction float_yankdup})
Best program: (in1 integer_max integer_div integer_sub integer_mod integer_max float_inc float_rot float_inc float_inc integer_mod float_inc integer_yank float_inc float_rot float_inc float_inc float_dup_times float_inc integer_inc float_inc float_yankdup float_yank float_inc float_inc float_inc float_yankdup float_div float_inc integer_flush float_inc float_inc float_inc float_inc float_yankdup float_inc float_yankdup float_inc float_yankdup float_inc integer_mod float_inc float_inc float_inc float_mult float_inc integer_pop print_float float_flush integer_dup_times integer_div float_inc float_yankdup float_div float_yankdup)
Errors: [34.0 13 79.0 13 91.0 12 49.0 2 67.0 3 98.0 2 26.0 2 50.0 2 36.0 2 73.0 2 0.0 0 30.0 2 8.0 1 6.0 2 43.0 3 57.0 2 21.0 2 25.0 2 18.0 3 15.0 2 29.0 2 5.0 3 47.0 2 73.0 3 40.0 1]
Total: 1103.0
Mean: 22.06
Genome size: 55
Size: 56
Percent parens: 0.018
--- Population Statistics ---
Average total errors in population: 2531.6223347
Median total errors in population: 1103.0
Error averages by case: (89.94588570000002 12.76 125.0211317 12.731 140.87365800000003 12.02 108.59617639999999 3.285 124.17105450000003 3.958 146.1930895 3.035 85.73346930000001 3.028 105.74549359999999 3.235 92.3547191 3.127 124.12105870000003 2.968 61.370423200000005 1.731 90.90909849999998 3.495 66.91403220000004 2.226 59.99998670000003 3.016 101.31054650000003 3.952 115.68941619999998 3.511 78.37865010000002 2.952 76.23851860000002 2.979 78.37879190000004 3.937 77.31815609999998 3.059 77.51014570000001 3.932 67.73361040000002 3.819 101.67506450000002 3.055 130.94572490000002 3.99 96.18343270000003 2.51)
Error minima by case: (1.441 8 19.8279 1 9.8193 8 14.7982 1 6.5604 2 0.4757 1 13.0 1 31.0 2 5.8389 1 0.3909 1 0.0 0 11.0 2 0.0 0 0.0 0 7.9856 2 13.0508 2 2.0 1 0.132 1 1.0 1 2.0 1 4.0102 1 0.0 0 0.4461 1 8.1683 1 21.0 1)
Average genome size in population (length): 57.741
Average program size in population (points): 58.741
Average percent parens in population: 0.017
Minimum age in population: 255.0902336574984
Maximum age in population: 260.0124791469427
Average age in population: 257.7734836480072
Median age in population: 257.8106376337953
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 8
Genome diversity (% unique Plush genomes):	 0.762
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 8
Syntactic diversity (% unique Push programs):	 0.762
Total error diversity:				 0.084
Error (vector) diversity:			 0.091
Behavioral diversity:				 0.093
--- Run Statistics ---
Number of program evaluations used so far: 183000
Number of point (instruction) evaluations so far: 329605684
--- Timings ---
Current time: 1529615516812 milliseconds
Total Time:         661.7 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       241.7 seconds, 36.5%
Fitness Testing:    327.4 seconds, 49.5%
Report:              92.6 seconds, 14.0%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 182
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 183
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 183
;;******************************
;; -*- Number IO problem report - generation 183
Test total error for best: 59131.0
Test mean error for best: 29.56550
;;------------------------------
Outputs of best individual on training cases:
Correct output: 1.9526623133   | Program output: -32.0473376867
Correct output: -70.8009773522 | Program output: 8.1990226478  
Correct output: -13.7839009431 | Program output: 77.2160990569 
Correct output: 143.8727406396 | Program output: 94.8727406396 
Correct output: 136.4396027174 | Program output: 69.4396027174 
Correct output: 18.5044280613  | Program output: 116.5044280613
Correct output: 92.0568646792  | Program output: 66.0568646792 
Correct output: 71.8873476205  | Program output: 121.8873476205
Correct output: -10.8388749243 | Program output: -46.8388749243
Correct output: 0.9299825981   | Program output: 73.9299825981 
Correct output: -26.7840412284 | Program output: -26.7840412284
Correct output: -102.1264221267 | Program output: -72.1264221267
Correct output: 40.8061668642  | Program output: 48.8061668642 
Correct output: -5.2544966331  | Program output: -11.2544966331
Correct output: 102.9855886244 | Program output: 59.9855886244 
Correct output: -118.0507723766 | Program output: -61.0507723766
Correct output: 55.9371769928  | Program output: 76.9371769928 
Correct output: 4.2657989984   | Program output: 29.2657989984 
Correct output: 96.7057987603  | Program output: 114.7057987603
Correct output: 122.162446611  | Program output: 107.162446611 
Correct output: 30.0102027945  | Program output: 1.0102027945  
Correct output: 104.5822387035 | Program output: 99.5822387035 
Correct output: -1.5538743366  | Program output: -48.5538743366
Correct output: 166.8070496115 | Program output: 93.8070496115 
Correct output: 58.6188945281  | Program output: 98.6188945281 
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction in1} {:instruction integer_max} {:instruction integer_dup_items} {:instruction integer_max} {:instruction tagged_55} {:instruction float_shove} {:instruction integer_max} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_mod} {:instruction float_inc} {:instruction integer_dup_items} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_yank} {:instruction float_inc} {:instruction integer_max} {:instruction integer_mod} {:instruction float_inc} {:instruction float_shove} {:instruction float_inc} {:instruction integer_dup_times} {:instruction float_inc} {:instruction float_div} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_rot} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_inc} {:instruction integer_add} {:instruction float_inc} {:instruction integer_mod} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_mult} {:instruction float_inc} {:instruction integer_pop} {:instruction print_float} {:instruction float_flush} {:instruction float_yankdup} {:instruction float_mult} {:instruction float_stackdepth} {:instruction integer_sub} {:instruction float_yankdup} {:instruction integer_mod} {:instruction float_rot} {:instruction float_shove} {:instruction float_inc} {:instruction float_yank} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_mult} {:instruction float_inc} {:instruction integer_flush} {:instruction print_float} {:instruction float_inc} {:instruction integer_dup_times} {:instruction float_inc} {:instruction integer_stackdepth})
Best program: (in1 integer_max integer_dup_items integer_max tagged_55 float_shove integer_max float_inc float_inc float_inc integer_mod float_inc integer_dup_items float_inc float_inc float_inc integer_yank float_inc integer_max integer_mod float_inc float_shove float_inc integer_dup_times float_inc float_div float_inc float_inc float_inc float_inc float_inc float_inc integer_rot float_inc float_yankdup float_inc integer_add float_inc integer_mod float_inc float_inc float_inc float_mult float_inc integer_pop print_float float_flush float_yankdup float_mult float_stackdepth integer_sub float_yankdup integer_mod float_rot float_shove float_inc float_yank float_inc float_inc float_inc float_mult float_inc integer_flush print_float float_inc integer_dup_times float_inc integer_stackdepth)
Errors: [34.0 13 79.0 13 91.0 12 49.0 2 67.0 3 98.0 2 26.0 2 50.0 2 36.0 2 73.0 2 0.0 0 30.0 2 8.0 1 6.0 2 43.0 3 57.0 2 21.0 2 25.0 2 18.0 3 15.0 2 29.0 2 5.0 3 47.0 2 73.0 3 40.0 1]
Total: 1103.0
Mean: 22.06
Genome size: 68
Size: 69
Percent parens: 0.014
--- Population Statistics ---
Average total errors in population: 2201.5116817000016
Median total errors in population: 1103.0
Error averages by case: (76.6304106 12.747 110.4204757 12.732 129.1857655 11.979 95.58449930000002 3.111 111.48100299999997 3.807 134.67972160000002 2.86 72.3681463 2.915 93.40825010000005 3.1 79.10913690000001 2.972 112.20804100000001 2.817 47.585573 1.516 77.82597569999999 3.277 53.662648099999984 2.064 45.27104340000002 2.849 88.20843319999999 3.787 102.82889449999998 3.293 66.2009685 2.813 63.2639047 2.828 65.49485020000003 3.805 64.0246072 2.908 62.625051 3.531 54.26439999999999 3.61 88.8569405 2.907 118.2857807 3.824 83.63316099999999 2.352)
Error minima by case: (0.8423 2 30.0396 1 13.5116 8 20.8727 1 3.0 1 0.4547 1 5.17 1 26.0 2 6.7509 1 0.3507 1 0.0 0 6.0 2 0.0 0 0.0 0 4.9856 2 16.0508 2 3.0 1 1.0 1 1.0 1 5.83 1 3.8492 1 0.0 0 0.5539 1 2.193 1 16.0 1)
Average genome size in population (length): 58.057
Average program size in population (points): 59.057
Average percent parens in population: 0.017
Minimum age in population: 256.7523904070241
Maximum age in population: 261.1340626578406
Average age in population: 259.2064897292168
Median age in population: 259.2794279689516
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 12
Genome diversity (% unique Plush genomes):	 0.761
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 12
Syntactic diversity (% unique Push programs):	 0.761
Total error diversity:				 0.083
Error (vector) diversity:			 0.093
Behavioral diversity:				 0.093
--- Run Statistics ---
Number of program evaluations used so far: 184000
Number of point (instruction) evaluations so far: 331057109
--- Timings ---
Current time: 1529615520182 milliseconds
Total Time:         665.1 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       243.0 seconds, 36.5%
Fitness Testing:    328.9 seconds, 49.5%
Report:              93.0 seconds, 14.0%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 183
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 184
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 184
;;******************************
;; -*- Number IO problem report - generation 184
Test total error for best: 59131.0
Test mean error for best: 29.56550
;;------------------------------
Outputs of best individual on training cases:
Correct output: 1.9526623133   | Program output: -32.0473376867
Correct output: -70.8009773522 | Program output: 8.1990226478  
Correct output: -13.7839009431 | Program output: 77.2160990569 
Correct output: 143.8727406396 | Program output: 94.8727406396 
Correct output: 136.4396027174 | Program output: 69.4396027174 
Correct output: 18.5044280613  | Program output: 116.5044280613
Correct output: 92.0568646792  | Program output: 66.0568646792 
Correct output: 71.8873476205  | Program output: 121.8873476205
Correct output: -10.8388749243 | Program output: -46.8388749243
Correct output: 0.9299825981   | Program output: 73.9299825981 
Correct output: -26.7840412284 | Program output: -26.7840412284
Correct output: -102.1264221267 | Program output: -72.1264221267
Correct output: 40.8061668642  | Program output: 48.8061668642 
Correct output: -5.2544966331  | Program output: -11.2544966331
Correct output: 102.9855886244 | Program output: 59.9855886244 
Correct output: -118.0507723766 | Program output: -61.0507723766
Correct output: 55.9371769928  | Program output: 76.9371769928 
Correct output: 4.2657989984   | Program output: 29.2657989984 
Correct output: 96.7057987603  | Program output: 114.7057987603
Correct output: 122.162446611  | Program output: 107.162446611 
Correct output: 30.0102027945  | Program output: 1.0102027945  
Correct output: 104.5822387035 | Program output: 99.5822387035 
Correct output: -1.5538743366  | Program output: -48.5538743366
Correct output: 166.8070496115 | Program output: 93.8070496115 
Correct output: 58.6188945281  | Program output: 98.6188945281 
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction in1} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_inc} {:instruction float_inc} {:instruction float_yankdup} {:instruction integer_add} {:instruction float_inc} {:instruction float_div} {:instruction integer_mod} {:instruction float_div} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_sub} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_inc} {:instruction float_div} {:instruction float_inc} {:instruction integer_dup_items} {:instruction float_yankdup} {:instruction float_div} {:instruction float_inc} {:instruction integer_div} {:instruction float_inc} {:instruction tag_integer_979} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_inc} {:instruction float_yankdup} {:instruction integer_yankdup} {:instruction float_dup_items} {:instruction float_yank} {:instruction float_inc} {:instruction float_inc} {:instruction integer_mod} {:instruction float_inc} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_inc} {:instruction float_inc} {:instruction float_add} {:instruction integer_pop} {:instruction integer_dec} {:instruction float_inc} {:instruction float_inc} {:instruction float_swap} {:instruction float_inc} {:instruction print_float} {:instruction float_dup_items} {:instruction float_yankdup} {:instruction float_inc} {:instruction integer_mod} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_min} {:instruction float_inc} {:instruction tag_integer_875} {:instruction print_float})
Best program: (in1 float_inc float_yankdup float_inc float_inc float_yankdup integer_add float_inc float_div integer_mod float_div float_inc float_inc float_inc float_sub float_inc float_yankdup float_inc float_yankdup float_inc float_div float_inc integer_dup_items float_yankdup float_div float_inc integer_div float_inc tag_integer_979 float_inc float_yankdup float_inc float_yankdup integer_yankdup float_dup_items float_yank float_inc float_inc integer_mod float_inc float_inc float_yankdup float_inc float_inc float_add integer_pop integer_dec float_inc float_inc float_swap float_inc print_float float_dup_items float_yankdup float_inc integer_mod float_inc float_inc float_inc integer_min float_inc tag_integer_875 print_float)
Errors: [34.0 13 79.0 13 91.0 12 49.0 2 67.0 3 98.0 2 26.0 2 50.0 2 36.0 2 73.0 2 0.0 0 30.0 2 8.0 1 6.0 2 43.0 3 57.0 2 21.0 2 25.0 2 18.0 3 15.0 2 29.0 2 5.0 3 47.0 2 73.0 3 40.0 1]
Total: 1103.0
Mean: 22.06
Genome size: 63
Size: 64
Percent parens: 0.016
--- Population Statistics ---
Average total errors in population: 2912.0010506000003
Median total errors in population: 1103.0
Error averages by case: (105.1023121 12.776 143.31560760000002 12.778 155.79292720000004 12.063 122.59481780000004 3.395 138.24059480000005 4.059 161.247829 3.128 100.23612100000004 3.15 120.48090069999999 3.345 107.3809353 3.223 139.23544490000003 3.031 76.3508863 1.808 104.69192620000001 3.565 81.99257209999999 2.331 77.63782830000001 3.068 115.68000650000002 4.062 129.1576682 3.591 93.26455879999999 3.043 93.61778929999998 3.03 92.96327720000001 4.021 91.70061760000002 3.148 96.32959249999999 3.881 82.24200149999999 3.889 116.8303632 3.115 144.66083899999998 4.087 111.05263350000001 2.614)
Error minima by case: (0.8351 8 34.0494 2 16.1629 9 25.8727 2 15.5604 2 0.1378 1 18.0 1 26.0 2 13.7492 1 0.0558 1 0.0 0 6.0 2 0.0 0 0.0 0 1.0144 2 22.0508 2 0.0 0 0.2011 1 1.0 1 7.0 1 0.0851 1 0.0 0 3.1075 1 0.807 2 16.0 1)
Average genome size in population (length): 57.314
Average program size in population (points): 58.314
Average percent parens in population: 0.017
Minimum age in population: 258.1566944134012
Maximum age in population: 262.5695744942434
Average age in population: 260.6408553512148
Median age in population: 260.6671322895976
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 13
Genome diversity (% unique Plush genomes):	 0.783
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 13
Syntactic diversity (% unique Push programs):	 0.783
Total error diversity:				 0.068
Error (vector) diversity:			 0.076
Behavioral diversity:				 0.077
--- Run Statistics ---
Number of program evaluations used so far: 185000
Number of point (instruction) evaluations so far: 332489959
--- Timings ---
Current time: 1529615523528 milliseconds
Total Time:         668.4 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       244.3 seconds, 36.6%
Fitness Testing:    330.5 seconds, 49.4%
Report:              93.5 seconds, 14.0%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 184
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 185
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 185
;;******************************
;; -*- Number IO problem report - generation 185
Test total error for best: 59131.0
Test mean error for best: 29.56550
;;------------------------------
Outputs of best individual on training cases:
Correct output: 1.9526623133   | Program output: -32.0473376867
Correct output: -70.8009773522 | Program output: 8.1990226478  
Correct output: -13.7839009431 | Program output: 77.2160990569 
Correct output: 143.8727406396 | Program output: 94.8727406396 
Correct output: 136.4396027174 | Program output: 69.4396027174 
Correct output: 18.5044280613  | Program output: 116.5044280613
Correct output: 92.0568646792  | Program output: 66.0568646792 
Correct output: 71.8873476205  | Program output: 121.8873476205
Correct output: -10.8388749243 | Program output: -46.8388749243
Correct output: 0.9299825981   | Program output: 73.9299825981 
Correct output: -26.7840412284 | Program output: -26.7840412284
Correct output: -102.1264221267 | Program output: -72.1264221267
Correct output: 40.8061668642  | Program output: 48.8061668642 
Correct output: -5.2544966331  | Program output: -11.2544966331
Correct output: 102.9855886244 | Program output: 59.9855886244 
Correct output: -118.0507723766 | Program output: -61.0507723766
Correct output: 55.9371769928  | Program output: 76.9371769928 
Correct output: 4.2657989984   | Program output: 29.2657989984 
Correct output: 96.7057987603  | Program output: 114.7057987603
Correct output: 122.162446611  | Program output: 107.162446611 
Correct output: 30.0102027945  | Program output: 1.0102027945  
Correct output: 104.5822387035 | Program output: 99.5822387035 
Correct output: -1.5538743366  | Program output: -48.5538743366
Correct output: 166.8070496115 | Program output: 93.8070496115 
Correct output: 58.6188945281  | Program output: 98.6188945281 
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction in1} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_inc} {:instruction float_dup_items} {:instruction float_inc} {:instruction float_inc} {:instruction integer_dec} {:instruction tagged_646} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_inc} {:instruction float_div} {:instruction float_inc} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_inc} {:instruction integer_shove} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_rot} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_inc} {:instruction integer_add} {:instruction float_inc} {:instruction integer_mod} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_mult} {:instruction float_inc} {:instruction integer_pop} {:instruction print_float} {:instruction float_flush} {:instruction float_yankdup} {:instruction float_mult} {:instruction float_stackdepth} {:instruction integer_sub} {:instruction float_yankdup} {:instruction integer_mod} {:instruction float_stackdepth} {:instruction float_inc} {:instruction float_inc} {:instruction float_yank} {:instruction float_inc} {:instruction tagged_227} {:instruction float_inc} {:instruction float_mult} {:instruction float_inc})
Best program: (in1 float_inc float_yankdup float_inc float_dup_items float_inc float_inc integer_dec tagged_646 float_inc float_yankdup float_inc float_inc float_inc float_inc float_yankdup float_inc float_div float_inc float_inc float_yankdup float_inc integer_shove float_inc float_inc float_inc float_inc integer_rot float_inc float_yankdup float_inc integer_add float_inc integer_mod float_inc float_inc float_inc float_mult float_inc integer_pop print_float float_flush float_yankdup float_mult float_stackdepth integer_sub float_yankdup integer_mod float_stackdepth float_inc float_inc float_yank float_inc tagged_227 float_inc float_mult float_inc)
Errors: [34.0 13 79.0 13 91.0 12 49.0 2 67.0 3 98.0 2 26.0 2 50.0 2 36.0 2 73.0 2 0.0 0 30.0 2 8.0 1 6.0 2 43.0 3 57.0 2 21.0 2 25.0 2 18.0 3 15.0 2 29.0 2 5.0 3 47.0 2 73.0 3 40.0 1]
Total: 1103.0
Mean: 22.06
Genome size: 57
Size: 58
Percent parens: 0.017
--- Population Statistics ---
Average total errors in population: 2554.6946181000008
Median total errors in population: 1103.0
Error averages by case: (91.504769 12.811 124.25013030000001 12.763 143.38383229999997 12.03 109.22889540000001 3.207 125.07769640000002 3.898 148.981667 2.944 86.64211449999999 2.983 107.4724922 3.209 94.05357660000001 3.04 126.59596399999998 2.932 62.191240099999995 1.64 91.49565559999999 3.381 68.0324159 2.177 60.542602300000006 2.896 102.27121310000001 3.903 116.26849489999998 3.397 79.164524 2.894 75.54056080000001 2.905 79.5226769 3.876 77.99630410000002 2.975 76.23352299999998 3.709 68.47265420000001 3.721 103.63741260000002 2.992 131.53470309999997 3.911 97.9084998 2.497)
Error minima by case: (1.2267 8 36.4425 1 3.1004 6 20.8727 2 9.5604 2 0.4347 1 1.2264 1 26.0 2 0.1554 1 2.3 1 0.0 0 6.0 2 0.0 0 0.0 0 4.9856 2 16.0508 2 0.0 0 1.0 1 1.0 1 5.0 1 1.1021 1 0.0 0 0.9644 1 2.193 2 16.0 1)
Average genome size in population (length): 57.34
Average program size in population (points): 58.34
Average percent parens in population: 0.017
Minimum age in population: 259.1566944134012
Maximum age in population: 263.8768692821745
Average age in population: 262.0702831893729
Median age in population: 262.1005945936795
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 13
Genome diversity (% unique Plush genomes):	 0.792
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 13
Syntactic diversity (% unique Push programs):	 0.792
Total error diversity:				 0.081
Error (vector) diversity:			 0.09
Behavioral diversity:				 0.09
--- Run Statistics ---
Number of program evaluations used so far: 186000
Number of point (instruction) evaluations so far: 333923459
--- Timings ---
Current time: 1529615526792 milliseconds
Total Time:         671.7 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       245.6 seconds, 36.6%
Fitness Testing:    332.0 seconds, 49.4%
Report:              94.0 seconds, 14.0%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 185
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 186
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 186
;;******************************
;; -*- Number IO problem report - generation 186
Test total error for best: 59131.0
Test mean error for best: 29.56550
;;------------------------------
Outputs of best individual on training cases:
Correct output: 1.9526623133   | Program output: -32.0473376867
Correct output: -70.8009773522 | Program output: 8.1990226478  
Correct output: -13.7839009431 | Program output: 77.2160990569 
Correct output: 143.8727406396 | Program output: 94.8727406396 
Correct output: 136.4396027174 | Program output: 69.4396027174 
Correct output: 18.5044280613  | Program output: 116.5044280613
Correct output: 92.0568646792  | Program output: 66.0568646792 
Correct output: 71.8873476205  | Program output: 121.8873476205
Correct output: -10.8388749243 | Program output: -46.8388749243
Correct output: 0.9299825981   | Program output: 73.9299825981 
Correct output: -26.7840412284 | Program output: -26.7840412284
Correct output: -102.1264221267 | Program output: -72.1264221267
Correct output: 40.8061668642  | Program output: 48.8061668642 
Correct output: -5.2544966331  | Program output: -11.2544966331
Correct output: 102.9855886244 | Program output: 59.9855886244 
Correct output: -118.0507723766 | Program output: -61.0507723766
Correct output: 55.9371769928  | Program output: 76.9371769928 
Correct output: 4.2657989984   | Program output: 29.2657989984 
Correct output: 96.7057987603  | Program output: 114.7057987603
Correct output: 122.162446611  | Program output: 107.162446611 
Correct output: 30.0102027945  | Program output: 1.0102027945  
Correct output: 104.5822387035 | Program output: 99.5822387035 
Correct output: -1.5538743366  | Program output: -48.5538743366
Correct output: 166.8070496115 | Program output: 93.8070496115 
Correct output: 58.6188945281  | Program output: 98.6188945281 
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction in1} {:instruction integer_max} {:instruction tagged_55} {:instruction integer_add} {:instruction integer_dup_items} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_mod} {:instruction float_inc} {:instruction integer_dup_items} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_yank} {:instruction float_inc} {:instruction integer_max} {:instruction float_add} {:instruction float_inc} {:instruction float_yank} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_div} {:instruction float_inc} {:instruction integer_flush} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_inc} {:instruction integer_mod} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_mult} {:instruction float_inc} {:instruction integer_pop} {:instruction print_float} {:instruction float_flush} {:instruction integer_dup_times} {:instruction integer_add} {:instruction float_inc} {:instruction float_yankdup} {:instruction integer_sub} {:instruction -68} {:instruction float_dup_times} {:instruction integer_rot})
Best program: (in1 integer_max tagged_55 integer_add integer_dup_items float_inc float_inc float_inc integer_mod float_inc integer_dup_items float_inc float_inc float_inc integer_yank float_inc integer_max float_add float_inc float_yank float_inc float_inc float_inc float_yankdup float_div float_inc integer_flush float_inc float_inc float_inc float_inc float_yankdup float_inc float_yankdup float_inc float_yankdup float_inc integer_mod float_inc float_inc float_inc float_mult float_inc integer_pop print_float float_flush integer_dup_times integer_add float_inc float_yankdup integer_sub -68 float_dup_times integer_rot)
Errors: [34.0 13 79.0 13 91.0 12 49.0 2 67.0 3 98.0 2 26.0 2 50.0 2 36.0 2 73.0 2 0.0 0 30.0 2 8.0 1 6.0 2 43.0 3 57.0 2 21.0 2 25.0 2 18.0 3 15.0 2 29.0 2 5.0 3 47.0 2 73.0 3 40.0 1]
Total: 1103.0
Mean: 22.06
Genome size: 54
Size: 55
Percent parens: 0.018
--- Population Statistics ---
Average total errors in population: 2404.6287530999994
Median total errors in population: 1103.0
Error averages by case: (84.4786512 12.771 121.3959841 12.756 135.89918850000004 11.99 103.58769339999999 3.196 119.36541430000003 3.899 141.18089100000003 2.947 80.407511 2.966 100.60278620000001 3.182 87.29674460000003 3.051 119.04309340000003 2.9 55.6815765 1.653 85.45575850000002 3.409 61.2865257 2.135 55.555957200000016 2.915 96.30057340000002 3.895 110.39037689999998 3.434 73.05357939999998 2.861 72.48536830000002 2.899 73.0912683 3.841 72.0907407 2.991 73.61742309999998 3.76 62.2688924 3.727 96.43050849999999 2.996 126.16733649999996 3.913 90.94091000000002 2.467)
Error minima by case: (2.6843 8 53.5174 1 17.0782 8 35.0 1 7.5604 2 0.3889 1 12.0 1 27.0 2 15.9307 1 1.6075 1 0.0 0 7.0 2 0.0 0 0.0 0 6.9856 2 14.0508 2 0.0 0 0.5562 1 0.0 0 1.0 1 2.1325 1 0.0 0 4.3384 1 10.807 2 15.8197 1)
Average genome size in population (length): 56.588
Average program size in population (points): 57.588
Average percent parens in population: 0.018
Minimum age in population: 261.0064086146714
Maximum age in population: 265.6288957836679
Average age in population: 263.4596427993781
Median age in population: 263.4897008834332
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 12
Genome diversity (% unique Plush genomes):	 0.787
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 12
Syntactic diversity (% unique Push programs):	 0.787
Total error diversity:				 0.083
Error (vector) diversity:			 0.093
Behavioral diversity:				 0.093
--- Run Statistics ---
Number of program evaluations used so far: 187000
Number of point (instruction) evaluations so far: 335338159
--- Timings ---
Current time: 1529615530123 milliseconds
Total Time:         675.1 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       246.9 seconds, 36.6%
Fitness Testing:    333.6 seconds, 49.4%
Report:              94.4 seconds, 14.0%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 186
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 187
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 187
;;******************************
;; -*- Number IO problem report - generation 187
Test total error for best: 59131.0
Test mean error for best: 29.56550
;;------------------------------
Outputs of best individual on training cases:
Correct output: 1.9526623133   | Program output: -32.0473376867
Correct output: -70.8009773522 | Program output: 8.1990226478  
Correct output: -13.7839009431 | Program output: 77.2160990569 
Correct output: 143.8727406396 | Program output: 94.8727406396 
Correct output: 136.4396027174 | Program output: 69.4396027174 
Correct output: 18.5044280613  | Program output: 116.5044280613
Correct output: 92.0568646792  | Program output: 66.0568646792 
Correct output: 71.8873476205  | Program output: 121.8873476205
Correct output: -10.8388749243 | Program output: -46.8388749243
Correct output: 0.9299825981   | Program output: 73.9299825981 
Correct output: -26.7840412284 | Program output: -26.7840412284
Correct output: -102.1264221267 | Program output: -72.1264221267
Correct output: 40.8061668642  | Program output: 48.8061668642 
Correct output: -5.2544966331  | Program output: -11.2544966331
Correct output: 102.9855886244 | Program output: 59.9855886244 
Correct output: -118.0507723766 | Program output: -61.0507723766
Correct output: 55.9371769928  | Program output: 76.9371769928 
Correct output: 4.2657989984   | Program output: 29.2657989984 
Correct output: 96.7057987603  | Program output: 114.7057987603
Correct output: 122.162446611  | Program output: 107.162446611 
Correct output: 30.0102027945  | Program output: 1.0102027945  
Correct output: 104.5822387035 | Program output: 99.5822387035 
Correct output: -1.5538743366  | Program output: -48.5538743366
Correct output: 166.8070496115 | Program output: 93.8070496115 
Correct output: 58.6188945281  | Program output: 98.6188945281 
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction in1} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_inc} {:instruction float_dup_items} {:instruction float_inc} {:instruction float_inc} {:instruction integer_dec} {:instruction tagged_646} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_inc} {:instruction float_div} {:instruction float_inc} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_inc} {:instruction integer_min} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_rot} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_inc} {:instruction integer_add} {:instruction float_inc} {:instruction integer_mod} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_pop} {:instruction print_float} {:instruction float_flush} {:instruction float_yankdup} {:instruction float_mult} {:instruction float_stackdepth} {:instruction integer_sub} {:instruction float_inc} {:instruction integer_pop} {:instruction print_float} {:instruction float_flush} {:instruction integer_dup_times} {:instruction integer_div} {:instruction float_inc} {:instruction float_yankdup} {:instruction integer_sub} {:instruction -68} {:instruction float_dup_times} {:instruction integer_rot})
Best program: (in1 float_inc float_yankdup float_inc float_dup_items float_inc float_inc integer_dec tagged_646 float_inc float_yankdup float_inc float_inc float_inc float_inc float_yankdup float_inc float_div float_inc float_inc float_yankdup float_inc integer_min float_inc float_inc float_inc float_inc integer_rot float_inc float_yankdup float_inc integer_add float_inc integer_mod float_inc float_inc float_inc float_inc integer_pop print_float float_flush float_yankdup float_mult float_stackdepth integer_sub float_inc integer_pop print_float float_flush integer_dup_times integer_div float_inc float_yankdup integer_sub -68 float_dup_times integer_rot)
Errors: [34.0 13 79.0 13 91.0 12 49.0 2 67.0 3 98.0 2 26.0 2 50.0 2 36.0 2 73.0 2 0.0 0 30.0 2 8.0 1 6.0 2 43.0 3 57.0 2 21.0 2 25.0 2 18.0 3 15.0 2 29.0 2 5.0 3 47.0 2 73.0 3 40.0 1]
Total: 1103.0
Mean: 22.06
Genome size: 57
Size: 58
Percent parens: 0.017
--- Population Statistics ---
Average total errors in population: 2747.6576471000003
Median total errors in population: 1103.0
Error averages by case: (97.63911970000002 12.734 133.64544500000002 12.795 148.17456890000003 12.026 117.54494160000002 3.493 132.81635849999998 4.126 153.14214309999997 3.194 94.4166282 3.226 113.87493860000001 3.426 100.2965489 3.307 131.58443739999998 3.137 69.87746409999997 1.966 99.56488710000002 3.697 75.0219163 2.433 69.25628009999997 3.144 109.7711369 4.134 124.0612879 3.689 87.55000859999996 3.133 86.01358789999999 3.133 87.28342010000001 4.104 86.5883574 3.221 86.82256389999998 4.042 76.89127030000003 3.954 109.39457579999997 3.237 139.81698050000003 4.161 104.34278029999999 2.754)
Error minima by case: (0.0441 7 8.3574 1 13.7839 8 32.8727 2 10.5604 2 0.5238 1 16.0 1 25.1127 2 9.7333 1 0.4357 1 0.0 0 6.1264 2 0.0 0 0.0 0 3.9856 2 17.0508 2 0.0628 1 0.1331 1 1.0 1 5.0 1 1.2394 1 0.0 0 0.1035 1 7.807 2 15.3811 1)
Average genome size in population (length): 56.768
Average program size in population (points): 57.768
Average percent parens in population: 0.018
Minimum age in population: 262.2969358840461
Maximum age in population: 266.8864554250379
Average age in population: 264.8657827101646
Median age in population: 264.8987884692896
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 14
Genome diversity (% unique Plush genomes):	 0.817
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 14
Syntactic diversity (% unique Push programs):	 0.817
Total error diversity:				 0.087
Error (vector) diversity:			 0.095
Behavioral diversity:				 0.096
--- Run Statistics ---
Number of program evaluations used so far: 188000
Number of point (instruction) evaluations so far: 336757384
--- Timings ---
Current time: 1529615533390 milliseconds
Total Time:         678.3 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       248.2 seconds, 36.6%
Fitness Testing:    335.1 seconds, 49.4%
Report:              94.8 seconds, 14.0%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 187
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 188
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 188
;;******************************
;; -*- Number IO problem report - generation 188
Test total error for best: 59131.0
Test mean error for best: 29.56550
;;------------------------------
Outputs of best individual on training cases:
Correct output: 1.9526623133   | Program output: -32.0473376867
Correct output: -70.8009773522 | Program output: 8.1990226478  
Correct output: -13.7839009431 | Program output: 77.2160990569 
Correct output: 143.8727406396 | Program output: 94.8727406396 
Correct output: 136.4396027174 | Program output: 69.4396027174 
Correct output: 18.5044280613  | Program output: 116.5044280613
Correct output: 92.0568646792  | Program output: 66.0568646792 
Correct output: 71.8873476205  | Program output: 121.8873476205
Correct output: -10.8388749243 | Program output: -46.8388749243
Correct output: 0.9299825981   | Program output: 73.9299825981 
Correct output: -26.7840412284 | Program output: -26.7840412284
Correct output: -102.1264221267 | Program output: -72.1264221267
Correct output: 40.8061668642  | Program output: 48.8061668642 
Correct output: -5.2544966331  | Program output: -11.2544966331
Correct output: 102.9855886244 | Program output: 59.9855886244 
Correct output: -118.0507723766 | Program output: -61.0507723766
Correct output: 55.9371769928  | Program output: 76.9371769928 
Correct output: 4.2657989984   | Program output: 29.2657989984 
Correct output: 96.7057987603  | Program output: 114.7057987603
Correct output: 122.162446611  | Program output: 107.162446611 
Correct output: 30.0102027945  | Program output: 1.0102027945  
Correct output: 104.5822387035 | Program output: 99.5822387035 
Correct output: -1.5538743366  | Program output: -48.5538743366
Correct output: 166.8070496115 | Program output: 93.8070496115 
Correct output: 58.6188945281  | Program output: 98.6188945281 
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction in1} {:instruction print_integer} {:instruction integer_div} {:instruction float_shove} {:instruction integer_sub} {:instruction integer_mod} {:instruction float_rot} {:instruction float_inc} {:instruction integer_flush} {:instruction float_inc} {:instruction integer_shove} {:instruction float_inc} {:instruction float_div} {:instruction float_inc} {:instruction integer_dec} {:instruction print_integer} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_inc} {:instruction float_inc} {:instruction float_div} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_inc} {:instruction integer_flush} {:instruction float_inc} {:instruction float_div} {:instruction float_inc} {:instruction float_inc} {:instruction integer_dup} {:instruction float_inc} {:instruction float_rot} {:instruction float_inc} {:instruction integer_inc} {:instruction float_mult} {:instruction float_inc} {:instruction float_rot} {:instruction float_inc} {:instruction float_inc} {:instruction integer_flush} {:instruction float_dup_items} {:instruction float_yank} {:instruction float_inc} {:instruction float_div} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_inc} {:instruction integer_mod} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_min} {:instruction float_inc} {:instruction float_mod} {:instruction print_float})
Best program: (in1 print_integer integer_div float_shove integer_sub integer_mod float_rot float_inc integer_flush float_inc integer_shove float_inc float_div float_inc integer_dec print_integer float_inc float_yankdup float_inc float_inc float_div float_inc float_yankdup float_inc integer_flush float_inc float_div float_inc float_inc integer_dup float_inc float_rot float_inc integer_inc float_mult float_inc float_rot float_inc float_inc integer_flush float_dup_items float_yank float_inc float_div float_inc float_yankdup float_inc integer_mod float_inc float_inc float_inc integer_min float_inc float_mod print_float)
Errors: [34.0 13 79.0 13 91.0 12 49.0 2 67.0 3 98.0 2 26.0 2 50.0 2 36.0 2 73.0 2 0.0 0 30.0 2 8.0 1 6.0 2 43.0 3 57.0 2 21.0 2 25.0 2 18.0 3 15.0 2 29.0 2 5.0 3 47.0 2 73.0 3 40.0 1]
Total: 1103.0
Mean: 22.06
Genome size: 55
Size: 56
Percent parens: 0.018
--- Population Statistics ---
Average total errors in population: 2610.4503582
Median total errors in population: 1103.0
Error averages by case: (92.80210670000004 12.784 130.7535396 12.794 143.44766809999996 12.034 110.86163270000002 3.289 126.26674359999997 3.973 149.6991915 3.013 87.68052169999999 3.047 109.02907959999999 3.241 95.33804259999998 3.149 126.64414500000002 2.963 64.33199769999999 1.757 93.82128449999998 3.466 68.86659089999999 2.22 65.29767070000001 3.009 103.26874149999999 3.988 118.46073239999998 3.49 80.48560540000001 2.962 81.04929639999997 2.954 81.68053360000002 3.942 80.52705849999998 3.071 83.4485079 3.793 70.8346561 3.793 104.75985809999999 3.076 133.25843900000004 4.013 99.50171440000001 2.514)
Error minima by case: (0.8351 7 2.3903 1 9.6097 8 38.0 1 56.0 2 0.4266 1 15.0 1 31.3903 2 11.6908 1 0.8283 1 0.0 0 12.0 2 0.0 0 0.0 0 32.0 2 24.3903 2 3.0 1 0.0282 1 0.0 0 4.0 1 4.0 1 0.0 0 3.8325 1 62.0 2 22.0 1)
Average genome size in population (length): 56.737
Average program size in population (points): 57.737
Average percent parens in population: 0.018
Minimum age in population: 263.6456537489991
Maximum age in population: 268.4818675963194
Average age in population: 266.2838465935357
Median age in population: 266.3372104719524
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 12
Genome diversity (% unique Plush genomes):	 0.766
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 12
Syntactic diversity (% unique Push programs):	 0.766
Total error diversity:				 0.076
Error (vector) diversity:			 0.085
Behavioral diversity:				 0.086
--- Run Statistics ---
Number of program evaluations used so far: 189000
Number of point (instruction) evaluations so far: 338175809
--- Timings ---
Current time: 1529615536652 milliseconds
Total Time:         681.6 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       249.6 seconds, 36.6%
Fitness Testing:    336.6 seconds, 49.4%
Report:              95.3 seconds, 14.0%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 188
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 189
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 189
;;******************************
;; -*- Number IO problem report - generation 189
Test total error for best: 59131.0
Test mean error for best: 29.56550
;;------------------------------
Outputs of best individual on training cases:
Correct output: 1.9526623133   | Program output: -32.0473376867
Correct output: -70.8009773522 | Program output: 8.1990226478  
Correct output: -13.7839009431 | Program output: 77.2160990569 
Correct output: 143.8727406396 | Program output: 94.8727406396 
Correct output: 136.4396027174 | Program output: 69.4396027174 
Correct output: 18.5044280613  | Program output: 116.5044280613
Correct output: 92.0568646792  | Program output: 66.0568646792 
Correct output: 71.8873476205  | Program output: 121.8873476205
Correct output: -10.8388749243 | Program output: -46.8388749243
Correct output: 0.9299825981   | Program output: 73.9299825981 
Correct output: -26.7840412284 | Program output: -26.7840412284
Correct output: -102.1264221267 | Program output: -72.1264221267
Correct output: 40.8061668642  | Program output: 48.8061668642 
Correct output: -5.2544966331  | Program output: -11.2544966331
Correct output: 102.9855886244 | Program output: 59.9855886244 
Correct output: -118.0507723766 | Program output: -61.0507723766
Correct output: 55.9371769928  | Program output: 76.9371769928 
Correct output: 4.2657989984   | Program output: 29.2657989984 
Correct output: 96.7057987603  | Program output: 114.7057987603
Correct output: 122.162446611  | Program output: 107.162446611 
Correct output: 30.0102027945  | Program output: 1.0102027945  
Correct output: 104.5822387035 | Program output: 99.5822387035 
Correct output: -1.5538743366  | Program output: -48.5538743366
Correct output: 166.8070496115 | Program output: 93.8070496115 
Correct output: 58.6188945281  | Program output: 98.6188945281 
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction in1} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_inc} {:instruction float_dup_items} {:instruction float_inc} {:instruction float_inc} {:instruction integer_dec} {:instruction tagged_646} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_inc} {:instruction float_div} {:instruction float_inc} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_inc} {:instruction integer_min} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_inc} {:instruction integer_mod} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_mult} {:instruction float_inc} {:instruction integer_pop} {:instruction print_float} {:instruction float_flush} {:instruction float_max} {:instruction float_mult} {:instruction float_stackdepth} {:instruction float_inc} {:instruction float_inc} {:instruction integer_inc} {:instruction float_inc} {:instruction float_min} {:instruction float_inc} {:instruction float_mult} {:instruction float_mod} {:instruction float_inc} {:instruction float_add} {:instruction integer_pop} {:instruction integer_dec} {:instruction float_inc} {:instruction float_inc} {:instruction integer_shove} {:instruction float_inc} {:instruction print_float} {:instruction integer_dup_items} {:instruction float_inc} {:instruction tagged_239} {:instruction print_float} {:instruction float_flush} {:instruction float_yankdup} {:instruction tag_float_275} {:instruction print_float} {:instruction -58} {:instruction float_inc} {:instruction print_float} {:instruction float_max} {:instruction float_pop} {:instruction float_inc} {:instruction integer_dup_times} {:instruction float_shove})
Best program: (in1 float_inc float_yankdup float_inc float_dup_items float_inc float_inc integer_dec tagged_646 float_inc float_yankdup float_inc float_inc float_inc float_inc float_yankdup float_inc float_div float_inc float_inc float_yankdup float_inc integer_min float_inc float_inc float_inc float_inc float_yankdup float_inc float_yankdup float_inc float_yankdup float_inc integer_mod float_inc float_inc float_inc float_mult float_inc integer_pop print_float float_flush float_max float_mult float_stackdepth float_inc float_inc integer_inc float_inc float_min float_inc float_mult float_mod float_inc float_add integer_pop integer_dec float_inc float_inc integer_shove float_inc print_float integer_dup_items float_inc tagged_239 print_float float_flush float_yankdup tag_float_275 print_float -58 float_inc print_float float_max float_pop float_inc integer_dup_times float_shove)
Errors: [34.0 13 79.0 13 91.0 12 49.0 2 67.0 3 98.0 2 26.0 2 50.0 2 36.0 2 73.0 2 0.0 0 30.0 2 8.0 1 6.0 2 43.0 3 57.0 2 21.0 2 25.0 2 18.0 3 15.0 2 29.0 2 5.0 3 47.0 2 73.0 3 40.0 1]
Total: 1103.0
Mean: 22.06
Genome size: 78
Size: 79
Percent parens: 0.013
--- Population Statistics ---
Average total errors in population: 2381.3599716000003
Median total errors in population: 1103.0
Error averages by case: (84.1922532 12.788 123.40977720000001 12.767 135.01196519999996 12.022 100.63417520000002 3.21 115.81150260000001 3.858 142.6215776 2.923 77.24788710000003 2.956 100.88535250000004 3.164 86.86286830000002 3.009 117.8538183 2.869 54.93246340000001 1.63 84.66963980000001 3.368 58.6270222 2.122 57.84416160000001 2.865 92.73026069999999 3.875 109.42060030000002 3.409 71.07415389999998 2.864 71.56528610000001 2.861 72.85208080000002 3.842 71.14228360000004 2.963 76.0887209 3.795 60.4125835 3.68 96.6170063 2.953 122.79382019999998 3.893 89.91471110000002 2.458)
Error minima by case: (0.4822 8 52.6782 1 10.7839 7 17.4718 2 5.5604 2 0.4365 1 5.555 1 2.0541 2 7.8389 1 1.0404 1 0.0 0 6.0 2 0.0 0 0.0 0 7.0144 2 0.9492 2 0.0628 1 1.0 1 2.0 1 1.2988 1 5.0102 1 0.0 0 1.4461 1 3.193 2 15.3226 1)
Average genome size in population (length): 56.43
Average program size in population (points): 57.43
Average percent parens in population: 0.018
Minimum age in population: 265.2728226117321
Maximum age in population: 269.8019283664505
Average age in population: 267.7113255924682
Median age in population: 267.7271066349072
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 13
Genome diversity (% unique Plush genomes):	 0.782
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 13
Syntactic diversity (% unique Push programs):	 0.782
Total error diversity:				 0.077
Error (vector) diversity:			 0.084
Behavioral diversity:				 0.084
--- Run Statistics ---
Number of program evaluations used so far: 190000
Number of point (instruction) evaluations so far: 339586584
--- Timings ---
Current time: 1529615539995 milliseconds
Total Time:         684.8 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       250.8 seconds, 36.6%
Fitness Testing:    338.2 seconds, 49.4%
Report:              95.7 seconds, 14.0%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 189
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 190
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 190
;;******************************
;; -*- Number IO problem report - generation 190
Test total error for best: 59131.0
Test mean error for best: 29.56550
;;------------------------------
Outputs of best individual on training cases:
Correct output: 1.9526623133   | Program output: -32.0473376867
Correct output: -70.8009773522 | Program output: 8.1990226478  
Correct output: -13.7839009431 | Program output: 77.2160990569 
Correct output: 143.8727406396 | Program output: 94.8727406396 
Correct output: 136.4396027174 | Program output: 69.4396027174 
Correct output: 18.5044280613  | Program output: 116.5044280613
Correct output: 92.0568646792  | Program output: 66.0568646792 
Correct output: 71.8873476205  | Program output: 121.8873476205
Correct output: -10.8388749243 | Program output: -46.8388749243
Correct output: 0.9299825981   | Program output: 73.9299825981 
Correct output: -26.7840412284 | Program output: -26.7840412284
Correct output: -102.1264221267 | Program output: -72.1264221267
Correct output: 40.8061668642  | Program output: 48.8061668642 
Correct output: -5.2544966331  | Program output: -11.2544966331
Correct output: 102.9855886244 | Program output: 59.9855886244 
Correct output: -118.0507723766 | Program output: -61.0507723766
Correct output: 55.9371769928  | Program output: 76.9371769928 
Correct output: 4.2657989984   | Program output: 29.2657989984 
Correct output: 96.7057987603  | Program output: 114.7057987603
Correct output: 122.162446611  | Program output: 107.162446611 
Correct output: 30.0102027945  | Program output: 1.0102027945  
Correct output: 104.5822387035 | Program output: 99.5822387035 
Correct output: -1.5538743366  | Program output: -48.5538743366
Correct output: 166.8070496115 | Program output: 93.8070496115 
Correct output: 58.6188945281  | Program output: 98.6188945281 
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction in1} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_inc} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_div} {:instruction float_inc} {:instruction integer_div} {:instruction integer_mod} {:instruction float_div} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_sub} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_inc} {:instruction float_div} {:instruction float_inc} {:instruction integer_dup_items} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_inc} {:instruction integer_mod} {:instruction float_inc} {:instruction float_inc} {:instruction float_div} {:instruction float_yankdup} {:instruction integer_yankdup} {:instruction float_dup_items} {:instruction float_yank} {:instruction float_inc} {:instruction float_inc} {:instruction integer_mod} {:instruction float_inc} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_inc} {:instruction float_inc} {:instruction float_add} {:instruction integer_pop} {:instruction integer_dec} {:instruction float_inc} {:instruction float_inc} {:instruction float_swap} {:instruction float_inc} {:instruction print_float} {:instruction float_dup_items} {:instruction integer_dup_times} {:instruction float_inc})
Best program: (in1 float_inc float_yankdup float_inc float_inc float_yankdup float_div float_inc integer_div integer_mod float_div float_inc float_inc float_inc float_sub float_inc float_yankdup float_inc float_yankdup float_inc float_div float_inc integer_dup_items float_inc float_yankdup float_inc integer_mod float_inc float_inc float_div float_yankdup integer_yankdup float_dup_items float_yank float_inc float_inc integer_mod float_inc float_inc float_yankdup float_inc float_inc float_add integer_pop integer_dec float_inc float_inc float_swap float_inc print_float float_dup_items integer_dup_times float_inc)
Errors: [34.0 13 79.0 13 91.0 12 49.0 2 67.0 3 98.0 2 26.0 2 50.0 2 36.0 2 73.0 2 0.0 0 30.0 2 8.0 1 6.0 2 43.0 3 57.0 2 21.0 2 25.0 2 18.0 3 15.0 2 29.0 2 5.0 3 47.0 2 73.0 3 40.0 1]
Total: 1103.0
Mean: 22.06
Genome size: 53
Size: 54
Percent parens: 0.019
--- Population Statistics ---
Average total errors in population: 2675.0299391000003
Median total errors in population: 1103.0
Error averages by case: (95.27422780000002 12.763 135.15847479999996 12.765 146.6612898 12.028 113.29862239999999 3.307 128.944772 3.971 152.0536477 3.012 90.63861020000002 3.068 111.20585430000003 3.296 97.61486559999997 3.124 129.9252545 2.977 66.6641679 1.773 94.99689690000001 3.511 72.24849799999998 2.24 68.30091100000001 2.988 106.17785669999998 3.966 120.1123054 3.517 82.78153829999997 2.935 84.44258859999998 2.976 83.10802050000001 3.94 82.19865439999998 3.056 87.86788749999998 3.732 72.66117609999998 3.775 107.10069350000002 3.067 135.5649525 3.999 101.64317270000002 2.599)
Error minima by case: (0.3931 8 42.0396 1 14.5997 8 34.8727 1 2.5604 2 0.4347 1 13.0 1 14.4963 2 2.9276 1 0.2688 1 0.0 0 6.0 2 0.0 0 0.0 0 5.9856 2 9.0508 2 0.0 0 1.0 1 2.0 1 2.0 1 4.809 1 0.0 0 0.4461 1 9.807 1 11.0409 1)
Average genome size in population (length): 56.558
Average program size in population (points): 57.558
Average percent parens in population: 0.018
Minimum age in population: 266.5842458633705
Maximum age in population: 271.0765317468073
Average age in population: 269.1055777670262
Median age in population: 269.1506946094737
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 9
Genome diversity (% unique Plush genomes):	 0.776
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 9
Syntactic diversity (% unique Push programs):	 0.776
Total error diversity:				 0.072
Error (vector) diversity:			 0.079
Behavioral diversity:				 0.08
--- Run Statistics ---
Number of program evaluations used so far: 191000
Number of point (instruction) evaluations so far: 341000559
--- Timings ---
Current time: 1529615543260 milliseconds
Total Time:         688.2 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       252.1 seconds, 36.6%
Fitness Testing:    339.7 seconds, 49.4%
Report:              96.2 seconds, 14.0%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 190
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 191
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 191
;;******************************
;; -*- Number IO problem report - generation 191
Test total error for best: 59131.0
Test mean error for best: 29.56550
;;------------------------------
Outputs of best individual on training cases:
Correct output: 1.9526623133   | Program output: -32.0473376867
Correct output: -70.8009773522 | Program output: 8.1990226478  
Correct output: -13.7839009431 | Program output: 77.2160990569 
Correct output: 143.8727406396 | Program output: 94.8727406396 
Correct output: 136.4396027174 | Program output: 69.4396027174 
Correct output: 18.5044280613  | Program output: 116.5044280613
Correct output: 92.0568646792  | Program output: 66.0568646792 
Correct output: 71.8873476205  | Program output: 121.8873476205
Correct output: -10.8388749243 | Program output: -46.8388749243
Correct output: 0.9299825981   | Program output: 73.9299825981 
Correct output: -26.7840412284 | Program output: -26.7840412284
Correct output: -102.1264221267 | Program output: -72.1264221267
Correct output: 40.8061668642  | Program output: 48.8061668642 
Correct output: -5.2544966331  | Program output: -11.2544966331
Correct output: 102.9855886244 | Program output: 59.9855886244 
Correct output: -118.0507723766 | Program output: -61.0507723766
Correct output: 55.9371769928  | Program output: 76.9371769928 
Correct output: 4.2657989984   | Program output: 29.2657989984 
Correct output: 96.7057987603  | Program output: 114.7057987603
Correct output: 122.162446611  | Program output: 107.162446611 
Correct output: 30.0102027945  | Program output: 1.0102027945  
Correct output: 104.5822387035 | Program output: 99.5822387035 
Correct output: -1.5538743366  | Program output: -48.5538743366
Correct output: 166.8070496115 | Program output: 93.8070496115 
Correct output: 58.6188945281  | Program output: 98.6188945281 
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction in1} {:instruction integer_max} {:instruction integer_dup_items} {:instruction integer_max} {:instruction tagged_55} {:instruction float_shove} {:instruction integer_max} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_mod} {:instruction float_inc} {:instruction integer_dup_items} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_yank} {:instruction float_inc} {:instruction integer_max} {:instruction integer_mod} {:instruction float_inc} {:instruction float_shove} {:instruction float_inc} {:instruction integer_dup_times} {:instruction float_inc} {:instruction float_div} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_rot} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_inc} {:instruction integer_add} {:instruction float_inc} {:instruction integer_mod} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_flush} {:instruction print_float})
Best program: (in1 integer_max integer_dup_items integer_max tagged_55 float_shove integer_max float_inc float_inc float_inc integer_mod float_inc integer_dup_items float_inc float_inc float_inc integer_yank float_inc integer_max integer_mod float_inc float_shove float_inc integer_dup_times float_inc float_div float_inc float_inc float_inc float_inc float_inc float_inc integer_rot float_inc float_yankdup float_inc integer_add float_inc integer_mod float_inc float_inc float_inc float_inc integer_flush print_float)
Errors: [34.0 13 79.0 13 91.0 12 49.0 2 67.0 3 98.0 2 26.0 2 50.0 2 36.0 2 73.0 2 0.0 0 30.0 2 8.0 1 6.0 2 43.0 3 57.0 2 21.0 2 25.0 2 18.0 3 15.0 2 29.0 2 5.0 3 47.0 2 73.0 3 40.0 1]
Total: 1103.0
Mean: 22.06
Genome size: 45
Size: 46
Percent parens: 0.022
--- Population Statistics ---
Average total errors in population: 2682.5065400999997
Median total errors in population: 1103.0
Error averages by case: (95.60804629999996 12.765 129.13650610000005 12.859 147.14904520000002 12.035 114.67480280000002 3.38 130.2527181 4.041 152.498993 3.1 91.76261619999997 3.125 112.17421029999996 3.339 98.143435 3.205 130.5186841 3.066 67.26598 1.818 97.0657526 3.551 72.84275149999999 2.31 65.67209130000002 3.053 107.2297322 4.032 121.71727589999998 3.575 84.67104739999998 3.042 81.8050676 3.047 84.9073729 4.012 83.54962979999996 3.124 81.64475509999998 3.813 73.91563239999995 3.844 108.62029529999997 3.155 137.0196683 4.059 102.6714307 2.639)
Error minima by case: (2.0441 8 2.801 1 4.3392 9 31.8727 2 11.5604 2 0.4347 1 11.0 1 34.7903 2 10.9833 1 2.6075 1 0.0 0 21.0 2 0.0 0 0.0 0 2.9856 2 18.0508 2 10.3774 1 0.6893 1 9.0 2 0.0 0 5.1223 1 0.0 0 3.8005 1 6.807 2 24.9476 1)
Average genome size in population (length): 56.797
Average program size in population (points): 57.797
Average percent parens in population: 0.018
Minimum age in population: 267.6943434980087
Maximum age in population: 272.5180628385896
Average age in population: 270.4895179723431
Median age in population: 270.5559151493866
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 10
Genome diversity (% unique Plush genomes):	 0.787
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 10
Syntactic diversity (% unique Push programs):	 0.787
Total error diversity:				 0.078
Error (vector) diversity:			 0.084
Behavioral diversity:				 0.085
--- Run Statistics ---
Number of program evaluations used so far: 192000
Number of point (instruction) evaluations so far: 342420509
--- Timings ---
Current time: 1529615546530 milliseconds
Total Time:         691.5 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       253.5 seconds, 36.7%
Fitness Testing:    341.3 seconds, 49.4%
Report:              96.7 seconds, 14.0%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 191
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 192
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 192
;;******************************
;; -*- Number IO problem report - generation 192
Test total error for best: 59131.0
Test mean error for best: 29.56550
;;------------------------------
Outputs of best individual on training cases:
Correct output: 1.9526623133   | Program output: -32.0473376867
Correct output: -70.8009773522 | Program output: 8.1990226478  
Correct output: -13.7839009431 | Program output: 77.2160990569 
Correct output: 143.8727406396 | Program output: 94.8727406396 
Correct output: 136.4396027174 | Program output: 69.4396027174 
Correct output: 18.5044280613  | Program output: 116.5044280613
Correct output: 92.0568646792  | Program output: 66.0568646792 
Correct output: 71.8873476205  | Program output: 121.8873476205
Correct output: -10.8388749243 | Program output: -46.8388749243
Correct output: 0.9299825981   | Program output: 73.9299825981 
Correct output: -26.7840412284 | Program output: -26.7840412284
Correct output: -102.1264221267 | Program output: -72.1264221267
Correct output: 40.8061668642  | Program output: 48.8061668642 
Correct output: -5.2544966331  | Program output: -11.2544966331
Correct output: 102.9855886244 | Program output: 59.9855886244 
Correct output: -118.0507723766 | Program output: -61.0507723766
Correct output: 55.9371769928  | Program output: 76.9371769928 
Correct output: 4.2657989984   | Program output: 29.2657989984 
Correct output: 96.7057987603  | Program output: 114.7057987603
Correct output: 122.162446611  | Program output: 107.162446611 
Correct output: 30.0102027945  | Program output: 1.0102027945  
Correct output: 104.5822387035 | Program output: 99.5822387035 
Correct output: -1.5538743366  | Program output: -48.5538743366
Correct output: 166.8070496115 | Program output: 93.8070496115 
Correct output: 58.6188945281  | Program output: 98.6188945281 
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction in1} {:instruction float_inc} {:instruction integer_dup} {:instruction float_inc} {:instruction float_dup_items} {:instruction float_inc} {:instruction integer_mod} {:instruction float_inc} {:instruction integer_swap} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_yank} {:instruction float_inc} {:instruction integer_max} {:instruction float_yankdup} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_inc} {:instruction float_div} {:instruction float_inc} {:instruction integer_flush} {:instruction float_inc} {:instruction integer_dup} {:instruction float_inc} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_inc} {:instruction tag_integer_227} {:instruction float_inc} {:instruction float_div} {:instruction float_yankdup} {:instruction float_inc} {:instruction integer_dup} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_add} {:instruction integer_min} {:instruction integer_dec} {:instruction float_inc} {:instruction float_inc} {:instruction integer_add} {:instruction float_mod} {:instruction float_inc} {:instruction print_float} {:instruction float_inc} {:instruction integer_stackdepth} {:instruction float_swap})
Best program: (in1 float_inc integer_dup float_inc float_dup_items float_inc integer_mod float_inc integer_swap float_inc float_inc float_inc integer_yank float_inc integer_max float_yankdup float_inc float_yankdup float_inc float_div float_inc integer_flush float_inc integer_dup float_inc float_inc float_yankdup float_inc tag_integer_227 float_inc float_div float_yankdup float_inc integer_dup float_inc float_inc float_inc float_inc float_add integer_min integer_dec float_inc float_inc integer_add float_mod float_inc print_float float_inc integer_stackdepth float_swap)
Errors: [34.0 13 79.0 13 91.0 12 49.0 2 67.0 3 98.0 2 26.0 2 50.0 2 36.0 2 73.0 2 0.0 0 30.0 2 8.0 1 6.0 2 43.0 3 57.0 2 21.0 2 25.0 2 18.0 3 15.0 2 29.0 2 5.0 3 47.0 2 73.0 3 40.0 1]
Total: 1103.0
Mean: 22.06
Genome size: 50
Size: 51
Percent parens: 0.020
--- Population Statistics ---
Average total errors in population: 2702.765286
Median total errors in population: 1103.0
Error averages by case: (97.71327650000002 12.778 126.94616010000003 12.764 147.2093533 12.046 115.28288 3.304 130.9768326 4.006 155.3213806 3.074 92.2073505 3.088 114.32360170000001 3.331 100.7762469 3.171 130.59532950000002 3.032 68.5661928 1.766 98.94570459999997 3.52 72.9240236 2.254 66.75866540000001 3.037 107.8159373 4.0 123.09557289999996 3.537 84.47868519999997 3.006 79.68082020000003 3.014 86.7958152 3.994 86.46538279999999 3.115 81.79393019999999 3.735 74.62423039999999 3.839 109.77692209999998 3.115 137.40390760000003 4.022 103.17808400000003 2.561)
Error minima by case: (0.3712 8 15.6465 1 4.8411 8 20.8727 2 5.5604 2 0.4252 1 15.0 1 26.0 2 1.1611 1 0.2787 1 0.0 0 6.0 2 0.0 0 0.0 0 7.0144 2 12.0508 2 2.0 1 0.0282 1 1.0 1 4.0 1 5.0102 1 0.0 0 1.8074 1 3.193 2 16.0 1)
Average genome size in population (length): 56.522
Average program size in population (points): 57.522
Average percent parens in population: 0.018
Minimum age in population: 269.6765979639583
Maximum age in population: 273.8259824286934
Average age in population: 271.9668727557881
Median age in population: 272.0267412837084
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 10
Genome diversity (% unique Plush genomes):	 0.79
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 10
Syntactic diversity (% unique Push programs):	 0.79
Total error diversity:				 0.092
Error (vector) diversity:			 0.099
Behavioral diversity:				 0.1
--- Run Statistics ---
Number of program evaluations used so far: 193000
Number of point (instruction) evaluations so far: 343833559
--- Timings ---
Current time: 1529615549784 milliseconds
Total Time:         694.7 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       254.8 seconds, 36.7%
Fitness Testing:    342.8 seconds, 49.3%
Report:              97.0 seconds, 14.0%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 192
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 193
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 193
;;******************************
;; -*- Number IO problem report - generation 193
Test total error for best: 59131.0
Test mean error for best: 29.56550
;;------------------------------
Outputs of best individual on training cases:
Correct output: 1.9526623133   | Program output: -32.0473376867
Correct output: -70.8009773522 | Program output: 8.1990226478  
Correct output: -13.7839009431 | Program output: 77.2160990569 
Correct output: 143.8727406396 | Program output: 94.8727406396 
Correct output: 136.4396027174 | Program output: 69.4396027174 
Correct output: 18.5044280613  | Program output: 116.5044280613
Correct output: 92.0568646792  | Program output: 66.0568646792 
Correct output: 71.8873476205  | Program output: 121.8873476205
Correct output: -10.8388749243 | Program output: -46.8388749243
Correct output: 0.9299825981   | Program output: 73.9299825981 
Correct output: -26.7840412284 | Program output: -26.7840412284
Correct output: -102.1264221267 | Program output: -72.1264221267
Correct output: 40.8061668642  | Program output: 48.8061668642 
Correct output: -5.2544966331  | Program output: -11.2544966331
Correct output: 102.9855886244 | Program output: 59.9855886244 
Correct output: -118.0507723766 | Program output: -61.0507723766
Correct output: 55.9371769928  | Program output: 76.9371769928 
Correct output: 4.2657989984   | Program output: 29.2657989984 
Correct output: 96.7057987603  | Program output: 114.7057987603
Correct output: 122.162446611  | Program output: 107.162446611 
Correct output: 30.0102027945  | Program output: 1.0102027945  
Correct output: 104.5822387035 | Program output: 99.5822387035 
Correct output: -1.5538743366  | Program output: -48.5538743366
Correct output: 166.8070496115 | Program output: 93.8070496115 
Correct output: 58.6188945281  | Program output: 98.6188945281 
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction in1} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_inc} {:instruction float_dup_items} {:instruction float_inc} {:instruction float_inc} {:instruction integer_dec} {:instruction tagged_646} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_inc} {:instruction float_div} {:instruction float_inc} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_inc} {:instruction integer_min} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_inc} {:instruction tagged_277} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_mult} {:instruction float_inc} {:instruction integer_pop} {:instruction print_float} {:instruction float_flush} {:instruction integer_dup_times} {:instruction float_sin} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_div} {:instruction -68} {:instruction float_dup_times} {:instruction integer_rot})
Best program: (in1 float_inc float_yankdup float_inc float_dup_items float_inc float_inc integer_dec tagged_646 float_inc float_yankdup float_inc float_inc float_inc float_inc float_yankdup float_inc float_div float_inc float_inc float_yankdup float_inc integer_min float_inc float_inc float_inc float_inc float_yankdup float_inc float_yankdup float_inc float_yankdup float_inc tagged_277 float_inc float_inc float_inc float_mult float_inc integer_pop print_float float_flush integer_dup_times float_sin float_inc float_yankdup float_div -68 float_dup_times integer_rot)
Errors: [34.0 13 79.0 13 91.0 12 49.0 2 67.0 3 98.0 2 26.0 2 50.0 2 36.0 2 73.0 2 0.0 0 30.0 2 8.0 1 6.0 2 43.0 3 57.0 2 21.0 2 25.0 2 18.0 3 15.0 2 29.0 2 5.0 3 47.0 2 73.0 3 40.0 1]
Total: 1103.0
Mean: 22.06
Genome size: 50
Size: 51
Percent parens: 0.020
--- Population Statistics ---
Average total errors in population: 2376.152382700001
Median total errors in population: 1103.0
Error averages by case: (84.00084840000001 12.833 121.9250004 12.742 136.32701069999996 12.034 101.10308310000002 3.05 117.191582 3.776 142.07786650000003 2.839 78.47162569999999 2.852 99.748316 3.077 86.25560589999999 2.908 119.38313600000005 2.795 54.380398299999996 1.457 83.2928751 3.244 60.301083600000005 2.021 56.348712799999994 2.807 94.2714333 3.772 108.30730759999997 3.255 71.97437749999999 2.752 71.82279749999996 2.784 71.17610680000001 3.774 69.48941699999999 2.89 74.6851871 3.518 59.9872538 3.627 96.02474910000004 2.871 123.65497570000001 3.8 90.16363279999999 2.31)
Error minima by case: (0.9494 8 30.8504 1 13.6028 8 25.8727 1 5.5604 2 0.1378 1 15.0 1 23.1378 2 0.8389 1 0.6091 1 0.0 0 3.1378 2 0.0 0 0.0 0 3.0144 2 12.0508 2 1.0 1 0.7787 1 2.0 1 4.0 1 9.7996 1 0.0 0 1.2695 1 0.807 2 13.1378 1)
Average genome size in population (length): 56.135
Average program size in population (points): 57.135
Average percent parens in population: 0.018
Minimum age in population: 270.6765979639583
Maximum age in population: 275.3418107285517
Average age in population: 273.3697019947329
Median age in population: 273.41966181808
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 11
Genome diversity (% unique Plush genomes):	 0.762
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 11
Syntactic diversity (% unique Push programs):	 0.762
Total error diversity:				 0.067
Error (vector) diversity:			 0.077
Behavioral diversity:				 0.077
--- Run Statistics ---
Number of program evaluations used so far: 194000
Number of point (instruction) evaluations so far: 345236934
--- Timings ---
Current time: 1529615553004 milliseconds
Total Time:         698.0 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       256.0 seconds, 36.7%
Fitness Testing:    344.3 seconds, 49.3%
Report:              97.5 seconds, 14.0%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 193
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 194
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 194
;;******************************
;; -*- Number IO problem report - generation 194
Test total error for best: 59131.0
Test mean error for best: 29.56550
;;------------------------------
Outputs of best individual on training cases:
Correct output: 1.9526623133   | Program output: -32.0473376867
Correct output: -70.8009773522 | Program output: 8.1990226478  
Correct output: -13.7839009431 | Program output: 77.2160990569 
Correct output: 143.8727406396 | Program output: 94.8727406396 
Correct output: 136.4396027174 | Program output: 69.4396027174 
Correct output: 18.5044280613  | Program output: 116.5044280613
Correct output: 92.0568646792  | Program output: 66.0568646792 
Correct output: 71.8873476205  | Program output: 121.8873476205
Correct output: -10.8388749243 | Program output: -46.8388749243
Correct output: 0.9299825981   | Program output: 73.9299825981 
Correct output: -26.7840412284 | Program output: -26.7840412284
Correct output: -102.1264221267 | Program output: -72.1264221267
Correct output: 40.8061668642  | Program output: 48.8061668642 
Correct output: -5.2544966331  | Program output: -11.2544966331
Correct output: 102.9855886244 | Program output: 59.9855886244 
Correct output: -118.0507723766 | Program output: -61.0507723766
Correct output: 55.9371769928  | Program output: 76.9371769928 
Correct output: 4.2657989984   | Program output: 29.2657989984 
Correct output: 96.7057987603  | Program output: 114.7057987603
Correct output: 122.162446611  | Program output: 107.162446611 
Correct output: 30.0102027945  | Program output: 1.0102027945  
Correct output: 104.5822387035 | Program output: 99.5822387035 
Correct output: -1.5538743366  | Program output: -48.5538743366
Correct output: 166.8070496115 | Program output: 93.8070496115 
Correct output: 58.6188945281  | Program output: 98.6188945281 
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction in1} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_inc} {:instruction float_dup_items} {:instruction float_inc} {:instruction integer_mod} {:instruction float_inc} {:instruction integer_swap} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_yank} {:instruction float_inc} {:instruction integer_max} {:instruction float_yankdup} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_inc} {:instruction float_div} {:instruction float_inc} {:instruction integer_flush} {:instruction float_inc} {:instruction integer_dup} {:instruction float_inc} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_inc} {:instruction tag_integer_227} {:instruction float_inc} {:instruction float_div} {:instruction float_yankdup} {:instruction float_inc} {:instruction integer_dup} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_add} {:instruction float_swap} {:instruction integer_dec} {:instruction float_inc} {:instruction float_inc} {:instruction integer_add} {:instruction integer_yankdup} {:instruction print_float} {:instruction integer_mult} {:instruction integer_div} {:instruction integer_mod} {:instruction integer_mod} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_dup_times} {:instruction float_inc} {:instruction integer_flush} {:instruction print_float} {:instruction float_flush} {:instruction print_float} {:instruction -58} {:instruction float_inc})
Best program: (in1 float_inc float_yankdup float_inc float_dup_items float_inc integer_mod float_inc integer_swap float_inc float_inc float_inc integer_yank float_inc integer_max float_yankdup float_inc float_yankdup float_inc float_div float_inc integer_flush float_inc integer_dup float_inc float_inc float_yankdup float_inc tag_integer_227 float_inc float_div float_yankdup float_inc integer_dup float_inc float_inc float_inc float_inc float_inc float_add float_swap integer_dec float_inc float_inc integer_add integer_yankdup print_float integer_mult integer_div integer_mod integer_mod float_inc float_inc float_inc integer_dup_times float_inc integer_flush print_float float_flush print_float -58 float_inc)
Errors: [34.0 13 79.0 13 91.0 12 49.0 2 67.0 3 98.0 2 26.0 2 50.0 2 36.0 2 73.0 2 0.0 0 30.0 2 8.0 1 6.0 2 43.0 3 57.0 2 21.0 2 25.0 2 18.0 3 15.0 2 29.0 2 5.0 3 47.0 2 73.0 3 40.0 1]
Total: 1103.0
Mean: 22.06
Genome size: 62
Size: 63
Percent parens: 0.016
--- Population Statistics ---
Average total errors in population: 2587.255350300001
Median total errors in population: 1103.0
Error averages by case: (93.18675310000003 12.825 126.77824149999996 12.804 142.11177229999996 12.071 109.23797260000005 3.266 124.68089820000006 3.962 149.99083480000004 3.026 86.39519319999998 3.081 109.36133029999999 3.223 95.7510365 3.151 125.30698920000003 2.972 64.2016694 1.735 93.76116959999999 3.416 67.4494289 2.248 63.941713299999996 3.036 101.87306939999996 3.963 118.27933559999995 3.427 80.01775180000003 3.001 79.1211536 2.97 82.09386049999996 3.974 81.0461549 3.102 79.1211915 3.859 70.50586799999999 3.822 105.11611309999998 3.093 131.38398250000003 3.992 98.03186649999995 2.491)
Error minima by case: (0.3712 8 56.0 1 12.7839 9 20.8727 1 2.5604 2 0.3831 1 15.0569 1 27.0 2 4.8389 1 1.7117 1 0.0 0 7.0 2 0.0 0 0.0 0 0.9856 2 9.0508 2 2.0 1 1.0141 1 0.0 0 5.0 1 0.0425 1 0.0 0 0.5539 1 4.193 2 17.0 1)
Average genome size in population (length): 55.88
Average program size in population (points): 56.88
Average percent parens in population: 0.018
Minimum age in population: 271.9047696342053
Maximum age in population: 276.8574036340309
Average age in population: 274.7446108356644
Median age in population: 274.7935199380807
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 12
Genome diversity (% unique Plush genomes):	 0.76
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 12
Syntactic diversity (% unique Push programs):	 0.76
Total error diversity:				 0.083
Error (vector) diversity:			 0.093
Behavioral diversity:				 0.093
--- Run Statistics ---
Number of program evaluations used so far: 195000
Number of point (instruction) evaluations so far: 346633934
--- Timings ---
Current time: 1529615556330 milliseconds
Total Time:         701.2 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       257.4 seconds, 36.7%
Fitness Testing:    345.9 seconds, 49.3%
Report:              97.9 seconds, 14.0%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 194
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 195
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 195
;;******************************
;; -*- Number IO problem report - generation 195
Test total error for best: 59131.0
Test mean error for best: 29.56550
;;------------------------------
Outputs of best individual on training cases:
Correct output: 1.9526623133   | Program output: -32.0473376867
Correct output: -70.8009773522 | Program output: 8.1990226478  
Correct output: -13.7839009431 | Program output: 77.2160990569 
Correct output: 143.8727406396 | Program output: 94.8727406396 
Correct output: 136.4396027174 | Program output: 69.4396027174 
Correct output: 18.5044280613  | Program output: 116.5044280613
Correct output: 92.0568646792  | Program output: 66.0568646792 
Correct output: 71.8873476205  | Program output: 121.8873476205
Correct output: -10.8388749243 | Program output: -46.8388749243
Correct output: 0.9299825981   | Program output: 73.9299825981 
Correct output: -26.7840412284 | Program output: -26.7840412284
Correct output: -102.1264221267 | Program output: -72.1264221267
Correct output: 40.8061668642  | Program output: 48.8061668642 
Correct output: -5.2544966331  | Program output: -11.2544966331
Correct output: 102.9855886244 | Program output: 59.9855886244 
Correct output: -118.0507723766 | Program output: -61.0507723766
Correct output: 55.9371769928  | Program output: 76.9371769928 
Correct output: 4.2657989984   | Program output: 29.2657989984 
Correct output: 96.7057987603  | Program output: 114.7057987603
Correct output: 122.162446611  | Program output: 107.162446611 
Correct output: 30.0102027945  | Program output: 1.0102027945  
Correct output: 104.5822387035 | Program output: 99.5822387035 
Correct output: -1.5538743366  | Program output: -48.5538743366
Correct output: 166.8070496115 | Program output: 93.8070496115 
Correct output: 58.6188945281  | Program output: 98.6188945281 
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction in1} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_inc} {:instruction float_dup_items} {:instruction float_inc} {:instruction float_inc} {:instruction integer_dec} {:instruction tagged_646} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_inc} {:instruction integer_dup_times} {:instruction float_inc} {:instruction float_div} {:instruction float_inc} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_inc} {:instruction float_div} {:instruction float_inc} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_inc} {:instruction integer_shove} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_rot} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_inc} {:instruction integer_add} {:instruction float_inc} {:instruction integer_mod} {:instruction integer_mod} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_flush} {:instruction float_inc} {:instruction float_mod} {:instruction print_float} {:instruction float_inc} {:instruction float_yank} {:instruction float_div} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_mod} {:instruction float_inc} {:instruction integer_dec} {:instruction print_float} {:instruction integer_flush})
Best program: (in1 float_inc float_yankdup float_inc float_dup_items float_inc float_inc integer_dec tagged_646 float_inc float_yankdup float_inc integer_dup_times float_inc float_div float_inc float_inc float_yankdup float_inc float_div float_inc float_inc float_yankdup float_inc integer_shove float_inc float_inc float_inc float_inc integer_rot float_inc float_yankdup float_inc integer_add float_inc integer_mod integer_mod float_inc float_inc float_inc integer_flush float_inc float_mod print_float float_inc float_yank float_div float_inc float_inc float_inc integer_mod float_inc integer_dec print_float integer_flush)
Errors: [34.0 13 79.0 13 91.0 12 49.0 2 67.0 3 98.0 2 26.0 2 50.0 2 36.0 2 73.0 2 0.0 0 30.0 2 8.0 1 6.0 2 43.0 3 57.0 2 21.0 2 25.0 2 18.0 3 15.0 2 29.0 2 5.0 3 47.0 2 73.0 3 40.0 1]
Total: 1103.0
Mean: 22.06
Genome size: 55
Size: 56
Percent parens: 0.018
--- Population Statistics ---
Average total errors in population: 2672.28273
Median total errors in population: 1103.0
Error averages by case: (94.8860425 12.72 130.8337299 12.774 145.95151320000002 12.025 114.10825580000001 3.436 129.09143289999997 4.059 151.23155880000004 3.12 90.80028669999999 3.175 111.374512 3.374 97.40804360000003 3.274 129.20483000000002 3.086 66.9044447 1.922 96.57343629999995 3.646 72.03251900000001 2.359 66.2466327 3.125 106.20991719999999 4.057 121.22082209999999 3.651 84.58388130000002 3.072 82.67463009999997 3.071 84.29357290000004 4.048 83.1959754 3.18 83.88437720000002 4.012 73.7118942 3.877 106.69606389999996 3.184 136.3687164 4.092 101.77464120000002 2.682)
Error minima by case: (0.9527 8 19.9506 1 14.7839 8 23.8904 2 4.5604 2 0.1967 1 1.0379 1 26.1127 2 5.633 1 0.07 1 0.0 0 7.0 2 0.0 0 0.0 0 8.9856 2 11.0508 2 2.0 1 0.3601 1 0.0 0 3.0 1 4.0102 1 0.0 0 2.4461 1 3.9274 2 15.8197 1)
Average genome size in population (length): 56.155
Average program size in population (points): 57.155
Average percent parens in population: 0.018
Minimum age in population: 272.919485223862
Maximum age in population: 278.1043866031145
Average age in population: 276.1228009420837
Median age in population: 276.1723959740329
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 12
Genome diversity (% unique Plush genomes):	 0.802
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 12
Syntactic diversity (% unique Push programs):	 0.802
Total error diversity:				 0.087
Error (vector) diversity:			 0.096
Behavioral diversity:				 0.097
--- Run Statistics ---
Number of program evaluations used so far: 196000
Number of point (instruction) evaluations so far: 348037809
--- Timings ---
Current time: 1529615559571 milliseconds
Total Time:         704.5 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       258.7 seconds, 36.7%
Fitness Testing:    347.4 seconds, 49.3%
Report:              98.3 seconds, 14.0%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 195
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 196
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 196
;;******************************
;; -*- Number IO problem report - generation 196
Test total error for best: 59131.0
Test mean error for best: 29.56550
;;------------------------------
Outputs of best individual on training cases:
Correct output: 1.9526623133   | Program output: -32.0473376867
Correct output: -70.8009773522 | Program output: 8.1990226478  
Correct output: -13.7839009431 | Program output: 77.2160990569 
Correct output: 143.8727406396 | Program output: 94.8727406396 
Correct output: 136.4396027174 | Program output: 69.4396027174 
Correct output: 18.5044280613  | Program output: 116.5044280613
Correct output: 92.0568646792  | Program output: 66.0568646792 
Correct output: 71.8873476205  | Program output: 121.8873476205
Correct output: -10.8388749243 | Program output: -46.8388749243
Correct output: 0.9299825981   | Program output: 73.9299825981 
Correct output: -26.7840412284 | Program output: -26.7840412284
Correct output: -102.1264221267 | Program output: -72.1264221267
Correct output: 40.8061668642  | Program output: 48.8061668642 
Correct output: -5.2544966331  | Program output: -11.2544966331
Correct output: 102.9855886244 | Program output: 59.9855886244 
Correct output: -118.0507723766 | Program output: -61.0507723766
Correct output: 55.9371769928  | Program output: 76.9371769928 
Correct output: 4.2657989984   | Program output: 29.2657989984 
Correct output: 96.7057987603  | Program output: 114.7057987603
Correct output: 122.162446611  | Program output: 107.162446611 
Correct output: 30.0102027945  | Program output: 1.0102027945  
Correct output: 104.5822387035 | Program output: 99.5822387035 
Correct output: -1.5538743366  | Program output: -48.5538743366
Correct output: 166.8070496115 | Program output: 93.8070496115 
Correct output: 58.6188945281  | Program output: 98.6188945281 
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction in1} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_dup_items} {:instruction float_inc} {:instruction float_inc} {:instruction integer_dec} {:instruction tagged_646} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_yankdup} {:instruction float_inc} {:instruction float_inc} {:instruction float_add} {:instruction float_div} {:instruction float_inc} {:instruction integer_pop} {:instruction float_inc} {:instruction float_swap} {:instruction float_inc} {:instruction integer_inc} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_inc} {:instruction integer_mod} {:instruction float_inc} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_add} {:instruction integer_max} {:instruction float_dup_items} {:instruction float_inc} {:instruction float_inc} {:instruction float_swap} {:instruction float_inc} {:instruction float_inc} {:instruction float_mult} {:instruction float_inc} {:instruction integer_flush} {:instruction print_float} {:instruction float_inc} {:instruction float_stackdepth} {:instruction float_inc} {:instruction float_inc} {:instruction float_yank} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_mult} {:instruction float_inc} {:instruction integer_flush})
Best program: (in1 float_inc float_yankdup float_dup_items float_inc float_inc integer_dec tagged_646 float_inc float_yankdup float_inc float_inc float_inc float_yankdup float_yankdup float_inc float_inc float_add float_div float_inc integer_pop float_inc float_swap float_inc integer_inc float_inc float_yankdup float_inc integer_mod float_inc float_inc float_yankdup float_inc float_inc float_inc float_add integer_max float_dup_items float_inc float_inc float_swap float_inc float_inc float_mult float_inc integer_flush print_float float_inc float_stackdepth float_inc float_inc float_yank float_inc float_inc float_inc float_mult float_inc integer_flush)
Errors: [34.0 13 79.0 13 91.0 12 49.0 2 67.0 3 98.0 2 26.0 2 50.0 2 36.0 2 73.0 2 0.0 0 30.0 2 8.0 1 6.0 2 43.0 3 57.0 2 21.0 2 25.0 2 18.0 3 15.0 2 29.0 2 5.0 3 47.0 2 73.0 3 40.0 1]
Total: 1103.0
Mean: 22.06
Genome size: 58
Size: 59
Percent parens: 0.017
--- Population Statistics ---
Average total errors in population: 2402.172328299999
Median total errors in population: 1103.0
Error averages by case: (84.59371900000001 12.742 120.09820380000001 12.765 135.1256505 12.005 103.39310830000004 3.296 118.8171498 3.964 141.2900413 3.009 80.02113830000002 3.04 101.159076 3.261 87.10597909999998 3.093 118.26768490000002 2.974 55.95952179999998 1.746 85.85107929999998 3.463 60.91589679999999 2.247 55.72196809999999 2.96 95.64101649999999 3.928 110.56744719999996 3.489 72.7055057 2.949 70.86927050000003 2.972 73.89078749999997 3.937 72.81699240000003 3.041 72.62099549999999 3.794 63.0849809 3.763 96.47234759999999 3.05 125.77633019999998 3.971 91.3974373 2.55)
Error minima by case: (0.0473 8 12.1494 1 14.4484 8 24.8727 1 1.4396 2 0.2695 1 16.0 1 26.0 2 12.4945 1 0.4357 1 0.0 0 6.0 2 0.0 0 0.0 0 4.0144 2 5.0508 2 1.0 1 0.1763 1 2.0 1 5.0 1 1.0102 1 0.0 0 2.0953 1 0.193 2 16.0 1)
Average genome size in population (length): 56.153
Average program size in population (points): 57.153
Average percent parens in population: 0.018
Minimum age in population: 274.9473702453925
Maximum age in population: 279.5258502777207
Average age in population: 277.5612857793716
Median age in population: 277.5671678361343
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 11
Genome diversity (% unique Plush genomes):	 0.804
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 11
Syntactic diversity (% unique Push programs):	 0.804
Total error diversity:				 0.086
Error (vector) diversity:			 0.095
Behavioral diversity:				 0.095
--- Run Statistics ---
Number of program evaluations used so far: 197000
Number of point (instruction) evaluations so far: 349441634
--- Timings ---
Current time: 1529615562838 milliseconds
Total Time:         707.7 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       260.0 seconds, 36.7%
Fitness Testing:    348.9 seconds, 49.3%
Report:              98.8 seconds, 14.0%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 196
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 197
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 197
;;******************************
;; -*- Number IO problem report - generation 197
Test total error for best: 59131.0
Test mean error for best: 29.56550
;;------------------------------
Outputs of best individual on training cases:
Correct output: 1.9526623133   | Program output: -32.0473376867
Correct output: -70.8009773522 | Program output: 8.1990226478  
Correct output: -13.7839009431 | Program output: 77.2160990569 
Correct output: 143.8727406396 | Program output: 94.8727406396 
Correct output: 136.4396027174 | Program output: 69.4396027174 
Correct output: 18.5044280613  | Program output: 116.5044280613
Correct output: 92.0568646792  | Program output: 66.0568646792 
Correct output: 71.8873476205  | Program output: 121.8873476205
Correct output: -10.8388749243 | Program output: -46.8388749243
Correct output: 0.9299825981   | Program output: 73.9299825981 
Correct output: -26.7840412284 | Program output: -26.7840412284
Correct output: -102.1264221267 | Program output: -72.1264221267
Correct output: 40.8061668642  | Program output: 48.8061668642 
Correct output: -5.2544966331  | Program output: -11.2544966331
Correct output: 102.9855886244 | Program output: 59.9855886244 
Correct output: -118.0507723766 | Program output: -61.0507723766
Correct output: 55.9371769928  | Program output: 76.9371769928 
Correct output: 4.2657989984   | Program output: 29.2657989984 
Correct output: 96.7057987603  | Program output: 114.7057987603
Correct output: 122.162446611  | Program output: 107.162446611 
Correct output: 30.0102027945  | Program output: 1.0102027945  
Correct output: 104.5822387035 | Program output: 99.5822387035 
Correct output: -1.5538743366  | Program output: -48.5538743366
Correct output: 166.8070496115 | Program output: 93.8070496115 
Correct output: 58.6188945281  | Program output: 98.6188945281 
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction in1} {:instruction float_sub} {:instruction integer_max} {:instruction integer_mod} {:instruction float_shove} {:instruction integer_sub} {:instruction integer_dup_items} {:instruction float_inc} {:instruction float_frominteger} {:instruction float_dup_items} {:instruction integer_dup} {:instruction float_shove} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_mod} {:instruction float_inc} {:instruction integer_dup_items} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_div} {:instruction float_inc} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_yankdup} {:instruction float_inc} {:instruction float_inc} {:instruction float_add} {:instruction float_div} {:instruction float_inc} {:instruction integer_pop} {:instruction float_inc} {:instruction float_swap} {:instruction float_inc} {:instruction integer_inc} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_inc} {:instruction integer_mod} {:instruction float_inc} {:instruction float_inc} {:instruction integer_dec} {:instruction float_inc} {:instruction float_inc} {:instruction float_add} {:instruction integer_max} {:instruction integer_swap} {:instruction float_inc} {:instruction float_inc} {:instruction float_swap} {:instruction float_inc} {:instruction print_float} {:instruction float_inc} {:instruction float_min} {:instruction float_mult} {:instruction float_mult} {:instruction integer_div} {:instruction float_div} {:instruction float_inc} {:instruction float_inc} {:instruction float_dec} {:instruction integer_mod} {:instruction integer_inc} {:instruction print_float})
Best program: (in1 float_sub integer_max integer_mod float_shove integer_sub integer_dup_items float_inc float_frominteger float_dup_items integer_dup float_shove float_inc float_inc float_inc integer_mod float_inc integer_dup_items float_inc float_inc float_inc integer_div float_inc float_inc float_yankdup float_yankdup float_inc float_inc float_add float_div float_inc integer_pop float_inc float_swap float_inc integer_inc float_inc float_yankdup float_inc integer_mod float_inc float_inc integer_dec float_inc float_inc float_add integer_max integer_swap float_inc float_inc float_swap float_inc print_float float_inc float_min float_mult float_mult integer_div float_div float_inc float_inc float_dec integer_mod integer_inc print_float)
Errors: [34.0 13 79.0 13 91.0 12 49.0 2 67.0 3 98.0 2 26.0 2 50.0 2 36.0 2 73.0 2 0.0 0 30.0 2 8.0 1 6.0 2 43.0 3 57.0 2 21.0 2 25.0 2 18.0 3 15.0 2 29.0 2 5.0 3 47.0 2 73.0 3 40.0 1]
Total: 1103.0
Mean: 22.06
Genome size: 65
Size: 66
Percent parens: 0.015
--- Population Statistics ---
Average total errors in population: 2321.747760500001
Median total errors in population: 1103.0
Error averages by case: (80.71133910000002 12.751 119.21637570000001 12.735 133.75063850000004 11.988 99.40256910000004 3.211 114.74732399999999 3.885 139.765322 2.959 75.94948880000001 3.018 98.70253770000002 3.189 83.79768870000001 3.047 116.71750200000001 2.916 51.50955139999999 1.622 82.52544539999998 3.387 57.09882549999999 2.161 51.86956330000001 2.937 91.6086755 3.922 106.93565719999998 3.395 70.0937957 2.918 69.43720019999999 2.907 69.89101830000001 3.878 68.37116160000002 3.007 70.85150920000002 3.698 58.64996679999998 3.752 93.00704399999998 2.987 121.65666900000002 3.926 88.83189180000004 2.453)
Error minima by case: (0.027 7 27.189 1 9.8193 8 19.8727 2 7.5604 2 0.2737 1 14.0 1 27.0 2 4.8389 1 0.1717 1 0.0 0 7.0 2 0.0 0 0.0 0 0.0144 2 14.0508 2 2.0 1 0.2891 1 5.0 1 3.0 1 3.0102 1 0.0 0 1.1075 1 2.193 2 17.0 1)
Average genome size in population (length): 55.565
Average program size in population (points): 56.565
Average percent parens in population: 0.018
Minimum age in population: 276.8175040893531
Maximum age in population: 281.3066410115258
Average age in population: 279.0304714740353
Median age in population: 279.0610047052753
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 13
Genome diversity (% unique Plush genomes):	 0.768
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 13
Syntactic diversity (% unique Push programs):	 0.768
Total error diversity:				 0.08
Error (vector) diversity:			 0.088
Behavioral diversity:				 0.088
--- Run Statistics ---
Number of program evaluations used so far: 198000
Number of point (instruction) evaluations so far: 350830809
--- Timings ---
Current time: 1529615566149 milliseconds
Total Time:         711.1 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       261.3 seconds, 36.7%
Fitness Testing:    350.4 seconds, 49.3%
Report:              99.2 seconds, 14.0%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 197
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 198
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 198
;;******************************
;; -*- Number IO problem report - generation 198
Test total error for best: 59131.0
Test mean error for best: 29.56550
;;------------------------------
Outputs of best individual on training cases:
Correct output: 1.9526623133   | Program output: -32.0473376867
Correct output: -70.8009773522 | Program output: 8.1990226478  
Correct output: -13.7839009431 | Program output: 77.2160990569 
Correct output: 143.8727406396 | Program output: 94.8727406396 
Correct output: 136.4396027174 | Program output: 69.4396027174 
Correct output: 18.5044280613  | Program output: 116.5044280613
Correct output: 92.0568646792  | Program output: 66.0568646792 
Correct output: 71.8873476205  | Program output: 121.8873476205
Correct output: -10.8388749243 | Program output: -46.8388749243
Correct output: 0.9299825981   | Program output: 73.9299825981 
Correct output: -26.7840412284 | Program output: -26.7840412284
Correct output: -102.1264221267 | Program output: -72.1264221267
Correct output: 40.8061668642  | Program output: 48.8061668642 
Correct output: -5.2544966331  | Program output: -11.2544966331
Correct output: 102.9855886244 | Program output: 59.9855886244 
Correct output: -118.0507723766 | Program output: -61.0507723766
Correct output: 55.9371769928  | Program output: 76.9371769928 
Correct output: 4.2657989984   | Program output: 29.2657989984 
Correct output: 96.7057987603  | Program output: 114.7057987603
Correct output: 122.162446611  | Program output: 107.162446611 
Correct output: 30.0102027945  | Program output: 1.0102027945  
Correct output: 104.5822387035 | Program output: 99.5822387035 
Correct output: -1.5538743366  | Program output: -48.5538743366
Correct output: 166.8070496115 | Program output: 93.8070496115 
Correct output: 58.6188945281  | Program output: 98.6188945281 
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction in1} {:instruction integer_max} {:instruction tagged_55} {:instruction float_stackdepth} {:instruction integer_max} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_yank} {:instruction float_inc} {:instruction integer_dup_items} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_yank} {:instruction float_inc} {:instruction integer_max} {:instruction integer_mod} {:instruction float_inc} {:instruction float_shove} {:instruction float_inc} {:instruction integer_add} {:instruction float_inc} {:instruction float_div} {:instruction float_inc} {:instruction float_inc} {:instruction float_rot} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_inc} {:instruction integer_mod} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_mult} {:instruction float_inc} {:instruction integer_pop} {:instruction print_float} {:instruction float_yankdup} {:instruction float_inc} {:instruction float_yankdup} {:instruction integer_mod} {:instruction float_stackdepth} {:instruction integer_inc})
Best program: (in1 integer_max tagged_55 float_stackdepth integer_max float_inc float_inc float_inc integer_yank float_inc integer_dup_items float_inc float_inc float_inc integer_yank float_inc integer_max integer_mod float_inc float_shove float_inc integer_add float_inc float_div float_inc float_inc float_rot float_inc float_inc float_inc float_inc float_yankdup float_inc float_yankdup float_inc float_yankdup float_inc integer_mod float_inc float_inc float_inc float_mult float_inc integer_pop print_float float_yankdup float_inc float_yankdup integer_mod float_stackdepth integer_inc)
Errors: [34.0 13 79.0 13 91.0 12 49.0 2 67.0 3 98.0 2 26.0 2 50.0 2 36.0 2 73.0 2 0.0 0 30.0 2 8.0 1 6.0 2 43.0 3 57.0 2 21.0 2 25.0 2 18.0 3 15.0 2 29.0 2 5.0 3 47.0 2 73.0 3 40.0 1]
Total: 1103.0
Mean: 22.06
Genome size: 51
Size: 52
Percent parens: 0.019
--- Population Statistics ---
Average total errors in population: 2568.6373734
Median total errors in population: 1103.0
Error averages by case: (91.16561800000001 12.789 127.59768160000006 12.773 142.84940319999998 12.036 109.54901890000001 3.244 125.37346689999998 3.924 148.41418139999996 2.967 86.77344000000002 3.004 107.41808439999998 3.26 93.6519395 3.074 126.09600360000002 2.928 61.79394789999999 1.688 91.58798070000002 3.442 68.2890311 2.207 61.690560500000004 2.93 102.44090329999997 3.92 116.37804909999998 3.468 80.6130959 2.922 79.81188519999999 2.94 79.6722599 3.896 78.23786660000002 3.012 80.25334899999999 3.711 68.6415233 3.723 103.17030179999998 3.02 131.9662944 3.947 97.84348720000007 2.533)
Error minima by case: (0.1577 9 30.8504 1 6.8485 8 22.8727 1 20.5604 2 0.4651 1 11.0 1 28.0 2 9.7935 1 1.0529 1 0.0 0 8.0 2 0.0 0 0.0 0 6.0144 2 27.0508 2 1.0 1 0.9859 1 2.0 1 0.0 0 2.1325 1 0.0 0 1.2572 1 2.193 2 18.0 1)
Average genome size in population (length): 55.747
Average program size in population (points): 56.747
Average percent parens in population: 0.018
Minimum age in population: 278.1044446624176
Maximum age in population: 282.6166897711048
Average age in population: 280.4889491624435
Median age in population: 280.5259864840106
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 9
Genome diversity (% unique Plush genomes):	 0.793
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 9
Syntactic diversity (% unique Push programs):	 0.793
Total error diversity:				 0.073
Error (vector) diversity:			 0.08
Behavioral diversity:				 0.081
--- Run Statistics ---
Number of program evaluations used so far: 199000
Number of point (instruction) evaluations so far: 352224509
--- Timings ---
Current time: 1529615569418 milliseconds
Total Time:         714.4 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       262.6 seconds, 36.8%
Fitness Testing:    352.0 seconds, 49.3%
Report:              99.7 seconds, 14.0%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 198
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 199
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 199
;;******************************
;; -*- Number IO problem report - generation 199
Test total error for best: 59131.0
Test mean error for best: 29.56550
;;------------------------------
Outputs of best individual on training cases:
Correct output: 1.9526623133   | Program output: -32.0473376867
Correct output: -70.8009773522 | Program output: 8.1990226478  
Correct output: -13.7839009431 | Program output: 77.2160990569 
Correct output: 143.8727406396 | Program output: 94.8727406396 
Correct output: 136.4396027174 | Program output: 69.4396027174 
Correct output: 18.5044280613  | Program output: 116.5044280613
Correct output: 92.0568646792  | Program output: 66.0568646792 
Correct output: 71.8873476205  | Program output: 121.8873476205
Correct output: -10.8388749243 | Program output: -46.8388749243
Correct output: 0.9299825981   | Program output: 73.9299825981 
Correct output: -26.7840412284 | Program output: -26.7840412284
Correct output: -102.1264221267 | Program output: -72.1264221267
Correct output: 40.8061668642  | Program output: 48.8061668642 
Correct output: -5.2544966331  | Program output: -11.2544966331
Correct output: 102.9855886244 | Program output: 59.9855886244 
Correct output: -118.0507723766 | Program output: -61.0507723766
Correct output: 55.9371769928  | Program output: 76.9371769928 
Correct output: 4.2657989984   | Program output: 29.2657989984 
Correct output: 96.7057987603  | Program output: 114.7057987603
Correct output: 122.162446611  | Program output: 107.162446611 
Correct output: 30.0102027945  | Program output: 1.0102027945  
Correct output: 104.5822387035 | Program output: 99.5822387035 
Correct output: -1.5538743366  | Program output: -48.5538743366
Correct output: 166.8070496115 | Program output: 93.8070496115 
Correct output: 58.6188945281  | Program output: 98.6188945281 
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction in1} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_inc} {:instruction float_dup_items} {:instruction float_inc} {:instruction float_inc} {:instruction float_max} {:instruction tagged_646} {:instruction float_inc} {:instruction float_yank} {:instruction float_inc} {:instruction float_inc} {:instruction float_div} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_inc} {:instruction tagged_913} {:instruction float_inc} {:instruction integer_flush} {:instruction float_inc} {:instruction integer_dup} {:instruction float_inc} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_inc} {:instruction tag_integer_134} {:instruction float_inc} {:instruction float_div} {:instruction float_yankdup} {:instruction float_inc} {:instruction integer_sub} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_add} {:instruction float_swap} {:instruction integer_dec} {:instruction float_inc} {:instruction float_inc} {:instruction integer_add} {:instruction float_inc} {:instruction print_float} {:instruction float_inc} {:instruction float_inc} {:instruction integer_mod} {:instruction float_add} {:instruction float_inc} {:instruction float_inc} {:instruction integer_pop} {:instruction print_float} {:instruction float_flush} {:instruction integer_dup_items} {:instruction float_mult} {:instruction float_stackdepth} {:instruction float_inc} {:instruction float_inc} {:instruction integer_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_mod} {:instruction float_inc} {:instruction -59.37769748780111} {:instruction tag_integer_844})
Best program: (in1 float_inc float_yankdup float_inc float_dup_items float_inc float_inc float_max tagged_646 float_inc float_yank float_inc float_inc float_div float_inc float_yankdup float_inc float_yankdup float_inc tagged_913 float_inc integer_flush float_inc integer_dup float_inc float_inc float_yankdup float_inc tag_integer_134 float_inc float_div float_yankdup float_inc integer_sub float_inc float_inc float_inc float_inc float_add float_swap integer_dec float_inc float_inc integer_add float_inc print_float float_inc float_inc integer_mod float_add float_inc float_inc integer_pop print_float float_flush integer_dup_items float_mult float_stackdepth float_inc float_inc integer_inc float_inc float_inc float_mod float_inc -59.37769748780111 tag_integer_844)
Errors: [34.0 13 79.0 13 91.0 12 49.0 2 67.0 3 98.0 2 26.0 2 50.0 2 36.0 2 73.0 2 0.0 0 30.0 2 8.0 1 6.0 2 43.0 3 57.0 2 21.0 2 25.0 2 18.0 3 15.0 2 29.0 2 5.0 3 47.0 2 73.0 3 40.0 1]
Total: 1103.0
Mean: 22.06
Genome size: 67
Size: 68
Percent parens: 0.015
--- Population Statistics ---
Average total errors in population: 2678.2884879000003
Median total errors in population: 1103.0
Error averages by case: (96.8054265 12.767 128.68677710000003 12.788 146.88043760000002 12.023 113.69478099999998 3.315 129.44041569999996 3.958 153.2755972 3.021 91.1562559 3.08 112.31380759999999 3.258 99.9324575 3.147 130.25640260000003 2.98 67.4219887 1.752 96.87597930000001 3.5 72.24909830000003 2.257 65.2920407 2.99 106.98064339999999 3.984 121.44422149999997 3.5 84.910799 2.974 81.50410490000002 2.973 84.7316047 3.945 83.52658660000003 3.071 82.69892129999997 3.963 73.0516053 3.804 108.57704579999998 3.054 135.8821744 4.011 102.02131529999998 2.563)
Error minima by case: (0.3931 7 21.0 1 0.6311 2 19.8727 2 5.5604 2 0.5446 1 14.0569 1 21.5806 1 10.0833 1 0.2688 1 0.0 0 7.0 1 0.0 0 0.0 0 6.5904 2 12.0508 2 0.0 0 0.1291 1 3.0 1 4.0 1 6.0102 1 0.0 0 0.1075 1 5.193 2 16.9191 1)
Average genome size in population (length): 55.722
Average program size in population (points): 56.722
Average percent parens in population: 0.018
Minimum age in population: 279.1996891288237
Maximum age in population: 283.941554797533
Average age in population: 281.9179763078331
Median age in population: 281.9757848937695
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 7
Genome diversity (% unique Plush genomes):	 0.82
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 7
Syntactic diversity (% unique Push programs):	 0.82
Total error diversity:				 0.077
Error (vector) diversity:			 0.084
Behavioral diversity:				 0.084
--- Run Statistics ---
Number of program evaluations used so far: 200000
Number of point (instruction) evaluations so far: 353617609
--- Timings ---
Current time: 1529615572759 milliseconds
Total Time:         717.6 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       263.9 seconds, 36.8%
Fitness Testing:    353.5 seconds, 49.3%
Report:             100.1 seconds, 13.9%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 199
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 200
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 200
;;******************************
;; -*- Number IO problem report - generation 200
Test total error for best: 59131.0
Test mean error for best: 29.56550
;;------------------------------
Outputs of best individual on training cases:
Correct output: 1.9526623133   | Program output: -32.0473376867
Correct output: -70.8009773522 | Program output: 8.1990226478  
Correct output: -13.7839009431 | Program output: 77.2160990569 
Correct output: 143.8727406396 | Program output: 94.8727406396 
Correct output: 136.4396027174 | Program output: 69.4396027174 
Correct output: 18.5044280613  | Program output: 116.5044280613
Correct output: 92.0568646792  | Program output: 66.0568646792 
Correct output: 71.8873476205  | Program output: 121.8873476205
Correct output: -10.8388749243 | Program output: -46.8388749243
Correct output: 0.9299825981   | Program output: 73.9299825981 
Correct output: -26.7840412284 | Program output: -26.7840412284
Correct output: -102.1264221267 | Program output: -72.1264221267
Correct output: 40.8061668642  | Program output: 48.8061668642 
Correct output: -5.2544966331  | Program output: -11.2544966331
Correct output: 102.9855886244 | Program output: 59.9855886244 
Correct output: -118.0507723766 | Program output: -61.0507723766
Correct output: 55.9371769928  | Program output: 76.9371769928 
Correct output: 4.2657989984   | Program output: 29.2657989984 
Correct output: 96.7057987603  | Program output: 114.7057987603
Correct output: 122.162446611  | Program output: 107.162446611 
Correct output: 30.0102027945  | Program output: 1.0102027945  
Correct output: 104.5822387035 | Program output: 99.5822387035 
Correct output: -1.5538743366  | Program output: -48.5538743366
Correct output: 166.8070496115 | Program output: 93.8070496115 
Correct output: 58.6188945281  | Program output: 98.6188945281 
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction in1} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_inc} {:instruction float_dup_items} {:instruction float_inc} {:instruction float_inc} {:instruction integer_dec} {:instruction tagged_646} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_inc} {:instruction float_div} {:instruction float_inc} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_inc} {:instruction tagged_908} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_inc} {:instruction integer_mod} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_mult} {:instruction float_inc} {:instruction integer_pop} {:instruction print_float} {:instruction float_flush} {:instruction float_yankdup} {:instruction float_mult} {:instruction float_stackdepth} {:instruction float_inc})
Best program: (in1 float_inc float_yankdup float_inc float_dup_items float_inc float_inc integer_dec tagged_646 float_inc float_yankdup float_inc float_inc float_inc float_inc float_yankdup float_inc float_div float_inc float_inc float_yankdup float_inc tagged_908 float_inc float_inc float_inc float_inc float_yankdup float_inc float_yankdup float_inc float_yankdup float_inc integer_mod float_inc float_inc float_inc float_mult float_inc integer_pop print_float float_flush float_yankdup float_mult float_stackdepth float_inc)
Errors: [34.0 13 79.0 13 91.0 12 49.0 2 67.0 3 98.0 2 26.0 2 50.0 2 36.0 2 73.0 2 0.0 0 30.0 2 8.0 1 6.0 2 43.0 3 57.0 2 21.0 2 25.0 2 18.0 3 15.0 2 29.0 2 5.0 3 47.0 2 73.0 3 40.0 1]
Total: 1103.0
Mean: 22.06
Genome size: 46
Size: 47
Percent parens: 0.021
--- Population Statistics ---
Average total errors in population: 2502.0223188000004
Median total errors in population: 1103.0
Error averages by case: (88.7010964 12.811 125.99680280000003 12.727 140.12506180000003 12.032 106.77231210000001 3.236 122.63616459999997 3.905 145.56834910000003 2.968 83.96012490000003 3.003 104.4694481 3.237 91.02796610000001 3.051 123.29524400000001 2.95 59.42033299999999 1.684 88.6231628 3.446 65.22930410000001 2.161 59.57322150000002 2.936 99.62876650000003 3.928 113.4466143 3.447 77.55075140000001 2.916 77.52354639999997 2.918 76.67158829999998 3.904 75.5074278 2.998 78.55323649999998 3.899 65.8309355 3.733 100.59639790000003 2.998 129.13149289999998 3.942 94.84496999999998 2.508)
Error minima by case: (1.5178 7 30.4188 1 15.8585 8 20.8727 1 11.5604 2 0.2737 1 13.0 1 33.0 2 14.2527 1 2.7157 1 0.0 0 13.0 2 0.0 0 0.0 0 2.9856 2 18.0508 2 4.0 1 0.3601 1 1.0 1 2.0 1 2.0102 1 0.0 0 3.5935 1 1.193 1 20.9163 1)
Average genome size in population (length): 55.552
Average program size in population (points): 56.552
Average percent parens in population: 0.018
Minimum age in population: 280.4144912491213
Maximum age in population: 285.2810642680445
Average age in population: 283.3402393091279
Median age in population: 283.4156770755195
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 8
Genome diversity (% unique Plush genomes):	 0.8
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 8
Syntactic diversity (% unique Push programs):	 0.8
Total error diversity:				 0.079
Error (vector) diversity:			 0.089
Behavioral diversity:				 0.089
--- Run Statistics ---
Number of program evaluations used so far: 201000
Number of point (instruction) evaluations so far: 355006459
--- Timings ---
Current time: 1529615576023 milliseconds
Total Time:         721.0 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       265.2 seconds, 36.8%
Fitness Testing:    355.0 seconds, 49.2%
Report:             100.6 seconds, 14.0%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 200
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

FAILURE
