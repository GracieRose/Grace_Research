Command line args: clojush.problems.software.number-io :parent-selection :tournament :print-timings true
######################################
Parameters set at command line or in problem file argmap; may or may not be default:
alignment-deviation = 5
alternation-rate = 0.01
atom-generators = (#object[clojush.problems.software.number_io$fn__6694 0x2beee3e8 clojush.problems.software.number_io$fn__6694@2beee3e8] #object[clojush.problems.software.number_io$fn__6696 0x58bad46f clojush.problems.software.number_io$fn__6696@58bad46f] #object[clojush.instructions.tag$tag_instruction_erc$fn__1963 0x20231384 clojush.instructions.tag$tag_instruction_erc$fn__1963@20231384] #object[clojush.instructions.tag$tagged_instruction_erc$fn__1969 0x35becbd4 clojush.instructions.tag$tagged_instruction_erc$fn__1969@35becbd4] in1 in2 print_newline integer_sub integer_inc integer_yankdup integer_mult float_sin float_frominteger float_mod integer_div integer_fromfloat integer_mod integer_rot float_yankdup integer_add integer_shove integer_max integer_stackdepth float_max float_dup_items float_stackdepth integer_dup_times integer_yank integer_min integer_dup_items print_integer print_float integer_flush float_shove float_pop float_sub float_min float_mult float_dec float_add float_dup float_swap integer_swap integer_dup float_tan integer_pop float_dup_times float_inc integer_dec float_rot float_flush float_cos float_div float_yank)
epigenetic-markers = []
error-function = #object[clojush.problems.software.number_io$make_number_io_error_function_from_cases$the_actual_num_io_error_function__6704 0x342723a3 clojush.problems.software.number_io$make_number_io_error_function_from_cases$the_actual_num_io_error_function__6704@342723a3]
error-threshold = 1.0E-4
evalpush-limit = 200
final-report-simplifications = 5000
genetic-operator-probabilities = {:alternation 0.3, :uniform-mutation 0.2, [:alternation :uniform-mutation] 0.5}
max-error = 5000
max-generations = 200
max-genome-size-in-initial-program = 100
max-points = 800
parent-selection = :tournament
population-size = 1000
print-timings = true
problem-specific-initial-report = #object[clojush.problems.software.number_io$number_io_initial_report 0x4ec427 clojush.problems.software.number_io$number_io_initial_report@4ec427]
problem-specific-report = #object[clojush.problems.software.number_io$num_io_report 0xfde487b clojush.problems.software.number_io$num_io_report@fde487b]
report-simplifications = 0
uniform-mutation-rate = 0.01
######################################
Train and test cases:
Train Case:   0 | Input/Output: [[-98.07849501100057 44] -54.07849501100057]
Train Case:   1 | Input/Output: [[-5.846527966080146 19] 13.153472033919854]
Train Case:   2 | Input/Output: [[54.204914143942545 -13] 41.204914143942545]
Train Case:   3 | Input/Output: [[7.9512141028803995 -14] -6.0487858971196005]
Train Case:   4 | Input/Output: [[-36.94913700527813 -39] -75.94913700527813]
Train Case:   5 | Input/Output: [[-33.152088652214175 83] 49.847911347785825]
Train Case:   6 | Input/Output: [[46.905289384180094 -90] -43.094710615819906]
Train Case:   7 | Input/Output: [[-3.0354210000243143 -3] -6.035421000024314]
Train Case:   8 | Input/Output: [[-17.649641285903456 -47] -64.64964128590346]
Train Case:   9 | Input/Output: [[-96.44759813171244 88] -8.44759813171244]
Train Case:  10 | Input/Output: [[-85.9056292771024 24] -61.905629277102406]
Train Case:  11 | Input/Output: [[-16.267064021815898 -84] -100.2670640218159]
Train Case:  12 | Input/Output: [[47.57935325381834 -14] 33.57935325381834]
Train Case:  13 | Input/Output: [[-37.56656798120559 -34] -71.5665679812056]
Train Case:  14 | Input/Output: [[-72.27878405720998 -78] -150.27878405720998]
Train Case:  15 | Input/Output: [[-39.47101473576391 6] -33.47101473576391]
Train Case:  16 | Input/Output: [[76.21651136185298 -64] 12.21651136185298]
Train Case:  17 | Input/Output: [[22.398855075240462 -6] 16.398855075240462]
Train Case:  18 | Input/Output: [[-80.48366515495886 -23] -103.48366515495886]
Train Case:  19 | Input/Output: [[-70.11130072384881 54] -16.111300723848814]
Train Case:  20 | Input/Output: [[-24.480917807698276 26] 1.519082192301724]
Train Case:  21 | Input/Output: [[29.222608133978753 27] 56.22260813397875]
Train Case:  22 | Input/Output: [[-72.55677476532614 -28] -100.55677476532614]
Train Case:  23 | Input/Output: [[92.86927806426661 -72] 20.86927806426661]
Train Case:  24 | Input/Output: [[43.76572049557791 94] 137.7657204955779]
Test Case:   0 | Input/Output: [[-14.409046338758941 70] 55.59095366124106]
Test Case:   1 | Input/Output: [[-49.596171021979615 -90] -139.59617102197961]
Test Case:   2 | Input/Output: [[45.068779599006206 -34] 11.068779599006206]
Test Case:   3 | Input/Output: [[-82.80139556522087 44] -38.80139556522087]
Test Case:   4 | Input/Output: [[-61.38932567605222 -59] -120.38932567605222]
Test Case:   5 | Input/Output: [[-6.327705227426208 -17] -23.327705227426208]
Test Case:   6 | Input/Output: [[95.39806097175719 -37] 58.39806097175719]
Test Case:   7 | Input/Output: [[-61.423980038366025 -47] -108.42398003836603]
Test Case:   8 | Input/Output: [[-84.90944972673012 -1] -85.90944972673012]
Test Case:   9 | Input/Output: [[-48.25971061405019 -14] -62.25971061405019]
Test Case:  10 | Input/Output: [[9.19636428069252 95] 104.19636428069252]
Test Case:  11 | Input/Output: [[-24.917765833328858 78] 53.08223416667114]
Test Case:  12 | Input/Output: [[90.81179761069151 -24] 66.81179761069151]
Test Case:  13 | Input/Output: [[-86.9018171314446 -43] -129.9018171314446]
Test Case:  14 | Input/Output: [[68.08190591502643 61] 129.08190591502643]
Test Case:  15 | Input/Output: [[-71.7685685820026 -40] -111.7685685820026]
Test Case:  16 | Input/Output: [[12.059887183261097 -83] -70.9401128167389]
Test Case:  17 | Input/Output: [[25.547783815249332 99] 124.54778381524933]
Test Case:  18 | Input/Output: [[-82.73366800180064 21] -61.73366800180064]
Test Case:  19 | Input/Output: [[53.81522343953037 -44] 9.81522343953037]
Test Case:  20 | Input/Output: [[27.38418696333578 27] 54.38418696333578]
Test Case:  21 | Input/Output: [[-51.73497454620375 -82] -133.73497454620374]
Test Case:  22 | Input/Output: [[83.63059160102182 72] 155.63059160102182]
Test Case:  23 | Input/Output: [[-67.82328334005462 -99] -166.82328334005462]
Test Case:  24 | Input/Output: [[-66.76715436576785 -74] -140.76715436576785]
Test Case:  25 | Input/Output: [[41.83259006037386 -50] -8.16740993962614]
Test Case:  26 | Input/Output: [[32.59999090384679 96] 128.5999909038468]
Test Case:  27 | Input/Output: [[96.40172917330187 -11] 85.40172917330187]
Test Case:  28 | Input/Output: [[-85.26719855421427 14] -71.26719855421427]
Test Case:  29 | Input/Output: [[-43.686730315514176 80] 36.313269684485824]
Test Case:  30 | Input/Output: [[99.07022529190542 -91] 8.070225291905416]
Test Case:  31 | Input/Output: [[-70.80149193777402 33] -37.80149193777402]
Test Case:  32 | Input/Output: [[-8.923017397898874 66] 57.076982602101126]
Test Case:  33 | Input/Output: [[-91.6593518399342 37] -54.6593518399342]
Test Case:  34 | Input/Output: [[-32.63482600953951 10] -22.63482600953951]
Test Case:  35 | Input/Output: [[-39.483852035570436 -70] -109.48385203557044]
Test Case:  36 | Input/Output: [[27.42193955097592 -84] -56.57806044902408]
Test Case:  37 | Input/Output: [[-56.590088529299344 -9] -65.59008852929935]
Test Case:  38 | Input/Output: [[48.59707087868682 -14] 34.59707087868682]
Test Case:  39 | Input/Output: [[86.0436574048843 -38] 48.0436574048843]
Test Case:  40 | Input/Output: [[25.353135681221545 -90] -64.64686431877846]
Test Case:  41 | Input/Output: [[22.08927858200262 -9] 13.08927858200262]
Test Case:  42 | Input/Output: [[19.820739152217087 19] 38.82073915221709]
Test Case:  43 | Input/Output: [[65.70022255879601 39] 104.70022255879601]
Test Case:  44 | Input/Output: [[-69.33140674351479 23] -46.33140674351479]
Test Case:  45 | Input/Output: [[-29.53795716113015 -42] -71.53795716113015]
Test Case:  46 | Input/Output: [[68.60728301892988 -6] 62.60728301892988]
Test Case:  47 | Input/Output: [[55.54667716444823 -65] -9.453322835551774]
Test Case:  48 | Input/Output: [[68.71076933641257 61] 129.71076933641257]
Test Case:  49 | Input/Output: [[-95.6889915786056 1] -94.6889915786056]
Test Case:  50 | Input/Output: [[54.53931344166557 54] 108.53931344166557]
Test Case:  51 | Input/Output: [[31.818987956290044 27] 58.818987956290044]
Test Case:  52 | Input/Output: [[-38.61437534117851 52] 13.385624658821492]
Test Case:  53 | Input/Output: [[-54.59397346546287 28] -26.593973465462867]
Test Case:  54 | Input/Output: [[-36.45664597497908 -55] -91.45664597497908]
Test Case:  55 | Input/Output: [[85.63847447744178 88] 173.63847447744178]
Test Case:  56 | Input/Output: [[26.391530180653973 -74] -47.60846981934603]
Test Case:  57 | Input/Output: [[-89.58986154010513 19] -70.58986154010513]
Test Case:  58 | Input/Output: [[96.32118340853825 50] 146.32118340853825]
Test Case:  59 | Input/Output: [[69.15640974000189 -9] 60.15640974000189]
Test Case:  60 | Input/Output: [[-47.30420289939876 -72] -119.30420289939876]
Test Case:  61 | Input/Output: [[-69.26237774350001 -98] -167.2623777435]
Test Case:  62 | Input/Output: [[13.883285718818655 27] 40.883285718818655]
Test Case:  63 | Input/Output: [[-46.52228469807529 -26] -72.52228469807528]
Test Case:  64 | Input/Output: [[-88.69515732731487 -70] -158.69515732731486]
Test Case:  65 | Input/Output: [[83.03943864429516 56] 139.03943864429516]
Test Case:  66 | Input/Output: [[23.24214680179861 -1] 22.24214680179861]
Test Case:  67 | Input/Output: [[-76.43095379772227 63] -13.430953797722267]
Test Case:  68 | Input/Output: [[-1.2020091667316137 82] 80.79799083326839]
Test Case:  69 | Input/Output: [[-35.532349115787994 75] 39.467650884212006]
Test Case:  70 | Input/Output: [[-25.2107904716852 82] 56.7892095283148]
Test Case:  71 | Input/Output: [[75.73464324914207 57] 132.73464324914207]
Test Case:  72 | Input/Output: [[-29.62646575072634 91] 61.37353424927366]
Test Case:  73 | Input/Output: [[-33.485533343096236 69] 35.514466656903764]
Test Case:  74 | Input/Output: [[-81.27695427805611 -51] -132.2769542780561]
Test Case:  75 | Input/Output: [[45.96237599827171 50] 95.96237599827171]
Test Case:  76 | Input/Output: [[14.701413434900815 21] 35.701413434900815]
Test Case:  77 | Input/Output: [[60.353897965289775 -16] 44.353897965289775]
Test Case:  78 | Input/Output: [[3.000893301427652 26] 29.000893301427652]
Test Case:  79 | Input/Output: [[69.97176992518709 -99] -29.02823007481291]
Test Case:  80 | Input/Output: [[82.86696304750996 -57] 25.866963047509955]
Test Case:  81 | Input/Output: [[59.959919371420966 -42] 17.959919371420966]
Test Case:  82 | Input/Output: [[-74.39642184162658 -68] -142.3964218416266]
Test Case:  83 | Input/Output: [[-97.04930929923749 72] -25.049309299237493]
Test Case:  84 | Input/Output: [[12.250178063980016 12] 24.250178063980016]
Test Case:  85 | Input/Output: [[4.5914891156925535 -80] -75.40851088430745]
Test Case:  86 | Input/Output: [[-30.28172965460398 -14] -44.28172965460398]
Test Case:  87 | Input/Output: [[-47.54014956493897 -9] -56.54014956493897]
Test Case:  88 | Input/Output: [[10.590683569792759 83] 93.59068356979276]
Test Case:  89 | Input/Output: [[-10.300441399652755 -44] -54.300441399652755]
Test Case:  90 | Input/Output: [[66.45730162978873 72] 138.45730162978873]
Test Case:  91 | Input/Output: [[-14.247307792552078 19] 4.752692207447922]
Test Case:  92 | Input/Output: [[97.22630158107921 65] 162.2263015810792]
Test Case:  93 | Input/Output: [[-75.22768246301257 -5] -80.22768246301257]
Test Case:  94 | Input/Output: [[64.72288880969734 -27] 37.72288880969734]
Test Case:  95 | Input/Output: [[77.0413149090266 76] 153.0413149090266]
Test Case:  96 | Input/Output: [[-52.22168242822494 28] -24.221682428224938]
Test Case:  97 | Input/Output: [[-78.11533721615184 61] -17.115337216151843]
Test Case:  98 | Input/Output: [[22.984648636252942 79] 101.98464863625294]
Test Case:  99 | Input/Output: [[87.9345683038731 -75] 12.934568303873107]
Test Case: 100 | Input/Output: [[-43.98637505943568 57] 13.01362494056432]
Test Case: 101 | Input/Output: [[61.05087789770499 -50] 11.050877897704993]
Test Case: 102 | Input/Output: [[21.93867469034423 -70] -48.06132530965577]
Test Case: 103 | Input/Output: [[-67.39782396383094 -95] -162.39782396383094]
Test Case: 104 | Input/Output: [[-31.700080122629927 -99] -130.7000801226299]
Test Case: 105 | Input/Output: [[-48.87278105718173 77] 28.127218942818267]
Test Case: 106 | Input/Output: [[92.19259132947624 82] 174.19259132947624]
Test Case: 107 | Input/Output: [[88.71897005233714 74] 162.71897005233714]
Test Case: 108 | Input/Output: [[-91.74488970413961 51] -40.74488970413961]
Test Case: 109 | Input/Output: [[-99.95923506563895 61] -38.95923506563895]
Test Case: 110 | Input/Output: [[-92.4633417534501 48] -44.463341753450095]
Test Case: 111 | Input/Output: [[22.03063461933901 -45] -22.96936538066099]
Test Case: 112 | Input/Output: [[18.04194384435054 -30] -11.958056155649459]
Test Case: 113 | Input/Output: [[-28.749315397408665 -69] -97.74931539740867]
Test Case: 114 | Input/Output: [[91.47492331931647 71] 162.47492331931647]
Test Case: 115 | Input/Output: [[-47.45816503577629 52] 4.54183496422371]
Test Case: 116 | Input/Output: [[-98.07679133753437 -51] -149.07679133753436]
Test Case: 117 | Input/Output: [[-43.44966079111454 -24] -67.44966079111454]
Test Case: 118 | Input/Output: [[-5.432760697287151 -6] -11.43276069728715]
Test Case: 119 | Input/Output: [[26.66508601571455 100] 126.66508601571455]
Test Case: 120 | Input/Output: [[54.88249268748305 -70] -15.117507312516949]
Test Case: 121 | Input/Output: [[96.22326813502934 2] 98.22326813502934]
Test Case: 122 | Input/Output: [[44.802098185970436 -2] 42.802098185970436]
Test Case: 123 | Input/Output: [[-61.86863642204765 35] -26.86863642204765]
Test Case: 124 | Input/Output: [[-76.32875007305553 -30] -106.32875007305553]
Test Case: 125 | Input/Output: [[53.30793897707096 96] 149.30793897707096]
Test Case: 126 | Input/Output: [[62.58127429243956 28] 90.58127429243956]
Test Case: 127 | Input/Output: [[-97.60024369909048 4] -93.60024369909048]
Test Case: 128 | Input/Output: [[-97.56494183331692 -8] -105.56494183331692]
Test Case: 129 | Input/Output: [[-89.25334296195102 67] -22.25334296195102]
Test Case: 130 | Input/Output: [[74.28843666389295 -9] 65.28843666389295]
Test Case: 131 | Input/Output: [[92.07831516789221 -40] 52.078315167892214]
Test Case: 132 | Input/Output: [[-51.833324856227804 -15] -66.8333248562278]
Test Case: 133 | Input/Output: [[-2.5306663378770793 -86] -88.53066633787708]
Test Case: 134 | Input/Output: [[-78.04193131876349 -25] -103.04193131876349]
Test Case: 135 | Input/Output: [[20.93360981369392 6] 26.93360981369392]
Test Case: 136 | Input/Output: [[20.28879915817315 24] 44.28879915817315]
Test Case: 137 | Input/Output: [[89.6154893015912 53] 142.6154893015912]
Test Case: 138 | Input/Output: [[-24.78777501125367 -55] -79.78777501125367]
Test Case: 139 | Input/Output: [[82.00329230981859 -6] 76.00329230981859]
Test Case: 140 | Input/Output: [[5.463179889776669 2] 7.463179889776669]
Test Case: 141 | Input/Output: [[49.709135386252285 25] 74.70913538625229]
Test Case: 142 | Input/Output: [[46.48661619207647 -1] 45.48661619207647]
Test Case: 143 | Input/Output: [[-51.26523676993633 75] 23.73476323006367]
Test Case: 144 | Input/Output: [[-38.19529876516028 -94] -132.1952987651603]
Test Case: 145 | Input/Output: [[1.5685896743676153 -7] -5.431410325632385]
Test Case: 146 | Input/Output: [[96.03305474563945 -25] 71.03305474563945]
Test Case: 147 | Input/Output: [[95.61340840629555 -8] 87.61340840629555]
Test Case: 148 | Input/Output: [[-74.94785516953544 78] 3.052144830464556]
Test Case: 149 | Input/Output: [[53.508106010225106 73] 126.5081060102251]
Test Case: 150 | Input/Output: [[-61.46412207264609 82] 20.53587792735391]
Test Case: 151 | Input/Output: [[-45.93170836890115 46] 0.06829163109885172]
Test Case: 152 | Input/Output: [[70.0483154491219 -47] 23.0483154491219]
Test Case: 153 | Input/Output: [[-89.82302855306376 37] -52.823028553063764]
Test Case: 154 | Input/Output: [[1.203633051887394 95] 96.2036330518874]
Test Case: 155 | Input/Output: [[-15.622017242917138 -95] -110.62201724291714]
Test Case: 156 | Input/Output: [[-88.54746321010656 85] -3.5474632101065566]
Test Case: 157 | Input/Output: [[74.96836614319162 -10] 64.96836614319162]
Test Case: 158 | Input/Output: [[-18.063222245429728 -31] -49.06322224542973]
Test Case: 159 | Input/Output: [[96.13814876185495 36] 132.13814876185495]
Test Case: 160 | Input/Output: [[-6.042291154382951 58] 51.95770884561705]
Test Case: 161 | Input/Output: [[37.177463645788265 -92] -54.822536354211735]
Test Case: 162 | Input/Output: [[52.05888993345894 70] 122.05888993345894]
Test Case: 163 | Input/Output: [[-9.116869280040163 -72] -81.11686928004016]
Test Case: 164 | Input/Output: [[22.277044037061614 93] 115.27704403706161]
Test Case: 165 | Input/Output: [[28.288264858171004 -30] -1.7117351418289957]
Test Case: 166 | Input/Output: [[59.55658655811658 16] 75.55658655811658]
Test Case: 167 | Input/Output: [[72.89417230250018 85] 157.89417230250018]
Test Case: 168 | Input/Output: [[24.97976995858042 -43] -18.02023004141958]
Test Case: 169 | Input/Output: [[-25.93275627579763 -94] -119.93275627579763]
Test Case: 170 | Input/Output: [[2.656013537483787 96] 98.65601353748379]
Test Case: 171 | Input/Output: [[-81.77881145703176 -23] -104.77881145703176]
Test Case: 172 | Input/Output: [[-83.1686076768436 13] -70.1686076768436]
Test Case: 173 | Input/Output: [[3.198327990159086 63] 66.19832799015909]
Test Case: 174 | Input/Output: [[-37.25538840568503 32] -5.255388405685032]
Test Case: 175 | Input/Output: [[76.57817562808924 38] 114.57817562808924]
Test Case: 176 | Input/Output: [[-8.133024667535182 82] 73.86697533246482]
Test Case: 177 | Input/Output: [[-54.108464541580844 50] -4.108464541580844]
Test Case: 178 | Input/Output: [[-31.477828758863097 1] -30.477828758863097]
Test Case: 179 | Input/Output: [[63.94856641718934 45] 108.94856641718934]
Test Case: 180 | Input/Output: [[47.13181645287844 -16] 31.13181645287844]
Test Case: 181 | Input/Output: [[-50.68962745284795 -81] -131.68962745284796]
Test Case: 182 | Input/Output: [[85.22314255669409 51] 136.22314255669409]
Test Case: 183 | Input/Output: [[99.358473945947 -16] 83.358473945947]
Test Case: 184 | Input/Output: [[-75.78253789625273 2] -73.78253789625273]
Test Case: 185 | Input/Output: [[-91.21258040436426 -65] -156.21258040436425]
Test Case: 186 | Input/Output: [[-80.55235632769669 -4] -84.55235632769669]
Test Case: 187 | Input/Output: [[82.03726711338996 86] 168.03726711338996]
Test Case: 188 | Input/Output: [[-38.98642020456873 91] 52.01357979543127]
Test Case: 189 | Input/Output: [[47.04871253511135 -17] 30.04871253511135]
Test Case: 190 | Input/Output: [[-80.96549141579892 89] 8.034508584201077]
Test Case: 191 | Input/Output: [[-72.24015029119448 86] 13.759849708805518]
Test Case: 192 | Input/Output: [[-84.07329433662052 40] -44.07329433662052]
Test Case: 193 | Input/Output: [[-58.10626548500639 -24] -82.10626548500639]
Test Case: 194 | Input/Output: [[75.20641528386 92] 167.20641528386]
Test Case: 195 | Input/Output: [[-56.54149136745153 -77] -133.54149136745153]
Test Case: 196 | Input/Output: [[53.69577080051272 -4] 49.69577080051272]
Test Case: 197 | Input/Output: [[-4.093994974248034 -98] -102.09399497424803]
Test Case: 198 | Input/Output: [[-9.991958218768417 -57] -66.99195821876842]
Test Case: 199 | Input/Output: [[53.94507116716389 -60] -6.0549288328361115]
Test Case: 200 | Input/Output: [[-18.722271436813443 -64] -82.72227143681344]
Test Case: 201 | Input/Output: [[-19.751120997843103 80] 60.2488790021569]
Test Case: 202 | Input/Output: [[17.63894153601113 82] 99.63894153601113]
Test Case: 203 | Input/Output: [[37.90275410665467 76] 113.90275410665467]
Test Case: 204 | Input/Output: [[60.18980688629972 84] 144.18980688629972]
Test Case: 205 | Input/Output: [[-91.40347483149576 -5] -96.40347483149576]
Test Case: 206 | Input/Output: [[86.16772173542958 -68] 18.16772173542958]
Test Case: 207 | Input/Output: [[-89.58563882730859 13] -76.58563882730859]
Test Case: 208 | Input/Output: [[-30.92204431254386 -11] -41.92204431254386]
Test Case: 209 | Input/Output: [[93.27043198645669 -33] 60.270431986456686]
Test Case: 210 | Input/Output: [[37.85439542223591 93] 130.8543954222359]
Test Case: 211 | Input/Output: [[88.78930785185673 73] 161.78930785185673]
Test Case: 212 | Input/Output: [[98.0143622124348 10] 108.0143622124348]
Test Case: 213 | Input/Output: [[68.2455472569238 -22] 46.2455472569238]
Test Case: 214 | Input/Output: [[70.96506008944147 10] 80.96506008944147]
Test Case: 215 | Input/Output: [[-30.327570680486772 -69] -99.32757068048677]
Test Case: 216 | Input/Output: [[-10.472790792643451 -84] -94.47279079264345]
Test Case: 217 | Input/Output: [[51.093715977986705 -19] 32.093715977986705]
Test Case: 218 | Input/Output: [[-26.045290606537066 -100] -126.04529060653707]
Test Case: 219 | Input/Output: [[-51.57497406185614 89] 37.42502593814386]
Test Case: 220 | Input/Output: [[-86.37865580808759 -59] -145.3786558080876]
Test Case: 221 | Input/Output: [[80.39284333750348 14] 94.39284333750348]
Test Case: 222 | Input/Output: [[91.41701376980629 57] 148.4170137698063]
Test Case: 223 | Input/Output: [[66.30947303841359 97] 163.30947303841359]
Test Case: 224 | Input/Output: [[28.667462253887265 70] 98.66746225388727]
Test Case: 225 | Input/Output: [[78.13445415483201 55] 133.134454154832]
Test Case: 226 | Input/Output: [[-21.356187623351403 37] 15.643812376648597]
Test Case: 227 | Input/Output: [[-61.47519600913949 92] 30.524803990860512]
Test Case: 228 | Input/Output: [[-39.31405025094668 63] 23.68594974905332]
Test Case: 229 | Input/Output: [[-86.03826626278833 -47] -133.03826626278834]
Test Case: 230 | Input/Output: [[-51.69732944544177 62] 10.302670554558233]
Test Case: 231 | Input/Output: [[-4.300988682126118 41] 36.69901131787388]
Test Case: 232 | Input/Output: [[44.982796438179605 85] 129.9827964381796]
Test Case: 233 | Input/Output: [[-51.5156917780619 -28] -79.51569177806189]
Test Case: 234 | Input/Output: [[69.87822279369024 -18] 51.87822279369024]
Test Case: 235 | Input/Output: [[-63.00933626457243 -10] -73.00933626457243]
Test Case: 236 | Input/Output: [[30.414605465843294 83] 113.4146054658433]
Test Case: 237 | Input/Output: [[7.392201631647822 -64] -56.60779836835218]
Test Case: 238 | Input/Output: [[-97.5116253035442 58] -39.51162530354421]
Test Case: 239 | Input/Output: [[94.37452876075153 -90] 4.374528760751531]
Test Case: 240 | Input/Output: [[21.750284150617034 13] 34.750284150617034]
Test Case: 241 | Input/Output: [[82.97576418520305 33] 115.97576418520305]
Test Case: 242 | Input/Output: [[-29.18785620302063 -75] -104.18785620302063]
Test Case: 243 | Input/Output: [[-99.89506809653452 69] -30.895068096534516]
Test Case: 244 | Input/Output: [[-5.2761425279165906 75] 69.72385747208341]
Test Case: 245 | Input/Output: [[78.47668202016467 -33] 45.476682020164674]
Test Case: 246 | Input/Output: [[-35.97456778905696 -97] -132.97456778905695]
Test Case: 247 | Input/Output: [[-57.44659372931302 79] 21.553406270686978]
Test Case: 248 | Input/Output: [[2.2553552404633592 61] 63.25535524046336]
Test Case: 249 | Input/Output: [[-29.869164638304667 -76] -105.86916463830467]
Test Case: 250 | Input/Output: [[-35.154967648782716 42] 6.845032351217284]
Test Case: 251 | Input/Output: [[82.71269171116788 7] 89.71269171116788]
Test Case: 252 | Input/Output: [[94.73691012552626 98] 192.73691012552626]
Test Case: 253 | Input/Output: [[-20.347958443057877 9] -11.347958443057877]
Test Case: 254 | Input/Output: [[-15.024069209410158 38] 22.975930790589842]
Test Case: 255 | Input/Output: [[-61.7605714662957 34] -27.7605714662957]
Test Case: 256 | Input/Output: [[9.64371536537682 -11] -1.3562846346231794]
Test Case: 257 | Input/Output: [[-94.09267450998323 7] -87.09267450998323]
Test Case: 258 | Input/Output: [[-39.71368716862016 68] 28.28631283137984]
Test Case: 259 | Input/Output: [[11.940870759566181 -82] -70.05912924043382]
Test Case: 260 | Input/Output: [[-6.477077239227526 12] 5.522922760772474]
Test Case: 261 | Input/Output: [[-67.04566712407532 -44] -111.04566712407532]
Test Case: 262 | Input/Output: [[31.644992101266553 57] 88.64499210126655]
Test Case: 263 | Input/Output: [[-66.0524196262193 20] -46.052419626219304]
Test Case: 264 | Input/Output: [[42.91122396384594 60] 102.91122396384594]
Test Case: 265 | Input/Output: [[78.61431982394947 78] 156.61431982394947]
Test Case: 266 | Input/Output: [[51.64605609921492 -99] -47.35394390078508]
Test Case: 267 | Input/Output: [[-88.97295987761132 -51] -139.97295987761132]
Test Case: 268 | Input/Output: [[-70.70207380270776 -4] -74.70207380270776]
Test Case: 269 | Input/Output: [[48.07398278390744 -40] 8.07398278390744]
Test Case: 270 | Input/Output: [[38.86252768502186 -19] 19.86252768502186]
Test Case: 271 | Input/Output: [[-52.24487898666028 90] 37.75512101333972]
Test Case: 272 | Input/Output: [[-92.26626948453487 -98] -190.26626948453486]
Test Case: 273 | Input/Output: [[-12.469209033115433 92] 79.53079096688457]
Test Case: 274 | Input/Output: [[57.66471269825357 -97] -39.33528730174643]
Test Case: 275 | Input/Output: [[-45.15467955899752 65] 19.845320441002478]
Test Case: 276 | Input/Output: [[58.774902187179066 -15] 43.774902187179066]
Test Case: 277 | Input/Output: [[30.495317850333635 49] 79.49531785033363]
Test Case: 278 | Input/Output: [[65.16292425347626 65] 130.16292425347626]
Test Case: 279 | Input/Output: [[-31.159382464835247 -18] -49.15938246483525]
Test Case: 280 | Input/Output: [[-14.463955020400647 -68] -82.46395502040065]
Test Case: 281 | Input/Output: [[78.27421615766332 45] 123.27421615766332]
Test Case: 282 | Input/Output: [[-74.48850089587395 48] -26.488500895873955]
Test Case: 283 | Input/Output: [[13.456051603638983 -92] -78.54394839636102]
Test Case: 284 | Input/Output: [[40.644629273299074 -80] -39.355370726700926]
Test Case: 285 | Input/Output: [[71.64386108159087 99] 170.64386108159087]
Test Case: 286 | Input/Output: [[-99.15847127893433 89] -10.158471278934329]
Test Case: 287 | Input/Output: [[-22.770379203008062 26] 3.229620796991938]
Test Case: 288 | Input/Output: [[9.392119116648416 -8] 1.3921191166484164]
Test Case: 289 | Input/Output: [[98.66924922275587 21] 119.66924922275587]
Test Case: 290 | Input/Output: [[-39.614034163987945 -14] -53.614034163987945]
Test Case: 291 | Input/Output: [[-12.994298491734682 78] 65.00570150826532]
Test Case: 292 | Input/Output: [[98.53404347721636 25] 123.53404347721636]
Test Case: 293 | Input/Output: [[-47.215851836431085 -68] -115.21585183643109]
Test Case: 294 | Input/Output: [[32.45499329776277 10] 42.45499329776277]
Test Case: 295 | Input/Output: [[5.167348496366017 -75] -69.83265150363398]
Test Case: 296 | Input/Output: [[-98.1035426312069 -74] -172.1035426312069]
Test Case: 297 | Input/Output: [[-88.62702190905547 1] -87.62702190905547]
Test Case: 298 | Input/Output: [[15.5939715845292 -83] -67.4060284154708]
Test Case: 299 | Input/Output: [[49.90792789321702 55] 104.90792789321702]
Test Case: 300 | Input/Output: [[-98.08786080367852 -99] -197.08786080367852]
Test Case: 301 | Input/Output: [[-76.036589069591 -50] -126.036589069591]
Test Case: 302 | Input/Output: [[-57.69866852823704 30] -27.698668528237043]
Test Case: 303 | Input/Output: [[-20.945301805915605 46] 25.054698194084395]
Test Case: 304 | Input/Output: [[90.45896676995338 90] 180.45896676995338]
Test Case: 305 | Input/Output: [[2.3817480717358137 40] 42.381748071735814]
Test Case: 306 | Input/Output: [[43.79282870200302 -93] -49.20717129799698]
Test Case: 307 | Input/Output: [[-10.189785741704497 -55] -65.1897857417045]
Test Case: 308 | Input/Output: [[-37.0392443806892 -72] -109.0392443806892]
Test Case: 309 | Input/Output: [[-42.19072864604281 56] 13.809271353957193]
Test Case: 310 | Input/Output: [[97.98810116499115 72] 169.98810116499115]
Test Case: 311 | Input/Output: [[36.08861116704617 54] 90.08861116704617]
Test Case: 312 | Input/Output: [[-74.12148497053552 36] -38.12148497053552]
Test Case: 313 | Input/Output: [[-85.36829609940386 -92] -177.36829609940386]
Test Case: 314 | Input/Output: [[-54.57692421263669 86] 31.42307578736331]
Test Case: 315 | Input/Output: [[8.689567778320978 -48] -39.31043222167902]
Test Case: 316 | Input/Output: [[-77.92822258611642 -43] -120.92822258611642]
Test Case: 317 | Input/Output: [[73.43610396990616 28] 101.43610396990616]
Test Case: 318 | Input/Output: [[99.19030123945836 93] 192.19030123945836]
Test Case: 319 | Input/Output: [[-38.75374930588657 55] 16.246250694113428]
Test Case: 320 | Input/Output: [[69.20851636481868 87] 156.20851636481868]
Test Case: 321 | Input/Output: [[-81.45691956355037 50] -31.456919563550372]
Test Case: 322 | Input/Output: [[-9.662571281796133 24] 14.337428718203867]
Test Case: 323 | Input/Output: [[-6.651996506257873 15] 8.348003493742127]
Test Case: 324 | Input/Output: [[-56.089145019888974 43] -13.089145019888974]
Test Case: 325 | Input/Output: [[79.2153035907688 -20] 59.2153035907688]
Test Case: 326 | Input/Output: [[19.39216233876371 39] 58.39216233876371]
Test Case: 327 | Input/Output: [[-37.5514711235853 -83] -120.5514711235853]
Test Case: 328 | Input/Output: [[-17.52195225608463 98] 80.47804774391537]
Test Case: 329 | Input/Output: [[-66.80327187758814 14] -52.803271877588145]
Test Case: 330 | Input/Output: [[85.38834018039299 -34] 51.38834018039299]
Test Case: 331 | Input/Output: [[-50.97534498296752 26] -24.97534498296752]
Test Case: 332 | Input/Output: [[57.979816512304836 95] 152.97981651230484]
Test Case: 333 | Input/Output: [[-11.368036583412547 -83] -94.36803658341255]
Test Case: 334 | Input/Output: [[-7.770439399956786 38] 30.229560600043214]
Test Case: 335 | Input/Output: [[1.044039543143299 -12] -10.955960456856701]
Test Case: 336 | Input/Output: [[-74.2063471108046 -89] -163.2063471108046]
Test Case: 337 | Input/Output: [[96.40818001939115 -4] 92.40818001939115]
Test Case: 338 | Input/Output: [[-1.6196135274094843 42] 40.380386472590516]
Test Case: 339 | Input/Output: [[-70.1818359440219 -7] -77.1818359440219]
Test Case: 340 | Input/Output: [[59.78410170744996 91] 150.78410170744996]
Test Case: 341 | Input/Output: [[-46.19603878254806 -87] -133.19603878254804]
Test Case: 342 | Input/Output: [[9.644303085300265 79] 88.64430308530027]
Test Case: 343 | Input/Output: [[86.27711372442849 -58] 28.27711372442849]
Test Case: 344 | Input/Output: [[-86.41585107238578 60] -26.415851072385777]
Test Case: 345 | Input/Output: [[48.96372070620191 0] 48.96372070620191]
Test Case: 346 | Input/Output: [[-12.277518628067256 56] 43.722481371932744]
Test Case: 347 | Input/Output: [[97.00118366811546 -50] 47.00118366811546]
Test Case: 348 | Input/Output: [[-36.84255398896208 80] 43.15744601103792]
Test Case: 349 | Input/Output: [[15.822923336524312 95] 110.82292333652431]
Test Case: 350 | Input/Output: [[-61.09621476678895 53] -8.096214766788947]
Test Case: 351 | Input/Output: [[-11.36912694212289 -82] -93.36912694212289]
Test Case: 352 | Input/Output: [[96.16657480859314 -50] 46.16657480859314]
Test Case: 353 | Input/Output: [[-46.384947288304154 58] 11.615052711695846]
Test Case: 354 | Input/Output: [[-17.684211652427834 -41] -58.684211652427834]
Test Case: 355 | Input/Output: [[-17.372311099354135 35] 17.627688900645865]
Test Case: 356 | Input/Output: [[-61.36526385598995 -28] -89.36526385598995]
Test Case: 357 | Input/Output: [[-97.16823671957478 46] -51.16823671957478]
Test Case: 358 | Input/Output: [[49.816474367000694 -73] -23.183525632999306]
Test Case: 359 | Input/Output: [[-9.25493768896392 63] 53.74506231103608]
Test Case: 360 | Input/Output: [[61.263416781322434 36] 97.26341678132243]
Test Case: 361 | Input/Output: [[72.1654968637423 -71] 1.1654968637423053]
Test Case: 362 | Input/Output: [[-43.065164456173655 53] 9.934835543826345]
Test Case: 363 | Input/Output: [[24.186393465410887 -78] -53.81360653458911]
Test Case: 364 | Input/Output: [[89.6778035566532 32] 121.6778035566532]
Test Case: 365 | Input/Output: [[55.04602648517675 -89] -33.95397351482325]
Test Case: 366 | Input/Output: [[85.15250925456411 28] 113.15250925456411]
Test Case: 367 | Input/Output: [[38.180759043680865 -31] 7.180759043680865]
Test Case: 368 | Input/Output: [[36.80442072101545 14] 50.80442072101545]
Test Case: 369 | Input/Output: [[53.206004511706396 -19] 34.206004511706396]
Test Case: 370 | Input/Output: [[81.92038211014938 -22] 59.920382110149376]
Test Case: 371 | Input/Output: [[70.38811487379502 90] 160.38811487379502]
Test Case: 372 | Input/Output: [[76.78235354703924 6] 82.78235354703924]
Test Case: 373 | Input/Output: [[-50.42202735552181 -22] -72.4220273555218]
Test Case: 374 | Input/Output: [[-44.47493195597318 45] 0.525068044026817]
Test Case: 375 | Input/Output: [[-72.13257898111851 -15] -87.13257898111851]
Test Case: 376 | Input/Output: [[-54.16521936521113 -88] -142.16521936521113]
Test Case: 377 | Input/Output: [[50.2635476660613 54] 104.2635476660613]
Test Case: 378 | Input/Output: [[87.4477172676921 19] 106.4477172676921]
Test Case: 379 | Input/Output: [[-29.13183932555623 62] 32.86816067444377]
Test Case: 380 | Input/Output: [[-86.96238487557679 36] -50.96238487557679]
Test Case: 381 | Input/Output: [[-84.55099677872305 19] -65.55099677872305]
Test Case: 382 | Input/Output: [[45.70999901875666 19] 64.70999901875666]
Test Case: 383 | Input/Output: [[53.238031816983465 -73] -19.761968183016535]
Test Case: 384 | Input/Output: [[-47.10139232192849 91] 43.89860767807151]
Test Case: 385 | Input/Output: [[81.9241602840807 40] 121.9241602840807]
Test Case: 386 | Input/Output: [[-85.6248462661443 30] -55.6248462661443]
Test Case: 387 | Input/Output: [[13.24433923273088 81] 94.24433923273088]
Test Case: 388 | Input/Output: [[58.79256415866868 71] 129.79256415866868]
Test Case: 389 | Input/Output: [[14.881016037291218 1] 15.881016037291218]
Test Case: 390 | Input/Output: [[-3.688653715748785 -69] -72.68865371574879]
Test Case: 391 | Input/Output: [[5.578173486676377 61] 66.57817348667638]
Test Case: 392 | Input/Output: [[-55.699053541750374 21] -34.699053541750374]
Test Case: 393 | Input/Output: [[82.83128230428471 83] 165.8312823042847]
Test Case: 394 | Input/Output: [[-74.74701049741135 49] -25.747010497411353]
Test Case: 395 | Input/Output: [[-56.45889136979583 84] 27.54110863020417]
Test Case: 396 | Input/Output: [[-4.8152350201366545 45] 40.184764979863346]
Test Case: 397 | Input/Output: [[-64.70501344857635 -15] -79.70501344857635]
Test Case: 398 | Input/Output: [[-53.10195804975435 -96] -149.10195804975436]
Test Case: 399 | Input/Output: [[-36.227453982528445 20] -16.227453982528445]
Test Case: 400 | Input/Output: [[38.26384530383859 57] 95.2638453038386]
Test Case: 401 | Input/Output: [[64.24277297003104 -47] 17.24277297003104]
Test Case: 402 | Input/Output: [[2.0522041404481826 -12] -9.947795859551817]
Test Case: 403 | Input/Output: [[-33.904226343936486 31] -2.904226343936486]
Test Case: 404 | Input/Output: [[0.4784711321611894 66] 66.47847113216119]
Test Case: 405 | Input/Output: [[66.67658740818243 57] 123.67658740818243]
Test Case: 406 | Input/Output: [[-1.6028092458468421 -87] -88.60280924584684]
Test Case: 407 | Input/Output: [[12.63333111846994 64] 76.63333111846994]
Test Case: 408 | Input/Output: [[13.278322388716717 88] 101.27832238871672]
Test Case: 409 | Input/Output: [[55.34323003744964 -87] -31.656769962550356]
Test Case: 410 | Input/Output: [[81.900972482513 -36] 45.900972482513]
Test Case: 411 | Input/Output: [[-9.640562271831115 71] 61.359437728168885]
Test Case: 412 | Input/Output: [[-11.264507566543983 -71] -82.26450756654398]
Test Case: 413 | Input/Output: [[-88.13679726188879 60] -28.136797261888788]
Test Case: 414 | Input/Output: [[-6.177606158929734 42] 35.822393841070266]
Test Case: 415 | Input/Output: [[-7.5219104265589465 -5] -12.521910426558946]
Test Case: 416 | Input/Output: [[78.55500351806518 70] 148.55500351806518]
Test Case: 417 | Input/Output: [[69.33159617741961 81] 150.3315961774196]
Test Case: 418 | Input/Output: [[-25.762825836346252 -32] -57.76282583634625]
Test Case: 419 | Input/Output: [[24.83320106051852 -91] -66.16679893948148]
Test Case: 420 | Input/Output: [[70.94733766550132 -67] 3.9473376655013226]
Test Case: 421 | Input/Output: [[4.658355023195384 -36] -31.341644976804616]
Test Case: 422 | Input/Output: [[-44.638616886713 -48] -92.63861688671301]
Test Case: 423 | Input/Output: [[-33.253032092969576 -50] -83.25303209296958]
Test Case: 424 | Input/Output: [[-93.63889010622472 -77] -170.63889010622472]
Test Case: 425 | Input/Output: [[83.85408622949075 82] 165.85408622949075]
Test Case: 426 | Input/Output: [[-63.84926615178905 -84] -147.84926615178904]
Test Case: 427 | Input/Output: [[10.891018139814463 -47] -36.10898186018554]
Test Case: 428 | Input/Output: [[30.388565164402195 -55] -24.611434835597805]
Test Case: 429 | Input/Output: [[35.68720257298662 37] 72.68720257298662]
Test Case: 430 | Input/Output: [[-65.84301057278151 -70] -135.8430105727815]
Test Case: 431 | Input/Output: [[1.281103786975791 26] 27.28110378697579]
Test Case: 432 | Input/Output: [[67.32180544779894 31] 98.32180544779894]
Test Case: 433 | Input/Output: [[-91.5666744363669 70] -21.566674436366895]
Test Case: 434 | Input/Output: [[-27.62342197232384 -49] -76.62342197232384]
Test Case: 435 | Input/Output: [[-73.0407187503065 -13] -86.0407187503065]
Test Case: 436 | Input/Output: [[-82.38034062803305 -16] -98.38034062803305]
Test Case: 437 | Input/Output: [[51.03245090829293 8] 59.03245090829293]
Test Case: 438 | Input/Output: [[-32.52109977568007 -49] -81.52109977568007]
Test Case: 439 | Input/Output: [[66.94927960169656 69] 135.94927960169656]
Test Case: 440 | Input/Output: [[54.914335526086546 -70] -15.085664473913454]
Test Case: 441 | Input/Output: [[19.504100848281027 -58] -38.49589915171897]
Test Case: 442 | Input/Output: [[91.75607615628331 72] 163.7560761562833]
Test Case: 443 | Input/Output: [[-59.797376150656255 60] 0.20262384934374467]
Test Case: 444 | Input/Output: [[-63.828924885692985 44] -19.828924885692985]
Test Case: 445 | Input/Output: [[-45.209649567208075 -11] -56.209649567208075]
Test Case: 446 | Input/Output: [[78.49423105104557 55] 133.49423105104557]
Test Case: 447 | Input/Output: [[96.61631722353766 -16] 80.61631722353766]
Test Case: 448 | Input/Output: [[43.38941846658645 -11] 32.38941846658645]
Test Case: 449 | Input/Output: [[-61.720112301245365 23] -38.720112301245365]
Test Case: 450 | Input/Output: [[45.943234820746824 39] 84.94323482074682]
Test Case: 451 | Input/Output: [[31.18056214328925 -6] 25.18056214328925]
Test Case: 452 | Input/Output: [[-51.138899765917145 -2] -53.138899765917145]
Test Case: 453 | Input/Output: [[64.15465815470128 60] 124.15465815470128]
Test Case: 454 | Input/Output: [[-15.920903131393487 64] 48.07909686860651]
Test Case: 455 | Input/Output: [[45.63503016296954 8] 53.63503016296954]
Test Case: 456 | Input/Output: [[63.41128038379421 25] 88.4112803837942]
Test Case: 457 | Input/Output: [[95.53560613320172 26] 121.53560613320172]
Test Case: 458 | Input/Output: [[61.46988054776611 46] 107.46988054776611]
Test Case: 459 | Input/Output: [[-37.712514922859896 39] 1.2874850771401043]
Test Case: 460 | Input/Output: [[-51.347024334104475 91] 39.652975665895525]
Test Case: 461 | Input/Output: [[-40.399264796813284 -95] -135.39926479681327]
Test Case: 462 | Input/Output: [[70.71581816511815 -81] -10.28418183488185]
Test Case: 463 | Input/Output: [[-77.75898161960104 84] 6.241018380398955]
Test Case: 464 | Input/Output: [[-29.20986303304325 -10] -39.20986303304325]
Test Case: 465 | Input/Output: [[-22.595205389133355 55] 32.404794610866645]
Test Case: 466 | Input/Output: [[66.24201174041465 63] 129.24201174041465]
Test Case: 467 | Input/Output: [[-97.00891072338626 -66] -163.00891072338626]
Test Case: 468 | Input/Output: [[41.53629926335245 -47] -5.463700736647553]
Test Case: 469 | Input/Output: [[-2.8637782182655513 34] 31.13622178173445]
Test Case: 470 | Input/Output: [[73.84555389252924 55] 128.84555389252924]
Test Case: 471 | Input/Output: [[44.65436294864449 -49] -4.34563705135551]
Test Case: 472 | Input/Output: [[-83.26469558712999 27] -56.26469558712999]
Test Case: 473 | Input/Output: [[-71.70705351708466 -67] -138.70705351708466]
Test Case: 474 | Input/Output: [[-47.08824132317191 -93] -140.0882413231719]
Test Case: 475 | Input/Output: [[46.727694055118576 27] 73.72769405511858]
Test Case: 476 | Input/Output: [[-86.64607092003018 -54] -140.64607092003018]
Test Case: 477 | Input/Output: [[78.86336185201836 -93] -14.136638147981643]
Test Case: 478 | Input/Output: [[11.784731758472148 -85] -73.21526824152785]
Test Case: 479 | Input/Output: [[-35.3864266252764 -63] -98.3864266252764]
Test Case: 480 | Input/Output: [[40.008859989943915 60] 100.00885998994391]
Test Case: 481 | Input/Output: [[-99.87892606536009 -69] -168.87892606536008]
Test Case: 482 | Input/Output: [[-79.90277659927222 52] -27.902776599272215]
Test Case: 483 | Input/Output: [[44.19321016987945 -19] 25.19321016987945]
Test Case: 484 | Input/Output: [[95.78717978171534 -31] 64.78717978171534]
Test Case: 485 | Input/Output: [[25.73464521585494 54] 79.73464521585494]
Test Case: 486 | Input/Output: [[32.93201204668213 26] 58.93201204668213]
Test Case: 487 | Input/Output: [[-28.509017575800087 98] 69.49098242419991]
Test Case: 488 | Input/Output: [[41.199099298377405 -4] 37.199099298377405]
Test Case: 489 | Input/Output: [[-88.47524545213041 -41] -129.47524545213042]
Test Case: 490 | Input/Output: [[94.63522716365742 39] 133.63522716365742]
Test Case: 491 | Input/Output: [[88.31653214895172 -66] 22.316532148951723]
Test Case: 492 | Input/Output: [[-30.856078938780414 97] 66.14392106121959]
Test Case: 493 | Input/Output: [[-10.574698248509492 45] 34.42530175149051]
Test Case: 494 | Input/Output: [[-78.40344384404638 -72] -150.40344384404636]
Test Case: 495 | Input/Output: [[-58.82531821654269 14] -44.82531821654269]
Test Case: 496 | Input/Output: [[20.979503384839603 22] 42.9795033848396]
Test Case: 497 | Input/Output: [[-99.94103375456804 -12] -111.94103375456804]
Test Case: 498 | Input/Output: [[-83.77313651516263 -22] -105.77313651516263]
Test Case: 499 | Input/Output: [[41.37390839597586 -91] -49.62609160402414]
Test Case: 500 | Input/Output: [[38.473151773653456 95] 133.47315177365346]
Test Case: 501 | Input/Output: [[-30.290512434269033 -56] -86.29051243426903]
Test Case: 502 | Input/Output: [[-65.10770611806207 -94] -159.10770611806208]
Test Case: 503 | Input/Output: [[-6.495118339351194 54] 47.504881660648806]
Test Case: 504 | Input/Output: [[8.076194307066771 -62] -53.92380569293323]
Test Case: 505 | Input/Output: [[-30.876098098918803 -42] -72.8760980989188]
Test Case: 506 | Input/Output: [[4.282088445808199 -29] -24.7179115541918]
Test Case: 507 | Input/Output: [[-32.78768888048617 -71] -103.78768888048617]
Test Case: 508 | Input/Output: [[-18.186558008012497 19] 0.8134419919875029]
Test Case: 509 | Input/Output: [[15.21673640165595 7] 22.21673640165595]
Test Case: 510 | Input/Output: [[-58.089313344143065 95] 36.910686655856935]
Test Case: 511 | Input/Output: [[88.2432773252662 -13] 75.2432773252662]
Test Case: 512 | Input/Output: [[-85.3745606497103 -41] -126.3745606497103]
Test Case: 513 | Input/Output: [[-89.5716593584045 43] -46.5716593584045]
Test Case: 514 | Input/Output: [[12.711137015941574 -82] -69.28886298405843]
Test Case: 515 | Input/Output: [[-11.802919732230748 66] 54.19708026776925]
Test Case: 516 | Input/Output: [[-32.83729286802432 15] -17.83729286802432]
Test Case: 517 | Input/Output: [[-36.29939961922479 -64] -100.2993996192248]
Test Case: 518 | Input/Output: [[14.588389104649906 -56] -41.411610895350094]
Test Case: 519 | Input/Output: [[84.64720798579799 86] 170.647207985798]
Test Case: 520 | Input/Output: [[-60.421390176403534 -45] -105.42139017640353]
Test Case: 521 | Input/Output: [[-54.21668083302813 25] -29.21668083302813]
Test Case: 522 | Input/Output: [[-60.842167645434955 -28] -88.84216764543496]
Test Case: 523 | Input/Output: [[13.518464709109224 36] 49.518464709109224]
Test Case: 524 | Input/Output: [[-8.411113957254685 -15] -23.411113957254685]
Test Case: 525 | Input/Output: [[-29.134287039650104 79] 49.865712960349896]
Test Case: 526 | Input/Output: [[92.48942322100265 39] 131.48942322100265]
Test Case: 527 | Input/Output: [[28.537548558670807 -45] -16.462451441329193]
Test Case: 528 | Input/Output: [[-17.48268319858812 78] 60.51731680141188]
Test Case: 529 | Input/Output: [[24.202867673031264 65] 89.20286767303126]
Test Case: 530 | Input/Output: [[-48.88115364652607 -78] -126.88115364652607]
Test Case: 531 | Input/Output: [[-99.5247558823096 82] -17.524755882309606]
Test Case: 532 | Input/Output: [[0.2739636928773308 71] 71.27396369287733]
Test Case: 533 | Input/Output: [[-84.38184150034635 -93] -177.38184150034635]
Test Case: 534 | Input/Output: [[-83.61702613101747 0] -83.61702613101747]
Test Case: 535 | Input/Output: [[44.52364790988182 26] 70.52364790988182]
Test Case: 536 | Input/Output: [[-96.99919015861616 7] -89.99919015861616]
Test Case: 537 | Input/Output: [[-17.83887704118483 -36] -53.83887704118483]
Test Case: 538 | Input/Output: [[59.47878140204864 86] 145.47878140204864]
Test Case: 539 | Input/Output: [[-79.07650933818904 -89] -168.07650933818906]
Test Case: 540 | Input/Output: [[95.69213459761764 21] 116.69213459761764]
Test Case: 541 | Input/Output: [[-33.25271675328787 -32] -65.25271675328787]
Test Case: 542 | Input/Output: [[69.35770799958723 -24] 45.357707999587234]
Test Case: 543 | Input/Output: [[29.089921070636166 10] 39.089921070636166]
Test Case: 544 | Input/Output: [[-0.7415844833582526 -60] -60.74158448335825]
Test Case: 545 | Input/Output: [[-46.657158053692704 -43] -89.65715805369271]
Test Case: 546 | Input/Output: [[-23.9452196553257 12] -11.945219655325701]
Test Case: 547 | Input/Output: [[61.415364796770376 -71] -9.584635203229624]
Test Case: 548 | Input/Output: [[-67.47699733522498 -63] -130.47699733522498]
Test Case: 549 | Input/Output: [[-2.944002570477778 -87] -89.94400257047778]
Test Case: 550 | Input/Output: [[11.832615964841395 77] 88.8326159648414]
Test Case: 551 | Input/Output: [[95.87735509270857 -72] 23.87735509270857]
Test Case: 552 | Input/Output: [[-47.82002103750871 -27] -74.82002103750871]
Test Case: 553 | Input/Output: [[15.647376893145506 -64] -48.352623106854494]
Test Case: 554 | Input/Output: [[-53.54739479745112 41] -12.547394797451119]
Test Case: 555 | Input/Output: [[10.64797956410952 74] 84.64797956410952]
Test Case: 556 | Input/Output: [[-64.25837675381197 96] 31.741623246188027]
Test Case: 557 | Input/Output: [[69.08863888832704 -78] -8.91136111167296]
Test Case: 558 | Input/Output: [[-13.891481058972559 -38] -51.89148105897256]
Test Case: 559 | Input/Output: [[-52.76175504741252 -88] -140.76175504741252]
Test Case: 560 | Input/Output: [[55.99336899219588 9] 64.99336899219588]
Test Case: 561 | Input/Output: [[30.331714287966008 79] 109.33171428796601]
Test Case: 562 | Input/Output: [[-1.8622881855819173 -39] -40.86228818558192]
Test Case: 563 | Input/Output: [[-22.561883568606532 29] 6.438116431393468]
Test Case: 564 | Input/Output: [[-61.26187108729211 21] -40.26187108729211]
Test Case: 565 | Input/Output: [[-42.68103573178388 -64] -106.68103573178388]
Test Case: 566 | Input/Output: [[-53.82417248381199 -65] -118.82417248381199]
Test Case: 567 | Input/Output: [[65.47264435914477 18] 83.47264435914477]
Test Case: 568 | Input/Output: [[6.623200635549836 -84] -77.37679936445016]
Test Case: 569 | Input/Output: [[-13.520320002335737 -13] -26.520320002335737]
Test Case: 570 | Input/Output: [[-1.1246733529769415 71] 69.87532664702306]
Test Case: 571 | Input/Output: [[-79.57629295398277 -88] -167.57629295398277]
Test Case: 572 | Input/Output: [[-94.50065823969713 17] -77.50065823969713]
Test Case: 573 | Input/Output: [[85.86459669315542 -51] 34.86459669315542]
Test Case: 574 | Input/Output: [[15.333572496233245 -62] -46.666427503766755]
Test Case: 575 | Input/Output: [[96.90379508707366 8] 104.90379508707366]
Test Case: 576 | Input/Output: [[37.73645248594045 -12] 25.736452485940447]
Test Case: 577 | Input/Output: [[-77.56425083425009 -30] -107.56425083425009]
Test Case: 578 | Input/Output: [[-51.925935254029284 -50] -101.92593525402928]
Test Case: 579 | Input/Output: [[-17.51357629928536 82] 64.48642370071464]
Test Case: 580 | Input/Output: [[-53.79566228733439 22] -31.795662287334387]
Test Case: 581 | Input/Output: [[-19.78551982992245 30] 10.21448017007755]
Test Case: 582 | Input/Output: [[24.792305400479563 46] 70.79230540047956]
Test Case: 583 | Input/Output: [[-98.07325264101003 13] -85.07325264101003]
Test Case: 584 | Input/Output: [[-65.78118373702588 -16] -81.78118373702588]
Test Case: 585 | Input/Output: [[54.86590291630179 32] 86.86590291630179]
Test Case: 586 | Input/Output: [[45.048717422728345 -66] -20.951282577271655]
Test Case: 587 | Input/Output: [[-22.46118651671148 -69] -91.46118651671148]
Test Case: 588 | Input/Output: [[-97.02719193524933 -5] -102.02719193524933]
Test Case: 589 | Input/Output: [[86.51271672709143 -45] 41.51271672709143]
Test Case: 590 | Input/Output: [[93.13622317792812 -74] 19.136223177928116]
Test Case: 591 | Input/Output: [[-96.35047251558643 45] -51.35047251558643]
Test Case: 592 | Input/Output: [[40.155500778454126 100] 140.15550077845413]
Test Case: 593 | Input/Output: [[6.917583064578793 50] 56.91758306457879]
Test Case: 594 | Input/Output: [[-38.95462116504484 52] 13.045378834955159]
Test Case: 595 | Input/Output: [[-66.59272075952849 0] -66.59272075952849]
Test Case: 596 | Input/Output: [[-34.59013042374272 78] 43.40986957625728]
Test Case: 597 | Input/Output: [[56.061898449881824 -40] 16.061898449881824]
Test Case: 598 | Input/Output: [[19.851095179872132 10] 29.851095179872132]
Test Case: 599 | Input/Output: [[-36.446964800816886 43] 6.553035199183114]
Test Case: 600 | Input/Output: [[36.91398235990201 -10] 26.913982359902008]
Test Case: 601 | Input/Output: [[43.37005947471084 94] 137.37005947471084]
Test Case: 602 | Input/Output: [[-80.50432281859102 -80] -160.50432281859102]
Test Case: 603 | Input/Output: [[-18.90576702005751 -5] -23.90576702005751]
Test Case: 604 | Input/Output: [[-76.87025181331535 -69] -145.87025181331535]
Test Case: 605 | Input/Output: [[-36.53905271463083 -81] -117.53905271463083]
Test Case: 606 | Input/Output: [[-31.770328091889752 -63] -94.77032809188975]
Test Case: 607 | Input/Output: [[58.56949033588538 -84] -25.430509664114624]
Test Case: 608 | Input/Output: [[14.413154994944534 -98] -83.58684500505547]
Test Case: 609 | Input/Output: [[-7.643936133213288 -86] -93.64393613321329]
Test Case: 610 | Input/Output: [[87.56892559558557 26] 113.56892559558557]
Test Case: 611 | Input/Output: [[-37.6874903313025 4] -33.6874903313025]
Test Case: 612 | Input/Output: [[-98.7570614799848 5] -93.7570614799848]
Test Case: 613 | Input/Output: [[-61.07177400169847 -56] -117.07177400169847]
Test Case: 614 | Input/Output: [[-72.52284994567704 -25] -97.52284994567704]
Test Case: 615 | Input/Output: [[11.351874468330209 -87] -75.64812553166979]
Test Case: 616 | Input/Output: [[-31.369457839895333 75] 43.63054216010467]
Test Case: 617 | Input/Output: [[54.04557148072473 -79] -24.954428519275268]
Test Case: 618 | Input/Output: [[3.818956036513896 13] 16.818956036513896]
Test Case: 619 | Input/Output: [[15.13857904229792 67] 82.13857904229792]
Test Case: 620 | Input/Output: [[73.72170339544337 -95] -21.27829660455663]
Test Case: 621 | Input/Output: [[-84.24823303829557 -79] -163.24823303829555]
Test Case: 622 | Input/Output: [[-89.9296497611209 -91] -180.9296497611209]
Test Case: 623 | Input/Output: [[-86.10214508943896 -99] -185.10214508943898]
Test Case: 624 | Input/Output: [[29.428678195384265 -40] -10.571321804615735]
Test Case: 625 | Input/Output: [[-50.79029372934916 67] 16.20970627065084]
Test Case: 626 | Input/Output: [[75.07442906146684 -18] 57.074429061466844]
Test Case: 627 | Input/Output: [[-44.64424883449822 15] -29.64424883449822]
Test Case: 628 | Input/Output: [[-39.4460853478277 45] 5.553914652172303]
Test Case: 629 | Input/Output: [[-9.732927591593338 -10] -19.732927591593338]
Test Case: 630 | Input/Output: [[-9.719330550105965 -84] -93.71933055010597]
Test Case: 631 | Input/Output: [[-76.45486663652639 -78] -154.4548666365264]
Test Case: 632 | Input/Output: [[-39.18791196409717 -58] -97.18791196409717]
Test Case: 633 | Input/Output: [[-10.265974073113512 80] 69.73402592688649]
Test Case: 634 | Input/Output: [[92.44425651087971 75] 167.4442565108797]
Test Case: 635 | Input/Output: [[56.918646475824715 -43] 13.918646475824715]
Test Case: 636 | Input/Output: [[-19.517622470394173 -11] -30.517622470394173]
Test Case: 637 | Input/Output: [[56.20092531616808 -88] -31.79907468383192]
Test Case: 638 | Input/Output: [[82.89326614622169 9] 91.89326614622169]
Test Case: 639 | Input/Output: [[54.41082828807703 -13] 41.41082828807703]
Test Case: 640 | Input/Output: [[85.79971395303554 0] 85.79971395303554]
Test Case: 641 | Input/Output: [[-34.19722933475546 64] 29.802770665244537]
Test Case: 642 | Input/Output: [[2.4228030400511784 99] 101.42280304005118]
Test Case: 643 | Input/Output: [[-53.52984822488225 36] -17.52984822488225]
Test Case: 644 | Input/Output: [[41.13783548109552 47] 88.13783548109552]
Test Case: 645 | Input/Output: [[99.87751453341045 -81] 18.877514533410448]
Test Case: 646 | Input/Output: [[-3.827145140456679 76] 72.17285485954332]
Test Case: 647 | Input/Output: [[-31.323488690701723 26] -5.323488690701723]
Test Case: 648 | Input/Output: [[18.09233570511462 -66] -47.90766429488538]
Test Case: 649 | Input/Output: [[-26.09895400678286 78] 51.90104599321714]
Test Case: 650 | Input/Output: [[17.108540470026483 -91] -73.89145952997352]
Test Case: 651 | Input/Output: [[-91.06234452146383 63] -28.062344521463828]
Test Case: 652 | Input/Output: [[95.71926302784965 -8] 87.71926302784965]
Test Case: 653 | Input/Output: [[-72.35826916361412 76] 3.641730836385875]
Test Case: 654 | Input/Output: [[-51.34087858710039 83] 31.65912141289961]
Test Case: 655 | Input/Output: [[-14.407090415628105 -77] -91.4070904156281]
Test Case: 656 | Input/Output: [[31.38989862859745 -57] -25.61010137140255]
Test Case: 657 | Input/Output: [[96.51845891546682 -16] 80.51845891546682]
Test Case: 658 | Input/Output: [[66.09451270343828 84] 150.09451270343828]
Test Case: 659 | Input/Output: [[83.68835972178368 -47] 36.688359721783684]
Test Case: 660 | Input/Output: [[90.4632233159513 62] 152.4632233159513]
Test Case: 661 | Input/Output: [[24.805772338650797 78] 102.8057723386508]
Test Case: 662 | Input/Output: [[43.499083384472925 42] 85.49908338447293]
Test Case: 663 | Input/Output: [[95.9755847310918 7] 102.9755847310918]
Test Case: 664 | Input/Output: [[-26.280634290929356 64] 37.719365709070644]
Test Case: 665 | Input/Output: [[57.80756343188648 -35] 22.80756343188648]
Test Case: 666 | Input/Output: [[-12.591470425452329 -44] -56.59147042545233]
Test Case: 667 | Input/Output: [[-53.20853881364083 72] 18.79146118635917]
Test Case: 668 | Input/Output: [[-40.51374048106062 -39] -79.51374048106062]
Test Case: 669 | Input/Output: [[-54.2708328423553 27] -27.270832842355297]
Test Case: 670 | Input/Output: [[-51.719002126881655 -83] -134.71900212688166]
Test Case: 671 | Input/Output: [[-74.60355241852461 -49] -123.60355241852461]
Test Case: 672 | Input/Output: [[-53.92642620485915 -65] -118.92642620485915]
Test Case: 673 | Input/Output: [[-83.99098664805223 -21] -104.99098664805223]
Test Case: 674 | Input/Output: [[55.91319172242817 -48] 7.9131917224281665]
Test Case: 675 | Input/Output: [[13.479400764515233 98] 111.47940076451523]
Test Case: 676 | Input/Output: [[67.28116608437716 -67] 0.28116608437716195]
Test Case: 677 | Input/Output: [[14.879235090528638 -83] -68.12076490947136]
Test Case: 678 | Input/Output: [[64.67942348702775 97] 161.67942348702775]
Test Case: 679 | Input/Output: [[83.63142608477267 -50] 33.63142608477267]
Test Case: 680 | Input/Output: [[-75.98424357937381 31] -44.98424357937381]
Test Case: 681 | Input/Output: [[31.788653328955604 52] 83.7886533289556]
Test Case: 682 | Input/Output: [[60.26978470638616 46] 106.26978470638616]
Test Case: 683 | Input/Output: [[75.08359274971247 59] 134.08359274971247]
Test Case: 684 | Input/Output: [[-59.14156907555821 -87] -146.1415690755582]
Test Case: 685 | Input/Output: [[87.99788425173352 -55] 32.997884251733524]
Test Case: 686 | Input/Output: [[-51.555601184083976 16] -35.555601184083976]
Test Case: 687 | Input/Output: [[7.890266593011532 15] 22.890266593011532]
Test Case: 688 | Input/Output: [[-58.20360709508306 85] 26.796392904916942]
Test Case: 689 | Input/Output: [[-69.75081785519592 53] -16.75081785519592]
Test Case: 690 | Input/Output: [[-62.88023117249648 -88] -150.88023117249648]
Test Case: 691 | Input/Output: [[45.682879513942225 -37] 8.682879513942225]
Test Case: 692 | Input/Output: [[-70.23511831586336 61] -9.23511831586336]
Test Case: 693 | Input/Output: [[-94.98579138390055 80] -14.985791383900548]
Test Case: 694 | Input/Output: [[44.670702475375435 36] 80.67070247537544]
Test Case: 695 | Input/Output: [[57.89130823467593 76] 133.89130823467593]
Test Case: 696 | Input/Output: [[55.29238116865068 92] 147.29238116865068]
Test Case: 697 | Input/Output: [[16.585770014963614 39] 55.585770014963614]
Test Case: 698 | Input/Output: [[-94.17968612242989 -85] -179.17968612242987]
Test Case: 699 | Input/Output: [[72.31737553349942 -6] 66.31737553349942]
Test Case: 700 | Input/Output: [[-37.38518311661026 -62] -99.38518311661025]
Test Case: 701 | Input/Output: [[40.907397242057385 64] 104.90739724205739]
Test Case: 702 | Input/Output: [[-24.93937611677805 40] 15.06062388322195]
Test Case: 703 | Input/Output: [[-61.02858403699087 4] -57.02858403699087]
Test Case: 704 | Input/Output: [[47.99798904185397 99] 146.99798904185397]
Test Case: 705 | Input/Output: [[-11.47335187084117 -7] -18.47335187084117]
Test Case: 706 | Input/Output: [[-97.4797831950551 50] -47.479783195055106]
Test Case: 707 | Input/Output: [[-68.63679054351843 -99] -167.63679054351843]
Test Case: 708 | Input/Output: [[45.37932421429883 45] 90.37932421429883]
Test Case: 709 | Input/Output: [[39.40042070514329 -53] -13.59957929485671]
Test Case: 710 | Input/Output: [[59.837472373167145 10] 69.83747237316715]
Test Case: 711 | Input/Output: [[11.471733490332397 51] 62.4717334903324]
Test Case: 712 | Input/Output: [[71.99884001037768 68] 139.99884001037768]
Test Case: 713 | Input/Output: [[-34.59711688180805 -67] -101.59711688180805]
Test Case: 714 | Input/Output: [[75.34130175741879 -33] 42.34130175741879]
Test Case: 715 | Input/Output: [[-41.05944818204392 69] 27.940551817956077]
Test Case: 716 | Input/Output: [[-96.89847546386925 38] -58.89847546386925]
Test Case: 717 | Input/Output: [[-80.02048772411393 4] -76.02048772411393]
Test Case: 718 | Input/Output: [[-31.92760006683055 97] 65.07239993316945]
Test Case: 719 | Input/Output: [[71.08755534001546 93] 164.08755534001546]
Test Case: 720 | Input/Output: [[-81.13725004519614 -70] -151.13725004519614]
Test Case: 721 | Input/Output: [[83.24963826227739 28] 111.24963826227739]
Test Case: 722 | Input/Output: [[13.660535192800566 40] 53.660535192800566]
Test Case: 723 | Input/Output: [[-2.549865552754113 -18] -20.549865552754113]
Test Case: 724 | Input/Output: [[50.672097571043395 -5] 45.672097571043395]
Test Case: 725 | Input/Output: [[88.69212937328425 -11] 77.69212937328425]
Test Case: 726 | Input/Output: [[56.32802281904736 -48] 8.328022819047362]
Test Case: 727 | Input/Output: [[-21.615128273925038 99] 77.38487172607496]
Test Case: 728 | Input/Output: [[69.45633053004866 2] 71.45633053004866]
Test Case: 729 | Input/Output: [[23.262410266534104 -81] -57.737589733465896]
Test Case: 730 | Input/Output: [[29.32366684341801 -3] 26.32366684341801]
Test Case: 731 | Input/Output: [[-82.58122513991013 56] -26.58122513991013]
Test Case: 732 | Input/Output: [[74.65320859600183 35] 109.65320859600183]
Test Case: 733 | Input/Output: [[77.66638939355403 0] 77.66638939355403]
Test Case: 734 | Input/Output: [[32.24470474314708 -83] -50.75529525685292]
Test Case: 735 | Input/Output: [[-13.890716855318146 85] 71.10928314468185]
Test Case: 736 | Input/Output: [[14.675078425820743 30] 44.67507842582074]
Test Case: 737 | Input/Output: [[-64.22067545358443 75] 10.779324546415566]
Test Case: 738 | Input/Output: [[68.15641872486674 80] 148.15641872486674]
Test Case: 739 | Input/Output: [[-91.79988490198865 13] -78.79988490198865]
Test Case: 740 | Input/Output: [[-58.83009364322065 9] -49.83009364322065]
Test Case: 741 | Input/Output: [[-60.89263360185424 10] -50.89263360185424]
Test Case: 742 | Input/Output: [[-75.64619975825588 56] -19.646199758255875]
Test Case: 743 | Input/Output: [[98.46878459659854 29] 127.46878459659854]
Test Case: 744 | Input/Output: [[-90.76848445076138 24] -66.76848445076138]
Test Case: 745 | Input/Output: [[13.682071575023642 -88] -74.31792842497636]
Test Case: 746 | Input/Output: [[-37.48324067186124 -42] -79.48324067186124]
Test Case: 747 | Input/Output: [[21.54579948676698 98] 119.54579948676698]
Test Case: 748 | Input/Output: [[55.742052661211375 -89] -33.257947338788625]
Test Case: 749 | Input/Output: [[33.95755562041782 51] 84.95755562041782]
Test Case: 750 | Input/Output: [[3.6890420879803116 65] 68.68904208798031]
Test Case: 751 | Input/Output: [[3.740996788010605 -54] -50.259003211989395]
Test Case: 752 | Input/Output: [[59.250182014108276 -29] 30.250182014108276]
Test Case: 753 | Input/Output: [[-26.20694074919396 88] 61.79305925080604]
Test Case: 754 | Input/Output: [[-93.35176551591753 100] 6.648234484082465]
Test Case: 755 | Input/Output: [[96.91197596882546 -55] 41.91197596882546]
Test Case: 756 | Input/Output: [[-7.842643118427844 -26] -33.842643118427844]
Test Case: 757 | Input/Output: [[-60.109637016748316 -75] -135.1096370167483]
Test Case: 758 | Input/Output: [[53.34290777956775 46] 99.34290777956775]
Test Case: 759 | Input/Output: [[-54.38079958464781 54] -0.3807995846478107]
Test Case: 760 | Input/Output: [[-6.903888583053856 -76] -82.90388858305386]
Test Case: 761 | Input/Output: [[-75.76010561875964 -19] -94.76010561875964]
Test Case: 762 | Input/Output: [[-33.64144103997168 91] 57.35855896002832]
Test Case: 763 | Input/Output: [[-35.009579328951816 3] -32.009579328951816]
Test Case: 764 | Input/Output: [[88.14861983817244 -6] 82.14861983817244]
Test Case: 765 | Input/Output: [[-59.18761053469224 -71] -130.18761053469223]
Test Case: 766 | Input/Output: [[63.17575046956864 59] 122.17575046956864]
Test Case: 767 | Input/Output: [[-32.57814050018473 -67] -99.57814050018473]
Test Case: 768 | Input/Output: [[-67.83055860799033 -5] -72.83055860799033]
Test Case: 769 | Input/Output: [[49.727912328222914 -22] 27.727912328222914]
Test Case: 770 | Input/Output: [[-53.03836734026417 57] 3.9616326597358267]
Test Case: 771 | Input/Output: [[-34.23050381024507 -41] -75.23050381024507]
Test Case: 772 | Input/Output: [[3.962637529903219 5] 8.962637529903219]
Test Case: 773 | Input/Output: [[-97.28375144864711 99] 1.7162485513528907]
Test Case: 774 | Input/Output: [[-63.450965646353154 70] 6.549034353646846]
Test Case: 775 | Input/Output: [[34.14052704606624 8] 42.14052704606624]
Test Case: 776 | Input/Output: [[-39.07019048484977 -88] -127.07019048484977]
Test Case: 777 | Input/Output: [[11.541739240709063 65] 76.54173924070906]
Test Case: 778 | Input/Output: [[22.688951027068 -45] -22.311048972932]
Test Case: 779 | Input/Output: [[5.40586368079164 -44] -38.59413631920836]
Test Case: 780 | Input/Output: [[15.096645748274142 -11] 4.096645748274142]
Test Case: 781 | Input/Output: [[-68.42973838555797 -100] -168.42973838555798]
Test Case: 782 | Input/Output: [[98.92177820956886 -88] 10.921778209568856]
Test Case: 783 | Input/Output: [[27.225531016812937 65] 92.22553101681294]
Test Case: 784 | Input/Output: [[21.830340593363488 6] 27.830340593363488]
Test Case: 785 | Input/Output: [[-86.6609227121053 69] -17.660922712105304]
Test Case: 786 | Input/Output: [[-20.248066009626697 -67] -87.2480660096267]
Test Case: 787 | Input/Output: [[30.191542794264222 45] 75.19154279426422]
Test Case: 788 | Input/Output: [[86.78969470144756 42] 128.78969470144756]
Test Case: 789 | Input/Output: [[-7.6290599428816535 43] 35.37094005711835]
Test Case: 790 | Input/Output: [[-96.83390344638916 -42] -138.83390344638917]
Test Case: 791 | Input/Output: [[52.165307858233035 -22] 30.165307858233035]
Test Case: 792 | Input/Output: [[0.5297036129838091 16] 16.52970361298381]
Test Case: 793 | Input/Output: [[-3.1943114813986853 -47] -50.194311481398685]
Test Case: 794 | Input/Output: [[52.67219048121473 68] 120.67219048121473]
Test Case: 795 | Input/Output: [[49.89276595839212 89] 138.89276595839212]
Test Case: 796 | Input/Output: [[94.86399611687341 -85] 9.863996116873409]
Test Case: 797 | Input/Output: [[-16.89675862248265 -89] -105.89675862248265]
Test Case: 798 | Input/Output: [[-45.93506580207498 44] -1.9350658020749805]
Test Case: 799 | Input/Output: [[67.86869807703994 -91] -23.131301922960063]
Test Case: 800 | Input/Output: [[16.61340710094767 44] 60.61340710094767]
Test Case: 801 | Input/Output: [[18.828117101872195 62] 80.8281171018722]
Test Case: 802 | Input/Output: [[-46.814506524261404 -55] -101.8145065242614]
Test Case: 803 | Input/Output: [[-97.74988164853555 -76] -173.74988164853556]
Test Case: 804 | Input/Output: [[61.462505672186865 -24] 37.462505672186865]
Test Case: 805 | Input/Output: [[-55.834174294312746 -94] -149.83417429431273]
Test Case: 806 | Input/Output: [[46.167309336749355 -64] -17.832690663250645]
Test Case: 807 | Input/Output: [[-29.584583900775854 -8] -37.584583900775854]
Test Case: 808 | Input/Output: [[-99.69263212591424 4] -95.69263212591424]
Test Case: 809 | Input/Output: [[-13.405250344076023 100] 86.59474965592398]
Test Case: 810 | Input/Output: [[-42.89030971708194 -83] -125.89030971708195]
Test Case: 811 | Input/Output: [[-9.437205574405354 -69] -78.43720557440535]
Test Case: 812 | Input/Output: [[99.79148322381533 -95] 4.791483223815334]
Test Case: 813 | Input/Output: [[-58.93154723122424 80] 21.068452768775757]
Test Case: 814 | Input/Output: [[47.5415058167801 -88] -40.4584941832199]
Test Case: 815 | Input/Output: [[-72.7361122243468 -67] -139.7361122243468]
Test Case: 816 | Input/Output: [[-93.49698624703994 77] -16.496986247039942]
Test Case: 817 | Input/Output: [[-67.86298942285897 36] -31.862989422858973]
Test Case: 818 | Input/Output: [[-43.951446480077024 -91] -134.95144648007704]
Test Case: 819 | Input/Output: [[-18.401525101801838 82] 63.59847489819816]
Test Case: 820 | Input/Output: [[-30.108881780774738 80] 49.89111821922526]
Test Case: 821 | Input/Output: [[-94.22627860946686 -35] -129.22627860946687]
Test Case: 822 | Input/Output: [[-96.96059186483122 90] -6.9605918648312155]
Test Case: 823 | Input/Output: [[-12.932841102790007 26] 13.067158897209993]
Test Case: 824 | Input/Output: [[-39.7571209962948 -78] -117.7571209962948]
Test Case: 825 | Input/Output: [[79.8244894034313 54] 133.8244894034313]
Test Case: 826 | Input/Output: [[9.086303592351342 5] 14.086303592351342]
Test Case: 827 | Input/Output: [[26.87815160693387 66] 92.87815160693387]
Test Case: 828 | Input/Output: [[39.23576684529678 19] 58.23576684529678]
Test Case: 829 | Input/Output: [[41.296948599042906 83] 124.2969485990429]
Test Case: 830 | Input/Output: [[26.50358086136373 -99] -72.49641913863627]
Test Case: 831 | Input/Output: [[-69.83034503327663 23] -46.83034503327663]
Test Case: 832 | Input/Output: [[-21.01216427982078 29] 7.98783572017922]
Test Case: 833 | Input/Output: [[-16.003048049726388 80] 63.99695195027361]
Test Case: 834 | Input/Output: [[-70.50437324244061 41] -29.504373242440607]
Test Case: 835 | Input/Output: [[-34.40464907340868 96] 61.59535092659132]
Test Case: 836 | Input/Output: [[-98.86178430521555 -73] -171.86178430521556]
Test Case: 837 | Input/Output: [[35.39502196309962 -67] -31.604978036900377]
Test Case: 838 | Input/Output: [[-24.92775026514144 76] 51.07224973485856]
Test Case: 839 | Input/Output: [[-75.91408969205622 21] -54.91408969205622]
Test Case: 840 | Input/Output: [[-46.6662409690261 9] -37.6662409690261]
Test Case: 841 | Input/Output: [[6.331878391425107 2] 8.331878391425107]
Test Case: 842 | Input/Output: [[27.783062132957355 97] 124.78306213295735]
Test Case: 843 | Input/Output: [[-65.5079831244639 -78] -143.50798312446392]
Test Case: 844 | Input/Output: [[-71.60020733668024 57] -14.600207336680242]
Test Case: 845 | Input/Output: [[70.19857576758511 60] 130.1985757675851]
Test Case: 846 | Input/Output: [[-10.57886850689114 2] -8.57886850689114]
Test Case: 847 | Input/Output: [[20.303652931069593 -11] 9.303652931069593]
Test Case: 848 | Input/Output: [[-50.38273309634667 49] -1.3827330963466693]
Test Case: 849 | Input/Output: [[71.773155055053 61] 132.773155055053]
Test Case: 850 | Input/Output: [[82.3316811053551 -45] 37.3316811053551]
Test Case: 851 | Input/Output: [[33.85740044592285 10] 43.85740044592285]
Test Case: 852 | Input/Output: [[94.76278920846391 75] 169.76278920846391]
Test Case: 853 | Input/Output: [[-51.95607198713521 -4] -55.95607198713521]
Test Case: 854 | Input/Output: [[74.67972146942387 -36] 38.67972146942387]
Test Case: 855 | Input/Output: [[-46.75759516249494 32] -14.757595162494937]
Test Case: 856 | Input/Output: [[71.84128270340486 -100] -28.158717296595142]
Test Case: 857 | Input/Output: [[34.51100503336008 19] 53.51100503336008]
Test Case: 858 | Input/Output: [[1.5464946631828127 94] 95.54649466318281]
Test Case: 859 | Input/Output: [[85.74025056137228 -23] 62.74025056137228]
Test Case: 860 | Input/Output: [[44.69832172054623 -16] 28.698321720546232]
Test Case: 861 | Input/Output: [[-2.649176257990277 1] -1.649176257990277]
Test Case: 862 | Input/Output: [[69.81832295768103 -44] 25.818322957681033]
Test Case: 863 | Input/Output: [[-52.38927704244993 -62] -114.38927704244993]
Test Case: 864 | Input/Output: [[-4.940549762868002 -25] -29.940549762868002]
Test Case: 865 | Input/Output: [[-70.43435787582945 77] 6.565642124170552]
Test Case: 866 | Input/Output: [[-6.840733546887435 -12] -18.840733546887435]
Test Case: 867 | Input/Output: [[-58.02795311096516 -71] -129.02795311096514]
Test Case: 868 | Input/Output: [[-0.11457304365968923 -2] -2.1145730436596892]
Test Case: 869 | Input/Output: [[91.65604470565538 -2] 89.65604470565538]
Test Case: 870 | Input/Output: [[-49.81352832014603 -46] -95.81352832014602]
Test Case: 871 | Input/Output: [[-98.35546575059912 -10] -108.35546575059912]
Test Case: 872 | Input/Output: [[59.574265016662196 36] 95.5742650166622]
Test Case: 873 | Input/Output: [[-71.51046886425787 42] -29.510468864257874]
Test Case: 874 | Input/Output: [[-26.610308254958625 96] 69.38969174504138]
Test Case: 875 | Input/Output: [[-66.77397457149658 83] 16.22602542850342]
Test Case: 876 | Input/Output: [[86.26623098100566 -66] 20.266230981005663]
Test Case: 877 | Input/Output: [[25.795139489519926 87] 112.79513948951993]
Test Case: 878 | Input/Output: [[-72.07415164820591 -99] -171.0741516482059]
Test Case: 879 | Input/Output: [[-92.00089445309065 -14] -106.00089445309065]
Test Case: 880 | Input/Output: [[70.13200140607842 -42] 28.132001406078416]
Test Case: 881 | Input/Output: [[-99.26334267380813 -79] -178.26334267380813]
Test Case: 882 | Input/Output: [[29.82822219274516 -76] -46.17177780725484]
Test Case: 883 | Input/Output: [[59.788474468649355 -34] 25.788474468649355]
Test Case: 884 | Input/Output: [[-8.217065786484156 61] 52.782934213515844]
Test Case: 885 | Input/Output: [[19.249550963737178 39] 58.24955096373718]
Test Case: 886 | Input/Output: [[-8.851921433024728 43] 34.14807856697527]
Test Case: 887 | Input/Output: [[92.12306795241912 -46] 46.12306795241912]
Test Case: 888 | Input/Output: [[18.97657908613006 38] 56.97657908613006]
Test Case: 889 | Input/Output: [[93.96603675064244 36] 129.96603675064244]
Test Case: 890 | Input/Output: [[-37.347895533475686 -61] -98.34789553347568]
Test Case: 891 | Input/Output: [[0.2283970455876556 -5] -4.771602954412344]
Test Case: 892 | Input/Output: [[-88.85936120411617 40] -48.85936120411617]
Test Case: 893 | Input/Output: [[88.5677505936795 46] 134.5677505936795]
Test Case: 894 | Input/Output: [[94.26594136700885 -52] 42.26594136700885]
Test Case: 895 | Input/Output: [[93.10265173809381 8] 101.10265173809381]
Test Case: 896 | Input/Output: [[-3.5946719456270984 -68] -71.5946719456271]
Test Case: 897 | Input/Output: [[-84.0515753344589 -76] -160.0515753344589]
Test Case: 898 | Input/Output: [[-19.264950867772185 -97] -116.26495086777219]
Test Case: 899 | Input/Output: [[86.46163720405207 13] 99.46163720405207]
Test Case: 900 | Input/Output: [[-4.793353695259441 -45] -49.79335369525944]
Test Case: 901 | Input/Output: [[46.269866564597294 47] 93.2698665645973]
Test Case: 902 | Input/Output: [[96.29091457903746 -35] 61.29091457903746]
Test Case: 903 | Input/Output: [[41.92625336437271 6] 47.92625336437271]
Test Case: 904 | Input/Output: [[27.657328581557778 52] 79.65732858155778]
Test Case: 905 | Input/Output: [[-67.93728891617215 36] -31.93728891617215]
Test Case: 906 | Input/Output: [[-48.404313135631824 -82] -130.4043131356318]
Test Case: 907 | Input/Output: [[49.260514448834726 -43] 6.260514448834726]
Test Case: 908 | Input/Output: [[-96.8385986650241 -24] -120.8385986650241]
Test Case: 909 | Input/Output: [[92.55085749159022 58] 150.55085749159022]
Test Case: 910 | Input/Output: [[48.56573980833474 -92] -43.43426019166526]
Test Case: 911 | Input/Output: [[-15.312369809655053 85] 69.68763019034495]
Test Case: 912 | Input/Output: [[64.72146551757893 69] 133.72146551757893]
Test Case: 913 | Input/Output: [[-57.78167506822178 -74] -131.78167506822177]
Test Case: 914 | Input/Output: [[-70.3065010875554 -12] -82.3065010875554]
Test Case: 915 | Input/Output: [[-50.17477545279674 -65] -115.17477545279674]
Test Case: 916 | Input/Output: [[-74.29017018699935 -67] -141.29017018699935]
Test Case: 917 | Input/Output: [[52.837531423736294 20] 72.8375314237363]
Test Case: 918 | Input/Output: [[97.75062034203518 73] 170.75062034203518]
Test Case: 919 | Input/Output: [[13.95835567644697 66] 79.95835567644697]
Test Case: 920 | Input/Output: [[-0.996356498962399 2] 1.003643501037601]
Test Case: 921 | Input/Output: [[-3.399144055772112 -28] -31.399144055772112]
Test Case: 922 | Input/Output: [[13.999868667024316 -78] -64.00013133297568]
Test Case: 923 | Input/Output: [[-46.28835599905241 -5] -51.28835599905241]
Test Case: 924 | Input/Output: [[-62.31157263663738 100] 37.68842736336262]
Test Case: 925 | Input/Output: [[84.34246156095179 47] 131.3424615609518]
Test Case: 926 | Input/Output: [[-29.63642163330718 85] 55.36357836669282]
Test Case: 927 | Input/Output: [[-97.44533865745355 -14] -111.44533865745355]
Test Case: 928 | Input/Output: [[-62.69326165845206 32] -30.69326165845206]
Test Case: 929 | Input/Output: [[87.66165452512274 -96] -8.338345474877258]
Test Case: 930 | Input/Output: [[-93.09626244165806 53] -40.096262441658055]
Test Case: 931 | Input/Output: [[48.48306137318744 35] 83.48306137318744]
Test Case: 932 | Input/Output: [[-22.511871350506766 41] 18.488128649493234]
Test Case: 933 | Input/Output: [[-32.26687999989932 70] 37.73312000010068]
Test Case: 934 | Input/Output: [[30.112399872408645 64] 94.11239987240864]
Test Case: 935 | Input/Output: [[-3.0381386494186415 55] 51.96186135058136]
Test Case: 936 | Input/Output: [[77.48326460569669 7] 84.48326460569669]
Test Case: 937 | Input/Output: [[-21.97080794076014 59] 37.02919205923986]
Test Case: 938 | Input/Output: [[65.80931525742614 32] 97.80931525742614]
Test Case: 939 | Input/Output: [[98.08916931362012 33] 131.08916931362012]
Test Case: 940 | Input/Output: [[89.6528231425653 -89] 0.6528231425652962]
Test Case: 941 | Input/Output: [[-94.60347123546396 -97] -191.60347123546396]
Test Case: 942 | Input/Output: [[94.62579079116887 -67] 27.625790791168868]
Test Case: 943 | Input/Output: [[-10.450383163176454 15] 4.549616836823546]
Test Case: 944 | Input/Output: [[-89.94133047517015 62] -27.941330475170147]
Test Case: 945 | Input/Output: [[47.98425185565836 -70] -22.015748144341643]
Test Case: 946 | Input/Output: [[51.52806904101965 71] 122.52806904101965]
Test Case: 947 | Input/Output: [[30.634613711932047 -50] -19.365386288067953]
Test Case: 948 | Input/Output: [[-80.81806465178309 40] -40.81806465178309]
Test Case: 949 | Input/Output: [[-73.12480806928419 93] 19.875191930715815]
Test Case: 950 | Input/Output: [[-0.268698376472301 -37] -37.2686983764723]
Test Case: 951 | Input/Output: [[-78.5130153451108 54] -24.5130153451108]
Test Case: 952 | Input/Output: [[47.52985462001632 -64] -16.470145379983677]
Test Case: 953 | Input/Output: [[1.2994353280320752 -46] -44.700564671967925]
Test Case: 954 | Input/Output: [[-57.53148549659299 -61] -118.53148549659299]
Test Case: 955 | Input/Output: [[-14.261225027163675 42] 27.738774972836325]
Test Case: 956 | Input/Output: [[-64.66002951731673 -33] -97.66002951731673]
Test Case: 957 | Input/Output: [[-81.87409880019968 29] -52.874098800199675]
Test Case: 958 | Input/Output: [[6.533139437818008 -90] -83.46686056218199]
Test Case: 959 | Input/Output: [[-17.635293704947784 69] 51.364706295052216]
Test Case: 960 | Input/Output: [[13.332490229893267 79] 92.33249022989327]
Test Case: 961 | Input/Output: [[-96.01623148248603 87] -9.016231482486035]
Test Case: 962 | Input/Output: [[65.07730638285344 63] 128.07730638285344]
Test Case: 963 | Input/Output: [[0.37480431619852084 -30] -29.62519568380148]
Test Case: 964 | Input/Output: [[98.80883677715894 -6] 92.80883677715894]
Test Case: 965 | Input/Output: [[96.25031722655544 -22] 74.25031722655544]
Test Case: 966 | Input/Output: [[-11.105749969376504 -49] -60.105749969376504]
Test Case: 967 | Input/Output: [[-19.091251353065104 15] -4.091251353065104]
Test Case: 968 | Input/Output: [[-17.97441222892209 13] -4.974412228922091]
Test Case: 969 | Input/Output: [[-17.571129745350646 20] 2.428870254649354]
Test Case: 970 | Input/Output: [[-26.062374258144445 -13] -39.062374258144445]
Test Case: 971 | Input/Output: [[-71.16091153920632 -50] -121.16091153920632]
Test Case: 972 | Input/Output: [[-46.94096266785519 -21] -67.94096266785519]
Test Case: 973 | Input/Output: [[71.62417575776351 -96] -24.37582424223649]
Test Case: 974 | Input/Output: [[89.73460854580034 -21] 68.73460854580034]
Test Case: 975 | Input/Output: [[78.86281795478965 -91] -12.137182045210352]
Test Case: 976 | Input/Output: [[55.909332329905 1] 56.909332329905]
Test Case: 977 | Input/Output: [[93.05234918836734 8] 101.05234918836734]
Test Case: 978 | Input/Output: [[-29.496952082631168 -29] -58.49695208263117]
Test Case: 979 | Input/Output: [[-6.480506750543654 25] 18.519493249456346]
Test Case: 980 | Input/Output: [[-26.942402209924182 75] 48.05759779007582]
Test Case: 981 | Input/Output: [[63.89125096497875 -13] 50.89125096497875]
Test Case: 982 | Input/Output: [[32.91010209149076 -96] -63.08989790850924]
Test Case: 983 | Input/Output: [[15.767270478499256 45] 60.767270478499256]
Test Case: 984 | Input/Output: [[-73.14629745851622 14] -59.146297458516216]
Test Case: 985 | Input/Output: [[81.21515524153176 -4] 77.21515524153176]
Test Case: 986 | Input/Output: [[97.16808658592637 -84] 13.168086585926375]
Test Case: 987 | Input/Output: [[-12.638590881657791 96] 83.36140911834221]
Test Case: 988 | Input/Output: [[33.55838991758506 -22] 11.55838991758506]
Test Case: 989 | Input/Output: [[-27.60820082634976 -52] -79.60820082634976]
Test Case: 990 | Input/Output: [[-78.87743913918524 71] -7.877439139185242]
Test Case: 991 | Input/Output: [[4.125395667380886 -29] -24.874604332619114]
Test Case: 992 | Input/Output: [[47.39697304047655 -11] 36.39697304047655]
Test Case: 993 | Input/Output: [[36.9586804907232 -70] -33.0413195092768]
Test Case: 994 | Input/Output: [[36.75448797410749 -25] 11.75448797410749]
Test Case: 995 | Input/Output: [[-58.61221979423617 -70] -128.61221979423618]
Test Case: 996 | Input/Output: [[0.09862399073747952 -38] -37.90137600926252]
Test Case: 997 | Input/Output: [[34.109188634977414 -95] -60.890811365022586]
Test Case: 998 | Input/Output: [[-93.7242468754356 -91] -184.7242468754356]
Test Case: 999 | Input/Output: [[-14.259792286190518 -85] -99.25979228619052]
;;******************************
Registered instructions: #{code_atom genome_uniform_tag_mutation code_car print_newline integer_sub integer_inc boolean_stackdepth return_exec_pop zip_dup_items integer_tag_string_instruction vector_integer_eq autoconstructive_integer_rand boolean_pop genome_close_inc string_fromchar vector_string_shove zip_yankdup genome_new genome_gene_genome_instruction vector_float_yankdup exec_yankdup vector_integer_shove integer_yankdup string_flush boolean_swap zip_empty exec_shove vector_boolean_yank code_eq exec_y boolean_yank integer_eq genome_silence string_butlast code_contains string_conjchar code_do*count vector_float_last genome_uniform_instruction_mutation genome_pop string_substring integer_mult vector_string_dup_times code_length vector_integer_dup boolean_or code_position boolean_empty zip_fromcode print_vector_string vector_boolean_swap return_frominteger char_dup_items vector_float_pushall return_genome_pop genome_gene_close char_iswhitespace code_cdr exec_do*vector_integer integer_rand vector_string_replacefirst string_first vector_boolean_first exec_do*while exec_string_iterate string_indexofchar vector_float_replace integer_fromstring code_list code_swap char_frominteger genome_gene_randomize vector_integer_emptyvector vector_string_eq exec_dup_items vector_float_butlast boolean_dup_items genome_uniform_string_mutation exec_empty zip_end? exec_fromzipnode string_shove vector_boolean_pushall zip_insert_left_fromcode exec_rot integer_tag_integer_instruction vector_string_concat vector_float_indexof genome_instruction_eq code_pop vector_string_subvec vector_integer_swap code_subst char_pop return_string_pop zip_yank exec_dup vector_integer_butlast vector_float_rest vector_string_flush boolean_fromfloat code_fromziprights float_sin boolean_flush char_isdigit float_lte exec_fromziproot vector_integer_empty print_code vector_string_stackdepth string_reverse exec_k vector_integer_yank float_frominteger char_rot vector_integer_dup_times print_char integer_tag_boolean_instruction vector_integer_stackdepth vector_boolean_concat boolean_xor integer_gte genome_yankdup vector_float_shove vector_integer_take boolean_dup_times code_quote string_replacefirst return_fromstring exec_fromziplefts vector_integer_yankdup boolean_shove float_lt vector_string_dup vector_string_occurrencesof vector_integer_replace zip_branch? vector_float_reverse float_mod vector_float_subvec integer_tag_code_instruction string_last print_boolean boolean_rot vector_string_rest integer_div vector_float_remove integer_tag_exec_instruction integer_fromfloat integer_lte code_fromzipchildren environment_end vector_integer_rot integer_mod string_concat vector_string_butlast genome_swap code_null exec_do*count vector_float_emptyvector vector_string_yankdup integer_tag_float_instruction integer_rot float_yankdup vector_string_rot zip_replace_fromexec genome_uniform_boolean_mutation vector_string_take vector_float_dup_items integer_add vector_integer_occurrencesof integer_shove string_dup_times genome_dup return_code_pop char_swap integer_max return_fromexec code_wrap genome_genesis return_float_pop code_flush genome_yank zip_shove vector_integer_flush vector_integer_subvec vector_boolean_indexof vector_float_pop char_dup_times genome_uniform_silence_mutation genome_uniform_crossover vector_string_remove vector_integer_contains zip_remove code_append vector_float_eq vector_integer_conj string_eq zip_leftmost code_yankdup code_rot integer_stackdepth float_max vector_boolean_set zip_append_child_fromexec zip_next vector_float_conj zip_fromexec code_dup_times float_dup_items string_take zip_left genome_if_gene_genome_instruction zip_replace_fromcode char_stackdepth return_fromchar genome_eq vector_integer_replacefirst float_stackdepth code_fromziproot integer_dup_times float_fromchar genome_uniform_combination_and_deletion float_gt boolean_dup float_fromboolean code_fromzipnode genome_rot vector_float_replacefirst vector_boolean_conj exec_dup_times vector_boolean_dup vector_integer_indexof vector_string_swap exec_eq string_emptystring string_swap integer_yank exec_while float_empty print_vector_boolean integer_min exec_swap genome_rotate integer_fromchar vector_string_yank string_stackdepth code_do*range string_replacechar char_allfromstring vector_integer_rest vector_boolean_length char_yank vector_float_empty code_fromfloat genome_parent2 return_fromcode string_pop code_dup_items float_eq integer_untag_instruction integer_dup_items vector_boolean_empty zip_insert_child_fromexec vector_string_last string_nth code_do* return_zip_pop vector_string_pop zip_rot vector_integer_nth exec_do*range vector_integer_dup_items exec_if char_shove zip_down zip_insert_left_fromexec code_frominteger vector_boolean_remove vector_integer_remove boolean_invert_first_then_and genome_flush print_string integer_fromboolean char_yankdup code_do vector_string_first boolean_frominteger string_setchar vector_integer_last char_isletter genome_gene_dup vector_integer_concat return_fromzip print_integer genome_uniform_float_mutation code_map boolean_eq float_gte return_fromfloat genome_gene_copy string_occurrencesofchar string_replacefirstchar print_float boolean_rand integer_flush float_shove string_replace char_dup float_pop char_eq vector_float_nth vector_string_conj integer_gt vector_float_dup_times return_integer_pop genome_gene_replace float_sub vector_integer_length vector_float_set vector_string_indexof vector_boolean_rest code_dup vector_boolean_shove zip_eq float_min boolean_not float_mult float_fromstring genome_unsilence code_if vector_boolean_dup_items vector_integer_pop vector_boolean_last exec_do*times zip_pop genome_gene_silent zip_rightmost float_dec vector_float_contains genome_gene_copy_range environment_new exec_do*vector_string code_nthcdr string_empty char_empty exec_pop vector_integer_set autoconstructive_boolean_rand genome_uniform_addition_and_deletion vector_float_rot string_yankdup exec_do*vector_float string_removechar code_extract vector_string_replace vector_float_first genome_parent1 return_tagspace char_flush genome_uniform_integer_mutation vector_float_occurrencesof vector_string_emptyvector float_add code_stackdepth exec_s zip_insert_right_fromexec float_dup integer_tag_char_instruction vector_string_nth zip_stackdepth vector_integer_reverse print_vector_integer char_fromfloat code_do*times code_noop zip_swap code_yank integer_lt vector_boolean_eq genome_stackdepth code_fromziplefts noop_open_paren genome_uniform_deletion vector_boolean_dup_times string_containschar string_yank char_rand zip_flush vector_boolean_rot float_swap exec_fromziprights vector_string_pushall vector_string_set vector_boolean_flush return_fromgenome exec_noop code_size vector_boolean_stackdepth vector_integer_pushall vector_boolean_reverse integer_swap string_split vector_boolean_contains string_fromboolean return_boolean_pop vector_float_dup vector_boolean_replace vector_string_dup_items integer_dup vector_boolean_nth vector_string_length genome_uniform_addition string_rest zip_insert_child_fromcode float_tan string_rot string_rand exec_yank string_parse_to_chars integer_pop integer_empty vector_float_flush genome_if_autoconstructing vector_float_yank noop_delete_prev_paren_pair print_exec zip_append_child_fromcode genome_gene_delete float_dup_times code_empty float_inc zip_right vector_float_length float_rand genome_uniform_close_mutation integer_dec string_contains return_fromboolean vector_float_concat vector_float_stackdepth exec_do*vector_boolean vector_integer_first genome_shove code_rand print_vector_float float_rot return_char_pop vector_string_contains genome_autoconstructing vector_boolean_occurrencesof string_dup_items genome_empty zip_prev genome_toggle_silent vector_string_reverse zip_dup code_cons code_member exec_stackdepth float_flush boolean_and integer_tagged_instruction vector_boolean_butlast string_length float_cos string_frominteger exec_flush vector_string_empty exec_when vector_float_swap genome_close_dec code_insert vector_boolean_pop float_div zip_insert_right_fromcode code_fromboolean vector_boolean_take code_shove environment_begin vector_float_take boolean_invert_second_then_and code_container code_nth vector_boolean_subvec float_yank zip_up vector_boolean_emptyvector vector_boolean_replacefirst genome_alternation zip_dup_times string_fromfloat vector_boolean_yankdup string_dup boolean_yankdup exec_fromzipchildren}
Starting PushGP run.
Clojush version = 3.11.1-1-SNAPSHOTHash of last Git commit = 8a64f874173fae27ed1a77827849de0fade43c2b
GitHub link = https://github.com/lspector/Clojush/commit/8a64f874173fae27ed1a77827849de0fade43c2b
age-combining-function = :average
age-mediated-parent-selection = false
alignment-deviation = 5
alternation-rate = 0.01
atom-generators = (#object[clojush.problems.software.number_io$fn__6694 0x2beee3e8 clojush.problems.software.number_io$fn__6694@2beee3e8] #object[clojush.problems.software.number_io$fn__6696 0x58bad46f clojush.problems.software.number_io$fn__6696@58bad46f] #object[clojush.instructions.tag$tag_instruction_erc$fn__1963 0x20231384 clojush.instructions.tag$tag_instruction_erc$fn__1963@20231384] #object[clojush.instructions.tag$tagged_instruction_erc$fn__1969 0x35becbd4 clojush.instructions.tag$tagged_instruction_erc$fn__1969@35becbd4] in1 in2 print_newline integer_sub integer_inc integer_yankdup integer_mult float_sin float_frominteger float_mod integer_div integer_fromfloat integer_mod integer_rot float_yankdup integer_add integer_shove integer_max integer_stackdepth float_max float_dup_items float_stackdepth integer_dup_times integer_yank integer_min integer_dup_items print_integer print_float integer_flush float_shove float_pop float_sub float_min float_mult float_dec float_add float_dup float_swap integer_swap integer_dup float_tan integer_pop float_dup_times float_inc integer_dec float_rot float_flush float_cos float_div float_yank)
autoconstructive = false
autoconstructive-boolean-rand-enrichment = 0
autoconstructive-clone-decay = :same
autoconstructive-clone-probability = 0.0
autoconstructive-decay = 0.0
autoconstructive-diffmeans-children = 10
autoconstructive-diversification-test = :gecco2016
autoconstructive-environments = false
autoconstructive-genome-instructions = :all
autoconstructive-integer-rand-enrichment = 0
autoconstructive-parent-decay = 0.0
autoconstructive-si-children = 8
autoconstructive-tag-types = [:integer :boolean :exec :float :char :string :code]
close-increment-rate = 0.2
close-parens-probabilities = [0.772 0.206 0.021 0.001]
csv-columns = [:generation :location :total-error :push-program-size]
csv-log-filename = log.csv
decimation-ratio = 1
decimation-tournament-size = 2
edn-additional-keys = [:generation :location]
edn-keys = [:uuid :parent-uuids :genetic-operators :program :genome :total-error :errors]
edn-log-filename = log.edn
epigenetic-markers = []
epsilon-lexicase-epsilon = nil
epsilon-lexicase-probability = 1
error-function = #object[clojush.problems.software.number_io$make_number_io_error_function_from_cases$the_actual_num_io_error_function__6704 0x342723a3 clojush.problems.software.number_io$make_number_io_error_function_from_cases$the_actual_num_io_error_function__6704@342723a3]
error-threshold = 1.0E-4
evalpush-limit = 200
evalpush-time-limit = 0
exit-on-success = true
final-report-simplifications = 5000
genetic-operator-probabilities = {:alternation 0.3, :uniform-mutation 0.2, [:alternation :uniform-mutation] 0.5}
improvement-discount = 0.5
individuals-for-novelty-archive-per-generation = 0
json-log-filename = log.json
json-log-program-strings = false
label = nil
lexicase-leakage = 0.1
lexicase-slippage = 0
log-fitnesses-for-all-cases = false
maintain-ancestors = false
max-error = 5000
max-generations = 200
max-genome-size-in-initial-program = 100
max-point-evaluations = 1.0E101
max-points = 800
meta-error-categories = []
normalization = :none
novelty-distance-metric = :euclidean
novelty-number-of-neighbors-k = 25
parent-reversion-probability = 1.0
parent-selection = :tournament
pop-when-tagging = true
population-size = 1000
print-ancestors-of-solution = false
print-cosmos-data = false
print-csv-logs = false
print-edn-logs = false
print-error-frequencies-by-case = false
print-errors = true
print-history = false
print-homology-data = false
print-json-logs = false
print-selection-counts = false
print-timings = true
problem-specific-initial-report = #object[clojush.problems.software.number_io$number_io_initial_report 0x4ec427 clojush.problems.software.number_io$number_io_initial_report@4ec427]
problem-specific-report = #object[clojush.problems.software.number_io$num_io_report 0xfde487b clojush.problems.software.number_io$num_io_report@fde487b]
random-screen = false
random-seed = 82 -66 -104 15 100 -60 30 61 -62 -49 -42 -125 8 -79 88 -41
random-threshold-lexicase-probability = 1
random-toggle-lexicase-probability = 1
randomly-truncated-lexicase-probability = 1
record-host = nil
replace-child-that-exceeds-size-limit-with = :random
report-simplifications = 0
return-simplified-on-failure = false
reuse-errors = true
self-mate-avoidance-limit = 0
silent-instruction-probability = 0.2
sort-meta-errors-for-lexicase = :random
tag-enrichment = 0
tag-enrichment-types = [:integer :boolean :exec :float :char :string :code]
tag-limit = 10000
top-level-pop-code = false
top-level-push-code = false
total-error-method = :sum
tournament-size = 7
track-instruction-maps = false
uniform-addition-and-deletion-rate = 0.01
uniform-addition-rate = 0.01
uniform-close-mutation-rate = 0.1
uniform-combination-and-deletion-rate = 0.01
uniform-combination-rate = 0.01
uniform-deletion-rate = 0.01
uniform-mutation-constant-tweak-rate = 0.5
uniform-mutation-float-gaussian-standard-deviation = 1.0
uniform-mutation-int-gaussian-standard-deviation = 1
uniform-mutation-rate = 0.01
uniform-mutation-string-char-change-rate = 0.1
uniform-mutation-tag-gaussian-standard-deviation = 100
uniform-silence-mutation-rate = 0.1
use-single-thread = false

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Generating initial population...
Processing generation: 0
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 0
;;******************************
;; -*- Number IO problem report - generation 0
Test total error for best: 63138.2011000001
Test mean error for best: 31.56910
;;------------------------------
Outputs of best individual on training cases:
Correct output: -54.078495011  | Program output: -97.078495011 
Correct output: 13.1534720339  | Program output: -4.8465279661 
Correct output: 41.2049141439  | Program output: 24.47472231   
Correct output: -6.0487858971  | Program output: 8.9512141029  
Correct output: -75.9491370053 | Program output: -35.9491370053
Correct output: 49.8479113478  | Program output: -32.1520886522
Correct output: -43.0947106158 | Program output: 24.47472231   
Correct output: -6.035421      | Program output: -2.035421     
Correct output: -64.6496412859 | Program output: -16.6496412859
Correct output: -8.4475981317  | Program output: -95.4475981317
Correct output: -61.9056292771 | Program output: -84.9056292771
Correct output: -100.2670640218 | Program output: -15.2670640218
Correct output: 33.5793532538  | Program output: 24.47472231   
Correct output: -71.5665679812 | Program output: -36.5665679812
Correct output: -150.2787840572 | Program output: -71.2787840572
Correct output: -33.4710147358 | Program output: -38.4710147358
Correct output: 12.2165113619  | Program output: 24.47472231   
Correct output: 16.3988550752  | Program output: 23.3988550752 
Correct output: -103.483665155 | Program output: -79.483665155 
Correct output: -16.1113007238 | Program output: -69.1113007238
Correct output: 1.5190821923   | Program output: -23.4809178077
Correct output: 56.222608134   | Program output: 24.47472231   
Correct output: -100.5567747653 | Program output: -71.5567747653
Correct output: 20.8692780643  | Program output: 24.47472231   
Correct output: 137.7657204956 | Program output: 24.47472231   
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_swap} {:instruction integer_min} {:instruction tagged_448} {:instruction float_yankdup} {:instruction float_div} {:instruction integer_dec} {:instruction float_swap} {:instruction 23.47472230998136} {:instruction integer_min} {:instruction integer_mod} {:instruction float_swap} {:instruction float_min} {:instruction tagged_372} {:instruction integer_dup} {:instruction in1} {:instruction float_min} {:instruction float_inc} {:instruction integer_div} {:instruction float_min} {:instruction print_float} {:instruction integer_rot} {:instruction integer_flush} {:instruction float_tan} {:instruction in2} {:instruction integer_sub} {:instruction float_add})
Best program: (float_swap integer_min tagged_448 float_yankdup float_div integer_dec float_swap 23.47472230998136 integer_min integer_mod float_swap float_min tagged_372 integer_dup in1 float_min float_inc integer_div float_min print_float integer_rot integer_flush float_tan in2 integer_sub float_add)
Errors: [43.0 2 18.0 12 16.7302 10 15.0 12 40.0 1 82.0 13 67.5694 9 4.0 1 48.0 2 87.0 2 23.0 2 85.0 2 9.1046 9 35.0 2 79.0 3 5.0 1 12.2582 10 7.0 2 24.0 3 53.0 2 25.0 13 31.7479 10 29.0 3 3.6054 10 113.291 11]
Total: 1103.3066999999999
Mean: 22.066133
Genome size: 26
Size: 27
Percent parens: 0.037
--- Population Statistics ---
Average total errors in population: 17530.295473000002
Median total errors in population: 25334.0
Error averages by case: (688.9561702999981 12.244 672.4142645000002 12.982 684.6552280000013 12.278 677.3416713999995 12.901 693.6017455 13.029 687.5253048000008 13.186 694.2257666000002 13.564 678.9541667000011 9.084 691.6416763000004 13.134 686.0906531999993 12.352 687.2680901000023 13.092 703.8630894000023 13.804 683.2300669000008 12.538 692.2509731000015 13.216 717.7692720999969 13.825 675.1152351000012 13.034 685.8352269999986 12.44 678.7389203999999 12.387 700.4742866999987 13.114 682.2198101999992 13.143 672.7242038000002 12.273 679.0104530999986 11.589 701.7094914000018 14.03 689.6671865000015 12.299 706.3265198999986 13.148)
Error minima by case: (2.9215 2 0.0117 8 0.4813 2 1.0179 7 0.0645 1 0.4701 9 0.0947 9 0.0354 1 0.33 2 0.4239 2 2.0944 2 2.7416 2 0.2612 2 0.4334 2 3.2584 3 0.7485 1 0.9253 2 3.2571 2 9.0226 2 4.8887 2 0.0019 7 0.2226 2 6.0957 3 1.4779 2 6.0 2)
Average genome size in population (length): 49.149
Average program size in population (points): 50.149
Average percent parens in population: 0.047
Minimum age in population: 0.0
Maximum age in population: 0.0
Average age in population: 0.0
Median age in population: 0.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 2
Genome diversity (% unique Plush genomes):	 0.999
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 2
Syntactic diversity (% unique Push programs):	 0.999
Total error diversity:				 0.332
Error (vector) diversity:			 0.359
Behavioral diversity:				 0.377
--- Run Statistics ---
Number of program evaluations used so far: 1000
Number of point (instruction) evaluations so far: 1232480
--- Timings ---
Current time: 1529614986785 milliseconds
Total Time:           3.4 seconds
Initialization:       0.1 seconds,  3.5%
Reproduction:         0.6 seconds, 16.7%
Fitness Testing:      2.7 seconds, 79.8%
Report:               0.0 seconds,  0.0%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 0
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 1
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 1
;;******************************
;; -*- Number IO problem report - generation 1
Test total error for best: 63138.2011000001
Test mean error for best: 31.56910
;;------------------------------
Outputs of best individual on training cases:
Correct output: -54.078495011  | Program output: -97.078495011 
Correct output: 13.1534720339  | Program output: -4.8465279661 
Correct output: 41.2049141439  | Program output: 24.47472231   
Correct output: -6.0487858971  | Program output: 8.9512141029  
Correct output: -75.9491370053 | Program output: -35.9491370053
Correct output: 49.8479113478  | Program output: -32.1520886522
Correct output: -43.0947106158 | Program output: 24.47472231   
Correct output: -6.035421      | Program output: -2.035421     
Correct output: -64.6496412859 | Program output: -16.6496412859
Correct output: -8.4475981317  | Program output: -95.4475981317
Correct output: -61.9056292771 | Program output: -84.9056292771
Correct output: -100.2670640218 | Program output: -15.2670640218
Correct output: 33.5793532538  | Program output: 24.47472231   
Correct output: -71.5665679812 | Program output: -36.5665679812
Correct output: -150.2787840572 | Program output: -71.2787840572
Correct output: -33.4710147358 | Program output: -38.4710147358
Correct output: 12.2165113619  | Program output: 24.47472231   
Correct output: 16.3988550752  | Program output: 23.3988550752 
Correct output: -103.483665155 | Program output: -79.483665155 
Correct output: -16.1113007238 | Program output: -69.1113007238
Correct output: 1.5190821923   | Program output: -23.4809178077
Correct output: 56.222608134   | Program output: 24.47472231   
Correct output: -100.5567747653 | Program output: -71.5567747653
Correct output: 20.8692780643  | Program output: 24.47472231   
Correct output: 137.7657204956 | Program output: 24.47472231   
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_swap} {:instruction integer_min} {:instruction tagged_448} {:instruction float_yankdup} {:instruction float_div} {:instruction integer_dec} {:instruction float_swap} {:instruction 23.47472230998136} {:instruction integer_min} {:instruction integer_mod} {:instruction float_swap} {:instruction float_min} {:instruction tagged_372} {:instruction integer_dup} {:instruction in1} {:instruction float_min} {:instruction float_inc} {:instruction integer_div} {:instruction float_min} {:instruction print_float} {:instruction integer_rot} {:instruction integer_flush} {:instruction float_tan} {:instruction in2} {:instruction integer_sub} {:instruction float_add})
Best program: (float_swap integer_min tagged_448 float_yankdup float_div integer_dec float_swap 23.47472230998136 integer_min integer_mod float_swap float_min tagged_372 integer_dup in1 float_min float_inc integer_div float_min print_float integer_rot integer_flush float_tan in2 integer_sub float_add)
Errors: [43.0 2 18.0 12 16.7302 10 15.0 12 40.0 1 82.0 13 67.5694 9 4.0 1 48.0 2 87.0 2 23.0 2 85.0 2 9.1046 9 35.0 2 79.0 3 5.0 1 12.2582 10 7.0 2 24.0 3 53.0 2 25.0 13 31.7479 10 29.0 3 3.6054 10 113.291 11]
Total: 1103.3066999999999
Mean: 22.066133
Genome size: 26
Size: 27
Percent parens: 0.037
--- Population Statistics ---
Average total errors in population: 5749.185613799995
Median total errors in population: 1557.5927500000003
Error averages by case: (224.16461500000068 9.347 186.70442779999973 12.078 210.19759360000089 9.431 190.08085219999975 11.973 228.68590789999956 9.918 226.9764133999997 12.577 232.06920209999964 12.283 187.7336993999989 6.894 223.74871690000091 10.085 224.2716795000016 9.49 219.04320349999946 10.047 247.6702139999992 10.375 206.83807099999905 9.871 224.8331305999993 10.285 274.167317599999 10.499 194.19197139999943 9.912 219.04255820000103 9.697 193.1905577 9.613 241.06453900000136 10.026 211.766003299999 10.165 189.33171819999998 11.722 206.46011120000026 9.059 240.3987605999989 10.962 226.85366689999904 9.491 263.64768279999845 10.253)
Error minima by case: (3.0785 2 0.0117 8 0.4813 2 1.0179 7 1.9491 1 0.4373 9 0.0947 9 0.0354 1 0.33 2 0.4239 2 2.0944 2 5.806 2 0.2612 2 0.4334 2 4.9116 3 0.7485 1 0.9253 2 3.2571 2 9.0226 2 0.8887 2 0.0019 7 0.2578 2 6.0957 3 0.8693 2 6.0 2)
Average genome size in population (length): 55.23
Average program size in population (points): 56.23
Average percent parens in population: 0.024
Minimum age in population: 1.0
Maximum age in population: 2.0
Average age in population: 1.475
Median age in population: 1.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 8
Genome diversity (% unique Plush genomes):	 0.757
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 8
Syntactic diversity (% unique Push programs):	 0.757
Total error diversity:				 0.285
Error (vector) diversity:			 0.296
Behavioral diversity:				 0.315
--- Run Statistics ---
Number of program evaluations used so far: 2000
Number of point (instruction) evaluations so far: 2617715
--- Timings ---
Current time: 1529614991799 milliseconds
Total Time:           8.7 seconds
Initialization:       0.1 seconds,  1.3%
Reproduction:         3.5 seconds, 40.8%
Fitness Testing:      4.4 seconds, 51.2%
Report:               0.6 seconds,  6.7%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 1
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 2
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 2
;;******************************
;; -*- Number IO problem report - generation 2
Test total error for best: 63326.7469000001
Test mean error for best: 31.66337
;;------------------------------
Outputs of best individual on training cases:
Correct output: -54.078495011  | Program output: -97.078495011 
Correct output: 13.1534720339  | Program output: -4.8465279661 
Correct output: 41.2049141439  | Program output: 23.47472231   
Correct output: -6.0487858971  | Program output: 8.9512141029  
Correct output: -75.9491370053 | Program output: -35.9491370053
Correct output: 49.8479113478  | Program output: -32.1520886522
Correct output: -43.0947106158 | Program output: 23.47472231   
Correct output: -6.035421      | Program output: -2.035421     
Correct output: -64.6496412859 | Program output: -16.6496412859
Correct output: -8.4475981317  | Program output: -95.4475981317
Correct output: -61.9056292771 | Program output: -84.9056292771
Correct output: -100.2670640218 | Program output: -15.2670640218
Correct output: 33.5793532538  | Program output: 23.47472231   
Correct output: -71.5665679812 | Program output: -36.5665679812
Correct output: -150.2787840572 | Program output: -71.2787840572
Correct output: -33.4710147358 | Program output: -38.4710147358
Correct output: 12.2165113619  | Program output: 23.47472231   
Correct output: 16.3988550752  | Program output: 23.3988550752 
Correct output: -103.483665155 | Program output: -79.483665155 
Correct output: -16.1113007238 | Program output: -69.1113007238
Correct output: 1.5190821923   | Program output: -23.4809178077
Correct output: 56.222608134   | Program output: 23.47472231   
Correct output: -100.5567747653 | Program output: -71.5567747653
Correct output: 20.8692780643  | Program output: 23.47472231   
Correct output: 137.7657204956 | Program output: 23.47472231   
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_swap} {:instruction integer_min} {:instruction tagged_448} {:instruction float_yankdup} {:instruction float_div} {:instruction integer_dec} {:instruction float_swap} {:instruction 23.47472230998136} {:instruction integer_min} {:instruction integer_mod} {:instruction float_swap} {:instruction float_min} {:instruction tagged_372} {:instruction integer_dup} {:instruction in1} {:instruction integer_dec} {:instruction float_inc} {:instruction integer_div} {:instruction float_min} {:instruction print_float} {:instruction integer_rot} {:instruction integer_flush} {:instruction float_tan} {:instruction in2} {:instruction integer_sub} {:instruction float_add})
Best program: (float_swap integer_min tagged_448 float_yankdup float_div integer_dec float_swap 23.47472230998136 integer_min integer_mod float_swap float_min tagged_372 integer_dup in1 integer_dec float_inc integer_div float_min print_float integer_rot integer_flush float_tan in2 integer_sub float_add)
Errors: [43.0 2 18.0 12 17.7302 10 15.0 12 40.0 1 82.0 13 66.5694 9 4.0 1 48.0 2 87.0 2 23.0 2 85.0 2 10.1046 8 35.0 2 79.0 3 5.0 1 11.2582 10 7.0 2 24.0 3 53.0 2 25.0 13 32.7479 10 29.0 3 2.6054 10 114.291 10]
Total: 1102.3066999999999
Mean: 22.046135
Genome size: 26
Size: 27
Percent parens: 0.037
--- Population Statistics ---
Average total errors in population: 4477.726866699999
Median total errors in population: 1198.0
Error averages by case: (176.29358600000018 4.91 149.63218980000008 12.54 150.65886650000002 5.349 140.5100026 12.361 171.3719428999999 5.026 201.42811120000022 13.572 206.82789320000023 12.314 139.94362569999967 3.298 175.70874880000025 5.138 208.72264940000034 4.944 160.3353828999999 5.173 204.72712109999975 5.287 150.28220539999998 5.453 167.49477009999995 5.206 205.75621840000002 6.01 142.49798990000008 4.535 187.43508460000012 5.442 139.5226114 5.122 163.24299430000008 5.305 180.98961909999986 5.247 156.0687986999999 12.976 157.22159129999986 5.194 166.3643856 6.185 194.24855780000001 5.394 212.73191999999966 5.729)
Error minima by case: (11.7463 2 3.8465 7 11.7951 2 1.9009 8 0.6028 1 10.3312 9 3.8091 9 1.0354 1 1.1752 2 2.6956 2 3.9192 2 14.2671 2 4.5794 2 3.7797 2 12.1752 2 3.827 1 1.8248 2 1.04 2 22.0 2 0.8887 2 0.4809 8 16.7059 2 25.2105 2 2.6054 2 42.7657 2)
Average genome size in population (length): 46.384
Average program size in population (points): 47.384
Average percent parens in population: 0.029
Minimum age in population: 2.0
Maximum age in population: 4.0
Average age in population: 2.984
Median age in population: 3.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 30
Genome diversity (% unique Plush genomes):	 0.631
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 30
Syntactic diversity (% unique Push programs):	 0.631
Total error diversity:				 0.106
Error (vector) diversity:			 0.111
Behavioral diversity:				 0.122
--- Run Statistics ---
Number of program evaluations used so far: 3000
Number of point (instruction) evaluations so far: 3779739
--- Timings ---
Current time: 1529614994939 milliseconds
Total Time:          11.7 seconds
Initialization:       0.1 seconds,  1.0%
Reproduction:         4.7 seconds, 40.3%
Fitness Testing:      6.0 seconds, 51.1%
Report:               0.9 seconds,  7.6%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 2
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 3
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 3
;;******************************
;; -*- Number IO problem report - generation 3
Test total error for best: 63350.0063000001
Test mean error for best: 31.67500
;;------------------------------
Outputs of best individual on training cases:
Correct output: -54.078495011  | Program output: -98.078495011 
Correct output: 13.1534720339  | Program output: -5.8465279661 
Correct output: 41.2049141439  | Program output: 23.47472231   
Correct output: -6.0487858971  | Program output: 7.9512141029  
Correct output: -75.9491370053 | Program output: -36.9491370053
Correct output: 49.8479113478  | Program output: -33.1520886522
Correct output: -43.0947106158 | Program output: 23.47472231   
Correct output: -6.035421      | Program output: -3.035421     
Correct output: -64.6496412859 | Program output: -17.6496412859
Correct output: -8.4475981317  | Program output: -96.4475981317
Correct output: -61.9056292771 | Program output: -85.9056292771
Correct output: -100.2670640218 | Program output: -16.2670640218
Correct output: 33.5793532538  | Program output: 23.47472231   
Correct output: -71.5665679812 | Program output: -37.5665679812
Correct output: -150.2787840572 | Program output: -72.2787840572
Correct output: -33.4710147358 | Program output: -39.4710147358
Correct output: 12.2165113619  | Program output: 23.47472231   
Correct output: 16.3988550752  | Program output: 22.3988550752 
Correct output: -103.483665155 | Program output: -80.483665155 
Correct output: -16.1113007238 | Program output: -70.1113007238
Correct output: 1.5190821923   | Program output: -24.4809178077
Correct output: 56.222608134   | Program output: 23.47472231   
Correct output: -100.5567747653 | Program output: -72.5567747653
Correct output: 20.8692780643  | Program output: 23.47472231   
Correct output: 137.7657204956 | Program output: 23.47472231   
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_swap} {:instruction integer_min} {:instruction tagged_448} {:instruction float_yankdup} {:instruction float_div} {:instruction integer_dec} {:instruction float_swap} {:instruction 23.47472230998136} {:instruction integer_min} {:instruction integer_mod} {:instruction float_swap} {:instruction float_min} {:instruction tagged_372} {:instruction integer_dup} {:instruction in1} {:instruction float_min} {:instruction -5} {:instruction integer_div} {:instruction float_min} {:instruction print_float} {:instruction integer_rot} {:instruction integer_flush} {:instruction float_tan} {:instruction in2} {:instruction integer_sub} {:instruction float_add})
Best program: (float_swap integer_min tagged_448 float_yankdup float_div integer_dec float_swap 23.47472230998136 integer_min integer_mod float_swap float_min tagged_372 integer_dup in1 float_min -5 integer_div float_min print_float integer_rot integer_flush float_tan in2 integer_sub float_add)
Errors: [44.0 2 19.0 12 17.7302 10 14.0 12 39.0 2 83.0 13 66.5694 9 3.0 1 47.0 2 88.0 2 24.0 2 84.0 2 10.1046 8 34.0 2 78.0 3 6.0 1 11.2582 10 6.0 2 23.0 2 54.0 2 26.0 13 32.7479 10 28.0 3 2.6054 10 114.291 10]
Total: 1100.3066999999999
Mean: 22.006134
Genome size: 26
Size: 27
Percent parens: 0.037
--- Population Statistics ---
Average total errors in population: 3681.8750491999995
Median total errors in population: 1172.0
Error averages by case: (145.62410029999998 3.301 121.95329919999999 12.271 114.59559250000042 5.12 113.6171142 11.967 140.49353319999997 3.127 179.6517948 13.248 176.79905389999985 11.617 106.85027049999998 1.962 146.79828849999998 3.359 183.79615360000008 3.314 128.1036829 3.385 179.8767791 3.418 113.39244060000038 4.864 136.02549830000004 3.359 175.8536243 4.331 112.8731577 2.789 146.56240869999974 5.142 106.9419936 3.491 126.7425548 3.885 153.9382186 3.408 128.68027270000002 12.839 128.68687640000027 5.062 131.1094582 4.347 149.8828171000001 5.125 192.5630654999995 5.732)
Error minima by case: (42.0 2 10.3213 7 5.7815 2 4.2034 2 37.0 1 14.4245 8 38.031 3 1.0 1 45.0 2 7.4493 1 22.0 2 82.0 2 1.8441 2 32.0 2 76.0 2 4.0 1 10.4039 2 4.0 2 21.0 2 14.5666 2 0.5191 8 20.7992 2 26.0 2 2.6054 1 93.0 2)
Average genome size in population (length): 38.223
Average program size in population (points): 39.223
Average percent parens in population: 0.036
Minimum age in population: 3.0
Maximum age in population: 6.0
Average age in population: 4.44675
Median age in population: 4.5
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 132
Genome diversity (% unique Plush genomes):	 0.499
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 132
Syntactic diversity (% unique Push programs):	 0.499
Total error diversity:				 0.044
Error (vector) diversity:			 0.048
Behavioral diversity:				 0.05
--- Run Statistics ---
Number of program evaluations used so far: 4000
Number of point (instruction) evaluations so far: 4736014
--- Timings ---
Current time: 1529614998175 milliseconds
Total Time:          15.0 seconds
Initialization:       0.1 seconds,  0.8%
Reproduction:         6.1 seconds, 40.7%
Fitness Testing:      7.5 seconds, 50.1%
Report:               1.3 seconds,  8.5%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 3
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 4
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 4
;;******************************
;; -*- Number IO problem report - generation 4
Test total error for best: 63350.0063000001
Test mean error for best: 31.67500
;;------------------------------
Outputs of best individual on training cases:
Correct output: -54.078495011  | Program output: -98.078495011 
Correct output: 13.1534720339  | Program output: -5.8465279661 
Correct output: 41.2049141439  | Program output: 23.47472231   
Correct output: -6.0487858971  | Program output: 7.9512141029  
Correct output: -75.9491370053 | Program output: -36.9491370053
Correct output: 49.8479113478  | Program output: -33.1520886522
Correct output: -43.0947106158 | Program output: 23.47472231   
Correct output: -6.035421      | Program output: -3.035421     
Correct output: -64.6496412859 | Program output: -17.6496412859
Correct output: -8.4475981317  | Program output: -96.4475981317
Correct output: -61.9056292771 | Program output: -85.9056292771
Correct output: -100.2670640218 | Program output: -16.2670640218
Correct output: 33.5793532538  | Program output: 23.47472231   
Correct output: -71.5665679812 | Program output: -37.5665679812
Correct output: -150.2787840572 | Program output: -72.2787840572
Correct output: -33.4710147358 | Program output: -39.4710147358
Correct output: 12.2165113619  | Program output: 23.47472231   
Correct output: 16.3988550752  | Program output: 22.3988550752 
Correct output: -103.483665155 | Program output: -80.483665155 
Correct output: -16.1113007238 | Program output: -70.1113007238
Correct output: 1.5190821923   | Program output: -24.4809178077
Correct output: 56.222608134   | Program output: 23.47472231   
Correct output: -100.5567747653 | Program output: -72.5567747653
Correct output: 20.8692780643  | Program output: 23.47472231   
Correct output: 137.7657204956 | Program output: 23.47472231   
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_swap} {:instruction integer_min} {:instruction tagged_448} {:instruction float_yankdup} {:instruction float_div} {:instruction integer_dec} {:instruction float_swap} {:instruction 23.47472230998136} {:instruction integer_min} {:instruction integer_mod} {:instruction float_swap} {:instruction float_min} {:instruction tagged_372} {:instruction integer_dup} {:instruction in1} {:instruction float_min} {:instruction -5} {:instruction integer_div} {:instruction float_min} {:instruction print_float} {:instruction integer_rot} {:instruction integer_flush} {:instruction float_tan} {:instruction in2} {:instruction integer_sub} {:instruction float_add})
Best program: (float_swap integer_min tagged_448 float_yankdup float_div integer_dec float_swap 23.47472230998136 integer_min integer_mod float_swap float_min tagged_372 integer_dup in1 float_min -5 integer_div float_min print_float integer_rot integer_flush float_tan in2 integer_sub float_add)
Errors: [44.0 2 19.0 12 17.7302 10 14.0 12 39.0 2 83.0 13 66.5694 9 3.0 1 47.0 2 88.0 2 24.0 2 84.0 2 10.1046 8 34.0 2 78.0 3 6.0 1 11.2582 10 6.0 2 23.0 2 54.0 2 26.0 13 32.7479 10 28.0 3 2.6054 10 114.291 10]
Total: 1100.3066999999999
Mean: 22.006134
Genome size: 26
Size: 27
Percent parens: 0.037
--- Population Statistics ---
Average total errors in population: 2425.5957211999907
Median total errors in population: 1103.3066999999999
Error averages by case: (96.39301419999997 2.756 71.38131600000004 12.042 68.46182699999997 8.853 66.38452020000003 11.925 91.42488399999999 2.077 131.66940770000002 13.045 120.33079509999791 9.817 56.0657107 1.6 98.18541470000001 2.801 136.35667430000007 2.764 78.00840509999999 2.833 133.06966250000002 2.878 62.665223399999434 7.974 86.73645049999998 2.842 129.20244260000007 3.787 60.81987949999997 2.038 72.98867559999879 8.848 59.00539830000007 3.112 77.27231520000004 3.752 105.00680369999999 2.854 78.41176080000002 12.862 84.32054080000064 8.825 81.85754569999997 3.777 67.65197260000026 8.845 159.26708099999854 9.751)
Error minima by case: (18.5253 2 0.7176 7 11.0 2 1.4191 9 20.402 1 24.3732 9 35.6268 9 1.0 1 31.7015 2 0.9797 1 0.4747 2 3.9159 2 8.1046 2 24.7846 2 53.9276 2 4.0 1 0.2193 2 1.3015 2 7.1325 2 8.6434 2 0.5224 9 25.0 2 4.2056 2 2.4636 1 92.0 2)
Average genome size in population (length): 28.719
Average program size in population (points): 29.719
Average percent parens in population: 0.037
Minimum age in population: 4.0
Maximum age in population: 7.5
Average age in population: 5.9375
Median age in population: 6.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 340
Genome diversity (% unique Plush genomes):	 0.395
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 340
Syntactic diversity (% unique Push programs):	 0.395
Total error diversity:				 0.038
Error (vector) diversity:			 0.04
Behavioral diversity:				 0.04
--- Run Statistics ---
Number of program evaluations used so far: 5000
Number of point (instruction) evaluations so far: 5454064
--- Timings ---
Current time: 1529615001225 milliseconds
Total Time:          18.2 seconds
Initialization:       0.1 seconds,  0.6%
Reproduction:         7.4 seconds, 40.6%
Fitness Testing:      9.0 seconds, 49.7%
Report:               1.6 seconds,  9.0%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 4
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 5
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 5
;;******************************
;; -*- Number IO problem report - generation 5
Test total error for best: 63364.9899000001
Test mean error for best: 31.68249
;;------------------------------
Outputs of best individual on training cases:
Correct output: -54.078495011  | Program output: -99.078495011 
Correct output: 13.1534720339  | Program output: -6.8465279661 
Correct output: 41.2049141439  | Program output: 23.47472231   
Correct output: -6.0487858971  | Program output: 6.9512141029  
Correct output: -75.9491370053 | Program output: -37.9491370053
Correct output: 49.8479113478  | Program output: -34.1520886522
Correct output: -43.0947106158 | Program output: 23.47472231   
Correct output: -6.035421      | Program output: -4.035421     
Correct output: -64.6496412859 | Program output: -18.6496412859
Correct output: -8.4475981317  | Program output: -97.4475981317
Correct output: -61.9056292771 | Program output: -86.9056292771
Correct output: -100.2670640218 | Program output: -17.2670640218
Correct output: 33.5793532538  | Program output: 23.47472231   
Correct output: -71.5665679812 | Program output: -38.5665679812
Correct output: -150.2787840572 | Program output: -73.2787840572
Correct output: -33.4710147358 | Program output: -40.4710147358
Correct output: 12.2165113619  | Program output: 23.47472231   
Correct output: 16.3988550752  | Program output: 21.3988550752 
Correct output: -103.483665155 | Program output: -81.483665155 
Correct output: -16.1113007238 | Program output: -71.1113007238
Correct output: 1.5190821923   | Program output: -25.4809178077
Correct output: 56.222608134   | Program output: 23.47472231   
Correct output: -100.5567747653 | Program output: -73.5567747653
Correct output: 20.8692780643  | Program output: 23.47472231   
Correct output: 137.7657204956 | Program output: 23.47472231   
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_rot} {:instruction integer_pop} {:instruction in1} {:instruction integer_mod} {:instruction float_dec} {:instruction integer_inc} {:instruction integer_sub} {:instruction float_mult} {:instruction 23.47472230998136} {:instruction integer_min} {:instruction integer_mod} {:instruction float_swap} {:instruction float_min} {:instruction tagged_372} {:instruction integer_dup} {:instruction in1} {:instruction float_min} {:instruction float_inc} {:instruction float_dec} {:instruction float_min} {:instruction print_float} {:instruction integer_rot} {:instruction integer_flush} {:instruction float_tan} {:instruction in2} {:instruction integer_sub} {:instruction float_add})
Best program: (integer_rot integer_pop in1 integer_mod float_dec integer_inc integer_sub float_mult 23.47472230998136 integer_min integer_mod float_swap float_min tagged_372 integer_dup in1 float_min float_inc float_dec float_min print_float integer_rot integer_flush float_tan in2 integer_sub float_add)
Errors: [45.0 2 20.0 12 17.7302 10 13.0 11 38.0 2 84.0 13 66.5694 9 2.0 1 46.0 2 89.0 2 25.0 2 83.0 2 10.1046 8 33.0 2 77.0 3 7.0 2 11.2582 10 5.0 2 22.0 3 55.0 2 27.0 12 32.7479 10 27.0 3 2.6054 10 114.291 10]
Total: 1098.3066999999999
Mean: 21.966133
Genome size: 27
Size: 28
Percent parens: 0.036
--- Population Statistics ---
Average total errors in population: 1868.733363599981
Median total errors in population: 1103.3066999999999
Error averages by case: (73.42111839999997 2.473 48.38672910000002 11.959 47.665197700000185 9.983 45.651440400000006 11.977 70.86248169999998 1.709 109.43146020000003 12.961 96.3665702999982 9.225 35.29650759999999 1.404 78.2284917 2.525 114.26450040000003 2.471 54.597662299999996 2.533 114.05383980000006 2.599 40.405375899999314 8.684 66.02982979999996 2.573 109.36007380000005 3.546 36.981917799999984 1.58 43.32600929999936 9.985 37.76522850000002 2.587 56.22917180000002 3.418 82.15177439999998 2.554 55.23019700000002 12.928 62.13713400000048 9.96 60.91563379999997 3.527 35.277766400000296 9.984 140.93425149999823 10.618)
Error minima by case: (20.5253 2 4.4747 7 12.0 2 5.0526 9 38.0 1 25.3732 8 42.0985 9 0.3018 1 46.0 2 8.4514 2 0.5253 2 83.0 2 6.6792 2 33.0 2 77.0 2 4.0 1 9.2165 2 5.0 2 22.0 2 16.1151 2 1.5153 9 3.5253 2 27.0 2 1.8154 2 70.5253 2)
Average genome size in population (length): 26.074
Average program size in population (points): 27.074
Average percent parens in population: 0.037
Minimum age in population: 5.0
Maximum age in population: 9.125
Average age in population: 7.5080625
Median age in population: 7.5
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 209
Genome diversity (% unique Plush genomes):	 0.419
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 209
Syntactic diversity (% unique Push programs):	 0.419
Total error diversity:				 0.027
Error (vector) diversity:			 0.03
Behavioral diversity:				 0.03
--- Run Statistics ---
Number of program evaluations used so far: 6000
Number of point (instruction) evaluations so far: 6105964
--- Timings ---
Current time: 1529615003950 milliseconds
Total Time:          20.8 seconds
Initialization:       0.1 seconds,  0.6%
Reproduction:         8.5 seconds, 40.7%
Fitness Testing:     10.3 seconds, 49.7%
Report:               1.9 seconds,  9.1%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 5
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 6
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 6
;;******************************
;; -*- Number IO problem report - generation 6
Test total error for best: 63364.9899000001
Test mean error for best: 31.68249
;;------------------------------
Outputs of best individual on training cases:
Correct output: -54.078495011  | Program output: -99.078495011 
Correct output: 13.1534720339  | Program output: -6.8465279661 
Correct output: 41.2049141439  | Program output: 23.47472231   
Correct output: -6.0487858971  | Program output: 6.9512141029  
Correct output: -75.9491370053 | Program output: -37.9491370053
Correct output: 49.8479113478  | Program output: -34.1520886522
Correct output: -43.0947106158 | Program output: 23.47472231   
Correct output: -6.035421      | Program output: -4.035421     
Correct output: -64.6496412859 | Program output: -18.6496412859
Correct output: -8.4475981317  | Program output: -97.4475981317
Correct output: -61.9056292771 | Program output: -86.9056292771
Correct output: -100.2670640218 | Program output: -17.2670640218
Correct output: 33.5793532538  | Program output: 23.47472231   
Correct output: -71.5665679812 | Program output: -38.5665679812
Correct output: -150.2787840572 | Program output: -73.2787840572
Correct output: -33.4710147358 | Program output: -40.4710147358
Correct output: 12.2165113619  | Program output: 23.47472231   
Correct output: 16.3988550752  | Program output: 21.3988550752 
Correct output: -103.483665155 | Program output: -81.483665155 
Correct output: -16.1113007238 | Program output: -71.1113007238
Correct output: 1.5190821923   | Program output: -25.4809178077
Correct output: 56.222608134   | Program output: 23.47472231   
Correct output: -100.5567747653 | Program output: -73.5567747653
Correct output: 20.8692780643  | Program output: 23.47472231   
Correct output: 137.7657204956 | Program output: 23.47472231   
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_rot} {:instruction integer_pop} {:instruction in1} {:instruction integer_mod} {:instruction float_dec} {:instruction integer_inc} {:instruction integer_sub} {:instruction float_mult} {:instruction 23.47472230998136} {:instruction integer_min} {:instruction integer_mod} {:instruction float_swap} {:instruction float_min} {:instruction tagged_372} {:instruction integer_dup} {:instruction in1} {:instruction float_min} {:instruction float_inc} {:instruction float_dec} {:instruction float_min} {:instruction print_float} {:instruction integer_rot} {:instruction integer_flush} {:instruction float_tan} {:instruction in2} {:instruction integer_sub} {:instruction float_add})
Best program: (integer_rot integer_pop in1 integer_mod float_dec integer_inc integer_sub float_mult 23.47472230998136 integer_min integer_mod float_swap float_min tagged_372 integer_dup in1 float_min float_inc float_dec float_min print_float integer_rot integer_flush float_tan in2 integer_sub float_add)
Errors: [45.0 2 20.0 12 17.7302 10 13.0 11 38.0 2 84.0 13 66.5694 9 2.0 1 46.0 2 89.0 2 25.0 2 83.0 2 10.1046 8 33.0 2 77.0 3 7.0 2 11.2582 10 5.0 2 22.0 3 55.0 2 27.0 12 32.7479 10 27.0 3 2.6054 10 114.291 10]
Total: 1098.3066999999999
Mean: 21.966133
Genome size: 27
Size: 28
Percent parens: 0.036
--- Population Statistics ---
Average total errors in population: 1897.3450659999817
Median total errors in population: 1102.3066999999999
Error averages by case: (73.799433 2.491 47.92729640000002 12.024 50.04914339999994 9.943 47.25986980000002 12.036 73.0453979 2.093 109.74525260000004 13.058 97.82324459999813 9.259 36.8975327 1.413 79.96495660000001 2.533 114.73244590000002 2.487 54.9481498 2.532 115.61261410000003 2.578 42.830388899999484 8.116 68.24600509999998 2.568 111.59923870000003 3.543 37.20099059999999 1.572 44.890101499999346 9.947 39.279960900000006 2.577 58.62513180000002 3.016 82.57805619999998 2.554 55.21928040000001 13.009 61.632814200000404 9.936 63.304520699999976 3.537 36.874127900000296 9.936 140.46811229999818 10.033)
Error minima by case: (42.0 2 0.7176 7 13.0 2 9.0011 9 38.0 1 25.3732 10 43.5952 8 1.6982 1 46.0 2 19.8834 2 22.0 2 83.0 2 8.1046 2 33.0 2 77.0 2 4.0 1 0.2193 2 3.963 2 22.0 2 27.5471 2 9.9167 10 26.0 2 27.0 2 1.9572 2 93.0 2)
Average genome size in population (length): 26.171
Average program size in population (points): 27.171
Average percent parens in population: 0.037
Minimum age in population: 7.0625
Maximum age in population: 10.8125
Average age in population: 9.013875
Median age in population: 9.0625
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 128
Genome diversity (% unique Plush genomes):	 0.415
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 128
Syntactic diversity (% unique Push programs):	 0.415
Total error diversity:				 0.03
Error (vector) diversity:			 0.032
Behavioral diversity:				 0.032
--- Run Statistics ---
Number of program evaluations used so far: 7000
Number of point (instruction) evaluations so far: 6760239
--- Timings ---
Current time: 1529615006872 milliseconds
Total Time:          23.7 seconds
Initialization:       0.1 seconds,  0.5%
Reproduction:         9.7 seconds, 40.8%
Fitness Testing:     11.7 seconds, 49.4%
Report:               2.2 seconds,  9.3%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 6
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 7
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 7
;;******************************
;; -*- Number IO problem report - generation 7
Test total error for best: 63364.9899000001
Test mean error for best: 31.68249
;;------------------------------
Outputs of best individual on training cases:
Correct output: -54.078495011  | Program output: -99.078495011 
Correct output: 13.1534720339  | Program output: -6.8465279661 
Correct output: 41.2049141439  | Program output: 23.47472231   
Correct output: -6.0487858971  | Program output: 6.9512141029  
Correct output: -75.9491370053 | Program output: -37.9491370053
Correct output: 49.8479113478  | Program output: -34.1520886522
Correct output: -43.0947106158 | Program output: 23.47472231   
Correct output: -6.035421      | Program output: -4.035421     
Correct output: -64.6496412859 | Program output: -18.6496412859
Correct output: -8.4475981317  | Program output: -97.4475981317
Correct output: -61.9056292771 | Program output: -86.9056292771
Correct output: -100.2670640218 | Program output: -17.2670640218
Correct output: 33.5793532538  | Program output: 23.47472231   
Correct output: -71.5665679812 | Program output: -38.5665679812
Correct output: -150.2787840572 | Program output: -73.2787840572
Correct output: -33.4710147358 | Program output: -40.4710147358
Correct output: 12.2165113619  | Program output: 23.47472231   
Correct output: 16.3988550752  | Program output: 21.3988550752 
Correct output: -103.483665155 | Program output: -81.483665155 
Correct output: -16.1113007238 | Program output: -71.1113007238
Correct output: 1.5190821923   | Program output: -25.4809178077
Correct output: 56.222608134   | Program output: 23.47472231   
Correct output: -100.5567747653 | Program output: -73.5567747653
Correct output: 20.8692780643  | Program output: 23.47472231   
Correct output: 137.7657204956 | Program output: 23.47472231   
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_rot} {:instruction integer_pop} {:instruction in1} {:instruction integer_mod} {:instruction float_dec} {:instruction integer_inc} {:instruction integer_sub} {:instruction float_mult} {:instruction 23.47472230998136} {:instruction integer_min} {:instruction integer_pop} {:instruction float_swap} {:instruction float_min} {:instruction tagged_372} {:instruction integer_dup} {:instruction in1} {:instruction float_min} {:instruction float_inc} {:instruction float_dec} {:instruction float_min} {:instruction print_float} {:instruction integer_rot} {:instruction integer_flush} {:instruction in2} {:instruction integer_sub} {:instruction float_add})
Best program: (integer_rot integer_pop in1 integer_mod float_dec integer_inc integer_sub float_mult 23.47472230998136 integer_min integer_pop float_swap float_min tagged_372 integer_dup in1 float_min float_inc float_dec float_min print_float integer_rot integer_flush in2 integer_sub float_add)
Errors: [45.0 2 20.0 12 17.7302 10 13.0 11 38.0 2 84.0 13 66.5694 9 2.0 1 46.0 2 89.0 2 25.0 2 83.0 2 10.1046 8 33.0 2 77.0 3 7.0 2 11.2582 10 5.0 2 22.0 3 55.0 2 27.0 12 32.7479 10 27.0 3 2.6054 10 114.291 10]
Total: 1098.3066999999999
Mean: 21.966133
Genome size: 26
Size: 27
Percent parens: 0.037
--- Population Statistics ---
Average total errors in population: 1852.287080499982
Median total errors in population: 1100.3066999999999
Error averages by case: (74.43251610000002 2.515 48.41079800000002 11.979 46.97535940000024 9.869 42.77513880000001 11.946 69.8937573 2.567 110.05569360000005 12.997 94.37932329999829 9.28 33.4301702 1.439 76.72103090000002 2.561 114.91466590000007 2.505 55.70904830000001 2.559 112.46857130000005 2.613 39.80622199999936 8.024 65.08303899999996 2.596 108.77245380000008 3.567 37.8619573 1.641 41.98781579999933 9.873 35.474688600000015 2.616 55.68621380000003 2.633 82.94449119999999 2.584 55.609884800000025 12.914 61.49780790000061 9.847 60.32976629999996 3.552 34.329302100000305 9.867 140.28036479999824 9.913)
Error minima by case: (43.0 2 10.3213 7 13.0 2 5.0526 9 38.0 1 6.7789 9 19.6641 8 1.6982 1 46.0 2 7.4514 2 23.0 2 83.0 2 8.7998 2 33.0 2 77.0 3 5.0 1 0.7807 2 4.963 2 22.0 2 15.1151 2 0.7241 10 26.0 2 27.0 3 1.6054 2 93.0 2)
Average genome size in population (length): 26.01
Average program size in population (points): 27.01
Average percent parens in population: 0.037
Minimum age in population: 8.125
Maximum age in population: 12.296875
Average age in population: 10.541171875
Median age in population: 10.59375
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 199
Genome diversity (% unique Plush genomes):	 0.429
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 199
Syntactic diversity (% unique Push programs):	 0.429
Total error diversity:				 0.033
Error (vector) diversity:			 0.033
Behavioral diversity:				 0.033
--- Run Statistics ---
Number of program evaluations used so far: 8000
Number of point (instruction) evaluations so far: 7410489
--- Timings ---
Current time: 1529615009933 milliseconds
Total Time:          26.7 seconds
Initialization:       0.1 seconds,  0.4%
Reproduction:        10.9 seconds, 40.9%
Fitness Testing:     13.1 seconds, 49.0%
Report:               2.6 seconds,  9.6%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 7
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 8
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 8
;;******************************
;; -*- Number IO problem report - generation 8
Test total error for best: 63364.9899000001
Test mean error for best: 31.68249
;;------------------------------
Outputs of best individual on training cases:
Correct output: -54.078495011  | Program output: -99.078495011 
Correct output: 13.1534720339  | Program output: -6.8465279661 
Correct output: 41.2049141439  | Program output: 23.47472231   
Correct output: -6.0487858971  | Program output: 6.9512141029  
Correct output: -75.9491370053 | Program output: -37.9491370053
Correct output: 49.8479113478  | Program output: -34.1520886522
Correct output: -43.0947106158 | Program output: 23.47472231   
Correct output: -6.035421      | Program output: -4.035421     
Correct output: -64.6496412859 | Program output: -18.6496412859
Correct output: -8.4475981317  | Program output: -97.4475981317
Correct output: -61.9056292771 | Program output: -86.9056292771
Correct output: -100.2670640218 | Program output: -17.2670640218
Correct output: 33.5793532538  | Program output: 23.47472231   
Correct output: -71.5665679812 | Program output: -38.5665679812
Correct output: -150.2787840572 | Program output: -73.2787840572
Correct output: -33.4710147358 | Program output: -40.4710147358
Correct output: 12.2165113619  | Program output: 23.47472231   
Correct output: 16.3988550752  | Program output: 21.3988550752 
Correct output: -103.483665155 | Program output: -81.483665155 
Correct output: -16.1113007238 | Program output: -71.1113007238
Correct output: 1.5190821923   | Program output: -25.4809178077
Correct output: 56.222608134   | Program output: 23.47472231   
Correct output: -100.5567747653 | Program output: -73.5567747653
Correct output: 20.8692780643  | Program output: 23.47472231   
Correct output: 137.7657204956 | Program output: 23.47472231   
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_rot} {:instruction integer_pop} {:instruction in1} {:instruction integer_mod} {:instruction float_dec} {:instruction integer_inc} {:instruction integer_sub} {:instruction float_mult} {:instruction 23.47472230998136} {:instruction integer_min} {:instruction integer_mod} {:instruction float_swap} {:instruction float_min} {:instruction tagged_372} {:instruction integer_dup} {:instruction in1} {:instruction float_min} {:instruction float_inc} {:instruction float_dec} {:instruction float_min} {:instruction print_float} {:instruction integer_dup_items} {:instruction integer_flush} {:instruction float_tan} {:instruction in2} {:instruction integer_sub} {:instruction float_add})
Best program: (integer_rot integer_pop in1 integer_mod float_dec integer_inc integer_sub float_mult 23.47472230998136 integer_min integer_mod float_swap float_min tagged_372 integer_dup in1 float_min float_inc float_dec float_min print_float integer_dup_items integer_flush float_tan in2 integer_sub float_add)
Errors: [45.0 2 20.0 12 17.7302 10 13.0 11 38.0 2 84.0 13 66.5694 9 2.0 1 46.0 2 89.0 2 25.0 2 83.0 2 10.1046 8 33.0 2 77.0 3 7.0 2 11.2582 10 5.0 2 22.0 3 55.0 2 27.0 12 32.7479 10 27.0 3 2.6054 10 114.291 10]
Total: 1098.3066999999999
Mean: 21.966133
Genome size: 27
Size: 28
Percent parens: 0.036
--- Population Statistics ---
Average total errors in population: 1833.8318690999818
Median total errors in population: 1100.3066999999999
Error averages by case: (73.8488627 2.537 47.78837080000001 11.952 46.45466910000017 9.917 42.61666400000001 11.693 68.75666970000002 2.594 109.43273110000001 12.974 93.98113509999844 9.26 32.30467089999999 1.442 75.61452430000001 2.586 114.28422710000001 2.519 55.13168689999999 2.578 111.33104990000004 2.646 39.25730999999948 8.058 63.94679689999998 2.609 107.61878170000001 3.592 37.281997 1.906 41.28617859999951 9.915 34.764569300000005 2.633 54.586341400000016 2.89 82.3151811 2.595 54.987687500000014 12.645 60.92347750000045 9.9 59.21702839999999 3.572 33.4910138000003 9.92 139.70524429999836 9.972)
Error minima by case: (44.0 2 10.3213 7 12.0 2 4.2034 9 1.0509 2 26.3732 10 20.6641 9 1.0 1 28.3504 2 7.4493 1 24.0 2 14.7685 2 8.7998 2 4.5666 2 4.7212 3 6.0 1 0.7807 2 4.0 2 21.0 2 14.5666 2 0.5191 8 3.5253 2 26.0 3 1.6054 2 41.4046 2)
Average genome size in population (length): 26.115
Average program size in population (points): 27.115
Average percent parens in population: 0.037
Minimum age in population: 9.78125
Maximum age in population: 14.0625
Average age in population: 12.1310859375
Median age in population: 12.171875
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 106
Genome diversity (% unique Plush genomes):	 0.469
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 106
Syntactic diversity (% unique Push programs):	 0.469
Total error diversity:				 0.03
Error (vector) diversity:			 0.031
Behavioral diversity:				 0.031
--- Run Statistics ---
Number of program evaluations used so far: 9000
Number of point (instruction) evaluations so far: 8063364
--- Timings ---
Current time: 1529615012656 milliseconds
Total Time:          29.6 seconds
Initialization:       0.1 seconds,  0.4%
Reproduction:        12.1 seconds, 40.9%
Fitness Testing:     14.4 seconds, 48.8%
Report:               2.9 seconds,  9.9%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 8
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 9
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 9
;;******************************
;; -*- Number IO problem report - generation 9
Test total error for best: 63364.9899000001
Test mean error for best: 31.68249
;;------------------------------
Outputs of best individual on training cases:
Correct output: -54.078495011  | Program output: -99.078495011 
Correct output: 13.1534720339  | Program output: -6.8465279661 
Correct output: 41.2049141439  | Program output: 23.47472231   
Correct output: -6.0487858971  | Program output: 6.9512141029  
Correct output: -75.9491370053 | Program output: -37.9491370053
Correct output: 49.8479113478  | Program output: -34.1520886522
Correct output: -43.0947106158 | Program output: 23.47472231   
Correct output: -6.035421      | Program output: -4.035421     
Correct output: -64.6496412859 | Program output: -18.6496412859
Correct output: -8.4475981317  | Program output: -97.4475981317
Correct output: -61.9056292771 | Program output: -86.9056292771
Correct output: -100.2670640218 | Program output: -17.2670640218
Correct output: 33.5793532538  | Program output: 23.47472231   
Correct output: -71.5665679812 | Program output: -38.5665679812
Correct output: -150.2787840572 | Program output: -73.2787840572
Correct output: -33.4710147358 | Program output: -40.4710147358
Correct output: 12.2165113619  | Program output: 23.47472231   
Correct output: 16.3988550752  | Program output: 21.3988550752 
Correct output: -103.483665155 | Program output: -81.483665155 
Correct output: -16.1113007238 | Program output: -71.1113007238
Correct output: 1.5190821923   | Program output: -25.4809178077
Correct output: 56.222608134   | Program output: 23.47472231   
Correct output: -100.5567747653 | Program output: -73.5567747653
Correct output: 20.8692780643  | Program output: 23.47472231   
Correct output: 137.7657204956 | Program output: 23.47472231   
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_rot} {:instruction integer_pop} {:instruction in1} {:instruction integer_mod} {:instruction float_dec} {:instruction integer_inc} {:instruction integer_sub} {:instruction float_mult} {:instruction 23.47472230998136} {:instruction integer_min} {:instruction integer_mod} {:instruction float_swap} {:instruction float_min} {:instruction print_float} {:instruction integer_rot} {:instruction integer_flush} {:instruction float_tan} {:instruction in2} {:instruction integer_sub} {:instruction float_add})
Best program: (integer_rot integer_pop in1 integer_mod float_dec integer_inc integer_sub float_mult 23.47472230998136 integer_min integer_mod float_swap float_min print_float integer_rot integer_flush float_tan in2 integer_sub float_add)
Errors: [45.0 2 20.0 12 17.7302 10 13.0 11 38.0 2 84.0 13 66.5694 9 2.0 1 46.0 2 89.0 2 25.0 2 83.0 2 10.1046 8 33.0 2 77.0 3 7.0 2 11.2582 10 5.0 2 22.0 3 55.0 2 27.0 12 32.7479 10 27.0 3 2.6054 10 114.291 10]
Total: 1098.3066999999999
Mean: 21.966133
Genome size: 20
Size: 21
Percent parens: 0.048
--- Population Statistics ---
Average total errors in population: 1841.903622499982
Median total errors in population: 1098.3066999999999
Error averages by case: (79.64897150000002 2.499 45.080642000000026 12.001 42.24766209999998 9.896 38.04193849999999 11.217 72.20782490000002 2.517 114.19143030000001 13.031 90.32724429999828 9.234 28.410665499999997 1.423 74.40016069999999 2.536 120.81233710000004 2.487 60.7574929 2.533 109.1958788 2.538 35.00287679999949 8.019 67.62533710000001 2.555 112.59357740000004 3.522 42.14368029999999 2.364 37.12104639999979 9.901 30.085217899999996 2.473 59.74602320000002 3.328 88.61670989999999 2.519 56.90041850000001 12.197 55.92792910000051 9.889 64.44718209999999 3.522 29.12806090000025 9.895 135.19431429999838 9.953)
Error minima by case: (44.0 2 10.3213 7 11.0 2 4.0488 9 37.0 2 26.3732 10 41.0947 9 1.0 1 45.0 2 6.4476 1 24.0 2 82.0 2 8.4058 2 32.0 2 76.0 3 6.0 1 0.7807 2 4.0 2 21.0 2 14.1113 2 0.756 8 27.0 2 26.0 3 1.0517 1 94.0 2)
Average genome size in population (length): 25.92
Average program size in population (points): 26.92
Average percent parens in population: 0.038
Minimum age in population: 11.15625
Maximum age in population: 15.5390625
Average age in population: 13.72483984375
Median age in population: 13.75
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 159
Genome diversity (% unique Plush genomes):	 0.409
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 159
Syntactic diversity (% unique Push programs):	 0.409
Total error diversity:				 0.033
Error (vector) diversity:			 0.036
Behavioral diversity:				 0.037
--- Run Statistics ---
Number of program evaluations used so far: 10000
Number of point (instruction) evaluations so far: 8711389
--- Timings ---
Current time: 1529615015438 milliseconds
Total Time:          32.3 seconds
Initialization:       0.1 seconds,  0.4%
Reproduction:        13.2 seconds, 40.8%
Fitness Testing:     15.8 seconds, 48.9%
Report:               3.2 seconds, 10.0%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 9
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 10
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 10
;;******************************
;; -*- Number IO problem report - generation 10
Test total error for best: 63364.9899000001
Test mean error for best: 31.68249
;;------------------------------
Outputs of best individual on training cases:
Correct output: -54.078495011  | Program output: -99.078495011 
Correct output: 13.1534720339  | Program output: -6.8465279661 
Correct output: 41.2049141439  | Program output: 23.47472231   
Correct output: -6.0487858971  | Program output: 6.9512141029  
Correct output: -75.9491370053 | Program output: -37.9491370053
Correct output: 49.8479113478  | Program output: -34.1520886522
Correct output: -43.0947106158 | Program output: 23.47472231   
Correct output: -6.035421      | Program output: -4.035421     
Correct output: -64.6496412859 | Program output: -18.6496412859
Correct output: -8.4475981317  | Program output: -97.4475981317
Correct output: -61.9056292771 | Program output: -86.9056292771
Correct output: -100.2670640218 | Program output: -17.2670640218
Correct output: 33.5793532538  | Program output: 23.47472231   
Correct output: -71.5665679812 | Program output: -38.5665679812
Correct output: -150.2787840572 | Program output: -73.2787840572
Correct output: -33.4710147358 | Program output: -40.4710147358
Correct output: 12.2165113619  | Program output: 23.47472231   
Correct output: 16.3988550752  | Program output: 21.3988550752 
Correct output: -103.483665155 | Program output: -81.483665155 
Correct output: -16.1113007238 | Program output: -71.1113007238
Correct output: 1.5190821923   | Program output: -25.4809178077
Correct output: 56.222608134   | Program output: 23.47472231   
Correct output: -100.5567747653 | Program output: -73.5567747653
Correct output: 20.8692780643  | Program output: 23.47472231   
Correct output: 137.7657204956 | Program output: 23.47472231   
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_rot} {:instruction integer_pop} {:instruction in1} {:instruction integer_mod} {:instruction float_dec} {:instruction integer_inc} {:instruction integer_sub} {:instruction float_mult} {:instruction 23.47472230998136} {:instruction integer_min} {:instruction integer_pop} {:instruction float_swap} {:instruction float_min} {:instruction tagged_372} {:instruction integer_dup} {:instruction in1} {:instruction float_min} {:instruction float_inc} {:instruction float_dec} {:instruction float_min} {:instruction print_float} {:instruction integer_rot} {:instruction integer_flush} {:instruction in2} {:instruction integer_sub} {:instruction float_add})
Best program: (integer_rot integer_pop in1 integer_mod float_dec integer_inc integer_sub float_mult 23.47472230998136 integer_min integer_pop float_swap float_min tagged_372 integer_dup in1 float_min float_inc float_dec float_min print_float integer_rot integer_flush in2 integer_sub float_add)
Errors: [45.0 2 20.0 12 17.7302 10 13.0 11 38.0 2 84.0 13 66.5694 9 2.0 1 46.0 2 89.0 2 25.0 2 83.0 2 10.1046 8 33.0 2 77.0 3 7.0 2 11.2582 10 5.0 2 22.0 3 55.0 2 27.0 12 32.7479 10 27.0 3 2.6054 10 114.291 10]
Total: 1098.3066999999999
Mean: 21.966133
Genome size: 26
Size: 27
Percent parens: 0.037
--- Population Statistics ---
Average total errors in population: 1785.0795366999826
Median total errors in population: 1098.3066999999999
Error averages by case: (75.7360266 2.434 44.71182540000001 12.025 42.368487900000346 9.894 37.02346049999999 11.14 67.522073 2.436 111.68300020000001 13.033 90.29319239999852 9.239 26.841396999999997 1.373 71.6588643 2.447 117.69823100000002 2.396 56.570943 2.438 106.89267339999998 2.457 35.14724769999943 8.017 62.84387290000001 2.451 107.1668081 3.44 38.29824019999999 2.381 37.334250999999725 9.881 29.570186799999995 2.411 53.9943617 3.339 85.08596220000001 2.438 54.80523589999999 12.112 56.66273890000055 9.874 58.769416 3.435 29.418526300000305 9.876 136.0625142999983 9.953)
Error minima by case: (44.0 2 10.3213 7 11.0 2 4.9517 9 4.2473 2 26.3732 10 37.1017 8 0.4661 1 15.5467 2 7.639 1 24.0 2 20.0707 2 8.3756 2 8.6298 2 53.5253 3 6.0 1 10.2582 2 4.0 2 1.4747 2 15.2005 2 0.9124 10 27.0 2 3.5253 3 1.6054 1 94.0 2)
Average genome size in population (length): 25.89
Average program size in population (points): 26.89
Average percent parens in population: 0.038
Minimum age in population: 13.03125
Maximum age in population: 17.1484375
Average age in population: 15.228935546875
Median age in population: 15.2861328125
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 148
Genome diversity (% unique Plush genomes):	 0.44
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 148
Syntactic diversity (% unique Push programs):	 0.44
Total error diversity:				 0.034
Error (vector) diversity:			 0.036
Behavioral diversity:				 0.036
--- Run Statistics ---
Number of program evaluations used so far: 11000
Number of point (instruction) evaluations so far: 9358639
--- Timings ---
Current time: 1529615018360 milliseconds
Total Time:          35.3 seconds
Initialization:       0.1 seconds,  0.3%
Reproduction:        14.3 seconds, 40.7%
Fitness Testing:     17.2 seconds, 48.9%
Report:               3.6 seconds, 10.1%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 10
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 11
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 11
;;******************************
;; -*- Number IO problem report - generation 11
Test total error for best: 63364.9899000001
Test mean error for best: 31.68249
;;------------------------------
Outputs of best individual on training cases:
Correct output: -54.078495011  | Program output: -99.078495011 
Correct output: 13.1534720339  | Program output: -6.8465279661 
Correct output: 41.2049141439  | Program output: 23.47472231   
Correct output: -6.0487858971  | Program output: 6.9512141029  
Correct output: -75.9491370053 | Program output: -37.9491370053
Correct output: 49.8479113478  | Program output: -34.1520886522
Correct output: -43.0947106158 | Program output: 23.47472231   
Correct output: -6.035421      | Program output: -4.035421     
Correct output: -64.6496412859 | Program output: -18.6496412859
Correct output: -8.4475981317  | Program output: -97.4475981317
Correct output: -61.9056292771 | Program output: -86.9056292771
Correct output: -100.2670640218 | Program output: -17.2670640218
Correct output: 33.5793532538  | Program output: 23.47472231   
Correct output: -71.5665679812 | Program output: -38.5665679812
Correct output: -150.2787840572 | Program output: -73.2787840572
Correct output: -33.4710147358 | Program output: -40.4710147358
Correct output: 12.2165113619  | Program output: 23.47472231   
Correct output: 16.3988550752  | Program output: 21.3988550752 
Correct output: -103.483665155 | Program output: -81.483665155 
Correct output: -16.1113007238 | Program output: -71.1113007238
Correct output: 1.5190821923   | Program output: -25.4809178077
Correct output: 56.222608134   | Program output: 23.47472231   
Correct output: -100.5567747653 | Program output: -73.5567747653
Correct output: 20.8692780643  | Program output: 23.47472231   
Correct output: 137.7657204956 | Program output: 23.47472231   
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_rot} {:instruction integer_add} {:instruction in1} {:instruction integer_mod} {:instruction float_dec} {:instruction integer_inc} {:instruction integer_sub} {:instruction float_mult} {:instruction 23.47472230998136} {:instruction integer_min} {:instruction integer_mod} {:instruction float_swap} {:instruction float_min} {:instruction tagged_372} {:instruction integer_dup} {:instruction in1} {:instruction float_min} {:instruction float_inc} {:instruction float_dec} {:instruction float_min} {:instruction print_float} {:instruction integer_rot} {:instruction integer_flush} {:instruction float_tan} {:instruction in2} {:instruction integer_sub} {:instruction float_add})
Best program: (integer_rot integer_add in1 integer_mod float_dec integer_inc integer_sub float_mult 23.47472230998136 integer_min integer_mod float_swap float_min tagged_372 integer_dup in1 float_min float_inc float_dec float_min print_float integer_rot integer_flush float_tan in2 integer_sub float_add)
Errors: [45.0 2 20.0 12 17.7302 10 13.0 11 38.0 2 84.0 13 66.5694 9 2.0 1 46.0 2 89.0 2 25.0 2 83.0 2 10.1046 8 33.0 2 77.0 3 7.0 2 11.2582 10 5.0 2 22.0 3 55.0 2 27.0 12 32.7479 10 27.0 3 2.6054 10 114.291 10]
Total: 1098.3066999999999
Mean: 21.966133
Genome size: 27
Size: 28
Percent parens: 0.036
--- Population Statistics ---
Average total errors in population: 2331.1402247999836
Median total errors in population: 1098.3066999999999
Error averages by case: (97.97104559999998 2.663 66.81353670000001 12.055 63.40880239999962 9.944 58.9670275 11.169 89.83204699999997 2.695 133.02309549999998 13.046 110.16807809999754 9.347 49.292887799999995 1.524 93.3263913 2.715 139.01489100000003 2.641 79.25018159999998 2.709 127.4336986 2.754 56.3415544999993 8.118 85.2987885 2.722 128.52184650000004 3.699 61.46971859999999 2.655 58.452777599998754 9.952 51.35729450000001 2.667 76.70207160000001 3.585 107.16757759999999 2.7 77.23266440000002 12.117 77.7410100000007 9.923 81.37351449999998 3.706 50.7192413000003 9.946 155.18748209999822 10.021)
Error minima by case: (44.0 2 10.3213 7 11.0 2 5.9517 9 1.5303 2 26.3732 10 34.3847 9 1.0 1 12.8298 2 31.9223 1 24.0 2 14.7685 2 9.1046 2 5.9129 2 72.7994 3 6.0 1 10.2582 2 4.0 2 21.0 2 39.586 2 21.9556 10 27.0 2 23.0774 3 1.6054 1 94.0 2)
Average genome size in population (length): 25.747
Average program size in population (points): 26.747
Average percent parens in population: 0.038
Minimum age in population: 14.21875
Maximum age in population: 18.6591796875
Average age in population: 16.7163955078125
Median age in population: 16.71484375
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 112
Genome diversity (% unique Plush genomes):	 0.506
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 112
Syntactic diversity (% unique Push programs):	 0.506
Total error diversity:				 0.028
Error (vector) diversity:			 0.031
Behavioral diversity:				 0.032
--- Run Statistics ---
Number of program evaluations used so far: 12000
Number of point (instruction) evaluations so far: 10002314
--- Timings ---
Current time: 1529615021078 milliseconds
Total Time:          38.0 seconds
Initialization:       0.1 seconds,  0.3%
Reproduction:        15.5 seconds, 40.7%
Fitness Testing:     18.5 seconds, 48.8%
Report:               3.9 seconds, 10.2%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 11
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 12
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 12
;;******************************
;; -*- Number IO problem report - generation 12
Test total error for best: 68470.57620000005
Test mean error for best: 34.23529
;;------------------------------
Outputs of best individual on training cases:
Correct output: -54.078495011  | Program output: -98.078495011 
Correct output: 13.1534720339  | Program output: -5.8465279661 
Correct output: 41.2049141439  | Program output: 11.435830601  
Correct output: -6.0487858971  | Program output: 0.7890507099  
Correct output: -75.9491370053 | Program output: -36.9491370053
Correct output: 49.8479113478  | Program output: -33.1520886522
Correct output: -43.0947106158 | Program output: 11.435830601  
Correct output: -6.035421      | Program output: -3.035421     
Correct output: -64.6496412859 | Program output: -17.6496412859
Correct output: -8.4475981317  | Program output: -96.4475981317
Correct output: -61.9056292771 | Program output: -85.9056292771
Correct output: -100.2670640218 | Program output: -85.498539513 
Correct output: 33.5793532538  | Program output: 11.435830601  
Correct output: -71.5665679812 | Program output: -37.5665679812
Correct output: -150.2787840572 | Program output: -72.2787840572
Correct output: -33.4710147358 | Program output: -39.4710147358
Correct output: 12.2165113619  | Program output: 11.435830601  
Correct output: 16.3988550752  | Program output: -0.672882447  
Correct output: -103.483665155 | Program output: -80.483665155 
Correct output: -16.1113007238 | Program output: -70.1113007238
Correct output: 1.5190821923   | Program output: -24.4809178077
Correct output: 56.222608134   | Program output: 11.435830601  
Correct output: -100.5567747653 | Program output: -72.5567747653
Correct output: 20.8692780643  | Program output: 11.435830601  
Correct output: 137.7657204956 | Program output: 11.435830601  
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_rot} {:instruction integer_pop} {:instruction in1} {:instruction integer_mod} {:instruction float_dec} {:instruction integer_inc} {:instruction integer_sub} {:instruction float_mult} {:instruction 23.47472230998136} {:instruction integer_min} {:instruction integer_pop} {:instruction float_swap} {:instruction float_min} {:instruction float_tan} {:instruction integer_dup} {:instruction in1} {:instruction float_min} {:instruction float_mult} {:instruction 23.47472230998136} {:instruction integer_min} {:instruction integer_mod} {:instruction integer_inc} {:instruction float_min} {:instruction tagged_372} {:instruction integer_dup} {:instruction in1} {:instruction float_min} {:instruction -5} {:instruction integer_div} {:instruction float_min} {:instruction print_float} {:instruction integer_rot} {:instruction integer_flush} {:instruction float_tan} {:instruction in2} {:instruction integer_sub} {:instruction float_add})
Best program: (integer_rot integer_pop in1 integer_mod float_dec integer_inc integer_sub float_mult 23.47472230998136 integer_min integer_pop float_swap float_min float_tan integer_dup in1 float_min float_mult 23.47472230998136 integer_min integer_mod integer_inc float_min tagged_372 integer_dup in1 float_min -5 integer_div float_min print_float integer_rot integer_flush float_tan in2 integer_sub float_add)
Errors: [44.0 2 19.0 12 29.7691 11 6.8378 11 39.0 2 83.0 13 54.5305 11 3.0 1 47.0 2 88.0 2 24.0 2 14.7685 12 22.1435 10 34.0 2 78.0 3 6.0 1 0.7807 9 17.0717 10 23.0 2 54.0 2 26.0 13 44.7868 11 28.0 3 9.4334 10 126.3299 10]
Total: 1089.4519
Mean: 21.789038
Genome size: 37
Size: 38
Percent parens: 0.026
--- Population Statistics ---
Average total errors in population: 2199.433761599984
Median total errors in population: 1098.3066999999999
Error averages by case: (91.30870969999998 2.662 60.95136280000003 12.01 60.12508529999984 9.955 54.243450500000016 11.145 83.85368419999999 2.694 126.12901410000002 13.015 106.91785079999799 9.327 43.8159331 1.542 87.9935387 2.689 131.84377620000004 2.613 72.67948599999998 2.691 122.55308080000005 2.758 53.00946109999945 8.123 79.21342839999998 2.717 122.73471710000005 3.695 54.763608799999986 2.616 54.956289299999234 9.953 47.43844420000002 2.725 70.50257630000002 3.574 100.10299679999999 2.699 70.7721944 12.106 74.10660830000063 9.943 75.13691899999998 3.685 47.23751160000029 9.964 152.10103409999837 10.042)
Error minima by case: (44.0 2 7.092 7 11.4747 2 0.1054 8 14.5253 2 26.3732 10 2.453 9 1.0 1 22.5253 2 8.3893 1 24.0 2 14.7685 2 9.1046 2 9.5253 2 53.5253 3 6.0 1 0.7807 2 4.0 2 1.4747 2 18.3181 2 1.882 9 27.0 2 3.5253 3 1.2599 2 94.0 2)
Average genome size in population (length): 25.936
Average program size in population (points): 26.936
Average percent parens in population: 0.038
Minimum age in population: 15.84375
Maximum age in population: 20.06201171875
Average age in population: 18.20616650390625
Median age in population: 18.228271484375
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 106
Genome diversity (% unique Plush genomes):	 0.53
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 106
Syntactic diversity (% unique Push programs):	 0.53
Total error diversity:				 0.033
Error (vector) diversity:			 0.036
Behavioral diversity:				 0.036
--- Run Statistics ---
Number of program evaluations used so far: 13000
Number of point (instruction) evaluations so far: 10650714
--- Timings ---
Current time: 1529615023863 milliseconds
Total Time:          40.7 seconds
Initialization:       0.1 seconds,  0.3%
Reproduction:        16.6 seconds, 40.9%
Fitness Testing:     19.8 seconds, 48.7%
Report:               4.1 seconds, 10.2%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 12
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 13
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 13
;;******************************
;; -*- Number IO problem report - generation 13
Test total error for best: 68470.57620000005
Test mean error for best: 34.23529
;;------------------------------
Outputs of best individual on training cases:
Correct output: -54.078495011  | Program output: -98.078495011 
Correct output: 13.1534720339  | Program output: -5.8465279661 
Correct output: 41.2049141439  | Program output: 11.435830601  
Correct output: -6.0487858971  | Program output: 0.7890507099  
Correct output: -75.9491370053 | Program output: -36.9491370053
Correct output: 49.8479113478  | Program output: -33.1520886522
Correct output: -43.0947106158 | Program output: 11.435830601  
Correct output: -6.035421      | Program output: -3.035421     
Correct output: -64.6496412859 | Program output: -17.6496412859
Correct output: -8.4475981317  | Program output: -96.4475981317
Correct output: -61.9056292771 | Program output: -85.9056292771
Correct output: -100.2670640218 | Program output: -85.498539513 
Correct output: 33.5793532538  | Program output: 11.435830601  
Correct output: -71.5665679812 | Program output: -37.5665679812
Correct output: -150.2787840572 | Program output: -72.2787840572
Correct output: -33.4710147358 | Program output: -39.4710147358
Correct output: 12.2165113619  | Program output: 11.435830601  
Correct output: 16.3988550752  | Program output: -0.672882447  
Correct output: -103.483665155 | Program output: -80.483665155 
Correct output: -16.1113007238 | Program output: -70.1113007238
Correct output: 1.5190821923   | Program output: -24.4809178077
Correct output: 56.222608134   | Program output: 11.435830601  
Correct output: -100.5567747653 | Program output: -72.5567747653
Correct output: 20.8692780643  | Program output: 11.435830601  
Correct output: 137.7657204956 | Program output: 11.435830601  
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_rot} {:instruction integer_pop} {:instruction in1} {:instruction integer_mod} {:instruction float_dec} {:instruction integer_inc} {:instruction integer_sub} {:instruction float_mult} {:instruction 23.47472230998136} {:instruction integer_min} {:instruction integer_pop} {:instruction float_swap} {:instruction float_min} {:instruction float_tan} {:instruction integer_dup} {:instruction in1} {:instruction float_min} {:instruction float_mult} {:instruction 23.47472230998136} {:instruction integer_min} {:instruction integer_mod} {:instruction integer_inc} {:instruction float_min} {:instruction tagged_372} {:instruction integer_dup} {:instruction in1} {:instruction float_min} {:instruction -5} {:instruction integer_div} {:instruction float_min} {:instruction print_float} {:instruction integer_rot} {:instruction integer_flush} {:instruction float_tan} {:instruction in2} {:instruction integer_sub} {:instruction float_add})
Best program: (integer_rot integer_pop in1 integer_mod float_dec integer_inc integer_sub float_mult 23.47472230998136 integer_min integer_pop float_swap float_min float_tan integer_dup in1 float_min float_mult 23.47472230998136 integer_min integer_mod integer_inc float_min tagged_372 integer_dup in1 float_min -5 integer_div float_min print_float integer_rot integer_flush float_tan in2 integer_sub float_add)
Errors: [44.0 2 19.0 12 29.7691 11 6.8378 11 39.0 2 83.0 13 54.5305 11 3.0 1 47.0 2 88.0 2 24.0 2 14.7685 12 22.1435 10 34.0 2 78.0 3 6.0 1 0.7807 9 17.0717 10 23.0 2 54.0 2 26.0 13 44.7868 11 28.0 3 9.4334 10 126.3299 10]
Total: 1089.4519
Mean: 21.789038
Genome size: 37
Size: 38
Percent parens: 0.026
--- Population Statistics ---
Average total errors in population: 2189.6034377999836
Median total errors in population: 1098.3066999999999
Error averages by case: (93.1517874 2.675 57.93591220000002 12.046 57.06098109999987 9.911 51.70141180000002 11.177 86.39745289999999 2.689 127.13358429999998 13.063 104.33810079999778 9.343 42.23696909999999 1.55 87.8741846 2.7 133.7228985 2.635 74.50847640000002 2.701 121.4128101 2.794 49.9805520999992 8.065 81.89297589999998 2.717 126.19385670000003 3.688 56.07719719999998 2.631 52.15237349999895 9.9 44.46065640000001 2.667 74.22889990000002 3.577 101.97730609999999 2.69 70.2178524 12.149 69.29476210000055 9.888 78.84406659999999 3.692 44.49432470000032 9.903 147.51104499999818 9.952)
Error minima by case: (44.0 2 5.8465 7 5.7445 2 5.8378 9 36.9491 2 26.3732 10 43.0076 9 1.0 1 17.6496 2 7.3893 1 24.0 2 13.7685 2 8.9483 2 32.0 2 72.2788 3 6.0 1 0.7807 2 4.0 2 21.0 2 15.6986 2 0.5791 9 27.0 2 26.0 3 1.6054 1 43.7657 2)
Average genome size in population (length): 25.989
Average program size in population (points): 26.989
Average percent parens in population: 0.038
Minimum age in population: 17.173828125
Maximum age in population: 21.538330078125
Average age in population: 19.66662036132812
Median age in population: 19.713623046875
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 97
Genome diversity (% unique Plush genomes):	 0.545
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 97
Syntactic diversity (% unique Push programs):	 0.545
Total error diversity:				 0.036
Error (vector) diversity:			 0.037
Behavioral diversity:				 0.037
--- Run Statistics ---
Number of program evaluations used so far: 14000
Number of point (instruction) evaluations so far: 11300439
--- Timings ---
Current time: 1529615026614 milliseconds
Total Time:          43.5 seconds
Initialization:       0.1 seconds,  0.3%
Reproduction:        17.7 seconds, 40.8%
Fitness Testing:     21.1 seconds, 48.6%
Report:               4.5 seconds, 10.3%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 13
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 14
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 14
;;******************************
;; -*- Number IO problem report - generation 14
Test total error for best: 68470.57620000005
Test mean error for best: 34.23529
;;------------------------------
Outputs of best individual on training cases:
Correct output: -54.078495011  | Program output: -98.078495011 
Correct output: 13.1534720339  | Program output: -5.8465279661 
Correct output: 41.2049141439  | Program output: 11.435830601  
Correct output: -6.0487858971  | Program output: 0.7890507099  
Correct output: -75.9491370053 | Program output: -36.9491370053
Correct output: 49.8479113478  | Program output: -33.1520886522
Correct output: -43.0947106158 | Program output: 11.435830601  
Correct output: -6.035421      | Program output: -3.035421     
Correct output: -64.6496412859 | Program output: -17.6496412859
Correct output: -8.4475981317  | Program output: -96.4475981317
Correct output: -61.9056292771 | Program output: -85.9056292771
Correct output: -100.2670640218 | Program output: -85.498539513 
Correct output: 33.5793532538  | Program output: 11.435830601  
Correct output: -71.5665679812 | Program output: -37.5665679812
Correct output: -150.2787840572 | Program output: -72.2787840572
Correct output: -33.4710147358 | Program output: -39.4710147358
Correct output: 12.2165113619  | Program output: 11.435830601  
Correct output: 16.3988550752  | Program output: -0.672882447  
Correct output: -103.483665155 | Program output: -80.483665155 
Correct output: -16.1113007238 | Program output: -70.1113007238
Correct output: 1.5190821923   | Program output: -24.4809178077
Correct output: 56.222608134   | Program output: 11.435830601  
Correct output: -100.5567747653 | Program output: -72.5567747653
Correct output: 20.8692780643  | Program output: 11.435830601  
Correct output: 137.7657204956 | Program output: 11.435830601  
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_rot} {:instruction integer_pop} {:instruction in1} {:instruction integer_mod} {:instruction float_dec} {:instruction integer_inc} {:instruction integer_sub} {:instruction float_mult} {:instruction 23.47472230998136} {:instruction integer_min} {:instruction integer_pop} {:instruction float_swap} {:instruction float_min} {:instruction float_tan} {:instruction integer_dup} {:instruction in1} {:instruction float_min} {:instruction float_mult} {:instruction 23.47472230998136} {:instruction integer_min} {:instruction integer_mod} {:instruction integer_inc} {:instruction float_min} {:instruction tagged_372} {:instruction integer_dup} {:instruction in1} {:instruction float_min} {:instruction -5} {:instruction integer_div} {:instruction float_min} {:instruction print_float} {:instruction integer_rot} {:instruction float_shove} {:instruction float_tan} {:instruction in2} {:instruction integer_sub} {:instruction float_add})
Best program: (integer_rot integer_pop in1 integer_mod float_dec integer_inc integer_sub float_mult 23.47472230998136 integer_min integer_pop float_swap float_min float_tan integer_dup in1 float_min float_mult 23.47472230998136 integer_min integer_mod integer_inc float_min tagged_372 integer_dup in1 float_min -5 integer_div float_min print_float integer_rot float_shove float_tan in2 integer_sub float_add)
Errors: [44.0 2 19.0 12 29.7691 11 6.8378 11 39.0 2 83.0 13 54.5305 11 3.0 1 47.0 2 88.0 2 24.0 2 14.7685 12 22.1435 10 34.0 2 78.0 3 6.0 1 0.7807 9 17.0717 10 23.0 2 54.0 2 26.0 13 44.7868 11 28.0 3 9.4334 10 126.3299 10]
Total: 1089.4519
Mean: 21.789038
Genome size: 37
Size: 38
Percent parens: 0.026
--- Population Statistics ---
Average total errors in population: 2021.6755674999827
Median total errors in population: 1098.3066999999999
Error averages by case: (84.4306808 2.57 54.437850500000025 12.029 52.726867699999715 10.008 46.66059950000003 11.152 77.2398703 2.589 120.18301210000001 13.034 98.94062529999779 9.365 36.92193359999999 1.459 81.72912290000002 2.593 125.55018670000004 2.519 65.5844813 2.589 114.04771590000009 2.993 45.488183099999354 8.183 72.54615609999999 2.6 115.96800360000005 3.578 47.802409999999995 2.484 46.33640029999902 9.915 39.91507800000002 2.921 63.32373560000001 3.441 93.4431777 2.589 64.5202075 12.166 66.8595527000008 9.991 68.02144649999998 3.58 39.146209100000334 9.967 145.5170606999983 10.02)
Error minima by case: (44.0 2 10.3213 7 11.0 2 1.0488 9 14.5253 2 26.3732 9 38.0947 9 1.0 1 22.5253 2 3.4476 1 24.0 2 14.7685 2 9.0864 2 9.5253 2 53.5253 3 6.0 1 0.7807 2 4.0 2 1.4747 2 11.1113 2 1.8603 10 27.0 2 3.5253 3 0.5758 1 94.0 2)
Average genome size in population (length): 26.653
Average program size in population (points): 27.653
Average percent parens in population: 0.037
Minimum age in population: 18.5185546875
Maximum age in population: 22.9249267578125
Average age in population: 21.09963879394531
Median age in population: 21.18927001953125
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 72
Genome diversity (% unique Plush genomes):	 0.569
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 72
Syntactic diversity (% unique Push programs):	 0.569
Total error diversity:				 0.038
Error (vector) diversity:			 0.04
Behavioral diversity:				 0.04
--- Run Statistics ---
Number of program evaluations used so far: 15000
Number of point (instruction) evaluations so far: 11966764
--- Timings ---
Current time: 1529615029376 milliseconds
Total Time:          46.2 seconds
Initialization:       0.1 seconds,  0.3%
Reproduction:        18.9 seconds, 40.8%
Fitness Testing:     22.4 seconds, 48.5%
Report:               4.8 seconds, 10.4%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 14
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 15
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 15
;;******************************
;; -*- Number IO problem report - generation 15
Test total error for best: 68470.57620000005
Test mean error for best: 34.23529
;;------------------------------
Outputs of best individual on training cases:
Correct output: -54.078495011  | Program output: -98.078495011 
Correct output: 13.1534720339  | Program output: -5.8465279661 
Correct output: 41.2049141439  | Program output: 11.435830601  
Correct output: -6.0487858971  | Program output: 0.7890507099  
Correct output: -75.9491370053 | Program output: -36.9491370053
Correct output: 49.8479113478  | Program output: -33.1520886522
Correct output: -43.0947106158 | Program output: 11.435830601  
Correct output: -6.035421      | Program output: -3.035421     
Correct output: -64.6496412859 | Program output: -17.6496412859
Correct output: -8.4475981317  | Program output: -96.4475981317
Correct output: -61.9056292771 | Program output: -85.9056292771
Correct output: -100.2670640218 | Program output: -85.498539513 
Correct output: 33.5793532538  | Program output: 11.435830601  
Correct output: -71.5665679812 | Program output: -37.5665679812
Correct output: -150.2787840572 | Program output: -72.2787840572
Correct output: -33.4710147358 | Program output: -39.4710147358
Correct output: 12.2165113619  | Program output: 11.435830601  
Correct output: 16.3988550752  | Program output: -0.672882447  
Correct output: -103.483665155 | Program output: -80.483665155 
Correct output: -16.1113007238 | Program output: -70.1113007238
Correct output: 1.5190821923   | Program output: -24.4809178077
Correct output: 56.222608134   | Program output: 11.435830601  
Correct output: -100.5567747653 | Program output: -72.5567747653
Correct output: 20.8692780643  | Program output: 11.435830601  
Correct output: 137.7657204956 | Program output: 11.435830601  
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_rot} {:instruction integer_pop} {:instruction in1} {:instruction integer_mod} {:instruction float_dec} {:instruction integer_inc} {:instruction integer_sub} {:instruction float_mult} {:instruction 23.47472230998136} {:instruction integer_min} {:instruction integer_pop} {:instruction float_swap} {:instruction float_min} {:instruction float_tan} {:instruction integer_dup} {:instruction in1} {:instruction float_min} {:instruction float_mult} {:instruction 23.47472230998136} {:instruction integer_min} {:instruction integer_mod} {:instruction integer_inc} {:instruction float_min} {:instruction tagged_372} {:instruction integer_dup} {:instruction in1} {:instruction float_min} {:instruction -5} {:instruction integer_div} {:instruction float_min} {:instruction print_float} {:instruction integer_rot} {:instruction integer_flush} {:instruction float_tan} {:instruction in2} {:instruction integer_sub} {:instruction float_add})
Best program: (integer_rot integer_pop in1 integer_mod float_dec integer_inc integer_sub float_mult 23.47472230998136 integer_min integer_pop float_swap float_min float_tan integer_dup in1 float_min float_mult 23.47472230998136 integer_min integer_mod integer_inc float_min tagged_372 integer_dup in1 float_min -5 integer_div float_min print_float integer_rot integer_flush float_tan in2 integer_sub float_add)
Errors: [44.0 2 19.0 12 29.7691 11 6.8378 11 39.0 2 83.0 13 54.5305 11 3.0 1 47.0 2 88.0 2 24.0 2 14.7685 12 22.1435 10 34.0 2 78.0 3 6.0 1 0.7807 9 17.0717 10 23.0 2 54.0 2 26.0 13 44.7868 11 28.0 3 9.4334 10 126.3299 10]
Total: 1089.4519
Mean: 21.789038
Genome size: 37
Size: 38
Percent parens: 0.026
--- Population Statistics ---
Average total errors in population: 2159.005361499984
Median total errors in population: 1098.3066999999999
Error averages by case: (89.8039179 2.654 59.92884500000003 12.082 61.09526439999934 10.188 52.10565070000014 11.206 82.03337099999999 2.682 124.3463031 13.093 102.36059579999771 9.728 43.04650829999999 1.535 86.75381609999998 2.685 129.71545760000004 2.606 70.47920669999998 2.687 108.90401770000041 4.506 53.82870429999915 8.55 77.40180219999998 2.693 120.95774440000001 3.669 52.61620639999998 2.422 51.18750839999918 9.832 48.4804528000001 4.245 68.63098440000002 3.38 98.01045739999998 2.692 69.05817150000001 12.38 75.33870780000107 10.178 73.26032539999999 3.676 46.86314950000049 10.005 153.3461926999985 10.078)
Error minima by case: (38.5609 2 10.3213 7 11.0 2 1.1134 9 11.2314 1 26.3732 9 7.6253 8 0.0 0 22.5309 2 7.07 1 23.0 2 9.0281 2 8.1046 2 15.614 2 59.0398 2 5.0 1 0.7807 2 3.0 1 12.2447 2 0.5937 2 1.5191 10 26.0 2 9.3178 3 0.6054 1 93.0 2)
Average genome size in population (length): 28.187
Average program size in population (points): 29.187
Average percent parens in population: 0.036
Minimum age in population: 19.6943359375
Maximum age in population: 24.75079345703125
Average age in population: 22.55394885253906
Median age in population: 22.60043334960938
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 95
Genome diversity (% unique Plush genomes):	 0.569
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 95
Syntactic diversity (% unique Push programs):	 0.569
Total error diversity:				 0.055
Error (vector) diversity:			 0.059
Behavioral diversity:				 0.059
--- Run Statistics ---
Number of program evaluations used so far: 16000
Number of point (instruction) evaluations so far: 12671464
--- Timings ---
Current time: 1529615032285 milliseconds
Total Time:          49.1 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        20.0 seconds, 40.7%
Fitness Testing:     23.9 seconds, 48.6%
Report:               5.1 seconds, 10.5%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 15
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 16
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 16
;;******************************
;; -*- Number IO problem report - generation 16
Test total error for best: 68179.69360000004
Test mean error for best: 34.08985
;;------------------------------
Outputs of best individual on training cases:
Correct output: -54.078495011  | Program output: -97.078495011 
Correct output: 13.1534720339  | Program output: -4.8465279661 
Correct output: 41.2049141439  | Program output: 12.435830601  
Correct output: -6.0487858971  | Program output: 1.7890507099  
Correct output: -75.9491370053 | Program output: -35.9491370053
Correct output: 49.8479113478  | Program output: -32.1520886522
Correct output: -43.0947106158 | Program output: 12.435830601  
Correct output: -6.035421      | Program output: -2.035421     
Correct output: -64.6496412859 | Program output: -16.6496412859
Correct output: -8.4475981317  | Program output: -95.4475981317
Correct output: -61.9056292771 | Program output: -84.9056292771
Correct output: -100.2670640218 | Program output: -84.498539513 
Correct output: 33.5793532538  | Program output: 12.435830601  
Correct output: -71.5665679812 | Program output: -36.5665679812
Correct output: -150.2787840572 | Program output: -71.2787840572
Correct output: -33.4710147358 | Program output: -38.4710147358
Correct output: 12.2165113619  | Program output: 12.435830601  
Correct output: 16.3988550752  | Program output: 0.327117553   
Correct output: -103.483665155 | Program output: -79.483665155 
Correct output: -16.1113007238 | Program output: -69.1113007238
Correct output: 1.5190821923   | Program output: -23.4809178077
Correct output: 56.222608134   | Program output: 12.435830601  
Correct output: -100.5567747653 | Program output: -71.5567747653
Correct output: 20.8692780643  | Program output: 12.435830601  
Correct output: 137.7657204956 | Program output: 12.435830601  
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_rot} {:instruction integer_pop} {:instruction in1} {:instruction integer_mod} {:instruction float_dec} {:instruction integer_inc} {:instruction integer_sub} {:instruction float_mult} {:instruction 23.47472230998136} {:instruction integer_min} {:instruction integer_pop} {:instruction float_swap} {:instruction float_min} {:instruction float_tan} {:instruction integer_dup} {:instruction in1} {:instruction float_min} {:instruction float_inc} {:instruction integer_inc} {:instruction float_min} {:instruction print_float} {:instruction integer_rot} {:instruction integer_flush} {:instruction print_float} {:instruction integer_rot} {:instruction integer_flush} {:instruction float_tan} {:instruction in2} {:instruction integer_sub} {:instruction float_add})
Best program: (integer_rot integer_pop in1 integer_mod float_dec integer_inc integer_sub float_mult 23.47472230998136 integer_min integer_pop float_swap float_min float_tan integer_dup in1 float_min float_inc integer_inc float_min print_float integer_rot integer_flush print_float integer_rot integer_flush float_tan in2 integer_sub float_add)
Errors: [43.0 2 18.0 12 28.7691 11 7.8378 11 40.0 1 82.0 13 55.5305 11 4.0 1 48.0 2 87.0 2 23.0 2 15.7685 12 21.1435 10 35.0 2 79.0 3 5.0 1 0.2193 8 16.0717 10 24.0 3 53.0 2 25.0 13 43.7868 11 29.0 3 8.4334 10 125.3299 10]
Total: 1083.8905
Mean: 21.67781
Genome size: 30
Size: 31
Percent parens: 0.032
--- Population Statistics ---
Average total errors in population: 2297.864962199983
Median total errors in population: 1089.4519
Error averages by case: (95.91332700000001 2.692 66.39757829999999 12.145 73.86826020000011 10.799 56.54043740000031 11.216 87.67143540000001 2.695 128.1850343 13.176 102.3694110999985 10.693 51.020698 1.517 93.72662910000001 2.693 133.16480090000002 2.648 73.8791488 2.727 84.4206938000001 9.064 66.6482729999994 9.677 82.9879306 2.704 125.61706020000003 3.674 56.06700609999999 1.963 52.060201800000186 9.492 61.03214280000029 8.188 73.5094209 2.894 101.7099553 2.736 73.59424310000003 12.911 87.14967480000095 10.788 78.1660892 3.694 56.12738070000068 10.152 164.89112939999973 10.209)
Error minima by case: (43.0 2 10.3213 7 12.0 2 1.1134 8 31.8828 1 26.3732 10 0.9717 9 0.0 0 20.5833 2 7.5156 1 23.0 2 13.7685 2 9.1046 2 27.5002 2 75.0 2 5.0 1 0.2193 2 3.0 1 20.0 2 16.1113 2 0.5191 9 28.0 2 25.0 3 1.6054 2 95.0 3)
Average genome size in population (length): 33.744
Average program size in population (points): 34.744
Average percent parens in population: 0.030
Minimum age in population: 21.146728515625
Maximum age in population: 25.92092895507812
Average age in population: 23.918462890625
Median age in population: 23.93093872070312
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 237
Genome diversity (% unique Plush genomes):	 0.516
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 237
Syntactic diversity (% unique Push programs):	 0.516
Total error diversity:				 0.057
Error (vector) diversity:			 0.06
Behavioral diversity:				 0.06
--- Run Statistics ---
Number of program evaluations used so far: 17000
Number of point (instruction) evaluations so far: 13515064
--- Timings ---
Current time: 1529615035149 milliseconds
Total Time:          52.0 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        21.2 seconds, 40.7%
Fitness Testing:     25.3 seconds, 48.5%
Report:               5.5 seconds, 10.6%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 16
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 17
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 17
;;******************************
;; -*- Number IO problem report - generation 17
Test total error for best: 68179.69360000004
Test mean error for best: 34.08985
;;------------------------------
Outputs of best individual on training cases:
Correct output: -54.078495011  | Program output: -97.078495011 
Correct output: 13.1534720339  | Program output: -4.8465279661 
Correct output: 41.2049141439  | Program output: 12.435830601  
Correct output: -6.0487858971  | Program output: 1.7890507099  
Correct output: -75.9491370053 | Program output: -35.9491370053
Correct output: 49.8479113478  | Program output: -32.1520886522
Correct output: -43.0947106158 | Program output: 12.435830601  
Correct output: -6.035421      | Program output: -2.035421     
Correct output: -64.6496412859 | Program output: -16.6496412859
Correct output: -8.4475981317  | Program output: -95.4475981317
Correct output: -61.9056292771 | Program output: -84.9056292771
Correct output: -100.2670640218 | Program output: -84.498539513 
Correct output: 33.5793532538  | Program output: 12.435830601  
Correct output: -71.5665679812 | Program output: -36.5665679812
Correct output: -150.2787840572 | Program output: -71.2787840572
Correct output: -33.4710147358 | Program output: -38.4710147358
Correct output: 12.2165113619  | Program output: 12.435830601  
Correct output: 16.3988550752  | Program output: 0.327117553   
Correct output: -103.483665155 | Program output: -79.483665155 
Correct output: -16.1113007238 | Program output: -69.1113007238
Correct output: 1.5190821923   | Program output: -23.4809178077
Correct output: 56.222608134   | Program output: 12.435830601  
Correct output: -100.5567747653 | Program output: -71.5567747653
Correct output: 20.8692780643  | Program output: 12.435830601  
Correct output: 137.7657204956 | Program output: 12.435830601  
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_rot} {:instruction integer_pop} {:instruction in1} {:instruction integer_mod} {:instruction float_dec} {:instruction integer_inc} {:instruction integer_sub} {:instruction float_mult} {:instruction 23.47472230998136} {:instruction integer_min} {:instruction integer_pop} {:instruction float_swap} {:instruction float_min} {:instruction float_tan} {:instruction integer_dup} {:instruction in1} {:instruction float_min} {:instruction float_inc} {:instruction integer_stackdepth} {:instruction float_min} {:instruction print_float} {:instruction float_inc} {:instruction float_dec} {:instruction float_min} {:instruction print_float} {:instruction integer_rot} {:instruction integer_flush} {:instruction float_flush} {:instruction in2} {:instruction integer_sub} {:instruction in1})
Best program: (integer_rot integer_pop in1 integer_mod float_dec integer_inc integer_sub float_mult 23.47472230998136 integer_min integer_pop float_swap float_min float_tan integer_dup in1 float_min float_inc integer_stackdepth float_min print_float float_inc float_dec float_min print_float integer_rot integer_flush float_flush in2 integer_sub in1)
Errors: [43.0 2 18.0 12 28.7691 11 7.8378 11 40.0 1 82.0 13 55.5305 11 4.0 1 48.0 2 87.0 2 23.0 2 15.7685 12 21.1435 10 35.0 2 79.0 3 5.0 1 0.2193 8 16.0717 10 24.0 3 53.0 2 25.0 13 43.7868 11 29.0 3 8.4334 10 125.3299 10]
Total: 1083.8905
Mean: 21.67781
Genome size: 31
Size: 32
Percent parens: 0.031
--- Population Statistics ---
Average total errors in population: 2092.311067499989
Median total errors in population: 1089.4519
Error averages by case: (88.79339 2.542 56.77639540000001 12.081 64.86446889999931 10.986 43.16602510000054 11.134 81.38458250000001 2.548 123.35450990000002 13.094 88.47535529999905 11.03 39.62855490000001 1.439 84.52187650000002 2.559 129.6839362 2.553 69.16478359999999 2.579 63.876446099998915 11.097 58.39197089999892 10.078 76.80581819999999 2.557 120.74726100000001 3.548 50.885454900000006 1.613 38.14779679999991 9.259 51.77547400000037 9.813 68.31008050000001 2.594 97.4992013 2.562 66.58955 13.019 79.27541210000122 10.953 73.0483729 3.557 45.58007320000101 10.12 158.07127730000013 10.178)
Error minima by case: (43.0 2 5.9571 7 13.0 2 1.0488 8 38.0 1 26.3732 10 7.6253 9 1.0354 1 46.0 2 3.4476 2 23.0 2 13.7685 2 8.5717 2 33.0 2 77.0 3 5.0 1 0.2193 2 4.963 2 22.0 2 11.1113 2 5.6773 8 27.0 2 27.0 3 0.4827 2 94.0 2)
Average genome size in population (length): 35.645
Average program size in population (points): 36.645
Average percent parens in population: 0.028
Minimum age in population: 22.669921875
Maximum age in population: 27.26840209960938
Average age in population: 25.34865051269531
Median age in population: 25.39981842041016
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 224
Genome diversity (% unique Plush genomes):	 0.501
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 224
Syntactic diversity (% unique Push programs):	 0.501
Total error diversity:				 0.064
Error (vector) diversity:			 0.064
Behavioral diversity:				 0.065
--- Run Statistics ---
Number of program evaluations used so far: 18000
Number of point (instruction) evaluations so far: 14406239
--- Timings ---
Current time: 1529615038016 milliseconds
Total Time:          54.9 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        22.3 seconds, 40.7%
Fitness Testing:     26.7 seconds, 48.6%
Report:               5.8 seconds, 10.6%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 17
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 18
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 18
;;******************************
;; -*- Number IO problem report - generation 18
Test total error for best: 63249.20700000002
Test mean error for best: 31.62460
;;------------------------------
Outputs of best individual on training cases:
Correct output: -54.078495011  | Program output: -98.078495011 
Correct output: 13.1534720339  | Program output: -5.8465279661 
Correct output: 41.2049141439  | Program output: 34.910552911  
Correct output: -6.0487858971  | Program output: 7.9512141029  
Correct output: -75.9491370053 | Program output: -36.9491370053
Correct output: 49.8479113478  | Program output: -33.1520886522
Correct output: -43.0947106158 | Program output: 34.910552911  
Correct output: -6.035421      | Program output: -3.035421     
Correct output: -64.6496412859 | Program output: -17.6496412859
Correct output: -8.4475981317  | Program output: -96.4475981317
Correct output: -61.9056292771 | Program output: -85.9056292771
Correct output: -100.2670640218 | Program output: -62.023817203 
Correct output: 33.5793532538  | Program output: 34.910552911  
Correct output: -71.5665679812 | Program output: -37.5665679812
Correct output: -150.2787840572 | Program output: -72.2787840572
Correct output: -33.4710147358 | Program output: -39.4710147358
Correct output: 12.2165113619  | Program output: 34.910552911  
Correct output: 16.3988550752  | Program output: 22.3988550752 
Correct output: -103.483665155 | Program output: -80.483665155 
Correct output: -16.1113007238 | Program output: -70.1113007238
Correct output: 1.5190821923   | Program output: -24.4809178077
Correct output: 56.222608134   | Program output: 29.222608134  
Correct output: -100.5567747653 | Program output: -72.5567747653
Correct output: 20.8692780643  | Program output: 34.910552911  
Correct output: 137.7657204956 | Program output: 34.910552911  
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_rot} {:instruction integer_pop} {:instruction in1} {:instruction integer_mod} {:instruction float_dec} {:instruction integer_inc} {:instruction integer_sub} {:instruction float_mult} {:instruction 23.47472230998136} {:instruction integer_min} {:instruction integer_pop} {:instruction float_swap} {:instruction float_min} {:instruction float_tan} {:instruction integer_dup} {:instruction in1} {:instruction float_min} {:instruction float_mult} {:instruction 23.47472230998136} {:instruction float_add} {:instruction integer_mod} {:instruction integer_inc} {:instruction float_min} {:instruction tagged_372} {:instruction integer_dup} {:instruction in1} {:instruction float_min} {:instruction -5} {:instruction integer_div} {:instruction float_min} {:instruction print_float} {:instruction integer_rot} {:instruction integer_flush} {:instruction print_integer} {:instruction in2} {:instruction float_inc} {:instruction float_add})
Best program: (integer_rot integer_pop in1 integer_mod float_dec integer_inc integer_sub float_mult 23.47472230998136 integer_min integer_pop float_swap float_min float_tan integer_dup in1 float_min float_mult 23.47472230998136 float_add integer_mod integer_inc float_min tagged_372 integer_dup in1 float_min -5 integer_div float_min print_float integer_rot integer_flush print_integer in2 float_inc float_add)
Errors: [44.0 2 19.0 12 6.2944 11 14.0 12 39.0 2 83.0 13 78.0053 11 3.0 1 47.0 2 88.0 2 24.0 2 38.2432 12 1.3312 9 34.0 2 78.0 3 6.0 1 22.694 9 6.0 2 23.0 2 54.0 2 26.0 13 27.0 2 28.0 3 14.0413 12 102.8552 10]
Total: 1058.4646
Mean: 21.169292
Genome size: 37
Size: 38
Percent parens: 0.026
--- Population Statistics ---
Average total errors in population: 1967.882255499989
Median total errors in population: 1089.4519
Error averages by case: (84.50319540000002 2.521 52.23109390000001 12.047 60.07110369999916 10.965 38.30556670000057 11.123 76.2057673 2.455 118.109982 13.063 84.73508639999893 11.035 35.63049889999999 1.405 80.208047 2.527 123.9756822 2.515 63.51286770000001 2.566 59.047609899998946 11.055 52.952793099998885 10.065 71.53858930000001 2.529 115.4145899 3.512 45.187820099999996 1.577 33.130959299999624 9.147 47.039965500000385 9.802 62.684659800000006 2.621 91.8748556 2.545 61.517224500000005 12.997 74.48229130000121 10.929 67.42893670000001 3.524 40.747727400001 10.094 154.56634190000014 10.16)
Error minima by case: (36.3013 2 10.3213 7 6.2944 2 1.54 8 15.5253 1 26.3732 10 20.7788 9 1.0 1 23.5253 2 7.9322 1 23.0 2 8.7062 2 1.3312 2 10.5253 2 54.5253 3 5.0 1 0.0026 2 1.695 2 0.4747 2 13.9786 2 0.756 8 27.0 2 4.5253 3 1.5808 2 94.0 2)
Average genome size in population (length): 35.124
Average program size in population (points): 36.124
Average percent parens in population: 0.028
Minimum age in population: 24.3223876953125
Maximum age in population: 28.83146667480469
Average age in population: 26.86594784545898
Median age in population: 26.88165664672852
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 159
Genome diversity (% unique Plush genomes):	 0.554
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 159
Syntactic diversity (% unique Push programs):	 0.554
Total error diversity:				 0.062
Error (vector) diversity:			 0.063
Behavioral diversity:				 0.063
--- Run Statistics ---
Number of program evaluations used so far: 19000
Number of point (instruction) evaluations so far: 15284414
--- Timings ---
Current time: 1529615040947 milliseconds
Total Time:          57.8 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        23.5 seconds, 40.7%
Fitness Testing:     28.1 seconds, 48.6%
Report:               6.1 seconds, 10.5%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 18
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 19
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 19
;;******************************
;; -*- Number IO problem report - generation 19
Test total error for best: 63249.20700000002
Test mean error for best: 31.62460
;;------------------------------
Outputs of best individual on training cases:
Correct output: -54.078495011  | Program output: -98.078495011 
Correct output: 13.1534720339  | Program output: -5.8465279661 
Correct output: 41.2049141439  | Program output: 34.910552911  
Correct output: -6.0487858971  | Program output: 7.9512141029  
Correct output: -75.9491370053 | Program output: -36.9491370053
Correct output: 49.8479113478  | Program output: -33.1520886522
Correct output: -43.0947106158 | Program output: 34.910552911  
Correct output: -6.035421      | Program output: -3.035421     
Correct output: -64.6496412859 | Program output: -17.6496412859
Correct output: -8.4475981317  | Program output: -96.4475981317
Correct output: -61.9056292771 | Program output: -85.9056292771
Correct output: -100.2670640218 | Program output: -62.023817203 
Correct output: 33.5793532538  | Program output: 34.910552911  
Correct output: -71.5665679812 | Program output: -37.5665679812
Correct output: -150.2787840572 | Program output: -72.2787840572
Correct output: -33.4710147358 | Program output: -39.4710147358
Correct output: 12.2165113619  | Program output: 34.910552911  
Correct output: 16.3988550752  | Program output: 22.3988550752 
Correct output: -103.483665155 | Program output: -80.483665155 
Correct output: -16.1113007238 | Program output: -70.1113007238
Correct output: 1.5190821923   | Program output: -24.4809178077
Correct output: 56.222608134   | Program output: 29.222608134  
Correct output: -100.5567747653 | Program output: -72.5567747653
Correct output: 20.8692780643  | Program output: 34.910552911  
Correct output: 137.7657204956 | Program output: 34.910552911  
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_rot} {:instruction integer_pop} {:instruction in1} {:instruction integer_mod} {:instruction float_dec} {:instruction integer_inc} {:instruction integer_pop} {:instruction float_mult} {:instruction 23.47472230998136} {:instruction integer_min} {:instruction integer_pop} {:instruction float_swap} {:instruction float_min} {:instruction float_tan} {:instruction integer_dup} {:instruction in1} {:instruction float_min} {:instruction float_mult} {:instruction 23.47472230998136} {:instruction integer_min} {:instruction integer_mod} {:instruction float_add} {:instruction float_min} {:instruction tagged_372} {:instruction integer_dup} {:instruction in1} {:instruction float_min} {:instruction -5} {:instruction integer_div} {:instruction float_min} {:instruction print_float} {:instruction integer_rot} {:instruction integer_flush} {:instruction float_tan} {:instruction in2} {:instruction integer_sub})
Best program: (integer_rot integer_pop in1 integer_mod float_dec integer_inc integer_pop float_mult 23.47472230998136 integer_min integer_pop float_swap float_min float_tan integer_dup in1 float_min float_mult 23.47472230998136 integer_min integer_mod float_add float_min tagged_372 integer_dup in1 float_min -5 integer_div float_min print_float integer_rot integer_flush float_tan in2 integer_sub)
Errors: [44.0 2 19.0 12 6.2944 11 14.0 12 39.0 2 83.0 13 78.0053 11 3.0 1 47.0 2 88.0 2 24.0 2 38.2432 12 1.3312 9 34.0 2 78.0 3 6.0 1 22.694 9 6.0 2 23.0 2 54.0 2 26.0 13 27.0 2 28.0 3 14.0413 12 102.8552 10]
Total: 1058.4646
Mean: 21.169292
Genome size: 36
Size: 37
Percent parens: 0.027
--- Population Statistics ---
Average total errors in population: 2390.102887999992
Median total errors in population: 1089.4519
Error averages by case: (96.7811186 2.708 71.3686846 12.172 80.62670460000007 10.963 60.49123540000062 11.261 90.66610639999998 2.383 130.89961889999998 13.174 105.39060829999848 11.171 56.22386290000001 1.557 98.0548101 2.718 135.2653863 2.695 76.06401430000001 2.756 75.92232889999971 11.026 73.51839479999947 10.085 85.9408351 2.729 127.93850479999999 3.714 58.686224100000004 1.781 55.49911210000007 8.947 67.81654900000036 9.726 75.9551363 3.072 103.75722460000001 2.761 77.10660299999999 13.108 94.88027720000115 10.82 80.567306 3.727 63.31071730000106 10.14 172.0025244000006 10.175)
Error minima by case: (43.0 2 5.7433 7 6.2944 2 1.1134 8 38.0 1 26.3732 10 7.6253 8 2.0 1 46.0 2 5.8768 2 23.0 2 13.7685 2 1.3312 2 33.0 2 67.463 3 5.0 1 0.2193 2 2.41 2 22.0 2 16.115 2 0.7241 9 26.0 2 3.8777 3 1.6054 2 93.0 2)
Average genome size in population (length): 33.736
Average program size in population (points): 34.736
Average percent parens in population: 0.029
Minimum age in population: 25.89192199707031
Maximum age in population: 30.14238357543945
Average age in population: 28.26043214035034
Median age in population: 28.32059669494629
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 73
Genome diversity (% unique Plush genomes):	 0.588
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 73
Syntactic diversity (% unique Push programs):	 0.588
Total error diversity:				 0.078
Error (vector) diversity:			 0.079
Behavioral diversity:				 0.079
--- Run Statistics ---
Number of program evaluations used so far: 20000
Number of point (instruction) evaluations so far: 16127914
--- Timings ---
Current time: 1529615043862 milliseconds
Total Time:          60.7 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        24.7 seconds, 40.7%
Fitness Testing:     29.5 seconds, 48.5%
Report:               6.5 seconds, 10.6%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 19
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 20
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 20
;;******************************
;; -*- Number IO problem report - generation 20
Test total error for best: 63249.20700000002
Test mean error for best: 31.62460
;;------------------------------
Outputs of best individual on training cases:
Correct output: -54.078495011  | Program output: -98.078495011 
Correct output: 13.1534720339  | Program output: -5.8465279661 
Correct output: 41.2049141439  | Program output: 34.910552911  
Correct output: -6.0487858971  | Program output: 7.9512141029  
Correct output: -75.9491370053 | Program output: -36.9491370053
Correct output: 49.8479113478  | Program output: -33.1520886522
Correct output: -43.0947106158 | Program output: 34.910552911  
Correct output: -6.035421      | Program output: -3.035421     
Correct output: -64.6496412859 | Program output: -17.6496412859
Correct output: -8.4475981317  | Program output: -96.4475981317
Correct output: -61.9056292771 | Program output: -85.9056292771
Correct output: -100.2670640218 | Program output: -62.023817203 
Correct output: 33.5793532538  | Program output: 34.910552911  
Correct output: -71.5665679812 | Program output: -37.5665679812
Correct output: -150.2787840572 | Program output: -72.2787840572
Correct output: -33.4710147358 | Program output: -39.4710147358
Correct output: 12.2165113619  | Program output: 34.910552911  
Correct output: 16.3988550752  | Program output: 22.3988550752 
Correct output: -103.483665155 | Program output: -80.483665155 
Correct output: -16.1113007238 | Program output: -70.1113007238
Correct output: 1.5190821923   | Program output: -24.4809178077
Correct output: 56.222608134   | Program output: 29.222608134  
Correct output: -100.5567747653 | Program output: -72.5567747653
Correct output: 20.8692780643  | Program output: 34.910552911  
Correct output: 137.7657204956 | Program output: 34.910552911  
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_rot} {:instruction integer_pop} {:instruction in1} {:instruction integer_mod} {:instruction float_dec} {:instruction integer_inc} {:instruction integer_pop} {:instruction float_mult} {:instruction 23.47472230998136} {:instruction integer_min} {:instruction integer_pop} {:instruction float_swap} {:instruction float_min} {:instruction float_tan} {:instruction integer_dup} {:instruction in1} {:instruction float_min} {:instruction float_mult} {:instruction 23.47472230998136} {:instruction integer_min} {:instruction integer_mod} {:instruction float_add} {:instruction float_min} {:instruction tagged_372} {:instruction integer_dup} {:instruction in1} {:instruction float_min} {:instruction -5} {:instruction integer_div} {:instruction float_min} {:instruction print_float} {:instruction integer_rot} {:instruction integer_flush} {:instruction float_tan} {:instruction in2} {:instruction integer_sub})
Best program: (integer_rot integer_pop in1 integer_mod float_dec integer_inc integer_pop float_mult 23.47472230998136 integer_min integer_pop float_swap float_min float_tan integer_dup in1 float_min float_mult 23.47472230998136 integer_min integer_mod float_add float_min tagged_372 integer_dup in1 float_min -5 integer_div float_min print_float integer_rot integer_flush float_tan in2 integer_sub)
Errors: [44.0 2 19.0 12 6.2944 11 14.0 12 39.0 2 83.0 13 78.0053 11 3.0 1 47.0 2 88.0 2 24.0 2 38.2432 12 1.3312 9 34.0 2 78.0 3 6.0 1 22.694 9 6.0 2 23.0 2 54.0 2 26.0 13 27.0 2 28.0 3 14.0413 12 102.8552 10]
Total: 1058.4646
Mean: 21.169292
Genome size: 36
Size: 37
Percent parens: 0.027
--- Population Statistics ---
Average total errors in population: 1994.647995199989
Median total errors in population: 1083.8905
Error averages by case: (80.57995130000002 2.55 53.9959037 12.126 62.734009599999226 10.988 44.1803285000005 11.24 76.5048666 1.821 116.18661339999998 13.133 90.66401749999879 11.117 39.893665899999995 1.477 83.0366201 2.575 120.7839825 2.565 61.03457150000001 2.593 60.55190679999903 11.064 55.595638999999096 10.027 71.73847390000002 2.594 114.95761140000003 3.565 43.3190122 1.623 38.72244969999997 8.486 50.259524100000334 9.42 62.170285000000014 3.367 88.78214570000002 2.598 61.1328315 13.067 77.48588620000109 10.48 66.82678760000002 3.579 45.26428590000088 10.194 155.85562560000017 10.142)
Error minima by case: (42.0 2 5.7433 7 4.3905 2 1.54 8 38.0 1 25.3732 10 40.3738 9 1.9553 1 46.0 2 5.8768 2 22.0 2 13.7685 2 0.3312 2 33.0 2 77.0 2 4.0 1 0.2193 2 3.963 2 22.0 2 15.7569 2 0.4158 9 26.0 2 27.0 2 0.4827 2 94.0 2)
Average genome size in population (length): 32.009
Average program size in population (points): 33.009
Average percent parens in population: 0.031
Minimum age in population: 27.61081886291504
Maximum age in population: 31.81763648986816
Average age in population: 29.72823397445679
Median age in population: 29.79548740386963
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 143
Genome diversity (% unique Plush genomes):	 0.488
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 143
Syntactic diversity (% unique Push programs):	 0.488
Total error diversity:				 0.084
Error (vector) diversity:			 0.087
Behavioral diversity:				 0.087
--- Run Statistics ---
Number of program evaluations used so far: 21000
Number of point (instruction) evaluations so far: 16928164
--- Timings ---
Current time: 1529615046940 milliseconds
Total Time:          63.7 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        26.0 seconds, 40.7%
Fitness Testing:     30.9 seconds, 48.4%
Report:               6.8 seconds, 10.6%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 20
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 21
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 21
;;******************************
;; -*- Number IO problem report - generation 21
Test total error for best: 63249.20700000002
Test mean error for best: 31.62460
;;------------------------------
Outputs of best individual on training cases:
Correct output: -54.078495011  | Program output: -98.078495011 
Correct output: 13.1534720339  | Program output: -5.8465279661 
Correct output: 41.2049141439  | Program output: 34.910552911  
Correct output: -6.0487858971  | Program output: 7.9512141029  
Correct output: -75.9491370053 | Program output: -36.9491370053
Correct output: 49.8479113478  | Program output: -33.1520886522
Correct output: -43.0947106158 | Program output: 34.910552911  
Correct output: -6.035421      | Program output: -3.035421     
Correct output: -64.6496412859 | Program output: -17.6496412859
Correct output: -8.4475981317  | Program output: -96.4475981317
Correct output: -61.9056292771 | Program output: -85.9056292771
Correct output: -100.2670640218 | Program output: -62.023817203 
Correct output: 33.5793532538  | Program output: 34.910552911  
Correct output: -71.5665679812 | Program output: -37.5665679812
Correct output: -150.2787840572 | Program output: -72.2787840572
Correct output: -33.4710147358 | Program output: -39.4710147358
Correct output: 12.2165113619  | Program output: 34.910552911  
Correct output: 16.3988550752  | Program output: 22.3988550752 
Correct output: -103.483665155 | Program output: -80.483665155 
Correct output: -16.1113007238 | Program output: -70.1113007238
Correct output: 1.5190821923   | Program output: -24.4809178077
Correct output: 56.222608134   | Program output: 29.222608134  
Correct output: -100.5567747653 | Program output: -72.5567747653
Correct output: 20.8692780643  | Program output: 34.910552911  
Correct output: 137.7657204956 | Program output: 34.910552911  
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_rot} {:instruction integer_fromfloat} {:instruction in1} {:instruction integer_mod} {:instruction float_dec} {:instruction integer_sub} {:instruction float_mult} {:instruction 23.47472230998136} {:instruction integer_min} {:instruction float_swap} {:instruction float_min} {:instruction float_tan} {:instruction integer_dup} {:instruction in1} {:instruction float_min} {:instruction float_mult} {:instruction 23.47472230998136} {:instruction float_add} {:instruction integer_mod} {:instruction integer_inc} {:instruction float_min} {:instruction tagged_372} {:instruction integer_dup} {:instruction in1} {:instruction float_min} {:instruction -5} {:instruction integer_div} {:instruction float_min} {:instruction print_float} {:instruction integer_rot} {:instruction integer_flush} {:instruction tag_integer_266} {:instruction integer_sub} {:instruction float_inc} {:instruction float_add})
Best program: (integer_rot integer_fromfloat in1 integer_mod float_dec integer_sub float_mult 23.47472230998136 integer_min float_swap float_min float_tan integer_dup in1 float_min float_mult 23.47472230998136 float_add integer_mod integer_inc float_min tagged_372 integer_dup in1 float_min -5 integer_div float_min print_float integer_rot integer_flush tag_integer_266 integer_sub float_inc float_add)
Errors: [44.0 2 19.0 12 6.2944 11 14.0 12 39.0 2 83.0 13 78.0053 11 3.0 1 47.0 2 88.0 2 24.0 2 38.2432 12 1.3312 9 34.0 2 78.0 3 6.0 1 22.694 9 6.0 2 23.0 2 54.0 2 26.0 13 27.0 2 28.0 3 14.0413 12 102.8552 10]
Total: 1058.4646
Mean: 21.169292
Genome size: 35
Size: 36
Percent parens: 0.028
--- Population Statistics ---
Average total errors in population: 2267.8325497999904
Median total errors in population: 1083.8905
Error averages by case: (92.81105269999999 2.725 63.946478700000014 12.146 67.86836459999923 11.0 56.91553960000049 11.527 88.32815429999997 2.19 126.87008729999995 13.137 106.49717569999885 11.147 50.777188200000005 1.61 93.8712951 2.771 131.73387269999995 2.738 72.82848540000003 2.778 77.32652439999956 11.185 61.52719059999935 9.787 83.65493770000002 2.772 126.77847080000002 3.733 55.0640611 1.816 55.119976799999705 8.719 58.75425490000025 7.603 74.73297529999999 3.375 100.22877470000002 2.796 71.8548984 13.045 82.77587480000082 8.383 79.30928329999998 3.751 57.7511195000005 10.651 159.0165132000004 10.105)
Error minima by case: (20.5253 2 3.4747 9 4.1409 2 1.0407 9 37.0 1 42.8559 8 2.6959 8 1.0 1 45.0 2 7.639 1 0.5253 2 14.7685 2 0.3312 2 32.0 2 76.0 2 4.0 1 0.2193 2 2.963 2 21.0 2 15.2719 2 0.118 7 21.3121 2 26.0 2 0.4691 2 93.0 2)
Average genome size in population (length): 33.061
Average program size in population (points): 34.061
Average percent parens in population: 0.030
Minimum age in population: 28.88125228881836
Maximum age in population: 33.17719173431396
Average age in population: 31.23828282737732
Median age in population: 31.24236869812012
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 93
Genome diversity (% unique Plush genomes):	 0.524
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 93
Syntactic diversity (% unique Push programs):	 0.524
Total error diversity:				 0.088
Error (vector) diversity:			 0.091
Behavioral diversity:				 0.092
--- Run Statistics ---
Number of program evaluations used so far: 22000
Number of point (instruction) evaluations so far: 17754739
--- Timings ---
Current time: 1529615049748 milliseconds
Total Time:          66.6 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        27.1 seconds, 40.6%
Fitness Testing:     32.2 seconds, 48.4%
Report:               7.2 seconds, 10.8%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 21
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 22
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 22
;;******************************
;; -*- Number IO problem report - generation 22
Test total error for best: 63799.09800000003
Test mean error for best: 31.89955
;;------------------------------
Outputs of best individual on training cases:
Correct output: -54.078495011  | Program output: -98.078495011 
Correct output: 13.1534720339  | Program output: -5.8465279661 
Correct output: 41.2049141439  | Program output: 32.3365485136 
Correct output: -6.0487858971  | Program output: 7.9512141029  
Correct output: -75.9491370053 | Program output: -36.9491370053
Correct output: 49.8479113478  | Program output: -33.1520886522
Correct output: -43.0947106158 | Program output: 32.3365485136 
Correct output: -6.035421      | Program output: -3.035421     
Correct output: -64.6496412859 | Program output: -17.6496412859
Correct output: -8.4475981317  | Program output: -96.4475981317
Correct output: -61.9056292771 | Program output: -85.9056292771
Correct output: -100.2670640218 | Program output: -64.5978216005
Correct output: 33.5793532538  | Program output: 32.3365485136 
Correct output: -71.5665679812 | Program output: -37.5665679812
Correct output: -150.2787840572 | Program output: -72.2787840572
Correct output: -33.4710147358 | Program output: -39.4710147358
Correct output: 12.2165113619  | Program output: 32.3365485136 
Correct output: 16.3988550752  | Program output: 20.2278354655 
Correct output: -103.483665155 | Program output: -80.483665155 
Correct output: -16.1113007238 | Program output: -70.1113007238
Correct output: 1.5190821923   | Program output: -24.4809178077
Correct output: 56.222608134   | Program output: 29.222608134  
Correct output: -100.5567747653 | Program output: -72.5567747653
Correct output: 20.8692780643  | Program output: 32.3365485136 
Correct output: 137.7657204956 | Program output: 32.3365485136 
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_rot} {:instruction print_float} {:instruction in1} {:instruction integer_mod} {:instruction float_dec} {:instruction integer_inc} {:instruction integer_sub} {:instruction float_mult} {:instruction 23.47472230998136} {:instruction integer_min} {:instruction integer_pop} {:instruction float_swap} {:instruction float_min} {:instruction float_tan} {:instruction integer_dup} {:instruction in1} {:instruction float_min} {:instruction float_mult} {:instruction 20.900717912532325} {:instruction integer_min} {:instruction integer_mod} {:instruction float_add} {:instruction float_min} {:instruction tagged_372} {:instruction integer_dup} {:instruction in1} {:instruction float_min} {:instruction -5} {:instruction integer_div} {:instruction float_min} {:instruction print_float} {:instruction integer_rot} {:instruction integer_flush} {:instruction float_tan} {:instruction in2} {:instruction integer_sub})
Best program: (integer_rot print_float in1 integer_mod float_dec integer_inc integer_sub float_mult 23.47472230998136 integer_min integer_pop float_swap float_min float_tan integer_dup in1 float_min float_mult 20.900717912532325 integer_min integer_mod float_add float_min tagged_372 integer_dup in1 float_min -5 integer_div float_min print_float integer_rot integer_flush float_tan in2 integer_sub)
Errors: [44.0 2 19.0 12 8.8684 11 14.0 12 39.0 2 83.0 13 75.4313 12 3.0 1 47.0 2 88.0 2 24.0 2 35.6692 12 1.2428 9 34.0 2 78.0 3 6.0 1 20.12 8 3.829 9 23.0 2 54.0 2 26.0 13 27.0 2 28.0 3 11.4673 11 105.4292 10]
Total: 1057.0572
Mean: 21.141144
Genome size: 36
Size: 37
Percent parens: 0.027
--- Population Statistics ---
Average total errors in population: 2017.365892599994
Median total errors in population: 1058.4646
Error averages by case: (88.86137279999998 2.642 53.286206100000015 12.02 45.95246659999942 10.632 47.402378900000116 11.906 78.514336 2.551 119.43224319999997 12.995 107.12278150000017 11.156 37.7845835 1.556 82.29564700000002 2.665 125.5018455 2.626 65.21876180000002 2.679 82.53672129999916 10.902 40.97576660000011 9.07 73.85401609999998 2.651 117.64559730000003 3.636 47.17176939999999 1.694 55.79494250000072 8.978 41.955243000000046 3.851 65.0752569 2.775 93.61074839999996 2.708 62.819641299999994 12.948 64.15157760000021 4.189 69.7773429 3.641 50.69518349999977 11.242 138.41246290000097 9.804)
Error minima by case: (19.5253 2 4.4747 7 4.1409 2 3.2034 8 25.5256 1 24.3732 8 2.6959 8 0.3003 1 14.6862 2 8.3893 2 0.4747 2 1.4985 2 0.3312 2 19.9082 2 29.1959 2 4.0 1 0.2193 2 0.6191 2 22.0 2 18.3181 2 0.882 8 3.5253 2 21.0821 2 0.4827 2 70.5253 2)
Average genome size in population (length): 35.683
Average program size in population (points): 36.683
Average percent parens in population: 0.028
Minimum age in population: 30.51263427734375
Maximum age in population: 34.35650730133057
Average age in population: 32.61290144252777
Median age in population: 32.67578315734863
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 68
Genome diversity (% unique Plush genomes):	 0.526
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 68
Syntactic diversity (% unique Push programs):	 0.526
Total error diversity:				 0.099
Error (vector) diversity:			 0.101
Behavioral diversity:				 0.101
--- Run Statistics ---
Number of program evaluations used so far: 23000
Number of point (instruction) evaluations so far: 18646889
--- Timings ---
Current time: 1529615052777 milliseconds
Total Time:          69.5 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        28.2 seconds, 40.5%
Fitness Testing:     33.7 seconds, 48.5%
Report:               7.5 seconds, 10.8%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 22
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 23
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 23
;;******************************
;; -*- Number IO problem report - generation 23
Test total error for best: 63431.07900000002
Test mean error for best: 31.71554
;;------------------------------
Outputs of best individual on training cases:
Correct output: -54.078495011  | Program output: -99.078495011 
Correct output: 13.1534720339  | Program output: -6.8465279661 
Correct output: 41.2049141439  | Program output: 33.910552911  
Correct output: -6.0487858971  | Program output: 6.9512141029  
Correct output: -75.9491370053 | Program output: -37.9491370053
Correct output: 49.8479113478  | Program output: -34.1520886522
Correct output: -43.0947106158 | Program output: 33.910552911  
Correct output: -6.035421      | Program output: -4.035421     
Correct output: -64.6496412859 | Program output: -18.6496412859
Correct output: -8.4475981317  | Program output: -97.4475981317
Correct output: -61.9056292771 | Program output: -86.9056292771
Correct output: -100.2670640218 | Program output: -63.023817203 
Correct output: 33.5793532538  | Program output: 33.910552911  
Correct output: -71.5665679812 | Program output: -38.5665679812
Correct output: -150.2787840572 | Program output: -73.2787840572
Correct output: -33.4710147358 | Program output: -40.4710147358
Correct output: 12.2165113619  | Program output: 33.910552911  
Correct output: 16.3988550752  | Program output: 21.3988550752 
Correct output: -103.483665155 | Program output: -81.483665155 
Correct output: -16.1113007238 | Program output: -71.1113007238
Correct output: 1.5190821923   | Program output: -25.4809178077
Correct output: 56.222608134   | Program output: 28.222608134  
Correct output: -100.5567747653 | Program output: -73.5567747653
Correct output: 20.8692780643  | Program output: 33.910552911  
Correct output: 137.7657204956 | Program output: 33.910552911  
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_rot} {:instruction integer_pop} {:instruction in1} {:instruction integer_mod} {:instruction float_dec} {:instruction integer_inc} {:instruction integer_sub} {:instruction float_add} {:instruction 23.47472230998136} {:instruction integer_min} {:instruction integer_pop} {:instruction float_swap} {:instruction float_min} {:instruction float_tan} {:instruction integer_dup} {:instruction in1} {:instruction float_min} {:instruction float_mult} {:instruction 23.47472230998136} {:instruction integer_min} {:instruction integer_mod} {:instruction float_add} {:instruction float_min} {:instruction tagged_372} {:instruction integer_inc} {:instruction float_min} {:instruction tagged_372} {:instruction integer_dup} {:instruction in1} {:instruction float_min} {:instruction -5} {:instruction float_dec} {:instruction float_min} {:instruction print_float} {:instruction integer_rot} {:instruction integer_flush} {:instruction float_tan} {:instruction float_tan} {:instruction in2} {:instruction integer_sub} {:instruction float_add})
Best program: (integer_rot integer_pop in1 integer_mod float_dec integer_inc integer_sub float_add 23.47472230998136 integer_min integer_pop float_swap float_min float_tan integer_dup in1 float_min float_mult 23.47472230998136 integer_min integer_mod float_add float_min tagged_372 integer_inc float_min tagged_372 integer_dup in1 float_min -5 float_dec float_min print_float integer_rot integer_flush float_tan float_tan in2 integer_sub float_add)
Errors: [45.0 2 20.0 12 7.2944 11 13.0 11 38.0 2 84.0 13 77.0053 11 2.0 1 46.0 2 89.0 2 25.0 2 37.2432 12 0.3312 8 33.0 2 77.0 3 7.0 2 21.694 9 5.0 2 22.0 3 55.0 2 27.0 12 28.0 2 27.0 3 13.0413 12 103.8552 10]
Total: 1054.4646
Mean: 21.089293
Genome size: 41
Size: 42
Percent parens: 0.024
--- Population Statistics ---
Average total errors in population: 2190.902199699989
Median total errors in population: 1058.4646
Error averages by case: (95.40829499999995 2.71 60.6414781 12.032 48.85937279999954 10.635 54.6864066 12.025 86.26572430000004 2.734 127.69699369999994 13.007 114.77400800000068 11.195 44.83242649999999 1.605 89.33081380000004 2.777 134.02883439999994 2.716 73.8560693 2.751 90.7056615999988 11.011 44.23480780000034 8.957 81.72272780000002 2.718 125.68119890000007 3.714 55.93076539999999 1.797 63.4857290000009 9.027 47.234812499999975 3.003 73.491446 2.755 102.14872929999993 2.762 71.00784059999998 12.938 67.83267610000007 3.224 78.4105702 3.727 56.694506099999614 11.456 140.8143059000012 9.85)
Error minima by case: (20.5253 2 1.3718 9 5.2944 2 1.0488 9 25.5256 1 40.6024 8 2.6959 8 0.0467 1 14.6862 2 3.4476 2 0.5253 2 14.6814 2 0.3312 2 19.9082 2 29.1959 3 5.0 1 0.2193 2 3.829 2 22.0 2 11.1113 2 0.9124 8 7.9106 2 21.0821 3 0.4827 2 59.0894 2)
Average genome size in population (length): 35.883
Average program size in population (points): 36.883
Average percent parens in population: 0.027
Minimum age in population: 31.88807582855225
Maximum age in population: 35.82230305671692
Average age in population: 34.03788655924797
Median age in population: 34.07612752914429
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 78
Genome diversity (% unique Plush genomes):	 0.524
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 78
Syntactic diversity (% unique Push programs):	 0.524
Total error diversity:				 0.073
Error (vector) diversity:			 0.074
Behavioral diversity:				 0.075
--- Run Statistics ---
Number of program evaluations used so far: 24000
Number of point (instruction) evaluations so far: 19543989
--- Timings ---
Current time: 1529615055860 milliseconds
Total Time:          72.7 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        29.4 seconds, 40.4%
Fitness Testing:     35.2 seconds, 48.5%
Report:               7.9 seconds, 10.9%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 23
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 24
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 24
;;******************************
;; -*- Number IO problem report - generation 24
Test total error for best: 61339.43140000002
Test mean error for best: 30.66972
;;------------------------------
Outputs of best individual on training cases:
Correct output: -54.078495011  | Program output: -98.078495011 
Correct output: 13.1534720339  | Program output: -5.8465279661 
Correct output: 41.2049141439  | Program output: 34.910552911  
Correct output: -6.0487858971  | Program output: 7.9512141029  
Correct output: -75.9491370053 | Program output: -36.9491370053
Correct output: 49.8479113478  | Program output: -33.1520886522
Correct output: -43.0947106158 | Program output: 34.910552911  
Correct output: -6.035421      | Program output: -3.035421     
Correct output: -64.6496412859 | Program output: -17.6496412859
Correct output: -8.4475981317  | Program output: -96.4475981317
Correct output: -61.9056292771 | Program output: -85.9056292771
Correct output: -100.2670640218 | Program output: -16.2670640218
Correct output: 33.5793532538  | Program output: 34.910552911  
Correct output: -71.5665679812 | Program output: -37.5665679812
Correct output: -150.2787840572 | Program output: -132.6902251387
Correct output: -33.4710147358 | Program output: -39.4710147358
Correct output: 12.2165113619  | Program output: 34.910552911  
Correct output: 16.3988550752  | Program output: 22.3988550752 
Correct output: -103.483665155 | Program output: -80.483665155 
Correct output: -16.1113007238 | Program output: -70.1113007238
Correct output: 1.5190821923   | Program output: -24.4809178077
Correct output: 56.222608134   | Program output: 29.222608134  
Correct output: -100.5567747653 | Program output: -72.5567747653
Correct output: 20.8692780643  | Program output: 34.910552911  
Correct output: 137.7657204956 | Program output: 34.910552911  
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_rot} {:instruction integer_pop} {:instruction in1} {:instruction integer_mod} {:instruction 66.0883451304914} {:instruction integer_inc} {:instruction integer_sub} {:instruction float_mult} {:instruction 23.47472230998136} {:instruction integer_min} {:instruction integer_pop} {:instruction float_swap} {:instruction float_min} {:instruction float_tan} {:instruction integer_dup} {:instruction in1} {:instruction float_min} {:instruction float_mult} {:instruction 23.47472230998136} {:instruction integer_min} {:instruction integer_mod} {:instruction float_add} {:instruction float_min} {:instruction tagged_372} {:instruction integer_dup} {:instruction in1} {:instruction float_min} {:instruction -5} {:instruction integer_div} {:instruction float_min} {:instruction print_float} {:instruction integer_rot} {:instruction integer_flush} {:instruction float_tan} {:instruction in2} {:instruction integer_sub})
Best program: (integer_rot integer_pop in1 integer_mod 66.0883451304914 integer_inc integer_sub float_mult 23.47472230998136 integer_min integer_pop float_swap float_min float_tan integer_dup in1 float_min float_mult 23.47472230998136 integer_min integer_mod float_add float_min tagged_372 integer_dup in1 float_min -5 integer_div float_min print_float integer_rot integer_flush float_tan in2 integer_sub)
Errors: [44.0 2 19.0 12 6.2944 11 14.0 12 39.0 2 83.0 13 78.0053 11 3.0 1 47.0 2 88.0 2 24.0 2 84.0 2 1.3312 9 34.0 2 17.5886 12 6.0 1 22.694 9 6.0 2 23.0 2 54.0 2 26.0 13 27.0 2 28.0 3 14.0413 12 102.8552 10]
Total: 1042.81
Mean: 20.8562
Genome size: 36
Size: 37
Percent parens: 0.027
--- Population Statistics ---
Average total errors in population: 1977.5975068999887
Median total errors in population: 1058.4646
Error averages by case: (84.23558999999999 2.575 52.38785589999999 12.005 42.21381649999955 10.684 47.78386160000001 12.011 77.63256180000002 2.616 118.00788989999997 12.977 109.0468820000007 11.179 37.7846946 1.518 81.96246840000002 2.635 123.9168327 2.578 63.18171760000002 2.609 80.02792399999885 11.04 37.453013900000265 8.983 72.9517545 2.612 116.54507780000003 3.607 45.464415499999994 1.673 57.18562550000107 9.044 40.47203670000002 2.927 63.90682219999999 2.626 91.65770249999998 2.622 61.705262600000005 12.925 60.191461500000045 3.019 68.65097480000001 3.605 49.98095899999945 11.586 133.72430540000173 9.87)
Error minima by case: (20.5253 2 1.9007 7 5.2944 2 4.2034 9 8.4229 2 24.944 8 2.6959 8 1.7557 1 2.8766 2 8.3227 2 0.5253 2 1.4985 2 0.3312 2 4.0403 2 17.5886 3 6.0 1 0.2193 2 0.3207 2 22.0 2 0.659 2 2.5253 8 20.3121 2 24.3959 3 0.4827 2 59.9141 2)
Average genome size in population (length): 36.304
Average program size in population (points): 37.304
Average percent parens in population: 0.027
Minimum age in population: 32.90332794189453
Maximum age in population: 37.27001225948334
Average age in population: 35.48283233916759
Median age in population: 35.52513945102692
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 68
Genome diversity (% unique Plush genomes):	 0.589
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 68
Syntactic diversity (% unique Push programs):	 0.589
Total error diversity:				 0.072
Error (vector) diversity:			 0.072
Behavioral diversity:				 0.072
--- Run Statistics ---
Number of program evaluations used so far: 25000
Number of point (instruction) evaluations so far: 20451614
--- Timings ---
Current time: 1529615058736 milliseconds
Total Time:          75.6 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        30.5 seconds, 40.4%
Fitness Testing:     36.7 seconds, 48.5%
Report:               8.3 seconds, 11.0%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 24
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 25
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 25
;;******************************
;; -*- Number IO problem report - generation 25
Test total error for best: 61339.43140000002
Test mean error for best: 30.66972
;;------------------------------
Outputs of best individual on training cases:
Correct output: -54.078495011  | Program output: -98.078495011 
Correct output: 13.1534720339  | Program output: -5.8465279661 
Correct output: 41.2049141439  | Program output: 34.910552911  
Correct output: -6.0487858971  | Program output: 7.9512141029  
Correct output: -75.9491370053 | Program output: -36.9491370053
Correct output: 49.8479113478  | Program output: -33.1520886522
Correct output: -43.0947106158 | Program output: 34.910552911  
Correct output: -6.035421      | Program output: -3.035421     
Correct output: -64.6496412859 | Program output: -17.6496412859
Correct output: -8.4475981317  | Program output: -96.4475981317
Correct output: -61.9056292771 | Program output: -85.9056292771
Correct output: -100.2670640218 | Program output: -16.2670640218
Correct output: 33.5793532538  | Program output: 34.910552911  
Correct output: -71.5665679812 | Program output: -37.5665679812
Correct output: -150.2787840572 | Program output: -132.6902251387
Correct output: -33.4710147358 | Program output: -39.4710147358
Correct output: 12.2165113619  | Program output: 34.910552911  
Correct output: 16.3988550752  | Program output: 22.3988550752 
Correct output: -103.483665155 | Program output: -80.483665155 
Correct output: -16.1113007238 | Program output: -70.1113007238
Correct output: 1.5190821923   | Program output: -24.4809178077
Correct output: 56.222608134   | Program output: 29.222608134  
Correct output: -100.5567747653 | Program output: -72.5567747653
Correct output: 20.8692780643  | Program output: 34.910552911  
Correct output: 137.7657204956 | Program output: 34.910552911  
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_rot} {:instruction integer_pop} {:instruction in1} {:instruction integer_mod} {:instruction 66.0883451304914} {:instruction integer_inc} {:instruction integer_sub} {:instruction float_mult} {:instruction 23.47472230998136} {:instruction integer_min} {:instruction integer_pop} {:instruction float_swap} {:instruction float_min} {:instruction float_tan} {:instruction integer_dup} {:instruction in1} {:instruction float_min} {:instruction float_mult} {:instruction 23.47472230998136} {:instruction integer_min} {:instruction integer_mod} {:instruction float_add} {:instruction float_min} {:instruction tagged_372} {:instruction integer_dup} {:instruction in1} {:instruction float_min} {:instruction -5} {:instruction integer_div} {:instruction float_min} {:instruction print_float} {:instruction integer_rot} {:instruction integer_flush} {:instruction float_tan} {:instruction in2} {:instruction integer_sub})
Best program: (integer_rot integer_pop in1 integer_mod 66.0883451304914 integer_inc integer_sub float_mult 23.47472230998136 integer_min integer_pop float_swap float_min float_tan integer_dup in1 float_min float_mult 23.47472230998136 integer_min integer_mod float_add float_min tagged_372 integer_dup in1 float_min -5 integer_div float_min print_float integer_rot integer_flush float_tan in2 integer_sub)
Errors: [44.0 2 19.0 12 6.2944 11 14.0 12 39.0 2 83.0 13 78.0053 11 3.0 1 47.0 2 88.0 2 24.0 2 84.0 2 1.3312 9 34.0 2 17.5886 12 6.0 1 22.694 9 6.0 2 23.0 2 54.0 2 26.0 13 27.0 2 28.0 3 14.0413 12 102.8552 10]
Total: 1042.81
Mean: 20.8562
Genome size: 36
Size: 37
Percent parens: 0.027
--- Population Statistics ---
Average total errors in population: 1995.5553566999881
Median total errors in population: 1058.4646
Error averages by case: (86.2752087 2.589 55.30159030000001 12.058 43.802641499999496 10.679 49.44063829999999 12.011 76.80911820000003 2.589 118.66457399999993 13.02 110.01999250000081 11.183 39.370034999999994 1.457 82.68894110000002 2.608 124.20666099999994 2.554 63.138307300000015 2.618 79.46605879999885 11.026 39.0348560000003 9.042 72.08557260000002 2.581 114.98741180000006 3.604 45.51396539999999 1.678 57.91177680000113 9.017 42.15683530000001 3.134 62.4380281 2.625 91.95287499999996 2.644 62.94376050000001 12.966 63.02960420000007 3.091 67.21085470000001 3.577 50.7345553999994 11.507 136.5974942000015 9.916)
Error minima by case: (20.5253 2 3.4747 9 5.2944 2 4.2034 9 16.3479 2 50.0125 8 1.6959 8 1.0 1 5.0484 2 7.8592 1 0.5253 2 13.7685 2 0.2428 2 11.9654 2 17.5886 3 6.0 1 0.7807 2 1.7834 2 21.0 2 16.6547 2 0.7241 8 21.3121 2 21.0821 3 5.0E-4 2 94.0 2)
Average genome size in population (length): 36.527
Average program size in population (points): 37.527
Average percent parens in population: 0.027
Minimum age in population: 33.90332794189453
Maximum age in population: 38.81375497579575
Average age in population: 36.92928832155466
Median age in population: 36.96502330899239
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 52
Genome diversity (% unique Plush genomes):	 0.62
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 52
Syntactic diversity (% unique Push programs):	 0.62
Total error diversity:				 0.077
Error (vector) diversity:			 0.077
Behavioral diversity:				 0.077
--- Run Statistics ---
Number of program evaluations used so far: 26000
Number of point (instruction) evaluations so far: 21364839
--- Timings ---
Current time: 1529615061786 milliseconds
Total Time:          78.6 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        31.6 seconds, 40.3%
Fitness Testing:     38.2 seconds, 48.6%
Report:               8.6 seconds, 11.0%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 25
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 26
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 26
;;******************************
;; -*- Number IO problem report - generation 26
Test total error for best: 61339.43140000002
Test mean error for best: 30.66972
;;------------------------------
Outputs of best individual on training cases:
Correct output: -54.078495011  | Program output: -98.078495011 
Correct output: 13.1534720339  | Program output: -5.8465279661 
Correct output: 41.2049141439  | Program output: 34.910552911  
Correct output: -6.0487858971  | Program output: 7.9512141029  
Correct output: -75.9491370053 | Program output: -36.9491370053
Correct output: 49.8479113478  | Program output: -33.1520886522
Correct output: -43.0947106158 | Program output: 34.910552911  
Correct output: -6.035421      | Program output: -3.035421     
Correct output: -64.6496412859 | Program output: -17.6496412859
Correct output: -8.4475981317  | Program output: -96.4475981317
Correct output: -61.9056292771 | Program output: -85.9056292771
Correct output: -100.2670640218 | Program output: -16.2670640218
Correct output: 33.5793532538  | Program output: 34.910552911  
Correct output: -71.5665679812 | Program output: -37.5665679812
Correct output: -150.2787840572 | Program output: -132.6902251387
Correct output: -33.4710147358 | Program output: -39.4710147358
Correct output: 12.2165113619  | Program output: 34.910552911  
Correct output: 16.3988550752  | Program output: 22.3988550752 
Correct output: -103.483665155 | Program output: -80.483665155 
Correct output: -16.1113007238 | Program output: -70.1113007238
Correct output: 1.5190821923   | Program output: -24.4809178077
Correct output: 56.222608134   | Program output: 29.222608134  
Correct output: -100.5567747653 | Program output: -72.5567747653
Correct output: 20.8692780643  | Program output: 34.910552911  
Correct output: 137.7657204956 | Program output: 34.910552911  
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_rot} {:instruction integer_pop} {:instruction in1} {:instruction integer_mod} {:instruction 66.0883451304914} {:instruction integer_inc} {:instruction integer_sub} {:instruction float_mult} {:instruction 23.47472230998136} {:instruction integer_min} {:instruction integer_pop} {:instruction float_swap} {:instruction float_min} {:instruction float_tan} {:instruction integer_dup} {:instruction in1} {:instruction float_min} {:instruction float_mult} {:instruction 23.47472230998136} {:instruction integer_min} {:instruction integer_mod} {:instruction float_add} {:instruction float_min} {:instruction tagged_372} {:instruction integer_dup} {:instruction in1} {:instruction float_min} {:instruction -5} {:instruction integer_div} {:instruction float_min} {:instruction print_float} {:instruction integer_rot} {:instruction integer_flush} {:instruction float_tan} {:instruction in2} {:instruction integer_sub})
Best program: (integer_rot integer_pop in1 integer_mod 66.0883451304914 integer_inc integer_sub float_mult 23.47472230998136 integer_min integer_pop float_swap float_min float_tan integer_dup in1 float_min float_mult 23.47472230998136 integer_min integer_mod float_add float_min tagged_372 integer_dup in1 float_min -5 integer_div float_min print_float integer_rot integer_flush float_tan in2 integer_sub)
Errors: [44.0 2 19.0 12 6.2944 11 14.0 12 39.0 2 83.0 13 78.0053 11 3.0 1 47.0 2 88.0 2 24.0 2 84.0 2 1.3312 9 34.0 2 17.5886 12 6.0 1 22.694 9 6.0 2 23.0 2 54.0 2 26.0 13 27.0 2 28.0 3 14.0413 12 102.8552 10]
Total: 1042.81
Mean: 20.8562
Genome size: 36
Size: 37
Percent parens: 0.027
--- Population Statistics ---
Average total errors in population: 2231.514042099986
Median total errors in population: 1058.4646
Error averages by case: (99.66666939999998 2.825 61.438292800000006 12.054 50.06350699999953 10.35 55.551594400000006 11.903 89.14336059999998 2.856 129.3239716 13.052 115.43543280000083 11.165 46.00747859999999 1.683 92.2130489 2.841 135.8442011 2.832 76.24968900000002 2.871 90.03242729999911 10.883 44.95128340000027 8.977 84.60734610000002 2.843 127.51975900000006 3.96 58.11586639999999 2.049 63.89360830000121 8.808 47.844419299999956 3.705 76.56988510000001 3.007 104.29304480000002 2.885 72.95454880000001 12.83 67.92790660000006 3.217 81.2034273 3.839 57.04670259999914 11.119 141.08357090000115 9.979)
Error minima by case: (19.5253 2 1.9007 7 0.9331 2 4.2034 8 2.0509 2 26.3732 8 26.1707 9 0.0354 1 29.3504 2 7.639 2 0.4104 2 1.4985 2 0.2428 2 3.5666 2 5.7212 3 6.0 1 0.2193 2 0.6191 2 22.0 2 14.5666 2 0.756 8 10.4885 2 20.9672 3 0.4576 2 94.0 2)
Average genome size in population (length): 37.161
Average program size in population (points): 38.161
Average percent parens in population: 0.026
Minimum age in population: 35.78783118724823
Maximum age in population: 40.20274922251701
Average age in population: 38.38178275108337
Median age in population: 38.39049361646175
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 77
Genome diversity (% unique Plush genomes):	 0.608
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 77
Syntactic diversity (% unique Push programs):	 0.608
Total error diversity:				 0.104
Error (vector) diversity:			 0.106
Behavioral diversity:				 0.106
--- Run Statistics ---
Number of program evaluations used so far: 27000
Number of point (instruction) evaluations so far: 22294064
--- Timings ---
Current time: 1529615064846 milliseconds
Total Time:          81.7 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        32.8 seconds, 40.2%
Fitness Testing:     39.7 seconds, 48.6%
Report:               9.0 seconds, 11.1%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 26
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 27
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 27
;;******************************
;; -*- Number IO problem report - generation 27
Test total error for best: 61523.30340000002
Test mean error for best: 30.76165
;;------------------------------
Outputs of best individual on training cases:
Correct output: -54.078495011  | Program output: -99.078495011 
Correct output: 13.1534720339  | Program output: -6.8465279661 
Correct output: 41.2049141439  | Program output: 33.910552911  
Correct output: -6.0487858971  | Program output: 6.9512141029  
Correct output: -75.9491370053 | Program output: -37.9491370053
Correct output: 49.8479113478  | Program output: -34.1520886522
Correct output: -43.0947106158 | Program output: 33.910552911  
Correct output: -6.035421      | Program output: -4.035421     
Correct output: -64.6496412859 | Program output: -18.6496412859
Correct output: -8.4475981317  | Program output: -97.4475981317
Correct output: -61.9056292771 | Program output: -86.9056292771
Correct output: -100.2670640218 | Program output: -17.2670640218
Correct output: 33.5793532538  | Program output: 33.910552911  
Correct output: -71.5665679812 | Program output: -38.5665679812
Correct output: -150.2787840572 | Program output: -133.6902251387
Correct output: -33.4710147358 | Program output: -40.4710147358
Correct output: 12.2165113619  | Program output: 33.910552911  
Correct output: 16.3988550752  | Program output: 21.3988550752 
Correct output: -103.483665155 | Program output: -81.483665155 
Correct output: -16.1113007238 | Program output: -71.1113007238
Correct output: 1.5190821923   | Program output: -25.4809178077
Correct output: 56.222608134   | Program output: 28.222608134  
Correct output: -100.5567747653 | Program output: -73.5567747653
Correct output: 20.8692780643  | Program output: 33.910552911  
Correct output: 137.7657204956 | Program output: 33.910552911  
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_rot} {:instruction integer_pop} {:instruction in1} {:instruction integer_mod} {:instruction 66.0883451304914} {:instruction integer_inc} {:instruction integer_sub} {:instruction float_mult} {:instruction 23.47472230998136} {:instruction integer_min} {:instruction integer_pop} {:instruction float_swap} {:instruction float_min} {:instruction float_tan} {:instruction in1} {:instruction float_min} {:instruction float_mult} {:instruction 23.47472230998136} {:instruction integer_min} {:instruction integer_mod} {:instruction integer_inc} {:instruction float_add} {:instruction tagged_372} {:instruction integer_dup} {:instruction in1} {:instruction integer_dup} {:instruction -5} {:instruction integer_sub} {:instruction float_min} {:instruction in1} {:instruction float_min} {:instruction -5} {:instruction float_dec} {:instruction float_min} {:instruction print_float} {:instruction integer_rot} {:instruction integer_flush} {:instruction integer_inc} {:instruction float_tan} {:instruction in2} {:instruction integer_sub} {:instruction integer_rot})
Best program: (integer_rot integer_pop in1 integer_mod 66.0883451304914 integer_inc integer_sub float_mult 23.47472230998136 integer_min integer_pop float_swap float_min float_tan in1 float_min float_mult 23.47472230998136 integer_min integer_mod integer_inc float_add tagged_372 integer_dup in1 integer_dup -5 integer_sub float_min in1 float_min -5 float_dec float_min print_float integer_rot integer_flush integer_inc float_tan in2 integer_sub integer_rot)
Errors: [45.0 2 20.0 12 7.2944 11 13.0 11 38.0 2 84.0 13 77.0053 11 2.0 1 46.0 2 89.0 2 25.0 2 83.0 2 0.3312 8 33.0 2 16.5886 12 7.0 2 21.694 9 5.0 2 22.0 3 55.0 2 27.0 12 28.0 2 27.0 3 13.0413 12 103.8552 10]
Total: 1038.81
Mean: 20.7762
Genome size: 42
Size: 43
Percent parens: 0.023
--- Population Statistics ---
Average total errors in population: 1825.3056160999963
Median total errors in population: 1054.8093000000001
Error averages by case: (84.02390299999999 2.612 46.1362632 12.067 33.823139599999756 10.236 38.2196452 11.513 71.89131199999999 2.613 115.12451779999999 13.056 99.11684100000038 11.035 28.5607735 1.527 74.6894183 2.613 121.82632529999997 2.59 60.90535340000001 2.638 77.956369299999 10.184 28.153653600000183 8.706 67.29167309999998 2.607 107.89641380000015 4.196 42.319681599999996 2.189 47.21373550000049 8.756 30.793635200000026 3.162 59.22506729999999 3.135 89.56949599999999 2.648 57.49396400000003 12.484 53.06343490000007 3.136 63.95631279999999 3.585 40.25110560000002 11.01 127.49358110000156 10.012)
Error minima by case: (20.4104 2 1.3718 8 4.7445 2 1.0488 9 4.6029 2 50.8343 8 1.6959 8 0.7557 1 6.1468 2 3.4476 1 0.4104 2 2.4985 2 0.2428 2 0.7702 2 5.8862 3 6.0 1 0.7807 2 1.6191 2 21.0 2 11.1113 2 0.9124 8 7.9106 2 20.0047 3 0.061 2 59.0894 2)
Average genome size in population (length): 39.032
Average program size in population (points): 40.032
Average percent parens in population: 0.025
Minimum age in population: 37.45429185032845
Maximum age in population: 41.91201899945736
Average age in population: 40.01373288419843
Median age in population: 40.05491343140602
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 84
Genome diversity (% unique Plush genomes):	 0.529
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 84
Syntactic diversity (% unique Push programs):	 0.529
Total error diversity:				 0.105
Error (vector) diversity:			 0.106
Behavioral diversity:				 0.106
--- Run Statistics ---
Number of program evaluations used so far: 28000
Number of point (instruction) evaluations so far: 23270389
--- Timings ---
Current time: 1529615067835 milliseconds
Total Time:          84.7 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        34.0 seconds, 40.1%
Fitness Testing:     41.2 seconds, 48.6%
Report:               9.4 seconds, 11.1%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 27
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 28
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 28
;;******************************
;; -*- Number IO problem report - generation 28
Test total error for best: 61614.61419999993
Test mean error for best: 30.80731
;;------------------------------
Outputs of best individual on training cases:
Correct output: -54.078495011  | Program output: -98.078495011 
Correct output: 13.1534720339  | Program output: -5.8465279661 
Correct output: 41.2049141439  | Program output: 33.7648876939 
Correct output: -6.0487858971  | Program output: 7.9512141029  
Correct output: -75.9491370053 | Program output: -36.9491370053
Correct output: 49.8479113478  | Program output: -33.1520886522
Correct output: -43.0947106158 | Program output: 33.7648876939 
Correct output: -6.035421      | Program output: -3.035421     
Correct output: -64.6496412859 | Program output: -17.6496412859
Correct output: -8.4475981317  | Program output: -96.4475981317
Correct output: -61.9056292771 | Program output: -85.9056292771
Correct output: -100.2670640218 | Program output: -16.2670640218
Correct output: 33.5793532538  | Program output: 33.7648876939 
Correct output: -71.5665679812 | Program output: -37.5665679812
Correct output: -150.2787840572 | Program output: -133.8358903559
Correct output: -33.4710147358 | Program output: -39.4710147358
Correct output: 12.2165113619  | Program output: 33.7648876939 
Correct output: 16.3988550752  | Program output: 22.3988550752 
Correct output: -103.483665155 | Program output: -80.483665155 
Correct output: -16.1113007238 | Program output: -70.1113007238
Correct output: 1.5190821923   | Program output: -24.4809178077
Correct output: 56.222608134   | Program output: 29.222608134  
Correct output: -100.5567747653 | Program output: -72.5567747653
Correct output: 20.8692780643  | Program output: 33.7648876939 
Correct output: 137.7657204956 | Program output: 33.7648876939 
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_rot} {:instruction integer_pop} {:instruction in1} {:instruction integer_mod} {:instruction 66.0883451304914} {:instruction integer_inc} {:instruction integer_sub} {:instruction float_mult} {:instruction 23.47472230998136} {:instruction integer_min} {:instruction integer_pop} {:instruction float_swap} {:instruction float_min} {:instruction float_tan} {:instruction integer_dup} {:instruction in1} {:instruction float_min} {:instruction float_mult} {:instruction 22.329057092852572} {:instruction integer_min} {:instruction integer_mod} {:instruction float_add} {:instruction float_min} {:instruction tagged_372} {:instruction integer_dup} {:instruction in1} {:instruction float_min} {:instruction -5} {:instruction integer_div} {:instruction float_min} {:instruction print_float} {:instruction integer_rot} {:instruction integer_flush} {:instruction float_tan} {:instruction in2} {:instruction integer_sub})
Best program: (integer_rot integer_pop in1 integer_mod 66.0883451304914 integer_inc integer_sub float_mult 23.47472230998136 integer_min integer_pop float_swap float_min float_tan integer_dup in1 float_min float_mult 22.329057092852572 integer_min integer_mod float_add float_min tagged_372 integer_dup in1 float_min -5 integer_div float_min print_float integer_rot integer_flush float_tan in2 integer_sub)
Errors: [44.0 2 19.0 12 7.44 9 14.0 12 39.0 2 83.0 13 76.8596 10 3.0 1 47.0 2 88.0 2 24.0 2 84.0 2 0.1855 9 34.0 2 16.4429 10 6.0 1 21.5484 10 6.0 2 23.0 2 54.0 2 26.0 13 27.0 2 28.0 3 12.8956 9 104.0008 9]
Total: 1031.3728
Mean: 20.627457
Genome size: 36
Size: 37
Percent parens: 0.027
--- Population Statistics ---
Average total errors in population: 2309.6454106999886
Median total errors in population: 1054.4646
Error averages by case: (108.93996649999998 2.86 62.70745280000001 12.115 48.20057049999954 10.535 52.1603818 11.499 94.673161 2.863 136.87468209999994 13.068 112.60183840000077 11.197 44.53485670000001 1.671 95.6510331 2.821 145.00450679999994 2.865 85.71820990000002 2.916 109.41637509999916 8.054 42.607715800000264 8.438 90.235681 2.844 116.88954970000053 6.397 66.28304719999998 2.499 62.028525300001 8.95 45.27084560000003 3.019 83.64440539999998 3.424 113.51083309999999 2.902 79.6196075 12.448 67.19172040000002 3.208 88.2238206 3.816 55.318463999999466 11.35 140.7241604000012 9.855)
Error minima by case: (20.4104 2 2.3718 8 4.7445 2 3.8659 9 24.5256 2 25.944 8 1.6959 8 1.0 1 45.0 2 8.8219 1 0.4104 2 13.7685 2 0.0646 2 18.9082 2 5.8862 3 6.0 1 0.7807 2 3.9531 2 21.0 2 13.5666 2 0.756 8 6.9106 2 21.0821 3 0.1476 2 60.0894 2)
Average genome size in population (length): 39.406
Average program size in population (points): 40.406
Average percent parens in population: 0.025
Minimum age in population: 39.09776711463928
Maximum age in population: 43.63906940817833
Average age in population: 41.5809336528033
Median age in population: 41.61088002845645
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 167
Genome diversity (% unique Plush genomes):	 0.548
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 167
Syntactic diversity (% unique Push programs):	 0.548
Total error diversity:				 0.112
Error (vector) diversity:			 0.115
Behavioral diversity:				 0.115
--- Run Statistics ---
Number of program evaluations used so far: 29000
Number of point (instruction) evaluations so far: 24255564
--- Timings ---
Current time: 1529615070848 milliseconds
Total Time:          87.7 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        35.1 seconds, 40.0%
Fitness Testing:     42.8 seconds, 48.8%
Report:               9.7 seconds, 11.1%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 28
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 29
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 29
;;******************************
;; -*- Number IO problem report - generation 29
Test total error for best: 64523.782300000006
Test mean error for best: 32.26189
;;------------------------------
Outputs of best individual on training cases:
Correct output: -54.078495011  | Program output: -98.078495011 
Correct output: 13.1534720339  | Program output: -5.8465279661 
Correct output: 41.2049141439  | Program output: 29.0561322787 
Correct output: -6.0487858971  | Program output: 7.9512141029  
Correct output: -75.9491370053 | Program output: -36.9491370053
Correct output: 49.8479113478  | Program output: -33.1520886522
Correct output: -43.0947106158 | Program output: 21.3956567743 
Correct output: -6.035421      | Program output: -3.035421     
Correct output: -64.6496412859 | Program output: -17.6496412859
Correct output: -8.4475981317  | Program output: -96.4475981317
Correct output: -61.9056292771 | Program output: -85.9056292771
Correct output: -100.2670640218 | Program output: -16.2670640218
Correct output: 33.5793532538  | Program output: 25.0079365358 
Correct output: -71.5665679812 | Program output: -37.5665679812
Correct output: -150.2787840572 | Program output: -157.5982655339
Correct output: -33.4710147358 | Program output: -39.4710147358
Correct output: 12.2165113619  | Program output: 29.8302645193 
Correct output: 16.3988550752  | Program output: 22.3988550752 
Correct output: -103.483665155 | Program output: -80.483665155 
Correct output: -16.1113007238 | Program output: -70.1113007238
Correct output: 1.5190821923   | Program output: -24.4809178077
Correct output: 56.222608134   | Program output: 29.222608134  
Correct output: -100.5567747653 | Program output: -72.5567747653
Correct output: 20.8692780643  | Program output: 22.8098368905 
Correct output: 137.7657204956 | Program output: 21.482630129  
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_rot} {:instruction integer_pop} {:instruction in1} {:instruction integer_mod} {:instruction float_dec} {:instruction integer_inc} {:instruction integer_sub} {:instruction float_add} {:instruction integer_flush} {:instruction integer_swap} {:instruction float_swap} {:instruction float_min} {:instruction float_tan} {:instruction integer_dup} {:instruction in1} {:instruction float_min} {:instruction float_mult} {:instruction 23.58962050531167} {:instruction integer_min} {:instruction integer_mod} {:instruction float_add} {:instruction integer_min} {:instruction integer_pop} {:instruction float_swap} {:instruction float_min} {:instruction float_tan} {:instruction integer_dup} {:instruction in1} {:instruction float_min} {:instruction float_mult} {:instruction 23.47472230998136} {:instruction float_stackdepth} {:instruction integer_mod} {:instruction float_add} {:instruction float_min} {:instruction tagged_372} {:instruction integer_inc} {:instruction float_min} {:instruction integer_min} {:instruction integer_dup} {:instruction in1} {:instruction float_min} {:instruction -5} {:instruction integer_rot} {:instruction float_min} {:instruction print_float} {:instruction integer_rot} {:instruction integer_shove} {:instruction float_tan} {:instruction float_tan} {:instruction in2} {:instruction integer_sub} {:instruction float_add})
Best program: (integer_rot integer_pop in1 integer_mod float_dec integer_inc integer_sub float_add integer_flush integer_swap float_swap float_min float_tan integer_dup in1 float_min float_mult 23.58962050531167 integer_min integer_mod float_add integer_min integer_pop float_swap float_min float_tan integer_dup in1 float_min float_mult 23.47472230998136 float_stackdepth integer_mod float_add float_min tagged_372 integer_inc float_min integer_min integer_dup in1 float_min -5 integer_rot float_min print_float integer_rot integer_shove float_tan float_tan in2 integer_sub float_add)
Errors: [44.0 2 19.0 12 12.1488 11 14.0 12 39.0 2 83.0 13 64.4904 12 3.0 1 47.0 2 88.0 2 24.0 2 84.0 2 8.5714 7 34.0 2 7.3195 10 6.0 1 17.6138 11 6.0 2 23.0 2 54.0 2 26.0 13 27.0 2 28.0 3 1.9406 9 116.2831 12]
Total: 1026.3676
Mean: 20.527351
Genome size: 53
Size: 54
Percent parens: 0.019
--- Population Statistics ---
Average total errors in population: 2195.5229559000077
Median total errors in population: 1042.81
Error averages by case: (99.4181233 2.766 60.3460053 12.028 41.62620129999945 10.44 47.711961899999984 11.868 93.7546382 2.855 134.13611469999998 12.981 108.18634790000078 11.192 41.443406900000014 1.656 97.4659075 2.839 139.88038799999998 2.844 80.23591159999998 2.828 127.8642926999999 3.538 36.67390480000036 8.666 88.1881263 2.785 84.64046080000116 10.453 62.57846129999999 2.088 57.1319730000012 8.88 39.0703293 2.831 79.23272520000002 3.024 107.9097887 2.83 78.80396680000001 12.779 60.468277600000036 3.119 84.20616599999998 3.813 50.75833219999943 11.246 133.75614460000193 9.686)
Error minima by case: (20.5253 2 3.4747 7 4.7445 2 5.0588 9 2.0509 2 26.3732 7 30.0558 8 0.0354 1 22.5253 2 7.681 2 0.5253 2 9.7062 2 0.1855 2 3.5666 2 5.7212 3 6.0 1 0.7807 2 3.6571 2 1.4747 2 15.4309 2 0.5216 8 21.3121 2 3.5253 3 0.061 2 94.0 2)
Average genome size in population (length): 37.828
Average program size in population (points): 38.828
Average percent parens in population: 0.026
Minimum age in population: 40.62625595927238
Maximum age in population: 44.92945244163275
Average age in population: 43.12508995822445
Median age in population: 43.17834384180605
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 326
Genome diversity (% unique Plush genomes):	 0.489
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 326
Syntactic diversity (% unique Push programs):	 0.489
Total error diversity:				 0.1
Error (vector) diversity:			 0.102
Behavioral diversity:				 0.103
--- Run Statistics ---
Number of program evaluations used so far: 30000
Number of point (instruction) evaluations so far: 25201289
--- Timings ---
Current time: 1529615073847 milliseconds
Total Time:          90.6 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        36.2 seconds, 40.0%
Fitness Testing:     44.2 seconds, 48.8%
Report:              10.0 seconds, 11.1%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 29
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 30
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 30
;;******************************
;; -*- Number IO problem report - generation 30
Test total error for best: 64523.782300000006
Test mean error for best: 32.26189
;;------------------------------
Outputs of best individual on training cases:
Correct output: -54.078495011  | Program output: -98.078495011 
Correct output: 13.1534720339  | Program output: -5.8465279661 
Correct output: 41.2049141439  | Program output: 29.0561322787 
Correct output: -6.0487858971  | Program output: 7.9512141029  
Correct output: -75.9491370053 | Program output: -36.9491370053
Correct output: 49.8479113478  | Program output: -33.1520886522
Correct output: -43.0947106158 | Program output: 21.3956567743 
Correct output: -6.035421      | Program output: -3.035421     
Correct output: -64.6496412859 | Program output: -17.6496412859
Correct output: -8.4475981317  | Program output: -96.4475981317
Correct output: -61.9056292771 | Program output: -85.9056292771
Correct output: -100.2670640218 | Program output: -16.2670640218
Correct output: 33.5793532538  | Program output: 25.0079365358 
Correct output: -71.5665679812 | Program output: -37.5665679812
Correct output: -150.2787840572 | Program output: -157.5982655339
Correct output: -33.4710147358 | Program output: -39.4710147358
Correct output: 12.2165113619  | Program output: 29.8302645193 
Correct output: 16.3988550752  | Program output: 22.3988550752 
Correct output: -103.483665155 | Program output: -80.483665155 
Correct output: -16.1113007238 | Program output: -70.1113007238
Correct output: 1.5190821923   | Program output: -24.4809178077
Correct output: 56.222608134   | Program output: 29.222608134  
Correct output: -100.5567747653 | Program output: -72.5567747653
Correct output: 20.8692780643  | Program output: 22.8098368905 
Correct output: 137.7657204956 | Program output: 21.482630129  
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_rot} {:instruction integer_pop} {:instruction in1} {:instruction integer_mod} {:instruction float_dec} {:instruction integer_inc} {:instruction integer_sub} {:instruction float_add} {:instruction integer_flush} {:instruction integer_swap} {:instruction float_swap} {:instruction float_min} {:instruction float_tan} {:instruction integer_dup} {:instruction in1} {:instruction float_min} {:instruction float_mult} {:instruction 23.58962050531167} {:instruction integer_min} {:instruction integer_mod} {:instruction float_add} {:instruction integer_min} {:instruction integer_pop} {:instruction float_swap} {:instruction float_min} {:instruction float_tan} {:instruction integer_dup} {:instruction in1} {:instruction float_min} {:instruction float_mult} {:instruction 23.47472230998136} {:instruction float_stackdepth} {:instruction integer_mod} {:instruction float_add} {:instruction float_min} {:instruction tagged_372} {:instruction integer_inc} {:instruction float_min} {:instruction integer_min} {:instruction integer_dup} {:instruction in1} {:instruction float_min} {:instruction -5} {:instruction integer_rot} {:instruction float_min} {:instruction print_float} {:instruction integer_rot} {:instruction integer_shove} {:instruction float_tan} {:instruction float_tan} {:instruction in2} {:instruction integer_sub} {:instruction float_add})
Best program: (integer_rot integer_pop in1 integer_mod float_dec integer_inc integer_sub float_add integer_flush integer_swap float_swap float_min float_tan integer_dup in1 float_min float_mult 23.58962050531167 integer_min integer_mod float_add integer_min integer_pop float_swap float_min float_tan integer_dup in1 float_min float_mult 23.47472230998136 float_stackdepth integer_mod float_add float_min tagged_372 integer_inc float_min integer_min integer_dup in1 float_min -5 integer_rot float_min print_float integer_rot integer_shove float_tan float_tan in2 integer_sub float_add)
Errors: [44.0 2 19.0 12 12.1488 11 14.0 12 39.0 2 83.0 13 64.4904 12 3.0 1 47.0 2 88.0 2 24.0 2 84.0 2 8.5714 7 34.0 2 7.3195 10 6.0 1 17.6138 11 6.0 2 23.0 2 54.0 2 26.0 13 27.0 2 28.0 3 1.9406 9 116.2831 12]
Total: 1026.3676
Mean: 20.527351
Genome size: 53
Size: 54
Percent parens: 0.019
--- Population Statistics ---
Average total errors in population: 2474.3334054000134
Median total errors in population: 1042.81
Error averages by case: (113.142705 2.801 71.3375709 12.06 49.578172399999495 10.276 54.14666869999999 11.653 106.08868739999998 2.899 147.8853794 13.016 114.58979540000077 11.198 51.379739300000004 1.705 109.95731060000003 2.892 154.13295150000002 2.947 94.6105322 2.853 142.90662379999998 2.876 44.45273730000032 8.383 101.60601999999997 2.853 96.29762560000118 10.877 77.2551495 2.385 64.33077580000116 8.846 46.59312730000001 2.915 93.22888379999999 3.302 122.64431239999999 2.885 92.87755229999999 12.556 68.48898910000003 3.261 97.8023274 3.842 57.846078699999346 11.037 141.21968960000115 9.616)
Error minima by case: (20.5253 2 3.4747 7 4.5733 2 1.0488 9 1.8401 1 26.3732 8 30.0558 8 1.0 1 9.4594 2 31.9223 1 0.5253 2 26.158 2 0.1855 2 2.5425 2 5.8862 3 5.0 1 0.7807 2 3.5021 2 1.4747 2 30.5253 2 2.5253 8 3.5253 2 3.5253 3 0.3359 2 70.5253 2)
Average genome size in population (length): 39.184
Average program size in population (points): 40.184
Average percent parens in population: 0.025
Minimum age in population: 41.66139520704746
Maximum age in population: 46.57949999161065
Average age in population: 44.59152445348352
Median age in population: 44.64109099283814
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 145
Genome diversity (% unique Plush genomes):	 0.542
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 145
Syntactic diversity (% unique Push programs):	 0.542
Total error diversity:				 0.102
Error (vector) diversity:			 0.104
Behavioral diversity:				 0.106
--- Run Statistics ---
Number of program evaluations used so far: 31000
Number of point (instruction) evaluations so far: 26180889
--- Timings ---
Current time: 1529615076942 milliseconds
Total Time:          93.7 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        37.5 seconds, 40.0%
Fitness Testing:     45.6 seconds, 48.7%
Report:              10.5 seconds, 11.2%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 30
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 31
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 31
;;******************************
;; -*- Number IO problem report - generation 31
Test total error for best: 64523.782300000006
Test mean error for best: 32.26189
;;------------------------------
Outputs of best individual on training cases:
Correct output: -54.078495011  | Program output: -98.078495011 
Correct output: 13.1534720339  | Program output: -5.8465279661 
Correct output: 41.2049141439  | Program output: 29.0561322787 
Correct output: -6.0487858971  | Program output: 7.9512141029  
Correct output: -75.9491370053 | Program output: -36.9491370053
Correct output: 49.8479113478  | Program output: -33.1520886522
Correct output: -43.0947106158 | Program output: 21.3956567743 
Correct output: -6.035421      | Program output: -3.035421     
Correct output: -64.6496412859 | Program output: -17.6496412859
Correct output: -8.4475981317  | Program output: -96.4475981317
Correct output: -61.9056292771 | Program output: -85.9056292771
Correct output: -100.2670640218 | Program output: -16.2670640218
Correct output: 33.5793532538  | Program output: 25.0079365358 
Correct output: -71.5665679812 | Program output: -37.5665679812
Correct output: -150.2787840572 | Program output: -157.5982655339
Correct output: -33.4710147358 | Program output: -39.4710147358
Correct output: 12.2165113619  | Program output: 29.8302645193 
Correct output: 16.3988550752  | Program output: 22.3988550752 
Correct output: -103.483665155 | Program output: -80.483665155 
Correct output: -16.1113007238 | Program output: -70.1113007238
Correct output: 1.5190821923   | Program output: -24.4809178077
Correct output: 56.222608134   | Program output: 29.222608134  
Correct output: -100.5567747653 | Program output: -72.5567747653
Correct output: 20.8692780643  | Program output: 22.8098368905 
Correct output: 137.7657204956 | Program output: 21.482630129  
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_rot} {:instruction integer_pop} {:instruction in1} {:instruction integer_mod} {:instruction float_dec} {:instruction integer_inc} {:instruction integer_sub} {:instruction float_add} {:instruction integer_flush} {:instruction integer_swap} {:instruction float_swap} {:instruction float_min} {:instruction float_tan} {:instruction integer_dup} {:instruction in1} {:instruction float_min} {:instruction float_mult} {:instruction 23.58962050531167} {:instruction integer_min} {:instruction integer_mod} {:instruction float_add} {:instruction integer_min} {:instruction integer_pop} {:instruction float_swap} {:instruction float_min} {:instruction float_tan} {:instruction integer_dup} {:instruction in1} {:instruction float_min} {:instruction float_mult} {:instruction 23.47472230998136} {:instruction float_stackdepth} {:instruction integer_mod} {:instruction float_add} {:instruction float_min} {:instruction tagged_372} {:instruction integer_inc} {:instruction float_min} {:instruction integer_min} {:instruction integer_dup} {:instruction in1} {:instruction float_min} {:instruction -5} {:instruction integer_rot} {:instruction float_min} {:instruction print_float} {:instruction integer_rot} {:instruction integer_shove} {:instruction float_tan} {:instruction float_tan} {:instruction in2} {:instruction integer_sub} {:instruction float_add})
Best program: (integer_rot integer_pop in1 integer_mod float_dec integer_inc integer_sub float_add integer_flush integer_swap float_swap float_min float_tan integer_dup in1 float_min float_mult 23.58962050531167 integer_min integer_mod float_add integer_min integer_pop float_swap float_min float_tan integer_dup in1 float_min float_mult 23.47472230998136 float_stackdepth integer_mod float_add float_min tagged_372 integer_inc float_min integer_min integer_dup in1 float_min -5 integer_rot float_min print_float integer_rot integer_shove float_tan float_tan in2 integer_sub float_add)
Errors: [44.0 2 19.0 12 12.1488 11 14.0 12 39.0 2 83.0 13 64.4904 12 3.0 1 47.0 2 88.0 2 24.0 2 84.0 2 8.5714 7 34.0 2 7.3195 10 6.0 1 17.6138 11 6.0 2 23.0 2 54.0 2 26.0 13 27.0 2 28.0 3 1.9406 9 116.2831 12]
Total: 1026.3676
Mean: 20.527351
Genome size: 53
Size: 54
Percent parens: 0.019
--- Population Statistics ---
Average total errors in population: 2088.5396429000157
Median total errors in population: 1038.81
Error averages by case: (91.64197170000001 2.647 58.1854824 12.05 42.83432399999954 10.199 47.8737259 11.386 85.3150947 2.702 127.8213106 13.015 108.06151330000036 11.016 39.5172282 1.556 91.3111242 2.686 133.07644659999997 2.689 72.74483590000001 2.676 125.78125119999999 2.703 36.73551490000021 8.362 80.60494109999998 2.683 71.57590150000085 10.706 55.427101399999984 2.418 56.18413920000078 9.036 38.879978399999985 2.921 70.89320939999999 3.36 100.8170784 2.688 72.882805 12.318 61.35699890000004 3.163 75.55600819999998 3.667 50.43820109999975 10.775 135.84645670000126 9.755)
Error minima by case: (20.5253 2 3.3291 7 4.5989 2 1.0488 9 24.5256 1 26.3732 8 30.1 8 1.0 1 15.6862 2 3.4476 1 0.5253 2 5.4943 2 0.0454 2 18.9082 2 5.8862 3 5.0 1 0.5005 2 1.5415 2 21.0 2 11.1113 2 1.9124 9 21.3121 2 21.9672 3 0.0822 2 43.7657 2)
Average genome size in population (length): 41.57
Average program size in population (points): 42.57
Average percent parens in population: 0.024
Minimum age in population: 44.0881474930793
Maximum age in population: 47.93041072320193
Average age in population: 46.07176600329392
Median age in population: 46.14969064760953
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 95
Genome diversity (% unique Plush genomes):	 0.538
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 95
Syntactic diversity (% unique Push programs):	 0.538
Total error diversity:				 0.102
Error (vector) diversity:			 0.105
Behavioral diversity:				 0.105
--- Run Statistics ---
Number of program evaluations used so far: 32000
Number of point (instruction) evaluations so far: 27220289
--- Timings ---
Current time: 1529615080025 milliseconds
Total Time:          96.8 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        38.7 seconds, 40.0%
Fitness Testing:     47.1 seconds, 48.7%
Report:              10.9 seconds, 11.2%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 31
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 32
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 32
;;******************************
;; -*- Number IO problem report - generation 32
Test total error for best: 64299.8124
Test mean error for best: 32.14991
;;------------------------------
Outputs of best individual on training cases:
Correct output: -54.078495011  | Program output: -98.078495011 
Correct output: 13.1534720339  | Program output: -5.8465279661 
Correct output: 41.2049141439  | Program output: 30.0561322787 
Correct output: -6.0487858971  | Program output: 7.9512141029  
Correct output: -75.9491370053 | Program output: -36.9491370053
Correct output: 49.8479113478  | Program output: -33.1520886522
Correct output: -43.0947106158 | Program output: 22.3956567743 
Correct output: -6.035421      | Program output: -3.035421     
Correct output: -64.6496412859 | Program output: -17.6496412859
Correct output: -8.4475981317  | Program output: -96.4475981317
Correct output: -61.9056292771 | Program output: -85.9056292771
Correct output: -100.2670640218 | Program output: -16.2670640218
Correct output: 33.5793532538  | Program output: 26.0079365358 
Correct output: -71.5665679812 | Program output: -37.5665679812
Correct output: -150.2787840572 | Program output: -156.5982655339
Correct output: -33.4710147358 | Program output: -39.4710147358
Correct output: 12.2165113619  | Program output: 30.8302645193 
Correct output: 16.3988550752  | Program output: 22.3988550752 
Correct output: -103.483665155 | Program output: -80.483665155 
Correct output: -16.1113007238 | Program output: -70.1113007238
Correct output: 1.5190821923   | Program output: -24.4809178077
Correct output: 56.222608134   | Program output: 29.222608134  
Correct output: -100.5567747653 | Program output: -72.5567747653
Correct output: 20.8692780643  | Program output: 23.8098368905 
Correct output: 137.7657204956 | Program output: 22.482630129  
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_rot} {:instruction integer_pop} {:instruction in1} {:instruction integer_mod} {:instruction float_dec} {:instruction integer_inc} {:instruction integer_sub} {:instruction float_add} {:instruction integer_flush} {:instruction integer_swap} {:instruction float_swap} {:instruction float_min} {:instruction float_tan} {:instruction integer_dup} {:instruction in1} {:instruction float_min} {:instruction float_mult} {:instruction 23.58962050531167} {:instruction integer_min} {:instruction integer_mod} {:instruction float_add} {:instruction integer_min} {:instruction integer_pop} {:instruction float_swap} {:instruction float_min} {:instruction float_tan} {:instruction integer_dup} {:instruction in1} {:instruction float_min} {:instruction float_mult} {:instruction 23.47472230998136} {:instruction float_stackdepth} {:instruction integer_mod} {:instruction float_add} {:instruction float_inc} {:instruction tagged_372} {:instruction integer_inc} {:instruction float_min} {:instruction integer_min} {:instruction integer_dup} {:instruction in1} {:instruction float_min} {:instruction -5} {:instruction integer_rot} {:instruction float_min} {:instruction print_float} {:instruction integer_rot} {:instruction integer_shove} {:instruction float_tan} {:instruction float_tan} {:instruction in2} {:instruction integer_sub} {:instruction float_add})
Best program: (integer_rot integer_pop in1 integer_mod float_dec integer_inc integer_sub float_add integer_flush integer_swap float_swap float_min float_tan integer_dup in1 float_min float_mult 23.58962050531167 integer_min integer_mod float_add integer_min integer_pop float_swap float_min float_tan integer_dup in1 float_min float_mult 23.47472230998136 float_stackdepth integer_mod float_add float_inc tagged_372 integer_inc float_min integer_min integer_dup in1 float_min -5 integer_rot float_min print_float integer_rot integer_shove float_tan float_tan in2 integer_sub float_add)
Errors: [44.0 2 19.0 12 11.1488 11 14.0 12 39.0 2 83.0 13 65.4904 12 3.0 1 47.0 2 88.0 2 24.0 2 84.0 2 7.5714 7 34.0 2 6.3195 10 6.0 1 18.6138 11 6.0 2 23.0 2 54.0 2 26.0 13 27.0 2 28.0 3 2.9406 9 115.2831 12]
Total: 1025.3676
Mean: 20.507353
Genome size: 53
Size: 54
Percent parens: 0.019
--- Population Statistics ---
Average total errors in population: 2609.882432200009
Median total errors in population: 1038.1547
Error averages by case: (116.09726549999998 2.978 77.756669 12.097 59.393217500000254 9.433 62.667495200000005 11.855 109.69926310000001 3.076 150.2188775 13.041 121.38099869999952 10.8 59.1529056 1.842 114.84708380000001 3.023 156.90103029999997 3.089 97.6138241 3.04 147.60896420000006 3.103 53.73483039999999 8.831 105.19511010000001 3.039 98.66353609999965 9.909 80.21710669999999 2.374 71.70650840000035 9.515 55.52424630000002 3.206 96.6663403 3.29 125.09335669999999 3.034 96.18336400000001 12.762 77.10033730000006 3.448 101.1662122 4.033 64.66731760000064 9.543 150.72157160000015 9.544)
Error minima by case: (20.5253 2 2.3291 8 1.03 2 0.0488 8 7.2916 2 50.8343 8 2.3833 8 0.0354 1 18.5911 2 3.4476 2 0.5253 2 14.7685 2 0.0454 2 11.6742 2 5.8862 3 6.0 1 0.4293 2 1.5415 2 20.2429 2 11.1113 2 0.9124 8 3.5253 2 17.316 3 0.1568 2 94.0 2)
Average genome size in population (length): 40.105
Average program size in population (points): 41.105
Average percent parens in population: 0.025
Minimum age in population: 45.0881474930793
Maximum age in population: 49.40300209121779
Average age in population: 47.36447416504426
Median age in population: 47.38496919046156
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 243
Genome diversity (% unique Plush genomes):	 0.556
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 243
Syntactic diversity (% unique Push programs):	 0.556
Total error diversity:				 0.136
Error (vector) diversity:			 0.142
Behavioral diversity:				 0.142
--- Run Statistics ---
Number of program evaluations used so far: 33000
Number of point (instruction) evaluations so far: 28223014
--- Timings ---
Current time: 1529615083104 milliseconds
Total Time:          99.9 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        39.9 seconds, 39.9%
Fitness Testing:     48.6 seconds, 48.7%
Report:              11.3 seconds, 11.3%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 32
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 33
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 33
;;******************************
;; -*- Number IO problem report - generation 33
Test total error for best: 64299.8124
Test mean error for best: 32.14991
;;------------------------------
Outputs of best individual on training cases:
Correct output: -54.078495011  | Program output: -98.078495011 
Correct output: 13.1534720339  | Program output: -5.8465279661 
Correct output: 41.2049141439  | Program output: 30.0561322787 
Correct output: -6.0487858971  | Program output: 7.9512141029  
Correct output: -75.9491370053 | Program output: -36.9491370053
Correct output: 49.8479113478  | Program output: -33.1520886522
Correct output: -43.0947106158 | Program output: 22.3956567743 
Correct output: -6.035421      | Program output: -3.035421     
Correct output: -64.6496412859 | Program output: -17.6496412859
Correct output: -8.4475981317  | Program output: -96.4475981317
Correct output: -61.9056292771 | Program output: -85.9056292771
Correct output: -100.2670640218 | Program output: -16.2670640218
Correct output: 33.5793532538  | Program output: 26.0079365358 
Correct output: -71.5665679812 | Program output: -37.5665679812
Correct output: -150.2787840572 | Program output: -156.5982655339
Correct output: -33.4710147358 | Program output: -39.4710147358
Correct output: 12.2165113619  | Program output: 30.8302645193 
Correct output: 16.3988550752  | Program output: 22.3988550752 
Correct output: -103.483665155 | Program output: -80.483665155 
Correct output: -16.1113007238 | Program output: -70.1113007238
Correct output: 1.5190821923   | Program output: -24.4809178077
Correct output: 56.222608134   | Program output: 29.222608134  
Correct output: -100.5567747653 | Program output: -72.5567747653
Correct output: 20.8692780643  | Program output: 23.8098368905 
Correct output: 137.7657204956 | Program output: 22.482630129  
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_rot} {:instruction integer_pop} {:instruction in1} {:instruction integer_mod} {:instruction float_dec} {:instruction integer_inc} {:instruction integer_sub} {:instruction float_add} {:instruction integer_flush} {:instruction integer_swap} {:instruction float_swap} {:instruction float_min} {:instruction float_tan} {:instruction integer_dup} {:instruction in1} {:instruction float_min} {:instruction float_mult} {:instruction 23.58962050531167} {:instruction integer_min} {:instruction integer_mod} {:instruction float_add} {:instruction integer_min} {:instruction integer_pop} {:instruction float_swap} {:instruction float_min} {:instruction float_tan} {:instruction integer_dup} {:instruction in1} {:instruction float_min} {:instruction float_mult} {:instruction 23.47472230998136} {:instruction float_stackdepth} {:instruction integer_mod} {:instruction float_add} {:instruction float_min} {:instruction tagged_372} {:instruction integer_inc} {:instruction float_inc} {:instruction integer_min} {:instruction integer_dup} {:instruction in1} {:instruction float_min} {:instruction -5} {:instruction integer_rot} {:instruction float_min} {:instruction print_float} {:instruction integer_rot} {:instruction integer_shove} {:instruction float_tan} {:instruction float_tan} {:instruction in2} {:instruction integer_sub} {:instruction float_add})
Best program: (integer_rot integer_pop in1 integer_mod float_dec integer_inc integer_sub float_add integer_flush integer_swap float_swap float_min float_tan integer_dup in1 float_min float_mult 23.58962050531167 integer_min integer_mod float_add integer_min integer_pop float_swap float_min float_tan integer_dup in1 float_min float_mult 23.47472230998136 float_stackdepth integer_mod float_add float_min tagged_372 integer_inc float_inc integer_min integer_dup in1 float_min -5 integer_rot float_min print_float integer_rot integer_shove float_tan float_tan in2 integer_sub float_add)
Errors: [44.0 2 19.0 12 11.1488 11 14.0 12 39.0 2 83.0 13 65.4904 12 3.0 1 47.0 2 88.0 2 24.0 2 84.0 2 7.5714 7 34.0 2 6.3195 10 6.0 1 18.6138 11 6.0 2 23.0 2 54.0 2 26.0 13 27.0 2 28.0 3 2.9406 9 115.2831 12]
Total: 1025.3676
Mean: 20.507353
Genome size: 53
Size: 54
Percent parens: 0.019
--- Population Statistics ---
Average total errors in population: 2616.269124300004
Median total errors in population: 1031.3728
Error averages by case: (113.31689289999996 3.031 77.25052880000001 12.097 67.88791460000047 9.628 69.69797420000005 11.986 106.75317180000003 3.117 146.85763949999995 13.041 124.17631799999923 10.993 60.485608600000006 2.037 111.21703100000005 3.079 153.11819719999994 3.068 93.59251649999999 3.064 143.7567855 3.315 61.45452279999996 8.81 102.17810290000004 3.083 93.17249409999906 9.42 76.77151010000001 2.267 76.14903539999993 10.078 61.84287620000003 3.545 93.51471680000003 3.166 120.95288749999997 3.085 92.31463239999997 12.897 82.70739430000002 3.741 98.09247920000001 4.049 68.0633636000011 9.146 159.27553039999995 9.926)
Error minima by case: (20.4104 2 2.5175 7 1.03 2 3.8976 7 8.2186 2 26.3732 8 4.776 8 0.6047 1 3.0809 2 7.7615 1 0.4104 2 14.7685 2 0.1855 2 3.836 2 5.3931 3 6.0 1 0.7807 2 3.8075 2 21.0 2 14.5666 2 0.0037 7 3.5253 2 22.2277 3 0.0481 2 60.2351 2)
Average genome size in population (length): 41.785
Average program size in population (points): 42.785
Average percent parens in population: 0.024
Minimum age in population: 46.39348255842924
Maximum age in population: 50.80192007427104
Average age in population: 48.75627434560726
Median age in population: 48.77847376838326
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 226
Genome diversity (% unique Plush genomes):	 0.546
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 226
Syntactic diversity (% unique Push programs):	 0.546
Total error diversity:				 0.135
Error (vector) diversity:			 0.136
Behavioral diversity:				 0.137
--- Run Statistics ---
Number of program evaluations used so far: 34000
Number of point (instruction) evaluations so far: 29267689
--- Timings ---
Current time: 1529615086335 milliseconds
Total Time:         103.0 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        41.2 seconds, 39.9%
Fitness Testing:     50.1 seconds, 48.6%
Report:              11.7 seconds, 11.3%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 33
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 34
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 34
;;******************************
;; -*- Number IO problem report - generation 34
Test total error for best: 64299.8124
Test mean error for best: 32.14991
;;------------------------------
Outputs of best individual on training cases:
Correct output: -54.078495011  | Program output: -98.078495011 
Correct output: 13.1534720339  | Program output: -5.8465279661 
Correct output: 41.2049141439  | Program output: 30.0561322787 
Correct output: -6.0487858971  | Program output: 7.9512141029  
Correct output: -75.9491370053 | Program output: -36.9491370053
Correct output: 49.8479113478  | Program output: -33.1520886522
Correct output: -43.0947106158 | Program output: 22.3956567743 
Correct output: -6.035421      | Program output: -3.035421     
Correct output: -64.6496412859 | Program output: -17.6496412859
Correct output: -8.4475981317  | Program output: -96.4475981317
Correct output: -61.9056292771 | Program output: -85.9056292771
Correct output: -100.2670640218 | Program output: -16.2670640218
Correct output: 33.5793532538  | Program output: 26.0079365358 
Correct output: -71.5665679812 | Program output: -37.5665679812
Correct output: -150.2787840572 | Program output: -156.5982655339
Correct output: -33.4710147358 | Program output: -39.4710147358
Correct output: 12.2165113619  | Program output: 30.8302645193 
Correct output: 16.3988550752  | Program output: 22.3988550752 
Correct output: -103.483665155 | Program output: -80.483665155 
Correct output: -16.1113007238 | Program output: -70.1113007238
Correct output: 1.5190821923   | Program output: -24.4809178077
Correct output: 56.222608134   | Program output: 29.222608134  
Correct output: -100.5567747653 | Program output: -72.5567747653
Correct output: 20.8692780643  | Program output: 23.8098368905 
Correct output: 137.7657204956 | Program output: 22.482630129  
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_rot} {:instruction integer_pop} {:instruction in1} {:instruction integer_mod} {:instruction float_dec} {:instruction integer_inc} {:instruction integer_sub} {:instruction float_add} {:instruction integer_flush} {:instruction integer_swap} {:instruction float_swap} {:instruction float_min} {:instruction float_tan} {:instruction integer_dup} {:instruction in1} {:instruction float_min} {:instruction float_mult} {:instruction 23.58962050531167} {:instruction integer_min} {:instruction integer_mod} {:instruction float_add} {:instruction integer_min} {:instruction integer_pop} {:instruction float_swap} {:instruction float_min} {:instruction float_tan} {:instruction integer_dup} {:instruction in1} {:instruction float_min} {:instruction float_mult} {:instruction 23.47472230998136} {:instruction float_stackdepth} {:instruction integer_mod} {:instruction float_add} {:instruction float_inc} {:instruction tagged_372} {:instruction integer_inc} {:instruction float_min} {:instruction integer_min} {:instruction integer_dup} {:instruction in1} {:instruction float_min} {:instruction -5} {:instruction integer_rot} {:instruction float_min} {:instruction print_float} {:instruction integer_rot} {:instruction integer_shove} {:instruction float_tan} {:instruction float_tan} {:instruction in2} {:instruction integer_sub} {:instruction float_add})
Best program: (integer_rot integer_pop in1 integer_mod float_dec integer_inc integer_sub float_add integer_flush integer_swap float_swap float_min float_tan integer_dup in1 float_min float_mult 23.58962050531167 integer_min integer_mod float_add integer_min integer_pop float_swap float_min float_tan integer_dup in1 float_min float_mult 23.47472230998136 float_stackdepth integer_mod float_add float_inc tagged_372 integer_inc float_min integer_min integer_dup in1 float_min -5 integer_rot float_min print_float integer_rot integer_shove float_tan float_tan in2 integer_sub float_add)
Errors: [44.0 2 19.0 12 11.1488 11 14.0 12 39.0 2 83.0 13 65.4904 12 3.0 1 47.0 2 88.0 2 24.0 2 84.0 2 7.5714 7 34.0 2 6.3195 10 6.0 1 18.6138 11 6.0 2 23.0 2 54.0 2 26.0 13 27.0 2 28.0 3 2.9406 9 115.2831 12]
Total: 1025.3676
Mean: 20.507353
Genome size: 53
Size: 54
Percent parens: 0.019
--- Population Statistics ---
Average total errors in population: 2077.023213399999
Median total errors in population: 1026.3676
Error averages by case: (88.05413929999997 2.748 57.4363663 12.059 51.96026010000068 10.394 50.74034350000003 11.922 82.48110949999999 2.768 123.76219609999997 13.012 102.30325709999906 11.651 42.04017680000002 1.864 86.35741900000001 2.777 129.46979859999996 2.749 69.0753242 2.733 120.0169511 3.043 47.59116770000029 8.029 77.78470229999999 2.763 67.01096869999957 9.214 51.60755009999999 1.923 56.603319099999595 10.511 44.41960139999998 3.389 68.7749319 2.86 97.17802319999998 2.769 67.8045728 12.909 66.38730030000006 3.75 73.8577619 3.794 45.77865820000076 9.139 148.66931420000026 11.088)
Error minima by case: (19.5253 2 3.3291 8 1.03 2 1.0201 7 15.3599 2 44.8559 8 5.7108 8 1.3911 1 4.0604 2 7.7615 2 0.4104 2 13.7685 2 0.1855 2 10.5253 2 5.3931 3 6.0 1 0.7807 2 2.5602 2 0.4747 2 13.5666 2 0.5191 9 2.5253 2 4.5253 3 0.0265 2 94.0 2)
Average genome size in population (length): 49.823
Average program size in population (points): 50.823
Average percent parens in population: 0.020
Minimum age in population: 47.39348255842924
Maximum age in population: 52.2839535564417
Average age in population: 50.25833611337456
Median age in population: 50.309668635251
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 79
Genome diversity (% unique Plush genomes):	 0.592
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 79
Syntactic diversity (% unique Push programs):	 0.592
Total error diversity:				 0.143
Error (vector) diversity:			 0.149
Behavioral diversity:				 0.149
--- Run Statistics ---
Number of program evaluations used so far: 35000
Number of point (instruction) evaluations so far: 30513339
--- Timings ---
Current time: 1529615089547 milliseconds
Total Time:         106.3 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        42.4 seconds, 39.8%
Fitness Testing:     51.7 seconds, 48.6%
Report:              12.2 seconds, 11.4%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 34
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 35
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 35
;;******************************
;; -*- Number IO problem report - generation 35
Test total error for best: 64120.92730000001
Test mean error for best: 32.06046
;;------------------------------
Outputs of best individual on training cases:
Correct output: -54.078495011  | Program output: -98.078495011 
Correct output: 13.1534720339  | Program output: -5.8465279661 
Correct output: 41.2049141439  | Program output: 31.0561322787 
Correct output: -6.0487858971  | Program output: 7.9512141029  
Correct output: -75.9491370053 | Program output: -36.9491370053
Correct output: 49.8479113478  | Program output: -33.1520886522
Correct output: -43.0947106158 | Program output: 23.3956567743 
Correct output: -6.035421      | Program output: -3.035421     
Correct output: -64.6496412859 | Program output: -17.6496412859
Correct output: -8.4475981317  | Program output: -96.4475981317
Correct output: -61.9056292771 | Program output: -85.9056292771
Correct output: -100.2670640218 | Program output: -16.2670640218
Correct output: 33.5793532538  | Program output: 27.0079365358 
Correct output: -71.5665679812 | Program output: -37.5665679812
Correct output: -150.2787840572 | Program output: -155.5982655339
Correct output: -33.4710147358 | Program output: -39.4710147358
Correct output: 12.2165113619  | Program output: 31.8302645193 
Correct output: 16.3988550752  | Program output: 22.3988550752 
Correct output: -103.483665155 | Program output: -80.483665155 
Correct output: -16.1113007238 | Program output: -70.1113007238
Correct output: 1.5190821923   | Program output: -24.4809178077
Correct output: 56.222608134   | Program output: 29.222608134  
Correct output: -100.5567747653 | Program output: -72.5567747653
Correct output: 20.8692780643  | Program output: 24.8098368905 
Correct output: 137.7657204956 | Program output: 23.482630129  
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_rot} {:instruction float_cos} {:instruction in1} {:instruction integer_mod} {:instruction float_dec} {:instruction integer_inc} {:instruction integer_sub} {:instruction float_add} {:instruction integer_flush} {:instruction integer_swap} {:instruction float_swap} {:instruction float_min} {:instruction float_tan} {:instruction integer_dup} {:instruction in1} {:instruction float_min} {:instruction float_mult} {:instruction 23.58962050531167} {:instruction integer_min} {:instruction integer_mod} {:instruction float_add} {:instruction integer_min} {:instruction integer_pop} {:instruction float_swap} {:instruction float_min} {:instruction float_tan} {:instruction integer_dup} {:instruction in1} {:instruction float_min} {:instruction float_mult} {:instruction 23.47472230998136} {:instruction float_stackdepth} {:instruction integer_mod} {:instruction float_add} {:instruction float_min} {:instruction tagged_372} {:instruction integer_inc} {:instruction float_inc} {:instruction integer_min} {:instruction float_inc} {:instruction in1} {:instruction integer_sub} {:instruction -5} {:instruction integer_rot} {:instruction float_min} {:instruction print_float} {:instruction integer_rot} {:instruction integer_shove} {:instruction float_tan} {:instruction float_tan} {:instruction in2} {:instruction integer_sub} {:instruction float_add})
Best program: (integer_rot float_cos in1 integer_mod float_dec integer_inc integer_sub float_add integer_flush integer_swap float_swap float_min float_tan integer_dup in1 float_min float_mult 23.58962050531167 integer_min integer_mod float_add integer_min integer_pop float_swap float_min float_tan integer_dup in1 float_min float_mult 23.47472230998136 float_stackdepth integer_mod float_add float_min tagged_372 integer_inc float_inc integer_min float_inc in1 integer_sub -5 integer_rot float_min print_float integer_rot integer_shove float_tan float_tan in2 integer_sub float_add)
Errors: [44.0 2 19.0 12 10.1488 10 14.0 12 39.0 2 83.0 13 66.4904 11 3.0 1 47.0 2 88.0 2 24.0 2 84.0 2 6.5714 7 34.0 2 5.3195 10 6.0 1 19.6138 11 6.0 2 23.0 2 54.0 2 26.0 13 27.0 2 28.0 3 3.9406 9 114.2831 11]
Total: 1021.3675999999999
Mean: 20.427353
Genome size: 53
Size: 54
Percent parens: 0.019
--- Population Statistics ---
Average total errors in population: 1831.1388100999982
Median total errors in population: 1026.3676
Error averages by case: (77.67789289999999 2.592 49.70424519999998 12.03 43.85939940000025 10.766 43.64896510000001 11.97 71.6322779 2.582 113.17871709999997 13.001 92.7115359999995 11.86 34.46777120000003 1.739 77.79941690000001 2.634 118.57158749999995 2.555 57.095898000000005 2.572 112.8802726 2.732 40.01265460000045 7.523 66.68642179999998 2.565 51.32246419999974 9.241 39.751332199999986 1.637 47.55594319999944 10.83 36.534749199999986 3.153 56.83490109999998 2.596 85.90744579999998 2.6 57.41003960000002 12.979 57.35353400000005 3.611 62.172588999999974 3.627 35.058351400000554 9.148 143.17640420000046 11.591)
Error minima by case: (19.5253 2 4.4747 9 3.1588 2 4.2829 7 2.0509 1 26.5118 8 5.7108 9 0.3911 1 26.3839 2 9.2042 2 0.4747 2 38.2432 2 0.1855 2 3.5666 2 5.2578 3 5.0 1 1.2948 2 4.3766 2 22.0 2 16.7765 2 1.478 7 2.5253 2 27.0 3 0.1416 2 83.3663 2)
Average genome size in population (length): 52.669
Average program size in population (points): 53.669
Average percent parens in population: 0.019
Minimum age in population: 49.39348255842924
Maximum age in population: 53.81347056396771
Average age in population: 51.63532604839694
Median age in population: 51.69219426278141
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 69
Genome diversity (% unique Plush genomes):	 0.659
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 69
Syntactic diversity (% unique Push programs):	 0.659
Total error diversity:				 0.124
Error (vector) diversity:			 0.13
Behavioral diversity:				 0.131
--- Run Statistics ---
Number of program evaluations used so far: 36000
Number of point (instruction) evaluations so far: 31830139
--- Timings ---
Current time: 1529615092896 milliseconds
Total Time:         109.6 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        43.5 seconds, 39.7%
Fitness Testing:     53.4 seconds, 48.7%
Report:              12.5 seconds, 11.4%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 35
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 36
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 36
;;******************************
;; -*- Number IO problem report - generation 36
Test total error for best: 64120.92730000001
Test mean error for best: 32.06046
;;------------------------------
Outputs of best individual on training cases:
Correct output: -54.078495011  | Program output: -98.078495011 
Correct output: 13.1534720339  | Program output: -5.8465279661 
Correct output: 41.2049141439  | Program output: 31.0561322787 
Correct output: -6.0487858971  | Program output: 7.9512141029  
Correct output: -75.9491370053 | Program output: -36.9491370053
Correct output: 49.8479113478  | Program output: -33.1520886522
Correct output: -43.0947106158 | Program output: 23.3956567743 
Correct output: -6.035421      | Program output: -3.035421     
Correct output: -64.6496412859 | Program output: -17.6496412859
Correct output: -8.4475981317  | Program output: -96.4475981317
Correct output: -61.9056292771 | Program output: -85.9056292771
Correct output: -100.2670640218 | Program output: -16.2670640218
Correct output: 33.5793532538  | Program output: 27.0079365358 
Correct output: -71.5665679812 | Program output: -37.5665679812
Correct output: -150.2787840572 | Program output: -155.5982655339
Correct output: -33.4710147358 | Program output: -39.4710147358
Correct output: 12.2165113619  | Program output: 31.8302645193 
Correct output: 16.3988550752  | Program output: 22.3988550752 
Correct output: -103.483665155 | Program output: -80.483665155 
Correct output: -16.1113007238 | Program output: -70.1113007238
Correct output: 1.5190821923   | Program output: -24.4809178077
Correct output: 56.222608134   | Program output: 29.222608134  
Correct output: -100.5567747653 | Program output: -72.5567747653
Correct output: 20.8692780643  | Program output: 24.8098368905 
Correct output: 137.7657204956 | Program output: 23.482630129  
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_rot} {:instruction float_cos} {:instruction in1} {:instruction integer_mod} {:instruction float_dec} {:instruction integer_inc} {:instruction integer_sub} {:instruction float_add} {:instruction integer_flush} {:instruction integer_swap} {:instruction float_swap} {:instruction float_min} {:instruction float_tan} {:instruction integer_dup} {:instruction in1} {:instruction float_min} {:instruction float_mult} {:instruction 23.58962050531167} {:instruction integer_min} {:instruction integer_mod} {:instruction float_add} {:instruction integer_min} {:instruction integer_pop} {:instruction float_swap} {:instruction float_min} {:instruction float_tan} {:instruction integer_dup} {:instruction in1} {:instruction float_min} {:instruction float_mult} {:instruction 23.47472230998136} {:instruction float_stackdepth} {:instruction integer_mod} {:instruction float_add} {:instruction float_min} {:instruction tagged_372} {:instruction integer_inc} {:instruction float_inc} {:instruction integer_min} {:instruction float_inc} {:instruction in1} {:instruction integer_sub} {:instruction -5} {:instruction integer_rot} {:instruction float_min} {:instruction print_float} {:instruction integer_rot} {:instruction integer_shove} {:instruction float_tan} {:instruction float_tan} {:instruction in2} {:instruction integer_sub} {:instruction float_add})
Best program: (integer_rot float_cos in1 integer_mod float_dec integer_inc integer_sub float_add integer_flush integer_swap float_swap float_min float_tan integer_dup in1 float_min float_mult 23.58962050531167 integer_min integer_mod float_add integer_min integer_pop float_swap float_min float_tan integer_dup in1 float_min float_mult 23.47472230998136 float_stackdepth integer_mod float_add float_min tagged_372 integer_inc float_inc integer_min float_inc in1 integer_sub -5 integer_rot float_min print_float integer_rot integer_shove float_tan float_tan in2 integer_sub float_add)
Errors: [44.0 2 19.0 12 10.1488 10 14.0 12 39.0 2 83.0 13 66.4904 11 3.0 1 47.0 2 88.0 2 24.0 2 84.0 2 6.5714 7 34.0 2 5.3195 10 6.0 1 19.6138 11 6.0 2 23.0 2 54.0 2 26.0 13 27.0 2 28.0 3 3.9406 9 114.2831 11]
Total: 1021.3675999999999
Mean: 20.427353
Genome size: 53
Size: 54
Percent parens: 0.019
--- Population Statistics ---
Average total errors in population: 2086.1992297999986
Median total errors in population: 1026.3676
Error averages by case: (84.86564409999995 2.675 60.456415699999994 12.085 55.267436600000956 10.721 55.65183470000004 12.021 80.64734670000003 2.695 121.87800089999995 13.045 104.37940939999862 11.861 45.43843729999999 1.792 87.77126420000003 2.748 127.43742359999995 2.677 65.874922 2.663 122.16582140000001 2.923 51.313064900000384 7.64 75.84055810000002 2.7 61.88136669999911 9.165 48.955243599999996 1.765 59.7535562999995 10.799 48.38088679999997 3.187 65.76271469999998 2.721 94.2061703 2.711 67.20212479999999 13.004 69.05993520000008 3.775 70.82617340000002 3.718 47.76266590000072 9.16 153.50781250000034 11.662)
Error minima by case: (19.5253 2 4.4747 9 5.6545 2 2.5668 7 15.5253 1 26.5118 8 17.5409 8 0.3911 1 14.6862 2 7.639 2 0.4747 2 6.4943 2 1.0561 2 10.5253 2 5.2578 3 5.0 1 2.2948 2 2.6344 2 0.4747 2 14.5666 2 0.5627 8 2.5253 2 4.5253 3 0.4596 2 94.0 2)
Average genome size in population (length): 53.047
Average program size in population (points): 54.047
Average percent parens in population: 0.019
Minimum age in population: 50.66005808487535
Maximum age in population: 54.86230285748024
Average age in population: 52.90589357772743
Median age in population: 52.96215831818699
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 73
Genome diversity (% unique Plush genomes):	 0.666
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 73
Syntactic diversity (% unique Push programs):	 0.666
Total error diversity:				 0.145
Error (vector) diversity:			 0.155
Behavioral diversity:				 0.156
--- Run Statistics ---
Number of program evaluations used so far: 37000
Number of point (instruction) evaluations so far: 33156414
--- Timings ---
Current time: 1529615096565 milliseconds
Total Time:         113.2 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        44.9 seconds, 39.6%
Fitness Testing:     55.2 seconds, 48.8%
Report:              13.0 seconds, 11.5%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 36
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 37
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 37
;;******************************
;; -*- Number IO problem report - generation 37
Test total error for best: 64479.487499999974
Test mean error for best: 32.23974
;;------------------------------
Outputs of best individual on training cases:
Correct output: -54.078495011  | Program output: -98.078495011 
Correct output: 13.1534720339  | Program output: -5.8465279661 
Correct output: 41.2049141439  | Program output: 27.900171539  
Correct output: -6.0487858971  | Program output: 7.9512141029  
Correct output: -75.9491370053 | Program output: -36.9491370053
Correct output: 49.8479113478  | Program output: -33.1520886522
Correct output: -43.0947106158 | Program output: 24.7055149776 
Correct output: -6.035421      | Program output: -3.035421     
Correct output: -64.6496412859 | Program output: -17.6496412859
Correct output: -8.4475981317  | Program output: -96.4475981317
Correct output: -61.9056292771 | Program output: -85.9056292771
Correct output: -100.2670640218 | Program output: -16.2670640218
Correct output: 33.5793532538  | Program output: 25.2113400272 
Correct output: -71.5665679812 | Program output: -37.5665679812
Correct output: -150.2787840572 | Program output: -155.5365790486
Correct output: -33.4710147358 | Program output: -39.4710147358
Correct output: 12.2165113619  | Program output: 28.2536110109 
Correct output: 16.3988550752  | Program output: 22.3988550752 
Correct output: -103.483665155 | Program output: -80.483665155 
Correct output: -16.1113007238 | Program output: -70.1113007238
Correct output: 1.5190821923   | Program output: -24.4809178077
Correct output: 56.222608134   | Program output: 29.222608134  
Correct output: -100.5567747653 | Program output: -72.5567747653
Correct output: 20.8692780643  | Program output: 23.3905384276 
Correct output: 137.7657204956 | Program output: 24.7172706749 
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_rot} {:instruction integer_pop} {:instruction in1} {:instruction integer_mod} {:instruction float_dec} {:instruction integer_inc} {:instruction integer_sub} {:instruction float_add} {:instruction integer_flush} {:instruction integer_swap} {:instruction float_swap} {:instruction in1} {:instruction integer_mod} {:instruction float_dec} {:instruction integer_inc} {:instruction integer_sub} {:instruction float_add} {:instruction integer_flush} {:instruction integer_swap} {:instruction float_swap} {:instruction float_min} {:instruction float_tan} {:instruction integer_dup} {:instruction in1} {:instruction float_min} {:instruction float_mult} {:instruction 23.58962050531167} {:instruction integer_min} {:instruction integer_mod} {:instruction float_add} {:instruction integer_min} {:instruction integer_pop} {:instruction float_swap} {:instruction float_min} {:instruction float_tan} {:instruction integer_dup} {:instruction integer_dec} {:instruction float_min} {:instruction float_mult} {:instruction 25.536408795337756} {:instruction float_stackdepth} {:instruction integer_mod} {:instruction float_add} {:instruction float_min} {:instruction tagged_372} {:instruction integer_inc} {:instruction float_min} {:instruction integer_min} {:instruction integer_dup} {:instruction in1} {:instruction float_min} {:instruction -5} {:instruction integer_rot} {:instruction float_min} {:instruction print_float} {:instruction integer_rot} {:instruction integer_shove} {:instruction float_tan} {:instruction float_tan} {:instruction in2} {:instruction integer_sub} {:instruction float_add})
Best program: (integer_rot integer_pop in1 integer_mod float_dec integer_inc integer_sub float_add integer_flush integer_swap float_swap in1 integer_mod float_dec integer_inc integer_sub float_add integer_flush integer_swap float_swap float_min float_tan integer_dup in1 float_min float_mult 23.58962050531167 integer_min integer_mod float_add integer_min integer_pop float_swap float_min float_tan integer_dup integer_dec float_min float_mult 25.536408795337756 float_stackdepth integer_mod float_add float_min tagged_372 integer_inc float_min integer_min integer_dup in1 float_min -5 integer_rot float_min print_float integer_rot integer_shove float_tan float_tan in2 integer_sub float_add)
Errors: [44.0 2 19.0 12 13.3047 7 14.0 12 39.0 2 83.0 13 67.8002 11 3.0 1 47.0 2 88.0 2 24.0 2 84.0 2 8.368 11 34.0 2 5.2578 10 6.0 1 16.0371 8 6.0 2 23.0 2 54.0 2 26.0 13 27.0 2 28.0 3 2.5213 10 113.0484 10]
Total: 1019.3375000000001
Mean: 20.38675
Genome size: 62
Size: 63
Percent parens: 0.016
--- Population Statistics ---
Average total errors in population: 2017.6866772999995
Median total errors in population: 1025.3676
Error averages by case: (83.44150759999997 2.641 57.25651359999999 12.046 51.40510360000029 10.741 52.57625219999999 12.026 78.7210491 2.692 119.81136639999995 12.992 102.0951876999995 11.823 42.53567760000001 1.732 85.20467260000002 2.719 124.82695169999995 2.638 63.78785339999999 2.64 119.95916869999999 2.867 47.53866260000037 7.661 73.7051379 2.668 57.077673199999836 9.327 47.6744548 1.758 56.96234809999957 10.854 45.18373349999998 2.972 63.68990269999998 2.701 92.33839829999995 2.705 64.5220649 12.976 65.70224180000005 3.583 68.52598039999998 3.687 44.107372600000694 9.186 149.76540230000032 11.637)
Error minima by case: (18.5253 2 4.4747 9 5.6545 2 2.0407 9 16.5253 1 50.614 8 3.3833 8 0.0692 1 24.5253 2 8.1899 2 0.4747 2 38.3581 2 1.0561 2 11.5253 2 4.781 3 5.0 1 2.2948 2 2.0894 2 0.5253 2 15.7373 2 0.5253 8 1.132 2 5.5253 3 0.6127 2 94.0 2)
Average genome size in population (length): 54.154
Average program size in population (points): 55.154
Average percent parens in population: 0.018
Minimum age in population: 51.66005808487535
Maximum age in population: 56.01802097129985
Average age in population: 54.25954985742581
Median age in population: 54.28144028280076
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 86
Genome diversity (% unique Plush genomes):	 0.664
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 86
Syntactic diversity (% unique Push programs):	 0.664
Total error diversity:				 0.122
Error (vector) diversity:			 0.129
Behavioral diversity:				 0.13
--- Run Statistics ---
Number of program evaluations used so far: 38000
Number of point (instruction) evaluations so far: 34510389
--- Timings ---
Current time: 1529615099808 milliseconds
Total Time:         116.6 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        46.0 seconds, 39.5%
Fitness Testing:     56.9 seconds, 48.8%
Report:              13.6 seconds, 11.6%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 37
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 38
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 38
;;******************************
;; -*- Number IO problem report - generation 38
Test total error for best: 64479.487499999974
Test mean error for best: 32.23974
;;------------------------------
Outputs of best individual on training cases:
Correct output: -54.078495011  | Program output: -98.078495011 
Correct output: 13.1534720339  | Program output: -5.8465279661 
Correct output: 41.2049141439  | Program output: 27.900171539  
Correct output: -6.0487858971  | Program output: 7.9512141029  
Correct output: -75.9491370053 | Program output: -36.9491370053
Correct output: 49.8479113478  | Program output: -33.1520886522
Correct output: -43.0947106158 | Program output: 24.7055149776 
Correct output: -6.035421      | Program output: -3.035421     
Correct output: -64.6496412859 | Program output: -17.6496412859
Correct output: -8.4475981317  | Program output: -96.4475981317
Correct output: -61.9056292771 | Program output: -85.9056292771
Correct output: -100.2670640218 | Program output: -16.2670640218
Correct output: 33.5793532538  | Program output: 25.2113400272 
Correct output: -71.5665679812 | Program output: -37.5665679812
Correct output: -150.2787840572 | Program output: -155.5365790486
Correct output: -33.4710147358 | Program output: -39.4710147358
Correct output: 12.2165113619  | Program output: 28.2536110109 
Correct output: 16.3988550752  | Program output: 22.3988550752 
Correct output: -103.483665155 | Program output: -80.483665155 
Correct output: -16.1113007238 | Program output: -70.1113007238
Correct output: 1.5190821923   | Program output: -24.4809178077
Correct output: 56.222608134   | Program output: 29.222608134  
Correct output: -100.5567747653 | Program output: -72.5567747653
Correct output: 20.8692780643  | Program output: 23.3905384276 
Correct output: 137.7657204956 | Program output: 24.7172706749 
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_rot} {:instruction integer_pop} {:instruction in1} {:instruction integer_mod} {:instruction float_dec} {:instruction integer_inc} {:instruction integer_sub} {:instruction float_add} {:instruction integer_flush} {:instruction in1} {:instruction integer_mod} {:instruction float_dec} {:instruction integer_inc} {:instruction integer_sub} {:instruction float_add} {:instruction integer_flush} {:instruction integer_swap} {:instruction float_swap} {:instruction float_min} {:instruction float_tan} {:instruction integer_dup} {:instruction in1} {:instruction float_min} {:instruction float_mult} {:instruction 23.58962050531167} {:instruction integer_min} {:instruction integer_mod} {:instruction float_add} {:instruction integer_min} {:instruction integer_pop} {:instruction float_swap} {:instruction float_min} {:instruction float_tan} {:instruction integer_dup} {:instruction integer_dec} {:instruction float_min} {:instruction float_mult} {:instruction 25.536408795337756} {:instruction float_stackdepth} {:instruction integer_mod} {:instruction float_add} {:instruction float_min} {:instruction tagged_372} {:instruction integer_inc} {:instruction float_min} {:instruction integer_min} {:instruction integer_dup} {:instruction in1} {:instruction float_min} {:instruction -5} {:instruction integer_rot} {:instruction float_min} {:instruction print_float} {:instruction integer_rot} {:instruction integer_shove} {:instruction float_tan} {:instruction integer_rot} {:instruction float_min} {:instruction print_float} {:instruction integer_rot} {:instruction integer_shove} {:instruction float_tan} {:instruction float_tan} {:instruction in2} {:instruction integer_sub} {:instruction float_add})
Best program: (integer_rot integer_pop in1 integer_mod float_dec integer_inc integer_sub float_add integer_flush in1 integer_mod float_dec integer_inc integer_sub float_add integer_flush integer_swap float_swap float_min float_tan integer_dup in1 float_min float_mult 23.58962050531167 integer_min integer_mod float_add integer_min integer_pop float_swap float_min float_tan integer_dup integer_dec float_min float_mult 25.536408795337756 float_stackdepth integer_mod float_add float_min tagged_372 integer_inc float_min integer_min integer_dup in1 float_min -5 integer_rot float_min print_float integer_rot integer_shove float_tan integer_rot float_min print_float integer_rot integer_shove float_tan float_tan in2 integer_sub float_add)
Errors: [44.0 2 19.0 12 13.3047 7 14.0 12 39.0 2 83.0 13 67.8002 11 3.0 1 47.0 2 88.0 2 24.0 2 84.0 2 8.368 11 34.0 2 5.2578 10 6.0 1 16.0371 8 6.0 2 23.0 2 54.0 2 26.0 13 27.0 2 28.0 3 2.5213 10 113.0484 10]
Total: 1019.3375000000001
Mean: 20.38675
Genome size: 66
Size: 67
Percent parens: 0.015
--- Population Statistics ---
Average total errors in population: 2123.803147700003
Median total errors in population: 1025.3676
Error averages by case: (86.84168449999996 2.788 61.254739799999996 12.131 55.772877000000456 10.619 56.392740200000055 12.057 82.71307450000003 2.759 123.12840699999992 13.107 105.9471788999993 11.602 46.386641 1.892 89.14960610000003 2.783 127.97096089999994 2.736 68.0435956 2.726 125.36703190000003 2.975 52.88363540000041 8.118 78.08883290000003 2.761 62.37236659999938 9.417 51.102014299999986 1.83 60.90297239999965 10.89 49.4195614 3.166 68.2904087 2.778 95.87654799999997 2.792 68.49380009999997 13.06 69.87396530000002 3.763 73.73125329999999 3.836 48.80948470000066 9.39 153.6827672000002 11.331)
Error minima by case: (18.5253 2 4.4747 8 1.6825 2 1.0488 7 20.3719 1 19.7794 8 3.3833 8 0.3911 1 31.6713 2 3.4476 2 0.4747 2 3.9461 2 4.4744 2 24.7544 2 3.2578 3 5.0 1 2.2948 2 2.4069 2 7.1627 2 6.6075 2 0.5253 8 1.5253 2 4.2358 3 0.3166 2 81.0446 2)
Average genome size in population (length): 54.802
Average program size in population (points): 55.802
Average percent parens in population: 0.018
Minimum age in population: 53.2148052835837
Maximum age in population: 57.73524468322285
Average age in population: 55.76546550252053
Median age in population: 55.80672996485737
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 40
Genome diversity (% unique Plush genomes):	 0.688
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 40
Syntactic diversity (% unique Push programs):	 0.688
Total error diversity:				 0.16
Error (vector) diversity:			 0.172
Behavioral diversity:				 0.173
--- Run Statistics ---
Number of program evaluations used so far: 39000
Number of point (instruction) evaluations so far: 35880564
--- Timings ---
Current time: 1529615103352 milliseconds
Total Time:         120.0 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        47.2 seconds, 39.4%
Fitness Testing:     58.6 seconds, 48.9%
Report:              14.0 seconds, 11.7%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 38
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 39
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 39
;;******************************
;; -*- Number IO problem report - generation 39
Test total error for best: 66206.8272
Test mean error for best: 33.10341
;;------------------------------
Outputs of best individual on training cases:
Correct output: -54.078495011  | Program output: -98.078495011 
Correct output: 13.1534720339  | Program output: -5.8465279661 
Correct output: 41.2049141439  | Program output: 30.8704844905 
Correct output: -6.0487858971  | Program output: 7.9512141029  
Correct output: -75.9491370053 | Program output: -36.9491370053
Correct output: 49.8479113478  | Program output: -33.1520886522
Correct output: -43.0947106158 | Program output: 23.6762619762 
Correct output: -6.035421      | Program output: -3.035421     
Correct output: -64.6496412859 | Program output: -17.6496412859
Correct output: -8.4475981317  | Program output: -96.4475981317
Correct output: -61.9056292771 | Program output: -85.9056292771
Correct output: -100.2670640218 | Program output: -16.2670640218
Correct output: 33.5793532538  | Program output: 26.442603193  
Correct output: -71.5665679812 | Program output: -37.5665679812
Correct output: -150.2787840572 | Program output: -155.5982655339
Correct output: -33.4710147358 | Program output: -39.4710147358
Correct output: 12.2165113619  | Program output: 31.6583734785 
Correct output: 16.3988550752  | Program output: 22.3988550752 
Correct output: -103.483665155 | Program output: -80.483665155 
Correct output: -16.1113007238 | Program output: -70.1113007238
Correct output: 1.5190821923   | Program output: -24.4809178077
Correct output: 56.222608134   | Program output: 29.222608134  
Correct output: -100.5567747653 | Program output: -72.5567747653
Correct output: 20.8692780643  | Program output: 20.7630509043 
Correct output: 137.7657204956 | Program output: 23.7792051017 
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_rot} {:instruction integer_pop} {:instruction in1} {:instruction integer_mod} {:instruction float_dec} {:instruction integer_inc} {:instruction integer_sub} {:instruction float_min} {:instruction float_tan} {:instruction integer_dup} {:instruction in1} {:instruction float_min} {:instruction float_mult} {:instruction 23.58962050531167} {:instruction integer_min} {:instruction integer_mod} {:instruction integer_swap} {:instruction float_swap} {:instruction float_min} {:instruction float_tan} {:instruction integer_dup} {:instruction float_tan} {:instruction integer_dup} {:instruction in1} {:instruction float_min} {:instruction float_mult} {:instruction 23.58962050531167} {:instruction integer_min} {:instruction integer_mod} {:instruction float_add} {:instruction integer_min} {:instruction integer_pop} {:instruction float_swap} {:instruction float_min} {:instruction float_tan} {:instruction integer_dup} {:instruction in1} {:instruction float_min} {:instruction float_mult} {:instruction 23.47472230998136} {:instruction float_stackdepth} {:instruction integer_mod} {:instruction float_add} {:instruction float_min} {:instruction tagged_372} {:instruction integer_inc} {:instruction float_inc} {:instruction integer_min} {:instruction float_inc} {:instruction in1} {:instruction integer_sub} {:instruction -5} {:instruction integer_rot} {:instruction float_min} {:instruction print_float} {:instruction integer_rot} {:instruction integer_shove} {:instruction float_tan} {:instruction float_tan} {:instruction in2} {:instruction integer_sub} {:instruction float_add})
Best program: (integer_rot integer_pop in1 integer_mod float_dec integer_inc integer_sub float_min float_tan integer_dup in1 float_min float_mult 23.58962050531167 integer_min integer_mod integer_swap float_swap float_min float_tan integer_dup float_tan integer_dup in1 float_min float_mult 23.58962050531167 integer_min integer_mod float_add integer_min integer_pop float_swap float_min float_tan integer_dup in1 float_min float_mult 23.47472230998136 float_stackdepth integer_mod float_add float_min tagged_372 integer_inc float_inc integer_min float_inc in1 integer_sub -5 integer_rot float_min print_float integer_rot integer_shove float_tan float_tan in2 integer_sub float_add)
Errors: [44.0 2 19.0 12 10.3344 10 14.0 12 39.0 2 83.0 13 66.771 11 3.0 1 47.0 2 88.0 2 24.0 2 84.0 2 7.1368 10 34.0 2 5.3195 10 6.0 1 19.4419 11 6.0 2 23.0 2 54.0 2 26.0 13 27.0 2 28.0 3 0.1062 7 113.9865 10]
Total: 1018.0962999999999
Mean: 20.361925
Genome size: 62
Size: 63
Percent parens: 0.016
--- Population Statistics ---
Average total errors in population: 2216.1065188999983
Median total errors in population: 1023.2064999999999
Error averages by case: (93.57733379999998 2.781 64.9624748 12.124 55.56063860000055 9.98 55.97568270000003 12.081 88.04315519999999 2.764 128.65421869999997 13.097 108.28859269999923 11.246 49.94058110000001 1.837 93.42654450000002 2.792 136.07967969999999 2.747 74.8293284 2.758 127.53979079999998 2.956 52.12960630000033 7.794 83.35182679999998 2.793 70.33743209999926 9.104 57.15705279999998 1.828 63.33725829999959 10.6 49.78524050000001 2.928 74.40310869999999 2.774 102.89738999999999 2.807 73.5385738 13.043 69.69325090000005 3.772 79.68381129999997 3.831 52.38218480000072 9.111 152.30776160000028 10.676)
Error minima by case: (5.0643 2 4.4747 7 4.6545 2 0.5668 7 19.554 1 26.3732 8 0.2926 8 0.3911 1 30.8535 2 31.9223 2 0.4747 2 4.7639 2 0.7902 2 8.0318 2 3.2578 2 4.0 1 3.2948 2 4.926 2 7.9805 2 4.9357 2 0.5253 8 1.5253 2 5.0537 2 0.1062 2 87.8446 2)
Average genome size in population (length): 55.492
Average program size in population (points): 56.492
Average percent parens in population: 0.018
Minimum age in population: 54.68767364128871
Maximum age in population: 58.86299452567619
Average age in population: 57.24650139644779
Median age in population: 57.31165243613214
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 71
Genome diversity (% unique Plush genomes):	 0.667
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 71
Syntactic diversity (% unique Push programs):	 0.667
Total error diversity:				 0.18
Error (vector) diversity:			 0.189
Behavioral diversity:				 0.19
--- Run Statistics ---
Number of program evaluations used so far: 40000
Number of point (instruction) evaluations so far: 37267864
--- Timings ---
Current time: 1529615106833 milliseconds
Total Time:         123.6 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        48.4 seconds, 39.2%
Fitness Testing:     60.5 seconds, 49.0%
Report:              14.6 seconds, 11.8%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 39
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 40
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 40
;;******************************
;; -*- Number IO problem report - generation 40
Test total error for best: 66206.8272
Test mean error for best: 33.10341
;;------------------------------
Outputs of best individual on training cases:
Correct output: -54.078495011  | Program output: -98.078495011 
Correct output: 13.1534720339  | Program output: -5.8465279661 
Correct output: 41.2049141439  | Program output: 30.8704844905 
Correct output: -6.0487858971  | Program output: 7.9512141029  
Correct output: -75.9491370053 | Program output: -36.9491370053
Correct output: 49.8479113478  | Program output: -33.1520886522
Correct output: -43.0947106158 | Program output: 23.6762619762 
Correct output: -6.035421      | Program output: -3.035421     
Correct output: -64.6496412859 | Program output: -17.6496412859
Correct output: -8.4475981317  | Program output: -96.4475981317
Correct output: -61.9056292771 | Program output: -85.9056292771
Correct output: -100.2670640218 | Program output: -16.2670640218
Correct output: 33.5793532538  | Program output: 26.442603193  
Correct output: -71.5665679812 | Program output: -37.5665679812
Correct output: -150.2787840572 | Program output: -155.5982655339
Correct output: -33.4710147358 | Program output: -39.4710147358
Correct output: 12.2165113619  | Program output: 31.6583734785 
Correct output: 16.3988550752  | Program output: 22.3988550752 
Correct output: -103.483665155 | Program output: -80.483665155 
Correct output: -16.1113007238 | Program output: -70.1113007238
Correct output: 1.5190821923   | Program output: -24.4809178077
Correct output: 56.222608134   | Program output: 29.222608134  
Correct output: -100.5567747653 | Program output: -72.5567747653
Correct output: 20.8692780643  | Program output: 20.7630509043 
Correct output: 137.7657204956 | Program output: 23.7792051017 
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_rot} {:instruction integer_pop} {:instruction in1} {:instruction integer_mod} {:instruction float_dec} {:instruction integer_inc} {:instruction integer_sub} {:instruction float_min} {:instruction float_tan} {:instruction integer_dup} {:instruction in1} {:instruction float_min} {:instruction float_mult} {:instruction 23.58962050531167} {:instruction integer_min} {:instruction integer_mod} {:instruction integer_swap} {:instruction float_swap} {:instruction float_min} {:instruction float_tan} {:instruction integer_dup} {:instruction float_tan} {:instruction integer_dup} {:instruction in1} {:instruction float_min} {:instruction float_mult} {:instruction 23.58962050531167} {:instruction integer_min} {:instruction integer_mod} {:instruction float_add} {:instruction integer_min} {:instruction integer_pop} {:instruction float_swap} {:instruction float_min} {:instruction float_tan} {:instruction integer_dup} {:instruction in1} {:instruction float_min} {:instruction float_mult} {:instruction 23.47472230998136} {:instruction float_stackdepth} {:instruction integer_mod} {:instruction float_add} {:instruction float_min} {:instruction tagged_372} {:instruction integer_inc} {:instruction float_inc} {:instruction integer_min} {:instruction float_inc} {:instruction in1} {:instruction integer_sub} {:instruction -5} {:instruction integer_rot} {:instruction float_min} {:instruction print_float} {:instruction integer_rot} {:instruction integer_shove} {:instruction float_tan} {:instruction float_tan} {:instruction in2} {:instruction integer_sub} {:instruction float_add})
Best program: (integer_rot integer_pop in1 integer_mod float_dec integer_inc integer_sub float_min float_tan integer_dup in1 float_min float_mult 23.58962050531167 integer_min integer_mod integer_swap float_swap float_min float_tan integer_dup float_tan integer_dup in1 float_min float_mult 23.58962050531167 integer_min integer_mod float_add integer_min integer_pop float_swap float_min float_tan integer_dup in1 float_min float_mult 23.47472230998136 float_stackdepth integer_mod float_add float_min tagged_372 integer_inc float_inc integer_min float_inc in1 integer_sub -5 integer_rot float_min print_float integer_rot integer_shove float_tan float_tan in2 integer_sub float_add)
Errors: [44.0 2 19.0 12 10.3344 10 14.0 12 39.0 2 83.0 13 66.771 11 3.0 1 47.0 2 88.0 2 24.0 2 84.0 2 7.1368 10 34.0 2 5.3195 10 6.0 1 19.4419 11 6.0 2 23.0 2 54.0 2 26.0 13 27.0 2 28.0 3 0.1062 7 113.9865 10]
Total: 1018.0962999999999
Mean: 20.361925
Genome size: 62
Size: 63
Percent parens: 0.016
--- Population Statistics ---
Average total errors in population: 2090.2176950999983
Median total errors in population: 1021.3675999999999
Error averages by case: (85.73094979999998 2.759 60.262433799999975 12.036 54.256076400000396 9.981 54.0032398 12.005 81.40961620000002 2.762 121.64185879999995 12.977 106.42387769999922 10.983 45.63107559999999 1.865 88.06402970000003 2.829 127.25054129999994 2.758 66.82288389999998 2.75 122.4779305 3.027 50.16922070000037 7.873 76.66419100000003 2.771 60.712887699999726 9.273 49.92487879999997 1.859 61.50966049999948 10.568 47.702983799999984 2.988 67.18607789999997 2.829 94.90087439999998 2.832 66.7292335 12.927 69.36633810000002 3.824 72.0324033 3.817 49.91900120000056 9.273 150.9904307000006 10.869)
Error minima by case: (5.0643 2 4.4747 9 7.6545 2 3.0201 7 17.5253 2 23.9733 8 4.3833 8 0.3873 1 14.7141 2 7.7615 2 0.4747 2 16.7685 2 3.4274 2 12.5253 2 3.3195 3 6.0 1 0.9055 2 5.9959 2 1.5253 2 4.9357 2 0.4747 7 0.5253 2 5.3927 3 0.1062 2 91.4054 2)
Average genome size in population (length): 55.221
Average program size in population (points): 56.221
Average percent parens in population: 0.018
Minimum age in population: 56.3340154846228
Maximum age in population: 60.36815590620063
Average age in population: 58.56770703102967
Median age in population: 58.62690769828987
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 58
Genome diversity (% unique Plush genomes):	 0.683
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 58
Syntactic diversity (% unique Push programs):	 0.683
Total error diversity:				 0.162
Error (vector) diversity:			 0.167
Behavioral diversity:				 0.168
--- Run Statistics ---
Number of program evaluations used so far: 41000
Number of point (instruction) evaluations so far: 38648589
--- Timings ---
Current time: 1529615110081 milliseconds
Total Time:         126.8 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        49.5 seconds, 39.1%
Fitness Testing:     62.2 seconds, 49.1%
Report:              15.0 seconds, 11.8%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 40
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 41
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 41
;;******************************
;; -*- Number IO problem report - generation 41
Test total error for best: 64113.406599999995
Test mean error for best: 32.05670
;;------------------------------
Outputs of best individual on training cases:
Correct output: -54.078495011  | Program output: -98.078495011 
Correct output: 13.1534720339  | Program output: -5.8465279661 
Correct output: 41.2049141439  | Program output: 31.0645771204 
Correct output: -6.0487858971  | Program output: 7.9512141029  
Correct output: -75.9491370053 | Program output: -36.9491370053
Correct output: 49.8479113478  | Program output: -33.1520886522
Correct output: -43.0947106158 | Program output: 23.404101616  
Correct output: -6.035421      | Program output: -3.035421     
Correct output: -64.6496412859 | Program output: -17.6496412859
Correct output: -8.4475981317  | Program output: -96.4475981317
Correct output: -61.9056292771 | Program output: -85.9056292771
Correct output: -100.2670640218 | Program output: -16.2670640218
Correct output: 33.5793532538  | Program output: 27.0163813775 
Correct output: -71.5665679812 | Program output: -37.5665679812
Correct output: -150.2787840572 | Program output: -155.5898206922
Correct output: -33.4710147358 | Program output: -39.4710147358
Correct output: 12.2165113619  | Program output: 31.838709361  
Correct output: 16.3988550752  | Program output: 22.3988550752 
Correct output: -103.483665155 | Program output: -80.483665155 
Correct output: -16.1113007238 | Program output: -70.1113007238
Correct output: 1.5190821923   | Program output: -24.4809178077
Correct output: 56.222608134   | Program output: 29.222608134  
Correct output: -100.5567747653 | Program output: -72.5567747653
Correct output: 20.8692780643  | Program output: 24.8182817322 
Correct output: 137.7657204956 | Program output: 23.4910749708 
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_rot} {:instruction integer_pop} {:instruction integer_div} {:instruction integer_mod} {:instruction float_dec} {:instruction integer_inc} {:instruction integer_sub} {:instruction float_add} {:instruction integer_flush} {:instruction in1} {:instruction integer_mod} {:instruction float_dec} {:instruction integer_inc} {:instruction integer_sub} {:instruction float_add} {:instruction integer_flush} {:instruction integer_swap} {:instruction float_swap} {:instruction float_min} {:instruction float_tan} {:instruction integer_dup} {:instruction in1} {:instruction float_min} {:instruction float_mult} {:instruction 23.58962050531167} {:instruction integer_min} {:instruction integer_mod} {:instruction float_add} {:instruction integer_min} {:instruction integer_pop} {:instruction float_swap} {:instruction float_min} {:instruction float_tan} {:instruction integer_dup} {:instruction integer_dec} {:instruction float_min} {:instruction float_mult} {:instruction 25.483167151686477} {:instruction float_stackdepth} {:instruction integer_mod} {:instruction float_add} {:instruction float_min} {:instruction tagged_372} {:instruction integer_inc} {:instruction float_min} {:instruction integer_min} {:instruction integer_dup} {:instruction in1} {:instruction float_min} {:instruction -5} {:instruction integer_rot} {:instruction float_min} {:instruction print_float} {:instruction integer_rot} {:instruction integer_shove} {:instruction float_tan} {:instruction integer_rot} {:instruction float_min} {:instruction print_float} {:instruction integer_rot})
Best program: (integer_rot integer_pop integer_div integer_mod float_dec integer_inc integer_sub float_add integer_flush in1 integer_mod float_dec integer_inc integer_sub float_add integer_flush integer_swap float_swap float_min float_tan integer_dup in1 float_min float_mult 23.58962050531167 integer_min integer_mod float_add integer_min integer_pop float_swap float_min float_tan integer_dup integer_dec float_min float_mult 25.483167151686477 float_stackdepth integer_mod float_add float_min tagged_372 integer_inc float_min integer_min integer_dup in1 float_min -5 integer_rot float_min print_float integer_rot integer_shove float_tan integer_rot float_min print_float integer_rot)
Errors: [44.0 2 19.0 12 10.1403 9 14.0 12 39.0 2 83.0 13 66.4988 8 3.0 1 47.0 2 88.0 2 24.0 2 84.0 2 6.563 11 34.0 2 5.311 8 6.0 1 19.6222 9 6.0 2 23.0 2 54.0 2 26.0 13 27.0 2 28.0 3 3.949 9 114.2746 11]
Total: 1017.3589000000001
Mean: 20.347178
Genome size: 60
Size: 61
Percent parens: 0.016
--- Population Statistics ---
Average total errors in population: 2109.0209608000023
Median total errors in population: 1021.3675999999999
Error averages by case: (86.73450729999999 2.77 61.138089300000004 12.062 53.30832960000035 9.824 54.76833530000001 11.977 82.81366300000002 2.723 123.31232819999997 13.019 106.44637939999957 10.352 46.51384410000001 1.832 89.24013000000001 2.779 128.29442049999997 2.703 67.8107476 2.708 124.70594250000002 2.922 49.23977870000031 8.678 79.21333900000002 2.737 63.289110200000025 9.141 52.1065198 1.799 60.88602779999959 9.937 47.6466601 3.049 68.04149770000001 2.749 95.95147539999998 2.746 68.47668060000001 12.968 68.849949 3.78 73.47208989999999 3.798 48.661222900000226 9.552 150.54589290000084 10.949)
Error minima by case: (16.9868 2 4.4747 8 2.6344 2 3.6002 6 27.5256 2 19.7794 8 4.3833 8 0.3911 1 14.1757 2 7.7615 2 0.0131 2 40.2432 2 2.2509 2 21.9082 2 2.781 3 6.0 1 2.5098 2 0.1674 2 22.0 2 6.6075 2 0.0131 7 0.0132 2 19.0821 3 0.0078 2 93.0 2)
Average genome size in population (length): 55.531
Average program size in population (points): 56.531
Average percent parens in population: 0.018
Minimum age in population: 57.3340154846228
Maximum age in population: 61.94783022916545
Average age in population: 59.89157101435221
Median age in population: 59.93034512134182
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 79
Genome diversity (% unique Plush genomes):	 0.69
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 79
Syntactic diversity (% unique Push programs):	 0.69
Total error diversity:				 0.199
Error (vector) diversity:			 0.207
Behavioral diversity:				 0.207
--- Run Statistics ---
Number of program evaluations used so far: 42000
Number of point (instruction) evaluations so far: 40036939
--- Timings ---
Current time: 1529615113698 milliseconds
Total Time:         130.4 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        50.8 seconds, 39.0%
Fitness Testing:     64.0 seconds, 49.1%
Report:              15.4 seconds, 11.9%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 41
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 42
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 42
;;******************************
;; -*- Number IO problem report - generation 42
Test total error for best: 63932.688200000026
Test mean error for best: 31.96634
;;------------------------------
Outputs of best individual on training cases:
Correct output: -54.078495011  | Program output: -98.078495011 
Correct output: 13.1534720339  | Program output: -5.8465279661 
Correct output: 41.2049141439  | Program output: 27.210273304  
Correct output: -6.0487858971  | Program output: 7.9512141029  
Correct output: -75.9491370053 | Program output: -36.9491370053
Correct output: 49.8479113478  | Program output: -33.1520886522
Correct output: -43.0947106158 | Program output: 22.7808803142 
Correct output: -6.035421      | Program output: -3.035421     
Correct output: -64.6496412859 | Program output: -17.6496412859
Correct output: -8.4475981317  | Program output: -96.4475981317
Correct output: -61.9056292771 | Program output: -85.9056292771
Correct output: -100.2670640218 | Program output: -16.2670640218
Correct output: 33.5793532538  | Program output: 23.2622134912 
Correct output: -71.5665679812 | Program output: -37.5665679812
Correct output: -150.2787840572 | Program output: -155.5982655339
Correct output: -33.4710147358 | Program output: -39.4710147358
Correct output: 12.2165113619  | Program output: 24.395210537  
Correct output: 16.3988550752  | Program output: 22.3988550752 
Correct output: -103.483665155 | Program output: -80.483665155 
Correct output: -16.1113007238 | Program output: -70.1113007238
Correct output: 1.5190821923   | Program output: -24.4809178077
Correct output: 56.222608134   | Program output: 23.3943028323 
Correct output: -100.5567747653 | Program output: -72.5567747653
Correct output: 20.8692780643  | Program output: 24.4458782077 
Correct output: 137.7657204956 | Program output: 43.7657204956 
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_rot} {:instruction integer_pop} {:instruction in1} {:instruction integer_mod} {:instruction float_dec} {:instruction integer_inc} {:instruction integer_sub} {:instruction float_min} {:instruction float_tan} {:instruction integer_dup} {:instruction in1} {:instruction float_min} {:instruction float_mult} {:instruction 23.58962050531167} {:instruction integer_min} {:instruction float_mult} {:instruction integer_swap} {:instruction float_swap} {:instruction float_min} {:instruction float_tan} {:instruction integer_dup} {:instruction float_tan} {:instruction integer_dup} {:instruction in1} {:instruction float_min} {:instruction float_mult} {:instruction 23.58962050531167} {:instruction integer_min} {:instruction integer_mod} {:instruction float_add} {:instruction integer_min} {:instruction integer_pop} {:instruction float_swap} {:instruction float_min} {:instruction float_tan} {:instruction integer_dup} {:instruction in1} {:instruction float_min} {:instruction float_mult} {:instruction 23.47472230998136} {:instruction float_stackdepth} {:instruction integer_mod} {:instruction float_add} {:instruction float_min} {:instruction tagged_372} {:instruction integer_inc} {:instruction float_inc} {:instruction integer_min} {:instruction float_inc} {:instruction in1} {:instruction integer_sub} {:instruction -5} {:instruction integer_rot} {:instruction float_min} {:instruction print_float} {:instruction integer_rot} {:instruction integer_shove} {:instruction float_tan} {:instruction float_tan} {:instruction in2})
Best program: (integer_rot integer_pop in1 integer_mod float_dec integer_inc integer_sub float_min float_tan integer_dup in1 float_min float_mult 23.58962050531167 integer_min float_mult integer_swap float_swap float_min float_tan integer_dup float_tan integer_dup in1 float_min float_mult 23.58962050531167 integer_min integer_mod float_add integer_min integer_pop float_swap float_min float_tan integer_dup in1 float_min float_mult 23.47472230998136 float_stackdepth integer_mod float_add float_min tagged_372 integer_inc float_inc integer_min float_inc in1 integer_sub -5 integer_rot float_min print_float integer_rot integer_shove float_tan float_tan in2)
Errors: [44.0 2 19.0 12 13.9946 10 14.0 12 39.0 2 83.0 13 65.8756 11 3.0 1 47.0 2 88.0 2 24.0 2 84.0 2 10.3171 10 34.0 2 5.3195 10 6.0 1 12.1787 10 6.0 2 23.0 2 54.0 2 26.0 13 32.8283 10 28.0 3 3.5766 9 94.0 2]
Total: 1007.0904
Mean: 20.141808
Genome size: 60
Size: 61
Percent parens: 0.016
--- Population Statistics ---
Average total errors in population: 2018.3554945000003
Median total errors in population: 1019.8289
Error averages by case: (82.62006819999999 2.656 55.95609050000001 12.109 52.7848857000003 9.368 51.57774630000001 12.036 77.97745710000001 2.624 118.24914569999999 13.113 105.19610509999963 10.412 41.73217390000001 1.725 84.29584820000001 2.683 125.12004599999996 2.626 63.57690890000001 2.62 119.03358779999999 2.794 48.817218100000424 9.587 73.23292960000002 2.618 59.96789740000009 9.027 45.69116820000001 1.667 59.04007469999956 9.554 45.745534700000015 2.982 64.1127812 2.624 91.7580536 2.628 63.140743900000004 13.049 66.53711380000001 4.055 69.43392320000002 3.668 47.96206520000026 9.625 148.48592750000088 10.46)
Error minima by case: (15.9868 2 4.4747 8 7.4932 2 0.1631 7 0.0509 1 8.6403 8 4.8955 7 0.0354 1 14.1757 2 7.7615 2 0.4747 2 7.1637 2 3.7004 2 3.5666 2 2.781 3 5.0 1 2.7339 2 1.5999 2 22.0 2 14.5666 2 0.0131 8 0.2226 2 27.0 3 0.0445 2 52.2343 2)
Average genome size in population (length): 56.279
Average program size in population (points): 57.279
Average percent parens in population: 0.018
Minimum age in population: 58.56885915419844
Maximum age in population: 63.47536124686621
Average age in population: 61.44111684719257
Median age in population: 61.474812911963
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 47
Genome diversity (% unique Plush genomes):	 0.668
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 47
Syntactic diversity (% unique Push programs):	 0.668
Total error diversity:				 0.245
Error (vector) diversity:			 0.258
Behavioral diversity:				 0.258
--- Run Statistics ---
Number of program evaluations used so far: 43000
Number of point (instruction) evaluations so far: 41443939
--- Timings ---
Current time: 1529615117229 milliseconds
Total Time:         134.0 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        52.1 seconds, 38.9%
Fitness Testing:     65.8 seconds, 49.1%
Report:              16.0 seconds, 11.9%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 42
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 43
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 43
;;******************************
;; -*- Number IO problem report - generation 43
Test total error for best: 66956.29930000006
Test mean error for best: 33.47815
;;------------------------------
Outputs of best individual on training cases:
Correct output: -54.078495011  | Program output: -98.078495011 
Correct output: 13.1534720339  | Program output: -5.8465279661 
Correct output: 41.2049141439  | Program output: 30.776198011  
Correct output: -6.0487858971  | Program output: 7.9512141029  
Correct output: -75.9491370053 | Program output: -36.9491370053
Correct output: 49.8479113478  | Program output: -33.1520886522
Correct output: -43.0947106158 | Program output: 23.8363909108 
Correct output: -6.035421      | Program output: -3.035421     
Correct output: -64.6496412859 | Program output: -17.6496412859
Correct output: -8.4475981317  | Program output: -96.4475981317
Correct output: -61.9056292771 | Program output: -85.9056292771
Correct output: -100.2670640218 | Program output: -16.2670640218
Correct output: 33.5793532538  | Program output: 26.0293231654 
Correct output: -71.5665679812 | Program output: -37.5665679812
Correct output: -150.2787840572 | Program output: -155.5982655339
Correct output: -33.4710147358 | Program output: -39.4710147358
Correct output: 12.2165113619  | Program output: 31.57142191   
Correct output: 16.3988550752  | Program output: 22.3988550752 
Correct output: -103.483665155 | Program output: -80.483665155 
Correct output: -16.1113007238 | Program output: -70.1113007238
Correct output: 1.5190821923   | Program output: -24.4809178077
Correct output: 56.222608134   | Program output: 29.222608134  
Correct output: -100.5567747653 | Program output: -72.5567747653
Correct output: 20.8692780643  | Program output: 20.809433558  
Correct output: 137.7657204956 | Program output: 23.9509029002 
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_rot} {:instruction integer_pop} {:instruction in1} {:instruction integer_mod} {:instruction float_dec} {:instruction integer_inc} {:instruction float_tan} {:instruction float_min} {:instruction float_tan} {:instruction integer_dup} {:instruction in1} {:instruction float_min} {:instruction float_mult} {:instruction 23.58962050531167} {:instruction integer_dup_times} {:instruction integer_mod} {:instruction integer_swap} {:instruction float_swap} {:instruction float_min} {:instruction float_tan} {:instruction integer_dup} {:instruction float_tan} {:instruction integer_dup} {:instruction in1} {:instruction float_min} {:instruction float_mult} {:instruction 23.58962050531167} {:instruction integer_min} {:instruction integer_mod} {:instruction float_add} {:instruction integer_min} {:instruction integer_pop} {:instruction float_swap} {:instruction float_min} {:instruction float_tan} {:instruction integer_dup} {:instruction in1} {:instruction float_min} {:instruction float_mult} {:instruction 23.47472230998136} {:instruction float_stackdepth} {:instruction integer_mod} {:instruction float_add} {:instruction float_min} {:instruction tagged_372} {:instruction integer_inc} {:instruction float_inc} {:instruction integer_min} {:instruction float_inc} {:instruction in1} {:instruction integer_sub} {:instruction -5} {:instruction integer_rot} {:instruction float_min} {:instruction print_float} {:instruction integer_rot} {:instruction integer_shove} {:instruction float_tan} {:instruction float_tan} {:instruction in2})
Best program: (integer_rot integer_pop in1 integer_mod float_dec integer_inc float_tan float_min float_tan integer_dup in1 float_min float_mult 23.58962050531167 integer_dup_times integer_mod integer_swap float_swap float_min float_tan integer_dup float_tan integer_dup in1 float_min float_mult 23.58962050531167 integer_min integer_mod float_add integer_min integer_pop float_swap float_min float_tan integer_dup in1 float_min float_mult 23.47472230998136 float_stackdepth integer_mod float_add float_min tagged_372 integer_inc float_inc integer_min float_inc in1 integer_sub -5 integer_rot float_min print_float integer_rot integer_shove float_tan float_tan in2)
Errors: [44.0 2 19.0 12 10.4287 11 14.0 12 39.0 2 83.0 13 66.9311 9 3.0 1 47.0 2 88.0 2 24.0 2 84.0 2 7.55 9 34.0 2 5.3195 10 6.0 1 19.3549 9 6.0 2 23.0 2 54.0 2 26.0 13 27.0 2 28.0 3 0.0598 8 113.8148 10]
Total: 1015.4587999999999
Mean: 20.309175
Genome size: 60
Size: 61
Percent parens: 0.016
--- Population Statistics ---
Average total errors in population: 2254.3809869999945
Median total errors in population: 1018.8551000000001
Error averages by case: (93.37843089999997 2.853 66.32673820000004 12.041 60.09393630000003 9.18 61.5593839 11.956 88.6961844 2.819 128.80575059999998 13.02 111.9242685999999 10.668 51.3185968 1.886 94.40186520000002 2.864 133.31724469999997 2.784 74.1361029 2.83 129.02667660000003 2.976 56.278108300000504 9.621 83.94633140000002 2.816 68.47187360000001 9.203 57.21942230000002 1.868 66.75315779999961 9.681 54.211904400000016 3.117 74.21748470000003 2.832 101.62716659999997 2.844 74.01243849999996 12.953 74.87857649999997 3.915 79.74318000000004 3.882 54.66163240000046 9.562 157.01353140000074 10.19)
Error minima by case: (18.0131 2 4.9869 8 3.4628 2 1.0488 7 39.0 1 24.4501 9 19.2113 7 0.6089 1 47.0 2 3.4476 2 0.0131 2 16.7685 2 0.0561 2 34.0 2 2.8073 3 4.0 1 1.2336 2 0.0165 2 23.0 2 11.1113 2 0.0131 8 1.0131 2 28.0 2 0.0598 2 87.684 2)
Average genome size in population (length): 56.332
Average program size in population (points): 57.332
Average percent parens in population: 0.018
Minimum age in population: 60.88982882635992
Maximum age in population: 65.24308131065231
Average age in population: 63.04811222864799
Median age in population: 63.09866163980121
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 43
Genome diversity (% unique Plush genomes):	 0.638
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 43
Syntactic diversity (% unique Push programs):	 0.638
Total error diversity:				 0.198
Error (vector) diversity:			 0.205
Behavioral diversity:				 0.205
--- Run Statistics ---
Number of program evaluations used so far: 44000
Number of point (instruction) evaluations so far: 42852264
--- Timings ---
Current time: 1529615120772 milliseconds
Total Time:         137.6 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        53.4 seconds, 38.8%
Fitness Testing:     67.6 seconds, 49.2%
Report:              16.4 seconds, 11.9%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 43
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 44
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 44
;;******************************
;; -*- Number IO problem report - generation 44
Test total error for best: 66956.29930000006
Test mean error for best: 33.47815
;;------------------------------
Outputs of best individual on training cases:
Correct output: -54.078495011  | Program output: -98.078495011 
Correct output: 13.1534720339  | Program output: -5.8465279661 
Correct output: 41.2049141439  | Program output: 30.776198011  
Correct output: -6.0487858971  | Program output: 7.9512141029  
Correct output: -75.9491370053 | Program output: -36.9491370053
Correct output: 49.8479113478  | Program output: -33.1520886522
Correct output: -43.0947106158 | Program output: 23.8363909108 
Correct output: -6.035421      | Program output: -3.035421     
Correct output: -64.6496412859 | Program output: -17.6496412859
Correct output: -8.4475981317  | Program output: -96.4475981317
Correct output: -61.9056292771 | Program output: -85.9056292771
Correct output: -100.2670640218 | Program output: -16.2670640218
Correct output: 33.5793532538  | Program output: 26.0293231654 
Correct output: -71.5665679812 | Program output: -37.5665679812
Correct output: -150.2787840572 | Program output: -155.5982655339
Correct output: -33.4710147358 | Program output: -39.4710147358
Correct output: 12.2165113619  | Program output: 31.57142191   
Correct output: 16.3988550752  | Program output: 22.3988550752 
Correct output: -103.483665155 | Program output: -80.483665155 
Correct output: -16.1113007238 | Program output: -70.1113007238
Correct output: 1.5190821923   | Program output: -24.4809178077
Correct output: 56.222608134   | Program output: 29.222608134  
Correct output: -100.5567747653 | Program output: -72.5567747653
Correct output: 20.8692780643  | Program output: 20.809433558  
Correct output: 137.7657204956 | Program output: 23.9509029002 
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_rot} {:instruction integer_pop} {:instruction in1} {:instruction integer_mod} {:instruction float_dec} {:instruction integer_inc} {:instruction integer_sub} {:instruction float_min} {:instruction float_tan} {:instruction float_tan} {:instruction in1} {:instruction float_min} {:instruction float_mult} {:instruction 23.58962050531167} {:instruction integer_min} {:instruction float_min} {:instruction float_tan} {:instruction integer_dup} {:instruction float_tan} {:instruction integer_dup} {:instruction in1} {:instruction float_min} {:instruction float_mult} {:instruction 23.58962050531167} {:instruction integer_min} {:instruction integer_mod} {:instruction float_add} {:instruction integer_yankdup} {:instruction integer_pop} {:instruction float_swap} {:instruction float_min} {:instruction float_tan} {:instruction integer_dup} {:instruction float_max} {:instruction float_min} {:instruction float_mult} {:instruction 23.47472230998136} {:instruction float_stackdepth} {:instruction integer_mod} {:instruction float_add} {:instruction float_min} {:instruction tagged_372} {:instruction integer_inc} {:instruction float_inc} {:instruction integer_min} {:instruction float_inc} {:instruction in1} {:instruction integer_sub} {:instruction -5} {:instruction integer_rot} {:instruction float_min} {:instruction print_float} {:instruction integer_rot} {:instruction integer_shove} {:instruction float_tan} {:instruction float_tan} {:instruction in2})
Best program: (integer_rot integer_pop in1 integer_mod float_dec integer_inc integer_sub float_min float_tan float_tan in1 float_min float_mult 23.58962050531167 integer_min float_min float_tan integer_dup float_tan integer_dup in1 float_min float_mult 23.58962050531167 integer_min integer_mod float_add integer_yankdup integer_pop float_swap float_min float_tan integer_dup float_max float_min float_mult 23.47472230998136 float_stackdepth integer_mod float_add float_min tagged_372 integer_inc float_inc integer_min float_inc in1 integer_sub -5 integer_rot float_min print_float integer_rot integer_shove float_tan float_tan in2)
Errors: [44.0 2 19.0 12 10.4287 11 14.0 12 39.0 2 83.0 13 66.9311 9 3.0 1 47.0 2 88.0 2 24.0 2 84.0 2 7.55 9 34.0 2 5.3195 10 6.0 1 19.3549 9 6.0 2 23.0 2 54.0 2 26.0 13 27.0 2 28.0 3 0.0598 8 113.8148 10]
Total: 1015.4587999999999
Mean: 20.309175
Genome size: 57
Size: 58
Percent parens: 0.017
--- Population Statistics ---
Average total errors in population: 2120.8558638000004
Median total errors in population: 1018.8551000000001
Error averages by case: (87.06641369999997 2.725 59.677700400000006 12.118 55.00449029999973 9.671 54.622989999999966 12.004 82.9908878 2.716 122.23089929999996 13.077 106.64550609999917 10.929 45.6236035 1.786 88.48697130000005 2.741 128.25893619999997 2.682 68.385459 2.698 123.3995864 2.785 50.9609482000004 9.794 78.38491529999999 2.706 66.36137719999964 8.997 50.68586580000001 1.767 63.08710839999963 10.104 48.32777539999999 2.966 69.3869352 2.717 96.09080739999999 2.729 67.1726369 13.018 69.6486065 4.129 74.50066500000001 3.757 55.19514650000035 8.722 151.11363199999988 10.208)
Error minima by case: (18.0131 2 4.4747 8 3.4678 2 1.0488 7 30.0378 2 13.2341 8 2.8764 8 0.3911 1 14.7141 2 3.4476 2 0.4747 2 6.6253 2 0.0397 2 24.4203 2 2.8073 3 6.0 1 1.7242 2 0.8166 2 23.0 2 11.1113 2 0.0131 8 1.0131 2 16.5699 3 0.0128 2 86.0135 2)
Average genome size in population (length): 59.908
Average program size in population (points): 60.908
Average percent parens in population: 0.017
Minimum age in population: 61.88982882635992
Maximum age in population: 66.383289705739
Average age in population: 64.58391441522964
Median age in population: 64.64608583356949
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 65
Genome diversity (% unique Plush genomes):	 0.682
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 65
Syntactic diversity (% unique Push programs):	 0.682
Total error diversity:				 0.223
Error (vector) diversity:			 0.228
Behavioral diversity:				 0.228
--- Run Statistics ---
Number of program evaluations used so far: 45000
Number of point (instruction) evaluations so far: 44350064
--- Timings ---
Current time: 1529615124071 milliseconds
Total Time:         140.9 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        54.6 seconds, 38.7%
Fitness Testing:     69.4 seconds, 49.2%
Report:              16.8 seconds, 11.9%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 44
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 45
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 45
;;******************************
;; -*- Number IO problem report - generation 45
Test total error for best: 63905.60359999999
Test mean error for best: 31.95280
;;------------------------------
Outputs of best individual on training cases:
Correct output: -54.078495011  | Program output: -98.078495011 
Correct output: 13.1534720339  | Program output: -5.8465279661 
Correct output: 41.2049141439  | Program output: 27.210273304  
Correct output: -6.0487858971  | Program output: 7.9512141029  
Correct output: -75.9491370053 | Program output: -36.9491370053
Correct output: 49.8479113478  | Program output: -33.1520886522
Correct output: -43.0947106158 | Program output: 22.7808803142 
Correct output: -6.035421      | Program output: -3.035421     
Correct output: -64.6496412859 | Program output: -17.6496412859
Correct output: -8.4475981317  | Program output: -96.4475981317
Correct output: -61.9056292771 | Program output: -85.9056292771
Correct output: -100.2670640218 | Program output: -16.2670640218
Correct output: 33.5793532538  | Program output: 23.2622134912 
Correct output: -71.5665679812 | Program output: -37.5665679812
Correct output: -150.2787840572 | Program output: -155.5982655339
Correct output: -33.4710147358 | Program output: -39.4710147358
Correct output: 12.2165113619  | Program output: 24.395210537  
Correct output: 16.3988550752  | Program output: 22.3988550752 
Correct output: -103.483665155 | Program output: -80.483665155 
Correct output: -16.1113007238 | Program output: -70.1113007238
Correct output: 1.5190821923   | Program output: -24.4809178077
Correct output: 56.222608134   | Program output: 23.3943028323 
Correct output: -100.5567747653 | Program output: -72.5567747653
Correct output: 20.8692780643  | Program output: 24.4458782077 
Correct output: 137.7657204956 | Program output: 43.7657204956 
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_rot} {:instruction integer_pop} {:instruction in1} {:instruction integer_mod} {:instruction float_dec} {:instruction integer_inc} {:instruction integer_sub} {:instruction float_min} {:instruction float_tan} {:instruction integer_dup} {:instruction in1} {:instruction float_min} {:instruction float_mult} {:instruction 23.58962050531167} {:instruction integer_min} {:instruction integer_mod} {:instruction integer_swap} {:instruction float_mult} {:instruction 23.58962050531167} {:instruction integer_min} {:instruction integer_mod} {:instruction integer_swap} {:instruction float_swap} {:instruction float_min} {:instruction float_tan} {:instruction integer_dup} {:instruction float_tan} {:instruction integer_dup} {:instruction in1} {:instruction float_min} {:instruction float_mult} {:instruction 23.58962050531167} {:instruction integer_min} {:instruction integer_mod} {:instruction float_add} {:instruction integer_min} {:instruction integer_pop} {:instruction float_swap} {:instruction float_min} {:instruction float_tan} {:instruction integer_dup} {:instruction in1} {:instruction float_min} {:instruction float_mult} {:instruction 23.47472230998136} {:instruction float_stackdepth} {:instruction integer_mod} {:instruction float_add} {:instruction float_min} {:instruction tagged_372} {:instruction integer_inc} {:instruction float_inc} {:instruction integer_min} {:instruction float_inc} {:instruction in1} {:instruction integer_sub} {:instruction -5} {:instruction integer_rot} {:instruction float_min} {:instruction print_float} {:instruction integer_rot} {:instruction integer_shove} {:instruction float_tan} {:instruction float_tan} {:instruction in2})
Best program: (integer_rot integer_pop in1 integer_mod float_dec integer_inc integer_sub float_min float_tan integer_dup in1 float_min float_mult 23.58962050531167 integer_min integer_mod integer_swap float_mult 23.58962050531167 integer_min integer_mod integer_swap float_swap float_min float_tan integer_dup float_tan integer_dup in1 float_min float_mult 23.58962050531167 integer_min integer_mod float_add integer_min integer_pop float_swap float_min float_tan integer_dup in1 float_min float_mult 23.47472230998136 float_stackdepth integer_mod float_add float_min tagged_372 integer_inc float_inc integer_min float_inc in1 integer_sub -5 integer_rot float_min print_float integer_rot integer_shove float_tan float_tan in2)
Errors: [44.0 2 19.0 12 13.9946 10 14.0 12 39.0 2 83.0 13 65.8756 11 3.0 1 47.0 2 88.0 2 24.0 2 84.0 2 10.3171 10 34.0 2 5.3195 10 6.0 1 12.1787 10 6.0 2 23.0 2 54.0 2 26.0 13 32.8283 10 28.0 3 3.5766 9 94.0 2]
Total: 1007.0904
Mean: 20.141808
Genome size: 65
Size: 66
Percent parens: 0.015
--- Population Statistics ---
Average total errors in population: 2559.1974499999906
Median total errors in population: 1018.0962999999999
Error averages by case: (104.19225089999996 2.962 79.2938766 12.203 73.63127610000018 10.284 75.6036383 12.066 99.24277860000004 2.942 139.35236889999993 13.178 122.40609229999905 10.916 64.49342899999998 2.056 105.20873730000004 3.023 143.52129279999994 2.901 85.7234443 2.913 140.37983730000008 3.028 71.14735840000009 9.794 94.55151810000001 2.954 81.40586669999922 9.109 68.33481829999998 2.032 78.93577710000032 10.263 66.34998159999998 3.268 84.97460470000001 2.931 113.07125549999995 2.969 84.81303019999999 13.092 87.02525789999996 4.316 91.37240200000005 4.022 74.68159190000017 8.371 167.57596519999876 10.316)
Error minima by case: (17.5253 2 4.4747 8 1.0246 2 1.0488 7 36.3326 2 13.8559 8 3.4782 8 0.3911 1 14.7141 2 5.3507 2 0.4747 2 6.6253 2 0.1692 2 29.8121 2 3.311 3 6.0 1 0.3933 2 0.0898 2 23.0 2 15.4561 2 0.1018 6 1.5253 2 28.0 3 0.0128 2 94.0 2)
Average genome size in population (length): 63.37
Average program size in population (points): 64.37
Average percent parens in population: 0.016
Minimum age in population: 63.77853397474831
Maximum age in population: 67.89263284722676
Average age in population: 65.97955593934569
Median age in population: 65.99945357334425
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 55
Genome diversity (% unique Plush genomes):	 0.739
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 55
Syntactic diversity (% unique Push programs):	 0.739
Total error diversity:				 0.223
Error (vector) diversity:			 0.228
Behavioral diversity:				 0.228
--- Run Statistics ---
Number of program evaluations used so far: 46000
Number of point (instruction) evaluations so far: 45934339
--- Timings ---
Current time: 1529615127954 milliseconds
Total Time:         144.6 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        55.9 seconds, 38.7%
Fitness Testing:     71.3 seconds, 49.3%
Report:              17.2 seconds, 11.9%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 45
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 46
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 46
;;******************************
;; -*- Number IO problem report - generation 46
Test total error for best: 63905.60359999999
Test mean error for best: 31.95280
;;------------------------------
Outputs of best individual on training cases:
Correct output: -54.078495011  | Program output: -98.078495011 
Correct output: 13.1534720339  | Program output: -5.8465279661 
Correct output: 41.2049141439  | Program output: 27.210273304  
Correct output: -6.0487858971  | Program output: 7.9512141029  
Correct output: -75.9491370053 | Program output: -36.9491370053
Correct output: 49.8479113478  | Program output: -33.1520886522
Correct output: -43.0947106158 | Program output: 22.7808803142 
Correct output: -6.035421      | Program output: -3.035421     
Correct output: -64.6496412859 | Program output: -17.6496412859
Correct output: -8.4475981317  | Program output: -96.4475981317
Correct output: -61.9056292771 | Program output: -85.9056292771
Correct output: -100.2670640218 | Program output: -16.2670640218
Correct output: 33.5793532538  | Program output: 23.2622134912 
Correct output: -71.5665679812 | Program output: -37.5665679812
Correct output: -150.2787840572 | Program output: -155.5982655339
Correct output: -33.4710147358 | Program output: -39.4710147358
Correct output: 12.2165113619  | Program output: 24.395210537  
Correct output: 16.3988550752  | Program output: 22.3988550752 
Correct output: -103.483665155 | Program output: -80.483665155 
Correct output: -16.1113007238 | Program output: -70.1113007238
Correct output: 1.5190821923   | Program output: -24.4809178077
Correct output: 56.222608134   | Program output: 23.3943028323 
Correct output: -100.5567747653 | Program output: -72.5567747653
Correct output: 20.8692780643  | Program output: 24.4458782077 
Correct output: 137.7657204956 | Program output: 43.7657204956 
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_rot} {:instruction integer_pop} {:instruction in1} {:instruction integer_mod} {:instruction float_dec} {:instruction integer_inc} {:instruction integer_sub} {:instruction float_min} {:instruction float_tan} {:instruction integer_dup} {:instruction in1} {:instruction float_min} {:instruction float_mult} {:instruction 23.58962050531167} {:instruction float_mult} {:instruction 23.58962050531167} {:instruction integer_min} {:instruction integer_mod} {:instruction integer_swap} {:instruction float_swap} {:instruction float_min} {:instruction float_tan} {:instruction integer_dup} {:instruction float_tan} {:instruction integer_dup} {:instruction in1} {:instruction float_min} {:instruction float_mult} {:instruction 23.58962050531167} {:instruction integer_min} {:instruction integer_mod} {:instruction float_add} {:instruction integer_dup} {:instruction integer_pop} {:instruction float_swap} {:instruction float_min} {:instruction float_tan} {:instruction integer_dup} {:instruction in1} {:instruction float_min} {:instruction float_mult} {:instruction 23.47472230998136} {:instruction float_stackdepth} {:instruction integer_min} {:instruction float_add} {:instruction float_min} {:instruction tagged_372} {:instruction integer_inc} {:instruction float_inc} {:instruction integer_min} {:instruction float_inc} {:instruction in1} {:instruction integer_sub} {:instruction -5} {:instruction integer_rot} {:instruction float_min} {:instruction print_float} {:instruction integer_rot} {:instruction integer_shove} {:instruction float_tan} {:instruction float_tan} {:instruction in2} {:instruction integer_sub} {:instruction float_add})
Best program: (integer_rot integer_pop in1 integer_mod float_dec integer_inc integer_sub float_min float_tan integer_dup in1 float_min float_mult 23.58962050531167 float_mult 23.58962050531167 integer_min integer_mod integer_swap float_swap float_min float_tan integer_dup float_tan integer_dup in1 float_min float_mult 23.58962050531167 integer_min integer_mod float_add integer_dup integer_pop float_swap float_min float_tan integer_dup in1 float_min float_mult 23.47472230998136 float_stackdepth integer_min float_add float_min tagged_372 integer_inc float_inc integer_min float_inc in1 integer_sub -5 integer_rot float_min print_float integer_rot integer_shove float_tan float_tan in2 integer_sub float_add)
Errors: [44.0 2 19.0 12 13.9946 10 14.0 12 39.0 2 83.0 13 65.8756 11 3.0 1 47.0 2 88.0 2 24.0 2 84.0 2 10.3171 10 34.0 2 5.3195 10 6.0 1 12.1787 10 6.0 2 23.0 2 54.0 2 26.0 13 32.8283 10 28.0 3 3.5766 9 94.0 2]
Total: 1007.0904
Mean: 20.141808
Genome size: 64
Size: 65
Percent parens: 0.015
--- Population Statistics ---
Average total errors in population: 2224.635751800002
Median total errors in population: 1017.5642
Error averages by case: (93.43717129999996 2.879 64.3328817 12.231 57.74523709999955 10.526 61.82204410000001 12.085 87.06299090000002 2.858 127.12142709999996 13.221 109.67415720000022 10.346 49.40586939999998 2.068 92.54693430000002 2.881 133.13945819999998 2.849 74.36475730000001 2.861 127.80595070000005 2.895 54.150677200000295 9.544 82.39082550000003 2.902 69.17942099999948 9.211 55.92820629999998 1.931 63.97924599999939 9.787 51.330528699999974 3.08 73.59582810000003 2.868 101.56942079999996 2.921 72.18071099999999 13.147 72.53847279999997 4.283 79.42880010000003 3.904 55.32993200000028 8.65 154.39180299999785 10.255)
Error minima by case: (18.5253 2 0.6282 7 2.7919 2 2.9703 6 27.5256 2 24.5118 8 8.277 8 0.3911 1 14.7141 2 5.3507 2 0.4747 2 6.6253 2 0.8487 2 15.0512 2 2.9299 3 4.0 1 0.4808 2 0.0898 2 23.0 2 11.5632 2 0.1018 6 1.5253 2 1.8097 2 0.0128 2 68.5253 2)
Average genome size in population (length): 67.08
Average program size in population (points): 68.08
Average percent parens in population: 0.015
Minimum age in population: 65.01349490564144
Maximum age in population: 69.17196297535696
Average age in population: 67.34888214407356
Median age in population: 67.40141307870715
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 97
Genome diversity (% unique Plush genomes):	 0.749
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 97
Syntactic diversity (% unique Push programs):	 0.749
Total error diversity:				 0.247
Error (vector) diversity:			 0.256
Behavioral diversity:				 0.257
--- Run Statistics ---
Number of program evaluations used so far: 47000
Number of point (instruction) evaluations so far: 47611389
--- Timings ---
Current time: 1529615131380 milliseconds
Total Time:         148.1 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        57.0 seconds, 38.5%
Fitness Testing:     73.2 seconds, 49.4%
Report:              17.8 seconds, 12.0%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 46
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 47
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 47
;;******************************
;; -*- Number IO problem report - generation 47
Test total error for best: 63905.60359999999
Test mean error for best: 31.95280
;;------------------------------
Outputs of best individual on training cases:
Correct output: -54.078495011  | Program output: -98.078495011 
Correct output: 13.1534720339  | Program output: -5.8465279661 
Correct output: 41.2049141439  | Program output: 27.210273304  
Correct output: -6.0487858971  | Program output: 7.9512141029  
Correct output: -75.9491370053 | Program output: -36.9491370053
Correct output: 49.8479113478  | Program output: -33.1520886522
Correct output: -43.0947106158 | Program output: 22.7808803142 
Correct output: -6.035421      | Program output: -3.035421     
Correct output: -64.6496412859 | Program output: -17.6496412859
Correct output: -8.4475981317  | Program output: -96.4475981317
Correct output: -61.9056292771 | Program output: -85.9056292771
Correct output: -100.2670640218 | Program output: -16.2670640218
Correct output: 33.5793532538  | Program output: 23.2622134912 
Correct output: -71.5665679812 | Program output: -37.5665679812
Correct output: -150.2787840572 | Program output: -155.5982655339
Correct output: -33.4710147358 | Program output: -39.4710147358
Correct output: 12.2165113619  | Program output: 24.395210537  
Correct output: 16.3988550752  | Program output: 22.3988550752 
Correct output: -103.483665155 | Program output: -80.483665155 
Correct output: -16.1113007238 | Program output: -70.1113007238
Correct output: 1.5190821923   | Program output: -24.4809178077
Correct output: 56.222608134   | Program output: 23.3943028323 
Correct output: -100.5567747653 | Program output: -72.5567747653
Correct output: 20.8692780643  | Program output: 24.4458782077 
Correct output: 137.7657204956 | Program output: 43.7657204956 
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_rot} {:instruction integer_pop} {:instruction in1} {:instruction integer_mod} {:instruction float_dec} {:instruction integer_inc} {:instruction integer_sub} {:instruction float_min} {:instruction float_tan} {:instruction integer_dup} {:instruction in1} {:instruction float_min} {:instruction float_mult} {:instruction 23.58962050531167} {:instruction float_mult} {:instruction 23.58962050531167} {:instruction integer_min} {:instruction integer_mod} {:instruction integer_swap} {:instruction float_swap} {:instruction float_min} {:instruction float_tan} {:instruction integer_dup} {:instruction float_tan} {:instruction integer_dup} {:instruction in1} {:instruction float_min} {:instruction float_mult} {:instruction 23.58962050531167} {:instruction integer_min} {:instruction integer_mod} {:instruction float_add} {:instruction integer_dup} {:instruction integer_pop} {:instruction float_swap} {:instruction float_min} {:instruction float_tan} {:instruction integer_dup} {:instruction in1} {:instruction float_min} {:instruction float_mult} {:instruction 23.47472230998136} {:instruction float_stackdepth} {:instruction integer_min} {:instruction float_add} {:instruction float_min} {:instruction tagged_372} {:instruction integer_inc} {:instruction float_inc} {:instruction integer_min} {:instruction float_inc} {:instruction in1} {:instruction integer_sub} {:instruction -5} {:instruction integer_rot} {:instruction float_min} {:instruction print_float} {:instruction integer_rot} {:instruction integer_shove} {:instruction float_tan} {:instruction float_tan} {:instruction in2} {:instruction integer_sub} {:instruction float_add})
Best program: (integer_rot integer_pop in1 integer_mod float_dec integer_inc integer_sub float_min float_tan integer_dup in1 float_min float_mult 23.58962050531167 float_mult 23.58962050531167 integer_min integer_mod integer_swap float_swap float_min float_tan integer_dup float_tan integer_dup in1 float_min float_mult 23.58962050531167 integer_min integer_mod float_add integer_dup integer_pop float_swap float_min float_tan integer_dup in1 float_min float_mult 23.47472230998136 float_stackdepth integer_min float_add float_min tagged_372 integer_inc float_inc integer_min float_inc in1 integer_sub -5 integer_rot float_min print_float integer_rot integer_shove float_tan float_tan in2 integer_sub float_add)
Errors: [44.0 2 19.0 12 13.9946 10 14.0 12 39.0 2 83.0 13 65.8756 11 3.0 1 47.0 2 88.0 2 24.0 2 84.0 2 10.3171 10 34.0 2 5.3195 10 6.0 1 12.1787 10 6.0 2 23.0 2 54.0 2 26.0 13 32.8283 10 28.0 3 3.5766 9 94.0 2]
Total: 1007.0904
Mean: 20.141808
Genome size: 64
Size: 65
Percent parens: 0.015
--- Population Statistics ---
Average total errors in population: 2323.001565500006
Median total errors in population: 1015.4587999999999
Error averages by case: (96.79573969999997 2.951 70.20176470000003 12.27 60.94369779999939 10.586 61.36169229999997 12.116 91.9183961 2.882 132.09664189999998 13.209 112.63032080000065 10.159 55.71488949999999 1.992 97.9571263 2.886 137.3712931 2.86 79.00756539999999 2.865 132.6757186 2.892 57.455226000000444 9.388 87.25242420000002 2.902 74.20699449999931 9.176 61.083361899999986 1.956 67.2051670999995 9.483 54.5352392 3.212 78.2110325 2.889 105.66371149999998 2.935 77.71303770000002 13.147 75.42572669999997 4.626 83.85152619999998 3.976 56.08197450000053 8.799 155.73129729999775 9.753)
Error minima by case: (3.9494 2 0.6282 9 6.5271 2 3.3598 7 0.733 2 24.5118 8 8.277 7 0.3873 1 1.1422 2 7.7615 2 0.4747 2 25.0509 2 0.2848 2 3.6496 2 2.3195 3 6.0 1 2.8889 2 0.0898 2 23.0 2 6.0506 2 0.5253 8 1.5253 2 15.0821 3 0.0128 2 24.7596 2)
Average genome size in population (length): 68.109
Average program size in population (points): 69.109
Average percent parens in population: 0.015
Minimum age in population: 66.01349490564144
Maximum age in population: 70.62790222288555
Average age in population: 68.72263959319515
Median age in population: 68.75856727733922
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 78
Genome diversity (% unique Plush genomes):	 0.717
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 78
Syntactic diversity (% unique Push programs):	 0.717
Total error diversity:				 0.241
Error (vector) diversity:			 0.25
Behavioral diversity:				 0.25
--- Run Statistics ---
Number of program evaluations used so far: 48000
Number of point (instruction) evaluations so far: 49314239
--- Timings ---
Current time: 1529615135087 milliseconds
Total Time:         151.8 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        58.2 seconds, 38.3%
Fitness Testing:     75.2 seconds, 49.6%
Report:              18.2 seconds, 12.0%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 47
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 48
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 48
;;******************************
;; -*- Number IO problem report - generation 48
Test total error for best: 63289.0272
Test mean error for best: 31.64451
;;------------------------------
Outputs of best individual on training cases:
Correct output: -54.078495011  | Program output: -98.078495011 
Correct output: 13.1534720339  | Program output: -5.8465279661 
Correct output: 41.2049141439  | Program output: 30.210273304  
Correct output: -6.0487858971  | Program output: 7.9512141029  
Correct output: -75.9491370053 | Program output: -36.9491370053
Correct output: 49.8479113478  | Program output: -33.1520886522
Correct output: -43.0947106158 | Program output: 25.7808803142 
Correct output: -6.035421      | Program output: -3.035421     
Correct output: -64.6496412859 | Program output: -17.6496412859
Correct output: -8.4475981317  | Program output: -96.4475981317
Correct output: -61.9056292771 | Program output: -85.9056292771
Correct output: -100.2670640218 | Program output: -16.2670640218
Correct output: 33.5793532538  | Program output: 26.2622134912 
Correct output: -71.5665679812 | Program output: -37.5665679812
Correct output: -150.2787840572 | Program output: -152.5982655339
Correct output: -33.4710147358 | Program output: -39.4710147358
Correct output: 12.2165113619  | Program output: 27.395210537  
Correct output: 16.3988550752  | Program output: 22.3988550752 
Correct output: -103.483665155 | Program output: -80.483665155 
Correct output: -16.1113007238 | Program output: -70.1113007238
Correct output: 1.5190821923   | Program output: -24.4809178077
Correct output: 56.222608134   | Program output: 26.3943028323 
Correct output: -100.5567747653 | Program output: -72.5567747653
Correct output: 20.8692780643  | Program output: 27.4458782077 
Correct output: 137.7657204956 | Program output: 43.7657204956 
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_rot} {:instruction integer_pop} {:instruction in1} {:instruction integer_mod} {:instruction float_dec} {:instruction integer_inc} {:instruction integer_sub} {:instruction float_min} {:instruction float_tan} {:instruction integer_dup} {:instruction in1} {:instruction float_min} {:instruction float_mult} {:instruction 23.58962050531167} {:instruction float_mult} {:instruction 23.58962050531167} {:instruction integer_min} {:instruction integer_mod} {:instruction integer_swap} {:instruction float_swap} {:instruction float_min} {:instruction float_tan} {:instruction integer_dup} {:instruction float_tan} {:instruction integer_dup} {:instruction in1} {:instruction float_min} {:instruction float_mult} {:instruction 23.58962050531167} {:instruction integer_min} {:instruction integer_mod} {:instruction float_add} {:instruction integer_dup} {:instruction integer_pop} {:instruction float_swap} {:instruction float_min} {:instruction float_tan} {:instruction integer_dup} {:instruction in1} {:instruction float_min} {:instruction float_mult} {:instruction 23.47472230998136} {:instruction float_stackdepth} {:instruction integer_min} {:instruction float_add} {:instruction float_min} {:instruction tagged_372} {:instruction integer_inc} {:instruction float_inc} {:instruction integer_min} {:instruction float_inc} {:instruction float_stackdepth} {:instruction integer_mod} {:instruction float_add} {:instruction float_min} {:instruction tagged_372} {:instruction integer_inc} {:instruction float_inc} {:instruction integer_add} {:instruction float_inc} {:instruction float_inc} {:instruction in1} {:instruction integer_sub} {:instruction -5} {:instruction integer_rot} {:instruction float_min} {:instruction print_float} {:instruction integer_rot} {:instruction integer_shove} {:instruction float_tan} {:instruction float_tan} {:instruction in2} {:instruction integer_sub} {:instruction float_add})
Best program: (integer_rot integer_pop in1 integer_mod float_dec integer_inc integer_sub float_min float_tan integer_dup in1 float_min float_mult 23.58962050531167 float_mult 23.58962050531167 integer_min integer_mod integer_swap float_swap float_min float_tan integer_dup float_tan integer_dup in1 float_min float_mult 23.58962050531167 integer_min integer_mod float_add integer_dup integer_pop float_swap float_min float_tan integer_dup in1 float_min float_mult 23.47472230998136 float_stackdepth integer_min float_add float_min tagged_372 integer_inc float_inc integer_min float_inc float_stackdepth integer_mod float_add float_min tagged_372 integer_inc float_inc integer_add float_inc float_inc in1 integer_sub -5 integer_rot float_min print_float integer_rot integer_shove float_tan float_tan in2 integer_sub float_add)
Errors: [44.0 2 19.0 12 10.9946 10 14.0 12 39.0 2 83.0 13 68.8756 11 3.0 1 47.0 2 88.0 2 24.0 2 84.0 2 7.3171 11 34.0 2 2.3195 10 6.0 1 15.1787 10 6.0 2 23.0 2 54.0 2 26.0 13 29.8283 9 28.0 3 6.5766 9 94.0 2]
Total: 1004.0904
Mean: 20.081808
Genome size: 74
Size: 75
Percent parens: 0.013
--- Population Statistics ---
Average total errors in population: 2136.9249934000027
Median total errors in population: 1015.4587999999999
Error averages by case: (89.71820609999995 2.862 59.90401519999999 12.126 54.28507839999963 10.319 55.937129500000005 12.044 84.83169319999999 2.855 125.19763679999994 13.087 105.74461020000015 10.448 45.03300729999998 1.949 88.50893690000004 2.897 130.5614712999999 2.829 71.60925129999998 2.828 123.29490740000004 2.874 50.47262790000037 9.683 80.35802880000001 2.847 68.94322129999952 8.951 54.42839559999998 1.933 58.99035129999931 9.667 46.94849009999996 3.131 71.84143779999998 2.88 98.54698519999995 2.883 68.32368060000002 13.011 69.88871830000006 6.161 76.5383119 3.904 50.72853420000044 9.016 146.8112667999987 8.294)
Error minima by case: (17.5253 2 4.4747 8 3.1674 2 2.9701 8 4.0509 1 19.7794 8 5.3322 8 0.0896 1 4.9792 2 5.3507 2 0.4104 2 6.6253 2 0.1738 2 1.5666 2 2.3195 3 5.0 1 0.1047 2 1.0073 2 23.0 2 6.6075 2 0.0173 6 0.5253 2 1.8097 3 0.0043 2 67.5253 2)
Average genome size in population (length): 67.26
Average program size in population (points): 68.26
Average percent parens in population: 0.015
Minimum age in population: 67.8191647792919
Maximum age in population: 72.10152037100885
Average age in population: 70.15959314891319
Median age in population: 70.20277049839727
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 51
Genome diversity (% unique Plush genomes):	 0.745
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 51
Syntactic diversity (% unique Push programs):	 0.745
Total error diversity:				 0.269
Error (vector) diversity:			 0.273
Behavioral diversity:				 0.273
--- Run Statistics ---
Number of program evaluations used so far: 49000
Number of point (instruction) evaluations so far: 50996089
--- Timings ---
Current time: 1529615138724 milliseconds
Total Time:         155.5 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        59.4 seconds, 38.2%
Fitness Testing:     77.2 seconds, 49.7%
Report:              18.7 seconds, 12.0%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 48
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 49
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 49
;;******************************
;; -*- Number IO problem report - generation 49
Test total error for best: 63121.9586
Test mean error for best: 31.56098
;;------------------------------
Outputs of best individual on training cases:
Correct output: -54.078495011  | Program output: -98.078495011 
Correct output: 13.1534720339  | Program output: -5.8465279661 
Correct output: 41.2049141439  | Program output: 31.210273304  
Correct output: -6.0487858971  | Program output: 7.9512141029  
Correct output: -75.9491370053 | Program output: -36.9491370053
Correct output: 49.8479113478  | Program output: -33.1520886522
Correct output: -43.0947106158 | Program output: 26.7808803142 
Correct output: -6.035421      | Program output: -3.035421     
Correct output: -64.6496412859 | Program output: -17.6496412859
Correct output: -8.4475981317  | Program output: -96.4475981317
Correct output: -61.9056292771 | Program output: -85.9056292771
Correct output: -100.2670640218 | Program output: -16.2670640218
Correct output: 33.5793532538  | Program output: 27.2622134912 
Correct output: -71.5665679812 | Program output: -37.5665679812
Correct output: -150.2787840572 | Program output: -151.5982655339
Correct output: -33.4710147358 | Program output: -39.4710147358
Correct output: 12.2165113619  | Program output: 28.395210537  
Correct output: 16.3988550752  | Program output: 22.3988550752 
Correct output: -103.483665155 | Program output: -80.483665155 
Correct output: -16.1113007238 | Program output: -70.1113007238
Correct output: 1.5190821923   | Program output: -24.4809178077
Correct output: 56.222608134   | Program output: 27.3943028323 
Correct output: -100.5567747653 | Program output: -72.5567747653
Correct output: 20.8692780643  | Program output: 28.4458782077 
Correct output: 137.7657204956 | Program output: 43.7657204956 
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_rot} {:instruction integer_pop} {:instruction in1} {:instruction integer_mod} {:instruction float_dec} {:instruction integer_inc} {:instruction integer_sub} {:instruction float_min} {:instruction float_tan} {:instruction integer_dup} {:instruction in1} {:instruction float_min} {:instruction float_mult} {:instruction 23.58962050531167} {:instruction float_mult} {:instruction 23.58962050531167} {:instruction integer_min} {:instruction integer_mod} {:instruction integer_swap} {:instruction float_swap} {:instruction float_min} {:instruction float_tan} {:instruction integer_dup} {:instruction float_tan} {:instruction integer_dup} {:instruction in1} {:instruction float_min} {:instruction float_mult} {:instruction 23.58962050531167} {:instruction integer_min} {:instruction integer_mod} {:instruction float_add} {:instruction integer_dup} {:instruction integer_pop} {:instruction float_swap} {:instruction float_min} {:instruction float_tan} {:instruction integer_dup} {:instruction in1} {:instruction float_min} {:instruction float_mult} {:instruction 23.47472230998136} {:instruction float_stackdepth} {:instruction integer_min} {:instruction float_add} {:instruction float_min} {:instruction tagged_372} {:instruction integer_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_stackdepth} {:instruction integer_mod} {:instruction float_add} {:instruction float_min} {:instruction tagged_372} {:instruction integer_inc} {:instruction float_inc} {:instruction integer_add} {:instruction float_inc} {:instruction float_inc} {:instruction in1} {:instruction integer_sub} {:instruction -5} {:instruction integer_rot} {:instruction float_min} {:instruction print_float} {:instruction integer_rot} {:instruction integer_shove} {:instruction float_tan} {:instruction float_tan} {:instruction in2} {:instruction integer_sub} {:instruction float_add})
Best program: (integer_rot integer_pop in1 integer_mod float_dec integer_inc integer_sub float_min float_tan integer_dup in1 float_min float_mult 23.58962050531167 float_mult 23.58962050531167 integer_min integer_mod integer_swap float_swap float_min float_tan integer_dup float_tan integer_dup in1 float_min float_mult 23.58962050531167 integer_min integer_mod float_add integer_dup integer_pop float_swap float_min float_tan integer_dup in1 float_min float_mult 23.47472230998136 float_stackdepth integer_min float_add float_min tagged_372 integer_inc float_inc float_inc float_inc float_stackdepth integer_mod float_add float_min tagged_372 integer_inc float_inc integer_add float_inc float_inc in1 integer_sub -5 integer_rot float_min print_float integer_rot integer_shove float_tan float_tan in2 integer_sub float_add)
Errors: [44.0 2 19.0 12 9.9946 9 14.0 12 39.0 2 83.0 13 69.8756 11 3.0 1 47.0 2 88.0 2 24.0 2 84.0 2 6.3171 11 34.0 2 1.3195 10 6.0 1 16.1787 10 6.0 2 23.0 2 54.0 2 26.0 13 28.8283 10 28.0 3 7.5766 9 94.0 2]
Total: 1003.0904
Mean: 20.061808
Genome size: 74
Size: 75
Percent parens: 0.013
--- Population Statistics ---
Average total errors in population: 2194.779077699995
Median total errors in population: 1007.75905
Error averages by case: (90.64968499999998 2.763 62.90653519999999 12.132 61.045397199999734 10.112 59.284243599999996 12.031 85.84957549999999 2.777 125.70255229999997 13.094 108.7016684999997 10.948 48.9000087 1.997 91.13525 2.831 132.01758619999993 2.746 72.2474214 2.751 126.58459570000005 2.845 57.811299300000215 10.007 81.24157970000003 2.812 68.63634759999943 8.941 54.11966109999997 1.86 61.53373209999916 10.072 52.73396479999998 3.304 72.61031799999999 2.775 99.93172629999998 2.815 70.28143310000002 13.033 75.96692669999975 8.839 77.51392120000001 3.79 54.376624900000216 9.286 142.81402359999976 5.622)
Error minima by case: (2.9494 2 4.4747 9 0.9994 2 1.0488 8 2.3812 2 36.0506 8 5.3322 7 0.3873 1 4.309 2 3.4476 2 0.4747 2 6.6253 2 1.2562 2 2.0013 2 1.3195 2 4.0 1 0.1398 2 1.8166 2 1.1357 2 7.0506 2 0.4747 7 0.5253 2 3.7451 2 0.0128 2 47.0506 2)
Average genome size in population (length): 66.608
Average program size in population (points): 67.608
Average percent parens in population: 0.015
Minimum age in population: 69.05348900809028
Maximum age in population: 73.2918974835944
Average age in population: 71.46778549583078
Median age in population: 71.50105167271012
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 80
Genome diversity (% unique Plush genomes):	 0.712
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 80
Syntactic diversity (% unique Push programs):	 0.712
Total error diversity:				 0.254
Error (vector) diversity:			 0.258
Behavioral diversity:				 0.258
--- Run Statistics ---
Number of program evaluations used so far: 50000
Number of point (instruction) evaluations so far: 52661814
--- Timings ---
Current time: 1529615142397 milliseconds
Total Time:         159.0 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        60.5 seconds, 38.1%
Fitness Testing:     79.2 seconds, 49.8%
Report:              19.2 seconds, 12.1%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 49
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 50
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 50
;;******************************
;; -*- Number IO problem report - generation 50
Test total error for best: 62946.489599999986
Test mean error for best: 31.47324
;;------------------------------
Outputs of best individual on training cases:
Correct output: -54.078495011  | Program output: -98.078495011 
Correct output: 13.1534720339  | Program output: -5.8465279661 
Correct output: 41.2049141439  | Program output: 32.210273304  
Correct output: -6.0487858971  | Program output: 7.9512141029  
Correct output: -75.9491370053 | Program output: -36.9491370053
Correct output: 49.8479113478  | Program output: -33.1520886522
Correct output: -43.0947106158 | Program output: 27.7808803142 
Correct output: -6.035421      | Program output: -3.035421     
Correct output: -64.6496412859 | Program output: -17.6496412859
Correct output: -8.4475981317  | Program output: -96.4475981317
Correct output: -61.9056292771 | Program output: -85.9056292771
Correct output: -100.2670640218 | Program output: -16.2670640218
Correct output: 33.5793532538  | Program output: 28.2622134912 
Correct output: -71.5665679812 | Program output: -37.5665679812
Correct output: -150.2787840572 | Program output: -150.5982655339
Correct output: -33.4710147358 | Program output: -39.4710147358
Correct output: 12.2165113619  | Program output: 29.395210537  
Correct output: 16.3988550752  | Program output: 22.3988550752 
Correct output: -103.483665155 | Program output: -80.483665155 
Correct output: -16.1113007238 | Program output: -70.1113007238
Correct output: 1.5190821923   | Program output: -24.4809178077
Correct output: 56.222608134   | Program output: 28.3943028323 
Correct output: -100.5567747653 | Program output: -72.5567747653
Correct output: 20.8692780643  | Program output: 29.4458782077 
Correct output: 137.7657204956 | Program output: 43.7657204956 
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_rot} {:instruction integer_pop} {:instruction in1} {:instruction integer_mod} {:instruction float_dec} {:instruction integer_inc} {:instruction integer_sub} {:instruction float_min} {:instruction float_tan} {:instruction integer_dup} {:instruction in1} {:instruction float_min} {:instruction float_mult} {:instruction 23.58962050531167} {:instruction float_mult} {:instruction 23.58962050531167} {:instruction integer_min} {:instruction integer_mod} {:instruction integer_swap} {:instruction float_swap} {:instruction float_min} {:instruction float_tan} {:instruction integer_dup} {:instruction float_tan} {:instruction integer_dup} {:instruction in1} {:instruction float_min} {:instruction 23.58962050531167} {:instruction integer_min} {:instruction integer_mod} {:instruction float_add} {:instruction integer_dup} {:instruction integer_pop} {:instruction float_swap} {:instruction float_min} {:instruction float_tan} {:instruction integer_dup} {:instruction in1} {:instruction float_min} {:instruction float_mult} {:instruction 23.47472230998136} {:instruction float_stackdepth} {:instruction integer_min} {:instruction float_add} {:instruction float_min} {:instruction tagged_372} {:instruction integer_inc} {:instruction float_inc} {:instruction integer_min} {:instruction float_inc} {:instruction in1} {:instruction integer_sub} {:instruction float_min} {:instruction tagged_372} {:instruction integer_inc} {:instruction float_inc} {:instruction integer_min} {:instruction float_inc} {:instruction float_stackdepth} {:instruction integer_mod} {:instruction float_add} {:instruction float_min} {:instruction tagged_372} {:instruction integer_inc} {:instruction float_inc} {:instruction integer_add} {:instruction float_inc} {:instruction float_inc} {:instruction in1} {:instruction integer_sub} {:instruction -5} {:instruction integer_rot} {:instruction float_min} {:instruction print_float} {:instruction integer_rot} {:instruction integer_shove} {:instruction float_tan} {:instruction float_tan} {:instruction in2} {:instruction integer_sub} {:instruction float_add})
Best program: (integer_rot integer_pop in1 integer_mod float_dec integer_inc integer_sub float_min float_tan integer_dup in1 float_min float_mult 23.58962050531167 float_mult 23.58962050531167 integer_min integer_mod integer_swap float_swap float_min float_tan integer_dup float_tan integer_dup in1 float_min 23.58962050531167 integer_min integer_mod float_add integer_dup integer_pop float_swap float_min float_tan integer_dup in1 float_min float_mult 23.47472230998136 float_stackdepth integer_min float_add float_min tagged_372 integer_inc float_inc integer_min float_inc in1 integer_sub float_min tagged_372 integer_inc float_inc integer_min float_inc float_stackdepth integer_mod float_add float_min tagged_372 integer_inc float_inc integer_add float_inc float_inc in1 integer_sub -5 integer_rot float_min print_float integer_rot integer_shove float_tan float_tan in2 integer_sub float_add)
Errors: [44.0 2 19.0 12 8.9946 10 14.0 12 39.0 2 83.0 13 70.8756 11 3.0 1 47.0 2 88.0 2 24.0 2 84.0 2 5.3171 11 34.0 2 0.3195 9 6.0 1 17.1787 10 6.0 2 23.0 2 54.0 2 26.0 13 27.8283 10 28.0 3 8.5766 9 94.0 2]
Total: 1002.0904
Mean: 20.041807
Genome size: 81
Size: 82
Percent parens: 0.012
--- Population Statistics ---
Average total errors in population: 2607.412886699993
Median total errors in population: 1007.0904
Error averages by case: (108.11013549999997 2.956 78.98193630000002 12.231 76.36315260000019 10.146 74.73524600000003 12.137 102.61460220000005 2.962 142.9720039 13.214 124.32285279999951 11.189 63.99820909999997 2.063 106.63731160000002 3.008 148.80437899999998 2.951 89.59626250000001 2.949 140.50613700000005 3.036 72.66449650000013 10.086 97.98447740000002 2.981 87.9556685999992 8.894 72.48819660000001 2.037 76.53252549999954 10.309 68.18705359999998 3.305 89.88915770000003 2.973 117.10753489999998 2.977 88.2044483 13.126 92.57131419999918 9.536 94.45385400000002 4.011 70.64230180000027 9.424 157.35262909999992 5.236)
Error minima by case: (16.5253 2 1.0178 7 0.1683 2 2.6002 6 4.0509 2 21.3898 8 5.3322 9 0.6089 1 14.7141 2 7.5046 2 0.4747 2 6.6253 2 0.0588 2 1.5666 2 0.3195 3 4.0 1 3.4222 2 3.796 2 23.0 2 8.2179 2 0.4747 7 3.3415 2 18.6925 2 0.1062 2 60.4474 2)
Average genome size in population (length): 68.413
Average program size in population (points): 69.413
Average percent parens in population: 0.015
Minimum age in population: 70.140336581507
Maximum age in population: 74.71604596080427
Average age in population: 72.86730671278676
Median age in population: 72.92081880199163
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 55
Genome diversity (% unique Plush genomes):	 0.763
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 55
Syntactic diversity (% unique Push programs):	 0.763
Total error diversity:				 0.259
Error (vector) diversity:			 0.279
Behavioral diversity:				 0.28
--- Run Statistics ---
Number of program evaluations used so far: 51000
Number of point (instruction) evaluations so far: 54372789
--- Timings ---
Current time: 1529615145900 milliseconds
Total Time:         162.6 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        61.7 seconds, 37.9%
Fitness Testing:     81.0 seconds, 49.8%
Report:              19.7 seconds, 12.1%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 50
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 51
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 51
;;******************************
;; -*- Number IO problem report - generation 51
Test total error for best: 62863.6973
Test mean error for best: 31.43185
;;------------------------------
Outputs of best individual on training cases:
Correct output: -54.078495011  | Program output: -98.078495011 
Correct output: 13.1534720339  | Program output: -5.8465279661 
Correct output: 41.2049141439  | Program output: 32.5998314468 
Correct output: -6.0487858971  | Program output: 7.9512141029  
Correct output: -75.9491370053 | Program output: -36.9491370053
Correct output: 49.8479113478  | Program output: -33.1520886522
Correct output: -43.0947106158 | Program output: 28.170438457  
Correct output: -6.035421      | Program output: -3.035421     
Correct output: -64.6496412859 | Program output: -17.6496412859
Correct output: -8.4475981317  | Program output: -96.4475981317
Correct output: -61.9056292771 | Program output: -85.9056292771
Correct output: -100.2670640218 | Program output: -16.2670640218
Correct output: 33.5793532538  | Program output: 28.6517716339 
Correct output: -71.5665679812 | Program output: -37.5665679812
Correct output: -150.2787840572 | Program output: -150.2087073912
Correct output: -33.4710147358 | Program output: -39.4710147358
Correct output: 12.2165113619  | Program output: 29.7847686797 
Correct output: 16.3988550752  | Program output: 22.3988550752 
Correct output: -103.483665155 | Program output: -80.483665155 
Correct output: -16.1113007238 | Program output: -70.1113007238
Correct output: 1.5190821923   | Program output: -24.4809178077
Correct output: 56.222608134   | Program output: 28.7838609751 
Correct output: -100.5567747653 | Program output: -72.5567747653
Correct output: 20.8692780643  | Program output: 29.8354363504 
Correct output: 137.7657204956 | Program output: 43.7657204956 
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_rot} {:instruction integer_pop} {:instruction in1} {:instruction integer_mod} {:instruction float_dec} {:instruction integer_inc} {:instruction integer_sub} {:instruction float_min} {:instruction float_tan} {:instruction integer_dup} {:instruction in1} {:instruction float_min} {:instruction float_mult} {:instruction 23.58962050531167} {:instruction integer_min} {:instruction integer_mod} {:instruction integer_swap} {:instruction float_mult} {:instruction 23.58962050531167} {:instruction integer_min} {:instruction integer_mod} {:instruction integer_swap} {:instruction float_swap} {:instruction float_min} {:instruction float_tan} {:instruction integer_dup} {:instruction float_tan} {:instruction integer_dup} {:instruction in1} {:instruction float_min} {:instruction float_mult} {:instruction 23.58962050531167} {:instruction integer_min} {:instruction integer_mod} {:instruction float_add} {:instruction integer_min} {:instruction integer_pop} {:instruction float_swap} {:instruction float_min} {:instruction float_tan} {:instruction integer_dup} {:instruction 23.8642804527247} {:instruction float_stackdepth} {:instruction integer_mod} {:instruction float_add} {:instruction float_min} {:instruction tagged_372} {:instruction integer_inc} {:instruction float_inc} {:instruction integer_min} {:instruction tagged_372} {:instruction integer_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_stackdepth} {:instruction integer_mod} {:instruction float_add} {:instruction float_min} {:instruction tagged_372} {:instruction integer_inc} {:instruction float_inc} {:instruction integer_add} {:instruction float_inc} {:instruction float_inc} {:instruction in1} {:instruction integer_sub} {:instruction -5} {:instruction integer_rot} {:instruction float_min} {:instruction print_float} {:instruction print_float} {:instruction integer_rot} {:instruction integer_shove} {:instruction float_tan} {:instruction float_tan} {:instruction in2} {:instruction integer_sub} {:instruction in2} {:instruction float_tan} {:instruction integer_rot})
Best program: (integer_rot integer_pop in1 integer_mod float_dec integer_inc integer_sub float_min float_tan integer_dup in1 float_min float_mult 23.58962050531167 integer_min integer_mod integer_swap float_mult 23.58962050531167 integer_min integer_mod integer_swap float_swap float_min float_tan integer_dup float_tan integer_dup in1 float_min float_mult 23.58962050531167 integer_min integer_mod float_add integer_min integer_pop float_swap float_min float_tan integer_dup 23.8642804527247 float_stackdepth integer_mod float_add float_min tagged_372 integer_inc float_inc integer_min tagged_372 integer_inc float_inc float_inc float_inc float_stackdepth integer_mod float_add float_min tagged_372 integer_inc float_inc integer_add float_inc float_inc in1 integer_sub -5 integer_rot float_min print_float print_float integer_rot integer_shove float_tan float_tan in2 integer_sub in2 float_tan integer_rot)
Errors: [44.0 2 19.0 12 8.6051 10 14.0 12 39.0 2 83.0 13 71.2651 12 3.0 1 47.0 2 88.0 2 24.0 2 84.0 2 4.9276 10 34.0 2 0.0701 6 6.0 1 17.5683 11 6.0 2 23.0 2 54.0 2 26.0 13 27.4387 10 28.0 3 8.9662 10 94.0 2]
Total: 1000.8411000000001
Mean: 20.016823
Genome size: 81
Size: 82
Percent parens: 0.012
--- Population Statistics ---
Average total errors in population: 2533.288717799994
Median total errors in population: 1007.0904
Error averages by case: (102.64940399999998 3.004 77.522816 12.231 74.6044062000001 9.973 74.47581670000001 12.149 98.46663240000001 2.972 138.38046969999996 13.218 123.92416379999975 11.193 63.88906749999999 2.007 106.65189490000003 3.026 142.8919646 2.957 84.1702429 2.994 140.92068370000007 3.03 70.27285520000024 10.082 93.79463850000002 2.983 83.35232629999962 8.409 66.4706139 2.041 75.68633179999958 10.309 65.87303809999997 3.344 84.9882521 3.004 111.41620379999995 3.042 84.1816583 13.132 90.95348889999937 9.423 90.26263730000001 4.071 70.46529770000026 9.45 153.96581350000005 5.014)
Error minima by case: (14.5253 2 3.9357 9 0.5903 2 2.6002 6 0.9518 1 15.3202 8 5.3322 7 0.6089 1 11.7141 1 5.3507 2 0.1357 2 7.0148 2 0.4437 2 5.3344 2 0.0701 2 3.0 1 0.4321 2 0.1834 2 4.5342 2 14.6712 2 0.1018 6 25.7176 2 4.6225 2 0.1062 2 59.4474 2)
Average genome size in population (length): 71.699
Average program size in population (points): 72.699
Average percent parens in population: 0.014
Minimum age in population: 71.87509275256059
Maximum age in population: 76.3542044000888
Average age in population: 74.28507108539583
Median age in population: 74.3374664850577
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 12
Genome diversity (% unique Plush genomes):	 0.785
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 12
Syntactic diversity (% unique Push programs):	 0.785
Total error diversity:				 0.298
Error (vector) diversity:			 0.315
Behavioral diversity:				 0.316
--- Run Statistics ---
Number of program evaluations used so far: 52000
Number of point (instruction) evaluations so far: 56165564
--- Timings ---
Current time: 1529615149731 milliseconds
Total Time:         166.4 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        63.0 seconds, 37.9%
Fitness Testing:     83.0 seconds, 49.9%
Report:              20.2 seconds, 12.1%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 51
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 52
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 52
;;******************************
;; -*- Number IO problem report - generation 52
Test total error for best: 62724.66169999999
Test mean error for best: 31.36233
;;------------------------------
Outputs of best individual on training cases:
Correct output: -54.078495011  | Program output: -98.078495011 
Correct output: 13.1534720339  | Program output: -5.8465279661 
Correct output: 41.2049141439  | Program output: 33.210273304  
Correct output: -6.0487858971  | Program output: 7.9512141029  
Correct output: -75.9491370053 | Program output: -36.9491370053
Correct output: 49.8479113478  | Program output: -33.1520886522
Correct output: -43.0947106158 | Program output: 28.7808803142 
Correct output: -6.035421      | Program output: -3.035421     
Correct output: -64.6496412859 | Program output: -17.6496412859
Correct output: -8.4475981317  | Program output: -96.4475981317
Correct output: -61.9056292771 | Program output: -85.9056292771
Correct output: -100.2670640218 | Program output: -16.2670640218
Correct output: 33.5793532538  | Program output: 29.2622134912 
Correct output: -71.5665679812 | Program output: -37.5665679812
Correct output: -150.2787840572 | Program output: -149.5982655339
Correct output: -33.4710147358 | Program output: -39.4710147358
Correct output: 12.2165113619  | Program output: 30.395210537  
Correct output: 16.3988550752  | Program output: 22.3988550752 
Correct output: -103.483665155 | Program output: -80.483665155 
Correct output: -16.1113007238 | Program output: -70.1113007238
Correct output: 1.5190821923   | Program output: -24.4809178077
Correct output: 56.222608134   | Program output: 29.222608134  
Correct output: -100.5567747653 | Program output: -72.5567747653
Correct output: 20.8692780643  | Program output: 30.4458782077 
Correct output: 137.7657204956 | Program output: 43.7657204956 
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_rot} {:instruction print_float} {:instruction in1} {:instruction integer_mod} {:instruction float_dec} {:instruction integer_inc} {:instruction integer_sub} {:instruction float_min} {:instruction float_tan} {:instruction integer_dup} {:instruction in1} {:instruction float_min} {:instruction float_mult} {:instruction 23.58962050531167} {:instruction float_mult} {:instruction 23.58962050531167} {:instruction integer_min} {:instruction integer_mod} {:instruction integer_swap} {:instruction float_swap} {:instruction float_min} {:instruction float_tan} {:instruction integer_dup} {:instruction float_tan} {:instruction integer_dup} {:instruction in1} {:instruction float_min} {:instruction float_dup_times} {:instruction 23.58962050531167} {:instruction integer_min} {:instruction integer_mod} {:instruction float_add} {:instruction integer_dup} {:instruction integer_pop} {:instruction float_swap} {:instruction float_min} {:instruction float_tan} {:instruction integer_dup} {:instruction in1} {:instruction float_min} {:instruction float_mult} {:instruction 23.47472230998136} {:instruction float_stackdepth} {:instruction integer_min} {:instruction float_add} {:instruction float_min} {:instruction tagged_372} {:instruction integer_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_stackdepth} {:instruction integer_rot} {:instruction float_add} {:instruction float_min} {:instruction float_min} {:instruction float_inc} {:instruction float_inc} {:instruction float_stackdepth} {:instruction integer_rot} {:instruction float_add} {:instruction float_min} {:instruction tagged_372} {:instruction integer_inc} {:instruction float_inc} {:instruction integer_add} {:instruction float_inc} {:instruction float_inc} {:instruction in1} {:instruction integer_sub} {:instruction -5} {:instruction integer_rot} {:instruction float_min} {:instruction print_float} {:instruction integer_rot} {:instruction integer_shove} {:instruction float_tan} {:instruction float_tan} {:instruction in2} {:instruction integer_sub} {:instruction float_add})
Best program: (integer_rot print_float in1 integer_mod float_dec integer_inc integer_sub float_min float_tan integer_dup in1 float_min float_mult 23.58962050531167 float_mult 23.58962050531167 integer_min integer_mod integer_swap float_swap float_min float_tan integer_dup float_tan integer_dup in1 float_min float_dup_times 23.58962050531167 integer_min integer_mod float_add integer_dup integer_pop float_swap float_min float_tan integer_dup in1 float_min float_mult 23.47472230998136 float_stackdepth integer_min float_add float_min tagged_372 integer_inc float_inc float_inc float_inc float_stackdepth integer_rot float_add float_min float_min float_inc float_inc float_stackdepth integer_rot float_add float_min tagged_372 integer_inc float_inc integer_add float_inc float_inc in1 integer_sub -5 integer_rot float_min print_float integer_rot integer_shove float_tan float_tan in2 integer_sub float_add)
Errors: [44.0 2 19.0 12 7.9946 10 14.0 12 39.0 2 83.0 13 71.8756 11 3.0 1 47.0 2 88.0 2 24.0 2 84.0 2 4.3171 11 34.0 2 0.6805 11 6.0 1 18.1787 10 6.0 2 23.0 2 54.0 2 26.0 13 27.0 2 28.0 3 9.5766 9 94.0 2]
Total: 996.6231000000001
Mean: 19.932463
Genome size: 81
Size: 82
Percent parens: 0.012
--- Population Statistics ---
Average total errors in population: 2631.2668016999955
Median total errors in population: 1005.0904
Error averages by case: (106.32812579999995 3.029 81.61064100000002 12.266 77.99865540000029 9.916 77.53401829999999 12.206 104.26148840000005 3.039 141.42321129999996 13.241 127.5129862000001 11.342 69.35103910000001 2.053 110.97329570000004 3.037 146.46737559999994 3.015 87.93420250000004 3.03 145.30854810000005 3.046 74.22533350000026 10.085 99.50483690000006 3.058 85.59516049999992 8.22 71.27471249999999 2.12 80.5964890999998 10.409 70.17077689999998 3.493 90.04047680000002 3.073 114.98367289999995 3.084 88.2858122 13.139 92.58780879999938 9.309 94.95126860000005 4.097 74.1148238000002 9.551 154.3620417999999 5.012)
Error minima by case: (15.5253 1 3.0352 8 0.9994 2 0.4266 6 2.0509 1 21.3732 8 8.3322 7 0.0 0 29.3504 2 5.3507 2 0.1357 1 45.3438 2 0.7438 2 3.5666 2 0.0701 2 2.0 1 4.0329 2 0.1834 1 3.5342 2 14.5666 1 0.1018 6 25.9497 2 9.3927 2 0.0283 2 60.439 2)
Average genome size in population (length): 73.389
Average program size in population (points): 74.389
Average percent parens in population: 0.014
Minimum age in population: 73.56357111410281
Maximum age in population: 77.60574777032954
Average age in population: 75.73871858323265
Median age in population: 75.80844064827969
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 27
Genome diversity (% unique Plush genomes):	 0.78
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 27
Syntactic diversity (% unique Push programs):	 0.78
Total error diversity:				 0.305
Error (vector) diversity:			 0.328
Behavioral diversity:				 0.329
--- Run Statistics ---
Number of program evaluations used so far: 53000
Number of point (instruction) evaluations so far: 58000414
--- Timings ---
Current time: 1529615153397 milliseconds
Total Time:         170.0 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        64.2 seconds, 37.8%
Fitness Testing:     84.9 seconds, 49.9%
Report:              20.8 seconds, 12.2%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 52
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 53
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 53
;;******************************
;; -*- Number IO problem report - generation 53
Test total error for best: 62583.45889999999
Test mean error for best: 31.29173
;;------------------------------
Outputs of best individual on training cases:
Correct output: -54.078495011  | Program output: -98.078495011 
Correct output: 13.1534720339  | Program output: -5.8465279661 
Correct output: 41.2049141439  | Program output: 34.2187181458 
Correct output: -6.0487858971  | Program output: 7.9512141029  
Correct output: -75.9491370053 | Program output: -36.9491370053
Correct output: 49.8479113478  | Program output: -33.1520886522
Correct output: -43.0947106158 | Program output: 29.7893251559 
Correct output: -6.035421      | Program output: -3.035421     
Correct output: -64.6496412859 | Program output: -17.6496412859
Correct output: -8.4475981317  | Program output: -96.4475981317
Correct output: -61.9056292771 | Program output: -85.9056292771
Correct output: -100.2670640218 | Program output: -16.2670640218
Correct output: 33.5793532538  | Program output: 30.2706583329 
Correct output: -71.5665679812 | Program output: -37.5665679812
Correct output: -150.2787840572 | Program output: -148.5898206922
Correct output: -33.4710147358 | Program output: -39.4710147358
Correct output: 12.2165113619  | Program output: 31.4036553787 
Correct output: 16.3988550752  | Program output: 22.3988550752 
Correct output: -103.483665155 | Program output: -80.483665155 
Correct output: -16.1113007238 | Program output: -70.1113007238
Correct output: 1.5190821923   | Program output: -24.4809178077
Correct output: 56.222608134   | Program output: 29.222608134  
Correct output: -100.5567747653 | Program output: -72.5567747653
Correct output: 20.8692780643  | Program output: 31.4543230494 
Correct output: 137.7657204956 | Program output: 43.7657204956 
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_rot} {:instruction integer_pop} {:instruction in1} {:instruction integer_mod} {:instruction float_dec} {:instruction integer_inc} {:instruction integer_sub} {:instruction float_min} {:instruction float_tan} {:instruction integer_dup} {:instruction in1} {:instruction float_min} {:instruction float_mult} {:instruction 23.58962050531167} {:instruction float_mult} {:instruction 23.58962050531167} {:instruction integer_min} {:instruction integer_mod} {:instruction integer_swap} {:instruction float_swap} {:instruction float_min} {:instruction float_tan} {:instruction integer_dup} {:instruction float_tan} {:instruction integer_dup} {:instruction in1} {:instruction float_min} {:instruction float_mult} {:instruction 23.58962050531167} {:instruction integer_min} {:instruction integer_mod} {:instruction float_add} {:instruction float_add} {:instruction integer_min} {:instruction integer_pop} {:instruction float_swap} {:instruction float_min} {:instruction float_tan} {:instruction integer_dup} {:instruction integer_dec} {:instruction float_min} {:instruction float_mult} {:instruction 25.483167151686477} {:instruction float_add} {:instruction float_min} {:instruction tagged_372} {:instruction integer_inc} {:instruction float_inc} {:instruction integer_min} {:instruction float_inc} {:instruction in1} {:instruction integer_sub} {:instruction float_min} {:instruction tagged_372} {:instruction integer_inc} {:instruction float_inc} {:instruction integer_min} {:instruction float_inc} {:instruction float_stackdepth} {:instruction integer_mod} {:instruction float_add} {:instruction float_min} {:instruction tagged_372} {:instruction integer_inc} {:instruction float_inc} {:instruction integer_add} {:instruction float_inc} {:instruction float_inc} {:instruction in1} {:instruction integer_sub} {:instruction -5} {:instruction integer_rot} {:instruction float_min} {:instruction print_float} {:instruction integer_rot} {:instruction integer_shove} {:instruction float_tan} {:instruction float_tan} {:instruction in2} {:instruction integer_sub} {:instruction float_add})
Best program: (integer_rot integer_pop in1 integer_mod float_dec integer_inc integer_sub float_min float_tan integer_dup in1 float_min float_mult 23.58962050531167 float_mult 23.58962050531167 integer_min integer_mod integer_swap float_swap float_min float_tan integer_dup float_tan integer_dup in1 float_min float_mult 23.58962050531167 integer_min integer_mod float_add float_add integer_min integer_pop float_swap float_min float_tan integer_dup integer_dec float_min float_mult 25.483167151686477 float_add float_min tagged_372 integer_inc float_inc integer_min float_inc in1 integer_sub float_min tagged_372 integer_inc float_inc integer_min float_inc float_stackdepth integer_mod float_add float_min tagged_372 integer_inc float_inc integer_add float_inc float_inc in1 integer_sub -5 integer_rot float_min print_float integer_rot integer_shove float_tan float_tan in2 integer_sub float_add)
Errors: [44.0 2 19.0 12 6.9862 8 14.0 12 39.0 2 83.0 13 72.884 12 3.0 1 47.0 2 88.0 2 24.0 2 84.0 2 3.3087 9 34.0 2 1.689 9 6.0 1 19.1871 10 6.0 2 23.0 2 54.0 2 26.0 13 27.0 2 28.0 3 10.585 11 94.0 2]
Total: 995.6400000000001
Mean: 19.9128
Genome size: 81
Size: 82
Percent parens: 0.012
--- Population Statistics ---
Average total errors in population: 2543.406521499996
Median total errors in population: 1004.0904
Error averages by case: (104.4754846 3.017 78.9972461 12.257 72.1868814 9.623 74.1617594 12.169 98.8526457 3.036 139.6596639 13.24 125.42414279999997 11.365 64.45103509999998 1.884 105.8230252 3.014 145.0723466999999 3.039 85.86463609999997 3.061 140.26949260000004 3.011 68.08155580000016 10.027 94.19120800000003 3.073 81.82393649999953 8.478 68.9736629 2.127 77.61316189999964 10.165 66.17273840000003 3.471 85.31508939999998 3.063 113.09343059999998 3.079 85.81016670000001 13.152 88.97323279999955 8.439 89.70659659999998 4.073 72.86559290000028 9.337 153.47378940000004 4.874)
Error minima by case: (14.5253 1 6.4832 8 0.3883 2 0.3998 6 7.0509 1 22.5033 8 5.276 8 0.1824 1 13.5796 2 7.7615 2 1.4832 1 7.7598 2 0.1395 2 1.4334 2 0.0701 2 2.0 1 2.0083 2 0.1697 1 3.5342 2 14.5666 1 0.5168 8 27.0 2 9.3927 2 0.0283 2 58.6244 2)
Average genome size in population (length): 74.594
Average program size in population (points): 75.594
Average percent parens in population: 0.013
Minimum age in population: 74.64230901495179
Maximum age in population: 79.33881535685178
Average age in population: 77.1683500702658
Median age in population: 77.24430059716771
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 44
Genome diversity (% unique Plush genomes):	 0.767
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 44
Syntactic diversity (% unique Push programs):	 0.767
Total error diversity:				 0.331
Error (vector) diversity:			 0.344
Behavioral diversity:				 0.346
--- Run Statistics ---
Number of program evaluations used so far: 54000
Number of point (instruction) evaluations so far: 59865439
--- Timings ---
Current time: 1529615157277 milliseconds
Total Time:         174.0 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        65.6 seconds, 37.7%
Fitness Testing:     86.9 seconds, 50.0%
Report:              21.3 seconds, 12.3%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 53
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 54
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 54
;;******************************
;; -*- Number IO problem report - generation 54
Test total error for best: 62697.6743
Test mean error for best: 31.34884
;;------------------------------
Outputs of best individual on training cases:
Correct output: -54.078495011  | Program output: -98.078495011 
Correct output: 13.1534720339  | Program output: -5.8465279661 
Correct output: 41.2049141439  | Program output: 33.3448199517 
Correct output: -6.0487858971  | Program output: 7.9512141029  
Correct output: -75.9491370053 | Program output: -36.9491370053
Correct output: 49.8479113478  | Program output: -33.1520886522
Correct output: -43.0947106158 | Program output: 28.9154269619 
Correct output: -6.035421      | Program output: -3.035421     
Correct output: -64.6496412859 | Program output: -17.6496412859
Correct output: -8.4475981317  | Program output: -96.4475981317
Correct output: -61.9056292771 | Program output: -85.9056292771
Correct output: -100.2670640218 | Program output: -16.2670640218
Correct output: 33.5793532538  | Program output: 29.3967601388 
Correct output: -71.5665679812 | Program output: -37.5665679812
Correct output: -150.2787840572 | Program output: -149.4637188863
Correct output: -33.4710147358 | Program output: -39.4710147358
Correct output: 12.2165113619  | Program output: 30.5297571847 
Correct output: 16.3988550752  | Program output: 22.3988550752 
Correct output: -103.483665155 | Program output: -80.483665155 
Correct output: -16.1113007238 | Program output: -70.1113007238
Correct output: 1.5190821923   | Program output: -24.4809178077
Correct output: 56.222608134   | Program output: 29.222608134  
Correct output: -100.5567747653 | Program output: -72.5567747653
Correct output: 20.8692780643  | Program output: 30.5804248553 
Correct output: 137.7657204956 | Program output: 43.7657204956 
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_rot} {:instruction integer_pop} {:instruction in1} {:instruction integer_mod} {:instruction float_dec} {:instruction integer_inc} {:instruction integer_sub} {:instruction float_min} {:instruction float_tan} {:instruction integer_dup} {:instruction in1} {:instruction float_min} {:instruction float_mult} {:instruction 23.58962050531167} {:instruction float_mult} {:instruction 23.58962050531167} {:instruction integer_min} {:instruction integer_mod} {:instruction integer_swap} {:instruction float_swap} {:instruction float_min} {:instruction float_tan} {:instruction integer_dup} {:instruction float_tan} {:instruction float_dup_items} {:instruction in1} {:instruction float_min} {:instruction integer_flush} {:instruction 23.58962050531167} {:instruction integer_min} {:instruction integer_mod} {:instruction float_add} {:instruction integer_dup} {:instruction integer_pop} {:instruction float_swap} {:instruction float_min} {:instruction float_tan} {:instruction integer_dup} {:instruction in1} {:instruction float_min} {:instruction float_mult} {:instruction 24.609268957636722} {:instruction float_stackdepth} {:instruction integer_min} {:instruction float_add} {:instruction float_min} {:instruction tagged_372} {:instruction integer_inc} {:instruction float_inc} {:instruction integer_min} {:instruction float_add} {:instruction float_min} {:instruction tagged_372} {:instruction integer_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_stackdepth} {:instruction integer_mod} {:instruction float_add} {:instruction float_min} {:instruction tagged_372} {:instruction integer_inc} {:instruction float_inc} {:instruction integer_add} {:instruction float_inc} {:instruction float_inc} {:instruction in1} {:instruction integer_sub} {:instruction -5} {:instruction integer_rot} {:instruction float_min} {:instruction print_float} {:instruction float_sin} {:instruction integer_shove} {:instruction float_tan} {:instruction float_tan} {:instruction in2} {:instruction integer_sub} {:instruction float_add})
Best program: (integer_rot integer_pop in1 integer_mod float_dec integer_inc integer_sub float_min float_tan integer_dup in1 float_min float_mult 23.58962050531167 float_mult 23.58962050531167 integer_min integer_mod integer_swap float_swap float_min float_tan integer_dup float_tan float_dup_items in1 float_min integer_flush 23.58962050531167 integer_min integer_mod float_add integer_dup integer_pop float_swap float_min float_tan integer_dup in1 float_min float_mult 24.609268957636722 float_stackdepth integer_min float_add float_min tagged_372 integer_inc float_inc integer_min float_add float_min tagged_372 integer_inc float_inc float_inc float_inc float_stackdepth integer_mod float_add float_min tagged_372 integer_inc float_inc integer_add float_inc float_inc in1 integer_sub -5 integer_rot float_min print_float float_sin integer_shove float_tan float_tan in2 integer_sub float_add)
Errors: [44.0 2 19.0 12 7.8601 10 14.0 12 39.0 2 83.0 13 72.0101 11 3.0 1 47.0 2 88.0 2 24.0 2 84.0 2 4.1826 10 34.0 2 0.8151 11 6.0 1 18.3132 10 6.0 2 23.0 2 54.0 2 26.0 13 27.0 2 28.0 3 9.7111 8 94.0 2]
Total: 994.8922
Mean: 19.897844
Genome size: 80
Size: 81
Percent parens: 0.012
--- Population Statistics ---
Average total errors in population: 2507.9270658999953
Median total errors in population: 1003.0904
Error averages by case: (102.88877790000001 2.92 78.35357099999999 12.193 70.45435459999987 9.673 71.1134719 12.132 98.09653759999998 2.95 138.38131259999997 13.168 124.91187659999997 11.332 63.73083259999999 1.845 105.04658320000001 3.006 143.47133889999998 2.949 84.35300840000001 2.975 139.37078140000003 3.019 66.05591240000022 9.991 93.4019897 2.978 79.80315109999967 8.262 67.4379058 2.047 76.98018879999972 10.131 64.44834190000003 3.682 83.9104617 2.99 111.66964149999997 2.999 84.80318009999999 13.08 86.7988603999997 7.653 88.659331 4.0 71.22209560000036 9.349 152.15755919999995 5.082)
Error minima by case: (8.5253 2 6.4747 9 2.6205 2 0.2034 6 5.0509 1 21.1222 8 2.1887 8 0.3865 1 10.7141 1 3.4476 2 1.4747 2 10.0148 2 0.1559 2 0.5666 2 0.0495 3 1.0 1 0.0762 2 0.1766 2 3.5342 2 11.1113 2 0.4747 7 8.8952 2 9.3927 2 0.3782 2 40.4658 2)
Average genome size in population (length): 77.672
Average program size in population (points): 78.672
Average percent parens in population: 0.013
Minimum age in population: 75.64230901495179
Maximum age in population: 80.42504442050898
Average age in population: 78.49109697847076
Median age in population: 78.55477443303386
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 19
Genome diversity (% unique Plush genomes):	 0.789
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 19
Syntactic diversity (% unique Push programs):	 0.789
Total error diversity:				 0.343
Error (vector) diversity:			 0.359
Behavioral diversity:				 0.36
--- Run Statistics ---
Number of program evaluations used so far: 55000
Number of point (instruction) evaluations so far: 61807464
--- Timings ---
Current time: 1529615161486 milliseconds
Total Time:         178.1 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        66.8 seconds, 37.5%
Fitness Testing:     89.3 seconds, 50.1%
Report:              21.8 seconds, 12.3%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 54
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 55
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 55
;;******************************
;; -*- Number IO problem report - generation 55
Test total error for best: 62741.34589999999
Test mean error for best: 31.37067
;;------------------------------
Outputs of best individual on training cases:
Correct output: -54.078495011  | Program output: -98.078495011 
Correct output: 13.1534720339  | Program output: -5.8465279661 
Correct output: 41.2049141439  | Program output: 33.2187181458 
Correct output: -6.0487858971  | Program output: 7.9512141029  
Correct output: -75.9491370053 | Program output: -36.9491370053
Correct output: 49.8479113478  | Program output: -33.1520886522
Correct output: -43.0947106158 | Program output: 28.7893251559 
Correct output: -6.035421      | Program output: -3.035421     
Correct output: -64.6496412859 | Program output: -17.6496412859
Correct output: -8.4475981317  | Program output: -96.4475981317
Correct output: -61.9056292771 | Program output: -85.9056292771
Correct output: -100.2670640218 | Program output: -16.2670640218
Correct output: 33.5793532538  | Program output: 29.2706583329 
Correct output: -71.5665679812 | Program output: -37.5665679812
Correct output: -150.2787840572 | Program output: -149.5898206922
Correct output: -33.4710147358 | Program output: -39.4710147358
Correct output: 12.2165113619  | Program output: 30.4036553787 
Correct output: 16.3988550752  | Program output: 22.3988550752 
Correct output: -103.483665155 | Program output: -80.483665155 
Correct output: -16.1113007238 | Program output: -70.1113007238
Correct output: 1.5190821923   | Program output: -24.4809178077
Correct output: 56.222608134   | Program output: 29.222608134  
Correct output: -100.5567747653 | Program output: -72.5567747653
Correct output: 20.8692780643  | Program output: 30.4543230494 
Correct output: 137.7657204956 | Program output: 43.7657204956 
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_rot} {:instruction integer_pop} {:instruction in1} {:instruction integer_mod} {:instruction float_dec} {:instruction integer_inc} {:instruction integer_sub} {:instruction float_min} {:instruction float_tan} {:instruction integer_dup} {:instruction in1} {:instruction float_min} {:instruction float_mult} {:instruction 23.58962050531167} {:instruction float_mult} {:instruction 23.58962050531167} {:instruction integer_min} {:instruction integer_mod} {:instruction integer_swap} {:instruction float_swap} {:instruction float_min} {:instruction float_tan} {:instruction integer_mult} {:instruction float_tan} {:instruction float_dup_items} {:instruction in1} {:instruction float_min} {:instruction integer_flush} {:instruction 23.58962050531167} {:instruction float_add} {:instruction integer_min} {:instruction integer_pop} {:instruction float_swap} {:instruction float_min} {:instruction float_tan} {:instruction integer_dup} {:instruction integer_dec} {:instruction float_min} {:instruction float_mult} {:instruction 25.483167151686477} {:instruction float_add} {:instruction float_min} {:instruction tagged_372} {:instruction integer_inc} {:instruction float_inc} {:instruction integer_min} {:instruction float_inc} {:instruction in1} {:instruction integer_sub} {:instruction float_min} {:instruction tagged_487} {:instruction integer_inc} {:instruction float_inc} {:instruction integer_min} {:instruction float_inc} {:instruction float_stackdepth} {:instruction integer_mod} {:instruction float_add} {:instruction float_min} {:instruction tagged_372} {:instruction integer_inc} {:instruction float_inc} {:instruction integer_add} {:instruction integer_sub} {:instruction float_inc} {:instruction in1} {:instruction integer_sub} {:instruction -5} {:instruction integer_rot} {:instruction float_min} {:instruction print_float} {:instruction integer_rot} {:instruction integer_shove} {:instruction float_tan} {:instruction float_tan} {:instruction in2} {:instruction integer_sub} {:instruction float_add})
Best program: (integer_rot integer_pop in1 integer_mod float_dec integer_inc integer_sub float_min float_tan integer_dup in1 float_min float_mult 23.58962050531167 float_mult 23.58962050531167 integer_min integer_mod integer_swap float_swap float_min float_tan integer_mult float_tan float_dup_items in1 float_min integer_flush 23.58962050531167 float_add integer_min integer_pop float_swap float_min float_tan integer_dup integer_dec float_min float_mult 25.483167151686477 float_add float_min tagged_372 integer_inc float_inc integer_min float_inc in1 integer_sub float_min tagged_487 integer_inc float_inc integer_min float_inc float_stackdepth integer_mod float_add float_min tagged_372 integer_inc float_inc integer_add integer_sub float_inc in1 integer_sub -5 integer_rot float_min print_float integer_rot integer_shove float_tan float_tan in2 integer_sub float_add)
Errors: [44.0 2 19.0 12 7.9862 8 14.0 12 39.0 2 83.0 13 71.884 12 3.0 1 47.0 2 88.0 2 24.0 2 84.0 2 4.3087 10 34.0 2 0.689 9 6.0 1 18.1871 10 6.0 2 23.0 2 54.0 2 26.0 13 27.0 2 28.0 3 9.585 10 94.0 2]
Total: 993.6400000000001
Mean: 19.8728
Genome size: 78
Size: 79
Percent parens: 0.013
--- Population Statistics ---
Average total errors in population: 2405.902645699999
Median total errors in population: 1002.0904
Error averages by case: (99.56512769999998 2.88 74.97418650000002 12.252 65.20019869999989 9.797 68.8620302 12.19 93.18775160000003 2.843 134.88200199999997 13.275 122.4100534 11.411 59.161919999999974 1.753 100.70683410000001 2.837 140.4034261 2.9 80.75953959999998 2.941 135.51191660000006 2.855 60.717283900000226 9.984 88.4365923 2.887 74.04033369999996 8.48 62.21383229999997 1.91 74.0138803999996 10.195 60.500361400000045 3.573 78.8124181 2.902 108.31789279999998 2.955 81.3912759 13.206 82.85699589999986 5.849 83.38364900000002 3.929 68.24165760000032 9.491 148.8884859 5.168)
Error minima by case: (11.5253 1 4.4747 1 0.2674 2 0.2106 6 7.0509 1 18.3732 8 24.9703 8 0.224 1 7.7141 1 9.138 1 0.5253 1 13.6253 1 0.0336 2 1.4334 1 0.0701 2 0.0 0 0.2338 2 0.1834 1 2.5342 2 16.6853 1 0.5627 8 0.6093 1 6.3927 2 0.0469 2 6.0 2)
Average genome size in population (length): 79.942
Average program size in population (points): 80.942
Average percent parens in population: 0.012
Minimum age in population: 77.29865423056107
Maximum age in population: 82.03432229844768
Average age in population: 79.92987317123684
Median age in population: 79.96862261758412
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 32
Genome diversity (% unique Plush genomes):	 0.816
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 32
Syntactic diversity (% unique Push programs):	 0.816
Total error diversity:				 0.376
Error (vector) diversity:			 0.394
Behavioral diversity:				 0.395
--- Run Statistics ---
Number of program evaluations used so far: 56000
Number of point (instruction) evaluations so far: 63806114
--- Timings ---
Current time: 1529615165394 milliseconds
Total Time:         182.1 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        68.0 seconds, 37.4%
Fitness Testing:     91.5 seconds, 50.3%
Report:              22.4 seconds, 12.3%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 55
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 56
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 56
;;******************************
;; -*- Number IO problem report - generation 56
Test total error for best: 63534.14329999999
Test mean error for best: 31.76707
;;------------------------------
Outputs of best individual on training cases:
Correct output: -54.078495011  | Program output: -98.078495011 
Correct output: 13.1534720339  | Program output: -5.8465279661 
Correct output: 41.2049141439  | Program output: 30.8568184529 
Correct output: -6.0487858971  | Program output: 7.9512141029  
Correct output: -75.9491370053 | Program output: -36.9491370053
Correct output: 49.8479113478  | Program output: -33.1520886522
Correct output: -43.0947106158 | Program output: -32.5094952176
Correct output: -6.035421      | Program output: -3.035421     
Correct output: -64.6496412859 | Program output: -17.6496412859
Correct output: -8.4475981317  | Program output: -96.4475981317
Correct output: -61.9056292771 | Program output: -85.9056292771
Correct output: -100.2670640218 | Program output: -16.2670640218
Correct output: 33.5793532538  | Program output: 5.1795455547  
Correct output: -71.5665679812 | Program output: -37.5665679812
Correct output: -150.2787840572 | Program output: -149.5982655339
Correct output: -33.4710147358 | Program output: -39.4710147358
Correct output: 12.2165113619  | Program output: 30.8568184529 
Correct output: 16.3988550752  | Program output: 22.3988550752 
Correct output: -103.483665155 | Program output: -80.483665155 
Correct output: -16.1113007238 | Program output: -70.1113007238
Correct output: 1.5190821923   | Program output: -24.4809178077
Correct output: 56.222608134   | Program output: 29.222608134  
Correct output: -100.5567747653 | Program output: -72.5567747653
Correct output: 20.8692780643  | Program output: 30.8568184529 
Correct output: 137.7657204956 | Program output: 26.7782598174 
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_rot} {:instruction integer_pop} {:instruction in1} {:instruction integer_mod} {:instruction integer_max} {:instruction integer_inc} {:instruction integer_sub} {:instruction float_min} {:instruction float_tan} {:instruction integer_dup} {:instruction in1} {:instruction float_min} {:instruction integer_sub} {:instruction float_min} {:instruction float_tan} {:instruction integer_dup} {:instruction in1} {:instruction float_min} {:instruction float_mult} {:instruction 23.58962050531167} {:instruction float_mult} {:instruction 23.58962050531167} {:instruction integer_min} {:instruction integer_mod} {:instruction integer_swap} {:instruction float_swap} {:instruction float_min} {:instruction float_tan} {:instruction integer_dup} {:instruction float_tan} {:instruction integer_dup} {:instruction in1} {:instruction float_min} {:instruction float_dup_times} {:instruction 23.58962050531167} {:instruction integer_min} {:instruction integer_mod} {:instruction float_add} {:instruction integer_dup} {:instruction integer_pop} {:instruction float_swap} {:instruction float_min} {:instruction float_tan} {:instruction integer_dup} {:instruction in1} {:instruction float_min} {:instruction float_mult} {:instruction 23.47472230998136} {:instruction float_stackdepth} {:instruction integer_dec} {:instruction float_add} {:instruction float_min} {:instruction tagged_372} {:instruction integer_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_stackdepth} {:instruction integer_rot} {:instruction float_add} {:instruction float_min} {:instruction float_min} {:instruction float_inc} {:instruction float_inc} {:instruction float_stackdepth} {:instruction integer_rot} {:instruction float_add} {:instruction float_min} {:instruction tagged_372} {:instruction integer_inc} {:instruction float_inc} {:instruction integer_add} {:instruction float_inc} {:instruction float_inc} {:instruction in1} {:instruction integer_sub} {:instruction -5} {:instruction integer_rot} {:instruction float_min} {:instruction print_float} {:instruction integer_rot} {:instruction integer_shove} {:instruction float_tan} {:instruction float_tan} {:instruction integer_flush} {:instruction integer_sub} {:instruction float_add})
Best program: (integer_rot integer_pop in1 integer_mod integer_max integer_inc integer_sub float_min float_tan integer_dup in1 float_min integer_sub float_min float_tan integer_dup in1 float_min float_mult 23.58962050531167 float_mult 23.58962050531167 integer_min integer_mod integer_swap float_swap float_min float_tan integer_dup float_tan integer_dup in1 float_min float_dup_times 23.58962050531167 integer_min integer_mod float_add integer_dup integer_pop float_swap float_min float_tan integer_dup in1 float_min float_mult 23.47472230998136 float_stackdepth integer_dec float_add float_min tagged_372 integer_inc float_inc float_inc float_inc float_stackdepth integer_rot float_add float_min float_min float_inc float_inc float_stackdepth integer_rot float_add float_min tagged_372 integer_inc float_inc integer_add float_inc float_inc in1 integer_sub -5 integer_rot float_min print_float integer_rot integer_shove float_tan float_tan integer_flush integer_sub float_add)
Errors: [44.0 2 19.0 12 10.3481 10 14.0 12 39.0 2 83.0 13 10.5852 9 3.0 1 47.0 2 88.0 2 24.0 2 84.0 2 28.3998 9 34.0 2 0.6805 11 6.0 1 18.6403 9 6.0 2 23.0 2 54.0 2 26.0 13 27.0 2 28.0 3 9.9875 9 110.9875 12]
Total: 984.6288999999999
Mean: 19.692577
Genome size: 87
Size: 88
Percent parens: 0.011
--- Population Statistics ---
Average total errors in population: 2246.7431796000023
Median total errors in population: 999.6231000000001
Error averages by case: (94.29825609999997 2.783 67.45275639999998 12.115 57.08314579999994 9.598 59.399969199999994 12.108 88.5507019 2.788 128.68288589999997 13.13 115.33899900000003 11.39 52.13006239999999 1.682 94.9452653 2.752 135.47363929999997 2.795 75.52577749999999 2.829 129.68681820000006 2.794 53.1781785000003 9.759 83.8645903 2.806 69.92703849999995 8.768 57.4185281 1.864 66.62342259999977 10.03 52.97347360000003 3.472 75.10096420000002 2.821 103.23457809999998 2.843 74.79642609999999 13.066 74.2175039 4.177 80.1744019 3.856 60.931560800000234 9.489 141.15923599999996 4.86)
Error minima by case: (10.5253 1 7.4747 1 0.5103 2 0.3998 6 6.0509 1 18.0348 9 5.3988 7 1.0354 1 29.4747 1 8.114 1 1.4747 1 17.7685 1 0.0929 2 0.4334 1 0.0343 3 0.0 0 1.2165 2 0.1834 1 2.5342 2 15.6328 1 0.4747 7 5.4747 2 10.0821 2 1.4873 2 54.4474 2)
Average genome size in population (length): 81.021
Average program size in population (points): 82.021
Average percent parens in population: 0.012
Minimum age in population: 78.65224703691074
Maximum age in population: 83.0796004432919
Average age in population: 81.3112158706627
Median age in population: 81.34199638758886
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 27
Genome diversity (% unique Plush genomes):	 0.81
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 27
Syntactic diversity (% unique Push programs):	 0.81
Total error diversity:				 0.337
Error (vector) diversity:			 0.351
Behavioral diversity:				 0.351
--- Run Statistics ---
Number of program evaluations used so far: 57000
Number of point (instruction) evaluations so far: 65832089
--- Timings ---
Current time: 1529615169465 milliseconds
Total Time:         186.0 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        69.2 seconds, 37.2%
Fitness Testing:     93.8 seconds, 50.4%
Report:              22.9 seconds, 12.3%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 56
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 57
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 57
;;******************************
;; -*- Number IO problem report - generation 57
Test total error for best: 63534.14329999999
Test mean error for best: 31.76707
;;------------------------------
Outputs of best individual on training cases:
Correct output: -54.078495011  | Program output: -98.078495011 
Correct output: 13.1534720339  | Program output: -5.8465279661 
Correct output: 41.2049141439  | Program output: 30.8568184529 
Correct output: -6.0487858971  | Program output: 7.9512141029  
Correct output: -75.9491370053 | Program output: -36.9491370053
Correct output: 49.8479113478  | Program output: -33.1520886522
Correct output: -43.0947106158 | Program output: -32.5094952176
Correct output: -6.035421      | Program output: -3.035421     
Correct output: -64.6496412859 | Program output: -17.6496412859
Correct output: -8.4475981317  | Program output: -96.4475981317
Correct output: -61.9056292771 | Program output: -85.9056292771
Correct output: -100.2670640218 | Program output: -16.2670640218
Correct output: 33.5793532538  | Program output: 5.1795455547  
Correct output: -71.5665679812 | Program output: -37.5665679812
Correct output: -150.2787840572 | Program output: -149.5982655339
Correct output: -33.4710147358 | Program output: -39.4710147358
Correct output: 12.2165113619  | Program output: 30.8568184529 
Correct output: 16.3988550752  | Program output: 22.3988550752 
Correct output: -103.483665155 | Program output: -80.483665155 
Correct output: -16.1113007238 | Program output: -70.1113007238
Correct output: 1.5190821923   | Program output: -24.4809178077
Correct output: 56.222608134   | Program output: 29.222608134  
Correct output: -100.5567747653 | Program output: -72.5567747653
Correct output: 20.8692780643  | Program output: 30.8568184529 
Correct output: 137.7657204956 | Program output: 26.7782598174 
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_rot} {:instruction integer_pop} {:instruction in1} {:instruction integer_mod} {:instruction integer_max} {:instruction integer_inc} {:instruction integer_sub} {:instruction float_min} {:instruction float_tan} {:instruction integer_dup} {:instruction in1} {:instruction float_min} {:instruction integer_sub} {:instruction float_min} {:instruction float_tan} {:instruction integer_dup} {:instruction in1} {:instruction float_min} {:instruction float_mult} {:instruction 23.58962050531167} {:instruction float_mult} {:instruction 23.58962050531167} {:instruction integer_min} {:instruction integer_mod} {:instruction integer_swap} {:instruction float_swap} {:instruction float_min} {:instruction float_tan} {:instruction integer_dup} {:instruction float_tan} {:instruction integer_dup} {:instruction in1} {:instruction float_min} {:instruction float_dup_times} {:instruction 23.58962050531167} {:instruction integer_min} {:instruction integer_mod} {:instruction float_add} {:instruction integer_dup} {:instruction integer_pop} {:instruction float_swap} {:instruction float_min} {:instruction float_tan} {:instruction integer_dup} {:instruction in1} {:instruction float_min} {:instruction float_mult} {:instruction 23.47472230998136} {:instruction float_stackdepth} {:instruction integer_dec} {:instruction float_add} {:instruction float_min} {:instruction tagged_372} {:instruction integer_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_stackdepth} {:instruction integer_rot} {:instruction float_add} {:instruction float_min} {:instruction float_min} {:instruction float_inc} {:instruction float_inc} {:instruction float_stackdepth} {:instruction integer_rot} {:instruction float_add} {:instruction float_min} {:instruction tagged_372} {:instruction integer_inc} {:instruction float_inc} {:instruction integer_add} {:instruction float_inc} {:instruction float_inc} {:instruction in1} {:instruction integer_sub} {:instruction -5} {:instruction integer_rot} {:instruction float_min} {:instruction print_float} {:instruction integer_rot} {:instruction integer_shove} {:instruction float_tan} {:instruction float_tan} {:instruction integer_flush} {:instruction integer_sub} {:instruction float_add})
Best program: (integer_rot integer_pop in1 integer_mod integer_max integer_inc integer_sub float_min float_tan integer_dup in1 float_min integer_sub float_min float_tan integer_dup in1 float_min float_mult 23.58962050531167 float_mult 23.58962050531167 integer_min integer_mod integer_swap float_swap float_min float_tan integer_dup float_tan integer_dup in1 float_min float_dup_times 23.58962050531167 integer_min integer_mod float_add integer_dup integer_pop float_swap float_min float_tan integer_dup in1 float_min float_mult 23.47472230998136 float_stackdepth integer_dec float_add float_min tagged_372 integer_inc float_inc float_inc float_inc float_stackdepth integer_rot float_add float_min float_min float_inc float_inc float_stackdepth integer_rot float_add float_min tagged_372 integer_inc float_inc integer_add float_inc float_inc in1 integer_sub -5 integer_rot float_min print_float integer_rot integer_shove float_tan float_tan integer_flush integer_sub float_add)
Errors: [44.0 2 19.0 12 10.3481 10 14.0 12 39.0 2 83.0 13 10.5852 9 3.0 1 47.0 2 88.0 2 24.0 2 84.0 2 28.3998 9 34.0 2 0.6805 11 6.0 1 18.6403 9 6.0 2 23.0 2 54.0 2 26.0 13 27.0 2 28.0 3 9.9875 9 110.9875 12]
Total: 984.6288999999999
Mean: 19.692577
Genome size: 87
Size: 88
Percent parens: 0.011
--- Population Statistics ---
Average total errors in population: 2416.698271200005
Median total errors in population: 996.6231000000001
Error averages by case: (99.44397540000006 2.849 73.66292589999998 12.161 65.40974439999981 9.472 71.18915960000001 12.156 93.64865759999999 2.871 135.13335190000004 13.212 123.53029570000035 11.565 58.102365299999995 1.878 100.20148749999996 2.909 140.883112 2.873 80.57879349999997 2.897 135.4734729 2.951 61.17179030000023 9.695 88.94716149999996 2.937 76.55160279999986 8.94 63.11637069999998 1.933 75.2911480999998 10.13 62.620465600000024 3.61 79.56038699999998 2.895 108.38751720000003 2.918 80.92359309999998 13.123 83.13151900000001 3.732 84.06377939999999 3.874 70.7694796000002 9.707 148.85911520000002 4.759)
Error minima by case: (6.2477 1 7.4747 1 0.6033 2 1.5344 8 2.4747 2 19.1222 8 3.8401 8 0.5735 1 7.0116 1 36.5374 1 2.4747 1 9.6253 1 0.0985 2 0.0947 1 0.0701 3 0.0 0 0.296 2 0.1834 1 2.5342 2 16.2477 1 0.4747 7 5.4027 2 8.5253 2 1.509 2 43.2343 2)
Average genome size in population (length): 81.621
Average program size in population (points): 82.621
Average percent parens in population: 0.012
Minimum age in population: 80.57073027599073
Maximum age in population: 84.61258356669855
Average age in population: 82.75194582608997
Median age in population: 82.79935341903105
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 31
Genome diversity (% unique Plush genomes):	 0.821
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 31
Syntactic diversity (% unique Push programs):	 0.821
Total error diversity:				 0.343
Error (vector) diversity:			 0.356
Behavioral diversity:				 0.356
--- Run Statistics ---
Number of program evaluations used so far: 58000
Number of point (instruction) evaluations so far: 67873114
--- Timings ---
Current time: 1529615173609 milliseconds
Total Time:         190.3 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        70.4 seconds, 37.0%
Fitness Testing:     96.2 seconds, 50.6%
Report:              23.6 seconds, 12.4%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 57
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 58
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 58
;;******************************
;; -*- Number IO problem report - generation 58
Test total error for best: 63343.32270000001
Test mean error for best: 31.67166
;;------------------------------
Outputs of best individual on training cases:
Correct output: -54.078495011  | Program output: -98.078495011 
Correct output: 13.1534720339  | Program output: -5.8465279661 
Correct output: 41.2049141439  | Program output: 31.9889295968 
Correct output: -6.0487858971  | Program output: 7.9512141029  
Correct output: -75.9491370053 | Program output: -36.9491370053
Correct output: 49.8479113478  | Program output: -33.1520886522
Correct output: -43.0947106158 | Program output: -31.5094952176
Correct output: -6.035421      | Program output: -3.035421     
Correct output: -64.6496412859 | Program output: -17.6496412859
Correct output: -8.4475981317  | Program output: -96.4475981317
Correct output: -61.9056292771 | Program output: -85.9056292771
Correct output: -100.2670640218 | Program output: -16.2670640218
Correct output: 33.5793532538  | Program output: 31.9889295968 
Correct output: -71.5665679812 | Program output: -37.5665679812
Correct output: -150.2787840572 | Program output: -148.5982655339
Correct output: -33.4710147358 | Program output: -39.4710147358
Correct output: 12.2165113619  | Program output: 31.9889295968 
Correct output: 16.3988550752  | Program output: 22.3988550752 
Correct output: -103.483665155 | Program output: -80.483665155 
Correct output: -16.1113007238 | Program output: -70.1113007238
Correct output: 1.5190821923   | Program output: -24.4809178077
Correct output: 56.222608134   | Program output: 29.222608134  
Correct output: -100.5567747653 | Program output: -72.5567747653
Correct output: 20.8692780643  | Program output: 31.9889295968 
Correct output: 137.7657204956 | Program output: 27.7782598174 
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_rot} {:instruction integer_pop} {:instruction in1} {:instruction integer_mod} {:instruction integer_max} {:instruction integer_inc} {:instruction integer_sub} {:instruction float_min} {:instruction float_tan} {:instruction integer_dup} {:instruction in1} {:instruction float_min} {:instruction integer_sub} {:instruction float_min} {:instruction float_tan} {:instruction integer_dup} {:instruction in1} {:instruction float_min} {:instruction float_mult} {:instruction 23.58962050531167} {:instruction float_mult} {:instruction 23.58962050531167} {:instruction integer_min} {:instruction integer_mod} {:instruction integer_swap} {:instruction float_sin} {:instruction float_min} {:instruction float_tan} {:instruction integer_dup} {:instruction float_tan} {:instruction integer_dup} {:instruction in1} {:instruction float_min} {:instruction float_dup_times} {:instruction 23.58962050531167} {:instruction integer_min} {:instruction integer_mod} {:instruction float_add} {:instruction integer_dup} {:instruction integer_pop} {:instruction float_swap} {:instruction float_min} {:instruction float_tan} {:instruction integer_dup} {:instruction in1} {:instruction float_min} {:instruction float_mult} {:instruction 23.47472230998136} {:instruction float_stackdepth} {:instruction integer_dec} {:instruction float_add} {:instruction float_min} {:instruction tagged_372} {:instruction integer_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_rot} {:instruction float_add} {:instruction float_min} {:instruction float_min} {:instruction float_inc} {:instruction float_inc} {:instruction float_stackdepth} {:instruction integer_rot} {:instruction float_add} {:instruction float_min} {:instruction tagged_372} {:instruction integer_inc} {:instruction float_inc} {:instruction integer_add} {:instruction float_inc} {:instruction float_inc} {:instruction in1} {:instruction integer_sub} {:instruction -5} {:instruction integer_rot} {:instruction float_min} {:instruction print_float} {:instruction integer_rot} {:instruction integer_shove} {:instruction float_tan} {:instruction float_tan} {:instruction integer_flush} {:instruction integer_sub} {:instruction float_add})
Best program: (integer_rot integer_pop in1 integer_mod integer_max integer_inc integer_sub float_min float_tan integer_dup in1 float_min integer_sub float_min float_tan integer_dup in1 float_min float_mult 23.58962050531167 float_mult 23.58962050531167 integer_min integer_mod integer_swap float_sin float_min float_tan integer_dup float_tan integer_dup in1 float_min float_dup_times 23.58962050531167 integer_min integer_mod float_add integer_dup integer_pop float_swap float_min float_tan integer_dup in1 float_min float_mult 23.47472230998136 float_stackdepth integer_dec float_add float_min tagged_372 integer_inc float_inc float_inc float_inc float_inc integer_rot float_add float_min float_min float_inc float_inc float_stackdepth integer_rot float_add float_min tagged_372 integer_inc float_inc integer_add float_inc float_inc in1 integer_sub -5 integer_rot float_min print_float integer_rot integer_shove float_tan float_tan integer_flush integer_sub float_add)
Errors: [44.0 2 19.0 12 9.216 10 14.0 12 39.0 2 83.0 13 11.5852 9 3.0 1 47.0 2 88.0 2 24.0 2 84.0 2 1.5904 9 34.0 2 1.6805 11 6.0 1 19.7724 12 6.0 2 23.0 2 54.0 2 26.0 13 27.0 2 28.0 3 11.1197 9 109.9875 11]
Total: 961.9517
Mean: 19.239035
Genome size: 87
Size: 88
Percent parens: 0.011
--- Population Statistics ---
Average total errors in population: 2220.870459300001
Median total errors in population: 995.6400000000001
Error averages by case: (94.83403820000002 2.716 65.01277409999999 12.076 53.97153169999972 9.214 58.2261267 12.12 89.43486139999999 2.707 130.4686849 13.181 112.0234812000005 11.571 48.98482250000001 1.745 93.47473679999999 2.691 136.11523989999998 2.719 76.55466739999999 2.74 128.07284420000002 2.722 49.90030200000029 9.474 84.8324169 2.703 70.12427979999977 9.077 58.413800099999996 1.759 64.53202129999985 9.914 49.51209790000002 3.158 75.35781200000001 2.739 104.03218909999997 2.75 74.26340009999998 13.112 71.59395020000001 3.461 80.1348314 3.73 60.44350520000008 9.469 138.38504430000003 4.623)
Error minima by case: (12.5253 1 8.6093 2 0.5069 2 0.6002 5 17.4293 1 15.2386 9 8.2844 8 1.0354 1 1.8896 2 3.4476 2 3.6093 1 17.7685 1 0.0757 2 22.4293 1 0.0701 3 0.0 0 2.1154 2 0.1834 1 1.2651 2 2.9151 1 1.6093 8 1.4476 2 11.6618 2 1.509 2 41.6609 2)
Average genome size in population (length): 80.798
Average program size in population (points): 81.798
Average percent parens in population: 0.012
Minimum age in population: 81.78140201352812
Maximum age in population: 85.98850447798885
Average age in population: 84.16704751048579
Median age in population: 84.19855817891617
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 20
Genome diversity (% unique Plush genomes):	 0.8
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 20
Syntactic diversity (% unique Push programs):	 0.8
Total error diversity:				 0.31
Error (vector) diversity:			 0.321
Behavioral diversity:				 0.324
--- Run Statistics ---
Number of program evaluations used so far: 59000
Number of point (instruction) evaluations so far: 69893439
--- Timings ---
Current time: 1529615177576 milliseconds
Total Time:         194.1 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        71.5 seconds, 36.8%
Fitness Testing:     98.5 seconds, 50.7%
Report:              24.0 seconds, 12.4%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 58
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 59
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 59
;;******************************
;; -*- Number IO problem report - generation 59
Test total error for best: 63551.49640000001
Test mean error for best: 31.77575
;;------------------------------
Outputs of best individual on training cases:
Correct output: -54.078495011  | Program output: -98.078495011 
Correct output: 13.1534720339  | Program output: -5.8465279661 
Correct output: 41.2049141439  | Program output: 30.9889295968 
Correct output: -6.0487858971  | Program output: 7.9512141029  
Correct output: -75.9491370053 | Program output: -36.9491370053
Correct output: 49.8479113478  | Program output: -33.1520886522
Correct output: -43.0947106158 | Program output: -32.5094952176
Correct output: -6.035421      | Program output: -3.035421     
Correct output: -64.6496412859 | Program output: -17.6496412859
Correct output: -8.4475981317  | Program output: -96.4475981317
Correct output: -61.9056292771 | Program output: -85.9056292771
Correct output: -100.2670640218 | Program output: -16.2670640218
Correct output: 33.5793532538  | Program output: 30.9889295968 
Correct output: -71.5665679812 | Program output: -37.5665679812
Correct output: -150.2787840572 | Program output: -149.5982655339
Correct output: -33.4710147358 | Program output: -39.4710147358
Correct output: 12.2165113619  | Program output: 30.9889295968 
Correct output: 16.3988550752  | Program output: 22.3988550752 
Correct output: -103.483665155 | Program output: -80.483665155 
Correct output: -16.1113007238 | Program output: -70.1113007238
Correct output: 1.5190821923   | Program output: -24.4809178077
Correct output: 56.222608134   | Program output: 29.222608134  
Correct output: -100.5567747653 | Program output: -72.5567747653
Correct output: 20.8692780643  | Program output: 30.9889295968 
Correct output: 137.7657204956 | Program output: 26.7782598174 
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_rot} {:instruction integer_pop} {:instruction in1} {:instruction integer_mod} {:instruction integer_max} {:instruction integer_inc} {:instruction integer_sub} {:instruction float_min} {:instruction float_tan} {:instruction integer_dup} {:instruction in1} {:instruction float_min} {:instruction integer_sub} {:instruction float_min} {:instruction float_tan} {:instruction integer_dup} {:instruction in1} {:instruction float_min} {:instruction float_mult} {:instruction 23.58962050531167} {:instruction float_mult} {:instruction 23.58962050531167} {:instruction integer_min} {:instruction integer_mod} {:instruction integer_swap} {:instruction float_sin} {:instruction float_min} {:instruction float_tan} {:instruction integer_dup} {:instruction float_tan} {:instruction integer_dup} {:instruction in1} {:instruction float_min} {:instruction float_dup_times} {:instruction 23.58962050531167} {:instruction integer_min} {:instruction integer_mod} {:instruction float_add} {:instruction integer_dup} {:instruction integer_pop} {:instruction float_swap} {:instruction float_min} {:instruction float_tan} {:instruction integer_dup} {:instruction in1} {:instruction float_min} {:instruction float_mult} {:instruction 23.47472230998136} {:instruction float_stackdepth} {:instruction integer_dec} {:instruction float_add} {:instruction float_min} {:instruction tagged_372} {:instruction integer_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_flush} {:instruction integer_rot} {:instruction float_add} {:instruction float_min} {:instruction float_min} {:instruction float_inc} {:instruction float_inc} {:instruction float_stackdepth} {:instruction integer_rot} {:instruction float_add} {:instruction float_min} {:instruction tagged_372} {:instruction integer_inc} {:instruction float_inc} {:instruction integer_add} {:instruction float_inc} {:instruction float_inc} {:instruction in1} {:instruction integer_sub} {:instruction -5} {:instruction integer_rot} {:instruction float_min} {:instruction print_float} {:instruction integer_rot} {:instruction integer_shove} {:instruction float_tan} {:instruction float_tan} {:instruction integer_flush} {:instruction integer_sub} {:instruction float_add})
Best program: (integer_rot integer_pop in1 integer_mod integer_max integer_inc integer_sub float_min float_tan integer_dup in1 float_min integer_sub float_min float_tan integer_dup in1 float_min float_mult 23.58962050531167 float_mult 23.58962050531167 integer_min integer_mod integer_swap float_sin float_min float_tan integer_dup float_tan integer_dup in1 float_min float_dup_times 23.58962050531167 integer_min integer_mod float_add integer_dup integer_pop float_swap float_min float_tan integer_dup in1 float_min float_mult 23.47472230998136 float_stackdepth integer_dec float_add float_min tagged_372 integer_inc float_inc float_inc float_inc integer_flush integer_rot float_add float_min float_min float_inc float_inc float_stackdepth integer_rot float_add float_min tagged_372 integer_inc float_inc integer_add float_inc float_inc in1 integer_sub -5 integer_rot float_min print_float integer_rot integer_shove float_tan float_tan integer_flush integer_sub float_add)
Errors: [44.0 2 19.0 12 10.216 11 14.0 12 39.0 2 83.0 13 10.5852 9 3.0 1 47.0 2 88.0 2 24.0 2 84.0 2 2.5904 9 34.0 2 0.6805 11 6.0 1 18.7724 12 6.0 2 23.0 2 54.0 2 26.0 13 27.0 2 28.0 3 10.1197 8 110.9875 12]
Total: 961.9517
Mean: 19.239035
Genome size: 87
Size: 88
Percent parens: 0.011
--- Population Statistics ---
Average total errors in population: 2222.8862772000025
Median total errors in population: 994.8922
Error averages by case: (93.02614760000002 2.745 66.27297999999998 12.066 57.10613239999983 9.157 60.148821 12.11 87.3294994 2.74 128.02558150000002 13.127 113.8945549000004 11.562 51.779722199999995 1.728 94.35870569999999 2.742 133.3002111 2.74 74.2264575 2.775 128.7829704 2.791 53.641975400000184 9.57 82.4029722 2.759 67.26411569999966 8.837 55.935462099999995 1.78 66.41919510000008 10.013 52.219549500000014 3.088 73.0496074 2.782 102.0637229 2.782 73.64192449999999 13.053 74.03765110000002 3.539 78.55026809999998 3.763 61.269273499999926 9.636 141.12777600000015 5.126)
Error minima by case: (10.3907 1 6.887 2 0.5848 2 0.7966 7 6.0509 1 2.9869 9 5.9303 8 0.4265 1 31.5253 1 2.0131 2 4.4747 1 11.1582 1 0.0474 1 0.4334 1 0.1849 3 0.0 0 2.2221 1 0.8166 1 7.5253 2 11.1113 1 2.4747 8 21.0 2 12.5253 2 0.008 2 26.922 2)
Average genome size in population (length): 80.798
Average program size in population (points): 81.798
Average percent parens in population: 0.012
Minimum age in population: 83.40109194563794
Maximum age in population: 87.68497834561714
Average age in population: 85.64039212345492
Median age in population: 85.67773810408956
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 17
Genome diversity (% unique Plush genomes):	 0.824
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 17
Syntactic diversity (% unique Push programs):	 0.824
Total error diversity:				 0.328
Error (vector) diversity:			 0.34
Behavioral diversity:				 0.34
--- Run Statistics ---
Number of program evaluations used so far: 60000
Number of point (instruction) evaluations so far: 71913764
--- Timings ---
Current time: 1529615181705 milliseconds
Total Time:         198.4 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        72.8 seconds, 36.7%
Fitness Testing:    100.8 seconds, 50.8%
Report:              24.7 seconds, 12.4%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 59
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 60
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 60
;;******************************
;; -*- Number IO problem report - generation 60
Test total error for best: 48218.10029999999
Test mean error for best: 24.10905
;;------------------------------
Outputs of best individual on training cases:
Correct output: -54.078495011  | Program output: -98.078495011 
Correct output: 13.1534720339  | Program output: -5.8465279661 
Correct output: 41.2049141439  | Program output: 23.2187181458 
Correct output: -6.0487858971  | Program output: 1.9512141029  
Correct output: -75.9491370053 | Program output: -67.9491370053
Correct output: 49.8479113478  | Program output: -33.1520886522
Correct output: -43.0947106158 | Program output: -58.2106748441
Correct output: -6.035421      | Program output: -3.035421     
Correct output: -64.6496412859 | Program output: -56.6496412859
Correct output: -8.4475981317  | Program output: -96.4475981317
Correct output: -61.9056292771 | Program output: -85.9056292771
Correct output: -100.2670640218 | Program output: -92.2670640218
Correct output: 33.5793532538  | Program output: 18.2706583329 
Correct output: -71.5665679812 | Program output: -63.5665679812
Correct output: -150.2787840572 | Program output: -224.5898206922
Correct output: -33.4710147358 | Program output: -39.4710147358
Correct output: 12.2165113619  | Program output: -30.5963446213
Correct output: 16.3988550752  | Program output: 22.3988550752 
Correct output: -103.483665155 | Program output: -95.483665155 
Correct output: -16.1113007238 | Program output: -70.1113007238
Correct output: 1.5190821923   | Program output: -24.4809178077
Correct output: 56.222608134   | Program output: 29.222608134  
Correct output: -100.5567747653 | Program output: -92.5567747653
Correct output: 20.8692780643  | Program output: -42.948125949 
Correct output: 137.7657204956 | Program output: 43.7657204956 
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_rot} {:instruction integer_pop} {:instruction in1} {:instruction integer_mod} {:instruction float_dec} {:instruction integer_pop} {:instruction in1} {:instruction integer_mod} {:instruction in2} {:instruction integer_inc} {:instruction integer_sub} {:instruction float_min} {:instruction float_tan} {:instruction integer_dup} {:instruction in1} {:instruction float_min} {:instruction float_mult} {:instruction 23.58962050531167} {:instruction float_mult} {:instruction 22.143160443179823} {:instruction integer_swap} {:instruction float_swap} {:instruction float_min} {:instruction float_tan} {:instruction integer_dup} {:instruction float_tan} {:instruction integer_dup} {:instruction in1} {:instruction float_min} {:instruction 23.58962050531167} {:instruction integer_min} {:instruction integer_mod} {:instruction float_add} {:instruction integer_dup} {:instruction integer_pop} {:instruction float_swap} {:instruction float_min} {:instruction float_tan} {:instruction integer_dup} {:instruction integer_dec} {:instruction integer_sub} {:instruction float_mult} {:instruction 25.483167151686477} {:instruction float_add} {:instruction float_min} {:instruction tagged_372} {:instruction integer_inc} {:instruction float_inc} {:instruction integer_min} {:instruction integer_mod} {:instruction in1} {:instruction integer_sub} {:instruction float_min} {:instruction tagged_372} {:instruction float_frominteger} {:instruction float_inc} {:instruction integer_min} {:instruction float_inc} {:instruction float_stackdepth} {:instruction integer_mod} {:instruction float_add} {:instruction float_min} {:instruction tagged_372} {:instruction integer_inc} {:instruction float_inc} {:instruction integer_add} {:instruction float_inc} {:instruction float_inc} {:instruction integer_add} {:instruction float_inc} {:instruction float_inc} {:instruction in1} {:instruction integer_sub} {:instruction -5} {:instruction integer_rot} {:instruction float_min} {:instruction print_float} {:instruction integer_rot} {:instruction integer_shove} {:instruction float_tan} {:instruction float_tan} {:instruction in2} {:instruction integer_sub} {:instruction float_add})
Best program: (integer_rot integer_pop in1 integer_mod float_dec integer_pop in1 integer_mod in2 integer_inc integer_sub float_min float_tan integer_dup in1 float_min float_mult 23.58962050531167 float_mult 22.143160443179823 integer_swap float_swap float_min float_tan integer_dup float_tan integer_dup in1 float_min 23.58962050531167 integer_min integer_mod float_add integer_dup integer_pop float_swap float_min float_tan integer_dup integer_dec integer_sub float_mult 25.483167151686477 float_add float_min tagged_372 integer_inc float_inc integer_min integer_mod in1 integer_sub float_min tagged_372 float_frominteger float_inc integer_min float_inc float_stackdepth integer_mod float_add float_min tagged_372 integer_inc float_inc integer_add float_inc float_inc integer_add float_inc float_inc in1 integer_sub -5 integer_rot float_min print_float integer_rot integer_shove float_tan float_tan in2 integer_sub float_add)
Errors: [44.0 2 19.0 12 17.9862 8 8.0 12 8.0 2 83.0 13 15.116 11 3.0 1 8.0 2 88.0 2 24.0 2 8.0 3 15.3087 10 8.0 2 74.311 10 6.0 1 42.8129 11 6.0 2 8.0 3 54.0 2 26.0 13 27.0 2 8.0 3 63.8174 12 94.0 2]
Total: 902.3522
Mean: 18.047045
Genome size: 84
Size: 85
Percent parens: 0.012
--- Population Statistics ---
Average total errors in population: 2481.9948757000016
Median total errors in population: 994.8922
Error averages by case: (104.32990059999999 2.918 76.92289249999999 12.085 68.08321980000011 9.187 67.90286289999999 12.069 96.89413880000004 2.895 138.454609 13.179 113.7200660000005 11.34 61.4888071 1.966 103.25278 2.919 144.88234770000003 2.939 85.71728560000001 2.949 137.68786350000002 2.98 64.93799310000013 9.362 92.27158270000002 2.941 80.55469639999991 8.807 67.51201009999997 2.014 77.05579899999991 9.969 61.82244030000001 3.423 83.9376229 2.945 112.9322337 2.964 84.31320140000003 13.089 85.74516200000002 4.015 88.75278860000002 3.937 72.00583050000039 9.681 153.83274149999983 6.411)
Error minima by case: (12.5253 1 8.4866 2 0.7806 2 0.0043 6 6.0509 2 17.5033 9 1.4762 8 0.4265 1 8.0 1 8.1198 2 4.4747 1 8.0 1 0.0834 1 0.4334 1 0.2028 3 0.0 0 1.2221 2 0.8166 1 7.5253 2 15.6407 1 0.5627 8 0.4027 2 8.0 3 1.1742 2 9.0838 2)
Average genome size in population (length): 83.034
Average program size in population (points): 84.034
Average percent parens in population: 0.012
Minimum age in population: 84.40109194563794
Maximum age in population: 89.15981631451334
Average age in population: 87.02802919571997
Median age in population: 87.08361195564294
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 29
Genome diversity (% unique Plush genomes):	 0.828
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 29
Syntactic diversity (% unique Push programs):	 0.828
Total error diversity:				 0.385
Error (vector) diversity:			 0.391
Behavioral diversity:				 0.391
--- Run Statistics ---
Number of program evaluations used so far: 61000
Number of point (instruction) evaluations so far: 73989939
--- Timings ---
Current time: 1529615185476 milliseconds
Total Time:         202.1 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        74.0 seconds, 36.6%
Fitness Testing:    102.9 seconds, 50.9%
Report:              25.1 seconds, 12.4%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 60
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 61
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 61
;;******************************
;; -*- Number IO problem report - generation 61
Test total error for best: 47885.14209999999
Test mean error for best: 23.94257
;;------------------------------
Outputs of best individual on training cases:
Correct output: -54.078495011  | Program output: -98.078495011 
Correct output: 13.1534720339  | Program output: -5.8465279661 
Correct output: 41.2049141439  | Program output: 25.2187181458 
Correct output: -6.0487858971  | Program output: 3.9512141029  
Correct output: -75.9491370053 | Program output: -65.9491370053
Correct output: 49.8479113478  | Program output: -33.1520886522
Correct output: -43.0947106158 | Program output: -56.2106748441
Correct output: -6.035421      | Program output: -3.035421     
Correct output: -64.6496412859 | Program output: -54.6496412859
Correct output: -8.4475981317  | Program output: -96.4475981317
Correct output: -61.9056292771 | Program output: -85.9056292771
Correct output: -100.2670640218 | Program output: -90.2670640218
Correct output: 33.5793532538  | Program output: 20.2706583329 
Correct output: -71.5665679812 | Program output: -61.5665679812
Correct output: -150.2787840572 | Program output: -222.5898206922
Correct output: -33.4710147358 | Program output: -39.4710147358
Correct output: 12.2165113619  | Program output: -28.5963446213
Correct output: 16.3988550752  | Program output: 22.3988550752 
Correct output: -103.483665155 | Program output: -93.483665155 
Correct output: -16.1113007238 | Program output: -70.1113007238
Correct output: 1.5190821923   | Program output: -24.4809178077
Correct output: 56.222608134   | Program output: 29.222608134  
Correct output: -100.5567747653 | Program output: -90.5567747653
Correct output: 20.8692780643  | Program output: -40.948125949 
Correct output: 137.7657204956 | Program output: 43.7657204956 
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_rot} {:instruction integer_pop} {:instruction in1} {:instruction integer_mod} {:instruction float_dec} {:instruction integer_pop} {:instruction in1} {:instruction integer_mod} {:instruction in2} {:instruction integer_inc} {:instruction integer_sub} {:instruction float_min} {:instruction float_tan} {:instruction integer_dup} {:instruction in1} {:instruction float_min} {:instruction float_mult} {:instruction 23.58962050531167} {:instruction float_mult} {:instruction 22.143160443179823} {:instruction integer_swap} {:instruction float_swap} {:instruction float_min} {:instruction float_tan} {:instruction integer_dup} {:instruction float_tan} {:instruction integer_dup} {:instruction in1} {:instruction float_min} {:instruction 23.58962050531167} {:instruction integer_min} {:instruction integer_mod} {:instruction float_add} {:instruction integer_dup} {:instruction integer_pop} {:instruction float_swap} {:instruction float_min} {:instruction float_tan} {:instruction integer_dup} {:instruction integer_dec} {:instruction integer_sub} {:instruction float_mult} {:instruction 25.483167151686477} {:instruction float_add} {:instruction float_min} {:instruction tagged_372} {:instruction integer_inc} {:instruction float_inc} {:instruction integer_min} {:instruction integer_mod} {:instruction in1} {:instruction integer_sub} {:instruction float_min} {:instruction tagged_372} {:instruction float_frominteger} {:instruction float_inc} {:instruction integer_min} {:instruction float_inc} {:instruction float_stackdepth} {:instruction integer_mod} {:instruction float_add} {:instruction float_min} {:instruction tagged_372} {:instruction integer_inc} {:instruction float_inc} {:instruction integer_add} {:instruction float_inc} {:instruction float_inc} {:instruction integer_add} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction in1} {:instruction integer_sub} {:instruction -5} {:instruction integer_rot} {:instruction float_min} {:instruction print_float} {:instruction integer_rot} {:instruction integer_shove} {:instruction float_tan} {:instruction float_tan} {:instruction integer_flush} {:instruction integer_sub} {:instruction float_add})
Best program: (integer_rot integer_pop in1 integer_mod float_dec integer_pop in1 integer_mod in2 integer_inc integer_sub float_min float_tan integer_dup in1 float_min float_mult 23.58962050531167 float_mult 22.143160443179823 integer_swap float_swap float_min float_tan integer_dup float_tan integer_dup in1 float_min 23.58962050531167 integer_min integer_mod float_add integer_dup integer_pop float_swap float_min float_tan integer_dup integer_dec integer_sub float_mult 25.483167151686477 float_add float_min tagged_372 integer_inc float_inc integer_min integer_mod in1 integer_sub float_min tagged_372 float_frominteger float_inc integer_min float_inc float_stackdepth integer_mod float_add float_min tagged_372 integer_inc float_inc integer_add float_inc float_inc integer_add float_inc float_inc float_inc float_inc in1 integer_sub -5 integer_rot float_min print_float integer_rot integer_shove float_tan float_tan integer_flush integer_sub float_add)
Errors: [44.0 2 19.0 12 15.9862 8 10.0 12 10.0 1 83.0 13 13.116 11 3.0 1 10.0 1 88.0 2 24.0 2 10.0 2 13.3087 10 10.0 1 72.311 10 6.0 1 40.8129 10 6.0 2 10.0 2 54.0 2 26.0 13 27.0 2 10.0 2 61.8174 11 94.0 2]
Total: 896.3522
Mean: 17.927044
Genome size: 86
Size: 87
Percent parens: 0.011
--- Population Statistics ---
Average total errors in population: 2536.392283200002
Median total errors in population: 993.6400000000001
Error averages by case: (107.28505670000001 2.91 77.46841520000001 12.088 72.55842360000027 9.795 67.76459569999997 12.108 99.38789469999999 2.863 141.60506139999998 13.234 103.79910320000036 10.673 61.73733549999998 1.908 104.14910780000001 2.888 148.30770049999998 2.933 88.53875869999999 2.966 138.18523890000003 2.895 73.37990179999969 9.13 94.57429499999999 2.855 81.38853380000005 8.996 69.35965429999997 1.961 80.31399199999977 9.917 62.12750210000001 3.323 86.3422823 2.91 116.11164709999997 2.989 86.6848947 13.102 90.97709830000005 4.366 90.90938990000001 3.919 73.81461020000047 9.531 160.55278979999989 8.809)
Error minima by case: (9.5253 1 8.6093 2 0.0037 2 1.0488 6 5.0509 1 48.5253 9 5.5852 8 0.5735 1 8.0 1 3.4476 2 3.6093 1 8.0 1 0.0486 2 0.5666 1 0.1849 3 0.0 0 2.2221 2 0.8028 1 8.0 2 11.1113 1 1.6093 8 2.4027 2 8.0 2 1.0053 2 6.0 2)
Average genome size in population (length): 85.991
Average program size in population (points): 86.991
Average percent parens in population: 0.012
Minimum age in population: 85.87382003095483
Maximum age in population: 90.31521316607927
Average age in population: 88.50309308696377
Median age in population: 88.53850760820553
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 39
Genome diversity (% unique Plush genomes):	 0.828
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 39
Syntactic diversity (% unique Push programs):	 0.828
Total error diversity:				 0.386
Error (vector) diversity:			 0.406
Behavioral diversity:				 0.407
--- Run Statistics ---
Number of program evaluations used so far: 62000
Number of point (instruction) evaluations so far: 76139839
--- Timings ---
Current time: 1529615189886 milliseconds
Total Time:         206.4 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        75.3 seconds, 36.5%
Fitness Testing:    105.3 seconds, 51.0%
Report:              25.7 seconds, 12.4%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 61
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 62
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 62
;;******************************
;; -*- Number IO problem report - generation 62
Test total error for best: 46691.1366
Test mean error for best: 23.34557
;;------------------------------
Outputs of best individual on training cases:
Correct output: -54.078495011  | Program output: -98.078495011 
Correct output: 13.1534720339  | Program output: -5.8465279661 
Correct output: 41.2049141439  | Program output: 21.4831671517 
Correct output: -6.0487858971  | Program output: 1.9512141029  
Correct output: -75.9491370053 | Program output: -67.9491370053
Correct output: 49.8479113478  | Program output: -33.1520886522
Correct output: -43.0947106158 | Program output: -55.5168328483
Correct output: -6.035421      | Program output: -3.035421     
Correct output: -64.6496412859 | Program output: -56.6496412859
Correct output: -8.4475981317  | Program output: -96.4475981317
Correct output: -61.9056292771 | Program output: -85.9056292771
Correct output: -100.2670640218 | Program output: -92.2670640218
Correct output: 33.5793532538  | Program output: 20.4831671517 
Correct output: -71.5665679812 | Program output: -63.5665679812
Correct output: -150.2787840572 | Program output: -142.2787840572
Correct output: -33.4710147358 | Program output: -39.4710147358
Correct output: 12.2165113619  | Program output: -29.5168328483
Correct output: 16.3988550752  | Program output: 22.3988550752 
Correct output: -103.483665155 | Program output: -95.483665155 
Correct output: -16.1113007238 | Program output: -70.1113007238
Correct output: 1.5190821923   | Program output: -24.4809178077
Correct output: 56.222608134   | Program output: 29.222608134  
Correct output: -100.5567747653 | Program output: -92.5567747653
Correct output: 20.8692780643  | Program output: -37.5168328483
Correct output: 137.7657204956 | Program output: 35.4831671517 
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_rot} {:instruction integer_pop} {:instruction in1} {:instruction integer_mod} {:instruction float_dec} {:instruction integer_pop} {:instruction in1} {:instruction integer_mod} {:instruction in2} {:instruction integer_inc} {:instruction integer_sub} {:instruction float_min} {:instruction float_tan} {:instruction integer_dup} {:instruction in1} {:instruction float_min} {:instruction float_mult} {:instruction 23.58962050531167} {:instruction float_mult} {:instruction 22.143160443179823} {:instruction integer_swap} {:instruction float_swap} {:instruction float_min} {:instruction float_tan} {:instruction integer_dup} {:instruction float_tan} {:instruction integer_dup} {:instruction in1} {:instruction float_min} {:instruction 23.58962050531167} {:instruction integer_min} {:instruction integer_mod} {:instruction float_add} {:instruction integer_dup} {:instruction integer_pop} {:instruction float_flush} {:instruction float_min} {:instruction float_tan} {:instruction integer_dup} {:instruction integer_dec} {:instruction integer_sub} {:instruction float_mult} {:instruction 25.483167151686477} {:instruction float_add} {:instruction float_min} {:instruction tagged_372} {:instruction integer_inc} {:instruction float_inc} {:instruction integer_min} {:instruction integer_mod} {:instruction in1} {:instruction integer_sub} {:instruction float_min} {:instruction tagged_372} {:instruction float_frominteger} {:instruction float_inc} {:instruction integer_min} {:instruction float_inc} {:instruction float_stackdepth} {:instruction integer_mod} {:instruction float_add} {:instruction float_min} {:instruction tagged_372} {:instruction integer_inc} {:instruction float_inc} {:instruction integer_add} {:instruction float_inc} {:instruction float_inc} {:instruction integer_add} {:instruction float_inc} {:instruction float_inc} {:instruction in1} {:instruction integer_sub} {:instruction -5} {:instruction integer_rot} {:instruction float_min} {:instruction print_float} {:instruction integer_rot} {:instruction integer_shove} {:instruction float_tan} {:instruction float_tan} {:instruction in2} {:instruction integer_sub} {:instruction float_add})
Best program: (integer_rot integer_pop in1 integer_mod float_dec integer_pop in1 integer_mod in2 integer_inc integer_sub float_min float_tan integer_dup in1 float_min float_mult 23.58962050531167 float_mult 22.143160443179823 integer_swap float_swap float_min float_tan integer_dup float_tan integer_dup in1 float_min 23.58962050531167 integer_min integer_mod float_add integer_dup integer_pop float_flush float_min float_tan integer_dup integer_dec integer_sub float_mult 25.483167151686477 float_add float_min tagged_372 integer_inc float_inc integer_min integer_mod in1 integer_sub float_min tagged_372 float_frominteger float_inc integer_min float_inc float_stackdepth integer_mod float_add float_min tagged_372 integer_inc float_inc integer_add float_inc float_inc integer_add float_inc float_inc in1 integer_sub -5 integer_rot float_min print_float integer_rot integer_shove float_tan float_tan in2 integer_sub float_add)
Errors: [44.0 2 19.0 12 19.7217 10 8.0 12 8.0 2 83.0 13 12.4221 12 3.0 1 8.0 2 88.0 2 24.0 2 8.0 3 13.0962 11 8.0 2 8.0 2 6.0 1 41.7333 10 6.0 2 8.0 3 54.0 2 26.0 13 27.0 2 8.0 3 58.3861 11 102.2826 12]
Total: 838.642
Mean: 16.77284
Genome size: 84
Size: 85
Percent parens: 0.012
--- Population Statistics ---
Average total errors in population: 2226.4682159999998
Median total errors in population: 984.6288999999999
Error averages by case: (94.73801339999999 2.888 64.74092839999999 12.025 61.06870680000041 10.139 56.39483979999998 12.003 86.22311380000004 2.83 128.48135539999998 13.124 80.87903170000031 10.155 48.31482529999999 1.924 92.10082210000003 2.9 135.6552245 2.893 76.18776710000002 2.912 126.99606850000004 2.913 61.60946329999997 8.308 81.58960790000003 2.851 69.15630310000004 8.991 56.17537299999999 1.947 68.54592349999987 9.956 50.864964500000006 3.256 73.18913710000001 2.921 104.53376619999999 2.941 73.89012019999998 12.998 76.94911730000011 4.818 78.73646240000002 3.903 65.43494030000063 9.306 154.7393404 10.371)
Error minima by case: (12.5253 2 5.6282 2 0.4236 2 0.3998 1 4.0 1 17.5033 9 5.5852 8 0.3865 1 4.0 1 8.0876 2 3.4747 2 4.0 1 0.0682 1 1.4334 1 0.2028 2 0.0 0 0.2384 2 1.1919 2 0.5342 2 15.6999 2 0.9124 8 0.1451 2 4.0 2 1.4306 2 16.2567 2)
Average genome size in population (length): 86.664
Average program size in population (points): 87.664
Average percent parens in population: 0.011
Minimum age in population: 86.87382003095483
Maximum age in population: 91.74451376248956
Average age in population: 89.92570027982002
Median age in population: 89.93052821369561
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 28
Genome diversity (% unique Plush genomes):	 0.814
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 28
Syntactic diversity (% unique Push programs):	 0.814
Total error diversity:				 0.374
Error (vector) diversity:			 0.388
Behavioral diversity:				 0.389
--- Run Statistics ---
Number of program evaluations used so far: 63000
Number of point (instruction) evaluations so far: 78306689
--- Timings ---
Current time: 1529615193800 milliseconds
Total Time:         210.4 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        76.5 seconds, 36.4%
Fitness Testing:    107.4 seconds, 51.0%
Report:              26.4 seconds, 12.5%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 62
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 63
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 63
;;******************************
;; -*- Number IO problem report - generation 63
Test total error for best: 37199.74930000002
Test mean error for best: 18.59987
;;------------------------------
Outputs of best individual on training cases:
Correct output: -54.078495011  | Program output: -90.078495011 
Correct output: 13.1534720339  | Program output: 2.1534720339  
Correct output: 41.2049141439  | Program output: 44.9202463267 
Correct output: -6.0487858971  | Program output: 1.9512141029  
Correct output: -75.9491370053 | Program output: -67.9491370053
Correct output: 49.8479113478  | Program output: -25.1520886522
Correct output: -43.0947106158 | Program output: -35.0947106158
Correct output: -6.035421      | Program output: 1.964579      
Correct output: -64.6496412859 | Program output: -56.6496412859
Correct output: -8.4475981317  | Program output: -88.4475981317
Correct output: -61.9056292771 | Program output: -77.9056292771
Correct output: -100.2670640218 | Program output: -92.2670640218
Correct output: 33.5793532538  | Program output: 41.5793532538 
Correct output: -71.5665679812 | Program output: -63.5665679812
Correct output: -150.2787840572 | Program output: -142.2787840572
Correct output: -33.4710147358 | Program output: -31.4710147358
Correct output: 12.2165113619  | Program output: -5.544567096  
Correct output: 16.3988550752  | Program output: 24.3988550752 
Correct output: -103.483665155 | Program output: -95.483665155 
Correct output: -16.1113007238 | Program output: -62.1113007238
Correct output: 1.5190821923   | Program output: -16.4809178077
Correct output: 56.222608134   | Program output: 37.222608134  
Correct output: -100.5567747653 | Program output: -92.5567747653
Correct output: 20.8692780643  | Program output: -3.212744344  
Correct output: 137.7657204956 | Program output: 51.7657204956 
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_rot} {:instruction integer_pop} {:instruction in1} {:instruction integer_mod} {:instruction float_dec} {:instruction integer_pop} {:instruction in1} {:instruction integer_mod} {:instruction in2} {:instruction integer_inc} {:instruction integer_sub} {:instruction float_min} {:instruction float_tan} {:instruction integer_dup} {:instruction in1} {:instruction float_min} {:instruction float_dec} {:instruction 23.58962050531167} {:instruction float_mult} {:instruction 22.143160443179823} {:instruction integer_swap} {:instruction float_swap} {:instruction float_min} {:instruction float_tan} {:instruction integer_dup} {:instruction float_tan} {:instruction integer_dup} {:instruction in1} {:instruction float_min} {:instruction 23.58962050531167} {:instruction integer_min} {:instruction integer_mod} {:instruction float_add} {:instruction integer_dup} {:instruction integer_pop} {:instruction float_swap} {:instruction float_min} {:instruction 69} {:instruction integer_dup} {:instruction integer_dec} {:instruction integer_sub} {:instruction float_dup_times} {:instruction 25.483167151686477} {:instruction float_add} {:instruction float_min} {:instruction tagged_372} {:instruction integer_inc} {:instruction float_inc} {:instruction integer_min} {:instruction integer_mod} {:instruction in1} {:instruction integer_sub} {:instruction float_min} {:instruction tagged_372} {:instruction float_frominteger} {:instruction float_inc} {:instruction integer_min} {:instruction float_inc} {:instruction float_stackdepth} {:instruction integer_mod} {:instruction float_add} {:instruction float_min} {:instruction tagged_372} {:instruction integer_inc} {:instruction float_inc} {:instruction integer_add} {:instruction float_inc} {:instruction float_inc} {:instruction integer_add} {:instruction float_inc} {:instruction float_inc} {:instruction integer_sub} {:instruction -5} {:instruction integer_rot} {:instruction float_min} {:instruction print_float} {:instruction integer_rot} {:instruction integer_shove} {:instruction float_tan} {:instruction float_tan} {:instruction integer_flush} {:instruction integer_sub} {:instruction float_add})
Best program: (integer_rot integer_pop in1 integer_mod float_dec integer_pop in1 integer_mod in2 integer_inc integer_sub float_min float_tan integer_dup in1 float_min float_dec 23.58962050531167 float_mult 22.143160443179823 integer_swap float_swap float_min float_tan integer_dup float_tan integer_dup in1 float_min 23.58962050531167 integer_min integer_mod float_add integer_dup integer_pop float_swap float_min 69 integer_dup integer_dec integer_sub float_dup_times 25.483167151686477 float_add float_min tagged_372 integer_inc float_inc integer_min integer_mod in1 integer_sub float_min tagged_372 float_frominteger float_inc integer_min float_inc float_stackdepth integer_mod float_add float_min tagged_372 integer_inc float_inc integer_add float_inc float_inc integer_add float_inc float_inc integer_sub -5 integer_rot float_min print_float integer_rot integer_shove float_tan float_tan integer_flush integer_sub float_add)
Errors: [36.0 2 11.0 2 3.7153 10 8.0 12 8.0 2 75.0 13 8.0 2 8.0 8 8.0 2 80.0 1 16.0 2 8.0 3 8.0 2 8.0 2 8.0 2 2.0 1 17.7611 11 8.0 2 8.0 3 46.0 2 18.0 12 19.0 2 8.0 3 24.082 9 86.0 3]
Total: 643.5584
Mean: 12.871168
Genome size: 83
Size: 84
Percent parens: 0.012
--- Population Statistics ---
Average total errors in population: 2424.407896499998
Median total errors in population: 981.2678999999998
Error averages by case: (102.20622299999998 2.942 71.83405660000001 12.068 70.72598740000039 10.323 64.57804189999995 11.931 94.35478430000005 2.897 136.03403699999996 13.094 88.06715710000026 10.219 57.05423979999999 2.023 98.17815710000004 3.004 143.2331873 2.991 84.0252659 3.036 130.32678150000004 3.061 65.91330170000012 7.625 89.66074260000003 2.927 81.58080929999998 8.625 66.61442659999997 2.102 77.4772085999998 10.286 60.09024479999999 3.478 82.44647590000002 3.058 110.74787429999995 3.049 80.80533770000007 12.989 84.14567880000027 5.789 86.77344470000003 3.962 74.14455590000051 9.39 162.15087669999974 10.37)
Error minima by case: (8.0643 1 4.4747 1 0.5613 1 0.0483 1 5.0 1 30.9357 8 2.5852 2 0.3865 1 5.0 1 3.4476 1 0.5253 1 5.0 1 0.0492 1 0.5666 1 0.2028 2 0.0 0 0.2137 1 0.3567 1 0.5342 2 1.9357 1 0.5253 8 19.0 2 5.0 2 0.1265 1 41.2343 2)
Average genome size in population (length): 86.619
Average program size in population (points): 87.619
Average percent parens in population: 0.011
Minimum age in population: 89.32946489120202
Maximum age in population: 93.4173617346797
Average age in population: 91.39025389630103
Median age in population: 91.43368084911542
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 13
Genome diversity (% unique Plush genomes):	 0.824
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 13
Syntactic diversity (% unique Push programs):	 0.824
Total error diversity:				 0.409
Error (vector) diversity:			 0.424
Behavioral diversity:				 0.424
--- Run Statistics ---
Number of program evaluations used so far: 64000
Number of point (instruction) evaluations so far: 80472364
--- Timings ---
Current time: 1529615198155 milliseconds
Total Time:         214.7 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        77.8 seconds, 36.2%
Fitness Testing:    109.8 seconds, 51.2%
Report:              26.9 seconds, 12.5%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 63
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 64
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 64
;;******************************
;; -*- Number IO problem report - generation 64
Test total error for best: 21545.760700000017
Test mean error for best: 10.77288
;;------------------------------
Outputs of best individual on training cases:
Correct output: -54.078495011  | Program output: -50.078495011 
Correct output: 13.1534720339  | Program output: 17.1534720339 
Correct output: 41.2049141439  | Program output: 19.2187181458 
Correct output: -6.0487858971  | Program output: -2.0487858971 
Correct output: -75.9491370053 | Program output: -71.9491370053
Correct output: 49.8479113478  | Program output: 53.8479113478 
Correct output: -43.0947106158 | Program output: -62.2106748441
Correct output: -6.035421      | Program output: -2.035421     
Correct output: -64.6496412859 | Program output: -60.6496412859
Correct output: -8.4475981317  | Program output: -4.4475981317 
Correct output: -61.9056292771 | Program output: -57.9056292771
Correct output: -100.2670640218 | Program output: -96.2670640218
Correct output: 33.5793532538  | Program output: 14.2706583329 
Correct output: -71.5665679812 | Program output: -67.5665679812
Correct output: -150.2787840572 | Program output: -228.5898206922
Correct output: -33.4710147358 | Program output: -29.4710147358
Correct output: 12.2165113619  | Program output: -34.5963446213
Correct output: 16.3988550752  | Program output: 20.3988550752 
Correct output: -103.483665155 | Program output: -99.483665155 
Correct output: -16.1113007238 | Program output: -12.1113007238
Correct output: 1.5190821923   | Program output: 5.5190821923  
Correct output: 56.222608134   | Program output: 55.4027476741 
Correct output: -100.5567747653 | Program output: -96.5567747653
Correct output: 20.8692780643  | Program output: -46.948125949 
Correct output: 137.7657204956 | Program output: 141.7657204956
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_rot} {:instruction integer_pop} {:instruction in1} {:instruction integer_mod} {:instruction float_dec} {:instruction integer_pop} {:instruction in1} {:instruction integer_mod} {:instruction in2} {:instruction integer_inc} {:instruction integer_sub} {:instruction float_min} {:instruction float_tan} {:instruction integer_dup} {:instruction in1} {:instruction float_min} {:instruction float_mult} {:instruction 23.58962050531167} {:instruction float_mult} {:instruction 22.143160443179823} {:instruction integer_swap} {:instruction float_swap} {:instruction float_min} {:instruction float_tan} {:instruction integer_dup} {:instruction float_tan} {:instruction integer_dup} {:instruction in1} {:instruction float_min} {:instruction 23.58962050531167} {:instruction integer_min} {:instruction integer_mod} {:instruction float_add} {:instruction integer_dup} {:instruction integer_pop} {:instruction float_swap} {:instruction float_min} {:instruction float_tan} {:instruction integer_dup} {:instruction integer_dec} {:instruction integer_sub} {:instruction float_dup_times} {:instruction 25.483167151686477} {:instruction float_add} {:instruction float_min} {:instruction tagged_372} {:instruction integer_inc} {:instruction float_inc} {:instruction integer_min} {:instruction integer_mod} {:instruction in1} {:instruction integer_sub} {:instruction float_min} {:instruction tagged_372} {:instruction float_frominteger} {:instruction float_inc} {:instruction integer_min} {:instruction float_inc} {:instruction float_stackdepth} {:instruction integer_mod} {:instruction float_add} {:instruction float_min} {:instruction tagged_372} {:instruction integer_inc} {:instruction float_mult} {:instruction integer_add} {:instruction float_min} {:instruction print_float} {:instruction float_dup_items} {:instruction integer_shove} {:instruction float_tan} {:instruction float_tan} {:instruction in2} {:instruction integer_sub} {:instruction float_add})
Best program: (integer_rot integer_pop in1 integer_mod float_dec integer_pop in1 integer_mod in2 integer_inc integer_sub float_min float_tan integer_dup in1 float_min float_mult 23.58962050531167 float_mult 22.143160443179823 integer_swap float_swap float_min float_tan integer_dup float_tan integer_dup in1 float_min 23.58962050531167 integer_min integer_mod float_add integer_dup integer_pop float_swap float_min float_tan integer_dup integer_dec integer_sub float_dup_times 25.483167151686477 float_add float_min tagged_372 integer_inc float_inc integer_min integer_mod in1 integer_sub float_min tagged_372 float_frominteger float_inc integer_min float_inc float_stackdepth integer_mod float_add float_min tagged_372 integer_inc float_mult integer_add float_min print_float float_dup_items integer_shove float_tan float_tan in2 integer_sub float_add)
Errors: [4.0 1 4.0 1 21.9862 8 4.0 1 4.0 1 4.0 2 19.116 11 4.0 1 4.0 1 4.0 1 4.0 2 4.0 3 19.3087 10 4.0 2 78.311 10 4.0 2 46.8129 11 4.0 2 4.0 3 4.0 1 4.0 1 0.8199 9 4.0 3 67.8174 12 4.0 2]
Total: 427.17210000000006
Mean: 8.543442
Genome size: 75
Size: 76
Percent parens: 0.013
--- Population Statistics ---
Average total errors in population: 2280.1595235999944
Median total errors in population: 963.33205
Error averages by case: (97.17633290000003 2.846 68.6038661 12.016 65.68294220000013 10.034 61.182742200000014 11.794 83.21706200000003 2.73 132.46576030000006 13.063 82.39486769999995 10.414 53.3002375 1.918 87.24336829999999 2.885 138.58825589999998 2.862 77.9739008 2.927 114.48541000000003 3.136 61.28653680000032 8.529 79.42358639999999 2.75 81.22369220000006 8.316 60.272581999999964 1.969 75.21437070000005 10.365 57.5361533 3.506 72.6143877 2.946 105.6588678 2.925 75.97336969999999 12.982 81.29165880000004 4.654 77.4923046 3.759 76.38230670000037 9.906 155.25296100000045 8.99)
Error minima by case: (4.0 1 4.0 1 0.0138 1 0.0488 1 3.0 1 4.0 2 3.0 1 0.3865 1 3.0 1 4.0 1 3.4747 1 3.0 1 0.057 1 2.4334 1 0.2028 1 0.0 0 0.1227 1 0.3272 1 0.5342 1 4.0 1 1.4747 1 0.8199 1 3.0 2 0.5847 1 4.0 2)
Average genome size in population (length): 86.467
Average program size in population (points): 87.467
Average percent parens in population: 0.011
Minimum age in population: 90.32946489120202
Maximum age in population: 94.68342465838107
Average age in population: 92.70580625420118
Median age in population: 92.72313389210737
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 23
Genome diversity (% unique Plush genomes):	 0.8
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 23
Syntactic diversity (% unique Push programs):	 0.8
Total error diversity:				 0.443
Error (vector) diversity:			 0.452
Behavioral diversity:				 0.453
--- Run Statistics ---
Number of program evaluations used so far: 65000
Number of point (instruction) evaluations so far: 82634414
--- Timings ---
Current time: 1529615202083 milliseconds
Total Time:         218.8 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        79.0 seconds, 36.1%
Fitness Testing:    112.0 seconds, 51.2%
Report:              27.6 seconds, 12.6%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 64
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 65
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 65
;;******************************
;; -*- Number IO problem report - generation 65
Test total error for best: 2117.0
Test mean error for best: 1.05850
;;------------------------------
Outputs of best individual on training cases:
Correct output: -54.078495011  | Program output: -53.078495011 
Correct output: 13.1534720339  | Program output: 14.1534720339 
Correct output: 41.2049141439  | Program output: 42.2049141439 
Correct output: -6.0487858971  | Program output: -5.0487858971 
Correct output: -75.9491370053 | Program output: -74.9491370053
Correct output: 49.8479113478  | Program output: 50.8479113478 
Correct output: -43.0947106158 | Program output: -42.0947106158
Correct output: -6.035421      | Program output: -5.035421     
Correct output: -64.6496412859 | Program output: -63.6496412859
Correct output: -8.4475981317  | Program output: -7.4475981317 
Correct output: -61.9056292771 | Program output: -60.9056292771
Correct output: -100.2670640218 | Program output: -99.2670640218
Correct output: 33.5793532538  | Program output: 34.5793532538 
Correct output: -71.5665679812 | Program output: -70.5665679812
Correct output: -150.2787840572 | Program output: -149.2787840572
Correct output: -33.4710147358 | Program output: -32.4710147358
Correct output: 12.2165113619  | Program output: 13.2165113619 
Correct output: 16.3988550752  | Program output: 17.3988550752 
Correct output: -103.483665155 | Program output: -102.483665155
Correct output: -16.1113007238 | Program output: -15.1113007238
Correct output: 1.5190821923   | Program output: 2.5190821923  
Correct output: 56.222608134   | Program output: 57.222608134  
Correct output: -100.5567747653 | Program output: -99.5567747653
Correct output: 20.8692780643  | Program output: 21.8692780643 
Correct output: 137.7657204956 | Program output: 138.7657204956
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_rot} {:instruction integer_pop} {:instruction in1} {:instruction integer_mod} {:instruction float_dec} {:instruction integer_pop} {:instruction in1} {:instruction integer_mod} {:instruction in2} {:instruction integer_inc} {:instruction integer_sub} {:instruction float_min} {:instruction float_tan} {:instruction integer_dup} {:instruction in1} {:instruction float_min} {:instruction float_mult} {:instruction 23.58962050531167} {:instruction float_mult} {:instruction 22.143160443179823} {:instruction integer_swap} {:instruction float_swap} {:instruction float_min} {:instruction float_tan} {:instruction integer_dup} {:instruction float_tan} {:instruction integer_dup} {:instruction in1} {:instruction float_min} {:instruction 23.58962050531167} {:instruction integer_min} {:instruction integer_mod} {:instruction integer_yankdup} {:instruction integer_dup} {:instruction integer_pop} {:instruction float_swap} {:instruction float_min} {:instruction float_tan} {:instruction integer_dup} {:instruction integer_dec} {:instruction integer_sub} {:instruction float_mult} {:instruction 25.483167151686477} {:instruction float_flush} {:instruction float_min} {:instruction tagged_372} {:instruction integer_inc} {:instruction integer_sub} {:instruction integer_min} {:instruction integer_mod} {:instruction in1} {:instruction integer_sub} {:instruction float_min} {:instruction tagged_372} {:instruction float_frominteger} {:instruction float_inc} {:instruction integer_min} {:instruction float_inc} {:instruction float_stackdepth} {:instruction integer_mod} {:instruction float_add} {:instruction float_min} {:instruction tagged_372} {:instruction integer_rot} {:instruction float_min} {:instruction print_float} {:instruction integer_rot} {:instruction float_mult} {:instruction float_tan} {:instruction float_tan} {:instruction float_tan} {:instruction integer_shove})
Best program: (integer_rot integer_pop in1 integer_mod float_dec integer_pop in1 integer_mod in2 integer_inc integer_sub float_min float_tan integer_dup in1 float_min float_mult 23.58962050531167 float_mult 22.143160443179823 integer_swap float_swap float_min float_tan integer_dup float_tan integer_dup in1 float_min 23.58962050531167 integer_min integer_mod integer_yankdup integer_dup integer_pop float_swap float_min float_tan integer_dup integer_dec integer_sub float_mult 25.483167151686477 float_flush float_min tagged_372 integer_inc integer_sub integer_min integer_mod in1 integer_sub float_min tagged_372 float_frominteger float_inc integer_min float_inc float_stackdepth integer_mod float_add float_min tagged_372 integer_rot float_min print_float integer_rot float_mult float_tan float_tan float_tan integer_shove)
Errors: [1.0 1 1.0 1 1.0 1 1.0 1 1.0 1 1.0 2 1.0 1 1.0 1 1.0 1 1.0 1 1.0 1 1.0 3 1.0 1 1.0 1 1.0 2 1.0 1 1.0 1 1.0 1 1.0 1 1.0 1 1.0 1 1.0 1 1.0 3 1.0 1 1.0 1]
Total: 56.0
Mean: 1.12
Genome size: 72
Size: 73
Percent parens: 0.014
--- Population Statistics ---
Average total errors in population: 2558.0488461999994
Median total errors in population: 949.3367
Error averages by case: (109.25318880000005 2.93 84.10979870000003 11.736 79.6538121999999 9.203 71.3777411 11.422 85.9451756 2.84 143.37371400000004 13.007 96.4864564999999 10.303 68.51041339999999 2.08 89.56617520000002 3.021 149.12490100000002 2.939 90.8157492 3.006 104.24855699999999 3.616 76.09486039999994 8.922 83.9171082 2.869 106.10062000000025 7.296 72.63341020000001 2.074 95.53134140000027 10.017 69.63516569999997 3.573 80.29774950000001 3.383 117.53868680000002 3.006 90.5342761 12.872 92.11691799999996 4.196 82.27758879999999 3.853 103.14539390000024 10.321 160.56104450000052 6.714)
Error minima by case: (1.0 1 1.0 1 0.1759 1 0.0488 1 1.0 1 1.0 2 1.0 1 0.3865 1 1.0 1 1.0 1 1.0 1 1.0 1 0.0118 1 0.4334 1 0.2028 1 0.0 0 0.2137 1 0.653 1 0.4658 1 1.0 1 0.4606 1 0.8199 1 1.0 1 0.1826 1 1.0 1)
Average genome size in population (length): 85.915
Average program size in population (points): 86.915
Average percent parens in population: 0.012
Minimum age in population: 92.07863147753127
Maximum age in population: 96.36622217237488
Average age in population: 94.09728947407812
Median age in population: 94.09737867662663
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 21
Genome diversity (% unique Plush genomes):	 0.825
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 21
Syntactic diversity (% unique Push programs):	 0.825
Total error diversity:				 0.461
Error (vector) diversity:			 0.477
Behavioral diversity:				 0.478
--- Run Statistics ---
Number of program evaluations used so far: 66000
Number of point (instruction) evaluations so far: 84782614
--- Timings ---
Current time: 1529615206273 milliseconds
Total Time:         222.9 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        80.3 seconds, 36.0%
Fitness Testing:    114.4 seconds, 51.3%
Report:              28.1 seconds, 12.6%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 65
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 66
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 66
;;******************************
;; -*- Number IO problem report - generation 66
Test total error for best: 2117.0
Test mean error for best: 1.05850
;;------------------------------
Outputs of best individual on training cases:
Correct output: -54.078495011  | Program output: -53.078495011 
Correct output: 13.1534720339  | Program output: 14.1534720339 
Correct output: 41.2049141439  | Program output: 42.2049141439 
Correct output: -6.0487858971  | Program output: -5.0487858971 
Correct output: -75.9491370053 | Program output: -74.9491370053
Correct output: 49.8479113478  | Program output: 50.8479113478 
Correct output: -43.0947106158 | Program output: -42.0947106158
Correct output: -6.035421      | Program output: -5.035421     
Correct output: -64.6496412859 | Program output: -63.6496412859
Correct output: -8.4475981317  | Program output: -7.4475981317 
Correct output: -61.9056292771 | Program output: -60.9056292771
Correct output: -100.2670640218 | Program output: -99.2670640218
Correct output: 33.5793532538  | Program output: 34.5793532538 
Correct output: -71.5665679812 | Program output: -70.5665679812
Correct output: -150.2787840572 | Program output: -149.2787840572
Correct output: -33.4710147358 | Program output: -32.4710147358
Correct output: 12.2165113619  | Program output: 13.2165113619 
Correct output: 16.3988550752  | Program output: 17.3988550752 
Correct output: -103.483665155 | Program output: -102.483665155
Correct output: -16.1113007238 | Program output: -15.1113007238
Correct output: 1.5190821923   | Program output: 2.5190821923  
Correct output: 56.222608134   | Program output: 57.222608134  
Correct output: -100.5567747653 | Program output: -99.5567747653
Correct output: 20.8692780643  | Program output: 21.8692780643 
Correct output: 137.7657204956 | Program output: 138.7657204956
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_rot} {:instruction integer_pop} {:instruction in1} {:instruction integer_mod} {:instruction float_dec} {:instruction integer_pop} {:instruction in1} {:instruction integer_mod} {:instruction in2} {:instruction integer_inc} {:instruction integer_sub} {:instruction float_min} {:instruction float_tan} {:instruction integer_dup} {:instruction in1} {:instruction float_min} {:instruction float_mult} {:instruction 23.58962050531167} {:instruction float_mult} {:instruction 22.143160443179823} {:instruction integer_swap} {:instruction float_swap} {:instruction float_min} {:instruction float_tan} {:instruction integer_dup} {:instruction float_tan} {:instruction integer_dup} {:instruction in1} {:instruction float_min} {:instruction 23.58962050531167} {:instruction integer_min} {:instruction integer_mod} {:instruction integer_yankdup} {:instruction integer_dup} {:instruction integer_pop} {:instruction float_swap} {:instruction float_min} {:instruction float_tan} {:instruction integer_dup} {:instruction integer_dec} {:instruction integer_sub} {:instruction float_mult} {:instruction 25.483167151686477} {:instruction float_flush} {:instruction float_min} {:instruction tagged_372} {:instruction integer_inc} {:instruction integer_sub} {:instruction integer_min} {:instruction integer_mod} {:instruction in1} {:instruction integer_sub} {:instruction float_min} {:instruction tagged_372} {:instruction float_frominteger} {:instruction float_inc} {:instruction integer_min} {:instruction float_inc} {:instruction float_stackdepth} {:instruction integer_mod} {:instruction float_add} {:instruction float_min} {:instruction tagged_372} {:instruction integer_rot} {:instruction float_min} {:instruction print_float} {:instruction integer_rot} {:instruction float_mult} {:instruction float_tan} {:instruction float_tan} {:instruction float_tan} {:instruction integer_shove})
Best program: (integer_rot integer_pop in1 integer_mod float_dec integer_pop in1 integer_mod in2 integer_inc integer_sub float_min float_tan integer_dup in1 float_min float_mult 23.58962050531167 float_mult 22.143160443179823 integer_swap float_swap float_min float_tan integer_dup float_tan integer_dup in1 float_min 23.58962050531167 integer_min integer_mod integer_yankdup integer_dup integer_pop float_swap float_min float_tan integer_dup integer_dec integer_sub float_mult 25.483167151686477 float_flush float_min tagged_372 integer_inc integer_sub integer_min integer_mod in1 integer_sub float_min tagged_372 float_frominteger float_inc integer_min float_inc float_stackdepth integer_mod float_add float_min tagged_372 integer_rot float_min print_float integer_rot float_mult float_tan float_tan float_tan integer_shove)
Errors: [1.0 1 1.0 1 1.0 1 1.0 1 1.0 1 1.0 2 1.0 1 1.0 1 1.0 1 1.0 1 1.0 1 1.0 3 1.0 1 1.0 1 1.0 2 1.0 1 1.0 1 1.0 1 1.0 1 1.0 1 1.0 1 1.0 1 1.0 3 1.0 1 1.0 1]
Total: 56.0
Mean: 1.12
Genome size: 72
Size: 73
Percent parens: 0.014
--- Population Statistics ---
Average total errors in population: 2453.8471557
Median total errors in population: 838.642
Error averages by case: (109.78805240000003 2.882 82.30347080000001 10.606 73.4383462999999 7.998 63.9215209 10.299 82.32911760000002 2.76 139.49158870000005 12.207 90.71031579999993 8.672 69.17599489999999 2.312 83.61729850000002 2.953 145.95922870000004 2.908 92.76874839999999 2.996 91.90174119999998 3.829 72.0954176 7.454 81.25867169999998 2.866 103.22983060000014 5.27 75.8296394 2.146 91.37385200000026 8.481 64.08917340000002 3.375 81.4473082 3.486 116.89138649999997 2.947 89.2563633 11.974 82.83126410000007 4.301 82.28270360000002 3.844 99.97451590000016 8.922 146.64660520000035 5.747)
Error minima by case: (1.0 1 0.1535 1 0.1759 1 0.0488 1 1.0 1 1.0 2 1.0 1 1.0 1 1.0 1 1.0 1 0.1432 1 1.0 1 0.0095 1 0.4334 1 0.2028 1 0.0 0 1.0 1 0.653 1 0.4109 1 1.0 1 0.7241 1 0.2634 1 1.0 1 0.1826 1 0.7174 1)
Average genome size in population (length): 85.098
Average program size in population (points): 86.098
Average percent parens in population: 0.012
Minimum age in population: 93.65545684023597
Maximum age in population: 97.7009561928843
Average age in population: 95.69970637688856
Median age in population: 95.74219845355343
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 18
Genome diversity (% unique Plush genomes):	 0.831
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 18
Syntactic diversity (% unique Push programs):	 0.831
Total error diversity:				 0.449
Error (vector) diversity:			 0.465
Behavioral diversity:				 0.465
--- Run Statistics ---
Number of program evaluations used so far: 67000
Number of point (instruction) evaluations so far: 86910689
--- Timings ---
Current time: 1529615210251 milliseconds
Total Time:         227.0 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        81.6 seconds, 35.9%
Fitness Testing:    116.6 seconds, 51.4%
Report:              28.7 seconds, 12.6%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 66
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 67
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 67
;;******************************
;; -*- Number IO problem report - generation 67
Test total error for best: 0.0
Test mean error for best: 0.00000
Test Case    0 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case    1 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case    2 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case    3 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case    4 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case    5 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case    6 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case    7 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case    8 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case    9 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   10 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   11 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   12 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   13 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   14 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   15 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   16 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   17 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   18 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   19 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   20 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   21 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   22 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   23 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   24 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   25 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   26 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   27 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   28 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   29 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   30 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   31 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   32 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   33 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   34 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   35 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   36 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   37 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   38 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   39 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   40 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   41 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   42 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   43 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   44 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   45 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   46 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   47 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   48 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   49 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   50 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   51 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   52 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   53 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   54 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   55 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   56 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   57 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   58 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   59 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   60 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   61 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   62 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   63 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   64 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   65 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   66 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   67 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   68 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   69 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   70 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   71 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   72 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   73 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   74 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   75 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   76 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   77 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   78 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   79 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   80 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   81 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   82 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   83 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   84 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   85 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   86 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   87 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   88 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   89 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   90 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   91 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   92 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   93 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   94 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   95 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   96 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   97 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   98 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   99 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  100 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  101 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  102 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  103 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  104 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  105 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  106 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  107 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  108 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  109 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  110 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  111 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  112 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  113 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  114 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  115 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  116 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  117 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  118 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  119 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  120 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  121 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  122 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  123 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  124 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  125 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  126 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  127 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  128 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  129 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  130 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  131 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  132 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  133 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  134 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  135 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  136 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  137 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  138 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  139 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  140 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  141 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  142 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  143 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  144 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  145 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  146 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  147 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  148 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  149 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  150 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  151 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  152 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  153 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  154 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  155 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  156 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  157 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  158 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  159 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  160 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  161 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  162 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  163 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  164 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  165 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  166 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  167 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  168 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  169 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  170 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  171 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  172 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  173 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  174 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  175 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  176 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  177 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  178 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  179 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  180 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  181 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  182 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  183 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  184 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  185 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  186 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  187 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  188 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  189 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  190 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  191 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  192 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  193 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  194 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  195 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  196 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  197 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  198 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  199 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  200 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  201 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  202 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  203 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  204 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  205 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  206 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  207 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  208 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  209 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  210 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  211 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  212 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  213 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  214 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  215 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  216 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  217 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  218 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  219 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  220 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  221 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  222 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  223 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  224 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  225 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  226 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  227 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  228 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  229 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  230 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  231 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  232 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  233 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  234 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  235 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  236 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  237 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  238 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  239 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  240 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  241 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  242 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  243 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  244 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  245 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  246 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  247 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  248 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  249 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  250 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  251 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  252 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  253 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  254 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  255 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  256 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  257 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  258 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  259 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  260 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  261 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  262 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  263 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  264 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  265 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  266 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  267 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  268 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  269 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  270 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  271 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  272 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  273 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  274 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  275 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  276 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  277 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  278 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  279 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  280 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  281 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  282 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  283 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  284 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  285 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  286 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  287 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  288 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  289 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  290 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  291 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  292 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  293 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  294 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  295 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  296 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  297 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  298 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  299 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  300 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  301 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  302 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  303 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  304 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  305 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  306 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  307 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  308 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  309 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  310 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  311 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  312 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  313 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  314 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  315 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  316 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  317 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  318 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  319 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  320 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  321 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  322 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  323 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  324 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  325 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  326 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  327 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  328 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  329 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  330 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  331 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  332 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  333 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  334 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  335 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  336 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  337 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  338 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  339 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  340 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  341 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  342 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  343 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  344 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  345 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  346 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  347 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  348 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  349 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  350 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  351 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  352 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  353 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  354 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  355 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  356 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  357 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  358 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  359 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  360 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  361 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  362 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  363 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  364 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  365 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  366 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  367 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  368 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  369 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  370 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  371 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  372 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  373 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  374 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  375 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  376 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  377 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  378 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  379 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  380 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  381 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  382 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  383 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  384 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  385 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  386 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  387 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  388 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  389 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  390 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  391 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  392 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  393 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  394 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  395 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  396 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  397 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  398 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  399 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  400 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  401 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  402 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  403 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  404 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  405 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  406 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  407 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  408 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  409 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  410 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  411 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  412 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  413 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  414 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  415 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  416 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  417 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  418 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  419 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  420 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  421 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  422 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  423 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  424 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  425 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  426 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  427 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  428 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  429 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  430 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  431 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  432 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  433 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  434 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  435 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  436 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  437 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  438 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  439 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  440 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  441 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  442 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  443 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  444 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  445 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  446 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  447 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  448 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  449 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  450 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  451 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  452 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  453 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  454 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  455 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  456 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  457 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  458 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  459 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  460 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  461 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  462 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  463 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  464 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  465 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  466 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  467 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  468 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  469 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  470 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  471 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  472 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  473 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  474 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  475 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  476 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  477 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  478 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  479 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  480 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  481 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  482 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  483 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  484 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  485 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  486 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  487 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  488 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  489 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  490 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  491 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  492 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  493 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  494 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  495 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  496 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  497 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  498 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  499 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  500 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  501 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  502 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  503 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  504 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  505 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  506 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  507 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  508 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  509 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  510 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  511 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  512 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  513 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  514 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  515 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  516 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  517 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  518 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  519 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  520 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  521 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  522 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  523 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  524 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  525 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  526 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  527 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  528 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  529 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  530 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  531 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  532 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  533 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  534 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  535 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  536 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  537 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  538 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  539 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  540 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  541 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  542 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  543 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  544 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  545 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  546 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  547 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  548 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  549 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  550 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  551 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  552 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  553 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  554 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  555 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  556 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  557 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  558 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  559 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  560 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  561 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  562 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  563 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  564 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  565 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  566 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  567 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  568 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  569 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  570 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  571 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  572 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  573 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  574 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  575 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  576 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  577 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  578 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  579 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  580 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  581 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  582 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  583 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  584 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  585 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  586 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  587 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  588 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  589 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  590 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  591 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  592 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  593 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  594 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  595 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  596 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  597 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  598 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  599 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  600 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  601 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  602 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  603 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  604 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  605 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  606 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  607 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  608 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  609 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  610 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  611 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  612 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  613 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  614 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  615 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  616 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  617 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  618 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  619 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  620 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  621 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  622 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  623 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  624 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  625 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  626 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  627 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  628 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  629 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  630 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  631 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  632 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  633 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  634 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  635 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  636 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  637 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  638 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  639 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  640 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  641 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  642 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  643 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  644 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  645 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  646 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  647 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  648 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  649 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  650 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  651 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  652 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  653 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  654 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  655 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  656 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  657 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  658 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  659 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  660 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  661 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  662 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  663 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  664 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  665 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  666 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  667 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  668 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  669 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  670 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  671 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  672 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  673 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  674 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  675 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  676 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  677 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  678 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  679 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  680 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  681 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  682 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  683 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  684 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  685 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  686 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  687 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  688 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  689 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  690 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  691 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  692 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  693 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  694 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  695 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  696 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  697 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  698 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  699 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  700 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  701 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  702 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  703 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  704 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  705 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  706 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  707 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  708 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  709 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  710 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  711 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  712 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  713 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  714 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  715 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  716 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  717 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  718 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  719 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  720 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  721 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  722 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  723 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  724 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  725 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  726 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  727 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  728 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  729 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  730 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  731 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  732 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  733 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  734 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  735 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  736 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  737 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  738 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  739 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  740 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  741 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  742 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  743 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  744 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  745 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  746 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  747 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  748 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  749 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  750 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  751 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  752 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  753 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  754 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  755 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  756 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  757 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  758 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  759 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  760 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  761 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  762 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  763 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  764 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  765 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  766 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  767 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  768 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  769 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  770 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  771 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  772 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  773 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  774 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  775 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  776 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  777 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  778 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  779 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  780 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  781 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  782 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  783 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  784 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  785 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  786 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  787 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  788 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  789 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  790 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  791 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  792 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  793 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  794 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  795 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  796 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  797 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  798 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  799 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  800 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  801 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  802 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  803 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  804 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  805 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  806 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  807 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  808 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  809 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  810 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  811 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  812 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  813 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  814 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  815 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  816 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  817 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  818 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  819 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  820 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  821 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  822 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  823 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  824 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  825 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  826 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  827 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  828 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  829 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  830 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  831 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  832 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  833 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  834 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  835 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  836 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  837 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  838 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  839 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  840 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  841 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  842 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  843 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  844 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  845 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  846 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  847 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  848 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  849 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  850 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  851 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  852 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  853 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  854 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  855 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  856 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  857 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  858 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  859 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  860 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  861 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  862 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  863 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  864 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  865 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  866 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  867 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  868 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  869 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  870 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  871 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  872 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  873 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  874 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  875 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  876 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  877 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  878 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  879 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  880 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  881 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  882 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  883 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  884 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  885 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  886 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  887 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  888 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  889 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  890 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  891 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  892 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  893 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  894 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  895 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  896 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  897 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  898 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  899 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  900 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  901 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  902 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  903 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  904 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  905 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  906 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  907 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  908 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  909 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  910 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  911 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  912 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  913 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  914 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  915 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  916 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  917 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  918 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  919 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  920 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  921 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  922 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  923 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  924 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  925 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  926 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  927 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  928 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  929 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  930 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  931 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  932 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  933 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  934 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  935 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  936 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  937 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  938 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  939 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  940 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  941 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  942 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  943 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  944 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  945 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  946 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  947 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  948 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  949 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  950 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  951 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  952 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  953 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  954 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  955 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  956 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  957 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  958 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  959 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  960 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  961 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  962 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  963 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  964 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  965 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  966 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  967 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  968 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  969 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  970 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  971 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  972 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  973 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  974 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  975 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  976 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  977 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  978 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  979 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  980 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  981 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  982 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  983 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  984 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  985 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  986 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  987 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  988 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  989 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  990 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  991 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  992 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  993 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  994 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  995 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  996 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  997 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  998 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  999 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
;;------------------------------
Outputs of best individual on training cases:
Correct output: -54.078495011  | Program output: -54.078495011 
Correct output: 13.1534720339  | Program output: 13.1534720339 
Correct output: 41.2049141439  | Program output: 41.2049141439 
Correct output: -6.0487858971  | Program output: -6.0487858971 
Correct output: -75.9491370053 | Program output: -75.9491370053
Correct output: 49.8479113478  | Program output: 49.8479113478 
Correct output: -43.0947106158 | Program output: -43.0947106158
Correct output: -6.035421      | Program output: -6.035421     
Correct output: -64.6496412859 | Program output: -64.6496412859
Correct output: -8.4475981317  | Program output: -8.4475981317 
Correct output: -61.9056292771 | Program output: -61.9056292771
Correct output: -100.2670640218 | Program output: -100.2670640218
Correct output: 33.5793532538  | Program output: 33.5793532538 
Correct output: -71.5665679812 | Program output: -71.5665679812
Correct output: -150.2787840572 | Program output: -150.2787840572
Correct output: -33.4710147358 | Program output: -33.4710147358
Correct output: 12.2165113619  | Program output: 12.2165113619 
Correct output: 16.3988550752  | Program output: 16.3988550752 
Correct output: -103.483665155 | Program output: -103.483665155
Correct output: -16.1113007238 | Program output: -16.1113007238
Correct output: 1.5190821923   | Program output: 1.5190821923  
Correct output: 56.222608134   | Program output: 56.222608134  
Correct output: -100.5567747653 | Program output: -100.5567747653
Correct output: 20.8692780643  | Program output: 20.8692780643 
Correct output: 137.7657204956 | Program output: 137.7657204956
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_rot} {:instruction integer_pop} {:instruction in1} {:instruction integer_mod} {:instruction float_dec} {:instruction integer_pop} {:instruction in1} {:instruction integer_mod} {:instruction in2} {:instruction integer_inc} {:instruction integer_sub} {:instruction float_min} {:instruction float_tan} {:instruction integer_dup} {:instruction in1} {:instruction float_min} {:instruction float_mult} {:instruction 23.58962050531167} {:instruction float_mult} {:instruction 22.143160443179823} {:instruction integer_swap} {:instruction float_swap} {:instruction float_min} {:instruction float_tan} {:instruction integer_dup} {:instruction float_tan} {:instruction integer_dup} {:instruction in1} {:instruction float_min} {:instruction 23.58962050531167} {:instruction integer_min} {:instruction integer_mod} {:instruction float_add} {:instruction integer_dup} {:instruction integer_pop} {:instruction float_flush} {:instruction float_min} {:instruction float_tan} {:instruction integer_dup} {:instruction integer_dec} {:instruction integer_sub} {:instruction float_mult} {:instruction in1} {:instruction integer_sub} {:instruction float_inc} {:instruction integer_min} {:instruction integer_mod} {:instruction in1} {:instruction integer_sub} {:instruction float_min} {:instruction tagged_372} {:instruction float_frominteger} {:instruction integer_mod} {:instruction float_add} {:instruction float_min} {:instruction tagged_372} {:instruction integer_rot} {:instruction float_min} {:instruction print_float} {:instruction integer_rot} {:instruction float_mult} {:instruction float_tan} {:instruction float_tan} {:instruction float_tan} {:instruction integer_shove})
Best program: (integer_rot integer_pop in1 integer_mod float_dec integer_pop in1 integer_mod in2 integer_inc integer_sub float_min float_tan integer_dup in1 float_min float_mult 23.58962050531167 float_mult 22.143160443179823 integer_swap float_swap float_min float_tan integer_dup float_tan integer_dup in1 float_min 23.58962050531167 integer_min integer_mod float_add integer_dup integer_pop float_flush float_min float_tan integer_dup integer_dec integer_sub float_mult in1 integer_sub float_inc integer_min integer_mod in1 integer_sub float_min tagged_372 float_frominteger integer_mod float_add float_min tagged_372 integer_rot float_min print_float integer_rot float_mult float_tan float_tan float_tan integer_shove)
Errors: [0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0]
Total: 0.0
Mean: 0.0
Genome size: 65
Size: 66
Percent parens: 0.015
--- Population Statistics ---
Average total errors in population: 2299.1889887000007
Median total errors in population: 669.0
Error averages by case: (99.36209000000002 2.803 72.33827950000001 8.292 73.28446329999993 6.346 66.34166360000002 8.418 83.0069829 2.769 115.97391229999997 9.763 89.35738079999986 7.486 64.1235932 2.993 82.02848820000003 2.842 125.24173399999998 2.901 86.82740189999997 2.998 91.13303209999997 3.902 71.17707069999996 6.202 81.76890150000001 3.015 105.3245400000002 4.89 72.17823770000001 2.424 88.46790600000023 6.923 61.94512230000002 3.412 83.83149739999998 3.582 103.82976249999999 2.879 77.41926349999997 9.24 75.26046790000015 5.488 84.85288950000002 3.924 94.77273770000009 7.086 123.3875702000002 5.376)
Error minima by case: (0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0)
Average genome size in population (length): 81.187
Average program size in population (points): 82.187
Average percent parens in population: 0.012
Minimum age in population: 94.83908928968499
Maximum age in population: 99.1908108229346
Average age in population: 97.24253626347077
Median age in population: 97.2872473476593
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 29
Genome diversity (% unique Plush genomes):	 0.833
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 29
Syntactic diversity (% unique Push programs):	 0.833
Total error diversity:				 0.44
Error (vector) diversity:			 0.443
Behavioral diversity:				 0.444
--- Run Statistics ---
Number of program evaluations used so far: 68000
Number of point (instruction) evaluations so far: 88941189
--- Timings ---
Current time: 1529615214267 milliseconds
Total Time:         230.8 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        82.8 seconds, 35.9%
Fitness Testing:    118.7 seconds, 51.4%
Report:              29.2 seconds, 12.6%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 67
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;


SUCCESS at generation 67
Successful program: (integer_rot integer_pop in1 integer_mod float_dec integer_pop in1 integer_mod in2 integer_inc integer_sub float_min float_tan integer_dup in1 float_min float_mult 23.58962050531167 float_mult 22.143160443179823 integer_swap float_swap float_min float_tan integer_dup float_tan integer_dup in1 float_min 23.58962050531167 integer_min integer_mod float_add integer_dup integer_pop float_flush float_min float_tan integer_dup integer_dec integer_sub float_mult in1 integer_sub float_inc integer_min integer_mod in1 integer_sub float_min tagged_372 float_frominteger integer_mod float_add float_min tagged_372 integer_rot float_min print_float integer_rot float_mult float_tan float_tan float_tan integer_shove)
Errors: [0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0]
Total error: 0.0
History: null
Size: 66


Auto-simplifying with starting size: 66
step: 0
program: (integer_rot integer_pop in1 integer_mod float_dec integer_pop in1 integer_mod in2 integer_inc integer_sub float_min float_tan integer_dup in1 float_min float_mult 23.58962050531167 float_mult 22.143160443179823 integer_swap float_swap float_min float_tan integer_dup float_tan integer_dup in1 float_min 23.58962050531167 integer_min integer_mod float_add integer_dup integer_pop float_flush float_min float_tan integer_dup integer_dec integer_sub float_mult in1 integer_sub float_inc integer_min integer_mod in1 integer_sub float_min tagged_372 float_frominteger integer_mod float_add float_min tagged_372 integer_rot float_min print_float integer_rot float_mult float_tan float_tan float_tan integer_shove)
errors: [0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0]
total: 0.0
size: 66

step: 500
program: (in2 in1 float_frominteger float_add print_float)
errors: (0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0)
total: 0.0
size: 6

step: 1000
program: (in2 in1 float_frominteger float_add print_float)
errors: (0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0)
total: 0.0
size: 6

step: 1500
program: (in2 in1 float_frominteger float_add print_float)
errors: (0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0)
total: 0.0
size: 6

step: 2000
program: (in2 in1 float_frominteger float_add print_float)
errors: (0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0)
total: 0.0
size: 6

step: 2500
program: (in2 in1 float_frominteger float_add print_float)
errors: (0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0)
total: 0.0
size: 6

step: 3000
program: (in2 in1 float_frominteger float_add print_float)
errors: (0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0)
total: 0.0
size: 6

step: 3500
program: (in2 in1 float_frominteger float_add print_float)
errors: (0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0)
total: 0.0
size: 6

step: 4000
program: (in2 in1 float_frominteger float_add print_float)
errors: (0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0)
total: 0.0
size: 6

step: 4500
program: (in2 in1 float_frominteger float_add print_float)
errors: (0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0)
total: 0.0
size: 6

step: 5000
program: (in2 in1 float_frominteger float_add print_float)
errors: (0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0)
total: 0.0
size: 6

;;******************************
;; Problem-Specific Report of Simplified Solution
;;******************************
;; -*- Number IO problem report - generation 67
Test total error for best: 0.0
Test mean error for best: 0.00000
Test Case    0 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case    1 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case    2 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case    3 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case    4 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case    5 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case    6 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case    7 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case    8 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case    9 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   10 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   11 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   12 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   13 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   14 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   15 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   16 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   17 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   18 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   19 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   20 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   21 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   22 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   23 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   24 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   25 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   26 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   27 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   28 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   29 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   30 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   31 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   32 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   33 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   34 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   35 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   36 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   37 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   38 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   39 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   40 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   41 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   42 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   43 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   44 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   45 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   46 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   47 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   48 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   49 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   50 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   51 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   52 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   53 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   54 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   55 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   56 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   57 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   58 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   59 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   60 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   61 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   62 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   63 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   64 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   65 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   66 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   67 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   68 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   69 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   70 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   71 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   72 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   73 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   74 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   75 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   76 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   77 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   78 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   79 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   80 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   81 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   82 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   83 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   84 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   85 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   86 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   87 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   88 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   89 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   90 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   91 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   92 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   93 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   94 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   95 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   96 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   97 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   98 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   99 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  100 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  101 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  102 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  103 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  104 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  105 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  106 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  107 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  108 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  109 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  110 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  111 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  112 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  113 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  114 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  115 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  116 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  117 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  118 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  119 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  120 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  121 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  122 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  123 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  124 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  125 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  126 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  127 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  128 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  129 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  130 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  131 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  132 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  133 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  134 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  135 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  136 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  137 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  138 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  139 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  140 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  141 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  142 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  143 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  144 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  145 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  146 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  147 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  148 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  149 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  150 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  151 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  152 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  153 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  154 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  155 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  156 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  157 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  158 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  159 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  160 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  161 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  162 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  163 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  164 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  165 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  166 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  167 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  168 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  169 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  170 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  171 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  172 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  173 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  174 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  175 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  176 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  177 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  178 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  179 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  180 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  181 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  182 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  183 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  184 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  185 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  186 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  187 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  188 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  189 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  190 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  191 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  192 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  193 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  194 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  195 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  196 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  197 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  198 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  199 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  200 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  201 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  202 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  203 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  204 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  205 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  206 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  207 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  208 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  209 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  210 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  211 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  212 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  213 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  214 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  215 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  216 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  217 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  218 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  219 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  220 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  221 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  222 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  223 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  224 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  225 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  226 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  227 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  228 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  229 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  230 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  231 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  232 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  233 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  234 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  235 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  236 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  237 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  238 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  239 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  240 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  241 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  242 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  243 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  244 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  245 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  246 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  247 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  248 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  249 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  250 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  251 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  252 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  253 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  254 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  255 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  256 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  257 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  258 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  259 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  260 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  261 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  262 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  263 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  264 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  265 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  266 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  267 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  268 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  269 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  270 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  271 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  272 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  273 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  274 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  275 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  276 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  277 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  278 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  279 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  280 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  281 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  282 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  283 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  284 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  285 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  286 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  287 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  288 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  289 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  290 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  291 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  292 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  293 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  294 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  295 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  296 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  297 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  298 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  299 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  300 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  301 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  302 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  303 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  304 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  305 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  306 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  307 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  308 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  309 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  310 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  311 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  312 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  313 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  314 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  315 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  316 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  317 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  318 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  319 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  320 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  321 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  322 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  323 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  324 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  325 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  326 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  327 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  328 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  329 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  330 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  331 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  332 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  333 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  334 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  335 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  336 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  337 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  338 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  339 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  340 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  341 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  342 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  343 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  344 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  345 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  346 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  347 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  348 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  349 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  350 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  351 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  352 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  353 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  354 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  355 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  356 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  357 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  358 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  359 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  360 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  361 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  362 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  363 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  364 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  365 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  366 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  367 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  368 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  369 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  370 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  371 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  372 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  373 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  374 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  375 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  376 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  377 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  378 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  379 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  380 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  381 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  382 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  383 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  384 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  385 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  386 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  387 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  388 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  389 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  390 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  391 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  392 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  393 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  394 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  395 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  396 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  397 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  398 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  399 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  400 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  401 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  402 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  403 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  404 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  405 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  406 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  407 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  408 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  409 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  410 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  411 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  412 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  413 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  414 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  415 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  416 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  417 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  418 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  419 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  420 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  421 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  422 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  423 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  424 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  425 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  426 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  427 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  428 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  429 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  430 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  431 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  432 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  433 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  434 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  435 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  436 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  437 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  438 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  439 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  440 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  441 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  442 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  443 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  444 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  445 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  446 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  447 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  448 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  449 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  450 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  451 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  452 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  453 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  454 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  455 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  456 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  457 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  458 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  459 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  460 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  461 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  462 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  463 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  464 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  465 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  466 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  467 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  468 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  469 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  470 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  471 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  472 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  473 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  474 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  475 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  476 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  477 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  478 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  479 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  480 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  481 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  482 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  483 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  484 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  485 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  486 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  487 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  488 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  489 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  490 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  491 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  492 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  493 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  494 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  495 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  496 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  497 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  498 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  499 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  500 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  501 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  502 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  503 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  504 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  505 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  506 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  507 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  508 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  509 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  510 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  511 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  512 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  513 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  514 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  515 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  516 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  517 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  518 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  519 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  520 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  521 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  522 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  523 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  524 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  525 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  526 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  527 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  528 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  529 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  530 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  531 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  532 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  533 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  534 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  535 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  536 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  537 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  538 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  539 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  540 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  541 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  542 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  543 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  544 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  545 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  546 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  547 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  548 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  549 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  550 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  551 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  552 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  553 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  554 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  555 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  556 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  557 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  558 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  559 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  560 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  561 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  562 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  563 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  564 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  565 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  566 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  567 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  568 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  569 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  570 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  571 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  572 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  573 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  574 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  575 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  576 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  577 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  578 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  579 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  580 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  581 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  582 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  583 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  584 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  585 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  586 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  587 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  588 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  589 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  590 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  591 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  592 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  593 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  594 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  595 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  596 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  597 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  598 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  599 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  600 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  601 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  602 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  603 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  604 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  605 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  606 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  607 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  608 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  609 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  610 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  611 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  612 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  613 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  614 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  615 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  616 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  617 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  618 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  619 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  620 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  621 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  622 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  623 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  624 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  625 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  626 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  627 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  628 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  629 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  630 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  631 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  632 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  633 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  634 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  635 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  636 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  637 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  638 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  639 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  640 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  641 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  642 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  643 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  644 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  645 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  646 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  647 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  648 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  649 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  650 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  651 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  652 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  653 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  654 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  655 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  656 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  657 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  658 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  659 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  660 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  661 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  662 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  663 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  664 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  665 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  666 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  667 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  668 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  669 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  670 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  671 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  672 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  673 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  674 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  675 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  676 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  677 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  678 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  679 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  680 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  681 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  682 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  683 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  684 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  685 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  686 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  687 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  688 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  689 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  690 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  691 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  692 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  693 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  694 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  695 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  696 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  697 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  698 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  699 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  700 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  701 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  702 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  703 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  704 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  705 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  706 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  707 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  708 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  709 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  710 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  711 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  712 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  713 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  714 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  715 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  716 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  717 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  718 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  719 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  720 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  721 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  722 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  723 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  724 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  725 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  726 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  727 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  728 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  729 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  730 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  731 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  732 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  733 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  734 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  735 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  736 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  737 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  738 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  739 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  740 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  741 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  742 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  743 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  744 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  745 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  746 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  747 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  748 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  749 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  750 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  751 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  752 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  753 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  754 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  755 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  756 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  757 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  758 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  759 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  760 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  761 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  762 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  763 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  764 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  765 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  766 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  767 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  768 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  769 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  770 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  771 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  772 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  773 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  774 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  775 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  776 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  777 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  778 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  779 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  780 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  781 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  782 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  783 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  784 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  785 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  786 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  787 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  788 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  789 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  790 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  791 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  792 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  793 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  794 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  795 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  796 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  797 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  798 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  799 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  800 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  801 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  802 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  803 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  804 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  805 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  806 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  807 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  808 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  809 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  810 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  811 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  812 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  813 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  814 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  815 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  816 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  817 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  818 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  819 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  820 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  821 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  822 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  823 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  824 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  825 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  826 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  827 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  828 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  829 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  830 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  831 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  832 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  833 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  834 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  835 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  836 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  837 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  838 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  839 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  840 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  841 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  842 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  843 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  844 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  845 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  846 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  847 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  848 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  849 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  850 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  851 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  852 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  853 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  854 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  855 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  856 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  857 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  858 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  859 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  860 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  861 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  862 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  863 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  864 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  865 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  866 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  867 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  868 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  869 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  870 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  871 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  872 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  873 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  874 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  875 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  876 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  877 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  878 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  879 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  880 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  881 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  882 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  883 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  884 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  885 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  886 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  887 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  888 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  889 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  890 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  891 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  892 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  893 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  894 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  895 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  896 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  897 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  898 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  899 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  900 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  901 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  902 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  903 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  904 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  905 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  906 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  907 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  908 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  909 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  910 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  911 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  912 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  913 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  914 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  915 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  916 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  917 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  918 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  919 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  920 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  921 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  922 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  923 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  924 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  925 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  926 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  927 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  928 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  929 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  930 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  931 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  932 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  933 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  934 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  935 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  936 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  937 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  938 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  939 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  940 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  941 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  942 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  943 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  944 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  945 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  946 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  947 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  948 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  949 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  950 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  951 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  952 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  953 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  954 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  955 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  956 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  957 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  958 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  959 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  960 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  961 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  962 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  963 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  964 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  965 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  966 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  967 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  968 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  969 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  970 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  971 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  972 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  973 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  974 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  975 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  976 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  977 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  978 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  979 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  980 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  981 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  982 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  983 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  984 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  985 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  986 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  987 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  988 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  989 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  990 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  991 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  992 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  993 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  994 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  995 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  996 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  997 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  998 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  999 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
;;------------------------------
Outputs of best individual on training cases:
Correct output: -54.078495011  | Program output: -54.078495011 
Correct output: 13.1534720339  | Program output: 13.1534720339 
Correct output: 41.2049141439  | Program output: 41.2049141439 
Correct output: -6.0487858971  | Program output: -6.0487858971 
Correct output: -75.9491370053 | Program output: -75.9491370053
Correct output: 49.8479113478  | Program output: 49.8479113478 
Correct output: -43.0947106158 | Program output: -43.0947106158
Correct output: -6.035421      | Program output: -6.035421     
Correct output: -64.6496412859 | Program output: -64.6496412859
Correct output: -8.4475981317  | Program output: -8.4475981317 
Correct output: -61.9056292771 | Program output: -61.9056292771
Correct output: -100.2670640218 | Program output: -100.2670640218
Correct output: 33.5793532538  | Program output: 33.5793532538 
Correct output: -71.5665679812 | Program output: -71.5665679812
Correct output: -150.2787840572 | Program output: -150.2787840572
Correct output: -33.4710147358 | Program output: -33.4710147358
Correct output: 12.2165113619  | Program output: 12.2165113619 
Correct output: 16.3988550752  | Program output: 16.3988550752 
Correct output: -103.483665155 | Program output: -103.483665155
Correct output: -16.1113007238 | Program output: -16.1113007238
Correct output: 1.5190821923   | Program output: 1.5190821923  
Correct output: 56.222608134   | Program output: 56.222608134  
Correct output: -100.5567747653 | Program output: -100.5567747653
Correct output: 20.8692780643  | Program output: 20.8692780643 
Correct output: 137.7657204956 | Program output: 137.7657204956
;;******************************
