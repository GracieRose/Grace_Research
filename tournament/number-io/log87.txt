Command line args: clojush.problems.software.number-io :parent-selection :tournament :print-timings true
######################################
Parameters set at command line or in problem file argmap; may or may not be default:
alignment-deviation = 5
alternation-rate = 0.01
atom-generators = (#object[clojush.problems.software.number_io$fn__6694 0x2beee3e8 clojush.problems.software.number_io$fn__6694@2beee3e8] #object[clojush.problems.software.number_io$fn__6696 0x58bad46f clojush.problems.software.number_io$fn__6696@58bad46f] #object[clojush.instructions.tag$tag_instruction_erc$fn__1963 0x20231384 clojush.instructions.tag$tag_instruction_erc$fn__1963@20231384] #object[clojush.instructions.tag$tagged_instruction_erc$fn__1969 0x35becbd4 clojush.instructions.tag$tagged_instruction_erc$fn__1969@35becbd4] in1 in2 print_newline integer_sub integer_inc integer_yankdup integer_mult float_sin float_frominteger float_mod integer_div integer_fromfloat integer_mod integer_rot float_yankdup integer_add integer_shove integer_max integer_stackdepth float_max float_dup_items float_stackdepth integer_dup_times integer_yank integer_min integer_dup_items print_integer print_float integer_flush float_shove float_pop float_sub float_min float_mult float_dec float_add float_dup float_swap integer_swap integer_dup float_tan integer_pop float_dup_times float_inc integer_dec float_rot float_flush float_cos float_div float_yank)
epigenetic-markers = []
error-function = #object[clojush.problems.software.number_io$make_number_io_error_function_from_cases$the_actual_num_io_error_function__6704 0x342723a3 clojush.problems.software.number_io$make_number_io_error_function_from_cases$the_actual_num_io_error_function__6704@342723a3]
error-threshold = 1.0E-4
evalpush-limit = 200
final-report-simplifications = 5000
genetic-operator-probabilities = {:alternation 0.3, :uniform-mutation 0.2, [:alternation :uniform-mutation] 0.5}
max-error = 5000
max-generations = 200
max-genome-size-in-initial-program = 100
max-points = 800
parent-selection = :tournament
population-size = 1000
print-timings = true
problem-specific-initial-report = #object[clojush.problems.software.number_io$number_io_initial_report 0x4ec427 clojush.problems.software.number_io$number_io_initial_report@4ec427]
problem-specific-report = #object[clojush.problems.software.number_io$num_io_report 0xfde487b clojush.problems.software.number_io$num_io_report@fde487b]
report-simplifications = 0
uniform-mutation-rate = 0.01
######################################
Train and test cases:
Train Case:   0 | Input/Output: [[8.382045796254786 -83] -74.61795420374521]
Train Case:   1 | Input/Output: [[-5.239041318748235 84] 78.76095868125176]
Train Case:   2 | Input/Output: [[72.0100598708828 -69] 3.010059870882799]
Train Case:   3 | Input/Output: [[-80.23680612932213 -19] -99.23680612932213]
Train Case:   4 | Input/Output: [[12.680841560339047 76] 88.68084156033905]
Train Case:   5 | Input/Output: [[-85.1060419578114 -66] -151.10604195781139]
Train Case:   6 | Input/Output: [[88.00461618395002 -32] 56.00461618395002]
Train Case:   7 | Input/Output: [[-18.479339846043572 52] 33.52066015395643]
Train Case:   8 | Input/Output: [[75.23886108500483 -33] 42.23886108500483]
Train Case:   9 | Input/Output: [[-92.02278937648016 43] -49.02278937648016]
Train Case:  10 | Input/Output: [[94.40574830593513 9] 103.40574830593513]
Train Case:  11 | Input/Output: [[-56.137827377932695 -50] -106.1378273779327]
Train Case:  12 | Input/Output: [[10.96255999908719 27] 37.96255999908719]
Train Case:  13 | Input/Output: [[65.92081932030044 6] 71.92081932030044]
Train Case:  14 | Input/Output: [[88.53484643165882 85] 173.53484643165882]
Train Case:  15 | Input/Output: [[-17.061518593491343 -60] -77.06151859349134]
Train Case:  16 | Input/Output: [[-29.76436225546837 9] -20.76436225546837]
Train Case:  17 | Input/Output: [[-88.0172369185206 90] 1.9827630814794048]
Train Case:  18 | Input/Output: [[51.880131738905305 -91] -39.119868261094695]
Train Case:  19 | Input/Output: [[2.1392376035668974 -1] 1.1392376035668974]
Train Case:  20 | Input/Output: [[46.19309776791809 83] 129.1930977679181]
Train Case:  21 | Input/Output: [[0.7496211860684241 26] 26.749621186068424]
Train Case:  22 | Input/Output: [[-68.29848013839057 57] -11.298480138390573]
Train Case:  23 | Input/Output: [[-79.14429603854929 -57] -136.14429603854927]
Train Case:  24 | Input/Output: [[85.09119966045998 58] 143.09119966045998]
Test Case:   0 | Input/Output: [[23.758386913524745 43] 66.75838691352475]
Test Case:   1 | Input/Output: [[-12.119828008618015 31] 18.880171991381985]
Test Case:   2 | Input/Output: [[-77.37052338973567 -13] -90.37052338973567]
Test Case:   3 | Input/Output: [[74.02936930753171 -92] -17.97063069246829]
Test Case:   4 | Input/Output: [[-82.01921501229921 86] 3.980784987700787]
Test Case:   5 | Input/Output: [[-83.5918430099918 3] -80.5918430099918]
Test Case:   6 | Input/Output: [[-84.53577559992445 -91] -175.53577559992445]
Test Case:   7 | Input/Output: [[-16.694014606248615 26] 9.305985393751385]
Test Case:   8 | Input/Output: [[9.287688080138821 -67] -57.71231191986118]
Test Case:   9 | Input/Output: [[11.021159052640257 83] 94.02115905264026]
Test Case:  10 | Input/Output: [[-10.314368370582685 67] 56.685631629417315]
Test Case:  11 | Input/Output: [[-17.81464875613959 66] 48.18535124386041]
Test Case:  12 | Input/Output: [[49.61614063528697 -84] -34.38385936471303]
Test Case:  13 | Input/Output: [[96.93392654026854 22] 118.93392654026854]
Test Case:  14 | Input/Output: [[-86.9592078820876 30] -56.9592078820876]
Test Case:  15 | Input/Output: [[17.414900657672547 -54] -36.58509934232745]
Test Case:  16 | Input/Output: [[16.02017189196002 -83] -66.97982810803998]
Test Case:  17 | Input/Output: [[83.53091344619827 -34] 49.53091344619827]
Test Case:  18 | Input/Output: [[-7.286554448877311 -45] -52.28655444887731]
Test Case:  19 | Input/Output: [[39.08633700995085 51] 90.08633700995085]
Test Case:  20 | Input/Output: [[91.1325058186145 -93] -1.8674941813854957]
Test Case:  21 | Input/Output: [[87.97519731402747 76] 163.97519731402747]
Test Case:  22 | Input/Output: [[21.993482854400554 -12] 9.993482854400554]
Test Case:  23 | Input/Output: [[-80.5047723417745 -35] -115.5047723417745]
Test Case:  24 | Input/Output: [[98.61771976277336 -92] 6.617719762773362]
Test Case:  25 | Input/Output: [[36.538045361947724 1] 37.538045361947724]
Test Case:  26 | Input/Output: [[-96.48307835677295 71] -25.48307835677295]
Test Case:  27 | Input/Output: [[-48.83292616012878 95] 46.16707383987122]
Test Case:  28 | Input/Output: [[50.870852029564105 10] 60.870852029564105]
Test Case:  29 | Input/Output: [[48.67531163123107 63] 111.67531163123107]
Test Case:  30 | Input/Output: [[-83.02979136099165 -72] -155.02979136099165]
Test Case:  31 | Input/Output: [[47.27277566686789 -78] -30.727224333132114]
Test Case:  32 | Input/Output: [[32.91013661388621 -42] -9.089863386113791]
Test Case:  33 | Input/Output: [[18.187455517696932 50] 68.18745551769693]
Test Case:  34 | Input/Output: [[79.90474156678104 84] 163.90474156678104]
Test Case:  35 | Input/Output: [[31.043255939028768 0] 31.043255939028768]
Test Case:  36 | Input/Output: [[-61.668618198378944 -1] -62.668618198378944]
Test Case:  37 | Input/Output: [[-42.63755482681386 9] -33.63755482681386]
Test Case:  38 | Input/Output: [[16.90893159236815 -72] -55.09106840763185]
Test Case:  39 | Input/Output: [[-34.61575475026906 98] 63.38424524973094]
Test Case:  40 | Input/Output: [[42.9866924607027 16] 58.9866924607027]
Test Case:  41 | Input/Output: [[14.595449676040474 61] 75.59544967604047]
Test Case:  42 | Input/Output: [[-74.80739901763982 -100] -174.80739901763982]
Test Case:  43 | Input/Output: [[24.914511065215066 -12] 12.914511065215066]
Test Case:  44 | Input/Output: [[9.987968205412585 92] 101.98796820541259]
Test Case:  45 | Input/Output: [[-7.641272917841562 9] 1.3587270821584383]
Test Case:  46 | Input/Output: [[95.83917701057777 -1] 94.83917701057777]
Test Case:  47 | Input/Output: [[-39.29931556207853 73] 33.70068443792147]
Test Case:  48 | Input/Output: [[-33.54700558635119 -40] -73.54700558635119]
Test Case:  49 | Input/Output: [[-23.73500369258541 29] 5.264996307414592]
Test Case:  50 | Input/Output: [[-59.81308461208239 32] -27.813084612082392]
Test Case:  51 | Input/Output: [[16.62844381535426 77] 93.62844381535426]
Test Case:  52 | Input/Output: [[61.52342536772551 -16] 45.52342536772551]
Test Case:  53 | Input/Output: [[71.96662250826341 51] 122.96662250826341]
Test Case:  54 | Input/Output: [[-60.80527147875105 12] -48.80527147875105]
Test Case:  55 | Input/Output: [[71.89160741042807 21] 92.89160741042807]
Test Case:  56 | Input/Output: [[50.42630937901532 87] 137.42630937901532]
Test Case:  57 | Input/Output: [[2.2332762276071207 -50] -47.76672377239288]
Test Case:  58 | Input/Output: [[-95.9774702706527 55] -40.9774702706527]
Test Case:  59 | Input/Output: [[97.60503834988648 19] 116.60503834988648]
Test Case:  60 | Input/Output: [[-32.59806689138402 91] 58.40193310861598]
Test Case:  61 | Input/Output: [[38.345062755819356 100] 138.34506275581936]
Test Case:  62 | Input/Output: [[16.987959541806347 -75] -58.01204045819365]
Test Case:  63 | Input/Output: [[-55.10541975985528 99] 43.89458024014472]
Test Case:  64 | Input/Output: [[-71.88166733166075 39] -32.88166733166075]
Test Case:  65 | Input/Output: [[33.31633968572518 -14] 19.316339685725183]
Test Case:  66 | Input/Output: [[-28.39989353239902 98] 69.60010646760098]
Test Case:  67 | Input/Output: [[27.600510036304726 96] 123.60051003630473]
Test Case:  68 | Input/Output: [[16.70901226971577 41] 57.70901226971577]
Test Case:  69 | Input/Output: [[-60.288883302214536 -71] -131.28888330221454]
Test Case:  70 | Input/Output: [[40.2500769145762 43] 83.2500769145762]
Test Case:  71 | Input/Output: [[-55.881950235765785 -96] -151.88195023576577]
Test Case:  72 | Input/Output: [[-87.77393885984719 -30] -117.77393885984719]
Test Case:  73 | Input/Output: [[6.75689632641685 13] 19.75689632641685]
Test Case:  74 | Input/Output: [[-80.42955183873258 25] -55.42955183873258]
Test Case:  75 | Input/Output: [[-25.52003976883026 18] -7.520039768830259]
Test Case:  76 | Input/Output: [[-2.106375380017795 48] 45.893624619982205]
Test Case:  77 | Input/Output: [[-53.609520614888616 1] -52.609520614888616]
Test Case:  78 | Input/Output: [[74.76294854588704 -47] 27.762948545887042]
Test Case:  79 | Input/Output: [[51.229424502397194 -9] 42.229424502397194]
Test Case:  80 | Input/Output: [[38.4098753725448 21] 59.4098753725448]
Test Case:  81 | Input/Output: [[-75.64097067543221 -6] -81.64097067543221]
Test Case:  82 | Input/Output: [[92.75566169483434 -57] 35.755661694834345]
Test Case:  83 | Input/Output: [[-69.94278135998633 88] 18.057218640013673]
Test Case:  84 | Input/Output: [[-84.29108111452061 29] -55.29108111452061]
Test Case:  85 | Input/Output: [[80.04684479385404 -6] 74.04684479385404]
Test Case:  86 | Input/Output: [[78.79372512834425 65] 143.79372512834425]
Test Case:  87 | Input/Output: [[-7.650460038476297 58] 50.3495399615237]
Test Case:  88 | Input/Output: [[41.65930059392059 43] 84.65930059392059]
Test Case:  89 | Input/Output: [[30.666858210833624 19] 49.666858210833624]
Test Case:  90 | Input/Output: [[84.90404338848674 41] 125.90404338848674]
Test Case:  91 | Input/Output: [[-75.15335606899947 -89] -164.15335606899947]
Test Case:  92 | Input/Output: [[-24.55908235668815 -32] -56.55908235668815]
Test Case:  93 | Input/Output: [[26.899326890058276 20] 46.899326890058276]
Test Case:  94 | Input/Output: [[95.22631023947122 79] 174.22631023947122]
Test Case:  95 | Input/Output: [[77.47892714814165 58] 135.47892714814165]
Test Case:  96 | Input/Output: [[98.9782720744308 80] 178.9782720744308]
Test Case:  97 | Input/Output: [[53.13166818788349 99] 152.1316681878835]
Test Case:  98 | Input/Output: [[-32.53351929999371 -80] -112.53351929999371]
Test Case:  99 | Input/Output: [[-2.0487821818348664 89] 86.95121781816513]
Test Case: 100 | Input/Output: [[76.71059753939525 -92] -15.289402460604748]
Test Case: 101 | Input/Output: [[50.325202386231695 6] 56.325202386231695]
Test Case: 102 | Input/Output: [[55.40346349516403 -54] 1.4034634951640328]
Test Case: 103 | Input/Output: [[-9.002080137919364 -2] -11.002080137919364]
Test Case: 104 | Input/Output: [[68.05330341361775 -44] 24.053303413617755]
Test Case: 105 | Input/Output: [[66.23531502507996 -12] 54.235315025079956]
Test Case: 106 | Input/Output: [[-64.50737906078825 -28] -92.50737906078825]
Test Case: 107 | Input/Output: [[36.29494829316317 -26] 10.294948293163174]
Test Case: 108 | Input/Output: [[14.794711071777343 89] 103.79471107177734]
Test Case: 109 | Input/Output: [[41.511881628068124 95] 136.51188162806812]
Test Case: 110 | Input/Output: [[18.628074527868847 -45] -26.371925472131153]
Test Case: 111 | Input/Output: [[-76.01879695453397 0] -76.01879695453397]
Test Case: 112 | Input/Output: [[-84.93589839460817 100] 15.064101605391826]
Test Case: 113 | Input/Output: [[1.5967776179290638 51] 52.596777617929064]
Test Case: 114 | Input/Output: [[36.99542402539183 7] 43.99542402539183]
Test Case: 115 | Input/Output: [[77.79336263089206 -90] -12.206637369107938]
Test Case: 116 | Input/Output: [[29.494478717379764 88] 117.49447871737976]
Test Case: 117 | Input/Output: [[-99.73599614120607 19] -80.73599614120607]
Test Case: 118 | Input/Output: [[34.25456945543988 -88] -53.74543054456012]
Test Case: 119 | Input/Output: [[-63.84218391202987 -95] -158.84218391202987]
Test Case: 120 | Input/Output: [[-85.03815991538725 -59] -144.03815991538727]
Test Case: 121 | Input/Output: [[-39.09749083910368 50] 10.902509160896322]
Test Case: 122 | Input/Output: [[-88.92899073303 -92] -180.92899073303]
Test Case: 123 | Input/Output: [[11.183143853302568 99] 110.18314385330257]
Test Case: 124 | Input/Output: [[96.57503081450801 -10] 86.57503081450801]
Test Case: 125 | Input/Output: [[95.92559425482867 31] 126.92559425482867]
Test Case: 126 | Input/Output: [[-17.44005682891958 -11] -28.44005682891958]
Test Case: 127 | Input/Output: [[90.63619058471312 37] 127.63619058471312]
Test Case: 128 | Input/Output: [[74.80619575290424 7] 81.80619575290424]
Test Case: 129 | Input/Output: [[-25.531316422115523 -28] -53.53131642211552]
Test Case: 130 | Input/Output: [[68.9129041338563 -16] 52.9129041338563]
Test Case: 131 | Input/Output: [[36.71485794414471 85] 121.71485794414471]
Test Case: 132 | Input/Output: [[11.83267817100861 69] 80.83267817100861]
Test Case: 133 | Input/Output: [[-7.004903098329223 39] 31.995096901670777]
Test Case: 134 | Input/Output: [[-26.384448384633714 -52] -78.38444838463371]
Test Case: 135 | Input/Output: [[-99.72435648342793 63] -36.724356483427925]
Test Case: 136 | Input/Output: [[19.54117147580942 -72] -52.45882852419058]
Test Case: 137 | Input/Output: [[75.59421014645105 -69] 6.594210146451047]
Test Case: 138 | Input/Output: [[11.152884693718207 -44] -32.84711530628179]
Test Case: 139 | Input/Output: [[-29.79230639739899 3] -26.79230639739899]
Test Case: 140 | Input/Output: [[71.44521979012276 48] 119.44521979012276]
Test Case: 141 | Input/Output: [[-86.90097667393992 -13] -99.90097667393992]
Test Case: 142 | Input/Output: [[94.77457806239923 58] 152.77457806239923]
Test Case: 143 | Input/Output: [[-52.117488629444566 -17] -69.11748862944457]
Test Case: 144 | Input/Output: [[82.62492395541184 5] 87.62492395541184]
Test Case: 145 | Input/Output: [[-96.05797795508961 48] -48.05797795508961]
Test Case: 146 | Input/Output: [[-31.15560131978461 26] -5.1556013197846084]
Test Case: 147 | Input/Output: [[46.595641479861854 14] 60.595641479861854]
Test Case: 148 | Input/Output: [[67.11649749388246 -62] 5.116497493882463]
Test Case: 149 | Input/Output: [[-94.54250583667421 -48] -142.5425058366742]
Test Case: 150 | Input/Output: [[59.90237829876173 -19] 40.90237829876173]
Test Case: 151 | Input/Output: [[24.137357505603703 25] 49.1373575056037]
Test Case: 152 | Input/Output: [[47.73468300167926 85] 132.73468300167926]
Test Case: 153 | Input/Output: [[61.360783959462566 96] 157.36078395946257]
Test Case: 154 | Input/Output: [[51.727268118038836 89] 140.72726811803884]
Test Case: 155 | Input/Output: [[77.06549597617712 82] 159.06549597617712]
Test Case: 156 | Input/Output: [[-85.99350782696742 -55] -140.9935078269674]
Test Case: 157 | Input/Output: [[31.541291609288834 19] 50.541291609288834]
Test Case: 158 | Input/Output: [[-19.565860394839405 60] 40.434139605160595]
Test Case: 159 | Input/Output: [[-39.63807437111726 -88] -127.63807437111726]
Test Case: 160 | Input/Output: [[-8.142431905004145 29] 20.857568094995855]
Test Case: 161 | Input/Output: [[56.126518910714054 -84] -27.873481089285946]
Test Case: 162 | Input/Output: [[-38.29592370481982 -58] -96.29592370481981]
Test Case: 163 | Input/Output: [[86.66608622393221 18] 104.66608622393221]
Test Case: 164 | Input/Output: [[-37.509459656731 -100] -137.509459656731]
Test Case: 165 | Input/Output: [[38.51414154778499 97] 135.514141547785]
Test Case: 166 | Input/Output: [[44.48597248618066 -65] -20.514027513819343]
Test Case: 167 | Input/Output: [[-34.609007329356544 -87] -121.60900732935654]
Test Case: 168 | Input/Output: [[52.8377464714585 -87] -34.1622535285415]
Test Case: 169 | Input/Output: [[-21.501516997420183 14] -7.5015169974201825]
Test Case: 170 | Input/Output: [[-57.60840810019576 -68] -125.60840810019576]
Test Case: 171 | Input/Output: [[40.122795556674475 16] 56.122795556674475]
Test Case: 172 | Input/Output: [[35.01918541968095 56] 91.01918541968095]
Test Case: 173 | Input/Output: [[-35.026222287226005 47] 11.973777712773995]
Test Case: 174 | Input/Output: [[-36.253748700429234 92] 55.746251299570766]
Test Case: 175 | Input/Output: [[-6.331730712888017 40] 33.66826928711198]
Test Case: 176 | Input/Output: [[-57.48969768377248 69] 11.510302316227524]
Test Case: 177 | Input/Output: [[-5.137380226678417 70] 64.86261977332158]
Test Case: 178 | Input/Output: [[-36.13702520745077 -78] -114.13702520745076]
Test Case: 179 | Input/Output: [[16.663858546397222 -89] -72.33614145360278]
Test Case: 180 | Input/Output: [[-2.721365980957799 -38] -40.7213659809578]
Test Case: 181 | Input/Output: [[-25.13974388987093 49] 23.86025611012907]
Test Case: 182 | Input/Output: [[93.92397726564155 -40] 53.923977265641554]
Test Case: 183 | Input/Output: [[-10.986141021734227 70] 59.01385897826577]
Test Case: 184 | Input/Output: [[-26.744850114258938 73] 46.25514988574106]
Test Case: 185 | Input/Output: [[47.606687237887 8] 55.606687237887]
Test Case: 186 | Input/Output: [[-38.07811822401288 -7] -45.07811822401288]
Test Case: 187 | Input/Output: [[72.8412411083738 25] 97.8412411083738]
Test Case: 188 | Input/Output: [[-56.84257987520767 89] 32.15742012479233]
Test Case: 189 | Input/Output: [[65.42896362256562 48] 113.42896362256562]
Test Case: 190 | Input/Output: [[-91.35620809421489 -16] -107.35620809421489]
Test Case: 191 | Input/Output: [[-41.95866945691349 -94] -135.9586694569135]
Test Case: 192 | Input/Output: [[-31.181770254568008 97] 65.81822974543199]
Test Case: 193 | Input/Output: [[-40.15289756602029 -36] -76.1528975660203]
Test Case: 194 | Input/Output: [[79.52198258031424 -37] 42.521982580314244]
Test Case: 195 | Input/Output: [[2.5888558000922473 -3] -0.41114419990775275]
Test Case: 196 | Input/Output: [[5.799632858823216 -43] -37.200367141176784]
Test Case: 197 | Input/Output: [[-58.76058775178294 51] -7.760587751782943]
Test Case: 198 | Input/Output: [[66.37346675175823 -22] 44.37346675175823]
Test Case: 199 | Input/Output: [[97.5136129511499 -32] 65.5136129511499]
Test Case: 200 | Input/Output: [[-56.70083818600138 -83] -139.70083818600136]
Test Case: 201 | Input/Output: [[64.67397093719134 -57] 7.673970937191342]
Test Case: 202 | Input/Output: [[-77.02470362826355 22] -55.02470362826355]
Test Case: 203 | Input/Output: [[-4.443899296294802 -48] -52.4438992962948]
Test Case: 204 | Input/Output: [[-82.9766273135702 -27] -109.9766273135702]
Test Case: 205 | Input/Output: [[93.85863095584997 78] 171.85863095584997]
Test Case: 206 | Input/Output: [[10.436789672334882 -84] -73.56321032766512]
Test Case: 207 | Input/Output: [[43.57065272052219 -35] 8.57065272052219]
Test Case: 208 | Input/Output: [[-46.72630169041372 97] 50.27369830958628]
Test Case: 209 | Input/Output: [[-53.33565113761838 -65] -118.33565113761838]
Test Case: 210 | Input/Output: [[84.54498913525725 91] 175.54498913525725]
Test Case: 211 | Input/Output: [[11.451999116263863 -13] -1.5480008837361368]
Test Case: 212 | Input/Output: [[-52.937389184951165 14] -38.937389184951165]
Test Case: 213 | Input/Output: [[63.05979021185908 -1] 62.05979021185908]
Test Case: 214 | Input/Output: [[54.41519786743004 72] 126.41519786743004]
Test Case: 215 | Input/Output: [[-10.066148456301832 -48] -58.06614845630183]
Test Case: 216 | Input/Output: [[38.407712864830074 73] 111.40771286483007]
Test Case: 217 | Input/Output: [[-32.30216606934813 -51] -83.30216606934813]
Test Case: 218 | Input/Output: [[-30.261710781881135 76] 45.738289218118865]
Test Case: 219 | Input/Output: [[-95.3544689742299 -16] -111.3544689742299]
Test Case: 220 | Input/Output: [[23.001020070283346 64] 87.00102007028335]
Test Case: 221 | Input/Output: [[-83.64609809581759 7] -76.64609809581759]
Test Case: 222 | Input/Output: [[33.72312759152115 83] 116.72312759152115]
Test Case: 223 | Input/Output: [[-44.66057022222323 -88] -132.6605702222232]
Test Case: 224 | Input/Output: [[48.38033129533278 99] 147.38033129533278]
Test Case: 225 | Input/Output: [[70.81448514301673 -52] 18.814485143016725]
Test Case: 226 | Input/Output: [[87.02737794117704 -95] -7.972622058822964]
Test Case: 227 | Input/Output: [[50.78734106649645 95] 145.78734106649645]
Test Case: 228 | Input/Output: [[17.365978936801866 -61] -43.634021063198134]
Test Case: 229 | Input/Output: [[97.33492963593756 -54] 43.334929635937556]
Test Case: 230 | Input/Output: [[-71.95971159278201 0] -71.95971159278201]
Test Case: 231 | Input/Output: [[0.3862821963472811 4] 4.386282196347281]
Test Case: 232 | Input/Output: [[51.79289848567734 13] 64.79289848567734]
Test Case: 233 | Input/Output: [[-49.66042305090641 -56] -105.66042305090642]
Test Case: 234 | Input/Output: [[-61.94413002462282 5] -56.94413002462282]
Test Case: 235 | Input/Output: [[-11.56002792581991 -32] -43.56002792581991]
Test Case: 236 | Input/Output: [[72.34864599382993 54] 126.34864599382993]
Test Case: 237 | Input/Output: [[6.174121526239688 76] 82.17412152623969]
Test Case: 238 | Input/Output: [[17.90202596789767 -91] -73.09797403210233]
Test Case: 239 | Input/Output: [[-65.34454277607908 -87] -152.3445427760791]
Test Case: 240 | Input/Output: [[90.14292219513467 92] 182.14292219513467]
Test Case: 241 | Input/Output: [[-74.09691403425384 -41] -115.09691403425384]
Test Case: 242 | Input/Output: [[52.6412163321379 -31] 21.6412163321379]
Test Case: 243 | Input/Output: [[-92.01711317646823 56] -36.01711317646823]
Test Case: 244 | Input/Output: [[3.287604490756408 97] 100.28760449075641]
Test Case: 245 | Input/Output: [[-81.61592159880122 -9] -90.61592159880122]
Test Case: 246 | Input/Output: [[77.80290293552648 -75] 2.8029029355264754]
Test Case: 247 | Input/Output: [[89.45034211845544 94] 183.45034211845544]
Test Case: 248 | Input/Output: [[71.94290560107166 23] 94.94290560107166]
Test Case: 249 | Input/Output: [[-32.90934593090003 -86] -118.90934593090003]
Test Case: 250 | Input/Output: [[67.12877785251078 30] 97.12877785251078]
Test Case: 251 | Input/Output: [[25.522499204139493 43] 68.52249920413949]
Test Case: 252 | Input/Output: [[19.526086454027975 85] 104.52608645402798]
Test Case: 253 | Input/Output: [[83.88954569758093 -84] -0.11045430241907184]
Test Case: 254 | Input/Output: [[4.773994866260338 8] 12.773994866260338]
Test Case: 255 | Input/Output: [[-80.86912562594418 32] -48.86912562594418]
Test Case: 256 | Input/Output: [[27.492530915973276 -16] 11.492530915973276]
Test Case: 257 | Input/Output: [[99.63126850894605 92] 191.63126850894605]
Test Case: 258 | Input/Output: [[35.56429727016658 -9] 26.564297270166577]
Test Case: 259 | Input/Output: [[-3.9324101903975617 -82] -85.93241019039756]
Test Case: 260 | Input/Output: [[-28.694302896105356 68] 39.305697103894644]
Test Case: 261 | Input/Output: [[39.1748106874399 -47] -7.825189312560099]
Test Case: 262 | Input/Output: [[-41.85648842478773 -38] -79.85648842478773]
Test Case: 263 | Input/Output: [[-73.64100311146373 42] -31.641003111463732]
Test Case: 264 | Input/Output: [[35.917521438205114 84] 119.91752143820511]
Test Case: 265 | Input/Output: [[-66.19901352322377 24] -42.19901352322377]
Test Case: 266 | Input/Output: [[-91.90982246790492 99] 7.090177532095083]
Test Case: 267 | Input/Output: [[84.11007374951186 -98] -13.889926250488145]
Test Case: 268 | Input/Output: [[66.78981067533255 68] 134.78981067533255]
Test Case: 269 | Input/Output: [[60.3838603605941 -62] -1.616139639405901]
Test Case: 270 | Input/Output: [[-85.582272365168 91] 5.417727634832005]
Test Case: 271 | Input/Output: [[13.688137417471793 -60] -46.31186258252821]
Test Case: 272 | Input/Output: [[-48.64997539920102 -92] -140.64997539920103]
Test Case: 273 | Input/Output: [[72.7347262539435 7] 79.7347262539435]
Test Case: 274 | Input/Output: [[83.61552899429859 60] 143.6155289942986]
Test Case: 275 | Input/Output: [[57.60463892213062 63] 120.60463892213062]
Test Case: 276 | Input/Output: [[-46.255931126705676 -23] -69.25593112670568]
Test Case: 277 | Input/Output: [[-99.5492798811936 -2] -101.5492798811936]
Test Case: 278 | Input/Output: [[-96.91265076973706 0] -96.91265076973706]
Test Case: 279 | Input/Output: [[-44.179023796980246 -16] -60.179023796980246]
Test Case: 280 | Input/Output: [[76.20582940229994 -86] -9.79417059770006]
Test Case: 281 | Input/Output: [[-67.37359204475466 40] -27.37359204475466]
Test Case: 282 | Input/Output: [[-73.1108903839357 -4] -77.1108903839357]
Test Case: 283 | Input/Output: [[47.56255402757304 -48] -0.43744597242695704]
Test Case: 284 | Input/Output: [[21.619925839861054 25] 46.619925839861054]
Test Case: 285 | Input/Output: [[45.715823724494925 51] 96.71582372449492]
Test Case: 286 | Input/Output: [[-80.66160253555879 -29] -109.66160253555879]
Test Case: 287 | Input/Output: [[70.01876358513596 -13] 57.01876358513596]
Test Case: 288 | Input/Output: [[-38.67868888432808 -99] -137.6786888843281]
Test Case: 289 | Input/Output: [[-56.2113150077552 56] -0.2113150077552035]
Test Case: 290 | Input/Output: [[21.130367098575135 83] 104.13036709857514]
Test Case: 291 | Input/Output: [[-25.83987013620201 -53] -78.83987013620201]
Test Case: 292 | Input/Output: [[-81.80052000765228 21] -60.80052000765228]
Test Case: 293 | Input/Output: [[-31.35869654535574 93] 61.64130345464426]
Test Case: 294 | Input/Output: [[70.64002351115798 76] 146.64002351115798]
Test Case: 295 | Input/Output: [[94.75390948919198 -62] 32.75390948919198]
Test Case: 296 | Input/Output: [[58.19754518540822 33] 91.19754518540822]
Test Case: 297 | Input/Output: [[-80.35487473049352 93] 12.64512526950648]
Test Case: 298 | Input/Output: [[63.64044356421874 -16] 47.64044356421874]
Test Case: 299 | Input/Output: [[-11.65429790558899 1] -10.65429790558899]
Test Case: 300 | Input/Output: [[-50.00184535008496 -16] -66.00184535008496]
Test Case: 301 | Input/Output: [[-48.41725471832032 -64] -112.41725471832032]
Test Case: 302 | Input/Output: [[-59.17069256247252 -53] -112.17069256247251]
Test Case: 303 | Input/Output: [[35.455443201848226 36] 71.45544320184823]
Test Case: 304 | Input/Output: [[68.36032422652161 99] 167.3603242265216]
Test Case: 305 | Input/Output: [[55.3544348684793 -77] -21.645565131520698]
Test Case: 306 | Input/Output: [[-27.58144954999142 26] -1.5814495499914187]
Test Case: 307 | Input/Output: [[64.44136775571621 30] 94.44136775571621]
Test Case: 308 | Input/Output: [[81.96419504624808 -6] 75.96419504624808]
Test Case: 309 | Input/Output: [[-39.83597309863145 -68] -107.83597309863146]
Test Case: 310 | Input/Output: [[76.24634186937641 -51] 25.24634186937641]
Test Case: 311 | Input/Output: [[-43.12091404084506 6] -37.12091404084506]
Test Case: 312 | Input/Output: [[88.63907086662007 -59] 29.639070866620074]
Test Case: 313 | Input/Output: [[31.87946792143282 -38] -6.12053207856718]
Test Case: 314 | Input/Output: [[9.904881472145675 -70] -60.095118527854325]
Test Case: 315 | Input/Output: [[82.00531638380656 -84] -1.9946836161934414]
Test Case: 316 | Input/Output: [[-41.65829277269226 4] -37.65829277269226]
Test Case: 317 | Input/Output: [[68.74509357277353 -9] 59.74509357277353]
Test Case: 318 | Input/Output: [[15.286146151848087 -71] -55.71385384815191]
Test Case: 319 | Input/Output: [[-42.696186772400544 -11] -53.696186772400544]
Test Case: 320 | Input/Output: [[-24.13401661736738 -12] -36.13401661736738]
Test Case: 321 | Input/Output: [[80.04743724124376 26] 106.04743724124376]
Test Case: 322 | Input/Output: [[50.52315553768864 89] 139.52315553768864]
Test Case: 323 | Input/Output: [[-91.93047051855714 -91] -182.93047051855714]
Test Case: 324 | Input/Output: [[38.148426896623505 10] 48.148426896623505]
Test Case: 325 | Input/Output: [[-89.4412498482174 79] -10.441249848217396]
Test Case: 326 | Input/Output: [[8.864135225317725 -74] -65.13586477468228]
Test Case: 327 | Input/Output: [[-74.02086010140363 45] -29.020860101403628]
Test Case: 328 | Input/Output: [[-12.736098037934624 75] 62.263901962065376]
Test Case: 329 | Input/Output: [[-98.11900046893511 -61] -159.1190004689351]
Test Case: 330 | Input/Output: [[-38.223990007134525 -73] -111.22399000713452]
Test Case: 331 | Input/Output: [[66.73636563779158 -91] -24.26363436220842]
Test Case: 332 | Input/Output: [[-72.88131936058453 67] -5.881319360584527]
Test Case: 333 | Input/Output: [[46.65458451755228 78] 124.65458451755228]
Test Case: 334 | Input/Output: [[-59.75155487023998 87] 27.24844512976002]
Test Case: 335 | Input/Output: [[30.092693537146857 68] 98.09269353714686]
Test Case: 336 | Input/Output: [[16.23817130267591 -20] -3.7618286973240913]
Test Case: 337 | Input/Output: [[-97.09538295229343 -12] -109.09538295229343]
Test Case: 338 | Input/Output: [[8.660044114753333 -37] -28.339955885246667]
Test Case: 339 | Input/Output: [[-80.46251365870252 -74] -154.4625136587025]
Test Case: 340 | Input/Output: [[86.47344244272458 90] 176.47344244272458]
Test Case: 341 | Input/Output: [[-45.68459190422125 -98] -143.68459190422124]
Test Case: 342 | Input/Output: [[-21.969134384213703 27] 5.030865615786297]
Test Case: 343 | Input/Output: [[-99.12629001976825 32] -67.12629001976825]
Test Case: 344 | Input/Output: [[85.2965624294456 -46] 39.2965624294456]
Test Case: 345 | Input/Output: [[-13.096391884369154 -95] -108.09639188436915]
Test Case: 346 | Input/Output: [[23.400211389545447 -37] -13.599788610454553]
Test Case: 347 | Input/Output: [[92.37050979304254 56] 148.37050979304254]
Test Case: 348 | Input/Output: [[58.329845017450225 -27] 31.329845017450225]
Test Case: 349 | Input/Output: [[-50.43336473848821 83] 32.56663526151179]
Test Case: 350 | Input/Output: [[-83.46065501933083 73] -10.46065501933083]
Test Case: 351 | Input/Output: [[-66.92280014162024 -69] -135.92280014162026]
Test Case: 352 | Input/Output: [[99.3178082300042 75] 174.3178082300042]
Test Case: 353 | Input/Output: [[59.748656973197626 84] 143.74865697319763]
Test Case: 354 | Input/Output: [[-15.63983150483945 67] 51.36016849516055]
Test Case: 355 | Input/Output: [[-40.01864473596437 72] 31.981355264035628]
Test Case: 356 | Input/Output: [[-33.90005599406723 -25] -58.90005599406723]
Test Case: 357 | Input/Output: [[-99.2726110062083 -76] -175.2726110062083]
Test Case: 358 | Input/Output: [[-47.23760473243743 -73] -120.23760473243743]
Test Case: 359 | Input/Output: [[-35.82734910308143 68] 32.17265089691857]
Test Case: 360 | Input/Output: [[-13.096164831576004 -52] -65.096164831576]
Test Case: 361 | Input/Output: [[-63.25497432548346 -28] -91.25497432548346]
Test Case: 362 | Input/Output: [[-71.90957758237803 64] -7.909577582378034]
Test Case: 363 | Input/Output: [[98.13098385267244 45] 143.13098385267244]
Test Case: 364 | Input/Output: [[99.67157441207647 -78] 21.671574412076467]
Test Case: 365 | Input/Output: [[79.296752642423 -100] -20.703247357577]
Test Case: 366 | Input/Output: [[-52.47250349836256 9] -43.47250349836256]
Test Case: 367 | Input/Output: [[-81.05275615027563 -75] -156.05275615027563]
Test Case: 368 | Input/Output: [[-87.55894704679848 -74] -161.5589470467985]
Test Case: 369 | Input/Output: [[58.48984945296084 83] 141.48984945296084]
Test Case: 370 | Input/Output: [[45.83365611500662 -36] 9.833656115006619]
Test Case: 371 | Input/Output: [[-48.42334843500397 0] -48.42334843500397]
Test Case: 372 | Input/Output: [[-65.899280926252 -62] -127.899280926252]
Test Case: 373 | Input/Output: [[0.515128987591055 7] 7.515128987591055]
Test Case: 374 | Input/Output: [[-98.74202728741352 -1] -99.74202728741352]
Test Case: 375 | Input/Output: [[-22.647290162302227 -17] -39.64729016230223]
Test Case: 376 | Input/Output: [[16.04466995236848 -8] 8.04466995236848]
Test Case: 377 | Input/Output: [[-67.31017170394932 42] -25.310171703949322]
Test Case: 378 | Input/Output: [[51.351150055987944 80] 131.35115005598794]
Test Case: 379 | Input/Output: [[-62.51455142275035 69] 6.485448577249649]
Test Case: 380 | Input/Output: [[-86.29197369508377 -96] -182.29197369508375]
Test Case: 381 | Input/Output: [[77.44068273794309 -35] 42.44068273794309]
Test Case: 382 | Input/Output: [[12.476943974756296 39] 51.476943974756296]
Test Case: 383 | Input/Output: [[-50.916738424312015 47] -3.9167384243120154]
Test Case: 384 | Input/Output: [[-40.2551959182877 8] -32.2551959182877]
Test Case: 385 | Input/Output: [[-57.45663226420603 76] 18.54336773579397]
Test Case: 386 | Input/Output: [[-37.338954146901806 -44] -81.33895414690181]
Test Case: 387 | Input/Output: [[90.60491505523589 -40] 50.60491505523589]
Test Case: 388 | Input/Output: [[-59.85469432598827 72] 12.14530567401173]
Test Case: 389 | Input/Output: [[64.41218457691951 -78] -13.587815423080485]
Test Case: 390 | Input/Output: [[-10.569408307134282 -2] -12.569408307134282]
Test Case: 391 | Input/Output: [[-37.1749179972801 15] -22.174917997280097]
Test Case: 392 | Input/Output: [[-26.862089686541665 -85] -111.86208968654167]
Test Case: 393 | Input/Output: [[3.5168666410815064 -50] -46.483133358918494]
Test Case: 394 | Input/Output: [[-71.91550306498324 -6] -77.91550306498324]
Test Case: 395 | Input/Output: [[90.27978601238752 89] 179.27978601238752]
Test Case: 396 | Input/Output: [[-84.2946051957 40] -44.2946051957]
Test Case: 397 | Input/Output: [[57.913090462789995 -94] -36.086909537210005]
Test Case: 398 | Input/Output: [[19.320403897929154 -16] 3.320403897929154]
Test Case: 399 | Input/Output: [[-54.17457840144782 -75] -129.17457840144783]
Test Case: 400 | Input/Output: [[-69.46555258943015 -76] -145.46555258943016]
Test Case: 401 | Input/Output: [[-94.40817855049018 21] -73.40817855049018]
Test Case: 402 | Input/Output: [[3.3968913788265667 -86] -82.60310862117343]
Test Case: 403 | Input/Output: [[51.51133748901964 86] 137.51133748901964]
Test Case: 404 | Input/Output: [[13.429121577408367 58] 71.42912157740837]
Test Case: 405 | Input/Output: [[-77.03687192494384 40] -37.03687192494384]
Test Case: 406 | Input/Output: [[-59.11671441660042 71] 11.883285583399577]
Test Case: 407 | Input/Output: [[-67.56650075448962 -38] -105.56650075448962]
Test Case: 408 | Input/Output: [[43.84748144227683 -23] 20.84748144227683]
Test Case: 409 | Input/Output: [[-3.376374465788288 -36] -39.37637446578829]
Test Case: 410 | Input/Output: [[16.98143171319056 -82] -65.01856828680944]
Test Case: 411 | Input/Output: [[83.67651816755887 -36] 47.67651816755887]
Test Case: 412 | Input/Output: [[-94.60693410985037 -18] -112.60693410985037]
Test Case: 413 | Input/Output: [[8.209268101769311 -51] -42.79073189823069]
Test Case: 414 | Input/Output: [[-2.467120660396361 15] 12.532879339603639]
Test Case: 415 | Input/Output: [[87.31434187189043 88] 175.31434187189043]
Test Case: 416 | Input/Output: [[-3.986696126992541 -47] -50.98669612699254]
Test Case: 417 | Input/Output: [[63.519543335019506 29] 92.5195433350195]
Test Case: 418 | Input/Output: [[-86.65894810246051 62] -24.658948102460513]
Test Case: 419 | Input/Output: [[-96.5353082681053 -68] -164.5353082681053]
Test Case: 420 | Input/Output: [[41.12187009226139 -69] -27.87812990773861]
Test Case: 421 | Input/Output: [[-91.97026517182347 98] 6.0297348281765295]
Test Case: 422 | Input/Output: [[40.54288702827958 -63] -22.45711297172042]
Test Case: 423 | Input/Output: [[45.610755069357964 -20] 25.610755069357964]
Test Case: 424 | Input/Output: [[53.26539953133894 44] 97.26539953133894]
Test Case: 425 | Input/Output: [[86.7440425723039 -66] 20.744042572303897]
Test Case: 426 | Input/Output: [[21.544998553417344 -9] 12.544998553417344]
Test Case: 427 | Input/Output: [[-57.52948826339346 84] 26.47051173660654]
Test Case: 428 | Input/Output: [[-2.2866436082261856 -63] -65.28664360822619]
Test Case: 429 | Input/Output: [[-97.57050719557401 81] -16.57050719557401]
Test Case: 430 | Input/Output: [[25.465100211181067 -84] -58.53489978881893]
Test Case: 431 | Input/Output: [[-39.31970992577145 -56] -95.31970992577145]
Test Case: 432 | Input/Output: [[66.31646509138426 -60] 6.316465091384259]
Test Case: 433 | Input/Output: [[36.25223657223091 71] 107.25223657223091]
Test Case: 434 | Input/Output: [[-59.55634849872422 38] -21.55634849872422]
Test Case: 435 | Input/Output: [[11.196829929969226 -96] -84.80317007003077]
Test Case: 436 | Input/Output: [[-89.17114885415634 -5] -94.17114885415634]
Test Case: 437 | Input/Output: [[-73.54315052547824 -85] -158.54315052547824]
Test Case: 438 | Input/Output: [[18.84868177001367 98] 116.84868177001367]
Test Case: 439 | Input/Output: [[99.9725778689592 80] 179.9725778689592]
Test Case: 440 | Input/Output: [[90.78376047764422 23] 113.78376047764422]
Test Case: 441 | Input/Output: [[-55.20059741884238 -90] -145.2005974188424]
Test Case: 442 | Input/Output: [[20.76413235375844 79] 99.76413235375844]
Test Case: 443 | Input/Output: [[-60.87972826409413 36] -24.879728264094133]
Test Case: 444 | Input/Output: [[-16.35968215835139 42] 25.64031784164861]
Test Case: 445 | Input/Output: [[51.39375095010561 65] 116.39375095010561]
Test Case: 446 | Input/Output: [[18.376107761798124 -90] -71.62389223820188]
Test Case: 447 | Input/Output: [[63.240237475084484 34] 97.24023747508448]
Test Case: 448 | Input/Output: [[97.86953114214205 18] 115.86953114214205]
Test Case: 449 | Input/Output: [[-23.286013681053902 90] 66.7139863189461]
Test Case: 450 | Input/Output: [[-4.342412231865467 -17] -21.342412231865467]
Test Case: 451 | Input/Output: [[-87.88205528856822 47] -40.882055288568225]
Test Case: 452 | Input/Output: [[-46.77662061986199 85] 38.22337938013801]
Test Case: 453 | Input/Output: [[28.223003739453475 73] 101.22300373945347]
Test Case: 454 | Input/Output: [[11.32544419097951 78] 89.32544419097951]
Test Case: 455 | Input/Output: [[3.978889896537339 77] 80.97888989653734]
Test Case: 456 | Input/Output: [[9.457830716261853 1] 10.457830716261853]
Test Case: 457 | Input/Output: [[-72.83388338130199 59] -13.833883381301987]
Test Case: 458 | Input/Output: [[37.08887892035321 85] 122.08887892035321]
Test Case: 459 | Input/Output: [[-88.28523001021809 24] -64.28523001021809]
Test Case: 460 | Input/Output: [[-74.39370586387457 -94] -168.39370586387457]
Test Case: 461 | Input/Output: [[3.837964375347539 22] 25.83796437534754]
Test Case: 462 | Input/Output: [[0.574291087407957 -53] -52.42570891259204]
Test Case: 463 | Input/Output: [[24.006949367871158 81] 105.00694936787116]
Test Case: 464 | Input/Output: [[-41.03461971875117 71] 29.965380281248827]
Test Case: 465 | Input/Output: [[-57.978666334672994 -87] -144.978666334673]
Test Case: 466 | Input/Output: [[-80.17311941557459 -2] -82.17311941557459]
Test Case: 467 | Input/Output: [[-17.736903703648466 -78] -95.73690370364847]
Test Case: 468 | Input/Output: [[-88.27826281237223 62] -26.278262812372233]
Test Case: 469 | Input/Output: [[74.63980551397677 -37] 37.63980551397677]
Test Case: 470 | Input/Output: [[24.12450020788664 13] 37.12450020788664]
Test Case: 471 | Input/Output: [[-65.40291502445913 -56] -121.40291502445913]
Test Case: 472 | Input/Output: [[-2.9485358739614185 -65] -67.94853587396142]
Test Case: 473 | Input/Output: [[75.32760519479032 -15] 60.32760519479032]
Test Case: 474 | Input/Output: [[-6.780106168444135 77] 70.21989383155586]
Test Case: 475 | Input/Output: [[-95.86557065003794 -36] -131.86557065003794]
Test Case: 476 | Input/Output: [[86.55682277393669 92] 178.5568227739367]
Test Case: 477 | Input/Output: [[-94.48859035432827 58] -36.48859035432827]
Test Case: 478 | Input/Output: [[-68.42572428031801 -32] -100.42572428031801]
Test Case: 479 | Input/Output: [[-32.9575338984248 2] -30.9575338984248]
Test Case: 480 | Input/Output: [[-47.331342456336614 83] 35.668657543663386]
Test Case: 481 | Input/Output: [[-44.92127242380204 -91] -135.92127242380204]
Test Case: 482 | Input/Output: [[-34.84072935489786 -53] -87.84072935489786]
Test Case: 483 | Input/Output: [[11.124199209965568 15] 26.124199209965568]
Test Case: 484 | Input/Output: [[35.02114065582447 69] 104.02114065582447]
Test Case: 485 | Input/Output: [[32.038313295107855 -15] 17.038313295107855]
Test Case: 486 | Input/Output: [[-24.19386340858867 61] 36.80613659141133]
Test Case: 487 | Input/Output: [[-84.83343193624361 24] -60.83343193624361]
Test Case: 488 | Input/Output: [[80.77777043284252 100] 180.77777043284252]
Test Case: 489 | Input/Output: [[8.771677357549407 14] 22.771677357549407]
Test Case: 490 | Input/Output: [[-93.03214934246814 51] -42.032149342468145]
Test Case: 491 | Input/Output: [[37.55375267422849 -29] 8.553752674228491]
Test Case: 492 | Input/Output: [[-61.868303658432566 -57] -118.86830365843257]
Test Case: 493 | Input/Output: [[82.96846982223155 1] 83.96846982223155]
Test Case: 494 | Input/Output: [[-86.67732303936104 -56] -142.67732303936106]
Test Case: 495 | Input/Output: [[-66.02033459851413 -90] -156.02033459851413]
Test Case: 496 | Input/Output: [[-27.893071385602596 11] -16.893071385602596]
Test Case: 497 | Input/Output: [[-15.688595099336595 -35] -50.688595099336595]
Test Case: 498 | Input/Output: [[36.53000210771924 27] 63.53000210771924]
Test Case: 499 | Input/Output: [[12.870250665324704 25] 37.870250665324704]
Test Case: 500 | Input/Output: [[-25.77700691569089 31] 5.22299308430911]
Test Case: 501 | Input/Output: [[69.66177804557339 30] 99.66177804557339]
Test Case: 502 | Input/Output: [[55.34959582312919 31] 86.34959582312919]
Test Case: 503 | Input/Output: [[56.79947835326266 22] 78.79947835326266]
Test Case: 504 | Input/Output: [[-61.019013973492456 4] -57.019013973492456]
Test Case: 505 | Input/Output: [[89.49673355995353 64] 153.49673355995353]
Test Case: 506 | Input/Output: [[-42.43562192404513 -10] -52.43562192404513]
Test Case: 507 | Input/Output: [[-70.17433931097744 14] -56.174339310977444]
Test Case: 508 | Input/Output: [[43.792722043433855 -7] 36.792722043433855]
Test Case: 509 | Input/Output: [[9.50184404685794 -67] -57.49815595314206]
Test Case: 510 | Input/Output: [[-39.43537633767471 -28] -67.43537633767471]
Test Case: 511 | Input/Output: [[-21.58213837351532 28] 6.4178616264846795]
Test Case: 512 | Input/Output: [[-69.77740631895297 39] -30.77740631895297]
Test Case: 513 | Input/Output: [[-85.77830180818616 -61] -146.77830180818614]
Test Case: 514 | Input/Output: [[20.326165264730406 -20] 0.3261652647304061]
Test Case: 515 | Input/Output: [[19.410243045722453 57] 76.41024304572245]
Test Case: 516 | Input/Output: [[-88.54606168666248 -85] -173.54606168666248]
Test Case: 517 | Input/Output: [[-83.8040306132111 -70] -153.8040306132111]
Test Case: 518 | Input/Output: [[-38.123931147212616 0] -38.123931147212616]
Test Case: 519 | Input/Output: [[76.22715003888092 18] 94.22715003888092]
Test Case: 520 | Input/Output: [[23.340009330153677 99] 122.34000933015368]
Test Case: 521 | Input/Output: [[66.71212798084107 79] 145.71212798084107]
Test Case: 522 | Input/Output: [[-58.579177679778205 -7] -65.57917767977821]
Test Case: 523 | Input/Output: [[-66.48398736420717 81] 14.516012635792833]
Test Case: 524 | Input/Output: [[-38.07254105465634 81] 42.92745894534366]
Test Case: 525 | Input/Output: [[44.3856832448711 82] 126.3856832448711]
Test Case: 526 | Input/Output: [[-63.19968359102239 11] -52.19968359102239]
Test Case: 527 | Input/Output: [[44.030150228525656 -54] -9.969849771474344]
Test Case: 528 | Input/Output: [[-99.24032742258284 -83] -182.24032742258282]
Test Case: 529 | Input/Output: [[-86.56862485642844 -68] -154.56862485642844]
Test Case: 530 | Input/Output: [[78.62543478584922 53] 131.62543478584922]
Test Case: 531 | Input/Output: [[36.891744706156004 88] 124.891744706156]
Test Case: 532 | Input/Output: [[24.305426787530607 42] 66.3054267875306]
Test Case: 533 | Input/Output: [[-1.3332080088450908 -64] -65.33320800884509]
Test Case: 534 | Input/Output: [[-44.91039714344889 14] -30.91039714344889]
Test Case: 535 | Input/Output: [[-36.907642090074624 58] 21.092357909925376]
Test Case: 536 | Input/Output: [[60.687328391856084 -97] -36.312671608143916]
Test Case: 537 | Input/Output: [[89.78064430147683 -10] 79.78064430147683]
Test Case: 538 | Input/Output: [[-34.672908404116896 -74] -108.6729084041169]
Test Case: 539 | Input/Output: [[75.81188057851139 94] 169.8118805785114]
Test Case: 540 | Input/Output: [[44.61597141040531 -93] -48.38402858959469]
Test Case: 541 | Input/Output: [[69.29714349124396 12] 81.29714349124396]
Test Case: 542 | Input/Output: [[63.79592085237755 -24] 39.79592085237755]
Test Case: 543 | Input/Output: [[66.66933663153867 54] 120.66933663153867]
Test Case: 544 | Input/Output: [[-85.3968946676807 -8] -93.3968946676807]
Test Case: 545 | Input/Output: [[43.93103264066772 -14] 29.931032640667723]
Test Case: 546 | Input/Output: [[-34.91489764795884 -21] -55.91489764795884]
Test Case: 547 | Input/Output: [[23.212368455624272 -78] -54.78763154437573]
Test Case: 548 | Input/Output: [[-64.16253329950206 62] -2.1625332995020585]
Test Case: 549 | Input/Output: [[-84.71555325563253 -61] -145.71555325563253]
Test Case: 550 | Input/Output: [[39.0232835394653 -97] -57.9767164605347]
Test Case: 551 | Input/Output: [[14.228608072539515 32] 46.228608072539515]
Test Case: 552 | Input/Output: [[-93.42074377289433 -67] -160.42074377289433]
Test Case: 553 | Input/Output: [[62.175996237149405 -42] 20.175996237149405]
Test Case: 554 | Input/Output: [[28.047132569734146 -85] -56.952867430265854]
Test Case: 555 | Input/Output: [[12.785253467192035 -46] -33.214746532807965]
Test Case: 556 | Input/Output: [[5.252879940273388 93] 98.25287994027339]
Test Case: 557 | Input/Output: [[24.858617277833048 -9] 15.858617277833048]
Test Case: 558 | Input/Output: [[-89.51968142096828 9] -80.51968142096828]
Test Case: 559 | Input/Output: [[-96.83472596021636 -44] -140.83472596021636]
Test Case: 560 | Input/Output: [[-41.77450440805504 94] 52.22549559194496]
Test Case: 561 | Input/Output: [[-60.626517956564506 -28] -88.6265179565645]
Test Case: 562 | Input/Output: [[96.91064437872114 34] 130.91064437872114]
Test Case: 563 | Input/Output: [[29.499080520515776 -48] -18.500919479484224]
Test Case: 564 | Input/Output: [[2.0852582672130637 51] 53.085258267213064]
Test Case: 565 | Input/Output: [[64.4711047074795 36] 100.4711047074795]
Test Case: 566 | Input/Output: [[-46.931846218649454 53] 6.068153781350546]
Test Case: 567 | Input/Output: [[-27.188929573468073 -16] -43.18892957346807]
Test Case: 568 | Input/Output: [[3.875686146263618 59] 62.87568614626362]
Test Case: 569 | Input/Output: [[43.11045080043334 -97] -53.88954919956666]
Test Case: 570 | Input/Output: [[17.24426169486864 -75] -57.75573830513136]
Test Case: 571 | Input/Output: [[-23.053531674290696 -82] -105.0535316742907]
Test Case: 572 | Input/Output: [[-19.64667031436626 69] 49.35332968563374]
Test Case: 573 | Input/Output: [[-9.757244350007781 -21] -30.75724435000778]
Test Case: 574 | Input/Output: [[-56.05490798258978 35] -21.054907982589782]
Test Case: 575 | Input/Output: [[-31.931674415408878 -94] -125.93167441540888]
Test Case: 576 | Input/Output: [[-21.495828650636767 93] 71.50417134936323]
Test Case: 577 | Input/Output: [[-83.2920614688591 18] -65.2920614688591]
Test Case: 578 | Input/Output: [[-71.9688415869232 53] -18.968841586923205]
Test Case: 579 | Input/Output: [[-71.37304350851954 11] -60.373043508519544]
Test Case: 580 | Input/Output: [[-42.29995575450123 82] 39.70004424549877]
Test Case: 581 | Input/Output: [[-98.0201227931859 0] -98.0201227931859]
Test Case: 582 | Input/Output: [[-39.02526910664963 -39] -78.02526910664963]
Test Case: 583 | Input/Output: [[-73.67720413731189 54] -19.67720413731189]
Test Case: 584 | Input/Output: [[-28.943192746065876 -80] -108.94319274606588]
Test Case: 585 | Input/Output: [[86.99586012397913 22] 108.99586012397913]
Test Case: 586 | Input/Output: [[93.07943173561856 -50] 43.079431735618556]
Test Case: 587 | Input/Output: [[41.010130785490304 -54] -12.989869214509696]
Test Case: 588 | Input/Output: [[99.08722364590648 49] 148.08722364590648]
Test Case: 589 | Input/Output: [[-3.834837426454385 -24] -27.834837426454385]
Test Case: 590 | Input/Output: [[-79.79758793023679 -89] -168.79758793023677]
Test Case: 591 | Input/Output: [[-79.22704542057105 -70] -149.22704542057105]
Test Case: 592 | Input/Output: [[-89.81032876256958 -28] -117.81032876256958]
Test Case: 593 | Input/Output: [[-22.34117544310628 -39] -61.34117544310628]
Test Case: 594 | Input/Output: [[-63.80344354669067 67] 3.196556453309327]
Test Case: 595 | Input/Output: [[68.80051897433461 -57] 11.800518974334608]
Test Case: 596 | Input/Output: [[-72.27245942060773 69] -3.2724594206077313]
Test Case: 597 | Input/Output: [[7.409845109116404 21] 28.409845109116404]
Test Case: 598 | Input/Output: [[-2.060554792682126 65] 62.939445207317874]
Test Case: 599 | Input/Output: [[16.773238148332425 -21] -4.226761851667575]
Test Case: 600 | Input/Output: [[-32.91735934386459 19] -13.91735934386459]
Test Case: 601 | Input/Output: [[-56.294904892275376 96] 39.705095107724624]
Test Case: 602 | Input/Output: [[-50.275899449806396 34] -16.275899449806396]
Test Case: 603 | Input/Output: [[34.37858658259282 75] 109.37858658259282]
Test Case: 604 | Input/Output: [[-85.58181847383048 -81] -166.58181847383048]
Test Case: 605 | Input/Output: [[-79.13154852576973 -43] -122.13154852576973]
Test Case: 606 | Input/Output: [[70.06500730788485 -83] -12.934992692115145]
Test Case: 607 | Input/Output: [[-33.314577120713466 -41] -74.31457712071347]
Test Case: 608 | Input/Output: [[4.48007228201341 22] 26.48007228201341]
Test Case: 609 | Input/Output: [[-82.32464337656033 -13] -95.32464337656033]
Test Case: 610 | Input/Output: [[27.93623730538374 73] 100.93623730538374]
Test Case: 611 | Input/Output: [[-48.234804963421205 17] -31.234804963421205]
Test Case: 612 | Input/Output: [[94.082401103862 -51] 43.082401103862]
Test Case: 613 | Input/Output: [[66.90782044634491 -20] 46.907820446344914]
Test Case: 614 | Input/Output: [[-93.9113914679875 34] -59.9113914679875]
Test Case: 615 | Input/Output: [[-94.87626925809083 29] -65.87626925809083]
Test Case: 616 | Input/Output: [[30.793025133502567 -12] 18.793025133502567]
Test Case: 617 | Input/Output: [[5.611313264212953 51] 56.61131326421295]
Test Case: 618 | Input/Output: [[67.67436290991091 46] 113.67436290991091]
Test Case: 619 | Input/Output: [[79.47821249221579 76] 155.4782124922158]
Test Case: 620 | Input/Output: [[-88.52934083658641 -28] -116.52934083658641]
Test Case: 621 | Input/Output: [[82.33150873609739 -55] 27.33150873609739]
Test Case: 622 | Input/Output: [[-9.705562281026431 -30] -39.70556228102643]
Test Case: 623 | Input/Output: [[33.21780498058661 83] 116.2178049805866]
Test Case: 624 | Input/Output: [[92.23600129464737 77] 169.23600129464737]
Test Case: 625 | Input/Output: [[46.032281062886824 33] 79.03228106288682]
Test Case: 626 | Input/Output: [[30.908083711702915 -56] -25.091916288297085]
Test Case: 627 | Input/Output: [[75.13421089446214 -69] 6.134210894462143]
Test Case: 628 | Input/Output: [[31.924470777543746 92] 123.92447077754375]
Test Case: 629 | Input/Output: [[-64.73188499338374 35] -29.731884993383744]
Test Case: 630 | Input/Output: [[30.67597868782869 3] 33.67597868782869]
Test Case: 631 | Input/Output: [[-20.60678465527512 35] 14.39321534472488]
Test Case: 632 | Input/Output: [[-59.44636137898529 -60] -119.44636137898529]
Test Case: 633 | Input/Output: [[59.53216812467818 69] 128.53216812467818]
Test Case: 634 | Input/Output: [[7.932313781131086 -19] -11.067686218868914]
Test Case: 635 | Input/Output: [[79.46312966655572 12] 91.46312966655572]
Test Case: 636 | Input/Output: [[29.76608800349419 -89] -59.23391199650581]
Test Case: 637 | Input/Output: [[35.57084401984949 -61] -25.42915598015051]
Test Case: 638 | Input/Output: [[61.156492952978084 -75] -13.843507047021916]
Test Case: 639 | Input/Output: [[-41.55722974479452 -90] -131.5572297447945]
Test Case: 640 | Input/Output: [[40.96067105283669 -96] -55.03932894716331]
Test Case: 641 | Input/Output: [[96.22484030651799 -81] 15.22484030651799]
Test Case: 642 | Input/Output: [[-86.2034748965855 -8] -94.2034748965855]
Test Case: 643 | Input/Output: [[38.45623200625994 87] 125.45623200625994]
Test Case: 644 | Input/Output: [[82.9130507312156 -60] 22.913050731215606]
Test Case: 645 | Input/Output: [[62.501955578505545 -42] 20.501955578505545]
Test Case: 646 | Input/Output: [[45.57170100254288 -15] 30.57170100254288]
Test Case: 647 | Input/Output: [[-2.313321173746587 -51] -53.31332117374659]
Test Case: 648 | Input/Output: [[13.951072333460473 14] 27.951072333460473]
Test Case: 649 | Input/Output: [[56.75144558052881 -26] 30.75144558052881]
Test Case: 650 | Input/Output: [[49.753363148406436 8] 57.753363148406436]
Test Case: 651 | Input/Output: [[-69.28143626774855 -100] -169.28143626774855]
Test Case: 652 | Input/Output: [[6.675034579009548 20] 26.675034579009548]
Test Case: 653 | Input/Output: [[-73.98103760622807 -66] -139.98103760622809]
Test Case: 654 | Input/Output: [[-78.65057539124531 -52] -130.6505753912453]
Test Case: 655 | Input/Output: [[26.24119083826193 -57] -30.75880916173807]
Test Case: 656 | Input/Output: [[-62.042664900055364 26] -36.042664900055364]
Test Case: 657 | Input/Output: [[-53.91006236442273 97] 43.08993763557727]
Test Case: 658 | Input/Output: [[-44.18578246873839 -58] -102.18578246873838]
Test Case: 659 | Input/Output: [[-85.87472897512029 -36] -121.87472897512029]
Test Case: 660 | Input/Output: [[52.1915387562523 -30] 22.1915387562523]
Test Case: 661 | Input/Output: [[-44.95561837901605 -95] -139.95561837901604]
Test Case: 662 | Input/Output: [[1.5268909270848212 40] 41.52689092708482]
Test Case: 663 | Input/Output: [[-7.529528098988905 -41] -48.529528098988905]
Test Case: 664 | Input/Output: [[-8.294736737210044 5] -3.2947367372100445]
Test Case: 665 | Input/Output: [[52.566346303982755 59] 111.56634630398275]
Test Case: 666 | Input/Output: [[76.61100408292617 32] 108.61100408292617]
Test Case: 667 | Input/Output: [[62.09684387658814 74] 136.09684387658814]
Test Case: 668 | Input/Output: [[-47.1620374716208 -73] -120.1620374716208]
Test Case: 669 | Input/Output: [[-3.4773380683911626 2] -1.4773380683911626]
Test Case: 670 | Input/Output: [[-71.63941087177584 46] -25.639410871775837]
Test Case: 671 | Input/Output: [[43.892856393387746 -48] -4.107143606612254]
Test Case: 672 | Input/Output: [[33.96934246431772 -47] -13.03065753568228]
Test Case: 673 | Input/Output: [[63.26450811229648 58] 121.26450811229648]
Test Case: 674 | Input/Output: [[-98.10608140094456 -80] -178.10608140094456]
Test Case: 675 | Input/Output: [[17.625903819081074 -24] -6.374096180918926]
Test Case: 676 | Input/Output: [[-98.88793573292409 -21] -119.88793573292409]
Test Case: 677 | Input/Output: [[54.920245443016256 -25] 29.920245443016256]
Test Case: 678 | Input/Output: [[71.40461374343039 -24] 47.40461374343039]
Test Case: 679 | Input/Output: [[-68.75099615636988 -79] -147.75099615636987]
Test Case: 680 | Input/Output: [[-60.06726610214395 87] 26.932733897856053]
Test Case: 681 | Input/Output: [[-23.321958272481496 37] 13.678041727518504]
Test Case: 682 | Input/Output: [[23.840213825702293 18] 41.84021382570229]
Test Case: 683 | Input/Output: [[-96.36392725419529 40] -56.36392725419529]
Test Case: 684 | Input/Output: [[-84.49558186566517 -1] -85.49558186566517]
Test Case: 685 | Input/Output: [[-25.575123137461063 -59] -84.57512313746106]
Test Case: 686 | Input/Output: [[-37.25476488460735 -92] -129.25476488460734]
Test Case: 687 | Input/Output: [[-80.51969422148846 -71] -151.51969422148846]
Test Case: 688 | Input/Output: [[10.018539198187312 96] 106.01853919818731]
Test Case: 689 | Input/Output: [[-27.78363429353297 12] -15.78363429353297]
Test Case: 690 | Input/Output: [[17.19999908925554 -17] 0.19999908925554166]
Test Case: 691 | Input/Output: [[-69.80514750040936 1] -68.80514750040936]
Test Case: 692 | Input/Output: [[-30.30934383224617 72] 41.69065616775383]
Test Case: 693 | Input/Output: [[38.40655175879016 40] 78.40655175879016]
Test Case: 694 | Input/Output: [[-19.516957598720126 -24] -43.516957598720126]
Test Case: 695 | Input/Output: [[-95.73018991349882 1] -94.73018991349882]
Test Case: 696 | Input/Output: [[3.9733548193912753 -8] -4.026645180608725]
Test Case: 697 | Input/Output: [[-57.92806333049392 56] -1.92806333049392]
Test Case: 698 | Input/Output: [[58.14778616521957 -24] 34.14778616521957]
Test Case: 699 | Input/Output: [[18.5395028293933 -33] -14.4604971706067]
Test Case: 700 | Input/Output: [[15.17302827864799 -96] -80.82697172135201]
Test Case: 701 | Input/Output: [[84.27364939642189 -71] 13.273649396421888]
Test Case: 702 | Input/Output: [[-98.0322360369087 97] -1.0322360369086994]
Test Case: 703 | Input/Output: [[88.53784170490374 7] 95.53784170490374]
Test Case: 704 | Input/Output: [[-89.04982693070214 15] -74.04982693070214]
Test Case: 705 | Input/Output: [[74.85051454045652 -55] 19.850514540456516]
Test Case: 706 | Input/Output: [[29.683615319425655 100] 129.68361531942566]
Test Case: 707 | Input/Output: [[99.26577895893192 -21] 78.26577895893192]
Test Case: 708 | Input/Output: [[-39.172968391975196 85] 45.827031608024804]
Test Case: 709 | Input/Output: [[-87.8782254839713 96] 8.121774516028694]
Test Case: 710 | Input/Output: [[-75.45633878848665 -69] -144.45633878848665]
Test Case: 711 | Input/Output: [[-62.17474052510106 28] -34.17474052510106]
Test Case: 712 | Input/Output: [[-36.465171271923126 -13] -49.465171271923126]
Test Case: 713 | Input/Output: [[51.837194375736544 65] 116.83719437573654]
Test Case: 714 | Input/Output: [[65.68168017951675 61] 126.68168017951675]
Test Case: 715 | Input/Output: [[22.847011374756704 66] 88.8470113747567]
Test Case: 716 | Input/Output: [[65.2209780539495 -28] 37.220978053949494]
Test Case: 717 | Input/Output: [[-89.2235775872704 -24] -113.2235775872704]
Test Case: 718 | Input/Output: [[75.40829983876702 29] 104.40829983876702]
Test Case: 719 | Input/Output: [[-63.115675001213575 -43] -106.11567500121357]
Test Case: 720 | Input/Output: [[83.90264776249316 86] 169.90264776249316]
Test Case: 721 | Input/Output: [[79.56574530187609 -48] 31.565745301876092]
Test Case: 722 | Input/Output: [[47.88012030231087 80] 127.88012030231087]
Test Case: 723 | Input/Output: [[36.720575560358526 -54] -17.279424439641474]
Test Case: 724 | Input/Output: [[-0.3376011273124959 -20] -20.337601127312496]
Test Case: 725 | Input/Output: [[-86.15186474851693 49] -37.15186474851693]
Test Case: 726 | Input/Output: [[57.62095258798479 85] 142.6209525879848]
Test Case: 727 | Input/Output: [[-97.11386982505195 36] -61.11386982505195]
Test Case: 728 | Input/Output: [[1.8824793974662697 3] 4.88247939746627]
Test Case: 729 | Input/Output: [[-77.72284010530441 26] -51.722840105304414]
Test Case: 730 | Input/Output: [[-0.24165552438506666 -9] -9.241655524385067]
Test Case: 731 | Input/Output: [[84.3376041559161 81] 165.3376041559161]
Test Case: 732 | Input/Output: [[-32.839770484588456 -96] -128.83977048458846]
Test Case: 733 | Input/Output: [[-77.9537516479967 -27] -104.9537516479967]
Test Case: 734 | Input/Output: [[51.259489774818746 -79] -27.740510225181254]
Test Case: 735 | Input/Output: [[55.31655378774161 36] 91.31655378774161]
Test Case: 736 | Input/Output: [[-19.194879170867267 93] 73.80512082913273]
Test Case: 737 | Input/Output: [[69.90182593911041 70] 139.9018259391104]
Test Case: 738 | Input/Output: [[-25.82734523624248 7] -18.82734523624248]
Test Case: 739 | Input/Output: [[-84.48146855977112 -76] -160.48146855977112]
Test Case: 740 | Input/Output: [[82.73589633470428 -96] -13.264103665295721]
Test Case: 741 | Input/Output: [[27.555665495791246 42] 69.55566549579125]
Test Case: 742 | Input/Output: [[-5.548967967033008 16] 10.451032032966992]
Test Case: 743 | Input/Output: [[73.19973106186521 -24] 49.19973106186521]
Test Case: 744 | Input/Output: [[70.93306182298801 -78] -7.066938177011991]
Test Case: 745 | Input/Output: [[95.79172659650592 -8] 87.79172659650592]
Test Case: 746 | Input/Output: [[-5.684146776192705 -26] -31.684146776192705]
Test Case: 747 | Input/Output: [[57.79689412152692 76] 133.79689412152692]
Test Case: 748 | Input/Output: [[-66.1070230268841 84] 17.892976973115907]
Test Case: 749 | Input/Output: [[-98.35832313921271 1] -97.35832313921271]
Test Case: 750 | Input/Output: [[36.35569544793748 68] 104.35569544793748]
Test Case: 751 | Input/Output: [[95.21223002676462 69] 164.21223002676462]
Test Case: 752 | Input/Output: [[-19.574507565566492 -5] -24.574507565566492]
Test Case: 753 | Input/Output: [[-75.28030601947447 20] -55.280306019474466]
Test Case: 754 | Input/Output: [[-48.6456543728365 69] 20.354345627163497]
Test Case: 755 | Input/Output: [[-32.912676660890014 67] 34.087323339109986]
Test Case: 756 | Input/Output: [[-43.047769072450116 52] 8.952230927549884]
Test Case: 757 | Input/Output: [[-65.22542946482056 -71] -136.22542946482056]
Test Case: 758 | Input/Output: [[52.880620426075296 -39] 13.880620426075296]
Test Case: 759 | Input/Output: [[53.94472331551631 -79] -25.055276684483687]
Test Case: 760 | Input/Output: [[-26.60726469452392 81] 54.39273530547608]
Test Case: 761 | Input/Output: [[33.186332202407954 -90] -56.813667797592046]
Test Case: 762 | Input/Output: [[14.871803196006141 21] 35.87180319600614]
Test Case: 763 | Input/Output: [[-29.08925534274769 -72] -101.08925534274769]
Test Case: 764 | Input/Output: [[-81.39729896288668 56] -25.39729896288668]
Test Case: 765 | Input/Output: [[40.5780347200421 67] 107.5780347200421]
Test Case: 766 | Input/Output: [[27.127915511158733 -8] 19.127915511158733]
Test Case: 767 | Input/Output: [[-32.36081331185436 -5] -37.36081331185436]
Test Case: 768 | Input/Output: [[-55.721572126585414 47] -8.721572126585414]
Test Case: 769 | Input/Output: [[32.552238090852484 50] 82.55223809085248]
Test Case: 770 | Input/Output: [[-7.378989537866133 15] 7.621010462133867]
Test Case: 771 | Input/Output: [[62.48165749515309 -96] -33.51834250484691]
Test Case: 772 | Input/Output: [[5.135609487190379 33] 38.13560948719038]
Test Case: 773 | Input/Output: [[-89.98163512663044 -94] -183.98163512663044]
Test Case: 774 | Input/Output: [[70.62891215199326 -20] 50.62891215199326]
Test Case: 775 | Input/Output: [[-53.97158272347626 -87] -140.97158272347627]
Test Case: 776 | Input/Output: [[56.476188421539746 96] 152.47618842153975]
Test Case: 777 | Input/Output: [[21.090035173950227 -38] -16.909964826049773]
Test Case: 778 | Input/Output: [[2.3273611657037065 -66] -63.67263883429629]
Test Case: 779 | Input/Output: [[-98.8076180364235 63] -35.807618036423506]
Test Case: 780 | Input/Output: [[-98.81542471096087 78] -20.81542471096087]
Test Case: 781 | Input/Output: [[-30.17648302220441 36] 5.823516977795592]
Test Case: 782 | Input/Output: [[-16.670805164133924 5] -11.670805164133924]
Test Case: 783 | Input/Output: [[-45.204165027996936 -82] -127.20416502799694]
Test Case: 784 | Input/Output: [[-84.89166825828703 -13] -97.89166825828703]
Test Case: 785 | Input/Output: [[97.67029863205573 24] 121.67029863205573]
Test Case: 786 | Input/Output: [[38.71633774132198 38] 76.71633774132198]
Test Case: 787 | Input/Output: [[40.4672353357692 30] 70.4672353357692]
Test Case: 788 | Input/Output: [[76.84821251877167 -81] -4.151787481228325]
Test Case: 789 | Input/Output: [[33.57113751692549 23] 56.57113751692549]
Test Case: 790 | Input/Output: [[48.39744094059148 -37] 11.39744094059148]
Test Case: 791 | Input/Output: [[35.59550909772534 18] 53.59550909772534]
Test Case: 792 | Input/Output: [[-13.219925837482506 -6] -19.219925837482506]
Test Case: 793 | Input/Output: [[-25.260285044929788 61] 35.73971495507021]
Test Case: 794 | Input/Output: [[23.0588858576603 -91] -67.9411141423397]
Test Case: 795 | Input/Output: [[-46.41133357682325 -69] -115.41133357682325]
Test Case: 796 | Input/Output: [[-75.98031314662457 19] -56.98031314662457]
Test Case: 797 | Input/Output: [[-30.385838002098396 -98] -128.3858380020984]
Test Case: 798 | Input/Output: [[-46.87280951987503 89] 42.12719048012497]
Test Case: 799 | Input/Output: [[48.05978036419259 -9] 39.05978036419259]
Test Case: 800 | Input/Output: [[-64.5206869348746 36] -28.520686934874604]
Test Case: 801 | Input/Output: [[-6.261654618336678 -4] -10.261654618336678]
Test Case: 802 | Input/Output: [[-1.7870496037186285 -48] -49.78704960371863]
Test Case: 803 | Input/Output: [[43.161023220264354 -80] -36.838976779735646]
Test Case: 804 | Input/Output: [[-57.59731717214231 71] 13.402682827857689]
Test Case: 805 | Input/Output: [[-75.93025724964184 93] 17.06974275035816]
Test Case: 806 | Input/Output: [[79.29958978665297 21] 100.29958978665297]
Test Case: 807 | Input/Output: [[-95.19679389222391 -6] -101.19679389222391]
Test Case: 808 | Input/Output: [[-34.69622030259805 -3] -37.69622030259805]
Test Case: 809 | Input/Output: [[-80.02899312036958 -83] -163.0289931203696]
Test Case: 810 | Input/Output: [[-80.8942852229622 -25] -105.8942852229622]
Test Case: 811 | Input/Output: [[70.56509201678779 -35] 35.56509201678779]
Test Case: 812 | Input/Output: [[18.249040999684723 -56] -37.75095900031528]
Test Case: 813 | Input/Output: [[13.209384896405709 11] 24.20938489640571]
Test Case: 814 | Input/Output: [[67.1332360255393 -9] 58.133236025539304]
Test Case: 815 | Input/Output: [[12.631100826392554 23] 35.631100826392554]
Test Case: 816 | Input/Output: [[51.81836031371688 -44] 7.81836031371688]
Test Case: 817 | Input/Output: [[11.724052187844336 47] 58.724052187844336]
Test Case: 818 | Input/Output: [[-90.51510135648473 20] -70.51510135648473]
Test Case: 819 | Input/Output: [[-42.83255829655192 48] 5.167441703448077]
Test Case: 820 | Input/Output: [[-89.09523941499995 -67] -156.09523941499995]
Test Case: 821 | Input/Output: [[38.01292570626643 -90] -51.98707429373357]
Test Case: 822 | Input/Output: [[-5.843544086793756 -9] -14.843544086793756]
Test Case: 823 | Input/Output: [[-61.17924496722122 -99] -160.17924496722122]
Test Case: 824 | Input/Output: [[88.00482142724988 -72] 16.00482142724988]
Test Case: 825 | Input/Output: [[77.53076620698519 -15] 62.53076620698519]
Test Case: 826 | Input/Output: [[-69.91940466074804 -16] -85.91940466074804]
Test Case: 827 | Input/Output: [[91.81711840053671 46] 137.8171184005367]
Test Case: 828 | Input/Output: [[43.99267860098445 -42] 1.9926786009844477]
Test Case: 829 | Input/Output: [[57.287887386445306 -37] 20.287887386445306]
Test Case: 830 | Input/Output: [[-52.011804278163076 -84] -136.01180427816308]
Test Case: 831 | Input/Output: [[-12.0026686646886 -46] -58.0026686646886]
Test Case: 832 | Input/Output: [[-42.356449171358435 -34] -76.35644917135843]
Test Case: 833 | Input/Output: [[9.542367245785258 47] 56.54236724578526]
Test Case: 834 | Input/Output: [[-22.267581622579485 28] 5.732418377420515]
Test Case: 835 | Input/Output: [[25.079185313179565 69] 94.07918531317956]
Test Case: 836 | Input/Output: [[-5.601806689950763 -53] -58.60180668995076]
Test Case: 837 | Input/Output: [[-16.84938606775603 48] 31.15061393224397]
Test Case: 838 | Input/Output: [[-1.674358323553136 89] 87.32564167644686]
Test Case: 839 | Input/Output: [[-9.115845535459343 31] 21.884154464540657]
Test Case: 840 | Input/Output: [[-27.750381918282386 64] 36.249618081717614]
Test Case: 841 | Input/Output: [[-11.582974153833021 -87] -98.58297415383302]
Test Case: 842 | Input/Output: [[9.267710569256053 100] 109.26771056925605]
Test Case: 843 | Input/Output: [[39.835685474300874 50] 89.83568547430087]
Test Case: 844 | Input/Output: [[-61.91679856880026 -92] -153.91679856880026]
Test Case: 845 | Input/Output: [[-31.32962188897656 -75] -106.32962188897656]
Test Case: 846 | Input/Output: [[-90.33131411321465 20] -70.33131411321465]
Test Case: 847 | Input/Output: [[61.08100316540103 -30] 31.08100316540103]
Test Case: 848 | Input/Output: [[60.156404403939035 35] 95.15640440393904]
Test Case: 849 | Input/Output: [[-62.81932693975869 87] 24.18067306024131]
Test Case: 850 | Input/Output: [[-67.17559386832565 -50] -117.17559386832565]
Test Case: 851 | Input/Output: [[-52.9402941013809 88] 35.0597058986191]
Test Case: 852 | Input/Output: [[-82.34009136646519 30] -52.34009136646519]
Test Case: 853 | Input/Output: [[89.91451976493349 -58] 31.914519764933488]
Test Case: 854 | Input/Output: [[70.17999752353217 85] 155.17999752353217]
Test Case: 855 | Input/Output: [[57.22731119543582 78] 135.22731119543582]
Test Case: 856 | Input/Output: [[-29.67977431886375 87] 57.32022568113625]
Test Case: 857 | Input/Output: [[22.947048205719994 -3] 19.947048205719994]
Test Case: 858 | Input/Output: [[75.05563338671232 86] 161.05563338671232]
Test Case: 859 | Input/Output: [[-62.72955798425133 -61] -123.72955798425133]
Test Case: 860 | Input/Output: [[72.44970074514407 -98] -25.55029925485593]
Test Case: 861 | Input/Output: [[-52.287410395752154 17] -35.287410395752154]
Test Case: 862 | Input/Output: [[91.0800828574312 -92] -0.9199171425688064]
Test Case: 863 | Input/Output: [[25.026226681297018 -12] 13.026226681297018]
Test Case: 864 | Input/Output: [[50.80701700784974 -77] -26.192982992150263]
Test Case: 865 | Input/Output: [[-18.019360954676273 2] -16.019360954676273]
Test Case: 866 | Input/Output: [[94.79754661212203 64] 158.79754661212203]
Test Case: 867 | Input/Output: [[-49.457539626712624 -55] -104.45753962671262]
Test Case: 868 | Input/Output: [[15.423989228943128 9] 24.423989228943128]
Test Case: 869 | Input/Output: [[-7.38654626798116 73] 65.61345373201884]
Test Case: 870 | Input/Output: [[86.09288673954708 -64] 22.092886739547083]
Test Case: 871 | Input/Output: [[-51.143657768518125 69] 17.856342231481875]
Test Case: 872 | Input/Output: [[-13.454640357445328 1] -12.454640357445328]
Test Case: 873 | Input/Output: [[99.6839781857274 20] 119.6839781857274]
Test Case: 874 | Input/Output: [[2.687692292495811 56] 58.68769229249581]
Test Case: 875 | Input/Output: [[-68.14366686777034 -13] -81.14366686777034]
Test Case: 876 | Input/Output: [[-83.06693149696423 10] -73.06693149696423]
Test Case: 877 | Input/Output: [[24.114345131177785 -77] -52.885654868822215]
Test Case: 878 | Input/Output: [[-27.493259463736067 79] 51.50674053626393]
Test Case: 879 | Input/Output: [[-70.44499192967233 -39] -109.44499192967233]
Test Case: 880 | Input/Output: [[-43.25078763058592 -12] -55.25078763058592]
Test Case: 881 | Input/Output: [[26.002235896582633 71] 97.00223589658263]
Test Case: 882 | Input/Output: [[-51.73400491353877 54] 2.2659950864612313]
Test Case: 883 | Input/Output: [[-87.946589880248 -1] -88.946589880248]
Test Case: 884 | Input/Output: [[-79.43019529458648 28] -51.43019529458648]
Test Case: 885 | Input/Output: [[-54.94061589766437 73] 18.059384102335628]
Test Case: 886 | Input/Output: [[-8.274608063520645 -2] -10.274608063520645]
Test Case: 887 | Input/Output: [[43.41688104256684 63] 106.41688104256684]
Test Case: 888 | Input/Output: [[99.31586477807858 65] 164.31586477807858]
Test Case: 889 | Input/Output: [[-8.176499287370802 3] -5.1764992873708024]
Test Case: 890 | Input/Output: [[71.89350885082945 46] 117.89350885082945]
Test Case: 891 | Input/Output: [[-40.48623616305691 -45] -85.4862361630569]
Test Case: 892 | Input/Output: [[18.215284575477014 -51] -32.784715424522986]
Test Case: 893 | Input/Output: [[81.75699712595394 -98] -16.243002874046056]
Test Case: 894 | Input/Output: [[-18.994654783596303 28] 9.005345216403697]
Test Case: 895 | Input/Output: [[-59.533955965247046 100] 40.466044034752954]
Test Case: 896 | Input/Output: [[5.563459414697363 37] 42.56345941469736]
Test Case: 897 | Input/Output: [[98.76502169923876 -42] 56.76502169923876]
Test Case: 898 | Input/Output: [[-83.05393798530483 -20] -103.05393798530483]
Test Case: 899 | Input/Output: [[-49.32432846141697 8] -41.32432846141697]
Test Case: 900 | Input/Output: [[35.47874470874598 -66] -30.521255291254022]
Test Case: 901 | Input/Output: [[61.283358305609966 -41] 20.283358305609966]
Test Case: 902 | Input/Output: [[-13.787947727340509 32] 18.21205227265949]
Test Case: 903 | Input/Output: [[-7.309307929424236 68] 60.690692070575764]
Test Case: 904 | Input/Output: [[49.71425516074743 -92] -42.28574483925257]
Test Case: 905 | Input/Output: [[-86.96989930974588 65] -21.969899309745884]
Test Case: 906 | Input/Output: [[-17.862073342497226 -42] -59.862073342497226]
Test Case: 907 | Input/Output: [[-66.72127170876816 59] -7.721271708768157]
Test Case: 908 | Input/Output: [[83.17142308306413 -58] 25.171423083064127]
Test Case: 909 | Input/Output: [[28.01156301230202 10] 38.01156301230202]
Test Case: 910 | Input/Output: [[-2.108317593766884 -89] -91.10831759376688]
Test Case: 911 | Input/Output: [[-85.99937713302117 11] -74.99937713302117]
Test Case: 912 | Input/Output: [[23.764364997427307 22] 45.76436499742731]
Test Case: 913 | Input/Output: [[92.17857623512805 -30] 62.17857623512805]
Test Case: 914 | Input/Output: [[1.1601101952151538 -57] -55.839889804784846]
Test Case: 915 | Input/Output: [[-90.16693825202633 -73] -163.16693825202634]
Test Case: 916 | Input/Output: [[28.13771775300117 -73] -44.86228224699883]
Test Case: 917 | Input/Output: [[87.81580727343729 -35] 52.81580727343729]
Test Case: 918 | Input/Output: [[17.658353789765613 32] 49.65835378976561]
Test Case: 919 | Input/Output: [[16.160924999657624 76] 92.16092499965762]
Test Case: 920 | Input/Output: [[-84.86927725601545 3] -81.86927725601545]
Test Case: 921 | Input/Output: [[86.78191902035397 30] 116.78191902035397]
Test Case: 922 | Input/Output: [[17.644396394151826 96] 113.64439639415183]
Test Case: 923 | Input/Output: [[-92.04447239052058 -15] -107.04447239052058]
Test Case: 924 | Input/Output: [[8.4618615089463 27] 35.4618615089463]
Test Case: 925 | Input/Output: [[-24.702370787550493 -11] -35.70237078755049]
Test Case: 926 | Input/Output: [[42.474335781241166 -29] 13.474335781241166]
Test Case: 927 | Input/Output: [[-83.09012507238964 44] -39.09012507238964]
Test Case: 928 | Input/Output: [[26.038331875756754 -60] -33.961668124243246]
Test Case: 929 | Input/Output: [[-99.74914207886525 -21] -120.74914207886525]
Test Case: 930 | Input/Output: [[17.331549688037228 -98] -80.66845031196277]
Test Case: 931 | Input/Output: [[47.48979259144946 -70] -22.510207408550542]
Test Case: 932 | Input/Output: [[84.19317868867336 -4] 80.19317868867336]
Test Case: 933 | Input/Output: [[1.783674152126082 -79] -77.21632584787392]
Test Case: 934 | Input/Output: [[52.98672871766851 -85] -32.01327128233149]
Test Case: 935 | Input/Output: [[-16.954534177664613 34] 17.045465822335387]
Test Case: 936 | Input/Output: [[32.939849498493544 -45] -12.060150501506456]
Test Case: 937 | Input/Output: [[17.448968148804497 -8] 9.448968148804497]
Test Case: 938 | Input/Output: [[-72.797785948963 -49] -121.797785948963]
Test Case: 939 | Input/Output: [[87.92174462833887 -49] 38.92174462833887]
Test Case: 940 | Input/Output: [[95.61937648409614 70] 165.61937648409614]
Test Case: 941 | Input/Output: [[19.46751701738691 14] 33.46751701738691]
Test Case: 942 | Input/Output: [[-90.48297754152024 -41] -131.48297754152026]
Test Case: 943 | Input/Output: [[-30.288493562787394 -67] -97.2884935627874]
Test Case: 944 | Input/Output: [[-90.00851906425756 68] -22.008519064257555]
Test Case: 945 | Input/Output: [[-88.12237366102076 35] -53.12237366102076]
Test Case: 946 | Input/Output: [[69.73662932285578 -7] 62.73662932285578]
Test Case: 947 | Input/Output: [[-11.024260270152794 74] 62.975739729847206]
Test Case: 948 | Input/Output: [[-46.48736331561454 -29] -75.48736331561454]
Test Case: 949 | Input/Output: [[4.8545476097006315 -10] -5.1454523902993685]
Test Case: 950 | Input/Output: [[-35.72545505851079 -26] -61.72545505851079]
Test Case: 951 | Input/Output: [[-65.33405526110056 98] 32.66594473889944]
Test Case: 952 | Input/Output: [[51.16956786490695 49] 100.16956786490695]
Test Case: 953 | Input/Output: [[-9.041085657977561 92] 82.95891434202244]
Test Case: 954 | Input/Output: [[-5.610411976208567 6] 0.38958802379143265]
Test Case: 955 | Input/Output: [[-6.177777398554568 -29] -35.17777739855457]
Test Case: 956 | Input/Output: [[89.85944840373134 37] 126.85944840373134]
Test Case: 957 | Input/Output: [[50.104704344998 59] 109.104704344998]
Test Case: 958 | Input/Output: [[-66.22628492565686 100] 33.773715074343144]
Test Case: 959 | Input/Output: [[-43.0932651493882 59] 15.906734850611798]
Test Case: 960 | Input/Output: [[-15.246066251785976 50] 34.753933748214024]
Test Case: 961 | Input/Output: [[-78.66563930057538 17] -61.66563930057538]
Test Case: 962 | Input/Output: [[30.030933489452366 -60] -29.969066510547634]
Test Case: 963 | Input/Output: [[-51.866759382348036 20] -31.866759382348036]
Test Case: 964 | Input/Output: [[33.39276409115368 15] 48.39276409115368]
Test Case: 965 | Input/Output: [[49.152203984304634 -16] 33.152203984304634]
Test Case: 966 | Input/Output: [[27.271533709078355 2] 29.271533709078355]
Test Case: 967 | Input/Output: [[76.93237398689297 14] 90.93237398689297]
Test Case: 968 | Input/Output: [[90.81287024332858 68] 158.81287024332858]
Test Case: 969 | Input/Output: [[-85.78314459391387 86] 0.2168554060861254]
Test Case: 970 | Input/Output: [[-8.902594197539827 78] 69.09740580246017]
Test Case: 971 | Input/Output: [[54.07244903663508 12] 66.07244903663508]
Test Case: 972 | Input/Output: [[-13.871602261286412 75] 61.12839773871359]
Test Case: 973 | Input/Output: [[73.1502053577409 -56] 17.1502053577409]
Test Case: 974 | Input/Output: [[78.12239787079744 -28] 50.12239787079744]
Test Case: 975 | Input/Output: [[-1.2035237260490987 88] 86.7964762739509]
Test Case: 976 | Input/Output: [[-32.49690251929509 52] 19.50309748070491]
Test Case: 977 | Input/Output: [[-72.73236993370516 -32] -104.73236993370516]
Test Case: 978 | Input/Output: [[17.59657358592419 76] 93.59657358592419]
Test Case: 979 | Input/Output: [[66.65577703356317 31] 97.65577703356317]
Test Case: 980 | Input/Output: [[-60.610545171803224 57] -3.610545171803224]
Test Case: 981 | Input/Output: [[11.047139125717024 -77] -65.95286087428298]
Test Case: 982 | Input/Output: [[-9.723748885830275 -10] -19.723748885830275]
Test Case: 983 | Input/Output: [[-91.71502713153434 3] -88.71502713153434]
Test Case: 984 | Input/Output: [[89.9743096865468 80] 169.9743096865468]
Test Case: 985 | Input/Output: [[76.17118009592761 -9] 67.17118009592761]
Test Case: 986 | Input/Output: [[80.27467290636966 -55] 25.27467290636966]
Test Case: 987 | Input/Output: [[-33.08881074474601 -44] -77.08881074474601]
Test Case: 988 | Input/Output: [[-59.11249984127937 -58] -117.11249984127937]
Test Case: 989 | Input/Output: [[-34.477792379852914 -34] -68.47779237985291]
Test Case: 990 | Input/Output: [[-52.944921619604244 -35] -87.94492161960424]
Test Case: 991 | Input/Output: [[-85.9800128890871 52] -33.98001288908711]
Test Case: 992 | Input/Output: [[59.739292569487475 -51] 8.739292569487475]
Test Case: 993 | Input/Output: [[18.544248663394853 -25] -6.455751336605147]
Test Case: 994 | Input/Output: [[83.66924134925628 -27] 56.66924134925628]
Test Case: 995 | Input/Output: [[-49.06501194907729 96] 46.93498805092271]
Test Case: 996 | Input/Output: [[49.129696888700266 -13] 36.129696888700266]
Test Case: 997 | Input/Output: [[19.81078177786671 -97] -77.18921822213329]
Test Case: 998 | Input/Output: [[59.243468384381345 76] 135.24346838438134]
Test Case: 999 | Input/Output: [[56.9671774010402 19] 75.9671774010402]
;;******************************
Registered instructions: #{code_atom genome_uniform_tag_mutation code_car print_newline integer_sub integer_inc boolean_stackdepth return_exec_pop zip_dup_items integer_tag_string_instruction vector_integer_eq autoconstructive_integer_rand boolean_pop genome_close_inc string_fromchar vector_string_shove zip_yankdup genome_new genome_gene_genome_instruction vector_float_yankdup exec_yankdup vector_integer_shove integer_yankdup string_flush boolean_swap zip_empty exec_shove vector_boolean_yank code_eq exec_y boolean_yank integer_eq genome_silence string_butlast code_contains string_conjchar code_do*count vector_float_last genome_uniform_instruction_mutation genome_pop string_substring integer_mult vector_string_dup_times code_length vector_integer_dup boolean_or code_position boolean_empty zip_fromcode print_vector_string vector_boolean_swap return_frominteger char_dup_items vector_float_pushall return_genome_pop genome_gene_close char_iswhitespace code_cdr exec_do*vector_integer integer_rand vector_string_replacefirst string_first vector_boolean_first exec_do*while exec_string_iterate string_indexofchar vector_float_replace integer_fromstring code_list code_swap char_frominteger genome_gene_randomize vector_integer_emptyvector vector_string_eq exec_dup_items vector_float_butlast boolean_dup_items genome_uniform_string_mutation exec_empty zip_end? exec_fromzipnode string_shove vector_boolean_pushall zip_insert_left_fromcode exec_rot integer_tag_integer_instruction vector_string_concat vector_float_indexof genome_instruction_eq code_pop vector_string_subvec vector_integer_swap code_subst char_pop return_string_pop zip_yank exec_dup vector_integer_butlast vector_float_rest vector_string_flush boolean_fromfloat code_fromziprights float_sin boolean_flush char_isdigit float_lte exec_fromziproot vector_integer_empty print_code vector_string_stackdepth string_reverse exec_k vector_integer_yank float_frominteger char_rot vector_integer_dup_times print_char integer_tag_boolean_instruction vector_integer_stackdepth vector_boolean_concat boolean_xor integer_gte genome_yankdup vector_float_shove vector_integer_take boolean_dup_times code_quote string_replacefirst return_fromstring exec_fromziplefts vector_integer_yankdup boolean_shove float_lt vector_string_dup vector_string_occurrencesof vector_integer_replace zip_branch? vector_float_reverse float_mod vector_float_subvec integer_tag_code_instruction string_last print_boolean boolean_rot vector_string_rest integer_div vector_float_remove integer_tag_exec_instruction integer_fromfloat integer_lte code_fromzipchildren environment_end vector_integer_rot integer_mod string_concat vector_string_butlast genome_swap code_null exec_do*count vector_float_emptyvector vector_string_yankdup integer_tag_float_instruction integer_rot float_yankdup vector_string_rot zip_replace_fromexec genome_uniform_boolean_mutation vector_string_take vector_float_dup_items integer_add vector_integer_occurrencesof integer_shove string_dup_times genome_dup return_code_pop char_swap integer_max return_fromexec code_wrap genome_genesis return_float_pop code_flush genome_yank zip_shove vector_integer_flush vector_integer_subvec vector_boolean_indexof vector_float_pop char_dup_times genome_uniform_silence_mutation genome_uniform_crossover vector_string_remove vector_integer_contains zip_remove code_append vector_float_eq vector_integer_conj string_eq zip_leftmost code_yankdup code_rot integer_stackdepth float_max vector_boolean_set zip_append_child_fromexec zip_next vector_float_conj zip_fromexec code_dup_times float_dup_items string_take zip_left genome_if_gene_genome_instruction zip_replace_fromcode char_stackdepth return_fromchar genome_eq vector_integer_replacefirst float_stackdepth code_fromziproot integer_dup_times float_fromchar genome_uniform_combination_and_deletion float_gt boolean_dup float_fromboolean code_fromzipnode genome_rot vector_float_replacefirst vector_boolean_conj exec_dup_times vector_boolean_dup vector_integer_indexof vector_string_swap exec_eq string_emptystring string_swap integer_yank exec_while float_empty print_vector_boolean integer_min exec_swap genome_rotate integer_fromchar vector_string_yank string_stackdepth code_do*range string_replacechar char_allfromstring vector_integer_rest vector_boolean_length char_yank vector_float_empty code_fromfloat genome_parent2 return_fromcode string_pop code_dup_items float_eq integer_untag_instruction integer_dup_items vector_boolean_empty zip_insert_child_fromexec vector_string_last string_nth code_do* return_zip_pop vector_string_pop zip_rot vector_integer_nth exec_do*range vector_integer_dup_items exec_if char_shove zip_down zip_insert_left_fromexec code_frominteger vector_boolean_remove vector_integer_remove boolean_invert_first_then_and genome_flush print_string integer_fromboolean char_yankdup code_do vector_string_first boolean_frominteger string_setchar vector_integer_last char_isletter genome_gene_dup vector_integer_concat return_fromzip print_integer genome_uniform_float_mutation code_map boolean_eq float_gte return_fromfloat genome_gene_copy string_occurrencesofchar string_replacefirstchar print_float boolean_rand integer_flush float_shove string_replace char_dup float_pop char_eq vector_float_nth vector_string_conj integer_gt vector_float_dup_times return_integer_pop genome_gene_replace float_sub vector_integer_length vector_float_set vector_string_indexof vector_boolean_rest code_dup vector_boolean_shove zip_eq float_min boolean_not float_mult float_fromstring genome_unsilence code_if vector_boolean_dup_items vector_integer_pop vector_boolean_last exec_do*times zip_pop genome_gene_silent zip_rightmost float_dec vector_float_contains genome_gene_copy_range environment_new exec_do*vector_string code_nthcdr string_empty char_empty exec_pop vector_integer_set autoconstructive_boolean_rand genome_uniform_addition_and_deletion vector_float_rot string_yankdup exec_do*vector_float string_removechar code_extract vector_string_replace vector_float_first genome_parent1 return_tagspace char_flush genome_uniform_integer_mutation vector_float_occurrencesof vector_string_emptyvector float_add code_stackdepth exec_s zip_insert_right_fromexec float_dup integer_tag_char_instruction vector_string_nth zip_stackdepth vector_integer_reverse print_vector_integer char_fromfloat code_do*times code_noop zip_swap code_yank integer_lt vector_boolean_eq genome_stackdepth code_fromziplefts noop_open_paren genome_uniform_deletion vector_boolean_dup_times string_containschar string_yank char_rand zip_flush vector_boolean_rot float_swap exec_fromziprights vector_string_pushall vector_string_set vector_boolean_flush return_fromgenome exec_noop code_size vector_boolean_stackdepth vector_integer_pushall vector_boolean_reverse integer_swap string_split vector_boolean_contains string_fromboolean return_boolean_pop vector_float_dup vector_boolean_replace vector_string_dup_items integer_dup vector_boolean_nth vector_string_length genome_uniform_addition string_rest zip_insert_child_fromcode float_tan string_rot string_rand exec_yank string_parse_to_chars integer_pop integer_empty vector_float_flush genome_if_autoconstructing vector_float_yank noop_delete_prev_paren_pair print_exec zip_append_child_fromcode genome_gene_delete float_dup_times code_empty float_inc zip_right vector_float_length float_rand genome_uniform_close_mutation integer_dec string_contains return_fromboolean vector_float_concat vector_float_stackdepth exec_do*vector_boolean vector_integer_first genome_shove code_rand print_vector_float float_rot return_char_pop vector_string_contains genome_autoconstructing vector_boolean_occurrencesof string_dup_items genome_empty zip_prev genome_toggle_silent vector_string_reverse zip_dup code_cons code_member exec_stackdepth float_flush boolean_and integer_tagged_instruction vector_boolean_butlast string_length float_cos string_frominteger exec_flush vector_string_empty exec_when vector_float_swap genome_close_dec code_insert vector_boolean_pop float_div zip_insert_right_fromcode code_fromboolean vector_boolean_take code_shove environment_begin vector_float_take boolean_invert_second_then_and code_container code_nth vector_boolean_subvec float_yank zip_up vector_boolean_emptyvector vector_boolean_replacefirst genome_alternation zip_dup_times string_fromfloat vector_boolean_yankdup string_dup boolean_yankdup exec_fromzipchildren}
Starting PushGP run.
Clojush version = 3.11.1-1-SNAPSHOTHash of last Git commit = 8a64f874173fae27ed1a77827849de0fade43c2b
GitHub link = https://github.com/lspector/Clojush/commit/8a64f874173fae27ed1a77827849de0fade43c2b
age-combining-function = :average
age-mediated-parent-selection = false
alignment-deviation = 5
alternation-rate = 0.01
atom-generators = (#object[clojush.problems.software.number_io$fn__6694 0x2beee3e8 clojush.problems.software.number_io$fn__6694@2beee3e8] #object[clojush.problems.software.number_io$fn__6696 0x58bad46f clojush.problems.software.number_io$fn__6696@58bad46f] #object[clojush.instructions.tag$tag_instruction_erc$fn__1963 0x20231384 clojush.instructions.tag$tag_instruction_erc$fn__1963@20231384] #object[clojush.instructions.tag$tagged_instruction_erc$fn__1969 0x35becbd4 clojush.instructions.tag$tagged_instruction_erc$fn__1969@35becbd4] in1 in2 print_newline integer_sub integer_inc integer_yankdup integer_mult float_sin float_frominteger float_mod integer_div integer_fromfloat integer_mod integer_rot float_yankdup integer_add integer_shove integer_max integer_stackdepth float_max float_dup_items float_stackdepth integer_dup_times integer_yank integer_min integer_dup_items print_integer print_float integer_flush float_shove float_pop float_sub float_min float_mult float_dec float_add float_dup float_swap integer_swap integer_dup float_tan integer_pop float_dup_times float_inc integer_dec float_rot float_flush float_cos float_div float_yank)
autoconstructive = false
autoconstructive-boolean-rand-enrichment = 0
autoconstructive-clone-decay = :same
autoconstructive-clone-probability = 0.0
autoconstructive-decay = 0.0
autoconstructive-diffmeans-children = 10
autoconstructive-diversification-test = :gecco2016
autoconstructive-environments = false
autoconstructive-genome-instructions = :all
autoconstructive-integer-rand-enrichment = 0
autoconstructive-parent-decay = 0.0
autoconstructive-si-children = 8
autoconstructive-tag-types = [:integer :boolean :exec :float :char :string :code]
close-increment-rate = 0.2
close-parens-probabilities = [0.772 0.206 0.021 0.001]
csv-columns = [:generation :location :total-error :push-program-size]
csv-log-filename = log.csv
decimation-ratio = 1
decimation-tournament-size = 2
edn-additional-keys = [:generation :location]
edn-keys = [:uuid :parent-uuids :genetic-operators :program :genome :total-error :errors]
edn-log-filename = log.edn
epigenetic-markers = []
epsilon-lexicase-epsilon = nil
epsilon-lexicase-probability = 1
error-function = #object[clojush.problems.software.number_io$make_number_io_error_function_from_cases$the_actual_num_io_error_function__6704 0x342723a3 clojush.problems.software.number_io$make_number_io_error_function_from_cases$the_actual_num_io_error_function__6704@342723a3]
error-threshold = 1.0E-4
evalpush-limit = 200
evalpush-time-limit = 0
exit-on-success = true
final-report-simplifications = 5000
genetic-operator-probabilities = {:alternation 0.3, :uniform-mutation 0.2, [:alternation :uniform-mutation] 0.5}
improvement-discount = 0.5
individuals-for-novelty-archive-per-generation = 0
json-log-filename = log.json
json-log-program-strings = false
label = nil
lexicase-leakage = 0.1
lexicase-slippage = 0
log-fitnesses-for-all-cases = false
maintain-ancestors = false
max-error = 5000
max-generations = 200
max-genome-size-in-initial-program = 100
max-point-evaluations = 1.0E101
max-points = 800
meta-error-categories = []
normalization = :none
novelty-distance-metric = :euclidean
novelty-number-of-neighbors-k = 25
parent-reversion-probability = 1.0
parent-selection = :tournament
pop-when-tagging = true
population-size = 1000
print-ancestors-of-solution = false
print-cosmos-data = false
print-csv-logs = false
print-edn-logs = false
print-error-frequencies-by-case = false
print-errors = true
print-history = false
print-homology-data = false
print-json-logs = false
print-selection-counts = false
print-timings = true
problem-specific-initial-report = #object[clojush.problems.software.number_io$number_io_initial_report 0x4ec427 clojush.problems.software.number_io$number_io_initial_report@4ec427]
problem-specific-report = #object[clojush.problems.software.number_io$num_io_report 0xfde487b clojush.problems.software.number_io$num_io_report@fde487b]
random-screen = false
random-seed = 75 -39 -3 89 -117 -52 117 64 -39 97 -70 -66 -34 76 -7 68
random-threshold-lexicase-probability = 1
random-toggle-lexicase-probability = 1
randomly-truncated-lexicase-probability = 1
record-host = nil
replace-child-that-exceeds-size-limit-with = :random
report-simplifications = 0
return-simplified-on-failure = false
reuse-errors = true
self-mate-avoidance-limit = 0
silent-instruction-probability = 0.2
sort-meta-errors-for-lexicase = :random
tag-enrichment = 0
tag-enrichment-types = [:integer :boolean :exec :float :char :string :code]
tag-limit = 10000
top-level-pop-code = false
top-level-push-code = false
total-error-method = :sum
tournament-size = 7
track-instruction-maps = false
uniform-addition-and-deletion-rate = 0.01
uniform-addition-rate = 0.01
uniform-close-mutation-rate = 0.1
uniform-combination-and-deletion-rate = 0.01
uniform-combination-rate = 0.01
uniform-deletion-rate = 0.01
uniform-mutation-constant-tweak-rate = 0.5
uniform-mutation-float-gaussian-standard-deviation = 1.0
uniform-mutation-int-gaussian-standard-deviation = 1
uniform-mutation-rate = 0.01
uniform-mutation-string-char-change-rate = 0.1
uniform-mutation-tag-gaussian-standard-deviation = 100
uniform-silence-mutation-rate = 0.1
use-single-thread = false

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Generating initial population...
Processing generation: 0
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 0
;;******************************
;; -*- Number IO problem report - generation 0
Test total error for best: 54735.0
Test mean error for best: 27.36750
;;------------------------------
Outputs of best individual on training cases:
Correct output: -74.6179542037 | Program output: 9.3820457963  
Correct output: 78.7609586813  | Program output: -4.2390413187 
Correct output: 3.0100598709   | Program output: 73.0100598709 
Correct output: -99.2368061293 | Program output: -79.2368061293
Correct output: 88.6808415603  | Program output: 13.6808415603 
Correct output: -151.1060419578 | Program output: -84.1060419578
Correct output: 56.004616184   | Program output: 89.004616184  
Correct output: 33.520660154   | Program output: -17.479339846 
Correct output: 42.238861085   | Program output: 76.238861085  
Correct output: -49.0227893765 | Program output: -91.0227893765
Correct output: 103.4057483059 | Program output: 95.4057483059 
Correct output: -106.1378273779 | Program output: -55.1378273779
Correct output: 37.9625599991  | Program output: 11.9625599991 
Correct output: 71.9208193203  | Program output: 66.9208193203 
Correct output: 173.5348464317 | Program output: 89.5348464317 
Correct output: -77.0615185935 | Program output: -16.0615185935
Correct output: -20.7643622555 | Program output: -28.7643622555
Correct output: 1.9827630815   | Program output: -87.0172369185
Correct output: -39.1198682611 | Program output: 52.8801317389 
Correct output: 1.1392376036   | Program output: 3.1392376036  
Correct output: 129.1930977679 | Program output: 47.1930977679 
Correct output: 26.7496211861  | Program output: 1.7496211861  
Correct output: -11.2984801384 | Program output: -67.2984801384
Correct output: -136.1442960385 | Program output: -78.1442960385
Correct output: 143.0911996605 | Program output: 86.0911996605 
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction print_float} {:instruction float_mult} {:instruction float_yank} {:instruction print_integer} {:instruction integer_yank} {:instruction integer_dup_times} {:instruction integer_dup} {:instruction integer_mod} {:instruction float_swap} {:instruction integer_pop} {:instruction float_frominteger} {:instruction in1} {:instruction integer_flush} {:instruction float_shove} {:instruction integer_swap} {:instruction float_inc} {:instruction 77.91830066263515} {:instruction integer_inc} {:instruction float_shove} {:instruction integer_yankdup} {:instruction integer_fromfloat} {:instruction print_float} {:instruction float_yankdup} {:instruction in2} {:instruction float_inc} {:instruction integer_div})
Best program: (print_float float_mult float_yank print_integer integer_yank integer_dup_times integer_dup integer_mod float_swap integer_pop float_frominteger in1 integer_flush float_shove integer_swap float_inc 77.91830066263515 integer_inc float_shove integer_yankdup integer_fromfloat print_float float_yankdup in2 float_inc integer_div)
Errors: [84.0 12 83.0 11 70.0 1 20.0 1 75.0 2 67.0 3 33.0 2 51.0 12 34.0 2 42.0 2 8.0 3 51.0 3 26.0 2 5.0 2 84.0 3 61.0 2 8.0 1 89.0 10 92.0 13 2.0 1 82.0 3 25.0 2 56.0 2 58.0 3 57.0 3]
Total: 1364.0
Mean: 27.28
Genome size: 26
Size: 27
Percent parens: 0.037
--- Population Statistics ---
Average total errors in population: 18743.1676959
Median total errors in population: 25336.0
Error averages by case: (741.5030249000009 13.864 736.3663628000008 13.17 731.1466743999999 11.816 746.2355590999989 13.295 734.1953814999973 12.599 761.3708358000034 14.181 735.0722475999983 11.903 727.1219669999997 12.483 733.4201883999996 11.822 734.2219838000002 13.344 729.5676335000006 13.359 749.494801000003 14.166 725.0908078000008 12.779 724.4381206000003 12.574 755.1879743000027 13.473 745.1779000999985 13.293 719.5387298999985 13.399 729.1610526999997 12.275 738.3289642999999 14.014 720.8349334999982 11.725 745.6486877999997 13.462 719.5998512999989 12.637 727.5610646999996 13.402 757.6112765000016 14.278 748.4726726000026 13.486)
Error minima by case: (0.3018 6 0.239 9 0.0101 1 0.6371 1 3.5926 2 51.2321 2 1.0965 2 1.4793 8 1.2389 2 0.0228 2 3.4057 2 6.2639 2 0.0374 2 0.0792 2 3.5348 2 0.0615 1 0.2356 1 0.0172 8 0.7529 8 0.0 0 14.1931 2 0.2504 2 5.3559 2 36.2704 3 27.0912 2)
Average genome size in population (length): 50.892
Average program size in population (points): 51.892
Average percent parens in population: 0.044
Minimum age in population: 0.0
Maximum age in population: 0.0
Average age in population: 0.0
Median age in population: 0.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 2
Genome diversity (% unique Plush genomes):	 0.999
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 2
Syntactic diversity (% unique Push programs):	 0.999
Total error diversity:				 0.306
Error (vector) diversity:			 0.337
Behavioral diversity:				 0.354
--- Run Statistics ---
Number of program evaluations used so far: 1000
Number of point (instruction) evaluations so far: 1277325
--- Timings ---
Current time: 1529615938968 milliseconds
Total Time:           3.5 seconds
Initialization:       0.1 seconds,  3.2%
Reproduction:         0.6 seconds, 16.2%
Fitness Testing:      2.8 seconds, 80.5%
Report:               0.0 seconds,  0.0%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 0
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 1
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 1
;;******************************
;; -*- Number IO problem report - generation 1
Test total error for best: 54735.0
Test mean error for best: 27.36750
;;------------------------------
Outputs of best individual on training cases:
Correct output: -74.6179542037 | Program output: 9.3820457963  
Correct output: 78.7609586813  | Program output: -4.2390413187 
Correct output: 3.0100598709   | Program output: 73.0100598709 
Correct output: -99.2368061293 | Program output: -79.2368061293
Correct output: 88.6808415603  | Program output: 13.6808415603 
Correct output: -151.1060419578 | Program output: -84.1060419578
Correct output: 56.004616184   | Program output: 89.004616184  
Correct output: 33.520660154   | Program output: -17.479339846 
Correct output: 42.238861085   | Program output: 76.238861085  
Correct output: -49.0227893765 | Program output: -91.0227893765
Correct output: 103.4057483059 | Program output: 95.4057483059 
Correct output: -106.1378273779 | Program output: -55.1378273779
Correct output: 37.9625599991  | Program output: 11.9625599991 
Correct output: 71.9208193203  | Program output: 66.9208193203 
Correct output: 173.5348464317 | Program output: 89.5348464317 
Correct output: -77.0615185935 | Program output: -16.0615185935
Correct output: -20.7643622555 | Program output: -28.7643622555
Correct output: 1.9827630815   | Program output: -87.0172369185
Correct output: -39.1198682611 | Program output: 52.8801317389 
Correct output: 1.1392376036   | Program output: 3.1392376036  
Correct output: 129.1930977679 | Program output: 47.1930977679 
Correct output: 26.7496211861  | Program output: 1.7496211861  
Correct output: -11.2984801384 | Program output: -67.2984801384
Correct output: -136.1442960385 | Program output: -78.1442960385
Correct output: 143.0911996605 | Program output: 86.0911996605 
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_dup_times} {:instruction print_float} {:instruction tagged_835} {:instruction integer_pop} {:instruction float_min} {:instruction integer_pop} {:instruction integer_div} {:instruction float_dup_times} {:instruction float_flush} {:instruction float_rot} {:instruction float_dup_times} {:instruction float_dup} {:instruction tagged_499} {:instruction integer_sub} {:instruction integer_mult} {:instruction float_inc} {:instruction float_div} {:instruction integer_mult} {:instruction integer_mod} {:instruction float_dup_items} {:instruction float_yank} {:instruction integer_dup} {:instruction in1} {:instruction integer_sub} {:instruction tagged_588} {:instruction float_inc} {:instruction tagged_493} {:instruction float_frominteger} {:instruction integer_yankdup} {:instruction in2} {:instruction float_mult} {:instruction print_float} {:instruction integer_add} {:instruction integer_dup_items} {:instruction float_max} {:instruction in2} {:instruction integer_dup_times} {:instruction float_pop} {:instruction float_swap} {:instruction float_dec} {:instruction integer_sub} {:instruction float_yankdup} {:instruction integer_dup_items} {:instruction integer_fromfloat} {:instruction float_dup_times} {:instruction float_dup} {:instruction integer_flush} {:instruction float_dec} {:instruction integer_dec} {:instruction float_rot} {:instruction float_yank} {:instruction integer_yankdup} {:instruction float_yankdup} {:instruction integer_pop} {:instruction in2} {:instruction float_flush} {:instruction float_yank} {:instruction float_max} {:instruction float_add} {:instruction integer_shove} {:instruction float_mult} {:instruction integer_pop} {:instruction integer_mult} {:instruction float_mult} {:instruction integer_dec} {:instruction integer_dup_items} {:instruction integer_div} {:instruction float_stackdepth} {:instruction float_div} {:instruction integer_mult} {:instruction integer_swap} {:instruction in1} {:instruction integer_mod} {:instruction 67} {:instruction float_dec} {:instruction float_inc} {:instruction integer_max} {:instruction float_sin} {:instruction integer_dup} {:instruction float_add} {:instruction in1} {:instruction float_stackdepth} {:instruction integer_yankdup} {:instruction integer_mult} {:instruction integer_pop} {:instruction integer_flush} {:instruction integer_mod})
Best program: (float_dup_times print_float tagged_835 integer_pop float_min integer_pop integer_div float_dup_times float_flush float_rot float_dup_times float_dup tagged_499 integer_sub integer_mult float_inc float_div integer_mult integer_mod float_dup_items float_yank integer_dup in1 integer_sub tagged_588 float_inc tagged_493 float_frominteger integer_yankdup in2 float_mult print_float integer_add integer_dup_items float_max in2 integer_dup_times float_pop float_swap float_dec integer_sub float_yankdup integer_dup_items integer_fromfloat float_dup_times float_dup integer_flush float_dec integer_dec float_rot float_yank integer_yankdup float_yankdup integer_pop in2 float_flush float_yank float_max float_add integer_shove float_mult integer_pop integer_mult float_mult integer_dec integer_dup_items integer_div float_stackdepth float_div integer_mult integer_swap in1 integer_mod 67 float_dec float_inc integer_max float_sin integer_dup float_add in1 float_stackdepth integer_yankdup integer_mult integer_pop integer_flush integer_mod)
Errors: [84.0 12 83.0 11 70.0 1 20.0 1 75.0 2 67.0 3 33.0 2 51.0 12 34.0 2 42.0 2 8.0 3 51.0 3 26.0 2 5.0 2 84.0 3 61.0 2 8.0 1 89.0 10 92.0 13 2.0 1 82.0 3 25.0 2 56.0 2 58.0 3 57.0 3]
Total: 1364.0
Mean: 27.28
Genome size: 87
Size: 88
Percent parens: 0.011
--- Population Statistics ---
Average total errors in population: 7144.292644399988
Median total errors in population: 2048.515
Error averages by case: (283.9258221999998 12.559 276.0727290999998 11.951 263.6368352000021 9.465 289.4144487000021 10.406 275.99668179999975 10.101 325.49891710000253 11.293 272.88009259999785 9.629 252.6564620999998 11.586 267.3181602999991 9.425 268.3994038000012 10.597 270.4930992000009 10.801 298.97765340000063 11.327 244.40533469999954 10.342 254.46983859999963 10.109 324.5693474000004 10.891 283.6781137000017 10.45 234.1521525999979 10.696 264.0650214999998 11.012 279.85696869999975 12.891 230.34834680000088 9.259 300.04326299999923 10.907 237.25893460000114 10.252 255.1282293000008 10.727 316.145150700001 11.617 305.6226373000004 10.986)
Error minima by case: (0.8352 9 0.239 9 0.5718 1 4.2368 1 0.7958 2 19.106 2 1.0965 2 2.3635 8 1.2389 2 0.0228 2 3.4057 2 6.1378 2 0.0374 2 0.0792 2 3.5348 2 0.0615 1 0.2356 1 0.0172 8 0.8801 9 0.0 0 17.0 2 0.2504 2 8.0847 2 22.1443 3 13.9088 2)
Average genome size in population (length): 59.794
Average program size in population (points): 60.794
Average percent parens in population: 0.021
Minimum age in population: 1.0
Maximum age in population: 2.0
Average age in population: 1.494
Median age in population: 1.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 7
Genome diversity (% unique Plush genomes):	 0.796
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 7
Syntactic diversity (% unique Push programs):	 0.796
Total error diversity:				 0.275
Error (vector) diversity:			 0.301
Behavioral diversity:				 0.329
--- Run Statistics ---
Number of program evaluations used so far: 2000
Number of point (instruction) evaluations so far: 2778150
--- Timings ---
Current time: 1529615942842 milliseconds
Total Time:           7.3 seconds
Initialization:       0.1 seconds,  1.6%
Reproduction:         2.3 seconds, 31.7%
Fitness Testing:      4.4 seconds, 61.1%
Report:               0.4 seconds,  5.6%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 1
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 2
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 2
;;******************************
;; -*- Number IO problem report - generation 2
Test total error for best: 54747.0
Test mean error for best: 27.37350
;;------------------------------
Outputs of best individual on training cases:
Correct output: -74.6179542037 | Program output: 10.3820457963 
Correct output: 78.7609586813  | Program output: -3.2390413187 
Correct output: 3.0100598709   | Program output: 74.0100598709 
Correct output: -99.2368061293 | Program output: -78.2368061293
Correct output: 88.6808415603  | Program output: 14.6808415603 
Correct output: -151.1060419578 | Program output: -83.1060419578
Correct output: 56.004616184   | Program output: 90.004616184  
Correct output: 33.520660154   | Program output: -16.479339846 
Correct output: 42.238861085   | Program output: 77.238861085  
Correct output: -49.0227893765 | Program output: -90.0227893765
Correct output: 103.4057483059 | Program output: 96.4057483059 
Correct output: -106.1378273779 | Program output: -54.1378273779
Correct output: 37.9625599991  | Program output: 12.9625599991 
Correct output: 71.9208193203  | Program output: 67.9208193203 
Correct output: 173.5348464317 | Program output: 90.5348464317 
Correct output: -77.0615185935 | Program output: -15.0615185935
Correct output: -20.7643622555 | Program output: -27.7643622555
Correct output: 1.9827630815   | Program output: -86.0172369185
Correct output: -39.1198682611 | Program output: 53.8801317389 
Correct output: 1.1392376036   | Program output: 4.1392376036  
Correct output: 129.1930977679 | Program output: 48.1930977679 
Correct output: 26.7496211861  | Program output: 2.7496211861  
Correct output: -11.2984801384 | Program output: -66.2984801384
Correct output: -136.1442960385 | Program output: -77.1442960385
Correct output: 143.0911996605 | Program output: 87.0911996605 
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_yank} {:instruction float_sub} {:instruction float_mod} {:instruction float_frominteger} {:instruction float_pop} {:instruction float_min} {:instruction print_integer} {:instruction integer_max} {:instruction integer_flush} {:instruction in1} {:instruction float_inc} {:instruction integer_add} {:instruction integer_max} {:instruction integer_swap} {:instruction in1} {:instruction integer_dup} {:instruction float_stackdepth} {:instruction integer_swap} {:instruction in1} {:instruction integer_max} {:instruction float_dup} {:instruction float_shove} {:instruction float_sub} {:instruction float_stackdepth} {:instruction float_rot} {:instruction integer_shove} {:instruction float_inc} {:instruction float_dup_times} {:instruction integer_add} {:instruction print_float} {:instruction integer_dec} {:instruction float_tan} {:instruction integer_flush} {:instruction -49} {:instruction in1} {:instruction float_yankdup} {:instruction float_max} {:instruction integer_flush} {:instruction float_dup_times} {:instruction float_div} {:instruction float_mult} {:instruction integer_shove} {:instruction float_dup} {:instruction integer_dup_times} {:instruction integer_dup} {:instruction float_mod} {:instruction integer_stackdepth} {:instruction integer_min} {:instruction float_sub} {:instruction tagged_690} {:instruction integer_swap} {:instruction float_mod} {:instruction float_shove} {:instruction float_sin} {:instruction float_frominteger})
Best program: (float_yank float_sub float_mod float_frominteger float_pop float_min print_integer integer_max integer_flush in1 float_inc integer_add integer_max integer_swap in1 integer_dup float_stackdepth integer_swap in1 integer_max float_dup float_shove float_sub float_stackdepth float_rot integer_shove float_inc float_dup_times integer_add print_float integer_dec float_tan integer_flush -49 in1 float_yankdup float_max integer_flush float_dup_times float_div float_mult integer_shove float_dup integer_dup_times integer_dup float_mod integer_stackdepth integer_min float_sub tagged_690 integer_swap float_mod float_shove float_sin float_frominteger)
Errors: [85.0 12 82.0 11 71.0 2 21.0 2 74.0 2 68.0 3 34.0 2 50.0 12 35.0 2 41.0 2 7.0 3 52.0 3 25.0 2 4.0 2 83.0 3 62.0 2 7.0 1 88.0 10 93.0 12 3.0 1 81.0 3 24.0 1 55.0 2 59.0 3 56.0 3]
Total: 1361.0
Mean: 27.22
Genome size: 55
Size: 56
Percent parens: 0.018
--- Population Statistics ---
Average total errors in population: 4631.263545899995
Median total errors in population: 1389.0
Error averages by case: (194.19108050000045 12.418 196.4747260000001 11.86 189.91512420000075 5.392 163.46893780000022 5.694 191.82324680000005 5.744 201.1148169 6.299 168.20261349999973 5.539 173.9887950000003 12.532 166.69069169999975 5.44 178.12946540000047 5.906 154.4365414000002 6.402 182.93176179999972 6.31 154.38917639999985 5.774 145.03337780000044 5.768 212.43258229999944 6.399 184.81101730000043 5.373 145.31189609999984 5.411 205.66964860000004 10.851 205.49675130000034 13.291 123.69001040000022 4.61 204.3350069000003 6.522 142.3349137999999 6.287 181.60056760000023 6.07 193.2122858000008 6.905 192.26651059999966 6.515)
Error minima by case: (7.382 9 0.8427 9 1.0101 1 8.6813 1 10.7625 2 19.106 2 2.9954 2 8.0527 9 16.7611 2 28.4108 2 7.0 2 6.1378 2 7.6837 2 4.0 2 3.5348 2 13.494 1 4.2812 1 0.0172 8 16.331 9 0.0 0 36.8069 3 0.2504 1 2.2985 2 22.1443 3 27.0912 2)
Average genome size in population (length): 53.334
Average program size in population (points): 54.334
Average percent parens in population: 0.024
Minimum age in population: 2.0
Maximum age in population: 4.0
Average age in population: 2.912
Median age in population: 3.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 28
Genome diversity (% unique Plush genomes):	 0.669
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 28
Syntactic diversity (% unique Push programs):	 0.669
Total error diversity:				 0.134
Error (vector) diversity:			 0.145
Behavioral diversity:				 0.161
--- Run Statistics ---
Number of program evaluations used so far: 3000
Number of point (instruction) evaluations so far: 4116089
--- Timings ---
Current time: 1529615946102 milliseconds
Total Time:          10.6 seconds
Initialization:       0.1 seconds,  1.1%
Reproduction:         3.7 seconds, 34.9%
Fitness Testing:      5.9 seconds, 55.5%
Report:               0.9 seconds,  8.6%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 2
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 3
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 3
;;******************************
;; -*- Number IO problem report - generation 3
Test total error for best: 54747.0
Test mean error for best: 27.37350
;;------------------------------
Outputs of best individual on training cases:
Correct output: -74.6179542037 | Program output: 10.3820457963 
Correct output: 78.7609586813  | Program output: -3.2390413187 
Correct output: 3.0100598709   | Program output: 74.0100598709 
Correct output: -99.2368061293 | Program output: -78.2368061293
Correct output: 88.6808415603  | Program output: 14.6808415603 
Correct output: -151.1060419578 | Program output: -83.1060419578
Correct output: 56.004616184   | Program output: 90.004616184  
Correct output: 33.520660154   | Program output: -16.479339846 
Correct output: 42.238861085   | Program output: 77.238861085  
Correct output: -49.0227893765 | Program output: -90.0227893765
Correct output: 103.4057483059 | Program output: 96.4057483059 
Correct output: -106.1378273779 | Program output: -54.1378273779
Correct output: 37.9625599991  | Program output: 12.9625599991 
Correct output: 71.9208193203  | Program output: 67.9208193203 
Correct output: 173.5348464317 | Program output: 90.5348464317 
Correct output: -77.0615185935 | Program output: -15.0615185935
Correct output: -20.7643622555 | Program output: -27.7643622555
Correct output: 1.9827630815   | Program output: -86.0172369185
Correct output: -39.1198682611 | Program output: 53.8801317389 
Correct output: 1.1392376036   | Program output: 4.1392376036  
Correct output: 129.1930977679 | Program output: 48.1930977679 
Correct output: 26.7496211861  | Program output: 2.7496211861  
Correct output: -11.2984801384 | Program output: -66.2984801384
Correct output: -136.1442960385 | Program output: -77.1442960385
Correct output: 143.0911996605 | Program output: 87.0911996605 
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_yank} {:instruction float_sub} {:instruction float_mod} {:instruction float_frominteger} {:instruction float_pop} {:instruction float_min} {:instruction print_integer} {:instruction integer_max} {:instruction integer_flush} {:instruction in1} {:instruction float_inc} {:instruction integer_add} {:instruction integer_max} {:instruction integer_swap} {:instruction in1} {:instruction integer_dup} {:instruction float_stackdepth} {:instruction integer_swap} {:instruction in1} {:instruction integer_max} {:instruction float_dup} {:instruction float_shove} {:instruction float_sub} {:instruction float_stackdepth} {:instruction float_rot} {:instruction integer_shove} {:instruction float_inc} {:instruction float_dup_times} {:instruction integer_add} {:instruction print_float} {:instruction integer_dec} {:instruction float_tan} {:instruction integer_flush} {:instruction -49} {:instruction in1} {:instruction float_yankdup} {:instruction float_max} {:instruction integer_flush} {:instruction float_dup_times} {:instruction float_div} {:instruction float_mult} {:instruction integer_shove} {:instruction float_dup} {:instruction integer_dup_times} {:instruction integer_dup} {:instruction float_mod} {:instruction integer_stackdepth} {:instruction integer_min} {:instruction float_sub} {:instruction tagged_690} {:instruction integer_swap} {:instruction float_mod} {:instruction float_shove} {:instruction float_sin} {:instruction float_frominteger})
Best program: (float_yank float_sub float_mod float_frominteger float_pop float_min print_integer integer_max integer_flush in1 float_inc integer_add integer_max integer_swap in1 integer_dup float_stackdepth integer_swap in1 integer_max float_dup float_shove float_sub float_stackdepth float_rot integer_shove float_inc float_dup_times integer_add print_float integer_dec float_tan integer_flush -49 in1 float_yankdup float_max integer_flush float_dup_times float_div float_mult integer_shove float_dup integer_dup_times integer_dup float_mod integer_stackdepth integer_min float_sub tagged_690 integer_swap float_mod float_shove float_sin float_frominteger)
Errors: [85.0 12 82.0 11 71.0 2 21.0 2 74.0 2 68.0 3 34.0 2 50.0 12 35.0 2 41.0 2 7.0 3 52.0 3 25.0 2 4.0 2 83.0 3 62.0 2 7.0 1 88.0 10 93.0 12 3.0 1 81.0 3 24.0 1 55.0 2 59.0 3 56.0 3]
Total: 1361.0
Mean: 27.22
Genome size: 55
Size: 56
Percent parens: 0.018
--- Population Statistics ---
Average total errors in population: 3370.0301311
Median total errors in population: 1366.0
Error averages by case: (154.99959820000004 12.163 162.28611559999996 11.279 143.256053 2.715 107.4156387 2.859 147.9029553 3.086 150.3547218 3.58 110.39345130000002 3.01 133.84559229999996 12.143 111.17097309999996 3.007 127.58063290000001 3.177 89.5393014 3.98 135.21565599999997 3.573 103.4047463 3.105 86.09236179999999 3.077 159.18369699999997 4.001 142.23396340000005 2.592 96.24336060000002 2.259 168.8837984 10.257 163.5426479 13.119 78.9654244 2.019 156.43802879999998 4.022 101.36941139999998 3.423 139.562424 3.17 142.03278670000003 4.129 134.3757908 3.996)
Error minima by case: (15.9376 10 0.8427 9 1.3668 1 8.6813 1 6.7977 2 60.5505 2 21.9137 2 32.5207 8 32.0 2 16.7274 2 7.0 2 15.5823 2 7.6837 2 4.0 2 9.7686 2 13.494 1 7.0 1 0.9828 9 6.8244 9 0.0 0 17.0 2 8.524 1 11.6201 2 45.5888 3 20.6751 2)
Average genome size in population (length): 39.542
Average program size in population (points): 40.542
Average percent parens in population: 0.030
Minimum age in population: 3.0
Maximum age in population: 5.75
Average age in population: 4.36025
Median age in population: 4.5
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 74
Genome diversity (% unique Plush genomes):	 0.544
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 74
Syntactic diversity (% unique Push programs):	 0.544
Total error diversity:				 0.039
Error (vector) diversity:			 0.041
Behavioral diversity:				 0.043
--- Run Statistics ---
Number of program evaluations used so far: 4000
Number of point (instruction) evaluations so far: 5106389
--- Timings ---
Current time: 1529615949138 milliseconds
Total Time:          13.7 seconds
Initialization:       0.1 seconds,  0.8%
Reproduction:         5.1 seconds, 37.1%
Fitness Testing:      7.2 seconds, 52.3%
Report:               1.3 seconds,  9.8%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 3
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 4
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 4
;;******************************
;; -*- Number IO problem report - generation 4
Test total error for best: 54747.0
Test mean error for best: 27.37350
;;------------------------------
Outputs of best individual on training cases:
Correct output: -74.6179542037 | Program output: 10.3820457963 
Correct output: 78.7609586813  | Program output: -3.2390413187 
Correct output: 3.0100598709   | Program output: 74.0100598709 
Correct output: -99.2368061293 | Program output: -78.2368061293
Correct output: 88.6808415603  | Program output: 14.6808415603 
Correct output: -151.1060419578 | Program output: -83.1060419578
Correct output: 56.004616184   | Program output: 90.004616184  
Correct output: 33.520660154   | Program output: -16.479339846 
Correct output: 42.238861085   | Program output: 77.238861085  
Correct output: -49.0227893765 | Program output: -90.0227893765
Correct output: 103.4057483059 | Program output: 96.4057483059 
Correct output: -106.1378273779 | Program output: -54.1378273779
Correct output: 37.9625599991  | Program output: 12.9625599991 
Correct output: 71.9208193203  | Program output: 67.9208193203 
Correct output: 173.5348464317 | Program output: 90.5348464317 
Correct output: -77.0615185935 | Program output: -15.0615185935
Correct output: -20.7643622555 | Program output: -27.7643622555
Correct output: 1.9827630815   | Program output: -86.0172369185
Correct output: -39.1198682611 | Program output: 53.8801317389 
Correct output: 1.1392376036   | Program output: 4.1392376036  
Correct output: 129.1930977679 | Program output: 48.1930977679 
Correct output: 26.7496211861  | Program output: 2.7496211861  
Correct output: -11.2984801384 | Program output: -66.2984801384
Correct output: -136.1442960385 | Program output: -77.1442960385
Correct output: 143.0911996605 | Program output: 87.0911996605 
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_yank} {:instruction float_sub} {:instruction float_div} {:instruction float_frominteger} {:instruction float_pop} {:instruction float_min} {:instruction print_integer} {:instruction integer_max} {:instruction integer_flush} {:instruction in1} {:instruction float_inc} {:instruction integer_add} {:instruction integer_max} {:instruction integer_swap} {:instruction in1} {:instruction integer_dup} {:instruction float_stackdepth} {:instruction integer_swap} {:instruction in1} {:instruction integer_max} {:instruction float_dup} {:instruction float_shove} {:instruction float_sub} {:instruction float_stackdepth} {:instruction float_rot} {:instruction integer_shove} {:instruction float_inc} {:instruction float_dup_times} {:instruction integer_add} {:instruction print_float} {:instruction integer_dec} {:instruction float_tan} {:instruction integer_flush} {:instruction -49} {:instruction in1} {:instruction float_yankdup} {:instruction float_max} {:instruction integer_flush} {:instruction float_dup_times} {:instruction float_div} {:instruction float_mult} {:instruction integer_shove} {:instruction float_dup} {:instruction integer_dup_times} {:instruction integer_dup} {:instruction float_mod} {:instruction integer_stackdepth} {:instruction integer_min} {:instruction float_sub} {:instruction tagged_690} {:instruction integer_swap} {:instruction float_mod} {:instruction float_shove} {:instruction float_sin} {:instruction float_frominteger})
Best program: (float_yank float_sub float_div float_frominteger float_pop float_min print_integer integer_max integer_flush in1 float_inc integer_add integer_max integer_swap in1 integer_dup float_stackdepth integer_swap in1 integer_max float_dup float_shove float_sub float_stackdepth float_rot integer_shove float_inc float_dup_times integer_add print_float integer_dec float_tan integer_flush -49 in1 float_yankdup float_max integer_flush float_dup_times float_div float_mult integer_shove float_dup integer_dup_times integer_dup float_mod integer_stackdepth integer_min float_sub tagged_690 integer_swap float_mod float_shove float_sin float_frominteger)
Errors: [85.0 12 82.0 11 71.0 2 21.0 2 74.0 2 68.0 3 34.0 2 50.0 12 35.0 2 41.0 2 7.0 3 52.0 3 25.0 2 4.0 2 83.0 3 62.0 2 7.0 1 88.0 10 93.0 12 3.0 1 81.0 3 24.0 1 55.0 2 59.0 3 56.0 3]
Total: 1361.0
Mean: 27.22
Genome size: 55
Size: 56
Percent parens: 0.018
--- Population Statistics ---
Average total errors in population: 3912.1070213000003
Median total errors in population: 1364.0
Error averages by case: (178.518137 12.233 176.17857479999998 11.262 170.0762097 2.452 127.9799799 2.655 168.50131689999998 3.314 169.7239072 4.31 137.7115459 3.222 148.97355919999995 12.06 138.5437563 3.212 145.2414653 3.429 114.25939809999998 4.302 155.21280019999998 4.323 125.0948691 3.322 110.96771419999999 3.3 181.97792009999995 4.317 160.2856006 3.323 114.11132579999999 2.548 186.24546039999998 10.301 189.76183060000002 13.102 104.2494546 2.311 179.5922721 4.284 123.18244029999997 3.287 157.2286782 3.418 161.6631283 4.391 157.84567649999997 4.302)
Error minima by case: (6.0817 10 0.1573 8 2.0101 1 19.0 1 9.7625 2 10.9183 2 21.9137 2 28.313 9 31.5043 2 15.4815 2 7.0 2 26.9183 2 2.0749 2 4.0 2 83.0 3 12.5573 1 7.0 1 0.8894 7 14.0817 10 0.1392 1 12.3862 3 21.5008 1 11.2985 2 19.9183 3 56.0 3)
Average genome size in population (length): 38.013
Average program size in population (points): 39.013
Average percent parens in population: 0.031
Minimum age in population: 4.0
Maximum age in population: 7.625
Average age in population: 5.82825
Median age in population: 5.875
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 154
Genome diversity (% unique Plush genomes):	 0.55
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 154
Syntactic diversity (% unique Push programs):	 0.55
Total error diversity:				 0.033
Error (vector) diversity:			 0.033
Behavioral diversity:				 0.034
--- Run Statistics ---
Number of program evaluations used so far: 5000
Number of point (instruction) evaluations so far: 6057189
--- Timings ---
Current time: 1529615952105 milliseconds
Total Time:          16.7 seconds
Initialization:       0.1 seconds,  0.7%
Reproduction:         6.4 seconds, 38.6%
Fitness Testing:      8.4 seconds, 50.3%
Report:               1.7 seconds, 10.5%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 4
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 5
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 5
;;******************************
;; -*- Number IO problem report - generation 5
Test total error for best: 54747.0
Test mean error for best: 27.37350
;;------------------------------
Outputs of best individual on training cases:
Correct output: -74.6179542037 | Program output: 10.3820457963 
Correct output: 78.7609586813  | Program output: -3.2390413187 
Correct output: 3.0100598709   | Program output: 74.0100598709 
Correct output: -99.2368061293 | Program output: -78.2368061293
Correct output: 88.6808415603  | Program output: 14.6808415603 
Correct output: -151.1060419578 | Program output: -83.1060419578
Correct output: 56.004616184   | Program output: 90.004616184  
Correct output: 33.520660154   | Program output: -16.479339846 
Correct output: 42.238861085   | Program output: 77.238861085  
Correct output: -49.0227893765 | Program output: -90.0227893765
Correct output: 103.4057483059 | Program output: 96.4057483059 
Correct output: -106.1378273779 | Program output: -54.1378273779
Correct output: 37.9625599991  | Program output: 12.9625599991 
Correct output: 71.9208193203  | Program output: 67.9208193203 
Correct output: 173.5348464317 | Program output: 90.5348464317 
Correct output: -77.0615185935 | Program output: -15.0615185935
Correct output: -20.7643622555 | Program output: -27.7643622555
Correct output: 1.9827630815   | Program output: -86.0172369185
Correct output: -39.1198682611 | Program output: 53.8801317389 
Correct output: 1.1392376036   | Program output: 4.1392376036  
Correct output: 129.1930977679 | Program output: 48.1930977679 
Correct output: 26.7496211861  | Program output: 2.7496211861  
Correct output: -11.2984801384 | Program output: -66.2984801384
Correct output: -136.1442960385 | Program output: -77.1442960385
Correct output: 143.0911996605 | Program output: 87.0911996605 
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_dup} {:instruction float_sub} {:instruction float_mod} {:instruction float_frominteger} {:instruction float_pop} {:instruction float_min} {:instruction print_integer} {:instruction integer_max} {:instruction integer_flush} {:instruction in1} {:instruction float_inc} {:instruction integer_add} {:instruction integer_max} {:instruction integer_swap} {:instruction in1} {:instruction integer_dup} {:instruction float_stackdepth} {:instruction integer_swap} {:instruction in1} {:instruction integer_max} {:instruction float_dup} {:instruction float_shove} {:instruction float_sub} {:instruction float_stackdepth} {:instruction float_rot} {:instruction integer_shove} {:instruction float_inc} {:instruction float_dup_times} {:instruction integer_add} {:instruction print_float} {:instruction integer_dec} {:instruction float_tan} {:instruction integer_flush} {:instruction integer_yankdup} {:instruction in1} {:instruction float_yankdup} {:instruction float_max} {:instruction integer_flush} {:instruction float_dup_times} {:instruction float_div} {:instruction float_mult} {:instruction integer_shove} {:instruction float_dup} {:instruction integer_dup_times} {:instruction integer_dup} {:instruction float_mod} {:instruction integer_stackdepth} {:instruction integer_min} {:instruction float_sub} {:instruction tagged_690} {:instruction integer_swap} {:instruction float_mod} {:instruction float_shove} {:instruction float_mult} {:instruction float_frominteger})
Best program: (float_dup float_sub float_mod float_frominteger float_pop float_min print_integer integer_max integer_flush in1 float_inc integer_add integer_max integer_swap in1 integer_dup float_stackdepth integer_swap in1 integer_max float_dup float_shove float_sub float_stackdepth float_rot integer_shove float_inc float_dup_times integer_add print_float integer_dec float_tan integer_flush integer_yankdup in1 float_yankdup float_max integer_flush float_dup_times float_div float_mult integer_shove float_dup integer_dup_times integer_dup float_mod integer_stackdepth integer_min float_sub tagged_690 integer_swap float_mod float_shove float_mult float_frominteger)
Errors: [85.0 12 82.0 11 71.0 2 21.0 2 74.0 2 68.0 3 34.0 2 50.0 12 35.0 2 41.0 2 7.0 3 52.0 3 25.0 2 4.0 2 83.0 3 62.0 2 7.0 1 88.0 10 93.0 12 3.0 1 81.0 3 24.0 1 55.0 2 59.0 3 56.0 3]
Total: 1361.0
Mean: 27.22
Genome size: 55
Size: 56
Percent parens: 0.018
--- Population Statistics ---
Average total errors in population: 3942.3017419000003
Median total errors in population: 1364.0
Error averages by case: (176.34652130000003 12.2 172.45164569999997 11.247 171.84129880000006 2.535 130.79820010000003 2.705 168.17919429999998 3.335 172.66332570000003 4.416 139.80420890000002 3.27 149.32077669999995 12.045 140.61950649999994 3.269 147.9763327 3.454 117.41555960000001 4.32 157.94661929999995 4.436 124.6955915 3.358 114.2788369 3.33 185.01368469999994 4.316 160.85367520000003 3.439 116.65767210000003 2.569 188.2857532 10.309 191.5922597 12.978 100.06463940000002 2.341 182.3840518 4.292 118.50508149999996 3.213 159.6365425 3.428 164.56119000000004 4.415 160.88857380000002 4.301)
Error minima by case: (5.5319 7 0.1573 8 1.0101 1 18.0 1 8.6267 2 65.0 2 21.9137 2 31.5207 8 9.6941 2 20.0633 2 7.0 2 37.0517 2 25.0 2 4.0 2 83.0 2 7.9754 1 7.0 1 0.0172 9 25.9022 10 0.0 0 49.139 3 19.1892 1 1.9192 2 56.0 3 56.0 2)
Average genome size in population (length): 38.483
Average program size in population (points): 39.483
Average percent parens in population: 0.029
Minimum age in population: 5.25
Maximum age in population: 9.125
Average age in population: 7.2890625
Median age in population: 7.375
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 132
Genome diversity (% unique Plush genomes):	 0.569
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 132
Syntactic diversity (% unique Push programs):	 0.569
Total error diversity:				 0.042
Error (vector) diversity:			 0.043
Behavioral diversity:				 0.043
--- Run Statistics ---
Number of program evaluations used so far: 6000
Number of point (instruction) evaluations so far: 7019689
--- Timings ---
Current time: 1529615955040 milliseconds
Total Time:          19.6 seconds
Initialization:       0.1 seconds,  0.6%
Reproduction:         7.7 seconds, 39.6%
Fitness Testing:      9.6 seconds, 48.9%
Report:               2.1 seconds, 10.9%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 5
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 6
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 6
;;******************************
;; -*- Number IO problem report - generation 6
Test total error for best: 54762.0
Test mean error for best: 27.38100
;;------------------------------
Outputs of best individual on training cases:
Correct output: -74.6179542037 | Program output: 11.3820457963 
Correct output: 78.7609586813  | Program output: -2.2390413187 
Correct output: 3.0100598709   | Program output: 75.0100598709 
Correct output: -99.2368061293 | Program output: -77.2368061293
Correct output: 88.6808415603  | Program output: 15.6808415603 
Correct output: -151.1060419578 | Program output: -82.1060419578
Correct output: 56.004616184   | Program output: 91.004616184  
Correct output: 33.520660154   | Program output: -15.479339846 
Correct output: 42.238861085   | Program output: 78.238861085  
Correct output: -49.0227893765 | Program output: -89.0227893765
Correct output: 103.4057483059 | Program output: 97.4057483059 
Correct output: -106.1378273779 | Program output: -53.1378273779
Correct output: 37.9625599991  | Program output: 13.9625599991 
Correct output: 71.9208193203  | Program output: 68.9208193203 
Correct output: 173.5348464317 | Program output: 91.5348464317 
Correct output: -77.0615185935 | Program output: -14.0615185935
Correct output: -20.7643622555 | Program output: -26.7643622555
Correct output: 1.9827630815   | Program output: -85.0172369185
Correct output: -39.1198682611 | Program output: 54.8801317389 
Correct output: 1.1392376036   | Program output: 5.1392376036  
Correct output: 129.1930977679 | Program output: 49.1930977679 
Correct output: 26.7496211861  | Program output: 3.7496211861  
Correct output: -11.2984801384 | Program output: -65.2984801384
Correct output: -136.1442960385 | Program output: -76.1442960385
Correct output: 143.0911996605 | Program output: 88.0911996605 
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_yank} {:instruction float_sub} {:instruction float_mod} {:instruction float_frominteger} {:instruction float_pop} {:instruction float_min} {:instruction print_integer} {:instruction integer_max} {:instruction integer_flush} {:instruction in1} {:instruction float_inc} {:instruction float_inc} {:instruction integer_add} {:instruction integer_max} {:instruction float_sub} {:instruction in1} {:instruction integer_dup} {:instruction float_stackdepth} {:instruction integer_swap} {:instruction in1} {:instruction integer_max} {:instruction float_dup} {:instruction float_shove} {:instruction float_sub} {:instruction float_stackdepth} {:instruction float_rot} {:instruction integer_shove} {:instruction float_inc} {:instruction float_dup_times} {:instruction integer_add} {:instruction print_float} {:instruction integer_dec} {:instruction float_tan} {:instruction integer_flush} {:instruction integer_yankdup} {:instruction in1} {:instruction float_yankdup} {:instruction float_max} {:instruction integer_flush} {:instruction float_dup_times} {:instruction float_div} {:instruction float_mult} {:instruction integer_shove} {:instruction float_dup} {:instruction integer_dup_times} {:instruction integer_dup} {:instruction float_mod} {:instruction integer_stackdepth} {:instruction integer_min} {:instruction float_sub} {:instruction tagged_690} {:instruction integer_swap} {:instruction float_mod} {:instruction float_shove} {:instruction float_sin} {:instruction float_frominteger})
Best program: (float_yank float_sub float_mod float_frominteger float_pop float_min print_integer integer_max integer_flush in1 float_inc float_inc integer_add integer_max float_sub in1 integer_dup float_stackdepth integer_swap in1 integer_max float_dup float_shove float_sub float_stackdepth float_rot integer_shove float_inc float_dup_times integer_add print_float integer_dec float_tan integer_flush integer_yankdup in1 float_yankdup float_max integer_flush float_dup_times float_div float_mult integer_shove float_dup integer_dup_times integer_dup float_mod integer_stackdepth integer_min float_sub tagged_690 integer_swap float_mod float_shove float_sin float_frominteger)
Errors: [86.0 12 81.0 11 72.0 2 22.0 2 73.0 2 69.0 3 35.0 2 49.0 12 36.0 2 40.0 1 6.0 3 53.0 3 24.0 2 3.0 2 82.0 3 63.0 2 6.0 1 87.0 10 94.0 13 4.0 1 80.0 2 23.0 2 54.0 2 60.0 2 55.0 3]
Total: 1357.0
Mean: 27.14
Genome size: 56
Size: 57
Percent parens: 0.018
--- Population Statistics ---
Average total errors in population: 2970.6783635999977
Median total errors in population: 1364.0
Error averages by case: (140.49469690000004 12.13 138.0317963999999 11.175 128.7116489 2.778 92.16004019999995 2.983 133.32145300000008 3.251 136.32040600000002 4.309 99.53375940000002 3.181 109.94304749999988 11.958 99.61022679999986 3.15 106.81292290000005 3.377 79.63533920000006 4.188 119.33619689999988 4.354 87.80445869999997 3.298 73.97840530000006 3.195 150.4784418999999 4.245 123.39702509999998 3.365 74.78782830000002 2.54 144.14127889999992 10.173 150.3044174 12.598 59.6668525 2.203 145.6629992000001 4.161 80.49708019999996 2.799 116.25057310000003 3.334 127.46557860000001 4.317 125.06789029999995 4.202)
Error minima by case: (74.1141 9 0.1573 9 0.766 1 18.9872 1 9.7625 2 65.988 2 14.0356 2 8.4483 8 0.2699 2 40.0 1 6.0 3 49.9815 2 4.0064 2 3.0 2 82.0 3 59.9336 1 6.0 1 0.0172 8 39.076 10 0.1392 1 50.2748 2 15.2194 1 10.9615 2 56.987 2 55.0 3)
Average genome size in population (length): 43.099
Average program size in population (points): 44.099
Average percent parens in population: 0.025
Minimum age in population: 6.25
Maximum age in population: 10.5
Average age in population: 8.8390625
Median age in population: 8.875
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 66
Genome diversity (% unique Plush genomes):	 0.62
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 66
Syntactic diversity (% unique Push programs):	 0.62
Total error diversity:				 0.041
Error (vector) diversity:			 0.042
Behavioral diversity:				 0.044
--- Run Statistics ---
Number of program evaluations used so far: 7000
Number of point (instruction) evaluations so far: 8097264
--- Timings ---
Current time: 1529615958090 milliseconds
Total Time:          22.6 seconds
Initialization:       0.1 seconds,  0.5%
Reproduction:         9.1 seconds, 40.1%
Fitness Testing:     10.9 seconds, 48.2%
Report:               2.5 seconds, 11.2%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 6
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 7
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 7
;;******************************
;; -*- Number IO problem report - generation 7
Test total error for best: 54826.0
Test mean error for best: 27.41300
;;------------------------------
Outputs of best individual on training cases:
Correct output: -74.6179542037 | Program output: 12.3820457963 
Correct output: 78.7609586813  | Program output: -1.2390413187 
Correct output: 3.0100598709   | Program output: 76.0100598709 
Correct output: -99.2368061293 | Program output: -76.2368061293
Correct output: 88.6808415603  | Program output: 16.6808415603 
Correct output: -151.1060419578 | Program output: -81.1060419578
Correct output: 56.004616184   | Program output: 92.004616184  
Correct output: 33.520660154   | Program output: -14.479339846 
Correct output: 42.238861085   | Program output: 79.238861085  
Correct output: -49.0227893765 | Program output: -88.0227893765
Correct output: 103.4057483059 | Program output: 98.4057483059 
Correct output: -106.1378273779 | Program output: -52.1378273779
Correct output: 37.9625599991  | Program output: 14.9625599991 
Correct output: 71.9208193203  | Program output: 69.9208193203 
Correct output: 173.5348464317 | Program output: 92.5348464317 
Correct output: -77.0615185935 | Program output: -13.0615185935
Correct output: -20.7643622555 | Program output: -25.7643622555
Correct output: 1.9827630815   | Program output: -84.0172369185
Correct output: -39.1198682611 | Program output: 55.8801317389 
Correct output: 1.1392376036   | Program output: 6.1392376036  
Correct output: 129.1930977679 | Program output: 50.1930977679 
Correct output: 26.7496211861  | Program output: 4.7496211861  
Correct output: -11.2984801384 | Program output: -64.2984801384
Correct output: -136.1442960385 | Program output: -75.1442960385
Correct output: 143.0911996605 | Program output: 89.0911996605 
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_yank} {:instruction float_sub} {:instruction float_mod} {:instruction float_frominteger} {:instruction float_pop} {:instruction float_min} {:instruction print_integer} {:instruction integer_max} {:instruction integer_flush} {:instruction in1} {:instruction float_inc} {:instruction float_inc} {:instruction integer_add} {:instruction integer_max} {:instruction float_sub} {:instruction in1} {:instruction integer_dup} {:instruction float_stackdepth} {:instruction integer_swap} {:instruction in1} {:instruction integer_max} {:instruction float_dup} {:instruction float_shove} {:instruction float_sub} {:instruction float_stackdepth} {:instruction float_rot} {:instruction integer_shove} {:instruction float_inc} {:instruction float_dup_times} {:instruction float_rot} {:instruction integer_shove} {:instruction float_inc} {:instruction float_dup_times} {:instruction integer_add} {:instruction print_float} {:instruction integer_dec} {:instruction float_tan} {:instruction integer_flush} {:instruction -49} {:instruction in1} {:instruction float_yankdup} {:instruction float_max} {:instruction integer_flush} {:instruction float_dup_times} {:instruction float_div} {:instruction float_mult} {:instruction integer_shove} {:instruction float_dup} {:instruction integer_dup_times} {:instruction integer_dup} {:instruction float_mod} {:instruction integer_stackdepth} {:instruction integer_min} {:instruction float_sub} {:instruction tagged_690} {:instruction integer_swap} {:instruction float_mod} {:instruction float_shove} {:instruction float_sin} {:instruction integer_min})
Best program: (float_yank float_sub float_mod float_frominteger float_pop float_min print_integer integer_max integer_flush in1 float_inc float_inc integer_add integer_max float_sub in1 integer_dup float_stackdepth integer_swap in1 integer_max float_dup float_shove float_sub float_stackdepth float_rot integer_shove float_inc float_dup_times float_rot integer_shove float_inc float_dup_times integer_add print_float integer_dec float_tan integer_flush -49 in1 float_yankdup float_max integer_flush float_dup_times float_div float_mult integer_shove float_dup integer_dup_times integer_dup float_mod integer_stackdepth integer_min float_sub tagged_690 integer_swap float_mod float_shove float_sin integer_min)
Errors: [87.0 12 80.0 11 73.0 2 23.0 2 72.0 2 70.0 2 36.0 2 48.0 12 37.0 2 39.0 2 5.0 3 54.0 3 23.0 2 2.0 2 81.0 3 64.0 2 5.0 1 86.0 10 95.0 13 5.0 1 79.0 3 22.0 2 53.0 2 61.0 3 54.0 3]
Total: 1356.0
Mean: 27.12
Genome size: 60
Size: 61
Percent parens: 0.016
--- Population Statistics ---
Average total errors in population: 2704.214467499997
Median total errors in population: 1361.0
Error averages by case: (132.2550526000001 12.189 133.04579979999994 11.23 115.71329719999997 2.992 81.37395609999994 3.176 123.16448470000007 3.121 126.07964009999999 4.152 86.4511599 3.03 102.06808139999993 12.035 86.3909125999999 3.025 95.90511060000003 3.208 65.6892568000001 4.046 108.98216089999988 4.218 76.95064109999996 3.196 60.8986908 3.079 137.70591299999984 4.109 115.71932849999999 3.228 63.86466350000001 2.387 134.09034619999994 10.206 137.27370640000012 12.335 54.81544199999998 2.08 132.07280060000008 4.017 74.84849530000005 2.345 105.68806360000002 3.191 117.17182820000001 4.129 111.20363559999996 4.068)
Error minima by case: (66.2359 10 5.3964 8 0.0101 1 19.0 1 22.4434 2 66.0 2 32.0 2 15.0413 9 30.6306 2 39.0 1 5.0 3 50.0 2 16.9978 2 2.0 2 81.0 3 60.0 1 5.0 1 0.0172 9 12.7603 9 0.1392 1 79.0 2 4.0 1 8.3118 2 57.0 2 54.0 3)
Average genome size in population (length): 48.523
Average program size in population (points): 49.523
Average percent parens in population: 0.021
Minimum age in population: 7.75
Maximum age in population: 12.25
Average age in population: 10.31409375
Median age in population: 10.34375
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 62
Genome diversity (% unique Plush genomes):	 0.65
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 62
Syntactic diversity (% unique Push programs):	 0.65
Total error diversity:				 0.029
Error (vector) diversity:			 0.032
Behavioral diversity:				 0.032
--- Run Statistics ---
Number of program evaluations used so far: 8000
Number of point (instruction) evaluations so far: 9310389
--- Timings ---
Current time: 1529615961282 milliseconds
Total Time:          25.8 seconds
Initialization:       0.1 seconds,  0.4%
Reproduction:        10.4 seconds, 40.3%
Fitness Testing:     12.4 seconds, 47.9%
Report:               2.9 seconds, 11.4%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 7
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 8
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 8
;;******************************
;; -*- Number IO problem report - generation 8
Test total error for best: 54826.0
Test mean error for best: 27.41300
;;------------------------------
Outputs of best individual on training cases:
Correct output: -74.6179542037 | Program output: 12.3820457963 
Correct output: 78.7609586813  | Program output: -1.2390413187 
Correct output: 3.0100598709   | Program output: 76.0100598709 
Correct output: -99.2368061293 | Program output: -76.2368061293
Correct output: 88.6808415603  | Program output: 16.6808415603 
Correct output: -151.1060419578 | Program output: -81.1060419578
Correct output: 56.004616184   | Program output: 92.004616184  
Correct output: 33.520660154   | Program output: -14.479339846 
Correct output: 42.238861085   | Program output: 79.238861085  
Correct output: -49.0227893765 | Program output: -88.0227893765
Correct output: 103.4057483059 | Program output: 98.4057483059 
Correct output: -106.1378273779 | Program output: -52.1378273779
Correct output: 37.9625599991  | Program output: 14.9625599991 
Correct output: 71.9208193203  | Program output: 69.9208193203 
Correct output: 173.5348464317 | Program output: 92.5348464317 
Correct output: -77.0615185935 | Program output: -13.0615185935
Correct output: -20.7643622555 | Program output: -25.7643622555
Correct output: 1.9827630815   | Program output: -84.0172369185
Correct output: -39.1198682611 | Program output: 55.8801317389 
Correct output: 1.1392376036   | Program output: 6.1392376036  
Correct output: 129.1930977679 | Program output: 50.1930977679 
Correct output: 26.7496211861  | Program output: 4.7496211861  
Correct output: -11.2984801384 | Program output: -64.2984801384
Correct output: -136.1442960385 | Program output: -75.1442960385
Correct output: 143.0911996605 | Program output: 89.0911996605 
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_yank} {:instruction float_sub} {:instruction float_mod} {:instruction float_frominteger} {:instruction float_pop} {:instruction float_min} {:instruction print_integer} {:instruction integer_max} {:instruction integer_flush} {:instruction in1} {:instruction float_inc} {:instruction float_inc} {:instruction integer_add} {:instruction integer_max} {:instruction float_sub} {:instruction in1} {:instruction integer_dup} {:instruction float_stackdepth} {:instruction integer_swap} {:instruction in1} {:instruction integer_max} {:instruction float_dup} {:instruction float_shove} {:instruction float_sub} {:instruction float_stackdepth} {:instruction float_rot} {:instruction integer_shove} {:instruction float_inc} {:instruction float_dup_times} {:instruction float_rot} {:instruction integer_shove} {:instruction float_inc} {:instruction float_dup_times} {:instruction integer_add} {:instruction print_float} {:instruction integer_dec} {:instruction float_tan} {:instruction integer_flush} {:instruction -49} {:instruction in1} {:instruction float_yankdup} {:instruction float_max} {:instruction integer_flush} {:instruction float_dup_times} {:instruction float_div} {:instruction float_mult} {:instruction integer_shove} {:instruction float_dup} {:instruction integer_dup_times} {:instruction integer_dup} {:instruction float_mod} {:instruction integer_stackdepth} {:instruction integer_min} {:instruction float_sub} {:instruction tagged_690} {:instruction integer_swap} {:instruction float_mod} {:instruction float_shove} {:instruction float_sin} {:instruction integer_min})
Best program: (float_yank float_sub float_mod float_frominteger float_pop float_min print_integer integer_max integer_flush in1 float_inc float_inc integer_add integer_max float_sub in1 integer_dup float_stackdepth integer_swap in1 integer_max float_dup float_shove float_sub float_stackdepth float_rot integer_shove float_inc float_dup_times float_rot integer_shove float_inc float_dup_times integer_add print_float integer_dec float_tan integer_flush -49 in1 float_yankdup float_max integer_flush float_dup_times float_div float_mult integer_shove float_dup integer_dup_times integer_dup float_mod integer_stackdepth integer_min float_sub tagged_690 integer_swap float_mod float_shove float_sin integer_min)
Errors: [87.0 12 80.0 11 73.0 2 23.0 2 72.0 2 70.0 2 36.0 2 48.0 12 37.0 2 39.0 2 5.0 3 54.0 3 23.0 2 2.0 2 81.0 3 64.0 2 5.0 1 86.0 10 95.0 13 5.0 1 79.0 3 22.0 2 53.0 2 61.0 3 54.0 3]
Total: 1356.0
Mean: 27.12
Genome size: 60
Size: 61
Percent parens: 0.016
--- Population Statistics ---
Average total errors in population: 2895.9948231999965
Median total errors in population: 1361.0
Error averages by case: (139.3044957000001 12.197 137.5287701999999 11.254 123.41969319999997 3.209 89.23660889999992 3.461 130.72412450000013 3.359 133.66461759999996 4.423 95.72453920000001 3.244 107.0086069999998 12.012 95.51140099999981 3.224 102.19365550000018 3.364 76.05422050000014 4.286 116.3374165999998 4.507 84.62289949999995 3.444 70.9763159 3.312 147.70229679999971 4.365 121.07032599999994 3.492 70.47183890000001 2.688 138.60830479999993 10.228 145.19817490000017 12.5 61.08546839999999 2.303 141.61142620000015 4.119 80.91763470000008 2.733 111.21914190000011 3.464 124.76070499999999 4.285 121.27014029999988 4.299)
Error minima by case: (14.7413 9 0.1573 9 0.0101 1 19.0 1 9.7625 2 66.0 2 22.9137 2 16.0413 9 33.0 2 2.943 1 5.0 3 50.0 2 23.0 2 2.0 2 81.0 3 25.0958 1 5.0 1 0.0172 9 12.8459 10 0.1392 1 50.2748 2 13.0 1 8.3118 2 57.0 2 54.0 3)
Average genome size in population (length): 49.122
Average program size in population (points): 50.122
Average percent parens in population: 0.021
Minimum age in population: 8.875
Maximum age in population: 13.546875
Average age in population: 11.7784375
Median age in population: 11.828125
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 38
Genome diversity (% unique Plush genomes):	 0.718
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 38
Syntactic diversity (% unique Push programs):	 0.718
Total error diversity:				 0.039
Error (vector) diversity:			 0.041
Behavioral diversity:				 0.041
--- Run Statistics ---
Number of program evaluations used so far: 9000
Number of point (instruction) evaluations so far: 10538514
--- Timings ---
Current time: 1529615964477 milliseconds
Total Time:          29.0 seconds
Initialization:       0.1 seconds,  0.4%
Reproduction:        11.7 seconds, 40.5%
Fitness Testing:     13.8 seconds, 47.6%
Report:               3.3 seconds, 11.6%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 8
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 9
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 9
;;******************************
;; -*- Number IO problem report - generation 9
Test total error for best: 54864.0
Test mean error for best: 27.43200
;;------------------------------
Outputs of best individual on training cases:
Correct output: -74.6179542037 | Program output: 13.3820457963 
Correct output: 78.7609586813  | Program output: -0.2390413187 
Correct output: 3.0100598709   | Program output: 77.0100598709 
Correct output: -99.2368061293 | Program output: -75.2368061293
Correct output: 88.6808415603  | Program output: 17.6808415603 
Correct output: -151.1060419578 | Program output: -80.1060419578
Correct output: 56.004616184   | Program output: 93.004616184  
Correct output: 33.520660154   | Program output: -13.479339846 
Correct output: 42.238861085   | Program output: 80.238861085  
Correct output: -49.0227893765 | Program output: -87.0227893765
Correct output: 103.4057483059 | Program output: 99.4057483059 
Correct output: -106.1378273779 | Program output: -51.1378273779
Correct output: 37.9625599991  | Program output: 15.9625599991 
Correct output: 71.9208193203  | Program output: 70.9208193203 
Correct output: 173.5348464317 | Program output: 93.5348464317 
Correct output: -77.0615185935 | Program output: -12.0615185935
Correct output: -20.7643622555 | Program output: -24.7643622555
Correct output: 1.9827630815   | Program output: -83.0172369185
Correct output: -39.1198682611 | Program output: 56.8801317389 
Correct output: 1.1392376036   | Program output: 7.1392376036  
Correct output: 129.1930977679 | Program output: 51.1930977679 
Correct output: 26.7496211861  | Program output: 5.7496211861  
Correct output: -11.2984801384 | Program output: -63.2984801384
Correct output: -136.1442960385 | Program output: -74.1442960385
Correct output: 143.0911996605 | Program output: 90.0911996605 
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_yank} {:instruction float_sub} {:instruction float_mod} {:instruction float_frominteger} {:instruction float_pop} {:instruction float_min} {:instruction print_integer} {:instruction integer_max} {:instruction integer_flush} {:instruction in1} {:instruction float_inc} {:instruction integer_add} {:instruction integer_max} {:instruction integer_swap} {:instruction in1} {:instruction integer_dup} {:instruction float_stackdepth} {:instruction integer_swap} {:instruction in1} {:instruction integer_max} {:instruction float_dup} {:instruction float_shove} {:instruction float_sub} {:instruction float_stackdepth} {:instruction float_rot} {:instruction integer_shove} {:instruction float_inc} {:instruction float_dup_times} {:instruction integer_add} {:instruction float_inc} {:instruction float_dup_times} {:instruction float_inc} {:instruction float_dup_times} {:instruction integer_add} {:instruction integer_shove} {:instruction float_inc} {:instruction float_dup_times} {:instruction integer_add} {:instruction print_float} {:instruction integer_dec} {:instruction float_tan} {:instruction -49} {:instruction in1} {:instruction float_yankdup} {:instruction float_max} {:instruction integer_flush} {:instruction float_dup_times} {:instruction float_div} {:instruction float_mult} {:instruction integer_shove} {:instruction float_dup} {:instruction integer_dup_times} {:instruction integer_shove} {:instruction float_dup} {:instruction integer_dup_times} {:instruction integer_dup} {:instruction float_mod} {:instruction integer_stackdepth} {:instruction integer_min} {:instruction float_sub} {:instruction tagged_690} {:instruction integer_swap} {:instruction integer_min} {:instruction float_shove})
Best program: (float_yank float_sub float_mod float_frominteger float_pop float_min print_integer integer_max integer_flush in1 float_inc integer_add integer_max integer_swap in1 integer_dup float_stackdepth integer_swap in1 integer_max float_dup float_shove float_sub float_stackdepth float_rot integer_shove float_inc float_dup_times integer_add float_inc float_dup_times float_inc float_dup_times integer_add integer_shove float_inc float_dup_times integer_add print_float integer_dec float_tan -49 in1 float_yankdup float_max integer_flush float_dup_times float_div float_mult integer_shove float_dup integer_dup_times integer_shove float_dup integer_dup_times integer_dup float_mod integer_stackdepth integer_min float_sub tagged_690 integer_swap integer_min float_shove)
Errors: [88.0 12 79.0 11 74.0 2 24.0 2 71.0 2 71.0 3 37.0 2 47.0 11 38.0 2 38.0 2 4.0 3 55.0 3 22.0 2 1.0 1 80.0 2 65.0 2 4.0 1 85.0 10 96.0 13 6.0 1 78.0 3 21.0 2 52.0 2 62.0 3 53.0 3]
Total: 1351.0
Mean: 27.02
Genome size: 64
Size: 65
Percent parens: 0.015
--- Population Statistics ---
Average total errors in population: 2744.361667699998
Median total errors in population: 1357.0
Error averages by case: (134.08800040000008 12.171 131.3446085999999 11.216 118.14077409999996 3.102 83.92390779999992 3.309 123.49549670000009 3.209 128.63409919999998 4.259 89.76676290000002 3.135 100.86546819999988 12.005 89.63485339999984 3.112 96.25245230000007 2.85 68.5564473000001 4.14 111.24789799999985 4.35 77.60824979999995 3.292 63.59312729999999 3.178 141.28078199999985 4.213 116.21646599999995 3.352 64.24220980000001 2.499 133.26788179999997 10.211 140.13454180000005 12.822 56.608429799999975 2.209 134.4827753000001 3.623 75.38893460000001 2.942 105.49153040000006 3.302 119.6814575 3.797 113.9485126999999 4.168)
Error minima by case: (53.8499 10 1.1573 10 0.0101 1 12.1178 1 8.097 2 66.0 2 22.9137 2 12.5207 8 21.2389 2 28.2547 1 4.0 3 50.0 2 16.9626 2 1.0 1 80.0 2 56.2934 1 0.0037 1 0.0172 8 13.7603 9 0.1369 1 48.6093 2 5.7496 1 8.3118 2 57.0 2 53.0 3)
Average genome size in population (length): 52.372
Average program size in population (points): 53.372
Average percent parens in population: 0.020
Minimum age in population: 9.875
Maximum age in population: 15.16015625
Average age in population: 13.30208203125
Median age in population: 13.32421875
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 47
Genome diversity (% unique Plush genomes):	 0.697
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 47
Syntactic diversity (% unique Push programs):	 0.697
Total error diversity:				 0.054
Error (vector) diversity:			 0.058
Behavioral diversity:				 0.058
--- Run Statistics ---
Number of program evaluations used so far: 10000
Number of point (instruction) evaluations so far: 11847889
--- Timings ---
Current time: 1529615967669 milliseconds
Total Time:          32.2 seconds
Initialization:       0.1 seconds,  0.4%
Reproduction:        13.0 seconds, 40.5%
Fitness Testing:     15.2 seconds, 47.3%
Report:               3.8 seconds, 11.8%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 9
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 10
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 10
;;******************************
;; -*- Number IO problem report - generation 10
Test total error for best: 54882.0
Test mean error for best: 27.44100
;;------------------------------
Outputs of best individual on training cases:
Correct output: -74.6179542037 | Program output: 14.3820457963 
Correct output: 78.7609586813  | Program output: 0.7609586813  
Correct output: 3.0100598709   | Program output: 78.0100598709 
Correct output: -99.2368061293 | Program output: -74.2368061293
Correct output: 88.6808415603  | Program output: 18.6808415603 
Correct output: -151.1060419578 | Program output: -79.1060419578
Correct output: 56.004616184   | Program output: 94.004616184  
Correct output: 33.520660154   | Program output: -12.479339846 
Correct output: 42.238861085   | Program output: 81.238861085  
Correct output: -49.0227893765 | Program output: -86.0227893765
Correct output: 103.4057483059 | Program output: 100.4057483059
Correct output: -106.1378273779 | Program output: -50.1378273779
Correct output: 37.9625599991  | Program output: 16.9625599991 
Correct output: 71.9208193203  | Program output: 71.9208193203 
Correct output: 173.5348464317 | Program output: 94.5348464317 
Correct output: -77.0615185935 | Program output: -11.0615185935
Correct output: -20.7643622555 | Program output: -23.7643622555
Correct output: 1.9827630815   | Program output: -82.0172369185
Correct output: -39.1198682611 | Program output: 57.8801317389 
Correct output: 1.1392376036   | Program output: 8.1392376036  
Correct output: 129.1930977679 | Program output: 52.1930977679 
Correct output: 26.7496211861  | Program output: 6.7496211861  
Correct output: -11.2984801384 | Program output: -62.2984801384
Correct output: -136.1442960385 | Program output: -73.1442960385
Correct output: 143.0911996605 | Program output: 91.0911996605 
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_yank} {:instruction float_sub} {:instruction float_mod} {:instruction float_frominteger} {:instruction float_pop} {:instruction float_tan} {:instruction float_add} {:instruction integer_max} {:instruction integer_flush} {:instruction integer_pop} {:instruction float_frominteger} {:instruction in1} {:instruction integer_flush} {:instruction float_shove} {:instruction integer_flush} {:instruction float_shove} {:instruction integer_swap} {:instruction float_inc} {:instruction float_inc} {:instruction integer_max} {:instruction integer_yank} {:instruction integer_yank} {:instruction float_inc} {:instruction integer_dup_times} {:instruction integer_dup} {:instruction float_swap} {:instruction integer_min} {:instruction -16} {:instruction integer_pop} {:instruction integer_add} {:instruction float_dup_times} {:instruction integer_add} {:instruction integer_shove} {:instruction float_inc} {:instruction float_dup_times} {:instruction integer_add} {:instruction integer_shove} {:instruction float_inc} {:instruction float_dup_times} {:instruction float_rot} {:instruction integer_shove} {:instruction float_inc} {:instruction integer_swap} {:instruction integer_add} {:instruction print_float} {:instruction integer_dec} {:instruction float_tan} {:instruction integer_flush} {:instruction -49} {:instruction in1} {:instruction float_yankdup} {:instruction float_max} {:instruction integer_flush} {:instruction float_dup_times} {:instruction float_div} {:instruction float_mult} {:instruction integer_shove} {:instruction float_dup} {:instruction integer_dup_times} {:instruction integer_dup} {:instruction float_mod} {:instruction integer_stackdepth} {:instruction integer_min} {:instruction float_sub} {:instruction tagged_690} {:instruction integer_swap} {:instruction float_mod} {:instruction float_shove} {:instruction float_sin} {:instruction integer_min})
Best program: (float_yank float_sub float_mod float_frominteger float_pop float_tan float_add integer_max integer_flush integer_pop float_frominteger in1 integer_flush float_shove integer_flush float_shove integer_swap float_inc float_inc integer_max integer_yank integer_yank float_inc integer_dup_times integer_dup float_swap integer_min -16 integer_pop integer_add float_dup_times integer_add integer_shove float_inc float_dup_times integer_add integer_shove float_inc float_dup_times float_rot integer_shove float_inc integer_swap integer_add print_float integer_dec float_tan integer_flush -49 in1 float_yankdup float_max integer_flush float_dup_times float_div float_mult integer_shove float_dup integer_dup_times integer_dup float_mod integer_stackdepth integer_min float_sub tagged_690 integer_swap float_mod float_shove float_sin integer_min)
Errors: [89.0 11 78.0 2 75.0 2 25.0 2 70.0 1 72.0 3 38.0 2 46.0 12 39.0 2 37.0 2 3.0 1 56.0 2 21.0 2 0.0 0 79.0 3 66.0 2 3.0 1 84.0 10 97.0 13 7.0 1 77.0 2 20.0 1 51.0 2 63.0 2 52.0 3]
Total: 1332.0
Mean: 26.64
Genome size: 70
Size: 71
Percent parens: 0.014
--- Population Statistics ---
Average total errors in population: 2787.4701042999986
Median total errors in population: 1357.0
Error averages by case: (135.96921640000002 12.215 134.0178164999999 11.26 119.25754559999999 3.183 86.18081589999993 3.382 125.23405460000009 3.278 130.5599115 4.131 91.502733 3.205 103.22578429999986 12.071 91.22978729999983 3.172 97.9823244000001 2.855 69.69774980000011 4.198 113.24210469999987 4.401 79.11104349999994 3.35 64.2866134 3.256 142.27662179999982 4.273 118.91799989999997 3.424 66.03572640000003 2.549 135.10570200000004 10.293 140.98305520000005 13.089 57.99564390000004 2.289 135.37955820000008 3.631 77.21161620000004 3.221 107.27816520000005 3.375 121.65551119999998 3.782 115.01300339999992 4.237)
Error minima by case: (8.0817 10 5.3964 2 0.0101 1 3.7714 1 22.4434 1 8.9183 2 11.5141 2 13.0413 8 10.5141 2 37.0 1 3.0 1 1.1378 2 11.0374 2 0.0 0 8.5348 2 14.9183 1 3.0 1 0.0159 8 10.7603 10 0.1369 1 31.8069 2 3.0 1 8.3118 2 13.4859 2 32.0912 2)
Average genome size in population (length): 55.287
Average program size in population (points): 56.287
Average percent parens in population: 0.018
Minimum age in population: 12.3984375
Maximum age in population: 16.609375
Average age in population: 14.697802734375
Median age in population: 14.71875
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 54
Genome diversity (% unique Plush genomes):	 0.728
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 54
Syntactic diversity (% unique Push programs):	 0.728
Total error diversity:				 0.064
Error (vector) diversity:			 0.071
Behavioral diversity:				 0.072
--- Run Statistics ---
Number of program evaluations used so far: 11000
Number of point (instruction) evaluations so far: 13230114
--- Timings ---
Current time: 1529615970905 milliseconds
Total Time:          35.4 seconds
Initialization:       0.1 seconds,  0.3%
Reproduction:        14.3 seconds, 40.5%
Fitness Testing:     16.7 seconds, 47.2%
Report:               4.2 seconds, 11.9%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 10
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 11
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 11
;;******************************
;; -*- Number IO problem report - generation 11
Test total error for best: 54882.0
Test mean error for best: 27.44100
;;------------------------------
Outputs of best individual on training cases:
Correct output: -74.6179542037 | Program output: 14.3820457963 
Correct output: 78.7609586813  | Program output: 0.7609586813  
Correct output: 3.0100598709   | Program output: 78.0100598709 
Correct output: -99.2368061293 | Program output: -74.2368061293
Correct output: 88.6808415603  | Program output: 18.6808415603 
Correct output: -151.1060419578 | Program output: -79.1060419578
Correct output: 56.004616184   | Program output: 94.004616184  
Correct output: 33.520660154   | Program output: -12.479339846 
Correct output: 42.238861085   | Program output: 81.238861085  
Correct output: -49.0227893765 | Program output: -86.0227893765
Correct output: 103.4057483059 | Program output: 100.4057483059
Correct output: -106.1378273779 | Program output: -50.1378273779
Correct output: 37.9625599991  | Program output: 16.9625599991 
Correct output: 71.9208193203  | Program output: 71.9208193203 
Correct output: 173.5348464317 | Program output: 94.5348464317 
Correct output: -77.0615185935 | Program output: -11.0615185935
Correct output: -20.7643622555 | Program output: -23.7643622555
Correct output: 1.9827630815   | Program output: -82.0172369185
Correct output: -39.1198682611 | Program output: 57.8801317389 
Correct output: 1.1392376036   | Program output: 8.1392376036  
Correct output: 129.1930977679 | Program output: 52.1930977679 
Correct output: 26.7496211861  | Program output: 6.7496211861  
Correct output: -11.2984801384 | Program output: -62.2984801384
Correct output: -136.1442960385 | Program output: -73.1442960385
Correct output: 143.0911996605 | Program output: 91.0911996605 
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_yank} {:instruction float_sub} {:instruction float_mod} {:instruction float_frominteger} {:instruction float_pop} {:instruction float_tan} {:instruction float_add} {:instruction integer_max} {:instruction integer_flush} {:instruction integer_pop} {:instruction float_frominteger} {:instruction in1} {:instruction integer_flush} {:instruction float_shove} {:instruction integer_flush} {:instruction float_shove} {:instruction integer_swap} {:instruction float_inc} {:instruction float_inc} {:instruction integer_max} {:instruction integer_yank} {:instruction integer_yank} {:instruction float_inc} {:instruction integer_dup_times} {:instruction integer_dup} {:instruction float_swap} {:instruction integer_min} {:instruction -16} {:instruction integer_pop} {:instruction integer_add} {:instruction float_dup_times} {:instruction integer_add} {:instruction integer_shove} {:instruction float_inc} {:instruction float_dup_times} {:instruction integer_add} {:instruction integer_shove} {:instruction float_inc} {:instruction float_dup_times} {:instruction float_rot} {:instruction integer_shove} {:instruction float_inc} {:instruction integer_swap} {:instruction integer_add} {:instruction print_float} {:instruction integer_dec} {:instruction float_tan} {:instruction integer_flush} {:instruction -49} {:instruction in1} {:instruction float_yankdup} {:instruction float_max} {:instruction integer_flush} {:instruction float_dup_times} {:instruction float_div} {:instruction float_mult} {:instruction integer_shove} {:instruction float_dup} {:instruction integer_dup_times} {:instruction integer_dup} {:instruction float_mod} {:instruction integer_stackdepth} {:instruction integer_min} {:instruction float_sub} {:instruction tagged_690} {:instruction integer_swap} {:instruction float_mod} {:instruction float_shove} {:instruction float_sin} {:instruction integer_min})
Best program: (float_yank float_sub float_mod float_frominteger float_pop float_tan float_add integer_max integer_flush integer_pop float_frominteger in1 integer_flush float_shove integer_flush float_shove integer_swap float_inc float_inc integer_max integer_yank integer_yank float_inc integer_dup_times integer_dup float_swap integer_min -16 integer_pop integer_add float_dup_times integer_add integer_shove float_inc float_dup_times integer_add integer_shove float_inc float_dup_times float_rot integer_shove float_inc integer_swap integer_add print_float integer_dec float_tan integer_flush -49 in1 float_yankdup float_max integer_flush float_dup_times float_div float_mult integer_shove float_dup integer_dup_times integer_dup float_mod integer_stackdepth integer_min float_sub tagged_690 integer_swap float_mod float_shove float_sin integer_min)
Errors: [89.0 11 78.0 2 75.0 2 25.0 2 70.0 1 72.0 3 38.0 2 46.0 12 39.0 2 37.0 2 3.0 1 56.0 2 21.0 2 0.0 0 79.0 3 66.0 2 3.0 1 84.0 10 97.0 13 7.0 1 77.0 2 20.0 1 51.0 2 63.0 2 52.0 3]
Total: 1332.0
Mean: 26.64
Genome size: 70
Size: 71
Percent parens: 0.014
--- Population Statistics ---
Average total errors in population: 2749.2857882999997
Median total errors in population: 1356.0
Error averages by case: (134.47028570000006 12.173 132.5553152 11.142 120.08846349999997 2.946 85.47182269999995 3.128 122.68238920000005 3.019 129.92586509999998 3.499 90.50855990000001 2.969 102.10352359999992 12.055 90.50585649999991 2.949 97.37346040000004 3.012 66.36585220000008 3.946 112.9893136999999 4.14 76.26256009999997 3.105 61.67613079999999 2.963 137.64589489999986 3.985 118.40346209999997 3.179 64.93622170000002 2.29 136.04226179999998 10.278 141.2264589000001 13.091 56.36062110000001 2.038 133.03407090000005 3.807 74.36037880000005 3.009 107.45862650000002 3.142 121.08165009999999 3.948 111.95774289999994 3.986)
Error minima by case: (5.3593 9 2.1573 2 0.0101 1 10.4826 1 7.7625 1 17.106 2 24.9137 2 12.0413 8 33.0 1 36.0 1 2.0 1 4.1378 2 14.0374 1 0.0 0 5.5348 2 11.6927 1 2.0 1 0.0172 8 9.7603 10 0.0206 1 34.8069 2 11.69 1 10.2985 1 20.1443 2 29.0912 3)
Average genome size in population (length): 57.547
Average program size in population (points): 58.547
Average percent parens in population: 0.017
Minimum age in population: 13.3984375
Maximum age in population: 18.05859375
Average age in population: 16.172875
Median age in population: 16.26123046875
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 100
Genome diversity (% unique Plush genomes):	 0.704
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 100
Syntactic diversity (% unique Push programs):	 0.704
Total error diversity:				 0.065
Error (vector) diversity:			 0.073
Behavioral diversity:				 0.073
--- Run Statistics ---
Number of program evaluations used so far: 12000
Number of point (instruction) evaluations so far: 14668939
--- Timings ---
Current time: 1529615974198 milliseconds
Total Time:          38.7 seconds
Initialization:       0.1 seconds,  0.3%
Reproduction:        15.6 seconds, 40.4%
Fitness Testing:     18.3 seconds, 47.3%
Report:               4.6 seconds, 12.0%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 11
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 12
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 12
;;******************************
;; -*- Number IO problem report - generation 12
Test total error for best: 54882.0
Test mean error for best: 27.44100
;;------------------------------
Outputs of best individual on training cases:
Correct output: -74.6179542037 | Program output: 14.3820457963 
Correct output: 78.7609586813  | Program output: 0.7609586813  
Correct output: 3.0100598709   | Program output: 78.0100598709 
Correct output: -99.2368061293 | Program output: -74.2368061293
Correct output: 88.6808415603  | Program output: 18.6808415603 
Correct output: -151.1060419578 | Program output: -79.1060419578
Correct output: 56.004616184   | Program output: 94.004616184  
Correct output: 33.520660154   | Program output: -12.479339846 
Correct output: 42.238861085   | Program output: 81.238861085  
Correct output: -49.0227893765 | Program output: -86.0227893765
Correct output: 103.4057483059 | Program output: 100.4057483059
Correct output: -106.1378273779 | Program output: -50.1378273779
Correct output: 37.9625599991  | Program output: 16.9625599991 
Correct output: 71.9208193203  | Program output: 71.9208193203 
Correct output: 173.5348464317 | Program output: 94.5348464317 
Correct output: -77.0615185935 | Program output: -11.0615185935
Correct output: -20.7643622555 | Program output: -23.7643622555
Correct output: 1.9827630815   | Program output: -82.0172369185
Correct output: -39.1198682611 | Program output: 57.8801317389 
Correct output: 1.1392376036   | Program output: 8.1392376036  
Correct output: 129.1930977679 | Program output: 52.1930977679 
Correct output: 26.7496211861  | Program output: 6.7496211861  
Correct output: -11.2984801384 | Program output: -62.2984801384
Correct output: -136.1442960385 | Program output: -73.1442960385
Correct output: 143.0911996605 | Program output: 91.0911996605 
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_yank} {:instruction float_sub} {:instruction float_mod} {:instruction float_frominteger} {:instruction float_pop} {:instruction float_tan} {:instruction float_add} {:instruction integer_max} {:instruction integer_flush} {:instruction integer_pop} {:instruction float_frominteger} {:instruction in1} {:instruction integer_flush} {:instruction float_shove} {:instruction integer_flush} {:instruction float_shove} {:instruction integer_swap} {:instruction float_inc} {:instruction float_inc} {:instruction integer_max} {:instruction integer_yank} {:instruction integer_yank} {:instruction float_inc} {:instruction integer_dup_times} {:instruction integer_dup} {:instruction float_swap} {:instruction integer_min} {:instruction -16} {:instruction integer_pop} {:instruction integer_add} {:instruction float_dup_times} {:instruction integer_add} {:instruction integer_shove} {:instruction float_inc} {:instruction float_dup_times} {:instruction integer_add} {:instruction integer_shove} {:instruction float_inc} {:instruction float_dup_times} {:instruction float_rot} {:instruction integer_shove} {:instruction float_inc} {:instruction integer_swap} {:instruction integer_add} {:instruction print_float} {:instruction integer_dec} {:instruction float_tan} {:instruction integer_flush} {:instruction -49} {:instruction in1} {:instruction float_yankdup} {:instruction float_max} {:instruction float_stackdepth} {:instruction float_dup_times} {:instruction float_div} {:instruction float_mult} {:instruction integer_shove} {:instruction float_dup} {:instruction integer_dup_times} {:instruction integer_dup} {:instruction integer_swap} {:instruction float_mod} {:instruction float_shove} {:instruction float_sin} {:instruction integer_min})
Best program: (float_yank float_sub float_mod float_frominteger float_pop float_tan float_add integer_max integer_flush integer_pop float_frominteger in1 integer_flush float_shove integer_flush float_shove integer_swap float_inc float_inc integer_max integer_yank integer_yank float_inc integer_dup_times integer_dup float_swap integer_min -16 integer_pop integer_add float_dup_times integer_add integer_shove float_inc float_dup_times integer_add integer_shove float_inc float_dup_times float_rot integer_shove float_inc integer_swap integer_add print_float integer_dec float_tan integer_flush -49 in1 float_yankdup float_max float_stackdepth float_dup_times float_div float_mult integer_shove float_dup integer_dup_times integer_dup integer_swap float_mod float_shove float_sin integer_min)
Errors: [89.0 11 78.0 2 75.0 2 25.0 2 70.0 1 72.0 3 38.0 2 46.0 12 39.0 2 37.0 2 3.0 1 56.0 2 21.0 2 0.0 0 79.0 3 66.0 2 3.0 1 84.0 10 97.0 13 7.0 1 77.0 2 20.0 1 51.0 2 63.0 2 52.0 3]
Total: 1332.0
Mean: 26.64
Genome size: 65
Size: 66
Percent parens: 0.015
--- Population Statistics ---
Average total errors in population: 3076.2803076999994
Median total errors in population: 1356.0
Error averages by case: (149.7490558 12.126 143.99827039999994 10.349 134.53387140000007 3.125 97.12178559999995 3.352 136.6113989000001 3.159 141.0346491 3.839 104.89745840000002 3.137 113.7325005999999 11.865 105.0223188999999 3.114 107.94735130000007 3.336 79.77915670000004 3.987 124.49845719999989 4.319 90.94473389999995 3.278 75.4595053 2.867 150.12746799999985 4.058 130.84488619999996 3.391 76.28619029999999 2.531 146.36985270000005 10.252 155.64372040000006 13.098 73.73274020000001 2.232 145.89918700000007 4.061 90.41502009999998 3.13 118.10096620000006 3.346 132.33953360000004 4.219 124.82722949999994 4.192)
Error minima by case: (65.5216 9 60.7915 2 0.0101 1 12.1178 1 8.7625 1 66.0 2 23.9137 1 12.6532 9 33.0 1 35.0 1 1.0 1 50.0 2 6.6837 1 0.0 0 77.0 2 60.0 1 1.0 1 0.0172 7 12.2484 10 0.1392 1 49.2748 2 18.0 1 9.2985 1 57.0 2 50.0 2)
Average genome size in population (length): 58.737
Average program size in population (points): 59.737
Average percent parens in population: 0.017
Minimum age in population: 15.33203125
Maximum age in population: 19.58203125
Average age in population: 17.70470458984375
Median age in population: 17.771728515625
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 47
Genome diversity (% unique Plush genomes):	 0.757
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 47
Syntactic diversity (% unique Push programs):	 0.757
Total error diversity:				 0.049
Error (vector) diversity:			 0.06
Behavioral diversity:				 0.061
--- Run Statistics ---
Number of program evaluations used so far: 13000
Number of point (instruction) evaluations so far: 16137664
--- Timings ---
Current time: 1529615977438 milliseconds
Total Time:          42.0 seconds
Initialization:       0.1 seconds,  0.3%
Reproduction:        17.0 seconds, 40.4%
Fitness Testing:     19.8 seconds, 47.2%
Report:               5.1 seconds, 12.1%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 12
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 13
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 13
;;******************************
;; -*- Number IO problem report - generation 13
Test total error for best: 55009.0
Test mean error for best: 27.50450
;;------------------------------
Outputs of best individual on training cases:
Correct output: -74.6179542037 | Program output: 17.3820457963 
Correct output: 78.7609586813  | Program output: 3.7609586813  
Correct output: 3.0100598709   | Program output: 81.0100598709 
Correct output: -99.2368061293 | Program output: -71.2368061293
Correct output: 88.6808415603  | Program output: 21.6808415603 
Correct output: -151.1060419578 | Program output: -76.1060419578
Correct output: 56.004616184   | Program output: 97.004616184  
Correct output: 33.520660154   | Program output: -9.479339846  
Correct output: 42.238861085   | Program output: 84.238861085  
Correct output: -49.0227893765 | Program output: -83.0227893765
Correct output: 103.4057483059 | Program output: 103.4057483059
Correct output: -106.1378273779 | Program output: -47.1378273779
Correct output: 37.9625599991  | Program output: 19.9625599991 
Correct output: 71.9208193203  | Program output: 74.9208193203 
Correct output: 173.5348464317 | Program output: 97.5348464317 
Correct output: -77.0615185935 | Program output: -8.0615185935 
Correct output: -20.7643622555 | Program output: -20.7643622555
Correct output: 1.9827630815   | Program output: -79.0172369185
Correct output: -39.1198682611 | Program output: 60.8801317389 
Correct output: 1.1392376036   | Program output: 11.1392376036 
Correct output: 129.1930977679 | Program output: 55.1930977679 
Correct output: 26.7496211861  | Program output: 9.7496211861  
Correct output: -11.2984801384 | Program output: -59.2984801384
Correct output: -136.1442960385 | Program output: -70.1442960385
Correct output: 143.0911996605 | Program output: 94.0911996605 
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_yank} {:instruction float_sub} {:instruction float_mod} {:instruction float_frominteger} {:instruction float_pop} {:instruction float_min} {:instruction print_integer} {:instruction integer_max} {:instruction integer_flush} {:instruction in1} {:instruction float_inc} {:instruction float_div} {:instruction integer_add} {:instruction float_inc} {:instruction float_dec} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_max} {:instruction float_rot} {:instruction integer_yank} {:instruction float_inc} {:instruction integer_dup_times} {:instruction integer_dup} {:instruction float_swap} {:instruction integer_min} {:instruction -16} {:instruction integer_pop} {:instruction integer_add} {:instruction float_dup_times} {:instruction integer_add} {:instruction integer_shove} {:instruction float_inc} {:instruction float_dup_times} {:instruction integer_add} {:instruction integer_shove} {:instruction float_inc} {:instruction float_sub} {:instruction float_rot} {:instruction integer_shove} {:instruction float_inc} {:instruction integer_swap} {:instruction integer_add} {:instruction print_float} {:instruction integer_dec} {:instruction float_tan} {:instruction integer_flush} {:instruction float_dup_times} {:instruction float_div} {:instruction float_mult} {:instruction integer_shove} {:instruction float_dup} {:instruction integer_dup_times} {:instruction integer_dup} {:instruction float_mod} {:instruction integer_stackdepth} {:instruction float_dup} {:instruction integer_dup_times} {:instruction integer_dup} {:instruction float_frominteger})
Best program: (float_yank float_sub float_mod float_frominteger float_pop float_min print_integer integer_max integer_flush in1 float_inc float_div integer_add float_inc float_dec float_inc float_inc float_inc float_inc integer_max float_rot integer_yank float_inc integer_dup_times integer_dup float_swap integer_min -16 integer_pop integer_add float_dup_times integer_add integer_shove float_inc float_dup_times integer_add integer_shove float_inc float_sub float_rot integer_shove float_inc integer_swap integer_add print_float integer_dec float_tan integer_flush float_dup_times float_div float_mult integer_shove float_dup integer_dup_times integer_dup float_mod integer_stackdepth float_dup integer_dup_times integer_dup float_frominteger)
Errors: [92.0 11 75.0 2 78.0 2 28.0 2 67.0 2 75.0 3 41.0 2 43.0 11 42.0 2 34.0 2 0.0 0 59.0 3 18.0 2 3.0 1 76.0 2 69.0 2 0.0 0 81.0 9 100.0 13 10.0 1 74.0 3 17.0 2 48.0 2 66.0 3 49.0 2]
Total: 1329.0
Mean: 26.58
Genome size: 61
Size: 62
Percent parens: 0.016
--- Population Statistics ---
Average total errors in population: 3421.0319822000015
Median total errors in population: 1351.0
Error averages by case: (164.86201350000002 11.929 156.84750689999998 7.571 150.17667980000004 3.19 111.88091409999997 3.392 149.68081620000007 2.952 154.95248009999997 4.24 120.34468710000003 3.159 127.10235799999994 11.817 120.57043899999991 3.117 121.24713060000006 3.373 93.20311160000004 3.424 139.0018920999999 4.079 104.79789449999997 3.269 89.40272610000004 2.255 162.1350345999999 3.972 145.60335220000002 3.409 90.01248290000002 2.551 159.82335900000004 10.283 170.99088710000007 13.111 89.6747812 2.276 158.39518390000003 3.895 103.0347878 2.933 131.6758153 3.344 146.46324160000003 4.012 137.37840699999992 4.221)
Error minima by case: (67.2359 9 71.7278 2 0.0066 1 19.0 1 59.3192 1 15.106 2 32.0 1 14.0413 8 33.0 1 30.7278 1 0.0 0 2.1378 2 4.6837 1 0.0 0 7.5348 2 46.9385 1 0.0 0 0.0172 7 11.7603 9 8.0E-4 1 32.8069 2 4.1907 1 4.7307 1 18.1443 2 31.0912 2)
Average genome size in population (length): 60.604
Average program size in population (points): 61.604
Average percent parens in population: 0.017
Minimum age in population: 16.71875
Maximum age in population: 21.06982421875
Average age in population: 19.281818359375
Median age in population: 19.3275146484375
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 30
Genome diversity (% unique Plush genomes):	 0.707
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 30
Syntactic diversity (% unique Push programs):	 0.707
Total error diversity:				 0.058
Error (vector) diversity:			 0.068
Behavioral diversity:				 0.068
--- Run Statistics ---
Number of program evaluations used so far: 14000
Number of point (instruction) evaluations so far: 17653414
--- Timings ---
Current time: 1529615980723 milliseconds
Total Time:          45.3 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        18.3 seconds, 40.4%
Fitness Testing:     21.3 seconds, 47.2%
Report:               5.5 seconds, 12.1%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 13
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 14
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 14
;;******************************
;; -*- Number IO problem report - generation 14
Test total error for best: 55009.0
Test mean error for best: 27.50450
;;------------------------------
Outputs of best individual on training cases:
Correct output: -74.6179542037 | Program output: 17.3820457963 
Correct output: 78.7609586813  | Program output: 3.7609586813  
Correct output: 3.0100598709   | Program output: 81.0100598709 
Correct output: -99.2368061293 | Program output: -71.2368061293
Correct output: 88.6808415603  | Program output: 21.6808415603 
Correct output: -151.1060419578 | Program output: -76.1060419578
Correct output: 56.004616184   | Program output: 97.004616184  
Correct output: 33.520660154   | Program output: -9.479339846  
Correct output: 42.238861085   | Program output: 84.238861085  
Correct output: -49.0227893765 | Program output: -83.0227893765
Correct output: 103.4057483059 | Program output: 103.4057483059
Correct output: -106.1378273779 | Program output: -47.1378273779
Correct output: 37.9625599991  | Program output: 19.9625599991 
Correct output: 71.9208193203  | Program output: 74.9208193203 
Correct output: 173.5348464317 | Program output: 97.5348464317 
Correct output: -77.0615185935 | Program output: -8.0615185935 
Correct output: -20.7643622555 | Program output: -20.7643622555
Correct output: 1.9827630815   | Program output: -79.0172369185
Correct output: -39.1198682611 | Program output: 60.8801317389 
Correct output: 1.1392376036   | Program output: 11.1392376036 
Correct output: 129.1930977679 | Program output: 55.1930977679 
Correct output: 26.7496211861  | Program output: 9.7496211861  
Correct output: -11.2984801384 | Program output: -59.2984801384
Correct output: -136.1442960385 | Program output: -70.1442960385
Correct output: 143.0911996605 | Program output: 94.0911996605 
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_dup} {:instruction float_sub} {:instruction float_mod} {:instruction float_frominteger} {:instruction float_pop} {:instruction float_min} {:instruction print_integer} {:instruction integer_max} {:instruction integer_flush} {:instruction in1} {:instruction float_inc} {:instruction integer_add} {:instruction float_inc} {:instruction float_inc} {:instruction integer_max} {:instruction integer_yank} {:instruction integer_yank} {:instruction float_inc} {:instruction integer_dup_times} {:instruction integer_dup} {:instruction float_swap} {:instruction integer_min} {:instruction float_inc} {:instruction integer_max} {:instruction integer_yank} {:instruction integer_yank} {:instruction float_inc} {:instruction integer_dup_times} {:instruction integer_dup} {:instruction float_swap} {:instruction integer_min} {:instruction -16} {:instruction integer_pop} {:instruction integer_add} {:instruction float_dup_times} {:instruction integer_add} {:instruction integer_shove} {:instruction float_inc} {:instruction float_dup_times} {:instruction integer_add} {:instruction integer_shove} {:instruction float_inc} {:instruction float_dup_times} {:instruction float_rot} {:instruction integer_shove} {:instruction float_inc} {:instruction integer_swap} {:instruction integer_add} {:instruction print_float} {:instruction integer_dec} {:instruction float_tan} {:instruction integer_flush} {:instruction -49} {:instruction in1} {:instruction float_yankdup} {:instruction float_max} {:instruction integer_flush} {:instruction float_dup_times} {:instruction float_div} {:instruction float_mult} {:instruction integer_shove} {:instruction float_dup} {:instruction integer_dup_times} {:instruction integer_dup} {:instruction float_mod} {:instruction integer_stackdepth} {:instruction integer_min} {:instruction float_sub} {:instruction tagged_690} {:instruction integer_swap} {:instruction float_mod} {:instruction float_shove} {:instruction float_sin} {:instruction integer_min})
Best program: (float_dup float_sub float_mod float_frominteger float_pop float_min print_integer integer_max integer_flush in1 float_inc integer_add float_inc float_inc integer_max integer_yank integer_yank float_inc integer_dup_times integer_dup float_swap integer_min float_inc integer_max integer_yank integer_yank float_inc integer_dup_times integer_dup float_swap integer_min -16 integer_pop integer_add float_dup_times integer_add integer_shove float_inc float_dup_times integer_add integer_shove float_inc float_dup_times float_rot integer_shove float_inc integer_swap integer_add print_float integer_dec float_tan integer_flush -49 in1 float_yankdup float_max integer_flush float_dup_times float_div float_mult integer_shove float_dup integer_dup_times integer_dup float_mod integer_stackdepth integer_min float_sub tagged_690 integer_swap float_mod float_shove float_sin integer_min)
Errors: [92.0 11 75.0 2 78.0 2 28.0 2 67.0 2 75.0 3 41.0 2 43.0 11 42.0 2 34.0 2 0.0 0 59.0 3 18.0 2 3.0 1 76.0 2 69.0 2 0.0 0 81.0 9 100.0 13 10.0 1 74.0 3 17.0 2 48.0 2 66.0 3 49.0 2]
Total: 1329.0
Mean: 26.58
Genome size: 74
Size: 75
Percent parens: 0.013
--- Population Statistics ---
Average total errors in population: 3232.774256700001
Median total errors in population: 1332.0
Error averages by case: (159.67672190000002 11.52 148.0771045 4.347 145.20737240000003 3.094 105.78963929999996 3.282 141.46959500000003 2.476 149.1902212 4.206 114.42326820000002 3.057 119.1209538999999 12.008 114.79506449999994 3.037 112.80602580000003 3.231 83.55836720000006 2.574 133.40609879999994 3.595 96.17452429999997 3.166 80.04444510000005 1.656 153.4597972999999 4.07 140.39294959999998 3.277 81.3550513 2.363 152.54392930000003 10.229 166.142962 13.105 84.267538 2.183 150.02249500000005 3.424 94.78330020000001 2.442 123.78487260000001 3.213 140.6883964 3.546 128.41856289999998 4.074)
Error minima by case: (56.8604 10 30.3595 2 0.0101 1 7.1396 1 40.2793 1 39.8604 2 5.8604 1 14.8808 9 6.1626 1 31.0 1 0.0 0 23.8604 2 4.6837 1 0.0 0 73.0 2 33.8604 1 0.0 0 0.0172 7 19.331 9 0.1392 1 71.0 2 5.1907 1 2.7335 1 30.8604 2 46.0 2)
Average genome size in population (length): 62.207
Average program size in population (points): 63.207
Average percent parens in population: 0.016
Minimum age in population: 18.37939453125
Maximum age in population: 22.623046875
Average age in population: 20.73818530273438
Median age in population: 20.772216796875
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 32
Genome diversity (% unique Plush genomes):	 0.743
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 32
Syntactic diversity (% unique Push programs):	 0.743
Total error diversity:				 0.053
Error (vector) diversity:			 0.06
Behavioral diversity:				 0.06
--- Run Statistics ---
Number of program evaluations used so far: 15000
Number of point (instruction) evaluations so far: 19209064
--- Timings ---
Current time: 1529615984003 milliseconds
Total Time:          48.5 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        19.6 seconds, 40.5%
Fitness Testing:     22.9 seconds, 47.2%
Report:               5.9 seconds, 12.2%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 14
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 15
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 15
;;******************************
;; -*- Number IO problem report - generation 15
Test total error for best: 55009.0
Test mean error for best: 27.50450
;;------------------------------
Outputs of best individual on training cases:
Correct output: -74.6179542037 | Program output: 17.3820457963 
Correct output: 78.7609586813  | Program output: 3.7609586813  
Correct output: 3.0100598709   | Program output: 81.0100598709 
Correct output: -99.2368061293 | Program output: -71.2368061293
Correct output: 88.6808415603  | Program output: 21.6808415603 
Correct output: -151.1060419578 | Program output: -76.1060419578
Correct output: 56.004616184   | Program output: 97.004616184  
Correct output: 33.520660154   | Program output: -9.479339846  
Correct output: 42.238861085   | Program output: 84.238861085  
Correct output: -49.0227893765 | Program output: -83.0227893765
Correct output: 103.4057483059 | Program output: 103.4057483059
Correct output: -106.1378273779 | Program output: -47.1378273779
Correct output: 37.9625599991  | Program output: 19.9625599991 
Correct output: 71.9208193203  | Program output: 74.9208193203 
Correct output: 173.5348464317 | Program output: 97.5348464317 
Correct output: -77.0615185935 | Program output: -8.0615185935 
Correct output: -20.7643622555 | Program output: -20.7643622555
Correct output: 1.9827630815   | Program output: -79.0172369185
Correct output: -39.1198682611 | Program output: 60.8801317389 
Correct output: 1.1392376036   | Program output: 11.1392376036 
Correct output: 129.1930977679 | Program output: 55.1930977679 
Correct output: 26.7496211861  | Program output: 9.7496211861  
Correct output: -11.2984801384 | Program output: -59.2984801384
Correct output: -136.1442960385 | Program output: -70.1442960385
Correct output: 143.0911996605 | Program output: 94.0911996605 
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_yank} {:instruction float_sub} {:instruction float_mod} {:instruction float_frominteger} {:instruction float_pop} {:instruction float_min} {:instruction print_integer} {:instruction integer_max} {:instruction integer_flush} {:instruction in1} {:instruction float_inc} {:instruction float_inc} {:instruction integer_add} {:instruction float_inc} {:instruction integer_add} {:instruction float_inc} {:instruction float_inc} {:instruction integer_max} {:instruction integer_yank} {:instruction integer_yank} {:instruction float_inc} {:instruction integer_dup_times} {:instruction integer_dup} {:instruction float_swap} {:instruction integer_min} {:instruction -16} {:instruction integer_pop} {:instruction -16} {:instruction integer_pop} {:instruction integer_shove} {:instruction float_inc} {:instruction float_dup_times} {:instruction float_rot} {:instruction integer_shove} {:instruction float_inc} {:instruction float_inc} {:instruction float_dup_times} {:instruction integer_add} {:instruction print_float} {:instruction integer_dec} {:instruction float_tan} {:instruction integer_shove} {:instruction float_dup} {:instruction integer_dup_times} {:instruction integer_dup} {:instruction float_yankdup} {:instruction float_max} {:instruction integer_flush} {:instruction integer_dup} {:instruction float_mod} {:instruction integer_dup} {:instruction integer_min} {:instruction float_pop} {:instruction tagged_690} {:instruction integer_swap} {:instruction float_mod} {:instruction float_shove} {:instruction float_sin} {:instruction integer_min})
Best program: (float_yank float_sub float_mod float_frominteger float_pop float_min print_integer integer_max integer_flush in1 float_inc float_inc integer_add float_inc integer_add float_inc float_inc integer_max integer_yank integer_yank float_inc integer_dup_times integer_dup float_swap integer_min -16 integer_pop -16 integer_pop integer_shove float_inc float_dup_times float_rot integer_shove float_inc float_inc float_dup_times integer_add print_float integer_dec float_tan integer_shove float_dup integer_dup_times integer_dup float_yankdup float_max integer_flush integer_dup float_mod integer_dup integer_min float_pop tagged_690 integer_swap float_mod float_shove float_sin integer_min)
Errors: [92.0 11 75.0 2 78.0 2 28.0 2 67.0 2 75.0 3 41.0 2 43.0 11 42.0 2 34.0 2 0.0 0 59.0 3 18.0 2 3.0 1 76.0 2 69.0 2 0.0 0 81.0 9 100.0 13 10.0 1 74.0 3 17.0 2 48.0 2 66.0 3 49.0 2]
Total: 1329.0
Mean: 26.58
Genome size: 59
Size: 60
Percent parens: 0.017
--- Population Statistics ---
Average total errors in population: 3196.5253141000007
Median total errors in population: 1332.0
Error averages by case: (159.94598899999994 11.458 146.69468220000002 3.947 144.91563350000004 3.073 103.82563130000003 3.27 140.95219910000003 2.506 147.16840449999998 4.213 113.94180330000002 3.033 116.84365699999996 11.921 114.34677789999995 3.029 109.97629100000005 3.229 82.15851920000003 2.372 131.4032133999999 3.627 95.52998939999995 3.141 79.24273610000003 1.665 152.13712159999992 3.967 139.0189922 3.268 78.571693 2.242 149.68658370000009 10.108 165.6331528 13.068 83.64843769999999 2.153 148.69121370000005 3.454 93.42390850000001 2.488 120.87490080000005 3.217 138.81744299999997 3.593 127.06834019999997 3.966)
Error minima by case: (56.6918 10 0.8427 2 0.0101 1 18.0 1 10.7625 1 64.6769 2 21.9137 1 11.6532 8 32.0 1 31.0967 1 0.0 0 49.0 2 1.6837 1 0.0 0 74.0 2 59.0 1 0.0 0 0.0129 6 18.331 9 0.0 0 51.2748 2 5.0708 1 3.7335 1 56.0 2 47.0 2)
Average genome size in population (length): 61.969
Average program size in population (points): 62.969
Average percent parens in population: 0.016
Minimum age in population: 19.37939453125
Maximum age in population: 24.0701904296875
Average age in population: 22.17887493896484
Median age in population: 22.23614501953125
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 20
Genome diversity (% unique Plush genomes):	 0.794
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 20
Syntactic diversity (% unique Push programs):	 0.794
Total error diversity:				 0.06
Error (vector) diversity:			 0.066
Behavioral diversity:				 0.067
--- Run Statistics ---
Number of program evaluations used so far: 16000
Number of point (instruction) evaluations so far: 20758639
--- Timings ---
Current time: 1529615987256 milliseconds
Total Time:          51.8 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        20.9 seconds, 40.4%
Fitness Testing:     24.4 seconds, 47.1%
Report:               6.3 seconds, 12.2%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 15
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 16
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 16
;;******************************
;; -*- Number IO problem report - generation 16
Test total error for best: 55009.0
Test mean error for best: 27.50450
;;------------------------------
Outputs of best individual on training cases:
Correct output: -74.6179542037 | Program output: 17.3820457963 
Correct output: 78.7609586813  | Program output: 3.7609586813  
Correct output: 3.0100598709   | Program output: 81.0100598709 
Correct output: -99.2368061293 | Program output: -71.2368061293
Correct output: 88.6808415603  | Program output: 21.6808415603 
Correct output: -151.1060419578 | Program output: -76.1060419578
Correct output: 56.004616184   | Program output: 97.004616184  
Correct output: 33.520660154   | Program output: -9.479339846  
Correct output: 42.238861085   | Program output: 84.238861085  
Correct output: -49.0227893765 | Program output: -83.0227893765
Correct output: 103.4057483059 | Program output: 103.4057483059
Correct output: -106.1378273779 | Program output: -47.1378273779
Correct output: 37.9625599991  | Program output: 19.9625599991 
Correct output: 71.9208193203  | Program output: 74.9208193203 
Correct output: 173.5348464317 | Program output: 97.5348464317 
Correct output: -77.0615185935 | Program output: -8.0615185935 
Correct output: -20.7643622555 | Program output: -20.7643622555
Correct output: 1.9827630815   | Program output: -79.0172369185
Correct output: -39.1198682611 | Program output: 60.8801317389 
Correct output: 1.1392376036   | Program output: 11.1392376036 
Correct output: 129.1930977679 | Program output: 55.1930977679 
Correct output: 26.7496211861  | Program output: 9.7496211861  
Correct output: -11.2984801384 | Program output: -59.2984801384
Correct output: -136.1442960385 | Program output: -70.1442960385
Correct output: 143.0911996605 | Program output: 94.0911996605 
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_yank} {:instruction float_sub} {:instruction float_mod} {:instruction float_frominteger} {:instruction float_inc} {:instruction print_float} {:instruction float_mult} {:instruction float_yank} {:instruction float_yank} {:instruction float_mod} {:instruction float_frominteger} {:instruction float_pop} {:instruction float_min} {:instruction print_integer} {:instruction integer_max} {:instruction integer_flush} {:instruction in1} {:instruction float_inc} {:instruction integer_add} {:instruction float_shove} {:instruction float_sub} {:instruction float_stackdepth} {:instruction float_rot} {:instruction integer_shove} {:instruction float_inc} {:instruction float_dup_times} {:instruction integer_add} {:instruction float_inc} {:instruction float_dup_times} {:instruction float_inc} {:instruction float_dup_times} {:instruction integer_add} {:instruction integer_shove} {:instruction float_inc} {:instruction float_dup_times} {:instruction float_rot} {:instruction integer_shove} {:instruction float_inc} {:instruction float_dup_times} {:instruction integer_add} {:instruction float_inc} {:instruction float_dup_times} {:instruction float_inc} {:instruction float_dup_times} {:instruction integer_add} {:instruction integer_shove} {:instruction float_inc} {:instruction float_dup_times} {:instruction integer_add} {:instruction print_float} {:instruction integer_dec} {:instruction float_rot} {:instruction -49} {:instruction in1} {:instruction float_yankdup} {:instruction float_max} {:instruction integer_flush} {:instruction float_dup_times} {:instruction float_div} {:instruction float_mult} {:instruction integer_shove} {:instruction float_dup} {:instruction integer_dup_times} {:instruction integer_shove} {:instruction float_dup} {:instruction integer_dup_times} {:instruction integer_dup} {:instruction float_mod} {:instruction integer_stackdepth} {:instruction integer_min} {:instruction float_sub})
Best program: (float_yank float_sub float_mod float_frominteger float_inc print_float float_mult float_yank float_yank float_mod float_frominteger float_pop float_min print_integer integer_max integer_flush in1 float_inc integer_add float_shove float_sub float_stackdepth float_rot integer_shove float_inc float_dup_times integer_add float_inc float_dup_times float_inc float_dup_times integer_add integer_shove float_inc float_dup_times float_rot integer_shove float_inc float_dup_times integer_add float_inc float_dup_times float_inc float_dup_times integer_add integer_shove float_inc float_dup_times integer_add print_float integer_dec float_rot -49 in1 float_yankdup float_max integer_flush float_dup_times float_div float_mult integer_shove float_dup integer_dup_times integer_shove float_dup integer_dup_times integer_dup float_mod integer_stackdepth integer_min float_sub)
Errors: [92.0 11 75.0 2 78.0 2 28.0 2 67.0 2 75.0 3 41.0 2 43.0 11 42.0 2 34.0 2 0.0 0 59.0 3 18.0 2 3.0 1 76.0 2 69.0 2 0.0 0 81.0 9 100.0 13 10.0 1 74.0 3 17.0 2 48.0 2 66.0 3 49.0 2]
Total: 1329.0
Mean: 26.58
Genome size: 71
Size: 72
Percent parens: 0.014
--- Population Statistics ---
Average total errors in population: 3435.990697500001
Median total errors in population: 1332.0
Error averages by case: (169.52837079999998 11.421 155.061765 3.536 155.31116509999998 3.062 113.4194498 3.256 149.74489140000003 2.861 156.28689000000003 4.223 123.80133649999999 3.03 127.08133659999997 11.505 124.29073239999997 3.037 119.8210996 3.264 91.06678610000003 2.005 140.95005429999998 3.941 104.96670589999998 3.168 90.62475560000003 1.987 160.67572709999996 3.689 149.1379128 3.254 88.95772709999999 1.993 160.2548877 9.749 175.78703689999998 13.039 94.04025229999998 2.173 156.93717460000002 3.82 102.1601502 2.852 131.23513920000002 3.253 147.93357830000005 3.939 135.20177219999997 3.657)
Error minima by case: (48.3133 9 68.761 1 0.0101 1 19.0 1 51.3192 1 7.106 2 32.0 1 21.6022 8 32.2389 1 22.7181 1 0.0 0 4.8622 2 4.0374 1 0.0 0 14.5348 1 50.7568 1 0.0 0 0.0172 8 12.8152 10 0.1392 1 24.8069 2 11.0 1 10.6022 1 10.1443 2 38.0912 2)
Average genome size in population (length): 61.93
Average program size in population (points): 62.93
Average percent parens in population: 0.016
Minimum age in population: 21.34722900390625
Maximum age in population: 25.45443725585938
Average age in population: 23.58350732421875
Median age in population: 23.62498474121094
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 22
Genome diversity (% unique Plush genomes):	 0.769
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 22
Syntactic diversity (% unique Push programs):	 0.769
Total error diversity:				 0.042
Error (vector) diversity:			 0.047
Behavioral diversity:				 0.047
--- Run Statistics ---
Number of program evaluations used so far: 17000
Number of point (instruction) evaluations so far: 22307114
--- Timings ---
Current time: 1529615990476 milliseconds
Total Time:          55.0 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        22.3 seconds, 40.5%
Fitness Testing:     25.9 seconds, 47.1%
Report:               6.7 seconds, 12.2%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 16
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 17
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 17
;;******************************
;; -*- Number IO problem report - generation 17
Test total error for best: 55009.0
Test mean error for best: 27.50450
;;------------------------------
Outputs of best individual on training cases:
Correct output: -74.6179542037 | Program output: 17.3820457963 
Correct output: 78.7609586813  | Program output: 3.7609586813  
Correct output: 3.0100598709   | Program output: 81.0100598709 
Correct output: -99.2368061293 | Program output: -71.2368061293
Correct output: 88.6808415603  | Program output: 21.6808415603 
Correct output: -151.1060419578 | Program output: -76.1060419578
Correct output: 56.004616184   | Program output: 97.004616184  
Correct output: 33.520660154   | Program output: -9.479339846  
Correct output: 42.238861085   | Program output: 84.238861085  
Correct output: -49.0227893765 | Program output: -83.0227893765
Correct output: 103.4057483059 | Program output: 103.4057483059
Correct output: -106.1378273779 | Program output: -47.1378273779
Correct output: 37.9625599991  | Program output: 19.9625599991 
Correct output: 71.9208193203  | Program output: 74.9208193203 
Correct output: 173.5348464317 | Program output: 97.5348464317 
Correct output: -77.0615185935 | Program output: -8.0615185935 
Correct output: -20.7643622555 | Program output: -20.7643622555
Correct output: 1.9827630815   | Program output: -79.0172369185
Correct output: -39.1198682611 | Program output: 60.8801317389 
Correct output: 1.1392376036   | Program output: 11.1392376036 
Correct output: 129.1930977679 | Program output: 55.1930977679 
Correct output: 26.7496211861  | Program output: 9.7496211861  
Correct output: -11.2984801384 | Program output: -59.2984801384
Correct output: -136.1442960385 | Program output: -70.1442960385
Correct output: 143.0911996605 | Program output: 94.0911996605 
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_yank} {:instruction float_sub} {:instruction float_mod} {:instruction float_frominteger} {:instruction float_pop} {:instruction float_min} {:instruction print_integer} {:instruction integer_max} {:instruction integer_flush} {:instruction in1} {:instruction float_inc} {:instruction float_div} {:instruction integer_add} {:instruction float_inc} {:instruction float_dec} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_max} {:instruction float_rot} {:instruction integer_yank} {:instruction float_inc} {:instruction integer_dup_times} {:instruction integer_dup} {:instruction float_swap} {:instruction integer_min} {:instruction -16} {:instruction integer_pop} {:instruction integer_add} {:instruction float_dup_times} {:instruction integer_add} {:instruction integer_shove} {:instruction float_inc} {:instruction float_dup_times} {:instruction integer_add} {:instruction integer_shove} {:instruction float_inc} {:instruction float_sub} {:instruction float_rot} {:instruction integer_shove} {:instruction float_inc} {:instruction integer_swap} {:instruction integer_add} {:instruction print_float} {:instruction integer_dec} {:instruction float_tan} {:instruction integer_flush} {:instruction float_dup_times} {:instruction float_div} {:instruction float_mult} {:instruction integer_shove} {:instruction float_dup} {:instruction integer_dup_times} {:instruction integer_dup} {:instruction float_mod} {:instruction integer_stackdepth} {:instruction float_dup})
Best program: (float_yank float_sub float_mod float_frominteger float_pop float_min print_integer integer_max integer_flush in1 float_inc float_div integer_add float_inc float_dec float_inc float_inc float_inc float_inc integer_max float_rot integer_yank float_inc integer_dup_times integer_dup float_swap integer_min -16 integer_pop integer_add float_dup_times integer_add integer_shove float_inc float_dup_times integer_add integer_shove float_inc float_sub float_rot integer_shove float_inc integer_swap integer_add print_float integer_dec float_tan integer_flush float_dup_times float_div float_mult integer_shove float_dup integer_dup_times integer_dup float_mod integer_stackdepth float_dup)
Errors: [92.0 11 75.0 2 78.0 2 28.0 2 67.0 2 75.0 3 41.0 2 43.0 11 42.0 2 34.0 2 0.0 0 59.0 3 18.0 2 3.0 1 76.0 2 69.0 2 0.0 0 81.0 9 100.0 13 10.0 1 74.0 3 17.0 2 48.0 2 66.0 3 49.0 2]
Total: 1329.0
Mean: 26.58
Genome size: 58
Size: 59
Percent parens: 0.017
--- Population Statistics ---
Average total errors in population: 3363.0314891000007
Median total errors in population: 1329.0
Error averages by case: (170.72108909999997 11.473 149.81783219999997 3.311 156.1910528 3.112 115.05840109999997 3.33 142.9674009 3.134 157.9321456 4.301 124.54850940000003 3.087 120.37257409999995 11.271 125.11684929999994 3.113 113.43917340000003 3.278 84.14900910000003 1.713 142.50055829999997 4.294 98.20260710000002 3.165 85.4542952 2.259 154.22031529999998 3.431 150.45517080000005 3.334 82.6001025 1.779 153.71846839999998 9.521 176.82008829999998 13.022 96.17154819999998 2.238 150.34363360000003 4.087 97.0903372 3.126 124.73151799999998 3.263 149.56102510000005 4.293 128.5307841 3.382)
Error minima by case: (13.0817 9 0.8427 1 0.3058 1 20.0 1 10.7625 1 3.9183 2 20.9954 1 21.5207 8 30.2389 1 28.0 1 0.0 0 2.8622 2 7.0374 1 0.0 0 12.5348 1 9.9183 1 0.0 0 0.0129 6 21.0817 9 0.0987 1 27.8069 2 11.0 1 10.2985 1 12.9183 2 36.0912 2)
Average genome size in population (length): 61.822
Average program size in population (points): 62.822
Average percent parens in population: 0.016
Minimum age in population: 22.429443359375
Maximum age in population: 26.72303771972656
Average age in population: 25.044265625
Median age in population: 25.10205078125
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 21
Genome diversity (% unique Plush genomes):	 0.75
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 21
Syntactic diversity (% unique Push programs):	 0.75
Total error diversity:				 0.05
Error (vector) diversity:			 0.056
Behavioral diversity:				 0.057
--- Run Statistics ---
Number of program evaluations used so far: 18000
Number of point (instruction) evaluations so far: 23852839
--- Timings ---
Current time: 1529615993718 milliseconds
Total Time:          58.3 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        23.6 seconds, 40.5%
Fitness Testing:     27.4 seconds, 47.0%
Report:               7.2 seconds, 12.3%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 17
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 18
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 18
;;******************************
;; -*- Number IO problem report - generation 18
Test total error for best: 55009.0
Test mean error for best: 27.50450
;;------------------------------
Outputs of best individual on training cases:
Correct output: -74.6179542037 | Program output: 17.3820457963 
Correct output: 78.7609586813  | Program output: 3.7609586813  
Correct output: 3.0100598709   | Program output: 81.0100598709 
Correct output: -99.2368061293 | Program output: -71.2368061293
Correct output: 88.6808415603  | Program output: 21.6808415603 
Correct output: -151.1060419578 | Program output: -76.1060419578
Correct output: 56.004616184   | Program output: 97.004616184  
Correct output: 33.520660154   | Program output: -9.479339846  
Correct output: 42.238861085   | Program output: 84.238861085  
Correct output: -49.0227893765 | Program output: -83.0227893765
Correct output: 103.4057483059 | Program output: 103.4057483059
Correct output: -106.1378273779 | Program output: -47.1378273779
Correct output: 37.9625599991  | Program output: 19.9625599991 
Correct output: 71.9208193203  | Program output: 74.9208193203 
Correct output: 173.5348464317 | Program output: 97.5348464317 
Correct output: -77.0615185935 | Program output: -8.0615185935 
Correct output: -20.7643622555 | Program output: -20.7643622555
Correct output: 1.9827630815   | Program output: -79.0172369185
Correct output: -39.1198682611 | Program output: 60.8801317389 
Correct output: 1.1392376036   | Program output: 11.1392376036 
Correct output: 129.1930977679 | Program output: 55.1930977679 
Correct output: 26.7496211861  | Program output: 9.7496211861  
Correct output: -11.2984801384 | Program output: -59.2984801384
Correct output: -136.1442960385 | Program output: -70.1442960385
Correct output: 143.0911996605 | Program output: 94.0911996605 
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_rot} {:instruction float_yank} {:instruction float_sub} {:instruction float_mod} {:instruction float_frominteger} {:instruction float_pop} {:instruction float_min} {:instruction print_integer} {:instruction integer_max} {:instruction integer_flush} {:instruction in1} {:instruction float_inc} {:instruction float_inc} {:instruction integer_add} {:instruction float_inc} {:instruction integer_add} {:instruction float_inc} {:instruction float_inc} {:instruction integer_max} {:instruction integer_yank} {:instruction integer_yank} {:instruction float_inc} {:instruction integer_dup_times} {:instruction integer_dup} {:instruction float_min} {:instruction integer_min} {:instruction -16} {:instruction integer_pop} {:instruction integer_add} {:instruction integer_dup} {:instruction -15} {:instruction integer_pop} {:instruction integer_add} {:instruction float_dup_times} {:instruction integer_add} {:instruction integer_shove} {:instruction float_inc} {:instruction float_dup_times} {:instruction integer_add} {:instruction integer_shove} {:instruction float_inc} {:instruction float_dup_times} {:instruction float_rot} {:instruction integer_shove} {:instruction float_inc} {:instruction integer_swap} {:instruction integer_add} {:instruction print_float} {:instruction float_max} {:instruction float_tan} {:instruction integer_flush} {:instruction -49} {:instruction in1} {:instruction float_yankdup} {:instruction float_max} {:instruction integer_flush} {:instruction float_dup_times} {:instruction float_div} {:instruction float_mult} {:instruction integer_shove} {:instruction float_dup} {:instruction integer_dup_times} {:instruction integer_dup} {:instruction float_mod} {:instruction integer_stackdepth} {:instruction integer_min} {:instruction float_sub} {:instruction tagged_690} {:instruction integer_swap} {:instruction float_mod} {:instruction float_shove} {:instruction float_sin} {:instruction integer_min})
Best program: (integer_rot float_yank float_sub float_mod float_frominteger float_pop float_min print_integer integer_max integer_flush in1 float_inc float_inc integer_add float_inc integer_add float_inc float_inc integer_max integer_yank integer_yank float_inc integer_dup_times integer_dup float_min integer_min -16 integer_pop integer_add integer_dup -15 integer_pop integer_add float_dup_times integer_add integer_shove float_inc float_dup_times integer_add integer_shove float_inc float_dup_times float_rot integer_shove float_inc integer_swap integer_add print_float float_max float_tan integer_flush -49 in1 float_yankdup float_max integer_flush float_dup_times float_div float_mult integer_shove float_dup integer_dup_times integer_dup float_mod integer_stackdepth integer_min float_sub tagged_690 integer_swap float_mod float_shove float_sin integer_min)
Errors: [92.0 11 75.0 2 78.0 2 28.0 2 67.0 2 75.0 3 41.0 2 43.0 11 42.0 2 34.0 2 0.0 0 59.0 3 18.0 2 3.0 1 76.0 2 69.0 2 0.0 0 81.0 9 100.0 13 10.0 1 74.0 3 17.0 2 48.0 2 66.0 3 49.0 2]
Total: 1329.0
Mean: 26.58
Genome size: 73
Size: 74
Percent parens: 0.014
--- Population Statistics ---
Average total errors in population: 3529.8794051
Median total errors in population: 1329.0
Error averages by case: (175.33097490000003 11.461 156.23399369999998 3.357 161.16801159999997 3.184 121.80085489999999 3.393 149.42576429999997 3.237 164.1616015 4.355 129.5335642 3.16 129.06873739999997 11.255 130.1537584 3.171 122.02221660000004 3.354 91.1311261 1.778 149.1174499 4.361 105.23127000000001 3.261 92.5810583 2.356 159.8341913 3.504 157.04165070000002 3.384 91.60594710000001 1.807 162.2645812 9.498 181.3748641 13.017 101.44952019999997 2.313 156.79326360000005 4.203 104.147235 3.234 133.40103880000004 3.323 156.08000150000004 4.349 135.1517298 3.46)
Error minima by case: (13.0817 9 0.1573 1 0.581 1 17.713 1 2.6797 1 3.9183 2 4.713 1 5.5913 9 3.713 1 3.4087 1 0.0 0 13.287 2 11.0 1 0.0 0 11.7449 1 9.9183 1 0.0 0 0.0129 6 8.5493 9 0.0039 1 9.7449 2 10.0 1 4.2988 1 12.9183 2 11.5913 2)
Average genome size in population (length): 61.708
Average program size in population (points): 62.708
Average percent parens in population: 0.016
Minimum age in population: 23.93115234375
Maximum age in population: 28.31585693359375
Average age in population: 26.5360930557251
Median age in population: 26.53908538818359
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 19
Genome diversity (% unique Plush genomes):	 0.787
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 19
Syntactic diversity (% unique Push programs):	 0.787
Total error diversity:				 0.05
Error (vector) diversity:			 0.055
Behavioral diversity:				 0.056
--- Run Statistics ---
Number of program evaluations used so far: 19000
Number of point (instruction) evaluations so far: 25395714
--- Timings ---
Current time: 1529615997019 milliseconds
Total Time:          61.5 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        24.9 seconds, 40.5%
Fitness Testing:     28.9 seconds, 47.0%
Report:               7.5 seconds, 12.3%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 18
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 19
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 19
;;******************************
;; -*- Number IO problem report - generation 19
Test total error for best: 55009.0
Test mean error for best: 27.50450
;;------------------------------
Outputs of best individual on training cases:
Correct output: -74.6179542037 | Program output: 17.3820457963 
Correct output: 78.7609586813  | Program output: 3.7609586813  
Correct output: 3.0100598709   | Program output: 81.0100598709 
Correct output: -99.2368061293 | Program output: -71.2368061293
Correct output: 88.6808415603  | Program output: 21.6808415603 
Correct output: -151.1060419578 | Program output: -76.1060419578
Correct output: 56.004616184   | Program output: 97.004616184  
Correct output: 33.520660154   | Program output: -9.479339846  
Correct output: 42.238861085   | Program output: 84.238861085  
Correct output: -49.0227893765 | Program output: -83.0227893765
Correct output: 103.4057483059 | Program output: 103.4057483059
Correct output: -106.1378273779 | Program output: -47.1378273779
Correct output: 37.9625599991  | Program output: 19.9625599991 
Correct output: 71.9208193203  | Program output: 74.9208193203 
Correct output: 173.5348464317 | Program output: 97.5348464317 
Correct output: -77.0615185935 | Program output: -8.0615185935 
Correct output: -20.7643622555 | Program output: -20.7643622555
Correct output: 1.9827630815   | Program output: -79.0172369185
Correct output: -39.1198682611 | Program output: 60.8801317389 
Correct output: 1.1392376036   | Program output: 11.1392376036 
Correct output: 129.1930977679 | Program output: 55.1930977679 
Correct output: 26.7496211861  | Program output: 9.7496211861  
Correct output: -11.2984801384 | Program output: -59.2984801384
Correct output: -136.1442960385 | Program output: -70.1442960385
Correct output: 143.0911996605 | Program output: 94.0911996605 
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_dup} {:instruction float_sub} {:instruction float_shove} {:instruction float_frominteger} {:instruction float_pop} {:instruction float_min} {:instruction print_integer} {:instruction integer_max} {:instruction integer_flush} {:instruction in1} {:instruction float_inc} {:instruction integer_add} {:instruction float_inc} {:instruction float_inc} {:instruction integer_max} {:instruction integer_yank} {:instruction integer_yank} {:instruction float_inc} {:instruction integer_dup_times} {:instruction integer_dup} {:instruction float_swap} {:instruction integer_min} {:instruction float_inc} {:instruction integer_max} {:instruction integer_yank} {:instruction integer_yank} {:instruction float_inc} {:instruction integer_dup_times} {:instruction integer_dup} {:instruction float_swap} {:instruction integer_min} {:instruction -16} {:instruction integer_pop} {:instruction integer_add} {:instruction float_div} {:instruction integer_add} {:instruction integer_shove} {:instruction float_inc} {:instruction float_dup_times} {:instruction integer_add} {:instruction integer_shove} {:instruction float_inc} {:instruction float_dup_times} {:instruction float_rot} {:instruction integer_shove} {:instruction float_inc} {:instruction integer_swap} {:instruction integer_add} {:instruction print_float} {:instruction integer_dec} {:instruction float_tan})
Best program: (float_dup float_sub float_shove float_frominteger float_pop float_min print_integer integer_max integer_flush in1 float_inc integer_add float_inc float_inc integer_max integer_yank integer_yank float_inc integer_dup_times integer_dup float_swap integer_min float_inc integer_max integer_yank integer_yank float_inc integer_dup_times integer_dup float_swap integer_min -16 integer_pop integer_add float_div integer_add integer_shove float_inc float_dup_times integer_add integer_shove float_inc float_dup_times float_rot integer_shove float_inc integer_swap integer_add print_float integer_dec float_tan)
Errors: [92.0 11 75.0 2 78.0 2 28.0 2 67.0 2 75.0 3 41.0 2 43.0 11 42.0 2 34.0 2 0.0 0 59.0 3 18.0 2 3.0 1 76.0 2 69.0 2 0.0 0 81.0 9 100.0 13 10.0 1 74.0 3 17.0 2 48.0 2 66.0 3 49.0 2]
Total: 1329.0
Mean: 26.58
Genome size: 51
Size: 52
Percent parens: 0.019
--- Population Statistics ---
Average total errors in population: 3488.4625005000007
Median total errors in population: 1329.0
Error averages by case: (173.4164375 11.484 154.47829199999998 3.38 159.4142078 3.102 120.24234039999999 3.288 147.6372573 3.149 162.80876990000002 4.258 127.58595949999999 3.073 128.1170958 11.253 128.17291959999994 3.093 121.02090570000001 3.264 89.83323900000003 1.726 147.63293919999995 4.266 102.9696129 3.151 91.26300620000004 2.284 157.59689889999999 3.434 155.8572935 3.287 91.24297299999999 1.75 161.61843700000003 9.509 179.74675639999995 13.031 98.99401459999999 2.224 154.77630690000004 4.126 101.88194889999998 3.145 132.5168723 3.229 154.52553500000002 4.281 132.93548119999997 3.39)
Error minima by case: (69.8063 9 0.1573 1 0.0101 1 5.8063 1 9.7625 1 4.106 2 18.8063 1 24.5207 9 19.8063 1 27.0 1 0.0 0 3.8622 2 1.0374 1 0.0 0 13.5348 1 46.8063 1 0.0 0 0.6682 8 27.1541 9 0.9961 1 21.8069 2 10.0 1 10.2985 1 7.1443 2 37.0912 2)
Average genome size in population (length): 61.699
Average program size in population (points): 62.699
Average percent parens in population: 0.016
Minimum age in population: 25.37554931640625
Maximum age in population: 29.91886901855469
Average age in population: 27.99956104278564
Median age in population: 28.03913688659668
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 12
Genome diversity (% unique Plush genomes):	 0.849
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 12
Syntactic diversity (% unique Push programs):	 0.849
Total error diversity:				 0.05
Error (vector) diversity:			 0.055
Behavioral diversity:				 0.056
--- Run Statistics ---
Number of program evaluations used so far: 20000
Number of point (instruction) evaluations so far: 26938264
--- Timings ---
Current time: 1529616000245 milliseconds
Total Time:          64.8 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        26.3 seconds, 40.5%
Fitness Testing:     30.4 seconds, 47.0%
Report:               8.0 seconds, 12.3%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 19
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 20
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 20
;;******************************
;; -*- Number IO problem report - generation 20
Test total error for best: 55009.0
Test mean error for best: 27.50450
;;------------------------------
Outputs of best individual on training cases:
Correct output: -74.6179542037 | Program output: 17.3820457963 
Correct output: 78.7609586813  | Program output: 3.7609586813  
Correct output: 3.0100598709   | Program output: 81.0100598709 
Correct output: -99.2368061293 | Program output: -71.2368061293
Correct output: 88.6808415603  | Program output: 21.6808415603 
Correct output: -151.1060419578 | Program output: -76.1060419578
Correct output: 56.004616184   | Program output: 97.004616184  
Correct output: 33.520660154   | Program output: -9.479339846  
Correct output: 42.238861085   | Program output: 84.238861085  
Correct output: -49.0227893765 | Program output: -83.0227893765
Correct output: 103.4057483059 | Program output: 103.4057483059
Correct output: -106.1378273779 | Program output: -47.1378273779
Correct output: 37.9625599991  | Program output: 19.9625599991 
Correct output: 71.9208193203  | Program output: 74.9208193203 
Correct output: 173.5348464317 | Program output: 97.5348464317 
Correct output: -77.0615185935 | Program output: -8.0615185935 
Correct output: -20.7643622555 | Program output: -20.7643622555
Correct output: 1.9827630815   | Program output: -79.0172369185
Correct output: -39.1198682611 | Program output: 60.8801317389 
Correct output: 1.1392376036   | Program output: 11.1392376036 
Correct output: 129.1930977679 | Program output: 55.1930977679 
Correct output: 26.7496211861  | Program output: 9.7496211861  
Correct output: -11.2984801384 | Program output: -59.2984801384
Correct output: -136.1442960385 | Program output: -70.1442960385
Correct output: 143.0911996605 | Program output: 94.0911996605 
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_yank} {:instruction float_sub} {:instruction float_sub} {:instruction float_mod} {:instruction float_frominteger} {:instruction float_pop} {:instruction float_min} {:instruction print_integer} {:instruction integer_max} {:instruction integer_flush} {:instruction in1} {:instruction float_inc} {:instruction float_inc} {:instruction integer_add} {:instruction float_inc} {:instruction integer_add} {:instruction float_inc} {:instruction float_inc} {:instruction integer_max} {:instruction integer_yank} {:instruction integer_yank} {:instruction float_inc} {:instruction integer_dup_times} {:instruction integer_dup} {:instruction float_swap} {:instruction float_yankdup} {:instruction -16} {:instruction integer_pop} {:instruction integer_add} {:instruction float_dup_times} {:instruction integer_add} {:instruction integer_pop} {:instruction float_inc} {:instruction float_dup_times} {:instruction integer_inc} {:instruction integer_shove} {:instruction float_inc} {:instruction float_dup_times} {:instruction float_rot} {:instruction integer_shove} {:instruction float_inc} {:instruction integer_swap} {:instruction integer_add} {:instruction print_float} {:instruction integer_dec} {:instruction float_tan} {:instruction integer_flush} {:instruction -49} {:instruction in1} {:instruction float_yankdup} {:instruction float_max} {:instruction integer_flush} {:instruction float_dup_times} {:instruction float_div} {:instruction float_mult} {:instruction integer_shove} {:instruction float_dup} {:instruction integer_dup_times} {:instruction integer_dup} {:instruction integer_swap} {:instruction float_mod} {:instruction float_shove} {:instruction float_sin} {:instruction integer_min})
Best program: (float_yank float_sub float_sub float_mod float_frominteger float_pop float_min print_integer integer_max integer_flush in1 float_inc float_inc integer_add float_inc integer_add float_inc float_inc integer_max integer_yank integer_yank float_inc integer_dup_times integer_dup float_swap float_yankdup -16 integer_pop integer_add float_dup_times integer_add integer_pop float_inc float_dup_times integer_inc integer_shove float_inc float_dup_times float_rot integer_shove float_inc integer_swap integer_add print_float integer_dec float_tan integer_flush -49 in1 float_yankdup float_max integer_flush float_dup_times float_div float_mult integer_shove float_dup integer_dup_times integer_dup integer_swap float_mod float_shove float_sin integer_min)
Errors: [92.0 11 75.0 2 78.0 2 28.0 2 67.0 2 75.0 3 41.0 2 43.0 11 42.0 2 34.0 2 0.0 0 59.0 3 18.0 2 3.0 1 76.0 2 69.0 2 0.0 0 81.0 9 100.0 13 10.0 1 74.0 3 17.0 2 48.0 2 66.0 3 49.0 2]
Total: 1329.0
Mean: 26.58
Genome size: 64
Size: 65
Percent parens: 0.015
--- Population Statistics ---
Average total errors in population: 3556.525545200001
Median total errors in population: 1329.0
Error averages by case: (175.18248379999997 11.48 158.63380319999996 3.473 160.60718250000002 3.204 120.59992820000002 3.415 152.2780472 3.313 163.3097342 4.391 129.74850090000004 3.194 129.69688199999996 11.251 130.17325849999997 3.193 123.25022210000004 3.416 95.01030830000002 1.87 147.69293169999997 4.398 107.93175740000001 3.318 96.0982182 2.432 164.19662059999996 3.573 155.27359030000005 3.417 92.6419288 1.923 162.50674589999997 9.532 180.94968239999997 13.03 101.15791729999995 2.352 159.91489630000004 4.276 106.78742359999998 3.305 134.08825520000002 3.413 154.9339046 4.399 138.76232199999998 3.531)
Error minima by case: (9.7641 10 0.8427 1 0.2618 1 20.0 1 5.7625 1 8.106 2 6.4353 1 9.0137 9 7.3304 1 0.0228 1 0.0 0 4.8622 2 0.3163 1 0.0 0 14.5348 2 28.0615 1 0.0 0 0.6682 7 5.2484 9 0.0987 1 25.8069 2 5.5008 1 10.2985 1 11.1443 2 38.0912 2)
Average genome size in population (length): 61.432
Average program size in population (points): 62.432
Average percent parens in population: 0.016
Minimum age in population: 26.84114074707031
Maximum age in population: 31.33453559875488
Average age in population: 29.43322800636292
Median age in population: 29.45697975158691
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 14
Genome diversity (% unique Plush genomes):	 0.836
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 14
Syntactic diversity (% unique Push programs):	 0.836
Total error diversity:				 0.054
Error (vector) diversity:			 0.058
Behavioral diversity:				 0.058
--- Run Statistics ---
Number of program evaluations used so far: 21000
Number of point (instruction) evaluations so far: 28474139
--- Timings ---
Current time: 1529616003524 milliseconds
Total Time:          68.0 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        27.6 seconds, 40.6%
Fitness Testing:     31.9 seconds, 47.0%
Report:               8.3 seconds, 12.3%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 20
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 21
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 21
;;******************************
;; -*- Number IO problem report - generation 21
Test total error for best: 55009.0
Test mean error for best: 27.50450
;;------------------------------
Outputs of best individual on training cases:
Correct output: -74.6179542037 | Program output: 17.3820457963 
Correct output: 78.7609586813  | Program output: 3.7609586813  
Correct output: 3.0100598709   | Program output: 81.0100598709 
Correct output: -99.2368061293 | Program output: -71.2368061293
Correct output: 88.6808415603  | Program output: 21.6808415603 
Correct output: -151.1060419578 | Program output: -76.1060419578
Correct output: 56.004616184   | Program output: 97.004616184  
Correct output: 33.520660154   | Program output: -9.479339846  
Correct output: 42.238861085   | Program output: 84.238861085  
Correct output: -49.0227893765 | Program output: -83.0227893765
Correct output: 103.4057483059 | Program output: 103.4057483059
Correct output: -106.1378273779 | Program output: -47.1378273779
Correct output: 37.9625599991  | Program output: 19.9625599991 
Correct output: 71.9208193203  | Program output: 74.9208193203 
Correct output: 173.5348464317 | Program output: 97.5348464317 
Correct output: -77.0615185935 | Program output: -8.0615185935 
Correct output: -20.7643622555 | Program output: -20.7643622555
Correct output: 1.9827630815   | Program output: -79.0172369185
Correct output: -39.1198682611 | Program output: 60.8801317389 
Correct output: 1.1392376036   | Program output: 11.1392376036 
Correct output: 129.1930977679 | Program output: 55.1930977679 
Correct output: 26.7496211861  | Program output: 9.7496211861  
Correct output: -11.2984801384 | Program output: -59.2984801384
Correct output: -136.1442960385 | Program output: -70.1442960385
Correct output: 143.0911996605 | Program output: 94.0911996605 
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_yank} {:instruction float_sub} {:instruction float_mod} {:instruction float_frominteger} {:instruction float_sub} {:instruction float_min} {:instruction print_integer} {:instruction integer_max} {:instruction integer_flush} {:instruction in1} {:instruction float_inc} {:instruction float_inc} {:instruction integer_add} {:instruction float_inc} {:instruction integer_add} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_dup_times} {:instruction float_mult} {:instruction integer_shove} {:instruction float_inc} {:instruction float_dup_times} {:instruction float_inc} {:instruction float_dup_times} {:instruction integer_add} {:instruction 25} {:instruction integer_flush} {:instruction float_shove} {:instruction integer_swap} {:instruction float_inc} {:instruction 77.91830066263515} {:instruction integer_inc} {:instruction float_shove} {:instruction float_dup_items} {:instruction integer_fromfloat} {:instruction integer_add} {:instruction print_float} {:instruction integer_dec} {:instruction float_tan} {:instruction integer_flush} {:instruction -49} {:instruction in1} {:instruction float_yankdup} {:instruction float_max} {:instruction integer_flush})
Best program: (float_yank float_sub float_mod float_frominteger float_sub float_min print_integer integer_max integer_flush in1 float_inc float_inc integer_add float_inc integer_add float_inc float_inc float_inc float_dup_times float_mult integer_shove float_inc float_dup_times float_inc float_dup_times integer_add 25 integer_flush float_shove integer_swap float_inc 77.91830066263515 integer_inc float_shove float_dup_items integer_fromfloat integer_add print_float integer_dec float_tan integer_flush -49 in1 float_yankdup float_max integer_flush)
Errors: [92.0 11 75.0 2 78.0 2 28.0 2 67.0 2 75.0 3 41.0 2 43.0 11 42.0 2 34.0 2 0.0 0 59.0 3 18.0 2 3.0 1 76.0 2 69.0 2 0.0 0 81.0 9 100.0 13 10.0 1 74.0 3 17.0 2 48.0 2 66.0 3 49.0 2]
Total: 1329.0
Mean: 26.58
Genome size: 46
Size: 47
Percent parens: 0.021
--- Population Statistics ---
Average total errors in population: 3172.278141000001
Median total errors in population: 1329.0
Error averages by case: (159.5537364 11.439 141.29771579999996 3.168 147.51842790000003 2.96 106.874872 3.111 135.29439159999998 3.012 150.288562 4.08 115.1516512 2.94 114.677766 11.233 115.76252149999998 2.949 109.33230120000002 3.109 78.73102920000001 1.508 134.79949729999998 4.1 90.13105560000001 3.031 78.97004659999999 2.117 147.57061819999996 3.265 141.3218296 3.112 77.66586609999999 1.549 150.4625413 9.466 168.10741380000005 13.018 82.71067610000003 2.052 144.60528100000002 3.975 87.43845579999999 2.995 121.00180480000003 3.09 141.8444967 4.102 122.55658329999999 3.228)
Error minima by case: (46.9088 11 0.8427 1 0.0101 1 19.0 1 7.7625 1 66.0 2 21.9137 1 14.5207 8 23.2389 1 21.3136 1 0.0 0 50.0 2 12.0 1 0.0 0 24.0 1 49.3523 1 0.0 0 0.8047 8 11.4107 8 0.0987 1 26.0 2 7.0 1 1.7015 1 57.0 2 43.0 2)
Average genome size in population (length): 61.146
Average program size in population (points): 62.146
Average percent parens in population: 0.016
Minimum age in population: 28.58776092529297
Maximum age in population: 32.62729549407959
Average age in population: 30.91430517959595
Median age in population: 30.97971057891846
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 14
Genome diversity (% unique Plush genomes):	 0.844
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 14
Syntactic diversity (% unique Push programs):	 0.844
Total error diversity:				 0.05
Error (vector) diversity:			 0.054
Behavioral diversity:				 0.054
--- Run Statistics ---
Number of program evaluations used so far: 22000
Number of point (instruction) evaluations so far: 30002864
--- Timings ---
Current time: 1529616006727 milliseconds
Total Time:          71.3 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        29.0 seconds, 40.6%
Fitness Testing:     33.4 seconds, 46.9%
Report:               8.8 seconds, 12.3%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 21
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 22
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 22
;;******************************
;; -*- Number IO problem report - generation 22
Test total error for best: 55009.0
Test mean error for best: 27.50450
;;------------------------------
Outputs of best individual on training cases:
Correct output: -74.6179542037 | Program output: 17.3820457963 
Correct output: 78.7609586813  | Program output: 3.7609586813  
Correct output: 3.0100598709   | Program output: 81.0100598709 
Correct output: -99.2368061293 | Program output: -71.2368061293
Correct output: 88.6808415603  | Program output: 21.6808415603 
Correct output: -151.1060419578 | Program output: -76.1060419578
Correct output: 56.004616184   | Program output: 97.004616184  
Correct output: 33.520660154   | Program output: -9.479339846  
Correct output: 42.238861085   | Program output: 84.238861085  
Correct output: -49.0227893765 | Program output: -83.0227893765
Correct output: 103.4057483059 | Program output: 103.4057483059
Correct output: -106.1378273779 | Program output: -47.1378273779
Correct output: 37.9625599991  | Program output: 19.9625599991 
Correct output: 71.9208193203  | Program output: 74.9208193203 
Correct output: 173.5348464317 | Program output: 97.5348464317 
Correct output: -77.0615185935 | Program output: -8.0615185935 
Correct output: -20.7643622555 | Program output: -20.7643622555
Correct output: 1.9827630815   | Program output: -79.0172369185
Correct output: -39.1198682611 | Program output: 60.8801317389 
Correct output: 1.1392376036   | Program output: 11.1392376036 
Correct output: 129.1930977679 | Program output: 55.1930977679 
Correct output: 26.7496211861  | Program output: 9.7496211861  
Correct output: -11.2984801384 | Program output: -59.2984801384
Correct output: -136.1442960385 | Program output: -70.1442960385
Correct output: 143.0911996605 | Program output: 94.0911996605 
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_yank} {:instruction float_sub} {:instruction float_mod} {:instruction float_yank} {:instruction float_sub} {:instruction integer_div} {:instruction float_frominteger} {:instruction float_pop} {:instruction float_min} {:instruction tagged_251} {:instruction integer_dup_items} {:instruction integer_flush} {:instruction in1} {:instruction float_inc} {:instruction float_div} {:instruction integer_add} {:instruction float_inc} {:instruction float_dec} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_max} {:instruction float_rot} {:instruction integer_yank} {:instruction float_inc} {:instruction integer_dup_times} {:instruction integer_dup} {:instruction float_swap} {:instruction integer_min} {:instruction -16} {:instruction integer_pop} {:instruction integer_add} {:instruction float_dup_times} {:instruction integer_rot} {:instruction integer_pop} {:instruction -16} {:instruction integer_pop} {:instruction integer_shove} {:instruction float_inc} {:instruction float_dup_times} {:instruction float_rot} {:instruction integer_shove} {:instruction float_inc} {:instruction float_inc} {:instruction float_dup_times} {:instruction integer_add} {:instruction print_float} {:instruction integer_dec} {:instruction float_tan} {:instruction integer_shove} {:instruction float_dup} {:instruction integer_dup_times} {:instruction integer_dup} {:instruction float_yankdup} {:instruction float_max} {:instruction integer_flush} {:instruction integer_dup} {:instruction float_mod} {:instruction integer_stackdepth} {:instruction integer_min} {:instruction float_pop} {:instruction tagged_690} {:instruction integer_swap} {:instruction float_yankdup} {:instruction float_max} {:instruction integer_flush} {:instruction float_dup_times} {:instruction float_add} {:instruction float_mult} {:instruction integer_shove} {:instruction float_dup} {:instruction integer_dup_times} {:instruction integer_dup} {:instruction float_mod} {:instruction integer_stackdepth} {:instruction integer_min} {:instruction float_sub} {:instruction tagged_690} {:instruction integer_swap} {:instruction float_mod} {:instruction float_sin} {:instruction integer_min} {:instruction float_sub} {:instruction tagged_690} {:instruction integer_swap} {:instruction float_mod} {:instruction float_shove} {:instruction float_sin} {:instruction integer_min})
Best program: (float_yank float_sub float_mod float_yank float_sub integer_div float_frominteger float_pop float_min tagged_251 integer_dup_items integer_flush in1 float_inc float_div integer_add float_inc float_dec float_inc float_inc float_inc float_inc integer_max float_rot integer_yank float_inc integer_dup_times integer_dup float_swap integer_min -16 integer_pop integer_add float_dup_times integer_rot integer_pop -16 integer_pop integer_shove float_inc float_dup_times float_rot integer_shove float_inc float_inc float_dup_times integer_add print_float integer_dec float_tan integer_shove float_dup integer_dup_times integer_dup float_yankdup float_max integer_flush integer_dup float_mod integer_stackdepth integer_min float_pop tagged_690 integer_swap float_yankdup float_max integer_flush float_dup_times float_add float_mult integer_shove float_dup integer_dup_times integer_dup float_mod integer_stackdepth integer_min float_sub tagged_690 integer_swap float_mod float_sin integer_min float_sub tagged_690 integer_swap float_mod float_shove float_sin integer_min)
Errors: [92.0 11 75.0 2 78.0 2 28.0 2 67.0 2 75.0 3 41.0 2 43.0 11 42.0 2 34.0 2 0.0 0 59.0 3 18.0 2 3.0 1 76.0 2 69.0 2 0.0 0 81.0 9 100.0 13 10.0 1 74.0 3 17.0 2 48.0 2 66.0 3 49.0 2]
Total: 1329.0
Mean: 26.58
Genome size: 90
Size: 91
Percent parens: 0.011
--- Population Statistics ---
Average total errors in population: 3584.518468700001
Median total errors in population: 1329.0
Error averages by case: (176.88037839999996 11.507 160.2012291 3.45 162.83448889999997 3.189 121.5008977 3.393 153.4600351 3.276 163.95850080000002 4.36 131.6979372 3.169 130.88243729999996 11.276 132.1460765 3.177 123.65972100000003 3.392 95.69031210000003 1.883 148.7355454 4.351 109.03571449999998 3.284 96.92067270000001 2.406 163.70671819999998 3.585 156.74214099999998 3.379 93.384357 1.935 163.70514500000002 9.557 182.99233260000003 13.016 103.06880859999998 2.321 160.69904550000004 4.237 107.89785930000001 3.271 135.01691280000003 3.375 155.7456764 4.364 139.25652560000003 3.546)
Error minima by case: (26.6754 9 8.1254 1 0.873 1 19.0 1 16.1254 1 8.106 2 11.1269 1 11.3571 8 2.6389 1 1.0803 1 0.0 0 3.8622 2 5.0374 1 0.0 0 7.1254 1 29.119 1 0.0 0 0.2 8 3.1199 9 0.1392 1 9.1254 2 11.0 1 6.2985 1 11.1443 2 34.1254 2)
Average genome size in population (length): 61.443
Average program size in population (points): 62.443
Average percent parens in population: 0.016
Minimum age in population: 29.62592697143555
Maximum age in population: 34.12577390670776
Average age in population: 32.34064137649536
Median age in population: 32.40655469894409
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 11
Genome diversity (% unique Plush genomes):	 0.89
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 11
Syntactic diversity (% unique Push programs):	 0.89
Total error diversity:				 0.055
Error (vector) diversity:			 0.058
Behavioral diversity:				 0.059
--- Run Statistics ---
Number of program evaluations used so far: 23000
Number of point (instruction) evaluations so far: 31539014
--- Timings ---
Current time: 1529616010013 milliseconds
Total Time:          74.5 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        30.3 seconds, 40.6%
Fitness Testing:     34.9 seconds, 46.9%
Report:               9.2 seconds, 12.3%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 22
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 23
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 23
;;******************************
;; -*- Number IO problem report - generation 23
Test total error for best: 55009.0
Test mean error for best: 27.50450
;;------------------------------
Outputs of best individual on training cases:
Correct output: -74.6179542037 | Program output: 17.3820457963 
Correct output: 78.7609586813  | Program output: 3.7609586813  
Correct output: 3.0100598709   | Program output: 81.0100598709 
Correct output: -99.2368061293 | Program output: -71.2368061293
Correct output: 88.6808415603  | Program output: 21.6808415603 
Correct output: -151.1060419578 | Program output: -76.1060419578
Correct output: 56.004616184   | Program output: 97.004616184  
Correct output: 33.520660154   | Program output: -9.479339846  
Correct output: 42.238861085   | Program output: 84.238861085  
Correct output: -49.0227893765 | Program output: -83.0227893765
Correct output: 103.4057483059 | Program output: 103.4057483059
Correct output: -106.1378273779 | Program output: -47.1378273779
Correct output: 37.9625599991  | Program output: 19.9625599991 
Correct output: 71.9208193203  | Program output: 74.9208193203 
Correct output: 173.5348464317 | Program output: 97.5348464317 
Correct output: -77.0615185935 | Program output: -8.0615185935 
Correct output: -20.7643622555 | Program output: -20.7643622555
Correct output: 1.9827630815   | Program output: -79.0172369185
Correct output: -39.1198682611 | Program output: 60.8801317389 
Correct output: 1.1392376036   | Program output: 11.1392376036 
Correct output: 129.1930977679 | Program output: 55.1930977679 
Correct output: 26.7496211861  | Program output: 9.7496211861  
Correct output: -11.2984801384 | Program output: -59.2984801384
Correct output: -136.1442960385 | Program output: -70.1442960385
Correct output: 143.0911996605 | Program output: 94.0911996605 
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_yank} {:instruction float_sub} {:instruction in1} {:instruction float_inc} {:instruction integer_add} {:instruction float_shove} {:instruction float_sub} {:instruction float_stackdepth} {:instruction float_rot} {:instruction integer_shove} {:instruction float_inc} {:instruction float_dup_times} {:instruction integer_add} {:instruction float_inc} {:instruction float_dup_times} {:instruction float_inc} {:instruction float_dup_times} {:instruction integer_add} {:instruction integer_shove} {:instruction float_inc} {:instruction float_dup_times} {:instruction float_rot} {:instruction integer_shove} {:instruction float_inc} {:instruction float_dup_times} {:instruction integer_add} {:instruction float_inc} {:instruction float_dup_times} {:instruction float_inc} {:instruction float_dup_times} {:instruction integer_add} {:instruction integer_shove} {:instruction float_inc} {:instruction float_dup_times} {:instruction integer_add} {:instruction print_float} {:instruction integer_dec} {:instruction float_rot} {:instruction -49} {:instruction in1} {:instruction float_yankdup} {:instruction float_max} {:instruction integer_flush} {:instruction float_dup_times} {:instruction float_div} {:instruction float_mult} {:instruction integer_shove} {:instruction float_dup} {:instruction integer_dup_times} {:instruction integer_shove} {:instruction float_dup} {:instruction float_dup_times} {:instruction float_swap} {:instruction float_mod} {:instruction integer_stackdepth} {:instruction integer_min} {:instruction float_sub} {:instruction tagged_690} {:instruction tagged_690} {:instruction integer_swap})
Best program: (float_yank float_sub in1 float_inc integer_add float_shove float_sub float_stackdepth float_rot integer_shove float_inc float_dup_times integer_add float_inc float_dup_times float_inc float_dup_times integer_add integer_shove float_inc float_dup_times float_rot integer_shove float_inc float_dup_times integer_add float_inc float_dup_times float_inc float_dup_times integer_add integer_shove float_inc float_dup_times integer_add print_float integer_dec float_rot -49 in1 float_yankdup float_max integer_flush float_dup_times float_div float_mult integer_shove float_dup integer_dup_times integer_shove float_dup float_dup_times float_swap float_mod integer_stackdepth integer_min float_sub tagged_690 tagged_690 integer_swap)
Errors: [92.0 11 75.0 2 78.0 2 28.0 2 67.0 2 75.0 3 41.0 2 43.0 11 42.0 2 34.0 2 0.0 0 59.0 3 18.0 2 3.0 1 76.0 2 69.0 2 0.0 0 81.0 9 100.0 13 10.0 1 74.0 3 17.0 2 48.0 2 66.0 3 49.0 2]
Total: 1329.0
Mean: 26.58
Genome size: 60
Size: 61
Percent parens: 0.016
--- Population Statistics ---
Average total errors in population: 3889.7790114000013
Median total errors in population: 1329.0
Error averages by case: (190.57016769999998 11.567 170.22889879999997 3.56 176.69876050000005 3.291 136.27609180000005 3.488 163.6836609 3.324 177.84753609999999 4.441 145.36496899999997 3.248 142.8363213 11.371 145.91111819999995 3.258 135.47379740000005 3.442 106.14289880000001 1.915 163.1063632 4.451 119.86951889999999 3.33 106.661682 2.468 172.53333479999995 3.598 172.27994769999995 3.491 105.24550020000001 1.93 175.7923374 9.631 196.3205313 13.083 117.1287759 2.408 169.85187950000002 4.267 118.46587510000002 3.297 147.011633 3.422 169.76806540000007 4.456 148.4213465 3.551)
Error minima by case: (4.5649 10 0.8427 1 0.4953 1 19.0 1 10.7625 1 6.106 2 21.9137 1 21.5207 8 30.2389 1 20.169 1 0.0 0 2.8622 2 3.0374 1 0.0 0 12.5348 2 7.8697 1 0.0 0 0.4005 6 15.1764 10 0.2719 1 23.8069 2 7.0 1 8.7962 1 9.1443 2 36.0912 2)
Average genome size in population (length): 60.629
Average program size in population (points): 61.629
Average percent parens in population: 0.017
Minimum age in population: 30.86255931854248
Maximum age in population: 35.70737314224243
Average age in population: 33.72224402475357
Median age in population: 33.76278913021088
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 10
Genome diversity (% unique Plush genomes):	 0.86
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 10
Syntactic diversity (% unique Push programs):	 0.86
Total error diversity:				 0.055
Error (vector) diversity:			 0.06
Behavioral diversity:				 0.06
--- Run Statistics ---
Number of program evaluations used so far: 24000
Number of point (instruction) evaluations so far: 33054864
--- Timings ---
Current time: 1529616013289 milliseconds
Total Time:          77.8 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        31.6 seconds, 40.6%
Fitness Testing:     36.5 seconds, 46.9%
Report:               9.6 seconds, 12.4%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 23
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 24
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 24
;;******************************
;; -*- Number IO problem report - generation 24
Test total error for best: 55009.0
Test mean error for best: 27.50450
;;------------------------------
Outputs of best individual on training cases:
Correct output: -74.6179542037 | Program output: 17.3820457963 
Correct output: 78.7609586813  | Program output: 3.7609586813  
Correct output: 3.0100598709   | Program output: 81.0100598709 
Correct output: -99.2368061293 | Program output: -71.2368061293
Correct output: 88.6808415603  | Program output: 21.6808415603 
Correct output: -151.1060419578 | Program output: -76.1060419578
Correct output: 56.004616184   | Program output: 97.004616184  
Correct output: 33.520660154   | Program output: -9.479339846  
Correct output: 42.238861085   | Program output: 84.238861085  
Correct output: -49.0227893765 | Program output: -83.0227893765
Correct output: 103.4057483059 | Program output: 103.4057483059
Correct output: -106.1378273779 | Program output: -47.1378273779
Correct output: 37.9625599991  | Program output: 19.9625599991 
Correct output: 71.9208193203  | Program output: 74.9208193203 
Correct output: 173.5348464317 | Program output: 97.5348464317 
Correct output: -77.0615185935 | Program output: -8.0615185935 
Correct output: -20.7643622555 | Program output: -20.7643622555
Correct output: 1.9827630815   | Program output: -79.0172369185
Correct output: -39.1198682611 | Program output: 60.8801317389 
Correct output: 1.1392376036   | Program output: 11.1392376036 
Correct output: 129.1930977679 | Program output: 55.1930977679 
Correct output: 26.7496211861  | Program output: 9.7496211861  
Correct output: -11.2984801384 | Program output: -59.2984801384
Correct output: -136.1442960385 | Program output: -70.1442960385
Correct output: 143.0911996605 | Program output: 94.0911996605 
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_yank} {:instruction float_mod} {:instruction float_frominteger} {:instruction float_pop} {:instruction float_min} {:instruction print_integer} {:instruction integer_max} {:instruction integer_flush} {:instruction in1} {:instruction float_inc} {:instruction float_div} {:instruction integer_max} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_max} {:instruction integer_yank} {:instruction integer_yank} {:instruction float_inc} {:instruction integer_dup_times} {:instruction integer_dup} {:instruction float_swap} {:instruction float_stackdepth} {:instruction float_rot} {:instruction integer_shove} {:instruction float_inc} {:instruction float_dup_times} {:instruction integer_add} {:instruction float_inc} {:instruction float_dup_times} {:instruction float_inc} {:instruction float_dup_times} {:instruction integer_add} {:instruction integer_shove} {:instruction float_inc} {:instruction float_dup_times} {:instruction integer_add} {:instruction print_float} {:instruction integer_dec} {:instruction float_rot} {:instruction -49} {:instruction in1} {:instruction float_yankdup} {:instruction float_max} {:instruction integer_flush} {:instruction float_dup_times} {:instruction float_div} {:instruction float_mult} {:instruction integer_shove} {:instruction float_dup} {:instruction integer_dup_times})
Best program: (float_yank float_mod float_frominteger float_pop float_min print_integer integer_max integer_flush in1 float_inc float_div integer_max float_inc float_inc float_inc integer_max integer_yank integer_yank float_inc integer_dup_times integer_dup float_swap float_stackdepth float_rot integer_shove float_inc float_dup_times integer_add float_inc float_dup_times float_inc float_dup_times integer_add integer_shove float_inc float_dup_times integer_add print_float integer_dec float_rot -49 in1 float_yankdup float_max integer_flush float_dup_times float_div float_mult integer_shove float_dup integer_dup_times)
Errors: [92.0 11 75.0 2 78.0 2 28.0 2 67.0 2 75.0 3 41.0 2 43.0 11 42.0 2 34.0 2 0.0 0 59.0 3 18.0 2 3.0 1 76.0 2 69.0 2 0.0 0 81.0 9 100.0 13 10.0 1 74.0 3 17.0 2 48.0 2 66.0 3 49.0 2]
Total: 1329.0
Mean: 26.58
Genome size: 51
Size: 52
Percent parens: 0.019
--- Population Statistics ---
Average total errors in population: 3861.4731729000005
Median total errors in population: 1329.0
Error averages by case: (185.80335520000006 11.495 167.13673039999995 3.533 173.9722661 3.229 134.31833770000003 3.428 162.1687414 3.315 176.47159689999998 4.397 142.78463920000002 3.208 140.75120239999995 11.283 143.37849599999996 3.222 137.40815460000002 3.443 107.8150537 1.899 161.33797900000002 4.39 118.68114620000001 3.34 108.5100295 2.453 176.2618791 3.579 166.44099899999995 3.416 106.0446667 1.935 176.84219409999997 9.572 194.05125090000004 13.029 110.3188323 2.352 172.4631263 4.276 115.02811539999999 3.291 148.5943117 3.439 168.22194700000003 4.419 151.17212210000002 3.553)
Error minima by case: (16.4789 7 0.1573 1 0.0627 1 19.0 1 5.2026 1 66.0 2 22.9137 1 21.6022 9 32.2389 1 9.1162 1 0.0 0 47.9988 2 13.0 1 0.0 0 71.0 2 18.9225 1 0.0 0 0.0447 8 19.0192 9 0.2965 1 30.1841 2 12.0 1 4.2985 1 57.0 2 44.0 2)
Average genome size in population (length): 60.831
Average program size in population (points): 61.831
Average percent parens in population: 0.017
Minimum age in population: 32.32017135620117
Maximum age in population: 37.20384168624878
Average age in population: 35.1893824160099
Median age in population: 35.23758345842361
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 7
Genome diversity (% unique Plush genomes):	 0.858
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 7
Syntactic diversity (% unique Push programs):	 0.858
Total error diversity:				 0.058
Error (vector) diversity:			 0.063
Behavioral diversity:				 0.065
--- Run Statistics ---
Number of program evaluations used so far: 25000
Number of point (instruction) evaluations so far: 34575689
--- Timings ---
Current time: 1529616016472 milliseconds
Total Time:          81.0 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        32.9 seconds, 40.7%
Fitness Testing:     37.9 seconds, 46.8%
Report:              10.0 seconds, 12.4%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 24
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 25
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 25
;;******************************
;; -*- Number IO problem report - generation 25
Test total error for best: 55009.0
Test mean error for best: 27.50450
;;------------------------------
Outputs of best individual on training cases:
Correct output: -74.6179542037 | Program output: 17.3820457963 
Correct output: 78.7609586813  | Program output: 3.7609586813  
Correct output: 3.0100598709   | Program output: 81.0100598709 
Correct output: -99.2368061293 | Program output: -71.2368061293
Correct output: 88.6808415603  | Program output: 21.6808415603 
Correct output: -151.1060419578 | Program output: -76.1060419578
Correct output: 56.004616184   | Program output: 97.004616184  
Correct output: 33.520660154   | Program output: -9.479339846  
Correct output: 42.238861085   | Program output: 84.238861085  
Correct output: -49.0227893765 | Program output: -83.0227893765
Correct output: 103.4057483059 | Program output: 103.4057483059
Correct output: -106.1378273779 | Program output: -47.1378273779
Correct output: 37.9625599991  | Program output: 19.9625599991 
Correct output: 71.9208193203  | Program output: 74.9208193203 
Correct output: 173.5348464317 | Program output: 97.5348464317 
Correct output: -77.0615185935 | Program output: -8.0615185935 
Correct output: -20.7643622555 | Program output: -20.7643622555
Correct output: 1.9827630815   | Program output: -79.0172369185
Correct output: -39.1198682611 | Program output: 60.8801317389 
Correct output: 1.1392376036   | Program output: 11.1392376036 
Correct output: 129.1930977679 | Program output: 55.1930977679 
Correct output: 26.7496211861  | Program output: 9.7496211861  
Correct output: -11.2984801384 | Program output: -59.2984801384
Correct output: -136.1442960385 | Program output: -70.1442960385
Correct output: 143.0911996605 | Program output: 94.0911996605 
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_yank} {:instruction float_mod} {:instruction float_frominteger} {:instruction float_yank} {:instruction float_yank} {:instruction float_sub} {:instruction float_mod} {:instruction float_frominteger} {:instruction float_pop} {:instruction float_min} {:instruction float_yank} {:instruction float_sub} {:instruction integer_max} {:instruction in1} {:instruction float_inc} {:instruction float_inc} {:instruction integer_add} {:instruction float_inc} {:instruction integer_add} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_dup_times} {:instruction float_mult} {:instruction integer_shove} {:instruction float_inc} {:instruction float_dup_times} {:instruction float_inc} {:instruction float_dup_times} {:instruction integer_add} {:instruction 25} {:instruction integer_flush} {:instruction float_shove} {:instruction integer_swap} {:instruction float_inc} {:instruction 77.91830066263515} {:instruction integer_inc} {:instruction float_shove} {:instruction integer_yankdup} {:instruction integer_fromfloat} {:instruction integer_add} {:instruction print_float} {:instruction integer_dec} {:instruction float_tan} {:instruction float_rot} {:instruction -49} {:instruction in1} {:instruction float_yankdup} {:instruction float_max} {:instruction integer_flush} {:instruction integer_shove} {:instruction float_div} {:instruction float_mult} {:instruction integer_shove} {:instruction float_dup})
Best program: (float_yank float_mod float_frominteger float_yank float_yank float_sub float_mod float_frominteger float_pop float_min float_yank float_sub integer_max in1 float_inc float_inc integer_add float_inc integer_add float_inc float_inc float_inc float_dup_times float_mult integer_shove float_inc float_dup_times float_inc float_dup_times integer_add 25 integer_flush float_shove integer_swap float_inc 77.91830066263515 integer_inc float_shove integer_yankdup integer_fromfloat integer_add print_float integer_dec float_tan float_rot -49 in1 float_yankdup float_max integer_flush integer_shove float_div float_mult integer_shove float_dup)
Errors: [92.0 11 75.0 2 78.0 2 28.0 2 67.0 2 75.0 3 41.0 2 43.0 11 42.0 2 34.0 2 0.0 0 59.0 3 18.0 2 3.0 1 76.0 2 69.0 2 0.0 0 81.0 9 100.0 13 10.0 1 74.0 3 17.0 2 48.0 2 66.0 3 49.0 2]
Total: 1329.0
Mean: 26.58
Genome size: 55
Size: 56
Percent parens: 0.018
--- Population Statistics ---
Average total errors in population: 3727.7064908000007
Median total errors in population: 1329.0
Error averages by case: (180.5412691999999 11.517 162.90808549999997 3.522 167.31065740000005 3.333 129.1527609 3.55 157.59186410000004 3.387 171.52385880000006 4.474 137.30585680000002 3.281 135.9457725999999 11.322 137.66954119999994 3.292 130.53532550000006 3.527 102.33862580000002 1.973 155.98956389999998 4.484 113.4660072 3.43 103.36991850000005 2.516 170.3902071999999 3.675 161.98802740000005 3.518 99.95901039999998 2.043 169.2679968 9.614 187.60709589999993 13.067 106.62816430000002 2.444 167.72422670000006 4.343 110.86086849999998 3.354 141.2381353 3.509 163.18883600000007 4.492 145.90681489999997 3.631)
Error minima by case: (32.7271 8 0.8427 1 0.5018 1 20.0 1 10.7625 1 16.3057 2 17.6943 1 23.5207 8 16.6943 1 7.1319 1 0.0 0 0.3057 2 0.3163 1 0.0 0 70.0 1 10.3057 1 0.0 0 0.5001 6 2.771 10 0.5672 1 27.3568 2 1.1481 1 1.7015 1 7.3057 2 41.2549 2)
Average genome size in population (length): 60.48
Average program size in population (points): 61.48
Average percent parens in population: 0.017
Minimum age in population: 34.30355072021484
Maximum age in population: 38.53717595338821
Average age in population: 36.60135648590326
Median age in population: 36.63863122463226
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 6
Genome diversity (% unique Plush genomes):	 0.849
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 6
Syntactic diversity (% unique Push programs):	 0.849
Total error diversity:				 0.067
Error (vector) diversity:			 0.073
Behavioral diversity:				 0.075
--- Run Statistics ---
Number of program evaluations used so far: 26000
Number of point (instruction) evaluations so far: 36087789
--- Timings ---
Current time: 1529616019632 milliseconds
Total Time:          84.2 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        34.3 seconds, 40.7%
Fitness Testing:     39.4 seconds, 46.8%
Report:              10.4 seconds, 12.4%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 25
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 26
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 26
;;******************************
;; -*- Number IO problem report - generation 26
Test total error for best: 55009.0
Test mean error for best: 27.50450
;;------------------------------
Outputs of best individual on training cases:
Correct output: -74.6179542037 | Program output: 17.3820457963 
Correct output: 78.7609586813  | Program output: 3.7609586813  
Correct output: 3.0100598709   | Program output: 81.0100598709 
Correct output: -99.2368061293 | Program output: -71.2368061293
Correct output: 88.6808415603  | Program output: 21.6808415603 
Correct output: -151.1060419578 | Program output: -76.1060419578
Correct output: 56.004616184   | Program output: 97.004616184  
Correct output: 33.520660154   | Program output: -9.479339846  
Correct output: 42.238861085   | Program output: 84.238861085  
Correct output: -49.0227893765 | Program output: -83.0227893765
Correct output: 103.4057483059 | Program output: 103.4057483059
Correct output: -106.1378273779 | Program output: -47.1378273779
Correct output: 37.9625599991  | Program output: 19.9625599991 
Correct output: 71.9208193203  | Program output: 74.9208193203 
Correct output: 173.5348464317 | Program output: 97.5348464317 
Correct output: -77.0615185935 | Program output: -8.0615185935 
Correct output: -20.7643622555 | Program output: -20.7643622555
Correct output: 1.9827630815   | Program output: -79.0172369185
Correct output: -39.1198682611 | Program output: 60.8801317389 
Correct output: 1.1392376036   | Program output: 11.1392376036 
Correct output: 129.1930977679 | Program output: 55.1930977679 
Correct output: 26.7496211861  | Program output: 9.7496211861  
Correct output: -11.2984801384 | Program output: -59.2984801384
Correct output: -136.1442960385 | Program output: -70.1442960385
Correct output: 143.0911996605 | Program output: 94.0911996605 
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_yank} {:instruction float_sub} {:instruction float_mod} {:instruction float_frominteger} {:instruction float_pop} {:instruction float_min} {:instruction print_integer} {:instruction float_rot} {:instruction integer_flush} {:instruction in1} {:instruction float_inc} {:instruction float_div} {:instruction integer_add} {:instruction float_inc} {:instruction float_dec} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_max} {:instruction float_rot} {:instruction integer_yank} {:instruction float_inc} {:instruction integer_dup_times} {:instruction integer_dup} {:instruction float_swap} {:instruction integer_min} {:instruction -16} {:instruction integer_pop} {:instruction integer_add} {:instruction float_dup_times} {:instruction integer_add} {:instruction integer_shove} {:instruction float_inc} {:instruction float_dup_times} {:instruction integer_add} {:instruction float_dup_items} {:instruction float_inc} {:instruction float_sub} {:instruction float_rot} {:instruction integer_shove} {:instruction float_inc} {:instruction integer_swap} {:instruction integer_add} {:instruction print_float} {:instruction integer_dec} {:instruction float_tan} {:instruction integer_flush} {:instruction float_dup_times} {:instruction float_div} {:instruction float_dup_items} {:instruction integer_shove} {:instruction float_dup} {:instruction integer_dup_times} {:instruction integer_dup} {:instruction float_frominteger})
Best program: (float_yank float_sub float_mod float_frominteger float_pop float_min print_integer float_rot integer_flush in1 float_inc float_div integer_add float_inc float_dec float_inc float_inc float_inc float_inc integer_max float_rot integer_yank float_inc integer_dup_times integer_dup float_swap integer_min -16 integer_pop integer_add float_dup_times integer_add integer_shove float_inc float_dup_times integer_add float_dup_items float_inc float_sub float_rot integer_shove float_inc integer_swap integer_add print_float integer_dec float_tan integer_flush float_dup_times float_div float_dup_items integer_shove float_dup integer_dup_times integer_dup float_frominteger)
Errors: [92.0 11 75.0 2 78.0 2 28.0 2 67.0 2 75.0 3 41.0 2 43.0 11 42.0 2 34.0 2 0.0 0 59.0 3 18.0 2 3.0 1 76.0 2 69.0 2 0.0 0 81.0 9 100.0 13 10.0 1 74.0 3 17.0 2 48.0 2 66.0 3 49.0 2]
Total: 1329.0
Mean: 26.58
Genome size: 56
Size: 57
Percent parens: 0.018
--- Population Statistics ---
Average total errors in population: 3569.329717600001
Median total errors in population: 1329.0
Error averages by case: (176.9481249 11.526 159.13065210000002 3.483 163.0824079 3.183 121.33036750000001 3.374 152.28960080000002 3.234 163.71384569999998 4.336 131.39898920000002 3.149 130.04528869999996 11.31 132.00260589999996 3.164 122.91503450000002 3.375 93.92886440000002 1.832 148.68030800000003 4.352 108.0033207 3.25 95.35539930000003 2.37 163.19575180000004 3.518 156.76767230000004 3.388 92.3877856 1.859 163.3001787 9.577 183.27923810000001 13.051 103.0904468 2.306 159.4890166000001 4.211 106.92913449999999 3.216 134.3775405 3.334 155.60988580000003 4.36 137.83325729999999 3.487)
Error minima by case: (2.382 9 0.1573 1 0.5956 1 12.0031 1 6.6808 1 10.106 2 22.9137 1 21.6022 8 31.2389 1 27.0 1 0.0 0 2.8622 2 4.9626 1 0.0 0 12.5348 1 10.1722 1 0.0 0 0.6682 7 21.6533 9 0.5794 1 27.8069 2 5.2504 1 6.1681 1 13.1443 2 36.0912 2)
Average genome size in population (length): 60.334
Average program size in population (points): 61.334
Average percent parens in population: 0.017
Minimum age in population: 35.53142929077148
Maximum age in population: 39.88694566488266
Average age in population: 38.0306705391109
Median age in population: 38.08658803999424
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 5
Genome diversity (% unique Plush genomes):	 0.857
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 5
Syntactic diversity (% unique Push programs):	 0.857
Total error diversity:				 0.052
Error (vector) diversity:			 0.059
Behavioral diversity:				 0.061
--- Run Statistics ---
Number of program evaluations used so far: 27000
Number of point (instruction) evaluations so far: 37596164
--- Timings ---
Current time: 1529616022813 milliseconds
Total Time:          87.4 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        35.6 seconds, 40.7%
Fitness Testing:     40.9 seconds, 46.8%
Report:              10.8 seconds, 12.4%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 26
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 27
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 27
;;******************************
;; -*- Number IO problem report - generation 27
Test total error for best: 55009.0
Test mean error for best: 27.50450
;;------------------------------
Outputs of best individual on training cases:
Correct output: -74.6179542037 | Program output: 17.3820457963 
Correct output: 78.7609586813  | Program output: 3.7609586813  
Correct output: 3.0100598709   | Program output: 81.0100598709 
Correct output: -99.2368061293 | Program output: -71.2368061293
Correct output: 88.6808415603  | Program output: 21.6808415603 
Correct output: -151.1060419578 | Program output: -76.1060419578
Correct output: 56.004616184   | Program output: 97.004616184  
Correct output: 33.520660154   | Program output: -9.479339846  
Correct output: 42.238861085   | Program output: 84.238861085  
Correct output: -49.0227893765 | Program output: -83.0227893765
Correct output: 103.4057483059 | Program output: 103.4057483059
Correct output: -106.1378273779 | Program output: -47.1378273779
Correct output: 37.9625599991  | Program output: 19.9625599991 
Correct output: 71.9208193203  | Program output: 74.9208193203 
Correct output: 173.5348464317 | Program output: 97.5348464317 
Correct output: -77.0615185935 | Program output: -8.0615185935 
Correct output: -20.7643622555 | Program output: -20.7643622555
Correct output: 1.9827630815   | Program output: -79.0172369185
Correct output: -39.1198682611 | Program output: 60.8801317389 
Correct output: 1.1392376036   | Program output: 11.1392376036 
Correct output: 129.1930977679 | Program output: 55.1930977679 
Correct output: 26.7496211861  | Program output: 9.7496211861  
Correct output: -11.2984801384 | Program output: -59.2984801384
Correct output: -136.1442960385 | Program output: -70.1442960385
Correct output: 143.0911996605 | Program output: 94.0911996605 
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction print_float} {:instruction integer_mult} {:instruction integer_rot} {:instruction float_yank} {:instruction float_mod} {:instruction print_float} {:instruction float_rot} {:instruction float_min} {:instruction print_integer} {:instruction float_dup} {:instruction integer_flush} {:instruction in1} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_max} {:instruction integer_yank} {:instruction integer_yank} {:instruction float_inc} {:instruction integer_shove} {:instruction float_inc} {:instruction float_dup_times} {:instruction float_rot} {:instruction integer_shove} {:instruction float_inc} {:instruction float_dup_times} {:instruction integer_add} {:instruction float_inc} {:instruction float_dup_times} {:instruction float_inc} {:instruction float_dup_times} {:instruction integer_add} {:instruction integer_shove} {:instruction float_inc} {:instruction float_dup_times} {:instruction float_min} {:instruction print_float} {:instruction integer_dec} {:instruction float_rot} {:instruction -49} {:instruction in1} {:instruction float_yankdup} {:instruction float_max} {:instruction integer_flush} {:instruction float_dup_times} {:instruction float_div} {:instruction float_mult} {:instruction integer_shove} {:instruction float_dup} {:instruction integer_dup_times} {:instruction integer_shove} {:instruction float_dup} {:instruction integer_dup_times} {:instruction integer_dup} {:instruction float_mod} {:instruction integer_stackdepth} {:instruction integer_min} {:instruction float_sub} {:instruction tagged_690} {:instruction tagged_690})
Best program: (print_float integer_mult integer_rot float_yank float_mod print_float float_rot float_min print_integer float_dup integer_flush in1 float_inc float_inc float_inc integer_max integer_yank integer_yank float_inc integer_shove float_inc float_dup_times float_rot integer_shove float_inc float_dup_times integer_add float_inc float_dup_times float_inc float_dup_times integer_add integer_shove float_inc float_dup_times float_min print_float integer_dec float_rot -49 in1 float_yankdup float_max integer_flush float_dup_times float_div float_mult integer_shove float_dup integer_dup_times integer_shove float_dup integer_dup_times integer_dup float_mod integer_stackdepth integer_min float_sub tagged_690 tagged_690)
Errors: [92.0 11 75.0 2 78.0 2 28.0 2 67.0 2 75.0 3 41.0 2 43.0 11 42.0 2 34.0 2 0.0 0 59.0 3 18.0 2 3.0 1 76.0 2 69.0 2 0.0 0 81.0 9 100.0 13 10.0 1 74.0 3 17.0 2 48.0 2 66.0 3 49.0 2]
Total: 1329.0
Mean: 26.58
Genome size: 60
Size: 61
Percent parens: 0.016
--- Population Statistics ---
Average total errors in population: 3774.7541223000003
Median total errors in population: 1329.0
Error averages by case: (183.5689614 11.498 165.3946167 3.522 170.0613317 3.279 132.8213119 3.496 158.15422999999998 3.338 174.75546810000003 4.469 139.09504719999998 3.238 138.7360969 11.286 139.59429199999994 3.269 133.2148994 3.474 101.49256600000002 1.94 159.561566 4.473 114.2964535 3.354 102.3029573 2.471 170.19082989999998 3.618 166.42684350000007 3.514 102.42110790000002 1.959 172.54899269999999 9.553 190.15218759999996 13.005 109.41948309999997 2.419 166.26046579999996 4.286 112.26530659999995 3.324 144.15732969999996 3.448 166.54556530000008 4.468 145.02921209999997 3.586)
Error minima by case: (7.0 2 0.1573 1 0.873 1 8.9564 1 7.7625 1 3.9183 1 4.0436 1 0.1228 8 0.6001 1 27.0 1 0.0 0 5.8622 2 4.0374 1 0.0 0 15.5348 2 9.9183 1 0.0 0 0.0129 6 3.3421 2 0.1392 1 17.4885 2 10.0 1 11.2924 1 10.1443 2 31.3866 2)
Average genome size in population (length): 60.86
Average program size in population (points): 61.86
Average percent parens in population: 0.017
Minimum age in population: 36.92010354995728
Maximum age in population: 41.49896042048931
Average age in population: 39.45947357942164
Median age in population: 39.49563553929329
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 5
Genome diversity (% unique Plush genomes):	 0.863
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 5
Syntactic diversity (% unique Push programs):	 0.863
Total error diversity:				 0.06
Error (vector) diversity:			 0.064
Behavioral diversity:				 0.066
--- Run Statistics ---
Number of program evaluations used so far: 28000
Number of point (instruction) evaluations so far: 39117739
--- Timings ---
Current time: 1529616026057 milliseconds
Total Time:          90.6 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        36.9 seconds, 40.7%
Fitness Testing:     42.4 seconds, 46.8%
Report:              11.2 seconds, 12.4%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 27
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 28
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 28
;;******************************
;; -*- Number IO problem report - generation 28
Test total error for best: 55009.0
Test mean error for best: 27.50450
;;------------------------------
Outputs of best individual on training cases:
Correct output: -74.6179542037 | Program output: 17.3820457963 
Correct output: 78.7609586813  | Program output: 3.7609586813  
Correct output: 3.0100598709   | Program output: 81.0100598709 
Correct output: -99.2368061293 | Program output: -71.2368061293
Correct output: 88.6808415603  | Program output: 21.6808415603 
Correct output: -151.1060419578 | Program output: -76.1060419578
Correct output: 56.004616184   | Program output: 97.004616184  
Correct output: 33.520660154   | Program output: -9.479339846  
Correct output: 42.238861085   | Program output: 84.238861085  
Correct output: -49.0227893765 | Program output: -83.0227893765
Correct output: 103.4057483059 | Program output: 103.4057483059
Correct output: -106.1378273779 | Program output: -47.1378273779
Correct output: 37.9625599991  | Program output: 19.9625599991 
Correct output: 71.9208193203  | Program output: 74.9208193203 
Correct output: 173.5348464317 | Program output: 97.5348464317 
Correct output: -77.0615185935 | Program output: -8.0615185935 
Correct output: -20.7643622555 | Program output: -20.7643622555
Correct output: 1.9827630815   | Program output: -79.0172369185
Correct output: -39.1198682611 | Program output: 60.8801317389 
Correct output: 1.1392376036   | Program output: 11.1392376036 
Correct output: 129.1930977679 | Program output: 55.1930977679 
Correct output: 26.7496211861  | Program output: 9.7496211861  
Correct output: -11.2984801384 | Program output: -59.2984801384
Correct output: -136.1442960385 | Program output: -70.1442960385
Correct output: 143.0911996605 | Program output: 94.0911996605 
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_yank} {:instruction float_sub} {:instruction float_mod} {:instruction float_frominteger} {:instruction float_pop} {:instruction float_min} {:instruction print_integer} {:instruction integer_max} {:instruction integer_flush} {:instruction in1} {:instruction float_inc} {:instruction float_inc} {:instruction integer_add} {:instruction float_inc} {:instruction integer_add} {:instruction float_inc} {:instruction float_inc} {:instruction integer_max} {:instruction integer_yank} {:instruction integer_yank} {:instruction float_inc} {:instruction integer_dup_times} {:instruction integer_dup} {:instruction float_swap} {:instruction integer_min} {:instruction -16} {:instruction integer_pop} {:instruction -16} {:instruction integer_pop} {:instruction integer_shove} {:instruction float_inc} {:instruction float_dup_times} {:instruction float_rot} {:instruction integer_shove} {:instruction float_inc} {:instruction float_inc} {:instruction float_dup_times} {:instruction integer_add} {:instruction print_float} {:instruction integer_dec} {:instruction float_tan} {:instruction integer_shove} {:instruction float_dup} {:instruction integer_dup_times} {:instruction integer_dup} {:instruction float_yankdup} {:instruction float_max} {:instruction float_dup} {:instruction integer_dup_times} {:instruction integer_dup} {:instruction integer_swap} {:instruction float_dup})
Best program: (float_yank float_sub float_mod float_frominteger float_pop float_min print_integer integer_max integer_flush in1 float_inc float_inc integer_add float_inc integer_add float_inc float_inc integer_max integer_yank integer_yank float_inc integer_dup_times integer_dup float_swap integer_min -16 integer_pop -16 integer_pop integer_shove float_inc float_dup_times float_rot integer_shove float_inc float_inc float_dup_times integer_add print_float integer_dec float_tan integer_shove float_dup integer_dup_times integer_dup float_yankdup float_max float_dup integer_dup_times integer_dup integer_swap float_dup)
Errors: [92.0 11 75.0 2 78.0 2 28.0 2 67.0 2 75.0 3 41.0 2 43.0 11 42.0 2 34.0 2 0.0 0 59.0 3 18.0 2 3.0 1 76.0 2 69.0 2 0.0 0 81.0 9 100.0 13 10.0 1 74.0 3 17.0 2 48.0 2 66.0 3 49.0 2]
Total: 1329.0
Mean: 26.58
Genome size: 52
Size: 53
Percent parens: 0.019
--- Population Statistics ---
Average total errors in population: 3672.057998200001
Median total errors in population: 1329.0
Error averages by case: (177.7471542 11.486 160.92829949999998 3.409 166.79981709999998 3.212 127.33520340000001 3.407 153.74310920000005 3.291 169.74208120000006 4.385 135.421883 3.196 133.24770339999995 11.269 135.93863679999995 3.218 129.69315410000004 3.42 99.11175010000002 1.833 155.44886589999996 4.392 109.76437059999999 3.31 100.43851670000002 2.419 167.17795069999994 3.554 159.31099999999998 3.414 97.6976873 1.859 169.76717980000004 9.551 186.98220740000005 13.045 103.38198689999997 2.351 163.99003130000003 4.248 107.93807379999998 3.279 141.09740690000004 3.398 161.46473530000006 4.399 143.0461936 3.498)
Error minima by case: (0.382 9 0.8427 1 0.127 1 19.0 1 4.6808 1 4.9183 2 21.9137 1 24.5207 8 33.0 1 29.0 1 0.0 0 20.9183 2 2.9626 1 0.0 0 20.0 1 10.9183 1 0.0 0 0.1953 8 20.0817 7 1.0 1 22.0 2 3.2005 1 1.7335 1 13.9183 2 44.0 2)
Average genome size in population (length): 60.576
Average program size in population (points): 61.576
Average percent parens in population: 0.017
Minimum age in population: 37.92010354995728
Maximum age in population: 42.93655863404274
Average age in population: 40.87004182038456
Median age in population: 40.8748741671443
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 6
Genome diversity (% unique Plush genomes):	 0.844
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 6
Syntactic diversity (% unique Push programs):	 0.844
Total error diversity:				 0.055
Error (vector) diversity:			 0.057
Behavioral diversity:				 0.057
--- Run Statistics ---
Number of program evaluations used so far: 29000
Number of point (instruction) evaluations so far: 40632139
--- Timings ---
Current time: 1529616029208 milliseconds
Total Time:          93.8 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        38.3 seconds, 40.8%
Fitness Testing:     43.8 seconds, 46.7%
Report:              11.6 seconds, 12.4%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 28
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 29
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 29
;;******************************
;; -*- Number IO problem report - generation 29
Test total error for best: 55009.0
Test mean error for best: 27.50450
;;------------------------------
Outputs of best individual on training cases:
Correct output: -74.6179542037 | Program output: 17.3820457963 
Correct output: 78.7609586813  | Program output: 3.7609586813  
Correct output: 3.0100598709   | Program output: 81.0100598709 
Correct output: -99.2368061293 | Program output: -71.2368061293
Correct output: 88.6808415603  | Program output: 21.6808415603 
Correct output: -151.1060419578 | Program output: -76.1060419578
Correct output: 56.004616184   | Program output: 97.004616184  
Correct output: 33.520660154   | Program output: -9.479339846  
Correct output: 42.238861085   | Program output: 84.238861085  
Correct output: -49.0227893765 | Program output: -83.0227893765
Correct output: 103.4057483059 | Program output: 103.4057483059
Correct output: -106.1378273779 | Program output: -47.1378273779
Correct output: 37.9625599991  | Program output: 19.9625599991 
Correct output: 71.9208193203  | Program output: 74.9208193203 
Correct output: 173.5348464317 | Program output: 97.5348464317 
Correct output: -77.0615185935 | Program output: -8.0615185935 
Correct output: -20.7643622555 | Program output: -20.7643622555
Correct output: 1.9827630815   | Program output: -79.0172369185
Correct output: -39.1198682611 | Program output: 60.8801317389 
Correct output: 1.1392376036   | Program output: 11.1392376036 
Correct output: 129.1930977679 | Program output: 55.1930977679 
Correct output: 26.7496211861  | Program output: 9.7496211861  
Correct output: -11.2984801384 | Program output: -59.2984801384
Correct output: -136.1442960385 | Program output: -70.1442960385
Correct output: 143.0911996605 | Program output: 94.0911996605 
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_yank} {:instruction float_sub} {:instruction tagged_384} {:instruction float_frominteger} {:instruction float_pop} {:instruction float_min} {:instruction print_integer} {:instruction integer_max} {:instruction integer_flush} {:instruction in1} {:instruction float_inc} {:instruction integer_add} {:instruction integer_max} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_max} {:instruction float_inc} {:instruction integer_add} {:instruction float_inc} {:instruction integer_dup} {:instruction float_inc} {:instruction float_inc} {:instruction integer_max} {:instruction integer_yank} {:instruction float_rot} {:instruction integer_add} {:instruction integer_shove} {:instruction float_inc} {:instruction float_dup_times} {:instruction integer_add} {:instruction print_float} {:instruction integer_dec} {:instruction float_rot} {:instruction -49} {:instruction in1} {:instruction integer_pop} {:instruction float_mod} {:instruction integer_flush} {:instruction float_dup_times} {:instruction float_div} {:instruction float_mult} {:instruction integer_shove} {:instruction float_dup} {:instruction integer_dup_times} {:instruction integer_shove} {:instruction float_dup} {:instruction integer_dup_times} {:instruction integer_dup} {:instruction float_mod} {:instruction integer_stackdepth} {:instruction integer_min})
Best program: (float_yank float_sub tagged_384 float_frominteger float_pop float_min print_integer integer_max integer_flush in1 float_inc integer_add integer_max float_inc float_inc float_inc integer_max float_inc integer_add float_inc integer_dup float_inc float_inc integer_max integer_yank float_rot integer_add integer_shove float_inc float_dup_times integer_add print_float integer_dec float_rot -49 in1 integer_pop float_mod integer_flush float_dup_times float_div float_mult integer_shove float_dup integer_dup_times integer_shove float_dup integer_dup_times integer_dup float_mod integer_stackdepth integer_min)
Errors: [92.0 11 75.0 2 78.0 2 28.0 2 67.0 2 75.0 3 41.0 2 43.0 11 42.0 2 34.0 2 0.0 0 59.0 3 18.0 2 3.0 1 76.0 2 69.0 2 0.0 0 81.0 9 100.0 13 10.0 1 74.0 3 17.0 2 48.0 2 66.0 3 49.0 2]
Total: 1329.0
Mean: 26.58
Genome size: 52
Size: 53
Percent parens: 0.019
--- Population Statistics ---
Average total errors in population: 3600.511099700001
Median total errors in population: 1329.0
Error averages by case: (177.23671720000004 11.529 158.92267569999998 3.469 163.9145822 3.228 123.85373059999999 3.403 152.24211430000003 3.281 166.22867169999998 4.359 132.5329438 3.188 131.02936439999996 11.295 133.08519869999995 3.206 125.18020820000002 3.399 95.36470540000002 1.882 150.94846699999994 4.375 108.1821779 3.295 96.65801290000002 2.412 164.97074859999998 3.568 158.12842690000002 3.392 94.3262068 1.907 164.9499308 9.58 184.1368915 13.04 103.1936332 2.337 160.34917700000005 4.232 106.93968099999998 3.263 136.28574980000002 3.371 157.9591766 4.398 138.9549075 3.528)
Error minima by case: (2.382 9 0.1573 1 0.0101 1 13.2448 1 6.6808 1 10.106 2 0.2448 1 3.1228 8 0.7552 1 27.0 1 0.0 0 1.8622 2 4.9626 1 0.0 0 8.9183 2 23.0615 1 0.0 0 0.0172 8 6.3421 10 0.1424 1 10.9183 2 5.2504 1 4.2985 1 13.1443 2 35.0912 2)
Average genome size in population (length): 60.229
Average program size in population (points): 61.229
Average percent parens in population: 0.017
Minimum age in population: 40.02919226884842
Maximum age in population: 44.39179434627295
Average age in population: 42.25873888483271
Median age in population: 42.31285591982305
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 7
Genome diversity (% unique Plush genomes):	 0.859
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 7
Syntactic diversity (% unique Push programs):	 0.859
Total error diversity:				 0.06
Error (vector) diversity:			 0.067
Behavioral diversity:				 0.068
--- Run Statistics ---
Number of program evaluations used so far: 30000
Number of point (instruction) evaluations so far: 42137889
--- Timings ---
Current time: 1529616032335 milliseconds
Total Time:          96.9 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        39.6 seconds, 40.8%
Fitness Testing:     45.3 seconds, 46.7%
Report:              11.9 seconds, 12.3%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 29
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 30
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 30
;;******************************
;; -*- Number IO problem report - generation 30
Test total error for best: 55009.0
Test mean error for best: 27.50450
;;------------------------------
Outputs of best individual on training cases:
Correct output: -74.6179542037 | Program output: 17.3820457963 
Correct output: 78.7609586813  | Program output: 3.7609586813  
Correct output: 3.0100598709   | Program output: 81.0100598709 
Correct output: -99.2368061293 | Program output: -71.2368061293
Correct output: 88.6808415603  | Program output: 21.6808415603 
Correct output: -151.1060419578 | Program output: -76.1060419578
Correct output: 56.004616184   | Program output: 97.004616184  
Correct output: 33.520660154   | Program output: -9.479339846  
Correct output: 42.238861085   | Program output: 84.238861085  
Correct output: -49.0227893765 | Program output: -83.0227893765
Correct output: 103.4057483059 | Program output: 103.4057483059
Correct output: -106.1378273779 | Program output: -47.1378273779
Correct output: 37.9625599991  | Program output: 19.9625599991 
Correct output: 71.9208193203  | Program output: 74.9208193203 
Correct output: 173.5348464317 | Program output: 97.5348464317 
Correct output: -77.0615185935 | Program output: -8.0615185935 
Correct output: -20.7643622555 | Program output: -20.7643622555
Correct output: 1.9827630815   | Program output: -79.0172369185
Correct output: -39.1198682611 | Program output: 60.8801317389 
Correct output: 1.1392376036   | Program output: 11.1392376036 
Correct output: 129.1930977679 | Program output: 55.1930977679 
Correct output: 26.7496211861  | Program output: 9.7496211861  
Correct output: -11.2984801384 | Program output: -59.2984801384
Correct output: -136.1442960385 | Program output: -70.1442960385
Correct output: 143.0911996605 | Program output: 94.0911996605 
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_yank} {:instruction float_sub} {:instruction integer_mult} {:instruction float_frominteger} {:instruction float_pop} {:instruction float_min} {:instruction print_integer} {:instruction integer_max} {:instruction float_min} {:instruction print_integer} {:instruction integer_max} {:instruction integer_flush} {:instruction in1} {:instruction float_inc} {:instruction float_inc} {:instruction integer_add} {:instruction float_inc} {:instruction integer_add} {:instruction float_inc} {:instruction float_inc} {:instruction integer_max} {:instruction integer_yank} {:instruction float_rot} {:instruction integer_shove} {:instruction float_inc} {:instruction float_dup_times} {:instruction integer_add} {:instruction float_inc} {:instruction float_dup_times} {:instruction float_inc} {:instruction float_dup_times} {:instruction integer_add} {:instruction integer_shove} {:instruction float_inc} {:instruction float_dup_times} {:instruction integer_add} {:instruction print_float} {:instruction integer_dec} {:instruction float_max} {:instruction -49} {:instruction float_tan} {:instruction integer_flush} {:instruction -49} {:instruction in1} {:instruction float_yankdup} {:instruction float_max} {:instruction tag_float_422})
Best program: (float_yank float_sub integer_mult float_frominteger float_pop float_min print_integer integer_max float_min print_integer integer_max integer_flush in1 float_inc float_inc integer_add float_inc integer_add float_inc float_inc integer_max integer_yank float_rot integer_shove float_inc float_dup_times integer_add float_inc float_dup_times float_inc float_dup_times integer_add integer_shove float_inc float_dup_times integer_add print_float integer_dec float_max -49 float_tan integer_flush -49 in1 float_yankdup float_max tag_float_422)
Errors: [92.0 11 75.0 2 78.0 2 28.0 2 67.0 2 75.0 3 41.0 2 43.0 11 42.0 2 34.0 2 0.0 0 59.0 3 18.0 2 3.0 1 76.0 2 69.0 2 0.0 0 81.0 9 100.0 13 10.0 1 74.0 3 17.0 2 48.0 2 66.0 3 49.0 2]
Total: 1329.0
Mean: 26.58
Genome size: 47
Size: 48
Percent parens: 0.021
--- Population Statistics ---
Average total errors in population: 4203.470394
Median total errors in population: 1329.0
Error averages by case: (199.33265080000007 11.615 181.9491441 3.628 187.3363985 3.363 145.6920609 3.57 177.51597700000002 3.467 186.93209060000004 4.518 155.66545590000004 3.315 156.92748219999996 11.395 156.39846059999996 3.339 150.7879033 3.6 121.8828847 2.059 172.4673466 4.522 134.75196480000002 3.465 122.85263660000001 2.602 187.25794319999997 3.726 179.6288703 3.55 120.78162879999998 2.087 190.8802585 9.694 206.7813705 13.126 127.15201309999999 2.496 184.90543800000003 4.427 131.80109009999998 3.441 162.43785649999995 3.578 178.96439400000003 4.536 163.57507439999998 3.693)
Error minima by case: (19.8268 8 0.8427 1 0.6115 1 1.6247 1 3.3594 1 9.106 2 21.9137 1 24.4634 8 33.1995 1 29.0 1 0.0 0 0.1378 2 6.0374 1 0.0 0 9.5348 2 17.3833 1 0.0 0 0.5001 6 39.1199 10 0.4086 1 26.8069 2 3.0 1 11.2985 1 12.1443 2 33.0912 2)
Average genome size in population (length): 59.682
Average program size in population (points): 60.682
Average percent parens in population: 0.017
Minimum age in population: 41.02919226884842
Maximum age in population: 45.79405164904892
Average age in population: 43.68949037638679
Median age in population: 43.72882647998631
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 7
Genome diversity (% unique Plush genomes):	 0.853
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 7
Syntactic diversity (% unique Push programs):	 0.853
Total error diversity:				 0.053
Error (vector) diversity:			 0.059
Behavioral diversity:				 0.061
--- Run Statistics ---
Number of program evaluations used so far: 31000
Number of point (instruction) evaluations so far: 43630014
--- Timings ---
Current time: 1529616035519 milliseconds
Total Time:         100.1 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        40.9 seconds, 40.9%
Fitness Testing:     46.7 seconds, 46.7%
Report:              12.3 seconds, 12.3%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 30
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 31
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 31
;;******************************
;; -*- Number IO problem report - generation 31
Test total error for best: 55009.0
Test mean error for best: 27.50450
;;------------------------------
Outputs of best individual on training cases:
Correct output: -74.6179542037 | Program output: 17.3820457963 
Correct output: 78.7609586813  | Program output: 3.7609586813  
Correct output: 3.0100598709   | Program output: 81.0100598709 
Correct output: -99.2368061293 | Program output: -71.2368061293
Correct output: 88.6808415603  | Program output: 21.6808415603 
Correct output: -151.1060419578 | Program output: -76.1060419578
Correct output: 56.004616184   | Program output: 97.004616184  
Correct output: 33.520660154   | Program output: -9.479339846  
Correct output: 42.238861085   | Program output: 84.238861085  
Correct output: -49.0227893765 | Program output: -83.0227893765
Correct output: 103.4057483059 | Program output: 103.4057483059
Correct output: -106.1378273779 | Program output: -47.1378273779
Correct output: 37.9625599991  | Program output: 19.9625599991 
Correct output: 71.9208193203  | Program output: 74.9208193203 
Correct output: 173.5348464317 | Program output: 97.5348464317 
Correct output: -77.0615185935 | Program output: -8.0615185935 
Correct output: -20.7643622555 | Program output: -20.7643622555
Correct output: 1.9827630815   | Program output: -79.0172369185
Correct output: -39.1198682611 | Program output: 60.8801317389 
Correct output: 1.1392376036   | Program output: 11.1392376036 
Correct output: 129.1930977679 | Program output: 55.1930977679 
Correct output: 26.7496211861  | Program output: 9.7496211861  
Correct output: -11.2984801384 | Program output: -59.2984801384
Correct output: -136.1442960385 | Program output: -70.1442960385
Correct output: 143.0911996605 | Program output: 94.0911996605 
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction print_float} {:instruction float_mult} {:instruction float_flush} {:instruction float_yank} {:instruction float_mod} {:instruction integer_min} {:instruction float_pop} {:instruction integer_flush} {:instruction in1} {:instruction float_inc} {:instruction integer_rot} {:instruction float_flush} {:instruction float_min} {:instruction print_integer} {:instruction integer_max} {:instruction integer_flush} {:instruction in1} {:instruction float_inc} {:instruction float_inc} {:instruction integer_add} {:instruction float_inc} {:instruction float_add} {:instruction float_inc} {:instruction float_inc} {:instruction integer_max} {:instruction integer_yank} {:instruction integer_yank} {:instruction float_inc} {:instruction integer_dup_times} {:instruction integer_dup} {:instruction float_swap} {:instruction integer_min} {:instruction -16} {:instruction integer_pop} {:instruction -16} {:instruction integer_pop} {:instruction -16} {:instruction integer_pop} {:instruction integer_add} {:instruction in2} {:instruction integer_pop} {:instruction integer_shove} {:instruction float_inc} {:instruction integer_mult} {:instruction float_rot} {:instruction integer_shove} {:instruction float_inc} {:instruction float_inc} {:instruction float_dup_times} {:instruction integer_add} {:instruction print_float} {:instruction float_tan} {:instruction float_tan} {:instruction integer_shove} {:instruction float_dup} {:instruction integer_stackdepth} {:instruction integer_min} {:instruction float_max} {:instruction integer_flush} {:instruction float_dup_times} {:instruction float_div} {:instruction tag_integer_646} {:instruction integer_shove} {:instruction float_dup} {:instruction integer_dup_times} {:instruction integer_dup} {:instruction integer_stackdepth} {:instruction integer_stackdepth} {:instruction integer_min} {:instruction float_sub} {:instruction tagged_690})
Best program: (print_float float_mult float_flush float_yank float_mod integer_min float_pop integer_flush in1 float_inc integer_rot float_flush float_min print_integer integer_max integer_flush in1 float_inc float_inc integer_add float_inc float_add float_inc float_inc integer_max integer_yank integer_yank float_inc integer_dup_times integer_dup float_swap integer_min -16 integer_pop -16 integer_pop -16 integer_pop integer_add in2 integer_pop integer_shove float_inc integer_mult float_rot integer_shove float_inc float_inc float_dup_times integer_add print_float float_tan float_tan integer_shove float_dup integer_stackdepth integer_min float_max integer_flush float_dup_times float_div tag_integer_646 integer_shove float_dup integer_dup_times integer_dup integer_stackdepth integer_stackdepth integer_min float_sub tagged_690)
Errors: [92.0 11 75.0 2 78.0 2 28.0 2 67.0 2 75.0 3 41.0 2 43.0 11 42.0 2 34.0 2 0.0 0 59.0 3 18.0 2 3.0 1 76.0 2 69.0 2 0.0 0 81.0 9 100.0 13 10.0 1 74.0 3 17.0 2 48.0 2 66.0 3 49.0 2]
Total: 1329.0
Mean: 26.58
Genome size: 71
Size: 72
Percent parens: 0.014
--- Population Statistics ---
Average total errors in population: 3371.0904597999997
Median total errors in population: 1329.0
Error averages by case: (170.5083777 11.437 150.82752669999996 3.274 156.5514605 3.094 114.3090851 3.271 144.10722209999994 3.126 157.19211360000003 4.237 124.88675870000003 3.049 121.45460220000001 11.284 125.39362919999998 3.085 114.18869470000001 3.225 85.13160399999998 1.623 141.91359730000002 4.232 98.8830482 3.137 86.58263630000002 2.254 153.84299469999996 3.366 149.9730219 3.263 82.94896059999998 1.63 155.19023729999998 9.519 176.56569159999995 13.027 96.1462783 2.21 151.3518473 4.103 97.84153119999999 3.133 125.6045677 3.215 148.8662561 4.227 129.48471679999994 3.323)
Error minima by case: (13.0817 9 0.1573 1 0.8058 1 5.224 1 9.7625 1 3.9183 2 12.0046 1 8.0413 8 1.7611 1 5.8677 1 0.0 0 2.8622 2 0.3163 1 0.0 0 12.5348 1 9.9183 1 0.0 0 0.9871 7 4.0352 10 1.1392 1 26.8069 2 11.0 1 6.2985 1 12.1443 2 36.0912 2)
Average genome size in population (length): 60.063
Average program size in population (points): 61.063
Average percent parens in population: 0.017
Minimum age in population: 42.12598064541817
Maximum age in population: 47.18415790610015
Average age in population: 45.12468105568737
Median age in population: 45.17707507638261
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 9
Genome diversity (% unique Plush genomes):	 0.831
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 9
Syntactic diversity (% unique Push programs):	 0.831
Total error diversity:				 0.058
Error (vector) diversity:			 0.063
Behavioral diversity:				 0.064
--- Run Statistics ---
Number of program evaluations used so far: 32000
Number of point (instruction) evaluations so far: 45131714
--- Timings ---
Current time: 1529616038754 milliseconds
Total Time:         103.3 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        42.2 seconds, 40.9%
Fitness Testing:     48.2 seconds, 46.7%
Report:              12.7 seconds, 12.3%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 31
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 32
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 32
;;******************************
;; -*- Number IO problem report - generation 32
Test total error for best: 55009.0
Test mean error for best: 27.50450
;;------------------------------
Outputs of best individual on training cases:
Correct output: -74.6179542037 | Program output: 17.3820457963 
Correct output: 78.7609586813  | Program output: 3.7609586813  
Correct output: 3.0100598709   | Program output: 81.0100598709 
Correct output: -99.2368061293 | Program output: -71.2368061293
Correct output: 88.6808415603  | Program output: 21.6808415603 
Correct output: -151.1060419578 | Program output: -76.1060419578
Correct output: 56.004616184   | Program output: 97.004616184  
Correct output: 33.520660154   | Program output: -9.479339846  
Correct output: 42.238861085   | Program output: 84.238861085  
Correct output: -49.0227893765 | Program output: -83.0227893765
Correct output: 103.4057483059 | Program output: 103.4057483059
Correct output: -106.1378273779 | Program output: -47.1378273779
Correct output: 37.9625599991  | Program output: 19.9625599991 
Correct output: 71.9208193203  | Program output: 74.9208193203 
Correct output: 173.5348464317 | Program output: 97.5348464317 
Correct output: -77.0615185935 | Program output: -8.0615185935 
Correct output: -20.7643622555 | Program output: -20.7643622555
Correct output: 1.9827630815   | Program output: -79.0172369185
Correct output: -39.1198682611 | Program output: 60.8801317389 
Correct output: 1.1392376036   | Program output: 11.1392376036 
Correct output: 129.1930977679 | Program output: 55.1930977679 
Correct output: 26.7496211861  | Program output: 9.7496211861  
Correct output: -11.2984801384 | Program output: -59.2984801384
Correct output: -136.1442960385 | Program output: -70.1442960385
Correct output: 143.0911996605 | Program output: 94.0911996605 
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_yank} {:instruction float_sub} {:instruction float_mod} {:instruction float_frominteger} {:instruction float_pop} {:instruction float_tan} {:instruction float_add} {:instruction integer_dup_items} {:instruction in1} {:instruction float_inc} {:instruction integer_add} {:instruction float_shove} {:instruction float_sub} {:instruction float_stackdepth} {:instruction float_rot} {:instruction float_min} {:instruction float_inc} {:instruction float_dup_times} {:instruction integer_add} {:instruction float_inc} {:instruction float_dup_times} {:instruction float_inc} {:instruction float_dup_times} {:instruction integer_add} {:instruction integer_shove} {:instruction float_inc} {:instruction float_dup_times} {:instruction float_rot} {:instruction 71} {:instruction float_inc} {:instruction float_dup_times} {:instruction integer_add} {:instruction float_inc} {:instruction float_dup_times} {:instruction float_inc} {:instruction float_dup_times} {:instruction integer_add} {:instruction integer_shove} {:instruction float_inc} {:instruction float_dup_times} {:instruction integer_swap} {:instruction integer_add} {:instruction print_float} {:instruction integer_dec} {:instruction float_tan} {:instruction integer_flush} {:instruction float_dup_times} {:instruction integer_add} {:instruction integer_shove} {:instruction float_inc} {:instruction float_dup_times} {:instruction integer_add} {:instruction 34} {:instruction float_div} {:instruction float_rot} {:instruction -49} {:instruction in1} {:instruction float_yankdup} {:instruction float_max} {:instruction integer_flush} {:instruction float_dup_times})
Best program: (float_yank float_sub float_mod float_frominteger float_pop float_tan float_add integer_dup_items in1 float_inc integer_add float_shove float_sub float_stackdepth float_rot float_min float_inc float_dup_times integer_add float_inc float_dup_times float_inc float_dup_times integer_add integer_shove float_inc float_dup_times float_rot 71 float_inc float_dup_times integer_add float_inc float_dup_times float_inc float_dup_times integer_add integer_shove float_inc float_dup_times integer_swap integer_add print_float integer_dec float_tan integer_flush float_dup_times integer_add integer_shove float_inc float_dup_times integer_add 34 float_div float_rot -49 in1 float_yankdup float_max integer_flush float_dup_times)
Errors: [92.0 11 75.0 2 78.0 2 28.0 2 67.0 2 75.0 3 41.0 2 43.0 11 42.0 2 34.0 2 0.0 0 59.0 3 18.0 2 3.0 1 76.0 2 69.0 2 0.0 0 81.0 9 100.0 13 10.0 1 74.0 3 17.0 2 48.0 2 66.0 3 49.0 2]
Total: 1329.0
Mean: 26.58
Genome size: 61
Size: 62
Percent parens: 0.016
--- Population Statistics ---
Average total errors in population: 3646.9890910999998
Median total errors in population: 1329.0
Error averages by case: (178.21948290000003 11.494 161.27905919999995 3.436 165.21158710000003 3.204 123.7077157 3.407 156.01353989999998 3.282 165.85794750000002 4.332 133.6558656 3.18 134.0127 11.304 134.22435019999995 3.207 128.2286828 3.407 99.16017390000003 1.85 150.7060549 4.34 112.02814699999998 3.292 99.7543212 2.403 166.8189229 3.558 157.81830039999997 3.374 97.28656009999999 1.873 168.39525100000003 9.601 185.2891423 13.049 102.17341739999999 2.334 163.9345514 4.255 108.80805389999998 3.259 139.5339277 3.388 157.63770430000005 4.368 142.52563179999999 3.511)
Error minima by case: (11.0817 9 0.8427 1 1.0101 1 19.0 1 8.6808 1 4.106 2 21.9137 1 10.1557 8 19.5954 1 1.2966 1 0.0 0 2.8622 2 1.0374 1 0.0 0 12.5348 1 11.9183 1 0.0 0 0.0172 8 7.7224 9 0.5794 1 21.8069 2 4.1062 1 3.2985 1 7.1443 2 36.0912 2)
Average genome size in population (length): 60.14
Average program size in population (points): 61.14
Average percent parens in population: 0.017
Minimum age in population: 44.10085657611489
Maximum age in population: 48.41903969878331
Average age in population: 46.6300693031312
Median age in population: 46.68423392018303
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 6
Genome diversity (% unique Plush genomes):	 0.846
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 6
Syntactic diversity (% unique Push programs):	 0.846
Total error diversity:				 0.057
Error (vector) diversity:			 0.063
Behavioral diversity:				 0.063
--- Run Statistics ---
Number of program evaluations used so far: 33000
Number of point (instruction) evaluations so far: 46635339
--- Timings ---
Current time: 1529616041946 milliseconds
Total Time:         106.5 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        43.5 seconds, 40.9%
Fitness Testing:     49.7 seconds, 46.7%
Report:              13.1 seconds, 12.3%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 32
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 33
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 33
;;******************************
;; -*- Number IO problem report - generation 33
Test total error for best: 55009.0
Test mean error for best: 27.50450
;;------------------------------
Outputs of best individual on training cases:
Correct output: -74.6179542037 | Program output: 17.3820457963 
Correct output: 78.7609586813  | Program output: 3.7609586813  
Correct output: 3.0100598709   | Program output: 81.0100598709 
Correct output: -99.2368061293 | Program output: -71.2368061293
Correct output: 88.6808415603  | Program output: 21.6808415603 
Correct output: -151.1060419578 | Program output: -76.1060419578
Correct output: 56.004616184   | Program output: 97.004616184  
Correct output: 33.520660154   | Program output: -9.479339846  
Correct output: 42.238861085   | Program output: 84.238861085  
Correct output: -49.0227893765 | Program output: -83.0227893765
Correct output: 103.4057483059 | Program output: 103.4057483059
Correct output: -106.1378273779 | Program output: -47.1378273779
Correct output: 37.9625599991  | Program output: 19.9625599991 
Correct output: 71.9208193203  | Program output: 74.9208193203 
Correct output: 173.5348464317 | Program output: 97.5348464317 
Correct output: -77.0615185935 | Program output: -8.0615185935 
Correct output: -20.7643622555 | Program output: -20.7643622555
Correct output: 1.9827630815   | Program output: -79.0172369185
Correct output: -39.1198682611 | Program output: 60.8801317389 
Correct output: 1.1392376036   | Program output: 11.1392376036 
Correct output: 129.1930977679 | Program output: 55.1930977679 
Correct output: 26.7496211861  | Program output: 9.7496211861  
Correct output: -11.2984801384 | Program output: -59.2984801384
Correct output: -136.1442960385 | Program output: -70.1442960385
Correct output: 143.0911996605 | Program output: 94.0911996605 
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_yank} {:instruction float_sub} {:instruction float_cos} {:instruction float_frominteger} {:instruction float_yank} {:instruction float_sub} {:instruction integer_max} {:instruction in1} {:instruction float_inc} {:instruction float_inc} {:instruction integer_add} {:instruction float_inc} {:instruction integer_add} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_dup_times} {:instruction float_mult} {:instruction integer_shove} {:instruction float_inc} {:instruction float_dup_times} {:instruction float_inc} {:instruction float_dup_times} {:instruction integer_add} {:instruction 25} {:instruction integer_flush} {:instruction float_shove} {:instruction integer_div} {:instruction float_inc} {:instruction 77.91830066263515} {:instruction integer_inc} {:instruction float_shove} {:instruction integer_yankdup} {:instruction integer_fromfloat} {:instruction integer_add} {:instruction print_float} {:instruction integer_dec} {:instruction integer_fromfloat} {:instruction float_rot} {:instruction -49} {:instruction in1} {:instruction float_yankdup} {:instruction float_max} {:instruction integer_flush} {:instruction float_dup_times} {:instruction float_div} {:instruction float_mult} {:instruction integer_shove} {:instruction float_dup})
Best program: (float_yank float_sub float_cos float_frominteger float_yank float_sub integer_max in1 float_inc float_inc integer_add float_inc integer_add float_inc float_inc float_inc float_dup_times float_mult integer_shove float_inc float_dup_times float_inc float_dup_times integer_add 25 integer_flush float_shove integer_div float_inc 77.91830066263515 integer_inc float_shove integer_yankdup integer_fromfloat integer_add print_float integer_dec integer_fromfloat float_rot -49 in1 float_yankdup float_max integer_flush float_dup_times float_div float_mult integer_shove float_dup)
Errors: [92.0 11 75.0 2 78.0 2 28.0 2 67.0 2 75.0 3 41.0 2 43.0 11 42.0 2 34.0 2 0.0 0 59.0 3 18.0 2 3.0 1 76.0 2 69.0 2 0.0 0 81.0 9 100.0 13 10.0 1 74.0 3 17.0 2 48.0 2 66.0 3 49.0 2]
Total: 1329.0
Mean: 26.58
Genome size: 49
Size: 50
Percent parens: 0.020
--- Population Statistics ---
Average total errors in population: 4555.6598058
Median total errors in population: 1329.0
Error averages by case: (212.07581530000004 11.631 196.92256629999997 3.748 199.7459446 3.566 163.0901012 3.811 188.8375219 3.661 203.7715894 4.796 169.2891901 3.534 171.2350425 11.356 169.90149969999996 3.535 165.234056 3.826 134.8279732 2.264 189.30050329999997 4.803 146.70493990000003 3.672 135.45607890000002 2.804 200.16358000000002 3.928 196.3002743 3.823 135.89552220000002 2.332 203.82392389999998 9.688 218.93592809999998 13.113 141.0842452 2.693 196.54345060000006 4.622 145.20523100000003 3.644 176.2500847 3.793 195.86543780000005 4.818 175.84530570000004 3.893)
Error minima by case: (22.0914 10 0.1573 1 0.072 1 2.5275 1 9.7625 1 54.3967 2 21.9137 1 12.0985 8 33.0 1 21.1073 1 0.0 0 9.4285 2 13.0 1 0.0 0 20.8927 2 19.6478 1 0.0 0 0.0172 8 9.7414 10 0.0401 1 18.8927 2 1.5589 1 6.3646 1 39.435 2 6.1073 2)
Average genome size in population (length): 59.872
Average program size in population (points): 60.872
Average percent parens in population: 0.017
Minimum age in population: 45.10085657611489
Maximum age in population: 49.9469003865961
Average age in population: 48.07597946399334
Median age in population: 48.13658442010637
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 8
Genome diversity (% unique Plush genomes):	 0.845
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 8
Syntactic diversity (% unique Push programs):	 0.845
Total error diversity:				 0.057
Error (vector) diversity:			 0.062
Behavioral diversity:				 0.063
--- Run Statistics ---
Number of program evaluations used so far: 34000
Number of point (instruction) evaluations so far: 48132239
--- Timings ---
Current time: 1529616045056 milliseconds
Total Time:         109.6 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        44.8 seconds, 40.9%
Fitness Testing:     51.1 seconds, 46.7%
Report:              13.5 seconds, 12.3%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 33
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 34
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 34
;;******************************
;; -*- Number IO problem report - generation 34
Test total error for best: 55009.0
Test mean error for best: 27.50450
;;------------------------------
Outputs of best individual on training cases:
Correct output: -74.6179542037 | Program output: 17.3820457963 
Correct output: 78.7609586813  | Program output: 3.7609586813  
Correct output: 3.0100598709   | Program output: 81.0100598709 
Correct output: -99.2368061293 | Program output: -71.2368061293
Correct output: 88.6808415603  | Program output: 21.6808415603 
Correct output: -151.1060419578 | Program output: -76.1060419578
Correct output: 56.004616184   | Program output: 97.004616184  
Correct output: 33.520660154   | Program output: -9.479339846  
Correct output: 42.238861085   | Program output: 84.238861085  
Correct output: -49.0227893765 | Program output: -83.0227893765
Correct output: 103.4057483059 | Program output: 103.4057483059
Correct output: -106.1378273779 | Program output: -47.1378273779
Correct output: 37.9625599991  | Program output: 19.9625599991 
Correct output: 71.9208193203  | Program output: 74.9208193203 
Correct output: 173.5348464317 | Program output: 97.5348464317 
Correct output: -77.0615185935 | Program output: -8.0615185935 
Correct output: -20.7643622555 | Program output: -20.7643622555
Correct output: 1.9827630815   | Program output: -79.0172369185
Correct output: -39.1198682611 | Program output: 60.8801317389 
Correct output: 1.1392376036   | Program output: 11.1392376036 
Correct output: 129.1930977679 | Program output: 55.1930977679 
Correct output: 26.7496211861  | Program output: 9.7496211861  
Correct output: -11.2984801384 | Program output: -59.2984801384
Correct output: -136.1442960385 | Program output: -70.1442960385
Correct output: 143.0911996605 | Program output: 94.0911996605 
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_yank} {:instruction float_sub} {:instruction float_cos} {:instruction float_frominteger} {:instruction float_yank} {:instruction float_sub} {:instruction integer_max} {:instruction in1} {:instruction float_inc} {:instruction float_inc} {:instruction integer_add} {:instruction float_inc} {:instruction integer_add} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_dup_times} {:instruction float_mult} {:instruction integer_shove} {:instruction float_inc} {:instruction float_dup_times} {:instruction float_inc} {:instruction float_dup_times} {:instruction integer_add} {:instruction 25} {:instruction integer_flush} {:instruction float_shove} {:instruction integer_div} {:instruction float_inc} {:instruction 77.91830066263515} {:instruction integer_inc} {:instruction float_shove} {:instruction integer_yankdup} {:instruction integer_fromfloat} {:instruction integer_add} {:instruction print_float} {:instruction integer_dec} {:instruction integer_fromfloat} {:instruction float_rot} {:instruction -49} {:instruction in1} {:instruction float_yankdup} {:instruction float_max} {:instruction integer_flush} {:instruction float_dup_times} {:instruction in1} {:instruction float_mult} {:instruction integer_shove} {:instruction float_dup})
Best program: (float_yank float_sub float_cos float_frominteger float_yank float_sub integer_max in1 float_inc float_inc integer_add float_inc integer_add float_inc float_inc float_inc float_dup_times float_mult integer_shove float_inc float_dup_times float_inc float_dup_times integer_add 25 integer_flush float_shove integer_div float_inc 77.91830066263515 integer_inc float_shove integer_yankdup integer_fromfloat integer_add print_float integer_dec integer_fromfloat float_rot -49 in1 float_yankdup float_max integer_flush float_dup_times in1 float_mult integer_shove float_dup)
Errors: [92.0 11 75.0 2 78.0 2 28.0 2 67.0 2 75.0 3 41.0 2 43.0 11 42.0 2 34.0 2 0.0 0 59.0 3 18.0 2 3.0 1 76.0 2 69.0 2 0.0 0 81.0 9 100.0 13 10.0 1 74.0 3 17.0 2 48.0 2 66.0 3 49.0 2]
Total: 1329.0
Mean: 26.58
Genome size: 49
Size: 50
Percent parens: 0.020
--- Population Statistics ---
Average total errors in population: 3293.7763428000003
Median total errors in population: 1329.0
Error averages by case: (163.835147 11.457 146.05454790000002 3.226 152.93550920000004 3.038 110.32197850000001 3.168 140.4550333 3.066 153.35041270000002 4.114 120.7608043 2.997 118.27311139999999 11.315 121.28511939999997 3.011 114.38910920000004 3.165 84.6778143 1.566 137.74784060000002 4.11 95.759893 3.064 85.61046150000001 2.175 154.33129169999998 3.312 143.68613290000002 3.152 81.8496514 1.568 155.3736632 9.539 173.05889480000005 13.047 87.5711812 2.129 150.38683730000005 4.031 92.6398987 3.047 125.7129867 3.12 144.94267250000001 4.116 128.9593501 3.274)
Error minima by case: (8.5616 8 0.8427 1 0.0101 1 19.0 1 5.7625 1 2.9183 2 8.6864 1 21.6022 8 22.4521 1 26.3475 1 0.0 0 0.1378 2 1.0374 1 0.0 0 7.0996 1 8.9183 1 0.0 0 1.0172 7 2.0395 10 0.8576 1 9.0996 2 10.2504 1 5.2985 1 7.1443 2 33.0912 2)
Average genome size in population (length): 59.838
Average program size in population (points): 60.838
Average percent parens in population: 0.017
Minimum age in population: 47.12735593179241
Maximum age in population: 51.55586105328985
Average age in population: 49.54518907051405
Median age in population: 49.59690808161395
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 9
Genome diversity (% unique Plush genomes):	 0.846
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 9
Syntactic diversity (% unique Push programs):	 0.846
Total error diversity:				 0.062
Error (vector) diversity:			 0.07
Behavioral diversity:				 0.07
--- Run Statistics ---
Number of program evaluations used so far: 35000
Number of point (instruction) evaluations so far: 49628414
--- Timings ---
Current time: 1529616048245 milliseconds
Total Time:         112.8 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        46.2 seconds, 40.9%
Fitness Testing:     52.6 seconds, 46.7%
Report:              13.9 seconds, 12.3%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 34
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 35
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 35
;;******************************
;; -*- Number IO problem report - generation 35
Test total error for best: 55009.0
Test mean error for best: 27.50450
;;------------------------------
Outputs of best individual on training cases:
Correct output: -74.6179542037 | Program output: 17.3820457963 
Correct output: 78.7609586813  | Program output: 3.7609586813  
Correct output: 3.0100598709   | Program output: 81.0100598709 
Correct output: -99.2368061293 | Program output: -71.2368061293
Correct output: 88.6808415603  | Program output: 21.6808415603 
Correct output: -151.1060419578 | Program output: -76.1060419578
Correct output: 56.004616184   | Program output: 97.004616184  
Correct output: 33.520660154   | Program output: -9.479339846  
Correct output: 42.238861085   | Program output: 84.238861085  
Correct output: -49.0227893765 | Program output: -83.0227893765
Correct output: 103.4057483059 | Program output: 103.4057483059
Correct output: -106.1378273779 | Program output: -47.1378273779
Correct output: 37.9625599991  | Program output: 19.9625599991 
Correct output: 71.9208193203  | Program output: 74.9208193203 
Correct output: 173.5348464317 | Program output: 97.5348464317 
Correct output: -77.0615185935 | Program output: -8.0615185935 
Correct output: -20.7643622555 | Program output: -20.7643622555
Correct output: 1.9827630815   | Program output: -79.0172369185
Correct output: -39.1198682611 | Program output: 60.8801317389 
Correct output: 1.1392376036   | Program output: 11.1392376036 
Correct output: 129.1930977679 | Program output: 55.1930977679 
Correct output: 26.7496211861  | Program output: 9.7496211861  
Correct output: -11.2984801384 | Program output: -59.2984801384
Correct output: -136.1442960385 | Program output: -70.1442960385
Correct output: 143.0911996605 | Program output: 94.0911996605 
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_rot} {:instruction float_yank} {:instruction float_sub} {:instruction float_mod} {:instruction integer_yankdup} {:instruction float_pop} {:instruction float_dup_times} {:instruction print_integer} {:instruction integer_max} {:instruction integer_flush} {:instruction in1} {:instruction float_inc} {:instruction float_inc} {:instruction integer_add} {:instruction float_inc} {:instruction integer_add} {:instruction float_inc} {:instruction float_inc} {:instruction integer_max} {:instruction integer_yank} {:instruction integer_yank} {:instruction float_inc} {:instruction float_yankdup} {:instruction -15} {:instruction integer_pop} {:instruction integer_add} {:instruction float_dup_times} {:instruction integer_add} {:instruction integer_shove} {:instruction float_inc} {:instruction float_dup_times} {:instruction integer_add} {:instruction float_dup_items} {:instruction float_inc} {:instruction float_sub} {:instruction float_rot} {:instruction integer_shove} {:instruction float_inc} {:instruction integer_swap} {:instruction integer_add} {:instruction print_float} {:instruction integer_dec} {:instruction float_tan} {:instruction integer_flush} {:instruction float_dup_times} {:instruction float_div} {:instruction float_dup_times})
Best program: (integer_rot float_yank float_sub float_mod integer_yankdup float_pop float_dup_times print_integer integer_max integer_flush in1 float_inc float_inc integer_add float_inc integer_add float_inc float_inc integer_max integer_yank integer_yank float_inc float_yankdup -15 integer_pop integer_add float_dup_times integer_add integer_shove float_inc float_dup_times integer_add float_dup_items float_inc float_sub float_rot integer_shove float_inc integer_swap integer_add print_float integer_dec float_tan integer_flush float_dup_times float_div float_dup_times)
Errors: [92.0 11 75.0 2 78.0 2 28.0 2 67.0 2 75.0 3 41.0 2 43.0 11 42.0 2 34.0 2 0.0 0 59.0 3 18.0 2 3.0 1 76.0 2 69.0 2 0.0 0 81.0 9 100.0 13 10.0 1 74.0 3 17.0 2 48.0 2 66.0 3 49.0 2]
Total: 1329.0
Mean: 26.58
Genome size: 47
Size: 48
Percent parens: 0.021
--- Population Statistics ---
Average total errors in population: 3354.085482500001
Median total errors in population: 1329.0
Error averages by case: (166.57272229999998 11.505 151.54935230000004 3.357 153.5625253 3.139 112.02279180000002 3.301 143.7720941 3.177 154.5685091 4.241 121.22645420000002 3.102 122.54356659999999 11.375 121.85161749999996 3.127 116.7110331 3.32 86.36223830000003 1.724 139.31162490000003 4.255 99.2921794 3.2 87.76999130000003 2.324 154.5719738 3.438 146.9580104 3.303 85.44887299999998 1.763 157.33325520000005 9.654 173.92215400000003 13.085 91.5761065 2.228 151.70214199999998 4.137 98.10378619999996 3.15 128.14163829999998 3.305 146.33179590000003 4.251 130.03404700000002 3.384)
Error minima by case: (10.9967 9 0.1573 1 0.4982 1 1.6772 1 7.7625 1 7.106 2 2.3921 1 4.4545 7 11.3736 1 4.5455 1 0.0 0 1.8622 2 4.0374 1 0.0 0 11.5348 1 13.4403 1 0.0 0 0.3318 8 3.9931 8 0.6621 1 24.8069 2 3.1907 1 9.4115 1 10.1443 2 10.4545 2)
Average genome size in population (length): 60.063
Average program size in population (points): 61.063
Average percent parens in population: 0.017
Minimum age in population: 48.40909208264202
Maximum age in population: 52.96168589789886
Average age in population: 51.0315201720054
Median age in population: 51.09165865194518
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 7
Genome diversity (% unique Plush genomes):	 0.846
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 7
Syntactic diversity (% unique Push programs):	 0.846
Total error diversity:				 0.066
Error (vector) diversity:			 0.071
Behavioral diversity:				 0.072
--- Run Statistics ---
Number of program evaluations used so far: 36000
Number of point (instruction) evaluations so far: 51130264
--- Timings ---
Current time: 1529616051403 milliseconds
Total Time:         116.0 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        47.5 seconds, 40.9%
Fitness Testing:     54.1 seconds, 46.7%
Report:              14.3 seconds, 12.3%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 35
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 36
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 36
;;******************************
;; -*- Number IO problem report - generation 36
Test total error for best: 55009.0
Test mean error for best: 27.50450
;;------------------------------
Outputs of best individual on training cases:
Correct output: -74.6179542037 | Program output: 17.3820457963 
Correct output: 78.7609586813  | Program output: 3.7609586813  
Correct output: 3.0100598709   | Program output: 81.0100598709 
Correct output: -99.2368061293 | Program output: -71.2368061293
Correct output: 88.6808415603  | Program output: 21.6808415603 
Correct output: -151.1060419578 | Program output: -76.1060419578
Correct output: 56.004616184   | Program output: 97.004616184  
Correct output: 33.520660154   | Program output: -9.479339846  
Correct output: 42.238861085   | Program output: 84.238861085  
Correct output: -49.0227893765 | Program output: -83.0227893765
Correct output: 103.4057483059 | Program output: 103.4057483059
Correct output: -106.1378273779 | Program output: -47.1378273779
Correct output: 37.9625599991  | Program output: 19.9625599991 
Correct output: 71.9208193203  | Program output: 74.9208193203 
Correct output: 173.5348464317 | Program output: 97.5348464317 
Correct output: -77.0615185935 | Program output: -8.0615185935 
Correct output: -20.7643622555 | Program output: -20.7643622555
Correct output: 1.9827630815   | Program output: -79.0172369185
Correct output: -39.1198682611 | Program output: 60.8801317389 
Correct output: 1.1392376036   | Program output: 11.1392376036 
Correct output: 129.1930977679 | Program output: 55.1930977679 
Correct output: 26.7496211861  | Program output: 9.7496211861  
Correct output: -11.2984801384 | Program output: -59.2984801384
Correct output: -136.1442960385 | Program output: -70.1442960385
Correct output: 143.0911996605 | Program output: 94.0911996605 
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_yank} {:instruction float_sub} {:instruction integer_max} {:instruction in1} {:instruction float_inc} {:instruction float_inc} {:instruction integer_add} {:instruction float_inc} {:instruction integer_add} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_dup_times} {:instruction float_mult} {:instruction tagged_178} {:instruction float_inc} {:instruction float_dup_times} {:instruction float_inc} {:instruction float_dup_times} {:instruction integer_add} {:instruction 25} {:instruction integer_flush} {:instruction float_shove} {:instruction integer_swap} {:instruction float_inc} {:instruction 77.91830066263515} {:instruction integer_inc} {:instruction float_shove} {:instruction tag_integer_381} {:instruction integer_fromfloat} {:instruction integer_add} {:instruction print_float} {:instruction integer_dec} {:instruction integer_add} {:instruction float_dup_times} {:instruction integer_add} {:instruction integer_shove} {:instruction float_inc} {:instruction float_dup_times} {:instruction integer_add} {:instruction integer_shove} {:instruction float_inc} {:instruction float_sub} {:instruction float_mult} {:instruction float_div} {:instruction float_inc} {:instruction integer_swap} {:instruction integer_add} {:instruction print_float} {:instruction integer_dec} {:instruction float_tan} {:instruction integer_flush} {:instruction float_dup_times} {:instruction float_div} {:instruction float_mult} {:instruction integer_shove} {:instruction float_dup} {:instruction integer_dup_times} {:instruction float_frominteger} {:instruction 13} {:instruction integer_stackdepth} {:instruction float_dup})
Best program: (float_yank float_sub integer_max in1 float_inc float_inc integer_add float_inc integer_add float_inc float_inc float_inc float_dup_times float_mult tagged_178 float_inc float_dup_times float_inc float_dup_times integer_add 25 integer_flush float_shove integer_swap float_inc 77.91830066263515 integer_inc float_shove tag_integer_381 integer_fromfloat integer_add print_float integer_dec integer_add float_dup_times integer_add integer_shove float_inc float_dup_times integer_add integer_shove float_inc float_sub float_mult float_div float_inc integer_swap integer_add print_float integer_dec float_tan integer_flush float_dup_times float_div float_mult integer_shove float_dup integer_dup_times float_frominteger 13 integer_stackdepth float_dup)
Errors: [92.0 11 75.0 2 78.0 2 28.0 2 67.0 2 75.0 3 41.0 2 43.0 11 42.0 2 34.0 2 0.0 0 59.0 3 18.0 2 3.0 1 76.0 2 69.0 2 0.0 0 81.0 9 100.0 13 10.0 1 74.0 3 17.0 2 48.0 2 66.0 3 49.0 2]
Total: 1329.0
Mean: 26.58
Genome size: 62
Size: 63
Percent parens: 0.016
--- Population Statistics ---
Average total errors in population: 3990.0591773
Median total errors in population: 1329.0
Error averages by case: (189.02509389999997 11.579 174.12614970000004 3.64 177.29760460000003 3.41 137.42170959999999 3.642 168.7550119 3.529 179.1596166 4.582 147.07102600000002 3.38 146.3616486 11.394 147.44265479999993 3.393 142.36992470000007 3.659 114.8454882 2.105 164.0180055 4.582 125.18478310000002 3.53 115.94681230000002 2.648 184.75944189999998 3.779 169.38787380000002 3.645 111.20886129999997 2.16 181.07605589999997 9.674 197.27001850000005 13.1 115.00480499999996 2.514 178.3688189 4.477 122.48874810000001 3.476 153.05277259999997 3.662 170.97605560000002 4.584 157.54119619999997 3.755)
Error minima by case: (64.9706 8 0.8427 1 0.0033 1 17.9934 1 10.7625 1 4.106 2 21.9137 1 5.1228 8 31.9934 1 25.0 1 0.0 0 3.8622 2 1.0374 1 0.0 0 13.5348 1 52.9385 1 0.0 0 0.3318 7 8.3421 10 0.0066 1 21.8069 2 0.0581 1 4.2985 1 7.1443 2 37.0912 1)
Average genome size in population (length): 59.601
Average program size in population (points): 60.601
Average percent parens in population: 0.017
Minimum age in population: 49.49211169336922
Maximum age in population: 54.4490910397144
Average age in population: 52.51133353896742
Median age in population: 52.55771895732323
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 8
Genome diversity (% unique Plush genomes):	 0.849
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 8
Syntactic diversity (% unique Push programs):	 0.849
Total error diversity:				 0.061
Error (vector) diversity:			 0.07
Behavioral diversity:				 0.071
--- Run Statistics ---
Number of program evaluations used so far: 37000
Number of point (instruction) evaluations so far: 52620689
--- Timings ---
Current time: 1529616054537 milliseconds
Total Time:         119.1 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        48.8 seconds, 41.0%
Fitness Testing:     55.6 seconds, 46.7%
Report:              14.6 seconds, 12.3%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 36
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 37
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 37
;;******************************
;; -*- Number IO problem report - generation 37
Test total error for best: 55009.0
Test mean error for best: 27.50450
;;------------------------------
Outputs of best individual on training cases:
Correct output: -74.6179542037 | Program output: 17.3820457963 
Correct output: 78.7609586813  | Program output: 3.7609586813  
Correct output: 3.0100598709   | Program output: 81.0100598709 
Correct output: -99.2368061293 | Program output: -71.2368061293
Correct output: 88.6808415603  | Program output: 21.6808415603 
Correct output: -151.1060419578 | Program output: -76.1060419578
Correct output: 56.004616184   | Program output: 97.004616184  
Correct output: 33.520660154   | Program output: -9.479339846  
Correct output: 42.238861085   | Program output: 84.238861085  
Correct output: -49.0227893765 | Program output: -83.0227893765
Correct output: 103.4057483059 | Program output: 103.4057483059
Correct output: -106.1378273779 | Program output: -47.1378273779
Correct output: 37.9625599991  | Program output: 19.9625599991 
Correct output: 71.9208193203  | Program output: 74.9208193203 
Correct output: 173.5348464317 | Program output: 97.5348464317 
Correct output: -77.0615185935 | Program output: -8.0615185935 
Correct output: -20.7643622555 | Program output: -20.7643622555
Correct output: 1.9827630815   | Program output: -79.0172369185
Correct output: -39.1198682611 | Program output: 60.8801317389 
Correct output: 1.1392376036   | Program output: 11.1392376036 
Correct output: 129.1930977679 | Program output: 55.1930977679 
Correct output: 26.7496211861  | Program output: 9.7496211861  
Correct output: -11.2984801384 | Program output: -59.2984801384
Correct output: -136.1442960385 | Program output: -70.1442960385
Correct output: 143.0911996605 | Program output: 94.0911996605 
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_yank} {:instruction float_yank} {:instruction float_shove} {:instruction float_mod} {:instruction float_frominteger} {:instruction float_swap} {:instruction float_yankdup} {:instruction print_integer} {:instruction integer_max} {:instruction integer_flush} {:instruction in1} {:instruction float_inc} {:instruction float_inc} {:instruction integer_add} {:instruction float_inc} {:instruction integer_add} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_dup_times} {:instruction integer_min} {:instruction integer_shove} {:instruction float_inc} {:instruction float_dup_times} {:instruction float_rot} {:instruction integer_shove} {:instruction float_inc} {:instruction float_inc} {:instruction float_dup_times} {:instruction integer_add} {:instruction print_float} {:instruction integer_dec} {:instruction float_tan} {:instruction -49} {:instruction in1} {:instruction float_yankdup} {:instruction float_max} {:instruction integer_flush} {:instruction float_dup_times} {:instruction float_div} {:instruction float_mult} {:instruction integer_min} {:instruction integer_yankdup} {:instruction integer_dup_times} {:instruction integer_shove} {:instruction float_dup} {:instruction integer_dup_times} {:instruction integer_dup} {:instruction float_tan} {:instruction integer_flush} {:instruction float_dup_times})
Best program: (float_yank float_yank float_shove float_mod float_frominteger float_swap float_yankdup print_integer integer_max integer_flush in1 float_inc float_inc integer_add float_inc integer_add float_inc float_inc float_inc float_dup_times integer_min integer_shove float_inc float_dup_times float_rot integer_shove float_inc float_inc float_dup_times integer_add print_float integer_dec float_tan -49 in1 float_yankdup float_max integer_flush float_dup_times float_div float_mult integer_min integer_yankdup integer_dup_times integer_shove float_dup integer_dup_times integer_dup float_tan integer_flush float_dup_times)
Errors: [92.0 11 75.0 2 78.0 2 28.0 2 67.0 2 75.0 3 41.0 2 43.0 11 42.0 2 34.0 2 0.0 0 59.0 3 18.0 2 3.0 1 76.0 2 69.0 2 0.0 0 81.0 9 100.0 13 10.0 1 74.0 3 17.0 2 48.0 2 66.0 3 49.0 2]
Total: 1329.0
Mean: 26.58
Genome size: 51
Size: 52
Percent parens: 0.019
--- Population Statistics ---
Average total errors in population: 3703.9185999999995
Median total errors in population: 1329.0
Error averages by case: (179.9742435999999 11.511 162.07956639999998 3.477 168.57450320000004 3.252 127.34621899999999 3.45 156.3030374 3.292 169.3729408 4.391 137.29696419999996 3.243 134.30002649999994 11.309 137.83799819999993 3.248 129.68400650000007 3.424 100.93220360000004 1.853 154.42946119999996 4.4 112.329589 3.328 102.33728930000008 2.42 169.56549639999997 3.559 160.11191110000004 3.449 98.38400610000001 1.872 169.81080300000002 9.612 188.51118429999994 13.079 106.56236910000004 2.373 165.90908650000003 4.267 109.97189159999999 3.287 141.24329960000003 3.406 161.1968883000001 4.405 144.41561509999997 3.531)
Error minima by case: (13.0817 10 0.1573 1 0.9183 1 15.2628 1 7.7625 1 3.9183 2 22.9137 1 20.5207 8 29.2389 1 27.0 1 0.0 0 2.8622 2 6.0374 1 0.0 0 12.5348 1 9.9183 1 0.0 0 0.3664 8 5.2805 8 0.0987 1 26.8069 2 1.5589 1 7.2985 1 12.1443 2 36.0912 2)
Average genome size in population (length): 58.77
Average program size in population (points): 59.77
Average percent parens in population: 0.017
Minimum age in population: 51.32091192298685
Maximum age in population: 55.98345340076776
Average age in population: 53.99827963087587
Median age in population: 54.04711264494836
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 7
Genome diversity (% unique Plush genomes):	 0.837
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 7
Syntactic diversity (% unique Push programs):	 0.837
Total error diversity:				 0.063
Error (vector) diversity:			 0.074
Behavioral diversity:				 0.075
--- Run Statistics ---
Number of program evaluations used so far: 38000
Number of point (instruction) evaluations so far: 54090239
--- Timings ---
Current time: 1529616057664 milliseconds
Total Time:         122.2 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        50.1 seconds, 41.0%
Fitness Testing:     57.0 seconds, 46.6%
Report:              15.0 seconds, 12.3%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 37
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 38
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 38
;;******************************
;; -*- Number IO problem report - generation 38
Test total error for best: 55009.0
Test mean error for best: 27.50450
;;------------------------------
Outputs of best individual on training cases:
Correct output: -74.6179542037 | Program output: 17.3820457963 
Correct output: 78.7609586813  | Program output: 3.7609586813  
Correct output: 3.0100598709   | Program output: 81.0100598709 
Correct output: -99.2368061293 | Program output: -71.2368061293
Correct output: 88.6808415603  | Program output: 21.6808415603 
Correct output: -151.1060419578 | Program output: -76.1060419578
Correct output: 56.004616184   | Program output: 97.004616184  
Correct output: 33.520660154   | Program output: -9.479339846  
Correct output: 42.238861085   | Program output: 84.238861085  
Correct output: -49.0227893765 | Program output: -83.0227893765
Correct output: 103.4057483059 | Program output: 103.4057483059
Correct output: -106.1378273779 | Program output: -47.1378273779
Correct output: 37.9625599991  | Program output: 19.9625599991 
Correct output: 71.9208193203  | Program output: 74.9208193203 
Correct output: 173.5348464317 | Program output: 97.5348464317 
Correct output: -77.0615185935 | Program output: -8.0615185935 
Correct output: -20.7643622555 | Program output: -20.7643622555
Correct output: 1.9827630815   | Program output: -79.0172369185
Correct output: -39.1198682611 | Program output: 60.8801317389 
Correct output: 1.1392376036   | Program output: 11.1392376036 
Correct output: 129.1930977679 | Program output: 55.1930977679 
Correct output: 26.7496211861  | Program output: 9.7496211861  
Correct output: -11.2984801384 | Program output: -59.2984801384
Correct output: -136.1442960385 | Program output: -70.1442960385
Correct output: 143.0911996605 | Program output: 94.0911996605 
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_rot} {:instruction float_yank} {:instruction float_sub} {:instruction tag_integer_246} {:instruction float_frominteger} {:instruction float_pop} {:instruction float_frominteger} {:instruction integer_max} {:instruction integer_flush} {:instruction in1} {:instruction float_inc} {:instruction float_inc} {:instruction integer_add} {:instruction float_inc} {:instruction integer_add} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_dup_times} {:instruction integer_dup} {:instruction -16} {:instruction integer_pop} {:instruction integer_add} {:instruction float_dup_times} {:instruction float_mult} {:instruction integer_shove} {:instruction float_inc} {:instruction float_dup_times} {:instruction integer_add} {:instruction integer_shove} {:instruction float_inc} {:instruction float_dup_times} {:instruction float_rot} {:instruction integer_shove} {:instruction float_inc} {:instruction integer_swap} {:instruction integer_add} {:instruction print_float} {:instruction integer_dec} {:instruction float_tan} {:instruction integer_flush} {:instruction -49} {:instruction in1} {:instruction float_yank} {:instruction float_max} {:instruction float_frominteger} {:instruction integer_inc} {:instruction float_div} {:instruction float_stackdepth} {:instruction integer_stackdepth} {:instruction float_dup})
Best program: (integer_rot float_yank float_sub tag_integer_246 float_frominteger float_pop float_frominteger integer_max integer_flush in1 float_inc float_inc integer_add float_inc integer_add float_inc float_inc float_inc float_dup_times integer_dup -16 integer_pop integer_add float_dup_times float_mult integer_shove float_inc float_dup_times integer_add integer_shove float_inc float_dup_times float_rot integer_shove float_inc integer_swap integer_add print_float integer_dec float_tan integer_flush -49 in1 float_yank float_max float_frominteger integer_inc float_div float_stackdepth integer_stackdepth float_dup)
Errors: [92.0 11 75.0 2 78.0 2 28.0 2 67.0 2 75.0 3 41.0 2 43.0 11 42.0 2 34.0 2 0.0 0 59.0 3 18.0 2 3.0 1 76.0 2 69.0 2 0.0 0 81.0 9 100.0 13 10.0 1 74.0 3 17.0 2 48.0 2 66.0 3 49.0 2]
Total: 1329.0
Mean: 26.58
Genome size: 51
Size: 52
Percent parens: 0.019
--- Population Statistics ---
Average total errors in population: 3670.1368305
Median total errors in population: 1329.0
Error averages by case: (176.9115845 11.526 160.99986590000003 3.435 165.9471789 3.247 128.44092600000005 3.437 153.03932089999998 3.29 170.35537559999997 4.371 134.75505859999998 3.2 134.28358089999998 11.332 135.2708183999999 3.205 130.6613121 3.42 99.5065016 1.837 155.39895899999996 4.36 108.93408839999998 3.302 99.9430092 2.407 166.17933369999997 3.544 160.35096239999993 3.426 99.04777800000001 1.909 170.4008688 9.619 186.15871639999997 13.056 102.51086359999995 2.352 163.28569010000004 4.238 106.7078141 3.247 141.85632700000005 3.381 162.2767505 4.386 141.8651459 3.522)
Error minima by case: (15.0817 8 1.1573 1 0.0101 1 21.0 1 8.7625 1 1.9183 2 21.0 1 4.3997 2 22.0 1 13.3997 1 0.0 0 3.8622 2 6.0374 1 0.0 0 12.5348 2 7.9183 1 0.0 0 0.2 8 23.0817 10 0.1392 1 26.0 2 1.5589 1 0.6003 1 10.9183 2 1.6003 2)
Average genome size in population (length): 58.58
Average program size in population (points): 59.58
Average percent parens in population: 0.017
Minimum age in population: 52.36189175158506
Maximum age in population: 57.60788476531161
Average age in population: 55.42504604634891
Median age in population: 55.45892596702106
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 8
Genome diversity (% unique Plush genomes):	 0.853
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 8
Syntactic diversity (% unique Push programs):	 0.853
Total error diversity:				 0.063
Error (vector) diversity:			 0.07
Behavioral diversity:				 0.071
--- Run Statistics ---
Number of program evaluations used so far: 39000
Number of point (instruction) evaluations so far: 55555164
--- Timings ---
Current time: 1529616060815 milliseconds
Total Time:         125.3 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        51.4 seconds, 41.0%
Fitness Testing:     58.5 seconds, 46.6%
Report:              15.4 seconds, 12.3%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 38
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 39
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 39
;;******************************
;; -*- Number IO problem report - generation 39
Test total error for best: 55009.0
Test mean error for best: 27.50450
;;------------------------------
Outputs of best individual on training cases:
Correct output: -74.6179542037 | Program output: 17.3820457963 
Correct output: 78.7609586813  | Program output: 3.7609586813  
Correct output: 3.0100598709   | Program output: 81.0100598709 
Correct output: -99.2368061293 | Program output: -71.2368061293
Correct output: 88.6808415603  | Program output: 21.6808415603 
Correct output: -151.1060419578 | Program output: -76.1060419578
Correct output: 56.004616184   | Program output: 97.004616184  
Correct output: 33.520660154   | Program output: -9.479339846  
Correct output: 42.238861085   | Program output: 84.238861085  
Correct output: -49.0227893765 | Program output: -83.0227893765
Correct output: 103.4057483059 | Program output: 103.4057483059
Correct output: -106.1378273779 | Program output: -47.1378273779
Correct output: 37.9625599991  | Program output: 19.9625599991 
Correct output: 71.9208193203  | Program output: 74.9208193203 
Correct output: 173.5348464317 | Program output: 97.5348464317 
Correct output: -77.0615185935 | Program output: -8.0615185935 
Correct output: -20.7643622555 | Program output: -20.7643622555
Correct output: 1.9827630815   | Program output: -79.0172369185
Correct output: -39.1198682611 | Program output: 60.8801317389 
Correct output: 1.1392376036   | Program output: 11.1392376036 
Correct output: 129.1930977679 | Program output: 55.1930977679 
Correct output: 26.7496211861  | Program output: 9.7496211861  
Correct output: -11.2984801384 | Program output: -59.2984801384
Correct output: -136.1442960385 | Program output: -70.1442960385
Correct output: 143.0911996605 | Program output: 94.0911996605 
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_yank} {:instruction float_sub} {:instruction float_mod} {:instruction float_mult} {:instruction float_pop} {:instruction float_min} {:instruction print_integer} {:instruction integer_max} {:instruction integer_flush} {:instruction in1} {:instruction float_inc} {:instruction float_inc} {:instruction integer_add} {:instruction float_inc} {:instruction integer_add} {:instruction float_inc} {:instruction float_inc} {:instruction integer_max} {:instruction integer_yank} {:instruction integer_yank} {:instruction float_inc} {:instruction integer_dup_times} {:instruction integer_dup} {:instruction float_swap} {:instruction integer_min} {:instruction -16} {:instruction integer_pop} {:instruction -16} {:instruction integer_pop} {:instruction integer_shove} {:instruction float_inc} {:instruction float_rot} {:instruction float_rot} {:instruction integer_shove} {:instruction float_inc} {:instruction float_inc} {:instruction float_dup_times} {:instruction integer_add} {:instruction print_float} {:instruction float_dup} {:instruction integer_dup_times} {:instruction integer_dup} {:instruction float_tan} {:instruction integer_dec} {:instruction -49} {:instruction in1} {:instruction float_dup_times})
Best program: (float_yank float_sub float_mod float_mult float_pop float_min print_integer integer_max integer_flush in1 float_inc float_inc integer_add float_inc integer_add float_inc float_inc integer_max integer_yank integer_yank float_inc integer_dup_times integer_dup float_swap integer_min -16 integer_pop -16 integer_pop integer_shove float_inc float_rot float_rot integer_shove float_inc float_inc float_dup_times integer_add print_float float_dup integer_dup_times integer_dup float_tan integer_dec -49 in1 float_dup_times)
Errors: [92.0 11 75.0 2 78.0 2 28.0 2 67.0 2 75.0 3 41.0 2 43.0 11 42.0 2 34.0 2 0.0 0 59.0 3 18.0 2 3.0 1 76.0 2 69.0 2 0.0 0 81.0 9 100.0 13 10.0 1 74.0 3 17.0 2 48.0 2 66.0 3 49.0 2]
Total: 1329.0
Mean: 26.58
Genome size: 47
Size: 48
Percent parens: 0.021
--- Population Statistics ---
Average total errors in population: 3347.3616952000007
Median total errors in population: 1329.0
Error averages by case: (167.0987285 11.486 147.78309399999992 3.369 153.72714089999997 3.166 113.83999819999995 3.318 143.26440840000004 3.204 156.26225330000005 4.29 122.80977219999998 3.135 121.30938259999999 11.315 123.13826469999992 3.16 114.79962909999999 3.302 85.77047950000002 1.751 140.62196099999997 4.279 98.25079820000002 3.223 86.6868117 2.329 155.36002409999995 3.474 148.3191617 3.323 84.1312399 1.774 154.9917654 9.574 174.56831819999996 13.038 91.84189039999998 2.272 151.0410905 4.165 94.9759712 3.19 126.0296182 3.29 147.848661 4.293 129.74923230000005 3.422)
Error minima by case: (6.6861 8 0.8427 1 0.0101 1 10.6219 1 10.7625 1 8.106 2 21.9137 1 21.3967 8 31.2389 1 26.0 1 0.0 0 1.8622 2 5.0374 1 0.0 0 11.5348 1 11.5534 1 0.0 0 0.0447 7 1.3139 9 0.5672 1 25.8069 2 9.0 1 5.2985 1 11.1443 2 35.0912 2)
Average genome size in population (length): 57.617
Average program size in population (points): 58.617
Average percent parens in population: 0.018
Minimum age in population: 53.97159171459498
Maximum age in population: 58.61265782809642
Average age in population: 56.8629501723838
Median age in population: 56.9052504573865
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 13
Genome diversity (% unique Plush genomes):	 0.842
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 13
Syntactic diversity (% unique Push programs):	 0.842
Total error diversity:				 0.071
Error (vector) diversity:			 0.079
Behavioral diversity:				 0.079
--- Run Statistics ---
Number of program evaluations used so far: 40000
Number of point (instruction) evaluations so far: 56996014
--- Timings ---
Current time: 1529616063926 milliseconds
Total Time:         128.5 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        52.7 seconds, 41.0%
Fitness Testing:     59.9 seconds, 46.6%
Report:              15.8 seconds, 12.3%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 39
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 40
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 40
;;******************************
;; -*- Number IO problem report - generation 40
Test total error for best: 52319.0
Test mean error for best: 26.15950
;;------------------------------
Outputs of best individual on training cases:
Correct output: -74.6179542037 | Program output: 11.3820457963 
Correct output: 78.7609586813  | Program output: 2.7609586813  
Correct output: 3.0100598709   | Program output: 75.0100598709 
Correct output: -99.2368061293 | Program output: -77.2368061293
Correct output: 88.6808415603  | Program output: 20.6808415603 
Correct output: -151.1060419578 | Program output: -82.1060419578
Correct output: 56.004616184   | Program output: 91.004616184  
Correct output: 33.520660154   | Program output: -10.479339846 
Correct output: 42.238861085   | Program output: 78.238861085  
Correct output: -49.0227893765 | Program output: -84.0227893765
Correct output: 103.4057483059 | Program output: 102.4057483059
Correct output: -106.1378273779 | Program output: -53.1378273779
Correct output: 37.9625599991  | Program output: 18.9625599991 
Correct output: 71.9208193203  | Program output: 73.9208193203 
Correct output: 173.5348464317 | Program output: 96.5348464317 
Correct output: -77.0615185935 | Program output: -14.0615185935
Correct output: -20.7643622555 | Program output: -21.7643622555
Correct output: 1.9827630815   | Program output: -80.0172369185
Correct output: -39.1198682611 | Program output: 54.8801317389 
Correct output: 1.1392376036   | Program output: 5.1392376036  
Correct output: 129.1930977679 | Program output: 54.1930977679 
Correct output: 26.7496211861  | Program output: 8.7496211861  
Correct output: -11.2984801384 | Program output: -60.2984801384
Correct output: -136.1442960385 | Program output: -76.1442960385
Correct output: 143.0911996605 | Program output: 93.0911996605 
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_yank} {:instruction float_sub} {:instruction float_inc} {:instruction float_frominteger} {:instruction float_pop} {:instruction integer_max} {:instruction integer_flush} {:instruction in1} {:instruction in1} {:instruction float_inc} {:instruction in2} {:instruction integer_add} {:instruction float_inc} {:instruction integer_add} {:instruction float_inc} {:instruction float_inc} {:instruction integer_max} {:instruction float_inc} {:instruction float_dup_times} {:instruction float_rot} {:instruction float_stackdepth} {:instruction float_inc} {:instruction float_dup_times} {:instruction float_inc} {:instruction float_dup_times} {:instruction integer_add} {:instruction 25} {:instruction integer_flush} {:instruction float_shove} {:instruction integer_swap} {:instruction float_inc} {:instruction 77.91830066263515} {:instruction integer_inc} {:instruction float_shove} {:instruction integer_yankdup} {:instruction integer_fromfloat} {:instruction integer_add} {:instruction print_float} {:instruction integer_stackdepth} {:instruction integer_dup_times} {:instruction integer_shove} {:instruction float_dup} {:instruction tag_integer_548} {:instruction integer_dup} {:instruction float_mod} {:instruction integer_pop} {:instruction integer_min} {:instruction float_add} {:instruction tagged_690} {:instruction integer_swap} {:instruction integer_shove} {:instruction float_dup})
Best program: (float_yank float_sub float_inc float_frominteger float_pop integer_max integer_flush in1 in1 float_inc in2 integer_add float_inc integer_add float_inc float_inc integer_max float_inc float_dup_times float_rot float_stackdepth float_inc float_dup_times float_inc float_dup_times integer_add 25 integer_flush float_shove integer_swap float_inc 77.91830066263515 integer_inc float_shove integer_yankdup integer_fromfloat integer_add print_float integer_stackdepth integer_dup_times integer_shove float_dup tag_integer_548 integer_dup float_mod integer_pop integer_min float_add tagged_690 integer_swap integer_shove float_dup)
Errors: [86.0 12 76.0 2 72.0 2 22.0 2 68.0 2 69.0 3 35.0 2 44.0 12 36.0 2 35.0 2 1.0 1 53.0 3 19.0 2 2.0 1 77.0 3 63.0 2 1.0 1 82.0 10 94.0 13 4.0 1 75.0 3 18.0 2 49.0 2 60.0 2 50.0 2]
Total: 1280.0
Mean: 25.6
Genome size: 52
Size: 53
Percent parens: 0.019
--- Population Statistics ---
Average total errors in population: 3830.816223500001
Median total errors in population: 1329.0
Error averages by case: (184.40399340000002 11.537 168.05421419999996 3.609 171.4355085 3.364 131.69485980000005 3.565 162.02899309999998 3.459 173.67115349999997 4.535 140.5780376 3.332 140.205109 11.362 141.11466859999996 3.343 135.66007840000006 3.602 107.18134920000001 2.058 158.40911949999997 4.519 118.78781880000001 3.483 108.21326510000003 2.602 174.28632810000002 3.742 164.60187499999995 3.569 104.75037490000001 2.063 174.4428874 9.655 191.70281 13.08 110.88173680000001 2.485 171.0201979 4.421 117.04755870000005 3.443 146.39037330000002 3.578 165.45885640000003 4.526 150.1750563 3.688)
Error minima by case: (64.9706 8 0.1573 1 0.5018 1 19.0 1 7.7625 1 3.106 2 5.2593 1 24.5207 8 19.025 1 27.0 1 0.0 0 0.1378 2 0.0374 1 0.0 0 9.5348 1 48.9385 1 0.0 0 0.2959 8 33.1199 10 0.1392 1 20.8069 2 5.1907 1 5.2985 1 6.1443 2 33.0912 2)
Average genome size in population (length): 57.667
Average program size in population (points): 58.667
Average percent parens in population: 0.017
Minimum age in population: 55.54325018363306
Maximum age in population: 60.36272616379028
Average age in population: 58.35331068499388
Median age in population: 58.42578364232486
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 10
Genome diversity (% unique Plush genomes):	 0.823
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 10
Syntactic diversity (% unique Push programs):	 0.823
Total error diversity:				 0.069
Error (vector) diversity:			 0.076
Behavioral diversity:				 0.076
--- Run Statistics ---
Number of program evaluations used so far: 41000
Number of point (instruction) evaluations so far: 58437939
--- Timings ---
Current time: 1529616067067 milliseconds
Total Time:         131.6 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        54.0 seconds, 41.1%
Fitness Testing:     61.3 seconds, 46.6%
Report:              16.1 seconds, 12.3%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 40
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 41
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 41
;;******************************
;; -*- Number IO problem report - generation 41
Test total error for best: 52289.0
Test mean error for best: 26.14450
;;------------------------------
Outputs of best individual on training cases:
Correct output: -74.6179542037 | Program output: 10.3820457963 
Correct output: 78.7609586813  | Program output: 1.7609586813  
Correct output: 3.0100598709   | Program output: 74.0100598709 
Correct output: -99.2368061293 | Program output: -78.2368061293
Correct output: 88.6808415603  | Program output: 19.6808415603 
Correct output: -151.1060419578 | Program output: -83.1060419578
Correct output: 56.004616184   | Program output: 90.004616184  
Correct output: 33.520660154   | Program output: -11.479339846 
Correct output: 42.238861085   | Program output: 77.238861085  
Correct output: -49.0227893765 | Program output: -85.0227893765
Correct output: 103.4057483059 | Program output: 101.4057483059
Correct output: -106.1378273779 | Program output: -54.1378273779
Correct output: 37.9625599991  | Program output: 17.9625599991 
Correct output: 71.9208193203  | Program output: 72.9208193203 
Correct output: 173.5348464317 | Program output: 95.5348464317 
Correct output: -77.0615185935 | Program output: -15.0615185935
Correct output: -20.7643622555 | Program output: -22.7643622555
Correct output: 1.9827630815   | Program output: -81.0172369185
Correct output: -39.1198682611 | Program output: 53.8801317389 
Correct output: 1.1392376036   | Program output: 4.1392376036  
Correct output: 129.1930977679 | Program output: 53.1930977679 
Correct output: 26.7496211861  | Program output: 7.7496211861  
Correct output: -11.2984801384 | Program output: -61.2984801384
Correct output: -136.1442960385 | Program output: -77.1442960385
Correct output: 143.0911996605 | Program output: 92.0911996605 
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_yank} {:instruction float_sub} {:instruction float_mod} {:instruction float_frominteger} {:instruction float_flush} {:instruction float_min} {:instruction print_integer} {:instruction integer_max} {:instruction float_frominteger} {:instruction float_pop} {:instruction integer_max} {:instruction integer_flush} {:instruction in1} {:instruction in1} {:instruction float_inc} {:instruction in2} {:instruction integer_add} {:instruction float_inc} {:instruction integer_add} {:instruction float_inc} {:instruction float_inc} {:instruction integer_max} {:instruction float_inc} {:instruction float_dup_times} {:instruction float_rot} {:instruction float_stackdepth} {:instruction float_inc} {:instruction float_dup_times} {:instruction float_yank} {:instruction float_dup_times} {:instruction integer_add} {:instruction 25} {:instruction integer_flush} {:instruction integer_add} {:instruction integer_swap} {:instruction float_inc} {:instruction 77.91830066263515} {:instruction integer_inc} {:instruction float_shove} {:instruction integer_yankdup} {:instruction integer_fromfloat} {:instruction integer_add} {:instruction print_float} {:instruction integer_stackdepth} {:instruction integer_dup_times} {:instruction integer_shove} {:instruction float_dup} {:instruction tag_integer_548} {:instruction integer_dup} {:instruction float_mod} {:instruction integer_pop} {:instruction integer_min} {:instruction in2} {:instruction tagged_690} {:instruction integer_swap} {:instruction integer_shove} {:instruction float_dup})
Best program: (float_yank float_sub float_mod float_frominteger float_flush float_min print_integer integer_max float_frominteger float_pop integer_max integer_flush in1 in1 float_inc in2 integer_add float_inc integer_add float_inc float_inc integer_max float_inc float_dup_times float_rot float_stackdepth float_inc float_dup_times float_yank float_dup_times integer_add 25 integer_flush integer_add integer_swap float_inc 77.91830066263515 integer_inc float_shove integer_yankdup integer_fromfloat integer_add print_float integer_stackdepth integer_dup_times integer_shove float_dup tag_integer_548 integer_dup float_mod integer_pop integer_min in2 tagged_690 integer_swap integer_shove float_dup)
Errors: [85.0 12 77.0 2 71.0 2 21.0 2 69.0 2 68.0 3 34.0 2 45.0 12 35.0 2 36.0 2 2.0 1 52.0 3 20.0 1 1.0 1 78.0 3 62.0 2 2.0 1 83.0 9 93.0 12 3.0 1 76.0 3 19.0 2 50.0 1 59.0 3 51.0 3]
Total: 1279.0
Mean: 25.58
Genome size: 57
Size: 58
Percent parens: 0.017
--- Population Statistics ---
Average total errors in population: 3753.870899500001
Median total errors in population: 1329.0
Error averages by case: (180.87185259999995 11.559 162.0806913 3.544 169.57407230000004 3.274 129.39705139999998 3.498 157.68689600000005 3.361 171.46830830000002 4.416 138.26390209999997 3.247 136.10537769999996 11.324 138.78097909999994 3.272 134.54233180000006 3.502 104.11974670000004 1.93 156.37764519999996 4.447 113.80936659999998 3.369 105.51140820000003 2.506 171.38184049999995 3.632 160.5775471 3.49 101.54695270000002 1.988 173.1031547 9.625 189.7692797 13.092 106.07802590000004 2.393 169.37419200000002 4.323 110.7698452 3.34 144.67142240000004 3.472 164.1200725000001 4.461 147.22793749999994 3.596)
Error minima by case: (73.6163 10 0.7732 1 0.5956 1 19.0 1 8.7732 1 0.106 2 21.9137 1 3.4975 7 14.7328 1 25.0 1 0.0 0 4.8622 2 0.0374 1 0.0 0 0.2268 1 53.9385 1 0.0 0 0.0129 6 38.1199 9 0.1424 1 1.7732 2 0.7564 1 9.2985 1 3.1443 2 26.7732 1)
Average genome size in population (length): 57.132
Average program size in population (points): 58.132
Average percent parens in population: 0.018
Minimum age in population: 57.30164309826432
Maximum age in population: 61.7517863954663
Average age in population: 59.83791083990736
Median age in population: 59.87277732129178
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 7
Genome diversity (% unique Plush genomes):	 0.845
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 7
Syntactic diversity (% unique Push programs):	 0.845
Total error diversity:				 0.066
Error (vector) diversity:			 0.071
Behavioral diversity:				 0.073
--- Run Statistics ---
Number of program evaluations used so far: 42000
Number of point (instruction) evaluations so far: 59866514
--- Timings ---
Current time: 1529616070253 milliseconds
Total Time:         134.8 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        55.4 seconds, 41.1%
Fitness Testing:     62.7 seconds, 46.5%
Report:              16.6 seconds, 12.3%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 41
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 42
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 42
;;******************************
;; -*- Number IO problem report - generation 42
Test total error for best: 51257.0
Test mean error for best: 25.62850
;;------------------------------
Outputs of best individual on training cases:
Correct output: -74.6179542037 | Program output: 8.3820457963  
Correct output: 78.7609586813  | Program output: 1.7609586813  
Correct output: 3.0100598709   | Program output: 72.0100598709 
Correct output: -99.2368061293 | Program output: -80.2368061293
Correct output: 88.6808415603  | Program output: 19.6808415603 
Correct output: -151.1060419578 | Program output: -85.1060419578
Correct output: 56.004616184   | Program output: 88.004616184  
Correct output: 33.520660154   | Program output: -11.479339846 
Correct output: 42.238861085   | Program output: 75.238861085  
Correct output: -49.0227893765 | Program output: -85.0227893765
Correct output: 103.4057483059 | Program output: 101.4057483059
Correct output: -106.1378273779 | Program output: -56.1378273779
Correct output: 37.9625599991  | Program output: 17.9625599991 
Correct output: 71.9208193203  | Program output: 72.9208193203 
Correct output: 173.5348464317 | Program output: 95.5348464317 
Correct output: -77.0615185935 | Program output: -17.0615185935
Correct output: -20.7643622555 | Program output: -22.7643622555
Correct output: 1.9827630815   | Program output: -81.0172369185
Correct output: -39.1198682611 | Program output: 51.8801317389 
Correct output: 1.1392376036   | Program output: 2.1392376036  
Correct output: 129.1930977679 | Program output: 53.1930977679 
Correct output: 26.7496211861  | Program output: 7.7496211861  
Correct output: -11.2984801384 | Program output: -61.2984801384
Correct output: -136.1442960385 | Program output: -79.1442960385
Correct output: 143.0911996605 | Program output: 92.0911996605 
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_yank} {:instruction float_sub} {:instruction float_inc} {:instruction float_frominteger} {:instruction float_pop} {:instruction integer_max} {:instruction integer_flush} {:instruction in1} {:instruction in1} {:instruction float_inc} {:instruction in2} {:instruction integer_add} {:instruction float_inc} {:instruction integer_add} {:instruction float_inc} {:instruction float_inc} {:instruction integer_max} {:instruction float_inc} {:instruction float_dup_times} {:instruction float_rot} {:instruction float_stackdepth} {:instruction float_inc} {:instruction float_dup_times} {:instruction float_inc} {:instruction float_dup_times} {:instruction integer_add} {:instruction 25} {:instruction in1} {:instruction float_shove} {:instruction integer_swap} {:instruction integer_shove} {:instruction float_rot} {:instruction integer_shove} {:instruction float_inc} {:instruction float_inc} {:instruction integer_yank} {:instruction integer_shove} {:instruction float_inc} {:instruction float_dup_times} {:instruction float_swap} {:instruction print_float} {:instruction integer_dec} {:instruction float_rot} {:instruction -49} {:instruction in1} {:instruction float_dup_times} {:instruction float_mod} {:instruction tagged_602} {:instruction integer_min} {:instruction float_dup} {:instruction integer_dup_times} {:instruction integer_shove} {:instruction float_dup} {:instruction integer_dup_times} {:instruction integer_dup} {:instruction float_mod} {:instruction integer_stackdepth} {:instruction integer_min} {:instruction float_sub} {:instruction tagged_690} {:instruction integer_swap} {:instruction integer_min} {:instruction float_shove})
Best program: (float_yank float_sub float_inc float_frominteger float_pop integer_max integer_flush in1 in1 float_inc in2 integer_add float_inc integer_add float_inc float_inc integer_max float_inc float_dup_times float_rot float_stackdepth float_inc float_dup_times float_inc float_dup_times integer_add 25 in1 float_shove integer_swap integer_shove float_rot integer_shove float_inc float_inc integer_yank integer_shove float_inc float_dup_times float_swap print_float integer_dec float_rot -49 in1 float_dup_times float_mod tagged_602 integer_min float_dup integer_dup_times integer_shove float_dup integer_dup_times integer_dup float_mod integer_stackdepth integer_min float_sub tagged_690 integer_swap integer_min float_shove)
Errors: [83.0 12 77.0 2 69.0 2 19.0 2 69.0 2 66.0 2 32.0 2 45.0 12 33.0 2 36.0 2 2.0 1 50.0 2 20.0 1 1.0 1 78.0 3 60.0 1 2.0 1 83.0 9 91.0 13 1.0 1 76.0 3 19.0 2 50.0 1 57.0 3 51.0 3]
Total: 1255.0
Mean: 25.1
Genome size: 63
Size: 64
Percent parens: 0.016
--- Population Statistics ---
Average total errors in population: 4309.1340039
Median total errors in population: 1329.0
Error averages by case: (203.69998999999999 11.668 184.6093913 3.736 192.02144570000004 3.45 151.57893370000002 3.655 180.89898880000004 3.503 192.55482130000001 4.573 161.16371509999996 3.405 159.44777959999996 11.479 161.7375372 3.401 154.84547050000003 3.642 125.7638104 2.119 178.07519699999997 4.575 138.06686 3.508 126.81722460000003 2.655 191.75954629999998 3.78 183.6840746 3.628 124.20298029999996 2.132 194.27236439999996 9.768 211.467204 13.197 129.9493124 2.559 189.07312090000002 4.455 134.3953404 3.446 166.07643389999998 3.609 184.6032262 4.576 168.10423529999997 3.746)
Error minima by case: (34.0961 8 0.8427 1 0.0 0 19.0 1 4.7824 1 7.106 2 32.0 1 0.9231 1 20.8985 1 8.0769 1 0.0 0 2.8622 2 4.0374 1 0.0 0 12.5348 1 6.5125 1 0.0 0 0.3318 1 37.1199 10 0.1392 1 24.8069 2 9.0 1 5.9231 1 10.1443 2 6.9231 2)
Average genome size in population (length): 56.793
Average program size in population (points): 57.793
Average percent parens in population: 0.018
Minimum age in population: 58.59523472427645
Maximum age in population: 63.20265916151675
Average age in population: 61.27588782045264
Median age in population: 61.32023679863619
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 7
Genome diversity (% unique Plush genomes):	 0.837
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 7
Syntactic diversity (% unique Push programs):	 0.837
Total error diversity:				 0.079
Error (vector) diversity:			 0.087
Behavioral diversity:				 0.089
--- Run Statistics ---
Number of program evaluations used so far: 43000
Number of point (instruction) evaluations so far: 61287214
--- Timings ---
Current time: 1529616073435 milliseconds
Total Time:         137.9 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        56.7 seconds, 41.1%
Fitness Testing:     64.1 seconds, 46.5%
Report:              17.0 seconds, 12.3%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 42
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 43
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 43
;;******************************
;; -*- Number IO problem report - generation 43
Test total error for best: 45924.738399999915
Test mean error for best: 22.96237
;;------------------------------
Outputs of best individual on training cases:
Correct output: -74.6179542037 | Program output: -67.5362548664
Correct output: 78.7609586813  | Program output: 1.7609586813  
Correct output: 3.0100598709   | Program output: -3.9082407918 
Correct output: -99.2368061293 | Program output: -156.155106792
Correct output: 88.6808415603  | Program output: 19.6808415603 
Correct output: -151.1060419578 | Program output: -161.0243426204
Correct output: 56.004616184   | Program output: 12.0863155213 
Correct output: 33.520660154   | Program output: -11.479339846 
Correct output: 42.238861085   | Program output: -0.6794395776 
Correct output: -49.0227893765 | Program output: -85.0227893765
Correct output: 103.4057483059 | Program output: 101.4057483059
Correct output: -106.1378273779 | Program output: -132.0561280406
Correct output: 37.9625599991  | Program output: 17.9625599991 
Correct output: 71.9208193203  | Program output: 72.9208193203 
Correct output: 173.5348464317 | Program output: 95.5348464317 
Correct output: -77.0615185935 | Program output: -92.9798192561
Correct output: -20.7643622555 | Program output: -22.7643622555
Correct output: 1.9827630815   | Program output: -81.0172369185
Correct output: -39.1198682611 | Program output: -24.0381689237
Correct output: 1.1392376036   | Program output: -73.7790630591
Correct output: 129.1930977679 | Program output: 53.1930977679 
Correct output: 26.7496211861  | Program output: 7.7496211861  
Correct output: -11.2984801384 | Program output: -61.2984801384
Correct output: -136.1442960385 | Program output: -155.0625967012
Correct output: 143.0911996605 | Program output: 92.0911996605 
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_yank} {:instruction float_sub} {:instruction float_mod} {:instruction float_frominteger} {:instruction float_flush} {:instruction float_min} {:instruction print_integer} {:instruction integer_max} {:instruction float_frominteger} {:instruction float_pop} {:instruction integer_max} {:instruction integer_flush} {:instruction in1} {:instruction in1} {:instruction float_inc} {:instruction in2} {:instruction integer_add} {:instruction float_inc} {:instruction integer_add} {:instruction float_inc} {:instruction float_inc} {:instruction integer_max} {:instruction float_inc} {:instruction float_dup_times} {:instruction float_rot} {:instruction float_stackdepth} {:instruction float_inc} {:instruction float_dup_times} {:instruction float_yank} {:instruction float_dup_times} {:instruction integer_add} {:instruction 25} {:instruction integer_flush} {:instruction integer_add} {:instruction integer_swap} {:instruction float_inc} {:instruction 77.91830066263515} {:instruction float_rot} {:instruction float_dup_times} {:instruction float_rot} {:instruction integer_shove} {:instruction float_inc} {:instruction float_sub} {:instruction float_rot} {:instruction integer_shove} {:instruction float_inc} {:instruction integer_swap} {:instruction integer_yankdup} {:instruction print_float} {:instruction integer_dec} {:instruction integer_flush} {:instruction float_dup_times} {:instruction float_div} {:instruction float_mult} {:instruction integer_shove} {:instruction float_dup} {:instruction integer_dup_times} {:instruction integer_dup} {:instruction float_mod} {:instruction integer_stackdepth} {:instruction float_dup} {:instruction integer_dup_times} {:instruction integer_dup} {:instruction float_mod} {:instruction integer_stackdepth} {:instruction integer_dup_times} {:instruction integer_dup})
Best program: (float_yank float_sub float_mod float_frominteger float_flush float_min print_integer integer_max float_frominteger float_pop integer_max integer_flush in1 in1 float_inc in2 integer_add float_inc integer_add float_inc float_inc integer_max float_inc float_dup_times float_rot float_stackdepth float_inc float_dup_times float_yank float_dup_times integer_add 25 integer_flush integer_add integer_swap float_inc 77.91830066263515 float_rot float_dup_times float_rot integer_shove float_inc float_sub float_rot integer_shove float_inc integer_swap integer_yankdup print_float integer_dec integer_flush float_dup_times float_div float_mult integer_shove float_dup integer_dup_times integer_dup float_mod integer_stackdepth float_dup integer_dup_times integer_dup float_mod integer_stackdepth integer_dup_times integer_dup)
Errors: [7.0817 10 77.0 2 6.9183 10 56.9183 10 69.0 2 9.9183 10 43.9183 10 45.0 12 42.9183 12 36.0 2 2.0 1 25.9183 11 20.0 1 1.0 1 78.0 3 15.9183 11 2.0 1 83.0 9 15.0817 10 74.9183 12 76.0 3 19.0 2 50.0 1 18.9183 10 51.0 3]
Total: 1086.4281
Mean: 21.728561
Genome size: 67
Size: 68
Percent parens: 0.015
--- Population Statistics ---
Average total errors in population: 3810.2332271000014
Median total errors in population: 1329.0
Error averages by case: (178.48190290000002 11.706 169.80311159999997 3.838 165.88284460000003 3.291 127.25194930000002 3.497 163.91921540000007 3.411 169.30657280000003 4.453 133.97136840000005 3.268 143.41045659999997 11.628 134.69620199999994 3.275 139.80311790000002 3.591 109.1633432 2.212 154.24758710000003 4.466 120.39841220000004 3.381 110.01364250000002 2.552 176.3929442 3.817 160.7215449 3.506 107.9905212 2.227 179.45073599999998 9.835 185.9519036 13.057 105.0110037 2.4 173.58622440000005 4.365 117.5829392 3.368 151.0487543 3.486 161.11120790000007 4.358 152.3027212 3.745)
Error minima by case: (6.382 8 0.1573 1 0.873 1 11.7867 1 9.7625 1 7.106 2 21.9137 1 10.034 9 18.7522 1 3.5162 1 0.0 0 2.8622 2 4.0374 1 0.0 0 12.5348 2 10.3886 1 0.0 0 0.0386 6 13.4191 8 0.1392 1 24.8069 2 1.2504 1 10.2985 1 10.1443 2 36.0912 2)
Average genome size in population (length): 56.173
Average program size in population (points): 57.173
Average percent parens in population: 0.018
Minimum age in population: 59.59523472427645
Maximum age in population: 64.72846359920595
Average age in population: 62.7325260450414
Median age in population: 62.78555602608526
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 17
Genome diversity (% unique Plush genomes):	 0.799
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 17
Syntactic diversity (% unique Push programs):	 0.799
Total error diversity:				 0.102
Error (vector) diversity:			 0.111
Behavioral diversity:				 0.111
--- Run Statistics ---
Number of program evaluations used so far: 44000
Number of point (instruction) evaluations so far: 62695875
--- Timings ---
Current time: 1529616076654 milliseconds
Total Time:         141.2 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        58.0 seconds, 41.1%
Fitness Testing:     65.6 seconds, 46.5%
Report:              17.5 seconds, 12.4%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 43
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 44
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 44
;;******************************
;; -*- Number IO problem report - generation 44
Test total error for best: 45924.738399999915
Test mean error for best: 22.96237
;;------------------------------
Outputs of best individual on training cases:
Correct output: -74.6179542037 | Program output: -67.5362548664
Correct output: 78.7609586813  | Program output: 1.7609586813  
Correct output: 3.0100598709   | Program output: -3.9082407918 
Correct output: -99.2368061293 | Program output: -156.155106792
Correct output: 88.6808415603  | Program output: 19.6808415603 
Correct output: -151.1060419578 | Program output: -161.0243426204
Correct output: 56.004616184   | Program output: 12.0863155213 
Correct output: 33.520660154   | Program output: -11.479339846 
Correct output: 42.238861085   | Program output: -0.6794395776 
Correct output: -49.0227893765 | Program output: -85.0227893765
Correct output: 103.4057483059 | Program output: 101.4057483059
Correct output: -106.1378273779 | Program output: -132.0561280406
Correct output: 37.9625599991  | Program output: 17.9625599991 
Correct output: 71.9208193203  | Program output: 72.9208193203 
Correct output: 173.5348464317 | Program output: 95.5348464317 
Correct output: -77.0615185935 | Program output: -92.9798192561
Correct output: -20.7643622555 | Program output: -22.7643622555
Correct output: 1.9827630815   | Program output: -81.0172369185
Correct output: -39.1198682611 | Program output: -24.0381689237
Correct output: 1.1392376036   | Program output: -73.7790630591
Correct output: 129.1930977679 | Program output: 53.1930977679 
Correct output: 26.7496211861  | Program output: 7.7496211861  
Correct output: -11.2984801384 | Program output: -61.2984801384
Correct output: -136.1442960385 | Program output: -155.0625967012
Correct output: 143.0911996605 | Program output: 92.0911996605 
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_yank} {:instruction float_sub} {:instruction float_mod} {:instruction float_frominteger} {:instruction float_flush} {:instruction float_min} {:instruction print_integer} {:instruction integer_max} {:instruction float_frominteger} {:instruction float_pop} {:instruction integer_max} {:instruction integer_flush} {:instruction in1} {:instruction in1} {:instruction float_inc} {:instruction in2} {:instruction integer_add} {:instruction float_inc} {:instruction integer_add} {:instruction float_inc} {:instruction float_inc} {:instruction integer_max} {:instruction float_inc} {:instruction float_dup_times} {:instruction float_rot} {:instruction float_stackdepth} {:instruction float_inc} {:instruction float_dup_times} {:instruction float_yank} {:instruction float_dup_times} {:instruction integer_add} {:instruction 25} {:instruction integer_flush} {:instruction integer_add} {:instruction integer_swap} {:instruction float_inc} {:instruction 77.91830066263515} {:instruction float_rot} {:instruction float_dup_times} {:instruction float_rot} {:instruction integer_shove} {:instruction float_inc} {:instruction float_sub} {:instruction float_rot} {:instruction integer_shove} {:instruction float_inc} {:instruction integer_swap} {:instruction integer_yankdup} {:instruction print_float} {:instruction integer_dec} {:instruction integer_flush} {:instruction float_dup_times} {:instruction float_div} {:instruction float_mult} {:instruction integer_shove} {:instruction float_dup} {:instruction integer_dup_times} {:instruction integer_dup} {:instruction float_mod} {:instruction integer_stackdepth} {:instruction float_dup} {:instruction integer_dup_times} {:instruction integer_dup} {:instruction float_mod} {:instruction integer_stackdepth} {:instruction integer_dup_times})
Best program: (float_yank float_sub float_mod float_frominteger float_flush float_min print_integer integer_max float_frominteger float_pop integer_max integer_flush in1 in1 float_inc in2 integer_add float_inc integer_add float_inc float_inc integer_max float_inc float_dup_times float_rot float_stackdepth float_inc float_dup_times float_yank float_dup_times integer_add 25 integer_flush integer_add integer_swap float_inc 77.91830066263515 float_rot float_dup_times float_rot integer_shove float_inc float_sub float_rot integer_shove float_inc integer_swap integer_yankdup print_float integer_dec integer_flush float_dup_times float_div float_mult integer_shove float_dup integer_dup_times integer_dup float_mod integer_stackdepth float_dup integer_dup_times integer_dup float_mod integer_stackdepth integer_dup_times)
Errors: [7.0817 10 77.0 2 6.9183 10 56.9183 10 69.0 2 9.9183 10 43.9183 10 45.0 12 42.9183 12 36.0 2 2.0 1 25.9183 11 20.0 1 1.0 1 78.0 3 15.9183 11 2.0 1 83.0 9 15.0817 10 74.9183 12 76.0 3 19.0 2 50.0 1 18.9183 10 51.0 3]
Total: 1086.4281
Mean: 21.728561
Genome size: 66
Size: 67
Percent parens: 0.015
--- Population Statistics ---
Average total errors in population: 3599.4154375000007
Median total errors in population: 1291.0
Error averages by case: (182.17476660000003 12.035 154.7341122 3.917 169.2552128 3.308 129.63110540000005 3.531 148.22255230000005 3.242 170.95370390000002 4.484 137.5215246 3.307 126.64936169999997 11.971 138.35530709999995 3.308 121.12229210000001 3.405 92.04585140000002 2.502 156.28119049999998 4.49 104.39731470000002 3.037 90.75982510000001 2.395 159.5580064 4.017 163.47714259999998 3.534 91.19251690000002 2.436 160.8547641 9.987 189.2590817000001 12.902 106.8987485 2.433 156.4939719 4.153 100.85901949999996 3.187 132.13876489999998 3.132 162.917179 4.171 135.00212159999998 3.776)
Error minima by case: (6.0817 9 0.1573 1 0.234 1 19.0 1 9.7625 1 9.9183 2 13.0 1 20.4793 9 13.0 1 13.0 1 0.0 0 11.1378 2 8.9626 1 0.0 0 1.4652 2 15.9183 1 0.0 0 0.0296 7 14.0817 9 0.0495 1 26.0923 2 1.2504 1 12.2253 1 18.9183 2 22.0912 2)
Average genome size in population (length): 55.463
Average program size in population (points): 56.463
Average percent parens in population: 0.018
Minimum age in population: 62.2467561420749
Maximum age in population: 66.16292746253464
Average age in population: 64.25877580658309
Median age in population: 64.27794599350847
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 30
Genome diversity (% unique Plush genomes):	 0.705
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 30
Syntactic diversity (% unique Push programs):	 0.705
Total error diversity:				 0.135
Error (vector) diversity:			 0.145
Behavioral diversity:				 0.146
--- Run Statistics ---
Number of program evaluations used so far: 45000
Number of point (instruction) evaluations so far: 64095394
--- Timings ---
Current time: 1529616079890 milliseconds
Total Time:         144.4 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        59.3 seconds, 41.0%
Fitness Testing:     67.1 seconds, 46.5%
Report:              17.9 seconds, 12.4%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 44
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 45
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 45
;;******************************
;; -*- Number IO problem report - generation 45
Test total error for best: 45245.88219999992
Test mean error for best: 22.62294
;;------------------------------
Outputs of best individual on training cases:
Correct output: -74.6179542037 | Program output: -66.5362548664
Correct output: 78.7609586813  | Program output: 2.7609586813  
Correct output: 3.0100598709   | Program output: -2.9082407918 
Correct output: -99.2368061293 | Program output: -155.155106792
Correct output: 88.6808415603  | Program output: 20.6808415603 
Correct output: -151.1060419578 | Program output: -160.0243426204
Correct output: 56.004616184   | Program output: 13.0863155213 
Correct output: 33.520660154   | Program output: -10.479339846 
Correct output: 42.238861085   | Program output: 0.3205604224  
Correct output: -49.0227893765 | Program output: -84.0227893765
Correct output: 103.4057483059 | Program output: 102.4057483059
Correct output: -106.1378273779 | Program output: -131.0561280406
Correct output: 37.9625599991  | Program output: 18.9625599991 
Correct output: 71.9208193203  | Program output: 73.9208193203 
Correct output: 173.5348464317 | Program output: 96.5348464317 
Correct output: -77.0615185935 | Program output: -91.9798192561
Correct output: -20.7643622555 | Program output: -21.7643622555
Correct output: 1.9827630815   | Program output: -80.0172369185
Correct output: -39.1198682611 | Program output: -23.0381689237
Correct output: 1.1392376036   | Program output: -72.7790630591
Correct output: 129.1930977679 | Program output: 54.1930977679 
Correct output: 26.7496211861  | Program output: 8.7496211861  
Correct output: -11.2984801384 | Program output: -60.2984801384
Correct output: -136.1442960385 | Program output: -154.0625967012
Correct output: 143.0911996605 | Program output: 93.0911996605 
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_yank} {:instruction float_sub} {:instruction float_mod} {:instruction float_frominteger} {:instruction float_flush} {:instruction float_min} {:instruction print_integer} {:instruction integer_max} {:instruction float_frominteger} {:instruction float_pop} {:instruction integer_max} {:instruction integer_flush} {:instruction in1} {:instruction in1} {:instruction float_inc} {:instruction in2} {:instruction integer_add} {:instruction float_inc} {:instruction integer_add} {:instruction float_inc} {:instruction float_inc} {:instruction integer_max} {:instruction float_inc} {:instruction float_dup_times} {:instruction float_rot} {:instruction float_stackdepth} {:instruction float_inc} {:instruction float_dup_times} {:instruction float_yank} {:instruction float_dup_times} {:instruction integer_add} {:instruction 25} {:instruction float_stackdepth} {:instruction float_inc} {:instruction float_dup_times} {:instruction float_yank} {:instruction float_dup_times} {:instruction integer_add} {:instruction 25} {:instruction integer_flush} {:instruction integer_add} {:instruction integer_swap} {:instruction float_inc} {:instruction 77.91830066263515} {:instruction float_rot} {:instruction float_dup_times} {:instruction float_rot} {:instruction integer_shove} {:instruction float_inc} {:instruction float_sub} {:instruction float_rot} {:instruction integer_shove} {:instruction float_inc} {:instruction integer_swap} {:instruction integer_yankdup} {:instruction print_float} {:instruction integer_dec} {:instruction integer_flush} {:instruction float_dup_times} {:instruction float_div} {:instruction float_mult} {:instruction integer_shove} {:instruction float_dup} {:instruction integer_dup_times} {:instruction integer_dup} {:instruction float_mod} {:instruction integer_stackdepth} {:instruction float_dup} {:instruction integer_dup_times} {:instruction integer_dup} {:instruction float_mod} {:instruction float_dup} {:instruction float_flush} {:instruction print_float} {:instruction integer_dec} {:instruction float_max} {:instruction integer_dup} {:instruction float_dup_times} {:instruction float_div} {:instruction print_float} {:instruction integer_shove})
Best program: (float_yank float_sub float_mod float_frominteger float_flush float_min print_integer integer_max float_frominteger float_pop integer_max integer_flush in1 in1 float_inc in2 integer_add float_inc integer_add float_inc float_inc integer_max float_inc float_dup_times float_rot float_stackdepth float_inc float_dup_times float_yank float_dup_times integer_add 25 float_stackdepth float_inc float_dup_times float_yank float_dup_times integer_add 25 integer_flush integer_add integer_swap float_inc 77.91830066263515 float_rot float_dup_times float_rot integer_shove float_inc float_sub float_rot integer_shove float_inc integer_swap integer_yankdup print_float integer_dec integer_flush float_dup_times float_div float_mult integer_shove float_dup integer_dup_times integer_dup float_mod integer_stackdepth float_dup integer_dup_times integer_dup float_mod float_dup float_flush print_float integer_dec float_max integer_dup float_dup_times float_div print_float integer_shove)
Errors: [8.0817 10 76.0 2 5.9183 11 55.9183 10 68.0 2 8.9183 11 42.9183 10 44.0 12 41.9183 11 35.0 2 1.0 1 24.9183 11 19.0 2 2.0 1 77.0 3 14.9183 11 1.0 1 82.0 10 16.0817 10 73.9183 12 75.0 3 18.0 2 49.0 2 17.9183 10 50.0 2]
Total: 1070.4281
Mean: 21.408562
Genome size: 81
Size: 82
Percent parens: 0.012
--- Population Statistics ---
Average total errors in population: 3437.766704900002
Median total errors in population: 1279.0
Error averages by case: (173.97113260000003 12.099 147.54105429999996 3.451 159.8225094 3.494 123.94711810000008 3.649 142.77347269999999 3.06 163.1645701 4.559 129.34081600000005 3.527 120.69432229999993 11.988 130.33550419999995 3.593 116.8300901 3.342 85.92188170000001 2.349 148.89713100000003 4.625 99.06060090000003 2.72 83.8110452 2.174 154.89630439999996 4.034 155.91313350000001 3.647 85.05274530000001 2.477 155.77649460000004 9.833 179.7966582 12.614 102.00288239999999 2.73 151.661243 3.978 95.44961019999998 3.032 127.40443699999999 2.883 155.48369440000005 4.436 130.1022533 3.822)
Error minima by case: (5.0817 10 0.1573 2 0.9962 1 19.0 1 8.7625 1 8.9183 2 20.9137 1 7.5207 9 16.2389 1 31.0 1 0.0 0 2.8622 2 1.3163 1 0.0 0 9.5348 2 14.9183 1 0.0 0 0.0172 7 13.0817 9 0.1369 1 22.8069 2 0.7496 1 3.7335 1 13.1443 2 33.0912 2)
Average genome size in population (length): 56.347
Average program size in population (points): 57.347
Average percent parens in population: 0.018
Minimum age in population: 63.37641394530328
Maximum age in population: 67.58090784989565
Average age in population: 65.72361915770708
Median age in population: 65.80220588044929
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 40
Genome diversity (% unique Plush genomes):	 0.676
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 40
Syntactic diversity (% unique Push programs):	 0.676
Total error diversity:				 0.131
Error (vector) diversity:			 0.143
Behavioral diversity:				 0.143
--- Run Statistics ---
Number of program evaluations used so far: 46000
Number of point (instruction) evaluations so far: 65518241
--- Timings ---
Current time: 1529616083358 milliseconds
Total Time:         147.7 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        60.6 seconds, 41.0%
Fitness Testing:     68.7 seconds, 46.5%
Report:              18.3 seconds, 12.4%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 45
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 46
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 46
;;******************************
;; -*- Number IO problem report - generation 46
Test total error for best: 43481.88219999992
Test mean error for best: 21.74094
;;------------------------------
Outputs of best individual on training cases:
Correct output: -74.6179542037 | Program output: -66.5362548664
Correct output: 78.7609586813  | Program output: 6.7609586813  
Correct output: 3.0100598709   | Program output: -2.9082407918 
Correct output: -99.2368061293 | Program output: -155.155106792
Correct output: 88.6808415603  | Program output: 24.6808415603 
Correct output: -151.1060419578 | Program output: -160.0243426204
Correct output: 56.004616184   | Program output: 13.0863155213 
Correct output: 33.520660154   | Program output: -6.479339846  
Correct output: 42.238861085   | Program output: 0.3205604224  
Correct output: -49.0227893765 | Program output: -80.0227893765
Correct output: 103.4057483059 | Program output: 106.4057483059
Correct output: -106.1378273779 | Program output: -131.0561280406
Correct output: 37.9625599991  | Program output: 22.9625599991 
Correct output: 71.9208193203  | Program output: 77.9208193203 
Correct output: 173.5348464317 | Program output: 100.5348464317
Correct output: -77.0615185935 | Program output: -91.9798192561
Correct output: -20.7643622555 | Program output: -17.7643622555
Correct output: 1.9827630815   | Program output: -76.0172369185
Correct output: -39.1198682611 | Program output: -23.0381689237
Correct output: 1.1392376036   | Program output: -72.7790630591
Correct output: 129.1930977679 | Program output: 58.1930977679 
Correct output: 26.7496211861  | Program output: 12.7496211861 
Correct output: -11.2984801384 | Program output: -56.2984801384
Correct output: -136.1442960385 | Program output: -154.0625967012
Correct output: 143.0911996605 | Program output: 97.0911996605 
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_yank} {:instruction float_sub} {:instruction float_inc} {:instruction float_frominteger} {:instruction float_pop} {:instruction integer_max} {:instruction integer_flush} {:instruction in1} {:instruction in1} {:instruction float_inc} {:instruction in2} {:instruction integer_add} {:instruction float_inc} {:instruction integer_add} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction in2} {:instruction integer_add} {:instruction float_inc} {:instruction integer_add} {:instruction float_inc} {:instruction float_inc} {:instruction integer_max} {:instruction float_inc} {:instruction float_dup_times} {:instruction float_rot} {:instruction float_stackdepth} {:instruction float_inc} {:instruction float_dup_times} {:instruction float_yank} {:instruction float_dup_times} {:instruction integer_add} {:instruction 25} {:instruction integer_flush} {:instruction integer_add} {:instruction float_rot} {:instruction float_stackdepth} {:instruction float_inc} {:instruction float_dup_times} {:instruction float_yank} {:instruction float_dup_times} {:instruction integer_add} {:instruction 25} {:instruction integer_flush} {:instruction integer_add} {:instruction integer_swap} {:instruction float_inc} {:instruction 77.91830066263515} {:instruction float_rot} {:instruction float_dup_times} {:instruction float_rot} {:instruction integer_shove} {:instruction float_inc} {:instruction float_sub} {:instruction float_rot} {:instruction integer_shove} {:instruction float_inc} {:instruction integer_swap} {:instruction integer_yankdup} {:instruction print_float} {:instruction integer_dec} {:instruction integer_flush} {:instruction float_dup_times} {:instruction float_div} {:instruction float_mult} {:instruction integer_shove} {:instruction float_dup} {:instruction integer_dup_times} {:instruction integer_dup} {:instruction float_mod} {:instruction integer_stackdepth} {:instruction float_dup} {:instruction integer_dup_times} {:instruction integer_dup} {:instruction float_mod})
Best program: (float_yank float_sub float_inc float_frominteger float_pop integer_max integer_flush in1 in1 float_inc in2 integer_add float_inc integer_add float_inc float_inc float_inc in2 integer_add float_inc integer_add float_inc float_inc integer_max float_inc float_dup_times float_rot float_stackdepth float_inc float_dup_times float_yank float_dup_times integer_add 25 integer_flush integer_add float_rot float_stackdepth float_inc float_dup_times float_yank float_dup_times integer_add 25 integer_flush integer_add integer_swap float_inc 77.91830066263515 float_rot float_dup_times float_rot integer_shove float_inc float_sub float_rot integer_shove float_inc integer_swap integer_yankdup print_float integer_dec integer_flush float_dup_times float_div float_mult integer_shove float_dup integer_dup_times integer_dup float_mod integer_stackdepth float_dup integer_dup_times integer_dup float_mod)
Errors: [8.0817 10 72.0 2 5.9183 11 55.9183 10 64.0 2 8.9183 11 42.9183 10 40.0 11 41.9183 11 31.0 2 3.0 1 24.9183 11 15.0 2 6.0 1 73.0 2 14.9183 11 3.0 2 78.0 10 16.0817 10 73.9183 12 71.0 3 14.0 2 45.0 2 17.9183 10 46.0 3]
Total: 1034.4281
Mean: 20.688562
Genome size: 76
Size: 77
Percent parens: 0.013
--- Population Statistics ---
Average total errors in population: 3485.640932000001
Median total errors in population: 1255.0
Error averages by case: (167.75369380000012 11.929 149.76144899999997 3.608 156.73946740000008 4.66 134.00312930000032 4.801 142.9968605 3.065 160.95450299999996 5.395 135.57760520000028 4.618 121.59558789999991 11.929 137.01776290000018 4.894 118.59479260000005 3.48 87.24978530000001 2.355 150.88733160000007 5.557 98.97312750000003 2.747 85.7204521 2.221 155.94237099999995 4.033 154.9328797000001 4.742 86.60399800000002 2.7 157.17680040000008 9.92 174.65338300000022 12.523 116.42274290000029 4.198 152.24974850000004 4.003 95.88285079999994 3.028 128.8993667 3.047 155.62775900000008 5.467 130.6124839 3.891)
Error minima by case: (3.0817 9 0.1573 1 0.4672 1 16.5336 1 8.7625 1 7.9183 2 21.9137 1 20.6022 9 33.0 1 30.0 1 0.0 0 0.8622 2 0.9626 1 0.0 0 8.5348 2 5.6417 1 0.0 0 0.0172 8 11.0817 10 0.1416 1 19.8069 2 7.3085 1 8.2985 1 15.1443 2 32.0912 2)
Average genome size in population (length): 60.242
Average program size in population (points): 61.242
Average percent parens in population: 0.017
Minimum age in population: 64.69733406075466
Maximum age in population: 68.93017693245355
Average age in population: 67.26471596991993
Median age in population: 67.30281865316684
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 59
Genome diversity (% unique Plush genomes):	 0.699
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 59
Syntactic diversity (% unique Push programs):	 0.699
Total error diversity:				 0.171
Error (vector) diversity:			 0.184
Behavioral diversity:				 0.184
--- Run Statistics ---
Number of program evaluations used so far: 47000
Number of point (instruction) evaluations so far: 67029899
--- Timings ---
Current time: 1529616086792 milliseconds
Total Time:         151.2 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        62.0 seconds, 41.0%
Fitness Testing:     70.3 seconds, 46.5%
Report:              18.9 seconds, 12.5%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 46
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 47
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 47
;;******************************
;; -*- Number IO problem report - generation 47
Test total error for best: 45169.94429999992
Test mean error for best: 22.58497
;;------------------------------
Outputs of best individual on training cases:
Correct output: -74.6179542037 | Program output: -66.5362548664
Correct output: 78.7609586813  | Program output: 0.7609586813  
Correct output: 3.0100598709   | Program output: -2.9082407918 
Correct output: -99.2368061293 | Program output: -155.155106792
Correct output: 88.6808415603  | Program output: 18.6808415603 
Correct output: -151.1060419578 | Program output: -160.0243426204
Correct output: 56.004616184   | Program output: 13.0863155213 
Correct output: 33.520660154   | Program output: -12.479339846 
Correct output: 42.238861085   | Program output: 0.3205604224  
Correct output: -49.0227893765 | Program output: -86.0227893765
Correct output: 103.4057483059 | Program output: 100.4057483059
Correct output: -106.1378273779 | Program output: -131.0561280406
Correct output: 37.9625599991  | Program output: 16.9625599991 
Correct output: 71.9208193203  | Program output: 71.9208193203 
Correct output: 173.5348464317 | Program output: 94.5348464317 
Correct output: -77.0615185935 | Program output: -91.9798192561
Correct output: -20.7643622555 | Program output: -23.7643622555
Correct output: 1.9827630815   | Program output: -82.0172369185
Correct output: -39.1198682611 | Program output: -23.0381689237
Correct output: 1.1392376036   | Program output: 3.1392376036  
Correct output: 129.1930977679 | Program output: 52.1930977679 
Correct output: 26.7496211861  | Program output: 6.7496211861  
Correct output: -11.2984801384 | Program output: -62.2984801384
Correct output: -136.1442960385 | Program output: -154.0625967012
Correct output: 143.0911996605 | Program output: 91.0911996605 
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_yank} {:instruction float_sub} {:instruction float_mod} {:instruction float_frominteger} {:instruction float_flush} {:instruction float_min} {:instruction print_integer} {:instruction integer_max} {:instruction float_mult} {:instruction float_pop} {:instruction integer_max} {:instruction integer_flush} {:instruction in1} {:instruction in1} {:instruction float_stackdepth} {:instruction in2} {:instruction integer_add} {:instruction float_inc} {:instruction integer_add} {:instruction float_inc} {:instruction float_inc} {:instruction integer_max} {:instruction float_inc} {:instruction float_dup_times} {:instruction float_rot} {:instruction float_stackdepth} {:instruction float_inc} {:instruction float_dup_times} {:instruction float_yank} {:instruction float_dup_times} {:instruction integer_add} {:instruction 25} {:instruction integer_flush} {:instruction integer_add} {:instruction integer_swap} {:instruction float_inc} {:instruction 77.91830066263515} {:instruction float_rot} {:instruction float_dup_times} {:instruction float_rot} {:instruction integer_shove} {:instruction integer_yankdup} {:instruction float_sub} {:instruction float_rot} {:instruction integer_shove} {:instruction float_inc} {:instruction integer_swap} {:instruction integer_yankdup} {:instruction print_float} {:instruction integer_dec} {:instruction integer_flush} {:instruction float_dup_times} {:instruction float_div} {:instruction float_mult} {:instruction integer_shove} {:instruction float_dup} {:instruction integer_dup_times} {:instruction integer_dup} {:instruction float_mod} {:instruction integer_stackdepth} {:instruction float_dup} {:instruction integer_dup_times} {:instruction integer_dup} {:instruction float_mod} {:instruction integer_stackdepth} {:instruction integer_dup_times})
Best program: (float_yank float_sub float_mod float_frominteger float_flush float_min print_integer integer_max float_mult float_pop integer_max integer_flush in1 in1 float_stackdepth in2 integer_add float_inc integer_add float_inc float_inc integer_max float_inc float_dup_times float_rot float_stackdepth float_inc float_dup_times float_yank float_dup_times integer_add 25 integer_flush integer_add integer_swap float_inc 77.91830066263515 float_rot float_dup_times float_rot integer_shove integer_yankdup float_sub float_rot integer_shove float_inc integer_swap integer_yankdup print_float integer_dec integer_flush float_dup_times float_div float_mult integer_shove float_dup integer_dup_times integer_dup float_mod integer_stackdepth float_dup integer_dup_times integer_dup float_mod integer_stackdepth integer_dup_times)
Errors: [8.0817 10 78.0 2 5.9183 11 55.9183 10 70.0 1 8.9183 11 42.9183 10 46.0 12 41.9183 11 37.0 2 3.0 1 24.9183 11 21.0 2 0.0 0 79.0 3 14.9183 11 3.0 1 84.0 10 16.0817 10 2.0 1 77.0 2 20.0 1 51.0 2 17.9183 10 52.0 3]
Total: 1008.5098
Mean: 20.170197
Genome size: 66
Size: 67
Percent parens: 0.015
--- Population Statistics ---
Average total errors in population: 2890.6812172000045
Median total errors in population: 1203.5892000000001
Error averages by case: (111.08993779999952 11.063 134.7905254 3.625 101.29548070000034 7.701 118.07668470000085 7.573 130.28959609999995 3.099 113.27774140000074 8.221 106.1971244000005 7.519 107.78277579999991 11.895 106.46053980000033 8.427 105.02269280000006 3.559 72.76635750000001 2.452 112.77952090000073 8.661 85.8875165 2.751 70.01740979999998 2.223 142.9982711 4.063 108.66083720000051 8.135 73.31606939999999 2.824 141.25406810000007 9.83 116.39359419999926 11.317 110.35883760000063 8.144 139.10243210000007 4.014 81.8890686 3.086 114.34783440000007 3.051 113.80250710000074 8.06 117.6037938 3.927)
Error minima by case: (0.8042 9 0.1573 1 1.9183 1 10.1761 1 8.7625 1 4.9183 2 21.9137 1 12.0614 8 28.2549 1 26.8003 1 0.0 0 17.0771 2 0.3163 1 0.0 0 7.5348 1 1.0261 1 0.0 0 0.0172 7 12.0817 9 0.3249 1 25.8069 2 2.2504 1 8.2985 1 13.9183 2 31.0912 2)
Average genome size in population (length): 64.187
Average program size in population (points): 65.187
Average percent parens in population: 0.016
Minimum age in population: 66.38769217807896
Maximum age in population: 70.69096366846436
Average age in population: 68.79358980653637
Median age in population: 68.78026426214652
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 24
Genome diversity (% unique Plush genomes):	 0.743
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 24
Syntactic diversity (% unique Push programs):	 0.743
Total error diversity:				 0.201
Error (vector) diversity:			 0.213
Behavioral diversity:				 0.213
--- Run Statistics ---
Number of program evaluations used so far: 48000
Number of point (instruction) evaluations so far: 68636835
--- Timings ---
Current time: 1529616090195 milliseconds
Total Time:         154.7 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        63.3 seconds, 40.9%
Fitness Testing:     71.9 seconds, 46.5%
Report:              19.4 seconds, 12.5%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 47
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 48
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 48
;;******************************
;; -*- Number IO problem report - generation 48
Test total error for best: 44228.18050000016
Test mean error for best: 22.11409
;;------------------------------
Outputs of best individual on training cases:
Correct output: -74.6179542037 | Program output: -65.5373035865
Correct output: 78.7609586813  | Program output: 2.7609586813  
Correct output: 3.0100598709   | Program output: -1.9092895119 
Correct output: -99.2368061293 | Program output: -154.1561555121
Correct output: 88.6808415603  | Program output: 20.6808415603 
Correct output: -151.1060419578 | Program output: -159.0253913406
Correct output: 56.004616184   | Program output: 14.0852668012 
Correct output: 33.520660154   | Program output: -2.0          
Correct output: 42.238861085   | Program output: 1.3195117022  
Correct output: -49.0227893765 | Program output: -2.0          
Correct output: 103.4057483059 | Program output: 102.4057483059
Correct output: -106.1378273779 | Program output: -130.0571767607
Correct output: 37.9625599991  | Program output: 18.9625599991 
Correct output: 71.9208193203  | Program output: 73.9208193203 
Correct output: 173.5348464317 | Program output: 96.5348464317 
Correct output: -77.0615185935 | Program output: -90.9808679763
Correct output: -20.7643622555 | Program output: -2.0          
Correct output: 1.9827630815   | Program output: -2.0          
Correct output: -39.1198682611 | Program output: -22.0392176439
Correct output: 1.1392376036   | Program output: -71.7801117792
Correct output: 129.1930977679 | Program output: 54.1930977679 
Correct output: 26.7496211861  | Program output: 8.7496211861  
Correct output: -11.2984801384 | Program output: -2.0          
Correct output: -136.1442960385 | Program output: -153.0636454213
Correct output: 143.0911996605 | Program output: 93.0911996605 
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_div} {:instruction float_sub} {:instruction float_inc} {:instruction float_frominteger} {:instruction float_pop} {:instruction integer_max} {:instruction integer_flush} {:instruction in1} {:instruction in1} {:instruction float_inc} {:instruction in2} {:instruction integer_add} {:instruction float_inc} {:instruction integer_add} {:instruction float_inc} {:instruction float_inc} {:instruction integer_max} {:instruction float_inc} {:instruction float_dup_times} {:instruction float_rot} {:instruction float_stackdepth} {:instruction integer_max} {:instruction float_inc} {:instruction float_dup_times} {:instruction float_rot} {:instruction float_stackdepth} {:instruction float_inc} {:instruction float_dup_times} {:instruction float_yank} {:instruction float_dup_times} {:instruction integer_add} {:instruction 25} {:instruction integer_flush} {:instruction integer_add} {:instruction integer_swap} {:instruction float_inc} {:instruction 76.91934938276758} {:instruction float_rot} {:instruction float_dup_times} {:instruction float_rot} {:instruction integer_shove} {:instruction float_inc} {:instruction float_sub} {:instruction float_rot} {:instruction integer_shove} {:instruction float_inc} {:instruction integer_swap} {:instruction float_max} {:instruction print_float} {:instruction integer_dec} {:instruction integer_flush} {:instruction float_dup_times} {:instruction float_div} {:instruction float_mult} {:instruction integer_shove} {:instruction float_dup} {:instruction integer_dup_times} {:instruction integer_dup} {:instruction float_mod} {:instruction -25} {:instruction float_dup} {:instruction integer_dup_times} {:instruction integer_dup} {:instruction float_mod} {:instruction float_dup} {:instruction float_flush} {:instruction print_float} {:instruction integer_dec} {:instruction float_max} {:instruction integer_dup})
Best program: (float_div float_sub float_inc float_frominteger float_pop integer_max integer_flush in1 in1 float_inc in2 integer_add float_inc integer_add float_inc float_inc integer_max float_inc float_dup_times float_rot float_stackdepth integer_max float_inc float_dup_times float_rot float_stackdepth float_inc float_dup_times float_yank float_dup_times integer_add 25 integer_flush integer_add integer_swap float_inc 76.91934938276758 float_rot float_dup_times float_rot integer_shove float_inc float_sub float_rot integer_shove float_inc integer_swap float_max print_float integer_dec integer_flush float_dup_times float_div float_mult integer_shove float_dup integer_dup_times integer_dup float_mod -25 float_dup integer_dup_times integer_dup float_mod float_dup float_flush print_float integer_dec float_max integer_dup)
Errors: [9.0807 11 76.0 2 4.9193 10 54.9193 11 68.0 2 7.9193 10 41.9193 10 35.5207 10 40.9193 10 47.0228 11 1.0 1 23.9193 10 19.0 2 2.0 1 77.0 3 13.9193 12 18.7644 11 3.9828 10 17.0807 11 72.9193 12 75.0 3 18.0 2 9.2985 11 16.9193 11 50.0 2]
Total: 994.0243000000002
Mean: 19.880486
Genome size: 70
Size: 71
Percent parens: 0.014
--- Population Statistics ---
Average total errors in population: 2671.339223900007
Median total errors in population: 1086.4281
Error averages by case: (73.57246920000041 10.528 136.23882390000009 3.726 64.33718579999939 9.877 108.60337040000113 9.58 131.42962429999997 3.296 81.5577557999999 10.241 85.18187570000003 9.52 110.4272329999999 11.976 86.96933670000007 10.579 108.12818720000004 3.577 76.54374300000002 2.641 87.86366080000026 10.759 88.61776150000001 2.983 73.94510989999999 2.399 146.2676608 4.251 77.39974559999976 10.495 76.62335459999998 2.717 145.1673764000001 9.937 77.10207600000038 10.597 109.06982880000096 10.644 141.74242389999998 4.184 85.133218 3.306 117.40097950000002 3.067 86.20932650000009 9.874 121.08009660000002 3.973)
Error minima by case: (1.2576 9 0.1573 2 0.0474 1 18.0 1 8.6808 1 0.9183 2 8.8274 1 12.562 7 31.4259 1 4.8529 1 0.0 0 16.9183 2 1.9626 1 0.0 0 13.5348 2 0.1022 1 0.0 0 0.3664 9 13.0817 9 0.0 0 18.8069 2 3.2504 1 7.1811 1 9.9183 2 37.0912 2)
Average genome size in population (length): 68.83
Average program size in population (points): 69.83
Average percent parens in population: 0.014
Minimum age in population: 67.86296260082008
Maximum age in population: 72.21244919213751
Average age in population: 70.17107138780577
Median age in population: 70.19888313467825
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 25
Genome diversity (% unique Plush genomes):	 0.785
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 25
Syntactic diversity (% unique Push programs):	 0.785
Total error diversity:				 0.221
Error (vector) diversity:			 0.239
Behavioral diversity:				 0.239
--- Run Statistics ---
Number of program evaluations used so far: 49000
Number of point (instruction) evaluations so far: 70357760
--- Timings ---
Current time: 1529616093700 milliseconds
Total Time:         158.2 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        64.6 seconds, 40.8%
Fitness Testing:     73.6 seconds, 46.5%
Report:              19.8 seconds, 12.5%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 48
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 49
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 49
;;******************************
;; -*- Number IO problem report - generation 49
Test total error for best: 42741.23189999994
Test mean error for best: 21.37062
;;------------------------------
Outputs of best individual on training cases:
Correct output: -74.6179542037 | Program output: -63.5362548664
Correct output: 78.7609586813  | Program output: 4.7609586813  
Correct output: 3.0100598709   | Program output: 0.0917592082  
Correct output: -99.2368061293 | Program output: -152.155106792
Correct output: 88.6808415603  | Program output: 22.6808415603 
Correct output: -151.1060419578 | Program output: -157.0243426204
Correct output: 56.004616184   | Program output: 16.0863155213 
Correct output: 33.520660154   | Program output: -8.479339846  
Correct output: 42.238861085   | Program output: 3.3205604224  
Correct output: -49.0227893765 | Program output: -82.0227893765
Correct output: 103.4057483059 | Program output: 104.4057483059
Correct output: -106.1378273779 | Program output: -128.0561280406
Correct output: 37.9625599991  | Program output: 20.9625599991 
Correct output: 71.9208193203  | Program output: 75.9208193203 
Correct output: 173.5348464317 | Program output: 98.5348464317 
Correct output: -77.0615185935 | Program output: -88.9798192561
Correct output: -20.7643622555 | Program output: -19.7643622555
Correct output: 1.9827630815   | Program output: -78.0172369185
Correct output: -39.1198682611 | Program output: -20.0381689237
Correct output: 1.1392376036   | Program output: 5.1392376036  
Correct output: 129.1930977679 | Program output: 56.1930977679 
Correct output: 26.7496211861  | Program output: 10.7496211861 
Correct output: -11.2984801384 | Program output: -58.2984801384
Correct output: -136.1442960385 | Program output: -151.0625967012
Correct output: 143.0911996605 | Program output: 95.0911996605 
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_yank} {:instruction float_sub} {:instruction float_mod} {:instruction float_frominteger} {:instruction float_flush} {:instruction float_min} {:instruction print_integer} {:instruction integer_max} {:instruction float_mult} {:instruction float_pop} {:instruction integer_max} {:instruction integer_flush} {:instruction in1} {:instruction in1} {:instruction float_stackdepth} {:instruction in2} {:instruction integer_add} {:instruction float_inc} {:instruction integer_add} {:instruction float_inc} {:instruction float_inc} {:instruction integer_max} {:instruction float_inc} {:instruction float_dup_times} {:instruction float_rot} {:instruction float_stackdepth} {:instruction integer_add} {:instruction float_inc} {:instruction float_inc} {:instruction integer_max} {:instruction float_inc} {:instruction float_dup_times} {:instruction float_rot} {:instruction float_stackdepth} {:instruction float_inc} {:instruction float_dup_times} {:instruction float_yank} {:instruction float_dup_times} {:instruction integer_add} {:instruction 25} {:instruction float_stackdepth} {:instruction float_inc} {:instruction float_dup_times} {:instruction float_yank} {:instruction float_dup_times} {:instruction integer_add} {:instruction 25} {:instruction integer_flush} {:instruction integer_add} {:instruction integer_swap} {:instruction float_inc} {:instruction 77.91830066263515} {:instruction float_rot} {:instruction float_dup_times} {:instruction float_rot} {:instruction integer_shove} {:instruction float_inc} {:instruction float_sub} {:instruction float_rot} {:instruction integer_shove} {:instruction float_inc} {:instruction integer_swap} {:instruction integer_yankdup} {:instruction print_float} {:instruction integer_dec} {:instruction integer_flush} {:instruction float_dup_times} {:instruction float_div} {:instruction float_mult} {:instruction integer_shove} {:instruction float_dup} {:instruction integer_dup_times} {:instruction integer_dup} {:instruction float_mod} {:instruction integer_stackdepth} {:instruction float_dup} {:instruction integer_dup_times} {:instruction integer_dup} {:instruction float_mod} {:instruction float_dup} {:instruction float_flush} {:instruction print_float} {:instruction integer_dec} {:instruction float_max} {:instruction integer_dup})
Best program: (float_yank float_sub float_mod float_frominteger float_flush float_min print_integer integer_max float_mult float_pop integer_max integer_flush in1 in1 float_stackdepth in2 integer_add float_inc integer_add float_inc float_inc integer_max float_inc float_dup_times float_rot float_stackdepth integer_add float_inc float_inc integer_max float_inc float_dup_times float_rot float_stackdepth float_inc float_dup_times float_yank float_dup_times integer_add 25 float_stackdepth float_inc float_dup_times float_yank float_dup_times integer_add 25 integer_flush integer_add integer_swap float_inc 77.91830066263515 float_rot float_dup_times float_rot integer_shove float_inc float_sub float_rot integer_shove float_inc integer_swap integer_yankdup print_float integer_dec integer_flush float_dup_times float_div float_mult integer_shove float_dup integer_dup_times integer_dup float_mod integer_stackdepth float_dup integer_dup_times integer_dup float_mod float_dup float_flush print_float integer_dec float_max integer_dup)
Errors: [11.0817 10 74.0 2 2.9183 8 52.9183 10 66.0 2 5.9183 10 39.9183 9 42.0 11 38.9183 11 33.0 2 1.0 1 21.9183 11 17.0 2 4.0 1 75.0 3 11.9183 11 1.0 2 80.0 10 19.0817 10 4.0 1 73.0 3 16.0 2 47.0 2 14.9183 10 48.0 3]
Total: 947.5098
Mean: 18.950195
Genome size: 85
Size: 86
Percent parens: 0.012
--- Population Statistics ---
Average total errors in population: 2809.7005027000055
Median total errors in population: 1070.4281
Error averages by case: (80.87842590000015 10.513 139.3439410000001 3.663 71.80002369999949 9.982 114.90295490000112 9.605 133.9516404999999 3.335 89.90325480000025 10.318 92.82425040000031 9.553 113.09999939999985 11.76 93.15956690000026 10.384 113.09782680000004 3.839 82.7406209 2.662 95.4637480000004 10.794 91.3437306 3.344 80.5155067 2.465 151.615668 4.228 84.66399210000021 10.525 82.06754049999999 3.125 147.9292374 10.187 85.05417159999993 10.615 113.23565470000078 10.124 146.96977450000006 4.187 87.83961489999997 3.347 121.26703410000002 3.609 93.51802780000033 9.957 126.41929660000004 3.974)
Error minima by case: (1.2994 8 0.1573 1 0.0101 1 19.0 1 5.7625 1 2.9183 2 9.8274 1 17.0413 8 11.7901 1 20.8845 1 0.0 0 5.2099 2 5.9626 1 0.0 0 68.0 2 0.2051 1 0.0 0 0.0172 8 13.0817 7 0.0 0 41.1931 2 4.2504 1 2.2985 1 11.9183 2 41.0 2)
Average genome size in population (length): 71.029
Average program size in population (points): 72.029
Average percent parens in population: 0.014
Minimum age in population: 69.24043579912336
Maximum age in population: 73.48620367215413
Average age in population: 71.51620092634374
Median age in population: 71.52868185684582
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 25
Genome diversity (% unique Plush genomes):	 0.776
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 25
Syntactic diversity (% unique Push programs):	 0.776
Total error diversity:				 0.247
Error (vector) diversity:			 0.277
Behavioral diversity:				 0.279
--- Run Statistics ---
Number of program evaluations used so far: 50000
Number of point (instruction) evaluations so far: 72133485
--- Timings ---
Current time: 1529616097381 milliseconds
Total Time:         161.8 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        65.9 seconds, 40.8%
Fitness Testing:     75.4 seconds, 46.6%
Report:              20.3 seconds, 12.5%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 49
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 50
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 50
;;******************************
;; -*- Number IO problem report - generation 50
Test total error for best: 42741.23189999994
Test mean error for best: 21.37062
;;------------------------------
Outputs of best individual on training cases:
Correct output: -74.6179542037 | Program output: -63.5362548664
Correct output: 78.7609586813  | Program output: 4.7609586813  
Correct output: 3.0100598709   | Program output: 0.0917592082  
Correct output: -99.2368061293 | Program output: -152.155106792
Correct output: 88.6808415603  | Program output: 22.6808415603 
Correct output: -151.1060419578 | Program output: -157.0243426204
Correct output: 56.004616184   | Program output: 16.0863155213 
Correct output: 33.520660154   | Program output: -8.479339846  
Correct output: 42.238861085   | Program output: 3.3205604224  
Correct output: -49.0227893765 | Program output: -82.0227893765
Correct output: 103.4057483059 | Program output: 104.4057483059
Correct output: -106.1378273779 | Program output: -128.0561280406
Correct output: 37.9625599991  | Program output: 20.9625599991 
Correct output: 71.9208193203  | Program output: 75.9208193203 
Correct output: 173.5348464317 | Program output: 98.5348464317 
Correct output: -77.0615185935 | Program output: -88.9798192561
Correct output: -20.7643622555 | Program output: -19.7643622555
Correct output: 1.9827630815   | Program output: -78.0172369185
Correct output: -39.1198682611 | Program output: -20.0381689237
Correct output: 1.1392376036   | Program output: 5.1392376036  
Correct output: 129.1930977679 | Program output: 56.1930977679 
Correct output: 26.7496211861  | Program output: 10.7496211861 
Correct output: -11.2984801384 | Program output: -58.2984801384
Correct output: -136.1442960385 | Program output: -151.0625967012
Correct output: 143.0911996605 | Program output: 95.0911996605 
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_yank} {:instruction float_sub} {:instruction float_mod} {:instruction float_frominteger} {:instruction float_flush} {:instruction float_min} {:instruction print_integer} {:instruction integer_max} {:instruction float_mult} {:instruction float_pop} {:instruction integer_max} {:instruction integer_flush} {:instruction in1} {:instruction in1} {:instruction float_stackdepth} {:instruction in2} {:instruction integer_add} {:instruction float_inc} {:instruction integer_add} {:instruction float_inc} {:instruction float_inc} {:instruction integer_max} {:instruction float_inc} {:instruction float_dup_times} {:instruction float_rot} {:instruction float_stackdepth} {:instruction integer_add} {:instruction float_inc} {:instruction float_inc} {:instruction integer_max} {:instruction float_inc} {:instruction float_dup_times} {:instruction float_rot} {:instruction float_stackdepth} {:instruction float_inc} {:instruction float_dup_times} {:instruction float_yank} {:instruction float_dup_times} {:instruction integer_add} {:instruction 25} {:instruction float_stackdepth} {:instruction float_inc} {:instruction float_dup_times} {:instruction float_yank} {:instruction float_dup_times} {:instruction integer_add} {:instruction 25} {:instruction integer_flush} {:instruction integer_add} {:instruction integer_swap} {:instruction float_inc} {:instruction 77.91830066263515} {:instruction float_rot} {:instruction float_dup_times} {:instruction float_rot} {:instruction integer_shove} {:instruction float_inc} {:instruction float_sub} {:instruction float_rot} {:instruction integer_shove} {:instruction float_inc} {:instruction integer_swap} {:instruction integer_yankdup} {:instruction print_float} {:instruction integer_dec} {:instruction integer_flush} {:instruction float_dup_times} {:instruction float_div} {:instruction float_mult} {:instruction integer_shove} {:instruction float_dup} {:instruction integer_dup_times} {:instruction integer_dup} {:instruction float_mod} {:instruction integer_stackdepth} {:instruction float_dup} {:instruction integer_dup_times})
Best program: (float_yank float_sub float_mod float_frominteger float_flush float_min print_integer integer_max float_mult float_pop integer_max integer_flush in1 in1 float_stackdepth in2 integer_add float_inc integer_add float_inc float_inc integer_max float_inc float_dup_times float_rot float_stackdepth integer_add float_inc float_inc integer_max float_inc float_dup_times float_rot float_stackdepth float_inc float_dup_times float_yank float_dup_times integer_add 25 float_stackdepth float_inc float_dup_times float_yank float_dup_times integer_add 25 integer_flush integer_add integer_swap float_inc 77.91830066263515 float_rot float_dup_times float_rot integer_shove float_inc float_sub float_rot integer_shove float_inc integer_swap integer_yankdup print_float integer_dec integer_flush float_dup_times float_div float_mult integer_shove float_dup integer_dup_times integer_dup float_mod integer_stackdepth float_dup integer_dup_times)
Errors: [11.0817 10 74.0 2 2.9183 8 52.9183 10 66.0 2 5.9183 10 39.9183 9 42.0 11 38.9183 11 33.0 2 1.0 1 21.9183 11 17.0 2 4.0 1 75.0 3 11.9183 11 1.0 2 80.0 10 19.0817 10 4.0 1 73.0 3 16.0 2 47.0 2 14.9183 10 48.0 3]
Total: 947.5098
Mean: 18.950195
Genome size: 77
Size: 78
Percent parens: 0.013
--- Population Statistics ---
Average total errors in population: 2836.9617833000048
Median total errors in population: 1044.4281
Error averages by case: (79.66113440000036 10.476 145.51915509999992 4.289 70.54070479999947 9.907 113.03000900000104 9.67 139.89157029999998 3.342 85.77238369999999 10.285 93.9786561000003 9.571 117.55544809999975 11.512 93.80610580000025 10.413 115.84153610000021 4.378 86.55189510000004 2.936 92.31803780000033 10.778 97.41669600000002 3.538 83.9418267 2.496 154.08289779999998 4.326 82.75955480000002 10.52 86.21510950000003 3.871 144.70322909999993 10.203 83.8664741 10.579 107.26426740000058 8.288 148.8707213000001 4.203 95.69502689999996 3.375 120.55896840000005 4.195 90.47179980000026 9.995 129.21957520000007 4.283)
Error minima by case: (0.9967 8 0.1573 1 0.0101 1 19.0 1 4.9183 1 0.9183 2 12.7901 1 4.4271 2 11.7901 1 6.8835 1 0.0 0 5.2099 2 0.9626 1 0.0 0 4.0817 2 0.2051 1 0.0 0 0.076 7 2.8847 9 0.0 0 2.0817 2 2.344 1 1.9924 1 9.9183 2 22.9183 2)
Average genome size in population (length): 69.998
Average program size in population (points): 70.998
Average percent parens in population: 0.014
Minimum age in population: 70.62146920586649
Maximum age in population: 74.71868380272899
Average age in population: 72.96045495105153
Median age in population: 73.0217897644333
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 63
Genome diversity (% unique Plush genomes):	 0.761
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 63
Syntactic diversity (% unique Push programs):	 0.761
Total error diversity:				 0.319
Error (vector) diversity:			 0.343
Behavioral diversity:				 0.344
--- Run Statistics ---
Number of program evaluations used so far: 51000
Number of point (instruction) evaluations so far: 73883460
--- Timings ---
Current time: 1529616100990 milliseconds
Total Time:         165.4 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        67.2 seconds, 40.7%
Fitness Testing:     77.2 seconds, 46.7%
Report:              20.9 seconds, 12.6%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 50
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 51
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 51
;;******************************
;; -*- Number IO problem report - generation 51
Test total error for best: 40966.41489999995
Test mean error for best: 20.48321
;;------------------------------
Outputs of best individual on training cases:
Correct output: -74.6179542037 | Program output: -64.5362548664
Correct output: 78.7609586813  | Program output: 9.7609586813  
Correct output: 3.0100598709   | Program output: -0.9082407918 
Correct output: -99.2368061293 | Program output: -153.155106792
Correct output: 88.6808415603  | Program output: 27.6808415603 
Correct output: -151.1060419578 | Program output: -158.0243426204
Correct output: 56.004616184   | Program output: 15.0863155213 
Correct output: 33.520660154   | Program output: -3.479339846  
Correct output: 42.238861085   | Program output: 2.3205604224  
Correct output: -49.0227893765 | Program output: -77.0227893765
Correct output: 103.4057483059 | Program output: 109.4057483059
Correct output: -106.1378273779 | Program output: -129.0561280406
Correct output: 37.9625599991  | Program output: 25.9625599991 
Correct output: 71.9208193203  | Program output: 80.9208193203 
Correct output: 173.5348464317 | Program output: 103.5348464317
Correct output: -77.0615185935 | Program output: -89.9798192561
Correct output: -20.7643622555 | Program output: -14.7643622555
Correct output: 1.9827630815   | Program output: -73.0172369185
Correct output: -39.1198682611 | Program output: -21.0381689237
Correct output: 1.1392376036   | Program output: 3.1392376036  
Correct output: 129.1930977679 | Program output: 61.1930977679 
Correct output: 26.7496211861  | Program output: 15.7496211861 
Correct output: -11.2984801384 | Program output: -53.2984801384
Correct output: -136.1442960385 | Program output: -152.0625967012
Correct output: 143.0911996605 | Program output: 100.0911996605
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_yank} {:instruction float_sub} {:instruction float_mod} {:instruction float_frominteger} {:instruction float_flush} {:instruction float_min} {:instruction print_integer} {:instruction integer_max} {:instruction float_mult} {:instruction float_pop} {:instruction integer_max} {:instruction integer_flush} {:instruction in1} {:instruction in1} {:instruction float_stackdepth} {:instruction in2} {:instruction integer_add} {:instruction float_inc} {:instruction integer_add} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_max} {:instruction float_inc} {:instruction integer_add} {:instruction float_inc} {:instruction float_inc} {:instruction integer_max} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_add} {:instruction float_inc} {:instruction float_inc} {:instruction integer_max} {:instruction float_inc} {:instruction float_dup_times} {:instruction float_rot} {:instruction float_inc} {:instruction float_inc} {:instruction integer_max} {:instruction float_inc} {:instruction float_dup_times} {:instruction float_rot} {:instruction float_stackdepth} {:instruction float_inc} {:instruction float_dup_times} {:instruction float_yank} {:instruction float_dup_times} {:instruction integer_add} {:instruction 25} {:instruction integer_flush} {:instruction integer_add} {:instruction integer_swap} {:instruction float_inc} {:instruction 77.91830066263515} {:instruction float_rot} {:instruction float_dup_times} {:instruction float_rot} {:instruction integer_shove} {:instruction float_inc} {:instruction float_sub} {:instruction float_rot} {:instruction integer_shove} {:instruction float_inc} {:instruction integer_swap} {:instruction integer_yankdup} {:instruction print_float} {:instruction integer_dec} {:instruction integer_flush} {:instruction float_dup_times} {:instruction float_div} {:instruction float_mult} {:instruction integer_shove} {:instruction float_dup} {:instruction integer_dup_times} {:instruction integer_dup} {:instruction float_mod} {:instruction integer_stackdepth} {:instruction float_dup} {:instruction integer_dup_times} {:instruction integer_dup} {:instruction float_mod} {:instruction integer_stackdepth} {:instruction integer_dup_times})
Best program: (float_yank float_sub float_mod float_frominteger float_flush float_min print_integer integer_max float_mult float_pop integer_max integer_flush in1 in1 float_stackdepth in2 integer_add float_inc integer_add float_inc float_inc float_inc integer_max float_inc integer_add float_inc float_inc integer_max float_inc float_inc float_inc integer_add float_inc float_inc integer_max float_inc float_dup_times float_rot float_inc float_inc integer_max float_inc float_dup_times float_rot float_stackdepth float_inc float_dup_times float_yank float_dup_times integer_add 25 integer_flush integer_add integer_swap float_inc 77.91830066263515 float_rot float_dup_times float_rot integer_shove float_inc float_sub float_rot integer_shove float_inc integer_swap integer_yankdup print_float integer_dec integer_flush float_dup_times float_div float_mult integer_shove float_dup integer_dup_times integer_dup float_mod integer_stackdepth float_dup integer_dup_times integer_dup float_mod integer_stackdepth integer_dup_times)
Errors: [10.0817 9 69.0 2 3.9183 11 53.9183 10 61.0 2 6.9183 10 40.9183 10 37.0 10 39.9183 10 28.0 2 6.0 1 22.9183 11 12.0 2 9.0 2 70.0 1 12.9183 11 6.0 2 75.0 10 18.0817 10 2.0 1 68.0 3 11.0 2 42.0 2 15.9183 10 43.0 2]
Total: 910.5098
Mean: 18.210196
Genome size: 85
Size: 86
Percent parens: 0.012
--- Population Statistics ---
Average total errors in population: 2885.084125400002
Median total errors in population: 1008.5098
Error averages by case: (89.55833779999989 10.595 143.10602360000004 4.167 78.4586967 9.818 122.6633277000008 9.989 137.57568329999995 3.228 96.8951671000004 10.521 99.1234149000004 9.673 115.58886959999953 11.517 99.97471270000027 10.429 116.75787700000033 5.236 83.51008060000001 2.923 101.71213320000047 10.866 95.8622998 3.533 80.61654609999998 2.336 152.68765770000002 4.311 91.75887810000035 10.755 87.65995930000003 4.841 136.60907969999985 10.268 92.8410416999997 10.757 98.77597080000005 6.777 146.72949449999996 4.048 93.10609619999998 3.234 116.54688850000012 5.025 100.79327620000046 10.296 126.79461260000002 4.235)
Error minima by case: (0.9967 7 0.1573 1 0.0817 1 18.1125 1 4.0827 1 0.9183 2 8.2145 1 3.4918 6 4.6086 1 21.8955 1 0.0 0 4.2099 2 0.9501 1 0.0 0 20.5348 1 0.9277 1 0.0 0 0.0588 8 8.9907 8 0.0 0 14.8069 2 3.2504 1 2.7335 1 4.9183 2 42.0 2)
Average genome size in population (length): 70.483
Average program size in population (points): 71.483
Average percent parens in population: 0.014
Minimum age in population: 71.76289480420569
Maximum age in population: 76.5037400329058
Average age in population: 74.46026796778747
Median age in population: 74.50932565487533
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 60
Genome diversity (% unique Plush genomes):	 0.758
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 60
Syntactic diversity (% unique Push programs):	 0.758
Total error diversity:				 0.353
Error (vector) diversity:			 0.376
Behavioral diversity:				 0.377
--- Run Statistics ---
Number of program evaluations used so far: 52000
Number of point (instruction) evaluations so far: 75645535
--- Timings ---
Current time: 1529616104643 milliseconds
Total Time:         169.1 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        68.6 seconds, 40.6%
Fitness Testing:     79.0 seconds, 46.7%
Report:              21.4 seconds, 12.7%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 51
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 52
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 52
;;******************************
;; -*- Number IO problem report - generation 52
Test total error for best: 42871.234199999926
Test mean error for best: 21.43562
;;------------------------------
Outputs of best individual on training cases:
Correct output: -74.6179542037 | Program output: -59.5362548664
Correct output: 78.7609586813  | Program output: 2.7609586813  
Correct output: 3.0100598709   | Program output: 4.0917592082  
Correct output: -99.2368061293 | Program output: -148.155106792
Correct output: 88.6808415603  | Program output: 20.6808415603 
Correct output: -151.1060419578 | Program output: -153.0243426204
Correct output: 56.004616184   | Program output: 20.0863155213 
Correct output: 33.520660154   | Program output: -1.0          
Correct output: 42.238861085   | Program output: 7.3205604224  
Correct output: -49.0227893765 | Program output: -1.0          
Correct output: 103.4057483059 | Program output: 102.4057483059
Correct output: -106.1378273779 | Program output: -124.0561280406
Correct output: 37.9625599991  | Program output: 18.9625599991 
Correct output: 71.9208193203  | Program output: 73.9208193203 
Correct output: 173.5348464317 | Program output: 96.5348464317 
Correct output: -77.0615185935 | Program output: -84.9798192561
Correct output: -20.7643622555 | Program output: -1.0          
Correct output: 1.9827630815   | Program output: -1.0          
Correct output: -39.1198682611 | Program output: -16.0381689237
Correct output: 1.1392376036   | Program output: 3.1392376036  
Correct output: 129.1930977679 | Program output: 54.1930977679 
Correct output: 26.7496211861  | Program output: 8.7496211861  
Correct output: -11.2984801384 | Program output: -1.0          
Correct output: -136.1442960385 | Program output: -147.0625967012
Correct output: 143.0911996605 | Program output: 93.0911996605 
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_yank} {:instruction float_sub} {:instruction integer_max} {:instruction integer_flush} {:instruction in1} {:instruction in1} {:instruction float_stackdepth} {:instruction in2} {:instruction integer_add} {:instruction float_inc} {:instruction integer_add} {:instruction float_inc} {:instruction float_inc} {:instruction integer_max} {:instruction float_inc} {:instruction float_dup_times} {:instruction float_rot} {:instruction float_stackdepth} {:instruction integer_add} {:instruction float_inc} {:instruction float_inc} {:instruction integer_max} {:instruction float_inc} {:instruction float_dup_times} {:instruction float_rot} {:instruction float_stackdepth} {:instruction float_inc} {:instruction float_dup_times} {:instruction float_yank} {:instruction 25} {:instruction integer_flush} {:instruction integer_add} {:instruction integer_swap} {:instruction integer_add} {:instruction 25} {:instruction integer_flush} {:instruction float_inc} {:instruction integer_add} {:instruction float_inc} {:instruction float_inc} {:instruction integer_max} {:instruction float_inc} {:instruction float_dup_times} {:instruction float_rot} {:instruction float_stackdepth} {:instruction float_inc} {:instruction float_dup_times} {:instruction float_yank} {:instruction float_dup_times} {:instruction integer_add} {:instruction 25} {:instruction integer_flush} {:instruction integer_add} {:instruction integer_swap} {:instruction print_integer} {:instruction 77.91830066263515} {:instruction float_rot} {:instruction float_dup_times} {:instruction float_rot} {:instruction integer_shove} {:instruction float_inc} {:instruction float_sub} {:instruction float_rot} {:instruction integer_shove} {:instruction float_inc} {:instruction float_sub} {:instruction float_rot} {:instruction float_mod} {:instruction float_inc} {:instruction integer_swap} {:instruction integer_min} {:instruction print_float} {:instruction integer_dec} {:instruction integer_flush} {:instruction float_dup_times} {:instruction float_div} {:instruction float_mult} {:instruction integer_shove} {:instruction float_dup_times} {:instruction float_div} {:instruction float_mult} {:instruction integer_shove} {:instruction float_dup} {:instruction integer_dup_times} {:instruction integer_dup} {:instruction float_mod} {:instruction integer_stackdepth} {:instruction float_dup} {:instruction integer_dup_times} {:instruction integer_dup} {:instruction float_mod})
Best program: (float_yank float_sub integer_max integer_flush in1 in1 float_stackdepth in2 integer_add float_inc integer_add float_inc float_inc integer_max float_inc float_dup_times float_rot float_stackdepth integer_add float_inc float_inc integer_max float_inc float_dup_times float_rot float_stackdepth float_inc float_dup_times float_yank 25 integer_flush integer_add integer_swap integer_add 25 integer_flush float_inc integer_add float_inc float_inc integer_max float_inc float_dup_times float_rot float_stackdepth float_inc float_dup_times float_yank float_dup_times integer_add 25 integer_flush integer_add integer_swap print_integer 77.91830066263515 float_rot float_dup_times float_rot integer_shove float_inc float_sub float_rot integer_shove float_inc float_sub float_rot float_mod float_inc integer_swap integer_min print_float integer_dec integer_flush float_dup_times float_div float_mult integer_shove float_dup_times float_div float_mult integer_shove float_dup integer_dup_times integer_dup float_mod integer_stackdepth float_dup integer_dup_times integer_dup float_mod)
Errors: [15.0817 10 76.0 2 1.0817 8 48.9183 10 68.0 2 1.9183 10 35.9183 10 34.5207 10 34.9183 11 48.0228 11 1.0 1 17.9183 11 19.0 2 2.0 1 77.0 3 7.9183 11 19.7644 12 2.9828 10 23.0817 10 2.0 1 75.0 3 18.0 2 10.2985 10 10.9183 10 50.0 2]
Total: 874.2624
Mean: 17.485249
Genome size: 91
Size: 92
Percent parens: 0.011
--- Population Statistics ---
Average total errors in population: 2792.791374600001
Median total errors in population: 994.0243000000002
Error averages by case: (87.19798539999988 10.4 140.6816181 3.889 72.67962329999982 9.152 116.6391495000007 10.004 135.2733627 3.23 92.7184389000006 10.36 90.9174420000005 9.551 114.10188519999932 11.304 89.20329310000022 10.126 116.01707900000059 5.47 81.66372829999999 2.692 96.18032390000067 10.682 92.48867820000001 3.379 79.37119599999998 2.335 150.71933270000002 4.066 86.07330580000036 10.614 87.48220100000002 5.173 132.29558989999975 10.203 90.37318679999952 10.692 94.75337720000016 6.917 145.0889112 4.027 89.44916829999997 3.231 113.71097960000034 5.293 95.99935530000067 10.288 124.57416320000004 4.06)
Error minima by case: (0.6997 7 0.1573 1 0.0817 1 10.1282 1 7.7625 1 0.0817 2 2.8718 1 13.2695 2 3.8718 1 10.4169 1 0.0 0 4.2099 2 0.0374 1 0.0 0 6.2668 1 0.3439 1 0.0 0 0.0172 7 2.7221 9 0.0 0 10.0054 2 7.0 1 4.2985 1 4.9183 2 33.3509 2)
Average genome size in population (length): 74.306
Average program size in population (points): 75.306
Average percent parens in population: 0.013
Minimum age in population: 72.76289480420569
Maximum age in population: 77.97679386319562
Average age in population: 75.89031019892985
Median age in population: 75.96975523385662
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 15
Genome diversity (% unique Plush genomes):	 0.803
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 15
Syntactic diversity (% unique Push programs):	 0.803
Total error diversity:				 0.426
Error (vector) diversity:			 0.456
Behavioral diversity:				 0.456
--- Run Statistics ---
Number of program evaluations used so far: 53000
Number of point (instruction) evaluations so far: 77503185
--- Timings ---
Current time: 1529616108391 milliseconds
Total Time:         172.8 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        69.9 seconds, 40.5%
Fitness Testing:     80.9 seconds, 46.8%
Report:              21.9 seconds, 12.7%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 52
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 53
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 53
;;******************************
;; -*- Number IO problem report - generation 53
Test total error for best: 38935.29729999997
Test mean error for best: 19.46765
;;------------------------------
Outputs of best individual on training cases:
Correct output: -74.6179542037 | Program output: -56.5362548664
Correct output: 78.7609586813  | Program output: 11.7609586813 
Correct output: 3.0100598709   | Program output: 7.0917592082  
Correct output: -99.2368061293 | Program output: -145.155106792
Correct output: 88.6808415603  | Program output: 29.6808415603 
Correct output: -151.1060419578 | Program output: -150.0243426204
Correct output: 56.004616184   | Program output: 23.0863155213 
Correct output: 33.520660154   | Program output: -1.479339846  
Correct output: 42.238861085   | Program output: 10.3205604224 
Correct output: -49.0227893765 | Program output: -75.0227893765
Correct output: 103.4057483059 | Program output: 111.4057483059
Correct output: -106.1378273779 | Program output: -121.0561280406
Correct output: 37.9625599991  | Program output: 27.9625599991 
Correct output: 71.9208193203  | Program output: 82.9208193203 
Correct output: 173.5348464317 | Program output: 105.5348464317
Correct output: -77.0615185935 | Program output: -81.9798192561
Correct output: -20.7643622555 | Program output: -12.7643622555
Correct output: 1.9827630815   | Program output: -71.0172369185
Correct output: -39.1198682611 | Program output: -13.0381689237
Correct output: 1.1392376036   | Program output: 13.1392376036 
Correct output: 129.1930977679 | Program output: 63.1930977679 
Correct output: 26.7496211861  | Program output: 17.7496211861 
Correct output: -11.2984801384 | Program output: -51.2984801384
Correct output: -136.1442960385 | Program output: -144.0625967012
Correct output: 143.0911996605 | Program output: 102.0911996605
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_frominteger} {:instruction float_sub} {:instruction float_mod} {:instruction float_pop} {:instruction integer_max} {:instruction integer_flush} {:instruction in1} {:instruction in1} {:instruction float_stackdepth} {:instruction in2} {:instruction integer_add} {:instruction float_inc} {:instruction integer_add} {:instruction float_inc} {:instruction float_inc} {:instruction integer_max} {:instruction float_inc} {:instruction float_dup_times} {:instruction float_rot} {:instruction float_stackdepth} {:instruction float_inc} {:instruction integer_max} {:instruction float_inc} {:instruction float_dup_times} {:instruction float_rot} {:instruction float_stackdepth} {:instruction integer_max} {:instruction float_inc} {:instruction float_dup_times} {:instruction tagged_485} {:instruction float_stackdepth} {:instruction float_inc} {:instruction float_inc} {:instruction integer_add} {:instruction float_inc} {:instruction float_inc} {:instruction integer_max} {:instruction float_inc} {:instruction float_dup_times} {:instruction float_rot} {:instruction float_stackdepth} {:instruction float_inc} {:instruction float_dup_times} {:instruction float_yank} {:instruction float_inc} {:instruction float_dup_times} {:instruction float_rot} {:instruction float_stackdepth} {:instruction float_inc} {:instruction float_dup_times} {:instruction float_yank} {:instruction float_dup_times} {:instruction integer_add} {:instruction 25} {:instruction float_stackdepth} {:instruction float_inc} {:instruction float_dup_times} {:instruction float_yank} {:instruction float_dup_times} {:instruction integer_add} {:instruction 25} {:instruction integer_flush} {:instruction integer_add} {:instruction integer_swap} {:instruction float_rot} {:instruction 77.91830066263515} {:instruction float_rot} {:instruction float_dup_times} {:instruction float_rot} {:instruction integer_shove} {:instruction float_inc} {:instruction float_sub} {:instruction float_rot} {:instruction integer_flush} {:instruction float_inc} {:instruction integer_swap} {:instruction integer_yankdup} {:instruction integer_shove} {:instruction float_inc} {:instruction integer_swap} {:instruction integer_yankdup} {:instruction print_float} {:instruction integer_dec} {:instruction integer_flush} {:instruction float_dup_times} {:instruction float_div} {:instruction float_mult} {:instruction integer_shove} {:instruction float_dup} {:instruction integer_dup_times} {:instruction integer_dup} {:instruction float_flush} {:instruction integer_stackdepth} {:instruction float_dup} {:instruction integer_dup_times} {:instruction integer_swap} {:instruction integer_dup})
Best program: (float_frominteger float_sub float_mod float_pop integer_max integer_flush in1 in1 float_stackdepth in2 integer_add float_inc integer_add float_inc float_inc integer_max float_inc float_dup_times float_rot float_stackdepth float_inc integer_max float_inc float_dup_times float_rot float_stackdepth integer_max float_inc float_dup_times tagged_485 float_stackdepth float_inc float_inc integer_add float_inc float_inc integer_max float_inc float_dup_times float_rot float_stackdepth float_inc float_dup_times float_yank float_inc float_dup_times float_rot float_stackdepth float_inc float_dup_times float_yank float_dup_times integer_add 25 float_stackdepth float_inc float_dup_times float_yank float_dup_times integer_add 25 integer_flush integer_add integer_swap float_rot 77.91830066263515 float_rot float_dup_times float_rot integer_shove float_inc float_sub float_rot integer_flush float_inc integer_swap integer_yankdup integer_shove float_inc integer_swap integer_yankdup print_float integer_dec integer_flush float_dup_times float_div float_mult integer_shove float_dup integer_dup_times integer_dup float_flush integer_stackdepth float_dup integer_dup_times integer_swap integer_dup)
Errors: [18.0817 10 67.0 2 4.0817 8 45.9183 10 59.0 2 1.0817 10 32.9183 10 35.0 11 31.9183 11 26.0 2 8.0 2 14.9183 11 10.0 1 11.0 2 68.0 2 4.9183 11 8.0 2 73.0 9 26.0817 10 12.0 1 66.0 3 9.0 2 40.0 1 7.9183 10 41.0 2]
Total: 865.8366000000001
Mean: 17.316732
Genome size: 97
Size: 98
Percent parens: 0.010
--- Population Statistics ---
Average total errors in population: 3131.4136458999988
Median total errors in population: 967.5098
Error averages by case: (99.22661929999953 10.565 150.2672541 4.023 84.53316170000029 8.703 129.3277343000011 9.79 146.89362640000004 3.466 104.10882050000079 10.1 107.01943260000084 9.368 125.48479529999926 11.059 105.30695140000053 10.0 131.98760120000063 5.631 100.3415134 2.83 109.01476480000088 10.63 104.47703500000004 3.533 98.36949840000001 2.58 165.59974449999999 4.131 98.96217420000076 10.478 102.68973960000004 5.454 148.19952779999966 10.152 103.07905019999916 10.646 100.43842680000013 5.451 161.52846310000012 4.254 99.8282597999999 3.448 129.70253760000037 5.448 107.96421660000092 10.111 141.0066973 4.205)
Error minima by case: (0.1239 8 0.1573 1 0.0101 1 20.0 1 5.4586 1 0.0817 2 3.8274 1 13.765 2 6.2307 1 18.4943 1 0.0 0 4.2099 2 8.0 1 0.0 0 23.5348 1 0.3319 1 0.0 0 0.0172 8 6.2779 8 0.7526 1 16.8069 2 3.0 1 3.2985 1 4.9183 2 39.0 2)
Average genome size in population (length): 76.711
Average program size in population (points): 77.711
Average percent parens in population: 0.013
Minimum age in population: 74.77264716500343
Maximum age in population: 79.52576645844402
Average age in population: 77.36746373877635
Median age in population: 77.40914964989679
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 16
Genome diversity (% unique Plush genomes):	 0.81
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 16
Syntactic diversity (% unique Push programs):	 0.81
Total error diversity:				 0.439
Error (vector) diversity:			 0.471
Behavioral diversity:				 0.472
--- Run Statistics ---
Number of program evaluations used so far: 54000
Number of point (instruction) evaluations so far: 79421025
--- Timings ---
Current time: 1529616112340 milliseconds
Total Time:         176.6 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        71.3 seconds, 40.4%
Fitness Testing:     82.8 seconds, 46.9%
Report:              22.4 seconds, 12.7%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 53
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 54
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 54
;;******************************
;; -*- Number IO problem report - generation 54
Test total error for best: 41202.69819999993
Test mean error for best: 20.60135
;;------------------------------
Outputs of best individual on training cases:
Correct output: -74.6179542037 | Program output: -58.5362548664
Correct output: 78.7609586813  | Program output: 8.7609586813  
Correct output: 3.0100598709   | Program output: 5.0917592082  
Correct output: -99.2368061293 | Program output: -147.155106792
Correct output: 88.6808415603  | Program output: 26.6808415603 
Correct output: -151.1060419578 | Program output: -152.0243426204
Correct output: 56.004616184   | Program output: 21.0863155213 
Correct output: 33.520660154   | Program output: -1.0          
Correct output: 42.238861085   | Program output: 8.3205604224  
Correct output: -49.0227893765 | Program output: -1.0          
Correct output: 103.4057483059 | Program output: 108.4057483059
Correct output: -106.1378273779 | Program output: -123.0561280406
Correct output: 37.9625599991  | Program output: 24.9625599991 
Correct output: 71.9208193203  | Program output: 79.9208193203 
Correct output: 173.5348464317 | Program output: 102.5348464317
Correct output: -77.0615185935 | Program output: -83.9798192561
Correct output: -20.7643622555 | Program output: -1.0          
Correct output: 1.9827630815   | Program output: -1.0          
Correct output: -39.1198682611 | Program output: -15.0381689237
Correct output: 1.1392376036   | Program output: 10.1392376036 
Correct output: 129.1930977679 | Program output: 60.1930977679 
Correct output: 26.7496211861  | Program output: 14.7496211861 
Correct output: -11.2984801384 | Program output: -1.0          
Correct output: -136.1442960385 | Program output: -146.0625967012
Correct output: 143.0911996605 | Program output: 99.0911996605 
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_frominteger} {:instruction float_sub} {:instruction float_mod} {:instruction float_pop} {:instruction integer_max} {:instruction integer_flush} {:instruction in1} {:instruction in1} {:instruction float_stackdepth} {:instruction in2} {:instruction integer_add} {:instruction float_inc} {:instruction integer_add} {:instruction float_inc} {:instruction float_inc} {:instruction integer_max} {:instruction float_inc} {:instruction float_dup_times} {:instruction float_rot} {:instruction float_stackdepth} {:instruction float_inc} {:instruction integer_max} {:instruction float_inc} {:instruction float_dup_times} {:instruction float_rot} {:instruction float_stackdepth} {:instruction integer_max} {:instruction float_inc} {:instruction float_dup_times} {:instruction tagged_485} {:instruction float_stackdepth} {:instruction float_inc} {:instruction float_inc} {:instruction integer_add} {:instruction float_inc} {:instruction float_inc} {:instruction integer_max} {:instruction float_inc} {:instruction float_dup_times} {:instruction float_rot} {:instruction float_stackdepth} {:instruction float_inc} {:instruction float_dup_times} {:instruction float_yank} {:instruction float_dup_times} {:instruction integer_add} {:instruction 25} {:instruction integer_flush} {:instruction integer_add} {:instruction integer_swap} {:instruction float_inc} {:instruction 77.91830066263515} {:instruction float_rot} {:instruction float_dup_times} {:instruction float_rot} {:instruction integer_shove} {:instruction integer_yankdup} {:instruction float_sub} {:instruction float_rot} {:instruction integer_shove} {:instruction float_inc} {:instruction float_max} {:instruction integer_yankdup} {:instruction print_float} {:instruction integer_dec} {:instruction integer_flush} {:instruction float_dup_times} {:instruction float_div} {:instruction float_div} {:instruction float_mult} {:instruction integer_shove} {:instruction float_dup} {:instruction integer_dup_times} {:instruction integer_dup} {:instruction float_mod} {:instruction -25} {:instruction float_dup} {:instruction float_div} {:instruction integer_dup} {:instruction float_mod} {:instruction float_dup} {:instruction float_flush} {:instruction print_float} {:instruction integer_dec} {:instruction float_max} {:instruction integer_dup})
Best program: (float_frominteger float_sub float_mod float_pop integer_max integer_flush in1 in1 float_stackdepth in2 integer_add float_inc integer_add float_inc float_inc integer_max float_inc float_dup_times float_rot float_stackdepth float_inc integer_max float_inc float_dup_times float_rot float_stackdepth integer_max float_inc float_dup_times tagged_485 float_stackdepth float_inc float_inc integer_add float_inc float_inc integer_max float_inc float_dup_times float_rot float_stackdepth float_inc float_dup_times float_yank float_dup_times integer_add 25 integer_flush integer_add integer_swap float_inc 77.91830066263515 float_rot float_dup_times float_rot integer_shove integer_yankdup float_sub float_rot integer_shove float_inc float_max integer_yankdup print_float integer_dec integer_flush float_dup_times float_div float_div float_mult integer_shove float_dup integer_dup_times integer_dup float_mod -25 float_dup float_div integer_dup float_mod float_dup float_flush print_float integer_dec float_max integer_dup)
Errors: [16.0817 10 70.0 1 2.0817 8 47.9183 10 62.0 2 0.9183 10 34.9183 10 34.5207 10 33.9183 11 48.0228 11 5.0 1 16.9183 11 13.0 2 8.0 1 71.0 2 6.9183 11 19.7644 12 2.9828 10 24.0817 10 9.0 1 69.0 3 12.0 2 10.2985 10 9.9183 9 44.0 3]
Total: 843.2624
Mean: 16.865248
Genome size: 86
Size: 87
Percent parens: 0.011
--- Population Statistics ---
Average total errors in population: 3245.727031299998
Median total errors in population: 947.5098
Error averages by case: (103.28946579999962 10.691 158.1969011 3.991 90.6148814 8.673 133.79042040000084 9.953 153.9323083 3.451 108.76715270000045 10.253 112.54931700000047 9.316 131.25946969999902 10.712 111.12337220000043 9.974 135.14385690000088 6.704 102.74472649999996 2.901 113.71499080000055 10.717 111.93022190000005 3.591 101.59241540000004 2.611 169.64009820000004 4.231 103.46118740000047 10.643 108.63021080000001 6.728 142.35758529999958 10.183 107.17007109999943 10.719 108.96184490000007 4.301 164.4558358 4.278 109.45210219999993 3.459 127.38916150000047 6.438 112.46780410000049 10.317 143.99962990000003 4.257)
Error minima by case: (0.1947 8 0.1573 1 0.0101 1 19.0 1 5.7625 1 0.0817 2 5.8274 1 18.5207 2 27.9183 1 18.0 1 0.0 0 10.9183 2 6.9626 1 0.0 0 26.5348 1 0.1432 1 0.0 0 0.0172 8 2.2779 8 0.0196 1 13.8069 2 2.2504 1 3.2985 1 3.9183 2 39.0 1)
Average genome size in population (length): 76.05
Average program size in population (points): 77.05
Average percent parens in population: 0.013
Minimum age in population: 76.5931116487185
Maximum age in population: 80.87994732985364
Average age in population: 78.78537906181684
Median age in population: 78.7978172148344
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 19
Genome diversity (% unique Plush genomes):	 0.824
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 19
Syntactic diversity (% unique Push programs):	 0.824
Total error diversity:				 0.434
Error (vector) diversity:			 0.468
Behavioral diversity:				 0.469
--- Run Statistics ---
Number of program evaluations used so far: 55000
Number of point (instruction) evaluations so far: 81322300
--- Timings ---
Current time: 1529616116157 milliseconds
Total Time:         180.5 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        72.6 seconds, 40.2%
Fitness Testing:     84.7 seconds, 46.9%
Report:              23.1 seconds, 12.8%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 54
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 55
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 55
;;******************************
;; -*- Number IO problem report - generation 55
Test total error for best: 39670.09809999997
Test mean error for best: 19.83505
;;------------------------------
Outputs of best individual on training cases:
Correct output: -74.6179542037 | Program output: -55.5362548664
Correct output: 78.7609586813  | Program output: 13.7609586813 
Correct output: 3.0100598709   | Program output: 8.0917592082  
Correct output: -99.2368061293 | Program output: -144.155106792
Correct output: 88.6808415603  | Program output: 31.6808415603 
Correct output: -151.1060419578 | Program output: -149.0243426204
Correct output: 56.004616184   | Program output: 24.0863155213 
Correct output: 33.520660154   | Program output: 2.0413203079  
Correct output: 42.238861085   | Program output: 11.3205604224 
Correct output: -49.0227893765 | Program output: -1.0          
Correct output: 103.4057483059 | Program output: 113.4057483059
Correct output: -106.1378273779 | Program output: -120.0561280406
Correct output: 37.9625599991  | Program output: 29.9625599991 
Correct output: 71.9208193203  | Program output: 84.9208193203 
Correct output: 173.5348464317 | Program output: 107.5348464317
Correct output: -77.0615185935 | Program output: -80.9798192561
Correct output: -20.7643622555 | Program output: -1.0          
Correct output: 1.9827630815   | Program output: -1.0          
Correct output: -39.1198682611 | Program output: -12.0381689237
Correct output: 1.1392376036   | Program output: 21.1392376036 
Correct output: 129.1930977679 | Program output: 65.1930977679 
Correct output: 26.7496211861  | Program output: 19.7496211861 
Correct output: -11.2984801384 | Program output: -1.0          
Correct output: -136.1442960385 | Program output: -143.0625967012
Correct output: 143.0911996605 | Program output: 104.0911996605
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_frominteger} {:instruction float_sub} {:instruction float_mod} {:instruction float_pop} {:instruction integer_max} {:instruction integer_flush} {:instruction in1} {:instruction in1} {:instruction float_stackdepth} {:instruction in2} {:instruction integer_add} {:instruction float_inc} {:instruction integer_add} {:instruction float_inc} {:instruction float_inc} {:instruction integer_max} {:instruction float_inc} {:instruction integer_add} {:instruction float_inc} {:instruction float_inc} {:instruction integer_max} {:instruction float_inc} {:instruction float_dup_times} {:instruction float_rot} {:instruction float_stackdepth} {:instruction integer_max} {:instruction float_inc} {:instruction float_dup_times} {:instruction tagged_485} {:instruction float_stackdepth} {:instruction float_inc} {:instruction float_inc} {:instruction integer_add} {:instruction float_inc} {:instruction float_inc} {:instruction integer_max} {:instruction float_inc} {:instruction float_dup_times} {:instruction float_rot} {:instruction float_stackdepth} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_add} {:instruction float_inc} {:instruction float_inc} {:instruction integer_max} {:instruction float_inc} {:instruction float_dup_times} {:instruction float_rot} {:instruction integer_add} {:instruction 25} {:instruction integer_flush} {:instruction integer_add} {:instruction integer_swap} {:instruction print_integer} {:instruction 77.91830066263515} {:instruction float_rot} {:instruction float_dup_times} {:instruction float_rot} {:instruction integer_shove} {:instruction float_inc} {:instruction float_sub} {:instruction float_rot} {:instruction integer_shove} {:instruction float_inc} {:instruction float_sub} {:instruction float_rot} {:instruction float_mod} {:instruction float_inc} {:instruction integer_swap} {:instruction integer_min} {:instruction print_float} {:instruction integer_dec} {:instruction integer_flush} {:instruction float_dup_times} {:instruction float_div} {:instruction float_mult} {:instruction integer_shove} {:instruction float_dup_times} {:instruction float_div} {:instruction float_mult} {:instruction integer_shove} {:instruction float_dup} {:instruction integer_dup_times} {:instruction float_min} {:instruction float_mod} {:instruction integer_stackdepth} {:instruction float_dup} {:instruction integer_dup} {:instruction float_mod} {:instruction integer_stackdepth} {:instruction float_dup} {:instruction integer_dup_times} {:instruction integer_swap} {:instruction integer_dup})
Best program: (float_frominteger float_sub float_mod float_pop integer_max integer_flush in1 in1 float_stackdepth in2 integer_add float_inc integer_add float_inc float_inc integer_max float_inc integer_add float_inc float_inc integer_max float_inc float_dup_times float_rot float_stackdepth integer_max float_inc float_dup_times tagged_485 float_stackdepth float_inc float_inc integer_add float_inc float_inc integer_max float_inc float_dup_times float_rot float_stackdepth float_inc float_inc float_inc float_inc integer_add float_inc float_inc integer_max float_inc float_dup_times float_rot integer_add 25 integer_flush integer_add integer_swap print_integer 77.91830066263515 float_rot float_dup_times float_rot integer_shove float_inc float_sub float_rot integer_shove float_inc float_sub float_rot float_mod float_inc integer_swap integer_min print_float integer_dec integer_flush float_dup_times float_div float_mult integer_shove float_dup_times float_div float_mult integer_shove float_dup integer_dup_times float_min float_mod integer_stackdepth float_dup integer_dup float_mod integer_stackdepth float_dup integer_dup_times integer_swap integer_dup)
Errors: [19.0817 10 65.0 2 5.0817 8 44.9183 10 57.0 2 2.0817 11 31.9183 10 31.4793 11 30.9183 11 48.0228 11 10.0 1 13.9183 11 8.0 2 13.0 2 66.0 2 3.9183 11 19.7644 12 2.9828 10 27.0817 10 20.0 1 64.0 3 7.0 2 10.2985 10 6.9183 10 39.0 2]
Total: 822.3844
Mean: 16.447687
Genome size: 97
Size: 98
Percent parens: 0.010
--- Population Statistics ---
Average total errors in population: 3480.701454099999
Median total errors in population: 921.2215000000001
Error averages by case: (120.06298719999947 10.817 163.3837306000001 4.201 103.1034882999998 8.696 145.39454680000023 10.103 159.66532689999997 3.705 123.95150690000024 10.418 121.90108900000078 9.407 137.17144569999866 10.437 120.17739630000057 10.068 146.36021190000127 7.695 113.10166740000001 3.108 127.30923540000077 10.88 119.30510750000002 3.767 109.2478724 2.938 175.69384120000007 4.225 116.03122370000058 10.827 120.23624900000003 7.872 143.48522669999946 10.265 122.97567629999922 10.857 111.28155410000014 4.152 169.9709051 4.43 115.83668239999996 3.691 132.98504390000065 7.325 126.83975720000073 10.525 150.52268220000005 4.298)
Error minima by case: (0.3003 8 0.1573 1 0.0101 1 19.0 1 5.7625 1 0.0817 2 7.8284 1 10.4562 2 10.6481 1 22.0 1 0.0 0 7.9183 2 1.0317 1 0.0 0 12.5348 1 0.0817 1 0.0 0 0.2934 7 7.9556 9 0.1392 1 27.8069 2 0.0 0 0.2985 1 0.9183 2 36.0912 1)
Average genome size in population (length): 77.905
Average program size in population (points): 78.905
Average percent parens in population: 0.013
Minimum age in population: 77.86519482312104
Maximum age in population: 82.08225205611339
Average age in population: 80.3664259376813
Median age in population: 80.42106477644754
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 22
Genome diversity (% unique Plush genomes):	 0.814
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 22
Syntactic diversity (% unique Push programs):	 0.814
Total error diversity:				 0.496
Error (vector) diversity:			 0.533
Behavioral diversity:				 0.533
--- Run Statistics ---
Number of program evaluations used so far: 56000
Number of point (instruction) evaluations so far: 83270000
--- Timings ---
Current time: 1529616119978 milliseconds
Total Time:         184.3 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        73.9 seconds, 40.1%
Fitness Testing:     86.6 seconds, 47.0%
Report:              23.7 seconds, 12.8%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 55
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 56
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 56
;;******************************
;; -*- Number IO problem report - generation 56
Test total error for best: 40021.60719999996
Test mean error for best: 20.01080
;;------------------------------
Outputs of best individual on training cases:
Correct output: -74.6179542037 | Program output: -48.5362548664
Correct output: 78.7609586813  | Program output: 10.7609586813 
Correct output: 3.0100598709   | Program output: 15.0917592082 
Correct output: -99.2368061293 | Program output: -137.155106792
Correct output: 88.6808415603  | Program output: 28.6808415603 
Correct output: -151.1060419578 | Program output: -142.0243426204
Correct output: 56.004616184   | Program output: 31.0863155213 
Correct output: 33.520660154   | Program output: 1.1652812317  
Correct output: 42.238861085   | Program output: 18.3205604224 
Correct output: -49.0227893765 | Program output: -3.0          
Correct output: 103.4057483059 | Program output: 110.4057483059
Correct output: -106.1378273779 | Program output: -113.0561280406
Correct output: 37.9625599991  | Program output: 26.9625599991 
Correct output: 71.9208193203  | Program output: 81.9208193203 
Correct output: 173.5348464317 | Program output: 104.5348464317
Correct output: -77.0615185935 | Program output: -73.9798192561
Correct output: -20.7643622555 | Program output: -3.0          
Correct output: 1.9827630815   | Program output: -3.0          
Correct output: -39.1198682611 | Program output: -5.0381689237 
Correct output: 1.1392376036   | Program output: 19.1392376036 
Correct output: 129.1930977679 | Program output: 62.1930977679 
Correct output: 26.7496211861  | Program output: 16.7496211861 
Correct output: -11.2984801384 | Program output: -3.0          
Correct output: -136.1442960385 | Program output: -136.0625967012
Correct output: 143.0911996605 | Program output: 101.0911996605
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_frominteger} {:instruction float_sub} {:instruction float_mod} {:instruction float_pop} {:instruction integer_max} {:instruction integer_flush} {:instruction in1} {:instruction in1} {:instruction float_stackdepth} {:instruction in2} {:instruction integer_add} {:instruction float_inc} {:instruction integer_add} {:instruction float_inc} {:instruction float_inc} {:instruction integer_max} {:instruction float_inc} {:instruction float_dup_times} {:instruction float_rot} {:instruction float_stackdepth} {:instruction float_inc} {:instruction float_rot} {:instruction float_rot} {:instruction integer_max} {:instruction float_inc} {:instruction float_dup_times} {:instruction tagged_485} {:instruction float_stackdepth} {:instruction float_inc} {:instruction float_inc} {:instruction integer_add} {:instruction float_inc} {:instruction float_inc} {:instruction integer_add} {:instruction float_inc} {:instruction float_inc} {:instruction integer_max} {:instruction float_inc} {:instruction float_dup_times} {:instruction float_rot} {:instruction float_stackdepth} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_add} {:instruction float_inc} {:instruction float_inc} {:instruction integer_max} {:instruction float_inc} {:instruction float_dup_times} {:instruction float_rot} {:instruction float_stackdepth} {:instruction float_inc} {:instruction integer_add} {:instruction integer_swap} {:instruction float_inc} {:instruction 77.91830066263515} {:instruction float_rot} {:instruction float_dup_times} {:instruction float_rot} {:instruction integer_shove} {:instruction float_inc} {:instruction float_sub} {:instruction float_rot} {:instruction integer_dec} {:instruction integer_flush} {:instruction float_dup_times} {:instruction float_inc} {:instruction float_sub} {:instruction float_rot} {:instruction integer_shove} {:instruction float_inc} {:instruction float_sub} {:instruction float_rot} {:instruction integer_shove} {:instruction float_inc} {:instruction float_sub} {:instruction float_rot} {:instruction float_mod} {:instruction float_inc} {:instruction integer_swap} {:instruction integer_min} {:instruction print_float} {:instruction integer_dec} {:instruction integer_flush} {:instruction float_dup_times} {:instruction float_div} {:instruction float_mult} {:instruction integer_shove} {:instruction integer_dup_times} {:instruction integer_dup} {:instruction float_mod} {:instruction integer_stackdepth} {:instruction float_dup} {:instruction integer_dup_times} {:instruction float_inc} {:instruction float_mod} {:instruction integer_stackdepth} {:instruction integer_mod} {:instruction float_flush})
Best program: (float_frominteger float_sub float_mod float_pop integer_max integer_flush in1 in1 float_stackdepth in2 integer_add float_inc integer_add float_inc float_inc integer_max float_inc float_dup_times float_rot float_stackdepth float_inc float_rot float_rot integer_max float_inc float_dup_times tagged_485 float_stackdepth float_inc float_inc integer_add float_inc float_inc integer_add float_inc float_inc integer_max float_inc float_dup_times float_rot float_stackdepth float_inc float_inc float_inc float_inc integer_add float_inc float_inc integer_max float_inc float_dup_times float_rot float_stackdepth float_inc integer_add integer_swap float_inc 77.91830066263515 float_rot float_dup_times float_rot integer_shove float_inc float_sub float_rot integer_dec integer_flush float_dup_times float_inc float_sub float_rot integer_shove float_inc float_sub float_rot integer_shove float_inc float_sub float_rot float_mod float_inc integer_swap integer_min print_float integer_dec integer_flush float_dup_times float_div float_mult integer_shove integer_dup_times integer_dup float_mod integer_stackdepth float_dup integer_dup_times float_inc float_mod integer_stackdepth integer_mod float_flush)
Errors: [26.0817 10 68.0 2 12.0817 9 37.9183 10 60.0 1 9.0817 11 24.9183 10 32.3554 10 23.9183 11 46.0228 11 7.0 2 6.9183 11 11.0 2 10.0 1 69.0 2 3.0817 10 17.7644 12 4.9828 11 34.0817 10 18.0 1 67.0 2 10.0 1 8.2985 11 0.0817 8 42.0 2]
Total: 820.5872999999998
Mean: 16.411745
Genome size: 101
Size: 102
Percent parens: 0.010
--- Population Statistics ---
Average total errors in population: 3323.4586198
Median total errors in population: 896.6732
Error averages by case: (121.15086619999906 10.8 152.63224569999997 4.016 102.61034319999982 8.438 146.09663830000065 9.898 149.2829020999999 3.837 125.23717160000007 10.247 124.55684990000114 9.419 123.65556229999896 10.239 122.01124090000086 10.128 132.30518710000106 7.586 103.27075020000002 3.162 127.6826040000011 10.805 107.87626669999999 3.807 101.84333430000001 3.124 167.74695909999994 4.213 115.96078410000098 10.634 108.16520940000001 7.71 129.81315819999955 10.184 124.38252929999886 10.829 102.08086210000012 4.077 159.8830443000001 4.649 104.07882849999993 3.784 119.10722850000047 7.319 127.36900760000113 10.291 141.23704619999995 4.226)
Error minima by case: (0.0755 8 0.1573 1 0.0101 1 18.3185 1 0.1939 1 0.0817 2 2.8274 1 2.9242 1 4.6424 1 6.0475 1 0.0 0 3.9183 2 0.0749 1 0.0 0 12.5348 1 0.0817 1 0.0 0 0.0172 7 0.2779 7 0.0 0 5.8069 2 0.7488 1 0.6776 1 0.0817 2 35.0 1)
Average genome size in population (length): 80.057
Average program size in population (points): 81.057
Average percent parens in population: 0.013
Minimum age in population: 79.59207028058788
Maximum age in population: 83.67458197447324
Average age in population: 81.90164055650729
Median age in population: 81.94433033184796
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 35
Genome diversity (% unique Plush genomes):	 0.823
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 35
Syntactic diversity (% unique Push programs):	 0.823
Total error diversity:				 0.487
Error (vector) diversity:			 0.543
Behavioral diversity:				 0.543
--- Run Statistics ---
Number of program evaluations used so far: 57000
Number of point (instruction) evaluations so far: 85271525
--- Timings ---
Current time: 1529616124142 milliseconds
Total Time:         188.4 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        75.3 seconds, 40.0%
Fitness Testing:     88.8 seconds, 47.1%
Report:              24.2 seconds, 12.9%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 56
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 57
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 57
;;******************************
;; -*- Number IO problem report - generation 57
Test total error for best: 36181.21889999999
Test mean error for best: 18.09061
;;------------------------------
Outputs of best individual on training cases:
Correct output: -74.6179542037 | Program output: -50.5362548664
Correct output: 78.7609586813  | Program output: 18.7609586813 
Correct output: 3.0100598709   | Program output: 13.0917592082 
Correct output: -99.2368061293 | Program output: -139.155106792
Correct output: 88.6808415603  | Program output: 36.6808415603 
Correct output: -151.1060419578 | Program output: -144.0243426204
Correct output: 56.004616184   | Program output: 29.0863155213 
Correct output: 33.520660154   | Program output: 5.520660154   
Correct output: 42.238861085   | Program output: 16.3205604224 
Correct output: -49.0227893765 | Program output: -70.0227893765
Correct output: 103.4057483059 | Program output: 116.4057483059
Correct output: -106.1378273779 | Program output: -115.0561280406
Correct output: 37.9625599991  | Program output: 32.9625599991 
Correct output: 71.9208193203  | Program output: 87.9208193203 
Correct output: 173.5348464317 | Program output: 112.5348464317
Correct output: -77.0615185935 | Program output: -75.9798192561
Correct output: -20.7643622555 | Program output: -7.7643622555 
Correct output: 1.9827630815   | Program output: -64.0172369185
Correct output: -39.1198682611 | Program output: -7.0381689237 
Correct output: 1.1392376036   | Program output: 17.1392376036 
Correct output: 129.1930977679 | Program output: 70.1930977679 
Correct output: 26.7496211861  | Program output: 22.7496211861 
Correct output: -11.2984801384 | Program output: -44.2984801384
Correct output: -136.1442960385 | Program output: -138.0625967012
Correct output: 143.0911996605 | Program output: 109.0911996605
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_frominteger} {:instruction float_sub} {:instruction float_mod} {:instruction float_pop} {:instruction integer_max} {:instruction integer_flush} {:instruction in1} {:instruction in1} {:instruction float_stackdepth} {:instruction in2} {:instruction integer_add} {:instruction float_inc} {:instruction integer_add} {:instruction float_inc} {:instruction float_inc} {:instruction integer_max} {:instruction float_inc} {:instruction float_dup_times} {:instruction float_rot} {:instruction float_stackdepth} {:instruction float_inc} {:instruction integer_max} {:instruction float_inc} {:instruction float_inc} {:instruction float_dup_times} {:instruction float_rot} {:instruction float_stackdepth} {:instruction float_inc} {:instruction float_dup_times} {:instruction float_yank} {:instruction float_stackdepth} {:instruction float_inc} {:instruction float_inc} {:instruction integer_add} {:instruction float_inc} {:instruction float_inc} {:instruction integer_max} {:instruction float_inc} {:instruction float_dup_times} {:instruction float_rot} {:instruction float_stackdepth} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_add} {:instruction float_inc} {:instruction float_inc} {:instruction integer_max} {:instruction float_inc} {:instruction float_dup_times} {:instruction float_rot} {:instruction float_stackdepth} {:instruction float_inc} {:instruction integer_add} {:instruction integer_swap} {:instruction float_inc} {:instruction 77.91830066263515} {:instruction float_rot} {:instruction float_dup_times} {:instruction float_dup_times} {:instruction float_yank} {:instruction float_dup_times} {:instruction integer_add} {:instruction 25} {:instruction integer_flush} {:instruction integer_add} {:instruction integer_swap} {:instruction float_rot} {:instruction 77.91830066263515} {:instruction float_rot} {:instruction float_dup_times} {:instruction float_rot} {:instruction integer_shove} {:instruction float_inc} {:instruction float_sub} {:instruction float_rot} {:instruction integer_flush} {:instruction float_inc} {:instruction integer_swap} {:instruction integer_yankdup} {:instruction integer_shove} {:instruction float_inc} {:instruction integer_swap} {:instruction integer_yankdup} {:instruction print_float} {:instruction integer_dec} {:instruction integer_flush} {:instruction float_dup_times} {:instruction float_div} {:instruction float_mult} {:instruction integer_shove} {:instruction float_dup} {:instruction integer_dup_times} {:instruction integer_dup} {:instruction integer_add} {:instruction integer_stackdepth} {:instruction float_dup} {:instruction integer_flush} {:instruction integer_swap} {:instruction integer_dup})
Best program: (float_frominteger float_sub float_mod float_pop integer_max integer_flush in1 in1 float_stackdepth in2 integer_add float_inc integer_add float_inc float_inc integer_max float_inc float_dup_times float_rot float_stackdepth float_inc integer_max float_inc float_inc float_dup_times float_rot float_stackdepth float_inc float_dup_times float_yank float_stackdepth float_inc float_inc integer_add float_inc float_inc integer_max float_inc float_dup_times float_rot float_stackdepth float_inc float_inc float_inc float_inc integer_add float_inc float_inc integer_max float_inc float_dup_times float_rot float_stackdepth float_inc integer_add integer_swap float_inc 77.91830066263515 float_rot float_dup_times float_dup_times float_yank float_dup_times integer_add 25 integer_flush integer_add integer_swap float_rot 77.91830066263515 float_rot float_dup_times float_rot integer_shove float_inc float_sub float_rot integer_flush float_inc integer_swap integer_yankdup integer_shove float_inc integer_swap integer_yankdup print_float integer_dec integer_flush float_dup_times float_div float_mult integer_shove float_dup integer_dup_times integer_dup integer_add integer_stackdepth float_dup integer_flush integer_swap integer_dup)
Errors: [24.0817 10 60.0 1 10.0817 8 39.9183 9 52.0 2 7.0817 11 26.9183 10 28.0 2 25.9183 11 21.0 2 13.0 2 8.9183 11 5.0 1 16.0 2 61.0 2 1.0817 10 13.0 2 66.0 10 32.0817 10 16.0 1 59.0 3 4.0 1 33.0 2 1.9183 9 34.0 2]
Total: 793.0
Mean: 15.86
Genome size: 101
Size: 102
Percent parens: 0.010
--- Population Statistics ---
Average total errors in population: 3136.4301662000007
Median total errors in population: 882.1837
Error averages by case: (106.1029483999999 10.686 150.7847982000001 4.044 86.13272420000008 8.201 129.60885730000103 9.877 146.77752359999997 3.877 109.1130305999998 10.345 103.66475620000035 9.385 121.49287119999899 10.317 101.83553960000017 10.047 133.05704590000101 7.456 103.89878400000002 3.515 110.8243167000006 10.818 103.85626440000001 3.882 102.71166729999995 3.308 165.5805819 4.334 100.20450030000026 10.645 105.34077550000002 7.631 132.30344179999966 10.215 109.8922801999993 10.746 99.38842400000003 3.931 159.5191982 4.662 99.5804324 3.819 120.23686080000033 7.115 110.67371720000065 10.278 140.4238263000001 4.291)
Error minima by case: (1.3003 7 0.1573 1 0.0101 1 12.3185 1 7.7625 1 0.0807 2 2.8274 1 7.7381 1 20.9183 1 16.0024 1 0.0 0 3.9183 2 3.0 1 0.0 0 11.5348 1 0.0817 1 0.0 0 0.4334 6 1.7221 7 0.1139 1 14.8069 2 0.7496 1 1.2985 1 0.0817 2 34.0 1)
Average genome size in population (length): 85.162
Average program size in population (points): 86.162
Average percent parens in population: 0.012
Minimum age in population: 80.70682751458237
Maximum age in population: 85.07885350449023
Average age in population: 83.36676556111544
Median age in population: 83.41567835716383
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 16
Genome diversity (% unique Plush genomes):	 0.848
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 16
Syntactic diversity (% unique Push programs):	 0.848
Total error diversity:				 0.512
Error (vector) diversity:			 0.59
Behavioral diversity:				 0.591
--- Run Statistics ---
Number of program evaluations used so far: 58000
Number of point (instruction) evaluations so far: 87400575
--- Timings ---
Current time: 1529616128357 milliseconds
Total Time:         192.6 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        76.6 seconds, 39.8%
Fitness Testing:     91.0 seconds, 47.2%
Report:              24.9 seconds, 12.9%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 57
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 58
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 58
;;******************************
;; -*- Number IO problem report - generation 58
Test total error for best: 36154.21889999999
Test mean error for best: 18.07711
;;------------------------------
Outputs of best individual on training cases:
Correct output: -74.6179542037 | Program output: -50.5362548664
Correct output: 78.7609586813  | Program output: 18.7609586813 
Correct output: 3.0100598709   | Program output: 13.0917592082 
Correct output: -99.2368061293 | Program output: -139.155106792
Correct output: 88.6808415603  | Program output: 36.6808415603 
Correct output: -151.1060419578 | Program output: -144.0243426204
Correct output: 56.004616184   | Program output: 29.0863155213 
Correct output: 33.520660154   | Program output: 5.520660154   
Correct output: 42.238861085   | Program output: 16.3205604224 
Correct output: -49.0227893765 | Program output: -68.0227893765
Correct output: 103.4057483059 | Program output: 118.4057483059
Correct output: -106.1378273779 | Program output: -115.0561280406
Correct output: 37.9625599991  | Program output: 34.9625599991 
Correct output: 71.9208193203  | Program output: 89.9208193203 
Correct output: 173.5348464317 | Program output: 112.5348464317
Correct output: -77.0615185935 | Program output: -75.9798192561
Correct output: -20.7643622555 | Program output: -5.7643622555 
Correct output: 1.9827630815   | Program output: -64.0172369185
Correct output: -39.1198682611 | Program output: -7.0381689237 
Correct output: 1.1392376036   | Program output: 14.1392376036 
Correct output: 129.1930977679 | Program output: 70.1930977679 
Correct output: 26.7496211861  | Program output: 24.7496211861 
Correct output: -11.2984801384 | Program output: -44.2984801384
Correct output: -136.1442960385 | Program output: -138.0625967012
Correct output: 143.0911996605 | Program output: 109.0911996605
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_frominteger} {:instruction float_sub} {:instruction float_mod} {:instruction float_pop} {:instruction integer_max} {:instruction integer_flush} {:instruction in1} {:instruction in1} {:instruction float_stackdepth} {:instruction in2} {:instruction integer_add} {:instruction float_inc} {:instruction integer_add} {:instruction float_inc} {:instruction float_inc} {:instruction integer_max} {:instruction float_inc} {:instruction integer_add} {:instruction float_inc} {:instruction float_inc} {:instruction integer_max} {:instruction float_inc} {:instruction float_dup_times} {:instruction float_rot} {:instruction float_stackdepth} {:instruction float_inc} {:instruction float_rot} {:instruction float_stackdepth} {:instruction float_inc} {:instruction integer_max} {:instruction float_inc} {:instruction integer_add} {:instruction float_inc} {:instruction float_inc} {:instruction integer_max} {:instruction float_inc} {:instruction float_dup_times} {:instruction float_rot} {:instruction float_stackdepth} {:instruction float_inc} {:instruction integer_max} {:instruction float_inc} {:instruction float_dup_times} {:instruction float_rot} {:instruction float_stackdepth} {:instruction integer_max} {:instruction float_inc} {:instruction float_dup_times} {:instruction tagged_485} {:instruction float_stackdepth} {:instruction float_inc} {:instruction float_inc} {:instruction integer_add} {:instruction float_inc} {:instruction float_inc} {:instruction integer_max} {:instruction float_inc} {:instruction float_dup_times} {:instruction float_rot} {:instruction integer_min} {:instruction float_inc} {:instruction float_dup_times} {:instruction float_yank} {:instruction float_inc} {:instruction float_dup_times} {:instruction float_rot} {:instruction float_stackdepth} {:instruction float_inc} {:instruction float_dup_times} {:instruction float_yank} {:instruction float_dup_times} {:instruction integer_add} {:instruction 25} {:instruction float_stackdepth} {:instruction float_inc} {:instruction float_dup_times} {:instruction float_yank} {:instruction float_dup_times} {:instruction integer_add} {:instruction 25} {:instruction integer_flush} {:instruction integer_add} {:instruction integer_swap} {:instruction float_rot} {:instruction 77.91830066263515} {:instruction float_rot} {:instruction float_dup_times} {:instruction float_rot} {:instruction integer_shove} {:instruction float_inc} {:instruction float_sub} {:instruction float_rot} {:instruction integer_flush} {:instruction float_inc} {:instruction integer_swap} {:instruction integer_yankdup} {:instruction integer_shove} {:instruction float_inc} {:instruction integer_swap} {:instruction integer_yankdup} {:instruction print_float} {:instruction integer_dec} {:instruction integer_flush} {:instruction float_dup_times} {:instruction float_div} {:instruction float_mult} {:instruction integer_shove} {:instruction float_dup} {:instruction integer_dup_times} {:instruction integer_dup} {:instruction float_flush} {:instruction integer_stackdepth} {:instruction float_dup} {:instruction integer_dup_times})
Best program: (float_frominteger float_sub float_mod float_pop integer_max integer_flush in1 in1 float_stackdepth in2 integer_add float_inc integer_add float_inc float_inc integer_max float_inc integer_add float_inc float_inc integer_max float_inc float_dup_times float_rot float_stackdepth float_inc float_rot float_stackdepth float_inc integer_max float_inc integer_add float_inc float_inc integer_max float_inc float_dup_times float_rot float_stackdepth float_inc integer_max float_inc float_dup_times float_rot float_stackdepth integer_max float_inc float_dup_times tagged_485 float_stackdepth float_inc float_inc integer_add float_inc float_inc integer_max float_inc float_dup_times float_rot integer_min float_inc float_dup_times float_yank float_inc float_dup_times float_rot float_stackdepth float_inc float_dup_times float_yank float_dup_times integer_add 25 float_stackdepth float_inc float_dup_times float_yank float_dup_times integer_add 25 integer_flush integer_add integer_swap float_rot 77.91830066263515 float_rot float_dup_times float_rot integer_shove float_inc float_sub float_rot integer_flush float_inc integer_swap integer_yankdup integer_shove float_inc integer_swap integer_yankdup print_float integer_dec integer_flush float_dup_times float_div float_mult integer_shove float_dup integer_dup_times integer_dup float_flush integer_stackdepth float_dup integer_dup_times)
Errors: [24.0817 10 60.0 1 10.0817 8 39.9183 9 52.0 2 7.0817 11 26.9183 10 28.0 2 25.9183 11 19.0 2 15.0 2 8.9183 11 3.0 1 18.0 2 61.0 2 1.0817 10 15.0 2 66.0 10 32.0817 10 13.0 1 59.0 3 2.0 1 33.0 2 1.9183 9 34.0 2]
Total: 790.0
Mean: 15.8
Genome size: 114
Size: 115
Percent parens: 0.009
--- Population Statistics ---
Average total errors in population: 3557.984217700001
Median total errors in population: 867.0495000000001
Error averages by case: (128.0621245999995 10.797 163.77017830000005 3.993 106.8043534999994 8.469 147.13306040000026 9.951 159.69808530000003 3.978 129.19653279999955 10.491 122.79743550000072 9.507 137.16786799999892 9.753 121.06226820000055 10.073 145.70956530000115 7.535 120.18021670000005 3.706 129.36071140000064 10.774 118.88426249999996 3.885 118.89455230000002 3.493 177.09043539999996 4.321 119.4398399000004 10.598 123.40294829999998 7.732 145.84872539999952 10.329 131.00901839999923 10.909 122.5005246999999 4.034 171.93259339999997 4.76 116.43295269999997 3.87 134.47889280000064 7.312 129.34933590000065 10.241 152.91973600000006 4.347)
Error minima by case: (0.3302 8 0.0323 1 0.0807 1 17.3185 1 2.3192 1 0.0807 2 2.8274 1 3.7367 1 4.9815 1 0.9411 1 0.0 0 5.9183 2 0.7052 1 0.0 0 1.4652 1 0.0817 1 1.0 1 0.0172 1 1.7221 7 0.031 1 7.8069 2 1.2504 1 1.1522 1 0.0817 2 22.0912 1)
Average genome size in population (length): 88.001
Average program size in population (points): 89.001
Average percent parens in population: 0.011
Minimum age in population: 82.09539005788707
Maximum age in population: 86.64401521849697
Average age in population: 84.79964244823219
Median age in population: 84.8434337512305
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 13
Genome diversity (% unique Plush genomes):	 0.851
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 13
Syntactic diversity (% unique Push programs):	 0.851
Total error diversity:				 0.538
Error (vector) diversity:			 0.613
Behavioral diversity:				 0.614
--- Run Statistics ---
Number of program evaluations used so far: 59000
Number of point (instruction) evaluations so far: 89600650
--- Timings ---
Current time: 1529616132638 milliseconds
Total Time:         196.8 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        78.0 seconds, 39.6%
Fitness Testing:     93.1 seconds, 47.3%
Report:              25.6 seconds, 13.0%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 58
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 59
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 59
;;******************************
;; -*- Number IO problem report - generation 59
Test total error for best: 35535.0359
Test mean error for best: 17.76752
;;------------------------------
Outputs of best individual on training cases:
Correct output: -74.6179542037 | Program output: -49.5362548664
Correct output: 78.7609586813  | Program output: 20.7609586813 
Correct output: 3.0100598709   | Program output: 14.0917592082 
Correct output: -99.2368061293 | Program output: -138.155106792
Correct output: 88.6808415603  | Program output: 38.6808415603 
Correct output: -151.1060419578 | Program output: -143.0243426204
Correct output: 56.004616184   | Program output: 30.0863155213 
Correct output: 33.520660154   | Program output: 7.520660154   
Correct output: 42.238861085   | Program output: 17.3205604224 
Correct output: -49.0227893765 | Program output: -66.0227893765
Correct output: 103.4057483059 | Program output: 120.4057483059
Correct output: -106.1378273779 | Program output: -114.0561280406
Correct output: 37.9625599991  | Program output: 36.9625599991 
Correct output: 71.9208193203  | Program output: 91.9208193203 
Correct output: 173.5348464317 | Program output: 114.5348464317
Correct output: -77.0615185935 | Program output: -74.9798192561
Correct output: -20.7643622555 | Program output: -3.7643622555 
Correct output: 1.9827630815   | Program output: -62.0172369185
Correct output: -39.1198682611 | Program output: -6.0381689237 
Correct output: 1.1392376036   | Program output: 17.1392376036 
Correct output: 129.1930977679 | Program output: 72.1930977679 
Correct output: 26.7496211861  | Program output: 26.7496211861 
Correct output: -11.2984801384 | Program output: -42.2984801384
Correct output: -136.1442960385 | Program output: -137.0625967012
Correct output: 143.0911996605 | Program output: 111.0911996605
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_frominteger} {:instruction float_sub} {:instruction float_mod} {:instruction float_pop} {:instruction integer_max} {:instruction integer_flush} {:instruction in1} {:instruction in1} {:instruction float_stackdepth} {:instruction in2} {:instruction integer_add} {:instruction float_inc} {:instruction integer_add} {:instruction float_inc} {:instruction float_inc} {:instruction integer_max} {:instruction float_inc} {:instruction integer_add} {:instruction float_inc} {:instruction integer_add} {:instruction integer_add} {:instruction float_inc} {:instruction integer_add} {:instruction float_inc} {:instruction float_inc} {:instruction integer_max} {:instruction float_inc} {:instruction float_dup_times} {:instruction float_rot} {:instruction float_stackdepth} {:instruction float_inc} {:instruction integer_max} {:instruction float_inc} {:instruction float_dup_times} {:instruction float_rot} {:instruction float_stackdepth} {:instruction integer_max} {:instruction float_inc} {:instruction float_dup_times} {:instruction tagged_485} {:instruction float_stackdepth} {:instruction float_inc} {:instruction float_inc} {:instruction integer_add} {:instruction float_inc} {:instruction float_inc} {:instruction integer_max} {:instruction float_inc} {:instruction float_inc} {:instruction float_dup_times} {:instruction float_rot} {:instruction float_stackdepth} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_add} {:instruction float_inc} {:instruction float_inc} {:instruction integer_max} {:instruction float_inc} {:instruction float_dup_times} {:instruction float_rot} {:instruction float_stackdepth} {:instruction float_inc} {:instruction integer_add} {:instruction integer_swap} {:instruction float_inc} {:instruction 77.91830066263515} {:instruction float_rot} {:instruction float_dup_times} {:instruction float_rot} {:instruction integer_shove} {:instruction float_inc} {:instruction float_sub} {:instruction float_rot} {:instruction integer_dec} {:instruction integer_flush} {:instruction float_dup_times} {:instruction float_inc} {:instruction integer_mult} {:instruction float_inc} {:instruction float_sub} {:instruction float_rot} {:instruction integer_shove} {:instruction float_inc} {:instruction integer_swap} {:instruction integer_yankdup} {:instruction print_float} {:instruction integer_dec} {:instruction integer_flush} {:instruction float_dup_times} {:instruction float_div} {:instruction float_mult} {:instruction integer_shove} {:instruction float_dup} {:instruction integer_dup_times} {:instruction integer_stackdepth} {:instruction float_dup} {:instruction float_yankdup} {:instruction integer_dup} {:instruction in1})
Best program: (float_frominteger float_sub float_mod float_pop integer_max integer_flush in1 in1 float_stackdepth in2 integer_add float_inc integer_add float_inc float_inc integer_max float_inc integer_add float_inc integer_add integer_add float_inc integer_add float_inc float_inc integer_max float_inc float_dup_times float_rot float_stackdepth float_inc integer_max float_inc float_dup_times float_rot float_stackdepth integer_max float_inc float_dup_times tagged_485 float_stackdepth float_inc float_inc integer_add float_inc float_inc integer_max float_inc float_inc float_dup_times float_rot float_stackdepth float_inc float_inc float_inc float_inc integer_add float_inc float_inc integer_max float_inc float_dup_times float_rot float_stackdepth float_inc integer_add integer_swap float_inc 77.91830066263515 float_rot float_dup_times float_rot integer_shove float_inc float_sub float_rot integer_dec integer_flush float_dup_times float_inc integer_mult float_inc float_sub float_rot integer_shove float_inc integer_swap integer_yankdup print_float integer_dec integer_flush float_dup_times float_div float_mult integer_shove float_dup integer_dup_times integer_stackdepth float_dup float_yankdup integer_dup in1)
Errors: [25.0817 10 58.0 2 11.0817 9 38.9183 10 50.0 1 8.0817 11 25.9183 10 26.0 2 24.9183 11 17.0 2 17.0 2 7.9183 11 1.0 1 20.0 1 59.0 2 2.0817 10 17.0 2 64.0 10 33.0817 10 16.0 1 57.0 2 0.0 0 31.0 2 0.9183 9 32.0 2]
Total: 776.0
Mean: 15.52
Genome size: 102
Size: 103
Percent parens: 0.010
--- Population Statistics ---
Average total errors in population: 3993.562219100001
Median total errors in population: 857.2644
Error averages by case: (149.2256319000002 10.888 179.7077699 4.206 133.0222288999995 8.506 163.3651229999998 9.92 174.7264758000001 4.126 147.23278059999967 10.612 143.58505370000023 9.472 153.19347469999917 8.624 143.42975960000004 9.974 161.2223395000012 7.866 137.72232830000004 3.982 146.13485579999997 10.79 133.72503569999998 3.936 137.71194300000005 3.77 190.5525528 4.479 136.66852990000012 10.5 140.7362325999994 8.095 159.7539978999994 10.409 153.40620560000022 10.995 142.41729919999995 4.173 185.85876010000013 4.926 132.26232019999995 3.888 149.06993190000068 7.62 145.88408900000016 10.13 166.59149950000003 4.469)
Error minima by case: (0.3003 8 0.1573 1 0.0807 1 18.3185 1 3.6808 1 0.0807 2 1.1726 1 13.3993 1 12.2737 1 7.8955 1 0.0 0 0.0817 2 0.0 0 0.0 0 17.5348 1 0.0807 1 1.0 1 0.0172 7 3.7221 8 0.0829 1 12.8069 2 0.0 0 0.2985 1 0.0817 2 21.9895 1)
Average genome size in population (length): 90.935
Average program size in population (points): 91.935
Average percent parens in population: 0.011
Minimum age in population: 83.48028426973421
Maximum age in population: 88.14452955667834
Average age in population: 86.24596301240884
Median age in population: 86.26879900068612
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 14
Genome diversity (% unique Plush genomes):	 0.861
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 14
Syntactic diversity (% unique Push programs):	 0.861
Total error diversity:				 0.554
Error (vector) diversity:			 0.626
Behavioral diversity:				 0.628
--- Run Statistics ---
Number of program evaluations used so far: 60000
Number of point (instruction) evaluations so far: 91874100
--- Timings ---
Current time: 1529616136935 milliseconds
Total Time:         201.2 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        79.3 seconds, 39.4%
Fitness Testing:     95.4 seconds, 47.4%
Report:              26.3 seconds, 13.1%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 59
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 60
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 60
;;******************************
;; -*- Number IO problem report - generation 60
Test total error for best: 35535.0359
Test mean error for best: 17.76752
;;------------------------------
Outputs of best individual on training cases:
Correct output: -74.6179542037 | Program output: -49.5362548664
Correct output: 78.7609586813  | Program output: 20.7609586813 
Correct output: 3.0100598709   | Program output: 14.0917592082 
Correct output: -99.2368061293 | Program output: -138.155106792
Correct output: 88.6808415603  | Program output: 38.6808415603 
Correct output: -151.1060419578 | Program output: -143.0243426204
Correct output: 56.004616184   | Program output: 30.0863155213 
Correct output: 33.520660154   | Program output: 7.520660154   
Correct output: 42.238861085   | Program output: 17.3205604224 
Correct output: -49.0227893765 | Program output: -66.0227893765
Correct output: 103.4057483059 | Program output: 120.4057483059
Correct output: -106.1378273779 | Program output: -114.0561280406
Correct output: 37.9625599991  | Program output: 36.9625599991 
Correct output: 71.9208193203  | Program output: 91.9208193203 
Correct output: 173.5348464317 | Program output: 114.5348464317
Correct output: -77.0615185935 | Program output: -74.9798192561
Correct output: -20.7643622555 | Program output: -3.7643622555 
Correct output: 1.9827630815   | Program output: -62.0172369185
Correct output: -39.1198682611 | Program output: -6.0381689237 
Correct output: 1.1392376036   | Program output: 17.1392376036 
Correct output: 129.1930977679 | Program output: 72.1930977679 
Correct output: 26.7496211861  | Program output: 26.7496211861 
Correct output: -11.2984801384 | Program output: -42.2984801384
Correct output: -136.1442960385 | Program output: -137.0625967012
Correct output: 143.0911996605 | Program output: 111.0911996605
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_frominteger} {:instruction float_sub} {:instruction float_mod} {:instruction float_pop} {:instruction integer_max} {:instruction integer_flush} {:instruction in1} {:instruction in1} {:instruction float_stackdepth} {:instruction in2} {:instruction integer_add} {:instruction float_inc} {:instruction integer_add} {:instruction float_inc} {:instruction float_inc} {:instruction integer_max} {:instruction float_inc} {:instruction integer_add} {:instruction float_inc} {:instruction integer_add} {:instruction integer_add} {:instruction float_inc} {:instruction integer_add} {:instruction float_inc} {:instruction float_inc} {:instruction integer_max} {:instruction float_inc} {:instruction float_dup_times} {:instruction float_rot} {:instruction float_stackdepth} {:instruction float_inc} {:instruction integer_max} {:instruction float_inc} {:instruction float_dup_times} {:instruction float_rot} {:instruction float_stackdepth} {:instruction integer_max} {:instruction float_inc} {:instruction float_dup_times} {:instruction tagged_485} {:instruction float_stackdepth} {:instruction float_inc} {:instruction float_inc} {:instruction integer_add} {:instruction float_inc} {:instruction float_inc} {:instruction integer_max} {:instruction float_inc} {:instruction float_inc} {:instruction float_dup_times} {:instruction float_rot} {:instruction float_stackdepth} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_add} {:instruction float_inc} {:instruction float_inc} {:instruction integer_max} {:instruction float_inc} {:instruction float_dup_times} {:instruction float_rot} {:instruction float_stackdepth} {:instruction float_inc} {:instruction integer_add} {:instruction integer_swap} {:instruction float_inc} {:instruction 77.91830066263515} {:instruction float_rot} {:instruction float_dup_times} {:instruction float_rot} {:instruction integer_shove} {:instruction float_inc} {:instruction float_sub} {:instruction float_rot} {:instruction integer_dec} {:instruction integer_flush} {:instruction float_dup_times} {:instruction float_inc} {:instruction integer_mult} {:instruction float_inc} {:instruction float_sub} {:instruction float_rot} {:instruction integer_shove} {:instruction float_inc} {:instruction integer_swap} {:instruction integer_yankdup} {:instruction print_float} {:instruction integer_dec} {:instruction integer_flush} {:instruction float_dup_times} {:instruction float_div} {:instruction float_mult} {:instruction integer_shove} {:instruction float_dup} {:instruction integer_dup_times} {:instruction float_inc} {:instruction float_mod} {:instruction integer_max} {:instruction integer_mod} {:instruction float_flush})
Best program: (float_frominteger float_sub float_mod float_pop integer_max integer_flush in1 in1 float_stackdepth in2 integer_add float_inc integer_add float_inc float_inc integer_max float_inc integer_add float_inc integer_add integer_add float_inc integer_add float_inc float_inc integer_max float_inc float_dup_times float_rot float_stackdepth float_inc integer_max float_inc float_dup_times float_rot float_stackdepth integer_max float_inc float_dup_times tagged_485 float_stackdepth float_inc float_inc integer_add float_inc float_inc integer_max float_inc float_inc float_dup_times float_rot float_stackdepth float_inc float_inc float_inc float_inc integer_add float_inc float_inc integer_max float_inc float_dup_times float_rot float_stackdepth float_inc integer_add integer_swap float_inc 77.91830066263515 float_rot float_dup_times float_rot integer_shove float_inc float_sub float_rot integer_dec integer_flush float_dup_times float_inc integer_mult float_inc float_sub float_rot integer_shove float_inc integer_swap integer_yankdup print_float integer_dec integer_flush float_dup_times float_div float_mult integer_shove float_dup integer_dup_times float_inc float_mod integer_max integer_mod float_flush)
Errors: [25.0817 10 58.0 2 11.0817 9 38.9183 10 50.0 1 8.0817 11 25.9183 10 26.0 2 24.9183 11 17.0 2 17.0 2 7.9183 11 1.0 1 20.0 1 59.0 2 2.0817 10 17.0 2 64.0 10 33.0817 10 16.0 1 57.0 2 0.0 0 31.0 2 0.9183 9 32.0 2]
Total: 776.0
Mean: 15.52
Genome size: 102
Size: 103
Percent parens: 0.010
--- Population Statistics ---
Average total errors in population: 3543.6932032000013
Median total errors in population: 837.3562000000002
Error averages by case: (136.49662889999948 10.761 159.49679090000006 4.19 117.10073579999934 8.614 148.84451639999997 9.906 155.77209900000008 4.063 132.9705792999993 10.692 127.20717310000084 9.504 130.5289624999996 7.292 126.63677720000075 9.969 142.33648750000123 7.951 120.3018782 3.985 130.2950559000007 10.764 113.65995590000007 3.765 119.08602530000006 3.785 173.10516749999994 4.393 122.00804549999967 10.411 120.54268760000002 8.278 137.0878980999995 10.26 139.4115972999994 10.843 121.81200220000002 4.066 166.7634119000001 4.814 112.30439129999993 3.767 126.95323060000062 7.69 130.10025280000028 10.048 148.7378525 4.322)
Error minima by case: (0.2249 2 0.1573 1 0.0101 1 2.0 1 1.2912 1 0.0807 2 1.1726 1 1.9587 1 4.5909 1 0.0 0 0.0 0 0.0817 2 0.0 0 0.0 0 20.5348 1 0.0807 1 0.7644 1 0.0172 1 9.2967 9 0.0 0 1.1931 2 0.0 0 0.7015 1 0.0817 2 1.4832 1)
Average genome size in population (length): 93.735
Average program size in population (points): 94.735
Average percent parens in population: 0.011
Minimum age in population: 85.3326754173026
Maximum age in population: 89.51266839738354
Average age in population: 87.69086160947082
Median age in population: 87.74219987174016
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 11
Genome diversity (% unique Plush genomes):	 0.846
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 11
Syntactic diversity (% unique Push programs):	 0.846
Total error diversity:				 0.577
Error (vector) diversity:			 0.64
Behavioral diversity:				 0.64
--- Run Statistics ---
Number of program evaluations used so far: 61000
Number of point (instruction) evaluations so far: 94217550
--- Timings ---
Current time: 1529616141289 milliseconds
Total Time:         205.6 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        80.7 seconds, 39.3%
Fitness Testing:     97.8 seconds, 47.6%
Report:              27.0 seconds, 13.1%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 60
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 61
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 61
;;******************************
;; -*- Number IO problem report - generation 61
Test total error for best: 37405.33589999998
Test mean error for best: 18.70267
;;------------------------------
Outputs of best individual on training cases:
Correct output: -74.6179542037 | Program output: -47.5362548664
Correct output: 78.7609586813  | Program output: 21.7609586813 
Correct output: 3.0100598709   | Program output: 16.0917592082 
Correct output: -99.2368061293 | Program output: -136.155106792
Correct output: 88.6808415603  | Program output: 39.6808415603 
Correct output: -151.1060419578 | Program output: -141.0243426204
Correct output: 56.004616184   | Program output: 32.0863155213 
Correct output: 33.520660154   | Program output: 8.520660154   
Correct output: 42.238861085   | Program output: 19.3205604224 
Correct output: -49.0227893765 | Program output: -1.0          
Correct output: 103.4057483059 | Program output: 121.4057483059
Correct output: -106.1378273779 | Program output: -112.0561280406
Correct output: 37.9625599991  | Program output: 37.9625599991 
Correct output: 71.9208193203  | Program output: 92.9208193203 
Correct output: 173.5348464317 | Program output: 115.5348464317
Correct output: -77.0615185935 | Program output: -72.9798192561
Correct output: -20.7643622555 | Program output: 0.7643622555  
Correct output: 1.9827630815   | Program output: -1.0          
Correct output: -39.1198682611 | Program output: -4.0381689237 
Correct output: 1.1392376036   | Program output: 22.1392376036 
Correct output: 129.1930977679 | Program output: 73.1930977679 
Correct output: 26.7496211861  | Program output: 27.7496211861 
Correct output: -11.2984801384 | Program output: -1.0          
Correct output: -136.1442960385 | Program output: -135.0625967012
Correct output: 143.0911996605 | Program output: 112.0911996605
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_yank} {:instruction float_sub} {:instruction float_mod} {:instruction float_frominteger} {:instruction float_flush} {:instruction float_min} {:instruction print_integer} {:instruction integer_max} {:instruction float_mult} {:instruction float_pop} {:instruction integer_max} {:instruction float_frominteger} {:instruction in1} {:instruction in1} {:instruction float_stackdepth} {:instruction in2} {:instruction integer_add} {:instruction float_inc} {:instruction integer_add} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_add} {:instruction float_inc} {:instruction integer_add} {:instruction integer_inc} {:instruction float_inc} {:instruction integer_max} {:instruction float_inc} {:instruction float_dup_times} {:instruction float_rot} {:instruction float_stackdepth} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_add} {:instruction float_inc} {:instruction float_inc} {:instruction integer_max} {:instruction float_inc} {:instruction float_dup_times} {:instruction float_rot} {:instruction float_dup_times} {:instruction float_rot} {:instruction float_stackdepth} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_add} {:instruction float_inc} {:instruction float_inc} {:instruction integer_max} {:instruction float_inc} {:instruction float_dup_times} {:instruction float_rot} {:instruction float_stackdepth} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_add} {:instruction float_inc} {:instruction float_inc} {:instruction integer_max} {:instruction float_inc} {:instruction float_dup_times} {:instruction float_rot} {:instruction integer_flush} {:instruction integer_add} {:instruction integer_swap} {:instruction print_integer} {:instruction 77.91830066263515} {:instruction float_rot} {:instruction float_dup_times} {:instruction float_rot} {:instruction integer_shove} {:instruction float_inc} {:instruction float_sub} {:instruction float_rot} {:instruction integer_shove} {:instruction float_inc} {:instruction float_sub} {:instruction float_rot} {:instruction float_mod} {:instruction float_inc} {:instruction integer_swap} {:instruction integer_min} {:instruction print_float} {:instruction integer_dec} {:instruction integer_flush} {:instruction float_dup_times} {:instruction float_div})
Best program: (float_yank float_sub float_mod float_frominteger float_flush float_min print_integer integer_max float_mult float_pop integer_max float_frominteger in1 in1 float_stackdepth in2 integer_add float_inc integer_add float_inc float_inc float_inc integer_add float_inc integer_add integer_inc float_inc integer_max float_inc float_dup_times float_rot float_stackdepth float_inc float_inc float_inc float_inc integer_add float_inc float_inc integer_max float_inc float_dup_times float_rot float_dup_times float_rot float_stackdepth float_inc float_inc float_inc float_inc integer_add float_inc float_inc integer_max float_inc float_dup_times float_rot float_stackdepth float_inc float_inc float_inc float_inc integer_add float_inc float_inc integer_max float_inc float_dup_times float_rot integer_flush integer_add integer_swap print_integer 77.91830066263515 float_rot float_dup_times float_rot integer_shove float_inc float_sub float_rot integer_shove float_inc float_sub float_rot float_mod float_inc integer_swap integer_min print_float integer_dec integer_flush float_dup_times float_div)
Errors: [27.0817 10 57.0 2 13.0817 9 36.9183 10 49.0 2 10.0817 10 23.9183 10 25.0 2 22.9183 11 48.0228 11 18.0 2 5.9183 11 0.0 0 21.0 2 58.0 2 4.0817 10 21.5287 2 2.9828 10 35.0817 10 21.0 2 56.0 3 1.0 1 10.2985 10 1.0817 9 31.0 2]
Total: 752.9961999999998
Mean: 15.059924
Genome size: 94
Size: 95
Percent parens: 0.011
--- Population Statistics ---
Average total errors in population: 3523.6208875
Median total errors in population: 827.0549
Error averages by case: (131.17453919999937 10.848 160.45083899999992 4.134 111.86540519999957 8.495 142.49946630000076 9.766 156.53250330000006 4.105 130.27645059999918 10.642 120.24743280000072 9.387 132.52228799999978 6.089 118.90853590000056 9.845 144.80945830000118 7.555 124.28318370000005 4.058 125.1571327000007 10.675 115.01015890000002 3.599 122.80031220000016 3.904 173.56573379999992 4.332 116.35368519999976 10.392 124.40831339999997 7.857 144.88907649999953 10.434 134.79960269999904 10.892 122.62661359999994 4.384 167.82397030000016 4.849 112.80314909999991 3.556 133.33934230000074 7.347 125.95937220000037 9.817 149.30532230000003 4.247)
Error minima by case: (1.3003 8 0.1573 1 0.0113 1 10.3185 1 5.6808 1 0.0807 2 0.5611 1 9.1588 1 0.4389 1 2.4669 1 0.0 0 0.0817 2 0.0 0 0.0 0 20.5348 1 0.0807 1 0.0 0 0.0 0 5.7221 8 0.0829 1 2.1931 2 0.0 0 1.3802 1 0.0817 2 19.9895 1)
Average genome size in population (length): 97.026
Average program size in population (points): 98.026
Average percent parens in population: 0.010
Minimum age in population: 86.65209601019325
Maximum age in population: 90.83066464853387
Average age in population: 89.03469960976982
Median age in population: 89.07675102992992
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 14
Genome diversity (% unique Plush genomes):	 0.874
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 14
Syntactic diversity (% unique Push programs):	 0.874
Total error diversity:				 0.619
Error (vector) diversity:			 0.686
Behavioral diversity:				 0.687
--- Run Statistics ---
Number of program evaluations used so far: 62000
Number of point (instruction) evaluations so far: 96643225
--- Timings ---
Current time: 1529616145653 milliseconds
Total Time:         210.0 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        82.1 seconds, 39.1%
Fitness Testing:    100.2 seconds, 47.7%
Report:              27.7 seconds, 13.2%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 61
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 62
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 62
;;******************************
;; -*- Number IO problem report - generation 62
Test total error for best: 37024.477299999984
Test mean error for best: 18.51224
;;------------------------------
Outputs of best individual on training cases:
Correct output: -74.6179542037 | Program output: -49.5362548664
Correct output: 78.7609586813  | Program output: 21.7609586813 
Correct output: 3.0100598709   | Program output: 14.0917592082 
Correct output: -99.2368061293 | Program output: -138.155106792
Correct output: 88.6808415603  | Program output: 39.6808415603 
Correct output: -151.1060419578 | Program output: -143.0243426204
Correct output: 56.004616184   | Program output: 30.0863155213 
Correct output: 33.520660154   | Program output: 8.520660154   
Correct output: 42.238861085   | Program output: 17.3205604224 
Correct output: -49.0227893765 | Program output: -1.0          
Correct output: 103.4057483059 | Program output: 121.4057483059
Correct output: -106.1378273779 | Program output: -114.0561280406
Correct output: 37.9625599991  | Program output: 37.9625599991 
Correct output: 71.9208193203  | Program output: 92.9208193203 
Correct output: 173.5348464317 | Program output: 115.5348464317
Correct output: -77.0615185935 | Program output: -74.9798192561
Correct output: -20.7643622555 | Program output: 0.7643622555  
Correct output: 1.9827630815   | Program output: -1.0          
Correct output: -39.1198682611 | Program output: -6.0381689237 
Correct output: 1.1392376036   | Program output: 9.0           
Correct output: 129.1930977679 | Program output: 73.1930977679 
Correct output: 26.7496211861  | Program output: 27.7496211861 
Correct output: -11.2984801384 | Program output: -1.0          
Correct output: -136.1442960385 | Program output: -137.0625967012
Correct output: 143.0911996605 | Program output: 112.0911996605
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_yank} {:instruction float_sub} {:instruction integer_max} {:instruction integer_flush} {:instruction in1} {:instruction in1} {:instruction float_stackdepth} {:instruction in2} {:instruction integer_add} {:instruction float_inc} {:instruction integer_add} {:instruction float_inc} {:instruction float_inc} {:instruction integer_add} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_add} {:instruction float_inc} {:instruction integer_add} {:instruction integer_inc} {:instruction float_inc} {:instruction integer_max} {:instruction float_inc} {:instruction float_dup_times} {:instruction float_rot} {:instruction float_stackdepth} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_add} {:instruction float_inc} {:instruction float_inc} {:instruction integer_max} {:instruction float_inc} {:instruction float_dup_times} {:instruction float_rot} {:instruction float_stackdepth} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_add} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_add} {:instruction float_inc} {:instruction float_inc} {:instruction integer_max} {:instruction float_inc} {:instruction float_dup_times} {:instruction 25} {:instruction float_stackdepth} {:instruction float_inc} {:instruction float_dup_times} {:instruction float_yank} {:instruction float_dup_times} {:instruction integer_add} {:instruction 25} {:instruction integer_flush} {:instruction integer_add} {:instruction float_yank} {:instruction float_dup_times} {:instruction integer_add} {:instruction 25} {:instruction integer_flush} {:instruction integer_add} {:instruction integer_swap} {:instruction print_integer} {:instruction 77.91830066263515} {:instruction float_rot} {:instruction float_dup_times} {:instruction float_rot} {:instruction integer_shove} {:instruction float_inc} {:instruction float_sub} {:instruction float_rot} {:instruction integer_shove} {:instruction float_inc} {:instruction float_sub} {:instruction float_rot} {:instruction float_mod} {:instruction float_inc} {:instruction integer_swap} {:instruction integer_min} {:instruction print_float} {:instruction integer_dec} {:instruction integer_flush} {:instruction float_dup_times} {:instruction float_div})
Best program: (float_yank float_sub integer_max integer_flush in1 in1 float_stackdepth in2 integer_add float_inc integer_add float_inc float_inc integer_add float_inc float_inc float_inc integer_add float_inc integer_add integer_inc float_inc integer_max float_inc float_dup_times float_rot float_stackdepth float_inc float_inc float_inc float_inc integer_add float_inc float_inc integer_max float_inc float_dup_times float_rot float_stackdepth float_inc float_inc float_inc float_inc integer_add float_inc float_inc float_inc float_inc integer_add float_inc float_inc integer_max float_inc float_dup_times 25 float_stackdepth float_inc float_dup_times float_yank float_dup_times integer_add 25 integer_flush integer_add float_yank float_dup_times integer_add 25 integer_flush integer_add integer_swap print_integer 77.91830066263515 float_rot float_dup_times float_rot integer_shove float_inc float_sub float_rot integer_shove float_inc float_sub float_rot float_mod float_inc integer_swap integer_min print_float integer_dec integer_flush float_dup_times float_div)
Errors: [25.0817 10 57.0 2 11.0817 9 38.9183 10 49.0 2 8.0817 11 25.9183 10 25.0 2 24.9183 11 48.0228 11 18.0 2 7.9183 11 0.0 0 21.0 2 58.0 2 2.0817 10 21.5287 2 2.9828 10 33.0817 10 7.8608 10 56.0 3 1.0 1 10.2985 10 0.9183 9 31.0 2]
Total: 746.6936
Mean: 14.933872
Genome size: 93
Size: 94
Percent parens: 0.011
--- Population Statistics ---
Average total errors in population: 3473.0759692
Median total errors in population: 812.53525
Error averages by case: (122.11236179999902 10.681 160.07611909999994 4.187 100.42576559999938 8.577 131.39699820000146 9.642 158.63019699999995 4.128 120.66082939999892 10.7 108.37391090000106 9.47 134.13374759999974 5.182 107.78979090000075 10.038 150.7450422000013 7.867 133.1799912 4.26 114.10682580000095 10.668 118.36098900000007 3.481 131.9576154 4.072 179.28037400000005 4.369 105.3193836999995 10.332 129.8180901000001 8.213 147.57308939999947 10.403 125.55356749999879 10.77 117.42988699999978 4.664 173.34003220000002 4.839 113.71567819999993 3.45 137.90479290000061 7.593 114.57392260000043 9.627 155.09296750000004 4.311)
Error minima by case: (0.5207 7 0.1573 1 0.0807 1 4.5591 1 1.3192 1 0.0807 2 4.1726 1 1.4975 1 11.9183 1 1.5954 1 0.0 0 0.0817 2 0.0 0 0.0 0 17.5348 1 0.0817 1 2.0 1 0.0192 1 11.7221 8 0.0 0 2.8069 2 0.0 0 0.3802 1 0.0817 2 27.0 1)
Average genome size in population (length): 99.707
Average program size in population (points): 100.707
Average percent parens in population: 0.010
Minimum age in population: 87.88729135986193
Maximum age in population: 92.38186581851238
Average age in population: 90.47794445860244
Median age in population: 90.54003441747925
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 15
Genome diversity (% unique Plush genomes):	 0.872
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 15
Syntactic diversity (% unique Push programs):	 0.872
Total error diversity:				 0.609
Error (vector) diversity:			 0.671
Behavioral diversity:				 0.672
--- Run Statistics ---
Number of program evaluations used so far: 63000
Number of point (instruction) evaluations so far: 99136050
--- Timings ---
Current time: 1529616150023 milliseconds
Total Time:         214.4 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        83.4 seconds, 38.9%
Fitness Testing:    102.7 seconds, 47.9%
Report:              28.2 seconds, 13.2%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 62
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 63
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 63
;;******************************
;; -*- Number IO problem report - generation 63
Test total error for best: 37024.477299999984
Test mean error for best: 18.51224
;;------------------------------
Outputs of best individual on training cases:
Correct output: -74.6179542037 | Program output: -49.5362548664
Correct output: 78.7609586813  | Program output: 21.7609586813 
Correct output: 3.0100598709   | Program output: 14.0917592082 
Correct output: -99.2368061293 | Program output: -138.155106792
Correct output: 88.6808415603  | Program output: 39.6808415603 
Correct output: -151.1060419578 | Program output: -143.0243426204
Correct output: 56.004616184   | Program output: 30.0863155213 
Correct output: 33.520660154   | Program output: 8.520660154   
Correct output: 42.238861085   | Program output: 17.3205604224 
Correct output: -49.0227893765 | Program output: -1.0          
Correct output: 103.4057483059 | Program output: 121.4057483059
Correct output: -106.1378273779 | Program output: -114.0561280406
Correct output: 37.9625599991  | Program output: 37.9625599991 
Correct output: 71.9208193203  | Program output: 92.9208193203 
Correct output: 173.5348464317 | Program output: 115.5348464317
Correct output: -77.0615185935 | Program output: -74.9798192561
Correct output: -20.7643622555 | Program output: 0.7643622555  
Correct output: 1.9827630815   | Program output: -1.0          
Correct output: -39.1198682611 | Program output: -6.0381689237 
Correct output: 1.1392376036   | Program output: 9.0           
Correct output: 129.1930977679 | Program output: 73.1930977679 
Correct output: 26.7496211861  | Program output: 27.7496211861 
Correct output: -11.2984801384 | Program output: -1.0          
Correct output: -136.1442960385 | Program output: -137.0625967012
Correct output: 143.0911996605 | Program output: 112.0911996605
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_yank} {:instruction float_sub} {:instruction integer_max} {:instruction integer_flush} {:instruction in1} {:instruction in1} {:instruction float_stackdepth} {:instruction in2} {:instruction integer_add} {:instruction float_inc} {:instruction integer_add} {:instruction float_inc} {:instruction float_inc} {:instruction integer_add} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_add} {:instruction float_inc} {:instruction integer_add} {:instruction integer_inc} {:instruction float_inc} {:instruction integer_max} {:instruction float_inc} {:instruction float_dup_times} {:instruction float_rot} {:instruction float_stackdepth} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_add} {:instruction float_inc} {:instruction float_inc} {:instruction integer_max} {:instruction float_inc} {:instruction float_dup_times} {:instruction float_rot} {:instruction float_stackdepth} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_add} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_add} {:instruction float_inc} {:instruction float_inc} {:instruction integer_max} {:instruction float_inc} {:instruction float_dup_times} {:instruction 25} {:instruction float_stackdepth} {:instruction float_inc} {:instruction float_dup_times} {:instruction float_yank} {:instruction float_dup_times} {:instruction integer_add} {:instruction 25} {:instruction integer_flush} {:instruction integer_add} {:instruction float_yank} {:instruction float_dup_times} {:instruction integer_add} {:instruction 25} {:instruction integer_flush} {:instruction integer_add} {:instruction integer_swap} {:instruction print_integer} {:instruction 77.91830066263515} {:instruction float_rot} {:instruction float_dup_times} {:instruction float_rot} {:instruction integer_shove} {:instruction float_inc} {:instruction float_sub} {:instruction float_rot} {:instruction integer_shove} {:instruction float_inc} {:instruction float_sub} {:instruction float_rot} {:instruction float_mod} {:instruction float_inc} {:instruction integer_swap} {:instruction integer_min} {:instruction print_float} {:instruction integer_dec} {:instruction integer_flush} {:instruction float_dup} {:instruction integer_dup_times} {:instruction integer_dup} {:instruction float_mod} {:instruction float_div} {:instruction integer_dup_times} {:instruction integer_dup} {:instruction float_mod} {:instruction integer_stackdepth} {:instruction float_dup})
Best program: (float_yank float_sub integer_max integer_flush in1 in1 float_stackdepth in2 integer_add float_inc integer_add float_inc float_inc integer_add float_inc float_inc float_inc integer_add float_inc integer_add integer_inc float_inc integer_max float_inc float_dup_times float_rot float_stackdepth float_inc float_inc float_inc float_inc integer_add float_inc float_inc integer_max float_inc float_dup_times float_rot float_stackdepth float_inc float_inc float_inc float_inc integer_add float_inc float_inc float_inc float_inc integer_add float_inc float_inc integer_max float_inc float_dup_times 25 float_stackdepth float_inc float_dup_times float_yank float_dup_times integer_add 25 integer_flush integer_add float_yank float_dup_times integer_add 25 integer_flush integer_add integer_swap print_integer 77.91830066263515 float_rot float_dup_times float_rot integer_shove float_inc float_sub float_rot integer_shove float_inc float_sub float_rot float_mod float_inc integer_swap integer_min print_float integer_dec integer_flush float_dup integer_dup_times integer_dup float_mod float_div integer_dup_times integer_dup float_mod integer_stackdepth float_dup)
Errors: [25.0817 10 57.0 2 11.0817 9 38.9183 10 49.0 2 8.0817 11 25.9183 10 25.0 2 24.9183 11 48.0228 11 18.0 2 7.9183 11 0.0 0 21.0 2 58.0 2 2.0817 10 21.5287 2 2.9828 10 33.0817 10 7.8608 10 56.0 3 1.0 1 10.2985 10 0.9183 9 31.0 2]
Total: 746.6936
Mean: 14.933872
Genome size: 101
Size: 102
Percent parens: 0.010
--- Population Statistics ---
Average total errors in population: 3367.8748221999995
Median total errors in population: 805.9183
Error averages by case: (126.91663609999914 10.778 153.08063389999992 4.272 108.73410159999956 8.75 137.63555650000092 9.696 148.71000510000002 4.202 128.55155839999898 10.751 115.51869970000061 9.59 122.58835439999989 4.782 114.86150900000037 10.17 137.0447318000013 8.275 122.41453430000003 4.441 120.3845606000008 10.72 107.39851049999999 3.551 120.80372770000015 4.197 167.73678579999998 4.471 110.46872809999967 10.578 117.71896090000001 8.704 130.34526469999943 10.361 128.6283965999989 10.785 110.81723659999982 5.118 160.70076740000016 4.906 105.66451829999987 3.497 121.25976790000067 7.884 122.28488220000047 9.594 143.1283941 4.405)
Error minima by case: (0.072 3 0.1573 1 0.0817 1 17.3185 1 1.6808 1 0.0807 2 3.1726 1 1.1342 1 9.2389 1 1.0 1 0.0 0 0.0817 2 0.0 0 0.0 0 20.5348 1 0.0501 1 0.0 1 0.0172 7 2.2779 3 0.0 0 0.1931 2 0.0 0 0.3802 1 0.0351 2 12.4319 1)
Average genome size in population (length): 101.488
Average program size in population (points): 102.488
Average percent parens in population: 0.010
Minimum age in population: 89.25848600699825
Maximum age in population: 94.00996584349195
Average age in population: 91.82446165417437
Median age in population: 91.84803389961333
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 11
Genome diversity (% unique Plush genomes):	 0.881
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 11
Syntactic diversity (% unique Push programs):	 0.881
Total error diversity:				 0.623
Error (vector) diversity:			 0.692
Behavioral diversity:				 0.693
--- Run Statistics ---
Number of program evaluations used so far: 64000
Number of point (instruction) evaluations so far: 101673375
--- Timings ---
Current time: 1529616154353 milliseconds
Total Time:         218.7 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        84.7 seconds, 38.7%
Fitness Testing:    105.1 seconds, 48.0%
Report:              28.8 seconds, 13.2%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 63
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 64
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 64
;;******************************
;; -*- Number IO problem report - generation 64
Test total error for best: 37075.74199999996
Test mean error for best: 18.53787
;;------------------------------
Outputs of best individual on training cases:
Correct output: -74.6179542037 | Program output: -46.5362548664
Correct output: 78.7609586813  | Program output: 20.7609586813 
Correct output: 3.0100598709   | Program output: 17.0917592082 
Correct output: -99.2368061293 | Program output: -135.155106792
Correct output: 88.6808415603  | Program output: 38.6808415603 
Correct output: -151.1060419578 | Program output: -140.0243426204
Correct output: 56.004616184   | Program output: 33.0863155213 
Correct output: 33.520660154   | Program output: 7.520660154   
Correct output: 42.238861085   | Program output: 20.3205604224 
Correct output: -49.0227893765 | Program output: -1.0          
Correct output: 103.4057483059 | Program output: 120.4057483059
Correct output: -106.1378273779 | Program output: -111.0561280406
Correct output: 37.9625599991  | Program output: 36.9625599991 
Correct output: 71.9208193203  | Program output: 91.9208193203 
Correct output: 173.5348464317 | Program output: 114.5348464317
Correct output: -77.0615185935 | Program output: -71.9798192561
Correct output: -20.7643622555 | Program output: -1.0          
Correct output: 1.9827630815   | Program output: -1.0          
Correct output: -39.1198682611 | Program output: -3.0381689237 
Correct output: 1.1392376036   | Program output: 1.1392376036  
Correct output: 129.1930977679 | Program output: 72.1930977679 
Correct output: 26.7496211861  | Program output: 26.7496211861 
Correct output: -11.2984801384 | Program output: -1.0          
Correct output: -136.1442960385 | Program output: -134.0625967012
Correct output: 143.0911996605 | Program output: 111.0911996605
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_yank} {:instruction integer_dup} {:instruction integer_max} {:instruction integer_flush} {:instruction in1} {:instruction in1} {:instruction float_stackdepth} {:instruction in2} {:instruction integer_add} {:instruction float_inc} {:instruction integer_add} {:instruction float_inc} {:instruction integer_add} {:instruction float_inc} {:instruction float_inc} {:instruction integer_max} {:instruction float_inc} {:instruction float_dup_times} {:instruction float_rot} {:instruction float_inc} {:instruction float_dup_times} {:instruction tagged_485} {:instruction float_stackdepth} {:instruction float_inc} {:instruction float_inc} {:instruction integer_add} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_add} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_add} {:instruction float_inc} {:instruction float_inc} {:instruction integer_max} {:instruction float_inc} {:instruction float_dup_times} {:instruction float_rot} {:instruction float_stackdepth} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_add} {:instruction float_inc} {:instruction float_inc} {:instruction integer_max} {:instruction float_inc} {:instruction float_inc} {:instruction float_dup_times} {:instruction 25} {:instruction float_stackdepth} {:instruction float_inc} {:instruction float_dup_times} {:instruction float_yank} {:instruction float_dup_times} {:instruction integer_add} {:instruction 25} {:instruction integer_flush} {:instruction integer_add} {:instruction float_yank} {:instruction float_dup_times} {:instruction integer_add} {:instruction 25} {:instruction integer_flush} {:instruction integer_add} {:instruction integer_swap} {:instruction print_integer} {:instruction 77.91830066263515} {:instruction float_rot} {:instruction float_dup_times} {:instruction float_rot} {:instruction integer_shove} {:instruction float_inc} {:instruction float_sub} {:instruction float_rot} {:instruction integer_shove} {:instruction float_inc} {:instruction float_sub} {:instruction float_rot} {:instruction float_mod} {:instruction float_inc} {:instruction integer_swap} {:instruction integer_min} {:instruction print_float} {:instruction integer_dec} {:instruction integer_flush} {:instruction float_dup_times})
Best program: (float_yank integer_dup integer_max integer_flush in1 in1 float_stackdepth in2 integer_add float_inc integer_add float_inc integer_add float_inc float_inc integer_max float_inc float_dup_times float_rot float_inc float_dup_times tagged_485 float_stackdepth float_inc float_inc integer_add float_inc float_inc float_inc float_inc integer_add float_inc float_inc float_inc integer_add float_inc float_inc integer_max float_inc float_dup_times float_rot float_stackdepth float_inc float_inc float_inc float_inc integer_add float_inc float_inc integer_max float_inc float_inc float_dup_times 25 float_stackdepth float_inc float_dup_times float_yank float_dup_times integer_add 25 integer_flush integer_add float_yank float_dup_times integer_add 25 integer_flush integer_add integer_swap print_integer 77.91830066263515 float_rot float_dup_times float_rot integer_shove float_inc float_sub float_rot integer_shove float_inc float_sub float_rot float_mod float_inc integer_swap integer_min print_float integer_dec integer_flush float_dup_times)
Errors: [28.0817 10 58.0 2 14.0817 9 35.9183 10 50.0 1 11.0817 11 22.9183 10 26.0 2 21.9183 11 48.0228 11 17.0 2 4.9183 11 1.0 1 20.0 1 59.0 2 5.0817 10 19.7644 12 2.9828 10 36.0817 9 0.0 0 57.0 2 0.0 0 10.2985 10 2.0817 9 32.0 2]
Total: 741.2318999999999
Mean: 14.824638
Genome size: 91
Size: 92
Percent parens: 0.011
--- Population Statistics ---
Average total errors in population: 3173.0141335000003
Median total errors in population: 791.2465499999998
Error averages by case: (124.74600379999906 10.692 142.92324009999993 4.068 100.9307481999993 8.672 136.51321420000113 9.657 138.4665398 3.926 127.80107679999892 10.688 107.18529430000105 9.517 111.60171169999987 4.544 105.93433640000079 10.102 127.97461310000122 8.37 113.76598840000005 4.241 119.10270330000094 10.704 97.607657 3.321 112.95959400000011 3.976 157.83465469999996 4.165 104.8728478999993 10.501 105.35897200000001 8.8 118.00470539999938 10.316 125.86014429999874 10.721 101.12521909999977 4.855 150.73963690000008 4.71 95.39946599999989 3.231 110.75769490000063 7.986 120.88207030000034 9.464 133.26700090000006 4.172)
Error minima by case: (0.1922 3 0.1573 1 0.0101 1 16.3185 1 1.3192 1 0.0817 2 2.9137 1 3.4793 1 9.9617 1 0.2935 1 0.0 0 0.0817 2 0.0 0 0.0 0 29.5348 1 0.0817 1 0.0 0 0.0172 7 4.0817 2 0.0 0 0.8069 2 0.0 0 0.6198 1 0.0351 2 18.0 1)
Average genome size in population (length): 102.482
Average program size in population (points): 103.482
Average percent parens in population: 0.010
Minimum age in population: 90.89457003767534
Maximum age in population: 94.96668095811125
Average age in population: 93.1330709848475
Median age in population: 93.19174750144224
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 10
Genome diversity (% unique Plush genomes):	 0.879
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 10
Syntactic diversity (% unique Push programs):	 0.879
Total error diversity:				 0.63
Error (vector) diversity:			 0.711
Behavioral diversity:				 0.712
--- Run Statistics ---
Number of program evaluations used so far: 65000
Number of point (instruction) evaluations so far: 104235450
--- Timings ---
Current time: 1529616158724 milliseconds
Total Time:         223.1 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        86.1 seconds, 38.6%
Fitness Testing:    107.5 seconds, 48.2%
Report:              29.4 seconds, 13.2%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 64
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 65
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 65
;;******************************
;; -*- Number IO problem report - generation 65
Test total error for best: 36784.17679999997
Test mean error for best: 18.39209
;;------------------------------
Outputs of best individual on training cases:
Correct output: -74.6179542037 | Program output: -45.5362548664
Correct output: 78.7609586813  | Program output: 22.7609586813 
Correct output: 3.0100598709   | Program output: 18.0917592082 
Correct output: -99.2368061293 | Program output: -134.155106792
Correct output: 88.6808415603  | Program output: 40.6808415603 
Correct output: -151.1060419578 | Program output: -139.0243426204
Correct output: 56.004616184   | Program output: 34.0863155213 
Correct output: 33.520660154   | Program output: 9.520660154   
Correct output: 42.238861085   | Program output: 21.3205604224 
Correct output: -49.0227893765 | Program output: 0.0           
Correct output: 103.4057483059 | Program output: 111.4057483059
Correct output: -106.1378273779 | Program output: -110.0561280406
Correct output: 37.9625599991  | Program output: 38.9625599991 
Correct output: 71.9208193203  | Program output: 69.9208193203 
Correct output: 173.5348464317 | Program output: 116.5348464317
Correct output: -77.0615185935 | Program output: -70.9798192561
Correct output: -20.7643622555 | Program output: 0.0           
Correct output: 1.9827630815   | Program output: 0.0           
Correct output: -39.1198682611 | Program output: -2.0381689237 
Correct output: 1.1392376036   | Program output: 7.1392376036  
Correct output: 129.1930977679 | Program output: 74.1930977679 
Correct output: 26.7496211861  | Program output: 28.7496211861 
Correct output: -11.2984801384 | Program output: 0.0           
Correct output: -136.1442960385 | Program output: -133.0625967012
Correct output: 143.0911996605 | Program output: 113.0911996605
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_frominteger} {:instruction float_sub} {:instruction float_mod} {:instruction float_pop} {:instruction integer_max} {:instruction integer_flush} {:instruction in1} {:instruction in1} {:instruction float_stackdepth} {:instruction in2} {:instruction integer_add} {:instruction float_inc} {:instruction integer_add} {:instruction float_inc} {:instruction float_inc} {:instruction integer_max} {:instruction float_inc} {:instruction float_dup_times} {:instruction float_rot} {:instruction float_inc} {:instruction float_dup_times} {:instruction tagged_485} {:instruction float_stackdepth} {:instruction float_inc} {:instruction float_inc} {:instruction integer_add} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_add} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_add} {:instruction float_inc} {:instruction float_inc} {:instruction integer_max} {:instruction float_inc} {:instruction float_dup_times} {:instruction float_rot} {:instruction float_stackdepth} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_add} {:instruction integer_add} {:instruction float_inc} {:instruction float_inc} {:instruction integer_max} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_max} {:instruction float_inc} {:instruction integer_min} {:instruction 25} {:instruction float_stackdepth} {:instruction float_inc} {:instruction float_dup_times} {:instruction float_yank} {:instruction float_dup_times} {:instruction integer_add} {:instruction 25} {:instruction integer_flush} {:instruction integer_add} {:instruction float_yank} {:instruction float_dup_times} {:instruction integer_add} {:instruction 25} {:instruction integer_flush} {:instruction integer_add} {:instruction integer_swap} {:instruction print_integer} {:instruction 77.91830066263515} {:instruction float_rot} {:instruction float_dup_times} {:instruction float_rot} {:instruction integer_shove} {:instruction float_inc} {:instruction float_dec} {:instruction float_inc} {:instruction float_sub} {:instruction float_rot} {:instruction integer_shove} {:instruction integer_flush} {:instruction float_sub} {:instruction float_rot} {:instruction float_mod} {:instruction float_inc} {:instruction integer_swap} {:instruction integer_min} {:instruction print_float} {:instruction integer_dec} {:instruction integer_flush} {:instruction float_yank} {:instruction float_div} {:instruction float_mult} {:instruction integer_shove} {:instruction float_dup_times} {:instruction float_div} {:instruction float_mult})
Best program: (float_frominteger float_sub float_mod float_pop integer_max integer_flush in1 in1 float_stackdepth in2 integer_add float_inc integer_add float_inc float_inc integer_max float_inc float_dup_times float_rot float_inc float_dup_times tagged_485 float_stackdepth float_inc float_inc integer_add float_inc float_inc float_inc float_inc integer_add float_inc float_inc float_inc integer_add float_inc float_inc integer_max float_inc float_dup_times float_rot float_stackdepth float_inc float_inc float_inc float_inc integer_add integer_add float_inc float_inc integer_max float_inc float_inc float_inc integer_max float_inc integer_min 25 float_stackdepth float_inc float_dup_times float_yank float_dup_times integer_add 25 integer_flush integer_add float_yank float_dup_times integer_add 25 integer_flush integer_add integer_swap print_integer 77.91830066263515 float_rot float_dup_times float_rot integer_shove float_inc float_dec float_inc float_sub float_rot integer_shove integer_flush float_sub float_rot float_mod float_inc integer_swap integer_min print_float integer_dec integer_flush float_yank float_div float_mult integer_shove float_dup_times float_div float_mult)
Errors: [29.0817 10 56.0 2 15.0817 9 34.9183 10 48.0 2 12.0817 11 21.9183 10 24.0 2 20.9183 11 49.0228 12 8.0 2 3.9183 11 1.0 1 2.0 2 57.0 2 6.0817 10 20.7644 12 1.9828 10 37.0817 10 6.0 1 55.0 3 2.0 1 11.2985 12 3.0817 9 30.0 1]
Total: 722.2318999999999
Mean: 14.444638
Genome size: 103
Size: 104
Percent parens: 0.010
--- Population Statistics ---
Average total errors in population: 3231.2312268000005
Median total errors in population: 786.1501999999999
Error averages by case: (127.64252269999889 10.712 144.5702298 4.195 103.78490069999906 8.688 138.37377900000115 9.766 141.42273290000003 4.07 130.5397255999988 10.83 109.14697960000125 9.535 113.1101111999999 4.694 107.67993900000094 10.141 132.24746610000167 9.38 115.9167502000001 4.405 121.18280620000115 10.863 99.58239809999995 3.453 113.4472273000001 4.098 160.72887709999992 4.389 110.36582439999925 10.662 109.49779169999992 9.745 114.3940873999993 10.283 128.88672859999852 10.704 100.25893959999975 4.986 153.86330940000008 4.865 97.11953019999996 3.423 110.74079390000078 8.902 124.103375 9.637 135.87840110000002 4.32)
Error minima by case: (0.8576 2 0.1573 1 0.0101 1 10.3185 1 4.6725 1 0.0817 2 1.9137 1 0.4562 1 9.9183 1 0.1045 1 0.0 0 0.0817 2 0.0 0 0.0 0 27.5348 1 0.0817 1 1.0 1 0.0172 8 3.7221 2 0.0 0 4.8069 2 0.0 0 0.3802 1 0.0817 2 21.0 1)
Average genome size in population (length): 102.019
Average program size in population (points): 103.019
Average percent parens in population: 0.010
Minimum age in population: 92.0697514060648
Maximum age in population: 96.44874399597975
Average age in population: 94.4273702597992
Median age in population: 94.49737291758593
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 18
Genome diversity (% unique Plush genomes):	 0.866
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 18
Syntactic diversity (% unique Push programs):	 0.866
Total error diversity:				 0.635
Error (vector) diversity:			 0.7
Behavioral diversity:				 0.7
--- Run Statistics ---
Number of program evaluations used so far: 66000
Number of point (instruction) evaluations so far: 106786050
--- Timings ---
Current time: 1529616163069 milliseconds
Total Time:         227.4 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:        87.4 seconds, 38.4%
Fitness Testing:    109.9 seconds, 48.3%
Report:              30.0 seconds, 13.2%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 65
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 66
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 66
;;******************************
;; -*- Number IO problem report - generation 66
Test total error for best: 36388.03189999999
Test mean error for best: 18.19402
;;------------------------------
Outputs of best individual on training cases:
Correct output: -74.6179542037 | Program output: -48.5362548664
Correct output: 78.7609586813  | Program output: 25.7609586813 
Correct output: 3.0100598709   | Program output: 15.0917592082 
Correct output: -99.2368061293 | Program output: -137.155106792
Correct output: 88.6808415603  | Program output: 43.6808415603 
Correct output: -151.1060419578 | Program output: -142.0243426204
Correct output: 56.004616184   | Program output: 31.0863155213 
Correct output: 33.520660154   | Program output: 12.520660154  
Correct output: 42.238861085   | Program output: 18.3205604224 
Correct output: -49.0227893765 | Program output: -1.0          
Correct output: 103.4057483059 | Program output: 124.4057483059
Correct output: -106.1378273779 | Program output: -113.0561280406
Correct output: 37.9625599991  | Program output: 41.9625599991 
Correct output: 71.9208193203  | Program output: 77.9208193203 
Correct output: 173.5348464317 | Program output: 119.5348464317
Correct output: -77.0615185935 | Program output: -73.9798192561
Correct output: -20.7643622555 | Program output: 1.4712754891  
Correct output: 1.9827630815   | Program output: -1.0          
Correct output: -39.1198682611 | Program output: -5.0381689237 
Correct output: 1.1392376036   | Program output: 2.1392376036  
Correct output: 129.1930977679 | Program output: 77.1930977679 
Correct output: 26.7496211861  | Program output: 31.7496211861 
Correct output: -11.2984801384 | Program output: -1.0          
Correct output: -136.1442960385 | Program output: -136.0625967012
Correct output: 143.0911996605 | Program output: 116.0911996605
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_frominteger} {:instruction float_sub} {:instruction float_mod} {:instruction float_pop} {:instruction float_min} {:instruction print_integer} {:instruction integer_max} {:instruction float_mult} {:instruction float_pop} {:instruction float_inc} {:instruction integer_add} {:instruction float_inc} {:instruction in1} {:instruction in1} {:instruction float_stackdepth} {:instruction in2} {:instruction integer_add} {:instruction float_inc} {:instruction integer_add} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_add} {:instruction float_inc} {:instruction integer_add} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_add} {:instruction float_inc} {:instruction float_inc} {:instruction integer_add} {:instruction float_inc} {:instruction float_dup_times} {:instruction float_rot} {:instruction float_stackdepth} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_add} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_add} {:instruction float_inc} {:instruction float_inc} {:instruction integer_max} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_max} {:instruction float_inc} {:instruction float_dup_times} {:instruction 25} {:instruction float_stackdepth} {:instruction float_inc} {:instruction float_dup_times} {:instruction float_yank} {:instruction float_dup_times} {:instruction float_stackdepth} {:instruction float_inc} {:instruction float_dup_times} {:instruction float_yank} {:instruction float_dup_times} {:instruction integer_add} {:instruction 25} {:instruction integer_flush} {:instruction integer_add} {:instruction float_yank} {:instruction float_dup_times} {:instruction integer_add} {:instruction 25} {:instruction integer_flush} {:instruction integer_add} {:instruction integer_swap} {:instruction print_integer} {:instruction 77.91830066263515} {:instruction float_rot} {:instruction float_dup_times} {:instruction float_rot} {:instruction integer_shove} {:instruction float_inc} {:instruction float_sub} {:instruction float_rot} {:instruction integer_shove} {:instruction float_inc} {:instruction float_sub} {:instruction float_rot} {:instruction float_mod} {:instruction float_inc} {:instruction integer_swap} {:instruction integer_min} {:instruction print_float} {:instruction integer_dec} {:instruction integer_flush} {:instruction float_dup_times} {:instruction float_div} {:instruction float_mult} {:instruction integer_shove} {:instruction float_dup_times} {:instruction float_div} {:instruction float_mult} {:instruction integer_shove} {:instruction float_dup} {:instruction integer_dup_times} {:instruction integer_dup_times} {:instruction integer_dup} {:instruction float_flush} {:instruction integer_stackdepth} {:instruction float_dup} {:instruction integer_dup_times} {:instruction integer_swap} {:instruction integer_dup})
Best program: (float_frominteger float_sub float_mod float_pop float_min print_integer integer_max float_mult float_pop float_inc integer_add float_inc in1 in1 float_stackdepth in2 integer_add float_inc integer_add float_inc float_inc float_inc integer_add float_inc integer_add float_inc float_inc float_inc float_inc integer_add float_inc float_inc integer_add float_inc float_dup_times float_rot float_stackdepth float_inc float_inc float_inc float_inc integer_add float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc integer_add float_inc float_inc integer_max float_inc float_inc float_inc integer_max float_inc float_dup_times 25 float_stackdepth float_inc float_dup_times float_yank float_dup_times float_stackdepth float_inc float_dup_times float_yank float_dup_times integer_add 25 integer_flush integer_add float_yank float_dup_times integer_add 25 integer_flush integer_add integer_swap print_integer 77.91830066263515 float_rot float_dup_times float_rot integer_shove float_inc float_sub float_rot integer_shove float_inc float_sub float_rot float_mod float_inc integer_swap integer_min print_float integer_dec integer_flush float_dup_times float_div float_mult integer_shove float_dup_times float_div float_mult integer_shove float_dup integer_dup_times integer_dup_times integer_dup float_flush integer_stackdepth float_dup integer_dup_times integer_swap integer_dup)
Errors: [26.0817 10 53.0 2 12.0817 9 37.9183 10 45.0 2 9.0817 11 24.9183 10 21.0 2 23.9183 11 48.0228 11 21.0 2 6.9183 11 4.0 2 6.0 1 54.0 2 3.0817 10 22.2356 12 2.9828 10 34.0817 10 1.0 1 52.0 3 5.0 2 10.2985 10 0.0817 8 27.0 2]
Total: 714.7031
Mean: 14.294062
Genome size: 120
Size: 121
Percent parens: 0.008
--- Population Statistics ---
Average total errors in population: 3302.2090035000015
Median total errors in population: 788.8971499999999
Error averages by case: (130.23458039999906 10.682 142.74886439999992 4.524 109.2639694999994 8.804 142.23085950000063 9.839 142.93569659999997 4.301 135.2230529999991 10.877 115.14214550000077 9.654 107.70079929999986 4.894 114.1846995000005 10.31 137.79408300000162 9.763 120.84127740000014 4.598 124.60162680000066 10.907 101.68057999999999 3.689 118.3768037000002 4.274 164.43282379999985 4.587 113.55406539999956 10.58 110.94083739999995 9.88 115.74291149999922 10.213 131.0081371999989 10.664 97.51310659999987 5.106 157.08897489999993 5.099 96.64441299999994 3.67 114.03737960000029 9.245 127.88610489999999 9.692 140.0892106000001 4.46)
Error minima by case: (0.1205 2 0.1573 1 0.0817 1 9.1852 1 4.0421 1 0.0817 2 1.776 1 3.5884 1 7.9183 1 1.1045 1 0.0 0 0.0817 1 0.0 0 0.0 0 0.5348 1 0.0816 1 0.0 0 0.0 0 1.7221 2 0.0 0 6.1931 2 0.0 0 0.3802 1 0.0817 1 14.0912 1)
Average genome size in population (length): 101.419
Average program size in population (points): 102.419
Average percent parens in population: 0.010
Minimum age in population: 93.0697514060648
Maximum age in population: 97.89110376331055
Average age in population: 95.68924401113696
Median age in population: 95.71120606055096
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 21
Genome diversity (% unique Plush genomes):	 0.867
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 21
Syntactic diversity (% unique Push programs):	 0.867
Total error diversity:				 0.638
Error (vector) diversity:			 0.708
Behavioral diversity:				 0.708
--- Run Statistics ---
Number of program evaluations used so far: 67000
Number of point (instruction) evaluations so far: 109321575
--- Timings ---
Current time: 1529616167445 milliseconds
Total Time:         231.7 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:        88.8 seconds, 38.3%
Fitness Testing:    112.3 seconds, 48.5%
Report:              30.5 seconds, 13.2%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 66
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 67
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 67
;;******************************
;; -*- Number IO problem report - generation 67
Test total error for best: 36045.89359999999
Test mean error for best: 18.02295
;;------------------------------
Outputs of best individual on training cases:
Correct output: -74.6179542037 | Program output: -46.5362548664
Correct output: 78.7609586813  | Program output: 24.7609586813 
Correct output: 3.0100598709   | Program output: 17.0917592082 
Correct output: -99.2368061293 | Program output: -135.155106792
Correct output: 88.6808415603  | Program output: 42.6808415603 
Correct output: -151.1060419578 | Program output: -140.0243426204
Correct output: 56.004616184   | Program output: 33.0863155213 
Correct output: 33.520660154   | Program output: 11.520660154  
Correct output: 42.238861085   | Program output: 20.3205604224 
Correct output: -49.0227893765 | Program output: 0.0           
Correct output: 103.4057483059 | Program output: 104.4057483059
Correct output: -106.1378273779 | Program output: -111.0561280406
Correct output: 37.9625599991  | Program output: 40.9625599991 
Correct output: 71.9208193203  | Program output: 75.9208193203 
Correct output: 173.5348464317 | Program output: 118.5348464317
Correct output: -77.0615185935 | Program output: -71.9798192561
Correct output: -20.7643622555 | Program output: -0.2356377445 
Correct output: 1.9827630815   | Program output: 0.0           
Correct output: -39.1198682611 | Program output: -3.0381689237 
Correct output: 1.1392376036   | Program output: 11.1392376036 
Correct output: 129.1930977679 | Program output: 76.1930977679 
Correct output: 26.7496211861  | Program output: 30.7496211861 
Correct output: -11.2984801384 | Program output: 0.0           
Correct output: -136.1442960385 | Program output: -134.0625967012
Correct output: 143.0911996605 | Program output: 115.0911996605
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_yank} {:instruction float_sub} {:instruction integer_max} {:instruction integer_flush} {:instruction in1} {:instruction in1} {:instruction float_stackdepth} {:instruction in2} {:instruction integer_add} {:instruction float_inc} {:instruction integer_add} {:instruction float_inc} {:instruction float_inc} {:instruction integer_add} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_add} {:instruction float_inc} {:instruction integer_add} {:instruction integer_inc} {:instruction float_inc} {:instruction integer_max} {:instruction float_inc} {:instruction float_dup_times} {:instruction float_rot} {:instruction float_stackdepth} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_add} {:instruction float_inc} {:instruction integer_add} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_add} {:instruction float_inc} {:instruction float_inc} {:instruction integer_max} {:instruction float_inc} {:instruction float_dup_times} {:instruction float_rot} {:instruction float_stackdepth} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_add} {:instruction float_inc} {:instruction float_inc} {:instruction integer_max} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction 25} {:instruction float_stackdepth} {:instruction float_inc} {:instruction float_dup_times} {:instruction float_yank} {:instruction float_dup_times} {:instruction 25} {:instruction float_stackdepth} {:instruction float_inc} {:instruction integer_mod} {:instruction float_yank} {:instruction float_dup_times} {:instruction integer_add} {:instruction 25} {:instruction integer_flush} {:instruction integer_add} {:instruction float_yank} {:instruction float_dup_times} {:instruction integer_add} {:instruction 25} {:instruction integer_flush} {:instruction integer_add} {:instruction integer_swap} {:instruction print_integer} {:instruction 77.91830066263515} {:instruction float_rot} {:instruction float_dup_times} {:instruction float_rot} {:instruction integer_shove} {:instruction float_inc} {:instruction float_sub} {:instruction float_rot} {:instruction integer_shove} {:instruction float_inc} {:instruction float_sub} {:instruction float_rot} {:instruction float_mod} {:instruction float_inc} {:instruction integer_swap} {:instruction integer_min} {:instruction print_float} {:instruction integer_dec} {:instruction float_rot} {:instruction integer_stackdepth} {:instruction float_dup} {:instruction float_yankdup} {:instruction integer_dup} {:instruction float_mod} {:instruction integer_stackdepth} {:instruction integer_dup_times})
Best program: (float_yank float_sub integer_max integer_flush in1 in1 float_stackdepth in2 integer_add float_inc integer_add float_inc float_inc integer_add float_inc float_inc float_inc integer_add float_inc integer_add integer_inc float_inc integer_max float_inc float_dup_times float_rot float_stackdepth float_inc float_inc float_inc float_inc integer_add float_inc integer_add float_inc float_inc float_inc integer_add float_inc float_inc integer_max float_inc float_dup_times float_rot float_stackdepth float_inc float_inc float_inc float_inc integer_add float_inc float_inc integer_max float_inc float_inc float_inc 25 float_stackdepth float_inc float_dup_times float_yank float_dup_times 25 float_stackdepth float_inc integer_mod float_yank float_dup_times integer_add 25 integer_flush integer_add float_yank float_dup_times integer_add 25 integer_flush integer_add integer_swap print_integer 77.91830066263515 float_rot float_dup_times float_rot integer_shove float_inc float_sub float_rot integer_shove float_inc float_sub float_rot float_mod float_inc integer_swap integer_min print_float integer_dec float_rot integer_stackdepth float_dup float_yankdup integer_dup float_mod integer_stackdepth integer_dup_times)
Errors: [28.0817 10 54.0 2 14.0817 9 35.9183 10 46.0 2 11.0817 11 22.9183 10 22.0 2 21.9183 11 49.0228 12 1.0 1 4.9183 11 3.0 2 4.0 1 55.0 2 5.0817 10 20.5287 10 1.9828 10 36.0817 9 10.0 1 53.0 3 4.0 2 11.2985 12 2.0817 9 28.0 2]
Total: 708.9961999999999
Mean: 14.179924
Genome size: 106
Size: 107
Percent parens: 0.009
--- Population Statistics ---
Average total errors in population: 3068.324128800001
Median total errors in population: 776.2318999999999
Error averages by case: (118.25681709999905 10.616 138.23667749999993 4.403 97.90248129999951 8.722 129.61193870000153 9.861 135.94457750000007 4.233 120.73546589999893 10.972 104.01701080000105 9.579 105.7961064999998 4.8 102.28906790000073 10.251 130.0961801000018 9.845 111.94068940000014 4.517 111.14836460000105 10.984 94.07781939999997 3.553 107.92756390000021 4.184 156.24102159999984 4.538 101.34012759999939 10.626 104.08154399999982 9.53 105.87657769999917 10.216 120.03885629999878 10.602 93.2358728999999 4.823 148.60730900000007 5.073 91.59616139999996 3.607 105.14939780000088 9.324 113.9134082000002 9.732 131.26809170000007 4.404)
Error minima by case: (0.4309 8 0.8427 1 0.0101 1 14.2368 1 0.3192 1 0.0817 1 1.1726 1 4.6817 1 2.9183 1 0.0 0 0.0 0 0.0817 2 0.0 0 0.0 0 36.5348 1 0.0817 1 0.0 0 0.0172 6 7.7221 7 0.0 0 3.8069 2 0.0 0 0.0 0 0.0817 2 21.0 1)
Average genome size in population (length): 100.531
Average program size in population (points): 101.531
Average percent parens in population: 0.010
Minimum age in population: 94.7999220529463
Maximum age in population: 99.09409821795082
Average age in population: 97.06760941055092
Median age in population: 97.09844252983277
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 15
Genome diversity (% unique Plush genomes):	 0.864
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 15
Syntactic diversity (% unique Push programs):	 0.864
Total error diversity:				 0.651
Error (vector) diversity:			 0.696
Behavioral diversity:				 0.696
--- Run Statistics ---
Number of program evaluations used so far: 68000
Number of point (instruction) evaluations so far: 111834950
--- Timings ---
Current time: 1529616171709 milliseconds
Total Time:         236.0 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:        90.1 seconds, 38.2%
Fitness Testing:    114.6 seconds, 48.6%
Report:              31.2 seconds, 13.2%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 67
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 68
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 68
;;******************************
;; -*- Number IO problem report - generation 68
Test total error for best: 36590.66459999999
Test mean error for best: 18.29533
;;------------------------------
Outputs of best individual on training cases:
Correct output: -74.6179542037 | Program output: -50.5362548664
Correct output: 78.7609586813  | Program output: 25.7609586813 
Correct output: 3.0100598709   | Program output: 13.0917592082 
Correct output: -99.2368061293 | Program output: -139.155106792
Correct output: 88.6808415603  | Program output: 43.6808415603 
Correct output: -151.1060419578 | Program output: -144.0243426204
Correct output: 56.004616184   | Program output: 29.0863155213 
Correct output: 33.520660154   | Program output: 12.520660154  
Correct output: 42.238861085   | Program output: 16.3205604224 
Correct output: -49.0227893765 | Program output: 0.0           
Correct output: 103.4057483059 | Program output: 114.4057483059
Correct output: -106.1378273779 | Program output: -115.0561280406
Correct output: 37.9625599991  | Program output: 41.9625599991 
Correct output: 71.9208193203  | Program output: 77.9208193203 
Correct output: 173.5348464317 | Program output: 119.5348464317
Correct output: -77.0615185935 | Program output: -75.9798192561
Correct output: -20.7643622555 | Program output: 0.0           
Correct output: 1.9827630815   | Program output: 0.0           
Correct output: -39.1198682611 | Program output: -7.0381689237 
Correct output: 1.1392376036   | Program output: 4.1392376036  
Correct output: 129.1930977679 | Program output: 77.1930977679 
Correct output: 26.7496211861  | Program output: 31.7496211861 
Correct output: -11.2984801384 | Program output: 0.0           
Correct output: -136.1442960385 | Program output: -138.0625967012
Correct output: 143.0911996605 | Program output: 116.0911996605
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_frominteger} {:instruction float_sub} {:instruction float_mod} {:instruction float_frominteger} {:instruction float_flush} {:instruction float_min} {:instruction print_integer} {:instruction integer_max} {:instruction float_mult} {:instruction float_pop} {:instruction integer_swap} {:instruction integer_add} {:instruction float_inc} {:instruction in1} {:instruction in1} {:instruction float_stackdepth} {:instruction in2} {:instruction integer_add} {:instruction float_inc} {:instruction integer_add} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_add} {:instruction float_inc} {:instruction integer_add} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_add} {:instruction float_inc} {:instruction float_inc} {:instruction integer_add} {:instruction float_inc} {:instruction float_dup_times} {:instruction float_rot} {:instruction float_stackdepth} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_dup_times} {:instruction float_rot} {:instruction float_stackdepth} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_min} {:instruction integer_add} {:instruction float_inc} {:instruction float_inc} {:instruction integer_max} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_max} {:instruction float_inc} {:instruction integer_min} {:instruction 25} {:instruction float_stackdepth} {:instruction float_inc} {:instruction float_dup_times} {:instruction float_yank} {:instruction float_dup_times} {:instruction integer_add} {:instruction 25} {:instruction integer_flush} {:instruction integer_add} {:instruction float_yank} {:instruction float_dup_times} {:instruction integer_swap} {:instruction 25} {:instruction integer_flush} {:instruction integer_add} {:instruction integer_swap} {:instruction print_integer} {:instruction 77.91830066263515} {:instruction float_rot} {:instruction float_dup_times} {:instruction float_rot} {:instruction integer_shove} {:instruction float_inc} {:instruction float_dec} {:instruction float_inc} {:instruction float_sub} {:instruction float_rot} {:instruction integer_shove} {:instruction integer_flush} {:instruction float_sub} {:instruction float_rot} {:instruction float_mod} {:instruction float_inc} {:instruction integer_swap} {:instruction integer_min} {:instruction print_float} {:instruction integer_dec} {:instruction integer_flush} {:instruction float_yank} {:instruction float_div} {:instruction float_mult} {:instruction integer_shove} {:instruction float_dup_times} {:instruction float_div} {:instruction float_mult})
Best program: (float_frominteger float_sub float_mod float_frominteger float_flush float_min print_integer integer_max float_mult float_pop integer_swap integer_add float_inc in1 in1 float_stackdepth in2 integer_add float_inc integer_add float_inc float_inc float_inc integer_add float_inc integer_add float_inc float_inc float_inc float_inc integer_add float_inc float_inc integer_add float_inc float_dup_times float_rot float_stackdepth float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_dup_times float_rot float_stackdepth float_inc float_inc float_inc float_inc integer_min integer_add float_inc float_inc integer_max float_inc float_inc float_inc integer_max float_inc integer_min 25 float_stackdepth float_inc float_dup_times float_yank float_dup_times integer_add 25 integer_flush integer_add float_yank float_dup_times integer_swap 25 integer_flush integer_add integer_swap print_integer 77.91830066263515 float_rot float_dup_times float_rot integer_shove float_inc float_dec float_inc float_sub float_rot integer_shove integer_flush float_sub float_rot float_mod float_inc integer_swap integer_min print_float integer_dec integer_flush float_yank float_div float_mult integer_shove float_dup_times float_div float_mult)
Errors: [24.0817 10 53.0 2 10.0817 8 39.9183 9 45.0 2 7.0817 11 26.9183 10 21.0 2 25.9183 11 49.0228 12 11.0 2 8.9183 11 4.0 2 6.0 1 54.0 2 1.0817 10 20.7644 12 1.9828 10 32.0817 10 3.0 1 52.0 3 5.0 2 11.2985 12 1.9183 9 27.0 2]
Total: 708.0685
Mean: 14.16137
Genome size: 110
Size: 111
Percent parens: 0.009
--- Population Statistics ---
Average total errors in population: 2958.2578051000014
Median total errors in population: 775.6863
Error averages by case: (116.53292159999926 10.63 133.650305 4.467 93.8431891999995 8.707 127.10408360000137 9.969 129.46797160000003 4.247 119.62553709999906 11.018 97.49446900000085 9.569 102.82709669999987 4.833 97.19794940000047 10.232 125.11198040000163 10.439 105.36755790000001 4.568 108.44060670000079 11.13 88.74800200000006 3.611 100.47864619999997 4.149 148.18479399999998 4.571 100.12308839999953 10.668 101.5944755 10.109 96.57354349999935 10.251 117.7374823999987 10.63 94.20376559999985 4.987 140.7146430000001 5.047 87.09742609999994 3.665 97.79352510000027 9.979 112.2569835 9.842 124.39076160000012 4.379)
Error minima by case: (0.2975 2 0.1573 1 0.0101 1 21.3185 1 6.7625 1 0.0817 2 0.1726 1 3.043 1 7.9183 1 0.1045 1 0.0 0 0.0817 1 0.0 0 0.0 0 33.5348 1 0.0817 1 1.0 1 0.0172 1 2.8934 3 0.0 0 3.1931 2 0.0 0 0.3802 1 0.0817 2 19.0 1)
Average genome size in population (length): 100.908
Average program size in population (points): 101.908
Average percent parens in population: 0.010
Minimum age in population: 96.28299551539331
Maximum age in population: 100.5426453638391
Average age in population: 98.44378669481424
Median age in population: 98.49377135025253
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 14
Genome diversity (% unique Plush genomes):	 0.872
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 14
Syntactic diversity (% unique Push programs):	 0.872
Total error diversity:				 0.629
Error (vector) diversity:			 0.673
Behavioral diversity:				 0.675
--- Run Statistics ---
Number of program evaluations used so far: 69000
Number of point (instruction) evaluations so far: 114357675
--- Timings ---
Current time: 1529616176063 milliseconds
Total Time:         240.4 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:        91.5 seconds, 38.1%
Fitness Testing:    116.9 seconds, 48.7%
Report:              31.8 seconds, 13.2%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 68
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 69
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 69
;;******************************
;; -*- Number IO problem report - generation 69
Test total error for best: 35125.924299999984
Test mean error for best: 17.56296
;;------------------------------
Outputs of best individual on training cases:
Correct output: -74.6179542037 | Program output: -40.5362548664
Correct output: 78.7609586813  | Program output: 33.7609586813 
Correct output: 3.0100598709   | Program output: 23.0917592082 
Correct output: -99.2368061293 | Program output: -129.155106792
Correct output: 88.6808415603  | Program output: 51.6808415603 
Correct output: -151.1060419578 | Program output: -134.0243426204
Correct output: 56.004616184   | Program output: 39.0863155213 
Correct output: 33.520660154   | Program output: 20.520660154  
Correct output: 42.238861085   | Program output: 26.3205604224 
Correct output: -49.0227893765 | Program output: -1.0          
Correct output: 103.4057483059 | Program output: 125.4057483059
Correct output: -106.1378273779 | Program output: -105.0561280406
Correct output: 37.9625599991  | Program output: 49.9625599991 
Correct output: 71.9208193203  | Program output: 78.9208193203 
Correct output: 173.5348464317 | Program output: 127.5348464317
Correct output: -77.0615185935 | Program output: -65.9798192561
Correct output: -20.7643622555 | Program output: 1.2356377445  
Correct output: 1.9827630815   | Program output: -1.0          
Correct output: -39.1198682611 | Program output: 2.9618310763  
Correct output: 1.1392376036   | Program output: 3.1392376036  
Correct output: 129.1930977679 | Program output: 85.1930977679 
Correct output: 26.7496211861  | Program output: 39.7496211861 
Correct output: -11.2984801384 | Program output: -1.0          
Correct output: -136.1442960385 | Program output: -128.0625967012
Correct output: 143.0911996605 | Program output: 124.0911996605
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_frominteger} {:instruction float_sub} {:instruction float_mod} {:instruction float_pop} {:instruction float_min} {:instruction print_integer} {:instruction integer_max} {:instruction float_mult} {:instruction float_pop} {:instruction float_inc} {:instruction integer_add} {:instruction float_inc} {:instruction in1} {:instruction in1} {:instruction float_stackdepth} {:instruction in2} {:instruction integer_add} {:instruction float_inc} {:instruction integer_add} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_add} {:instruction float_inc} {:instruction integer_add} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_add} {:instruction float_inc} {:instruction float_inc} {:instruction integer_add} {:instruction float_inc} {:instruction float_dup_times} {:instruction float_rot} {:instruction float_stackdepth} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_add} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_add} {:instruction float_inc} {:instruction float_inc} {:instruction integer_max} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_max} {:instruction float_inc} {:instruction float_dup_times} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction 25} {:instruction float_stackdepth} {:instruction float_inc} {:instruction float_dup_times} {:instruction float_yank} {:instruction float_dup_times} {:instruction float_stackdepth} {:instruction float_inc} {:instruction float_dup_times} {:instruction float_yank} {:instruction float_dup_times} {:instruction float_stackdepth} {:instruction float_inc} {:instruction float_dup_times} {:instruction float_yank} {:instruction float_dup_times} {:instruction integer_add} {:instruction 25} {:instruction integer_flush} {:instruction integer_add} {:instruction float_yank} {:instruction float_dup_times} {:instruction integer_add} {:instruction 25} {:instruction integer_flush} {:instruction integer_add} {:instruction integer_swap} {:instruction print_integer} {:instruction 77.91830066263515} {:instruction float_rot} {:instruction float_dup_times} {:instruction float_rot} {:instruction integer_shove} {:instruction float_inc} {:instruction float_sub} {:instruction float_rot} {:instruction integer_shove} {:instruction float_inc} {:instruction float_sub} {:instruction float_rot} {:instruction float_mod} {:instruction float_inc} {:instruction integer_swap} {:instruction integer_min} {:instruction print_float} {:instruction integer_dec} {:instruction integer_flush} {:instruction float_dup_times} {:instruction float_div} {:instruction float_mult} {:instruction integer_shove} {:instruction float_dup_times} {:instruction float_div} {:instruction float_mult} {:instruction integer_shove} {:instruction float_dup} {:instruction integer_dup_times} {:instruction integer_dup_times} {:instruction integer_dup} {:instruction float_flush} {:instruction integer_stackdepth} {:instruction float_dup} {:instruction integer_dup_times} {:instruction integer_swap} {:instruction integer_dup})
Best program: (float_frominteger float_sub float_mod float_pop float_min print_integer integer_max float_mult float_pop float_inc integer_add float_inc in1 in1 float_stackdepth in2 integer_add float_inc integer_add float_inc float_inc float_inc integer_add float_inc integer_add float_inc float_inc float_inc float_inc integer_add float_inc float_inc integer_add float_inc float_dup_times float_rot float_stackdepth float_inc float_inc float_inc float_inc integer_add float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc integer_add float_inc float_inc integer_max float_inc float_inc float_inc integer_max float_inc float_dup_times float_inc float_inc float_inc float_inc float_inc float_inc float_inc 25 float_stackdepth float_inc float_dup_times float_yank float_dup_times float_stackdepth float_inc float_dup_times float_yank float_dup_times float_stackdepth float_inc float_dup_times float_yank float_dup_times integer_add 25 integer_flush integer_add float_yank float_dup_times integer_add 25 integer_flush integer_add integer_swap print_integer 77.91830066263515 float_rot float_dup_times float_rot integer_shove float_inc float_sub float_rot integer_shove float_inc float_sub float_rot float_mod float_inc integer_swap integer_min print_float integer_dec integer_flush float_dup_times float_div float_mult integer_shove float_dup_times float_div float_mult integer_shove float_dup integer_dup_times integer_dup_times integer_dup float_flush integer_stackdepth float_dup integer_dup_times integer_swap integer_dup)
Errors: [34.0817 10 45.0 2 20.0817 8 29.9183 9 37.0 2 17.0817 11 16.9183 10 13.0 2 15.9183 11 48.0228 11 22.0 2 1.0817 10 12.0 2 7.0 1 46.0 2 11.0817 11 22.0 11 2.9828 10 42.0817 11 2.0 1 44.0 3 13.0 2 10.2985 10 8.0817 10 19.0 2]
Total: 703.6308999999999
Mean: 14.072618
Genome size: 132
Size: 133
Percent parens: 0.008
--- Population Statistics ---
Average total errors in population: 2860.356996100001
Median total errors in population: 755.3014999999998
Error averages by case: (112.10348929999941 10.623 129.4145766 4.465 89.65012529999954 8.815 121.05066650000113 9.897 126.81416939999998 4.18 113.77226239999914 10.942 93.6371191000006 9.63 98.30891759999979 4.544 92.74230340000054 10.258 125.42130320000133 10.745 102.27401750000008 4.492 102.14353160000071 11.002 86.27758970000004 3.617 96.23228960000012 3.924 147.94217199999994 4.56 96.16646729999954 10.718 97.05859769999994 10.721 94.07426729999943 10.226 112.92096049999932 10.639 80.5029171 4.703 139.75762790000007 5.017 84.33807589999998 3.702 96.73821270000043 10.264 106.5315450999998 9.662 122.88079140000004 4.257)
Error minima by case: (0.5923 3 0.1573 1 0.0101 1 19.9183 1 1.3192 1 0.0817 2 2.8274 1 1.5884 1 5.9183 1 0.1045 1 0.0 0 0.0817 2 0.0 0 0.0 0 31.5348 1 0.0817 2 1.7644 1 1.0E-4 1 3.2451 3 0.0 0 6.8069 2 0.0 0 0.2985 1 0.0817 2 17.0 1)
Average genome size in population (length): 102.081
Average program size in population (points): 103.081
Average percent parens in population: 0.010
Minimum age in population: 97.49039366940926
Maximum age in population: 101.8501674682478
Average age in population: 99.78863037047975
Median age in population: 99.83341519241637
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 14
Genome diversity (% unique Plush genomes):	 0.862
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 14
Syntactic diversity (% unique Push programs):	 0.862
Total error diversity:				 0.617
Error (vector) diversity:			 0.667
Behavioral diversity:				 0.667
--- Run Statistics ---
Number of program evaluations used so far: 70000
Number of point (instruction) evaluations so far: 116909725
--- Timings ---
Current time: 1529616180474 milliseconds
Total Time:         244.7 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:        92.9 seconds, 37.9%
Fitness Testing:    119.3 seconds, 48.7%
Report:              32.4 seconds, 13.3%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 69
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 70
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 70
;;******************************
;; -*- Number IO problem report - generation 70
Test total error for best: 33439.197099999976
Test mean error for best: 16.71960
;;------------------------------
Outputs of best individual on training cases:
Correct output: -74.6179542037 | Program output: -35.5362548664
Correct output: 78.7609586813  | Program output: 38.7609586813 
Correct output: 3.0100598709   | Program output: 28.0917592082 
Correct output: -99.2368061293 | Program output: -124.155106792
Correct output: 88.6808415603  | Program output: 56.6808415603 
Correct output: -151.1060419578 | Program output: -129.0243426204
Correct output: 56.004616184   | Program output: 44.0863155213 
Correct output: 33.520660154   | Program output: 25.520660154  
Correct output: 42.238861085   | Program output: 31.3205604224 
Correct output: -49.0227893765 | Program output: -1.0          
Correct output: 103.4057483059 | Program output: 95.4057483059 
Correct output: -106.1378273779 | Program output: -100.0561280406
Correct output: 37.9625599991  | Program output: 54.9625599991 
Correct output: 71.9208193203  | Program output: 66.9208193203 
Correct output: 173.5348464317 | Program output: 132.5348464317
Correct output: -77.0615185935 | Program output: -60.9798192561
Correct output: -20.7643622555 | Program output: -1.0          
Correct output: 1.9827630815   | Program output: -1.0          
Correct output: -39.1198682611 | Program output: 7.9618310763  
Correct output: 1.1392376036   | Program output: 3.1392376036  
Correct output: 129.1930977679 | Program output: 90.1930977679 
Correct output: 26.7496211861  | Program output: 44.7496211861 
Correct output: -11.2984801384 | Program output: -1.0          
Correct output: -136.1442960385 | Program output: -123.0625967012
Correct output: 143.0911996605 | Program output: 129.0911996605
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_frominteger} {:instruction float_sub} {:instruction float_mod} {:instruction float_pop} {:instruction float_min} {:instruction print_integer} {:instruction integer_max} {:instruction float_mult} {:instruction float_pop} {:instruction float_inc} {:instruction integer_add} {:instruction float_inc} {:instruction in1} {:instruction in1} {:instruction float_stackdepth} {:instruction in2} {:instruction integer_add} {:instruction float_inc} {:instruction integer_add} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_add} {:instruction float_inc} {:instruction integer_add} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_add} {:instruction float_inc} {:instruction float_inc} {:instruction integer_add} {:instruction float_inc} {:instruction float_dup_times} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_add} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_add} {:instruction float_inc} {:instruction float_inc} {:instruction integer_max} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_max} {:instruction float_inc} {:instruction float_dup_times} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction 25} {:instruction float_stackdepth} {:instruction float_inc} {:instruction float_dup_times} {:instruction float_yank} {:instruction float_dup_times} {:instruction float_stackdepth} {:instruction float_inc} {:instruction float_dup_times} {:instruction float_yank} {:instruction float_dup_times} {:instruction float_stackdepth} {:instruction float_inc} {:instruction float_dup_times} {:instruction float_yank} {:instruction float_dup_times} {:instruction integer_add} {:instruction 25} {:instruction integer_flush} {:instruction integer_add} {:instruction float_yank} {:instruction float_dup_times} {:instruction integer_add} {:instruction 25} {:instruction integer_flush} {:instruction integer_add} {:instruction integer_swap} {:instruction print_integer} {:instruction 77.91830066263515} {:instruction float_rot} {:instruction float_dup_times} {:instruction float_rot} {:instruction integer_shove} {:instruction float_inc} {:instruction float_sub} {:instruction float_rot} {:instruction integer_shove} {:instruction float_inc} {:instruction float_sub} {:instruction float_rot} {:instruction float_mod} {:instruction float_inc} {:instruction integer_swap} {:instruction integer_min} {:instruction print_float} {:instruction integer_dec} {:instruction integer_flush})
Best program: (float_frominteger float_sub float_mod float_pop float_min print_integer integer_max float_mult float_pop float_inc integer_add float_inc in1 in1 float_stackdepth in2 integer_add float_inc integer_add float_inc float_inc float_inc integer_add float_inc integer_add float_inc float_inc float_inc float_inc integer_add float_inc float_inc integer_add float_inc float_dup_times float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc integer_add float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc integer_add float_inc float_inc integer_max float_inc float_inc float_inc integer_max float_inc float_dup_times float_inc float_inc float_inc float_inc float_inc float_inc float_inc 25 float_stackdepth float_inc float_dup_times float_yank float_dup_times float_stackdepth float_inc float_dup_times float_yank float_dup_times float_stackdepth float_inc float_dup_times float_yank float_dup_times integer_add 25 integer_flush integer_add float_yank float_dup_times integer_add 25 integer_flush integer_add integer_swap print_integer 77.91830066263515 float_rot float_dup_times float_rot integer_shove float_inc float_sub float_rot integer_shove float_inc float_sub float_rot float_mod float_inc integer_swap integer_min print_float integer_dec integer_flush)
Errors: [39.0817 10 40.0 1 25.0817 9 24.9183 10 32.0 2 22.0817 11 11.9183 10 8.0 2 10.9183 11 48.0228 11 8.0 3 6.0817 10 17.0 2 5.0 2 41.0 2 16.0817 11 19.7644 12 2.9828 10 47.0817 11 2.0 1 39.0 3 18.0 2 10.2985 10 13.0817 10 14.0 2]
Total: 689.3952999999999
Mean: 13.787906
Genome size: 117
Size: 118
Percent parens: 0.008
--- Population Statistics ---
Average total errors in population: 2963.670449900002
Median total errors in population: 763.7921999999999
Error averages by case: (112.6675729999995 10.611 135.5255892000001 4.665 89.64330619999984 8.818 124.49622170000121 10.012 131.31141310000004 4.425 119.13174139999929 11.089 91.57283340000036 9.633 105.58523479999991 4.866 91.47439260000017 10.255 129.74186290000193 10.922 105.18896480000005 4.575 106.55822530000059 11.201 91.33950360000006 3.902 99.66367680000008 4.018 153.63107669999994 4.819 97.60703459999964 10.739 103.17952599999995 11.223 97.63167019999916 10.242 114.29640299999913 10.651 90.86599499999998 4.735 146.05649900000003 5.238 90.02670639999995 4.079 101.12517200000069 10.47 111.12276829999989 9.877 128.64005990000013 4.522)
Error minima by case: (0.7889 3 0.1573 1 0.0817 1 19.9183 1 7.3617 1 0.0817 2 1.1303 1 2.1588 1 5.9183 1 0.1045 1 0.0 0 0.0817 2 0.0 0 0.0 0 10.9183 1 0.0817 2 0.7644 1 0.0165 7 5.9624 3 0.0 0 0.8069 2 0.0 0 0.0229 1 0.0474 2 14.0 1)
Average genome size in population (length): 102.992
Average program size in population (points): 103.992
Average percent parens in population: 0.010
Minimum age in population: 98.95880746518868
Maximum age in population: 103.1074982829445
Average age in population: 101.1639184381525
Median age in population: 101.1864040419089
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 9
Genome diversity (% unique Plush genomes):	 0.879
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 9
Syntactic diversity (% unique Push programs):	 0.879
Total error diversity:				 0.606
Error (vector) diversity:			 0.669
Behavioral diversity:				 0.67
--- Run Statistics ---
Number of program evaluations used so far: 71000
Number of point (instruction) evaluations so far: 119484550
--- Timings ---
Current time: 1529616184912 milliseconds
Total Time:         249.2 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:        94.2 seconds, 37.8%
Fitness Testing:    121.7 seconds, 48.8%
Report:              33.2 seconds, 13.3%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 70
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 71
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 71
;;******************************
;; -*- Number IO problem report - generation 71
Test total error for best: 34736.52129999999
Test mean error for best: 17.36826
;;------------------------------
Outputs of best individual on training cases:
Correct output: -74.6179542037 | Program output: -44.5362548664
Correct output: 78.7609586813  | Program output: 29.7609586813 
Correct output: 3.0100598709   | Program output: 19.0917592082 
Correct output: -99.2368061293 | Program output: -133.155106792
Correct output: 88.6808415603  | Program output: 47.6808415603 
Correct output: -151.1060419578 | Program output: -138.0243426204
Correct output: 56.004616184   | Program output: 35.0863155213 
Correct output: 33.520660154   | Program output: 16.520660154  
Correct output: 42.238861085   | Program output: 22.3205604224 
Correct output: -49.0227893765 | Program output: -1.0          
Correct output: 103.4057483059 | Program output: 106.4057483059
Correct output: -106.1378273779 | Program output: -109.0561280406
Correct output: 37.9625599991  | Program output: 45.9625599991 
Correct output: 71.9208193203  | Program output: 65.9208193203 
Correct output: 173.5348464317 | Program output: 123.5348464317
Correct output: -77.0615185935 | Program output: -69.9798192561
Correct output: -20.7643622555 | Program output: -1.0          
Correct output: 1.9827630815   | Program output: -1.0          
Correct output: -39.1198682611 | Program output: -1.0381689237 
Correct output: 1.1392376036   | Program output: 2.1392376036  
Correct output: 129.1930977679 | Program output: 81.1930977679 
Correct output: 26.7496211861  | Program output: 35.7496211861 
Correct output: -11.2984801384 | Program output: -1.0          
Correct output: -136.1442960385 | Program output: -132.0625967012
Correct output: 143.0911996605 | Program output: 120.0911996605
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_frominteger} {:instruction integer_dup_times} {:instruction float_flush} {:instruction float_min} {:instruction print_integer} {:instruction integer_max} {:instruction float_mult} {:instruction float_pop} {:instruction integer_swap} {:instruction integer_add} {:instruction float_inc} {:instruction in1} {:instruction in1} {:instruction float_stackdepth} {:instruction integer_max} {:instruction float_mult} {:instruction float_pop} {:instruction float_inc} {:instruction integer_add} {:instruction float_inc} {:instruction in1} {:instruction in1} {:instruction float_stackdepth} {:instruction in2} {:instruction integer_add} {:instruction float_inc} {:instruction integer_add} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_add} {:instruction float_inc} {:instruction integer_add} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_add} {:instruction float_inc} {:instruction float_inc} {:instruction integer_add} {:instruction float_inc} {:instruction float_dup_times} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_add} {:instruction float_inc} {:instruction float_inc} {:instruction integer_max} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_max} {:instruction float_inc} {:instruction float_dup_times} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_add} {:instruction float_inc} {:instruction float_inc} {:instruction integer_add} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_max} {:instruction float_inc} {:instruction float_dup_times} {:instruction 25} {:instruction float_stackdepth} {:instruction float_inc} {:instruction float_dup_times} {:instruction float_yank} {:instruction float_dup_times} {:instruction float_stackdepth} {:instruction float_inc} {:instruction float_dup_times} {:instruction float_yank} {:instruction float_dup_times} {:instruction integer_add} {:instruction 25} {:instruction integer_flush} {:instruction integer_add} {:instruction float_yank} {:instruction float_dup_times} {:instruction integer_add} {:instruction 25} {:instruction integer_flush} {:instruction integer_add} {:instruction integer_swap} {:instruction print_integer} {:instruction 77.91830066263515} {:instruction float_rot} {:instruction float_dup_times} {:instruction float_rot} {:instruction integer_shove} {:instruction float_inc} {:instruction float_sub} {:instruction float_rot} {:instruction integer_shove} {:instruction float_inc} {:instruction float_sub} {:instruction float_rot} {:instruction float_mod} {:instruction float_inc} {:instruction integer_swap} {:instruction integer_min} {:instruction print_float} {:instruction integer_dec} {:instruction integer_flush} {:instruction float_dup_times} {:instruction float_div} {:instruction float_mult} {:instruction integer_shove} {:instruction float_dup_times})
Best program: (float_frominteger integer_dup_times float_flush float_min print_integer integer_max float_mult float_pop integer_swap integer_add float_inc in1 in1 float_stackdepth integer_max float_mult float_pop float_inc integer_add float_inc in1 in1 float_stackdepth in2 integer_add float_inc integer_add float_inc float_inc float_inc integer_add float_inc integer_add float_inc float_inc float_inc float_inc integer_add float_inc float_inc integer_add float_inc float_dup_times float_inc float_inc float_inc float_inc integer_add float_inc float_inc integer_max float_inc float_inc float_inc integer_max float_inc float_dup_times float_inc float_inc float_inc float_inc float_inc float_inc integer_add float_inc float_inc integer_add float_inc float_inc float_inc integer_max float_inc float_dup_times 25 float_stackdepth float_inc float_dup_times float_yank float_dup_times float_stackdepth float_inc float_dup_times float_yank float_dup_times integer_add 25 integer_flush integer_add float_yank float_dup_times integer_add 25 integer_flush integer_add integer_swap print_integer 77.91830066263515 float_rot float_dup_times float_rot integer_shove float_inc float_sub float_rot integer_shove float_inc float_sub float_rot float_mod float_inc integer_swap integer_min print_float integer_dec integer_flush float_dup_times float_div float_mult integer_shove float_dup_times)
Errors: [30.0817 9 49.0 2 16.0817 9 33.9183 10 41.0 2 13.0817 11 20.9183 10 17.0 2 19.9183 10 48.0228 11 3.0 1 2.9183 10 8.0 2 6.0 2 50.0 1 7.0817 11 19.7644 12 2.9828 10 38.0817 10 1.0 1 48.0 3 9.0 2 10.2985 10 4.0817 9 23.0 2]
Total: 684.2318999999999
Mean: 13.684638
Genome size: 120
Size: 121
Percent parens: 0.008
--- Population Statistics ---
Average total errors in population: 3096.6682963000026
Median total errors in population: 760.35645
Error averages by case: (118.21245459999935 10.686 140.4440812 4.588 92.54483549999988 8.803 129.97703740000136 9.984 137.30255700000004 4.354 125.02751429999915 11.08 95.07314400000064 9.572 110.59456079999984 4.652 94.38014520000029 10.257 138.45671720000192 11.045 112.55851290000007 4.434 112.66300070000061 11.166 99.39118040000001 3.995 104.0196179000001 3.88 157.97988669999995 4.678 103.65172339999955 10.744 108.47217820000002 11.315 105.64100739999914 10.258 119.0144554999989 10.697 90.5615818 4.53 149.66555410000007 5.132 97.9179691 4.107 108.45834020000073 10.519 116.79426830000007 9.817 133.12297250000015 4.45)
Error minima by case: (1.5218 4 0.1573 1 0.0101 1 20.3254 1 0.6808 1 0.0817 2 2.1726 1 0.561 1 4.5054 1 0.1045 1 0.0 0 0.0474 2 0.0 0 0.0 0 19.9183 1 0.0627 2 0.6252 1 0.4068 8 1.7221 7 0.0 0 3.8069 2 0.0 0 0.2985 1 0.0817 2 12.0 1)
Average genome size in population (length): 104.758
Average program size in population (points): 105.758
Average percent parens in population: 0.010
Minimum age in population: 100.5435824553861
Maximum age in population: 104.2964919903538
Average age in population: 102.5586135447437
Median age in population: 102.5952090843943
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 14
Genome diversity (% unique Plush genomes):	 0.876
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 14
Syntactic diversity (% unique Push programs):	 0.876
Total error diversity:				 0.609
Error (vector) diversity:			 0.659
Behavioral diversity:				 0.66
--- Run Statistics ---
Number of program evaluations used so far: 72000
Number of point (instruction) evaluations so far: 122103525
--- Timings ---
Current time: 1529616189302 milliseconds
Total Time:         253.6 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:        95.5 seconds, 37.7%
Fitness Testing:    124.1 seconds, 48.9%
Report:              33.8 seconds, 13.3%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 71
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 72
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 72
;;******************************
;; -*- Number IO problem report - generation 72
Test total error for best: 34736.52129999999
Test mean error for best: 17.36826
;;------------------------------
Outputs of best individual on training cases:
Correct output: -74.6179542037 | Program output: -44.5362548664
Correct output: 78.7609586813  | Program output: 29.7609586813 
Correct output: 3.0100598709   | Program output: 19.0917592082 
Correct output: -99.2368061293 | Program output: -133.155106792
Correct output: 88.6808415603  | Program output: 47.6808415603 
Correct output: -151.1060419578 | Program output: -138.0243426204
Correct output: 56.004616184   | Program output: 35.0863155213 
Correct output: 33.520660154   | Program output: 16.520660154  
Correct output: 42.238861085   | Program output: 22.3205604224 
Correct output: -49.0227893765 | Program output: -1.0          
Correct output: 103.4057483059 | Program output: 106.4057483059
Correct output: -106.1378273779 | Program output: -109.0561280406
Correct output: 37.9625599991  | Program output: 45.9625599991 
Correct output: 71.9208193203  | Program output: 65.9208193203 
Correct output: 173.5348464317 | Program output: 123.5348464317
Correct output: -77.0615185935 | Program output: -69.9798192561
Correct output: -20.7643622555 | Program output: -1.0          
Correct output: 1.9827630815   | Program output: -1.0          
Correct output: -39.1198682611 | Program output: -1.0381689237 
Correct output: 1.1392376036   | Program output: 2.1392376036  
Correct output: 129.1930977679 | Program output: 81.1930977679 
Correct output: 26.7496211861  | Program output: 35.7496211861 
Correct output: -11.2984801384 | Program output: -1.0          
Correct output: -136.1442960385 | Program output: -132.0625967012
Correct output: 143.0911996605 | Program output: 120.0911996605
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_frominteger} {:instruction integer_dup_times} {:instruction float_flush} {:instruction float_min} {:instruction print_integer} {:instruction integer_max} {:instruction float_mult} {:instruction float_pop} {:instruction integer_swap} {:instruction integer_add} {:instruction float_inc} {:instruction in1} {:instruction in1} {:instruction float_stackdepth} {:instruction integer_max} {:instruction float_mult} {:instruction float_pop} {:instruction float_inc} {:instruction integer_add} {:instruction float_inc} {:instruction in1} {:instruction in1} {:instruction float_stackdepth} {:instruction in2} {:instruction integer_add} {:instruction float_inc} {:instruction integer_add} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_add} {:instruction float_inc} {:instruction integer_add} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_add} {:instruction float_inc} {:instruction float_inc} {:instruction integer_add} {:instruction float_inc} {:instruction float_dup_times} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_add} {:instruction float_inc} {:instruction float_inc} {:instruction integer_max} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_max} {:instruction float_inc} {:instruction float_dup_times} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_add} {:instruction float_inc} {:instruction float_inc} {:instruction integer_add} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_max} {:instruction float_inc} {:instruction float_dup_times} {:instruction 25} {:instruction float_stackdepth} {:instruction float_inc} {:instruction float_dup_times} {:instruction float_yank} {:instruction float_dup_times} {:instruction float_stackdepth} {:instruction float_inc} {:instruction float_dup_times} {:instruction float_yank} {:instruction float_dup_times} {:instruction integer_add} {:instruction 25} {:instruction integer_flush} {:instruction integer_add} {:instruction float_yank} {:instruction float_dup_times} {:instruction integer_add} {:instruction 25} {:instruction integer_flush} {:instruction integer_add} {:instruction integer_swap} {:instruction print_integer} {:instruction 77.91830066263515} {:instruction float_rot} {:instruction float_dup_times} {:instruction float_rot} {:instruction integer_shove} {:instruction float_inc} {:instruction float_sub} {:instruction float_rot} {:instruction integer_shove} {:instruction float_inc} {:instruction float_sub} {:instruction float_rot} {:instruction float_mod} {:instruction float_inc} {:instruction integer_swap} {:instruction integer_min} {:instruction print_float} {:instruction integer_dec} {:instruction integer_flush} {:instruction float_dup_times} {:instruction float_div} {:instruction float_mult} {:instruction integer_shove} {:instruction float_dup_times})
Best program: (float_frominteger integer_dup_times float_flush float_min print_integer integer_max float_mult float_pop integer_swap integer_add float_inc in1 in1 float_stackdepth integer_max float_mult float_pop float_inc integer_add float_inc in1 in1 float_stackdepth in2 integer_add float_inc integer_add float_inc float_inc float_inc integer_add float_inc integer_add float_inc float_inc float_inc float_inc integer_add float_inc float_inc integer_add float_inc float_dup_times float_inc float_inc float_inc float_inc integer_add float_inc float_inc integer_max float_inc float_inc float_inc integer_max float_inc float_dup_times float_inc float_inc float_inc float_inc float_inc float_inc integer_add float_inc float_inc integer_add float_inc float_inc float_inc integer_max float_inc float_dup_times 25 float_stackdepth float_inc float_dup_times float_yank float_dup_times float_stackdepth float_inc float_dup_times float_yank float_dup_times integer_add 25 integer_flush integer_add float_yank float_dup_times integer_add 25 integer_flush integer_add integer_swap print_integer 77.91830066263515 float_rot float_dup_times float_rot integer_shove float_inc float_sub float_rot integer_shove float_inc float_sub float_rot float_mod float_inc integer_swap integer_min print_float integer_dec integer_flush float_dup_times float_div float_mult integer_shove float_dup_times)
Errors: [30.0817 9 49.0 2 16.0817 9 33.9183 10 41.0 2 13.0817 11 20.9183 10 17.0 2 19.9183 10 48.0228 11 3.0 1 2.9183 10 8.0 2 6.0 2 50.0 1 7.0817 11 19.7644 12 2.9828 10 38.0817 10 1.0 1 48.0 3 9.0 2 10.2985 10 4.0817 9 23.0 2]
Total: 684.2318999999999
Mean: 13.684638
Genome size: 120
Size: 121
Percent parens: 0.008
--- Population Statistics ---
Average total errors in population: 3088.9924054000016
Median total errors in population: 751.9868
Error averages by case: (124.21629669999952 10.634 135.37488750000006 4.63 95.33788819999967 8.736 135.41200280000112 9.861 135.78123850000006 4.336 129.27072579999933 10.959 97.91252740000054 9.542 103.96582999999988 4.641 97.11039550000024 10.198 136.31780900000143 10.979 108.07089910000009 4.436 117.58920560000055 11.028 98.84724950000007 4.107 96.7643978 3.784 157.20629899999994 4.712 106.2705238999995 10.652 103.74513000000007 11.188 102.86280279999949 10.241 122.45873899999901 10.746 87.27291869999998 5.078 147.8641546000001 5.123 95.84195979999996 4.18 105.69266650000041 10.5 121.29964369999999 9.67 132.08421400000015 4.461)
Error minima by case: (1.2549 2 0.1 1 0.0101 1 18.2368 1 3.643 1 0.9183 2 2.9137 1 0.1325 1 7.9183 1 0.1045 1 0.0 0 0.0474 2 0.0 0 0.0 0 11.4652 1 0.0281 1 1.3748 1 0.0 0 11.7221 2 0.0 0 6.1931 2 0.0 0 0.0 0 0.0474 2 12.0 1)
Average genome size in population (length): 106.586
Average program size in population (points): 107.586
Average percent parens in population: 0.009
Minimum age in population: 101.6368228673023
Maximum age in population: 105.7676841055693
Average age in population: 103.917002945003
Median age in population: 104.0000562951063
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 8
Genome diversity (% unique Plush genomes):	 0.891
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 8
Syntactic diversity (% unique Push programs):	 0.891
Total error diversity:				 0.624
Error (vector) diversity:			 0.682
Behavioral diversity:				 0.682
--- Run Statistics ---
Number of program evaluations used so far: 73000
Number of point (instruction) evaluations so far: 124768175
--- Timings ---
Current time: 1529616193676 milliseconds
Total Time:         258.0 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:        96.8 seconds, 37.5%
Fitness Testing:    126.5 seconds, 49.1%
Report:              34.5 seconds, 13.4%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 72
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 73
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 73
;;******************************
;; -*- Number IO problem report - generation 73
Test total error for best: 33665.502799999995
Test mean error for best: 16.83275
;;------------------------------
Outputs of best individual on training cases:
Correct output: -74.6179542037 | Program output: -42.5362548664
Correct output: 78.7609586813  | Program output: 37.7609586813 
Correct output: 3.0100598709   | Program output: 21.0917592082 
Correct output: -99.2368061293 | Program output: -131.155106792
Correct output: 88.6808415603  | Program output: 55.6808415603 
Correct output: -151.1060419578 | Program output: -136.0243426204
Correct output: 56.004616184   | Program output: 37.0863155213 
Correct output: 33.520660154   | Program output: 24.520660154  
Correct output: 42.238861085   | Program output: 24.3205604224 
Correct output: -49.0227893765 | Program output: -1.0          
Correct output: 103.4057483059 | Program output: 93.4057483059 
Correct output: -106.1378273779 | Program output: -107.0561280406
Correct output: 37.9625599991  | Program output: 53.9625599991 
Correct output: 71.9208193203  | Program output: 64.9208193203 
Correct output: 173.5348464317 | Program output: 131.5348464317
Correct output: -77.0615185935 | Program output: -67.9798192561
Correct output: -20.7643622555 | Program output: -1.0          
Correct output: 1.9827630815   | Program output: -1.0          
Correct output: -39.1198682611 | Program output: 0.9618310763  
Correct output: 1.1392376036   | Program output: 0.9183006626  
Correct output: 129.1930977679 | Program output: 89.1930977679 
Correct output: 26.7496211861  | Program output: 43.7496211861 
Correct output: -11.2984801384 | Program output: -1.0          
Correct output: -136.1442960385 | Program output: -130.0625967012
Correct output: 143.0911996605 | Program output: 128.0911996605
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_yank} {:instruction float_sub} {:instruction float_mod} {:instruction float_frominteger} {:instruction float_flush} {:instruction float_min} {:instruction print_integer} {:instruction integer_max} {:instruction float_mult} {:instruction float_pop} {:instruction float_inc} {:instruction integer_add} {:instruction float_inc} {:instruction in1} {:instruction in1} {:instruction float_stackdepth} {:instruction in2} {:instruction integer_add} {:instruction float_inc} {:instruction integer_add} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_add} {:instruction float_inc} {:instruction integer_add} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_sub} {:instruction integer_add} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_add} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_add} {:instruction float_inc} {:instruction float_inc} {:instruction integer_max} {:instruction float_inc} {:instruction float_dup_times} {:instruction float_rot} {:instruction float_stackdepth} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_rot} {:instruction float_inc} {:instruction float_inc} {:instruction integer_max} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction 25} {:instruction float_stackdepth} {:instruction float_inc} {:instruction float_dup_times} {:instruction float_yank} {:instruction float_dup_times} {:instruction integer_add} {:instruction 25} {:instruction integer_flush} {:instruction integer_add} {:instruction float_yank} {:instruction float_dup_times} {:instruction integer_add} {:instruction 25} {:instruction integer_flush} {:instruction integer_add} {:instruction float_mod} {:instruction print_integer} {:instruction 77.91830066263515} {:instruction float_rot} {:instruction float_dup_times} {:instruction float_rot} {:instruction integer_shove} {:instruction float_inc} {:instruction float_sub} {:instruction float_rot} {:instruction integer_shove} {:instruction float_inc} {:instruction float_sub} {:instruction float_rot} {:instruction float_mod} {:instruction float_inc} {:instruction integer_swap} {:instruction integer_min} {:instruction print_float} {:instruction integer_dec} {:instruction integer_flush} {:instruction float_dup_times} {:instruction float_div} {:instruction float_mult} {:instruction integer_shove} {:instruction float_dup_times} {:instruction float_div} {:instruction float_mult})
Best program: (float_yank float_sub float_mod float_frominteger float_flush float_min print_integer integer_max float_mult float_pop float_inc integer_add float_inc in1 in1 float_stackdepth in2 integer_add float_inc integer_add float_inc float_inc float_inc integer_add float_inc integer_add float_inc float_inc float_inc integer_sub integer_add float_inc float_inc float_inc float_inc integer_add float_inc float_inc float_inc integer_add float_inc float_inc integer_max float_inc float_dup_times float_rot float_stackdepth float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc integer_rot float_inc float_inc integer_max float_inc float_inc float_inc 25 float_stackdepth float_inc float_dup_times float_yank float_dup_times integer_add 25 integer_flush integer_add float_yank float_dup_times integer_add 25 integer_flush integer_add float_mod print_integer 77.91830066263515 float_rot float_dup_times float_rot integer_shove float_inc float_sub float_rot integer_shove float_inc float_sub float_rot float_mod float_inc integer_swap integer_min print_float integer_dec integer_flush float_dup_times float_div float_mult integer_shove float_dup_times float_div float_mult)
Errors: [32.0817 10 41.0 2 18.0817 9 31.9183 10 33.0 2 15.0817 11 18.9183 10 9.0 2 17.9183 11 48.0228 11 10.0 2 0.9183 10 16.0 2 7.0 2 42.0 2 9.0817 10 19.7644 12 2.9828 10 40.0817 11 0.2209 9 40.0 2 17.0 2 10.2985 10 6.0817 9 15.0 2]
Total: 674.4528
Mean: 13.489056
Genome size: 118
Size: 119
Percent parens: 0.008
--- Population Statistics ---
Average total errors in population: 3294.059369999997
Median total errors in population: 756.0852999999998
Error averages by case: (130.00452049999953 10.602 147.36094989999992 4.61 99.58250069999994 8.849 141.54416130000092 9.926 144.40581540000005 4.421 137.52419419999956 10.956 102.2925188000004 9.569 117.22103089999972 4.661 101.11373870000006 10.241 142.93067510000193 10.993 121.1485609000001 4.615 123.8813948000005 10.972 106.82494740000001 4.25 111.97381740000013 3.989 166.8366384999999 4.793 114.34309039999957 10.657 113.46149180000002 11.094 110.1825297999992 10.251 127.90358839999901 10.778 89.22348850000004 5.33 159.32167330000013 5.157 103.18035459999989 4.305 114.16072730000076 10.547 129.32270460000012 9.802 142.3432568 4.603)
Error minima by case: (0.1468 8 0.8427 1 0.0101 1 15.9183 1 7.7625 1 0.0817 1 2.9183 1 1.1588 1 1.9183 1 0.0 0 0.0 0 0.0474 1 0.0 0 0.0 0 14.4652 1 0.0474 2 0.3271 1 0.0172 7 2.2779 7 0.0 0 2.8069 2 0.0 0 0.0288 1 0.0474 2 9.0912 1)
Average genome size in population (length): 107.83
Average program size in population (points): 108.83
Average percent parens in population: 0.009
Minimum age in population: 102.6368228673023
Maximum age in population: 107.5559501473349
Average age in population: 105.3110285889785
Median age in population: 105.3273682377071
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 16
Genome diversity (% unique Plush genomes):	 0.901
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 16
Syntactic diversity (% unique Push programs):	 0.901
Total error diversity:				 0.653
Error (vector) diversity:			 0.7
Behavioral diversity:				 0.701
--- Run Statistics ---
Number of program evaluations used so far: 74000
Number of point (instruction) evaluations so far: 127463925
--- Timings ---
Current time: 1529616198131 milliseconds
Total Time:         262.4 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:        98.2 seconds, 37.4%
Fitness Testing:    129.0 seconds, 49.1%
Report:              35.1 seconds, 13.4%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 73
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 74
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 74
;;******************************
;; -*- Number IO problem report - generation 74
Test total error for best: 33239.7937
Test mean error for best: 16.61990
;;------------------------------
Outputs of best individual on training cases:
Correct output: -74.6179542037 | Program output: -43.5362548664
Correct output: 78.7609586813  | Program output: 38.7609586813 
Correct output: 3.0100598709   | Program output: 20.0917592082 
Correct output: -99.2368061293 | Program output: -132.155106792
Correct output: 88.6808415603  | Program output: 56.6808415603 
Correct output: -151.1060419578 | Program output: -137.0243426204
Correct output: 56.004616184   | Program output: 36.0863155213 
Correct output: 33.520660154   | Program output: 25.520660154  
Correct output: 42.238861085   | Program output: 23.3205604224 
Correct output: -49.0227893765 | Program output: -1.0          
Correct output: 103.4057483059 | Program output: 113.4057483059
Correct output: -106.1378273779 | Program output: -108.0561280406
Correct output: 37.9625599991  | Program output: 54.9625599991 
Correct output: 71.9208193203  | Program output: 64.9208193203 
Correct output: 173.5348464317 | Program output: 132.5348464317
Correct output: -77.0615185935 | Program output: -68.9798192561
Correct output: -20.7643622555 | Program output: -1.0          
Correct output: 1.9827630815   | Program output: -1.0          
Correct output: -39.1198682611 | Program output: -0.0381689237 
Correct output: 1.1392376036   | Program output: 1.1392376036  
Correct output: 129.1930977679 | Program output: 90.1930977679 
Correct output: 26.7496211861  | Program output: 44.7496211861 
Correct output: -11.2984801384 | Program output: -1.0          
Correct output: -136.1442960385 | Program output: -131.0625967012
Correct output: 143.0911996605 | Program output: 129.0911996605
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_mod} {:instruction float_pop} {:instruction integer_max} {:instruction integer_flush} {:instruction in1} {:instruction in1} {:instruction float_stackdepth} {:instruction in2} {:instruction integer_add} {:instruction float_inc} {:instruction integer_add} {:instruction float_inc} {:instruction float_inc} {:instruction integer_max} {:instruction float_inc} {:instruction integer_add} {:instruction float_inc} {:instruction integer_add} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_add} {:instruction float_inc} {:instruction integer_add} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_add} {:instruction float_inc} {:instruction float_stackdepth} {:instruction float_inc} {:instruction float_inc} {:instruction integer_add} {:instruction float_inc} {:instruction float_inc} {:instruction integer_max} {:instruction float_inc} {:instruction float_dup_times} {:instruction float_rot} {:instruction float_stackdepth} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_add} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_add} {:instruction float_inc} {:instruction float_inc} {:instruction integer_max} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction 25} {:instruction float_stackdepth} {:instruction float_inc} {:instruction float_dup_times} {:instruction float_yank} {:instruction float_dup_times} {:instruction float_dup_times} {:instruction integer_add} {:instruction 25} {:instruction integer_flush} {:instruction integer_add} {:instruction float_yank} {:instruction float_dup_times} {:instruction integer_add} {:instruction 25} {:instruction integer_flush} {:instruction integer_add} {:instruction integer_swap} {:instruction print_integer} {:instruction 77.91830066263515} {:instruction float_rot} {:instruction float_dup_times} {:instruction float_rot} {:instruction integer_shove} {:instruction float_inc} {:instruction float_sub} {:instruction float_rot} {:instruction integer_shove} {:instruction float_inc} {:instruction float_sub} {:instruction float_rot} {:instruction float_mod} {:instruction float_inc} {:instruction integer_swap} {:instruction integer_min} {:instruction print_float} {:instruction integer_dup_items} {:instruction integer_flush} {:instruction float_dup_times} {:instruction float_div} {:instruction float_mult} {:instruction integer_shove} {:instruction float_dup_times} {:instruction float_div} {:instruction float_mult})
Best program: (float_mod float_pop integer_max integer_flush in1 in1 float_stackdepth in2 integer_add float_inc integer_add float_inc float_inc integer_max float_inc integer_add float_inc integer_add float_inc float_inc float_inc float_inc integer_add float_inc integer_add float_inc float_inc float_inc float_inc integer_add float_inc float_stackdepth float_inc float_inc integer_add float_inc float_inc integer_max float_inc float_dup_times float_rot float_stackdepth float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc integer_add float_inc float_inc float_inc float_inc float_inc float_inc float_inc integer_add float_inc float_inc integer_max float_inc float_inc float_inc 25 float_stackdepth float_inc float_dup_times float_yank float_dup_times float_dup_times integer_add 25 integer_flush integer_add float_yank float_dup_times integer_add 25 integer_flush integer_add integer_swap print_integer 77.91830066263515 float_rot float_dup_times float_rot integer_shove float_inc float_sub float_rot integer_shove float_inc float_sub float_rot float_mod float_inc integer_swap integer_min print_float integer_dup_items integer_flush float_dup_times float_div float_mult integer_shove float_dup_times float_div float_mult)
Errors: [31.0817 10 40.0 1 17.0817 9 32.9183 10 32.0 2 14.0817 11 19.9183 9 8.0 2 18.9183 11 48.0228 11 10.0 1 1.9183 10 17.0 2 7.0 2 41.0 2 8.0817 11 19.7644 12 2.9828 10 39.0817 10 0.0 0 39.0 3 18.0 2 10.2985 10 5.0817 9 14.0 2]
Total: 657.2319
Mean: 13.144638
Genome size: 114
Size: 115
Percent parens: 0.009
--- Population Statistics ---
Average total errors in population: 2825.4133158
Median total errors in population: 757.79215
Error averages by case: (109.08375989999978 10.602 125.37395450000004 4.721 85.40250689999998 8.705 121.031445400001 9.834 124.56554030000002 4.374 118.18437679999933 10.869 86.50219569999997 9.421 97.11945979999976 4.687 84.35194109999992 10.072 124.7910391000016 10.732 99.23498560000012 4.378 104.02837870000035 10.851 89.10565359999997 4.233 91.41700099999998 3.858 146.45925110000002 4.707 93.05284089999998 10.693 96.72530150000003 10.885 93.31025229999935 10.243 108.2099099999994 10.882 82.31341330000001 5.39 137.14935910000008 5.095 87.27794899999998 4.354 95.87974850000036 10.303 110.06013540000008 9.809 120.55091630000013 4.534)
Error minima by case: (0.2975 3 0.1573 1 0.0101 1 0.5648 1 0.7841 1 0.0817 2 2.9183 1 1.5207 1 1.9183 1 0.1045 1 0.0 0 0.0474 2 0.0 0 0.0 0 18.0474 1 0.0474 2 1.0 1 0.0172 5 8.3542 3 0.0 0 0.8069 2 0.0 0 0.0 0 0.0474 2 11.0 1)
Average genome size in population (length): 108.536
Average program size in population (points): 109.536
Average percent parens in population: 0.009
Minimum age in population: 104.3837452051321
Maximum age in population: 108.7156550436444
Average age in population: 106.6783087169605
Median age in population: 106.6906153834837
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 20
Genome diversity (% unique Plush genomes):	 0.895
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 20
Syntactic diversity (% unique Push programs):	 0.895
Total error diversity:				 0.665
Error (vector) diversity:			 0.694
Behavioral diversity:				 0.695
--- Run Statistics ---
Number of program evaluations used so far: 75000
Number of point (instruction) evaluations so far: 130177350
--- Timings ---
Current time: 1529616202528 milliseconds
Total Time:         266.9 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:        99.5 seconds, 37.3%
Fitness Testing:    131.4 seconds, 49.3%
Report:              35.8 seconds, 13.4%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 74
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 75
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 75
;;******************************
;; -*- Number IO problem report - generation 75
Test total error for best: 30096.872500000067
Test mean error for best: 15.04844
;;------------------------------
Outputs of best individual on training cases:
Correct output: -74.6179542037 | Program output: -50.5362548664
Correct output: 78.7609586813  | Program output: 32.7609586813 
Correct output: 3.0100598709   | Program output: 13.0917592082 
Correct output: -99.2368061293 | Program output: -139.155106792
Correct output: 88.6808415603  | Program output: 50.6808415603 
Correct output: -151.1060419578 | Program output: -144.0243426204
Correct output: 56.004616184   | Program output: 29.0863155213 
Correct output: 33.520660154   | Program output: 19.520660154  
Correct output: 42.238861085   | Program output: 16.3205604224 
Correct output: -49.0227893765 | Program output: -54.0227893765
Correct output: 103.4057483059 | Program output: 113.4057483059
Correct output: -106.1378273779 | Program output: -115.0561280406
Correct output: 37.9625599991  | Program output: 48.9625599991 
Correct output: 71.9208193203  | Program output: 66.9208193203 
Correct output: 173.5348464317 | Program output: 126.5348464317
Correct output: -77.0615185935 | Program output: -75.9798192561
Correct output: -20.7643622555 | Program output: -10.7643622555
Correct output: 1.9827630815   | Program output: -50.0172369185
Correct output: -39.1198682611 | Program output: -7.0381689237 
Correct output: 1.1392376036   | Program output: 3.1392376036  
Correct output: 129.1930977679 | Program output: 84.1930977679 
Correct output: 26.7496211861  | Program output: 38.7496211861 
Correct output: -11.2984801384 | Program output: -30.2984801384
Correct output: -136.1442960385 | Program output: -138.0625967012
Correct output: 143.0911996605 | Program output: 123.0911996605
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_yank} {:instruction float_sub} {:instruction integer_max} {:instruction integer_flush} {:instruction in1} {:instruction in1} {:instruction float_stackdepth} {:instruction in2} {:instruction integer_add} {:instruction float_inc} {:instruction integer_add} {:instruction float_inc} {:instruction float_inc} {:instruction integer_add} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_add} {:instruction integer_add} {:instruction float_inc} {:instruction integer_add} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_max} {:instruction float_inc} {:instruction integer_mult} {:instruction float_rot} {:instruction float_stackdepth} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_add} {:instruction float_inc} {:instruction float_inc} {:instruction integer_max} {:instruction float_inc} {:instruction float_dup_times} {:instruction float_rot} {:instruction float_stackdepth} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_div} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_add} {:instruction float_inc} {:instruction float_inc} {:instruction integer_max} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction 25} {:instruction float_stackdepth} {:instruction float_inc} {:instruction float_dup_times} {:instruction float_yank} {:instruction float_dup_times} {:instruction integer_add} {:instruction 25} {:instruction integer_flush} {:instruction integer_add} {:instruction float_yank} {:instruction float_dup_times} {:instruction integer_add} {:instruction float_dup_times} {:instruction float_yank} {:instruction float_dup_times} {:instruction integer_add} {:instruction 25} {:instruction integer_flush} {:instruction integer_add} {:instruction float_yank} {:instruction float_dup_times} {:instruction integer_swap} {:instruction 25} {:instruction integer_flush} {:instruction integer_add} {:instruction integer_swap} {:instruction print_integer} {:instruction 77.91830066263515} {:instruction float_rot} {:instruction float_dup_times} {:instruction float_rot} {:instruction integer_shove} {:instruction float_inc} {:instruction float_dec} {:instruction float_inc} {:instruction float_sub} {:instruction float_rot} {:instruction integer_shove} {:instruction integer_flush} {:instruction float_sub} {:instruction float_rot} {:instruction integer_add} {:instruction float_inc} {:instruction integer_swap} {:instruction integer_min} {:instruction print_float} {:instruction integer_dec} {:instruction integer_flush} {:instruction float_yank} {:instruction integer_fromfloat} {:instruction float_mult} {:instruction integer_shove} {:instruction float_dup_times} {:instruction float_div} {:instruction float_mult})
Best program: (float_yank float_sub integer_max integer_flush in1 in1 float_stackdepth in2 integer_add float_inc integer_add float_inc float_inc integer_add float_inc float_inc float_inc integer_add integer_add float_inc integer_add float_inc float_inc float_inc integer_max float_inc integer_mult float_rot float_stackdepth float_inc float_inc float_inc float_inc integer_add float_inc float_inc integer_max float_inc float_dup_times float_rot float_stackdepth float_inc float_inc float_inc float_inc float_inc float_inc float_inc integer_div float_inc float_inc float_inc float_inc float_inc float_inc integer_add float_inc float_inc integer_max float_inc float_inc float_inc 25 float_stackdepth float_inc float_dup_times float_yank float_dup_times integer_add 25 integer_flush integer_add float_yank float_dup_times integer_add float_dup_times float_yank float_dup_times integer_add 25 integer_flush integer_add float_yank float_dup_times integer_swap 25 integer_flush integer_add integer_swap print_integer 77.91830066263515 float_rot float_dup_times float_rot integer_shove float_inc float_dec float_inc float_sub float_rot integer_shove integer_flush float_sub float_rot integer_add float_inc integer_swap integer_min print_float integer_dec integer_flush float_yank integer_fromfloat float_mult integer_shove float_dup_times float_div float_mult)
Errors: [24.0817 10 46.0 2 10.0817 8 39.9183 9 38.0 2 7.0817 11 26.9183 10 14.0 2 25.9183 11 5.0 2 10.0 1 8.9183 11 11.0 2 5.0 2 47.0 2 1.0817 10 10.0 1 52.0 10 32.0817 10 2.0 1 45.0 3 12.0 2 19.0 2 1.9183 9 20.0 1]
Total: 648.0
Mean: 12.96
Genome size: 118
Size: 119
Percent parens: 0.008
--- Population Statistics ---
Average total errors in population: 3010.399900800001
Median total errors in population: 751.5369999999998
Error averages by case: (119.56391479999937 10.671 132.71243929999997 4.412 96.1046401999998 8.798 130.48712940000115 9.721 127.26024890000002 4.282 128.2222466999992 10.702 98.93382280000051 9.435 103.50178659999982 4.52 97.8237543000002 10.122 127.39442100000154 10.339 107.22089090000004 4.476 114.16277490000056 10.625 94.62719520000002 4.192 99.26649830000004 3.987 149.54602579999997 4.58 103.44215499999964 10.652 100.38252850000005 10.732 100.4996996999992 10.303 119.29808839999899 10.884 87.18099490000006 5.5 141.48742660000005 5.0 94.47005299999995 4.246 100.11791490000023 9.876 119.76523440000014 9.703 124.70201630000005 4.468)
Error minima by case: (1.3003 8 0.1573 1 0.0101 1 20.0 1 1.3192 1 0.0817 2 2.1726 1 1.8412 1 7.9183 1 0.0 0 0.0 0 0.0474 1 0.0 0 0.0 0 0.2204 1 0.0474 2 0.2457 1 0.0049 7 2.2451 7 0.0 0 2.1931 2 0.0 0 0.2985 1 0.0817 2 6.6153 1)
Average genome size in population (length): 109.841
Average program size in population (points): 110.841
Average percent parens in population: 0.009
Minimum age in population: 105.9993221369723
Maximum age in population: 109.8395099930433
Average age in population: 108.0773830381661
Median age in population: 108.123802891732
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 11
Genome diversity (% unique Plush genomes):	 0.892
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 11
Syntactic diversity (% unique Push programs):	 0.892
Total error diversity:				 0.687
Error (vector) diversity:			 0.731
Behavioral diversity:				 0.731
--- Run Statistics ---
Number of program evaluations used so far: 76000
Number of point (instruction) evaluations so far: 132923400
--- Timings ---
Current time: 1529616207034 milliseconds
Total Time:         271.3 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       100.9 seconds, 37.2%
Fitness Testing:    134.0 seconds, 49.4%
Report:              36.4 seconds, 13.4%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 75
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 76
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 76
;;******************************
;; -*- Number IO problem report - generation 76
Test total error for best: 28759.42810000003
Test mean error for best: 14.37971
;;------------------------------
Outputs of best individual on training cases:
Correct output: -74.6179542037 | Program output: -44.5362548664
Correct output: 78.7609586813  | Program output: 37.7609586813 
Correct output: 3.0100598709   | Program output: 19.0917592082 
Correct output: -99.2368061293 | Program output: -133.155106792
Correct output: 88.6808415603  | Program output: 55.6808415603 
Correct output: -151.1060419578 | Program output: -138.0243426204
Correct output: 56.004616184   | Program output: 35.0863155213 
Correct output: 33.520660154   | Program output: 24.520660154  
Correct output: 42.238861085   | Program output: 22.3205604224 
Correct output: -49.0227893765 | Program output: -49.0227893765
Correct output: 103.4057483059 | Program output: 111.4057483059
Correct output: -106.1378273779 | Program output: -109.0561280406
Correct output: 37.9625599991  | Program output: 53.9625599991 
Correct output: 71.9208193203  | Program output: 65.9208193203 
Correct output: 173.5348464317 | Program output: 131.5348464317
Correct output: -77.0615185935 | Program output: -69.9798192561
Correct output: -20.7643622555 | Program output: -12.7643622555
Correct output: 1.9827630815   | Program output: -45.0172369185
Correct output: -39.1198682611 | Program output: -1.0381689237 
Correct output: 1.1392376036   | Program output: 2.1392376036  
Correct output: 129.1930977679 | Program output: 89.1930977679 
Correct output: 26.7496211861  | Program output: 43.7496211861 
Correct output: -11.2984801384 | Program output: -25.2984801384
Correct output: -136.1442960385 | Program output: -132.0625967012
Correct output: 143.0911996605 | Program output: 128.0911996605
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_yank} {:instruction float_sub} {:instruction float_mod} {:instruction float_frominteger} {:instruction float_flush} {:instruction float_min} {:instruction print_integer} {:instruction integer_max} {:instruction float_mult} {:instruction float_pop} {:instruction float_inc} {:instruction integer_add} {:instruction float_inc} {:instruction in1} {:instruction in1} {:instruction float_stackdepth} {:instruction in2} {:instruction integer_add} {:instruction float_inc} {:instruction integer_add} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_add} {:instruction float_inc} {:instruction integer_add} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_sub} {:instruction integer_add} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_add} {:instruction float_stackdepth} {:instruction float_inc} {:instruction float_inc} {:instruction integer_add} {:instruction float_inc} {:instruction float_inc} {:instruction integer_max} {:instruction float_inc} {:instruction float_dup_times} {:instruction float_rot} {:instruction float_stackdepth} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_sub} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_add} {:instruction float_inc} {:instruction float_inc} {:instruction integer_max} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction 25} {:instruction float_stackdepth} {:instruction float_inc} {:instruction float_dup_times} {:instruction float_yank} {:instruction float_dup_times} {:instruction integer_add} {:instruction 25} {:instruction integer_flush} {:instruction integer_add} {:instruction float_yank} {:instruction float_dup_times} {:instruction integer_add} {:instruction float_yank} {:instruction float_dup_times} {:instruction integer_swap} {:instruction 25} {:instruction integer_flush} {:instruction integer_add} {:instruction integer_swap} {:instruction print_integer} {:instruction 77.91830066263515} {:instruction float_rot} {:instruction float_dup_times} {:instruction float_rot} {:instruction integer_shove} {:instruction float_inc} {:instruction float_dec} {:instruction float_inc} {:instruction float_sub} {:instruction float_rot} {:instruction integer_shove} {:instruction integer_flush} {:instruction float_sub} {:instruction float_rot} {:instruction integer_min} {:instruction print_float} {:instruction integer_dec} {:instruction integer_flush} {:instruction float_dup_times} {:instruction float_div} {:instruction float_mult} {:instruction integer_shove} {:instruction float_dup_times} {:instruction float_div} {:instruction float_mult})
Best program: (float_yank float_sub float_mod float_frominteger float_flush float_min print_integer integer_max float_mult float_pop float_inc integer_add float_inc in1 in1 float_stackdepth in2 integer_add float_inc integer_add float_inc float_inc float_inc integer_add float_inc integer_add float_inc float_inc float_inc integer_sub integer_add float_inc float_inc float_inc float_inc integer_add float_stackdepth float_inc float_inc integer_add float_inc float_inc integer_max float_inc float_dup_times float_rot float_stackdepth float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc integer_sub float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc integer_add float_inc float_inc integer_max float_inc float_inc float_inc 25 float_stackdepth float_inc float_dup_times float_yank float_dup_times integer_add 25 integer_flush integer_add float_yank float_dup_times integer_add float_yank float_dup_times integer_swap 25 integer_flush integer_add integer_swap print_integer 77.91830066263515 float_rot float_dup_times float_rot integer_shove float_inc float_dec float_inc float_sub float_rot integer_shove integer_flush float_sub float_rot integer_min print_float integer_dec integer_flush float_dup_times float_div float_mult integer_shove float_dup_times float_div float_mult)
Errors: [30.0817 9 41.0 2 16.0817 9 33.9183 10 33.0 2 13.0817 11 20.9183 10 9.0 2 19.9183 10 0.0 0 8.0 2 2.9183 10 16.0 2 6.0 2 42.0 2 7.0817 11 8.0 2 47.0 10 38.0817 10 1.0 1 40.0 2 17.0 2 14.0 2 4.0817 9 15.0 2]
Total: 617.1633999999999
Mean: 12.343268
Genome size: 121
Size: 122
Percent parens: 0.008
--- Population Statistics ---
Average total errors in population: 3616.1050793000018
Median total errors in population: 774.81545
Error averages by case: (142.2207761000002 10.742 156.3335763999999 4.838 116.32348889999943 8.846 149.6249568000004 9.759 154.10981510000002 4.528 149.95359439999996 10.793 116.20404160000076 9.47 127.20696759999981 4.964 116.07563860000059 10.078 153.0455417000014 9.621 132.3690270000001 4.782 135.34810700000048 10.718 126.17020740000004 4.553 124.03297500000009 4.315 174.58488179999995 4.904 127.3890812999996 10.79 127.07138080000007 10.303 132.78606859999928 10.357 141.37881769999984 10.948 107.76247730000003 5.586 165.41829110000012 5.272 123.15483089999992 4.644 130.62060850000069 9.128 141.87398320000042 9.819 150.56994449999996 4.718)
Error minima by case: (0.2332 2 0.1573 1 0.0817 1 9.2954 1 3.3192 1 0.0817 1 1.0817 1 1.0 1 1.2824 1 0.0 0 0.0 0 0.0474 2 0.0 0 0.0 0 28.5348 1 0.0474 1 0.3748 1 0.2572 1 8.2779 7 0.0 0 7.8069 2 0.0 0 0.0229 1 0.0474 2 5.0 1)
Average genome size in population (length): 112.137
Average program size in population (points): 113.137
Average percent parens in population: 0.009
Minimum age in population: 107.4227347445463
Maximum age in population: 111.3075758461259
Average age in population: 109.5132207439488
Median age in population: 109.5533826849598
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 14
Genome diversity (% unique Plush genomes):	 0.916
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 14
Syntactic diversity (% unique Push programs):	 0.916
Total error diversity:				 0.693
Error (vector) diversity:			 0.729
Behavioral diversity:				 0.729
--- Run Statistics ---
Number of program evaluations used so far: 77000
Number of point (instruction) evaluations so far: 135726825
--- Timings ---
Current time: 1529616211504 milliseconds
Total Time:         275.8 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       102.2 seconds, 37.1%
Fitness Testing:    136.5 seconds, 49.5%
Report:              37.0 seconds, 13.4%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 76
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 77
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 77
;;******************************
;; -*- Number IO problem report - generation 77
Test total error for best: 28063.42810000003
Test mean error for best: 14.03171
;;------------------------------
Outputs of best individual on training cases:
Correct output: -74.6179542037 | Program output: -44.5362548664
Correct output: 78.7609586813  | Program output: 43.7609586813 
Correct output: 3.0100598709   | Program output: 19.0917592082 
Correct output: -99.2368061293 | Program output: -133.155106792
Correct output: 88.6808415603  | Program output: 61.6808415603 
Correct output: -151.1060419578 | Program output: -138.0243426204
Correct output: 56.004616184   | Program output: 35.0863155213 
Correct output: 33.520660154   | Program output: 30.520660154  
Correct output: 42.238861085   | Program output: 22.3205604224 
Correct output: -49.0227893765 | Program output: -43.0227893765
Correct output: 103.4057483059 | Program output: 117.4057483059
Correct output: -106.1378273779 | Program output: -109.0561280406
Correct output: 37.9625599991  | Program output: 59.9625599991 
Correct output: 71.9208193203  | Program output: 65.9208193203 
Correct output: 173.5348464317 | Program output: 137.5348464317
Correct output: -77.0615185935 | Program output: -69.9798192561
Correct output: -20.7643622555 | Program output: -6.7643622555 
Correct output: 1.9827630815   | Program output: -39.0172369185
Correct output: -39.1198682611 | Program output: -1.0381689237 
Correct output: 1.1392376036   | Program output: 2.1392376036  
Correct output: 129.1930977679 | Program output: 95.1930977679 
Correct output: 26.7496211861  | Program output: 49.7496211861 
Correct output: -11.2984801384 | Program output: -19.2984801384
Correct output: -136.1442960385 | Program output: -132.0625967012
Correct output: 143.0911996605 | Program output: 134.0911996605
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_sin} {:instruction float_pop} {:instruction integer_max} {:instruction integer_flush} {:instruction in1} {:instruction in1} {:instruction float_stackdepth} {:instruction in2} {:instruction integer_add} {:instruction float_inc} {:instruction integer_add} {:instruction float_inc} {:instruction float_inc} {:instruction integer_max} {:instruction float_inc} {:instruction integer_add} {:instruction float_inc} {:instruction integer_add} {:instruction integer_add} {:instruction float_inc} {:instruction float_inc} {:instruction integer_add} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_add} {:instruction float_inc} {:instruction integer_add} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_sub} {:instruction integer_add} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_add} {:instruction float_stackdepth} {:instruction float_inc} {:instruction float_inc} {:instruction integer_add} {:instruction float_inc} {:instruction float_inc} {:instruction integer_max} {:instruction float_inc} {:instruction float_dup_times} {:instruction float_rot} {:instruction float_stackdepth} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_sub} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_add} {:instruction float_inc} {:instruction float_inc} {:instruction integer_max} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction 25} {:instruction float_stackdepth} {:instruction float_inc} {:instruction float_dup_times} {:instruction float_yank} {:instruction float_dup_times} {:instruction integer_add} {:instruction 25} {:instruction integer_flush} {:instruction integer_add} {:instruction float_yank} {:instruction float_dup_times} {:instruction integer_add} {:instruction float_yank} {:instruction float_dup_times} {:instruction integer_swap} {:instruction 25} {:instruction integer_flush} {:instruction integer_add} {:instruction integer_swap} {:instruction print_integer} {:instruction 77.91830066263515} {:instruction float_rot} {:instruction float_dup_times} {:instruction float_rot} {:instruction integer_shove} {:instruction float_inc} {:instruction float_dec} {:instruction float_inc} {:instruction float_sub} {:instruction float_rot} {:instruction integer_shove} {:instruction integer_flush} {:instruction float_sub} {:instruction float_rot} {:instruction integer_min} {:instruction print_float} {:instruction integer_dec} {:instruction integer_flush} {:instruction float_dup_times} {:instruction float_div} {:instruction float_mult} {:instruction integer_shove} {:instruction float_dup_times} {:instruction float_div} {:instruction float_mult})
Best program: (float_sin float_pop integer_max integer_flush in1 in1 float_stackdepth in2 integer_add float_inc integer_add float_inc float_inc integer_max float_inc integer_add float_inc integer_add integer_add float_inc float_inc integer_add float_inc float_inc float_inc integer_add float_inc integer_add float_inc float_inc float_inc integer_sub integer_add float_inc float_inc float_inc float_inc integer_add float_stackdepth float_inc float_inc integer_add float_inc float_inc integer_max float_inc float_dup_times float_rot float_stackdepth float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc integer_sub float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc integer_add float_inc float_inc integer_max float_inc float_inc float_inc 25 float_stackdepth float_inc float_dup_times float_yank float_dup_times integer_add 25 integer_flush integer_add float_yank float_dup_times integer_add float_yank float_dup_times integer_swap 25 integer_flush integer_add integer_swap print_integer 77.91830066263515 float_rot float_dup_times float_rot integer_shove float_inc float_dec float_inc float_sub float_rot integer_shove integer_flush float_sub float_rot integer_min print_float integer_dec integer_flush float_dup_times float_div float_mult integer_shove float_dup_times float_div float_mult)
Errors: [30.0817 9 35.0 2 16.0817 9 33.9183 10 27.0 2 13.0817 11 20.9183 10 3.0 1 19.9183 10 6.0 1 14.0 2 2.9183 10 22.0 2 6.0 2 36.0 2 7.0817 11 14.0 2 41.0 9 38.0817 10 1.0 1 34.0 3 23.0 2 8.0 1 4.0817 9 9.0 2]
Total: 598.1633999999999
Mean: 11.963268
Genome size: 123
Size: 124
Percent parens: 0.008
--- Population Statistics ---
Average total errors in population: 2927.0452532
Median total errors in population: 730.6159499999999
Error averages by case: (116.04018539999937 10.633 126.4865732 4.441 91.25430609999972 8.862 126.02120610000141 9.754 122.52277610000003 4.225 122.86561779999903 10.773 93.47080610000033 9.498 98.22966439999988 4.66 92.58674850000014 10.207 122.28447690000124 8.98 102.25037320000003 4.373 109.62672240000065 10.61 95.35158290000001 4.246 97.21635340000009 3.917 143.49186559999995 4.581 100.84663239999962 10.621 101.25059110000001 9.597 105.70441879999943 10.306 114.21994219999911 10.797 91.39312470000003 5.135 134.9920829000001 5.024 95.34694469999997 4.26 101.56672120000033 8.496 115.15414019999997 9.72 118.73639689999996 4.419)
Error minima by case: (1.3342 8 0.1573 1 0.0101 1 18.0474 1 0.6808 1 0.0817 1 0.1726 1 0.5753 1 4.0474 1 0.0 0 0.0 0 0.0474 2 0.0 0 0.0 0 32.0 1 0.0474 1 0.0 0 0.0645 8 3.7221 7 0.0 0 0.8069 2 0.0 0 0.3213 1 0.0817 2 5.0 1)
Average genome size in population (length): 114.419
Average program size in population (points): 115.419
Average percent parens in population: 0.009
Minimum age in population: 108.817740525046
Maximum age in population: 112.7009825785988
Average age in population: 110.9053107211108
Median age in population: 110.9271314796795
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 12
Genome diversity (% unique Plush genomes):	 0.92
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 12
Syntactic diversity (% unique Push programs):	 0.92
Total error diversity:				 0.701
Error (vector) diversity:			 0.746
Behavioral diversity:				 0.747
--- Run Statistics ---
Number of program evaluations used so far: 78000
Number of point (instruction) evaluations so far: 138587300
--- Timings ---
Current time: 1529616216121 milliseconds
Total Time:         280.4 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       103.6 seconds, 36.9%
Fitness Testing:    139.1 seconds, 49.6%
Report:              37.6 seconds, 13.4%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 77
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 78
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 78
;;******************************
;; -*- Number IO problem report - generation 78
Test total error for best: 28249.184999999987
Test mean error for best: 14.12459
;;------------------------------
Outputs of best individual on training cases:
Correct output: -74.6179542037 | Program output: -44.6653573997
Correct output: 78.7609586813  | Program output: 39.7609586813 
Correct output: 3.0100598709   | Program output: 18.9626566749 
Correct output: -99.2368061293 | Program output: -133.2842093253
Correct output: 88.6808415603  | Program output: 57.6808415603 
Correct output: -151.1060419578 | Program output: -138.1534451538
Correct output: 56.004616184   | Program output: 34.957212988  
Correct output: 33.520660154   | Program output: 26.520660154  
Correct output: 42.238861085   | Program output: 22.191457889  
Correct output: -49.0227893765 | Program output: -47.0227893765
Correct output: 103.4057483059 | Program output: 96.4057483059 
Correct output: -106.1378273779 | Program output: -109.1852305739
Correct output: 37.9625599991  | Program output: 55.9625599991 
Correct output: 71.9208193203  | Program output: 67.9208193203 
Correct output: 173.5348464317 | Program output: 133.5348464317
Correct output: -77.0615185935 | Program output: -70.1089217895
Correct output: -20.7643622555 | Program output: -27.7643622555
Correct output: 1.9827630815   | Program output: -43.0172369185
Correct output: -39.1198682611 | Program output: -1.1672714571 
Correct output: 1.1392376036   | Program output: 4.1392376036  
Correct output: 129.1930977679 | Program output: 91.1930977679 
Correct output: 26.7496211861  | Program output: 45.7496211861 
Correct output: -11.2984801384 | Program output: -23.2984801384
Correct output: -136.1442960385 | Program output: -132.1916992345
Correct output: 143.0911996605 | Program output: 130.0911996605
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_mod} {:instruction float_pop} {:instruction integer_max} {:instruction integer_flush} {:instruction in1} {:instruction in1} {:instruction float_stackdepth} {:instruction in2} {:instruction integer_add} {:instruction float_inc} {:instruction integer_add} {:instruction float_inc} {:instruction float_inc} {:instruction integer_max} {:instruction float_inc} {:instruction integer_add} {:instruction float_inc} {:instruction integer_add} {:instruction integer_add} {:instruction float_inc} {:instruction integer_add} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_add} {:instruction float_inc} {:instruction float_inc} {:instruction integer_add} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_add} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_add} {:instruction float_inc} {:instruction float_inc} {:instruction integer_max} {:instruction float_inc} {:instruction float_dup_times} {:instruction float_rot} {:instruction float_stackdepth} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_add} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_add} {:instruction float_inc} {:instruction float_inc} {:instruction integer_max} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction 25} {:instruction float_stackdepth} {:instruction float_inc} {:instruction float_dup_times} {:instruction float_yank} {:instruction float_dup_times} {:instruction float_stackdepth} {:instruction float_inc} {:instruction float_dup_times} {:instruction float_shove} {:instruction float_dup_times} {:instruction float_yank} {:instruction float_dup_times} {:instruction integer_swap} {:instruction 25} {:instruction integer_flush} {:instruction integer_add} {:instruction integer_swap} {:instruction print_integer} {:instruction 76.04740319597805} {:instruction float_rot} {:instruction float_dup_times} {:instruction float_rot} {:instruction integer_shove} {:instruction float_inc} {:instruction float_dec} {:instruction float_inc} {:instruction tagged_852} {:instruction float_rot} {:instruction integer_shove} {:instruction integer_flush} {:instruction float_sub} {:instruction float_rot} {:instruction integer_sub} {:instruction float_inc} {:instruction integer_swap} {:instruction integer_min} {:instruction print_float} {:instruction integer_dec} {:instruction integer_stackdepth} {:instruction float_yank} {:instruction integer_stackdepth} {:instruction integer_dup} {:instruction in1})
Best program: (float_mod float_pop integer_max integer_flush in1 in1 float_stackdepth in2 integer_add float_inc integer_add float_inc float_inc integer_max float_inc integer_add float_inc integer_add integer_add float_inc integer_add float_inc float_inc float_inc integer_add float_inc float_inc integer_add float_inc float_inc float_inc float_inc integer_add float_inc float_inc float_inc integer_add float_inc float_inc integer_max float_inc float_dup_times float_rot float_stackdepth float_inc float_inc float_inc float_inc integer_add float_inc float_inc float_inc float_inc float_inc float_inc float_inc integer_add float_inc float_inc integer_max float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc 25 float_stackdepth float_inc float_dup_times float_yank float_dup_times float_stackdepth float_inc float_dup_times float_shove float_dup_times float_yank float_dup_times integer_swap 25 integer_flush integer_add integer_swap print_integer 76.04740319597805 float_rot float_dup_times float_rot integer_shove float_inc float_dec float_inc tagged_852 float_rot integer_shove integer_flush float_sub float_rot integer_sub float_inc integer_swap integer_min print_float integer_dec integer_stackdepth float_yank integer_stackdepth integer_dup in1)
Errors: [29.9526 8 39.0 2 15.9526 9 34.0474 9 31.0 2 12.9526 8 21.0474 9 7.0 2 20.0474 9 2.0 1 7.0 3 3.0474 8 18.0 2 4.0 2 40.0 1 6.9526 8 7.0 1 45.0 10 37.9526 10 3.0 1 38.0 3 19.0 2 12.0 2 3.9526 7 13.0 2]
Total: 591.9052
Mean: 11.838104
Genome size: 112
Size: 113
Percent parens: 0.009
--- Population Statistics ---
Average total errors in population: 3221.296282300001
Median total errors in population: 730.9739999999999
Error averages by case: (129.0584291999995 10.637 134.6431029 4.382 111.8292094999996 8.764 138.3878636000008 9.558 130.01712840000002 3.996 136.11326219999944 10.417 110.8442451000007 9.286 106.98135829999978 4.512 110.93805240000036 9.962 130.0588800000011 7.679 113.47621770000003 4.099 122.2416483000005 10.346 106.53793589999998 4.031 106.74956490000002 3.738 153.40937709999997 4.274 111.66275609999964 10.528 113.36536150000005 8.359 125.3720156999996 10.313 132.77065059999913 10.887 94.59873959999999 4.634 145.08485800000008 4.781 105.28749549999989 4.12 115.98866930000057 7.355 128.16809249999994 9.442 127.43036800000003 4.181)
Error minima by case: (0.0197 8 0.1573 1 0.0101 1 0.3539 1 2.6808 1 0.0817 1 1.7946 1 0.0 0 2.9183 1 0.0 0 1.0 1 0.0474 1 0.0 0 0.0 0 14.9183 1 0.0817 2 0.3748 1 0.0172 3 13.7603 3 0.0 0 9.1931 2 0.0 0 1.0 1 0.0474 2 0.0 0)
Average genome size in population (length): 115.926
Average program size in population (points): 116.926
Average percent parens in population: 0.009
Minimum age in population: 110.1053086447779
Maximum age in population: 114.1981897076187
Average age in population: 112.2557619056237
Median age in population: 112.3073041160464
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 7
Genome diversity (% unique Plush genomes):	 0.912
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 7
Syntactic diversity (% unique Push programs):	 0.912
Total error diversity:				 0.696
Error (vector) diversity:			 0.739
Behavioral diversity:				 0.74
--- Run Statistics ---
Number of program evaluations used so far: 79000
Number of point (instruction) evaluations so far: 141485450
--- Timings ---
Current time: 1529616220857 milliseconds
Total Time:         285.1 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       104.9 seconds, 36.8%
Fitness Testing:    141.7 seconds, 49.7%
Report:              38.3 seconds, 13.4%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 78
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 79
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 79
;;******************************
;; -*- Number IO problem report - generation 79
Test total error for best: 28136.571900000028
Test mean error for best: 14.06829
;;------------------------------
Outputs of best individual on training cases:
Correct output: -74.6179542037 | Program output: -42.5362548664
Correct output: 78.7609586813  | Program output: 44.7609586813 
Correct output: 3.0100598709   | Program output: 21.0917592082 
Correct output: -99.2368061293 | Program output: -131.155106792
Correct output: 88.6808415603  | Program output: 62.6808415603 
Correct output: -151.1060419578 | Program output: -136.0243426204
Correct output: 56.004616184   | Program output: 37.0863155213 
Correct output: 33.520660154   | Program output: 31.520660154  
Correct output: 42.238861085   | Program output: 24.3205604224 
Correct output: -49.0227893765 | Program output: -42.0227893765
Correct output: 103.4057483059 | Program output: 97.4057483059 
Correct output: -106.1378273779 | Program output: -107.0561280406
Correct output: 37.9625599991  | Program output: 60.9625599991 
Correct output: 71.9208193203  | Program output: 67.9208193203 
Correct output: 173.5348464317 | Program output: 138.5348464317
Correct output: -77.0615185935 | Program output: -67.9798192561
Correct output: -20.7643622555 | Program output: -26.7643622555
Correct output: 1.9827630815   | Program output: -38.0172369185
Correct output: -39.1198682611 | Program output: 0.9618310763  
Correct output: 1.1392376036   | Program output: 5.1392376036  
Correct output: 129.1930977679 | Program output: 96.1930977679 
Correct output: 26.7496211861  | Program output: 50.7496211861 
Correct output: -11.2984801384 | Program output: -18.2984801384
Correct output: -136.1442960385 | Program output: -130.0625967012
Correct output: 143.0911996605 | Program output: 135.0911996605
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_mod} {:instruction float_pop} {:instruction integer_max} {:instruction integer_flush} {:instruction in1} {:instruction in1} {:instruction float_stackdepth} {:instruction in2} {:instruction integer_add} {:instruction float_inc} {:instruction integer_add} {:instruction float_inc} {:instruction float_inc} {:instruction integer_max} {:instruction float_inc} {:instruction integer_add} {:instruction float_inc} {:instruction integer_add} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_add} {:instruction float_inc} {:instruction integer_add} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_add} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_add} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_add} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_add} {:instruction float_inc} {:instruction float_inc} {:instruction integer_max} {:instruction float_inc} {:instruction float_dup_times} {:instruction float_rot} {:instruction float_stackdepth} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_add} {:instruction float_inc} {:instruction float_rot} {:instruction float_stackdepth} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_div} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_add} {:instruction float_inc} {:instruction float_inc} {:instruction integer_max} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction 25} {:instruction float_stackdepth} {:instruction float_inc} {:instruction float_inc} {:instruction 25} {:instruction float_stackdepth} {:instruction float_inc} {:instruction float_dup_times} {:instruction float_yank} {:instruction float_dup_times} {:instruction float_stackdepth} {:instruction float_inc} {:instruction float_dup_times} {:instruction float_yank} {:instruction float_min} {:instruction float_stackdepth} {:instruction float_inc} {:instruction float_dup_times} {:instruction float_yank} {:instruction float_dup_times} {:instruction integer_dec} {:instruction 25} {:instruction integer_flush} {:instruction integer_add} {:instruction float_yank} {:instruction integer_swap} {:instruction 25} {:instruction integer_flush} {:instruction integer_add} {:instruction integer_swap} {:instruction print_integer} {:instruction 77.91830066263515} {:instruction float_rot} {:instruction float_dup_times} {:instruction float_rot} {:instruction integer_shove} {:instruction float_inc} {:instruction float_dec} {:instruction float_inc} {:instruction float_sub} {:instruction float_rot} {:instruction integer_shove} {:instruction integer_flush} {:instruction float_sub} {:instruction float_rot} {:instruction integer_add} {:instruction float_inc} {:instruction integer_swap} {:instruction integer_min} {:instruction print_float} {:instruction float_rot} {:instruction integer_flush} {:instruction float_yank} {:instruction float_div} {:instruction float_mult} {:instruction integer_shove} {:instruction float_dup_times} {:instruction float_div} {:instruction float_mult})
Best program: (float_mod float_pop integer_max integer_flush in1 in1 float_stackdepth in2 integer_add float_inc integer_add float_inc float_inc integer_max float_inc integer_add float_inc integer_add float_inc float_inc float_inc float_inc integer_add float_inc integer_add float_inc float_inc float_inc float_inc integer_add float_inc float_inc float_inc integer_add float_inc float_inc float_inc float_inc integer_add float_inc float_inc float_inc integer_add float_inc float_inc integer_max float_inc float_dup_times float_rot float_stackdepth float_inc float_inc float_inc float_inc integer_add float_inc float_rot float_stackdepth float_inc float_inc float_inc float_inc float_inc float_inc integer_div float_inc float_inc float_inc float_inc float_inc float_inc integer_add float_inc float_inc integer_max float_inc float_inc float_inc 25 float_stackdepth float_inc float_inc 25 float_stackdepth float_inc float_dup_times float_yank float_dup_times float_stackdepth float_inc float_dup_times float_yank float_min float_stackdepth float_inc float_dup_times float_yank float_dup_times integer_dec 25 integer_flush integer_add float_yank integer_swap 25 integer_flush integer_add integer_swap print_integer 77.91830066263515 float_rot float_dup_times float_rot integer_shove float_inc float_dec float_inc float_sub float_rot integer_shove integer_flush float_sub float_rot integer_add float_inc integer_swap integer_min print_float float_rot integer_flush float_yank float_div float_mult integer_shove float_dup_times float_div float_mult)
Errors: [32.0817 10 34.0 2 18.0817 9 31.9183 10 26.0 2 15.0817 11 18.9183 10 2.0 1 17.9183 11 7.0 1 6.0 3 0.9183 10 23.0 2 4.0 2 35.0 2 9.0817 10 6.0 1 40.0 10 40.0817 11 4.0 1 33.0 3 24.0 2 7.0 1 6.0817 9 8.0 2]
Total: 585.1633999999999
Mean: 11.703268
Genome size: 137
Size: 138
Percent parens: 0.007
--- Population Statistics ---
Average total errors in population: 3700.0185329999995
Median total errors in population: 790.1378500000001
Error averages by case: (146.5451056 10.688 152.8090371 4.557 125.73594709999949 8.561 151.8469114000002 9.225 150.1037851 4.211 153.60987159999993 10.019 122.86824600000077 9.053 125.12624999999994 4.764 123.99217340000044 9.639 147.8464595000008 6.294 137.17484030000008 4.385 138.9051369000003 10.056 128.28925660000004 4.241 128.9698994000001 3.979 175.96930829999997 4.476 131.0914070999996 10.364 131.06704860000005 7.073 158.17077809999978 10.404 148.00348429999977 11.054 116.1331057 4.472 166.6061167000001 4.964 124.46966829999988 4.246 141.96212310000035 6.164 145.20382800000007 9.173 151.0837448 4.373)
Error minima by case: (0.072 8 0.1573 1 0.0101 1 1.0817 1 1.3192 1 0.0474 1 1.9183 1 0.0 0 0.9183 1 0.0 0 0.0 0 0.0474 2 0.0 0 0.0 0 5.0964 1 0.0474 1 0.0 0 0.8537 8 6.2779 8 0.0 0 1.1931 2 0.0 0 0.2168 1 0.0474 2 2.0 1)
Average genome size in population (length): 116.844
Average program size in population (points): 117.844
Average percent parens in population: 0.009
Minimum age in population: 111.5145301777306
Maximum age in population: 115.6623126689877
Average age in population: 113.5848027121758
Median age in population: 113.6057360852387
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 7
Genome diversity (% unique Plush genomes):	 0.94
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 7
Syntactic diversity (% unique Push programs):	 0.94
Total error diversity:				 0.719
Error (vector) diversity:			 0.774
Behavioral diversity:				 0.776
--- Run Statistics ---
Number of program evaluations used so far: 80000
Number of point (instruction) evaluations so far: 144406600
--- Timings ---
Current time: 1529616225726 milliseconds
Total Time:         289.8 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       106.3 seconds, 36.7%
Fitness Testing:    144.4 seconds, 49.8%
Report:              39.0 seconds, 13.5%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 79
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 80
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 80
;;******************************
;; -*- Number IO problem report - generation 80
Test total error for best: 29379.735399999958
Test mean error for best: 14.68987
;;------------------------------
Outputs of best individual on training cases:
Correct output: -74.6179542037 | Program output: -53.6653573997
Correct output: 78.7609586813  | Program output: 42.7609586813 
Correct output: 3.0100598709   | Program output: 9.9626566749  
Correct output: -99.2368061293 | Program output: -142.2842093253
Correct output: 88.6808415603  | Program output: 60.6808415603 
Correct output: -151.1060419578 | Program output: -147.1534451538
Correct output: 56.004616184   | Program output: 25.957212988  
Correct output: 33.520660154   | Program output: 29.520660154  
Correct output: 42.238861085   | Program output: 13.191457889  
Correct output: -49.0227893765 | Program output: -44.0227893765
Correct output: 103.4057483059 | Program output: 102.4057483059
Correct output: -106.1378273779 | Program output: -118.1852305739
Correct output: 37.9625599991  | Program output: 58.9625599991 
Correct output: 71.9208193203  | Program output: 73.9208193203 
Correct output: 173.5348464317 | Program output: 136.5348464317
Correct output: -77.0615185935 | Program output: -79.1089217895
Correct output: -20.7643622555 | Program output: -21.7643622555
Correct output: 1.9827630815   | Program output: -40.0172369185
Correct output: -39.1198682611 | Program output: -10.1672714571
Correct output: 1.1392376036   | Program output: 10.1392376036 
Correct output: 129.1930977679 | Program output: 94.1930977679 
Correct output: 26.7496211861  | Program output: 48.7496211861 
Correct output: -11.2984801384 | Program output: -20.2984801384
Correct output: -136.1442960385 | Program output: -141.1916992345
Correct output: 143.0911996605 | Program output: 133.0911996605
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_mod} {:instruction float_pop} {:instruction integer_mod} {:instruction integer_flush} {:instruction in1} {:instruction in1} {:instruction float_stackdepth} {:instruction in2} {:instruction integer_add} {:instruction float_inc} {:instruction integer_add} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_add} {:instruction float_inc} {:instruction float_inc} {:instruction integer_add} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_add} {:instruction integer_sub} {:instruction integer_max} {:instruction float_rot} {:instruction integer_add} {:instruction float_inc} {:instruction integer_add} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_add} {:instruction float_inc} {:instruction integer_yank} {:instruction integer_add} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_add} {:instruction float_inc} {:instruction float_inc} {:instruction integer_max} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_dup_times} {:instruction float_shove} {:instruction float_stackdepth} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_add} {:instruction float_inc} {:instruction float_inc} {:instruction integer_max} {:instruction float_inc} {:instruction float_dup} {:instruction float_inc} {:instruction 25} {:instruction float_stackdepth} {:instruction float_inc} {:instruction float_dup_times} {:instruction float_yank} {:instruction float_inc} {:instruction integer_add} {:instruction integer_yankdup} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_add} {:instruction integer_yankdup} {:instruction float_inc} {:instruction integer_max} {:instruction float_dup_times} {:instruction float_max} {:instruction float_dup_times} {:instruction float_stackdepth} {:instruction float_inc} {:instruction float_dup_times} {:instruction float_shove} {:instruction float_dup_times} {:instruction float_yank} {:instruction float_dup_times} {:instruction integer_swap} {:instruction 25} {:instruction integer_flush} {:instruction integer_add} {:instruction integer_swap} {:instruction print_integer} {:instruction 76.04740319597805} {:instruction float_rot} {:instruction float_dup_times} {:instruction float_rot} {:instruction integer_shove} {:instruction float_inc} {:instruction float_dec} {:instruction float_inc} {:instruction float_sub} {:instruction float_rot} {:instruction integer_shove} {:instruction float_rot} {:instruction float_sub} {:instruction float_rot} {:instruction integer_sub} {:instruction float_inc} {:instruction integer_swap} {:instruction integer_min} {:instruction print_float} {:instruction integer_dec} {:instruction integer_stackdepth} {:instruction float_yank} {:instruction float_div} {:instruction float_mult} {:instruction integer_shove} {:instruction float_dup_times} {:instruction float_div} {:instruction float_pop})
Best program: (float_mod float_pop integer_mod integer_flush in1 in1 float_stackdepth in2 integer_add float_inc integer_add float_inc float_inc float_inc integer_add float_inc float_inc integer_add float_inc float_inc float_inc integer_add integer_sub integer_max float_rot integer_add float_inc integer_add float_inc float_inc float_inc float_inc float_inc integer_add float_inc integer_yank integer_add float_inc float_inc float_inc float_inc float_inc integer_add float_inc float_inc integer_max float_inc float_inc float_inc float_inc float_dup_times float_shove float_stackdepth float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc integer_add float_inc float_inc integer_max float_inc float_dup float_inc 25 float_stackdepth float_inc float_dup_times float_yank float_inc integer_add integer_yankdup float_inc float_inc float_inc float_inc integer_add integer_yankdup float_inc integer_max float_dup_times float_max float_dup_times float_stackdepth float_inc float_dup_times float_shove float_dup_times float_yank float_dup_times integer_swap 25 integer_flush integer_add integer_swap print_integer 76.04740319597805 float_rot float_dup_times float_rot integer_shove float_inc float_dec float_inc float_sub float_rot integer_shove float_rot float_sub float_rot integer_sub float_inc integer_swap integer_min print_float integer_dec integer_stackdepth float_yank float_div float_mult integer_shove float_dup_times float_div float_pop)
Errors: [20.9526 9 36.0 2 6.9526 8 43.0474 9 28.0 2 3.9526 8 30.0474 9 4.0 2 29.0474 10 5.0 1 1.0 1 12.0474 9 21.0 2 2.0 1 37.0 2 2.0474 8 1.0 1 42.0 10 28.9526 10 9.0 1 35.0 3 22.0 2 9.0 2 5.0474 8 10.0 1]
Total: 565.0948
Mean: 11.301896
Genome size: 128
Size: 129
Percent parens: 0.008
--- Population Statistics ---
Average total errors in population: 3245.815276399999
Median total errors in population: 716.2793499999999
Error averages by case: (132.53578699999989 10.491 135.39041820000003 4.085 110.30844650000003 8.467 137.34324500000045 9.046 133.45236710000003 3.823 136.17462519999987 9.73 108.21018380000015 8.995 107.8820344999999 4.207 108.13764069999996 9.579 120.86125230000017 4.767 116.46156770000006 3.901 122.86767050000023 9.79 112.50430359999999 3.889 109.55169450000008 3.609 152.71454559999995 4.023 116.4296823 10.098 112.68246720000002 5.756 141.77749819999988 10.299 133.98338729999966 10.992 97.58634660000003 3.926 146.7879669 4.589 109.73980669999997 3.785 121.2643508 4.806 128.27245140000002 8.891 127.40153680000003 3.95)
Error minima by case: (0.3213 7 0.1573 1 0.0771 1 11.9183 1 1.3192 1 0.0474 1 0.0817 1 0.0 0 1.0817 1 0.0 0 0.0 0 0.0474 1 0.0 0 1.0 1 26.0 1 0.0474 1 0.0 0 0.0172 7 1.2016 8 0.0 0 0.1931 2 0.0 0 0.2985 1 0.0474 2 0.0 0)
Average genome size in population (length): 117.527
Average program size in population (points): 118.527
Average percent parens in population: 0.008
Minimum age in population: 112.9223320764058
Maximum age in population: 117.1724663023045
Average age in population: 114.9847631421204
Median age in population: 115.0040335022466
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 8
Genome diversity (% unique Plush genomes):	 0.93
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 8
Syntactic diversity (% unique Push programs):	 0.93
Total error diversity:				 0.709
Error (vector) diversity:			 0.774
Behavioral diversity:				 0.775
--- Run Statistics ---
Number of program evaluations used so far: 81000
Number of point (instruction) evaluations so far: 147344800
--- Timings ---
Current time: 1529616230451 milliseconds
Total Time:         294.7 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       107.7 seconds, 36.5%
Fitness Testing:    147.0 seconds, 49.9%
Report:              39.9 seconds, 13.5%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 80
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 81
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 81
;;******************************
;; -*- Number IO problem report - generation 81
Test total error for best: 27664.18499999999
Test mean error for best: 13.83209
;;------------------------------
Outputs of best individual on training cases:
Correct output: -74.6179542037 | Program output: -44.6653573997
Correct output: 78.7609586813  | Program output: 46.7609586813 
Correct output: 3.0100598709   | Program output: 18.9626566749 
Correct output: -99.2368061293 | Program output: -133.2842093253
Correct output: 88.6808415603  | Program output: 64.6808415603 
Correct output: -151.1060419578 | Program output: -138.1534451538
Correct output: 56.004616184   | Program output: 34.957212988  
Correct output: 33.520660154   | Program output: 33.520660154  
Correct output: 42.238861085   | Program output: 22.191457889  
Correct output: -49.0227893765 | Program output: -40.0227893765
Correct output: 103.4057483059 | Program output: 96.4057483059 
Correct output: -106.1378273779 | Program output: -109.1852305739
Correct output: 37.9625599991  | Program output: 62.9625599991 
Correct output: 71.9208193203  | Program output: 67.9208193203 
Correct output: 173.5348464317 | Program output: 140.5348464317
Correct output: -77.0615185935 | Program output: -70.1089217895
Correct output: -20.7643622555 | Program output: -27.7643622555
Correct output: 1.9827630815   | Program output: -36.0172369185
Correct output: -39.1198682611 | Program output: -1.1672714571 
Correct output: 1.1392376036   | Program output: 4.1392376036  
Correct output: 129.1930977679 | Program output: 98.1930977679 
Correct output: 26.7496211861  | Program output: 52.7496211861 
Correct output: -11.2984801384 | Program output: -16.2984801384
Correct output: -136.1442960385 | Program output: -132.1916992345
Correct output: 143.0911996605 | Program output: 137.0911996605
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_sin} {:instruction float_pop} {:instruction integer_max} {:instruction integer_flush} {:instruction in1} {:instruction in1} {:instruction float_stackdepth} {:instruction in2} {:instruction integer_add} {:instruction float_inc} {:instruction integer_add} {:instruction float_inc} {:instruction float_inc} {:instruction integer_max} {:instruction float_inc} {:instruction integer_add} {:instruction float_inc} {:instruction integer_add} {:instruction integer_add} {:instruction float_inc} {:instruction float_inc} {:instruction integer_add} {:instruction float_inc} {:instruction float_inc} {:instruction integer_add} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_add} {:instruction float_inc} {:instruction integer_add} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_add} {:instruction float_inc} {:instruction float_inc} {:instruction integer_add} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_add} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_add} {:instruction float_inc} {:instruction float_inc} {:instruction integer_max} {:instruction float_inc} {:instruction float_dup_times} {:instruction float_rot} {:instruction float_stackdepth} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_add} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_add} {:instruction float_inc} {:instruction float_inc} {:instruction integer_max} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction 25} {:instruction float_stackdepth} {:instruction float_inc} {:instruction float_dup_times} {:instruction float_yank} {:instruction float_dup_times} {:instruction float_stackdepth} {:instruction float_inc} {:instruction float_dup_times} {:instruction float_shove} {:instruction float_dup_times} {:instruction float_yank} {:instruction float_dup_times} {:instruction integer_swap} {:instruction 25} {:instruction integer_flush} {:instruction integer_add} {:instruction integer_swap} {:instruction print_integer} {:instruction 76.04740319597805} {:instruction float_rot} {:instruction float_dup_times} {:instruction float_rot} {:instruction integer_shove} {:instruction float_inc} {:instruction float_dec} {:instruction float_inc} {:instruction tagged_852} {:instruction float_rot} {:instruction integer_shove} {:instruction integer_flush} {:instruction float_sub} {:instruction float_rot} {:instruction integer_sub} {:instruction float_inc} {:instruction integer_swap} {:instruction integer_min} {:instruction print_float} {:instruction integer_dec} {:instruction integer_stackdepth} {:instruction float_yank} {:instruction integer_stackdepth} {:instruction integer_dup} {:instruction in1})
Best program: (float_sin float_pop integer_max integer_flush in1 in1 float_stackdepth in2 integer_add float_inc integer_add float_inc float_inc integer_max float_inc integer_add float_inc integer_add integer_add float_inc float_inc integer_add float_inc float_inc integer_add float_inc float_inc float_inc integer_add float_inc integer_add float_inc float_inc float_inc integer_add float_inc float_inc integer_add float_inc float_inc float_inc float_inc integer_add float_inc float_inc float_inc integer_add float_inc float_inc integer_max float_inc float_dup_times float_rot float_stackdepth float_inc float_inc float_inc float_inc integer_add float_inc float_inc float_inc float_inc float_inc float_inc float_inc integer_add float_inc float_inc integer_max float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc 25 float_stackdepth float_inc float_dup_times float_yank float_dup_times float_stackdepth float_inc float_dup_times float_shove float_dup_times float_yank float_dup_times integer_swap 25 integer_flush integer_add integer_swap print_integer 76.04740319597805 float_rot float_dup_times float_rot integer_shove float_inc float_dec float_inc tagged_852 float_rot integer_shove integer_flush float_sub float_rot integer_sub float_inc integer_swap integer_min print_float integer_dec integer_stackdepth float_yank integer_stackdepth integer_dup in1)
Errors: [29.9526 8 32.0 2 15.9526 9 34.0474 9 24.0 2 12.9526 8 21.0474 9 0.0 0 20.0474 9 9.0 1 7.0 3 3.0474 8 25.0 2 4.0 2 33.0 2 6.9526 8 7.0 1 38.0 10 37.9526 10 3.0 1 31.0 3 26.0 2 5.0 1 3.9526 7 6.0 2]
Total: 554.9052
Mean: 11.098104
Genome size: 122
Size: 123
Percent parens: 0.008
--- Population Statistics ---
Average total errors in population: 3271.470355399999
Median total errors in population: 739.28265
Error averages by case: (136.41522949999967 10.536 135.18369400000003 4.118 113.80828429999964 8.516 138.94776210000052 9.058 131.1457314 3.783 139.79487529999955 9.663 110.78393840000038 8.979 108.19341269999998 4.295 110.70512280000021 9.565 119.07917850000011 3.935 114.81844130000005 3.821 125.06775900000044 9.688 113.36743279999993 3.833 108.96705670000004 3.569 150.2831299 4.04 119.84696139999983 10.122 114.82858339999999 4.74 146.4953851 10.372 137.55800929999944 11.179 97.19817650000006 3.818 144.568572 4.564 111.25458479999999 3.733 122.09603820000007 4.127 131.61037789999978 8.907 126.47961810000005 4.012)
Error minima by case: (0.8762 8 0.1573 1 0.0037 1 9.9183 1 0.3192 1 0.0474 1 0.9183 1 0.0 0 0.0474 1 0.0 0 0.0 0 0.0474 2 0.0 0 0.0 0 26.0 1 0.0202 1 0.0 0 0.1119 7 7.2032 7 0.0 0 1.689 2 0.0 0 0.0 0 0.0474 1 0.0 0)
Average genome size in population (length): 119.103
Average program size in population (points): 120.103
Average percent parens in population: 0.008
Minimum age in population: 114.5001894779982
Maximum age in population: 118.5203661860132
Average age in population: 116.4239008962639
Median age in population: 116.4677801350936
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 6
Genome diversity (% unique Plush genomes):	 0.947
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 6
Syntactic diversity (% unique Push programs):	 0.947
Total error diversity:				 0.711
Error (vector) diversity:			 0.793
Behavioral diversity:				 0.793
--- Run Statistics ---
Number of program evaluations used so far: 82000
Number of point (instruction) evaluations so far: 150322400
--- Timings ---
Current time: 1529616235160 milliseconds
Total Time:         299.4 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       109.1 seconds, 36.4%
Fitness Testing:    149.7 seconds, 50.0%
Report:              40.6 seconds, 13.5%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 81
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 82
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 82
;;******************************
;; -*- Number IO problem report - generation 82
Test total error for best: 27673.18499999999
Test mean error for best: 13.83659
;;------------------------------
Outputs of best individual on training cases:
Correct output: -74.6179542037 | Program output: -44.6653573997
Correct output: 78.7609586813  | Program output: 47.7609586813 
Correct output: 3.0100598709   | Program output: 18.9626566749 
Correct output: -99.2368061293 | Program output: -133.2842093253
Correct output: 88.6808415603  | Program output: 65.6808415603 
Correct output: -151.1060419578 | Program output: -138.1534451538
Correct output: 56.004616184   | Program output: 34.957212988  
Correct output: 33.520660154   | Program output: 34.520660154  
Correct output: 42.238861085   | Program output: 22.191457889  
Correct output: -49.0227893765 | Program output: -39.0227893765
Correct output: 103.4057483059 | Program output: 97.4057483059 
Correct output: -106.1378273779 | Program output: -109.1852305739
Correct output: 37.9625599991  | Program output: 63.9625599991 
Correct output: 71.9208193203  | Program output: 68.9208193203 
Correct output: 173.5348464317 | Program output: 141.5348464317
Correct output: -77.0615185935 | Program output: -70.1089217895
Correct output: -20.7643622555 | Program output: -26.7643622555
Correct output: 1.9827630815   | Program output: -35.0172369185
Correct output: -39.1198682611 | Program output: -1.1672714571 
Correct output: 1.1392376036   | Program output: 5.1392376036  
Correct output: 129.1930977679 | Program output: 99.1930977679 
Correct output: 26.7496211861  | Program output: 53.7496211861 
Correct output: -11.2984801384 | Program output: -15.2984801384
Correct output: -136.1442960385 | Program output: -132.1916992345
Correct output: 143.0911996605 | Program output: 138.0911996605
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_mod} {:instruction float_pop} {:instruction integer_max} {:instruction integer_flush} {:instruction in1} {:instruction in1} {:instruction float_stackdepth} {:instruction in2} {:instruction integer_add} {:instruction float_inc} {:instruction integer_add} {:instruction float_inc} {:instruction float_inc} {:instruction integer_max} {:instruction float_inc} {:instruction integer_add} {:instruction float_inc} {:instruction integer_add} {:instruction integer_add} {:instruction float_inc} {:instruction integer_add} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_add} {:instruction float_inc} {:instruction float_inc} {:instruction integer_add} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_add} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_add} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_max} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_dup_times} {:instruction float_rot} {:instruction float_stackdepth} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_min} {:instruction float_inc} {:instruction float_inc} {:instruction integer_max} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction 25} {:instruction float_stackdepth} {:instruction float_inc} {:instruction float_dup_times} {:instruction float_yank} {:instruction float_dup_times} {:instruction float_stackdepth} {:instruction float_inc} {:instruction float_dup_times} {:instruction float_yank} {:instruction float_min} {:instruction float_stackdepth} {:instruction float_inc} {:instruction float_dup_times} {:instruction float_yank} {:instruction float_dup_times} {:instruction integer_add} {:instruction 25} {:instruction integer_flush} {:instruction integer_add} {:instruction float_yank} {:instruction float_dup_times} {:instruction integer_swap} {:instruction print_integer} {:instruction 76.04740319597805} {:instruction float_rot} {:instruction float_dup_times} {:instruction float_rot} {:instruction integer_shove} {:instruction float_inc} {:instruction float_dec} {:instruction float_inc} {:instruction float_sub} {:instruction float_rot} {:instruction integer_shove} {:instruction float_rot} {:instruction float_sub} {:instruction float_rot} {:instruction integer_sub} {:instruction float_inc} {:instruction integer_swap} {:instruction integer_min} {:instruction print_float} {:instruction integer_dec} {:instruction integer_stackdepth} {:instruction float_yank} {:instruction float_div} {:instruction float_mult} {:instruction integer_shove} {:instruction float_dup_times} {:instruction float_div} {:instruction float_pop})
Best program: (float_mod float_pop integer_max integer_flush in1 in1 float_stackdepth in2 integer_add float_inc integer_add float_inc float_inc integer_max float_inc integer_add float_inc integer_add integer_add float_inc integer_add float_inc float_inc float_inc integer_add float_inc float_inc integer_add float_inc float_inc float_inc float_inc integer_add float_inc float_inc float_inc integer_add float_inc float_inc float_inc float_inc float_inc float_inc float_inc integer_max float_inc float_inc float_inc float_inc float_dup_times float_rot float_stackdepth float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc integer_min float_inc float_inc integer_max float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc 25 float_stackdepth float_inc float_dup_times float_yank float_dup_times float_stackdepth float_inc float_dup_times float_yank float_min float_stackdepth float_inc float_dup_times float_yank float_dup_times integer_add 25 integer_flush integer_add float_yank float_dup_times integer_swap print_integer 76.04740319597805 float_rot float_dup_times float_rot integer_shove float_inc float_dec float_inc float_sub float_rot integer_shove float_rot float_sub float_rot integer_sub float_inc integer_swap integer_min print_float integer_dec integer_stackdepth float_yank float_div float_mult integer_shove float_dup_times float_div float_pop)
Errors: [29.9526 8 31.0 2 15.9526 9 34.0474 9 23.0 2 12.9526 8 21.0474 9 1.0 1 20.0474 9 10.0 1 6.0 3 3.0474 8 26.0 2 3.0 2 32.0 2 6.9526 8 6.0 1 37.0 10 37.9526 10 4.0 1 30.0 2 27.0 2 4.0 1 3.9526 7 5.0 2]
Total: 549.9052
Mean: 10.998104
Genome size: 126
Size: 127
Percent parens: 0.008
--- Population Statistics ---
Average total errors in population: 3252.7180819999994
Median total errors in population: 700.5342999999999
Error averages by case: (138.32227599999982 10.391 131.08743040000013 4.101 113.82787589999981 8.433 140.9449333000003 8.856 126.87095499999995 3.712 144.1116446999998 9.394 108.90958890000022 8.804 106.3530115 4.103 107.8689244000001 9.341 117.19763410000012 3.581 117.02063140000001 3.879 128.31956750000026 9.392 112.27599909999994 3.738 108.60310040000009 3.514 148.0641435999999 3.921 121.46400609999998 9.999 113.88020099999999 4.506 145.46617470000007 10.341 136.50188419999958 11.269 96.72444630000012 3.593 140.28887390000006 4.467 110.31848259999998 3.663 119.66209770000006 3.783 135.5029799999998 8.686 123.77621929999997 3.888)
Error minima by case: (1.4294 7 0.1573 1 0.0101 1 9.0474 1 1.6808 1 0.0817 2 0.9183 1 0.0 0 0.0817 1 0.0 0 0.0 0 0.0474 1 0.0 0 0.0 0 23.0 1 0.0474 1 0.0 0 0.4611 8 12.9275 7 0.0 0 0.8069 2 0.0 0 0.0 0 0.0474 2 0.0 0)
Average genome size in population (length): 120.552
Average program size in population (points): 121.552
Average percent parens in population: 0.008
Minimum age in population: 115.5896638907181
Maximum age in population: 119.7701038249895
Average age in population: 117.8886537867455
Median age in population: 117.9280312291563
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 6
Genome diversity (% unique Plush genomes):	 0.934
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 6
Syntactic diversity (% unique Push programs):	 0.934
Total error diversity:				 0.685
Error (vector) diversity:			 0.763
Behavioral diversity:				 0.764
--- Run Statistics ---
Number of program evaluations used so far: 83000
Number of point (instruction) evaluations so far: 153336225
--- Timings ---
Current time: 1529616239974 milliseconds
Total Time:         304.2 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       110.4 seconds, 36.3%
Fitness Testing:    152.4 seconds, 50.1%
Report:              41.2 seconds, 13.6%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 82
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 83
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 83
;;******************************
;; -*- Number IO problem report - generation 83
Test total error for best: 27648.227799999982
Test mean error for best: 13.82411
;;------------------------------
Outputs of best individual on training cases:
Correct output: -74.6179542037 | Program output: -46.6653573997
Correct output: 78.7609586813  | Program output: 50.7609586813 
Correct output: 3.0100598709   | Program output: 16.9626566749 
Correct output: -99.2368061293 | Program output: -135.2842093253
Correct output: 88.6808415603  | Program output: 68.6808415603 
Correct output: -151.1060419578 | Program output: -140.1534451538
Correct output: 56.004616184   | Program output: 32.957212988  
Correct output: 33.520660154   | Program output: 37.520660154  
Correct output: 42.238861085   | Program output: 20.191457889  
Correct output: -49.0227893765 | Program output: -36.0227893765
Correct output: 103.4057483059 | Program output: 97.4057483059 
Correct output: -106.1378273779 | Program output: -111.1852305739
Correct output: 37.9625599991  | Program output: 66.9625599991 
Correct output: 71.9208193203  | Program output: 68.9208193203 
Correct output: 173.5348464317 | Program output: 144.5348464317
Correct output: -77.0615185935 | Program output: -72.1089217895
Correct output: -20.7643622555 | Program output: -26.7643622555
Correct output: 1.9827630815   | Program output: -32.0172369185
Correct output: -39.1198682611 | Program output: -3.1672714571 
Correct output: 1.1392376036   | Program output: 5.1392376036  
Correct output: 129.1930977679 | Program output: 102.1930977679
Correct output: 26.7496211861  | Program output: 56.7496211861 
Correct output: -11.2984801384 | Program output: -12.2984801384
Correct output: -136.1442960385 | Program output: -134.1916992345
Correct output: 143.0911996605 | Program output: 141.0911996605
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_mod} {:instruction float_pop} {:instruction integer_max} {:instruction integer_flush} {:instruction in1} {:instruction in1} {:instruction float_stackdepth} {:instruction in2} {:instruction integer_add} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_max} {:instruction float_inc} {:instruction integer_add} {:instruction float_inc} {:instruction integer_add} {:instruction integer_add} {:instruction float_inc} {:instruction integer_add} {:instruction float_inc} {:instruction integer_add} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_add} {:instruction float_inc} {:instruction integer_add} {:instruction float_inc} {:instruction float_inc} {:instruction integer_add} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_add} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_add} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_max} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_dup_times} {:instruction float_rot} {:instruction float_stackdepth} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_min} {:instruction float_inc} {:instruction float_inc} {:instruction integer_max} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction 25} {:instruction float_stackdepth} {:instruction float_inc} {:instruction float_dup_times} {:instruction float_yank} {:instruction float_dup_times} {:instruction float_stackdepth} {:instruction float_inc} {:instruction float_dup_times} {:instruction float_yank} {:instruction float_min} {:instruction float_stackdepth} {:instruction float_inc} {:instruction float_dup_times} {:instruction float_yank} {:instruction float_dup_times} {:instruction integer_add} {:instruction 25} {:instruction integer_flush} {:instruction integer_add} {:instruction integer_swap} {:instruction print_integer} {:instruction 76.04740319597805} {:instruction float_rot} {:instruction float_inc} {:instruction float_rot} {:instruction integer_shove} {:instruction float_inc} {:instruction float_inc} {:instruction float_sub} {:instruction float_rot} {:instruction integer_shove} {:instruction float_rot} {:instruction float_sub} {:instruction float_rot} {:instruction integer_sub} {:instruction float_inc} {:instruction integer_swap} {:instruction integer_min} {:instruction print_float} {:instruction integer_dec} {:instruction integer_stackdepth} {:instruction float_yank} {:instruction float_div} {:instruction float_mult} {:instruction integer_shove} {:instruction float_dup_times} {:instruction float_div} {:instruction float_pop})
Best program: (float_mod float_pop integer_max integer_flush in1 in1 float_stackdepth in2 integer_add float_inc float_inc float_inc integer_max float_inc integer_add float_inc integer_add integer_add float_inc integer_add float_inc integer_add float_inc float_inc float_inc float_inc integer_add float_inc integer_add float_inc float_inc integer_add float_inc float_inc float_inc float_inc integer_add float_inc float_inc float_inc integer_add float_inc float_inc float_inc float_inc float_inc float_inc float_inc integer_max float_inc float_inc float_inc float_inc float_dup_times float_rot float_stackdepth float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc integer_min float_inc float_inc integer_max float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc 25 float_stackdepth float_inc float_dup_times float_yank float_dup_times float_stackdepth float_inc float_dup_times float_yank float_min float_stackdepth float_inc float_dup_times float_yank float_dup_times integer_add 25 integer_flush integer_add integer_swap print_integer 76.04740319597805 float_rot float_inc float_rot integer_shove float_inc float_inc float_sub float_rot integer_shove float_rot float_sub float_rot integer_sub float_inc integer_swap integer_min print_float integer_dec integer_stackdepth float_yank float_div float_mult integer_shove float_dup_times float_div float_pop)
Errors: [27.9526 9 28.0 2 13.9526 9 36.0474 9 20.0 1 10.9526 8 23.0474 9 4.0 1 22.0474 10 13.0 2 6.0 3 5.0474 9 29.0 2 3.0 2 29.0 2 4.9526 8 6.0 1 34.0 10 35.9526 9 4.0 1 27.0 2 30.0 1 1.0 1 1.9526 7 2.0 1]
Total: 536.9052
Mean: 10.738104
Genome size: 127
Size: 128
Percent parens: 0.008
--- Population Statistics ---
Average total errors in population: 2979.2627345
Median total errors in population: 728.2185
Error averages by case: (127.64035569999999 10.26 121.12283990000005 4.113 103.53455299999985 8.371 127.97162260000009 8.689 116.88659370000008 3.73 131.21247189999988 9.055 98.6210922000002 8.643 95.81605889999996 4.018 97.60639230000012 9.194 105.46420450000014 3.429 106.40113190000011 3.766 115.4304110000001 9.182 103.02034029999996 3.751 100.59198350000011 3.421 136.42530929999987 3.91 111.85005379999998 9.696 100.41000209999997 4.488 132.65327430000002 10.277 127.40622739999999 11.255 90.52576900000004 3.433 130.15648389999998 4.498 101.20877999999998 3.654 106.16379120000008 3.661 122.39329369999983 8.373 111.96369839999996 3.919)
Error minima by case: (1.1748 8 0.1573 1 0.0817 1 6.0474 1 0.6808 1 0.9183 2 0.9183 1 0.0 0 0.0817 1 0.0 0 0.0 0 0.0055 1 0.0 0 0.0 0 21.0 1 0.0474 1 0.0 0 0.0172 4 3.874 8 0.1392 1 0.8069 2 0.0 0 0.0 0 0.0474 1 0.0 0)
Average genome size in population (length): 122.291
Average program size in population (points): 123.291
Average percent parens in population: 0.008
Minimum age in population: 117.1907370335787
Maximum age in population: 121.3345368773055
Average age in population: 119.2933921139679
Median age in population: 119.3521771008392
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 7
Genome diversity (% unique Plush genomes):	 0.934
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 7
Syntactic diversity (% unique Push programs):	 0.934
Total error diversity:				 0.661
Error (vector) diversity:			 0.765
Behavioral diversity:				 0.765
--- Run Statistics ---
Number of program evaluations used so far: 84000
Number of point (instruction) evaluations so far: 156393550
--- Timings ---
Current time: 1529616244829 milliseconds
Total Time:         309.0 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       111.8 seconds, 36.2%
Fitness Testing:    155.2 seconds, 50.2%
Report:              42.0 seconds, 13.6%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 83
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 84
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 84
;;******************************
;; -*- Number IO problem report - generation 84
Test total error for best: 27654.227799999982
Test mean error for best: 13.82711
;;------------------------------
Outputs of best individual on training cases:
Correct output: -74.6179542037 | Program output: -46.6653573997
Correct output: 78.7609586813  | Program output: 51.7609586813 
Correct output: 3.0100598709   | Program output: 16.9626566749 
Correct output: -99.2368061293 | Program output: -135.2842093253
Correct output: 88.6808415603  | Program output: 69.6808415603 
Correct output: -151.1060419578 | Program output: -140.1534451538
Correct output: 56.004616184   | Program output: 32.957212988  
Correct output: 33.520660154   | Program output: 38.520660154  
Correct output: 42.238861085   | Program output: 20.191457889  
Correct output: -49.0227893765 | Program output: -35.0227893765
Correct output: 103.4057483059 | Program output: 97.4057483059 
Correct output: -106.1378273779 | Program output: -111.1852305739
Correct output: 37.9625599991  | Program output: 67.9625599991 
Correct output: 71.9208193203  | Program output: 68.9208193203 
Correct output: 173.5348464317 | Program output: 145.5348464317
Correct output: -77.0615185935 | Program output: -72.1089217895
Correct output: -20.7643622555 | Program output: -26.7643622555
Correct output: 1.9827630815   | Program output: -31.0172369185
Correct output: -39.1198682611 | Program output: -3.1672714571 
Correct output: 1.1392376036   | Program output: 5.1392376036  
Correct output: 129.1930977679 | Program output: 103.1930977679
Correct output: 26.7496211861  | Program output: 57.7496211861 
Correct output: -11.2984801384 | Program output: -11.2984801384
Correct output: -136.1442960385 | Program output: -134.1916992345
Correct output: 143.0911996605 | Program output: 142.0911996605
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_mod} {:instruction float_pop} {:instruction integer_max} {:instruction integer_flush} {:instruction in1} {:instruction in1} {:instruction float_stackdepth} {:instruction in2} {:instruction integer_add} {:instruction float_inc} {:instruction integer_add} {:instruction float_inc} {:instruction float_inc} {:instruction integer_max} {:instruction float_inc} {:instruction integer_add} {:instruction float_inc} {:instruction integer_add} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_add} {:instruction float_inc} {:instruction integer_add} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_add} {:instruction float_inc} {:instruction float_inc} {:instruction integer_add} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_add} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_add} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_max} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_dup_times} {:instruction float_rot} {:instruction float_stackdepth} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_min} {:instruction float_inc} {:instruction float_inc} {:instruction integer_max} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction 25} {:instruction float_stackdepth} {:instruction float_inc} {:instruction float_dup_times} {:instruction float_yank} {:instruction float_dup_times} {:instruction float_stackdepth} {:instruction float_inc} {:instruction float_dup_times} {:instruction float_yank} {:instruction float_min} {:instruction float_stackdepth} {:instruction float_inc} {:instruction float_dup_times} {:instruction float_yank} {:instruction float_dup_times} {:instruction integer_add} {:instruction 25} {:instruction integer_flush} {:instruction integer_add} {:instruction integer_swap} {:instruction print_integer} {:instruction 76.04740319597805} {:instruction float_rot} {:instruction float_inc} {:instruction float_rot} {:instruction integer_shove} {:instruction float_inc} {:instruction float_inc} {:instruction float_sub} {:instruction float_rot} {:instruction integer_shove} {:instruction float_rot} {:instruction float_sub} {:instruction float_rot} {:instruction integer_sub} {:instruction float_inc} {:instruction integer_swap} {:instruction integer_min} {:instruction print_float} {:instruction integer_dec} {:instruction integer_stackdepth} {:instruction float_yank} {:instruction float_div} {:instruction float_mult} {:instruction integer_shove} {:instruction float_dup_times} {:instruction float_div} {:instruction float_pop})
Best program: (float_mod float_pop integer_max integer_flush in1 in1 float_stackdepth in2 integer_add float_inc integer_add float_inc float_inc integer_max float_inc integer_add float_inc integer_add float_inc float_inc float_inc float_inc integer_add float_inc integer_add float_inc float_inc float_inc integer_add float_inc float_inc integer_add float_inc float_inc float_inc float_inc integer_add float_inc float_inc float_inc integer_add float_inc float_inc float_inc float_inc float_inc float_inc float_inc integer_max float_inc float_inc float_inc float_inc float_dup_times float_rot float_stackdepth float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc integer_min float_inc float_inc integer_max float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc 25 float_stackdepth float_inc float_dup_times float_yank float_dup_times float_stackdepth float_inc float_dup_times float_yank float_min float_stackdepth float_inc float_dup_times float_yank float_dup_times integer_add 25 integer_flush integer_add integer_swap print_integer 76.04740319597805 float_rot float_inc float_rot integer_shove float_inc float_inc float_sub float_rot integer_shove float_rot float_sub float_rot integer_sub float_inc integer_swap integer_min print_float integer_dec integer_stackdepth float_yank float_div float_mult integer_shove float_dup_times float_div float_pop)
Errors: [27.9526 9 27.0 2 13.9526 9 36.0474 9 19.0 2 10.9526 8 23.0474 9 5.0 1 22.0474 10 14.0 2 6.0 3 5.0474 9 30.0 1 3.0 2 28.0 2 4.9526 8 6.0 1 33.0 9 35.9526 9 4.0 1 26.0 2 31.0 2 0.0 0 1.9526 7 1.0 1]
Total: 532.9052
Mean: 10.658104
Genome size: 127
Size: 128
Percent parens: 0.008
--- Population Statistics ---
Average total errors in population: 3398.6012638999987
Median total errors in population: 678.4763
Error averages by case: (137.33739329999986 10.152 142.02416500000004 4.259 116.66512170000003 8.356 135.81386759999995 8.644 139.32747520000007 3.928 137.1459719999999 8.766 111.31156159999995 8.533 113.48757679999999 4.156 111.24674829999987 9.108 130.91467060000008 3.606 126.02598980000008 3.926 122.45106740000004 8.984 127.61121359999997 3.931 120.24346470000006 3.515 158.8150737 4.058 119.43685980000024 9.334 121.84774269999998 4.458 155.74679040000012 10.363 139.19796029999995 11.276 104.13991370000004 3.497 153.27061849999996 4.635 123.94708429999999 3.882 129.89459130000003 3.755 128.67636319999988 8.179 134.6729784 4.048)
Error minima by case: (0.537 8 0.1573 1 0.2135 1 1.0474 1 6.6334 1 0.0474 1 0.0817 1 0.0 0 0.0474 1 0.0 0 0.0 0 0.0055 1 0.0 0 0.0 0 18.4874 1 0.0474 1 0.0 0 0.0172 7 10.2871 9 0.1392 1 10.1931 2 0.0 0 0.0 0 0.0474 2 0.0 0)
Average genome size in population (length): 124.163
Average program size in population (points): 125.163
Average percent parens in population: 0.008
Minimum age in population: 118.1907370335787
Maximum age in population: 122.6369921889511
Average age in population: 120.5343653574823
Median age in population: 120.600157354785
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 8
Genome diversity (% unique Plush genomes):	 0.942
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 8
Syntactic diversity (% unique Push programs):	 0.942
Total error diversity:				 0.632
Error (vector) diversity:			 0.731
Behavioral diversity:				 0.732
--- Run Statistics ---
Number of program evaluations used so far: 85000
Number of point (instruction) evaluations so far: 159497675
--- Timings ---
Current time: 1529616249756 milliseconds
Total Time:         314.0 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       113.2 seconds, 36.0%
Fitness Testing:    158.0 seconds, 50.3%
Report:              42.7 seconds, 13.6%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 84
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 85
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 85
;;******************************
;; -*- Number IO problem report - generation 85
Test total error for best: 28436.460199999972
Test mean error for best: 14.21823
;;------------------------------
Outputs of best individual on training cases:
Correct output: -74.6179542037 | Program output: -48.6653573997
Correct output: 78.7609586813  | Program output: 48.7609586813 
Correct output: 3.0100598709   | Program output: 14.9626566749 
Correct output: -99.2368061293 | Program output: -137.2842093253
Correct output: 88.6808415603  | Program output: 66.6808415603 
Correct output: -151.1060419578 | Program output: -142.1534451538
Correct output: 56.004616184   | Program output: 30.957212988  
Correct output: 33.520660154   | Program output: 35.520660154  
Correct output: 42.238861085   | Program output: 18.191457889  
Correct output: -49.0227893765 | Program output: -38.0227893765
Correct output: 103.4057483059 | Program output: 102.4057483059
Correct output: -106.1378273779 | Program output: -113.1852305739
Correct output: 37.9625599991  | Program output: 64.9625599991 
Correct output: 71.9208193203  | Program output: 73.9208193203 
Correct output: 173.5348464317 | Program output: 142.5348464317
Correct output: -77.0615185935 | Program output: -74.1089217895
Correct output: -20.7643622555 | Program output: -21.7643622555
Correct output: 1.9827630815   | Program output: -34.0172369185
Correct output: -39.1198682611 | Program output: -5.1672714571 
Correct output: 1.1392376036   | Program output: 10.1392376036 
Correct output: 129.1930977679 | Program output: 100.1930977679
Correct output: 26.7496211861  | Program output: 54.7496211861 
Correct output: -11.2984801384 | Program output: -14.2984801384
Correct output: -136.1442960385 | Program output: -136.1916992345
Correct output: 143.0911996605 | Program output: 139.0911996605
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_frominteger} {:instruction float_sub} {:instruction integer_max} {:instruction integer_flush} {:instruction in1} {:instruction in1} {:instruction float_stackdepth} {:instruction in2} {:instruction integer_add} {:instruction float_inc} {:instruction integer_add} {:instruction float_inc} {:instruction float_inc} {:instruction integer_add} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_add} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_add} {:instruction integer_add} {:instruction float_inc} {:instruction integer_add} {:instruction float_inc} {:instruction float_inc} {:instruction integer_swap} {:instruction integer_add} {:instruction float_inc} {:instruction integer_add} {:instruction integer_add} {:instruction float_inc} {:instruction integer_add} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_add} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_add} {:instruction float_inc} {:instruction float_inc} {:instruction integer_max} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_dup_times} {:instruction float_rot} {:instruction float_stackdepth} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_add} {:instruction float_inc} {:instruction float_inc} {:instruction integer_max} {:instruction float_inc} {:instruction float_dup} {:instruction float_inc} {:instruction 25} {:instruction float_stackdepth} {:instruction float_inc} {:instruction float_dup_times} {:instruction float_yank} {:instruction float_inc} {:instruction integer_add} {:instruction integer_yankdup} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_add} {:instruction integer_yankdup} {:instruction float_inc} {:instruction integer_max} {:instruction float_dup_times} {:instruction float_max} {:instruction float_dup_times} {:instruction float_stackdepth} {:instruction float_inc} {:instruction float_dup_times} {:instruction float_shove} {:instruction float_dup_times} {:instruction float_yank} {:instruction float_dup_times} {:instruction integer_swap} {:instruction 25} {:instruction integer_flush} {:instruction integer_add} {:instruction integer_swap} {:instruction print_integer} {:instruction 76.04740319597805} {:instruction float_rot} {:instruction float_dup_times} {:instruction float_rot} {:instruction integer_shove} {:instruction float_inc} {:instruction float_dec} {:instruction float_inc} {:instruction float_sub} {:instruction float_rot} {:instruction integer_shove} {:instruction float_rot} {:instruction float_sub} {:instruction float_rot} {:instruction integer_sub} {:instruction float_inc} {:instruction integer_swap} {:instruction integer_min} {:instruction print_float} {:instruction integer_dec} {:instruction integer_stackdepth} {:instruction float_yank} {:instruction float_div} {:instruction float_mult} {:instruction integer_shove} {:instruction float_dup_times} {:instruction float_div} {:instruction float_pop})
Best program: (float_frominteger float_sub integer_max integer_flush in1 in1 float_stackdepth in2 integer_add float_inc integer_add float_inc float_inc integer_add float_inc float_inc float_inc float_inc integer_add float_inc float_inc float_inc integer_add integer_add float_inc integer_add float_inc float_inc integer_swap integer_add float_inc integer_add integer_add float_inc integer_add float_inc float_inc float_inc float_inc integer_add float_inc float_inc float_inc integer_add float_inc float_inc integer_max float_inc float_inc float_inc float_inc float_dup_times float_rot float_stackdepth float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc integer_add float_inc float_inc integer_max float_inc float_dup float_inc 25 float_stackdepth float_inc float_dup_times float_yank float_inc integer_add integer_yankdup float_inc float_inc float_inc float_inc integer_add integer_yankdup float_inc integer_max float_dup_times float_max float_dup_times float_stackdepth float_inc float_dup_times float_shove float_dup_times float_yank float_dup_times integer_swap 25 integer_flush integer_add integer_swap print_integer 76.04740319597805 float_rot float_dup_times float_rot integer_shove float_inc float_dec float_inc float_sub float_rot integer_shove float_rot float_sub float_rot integer_sub float_inc integer_swap integer_min print_float integer_dec integer_stackdepth float_yank float_div float_mult integer_shove float_dup_times float_div float_pop)
Errors: [25.9526 9 30.0 1 11.9526 9 38.0474 9 22.0 2 8.9526 8 25.0474 9 2.0 1 24.0474 10 11.0 2 1.0 1 7.0474 9 27.0 2 2.0 1 31.0 2 2.9526 8 1.0 1 36.0 10 33.9526 10 9.0 1 29.0 2 28.0 2 3.0 1 0.0474 6 4.0 2]
Total: 532.0000000000001
Mean: 10.64
Genome size: 134
Size: 135
Percent parens: 0.007
--- Population Statistics ---
Average total errors in population: 3463.566820299998
Median total errors in population: 915.6121999999998
Error averages by case: (148.91715629999973 10.298 136.09017349999996 4.432 126.58930000000025 8.285 148.3717320000001 8.484 134.53112300000004 3.975 153.70086859999972 8.592 120.68063809999964 8.362 112.60613680000002 4.316 120.56302889999967 8.887 127.91390360000013 3.737 121.1309542000001 4.11 138.41150260000006 8.888 124.86134249999994 4.003 115.30900600000011 3.65 155.40262309999994 4.197 133.19418310000046 9.25 115.18793349999999 4.392 151.63516660000002 10.328 149.21069519999975 11.417 102.22877650000004 3.694 149.10268679999996 4.676 117.69515470000003 3.914 124.99809470000008 3.759 145.2755924999998 8.102 132.09704749999992 4.114)
Error minima by case: (0.382 8 0.1573 1 0.3445 1 3.1894 1 1.6808 1 0.0474 1 0.0474 1 0.0 0 0.7611 1 0.0 0 0.0 0 0.0055 2 0.0 0 0.0 0 17.0 1 0.0474 1 0.0 0 0.011 6 7.8801 8 0.0131 1 2.1931 1 0.0 0 0.0 0 0.0474 1 0.0 0)
Average genome size in population (length): 126.5
Average program size in population (points): 127.5
Average percent parens in population: 0.008
Minimum age in population: 119.513535773998
Maximum age in population: 123.9525657937492
Average age in population: 121.8882659404399
Median age in population: 121.9217548079832
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 8
Genome diversity (% unique Plush genomes):	 0.93
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 8
Syntactic diversity (% unique Push programs):	 0.93
Total error diversity:				 0.662
Error (vector) diversity:			 0.754
Behavioral diversity:				 0.754
--- Run Statistics ---
Number of program evaluations used so far: 86000
Number of point (instruction) evaluations so far: 162660250
--- Timings ---
Current time: 1529616254684 milliseconds
Total Time:         318.9 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       114.5 seconds, 35.9%
Fitness Testing:    160.8 seconds, 50.4%
Report:              43.4 seconds, 13.6%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 85
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 86
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 86
;;******************************
;; -*- Number IO problem report - generation 86
Test total error for best: 28450.460199999972
Test mean error for best: 14.22523
;;------------------------------
Outputs of best individual on training cases:
Correct output: -74.6179542037 | Program output: -48.6653573997
Correct output: 78.7609586813  | Program output: 50.7609586813 
Correct output: 3.0100598709   | Program output: 14.9626566749 
Correct output: -99.2368061293 | Program output: -137.2842093253
Correct output: 88.6808415603  | Program output: 68.6808415603 
Correct output: -151.1060419578 | Program output: -142.1534451538
Correct output: 56.004616184   | Program output: 30.957212988  
Correct output: 33.520660154   | Program output: 37.520660154  
Correct output: 42.238861085   | Program output: 18.191457889  
Correct output: -49.0227893765 | Program output: -36.0227893765
Correct output: 103.4057483059 | Program output: 103.4057483059
Correct output: -106.1378273779 | Program output: -113.1852305739
Correct output: 37.9625599991  | Program output: 66.9625599991 
Correct output: 71.9208193203  | Program output: 74.9208193203 
Correct output: 173.5348464317 | Program output: 144.5348464317
Correct output: -77.0615185935 | Program output: -74.1089217895
Correct output: -20.7643622555 | Program output: -20.7643622555
Correct output: 1.9827630815   | Program output: -32.0172369185
Correct output: -39.1198682611 | Program output: -5.1672714571 
Correct output: 1.1392376036   | Program output: 11.1392376036 
Correct output: 129.1930977679 | Program output: 102.1930977679
Correct output: 26.7496211861  | Program output: 56.7496211861 
Correct output: -11.2984801384 | Program output: -12.2984801384
Correct output: -136.1442960385 | Program output: -136.1916992345
Correct output: 143.0911996605 | Program output: 141.0911996605
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_mod} {:instruction float_pop} {:instruction integer_max} {:instruction integer_flush} {:instruction in1} {:instruction in1} {:instruction float_stackdepth} {:instruction in2} {:instruction integer_add} {:instruction float_inc} {:instruction integer_add} {:instruction float_inc} {:instruction float_inc} {:instruction integer_max} {:instruction float_inc} {:instruction integer_add} {:instruction float_inc} {:instruction integer_add} {:instruction integer_add} {:instruction float_inc} {:instruction integer_add} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_add} {:instruction float_inc} {:instruction float_inc} {:instruction integer_add} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_add} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_add} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_max} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_dup_times} {:instruction float_rot} {:instruction float_stackdepth} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_min} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_add} {:instruction float_inc} {:instruction float_inc} {:instruction integer_max} {:instruction float_inc} {:instruction float_dup} {:instruction float_inc} {:instruction 25} {:instruction float_stackdepth} {:instruction float_inc} {:instruction float_dup_times} {:instruction float_yank} {:instruction float_inc} {:instruction integer_add} {:instruction integer_yankdup} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_add} {:instruction integer_yankdup} {:instruction float_inc} {:instruction integer_max} {:instruction float_dup_times} {:instruction float_max} {:instruction float_dup_times} {:instruction float_stackdepth} {:instruction float_inc} {:instruction float_inc} {:instruction float_dup_times} {:instruction float_dup_times} {:instruction integer_add} {:instruction 25} {:instruction integer_flush} {:instruction integer_add} {:instruction float_yank} {:instruction float_dup_times} {:instruction integer_swap} {:instruction print_integer} {:instruction 76.04740319597805} {:instruction float_rot} {:instruction float_dup_times} {:instruction float_rot} {:instruction integer_shove} {:instruction float_inc} {:instruction float_dec} {:instruction float_inc} {:instruction float_sub} {:instruction float_rot} {:instruction integer_shove} {:instruction float_rot} {:instruction float_sub} {:instruction float_rot} {:instruction integer_sub} {:instruction float_inc} {:instruction integer_swap} {:instruction integer_min} {:instruction print_float} {:instruction integer_dec} {:instruction integer_stackdepth} {:instruction float_yank} {:instruction float_div} {:instruction float_mult} {:instruction integer_shove} {:instruction float_dup_times} {:instruction float_div} {:instruction float_pop})
Best program: (float_mod float_pop integer_max integer_flush in1 in1 float_stackdepth in2 integer_add float_inc integer_add float_inc float_inc integer_max float_inc integer_add float_inc integer_add integer_add float_inc integer_add float_inc float_inc float_inc integer_add float_inc float_inc integer_add float_inc float_inc float_inc float_inc integer_add float_inc float_inc float_inc integer_add float_inc float_inc float_inc float_inc float_inc float_inc float_inc integer_max float_inc float_inc float_inc float_inc float_dup_times float_rot float_stackdepth float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc integer_min float_inc float_inc float_inc float_inc float_inc integer_add float_inc float_inc integer_max float_inc float_dup float_inc 25 float_stackdepth float_inc float_dup_times float_yank float_inc integer_add integer_yankdup float_inc float_inc float_inc float_inc integer_add integer_yankdup float_inc integer_max float_dup_times float_max float_dup_times float_stackdepth float_inc float_inc float_dup_times float_dup_times integer_add 25 integer_flush integer_add float_yank float_dup_times integer_swap print_integer 76.04740319597805 float_rot float_dup_times float_rot integer_shove float_inc float_dec float_inc float_sub float_rot integer_shove float_rot float_sub float_rot integer_sub float_inc integer_swap integer_min print_float integer_dec integer_stackdepth float_yank float_div float_mult integer_shove float_dup_times float_div float_pop)
Errors: [25.9526 9 28.0 2 11.9526 9 38.0474 9 20.0 1 8.9526 8 25.0474 9 4.0 1 24.0474 10 13.0 2 0.0 0 7.0474 9 29.0 2 3.0 1 29.0 2 2.9526 8 0.0 0 34.0 10 33.9526 10 10.0 1 27.0 2 30.0 1 1.0 1 0.0474 6 2.0 1]
Total: 522.0000000000001
Mean: 10.44
Genome size: 133
Size: 134
Percent parens: 0.007
--- Population Statistics ---
Average total errors in population: 3315.702862399998
Median total errors in population: 666.6290999999999
Error averages by case: (136.0041680000003 10.008 137.24093760000002 4.369 109.7923267000004 8.481 135.7437908999995 8.599 133.92024770000003 3.954 136.4471224000001 8.483 105.57709869999962 8.471 112.5497753 3.966 105.60037899999953 9.059 128.8216474000001 3.789 120.50606470000008 4.147 122.20593989999988 8.805 127.62899239999997 4.002 115.4199943000001 3.616 151.40559690000006 4.105 119.61410040000061 9.014 117.81303539999995 4.55 149.61825200000004 10.466 136.57224350000033 11.249 106.6463424 3.736 146.7789923 4.538 122.06748109999998 3.904 124.49279059999998 3.673 128.12872110000012 7.962 128.17782169999995 3.983)
Error minima by case: (0.0177 8 0.1573 1 0.0101 1 1.0817 1 1.6808 1 0.9526 1 0.9183 1 0.0 0 0.0474 1 0.0 0 0.0 0 0.0055 1 0.0 0 0.0 0 13.0 1 0.0474 1 0.0 0 0.0172 8 8.2748 6 0.1424 1 6.8069 1 0.0 0 0.0 0 0.0474 2 0.0 0)
Average genome size in population (length): 127.616
Average program size in population (points): 128.616
Average percent parens in population: 0.008
Minimum age in population: 120.5484748347896
Maximum age in population: 125.1407775386049
Average age in population: 123.2710842870924
Median age in population: 123.3242559272094
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 6
Genome diversity (% unique Plush genomes):	 0.929
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 6
Syntactic diversity (% unique Push programs):	 0.929
Total error diversity:				 0.607
Error (vector) diversity:			 0.728
Behavioral diversity:				 0.728
--- Run Statistics ---
Number of program evaluations used so far: 87000
Number of point (instruction) evaluations so far: 165850800
--- Timings ---
Current time: 1529616259713 milliseconds
Total Time:         323.8 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       115.9 seconds, 35.8%
Fitness Testing:    163.7 seconds, 50.5%
Report:              44.1 seconds, 13.6%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 86
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 87
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 87
;;******************************
;; -*- Number IO problem report - generation 87
Test total error for best: 28405.460199999976
Test mean error for best: 14.20273
;;------------------------------
Outputs of best individual on training cases:
Correct output: -74.6179542037 | Program output: -48.6653573997
Correct output: 78.7609586813  | Program output: 51.7609586813 
Correct output: 3.0100598709   | Program output: 14.9626566749 
Correct output: -99.2368061293 | Program output: -137.2842093253
Correct output: 88.6808415603  | Program output: 69.6808415603 
Correct output: -151.1060419578 | Program output: -142.1534451538
Correct output: 56.004616184   | Program output: 30.957212988  
Correct output: 33.520660154   | Program output: 38.520660154  
Correct output: 42.238861085   | Program output: 18.191457889  
Correct output: -49.0227893765 | Program output: -35.0227893765
Correct output: 103.4057483059 | Program output: 102.4057483059
Correct output: -106.1378273779 | Program output: -113.1852305739
Correct output: 37.9625599991  | Program output: 67.9625599991 
Correct output: 71.9208193203  | Program output: 73.9208193203 
Correct output: 173.5348464317 | Program output: 145.5348464317
Correct output: -77.0615185935 | Program output: -74.1089217895
Correct output: -20.7643622555 | Program output: -21.7643622555
Correct output: 1.9827630815   | Program output: -31.0172369185
Correct output: -39.1198682611 | Program output: -5.1672714571 
Correct output: 1.1392376036   | Program output: 10.1392376036 
Correct output: 129.1930977679 | Program output: 103.1930977679
Correct output: 26.7496211861  | Program output: 57.7496211861 
Correct output: -11.2984801384 | Program output: -11.2984801384
Correct output: -136.1442960385 | Program output: -136.1916992345
Correct output: 143.0911996605 | Program output: 142.0911996605
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_mod} {:instruction float_pop} {:instruction integer_max} {:instruction integer_flush} {:instruction in1} {:instruction in1} {:instruction float_stackdepth} {:instruction in2} {:instruction integer_add} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_max} {:instruction float_inc} {:instruction integer_add} {:instruction float_inc} {:instruction integer_add} {:instruction integer_add} {:instruction float_inc} {:instruction integer_add} {:instruction float_inc} {:instruction integer_add} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_add} {:instruction float_inc} {:instruction integer_add} {:instruction float_inc} {:instruction float_inc} {:instruction integer_add} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_add} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_add} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_sub} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_max} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_dup_times} {:instruction float_rot} {:instruction float_stackdepth} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_add} {:instruction float_inc} {:instruction float_inc} {:instruction integer_max} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_add} {:instruction float_inc} {:instruction float_inc} {:instruction integer_max} {:instruction float_inc} {:instruction float_dup} {:instruction float_inc} {:instruction 25} {:instruction float_stackdepth} {:instruction float_inc} {:instruction float_dup_times} {:instruction float_yank} {:instruction float_inc} {:instruction integer_add} {:instruction integer_yankdup} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_add} {:instruction integer_yankdup} {:instruction float_inc} {:instruction integer_max} {:instruction float_dup_times} {:instruction float_max} {:instruction float_dup_times} {:instruction float_stackdepth} {:instruction float_inc} {:instruction float_dup_times} {:instruction float_shove} {:instruction float_dup_times} {:instruction float_yank} {:instruction float_dup_times} {:instruction integer_swap} {:instruction 25} {:instruction integer_flush} {:instruction float_frominteger} {:instruction integer_swap} {:instruction print_integer} {:instruction 76.04740319597805} {:instruction float_rot} {:instruction float_dup_times} {:instruction float_rot} {:instruction integer_shove} {:instruction integer_pop} {:instruction float_dec} {:instruction float_inc} {:instruction float_sub} {:instruction float_rot} {:instruction integer_shove} {:instruction float_rot} {:instruction float_sub} {:instruction float_rot} {:instruction integer_sub} {:instruction float_inc} {:instruction integer_swap} {:instruction integer_min} {:instruction print_float} {:instruction integer_dec} {:instruction integer_stackdepth} {:instruction float_yank} {:instruction float_div} {:instruction float_mult} {:instruction integer_shove} {:instruction float_dup_times} {:instruction float_div})
Best program: (float_mod float_pop integer_max integer_flush in1 in1 float_stackdepth in2 integer_add float_inc float_inc float_inc integer_max float_inc integer_add float_inc integer_add integer_add float_inc integer_add float_inc integer_add float_inc float_inc float_inc float_inc integer_add float_inc integer_add float_inc float_inc integer_add float_inc float_inc float_inc float_inc integer_add float_inc float_inc float_inc integer_add float_inc float_inc float_inc integer_sub float_inc float_inc float_inc integer_max float_inc float_inc float_inc float_inc float_dup_times float_rot float_stackdepth float_inc float_inc float_inc integer_add float_inc float_inc integer_max float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc integer_add float_inc float_inc integer_max float_inc float_dup float_inc 25 float_stackdepth float_inc float_dup_times float_yank float_inc integer_add integer_yankdup float_inc float_inc float_inc float_inc integer_add integer_yankdup float_inc integer_max float_dup_times float_max float_dup_times float_stackdepth float_inc float_dup_times float_shove float_dup_times float_yank float_dup_times integer_swap 25 integer_flush float_frominteger integer_swap print_integer 76.04740319597805 float_rot float_dup_times float_rot integer_shove integer_pop float_dec float_inc float_sub float_rot integer_shove float_rot float_sub float_rot integer_sub float_inc integer_swap integer_min print_float integer_dec integer_stackdepth float_yank float_div float_mult integer_shove float_dup_times float_div)
Errors: [25.9526 9 27.0 2 11.9526 9 38.0474 9 19.0 2 8.9526 8 25.0474 9 5.0 1 24.0474 10 14.0 2 1.0 1 7.0474 9 30.0 1 2.0 1 28.0 2 2.9526 8 1.0 1 33.0 9 33.9526 10 9.0 1 26.0 2 31.0 2 0.0 0 0.0474 6 1.0 1]
Total: 520.0
Mean: 10.4
Genome size: 137
Size: 138
Percent parens: 0.007
--- Population Statistics ---
Average total errors in population: 2904.6336005
Median total errors in population: 642.12185
Error averages by case: (120.50582730000077 9.984 117.92660660000007 4.15 101.18398050000047 8.313 121.60075489999899 8.388 113.12541150000003 3.704 122.8314248000007 8.226 98.70999469999956 8.244 94.3909648 3.738 97.99037899999955 8.879 109.30176820000007 3.63 104.1432384000001 3.989 108.73486339999965 8.65 109.42384489999993 3.767 100.31705230000009 3.446 131.94809589999997 3.837 103.88727780000056 8.952 98.80137009999999 4.276 128.10370289999997 10.322 122.49885690000094 11.281 90.1138813000001 3.485 126.11544589999998 4.22 106.4533453 3.616 102.31163530000005 3.359 114.26251580000041 7.743 108.11136199999996 3.641)
Error minima by case: (0.0177 8 0.7136 1 0.0101 1 3.0474 1 2.9642 1 0.0474 2 0.0474 1 0.0 0 0.9526 2 0.0 0 0.0 0 0.0474 1 0.0 0 0.0 0 19.0 1 0.0141 1 0.0 0 0.0172 7 0.9275 8 0.1392 1 16.1931 1 0.0 0 0.0 0 0.0474 1 0.0 0)
Average genome size in population (length): 128.458
Average program size in population (points): 129.458
Average percent parens in population: 0.008
Minimum age in population: 121.5484748347896
Maximum age in population: 126.6375612872564
Average age in population: 124.6104688611843
Median age in population: 124.642076085958
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 4
Genome diversity (% unique Plush genomes):	 0.947
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 4
Syntactic diversity (% unique Push programs):	 0.947
Total error diversity:				 0.603
Error (vector) diversity:			 0.738
Behavioral diversity:				 0.739
--- Run Statistics ---
Number of program evaluations used so far: 88000
Number of point (instruction) evaluations so far: 169062425
--- Timings ---
Current time: 1529616264838 milliseconds
Total Time:         329.0 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       117.3 seconds, 35.6%
Fitness Testing:    166.7 seconds, 50.7%
Report:              44.9 seconds, 13.7%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 87
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 88
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 88
;;******************************
;; -*- Number IO problem report - generation 88
Test total error for best: 28761.218599999967
Test mean error for best: 14.38061
;;------------------------------
Outputs of best individual on training cases:
Correct output: -74.6179542037 | Program output: -50.6653573997
Correct output: 78.7609586813  | Program output: 51.7609586813 
Correct output: 3.0100598709   | Program output: 12.9626566749 
Correct output: -99.2368061293 | Program output: -139.2842093253
Correct output: 88.6808415603  | Program output: 69.6808415603 
Correct output: -151.1060419578 | Program output: -144.1534451538
Correct output: 56.004616184   | Program output: 28.957212988  
Correct output: 33.520660154   | Program output: 38.520660154  
Correct output: 42.238861085   | Program output: 16.191457889  
Correct output: -49.0227893765 | Program output: -35.0227893765
Correct output: 103.4057483059 | Program output: 103.4057483059
Correct output: -106.1378273779 | Program output: -115.1852305739
Correct output: 37.9625599991  | Program output: 67.9625599991 
Correct output: 71.9208193203  | Program output: 74.9208193203 
Correct output: 173.5348464317 | Program output: 145.5348464317
Correct output: -77.0615185935 | Program output: -76.1089217895
Correct output: -20.7643622555 | Program output: -20.7643622555
Correct output: 1.9827630815   | Program output: -31.0172369185
Correct output: -39.1198682611 | Program output: -7.1672714571 
Correct output: 1.1392376036   | Program output: 11.1392376036 
Correct output: 129.1930977679 | Program output: 103.1930977679
Correct output: 26.7496211861  | Program output: 57.7496211861 
Correct output: -11.2984801384 | Program output: -11.2984801384
Correct output: -136.1442960385 | Program output: -138.1916992345
Correct output: 143.0911996605 | Program output: 142.0911996605
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_mod} {:instruction float_pop} {:instruction integer_max} {:instruction integer_flush} {:instruction in1} {:instruction in1} {:instruction float_stackdepth} {:instruction in2} {:instruction integer_add} {:instruction float_inc} {:instruction integer_add} {:instruction float_inc} {:instruction float_inc} {:instruction integer_max} {:instruction float_inc} {:instruction integer_add} {:instruction float_inc} {:instruction integer_add} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_add} {:instruction float_rot} {:instruction integer_add} {:instruction float_inc} {:instruction integer_add} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_add} {:instruction float_inc} {:instruction integer_mult} {:instruction integer_add} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_add} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_add} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_max} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_dup_times} {:instruction float_rot} {:instruction float_stackdepth} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_min} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_add} {:instruction float_inc} {:instruction float_inc} {:instruction integer_max} {:instruction float_inc} {:instruction float_dup} {:instruction float_inc} {:instruction 25} {:instruction float_stackdepth} {:instruction float_inc} {:instruction float_dup_times} {:instruction float_yank} {:instruction float_inc} {:instruction integer_add} {:instruction integer_yankdup} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_add} {:instruction integer_yankdup} {:instruction float_inc} {:instruction integer_max} {:instruction float_dup_times} {:instruction float_max} {:instruction float_dup_times} {:instruction float_stackdepth} {:instruction float_inc} {:instruction float_inc} {:instruction float_dup_times} {:instruction float_dup_times} {:instruction integer_add} {:instruction 25} {:instruction integer_flush} {:instruction integer_add} {:instruction float_yank} {:instruction float_dup_times} {:instruction integer_swap} {:instruction print_integer} {:instruction 76.04740319597805} {:instruction float_rot} {:instruction float_dup_times} {:instruction float_rot} {:instruction integer_shove} {:instruction float_inc} {:instruction float_dec} {:instruction float_inc} {:instruction float_sub} {:instruction float_rot} {:instruction integer_shove} {:instruction float_rot} {:instruction float_sub} {:instruction float_rot} {:instruction integer_sub} {:instruction float_inc} {:instruction integer_swap} {:instruction integer_min} {:instruction print_float} {:instruction integer_dec} {:instruction integer_stackdepth} {:instruction float_yank} {:instruction float_div} {:instruction float_mult} {:instruction integer_shove} {:instruction float_dup_times} {:instruction float_div} {:instruction float_pop})
Best program: (float_mod float_pop integer_max integer_flush in1 in1 float_stackdepth in2 integer_add float_inc integer_add float_inc float_inc integer_max float_inc integer_add float_inc integer_add float_inc float_inc float_inc float_inc integer_add float_rot integer_add float_inc integer_add float_inc float_inc float_inc float_inc float_inc integer_add float_inc integer_mult integer_add float_inc float_inc float_inc integer_add float_inc float_inc float_inc integer_add float_inc float_inc float_inc float_inc float_inc float_inc integer_max float_inc float_inc float_inc float_inc float_dup_times float_rot float_stackdepth float_inc float_inc float_inc float_inc float_inc float_inc integer_min float_inc float_inc float_inc float_inc float_inc integer_add float_inc float_inc integer_max float_inc float_dup float_inc 25 float_stackdepth float_inc float_dup_times float_yank float_inc integer_add integer_yankdup float_inc float_inc float_inc float_inc integer_add integer_yankdup float_inc integer_max float_dup_times float_max float_dup_times float_stackdepth float_inc float_inc float_dup_times float_dup_times integer_add 25 integer_flush integer_add float_yank float_dup_times integer_swap print_integer 76.04740319597805 float_rot float_dup_times float_rot integer_shove float_inc float_dec float_inc float_sub float_rot integer_shove float_rot float_sub float_rot integer_sub float_inc integer_swap integer_min print_float integer_dec integer_stackdepth float_yank float_div float_mult integer_shove float_dup_times float_div float_pop)
Errors: [23.9526 9 27.0 2 9.9526 9 40.0474 8 19.0 2 6.9526 8 27.0474 9 5.0 1 26.0474 10 14.0 2 0.0 0 9.0474 9 30.0 1 3.0 1 28.0 2 0.9526 8 0.0 0 33.0 9 31.9526 10 10.0 1 26.0 2 31.0 2 0.0 0 2.0474 7 1.0 1]
Total: 518.0
Mean: 10.36
Genome size: 137
Size: 138
Percent parens: 0.007
--- Population Statistics ---
Average total errors in population: 3293.433983899999
Median total errors in population: 635.3815
Error averages by case: (135.34472250000087 10.057 129.45367290000002 4.684 112.98356930000061 8.499 138.06754579999904 8.603 127.04556430000012 4.092 140.1719930000006 8.384 110.13791809999925 8.386 108.8178316 4.204 109.38427569999924 9.051 129.0813741000002 4.161 120.67993200000016 4.372 125.78715789999956 8.85 125.47773279999988 4.197 115.72805720000015 3.862 149.89240159999997 4.228 119.33306200000094 8.919 113.14271809999991 4.417 144.14390470000006 10.435 136.65063600000107 11.31 100.34013930000002 3.693 143.5044294999999 4.483 120.64400599999998 4.056 120.67962240000007 3.796 131.5561557000005 7.91 126.83056139999992 3.906)
Error minima by case: (0.3108 7 0.2864 1 0.0474 1 0.0474 1 3.0 1 0.0474 1 2.9526 1 0.0 0 3.9526 1 0.0 0 0.0 0 0.0474 1 0.0 1 0.0 0 2.4652 1 0.0474 1 0.0 0 0.0936 8 8.9749 7 0.1392 1 10.0 1 0.1952 1 0.0 0 0.0474 1 0.0 0)
Average genome size in population (length): 129.91
Average program size in population (points): 130.91
Average percent parens in population: 0.008
Minimum age in population: 123.0482265280882
Maximum age in population: 128.1991345445438
Average age in population: 125.9987695394245
Median age in population: 126.0530672883231
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 4
Genome diversity (% unique Plush genomes):	 0.95
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 4
Syntactic diversity (% unique Push programs):	 0.95
Total error diversity:				 0.548
Error (vector) diversity:			 0.697
Behavioral diversity:				 0.698
--- Run Statistics ---
Number of program evaluations used so far: 89000
Number of point (instruction) evaluations so far: 172310310
--- Timings ---
Current time: 1529616269930 milliseconds
Total Time:         334.1 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       118.6 seconds, 35.5%
Fitness Testing:    169.7 seconds, 50.8%
Report:              45.7 seconds, 13.7%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 88
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 89
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 89
;;******************************
;; -*- Number IO problem report - generation 89
Test total error for best: 28761.218599999967
Test mean error for best: 14.38061
;;------------------------------
Outputs of best individual on training cases:
Correct output: -74.6179542037 | Program output: -50.6653573997
Correct output: 78.7609586813  | Program output: 51.7609586813 
Correct output: 3.0100598709   | Program output: 12.9626566749 
Correct output: -99.2368061293 | Program output: -139.2842093253
Correct output: 88.6808415603  | Program output: 69.6808415603 
Correct output: -151.1060419578 | Program output: -144.1534451538
Correct output: 56.004616184   | Program output: 28.957212988  
Correct output: 33.520660154   | Program output: 38.520660154  
Correct output: 42.238861085   | Program output: 16.191457889  
Correct output: -49.0227893765 | Program output: -35.0227893765
Correct output: 103.4057483059 | Program output: 103.4057483059
Correct output: -106.1378273779 | Program output: -115.1852305739
Correct output: 37.9625599991  | Program output: 67.9625599991 
Correct output: 71.9208193203  | Program output: 74.9208193203 
Correct output: 173.5348464317 | Program output: 145.5348464317
Correct output: -77.0615185935 | Program output: -76.1089217895
Correct output: -20.7643622555 | Program output: -20.7643622555
Correct output: 1.9827630815   | Program output: -31.0172369185
Correct output: -39.1198682611 | Program output: -7.1672714571 
Correct output: 1.1392376036   | Program output: 11.1392376036 
Correct output: 129.1930977679 | Program output: 103.1930977679
Correct output: 26.7496211861  | Program output: 57.7496211861 
Correct output: -11.2984801384 | Program output: -11.2984801384
Correct output: -136.1442960385 | Program output: -138.1916992345
Correct output: 143.0911996605 | Program output: 142.0911996605
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_mod} {:instruction float_pop} {:instruction integer_max} {:instruction integer_flush} {:instruction in1} {:instruction in1} {:instruction float_stackdepth} {:instruction in2} {:instruction integer_add} {:instruction float_inc} {:instruction integer_add} {:instruction float_inc} {:instruction float_inc} {:instruction integer_max} {:instruction float_inc} {:instruction integer_add} {:instruction float_inc} {:instruction integer_add} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_add} {:instruction float_rot} {:instruction integer_add} {:instruction float_inc} {:instruction integer_add} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_add} {:instruction float_inc} {:instruction integer_mult} {:instruction integer_add} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_add} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_add} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_max} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_dup_times} {:instruction float_rot} {:instruction float_stackdepth} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_min} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_add} {:instruction float_inc} {:instruction float_inc} {:instruction integer_max} {:instruction float_inc} {:instruction float_dup} {:instruction float_inc} {:instruction 25} {:instruction float_stackdepth} {:instruction float_inc} {:instruction float_dup_times} {:instruction float_yank} {:instruction float_inc} {:instruction integer_add} {:instruction integer_yankdup} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_add} {:instruction integer_yankdup} {:instruction float_inc} {:instruction integer_max} {:instruction float_dup_times} {:instruction float_max} {:instruction float_dup_times} {:instruction float_stackdepth} {:instruction float_inc} {:instruction float_inc} {:instruction float_dup_times} {:instruction float_dup_times} {:instruction integer_add} {:instruction 25} {:instruction integer_flush} {:instruction integer_add} {:instruction float_yank} {:instruction float_dup_times} {:instruction integer_swap} {:instruction print_integer} {:instruction 76.04740319597805} {:instruction float_rot} {:instruction float_dup_times} {:instruction float_rot} {:instruction integer_shove} {:instruction float_inc} {:instruction float_dec} {:instruction float_inc} {:instruction float_sub} {:instruction float_rot} {:instruction integer_shove} {:instruction float_rot} {:instruction float_sub} {:instruction float_rot} {:instruction integer_sub} {:instruction float_inc} {:instruction integer_swap} {:instruction integer_min} {:instruction print_float} {:instruction integer_dec} {:instruction integer_stackdepth} {:instruction float_yank} {:instruction float_div} {:instruction float_mult} {:instruction integer_shove} {:instruction float_dup_times} {:instruction float_div} {:instruction float_pop})
Best program: (float_mod float_pop integer_max integer_flush in1 in1 float_stackdepth in2 integer_add float_inc integer_add float_inc float_inc integer_max float_inc integer_add float_inc integer_add float_inc float_inc float_inc float_inc integer_add float_rot integer_add float_inc integer_add float_inc float_inc float_inc float_inc float_inc integer_add float_inc integer_mult integer_add float_inc float_inc float_inc integer_add float_inc float_inc float_inc integer_add float_inc float_inc float_inc float_inc float_inc float_inc integer_max float_inc float_inc float_inc float_inc float_dup_times float_rot float_stackdepth float_inc float_inc float_inc float_inc float_inc float_inc integer_min float_inc float_inc float_inc float_inc float_inc integer_add float_inc float_inc integer_max float_inc float_dup float_inc 25 float_stackdepth float_inc float_dup_times float_yank float_inc integer_add integer_yankdup float_inc float_inc float_inc float_inc integer_add integer_yankdup float_inc integer_max float_dup_times float_max float_dup_times float_stackdepth float_inc float_inc float_dup_times float_dup_times integer_add 25 integer_flush integer_add float_yank float_dup_times integer_swap print_integer 76.04740319597805 float_rot float_dup_times float_rot integer_shove float_inc float_dec float_inc float_sub float_rot integer_shove float_rot float_sub float_rot integer_sub float_inc integer_swap integer_min print_float integer_dec integer_stackdepth float_yank float_div float_mult integer_shove float_dup_times float_div float_pop)
Errors: [23.9526 9 27.0 2 9.9526 9 40.0474 8 19.0 2 6.9526 8 27.0474 9 5.0 1 26.0474 10 14.0 2 0.0 0 9.0474 9 30.0 1 3.0 1 28.0 2 0.9526 8 0.0 0 33.0 9 31.9526 10 10.0 1 26.0 2 31.0 2 0.0 0 2.0474 7 1.0 1]
Total: 518.0
Mean: 10.36
Genome size: 137
Size: 138
Percent parens: 0.007
--- Population Statistics ---
Average total errors in population: 3066.919952199999
Median total errors in population: 709.9051999999999
Error averages by case: (136.50815240000057 10.081 120.08335670000004 4.286 112.33528060000032 8.385 136.60584689999908 8.445 115.17978870000005 3.759 138.8261601000004 8.252 108.10181799999947 8.269 98.57346810000001 3.978 108.23237179999953 8.963 114.35301860000008 3.897 102.25105710000017 3.89 125.09858389999977 8.741 115.0647142999999 3.809 96.7198199000001 3.476 132.7176027999999 3.966 119.77847040000076 8.826 98.95871219999995 4.478 127.80507039999995 10.266 136.1982902000007 11.265 92.02172230000006 3.695 126.16350059999994 4.152 109.88667100000005 3.71 102.24685730000006 3.504 130.6071087000003 7.784 109.19850919999993 3.527)
Error minima by case: (0.4294 7 0.2864 1 0.0101 1 0.0474 1 2.3192 1 0.5158 1 2.0474 1 0.0 0 1.0474 1 0.0 0 0.0 0 0.0474 2 0.0 0 0.0 0 0.4652 1 0.0474 1 0.0 0 0.0172 7 11.9275 8 0.1392 1 1.0 1 0.0 0 0.0 0 0.0474 1 0.0 0)
Average genome size in population (length): 131.59
Average program size in population (points): 132.59
Average percent parens in population: 0.008
Minimum age in population: 124.1087726219239
Maximum age in population: 129.3032469261656
Average age in population: 127.2187764303494
Median age in population: 127.2447207073115
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 5
Genome diversity (% unique Plush genomes):	 0.947
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 5
Syntactic diversity (% unique Push programs):	 0.947
Total error diversity:				 0.566
Error (vector) diversity:			 0.706
Behavioral diversity:				 0.707
--- Run Statistics ---
Number of program evaluations used so far: 90000
Number of point (instruction) evaluations so far: 175600110
--- Timings ---
Current time: 1529616275020 milliseconds
Total Time:         339.2 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       120.0 seconds, 35.4%
Fitness Testing:    172.7 seconds, 50.9%
Report:              46.4 seconds, 13.7%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 89
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 90
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 90
;;******************************
;; -*- Number IO problem report - generation 90
Test total error for best: 28761.218599999967
Test mean error for best: 14.38061
;;------------------------------
Outputs of best individual on training cases:
Correct output: -74.6179542037 | Program output: -50.6653573997
Correct output: 78.7609586813  | Program output: 51.7609586813 
Correct output: 3.0100598709   | Program output: 12.9626566749 
Correct output: -99.2368061293 | Program output: -139.2842093253
Correct output: 88.6808415603  | Program output: 69.6808415603 
Correct output: -151.1060419578 | Program output: -144.1534451538
Correct output: 56.004616184   | Program output: 28.957212988  
Correct output: 33.520660154   | Program output: 38.520660154  
Correct output: 42.238861085   | Program output: 16.191457889  
Correct output: -49.0227893765 | Program output: -35.0227893765
Correct output: 103.4057483059 | Program output: 103.4057483059
Correct output: -106.1378273779 | Program output: -115.1852305739
Correct output: 37.9625599991  | Program output: 67.9625599991 
Correct output: 71.9208193203  | Program output: 74.9208193203 
Correct output: 173.5348464317 | Program output: 145.5348464317
Correct output: -77.0615185935 | Program output: -76.1089217895
Correct output: -20.7643622555 | Program output: -20.7643622555
Correct output: 1.9827630815   | Program output: -31.0172369185
Correct output: -39.1198682611 | Program output: -7.1672714571 
Correct output: 1.1392376036   | Program output: 11.1392376036 
Correct output: 129.1930977679 | Program output: 103.1930977679
Correct output: 26.7496211861  | Program output: 57.7496211861 
Correct output: -11.2984801384 | Program output: -11.2984801384
Correct output: -136.1442960385 | Program output: -138.1916992345
Correct output: 143.0911996605 | Program output: 142.0911996605
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_mod} {:instruction float_pop} {:instruction integer_max} {:instruction integer_flush} {:instruction in1} {:instruction in1} {:instruction float_stackdepth} {:instruction in2} {:instruction integer_add} {:instruction float_inc} {:instruction integer_add} {:instruction float_inc} {:instruction float_inc} {:instruction integer_max} {:instruction float_inc} {:instruction integer_add} {:instruction float_inc} {:instruction integer_add} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_add} {:instruction float_rot} {:instruction integer_add} {:instruction float_inc} {:instruction integer_add} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_add} {:instruction float_inc} {:instruction integer_mult} {:instruction integer_add} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_add} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_add} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_max} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_dup_times} {:instruction float_rot} {:instruction float_stackdepth} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_min} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_add} {:instruction float_inc} {:instruction float_inc} {:instruction integer_max} {:instruction float_inc} {:instruction float_dup} {:instruction float_inc} {:instruction 25} {:instruction float_stackdepth} {:instruction float_inc} {:instruction float_dup_times} {:instruction float_yank} {:instruction float_inc} {:instruction integer_add} {:instruction integer_yankdup} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_add} {:instruction integer_yankdup} {:instruction float_inc} {:instruction integer_max} {:instruction float_dup_times} {:instruction float_max} {:instruction float_dup_times} {:instruction float_stackdepth} {:instruction float_inc} {:instruction float_inc} {:instruction float_dup_times} {:instruction float_dup_times} {:instruction integer_add} {:instruction 25} {:instruction integer_flush} {:instruction integer_add} {:instruction float_yank} {:instruction float_dup_times} {:instruction integer_swap} {:instruction print_integer} {:instruction 76.04740319597805} {:instruction float_rot} {:instruction float_dup_times} {:instruction float_rot} {:instruction integer_shove} {:instruction float_inc} {:instruction float_dec} {:instruction float_inc} {:instruction float_sub} {:instruction float_rot} {:instruction integer_shove} {:instruction float_rot} {:instruction float_sub} {:instruction float_rot} {:instruction integer_sub} {:instruction float_inc} {:instruction integer_swap} {:instruction integer_min} {:instruction print_float} {:instruction integer_dec} {:instruction integer_stackdepth} {:instruction float_yank} {:instruction float_div} {:instruction float_mult} {:instruction integer_shove} {:instruction float_dup_times} {:instruction float_div} {:instruction float_pop})
Best program: (float_mod float_pop integer_max integer_flush in1 in1 float_stackdepth in2 integer_add float_inc integer_add float_inc float_inc integer_max float_inc integer_add float_inc integer_add float_inc float_inc float_inc float_inc integer_add float_rot integer_add float_inc integer_add float_inc float_inc float_inc float_inc float_inc integer_add float_inc integer_mult integer_add float_inc float_inc float_inc integer_add float_inc float_inc float_inc integer_add float_inc float_inc float_inc float_inc float_inc float_inc integer_max float_inc float_inc float_inc float_inc float_dup_times float_rot float_stackdepth float_inc float_inc float_inc float_inc float_inc float_inc integer_min float_inc float_inc float_inc float_inc float_inc integer_add float_inc float_inc integer_max float_inc float_dup float_inc 25 float_stackdepth float_inc float_dup_times float_yank float_inc integer_add integer_yankdup float_inc float_inc float_inc float_inc integer_add integer_yankdup float_inc integer_max float_dup_times float_max float_dup_times float_stackdepth float_inc float_inc float_dup_times float_dup_times integer_add 25 integer_flush integer_add float_yank float_dup_times integer_swap print_integer 76.04740319597805 float_rot float_dup_times float_rot integer_shove float_inc float_dec float_inc float_sub float_rot integer_shove float_rot float_sub float_rot integer_sub float_inc integer_swap integer_min print_float integer_dec integer_stackdepth float_yank float_div float_mult integer_shove float_dup_times float_div float_pop)
Errors: [23.9526 9 27.0 2 9.9526 9 40.0474 8 19.0 2 6.9526 8 27.0474 9 5.0 1 26.0474 10 14.0 2 0.0 0 9.0474 9 30.0 1 3.0 1 28.0 2 0.9526 8 0.0 0 33.0 9 31.9526 10 10.0 1 26.0 2 31.0 2 0.0 0 2.0474 7 1.0 1]
Total: 518.0
Mean: 10.36
Genome size: 137
Size: 138
Percent parens: 0.007
--- Population Statistics ---
Average total errors in population: 2860.4722987999994
Median total errors in population: 702.4763
Error averages by case: (119.73582980000043 10.09 112.92868349999999 4.183 99.19930480000008 8.273 123.88294159999914 8.34 108.50826590000008 3.755 125.11326490000047 8.094 97.3681633999999 8.198 91.45401070000004 3.983 97.27221499999983 8.882 109.75775930000013 3.946 98.7571767000001 3.626 111.88994029999985 8.695 108.23092339999987 3.829 94.67590700000012 3.323 129.5785590999999 3.948 103.90137950000043 8.729 92.47313869999998 4.399 124.00502229999995 10.257 121.68181830000063 11.19 91.18011010000002 3.582 120.6409468999999 4.147 106.58547079999995 3.712 98.23603619999999 3.489 116.54730170000013 7.616 105.08912889999995 3.493)
Error minima by case: (0.1718 8 0.239 1 0.0101 1 1.0474 1 1.0 1 1.9526 2 2.0474 1 0.0 0 1.0474 1 1.0 1 0.0 0 0.0474 1 1.2934 1 0.0 0 10.0 1 0.0474 1 0.0 0 0.0545 7 14.0725 8 0.1392 1 8.0 1 1.0 1 0.0 0 0.0474 1 0.0 0)
Average genome size in population (length): 132.746
Average program size in population (points): 133.746
Average percent parens in population: 0.007
Minimum age in population: 125.1087726219239
Maximum age in population: 130.7702142092923
Average age in population: 128.5273457358235
Median age in population: 128.5780495366521
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 7
Genome diversity (% unique Plush genomes):	 0.931
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 7
Syntactic diversity (% unique Push programs):	 0.931
Total error diversity:				 0.56
Error (vector) diversity:			 0.711
Behavioral diversity:				 0.712
--- Run Statistics ---
Number of program evaluations used so far: 91000
Number of point (instruction) evaluations so far: 178918835
--- Timings ---
Current time: 1529616280132 milliseconds
Total Time:         344.3 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       121.4 seconds, 35.3%
Fitness Testing:    175.7 seconds, 51.0%
Report:              47.1 seconds, 13.7%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 90
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 91
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 91
;;******************************
;; -*- Number IO problem report - generation 91
Test total error for best: 28467.460199999976
Test mean error for best: 14.23373
;;------------------------------
Outputs of best individual on training cases:
Correct output: -74.6179542037 | Program output: -48.6653573997
Correct output: 78.7609586813  | Program output: 51.7609586813 
Correct output: 3.0100598709   | Program output: 14.9626566749 
Correct output: -99.2368061293 | Program output: -137.2842093253
Correct output: 88.6808415603  | Program output: 69.6808415603 
Correct output: -151.1060419578 | Program output: -142.1534451538
Correct output: 56.004616184   | Program output: 30.957212988  
Correct output: 33.520660154   | Program output: 38.520660154  
Correct output: 42.238861085   | Program output: 18.191457889  
Correct output: -49.0227893765 | Program output: -35.0227893765
Correct output: 103.4057483059 | Program output: 103.4057483059
Correct output: -106.1378273779 | Program output: -113.1852305739
Correct output: 37.9625599991  | Program output: 67.9625599991 
Correct output: 71.9208193203  | Program output: 74.9208193203 
Correct output: 173.5348464317 | Program output: 145.5348464317
Correct output: -77.0615185935 | Program output: -74.1089217895
Correct output: -20.7643622555 | Program output: -20.7643622555
Correct output: 1.9827630815   | Program output: -31.0172369185
Correct output: -39.1198682611 | Program output: -5.1672714571 
Correct output: 1.1392376036   | Program output: 11.1392376036 
Correct output: 129.1930977679 | Program output: 103.1930977679
Correct output: 26.7496211861  | Program output: 57.7496211861 
Correct output: -11.2984801384 | Program output: -11.2984801384
Correct output: -136.1442960385 | Program output: -136.1916992345
Correct output: 143.0911996605 | Program output: 142.0911996605
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_mod} {:instruction float_pop} {:instruction integer_max} {:instruction integer_flush} {:instruction in1} {:instruction in1} {:instruction float_stackdepth} {:instruction in2} {:instruction integer_add} {:instruction float_inc} {:instruction integer_add} {:instruction float_inc} {:instruction float_inc} {:instruction integer_max} {:instruction float_inc} {:instruction integer_add} {:instruction float_inc} {:instruction integer_add} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_add} {:instruction float_inc} {:instruction integer_add} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_add} {:instruction float_inc} {:instruction float_inc} {:instruction integer_add} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_add} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_max} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_dup_times} {:instruction float_rot} {:instruction float_stackdepth} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_min} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_add} {:instruction float_inc} {:instruction float_inc} {:instruction integer_max} {:instruction float_inc} {:instruction float_dup} {:instruction float_inc} {:instruction 25} {:instruction float_stackdepth} {:instruction float_inc} {:instruction float_dup_times} {:instruction float_yank} {:instruction float_inc} {:instruction integer_add} {:instruction integer_yankdup} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_add} {:instruction integer_yankdup} {:instruction float_inc} {:instruction integer_max} {:instruction float_dup_times} {:instruction float_max} {:instruction float_dup_times} {:instruction float_stackdepth} {:instruction float_inc} {:instruction float_inc} {:instruction float_dup_times} {:instruction float_dup_times} {:instruction integer_add} {:instruction 25} {:instruction integer_flush} {:instruction integer_add} {:instruction float_yank} {:instruction float_dup_times} {:instruction integer_swap} {:instruction print_integer} {:instruction 76.04740319597805} {:instruction float_rot} {:instruction float_dup_times} {:instruction float_rot} {:instruction integer_shove} {:instruction float_inc} {:instruction float_dec} {:instruction float_inc} {:instruction float_sub} {:instruction float_rot} {:instruction integer_shove} {:instruction float_rot} {:instruction float_sub} {:instruction float_rot} {:instruction integer_sub} {:instruction float_inc} {:instruction integer_swap} {:instruction integer_min} {:instruction print_float} {:instruction integer_dec} {:instruction integer_stackdepth} {:instruction float_yank} {:instruction float_div} {:instruction float_mult} {:instruction integer_shove} {:instruction float_dup_times} {:instruction float_div} {:instruction float_pop})
Best program: (float_mod float_pop integer_max integer_flush in1 in1 float_stackdepth in2 integer_add float_inc integer_add float_inc float_inc integer_max float_inc integer_add float_inc integer_add float_inc float_inc float_inc float_inc integer_add float_inc integer_add float_inc float_inc float_inc float_inc integer_add float_inc float_inc integer_add float_inc float_inc float_inc integer_add float_inc float_inc float_inc float_inc float_inc float_inc float_inc integer_max float_inc float_inc float_inc float_inc float_dup_times float_rot float_stackdepth float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc integer_min float_inc float_inc float_inc float_inc float_inc integer_add float_inc float_inc integer_max float_inc float_dup float_inc 25 float_stackdepth float_inc float_dup_times float_yank float_inc integer_add integer_yankdup float_inc float_inc float_inc float_inc integer_add integer_yankdup float_inc integer_max float_dup_times float_max float_dup_times float_stackdepth float_inc float_inc float_dup_times float_dup_times integer_add 25 integer_flush integer_add float_yank float_dup_times integer_swap print_integer 76.04740319597805 float_rot float_dup_times float_rot integer_shove float_inc float_dec float_inc float_sub float_rot integer_shove float_rot float_sub float_rot integer_sub float_inc integer_swap integer_min print_float integer_dec integer_stackdepth float_yank float_div float_mult integer_shove float_dup_times float_div float_pop)
Errors: [25.9526 9 27.0 2 11.9526 9 38.0474 9 19.0 2 8.9526 8 25.0474 9 5.0 1 24.0474 10 14.0 2 0.0 0 7.0474 9 30.0 1 3.0 1 28.0 2 2.9526 8 0.0 0 33.0 9 33.9526 10 10.0 1 26.0 2 31.0 2 0.0 0 0.0474 6 1.0 1]
Total: 518.0
Mean: 10.36
Genome size: 133
Size: 134
Percent parens: 0.007
--- Population Statistics ---
Average total errors in population: 3058.617620899999
Median total errors in population: 931.0554
Error averages by case: (132.79377890000063 10.231 117.63869830000002 4.212 113.8928098000006 8.081 131.32760769999888 8.098 115.44680490000007 3.872 135.19221900000036 7.962 109.47555969999937 8.036 99.65400150000006 4.212 109.8269009999994 8.681 114.8322125000001 4.079 106.30389720000008 3.409 121.12842659999956 8.558 115.05944799999992 3.88 102.67440820000009 3.306 134.8842725999999 4.001 114.60556130000076 8.788 100.05435339999998 4.761 129.01780089999997 10.22 134.25474520000074 11.355 90.9333693 3.718 127.68291839999988 4.217 109.1720418 3.807 102.57598860000004 3.737 126.88326139999985 7.554 110.94053469999997 3.591)
Error minima by case: (0.0454 7 0.0351 1 0.0101 1 2.0474 1 0.3192 1 0.5593 2 1.9526 1 0.0 0 2.9526 1 0.0 0 0.0 0 0.0474 2 0.0 0 0.0 0 8.0 1 0.0474 1 0.0 0 0.171 3 15.9526 7 0.0132 1 1.1931 1 0.4641 1 0.0 0 0.0474 2 0.0 0)
Average genome size in population (length): 134.667
Average program size in population (points): 135.667
Average percent parens in population: 0.007
Minimum age in population: 127.1274808297009
Maximum age in population: 132.1624636222216
Average age in population: 129.7598883770345
Median age in population: 129.7654471315634
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 9
Genome diversity (% unique Plush genomes):	 0.934
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 9
Syntactic diversity (% unique Push programs):	 0.934
Total error diversity:				 0.608
Error (vector) diversity:			 0.734
Behavioral diversity:				 0.734
--- Run Statistics ---
Number of program evaluations used so far: 92000
Number of point (instruction) evaluations so far: 182285760
--- Timings ---
Current time: 1529616285254 milliseconds
Total Time:         349.5 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       122.7 seconds, 35.1%
Fitness Testing:    178.8 seconds, 51.2%
Report:              47.9 seconds, 13.7%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 91
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 92
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 92
;;******************************
;; -*- Number IO problem report - generation 92
Test total error for best: 28467.460199999976
Test mean error for best: 14.23373
;;------------------------------
Outputs of best individual on training cases:
Correct output: -74.6179542037 | Program output: -48.6653573997
Correct output: 78.7609586813  | Program output: 51.7609586813 
Correct output: 3.0100598709   | Program output: 14.9626566749 
Correct output: -99.2368061293 | Program output: -137.2842093253
Correct output: 88.6808415603  | Program output: 69.6808415603 
Correct output: -151.1060419578 | Program output: -142.1534451538
Correct output: 56.004616184   | Program output: 30.957212988  
Correct output: 33.520660154   | Program output: 38.520660154  
Correct output: 42.238861085   | Program output: 18.191457889  
Correct output: -49.0227893765 | Program output: -35.0227893765
Correct output: 103.4057483059 | Program output: 103.4057483059
Correct output: -106.1378273779 | Program output: -113.1852305739
Correct output: 37.9625599991  | Program output: 67.9625599991 
Correct output: 71.9208193203  | Program output: 74.9208193203 
Correct output: 173.5348464317 | Program output: 145.5348464317
Correct output: -77.0615185935 | Program output: -74.1089217895
Correct output: -20.7643622555 | Program output: -20.7643622555
Correct output: 1.9827630815   | Program output: -31.0172369185
Correct output: -39.1198682611 | Program output: -5.1672714571 
Correct output: 1.1392376036   | Program output: 11.1392376036 
Correct output: 129.1930977679 | Program output: 103.1930977679
Correct output: 26.7496211861  | Program output: 57.7496211861 
Correct output: -11.2984801384 | Program output: -11.2984801384
Correct output: -136.1442960385 | Program output: -136.1916992345
Correct output: 143.0911996605 | Program output: 142.0911996605
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_mod} {:instruction float_pop} {:instruction integer_max} {:instruction integer_flush} {:instruction in1} {:instruction in1} {:instruction float_stackdepth} {:instruction in2} {:instruction integer_add} {:instruction float_inc} {:instruction integer_add} {:instruction float_inc} {:instruction float_inc} {:instruction integer_max} {:instruction float_inc} {:instruction integer_add} {:instruction float_inc} {:instruction integer_add} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_add} {:instruction float_inc} {:instruction integer_add} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_add} {:instruction float_inc} {:instruction float_inc} {:instruction integer_add} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_add} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_max} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_dup_times} {:instruction float_rot} {:instruction float_stackdepth} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_min} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_add} {:instruction float_inc} {:instruction float_inc} {:instruction integer_max} {:instruction float_inc} {:instruction float_dup} {:instruction float_inc} {:instruction 25} {:instruction float_stackdepth} {:instruction float_inc} {:instruction float_dup_times} {:instruction float_yank} {:instruction float_inc} {:instruction integer_add} {:instruction integer_yankdup} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_add} {:instruction integer_yankdup} {:instruction float_inc} {:instruction integer_max} {:instruction float_dup_times} {:instruction float_max} {:instruction float_dup_times} {:instruction float_stackdepth} {:instruction float_inc} {:instruction float_inc} {:instruction float_dup_times} {:instruction float_dup_times} {:instruction integer_add} {:instruction 25} {:instruction integer_flush} {:instruction integer_add} {:instruction float_yank} {:instruction float_dup_times} {:instruction integer_swap} {:instruction print_integer} {:instruction 76.04740319597805} {:instruction float_rot} {:instruction float_dup_times} {:instruction float_rot} {:instruction integer_shove} {:instruction float_inc} {:instruction float_dec} {:instruction float_inc} {:instruction float_sub} {:instruction float_rot} {:instruction integer_shove} {:instruction float_rot} {:instruction float_sub} {:instruction float_rot} {:instruction integer_sub} {:instruction float_inc} {:instruction integer_swap} {:instruction integer_min} {:instruction print_float} {:instruction integer_dec} {:instruction integer_stackdepth} {:instruction float_yank} {:instruction float_div} {:instruction float_mult} {:instruction integer_shove} {:instruction float_dup_times} {:instruction float_div} {:instruction float_pop})
Best program: (float_mod float_pop integer_max integer_flush in1 in1 float_stackdepth in2 integer_add float_inc integer_add float_inc float_inc integer_max float_inc integer_add float_inc integer_add float_inc float_inc float_inc float_inc integer_add float_inc integer_add float_inc float_inc float_inc float_inc integer_add float_inc float_inc integer_add float_inc float_inc float_inc integer_add float_inc float_inc float_inc float_inc float_inc float_inc float_inc integer_max float_inc float_inc float_inc float_inc float_dup_times float_rot float_stackdepth float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc integer_min float_inc float_inc float_inc float_inc float_inc integer_add float_inc float_inc integer_max float_inc float_dup float_inc 25 float_stackdepth float_inc float_dup_times float_yank float_inc integer_add integer_yankdup float_inc float_inc float_inc float_inc integer_add integer_yankdup float_inc integer_max float_dup_times float_max float_dup_times float_stackdepth float_inc float_inc float_dup_times float_dup_times integer_add 25 integer_flush integer_add float_yank float_dup_times integer_swap print_integer 76.04740319597805 float_rot float_dup_times float_rot integer_shove float_inc float_dec float_inc float_sub float_rot integer_shove float_rot float_sub float_rot integer_sub float_inc integer_swap integer_min print_float integer_dec integer_stackdepth float_yank float_div float_mult integer_shove float_dup_times float_div float_pop)
Errors: [25.9526 9 27.0 2 11.9526 9 38.0474 9 19.0 2 8.9526 8 25.0474 9 5.0 1 24.0474 10 14.0 2 0.0 0 7.0474 9 30.0 1 3.0 1 28.0 2 2.9526 8 0.0 0 33.0 9 33.9526 10 10.0 1 26.0 2 31.0 2 0.0 0 0.0474 6 1.0 1]
Total: 518.0
Mean: 10.36
Genome size: 133
Size: 134
Percent parens: 0.007
--- Population Statistics ---
Average total errors in population: 3189.136694499999
Median total errors in population: 964.3702499999999
Error averages by case: (138.99441670000022 10.197 121.52936239999994 4.118 116.45288300000031 8.048 140.65047969999947 8.144 118.45300460000007 3.868 142.88426400000006 7.987 116.33068199999958 8.077 102.54378970000009 3.969 115.15242979999964 8.66 119.4353674000001 3.994 110.90226580000014 3.247 130.61938219999965 8.612 117.58132679999991 3.934 106.38484320000018 3.301 139.81490389999988 4.034 119.27898880000059 8.737 105.48763430000007 4.848 134.32453600000002 10.215 139.85567370000052 11.266 95.83638080000007 3.593 132.05853459999997 4.244 112.67988879999997 3.861 109.27647200000004 3.573 134.90518649999996 7.522 116.1219978 3.533)
Error minima by case: (0.463 8 0.2864 1 0.0474 1 2.0474 1 1.3192 1 0.0474 1 2.3159 1 0.0 0 0.2389 1 0.0 0 0.0 0 0.0474 1 0.9626 1 0.0 0 11.0 1 0.0474 1 0.0 0 0.0172 7 9.6735 7 0.1392 1 4.1931 1 0.0 0 0.0 0 0.0474 1 0.0 0)
Average genome size in population (length): 135.456
Average program size in population (points): 136.456
Average percent parens in population: 0.007
Minimum age in population: 128.8913051268554
Maximum age in population: 133.3780041429406
Average age in population: 131.0114779831109
Median age in population: 131.0647876920488
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 11
Genome diversity (% unique Plush genomes):	 0.937
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 11
Syntactic diversity (% unique Push programs):	 0.937
Total error diversity:				 0.611
Error (vector) diversity:			 0.736
Behavioral diversity:				 0.736
--- Run Statistics ---
Number of program evaluations used so far: 93000
Number of point (instruction) evaluations so far: 185672285
--- Timings ---
Current time: 1529616290417 milliseconds
Total Time:         354.6 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       124.1 seconds, 35.0%
Fitness Testing:    181.8 seconds, 51.3%
Report:              48.6 seconds, 13.7%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 92
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 93
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 93
;;******************************
;; -*- Number IO problem report - generation 93
Test total error for best: 29120.78739999996
Test mean error for best: 14.56039
;;------------------------------
Outputs of best individual on training cases:
Correct output: -74.6179542037 | Program output: -51.6653573997
Correct output: 78.7609586813  | Program output: 54.7609586813 
Correct output: 3.0100598709   | Program output: 11.9626566749 
Correct output: -99.2368061293 | Program output: -140.2842093253
Correct output: 88.6808415603  | Program output: 72.6808415603 
Correct output: -151.1060419578 | Program output: -145.1534451538
Correct output: 56.004616184   | Program output: 27.957212988  
Correct output: 33.520660154   | Program output: 41.520660154  
Correct output: 42.238861085   | Program output: 15.191457889  
Correct output: -49.0227893765 | Program output: -32.0227893765
Correct output: 103.4057483059 | Program output: 103.4057483059
Correct output: -106.1378273779 | Program output: -116.1852305739
Correct output: 37.9625599991  | Program output: 70.9625599991 
Correct output: 71.9208193203  | Program output: 74.9208193203 
Correct output: 173.5348464317 | Program output: 148.5348464317
Correct output: -77.0615185935 | Program output: -77.1089217895
Correct output: -20.7643622555 | Program output: -20.7643622555
Correct output: 1.9827630815   | Program output: -28.0172369185
Correct output: -39.1198682611 | Program output: -8.1672714571 
Correct output: 1.1392376036   | Program output: 4.1392376036  
Correct output: 129.1930977679 | Program output: 106.1930977679
Correct output: 26.7496211861  | Program output: 60.7496211861 
Correct output: -11.2984801384 | Program output: -8.2984801384 
Correct output: -136.1442960385 | Program output: -139.1916992345
Correct output: 143.0911996605 | Program output: 145.0911996605
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_mod} {:instruction float_pop} {:instruction integer_max} {:instruction integer_flush} {:instruction in1} {:instruction in1} {:instruction float_stackdepth} {:instruction in2} {:instruction integer_add} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_max} {:instruction float_inc} {:instruction integer_add} {:instruction float_inc} {:instruction float_inc} {:instruction integer_max} {:instruction float_inc} {:instruction integer_add} {:instruction float_inc} {:instruction integer_add} {:instruction float_inc} {:instruction integer_add} {:instruction integer_add} {:instruction float_inc} {:instruction float_inc} {:instruction integer_add} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_add} {:instruction integer_add} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_add} {:instruction integer_add} {:instruction float_inc} {:instruction integer_add} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_add} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_add} {:instruction float_inc} {:instruction integer_add} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_add} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_add} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_add} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_dup_times} {:instruction float_rot} {:instruction float_stackdepth} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_dup_items} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction 25} {:instruction float_stackdepth} {:instruction float_inc} {:instruction float_dup_times} {:instruction float_yank} {:instruction float_dup_times} {:instruction float_stackdepth} {:instruction float_inc} {:instruction float_dup_times} {:instruction float_yank} {:instruction float_min} {:instruction float_inc} {:instruction integer_add} {:instruction integer_flush} {:instruction float_inc} {:instruction integer_max} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction 25} {:instruction float_stackdepth} {:instruction float_inc} {:instruction float_inc} {:instruction float_dup_times} {:instruction float_shove} {:instruction float_dup_times} {:instruction float_yank} {:instruction float_dup_times} {:instruction integer_swap} {:instruction 25} {:instruction integer_flush} {:instruction integer_add} {:instruction integer_swap} {:instruction print_integer} {:instruction 76.04740319597805} {:instruction float_rot} {:instruction float_dup_times} {:instruction float_rot} {:instruction integer_shove} {:instruction float_inc} {:instruction float_sub} {:instruction float_rot} {:instruction integer_shove} {:instruction float_rot} {:instruction float_sub} {:instruction float_rot} {:instruction integer_sub} {:instruction float_inc} {:instruction integer_swap} {:instruction integer_min} {:instruction print_float} {:instruction integer_dec} {:instruction integer_stackdepth} {:instruction float_yank} {:instruction float_div} {:instruction float_mult} {:instruction integer_shove} {:instruction float_dup_times} {:instruction float_div} {:instruction float_pop})
Best program: (float_mod float_pop integer_max integer_flush in1 in1 float_stackdepth in2 integer_add float_inc float_inc float_inc integer_max float_inc integer_add float_inc float_inc integer_max float_inc integer_add float_inc integer_add float_inc integer_add integer_add float_inc float_inc integer_add float_inc float_inc float_inc integer_add integer_add float_inc float_inc float_inc integer_add integer_add float_inc integer_add float_inc float_inc float_inc float_inc integer_add float_inc float_inc float_inc float_inc integer_add float_inc integer_add float_inc float_inc float_inc float_inc integer_add float_inc float_inc float_inc float_inc integer_add float_inc float_inc float_inc integer_add float_inc float_inc float_inc float_inc float_inc float_dup_times float_rot float_stackdepth float_inc float_inc float_inc float_inc integer_dup_items float_inc float_inc float_inc 25 float_stackdepth float_inc float_dup_times float_yank float_dup_times float_stackdepth float_inc float_dup_times float_yank float_min float_inc integer_add integer_flush float_inc integer_max float_inc float_inc float_inc 25 float_stackdepth float_inc float_inc float_dup_times float_shove float_dup_times float_yank float_dup_times integer_swap 25 integer_flush integer_add integer_swap print_integer 76.04740319597805 float_rot float_dup_times float_rot integer_shove float_inc float_sub float_rot integer_shove float_rot float_sub float_rot integer_sub float_inc integer_swap integer_min print_float integer_dec integer_stackdepth float_yank float_div float_mult integer_shove float_dup_times float_div float_pop)
Errors: [22.9526 9 24.0 2 8.9526 9 41.0474 9 16.0 2 5.9526 8 28.0474 9 8.0 2 27.0474 10 17.0 2 0.0 0 10.0474 8 33.0 2 3.0 1 25.0 2 0.0474 7 0.0 0 30.0 10 30.9526 10 3.0 1 23.0 2 34.0 2 3.0 2 3.0474 7 2.0 1]
Total: 516.0948
Mean: 10.321896
Genome size: 142
Size: 143
Percent parens: 0.007
--- Population Statistics ---
Average total errors in population: 3044.2097217
Median total errors in population: 753.0473999999999
Error averages by case: (133.79058330000055 10.182 114.24705140000006 4.062 112.92881800000055 8.222 135.45345219999902 8.253 111.72302820000007 3.861 138.45087680000034 8.086 111.4640635999993 8.177 94.98670180000002 3.978 110.33953029999932 8.837 111.12143800000015 4.057 103.94770380000008 3.044 126.21961259999948 8.749 112.05294009999989 3.902 100.78434400000017 3.222 132.02222569999984 4.027 116.18746750000064 8.993 98.00898230000004 4.858 125.36310919999994 10.27 135.6748953000008 11.345 95.83675130000002 3.792 124.55245910000001 4.28 108.7545737 3.832 99.98471770000003 3.577 129.9466911999996 7.601 107.59870459999986 3.562)
Error minima by case: (0.1135 7 0.2864 1 0.0101 1 0.2383 1 1.0 1 0.0474 1 0.531 1 0.0 0 0.0474 1 0.0 0 0.0 0 0.0474 1 0.0 0 0.0 0 10.0 1 0.0474 1 0.0 0 0.4779 7 12.0725 8 0.1392 1 4.1931 1 0.0 0 0.0 0 0.0474 1 0.0 0)
Average genome size in population (length): 135.944
Average program size in population (points): 136.944
Average percent parens in population: 0.007
Minimum age in population: 130.1303605613966
Maximum age in population: 134.4970882038188
Average age in population: 132.317214454462
Median age in population: 132.3448118748421
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 6
Genome diversity (% unique Plush genomes):	 0.941
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 6
Syntactic diversity (% unique Push programs):	 0.941
Total error diversity:				 0.581
Error (vector) diversity:			 0.714
Behavioral diversity:				 0.714
--- Run Statistics ---
Number of program evaluations used so far: 94000
Number of point (instruction) evaluations so far: 189070885
--- Timings ---
Current time: 1529616295637 milliseconds
Total Time:         359.8 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       125.5 seconds, 34.9%
Fitness Testing:    184.8 seconds, 51.4%
Report:              49.3 seconds, 13.7%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 93
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 94
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 94
;;******************************
;; -*- Number IO problem report - generation 94
Test total error for best: 29064.78739999996
Test mean error for best: 14.53239
;;------------------------------
Outputs of best individual on training cases:
Correct output: -74.6179542037 | Program output: -51.6653573997
Correct output: 78.7609586813  | Program output: 51.7609586813 
Correct output: 3.0100598709   | Program output: 11.9626566749 
Correct output: -99.2368061293 | Program output: -140.2842093253
Correct output: 88.6808415603  | Program output: 69.6808415603 
Correct output: -151.1060419578 | Program output: -145.1534451538
Correct output: 56.004616184   | Program output: 27.957212988  
Correct output: 33.520660154   | Program output: 38.520660154  
Correct output: 42.238861085   | Program output: 15.191457889  
Correct output: -49.0227893765 | Program output: -35.0227893765
Correct output: 103.4057483059 | Program output: 103.4057483059
Correct output: -106.1378273779 | Program output: -116.1852305739
Correct output: 37.9625599991  | Program output: 67.9625599991 
Correct output: 71.9208193203  | Program output: 74.9208193203 
Correct output: 173.5348464317 | Program output: 145.5348464317
Correct output: -77.0615185935 | Program output: -77.1089217895
Correct output: -20.7643622555 | Program output: -20.7643622555
Correct output: 1.9827630815   | Program output: -31.0172369185
Correct output: -39.1198682611 | Program output: -8.1672714571 
Correct output: 1.1392376036   | Program output: 11.1392376036 
Correct output: 129.1930977679 | Program output: 103.1930977679
Correct output: 26.7496211861  | Program output: 57.7496211861 
Correct output: -11.2984801384 | Program output: -11.2984801384
Correct output: -136.1442960385 | Program output: -139.1916992345
Correct output: 143.0911996605 | Program output: 142.0911996605
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_mod} {:instruction float_pop} {:instruction integer_mod} {:instruction integer_flush} {:instruction in1} {:instruction in1} {:instruction float_stackdepth} {:instruction in2} {:instruction integer_add} {:instruction float_inc} {:instruction integer_add} {:instruction float_inc} {:instruction integer_add} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_add} {:instruction float_inc} {:instruction integer_add} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_add} {:instruction integer_max} {:instruction integer_add} {:instruction float_inc} {:instruction integer_add} {:instruction float_inc} {:instruction integer_add} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_add} {:instruction float_inc} {:instruction float_inc} {:instruction integer_add} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_add} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_add} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_max} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_dup_times} {:instruction float_rot} {:instruction float_inc} {:instruction float_inc} {:instruction float_dup_times} {:instruction float_rot} {:instruction float_stackdepth} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_add} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_add} {:instruction float_inc} {:instruction float_inc} {:instruction integer_max} {:instruction float_inc} {:instruction float_dup} {:instruction float_inc} {:instruction 25} {:instruction float_stackdepth} {:instruction float_inc} {:instruction float_dup_times} {:instruction float_yank} {:instruction float_inc} {:instruction integer_add} {:instruction integer_yankdup} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_add} {:instruction integer_yankdup} {:instruction float_inc} {:instruction integer_max} {:instruction float_dup_times} {:instruction float_max} {:instruction float_dup_times} {:instruction float_stackdepth} {:instruction float_inc} {:instruction float_inc} {:instruction float_dup_times} {:instruction float_dup_times} {:instruction integer_add} {:instruction 25} {:instruction integer_flush} {:instruction integer_add} {:instruction float_yank} {:instruction float_dup_times} {:instruction integer_swap} {:instruction print_integer} {:instruction 76.04740319597805} {:instruction float_rot} {:instruction float_cos} {:instruction float_rot} {:instruction integer_shove} {:instruction float_inc} {:instruction float_dec} {:instruction float_inc} {:instruction float_sub} {:instruction float_rot} {:instruction integer_shove} {:instruction float_rot} {:instruction float_sub} {:instruction float_rot} {:instruction integer_sub} {:instruction float_inc} {:instruction integer_swap} {:instruction integer_min} {:instruction print_float} {:instruction integer_dec} {:instruction integer_stackdepth} {:instruction float_yank} {:instruction float_div} {:instruction float_mult} {:instruction integer_shove} {:instruction float_dup_times} {:instruction float_div} {:instruction float_pop})
Best program: (float_mod float_pop integer_mod integer_flush in1 in1 float_stackdepth in2 integer_add float_inc integer_add float_inc integer_add float_inc float_inc float_inc integer_add float_inc integer_add float_inc float_inc float_inc float_inc integer_add integer_max integer_add float_inc integer_add float_inc integer_add float_inc float_inc float_inc integer_add float_inc float_inc integer_add float_inc float_inc float_inc float_inc integer_add float_inc float_inc float_inc integer_add float_inc float_inc float_inc float_inc float_inc float_inc float_inc integer_max float_inc float_inc float_inc float_inc float_dup_times float_rot float_inc float_inc float_dup_times float_rot float_stackdepth float_inc float_inc float_inc integer_add float_inc float_inc float_inc float_inc float_inc integer_add float_inc float_inc integer_max float_inc float_dup float_inc 25 float_stackdepth float_inc float_dup_times float_yank float_inc integer_add integer_yankdup float_inc float_inc float_inc float_inc integer_add integer_yankdup float_inc integer_max float_dup_times float_max float_dup_times float_stackdepth float_inc float_inc float_dup_times float_dup_times integer_add 25 integer_flush integer_add float_yank float_dup_times integer_swap print_integer 76.04740319597805 float_rot float_cos float_rot integer_shove float_inc float_dec float_inc float_sub float_rot integer_shove float_rot float_sub float_rot integer_sub float_inc integer_swap integer_min print_float integer_dec integer_stackdepth float_yank float_div float_mult integer_shove float_dup_times float_div float_pop)
Errors: [22.9526 9 27.0 2 8.9526 9 41.0474 9 19.0 2 5.9526 8 28.0474 9 5.0 1 27.0474 10 14.0 2 0.0 0 10.0474 8 30.0 1 3.0 1 28.0 2 0.0474 7 0.0 0 33.0 9 30.9526 10 10.0 1 26.0 2 31.0 2 0.0 0 3.0474 7 1.0 1]
Total: 517.0948
Mean: 10.341896
Genome size: 141
Size: 142
Percent parens: 0.007
--- Population Statistics ---
Average total errors in population: 3242.5076778000002
Median total errors in population: 729.9526
Error averages by case: (143.31216580000023 10.282 122.65699409999998 3.996 123.69001610000068 8.147 145.50251069999976 8.215 118.74668200000002 3.804 146.1764756999999 8.054 122.02338279999898 8.131 103.2273915999999 3.763 121.2174010999991 8.732 119.15327830000012 4.006 111.28448340000008 2.782 134.72692189999955 8.698 120.2591526999999 3.787 108.88042500000009 3.037 136.80739669999986 3.989 121.60576450000093 9.035 103.56755499999996 4.631 132.99581050000006 10.323 147.41640330000004 11.386 101.85566730000012 3.516 130.00976029999998 4.173 117.19519769999998 3.747 107.17304140000003 3.48 138.24639269999977 7.478 114.17040719999994 3.415)
Error minima by case: (0.4294 2 0.2864 1 0.8235 1 6.2368 1 3.3192 1 1.0474 2 0.9526 1 0.0 0 1.9526 1 0.0 0 0.0 0 0.0474 1 0.0 0 0.0 0 13.0 1 0.0474 1 0.0 0 0.0172 8 6.8801 7 0.1392 1 1.1931 1 0.0 0 0.0 0 0.0474 2 0.0 0)
Average genome size in population (length): 136.14
Average program size in population (points): 137.14
Average percent parens in population: 0.007
Minimum age in population: 131.1303605613966
Maximum age in population: 136.0216074090947
Average age in population: 133.6205790935634
Median age in population: 133.6421142240224
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 6
Genome diversity (% unique Plush genomes):	 0.942
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 6
Syntactic diversity (% unique Push programs):	 0.942
Total error diversity:				 0.556
Error (vector) diversity:			 0.692
Behavioral diversity:				 0.692
--- Run Statistics ---
Number of program evaluations used so far: 95000
Number of point (instruction) evaluations so far: 192474435
--- Timings ---
Current time: 1529616300800 milliseconds
Total Time:         365.0 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       126.9 seconds, 34.8%
Fitness Testing:    187.9 seconds, 51.5%
Report:              50.1 seconds, 13.7%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 94
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 95
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 95
;;******************************
;; -*- Number IO problem report - generation 95
Test total error for best: 29064.78739999996
Test mean error for best: 14.53239
;;------------------------------
Outputs of best individual on training cases:
Correct output: -74.6179542037 | Program output: -51.6653573997
Correct output: 78.7609586813  | Program output: 51.7609586813 
Correct output: 3.0100598709   | Program output: 11.9626566749 
Correct output: -99.2368061293 | Program output: -140.2842093253
Correct output: 88.6808415603  | Program output: 69.6808415603 
Correct output: -151.1060419578 | Program output: -145.1534451538
Correct output: 56.004616184   | Program output: 27.957212988  
Correct output: 33.520660154   | Program output: 38.520660154  
Correct output: 42.238861085   | Program output: 15.191457889  
Correct output: -49.0227893765 | Program output: -35.0227893765
Correct output: 103.4057483059 | Program output: 103.4057483059
Correct output: -106.1378273779 | Program output: -116.1852305739
Correct output: 37.9625599991  | Program output: 67.9625599991 
Correct output: 71.9208193203  | Program output: 74.9208193203 
Correct output: 173.5348464317 | Program output: 145.5348464317
Correct output: -77.0615185935 | Program output: -77.1089217895
Correct output: -20.7643622555 | Program output: -20.7643622555
Correct output: 1.9827630815   | Program output: -31.0172369185
Correct output: -39.1198682611 | Program output: -8.1672714571 
Correct output: 1.1392376036   | Program output: 11.1392376036 
Correct output: 129.1930977679 | Program output: 103.1930977679
Correct output: 26.7496211861  | Program output: 57.7496211861 
Correct output: -11.2984801384 | Program output: -11.2984801384
Correct output: -136.1442960385 | Program output: -139.1916992345
Correct output: 143.0911996605 | Program output: 142.0911996605
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_mod} {:instruction float_pop} {:instruction integer_mod} {:instruction integer_flush} {:instruction in1} {:instruction in1} {:instruction float_stackdepth} {:instruction in2} {:instruction integer_add} {:instruction float_inc} {:instruction integer_add} {:instruction float_inc} {:instruction integer_add} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_add} {:instruction float_inc} {:instruction integer_add} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_add} {:instruction integer_max} {:instruction integer_add} {:instruction float_inc} {:instruction integer_add} {:instruction float_inc} {:instruction integer_add} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_add} {:instruction float_inc} {:instruction float_inc} {:instruction integer_add} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_add} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_add} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_max} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_dup_times} {:instruction float_rot} {:instruction float_inc} {:instruction float_inc} {:instruction float_dup_times} {:instruction float_rot} {:instruction float_stackdepth} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_add} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_add} {:instruction float_inc} {:instruction float_inc} {:instruction integer_max} {:instruction float_inc} {:instruction float_dup} {:instruction float_inc} {:instruction 25} {:instruction float_stackdepth} {:instruction float_inc} {:instruction float_dup_times} {:instruction float_yank} {:instruction float_inc} {:instruction integer_add} {:instruction integer_yankdup} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_add} {:instruction integer_yankdup} {:instruction float_inc} {:instruction integer_max} {:instruction float_dup_times} {:instruction float_max} {:instruction float_dup_times} {:instruction float_stackdepth} {:instruction float_inc} {:instruction float_inc} {:instruction float_dup_times} {:instruction float_dup_times} {:instruction integer_add} {:instruction 25} {:instruction integer_flush} {:instruction integer_add} {:instruction float_yank} {:instruction float_dup_times} {:instruction integer_swap} {:instruction print_integer} {:instruction 76.04740319597805} {:instruction float_rot} {:instruction float_cos} {:instruction float_rot} {:instruction integer_shove} {:instruction float_inc} {:instruction integer_mod} {:instruction float_inc} {:instruction float_sub} {:instruction float_rot} {:instruction integer_shove} {:instruction float_rot} {:instruction float_sub} {:instruction float_rot} {:instruction integer_sub} {:instruction float_inc} {:instruction integer_swap} {:instruction integer_min} {:instruction print_float} {:instruction integer_dec} {:instruction integer_stackdepth} {:instruction float_yank} {:instruction float_div} {:instruction float_mult} {:instruction integer_shove} {:instruction float_dup_times} {:instruction float_div} {:instruction float_pop})
Best program: (float_mod float_pop integer_mod integer_flush in1 in1 float_stackdepth in2 integer_add float_inc integer_add float_inc integer_add float_inc float_inc float_inc integer_add float_inc integer_add float_inc float_inc float_inc float_inc integer_add integer_max integer_add float_inc integer_add float_inc integer_add float_inc float_inc float_inc integer_add float_inc float_inc integer_add float_inc float_inc float_inc float_inc integer_add float_inc float_inc float_inc integer_add float_inc float_inc float_inc float_inc float_inc float_inc float_inc integer_max float_inc float_inc float_inc float_inc float_dup_times float_rot float_inc float_inc float_dup_times float_rot float_stackdepth float_inc float_inc float_inc integer_add float_inc float_inc float_inc float_inc float_inc integer_add float_inc float_inc integer_max float_inc float_dup float_inc 25 float_stackdepth float_inc float_dup_times float_yank float_inc integer_add integer_yankdup float_inc float_inc float_inc float_inc integer_add integer_yankdup float_inc integer_max float_dup_times float_max float_dup_times float_stackdepth float_inc float_inc float_dup_times float_dup_times integer_add 25 integer_flush integer_add float_yank float_dup_times integer_swap print_integer 76.04740319597805 float_rot float_cos float_rot integer_shove float_inc integer_mod float_inc float_sub float_rot integer_shove float_rot float_sub float_rot integer_sub float_inc integer_swap integer_min print_float integer_dec integer_stackdepth float_yank float_div float_mult integer_shove float_dup_times float_div float_pop)
Errors: [22.9526 9 27.0 2 8.9526 9 41.0474 9 19.0 2 5.9526 8 28.0474 9 5.0 1 27.0474 10 14.0 2 0.0 0 10.0474 8 30.0 1 3.0 1 28.0 2 0.0474 7 0.0 0 33.0 9 30.9526 10 10.0 1 26.0 2 31.0 2 0.0 0 3.0474 7 1.0 1]
Total: 517.0948
Mean: 10.341896
Genome size: 141
Size: 142
Percent parens: 0.007
--- Population Statistics ---
Average total errors in population: 3280.5917795
Median total errors in population: 1007.5
Error averages by case: (148.9680835999999 10.316 123.04767070000003 3.725 126.15773760000066 7.938 149.37719959999987 7.937 119.33703500000004 3.636 153.38158199999995 7.931 122.06606759999917 7.925 103.12728750000002 3.537 121.87074619999922 8.514 117.88244870000003 3.756 108.07893110000008 2.641 140.57185159999986 8.518 119.32600999999997 3.559 106.57466480000004 2.988 136.71258309999996 3.792 130.02055030000093 9.076 104.10240339999999 4.562 134.19326700000002 10.143 148.16408240000015 11.44 106.18033400000003 3.386 131.29575389999997 4.042 117.63514620000001 3.555 108.01075569999998 3.171 145.05120889999984 7.344 112.7903786 3.236)
Error minima by case: (2.3406 8 0.2864 1 0.7881 1 1.0399 1 0.3192 1 0.9526 1 2.0474 1 0.0 0 1.0474 1 0.0 0 0.0 0 0.0474 1 0.0 0 0.0 0 17.0 1 0.0347 1 0.0 0 1.0412 7 5.9275 7 0.1392 1 14.1834 1 0.0 0 0.0 0 0.0474 1 0.0 0)
Average genome size in population (length): 136.155
Average program size in population (points): 137.155
Average percent parens in population: 0.007
Minimum age in population: 132.7855061428644
Maximum age in population: 137.1041664614842
Average age in population: 134.9921020023884
Median age in population: 134.9835064347974
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 9
Genome diversity (% unique Plush genomes):	 0.939
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 9
Syntactic diversity (% unique Push programs):	 0.939
Total error diversity:				 0.558
Error (vector) diversity:			 0.683
Behavioral diversity:				 0.683
--- Run Statistics ---
Number of program evaluations used so far: 96000
Number of point (instruction) evaluations so far: 195878360
--- Timings ---
Current time: 1529616306008 milliseconds
Total Time:         370.2 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       128.3 seconds, 34.6%
Fitness Testing:    191.0 seconds, 51.6%
Report:              50.8 seconds, 13.7%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 95
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 96
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 96
;;******************************
;; -*- Number IO problem report - generation 96
Test total error for best: 28931.78739999996
Test mean error for best: 14.46589
;;------------------------------
Outputs of best individual on training cases:
Correct output: -74.6179542037 | Program output: -51.6653573997
Correct output: 78.7609586813  | Program output: 51.7609586813 
Correct output: 3.0100598709   | Program output: 11.9626566749 
Correct output: -99.2368061293 | Program output: -140.2842093253
Correct output: 88.6808415603  | Program output: 69.6808415603 
Correct output: -151.1060419578 | Program output: -145.1534451538
Correct output: 56.004616184   | Program output: 27.957212988  
Correct output: 33.520660154   | Program output: 38.520660154  
Correct output: 42.238861085   | Program output: 15.191457889  
Correct output: -49.0227893765 | Program output: -35.0227893765
Correct output: 103.4057483059 | Program output: 103.4057483059
Correct output: -106.1378273779 | Program output: -116.1852305739
Correct output: 37.9625599991  | Program output: 67.9625599991 
Correct output: 71.9208193203  | Program output: 74.9208193203 
Correct output: 173.5348464317 | Program output: 145.5348464317
Correct output: -77.0615185935 | Program output: -77.1089217895
Correct output: -20.7643622555 | Program output: -20.7643622555
Correct output: 1.9827630815   | Program output: -31.0172369185
Correct output: -39.1198682611 | Program output: -8.1672714571 
Correct output: 1.1392376036   | Program output: 11.1392376036 
Correct output: 129.1930977679 | Program output: 103.1930977679
Correct output: 26.7496211861  | Program output: 57.7496211861 
Correct output: -11.2984801384 | Program output: -11.2984801384
Correct output: -136.1442960385 | Program output: -139.1916992345
Correct output: 143.0911996605 | Program output: 142.0911996605
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_mod} {:instruction float_pop} {:instruction integer_max} {:instruction integer_flush} {:instruction in1} {:instruction in1} {:instruction float_stackdepth} {:instruction in2} {:instruction integer_add} {:instruction float_inc} {:instruction float_rot} {:instruction float_inc} {:instruction float_inc} {:instruction integer_max} {:instruction float_inc} {:instruction integer_add} {:instruction float_inc} {:instruction integer_add} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_add} {:instruction float_rot} {:instruction integer_add} {:instruction float_inc} {:instruction float_inc} {:instruction integer_add} {:instruction float_rot} {:instruction integer_add} {:instruction float_inc} {:instruction integer_add} {:instruction float_inc} {:instruction integer_add} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_add} {:instruction float_inc} {:instruction integer_mult} {:instruction integer_add} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_add} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_add} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_max} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_dup_times} {:instruction float_rot} {:instruction float_stackdepth} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_min} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_add} {:instruction float_inc} {:instruction float_inc} {:instruction integer_max} {:instruction float_inc} {:instruction float_dup} {:instruction integer_min} {:instruction 25} {:instruction float_stackdepth} {:instruction float_inc} {:instruction float_dup_times} {:instruction float_yank} {:instruction float_inc} {:instruction integer_mult} {:instruction integer_yankdup} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_add} {:instruction integer_yankdup} {:instruction float_inc} {:instruction integer_max} {:instruction float_dup_times} {:instruction float_max} {:instruction float_dup_times} {:instruction float_stackdepth} {:instruction float_inc} {:instruction float_inc} {:instruction float_dup_times} {:instruction float_dup_times} {:instruction integer_add} {:instruction 25} {:instruction integer_flush} {:instruction integer_add} {:instruction float_yank} {:instruction float_dup_times} {:instruction integer_swap} {:instruction print_integer} {:instruction 76.04740319597805} {:instruction float_rot} {:instruction float_dup_times} {:instruction float_rot} {:instruction integer_shove} {:instruction integer_inc} {:instruction float_dec} {:instruction float_inc} {:instruction float_sub} {:instruction float_rot} {:instruction integer_shove} {:instruction float_rot} {:instruction float_sub} {:instruction float_rot} {:instruction integer_sub} {:instruction float_inc} {:instruction integer_swap} {:instruction integer_min} {:instruction print_float} {:instruction integer_dec} {:instruction integer_stackdepth} {:instruction float_yank} {:instruction float_div} {:instruction float_mult} {:instruction integer_shove} {:instruction float_dup_times} {:instruction float_div} {:instruction float_pop})
Best program: (float_mod float_pop integer_max integer_flush in1 in1 float_stackdepth in2 integer_add float_inc float_rot float_inc float_inc integer_max float_inc integer_add float_inc integer_add float_inc float_inc float_inc float_inc integer_add float_rot integer_add float_inc float_inc integer_add float_rot integer_add float_inc integer_add float_inc integer_add float_inc float_inc float_inc integer_add float_inc integer_mult integer_add float_inc float_inc float_inc integer_add float_inc float_inc float_inc integer_add float_inc float_inc float_inc float_inc float_inc float_inc integer_max float_inc float_inc float_inc float_inc float_dup_times float_rot float_stackdepth float_inc float_inc float_inc float_inc float_inc float_inc integer_min float_inc float_inc float_inc float_inc float_inc integer_add float_inc float_inc integer_max float_inc float_dup integer_min 25 float_stackdepth float_inc float_dup_times float_yank float_inc integer_mult integer_yankdup float_inc float_inc float_inc float_inc integer_add integer_yankdup float_inc integer_max float_dup_times float_max float_dup_times float_stackdepth float_inc float_inc float_dup_times float_dup_times integer_add 25 integer_flush integer_add float_yank float_dup_times integer_swap print_integer 76.04740319597805 float_rot float_dup_times float_rot integer_shove integer_inc float_dec float_inc float_sub float_rot integer_shove float_rot float_sub float_rot integer_sub float_inc integer_swap integer_min print_float integer_dec integer_stackdepth float_yank float_div float_mult integer_shove float_dup_times float_div float_pop)
Errors: [22.9526 9 27.0 2 8.9526 9 41.0474 9 19.0 2 5.9526 8 28.0474 9 5.0 1 27.0474 10 14.0 2 0.0 0 10.0474 8 30.0 1 3.0 1 28.0 2 0.0474 7 0.0 0 33.0 9 30.9526 10 10.0 1 26.0 2 31.0 2 0.0 0 3.0474 7 1.0 1]
Total: 517.0948
Mean: 10.341896
Genome size: 142
Size: 143
Percent parens: 0.007
--- Population Statistics ---
Average total errors in population: 2907.9992061000003
Median total errors in population: 768.1896
Error averages by case: (135.00305020000036 10.232 105.09817049999995 3.852 114.00800570000014 8.059 135.3281685999993 7.997 102.11648630000002 3.762 138.1659429000002 7.982 111.09619529999975 8.001 86.14139010000005 3.605 111.02530529999972 8.627 102.51119610000009 3.925 93.7798055000001 2.539 125.64618199999985 8.541 103.4981048 3.667 91.38465960000008 2.899 122.03823959999993 3.913 115.5177410000003 8.958 88.50701030000002 4.474 116.05365559999997 10.139 137.09801650000043 11.419 91.07273040000004 3.509 115.52901459999998 4.084 100.3016438 3.734 91.02176070000003 3.308 129.81416019999946 7.348 98.35557049999996 3.313)
Error minima by case: (0.7831 8 0.2864 1 0.2135 1 9.0474 1 1.3192 1 0.9526 1 1.9526 1 0.0 0 1.0474 1 0.0 0 0.0 0 0.0474 1 0.0 0 0.0 0 11.0 1 0.0474 1 0.0 0 0.0172 7 10.3632 8 0.5672 1 9.0 1 0.0 0 0.0 0 0.0474 1 0.0 0)
Average genome size in population (length): 136.181
Average program size in population (points): 137.181
Average percent parens in population: 0.007
Minimum age in population: 134.1106668848028
Maximum age in population: 138.3713828563328
Average age in population: 136.2735311781479
Median age in population: 136.3334197447188
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 6
Genome diversity (% unique Plush genomes):	 0.93
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 6
Syntactic diversity (% unique Push programs):	 0.93
Total error diversity:				 0.562
Error (vector) diversity:			 0.675
Behavioral diversity:				 0.677
--- Run Statistics ---
Number of program evaluations used so far: 97000
Number of point (instruction) evaluations so far: 199282885
--- Timings ---
Current time: 1529616311176 milliseconds
Total Time:         375.4 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       129.6 seconds, 34.5%
Fitness Testing:    194.0 seconds, 51.7%
Report:              51.6 seconds, 13.7%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 96
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 97
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 97
;;******************************
;; -*- Number IO problem report - generation 97
Test total error for best: 29064.78739999996
Test mean error for best: 14.53239
;;------------------------------
Outputs of best individual on training cases:
Correct output: -74.6179542037 | Program output: -51.6653573997
Correct output: 78.7609586813  | Program output: 51.7609586813 
Correct output: 3.0100598709   | Program output: 11.9626566749 
Correct output: -99.2368061293 | Program output: -140.2842093253
Correct output: 88.6808415603  | Program output: 69.6808415603 
Correct output: -151.1060419578 | Program output: -145.1534451538
Correct output: 56.004616184   | Program output: 27.957212988  
Correct output: 33.520660154   | Program output: 38.520660154  
Correct output: 42.238861085   | Program output: 15.191457889  
Correct output: -49.0227893765 | Program output: -35.0227893765
Correct output: 103.4057483059 | Program output: 103.4057483059
Correct output: -106.1378273779 | Program output: -116.1852305739
Correct output: 37.9625599991  | Program output: 67.9625599991 
Correct output: 71.9208193203  | Program output: 74.9208193203 
Correct output: 173.5348464317 | Program output: 145.5348464317
Correct output: -77.0615185935 | Program output: -77.1089217895
Correct output: -20.7643622555 | Program output: -20.7643622555
Correct output: 1.9827630815   | Program output: -31.0172369185
Correct output: -39.1198682611 | Program output: -8.1672714571 
Correct output: 1.1392376036   | Program output: 11.1392376036 
Correct output: 129.1930977679 | Program output: 103.1930977679
Correct output: 26.7496211861  | Program output: 57.7496211861 
Correct output: -11.2984801384 | Program output: -11.2984801384
Correct output: -136.1442960385 | Program output: -139.1916992345
Correct output: 143.0911996605 | Program output: 142.0911996605
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_mod} {:instruction float_pop} {:instruction integer_mod} {:instruction integer_flush} {:instruction in1} {:instruction in1} {:instruction float_stackdepth} {:instruction in2} {:instruction integer_add} {:instruction float_inc} {:instruction integer_add} {:instruction float_inc} {:instruction integer_add} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_add} {:instruction float_inc} {:instruction integer_add} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_add} {:instruction integer_max} {:instruction integer_add} {:instruction float_inc} {:instruction integer_add} {:instruction float_inc} {:instruction integer_add} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_add} {:instruction float_inc} {:instruction float_inc} {:instruction integer_add} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_add} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_add} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_max} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_dup_times} {:instruction float_rot} {:instruction float_inc} {:instruction float_inc} {:instruction float_dup_times} {:instruction float_rot} {:instruction float_stackdepth} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_add} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_add} {:instruction float_inc} {:instruction float_inc} {:instruction integer_max} {:instruction float_inc} {:instruction float_dup} {:instruction float_inc} {:instruction 25} {:instruction float_stackdepth} {:instruction float_inc} {:instruction float_dup_times} {:instruction float_yank} {:instruction float_inc} {:instruction integer_add} {:instruction integer_yankdup} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_add} {:instruction integer_yankdup} {:instruction float_inc} {:instruction integer_max} {:instruction float_dup_times} {:instruction float_max} {:instruction float_dup_times} {:instruction float_stackdepth} {:instruction float_inc} {:instruction float_inc} {:instruction float_dup_times} {:instruction float_dup_times} {:instruction integer_add} {:instruction 25} {:instruction integer_flush} {:instruction integer_add} {:instruction float_yank} {:instruction float_dup_times} {:instruction integer_swap} {:instruction print_integer} {:instruction 76.04740319597805} {:instruction float_rot} {:instruction float_cos} {:instruction float_rot} {:instruction integer_shove} {:instruction float_inc} {:instruction integer_mod} {:instruction float_inc} {:instruction float_sub} {:instruction float_rot} {:instruction integer_shove} {:instruction float_rot} {:instruction float_sub} {:instruction float_rot} {:instruction integer_sub} {:instruction float_inc} {:instruction integer_swap} {:instruction integer_min} {:instruction print_float} {:instruction integer_dec} {:instruction integer_stackdepth} {:instruction float_yank} {:instruction float_div} {:instruction float_mult} {:instruction integer_shove} {:instruction float_dup_times} {:instruction float_div} {:instruction float_pop})
Best program: (float_mod float_pop integer_mod integer_flush in1 in1 float_stackdepth in2 integer_add float_inc integer_add float_inc integer_add float_inc float_inc float_inc integer_add float_inc integer_add float_inc float_inc float_inc float_inc integer_add integer_max integer_add float_inc integer_add float_inc integer_add float_inc float_inc float_inc integer_add float_inc float_inc integer_add float_inc float_inc float_inc float_inc integer_add float_inc float_inc float_inc integer_add float_inc float_inc float_inc float_inc float_inc float_inc float_inc integer_max float_inc float_inc float_inc float_inc float_dup_times float_rot float_inc float_inc float_dup_times float_rot float_stackdepth float_inc float_inc float_inc integer_add float_inc float_inc float_inc float_inc float_inc integer_add float_inc float_inc integer_max float_inc float_dup float_inc 25 float_stackdepth float_inc float_dup_times float_yank float_inc integer_add integer_yankdup float_inc float_inc float_inc float_inc integer_add integer_yankdup float_inc integer_max float_dup_times float_max float_dup_times float_stackdepth float_inc float_inc float_dup_times float_dup_times integer_add 25 integer_flush integer_add float_yank float_dup_times integer_swap print_integer 76.04740319597805 float_rot float_cos float_rot integer_shove float_inc integer_mod float_inc float_sub float_rot integer_shove float_rot float_sub float_rot integer_sub float_inc integer_swap integer_min print_float integer_dec integer_stackdepth float_yank float_div float_mult integer_shove float_dup_times float_div float_pop)
Errors: [22.9526 9 27.0 2 8.9526 9 41.0474 9 19.0 2 5.9526 8 28.0474 9 5.0 1 27.0474 10 14.0 2 0.0 0 10.0474 8 30.0 1 3.0 1 28.0 2 0.0474 7 0.0 0 33.0 9 30.9526 10 10.0 1 26.0 2 31.0 2 0.0 0 3.0474 7 1.0 1]
Total: 517.0948
Mean: 10.341896
Genome size: 141
Size: 142
Percent parens: 0.007
--- Population Statistics ---
Average total errors in population: 3412.5225619000003
Median total errors in population: 802.3592999999998
Error averages by case: (152.35142749999997 10.326 127.7916182 3.97 131.59030540000066 8.049 154.83180729999978 8.048 123.88435250000003 3.814 156.8029137999998 8.03 130.2894202999992 8.027 108.41691140000005 3.863 130.00175669999922 8.645 124.96242520000008 4.036 114.99890550000009 2.603 145.33725499999994 8.625 124.27007709999995 3.729 112.22233900000005 3.055 144.22890699999988 4.015 133.5704078000007 9.032 107.31670769999998 4.449 139.51300089999995 10.168 154.25599860000003 11.482 106.27213950000002 3.546 135.81624829999996 4.244 119.54230760000003 3.76 114.18250180000003 3.409 148.93951569999967 7.398 121.34931209999998 3.461)
Error minima by case: (1.1463 8 0.2864 1 0.0474 1 5.0474 1 1.6808 1 0.0474 1 0.9526 1 0.0 0 1.0474 1 0.0 0 0.0 0 0.0474 1 0.0374 1 0.0 0 16.0 1 0.0474 2 0.0 0 0.0172 8 14.2527 9 0.1392 1 6.1457 1 0.0404 1 0.0 0 0.0474 2 0.0 0)
Average genome size in population (length): 136.207
Average program size in population (points): 137.207
Average percent parens in population: 0.007
Minimum age in population: 135.1106668848028
Maximum age in population: 139.4262725333115
Average age in population: 137.513504459944
Median age in population: 137.5486290447923
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 8
Genome diversity (% unique Plush genomes):	 0.94
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 8
Syntactic diversity (% unique Push programs):	 0.94
Total error diversity:				 0.536
Error (vector) diversity:			 0.632
Behavioral diversity:				 0.633
--- Run Statistics ---
Number of program evaluations used so far: 98000
Number of point (instruction) evaluations so far: 202688110
--- Timings ---
Current time: 1529616316293 milliseconds
Total Time:         380.5 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       131.0 seconds, 34.4%
Fitness Testing:    197.1 seconds, 51.8%
Report:              52.3 seconds, 13.8%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 97
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 98
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 98
;;******************************
;; -*- Number IO problem report - generation 98
Test total error for best: 29064.78739999996
Test mean error for best: 14.53239
;;------------------------------
Outputs of best individual on training cases:
Correct output: -74.6179542037 | Program output: -51.6653573997
Correct output: 78.7609586813  | Program output: 51.7609586813 
Correct output: 3.0100598709   | Program output: 11.9626566749 
Correct output: -99.2368061293 | Program output: -140.2842093253
Correct output: 88.6808415603  | Program output: 69.6808415603 
Correct output: -151.1060419578 | Program output: -145.1534451538
Correct output: 56.004616184   | Program output: 27.957212988  
Correct output: 33.520660154   | Program output: 38.520660154  
Correct output: 42.238861085   | Program output: 15.191457889  
Correct output: -49.0227893765 | Program output: -35.0227893765
Correct output: 103.4057483059 | Program output: 103.4057483059
Correct output: -106.1378273779 | Program output: -116.1852305739
Correct output: 37.9625599991  | Program output: 67.9625599991 
Correct output: 71.9208193203  | Program output: 74.9208193203 
Correct output: 173.5348464317 | Program output: 145.5348464317
Correct output: -77.0615185935 | Program output: -77.1089217895
Correct output: -20.7643622555 | Program output: -20.7643622555
Correct output: 1.9827630815   | Program output: -31.0172369185
Correct output: -39.1198682611 | Program output: -8.1672714571 
Correct output: 1.1392376036   | Program output: 11.1392376036 
Correct output: 129.1930977679 | Program output: 103.1930977679
Correct output: 26.7496211861  | Program output: 57.7496211861 
Correct output: -11.2984801384 | Program output: -11.2984801384
Correct output: -136.1442960385 | Program output: -139.1916992345
Correct output: 143.0911996605 | Program output: 142.0911996605
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_mod} {:instruction float_pop} {:instruction integer_mod} {:instruction integer_flush} {:instruction in1} {:instruction in1} {:instruction float_stackdepth} {:instruction in2} {:instruction integer_add} {:instruction float_inc} {:instruction integer_add} {:instruction float_inc} {:instruction integer_add} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_add} {:instruction float_inc} {:instruction integer_add} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_add} {:instruction integer_max} {:instruction integer_add} {:instruction float_inc} {:instruction integer_add} {:instruction float_inc} {:instruction integer_add} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_add} {:instruction float_inc} {:instruction float_inc} {:instruction integer_add} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_add} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_add} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_max} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_dup_times} {:instruction float_rot} {:instruction float_inc} {:instruction float_inc} {:instruction float_dup_times} {:instruction float_rot} {:instruction float_stackdepth} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_add} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_add} {:instruction float_inc} {:instruction float_inc} {:instruction integer_max} {:instruction float_inc} {:instruction float_dup} {:instruction float_inc} {:instruction 25} {:instruction float_stackdepth} {:instruction float_inc} {:instruction float_dup_times} {:instruction float_yank} {:instruction float_inc} {:instruction integer_add} {:instruction integer_yankdup} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_add} {:instruction integer_yankdup} {:instruction float_inc} {:instruction integer_max} {:instruction float_dup_times} {:instruction float_max} {:instruction float_dup_times} {:instruction float_stackdepth} {:instruction float_inc} {:instruction float_inc} {:instruction float_dup_times} {:instruction float_dup_times} {:instruction integer_add} {:instruction 25} {:instruction integer_flush} {:instruction integer_add} {:instruction float_yank} {:instruction float_dup_times} {:instruction integer_swap} {:instruction print_integer} {:instruction 76.04740319597805} {:instruction float_rot} {:instruction float_cos} {:instruction float_rot} {:instruction integer_shove} {:instruction float_inc} {:instruction integer_mod} {:instruction float_inc} {:instruction float_sub} {:instruction float_rot} {:instruction integer_shove} {:instruction float_rot} {:instruction float_sub} {:instruction float_rot} {:instruction integer_sub} {:instruction float_inc} {:instruction integer_swap} {:instruction integer_min} {:instruction print_float} {:instruction integer_dec} {:instruction integer_stackdepth} {:instruction float_yank} {:instruction integer_dup} {:instruction float_mult} {:instruction integer_shove} {:instruction float_dup_times} {:instruction float_div} {:instruction float_pop})
Best program: (float_mod float_pop integer_mod integer_flush in1 in1 float_stackdepth in2 integer_add float_inc integer_add float_inc integer_add float_inc float_inc float_inc integer_add float_inc integer_add float_inc float_inc float_inc float_inc integer_add integer_max integer_add float_inc integer_add float_inc integer_add float_inc float_inc float_inc integer_add float_inc float_inc integer_add float_inc float_inc float_inc float_inc integer_add float_inc float_inc float_inc integer_add float_inc float_inc float_inc float_inc float_inc float_inc float_inc integer_max float_inc float_inc float_inc float_inc float_dup_times float_rot float_inc float_inc float_dup_times float_rot float_stackdepth float_inc float_inc float_inc integer_add float_inc float_inc float_inc float_inc float_inc integer_add float_inc float_inc integer_max float_inc float_dup float_inc 25 float_stackdepth float_inc float_dup_times float_yank float_inc integer_add integer_yankdup float_inc float_inc float_inc float_inc integer_add integer_yankdup float_inc integer_max float_dup_times float_max float_dup_times float_stackdepth float_inc float_inc float_dup_times float_dup_times integer_add 25 integer_flush integer_add float_yank float_dup_times integer_swap print_integer 76.04740319597805 float_rot float_cos float_rot integer_shove float_inc integer_mod float_inc float_sub float_rot integer_shove float_rot float_sub float_rot integer_sub float_inc integer_swap integer_min print_float integer_dec integer_stackdepth float_yank integer_dup float_mult integer_shove float_dup_times float_div float_pop)
Errors: [22.9526 9 27.0 2 8.9526 9 41.0474 9 19.0 2 5.9526 8 28.0474 9 5.0 1 27.0474 10 14.0 2 0.0 0 10.0474 8 30.0 1 3.0 1 28.0 2 0.0474 7 0.0 0 33.0 9 30.9526 10 10.0 1 26.0 2 31.0 2 0.0 0 3.0474 7 1.0 1]
Total: 517.0948
Mean: 10.341896
Genome size: 141
Size: 142
Percent parens: 0.007
--- Population Statistics ---
Average total errors in population: 2817.0511217
Median total errors in population: 736.06815
Error averages by case: (128.4797710000007 10.148 104.86194920000004 3.907 107.81699930000046 7.962 129.28148659999883 7.935 100.3050289000001 3.79 130.37095550000063 7.908 104.61055569999928 7.947 84.98547200000004 3.754 104.8163274999994 8.578 100.75643610000006 3.924 88.8574265000001 2.51 118.9432240999997 8.517 101.30760309999992 3.653 86.88250040000014 3.019 118.58406399999991 3.906 111.96408690000088 8.804 87.58976369999998 4.383 115.66924399999996 10.154 129.89416000000094 11.379 93.49111610000004 3.633 111.4283267999999 4.167 101.88172069999999 3.738 89.94264590000003 3.309 122.27113329999933 7.204 94.41612439999996 3.414)
Error minima by case: (0.6145 8 0.2864 1 0.7865 1 4.0474 1 1.0 1 0.0474 2 0.0474 1 0.0 0 0.0474 1 0.0 0 0.0 0 0.0474 1 0.0 0 0.0 0 7.0 1 0.0215 1 0.0 0 0.1862 8 14.9285 8 0.1392 1 0.8543 1 0.0 0 0.0 0 0.0474 2 0.0 0)
Average genome size in population (length): 135.997
Average program size in population (points): 136.997
Average percent parens in population: 0.007
Minimum age in population: 136.1106668848028
Maximum age in population: 140.6636342550217
Average age in population: 138.7374687684678
Median age in population: 138.7721307879746
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 10
Genome diversity (% unique Plush genomes):	 0.934
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 10
Syntactic diversity (% unique Push programs):	 0.934
Total error diversity:				 0.521
Error (vector) diversity:			 0.604
Behavioral diversity:				 0.606
--- Run Statistics ---
Number of program evaluations used so far: 99000
Number of point (instruction) evaluations so far: 206088035
--- Timings ---
Current time: 1529616321435 milliseconds
Total Time:         385.6 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       132.3 seconds, 34.3%
Fitness Testing:    200.1 seconds, 51.9%
Report:              53.1 seconds, 13.8%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 98
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 99
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 99
;;******************************
;; -*- Number IO problem report - generation 99
Test total error for best: 28931.78739999996
Test mean error for best: 14.46589
;;------------------------------
Outputs of best individual on training cases:
Correct output: -74.6179542037 | Program output: -51.6653573997
Correct output: 78.7609586813  | Program output: 51.7609586813 
Correct output: 3.0100598709   | Program output: 11.9626566749 
Correct output: -99.2368061293 | Program output: -140.2842093253
Correct output: 88.6808415603  | Program output: 69.6808415603 
Correct output: -151.1060419578 | Program output: -145.1534451538
Correct output: 56.004616184   | Program output: 27.957212988  
Correct output: 33.520660154   | Program output: 38.520660154  
Correct output: 42.238861085   | Program output: 15.191457889  
Correct output: -49.0227893765 | Program output: -35.0227893765
Correct output: 103.4057483059 | Program output: 103.4057483059
Correct output: -106.1378273779 | Program output: -116.1852305739
Correct output: 37.9625599991  | Program output: 67.9625599991 
Correct output: 71.9208193203  | Program output: 74.9208193203 
Correct output: 173.5348464317 | Program output: 145.5348464317
Correct output: -77.0615185935 | Program output: -77.1089217895
Correct output: -20.7643622555 | Program output: -20.7643622555
Correct output: 1.9827630815   | Program output: -31.0172369185
Correct output: -39.1198682611 | Program output: -8.1672714571 
Correct output: 1.1392376036   | Program output: 11.1392376036 
Correct output: 129.1930977679 | Program output: 103.1930977679
Correct output: 26.7496211861  | Program output: 57.7496211861 
Correct output: -11.2984801384 | Program output: -11.2984801384
Correct output: -136.1442960385 | Program output: -139.1916992345
Correct output: 143.0911996605 | Program output: 142.0911996605
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_mod} {:instruction float_pop} {:instruction integer_max} {:instruction integer_flush} {:instruction in1} {:instruction in1} {:instruction float_stackdepth} {:instruction in2} {:instruction integer_add} {:instruction float_inc} {:instruction float_rot} {:instruction float_inc} {:instruction float_inc} {:instruction integer_max} {:instruction float_inc} {:instruction integer_add} {:instruction float_inc} {:instruction integer_add} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_add} {:instruction float_rot} {:instruction integer_add} {:instruction float_inc} {:instruction float_inc} {:instruction integer_add} {:instruction float_rot} {:instruction integer_add} {:instruction float_inc} {:instruction integer_add} {:instruction float_inc} {:instruction integer_add} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_add} {:instruction float_inc} {:instruction integer_mult} {:instruction integer_add} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_add} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_add} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_max} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_dup_times} {:instruction float_rot} {:instruction float_stackdepth} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_min} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_add} {:instruction float_inc} {:instruction float_inc} {:instruction integer_max} {:instruction float_inc} {:instruction float_dup} {:instruction integer_min} {:instruction 25} {:instruction float_stackdepth} {:instruction float_inc} {:instruction float_dup_times} {:instruction float_yank} {:instruction float_inc} {:instruction integer_mult} {:instruction integer_yankdup} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_add} {:instruction integer_yankdup} {:instruction float_inc} {:instruction integer_max} {:instruction float_dup_times} {:instruction float_max} {:instruction float_dup_times} {:instruction float_stackdepth} {:instruction float_inc} {:instruction float_inc} {:instruction float_dup_times} {:instruction float_dup_times} {:instruction integer_add} {:instruction 25} {:instruction integer_flush} {:instruction integer_add} {:instruction float_yank} {:instruction float_dup_times} {:instruction integer_swap} {:instruction print_integer} {:instruction 76.04740319597805} {:instruction float_rot} {:instruction float_dup_times} {:instruction float_rot} {:instruction integer_shove} {:instruction integer_inc} {:instruction float_dec} {:instruction float_inc} {:instruction float_sub} {:instruction float_rot} {:instruction integer_shove} {:instruction float_rot} {:instruction float_sub} {:instruction float_rot} {:instruction integer_sub} {:instruction float_inc} {:instruction integer_swap} {:instruction integer_min} {:instruction print_float} {:instruction integer_dec} {:instruction integer_stackdepth} {:instruction float_yank} {:instruction float_div} {:instruction float_mult} {:instruction integer_shove} {:instruction float_dup_times} {:instruction float_div} {:instruction float_pop})
Best program: (float_mod float_pop integer_max integer_flush in1 in1 float_stackdepth in2 integer_add float_inc float_rot float_inc float_inc integer_max float_inc integer_add float_inc integer_add float_inc float_inc float_inc float_inc integer_add float_rot integer_add float_inc float_inc integer_add float_rot integer_add float_inc integer_add float_inc integer_add float_inc float_inc float_inc integer_add float_inc integer_mult integer_add float_inc float_inc float_inc integer_add float_inc float_inc float_inc integer_add float_inc float_inc float_inc float_inc float_inc float_inc integer_max float_inc float_inc float_inc float_inc float_dup_times float_rot float_stackdepth float_inc float_inc float_inc float_inc float_inc float_inc integer_min float_inc float_inc float_inc float_inc float_inc integer_add float_inc float_inc integer_max float_inc float_dup integer_min 25 float_stackdepth float_inc float_dup_times float_yank float_inc integer_mult integer_yankdup float_inc float_inc float_inc float_inc integer_add integer_yankdup float_inc integer_max float_dup_times float_max float_dup_times float_stackdepth float_inc float_inc float_dup_times float_dup_times integer_add 25 integer_flush integer_add float_yank float_dup_times integer_swap print_integer 76.04740319597805 float_rot float_dup_times float_rot integer_shove integer_inc float_dec float_inc float_sub float_rot integer_shove float_rot float_sub float_rot integer_sub float_inc integer_swap integer_min print_float integer_dec integer_stackdepth float_yank float_div float_mult integer_shove float_dup_times float_div float_pop)
Errors: [22.9526 9 27.0 2 8.9526 9 41.0474 9 19.0 2 5.9526 8 28.0474 9 5.0 1 27.0474 10 14.0 2 0.0 0 10.0474 8 30.0 1 3.0 1 28.0 2 0.0474 7 0.0 0 33.0 9 30.9526 10 10.0 1 26.0 2 31.0 2 0.0 0 3.0474 7 1.0 1]
Total: 517.0948
Mean: 10.341896
Genome size: 142
Size: 143
Percent parens: 0.007
--- Population Statistics ---
Average total errors in population: 3070.4714847
Median total errors in population: 1014.0
Error averages by case: (135.61555590000074 10.29 116.55467300000004 3.813 114.17667410000033 7.921 137.39778739999895 7.963 112.91605210000004 3.697 141.2570611000003 7.97 112.23708219999958 7.907 95.68774520000002 3.687 111.83303679999958 8.49 112.74527860000009 3.876 101.40243150000008 2.493 128.4357162999995 8.503 113.90672849999996 3.611 100.1173256000001 3.007 131.77629029999989 3.848 119.57434800000061 8.965 97.06511919999997 4.316 127.09998119999993 10.16 136.517523100001 11.438 97.28351620000004 3.433 125.89884769999993 4.097 110.70790750000002 3.645 102.138244 3.266 133.03250849999927 7.257 108.11105069999996 3.33)
Error minima by case: (0.3018 8 0.2864 1 0.0474 1 7.0474 1 0.3192 1 0.0474 1 1.0474 1 0.0 0 0.0474 1 0.0 0 0.0 0 0.0474 1 0.0 0 0.0 0 3.4652 1 0.0034 1 0.0 0 0.0172 8 8.9414 8 0.1392 1 7.638 1 0.0 0 0.0 0 0.0474 1 0.0 0)
Average genome size in population (length): 135.938
Average program size in population (points): 136.938
Average percent parens in population: 0.007
Minimum age in population: 137.1106668848028
Maximum age in population: 142.1328195043176
Average age in population: 139.9569510913455
Median age in population: 139.9621279385293
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 6
Genome diversity (% unique Plush genomes):	 0.944
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 6
Syntactic diversity (% unique Push programs):	 0.944
Total error diversity:				 0.551
Error (vector) diversity:			 0.624
Behavioral diversity:				 0.625
--- Run Statistics ---
Number of program evaluations used so far: 100000
Number of point (instruction) evaluations so far: 209486510
--- Timings ---
Current time: 1529616326614 milliseconds
Total Time:         390.8 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       133.7 seconds, 34.2%
Fitness Testing:    203.1 seconds, 52.0%
Report:              53.8 seconds, 13.8%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 99
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 100
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 100
;;******************************
;; -*- Number IO problem report - generation 100
Test total error for best: 29064.78739999996
Test mean error for best: 14.53239
;;------------------------------
Outputs of best individual on training cases:
Correct output: -74.6179542037 | Program output: -51.6653573997
Correct output: 78.7609586813  | Program output: 51.7609586813 
Correct output: 3.0100598709   | Program output: 11.9626566749 
Correct output: -99.2368061293 | Program output: -140.2842093253
Correct output: 88.6808415603  | Program output: 69.6808415603 
Correct output: -151.1060419578 | Program output: -145.1534451538
Correct output: 56.004616184   | Program output: 27.957212988  
Correct output: 33.520660154   | Program output: 38.520660154  
Correct output: 42.238861085   | Program output: 15.191457889  
Correct output: -49.0227893765 | Program output: -35.0227893765
Correct output: 103.4057483059 | Program output: 103.4057483059
Correct output: -106.1378273779 | Program output: -116.1852305739
Correct output: 37.9625599991  | Program output: 67.9625599991 
Correct output: 71.9208193203  | Program output: 74.9208193203 
Correct output: 173.5348464317 | Program output: 145.5348464317
Correct output: -77.0615185935 | Program output: -77.1089217895
Correct output: -20.7643622555 | Program output: -20.7643622555
Correct output: 1.9827630815   | Program output: -31.0172369185
Correct output: -39.1198682611 | Program output: -8.1672714571 
Correct output: 1.1392376036   | Program output: 11.1392376036 
Correct output: 129.1930977679 | Program output: 103.1930977679
Correct output: 26.7496211861  | Program output: 57.7496211861 
Correct output: -11.2984801384 | Program output: -11.2984801384
Correct output: -136.1442960385 | Program output: -139.1916992345
Correct output: 143.0911996605 | Program output: 142.0911996605
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_mod} {:instruction float_pop} {:instruction integer_mod} {:instruction float_min} {:instruction in1} {:instruction in1} {:instruction float_stackdepth} {:instruction in2} {:instruction integer_add} {:instruction float_inc} {:instruction integer_add} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_max} {:instruction float_inc} {:instruction integer_add} {:instruction float_inc} {:instruction integer_add} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_add} {:instruction float_rot} {:instruction integer_add} {:instruction float_inc} {:instruction float_inc} {:instruction integer_add} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_add} {:instruction float_inc} {:instruction float_inc} {:instruction integer_add} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_add} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_add} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_max} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_dup_times} {:instruction float_rot} {:instruction float_inc} {:instruction float_inc} {:instruction float_dup_times} {:instruction float_rot} {:instruction float_stackdepth} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_add} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_add} {:instruction float_inc} {:instruction float_inc} {:instruction integer_max} {:instruction float_inc} {:instruction float_dup} {:instruction float_inc} {:instruction 25} {:instruction float_stackdepth} {:instruction float_inc} {:instruction float_dup_times} {:instruction float_yank} {:instruction float_inc} {:instruction integer_add} {:instruction integer_yankdup} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_add} {:instruction integer_yankdup} {:instruction float_inc} {:instruction integer_max} {:instruction float_dup_times} {:instruction float_max} {:instruction float_dup_times} {:instruction float_stackdepth} {:instruction float_inc} {:instruction float_inc} {:instruction float_dup_times} {:instruction float_dup_times} {:instruction integer_add} {:instruction 25} {:instruction integer_flush} {:instruction integer_add} {:instruction float_yank} {:instruction float_dup_times} {:instruction integer_swap} {:instruction print_integer} {:instruction 76.04740319597805} {:instruction float_rot} {:instruction float_cos} {:instruction float_rot} {:instruction integer_shove} {:instruction float_inc} {:instruction integer_mod} {:instruction float_inc} {:instruction float_sub} {:instruction float_rot} {:instruction integer_shove} {:instruction float_rot} {:instruction float_sub} {:instruction float_rot} {:instruction integer_sub} {:instruction float_inc} {:instruction integer_swap} {:instruction integer_min} {:instruction print_float} {:instruction integer_dec} {:instruction integer_stackdepth} {:instruction float_yank} {:instruction float_div} {:instruction float_mult} {:instruction integer_shove} {:instruction float_dup_times} {:instruction float_div} {:instruction float_pop})
Best program: (float_mod float_pop integer_mod float_min in1 in1 float_stackdepth in2 integer_add float_inc integer_add float_inc float_inc float_inc integer_max float_inc integer_add float_inc integer_add float_inc float_inc float_inc float_inc integer_add float_rot integer_add float_inc float_inc integer_add float_inc float_inc float_inc integer_add float_inc float_inc integer_add float_inc float_inc float_inc float_inc integer_add float_inc float_inc float_inc integer_add float_inc float_inc float_inc float_inc float_inc float_inc float_inc integer_max float_inc float_inc float_inc float_inc float_dup_times float_rot float_inc float_inc float_dup_times float_rot float_stackdepth float_inc float_inc float_inc integer_add float_inc float_inc float_inc float_inc float_inc integer_add float_inc float_inc integer_max float_inc float_dup float_inc 25 float_stackdepth float_inc float_dup_times float_yank float_inc integer_add integer_yankdup float_inc float_inc float_inc float_inc integer_add integer_yankdup float_inc integer_max float_dup_times float_max float_dup_times float_stackdepth float_inc float_inc float_dup_times float_dup_times integer_add 25 integer_flush integer_add float_yank float_dup_times integer_swap print_integer 76.04740319597805 float_rot float_cos float_rot integer_shove float_inc integer_mod float_inc float_sub float_rot integer_shove float_rot float_sub float_rot integer_sub float_inc integer_swap integer_min print_float integer_dec integer_stackdepth float_yank float_div float_mult integer_shove float_dup_times float_div float_pop)
Errors: [22.9526 9 27.0 2 8.9526 9 41.0474 9 19.0 2 5.9526 8 28.0474 9 5.0 1 27.0474 10 14.0 2 0.0 0 10.0474 8 30.0 1 3.0 1 28.0 2 0.0474 7 0.0 0 33.0 9 30.9526 10 10.0 1 26.0 2 31.0 2 0.0 0 3.0474 7 1.0 1]
Total: 517.0948
Mean: 10.341896
Genome size: 140
Size: 141
Percent parens: 0.007
--- Population Statistics ---
Average total errors in population: 2754.983206799999
Median total errors in population: 1006.9576999999999
Error averages by case: (127.54368400000048 10.167 104.11740350000004 3.627 101.53474230000018 7.895 127.65994149999919 7.847 100.15755430000004 3.467 132.2538420000005 7.883 99.87327419999974 7.881 82.4067474 3.408 98.96912749999979 8.48 96.01890920000007 3.638 88.77435890000008 2.228 119.4805633999998 8.449 101.12229329999994 3.347 86.51349710000007 2.758 117.0646213999999 3.593 108.86076140000043 9.01 81.9955691 4.279 112.44421269999997 9.997 128.81615040000068 11.319 82.32665810000007 3.346 111.34391429999997 3.862 98.7927406 3.456 86.63398930000002 2.978 123.85227019999947 7.203 93.24738069999995 3.061)
Error minima by case: (0.4294 7 0.2864 1 0.7865 1 4.0474 1 1.3192 1 0.0474 1 0.0474 1 0.0 0 0.9526 1 0.0 0 0.0 0 0.0474 1 0.0 0 0.0 0 14.0 1 0.0141 1 0.0 0 0.0172 7 6.9665 7 0.1392 1 7.1457 1 0.0 0 0.0 0 0.0474 1 0.0 0)
Average genome size in population (length): 135.677
Average program size in population (points): 136.677
Average percent parens in population: 0.007
Minimum age in population: 139.3564094989732
Maximum age in population: 143.3332349601596
Average age in population: 141.2724763665929
Median age in population: 141.2751314083274
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 6
Genome diversity (% unique Plush genomes):	 0.941
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 6
Syntactic diversity (% unique Push programs):	 0.941
Total error diversity:				 0.555
Error (vector) diversity:			 0.63
Behavioral diversity:				 0.63
--- Run Statistics ---
Number of program evaluations used so far: 101000
Number of point (instruction) evaluations so far: 212878490
--- Timings ---
Current time: 1529616331779 milliseconds
Total Time:         396.0 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       135.1 seconds, 34.1%
Fitness Testing:    206.2 seconds, 52.1%
Report:              54.6 seconds, 13.8%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 100
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 101
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 101
;;******************************
;; -*- Number IO problem report - generation 101
Test total error for best: 29064.78739999996
Test mean error for best: 14.53239
;;------------------------------
Outputs of best individual on training cases:
Correct output: -74.6179542037 | Program output: -51.6653573997
Correct output: 78.7609586813  | Program output: 51.7609586813 
Correct output: 3.0100598709   | Program output: 11.9626566749 
Correct output: -99.2368061293 | Program output: -140.2842093253
Correct output: 88.6808415603  | Program output: 69.6808415603 
Correct output: -151.1060419578 | Program output: -145.1534451538
Correct output: 56.004616184   | Program output: 27.957212988  
Correct output: 33.520660154   | Program output: 38.520660154  
Correct output: 42.238861085   | Program output: 15.191457889  
Correct output: -49.0227893765 | Program output: -35.0227893765
Correct output: 103.4057483059 | Program output: 103.4057483059
Correct output: -106.1378273779 | Program output: -116.1852305739
Correct output: 37.9625599991  | Program output: 67.9625599991 
Correct output: 71.9208193203  | Program output: 74.9208193203 
Correct output: 173.5348464317 | Program output: 145.5348464317
Correct output: -77.0615185935 | Program output: -77.1089217895
Correct output: -20.7643622555 | Program output: -20.7643622555
Correct output: 1.9827630815   | Program output: -31.0172369185
Correct output: -39.1198682611 | Program output: -8.1672714571 
Correct output: 1.1392376036   | Program output: 11.1392376036 
Correct output: 129.1930977679 | Program output: 103.1930977679
Correct output: 26.7496211861  | Program output: 57.7496211861 
Correct output: -11.2984801384 | Program output: -11.2984801384
Correct output: -136.1442960385 | Program output: -139.1916992345
Correct output: 143.0911996605 | Program output: 142.0911996605
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_mod} {:instruction float_pop} {:instruction integer_mod} {:instruction float_min} {:instruction in1} {:instruction in1} {:instruction float_stackdepth} {:instruction in2} {:instruction integer_add} {:instruction float_inc} {:instruction integer_add} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_max} {:instruction float_inc} {:instruction integer_add} {:instruction float_inc} {:instruction integer_add} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_add} {:instruction float_rot} {:instruction integer_add} {:instruction float_inc} {:instruction float_inc} {:instruction integer_add} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_add} {:instruction float_inc} {:instruction float_inc} {:instruction integer_add} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_add} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_add} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_max} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_dup_times} {:instruction float_rot} {:instruction float_inc} {:instruction float_inc} {:instruction float_dup_times} {:instruction float_rot} {:instruction float_stackdepth} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_add} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_add} {:instruction float_inc} {:instruction float_inc} {:instruction integer_max} {:instruction float_inc} {:instruction float_dup} {:instruction float_inc} {:instruction 25} {:instruction float_stackdepth} {:instruction float_inc} {:instruction float_dup_times} {:instruction float_yank} {:instruction float_inc} {:instruction integer_add} {:instruction integer_yankdup} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_add} {:instruction integer_yankdup} {:instruction float_inc} {:instruction integer_max} {:instruction float_dup_times} {:instruction float_max} {:instruction float_dup_times} {:instruction float_stackdepth} {:instruction float_inc} {:instruction float_inc} {:instruction float_dup_times} {:instruction float_dup_times} {:instruction integer_add} {:instruction 25} {:instruction integer_flush} {:instruction integer_add} {:instruction float_yank} {:instruction float_dup_times} {:instruction integer_swap} {:instruction print_integer} {:instruction 76.04740319597805} {:instruction float_rot} {:instruction float_cos} {:instruction float_rot} {:instruction integer_shove} {:instruction float_inc} {:instruction integer_mod} {:instruction float_inc} {:instruction float_sub} {:instruction float_rot} {:instruction integer_shove} {:instruction float_rot} {:instruction float_sub} {:instruction float_rot} {:instruction integer_sub} {:instruction float_inc} {:instruction integer_swap} {:instruction integer_min} {:instruction print_float} {:instruction integer_dec} {:instruction integer_stackdepth} {:instruction float_yank} {:instruction float_div} {:instruction float_mult} {:instruction integer_shove} {:instruction float_dup_times} {:instruction float_div} {:instruction float_pop})
Best program: (float_mod float_pop integer_mod float_min in1 in1 float_stackdepth in2 integer_add float_inc integer_add float_inc float_inc float_inc integer_max float_inc integer_add float_inc integer_add float_inc float_inc float_inc float_inc integer_add float_rot integer_add float_inc float_inc integer_add float_inc float_inc float_inc integer_add float_inc float_inc integer_add float_inc float_inc float_inc float_inc integer_add float_inc float_inc float_inc integer_add float_inc float_inc float_inc float_inc float_inc float_inc float_inc integer_max float_inc float_inc float_inc float_inc float_dup_times float_rot float_inc float_inc float_dup_times float_rot float_stackdepth float_inc float_inc float_inc integer_add float_inc float_inc float_inc float_inc float_inc integer_add float_inc float_inc integer_max float_inc float_dup float_inc 25 float_stackdepth float_inc float_dup_times float_yank float_inc integer_add integer_yankdup float_inc float_inc float_inc float_inc integer_add integer_yankdup float_inc integer_max float_dup_times float_max float_dup_times float_stackdepth float_inc float_inc float_dup_times float_dup_times integer_add 25 integer_flush integer_add float_yank float_dup_times integer_swap print_integer 76.04740319597805 float_rot float_cos float_rot integer_shove float_inc integer_mod float_inc float_sub float_rot integer_shove float_rot float_sub float_rot integer_sub float_inc integer_swap integer_min print_float integer_dec integer_stackdepth float_yank float_div float_mult integer_shove float_dup_times float_div float_pop)
Errors: [22.9526 9 27.0 2 8.9526 9 41.0474 9 19.0 2 5.9526 8 28.0474 9 5.0 1 27.0474 10 14.0 2 0.0 0 10.0474 8 30.0 1 3.0 1 28.0 2 0.0474 7 0.0 0 33.0 9 30.9526 10 10.0 1 26.0 2 31.0 2 0.0 0 3.0474 7 1.0 1]
Total: 517.0948
Mean: 10.341896
Genome size: 140
Size: 141
Percent parens: 0.007
--- Population Statistics ---
Average total errors in population: 3106.779752
Median total errors in population: 1033.0
Error averages by case: (139.72874520000056 10.355 113.92234370000003 4.107 119.34873350000075 7.915 139.4176828999991 8.028 110.16659630000014 3.884 144.2618266000002 8.048 117.80569809999905 7.941 94.6650544 3.955 117.22060699999909 8.467 112.50349340000018 4.188 103.80066920000017 2.752 130.9145518999993 8.574 109.5473848999999 3.818 102.0603669000002 3.208 132.83586189999986 4.061 122.95524730000085 9.018 97.25096409999995 4.876 126.43929789999999 10.112 142.1331390000004 11.444 99.33588400000014 3.643 125.42353329999997 4.298 107.19763209999999 3.853 102.09843150000007 3.515 136.26379009999923 7.415 108.41521679999994 3.592)
Error minima by case: (0.1827 7 0.2122 1 0.7865 1 6.0474 1 2.1362 1 0.0474 1 0.9526 1 0.0 0 1.9526 1 0.0 0 0.0 0 0.0474 1 0.0 0 0.0 0 16.0 1 0.0474 1 0.0 0 0.0172 8 4.5813 7 0.1392 1 0.1457 1 0.0 0 0.0 0 0.0474 2 0.0 0)
Average genome size in population (length): 135.637
Average program size in population (points): 136.637
Average percent parens in population: 0.007
Minimum age in population: 140.6323300937763
Maximum age in population: 144.4605725418678
Average age in population: 142.5829330405065
Median age in population: 142.6264396544297
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 9
Genome diversity (% unique Plush genomes):	 0.961
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 9
Syntactic diversity (% unique Push programs):	 0.961
Total error diversity:				 0.561
Error (vector) diversity:			 0.641
Behavioral diversity:				 0.641
--- Run Statistics ---
Number of program evaluations used so far: 102000
Number of point (instruction) evaluations so far: 216269440
--- Timings ---
Current time: 1529616336889 milliseconds
Total Time:         401.1 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       136.5 seconds, 34.0%
Fitness Testing:    209.2 seconds, 52.2%
Report:              55.3 seconds, 13.8%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 101
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 102
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 102
;;******************************
;; -*- Number IO problem report - generation 102
Test total error for best: 29064.78739999996
Test mean error for best: 14.53239
;;------------------------------
Outputs of best individual on training cases:
Correct output: -74.6179542037 | Program output: -51.6653573997
Correct output: 78.7609586813  | Program output: 51.7609586813 
Correct output: 3.0100598709   | Program output: 11.9626566749 
Correct output: -99.2368061293 | Program output: -140.2842093253
Correct output: 88.6808415603  | Program output: 69.6808415603 
Correct output: -151.1060419578 | Program output: -145.1534451538
Correct output: 56.004616184   | Program output: 27.957212988  
Correct output: 33.520660154   | Program output: 38.520660154  
Correct output: 42.238861085   | Program output: 15.191457889  
Correct output: -49.0227893765 | Program output: -35.0227893765
Correct output: 103.4057483059 | Program output: 103.4057483059
Correct output: -106.1378273779 | Program output: -116.1852305739
Correct output: 37.9625599991  | Program output: 67.9625599991 
Correct output: 71.9208193203  | Program output: 74.9208193203 
Correct output: 173.5348464317 | Program output: 145.5348464317
Correct output: -77.0615185935 | Program output: -77.1089217895
Correct output: -20.7643622555 | Program output: -20.7643622555
Correct output: 1.9827630815   | Program output: -31.0172369185
Correct output: -39.1198682611 | Program output: -8.1672714571 
Correct output: 1.1392376036   | Program output: 11.1392376036 
Correct output: 129.1930977679 | Program output: 103.1930977679
Correct output: 26.7496211861  | Program output: 57.7496211861 
Correct output: -11.2984801384 | Program output: -11.2984801384
Correct output: -136.1442960385 | Program output: -139.1916992345
Correct output: 143.0911996605 | Program output: 142.0911996605
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction in2} {:instruction float_pop} {:instruction integer_mod} {:instruction integer_flush} {:instruction in1} {:instruction in1} {:instruction float_stackdepth} {:instruction in2} {:instruction integer_add} {:instruction float_inc} {:instruction integer_add} {:instruction float_inc} {:instruction integer_add} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_add} {:instruction float_inc} {:instruction integer_add} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_add} {:instruction integer_max} {:instruction integer_add} {:instruction float_inc} {:instruction integer_add} {:instruction float_inc} {:instruction integer_add} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_add} {:instruction float_inc} {:instruction float_inc} {:instruction integer_add} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_add} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_add} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_max} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_dup_times} {:instruction integer_dup_items} {:instruction float_inc} {:instruction float_inc} {:instruction float_dup_times} {:instruction float_rot} {:instruction float_stackdepth} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_add} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_add} {:instruction float_inc} {:instruction float_inc} {:instruction integer_max} {:instruction float_inc} {:instruction float_dup} {:instruction float_inc} {:instruction 25} {:instruction float_stackdepth} {:instruction float_inc} {:instruction float_dup_times} {:instruction float_yank} {:instruction float_inc} {:instruction integer_add} {:instruction integer_yankdup} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_add} {:instruction integer_yankdup} {:instruction float_inc} {:instruction integer_max} {:instruction float_dup_times} {:instruction float_max} {:instruction float_dup_times} {:instruction float_stackdepth} {:instruction float_inc} {:instruction float_inc} {:instruction float_dup_times} {:instruction float_yank} {:instruction float_dup_times} {:instruction integer_swap} {:instruction print_integer} {:instruction 76.04740319597805} {:instruction float_rot} {:instruction float_dup_times} {:instruction float_rot} {:instruction integer_shove} {:instruction float_inc} {:instruction float_dec} {:instruction float_inc} {:instruction float_sub} {:instruction float_rot} {:instruction integer_shove} {:instruction float_rot} {:instruction float_sub} {:instruction float_rot} {:instruction integer_sub} {:instruction float_inc} {:instruction integer_swap} {:instruction integer_min} {:instruction print_float} {:instruction integer_dec} {:instruction integer_sub} {:instruction float_yank} {:instruction float_div} {:instruction float_mult} {:instruction integer_shove} {:instruction float_dup_times} {:instruction float_div} {:instruction float_pop})
Best program: (in2 float_pop integer_mod integer_flush in1 in1 float_stackdepth in2 integer_add float_inc integer_add float_inc integer_add float_inc float_inc float_inc integer_add float_inc integer_add float_inc float_inc float_inc float_inc integer_add integer_max integer_add float_inc integer_add float_inc integer_add float_inc float_inc float_inc integer_add float_inc float_inc integer_add float_inc float_inc float_inc float_inc integer_add float_inc float_inc float_inc integer_add float_inc float_inc float_inc float_inc float_inc float_inc float_inc integer_max float_inc float_inc float_inc float_inc float_dup_times integer_dup_items float_inc float_inc float_dup_times float_rot float_stackdepth float_inc float_inc float_inc integer_add float_inc float_inc float_inc float_inc float_inc integer_add float_inc float_inc integer_max float_inc float_dup float_inc 25 float_stackdepth float_inc float_dup_times float_yank float_inc integer_add integer_yankdup float_inc float_inc float_inc float_inc integer_add integer_yankdup float_inc integer_max float_dup_times float_max float_dup_times float_stackdepth float_inc float_inc float_dup_times float_yank float_dup_times integer_swap print_integer 76.04740319597805 float_rot float_dup_times float_rot integer_shove float_inc float_dec float_inc float_sub float_rot integer_shove float_rot float_sub float_rot integer_sub float_inc integer_swap integer_min print_float integer_dec integer_sub float_yank float_div float_mult integer_shove float_dup_times float_div float_pop)
Errors: [22.9526 9 27.0 2 8.9526 9 41.0474 9 19.0 2 5.9526 8 28.0474 9 5.0 1 27.0474 10 14.0 2 0.0 0 10.0474 8 30.0 1 3.0 1 28.0 2 0.0474 7 0.0 0 33.0 9 30.9526 10 10.0 1 26.0 2 31.0 2 0.0 0 3.0474 7 1.0 1]
Total: 517.0948
Mean: 10.341896
Genome size: 136
Size: 137
Percent parens: 0.007
--- Population Statistics ---
Average total errors in population: 3003.0698622000004
Median total errors in population: 1018.0
Error averages by case: (132.44447660000054 10.316 113.18390149999998 3.957 111.58175050000051 7.967 133.9950932999991 8.066 108.8366733000001 3.808 138.3253317000004 8.02 111.49075779999927 7.97 92.81425180000001 3.749 109.15597339999927 8.515 109.7764274000001 4.05 102.5475344000001 2.699 125.58843819999952 8.528 108.0606664999999 3.723 99.47835990000007 3.127 130.90484799999993 3.969 112.48206480000057 8.935 95.41259179999999 4.721 124.51649899999997 10.155 134.54651820000072 11.464 96.00316540000006 3.735 122.93422099999997 4.192 106.27830269999998 3.774 96.99938889999999 3.406 130.14788029999923 7.434 105.80174579999996 3.483)
Error minima by case: (0.1214 8 0.2864 1 0.0474 1 9.0474 1 2.3192 1 0.0474 1 0.0474 1 0.0 0 0.0474 1 0.0 0 0.0 0 0.0474 1 0.0 0 0.0 0 3.4178 1 0.0474 1 0.0 0 0.0172 8 7.8801 7 0.0739 1 2.5151 1 0.0 0 0.0 0 0.0474 1 0.0 0)
Average genome size in population (length): 135.646
Average program size in population (points): 136.646
Average percent parens in population: 0.007
Minimum age in population: 141.6978305871473
Maximum age in population: 145.6863133553209
Average age in population: 143.8609227162871
Median age in population: 143.8762874765173
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 9
Genome diversity (% unique Plush genomes):	 0.96
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 9
Syntactic diversity (% unique Push programs):	 0.96
Total error diversity:				 0.584
Error (vector) diversity:			 0.658
Behavioral diversity:				 0.659
--- Run Statistics ---
Number of program evaluations used so far: 103000
Number of point (instruction) evaluations so far: 219660590
--- Timings ---
Current time: 1529616342031 milliseconds
Total Time:         406.2 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       137.8 seconds, 33.9%
Fitness Testing:    212.2 seconds, 52.2%
Report:              56.0 seconds, 13.8%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 102
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 103
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 103
;;******************************
;; -*- Number IO problem report - generation 103
Test total error for best: 29064.78739999996
Test mean error for best: 14.53239
;;------------------------------
Outputs of best individual on training cases:
Correct output: -74.6179542037 | Program output: -51.6653573997
Correct output: 78.7609586813  | Program output: 51.7609586813 
Correct output: 3.0100598709   | Program output: 11.9626566749 
Correct output: -99.2368061293 | Program output: -140.2842093253
Correct output: 88.6808415603  | Program output: 69.6808415603 
Correct output: -151.1060419578 | Program output: -145.1534451538
Correct output: 56.004616184   | Program output: 27.957212988  
Correct output: 33.520660154   | Program output: 38.520660154  
Correct output: 42.238861085   | Program output: 15.191457889  
Correct output: -49.0227893765 | Program output: -35.0227893765
Correct output: 103.4057483059 | Program output: 103.4057483059
Correct output: -106.1378273779 | Program output: -116.1852305739
Correct output: 37.9625599991  | Program output: 67.9625599991 
Correct output: 71.9208193203  | Program output: 74.9208193203 
Correct output: 173.5348464317 | Program output: 145.5348464317
Correct output: -77.0615185935 | Program output: -77.1089217895
Correct output: -20.7643622555 | Program output: -20.7643622555
Correct output: 1.9827630815   | Program output: -31.0172369185
Correct output: -39.1198682611 | Program output: -8.1672714571 
Correct output: 1.1392376036   | Program output: 11.1392376036 
Correct output: 129.1930977679 | Program output: 103.1930977679
Correct output: 26.7496211861  | Program output: 57.7496211861 
Correct output: -11.2984801384 | Program output: -11.2984801384
Correct output: -136.1442960385 | Program output: -139.1916992345
Correct output: 143.0911996605 | Program output: 142.0911996605
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_mod} {:instruction float_pop} {:instruction integer_mod} {:instruction integer_flush} {:instruction in1} {:instruction in1} {:instruction float_stackdepth} {:instruction in2} {:instruction integer_add} {:instruction float_inc} {:instruction integer_add} {:instruction float_inc} {:instruction integer_add} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_add} {:instruction float_inc} {:instruction integer_add} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_add} {:instruction integer_max} {:instruction integer_add} {:instruction float_inc} {:instruction integer_add} {:instruction float_inc} {:instruction integer_add} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_add} {:instruction float_inc} {:instruction float_inc} {:instruction integer_add} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_add} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_add} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_max} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_dup_times} {:instruction float_rot} {:instruction float_inc} {:instruction float_inc} {:instruction float_dup_times} {:instruction float_rot} {:instruction float_stackdepth} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_add} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_add} {:instruction float_inc} {:instruction float_inc} {:instruction integer_max} {:instruction float_inc} {:instruction float_dup} {:instruction float_inc} {:instruction 25} {:instruction float_stackdepth} {:instruction float_inc} {:instruction float_dup_times} {:instruction float_yank} {:instruction float_inc} {:instruction integer_add} {:instruction integer_yankdup} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_add} {:instruction integer_yankdup} {:instruction float_inc} {:instruction integer_max} {:instruction float_dup_times} {:instruction float_max} {:instruction float_dup_times} {:instruction float_stackdepth} {:instruction float_inc} {:instruction float_inc} {:instruction float_dup_times} {:instruction float_dup_times} {:instruction integer_add} {:instruction 25} {:instruction integer_flush} {:instruction integer_add} {:instruction float_yank} {:instruction float_dup_times} {:instruction integer_swap} {:instruction print_integer} {:instruction 76.04740319597805} {:instruction float_rot} {:instruction float_cos} {:instruction float_rot} {:instruction integer_shove} {:instruction float_inc} {:instruction integer_mod} {:instruction float_inc} {:instruction float_sub} {:instruction float_rot} {:instruction integer_shove} {:instruction float_rot} {:instruction float_sub} {:instruction float_rot} {:instruction integer_sub} {:instruction float_inc} {:instruction integer_swap} {:instruction integer_min} {:instruction print_float} {:instruction float_flush} {:instruction integer_stackdepth} {:instruction float_yank} {:instruction float_div} {:instruction float_mult} {:instruction integer_shove} {:instruction float_dup_times} {:instruction float_div} {:instruction float_pop})
Best program: (float_mod float_pop integer_mod integer_flush in1 in1 float_stackdepth in2 integer_add float_inc integer_add float_inc integer_add float_inc float_inc float_inc integer_add float_inc integer_add float_inc float_inc float_inc float_inc integer_add integer_max integer_add float_inc integer_add float_inc integer_add float_inc float_inc float_inc integer_add float_inc float_inc integer_add float_inc float_inc float_inc float_inc integer_add float_inc float_inc float_inc integer_add float_inc float_inc float_inc float_inc float_inc float_inc float_inc integer_max float_inc float_inc float_inc float_inc float_dup_times float_rot float_inc float_inc float_dup_times float_rot float_stackdepth float_inc float_inc float_inc integer_add float_inc float_inc float_inc float_inc float_inc integer_add float_inc float_inc integer_max float_inc float_dup float_inc 25 float_stackdepth float_inc float_dup_times float_yank float_inc integer_add integer_yankdup float_inc float_inc float_inc float_inc integer_add integer_yankdup float_inc integer_max float_dup_times float_max float_dup_times float_stackdepth float_inc float_inc float_dup_times float_dup_times integer_add 25 integer_flush integer_add float_yank float_dup_times integer_swap print_integer 76.04740319597805 float_rot float_cos float_rot integer_shove float_inc integer_mod float_inc float_sub float_rot integer_shove float_rot float_sub float_rot integer_sub float_inc integer_swap integer_min print_float float_flush integer_stackdepth float_yank float_div float_mult integer_shove float_dup_times float_div float_pop)
Errors: [22.9526 9 27.0 2 8.9526 9 41.0474 9 19.0 2 5.9526 8 28.0474 9 5.0 1 27.0474 10 14.0 2 0.0 0 10.0474 8 30.0 1 3.0 1 28.0 2 0.0474 7 0.0 0 33.0 9 30.9526 10 10.0 1 26.0 2 31.0 2 0.0 0 3.0474 7 1.0 1]
Total: 517.0948
Mean: 10.341896
Genome size: 141
Size: 142
Percent parens: 0.007
--- Population Statistics ---
Average total errors in population: 3118.8543318999987
Median total errors in population: 742.9763
Error averages by case: (131.32523980000076 10.281 121.90326530000002 4.029 107.85871720000041 8.17 134.24426819999903 8.283 118.87974120000003 3.911 135.6680816000005 8.223 108.23916569999943 8.192 101.25373460000003 3.736 107.65683919999942 8.782 117.18658730000008 4.118 110.15386740000008 2.778 123.2170245999994 8.712 118.90583719999991 3.817 106.02431840000011 3.198 139.1562383999999 4.064 115.22896830000059 8.925 103.80931409999997 4.76 132.12155539999995 10.161 133.12226970000103 11.389 101.65900820000007 3.749 132.82928989999996 4.265 116.81107279999995 3.916 105.86183889999998 3.422 127.78400289999934 7.588 115.96008559999991 3.525)
Error minima by case: (3.4321 8 0.2864 1 0.0354 1 5.0474 1 5.0 1 0.0474 2 0.0474 1 0.0 0 0.0474 1 0.0 0 0.0 0 0.0474 1 0.0 0 0.0 0 14.0 1 0.0474 2 0.0 0 0.0172 8 15.9526 7 0.0739 1 0.3732 1 0.0 0 0.0 0 0.0474 1 0.0 0)
Average genome size in population (length): 135.874
Average program size in population (points): 136.874
Average percent parens in population: 0.007
Minimum age in population: 143.2006138701387
Maximum age in population: 147.1102878685397
Average age in population: 145.2169244299629
Median age in population: 145.2471897822945
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 8
Genome diversity (% unique Plush genomes):	 0.943
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 8
Syntactic diversity (% unique Push programs):	 0.943
Total error diversity:				 0.558
Error (vector) diversity:			 0.637
Behavioral diversity:				 0.638
--- Run Statistics ---
Number of program evaluations used so far: 104000
Number of point (instruction) evaluations so far: 223057440
--- Timings ---
Current time: 1529616347196 milliseconds
Total Time:         411.4 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       139.2 seconds, 33.8%
Fitness Testing:    215.3 seconds, 52.3%
Report:              56.8 seconds, 13.8%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 103
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 104
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 104
;;******************************
;; -*- Number IO problem report - generation 104
Test total error for best: 29064.78739999996
Test mean error for best: 14.53239
;;------------------------------
Outputs of best individual on training cases:
Correct output: -74.6179542037 | Program output: -51.6653573997
Correct output: 78.7609586813  | Program output: 51.7609586813 
Correct output: 3.0100598709   | Program output: 11.9626566749 
Correct output: -99.2368061293 | Program output: -140.2842093253
Correct output: 88.6808415603  | Program output: 69.6808415603 
Correct output: -151.1060419578 | Program output: -145.1534451538
Correct output: 56.004616184   | Program output: 27.957212988  
Correct output: 33.520660154   | Program output: 38.520660154  
Correct output: 42.238861085   | Program output: 15.191457889  
Correct output: -49.0227893765 | Program output: -35.0227893765
Correct output: 103.4057483059 | Program output: 103.4057483059
Correct output: -106.1378273779 | Program output: -116.1852305739
Correct output: 37.9625599991  | Program output: 67.9625599991 
Correct output: 71.9208193203  | Program output: 74.9208193203 
Correct output: 173.5348464317 | Program output: 145.5348464317
Correct output: -77.0615185935 | Program output: -77.1089217895
Correct output: -20.7643622555 | Program output: -20.7643622555
Correct output: 1.9827630815   | Program output: -31.0172369185
Correct output: -39.1198682611 | Program output: -8.1672714571 
Correct output: 1.1392376036   | Program output: 11.1392376036 
Correct output: 129.1930977679 | Program output: 103.1930977679
Correct output: 26.7496211861  | Program output: 57.7496211861 
Correct output: -11.2984801384 | Program output: -11.2984801384
Correct output: -136.1442960385 | Program output: -139.1916992345
Correct output: 143.0911996605 | Program output: 142.0911996605
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_mod} {:instruction float_pop} {:instruction integer_mod} {:instruction integer_flush} {:instruction in1} {:instruction in1} {:instruction float_stackdepth} {:instruction in2} {:instruction integer_add} {:instruction float_inc} {:instruction integer_add} {:instruction float_inc} {:instruction integer_add} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_add} {:instruction float_inc} {:instruction integer_add} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_add} {:instruction integer_max} {:instruction integer_add} {:instruction float_inc} {:instruction integer_add} {:instruction float_inc} {:instruction integer_add} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_add} {:instruction float_inc} {:instruction float_inc} {:instruction integer_add} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_add} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_add} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_max} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_dup_times} {:instruction float_rot} {:instruction float_inc} {:instruction float_inc} {:instruction float_dup_times} {:instruction float_rot} {:instruction float_stackdepth} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_add} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_add} {:instruction float_inc} {:instruction float_inc} {:instruction integer_max} {:instruction float_inc} {:instruction float_dup} {:instruction float_inc} {:instruction 25} {:instruction float_stackdepth} {:instruction float_inc} {:instruction float_dup_times} {:instruction float_yank} {:instruction float_inc} {:instruction integer_add} {:instruction integer_yankdup} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_add} {:instruction integer_yankdup} {:instruction float_inc} {:instruction integer_max} {:instruction float_dup_times} {:instruction float_max} {:instruction float_dup_times} {:instruction float_stackdepth} {:instruction float_inc} {:instruction float_inc} {:instruction float_dup_times} {:instruction float_yank} {:instruction integer_add} {:instruction 25} {:instruction integer_flush} {:instruction integer_add} {:instruction float_yank} {:instruction float_dup_times} {:instruction integer_swap} {:instruction print_integer} {:instruction 76.04740319597805} {:instruction float_rot} {:instruction float_cos} {:instruction float_rot} {:instruction integer_shove} {:instruction float_inc} {:instruction integer_mod} {:instruction float_inc} {:instruction float_sub} {:instruction float_rot} {:instruction integer_shove} {:instruction float_rot} {:instruction float_sub} {:instruction float_rot} {:instruction integer_sub} {:instruction float_inc} {:instruction integer_swap} {:instruction integer_min} {:instruction print_float} {:instruction float_flush} {:instruction integer_stackdepth} {:instruction float_yank} {:instruction float_div} {:instruction float_mult} {:instruction integer_shove} {:instruction float_dup_times} {:instruction float_div} {:instruction float_pop})
Best program: (float_mod float_pop integer_mod integer_flush in1 in1 float_stackdepth in2 integer_add float_inc integer_add float_inc integer_add float_inc float_inc float_inc integer_add float_inc integer_add float_inc float_inc float_inc float_inc integer_add integer_max integer_add float_inc integer_add float_inc integer_add float_inc float_inc float_inc integer_add float_inc float_inc integer_add float_inc float_inc float_inc float_inc integer_add float_inc float_inc float_inc integer_add float_inc float_inc float_inc float_inc float_inc float_inc float_inc integer_max float_inc float_inc float_inc float_inc float_dup_times float_rot float_inc float_inc float_dup_times float_rot float_stackdepth float_inc float_inc float_inc integer_add float_inc float_inc float_inc float_inc float_inc integer_add float_inc float_inc integer_max float_inc float_dup float_inc 25 float_stackdepth float_inc float_dup_times float_yank float_inc integer_add integer_yankdup float_inc float_inc float_inc float_inc integer_add integer_yankdup float_inc integer_max float_dup_times float_max float_dup_times float_stackdepth float_inc float_inc float_dup_times float_yank integer_add 25 integer_flush integer_add float_yank float_dup_times integer_swap print_integer 76.04740319597805 float_rot float_cos float_rot integer_shove float_inc integer_mod float_inc float_sub float_rot integer_shove float_rot float_sub float_rot integer_sub float_inc integer_swap integer_min print_float float_flush integer_stackdepth float_yank float_div float_mult integer_shove float_dup_times float_div float_pop)
Errors: [22.9526 9 27.0 2 8.9526 9 41.0474 9 19.0 2 5.9526 8 28.0474 9 5.0 1 27.0474 10 14.0 2 0.0 0 10.0474 8 30.0 1 3.0 1 28.0 2 0.0474 7 0.0 0 33.0 9 30.9526 10 10.0 1 26.0 2 31.0 2 0.0 0 3.0474 7 1.0 1]
Total: 517.0948
Mean: 10.341896
Genome size: 141
Size: 142
Percent parens: 0.007
--- Population Statistics ---
Average total errors in population: 2948.4171190999996
Median total errors in population: 841.4048500000001
Error averages by case: (130.76189250000056 10.3 111.11929889999999 3.859 108.49463610000032 7.983 131.23985109999916 8.081 108.22617310000001 3.718 133.4679499000004 8.009 109.74731849999957 8.059 91.22165000000005 3.633 107.7404558999995 8.575 107.2095102000001 3.895 101.18583110000009 2.562 122.63471949999962 8.446 108.3551897 3.615 98.05807290000008 3.057 127.72515379999986 3.875 111.94125380000033 8.749 94.40140050000001 4.681 121.2188037 10.079 133.2526659000006 11.355 92.11224610000001 3.54 121.67403640000003 4.061 102.92279860000001 3.705 95.66371790000001 3.273 125.91888889999954 7.361 104.30660409999994 3.346)
Error minima by case: (1.1427 7 0.001 1 0.1206 1 0.0474 1 2.6808 1 0.0474 2 0.9526 1 0.0 0 1.9526 1 1.0 1 0.0 0 0.0474 1 0.0 0 0.0 0 3.5348 1 0.0474 1 0.0 0 0.0172 7 3.0957 7 0.0739 1 3.1931 1 0.0 0 0.0 0 0.0152 2 0.0 0)
Average genome size in population (length): 136.19
Average program size in population (points): 137.19
Average percent parens in population: 0.007
Minimum age in population: 144.2006138701387
Maximum age in population: 148.5022173275089
Average age in population: 146.4870210551127
Median age in population: 146.5287178518541
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 8
Genome diversity (% unique Plush genomes):	 0.932
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 8
Syntactic diversity (% unique Push programs):	 0.932
Total error diversity:				 0.576
Error (vector) diversity:			 0.655
Behavioral diversity:				 0.655
--- Run Statistics ---
Number of program evaluations used so far: 105000
Number of point (instruction) evaluations so far: 226462190
--- Timings ---
Current time: 1529616352347 milliseconds
Total Time:         416.5 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       140.6 seconds, 33.7%
Fitness Testing:    218.4 seconds, 52.4%
Report:              57.5 seconds, 13.8%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 104
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 105
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 105
;;******************************
;; -*- Number IO problem report - generation 105
Test total error for best: 28133.38270000003
Test mean error for best: 14.06669
;;------------------------------
Outputs of best individual on training cases:
Correct output: -74.6179542037 | Program output: -50.6222543847
Correct output: 78.7609586813  | Program output: 51.7609586813 
Correct output: 3.0100598709   | Program output: 13.0057596899 
Correct output: -99.2368061293 | Program output: -139.2411063103
Correct output: 88.6808415603  | Program output: 69.6808415603 
Correct output: -151.1060419578 | Program output: -144.1103421388
Correct output: 56.004616184   | Program output: 29.000316003  
Correct output: 33.520660154   | Program output: 38.520660154  
Correct output: 42.238861085   | Program output: 16.2345609041 
Correct output: -49.0227893765 | Program output: -35.0227893765
Correct output: 103.4057483059 | Program output: 103.4057483059
Correct output: -106.1378273779 | Program output: -115.1421275589
Correct output: 37.9625599991  | Program output: 67.9625599991 
Correct output: 71.9208193203  | Program output: 74.9208193203 
Correct output: 173.5348464317 | Program output: 145.5348464317
Correct output: -77.0615185935 | Program output: -76.0658187744
Correct output: -20.7643622555 | Program output: -20.7643622555
Correct output: 1.9827630815   | Program output: -31.0172369185
Correct output: -39.1198682611 | Program output: -7.124168442  
Correct output: 1.1392376036   | Program output: 11.1392376036 
Correct output: 129.1930977679 | Program output: 103.1930977679
Correct output: 26.7496211861  | Program output: 57.7496211861 
Correct output: -11.2984801384 | Program output: -11.2984801384
Correct output: -136.1442960385 | Program output: -138.1485962195
Correct output: 143.0911996605 | Program output: 142.0911996605
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_mod} {:instruction float_pop} {:instruction integer_max} {:instruction integer_flush} {:instruction in1} {:instruction in1} {:instruction float_stackdepth} {:instruction in2} {:instruction integer_add} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_max} {:instruction float_inc} {:instruction integer_add} {:instruction float_inc} {:instruction integer_add} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_add} {:instruction float_inc} {:instruction integer_add} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_add} {:instruction float_inc} {:instruction float_inc} {:instruction integer_add} {:instruction float_inc} {:instruction float_inc} {:instruction integer_add} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_max} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_dup_times} {:instruction float_rot} {:instruction float_stackdepth} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_min} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_add} {:instruction float_inc} {:instruction float_inc} {:instruction integer_max} {:instruction float_inc} {:instruction float_dup} {:instruction float_inc} {:instruction 25} {:instruction float_stackdepth} {:instruction float_inc} {:instruction float_dup_times} {:instruction float_yank} {:instruction float_inc} {:instruction integer_add} {:instruction integer_yankdup} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_add} {:instruction integer_yankdup} {:instruction float_inc} {:instruction integer_max} {:instruction float_dup_times} {:instruction float_max} {:instruction float_dup_times} {:instruction float_stackdepth} {:instruction float_inc} {:instruction float_inc} {:instruction float_dup_times} {:instruction float_dup_items} {:instruction integer_add} {:instruction 25} {:instruction integer_flush} {:instruction integer_add} {:instruction float_yank} {:instruction float_dup_times} {:instruction integer_swap} {:instruction print_integer} {:instruction 78.00430018095415} {:instruction float_rot} {:instruction float_dup_times} {:instruction float_rot} {:instruction integer_shove} {:instruction integer_add} {:instruction float_dec} {:instruction float_inc} {:instruction float_sub} {:instruction float_rot} {:instruction integer_shove} {:instruction float_rot} {:instruction float_sub} {:instruction float_rot} {:instruction integer_sub} {:instruction float_inc} {:instruction integer_swap} {:instruction integer_min} {:instruction print_float} {:instruction integer_dec} {:instruction integer_stackdepth} {:instruction float_yank} {:instruction float_div} {:instruction float_mult} {:instruction integer_shove} {:instruction float_dup_times} {:instruction float_yankdup} {:instruction float_pop})
Best program: (float_mod float_pop integer_max integer_flush in1 in1 float_stackdepth in2 integer_add float_inc float_inc float_inc float_inc integer_max float_inc integer_add float_inc integer_add float_inc float_inc float_inc float_inc integer_add float_inc integer_add float_inc float_inc float_inc float_inc integer_add float_inc float_inc integer_add float_inc float_inc integer_add float_inc float_inc float_inc float_inc float_inc float_inc float_inc integer_max float_inc float_inc float_inc float_inc float_dup_times float_rot float_stackdepth float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc integer_min float_inc float_inc float_inc float_inc float_inc integer_add float_inc float_inc integer_max float_inc float_dup float_inc 25 float_stackdepth float_inc float_dup_times float_yank float_inc integer_add integer_yankdup float_inc float_inc float_inc float_inc integer_add integer_yankdup float_inc integer_max float_dup_times float_max float_dup_times float_stackdepth float_inc float_inc float_dup_times float_dup_items integer_add 25 integer_flush integer_add float_yank float_dup_times integer_swap print_integer 78.00430018095415 float_rot float_dup_times float_rot integer_shove integer_add float_dec float_inc float_sub float_rot integer_shove float_rot float_sub float_rot integer_sub float_inc integer_swap integer_min print_float integer_dec integer_stackdepth float_yank float_div float_mult integer_shove float_dup_times float_yankdup float_pop)
Errors: [23.9957 8 27.0 2 9.9957 7 40.0043 8 19.0 2 6.9957 9 27.0043 7 5.0 1 26.0043 8 14.0 2 0.0 0 9.0043 8 30.0 1 3.0 1 28.0 2 0.9957 7 0.0 0 33.0 9 31.9957 9 10.0 1 26.0 2 31.0 2 0.0 0 2.0043 6 1.0 1]
Total: 508.0
Mean: 10.16
Genome size: 132
Size: 133
Percent parens: 0.008
--- Population Statistics ---
Average total errors in population: 2851.3803265
Median total errors in population: 1007.42095
Error averages by case: (127.81917910000044 10.272 109.56407650000001 3.813 106.42083270000016 7.978 128.8603100999993 8.164 104.31579060000003 3.716 130.64174700000044 8.079 105.70447159999975 8.051 87.1916967 3.56 104.68626549999969 8.573 100.73871380000007 3.861 94.3777446000001 2.619 118.86172809999975 8.467 104.8703518999999 3.565 92.68703290000012 3.07 120.96718809999985 3.875 108.1706902 8.718 88.53022720000003 4.776 116.24795299999997 10.072 129.95480070000065 11.353 93.61663330000002 3.543 114.74010350000002 4.076 104.36628859999995 3.675 89.67548969999997 3.187 123.2207401999997 7.497 97.23227089999992 3.358)
Error minima by case: (0.0782 8 0.2864 1 0.2135 1 3.0474 1 2.3192 1 0.0474 2 1.9526 1 0.0 0 2.9526 1 0.0 0 0.0 0 0.0474 1 0.0 0 0.0 0 13.0 1 0.0474 1 0.0 0 0.0172 7 15.9526 7 0.1392 1 0.1457 1 1.0 1 0.0 0 0.0152 1 0.0 0)
Average genome size in population (length): 136.68
Average program size in population (points): 137.68
Average percent parens in population: 0.007
Minimum age in population: 145.2006138701387
Maximum age in population: 150.1760141810367
Average age in population: 147.7495816412892
Median age in population: 147.7692339385395
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 11
Genome diversity (% unique Plush genomes):	 0.938
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 11
Syntactic diversity (% unique Push programs):	 0.938
Total error diversity:				 0.572
Error (vector) diversity:			 0.665
Behavioral diversity:				 0.666
--- Run Statistics ---
Number of program evaluations used so far: 106000
Number of point (instruction) evaluations so far: 229879240
--- Timings ---
Current time: 1529616357710 milliseconds
Total Time:         421.8 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       141.9 seconds, 33.7%
Fitness Testing:    221.5 seconds, 52.5%
Report:              58.2 seconds, 13.8%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 105
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 106
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 106
;;******************************
;; -*- Number IO problem report - generation 106
Test total error for best: 28133.38270000003
Test mean error for best: 14.06669
;;------------------------------
Outputs of best individual on training cases:
Correct output: -74.6179542037 | Program output: -50.6222543847
Correct output: 78.7609586813  | Program output: 51.7609586813 
Correct output: 3.0100598709   | Program output: 13.0057596899 
Correct output: -99.2368061293 | Program output: -139.2411063103
Correct output: 88.6808415603  | Program output: 69.6808415603 
Correct output: -151.1060419578 | Program output: -144.1103421388
Correct output: 56.004616184   | Program output: 29.000316003  
Correct output: 33.520660154   | Program output: 38.520660154  
Correct output: 42.238861085   | Program output: 16.2345609041 
Correct output: -49.0227893765 | Program output: -35.0227893765
Correct output: 103.4057483059 | Program output: 103.4057483059
Correct output: -106.1378273779 | Program output: -115.1421275589
Correct output: 37.9625599991  | Program output: 67.9625599991 
Correct output: 71.9208193203  | Program output: 74.9208193203 
Correct output: 173.5348464317 | Program output: 145.5348464317
Correct output: -77.0615185935 | Program output: -76.0658187744
Correct output: -20.7643622555 | Program output: -20.7643622555
Correct output: 1.9827630815   | Program output: -31.0172369185
Correct output: -39.1198682611 | Program output: -7.124168442  
Correct output: 1.1392376036   | Program output: 11.1392376036 
Correct output: 129.1930977679 | Program output: 103.1930977679
Correct output: 26.7496211861  | Program output: 57.7496211861 
Correct output: -11.2984801384 | Program output: -11.2984801384
Correct output: -136.1442960385 | Program output: -138.1485962195
Correct output: 143.0911996605 | Program output: 142.0911996605
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_mod} {:instruction float_pop} {:instruction integer_max} {:instruction integer_flush} {:instruction in1} {:instruction in1} {:instruction float_stackdepth} {:instruction in2} {:instruction integer_add} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_max} {:instruction float_inc} {:instruction integer_add} {:instruction float_inc} {:instruction integer_add} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_add} {:instruction float_inc} {:instruction integer_add} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_add} {:instruction float_inc} {:instruction float_inc} {:instruction integer_add} {:instruction float_inc} {:instruction float_inc} {:instruction integer_add} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_max} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_dup_times} {:instruction float_rot} {:instruction float_stackdepth} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_min} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_add} {:instruction float_inc} {:instruction float_inc} {:instruction integer_max} {:instruction float_inc} {:instruction float_dup} {:instruction float_inc} {:instruction 25} {:instruction float_stackdepth} {:instruction float_inc} {:instruction float_dup_times} {:instruction float_yank} {:instruction float_inc} {:instruction integer_add} {:instruction integer_yankdup} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_add} {:instruction integer_yankdup} {:instruction float_inc} {:instruction integer_max} {:instruction float_dup_times} {:instruction float_max} {:instruction integer_mod} {:instruction float_stackdepth} {:instruction float_inc} {:instruction float_inc} {:instruction float_dup_times} {:instruction float_dup_items} {:instruction integer_add} {:instruction 25} {:instruction integer_flush} {:instruction integer_add} {:instruction float_yank} {:instruction float_dup_times} {:instruction integer_swap} {:instruction print_integer} {:instruction 78.00430018095415} {:instruction float_rot} {:instruction float_dup_times} {:instruction float_rot} {:instruction integer_shove} {:instruction integer_add} {:instruction float_dec} {:instruction float_inc} {:instruction float_sub} {:instruction float_rot} {:instruction integer_shove} {:instruction float_rot} {:instruction float_sub} {:instruction float_rot} {:instruction integer_sub} {:instruction float_inc} {:instruction integer_swap} {:instruction integer_min} {:instruction print_float} {:instruction integer_dec} {:instruction integer_stackdepth} {:instruction float_yank} {:instruction float_div} {:instruction float_mult} {:instruction integer_shove} {:instruction float_dup_times} {:instruction float_yankdup} {:instruction float_pop})
Best program: (float_mod float_pop integer_max integer_flush in1 in1 float_stackdepth in2 integer_add float_inc float_inc float_inc float_inc integer_max float_inc integer_add float_inc integer_add float_inc float_inc float_inc float_inc integer_add float_inc integer_add float_inc float_inc float_inc float_inc integer_add float_inc float_inc integer_add float_inc float_inc integer_add float_inc float_inc float_inc float_inc float_inc float_inc float_inc integer_max float_inc float_inc float_inc float_inc float_dup_times float_rot float_stackdepth float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc integer_min float_inc float_inc float_inc float_inc float_inc integer_add float_inc float_inc integer_max float_inc float_dup float_inc 25 float_stackdepth float_inc float_dup_times float_yank float_inc integer_add integer_yankdup float_inc float_inc float_inc float_inc integer_add integer_yankdup float_inc integer_max float_dup_times float_max integer_mod float_stackdepth float_inc float_inc float_dup_times float_dup_items integer_add 25 integer_flush integer_add float_yank float_dup_times integer_swap print_integer 78.00430018095415 float_rot float_dup_times float_rot integer_shove integer_add float_dec float_inc float_sub float_rot integer_shove float_rot float_sub float_rot integer_sub float_inc integer_swap integer_min print_float integer_dec integer_stackdepth float_yank float_div float_mult integer_shove float_dup_times float_yankdup float_pop)
Errors: [23.9957 8 27.0 2 9.9957 7 40.0043 8 19.0 2 6.9957 9 27.0043 7 5.0 1 26.0043 8 14.0 2 0.0 0 9.0043 8 30.0 1 3.0 1 28.0 2 0.9957 7 0.0 0 33.0 9 31.9957 9 10.0 1 26.0 2 31.0 2 0.0 0 2.0043 6 1.0 1]
Total: 508.0
Mean: 10.16
Genome size: 132
Size: 133
Percent parens: 0.008
--- Population Statistics ---
Average total errors in population: 3052.1491845
Median total errors in population: 1015.0
Error averages by case: (134.50526950000042 10.373 116.49315109999993 3.894 113.76487090000047 7.946 135.1576596999994 8.21 112.24129060000007 3.78 137.21082400000023 8.078 117.38919169999946 8.055 95.15743850000003 3.636 114.96278419999936 8.495 109.94944170000002 3.969 103.29987090000007 2.524 126.95288389999943 8.418 113.31809929999993 3.658 101.88799040000008 3.008 130.87357349999988 3.967 116.77983669999986 8.68 98.33545589999999 4.505 124.22894749999998 10.075 136.80105240000054 11.364 96.1402172000001 3.553 124.3503453 4.116 109.20807459999996 3.763 97.60460270000003 3.222 130.31238089999945 7.492 107.05493139999993 3.388)
Error minima by case: (0.0782 7 0.7136 1 0.0101 1 4.0474 1 2.6808 1 0.0474 1 2.8857 1 0.0 0 5.0474 1 0.0 0 0.0 0 0.0474 1 0.0 0 0.0 0 2.4652 1 0.0043 1 0.0 0 0.0172 7 3.5947 7 0.1053 1 2.8573 1 0.0365 1 0.0 0 0.0474 1 0.0 0)
Average genome size in population (length): 136.93
Average program size in population (points): 137.93
Average percent parens in population: 0.007
Minimum age in population: 146.2006138701387
Maximum age in population: 151.8988633155172
Average age in population: 149.0079641963722
Median age in population: 149.05195790406
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 9
Genome diversity (% unique Plush genomes):	 0.946
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 9
Syntactic diversity (% unique Push programs):	 0.946
Total error diversity:				 0.568
Error (vector) diversity:			 0.641
Behavioral diversity:				 0.642
--- Run Statistics ---
Number of program evaluations used so far: 107000
Number of point (instruction) evaluations so far: 233302490
--- Timings ---
Current time: 1529616362868 milliseconds
Total Time:         427.1 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       143.4 seconds, 33.6%
Fitness Testing:    224.5 seconds, 52.6%
Report:              59.1 seconds, 13.8%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 106
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 107
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 107
;;******************************
;; -*- Number IO problem report - generation 107
Test total error for best: 28133.38270000003
Test mean error for best: 14.06669
;;------------------------------
Outputs of best individual on training cases:
Correct output: -74.6179542037 | Program output: -50.6222543847
Correct output: 78.7609586813  | Program output: 51.7609586813 
Correct output: 3.0100598709   | Program output: 13.0057596899 
Correct output: -99.2368061293 | Program output: -139.2411063103
Correct output: 88.6808415603  | Program output: 69.6808415603 
Correct output: -151.1060419578 | Program output: -144.1103421388
Correct output: 56.004616184   | Program output: 29.000316003  
Correct output: 33.520660154   | Program output: 38.520660154  
Correct output: 42.238861085   | Program output: 16.2345609041 
Correct output: -49.0227893765 | Program output: -35.0227893765
Correct output: 103.4057483059 | Program output: 103.4057483059
Correct output: -106.1378273779 | Program output: -115.1421275589
Correct output: 37.9625599991  | Program output: 67.9625599991 
Correct output: 71.9208193203  | Program output: 74.9208193203 
Correct output: 173.5348464317 | Program output: 145.5348464317
Correct output: -77.0615185935 | Program output: -76.0658187744
Correct output: -20.7643622555 | Program output: -20.7643622555
Correct output: 1.9827630815   | Program output: -31.0172369185
Correct output: -39.1198682611 | Program output: -7.124168442  
Correct output: 1.1392376036   | Program output: 11.1392376036 
Correct output: 129.1930977679 | Program output: 103.1930977679
Correct output: 26.7496211861  | Program output: 57.7496211861 
Correct output: -11.2984801384 | Program output: -11.2984801384
Correct output: -136.1442960385 | Program output: -138.1485962195
Correct output: 143.0911996605 | Program output: 142.0911996605
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_mod} {:instruction float_pop} {:instruction integer_max} {:instruction integer_flush} {:instruction in1} {:instruction in1} {:instruction float_stackdepth} {:instruction in2} {:instruction integer_add} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_max} {:instruction float_inc} {:instruction integer_add} {:instruction float_inc} {:instruction integer_add} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_add} {:instruction float_inc} {:instruction integer_add} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_add} {:instruction float_inc} {:instruction float_inc} {:instruction integer_add} {:instruction float_inc} {:instruction float_inc} {:instruction integer_add} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_max} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_dup_times} {:instruction float_rot} {:instruction float_stackdepth} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_min} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_add} {:instruction float_inc} {:instruction float_inc} {:instruction integer_max} {:instruction float_inc} {:instruction float_dup} {:instruction float_inc} {:instruction 25} {:instruction float_stackdepth} {:instruction float_inc} {:instruction float_dup_times} {:instruction float_yank} {:instruction float_inc} {:instruction integer_add} {:instruction integer_yankdup} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_add} {:instruction integer_yankdup} {:instruction float_inc} {:instruction integer_max} {:instruction float_dup_times} {:instruction float_max} {:instruction float_dup_times} {:instruction float_stackdepth} {:instruction float_inc} {:instruction float_inc} {:instruction float_dup_times} {:instruction float_dup_items} {:instruction integer_add} {:instruction 25} {:instruction integer_flush} {:instruction integer_add} {:instruction float_yank} {:instruction float_dup_times} {:instruction integer_swap} {:instruction print_integer} {:instruction 78.00430018095415} {:instruction float_rot} {:instruction float_dup_times} {:instruction float_rot} {:instruction integer_shove} {:instruction integer_add} {:instruction float_dec} {:instruction float_inc} {:instruction float_sub} {:instruction float_rot} {:instruction integer_shove} {:instruction float_rot} {:instruction float_sub} {:instruction float_rot} {:instruction integer_sub} {:instruction float_inc} {:instruction integer_swap} {:instruction integer_min} {:instruction print_float} {:instruction integer_dec} {:instruction integer_stackdepth} {:instruction float_yank} {:instruction float_div} {:instruction float_mult} {:instruction integer_shove} {:instruction float_dup_times} {:instruction float_yankdup} {:instruction float_pop})
Best program: (float_mod float_pop integer_max integer_flush in1 in1 float_stackdepth in2 integer_add float_inc float_inc float_inc float_inc integer_max float_inc integer_add float_inc integer_add float_inc float_inc float_inc float_inc integer_add float_inc integer_add float_inc float_inc float_inc float_inc integer_add float_inc float_inc integer_add float_inc float_inc integer_add float_inc float_inc float_inc float_inc float_inc float_inc float_inc integer_max float_inc float_inc float_inc float_inc float_dup_times float_rot float_stackdepth float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc integer_min float_inc float_inc float_inc float_inc float_inc integer_add float_inc float_inc integer_max float_inc float_dup float_inc 25 float_stackdepth float_inc float_dup_times float_yank float_inc integer_add integer_yankdup float_inc float_inc float_inc float_inc integer_add integer_yankdup float_inc integer_max float_dup_times float_max float_dup_times float_stackdepth float_inc float_inc float_dup_times float_dup_items integer_add 25 integer_flush integer_add float_yank float_dup_times integer_swap print_integer 78.00430018095415 float_rot float_dup_times float_rot integer_shove integer_add float_dec float_inc float_sub float_rot integer_shove float_rot float_sub float_rot integer_sub float_inc integer_swap integer_min print_float integer_dec integer_stackdepth float_yank float_div float_mult integer_shove float_dup_times float_yankdup float_pop)
Errors: [23.9957 8 27.0 2 9.9957 7 40.0043 8 19.0 2 6.9957 9 27.0043 7 5.0 1 26.0043 8 14.0 2 0.0 0 9.0043 8 30.0 1 3.0 1 28.0 2 0.9957 7 0.0 0 33.0 9 31.9957 9 10.0 1 26.0 2 31.0 2 0.0 0 2.0043 6 1.0 1]
Total: 508.0
Mean: 10.16
Genome size: 132
Size: 133
Percent parens: 0.008
--- Population Statistics ---
Average total errors in population: 3242.439665
Median total errors in population: 1015.0
Error averages by case: (134.66575910000066 10.341 124.82737860000002 4.011 118.03525610000078 7.984 138.95982149999935 8.273 121.35863630000007 3.92 142.8623392000003 8.231 122.45874629999896 8.096 106.96885630000006 3.782 119.58556609999896 8.538 123.42822580000009 4.087 115.43926320000017 2.652 131.3940658999992 8.513 122.0798618 3.739 112.78227460000016 3.177 141.88890769999992 4.026 117.71011849999977 8.486 107.88583719999993 4.719 138.24348280000007 10.176 136.2589210000006 11.346 98.52688120000005 3.609 135.88914739999998 4.255 116.62857279999994 3.808 109.84603130000009 3.427 135.88121749999945 7.621 118.53249679999989 3.485)
Error minima by case: (0.4294 8 0.7136 1 0.2135 1 2.0474 1 1.0 1 0.0043 2 1.9526 1 0.0 0 2.6988 1 0.0 0 0.0 0 0.0474 1 0.0374 1 0.0 0 10.0 1 0.0474 1 0.0 0 0.1582 7 9.8721 7 0.0183 1 1.8069 1 0.7496 1 0.0 0 0.0474 1 0.0 0)
Average genome size in population (length): 137.015
Average program size in population (points): 138.015
Average percent parens in population: 0.007
Minimum age in population: 147.2006138701387
Maximum age in population: 152.4056957427184
Average age in population: 150.3089912506433
Median age in population: 150.3874158939855
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 8
Genome diversity (% unique Plush genomes):	 0.947
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 8
Syntactic diversity (% unique Push programs):	 0.947
Total error diversity:				 0.543
Error (vector) diversity:			 0.618
Behavioral diversity:				 0.619
--- Run Statistics ---
Number of program evaluations used so far: 108000
Number of point (instruction) evaluations so far: 236727865
--- Timings ---
Current time: 1529616368002 milliseconds
Total Time:         432.2 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       144.8 seconds, 33.5%
Fitness Testing:    227.6 seconds, 52.6%
Report:              59.8 seconds, 13.8%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 107
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 108
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 108
;;******************************
;; -*- Number IO problem report - generation 108
Test total error for best: 28133.38270000003
Test mean error for best: 14.06669
;;------------------------------
Outputs of best individual on training cases:
Correct output: -74.6179542037 | Program output: -50.6222543847
Correct output: 78.7609586813  | Program output: 51.7609586813 
Correct output: 3.0100598709   | Program output: 13.0057596899 
Correct output: -99.2368061293 | Program output: -139.2411063103
Correct output: 88.6808415603  | Program output: 69.6808415603 
Correct output: -151.1060419578 | Program output: -144.1103421388
Correct output: 56.004616184   | Program output: 29.000316003  
Correct output: 33.520660154   | Program output: 38.520660154  
Correct output: 42.238861085   | Program output: 16.2345609041 
Correct output: -49.0227893765 | Program output: -35.0227893765
Correct output: 103.4057483059 | Program output: 103.4057483059
Correct output: -106.1378273779 | Program output: -115.1421275589
Correct output: 37.9625599991  | Program output: 67.9625599991 
Correct output: 71.9208193203  | Program output: 74.9208193203 
Correct output: 173.5348464317 | Program output: 145.5348464317
Correct output: -77.0615185935 | Program output: -76.0658187744
Correct output: -20.7643622555 | Program output: -20.7643622555
Correct output: 1.9827630815   | Program output: -31.0172369185
Correct output: -39.1198682611 | Program output: -7.124168442  
Correct output: 1.1392376036   | Program output: 11.1392376036 
Correct output: 129.1930977679 | Program output: 103.1930977679
Correct output: 26.7496211861  | Program output: 57.7496211861 
Correct output: -11.2984801384 | Program output: -11.2984801384
Correct output: -136.1442960385 | Program output: -138.1485962195
Correct output: 143.0911996605 | Program output: 142.0911996605
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_mod} {:instruction float_pop} {:instruction integer_max} {:instruction integer_flush} {:instruction in1} {:instruction in1} {:instruction float_stackdepth} {:instruction in2} {:instruction integer_add} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_max} {:instruction float_inc} {:instruction integer_add} {:instruction float_inc} {:instruction integer_add} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_add} {:instruction float_inc} {:instruction integer_add} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_add} {:instruction float_inc} {:instruction float_inc} {:instruction integer_add} {:instruction float_inc} {:instruction float_inc} {:instruction integer_add} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_max} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_dup_times} {:instruction float_rot} {:instruction float_stackdepth} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_min} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_add} {:instruction float_inc} {:instruction float_inc} {:instruction integer_max} {:instruction float_inc} {:instruction float_dup} {:instruction float_inc} {:instruction 25} {:instruction float_stackdepth} {:instruction float_inc} {:instruction float_dup_times} {:instruction float_yank} {:instruction float_inc} {:instruction integer_add} {:instruction integer_yankdup} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_add} {:instruction integer_yankdup} {:instruction float_inc} {:instruction integer_max} {:instruction float_dup_times} {:instruction float_max} {:instruction float_dup_times} {:instruction float_stackdepth} {:instruction float_inc} {:instruction float_inc} {:instruction float_dup_times} {:instruction float_dup_items} {:instruction integer_add} {:instruction 25} {:instruction integer_flush} {:instruction integer_add} {:instruction float_yank} {:instruction float_dup_times} {:instruction integer_swap} {:instruction print_integer} {:instruction 78.00430018095415} {:instruction float_rot} {:instruction float_dup_times} {:instruction float_rot} {:instruction integer_shove} {:instruction integer_add} {:instruction float_dec} {:instruction float_inc} {:instruction float_sub} {:instruction float_rot} {:instruction integer_shove} {:instruction float_rot} {:instruction float_sub} {:instruction float_rot} {:instruction integer_sub} {:instruction float_inc} {:instruction integer_dup_items} {:instruction integer_min} {:instruction print_float} {:instruction integer_dec} {:instruction integer_stackdepth} {:instruction float_yank} {:instruction float_div} {:instruction float_mult} {:instruction integer_shove} {:instruction float_dup_times} {:instruction float_yankdup} {:instruction float_pop})
Best program: (float_mod float_pop integer_max integer_flush in1 in1 float_stackdepth in2 integer_add float_inc float_inc float_inc float_inc integer_max float_inc integer_add float_inc integer_add float_inc float_inc float_inc float_inc integer_add float_inc integer_add float_inc float_inc float_inc float_inc integer_add float_inc float_inc integer_add float_inc float_inc integer_add float_inc float_inc float_inc float_inc float_inc float_inc float_inc integer_max float_inc float_inc float_inc float_inc float_dup_times float_rot float_stackdepth float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc integer_min float_inc float_inc float_inc float_inc float_inc integer_add float_inc float_inc integer_max float_inc float_dup float_inc 25 float_stackdepth float_inc float_dup_times float_yank float_inc integer_add integer_yankdup float_inc float_inc float_inc float_inc integer_add integer_yankdup float_inc integer_max float_dup_times float_max float_dup_times float_stackdepth float_inc float_inc float_dup_times float_dup_items integer_add 25 integer_flush integer_add float_yank float_dup_times integer_swap print_integer 78.00430018095415 float_rot float_dup_times float_rot integer_shove integer_add float_dec float_inc float_sub float_rot integer_shove float_rot float_sub float_rot integer_sub float_inc integer_dup_items integer_min print_float integer_dec integer_stackdepth float_yank float_div float_mult integer_shove float_dup_times float_yankdup float_pop)
Errors: [23.9957 8 27.0 2 9.9957 7 40.0043 8 19.0 2 6.9957 9 27.0043 7 5.0 1 26.0043 8 14.0 2 0.0 0 9.0043 8 30.0 1 3.0 1 28.0 2 0.9957 7 0.0 0 33.0 9 31.9957 9 10.0 1 26.0 2 31.0 2 0.0 0 2.0043 6 1.0 1]
Total: 508.0
Mean: 10.16
Genome size: 132
Size: 133
Percent parens: 0.008
--- Population Statistics ---
Average total errors in population: 2820.825873799999
Median total errors in population: 1015.0
Error averages by case: (120.91443960000026 10.283 111.12030879999998 3.832 99.81463300000011 7.826 121.73045449999941 8.122 106.43597010000005 3.734 125.2199146000003 8.05 102.58059679999982 7.96 89.12127220000002 3.622 101.07896669999968 8.391 104.27256470000009 3.942 94.41455090000014 2.512 113.62894829999972 8.348 106.34832749999993 3.588 92.9944007000001 2.971 124.36208879999987 3.912 103.86741980000008 8.51 88.38852290000001 4.482 118.62029760000001 10.053 122.52641280000043 11.278 92.63334830000001 3.412 118.01271669999998 4.102 105.16041929999994 3.696 92.09889939999998 3.205 118.2555121999998 7.457 100.59488759999999 3.342)
Error minima by case: (0.4173 8 0.2864 1 0.0474 1 6.0474 1 1.6808 1 0.0474 2 2.9526 1 0.0 0 1.7098 1 1.0 1 0.0 0 0.0474 1 0.9364 1 0.0 0 13.0 1 0.0043 1 0.0 0 0.0329 6 8.8801 7 0.1392 1 3.1931 1 0.0 0 0.0 0 0.0474 1 0.0 0)
Average genome size in population (length): 136.998
Average program size in population (points): 137.998
Average percent parens in population: 0.007
Minimum age in population: 149.0015023888675
Maximum age in population: 153.5218050120155
Average age in population: 151.5850145942755
Median age in population: 151.6056969534242
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 10
Genome diversity (% unique Plush genomes):	 0.945
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 10
Syntactic diversity (% unique Push programs):	 0.945
Total error diversity:				 0.562
Error (vector) diversity:			 0.631
Behavioral diversity:				 0.632
--- Run Statistics ---
Number of program evaluations used so far: 109000
Number of point (instruction) evaluations so far: 240152815
--- Timings ---
Current time: 1529616373157 milliseconds
Total Time:         437.4 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       146.1 seconds, 33.4%
Fitness Testing:    230.6 seconds, 52.7%
Report:              60.5 seconds, 13.8%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 108
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 109
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 109
;;******************************
;; -*- Number IO problem report - generation 109
Test total error for best: 28133.38270000003
Test mean error for best: 14.06669
;;------------------------------
Outputs of best individual on training cases:
Correct output: -74.6179542037 | Program output: -50.6222543847
Correct output: 78.7609586813  | Program output: 51.7609586813 
Correct output: 3.0100598709   | Program output: 13.0057596899 
Correct output: -99.2368061293 | Program output: -139.2411063103
Correct output: 88.6808415603  | Program output: 69.6808415603 
Correct output: -151.1060419578 | Program output: -144.1103421388
Correct output: 56.004616184   | Program output: 29.000316003  
Correct output: 33.520660154   | Program output: 38.520660154  
Correct output: 42.238861085   | Program output: 16.2345609041 
Correct output: -49.0227893765 | Program output: -35.0227893765
Correct output: 103.4057483059 | Program output: 103.4057483059
Correct output: -106.1378273779 | Program output: -115.1421275589
Correct output: 37.9625599991  | Program output: 67.9625599991 
Correct output: 71.9208193203  | Program output: 74.9208193203 
Correct output: 173.5348464317 | Program output: 145.5348464317
Correct output: -77.0615185935 | Program output: -76.0658187744
Correct output: -20.7643622555 | Program output: -20.7643622555
Correct output: 1.9827630815   | Program output: -31.0172369185
Correct output: -39.1198682611 | Program output: -7.124168442  
Correct output: 1.1392376036   | Program output: 11.1392376036 
Correct output: 129.1930977679 | Program output: 103.1930977679
Correct output: 26.7496211861  | Program output: 57.7496211861 
Correct output: -11.2984801384 | Program output: -11.2984801384
Correct output: -136.1442960385 | Program output: -138.1485962195
Correct output: 143.0911996605 | Program output: 142.0911996605
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_mod} {:instruction float_pop} {:instruction integer_max} {:instruction integer_flush} {:instruction in1} {:instruction in1} {:instruction float_stackdepth} {:instruction in2} {:instruction integer_add} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_max} {:instruction float_inc} {:instruction integer_add} {:instruction float_inc} {:instruction integer_add} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_add} {:instruction float_inc} {:instruction integer_add} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_add} {:instruction float_inc} {:instruction float_inc} {:instruction integer_add} {:instruction float_inc} {:instruction float_inc} {:instruction integer_add} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_max} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_dup_times} {:instruction float_rot} {:instruction float_stackdepth} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_min} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_add} {:instruction float_inc} {:instruction float_inc} {:instruction integer_max} {:instruction float_inc} {:instruction float_dup} {:instruction float_inc} {:instruction 25} {:instruction float_stackdepth} {:instruction float_inc} {:instruction float_dup_times} {:instruction float_yank} {:instruction float_inc} {:instruction integer_add} {:instruction integer_yankdup} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_add} {:instruction integer_yankdup} {:instruction float_inc} {:instruction integer_max} {:instruction float_dup_times} {:instruction float_max} {:instruction integer_mod} {:instruction float_stackdepth} {:instruction float_inc} {:instruction float_inc} {:instruction float_dup_times} {:instruction float_dup_items} {:instruction integer_add} {:instruction 25} {:instruction integer_flush} {:instruction integer_add} {:instruction float_yank} {:instruction float_dup_times} {:instruction integer_swap} {:instruction print_integer} {:instruction 78.00430018095415} {:instruction float_rot} {:instruction float_dup_times} {:instruction float_rot} {:instruction integer_shove} {:instruction integer_add} {:instruction float_dec} {:instruction float_inc} {:instruction float_sub} {:instruction float_rot} {:instruction integer_shove} {:instruction float_rot} {:instruction float_sub} {:instruction float_rot} {:instruction integer_sub} {:instruction float_inc} {:instruction integer_swap} {:instruction integer_min} {:instruction print_float} {:instruction integer_dec} {:instruction integer_stackdepth} {:instruction float_yank} {:instruction float_div} {:instruction float_mult} {:instruction integer_shove} {:instruction float_dup_times} {:instruction float_yankdup} {:instruction float_pop})
Best program: (float_mod float_pop integer_max integer_flush in1 in1 float_stackdepth in2 integer_add float_inc float_inc float_inc float_inc integer_max float_inc integer_add float_inc integer_add float_inc float_inc float_inc float_inc integer_add float_inc integer_add float_inc float_inc float_inc float_inc integer_add float_inc float_inc integer_add float_inc float_inc integer_add float_inc float_inc float_inc float_inc float_inc float_inc float_inc integer_max float_inc float_inc float_inc float_inc float_dup_times float_rot float_stackdepth float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc integer_min float_inc float_inc float_inc float_inc float_inc integer_add float_inc float_inc integer_max float_inc float_dup float_inc 25 float_stackdepth float_inc float_dup_times float_yank float_inc integer_add integer_yankdup float_inc float_inc float_inc float_inc integer_add integer_yankdup float_inc integer_max float_dup_times float_max integer_mod float_stackdepth float_inc float_inc float_dup_times float_dup_items integer_add 25 integer_flush integer_add float_yank float_dup_times integer_swap print_integer 78.00430018095415 float_rot float_dup_times float_rot integer_shove integer_add float_dec float_inc float_sub float_rot integer_shove float_rot float_sub float_rot integer_sub float_inc integer_swap integer_min print_float integer_dec integer_stackdepth float_yank float_div float_mult integer_shove float_dup_times float_yankdup float_pop)
Errors: [23.9957 8 27.0 2 9.9957 7 40.0043 8 19.0 2 6.9957 9 27.0043 7 5.0 1 26.0043 8 14.0 2 0.0 0 9.0043 8 30.0 1 3.0 1 28.0 2 0.9957 7 0.0 0 33.0 9 31.9957 9 10.0 1 26.0 2 31.0 2 0.0 0 2.0043 6 1.0 1]
Total: 508.0
Mean: 10.16
Genome size: 132
Size: 133
Percent parens: 0.008
--- Population Statistics ---
Average total errors in population: 3080.441009300001
Median total errors in population: 1008.3714
Error averages by case: (125.46760890000057 10.282 121.37873359999999 3.963 109.27392260000045 7.945 131.126061699999 8.186 117.32491710000002 3.799 133.5108844000007 8.136 112.99171069999933 8.06 99.11461680000006 3.746 110.65859479999932 8.528 116.69869680000015 4.093 110.23071000000014 2.629 122.52402069999935 8.424 117.76609549999996 3.662 107.58447930000015 3.126 137.0894243999999 3.967 108.14889429999994 8.397 97.81653209999993 4.842 132.51191890000004 10.101 128.75981410000085 11.303 99.25594790000001 3.596 130.44160800000006 4.152 115.85085269999996 3.771 104.88079490000007 3.349 126.77387229999934 7.553 114.25929679999992 3.391)
Error minima by case: (0.1135 8 0.2864 1 0.2135 1 0.9526 1 1.6994 1 0.0474 2 2.0474 1 0.0 0 1.0474 1 0.0 0 0.0 0 0.0474 1 0.0 0 0.0 0 0.4652 1 0.0043 1 0.0 0 0.0172 7 2.9109 8 0.1392 1 6.1931 1 0.0 0 0.0 0 0.0474 1 0.0 0)
Average genome size in population (length): 137.218
Average program size in population (points): 138.218
Average percent parens in population: 0.007
Minimum age in population: 150.0015023888675
Maximum age in population: 155.0650253167593
Average age in population: 152.9404268412648
Median age in population: 153.0093807533471
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 7
Genome diversity (% unique Plush genomes):	 0.935
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 7
Syntactic diversity (% unique Push programs):	 0.935
Total error diversity:				 0.56
Error (vector) diversity:			 0.626
Behavioral diversity:				 0.627
--- Run Statistics ---
Number of program evaluations used so far: 110000
Number of point (instruction) evaluations so far: 243583265
--- Timings ---
Current time: 1529616378266 milliseconds
Total Time:         442.5 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       147.5 seconds, 33.3%
Fitness Testing:    233.6 seconds, 52.8%
Report:              61.2 seconds, 13.8%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 109
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 110
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 110
;;******************************
;; -*- Number IO problem report - generation 110
Test total error for best: 28133.38270000003
Test mean error for best: 14.06669
;;------------------------------
Outputs of best individual on training cases:
Correct output: -74.6179542037 | Program output: -50.6222543847
Correct output: 78.7609586813  | Program output: 51.7609586813 
Correct output: 3.0100598709   | Program output: 13.0057596899 
Correct output: -99.2368061293 | Program output: -139.2411063103
Correct output: 88.6808415603  | Program output: 69.6808415603 
Correct output: -151.1060419578 | Program output: -144.1103421388
Correct output: 56.004616184   | Program output: 29.000316003  
Correct output: 33.520660154   | Program output: 38.520660154  
Correct output: 42.238861085   | Program output: 16.2345609041 
Correct output: -49.0227893765 | Program output: -35.0227893765
Correct output: 103.4057483059 | Program output: 103.4057483059
Correct output: -106.1378273779 | Program output: -115.1421275589
Correct output: 37.9625599991  | Program output: 67.9625599991 
Correct output: 71.9208193203  | Program output: 74.9208193203 
Correct output: 173.5348464317 | Program output: 145.5348464317
Correct output: -77.0615185935 | Program output: -76.0658187744
Correct output: -20.7643622555 | Program output: -20.7643622555
Correct output: 1.9827630815   | Program output: -31.0172369185
Correct output: -39.1198682611 | Program output: -7.124168442  
Correct output: 1.1392376036   | Program output: 11.1392376036 
Correct output: 129.1930977679 | Program output: 103.1930977679
Correct output: 26.7496211861  | Program output: 57.7496211861 
Correct output: -11.2984801384 | Program output: -11.2984801384
Correct output: -136.1442960385 | Program output: -138.1485962195
Correct output: 143.0911996605 | Program output: 142.0911996605
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_mod} {:instruction float_pop} {:instruction integer_max} {:instruction integer_flush} {:instruction in1} {:instruction in1} {:instruction float_stackdepth} {:instruction in2} {:instruction integer_add} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_max} {:instruction float_inc} {:instruction integer_add} {:instruction float_inc} {:instruction integer_add} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_add} {:instruction float_inc} {:instruction integer_add} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_add} {:instruction float_inc} {:instruction float_inc} {:instruction integer_add} {:instruction float_inc} {:instruction float_inc} {:instruction integer_add} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_max} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_dup_times} {:instruction float_rot} {:instruction float_stackdepth} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_min} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_add} {:instruction float_inc} {:instruction float_inc} {:instruction integer_max} {:instruction float_inc} {:instruction float_dup} {:instruction float_inc} {:instruction 25} {:instruction float_stackdepth} {:instruction float_inc} {:instruction float_dup_times} {:instruction float_yank} {:instruction float_inc} {:instruction integer_add} {:instruction integer_yankdup} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_add} {:instruction integer_yankdup} {:instruction float_inc} {:instruction integer_max} {:instruction float_dup_times} {:instruction float_max} {:instruction integer_mod} {:instruction float_stackdepth} {:instruction float_inc} {:instruction float_inc} {:instruction float_dup_times} {:instruction float_dup_items} {:instruction integer_add} {:instruction 25} {:instruction integer_flush} {:instruction integer_add} {:instruction float_yank} {:instruction float_dup_times} {:instruction integer_swap} {:instruction print_integer} {:instruction 78.00430018095415} {:instruction float_rot} {:instruction float_dup_times} {:instruction float_rot} {:instruction integer_shove} {:instruction integer_add} {:instruction float_dec} {:instruction float_inc} {:instruction float_sub} {:instruction float_rot} {:instruction integer_shove} {:instruction float_rot} {:instruction float_sub} {:instruction float_rot} {:instruction integer_sub} {:instruction float_inc} {:instruction integer_swap} {:instruction integer_min} {:instruction print_float} {:instruction integer_dec} {:instruction integer_stackdepth} {:instruction float_yank} {:instruction float_div} {:instruction float_mult} {:instruction integer_shove} {:instruction float_dup_times} {:instruction float_yankdup} {:instruction float_pop})
Best program: (float_mod float_pop integer_max integer_flush in1 in1 float_stackdepth in2 integer_add float_inc float_inc float_inc float_inc integer_max float_inc integer_add float_inc integer_add float_inc float_inc float_inc float_inc integer_add float_inc integer_add float_inc float_inc float_inc float_inc integer_add float_inc float_inc integer_add float_inc float_inc integer_add float_inc float_inc float_inc float_inc float_inc float_inc float_inc integer_max float_inc float_inc float_inc float_inc float_dup_times float_rot float_stackdepth float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc integer_min float_inc float_inc float_inc float_inc float_inc integer_add float_inc float_inc integer_max float_inc float_dup float_inc 25 float_stackdepth float_inc float_dup_times float_yank float_inc integer_add integer_yankdup float_inc float_inc float_inc float_inc integer_add integer_yankdup float_inc integer_max float_dup_times float_max integer_mod float_stackdepth float_inc float_inc float_dup_times float_dup_items integer_add 25 integer_flush integer_add float_yank float_dup_times integer_swap print_integer 78.00430018095415 float_rot float_dup_times float_rot integer_shove integer_add float_dec float_inc float_sub float_rot integer_shove float_rot float_sub float_rot integer_sub float_inc integer_swap integer_min print_float integer_dec integer_stackdepth float_yank float_div float_mult integer_shove float_dup_times float_yankdup float_pop)
Errors: [23.9957 8 27.0 2 9.9957 7 40.0043 8 19.0 2 6.9957 9 27.0043 7 5.0 1 26.0043 8 14.0 2 0.0 0 9.0043 8 30.0 1 3.0 1 28.0 2 0.9957 7 0.0 0 33.0 9 31.9957 9 10.0 1 26.0 2 31.0 2 0.0 0 2.0043 6 1.0 1]
Total: 508.0
Mean: 10.16
Genome size: 132
Size: 133
Percent parens: 0.008
--- Population Statistics ---
Average total errors in population: 2726.5164662000007
Median total errors in population: 918.21905
Error averages by case: (120.28215340000078 10.213 104.46690489999999 3.946 98.50929240000043 7.821 121.55595889999903 8.142 101.75082530000002 3.854 123.17171020000067 8.078 101.7396744999995 7.874 80.8026299 3.781 100.2231513999994 8.381 101.60129540000007 4.025 87.83632130000007 2.523 112.69190139999931 8.306 100.98485089999998 3.741 86.53204160000007 3.052 120.47266769999987 3.96 100.10859219999993 8.294 82.28500490000002 4.665 114.64731570000002 10.08 122.82095410000093 11.239 80.58532700000008 3.688 113.70049680000002 4.218 98.72209099999998 3.807 89.58615200000007 3.347 116.54826199999945 7.438 96.9408912999999 3.477)
Error minima by case: (0.3733 7 0.2433 1 0.0101 1 4.0474 1 2.3192 1 0.0043 1 2.9526 1 0.0 0 2.0474 1 0.0 0 0.0 0 0.0474 1 0.8598 1 0.0 0 13.0 1 0.0043 1 0.0 0 0.1441 7 5.6922 8 0.0739 1 4.1931 1 0.155 1 0.0 0 0.0043 1 0.0 0)
Average genome size in population (length): 137.112
Average program size in population (points): 138.112
Average percent parens in population: 0.007
Minimum age in population: 151.0015023888675
Maximum age in population: 156.2990195797935
Average age in population: 154.2325365885492
Median age in population: 154.2664444049163
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 9
Genome diversity (% unique Plush genomes):	 0.941
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 9
Syntactic diversity (% unique Push programs):	 0.941
Total error diversity:				 0.583
Error (vector) diversity:			 0.649
Behavioral diversity:				 0.649
--- Run Statistics ---
Number of program evaluations used so far: 111000
Number of point (instruction) evaluations so far: 247011076
--- Timings ---
Current time: 1529616383398 milliseconds
Total Time:         447.6 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       148.9 seconds, 33.3%
Fitness Testing:    236.7 seconds, 52.9%
Report:              61.9 seconds, 13.8%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 110
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 111
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 111
;;******************************
;; -*- Number IO problem report - generation 111
Test total error for best: 28133.38270000003
Test mean error for best: 14.06669
;;------------------------------
Outputs of best individual on training cases:
Correct output: -74.6179542037 | Program output: -50.6222543847
Correct output: 78.7609586813  | Program output: 51.7609586813 
Correct output: 3.0100598709   | Program output: 13.0057596899 
Correct output: -99.2368061293 | Program output: -139.2411063103
Correct output: 88.6808415603  | Program output: 69.6808415603 
Correct output: -151.1060419578 | Program output: -144.1103421388
Correct output: 56.004616184   | Program output: 29.000316003  
Correct output: 33.520660154   | Program output: 38.520660154  
Correct output: 42.238861085   | Program output: 16.2345609041 
Correct output: -49.0227893765 | Program output: -35.0227893765
Correct output: 103.4057483059 | Program output: 103.4057483059
Correct output: -106.1378273779 | Program output: -115.1421275589
Correct output: 37.9625599991  | Program output: 67.9625599991 
Correct output: 71.9208193203  | Program output: 74.9208193203 
Correct output: 173.5348464317 | Program output: 145.5348464317
Correct output: -77.0615185935 | Program output: -76.0658187744
Correct output: -20.7643622555 | Program output: -20.7643622555
Correct output: 1.9827630815   | Program output: -31.0172369185
Correct output: -39.1198682611 | Program output: -7.124168442  
Correct output: 1.1392376036   | Program output: 11.1392376036 
Correct output: 129.1930977679 | Program output: 103.1930977679
Correct output: 26.7496211861  | Program output: 57.7496211861 
Correct output: -11.2984801384 | Program output: -11.2984801384
Correct output: -136.1442960385 | Program output: -138.1485962195
Correct output: 143.0911996605 | Program output: 142.0911996605
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_sub} {:instruction integer_max} {:instruction integer_flush} {:instruction in1} {:instruction in1} {:instruction float_stackdepth} {:instruction in2} {:instruction integer_add} {:instruction float_inc} {:instruction integer_add} {:instruction float_inc} {:instruction float_inc} {:instruction integer_add} {:instruction float_inc} {:instruction integer_add} {:instruction float_inc} {:instruction integer_max} {:instruction float_inc} {:instruction integer_add} {:instruction float_inc} {:instruction integer_add} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_add} {:instruction float_inc} {:instruction integer_add} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_add} {:instruction float_inc} {:instruction float_inc} {:instruction integer_add} {:instruction float_inc} {:instruction float_inc} {:instruction integer_add} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_add} {:instruction float_inc} {:instruction float_inc} {:instruction integer_max} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_dup_times} {:instruction float_rot} {:instruction float_stackdepth} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_min} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_add} {:instruction float_inc} {:instruction float_inc} {:instruction integer_max} {:instruction float_inc} {:instruction float_dup} {:instruction float_inc} {:instruction 25} {:instruction float_stackdepth} {:instruction float_inc} {:instruction float_dup_times} {:instruction float_yank} {:instruction float_inc} {:instruction integer_add} {:instruction integer_yankdup} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_add} {:instruction integer_yankdup} {:instruction float_inc} {:instruction integer_max} {:instruction float_dup_times} {:instruction float_max} {:instruction float_dup_times} {:instruction float_stackdepth} {:instruction float_inc} {:instruction float_inc} {:instruction float_dup_times} {:instruction float_dup_items} {:instruction integer_add} {:instruction 25} {:instruction integer_flush} {:instruction integer_add} {:instruction float_yank} {:instruction float_dup_times} {:instruction integer_swap} {:instruction print_integer} {:instruction 78.00430018095415} {:instruction float_rot} {:instruction float_dup_times} {:instruction float_rot} {:instruction integer_shove} {:instruction integer_add} {:instruction float_dec} {:instruction float_inc} {:instruction float_sub} {:instruction float_rot} {:instruction integer_shove} {:instruction float_rot} {:instruction float_sub} {:instruction float_rot} {:instruction integer_sub} {:instruction float_inc} {:instruction integer_swap} {:instruction integer_min} {:instruction print_float} {:instruction integer_dec} {:instruction integer_stackdepth} {:instruction float_yank} {:instruction float_mult} {:instruction integer_shove} {:instruction float_dup_times})
Best program: (float_sub integer_max integer_flush in1 in1 float_stackdepth in2 integer_add float_inc integer_add float_inc float_inc integer_add float_inc integer_add float_inc integer_max float_inc integer_add float_inc integer_add float_inc float_inc float_inc float_inc integer_add float_inc integer_add float_inc float_inc float_inc float_inc integer_add float_inc float_inc integer_add float_inc float_inc integer_add float_inc float_inc float_inc float_inc integer_add float_inc float_inc integer_max float_inc float_inc float_inc float_inc float_dup_times float_rot float_stackdepth float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc integer_min float_inc float_inc float_inc float_inc float_inc integer_add float_inc float_inc integer_max float_inc float_dup float_inc 25 float_stackdepth float_inc float_dup_times float_yank float_inc integer_add integer_yankdup float_inc float_inc float_inc float_inc integer_add integer_yankdup float_inc integer_max float_dup_times float_max float_dup_times float_stackdepth float_inc float_inc float_dup_times float_dup_items integer_add 25 integer_flush integer_add float_yank float_dup_times integer_swap print_integer 78.00430018095415 float_rot float_dup_times float_rot integer_shove integer_add float_dec float_inc float_sub float_rot integer_shove float_rot float_sub float_rot integer_sub float_inc integer_swap integer_min print_float integer_dec integer_stackdepth float_yank float_mult integer_shove float_dup_times)
Errors: [23.9957 8 27.0 2 9.9957 7 40.0043 8 19.0 2 6.9957 9 27.0043 7 5.0 1 26.0043 8 14.0 2 0.0 0 9.0043 8 30.0 1 3.0 1 28.0 2 0.9957 7 0.0 0 33.0 9 31.9957 9 10.0 1 26.0 2 31.0 2 0.0 0 2.0043 6 1.0 1]
Total: 508.0
Mean: 10.16
Genome size: 132
Size: 133
Percent parens: 0.008
--- Population Statistics ---
Average total errors in population: 3134.757873299999
Median total errors in population: 962.5816499999999
Error averages by case: (137.20348960000007 10.31 117.53247480000005 3.957 117.06620160000024 7.722 139.33856029999973 8.112 114.89474840000005 3.798 141.00628129999996 8.144 119.30887739999962 7.717 98.53236499999998 3.834 118.01944829999955 8.235 115.2989326000001 4.015 107.00154040000012 2.675 130.72597679999947 8.321 114.43902789999997 3.74 105.80242370000009 3.111 133.2373622999999 3.992 119.42695629999994 8.463 102.83434129999999 4.844 129.90484020000002 10.15 138.73897560000006 11.272 98.8917997 3.585 127.23791440000007 4.188 110.43408969999996 3.765 104.64721360000009 3.456 134.75783669999976 7.462 110.13819539999996 3.47)
Error minima by case: (1.4294 7 0.2433 1 0.0043 1 8.0474 1 0.4407 1 0.0474 1 0.9526 1 0.0 0 1.9526 1 0.0 0 0.0 0 0.0474 1 0.0 0 0.0 0 2.4652 1 0.0043 1 0.0 0 0.6333 8 0.4048 8 0.1392 1 1.8543 1 0.0 0 0.0 0 0.0043 1 0.0 0)
Average genome size in population (length): 136.744
Average program size in population (points): 137.744
Average percent parens in population: 0.007
Minimum age in population: 153.1665782721867
Maximum age in population: 157.448855667366
Average age in population: 155.5036019776014
Median age in population: 155.5449758566393
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 7
Genome diversity (% unique Plush genomes):	 0.953
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 7
Syntactic diversity (% unique Push programs):	 0.953
Total error diversity:				 0.582
Error (vector) diversity:			 0.657
Behavioral diversity:				 0.659
--- Run Statistics ---
Number of program evaluations used so far: 112000
Number of point (instruction) evaluations so far: 250429701
--- Timings ---
Current time: 1529616388466 milliseconds
Total Time:         452.7 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       150.2 seconds, 33.2%
Fitness Testing:    239.7 seconds, 52.9%
Report:              62.7 seconds, 13.8%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 111
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 112
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 112
;;******************************
;; -*- Number IO problem report - generation 112
Test total error for best: 28133.38270000003
Test mean error for best: 14.06669
;;------------------------------
Outputs of best individual on training cases:
Correct output: -74.6179542037 | Program output: -50.6222543847
Correct output: 78.7609586813  | Program output: 51.7609586813 
Correct output: 3.0100598709   | Program output: 13.0057596899 
Correct output: -99.2368061293 | Program output: -139.2411063103
Correct output: 88.6808415603  | Program output: 69.6808415603 
Correct output: -151.1060419578 | Program output: -144.1103421388
Correct output: 56.004616184   | Program output: 29.000316003  
Correct output: 33.520660154   | Program output: 38.520660154  
Correct output: 42.238861085   | Program output: 16.2345609041 
Correct output: -49.0227893765 | Program output: -35.0227893765
Correct output: 103.4057483059 | Program output: 103.4057483059
Correct output: -106.1378273779 | Program output: -115.1421275589
Correct output: 37.9625599991  | Program output: 67.9625599991 
Correct output: 71.9208193203  | Program output: 74.9208193203 
Correct output: 173.5348464317 | Program output: 145.5348464317
Correct output: -77.0615185935 | Program output: -76.0658187744
Correct output: -20.7643622555 | Program output: -20.7643622555
Correct output: 1.9827630815   | Program output: -31.0172369185
Correct output: -39.1198682611 | Program output: -7.124168442  
Correct output: 1.1392376036   | Program output: 11.1392376036 
Correct output: 129.1930977679 | Program output: 103.1930977679
Correct output: 26.7496211861  | Program output: 57.7496211861 
Correct output: -11.2984801384 | Program output: -11.2984801384
Correct output: -136.1442960385 | Program output: -138.1485962195
Correct output: 143.0911996605 | Program output: 142.0911996605
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_sub} {:instruction integer_max} {:instruction integer_flush} {:instruction in1} {:instruction in1} {:instruction float_stackdepth} {:instruction in2} {:instruction integer_add} {:instruction float_inc} {:instruction integer_add} {:instruction float_inc} {:instruction float_inc} {:instruction integer_add} {:instruction float_inc} {:instruction integer_add} {:instruction float_inc} {:instruction integer_max} {:instruction float_inc} {:instruction integer_add} {:instruction float_inc} {:instruction integer_add} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_add} {:instruction float_inc} {:instruction integer_add} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_add} {:instruction float_inc} {:instruction float_inc} {:instruction integer_add} {:instruction float_inc} {:instruction float_inc} {:instruction integer_add} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_add} {:instruction float_inc} {:instruction float_inc} {:instruction integer_max} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_dup_times} {:instruction float_rot} {:instruction float_stackdepth} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_min} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_add} {:instruction float_inc} {:instruction float_inc} {:instruction integer_max} {:instruction float_inc} {:instruction float_dup} {:instruction float_inc} {:instruction 25} {:instruction float_stackdepth} {:instruction float_inc} {:instruction float_dup_times} {:instruction float_yank} {:instruction float_inc} {:instruction integer_add} {:instruction integer_yankdup} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_add} {:instruction integer_yankdup} {:instruction float_inc} {:instruction integer_max} {:instruction float_dup_times} {:instruction float_max} {:instruction float_dup_times} {:instruction float_stackdepth} {:instruction float_inc} {:instruction float_inc} {:instruction float_dup_times} {:instruction float_dup_items} {:instruction integer_add} {:instruction 25} {:instruction integer_flush} {:instruction integer_add} {:instruction float_yank} {:instruction float_dup_times} {:instruction integer_swap} {:instruction print_integer} {:instruction 78.00430018095415} {:instruction float_rot} {:instruction integer_max} {:instruction float_rot} {:instruction integer_shove} {:instruction integer_add} {:instruction float_dec} {:instruction float_inc} {:instruction float_sub} {:instruction float_rot} {:instruction integer_shove} {:instruction float_rot} {:instruction float_sub} {:instruction float_rot} {:instruction integer_sub} {:instruction float_inc} {:instruction integer_swap} {:instruction integer_min} {:instruction print_float} {:instruction integer_dec} {:instruction integer_stackdepth} {:instruction float_yank} {:instruction float_div} {:instruction float_mult} {:instruction integer_shove} {:instruction float_dup_times} {:instruction float_yankdup} {:instruction float_pop})
Best program: (float_sub integer_max integer_flush in1 in1 float_stackdepth in2 integer_add float_inc integer_add float_inc float_inc integer_add float_inc integer_add float_inc integer_max float_inc integer_add float_inc integer_add float_inc float_inc float_inc float_inc integer_add float_inc integer_add float_inc float_inc float_inc float_inc integer_add float_inc float_inc integer_add float_inc float_inc integer_add float_inc float_inc float_inc float_inc integer_add float_inc float_inc integer_max float_inc float_inc float_inc float_inc float_dup_times float_rot float_stackdepth float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc integer_min float_inc float_inc float_inc float_inc float_inc integer_add float_inc float_inc integer_max float_inc float_dup float_inc 25 float_stackdepth float_inc float_dup_times float_yank float_inc integer_add integer_yankdup float_inc float_inc float_inc float_inc integer_add integer_yankdup float_inc integer_max float_dup_times float_max float_dup_times float_stackdepth float_inc float_inc float_dup_times float_dup_items integer_add 25 integer_flush integer_add float_yank float_dup_times integer_swap print_integer 78.00430018095415 float_rot integer_max float_rot integer_shove integer_add float_dec float_inc float_sub float_rot integer_shove float_rot float_sub float_rot integer_sub float_inc integer_swap integer_min print_float integer_dec integer_stackdepth float_yank float_div float_mult integer_shove float_dup_times float_yankdup float_pop)
Errors: [23.9957 8 27.0 2 9.9957 7 40.0043 8 19.0 2 6.9957 9 27.0043 7 5.0 1 26.0043 8 14.0 2 0.0 0 9.0043 8 30.0 1 3.0 1 28.0 2 0.9957 7 0.0 0 33.0 9 31.9957 9 10.0 1 26.0 2 31.0 2 0.0 0 2.0043 6 1.0 1]
Total: 508.0
Mean: 10.16
Genome size: 135
Size: 136
Percent parens: 0.007
--- Population Statistics ---
Average total errors in population: 2997.5795884999998
Median total errors in population: 1019.0
Error averages by case: (131.07776390000055 10.263 113.37113389999998 4.046 109.15216670000031 7.613 130.49055149999933 8.101 110.38533260000004 3.91 134.39341840000034 8.187 110.03809639999965 7.48 93.63504330000002 3.78 108.50714839999961 8.079 110.86992130000013 4.132 102.77380090000015 2.766 122.81377059999942 8.362 111.17804539999996 3.908 100.20506210000009 3.193 130.56329279999983 4.097 112.46200459999983 8.48 97.0542778 5.002 123.04074250000008 10.214 132.7086121000005 11.222 99.64550990000001 3.828 123.10981520000004 4.238 107.16325039999997 3.842 99.81585350000009 3.571 127.45356099999958 7.403 106.3934132999999 3.561)
Error minima by case: (0.3695 7 0.239 1 0.0101 1 4.0474 1 0.3235 1 0.0043 1 0.8734 1 0.0 0 3.0474 1 0.0 0 0.0 0 0.0474 2 0.0 0 0.0 0 12.0 1 0.0043 1 0.0 0 0.0172 8 13.9957 7 0.1392 1 6.1888 1 0.0 0 0.0 0 0.0043 2 0.0 0)
Average genome size in population (length): 137.429
Average program size in population (points): 138.429
Average percent parens in population: 0.007
Minimum age in population: 154.3564335402383
Maximum age in population: 159.06165443246
Average age in population: 156.7924609917147
Median age in population: 156.8136033118176
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 5
Genome diversity (% unique Plush genomes):	 0.958
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 5
Syntactic diversity (% unique Push programs):	 0.958
Total error diversity:				 0.612
Error (vector) diversity:			 0.688
Behavioral diversity:				 0.689
--- Run Statistics ---
Number of program evaluations used so far: 113000
Number of point (instruction) evaluations so far: 253865451
--- Timings ---
Current time: 1529616393802 milliseconds
Total Time:         457.9 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       151.6 seconds, 33.1%
Fitness Testing:    242.8 seconds, 53.0%
Report:              63.4 seconds, 13.8%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 112
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 113
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 113
;;******************************
;; -*- Number IO problem report - generation 113
Test total error for best: 28133.38270000003
Test mean error for best: 14.06669
;;------------------------------
Outputs of best individual on training cases:
Correct output: -74.6179542037 | Program output: -50.6222543847
Correct output: 78.7609586813  | Program output: 51.7609586813 
Correct output: 3.0100598709   | Program output: 13.0057596899 
Correct output: -99.2368061293 | Program output: -139.2411063103
Correct output: 88.6808415603  | Program output: 69.6808415603 
Correct output: -151.1060419578 | Program output: -144.1103421388
Correct output: 56.004616184   | Program output: 29.000316003  
Correct output: 33.520660154   | Program output: 38.520660154  
Correct output: 42.238861085   | Program output: 16.2345609041 
Correct output: -49.0227893765 | Program output: -35.0227893765
Correct output: 103.4057483059 | Program output: 103.4057483059
Correct output: -106.1378273779 | Program output: -115.1421275589
Correct output: 37.9625599991  | Program output: 67.9625599991 
Correct output: 71.9208193203  | Program output: 74.9208193203 
Correct output: 173.5348464317 | Program output: 145.5348464317
Correct output: -77.0615185935 | Program output: -76.0658187744
Correct output: -20.7643622555 | Program output: -20.7643622555
Correct output: 1.9827630815   | Program output: -31.0172369185
Correct output: -39.1198682611 | Program output: -7.124168442  
Correct output: 1.1392376036   | Program output: 11.1392376036 
Correct output: 129.1930977679 | Program output: 103.1930977679
Correct output: 26.7496211861  | Program output: 57.7496211861 
Correct output: -11.2984801384 | Program output: -11.2984801384
Correct output: -136.1442960385 | Program output: -138.1485962195
Correct output: 143.0911996605 | Program output: 142.0911996605
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_sub} {:instruction integer_max} {:instruction integer_flush} {:instruction in1} {:instruction in1} {:instruction float_stackdepth} {:instruction in2} {:instruction integer_add} {:instruction float_inc} {:instruction integer_add} {:instruction float_inc} {:instruction float_inc} {:instruction integer_add} {:instruction float_inc} {:instruction integer_max} {:instruction float_inc} {:instruction integer_add} {:instruction float_inc} {:instruction integer_add} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_add} {:instruction float_inc} {:instruction integer_add} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_add} {:instruction float_inc} {:instruction float_inc} {:instruction integer_add} {:instruction float_inc} {:instruction float_inc} {:instruction integer_add} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_max} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_dup_times} {:instruction float_rot} {:instruction float_stackdepth} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_min} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_add} {:instruction float_inc} {:instruction float_inc} {:instruction integer_max} {:instruction float_inc} {:instruction float_dup} {:instruction float_inc} {:instruction 25} {:instruction float_stackdepth} {:instruction float_inc} {:instruction float_dup_times} {:instruction float_yank} {:instruction float_inc} {:instruction integer_add} {:instruction integer_yankdup} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_add} {:instruction integer_yankdup} {:instruction float_inc} {:instruction integer_max} {:instruction float_dup_times} {:instruction float_max} {:instruction float_dup_times} {:instruction float_stackdepth} {:instruction float_inc} {:instruction float_inc} {:instruction float_dup_times} {:instruction float_dup_items} {:instruction integer_pop} {:instruction 25} {:instruction 25} {:instruction integer_flush} {:instruction integer_add} {:instruction float_yank} {:instruction float_dup_times} {:instruction integer_swap} {:instruction print_integer} {:instruction 78.00430018095415} {:instruction float_rot} {:instruction float_dup_times} {:instruction float_rot} {:instruction float_dec} {:instruction float_inc} {:instruction float_sub} {:instruction float_rot} {:instruction integer_shove} {:instruction float_rot} {:instruction float_sub} {:instruction float_rot} {:instruction integer_sub} {:instruction float_inc} {:instruction integer_swap} {:instruction integer_min} {:instruction print_float} {:instruction integer_dec} {:instruction integer_sub} {:instruction float_yank} {:instruction float_dup_items} {:instruction float_mult} {:instruction integer_shove} {:instruction float_dup_times} {:instruction float_div} {:instruction float_pop})
Best program: (float_sub integer_max integer_flush in1 in1 float_stackdepth in2 integer_add float_inc integer_add float_inc float_inc integer_add float_inc integer_max float_inc integer_add float_inc integer_add float_inc float_inc float_inc float_inc integer_add float_inc integer_add float_inc float_inc float_inc float_inc integer_add float_inc float_inc integer_add float_inc float_inc integer_add float_inc float_inc float_inc float_inc float_inc float_inc float_inc integer_max float_inc float_inc float_inc float_inc float_dup_times float_rot float_stackdepth float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc integer_min float_inc float_inc float_inc float_inc float_inc integer_add float_inc float_inc integer_max float_inc float_dup float_inc 25 float_stackdepth float_inc float_dup_times float_yank float_inc integer_add integer_yankdup float_inc float_inc float_inc float_inc integer_add integer_yankdup float_inc integer_max float_dup_times float_max float_dup_times float_stackdepth float_inc float_inc float_dup_times float_dup_items integer_pop 25 25 integer_flush integer_add float_yank float_dup_times integer_swap print_integer 78.00430018095415 float_rot float_dup_times float_rot float_dec float_inc float_sub float_rot integer_shove float_rot float_sub float_rot integer_sub float_inc integer_swap integer_min print_float integer_dec integer_sub float_yank float_dup_items float_mult integer_shove float_dup_times float_div float_pop)
Errors: [23.9957 8 27.0 2 9.9957 7 40.0043 8 19.0 2 6.9957 9 27.0043 7 5.0 1 26.0043 8 14.0 2 0.0 0 9.0043 8 30.0 1 3.0 1 28.0 2 0.9957 7 0.0 0 33.0 9 31.9957 9 10.0 1 26.0 2 31.0 2 0.0 0 2.0043 6 1.0 1]
Total: 508.0
Mean: 10.16
Genome size: 132
Size: 133
Percent parens: 0.008
--- Population Statistics ---
Average total errors in population: 2914.658863900001
Median total errors in population: 864.5107500000001
Error averages by case: (130.7651665000003 10.039 110.7378453 3.829 108.61403950000013 7.56 133.58595029999955 8.007 106.16121790000005 3.707 134.61295880000029 8.227 110.46690119999982 7.303 90.60248470000009 3.743 108.87486669999981 7.992 104.39693170000017 3.876 96.1320806000001 2.487 123.60062979999972 8.212 106.7567592 3.72 93.61309770000005 2.95 123.64970449999981 3.862 111.86343789999975 8.464 90.8848086 4.637 118.44487340000005 10.127 131.55769430000038 10.955 93.51228089999994 3.674 117.27048910000003 4.076 103.66257610000005 3.675 91.85226510000005 3.338 127.94553999999984 7.208 100.08926409999994 3.337)
Error minima by case: (1.4294 7 0.2433 1 0.2135 1 14.0043 1 2.3192 1 0.0474 2 1.0043 1 0.0 0 0.0043 1 0.0 0 0.0 0 0.0043 1 0.0 0 0.0 0 2.4652 1 0.0043 1 0.0 0 0.0172 7 0.1154 7 0.1392 1 2.8892 1 0.5594 1 0.0 0 0.0043 1 0.0 0)
Average genome size in population (length): 136.394
Average program size in population (points): 137.394
Average percent parens in population: 0.007
Minimum age in population: 156.0425797095568
Maximum age in population: 160.0916208187464
Average age in population: 158.0666885584377
Median age in population: 158.1284668584369
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 6
Genome diversity (% unique Plush genomes):	 0.951
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 6
Syntactic diversity (% unique Push programs):	 0.951
Total error diversity:				 0.619
Error (vector) diversity:			 0.689
Behavioral diversity:				 0.69
--- Run Statistics ---
Number of program evaluations used so far: 114000
Number of point (instruction) evaluations so far: 257275301
--- Timings ---
Current time: 1529616398964 milliseconds
Total Time:         463.2 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       153.0 seconds, 33.0%
Fitness Testing:    246.0 seconds, 53.1%
Report:              64.2 seconds, 13.9%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 113
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 114
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 114
;;******************************
;; -*- Number IO problem report - generation 114
Test total error for best: 28133.38270000003
Test mean error for best: 14.06669
;;------------------------------
Outputs of best individual on training cases:
Correct output: -74.6179542037 | Program output: -50.6222543847
Correct output: 78.7609586813  | Program output: 51.7609586813 
Correct output: 3.0100598709   | Program output: 13.0057596899 
Correct output: -99.2368061293 | Program output: -139.2411063103
Correct output: 88.6808415603  | Program output: 69.6808415603 
Correct output: -151.1060419578 | Program output: -144.1103421388
Correct output: 56.004616184   | Program output: 29.000316003  
Correct output: 33.520660154   | Program output: 38.520660154  
Correct output: 42.238861085   | Program output: 16.2345609041 
Correct output: -49.0227893765 | Program output: -35.0227893765
Correct output: 103.4057483059 | Program output: 103.4057483059
Correct output: -106.1378273779 | Program output: -115.1421275589
Correct output: 37.9625599991  | Program output: 67.9625599991 
Correct output: 71.9208193203  | Program output: 74.9208193203 
Correct output: 173.5348464317 | Program output: 145.5348464317
Correct output: -77.0615185935 | Program output: -76.0658187744
Correct output: -20.7643622555 | Program output: -20.7643622555
Correct output: 1.9827630815   | Program output: -31.0172369185
Correct output: -39.1198682611 | Program output: -7.124168442  
Correct output: 1.1392376036   | Program output: 11.1392376036 
Correct output: 129.1930977679 | Program output: 103.1930977679
Correct output: 26.7496211861  | Program output: 57.7496211861 
Correct output: -11.2984801384 | Program output: -11.2984801384
Correct output: -136.1442960385 | Program output: -138.1485962195
Correct output: 143.0911996605 | Program output: 142.0911996605
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_mod} {:instruction float_pop} {:instruction integer_max} {:instruction integer_flush} {:instruction in1} {:instruction in1} {:instruction float_stackdepth} {:instruction in2} {:instruction integer_add} {:instruction integer_add} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_add} {:instruction float_inc} {:instruction integer_add} {:instruction float_inc} {:instruction integer_max} {:instruction float_inc} {:instruction integer_add} {:instruction float_inc} {:instruction integer_add} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_add} {:instruction float_inc} {:instruction integer_add} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_add} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_add} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_max} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_dup_times} {:instruction float_rot} {:instruction float_stackdepth} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_min} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_add} {:instruction float_inc} {:instruction float_inc} {:instruction integer_max} {:instruction float_inc} {:instruction float_dup} {:instruction float_inc} {:instruction 25} {:instruction float_stackdepth} {:instruction float_inc} {:instruction float_dup_times} {:instruction float_yank} {:instruction float_inc} {:instruction integer_add} {:instruction integer_yankdup} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_add} {:instruction integer_yankdup} {:instruction float_inc} {:instruction integer_max} {:instruction float_dup_times} {:instruction float_max} {:instruction float_dup_times} {:instruction float_stackdepth} {:instruction float_inc} {:instruction float_inc} {:instruction float_dup_times} {:instruction float_dup_items} {:instruction integer_pop} {:instruction 25} {:instruction integer_flush} {:instruction integer_add} {:instruction float_yank} {:instruction float_dup_times} {:instruction integer_swap} {:instruction print_integer} {:instruction 78.00430018095415} {:instruction float_rot} {:instruction float_dup_times} {:instruction float_rot} {:instruction integer_shove} {:instruction integer_add} {:instruction float_dec} {:instruction integer_add} {:instruction float_sub} {:instruction float_rot} {:instruction integer_shove} {:instruction float_rot} {:instruction float_sub} {:instruction float_rot} {:instruction integer_sub} {:instruction float_inc} {:instruction integer_swap} {:instruction integer_min} {:instruction print_float} {:instruction integer_dec} {:instruction integer_stackdepth} {:instruction float_yank} {:instruction float_div} {:instruction float_mult} {:instruction integer_shove} {:instruction float_dup_times} {:instruction float_yankdup} {:instruction float_pop})
Best program: (float_mod float_pop integer_max integer_flush in1 in1 float_stackdepth in2 integer_add integer_add float_inc float_inc float_inc integer_add float_inc integer_add float_inc integer_max float_inc integer_add float_inc integer_add float_inc float_inc float_inc float_inc integer_add float_inc integer_add float_inc float_inc float_inc float_inc integer_add float_inc float_inc float_inc integer_add float_inc float_inc float_inc float_inc float_inc float_inc float_inc integer_max float_inc float_inc float_inc float_inc float_dup_times float_rot float_stackdepth float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc integer_min float_inc float_inc float_inc float_inc float_inc integer_add float_inc float_inc integer_max float_inc float_dup float_inc 25 float_stackdepth float_inc float_dup_times float_yank float_inc integer_add integer_yankdup float_inc float_inc float_inc float_inc integer_add integer_yankdup float_inc integer_max float_dup_times float_max float_dup_times float_stackdepth float_inc float_inc float_dup_times float_dup_items integer_pop 25 integer_flush integer_add float_yank float_dup_times integer_swap print_integer 78.00430018095415 float_rot float_dup_times float_rot integer_shove integer_add float_dec integer_add float_sub float_rot integer_shove float_rot float_sub float_rot integer_sub float_inc integer_swap integer_min print_float integer_dec integer_stackdepth float_yank float_div float_mult integer_shove float_dup_times float_yankdup float_pop)
Errors: [23.9957 8 27.0 2 9.9957 7 40.0043 8 19.0 2 6.9957 9 27.0043 7 5.0 1 26.0043 8 14.0 2 0.0 0 9.0043 8 30.0 1 3.0 1 28.0 2 0.9957 7 0.0 0 33.0 9 31.9957 9 10.0 1 26.0 2 31.0 2 0.0 0 2.0043 6 1.0 1]
Total: 508.0
Mean: 10.16
Genome size: 134
Size: 135
Percent parens: 0.007
--- Population Statistics ---
Average total errors in population: 2698.0309328000008
Median total errors in population: 750.0
Error averages by case: (120.16954440000022 9.884 101.84707630000003 3.764 102.00639839999998 7.405 124.32123509999977 8.058 97.57215530000012 3.674 123.92209370000006 8.376 103.32137400000003 7.044 80.85293909999999 3.696 102.62471640000005 7.789 93.97739650000011 3.807 86.71816210000007 2.39 113.80961819999973 8.264 99.0247183 3.627 85.93177070000006 2.87 114.10563259999986 3.757 102.05221049999975 8.447 81.0812922 4.478 110.56427450000005 10.126 124.78530750000024 10.798 86.74320209999995 3.59 108.32136260000006 3.966 98.12004380000002 3.59 85.03629219999999 3.338 117.14744209999999 7.124 90.93467419999996 3.178)
Error minima by case: (0.6137 7 0.2433 1 0.0474 1 3.0474 1 0.0 0 0.0043 1 0.9526 1 0.0 0 1.9526 1 1.0 1 0.0 0 0.0043 1 0.0 0 0.0 0 9.0 1 0.0043 1 0.0 0 0.0172 7 7.0149 8 0.1392 1 7.0 1 0.0 0 0.0 0 0.0043 2 0.0 0)
Average genome size in population (length): 136.285
Average program size in population (points): 137.285
Average percent parens in population: 0.007
Minimum age in population: 157.058365116781
Maximum age in population: 161.3041947165532
Average age in population: 159.3389879505411
Median age in population: 159.3762305881142
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 7
Genome diversity (% unique Plush genomes):	 0.939
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 7
Syntactic diversity (% unique Push programs):	 0.939
Total error diversity:				 0.592
Error (vector) diversity:			 0.68
Behavioral diversity:				 0.68
--- Run Statistics ---
Number of program evaluations used so far: 115000
Number of point (instruction) evaluations so far: 260682451
--- Timings ---
Current time: 1529616404027 milliseconds
Total Time:         468.2 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       154.3 seconds, 32.9%
Fitness Testing:    249.0 seconds, 53.2%
Report:              64.9 seconds, 13.9%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 114
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 115
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 115
;;******************************
;; -*- Number IO problem report - generation 115
Test total error for best: 28133.38270000003
Test mean error for best: 14.06669
;;------------------------------
Outputs of best individual on training cases:
Correct output: -74.6179542037 | Program output: -50.6222543847
Correct output: 78.7609586813  | Program output: 51.7609586813 
Correct output: 3.0100598709   | Program output: 13.0057596899 
Correct output: -99.2368061293 | Program output: -139.2411063103
Correct output: 88.6808415603  | Program output: 69.6808415603 
Correct output: -151.1060419578 | Program output: -144.1103421388
Correct output: 56.004616184   | Program output: 29.000316003  
Correct output: 33.520660154   | Program output: 38.520660154  
Correct output: 42.238861085   | Program output: 16.2345609041 
Correct output: -49.0227893765 | Program output: -35.0227893765
Correct output: 103.4057483059 | Program output: 103.4057483059
Correct output: -106.1378273779 | Program output: -115.1421275589
Correct output: 37.9625599991  | Program output: 67.9625599991 
Correct output: 71.9208193203  | Program output: 74.9208193203 
Correct output: 173.5348464317 | Program output: 145.5348464317
Correct output: -77.0615185935 | Program output: -76.0658187744
Correct output: -20.7643622555 | Program output: -20.7643622555
Correct output: 1.9827630815   | Program output: -31.0172369185
Correct output: -39.1198682611 | Program output: -7.124168442  
Correct output: 1.1392376036   | Program output: 11.1392376036 
Correct output: 129.1930977679 | Program output: 103.1930977679
Correct output: 26.7496211861  | Program output: 57.7496211861 
Correct output: -11.2984801384 | Program output: -11.2984801384
Correct output: -136.1442960385 | Program output: -138.1485962195
Correct output: 143.0911996605 | Program output: 142.0911996605
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_sub} {:instruction integer_max} {:instruction integer_flush} {:instruction in1} {:instruction in1} {:instruction float_stackdepth} {:instruction in2} {:instruction integer_add} {:instruction float_inc} {:instruction integer_add} {:instruction float_inc} {:instruction float_inc} {:instruction integer_add} {:instruction float_inc} {:instruction integer_add} {:instruction float_inc} {:instruction integer_max} {:instruction float_inc} {:instruction integer_add} {:instruction float_inc} {:instruction integer_add} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_add} {:instruction float_inc} {:instruction integer_add} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_add} {:instruction float_inc} {:instruction float_inc} {:instruction integer_add} {:instruction float_inc} {:instruction float_inc} {:instruction integer_add} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_add} {:instruction float_inc} {:instruction float_inc} {:instruction integer_max} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_dup_times} {:instruction float_rot} {:instruction float_stackdepth} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_min} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_add} {:instruction float_inc} {:instruction float_inc} {:instruction integer_max} {:instruction float_inc} {:instruction float_dup} {:instruction float_inc} {:instruction 25} {:instruction float_stackdepth} {:instruction float_inc} {:instruction float_dup_times} {:instruction float_yank} {:instruction float_inc} {:instruction integer_add} {:instruction integer_yankdup} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_add} {:instruction integer_yankdup} {:instruction float_inc} {:instruction integer_max} {:instruction float_dup_times} {:instruction float_max} {:instruction float_dup_times} {:instruction float_stackdepth} {:instruction float_inc} {:instruction float_inc} {:instruction float_dup_times} {:instruction float_dup_items} {:instruction integer_add} {:instruction 25} {:instruction integer_flush} {:instruction integer_add} {:instruction float_yank} {:instruction float_dup_times} {:instruction integer_swap} {:instruction print_integer} {:instruction 78.00430018095415} {:instruction float_rot} {:instruction float_dup_times} {:instruction float_rot} {:instruction integer_shove} {:instruction integer_add} {:instruction float_dec} {:instruction float_inc} {:instruction float_sub} {:instruction float_rot} {:instruction integer_shove} {:instruction float_rot} {:instruction float_sub} {:instruction float_rot} {:instruction integer_sub} {:instruction float_inc} {:instruction integer_swap} {:instruction integer_min} {:instruction print_float} {:instruction integer_dec} {:instruction integer_stackdepth} {:instruction float_yank} {:instruction float_div} {:instruction float_mult} {:instruction integer_shove} {:instruction float_dup_times} {:instruction float_yankdup} {:instruction float_pop})
Best program: (float_sub integer_max integer_flush in1 in1 float_stackdepth in2 integer_add float_inc integer_add float_inc float_inc integer_add float_inc integer_add float_inc integer_max float_inc integer_add float_inc integer_add float_inc float_inc float_inc float_inc integer_add float_inc integer_add float_inc float_inc float_inc float_inc integer_add float_inc float_inc integer_add float_inc float_inc integer_add float_inc float_inc float_inc float_inc integer_add float_inc float_inc integer_max float_inc float_inc float_inc float_inc float_dup_times float_rot float_stackdepth float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc integer_min float_inc float_inc float_inc float_inc float_inc integer_add float_inc float_inc integer_max float_inc float_dup float_inc 25 float_stackdepth float_inc float_dup_times float_yank float_inc integer_add integer_yankdup float_inc float_inc float_inc float_inc integer_add integer_yankdup float_inc integer_max float_dup_times float_max float_dup_times float_stackdepth float_inc float_inc float_dup_times float_dup_items integer_add 25 integer_flush integer_add float_yank float_dup_times integer_swap print_integer 78.00430018095415 float_rot float_dup_times float_rot integer_shove integer_add float_dec float_inc float_sub float_rot integer_shove float_rot float_sub float_rot integer_sub float_inc integer_swap integer_min print_float integer_dec integer_stackdepth float_yank float_div float_mult integer_shove float_dup_times float_yankdup float_pop)
Errors: [23.9957 8 27.0 2 9.9957 7 40.0043 8 19.0 2 6.9957 9 27.0043 7 5.0 1 26.0043 8 14.0 2 0.0 0 9.0043 8 30.0 1 3.0 1 28.0 2 0.9957 7 0.0 0 33.0 9 31.9957 9 10.0 1 26.0 2 31.0 2 0.0 0 2.0043 6 1.0 1]
Total: 508.0
Mean: 10.16
Genome size: 135
Size: 136
Percent parens: 0.007
--- Population Statistics ---
Average total errors in population: 3311.0183076000008
Median total errors in population: 801.9935499999999
Error averages by case: (152.13584039999967 9.985 121.17015290000003 3.905 128.66038759999992 7.372 155.7577401000005 8.095 118.03406420000007 3.83 156.1454237999998 8.576 128.81611740000008 6.825 102.91545020000008 3.858 128.51039270000015 7.748 118.06038110000017 4.0 107.12551190000012 2.628 145.35482199999993 8.445 119.13954420000003 3.795 105.11548920000003 3.065 137.13395089999986 3.931 134.58019349999958 8.661 105.48968219999998 4.388 131.67789620000008 10.242 151.86417069999982 10.772 102.51123519999992 3.754 130.19341870000008 4.128 114.64430190000003 3.762 107.65654240000008 3.491 149.30385510000005 7.162 113.25974309999997 3.344)
Error minima by case: (1.3847 7 0.2433 1 0.2135 1 6.0043 1 1.0 1 0.0043 1 2.9526 1 0.0 0 2.0043 1 0.0 0 0.0 0 0.0043 1 0.0 0 0.0 0 10.0 1 0.0043 2 0.0 0 0.0172 8 3.982 8 0.1392 1 3.1931 1 0.0 0 0.0 0 0.0043 1 0.0 0)
Average genome size in population (length): 135.968
Average program size in population (points): 136.968
Average percent parens in population: 0.007
Minimum age in population: 158.3267398849643
Maximum age in population: 162.5238140848957
Average age in population: 160.6486101712409
Median age in population: 160.6970458258724
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 10
Genome diversity (% unique Plush genomes):	 0.94
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 10
Syntactic diversity (% unique Push programs):	 0.94
Total error diversity:				 0.578
Error (vector) diversity:			 0.661
Behavioral diversity:				 0.663
--- Run Statistics ---
Number of program evaluations used so far: 116000
Number of point (instruction) evaluations so far: 264081651
--- Timings ---
Current time: 1529616409180 milliseconds
Total Time:         473.4 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       155.6 seconds, 32.9%
Fitness Testing:    252.0 seconds, 53.2%
Report:              65.6 seconds, 13.9%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 115
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 116
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 116
;;******************************
;; -*- Number IO problem report - generation 116
Test total error for best: 28133.38270000003
Test mean error for best: 14.06669
;;------------------------------
Outputs of best individual on training cases:
Correct output: -74.6179542037 | Program output: -50.6222543847
Correct output: 78.7609586813  | Program output: 51.7609586813 
Correct output: 3.0100598709   | Program output: 13.0057596899 
Correct output: -99.2368061293 | Program output: -139.2411063103
Correct output: 88.6808415603  | Program output: 69.6808415603 
Correct output: -151.1060419578 | Program output: -144.1103421388
Correct output: 56.004616184   | Program output: 29.000316003  
Correct output: 33.520660154   | Program output: 38.520660154  
Correct output: 42.238861085   | Program output: 16.2345609041 
Correct output: -49.0227893765 | Program output: -35.0227893765
Correct output: 103.4057483059 | Program output: 103.4057483059
Correct output: -106.1378273779 | Program output: -115.1421275589
Correct output: 37.9625599991  | Program output: 67.9625599991 
Correct output: 71.9208193203  | Program output: 74.9208193203 
Correct output: 173.5348464317 | Program output: 145.5348464317
Correct output: -77.0615185935 | Program output: -76.0658187744
Correct output: -20.7643622555 | Program output: -20.7643622555
Correct output: 1.9827630815   | Program output: -31.0172369185
Correct output: -39.1198682611 | Program output: -7.124168442  
Correct output: 1.1392376036   | Program output: 11.1392376036 
Correct output: 129.1930977679 | Program output: 103.1930977679
Correct output: 26.7496211861  | Program output: 57.7496211861 
Correct output: -11.2984801384 | Program output: -11.2984801384
Correct output: -136.1442960385 | Program output: -138.1485962195
Correct output: 143.0911996605 | Program output: 142.0911996605
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_mod} {:instruction float_pop} {:instruction integer_max} {:instruction integer_flush} {:instruction in1} {:instruction in1} {:instruction float_stackdepth} {:instruction in2} {:instruction integer_add} {:instruction integer_add} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_add} {:instruction float_inc} {:instruction integer_add} {:instruction float_inc} {:instruction integer_max} {:instruction float_inc} {:instruction integer_add} {:instruction float_inc} {:instruction integer_add} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_add} {:instruction float_inc} {:instruction integer_add} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_add} {:instruction float_inc} {:instruction float_inc} {:instruction integer_add} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_add} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_max} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_dup_times} {:instruction float_rot} {:instruction float_stackdepth} {:instruction integer_min} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_min} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_add} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_add} {:instruction float_inc} {:instruction float_inc} {:instruction integer_max} {:instruction float_inc} {:instruction float_dup} {:instruction float_inc} {:instruction 25} {:instruction float_stackdepth} {:instruction float_inc} {:instruction float_dup_times} {:instruction float_yank} {:instruction float_inc} {:instruction integer_add} {:instruction integer_yankdup} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_add} {:instruction integer_yankdup} {:instruction float_inc} {:instruction integer_max} {:instruction float_dup_times} {:instruction float_max} {:instruction float_dup_times} {:instruction float_stackdepth} {:instruction float_inc} {:instruction float_inc} {:instruction float_dup_times} {:instruction float_dup_items} {:instruction integer_add} {:instruction 25} {:instruction integer_flush} {:instruction integer_add} {:instruction float_yank} {:instruction float_dup_times} {:instruction integer_swap} {:instruction print_integer} {:instruction 78.00430018095415} {:instruction float_rot} {:instruction float_dup_times} {:instruction float_rot} {:instruction integer_shove} {:instruction integer_add} {:instruction float_dec} {:instruction float_inc} {:instruction float_sub} {:instruction float_rot} {:instruction integer_shove} {:instruction float_rot} {:instruction float_sub} {:instruction float_rot} {:instruction integer_sub} {:instruction float_inc} {:instruction integer_swap} {:instruction integer_min} {:instruction print_float} {:instruction integer_dec} {:instruction integer_stackdepth} {:instruction float_yank} {:instruction float_div} {:instruction float_mult} {:instruction integer_shove} {:instruction float_dup_times} {:instruction float_yankdup} {:instruction float_pop})
Best program: (float_mod float_pop integer_max integer_flush in1 in1 float_stackdepth in2 integer_add integer_add float_inc float_inc float_inc integer_add float_inc integer_add float_inc integer_max float_inc integer_add float_inc integer_add float_inc float_inc float_inc float_inc integer_add float_inc integer_add float_inc float_inc float_inc float_inc integer_add float_inc float_inc integer_add float_inc float_inc float_inc float_inc float_inc integer_add float_inc float_inc float_inc integer_max float_inc float_inc float_inc float_inc float_dup_times float_rot float_stackdepth integer_min float_inc float_inc float_inc float_inc integer_min float_inc float_inc float_inc float_inc float_inc integer_add float_inc float_inc float_inc float_inc integer_add float_inc float_inc integer_max float_inc float_dup float_inc 25 float_stackdepth float_inc float_dup_times float_yank float_inc integer_add integer_yankdup float_inc float_inc float_inc float_inc integer_add integer_yankdup float_inc integer_max float_dup_times float_max float_dup_times float_stackdepth float_inc float_inc float_dup_times float_dup_items integer_add 25 integer_flush integer_add float_yank float_dup_times integer_swap print_integer 78.00430018095415 float_rot float_dup_times float_rot integer_shove integer_add float_dec float_inc float_sub float_rot integer_shove float_rot float_sub float_rot integer_sub float_inc integer_swap integer_min print_float integer_dec integer_stackdepth float_yank float_div float_mult integer_shove float_dup_times float_yankdup float_pop)
Errors: [23.9957 8 27.0 2 9.9957 7 40.0043 8 19.0 2 6.9957 9 27.0043 7 5.0 1 26.0043 8 14.0 2 0.0 0 9.0043 8 30.0 1 3.0 1 28.0 2 0.9957 7 0.0 0 33.0 9 31.9957 9 10.0 1 26.0 2 31.0 2 0.0 0 2.0043 6 1.0 1]
Total: 508.0
Mean: 10.16
Genome size: 137
Size: 138
Percent parens: 0.007
--- Population Statistics ---
Average total errors in population: 2910.5102370999994
Median total errors in population: 727.9956999999999
Error averages by case: (131.7703679 9.853 110.8724054 3.792 112.65930369999978 7.067 133.02911160000014 7.871 105.62222960000005 3.699 133.7192165999998 8.424 112.06100940000024 6.605 90.36564730000003 3.607 111.51436100000024 7.392 102.77126810000007 3.899 92.88622920000007 2.468 121.96076879999997 8.129 106.95039040000003 3.696 92.2739728 2.914 121.67698649999996 3.798 112.52885909999964 8.699 91.01097980000003 4.35 117.34875930000007 10.204 134.01124199999995 10.768 94.35899309999996 3.547 116.23433380000009 4.043 106.25504710000003 3.649 91.93645420000007 3.344 126.64959420000015 6.845 98.18770619999994 3.192)
Error minima by case: (3.6137 7 0.239 1 0.792 1 8.0043 1 1.0 1 0.9526 1 1.0043 1 0.0 0 0.0043 1 0.0 0 0.0 0 0.0043 1 0.0 0 0.0 0 7.6118 1 0.0043 1 0.0 0 0.0166 7 14.3677 8 0.1392 1 6.0 1 0.0 0 0.0 0 0.0043 2 0.0 0)
Average genome size in population (length): 135.664
Average program size in population (points): 136.664
Average percent parens in population: 0.007
Minimum age in population: 159.6481476485312
Maximum age in population: 163.8300332587428
Average age in population: 161.9564946185407
Median age in population: 162.0059218084853
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 10
Genome diversity (% unique Plush genomes):	 0.946
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 10
Syntactic diversity (% unique Push programs):	 0.946
Total error diversity:				 0.559
Error (vector) diversity:			 0.646
Behavioral diversity:				 0.647
--- Run Statistics ---
Number of program evaluations used so far: 117000
Number of point (instruction) evaluations so far: 267473276
--- Timings ---
Current time: 1529616414303 milliseconds
Total Time:         478.5 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       157.0 seconds, 32.8%
Fitness Testing:    255.0 seconds, 53.3%
Report:              66.3 seconds, 13.9%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 116
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 117
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 117
;;******************************
;; -*- Number IO problem report - generation 117
Test total error for best: 28133.38270000003
Test mean error for best: 14.06669
;;------------------------------
Outputs of best individual on training cases:
Correct output: -74.6179542037 | Program output: -50.6222543847
Correct output: 78.7609586813  | Program output: 51.7609586813 
Correct output: 3.0100598709   | Program output: 13.0057596899 
Correct output: -99.2368061293 | Program output: -139.2411063103
Correct output: 88.6808415603  | Program output: 69.6808415603 
Correct output: -151.1060419578 | Program output: -144.1103421388
Correct output: 56.004616184   | Program output: 29.000316003  
Correct output: 33.520660154   | Program output: 38.520660154  
Correct output: 42.238861085   | Program output: 16.2345609041 
Correct output: -49.0227893765 | Program output: -35.0227893765
Correct output: 103.4057483059 | Program output: 103.4057483059
Correct output: -106.1378273779 | Program output: -115.1421275589
Correct output: 37.9625599991  | Program output: 67.9625599991 
Correct output: 71.9208193203  | Program output: 74.9208193203 
Correct output: 173.5348464317 | Program output: 145.5348464317
Correct output: -77.0615185935 | Program output: -76.0658187744
Correct output: -20.7643622555 | Program output: -20.7643622555
Correct output: 1.9827630815   | Program output: -31.0172369185
Correct output: -39.1198682611 | Program output: -7.124168442  
Correct output: 1.1392376036   | Program output: 11.1392376036 
Correct output: 129.1930977679 | Program output: 103.1930977679
Correct output: 26.7496211861  | Program output: 57.7496211861 
Correct output: -11.2984801384 | Program output: -11.2984801384
Correct output: -136.1442960385 | Program output: -138.1485962195
Correct output: 143.0911996605 | Program output: 142.0911996605
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_mod} {:instruction float_pop} {:instruction integer_mod} {:instruction float_mod} {:instruction float_pop} {:instruction integer_max} {:instruction integer_flush} {:instruction in1} {:instruction in1} {:instruction float_stackdepth} {:instruction in2} {:instruction integer_add} {:instruction integer_add} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_add} {:instruction float_inc} {:instruction integer_add} {:instruction float_inc} {:instruction integer_max} {:instruction float_inc} {:instruction integer_add} {:instruction float_inc} {:instruction integer_add} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_add} {:instruction float_inc} {:instruction integer_add} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_yankdup} {:instruction float_inc} {:instruction float_inc} {:instruction integer_add} {:instruction float_inc} {:instruction float_inc} {:instruction integer_add} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_dup_times} {:instruction float_inc} {:instruction integer_max} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_dup_times} {:instruction float_rot} {:instruction float_stackdepth} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_min} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_add} {:instruction float_inc} {:instruction float_inc} {:instruction integer_max} {:instruction float_inc} {:instruction float_dup} {:instruction float_inc} {:instruction 25} {:instruction float_stackdepth} {:instruction float_inc} {:instruction float_dup_times} {:instruction float_yank} {:instruction float_inc} {:instruction integer_add} {:instruction integer_yankdup} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_add} {:instruction integer_yankdup} {:instruction float_inc} {:instruction integer_max} {:instruction float_dup_times} {:instruction float_max} {:instruction float_dup_times} {:instruction float_stackdepth} {:instruction float_inc} {:instruction float_inc} {:instruction float_dup_times} {:instruction float_dup_items} {:instruction integer_pop} {:instruction 25} {:instruction integer_flush} {:instruction integer_add} {:instruction float_yank} {:instruction float_dup_times} {:instruction integer_swap} {:instruction print_integer} {:instruction 78.00430018095415} {:instruction float_rot} {:instruction float_dup_times} {:instruction float_rot} {:instruction integer_shove} {:instruction integer_add} {:instruction float_dec} {:instruction integer_add} {:instruction float_sub} {:instruction float_rot} {:instruction integer_shove} {:instruction float_rot} {:instruction float_sub} {:instruction float_rot} {:instruction integer_sub} {:instruction float_inc} {:instruction integer_swap} {:instruction integer_min} {:instruction print_float} {:instruction integer_dec} {:instruction integer_stackdepth} {:instruction float_yank} {:instruction float_div} {:instruction integer_stackdepth} {:instruction float_yank} {:instruction float_div} {:instruction float_mult} {:instruction integer_shove} {:instruction float_dup_times})
Best program: (float_mod float_pop integer_mod float_mod float_pop integer_max integer_flush in1 in1 float_stackdepth in2 integer_add integer_add float_inc float_inc float_inc integer_add float_inc integer_add float_inc integer_max float_inc integer_add float_inc integer_add float_inc float_inc float_inc float_inc integer_add float_inc integer_add float_inc float_inc float_inc float_inc integer_yankdup float_inc float_inc integer_add float_inc float_inc integer_add float_inc float_inc float_inc float_inc float_inc integer_dup_times float_inc integer_max float_inc float_inc float_inc float_inc float_dup_times float_rot float_stackdepth float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc integer_min float_inc float_inc float_inc float_inc float_inc integer_add float_inc float_inc integer_max float_inc float_dup float_inc 25 float_stackdepth float_inc float_dup_times float_yank float_inc integer_add integer_yankdup float_inc float_inc float_inc float_inc integer_add integer_yankdup float_inc integer_max float_dup_times float_max float_dup_times float_stackdepth float_inc float_inc float_dup_times float_dup_items integer_pop 25 integer_flush integer_add float_yank float_dup_times integer_swap print_integer 78.00430018095415 float_rot float_dup_times float_rot integer_shove integer_add float_dec integer_add float_sub float_rot integer_shove float_rot float_sub float_rot integer_sub float_inc integer_swap integer_min print_float integer_dec integer_stackdepth float_yank float_div integer_stackdepth float_yank float_div float_mult integer_shove float_dup_times)
Errors: [23.9957 8 27.0 2 9.9957 7 40.0043 8 19.0 2 6.9957 9 27.0043 7 5.0 1 26.0043 8 14.0 2 0.0 0 9.0043 8 30.0 1 3.0 1 28.0 2 0.9957 7 0.0 0 33.0 9 31.9957 9 10.0 1 26.0 2 31.0 2 0.0 0 2.0043 6 1.0 1]
Total: 508.0
Mean: 10.16
Genome size: 140
Size: 141
Percent parens: 0.007
--- Population Statistics ---
Average total errors in population: 2994.6963126000005
Median total errors in population: 796.4656
Error averages by case: (135.71809909999988 9.916 111.30490960000002 3.92 114.6669345999998 7.064 137.6361013000002 7.875 106.45666810000004 3.826 139.41824759999977 8.482 112.88082600000027 6.546 93.5029934 3.781 112.70531930000028 7.397 108.28752670000011 4.051 98.7046557000001 2.597 128.38934089999995 8.243 108.31979620000003 3.767 96.24239500000003 3.079 125.90101459999988 3.944 118.12407809999958 8.618 94.76813860000001 4.397 121.05432640000008 10.06 136.20103819999986 10.746 95.86712530000003 3.585 118.53486090000004 4.124 105.66297700000001 3.757 95.85068820000002 3.475 132.33310080000018 6.906 102.70715099999997 3.302)
Error minima by case: (0.3702 7 0.2433 1 0.0043 1 8.0043 1 0.3061 1 0.0043 1 0.9957 1 0.0 0 0.0043 1 0.0 0 0.0 0 0.0043 1 0.0 0 0.0 0 2.5348 1 0.0043 1 0.0 0 0.0172 7 7.8854 8 0.1392 1 1.1931 1 0.7181 1 0.0 0 0.0043 1 0.0 0)
Average genome size in population (length): 135.835
Average program size in population (points): 136.835
Average percent parens in population: 0.007
Minimum age in population: 161.1090257172608
Maximum age in population: 165.0003952576627
Average age in population: 163.2421174834216
Median age in population: 163.2732586478835
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 7
Genome diversity (% unique Plush genomes):	 0.943
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 7
Syntactic diversity (% unique Push programs):	 0.943
Total error diversity:				 0.556
Error (vector) diversity:			 0.623
Behavioral diversity:				 0.624
--- Run Statistics ---
Number of program evaluations used so far: 118000
Number of point (instruction) evaluations so far: 270869176
--- Timings ---
Current time: 1529616419491 milliseconds
Total Time:         483.7 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       158.4 seconds, 32.7%
Fitness Testing:    258.1 seconds, 53.4%
Report:              67.0 seconds, 13.9%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 117
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 118
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 118
;;******************************
;; -*- Number IO problem report - generation 118
Test total error for best: 28133.38270000003
Test mean error for best: 14.06669
;;------------------------------
Outputs of best individual on training cases:
Correct output: -74.6179542037 | Program output: -50.6222543847
Correct output: 78.7609586813  | Program output: 51.7609586813 
Correct output: 3.0100598709   | Program output: 13.0057596899 
Correct output: -99.2368061293 | Program output: -139.2411063103
Correct output: 88.6808415603  | Program output: 69.6808415603 
Correct output: -151.1060419578 | Program output: -144.1103421388
Correct output: 56.004616184   | Program output: 29.000316003  
Correct output: 33.520660154   | Program output: 38.520660154  
Correct output: 42.238861085   | Program output: 16.2345609041 
Correct output: -49.0227893765 | Program output: -35.0227893765
Correct output: 103.4057483059 | Program output: 103.4057483059
Correct output: -106.1378273779 | Program output: -115.1421275589
Correct output: 37.9625599991  | Program output: 67.9625599991 
Correct output: 71.9208193203  | Program output: 74.9208193203 
Correct output: 173.5348464317 | Program output: 145.5348464317
Correct output: -77.0615185935 | Program output: -76.0658187744
Correct output: -20.7643622555 | Program output: -20.7643622555
Correct output: 1.9827630815   | Program output: -31.0172369185
Correct output: -39.1198682611 | Program output: -7.124168442  
Correct output: 1.1392376036   | Program output: 11.1392376036 
Correct output: 129.1930977679 | Program output: 103.1930977679
Correct output: 26.7496211861  | Program output: 57.7496211861 
Correct output: -11.2984801384 | Program output: -11.2984801384
Correct output: -136.1442960385 | Program output: -138.1485962195
Correct output: 143.0911996605 | Program output: 142.0911996605
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_mod} {:instruction float_pop} {:instruction integer_max} {:instruction integer_flush} {:instruction in1} {:instruction in1} {:instruction float_stackdepth} {:instruction in2} {:instruction integer_add} {:instruction integer_add} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_add} {:instruction float_inc} {:instruction integer_add} {:instruction float_inc} {:instruction integer_max} {:instruction float_inc} {:instruction integer_add} {:instruction float_inc} {:instruction integer_add} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_add} {:instruction float_inc} {:instruction integer_add} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_yankdup} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_add} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_max} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_dup_times} {:instruction float_rot} {:instruction float_stackdepth} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_min} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_add} {:instruction float_inc} {:instruction float_inc} {:instruction integer_max} {:instruction float_inc} {:instruction float_dup} {:instruction float_inc} {:instruction 25} {:instruction float_stackdepth} {:instruction float_inc} {:instruction float_dup_times} {:instruction float_yank} {:instruction float_inc} {:instruction integer_add} {:instruction integer_yankdup} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_add} {:instruction integer_yankdup} {:instruction float_inc} {:instruction integer_max} {:instruction float_dup_times} {:instruction float_max} {:instruction float_dup_times} {:instruction float_stackdepth} {:instruction float_inc} {:instruction float_inc} {:instruction float_dup_times} {:instruction float_dup_items} {:instruction integer_pop} {:instruction 25} {:instruction integer_flush} {:instruction integer_add} {:instruction float_yank} {:instruction float_dup_times} {:instruction integer_swap} {:instruction integer_shove} {:instruction 78.00430018095415} {:instruction float_rot} {:instruction float_dup_times} {:instruction float_rot} {:instruction integer_shove} {:instruction integer_add} {:instruction float_dec} {:instruction integer_add} {:instruction float_sub} {:instruction float_rot} {:instruction integer_shove} {:instruction float_rot} {:instruction float_sub} {:instruction float_rot} {:instruction integer_sub} {:instruction float_inc} {:instruction integer_swap} {:instruction integer_min} {:instruction print_float} {:instruction integer_dec} {:instruction integer_stackdepth} {:instruction float_yank} {:instruction float_div} {:instruction float_mult} {:instruction integer_shove} {:instruction float_dup_times} {:instruction float_yankdup} {:instruction float_frominteger})
Best program: (float_mod float_pop integer_max integer_flush in1 in1 float_stackdepth in2 integer_add integer_add float_inc float_inc float_inc integer_add float_inc integer_add float_inc integer_max float_inc integer_add float_inc integer_add float_inc float_inc float_inc float_inc integer_add float_inc integer_add float_inc float_inc float_inc float_inc integer_yankdup float_inc float_inc float_inc integer_add float_inc float_inc float_inc float_inc float_inc float_inc float_inc integer_max float_inc float_inc float_inc float_inc float_dup_times float_rot float_stackdepth float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc integer_min float_inc float_inc float_inc float_inc float_inc integer_add float_inc float_inc integer_max float_inc float_dup float_inc 25 float_stackdepth float_inc float_dup_times float_yank float_inc integer_add integer_yankdup float_inc float_inc float_inc float_inc integer_add integer_yankdup float_inc integer_max float_dup_times float_max float_dup_times float_stackdepth float_inc float_inc float_dup_times float_dup_items integer_pop 25 integer_flush integer_add float_yank float_dup_times integer_swap integer_shove 78.00430018095415 float_rot float_dup_times float_rot integer_shove integer_add float_dec integer_add float_sub float_rot integer_shove float_rot float_sub float_rot integer_sub float_inc integer_swap integer_min print_float integer_dec integer_stackdepth float_yank float_div float_mult integer_shove float_dup_times float_yankdup float_frominteger)
Errors: [23.9957 8 27.0 2 9.9957 7 40.0043 8 19.0 2 6.9957 9 27.0043 7 5.0 1 26.0043 8 14.0 2 0.0 0 9.0043 8 30.0 1 3.0 1 28.0 2 0.9957 7 0.0 0 33.0 9 31.9957 9 10.0 1 26.0 2 31.0 2 0.0 0 2.0043 6 1.0 1]
Total: 508.0
Mean: 10.16
Genome size: 134
Size: 135
Percent parens: 0.007
--- Population Statistics ---
Average total errors in population: 2983.1572324
Median total errors in population: 777.99785
Error averages by case: (137.52301189999991 9.869 108.41898219999999 3.787 117.46780869999981 7.028 139.58958000000015 7.808 104.65851590000004 3.723 140.92589389999986 8.446 115.34088290000027 6.513 88.27835970000002 3.53 115.43922650000026 7.405 104.76494850000009 3.88 95.42821530000009 2.54 130.24230439999994 8.161 106.97678940000003 3.673 94.71312540000001 3.08 125.36017649999988 3.853 118.02258019999962 8.728 88.65996970000002 4.256 119.31502790000005 10.098 140.41323209999996 10.702 98.06633900000003 3.673 118.1512230000001 4.022 105.11110590000004 3.689 93.97963590000005 3.227 133.87823200000022 6.814 100.71406549999996 3.213)
Error minima by case: (1.3863 7 0.2433 1 0.7996 1 5.0043 1 2.3192 1 0.0043 1 0.9957 1 0.0 0 1.9957 1 0.0 0 0.0 0 0.0043 1 0.0 0 0.0 0 15.0 1 0.0043 1 0.0 0 0.0172 8 0.1156 8 0.1392 1 11.1931 1 0.0 0 0.0 0 0.0043 1 0.0 0)
Average genome size in population (length): 135.881
Average program size in population (points): 136.881
Average percent parens in population: 0.007
Minimum age in population: 162.51914512824
Maximum age in population: 166.5263729106617
Average age in population: 164.522545477974
Median age in population: 164.537860625279
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 12
Genome diversity (% unique Plush genomes):	 0.936
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 12
Syntactic diversity (% unique Push programs):	 0.936
Total error diversity:				 0.501
Error (vector) diversity:			 0.566
Behavioral diversity:				 0.568
--- Run Statistics ---
Number of program evaluations used so far: 119000
Number of point (instruction) evaluations so far: 274266226
--- Timings ---
Current time: 1529616424618 milliseconds
Total Time:         488.8 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       159.8 seconds, 32.7%
Fitness Testing:    261.2 seconds, 53.4%
Report:              67.8 seconds, 13.9%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 118
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 119
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 119
;;******************************
;; -*- Number IO problem report - generation 119
Test total error for best: 28133.38270000003
Test mean error for best: 14.06669
;;------------------------------
Outputs of best individual on training cases:
Correct output: -74.6179542037 | Program output: -50.6222543847
Correct output: 78.7609586813  | Program output: 51.7609586813 
Correct output: 3.0100598709   | Program output: 13.0057596899 
Correct output: -99.2368061293 | Program output: -139.2411063103
Correct output: 88.6808415603  | Program output: 69.6808415603 
Correct output: -151.1060419578 | Program output: -144.1103421388
Correct output: 56.004616184   | Program output: 29.000316003  
Correct output: 33.520660154   | Program output: 38.520660154  
Correct output: 42.238861085   | Program output: 16.2345609041 
Correct output: -49.0227893765 | Program output: -35.0227893765
Correct output: 103.4057483059 | Program output: 103.4057483059
Correct output: -106.1378273779 | Program output: -115.1421275589
Correct output: 37.9625599991  | Program output: 67.9625599991 
Correct output: 71.9208193203  | Program output: 74.9208193203 
Correct output: 173.5348464317 | Program output: 145.5348464317
Correct output: -77.0615185935 | Program output: -76.0658187744
Correct output: -20.7643622555 | Program output: -20.7643622555
Correct output: 1.9827630815   | Program output: -31.0172369185
Correct output: -39.1198682611 | Program output: -7.124168442  
Correct output: 1.1392376036   | Program output: 11.1392376036 
Correct output: 129.1930977679 | Program output: 103.1930977679
Correct output: 26.7496211861  | Program output: 57.7496211861 
Correct output: -11.2984801384 | Program output: -11.2984801384
Correct output: -136.1442960385 | Program output: -138.1485962195
Correct output: 143.0911996605 | Program output: 142.0911996605
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_sub} {:instruction integer_max} {:instruction integer_flush} {:instruction in1} {:instruction in1} {:instruction float_stackdepth} {:instruction in2} {:instruction integer_add} {:instruction float_inc} {:instruction integer_add} {:instruction float_inc} {:instruction float_inc} {:instruction integer_add} {:instruction float_inc} {:instruction integer_add} {:instruction float_inc} {:instruction integer_max} {:instruction float_inc} {:instruction integer_add} {:instruction float_inc} {:instruction integer_add} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_add} {:instruction float_inc} {:instruction integer_add} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_add} {:instruction float_inc} {:instruction float_inc} {:instruction integer_add} {:instruction float_inc} {:instruction float_inc} {:instruction integer_add} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_add} {:instruction float_inc} {:instruction float_inc} {:instruction integer_max} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_dup_times} {:instruction float_rot} {:instruction float_stackdepth} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_min} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_add} {:instruction float_inc} {:instruction float_inc} {:instruction integer_max} {:instruction float_inc} {:instruction float_dup} {:instruction float_inc} {:instruction 25} {:instruction float_stackdepth} {:instruction float_inc} {:instruction float_dup_times} {:instruction float_yank} {:instruction float_inc} {:instruction integer_add} {:instruction integer_yankdup} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_add} {:instruction integer_yankdup} {:instruction float_inc} {:instruction integer_max} {:instruction float_dup_times} {:instruction float_max} {:instruction float_dup_times} {:instruction float_stackdepth} {:instruction float_inc} {:instruction float_inc} {:instruction float_dup_times} {:instruction float_dup_items} {:instruction integer_add} {:instruction 25} {:instruction integer_flush} {:instruction integer_add} {:instruction float_yank} {:instruction float_dup_times} {:instruction integer_swap} {:instruction print_integer} {:instruction 78.00430018095415} {:instruction float_rot} {:instruction float_dup_times} {:instruction float_rot} {:instruction integer_shove} {:instruction integer_add} {:instruction float_dec} {:instruction float_inc} {:instruction float_sub} {:instruction float_rot} {:instruction integer_shove} {:instruction float_rot} {:instruction float_sub} {:instruction float_rot} {:instruction integer_sub} {:instruction float_inc} {:instruction integer_swap} {:instruction integer_min} {:instruction print_float} {:instruction integer_dec} {:instruction integer_stackdepth} {:instruction float_yank} {:instruction float_div} {:instruction float_mult} {:instruction integer_shove} {:instruction float_dup_times} {:instruction float_yankdup} {:instruction float_pop})
Best program: (float_sub integer_max integer_flush in1 in1 float_stackdepth in2 integer_add float_inc integer_add float_inc float_inc integer_add float_inc integer_add float_inc integer_max float_inc integer_add float_inc integer_add float_inc float_inc float_inc float_inc integer_add float_inc integer_add float_inc float_inc float_inc float_inc integer_add float_inc float_inc integer_add float_inc float_inc integer_add float_inc float_inc float_inc float_inc integer_add float_inc float_inc integer_max float_inc float_inc float_inc float_inc float_dup_times float_rot float_stackdepth float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc integer_min float_inc float_inc float_inc float_inc float_inc integer_add float_inc float_inc integer_max float_inc float_dup float_inc 25 float_stackdepth float_inc float_dup_times float_yank float_inc integer_add integer_yankdup float_inc float_inc float_inc float_inc integer_add integer_yankdup float_inc integer_max float_dup_times float_max float_dup_times float_stackdepth float_inc float_inc float_dup_times float_dup_items integer_add 25 integer_flush integer_add float_yank float_dup_times integer_swap print_integer 78.00430018095415 float_rot float_dup_times float_rot integer_shove integer_add float_dec float_inc float_sub float_rot integer_shove float_rot float_sub float_rot integer_sub float_inc integer_swap integer_min print_float integer_dec integer_stackdepth float_yank float_div float_mult integer_shove float_dup_times float_yankdup float_pop)
Errors: [23.9957 8 27.0 2 9.9957 7 40.0043 8 19.0 2 6.9957 9 27.0043 7 5.0 1 26.0043 8 14.0 2 0.0 0 9.0043 8 30.0 1 3.0 1 28.0 2 0.9957 7 0.0 0 33.0 9 31.9957 9 10.0 1 26.0 2 31.0 2 0.0 0 2.0043 6 1.0 1]
Total: 508.0
Mean: 10.16
Genome size: 135
Size: 136
Percent parens: 0.007
--- Population Statistics ---
Average total errors in population: 2930.437563199999
Median total errors in population: 745.4957
Error averages by case: (127.99072289999997 9.86 112.2551895 3.906 110.44624189999976 7.068 129.35472300000015 7.899 108.73880740000006 3.775 131.1481334999998 8.495 110.22077400000026 6.594 91.17217730000009 3.676 109.7938057000003 7.455 107.65792910000017 4.067 96.56969320000009 2.504 120.12771289999996 8.183 109.4413543 3.685 94.04124050000001 2.993 126.44138719999984 3.933 111.22388059999963 8.621 92.815402 4.427 121.54972660000006 10.167 130.50784409999994 10.707 96.05989859999997 3.55 120.26141140000014 4.093 106.95915310000001 3.723 96.61700800000006 3.299 123.44448770000025 6.835 102.73785869999992 3.346)
Error minima by case: (0.0685 7 0.2433 1 0.0043 1 0.7632 1 1.5307 1 0.0043 2 1.9957 2 0.0 0 2.9957 1 0.0 0 0.0 0 0.0043 1 0.0 0 0.0 0 16.0 1 0.0043 1 0.0 0 0.0172 7 7.0482 8 7.0E-4 1 7.1931 1 0.0 0 0.0 0 0.0043 1 0.0 0)
Average genome size in population (length): 135.816
Average program size in population (points): 136.816
Average percent parens in population: 0.007
Minimum age in population: 163.6518183789058
Maximum age in population: 167.5891081417945
Average age in population: 165.7644017290546
Median age in population: 165.8182820977541
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 12
Genome diversity (% unique Plush genomes):	 0.941
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 12
Syntactic diversity (% unique Push programs):	 0.941
Total error diversity:				 0.524
Error (vector) diversity:			 0.585
Behavioral diversity:				 0.585
--- Run Statistics ---
Number of program evaluations used so far: 120000
Number of point (instruction) evaluations so far: 277661626
--- Timings ---
Current time: 1529616429728 milliseconds
Total Time:         493.9 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       161.1 seconds, 32.6%
Fitness Testing:    264.2 seconds, 53.5%
Report:              68.5 seconds, 13.9%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 119
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 120
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 120
;;******************************
;; -*- Number IO problem report - generation 120
Test total error for best: 28133.38270000003
Test mean error for best: 14.06669
;;------------------------------
Outputs of best individual on training cases:
Correct output: -74.6179542037 | Program output: -50.6222543847
Correct output: 78.7609586813  | Program output: 51.7609586813 
Correct output: 3.0100598709   | Program output: 13.0057596899 
Correct output: -99.2368061293 | Program output: -139.2411063103
Correct output: 88.6808415603  | Program output: 69.6808415603 
Correct output: -151.1060419578 | Program output: -144.1103421388
Correct output: 56.004616184   | Program output: 29.000316003  
Correct output: 33.520660154   | Program output: 38.520660154  
Correct output: 42.238861085   | Program output: 16.2345609041 
Correct output: -49.0227893765 | Program output: -35.0227893765
Correct output: 103.4057483059 | Program output: 103.4057483059
Correct output: -106.1378273779 | Program output: -115.1421275589
Correct output: 37.9625599991  | Program output: 67.9625599991 
Correct output: 71.9208193203  | Program output: 74.9208193203 
Correct output: 173.5348464317 | Program output: 145.5348464317
Correct output: -77.0615185935 | Program output: -76.0658187744
Correct output: -20.7643622555 | Program output: -20.7643622555
Correct output: 1.9827630815   | Program output: -31.0172369185
Correct output: -39.1198682611 | Program output: -7.124168442  
Correct output: 1.1392376036   | Program output: 11.1392376036 
Correct output: 129.1930977679 | Program output: 103.1930977679
Correct output: 26.7496211861  | Program output: 57.7496211861 
Correct output: -11.2984801384 | Program output: -11.2984801384
Correct output: -136.1442960385 | Program output: -138.1485962195
Correct output: 143.0911996605 | Program output: 142.0911996605
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_mod} {:instruction float_pop} {:instruction integer_max} {:instruction integer_flush} {:instruction in1} {:instruction in1} {:instruction float_stackdepth} {:instruction in2} {:instruction integer_add} {:instruction integer_add} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_add} {:instruction float_inc} {:instruction integer_mult} {:instruction float_inc} {:instruction integer_max} {:instruction float_inc} {:instruction integer_add} {:instruction float_inc} {:instruction integer_add} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_add} {:instruction float_inc} {:instruction integer_add} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_yankdup} {:instruction float_inc} {:instruction float_inc} {:instruction integer_add} {:instruction float_inc} {:instruction float_inc} {:instruction integer_add} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_dup_times} {:instruction float_inc} {:instruction integer_max} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_dup_times} {:instruction float_rot} {:instruction float_stackdepth} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_min} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_add} {:instruction float_inc} {:instruction float_inc} {:instruction integer_max} {:instruction float_inc} {:instruction float_dup} {:instruction float_inc} {:instruction 25} {:instruction float_stackdepth} {:instruction float_inc} {:instruction float_dup_times} {:instruction float_yank} {:instruction float_inc} {:instruction integer_add} {:instruction integer_yankdup} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_add} {:instruction integer_yankdup} {:instruction float_inc} {:instruction integer_max} {:instruction float_dup_times} {:instruction float_max} {:instruction float_dup_times} {:instruction float_stackdepth} {:instruction float_inc} {:instruction float_inc} {:instruction float_dup_times} {:instruction float_dup_items} {:instruction integer_pop} {:instruction integer_dup} {:instruction integer_flush} {:instruction integer_add} {:instruction float_yank} {:instruction float_dup_times} {:instruction integer_swap} {:instruction print_integer} {:instruction 78.00430018095415} {:instruction float_rot} {:instruction float_dup_times} {:instruction float_rot} {:instruction integer_shove} {:instruction integer_add} {:instruction float_dec} {:instruction integer_add} {:instruction float_sub} {:instruction float_rot} {:instruction integer_shove} {:instruction float_rot} {:instruction float_sub} {:instruction float_rot} {:instruction integer_sub} {:instruction float_inc} {:instruction integer_swap} {:instruction integer_min} {:instruction print_float} {:instruction integer_dec} {:instruction integer_stackdepth} {:instruction float_yank} {:instruction float_div} {:instruction float_mult} {:instruction integer_shove} {:instruction float_dup_times} {:instruction float_yankdup} {:instruction float_yank})
Best program: (float_mod float_pop integer_max integer_flush in1 in1 float_stackdepth in2 integer_add integer_add float_inc float_inc float_inc integer_add float_inc integer_mult float_inc integer_max float_inc integer_add float_inc integer_add float_inc float_inc float_inc float_inc integer_add float_inc integer_add float_inc float_inc float_inc float_inc integer_yankdup float_inc float_inc integer_add float_inc float_inc integer_add float_inc float_inc float_inc float_inc float_inc integer_dup_times float_inc integer_max float_inc float_inc float_inc float_inc float_dup_times float_rot float_stackdepth float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc integer_min float_inc float_inc float_inc float_inc float_inc integer_add float_inc float_inc integer_max float_inc float_dup float_inc 25 float_stackdepth float_inc float_dup_times float_yank float_inc integer_add integer_yankdup float_inc float_inc float_inc float_inc integer_add integer_yankdup float_inc integer_max float_dup_times float_max float_dup_times float_stackdepth float_inc float_inc float_dup_times float_dup_items integer_pop integer_dup integer_flush integer_add float_yank float_dup_times integer_swap print_integer 78.00430018095415 float_rot float_dup_times float_rot integer_shove integer_add float_dec integer_add float_sub float_rot integer_shove float_rot float_sub float_rot integer_sub float_inc integer_swap integer_min print_float integer_dec integer_stackdepth float_yank float_div float_mult integer_shove float_dup_times float_yankdup float_yank)
Errors: [23.9957 8 27.0 2 9.9957 7 40.0043 8 19.0 2 6.9957 9 27.0043 7 5.0 1 26.0043 8 14.0 2 0.0 0 9.0043 8 30.0 1 3.0 1 28.0 2 0.9957 7 0.0 0 33.0 9 31.9957 9 10.0 1 26.0 2 31.0 2 0.0 0 2.0043 6 1.0 1]
Total: 508.0
Mean: 10.16
Genome size: 136
Size: 137
Percent parens: 0.007
--- Population Statistics ---
Average total errors in population: 3121.0101795
Median total errors in population: 994.1813
Error averages by case: (141.47312539999984 9.875 113.06391870000003 4.01 120.67838979999982 7.165 144.0074278000004 7.948 111.19955190000006 3.929 145.94476219999981 8.538 120.05733690000025 6.62 94.0218320000001 3.698 119.62191080000025 7.489 113.25757650000016 4.158 103.56816940000013 2.733 134.2633043999999 8.302 111.97248570000001 3.844 102.2057365 3.225 132.17967259999986 4.048 122.53791039999953 8.684 97.89124380000005 4.537 125.77026710000004 10.06 142.46719109999995 10.704 97.26757769999995 3.664 125.58961300000013 4.258 108.36134940000005 3.861 101.09541390000004 3.43 138.6048780000002 6.992 108.61753449999989 3.52)
Error minima by case: (1.4347 7 0.2433 1 0.9957 1 3.0043 1 1.0 1 0.0043 2 0.9957 1 0.0 0 1.9957 1 0.0 0 0.0 0 0.0043 1 0.0 0 0.0 0 10.0 1 0.0043 1 0.0 0 0.0172 7 11.7871 8 0.1392 1 0.8069 1 0.2504 1 0.0 0 0.0043 1 0.0 0)
Average genome size in population (length): 135.541
Average program size in population (points): 136.541
Average percent parens in population: 0.007
Minimum age in population: 164.8853312991405
Maximum age in population: 169.0892914930521
Average age in population: 167.0407873686603
Median age in population: 167.0732578191573
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 13
Genome diversity (% unique Plush genomes):	 0.955
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 13
Syntactic diversity (% unique Push programs):	 0.955
Total error diversity:				 0.52
Error (vector) diversity:			 0.593
Behavioral diversity:				 0.593
--- Run Statistics ---
Number of program evaluations used so far: 121000
Number of point (instruction) evaluations so far: 281050151
--- Timings ---
Current time: 1529616434893 milliseconds
Total Time:         499.1 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       162.5 seconds, 32.6%
Fitness Testing:    267.3 seconds, 53.6%
Report:              69.2 seconds, 13.9%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 120
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 121
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 121
;;******************************
;; -*- Number IO problem report - generation 121
Test total error for best: 28133.38270000003
Test mean error for best: 14.06669
;;------------------------------
Outputs of best individual on training cases:
Correct output: -74.6179542037 | Program output: -50.6222543847
Correct output: 78.7609586813  | Program output: 51.7609586813 
Correct output: 3.0100598709   | Program output: 13.0057596899 
Correct output: -99.2368061293 | Program output: -139.2411063103
Correct output: 88.6808415603  | Program output: 69.6808415603 
Correct output: -151.1060419578 | Program output: -144.1103421388
Correct output: 56.004616184   | Program output: 29.000316003  
Correct output: 33.520660154   | Program output: 38.520660154  
Correct output: 42.238861085   | Program output: 16.2345609041 
Correct output: -49.0227893765 | Program output: -35.0227893765
Correct output: 103.4057483059 | Program output: 103.4057483059
Correct output: -106.1378273779 | Program output: -115.1421275589
Correct output: 37.9625599991  | Program output: 67.9625599991 
Correct output: 71.9208193203  | Program output: 74.9208193203 
Correct output: 173.5348464317 | Program output: 145.5348464317
Correct output: -77.0615185935 | Program output: -76.0658187744
Correct output: -20.7643622555 | Program output: -20.7643622555
Correct output: 1.9827630815   | Program output: -31.0172369185
Correct output: -39.1198682611 | Program output: -7.124168442  
Correct output: 1.1392376036   | Program output: 11.1392376036 
Correct output: 129.1930977679 | Program output: 103.1930977679
Correct output: 26.7496211861  | Program output: 57.7496211861 
Correct output: -11.2984801384 | Program output: -11.2984801384
Correct output: -136.1442960385 | Program output: -138.1485962195
Correct output: 143.0911996605 | Program output: 142.0911996605
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_sub} {:instruction integer_max} {:instruction integer_flush} {:instruction in1} {:instruction in1} {:instruction float_stackdepth} {:instruction in2} {:instruction integer_add} {:instruction float_inc} {:instruction integer_add} {:instruction float_inc} {:instruction float_inc} {:instruction integer_add} {:instruction float_inc} {:instruction integer_add} {:instruction float_inc} {:instruction integer_max} {:instruction float_inc} {:instruction integer_add} {:instruction float_inc} {:instruction integer_add} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_add} {:instruction float_inc} {:instruction integer_add} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_add} {:instruction float_inc} {:instruction float_inc} {:instruction integer_add} {:instruction float_inc} {:instruction float_inc} {:instruction integer_add} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_add} {:instruction float_inc} {:instruction float_inc} {:instruction integer_max} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_dup_times} {:instruction float_rot} {:instruction float_stackdepth} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_min} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_add} {:instruction float_inc} {:instruction float_inc} {:instruction integer_max} {:instruction float_inc} {:instruction float_dup} {:instruction float_inc} {:instruction 25} {:instruction float_stackdepth} {:instruction float_inc} {:instruction float_dup_times} {:instruction float_yank} {:instruction float_inc} {:instruction integer_add} {:instruction integer_yankdup} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_add} {:instruction integer_yankdup} {:instruction float_inc} {:instruction integer_max} {:instruction float_dup_times} {:instruction float_max} {:instruction float_dup_times} {:instruction float_stackdepth} {:instruction float_inc} {:instruction float_inc} {:instruction float_dup_times} {:instruction float_dup_items} {:instruction integer_add} {:instruction 25} {:instruction integer_flush} {:instruction integer_add} {:instruction float_yank} {:instruction float_dup_times} {:instruction integer_swap} {:instruction print_integer} {:instruction 78.00430018095415} {:instruction float_rot} {:instruction float_dup_times} {:instruction float_rot} {:instruction integer_shove} {:instruction integer_add} {:instruction float_dec} {:instruction float_inc} {:instruction float_sub} {:instruction float_rot} {:instruction integer_shove} {:instruction float_rot} {:instruction float_sub} {:instruction float_rot} {:instruction integer_sub} {:instruction float_inc} {:instruction integer_swap} {:instruction integer_min} {:instruction print_float} {:instruction integer_dec} {:instruction integer_stackdepth} {:instruction float_yank} {:instruction float_div} {:instruction float_stackdepth} {:instruction float_dup_times} {:instruction float_yankdup} {:instruction float_pop})
Best program: (float_sub integer_max integer_flush in1 in1 float_stackdepth in2 integer_add float_inc integer_add float_inc float_inc integer_add float_inc integer_add float_inc integer_max float_inc integer_add float_inc integer_add float_inc float_inc float_inc float_inc integer_add float_inc integer_add float_inc float_inc float_inc float_inc integer_add float_inc float_inc integer_add float_inc float_inc integer_add float_inc float_inc float_inc float_inc integer_add float_inc float_inc integer_max float_inc float_inc float_inc float_inc float_dup_times float_rot float_stackdepth float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc integer_min float_inc float_inc float_inc float_inc float_inc integer_add float_inc float_inc integer_max float_inc float_dup float_inc 25 float_stackdepth float_inc float_dup_times float_yank float_inc integer_add integer_yankdup float_inc float_inc float_inc float_inc integer_add integer_yankdup float_inc integer_max float_dup_times float_max float_dup_times float_stackdepth float_inc float_inc float_dup_times float_dup_items integer_add 25 integer_flush integer_add float_yank float_dup_times integer_swap print_integer 78.00430018095415 float_rot float_dup_times float_rot integer_shove integer_add float_dec float_inc float_sub float_rot integer_shove float_rot float_sub float_rot integer_sub float_inc integer_swap integer_min print_float integer_dec integer_stackdepth float_yank float_div float_stackdepth float_dup_times float_yankdup float_pop)
Errors: [23.9957 8 27.0 2 9.9957 7 40.0043 8 19.0 2 6.9957 9 27.0043 7 5.0 1 26.0043 8 14.0 2 0.0 0 9.0043 8 30.0 1 3.0 1 28.0 2 0.9957 7 0.0 0 33.0 9 31.9957 9 10.0 1 26.0 2 31.0 2 0.0 0 2.0043 6 1.0 1]
Total: 508.0
Mean: 10.16
Genome size: 134
Size: 135
Percent parens: 0.007
--- Population Statistics ---
Average total errors in population: 2884.122664600001
Median total errors in population: 843.08105
Error averages by case: (128.75369319999996 9.868 108.78820869999998 3.967 106.45058389999983 7.065 129.8234527000001 7.817 104.99560430000008 3.872 131.7602999999998 8.45 104.92736770000029 6.562 87.56889739999994 3.775 104.71652670000023 7.429 106.1451215000001 4.088 96.7112669000001 2.713 120.31259969999994 8.186 107.3463459 3.76 94.23252460000002 3.162 123.7905300999999 4.069 110.13384009999957 8.566 91.2314833 4.414 119.37813260000007 10.069 129.3767109000001 10.712 91.69001830000002 3.686 118.01801830000011 4.253 104.91078789999997 3.818 93.32838089999997 3.362 124.45381660000022 6.88 101.19445239999999 3.541)
Error minima by case: (0.6162 7 0.125 1 0.0043 1 6.0043 1 0.3192 1 0.0043 2 0.0043 1 0.0 0 0.9957 1 0.0 0 0.0 0 0.0043 1 0.0 0 0.0 0 4.4652 1 0.0043 1 0.0 0 0.0172 8 14.1156 8 0.1392 1 8.0 1 0.7496 1 0.0 0 0.0043 1 0.0 0)
Average genome size in population (length): 135.757
Average program size in population (points): 136.757
Average percent parens in population: 0.007
Minimum age in population: 165.8853312991405
Maximum age in population: 170.2946923157607
Average age in population: 168.2840180996619
Median age in population: 168.3021734400483
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 9
Genome diversity (% unique Plush genomes):	 0.946
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 9
Syntactic diversity (% unique Push programs):	 0.946
Total error diversity:				 0.527
Error (vector) diversity:			 0.586
Behavioral diversity:				 0.588
--- Run Statistics ---
Number of program evaluations used so far: 122000
Number of point (instruction) evaluations so far: 284444076
--- Timings ---
Current time: 1529616440126 milliseconds
Total Time:         504.3 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       163.9 seconds, 32.5%
Fitness Testing:    270.4 seconds, 53.6%
Report:              69.9 seconds, 13.9%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 121
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 122
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 122
;;******************************
;; -*- Number IO problem report - generation 122
Test total error for best: 28133.38270000003
Test mean error for best: 14.06669
;;------------------------------
Outputs of best individual on training cases:
Correct output: -74.6179542037 | Program output: -50.6222543847
Correct output: 78.7609586813  | Program output: 51.7609586813 
Correct output: 3.0100598709   | Program output: 13.0057596899 
Correct output: -99.2368061293 | Program output: -139.2411063103
Correct output: 88.6808415603  | Program output: 69.6808415603 
Correct output: -151.1060419578 | Program output: -144.1103421388
Correct output: 56.004616184   | Program output: 29.000316003  
Correct output: 33.520660154   | Program output: 38.520660154  
Correct output: 42.238861085   | Program output: 16.2345609041 
Correct output: -49.0227893765 | Program output: -35.0227893765
Correct output: 103.4057483059 | Program output: 103.4057483059
Correct output: -106.1378273779 | Program output: -115.1421275589
Correct output: 37.9625599991  | Program output: 67.9625599991 
Correct output: 71.9208193203  | Program output: 74.9208193203 
Correct output: 173.5348464317 | Program output: 145.5348464317
Correct output: -77.0615185935 | Program output: -76.0658187744
Correct output: -20.7643622555 | Program output: -20.7643622555
Correct output: 1.9827630815   | Program output: -31.0172369185
Correct output: -39.1198682611 | Program output: -7.124168442  
Correct output: 1.1392376036   | Program output: 11.1392376036 
Correct output: 129.1930977679 | Program output: 103.1930977679
Correct output: 26.7496211861  | Program output: 57.7496211861 
Correct output: -11.2984801384 | Program output: -11.2984801384
Correct output: -136.1442960385 | Program output: -138.1485962195
Correct output: 143.0911996605 | Program output: 142.0911996605
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_mod} {:instruction float_pop} {:instruction integer_max} {:instruction integer_flush} {:instruction in1} {:instruction in1} {:instruction float_stackdepth} {:instruction in2} {:instruction integer_add} {:instruction integer_add} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_add} {:instruction float_inc} {:instruction integer_add} {:instruction float_inc} {:instruction integer_max} {:instruction float_inc} {:instruction integer_add} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_add} {:instruction float_inc} {:instruction integer_add} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_add} {:instruction float_inc} {:instruction float_inc} {:instruction integer_add} {:instruction float_inc} {:instruction float_inc} {:instruction integer_add} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_max} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_dup_times} {:instruction float_rot} {:instruction float_stackdepth} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_min} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_add} {:instruction float_inc} {:instruction float_inc} {:instruction integer_max} {:instruction float_inc} {:instruction float_dup} {:instruction float_inc} {:instruction 25} {:instruction float_stackdepth} {:instruction float_inc} {:instruction float_dup_times} {:instruction float_yank} {:instruction float_inc} {:instruction integer_add} {:instruction integer_yankdup} {:instruction integer_add} {:instruction integer_yankdup} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_add} {:instruction integer_rot} {:instruction float_inc} {:instruction integer_max} {:instruction float_dup_times} {:instruction float_max} {:instruction integer_mod} {:instruction float_stackdepth} {:instruction float_inc} {:instruction float_inc} {:instruction float_dup_times} {:instruction float_dup_items} {:instruction float_add} {:instruction -58.61175285578006} {:instruction integer_flush} {:instruction integer_add} {:instruction float_yank} {:instruction float_dup_times} {:instruction integer_swap} {:instruction print_integer} {:instruction 78.00430018095415} {:instruction float_rot} {:instruction float_dup_times} {:instruction float_rot} {:instruction integer_shove} {:instruction integer_add} {:instruction float_dec} {:instruction integer_add} {:instruction float_sub} {:instruction float_rot} {:instruction integer_shove} {:instruction float_rot} {:instruction float_sub} {:instruction float_rot} {:instruction integer_sub} {:instruction float_inc} {:instruction integer_swap} {:instruction integer_min} {:instruction print_float} {:instruction integer_dec} {:instruction integer_stackdepth} {:instruction float_yank} {:instruction float_div} {:instruction integer_stackdepth} {:instruction float_yank} {:instruction float_div} {:instruction float_mult} {:instruction integer_shove} {:instruction float_dup_times})
Best program: (float_mod float_pop integer_max integer_flush in1 in1 float_stackdepth in2 integer_add integer_add float_inc float_inc float_inc integer_add float_inc integer_add float_inc integer_max float_inc integer_add float_inc float_inc float_inc integer_add float_inc integer_add float_inc float_inc float_inc float_inc float_inc integer_add float_inc float_inc integer_add float_inc float_inc integer_add float_inc float_inc float_inc float_inc float_inc float_inc float_inc integer_max float_inc float_inc float_inc float_inc float_dup_times float_rot float_stackdepth float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc integer_min float_inc float_inc float_inc float_inc float_inc integer_add float_inc float_inc integer_max float_inc float_dup float_inc 25 float_stackdepth float_inc float_dup_times float_yank float_inc integer_add integer_yankdup integer_add integer_yankdup float_inc float_inc float_inc float_inc integer_add integer_rot float_inc integer_max float_dup_times float_max integer_mod float_stackdepth float_inc float_inc float_dup_times float_dup_items float_add -58.61175285578006 integer_flush integer_add float_yank float_dup_times integer_swap print_integer 78.00430018095415 float_rot float_dup_times float_rot integer_shove integer_add float_dec integer_add float_sub float_rot integer_shove float_rot float_sub float_rot integer_sub float_inc integer_swap integer_min print_float integer_dec integer_stackdepth float_yank float_div integer_stackdepth float_yank float_div float_mult integer_shove float_dup_times)
Errors: [23.9957 8 27.0 2 9.9957 7 40.0043 8 19.0 2 6.9957 9 27.0043 7 5.0 1 26.0043 8 14.0 2 0.0 0 9.0043 8 30.0 1 3.0 1 28.0 2 0.9957 7 0.0 0 33.0 9 31.9957 9 10.0 1 26.0 2 31.0 2 0.0 0 2.0043 6 1.0 1]
Total: 508.0
Mean: 10.16
Genome size: 137
Size: 138
Percent parens: 0.007
--- Population Statistics ---
Average total errors in population: 2854.8941782
Median total errors in population: 715.4999999999999
Error averages by case: (126.84833059999993 9.697 110.00313090000002 3.789 105.47422549999978 7.045 129.08926420000017 7.874 105.29412420000006 3.636 129.25344169999977 8.524 105.16485400000032 6.621 88.26151850000004 3.572 104.99658810000018 7.436 103.28318790000017 3.895 93.61997660000011 2.464 118.82656639999998 8.189 106.06576370000003 3.566 92.25041330000002 2.943 123.18784829999989 3.814 108.41579689999958 8.534 89.25451480000004 4.234 117.91015660000006 9.992 129.78650199999996 10.574 91.74767580000002 3.474 117.22677090000008 3.997 105.46928290000004 3.613 91.47820720000007 3.134 122.09093170000023 6.829 99.19910549999997 3.25)
Error minima by case: (0.3835 7 0.2433 1 0.0043 1 2.0043 1 1.0 1 0.9957 1 0.0043 1 0.0 0 0.9957 1 0.8759 1 0.0 0 0.0043 1 0.0 0 0.0 0 10.0 1 0.0043 1 0.0 0 0.0172 7 7.148 8 0.1392 1 2.4967 1 0.0 0 0.0 0 0.0043 2 0.0 0)
Average genome size in population (length): 135.447
Average program size in population (points): 136.447
Average percent parens in population: 0.007
Minimum age in population: 167.3649089845544
Maximum age in population: 171.4861649352515
Average age in population: 169.5622439475818
Median age in population: 169.5818142232486
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 9
Genome diversity (% unique Plush genomes):	 0.951
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 9
Syntactic diversity (% unique Push programs):	 0.951
Total error diversity:				 0.506
Error (vector) diversity:			 0.568
Behavioral diversity:				 0.57
--- Run Statistics ---
Number of program evaluations used so far: 123000
Number of point (instruction) evaluations so far: 287830251
--- Timings ---
Current time: 1529616445296 milliseconds
Total Time:         509.5 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       165.3 seconds, 32.4%
Fitness Testing:    273.4 seconds, 53.7%
Report:              70.7 seconds, 13.9%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 122
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 123
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 123
;;******************************
;; -*- Number IO problem report - generation 123
Test total error for best: 28133.38270000003
Test mean error for best: 14.06669
;;------------------------------
Outputs of best individual on training cases:
Correct output: -74.6179542037 | Program output: -50.6222543847
Correct output: 78.7609586813  | Program output: 51.7609586813 
Correct output: 3.0100598709   | Program output: 13.0057596899 
Correct output: -99.2368061293 | Program output: -139.2411063103
Correct output: 88.6808415603  | Program output: 69.6808415603 
Correct output: -151.1060419578 | Program output: -144.1103421388
Correct output: 56.004616184   | Program output: 29.000316003  
Correct output: 33.520660154   | Program output: 38.520660154  
Correct output: 42.238861085   | Program output: 16.2345609041 
Correct output: -49.0227893765 | Program output: -35.0227893765
Correct output: 103.4057483059 | Program output: 103.4057483059
Correct output: -106.1378273779 | Program output: -115.1421275589
Correct output: 37.9625599991  | Program output: 67.9625599991 
Correct output: 71.9208193203  | Program output: 74.9208193203 
Correct output: 173.5348464317 | Program output: 145.5348464317
Correct output: -77.0615185935 | Program output: -76.0658187744
Correct output: -20.7643622555 | Program output: -20.7643622555
Correct output: 1.9827630815   | Program output: -31.0172369185
Correct output: -39.1198682611 | Program output: -7.124168442  
Correct output: 1.1392376036   | Program output: 11.1392376036 
Correct output: 129.1930977679 | Program output: 103.1930977679
Correct output: 26.7496211861  | Program output: 57.7496211861 
Correct output: -11.2984801384 | Program output: -11.2984801384
Correct output: -136.1442960385 | Program output: -138.1485962195
Correct output: 143.0911996605 | Program output: 142.0911996605
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_mod} {:instruction float_pop} {:instruction integer_max} {:instruction in1} {:instruction in1} {:instruction float_stackdepth} {:instruction in2} {:instruction integer_add} {:instruction integer_add} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_add} {:instruction float_inc} {:instruction integer_add} {:instruction float_inc} {:instruction integer_max} {:instruction float_inc} {:instruction integer_add} {:instruction integer_min} {:instruction integer_add} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_yankdup} {:instruction float_inc} {:instruction float_inc} {:instruction integer_add} {:instruction float_inc} {:instruction float_inc} {:instruction integer_swap} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_add} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_max} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_dup_times} {:instruction float_rot} {:instruction float_stackdepth} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_min} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_add} {:instruction float_inc} {:instruction float_inc} {:instruction integer_max} {:instruction float_inc} {:instruction float_dup} {:instruction float_inc} {:instruction 25} {:instruction float_stackdepth} {:instruction float_inc} {:instruction float_dup_times} {:instruction float_yank} {:instruction float_inc} {:instruction integer_add} {:instruction integer_yankdup} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_add} {:instruction integer_yankdup} {:instruction float_inc} {:instruction integer_max} {:instruction float_dup_times} {:instruction float_max} {:instruction float_dup_times} {:instruction float_stackdepth} {:instruction float_inc} {:instruction float_inc} {:instruction float_dup_times} {:instruction float_dup_items} {:instruction integer_pop} {:instruction 25} {:instruction integer_flush} {:instruction integer_add} {:instruction float_yank} {:instruction float_dup_times} {:instruction integer_swap} {:instruction print_integer} {:instruction 78.00430018095415} {:instruction float_rot} {:instruction float_dup_times} {:instruction float_rot} {:instruction integer_shove} {:instruction integer_add} {:instruction float_dec} {:instruction integer_add} {:instruction float_sub} {:instruction float_rot} {:instruction integer_shove} {:instruction float_rot} {:instruction float_sub} {:instruction float_rot} {:instruction integer_sub} {:instruction float_inc} {:instruction integer_swap} {:instruction float_frominteger} {:instruction print_float} {:instruction integer_dec} {:instruction integer_stackdepth} {:instruction float_yank} {:instruction float_div} {:instruction float_mult} {:instruction float_div} {:instruction float_mult} {:instruction integer_shove} {:instruction float_dup_times} {:instruction float_yankdup} {:instruction float_pop})
Best program: (float_mod float_pop integer_max in1 in1 float_stackdepth in2 integer_add integer_add float_inc float_inc float_inc integer_add float_inc integer_add float_inc integer_max float_inc integer_add integer_min integer_add float_inc float_inc float_inc float_inc float_inc float_inc integer_yankdup float_inc float_inc integer_add float_inc float_inc integer_swap float_inc float_inc float_inc integer_add float_inc float_inc float_inc float_inc float_inc float_inc float_inc integer_max float_inc float_inc float_inc float_inc float_dup_times float_rot float_stackdepth float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc integer_min float_inc float_inc float_inc float_inc float_inc integer_add float_inc float_inc integer_max float_inc float_dup float_inc 25 float_stackdepth float_inc float_dup_times float_yank float_inc integer_add integer_yankdup float_inc float_inc float_inc float_inc integer_add integer_yankdup float_inc integer_max float_dup_times float_max float_dup_times float_stackdepth float_inc float_inc float_dup_times float_dup_items integer_pop 25 integer_flush integer_add float_yank float_dup_times integer_swap print_integer 78.00430018095415 float_rot float_dup_times float_rot integer_shove integer_add float_dec integer_add float_sub float_rot integer_shove float_rot float_sub float_rot integer_sub float_inc integer_swap float_frominteger print_float integer_dec integer_stackdepth float_yank float_div float_mult float_div float_mult integer_shove float_dup_times float_yankdup float_pop)
Errors: [23.9957 8 27.0 2 9.9957 7 40.0043 8 19.0 2 6.9957 9 27.0043 7 5.0 1 26.0043 8 14.0 2 0.0 0 9.0043 8 30.0 1 3.0 1 28.0 2 0.9957 7 0.0 0 33.0 9 31.9957 9 10.0 1 26.0 2 31.0 2 0.0 0 2.0043 6 1.0 1]
Total: 508.0
Mean: 10.16
Genome size: 136
Size: 137
Percent parens: 0.007
--- Population Statistics ---
Average total errors in population: 2890.8582018000006
Median total errors in population: 741.98495
Error averages by case: (129.0114719 9.808 107.81077690000001 3.798 108.05039499999981 6.992 131.50356350000013 7.776 104.44442250000003 3.622 132.44743299999982 8.402 106.86754370000027 6.509 86.3952335 3.453 106.76372300000017 7.362 105.91874970000006 3.808 97.76513600000008 2.468 121.9095924 8.156 105.4697519 3.573 96.07304710000007 2.987 125.22007509999983 3.78 107.8121567999996 8.444 90.00136710000004 4.44 120.8816521000001 10.038 132.32534130000005 10.698 91.26505720000004 3.732 119.28757730000015 3.999 102.57088209999996 3.627 93.52249359999999 3.065 125.43760410000026 6.786 101.508155 3.272)
Error minima by case: (0.6137 7 0.2433 1 0.6156 1 2.0043 1 0.4933 1 0.0043 2 0.0043 1 0.0 0 0.0043 1 0.0 0 0.0 0 0.0043 1 0.0 0 0.0 0 15.0 1 0.0043 1 0.0 0 0.0172 7 7.2379 8 0.1392 1 2.1931 1 0.0 0 0.0 0 0.0043 1 0.0 0)
Average genome size in population (length): 135.656
Average program size in population (points): 136.656
Average percent parens in population: 0.007
Minimum age in population: 168.5430806131193
Maximum age in population: 172.8774701911782
Average age in population: 170.8432761995274
Median age in population: 170.8621271058023
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 5
Genome diversity (% unique Plush genomes):	 0.938
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 5
Syntactic diversity (% unique Push programs):	 0.938
Total error diversity:				 0.528
Error (vector) diversity:			 0.583
Behavioral diversity:				 0.584
--- Run Statistics ---
Number of program evaluations used so far: 124000
Number of point (instruction) evaluations so far: 291221676
--- Timings ---
Current time: 1529616450447 milliseconds
Total Time:         514.7 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       166.6 seconds, 32.4%
Fitness Testing:    276.5 seconds, 53.7%
Report:              71.4 seconds, 13.9%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 123
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 124
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 124
;;******************************
;; -*- Number IO problem report - generation 124
Test total error for best: 28133.38270000003
Test mean error for best: 14.06669
;;------------------------------
Outputs of best individual on training cases:
Correct output: -74.6179542037 | Program output: -50.6222543847
Correct output: 78.7609586813  | Program output: 51.7609586813 
Correct output: 3.0100598709   | Program output: 13.0057596899 
Correct output: -99.2368061293 | Program output: -139.2411063103
Correct output: 88.6808415603  | Program output: 69.6808415603 
Correct output: -151.1060419578 | Program output: -144.1103421388
Correct output: 56.004616184   | Program output: 29.000316003  
Correct output: 33.520660154   | Program output: 38.520660154  
Correct output: 42.238861085   | Program output: 16.2345609041 
Correct output: -49.0227893765 | Program output: -35.0227893765
Correct output: 103.4057483059 | Program output: 103.4057483059
Correct output: -106.1378273779 | Program output: -115.1421275589
Correct output: 37.9625599991  | Program output: 67.9625599991 
Correct output: 71.9208193203  | Program output: 74.9208193203 
Correct output: 173.5348464317 | Program output: 145.5348464317
Correct output: -77.0615185935 | Program output: -76.0658187744
Correct output: -20.7643622555 | Program output: -20.7643622555
Correct output: 1.9827630815   | Program output: -31.0172369185
Correct output: -39.1198682611 | Program output: -7.124168442  
Correct output: 1.1392376036   | Program output: 11.1392376036 
Correct output: 129.1930977679 | Program output: 103.1930977679
Correct output: 26.7496211861  | Program output: 57.7496211861 
Correct output: -11.2984801384 | Program output: -11.2984801384
Correct output: -136.1442960385 | Program output: -138.1485962195
Correct output: 143.0911996605 | Program output: 142.0911996605
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_sub} {:instruction integer_max} {:instruction integer_flush} {:instruction in1} {:instruction in1} {:instruction float_stackdepth} {:instruction in2} {:instruction integer_add} {:instruction integer_add} {:instruction integer_add} {:instruction float_inc} {:instruction integer_div} {:instruction float_inc} {:instruction integer_add} {:instruction float_inc} {:instruction integer_max} {:instruction float_inc} {:instruction integer_max} {:instruction float_inc} {:instruction integer_add} {:instruction float_inc} {:instruction integer_add} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_add} {:instruction float_inc} {:instruction integer_add} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_add} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_add} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_max} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_dup_times} {:instruction float_rot} {:instruction float_stackdepth} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_min} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_add} {:instruction float_inc} {:instruction float_inc} {:instruction integer_max} {:instruction float_inc} {:instruction float_dup} {:instruction float_inc} {:instruction 25} {:instruction float_stackdepth} {:instruction float_inc} {:instruction float_dup_times} {:instruction float_yank} {:instruction float_inc} {:instruction integer_add} {:instruction integer_yankdup} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_max} {:instruction float_dup_times} {:instruction float_max} {:instruction float_dup_times} {:instruction float_stackdepth} {:instruction float_inc} {:instruction float_inc} {:instruction float_dup_times} {:instruction float_frominteger} {:instruction integer_add} {:instruction 25} {:instruction integer_flush} {:instruction integer_add} {:instruction float_yank} {:instruction float_dup_times} {:instruction integer_swap} {:instruction print_integer} {:instruction 78.00430018095415} {:instruction float_rot} {:instruction float_dup_times} {:instruction float_rot} {:instruction integer_shove} {:instruction integer_add} {:instruction float_dec} {:instruction float_inc} {:instruction float_sub} {:instruction float_rot} {:instruction integer_shove} {:instruction float_rot} {:instruction float_sub} {:instruction float_rot} {:instruction integer_sub} {:instruction float_inc} {:instruction integer_swap} {:instruction integer_min} {:instruction print_float} {:instruction integer_dec} {:instruction float_dup_items} {:instruction float_mult} {:instruction integer_shove} {:instruction float_dup_times} {:instruction float_div} {:instruction float_pop})
Best program: (float_sub integer_max integer_flush in1 in1 float_stackdepth in2 integer_add integer_add integer_add float_inc integer_div float_inc integer_add float_inc integer_max float_inc integer_max float_inc integer_add float_inc integer_add float_inc float_inc float_inc float_inc integer_add float_inc integer_add float_inc float_inc float_inc float_inc integer_add float_inc float_inc float_inc integer_add float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc integer_max float_inc float_inc float_inc float_inc float_dup_times float_rot float_stackdepth float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc integer_min float_inc float_inc float_inc float_inc float_inc integer_add float_inc float_inc integer_max float_inc float_dup float_inc 25 float_stackdepth float_inc float_dup_times float_yank float_inc integer_add integer_yankdup float_inc float_inc float_inc float_inc float_inc integer_max float_dup_times float_max float_dup_times float_stackdepth float_inc float_inc float_dup_times float_frominteger integer_add 25 integer_flush integer_add float_yank float_dup_times integer_swap print_integer 78.00430018095415 float_rot float_dup_times float_rot integer_shove integer_add float_dec float_inc float_sub float_rot integer_shove float_rot float_sub float_rot integer_sub float_inc integer_swap integer_min print_float integer_dec float_dup_items float_mult integer_shove float_dup_times float_div float_pop)
Errors: [23.9957 8 27.0 2 9.9957 7 40.0043 8 19.0 2 6.9957 9 27.0043 7 5.0 1 26.0043 8 14.0 2 0.0 0 9.0043 8 30.0 1 3.0 1 28.0 2 0.9957 7 0.0 0 33.0 9 31.9957 9 10.0 1 26.0 2 31.0 2 0.0 0 2.0043 6 1.0 1]
Total: 508.0
Mean: 10.16
Genome size: 131
Size: 132
Percent parens: 0.008
--- Population Statistics ---
Average total errors in population: 2809.3752946999994
Median total errors in population: 720.0086
Error averages by case: (129.21660039999995 9.778 104.53554939999995 3.697 104.49497199999979 6.968 132.2242246000001 7.82 100.93877580000007 3.621 133.09684779999984 8.485 103.02211620000024 6.5 82.98651080000005 3.354 102.95106330000026 7.376 99.76008670000009 3.835 91.51537890000009 2.387 122.46376269999996 8.204 102.15302999999999 3.516 90.26131720000001 2.954 120.34182399999989 3.74 108.36235889999962 8.705 86.54275820000001 4.402 113.78049120000009 10.012 130.4761673000001 10.637 85.3412337 3.526 114.01224390000007 3.965 100.69724980000001 3.574 87.73041660000004 3.037 126.03720820000022 6.858 96.24910709999999 3.233)
Error minima by case: (2.652 7 0.0305 1 0.0043 1 10.0043 1 0.0 0 0.0043 2 0.9954 2 0.0 0 0.0043 1 0.0 0 0.0 0 0.0043 1 1.0 1 0.0 0 9.0 1 0.0043 1 0.0 0 0.0172 7 10.5932 8 0.1392 1 7.0 1 0.0 0 0.0 0 0.0043 1 0.0 0)
Average genome size in population (length): 136.108
Average program size in population (points): 137.108
Average percent parens in population: 0.007
Minimum age in population: 169.6516172114875
Maximum age in population: 174.2883205422137
Average age in population: 172.1296101275128
Median age in population: 172.1519614561137
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 7
Genome diversity (% unique Plush genomes):	 0.949
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 7
Syntactic diversity (% unique Push programs):	 0.949
Total error diversity:				 0.524
Error (vector) diversity:			 0.583
Behavioral diversity:				 0.584
--- Run Statistics ---
Number of program evaluations used so far: 125000
Number of point (instruction) evaluations so far: 294624401
--- Timings ---
Current time: 1529616455517 milliseconds
Total Time:         519.8 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       167.9 seconds, 32.3%
Fitness Testing:    279.5 seconds, 53.8%
Report:              72.2 seconds, 13.9%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 124
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 125
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 125
;;******************************
;; -*- Number IO problem report - generation 125
Test total error for best: 28133.38270000003
Test mean error for best: 14.06669
;;------------------------------
Outputs of best individual on training cases:
Correct output: -74.6179542037 | Program output: -50.6222543847
Correct output: 78.7609586813  | Program output: 51.7609586813 
Correct output: 3.0100598709   | Program output: 13.0057596899 
Correct output: -99.2368061293 | Program output: -139.2411063103
Correct output: 88.6808415603  | Program output: 69.6808415603 
Correct output: -151.1060419578 | Program output: -144.1103421388
Correct output: 56.004616184   | Program output: 29.000316003  
Correct output: 33.520660154   | Program output: 38.520660154  
Correct output: 42.238861085   | Program output: 16.2345609041 
Correct output: -49.0227893765 | Program output: -35.0227893765
Correct output: 103.4057483059 | Program output: 103.4057483059
Correct output: -106.1378273779 | Program output: -115.1421275589
Correct output: 37.9625599991  | Program output: 67.9625599991 
Correct output: 71.9208193203  | Program output: 74.9208193203 
Correct output: 173.5348464317 | Program output: 145.5348464317
Correct output: -77.0615185935 | Program output: -76.0658187744
Correct output: -20.7643622555 | Program output: -20.7643622555
Correct output: 1.9827630815   | Program output: -31.0172369185
Correct output: -39.1198682611 | Program output: -7.124168442  
Correct output: 1.1392376036   | Program output: 11.1392376036 
Correct output: 129.1930977679 | Program output: 103.1930977679
Correct output: 26.7496211861  | Program output: 57.7496211861 
Correct output: -11.2984801384 | Program output: -11.2984801384
Correct output: -136.1442960385 | Program output: -138.1485962195
Correct output: 143.0911996605 | Program output: 142.0911996605
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_mod} {:instruction float_pop} {:instruction integer_max} {:instruction integer_flush} {:instruction in1} {:instruction in1} {:instruction float_stackdepth} {:instruction in2} {:instruction integer_add} {:instruction integer_add} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_add} {:instruction float_inc} {:instruction integer_add} {:instruction float_inc} {:instruction integer_max} {:instruction float_inc} {:instruction integer_add} {:instruction float_inc} {:instruction integer_add} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_add} {:instruction float_inc} {:instruction integer_add} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_add} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_add} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_max} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_dup_times} {:instruction float_rot} {:instruction float_stackdepth} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_min} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_add} {:instruction float_inc} {:instruction float_inc} {:instruction integer_max} {:instruction float_inc} {:instruction float_dup} {:instruction float_inc} {:instruction 25} {:instruction float_stackdepth} {:instruction float_inc} {:instruction float_dup_times} {:instruction float_yank} {:instruction float_inc} {:instruction integer_add} {:instruction integer_yankdup} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_add} {:instruction integer_yankdup} {:instruction float_inc} {:instruction integer_max} {:instruction float_dup_times} {:instruction float_max} {:instruction float_dup_times} {:instruction float_stackdepth} {:instruction float_inc} {:instruction float_inc} {:instruction float_dup_times} {:instruction float_dup_items} {:instruction integer_pop} {:instruction 25} {:instruction integer_flush} {:instruction integer_add} {:instruction float_yank} {:instruction float_dup_times} {:instruction integer_swap} {:instruction print_integer} {:instruction 78.00430018095415} {:instruction float_rot} {:instruction float_dup_times} {:instruction float_rot} {:instruction integer_shove} {:instruction integer_add} {:instruction float_dec} {:instruction integer_add} {:instruction float_sub} {:instruction float_rot} {:instruction integer_shove} {:instruction float_rot} {:instruction float_sub} {:instruction float_rot} {:instruction integer_sub} {:instruction float_inc} {:instruction integer_swap} {:instruction integer_min} {:instruction print_float} {:instruction integer_dec} {:instruction integer_stackdepth} {:instruction float_yank} {:instruction float_div} {:instruction float_mult} {:instruction integer_shove} {:instruction float_dup_times} {:instruction float_yankdup} {:instruction float_pop})
Best program: (float_mod float_pop integer_max integer_flush in1 in1 float_stackdepth in2 integer_add integer_add float_inc float_inc float_inc integer_add float_inc integer_add float_inc integer_max float_inc integer_add float_inc integer_add float_inc float_inc float_inc float_inc integer_add float_inc integer_add float_inc float_inc float_inc float_inc integer_add float_inc float_inc float_inc integer_add float_inc float_inc float_inc float_inc float_inc float_inc float_inc integer_max float_inc float_inc float_inc float_inc float_dup_times float_rot float_stackdepth float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc integer_min float_inc float_inc float_inc float_inc float_inc integer_add float_inc float_inc integer_max float_inc float_dup float_inc 25 float_stackdepth float_inc float_dup_times float_yank float_inc integer_add integer_yankdup float_inc float_inc float_inc float_inc integer_add integer_yankdup float_inc integer_max float_dup_times float_max float_dup_times float_stackdepth float_inc float_inc float_dup_times float_dup_items integer_pop 25 integer_flush integer_add float_yank float_dup_times integer_swap print_integer 78.00430018095415 float_rot float_dup_times float_rot integer_shove integer_add float_dec integer_add float_sub float_rot integer_shove float_rot float_sub float_rot integer_sub float_inc integer_swap integer_min print_float integer_dec integer_stackdepth float_yank float_div float_mult integer_shove float_dup_times float_yankdup float_pop)
Errors: [23.9957 8 27.0 2 9.9957 7 40.0043 8 19.0 2 6.9957 9 27.0043 7 5.0 1 26.0043 8 14.0 2 0.0 0 9.0043 8 30.0 1 3.0 1 28.0 2 0.9957 7 0.0 0 33.0 9 31.9957 9 10.0 1 26.0 2 31.0 2 0.0 0 2.0043 6 1.0 1]
Total: 508.0
Mean: 10.16
Genome size: 134
Size: 135
Percent parens: 0.007
--- Population Statistics ---
Average total errors in population: 2844.424303999999
Median total errors in population: 758.0
Error averages by case: (124.59779149999997 9.82 104.9826892 3.756 106.07843979999983 6.9 127.76414530000012 7.707 102.59083590000006 3.692 129.9752015999998 8.33 106.60825430000028 6.412 86.07962880000005 3.515 105.45454740000022 7.313 105.44616940000014 3.91 98.0277998000001 2.436 117.46434089999997 8.06 103.87499290000001 3.561 93.71506360000001 2.919 126.16827039999981 3.81 107.68235889999967 8.494 88.94641530000004 4.239 119.46104480000005 10.006 127.4551312 10.673 83.46338719999997 3.509 118.89200800000012 4.017 99.50771140000003 3.641 95.0572261 3.127 122.60219320000024 6.753 102.6486571 3.28)
Error minima by case: (0.3109 7 0.2433 1 0.0043 1 10.0043 1 0.3192 1 0.0043 1 0.9957 1 0.0 0 1.0043 1 1.0 1 0.0 0 0.0043 1 0.0 0 0.0 0 11.0 1 0.0043 2 0.0 0 0.0172 7 15.3677 7 0.1392 1 9.0 1 0.1675 1 0.0 0 0.0043 2 0.0 0)
Average genome size in population (length): 136.53
Average program size in population (points): 137.53
Average percent parens in population: 0.007
Minimum age in population: 170.6516172114875
Maximum age in population: 175.513888759196
Average age in population: 173.4115533644727
Median age in population: 173.4442023148043
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 6
Genome diversity (% unique Plush genomes):	 0.955
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 6
Syntactic diversity (% unique Push programs):	 0.955
Total error diversity:				 0.515
Error (vector) diversity:			 0.579
Behavioral diversity:				 0.579
--- Run Statistics ---
Number of program evaluations used so far: 126000
Number of point (instruction) evaluations so far: 298037676
--- Timings ---
Current time: 1529616460712 milliseconds
Total Time:         524.9 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       169.3 seconds, 32.3%
Fitness Testing:    282.6 seconds, 53.8%
Report:              72.9 seconds, 13.9%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 125
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 126
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 126
;;******************************
;; -*- Number IO problem report - generation 126
Test total error for best: 28133.38270000003
Test mean error for best: 14.06669
;;------------------------------
Outputs of best individual on training cases:
Correct output: -74.6179542037 | Program output: -50.6222543847
Correct output: 78.7609586813  | Program output: 51.7609586813 
Correct output: 3.0100598709   | Program output: 13.0057596899 
Correct output: -99.2368061293 | Program output: -139.2411063103
Correct output: 88.6808415603  | Program output: 69.6808415603 
Correct output: -151.1060419578 | Program output: -144.1103421388
Correct output: 56.004616184   | Program output: 29.000316003  
Correct output: 33.520660154   | Program output: 38.520660154  
Correct output: 42.238861085   | Program output: 16.2345609041 
Correct output: -49.0227893765 | Program output: -35.0227893765
Correct output: 103.4057483059 | Program output: 103.4057483059
Correct output: -106.1378273779 | Program output: -115.1421275589
Correct output: 37.9625599991  | Program output: 67.9625599991 
Correct output: 71.9208193203  | Program output: 74.9208193203 
Correct output: 173.5348464317 | Program output: 145.5348464317
Correct output: -77.0615185935 | Program output: -76.0658187744
Correct output: -20.7643622555 | Program output: -20.7643622555
Correct output: 1.9827630815   | Program output: -31.0172369185
Correct output: -39.1198682611 | Program output: -7.124168442  
Correct output: 1.1392376036   | Program output: 11.1392376036 
Correct output: 129.1930977679 | Program output: 103.1930977679
Correct output: 26.7496211861  | Program output: 57.7496211861 
Correct output: -11.2984801384 | Program output: -11.2984801384
Correct output: -136.1442960385 | Program output: -138.1485962195
Correct output: 143.0911996605 | Program output: 142.0911996605
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_sub} {:instruction integer_max} {:instruction float_sin} {:instruction in1} {:instruction in1} {:instruction float_stackdepth} {:instruction in2} {:instruction integer_add} {:instruction float_inc} {:instruction integer_add} {:instruction float_inc} {:instruction integer_add} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_min} {:instruction float_inc} {:instruction integer_add} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_add} {:instruction float_inc} {:instruction integer_add} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_add} {:instruction float_inc} {:instruction float_inc} {:instruction integer_add} {:instruction integer_add} {:instruction float_inc} {:instruction float_inc} {:instruction integer_add} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_max} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_dup_times} {:instruction float_rot} {:instruction float_stackdepth} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_min} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_add} {:instruction float_inc} {:instruction float_inc} {:instruction integer_max} {:instruction float_inc} {:instruction float_dup} {:instruction float_inc} {:instruction 25} {:instruction float_stackdepth} {:instruction float_inc} {:instruction float_dup_times} {:instruction float_yank} {:instruction float_inc} {:instruction integer_add} {:instruction integer_yankdup} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_add} {:instruction integer_yankdup} {:instruction integer_max} {:instruction float_inc} {:instruction integer_max} {:instruction float_dup_times} {:instruction float_max} {:instruction float_dup_times} {:instruction float_stackdepth} {:instruction float_inc} {:instruction float_inc} {:instruction float_dup_times} {:instruction float_dup_items} {:instruction integer_pop} {:instruction 25} {:instruction integer_flush} {:instruction integer_add} {:instruction float_yank} {:instruction float_dup_times} {:instruction integer_flush} {:instruction integer_add} {:instruction float_yank} {:instruction float_dup_times} {:instruction integer_swap} {:instruction print_integer} {:instruction 78.00430018095415} {:instruction float_rot} {:instruction float_dup_times} {:instruction float_rot} {:instruction integer_shove} {:instruction integer_add} {:instruction float_dec} {:instruction float_inc} {:instruction float_sub} {:instruction float_rot} {:instruction integer_shove} {:instruction float_rot} {:instruction float_sub} {:instruction float_rot} {:instruction integer_sub} {:instruction float_inc} {:instruction integer_swap} {:instruction integer_min} {:instruction print_float} {:instruction integer_dec} {:instruction integer_stackdepth} {:instruction float_yank} {:instruction float_div} {:instruction float_mult} {:instruction integer_shove} {:instruction float_dup_times} {:instruction float_yankdup} {:instruction float_pop})
Best program: (float_sub integer_max float_sin in1 in1 float_stackdepth in2 integer_add float_inc integer_add float_inc integer_add float_inc float_inc float_inc integer_min float_inc integer_add float_inc float_inc float_inc float_inc float_inc integer_add float_inc integer_add float_inc float_inc float_inc integer_add float_inc float_inc integer_add integer_add float_inc float_inc integer_add float_inc float_inc float_inc float_inc float_inc float_inc float_inc integer_max float_inc float_inc float_inc float_inc float_dup_times float_rot float_stackdepth float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc integer_min float_inc float_inc float_inc float_inc float_inc integer_add float_inc float_inc integer_max float_inc float_dup float_inc 25 float_stackdepth float_inc float_dup_times float_yank float_inc integer_add integer_yankdup float_inc float_inc float_inc float_inc integer_add integer_yankdup integer_max float_inc integer_max float_dup_times float_max float_dup_times float_stackdepth float_inc float_inc float_dup_times float_dup_items integer_pop 25 integer_flush integer_add float_yank float_dup_times integer_flush integer_add float_yank float_dup_times integer_swap print_integer 78.00430018095415 float_rot float_dup_times float_rot integer_shove integer_add float_dec float_inc float_sub float_rot integer_shove float_rot float_sub float_rot integer_sub float_inc integer_swap integer_min print_float integer_dec integer_stackdepth float_yank float_div float_mult integer_shove float_dup_times float_yankdup float_pop)
Errors: [23.9957 8 27.0 2 9.9957 7 40.0043 8 19.0 2 6.9957 9 27.0043 7 5.0 1 26.0043 8 14.0 2 0.0 0 9.0043 8 30.0 1 3.0 1 28.0 2 0.9957 7 0.0 0 33.0 9 31.9957 9 10.0 1 26.0 2 31.0 2 0.0 0 2.0043 6 1.0 1]
Total: 508.0
Mean: 10.16
Genome size: 138
Size: 139
Percent parens: 0.007
--- Population Statistics ---
Average total errors in population: 3115.4173275000003
Median total errors in population: 717.00215
Error averages by case: (138.56491899999986 9.795 119.7783571 3.889 115.76064069999977 7.128 139.79827440000022 7.947 116.39429070000007 3.77 139.5228941999998 8.551 115.64711960000027 6.624 100.36157270000002 3.662 115.20874930000029 7.503 112.71882060000009 4.005 104.08581970000006 2.431 129.14817870000002 8.268 117.47614590000002 3.661 100.97867639999997 2.912 132.7225855999998 3.916 121.38897509999958 8.456 99.8751466 4.234 127.16752450000006 10.047 139.35770199999988 10.64 102.87414149999996 3.699 126.59629090000016 4.096 113.90237820000004 3.732 101.78392820000003 3.231 132.4748931000002 6.901 109.36630279999991 3.365)
Error minima by case: (1.6137 7 0.2433 1 0.0043 1 7.7034 1 1.6788 1 0.0043 1 0.0043 1 0.0 0 0.0043 1 0.0 0 0.0 0 0.0043 1 0.5977 1 0.0 0 14.0 1 0.0043 1 0.0 0 0.7045 6 7.4045 8 0.1392 1 0.8069 1 0.2504 1 0.0 0 0.0043 2 0.0 0)
Average genome size in population (length): 137.277
Average program size in population (points): 138.277
Average percent parens in population: 0.007
Minimum age in population: 172.6833769065037
Maximum age in population: 177.0219441925972
Average age in population: 174.7109060584118
Median age in population: 174.7425094277919
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 6
Genome diversity (% unique Plush genomes):	 0.942
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 6
Syntactic diversity (% unique Push programs):	 0.942
Total error diversity:				 0.517
Error (vector) diversity:			 0.585
Behavioral diversity:				 0.586
--- Run Statistics ---
Number of program evaluations used so far: 127000
Number of point (instruction) evaluations so far: 301469601
--- Timings ---
Current time: 1529616465879 milliseconds
Total Time:         530.1 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       170.7 seconds, 32.2%
Fitness Testing:    285.6 seconds, 53.9%
Report:              73.6 seconds, 13.9%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 126
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 127
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 127
;;******************************
;; -*- Number IO problem report - generation 127
Test total error for best: 28133.38270000003
Test mean error for best: 14.06669
;;------------------------------
Outputs of best individual on training cases:
Correct output: -74.6179542037 | Program output: -50.6222543847
Correct output: 78.7609586813  | Program output: 51.7609586813 
Correct output: 3.0100598709   | Program output: 13.0057596899 
Correct output: -99.2368061293 | Program output: -139.2411063103
Correct output: 88.6808415603  | Program output: 69.6808415603 
Correct output: -151.1060419578 | Program output: -144.1103421388
Correct output: 56.004616184   | Program output: 29.000316003  
Correct output: 33.520660154   | Program output: 38.520660154  
Correct output: 42.238861085   | Program output: 16.2345609041 
Correct output: -49.0227893765 | Program output: -35.0227893765
Correct output: 103.4057483059 | Program output: 103.4057483059
Correct output: -106.1378273779 | Program output: -115.1421275589
Correct output: 37.9625599991  | Program output: 67.9625599991 
Correct output: 71.9208193203  | Program output: 74.9208193203 
Correct output: 173.5348464317 | Program output: 145.5348464317
Correct output: -77.0615185935 | Program output: -76.0658187744
Correct output: -20.7643622555 | Program output: -20.7643622555
Correct output: 1.9827630815   | Program output: -31.0172369185
Correct output: -39.1198682611 | Program output: -7.124168442  
Correct output: 1.1392376036   | Program output: 11.1392376036 
Correct output: 129.1930977679 | Program output: 103.1930977679
Correct output: 26.7496211861  | Program output: 57.7496211861 
Correct output: -11.2984801384 | Program output: -11.2984801384
Correct output: -136.1442960385 | Program output: -138.1485962195
Correct output: 143.0911996605 | Program output: 142.0911996605
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_sub} {:instruction integer_max} {:instruction in2} {:instruction float_pop} {:instruction integer_mod} {:instruction float_flush} {:instruction float_pop} {:instruction integer_max} {:instruction integer_flush} {:instruction in1} {:instruction in1} {:instruction float_stackdepth} {:instruction in2} {:instruction integer_add} {:instruction integer_add} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_add} {:instruction float_inc} {:instruction integer_add} {:instruction float_inc} {:instruction integer_max} {:instruction float_inc} {:instruction integer_add} {:instruction float_inc} {:instruction integer_add} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_add} {:instruction float_inc} {:instruction integer_add} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_add} {:instruction float_inc} {:instruction float_inc} {:instruction integer_add} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_add} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_max} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_dup_times} {:instruction float_rot} {:instruction float_stackdepth} {:instruction integer_min} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_min} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_add} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_add} {:instruction float_inc} {:instruction float_inc} {:instruction integer_max} {:instruction float_inc} {:instruction float_dup} {:instruction float_inc} {:instruction 25} {:instruction float_stackdepth} {:instruction float_inc} {:instruction float_dup_times} {:instruction float_yank} {:instruction float_inc} {:instruction integer_add} {:instruction integer_yankdup} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_add} {:instruction integer_yankdup} {:instruction float_inc} {:instruction integer_max} {:instruction float_dup_times} {:instruction float_max} {:instruction float_dup_times} {:instruction float_dup_times} {:instruction float_stackdepth} {:instruction float_inc} {:instruction float_inc} {:instruction float_dup_times} {:instruction float_dup_items} {:instruction integer_pop} {:instruction 25} {:instruction integer_flush} {:instruction integer_add} {:instruction float_yank} {:instruction float_dup_times} {:instruction integer_flush} {:instruction integer_add} {:instruction float_yank} {:instruction float_dup_times} {:instruction integer_swap} {:instruction print_integer} {:instruction 78.00430018095415} {:instruction float_rot} {:instruction float_dup_times} {:instruction float_rot} {:instruction integer_shove} {:instruction integer_add} {:instruction float_dec} {:instruction float_inc} {:instruction float_sub} {:instruction float_rot} {:instruction integer_shove} {:instruction float_rot} {:instruction float_sub} {:instruction float_rot} {:instruction integer_sub} {:instruction float_inc} {:instruction integer_inc} {:instruction integer_min} {:instruction print_float} {:instruction integer_dec} {:instruction integer_stackdepth} {:instruction float_yank} {:instruction float_div} {:instruction float_mult} {:instruction integer_shove} {:instruction float_dup_times} {:instruction integer_dup} {:instruction float_pop})
Best program: (float_sub integer_max in2 float_pop integer_mod float_flush float_pop integer_max integer_flush in1 in1 float_stackdepth in2 integer_add integer_add float_inc float_inc float_inc integer_add float_inc integer_add float_inc integer_max float_inc integer_add float_inc integer_add float_inc float_inc float_inc float_inc integer_add float_inc integer_add float_inc float_inc float_inc float_inc integer_add float_inc float_inc integer_add float_inc float_inc float_inc float_inc float_inc integer_add float_inc float_inc float_inc integer_max float_inc float_inc float_inc float_inc float_dup_times float_rot float_stackdepth integer_min float_inc float_inc float_inc float_inc integer_min float_inc float_inc float_inc float_inc float_inc integer_add float_inc float_inc float_inc float_inc integer_add float_inc float_inc integer_max float_inc float_dup float_inc 25 float_stackdepth float_inc float_dup_times float_yank float_inc integer_add integer_yankdup float_inc float_inc float_inc float_inc integer_add integer_yankdup float_inc integer_max float_dup_times float_max float_dup_times float_dup_times float_stackdepth float_inc float_inc float_dup_times float_dup_items integer_pop 25 integer_flush integer_add float_yank float_dup_times integer_flush integer_add float_yank float_dup_times integer_swap print_integer 78.00430018095415 float_rot float_dup_times float_rot integer_shove integer_add float_dec float_inc float_sub float_rot integer_shove float_rot float_sub float_rot integer_sub float_inc integer_inc integer_min print_float integer_dec integer_stackdepth float_yank float_div float_mult integer_shove float_dup_times integer_dup float_pop)
Errors: [23.9957 8 27.0 2 9.9957 7 40.0043 8 19.0 2 6.9957 9 27.0043 7 5.0 1 26.0043 8 14.0 2 0.0 0 9.0043 8 30.0 1 3.0 1 28.0 2 0.9957 7 0.0 0 33.0 9 31.9957 9 10.0 1 26.0 2 31.0 2 0.0 0 2.0043 6 1.0 1]
Total: 508.0
Mean: 10.16
Genome size: 147
Size: 148
Percent parens: 0.007
--- Population Statistics ---
Average total errors in population: 3107.4454667999994
Median total errors in population: 967.495
Error averages by case: (136.3015586 9.911 117.37842990000001 3.973 116.83654599999977 7.026 137.96384660000015 7.835 113.40225840000005 3.87 139.61948329999984 8.42 117.49031310000028 6.559 98.19681370000006 3.764 115.5289396000003 7.392 114.79937550000021 4.129 104.7622223000001 2.652 128.80654949999996 8.154 114.27611850000007 3.813 103.33424030000002 3.137 133.60299109999983 4.023 116.9545628999996 8.583 101.67109370000003 4.515 128.8772258000001 10.086 138.3150791 10.793 100.058449 3.652 126.73918090000011 4.205 112.04821170000002 3.858 103.96236990000011 3.393 132.4987134000002 6.845 109.9558939999999 3.477)
Error minima by case: (1.482 7 0.2433 1 0.0043 1 5.0043 1 1.6808 1 0.0043 1 1.0043 1 0.0 0 0.0043 1 0.0 0 0.0 0 0.0043 1 0.0 0 0.0 0 14.4652 1 0.0043 1 0.0 0 0.0129 6 4.0723 8 0.1392 1 1.8112 1 0.4896 1 0.0 0 0.0043 1 0.0 0)
Average genome size in population (length): 136.595
Average program size in population (points): 137.595
Average percent parens in population: 0.007
Minimum age in population: 173.8850899871695
Maximum age in population: 178.0415804684063
Average age in population: 175.9559476078137
Median age in population: 175.9946526545973
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 4
Genome diversity (% unique Plush genomes):	 0.956
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 4
Syntactic diversity (% unique Push programs):	 0.956
Total error diversity:				 0.515
Error (vector) diversity:			 0.573
Behavioral diversity:				 0.574
--- Run Statistics ---
Number of program evaluations used so far: 128000
Number of point (instruction) evaluations so far: 304884476
--- Timings ---
Current time: 1529616471011 milliseconds
Total Time:         535.2 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       172.1 seconds, 32.1%
Fitness Testing:    288.7 seconds, 53.9%
Report:              74.4 seconds, 13.9%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 127
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 128
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 128
;;******************************
;; -*- Number IO problem report - generation 128
Test total error for best: 28133.38270000003
Test mean error for best: 14.06669
;;------------------------------
Outputs of best individual on training cases:
Correct output: -74.6179542037 | Program output: -50.6222543847
Correct output: 78.7609586813  | Program output: 51.7609586813 
Correct output: 3.0100598709   | Program output: 13.0057596899 
Correct output: -99.2368061293 | Program output: -139.2411063103
Correct output: 88.6808415603  | Program output: 69.6808415603 
Correct output: -151.1060419578 | Program output: -144.1103421388
Correct output: 56.004616184   | Program output: 29.000316003  
Correct output: 33.520660154   | Program output: 38.520660154  
Correct output: 42.238861085   | Program output: 16.2345609041 
Correct output: -49.0227893765 | Program output: -35.0227893765
Correct output: 103.4057483059 | Program output: 103.4057483059
Correct output: -106.1378273779 | Program output: -115.1421275589
Correct output: 37.9625599991  | Program output: 67.9625599991 
Correct output: 71.9208193203  | Program output: 74.9208193203 
Correct output: 173.5348464317 | Program output: 145.5348464317
Correct output: -77.0615185935 | Program output: -76.0658187744
Correct output: -20.7643622555 | Program output: -20.7643622555
Correct output: 1.9827630815   | Program output: -31.0172369185
Correct output: -39.1198682611 | Program output: -7.124168442  
Correct output: 1.1392376036   | Program output: 11.1392376036 
Correct output: 129.1930977679 | Program output: 103.1930977679
Correct output: 26.7496211861  | Program output: 57.7496211861 
Correct output: -11.2984801384 | Program output: -11.2984801384
Correct output: -136.1442960385 | Program output: -138.1485962195
Correct output: 143.0911996605 | Program output: 142.0911996605
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_mod} {:instruction float_pop} {:instruction integer_max} {:instruction integer_flush} {:instruction in1} {:instruction in1} {:instruction float_stackdepth} {:instruction in2} {:instruction integer_add} {:instruction integer_add} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_add} {:instruction float_inc} {:instruction integer_add} {:instruction float_inc} {:instruction integer_max} {:instruction integer_add} {:instruction float_inc} {:instruction integer_add} {:instruction float_inc} {:instruction integer_max} {:instruction float_inc} {:instruction integer_add} {:instruction float_inc} {:instruction integer_add} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_add} {:instruction float_inc} {:instruction integer_add} {:instruction float_inc} {:instruction float_inc} {:instruction integer_yankdup} {:instruction float_inc} {:instruction float_inc} {:instruction integer_add} {:instruction float_inc} {:instruction float_inc} {:instruction integer_add} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_dup_times} {:instruction float_inc} {:instruction integer_max} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_dup_times} {:instruction float_rot} {:instruction float_stackdepth} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_min} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_add} {:instruction float_inc} {:instruction float_inc} {:instruction integer_max} {:instruction float_inc} {:instruction float_dup} {:instruction float_inc} {:instruction 25} {:instruction float_stackdepth} {:instruction float_inc} {:instruction float_dup_times} {:instruction float_yank} {:instruction float_inc} {:instruction integer_add} {:instruction integer_yankdup} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_add} {:instruction integer_yankdup} {:instruction float_inc} {:instruction integer_max} {:instruction float_dup_times} {:instruction float_max} {:instruction float_dup_times} {:instruction float_stackdepth} {:instruction float_inc} {:instruction float_inc} {:instruction float_dup_times} {:instruction float_dup_items} {:instruction integer_pop} {:instruction 25} {:instruction integer_flush} {:instruction integer_add} {:instruction float_yank} {:instruction float_dup_times} {:instruction integer_swap} {:instruction print_integer} {:instruction 78.00430018095415} {:instruction float_rot} {:instruction float_dup_times} {:instruction float_rot} {:instruction integer_shove} {:instruction integer_add} {:instruction float_dec} {:instruction float_shove} {:instruction float_sub} {:instruction float_rot} {:instruction integer_shove} {:instruction float_rot} {:instruction float_sub} {:instruction float_rot} {:instruction integer_sub} {:instruction float_inc} {:instruction integer_swap} {:instruction integer_min} {:instruction print_float} {:instruction integer_dec} {:instruction integer_min} {:instruction float_yank} {:instruction float_div} {:instruction float_mult} {:instruction integer_shove} {:instruction float_dup_times} {:instruction float_yankdup})
Best program: (float_mod float_pop integer_max integer_flush in1 in1 float_stackdepth in2 integer_add integer_add float_inc float_inc float_inc integer_add float_inc integer_add float_inc integer_max integer_add float_inc integer_add float_inc integer_max float_inc integer_add float_inc integer_add float_inc float_inc float_inc float_inc integer_add float_inc integer_add float_inc float_inc integer_yankdup float_inc float_inc integer_add float_inc float_inc integer_add float_inc float_inc float_inc float_inc float_inc integer_dup_times float_inc integer_max float_inc float_inc float_inc float_inc float_dup_times float_rot float_stackdepth float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc integer_min float_inc float_inc float_inc float_inc float_inc integer_add float_inc float_inc integer_max float_inc float_dup float_inc 25 float_stackdepth float_inc float_dup_times float_yank float_inc integer_add integer_yankdup float_inc float_inc float_inc float_inc integer_add integer_yankdup float_inc integer_max float_dup_times float_max float_dup_times float_stackdepth float_inc float_inc float_dup_times float_dup_items integer_pop 25 integer_flush integer_add float_yank float_dup_times integer_swap print_integer 78.00430018095415 float_rot float_dup_times float_rot integer_shove integer_add float_dec float_shove float_sub float_rot integer_shove float_rot float_sub float_rot integer_sub float_inc integer_swap integer_min print_float integer_dec integer_min float_yank float_div float_mult integer_shove float_dup_times float_yankdup)
Errors: [23.9957 8 27.0 2 9.9957 7 40.0043 8 19.0 2 6.9957 9 27.0043 7 5.0 1 26.0043 8 14.0 2 0.0 0 9.0043 8 30.0 1 3.0 1 28.0 2 0.9957 7 0.0 0 33.0 9 31.9957 9 10.0 1 26.0 2 31.0 2 0.0 0 2.0043 6 1.0 1]
Total: 508.0
Mean: 10.16
Genome size: 138
Size: 139
Percent parens: 0.007
--- Population Statistics ---
Average total errors in population: 2641.6316875000007
Median total errors in population: 1010.0876999999999
Error averages by case: (121.89721289999996 9.836 96.09713580000002 3.849 102.38851049999975 6.891 122.6239270000001 7.708 92.62096570000006 3.685 124.98263959999983 8.354 100.67023670000025 6.438 75.48377040000004 3.674 100.21426260000024 7.256 93.39901590000012 3.948 83.16159880000009 2.46 112.26254919999992 8.089 93.38652090000004 3.629 81.56439370000007 2.923 113.60875219999984 3.852 104.76747159999958 8.583 79.77078630000004 4.412 107.5823033000001 10.002 124.37076580000003 10.685 84.02226340000003 3.649 107.11242460000012 4.063 89.51317679999998 3.668 82.36476920000001 3.19 117.58059120000024 6.777 89.27064339999998 3.294)
Error minima by case: (0.2326 7 0.2433 1 0.0043 1 4.0043 1 0.6808 1 0.9957 1 0.9957 1 0.0 0 0.0043 1 0.0 0 0.0 0 0.0043 1 0.0 0 0.0 0 9.2568 1 0.0043 2 0.0 0 0.0165 7 1.9967 8 0.1392 1 5.1931 1 0.0704 1 0.0 0 0.0043 1 0.0 0)
Average genome size in population (length): 136.497
Average program size in population (points): 137.497
Average percent parens in population: 0.007
Minimum age in population: 175.329692034365
Maximum age in population: 179.308380438232
Average age in population: 177.193378957218
Median age in population: 177.210115389843
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 4
Genome diversity (% unique Plush genomes):	 0.948
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 4
Syntactic diversity (% unique Push programs):	 0.948
Total error diversity:				 0.538
Error (vector) diversity:			 0.597
Behavioral diversity:				 0.598
--- Run Statistics ---
Number of program evaluations used so far: 129000
Number of point (instruction) evaluations so far: 308296901
--- Timings ---
Current time: 1529616476173 milliseconds
Total Time:         540.4 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       173.4 seconds, 32.1%
Fitness Testing:    291.7 seconds, 54.0%
Report:              75.1 seconds, 13.9%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 128
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 129
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 129
;;******************************
;; -*- Number IO problem report - generation 129
Test total error for best: 27772.38270000003
Test mean error for best: 13.88619
;;------------------------------
Outputs of best individual on training cases:
Correct output: -74.6179542037 | Program output: -50.6222543847
Correct output: 78.7609586813  | Program output: 51.7609586813 
Correct output: 3.0100598709   | Program output: 13.0057596899 
Correct output: -99.2368061293 | Program output: -139.2411063103
Correct output: 88.6808415603  | Program output: 69.6808415603 
Correct output: -151.1060419578 | Program output: -144.1103421388
Correct output: 56.004616184   | Program output: 29.000316003  
Correct output: 33.520660154   | Program output: 38.520660154  
Correct output: 42.238861085   | Program output: 16.2345609041 
Correct output: -49.0227893765 | Program output: -35.0227893765
Correct output: 103.4057483059 | Program output: 103.4057483059
Correct output: -106.1378273779 | Program output: -115.1421275589
Correct output: 37.9625599991  | Program output: 67.9625599991 
Correct output: 71.9208193203  | Program output: 74.9208193203 
Correct output: 173.5348464317 | Program output: 145.5348464317
Correct output: -77.0615185935 | Program output: -76.0658187744
Correct output: -20.7643622555 | Program output: -20.7643622555
Correct output: 1.9827630815   | Program output: -31.0172369185
Correct output: -39.1198682611 | Program output: -7.124168442  
Correct output: 1.1392376036   | Program output: 11.1392376036 
Correct output: 129.1930977679 | Program output: 103.1930977679
Correct output: 26.7496211861  | Program output: 57.7496211861 
Correct output: -11.2984801384 | Program output: -11.2984801384
Correct output: -136.1442960385 | Program output: -138.1485962195
Correct output: 143.0911996605 | Program output: 142.0911996605
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_mod} {:instruction float_pop} {:instruction integer_mod} {:instruction float_mod} {:instruction float_pop} {:instruction integer_max} {:instruction integer_flush} {:instruction in1} {:instruction in1} {:instruction float_stackdepth} {:instruction in2} {:instruction integer_add} {:instruction integer_add} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_add} {:instruction float_inc} {:instruction integer_add} {:instruction float_inc} {:instruction integer_max} {:instruction float_inc} {:instruction integer_add} {:instruction float_inc} {:instruction integer_add} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_add} {:instruction float_inc} {:instruction integer_add} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_yankdup} {:instruction float_inc} {:instruction float_inc} {:instruction integer_add} {:instruction float_inc} {:instruction float_inc} {:instruction integer_add} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_dup_times} {:instruction float_inc} {:instruction integer_max} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_dup_times} {:instruction float_rot} {:instruction float_stackdepth} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_min} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_add} {:instruction float_inc} {:instruction float_inc} {:instruction integer_max} {:instruction float_inc} {:instruction float_dup} {:instruction float_inc} {:instruction 27} {:instruction float_stackdepth} {:instruction float_inc} {:instruction float_dup_times} {:instruction float_yank} {:instruction float_inc} {:instruction integer_add} {:instruction integer_yankdup} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_add} {:instruction integer_yankdup} {:instruction float_inc} {:instruction integer_max} {:instruction float_dup_times} {:instruction float_max} {:instruction float_dup_times} {:instruction float_stackdepth} {:instruction float_inc} {:instruction float_inc} {:instruction float_dup_times} {:instruction float_dup_items} {:instruction integer_pop} {:instruction 25} {:instruction integer_flush} {:instruction integer_add} {:instruction float_yank} {:instruction float_dup_times} {:instruction integer_swap} {:instruction print_integer} {:instruction 78.00430018095415} {:instruction float_rot} {:instruction float_dup_times} {:instruction float_rot} {:instruction integer_shove} {:instruction integer_add} {:instruction float_dec} {:instruction float_shove} {:instruction float_sub} {:instruction float_rot} {:instruction integer_shove} {:instruction float_rot} {:instruction float_sub} {:instruction float_rot} {:instruction integer_sub} {:instruction float_inc} {:instruction integer_swap} {:instruction integer_min} {:instruction print_float} {:instruction integer_dec} {:instruction integer_min} {:instruction float_yank} {:instruction float_div} {:instruction float_mult} {:instruction integer_shove} {:instruction float_dup_times})
Best program: (float_mod float_pop integer_mod float_mod float_pop integer_max integer_flush in1 in1 float_stackdepth in2 integer_add integer_add float_inc float_inc float_inc integer_add float_inc integer_add float_inc integer_max float_inc integer_add float_inc integer_add float_inc float_inc float_inc float_inc integer_add float_inc integer_add float_inc float_inc float_inc float_inc integer_yankdup float_inc float_inc integer_add float_inc float_inc integer_add float_inc float_inc float_inc float_inc float_inc integer_dup_times float_inc integer_max float_inc float_inc float_inc float_inc float_dup_times float_rot float_stackdepth float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc integer_min float_inc float_inc float_inc float_inc float_inc integer_add float_inc float_inc integer_max float_inc float_dup float_inc 27 float_stackdepth float_inc float_dup_times float_yank float_inc integer_add integer_yankdup float_inc float_inc float_inc float_inc integer_add integer_yankdup float_inc integer_max float_dup_times float_max float_dup_times float_stackdepth float_inc float_inc float_dup_times float_dup_items integer_pop 25 integer_flush integer_add float_yank float_dup_times integer_swap print_integer 78.00430018095415 float_rot float_dup_times float_rot integer_shove integer_add float_dec float_shove float_sub float_rot integer_shove float_rot float_sub float_rot integer_sub float_inc integer_swap integer_min print_float integer_dec integer_min float_yank float_div float_mult integer_shove float_dup_times)
Errors: [23.9957 8 27.0 2 9.9957 7 40.0043 8 19.0 2 6.9957 9 27.0043 7 5.0 1 26.0043 8 14.0 2 0.0 0 9.0043 8 30.0 1 3.0 1 28.0 2 0.9957 7 0.0 0 33.0 9 31.9957 9 10.0 1 26.0 2 31.0 2 0.0 0 2.0043 6 1.0 1]
Total: 508.0
Mean: 10.16
Genome size: 137
Size: 138
Percent parens: 0.007
--- Population Statistics ---
Average total errors in population: 2928.8035860999994
Median total errors in population: 954.8730999999999
Error averages by case: (131.97801960000004 9.836 109.75308200000003 3.668 112.68796789999978 6.956 137.4492782000002 7.662 106.73540520000007 3.607 139.04842059999982 8.287 112.54591960000032 6.454 89.61654680000004 3.543 110.73358200000028 7.284 105.36427210000015 3.798 95.96605100000009 2.364 127.54291309999998 7.995 107.28937680000006 3.537 93.19367690000004 2.838 123.25493419999988 3.698 111.46577079999958 8.542 89.5060096 4.415 120.56540780000005 9.999 135.01554749999997 10.707 88.68904429999996 3.536 116.85078360000009 3.932 100.53744709999998 3.549 92.55812910000004 3.087 131.89299330000023 6.681 99.41100699999993 3.177)
Error minima by case: (5.9957 7 0.2433 1 0.0043 1 5.0043 1 5.0 1 0.0043 1 6.0E-4 2 0.0 0 0.0043 1 0.0 0 0.0 0 0.0043 1 0.0 0 0.0 0 14.0 1 0.0043 1 0.0 0 0.0172 7 2.1199 8 0.1392 1 9.1931 1 0.2072 1 0.0 0 0.0043 1 0.0 0)
Average genome size in population (length): 136.351
Average program size in population (points): 137.351
Average percent parens in population: 0.007
Minimum age in population: 176.329692034365
Maximum age in population: 180.7962331536835
Average age in population: 178.5121113486258
Median age in population: 178.5453474407514
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 4
Genome diversity (% unique Plush genomes):	 0.958
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 4
Syntactic diversity (% unique Push programs):	 0.958
Total error diversity:				 0.548
Error (vector) diversity:			 0.613
Behavioral diversity:				 0.613
--- Run Statistics ---
Number of program evaluations used so far: 130000
Number of point (instruction) evaluations so far: 311705676
--- Timings ---
Current time: 1529616481475 milliseconds
Total Time:         545.6 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       174.8 seconds, 32.0%
Fitness Testing:    294.8 seconds, 54.0%
Report:              75.8 seconds, 13.9%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 129
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 130
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 130
;;******************************
;; -*- Number IO problem report - generation 130
Test total error for best: 28133.38270000003
Test mean error for best: 14.06669
;;------------------------------
Outputs of best individual on training cases:
Correct output: -74.6179542037 | Program output: -50.6222543847
Correct output: 78.7609586813  | Program output: 51.7609586813 
Correct output: 3.0100598709   | Program output: 13.0057596899 
Correct output: -99.2368061293 | Program output: -139.2411063103
Correct output: 88.6808415603  | Program output: 69.6808415603 
Correct output: -151.1060419578 | Program output: -144.1103421388
Correct output: 56.004616184   | Program output: 29.000316003  
Correct output: 33.520660154   | Program output: 38.520660154  
Correct output: 42.238861085   | Program output: 16.2345609041 
Correct output: -49.0227893765 | Program output: -35.0227893765
Correct output: 103.4057483059 | Program output: 103.4057483059
Correct output: -106.1378273779 | Program output: -115.1421275589
Correct output: 37.9625599991  | Program output: 67.9625599991 
Correct output: 71.9208193203  | Program output: 74.9208193203 
Correct output: 173.5348464317 | Program output: 145.5348464317
Correct output: -77.0615185935 | Program output: -76.0658187744
Correct output: -20.7643622555 | Program output: -20.7643622555
Correct output: 1.9827630815   | Program output: -31.0172369185
Correct output: -39.1198682611 | Program output: -7.124168442  
Correct output: 1.1392376036   | Program output: 11.1392376036 
Correct output: 129.1930977679 | Program output: 103.1930977679
Correct output: 26.7496211861  | Program output: 57.7496211861 
Correct output: -11.2984801384 | Program output: -11.2984801384
Correct output: -136.1442960385 | Program output: -138.1485962195
Correct output: 143.0911996605 | Program output: 142.0911996605
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_mod} {:instruction float_pop} {:instruction integer_max} {:instruction integer_flush} {:instruction in1} {:instruction in1} {:instruction float_stackdepth} {:instruction in2} {:instruction integer_add} {:instruction integer_add} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_add} {:instruction float_inc} {:instruction integer_add} {:instruction float_inc} {:instruction integer_max} {:instruction float_inc} {:instruction float_rot} {:instruction float_inc} {:instruction integer_min} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_add} {:instruction float_inc} {:instruction integer_add} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_yankdup} {:instruction float_inc} {:instruction float_inc} {:instruction integer_add} {:instruction float_inc} {:instruction float_inc} {:instruction integer_add} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_dup_times} {:instruction float_inc} {:instruction integer_max} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_dup_times} {:instruction float_rot} {:instruction float_stackdepth} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_add} {:instruction float_inc} {:instruction float_inc} {:instruction integer_max} {:instruction float_inc} {:instruction float_dup} {:instruction float_inc} {:instruction 25} {:instruction float_stackdepth} {:instruction float_inc} {:instruction float_dup_times} {:instruction float_yank} {:instruction float_inc} {:instruction integer_add} {:instruction integer_yankdup} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_max} {:instruction float_dup_times} {:instruction float_max} {:instruction float_dup_times} {:instruction float_stackdepth} {:instruction float_inc} {:instruction float_inc} {:instruction float_dup_times} {:instruction float_dup_items} {:instruction integer_add} {:instruction 25} {:instruction integer_flush} {:instruction integer_add} {:instruction float_yank} {:instruction float_dup_times} {:instruction integer_swap} {:instruction print_integer} {:instruction 78.00430018095415} {:instruction float_rot} {:instruction float_dup_times} {:instruction float_rot} {:instruction integer_shove} {:instruction integer_add} {:instruction float_dec} {:instruction float_inc} {:instruction float_sub} {:instruction float_rot} {:instruction integer_dec} {:instruction float_rot} {:instruction float_sub} {:instruction float_rot} {:instruction integer_sub} {:instruction float_inc} {:instruction integer_swap} {:instruction integer_min} {:instruction print_float} {:instruction integer_dec} {:instruction float_div} {:instruction float_pop})
Best program: (float_mod float_pop integer_max integer_flush in1 in1 float_stackdepth in2 integer_add integer_add float_inc float_inc float_inc integer_add float_inc integer_add float_inc integer_max float_inc float_rot float_inc integer_min float_inc float_inc float_inc float_inc integer_add float_inc integer_add float_inc float_inc float_inc float_inc integer_yankdup float_inc float_inc integer_add float_inc float_inc integer_add float_inc float_inc float_inc float_inc float_inc integer_dup_times float_inc integer_max float_inc float_inc float_inc float_inc float_dup_times float_rot float_stackdepth float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc integer_add float_inc float_inc integer_max float_inc float_dup float_inc 25 float_stackdepth float_inc float_dup_times float_yank float_inc integer_add integer_yankdup float_inc float_inc float_inc float_inc float_inc integer_max float_dup_times float_max float_dup_times float_stackdepth float_inc float_inc float_dup_times float_dup_items integer_add 25 integer_flush integer_add float_yank float_dup_times integer_swap print_integer 78.00430018095415 float_rot float_dup_times float_rot integer_shove integer_add float_dec float_inc float_sub float_rot integer_dec float_rot float_sub float_rot integer_sub float_inc integer_swap integer_min print_float integer_dec float_div float_pop)
Errors: [23.9957 8 27.0 2 9.9957 7 40.0043 8 19.0 2 6.9957 9 27.0043 7 5.0 1 26.0043 8 14.0 2 0.0 0 9.0043 8 30.0 1 3.0 1 28.0 2 0.9957 7 0.0 0 33.0 9 31.9957 9 10.0 1 26.0 2 31.0 2 0.0 0 2.0043 6 1.0 1]
Total: 508.0
Mean: 10.16
Genome size: 127
Size: 128
Percent parens: 0.008
--- Population Statistics ---
Average total errors in population: 2813.555604400001
Median total errors in population: 750.0
Error averages by case: (125.37031529999997 9.773 108.15075929999995 3.747 103.83786209999982 6.974 128.37789950000015 7.795 104.04905590000008 3.605 130.04004989999984 8.381 102.37398110000026 6.459 86.78558030000002 3.506 101.53034430000027 7.344 101.68459400000008 3.821 92.76633490000007 2.367 118.94438679999996 8.111 104.07060419999999 3.548 91.61856320000001 2.902 121.5116938999999 3.768 107.08740479999955 8.532 88.60237190000005 4.318 116.3027467000001 10.011 126.01316059999999 10.633 85.89673970000001 3.389 115.3826674000001 3.976 102.78829030000003 3.574 90.46944750000007 3.111 122.79269540000024 6.783 97.44305539999998 3.237)
Error minima by case: (0.2326 7 0.2433 1 0.0043 1 7.0043 1 0.0153 1 0.0043 2 0.0043 1 0.0 0 0.0043 1 0.0 0 0.0 0 0.0043 1 0.0 0 0.0 0 14.0 1 0.0043 1 0.0 0 0.0172 7 15.9957 8 0.1392 1 5.3372 1 0.0 0 0.0 0 0.0043 1 0.0 0)
Average genome size in population (length): 135.763
Average program size in population (points): 136.763
Average percent parens in population: 0.007
Minimum age in population: 177.329692034365
Maximum age in population: 181.8972542338484
Average age in population: 179.827735018984
Median age in population: 179.8544722342457
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 5
Genome diversity (% unique Plush genomes):	 0.945
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 5
Syntactic diversity (% unique Push programs):	 0.945
Total error diversity:				 0.54
Error (vector) diversity:			 0.589
Behavioral diversity:				 0.59
--- Run Statistics ---
Number of program evaluations used so far: 131000
Number of point (instruction) evaluations so far: 315099751
--- Timings ---
Current time: 1529616486748 milliseconds
Total Time:         550.9 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       176.2 seconds, 32.0%
Fitness Testing:    297.9 seconds, 54.1%
Report:              76.7 seconds, 13.9%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 130
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 131
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 131
;;******************************
;; -*- Number IO problem report - generation 131
Test total error for best: 28133.38270000003
Test mean error for best: 14.06669
;;------------------------------
Outputs of best individual on training cases:
Correct output: -74.6179542037 | Program output: -50.6222543847
Correct output: 78.7609586813  | Program output: 51.7609586813 
Correct output: 3.0100598709   | Program output: 13.0057596899 
Correct output: -99.2368061293 | Program output: -139.2411063103
Correct output: 88.6808415603  | Program output: 69.6808415603 
Correct output: -151.1060419578 | Program output: -144.1103421388
Correct output: 56.004616184   | Program output: 29.000316003  
Correct output: 33.520660154   | Program output: 38.520660154  
Correct output: 42.238861085   | Program output: 16.2345609041 
Correct output: -49.0227893765 | Program output: -35.0227893765
Correct output: 103.4057483059 | Program output: 103.4057483059
Correct output: -106.1378273779 | Program output: -115.1421275589
Correct output: 37.9625599991  | Program output: 67.9625599991 
Correct output: 71.9208193203  | Program output: 74.9208193203 
Correct output: 173.5348464317 | Program output: 145.5348464317
Correct output: -77.0615185935 | Program output: -76.0658187744
Correct output: -20.7643622555 | Program output: -20.7643622555
Correct output: 1.9827630815   | Program output: -31.0172369185
Correct output: -39.1198682611 | Program output: -7.124168442  
Correct output: 1.1392376036   | Program output: 11.1392376036 
Correct output: 129.1930977679 | Program output: 103.1930977679
Correct output: 26.7496211861  | Program output: 57.7496211861 
Correct output: -11.2984801384 | Program output: -11.2984801384
Correct output: -136.1442960385 | Program output: -138.1485962195
Correct output: 143.0911996605 | Program output: 142.0911996605
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_mod} {:instruction float_pop} {:instruction integer_max} {:instruction integer_dup} {:instruction in1} {:instruction in1} {:instruction float_stackdepth} {:instruction in2} {:instruction integer_add} {:instruction integer_add} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_add} {:instruction float_inc} {:instruction integer_add} {:instruction float_inc} {:instruction integer_max} {:instruction float_inc} {:instruction integer_add} {:instruction float_inc} {:instruction float_inc} {:instruction integer_add} {:instruction float_inc} {:instruction integer_add} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_add} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_yankdup} {:instruction float_inc} {:instruction float_inc} {:instruction integer_add} {:instruction float_inc} {:instruction float_inc} {:instruction integer_add} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_dup_times} {:instruction float_rot} {:instruction float_stackdepth} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_min} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_add} {:instruction float_inc} {:instruction float_inc} {:instruction integer_max} {:instruction float_inc} {:instruction float_dup} {:instruction float_inc} {:instruction 25} {:instruction float_stackdepth} {:instruction float_inc} {:instruction float_dup_times} {:instruction float_yank} {:instruction float_inc} {:instruction integer_add} {:instruction integer_yankdup} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_add} {:instruction integer_yankdup} {:instruction float_inc} {:instruction integer_max} {:instruction float_dup_times} {:instruction float_max} {:instruction float_dup_times} {:instruction float_stackdepth} {:instruction float_inc} {:instruction float_inc} {:instruction float_dup_times} {:instruction float_dup_items} {:instruction integer_pop} {:instruction 25} {:instruction integer_flush} {:instruction integer_add} {:instruction float_yank} {:instruction float_dup_times} {:instruction integer_yankdup} {:instruction print_integer} {:instruction 78.00430018095415} {:instruction float_rot} {:instruction float_dup_times} {:instruction float_rot} {:instruction integer_shove} {:instruction integer_add} {:instruction float_dec} {:instruction integer_add} {:instruction float_sub} {:instruction float_rot} {:instruction integer_shove} {:instruction float_rot} {:instruction float_sub} {:instruction float_rot} {:instruction integer_sub} {:instruction float_inc} {:instruction integer_max} {:instruction integer_min} {:instruction print_float} {:instruction integer_dec} {:instruction integer_stackdepth} {:instruction integer_stackdepth})
Best program: (float_mod float_pop integer_max integer_dup in1 in1 float_stackdepth in2 integer_add integer_add float_inc float_inc float_inc integer_add float_inc integer_add float_inc integer_max float_inc integer_add float_inc float_inc integer_add float_inc integer_add float_inc float_inc float_inc float_inc float_inc integer_add float_inc float_inc float_inc float_inc integer_yankdup float_inc float_inc integer_add float_inc float_inc integer_add float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_dup_times float_rot float_stackdepth float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc integer_min float_inc float_inc float_inc float_inc float_inc integer_add float_inc float_inc integer_max float_inc float_dup float_inc 25 float_stackdepth float_inc float_dup_times float_yank float_inc integer_add integer_yankdup float_inc float_inc float_inc float_inc integer_add integer_yankdup float_inc integer_max float_dup_times float_max float_dup_times float_stackdepth float_inc float_inc float_dup_times float_dup_items integer_pop 25 integer_flush integer_add float_yank float_dup_times integer_yankdup print_integer 78.00430018095415 float_rot float_dup_times float_rot integer_shove integer_add float_dec integer_add float_sub float_rot integer_shove float_rot float_sub float_rot integer_sub float_inc integer_max integer_min print_float integer_dec integer_stackdepth integer_stackdepth)
Errors: [23.9957 8 27.0 2 9.9957 7 40.0043 8 19.0 2 6.9957 9 27.0043 7 5.0 1 26.0043 8 14.0 2 0.0 0 9.0043 8 30.0 1 3.0 1 28.0 2 0.9957 7 0.0 0 33.0 9 31.9957 9 10.0 1 26.0 2 31.0 2 0.0 0 2.0043 6 1.0 1]
Total: 508.0
Mean: 10.16
Genome size: 128
Size: 129
Percent parens: 0.008
--- Population Statistics ---
Average total errors in population: 3179.805425900001
Median total errors in population: 747.4935499999999
Error averages by case: (138.91626809999966 9.884 122.45400050000005 3.841 115.13283569999979 7.08 141.34661540000053 7.841 118.78373510000002 3.734 142.7501165999998 8.462 112.94187120000029 6.516 101.02293540000021 3.533 112.61539500000036 7.454 120.40713430000018 3.95 108.01811500000011 2.57 131.2189733 8.211 120.55925330000007 3.623 105.99522889999999 3.099 136.81985719999983 3.897 120.19836119999952 8.55 103.32045600000006 4.474 135.71778340000012 10.128 140.50489759999982 10.724 103.14662819999998 3.643 131.31368240000015 4.083 116.8395075000001 3.667 108.50492680000012 3.227 135.57702840000013 6.859 113.29281939999991 3.357)
Error minima by case: (0.3863 7 0.2433 1 0.0043 1 11.0043 1 0.3192 1 0.0043 1 1.0043 1 0.0 0 0.0043 1 0.0 0 0.0 0 0.0043 2 0.0 0 0.0 0 13.0 1 0.0043 1 0.0 0 0.0172 8 8.1312 8 0.1392 1 0.1931 1 0.4043 1 0.0 0 0.0043 1 0.0 0)
Average genome size in population (length): 135.928
Average program size in population (points): 136.928
Average percent parens in population: 0.007
Minimum age in population: 179.0596210380223
Maximum age in population: 183.0028417221359
Average age in population: 181.1037236069052
Median age in population: 181.1270804658641
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 4
Genome diversity (% unique Plush genomes):	 0.939
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 4
Syntactic diversity (% unique Push programs):	 0.939
Total error diversity:				 0.499
Error (vector) diversity:			 0.559
Behavioral diversity:				 0.559
--- Run Statistics ---
Number of program evaluations used so far: 132000
Number of point (instruction) evaluations so far: 318497976
--- Timings ---
Current time: 1529616491860 milliseconds
Total Time:         556.1 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       177.6 seconds, 31.9%
Fitness Testing:    301.0 seconds, 54.1%
Report:              77.4 seconds, 13.9%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 131
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 132
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 132
;;******************************
;; -*- Number IO problem report - generation 132
Test total error for best: 26554.879599999993
Test mean error for best: 13.27744
;;------------------------------
Outputs of best individual on training cases:
Correct output: -74.6179542037 | Program output: -50.6222543847
Correct output: 78.7609586813  | Program output: 51.7609586813 
Correct output: 3.0100598709   | Program output: 13.0057596899 
Correct output: -99.2368061293 | Program output: -55.2368061293
Correct output: 88.6808415603  | Program output: 69.6808415603 
Correct output: -151.1060419578 | Program output: -144.1103421388
Correct output: 56.004616184   | Program output: 29.000316003  
Correct output: 33.520660154   | Program output: 38.520660154  
Correct output: 42.238861085   | Program output: 16.2345609041 
Correct output: -49.0227893765 | Program output: -35.0227893765
Correct output: 103.4057483059 | Program output: 103.4057483059
Correct output: -106.1378273779 | Program output: -115.1421275589
Correct output: 37.9625599991  | Program output: 67.9625599991 
Correct output: 71.9208193203  | Program output: 74.9208193203 
Correct output: 173.5348464317 | Program output: 145.5348464317
Correct output: -77.0615185935 | Program output: -76.0658187744
Correct output: -20.7643622555 | Program output: -20.7643622555
Correct output: 1.9827630815   | Program output: -31.0172369185
Correct output: -39.1198682611 | Program output: -7.124168442  
Correct output: 1.1392376036   | Program output: 11.1392376036 
Correct output: 129.1930977679 | Program output: 103.1930977679
Correct output: 26.7496211861  | Program output: 57.7496211861 
Correct output: -11.2984801384 | Program output: -11.2984801384
Correct output: -136.1442960385 | Program output: -138.1485962195
Correct output: 143.0911996605 | Program output: 142.0911996605
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_mod} {:instruction float_pop} {:instruction integer_max} {:instruction float_sub} {:instruction integer_max} {:instruction in2} {:instruction float_pop} {:instruction integer_mod} {:instruction float_flush} {:instruction float_pop} {:instruction integer_max} {:instruction integer_flush} {:instruction in1} {:instruction in1} {:instruction float_stackdepth} {:instruction in2} {:instruction integer_add} {:instruction integer_add} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_add} {:instruction float_inc} {:instruction integer_max} {:instruction float_inc} {:instruction integer_add} {:instruction float_inc} {:instruction integer_add} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_add} {:instruction float_inc} {:instruction integer_add} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_add} {:instruction float_inc} {:instruction float_inc} {:instruction integer_sub} {:instruction float_inc} {:instruction float_inc} {:instruction integer_add} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_add} {:instruction float_inc} {:instruction float_inc} {:instruction integer_max} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_dup_times} {:instruction float_rot} {:instruction float_stackdepth} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_min} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_add} {:instruction float_inc} {:instruction float_inc} {:instruction integer_max} {:instruction float_inc} {:instruction float_dup} {:instruction float_inc} {:instruction 25} {:instruction float_stackdepth} {:instruction float_inc} {:instruction float_dup_times} {:instruction float_yank} {:instruction float_inc} {:instruction integer_add} {:instruction integer_yankdup} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_add} {:instruction integer_yankdup} {:instruction float_inc} {:instruction integer_max} {:instruction float_dup_times} {:instruction float_max} {:instruction float_dup_times} {:instruction float_stackdepth} {:instruction float_inc} {:instruction float_inc} {:instruction float_dup_times} {:instruction float_dup_items} {:instruction integer_add} {:instruction 25} {:instruction in2} {:instruction integer_add} {:instruction integer_yank} {:instruction float_dup_times} {:instruction integer_swap} {:instruction in1} {:instruction 78.00430018095415} {:instruction float_rot} {:instruction float_dup_times} {:instruction float_rot} {:instruction integer_yankdup} {:instruction integer_add} {:instruction float_dec} {:instruction float_inc} {:instruction float_sub} {:instruction float_rot} {:instruction integer_shove} {:instruction float_rot} {:instruction float_sub} {:instruction float_rot} {:instruction integer_sub} {:instruction float_inc} {:instruction integer_swap} {:instruction integer_min} {:instruction print_float} {:instruction integer_dec} {:instruction integer_stackdepth} {:instruction float_yank} {:instruction integer_flush} {:instruction float_mult} {:instruction integer_shove} {:instruction float_dup_times} {:instruction float_pop} {:instruction float_pop})
Best program: (float_mod float_pop integer_max float_sub integer_max in2 float_pop integer_mod float_flush float_pop integer_max integer_flush in1 in1 float_stackdepth in2 integer_add integer_add float_inc float_inc float_inc float_inc integer_add float_inc integer_max float_inc integer_add float_inc integer_add float_inc float_inc float_inc float_inc integer_add float_inc integer_add float_inc float_inc float_inc float_inc integer_add float_inc float_inc integer_sub float_inc float_inc integer_add float_inc float_inc float_inc float_inc integer_add float_inc float_inc integer_max float_inc float_inc float_inc float_inc float_dup_times float_rot float_stackdepth float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc integer_min float_inc float_inc float_inc float_inc float_inc integer_add float_inc float_inc integer_max float_inc float_dup float_inc 25 float_stackdepth float_inc float_dup_times float_yank float_inc integer_add integer_yankdup float_inc float_inc float_inc float_inc integer_add integer_yankdup float_inc integer_max float_dup_times float_max float_dup_times float_stackdepth float_inc float_inc float_dup_times float_dup_items integer_add 25 in2 integer_add integer_yank float_dup_times integer_swap in1 78.00430018095415 float_rot float_dup_times float_rot integer_yankdup integer_add float_dec float_inc float_sub float_rot integer_shove float_rot float_sub float_rot integer_sub float_inc integer_swap integer_min print_float integer_dec integer_stackdepth float_yank integer_flush float_mult integer_shove float_dup_times float_pop float_pop)
Errors: [23.9957 8 27.0 2 9.9957 7 44.0 2 19.0 2 6.9957 9 27.0043 7 5.0 1 26.0043 8 14.0 2 0.0 0 9.0043 8 30.0 1 3.0 1 28.0 2 0.9957 7 0.0 0 33.0 9 31.9957 9 10.0 1 26.0 2 31.0 2 0.0 0 2.0043 6 1.0 1]
Total: 505.9957
Mean: 10.119914
Genome size: 143
Size: 144
Percent parens: 0.007
--- Population Statistics ---
Average total errors in population: 3301.6009290000006
Median total errors in population: 729.4956999999999
Error averages by case: (143.88146449999977 9.843 126.37908219999994 4.12 120.6206662999998 7.197 146.88264470000038 7.97 123.44763340000004 3.989 147.45843619999982 8.597 120.72748840000028 6.715 107.3838299 3.909 120.30257320000037 7.569 123.2712162000002 4.201 113.69624120000007 2.598 136.71921149999997 8.316 123.81900319999998 3.873 110.29308990000006 3.132 142.24923459999988 4.183 126.2539761999996 8.477 108.56483440000004 4.415 136.33805830000009 10.123 145.66837909999987 10.708 108.0908438 3.727 135.33150610000013 4.326 118.23295299999997 3.943 110.89443860000013 3.453 140.23850180000002 6.968 118.8546222999999 3.649)
Error minima by case: (0.2326 7 0.2433 1 0.4998 1 1.7632 1 0.6922 1 0.0043 1 0.0043 1 0.0 0 0.9957 1 0.0 0 0.0 0 0.0043 1 0.0 0 0.0 0 14.0 1 0.0043 1 0.0 0 0.0172 8 11.7871 8 0.1392 1 2.1931 1 0.0 0 0.0 0 0.0043 2 0.0 0)
Average genome size in population (length): 135.627
Average program size in population (points): 136.627
Average percent parens in population: 0.007
Minimum age in population: 180.292701674773
Maximum age in population: 184.4645103064609
Average age in population: 182.3310361585346
Median age in population: 182.3409035281467
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 5
Genome diversity (% unique Plush genomes):	 0.934
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 5
Syntactic diversity (% unique Push programs):	 0.934
Total error diversity:				 0.532
Error (vector) diversity:			 0.582
Behavioral diversity:				 0.584
--- Run Statistics ---
Number of program evaluations used so far: 133000
Number of point (instruction) evaluations so far: 321888651
--- Timings ---
Current time: 1529616497013 milliseconds
Total Time:         561.2 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       179.0 seconds, 31.9%
Fitness Testing:    304.0 seconds, 54.2%
Report:              78.1 seconds, 13.9%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 132
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 133
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 133
;;******************************
;; -*- Number IO problem report - generation 133
Test total error for best: 26554.879599999993
Test mean error for best: 13.27744
;;------------------------------
Outputs of best individual on training cases:
Correct output: -74.6179542037 | Program output: -50.6222543847
Correct output: 78.7609586813  | Program output: 51.7609586813 
Correct output: 3.0100598709   | Program output: 13.0057596899 
Correct output: -99.2368061293 | Program output: -55.2368061293
Correct output: 88.6808415603  | Program output: 69.6808415603 
Correct output: -151.1060419578 | Program output: -144.1103421388
Correct output: 56.004616184   | Program output: 29.000316003  
Correct output: 33.520660154   | Program output: 38.520660154  
Correct output: 42.238861085   | Program output: 16.2345609041 
Correct output: -49.0227893765 | Program output: -35.0227893765
Correct output: 103.4057483059 | Program output: 103.4057483059
Correct output: -106.1378273779 | Program output: -115.1421275589
Correct output: 37.9625599991  | Program output: 67.9625599991 
Correct output: 71.9208193203  | Program output: 74.9208193203 
Correct output: 173.5348464317 | Program output: 145.5348464317
Correct output: -77.0615185935 | Program output: -76.0658187744
Correct output: -20.7643622555 | Program output: -20.7643622555
Correct output: 1.9827630815   | Program output: -31.0172369185
Correct output: -39.1198682611 | Program output: -7.124168442  
Correct output: 1.1392376036   | Program output: 11.1392376036 
Correct output: 129.1930977679 | Program output: 103.1930977679
Correct output: 26.7496211861  | Program output: 57.7496211861 
Correct output: -11.2984801384 | Program output: -11.2984801384
Correct output: -136.1442960385 | Program output: -138.1485962195
Correct output: 143.0911996605 | Program output: 142.0911996605
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_mod} {:instruction float_pop} {:instruction integer_max} {:instruction float_sub} {:instruction integer_max} {:instruction in2} {:instruction float_pop} {:instruction integer_mod} {:instruction float_flush} {:instruction float_pop} {:instruction integer_max} {:instruction integer_flush} {:instruction in1} {:instruction in1} {:instruction float_stackdepth} {:instruction in2} {:instruction integer_add} {:instruction integer_add} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_add} {:instruction float_inc} {:instruction integer_max} {:instruction float_inc} {:instruction integer_add} {:instruction float_inc} {:instruction integer_add} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_add} {:instruction float_inc} {:instruction integer_add} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_add} {:instruction float_inc} {:instruction float_inc} {:instruction integer_sub} {:instruction float_inc} {:instruction float_inc} {:instruction integer_add} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_add} {:instruction float_inc} {:instruction float_inc} {:instruction integer_max} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_dup_times} {:instruction float_rot} {:instruction float_stackdepth} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_min} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_add} {:instruction float_inc} {:instruction float_inc} {:instruction integer_max} {:instruction float_inc} {:instruction float_dup} {:instruction float_inc} {:instruction 25} {:instruction float_stackdepth} {:instruction float_inc} {:instruction float_dup_times} {:instruction float_yank} {:instruction float_inc} {:instruction integer_add} {:instruction integer_yankdup} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_add} {:instruction integer_yankdup} {:instruction float_inc} {:instruction integer_max} {:instruction float_dup_times} {:instruction float_max} {:instruction float_dup_times} {:instruction float_stackdepth} {:instruction float_inc} {:instruction float_inc} {:instruction float_dup_times} {:instruction float_dup_items} {:instruction integer_add} {:instruction 25} {:instruction in2} {:instruction integer_add} {:instruction integer_yank} {:instruction float_dup_times} {:instruction integer_swap} {:instruction in1} {:instruction 78.00430018095415} {:instruction float_rot} {:instruction float_dup_times} {:instruction float_rot} {:instruction integer_yankdup} {:instruction integer_add} {:instruction float_dec} {:instruction float_inc} {:instruction float_sub} {:instruction float_rot} {:instruction integer_shove} {:instruction float_rot} {:instruction float_sub} {:instruction float_rot} {:instruction integer_sub} {:instruction float_inc} {:instruction integer_swap} {:instruction integer_min} {:instruction print_float} {:instruction integer_dec} {:instruction integer_stackdepth} {:instruction float_yank} {:instruction integer_flush} {:instruction float_mult} {:instruction integer_shove} {:instruction float_dup_times} {:instruction float_pop} {:instruction float_pop})
Best program: (float_mod float_pop integer_max float_sub integer_max in2 float_pop integer_mod float_flush float_pop integer_max integer_flush in1 in1 float_stackdepth in2 integer_add integer_add float_inc float_inc float_inc float_inc integer_add float_inc integer_max float_inc integer_add float_inc integer_add float_inc float_inc float_inc float_inc integer_add float_inc integer_add float_inc float_inc float_inc float_inc integer_add float_inc float_inc integer_sub float_inc float_inc integer_add float_inc float_inc float_inc float_inc integer_add float_inc float_inc integer_max float_inc float_inc float_inc float_inc float_dup_times float_rot float_stackdepth float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc integer_min float_inc float_inc float_inc float_inc float_inc integer_add float_inc float_inc integer_max float_inc float_dup float_inc 25 float_stackdepth float_inc float_dup_times float_yank float_inc integer_add integer_yankdup float_inc float_inc float_inc float_inc integer_add integer_yankdup float_inc integer_max float_dup_times float_max float_dup_times float_stackdepth float_inc float_inc float_dup_times float_dup_items integer_add 25 in2 integer_add integer_yank float_dup_times integer_swap in1 78.00430018095415 float_rot float_dup_times float_rot integer_yankdup integer_add float_dec float_inc float_sub float_rot integer_shove float_rot float_sub float_rot integer_sub float_inc integer_swap integer_min print_float integer_dec integer_stackdepth float_yank integer_flush float_mult integer_shove float_dup_times float_pop float_pop)
Errors: [23.9957 8 27.0 2 9.9957 7 44.0 2 19.0 2 6.9957 9 27.0043 7 5.0 1 26.0043 8 14.0 2 0.0 0 9.0043 8 30.0 1 3.0 1 28.0 2 0.9957 7 0.0 0 33.0 9 31.9957 9 10.0 1 26.0 2 31.0 2 0.0 0 2.0043 6 1.0 1]
Total: 505.9957
Mean: 10.119914
Genome size: 143
Size: 144
Percent parens: 0.007
--- Population Statistics ---
Average total errors in population: 2718.614744300001
Median total errors in population: 693.5043
Error averages by case: (122.90955839999987 9.729 104.37971549999999 3.713 100.97040339999975 7.031 124.76319520000018 7.852 100.1046027 3.638 123.23026409999977 8.519 102.47461730000032 6.65 82.35141959999997 3.484 101.47242290000031 7.456 97.70373920000007 3.792 86.48961800000009 2.317 113.70755550000001 8.21 100.0511363 3.465 83.86507480000003 2.807 117.88114089999986 3.781 104.91215899999962 8.471 82.63339650000002 3.797 112.57183720000005 9.969 124.38358070000001 10.622 85.4456858 3.321 111.63195660000012 3.974 98.39673720000002 3.57 86.76977580000006 2.975 116.34857510000026 6.847 93.92957659999998 3.247)
Error minima by case: (1.5653 7 0.2433 1 0.0043 1 5.2368 1 2.3181 1 0.0043 1 0.0043 1 0.0 0 0.0043 1 0.0 0 0.0 0 0.0043 1 0.4033 1 0.0 0 16.0 1 0.0043 1 0.0 0 0.0172 7 3.1312 8 0.1392 1 0.8069 1 0.0094 1 0.0 0 0.0043 2 0.0 0)
Average genome size in population (length): 135.48
Average program size in population (points): 136.48
Average percent parens in population: 0.007
Minimum age in population: 181.3472849531052
Maximum age in population: 185.7878199385786
Average age in population: 183.6570394919093
Median age in population: 183.6877032435194
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 5
Genome diversity (% unique Plush genomes):	 0.939
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 5
Syntactic diversity (% unique Push programs):	 0.939
Total error diversity:				 0.5
Error (vector) diversity:			 0.554
Behavioral diversity:				 0.555
--- Run Statistics ---
Number of program evaluations used so far: 134000
Number of point (instruction) evaluations so far: 325275651
--- Timings ---
Current time: 1529616502202 milliseconds
Total Time:         566.4 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       180.4 seconds, 31.8%
Fitness Testing:    307.0 seconds, 54.2%
Report:              78.9 seconds, 13.9%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 133
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 134
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 134
;;******************************
;; -*- Number IO problem report - generation 134
Test total error for best: 26554.879599999993
Test mean error for best: 13.27744
;;------------------------------
Outputs of best individual on training cases:
Correct output: -74.6179542037 | Program output: -50.6222543847
Correct output: 78.7609586813  | Program output: 51.7609586813 
Correct output: 3.0100598709   | Program output: 13.0057596899 
Correct output: -99.2368061293 | Program output: -55.2368061293
Correct output: 88.6808415603  | Program output: 69.6808415603 
Correct output: -151.1060419578 | Program output: -144.1103421388
Correct output: 56.004616184   | Program output: 29.000316003  
Correct output: 33.520660154   | Program output: 38.520660154  
Correct output: 42.238861085   | Program output: 16.2345609041 
Correct output: -49.0227893765 | Program output: -35.0227893765
Correct output: 103.4057483059 | Program output: 103.4057483059
Correct output: -106.1378273779 | Program output: -115.1421275589
Correct output: 37.9625599991  | Program output: 67.9625599991 
Correct output: 71.9208193203  | Program output: 74.9208193203 
Correct output: 173.5348464317 | Program output: 145.5348464317
Correct output: -77.0615185935 | Program output: -76.0658187744
Correct output: -20.7643622555 | Program output: -20.7643622555
Correct output: 1.9827630815   | Program output: -31.0172369185
Correct output: -39.1198682611 | Program output: -7.124168442  
Correct output: 1.1392376036   | Program output: 11.1392376036 
Correct output: 129.1930977679 | Program output: 103.1930977679
Correct output: 26.7496211861  | Program output: 57.7496211861 
Correct output: -11.2984801384 | Program output: -11.2984801384
Correct output: -136.1442960385 | Program output: -138.1485962195
Correct output: 143.0911996605 | Program output: 142.0911996605
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_mod} {:instruction float_pop} {:instruction integer_max} {:instruction float_sub} {:instruction integer_max} {:instruction in2} {:instruction float_pop} {:instruction integer_mod} {:instruction float_flush} {:instruction float_pop} {:instruction integer_max} {:instruction integer_flush} {:instruction in1} {:instruction in1} {:instruction float_stackdepth} {:instruction in2} {:instruction integer_add} {:instruction integer_add} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_add} {:instruction float_inc} {:instruction integer_max} {:instruction float_inc} {:instruction integer_add} {:instruction float_inc} {:instruction integer_add} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_add} {:instruction float_inc} {:instruction integer_add} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_add} {:instruction float_inc} {:instruction float_inc} {:instruction integer_sub} {:instruction float_inc} {:instruction float_inc} {:instruction integer_add} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_add} {:instruction float_inc} {:instruction float_inc} {:instruction integer_max} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_dup_times} {:instruction float_rot} {:instruction float_stackdepth} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_min} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_add} {:instruction float_inc} {:instruction float_inc} {:instruction integer_max} {:instruction float_inc} {:instruction float_dup} {:instruction float_inc} {:instruction 25} {:instruction float_stackdepth} {:instruction float_inc} {:instruction float_dup_times} {:instruction float_yank} {:instruction float_inc} {:instruction integer_add} {:instruction integer_yankdup} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_add} {:instruction integer_yankdup} {:instruction float_inc} {:instruction integer_max} {:instruction float_dup_times} {:instruction float_max} {:instruction float_dup_times} {:instruction float_stackdepth} {:instruction float_inc} {:instruction float_inc} {:instruction float_dup_times} {:instruction float_dup_items} {:instruction integer_add} {:instruction 25} {:instruction in2} {:instruction integer_add} {:instruction integer_yank} {:instruction float_dup_times} {:instruction integer_swap} {:instruction in1} {:instruction 78.00430018095415} {:instruction float_rot} {:instruction float_dup_times} {:instruction float_rot} {:instruction integer_yankdup} {:instruction integer_add} {:instruction float_dec} {:instruction float_inc} {:instruction float_sub} {:instruction float_rot} {:instruction integer_shove} {:instruction float_rot} {:instruction float_sub} {:instruction float_rot} {:instruction integer_sub} {:instruction float_inc} {:instruction integer_swap} {:instruction integer_min} {:instruction print_float} {:instruction integer_dec} {:instruction integer_stackdepth} {:instruction float_yank} {:instruction integer_flush} {:instruction float_mult} {:instruction integer_shove} {:instruction float_dup_times} {:instruction float_pop} {:instruction float_pop})
Best program: (float_mod float_pop integer_max float_sub integer_max in2 float_pop integer_mod float_flush float_pop integer_max integer_flush in1 in1 float_stackdepth in2 integer_add integer_add float_inc float_inc float_inc float_inc integer_add float_inc integer_max float_inc integer_add float_inc integer_add float_inc float_inc float_inc float_inc integer_add float_inc integer_add float_inc float_inc float_inc float_inc integer_add float_inc float_inc integer_sub float_inc float_inc integer_add float_inc float_inc float_inc float_inc integer_add float_inc float_inc integer_max float_inc float_inc float_inc float_inc float_dup_times float_rot float_stackdepth float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc integer_min float_inc float_inc float_inc float_inc float_inc integer_add float_inc float_inc integer_max float_inc float_dup float_inc 25 float_stackdepth float_inc float_dup_times float_yank float_inc integer_add integer_yankdup float_inc float_inc float_inc float_inc integer_add integer_yankdup float_inc integer_max float_dup_times float_max float_dup_times float_stackdepth float_inc float_inc float_dup_times float_dup_items integer_add 25 in2 integer_add integer_yank float_dup_times integer_swap in1 78.00430018095415 float_rot float_dup_times float_rot integer_yankdup integer_add float_dec float_inc float_sub float_rot integer_shove float_rot float_sub float_rot integer_sub float_inc integer_swap integer_min print_float integer_dec integer_stackdepth float_yank integer_flush float_mult integer_shove float_dup_times float_pop float_pop)
Errors: [23.9957 8 27.0 2 9.9957 7 44.0 2 19.0 2 6.9957 9 27.0043 7 5.0 1 26.0043 8 14.0 2 0.0 0 9.0043 8 30.0 1 3.0 1 28.0 2 0.9957 7 0.0 0 33.0 9 31.9957 9 10.0 1 26.0 2 31.0 2 0.0 0 2.0043 6 1.0 1]
Total: 505.9957
Mean: 10.119914
Genome size: 143
Size: 144
Percent parens: 0.007
--- Population Statistics ---
Average total errors in population: 2886.4606069
Median total errors in population: 1023.5
Error averages by case: (127.90806709999998 9.854 107.62532740000003 3.821 108.7301864999998 7.022 131.33098710000016 7.683 105.35168470000004 3.698 135.3470542999999 8.377 107.59917200000027 6.534 89.09333860000011 3.687 106.63324290000023 7.38 106.13216370000013 3.938 95.56396050000008 2.555 123.26051749999998 8.143 105.85556470000004 3.584 93.6657807 3.037 122.66867219999986 3.82 107.44169479999964 8.628 90.1659555 4.368 120.13063320000012 10.025 129.49648950000002 10.714 92.48108660000003 3.773 116.27562070000012 4.026 102.57782100000006 3.625 93.03838120000009 3.204 127.95355250000024 6.785 98.50565199999996 3.347)
Error minima by case: (2.281 7 0.2433 1 1.0101 1 7.2368 1 3.5725 1 0.894 1 0.0043 1 0.0 0 0.033 2 0.0 0 0.0 0 0.0043 1 0.0 0 0.0 0 15.0 1 0.0043 2 0.0 0 0.0172 8 4.5712 8 0.1392 1 8.1888 1 0.0 0 0.0 0 0.0043 1 0.0 0)
Average genome size in population (length): 135.898
Average program size in population (points): 136.898
Average percent parens in population: 0.007
Minimum age in population: 182.3472849531052
Maximum age in population: 186.8965968563396
Average age in population: 184.992721982585
Median age in population: 185.0252253973446
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 5
Genome diversity (% unique Plush genomes):	 0.948
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 5
Syntactic diversity (% unique Push programs):	 0.948
Total error diversity:				 0.555
Error (vector) diversity:			 0.614
Behavioral diversity:				 0.615
--- Run Statistics ---
Number of program evaluations used so far: 135000
Number of point (instruction) evaluations so far: 328673126
--- Timings ---
Current time: 1529616507409 milliseconds
Total Time:         571.6 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       181.8 seconds, 31.8%
Fitness Testing:    310.1 seconds, 54.2%
Report:              79.6 seconds, 13.9%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 134
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 135
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 135
;;******************************
;; -*- Number IO problem report - generation 135
Test total error for best: 26554.879599999993
Test mean error for best: 13.27744
;;------------------------------
Outputs of best individual on training cases:
Correct output: -74.6179542037 | Program output: -50.6222543847
Correct output: 78.7609586813  | Program output: 51.7609586813 
Correct output: 3.0100598709   | Program output: 13.0057596899 
Correct output: -99.2368061293 | Program output: -55.2368061293
Correct output: 88.6808415603  | Program output: 69.6808415603 
Correct output: -151.1060419578 | Program output: -144.1103421388
Correct output: 56.004616184   | Program output: 29.000316003  
Correct output: 33.520660154   | Program output: 38.520660154  
Correct output: 42.238861085   | Program output: 16.2345609041 
Correct output: -49.0227893765 | Program output: -35.0227893765
Correct output: 103.4057483059 | Program output: 103.4057483059
Correct output: -106.1378273779 | Program output: -115.1421275589
Correct output: 37.9625599991  | Program output: 67.9625599991 
Correct output: 71.9208193203  | Program output: 74.9208193203 
Correct output: 173.5348464317 | Program output: 145.5348464317
Correct output: -77.0615185935 | Program output: -76.0658187744
Correct output: -20.7643622555 | Program output: -20.7643622555
Correct output: 1.9827630815   | Program output: -31.0172369185
Correct output: -39.1198682611 | Program output: -7.124168442  
Correct output: 1.1392376036   | Program output: 11.1392376036 
Correct output: 129.1930977679 | Program output: 103.1930977679
Correct output: 26.7496211861  | Program output: 57.7496211861 
Correct output: -11.2984801384 | Program output: -11.2984801384
Correct output: -136.1442960385 | Program output: -138.1485962195
Correct output: 143.0911996605 | Program output: 142.0911996605
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_mod} {:instruction float_pop} {:instruction integer_max} {:instruction float_sub} {:instruction integer_max} {:instruction in2} {:instruction float_pop} {:instruction integer_mod} {:instruction float_flush} {:instruction float_pop} {:instruction integer_max} {:instruction integer_flush} {:instruction in1} {:instruction in1} {:instruction float_stackdepth} {:instruction in2} {:instruction integer_add} {:instruction integer_add} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_add} {:instruction float_inc} {:instruction integer_max} {:instruction float_inc} {:instruction integer_add} {:instruction float_inc} {:instruction integer_add} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_add} {:instruction float_inc} {:instruction integer_add} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_add} {:instruction float_inc} {:instruction float_inc} {:instruction integer_sub} {:instruction float_inc} {:instruction float_inc} {:instruction integer_add} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_add} {:instruction float_inc} {:instruction float_inc} {:instruction integer_max} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_dup_times} {:instruction float_rot} {:instruction float_stackdepth} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_min} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_add} {:instruction float_inc} {:instruction float_inc} {:instruction integer_max} {:instruction float_inc} {:instruction float_dup} {:instruction float_inc} {:instruction 25} {:instruction float_stackdepth} {:instruction float_inc} {:instruction float_dup_times} {:instruction float_yank} {:instruction float_inc} {:instruction integer_add} {:instruction integer_yankdup} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_add} {:instruction integer_yankdup} {:instruction float_inc} {:instruction integer_max} {:instruction float_dup_times} {:instruction float_max} {:instruction float_dup_times} {:instruction float_stackdepth} {:instruction float_inc} {:instruction float_inc} {:instruction float_dup_times} {:instruction float_dup_items} {:instruction integer_add} {:instruction 25} {:instruction in2} {:instruction integer_add} {:instruction integer_yank} {:instruction float_dup_times} {:instruction integer_swap} {:instruction in1} {:instruction 78.00430018095415} {:instruction float_rot} {:instruction float_dup_times} {:instruction float_rot} {:instruction integer_yankdup} {:instruction integer_add} {:instruction float_dec} {:instruction float_inc} {:instruction float_sub} {:instruction float_rot} {:instruction integer_shove} {:instruction float_rot} {:instruction float_sub} {:instruction float_rot} {:instruction integer_sub} {:instruction float_inc} {:instruction integer_swap} {:instruction integer_min} {:instruction print_float} {:instruction integer_dec} {:instruction integer_stackdepth} {:instruction float_yank} {:instruction integer_flush} {:instruction float_mult} {:instruction integer_shove} {:instruction float_dup_times} {:instruction float_pop} {:instruction float_pop})
Best program: (float_mod float_pop integer_max float_sub integer_max in2 float_pop integer_mod float_flush float_pop integer_max integer_flush in1 in1 float_stackdepth in2 integer_add integer_add float_inc float_inc float_inc float_inc integer_add float_inc integer_max float_inc integer_add float_inc integer_add float_inc float_inc float_inc float_inc integer_add float_inc integer_add float_inc float_inc float_inc float_inc integer_add float_inc float_inc integer_sub float_inc float_inc integer_add float_inc float_inc float_inc float_inc integer_add float_inc float_inc integer_max float_inc float_inc float_inc float_inc float_dup_times float_rot float_stackdepth float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc integer_min float_inc float_inc float_inc float_inc float_inc integer_add float_inc float_inc integer_max float_inc float_dup float_inc 25 float_stackdepth float_inc float_dup_times float_yank float_inc integer_add integer_yankdup float_inc float_inc float_inc float_inc integer_add integer_yankdup float_inc integer_max float_dup_times float_max float_dup_times float_stackdepth float_inc float_inc float_dup_times float_dup_items integer_add 25 in2 integer_add integer_yank float_dup_times integer_swap in1 78.00430018095415 float_rot float_dup_times float_rot integer_yankdup integer_add float_dec float_inc float_sub float_rot integer_shove float_rot float_sub float_rot integer_sub float_inc integer_swap integer_min print_float integer_dec integer_stackdepth float_yank integer_flush float_mult integer_shove float_dup_times float_pop float_pop)
Errors: [23.9957 8 27.0 2 9.9957 7 44.0 2 19.0 2 6.9957 9 27.0043 7 5.0 1 26.0043 8 14.0 2 0.0 0 9.0043 8 30.0 1 3.0 1 28.0 2 0.9957 7 0.0 0 33.0 9 31.9957 9 10.0 1 26.0 2 31.0 2 0.0 0 2.0043 6 1.0 1]
Total: 505.9957
Mean: 10.119914
Genome size: 143
Size: 144
Percent parens: 0.007
--- Population Statistics ---
Average total errors in population: 2893.2845498
Median total errors in population: 972.0
Error averages by case: (130.02156309999998 9.862 108.36786669999996 3.818 108.7298165999998 7.009 132.0072266000001 7.593 104.35991210000005 3.739 134.4759403999998 8.375 107.10513400000025 6.479 88.4986320000001 3.715 106.64968780000022 7.373 105.57250440000017 3.968 95.71528590000011 2.481 123.12951749999993 8.186 104.35755779999997 3.645 93.24495510000001 2.943 124.66998519999984 3.891 112.2618800999996 8.53 90.00533330000005 4.482 120.02779600000004 10.024 130.68999750000003 10.734 88.76568490000004 3.612 117.83682080000004 4.122 101.65430510000003 3.694 95.03465430000011 3.266 127.20980850000021 6.831 101.09868409999993 3.422)
Error minima by case: (0.6137 7 0.239 1 0.0043 1 4.0043 1 1.3192 1 0.0043 2 0.0043 1 0.0 0 0.0043 1 0.0 0 0.0 0 0.0043 1 0.087 1 0.0 0 14.0 1 0.0043 1 0.0 0 0.0172 7 5.7109 8 0.1392 1 1.8112 1 0.0 0 0.0 0 0.0043 1 0.0 0)
Average genome size in population (length): 136.224
Average program size in population (points): 137.224
Average percent parens in population: 0.007
Minimum age in population: 184.1592467337917
Maximum age in population: 188.3517400010378
Average age in population: 186.3393118906696
Median age in population: 186.3830829497436
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 6
Genome diversity (% unique Plush genomes):	 0.953
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 6
Syntactic diversity (% unique Push programs):	 0.953
Total error diversity:				 0.575
Error (vector) diversity:			 0.633
Behavioral diversity:				 0.634
--- Run Statistics ---
Number of program evaluations used so far: 136000
Number of point (instruction) evaluations so far: 332078751
--- Timings ---
Current time: 1529616512646 milliseconds
Total Time:         576.8 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       183.1 seconds, 31.8%
Fitness Testing:    313.1 seconds, 54.3%
Report:              80.4 seconds, 13.9%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 135
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 136
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 136
;;******************************
;; -*- Number IO problem report - generation 136
Test total error for best: 26554.879599999993
Test mean error for best: 13.27744
;;------------------------------
Outputs of best individual on training cases:
Correct output: -74.6179542037 | Program output: -50.6222543847
Correct output: 78.7609586813  | Program output: 51.7609586813 
Correct output: 3.0100598709   | Program output: 13.0057596899 
Correct output: -99.2368061293 | Program output: -55.2368061293
Correct output: 88.6808415603  | Program output: 69.6808415603 
Correct output: -151.1060419578 | Program output: -144.1103421388
Correct output: 56.004616184   | Program output: 29.000316003  
Correct output: 33.520660154   | Program output: 38.520660154  
Correct output: 42.238861085   | Program output: 16.2345609041 
Correct output: -49.0227893765 | Program output: -35.0227893765
Correct output: 103.4057483059 | Program output: 103.4057483059
Correct output: -106.1378273779 | Program output: -115.1421275589
Correct output: 37.9625599991  | Program output: 67.9625599991 
Correct output: 71.9208193203  | Program output: 74.9208193203 
Correct output: 173.5348464317 | Program output: 145.5348464317
Correct output: -77.0615185935 | Program output: -76.0658187744
Correct output: -20.7643622555 | Program output: -20.7643622555
Correct output: 1.9827630815   | Program output: -31.0172369185
Correct output: -39.1198682611 | Program output: -7.124168442  
Correct output: 1.1392376036   | Program output: 11.1392376036 
Correct output: 129.1930977679 | Program output: 103.1930977679
Correct output: 26.7496211861  | Program output: 57.7496211861 
Correct output: -11.2984801384 | Program output: -11.2984801384
Correct output: -136.1442960385 | Program output: -138.1485962195
Correct output: 143.0911996605 | Program output: 142.0911996605
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_mod} {:instruction float_pop} {:instruction integer_max} {:instruction float_sub} {:instruction integer_max} {:instruction in2} {:instruction float_pop} {:instruction integer_mod} {:instruction float_flush} {:instruction float_pop} {:instruction integer_max} {:instruction integer_flush} {:instruction in1} {:instruction in1} {:instruction float_stackdepth} {:instruction in2} {:instruction integer_add} {:instruction integer_add} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_add} {:instruction float_inc} {:instruction integer_max} {:instruction float_inc} {:instruction integer_add} {:instruction float_inc} {:instruction integer_add} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_add} {:instruction float_inc} {:instruction integer_add} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_add} {:instruction float_inc} {:instruction float_inc} {:instruction integer_sub} {:instruction float_inc} {:instruction float_inc} {:instruction integer_add} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_add} {:instruction float_inc} {:instruction float_inc} {:instruction integer_max} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_dup_times} {:instruction float_rot} {:instruction float_stackdepth} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_min} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_add} {:instruction float_inc} {:instruction float_inc} {:instruction integer_max} {:instruction float_inc} {:instruction float_dup} {:instruction float_inc} {:instruction 25} {:instruction float_stackdepth} {:instruction float_inc} {:instruction float_dup_times} {:instruction float_yank} {:instruction float_inc} {:instruction integer_add} {:instruction integer_yankdup} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_add} {:instruction integer_yankdup} {:instruction float_inc} {:instruction integer_max} {:instruction float_dup_times} {:instruction float_max} {:instruction float_dup_times} {:instruction float_stackdepth} {:instruction float_inc} {:instruction float_inc} {:instruction float_dup_times} {:instruction float_dup_items} {:instruction integer_add} {:instruction 25} {:instruction in2} {:instruction integer_add} {:instruction integer_yank} {:instruction float_dup_times} {:instruction integer_swap} {:instruction in1} {:instruction 78.00430018095415} {:instruction float_rot} {:instruction float_dup_times} {:instruction float_rot} {:instruction integer_yankdup} {:instruction integer_add} {:instruction float_dec} {:instruction float_inc} {:instruction float_sub} {:instruction float_rot} {:instruction integer_shove} {:instruction float_rot} {:instruction float_sub} {:instruction float_rot} {:instruction integer_sub} {:instruction float_inc} {:instruction integer_swap} {:instruction integer_min} {:instruction print_float} {:instruction integer_dec} {:instruction integer_stackdepth} {:instruction float_yank} {:instruction integer_flush} {:instruction float_mult} {:instruction integer_shove} {:instruction float_dup_times} {:instruction float_pop} {:instruction float_pop})
Best program: (float_mod float_pop integer_max float_sub integer_max in2 float_pop integer_mod float_flush float_pop integer_max integer_flush in1 in1 float_stackdepth in2 integer_add integer_add float_inc float_inc float_inc float_inc integer_add float_inc integer_max float_inc integer_add float_inc integer_add float_inc float_inc float_inc float_inc integer_add float_inc integer_add float_inc float_inc float_inc float_inc integer_add float_inc float_inc integer_sub float_inc float_inc integer_add float_inc float_inc float_inc float_inc integer_add float_inc float_inc integer_max float_inc float_inc float_inc float_inc float_dup_times float_rot float_stackdepth float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc integer_min float_inc float_inc float_inc float_inc float_inc integer_add float_inc float_inc integer_max float_inc float_dup float_inc 25 float_stackdepth float_inc float_dup_times float_yank float_inc integer_add integer_yankdup float_inc float_inc float_inc float_inc integer_add integer_yankdup float_inc integer_max float_dup_times float_max float_dup_times float_stackdepth float_inc float_inc float_dup_times float_dup_items integer_add 25 in2 integer_add integer_yank float_dup_times integer_swap in1 78.00430018095415 float_rot float_dup_times float_rot integer_yankdup integer_add float_dec float_inc float_sub float_rot integer_shove float_rot float_sub float_rot integer_sub float_inc integer_swap integer_min print_float integer_dec integer_stackdepth float_yank integer_flush float_mult integer_shove float_dup_times float_pop float_pop)
Errors: [23.9957 8 27.0 2 9.9957 7 44.0 2 19.0 2 6.9957 9 27.0043 7 5.0 1 26.0043 8 14.0 2 0.0 0 9.0043 8 30.0 1 3.0 1 28.0 2 0.9957 7 0.0 0 33.0 9 31.9957 9 10.0 1 26.0 2 31.0 2 0.0 0 2.0043 6 1.0 1]
Total: 505.9957
Mean: 10.119914
Genome size: 143
Size: 144
Percent parens: 0.007
--- Population Statistics ---
Average total errors in population: 3108.8234034
Median total errors in population: 955.5
Error averages by case: (135.38578159999994 9.853 119.65664740000005 4.028 114.28120079999985 7.024 135.86810810000023 7.452 116.12995240000002 3.865 137.89639529999982 8.4 114.44325700000027 6.562 98.02406830000005 3.807 113.5067694000002 7.383 118.27555970000014 4.103 106.56190210000013 2.659 127.5721137 8.125 116.00275930000006 3.8 104.08117819999997 3.127 135.72102569999979 4.042 117.36579769999963 8.509 97.73545400000002 4.447 130.8157295000001 10.062 137.01134539999998 10.745 96.80512689999999 3.731 128.4177575000001 4.224 114.58717020000003 3.834 105.62378640000001 3.457 130.9761563000002 6.818 112.46336049999991 3.558)
Error minima by case: (0.3109 7 0.2433 1 0.0043 1 2.0043 1 1.0 1 0.0043 1 1.0043 1 0.0 0 0.0043 1 0.0 0 0.0 0 0.0043 1 0.2651 1 0.0 0 10.0 1 0.0043 1 0.0 0 0.0172 7 1.0594 8 0.1392 1 0.1931 1 0.0 0 0.0 0 0.0043 1 0.0 0)
Average genome size in population (length): 136.099
Average program size in population (points): 137.099
Average percent parens in population: 0.007
Minimum age in population: 185.1963749643391
Maximum age in population: 189.6930731427463
Average age in population: 187.6591071721355
Median age in population: 187.7173682768657
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 6
Genome diversity (% unique Plush genomes):	 0.941
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 6
Syntactic diversity (% unique Push programs):	 0.941
Total error diversity:				 0.569
Error (vector) diversity:			 0.62
Behavioral diversity:				 0.621
--- Run Statistics ---
Number of program evaluations used so far: 137000
Number of point (instruction) evaluations so far: 335481226
--- Timings ---
Current time: 1529616517871 milliseconds
Total Time:         582.0 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       184.5 seconds, 31.7%
Fitness Testing:    316.1 seconds, 54.3%
Report:              81.2 seconds, 14.0%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 136
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 137
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 137
;;******************************
;; -*- Number IO problem report - generation 137
Test total error for best: 26554.879599999993
Test mean error for best: 13.27744
;;------------------------------
Outputs of best individual on training cases:
Correct output: -74.6179542037 | Program output: -50.6222543847
Correct output: 78.7609586813  | Program output: 51.7609586813 
Correct output: 3.0100598709   | Program output: 13.0057596899 
Correct output: -99.2368061293 | Program output: -55.2368061293
Correct output: 88.6808415603  | Program output: 69.6808415603 
Correct output: -151.1060419578 | Program output: -144.1103421388
Correct output: 56.004616184   | Program output: 29.000316003  
Correct output: 33.520660154   | Program output: 38.520660154  
Correct output: 42.238861085   | Program output: 16.2345609041 
Correct output: -49.0227893765 | Program output: -35.0227893765
Correct output: 103.4057483059 | Program output: 103.4057483059
Correct output: -106.1378273779 | Program output: -115.1421275589
Correct output: 37.9625599991  | Program output: 67.9625599991 
Correct output: 71.9208193203  | Program output: 74.9208193203 
Correct output: 173.5348464317 | Program output: 145.5348464317
Correct output: -77.0615185935 | Program output: -76.0658187744
Correct output: -20.7643622555 | Program output: -20.7643622555
Correct output: 1.9827630815   | Program output: -31.0172369185
Correct output: -39.1198682611 | Program output: -7.124168442  
Correct output: 1.1392376036   | Program output: 11.1392376036 
Correct output: 129.1930977679 | Program output: 103.1930977679
Correct output: 26.7496211861  | Program output: 57.7496211861 
Correct output: -11.2984801384 | Program output: -11.2984801384
Correct output: -136.1442960385 | Program output: -138.1485962195
Correct output: 143.0911996605 | Program output: 142.0911996605
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_mod} {:instruction float_pop} {:instruction integer_max} {:instruction float_sub} {:instruction integer_max} {:instruction in2} {:instruction float_pop} {:instruction integer_mod} {:instruction float_flush} {:instruction float_pop} {:instruction integer_max} {:instruction integer_flush} {:instruction in1} {:instruction in1} {:instruction float_stackdepth} {:instruction in2} {:instruction integer_add} {:instruction integer_add} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_add} {:instruction float_inc} {:instruction integer_max} {:instruction float_inc} {:instruction integer_add} {:instruction float_inc} {:instruction integer_add} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_add} {:instruction float_inc} {:instruction integer_add} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_add} {:instruction float_inc} {:instruction float_inc} {:instruction integer_sub} {:instruction float_inc} {:instruction float_inc} {:instruction integer_add} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_add} {:instruction float_inc} {:instruction float_inc} {:instruction integer_max} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_dup_times} {:instruction float_rot} {:instruction float_stackdepth} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_min} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_add} {:instruction float_inc} {:instruction float_inc} {:instruction integer_max} {:instruction float_inc} {:instruction float_dup} {:instruction float_inc} {:instruction 25} {:instruction float_stackdepth} {:instruction float_inc} {:instruction float_dup_times} {:instruction float_yank} {:instruction float_inc} {:instruction integer_add} {:instruction integer_yankdup} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_add} {:instruction integer_yankdup} {:instruction float_inc} {:instruction integer_max} {:instruction float_dup_times} {:instruction float_max} {:instruction float_dup_times} {:instruction float_stackdepth} {:instruction float_inc} {:instruction float_inc} {:instruction float_dup_times} {:instruction float_dup_items} {:instruction integer_add} {:instruction 25} {:instruction in2} {:instruction integer_add} {:instruction integer_yank} {:instruction float_dup_times} {:instruction integer_swap} {:instruction in1} {:instruction 78.00430018095415} {:instruction float_rot} {:instruction float_dup_times} {:instruction float_rot} {:instruction integer_yankdup} {:instruction integer_add} {:instruction float_dec} {:instruction float_inc} {:instruction float_sub} {:instruction float_rot} {:instruction integer_shove} {:instruction float_rot} {:instruction float_sub} {:instruction float_rot} {:instruction integer_sub} {:instruction float_inc} {:instruction integer_swap} {:instruction integer_min} {:instruction print_float} {:instruction integer_dec} {:instruction integer_stackdepth} {:instruction float_yank} {:instruction integer_flush} {:instruction float_mult} {:instruction integer_shove} {:instruction float_dup_times} {:instruction float_pop} {:instruction float_pop})
Best program: (float_mod float_pop integer_max float_sub integer_max in2 float_pop integer_mod float_flush float_pop integer_max integer_flush in1 in1 float_stackdepth in2 integer_add integer_add float_inc float_inc float_inc float_inc integer_add float_inc integer_max float_inc integer_add float_inc integer_add float_inc float_inc float_inc float_inc integer_add float_inc integer_add float_inc float_inc float_inc float_inc integer_add float_inc float_inc integer_sub float_inc float_inc integer_add float_inc float_inc float_inc float_inc integer_add float_inc float_inc integer_max float_inc float_inc float_inc float_inc float_dup_times float_rot float_stackdepth float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc integer_min float_inc float_inc float_inc float_inc float_inc integer_add float_inc float_inc integer_max float_inc float_dup float_inc 25 float_stackdepth float_inc float_dup_times float_yank float_inc integer_add integer_yankdup float_inc float_inc float_inc float_inc integer_add integer_yankdup float_inc integer_max float_dup_times float_max float_dup_times float_stackdepth float_inc float_inc float_dup_times float_dup_items integer_add 25 in2 integer_add integer_yank float_dup_times integer_swap in1 78.00430018095415 float_rot float_dup_times float_rot integer_yankdup integer_add float_dec float_inc float_sub float_rot integer_shove float_rot float_sub float_rot integer_sub float_inc integer_swap integer_min print_float integer_dec integer_stackdepth float_yank integer_flush float_mult integer_shove float_dup_times float_pop float_pop)
Errors: [23.9957 8 27.0 2 9.9957 7 44.0 2 19.0 2 6.9957 9 27.0043 7 5.0 1 26.0043 8 14.0 2 0.0 0 9.0043 8 30.0 1 3.0 1 28.0 2 0.9957 7 0.0 0 33.0 9 31.9957 9 10.0 1 26.0 2 31.0 2 0.0 0 2.0043 6 1.0 1]
Total: 505.9957
Mean: 10.119914
Genome size: 143
Size: 144
Percent parens: 0.007
--- Population Statistics ---
Average total errors in population: 2986.791241
Median total errors in population: 898.1110500000001
Error averages by case: (131.76045359999992 9.912 114.8971667 3.941 110.30297829999984 6.898 133.64669150000017 7.183 111.3342301000001 3.723 135.45951479999982 8.359 109.21752890000025 6.518 94.38325800000011 3.773 108.69869720000024 7.3 112.2010811000002 4.018 97.5504807000001 2.614 124.20597849999999 8.059 110.86519180000003 3.661 94.92061719999997 3.109 129.28938809999983 3.953 111.53160879999965 8.516 94.86606240000002 4.377 125.27118580000011 10.082 133.41660629999998 10.8 95.68013639999994 3.566 122.96793750000012 4.146 108.74344840000006 3.698 100.26608850000012 3.295 128.2068308000002 6.789 105.35307959999987 3.465)
Error minima by case: (0.9161 7 0.2433 1 1.0043 1 9.0043 1 1.0 1 0.0043 1 2.0043 1 0.0 0 1.0043 1 0.0 0 0.0 0 0.0043 1 0.8454 1 0.0 0 10.0 1 0.0043 1 0.0 0 0.0172 8 12.8844 8 0.1392 1 0.8069 1 0.0 0 0.0 0 0.0043 2 0.0 0)
Average genome size in population (length): 136.281
Average program size in population (points): 137.281
Average percent parens in population: 0.007
Minimum age in population: 186.6957944728724
Maximum age in population: 190.96018862559
Average age in population: 188.9696108356001
Median age in population: 189.0046135480832
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 5
Genome diversity (% unique Plush genomes):	 0.945
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 5
Syntactic diversity (% unique Push programs):	 0.945
Total error diversity:				 0.552
Error (vector) diversity:			 0.606
Behavioral diversity:				 0.607
--- Run Statistics ---
Number of program evaluations used so far: 138000
Number of point (instruction) evaluations so far: 338888276
--- Timings ---
Current time: 1529616523102 milliseconds
Total Time:         587.3 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       185.9 seconds, 31.7%
Fitness Testing:    319.2 seconds, 54.4%
Report:              82.0 seconds, 14.0%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 137
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 138
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 138
;;******************************
;; -*- Number IO problem report - generation 138
Test total error for best: 26554.879599999993
Test mean error for best: 13.27744
;;------------------------------
Outputs of best individual on training cases:
Correct output: -74.6179542037 | Program output: -50.6222543847
Correct output: 78.7609586813  | Program output: 51.7609586813 
Correct output: 3.0100598709   | Program output: 13.0057596899 
Correct output: -99.2368061293 | Program output: -55.2368061293
Correct output: 88.6808415603  | Program output: 69.6808415603 
Correct output: -151.1060419578 | Program output: -144.1103421388
Correct output: 56.004616184   | Program output: 29.000316003  
Correct output: 33.520660154   | Program output: 38.520660154  
Correct output: 42.238861085   | Program output: 16.2345609041 
Correct output: -49.0227893765 | Program output: -35.0227893765
Correct output: 103.4057483059 | Program output: 103.4057483059
Correct output: -106.1378273779 | Program output: -115.1421275589
Correct output: 37.9625599991  | Program output: 67.9625599991 
Correct output: 71.9208193203  | Program output: 74.9208193203 
Correct output: 173.5348464317 | Program output: 145.5348464317
Correct output: -77.0615185935 | Program output: -76.0658187744
Correct output: -20.7643622555 | Program output: -20.7643622555
Correct output: 1.9827630815   | Program output: -31.0172369185
Correct output: -39.1198682611 | Program output: -7.124168442  
Correct output: 1.1392376036   | Program output: 11.1392376036 
Correct output: 129.1930977679 | Program output: 103.1930977679
Correct output: 26.7496211861  | Program output: 57.7496211861 
Correct output: -11.2984801384 | Program output: -11.2984801384
Correct output: -136.1442960385 | Program output: -138.1485962195
Correct output: 143.0911996605 | Program output: 142.0911996605
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_mod} {:instruction float_pop} {:instruction float_mod} {:instruction float_pop} {:instruction integer_max} {:instruction integer_flush} {:instruction in1} {:instruction in1} {:instruction float_stackdepth} {:instruction in2} {:instruction integer_add} {:instruction integer_add} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_add} {:instruction float_inc} {:instruction integer_add} {:instruction float_inc} {:instruction integer_max} {:instruction float_inc} {:instruction integer_add} {:instruction float_inc} {:instruction integer_add} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_add} {:instruction float_inc} {:instruction integer_add} {:instruction integer_add} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_add} {:instruction float_inc} {:instruction float_inc} {:instruction integer_sub} {:instruction float_inc} {:instruction float_inc} {:instruction integer_add} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_add} {:instruction float_inc} {:instruction float_inc} {:instruction integer_max} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_dup_times} {:instruction float_rot} {:instruction float_stackdepth} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_min} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_add} {:instruction float_inc} {:instruction float_inc} {:instruction integer_max} {:instruction float_inc} {:instruction float_dup} {:instruction float_inc} {:instruction 25} {:instruction float_stackdepth} {:instruction float_inc} {:instruction float_dup_times} {:instruction float_yank} {:instruction float_inc} {:instruction integer_add} {:instruction integer_yankdup} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_add} {:instruction integer_yankdup} {:instruction float_inc} {:instruction integer_max} {:instruction float_dup_times} {:instruction float_max} {:instruction float_dup_times} {:instruction float_stackdepth} {:instruction float_inc} {:instruction float_inc} {:instruction float_dup_times} {:instruction float_dup_items} {:instruction integer_add} {:instruction 25} {:instruction in2} {:instruction integer_add} {:instruction integer_yank} {:instruction float_dup_times} {:instruction integer_swap} {:instruction in1} {:instruction 78.00430018095415} {:instruction float_rot} {:instruction float_dup_times} {:instruction float_rot} {:instruction integer_yankdup} {:instruction integer_add} {:instruction float_dec} {:instruction float_inc} {:instruction float_sub} {:instruction float_rot} {:instruction integer_shove} {:instruction float_rot} {:instruction float_sub} {:instruction float_rot} {:instruction integer_sub} {:instruction float_inc} {:instruction integer_swap} {:instruction integer_min} {:instruction print_float} {:instruction integer_dec} {:instruction integer_stackdepth} {:instruction float_yank})
Best program: (float_mod float_pop float_mod float_pop integer_max integer_flush in1 in1 float_stackdepth in2 integer_add integer_add float_inc float_inc float_inc integer_add float_inc integer_add float_inc integer_max float_inc integer_add float_inc integer_add float_inc float_inc float_inc float_inc integer_add float_inc integer_add integer_add float_inc float_inc float_inc float_inc integer_add float_inc float_inc integer_sub float_inc float_inc integer_add float_inc float_inc float_inc float_inc integer_add float_inc float_inc integer_max float_inc float_inc float_inc float_inc float_dup_times float_rot float_stackdepth float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc integer_min float_inc float_inc float_inc float_inc float_inc integer_add float_inc float_inc integer_max float_inc float_dup float_inc 25 float_stackdepth float_inc float_dup_times float_yank float_inc integer_add integer_yankdup float_inc float_inc float_inc float_inc integer_add integer_yankdup float_inc integer_max float_dup_times float_max float_dup_times float_stackdepth float_inc float_inc float_dup_times float_dup_items integer_add 25 in2 integer_add integer_yank float_dup_times integer_swap in1 78.00430018095415 float_rot float_dup_times float_rot integer_yankdup integer_add float_dec float_inc float_sub float_rot integer_shove float_rot float_sub float_rot integer_sub float_inc integer_swap integer_min print_float integer_dec integer_stackdepth float_yank)
Errors: [23.9957 8 27.0 2 9.9957 7 44.0 2 19.0 2 6.9957 9 27.0043 7 5.0 1 26.0043 8 14.0 2 0.0 0 9.0043 8 30.0 1 3.0 1 28.0 2 0.9957 7 0.0 0 33.0 9 31.9957 9 10.0 1 26.0 2 31.0 2 0.0 0 2.0043 6 1.0 1]
Total: 505.9957
Mean: 10.119914
Genome size: 133
Size: 134
Percent parens: 0.007
--- Population Statistics ---
Average total errors in population: 3066.8139444000008
Median total errors in population: 801.0258000000001
Error averages by case: (133.83978939999994 9.892 116.79180550000004 3.939 113.98122709999981 6.942 135.38199430000014 6.893 111.90071110000002 3.791 136.09316729999983 8.354 112.94830070000025 6.507 97.41043950000001 3.806 112.31899570000026 7.326 114.76738840000012 4.017 105.46875830000009 2.611 126.21992510000004 8.09 112.01101810000006 3.696 103.46168370000001 3.051 133.5816055999999 3.966 115.35305759999972 8.498 100.97637670000005 4.565 128.91512510000004 10.09 135.90323479999998 10.722 97.03463500000001 3.614 127.2461817000001 4.144 109.1015644 3.722 104.6699651000001 3.343 129.47034520000025 6.796 110.11664899999994 3.475)
Error minima by case: (0.2326 7 0.2433 1 0.0043 1 3.2325 1 1.9676 1 0.0043 2 1.2657 1 0.0 0 0.2657 1 0.0 0 0.0 0 0.0043 1 0.0 0 0.0 0 13.0 1 0.0043 1 0.0 0 0.0172 7 5.7603 8 0.1392 1 11.0 1 0.0365 1 0.0 0 0.0043 1 0.0 0)
Average genome size in population (length): 136.27
Average program size in population (points): 137.27
Average percent parens in population: 0.007
Minimum age in population: 187.8772090674534
Maximum age in population: 192.2071072753351
Average age in population: 190.3080709085277
Median age in population: 190.3186183140323
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 5
Genome diversity (% unique Plush genomes):	 0.952
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 5
Syntactic diversity (% unique Push programs):	 0.952
Total error diversity:				 0.559
Error (vector) diversity:			 0.616
Behavioral diversity:				 0.618
--- Run Statistics ---
Number of program evaluations used so far: 139000
Number of point (instruction) evaluations so far: 342295101
--- Timings ---
Current time: 1529616528424 milliseconds
Total Time:         592.5 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       187.3 seconds, 31.6%
Fitness Testing:    322.3 seconds, 54.4%
Report:              82.8 seconds, 14.0%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 138
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 139
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 139
;;******************************
;; -*- Number IO problem report - generation 139
Test total error for best: 26554.879599999993
Test mean error for best: 13.27744
;;------------------------------
Outputs of best individual on training cases:
Correct output: -74.6179542037 | Program output: -50.6222543847
Correct output: 78.7609586813  | Program output: 51.7609586813 
Correct output: 3.0100598709   | Program output: 13.0057596899 
Correct output: -99.2368061293 | Program output: -55.2368061293
Correct output: 88.6808415603  | Program output: 69.6808415603 
Correct output: -151.1060419578 | Program output: -144.1103421388
Correct output: 56.004616184   | Program output: 29.000316003  
Correct output: 33.520660154   | Program output: 38.520660154  
Correct output: 42.238861085   | Program output: 16.2345609041 
Correct output: -49.0227893765 | Program output: -35.0227893765
Correct output: 103.4057483059 | Program output: 103.4057483059
Correct output: -106.1378273779 | Program output: -115.1421275589
Correct output: 37.9625599991  | Program output: 67.9625599991 
Correct output: 71.9208193203  | Program output: 74.9208193203 
Correct output: 173.5348464317 | Program output: 145.5348464317
Correct output: -77.0615185935 | Program output: -76.0658187744
Correct output: -20.7643622555 | Program output: -20.7643622555
Correct output: 1.9827630815   | Program output: -31.0172369185
Correct output: -39.1198682611 | Program output: -7.124168442  
Correct output: 1.1392376036   | Program output: 11.1392376036 
Correct output: 129.1930977679 | Program output: 103.1930977679
Correct output: 26.7496211861  | Program output: 57.7496211861 
Correct output: -11.2984801384 | Program output: -11.2984801384
Correct output: -136.1442960385 | Program output: -138.1485962195
Correct output: 143.0911996605 | Program output: 142.0911996605
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_mod} {:instruction float_pop} {:instruction integer_max} {:instruction integer_flush} {:instruction in1} {:instruction in1} {:instruction float_stackdepth} {:instruction in2} {:instruction integer_add} {:instruction integer_add} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_add} {:instruction float_inc} {:instruction integer_add} {:instruction float_inc} {:instruction integer_max} {:instruction float_inc} {:instruction float_rot} {:instruction float_inc} {:instruction integer_add} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_add} {:instruction float_inc} {:instruction integer_add} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_yankdup} {:instruction float_inc} {:instruction float_inc} {:instruction integer_add} {:instruction float_inc} {:instruction float_inc} {:instruction integer_add} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_dup_times} {:instruction float_inc} {:instruction integer_max} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_dup_times} {:instruction float_rot} {:instruction float_stackdepth} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_add} {:instruction float_inc} {:instruction float_inc} {:instruction integer_max} {:instruction float_inc} {:instruction float_dup} {:instruction float_inc} {:instruction 25} {:instruction float_stackdepth} {:instruction float_inc} {:instruction float_dup_times} {:instruction float_yank} {:instruction float_inc} {:instruction integer_add} {:instruction integer_yankdup} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_max} {:instruction integer_max} {:instruction float_dup_times} {:instruction float_max} {:instruction float_dup_times} {:instruction float_stackdepth} {:instruction float_inc} {:instruction float_inc} {:instruction float_dup_times} {:instruction float_dup_items} {:instruction integer_add} {:instruction 25} {:instruction in2} {:instruction integer_add} {:instruction integer_yank} {:instruction float_dup_times} {:instruction integer_swap} {:instruction in1} {:instruction 78.00430018095415} {:instruction float_rot} {:instruction float_dup_times} {:instruction float_rot} {:instruction integer_yankdup} {:instruction integer_add} {:instruction float_dec} {:instruction float_inc} {:instruction float_sub} {:instruction float_rot} {:instruction integer_shove} {:instruction float_rot} {:instruction float_sub} {:instruction float_rot} {:instruction integer_sub} {:instruction float_inc} {:instruction integer_swap} {:instruction integer_min} {:instruction print_float} {:instruction integer_dec} {:instruction integer_stackdepth} {:instruction float_yank} {:instruction integer_flush} {:instruction float_mult} {:instruction integer_shove} {:instruction float_dup_times} {:instruction float_pop} {:instruction float_pop})
Best program: (float_mod float_pop integer_max integer_flush in1 in1 float_stackdepth in2 integer_add integer_add float_inc float_inc float_inc integer_add float_inc integer_add float_inc integer_max float_inc float_rot float_inc integer_add float_inc float_inc float_inc float_inc integer_add float_inc integer_add float_inc float_inc float_inc float_inc integer_yankdup float_inc float_inc integer_add float_inc float_inc integer_add float_inc float_inc float_inc float_inc float_inc integer_dup_times float_inc integer_max float_inc float_inc float_inc float_inc float_dup_times float_rot float_stackdepth float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc integer_add float_inc float_inc integer_max float_inc float_dup float_inc 25 float_stackdepth float_inc float_dup_times float_yank float_inc integer_add integer_yankdup float_inc float_inc float_inc float_inc float_inc integer_max integer_max float_dup_times float_max float_dup_times float_stackdepth float_inc float_inc float_dup_times float_dup_items integer_add 25 in2 integer_add integer_yank float_dup_times integer_swap in1 78.00430018095415 float_rot float_dup_times float_rot integer_yankdup integer_add float_dec float_inc float_sub float_rot integer_shove float_rot float_sub float_rot integer_sub float_inc integer_swap integer_min print_float integer_dec integer_stackdepth float_yank integer_flush float_mult integer_shove float_dup_times float_pop float_pop)
Errors: [23.9957 8 27.0 2 9.9957 7 44.0 2 19.0 2 6.9957 9 27.0043 7 5.0 1 26.0043 8 14.0 2 0.0 0 9.0043 8 30.0 1 3.0 1 28.0 2 0.9957 7 0.0 0 33.0 9 31.9957 9 10.0 1 26.0 2 31.0 2 0.0 0 2.0043 6 1.0 1]
Total: 505.9957
Mean: 10.119914
Genome size: 134
Size: 135
Percent parens: 0.007
--- Population Statistics ---
Average total errors in population: 2806.5170990000006
Median total errors in population: 975.0
Error averages by case: (122.27481269999994 9.923 107.64904000000003 3.735 100.75049529999983 6.78 120.49461940000003 6.018 104.53681110000005 3.519 122.74287739999986 8.12 100.14029200000026 6.347 88.44046590000004 3.662 98.77203430000023 7.126 109.09439860000013 3.804 94.78500800000008 2.346 112.45040190000002 7.819 105.08783360000004 3.434 92.24887250000002 2.871 125.03757719999989 3.678 105.20136999999966 8.395 90.97185309999999 4.229 123.04168970000005 10.083 122.81523300000003 10.769 87.22613479999995 3.156 120.05549940000013 3.864 101.65167340000004 3.453 97.57445270000001 3.13 115.79350790000021 6.576 101.68614509999995 3.157)
Error minima by case: (1.3863 7 0.2433 1 0.0043 1 9.0043 1 2.0 1 0.0043 1 0.9957 1 0.0 0 1.9957 1 0.0 0 0.0 0 0.0043 1 0.0 0 0.0 0 11.0 1 0.0043 1 0.0 0 0.0171 7 2.0339 8 0.1392 1 2.1931 1 0.2504 1 0.0 0 0.0043 1 0.0 0)
Average genome size in population (length): 137.238
Average program size in population (points): 138.238
Average percent parens in population: 0.007
Minimum age in population: 188.8772090674534
Maximum age in population: 193.4076192553432
Average age in population: 191.6184989064227
Median age in population: 191.6718887724733
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 9
Genome diversity (% unique Plush genomes):	 0.946
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 9
Syntactic diversity (% unique Push programs):	 0.946
Total error diversity:				 0.595
Error (vector) diversity:			 0.647
Behavioral diversity:				 0.649
--- Run Statistics ---
Number of program evaluations used so far: 140000
Number of point (instruction) evaluations so far: 345726076
--- Timings ---
Current time: 1529616533675 milliseconds
Total Time:         597.9 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       188.7 seconds, 31.6%
Fitness Testing:    325.4 seconds, 54.4%
Report:              83.6 seconds, 14.0%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 139
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 140
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 140
;;******************************
;; -*- Number IO problem report - generation 140
Test total error for best: 26509.913999999997
Test mean error for best: 13.25496
;;------------------------------
Outputs of best individual on training cases:
Correct output: -74.6179542037 | Program output: -50.6222543847
Correct output: 78.7609586813  | Program output: 51.7609586813 
Correct output: 3.0100598709   | Program output: 13.0057596899 
Correct output: -99.2368061293 | Program output: -55.2368061293
Correct output: 88.6808415603  | Program output: 69.6808415603 
Correct output: -151.1060419578 | Program output: -144.1103421388
Correct output: 56.004616184   | Program output: 29.000316003  
Correct output: 33.520660154   | Program output: 38.520660154  
Correct output: 42.238861085   | Program output: 16.2345609041 
Correct output: -49.0227893765 | Program output: -35.0227893765
Correct output: 103.4057483059 | Program output: 103.4057483059
Correct output: -106.1378273779 | Program output: -115.1421275589
Correct output: 37.9625599991  | Program output: 67.9625599991 
Correct output: 71.9208193203  | Program output: 74.9208193203 
Correct output: 173.5348464317 | Program output: 145.5348464317
Correct output: -77.0615185935 | Program output: -76.0658187744
Correct output: -20.7643622555 | Program output: -20.7643622555
Correct output: 1.9827630815   | Program output: -31.0172369185
Correct output: -39.1198682611 | Program output: -7.124168442  
Correct output: 1.1392376036   | Program output: 11.1392376036 
Correct output: 129.1930977679 | Program output: 103.1930977679
Correct output: 26.7496211861  | Program output: 57.7496211861 
Correct output: -11.2984801384 | Program output: -11.2984801384
Correct output: -136.1442960385 | Program output: -138.1485962195
Correct output: 143.0911996605 | Program output: 142.0911996605
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_mod} {:instruction float_pop} {:instruction integer_max} {:instruction float_sub} {:instruction integer_max} {:instruction in2} {:instruction float_pop} {:instruction integer_mod} {:instruction float_flush} {:instruction float_pop} {:instruction integer_max} {:instruction integer_flush} {:instruction in1} {:instruction in1} {:instruction float_stackdepth} {:instruction in2} {:instruction integer_add} {:instruction integer_add} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_add} {:instruction float_inc} {:instruction integer_max} {:instruction float_inc} {:instruction integer_add} {:instruction float_inc} {:instruction integer_add} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_add} {:instruction float_inc} {:instruction integer_add} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_add} {:instruction float_inc} {:instruction float_inc} {:instruction integer_sub} {:instruction float_inc} {:instruction float_inc} {:instruction integer_add} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_add} {:instruction float_inc} {:instruction float_inc} {:instruction integer_max} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_dup_times} {:instruction float_rot} {:instruction float_stackdepth} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_min} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_add} {:instruction float_inc} {:instruction float_inc} {:instruction integer_swap} {:instruction float_inc} {:instruction float_dup} {:instruction float_inc} {:instruction 25} {:instruction float_stackdepth} {:instruction float_inc} {:instruction float_dup_times} {:instruction float_yank} {:instruction float_inc} {:instruction integer_add} {:instruction integer_yankdup} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_add} {:instruction integer_yankdup} {:instruction float_inc} {:instruction integer_max} {:instruction float_dup_times} {:instruction float_max} {:instruction float_dup_times} {:instruction float_stackdepth} {:instruction float_inc} {:instruction float_inc} {:instruction float_dup_times} {:instruction float_dup_items} {:instruction integer_add} {:instruction 24} {:instruction in2} {:instruction integer_add} {:instruction integer_yank} {:instruction float_dup_times} {:instruction integer_swap} {:instruction in1} {:instruction 78.00430018095415} {:instruction float_rot} {:instruction float_dup_times} {:instruction float_rot} {:instruction integer_yankdup} {:instruction integer_add} {:instruction float_dec} {:instruction float_inc} {:instruction float_sub} {:instruction float_rot} {:instruction integer_shove} {:instruction float_rot} {:instruction float_sub} {:instruction float_rot} {:instruction integer_sub} {:instruction float_inc} {:instruction integer_swap} {:instruction integer_min} {:instruction print_float} {:instruction integer_dec} {:instruction integer_stackdepth} {:instruction float_yank} {:instruction integer_flush} {:instruction float_mult} {:instruction integer_shove} {:instruction float_dup_times})
Best program: (float_mod float_pop integer_max float_sub integer_max in2 float_pop integer_mod float_flush float_pop integer_max integer_flush in1 in1 float_stackdepth in2 integer_add integer_add float_inc float_inc float_inc float_inc integer_add float_inc integer_max float_inc integer_add float_inc integer_add float_inc float_inc float_inc float_inc integer_add float_inc integer_add float_inc float_inc float_inc float_inc integer_add float_inc float_inc integer_sub float_inc float_inc integer_add float_inc float_inc float_inc float_inc integer_add float_inc float_inc integer_max float_inc float_inc float_inc float_inc float_dup_times float_rot float_stackdepth float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc integer_min float_inc float_inc float_inc float_inc float_inc integer_add float_inc float_inc integer_swap float_inc float_dup float_inc 25 float_stackdepth float_inc float_dup_times float_yank float_inc integer_add integer_yankdup float_inc float_inc float_inc float_inc integer_add integer_yankdup float_inc integer_max float_dup_times float_max float_dup_times float_stackdepth float_inc float_inc float_dup_times float_dup_items integer_add 24 in2 integer_add integer_yank float_dup_times integer_swap in1 78.00430018095415 float_rot float_dup_times float_rot integer_yankdup integer_add float_dec float_inc float_sub float_rot integer_shove float_rot float_sub float_rot integer_sub float_inc integer_swap integer_min print_float integer_dec integer_stackdepth float_yank integer_flush float_mult integer_shove float_dup_times)
Errors: [23.9957 8 27.0 2 9.9957 7 44.0 2 19.0 2 6.9957 9 27.0043 7 5.0 1 26.0043 8 14.0 2 0.0 0 9.0043 8 30.0 1 3.0 1 28.0 2 0.9957 7 0.0 0 33.0 9 31.9957 9 10.0 1 26.0 2 31.0 2 0.0 0 2.0043 6 1.0 1]
Total: 505.9957
Mean: 10.119914
Genome size: 141
Size: 142
Percent parens: 0.007
--- Population Statistics ---
Average total errors in population: 2813.4314458
Median total errors in population: 1004.82825
Error averages by case: (126.05968929999995 9.934 102.94081950000003 4.061 106.06734529999983 6.75 131.39841430000004 5.437 99.91035610000006 3.837 130.20057589999988 8.129 107.51941980000026 6.341 83.0671219000001 4.016 104.82519430000018 7.106 104.0420935000002 3.988 93.51782710000009 2.68 119.87511740000004 7.792 100.14729320000004 3.727 91.18777640000003 3.067 123.17920009999976 4.05 108.07381459999971 8.269 85.75774040000002 4.615 116.89371000000011 9.958 129.16849709999994 10.768 82.5142203 3.352 114.87024310000012 4.185 96.89016270000012 3.798 92.49452610000003 3.422 123.59881410000021 6.601 99.78547329999992 3.563)
Error minima by case: (0.518 7 0.2433 1 0.0101 1 5.2368 1 0.0 1 0.9957 2 1.0003 1 0.0 0 0.0043 1 0.0 0 0.0 0 0.0043 1 0.0374 1 0.0 0 9.0 1 0.0043 1 0.0 0 0.0172 9 11.7871 8 0.1392 1 3.1931 1 0.2504 1 0.0 0 0.0043 1 0.0 0)
Average genome size in population (length): 138.152
Average program size in population (points): 139.152
Average percent parens in population: 0.007
Minimum age in population: 190.8496951695736
Maximum age in population: 194.791307817231
Average age in population: 192.9116707092502
Median age in population: 192.9156770232782
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 11
Genome diversity (% unique Plush genomes):	 0.94
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 11
Syntactic diversity (% unique Push programs):	 0.94
Total error diversity:				 0.583
Error (vector) diversity:			 0.642
Behavioral diversity:				 0.642
--- Run Statistics ---
Number of program evaluations used so far: 141000
Number of point (instruction) evaluations so far: 349179926
--- Timings ---
Current time: 1529616538973 milliseconds
Total Time:         603.1 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       190.1 seconds, 31.5%
Fitness Testing:    328.6 seconds, 54.5%
Report:              84.4 seconds, 14.0%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 140
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 141
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 141
;;******************************
;; -*- Number IO problem report - generation 141
Test total error for best: 26395.9828
Test mean error for best: 13.19799
;;------------------------------
Outputs of best individual on training cases:
Correct output: -74.6179542037 | Program output: -52.6222543847
Correct output: 78.7609586813  | Program output: 51.7609586813 
Correct output: 3.0100598709   | Program output: 11.0057596899 
Correct output: -99.2368061293 | Program output: -57.2368061293
Correct output: 88.6808415603  | Program output: 69.6808415603 
Correct output: -151.1060419578 | Program output: -146.1103421388
Correct output: 56.004616184   | Program output: 27.000316003  
Correct output: 33.520660154   | Program output: 38.520660154  
Correct output: 42.238861085   | Program output: 14.2345609041 
Correct output: -49.0227893765 | Program output: -35.0227893765
Correct output: 103.4057483059 | Program output: 103.4057483059
Correct output: -106.1378273779 | Program output: -117.1421275589
Correct output: 37.9625599991  | Program output: 67.9625599991 
Correct output: 71.9208193203  | Program output: 74.9208193203 
Correct output: 173.5348464317 | Program output: 145.5348464317
Correct output: -77.0615185935 | Program output: -78.0658187744
Correct output: -20.7643622555 | Program output: -20.7643622555
Correct output: 1.9827630815   | Program output: -31.0172369185
Correct output: -39.1198682611 | Program output: -9.124168442  
Correct output: 1.1392376036   | Program output: 11.1392376036 
Correct output: 129.1930977679 | Program output: 103.1930977679
Correct output: 26.7496211861  | Program output: 57.7496211861 
Correct output: -11.2984801384 | Program output: -11.2984801384
Correct output: -136.1442960385 | Program output: -140.1485962195
Correct output: 143.0911996605 | Program output: 142.0911996605
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_mod} {:instruction float_pop} {:instruction integer_max} {:instruction integer_flush} {:instruction in1} {:instruction in1} {:instruction float_stackdepth} {:instruction in2} {:instruction integer_add} {:instruction integer_add} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_add} {:instruction float_inc} {:instruction integer_add} {:instruction float_inc} {:instruction integer_max} {:instruction float_inc} {:instruction integer_add} {:instruction float_inc} {:instruction integer_add} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_add} {:instruction float_inc} {:instruction integer_add} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_add} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_add} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_max} {:instruction float_inc} {:instruction float_inc} {:instruction integer_max} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_dup_times} {:instruction float_rot} {:instruction float_stackdepth} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_dec} {:instruction integer_max} {:instruction float_inc} {:instruction float_dup} {:instruction float_inc} {:instruction 25} {:instruction float_stackdepth} {:instruction float_inc} {:instruction float_dup_times} {:instruction float_yank} {:instruction float_inc} {:instruction integer_swap} {:instruction integer_yankdup} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_add} {:instruction integer_yankdup} {:instruction float_inc} {:instruction integer_max} {:instruction float_dup_times} {:instruction float_max} {:instruction float_dup_times} {:instruction float_stackdepth} {:instruction float_inc} {:instruction float_inc} {:instruction float_dup_times} {:instruction float_dup_items} {:instruction integer_pop} {:instruction 25} {:instruction 25} {:instruction integer_flush} {:instruction integer_add} {:instruction float_dup_items} {:instruction integer_add} {:instruction 25} {:instruction in2} {:instruction integer_add} {:instruction integer_yank} {:instruction float_dup_times} {:instruction integer_dup_items} {:instruction in1} {:instruction 78.00430018095415} {:instruction float_rot} {:instruction float_dup_times} {:instruction float_rot} {:instruction integer_yankdup} {:instruction integer_add} {:instruction float_dec} {:instruction float_inc} {:instruction float_sub} {:instruction float_rot} {:instruction integer_shove} {:instruction float_rot} {:instruction float_sub} {:instruction float_rot} {:instruction integer_sub} {:instruction float_inc} {:instruction integer_swap} {:instruction integer_min} {:instruction print_float} {:instruction integer_dec} {:instruction integer_stackdepth} {:instruction float_yank} {:instruction integer_flush} {:instruction float_mult} {:instruction integer_shove} {:instruction float_dup_times} {:instruction float_pop} {:instruction integer_shove} {:instruction float_dup_times} {:instruction float_pop} {:instruction float_pop})
Best program: (float_mod float_pop integer_max integer_flush in1 in1 float_stackdepth in2 integer_add integer_add float_inc float_inc float_inc integer_add float_inc integer_add float_inc integer_max float_inc integer_add float_inc integer_add float_inc float_inc float_inc float_inc integer_add float_inc integer_add float_inc float_inc float_inc float_inc integer_add float_inc float_inc float_inc integer_add float_inc float_inc float_inc float_inc float_inc float_inc float_inc integer_max float_inc float_inc integer_max float_inc float_inc float_inc float_inc float_dup_times float_rot float_stackdepth float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_dec integer_max float_inc float_dup float_inc 25 float_stackdepth float_inc float_dup_times float_yank float_inc integer_swap integer_yankdup float_inc float_inc float_inc float_inc integer_add integer_yankdup float_inc integer_max float_dup_times float_max float_dup_times float_stackdepth float_inc float_inc float_dup_times float_dup_items integer_pop 25 25 integer_flush integer_add float_dup_items integer_add 25 in2 integer_add integer_yank float_dup_times integer_dup_items in1 78.00430018095415 float_rot float_dup_times float_rot integer_yankdup integer_add float_dec float_inc float_sub float_rot integer_shove float_rot float_sub float_rot integer_sub float_inc integer_swap integer_min print_float integer_dec integer_stackdepth float_yank integer_flush float_mult integer_shove float_dup_times float_pop integer_shove float_dup_times float_pop float_pop)
Errors: [21.9957 8 27.0 2 7.9957 8 42.0 2 19.0 2 4.9957 9 29.0043 7 5.0 1 28.0043 8 14.0 2 0.0 0 11.0043 8 30.0 1 3.0 1 28.0 2 1.0043 7 0.0 0 33.0 9 29.9957 8 10.0 1 26.0 2 31.0 2 0.0 0 4.0043 7 1.0 1]
Total: 505.0043
Mean: 10.100086
Genome size: 144
Size: 145
Percent parens: 0.007
--- Population Statistics ---
Average total errors in population: 3394.5393415999997
Median total errors in population: 985.9147
Error averages by case: (146.96240849999978 9.943 130.90652160000002 4.151 123.01359789999978 6.837 147.9779968000001 4.945 127.87955720000008 3.882 147.41451259999985 8.139 124.40059340000028 6.396 110.55007700000012 4.167 121.88727830000026 7.16 131.4328628000002 4.096 117.0276559000001 2.668 138.0086073 7.698 126.46517850000008 3.761 115.6171277999999 3.143 148.55652599999985 4.072 130.40617559999964 8.124 112.29350400000003 4.199 144.27222350000008 10.133 149.50003329999984 10.821 106.9421558999999 3.262 142.73719370000003 4.245 123.7513688000001 3.812 120.54446780000006 3.429 141.12544770000017 6.545 125.68226969999994 3.556)
Error minima by case: (4.9957 7 0.028 1 1.0043 1 2.778 1 0.3235 1 0.0043 2 0.9957 1 0.0 0 1.9957 1 0.0 0 0.0 0 0.0043 1 0.0 0 0.0 0 14.0 1 0.0043 1 0.0 0 0.0131 7 5.7603 8 0.1392 1 1.8112 1 0.0 0 0.0 0 0.0043 1 0.0 0)
Average genome size in population (length): 138.695
Average program size in population (points): 139.695
Average percent parens in population: 0.007
Minimum age in population: 191.8496951695736
Maximum age in population: 196.2952522634316
Average age in population: 194.1275578132736
Median age in population: 194.1449778282745
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 7
Genome diversity (% unique Plush genomes):	 0.941
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 7
Syntactic diversity (% unique Push programs):	 0.941
Total error diversity:				 0.565
Error (vector) diversity:			 0.637
Behavioral diversity:				 0.638
--- Run Statistics ---
Number of program evaluations used so far: 142000
Number of point (instruction) evaluations so far: 352647326
--- Timings ---
Current time: 1529616544223 milliseconds
Total Time:         608.4 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       191.4 seconds, 31.5%
Fitness Testing:    331.7 seconds, 54.5%
Report:              85.1 seconds, 14.0%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 141
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 142
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 142
;;******************************
;; -*- Number IO problem report - generation 142
Test total error for best: 26434.931199999995
Test mean error for best: 13.21747
;;------------------------------
Outputs of best individual on training cases:
Correct output: -74.6179542037 | Program output: -51.6222543847
Correct output: 78.7609586813  | Program output: 51.7609586813 
Correct output: 3.0100598709   | Program output: 12.0057596899 
Correct output: -99.2368061293 | Program output: -56.2368061293
Correct output: 88.6808415603  | Program output: 69.6808415603 
Correct output: -151.1060419578 | Program output: -145.1103421388
Correct output: 56.004616184   | Program output: 28.000316003  
Correct output: 33.520660154   | Program output: 38.520660154  
Correct output: 42.238861085   | Program output: 15.2345609041 
Correct output: -49.0227893765 | Program output: -35.0227893765
Correct output: 103.4057483059 | Program output: 103.4057483059
Correct output: -106.1378273779 | Program output: -116.1421275589
Correct output: 37.9625599991  | Program output: 67.9625599991 
Correct output: 71.9208193203  | Program output: 74.9208193203 
Correct output: 173.5348464317 | Program output: 145.5348464317
Correct output: -77.0615185935 | Program output: -77.0658187744
Correct output: -20.7643622555 | Program output: -20.7643622555
Correct output: 1.9827630815   | Program output: -31.0172369185
Correct output: -39.1198682611 | Program output: -8.124168442  
Correct output: 1.1392376036   | Program output: 11.1392376036 
Correct output: 129.1930977679 | Program output: 103.1930977679
Correct output: 26.7496211861  | Program output: 57.7496211861 
Correct output: -11.2984801384 | Program output: -11.2984801384
Correct output: -136.1442960385 | Program output: -139.1485962195
Correct output: 143.0911996605 | Program output: 142.0911996605
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_mod} {:instruction integer_mod} {:instruction integer_max} {:instruction in1} {:instruction in1} {:instruction float_stackdepth} {:instruction in2} {:instruction integer_add} {:instruction integer_add} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_add} {:instruction float_inc} {:instruction integer_max} {:instruction float_inc} {:instruction integer_add} {:instruction float_inc} {:instruction integer_add} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_add} {:instruction float_inc} {:instruction integer_add} {:instruction integer_add} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_add} {:instruction float_inc} {:instruction float_inc} {:instruction integer_sub} {:instruction float_inc} {:instruction float_inc} {:instruction integer_add} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_add} {:instruction float_inc} {:instruction float_inc} {:instruction integer_max} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_dup_times} {:instruction float_rot} {:instruction float_stackdepth} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_rot} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_min} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_add} {:instruction float_inc} {:instruction float_inc} {:instruction integer_max} {:instruction float_inc} {:instruction float_dup} {:instruction float_inc} {:instruction 25} {:instruction float_stackdepth} {:instruction float_inc} {:instruction float_dup_times} {:instruction float_yank} {:instruction float_inc} {:instruction integer_add} {:instruction integer_yankdup} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_add} {:instruction integer_yankdup} {:instruction float_inc} {:instruction integer_max} {:instruction float_dup_times} {:instruction float_max} {:instruction float_dup_times} {:instruction float_stackdepth} {:instruction float_inc} {:instruction float_inc} {:instruction float_dup_times} {:instruction float_dup_items} {:instruction integer_add} {:instruction 25} {:instruction in2} {:instruction integer_add} {:instruction integer_yank} {:instruction float_dup_times} {:instruction integer_swap} {:instruction in1} {:instruction 78.00430018095415} {:instruction float_rot} {:instruction float_dup_times} {:instruction float_rot} {:instruction integer_yankdup} {:instruction integer_add} {:instruction float_dec} {:instruction float_inc} {:instruction float_sub} {:instruction float_rot} {:instruction integer_shove} {:instruction float_rot} {:instruction float_sub} {:instruction float_rot} {:instruction integer_sub} {:instruction float_inc} {:instruction integer_swap} {:instruction integer_min} {:instruction print_float} {:instruction integer_dec} {:instruction integer_stackdepth} {:instruction float_yank})
Best program: (float_mod integer_mod integer_max in1 in1 float_stackdepth in2 integer_add integer_add float_inc float_inc float_inc float_inc float_inc integer_add float_inc integer_max float_inc integer_add float_inc integer_add float_inc float_inc float_inc float_inc integer_add float_inc integer_add integer_add float_inc float_inc float_inc float_inc integer_add float_inc float_inc integer_sub float_inc float_inc integer_add float_inc float_inc float_inc float_inc integer_add float_inc float_inc integer_max float_inc float_inc float_inc float_inc float_dup_times float_rot float_stackdepth float_inc float_inc float_inc integer_rot float_inc float_inc float_inc float_inc integer_min float_inc float_inc float_inc float_inc float_inc integer_add float_inc float_inc integer_max float_inc float_dup float_inc 25 float_stackdepth float_inc float_dup_times float_yank float_inc integer_add integer_yankdup float_inc float_inc float_inc float_inc integer_add integer_yankdup float_inc integer_max float_dup_times float_max float_dup_times float_stackdepth float_inc float_inc float_dup_times float_dup_items integer_add 25 in2 integer_add integer_yank float_dup_times integer_swap in1 78.00430018095415 float_rot float_dup_times float_rot integer_yankdup integer_add float_dec float_inc float_sub float_rot integer_shove float_rot float_sub float_rot integer_sub float_inc integer_swap integer_min print_float integer_dec integer_stackdepth float_yank)
Errors: [22.9957 8 27.0 2 8.9957 8 43.0 2 19.0 2 5.9957 9 28.0043 7 5.0 1 27.0043 8 14.0 2 0.0 0 10.0043 7 30.0 1 3.0 1 28.0 2 0.0043 6 0.0 0 33.0 9 30.9957 9 10.0 1 26.0 2 31.0 2 0.0 0 3.0043 6 1.0 1]
Total: 503.0043
Mean: 10.060086
Genome size: 130
Size: 131
Percent parens: 0.008
--- Population Statistics ---
Average total errors in population: 2956.3838050999993
Median total errors in population: 971.5
Error averages by case: (132.89953479999988 9.891 112.28983980000004 4.095 113.28062949999986 6.851 128.53291710000002 4.629 108.68457000000005 3.796 133.64322029999988 8.143 114.3910101000003 6.428 91.6829226 4.023 113.37626710000022 7.185 107.4664866000001 4.023 97.6250668000001 2.671 124.10921110000005 7.752 108.58917750000005 3.759 95.70254860000003 3.131 127.47221799999986 4.022 116.49582299999977 8.126 89.64669910000002 4.312 121.98085830000007 10.04 135.25879149999992 10.788 91.89047250000006 3.25 120.17075930000009 4.163 105.92031639999999 3.783 95.53490420000001 3.413 127.25202230000016 6.609 104.03753859999998 3.567)
Error minima by case: (2.014 7 0.2433 1 0.0043 1 8.2368 1 1.6808 1 0.0043 1 3.0E-4 1 0.0 0 1.0043 1 0.0 0 0.0 0 0.0043 2 0.0 0 0.0 0 2.4652 1 0.0043 1 0.0 0 0.0171 7 4.1199 8 0.1392 1 1.8112 1 0.0 0 0.0 0 0.0043 1 0.0 0)
Average genome size in population (length): 139.023
Average program size in population (points): 140.023
Average percent parens in population: 0.007
Minimum age in population: 193.3859470135655
Maximum age in population: 197.2952522634316
Average age in population: 195.4126343632371
Median age in population: 195.4450455760271
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 7
Genome diversity (% unique Plush genomes):	 0.95
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 7
Syntactic diversity (% unique Push programs):	 0.95
Total error diversity:				 0.573
Error (vector) diversity:			 0.644
Behavioral diversity:				 0.645
--- Run Statistics ---
Number of program evaluations used so far: 143000
Number of point (instruction) evaluations so far: 356122926
--- Timings ---
Current time: 1529616549511 milliseconds
Total Time:         613.7 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       192.8 seconds, 31.4%
Fitness Testing:    334.9 seconds, 54.6%
Report:              85.9 seconds, 14.0%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 142
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 143
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 143
;;******************************
;; -*- Number IO problem report - generation 143
Test total error for best: 26434.931199999995
Test mean error for best: 13.21747
;;------------------------------
Outputs of best individual on training cases:
Correct output: -74.6179542037 | Program output: -51.6222543847
Correct output: 78.7609586813  | Program output: 51.7609586813 
Correct output: 3.0100598709   | Program output: 12.0057596899 
Correct output: -99.2368061293 | Program output: -56.2368061293
Correct output: 88.6808415603  | Program output: 69.6808415603 
Correct output: -151.1060419578 | Program output: -145.1103421388
Correct output: 56.004616184   | Program output: 28.000316003  
Correct output: 33.520660154   | Program output: 38.520660154  
Correct output: 42.238861085   | Program output: 15.2345609041 
Correct output: -49.0227893765 | Program output: -35.0227893765
Correct output: 103.4057483059 | Program output: 103.4057483059
Correct output: -106.1378273779 | Program output: -116.1421275589
Correct output: 37.9625599991  | Program output: 67.9625599991 
Correct output: 71.9208193203  | Program output: 74.9208193203 
Correct output: 173.5348464317 | Program output: 145.5348464317
Correct output: -77.0615185935 | Program output: -77.0658187744
Correct output: -20.7643622555 | Program output: -20.7643622555
Correct output: 1.9827630815   | Program output: -31.0172369185
Correct output: -39.1198682611 | Program output: -8.124168442  
Correct output: 1.1392376036   | Program output: 11.1392376036 
Correct output: 129.1930977679 | Program output: 103.1930977679
Correct output: 26.7496211861  | Program output: 57.7496211861 
Correct output: -11.2984801384 | Program output: -11.2984801384
Correct output: -136.1442960385 | Program output: -139.1485962195
Correct output: 143.0911996605 | Program output: 142.0911996605
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_mod} {:instruction float_pop} {:instruction integer_max} {:instruction float_sub} {:instruction integer_max} {:instruction in2} {:instruction float_pop} {:instruction integer_mod} {:instruction float_flush} {:instruction float_pop} {:instruction integer_max} {:instruction integer_flush} {:instruction in1} {:instruction in1} {:instruction float_stackdepth} {:instruction in2} {:instruction integer_add} {:instruction integer_add} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_add} {:instruction float_inc} {:instruction integer_max} {:instruction float_inc} {:instruction integer_add} {:instruction float_inc} {:instruction integer_add} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_add} {:instruction float_inc} {:instruction integer_add} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_add} {:instruction float_inc} {:instruction float_inc} {:instruction integer_sub} {:instruction float_inc} {:instruction float_inc} {:instruction integer_add} {:instruction float_inc} {:instruction integer_add} {:instruction float_inc} {:instruction float_inc} {:instruction integer_add} {:instruction float_inc} {:instruction float_inc} {:instruction integer_max} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_dup_times} {:instruction float_rot} {:instruction float_stackdepth} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_min} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_add} {:instruction float_inc} {:instruction float_inc} {:instruction integer_max} {:instruction float_inc} {:instruction float_dup} {:instruction float_inc} {:instruction 25} {:instruction float_stackdepth} {:instruction float_inc} {:instruction float_dup_times} {:instruction float_yank} {:instruction float_inc} {:instruction integer_add} {:instruction integer_yankdup} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_add} {:instruction integer_yankdup} {:instruction float_inc} {:instruction integer_max} {:instruction float_dup_times} {:instruction float_max} {:instruction float_dup_times} {:instruction float_stackdepth} {:instruction float_inc} {:instruction float_inc} {:instruction float_dup_times} {:instruction float_yank} {:instruction integer_add} {:instruction 25} {:instruction in2} {:instruction integer_add} {:instruction integer_yank} {:instruction float_dup_times} {:instruction float_dec} {:instruction in1} {:instruction 78.00430018095415} {:instruction float_rot} {:instruction float_dup_times} {:instruction float_rot} {:instruction integer_yankdup} {:instruction integer_add} {:instruction float_dec} {:instruction float_inc} {:instruction float_sub} {:instruction float_rot} {:instruction integer_shove} {:instruction float_rot} {:instruction float_sub} {:instruction float_rot} {:instruction integer_sub} {:instruction float_inc} {:instruction integer_swap} {:instruction integer_min} {:instruction print_float} {:instruction integer_pop} {:instruction float_pop})
Best program: (float_mod float_pop integer_max float_sub integer_max in2 float_pop integer_mod float_flush float_pop integer_max integer_flush in1 in1 float_stackdepth in2 integer_add integer_add float_inc float_inc float_inc float_inc integer_add float_inc integer_max float_inc integer_add float_inc integer_add float_inc float_inc float_inc float_inc float_inc float_inc integer_add float_inc integer_add float_inc float_inc float_inc float_inc integer_add float_inc float_inc integer_sub float_inc float_inc integer_add float_inc integer_add float_inc float_inc integer_add float_inc float_inc integer_max float_inc float_inc float_inc float_inc float_dup_times float_rot float_stackdepth float_inc float_inc float_inc float_inc float_inc float_inc float_inc integer_min float_inc float_inc float_inc float_inc float_inc integer_add float_inc float_inc integer_max float_inc float_dup float_inc 25 float_stackdepth float_inc float_dup_times float_yank float_inc integer_add integer_yankdup float_inc float_inc float_inc float_inc integer_add integer_yankdup float_inc integer_max float_dup_times float_max float_dup_times float_stackdepth float_inc float_inc float_dup_times float_yank integer_add 25 in2 integer_add integer_yank float_dup_times float_dec in1 78.00430018095415 float_rot float_dup_times float_rot integer_yankdup integer_add float_dec float_inc float_sub float_rot integer_shove float_rot float_sub float_rot integer_sub float_inc integer_swap integer_min print_float integer_pop float_pop)
Errors: [22.9957 8 27.0 2 8.9957 8 43.0 2 19.0 2 5.9957 9 28.0043 7 5.0 1 27.0043 8 14.0 2 0.0 0 10.0043 7 30.0 1 3.0 1 28.0 2 0.0043 6 0.0 0 33.0 9 30.9957 9 10.0 1 26.0 2 31.0 2 0.0 0 3.0043 6 1.0 1]
Total: 503.0043
Mean: 10.060086
Genome size: 137
Size: 138
Percent parens: 0.007
--- Population Statistics ---
Average total errors in population: 3078.7338328
Median total errors in population: 991.9147
Error averages by case: (132.0717844999999 9.899 120.66707109999999 4.164 112.34715449999985 6.705 137.76118650000006 4.352 117.31177210000006 3.931 133.46450459999986 7.954 111.28330750000025 6.223 101.11905210000008 3.99 111.39142830000019 7.032 115.65002890000014 4.074 104.7283668000001 2.783 124.62078640000001 7.56 117.42344640000005 3.828 102.7579313 3.182 134.8161329999998 4.095 116.72819809999976 8.161 100.9667069 4.647 129.6036786000001 10.131 134.81198379999992 10.808 93.66990839999998 3.171 128.01155870000014 4.314 115.32855860000006 3.84 104.71934550000007 3.483 127.38190580000021 6.418 111.72703439999992 3.626)
Error minima by case: (0.6162 7 0.2433 1 0.0043 1 17.2368 1 0.6808 1 0.0043 2 0.0043 1 0.0 0 0.0043 1 0.0 0 0.0 0 0.0043 1 0.0 0 0.0 0 3.4652 1 0.0043 1 0.0 0 0.0172 7 4.7603 8 0.1392 1 0.8112 1 0.4043 1 0.0 0 0.0043 1 0.0 0)
Average genome size in population (length): 139.957
Average program size in population (points): 140.957
Average percent parens in population: 0.007
Minimum age in population: 194.4520919670259
Maximum age in population: 198.76165105271
Average age in population: 196.7109838015817
Median age in population: 196.7493738379483
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 8
Genome diversity (% unique Plush genomes):	 0.954
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 8
Syntactic diversity (% unique Push programs):	 0.954
Total error diversity:				 0.579
Error (vector) diversity:			 0.641
Behavioral diversity:				 0.642
--- Run Statistics ---
Number of program evaluations used so far: 144000
Number of point (instruction) evaluations so far: 359621876
--- Timings ---
Current time: 1529616554736 milliseconds
Total Time:         618.9 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       194.2 seconds, 31.4%
Fitness Testing:    338.0 seconds, 54.6%
Report:              86.6 seconds, 14.0%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 143
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 144
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 144
;;******************************
;; -*- Number IO problem report - generation 144
Test total error for best: 26201.9312
Test mean error for best: 13.10097
;;------------------------------
Outputs of best individual on training cases:
Correct output: -74.6179542037 | Program output: -51.6222543847
Correct output: 78.7609586813  | Program output: 51.7609586813 
Correct output: 3.0100598709   | Program output: 12.0057596899 
Correct output: -99.2368061293 | Program output: -56.2368061293
Correct output: 88.6808415603  | Program output: 69.6808415603 
Correct output: -151.1060419578 | Program output: -145.1103421388
Correct output: 56.004616184   | Program output: 28.000316003  
Correct output: 33.520660154   | Program output: 38.520660154  
Correct output: 42.238861085   | Program output: 15.2345609041 
Correct output: -49.0227893765 | Program output: -35.0227893765
Correct output: 103.4057483059 | Program output: 103.4057483059
Correct output: -106.1378273779 | Program output: -116.1421275589
Correct output: 37.9625599991  | Program output: 67.9625599991 
Correct output: 71.9208193203  | Program output: 74.9208193203 
Correct output: 173.5348464317 | Program output: 145.5348464317
Correct output: -77.0615185935 | Program output: -77.0658187744
Correct output: -20.7643622555 | Program output: -20.7643622555
Correct output: 1.9827630815   | Program output: -31.0172369185
Correct output: -39.1198682611 | Program output: -8.124168442  
Correct output: 1.1392376036   | Program output: 11.1392376036 
Correct output: 129.1930977679 | Program output: 103.1930977679
Correct output: 26.7496211861  | Program output: 57.7496211861 
Correct output: -11.2984801384 | Program output: -11.2984801384
Correct output: -136.1442960385 | Program output: -139.1485962195
Correct output: 143.0911996605 | Program output: 142.0911996605
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_mod} {:instruction integer_mod} {:instruction integer_max} {:instruction in1} {:instruction in1} {:instruction float_stackdepth} {:instruction in2} {:instruction integer_add} {:instruction integer_add} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_add} {:instruction float_inc} {:instruction integer_max} {:instruction float_inc} {:instruction integer_add} {:instruction float_inc} {:instruction integer_add} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_add} {:instruction float_inc} {:instruction integer_add} {:instruction integer_add} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_add} {:instruction float_inc} {:instruction float_inc} {:instruction integer_sub} {:instruction float_inc} {:instruction float_inc} {:instruction integer_add} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_add} {:instruction float_inc} {:instruction float_inc} {:instruction integer_max} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_dup_times} {:instruction float_rot} {:instruction float_stackdepth} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_rot} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_min} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_add} {:instruction float_inc} {:instruction float_inc} {:instruction integer_max} {:instruction float_inc} {:instruction float_dup} {:instruction float_inc} {:instruction 26} {:instruction float_stackdepth} {:instruction float_inc} {:instruction float_dup_times} {:instruction float_yank} {:instruction float_inc} {:instruction integer_add} {:instruction integer_yankdup} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_add} {:instruction integer_yankdup} {:instruction float_inc} {:instruction integer_max} {:instruction float_dup_times} {:instruction float_max} {:instruction float_dup_times} {:instruction float_stackdepth} {:instruction float_inc} {:instruction float_inc} {:instruction float_dup_times} {:instruction float_dup_items} {:instruction integer_add} {:instruction 25} {:instruction in2} {:instruction integer_add} {:instruction integer_yank} {:instruction float_dup_times} {:instruction integer_swap} {:instruction in1} {:instruction 78.00430018095415} {:instruction float_rot} {:instruction float_dup_times} {:instruction float_rot} {:instruction integer_yankdup} {:instruction integer_add} {:instruction float_dec} {:instruction float_inc} {:instruction float_sub} {:instruction float_rot} {:instruction integer_shove} {:instruction float_rot} {:instruction float_sub} {:instruction float_rot} {:instruction integer_sub} {:instruction float_inc} {:instruction integer_swap} {:instruction integer_min} {:instruction print_float} {:instruction integer_dec} {:instruction integer_stackdepth} {:instruction float_yank})
Best program: (float_mod integer_mod integer_max in1 in1 float_stackdepth in2 integer_add integer_add float_inc float_inc float_inc float_inc float_inc integer_add float_inc integer_max float_inc integer_add float_inc integer_add float_inc float_inc float_inc float_inc integer_add float_inc integer_add integer_add float_inc float_inc float_inc float_inc integer_add float_inc float_inc integer_sub float_inc float_inc integer_add float_inc float_inc float_inc float_inc integer_add float_inc float_inc integer_max float_inc float_inc float_inc float_inc float_dup_times float_rot float_stackdepth float_inc float_inc float_inc integer_rot float_inc float_inc float_inc float_inc integer_min float_inc float_inc float_inc float_inc float_inc integer_add float_inc float_inc integer_max float_inc float_dup float_inc 26 float_stackdepth float_inc float_dup_times float_yank float_inc integer_add integer_yankdup float_inc float_inc float_inc float_inc integer_add integer_yankdup float_inc integer_max float_dup_times float_max float_dup_times float_stackdepth float_inc float_inc float_dup_times float_dup_items integer_add 25 in2 integer_add integer_yank float_dup_times integer_swap in1 78.00430018095415 float_rot float_dup_times float_rot integer_yankdup integer_add float_dec float_inc float_sub float_rot integer_shove float_rot float_sub float_rot integer_sub float_inc integer_swap integer_min print_float integer_dec integer_stackdepth float_yank)
Errors: [22.9957 8 27.0 2 8.9957 8 43.0 2 19.0 2 5.9957 9 28.0043 7 5.0 1 27.0043 8 14.0 2 0.0 0 10.0043 7 30.0 1 3.0 1 28.0 2 0.0043 6 0.0 0 33.0 9 30.9957 9 10.0 1 26.0 2 31.0 2 0.0 0 3.0043 6 1.0 1]
Total: 503.0043
Mean: 10.060086
Genome size: 130
Size: 131
Percent parens: 0.008
--- Population Statistics ---
Average total errors in population: 2706.8284821999996
Median total errors in population: 1018.0
Error averages by case: (114.8674508999999 9.896 104.12647899999999 4.005 99.83120999999986 6.664 120.71071339999995 4.286 101.11947410000008 3.727 118.48745909999984 7.914 99.11902970000025 6.22 82.31756869999998 3.835 99.34810840000019 7.005 102.3582841000001 3.959 91.50784670000009 2.607 109.93132760000006 7.592 100.75726640000006 3.644 89.96576339999999 3.032 121.89501009999987 3.899 99.34135829999977 8.168 84.89989220000001 4.366 116.57904900000005 10.104 119.99840819999994 10.786 78.12793950000002 3.147 115.53552240000009 4.079 98.44592910000004 3.671 90.86756119999998 3.338 112.62631890000023 6.41 98.32351179999996 3.386)
Error minima by case: (1.3863 7 0.2433 1 0.0043 1 4.2368 1 1.3192 1 0.0043 1 3.0E-4 1 0.0 0 0.0043 1 0.0 0 0.0 0 0.0043 1 0.4159 1 0.0 0 14.0 1 0.0043 1 0.0 0 0.0159 8 5.7603 8 0.1053 1 12.0 1 0.0 0 0.0 0 0.0043 1 0.0 0)
Average genome size in population (length): 139.976
Average program size in population (points): 140.976
Average percent parens in population: 0.007
Minimum age in population: 195.4520919670259
Maximum age in population: 199.8314316926957
Average age in population: 198.0183218814134
Median age in population: 198.068948180536
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 9
Genome diversity (% unique Plush genomes):	 0.946
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 9
Syntactic diversity (% unique Push programs):	 0.946
Total error diversity:				 0.602
Error (vector) diversity:			 0.663
Behavioral diversity:				 0.663
--- Run Statistics ---
Number of program evaluations used so far: 145000
Number of point (instruction) evaluations so far: 363121276
--- Timings ---
Current time: 1529616559974 milliseconds
Total Time:         624.2 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       195.6 seconds, 31.3%
Fitness Testing:    341.2 seconds, 54.7%
Report:              87.4 seconds, 14.0%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 144
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 145
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 145
;;******************************
;; -*- Number IO problem report - generation 145
Test total error for best: 26434.931199999995
Test mean error for best: 13.21747
;;------------------------------
Outputs of best individual on training cases:
Correct output: -74.6179542037 | Program output: -51.6222543847
Correct output: 78.7609586813  | Program output: 51.7609586813 
Correct output: 3.0100598709   | Program output: 12.0057596899 
Correct output: -99.2368061293 | Program output: -56.2368061293
Correct output: 88.6808415603  | Program output: 69.6808415603 
Correct output: -151.1060419578 | Program output: -145.1103421388
Correct output: 56.004616184   | Program output: 28.000316003  
Correct output: 33.520660154   | Program output: 38.520660154  
Correct output: 42.238861085   | Program output: 15.2345609041 
Correct output: -49.0227893765 | Program output: -35.0227893765
Correct output: 103.4057483059 | Program output: 103.4057483059
Correct output: -106.1378273779 | Program output: -116.1421275589
Correct output: 37.9625599991  | Program output: 67.9625599991 
Correct output: 71.9208193203  | Program output: 74.9208193203 
Correct output: 173.5348464317 | Program output: 145.5348464317
Correct output: -77.0615185935 | Program output: -77.0658187744
Correct output: -20.7643622555 | Program output: -20.7643622555
Correct output: 1.9827630815   | Program output: -31.0172369185
Correct output: -39.1198682611 | Program output: -8.124168442  
Correct output: 1.1392376036   | Program output: 11.1392376036 
Correct output: 129.1930977679 | Program output: 103.1930977679
Correct output: 26.7496211861  | Program output: 57.7496211861 
Correct output: -11.2984801384 | Program output: -11.2984801384
Correct output: -136.1442960385 | Program output: -139.1485962195
Correct output: 143.0911996605 | Program output: 142.0911996605
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_mod} {:instruction float_pop} {:instruction integer_max} {:instruction float_sub} {:instruction integer_max} {:instruction in2} {:instruction float_pop} {:instruction integer_mod} {:instruction float_flush} {:instruction float_pop} {:instruction integer_max} {:instruction integer_flush} {:instruction in1} {:instruction in1} {:instruction float_stackdepth} {:instruction in2} {:instruction integer_add} {:instruction integer_add} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_add} {:instruction float_inc} {:instruction integer_max} {:instruction float_inc} {:instruction integer_add} {:instruction float_inc} {:instruction integer_add} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_add} {:instruction float_inc} {:instruction integer_add} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_add} {:instruction float_inc} {:instruction float_inc} {:instruction float_rot} {:instruction float_inc} {:instruction float_inc} {:instruction integer_add} {:instruction float_inc} {:instruction integer_add} {:instruction float_inc} {:instruction float_inc} {:instruction integer_add} {:instruction float_inc} {:instruction float_inc} {:instruction integer_max} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_dup_times} {:instruction float_rot} {:instruction float_stackdepth} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_min} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_add} {:instruction float_inc} {:instruction float_inc} {:instruction integer_max} {:instruction float_inc} {:instruction float_dup} {:instruction float_inc} {:instruction 25} {:instruction float_stackdepth} {:instruction float_inc} {:instruction float_dup_times} {:instruction float_yank} {:instruction float_inc} {:instruction integer_add} {:instruction integer_yankdup} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_add} {:instruction integer_yankdup} {:instruction float_inc} {:instruction integer_max} {:instruction float_dup_times} {:instruction float_max} {:instruction float_dup_times} {:instruction float_stackdepth} {:instruction float_inc} {:instruction float_inc} {:instruction float_dup_times} {:instruction float_yank} {:instruction integer_add} {:instruction 25} {:instruction in2} {:instruction integer_add} {:instruction integer_yank} {:instruction float_dup_times} {:instruction float_dec} {:instruction in1} {:instruction 78.00430018095415} {:instruction float_rot} {:instruction float_dup_times} {:instruction float_rot} {:instruction integer_yankdup} {:instruction integer_add} {:instruction float_dec} {:instruction float_inc} {:instruction float_sub} {:instruction float_rot} {:instruction integer_shove} {:instruction float_rot} {:instruction float_sub} {:instruction float_rot} {:instruction integer_sub} {:instruction float_inc} {:instruction integer_swap} {:instruction integer_min} {:instruction print_float} {:instruction integer_pop} {:instruction float_pop})
Best program: (float_mod float_pop integer_max float_sub integer_max in2 float_pop integer_mod float_flush float_pop integer_max integer_flush in1 in1 float_stackdepth in2 integer_add integer_add float_inc float_inc float_inc float_inc integer_add float_inc integer_max float_inc integer_add float_inc integer_add float_inc float_inc float_inc float_inc float_inc float_inc integer_add float_inc integer_add float_inc float_inc float_inc float_inc integer_add float_inc float_inc float_rot float_inc float_inc integer_add float_inc integer_add float_inc float_inc integer_add float_inc float_inc integer_max float_inc float_inc float_inc float_inc float_dup_times float_rot float_stackdepth float_inc float_inc float_inc float_inc float_inc float_inc float_inc integer_min float_inc float_inc float_inc float_inc float_inc integer_add float_inc float_inc integer_max float_inc float_dup float_inc 25 float_stackdepth float_inc float_dup_times float_yank float_inc integer_add integer_yankdup float_inc float_inc float_inc float_inc integer_add integer_yankdup float_inc integer_max float_dup_times float_max float_dup_times float_stackdepth float_inc float_inc float_dup_times float_yank integer_add 25 in2 integer_add integer_yank float_dup_times float_dec in1 78.00430018095415 float_rot float_dup_times float_rot integer_yankdup integer_add float_dec float_inc float_sub float_rot integer_shove float_rot float_sub float_rot integer_sub float_inc integer_swap integer_min print_float integer_pop float_pop)
Errors: [22.9957 8 27.0 2 8.9957 8 43.0 2 19.0 2 5.9957 9 28.0043 7 5.0 1 27.0043 8 14.0 2 0.0 0 10.0043 7 30.0 1 3.0 1 28.0 2 0.0043 6 0.0 0 33.0 9 30.9957 9 10.0 1 26.0 2 31.0 2 0.0 0 3.0043 6 1.0 1]
Total: 503.0043
Mean: 10.060086
Genome size: 137
Size: 138
Percent parens: 0.007
--- Population Statistics ---
Average total errors in population: 3194.6377681999998
Median total errors in population: 1042.0
Error averages by case: (138.68030049999976 10.012 123.09183890000007 4.305 118.92383919999986 6.688 141.1196821000001 4.209 118.7715960000001 4.08 137.68081369999987 7.848 119.09005220000024 6.256 104.68315950000004 4.19 117.68046110000026 6.977 121.62794800000016 4.179 111.72283370000014 2.919 127.94386920000002 7.41 117.7021152 3.969 108.2433363000001 3.361 141.91543609999982 4.236 120.99852029999978 8.092 105.39312900000002 4.544 135.02495260000006 10.129 139.97394239999983 10.94 95.82320200000002 3.348 135.02675070000015 4.416 115.33076910000005 3.99 107.96972980000007 3.532 131.8215522000002 6.359 118.64093839999991 3.768)
Error minima by case: (1.4173 7 0.2433 1 0.9957 1 14.0043 1 1.0 1 0.0043 2 3.0E-4 1 0.0 0 0.0043 1 0.0 0 0.0 0 0.0043 1 0.0 0 0.0 0 1.4695 1 0.0043 1 0.0 0 0.0172 7 4.7603 8 0.1392 1 8.0 1 0.8048 1 0.0 0 0.0043 1 0.0 0)
Average genome size in population (length): 140.356
Average program size in population (points): 141.356
Average percent parens in population: 0.007
Minimum age in population: 197.0543464669858
Maximum age in population: 201.3528031424155
Average age in population: 199.3340372681685
Median age in population: 199.381772538846
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 6
Genome diversity (% unique Plush genomes):	 0.953
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 6
Syntactic diversity (% unique Push programs):	 0.953
Total error diversity:				 0.581
Error (vector) diversity:			 0.65
Behavioral diversity:				 0.65
--- Run Statistics ---
Number of program evaluations used so far: 146000
Number of point (instruction) evaluations so far: 366630226
--- Timings ---
Current time: 1529616565182 milliseconds
Total Time:         629.4 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       196.9 seconds, 31.3%
Fitness Testing:    344.3 seconds, 54.7%
Report:              88.1 seconds, 14.0%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 145
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 146
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 146
;;******************************
;; -*- Number IO problem report - generation 146
Test total error for best: 26201.9312
Test mean error for best: 13.10097
;;------------------------------
Outputs of best individual on training cases:
Correct output: -74.6179542037 | Program output: -51.6222543847
Correct output: 78.7609586813  | Program output: 51.7609586813 
Correct output: 3.0100598709   | Program output: 12.0057596899 
Correct output: -99.2368061293 | Program output: -56.2368061293
Correct output: 88.6808415603  | Program output: 69.6808415603 
Correct output: -151.1060419578 | Program output: -145.1103421388
Correct output: 56.004616184   | Program output: 28.000316003  
Correct output: 33.520660154   | Program output: 38.520660154  
Correct output: 42.238861085   | Program output: 15.2345609041 
Correct output: -49.0227893765 | Program output: -35.0227893765
Correct output: 103.4057483059 | Program output: 103.4057483059
Correct output: -106.1378273779 | Program output: -116.1421275589
Correct output: 37.9625599991  | Program output: 67.9625599991 
Correct output: 71.9208193203  | Program output: 74.9208193203 
Correct output: 173.5348464317 | Program output: 145.5348464317
Correct output: -77.0615185935 | Program output: -77.0658187744
Correct output: -20.7643622555 | Program output: -20.7643622555
Correct output: 1.9827630815   | Program output: -31.0172369185
Correct output: -39.1198682611 | Program output: -8.124168442  
Correct output: 1.1392376036   | Program output: 11.1392376036 
Correct output: 129.1930977679 | Program output: 103.1930977679
Correct output: 26.7496211861  | Program output: 57.7496211861 
Correct output: -11.2984801384 | Program output: -11.2984801384
Correct output: -136.1442960385 | Program output: -139.1485962195
Correct output: 143.0911996605 | Program output: 142.0911996605
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_mod} {:instruction integer_mod} {:instruction integer_max} {:instruction in1} {:instruction in1} {:instruction float_stackdepth} {:instruction in2} {:instruction integer_add} {:instruction integer_add} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_add} {:instruction float_inc} {:instruction integer_max} {:instruction float_inc} {:instruction integer_add} {:instruction float_inc} {:instruction integer_add} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_add} {:instruction float_inc} {:instruction integer_add} {:instruction integer_add} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_add} {:instruction float_inc} {:instruction float_inc} {:instruction integer_sub} {:instruction float_inc} {:instruction float_inc} {:instruction integer_add} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_add} {:instruction float_inc} {:instruction float_inc} {:instruction integer_max} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_dup_times} {:instruction float_rot} {:instruction float_stackdepth} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_rot} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_min} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_add} {:instruction float_inc} {:instruction float_inc} {:instruction integer_max} {:instruction float_inc} {:instruction float_dup} {:instruction float_inc} {:instruction 26} {:instruction float_stackdepth} {:instruction float_inc} {:instruction float_dup_times} {:instruction float_yank} {:instruction float_inc} {:instruction integer_add} {:instruction integer_yankdup} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_add} {:instruction integer_yankdup} {:instruction float_inc} {:instruction integer_max} {:instruction float_dup_times} {:instruction float_max} {:instruction float_dup_times} {:instruction float_stackdepth} {:instruction float_inc} {:instruction float_inc} {:instruction float_dup_times} {:instruction float_dup_items} {:instruction integer_add} {:instruction 25} {:instruction in2} {:instruction integer_add} {:instruction integer_yank} {:instruction float_dup_times} {:instruction integer_swap} {:instruction in1} {:instruction 78.00430018095415} {:instruction float_rot} {:instruction float_dup_times} {:instruction float_rot} {:instruction integer_yankdup} {:instruction integer_add} {:instruction float_dec} {:instruction float_inc} {:instruction float_sub} {:instruction float_rot} {:instruction integer_shove} {:instruction float_rot} {:instruction float_sub} {:instruction float_rot} {:instruction integer_sub} {:instruction float_inc} {:instruction integer_swap} {:instruction integer_min} {:instruction print_float} {:instruction integer_dec} {:instruction integer_stackdepth} {:instruction float_yank})
Best program: (float_mod integer_mod integer_max in1 in1 float_stackdepth in2 integer_add integer_add float_inc float_inc float_inc float_inc float_inc integer_add float_inc integer_max float_inc integer_add float_inc integer_add float_inc float_inc float_inc float_inc integer_add float_inc integer_add integer_add float_inc float_inc float_inc float_inc integer_add float_inc float_inc integer_sub float_inc float_inc integer_add float_inc float_inc float_inc float_inc integer_add float_inc float_inc integer_max float_inc float_inc float_inc float_inc float_dup_times float_rot float_stackdepth float_inc float_inc float_inc integer_rot float_inc float_inc float_inc float_inc integer_min float_inc float_inc float_inc float_inc float_inc integer_add float_inc float_inc integer_max float_inc float_dup float_inc 26 float_stackdepth float_inc float_dup_times float_yank float_inc integer_add integer_yankdup float_inc float_inc float_inc float_inc integer_add integer_yankdup float_inc integer_max float_dup_times float_max float_dup_times float_stackdepth float_inc float_inc float_dup_times float_dup_items integer_add 25 in2 integer_add integer_yank float_dup_times integer_swap in1 78.00430018095415 float_rot float_dup_times float_rot integer_yankdup integer_add float_dec float_inc float_sub float_rot integer_shove float_rot float_sub float_rot integer_sub float_inc integer_swap integer_min print_float integer_dec integer_stackdepth float_yank)
Errors: [22.9957 8 27.0 2 8.9957 8 43.0 2 19.0 2 5.9957 9 28.0043 7 5.0 1 27.0043 8 14.0 2 0.0 0 10.0043 7 30.0 1 3.0 1 28.0 2 0.0043 6 0.0 0 33.0 9 30.9957 9 10.0 1 26.0 2 31.0 2 0.0 0 3.0043 6 1.0 1]
Total: 503.0043
Mean: 10.060086
Genome size: 130
Size: 131
Percent parens: 0.008
--- Population Statistics ---
Average total errors in population: 2854.6530741999995
Median total errors in population: 843.48925
Error averages by case: (125.76897779999986 9.854 107.95232510000007 4.046 107.66957019999984 6.811 123.50708789999997 3.772 103.74849830000002 3.792 125.18552269999988 7.892 109.07580820000027 6.311 88.65183790000013 3.785 108.05375470000024 7.084 106.5770805000002 3.999 95.83907340000009 2.586 117.34582890000009 7.41 105.18262330000007 3.678 94.40127450000008 3.072 124.61828649999978 3.961 108.71779069999984 8.062 91.48626750000003 4.416 119.7301103000001 10.115 128.92842339999993 10.757 89.25225339999999 3.049 118.05244730000013 4.147 103.86930510000008 3.731 94.61563700000006 3.358 119.57257850000023 6.334 101.40071109999992 3.428)
Error minima by case: (2.1396 3 0.1803 1 0.5956 1 2.6185 1 0.3957 1 0.0043 1 3.0E-4 1 0.0 0 0.9957 1 0.0 0 0.0 0 0.0043 1 0.0417 1 0.0 0 11.5348 1 0.0043 1 0.0 0 0.1582 7 0.7603 8 0.0 0 1.6632 1 0.0 0 0.0 0 0.0043 1 0.0 0)
Average genome size in population (length): 140.635
Average program size in population (points): 141.635
Average percent parens in population: 0.007
Minimum age in population: 198.0543464669858
Maximum age in population: 202.9018590408568
Average age in population: 200.6240397862936
Median age in population: 200.6576891372555
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 7
Genome diversity (% unique Plush genomes):	 0.953
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 7
Syntactic diversity (% unique Push programs):	 0.953
Total error diversity:				 0.574
Error (vector) diversity:			 0.646
Behavioral diversity:				 0.647
--- Run Statistics ---
Number of program evaluations used so far: 147000
Number of point (instruction) evaluations so far: 370146101
--- Timings ---
Current time: 1529616570443 milliseconds
Total Time:         634.7 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       198.3 seconds, 31.2%
Fitness Testing:    347.4 seconds, 54.7%
Report:              88.8 seconds, 14.0%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 146
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 147
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 147
;;******************************
;; -*- Number IO problem report - generation 147
Test total error for best: 26434.931199999995
Test mean error for best: 13.21747
;;------------------------------
Outputs of best individual on training cases:
Correct output: -74.6179542037 | Program output: -51.6222543847
Correct output: 78.7609586813  | Program output: 51.7609586813 
Correct output: 3.0100598709   | Program output: 12.0057596899 
Correct output: -99.2368061293 | Program output: -56.2368061293
Correct output: 88.6808415603  | Program output: 69.6808415603 
Correct output: -151.1060419578 | Program output: -145.1103421388
Correct output: 56.004616184   | Program output: 28.000316003  
Correct output: 33.520660154   | Program output: 38.520660154  
Correct output: 42.238861085   | Program output: 15.2345609041 
Correct output: -49.0227893765 | Program output: -35.0227893765
Correct output: 103.4057483059 | Program output: 103.4057483059
Correct output: -106.1378273779 | Program output: -116.1421275589
Correct output: 37.9625599991  | Program output: 67.9625599991 
Correct output: 71.9208193203  | Program output: 74.9208193203 
Correct output: 173.5348464317 | Program output: 145.5348464317
Correct output: -77.0615185935 | Program output: -77.0658187744
Correct output: -20.7643622555 | Program output: -20.7643622555
Correct output: 1.9827630815   | Program output: -31.0172369185
Correct output: -39.1198682611 | Program output: -8.124168442  
Correct output: 1.1392376036   | Program output: 11.1392376036 
Correct output: 129.1930977679 | Program output: 103.1930977679
Correct output: 26.7496211861  | Program output: 57.7496211861 
Correct output: -11.2984801384 | Program output: -11.2984801384
Correct output: -136.1442960385 | Program output: -139.1485962195
Correct output: 143.0911996605 | Program output: 142.0911996605
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_mod} {:instruction float_pop} {:instruction integer_max} {:instruction float_sub} {:instruction integer_max} {:instruction in2} {:instruction integer_add} {:instruction integer_mod} {:instruction float_flush} {:instruction float_pop} {:instruction integer_max} {:instruction integer_flush} {:instruction in1} {:instruction in1} {:instruction float_stackdepth} {:instruction in2} {:instruction integer_add} {:instruction integer_add} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_add} {:instruction float_inc} {:instruction integer_max} {:instruction float_inc} {:instruction integer_add} {:instruction float_inc} {:instruction integer_add} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_add} {:instruction float_inc} {:instruction integer_add} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_add} {:instruction float_inc} {:instruction float_inc} {:instruction integer_sub} {:instruction float_inc} {:instruction float_inc} {:instruction integer_add} {:instruction float_inc} {:instruction integer_add} {:instruction float_inc} {:instruction float_inc} {:instruction integer_add} {:instruction float_inc} {:instruction float_inc} {:instruction integer_max} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_dup_times} {:instruction float_rot} {:instruction float_stackdepth} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_min} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_add} {:instruction float_inc} {:instruction float_inc} {:instruction integer_max} {:instruction float_inc} {:instruction float_dup} {:instruction float_inc} {:instruction 25} {:instruction float_stackdepth} {:instruction float_inc} {:instruction float_dup_times} {:instruction float_yank} {:instruction float_inc} {:instruction integer_add} {:instruction integer_yankdup} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_add} {:instruction integer_yankdup} {:instruction float_inc} {:instruction integer_max} {:instruction float_dup_times} {:instruction float_max} {:instruction float_dup_times} {:instruction float_stackdepth} {:instruction float_inc} {:instruction float_inc} {:instruction float_dup_times} {:instruction float_yank} {:instruction integer_add} {:instruction 25} {:instruction in2} {:instruction integer_add} {:instruction integer_yank} {:instruction float_dup_times} {:instruction float_dec} {:instruction in1} {:instruction 78.00430018095415} {:instruction float_rot} {:instruction float_dup_times} {:instruction float_rot} {:instruction integer_yankdup} {:instruction integer_add} {:instruction float_dec} {:instruction float_sin} {:instruction float_sub} {:instruction float_rot} {:instruction integer_shove} {:instruction float_rot} {:instruction float_sub} {:instruction float_rot} {:instruction integer_sub} {:instruction float_inc} {:instruction integer_swap} {:instruction integer_min} {:instruction print_float} {:instruction integer_pop} {:instruction float_pop})
Best program: (float_mod float_pop integer_max float_sub integer_max in2 integer_add integer_mod float_flush float_pop integer_max integer_flush in1 in1 float_stackdepth in2 integer_add integer_add float_inc float_inc float_inc float_inc integer_add float_inc integer_max float_inc integer_add float_inc integer_add float_inc float_inc float_inc float_inc float_inc float_inc integer_add float_inc integer_add float_inc float_inc float_inc float_inc integer_add float_inc float_inc integer_sub float_inc float_inc integer_add float_inc integer_add float_inc float_inc integer_add float_inc float_inc integer_max float_inc float_inc float_inc float_inc float_dup_times float_rot float_stackdepth float_inc float_inc float_inc float_inc float_inc float_inc float_inc integer_min float_inc float_inc float_inc float_inc float_inc integer_add float_inc float_inc integer_max float_inc float_dup float_inc 25 float_stackdepth float_inc float_dup_times float_yank float_inc integer_add integer_yankdup float_inc float_inc float_inc float_inc integer_add integer_yankdup float_inc integer_max float_dup_times float_max float_dup_times float_stackdepth float_inc float_inc float_dup_times float_yank integer_add 25 in2 integer_add integer_yank float_dup_times float_dec in1 78.00430018095415 float_rot float_dup_times float_rot integer_yankdup integer_add float_dec float_sin float_sub float_rot integer_shove float_rot float_sub float_rot integer_sub float_inc integer_swap integer_min print_float integer_pop float_pop)
Errors: [22.9957 8 27.0 2 8.9957 8 43.0 2 19.0 2 5.9957 9 28.0043 7 5.0 1 27.0043 8 14.0 2 0.0 0 10.0043 7 30.0 1 3.0 1 28.0 2 0.0043 6 0.0 0 33.0 9 30.9957 9 10.0 1 26.0 2 31.0 2 0.0 0 3.0043 6 1.0 1]
Total: 503.0043
Mean: 10.060086
Genome size: 137
Size: 138
Percent parens: 0.007
--- Population Statistics ---
Average total errors in population: 2833.0833702999994
Median total errors in population: 778.0215000000001
Error averages by case: (121.97095199999984 9.849 109.42001190000002 3.946 104.05442979999982 6.815 121.19594769999996 3.667 106.36777370000004 3.728 121.02085019999981 7.919 107.44350320000024 6.34 88.08853510000007 3.84 106.03282960000021 7.053 108.04340370000013 3.871 94.7411053000001 2.484 114.90808720000012 7.431 105.37880570000003 3.641 92.12541850000002 2.917 127.73390279999991 3.899 106.11743729999989 8.03 88.30151430000002 4.191 122.68864830000008 10.131 125.62259889999991 10.782 86.22251159999998 2.879 121.37289210000009 4.06 102.41731859999999 3.661 97.91124280000005 3.296 115.64620410000025 6.361 104.05544589999994 3.411)
Error minima by case: (1.4173 7 0.2433 1 0.0043 1 19.0 1 0.0 0 0.0043 1 0.9997 1 0.0 0 0.0043 1 0.0 0 0.0 0 0.0043 1 0.0 0 0.0 0 5.0 1 0.0043 1 0.0 0 0.0172 8 4.7603 8 0.1392 1 3.0 1 0.0 0 0.0 0 0.0043 2 0.0 0)
Average genome size in population (length): 139.881
Average program size in population (points): 140.881
Average percent parens in population: 0.007
Minimum age in population: 199.0543464669858
Maximum age in population: 203.9963392733853
Average age in population: 201.9285707773664
Median age in population: 201.9920991320021
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 10
Genome diversity (% unique Plush genomes):	 0.946
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 10
Syntactic diversity (% unique Push programs):	 0.946
Total error diversity:				 0.547
Error (vector) diversity:			 0.651
Behavioral diversity:				 0.652
--- Run Statistics ---
Number of program evaluations used so far: 148000
Number of point (instruction) evaluations so far: 373643126
--- Timings ---
Current time: 1529616575813 milliseconds
Total Time:         639.9 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       199.6 seconds, 31.2%
Fitness Testing:    350.6 seconds, 54.8%
Report:              89.6 seconds, 14.0%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 147
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 148
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 148
;;******************************
;; -*- Number IO problem report - generation 148
Test total error for best: 26434.931199999995
Test mean error for best: 13.21747
;;------------------------------
Outputs of best individual on training cases:
Correct output: -74.6179542037 | Program output: -51.6222543847
Correct output: 78.7609586813  | Program output: 51.7609586813 
Correct output: 3.0100598709   | Program output: 12.0057596899 
Correct output: -99.2368061293 | Program output: -56.2368061293
Correct output: 88.6808415603  | Program output: 69.6808415603 
Correct output: -151.1060419578 | Program output: -145.1103421388
Correct output: 56.004616184   | Program output: 28.000316003  
Correct output: 33.520660154   | Program output: 38.520660154  
Correct output: 42.238861085   | Program output: 15.2345609041 
Correct output: -49.0227893765 | Program output: -35.0227893765
Correct output: 103.4057483059 | Program output: 103.4057483059
Correct output: -106.1378273779 | Program output: -116.1421275589
Correct output: 37.9625599991  | Program output: 67.9625599991 
Correct output: 71.9208193203  | Program output: 74.9208193203 
Correct output: 173.5348464317 | Program output: 145.5348464317
Correct output: -77.0615185935 | Program output: -77.0658187744
Correct output: -20.7643622555 | Program output: -20.7643622555
Correct output: 1.9827630815   | Program output: -31.0172369185
Correct output: -39.1198682611 | Program output: -8.124168442  
Correct output: 1.1392376036   | Program output: 11.1392376036 
Correct output: 129.1930977679 | Program output: 103.1930977679
Correct output: 26.7496211861  | Program output: 57.7496211861 
Correct output: -11.2984801384 | Program output: -11.2984801384
Correct output: -136.1442960385 | Program output: -139.1485962195
Correct output: 143.0911996605 | Program output: 142.0911996605
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_mod} {:instruction float_pop} {:instruction float_mod} {:instruction float_pop} {:instruction integer_max} {:instruction integer_flush} {:instruction in1} {:instruction in1} {:instruction float_stackdepth} {:instruction in2} {:instruction integer_add} {:instruction integer_add} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_add} {:instruction float_inc} {:instruction integer_add} {:instruction float_inc} {:instruction integer_max} {:instruction float_inc} {:instruction integer_add} {:instruction float_inc} {:instruction integer_add} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_add} {:instruction float_inc} {:instruction integer_add} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_add} {:instruction integer_min} {:instruction float_inc} {:instruction integer_sub} {:instruction float_inc} {:instruction float_inc} {:instruction integer_add} {:instruction float_inc} {:instruction float_inc} {:instruction integer_add} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_add} {:instruction float_inc} {:instruction float_inc} {:instruction integer_max} {:instruction integer_swap} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_dup_times} {:instruction float_rot} {:instruction float_stackdepth} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_min} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_add} {:instruction float_inc} {:instruction integer_max} {:instruction float_inc} {:instruction float_dup} {:instruction float_inc} {:instruction 25} {:instruction float_stackdepth} {:instruction float_inc} {:instruction float_dup_times} {:instruction float_yank} {:instruction float_inc} {:instruction integer_add} {:instruction integer_yankdup} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_add} {:instruction integer_yankdup} {:instruction float_inc} {:instruction integer_max} {:instruction float_dup_times} {:instruction float_max} {:instruction float_dup_times} {:instruction float_stackdepth} {:instruction float_inc} {:instruction float_inc} {:instruction float_dup_times} {:instruction float_dup_items} {:instruction 25} {:instruction in2} {:instruction integer_add} {:instruction integer_yank} {:instruction float_dup_times} {:instruction integer_swap} {:instruction in1} {:instruction 78.00430018095415} {:instruction float_rot} {:instruction float_dup_times} {:instruction float_rot} {:instruction integer_yankdup} {:instruction integer_yank} {:instruction float_dec} {:instruction integer_rot} {:instruction float_sub} {:instruction float_rot} {:instruction integer_shove} {:instruction float_rot} {:instruction float_sub} {:instruction float_rot} {:instruction integer_sub} {:instruction float_inc} {:instruction integer_swap} {:instruction integer_min} {:instruction print_float} {:instruction integer_dec} {:instruction integer_stackdepth} {:instruction float_yank})
Best program: (float_mod float_pop float_mod float_pop integer_max integer_flush in1 in1 float_stackdepth in2 integer_add integer_add float_inc float_inc float_inc integer_add float_inc integer_add float_inc integer_max float_inc integer_add float_inc integer_add float_inc float_inc float_inc float_inc integer_add float_inc integer_add float_inc float_inc float_inc float_inc float_inc integer_add integer_min float_inc integer_sub float_inc float_inc integer_add float_inc float_inc integer_add float_inc float_inc float_inc float_inc integer_add float_inc float_inc integer_max integer_swap float_inc float_inc float_inc float_dup_times float_rot float_stackdepth float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc integer_min float_inc float_inc float_inc float_inc float_inc integer_add float_inc integer_max float_inc float_dup float_inc 25 float_stackdepth float_inc float_dup_times float_yank float_inc integer_add integer_yankdup float_inc float_inc float_inc float_inc integer_add integer_yankdup float_inc integer_max float_dup_times float_max float_dup_times float_stackdepth float_inc float_inc float_dup_times float_dup_items 25 in2 integer_add integer_yank float_dup_times integer_swap in1 78.00430018095415 float_rot float_dup_times float_rot integer_yankdup integer_yank float_dec integer_rot float_sub float_rot integer_shove float_rot float_sub float_rot integer_sub float_inc integer_swap integer_min print_float integer_dec integer_stackdepth float_yank)
Errors: [22.9957 8 27.0 2 8.9957 8 43.0 2 19.0 2 5.9957 9 28.0043 7 5.0 1 27.0043 8 14.0 2 0.0 0 10.0043 7 30.0 1 3.0 1 28.0 2 0.0043 6 0.0 0 33.0 9 30.9957 9 10.0 1 26.0 2 31.0 2 0.0 0 3.0043 6 1.0 1]
Total: 503.0043
Mean: 10.060086
Genome size: 134
Size: 135
Percent parens: 0.007
--- Population Statistics ---
Average total errors in population: 3093.590286
Median total errors in population: 1013.51075
Error averages by case: (128.7925771999999 9.934 118.07457510000002 4.2 109.68686329999984 6.715 131.32768329999996 3.788 117.08302350000005 3.832 131.47355059999987 7.842 109.56087780000027 6.151 100.42408120000009 4.113 108.79167140000023 6.925 121.67625970000024 4.086 110.72292360000007 2.725 123.53498650000004 7.377 116.26946269999999 3.722 108.77126940000004 3.105 140.4003006999999 4.007 113.79733319999991 7.745 104.0256973 4.362 136.3349237000001 10.195 131.89493639999992 10.846 95.59444529999998 3.085 133.46599300000014 4.194 111.83720090000003 3.763 111.62296710000014 3.461 126.08889450000022 6.354 116.32178859999989 3.489)
Error minima by case: (2.3863 3 0.2433 1 0.0043 1 16.2368 1 3.3192 1 0.0043 1 3.0E-4 1 0.0 0 1.0043 1 0.0 0 0.0 0 0.9957 1 0.0 0 0.0 0 3.4652 1 0.0043 1 0.0 0 0.0172 8 2.7603 8 0.0 0 8.4366 1 0.0 0 0.0 0 0.0043 1 0.0 0)
Average genome size in population (length): 139.095
Average program size in population (points): 140.095
Average percent parens in population: 0.007
Minimum age in population: 200.0543464669858
Maximum age in population: 205.3402401283143
Average age in population: 203.3058560145535
Median age in population: 203.3599095167891
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 14
Genome diversity (% unique Plush genomes):	 0.942
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 14
Syntactic diversity (% unique Push programs):	 0.942
Total error diversity:				 0.564
Error (vector) diversity:			 0.663
Behavioral diversity:				 0.664
--- Run Statistics ---
Number of program evaluations used so far: 149000
Number of point (instruction) evaluations so far: 377120501
--- Timings ---
Current time: 1529616581077 milliseconds
Total Time:         645.3 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       201.0 seconds, 31.2%
Fitness Testing:    353.7 seconds, 54.8%
Report:              90.4 seconds, 14.0%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 148
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 149
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 149
;;******************************
;; -*- Number IO problem report - generation 149
Test total error for best: 26434.931199999995
Test mean error for best: 13.21747
;;------------------------------
Outputs of best individual on training cases:
Correct output: -74.6179542037 | Program output: -51.6222543847
Correct output: 78.7609586813  | Program output: 51.7609586813 
Correct output: 3.0100598709   | Program output: 12.0057596899 
Correct output: -99.2368061293 | Program output: -56.2368061293
Correct output: 88.6808415603  | Program output: 69.6808415603 
Correct output: -151.1060419578 | Program output: -145.1103421388
Correct output: 56.004616184   | Program output: 28.000316003  
Correct output: 33.520660154   | Program output: 38.520660154  
Correct output: 42.238861085   | Program output: 15.2345609041 
Correct output: -49.0227893765 | Program output: -35.0227893765
Correct output: 103.4057483059 | Program output: 103.4057483059
Correct output: -106.1378273779 | Program output: -116.1421275589
Correct output: 37.9625599991  | Program output: 67.9625599991 
Correct output: 71.9208193203  | Program output: 74.9208193203 
Correct output: 173.5348464317 | Program output: 145.5348464317
Correct output: -77.0615185935 | Program output: -77.0658187744
Correct output: -20.7643622555 | Program output: -20.7643622555
Correct output: 1.9827630815   | Program output: -31.0172369185
Correct output: -39.1198682611 | Program output: -8.124168442  
Correct output: 1.1392376036   | Program output: 11.1392376036 
Correct output: 129.1930977679 | Program output: 103.1930977679
Correct output: 26.7496211861  | Program output: 57.7496211861 
Correct output: -11.2984801384 | Program output: -11.2984801384
Correct output: -136.1442960385 | Program output: -139.1485962195
Correct output: 143.0911996605 | Program output: 142.0911996605
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_sin} {:instruction print_float} {:instruction float_inc} {:instruction in2} {:instruction float_pop} {:instruction integer_mod} {:instruction float_flush} {:instruction float_pop} {:instruction integer_max} {:instruction integer_flush} {:instruction in1} {:instruction in1} {:instruction float_stackdepth} {:instruction in2} {:instruction float_inc} {:instruction integer_add} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_add} {:instruction float_inc} {:instruction integer_max} {:instruction float_inc} {:instruction integer_add} {:instruction float_inc} {:instruction integer_add} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_add} {:instruction float_inc} {:instruction integer_add} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_add} {:instruction float_inc} {:instruction float_inc} {:instruction integer_sub} {:instruction float_inc} {:instruction float_inc} {:instruction integer_add} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_add} {:instruction float_inc} {:instruction float_inc} {:instruction integer_max} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_dup_times} {:instruction float_rot} {:instruction float_stackdepth} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_mult} {:instruction float_inc} {:instruction float_inc} {:instruction integer_min} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_add} {:instruction float_inc} {:instruction float_inc} {:instruction integer_max} {:instruction float_inc} {:instruction float_dup} {:instruction float_inc} {:instruction 25} {:instruction float_stackdepth} {:instruction float_inc} {:instruction float_dup_times} {:instruction float_yank} {:instruction float_inc} {:instruction integer_add} {:instruction integer_yankdup} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_add} {:instruction integer_yankdup} {:instruction float_inc} {:instruction integer_max} {:instruction float_dup_times} {:instruction float_max} {:instruction float_dup_times} {:instruction float_stackdepth} {:instruction float_inc} {:instruction float_inc} {:instruction float_dup_times} {:instruction float_dup_items} {:instruction integer_add} {:instruction 25} {:instruction in2} {:instruction integer_add} {:instruction integer_yank} {:instruction float_dup_times} {:instruction integer_swap} {:instruction in1} {:instruction 78.00430018095415} {:instruction float_rot} {:instruction float_dup_times} {:instruction float_rot} {:instruction integer_flush} {:instruction integer_add} {:instruction float_dec} {:instruction float_inc} {:instruction float_sub} {:instruction float_rot} {:instruction integer_shove} {:instruction float_rot} {:instruction float_sub} {:instruction float_rot} {:instruction integer_sub} {:instruction float_inc} {:instruction integer_swap} {:instruction integer_min} {:instruction print_float} {:instruction integer_dec} {:instruction integer_stackdepth} {:instruction integer_min} {:instruction float_yank} {:instruction float_div} {:instruction float_mult})
Best program: (float_sin print_float float_inc in2 float_pop integer_mod float_flush float_pop integer_max integer_flush in1 in1 float_stackdepth in2 float_inc integer_add float_inc float_inc float_inc float_inc integer_add float_inc integer_max float_inc integer_add float_inc integer_add float_inc float_inc float_inc float_inc integer_add float_inc integer_add float_inc float_inc float_inc float_inc integer_add float_inc float_inc integer_sub float_inc float_inc integer_add float_inc float_inc float_inc float_inc integer_add float_inc float_inc integer_max float_inc float_inc float_inc float_inc float_dup_times float_rot float_stackdepth float_inc float_inc float_inc float_inc float_inc integer_mult float_inc float_inc integer_min float_inc float_inc float_inc float_inc float_inc integer_add float_inc float_inc integer_max float_inc float_dup float_inc 25 float_stackdepth float_inc float_dup_times float_yank float_inc integer_add integer_yankdup float_inc float_inc float_inc float_inc integer_add integer_yankdup float_inc integer_max float_dup_times float_max float_dup_times float_stackdepth float_inc float_inc float_dup_times float_dup_items integer_add 25 in2 integer_add integer_yank float_dup_times integer_swap in1 78.00430018095415 float_rot float_dup_times float_rot integer_flush integer_add float_dec float_inc float_sub float_rot integer_shove float_rot float_sub float_rot integer_sub float_inc integer_swap integer_min print_float integer_dec integer_stackdepth integer_min float_yank float_div float_mult)
Errors: [22.9957 8 27.0 2 8.9957 8 43.0 2 19.0 2 5.9957 9 28.0043 7 5.0 1 27.0043 8 14.0 2 0.0 0 10.0043 7 30.0 1 3.0 1 28.0 2 0.0043 6 0.0 0 33.0 9 30.9957 9 10.0 1 26.0 2 31.0 2 0.0 0 3.0043 6 1.0 1]
Total: 503.0043
Mean: 10.060086
Genome size: 138
Size: 139
Percent parens: 0.007
--- Population Statistics ---
Average total errors in population: 2685.7521406999995
Median total errors in population: 1004.85415
Error averages by case: (117.90783769999986 9.945 102.44858869999999 4.158 101.63784809999979 6.623 117.01779539999997 3.811 99.24257230000006 3.823 116.9538896999998 7.726 102.13077520000029 6.086 81.9413991 4.007 100.37475050000018 6.794 99.85956390000011 3.953 87.87420240000012 2.687 109.50323070000012 7.221 97.72685840000004 3.682 85.55044910000004 3.1 120.0516576999999 4.015 102.97521119999999 7.785 82.79215590000004 4.398 114.97219710000003 9.937 121.76838129999985 10.85 82.29660289999995 3.09 113.09316630000009 4.196 95.57889350000002 3.8 89.09330220000001 3.339 111.7098181000002 6.286 96.4669933 3.472)
Error minima by case: (1.3702 7 0.1517 1 0.0043 1 6.2368 1 0.6808 1 0.9957 2 0.0043 1 0.0 0 0.9957 1 1.0 1 0.0 0 0.0043 1 0.0 0 0.0 0 11.0 1 0.0043 1 0.0 0 0.0172 8 2.3379 8 0.0 0 8.1931 1 0.0 0 0.0 0 0.0043 1 0.0 0)
Average genome size in population (length): 138.226
Average program size in population (points): 139.226
Average percent parens in population: 0.007
Minimum age in population: 202.2753964237254
Maximum age in population: 206.6179379727425
Average age in population: 204.6120307469815
Median age in population: 204.6410065099461
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 14
Genome diversity (% unique Plush genomes):	 0.929
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 14
Syntactic diversity (% unique Push programs):	 0.929
Total error diversity:				 0.561
Error (vector) diversity:			 0.645
Behavioral diversity:				 0.646
--- Run Statistics ---
Number of program evaluations used so far: 150000
Number of point (instruction) evaluations so far: 380576201
--- Timings ---
Current time: 1529616586330 milliseconds
Total Time:         650.5 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       202.4 seconds, 31.1%
Fitness Testing:    356.9 seconds, 54.9%
Report:              91.1 seconds, 14.0%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 149
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 150
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 150
;;******************************
;; -*- Number IO problem report - generation 150
Test total error for best: 26434.931199999995
Test mean error for best: 13.21747
;;------------------------------
Outputs of best individual on training cases:
Correct output: -74.6179542037 | Program output: -51.6222543847
Correct output: 78.7609586813  | Program output: 51.7609586813 
Correct output: 3.0100598709   | Program output: 12.0057596899 
Correct output: -99.2368061293 | Program output: -56.2368061293
Correct output: 88.6808415603  | Program output: 69.6808415603 
Correct output: -151.1060419578 | Program output: -145.1103421388
Correct output: 56.004616184   | Program output: 28.000316003  
Correct output: 33.520660154   | Program output: 38.520660154  
Correct output: 42.238861085   | Program output: 15.2345609041 
Correct output: -49.0227893765 | Program output: -35.0227893765
Correct output: 103.4057483059 | Program output: 103.4057483059
Correct output: -106.1378273779 | Program output: -116.1421275589
Correct output: 37.9625599991  | Program output: 67.9625599991 
Correct output: 71.9208193203  | Program output: 74.9208193203 
Correct output: 173.5348464317 | Program output: 145.5348464317
Correct output: -77.0615185935 | Program output: -77.0658187744
Correct output: -20.7643622555 | Program output: -20.7643622555
Correct output: 1.9827630815   | Program output: -31.0172369185
Correct output: -39.1198682611 | Program output: -8.124168442  
Correct output: 1.1392376036   | Program output: 11.1392376036 
Correct output: 129.1930977679 | Program output: 103.1930977679
Correct output: 26.7496211861  | Program output: 57.7496211861 
Correct output: -11.2984801384 | Program output: -11.2984801384
Correct output: -136.1442960385 | Program output: -139.1485962195
Correct output: 143.0911996605 | Program output: 142.0911996605
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_mod} {:instruction float_pop} {:instruction integer_max} {:instruction float_sub} {:instruction integer_max} {:instruction in2} {:instruction float_pop} {:instruction integer_mod} {:instruction float_flush} {:instruction float_pop} {:instruction integer_max} {:instruction integer_flush} {:instruction in1} {:instruction in1} {:instruction float_stackdepth} {:instruction in2} {:instruction float_rot} {:instruction integer_add} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_add} {:instruction float_inc} {:instruction integer_max} {:instruction float_inc} {:instruction integer_add} {:instruction float_inc} {:instruction integer_add} {:instruction integer_add} {:instruction float_inc} {:instruction integer_add} {:instruction float_inc} {:instruction integer_max} {:instruction float_inc} {:instruction integer_add} {:instruction float_inc} {:instruction integer_add} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_add} {:instruction float_inc} {:instruction integer_add} {:instruction float_inc} {:instruction float_inc} {:instruction integer_yankdup} {:instruction float_inc} {:instruction float_inc} {:instruction integer_add} {:instruction float_inc} {:instruction integer_rot} {:instruction integer_add} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_dup_times} {:instruction float_inc} {:instruction integer_max} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_dup_times} {:instruction float_rot} {:instruction float_stackdepth} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_min} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_max} {:instruction float_inc} {:instruction float_dup} {:instruction float_inc} {:instruction 25} {:instruction float_stackdepth} {:instruction float_inc} {:instruction float_dup_times} {:instruction float_yank} {:instruction float_inc} {:instruction integer_add} {:instruction integer_yankdup} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_add} {:instruction integer_yankdup} {:instruction float_inc} {:instruction integer_max} {:instruction float_dup_times} {:instruction float_max} {:instruction float_dup_times} {:instruction float_stackdepth} {:instruction float_inc} {:instruction float_inc} {:instruction float_dup_times} {:instruction float_dup_items} {:instruction integer_add} {:instruction 25} {:instruction in2} {:instruction integer_add} {:instruction integer_yank} {:instruction float_dup_times} {:instruction integer_swap} {:instruction float_dup_times} {:instruction integer_swap} {:instruction in1} {:instruction 78.00430018095415} {:instruction float_rot} {:instruction float_dup_times} {:instruction float_rot} {:instruction integer_yankdup} {:instruction integer_add} {:instruction float_dec} {:instruction float_inc} {:instruction float_sub} {:instruction float_rot} {:instruction integer_shove} {:instruction float_rot} {:instruction float_sub} {:instruction float_rot} {:instruction integer_sub} {:instruction float_inc} {:instruction integer_swap} {:instruction integer_min} {:instruction print_float} {:instruction integer_dec} {:instruction integer_stackdepth} {:instruction float_yank} {:instruction integer_flush} {:instruction float_mult})
Best program: (float_mod float_pop integer_max float_sub integer_max in2 float_pop integer_mod float_flush float_pop integer_max integer_flush in1 in1 float_stackdepth in2 float_rot integer_add float_inc float_inc float_inc float_inc integer_add float_inc integer_max float_inc integer_add float_inc integer_add integer_add float_inc integer_add float_inc integer_max float_inc integer_add float_inc integer_add float_inc float_inc float_inc float_inc integer_add float_inc integer_add float_inc float_inc integer_yankdup float_inc float_inc integer_add float_inc integer_rot integer_add float_inc float_inc float_inc float_inc float_inc integer_dup_times float_inc integer_max float_inc float_inc float_inc float_inc float_dup_times float_rot float_stackdepth float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc integer_min float_inc float_inc float_inc float_inc float_inc float_inc integer_max float_inc float_dup float_inc 25 float_stackdepth float_inc float_dup_times float_yank float_inc integer_add integer_yankdup float_inc float_inc float_inc float_inc integer_add integer_yankdup float_inc integer_max float_dup_times float_max float_dup_times float_stackdepth float_inc float_inc float_dup_times float_dup_items integer_add 25 in2 integer_add integer_yank float_dup_times integer_swap float_dup_times integer_swap in1 78.00430018095415 float_rot float_dup_times float_rot integer_yankdup integer_add float_dec float_inc float_sub float_rot integer_shove float_rot float_sub float_rot integer_sub float_inc integer_swap integer_min print_float integer_dec integer_stackdepth float_yank integer_flush float_mult)
Errors: [22.9957 8 27.0 2 8.9957 8 43.0 2 19.0 2 5.9957 9 28.0043 7 5.0 1 27.0043 8 14.0 2 0.0 0 10.0043 7 30.0 1 3.0 1 28.0 2 0.0043 6 0.0 0 33.0 9 30.9957 9 10.0 1 26.0 2 31.0 2 0.0 0 3.0043 6 1.0 1]
Total: 503.0043
Mean: 10.060086
Genome size: 146
Size: 147
Percent parens: 0.007
--- Population Statistics ---
Average total errors in population: 2901.486042600001
Median total errors in population: 1030.0
Error averages by case: (128.33573069999986 10.004 109.721323 4.259 110.05156449999983 6.783 125.98203379999993 3.93 107.0759991000001 3.915 127.29048729999985 7.867 108.36637450000023 6.185 88.47723020000006 4.074 108.5578417000002 6.894 109.38535770000016 4.089 97.10348940000016 2.8 118.53657500000004 7.284 107.6503409 3.791 94.17540360000002 3.184 128.27550439999985 4.098 110.56997559999994 7.877 90.69193470000002 4.495 122.39213830000011 10.05 132.4592037999999 10.917 90.2657001 3.187 120.15590510000011 4.228 104.56738270000002 3.872 98.00520890000003 3.465 121.57361320000022 6.415 104.61272439999992 3.544)
Error minima by case: (4.9957 3 0.2433 1 0.0043 1 14.6804 1 1.0 1 0.0043 1 3.0E-4 2 0.0 0 1.0043 1 0.0 0 0.0 0 0.0043 1 0.0 0 0.0 0 8.0 1 0.0043 1 0.0 0 0.0172 7 1.7603 8 0.0 0 1.8596 1 0.2224 1 0.0 0 0.0043 1 0.0 0)
Average genome size in population (length): 137.969
Average program size in population (points): 138.969
Average percent parens in population: 0.007
Minimum age in population: 203.2753964237254
Maximum age in population: 208.0274833594765
Average age in population: 205.9689462586967
Median age in population: 206.0621834417893
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 22
Genome diversity (% unique Plush genomes):	 0.924
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 22
Syntactic diversity (% unique Push programs):	 0.924
Total error diversity:				 0.561
Error (vector) diversity:			 0.633
Behavioral diversity:				 0.633
--- Run Statistics ---
Number of program evaluations used so far: 151000
Number of point (instruction) evaluations so far: 384025426
--- Timings ---
Current time: 1529616591606 milliseconds
Total Time:         655.8 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       203.8 seconds, 31.1%
Fitness Testing:    360.0 seconds, 54.9%
Report:              91.9 seconds, 14.0%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 150
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 151
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 151
;;******************************
;; -*- Number IO problem report - generation 151
Test total error for best: 26434.931199999995
Test mean error for best: 13.21747
;;------------------------------
Outputs of best individual on training cases:
Correct output: -74.6179542037 | Program output: -51.6222543847
Correct output: 78.7609586813  | Program output: 51.7609586813 
Correct output: 3.0100598709   | Program output: 12.0057596899 
Correct output: -99.2368061293 | Program output: -56.2368061293
Correct output: 88.6808415603  | Program output: 69.6808415603 
Correct output: -151.1060419578 | Program output: -145.1103421388
Correct output: 56.004616184   | Program output: 28.000316003  
Correct output: 33.520660154   | Program output: 38.520660154  
Correct output: 42.238861085   | Program output: 15.2345609041 
Correct output: -49.0227893765 | Program output: -35.0227893765
Correct output: 103.4057483059 | Program output: 103.4057483059
Correct output: -106.1378273779 | Program output: -116.1421275589
Correct output: 37.9625599991  | Program output: 67.9625599991 
Correct output: 71.9208193203  | Program output: 74.9208193203 
Correct output: 173.5348464317 | Program output: 145.5348464317
Correct output: -77.0615185935 | Program output: -77.0658187744
Correct output: -20.7643622555 | Program output: -20.7643622555
Correct output: 1.9827630815   | Program output: -31.0172369185
Correct output: -39.1198682611 | Program output: -8.124168442  
Correct output: 1.1392376036   | Program output: 11.1392376036 
Correct output: 129.1930977679 | Program output: 103.1930977679
Correct output: 26.7496211861  | Program output: 57.7496211861 
Correct output: -11.2984801384 | Program output: -11.2984801384
Correct output: -136.1442960385 | Program output: -139.1485962195
Correct output: 143.0911996605 | Program output: 142.0911996605
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_mod} {:instruction float_pop} {:instruction integer_max} {:instruction float_sub} {:instruction integer_max} {:instruction in2} {:instruction float_pop} {:instruction integer_mod} {:instruction float_flush} {:instruction float_pop} {:instruction integer_max} {:instruction integer_flush} {:instruction in1} {:instruction in1} {:instruction float_stackdepth} {:instruction in2} {:instruction float_rot} {:instruction integer_add} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_add} {:instruction float_inc} {:instruction integer_max} {:instruction float_inc} {:instruction integer_add} {:instruction float_inc} {:instruction integer_add} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_add} {:instruction float_inc} {:instruction integer_add} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_add} {:instruction float_inc} {:instruction float_inc} {:instruction integer_sub} {:instruction float_inc} {:instruction float_inc} {:instruction integer_add} {:instruction float_inc} {:instruction integer_add} {:instruction float_inc} {:instruction float_inc} {:instruction integer_add} {:instruction float_inc} {:instruction float_inc} {:instruction integer_max} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_dup_times} {:instruction float_rot} {:instruction float_stackdepth} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_min} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_add} {:instruction float_inc} {:instruction float_inc} {:instruction integer_max} {:instruction float_inc} {:instruction float_dup} {:instruction float_inc} {:instruction 25} {:instruction float_stackdepth} {:instruction float_inc} {:instruction float_dup_times} {:instruction float_yank} {:instruction float_inc} {:instruction integer_add} {:instruction integer_yankdup} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_add} {:instruction integer_yankdup} {:instruction float_inc} {:instruction integer_max} {:instruction float_dup_times} {:instruction float_max} {:instruction float_dup_times} {:instruction float_stackdepth} {:instruction float_inc} {:instruction float_inc} {:instruction float_dup_times} {:instruction float_yank} {:instruction integer_add} {:instruction 25} {:instruction in2} {:instruction integer_add} {:instruction integer_yank} {:instruction float_dup_times} {:instruction float_dec} {:instruction float_dup} {:instruction 78.00430018095415} {:instruction float_rot} {:instruction float_dup_times} {:instruction float_rot} {:instruction integer_yankdup} {:instruction integer_add} {:instruction float_sin} {:instruction float_inc} {:instruction float_sub} {:instruction float_rot} {:instruction integer_shove} {:instruction float_rot} {:instruction float_sub} {:instruction float_rot} {:instruction integer_sub} {:instruction float_inc} {:instruction integer_swap} {:instruction integer_min} {:instruction print_float} {:instruction integer_pop} {:instruction float_pop})
Best program: (float_mod float_pop integer_max float_sub integer_max in2 float_pop integer_mod float_flush float_pop integer_max integer_flush in1 in1 float_stackdepth in2 float_rot integer_add float_inc float_inc float_inc float_inc integer_add float_inc integer_max float_inc integer_add float_inc integer_add float_inc float_inc float_inc float_inc float_inc float_inc integer_add float_inc integer_add float_inc float_inc float_inc float_inc integer_add float_inc float_inc integer_sub float_inc float_inc integer_add float_inc integer_add float_inc float_inc integer_add float_inc float_inc integer_max float_inc float_inc float_inc float_inc float_dup_times float_rot float_stackdepth float_inc float_inc float_inc float_inc float_inc float_inc float_inc integer_min float_inc float_inc float_inc float_inc float_inc integer_add float_inc float_inc integer_max float_inc float_dup float_inc 25 float_stackdepth float_inc float_dup_times float_yank float_inc integer_add integer_yankdup float_inc float_inc float_inc float_inc integer_add integer_yankdup float_inc integer_max float_dup_times float_max float_dup_times float_stackdepth float_inc float_inc float_dup_times float_yank integer_add 25 in2 integer_add integer_yank float_dup_times float_dec float_dup 78.00430018095415 float_rot float_dup_times float_rot integer_yankdup integer_add float_sin float_inc float_sub float_rot integer_shove float_rot float_sub float_rot integer_sub float_inc integer_swap integer_min print_float integer_pop float_pop)
Errors: [22.9957 8 27.0 2 8.9957 8 43.0 2 19.0 2 5.9957 9 28.0043 7 5.0 1 27.0043 8 14.0 2 0.0 0 10.0043 7 30.0 1 3.0 1 28.0 2 0.0043 6 0.0 0 33.0 9 30.9957 9 10.0 1 26.0 2 31.0 2 0.0 0 3.0043 6 1.0 1]
Total: 503.0043
Mean: 10.060086
Genome size: 137
Size: 138
Percent parens: 0.007
--- Population Statistics ---
Average total errors in population: 2970.6336897
Median total errors in population: 868.74045
Error averages by case: (131.74644619999992 9.935 110.23269099999999 3.905 115.51861919999988 6.946 132.91670530000002 3.886 106.39899170000007 3.608 133.43453089999983 7.938 118.36734890000021 6.275 90.65772170000004 3.746 115.57605920000017 6.992 108.11239800000017 3.812 98.67124610000009 2.548 126.22828510000005 7.304 107.39985080000007 3.5 97.11966400000007 3.027 126.40757879999987 3.764 116.64796289999997 7.922 95.12446120000001 4.411 123.04943600000003 10.054 137.39615429999995 10.797 91.14207009999998 2.923 121.0961348000001 3.944 104.3799754 3.572 97.90568640000005 3.143 128.3798058000002 6.479 103.07186589999993 3.221)
Error minima by case: (3.5063 7 0.2433 1 0.0043 1 4.2368 1 2.0 1 0.0043 2 3.0E-4 1 0.0 0 1.0043 1 0.0 0 0.0 0 0.0043 1 0.0 0 0.0 0 11.0 1 0.0043 1 0.0 0 0.0354 8 11.9234 8 0.1392 1 0.8069 1 0.0 0 0.0 0 0.0043 1 0.0 0)
Average genome size in population (length): 136.691
Average program size in population (points): 137.691
Average percent parens in population: 0.007
Minimum age in population: 204.3547039894218
Maximum age in population: 209.3389671443133
Average age in population: 207.1985806535207
Median age in population: 207.2460955534965
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 16
Genome diversity (% unique Plush genomes):	 0.925
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 16
Syntactic diversity (% unique Push programs):	 0.925
Total error diversity:				 0.545
Error (vector) diversity:			 0.638
Behavioral diversity:				 0.638
--- Run Statistics ---
Number of program evaluations used so far: 152000
Number of point (instruction) evaluations so far: 387442751
--- Timings ---
Current time: 1529616596854 milliseconds
Total Time:         661.1 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       205.1 seconds, 31.0%
Fitness Testing:    363.2 seconds, 54.9%
Report:              92.6 seconds, 14.0%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 151
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 152
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 152
;;******************************
;; -*- Number IO problem report - generation 152
Test total error for best: 25843.89679999999
Test mean error for best: 12.92195
;;------------------------------
Outputs of best individual on training cases:
Correct output: -74.6179542037 | Program output: -51.6222543847
Correct output: 78.7609586813  | Program output: 51.7609586813 
Correct output: 3.0100598709   | Program output: 12.0057596899 
Correct output: -99.2368061293 | Program output: -60.2368061293
Correct output: 88.6808415603  | Program output: 69.6808415603 
Correct output: -151.1060419578 | Program output: -145.1103421388
Correct output: 56.004616184   | Program output: 28.000316003  
Correct output: 33.520660154   | Program output: 38.520660154  
Correct output: 42.238861085   | Program output: 15.2345609041 
Correct output: -49.0227893765 | Program output: -35.0227893765
Correct output: 103.4057483059 | Program output: 103.4057483059
Correct output: -106.1378273779 | Program output: -116.1421275589
Correct output: 37.9625599991  | Program output: 67.9625599991 
Correct output: 71.9208193203  | Program output: 74.9208193203 
Correct output: 173.5348464317 | Program output: 145.5348464317
Correct output: -77.0615185935 | Program output: -77.0658187744
Correct output: -20.7643622555 | Program output: -20.7643622555
Correct output: 1.9827630815   | Program output: -31.0172369185
Correct output: -39.1198682611 | Program output: -8.124168442  
Correct output: 1.1392376036   | Program output: 11.1392376036 
Correct output: 129.1930977679 | Program output: 103.1930977679
Correct output: 26.7496211861  | Program output: 57.7496211861 
Correct output: -11.2984801384 | Program output: -11.2984801384
Correct output: -136.1442960385 | Program output: -139.1485962195
Correct output: 143.0911996605 | Program output: 142.0911996605
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_mod} {:instruction integer_mod} {:instruction integer_max} {:instruction in1} {:instruction in1} {:instruction float_stackdepth} {:instruction in2} {:instruction integer_add} {:instruction integer_add} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_add} {:instruction float_inc} {:instruction integer_max} {:instruction float_inc} {:instruction integer_add} {:instruction float_inc} {:instruction integer_add} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_add} {:instruction float_inc} {:instruction integer_add} {:instruction integer_add} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_add} {:instruction float_inc} {:instruction float_inc} {:instruction integer_sub} {:instruction float_inc} {:instruction float_inc} {:instruction integer_add} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_add} {:instruction float_inc} {:instruction float_inc} {:instruction integer_max} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_dup_times} {:instruction float_rot} {:instruction float_stackdepth} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_rot} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_min} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_add} {:instruction float_inc} {:instruction float_inc} {:instruction integer_max} {:instruction float_inc} {:instruction float_dup} {:instruction float_inc} {:instruction 26} {:instruction float_stackdepth} {:instruction float_inc} {:instruction float_dup_times} {:instruction float_yank} {:instruction float_inc} {:instruction in2} {:instruction integer_yankdup} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_add} {:instruction integer_yankdup} {:instruction float_inc} {:instruction integer_max} {:instruction float_dup_times} {:instruction float_max} {:instruction float_dup_times} {:instruction float_swap} {:instruction float_inc} {:instruction float_inc} {:instruction float_dup_times} {:instruction float_dup_items} {:instruction integer_add} {:instruction 27} {:instruction in2} {:instruction integer_add} {:instruction integer_yank} {:instruction float_dup_times} {:instruction integer_swap} {:instruction in1} {:instruction 78.00430018095415} {:instruction float_rot} {:instruction float_dup_times} {:instruction float_rot} {:instruction integer_yankdup} {:instruction integer_add} {:instruction float_dec} {:instruction float_inc} {:instruction float_sub} {:instruction float_rot} {:instruction integer_shove} {:instruction float_rot} {:instruction float_sub} {:instruction float_rot} {:instruction integer_sub} {:instruction float_inc} {:instruction integer_swap} {:instruction integer_min} {:instruction print_float} {:instruction integer_dec} {:instruction integer_stackdepth} {:instruction float_yank})
Best program: (float_mod integer_mod integer_max in1 in1 float_stackdepth in2 integer_add integer_add float_inc float_inc float_inc float_inc float_inc integer_add float_inc integer_max float_inc integer_add float_inc integer_add float_inc float_inc float_inc float_inc integer_add float_inc integer_add integer_add float_inc float_inc float_inc float_inc integer_add float_inc float_inc integer_sub float_inc float_inc integer_add float_inc float_inc float_inc float_inc integer_add float_inc float_inc integer_max float_inc float_inc float_inc float_inc float_dup_times float_rot float_stackdepth float_inc float_inc float_inc integer_rot float_inc float_inc float_inc float_inc integer_min float_inc float_inc float_inc float_inc float_inc integer_add float_inc float_inc integer_max float_inc float_dup float_inc 26 float_stackdepth float_inc float_dup_times float_yank float_inc in2 integer_yankdup float_inc float_inc float_inc float_inc integer_add integer_yankdup float_inc integer_max float_dup_times float_max float_dup_times float_swap float_inc float_inc float_dup_times float_dup_items integer_add 27 in2 integer_add integer_yank float_dup_times integer_swap in1 78.00430018095415 float_rot float_dup_times float_rot integer_yankdup integer_add float_dec float_inc float_sub float_rot integer_shove float_rot float_sub float_rot integer_sub float_inc integer_swap integer_min print_float integer_dec integer_stackdepth float_yank)
Errors: [22.9957 8 27.0 2 8.9957 8 39.0 2 19.0 2 5.9957 9 28.0043 7 5.0 1 27.0043 8 14.0 2 0.0 0 10.0043 7 30.0 1 3.0 1 28.0 2 0.0043 6 0.0 0 33.0 9 30.9957 9 10.0 1 26.0 2 31.0 2 0.0 0 3.0043 6 1.0 1]
Total: 499.0043
Mean: 9.980086
Genome size: 130
Size: 131
Percent parens: 0.008
--- Population Statistics ---
Average total errors in population: 2702.954394700001
Median total errors in population: 980.12275
Error averages by case: (121.56552099999988 9.922 103.94546730000002 4.055 102.82001629999988 6.856 122.60824629999998 3.822 97.63935200000009 3.639 123.46738459999979 7.866 105.1837947000003 6.178 82.66893180000008 3.827 102.46052880000016 6.907 95.96683910000013 3.829 88.32506240000008 2.701 115.54480280000017 7.18 97.80328300000002 3.533 85.57275999999993 3.094 114.4754115999998 3.862 106.76677180000009 7.637 85.23990170000005 4.568 111.12262860000014 9.982 125.40384839999989 10.764 84.26368840000006 3.007 107.3191745000001 4.025 95.88076700000005 3.588 84.18303790000009 3.215 118.26915210000026 6.375 90.71002259999997 3.316)
Error minima by case: (3.9957 7 0.2433 1 0.0043 1 14.2368 1 3.6808 1 0.9957 2 3.0E-4 2 0.0 0 1.0043 1 0.0 0 0.0 0 0.0043 1 0.0 0 0.0 0 8.4652 1 0.0043 1 0.0 0 0.0172 6 5.7603 8 4.0E-4 1 1.8112 1 0.0 0 0.0 0 0.0043 1 0.0 0)
Average genome size in population (length): 136.093
Average program size in population (points): 137.093
Average percent parens in population: 0.007
Minimum age in population: 206.3866525321939
Maximum age in population: 210.7033574985687
Average age in population: 208.5440605204221
Median age in population: 208.5892969130121
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 16
Genome diversity (% unique Plush genomes):	 0.923
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 16
Syntactic diversity (% unique Push programs):	 0.923
Total error diversity:				 0.539
Error (vector) diversity:			 0.625
Behavioral diversity:				 0.625
--- Run Statistics ---
Number of program evaluations used so far: 153000
Number of point (instruction) evaluations so far: 390845076
--- Timings ---
Current time: 1529616602034 milliseconds
Total Time:         666.3 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       206.5 seconds, 31.0%
Fitness Testing:    366.3 seconds, 55.0%
Report:              93.4 seconds, 14.0%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 152
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 153
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 153
;;******************************
;; -*- Number IO problem report - generation 153
Test total error for best: 25843.89679999999
Test mean error for best: 12.92195
;;------------------------------
Outputs of best individual on training cases:
Correct output: -74.6179542037 | Program output: -51.6222543847
Correct output: 78.7609586813  | Program output: 51.7609586813 
Correct output: 3.0100598709   | Program output: 12.0057596899 
Correct output: -99.2368061293 | Program output: -60.2368061293
Correct output: 88.6808415603  | Program output: 69.6808415603 
Correct output: -151.1060419578 | Program output: -145.1103421388
Correct output: 56.004616184   | Program output: 28.000316003  
Correct output: 33.520660154   | Program output: 38.520660154  
Correct output: 42.238861085   | Program output: 15.2345609041 
Correct output: -49.0227893765 | Program output: -35.0227893765
Correct output: 103.4057483059 | Program output: 103.4057483059
Correct output: -106.1378273779 | Program output: -116.1421275589
Correct output: 37.9625599991  | Program output: 67.9625599991 
Correct output: 71.9208193203  | Program output: 74.9208193203 
Correct output: 173.5348464317 | Program output: 145.5348464317
Correct output: -77.0615185935 | Program output: -77.0658187744
Correct output: -20.7643622555 | Program output: -20.7643622555
Correct output: 1.9827630815   | Program output: -31.0172369185
Correct output: -39.1198682611 | Program output: -8.124168442  
Correct output: 1.1392376036   | Program output: 11.1392376036 
Correct output: 129.1930977679 | Program output: 103.1930977679
Correct output: 26.7496211861  | Program output: 57.7496211861 
Correct output: -11.2984801384 | Program output: -11.2984801384
Correct output: -136.1442960385 | Program output: -139.1485962195
Correct output: 143.0911996605 | Program output: 142.0911996605
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_mod} {:instruction integer_mod} {:instruction integer_max} {:instruction in1} {:instruction in1} {:instruction float_stackdepth} {:instruction in2} {:instruction integer_add} {:instruction integer_add} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_add} {:instruction float_inc} {:instruction integer_max} {:instruction float_inc} {:instruction integer_add} {:instruction float_inc} {:instruction integer_add} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_add} {:instruction float_inc} {:instruction integer_add} {:instruction integer_add} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_add} {:instruction float_inc} {:instruction float_inc} {:instruction integer_sub} {:instruction float_inc} {:instruction float_inc} {:instruction integer_add} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_add} {:instruction float_inc} {:instruction float_inc} {:instruction integer_max} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_dup_times} {:instruction float_rot} {:instruction float_stackdepth} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_rot} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_min} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_add} {:instruction float_inc} {:instruction float_inc} {:instruction integer_max} {:instruction float_inc} {:instruction float_dup} {:instruction float_inc} {:instruction 26} {:instruction float_stackdepth} {:instruction float_inc} {:instruction float_dup_times} {:instruction float_yank} {:instruction float_inc} {:instruction in2} {:instruction integer_yankdup} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_add} {:instruction integer_yankdup} {:instruction float_inc} {:instruction integer_max} {:instruction float_dup_times} {:instruction float_max} {:instruction float_dup_times} {:instruction float_swap} {:instruction float_inc} {:instruction float_inc} {:instruction float_dup_times} {:instruction float_dup_items} {:instruction integer_add} {:instruction 27} {:instruction in2} {:instruction integer_add} {:instruction integer_yank} {:instruction float_dup_times} {:instruction integer_swap} {:instruction in1} {:instruction 78.00430018095415} {:instruction float_rot} {:instruction float_dup_times} {:instruction float_rot} {:instruction integer_yankdup} {:instruction integer_add} {:instruction float_dec} {:instruction float_inc} {:instruction float_sub} {:instruction float_rot} {:instruction integer_shove} {:instruction float_rot} {:instruction float_sub} {:instruction float_rot} {:instruction integer_sub} {:instruction float_inc} {:instruction integer_swap} {:instruction integer_min} {:instruction print_float} {:instruction integer_dec} {:instruction integer_stackdepth} {:instruction float_yank})
Best program: (float_mod integer_mod integer_max in1 in1 float_stackdepth in2 integer_add integer_add float_inc float_inc float_inc float_inc float_inc integer_add float_inc integer_max float_inc integer_add float_inc integer_add float_inc float_inc float_inc float_inc integer_add float_inc integer_add integer_add float_inc float_inc float_inc float_inc integer_add float_inc float_inc integer_sub float_inc float_inc integer_add float_inc float_inc float_inc float_inc integer_add float_inc float_inc integer_max float_inc float_inc float_inc float_inc float_dup_times float_rot float_stackdepth float_inc float_inc float_inc integer_rot float_inc float_inc float_inc float_inc integer_min float_inc float_inc float_inc float_inc float_inc integer_add float_inc float_inc integer_max float_inc float_dup float_inc 26 float_stackdepth float_inc float_dup_times float_yank float_inc in2 integer_yankdup float_inc float_inc float_inc float_inc integer_add integer_yankdup float_inc integer_max float_dup_times float_max float_dup_times float_swap float_inc float_inc float_dup_times float_dup_items integer_add 27 in2 integer_add integer_yank float_dup_times integer_swap in1 78.00430018095415 float_rot float_dup_times float_rot integer_yankdup integer_add float_dec float_inc float_sub float_rot integer_shove float_rot float_sub float_rot integer_sub float_inc integer_swap integer_min print_float integer_dec integer_stackdepth float_yank)
Errors: [22.9957 8 27.0 2 8.9957 8 39.0 2 19.0 2 5.9957 9 28.0043 7 5.0 1 27.0043 8 14.0 2 0.0 0 10.0043 7 30.0 1 3.0 1 28.0 2 0.0043 6 0.0 0 33.0 9 30.9957 9 10.0 1 26.0 2 31.0 2 0.0 0 3.0043 6 1.0 1]
Total: 499.0043
Mean: 9.980086
Genome size: 130
Size: 131
Percent parens: 0.008
--- Population Statistics ---
Average total errors in population: 2817.1322331000006
Median total errors in population: 1002.60815
Error averages by case: (123.6539843999999 9.955 109.89598510000005 4.192 107.13885469999985 6.813 121.36505059999998 3.73 105.76637520000003 3.741 125.08326119999984 7.811 107.48459450000028 6.166 88.99786360000004 4.13 106.28446490000019 6.855 102.56951860000012 3.886 93.3026458000001 2.543 117.55228130000006 7.228 103.2451459 3.618 90.74472810000006 3.0 123.38696109999988 3.894 109.14385590000002 7.65 86.85697780000001 4.297 119.21195460000007 10.034 127.76619819999999 10.829 84.96108480000004 3.035 117.16470500000004 4.092 100.5354393 3.719 91.02774180000002 3.29 120.08204810000024 6.403 99.58051259999995 3.419)
Error minima by case: (1.6137 7 0.0776 1 0.0043 1 11.2368 1 1.6808 1 0.0043 1 3.0E-4 1 0.0 0 1.2389 1 0.0 0 0.0 0 0.0043 1 0.0 0 0.0 0 13.0 1 0.0043 1 0.0 0 0.0172 8 4.7603 8 0.0 0 6.1888 1 0.0 0 0.0 0 0.0043 2 0.0 0)
Average genome size in population (length): 136.101
Average program size in population (points): 137.101
Average percent parens in population: 0.007
Minimum age in population: 207.3866525321939
Maximum age in population: 211.8665412147542
Average age in population: 209.8184126459037
Median age in population: 209.8598103072397
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 12
Genome diversity (% unique Plush genomes):	 0.923
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 12
Syntactic diversity (% unique Push programs):	 0.923
Total error diversity:				 0.548
Error (vector) diversity:			 0.628
Behavioral diversity:				 0.628
--- Run Statistics ---
Number of program evaluations used so far: 154000
Number of point (instruction) evaluations so far: 394247626
--- Timings ---
Current time: 1529616607235 milliseconds
Total Time:         671.5 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       207.9 seconds, 31.0%
Fitness Testing:    369.4 seconds, 55.0%
Report:              94.1 seconds, 14.0%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 153
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 154
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 154
;;******************************
;; -*- Number IO problem report - generation 154
Test total error for best: 25843.89679999999
Test mean error for best: 12.92195
;;------------------------------
Outputs of best individual on training cases:
Correct output: -74.6179542037 | Program output: -51.6222543847
Correct output: 78.7609586813  | Program output: 51.7609586813 
Correct output: 3.0100598709   | Program output: 12.0057596899 
Correct output: -99.2368061293 | Program output: -60.2368061293
Correct output: 88.6808415603  | Program output: 69.6808415603 
Correct output: -151.1060419578 | Program output: -145.1103421388
Correct output: 56.004616184   | Program output: 28.000316003  
Correct output: 33.520660154   | Program output: 38.520660154  
Correct output: 42.238861085   | Program output: 15.2345609041 
Correct output: -49.0227893765 | Program output: -35.0227893765
Correct output: 103.4057483059 | Program output: 103.4057483059
Correct output: -106.1378273779 | Program output: -116.1421275589
Correct output: 37.9625599991  | Program output: 67.9625599991 
Correct output: 71.9208193203  | Program output: 74.9208193203 
Correct output: 173.5348464317 | Program output: 145.5348464317
Correct output: -77.0615185935 | Program output: -77.0658187744
Correct output: -20.7643622555 | Program output: -20.7643622555
Correct output: 1.9827630815   | Program output: -31.0172369185
Correct output: -39.1198682611 | Program output: -8.124168442  
Correct output: 1.1392376036   | Program output: 11.1392376036 
Correct output: 129.1930977679 | Program output: 103.1930977679
Correct output: 26.7496211861  | Program output: 57.7496211861 
Correct output: -11.2984801384 | Program output: -11.2984801384
Correct output: -136.1442960385 | Program output: -139.1485962195
Correct output: 143.0911996605 | Program output: 142.0911996605
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_mod} {:instruction integer_mod} {:instruction integer_max} {:instruction in1} {:instruction in1} {:instruction float_stackdepth} {:instruction in2} {:instruction integer_add} {:instruction integer_add} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_add} {:instruction float_inc} {:instruction integer_max} {:instruction float_inc} {:instruction integer_add} {:instruction float_inc} {:instruction integer_add} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_add} {:instruction float_inc} {:instruction integer_add} {:instruction integer_add} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_add} {:instruction float_inc} {:instruction float_inc} {:instruction integer_sub} {:instruction float_inc} {:instruction float_inc} {:instruction integer_add} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_add} {:instruction float_inc} {:instruction float_inc} {:instruction integer_max} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_dup_times} {:instruction float_rot} {:instruction float_stackdepth} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_rot} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_min} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_add} {:instruction float_inc} {:instruction float_inc} {:instruction integer_max} {:instruction float_inc} {:instruction float_dup} {:instruction float_inc} {:instruction 26} {:instruction float_stackdepth} {:instruction float_inc} {:instruction float_dup_times} {:instruction float_yank} {:instruction float_inc} {:instruction in2} {:instruction integer_yankdup} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_add} {:instruction integer_yankdup} {:instruction float_inc} {:instruction integer_max} {:instruction float_dup_times} {:instruction float_max} {:instruction float_dup_times} {:instruction float_swap} {:instruction float_inc} {:instruction float_inc} {:instruction float_dup_times} {:instruction float_dup_items} {:instruction integer_add} {:instruction 27} {:instruction in2} {:instruction integer_add} {:instruction integer_yank} {:instruction float_dup_times} {:instruction integer_swap} {:instruction in1} {:instruction 78.00430018095415} {:instruction float_rot} {:instruction float_dup_times} {:instruction float_rot} {:instruction integer_yankdup} {:instruction integer_add} {:instruction float_dec} {:instruction float_inc} {:instruction float_sub} {:instruction float_rot} {:instruction integer_shove} {:instruction float_rot} {:instruction float_sub} {:instruction float_rot} {:instruction integer_sub} {:instruction float_inc} {:instruction integer_swap} {:instruction integer_min} {:instruction print_float} {:instruction integer_dec} {:instruction integer_stackdepth} {:instruction float_yank})
Best program: (float_mod integer_mod integer_max in1 in1 float_stackdepth in2 integer_add integer_add float_inc float_inc float_inc float_inc float_inc integer_add float_inc integer_max float_inc integer_add float_inc integer_add float_inc float_inc float_inc float_inc integer_add float_inc integer_add integer_add float_inc float_inc float_inc float_inc integer_add float_inc float_inc integer_sub float_inc float_inc integer_add float_inc float_inc float_inc float_inc integer_add float_inc float_inc integer_max float_inc float_inc float_inc float_inc float_dup_times float_rot float_stackdepth float_inc float_inc float_inc integer_rot float_inc float_inc float_inc float_inc integer_min float_inc float_inc float_inc float_inc float_inc integer_add float_inc float_inc integer_max float_inc float_dup float_inc 26 float_stackdepth float_inc float_dup_times float_yank float_inc in2 integer_yankdup float_inc float_inc float_inc float_inc integer_add integer_yankdup float_inc integer_max float_dup_times float_max float_dup_times float_swap float_inc float_inc float_dup_times float_dup_items integer_add 27 in2 integer_add integer_yank float_dup_times integer_swap in1 78.00430018095415 float_rot float_dup_times float_rot integer_yankdup integer_add float_dec float_inc float_sub float_rot integer_shove float_rot float_sub float_rot integer_sub float_inc integer_swap integer_min print_float integer_dec integer_stackdepth float_yank)
Errors: [22.9957 8 27.0 2 8.9957 8 39.0 2 19.0 2 5.9957 9 28.0043 7 5.0 1 27.0043 8 14.0 2 0.0 0 10.0043 7 30.0 1 3.0 1 28.0 2 0.0043 6 0.0 0 33.0 9 30.9957 9 10.0 1 26.0 2 31.0 2 0.0 0 3.0043 6 1.0 1]
Total: 499.0043
Mean: 9.980086
Genome size: 130
Size: 131
Percent parens: 0.008
--- Population Statistics ---
Average total errors in population: 2579.4110582000008
Median total errors in population: 976.0
Error averages by case: (113.0350368999999 9.818 95.92779930000002 3.982 96.69383279999988 6.855 111.42079919999995 3.512 94.31873700000007 3.648 113.83966939999982 7.854 98.00072750000027 6.211 74.4467827 3.821 97.00165240000015 6.868 97.86699990000007 3.734 85.58148040000012 2.527 105.88034460000011 7.14 94.30721129999999 3.507 83.1215458 2.961 117.09367439999993 3.778 96.70497420000002 7.69 76.83450650000005 4.27 113.68529640000008 9.914 117.83681029999995 10.738 75.71149490000003 2.977 109.50330070000008 3.986 90.29205920000003 3.59 85.75065139999998 3.146 108.93031530000025 6.383 93.43935569999998 3.276)
Error minima by case: (2.8902 7 0.2433 1 0.0158 1 12.0043 1 0.6808 1 0.0043 2 0.0043 1 0.0 0 0.9957 1 0.0 0 0.0 0 0.9957 1 0.0374 1 0.0 0 9.4652 1 0.0043 1 0.0 0 0.0172 7 0.4461 8 0.1392 1 3.8112 1 0.0 0 0.0 0 0.0043 1 0.0 0)
Average genome size in population (length): 136.371
Average program size in population (points): 137.371
Average percent parens in population: 0.007
Minimum age in population: 208.5388789155317
Maximum age in population: 212.9664338424539
Average age in population: 211.0123042537343
Median age in population: 211.0358304860101
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 12
Genome diversity (% unique Plush genomes):	 0.927
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 12
Syntactic diversity (% unique Push programs):	 0.927
Total error diversity:				 0.53
Error (vector) diversity:			 0.616
Behavioral diversity:				 0.616
--- Run Statistics ---
Number of program evaluations used so far: 155000
Number of point (instruction) evaluations so far: 397656901
--- Timings ---
Current time: 1529616612438 milliseconds
Total Time:         676.7 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       209.2 seconds, 30.9%
Fitness Testing:    372.5 seconds, 55.0%
Report:              94.8 seconds, 14.0%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 154
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 155
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 155
;;******************************
;; -*- Number IO problem report - generation 155
Test total error for best: 25843.89679999999
Test mean error for best: 12.92195
;;------------------------------
Outputs of best individual on training cases:
Correct output: -74.6179542037 | Program output: -51.6222543847
Correct output: 78.7609586813  | Program output: 51.7609586813 
Correct output: 3.0100598709   | Program output: 12.0057596899 
Correct output: -99.2368061293 | Program output: -60.2368061293
Correct output: 88.6808415603  | Program output: 69.6808415603 
Correct output: -151.1060419578 | Program output: -145.1103421388
Correct output: 56.004616184   | Program output: 28.000316003  
Correct output: 33.520660154   | Program output: 38.520660154  
Correct output: 42.238861085   | Program output: 15.2345609041 
Correct output: -49.0227893765 | Program output: -35.0227893765
Correct output: 103.4057483059 | Program output: 103.4057483059
Correct output: -106.1378273779 | Program output: -116.1421275589
Correct output: 37.9625599991  | Program output: 67.9625599991 
Correct output: 71.9208193203  | Program output: 74.9208193203 
Correct output: 173.5348464317 | Program output: 145.5348464317
Correct output: -77.0615185935 | Program output: -77.0658187744
Correct output: -20.7643622555 | Program output: -20.7643622555
Correct output: 1.9827630815   | Program output: -31.0172369185
Correct output: -39.1198682611 | Program output: -8.124168442  
Correct output: 1.1392376036   | Program output: 11.1392376036 
Correct output: 129.1930977679 | Program output: 103.1930977679
Correct output: 26.7496211861  | Program output: 57.7496211861 
Correct output: -11.2984801384 | Program output: -11.2984801384
Correct output: -136.1442960385 | Program output: -139.1485962195
Correct output: 143.0911996605 | Program output: 142.0911996605
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_mod} {:instruction integer_mod} {:instruction integer_max} {:instruction in1} {:instruction in1} {:instruction float_stackdepth} {:instruction in2} {:instruction integer_add} {:instruction integer_add} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_add} {:instruction float_inc} {:instruction integer_max} {:instruction float_inc} {:instruction integer_add} {:instruction float_inc} {:instruction integer_add} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_add} {:instruction float_inc} {:instruction integer_add} {:instruction integer_add} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_add} {:instruction float_inc} {:instruction float_inc} {:instruction integer_sub} {:instruction float_inc} {:instruction float_inc} {:instruction integer_add} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_add} {:instruction float_inc} {:instruction float_inc} {:instruction integer_max} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_dup_times} {:instruction float_rot} {:instruction float_stackdepth} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_rot} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_min} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_add} {:instruction float_inc} {:instruction float_inc} {:instruction integer_max} {:instruction float_inc} {:instruction float_dup} {:instruction float_inc} {:instruction 26} {:instruction float_stackdepth} {:instruction float_inc} {:instruction float_dup_times} {:instruction float_yank} {:instruction float_inc} {:instruction in2} {:instruction integer_yankdup} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_add} {:instruction integer_yankdup} {:instruction float_inc} {:instruction integer_max} {:instruction float_dup_times} {:instruction float_max} {:instruction float_dup_times} {:instruction float_swap} {:instruction float_inc} {:instruction float_inc} {:instruction float_dup_times} {:instruction float_dup_items} {:instruction integer_add} {:instruction 27} {:instruction in2} {:instruction integer_add} {:instruction integer_yank} {:instruction float_dup_times} {:instruction integer_swap} {:instruction in1} {:instruction 78.00430018095415} {:instruction float_rot} {:instruction float_dup_times} {:instruction float_rot} {:instruction integer_yankdup} {:instruction integer_add} {:instruction float_dec} {:instruction float_inc} {:instruction float_sub} {:instruction float_rot} {:instruction integer_shove} {:instruction float_rot} {:instruction float_sub} {:instruction float_rot} {:instruction integer_sub} {:instruction float_inc} {:instruction integer_swap} {:instruction integer_min} {:instruction print_float} {:instruction integer_dec} {:instruction integer_stackdepth} {:instruction float_yank})
Best program: (float_mod integer_mod integer_max in1 in1 float_stackdepth in2 integer_add integer_add float_inc float_inc float_inc float_inc float_inc integer_add float_inc integer_max float_inc integer_add float_inc integer_add float_inc float_inc float_inc float_inc integer_add float_inc integer_add integer_add float_inc float_inc float_inc float_inc integer_add float_inc float_inc integer_sub float_inc float_inc integer_add float_inc float_inc float_inc float_inc integer_add float_inc float_inc integer_max float_inc float_inc float_inc float_inc float_dup_times float_rot float_stackdepth float_inc float_inc float_inc integer_rot float_inc float_inc float_inc float_inc integer_min float_inc float_inc float_inc float_inc float_inc integer_add float_inc float_inc integer_max float_inc float_dup float_inc 26 float_stackdepth float_inc float_dup_times float_yank float_inc in2 integer_yankdup float_inc float_inc float_inc float_inc integer_add integer_yankdup float_inc integer_max float_dup_times float_max float_dup_times float_swap float_inc float_inc float_dup_times float_dup_items integer_add 27 in2 integer_add integer_yank float_dup_times integer_swap in1 78.00430018095415 float_rot float_dup_times float_rot integer_yankdup integer_add float_dec float_inc float_sub float_rot integer_shove float_rot float_sub float_rot integer_sub float_inc integer_swap integer_min print_float integer_dec integer_stackdepth float_yank)
Errors: [22.9957 8 27.0 2 8.9957 8 39.0 2 19.0 2 5.9957 9 28.0043 7 5.0 1 27.0043 8 14.0 2 0.0 0 10.0043 7 30.0 1 3.0 1 28.0 2 0.0043 6 0.0 0 33.0 9 30.9957 9 10.0 1 26.0 2 31.0 2 0.0 0 3.0043 6 1.0 1]
Total: 499.0043
Mean: 9.980086
Genome size: 130
Size: 131
Percent parens: 0.008
--- Population Statistics ---
Average total errors in population: 3053.803161000001
Median total errors in population: 1005.31855
Error averages by case: (136.4371488999998 10.042 113.3936644 4.167 117.68399139999984 7.031 134.90854240000004 3.828 108.91461910000001 3.795 139.62530009999983 8.057 120.22768360000023 6.418 92.31204740000007 4.125 117.59152600000023 7.065 111.96186150000007 3.961 102.52109660000006 2.722 131.88668480000004 7.4 108.03529159999997 3.677 101.42487990000001 3.163 130.01921749999988 3.997 119.92317400000007 7.875 92.73026700000003 4.439 126.62938460000007 10.131 139.40583069999988 10.931 98.88483420000001 3.051 123.19407760000007 4.167 106.92848339999995 3.763 100.40393800000007 3.33 134.66451890000025 6.624 106.83509739999992 3.501)
Error minima by case: (2.3863 7 0.2433 1 0.0101 1 11.2368 1 5.0 1 0.9957 1 0.0043 1 0.0 0 0.9957 1 0.0 0 0.0 0 0.4957 1 0.0 0 0.0 0 5.4652 1 0.0043 1 0.0 0 0.0172 8 3.6361 8 0.0 0 8.1153 1 0.0 0 0.0 0 0.0043 1 0.0 0)
Average genome size in population (length): 136.426
Average program size in population (points): 137.426
Average percent parens in population: 0.007
Minimum age in population: 210.1003760665918
Maximum age in population: 214.0731716168918
Average age in population: 212.2887672948628
Median age in population: 212.3410172575318
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 8
Genome diversity (% unique Plush genomes):	 0.938
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 8
Syntactic diversity (% unique Push programs):	 0.938
Total error diversity:				 0.547
Error (vector) diversity:			 0.637
Behavioral diversity:				 0.638
--- Run Statistics ---
Number of program evaluations used so far: 156000
Number of point (instruction) evaluations so far: 401067601
--- Timings ---
Current time: 1529616617620 milliseconds
Total Time:         681.8 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       210.6 seconds, 30.9%
Fitness Testing:    375.6 seconds, 55.1%
Report:              95.5 seconds, 14.0%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 155
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 156
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 156
;;******************************
;; -*- Number IO problem report - generation 156
Test total error for best: 26201.931199999995
Test mean error for best: 13.10097
;;------------------------------
Outputs of best individual on training cases:
Correct output: -74.6179542037 | Program output: -51.6222543847
Correct output: 78.7609586813  | Program output: 51.7609586813 
Correct output: 3.0100598709   | Program output: 12.0057596899 
Correct output: -99.2368061293 | Program output: -58.2368061293
Correct output: 88.6808415603  | Program output: 69.6808415603 
Correct output: -151.1060419578 | Program output: -145.1103421388
Correct output: 56.004616184   | Program output: 28.000316003  
Correct output: 33.520660154   | Program output: 38.520660154  
Correct output: 42.238861085   | Program output: 15.2345609041 
Correct output: -49.0227893765 | Program output: -35.0227893765
Correct output: 103.4057483059 | Program output: 103.4057483059
Correct output: -106.1378273779 | Program output: -116.1421275589
Correct output: 37.9625599991  | Program output: 67.9625599991 
Correct output: 71.9208193203  | Program output: 74.9208193203 
Correct output: 173.5348464317 | Program output: 145.5348464317
Correct output: -77.0615185935 | Program output: -77.0658187744
Correct output: -20.7643622555 | Program output: -20.7643622555
Correct output: 1.9827630815   | Program output: -31.0172369185
Correct output: -39.1198682611 | Program output: -8.124168442  
Correct output: 1.1392376036   | Program output: 11.1392376036 
Correct output: 129.1930977679 | Program output: 103.1930977679
Correct output: 26.7496211861  | Program output: 57.7496211861 
Correct output: -11.2984801384 | Program output: -11.2984801384
Correct output: -136.1442960385 | Program output: -139.1485962195
Correct output: 143.0911996605 | Program output: 142.0911996605
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_mod} {:instruction float_pop} {:instruction integer_max} {:instruction in1} {:instruction float_max} {:instruction in2} {:instruction float_pop} {:instruction integer_mod} {:instruction float_flush} {:instruction float_pop} {:instruction integer_max} {:instruction integer_flush} {:instruction in1} {:instruction in1} {:instruction float_stackdepth} {:instruction in2} {:instruction integer_add} {:instruction integer_add} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_add} {:instruction float_inc} {:instruction integer_max} {:instruction float_inc} {:instruction integer_add} {:instruction float_inc} {:instruction integer_add} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_add} {:instruction float_inc} {:instruction integer_add} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_add} {:instruction float_inc} {:instruction float_inc} {:instruction integer_sub} {:instruction float_inc} {:instruction float_inc} {:instruction integer_add} {:instruction float_inc} {:instruction integer_add} {:instruction float_inc} {:instruction float_inc} {:instruction integer_add} {:instruction float_inc} {:instruction float_inc} {:instruction integer_max} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_dup_times} {:instruction float_rot} {:instruction float_stackdepth} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_add} {:instruction float_inc} {:instruction integer_max} {:instruction float_inc} {:instruction float_dup} {:instruction integer_min} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction 25} {:instruction float_stackdepth} {:instruction float_inc} {:instruction float_dup_times} {:instruction float_yank} {:instruction float_inc} {:instruction integer_add} {:instruction integer_yankdup} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_add} {:instruction integer_yankdup} {:instruction float_inc} {:instruction integer_max} {:instruction float_dup_times} {:instruction float_max} {:instruction float_dup_times} {:instruction float_stackdepth} {:instruction float_inc} {:instruction float_inc} {:instruction float_dup_times} {:instruction float_yank} {:instruction integer_add} {:instruction 25} {:instruction in2} {:instruction integer_add} {:instruction integer_yank} {:instruction float_dup_times} {:instruction float_dec} {:instruction in1} {:instruction 78.00430018095415} {:instruction float_rot} {:instruction float_dup_times} {:instruction float_rot} {:instruction integer_yankdup} {:instruction integer_add} {:instruction float_dec} {:instruction float_inc} {:instruction float_sub} {:instruction float_rot} {:instruction integer_shove} {:instruction float_rot} {:instruction float_sub} {:instruction float_rot} {:instruction tag_integer_154} {:instruction float_inc} {:instruction integer_swap} {:instruction integer_min} {:instruction print_float} {:instruction integer_pop} {:instruction float_pop})
Best program: (float_mod float_pop integer_max in1 float_max in2 float_pop integer_mod float_flush float_pop integer_max integer_flush in1 in1 float_stackdepth in2 integer_add integer_add float_inc float_inc float_inc float_inc integer_add float_inc integer_max float_inc integer_add float_inc integer_add float_inc float_inc float_inc float_inc float_inc float_inc integer_add float_inc integer_add float_inc float_inc float_inc float_inc integer_add float_inc float_inc integer_sub float_inc float_inc integer_add float_inc integer_add float_inc float_inc integer_add float_inc float_inc integer_max float_inc float_inc float_inc float_inc float_dup_times float_rot float_stackdepth float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc integer_add float_inc integer_max float_inc float_dup integer_min float_inc float_inc float_inc 25 float_stackdepth float_inc float_dup_times float_yank float_inc integer_add integer_yankdup float_inc float_inc float_inc float_inc integer_add integer_yankdup float_inc integer_max float_dup_times float_max float_dup_times float_stackdepth float_inc float_inc float_dup_times float_yank integer_add 25 in2 integer_add integer_yank float_dup_times float_dec in1 78.00430018095415 float_rot float_dup_times float_rot integer_yankdup integer_add float_dec float_inc float_sub float_rot integer_shove float_rot float_sub float_rot tag_integer_154 float_inc integer_swap integer_min print_float integer_pop float_pop)
Errors: [22.9957 8 27.0 2 8.9957 8 41.0 2 19.0 2 5.9957 9 28.0043 7 5.0 1 27.0043 8 14.0 2 0.0 0 10.0043 7 30.0 1 3.0 1 28.0 2 0.0043 6 0.0 0 33.0 9 30.9957 9 10.0 1 26.0 2 31.0 2 0.0 0 3.0043 6 1.0 1]
Total: 501.0043
Mean: 10.020086
Genome size: 137
Size: 138
Percent parens: 0.007
--- Population Statistics ---
Average total errors in population: 3139.8067625000012
Median total errors in population: 1006.5
Error averages by case: (138.6901178999998 9.99 118.76426280000004 4.046 120.12694149999983 6.852 136.27870850000002 3.823 115.49107150000005 3.62 138.7545340999999 7.883 120.03038270000022 6.273 98.94712050000007 4.001 118.91675960000019 6.883 117.3665487000002 3.883 107.66185320000005 2.665 131.86912000000012 7.269 115.73068280000001 3.543 104.57596080000009 3.053 135.45768599999988 3.879 121.000808 7.788 101.33830330000004 4.561 132.0597013000001 10.058 143.33540219999978 10.898 94.44158349999996 3.008 128.99344890000012 4.018 112.0679546 3.603 106.2112179000001 3.307 133.92953180000026 6.48 112.98406039999992 3.399)
Error minima by case: (2.4752 2 0.2433 1 0.0101 1 9.2368 1 1.0 1 0.0043 1 3.0E-4 1 0.0 0 0.0043 1 0.0 0 0.0 0 0.0043 1 0.0 0 0.0 0 5.9957 1 0.0043 1 0.0 0 0.0172 8 0.5025 8 0.0 0 1.1931 1 0.3886 1 0.0 0 0.0043 2 0.0 0)
Average genome size in population (length): 137.283
Average program size in population (points): 138.283
Average percent parens in population: 0.007
Minimum age in population: 211.3758457563505
Maximum age in population: 215.4055570791254
Average age in population: 213.5539879276088
Median age in population: 213.6079818384326
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 6
Genome diversity (% unique Plush genomes):	 0.95
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 6
Syntactic diversity (% unique Push programs):	 0.95
Total error diversity:				 0.555
Error (vector) diversity:			 0.643
Behavioral diversity:				 0.646
--- Run Statistics ---
Number of program evaluations used so far: 157000
Number of point (instruction) evaluations so far: 404499676
--- Timings ---
Current time: 1529616622799 milliseconds
Total Time:         687.0 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       211.9 seconds, 30.8%
Fitness Testing:    378.7 seconds, 55.1%
Report:              96.2 seconds, 14.0%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 156
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 157
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 157
;;******************************
;; -*- Number IO problem report - generation 157
Test total error for best: 26201.931199999995
Test mean error for best: 13.10097
;;------------------------------
Outputs of best individual on training cases:
Correct output: -74.6179542037 | Program output: -51.6222543847
Correct output: 78.7609586813  | Program output: 51.7609586813 
Correct output: 3.0100598709   | Program output: 12.0057596899 
Correct output: -99.2368061293 | Program output: -58.2368061293
Correct output: 88.6808415603  | Program output: 69.6808415603 
Correct output: -151.1060419578 | Program output: -145.1103421388
Correct output: 56.004616184   | Program output: 28.000316003  
Correct output: 33.520660154   | Program output: 38.520660154  
Correct output: 42.238861085   | Program output: 15.2345609041 
Correct output: -49.0227893765 | Program output: -35.0227893765
Correct output: 103.4057483059 | Program output: 103.4057483059
Correct output: -106.1378273779 | Program output: -116.1421275589
Correct output: 37.9625599991  | Program output: 67.9625599991 
Correct output: 71.9208193203  | Program output: 74.9208193203 
Correct output: 173.5348464317 | Program output: 145.5348464317
Correct output: -77.0615185935 | Program output: -77.0658187744
Correct output: -20.7643622555 | Program output: -20.7643622555
Correct output: 1.9827630815   | Program output: -31.0172369185
Correct output: -39.1198682611 | Program output: -8.124168442  
Correct output: 1.1392376036   | Program output: 11.1392376036 
Correct output: 129.1930977679 | Program output: 103.1930977679
Correct output: 26.7496211861  | Program output: 57.7496211861 
Correct output: -11.2984801384 | Program output: -11.2984801384
Correct output: -136.1442960385 | Program output: -139.1485962195
Correct output: 143.0911996605 | Program output: 142.0911996605
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_mod} {:instruction float_pop} {:instruction integer_max} {:instruction in1} {:instruction float_max} {:instruction in2} {:instruction float_pop} {:instruction integer_mod} {:instruction float_flush} {:instruction float_pop} {:instruction integer_max} {:instruction integer_flush} {:instruction in1} {:instruction in1} {:instruction float_stackdepth} {:instruction in2} {:instruction integer_add} {:instruction integer_add} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_add} {:instruction float_inc} {:instruction integer_max} {:instruction float_inc} {:instruction integer_add} {:instruction float_inc} {:instruction integer_add} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_add} {:instruction float_inc} {:instruction integer_add} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_add} {:instruction float_inc} {:instruction float_inc} {:instruction integer_sub} {:instruction float_inc} {:instruction float_inc} {:instruction integer_add} {:instruction float_inc} {:instruction integer_add} {:instruction float_inc} {:instruction float_inc} {:instruction integer_add} {:instruction float_inc} {:instruction float_inc} {:instruction integer_max} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_dup_times} {:instruction float_rot} {:instruction float_stackdepth} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_add} {:instruction float_inc} {:instruction integer_max} {:instruction float_inc} {:instruction float_dup} {:instruction integer_min} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction 25} {:instruction float_stackdepth} {:instruction float_inc} {:instruction float_dup_times} {:instruction float_yank} {:instruction float_inc} {:instruction integer_add} {:instruction integer_yankdup} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_add} {:instruction integer_yankdup} {:instruction float_inc} {:instruction integer_max} {:instruction float_dup_times} {:instruction float_max} {:instruction float_dup_times} {:instruction float_stackdepth} {:instruction float_inc} {:instruction float_inc} {:instruction float_dup_times} {:instruction float_yank} {:instruction integer_add} {:instruction 25} {:instruction in2} {:instruction integer_add} {:instruction integer_yank} {:instruction float_dup_times} {:instruction float_dec} {:instruction in1} {:instruction 78.00430018095415} {:instruction float_rot} {:instruction float_dup_times} {:instruction float_rot} {:instruction integer_yankdup} {:instruction integer_add} {:instruction float_dec} {:instruction float_inc} {:instruction float_sub} {:instruction float_rot} {:instruction integer_shove} {:instruction float_rot} {:instruction float_sub} {:instruction float_rot} {:instruction tag_integer_154} {:instruction float_inc} {:instruction integer_swap} {:instruction integer_min} {:instruction print_float} {:instruction integer_pop} {:instruction float_pop})
Best program: (float_mod float_pop integer_max in1 float_max in2 float_pop integer_mod float_flush float_pop integer_max integer_flush in1 in1 float_stackdepth in2 integer_add integer_add float_inc float_inc float_inc float_inc integer_add float_inc integer_max float_inc integer_add float_inc integer_add float_inc float_inc float_inc float_inc float_inc float_inc integer_add float_inc integer_add float_inc float_inc float_inc float_inc integer_add float_inc float_inc integer_sub float_inc float_inc integer_add float_inc integer_add float_inc float_inc integer_add float_inc float_inc integer_max float_inc float_inc float_inc float_inc float_dup_times float_rot float_stackdepth float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc integer_add float_inc integer_max float_inc float_dup integer_min float_inc float_inc float_inc 25 float_stackdepth float_inc float_dup_times float_yank float_inc integer_add integer_yankdup float_inc float_inc float_inc float_inc integer_add integer_yankdup float_inc integer_max float_dup_times float_max float_dup_times float_stackdepth float_inc float_inc float_dup_times float_yank integer_add 25 in2 integer_add integer_yank float_dup_times float_dec in1 78.00430018095415 float_rot float_dup_times float_rot integer_yankdup integer_add float_dec float_inc float_sub float_rot integer_shove float_rot float_sub float_rot tag_integer_154 float_inc integer_swap integer_min print_float integer_pop float_pop)
Errors: [22.9957 8 27.0 2 8.9957 8 41.0 2 19.0 2 5.9957 9 28.0043 7 5.0 1 27.0043 8 14.0 2 0.0 0 10.0043 7 30.0 1 3.0 1 28.0 2 0.0043 6 0.0 0 33.0 9 30.9957 9 10.0 1 26.0 2 31.0 2 0.0 0 3.0043 6 1.0 1]
Total: 501.0043
Mean: 10.020086
Genome size: 137
Size: 138
Percent parens: 0.007
--- Population Statistics ---
Average total errors in population: 2916.4231746000005
Median total errors in population: 1036.5
Error averages by case: (128.32237929999988 9.995 111.4107022 4.245 107.68448179999984 6.878 127.84950749999996 3.891 107.87978250000009 3.869 128.3980434999998 7.893 108.28488380000023 6.258 91.89565350000004 4.166 106.49812150000017 6.907 109.53265530000019 4.092 96.67794100000012 2.796 119.94915610000008 7.319 107.01817240000007 3.839 95.22931170000003 3.146 127.10951769999981 4.031 112.86212519999997 7.938 93.2857482 4.611 122.5474945000001 10.024 131.09990709999994 10.87 94.12433530000003 3.18 120.61899000000014 4.22 105.48731470000001 3.791 97.85513660000007 3.531 123.10634340000018 6.54 104.10546979999988 3.56)
Error minima by case: (3.1122 7 0.2433 1 0.4839 1 10.2368 1 3.0 1 0.0043 2 3.0E-4 1 0.0 0 0.9957 1 0.0 0 0.0 0 0.0043 1 0.0 0 0.0 0 6.0 1 0.0043 1 0.0 0 0.0101 7 2.5834 7 0.1392 1 0.0012 1 0.0 0 0.0 0 0.0043 1 0.0 0)
Average genome size in population (length): 137.259
Average program size in population (points): 138.259
Average percent parens in population: 0.007
Minimum age in population: 212.5254008037554
Maximum age in population: 216.6460607436857
Average age in population: 214.8053849075049
Median age in population: 214.8442831791155
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 10
Genome diversity (% unique Plush genomes):	 0.948
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 10
Syntactic diversity (% unique Push programs):	 0.948
Total error diversity:				 0.572
Error (vector) diversity:			 0.655
Behavioral diversity:				 0.656
--- Run Statistics ---
Number of program evaluations used so far: 158000
Number of point (instruction) evaluations so far: 407931151
--- Timings ---
Current time: 1529616628037 milliseconds
Total Time:         692.2 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       213.3 seconds, 30.8%
Fitness Testing:    381.8 seconds, 55.2%
Report:              97.0 seconds, 14.0%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 157
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 158
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 158
;;******************************
;; -*- Number IO problem report - generation 158
Test total error for best: 26201.931199999995
Test mean error for best: 13.10097
;;------------------------------
Outputs of best individual on training cases:
Correct output: -74.6179542037 | Program output: -51.6222543847
Correct output: 78.7609586813  | Program output: 51.7609586813 
Correct output: 3.0100598709   | Program output: 12.0057596899 
Correct output: -99.2368061293 | Program output: -58.2368061293
Correct output: 88.6808415603  | Program output: 69.6808415603 
Correct output: -151.1060419578 | Program output: -145.1103421388
Correct output: 56.004616184   | Program output: 28.000316003  
Correct output: 33.520660154   | Program output: 38.520660154  
Correct output: 42.238861085   | Program output: 15.2345609041 
Correct output: -49.0227893765 | Program output: -35.0227893765
Correct output: 103.4057483059 | Program output: 103.4057483059
Correct output: -106.1378273779 | Program output: -116.1421275589
Correct output: 37.9625599991  | Program output: 67.9625599991 
Correct output: 71.9208193203  | Program output: 74.9208193203 
Correct output: 173.5348464317 | Program output: 145.5348464317
Correct output: -77.0615185935 | Program output: -77.0658187744
Correct output: -20.7643622555 | Program output: -20.7643622555
Correct output: 1.9827630815   | Program output: -31.0172369185
Correct output: -39.1198682611 | Program output: -8.124168442  
Correct output: 1.1392376036   | Program output: 11.1392376036 
Correct output: 129.1930977679 | Program output: 103.1930977679
Correct output: 26.7496211861  | Program output: 57.7496211861 
Correct output: -11.2984801384 | Program output: -11.2984801384
Correct output: -136.1442960385 | Program output: -139.1485962195
Correct output: 143.0911996605 | Program output: 142.0911996605
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_mod} {:instruction float_pop} {:instruction integer_max} {:instruction in1} {:instruction float_max} {:instruction in2} {:instruction float_pop} {:instruction integer_mod} {:instruction float_flush} {:instruction float_pop} {:instruction integer_max} {:instruction integer_flush} {:instruction in1} {:instruction in1} {:instruction float_stackdepth} {:instruction in2} {:instruction integer_add} {:instruction integer_add} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_add} {:instruction float_inc} {:instruction integer_max} {:instruction float_inc} {:instruction integer_add} {:instruction float_inc} {:instruction integer_add} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_add} {:instruction float_inc} {:instruction integer_add} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_add} {:instruction float_inc} {:instruction float_inc} {:instruction integer_sub} {:instruction float_inc} {:instruction float_inc} {:instruction integer_add} {:instruction float_inc} {:instruction integer_add} {:instruction float_inc} {:instruction float_inc} {:instruction integer_add} {:instruction float_inc} {:instruction float_inc} {:instruction integer_max} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_dup_times} {:instruction float_rot} {:instruction float_stackdepth} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_add} {:instruction float_inc} {:instruction integer_max} {:instruction float_inc} {:instruction float_dup} {:instruction integer_min} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction 25} {:instruction float_stackdepth} {:instruction float_inc} {:instruction float_dup_times} {:instruction float_yank} {:instruction float_inc} {:instruction integer_add} {:instruction integer_yankdup} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_add} {:instruction integer_yankdup} {:instruction float_inc} {:instruction integer_max} {:instruction float_dup_times} {:instruction float_max} {:instruction float_dup_times} {:instruction float_stackdepth} {:instruction float_inc} {:instruction float_inc} {:instruction float_dup_times} {:instruction float_yank} {:instruction integer_add} {:instruction 25} {:instruction in2} {:instruction integer_add} {:instruction integer_yank} {:instruction float_dup_times} {:instruction float_dec} {:instruction in1} {:instruction 78.00430018095415} {:instruction float_rot} {:instruction float_dup_times} {:instruction float_rot} {:instruction integer_yankdup} {:instruction integer_add} {:instruction float_dec} {:instruction float_inc} {:instruction float_sub} {:instruction float_rot} {:instruction integer_shove} {:instruction float_rot} {:instruction float_sub} {:instruction float_rot} {:instruction tag_integer_154} {:instruction float_inc} {:instruction integer_swap} {:instruction integer_min} {:instruction print_float} {:instruction integer_pop} {:instruction float_pop})
Best program: (float_mod float_pop integer_max in1 float_max in2 float_pop integer_mod float_flush float_pop integer_max integer_flush in1 in1 float_stackdepth in2 integer_add integer_add float_inc float_inc float_inc float_inc integer_add float_inc integer_max float_inc integer_add float_inc integer_add float_inc float_inc float_inc float_inc float_inc float_inc integer_add float_inc integer_add float_inc float_inc float_inc float_inc integer_add float_inc float_inc integer_sub float_inc float_inc integer_add float_inc integer_add float_inc float_inc integer_add float_inc float_inc integer_max float_inc float_inc float_inc float_inc float_dup_times float_rot float_stackdepth float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc integer_add float_inc integer_max float_inc float_dup integer_min float_inc float_inc float_inc 25 float_stackdepth float_inc float_dup_times float_yank float_inc integer_add integer_yankdup float_inc float_inc float_inc float_inc integer_add integer_yankdup float_inc integer_max float_dup_times float_max float_dup_times float_stackdepth float_inc float_inc float_dup_times float_yank integer_add 25 in2 integer_add integer_yank float_dup_times float_dec in1 78.00430018095415 float_rot float_dup_times float_rot integer_yankdup integer_add float_dec float_inc float_sub float_rot integer_shove float_rot float_sub float_rot tag_integer_154 float_inc integer_swap integer_min print_float integer_pop float_pop)
Errors: [22.9957 8 27.0 2 8.9957 8 41.0 2 19.0 2 5.9957 9 28.0043 7 5.0 1 27.0043 8 14.0 2 0.0 0 10.0043 7 30.0 1 3.0 1 28.0 2 0.0043 6 0.0 0 33.0 9 30.9957 9 10.0 1 26.0 2 31.0 2 0.0 0 3.0043 6 1.0 1]
Total: 501.0043
Mean: 10.020086
Genome size: 137
Size: 138
Percent parens: 0.007
--- Population Statistics ---
Average total errors in population: 2748.2205036000014
Median total errors in population: 1003.7366499999998
Error averages by case: (118.21366839999986 9.928 107.5048792 4.049 100.97434389999981 7.03 120.97314869999997 3.782 103.94081280000005 3.68 120.0924334999998 7.896 103.18483380000026 6.363 85.5368819 4.004 101.27916820000016 7.016 103.43735290000015 3.892 91.5647362000001 2.559 111.38335980000006 7.336 102.59374600000004 3.581 87.80711870000002 3.01 123.51702389999987 3.856 100.92881240000011 8.023 84.82531100000003 4.576 117.66159220000009 9.926 120.95451529999985 10.745 84.88687730000001 3.03 115.41975680000009 4.047 99.73917920000005 3.628 91.6566008 3.347 115.17252360000016 6.551 99.74482709999992 3.372)
Error minima by case: (0.2065 7 0.2433 1 0.4998 1 6.0 1 1.3192 1 0.0043 1 0.9997 1 0.0 0 1.0043 1 0.0 0 0.0 0 0.0043 1 0.1083 1 0.0 0 5.0 1 0.0043 1 0.0 0 0.0172 7 2.2061 7 0.0 0 1.1931 1 0.0 0 0.0 0 0.0043 1 0.0 0)
Average genome size in population (length): 137.053
Average program size in population (points): 138.053
Average percent parens in population: 0.007
Minimum age in population: 213.5254008037554
Maximum age in population: 217.9640538886719
Average age in population: 216.0560690092372
Median age in population: 216.1135845269214
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 7
Genome diversity (% unique Plush genomes):	 0.941
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 7
Syntactic diversity (% unique Push programs):	 0.941
Total error diversity:				 0.586
Error (vector) diversity:			 0.672
Behavioral diversity:				 0.675
--- Run Statistics ---
Number of program evaluations used so far: 159000
Number of point (instruction) evaluations so far: 411357476
--- Timings ---
Current time: 1529616633227 milliseconds
Total Time:         697.4 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       214.7 seconds, 30.8%
Fitness Testing:    384.8 seconds, 55.2%
Report:              97.8 seconds, 14.0%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 158
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 159
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 159
;;******************************
;; -*- Number IO problem report - generation 159
Test total error for best: 25988.931199999995
Test mean error for best: 12.99447
;;------------------------------
Outputs of best individual on training cases:
Correct output: -74.6179542037 | Program output: -51.6222543847
Correct output: 78.7609586813  | Program output: 51.7609586813 
Correct output: 3.0100598709   | Program output: 12.0057596899 
Correct output: -99.2368061293 | Program output: -59.2368061293
Correct output: 88.6808415603  | Program output: 69.6808415603 
Correct output: -151.1060419578 | Program output: -145.1103421388
Correct output: 56.004616184   | Program output: 28.000316003  
Correct output: 33.520660154   | Program output: 38.520660154  
Correct output: 42.238861085   | Program output: 15.2345609041 
Correct output: -49.0227893765 | Program output: -35.0227893765
Correct output: 103.4057483059 | Program output: 100.4057483059
Correct output: -106.1378273779 | Program output: -116.1421275589
Correct output: 37.9625599991  | Program output: 67.9625599991 
Correct output: 71.9208193203  | Program output: 71.9208193203 
Correct output: 173.5348464317 | Program output: 145.5348464317
Correct output: -77.0615185935 | Program output: -77.0658187744
Correct output: -20.7643622555 | Program output: -23.7643622555
Correct output: 1.9827630815   | Program output: -31.0172369185
Correct output: -39.1198682611 | Program output: -8.124168442  
Correct output: 1.1392376036   | Program output: 8.1392376036  
Correct output: 129.1930977679 | Program output: 103.1930977679
Correct output: 26.7496211861  | Program output: 57.7496211861 
Correct output: -11.2984801384 | Program output: -11.2984801384
Correct output: -136.1442960385 | Program output: -139.1485962195
Correct output: 143.0911996605 | Program output: 142.0911996605
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_mod} {:instruction float_pop} {:instruction integer_max} {:instruction in1} {:instruction float_max} {:instruction float_dup} {:instruction integer_dup_times} {:instruction integer_mod} {:instruction float_flush} {:instruction float_pop} {:instruction integer_max} {:instruction integer_flush} {:instruction in1} {:instruction in1} {:instruction float_stackdepth} {:instruction in2} {:instruction integer_add} {:instruction integer_add} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_add} {:instruction float_inc} {:instruction integer_max} {:instruction float_inc} {:instruction integer_add} {:instruction float_inc} {:instruction integer_add} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_add} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_add} {:instruction float_inc} {:instruction integer_add} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_add} {:instruction float_inc} {:instruction float_inc} {:instruction integer_sub} {:instruction float_inc} {:instruction float_inc} {:instruction integer_add} {:instruction float_inc} {:instruction integer_add} {:instruction float_inc} {:instruction float_inc} {:instruction integer_add} {:instruction float_inc} {:instruction float_inc} {:instruction integer_max} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_dup_times} {:instruction float_rot} {:instruction float_stackdepth} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_min} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_add} {:instruction float_inc} {:instruction float_inc} {:instruction integer_max} {:instruction float_inc} {:instruction float_dup} {:instruction float_inc} {:instruction 25} {:instruction float_stackdepth} {:instruction float_inc} {:instruction float_dup_times} {:instruction float_yank} {:instruction float_inc} {:instruction integer_add} {:instruction integer_yankdup} {:instruction float_inc} {:instruction integer_add} {:instruction integer_yankdup} {:instruction float_inc} {:instruction integer_max} {:instruction float_dup_times} {:instruction float_max} {:instruction float_dup_times} {:instruction float_stackdepth} {:instruction float_inc} {:instruction float_inc} {:instruction float_dup_times} {:instruction float_yank} {:instruction integer_add} {:instruction 25} {:instruction in2} {:instruction integer_add} {:instruction integer_yank} {:instruction float_dup_times} {:instruction float_dec} {:instruction in1} {:instruction 78.00430018095415} {:instruction float_rot} {:instruction float_dup_times} {:instruction float_rot} {:instruction integer_yankdup} {:instruction integer_add} {:instruction float_dec} {:instruction float_inc} {:instruction float_sub} {:instruction float_rot} {:instruction integer_shove} {:instruction float_rot} {:instruction float_sub} {:instruction float_rot} {:instruction tag_integer_154} {:instruction float_inc} {:instruction integer_swap} {:instruction integer_min} {:instruction print_float} {:instruction integer_pop} {:instruction float_pop})
Best program: (float_mod float_pop integer_max in1 float_max float_dup integer_dup_times integer_mod float_flush float_pop integer_max integer_flush in1 in1 float_stackdepth in2 integer_add integer_add float_inc float_inc float_inc float_inc integer_add float_inc integer_max float_inc integer_add float_inc integer_add float_inc float_inc float_inc float_inc float_inc float_inc integer_add float_inc float_inc float_inc integer_add float_inc integer_add float_inc float_inc float_inc float_inc integer_add float_inc float_inc integer_sub float_inc float_inc integer_add float_inc integer_add float_inc float_inc integer_add float_inc float_inc integer_max float_inc float_inc float_inc float_inc float_dup_times float_rot float_stackdepth float_inc float_inc float_inc float_inc float_inc float_inc float_inc integer_min float_inc float_inc float_inc float_inc float_inc integer_add float_inc float_inc integer_max float_inc float_dup float_inc 25 float_stackdepth float_inc float_dup_times float_yank float_inc integer_add integer_yankdup float_inc integer_add integer_yankdup float_inc integer_max float_dup_times float_max float_dup_times float_stackdepth float_inc float_inc float_dup_times float_yank integer_add 25 in2 integer_add integer_yank float_dup_times float_dec in1 78.00430018095415 float_rot float_dup_times float_rot integer_yankdup integer_add float_dec float_inc float_sub float_rot integer_shove float_rot float_sub float_rot tag_integer_154 float_inc integer_swap integer_min print_float integer_pop float_pop)
Errors: [22.9957 8 27.0 2 8.9957 8 40.0 1 19.0 2 5.9957 9 28.0043 7 5.0 1 27.0043 8 14.0 2 3.0 1 10.0043 7 30.0 1 0.0 0 28.0 2 0.0043 6 3.0 1 33.0 9 30.9957 9 7.0 1 26.0 2 31.0 2 0.0 0 3.0043 6 1.0 1]
Total: 500.0043
Mean: 10.000086
Genome size: 138
Size: 139
Percent parens: 0.007
--- Population Statistics ---
Average total errors in population: 3186.9668172000015
Median total errors in population: 995.7284499999998
Error averages by case: (137.23616069999983 10.029 120.09463550000002 4.249 119.65258929999986 6.977 135.32164269999996 3.912 118.24249170000003 3.832 139.2325485999999 7.965 120.62046140000025 6.346 99.8259199 4.267 118.77835010000022 6.987 120.84690440000016 4.047 112.33008440000008 2.86 131.8001218000001 7.348 116.84769910000004 3.738 109.31795210000006 3.253 139.57626999999985 4.06 123.06723639999998 7.825 104.12121570000002 4.707 135.20543740000014 10.122 140.6956086999999 10.892 96.47663850000005 3.169 133.14550200000008 4.237 114.36912710000003 3.784 110.62816410000003 3.527 134.37150210000019 6.573 116.85855349999994 3.598)
Error minima by case: (4.9957 7 0.2433 1 0.0043 1 19.0 1 3.0 1 0.0043 2 0.956 1 0.0 0 0.0043 1 0.0 0 0.0 0 0.0043 1 0.0 0 0.0 0 12.0 1 0.0043 1 0.0 0 0.0172 7 5.6361 8 0.3317 1 0.6659 1 0.0378 1 0.0 0 0.0043 1 0.0 0)
Average genome size in population (length): 136.559
Average program size in population (points): 137.559
Average percent parens in population: 0.007
Minimum age in population: 215.020143229104
Maximum age in population: 219.4087216546121
Average age in population: 217.3824692826159
Median age in population: 217.4563004151713
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 7
Genome diversity (% unique Plush genomes):	 0.944
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 7
Syntactic diversity (% unique Push programs):	 0.944
Total error diversity:				 0.576
Error (vector) diversity:			 0.661
Behavioral diversity:				 0.661
--- Run Statistics ---
Number of program evaluations used so far: 160000
Number of point (instruction) evaluations so far: 414771451
--- Timings ---
Current time: 1529616638493 milliseconds
Total Time:         702.7 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       216.1 seconds, 30.8%
Fitness Testing:    387.9 seconds, 55.2%
Report:              98.5 seconds, 14.0%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 159
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 160
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 160
;;******************************
;; -*- Number IO problem report - generation 160
Test total error for best: 25654.853799999993
Test mean error for best: 12.82743
;;------------------------------
Outputs of best individual on training cases:
Correct output: -74.6179542037 | Program output: -49.6222543847
Correct output: 78.7609586813  | Program output: 52.7609586813 
Correct output: 3.0100598709   | Program output: 14.0057596899 
Correct output: -99.2368061293 | Program output: -66.2368061293
Correct output: 88.6808415603  | Program output: 70.6808415603 
Correct output: -151.1060419578 | Program output: -143.1103421388
Correct output: 56.004616184   | Program output: 30.000316003  
Correct output: 33.520660154   | Program output: 39.520660154  
Correct output: 42.238861085   | Program output: 17.2345609041 
Correct output: -49.0227893765 | Program output: -34.0227893765
Correct output: 103.4057483059 | Program output: 103.4057483059
Correct output: -106.1378273779 | Program output: -114.1421275589
Correct output: 37.9625599991  | Program output: 68.9625599991 
Correct output: 71.9208193203  | Program output: 74.9208193203 
Correct output: 173.5348464317 | Program output: 146.5348464317
Correct output: -77.0615185935 | Program output: -75.0658187744
Correct output: -20.7643622555 | Program output: -20.7643622555
Correct output: 1.9827630815   | Program output: -30.0172369185
Correct output: -39.1198682611 | Program output: -6.124168442  
Correct output: 1.1392376036   | Program output: 11.1392376036 
Correct output: 129.1930977679 | Program output: 104.1930977679
Correct output: 26.7496211861  | Program output: 58.7496211861 
Correct output: -11.2984801384 | Program output: -10.2984801384
Correct output: -136.1442960385 | Program output: -137.1485962195
Correct output: 143.0911996605 | Program output: 143.0911996605
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_mod} {:instruction integer_dup_times} {:instruction integer_max} {:instruction integer_max} {:instruction in1} {:instruction float_max} {:instruction in2} {:instruction float_pop} {:instruction integer_mod} {:instruction float_flush} {:instruction float_pop} {:instruction integer_max} {:instruction integer_flush} {:instruction in1} {:instruction in1} {:instruction float_stackdepth} {:instruction in2} {:instruction integer_add} {:instruction integer_add} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_add} {:instruction float_inc} {:instruction integer_max} {:instruction float_inc} {:instruction integer_add} {:instruction float_inc} {:instruction integer_add} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_add} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_add} {:instruction float_inc} {:instruction integer_add} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_add} {:instruction integer_min} {:instruction float_inc} {:instruction integer_sub} {:instruction float_inc} {:instruction float_inc} {:instruction integer_add} {:instruction float_inc} {:instruction float_inc} {:instruction integer_add} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_add} {:instruction float_inc} {:instruction float_inc} {:instruction integer_max} {:instruction integer_swap} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_dup_times} {:instruction float_rot} {:instruction float_stackdepth} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_min} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_add} {:instruction float_inc} {:instruction float_inc} {:instruction integer_max} {:instruction float_inc} {:instruction float_dup} {:instruction float_inc} {:instruction 25} {:instruction float_stackdepth} {:instruction float_inc} {:instruction float_dup_times} {:instruction float_yank} {:instruction float_inc} {:instruction integer_add} {:instruction integer_yankdup} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_add} {:instruction integer_yankdup} {:instruction float_inc} {:instruction integer_max} {:instruction float_dup_times} {:instruction float_max} {:instruction float_dup_times} {:instruction float_stackdepth} {:instruction float_inc} {:instruction float_inc} {:instruction float_dup_times} {:instruction float_yank} {:instruction float_rot} {:instruction 25} {:instruction in2} {:instruction integer_add} {:instruction integer_yank} {:instruction float_dup_times} {:instruction float_dec} {:instruction in1} {:instruction 78.00430018095415} {:instruction float_rot} {:instruction float_dup_times} {:instruction float_rot} {:instruction integer_yankdup} {:instruction integer_add} {:instruction float_dec} {:instruction float_inc} {:instruction float_sub} {:instruction float_rot} {:instruction integer_shove} {:instruction float_rot} {:instruction float_sub} {:instruction float_rot} {:instruction integer_sub} {:instruction float_inc} {:instruction integer_swap} {:instruction integer_min} {:instruction print_float} {:instruction integer_pop} {:instruction float_pop})
Best program: (float_mod integer_dup_times integer_max integer_max in1 float_max in2 float_pop integer_mod float_flush float_pop integer_max integer_flush in1 in1 float_stackdepth in2 integer_add integer_add float_inc float_inc float_inc float_inc integer_add float_inc integer_max float_inc integer_add float_inc integer_add float_inc float_inc float_inc float_inc float_inc float_inc integer_add float_inc float_inc float_inc integer_add float_inc integer_add float_inc float_inc float_inc float_inc float_inc integer_add integer_min float_inc integer_sub float_inc float_inc integer_add float_inc float_inc integer_add float_inc float_inc float_inc float_inc integer_add float_inc float_inc integer_max integer_swap float_inc float_inc float_inc float_dup_times float_rot float_stackdepth float_inc float_inc float_inc integer_min float_inc float_inc float_inc float_inc float_inc integer_add float_inc float_inc integer_max float_inc float_dup float_inc 25 float_stackdepth float_inc float_dup_times float_yank float_inc integer_add integer_yankdup float_inc float_inc float_inc float_inc integer_add integer_yankdup float_inc integer_max float_dup_times float_max float_dup_times float_stackdepth float_inc float_inc float_dup_times float_yank float_rot 25 in2 integer_add integer_yank float_dup_times float_dec in1 78.00430018095415 float_rot float_dup_times float_rot integer_yankdup integer_add float_dec float_inc float_sub float_rot integer_shove float_rot float_sub float_rot integer_sub float_inc integer_swap integer_min print_float integer_pop float_pop)
Errors: [24.9957 8 26.0 2 10.9957 8 33.0 2 18.0 2 7.9957 9 26.0043 7 6.0 1 25.0043 8 15.0 2 0.0 0 8.0043 8 31.0 2 3.0 1 27.0 2 1.9957 7 0.0 0 32.0 10 32.9957 9 10.0 1 25.0 2 32.0 2 1.0 1 1.0043 6 0.0 0]
Total: 497.9957
Mean: 9.959914
Genome size: 142
Size: 143
Percent parens: 0.007
--- Population Statistics ---
Average total errors in population: 2720.568677100001
Median total errors in population: 980.9669999999999
Error averages by case: (120.70522429999987 9.881 102.61465870000004 3.992 103.53794089999982 6.895 118.10697759999994 3.61 99.17766670000007 3.629 123.52294119999983 7.879 104.70784990000026 6.266 83.08115849999997 3.884 102.86495120000019 6.913 99.23909800000011 3.766 89.03240280000009 2.469 116.72747640000009 7.269 99.46373770000001 3.508 85.41885110000003 2.895 118.58494829999985 3.802 108.58968480000004 7.755 84.71856520000003 4.161 114.8364720000001 9.965 124.92163529999995 10.746 76.79465330000001 2.827 112.41993950000007 3.99 95.73685970000002 3.552 89.38037860000004 3.2 118.58042040000021 6.481 95.17418499999995 3.295)
Error minima by case: (0.0704 3 0.2433 1 0.766 1 9.2368 1 0.6765 1 0.0043 1 0.9997 1 0.0 0 2.9957 1 0.0 0 0.0 0 0.0043 1 0.0 0 0.0 0 10.0 1 0.0043 1 0.0 0 0.0172 6 1.7603 7 0.1392 1 8.0 1 0.7496 1 0.0 0 0.0043 1 0.0 0)
Average genome size in population (length): 136.443
Average program size in population (points): 137.443
Average percent parens in population: 0.007
Minimum age in population: 216.236681740652
Maximum age in population: 220.4353622507731
Average age in population: 218.6510495909452
Median age in population: 218.695872492094
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 13
Genome diversity (% unique Plush genomes):	 0.934
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 13
Syntactic diversity (% unique Push programs):	 0.934
Total error diversity:				 0.565
Error (vector) diversity:			 0.655
Behavioral diversity:				 0.656
--- Run Statistics ---
Number of program evaluations used so far: 161000
Number of point (instruction) evaluations so far: 418182526
--- Timings ---
Current time: 1529616643657 milliseconds
Total Time:         707.8 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       217.5 seconds, 30.7%
Fitness Testing:    391.0 seconds, 55.2%
Report:              99.3 seconds, 14.0%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 160
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 161
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 161
;;******************************
;; -*- Number IO problem report - generation 161
Test total error for best: 25654.853799999993
Test mean error for best: 12.82743
;;------------------------------
Outputs of best individual on training cases:
Correct output: -74.6179542037 | Program output: -49.6222543847
Correct output: 78.7609586813  | Program output: 52.7609586813 
Correct output: 3.0100598709   | Program output: 14.0057596899 
Correct output: -99.2368061293 | Program output: -66.2368061293
Correct output: 88.6808415603  | Program output: 70.6808415603 
Correct output: -151.1060419578 | Program output: -143.1103421388
Correct output: 56.004616184   | Program output: 30.000316003  
Correct output: 33.520660154   | Program output: 39.520660154  
Correct output: 42.238861085   | Program output: 17.2345609041 
Correct output: -49.0227893765 | Program output: -34.0227893765
Correct output: 103.4057483059 | Program output: 103.4057483059
Correct output: -106.1378273779 | Program output: -114.1421275589
Correct output: 37.9625599991  | Program output: 68.9625599991 
Correct output: 71.9208193203  | Program output: 74.9208193203 
Correct output: 173.5348464317 | Program output: 146.5348464317
Correct output: -77.0615185935 | Program output: -75.0658187744
Correct output: -20.7643622555 | Program output: -20.7643622555
Correct output: 1.9827630815   | Program output: -30.0172369185
Correct output: -39.1198682611 | Program output: -6.124168442  
Correct output: 1.1392376036   | Program output: 11.1392376036 
Correct output: 129.1930977679 | Program output: 104.1930977679
Correct output: 26.7496211861  | Program output: 58.7496211861 
Correct output: -11.2984801384 | Program output: -10.2984801384
Correct output: -136.1442960385 | Program output: -137.1485962195
Correct output: 143.0911996605 | Program output: 143.0911996605
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_mod} {:instruction integer_dup_times} {:instruction integer_max} {:instruction integer_max} {:instruction in1} {:instruction float_max} {:instruction in2} {:instruction float_pop} {:instruction integer_mod} {:instruction float_flush} {:instruction float_pop} {:instruction integer_max} {:instruction integer_flush} {:instruction in1} {:instruction in1} {:instruction float_stackdepth} {:instruction in2} {:instruction integer_add} {:instruction integer_add} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_add} {:instruction float_inc} {:instruction integer_max} {:instruction float_inc} {:instruction integer_add} {:instruction float_inc} {:instruction integer_add} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_add} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_add} {:instruction float_inc} {:instruction integer_add} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_add} {:instruction integer_min} {:instruction float_inc} {:instruction integer_sub} {:instruction float_inc} {:instruction float_inc} {:instruction integer_add} {:instruction float_inc} {:instruction float_inc} {:instruction integer_add} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_add} {:instruction float_inc} {:instruction float_inc} {:instruction integer_max} {:instruction integer_swap} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_dup_times} {:instruction float_rot} {:instruction float_stackdepth} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_min} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_add} {:instruction float_inc} {:instruction float_inc} {:instruction integer_max} {:instruction float_inc} {:instruction float_dup} {:instruction float_inc} {:instruction 25} {:instruction float_stackdepth} {:instruction float_inc} {:instruction float_dup_times} {:instruction float_yank} {:instruction float_inc} {:instruction integer_add} {:instruction integer_yankdup} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_add} {:instruction integer_yankdup} {:instruction float_inc} {:instruction integer_max} {:instruction float_dup_times} {:instruction float_max} {:instruction float_dup_times} {:instruction float_stackdepth} {:instruction float_inc} {:instruction float_inc} {:instruction float_dup_times} {:instruction float_yank} {:instruction float_rot} {:instruction 25} {:instruction in2} {:instruction integer_add} {:instruction integer_yank} {:instruction float_dup_times} {:instruction float_dec} {:instruction in1} {:instruction 78.00430018095415} {:instruction float_rot} {:instruction float_dup_times} {:instruction float_rot} {:instruction integer_yankdup} {:instruction integer_add} {:instruction float_dec} {:instruction float_inc} {:instruction float_sub} {:instruction float_rot} {:instruction integer_shove} {:instruction float_rot} {:instruction float_sub} {:instruction float_rot} {:instruction integer_sub} {:instruction float_inc} {:instruction integer_swap} {:instruction integer_min} {:instruction print_float} {:instruction integer_pop} {:instruction float_pop})
Best program: (float_mod integer_dup_times integer_max integer_max in1 float_max in2 float_pop integer_mod float_flush float_pop integer_max integer_flush in1 in1 float_stackdepth in2 integer_add integer_add float_inc float_inc float_inc float_inc integer_add float_inc integer_max float_inc integer_add float_inc integer_add float_inc float_inc float_inc float_inc float_inc float_inc integer_add float_inc float_inc float_inc integer_add float_inc integer_add float_inc float_inc float_inc float_inc float_inc integer_add integer_min float_inc integer_sub float_inc float_inc integer_add float_inc float_inc integer_add float_inc float_inc float_inc float_inc integer_add float_inc float_inc integer_max integer_swap float_inc float_inc float_inc float_dup_times float_rot float_stackdepth float_inc float_inc float_inc integer_min float_inc float_inc float_inc float_inc float_inc integer_add float_inc float_inc integer_max float_inc float_dup float_inc 25 float_stackdepth float_inc float_dup_times float_yank float_inc integer_add integer_yankdup float_inc float_inc float_inc float_inc integer_add integer_yankdup float_inc integer_max float_dup_times float_max float_dup_times float_stackdepth float_inc float_inc float_dup_times float_yank float_rot 25 in2 integer_add integer_yank float_dup_times float_dec in1 78.00430018095415 float_rot float_dup_times float_rot integer_yankdup integer_add float_dec float_inc float_sub float_rot integer_shove float_rot float_sub float_rot integer_sub float_inc integer_swap integer_min print_float integer_pop float_pop)
Errors: [24.9957 8 26.0 2 10.9957 8 33.0 2 18.0 2 7.9957 9 26.0043 7 6.0 1 25.0043 8 15.0 2 0.0 0 8.0043 8 31.0 2 3.0 1 27.0 2 1.9957 7 0.0 0 32.0 10 32.9957 9 10.0 1 25.0 2 32.0 2 1.0 1 1.0043 6 0.0 0]
Total: 497.9957
Mean: 9.959914
Genome size: 142
Size: 143
Percent parens: 0.007
--- Population Statistics ---
Average total errors in population: 2593.9486359
Median total errors in population: 1020.5
Error averages by case: (117.65070829999986 9.986 99.49819749999999 4.028 98.58964979999985 6.828 115.59284939999993 3.635 95.16677850000005 3.69 118.54740679999986 7.774 99.01082100000022 6.21 77.01354030000002 3.989 97.70061990000015 6.844 93.75189650000016 3.847 82.8035495000001 2.571 109.80523380000011 7.218 93.49251380000004 3.594 80.11917980000001 2.961 114.25945319999987 3.853 102.16215110000007 7.797 76.11641340000001 4.586 108.82768160000013 10.006 120.48791459999985 10.888 76.39544679999997 2.885 107.40830550000013 4.032 90.81138289999997 3.619 80.58403320000001 3.225 113.3869242000002 6.405 90.91098449999998 3.384)
Error minima by case: (2.4126 7 0.2433 1 0.0043 1 8.47 1 2.7646 1 0.0043 2 0.9957 1 0.0 0 0.0043 1 0.0 0 0.0 0 0.0043 1 0.0 0 0.0 0 14.0 1 0.0043 1 0.0 0 0.0511 7 3.5652 8 0.0099 1 1.8112 1 0.0 0 0.0 0 0.0043 1 0.0 0)
Average genome size in population (length): 136.242
Average program size in population (points): 137.242
Average percent parens in population: 0.007
Minimum age in population: 217.3985469599021
Maximum age in population: 222.1575553879475
Average age in population: 219.9956960212687
Median age in population: 220.0411701148894
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 12
Genome diversity (% unique Plush genomes):	 0.947
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 12
Syntactic diversity (% unique Push programs):	 0.947
Total error diversity:				 0.58
Error (vector) diversity:			 0.69
Behavioral diversity:				 0.69
--- Run Statistics ---
Number of program evaluations used so far: 162000
Number of point (instruction) evaluations so far: 421588576
--- Timings ---
Current time: 1529616648875 milliseconds
Total Time:         713.1 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       218.9 seconds, 30.7%
Fitness Testing:    394.1 seconds, 55.3%
Report:             100.0 seconds, 14.0%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 161
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 162
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 162
;;******************************
;; -*- Number IO problem report - generation 162
Test total error for best: 25653.85379999999
Test mean error for best: 12.82693
;;------------------------------
Outputs of best individual on training cases:
Correct output: -74.6179542037 | Program output: -49.6222543847
Correct output: 78.7609586813  | Program output: 51.7609586813 
Correct output: 3.0100598709   | Program output: 14.0057596899 
Correct output: -99.2368061293 | Program output: -67.2368061293
Correct output: 88.6808415603  | Program output: 69.6808415603 
Correct output: -151.1060419578 | Program output: -143.1103421388
Correct output: 56.004616184   | Program output: 30.000316003  
Correct output: 33.520660154   | Program output: 38.520660154  
Correct output: 42.238861085   | Program output: 17.2345609041 
Correct output: -49.0227893765 | Program output: -35.0227893765
Correct output: 103.4057483059 | Program output: 103.4057483059
Correct output: -106.1378273779 | Program output: -114.1421275589
Correct output: 37.9625599991  | Program output: 67.9625599991 
Correct output: 71.9208193203  | Program output: 74.9208193203 
Correct output: 173.5348464317 | Program output: 145.5348464317
Correct output: -77.0615185935 | Program output: -75.0658187744
Correct output: -20.7643622555 | Program output: -20.7643622555
Correct output: 1.9827630815   | Program output: -31.0172369185
Correct output: -39.1198682611 | Program output: -6.124168442  
Correct output: 1.1392376036   | Program output: 11.1392376036 
Correct output: 129.1930977679 | Program output: 103.1930977679
Correct output: 26.7496211861  | Program output: 57.7496211861 
Correct output: -11.2984801384 | Program output: -11.2984801384
Correct output: -136.1442960385 | Program output: -137.1485962195
Correct output: 143.0911996605 | Program output: 142.0911996605
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_mod} {:instruction integer_dup_times} {:instruction integer_max} {:instruction integer_max} {:instruction float_inc} {:instruction float_max} {:instruction in2} {:instruction float_pop} {:instruction integer_mod} {:instruction float_flush} {:instruction float_pop} {:instruction integer_max} {:instruction integer_flush} {:instruction in1} {:instruction in1} {:instruction float_stackdepth} {:instruction in2} {:instruction integer_add} {:instruction integer_add} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_add} {:instruction float_inc} {:instruction integer_max} {:instruction float_inc} {:instruction integer_add} {:instruction float_inc} {:instruction integer_add} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_add} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_add} {:instruction float_inc} {:instruction integer_add} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_add} {:instruction integer_min} {:instruction float_inc} {:instruction integer_sub} {:instruction float_inc} {:instruction float_inc} {:instruction integer_add} {:instruction float_inc} {:instruction float_inc} {:instruction integer_add} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_add} {:instruction float_inc} {:instruction float_inc} {:instruction integer_max} {:instruction integer_swap} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_dup_times} {:instruction float_rot} {:instruction float_stackdepth} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_min} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_add} {:instruction float_inc} {:instruction float_inc} {:instruction integer_max} {:instruction float_inc} {:instruction float_dup} {:instruction integer_dup_times} {:instruction 25} {:instruction float_stackdepth} {:instruction float_inc} {:instruction float_dup_times} {:instruction float_yank} {:instruction float_inc} {:instruction integer_add} {:instruction integer_yankdup} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_add} {:instruction integer_yankdup} {:instruction float_inc} {:instruction integer_max} {:instruction float_dup_times} {:instruction float_max} {:instruction float_dup_times} {:instruction float_stackdepth} {:instruction float_inc} {:instruction float_inc} {:instruction float_dup_times} {:instruction float_yank} {:instruction float_rot} {:instruction 25} {:instruction in2} {:instruction integer_add} {:instruction integer_yank} {:instruction float_dup_times} {:instruction float_dec} {:instruction in1} {:instruction 78.00430018095415} {:instruction float_rot} {:instruction float_dup_times} {:instruction float_rot} {:instruction integer_yankdup} {:instruction integer_add} {:instruction float_dec} {:instruction float_inc} {:instruction float_sub} {:instruction float_rot} {:instruction integer_shove} {:instruction float_rot} {:instruction float_sub} {:instruction float_rot} {:instruction integer_sub} {:instruction float_inc} {:instruction integer_swap} {:instruction integer_min} {:instruction print_float} {:instruction integer_pop} {:instruction float_pop})
Best program: (float_mod integer_dup_times integer_max integer_max float_inc float_max in2 float_pop integer_mod float_flush float_pop integer_max integer_flush in1 in1 float_stackdepth in2 integer_add integer_add float_inc float_inc float_inc float_inc integer_add float_inc integer_max float_inc integer_add float_inc integer_add float_inc float_inc float_inc float_inc float_inc float_inc integer_add float_inc float_inc float_inc integer_add float_inc integer_add float_inc float_inc float_inc float_inc float_inc integer_add integer_min float_inc integer_sub float_inc float_inc integer_add float_inc float_inc integer_add float_inc float_inc float_inc float_inc integer_add float_inc float_inc integer_max integer_swap float_inc float_inc float_inc float_dup_times float_rot float_stackdepth float_inc float_inc float_inc integer_min float_inc float_inc float_inc float_inc float_inc integer_add float_inc float_inc integer_max float_inc float_dup integer_dup_times 25 float_stackdepth float_inc float_dup_times float_yank float_inc integer_add integer_yankdup float_inc float_inc float_inc float_inc integer_add integer_yankdup float_inc integer_max float_dup_times float_max float_dup_times float_stackdepth float_inc float_inc float_dup_times float_yank float_rot 25 in2 integer_add integer_yank float_dup_times float_dec in1 78.00430018095415 float_rot float_dup_times float_rot integer_yankdup integer_add float_dec float_inc float_sub float_rot integer_shove float_rot float_sub float_rot integer_sub float_inc integer_swap integer_min print_float integer_pop float_pop)
Errors: [24.9957 8 27.0 2 10.9957 8 32.0 2 19.0 2 7.9957 9 26.0043 7 5.0 1 25.0043 8 14.0 2 0.0 0 8.0043 8 30.0 1 3.0 1 28.0 2 1.9957 7 0.0 0 33.0 9 32.9957 9 10.0 1 26.0 2 31.0 2 0.0 0 1.0043 6 1.0 1]
Total: 495.9957
Mean: 9.919914
Genome size: 142
Size: 143
Percent parens: 0.007
--- Population Statistics ---
Average total errors in population: 3041.4763134000004
Median total errors in population: 1043.0
Error averages by case: (133.66493029999987 10.018 114.06254969999999 4.204 117.13790459999986 6.948 131.28610449999996 3.79 111.89686880000005 3.872 134.62653679999983 7.876 117.64338580000025 6.281 93.17878699999999 4.023 116.51707750000017 6.904 114.52401010000013 4.041 103.06256920000007 2.851 126.74702980000005 7.298 111.51212470000002 3.787 99.88006899999999 3.211 133.05413319999985 4.095 117.81236860000004 7.797 94.08124230000001 4.816 128.3796779000001 10.088 137.54199429999986 10.886 94.13069189999999 3.152 125.81363890000006 4.248 105.70229170000002 3.804 102.09103710000005 3.488 129.5747275000002 6.494 109.97656219999995 3.606)
Error minima by case: (2.8902 7 0.2433 1 0.4998 1 18.0 1 0.0 0 0.0043 2 1.0043 1 0.0 0 0.0043 1 0.0 0 0.0 0 1.0043 1 0.0 0 0.0 0 9.0 1 0.0043 1 0.0 0 0.0172 6 2.5834 8 0.0 0 3.7842 1 0.0 1 0.0 0 0.0043 1 0.0 0)
Average genome size in population (length): 137.001
Average program size in population (points): 138.001
Average percent parens in population: 0.007
Minimum age in population: 219.0074035817206
Maximum age in population: 223.158978279984
Average age in population: 221.3266380201152
Median age in population: 221.3746411092782
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 11
Genome diversity (% unique Plush genomes):	 0.951
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 11
Syntactic diversity (% unique Push programs):	 0.951
Total error diversity:				 0.576
Error (vector) diversity:			 0.696
Behavioral diversity:				 0.696
--- Run Statistics ---
Number of program evaluations used so far: 163000
Number of point (instruction) evaluations so far: 425013601
--- Timings ---
Current time: 1529616654139 milliseconds
Total Time:         718.3 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       220.2 seconds, 30.7%
Fitness Testing:    397.1 seconds, 55.3%
Report:             100.8 seconds, 14.0%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 162
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 163
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 163
;;******************************
;; -*- Number IO problem report - generation 163
Test total error for best: 25653.85379999999
Test mean error for best: 12.82693
;;------------------------------
Outputs of best individual on training cases:
Correct output: -74.6179542037 | Program output: -49.6222543847
Correct output: 78.7609586813  | Program output: 51.7609586813 
Correct output: 3.0100598709   | Program output: 14.0057596899 
Correct output: -99.2368061293 | Program output: -67.2368061293
Correct output: 88.6808415603  | Program output: 69.6808415603 
Correct output: -151.1060419578 | Program output: -143.1103421388
Correct output: 56.004616184   | Program output: 30.000316003  
Correct output: 33.520660154   | Program output: 38.520660154  
Correct output: 42.238861085   | Program output: 17.2345609041 
Correct output: -49.0227893765 | Program output: -35.0227893765
Correct output: 103.4057483059 | Program output: 103.4057483059
Correct output: -106.1378273779 | Program output: -114.1421275589
Correct output: 37.9625599991  | Program output: 67.9625599991 
Correct output: 71.9208193203  | Program output: 74.9208193203 
Correct output: 173.5348464317 | Program output: 145.5348464317
Correct output: -77.0615185935 | Program output: -75.0658187744
Correct output: -20.7643622555 | Program output: -20.7643622555
Correct output: 1.9827630815   | Program output: -31.0172369185
Correct output: -39.1198682611 | Program output: -6.124168442  
Correct output: 1.1392376036   | Program output: 11.1392376036 
Correct output: 129.1930977679 | Program output: 103.1930977679
Correct output: 26.7496211861  | Program output: 57.7496211861 
Correct output: -11.2984801384 | Program output: -11.2984801384
Correct output: -136.1442960385 | Program output: -137.1485962195
Correct output: 143.0911996605 | Program output: 142.0911996605
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_mod} {:instruction integer_dup_times} {:instruction integer_max} {:instruction integer_max} {:instruction float_inc} {:instruction float_max} {:instruction in2} {:instruction float_pop} {:instruction integer_mod} {:instruction float_flush} {:instruction float_pop} {:instruction integer_max} {:instruction integer_flush} {:instruction in1} {:instruction in1} {:instruction float_stackdepth} {:instruction in2} {:instruction integer_add} {:instruction integer_add} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_add} {:instruction float_inc} {:instruction integer_max} {:instruction float_inc} {:instruction integer_add} {:instruction float_inc} {:instruction integer_add} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_add} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_add} {:instruction float_inc} {:instruction integer_add} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_add} {:instruction integer_min} {:instruction float_inc} {:instruction integer_sub} {:instruction float_inc} {:instruction float_inc} {:instruction integer_add} {:instruction float_inc} {:instruction float_inc} {:instruction integer_add} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_add} {:instruction float_inc} {:instruction float_inc} {:instruction integer_max} {:instruction integer_swap} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_dup_times} {:instruction float_rot} {:instruction float_stackdepth} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_min} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_add} {:instruction float_inc} {:instruction float_inc} {:instruction integer_max} {:instruction float_inc} {:instruction float_dup} {:instruction integer_dup_times} {:instruction 25} {:instruction float_stackdepth} {:instruction float_inc} {:instruction float_dup_times} {:instruction float_yank} {:instruction float_inc} {:instruction integer_add} {:instruction integer_yankdup} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_add} {:instruction integer_yankdup} {:instruction float_inc} {:instruction integer_max} {:instruction float_dup_times} {:instruction float_max} {:instruction float_dup_times} {:instruction float_stackdepth} {:instruction float_inc} {:instruction float_inc} {:instruction float_dup_times} {:instruction float_yank} {:instruction float_rot} {:instruction 25} {:instruction in2} {:instruction integer_add} {:instruction integer_yank} {:instruction float_dup_times} {:instruction float_dec} {:instruction in1} {:instruction 78.00430018095415} {:instruction float_rot} {:instruction float_dup_times} {:instruction float_rot} {:instruction integer_yankdup} {:instruction integer_add} {:instruction float_dec} {:instruction float_inc} {:instruction float_sub} {:instruction float_rot} {:instruction integer_shove} {:instruction float_rot} {:instruction float_sub} {:instruction float_rot} {:instruction integer_sub} {:instruction float_inc} {:instruction integer_swap} {:instruction integer_min} {:instruction print_float} {:instruction integer_pop} {:instruction float_pop})
Best program: (float_mod integer_dup_times integer_max integer_max float_inc float_max in2 float_pop integer_mod float_flush float_pop integer_max integer_flush in1 in1 float_stackdepth in2 integer_add integer_add float_inc float_inc float_inc float_inc integer_add float_inc integer_max float_inc integer_add float_inc integer_add float_inc float_inc float_inc float_inc float_inc float_inc integer_add float_inc float_inc float_inc integer_add float_inc integer_add float_inc float_inc float_inc float_inc float_inc integer_add integer_min float_inc integer_sub float_inc float_inc integer_add float_inc float_inc integer_add float_inc float_inc float_inc float_inc integer_add float_inc float_inc integer_max integer_swap float_inc float_inc float_inc float_dup_times float_rot float_stackdepth float_inc float_inc float_inc integer_min float_inc float_inc float_inc float_inc float_inc integer_add float_inc float_inc integer_max float_inc float_dup integer_dup_times 25 float_stackdepth float_inc float_dup_times float_yank float_inc integer_add integer_yankdup float_inc float_inc float_inc float_inc integer_add integer_yankdup float_inc integer_max float_dup_times float_max float_dup_times float_stackdepth float_inc float_inc float_dup_times float_yank float_rot 25 in2 integer_add integer_yank float_dup_times float_dec in1 78.00430018095415 float_rot float_dup_times float_rot integer_yankdup integer_add float_dec float_inc float_sub float_rot integer_shove float_rot float_sub float_rot integer_sub float_inc integer_swap integer_min print_float integer_pop float_pop)
Errors: [24.9957 8 27.0 2 10.9957 8 32.0 2 19.0 2 7.9957 9 26.0043 7 5.0 1 25.0043 8 14.0 2 0.0 0 8.0043 8 30.0 1 3.0 1 28.0 2 1.9957 7 0.0 0 33.0 9 32.9957 9 10.0 1 26.0 2 31.0 2 0.0 0 1.0043 6 1.0 1]
Total: 495.9957
Mean: 9.919914
Genome size: 142
Size: 143
Percent parens: 0.007
--- Population Statistics ---
Average total errors in population: 3161.039471100001
Median total errors in population: 1014.15475
Error averages by case: (137.59006459999983 9.986 123.2679342 4.269 118.02032439999984 7.154 132.7123451 3.804 120.45449020000005 3.972 138.25890089999984 8.109 119.53846030000025 6.46 102.16148950000016 4.265 118.75734100000017 7.167 118.53188360000016 4.108 106.81229170000007 2.756 130.92550600000004 7.516 118.11500760000003 3.875 105.3091605 3.136 139.5534419999998 4.128 120.07096340000005 7.911 101.08480370000004 4.678 133.12451010000007 10.078 142.32083549999987 10.834 92.7692021 3.136 132.73392280000016 4.326 113.85471180000008 3.883 106.05788180000003 3.57 133.28757460000017 6.667 116.25742369999992 3.681)
Error minima by case: (2.1396 7 0.2433 1 0.0458 1 12.4066 1 1.3192 1 0.0043 1 0.0043 1 0.0 0 0.2389 1 0.0 0 0.0 0 0.0043 1 0.0 0 0.0 0 15.0 1 0.0043 1 0.0 0 0.0111 7 3.2061 8 0.1392 1 11.1931 1 0.0152 1 0.0 0 0.0043 1 0.0 0)
Average genome size in population (length): 137.022
Average program size in population (points): 138.022
Average percent parens in population: 0.007
Minimum age in population: 220.8614007567196
Maximum age in population: 224.8597958719397
Average age in population: 222.604416336453
Median age in population: 222.6189192824367
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 14
Genome diversity (% unique Plush genomes):	 0.946
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 14
Syntactic diversity (% unique Push programs):	 0.946
Total error diversity:				 0.569
Error (vector) diversity:			 0.676
Behavioral diversity:				 0.677
--- Run Statistics ---
Number of program evaluations used so far: 164000
Number of point (instruction) evaluations so far: 428439151
--- Timings ---
Current time: 1529616659494 milliseconds
Total Time:         723.6 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       221.6 seconds, 30.6%
Fitness Testing:    400.2 seconds, 55.3%
Report:             101.6 seconds, 14.0%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 163
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 164
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 164
;;******************************
;; -*- Number IO problem report - generation 164
Test total error for best: 25653.85379999999
Test mean error for best: 12.82693
;;------------------------------
Outputs of best individual on training cases:
Correct output: -74.6179542037 | Program output: -49.6222543847
Correct output: 78.7609586813  | Program output: 51.7609586813 
Correct output: 3.0100598709   | Program output: 14.0057596899 
Correct output: -99.2368061293 | Program output: -67.2368061293
Correct output: 88.6808415603  | Program output: 69.6808415603 
Correct output: -151.1060419578 | Program output: -143.1103421388
Correct output: 56.004616184   | Program output: 30.000316003  
Correct output: 33.520660154   | Program output: 38.520660154  
Correct output: 42.238861085   | Program output: 17.2345609041 
Correct output: -49.0227893765 | Program output: -35.0227893765
Correct output: 103.4057483059 | Program output: 103.4057483059
Correct output: -106.1378273779 | Program output: -114.1421275589
Correct output: 37.9625599991  | Program output: 67.9625599991 
Correct output: 71.9208193203  | Program output: 74.9208193203 
Correct output: 173.5348464317 | Program output: 145.5348464317
Correct output: -77.0615185935 | Program output: -75.0658187744
Correct output: -20.7643622555 | Program output: -20.7643622555
Correct output: 1.9827630815   | Program output: -31.0172369185
Correct output: -39.1198682611 | Program output: -6.124168442  
Correct output: 1.1392376036   | Program output: 11.1392376036 
Correct output: 129.1930977679 | Program output: 103.1930977679
Correct output: 26.7496211861  | Program output: 57.7496211861 
Correct output: -11.2984801384 | Program output: -11.2984801384
Correct output: -136.1442960385 | Program output: -137.1485962195
Correct output: 143.0911996605 | Program output: 142.0911996605
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_mod} {:instruction integer_dup_times} {:instruction integer_max} {:instruction integer_max} {:instruction float_inc} {:instruction float_max} {:instruction in2} {:instruction float_pop} {:instruction integer_mod} {:instruction float_flush} {:instruction float_pop} {:instruction integer_max} {:instruction integer_flush} {:instruction in1} {:instruction in1} {:instruction float_stackdepth} {:instruction in2} {:instruction integer_add} {:instruction integer_add} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_add} {:instruction float_inc} {:instruction integer_max} {:instruction float_inc} {:instruction integer_add} {:instruction float_inc} {:instruction integer_add} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_add} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_add} {:instruction float_inc} {:instruction integer_add} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_add} {:instruction integer_min} {:instruction float_inc} {:instruction integer_sub} {:instruction float_inc} {:instruction float_inc} {:instruction integer_add} {:instruction float_inc} {:instruction float_inc} {:instruction integer_add} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_add} {:instruction float_inc} {:instruction float_inc} {:instruction integer_max} {:instruction integer_swap} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_dup_times} {:instruction float_rot} {:instruction float_stackdepth} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_min} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_add} {:instruction float_inc} {:instruction float_inc} {:instruction integer_max} {:instruction float_inc} {:instruction float_dup} {:instruction integer_dup_times} {:instruction 25} {:instruction float_stackdepth} {:instruction float_inc} {:instruction float_dup_times} {:instruction float_yank} {:instruction float_inc} {:instruction integer_add} {:instruction integer_yankdup} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_add} {:instruction integer_yankdup} {:instruction float_inc} {:instruction integer_max} {:instruction float_dup_times} {:instruction float_max} {:instruction float_dup_times} {:instruction float_stackdepth} {:instruction float_inc} {:instruction float_inc} {:instruction float_dup_times} {:instruction float_yank} {:instruction float_rot} {:instruction 25} {:instruction in2} {:instruction integer_add} {:instruction integer_yank} {:instruction float_dup_times} {:instruction float_dec} {:instruction in1} {:instruction 78.00430018095415} {:instruction float_rot} {:instruction float_dup_times} {:instruction float_rot} {:instruction integer_yankdup} {:instruction integer_add} {:instruction float_dec} {:instruction float_inc} {:instruction float_sub} {:instruction float_rot} {:instruction integer_shove} {:instruction float_rot} {:instruction float_sub} {:instruction float_rot} {:instruction integer_sub} {:instruction float_inc} {:instruction integer_swap} {:instruction integer_min} {:instruction print_float} {:instruction integer_pop} {:instruction float_pop})
Best program: (float_mod integer_dup_times integer_max integer_max float_inc float_max in2 float_pop integer_mod float_flush float_pop integer_max integer_flush in1 in1 float_stackdepth in2 integer_add integer_add float_inc float_inc float_inc float_inc integer_add float_inc integer_max float_inc integer_add float_inc integer_add float_inc float_inc float_inc float_inc float_inc float_inc integer_add float_inc float_inc float_inc integer_add float_inc integer_add float_inc float_inc float_inc float_inc float_inc integer_add integer_min float_inc integer_sub float_inc float_inc integer_add float_inc float_inc integer_add float_inc float_inc float_inc float_inc integer_add float_inc float_inc integer_max integer_swap float_inc float_inc float_inc float_dup_times float_rot float_stackdepth float_inc float_inc float_inc integer_min float_inc float_inc float_inc float_inc float_inc integer_add float_inc float_inc integer_max float_inc float_dup integer_dup_times 25 float_stackdepth float_inc float_dup_times float_yank float_inc integer_add integer_yankdup float_inc float_inc float_inc float_inc integer_add integer_yankdup float_inc integer_max float_dup_times float_max float_dup_times float_stackdepth float_inc float_inc float_dup_times float_yank float_rot 25 in2 integer_add integer_yank float_dup_times float_dec in1 78.00430018095415 float_rot float_dup_times float_rot integer_yankdup integer_add float_dec float_inc float_sub float_rot integer_shove float_rot float_sub float_rot integer_sub float_inc integer_swap integer_min print_float integer_pop float_pop)
Errors: [24.9957 8 27.0 2 10.9957 8 32.0 2 19.0 2 7.9957 9 26.0043 7 5.0 1 25.0043 8 14.0 2 0.0 0 8.0043 8 30.0 1 3.0 1 28.0 2 1.9957 7 0.0 0 33.0 9 32.9957 9 10.0 1 26.0 2 31.0 2 0.0 0 1.0043 6 1.0 1]
Total: 495.9957
Mean: 9.919914
Genome size: 142
Size: 143
Percent parens: 0.007
--- Population Statistics ---
Average total errors in population: 2779.1560262000003
Median total errors in population: 985.5
Error averages by case: (124.9085206999999 9.964 104.86724960000002 3.918 105.72573069999983 6.788 118.33114509999994 3.614 102.63544170000002 3.626 123.95979119999984 7.795 106.47860880000025 6.186 84.08791910000004 3.929 104.5477626000002 6.785 104.23812310000014 3.79 92.68346280000006 2.555 115.22272100000008 7.181 102.17048360000004 3.557 90.01775650000005 2.902 122.51246489999981 3.798 109.05590440000005 7.755 84.54101290000003 4.614 118.05408500000004 10.012 128.39766339999994 10.84 79.72656549999999 2.857 116.55658810000014 4.004 96.94692070000002 3.559 92.31852580000009 3.308 118.6290946000002 6.416 99.53248439999994 3.257)
Error minima by case: (0.0839 7 0.2433 1 0.0101 1 12.2368 1 0.0 0 0.0043 2 0.0043 1 0.0 0 0.7485 1 0.0 0 0.0 0 0.0043 1 0.6558 1 0.0 0 4.9957 1 0.0043 1 0.0 0 0.0177 7 4.8789 8 0.0 0 2.9957 1 0.0 0 0.0 0 0.0043 1 0.0 0)
Average genome size in population (length): 137.356
Average program size in population (points): 138.356
Average percent parens in population: 0.007
Minimum age in population: 221.8614007567196
Maximum age in population: 226.0980423110197
Average age in population: 223.8685208147887
Median age in population: 223.900373844364
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 10
Genome diversity (% unique Plush genomes):	 0.931
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 10
Syntactic diversity (% unique Push programs):	 0.931
Total error diversity:				 0.596
Error (vector) diversity:			 0.696
Behavioral diversity:				 0.697
--- Run Statistics ---
Number of program evaluations used so far: 165000
Number of point (instruction) evaluations so far: 431873076
--- Timings ---
Current time: 1529616664754 milliseconds
Total Time:         728.9 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       223.0 seconds, 30.6%
Fitness Testing:    403.3 seconds, 55.3%
Report:             102.5 seconds, 14.1%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 164
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 165
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 165
;;******************************
;; -*- Number IO problem report - generation 165
Test total error for best: 25643.81079999999
Test mean error for best: 12.82191
;;------------------------------
Outputs of best individual on training cases:
Correct output: -74.6179542037 | Program output: -48.6222543847
Correct output: 78.7609586813  | Program output: 52.7609586813 
Correct output: 3.0100598709   | Program output: 15.0057596899 
Correct output: -99.2368061293 | Program output: -68.2368061293
Correct output: 88.6808415603  | Program output: 70.6808415603 
Correct output: -151.1060419578 | Program output: -142.1103421388
Correct output: 56.004616184   | Program output: 31.000316003  
Correct output: 33.520660154   | Program output: 39.520660154  
Correct output: 42.238861085   | Program output: 18.2345609041 
Correct output: -49.0227893765 | Program output: -34.0227893765
Correct output: 103.4057483059 | Program output: 103.4057483059
Correct output: -106.1378273779 | Program output: -113.1421275589
Correct output: 37.9625599991  | Program output: 68.9625599991 
Correct output: 71.9208193203  | Program output: 74.9208193203 
Correct output: 173.5348464317 | Program output: 146.5348464317
Correct output: -77.0615185935 | Program output: -74.0658187744
Correct output: -20.7643622555 | Program output: -20.7643622555
Correct output: 1.9827630815   | Program output: -30.0172369185
Correct output: -39.1198682611 | Program output: -5.124168442  
Correct output: 1.1392376036   | Program output: 11.1392376036 
Correct output: 129.1930977679 | Program output: 104.1930977679
Correct output: 26.7496211861  | Program output: 58.7496211861 
Correct output: -11.2984801384 | Program output: -10.2984801384
Correct output: -136.1442960385 | Program output: -136.1485962195
Correct output: 143.0911996605 | Program output: 143.0911996605
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_mod} {:instruction integer_mod} {:instruction float_sin} {:instruction float_pop} {:instruction integer_mod} {:instruction float_flush} {:instruction float_pop} {:instruction integer_max} {:instruction integer_flush} {:instruction in1} {:instruction in1} {:instruction float_stackdepth} {:instruction in2} {:instruction integer_add} {:instruction integer_add} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_add} {:instruction float_inc} {:instruction integer_max} {:instruction float_inc} {:instruction integer_add} {:instruction float_inc} {:instruction integer_add} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_add} {:instruction float_inc} {:instruction integer_add} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_add} {:instruction float_inc} {:instruction float_inc} {:instruction float_rot} {:instruction float_inc} {:instruction float_inc} {:instruction integer_add} {:instruction float_inc} {:instruction integer_add} {:instruction float_inc} {:instruction float_inc} {:instruction float_rot} {:instruction float_inc} {:instruction float_inc} {:instruction integer_max} {:instruction float_inc} {:instruction float_inc} {:instruction integer_add} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_add} {:instruction float_inc} {:instruction float_inc} {:instruction integer_max} {:instruction integer_swap} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_dup_times} {:instruction float_rot} {:instruction float_stackdepth} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_min} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_add} {:instruction float_inc} {:instruction float_inc} {:instruction integer_max} {:instruction float_inc} {:instruction float_dup} {:instruction float_inc} {:instruction 25} {:instruction float_stackdepth} {:instruction float_swap} {:instruction float_dup_times} {:instruction float_yank} {:instruction float_inc} {:instruction integer_add} {:instruction integer_yankdup} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_add} {:instruction integer_yankdup} {:instruction float_inc} {:instruction integer_max} {:instruction float_dup_times} {:instruction float_max} {:instruction float_dup_times} {:instruction float_stackdepth} {:instruction float_inc} {:instruction float_inc} {:instruction float_dup_times} {:instruction float_yank} {:instruction float_rot} {:instruction 25} {:instruction in2} {:instruction integer_add} {:instruction integer_yank} {:instruction float_dup_times} {:instruction float_dec} {:instruction in1} {:instruction 78.00430018095415} {:instruction float_rot} {:instruction float_dup_times} {:instruction float_rot} {:instruction float_sub} {:instruction float_rot} {:instruction integer_shove} {:instruction float_rot} {:instruction float_sub} {:instruction float_rot} {:instruction integer_sub} {:instruction float_inc} {:instruction integer_swap} {:instruction integer_min} {:instruction print_float} {:instruction float_max} {:instruction float_pop})
Best program: (float_mod integer_mod float_sin float_pop integer_mod float_flush float_pop integer_max integer_flush in1 in1 float_stackdepth in2 integer_add integer_add float_inc float_inc float_inc float_inc integer_add float_inc integer_max float_inc integer_add float_inc integer_add float_inc float_inc float_inc float_inc float_inc float_inc integer_add float_inc integer_add float_inc float_inc float_inc float_inc integer_add float_inc float_inc float_rot float_inc float_inc integer_add float_inc integer_add float_inc float_inc float_rot float_inc float_inc integer_max float_inc float_inc integer_add float_inc float_inc float_inc float_inc integer_add float_inc float_inc integer_max integer_swap float_inc float_inc float_inc float_dup_times float_rot float_stackdepth float_inc float_inc float_inc integer_min float_inc float_inc float_inc float_inc float_inc integer_add float_inc float_inc integer_max float_inc float_dup float_inc 25 float_stackdepth float_swap float_dup_times float_yank float_inc integer_add integer_yankdup float_inc float_inc float_inc float_inc integer_add integer_yankdup float_inc integer_max float_dup_times float_max float_dup_times float_stackdepth float_inc float_inc float_dup_times float_yank float_rot 25 in2 integer_add integer_yank float_dup_times float_dec in1 78.00430018095415 float_rot float_dup_times float_rot float_sub float_rot integer_shove float_rot float_sub float_rot integer_sub float_inc integer_swap integer_min print_float float_max float_pop)
Errors: [25.9957 8 26.0 2 11.9957 8 31.0 2 18.0 2 8.9957 9 25.0043 7 6.0 1 24.0043 8 15.0 2 0.0 0 7.0043 8 31.0 2 3.0 1 27.0 2 2.9957 7 0.0 0 32.0 10 33.9957 9 10.0 1 25.0 2 32.0 2 1.0 1 0.0043 5 0.0 0]
Total: 495.9957
Mean: 9.919914
Genome size: 137
Size: 138
Percent parens: 0.007
--- Population Statistics ---
Average total errors in population: 2709.3351694000003
Median total errors in population: 992.0
Error averages by case: (123.91027739999988 10.01 102.75467259999998 3.91 107.03653689999985 6.643 115.4691633 3.39 98.68299000000002 3.465 124.4883125999998 7.657 104.69202160000023 6.072 80.23042960000001 3.79 103.96134490000019 6.685 100.6005605000001 3.618 86.79086840000006 2.423 116.31168360000007 7.042 97.67466080000003 3.384 84.0514582 2.744 119.18766859999985 3.691 103.62441170000004 7.744 79.92171760000004 4.32 116.2644891 10.02 130.9294046999999 10.878 72.0834691 2.693 112.73328260000007 3.813 94.92126230000007 3.423 88.54794200000002 3.048 118.99147450000022 6.26 95.63706679999993 3.115)
Error minima by case: (0.0839 7 0.2433 1 0.0869 1 8.2368 1 0.3192 1 0.9957 1 0.9997 1 0.0 0 1.0043 1 0.0 0 0.0 0 0.0043 1 0.0 0 0.0 0 8.0 1 0.0043 1 0.0 0 0.0172 8 4.7063 8 0.0 0 6.0 1 0.0 0 0.0 0 0.0043 1 0.0 0)
Average genome size in population (length): 138.279
Average program size in population (points): 139.279
Average percent parens in population: 0.007
Minimum age in population: 222.9062972393781
Maximum age in population: 227.2588251697286
Average age in population: 225.1757187100778
Median age in population: 225.2124681024887
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 7
Genome diversity (% unique Plush genomes):	 0.946
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 7
Syntactic diversity (% unique Push programs):	 0.946
Total error diversity:				 0.572
Error (vector) diversity:			 0.695
Behavioral diversity:				 0.696
--- Run Statistics ---
Number of program evaluations used so far: 166000
Number of point (instruction) evaluations so far: 435330076
--- Timings ---
Current time: 1529616670127 milliseconds
Total Time:         734.2 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       224.4 seconds, 30.6%
Fitness Testing:    406.5 seconds, 55.4%
Report:             103.2 seconds, 14.1%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 165
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 166
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 166
;;******************************
;; -*- Number IO problem report - generation 166
Test total error for best: 25572.879599999993
Test mean error for best: 12.78644
;;------------------------------
Outputs of best individual on training cases:
Correct output: -74.6179542037 | Program output: -50.6222543847
Correct output: 78.7609586813  | Program output: 51.7609586813 
Correct output: 3.0100598709   | Program output: 13.0057596899 
Correct output: -99.2368061293 | Program output: -68.2368061293
Correct output: 88.6808415603  | Program output: 69.6808415603 
Correct output: -151.1060419578 | Program output: -144.1103421388
Correct output: 56.004616184   | Program output: 29.000316003  
Correct output: 33.520660154   | Program output: 38.520660154  
Correct output: 42.238861085   | Program output: 16.2345609041 
Correct output: -49.0227893765 | Program output: -35.0227893765
Correct output: 103.4057483059 | Program output: 103.4057483059
Correct output: -106.1378273779 | Program output: -115.1421275589
Correct output: 37.9625599991  | Program output: 67.9625599991 
Correct output: 71.9208193203  | Program output: 74.9208193203 
Correct output: 173.5348464317 | Program output: 145.5348464317
Correct output: -77.0615185935 | Program output: -76.0658187744
Correct output: -20.7643622555 | Program output: -20.7643622555
Correct output: 1.9827630815   | Program output: -31.0172369185
Correct output: -39.1198682611 | Program output: -7.124168442  
Correct output: 1.1392376036   | Program output: 11.1392376036 
Correct output: 129.1930977679 | Program output: 103.1930977679
Correct output: 26.7496211861  | Program output: 57.7496211861 
Correct output: -11.2984801384 | Program output: -11.2984801384
Correct output: -136.1442960385 | Program output: -138.1485962195
Correct output: 143.0911996605 | Program output: 142.0911996605
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_mod} {:instruction integer_dup_times} {:instruction integer_max} {:instruction integer_max} {:instruction float_inc} {:instruction float_max} {:instruction in2} {:instruction float_pop} {:instruction integer_mod} {:instruction integer_swap} {:instruction float_pop} {:instruction integer_max} {:instruction integer_flush} {:instruction in1} {:instruction in1} {:instruction float_stackdepth} {:instruction in2} {:instruction integer_add} {:instruction integer_add} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_add} {:instruction float_inc} {:instruction integer_max} {:instruction float_inc} {:instruction integer_add} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_add} {:instruction float_inc} {:instruction integer_add} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_add} {:instruction float_inc} {:instruction float_inc} {:instruction integer_sub} {:instruction float_inc} {:instruction float_inc} {:instruction integer_add} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_add} {:instruction integer_min} {:instruction float_inc} {:instruction integer_sub} {:instruction float_inc} {:instruction float_inc} {:instruction integer_add} {:instruction float_inc} {:instruction float_inc} {:instruction integer_add} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_dup_times} {:instruction integer_add} {:instruction float_inc} {:instruction float_dec} {:instruction integer_max} {:instruction integer_swap} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_dup_times} {:instruction float_rot} {:instruction float_stackdepth} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_min} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_add} {:instruction float_inc} {:instruction float_inc} {:instruction integer_max} {:instruction integer_swap} {:instruction float_dup} {:instruction integer_dup_times} {:instruction 25} {:instruction float_stackdepth} {:instruction float_inc} {:instruction float_dup_times} {:instruction float_yank} {:instruction float_inc} {:instruction integer_add} {:instruction integer_yankdup} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_add} {:instruction integer_yankdup} {:instruction float_inc} {:instruction integer_max} {:instruction float_dup_times} {:instruction float_max} {:instruction float_dup_times} {:instruction float_stackdepth} {:instruction float_inc} {:instruction float_inc} {:instruction float_dup_times} {:instruction float_yank} {:instruction float_rot} {:instruction 25} {:instruction in2} {:instruction integer_add} {:instruction integer_yank} {:instruction float_dup_times} {:instruction float_dec} {:instruction in1} {:instruction 78.00430018095415} {:instruction float_rot} {:instruction float_dup_times} {:instruction float_rot} {:instruction integer_yankdup} {:instruction integer_add} {:instruction float_dec} {:instruction float_inc} {:instruction float_sub} {:instruction float_rot} {:instruction integer_shove} {:instruction float_rot} {:instruction float_sub} {:instruction float_rot} {:instruction integer_sub} {:instruction float_inc} {:instruction integer_swap} {:instruction integer_min} {:instruction print_float} {:instruction integer_pop})
Best program: (float_mod integer_dup_times integer_max integer_max float_inc float_max in2 float_pop integer_mod integer_swap float_pop integer_max integer_flush in1 in1 float_stackdepth in2 integer_add integer_add float_inc float_inc float_inc float_inc integer_add float_inc integer_max float_inc integer_add float_inc float_inc float_inc float_inc float_inc float_inc integer_add float_inc integer_add float_inc float_inc float_inc float_inc integer_add float_inc float_inc integer_sub float_inc float_inc integer_add float_inc float_inc float_inc float_inc float_inc integer_add integer_min float_inc integer_sub float_inc float_inc integer_add float_inc float_inc integer_add float_inc float_inc float_inc integer_dup_times integer_add float_inc float_dec integer_max integer_swap float_inc float_inc float_inc float_dup_times float_rot float_stackdepth float_inc float_inc float_inc integer_min float_inc float_inc float_inc float_inc float_inc integer_add float_inc float_inc integer_max integer_swap float_dup integer_dup_times 25 float_stackdepth float_inc float_dup_times float_yank float_inc integer_add integer_yankdup float_inc float_inc float_inc float_inc integer_add integer_yankdup float_inc integer_max float_dup_times float_max float_dup_times float_stackdepth float_inc float_inc float_dup_times float_yank float_rot 25 in2 integer_add integer_yank float_dup_times float_dec in1 78.00430018095415 float_rot float_dup_times float_rot integer_yankdup integer_add float_dec float_inc float_sub float_rot integer_shove float_rot float_sub float_rot integer_sub float_inc integer_swap integer_min print_float integer_pop)
Errors: [23.9957 8 27.0 2 9.9957 7 31.0 2 19.0 2 6.9957 9 27.0043 7 5.0 1 26.0043 8 14.0 2 0.0 0 9.0043 8 30.0 1 3.0 1 28.0 2 0.9957 7 0.0 0 33.0 9 31.9957 9 10.0 1 26.0 2 31.0 2 0.0 0 2.0043 6 1.0 1]
Total: 492.9957
Mean: 9.859914
Genome size: 146
Size: 147
Percent parens: 0.007
--- Population Statistics ---
Average total errors in population: 2644.349199
Median total errors in population: 928.31135
Error averages by case: (116.63938499999986 9.909 101.80597290000004 3.83 99.11963469999985 6.698 114.28193769999997 3.312 99.00350330000005 3.467 118.1532496999998 7.675 101.56845790000025 6.026 79.86738170000004 3.76 98.1292213000002 6.714 97.58936070000013 3.69 87.35041810000008 2.404 110.02924010000008 7.042 98.88561699999998 3.47 84.3606407 2.694 117.3799651999999 3.642 100.63596630000005 7.477 80.96046170000002 4.571 112.57607800000008 10.079 121.06668379999985 10.851 75.93994879999998 2.645 111.62845630000008 3.856 94.53839230000004 3.413 86.76528040000005 3.113 112.66271800000021 6.205 93.73722739999997 3.131)
Error minima by case: (0.618 7 0.2433 1 0.0043 1 7.2368 1 3.6099 1 0.0043 1 0.0043 1 0.0 0 0.0043 1 0.0 0 0.0 0 0.0043 1 1.0 1 0.0 0 6.4652 1 0.0043 1 0.0 0 0.0172 7 5.7603 8 0.7281 1 13.0 1 0.0 0 0.0 0 0.0043 1 0.0 0)
Average genome size in population (length): 138.348
Average program size in population (points): 139.348
Average percent parens in population: 0.007
Minimum age in population: 224.3559760707251
Maximum age in population: 228.7322028148584
Average age in population: 226.4314849202549
Median age in population: 226.4641632364792
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 8
Genome diversity (% unique Plush genomes):	 0.948
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 8
Syntactic diversity (% unique Push programs):	 0.948
Total error diversity:				 0.589
Error (vector) diversity:			 0.726
Behavioral diversity:				 0.727
--- Run Statistics ---
Number of program evaluations used so far: 167000
Number of point (instruction) evaluations so far: 438788801
--- Timings ---
Current time: 1529616675511 milliseconds
Total Time:         739.7 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       225.8 seconds, 30.5%
Fitness Testing:    409.7 seconds, 55.4%
Report:             104.0 seconds, 14.1%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 166
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 167
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 167
;;******************************
;; -*- Number IO problem report - generation 167
Test total error for best: 25572.879599999993
Test mean error for best: 12.78644
;;------------------------------
Outputs of best individual on training cases:
Correct output: -74.6179542037 | Program output: -50.6222543847
Correct output: 78.7609586813  | Program output: 51.7609586813 
Correct output: 3.0100598709   | Program output: 13.0057596899 
Correct output: -99.2368061293 | Program output: -68.2368061293
Correct output: 88.6808415603  | Program output: 69.6808415603 
Correct output: -151.1060419578 | Program output: -144.1103421388
Correct output: 56.004616184   | Program output: 29.000316003  
Correct output: 33.520660154   | Program output: 38.520660154  
Correct output: 42.238861085   | Program output: 16.2345609041 
Correct output: -49.0227893765 | Program output: -35.0227893765
Correct output: 103.4057483059 | Program output: 103.4057483059
Correct output: -106.1378273779 | Program output: -115.1421275589
Correct output: 37.9625599991  | Program output: 67.9625599991 
Correct output: 71.9208193203  | Program output: 74.9208193203 
Correct output: 173.5348464317 | Program output: 145.5348464317
Correct output: -77.0615185935 | Program output: -76.0658187744
Correct output: -20.7643622555 | Program output: -20.7643622555
Correct output: 1.9827630815   | Program output: -31.0172369185
Correct output: -39.1198682611 | Program output: -7.124168442  
Correct output: 1.1392376036   | Program output: 11.1392376036 
Correct output: 129.1930977679 | Program output: 103.1930977679
Correct output: 26.7496211861  | Program output: 57.7496211861 
Correct output: -11.2984801384 | Program output: -11.2984801384
Correct output: -136.1442960385 | Program output: -138.1485962195
Correct output: 143.0911996605 | Program output: 142.0911996605
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_mod} {:instruction float_pop} {:instruction integer_max} {:instruction float_sub} {:instruction integer_max} {:instruction in2} {:instruction float_pop} {:instruction integer_mod} {:instruction float_flush} {:instruction float_pop} {:instruction integer_max} {:instruction integer_flush} {:instruction in1} {:instruction in1} {:instruction float_stackdepth} {:instruction in2} {:instruction integer_add} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_max} {:instruction float_inc} {:instruction integer_add} {:instruction float_inc} {:instruction integer_add} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_add} {:instruction float_inc} {:instruction integer_add} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_add} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_add} {:instruction integer_min} {:instruction float_inc} {:instruction integer_sub} {:instruction float_inc} {:instruction float_inc} {:instruction integer_add} {:instruction float_inc} {:instruction float_inc} {:instruction integer_add} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_dup_times} {:instruction integer_add} {:instruction float_inc} {:instruction float_inc} {:instruction integer_yankdup} {:instruction integer_swap} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_dup_times} {:instruction float_rot} {:instruction float_stackdepth} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_min} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_add} {:instruction float_inc} {:instruction float_inc} {:instruction integer_max} {:instruction integer_swap} {:instruction float_dup} {:instruction integer_dup_times} {:instruction 25} {:instruction float_stackdepth} {:instruction float_inc} {:instruction float_dup_times} {:instruction float_yank} {:instruction float_inc} {:instruction integer_add} {:instruction integer_yankdup} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_add} {:instruction integer_yankdup} {:instruction float_inc} {:instruction integer_max} {:instruction float_dup_times} {:instruction float_max} {:instruction float_dup_times} {:instruction float_stackdepth} {:instruction float_inc} {:instruction float_inc} {:instruction float_dup_times} {:instruction float_yank} {:instruction float_rot} {:instruction 25} {:instruction in2} {:instruction integer_add} {:instruction integer_yank} {:instruction float_dup_times} {:instruction float_dec} {:instruction in1} {:instruction 78.00430018095415} {:instruction float_rot} {:instruction float_dup_times} {:instruction float_rot} {:instruction integer_yankdup} {:instruction integer_add} {:instruction float_dec} {:instruction float_inc} {:instruction float_sub} {:instruction float_rot} {:instruction integer_shove} {:instruction float_rot} {:instruction float_sub} {:instruction float_rot} {:instruction integer_sub} {:instruction float_inc} {:instruction integer_swap} {:instruction integer_min} {:instruction print_float} {:instruction integer_pop} {:instruction float_pop})
Best program: (float_mod float_pop integer_max float_sub integer_max in2 float_pop integer_mod float_flush float_pop integer_max integer_flush in1 in1 float_stackdepth in2 integer_add float_inc float_inc float_inc float_inc float_inc integer_max float_inc integer_add float_inc integer_add float_inc float_inc float_inc float_inc float_inc float_inc integer_add float_inc integer_add float_inc float_inc float_inc float_inc integer_add float_inc float_inc float_inc float_inc float_inc float_inc integer_add integer_min float_inc integer_sub float_inc float_inc integer_add float_inc float_inc integer_add float_inc float_inc float_inc integer_dup_times integer_add float_inc float_inc integer_yankdup integer_swap float_inc float_inc float_inc float_dup_times float_rot float_stackdepth float_inc float_inc float_inc integer_min float_inc float_inc float_inc float_inc float_inc integer_add float_inc float_inc integer_max integer_swap float_dup integer_dup_times 25 float_stackdepth float_inc float_dup_times float_yank float_inc integer_add integer_yankdup float_inc float_inc float_inc float_inc integer_add integer_yankdup float_inc integer_max float_dup_times float_max float_dup_times float_stackdepth float_inc float_inc float_dup_times float_yank float_rot 25 in2 integer_add integer_yank float_dup_times float_dec in1 78.00430018095415 float_rot float_dup_times float_rot integer_yankdup integer_add float_dec float_inc float_sub float_rot integer_shove float_rot float_sub float_rot integer_sub float_inc integer_swap integer_min print_float integer_pop float_pop)
Errors: [23.9957 8 27.0 2 9.9957 7 31.0 2 19.0 2 6.9957 9 27.0043 7 5.0 1 26.0043 8 14.0 2 0.0 0 9.0043 8 30.0 1 3.0 1 28.0 2 0.9957 7 0.0 0 33.0 9 31.9957 9 10.0 1 26.0 2 31.0 2 0.0 0 2.0043 6 1.0 1]
Total: 492.9957
Mean: 9.859914
Genome size: 141
Size: 142
Percent parens: 0.007
--- Population Statistics ---
Average total errors in population: 2599.7714382
Median total errors in population: 985.5908
Error averages by case: (121.07339509999987 9.911 97.39722540000004 4.05 105.15627839999983 6.813 106.05895199999993 3.45 92.81649710000003 3.701 120.21861279999982 7.873 103.43247460000023 6.157 77.23942010000007 3.99 104.18015690000021 6.88 91.30535550000003 3.843 81.90944570000009 2.621 111.96070370000004 7.335 91.22818950000007 3.638 79.7087021 2.828 111.26203749999992 3.89 104.72034290000002 7.709 78.83570060000001 4.535 105.88339210000008 9.996 125.17114839999992 10.806 78.6929352 2.76 104.34454170000006 4.06 89.94224060000008 3.64 81.60356899999998 3.37 114.73761880000023 6.391 87.2775025 3.368)
Error minima by case: (0.652 7 0.239 1 0.0043 1 5.2368 1 3.1717 1 0.0043 1 3.0E-4 1 0.0 0 0.0043 1 0.0 0 0.0 0 0.0043 1 0.0 0 0.0 0 3.0 1 0.0043 1 0.0 0 0.0517 1 5.7603 8 0.0 0 1.0 1 0.0 0 0.0 0 0.0043 1 0.0 0)
Average genome size in population (length): 138.994
Average program size in population (points): 139.994
Average percent parens in population: 0.007
Minimum age in population: 225.3559760707251
Maximum age in population: 229.6566365834202
Average age in population: 227.7686944722022
Median age in population: 227.8117719447178
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 9
Genome diversity (% unique Plush genomes):	 0.955
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 9
Syntactic diversity (% unique Push programs):	 0.955
Total error diversity:				 0.605
Error (vector) diversity:			 0.736
Behavioral diversity:				 0.736
--- Run Statistics ---
Number of program evaluations used so far: 168000
Number of point (instruction) evaluations so far: 442263651
--- Timings ---
Current time: 1529616680808 milliseconds
Total Time:         745.0 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       227.2 seconds, 30.5%
Fitness Testing:    412.8 seconds, 55.4%
Report:             104.8 seconds, 14.1%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 167
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 168
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 168
;;******************************
;; -*- Number IO problem report - generation 168
Test total error for best: 25493.879599999993
Test mean error for best: 12.74694
;;------------------------------
Outputs of best individual on training cases:
Correct output: -74.6179542037 | Program output: -50.6222543847
Correct output: 78.7609586813  | Program output: 52.7609586813 
Correct output: 3.0100598709   | Program output: 13.0057596899 
Correct output: -99.2368061293 | Program output: -69.2368061293
Correct output: 88.6808415603  | Program output: 70.6808415603 
Correct output: -151.1060419578 | Program output: -144.1103421388
Correct output: 56.004616184   | Program output: 29.000316003  
Correct output: 33.520660154   | Program output: 39.520660154  
Correct output: 42.238861085   | Program output: 16.2345609041 
Correct output: -49.0227893765 | Program output: -34.0227893765
Correct output: 103.4057483059 | Program output: 103.4057483059
Correct output: -106.1378273779 | Program output: -115.1421275589
Correct output: 37.9625599991  | Program output: 68.9625599991 
Correct output: 71.9208193203  | Program output: 74.9208193203 
Correct output: 173.5348464317 | Program output: 146.5348464317
Correct output: -77.0615185935 | Program output: -76.0658187744
Correct output: -20.7643622555 | Program output: -20.7643622555
Correct output: 1.9827630815   | Program output: -30.0172369185
Correct output: -39.1198682611 | Program output: -7.124168442  
Correct output: 1.1392376036   | Program output: 11.1392376036 
Correct output: 129.1930977679 | Program output: 104.1930977679
Correct output: 26.7496211861  | Program output: 58.7496211861 
Correct output: -11.2984801384 | Program output: -10.2984801384
Correct output: -136.1442960385 | Program output: -138.1485962195
Correct output: 143.0911996605 | Program output: 143.0911996605
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_mod} {:instruction integer_dup_times} {:instruction integer_max} {:instruction integer_max} {:instruction float_inc} {:instruction float_max} {:instruction in2} {:instruction float_pop} {:instruction integer_mod} {:instruction float_flush} {:instruction float_pop} {:instruction integer_max} {:instruction integer_flush} {:instruction in1} {:instruction in1} {:instruction float_stackdepth} {:instruction in2} {:instruction integer_add} {:instruction integer_add} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_add} {:instruction float_inc} {:instruction integer_max} {:instruction float_inc} {:instruction integer_add} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_add} {:instruction float_inc} {:instruction integer_add} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_add} {:instruction float_inc} {:instruction float_inc} {:instruction integer_sub} {:instruction float_inc} {:instruction float_inc} {:instruction integer_add} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_add} {:instruction integer_min} {:instruction float_inc} {:instruction integer_sub} {:instruction float_inc} {:instruction float_inc} {:instruction integer_add} {:instruction float_inc} {:instruction float_inc} {:instruction integer_add} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_dup_times} {:instruction integer_add} {:instruction float_inc} {:instruction float_inc} {:instruction integer_max} {:instruction integer_swap} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_dup_times} {:instruction float_rot} {:instruction float_stackdepth} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_min} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_add} {:instruction float_inc} {:instruction float_inc} {:instruction integer_max} {:instruction integer_swap} {:instruction float_dup} {:instruction integer_dup_times} {:instruction 25} {:instruction float_stackdepth} {:instruction tagged_534} {:instruction float_dup_times} {:instruction float_yank} {:instruction float_inc} {:instruction integer_add} {:instruction integer_yankdup} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_add} {:instruction integer_yankdup} {:instruction float_inc} {:instruction integer_max} {:instruction float_dup_times} {:instruction float_max} {:instruction float_dup_times} {:instruction float_stackdepth} {:instruction float_inc} {:instruction float_inc} {:instruction float_dup_times} {:instruction float_yank} {:instruction float_rot} {:instruction 25} {:instruction in2} {:instruction integer_add} {:instruction integer_yank} {:instruction float_dup_times} {:instruction float_dec} {:instruction in1} {:instruction 78.00430018095415} {:instruction float_rot} {:instruction float_dup_times} {:instruction float_rot} {:instruction integer_yankdup} {:instruction integer_add} {:instruction float_dec} {:instruction float_inc} {:instruction float_sub} {:instruction float_rot} {:instruction integer_shove} {:instruction float_rot} {:instruction float_sub} {:instruction float_rot} {:instruction integer_sub} {:instruction float_inc} {:instruction integer_swap} {:instruction integer_min} {:instruction print_float} {:instruction integer_pop} {:instruction float_pop})
Best program: (float_mod integer_dup_times integer_max integer_max float_inc float_max in2 float_pop integer_mod float_flush float_pop integer_max integer_flush in1 in1 float_stackdepth in2 integer_add integer_add float_inc float_inc float_inc float_inc integer_add float_inc integer_max float_inc integer_add float_inc float_inc float_inc float_inc float_inc float_inc integer_add float_inc integer_add float_inc float_inc float_inc float_inc integer_add float_inc float_inc integer_sub float_inc float_inc integer_add float_inc float_inc float_inc float_inc float_inc integer_add integer_min float_inc integer_sub float_inc float_inc integer_add float_inc float_inc integer_add float_inc float_inc float_inc integer_dup_times integer_add float_inc float_inc integer_max integer_swap float_inc float_inc float_inc float_dup_times float_rot float_stackdepth float_inc float_inc float_inc integer_min float_inc float_inc float_inc float_inc float_inc integer_add float_inc float_inc integer_max integer_swap float_dup integer_dup_times 25 float_stackdepth tagged_534 float_dup_times float_yank float_inc integer_add integer_yankdup float_inc float_inc float_inc float_inc integer_add integer_yankdup float_inc integer_max float_dup_times float_max float_dup_times float_stackdepth float_inc float_inc float_dup_times float_yank float_rot 25 in2 integer_add integer_yank float_dup_times float_dec in1 78.00430018095415 float_rot float_dup_times float_rot integer_yankdup integer_add float_dec float_inc float_sub float_rot integer_shove float_rot float_sub float_rot integer_sub float_inc integer_swap integer_min print_float integer_pop float_pop)
Errors: [23.9957 8 26.0 2 9.9957 7 30.0 1 18.0 2 6.9957 9 27.0043 7 6.0 1 26.0043 8 15.0 2 0.0 0 9.0043 8 31.0 2 3.0 1 27.0 2 0.9957 7 0.0 0 32.0 10 31.9957 9 10.0 1 25.0 2 32.0 2 1.0 1 2.0043 6 0.0 0]
Total: 491.9957
Mean: 9.839914
Genome size: 147
Size: 148
Percent parens: 0.007
--- Population Statistics ---
Average total errors in population: 2969.0720035000004
Median total errors in population: 765.5215000000001
Error averages by case: (133.60063739999987 9.812 112.8058339 3.915 117.1637229999998 6.921 127.88156099999999 3.433 107.99124330000005 3.532 130.27599149999983 7.95 118.48994400000026 6.306 93.58032510000008 3.834 117.72798680000022 6.985 109.59487100000015 3.779 100.87509160000006 2.577 123.76252250000012 7.355 108.50182380000007 3.554 98.69021910000001 2.798 126.64002679999987 3.741 115.18926329999995 7.68 95.87146589999999 4.526 123.40585680000008 10.043 139.25571499999984 10.715 84.15156199999998 2.724 120.6643074000001 3.899 104.09994670000005 3.483 98.03728290000006 3.245 125.12988980000023 6.389 103.29291289999988 3.196)
Error minima by case: (4.9957 7 0.2433 1 0.0043 1 18.2368 1 1.3192 1 0.0043 1 0.9957 1 0.0 0 0.0043 1 0.0 0 0.0 0 0.0043 2 0.9557 1 0.0 0 12.0 1 0.0043 1 0.0 0 0.1076 7 0.4497 8 0.2719 1 10.0 1 0.0 0 0.0 0 0.0043 1 0.0 0)
Average genome size in population (length): 139.524
Average program size in population (points): 140.524
Average percent parens in population: 0.007
Minimum age in population: 227.1532251937545
Maximum age in population: 231.2135370537716
Average age in population: 229.0665366102451
Median age in population: 229.0886524784256
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 12
Genome diversity (% unique Plush genomes):	 0.941
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 12
Syntactic diversity (% unique Push programs):	 0.941
Total error diversity:				 0.57
Error (vector) diversity:			 0.703
Behavioral diversity:				 0.703
--- Run Statistics ---
Number of program evaluations used so far: 169000
Number of point (instruction) evaluations so far: 445751751
--- Timings ---
Current time: 1529616686123 milliseconds
Total Time:         750.3 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       228.6 seconds, 30.5%
Fitness Testing:    416.0 seconds, 55.4%
Report:             105.6 seconds, 14.1%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 168
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 169
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 169
;;******************************
;; -*- Number IO problem report - generation 169
Test total error for best: 25444.9312
Test mean error for best: 12.72247
;;------------------------------
Outputs of best individual on training cases:
Correct output: -74.6179542037 | Program output: -51.6222543847
Correct output: 78.7609586813  | Program output: 51.7609586813 
Correct output: 3.0100598709   | Program output: 12.0057596899 
Correct output: -99.2368061293 | Program output: -70.2368061293
Correct output: 88.6808415603  | Program output: 69.6808415603 
Correct output: -151.1060419578 | Program output: -145.1103421388
Correct output: 56.004616184   | Program output: 28.000316003  
Correct output: 33.520660154   | Program output: 38.520660154  
Correct output: 42.238861085   | Program output: 15.2345609041 
Correct output: -49.0227893765 | Program output: -35.0227893765
Correct output: 103.4057483059 | Program output: 103.4057483059
Correct output: -106.1378273779 | Program output: -116.1421275589
Correct output: 37.9625599991  | Program output: 67.9625599991 
Correct output: 71.9208193203  | Program output: 74.9208193203 
Correct output: 173.5348464317 | Program output: 145.5348464317
Correct output: -77.0615185935 | Program output: -77.0658187744
Correct output: -20.7643622555 | Program output: -20.7643622555
Correct output: 1.9827630815   | Program output: -31.0172369185
Correct output: -39.1198682611 | Program output: -8.124168442  
Correct output: 1.1392376036   | Program output: 11.1392376036 
Correct output: 129.1930977679 | Program output: 103.1930977679
Correct output: 26.7496211861  | Program output: 57.7496211861 
Correct output: -11.2984801384 | Program output: -11.2984801384
Correct output: -136.1442960385 | Program output: -139.1485962195
Correct output: 143.0911996605 | Program output: 142.0911996605
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_mod} {:instruction integer_dup_times} {:instruction integer_max} {:instruction integer_max} {:instruction float_inc} {:instruction float_max} {:instruction in2} {:instruction float_pop} {:instruction integer_mod} {:instruction float_flush} {:instruction float_pop} {:instruction integer_max} {:instruction integer_flush} {:instruction in1} {:instruction in1} {:instruction float_stackdepth} {:instruction in2} {:instruction integer_add} {:instruction integer_add} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_add} {:instruction float_inc} {:instruction integer_max} {:instruction float_inc} {:instruction integer_add} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_add} {:instruction float_inc} {:instruction integer_add} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_add} {:instruction float_inc} {:instruction float_inc} {:instruction integer_sub} {:instruction float_inc} {:instruction float_inc} {:instruction integer_add} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_add} {:instruction integer_min} {:instruction float_inc} {:instruction integer_sub} {:instruction float_inc} {:instruction float_inc} {:instruction integer_add} {:instruction float_inc} {:instruction float_inc} {:instruction integer_add} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_dup_times} {:instruction integer_add} {:instruction float_inc} {:instruction float_inc} {:instruction integer_max} {:instruction integer_swap} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_dup_times} {:instruction float_rot} {:instruction float_stackdepth} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_min} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_dup_times} {:instruction float_inc} {:instruction integer_add} {:instruction float_inc} {:instruction float_inc} {:instruction integer_max} {:instruction integer_swap} {:instruction float_dup} {:instruction integer_dup_times} {:instruction 25} {:instruction float_stackdepth} {:instruction tagged_534} {:instruction float_dup_times} {:instruction float_yank} {:instruction float_inc} {:instruction integer_add} {:instruction integer_yankdup} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_add} {:instruction integer_yankdup} {:instruction float_inc} {:instruction integer_max} {:instruction float_dup_times} {:instruction float_max} {:instruction float_dup_times} {:instruction float_stackdepth} {:instruction float_inc} {:instruction float_inc} {:instruction float_dup_times} {:instruction float_yank} {:instruction float_rot} {:instruction 25} {:instruction in2} {:instruction integer_add} {:instruction integer_yank} {:instruction float_dup_times} {:instruction float_dec} {:instruction in1} {:instruction 78.00430018095415} {:instruction float_rot} {:instruction float_dup_times} {:instruction float_rot} {:instruction integer_yankdup} {:instruction integer_add} {:instruction float_dec} {:instruction float_inc} {:instruction float_sub} {:instruction float_rot} {:instruction integer_shove} {:instruction float_rot} {:instruction float_sub} {:instruction float_rot} {:instruction integer_sub} {:instruction float_inc} {:instruction integer_swap} {:instruction integer_min} {:instruction print_float} {:instruction integer_pop} {:instruction float_pop})
Best program: (float_mod integer_dup_times integer_max integer_max float_inc float_max in2 float_pop integer_mod float_flush float_pop integer_max integer_flush in1 in1 float_stackdepth in2 integer_add integer_add float_inc float_inc float_inc float_inc integer_add float_inc integer_max float_inc integer_add float_inc float_inc float_inc float_inc float_inc float_inc integer_add float_inc integer_add float_inc float_inc float_inc float_inc integer_add float_inc float_inc integer_sub float_inc float_inc integer_add float_inc float_inc float_inc float_inc float_inc integer_add integer_min float_inc integer_sub float_inc float_inc integer_add float_inc float_inc integer_add float_inc float_inc float_inc integer_dup_times integer_add float_inc float_inc integer_max integer_swap float_inc float_inc float_inc float_dup_times float_rot float_stackdepth float_inc float_inc float_inc integer_min float_inc float_inc float_inc integer_dup_times float_inc integer_add float_inc float_inc integer_max integer_swap float_dup integer_dup_times 25 float_stackdepth tagged_534 float_dup_times float_yank float_inc integer_add integer_yankdup float_inc float_inc float_inc float_inc integer_add integer_yankdup float_inc integer_max float_dup_times float_max float_dup_times float_stackdepth float_inc float_inc float_dup_times float_yank float_rot 25 in2 integer_add integer_yank float_dup_times float_dec in1 78.00430018095415 float_rot float_dup_times float_rot integer_yankdup integer_add float_dec float_inc float_sub float_rot integer_shove float_rot float_sub float_rot integer_sub float_inc integer_swap integer_min print_float integer_pop float_pop)
Errors: [22.9957 8 27.0 2 8.9957 8 29.0 2 19.0 2 5.9957 9 28.0043 7 5.0 1 27.0043 8 14.0 2 0.0 0 10.0043 7 30.0 1 3.0 1 28.0 2 0.0043 6 0.0 0 33.0 9 30.9957 9 10.0 1 26.0 2 31.0 2 0.0 0 3.0043 6 1.0 1]
Total: 489.0043
Mean: 9.780086
Genome size: 147
Size: 148
Percent parens: 0.007
--- Population Statistics ---
Average total errors in population: 2785.7691729000007
Median total errors in population: 979.68615
Error averages by case: (129.26652039999988 9.91 101.5304322 4.141 114.0230490999998 6.793 114.12892099999995 3.602 98.12046720000002 3.734 127.47187379999986 7.885 113.81716420000024 6.229 81.17572100000011 4.051 113.11094460000025 6.933 100.24626710000008 3.922 90.89538430000007 2.654 119.27870380000009 7.445 97.01317010000007 3.727 87.6658434 2.83 120.28802469999988 3.988 112.23549649999983 7.712 83.7512765 4.511 115.29704570000004 10.044 133.98571379999987 10.826 81.48840339999995 2.87 112.67600950000005 4.135 94.20813200000003 3.717 90.25101910000001 3.429 121.6010422000002 6.387 97.30854729999999 3.459)
Error minima by case: (2.0704 7 0.2433 1 0.9899 1 6.2368 1 0.6711 1 0.0043 2 3.0E-4 1 0.0 0 0.9957 1 0.0 0 0.0 0 0.0043 1 0.0 0 0.0 0 13.0 1 0.0043 1 0.0 0 0.0172 7 0.0043 7 0.0 0 2.8337 1 0.0 0 0.0 0 0.0043 1 0.0 0)
Average genome size in population (length): 141.049
Average program size in population (points): 142.049
Average percent parens in population: 0.007
Minimum age in population: 228.468575940589
Maximum age in population: 232.1326373070962
Average age in population: 230.3720234736347
Median age in population: 230.3914617787738
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 13
Genome diversity (% unique Plush genomes):	 0.953
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 13
Syntactic diversity (% unique Push programs):	 0.953
Total error diversity:				 0.597
Error (vector) diversity:			 0.713
Behavioral diversity:				 0.713
--- Run Statistics ---
Number of program evaluations used so far: 170000
Number of point (instruction) evaluations so far: 449278026
--- Timings ---
Current time: 1529616691518 milliseconds
Total Time:         755.7 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       230.0 seconds, 30.4%
Fitness Testing:    419.2 seconds, 55.5%
Report:             106.4 seconds, 14.1%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 169
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 170
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 170
;;******************************
;; -*- Number IO problem report - generation 170
Test total error for best: 25444.9312
Test mean error for best: 12.72247
;;------------------------------
Outputs of best individual on training cases:
Correct output: -74.6179542037 | Program output: -51.6222543847
Correct output: 78.7609586813  | Program output: 51.7609586813 
Correct output: 3.0100598709   | Program output: 12.0057596899 
Correct output: -99.2368061293 | Program output: -70.2368061293
Correct output: 88.6808415603  | Program output: 69.6808415603 
Correct output: -151.1060419578 | Program output: -145.1103421388
Correct output: 56.004616184   | Program output: 28.000316003  
Correct output: 33.520660154   | Program output: 38.520660154  
Correct output: 42.238861085   | Program output: 15.2345609041 
Correct output: -49.0227893765 | Program output: -35.0227893765
Correct output: 103.4057483059 | Program output: 103.4057483059
Correct output: -106.1378273779 | Program output: -116.1421275589
Correct output: 37.9625599991  | Program output: 67.9625599991 
Correct output: 71.9208193203  | Program output: 74.9208193203 
Correct output: 173.5348464317 | Program output: 145.5348464317
Correct output: -77.0615185935 | Program output: -77.0658187744
Correct output: -20.7643622555 | Program output: -20.7643622555
Correct output: 1.9827630815   | Program output: -31.0172369185
Correct output: -39.1198682611 | Program output: -8.124168442  
Correct output: 1.1392376036   | Program output: 11.1392376036 
Correct output: 129.1930977679 | Program output: 103.1930977679
Correct output: 26.7496211861  | Program output: 57.7496211861 
Correct output: -11.2984801384 | Program output: -11.2984801384
Correct output: -136.1442960385 | Program output: -139.1485962195
Correct output: 143.0911996605 | Program output: 142.0911996605
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_mod} {:instruction integer_dup_times} {:instruction integer_max} {:instruction integer_max} {:instruction float_inc} {:instruction float_max} {:instruction in2} {:instruction float_pop} {:instruction integer_mod} {:instruction float_mod} {:instruction integer_dup_times} {:instruction integer_max} {:instruction integer_max} {:instruction float_inc} {:instruction float_max} {:instruction in2} {:instruction float_pop} {:instruction integer_mod} {:instruction float_flush} {:instruction float_pop} {:instruction integer_max} {:instruction integer_flush} {:instruction in1} {:instruction in1} {:instruction float_stackdepth} {:instruction in2} {:instruction integer_add} {:instruction integer_add} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_add} {:instruction float_inc} {:instruction integer_max} {:instruction float_inc} {:instruction integer_add} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_add} {:instruction float_inc} {:instruction integer_add} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_add} {:instruction float_inc} {:instruction float_inc} {:instruction integer_sub} {:instruction float_inc} {:instruction float_inc} {:instruction integer_add} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_add} {:instruction integer_min} {:instruction float_inc} {:instruction integer_sub} {:instruction float_inc} {:instruction float_inc} {:instruction integer_add} {:instruction float_inc} {:instruction float_inc} {:instruction integer_add} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_dup_times} {:instruction integer_add} {:instruction float_inc} {:instruction float_inc} {:instruction integer_max} {:instruction integer_swap} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_dup_times} {:instruction float_rot} {:instruction float_stackdepth} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_min} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_dup_times} {:instruction float_inc} {:instruction integer_add} {:instruction float_inc} {:instruction float_inc} {:instruction integer_max} {:instruction integer_swap} {:instruction float_dup} {:instruction integer_dup_times} {:instruction 25} {:instruction float_stackdepth} {:instruction tagged_534} {:instruction float_dup_times} {:instruction float_yank} {:instruction float_inc} {:instruction integer_add} {:instruction integer_yankdup} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_add} {:instruction integer_yankdup} {:instruction float_inc} {:instruction integer_max} {:instruction float_dup_times} {:instruction float_max} {:instruction float_dup_times} {:instruction float_stackdepth} {:instruction float_inc} {:instruction float_inc} {:instruction float_dup_times} {:instruction float_yank} {:instruction float_rot} {:instruction 25} {:instruction in2} {:instruction integer_add} {:instruction integer_yank} {:instruction float_dup_times} {:instruction float_dec} {:instruction in1} {:instruction 78.00430018095415} {:instruction float_rot} {:instruction float_dup_times} {:instruction float_rot} {:instruction integer_yankdup} {:instruction integer_add} {:instruction float_dec} {:instruction float_inc} {:instruction float_sub} {:instruction float_rot} {:instruction integer_shove} {:instruction float_rot} {:instruction float_sub} {:instruction float_rot} {:instruction integer_sub} {:instruction float_inc} {:instruction integer_swap} {:instruction integer_min} {:instruction print_float} {:instruction integer_pop} {:instruction float_pop})
Best program: (float_mod integer_dup_times integer_max integer_max float_inc float_max in2 float_pop integer_mod float_mod integer_dup_times integer_max integer_max float_inc float_max in2 float_pop integer_mod float_flush float_pop integer_max integer_flush in1 in1 float_stackdepth in2 integer_add integer_add float_inc float_inc float_inc float_inc integer_add float_inc integer_max float_inc integer_add float_inc float_inc float_inc float_inc float_inc float_inc integer_add float_inc integer_add float_inc float_inc float_inc float_inc integer_add float_inc float_inc integer_sub float_inc float_inc integer_add float_inc float_inc float_inc float_inc float_inc integer_add integer_min float_inc integer_sub float_inc float_inc integer_add float_inc float_inc integer_add float_inc float_inc float_inc integer_dup_times integer_add float_inc float_inc integer_max integer_swap float_inc float_inc float_inc float_dup_times float_rot float_stackdepth float_inc float_inc float_inc integer_min float_inc float_inc float_inc integer_dup_times float_inc integer_add float_inc float_inc integer_max integer_swap float_dup integer_dup_times 25 float_stackdepth tagged_534 float_dup_times float_yank float_inc integer_add integer_yankdup float_inc float_inc float_inc float_inc integer_add integer_yankdup float_inc integer_max float_dup_times float_max float_dup_times float_stackdepth float_inc float_inc float_dup_times float_yank float_rot 25 in2 integer_add integer_yank float_dup_times float_dec in1 78.00430018095415 float_rot float_dup_times float_rot integer_yankdup integer_add float_dec float_inc float_sub float_rot integer_shove float_rot float_sub float_rot integer_sub float_inc integer_swap integer_min print_float integer_pop float_pop)
Errors: [22.9957 8 27.0 2 8.9957 8 29.0 2 19.0 2 5.9957 9 28.0043 7 5.0 1 27.0043 8 14.0 2 0.0 0 10.0043 7 30.0 1 3.0 1 28.0 2 0.0043 6 0.0 0 33.0 9 30.9957 9 10.0 1 26.0 2 31.0 2 0.0 0 3.0043 6 1.0 1]
Total: 489.0043
Mean: 9.780086
Genome size: 156
Size: 157
Percent parens: 0.006
--- Population Statistics ---
Average total errors in population: 2652.454647
Median total errors in population: 985.0
Error averages by case: (122.47491729999987 9.947 100.54068720000001 4.074 106.2304054999999 6.757 110.44093889999995 3.591 95.79039690000003 3.644 123.64974289999985 7.756 106.82891260000022 6.138 78.6781146 4.216 104.58391210000026 6.901 91.99629090000006 3.886 84.74602250000007 2.768 115.14488930000012 7.329 93.10154440000004 3.659 81.99609330000006 3.061 113.4174780999999 3.877 107.45699049999979 7.555 77.64212700000002 4.805 107.82246900000007 10.06 127.2046555999999 10.839 81.56605079999999 3.034 106.72508820000007 4.082 91.91186049999999 3.636 80.52588040000003 3.396 117.7959766000002 6.276 89.52720189999994 3.369)
Error minima by case: (0.1317 7 0.2433 1 0.0043 1 5.0043 1 4.0 1 0.0043 1 0.9957 1 0.0 0 1.0043 1 0.0 0 0.0 0 0.0043 1 0.5403 1 0.0 0 13.0 1 0.0043 1 0.0 0 0.0025 7 5.7603 8 0.0 0 11.0 1 0.0 0 0.0 0 0.0043 1 0.0 0)
Average genome size in population (length): 142.228
Average program size in population (points): 143.228
Average percent parens in population: 0.007
Minimum age in population: 229.5914666348157
Maximum age in population: 233.5482799223307
Average age in population: 231.6092532530253
Median age in population: 231.6347752650095
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 8
Genome diversity (% unique Plush genomes):	 0.961
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 8
Syntactic diversity (% unique Push programs):	 0.961
Total error diversity:				 0.596
Error (vector) diversity:			 0.725
Behavioral diversity:				 0.725
--- Run Statistics ---
Number of program evaluations used so far: 171000
Number of point (instruction) evaluations so far: 452833751
--- Timings ---
Current time: 1529616696981 milliseconds
Total Time:         761.0 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       231.4 seconds, 30.4%
Fitness Testing:    422.4 seconds, 55.5%
Report:             107.1 seconds, 14.1%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 170
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 171
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 171
;;******************************
;; -*- Number IO problem report - generation 171
Test total error for best: 25444.9312
Test mean error for best: 12.72247
;;------------------------------
Outputs of best individual on training cases:
Correct output: -74.6179542037 | Program output: -51.6222543847
Correct output: 78.7609586813  | Program output: 51.7609586813 
Correct output: 3.0100598709   | Program output: 12.0057596899 
Correct output: -99.2368061293 | Program output: -70.2368061293
Correct output: 88.6808415603  | Program output: 69.6808415603 
Correct output: -151.1060419578 | Program output: -145.1103421388
Correct output: 56.004616184   | Program output: 28.000316003  
Correct output: 33.520660154   | Program output: 38.520660154  
Correct output: 42.238861085   | Program output: 15.2345609041 
Correct output: -49.0227893765 | Program output: -35.0227893765
Correct output: 103.4057483059 | Program output: 103.4057483059
Correct output: -106.1378273779 | Program output: -116.1421275589
Correct output: 37.9625599991  | Program output: 67.9625599991 
Correct output: 71.9208193203  | Program output: 74.9208193203 
Correct output: 173.5348464317 | Program output: 145.5348464317
Correct output: -77.0615185935 | Program output: -77.0658187744
Correct output: -20.7643622555 | Program output: -20.7643622555
Correct output: 1.9827630815   | Program output: -31.0172369185
Correct output: -39.1198682611 | Program output: -8.124168442  
Correct output: 1.1392376036   | Program output: 11.1392376036 
Correct output: 129.1930977679 | Program output: 103.1930977679
Correct output: 26.7496211861  | Program output: 57.7496211861 
Correct output: -11.2984801384 | Program output: -11.2984801384
Correct output: -136.1442960385 | Program output: -139.1485962195
Correct output: 143.0911996605 | Program output: 142.0911996605
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_mod} {:instruction integer_dup_times} {:instruction integer_max} {:instruction integer_max} {:instruction float_inc} {:instruction float_max} {:instruction in2} {:instruction float_pop} {:instruction integer_mod} {:instruction float_flush} {:instruction float_pop} {:instruction integer_max} {:instruction integer_flush} {:instruction in1} {:instruction in1} {:instruction float_stackdepth} {:instruction in2} {:instruction integer_add} {:instruction integer_add} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_add} {:instruction float_inc} {:instruction integer_max} {:instruction float_inc} {:instruction integer_add} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_add} {:instruction float_inc} {:instruction integer_add} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_add} {:instruction float_inc} {:instruction float_inc} {:instruction integer_sub} {:instruction float_inc} {:instruction float_inc} {:instruction integer_add} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_add} {:instruction integer_min} {:instruction float_inc} {:instruction integer_sub} {:instruction float_inc} {:instruction float_inc} {:instruction integer_add} {:instruction float_inc} {:instruction float_inc} {:instruction integer_add} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_dup_times} {:instruction integer_add} {:instruction float_inc} {:instruction float_inc} {:instruction integer_max} {:instruction integer_swap} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_dup_times} {:instruction float_rot} {:instruction float_stackdepth} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_min} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_dup_times} {:instruction float_inc} {:instruction integer_add} {:instruction float_inc} {:instruction float_inc} {:instruction integer_max} {:instruction integer_swap} {:instruction float_dup} {:instruction integer_dup_times} {:instruction 25} {:instruction float_stackdepth} {:instruction tagged_534} {:instruction float_dup_times} {:instruction float_yank} {:instruction float_inc} {:instruction integer_add} {:instruction integer_yankdup} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_add} {:instruction integer_yankdup} {:instruction float_inc} {:instruction integer_max} {:instruction float_dup_times} {:instruction float_max} {:instruction float_dup_times} {:instruction float_stackdepth} {:instruction float_inc} {:instruction float_inc} {:instruction float_dup_times} {:instruction float_yank} {:instruction float_rot} {:instruction 25} {:instruction in2} {:instruction integer_add} {:instruction integer_yank} {:instruction float_dup_times} {:instruction float_dec} {:instruction in1} {:instruction 78.00430018095415} {:instruction float_rot} {:instruction float_dup_times} {:instruction float_rot} {:instruction integer_yankdup} {:instruction integer_add} {:instruction float_dec} {:instruction float_inc} {:instruction float_sub} {:instruction float_rot} {:instruction integer_shove} {:instruction float_rot} {:instruction float_sub} {:instruction float_rot} {:instruction integer_sub} {:instruction float_inc} {:instruction integer_swap} {:instruction integer_min} {:instruction print_float} {:instruction integer_pop} {:instruction float_pop})
Best program: (float_mod integer_dup_times integer_max integer_max float_inc float_max in2 float_pop integer_mod float_flush float_pop integer_max integer_flush in1 in1 float_stackdepth in2 integer_add integer_add float_inc float_inc float_inc float_inc integer_add float_inc integer_max float_inc integer_add float_inc float_inc float_inc float_inc float_inc float_inc integer_add float_inc integer_add float_inc float_inc float_inc float_inc integer_add float_inc float_inc integer_sub float_inc float_inc integer_add float_inc float_inc float_inc float_inc float_inc integer_add integer_min float_inc integer_sub float_inc float_inc integer_add float_inc float_inc integer_add float_inc float_inc float_inc integer_dup_times integer_add float_inc float_inc integer_max integer_swap float_inc float_inc float_inc float_dup_times float_rot float_stackdepth float_inc float_inc float_inc integer_min float_inc float_inc float_inc integer_dup_times float_inc integer_add float_inc float_inc integer_max integer_swap float_dup integer_dup_times 25 float_stackdepth tagged_534 float_dup_times float_yank float_inc integer_add integer_yankdup float_inc float_inc float_inc float_inc integer_add integer_yankdup float_inc integer_max float_dup_times float_max float_dup_times float_stackdepth float_inc float_inc float_dup_times float_yank float_rot 25 in2 integer_add integer_yank float_dup_times float_dec in1 78.00430018095415 float_rot float_dup_times float_rot integer_yankdup integer_add float_dec float_inc float_sub float_rot integer_shove float_rot float_sub float_rot integer_sub float_inc integer_swap integer_min print_float integer_pop float_pop)
Errors: [22.9957 8 27.0 2 8.9957 8 29.0 2 19.0 2 5.9957 9 28.0043 7 5.0 1 27.0043 8 14.0 2 0.0 0 10.0043 7 30.0 1 3.0 1 28.0 2 0.0043 6 0.0 0 33.0 9 30.9957 9 10.0 1 26.0 2 31.0 2 0.0 0 3.0043 6 1.0 1]
Total: 489.0043
Mean: 9.780086
Genome size: 147
Size: 148
Percent parens: 0.007
--- Population Statistics ---
Average total errors in population: 3144.9113382
Median total errors in population: 1030.60105
Error averages by case: (144.18597139999977 10.139 117.40308579999999 4.264 126.77218439999987 6.74 129.70995829999995 3.918 113.53306290000006 3.794 144.97026189999983 7.893 127.52713320000024 6.244 96.9293039 4.209 124.88307930000018 6.897 111.91231750000011 4.042 103.68516640000009 2.899 135.49419630000006 7.485 112.12441190000001 3.79 100.61628590000008 3.217 131.30170529999987 3.987 130.1347281999998 7.593 99.17693460000002 4.945 126.51783310000005 10.101 147.95181449999984 11.007 99.57376830000001 3.022 125.11015850000005 4.186 109.44819580000004 3.782 101.26331820000009 3.518 139.11293320000016 6.513 107.88052939999993 3.508)
Error minima by case: (0.3863 7 0.2433 1 0.0043 1 18.0 1 0.3192 1 0.0043 2 0.0043 1 0.0 0 0.0043 1 0.0 0 0.0 0 0.9957 1 0.0 0 0.0 0 14.0 1 0.0043 1 0.0 0 0.0172 7 11.7603 8 0.0 0 7.609 1 1.0 1 0.0 0 0.0043 2 0.0 0)
Average genome size in population (length): 143.5
Average program size in population (points): 144.5
Average percent parens in population: 0.007
Minimum age in population: 230.925893103154
Maximum age in population: 235.3330971015586
Average age in population: 232.9276490997904
Median age in population: 232.9427066890666
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 6
Genome diversity (% unique Plush genomes):	 0.962
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 6
Syntactic diversity (% unique Push programs):	 0.962
Total error diversity:				 0.59
Error (vector) diversity:			 0.712
Behavioral diversity:				 0.713
--- Run Statistics ---
Number of program evaluations used so far: 172000
Number of point (instruction) evaluations so far: 456421341
--- Timings ---
Current time: 1529616702356 milliseconds
Total Time:         766.5 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       232.8 seconds, 30.4%
Fitness Testing:    425.6 seconds, 55.5%
Report:             108.0 seconds, 14.1%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 171
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 172
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 172
;;******************************
;; -*- Number IO problem report - generation 172
Test total error for best: 25444.9312
Test mean error for best: 12.72247
;;------------------------------
Outputs of best individual on training cases:
Correct output: -74.6179542037 | Program output: -51.6222543847
Correct output: 78.7609586813  | Program output: 51.7609586813 
Correct output: 3.0100598709   | Program output: 12.0057596899 
Correct output: -99.2368061293 | Program output: -70.2368061293
Correct output: 88.6808415603  | Program output: 69.6808415603 
Correct output: -151.1060419578 | Program output: -145.1103421388
Correct output: 56.004616184   | Program output: 28.000316003  
Correct output: 33.520660154   | Program output: 38.520660154  
Correct output: 42.238861085   | Program output: 15.2345609041 
Correct output: -49.0227893765 | Program output: -35.0227893765
Correct output: 103.4057483059 | Program output: 103.4057483059
Correct output: -106.1378273779 | Program output: -116.1421275589
Correct output: 37.9625599991  | Program output: 67.9625599991 
Correct output: 71.9208193203  | Program output: 74.9208193203 
Correct output: 173.5348464317 | Program output: 145.5348464317
Correct output: -77.0615185935 | Program output: -77.0658187744
Correct output: -20.7643622555 | Program output: -20.7643622555
Correct output: 1.9827630815   | Program output: -31.0172369185
Correct output: -39.1198682611 | Program output: -8.124168442  
Correct output: 1.1392376036   | Program output: 11.1392376036 
Correct output: 129.1930977679 | Program output: 103.1930977679
Correct output: 26.7496211861  | Program output: 57.7496211861 
Correct output: -11.2984801384 | Program output: -11.2984801384
Correct output: -136.1442960385 | Program output: -139.1485962195
Correct output: 143.0911996605 | Program output: 142.0911996605
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_mod} {:instruction integer_dup_times} {:instruction integer_max} {:instruction integer_max} {:instruction float_inc} {:instruction integer_max} {:instruction in2} {:instruction float_pop} {:instruction integer_mod} {:instruction integer_mod} {:instruction float_flush} {:instruction float_pop} {:instruction integer_max} {:instruction integer_flush} {:instruction in1} {:instruction in1} {:instruction float_stackdepth} {:instruction in2} {:instruction integer_add} {:instruction integer_add} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_add} {:instruction float_inc} {:instruction integer_max} {:instruction float_inc} {:instruction integer_add} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_add} {:instruction float_inc} {:instruction integer_add} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_add} {:instruction float_inc} {:instruction float_inc} {:instruction integer_sub} {:instruction float_inc} {:instruction float_inc} {:instruction integer_add} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_add} {:instruction integer_min} {:instruction float_inc} {:instruction integer_sub} {:instruction float_inc} {:instruction float_inc} {:instruction integer_add} {:instruction float_inc} {:instruction float_inc} {:instruction integer_add} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_dup_times} {:instruction integer_add} {:instruction float_inc} {:instruction float_inc} {:instruction integer_max} {:instruction integer_swap} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_dup_times} {:instruction float_rot} {:instruction float_stackdepth} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_min} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_dup_times} {:instruction float_inc} {:instruction integer_add} {:instruction float_inc} {:instruction float_inc} {:instruction integer_max} {:instruction integer_swap} {:instruction float_dup} {:instruction integer_dup_times} {:instruction 25} {:instruction float_stackdepth} {:instruction tagged_534} {:instruction float_dup_times} {:instruction float_yank} {:instruction float_inc} {:instruction integer_add} {:instruction integer_yankdup} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_add} {:instruction integer_yankdup} {:instruction float_inc} {:instruction integer_max} {:instruction float_dup_times} {:instruction integer_max} {:instruction float_dup_times} {:instruction float_max} {:instruction float_dup_times} {:instruction float_stackdepth} {:instruction float_inc} {:instruction float_inc} {:instruction float_dup_times} {:instruction float_yank} {:instruction float_rot} {:instruction 25} {:instruction in2} {:instruction integer_add} {:instruction integer_yank} {:instruction float_dup_times} {:instruction float_dec} {:instruction in1} {:instruction 78.00430018095415} {:instruction float_rot} {:instruction float_dup_times} {:instruction float_rot} {:instruction integer_yankdup} {:instruction integer_add} {:instruction float_dec} {:instruction float_inc} {:instruction float_sub} {:instruction float_rot} {:instruction integer_shove} {:instruction float_rot} {:instruction float_sub} {:instruction float_rot} {:instruction integer_sub} {:instruction float_inc} {:instruction integer_swap} {:instruction integer_min} {:instruction print_float} {:instruction integer_pop} {:instruction float_pop})
Best program: (float_mod integer_dup_times integer_max integer_max float_inc integer_max in2 float_pop integer_mod integer_mod float_flush float_pop integer_max integer_flush in1 in1 float_stackdepth in2 integer_add integer_add float_inc float_inc float_inc float_inc integer_add float_inc integer_max float_inc integer_add float_inc float_inc float_inc float_inc float_inc float_inc integer_add float_inc integer_add float_inc float_inc float_inc float_inc integer_add float_inc float_inc integer_sub float_inc float_inc integer_add float_inc float_inc float_inc float_inc float_inc integer_add integer_min float_inc integer_sub float_inc float_inc integer_add float_inc float_inc integer_add float_inc float_inc float_inc integer_dup_times integer_add float_inc float_inc integer_max integer_swap float_inc float_inc float_inc float_dup_times float_rot float_stackdepth float_inc float_inc float_inc integer_min float_inc float_inc float_inc integer_dup_times float_inc integer_add float_inc float_inc integer_max integer_swap float_dup integer_dup_times 25 float_stackdepth tagged_534 float_dup_times float_yank float_inc integer_add integer_yankdup float_inc float_inc float_inc float_inc integer_add integer_yankdup float_inc integer_max float_dup_times integer_max float_dup_times float_max float_dup_times float_stackdepth float_inc float_inc float_dup_times float_yank float_rot 25 in2 integer_add integer_yank float_dup_times float_dec in1 78.00430018095415 float_rot float_dup_times float_rot integer_yankdup integer_add float_dec float_inc float_sub float_rot integer_shove float_rot float_sub float_rot integer_sub float_inc integer_swap integer_min print_float integer_pop float_pop)
Errors: [22.9957 8 27.0 2 8.9957 8 29.0 2 19.0 2 5.9957 9 28.0043 7 5.0 1 27.0043 8 14.0 2 0.0 0 10.0043 7 30.0 1 3.0 1 28.0 2 0.0043 6 0.0 0 33.0 9 30.9957 9 10.0 1 26.0 2 31.0 2 0.0 0 3.0043 6 1.0 1]
Total: 489.0043
Mean: 9.780086
Genome size: 150
Size: 151
Percent parens: 0.007
--- Population Statistics ---
Average total errors in population: 3335.5310307
Median total errors in population: 1009.5
Error averages by case: (153.64681309999972 10.14 119.65526000000001 4.106 136.9115819999998 6.884 131.7729273 3.681 116.93623470000006 3.721 155.43759629999985 8.02 137.05236160000018 6.369 103.11563640000011 4.113 136.32046060000016 7.029 122.95213360000021 3.963 112.42488570000005 2.738 147.44009029999998 7.663 116.12335990000005 3.642 108.75574080000001 3.061 139.56347849999992 3.901 140.86285949999993 7.842 106.45352710000003 4.558 137.08434970000008 10.025 157.43048509999977 10.95 94.19961339999998 2.916 133.56758790000006 4.071 113.80884580000006 3.658 110.9470946000001 3.464 149.97783380000027 6.663 116.51827299999991 3.394)
Error minima by case: (0.3903 7 0.2433 1 0.0043 1 19.0 1 0.0 0 0.0043 1 3.0E-4 1 0.0 0 3.9957 1 0.0 0 0.0 0 1.0043 1 0.0 0 0.0 0 9.0 1 7.0E-4 1 0.0 0 0.0172 7 9.9292 8 0.1392 1 0.088 1 0.0 0 0.0 0 0.0043 1 0.0 0)
Average genome size in population (length): 144.458
Average program size in population (points): 145.458
Average percent parens in population: 0.007
Minimum age in population: 232.1698712439538
Maximum age in population: 236.3967439193153
Average age in population: 234.2127805709385
Median age in population: 234.2269034620789
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 6
Genome diversity (% unique Plush genomes):	 0.957
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 6
Syntactic diversity (% unique Push programs):	 0.957
Total error diversity:				 0.589
Error (vector) diversity:			 0.706
Behavioral diversity:				 0.706
--- Run Statistics ---
Number of program evaluations used so far: 173000
Number of point (instruction) evaluations so far: 460032816
--- Timings ---
Current time: 1529616707836 milliseconds
Total Time:         771.9 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       234.2 seconds, 30.3%
Fitness Testing:    428.8 seconds, 55.6%
Report:             108.8 seconds, 14.1%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 172
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 173
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 173
;;******************************
;; -*- Number IO problem report - generation 173
Test total error for best: 25444.9312
Test mean error for best: 12.72247
;;------------------------------
Outputs of best individual on training cases:
Correct output: -74.6179542037 | Program output: -51.6222543847
Correct output: 78.7609586813  | Program output: 51.7609586813 
Correct output: 3.0100598709   | Program output: 12.0057596899 
Correct output: -99.2368061293 | Program output: -70.2368061293
Correct output: 88.6808415603  | Program output: 69.6808415603 
Correct output: -151.1060419578 | Program output: -145.1103421388
Correct output: 56.004616184   | Program output: 28.000316003  
Correct output: 33.520660154   | Program output: 38.520660154  
Correct output: 42.238861085   | Program output: 15.2345609041 
Correct output: -49.0227893765 | Program output: -35.0227893765
Correct output: 103.4057483059 | Program output: 103.4057483059
Correct output: -106.1378273779 | Program output: -116.1421275589
Correct output: 37.9625599991  | Program output: 67.9625599991 
Correct output: 71.9208193203  | Program output: 74.9208193203 
Correct output: 173.5348464317 | Program output: 145.5348464317
Correct output: -77.0615185935 | Program output: -77.0658187744
Correct output: -20.7643622555 | Program output: -20.7643622555
Correct output: 1.9827630815   | Program output: -31.0172369185
Correct output: -39.1198682611 | Program output: -8.124168442  
Correct output: 1.1392376036   | Program output: 11.1392376036 
Correct output: 129.1930977679 | Program output: 103.1930977679
Correct output: 26.7496211861  | Program output: 57.7496211861 
Correct output: -11.2984801384 | Program output: -11.2984801384
Correct output: -136.1442960385 | Program output: -139.1485962195
Correct output: 143.0911996605 | Program output: 142.0911996605
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_mod} {:instruction integer_dup_times} {:instruction integer_max} {:instruction integer_max} {:instruction float_inc} {:instruction integer_max} {:instruction in2} {:instruction float_pop} {:instruction integer_mod} {:instruction integer_mod} {:instruction float_flush} {:instruction float_pop} {:instruction integer_max} {:instruction integer_flush} {:instruction in1} {:instruction in1} {:instruction float_stackdepth} {:instruction in2} {:instruction integer_add} {:instruction integer_add} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_add} {:instruction float_inc} {:instruction integer_max} {:instruction float_inc} {:instruction integer_add} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_add} {:instruction float_inc} {:instruction integer_add} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_add} {:instruction float_inc} {:instruction float_inc} {:instruction integer_sub} {:instruction float_inc} {:instruction float_inc} {:instruction integer_add} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_add} {:instruction integer_min} {:instruction float_inc} {:instruction integer_sub} {:instruction float_inc} {:instruction float_inc} {:instruction integer_add} {:instruction float_inc} {:instruction float_inc} {:instruction integer_add} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_dup_times} {:instruction integer_add} {:instruction float_inc} {:instruction float_inc} {:instruction integer_max} {:instruction integer_swap} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_dup_times} {:instruction float_rot} {:instruction float_stackdepth} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_min} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_dup_times} {:instruction float_inc} {:instruction integer_add} {:instruction float_inc} {:instruction float_inc} {:instruction integer_max} {:instruction integer_swap} {:instruction float_dup} {:instruction integer_dup_times} {:instruction 25} {:instruction float_stackdepth} {:instruction tagged_534} {:instruction float_dup_times} {:instruction float_yank} {:instruction float_inc} {:instruction integer_add} {:instruction integer_yankdup} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_add} {:instruction integer_yankdup} {:instruction float_inc} {:instruction integer_max} {:instruction float_dup_times} {:instruction integer_max} {:instruction float_dup_times} {:instruction float_max} {:instruction float_dup_times} {:instruction float_stackdepth} {:instruction float_inc} {:instruction float_inc} {:instruction float_dup_times} {:instruction float_yank} {:instruction float_rot} {:instruction 25} {:instruction in2} {:instruction integer_add} {:instruction integer_yank} {:instruction float_dup_times} {:instruction float_dec} {:instruction in1} {:instruction 78.00430018095415} {:instruction float_rot} {:instruction float_dup_times} {:instruction float_rot} {:instruction integer_yankdup} {:instruction integer_add} {:instruction float_dec} {:instruction float_inc} {:instruction float_sub} {:instruction float_rot} {:instruction integer_shove} {:instruction float_rot} {:instruction float_sub} {:instruction float_rot} {:instruction integer_sub} {:instruction float_inc} {:instruction integer_swap} {:instruction integer_min} {:instruction integer_swap} {:instruction integer_min} {:instruction print_float} {:instruction integer_pop} {:instruction float_pop})
Best program: (float_mod integer_dup_times integer_max integer_max float_inc integer_max in2 float_pop integer_mod integer_mod float_flush float_pop integer_max integer_flush in1 in1 float_stackdepth in2 integer_add integer_add float_inc float_inc float_inc float_inc integer_add float_inc integer_max float_inc integer_add float_inc float_inc float_inc float_inc float_inc float_inc integer_add float_inc integer_add float_inc float_inc float_inc float_inc integer_add float_inc float_inc integer_sub float_inc float_inc integer_add float_inc float_inc float_inc float_inc float_inc integer_add integer_min float_inc integer_sub float_inc float_inc integer_add float_inc float_inc integer_add float_inc float_inc float_inc integer_dup_times integer_add float_inc float_inc integer_max integer_swap float_inc float_inc float_inc float_dup_times float_rot float_stackdepth float_inc float_inc float_inc integer_min float_inc float_inc float_inc integer_dup_times float_inc integer_add float_inc float_inc integer_max integer_swap float_dup integer_dup_times 25 float_stackdepth tagged_534 float_dup_times float_yank float_inc integer_add integer_yankdup float_inc float_inc float_inc float_inc integer_add integer_yankdup float_inc integer_max float_dup_times integer_max float_dup_times float_max float_dup_times float_stackdepth float_inc float_inc float_dup_times float_yank float_rot 25 in2 integer_add integer_yank float_dup_times float_dec in1 78.00430018095415 float_rot float_dup_times float_rot integer_yankdup integer_add float_dec float_inc float_sub float_rot integer_shove float_rot float_sub float_rot integer_sub float_inc integer_swap integer_min integer_swap integer_min print_float integer_pop float_pop)
Errors: [22.9957 8 27.0 2 8.9957 8 29.0 2 19.0 2 5.9957 9 28.0043 7 5.0 1 27.0043 8 14.0 2 0.0 0 10.0043 7 30.0 1 3.0 1 28.0 2 0.0043 6 0.0 0 33.0 9 30.9957 9 10.0 1 26.0 2 31.0 2 0.0 0 3.0043 6 1.0 1]
Total: 489.0043
Mean: 9.780086
Genome size: 152
Size: 153
Percent parens: 0.007
--- Population Statistics ---
Average total errors in population: 3219.1510548
Median total errors in population: 987.0
Error averages by case: (152.1105994999997 10.034 117.99862580000001 4.038 136.78645399999974 6.835 131.3876264 3.701 114.3342516 3.713 149.3982904999998 7.949 135.98416230000018 6.308 98.99400780000002 4.115 136.27684480000022 6.98 112.71763490000019 3.911 104.00971610000009 2.739 142.4564271000001 7.535 113.67170930000003 3.638 100.09153470000003 3.031 131.57161569999988 3.918 136.89728569999994 7.564 99.82917220000002 4.78 126.64092930000008 10.075 156.95511609999969 10.823 94.38869849999996 2.983 125.1601127000001 4.083 109.92921420000003 3.643 103.02839600000007 3.389 144.25004490000026 6.537 108.52158469999996 3.439)
Error minima by case: (2.1396 7 0.2433 1 0.0043 1 5.2368 1 2.1673 1 0.0043 2 2.9997 1 0.0 0 3.2389 1 0.0 0 0.0 0 1.9957 1 0.0 0 0.0 0 14.0 1 0.0043 1 0.0 0 0.0172 8 0.8058 6 0.1424 1 5.8069 1 0.0 0 0.0 0 0.0043 1 0.0 0)
Average genome size in population (length): 145.306
Average program size in population (points): 146.306
Average percent parens in population: 0.007
Minimum age in population: 233.1698712439538
Maximum age in population: 237.4461976612074
Average age in population: 235.4849774974298
Median age in population: 235.5315269631752
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 7
Genome diversity (% unique Plush genomes):	 0.956
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 7
Syntactic diversity (% unique Push programs):	 0.956
Total error diversity:				 0.581
Error (vector) diversity:			 0.707
Behavioral diversity:				 0.708
--- Run Statistics ---
Number of program evaluations used so far: 174000
Number of point (instruction) evaluations so far: 463665466
--- Timings ---
Current time: 1529616713235 milliseconds
Total Time:         777.4 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       235.6 seconds, 30.3%
Fitness Testing:    432.0 seconds, 55.6%
Report:             109.7 seconds, 14.1%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 173
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 174
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 174
;;******************************
;; -*- Number IO problem report - generation 174
Test total error for best: 24186.853799999997
Test mean error for best: 12.09343
;;------------------------------
Outputs of best individual on training cases:
Correct output: -74.6179542037 | Program output: -49.6222543847
Correct output: 78.7609586813  | Program output: 51.7609586813 
Correct output: 3.0100598709   | Program output: 14.0057596899 
Correct output: -99.2368061293 | Program output: -67.2368061293
Correct output: 88.6808415603  | Program output: 69.6808415603 
Correct output: -151.1060419578 | Program output: -143.1103421388
Correct output: 56.004616184   | Program output: 30.000316003  
Correct output: 33.520660154   | Program output: 38.520660154  
Correct output: 42.238861085   | Program output: 17.2345609041 
Correct output: -49.0227893765 | Program output: -35.0227893765
Correct output: 103.4057483059 | Program output: 103.4057483059
Correct output: -106.1378273779 | Program output: -114.1421275589
Correct output: 37.9625599991  | Program output: 55.9625599991 
Correct output: 71.9208193203  | Program output: 78.9208193203 
Correct output: 173.5348464317 | Program output: 145.5348464317
Correct output: -77.0615185935 | Program output: -75.0658187744
Correct output: -20.7643622555 | Program output: -20.7643622555
Correct output: 1.9827630815   | Program output: -31.0172369185
Correct output: -39.1198682611 | Program output: -6.124168442  
Correct output: 1.1392376036   | Program output: 15.1392376036 
Correct output: 129.1930977679 | Program output: 103.1930977679
Correct output: 26.7496211861  | Program output: 45.7496211861 
Correct output: -11.2984801384 | Program output: -11.2984801384
Correct output: -136.1442960385 | Program output: -137.1485962195
Correct output: 143.0911996605 | Program output: 142.0911996605
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_mod} {:instruction integer_dup_times} {:instruction integer_max} {:instruction integer_max} {:instruction float_inc} {:instruction float_max} {:instruction in2} {:instruction float_pop} {:instruction integer_mod} {:instruction float_flush} {:instruction float_pop} {:instruction integer_max} {:instruction integer_flush} {:instruction in1} {:instruction in1} {:instruction float_stackdepth} {:instruction in2} {:instruction -8} {:instruction integer_add} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_add} {:instruction float_inc} {:instruction integer_max} {:instruction float_inc} {:instruction integer_add} {:instruction float_inc} {:instruction integer_add} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_add} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_add} {:instruction float_inc} {:instruction integer_add} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_add} {:instruction integer_min} {:instruction float_inc} {:instruction integer_sub} {:instruction float_inc} {:instruction float_inc} {:instruction integer_add} {:instruction float_inc} {:instruction float_inc} {:instruction integer_add} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_add} {:instruction float_inc} {:instruction float_inc} {:instruction integer_max} {:instruction integer_swap} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_dup_times} {:instruction float_rot} {:instruction float_stackdepth} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_min} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_add} {:instruction float_inc} {:instruction float_inc} {:instruction integer_max} {:instruction float_inc} {:instruction float_dup} {:instruction integer_dup_times} {:instruction 25} {:instruction float_stackdepth} {:instruction float_inc} {:instruction float_dup_times} {:instruction float_yank} {:instruction float_inc} {:instruction integer_add} {:instruction integer_yankdup} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_add} {:instruction integer_yankdup} {:instruction float_inc} {:instruction integer_max} {:instruction float_dup_times} {:instruction float_max} {:instruction float_dup_times} {:instruction float_stackdepth} {:instruction float_inc} {:instruction float_inc} {:instruction float_dup_times} {:instruction float_yank} {:instruction float_rot} {:instruction 25} {:instruction in2} {:instruction integer_add} {:instruction integer_yank} {:instruction float_dup_times} {:instruction float_dec} {:instruction in1} {:instruction 78.00430018095415} {:instruction float_rot} {:instruction float_dup_times} {:instruction float_rot} {:instruction integer_yankdup} {:instruction integer_add} {:instruction float_dec} {:instruction float_inc} {:instruction float_sub} {:instruction float_rot} {:instruction integer_shove} {:instruction float_rot} {:instruction float_sub} {:instruction float_rot} {:instruction integer_sub} {:instruction float_inc} {:instruction integer_swap} {:instruction integer_min} {:instruction print_float} {:instruction integer_pop} {:instruction float_pop})
Best program: (float_mod integer_dup_times integer_max integer_max float_inc float_max in2 float_pop integer_mod float_flush float_pop integer_max integer_flush in1 in1 float_stackdepth in2 -8 integer_add float_inc float_inc float_inc float_inc integer_add float_inc integer_max float_inc integer_add float_inc integer_add float_inc float_inc float_inc float_inc float_inc float_inc integer_add float_inc float_inc float_inc integer_add float_inc integer_add float_inc float_inc float_inc float_inc float_inc integer_add integer_min float_inc integer_sub float_inc float_inc integer_add float_inc float_inc integer_add float_inc float_inc float_inc float_inc integer_add float_inc float_inc integer_max integer_swap float_inc float_inc float_inc float_dup_times float_rot float_stackdepth float_inc float_inc float_inc integer_min float_inc float_inc float_inc float_inc float_inc integer_add float_inc float_inc integer_max float_inc float_dup integer_dup_times 25 float_stackdepth float_inc float_dup_times float_yank float_inc integer_add integer_yankdup float_inc float_inc float_inc float_inc integer_add integer_yankdup float_inc integer_max float_dup_times float_max float_dup_times float_stackdepth float_inc float_inc float_dup_times float_yank float_rot 25 in2 integer_add integer_yank float_dup_times float_dec in1 78.00430018095415 float_rot float_dup_times float_rot integer_yankdup integer_add float_dec float_inc float_sub float_rot integer_shove float_rot float_sub float_rot integer_sub float_inc integer_swap integer_min print_float integer_pop float_pop)
Errors: [24.9957 8 27.0 2 10.9957 8 32.0 2 19.0 2 7.9957 9 26.0043 7 5.0 1 25.0043 8 14.0 2 0.0 0 8.0043 8 18.0 2 7.0 1 28.0 2 1.9957 7 0.0 0 33.0 9 32.9957 9 14.0 1 26.0 2 19.0 2 0.0 0 1.0043 6 1.0 1]
Total: 480.9957
Mean: 9.619914
Genome size: 142
Size: 143
Percent parens: 0.007
--- Population Statistics ---
Average total errors in population: 2873.667034200001
Median total errors in population: 975.0603500000001
Error averages by case: (126.75245109999989 9.984 108.89208980000002 3.983 112.00065709999983 6.625 118.34809609999995 3.307 104.7073507 3.629 129.58697099999983 7.811 112.9871407000003 6.143 87.16700840000007 4.125 111.08660290000016 6.787 107.90092050000013 3.842 95.64046220000007 2.619 121.91003090000007 7.415 103.65652500000002 3.628 92.66308409999999 2.961 126.1553255999999 3.862 112.09034329999992 7.408 89.26609319999997 4.422 122.24683800000005 10.077 133.4442716999999 10.81 82.43566320000005 2.843 118.67938060000003 4.034 99.49886580000002 3.602 97.26353840000004 3.343 123.9313479000002 6.431 102.29897599999993 3.366)
Error minima by case: (1.0685 7 0.2433 1 0.0043 1 11.0043 1 0.6808 1 0.0043 2 0.9957 1 0.0 0 1.9957 1 0.0 0 0.0 0 0.0043 1 0.0 0 0.0 0 10.0 1 0.0043 1 0.0 0 0.0172 8 5.7411 8 0.0039 1 8.0 1 0.7235 1 0.0 0 0.0043 1 0.0 0)
Average genome size in population (length): 145.669
Average program size in population (points): 146.669
Average percent parens in population: 0.007
Minimum age in population: 234.509194073452
Maximum age in population: 238.4744002412926
Average age in population: 236.691208454893
Median age in population: 236.7479144428008
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 5
Genome diversity (% unique Plush genomes):	 0.949
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 5
Syntactic diversity (% unique Push programs):	 0.949
Total error diversity:				 0.579
Error (vector) diversity:			 0.707
Behavioral diversity:				 0.708
--- Run Statistics ---
Number of program evaluations used so far: 175000
Number of point (instruction) evaluations so far: 467307241
--- Timings ---
Current time: 1529616718675 milliseconds
Total Time:         782.8 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       237.0 seconds, 30.3%
Fitness Testing:    435.2 seconds, 55.6%
Report:             110.5 seconds, 14.1%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 174
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 175
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 175
;;******************************
;; -*- Number IO problem report - generation 175
Test total error for best: 22452.853799999993
Test mean error for best: 11.22643
;;------------------------------
Outputs of best individual on training cases:
Correct output: -74.6179542037 | Program output: -49.6222543847
Correct output: 78.7609586813  | Program output: 51.7609586813 
Correct output: 3.0100598709   | Program output: 14.0057596899 
Correct output: -99.2368061293 | Program output: -69.2368061293
Correct output: 88.6808415603  | Program output: 69.6808415603 
Correct output: -151.1060419578 | Program output: -143.1103421388
Correct output: 56.004616184   | Program output: 30.000316003  
Correct output: 33.520660154   | Program output: 38.520660154  
Correct output: 42.238861085   | Program output: 17.2345609041 
Correct output: -49.0227893765 | Program output: -46.0227893765
Correct output: 103.4057483059 | Program output: 105.4057483059
Correct output: -106.1378273779 | Program output: -114.1421275589
Correct output: 37.9625599991  | Program output: 18.9625599991 
Correct output: 71.9208193203  | Program output: 76.9208193203 
Correct output: 173.5348464317 | Program output: 145.5348464317
Correct output: -77.0615185935 | Program output: -75.0658187744
Correct output: -20.7643622555 | Program output: -18.7643622555
Correct output: 1.9827630815   | Program output: -31.0172369185
Correct output: -39.1198682611 | Program output: -6.124168442  
Correct output: 1.1392376036   | Program output: 13.1392376036 
Correct output: 129.1930977679 | Program output: 103.1930977679
Correct output: 26.7496211861  | Program output: 8.7496211861  
Correct output: -11.2984801384 | Program output: -11.2984801384
Correct output: -136.1442960385 | Program output: -137.1485962195
Correct output: 143.0911996605 | Program output: 142.0911996605
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_mod} {:instruction float_sin} {:instruction float_pop} {:instruction integer_mod} {:instruction float_flush} {:instruction float_pop} {:instruction integer_max} {:instruction integer_mod} {:instruction float_sin} {:instruction float_pop} {:instruction integer_mod} {:instruction float_flush} {:instruction float_pop} {:instruction integer_max} {:instruction integer_flush} {:instruction in1} {:instruction in1} {:instruction float_stackdepth} {:instruction in2} {:instruction integer_add} {:instruction integer_add} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_add} {:instruction float_inc} {:instruction integer_max} {:instruction float_inc} {:instruction integer_add} {:instruction float_inc} {:instruction integer_add} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_add} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_add} {:instruction float_inc} {:instruction integer_add} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_add} {:instruction integer_min} {:instruction float_inc} {:instruction -24} {:instruction integer_add} {:instruction integer_min} {:instruction float_inc} {:instruction integer_sub} {:instruction float_inc} {:instruction float_inc} {:instruction integer_add} {:instruction float_inc} {:instruction float_inc} {:instruction integer_add} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_add} {:instruction float_inc} {:instruction float_inc} {:instruction integer_max} {:instruction float_inc} {:instruction integer_max} {:instruction integer_swap} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_dup_times} {:instruction float_rot} {:instruction float_stackdepth} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_min} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_add} {:instruction float_inc} {:instruction float_inc} {:instruction integer_max} {:instruction float_inc} {:instruction float_dup} {:instruction float_inc} {:instruction 25} {:instruction float_stackdepth} {:instruction float_swap} {:instruction float_dup_times} {:instruction float_yank} {:instruction float_inc} {:instruction integer_add} {:instruction integer_yankdup} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_add} {:instruction integer_yankdup} {:instruction float_inc} {:instruction integer_max} {:instruction float_dup_times} {:instruction float_max} {:instruction float_dup_times} {:instruction float_stackdepth} {:instruction float_inc} {:instruction float_inc} {:instruction float_dup_times} {:instruction float_yank} {:instruction float_rot} {:instruction 25} {:instruction in2} {:instruction integer_add} {:instruction integer_yank} {:instruction float_dup_times} {:instruction float_dec} {:instruction in1} {:instruction 78.00430018095415} {:instruction float_rot} {:instruction integer_rot} {:instruction float_rot} {:instruction float_sub} {:instruction float_rot} {:instruction integer_shove} {:instruction float_rot} {:instruction float_sub} {:instruction float_rot} {:instruction integer_min} {:instruction integer_min} {:instruction print_float} {:instruction integer_pop} {:instruction float_pop})
Best program: (float_mod float_sin float_pop integer_mod float_flush float_pop integer_max integer_mod float_sin float_pop integer_mod float_flush float_pop integer_max integer_flush in1 in1 float_stackdepth in2 integer_add integer_add float_inc float_inc float_inc float_inc integer_add float_inc integer_max float_inc integer_add float_inc integer_add float_inc float_inc float_inc float_inc float_inc float_inc integer_add float_inc float_inc float_inc integer_add float_inc integer_add float_inc float_inc float_inc float_inc float_inc integer_add integer_min float_inc -24 integer_add integer_min float_inc integer_sub float_inc float_inc integer_add float_inc float_inc integer_add float_inc float_inc float_inc float_inc integer_add float_inc float_inc integer_max float_inc integer_max integer_swap float_inc float_inc float_inc float_dup_times float_rot float_stackdepth float_inc float_inc float_inc integer_min float_inc float_inc float_inc float_inc float_inc integer_add float_inc float_inc integer_max float_inc float_dup float_inc 25 float_stackdepth float_swap float_dup_times float_yank float_inc integer_add integer_yankdup float_inc float_inc float_inc float_inc integer_add integer_yankdup float_inc integer_max float_dup_times float_max float_dup_times float_stackdepth float_inc float_inc float_dup_times float_yank float_rot 25 in2 integer_add integer_yank float_dup_times float_dec in1 78.00430018095415 float_rot integer_rot float_rot float_sub float_rot integer_shove float_rot float_sub float_rot integer_min integer_min print_float integer_pop float_pop)
Errors: [24.9957 8 27.0 2 10.9957 8 30.0 1 19.0 2 7.9957 9 26.0043 7 5.0 1 25.0043 8 3.0 1 2.0 1 8.0043 8 19.0 2 5.0 1 28.0 2 1.9957 7 2.0 2 33.0 9 32.9957 9 12.0 1 26.0 2 18.0 2 0.0 0 1.0043 6 1.0 1]
Total: 468.9957
Mean: 9.379914
Genome size: 144
Size: 145
Percent parens: 0.007
--- Population Statistics ---
Average total errors in population: 2786.8350866
Median total errors in population: 903.6782
Error averages by case: (126.42438579999988 9.965 105.56865470000001 4.067 111.41353999999983 6.797 118.58265929999999 3.572 100.92394910000004 3.738 124.92514639999985 7.89 112.15825480000031 6.218 84.67129940000004 4.085 111.07376530000022 6.924 98.46152700000009 3.937 91.51652550000007 2.735 117.4609044000001 7.444 98.97412560000006 3.704 88.22069160000004 3.067 120.55578089999992 3.936 110.53909569999992 7.49 86.7816848 4.682 112.75411510000006 10.003 131.18714459999993 10.766 86.3089029 2.985 113.88314200000008 4.145 96.22699020000005 3.714 86.38743090000003 3.366 119.83871140000022 6.49 96.85465919999997 3.422)
Error minima by case: (0.3683 7 0.2433 1 0.0043 1 14.2368 1 0.3192 1 0.0043 2 0.0043 1 0.0 0 0.2389 1 0.0 0 0.0 0 0.0043 1 0.0 0 0.0 0 10.0 1 0.0043 1 0.0 0 0.0177 7 1.1528 8 0.0963 1 7.6912 1 0.0 0 0.0 0 0.0043 1 0.0 0)
Average genome size in population (length): 146.653
Average program size in population (points): 147.653
Average percent parens in population: 0.007
Minimum age in population: 235.867099298507
Maximum age in population: 239.8631831417674
Average age in population: 238.0280155343419
Median age in population: 238.0788507069265
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 8
Genome diversity (% unique Plush genomes):	 0.949
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 8
Syntactic diversity (% unique Push programs):	 0.949
Total error diversity:				 0.577
Error (vector) diversity:			 0.705
Behavioral diversity:				 0.706
--- Run Statistics ---
Number of program evaluations used so far: 176000
Number of point (instruction) evaluations so far: 470973666
--- Timings ---
Current time: 1529616724140 milliseconds
Total Time:         788.3 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       238.4 seconds, 30.2%
Fitness Testing:    438.5 seconds, 55.6%
Report:             111.3 seconds, 14.1%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 175
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 176
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 176
;;******************************
;; -*- Number IO problem report - generation 176
Test total error for best: 22452.853799999993
Test mean error for best: 11.22643
;;------------------------------
Outputs of best individual on training cases:
Correct output: -74.6179542037 | Program output: -49.6222543847
Correct output: 78.7609586813  | Program output: 51.7609586813 
Correct output: 3.0100598709   | Program output: 14.0057596899 
Correct output: -99.2368061293 | Program output: -69.2368061293
Correct output: 88.6808415603  | Program output: 69.6808415603 
Correct output: -151.1060419578 | Program output: -143.1103421388
Correct output: 56.004616184   | Program output: 30.000316003  
Correct output: 33.520660154   | Program output: 38.520660154  
Correct output: 42.238861085   | Program output: 17.2345609041 
Correct output: -49.0227893765 | Program output: -46.0227893765
Correct output: 103.4057483059 | Program output: 105.4057483059
Correct output: -106.1378273779 | Program output: -114.1421275589
Correct output: 37.9625599991  | Program output: 18.9625599991 
Correct output: 71.9208193203  | Program output: 76.9208193203 
Correct output: 173.5348464317 | Program output: 145.5348464317
Correct output: -77.0615185935 | Program output: -75.0658187744
Correct output: -20.7643622555 | Program output: -18.7643622555
Correct output: 1.9827630815   | Program output: -31.0172369185
Correct output: -39.1198682611 | Program output: -6.124168442  
Correct output: 1.1392376036   | Program output: 13.1392376036 
Correct output: 129.1930977679 | Program output: 103.1930977679
Correct output: 26.7496211861  | Program output: 8.7496211861  
Correct output: -11.2984801384 | Program output: -11.2984801384
Correct output: -136.1442960385 | Program output: -137.1485962195
Correct output: 143.0911996605 | Program output: 142.0911996605
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_mod} {:instruction float_sin} {:instruction float_pop} {:instruction integer_mod} {:instruction float_flush} {:instruction float_pop} {:instruction integer_max} {:instruction integer_mod} {:instruction float_sin} {:instruction float_pop} {:instruction integer_mod} {:instruction float_flush} {:instruction float_pop} {:instruction integer_max} {:instruction integer_flush} {:instruction in1} {:instruction in1} {:instruction float_stackdepth} {:instruction in2} {:instruction integer_add} {:instruction integer_add} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_add} {:instruction float_inc} {:instruction integer_max} {:instruction float_inc} {:instruction integer_add} {:instruction float_inc} {:instruction integer_add} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_add} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_add} {:instruction float_inc} {:instruction integer_add} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_add} {:instruction integer_min} {:instruction float_inc} {:instruction -24} {:instruction integer_add} {:instruction integer_min} {:instruction float_inc} {:instruction integer_sub} {:instruction float_inc} {:instruction float_inc} {:instruction integer_add} {:instruction float_inc} {:instruction float_inc} {:instruction integer_add} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_add} {:instruction float_inc} {:instruction float_inc} {:instruction integer_max} {:instruction float_inc} {:instruction integer_max} {:instruction integer_swap} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_dup_times} {:instruction float_rot} {:instruction float_stackdepth} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_min} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_add} {:instruction float_inc} {:instruction float_inc} {:instruction integer_max} {:instruction float_inc} {:instruction float_dup} {:instruction float_inc} {:instruction 25} {:instruction float_stackdepth} {:instruction float_swap} {:instruction float_dup_times} {:instruction float_yank} {:instruction float_inc} {:instruction integer_add} {:instruction integer_yankdup} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_add} {:instruction integer_yankdup} {:instruction float_inc} {:instruction integer_max} {:instruction float_dup_times} {:instruction float_max} {:instruction float_dup_times} {:instruction float_stackdepth} {:instruction float_inc} {:instruction float_inc} {:instruction float_dup_times} {:instruction float_yank} {:instruction float_rot} {:instruction 25} {:instruction in2} {:instruction integer_add} {:instruction integer_yank} {:instruction float_dup_times} {:instruction float_dec} {:instruction in1} {:instruction 78.00430018095415} {:instruction float_rot} {:instruction integer_rot} {:instruction float_rot} {:instruction float_sub} {:instruction float_rot} {:instruction integer_shove} {:instruction float_rot} {:instruction float_sub} {:instruction float_rot} {:instruction integer_min} {:instruction integer_min} {:instruction print_float} {:instruction integer_pop} {:instruction float_pop})
Best program: (float_mod float_sin float_pop integer_mod float_flush float_pop integer_max integer_mod float_sin float_pop integer_mod float_flush float_pop integer_max integer_flush in1 in1 float_stackdepth in2 integer_add integer_add float_inc float_inc float_inc float_inc integer_add float_inc integer_max float_inc integer_add float_inc integer_add float_inc float_inc float_inc float_inc float_inc float_inc integer_add float_inc float_inc float_inc integer_add float_inc integer_add float_inc float_inc float_inc float_inc float_inc integer_add integer_min float_inc -24 integer_add integer_min float_inc integer_sub float_inc float_inc integer_add float_inc float_inc integer_add float_inc float_inc float_inc float_inc integer_add float_inc float_inc integer_max float_inc integer_max integer_swap float_inc float_inc float_inc float_dup_times float_rot float_stackdepth float_inc float_inc float_inc integer_min float_inc float_inc float_inc float_inc float_inc integer_add float_inc float_inc integer_max float_inc float_dup float_inc 25 float_stackdepth float_swap float_dup_times float_yank float_inc integer_add integer_yankdup float_inc float_inc float_inc float_inc integer_add integer_yankdup float_inc integer_max float_dup_times float_max float_dup_times float_stackdepth float_inc float_inc float_dup_times float_yank float_rot 25 in2 integer_add integer_yank float_dup_times float_dec in1 78.00430018095415 float_rot integer_rot float_rot float_sub float_rot integer_shove float_rot float_sub float_rot integer_min integer_min print_float integer_pop float_pop)
Errors: [24.9957 8 27.0 2 10.9957 8 30.0 1 19.0 2 7.9957 9 26.0043 7 5.0 1 25.0043 8 3.0 1 2.0 1 8.0043 8 19.0 2 5.0 1 28.0 2 1.9957 7 2.0 2 33.0 9 32.9957 9 12.0 1 26.0 2 18.0 2 0.0 0 1.0043 6 1.0 1]
Total: 468.9957
Mean: 9.379914
Genome size: 144
Size: 145
Percent parens: 0.007
--- Population Statistics ---
Average total errors in population: 2993.874307
Median total errors in population: 977.0
Error averages by case: (140.0427995999998 10.047 107.82851579999999 4.206 124.52681169999987 6.868 126.79423889999995 3.793 105.16833080000008 3.842 140.35924069999993 7.979 125.33873360000025 6.326 88.16849610000004 4.2 124.41455100000023 6.985 106.51911670000014 4.088 96.32667080000007 2.889 130.96166860000008 7.523 102.70064390000003 3.789 93.48438700000001 3.198 124.39568929999979 4.06 124.24664889999987 7.544 90.86532020000001 4.56 120.26194320000005 10.041 145.69368299999985 10.792 90.60535189999996 3.129 117.87548290000012 4.213 98.99112430000004 3.803 94.79216870000003 3.443 135.0318688000002 6.628 101.00482059999993 3.53)
Error minima by case: (2.0704 7 0.2433 1 0.0101 1 5.2368 1 3.0 1 0.0043 1 0.0043 1 0.0 0 0.0043 1 0.0 0 0.0 0 1.0043 1 0.0 0 0.0 0 12.0 1 0.0043 1 0.0 0 0.0172 7 0.6246 8 0.1392 1 10.0 1 0.0 0 0.0 0 0.0043 1 0.0 0)
Average genome size in population (length): 147.228
Average program size in population (points): 148.228
Average percent parens in population: 0.007
Minimum age in population: 237.2087440659001
Maximum age in population: 241.3343840336656
Average age in population: 239.2988666462243
Median age in population: 239.3303672041794
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 6
Genome diversity (% unique Plush genomes):	 0.949
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 6
Syntactic diversity (% unique Push programs):	 0.949
Total error diversity:				 0.581
Error (vector) diversity:			 0.699
Behavioral diversity:				 0.701
--- Run Statistics ---
Number of program evaluations used so far: 177000
Number of point (instruction) evaluations so far: 474654466
--- Timings ---
Current time: 1529616729537 milliseconds
Total Time:         793.7 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       239.8 seconds, 30.2%
Fitness Testing:    441.8 seconds, 55.7%
Report:             112.0 seconds, 14.1%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 176
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 177
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 177
;;******************************
;; -*- Number IO problem report - generation 177
Test total error for best: 24798.021099999998
Test mean error for best: 12.39901
;;------------------------------
Outputs of best individual on training cases:
Correct output: -74.6179542037 | Program output: -51.6222543847
Correct output: 78.7609586813  | Program output: 56.7609586813 
Correct output: 3.0100598709   | Program output: 12.0057596899 
Correct output: -99.2368061293 | Program output: -69.2368061293
Correct output: 88.6808415603  | Program output: 74.6808415603 
Correct output: -151.1060419578 | Program output: -145.1103421388
Correct output: 56.004616184   | Program output: 28.000316003  
Correct output: 33.520660154   | Program output: 43.520660154  
Correct output: 42.238861085   | Program output: 15.2345609041 
Correct output: -49.0227893765 | Program output: -30.0227893765
Correct output: 103.4057483059 | Program output: 103.4057483059
Correct output: -106.1378273779 | Program output: -116.1421275589
Correct output: 37.9625599991  | Program output: 18.9625599991 
Correct output: 71.9208193203  | Program output: 74.9208193203 
Correct output: 173.5348464317 | Program output: 150.5348464317
Correct output: -77.0615185935 | Program output: -77.0658187744
Correct output: -20.7643622555 | Program output: -20.7643622555
Correct output: 1.9827630815   | Program output: -26.0172369185
Correct output: -39.1198682611 | Program output: -8.124168442  
Correct output: 1.1392376036   | Program output: 13.1392376036 
Correct output: 129.1930977679 | Program output: 108.1930977679
Correct output: 26.7496211861  | Program output: 8.7496211861  
Correct output: -11.2984801384 | Program output: -6.2984801384 
Correct output: -136.1442960385 | Program output: -139.1485962195
Correct output: 143.0911996605 | Program output: 147.0911996605
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_mod} {:instruction 37} {:instruction integer_max} {:instruction integer_max} {:instruction float_inc} {:instruction float_max} {:instruction in2} {:instruction float_pop} {:instruction integer_mod} {:instruction float_flush} {:instruction float_pop} {:instruction integer_max} {:instruction integer_dup} {:instruction in1} {:instruction in1} {:instruction float_stackdepth} {:instruction in2} {:instruction integer_add} {:instruction integer_dup_times} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_add} {:instruction integer_add} {:instruction float_inc} {:instruction integer_max} {:instruction float_inc} {:instruction integer_add} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_add} {:instruction float_inc} {:instruction float_inc} {:instruction integer_add} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_add} {:instruction float_inc} {:instruction float_inc} {:instruction integer_sub} {:instruction float_inc} {:instruction float_inc} {:instruction integer_add} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_sub} {:instruction float_inc} {:instruction float_inc} {:instruction integer_add} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_add} {:instruction integer_min} {:instruction float_inc} {:instruction integer_sub} {:instruction float_inc} {:instruction float_inc} {:instruction integer_add} {:instruction float_inc} {:instruction float_inc} {:instruction integer_add} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction in2} {:instruction integer_max} {:instruction integer_swap} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_dup_times} {:instruction float_rot} {:instruction float_stackdepth} {:instruction float_inc} {:instruction float_stackdepth} {:instruction float_inc} {:instruction integer_min} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_add} {:instruction float_inc} {:instruction float_inc} {:instruction integer_max} {:instruction integer_swap} {:instruction float_dup} {:instruction integer_dup_times} {:instruction 25} {:instruction float_stackdepth} {:instruction float_inc} {:instruction float_dup_times} {:instruction float_yank} {:instruction float_inc} {:instruction integer_add} {:instruction integer_yankdup} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_add} {:instruction integer_yankdup} {:instruction float_inc} {:instruction integer_max} {:instruction float_dup_times} {:instruction float_max} {:instruction float_dup_times} {:instruction float_stackdepth} {:instruction float_inc} {:instruction float_inc} {:instruction float_dup_times} {:instruction float_yank} {:instruction float_rot} {:instruction 25} {:instruction in2} {:instruction integer_add} {:instruction integer_yank} {:instruction float_dup_times} {:instruction float_dec} {:instruction in1} {:instruction 78.00430018095415} {:instruction float_rot} {:instruction float_dup_times} {:instruction float_rot} {:instruction integer_yankdup} {:instruction integer_add} {:instruction float_dec} {:instruction float_inc} {:instruction float_sub} {:instruction float_rot} {:instruction integer_shove} {:instruction float_rot} {:instruction float_sub} {:instruction float_rot} {:instruction integer_sub} {:instruction float_inc} {:instruction integer_swap} {:instruction integer_min} {:instruction print_float})
Best program: (float_mod 37 integer_max integer_max float_inc float_max in2 float_pop integer_mod float_flush float_pop integer_max integer_dup in1 in1 float_stackdepth in2 integer_add integer_dup_times float_inc float_inc float_inc integer_add integer_add float_inc integer_max float_inc integer_add float_inc float_inc float_inc float_inc float_inc float_inc integer_add float_inc float_inc integer_add float_inc float_inc float_inc float_inc integer_add float_inc float_inc integer_sub float_inc float_inc integer_add float_inc float_inc float_inc float_inc float_inc integer_sub float_inc float_inc integer_add float_inc float_inc float_inc float_inc float_inc integer_add integer_min float_inc integer_sub float_inc float_inc integer_add float_inc float_inc integer_add float_inc float_inc float_inc in2 integer_max integer_swap float_inc float_inc float_inc float_dup_times float_rot float_stackdepth float_inc float_stackdepth float_inc integer_min float_inc float_inc float_inc float_inc float_inc integer_add float_inc float_inc integer_max integer_swap float_dup integer_dup_times 25 float_stackdepth float_inc float_dup_times float_yank float_inc integer_add integer_yankdup float_inc float_inc float_inc float_inc integer_add integer_yankdup float_inc integer_max float_dup_times float_max float_dup_times float_stackdepth float_inc float_inc float_dup_times float_yank float_rot 25 in2 integer_add integer_yank float_dup_times float_dec in1 78.00430018095415 float_rot float_dup_times float_rot integer_yankdup integer_add float_dec float_inc float_sub float_rot integer_shove float_rot float_sub float_rot integer_sub float_inc integer_swap integer_min print_float)
Errors: [22.9957 8 22.0 2 8.9957 8 30.0 1 14.0 2 5.9957 9 28.0043 7 10.0 1 27.0043 8 19.0 2 0.0 0 10.0043 7 19.0 2 3.0 1 23.0 2 0.0043 6 0.0 0 28.0 10 30.9957 9 12.0 1 21.0 2 18.0 2 5.0 2 3.0043 6 4.0 1]
Total: 464.0043
Mean: 9.280086
Genome size: 152
Size: 153
Percent parens: 0.007
--- Population Statistics ---
Average total errors in population: 2763.6191744999996
Median total errors in population: 970.1040499999999
Error averages by case: (130.61906709999988 10.008 102.86724439999998 3.923 112.52253109999981 6.65 115.5787841 3.429 96.87847320000003 3.565 132.93357779999982 7.827 113.08469480000024 6.128 81.88907230000007 3.971 111.17206460000016 6.807 96.77544600000014 3.774 86.9823364000001 2.566 125.08498060000005 7.344 94.8767448 3.491 84.26659629999999 2.962 115.47825559999988 3.73 117.1019235999999 7.373 80.24301330000002 4.142 112.15426320000005 9.975 135.75741909999985 10.834 78.53837559999995 2.746 109.2957982000001 3.918 93.44527120000008 3.503 85.37946200000006 3.145 127.58479080000022 6.425 91.65798839999992 3.215)
Error minima by case: (4.9957 7 0.2433 1 0.0043 1 18.0 1 1.0 1 0.0043 2 3.0E-4 1 0.0 0 1.0043 1 0.0 0 0.0 0 1.0043 1 0.0 0 0.0 0 10.0 1 0.0043 1 0.0 0 0.0025 7 2.8255 8 0.0 0 4.1888 1 0.0 0 0.0 0 0.0043 1 0.0 0)
Average genome size in population (length): 147.849
Average program size in population (points): 148.849
Average percent parens in population: 0.007
Minimum age in population: 238.5412795161788
Maximum age in population: 242.7268162777465
Average age in population: 240.5025704604919
Median age in population: 240.5253544266099
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 5
Genome diversity (% unique Plush genomes):	 0.944
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 5
Syntactic diversity (% unique Push programs):	 0.944
Total error diversity:				 0.574
Error (vector) diversity:			 0.691
Behavioral diversity:				 0.692
--- Run Statistics ---
Number of program evaluations used so far: 178000
Number of point (instruction) evaluations so far: 478350791
--- Timings ---
Current time: 1529616735133 milliseconds
Total Time:         799.2 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       241.2 seconds, 30.2%
Fitness Testing:    445.1 seconds, 55.7%
Report:             112.8 seconds, 14.1%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 177
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 178
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 178
;;******************************
;; -*- Number IO problem report - generation 178
Test total error for best: 22330.9312
Test mean error for best: 11.16547
;;------------------------------
Outputs of best individual on training cases:
Correct output: -74.6179542037 | Program output: -51.6222543847
Correct output: 78.7609586813  | Program output: 52.7609586813 
Correct output: 3.0100598709   | Program output: 12.0057596899 
Correct output: -99.2368061293 | Program output: -70.2368061293
Correct output: 88.6808415603  | Program output: 70.6808415603 
Correct output: -151.1060419578 | Program output: -145.1103421388
Correct output: 56.004616184   | Program output: 28.000316003  
Correct output: 33.520660154   | Program output: 39.520660154  
Correct output: 42.238861085   | Program output: 15.2345609041 
Correct output: -49.0227893765 | Program output: -43.0227893765
Correct output: 103.4057483059 | Program output: 104.4057483059
Correct output: -106.1378273779 | Program output: -116.1421275589
Correct output: 37.9625599991  | Program output: 20.9625599991 
Correct output: 71.9208193203  | Program output: 75.9208193203 
Correct output: 173.5348464317 | Program output: 146.5348464317
Correct output: -77.0615185935 | Program output: -77.0658187744
Correct output: -20.7643622555 | Program output: -19.7643622555
Correct output: 1.9827630815   | Program output: -30.0172369185
Correct output: -39.1198682611 | Program output: -8.124168442  
Correct output: 1.1392376036   | Program output: 12.1392376036 
Correct output: 129.1930977679 | Program output: 104.1930977679
Correct output: 26.7496211861  | Program output: 10.7496211861 
Correct output: -11.2984801384 | Program output: -10.2984801384
Correct output: -136.1442960385 | Program output: -139.1485962195
Correct output: 143.0911996605 | Program output: 143.0911996605
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_mod} {:instruction integer_dup_times} {:instruction integer_max} {:instruction integer_max} {:instruction float_inc} {:instruction integer_max} {:instruction in2} {:instruction float_pop} {:instruction integer_mod} {:instruction integer_swap} {:instruction float_flush} {:instruction float_pop} {:instruction integer_max} {:instruction -68} {:instruction in1} {:instruction in1} {:instruction float_stackdepth} {:instruction in2} {:instruction integer_add} {:instruction integer_add} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_add} {:instruction float_inc} {:instruction integer_max} {:instruction float_inc} {:instruction integer_add} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_add} {:instruction float_inc} {:instruction integer_add} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_add} {:instruction float_inc} {:instruction float_inc} {:instruction integer_sub} {:instruction float_inc} {:instruction float_inc} {:instruction integer_add} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_add} {:instruction integer_min} {:instruction float_inc} {:instruction integer_sub} {:instruction float_inc} {:instruction float_inc} {:instruction integer_add} {:instruction float_inc} {:instruction float_inc} {:instruction integer_add} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_dup_times} {:instruction integer_add} {:instruction float_inc} {:instruction float_inc} {:instruction integer_max} {:instruction integer_swap} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_dup_times} {:instruction float_rot} {:instruction float_stackdepth} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_min} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_dup_times} {:instruction float_inc} {:instruction integer_add} {:instruction float_inc} {:instruction float_inc} {:instruction integer_max} {:instruction integer_swap} {:instruction float_dup} {:instruction integer_dup_times} {:instruction 25} {:instruction float_stackdepth} {:instruction tagged_534} {:instruction float_dup_times} {:instruction float_yank} {:instruction float_inc} {:instruction integer_add} {:instruction integer_yankdup} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_add} {:instruction integer_yankdup} {:instruction float_inc} {:instruction integer_max} {:instruction float_dup_times} {:instruction integer_max} {:instruction float_dup_times} {:instruction float_max} {:instruction float_dup_times} {:instruction float_stackdepth} {:instruction float_inc} {:instruction float_inc} {:instruction float_dup_times} {:instruction float_yank} {:instruction float_rot} {:instruction 25} {:instruction in2} {:instruction integer_add} {:instruction integer_yank} {:instruction float_dup_times} {:instruction float_dec} {:instruction in1} {:instruction 78.00430018095415} {:instruction float_rot} {:instruction float_dup_times} {:instruction float_rot} {:instruction integer_yankdup} {:instruction integer_add} {:instruction float_dec} {:instruction float_inc} {:instruction float_sub} {:instruction float_rot} {:instruction integer_shove} {:instruction float_rot} {:instruction float_sub} {:instruction float_rot} {:instruction integer_sub} {:instruction float_inc} {:instruction integer_swap} {:instruction integer_min} {:instruction integer_swap} {:instruction integer_min} {:instruction print_float} {:instruction integer_pop} {:instruction float_pop})
Best program: (float_mod integer_dup_times integer_max integer_max float_inc integer_max in2 float_pop integer_mod integer_swap float_flush float_pop integer_max -68 in1 in1 float_stackdepth in2 integer_add integer_add float_inc float_inc float_inc float_inc float_inc integer_add float_inc integer_max float_inc integer_add float_inc float_inc float_inc float_inc float_inc float_inc integer_add float_inc integer_add float_inc float_inc float_inc float_inc integer_add float_inc float_inc integer_sub float_inc float_inc integer_add float_inc float_inc float_inc float_inc float_inc integer_add integer_min float_inc integer_sub float_inc float_inc integer_add float_inc float_inc integer_add float_inc float_inc float_inc integer_dup_times integer_add float_inc float_inc integer_max integer_swap float_inc float_inc float_inc float_dup_times float_rot float_stackdepth float_inc float_inc float_inc integer_min float_inc float_inc float_inc integer_dup_times float_inc integer_add float_inc float_inc integer_max integer_swap float_dup integer_dup_times 25 float_stackdepth tagged_534 float_dup_times float_yank float_inc integer_add integer_yankdup float_inc float_inc float_inc float_inc integer_add integer_yankdup float_inc integer_max float_dup_times integer_max float_dup_times float_max float_dup_times float_stackdepth float_inc float_inc float_dup_times float_yank float_rot 25 in2 integer_add integer_yank float_dup_times float_dec in1 78.00430018095415 float_rot float_dup_times float_rot integer_yankdup integer_add float_dec float_inc float_sub float_rot integer_shove float_rot float_sub float_rot integer_sub float_inc integer_swap integer_min integer_swap integer_min print_float integer_pop float_pop)
Errors: [22.9957 8 26.0 2 8.9957 8 29.0 2 18.0 2 5.9957 9 28.0043 7 6.0 1 27.0043 8 6.0 1 1.0 1 10.0043 7 17.0 2 4.0 1 27.0 2 0.0043 6 1.0 2 32.0 10 30.9957 9 11.0 1 25.0 2 16.0 2 1.0 1 3.0043 6 0.0 0]
Total: 457.0043
Mean: 9.140086
Genome size: 153
Size: 154
Percent parens: 0.006
--- Population Statistics ---
Average total errors in population: 3107.028819
Median total errors in population: 943.9914
Error averages by case: (138.30316279999985 9.974 115.52543080000001 4.132 119.90826819999981 6.991 128.81865489999996 3.612 112.93037570000004 3.703 139.88258469999985 7.995 123.47908170000025 6.344 98.43281760000005 4.125 120.99323240000021 7.042 116.04045950000013 3.956 105.3496199000001 2.693 132.49745900000008 7.487 112.12218790000003 3.703 100.45001960000003 3.046 133.37762979999985 3.946 125.70384669999996 7.419 97.87193490000004 4.35 129.1071340000001 10.092 141.0841537999999 10.807 95.00742010000002 2.942 127.08269800000008 4.112 107.20507379999998 3.686 104.39772340000007 3.388 134.76611810000023 6.589 111.10973169999995 3.448)
Error minima by case: (1.4173 3 0.2433 1 0.0043 1 14.0 1 0.6801 1 0.0043 1 1.0043 1 0.0 0 0.0043 1 0.0 0 0.0 0 1.0043 1 0.0 0 0.0 0 6.9957 1 0.0043 1 0.0 0 0.0172 2 4.2684 2 0.0 0 4.9957 1 0.0 0 0.0 0 0.0043 1 0.0 0)
Average genome size in population (length): 147.535
Average program size in population (points): 148.535
Average percent parens in population: 0.007
Minimum age in population: 239.9337913486127
Maximum age in population: 243.8662078527001
Average age in population: 241.8024232960259
Median age in population: 241.8251804939465
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 9
Genome diversity (% unique Plush genomes):	 0.95
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 9
Syntactic diversity (% unique Push programs):	 0.95
Total error diversity:				 0.607
Error (vector) diversity:			 0.743
Behavioral diversity:				 0.744
--- Run Statistics ---
Number of program evaluations used so far: 179000
Number of point (instruction) evaluations so far: 482039241
--- Timings ---
Current time: 1529616740583 milliseconds
Total Time:         804.7 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       242.6 seconds, 30.1%
Fitness Testing:    448.4 seconds, 55.7%
Report:             113.7 seconds, 14.1%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 178
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 179
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 179
;;******************************
;; -*- Number IO problem report - generation 179
Test total error for best: 22330.9312
Test mean error for best: 11.16547
;;------------------------------
Outputs of best individual on training cases:
Correct output: -74.6179542037 | Program output: -51.6222543847
Correct output: 78.7609586813  | Program output: 52.7609586813 
Correct output: 3.0100598709   | Program output: 12.0057596899 
Correct output: -99.2368061293 | Program output: -70.2368061293
Correct output: 88.6808415603  | Program output: 70.6808415603 
Correct output: -151.1060419578 | Program output: -145.1103421388
Correct output: 56.004616184   | Program output: 28.000316003  
Correct output: 33.520660154   | Program output: 39.520660154  
Correct output: 42.238861085   | Program output: 15.2345609041 
Correct output: -49.0227893765 | Program output: -43.0227893765
Correct output: 103.4057483059 | Program output: 104.4057483059
Correct output: -106.1378273779 | Program output: -116.1421275589
Correct output: 37.9625599991  | Program output: 20.9625599991 
Correct output: 71.9208193203  | Program output: 75.9208193203 
Correct output: 173.5348464317 | Program output: 146.5348464317
Correct output: -77.0615185935 | Program output: -77.0658187744
Correct output: -20.7643622555 | Program output: -19.7643622555
Correct output: 1.9827630815   | Program output: -30.0172369185
Correct output: -39.1198682611 | Program output: -8.124168442  
Correct output: 1.1392376036   | Program output: 12.1392376036 
Correct output: 129.1930977679 | Program output: 104.1930977679
Correct output: 26.7496211861  | Program output: 10.7496211861 
Correct output: -11.2984801384 | Program output: -10.2984801384
Correct output: -136.1442960385 | Program output: -139.1485962195
Correct output: 143.0911996605 | Program output: 143.0911996605
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_mod} {:instruction integer_dup_times} {:instruction integer_max} {:instruction integer_max} {:instruction float_inc} {:instruction integer_max} {:instruction in2} {:instruction float_pop} {:instruction integer_mod} {:instruction integer_swap} {:instruction float_flush} {:instruction float_pop} {:instruction integer_max} {:instruction -68} {:instruction in1} {:instruction in1} {:instruction float_stackdepth} {:instruction in2} {:instruction integer_add} {:instruction integer_add} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_add} {:instruction float_inc} {:instruction integer_max} {:instruction float_inc} {:instruction integer_add} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_add} {:instruction float_inc} {:instruction integer_add} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_add} {:instruction float_inc} {:instruction float_inc} {:instruction integer_sub} {:instruction float_inc} {:instruction float_inc} {:instruction integer_add} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_add} {:instruction integer_min} {:instruction float_inc} {:instruction integer_sub} {:instruction float_inc} {:instruction float_inc} {:instruction integer_add} {:instruction float_inc} {:instruction float_inc} {:instruction integer_add} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_dup_times} {:instruction integer_add} {:instruction float_inc} {:instruction float_inc} {:instruction integer_max} {:instruction integer_swap} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_dup_times} {:instruction float_rot} {:instruction float_stackdepth} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_min} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_dup_times} {:instruction float_inc} {:instruction integer_add} {:instruction float_inc} {:instruction float_inc} {:instruction integer_max} {:instruction integer_swap} {:instruction float_dup} {:instruction integer_dup_times} {:instruction 25} {:instruction float_stackdepth} {:instruction tagged_534} {:instruction float_dup_times} {:instruction float_yank} {:instruction float_inc} {:instruction integer_add} {:instruction integer_yankdup} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_add} {:instruction integer_yankdup} {:instruction float_inc} {:instruction integer_max} {:instruction float_dup_times} {:instruction integer_max} {:instruction float_dup_times} {:instruction float_max} {:instruction float_dup_times} {:instruction float_stackdepth} {:instruction float_inc} {:instruction float_inc} {:instruction float_dup_times} {:instruction float_yank} {:instruction float_rot} {:instruction 25} {:instruction in2} {:instruction integer_add} {:instruction integer_yank} {:instruction float_dup_times} {:instruction float_dec} {:instruction in1} {:instruction 78.00430018095415} {:instruction float_rot} {:instruction float_dup_times} {:instruction float_rot} {:instruction integer_yankdup} {:instruction integer_add} {:instruction float_dec} {:instruction float_inc} {:instruction float_sub} {:instruction float_rot} {:instruction integer_shove} {:instruction float_rot} {:instruction float_sub} {:instruction float_rot} {:instruction integer_sub} {:instruction float_inc} {:instruction integer_swap} {:instruction integer_min} {:instruction integer_swap} {:instruction integer_min} {:instruction print_float} {:instruction integer_pop} {:instruction float_pop})
Best program: (float_mod integer_dup_times integer_max integer_max float_inc integer_max in2 float_pop integer_mod integer_swap float_flush float_pop integer_max -68 in1 in1 float_stackdepth in2 integer_add integer_add float_inc float_inc float_inc float_inc float_inc integer_add float_inc integer_max float_inc integer_add float_inc float_inc float_inc float_inc float_inc float_inc integer_add float_inc integer_add float_inc float_inc float_inc float_inc integer_add float_inc float_inc integer_sub float_inc float_inc integer_add float_inc float_inc float_inc float_inc float_inc integer_add integer_min float_inc integer_sub float_inc float_inc integer_add float_inc float_inc integer_add float_inc float_inc float_inc integer_dup_times integer_add float_inc float_inc integer_max integer_swap float_inc float_inc float_inc float_dup_times float_rot float_stackdepth float_inc float_inc float_inc integer_min float_inc float_inc float_inc integer_dup_times float_inc integer_add float_inc float_inc integer_max integer_swap float_dup integer_dup_times 25 float_stackdepth tagged_534 float_dup_times float_yank float_inc integer_add integer_yankdup float_inc float_inc float_inc float_inc integer_add integer_yankdup float_inc integer_max float_dup_times integer_max float_dup_times float_max float_dup_times float_stackdepth float_inc float_inc float_dup_times float_yank float_rot 25 in2 integer_add integer_yank float_dup_times float_dec in1 78.00430018095415 float_rot float_dup_times float_rot integer_yankdup integer_add float_dec float_inc float_sub float_rot integer_shove float_rot float_sub float_rot integer_sub float_inc integer_swap integer_min integer_swap integer_min print_float integer_pop float_pop)
Errors: [22.9957 8 26.0 2 8.9957 8 29.0 2 18.0 2 5.9957 9 28.0043 7 6.0 1 27.0043 8 6.0 1 1.0 1 10.0043 7 17.0 2 4.0 1 27.0 2 0.0043 6 1.0 2 32.0 10 30.9957 9 11.0 1 25.0 2 16.0 2 1.0 1 3.0043 6 0.0 0]
Total: 457.0043
Mean: 9.140086
Genome size: 153
Size: 154
Percent parens: 0.006
--- Population Statistics ---
Average total errors in population: 3013.6697821999996
Median total errors in population: 1017.5
Error averages by case: (144.32589839999977 10.098 108.40396549999997 4.152 125.25513319999986 6.733 125.80124649999995 3.689 105.9376732 3.74 146.1772763999999 7.814 125.77819850000026 6.213 88.15831219999995 4.128 123.85533840000015 6.831 107.01639010000018 3.996 95.85711670000013 2.754 137.92198780000007 7.369 101.01403230000001 3.697 88.68610040000003 2.994 127.7088854999998 3.914 130.43706939999987 7.415 89.50709159999997 4.702 119.63717600000004 10.021 148.77790739999986 10.939 82.72709970000005 2.98 120.66857100000011 4.101 94.94145509999997 3.714 95.41538640000005 3.475 140.70295790000029 6.489 103.57651259999994 3.423)
Error minima by case: (4.9957 7 0.2433 1 0.0043 1 7.0043 1 1.3192 1 0.0043 2 3.9997 1 0.0 0 0.3982 1 0.0 0 0.0 0 0.9957 1 0.0 0 0.0 0 15.0 1 0.0043 1 0.0 0 0.0129 7 1.8913 8 0.0 0 0.8069 1 0.0 0 0.0 0 0.0043 1 0.0 0)
Average genome size in population (length): 147.809
Average program size in population (points): 148.809
Average percent parens in population: 0.007
Minimum age in population: 241.0838945950594
Maximum age in population: 245.1015923378143
Average age in population: 243.1695638449534
Median age in population: 243.2143253037566
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 7
Genome diversity (% unique Plush genomes):	 0.958
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 7
Syntactic diversity (% unique Push programs):	 0.958
Total error diversity:				 0.657
Error (vector) diversity:			 0.776
Behavioral diversity:				 0.776
--- Run Statistics ---
Number of program evaluations used so far: 180000
Number of point (instruction) evaluations so far: 485734591
--- Timings ---
Current time: 1529616746042 milliseconds
Total Time:         810.2 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       244.0 seconds, 30.1%
Fitness Testing:    451.6 seconds, 55.7%
Report:             114.4 seconds, 14.1%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 179
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 180
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 180
;;******************************
;; -*- Number IO problem report - generation 180
Test total error for best: 21782.982800000005
Test mean error for best: 10.89149
;;------------------------------
Outputs of best individual on training cases:
Correct output: -74.6179542037 | Program output: -52.6222543847
Correct output: 78.7609586813  | Program output: 55.7609586813 
Correct output: 3.0100598709   | Program output: 11.0057596899 
Correct output: -99.2368061293 | Program output: -70.2368061293
Correct output: 88.6808415603  | Program output: 73.6808415603 
Correct output: -151.1060419578 | Program output: -146.1103421388
Correct output: 56.004616184   | Program output: 27.000316003  
Correct output: 33.520660154   | Program output: 33.520660154  
Correct output: 42.238861085   | Program output: 14.2345609041 
Correct output: -49.0227893765 | Program output: -40.0227893765
Correct output: 103.4057483059 | Program output: 104.4057483059
Correct output: -106.1378273779 | Program output: -117.1421275589
Correct output: 37.9625599991  | Program output: 20.9625599991 
Correct output: 71.9208193203  | Program output: 75.9208193203 
Correct output: 173.5348464317 | Program output: 149.5348464317
Correct output: -77.0615185935 | Program output: -78.0658187744
Correct output: -20.7643622555 | Program output: -19.7643622555
Correct output: 1.9827630815   | Program output: -27.0172369185
Correct output: -39.1198682611 | Program output: -9.124168442  
Correct output: 1.1392376036   | Program output: 12.1392376036 
Correct output: 129.1930977679 | Program output: 107.1930977679
Correct output: 26.7496211861  | Program output: 10.7496211861 
Correct output: -11.2984801384 | Program output: -7.2984801384 
Correct output: -136.1442960385 | Program output: -140.1485962195
Correct output: 143.0911996605 | Program output: 146.0911996605
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_mod} {:instruction integer_dup_times} {:instruction integer_max} {:instruction integer_max} {:instruction float_inc} {:instruction float_max} {:instruction in2} {:instruction float_pop} {:instruction integer_mod} {:instruction float_flush} {:instruction float_pop} {:instruction integer_max} {:instruction integer_flush} {:instruction in1} {:instruction in1} {:instruction float_stackdepth} {:instruction in2} {:instruction integer_add} {:instruction integer_add} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_add} {:instruction float_inc} {:instruction integer_max} {:instruction float_inc} {:instruction integer_add} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_add} {:instruction float_inc} {:instruction integer_add} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_add} {:instruction float_inc} {:instruction float_inc} {:instruction integer_sub} {:instruction float_inc} {:instruction float_inc} {:instruction integer_add} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_add} {:instruction integer_min} {:instruction float_inc} {:instruction integer_sub} {:instruction float_inc} {:instruction float_inc} {:instruction integer_add} {:instruction float_inc} {:instruction float_inc} {:instruction integer_mult} {:instruction float_inc} {:instruction -32} {:instruction integer_add} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_add} {:instruction float_inc} {:instruction float_inc} {:instruction integer_max} {:instruction integer_swap} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_max} {:instruction integer_swap} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_dup_times} {:instruction float_rot} {:instruction float_stackdepth} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_add} {:instruction float_inc} {:instruction float_inc} {:instruction integer_max} {:instruction float_inc} {:instruction float_dup} {:instruction integer_dup_times} {:instruction 25} {:instruction float_stackdepth} {:instruction float_inc} {:instruction float_dup_times} {:instruction float_yank} {:instruction float_inc} {:instruction integer_add} {:instruction integer_yankdup} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_add} {:instruction integer_yankdup} {:instruction float_inc} {:instruction integer_max} {:instruction float_dup_times} {:instruction float_max} {:instruction float_dup_times} {:instruction float_stackdepth} {:instruction float_inc} {:instruction float_inc} {:instruction float_dup_times} {:instruction float_yank} {:instruction float_rot} {:instruction 25} {:instruction in2} {:instruction integer_add} {:instruction integer_yank} {:instruction float_dup_times} {:instruction float_dec} {:instruction in1} {:instruction 78.00430018095415} {:instruction float_rot} {:instruction float_dup_times} {:instruction float_rot} {:instruction integer_yankdup} {:instruction integer_add} {:instruction float_dec} {:instruction float_inc} {:instruction float_sub} {:instruction float_rot} {:instruction integer_shove} {:instruction float_rot} {:instruction float_sub} {:instruction float_rot} {:instruction integer_sub} {:instruction float_inc} {:instruction integer_swap} {:instruction integer_min} {:instruction print_float} {:instruction integer_pop} {:instruction float_pop})
Best program: (float_mod integer_dup_times integer_max integer_max float_inc float_max in2 float_pop integer_mod float_flush float_pop integer_max integer_flush in1 in1 float_stackdepth in2 integer_add integer_add float_inc float_inc float_inc integer_add float_inc integer_max float_inc integer_add float_inc float_inc float_inc float_inc float_inc float_inc integer_add float_inc integer_add float_inc float_inc float_inc float_inc integer_add float_inc float_inc integer_sub float_inc float_inc integer_add float_inc float_inc float_inc float_inc float_inc integer_add integer_min float_inc integer_sub float_inc float_inc integer_add float_inc float_inc integer_mult float_inc -32 integer_add float_inc float_inc float_inc float_inc integer_add float_inc float_inc integer_max integer_swap float_inc float_inc float_inc integer_max integer_swap float_inc float_inc float_inc float_dup_times float_rot float_stackdepth float_inc float_inc float_inc float_inc float_inc integer_add float_inc float_inc integer_max float_inc float_dup integer_dup_times 25 float_stackdepth float_inc float_dup_times float_yank float_inc integer_add integer_yankdup float_inc float_inc float_inc float_inc integer_add integer_yankdup float_inc integer_max float_dup_times float_max float_dup_times float_stackdepth float_inc float_inc float_dup_times float_yank float_rot 25 in2 integer_add integer_yank float_dup_times float_dec in1 78.00430018095415 float_rot float_dup_times float_rot integer_yankdup integer_add float_dec float_inc float_sub float_rot integer_shove float_rot float_sub float_rot integer_sub float_inc integer_swap integer_min print_float integer_pop float_pop)
Errors: [21.9957 8 23.0 2 7.9957 8 29.0 2 15.0 2 4.9957 9 29.0043 7 0.0 0 28.0043 8 9.0 1 1.0 1 11.0043 8 17.0 2 4.0 1 24.0 2 1.0043 7 1.0 2 29.0 10 29.9957 8 11.0 1 22.0 2 16.0 2 4.0 2 4.0043 7 3.0 1]
Total: 449.0043
Mean: 8.980086
Genome size: 150
Size: 151
Percent parens: 0.007
--- Population Statistics ---
Average total errors in population: 2556.2757995
Median total errors in population: 944.0
Error averages by case: (119.42517589999986 10.011 93.99582610000003 3.935 103.58716639999982 6.711 105.10798459999998 3.447 92.04976090000007 3.577 117.96900639999988 7.73 104.02910700000025 6.107 74.3460199 4.156 102.93928870000019 6.799 90.72129740000013 3.765 80.7787689000001 2.601 110.15148930000007 7.248 85.1589257 3.533 76.71983180000004 2.868 111.04843359999988 3.806 104.02840199999989 7.336 73.70564480000004 4.372 108.04942100000008 10.088 123.70626619999987 10.847 77.7530015 2.79 104.60933620000009 3.977 81.90268620000005 3.526 82.25270260000005 3.314 112.5727689000002 6.326 87.47948749999996 3.318)
Error minima by case: (0.381 7 0.239 1 0.0043 1 11.2368 1 0.3192 1 0.0043 1 0.0043 1 0.0 0 0.9957 1 0.0 0 0.0 0 0.0043 1 0.0 0 0.0 0 15.0 1 0.0043 1 0.0 0 0.0172 7 4.5004 8 0.1392 1 1.7304 1 0.0 0 0.0 0 0.0043 1 0.0 0)
Average genome size in population (length): 147.285
Average program size in population (points): 148.285
Average percent parens in population: 0.007
Minimum age in population: 242.6017206866878
Maximum age in population: 246.5825940613143
Average age in population: 244.4896703615669
Median age in population: 244.5044201167211
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 4
Genome diversity (% unique Plush genomes):	 0.959
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 4
Syntactic diversity (% unique Push programs):	 0.959
Total error diversity:				 0.624
Error (vector) diversity:			 0.765
Behavioral diversity:				 0.766
--- Run Statistics ---
Number of program evaluations used so far: 181000
Number of point (instruction) evaluations so far: 489416841
--- Timings ---
Current time: 1529616751442 milliseconds
Total Time:         815.6 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       245.4 seconds, 30.1%
Fitness Testing:    454.9 seconds, 55.8%
Report:             115.2 seconds, 14.1%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 180
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 181
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 181
;;******************************
;; -*- Number IO problem report - generation 181
Test total error for best: 21782.982800000005
Test mean error for best: 10.89149
;;------------------------------
Outputs of best individual on training cases:
Correct output: -74.6179542037 | Program output: -52.6222543847
Correct output: 78.7609586813  | Program output: 55.7609586813 
Correct output: 3.0100598709   | Program output: 11.0057596899 
Correct output: -99.2368061293 | Program output: -70.2368061293
Correct output: 88.6808415603  | Program output: 73.6808415603 
Correct output: -151.1060419578 | Program output: -146.1103421388
Correct output: 56.004616184   | Program output: 27.000316003  
Correct output: 33.520660154   | Program output: 33.520660154  
Correct output: 42.238861085   | Program output: 14.2345609041 
Correct output: -49.0227893765 | Program output: -40.0227893765
Correct output: 103.4057483059 | Program output: 104.4057483059
Correct output: -106.1378273779 | Program output: -117.1421275589
Correct output: 37.9625599991  | Program output: 20.9625599991 
Correct output: 71.9208193203  | Program output: 75.9208193203 
Correct output: 173.5348464317 | Program output: 149.5348464317
Correct output: -77.0615185935 | Program output: -78.0658187744
Correct output: -20.7643622555 | Program output: -19.7643622555
Correct output: 1.9827630815   | Program output: -27.0172369185
Correct output: -39.1198682611 | Program output: -9.124168442  
Correct output: 1.1392376036   | Program output: 12.1392376036 
Correct output: 129.1930977679 | Program output: 107.1930977679
Correct output: 26.7496211861  | Program output: 10.7496211861 
Correct output: -11.2984801384 | Program output: -7.2984801384 
Correct output: -136.1442960385 | Program output: -140.1485962195
Correct output: 143.0911996605 | Program output: 146.0911996605
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_mod} {:instruction integer_dup_times} {:instruction integer_max} {:instruction integer_max} {:instruction float_inc} {:instruction float_max} {:instruction in2} {:instruction float_pop} {:instruction integer_mod} {:instruction float_flush} {:instruction float_pop} {:instruction integer_max} {:instruction integer_flush} {:instruction in1} {:instruction in1} {:instruction float_stackdepth} {:instruction in2} {:instruction integer_add} {:instruction integer_add} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_add} {:instruction float_inc} {:instruction integer_max} {:instruction float_inc} {:instruction integer_add} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_add} {:instruction float_inc} {:instruction integer_add} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_add} {:instruction float_inc} {:instruction float_inc} {:instruction integer_sub} {:instruction float_inc} {:instruction float_inc} {:instruction integer_add} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_add} {:instruction integer_min} {:instruction float_inc} {:instruction integer_sub} {:instruction float_inc} {:instruction float_inc} {:instruction integer_add} {:instruction float_inc} {:instruction float_inc} {:instruction integer_mult} {:instruction float_inc} {:instruction -32} {:instruction integer_add} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_add} {:instruction float_inc} {:instruction float_inc} {:instruction integer_max} {:instruction integer_swap} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_max} {:instruction integer_swap} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_dup_times} {:instruction float_rot} {:instruction float_stackdepth} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_add} {:instruction float_inc} {:instruction float_inc} {:instruction integer_max} {:instruction float_inc} {:instruction float_dup} {:instruction integer_dup_times} {:instruction 25} {:instruction float_stackdepth} {:instruction float_inc} {:instruction float_dup_times} {:instruction float_yank} {:instruction float_inc} {:instruction integer_add} {:instruction integer_yankdup} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_add} {:instruction integer_yankdup} {:instruction float_inc} {:instruction integer_max} {:instruction float_dup_times} {:instruction float_max} {:instruction float_dup_times} {:instruction float_stackdepth} {:instruction float_inc} {:instruction float_inc} {:instruction float_dup_times} {:instruction float_yank} {:instruction float_rot} {:instruction 25} {:instruction in2} {:instruction integer_add} {:instruction integer_yank} {:instruction float_dup_times} {:instruction float_dec} {:instruction in1} {:instruction 78.00430018095415} {:instruction float_rot} {:instruction float_dup_times} {:instruction float_rot} {:instruction integer_yankdup} {:instruction integer_add} {:instruction float_dec} {:instruction float_inc} {:instruction float_sub} {:instruction float_rot} {:instruction integer_shove} {:instruction float_rot} {:instruction float_sub} {:instruction float_rot} {:instruction integer_sub} {:instruction float_inc} {:instruction integer_swap} {:instruction integer_min} {:instruction print_float} {:instruction integer_pop} {:instruction float_pop})
Best program: (float_mod integer_dup_times integer_max integer_max float_inc float_max in2 float_pop integer_mod float_flush float_pop integer_max integer_flush in1 in1 float_stackdepth in2 integer_add integer_add float_inc float_inc float_inc integer_add float_inc integer_max float_inc integer_add float_inc float_inc float_inc float_inc float_inc float_inc integer_add float_inc integer_add float_inc float_inc float_inc float_inc integer_add float_inc float_inc integer_sub float_inc float_inc integer_add float_inc float_inc float_inc float_inc float_inc integer_add integer_min float_inc integer_sub float_inc float_inc integer_add float_inc float_inc integer_mult float_inc -32 integer_add float_inc float_inc float_inc float_inc integer_add float_inc float_inc integer_max integer_swap float_inc float_inc float_inc integer_max integer_swap float_inc float_inc float_inc float_dup_times float_rot float_stackdepth float_inc float_inc float_inc float_inc float_inc integer_add float_inc float_inc integer_max float_inc float_dup integer_dup_times 25 float_stackdepth float_inc float_dup_times float_yank float_inc integer_add integer_yankdup float_inc float_inc float_inc float_inc integer_add integer_yankdup float_inc integer_max float_dup_times float_max float_dup_times float_stackdepth float_inc float_inc float_dup_times float_yank float_rot 25 in2 integer_add integer_yank float_dup_times float_dec in1 78.00430018095415 float_rot float_dup_times float_rot integer_yankdup integer_add float_dec float_inc float_sub float_rot integer_shove float_rot float_sub float_rot integer_sub float_inc integer_swap integer_min print_float integer_pop float_pop)
Errors: [21.9957 8 23.0 2 7.9957 8 29.0 2 15.0 2 4.9957 9 29.0043 7 0.0 0 28.0043 8 9.0 1 1.0 1 11.0043 8 17.0 2 4.0 1 24.0 2 1.0043 7 1.0 2 29.0 10 29.9957 8 11.0 1 22.0 2 16.0 2 4.0 2 4.0043 7 3.0 1]
Total: 449.0043
Mean: 8.980086
Genome size: 150
Size: 151
Percent parens: 0.007
--- Population Statistics ---
Average total errors in population: 3100.3014123
Median total errors in population: 947.5
Error averages by case: (140.46293359999981 10.032 117.60746059999998 3.904 124.10983739999982 6.92 130.02846389999993 3.638 114.12903630000004 3.633 144.56730199999984 8.012 124.02335160000025 6.392 97.18611640000003 3.926 123.7078213000002 7.001 111.82976620000012 3.766 102.2841417000001 2.705 136.35402680000004 7.564 105.75578180000001 3.517 91.33984360000004 3.028 132.23676899999987 3.839 129.26608119999992 7.593 95.16019079999995 4.457 127.71651820000005 10.154 145.12469019999972 10.913 93.62636919999997 2.973 126.41189310000006 4.0 101.08677099999998 3.449 103.13398740000002 3.386 139.16333460000016 6.64 109.20792439999991 3.339)
Error minima by case: (0.382 7 0.2433 1 0.0043 1 7.2368 1 1.6808 1 0.0043 2 0.9957 1 0.0 0 0.0043 1 0.0 0 0.0 0 0.9957 1 0.0 0 0.0 0 4.4652 1 0.0043 1 0.0 0 0.0172 8 1.8844 8 0.1392 1 4.1931 1 0.0 0 0.0 0 0.0043 1 0.0 0)
Average genome size in population (length): 147.317
Average program size in population (points): 148.317
Average percent parens in population: 0.007
Minimum age in population: 243.6799310811225
Maximum age in population: 248.3196537158347
Average age in population: 245.777122409817
Median age in population: 245.824044300132
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 5
Genome diversity (% unique Plush genomes):	 0.967
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 5
Syntactic diversity (% unique Push programs):	 0.967
Total error diversity:				 0.647
Error (vector) diversity:			 0.802
Behavioral diversity:				 0.802
--- Run Statistics ---
Number of program evaluations used so far: 182000
Number of point (instruction) evaluations so far: 493099816
--- Timings ---
Current time: 1529616756902 milliseconds
Total Time:         821.1 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       246.9 seconds, 30.1%
Fitness Testing:    458.1 seconds, 55.8%
Report:             116.0 seconds, 14.1%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 181
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 182
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 182
;;******************************
;; -*- Number IO problem report - generation 182
Test total error for best: 22035.034400000004
Test mean error for best: 11.01752
;;------------------------------
Outputs of best individual on training cases:
Correct output: -74.6179542037 | Program output: -54.6222543847
Correct output: 78.7609586813  | Program output: 53.7609586813 
Correct output: 3.0100598709   | Program output: 9.0057596899  
Correct output: -99.2368061293 | Program output: -72.2368061293
Correct output: 88.6808415603  | Program output: 71.6808415603 
Correct output: -151.1060419578 | Program output: -148.1103421388
Correct output: 56.004616184   | Program output: 25.000316003  
Correct output: 33.520660154   | Program output: 33.520660154  
Correct output: 42.238861085   | Program output: 12.2345609041 
Correct output: -49.0227893765 | Program output: -40.0227893765
Correct output: 103.4057483059 | Program output: 102.4057483059
Correct output: -106.1378273779 | Program output: -119.1421275589
Correct output: 37.9625599991  | Program output: 18.9625599991 
Correct output: 71.9208193203  | Program output: 73.9208193203 
Correct output: 173.5348464317 | Program output: 147.5348464317
Correct output: -77.0615185935 | Program output: -80.0658187744
Correct output: -20.7643622555 | Program output: -21.7643622555
Correct output: 1.9827630815   | Program output: -29.0172369185
Correct output: -39.1198682611 | Program output: -11.124168442 
Correct output: 1.1392376036   | Program output: 10.1392376036 
Correct output: 129.1930977679 | Program output: 105.1930977679
Correct output: 26.7496211861  | Program output: 8.7496211861  
Correct output: -11.2984801384 | Program output: -9.2984801384 
Correct output: -136.1442960385 | Program output: -142.1485962195
Correct output: 143.0911996605 | Program output: 144.0911996605
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_mod} {:instruction integer_dup_times} {:instruction integer_max} {:instruction integer_max} {:instruction float_inc} {:instruction float_max} {:instruction in2} {:instruction float_pop} {:instruction integer_mod} {:instruction float_flush} {:instruction float_pop} {:instruction integer_max} {:instruction integer_flush} {:instruction in1} {:instruction in1} {:instruction float_stackdepth} {:instruction in2} {:instruction integer_add} {:instruction integer_add} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_add} {:instruction float_inc} {:instruction integer_max} {:instruction float_inc} {:instruction integer_add} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_add} {:instruction float_inc} {:instruction integer_add} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_add} {:instruction float_inc} {:instruction float_inc} {:instruction integer_sub} {:instruction float_inc} {:instruction float_inc} {:instruction integer_add} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_add} {:instruction integer_min} {:instruction float_inc} {:instruction integer_sub} {:instruction float_inc} {:instruction float_inc} {:instruction integer_add} {:instruction float_inc} {:instruction float_inc} {:instruction integer_mult} {:instruction float_inc} {:instruction -32} {:instruction integer_add} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_add} {:instruction float_inc} {:instruction float_inc} {:instruction integer_max} {:instruction integer_swap} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_max} {:instruction integer_swap} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_dup_times} {:instruction float_rot} {:instruction float_stackdepth} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_add} {:instruction float_inc} {:instruction float_dup} {:instruction integer_dup_times} {:instruction 25} {:instruction float_stackdepth} {:instruction float_inc} {:instruction float_dup_times} {:instruction float_yank} {:instruction float_inc} {:instruction integer_add} {:instruction integer_yankdup} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_add} {:instruction integer_yankdup} {:instruction float_inc} {:instruction integer_max} {:instruction float_dup_times} {:instruction float_max} {:instruction float_dup_times} {:instruction float_stackdepth} {:instruction float_inc} {:instruction float_inc} {:instruction float_dup_times} {:instruction float_yank} {:instruction float_rot} {:instruction 25} {:instruction in2} {:instruction integer_add} {:instruction integer_yank} {:instruction float_dup_times} {:instruction in1} {:instruction 78.00430018095415} {:instruction float_rot} {:instruction float_dup_times} {:instruction float_rot} {:instruction integer_yankdup} {:instruction integer_add} {:instruction float_dec} {:instruction float_inc} {:instruction float_sub} {:instruction float_rot} {:instruction integer_shove} {:instruction float_rot} {:instruction float_sub} {:instruction float_rot} {:instruction integer_sub} {:instruction float_inc} {:instruction integer_swap} {:instruction integer_min} {:instruction print_float} {:instruction integer_pop} {:instruction integer_min})
Best program: (float_mod integer_dup_times integer_max integer_max float_inc float_max in2 float_pop integer_mod float_flush float_pop integer_max integer_flush in1 in1 float_stackdepth in2 integer_add integer_add float_inc float_inc float_inc integer_add float_inc integer_max float_inc integer_add float_inc float_inc float_inc float_inc float_inc float_inc integer_add float_inc integer_add float_inc float_inc float_inc float_inc integer_add float_inc float_inc integer_sub float_inc float_inc integer_add float_inc float_inc float_inc float_inc float_inc integer_add integer_min float_inc integer_sub float_inc float_inc integer_add float_inc float_inc integer_mult float_inc -32 integer_add float_inc float_inc float_inc float_inc integer_add float_inc float_inc integer_max integer_swap float_inc float_inc float_inc integer_max integer_swap float_inc float_inc float_inc float_dup_times float_rot float_stackdepth float_inc float_inc float_inc float_inc float_inc integer_add float_inc float_dup integer_dup_times 25 float_stackdepth float_inc float_dup_times float_yank float_inc integer_add integer_yankdup float_inc float_inc float_inc float_inc integer_add integer_yankdup float_inc integer_max float_dup_times float_max float_dup_times float_stackdepth float_inc float_inc float_dup_times float_yank float_rot 25 in2 integer_add integer_yank float_dup_times in1 78.00430018095415 float_rot float_dup_times float_rot integer_yankdup integer_add float_dec float_inc float_sub float_rot integer_shove float_rot float_sub float_rot integer_sub float_inc integer_swap integer_min print_float integer_pop integer_min)
Errors: [19.9957 7 25.0 2 5.9957 7 27.0 2 17.0 2 2.9957 9 31.0043 7 0.0 0 30.0043 7 9.0 1 1.0 1 13.0043 8 19.0 2 2.0 1 26.0 2 3.0043 8 1.0 1 31.0 9 27.9957 9 9.0 1 24.0 2 18.0 2 2.0 2 6.0043 7 1.0 1]
Total: 452.0043
Mean: 9.040086
Genome size: 146
Size: 147
Percent parens: 0.007
--- Population Statistics ---
Average total errors in population: 2808.6870240999997
Median total errors in population: 979.5
Error averages by case: (133.56569659999988 10.073 106.96289140000002 4.147 113.37034129999988 6.743 115.50122529999992 3.811 102.51760290000004 3.808 133.20454279999984 7.84 113.72020320000027 6.168 84.92583450000002 4.248 111.83243230000018 6.814 99.90087510000006 3.888 86.46890050000006 2.908 124.84254940000004 7.486 91.39645230000005 3.742 82.85910180000003 3.195 120.5094567999999 3.994 118.81584229999989 7.529 82.05405550000002 4.434 114.79254160000004 10.057 137.4569522999999 10.917 81.8471569 3.19 113.5103383 4.209 88.2360418 3.639 88.79060720000003 3.587 127.91582880000023 6.612 97.09255319999991 3.558)
Error minima by case: (0.4796 3 0.2433 1 0.0043 1 12.0043 1 0.6808 1 0.0043 1 0.9957 1 0.0 0 1.9957 1 0.0 0 0.0 0 1.0043 1 0.3163 1 0.0 0 11.0 1 0.0043 1 0.0 0 0.008 6 0.0592 8 0.1392 1 3.1931 1 0.0 0 0.0 0 0.0043 2 0.0 0)
Average genome size in population (length): 147.951
Average program size in population (points): 148.951
Average percent parens in population: 0.007
Minimum age in population: 245.1917157303673
Maximum age in population: 248.9785244934473
Average age in population: 247.0813377429821
Median age in population: 247.1136093616141
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 5
Genome diversity (% unique Plush genomes):	 0.965
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 5
Syntactic diversity (% unique Push programs):	 0.965
Total error diversity:				 0.645
Error (vector) diversity:			 0.789
Behavioral diversity:				 0.789
--- Run Statistics ---
Number of program evaluations used so far: 183000
Number of point (instruction) evaluations so far: 496798666
--- Timings ---
Current time: 1529616762331 milliseconds
Total Time:         826.5 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       248.3 seconds, 30.0%
Fitness Testing:    461.4 seconds, 55.8%
Report:             116.7 seconds, 14.1%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 182
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 183
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 183
;;******************************
;; -*- Number IO problem report - generation 183
Test total error for best: 21492.8796
Test mean error for best: 10.74644
;;------------------------------
Outputs of best individual on training cases:
Correct output: -74.6179542037 | Program output: -50.6222543847
Correct output: 78.7609586813  | Program output: 58.7609586813 
Correct output: 3.0100598709   | Program output: 13.0057596899 
Correct output: -99.2368061293 | Program output: -68.2368061293
Correct output: 88.6808415603  | Program output: 76.6808415603 
Correct output: -151.1060419578 | Program output: -144.1103421388
Correct output: 56.004616184   | Program output: 29.000316003  
Correct output: 33.520660154   | Program output: 33.520660154  
Correct output: 42.238861085   | Program output: 16.2345609041 
Correct output: -49.0227893765 | Program output: -40.0227893765
Correct output: 103.4057483059 | Program output: 106.4057483059
Correct output: -106.1378273779 | Program output: -115.1421275589
Correct output: 37.9625599991  | Program output: 22.9625599991 
Correct output: 71.9208193203  | Program output: 77.9208193203 
Correct output: 173.5348464317 | Program output: 152.5348464317
Correct output: -77.0615185935 | Program output: -76.0658187744
Correct output: -20.7643622555 | Program output: -17.7643622555
Correct output: 1.9827630815   | Program output: -24.0172369185
Correct output: -39.1198682611 | Program output: -7.124168442  
Correct output: 1.1392376036   | Program output: 14.1392376036 
Correct output: 129.1930977679 | Program output: 110.1930977679
Correct output: 26.7496211861  | Program output: 12.7496211861 
Correct output: -11.2984801384 | Program output: -4.2984801384 
Correct output: -136.1442960385 | Program output: -138.1485962195
Correct output: 143.0911996605 | Program output: 149.0911996605
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_mod} {:instruction integer_dup_times} {:instruction integer_max} {:instruction integer_max} {:instruction float_inc} {:instruction float_max} {:instruction in2} {:instruction float_pop} {:instruction integer_mod} {:instruction float_flush} {:instruction float_pop} {:instruction integer_max} {:instruction integer_flush} {:instruction in1} {:instruction in1} {:instruction float_stackdepth} {:instruction in2} {:instruction integer_add} {:instruction integer_add} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_add} {:instruction float_inc} {:instruction integer_max} {:instruction float_inc} {:instruction integer_add} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_add} {:instruction float_inc} {:instruction integer_add} {:instruction float_inc} {:instruction integer_add} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_add} {:instruction float_inc} {:instruction integer_add} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_add} {:instruction integer_min} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_add} {:instruction integer_min} {:instruction float_inc} {:instruction integer_sub} {:instruction float_inc} {:instruction float_inc} {:instruction integer_add} {:instruction float_inc} {:instruction -32} {:instruction integer_add} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_add} {:instruction float_inc} {:instruction float_inc} {:instruction integer_add} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_add} {:instruction float_inc} {:instruction float_inc} {:instruction integer_max} {:instruction integer_swap} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_dup_times} {:instruction float_rot} {:instruction float_stackdepth} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_min} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_add} {:instruction float_inc} {:instruction float_inc} {:instruction integer_max} {:instruction float_inc} {:instruction float_dup} {:instruction integer_dup_times} {:instruction 25} {:instruction float_stackdepth} {:instruction float_inc} {:instruction float_dup_times} {:instruction float_yank} {:instruction float_inc} {:instruction integer_add} {:instruction integer_yankdup} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_add} {:instruction integer_yankdup} {:instruction float_inc} {:instruction integer_max} {:instruction float_dup_times} {:instruction float_max} {:instruction float_dup_times} {:instruction float_stackdepth} {:instruction float_inc} {:instruction float_inc} {:instruction float_dup_times} {:instruction float_yank} {:instruction float_rot} {:instruction 25} {:instruction in2} {:instruction integer_add} {:instruction integer_yank} {:instruction float_dup_times} {:instruction float_dec} {:instruction in1} {:instruction 78.00430018095415} {:instruction float_swap} {:instruction float_dup_times} {:instruction float_rot} {:instruction integer_yankdup} {:instruction integer_add} {:instruction float_dec} {:instruction float_inc} {:instruction float_sub} {:instruction float_rot} {:instruction integer_shove} {:instruction float_rot} {:instruction float_sub} {:instruction float_rot} {:instruction integer_sub} {:instruction integer_pop} {:instruction integer_swap} {:instruction integer_min} {:instruction print_float} {:instruction integer_pop} {:instruction float_pop})
Best program: (float_mod integer_dup_times integer_max integer_max float_inc float_max in2 float_pop integer_mod float_flush float_pop integer_max integer_flush in1 in1 float_stackdepth in2 integer_add integer_add float_inc float_inc float_inc integer_add float_inc integer_max float_inc integer_add float_inc float_inc float_inc float_inc float_inc float_inc integer_add float_inc integer_add float_inc integer_add float_inc float_inc float_inc integer_add float_inc integer_add float_inc float_inc float_inc float_inc integer_add integer_min float_inc float_inc float_inc float_inc integer_add integer_min float_inc integer_sub float_inc float_inc integer_add float_inc -32 integer_add float_inc float_inc float_inc float_inc integer_add float_inc float_inc integer_add float_inc float_inc float_inc float_inc integer_add float_inc float_inc integer_max integer_swap float_inc float_inc float_inc float_dup_times float_rot float_stackdepth float_inc float_inc float_inc integer_min float_inc float_inc float_inc float_inc float_inc integer_add float_inc float_inc integer_max float_inc float_dup integer_dup_times 25 float_stackdepth float_inc float_dup_times float_yank float_inc integer_add integer_yankdup float_inc float_inc float_inc float_inc integer_add integer_yankdup float_inc integer_max float_dup_times float_max float_dup_times float_stackdepth float_inc float_inc float_dup_times float_yank float_rot 25 in2 integer_add integer_yank float_dup_times float_dec in1 78.00430018095415 float_swap float_dup_times float_rot integer_yankdup integer_add float_dec float_inc float_sub float_rot integer_shove float_rot float_sub float_rot integer_sub integer_pop integer_swap integer_min print_float integer_pop float_pop)
Errors: [23.9957 8 20.0 1 9.9957 7 31.0 2 12.0 2 6.9957 9 27.0043 7 0.0 0 26.0043 8 9.0 1 3.0 1 9.0043 8 15.0 2 6.0 1 21.0 2 0.9957 7 3.0 2 26.0 10 31.9957 9 13.0 1 19.0 2 14.0 2 7.0 2 2.0043 6 6.0 1]
Total: 443.9957
Mean: 8.879914
Genome size: 156
Size: 157
Percent parens: 0.006
--- Population Statistics ---
Average total errors in population: 3047.9577314999997
Median total errors in population: 993.9322
Error averages by case: (134.91436629999993 10.12 118.68216429999997 4.281 117.66325749999987 6.636 124.16844519999992 3.797 115.67304710000003 3.96 134.04754679999988 7.666 114.68947750000021 6.053 99.52915830000009 4.467 115.03996980000022 6.726 114.71640720000022 3.971 101.97984730000015 3.041 125.74673040000006 7.363 106.0922422 3.868 92.6694466 3.262 135.48308389999985 4.129 119.42890509999995 7.413 97.11014960000003 4.565 130.9673854000001 10.097 137.92981979999993 10.97 95.85697890000002 3.163 128.80973150000005 4.371 101.65825170000005 3.771 106.17819580000008 3.758 128.8433646000002 6.465 112.45775869999993 3.709)
Error minima by case: (4.9957 3 0.239 1 0.0043 1 4.2368 1 0.3192 1 0.0043 2 0.9957 1 0.0 0 1.0043 1 0.0 0 0.0 0 0.0043 1 0.0 0 0.0 0 7.0 1 0.0043 1 0.0 0 0.0165 7 11.7603 8 0.0 0 1.8069 1 1.0 1 0.0 0 0.0043 1 0.0 0)
Average genome size in population (length): 148.879
Average program size in population (points): 149.879
Average percent parens in population: 0.007
Minimum age in population: 246.3808308969408
Maximum age in population: 250.3389026735636
Average age in population: 248.424730332318
Median age in population: 248.4586793958849
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 6
Genome diversity (% unique Plush genomes):	 0.965
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 6
Syntactic diversity (% unique Push programs):	 0.965
Total error diversity:				 0.653
Error (vector) diversity:			 0.79
Behavioral diversity:				 0.792
--- Run Statistics ---
Number of program evaluations used so far: 184000
Number of point (instruction) evaluations so far: 500520666
--- Timings ---
Current time: 1529616767801 milliseconds
Total Time:         832.0 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       249.7 seconds, 30.0%
Fitness Testing:    464.6 seconds, 55.8%
Report:             117.5 seconds, 14.1%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 183
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 184
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 184
;;******************************
;; -*- Number IO problem report - generation 184
Test total error for best: 21492.8796
Test mean error for best: 10.74644
;;------------------------------
Outputs of best individual on training cases:
Correct output: -74.6179542037 | Program output: -50.6222543847
Correct output: 78.7609586813  | Program output: 58.7609586813 
Correct output: 3.0100598709   | Program output: 13.0057596899 
Correct output: -99.2368061293 | Program output: -68.2368061293
Correct output: 88.6808415603  | Program output: 76.6808415603 
Correct output: -151.1060419578 | Program output: -144.1103421388
Correct output: 56.004616184   | Program output: 29.000316003  
Correct output: 33.520660154   | Program output: 33.520660154  
Correct output: 42.238861085   | Program output: 16.2345609041 
Correct output: -49.0227893765 | Program output: -40.0227893765
Correct output: 103.4057483059 | Program output: 106.4057483059
Correct output: -106.1378273779 | Program output: -115.1421275589
Correct output: 37.9625599991  | Program output: 22.9625599991 
Correct output: 71.9208193203  | Program output: 77.9208193203 
Correct output: 173.5348464317 | Program output: 152.5348464317
Correct output: -77.0615185935 | Program output: -76.0658187744
Correct output: -20.7643622555 | Program output: -17.7643622555
Correct output: 1.9827630815   | Program output: -24.0172369185
Correct output: -39.1198682611 | Program output: -7.124168442  
Correct output: 1.1392376036   | Program output: 14.1392376036 
Correct output: 129.1930977679 | Program output: 110.1930977679
Correct output: 26.7496211861  | Program output: 12.7496211861 
Correct output: -11.2984801384 | Program output: -4.2984801384 
Correct output: -136.1442960385 | Program output: -138.1485962195
Correct output: 143.0911996605 | Program output: 149.0911996605
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_mod} {:instruction integer_dup_times} {:instruction integer_max} {:instruction integer_max} {:instruction float_inc} {:instruction float_max} {:instruction in2} {:instruction float_pop} {:instruction integer_mod} {:instruction float_flush} {:instruction float_pop} {:instruction integer_max} {:instruction integer_flush} {:instruction in1} {:instruction in1} {:instruction float_stackdepth} {:instruction in2} {:instruction integer_add} {:instruction integer_add} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_add} {:instruction float_inc} {:instruction integer_max} {:instruction float_inc} {:instruction integer_add} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_add} {:instruction float_inc} {:instruction integer_add} {:instruction float_inc} {:instruction integer_add} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_add} {:instruction float_inc} {:instruction integer_add} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_add} {:instruction integer_min} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_add} {:instruction integer_min} {:instruction float_inc} {:instruction integer_sub} {:instruction float_inc} {:instruction float_inc} {:instruction integer_add} {:instruction float_inc} {:instruction -32} {:instruction integer_add} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_add} {:instruction float_inc} {:instruction float_inc} {:instruction integer_add} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_add} {:instruction float_inc} {:instruction float_inc} {:instruction integer_max} {:instruction integer_swap} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_dup_times} {:instruction float_rot} {:instruction float_stackdepth} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_min} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_add} {:instruction float_inc} {:instruction float_inc} {:instruction integer_max} {:instruction float_inc} {:instruction float_dup} {:instruction integer_dup_times} {:instruction 25} {:instruction float_stackdepth} {:instruction float_inc} {:instruction float_dup_times} {:instruction float_yank} {:instruction float_inc} {:instruction integer_add} {:instruction integer_yankdup} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_add} {:instruction integer_yankdup} {:instruction float_inc} {:instruction integer_max} {:instruction float_dup_times} {:instruction float_max} {:instruction float_dup_times} {:instruction float_stackdepth} {:instruction float_inc} {:instruction float_inc} {:instruction float_dup_times} {:instruction float_yank} {:instruction float_rot} {:instruction 25} {:instruction in2} {:instruction integer_add} {:instruction integer_yank} {:instruction float_dup_times} {:instruction float_dec} {:instruction in1} {:instruction 78.00430018095415} {:instruction float_swap} {:instruction float_dup_times} {:instruction float_rot} {:instruction integer_yankdup} {:instruction integer_add} {:instruction float_dec} {:instruction float_inc} {:instruction float_sub} {:instruction float_rot} {:instruction integer_shove} {:instruction float_rot} {:instruction float_sub} {:instruction float_rot} {:instruction integer_sub} {:instruction integer_pop} {:instruction integer_swap} {:instruction integer_min} {:instruction print_float} {:instruction integer_pop} {:instruction float_pop})
Best program: (float_mod integer_dup_times integer_max integer_max float_inc float_max in2 float_pop integer_mod float_flush float_pop integer_max integer_flush in1 in1 float_stackdepth in2 integer_add integer_add float_inc float_inc float_inc integer_add float_inc integer_max float_inc integer_add float_inc float_inc float_inc float_inc float_inc float_inc integer_add float_inc integer_add float_inc integer_add float_inc float_inc float_inc integer_add float_inc integer_add float_inc float_inc float_inc float_inc integer_add integer_min float_inc float_inc float_inc float_inc integer_add integer_min float_inc integer_sub float_inc float_inc integer_add float_inc -32 integer_add float_inc float_inc float_inc float_inc integer_add float_inc float_inc integer_add float_inc float_inc float_inc float_inc integer_add float_inc float_inc integer_max integer_swap float_inc float_inc float_inc float_dup_times float_rot float_stackdepth float_inc float_inc float_inc integer_min float_inc float_inc float_inc float_inc float_inc integer_add float_inc float_inc integer_max float_inc float_dup integer_dup_times 25 float_stackdepth float_inc float_dup_times float_yank float_inc integer_add integer_yankdup float_inc float_inc float_inc float_inc integer_add integer_yankdup float_inc integer_max float_dup_times float_max float_dup_times float_stackdepth float_inc float_inc float_dup_times float_yank float_rot 25 in2 integer_add integer_yank float_dup_times float_dec in1 78.00430018095415 float_swap float_dup_times float_rot integer_yankdup integer_add float_dec float_inc float_sub float_rot integer_shove float_rot float_sub float_rot integer_sub integer_pop integer_swap integer_min print_float integer_pop float_pop)
Errors: [23.9957 8 20.0 1 9.9957 7 31.0 2 12.0 2 6.9957 9 27.0043 7 0.0 0 26.0043 8 9.0 1 3.0 1 9.0043 8 15.0 2 6.0 1 21.0 2 0.9957 7 3.0 2 26.0 10 31.9957 9 13.0 1 19.0 2 14.0 2 7.0 2 2.0043 6 6.0 1]
Total: 443.9957
Mean: 8.879914
Genome size: 156
Size: 157
Percent parens: 0.006
--- Population Statistics ---
Average total errors in population: 2808.2872798999997
Median total errors in population: 951.98065
Error averages by case: (130.4318666999999 10.011 104.84269499999996 3.922 113.93684099999986 6.814 117.21415519999994 3.823 100.88466400000006 3.617 131.80165939999983 7.908 115.32292420000024 6.337 84.91435150000008 4.275 113.88503230000023 6.883 97.3880584000001 3.569 90.19919430000012 2.912 123.4626010000001 7.533 91.6200444 3.613 84.7807901 3.061 120.84894779999985 3.815 114.01647799999992 7.638 86.73846880000004 4.275 115.45030780000012 10.107 134.47471759999982 10.912 85.2941137 2.99 114.43451210000006 4.023 87.67971219999997 3.497 89.22702690000004 3.476 126.5167048000002 6.623 97.90341269999995 3.384)
Error minima by case: (1.6137 7 0.2433 1 0.0043 1 7.0043 1 0.3235 1 0.0043 2 0.0043 1 0.0 0 0.9957 1 0.0 0 0.0 0 0.9957 1 0.0 0 0.0 0 10.0 1 0.0043 1 0.0 0 0.0172 8 4.2388 8 0.0039 1 6.8112 1 0.0 0 0.0 0 0.0043 1 0.0 0)
Average genome size in population (length): 149.689
Average program size in population (points): 150.689
Average percent parens in population: 0.007
Minimum age in population: 247.3808308969408
Maximum age in population: 251.9116098936823
Average age in population: 249.6916468491301
Median age in population: 249.7421666013245
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 4
Genome diversity (% unique Plush genomes):	 0.958
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 4
Syntactic diversity (% unique Push programs):	 0.958
Total error diversity:				 0.673
Error (vector) diversity:			 0.818
Behavioral diversity:				 0.818
--- Run Statistics ---
Number of program evaluations used so far: 185000
Number of point (instruction) evaluations so far: 504262941
--- Timings ---
Current time: 1529616773378 milliseconds
Total Time:         837.4 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       251.1 seconds, 30.0%
Fitness Testing:    468.0 seconds, 55.9%
Report:             118.3 seconds, 14.1%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 184
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 185
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 185
;;******************************
;; -*- Number IO problem report - generation 185
Test total error for best: 21234.8796
Test mean error for best: 10.61744
;;------------------------------
Outputs of best individual on training cases:
Correct output: -74.6179542037 | Program output: -50.6222543847
Correct output: 78.7609586813  | Program output: 61.7609586813 
Correct output: 3.0100598709   | Program output: 13.0057596899 
Correct output: -99.2368061293 | Program output: -68.2368061293
Correct output: 88.6808415603  | Program output: 79.6808415603 
Correct output: -151.1060419578 | Program output: -144.1103421388
Correct output: 56.004616184   | Program output: 29.000316003  
Correct output: 33.520660154   | Program output: 36.520660154  
Correct output: 42.238861085   | Program output: 16.2345609041 
Correct output: -49.0227893765 | Program output: -37.0227893765
Correct output: 103.4057483059 | Program output: 106.4057483059
Correct output: -106.1378273779 | Program output: -115.1421275589
Correct output: 37.9625599991  | Program output: 22.9625599991 
Correct output: 71.9208193203  | Program output: 77.9208193203 
Correct output: 173.5348464317 | Program output: 155.5348464317
Correct output: -77.0615185935 | Program output: -76.0658187744
Correct output: -20.7643622555 | Program output: -17.7643622555
Correct output: 1.9827630815   | Program output: -21.0172369185
Correct output: -39.1198682611 | Program output: -7.124168442  
Correct output: 1.1392376036   | Program output: 14.1392376036 
Correct output: 129.1930977679 | Program output: 113.1930977679
Correct output: 26.7496211861  | Program output: 12.7496211861 
Correct output: -11.2984801384 | Program output: -1.2984801384 
Correct output: -136.1442960385 | Program output: -138.1485962195
Correct output: 143.0911996605 | Program output: 152.0911996605
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_mod} {:instruction integer_dup_times} {:instruction integer_max} {:instruction integer_max} {:instruction float_inc} {:instruction float_max} {:instruction in2} {:instruction float_pop} {:instruction integer_mod} {:instruction float_flush} {:instruction float_pop} {:instruction integer_max} {:instruction integer_flush} {:instruction in1} {:instruction in1} {:instruction float_stackdepth} {:instruction in2} {:instruction integer_add} {:instruction integer_add} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_add} {:instruction float_inc} {:instruction integer_max} {:instruction float_inc} {:instruction integer_add} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_add} {:instruction float_inc} {:instruction integer_add} {:instruction float_inc} {:instruction integer_add} {:instruction float_inc} {:instruction integer_add} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_add} {:instruction float_inc} {:instruction integer_add} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_add} {:instruction integer_min} {:instruction float_inc} {:instruction integer_sub} {:instruction float_inc} {:instruction float_inc} {:instruction integer_add} {:instruction float_inc} {:instruction float_inc} {:instruction integer_mult} {:instruction float_inc} {:instruction -32} {:instruction float_inc} {:instruction float_inc} {:instruction integer_add} {:instruction integer_add} {:instruction integer_add} {:instruction integer_min} {:instruction float_inc} {:instruction integer_sub} {:instruction float_inc} {:instruction float_inc} {:instruction integer_add} {:instruction float_inc} {:instruction float_inc} {:instruction integer_add} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_add} {:instruction float_inc} {:instruction float_inc} {:instruction integer_max} {:instruction float_inc} {:instruction integer_max} {:instruction float_inc} {:instruction float_dup_times} {:instruction float_rot} {:instruction float_stackdepth} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_min} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_add} {:instruction integer_add} {:instruction float_inc} {:instruction float_inc} {:instruction integer_max} {:instruction float_inc} {:instruction float_dup} {:instruction integer_dup_times} {:instruction 25} {:instruction float_stackdepth} {:instruction float_inc} {:instruction float_dup_times} {:instruction float_yank} {:instruction float_inc} {:instruction integer_add} {:instruction integer_yankdup} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_add} {:instruction integer_max} {:instruction float_dup_times} {:instruction float_max} {:instruction float_dup_times} {:instruction float_stackdepth} {:instruction float_inc} {:instruction float_inc} {:instruction float_dup_times} {:instruction float_yank} {:instruction float_rot} {:instruction 25} {:instruction in2} {:instruction integer_add} {:instruction integer_yank} {:instruction float_dup_times} {:instruction float_dec} {:instruction in1} {:instruction 78.00430018095415} {:instruction float_rot} {:instruction float_dup_times} {:instruction float_rot} {:instruction integer_yankdup} {:instruction integer_add} {:instruction float_dec} {:instruction float_inc} {:instruction float_sub} {:instruction float_rot} {:instruction integer_shove} {:instruction float_rot} {:instruction float_sub} {:instruction float_rot} {:instruction integer_sub} {:instruction print_float} {:instruction integer_pop} {:instruction float_pop})
Best program: (float_mod integer_dup_times integer_max integer_max float_inc float_max in2 float_pop integer_mod float_flush float_pop integer_max integer_flush in1 in1 float_stackdepth in2 integer_add integer_add float_inc float_inc float_inc integer_add float_inc integer_max float_inc integer_add float_inc float_inc float_inc float_inc float_inc float_inc integer_add float_inc integer_add float_inc integer_add float_inc integer_add float_inc float_inc float_inc float_inc float_inc float_inc integer_add float_inc integer_add float_inc float_inc float_inc float_inc float_inc integer_add integer_min float_inc integer_sub float_inc float_inc integer_add float_inc float_inc integer_mult float_inc -32 float_inc float_inc integer_add integer_add integer_add integer_min float_inc integer_sub float_inc float_inc integer_add float_inc float_inc integer_add float_inc float_inc float_inc float_inc integer_add float_inc float_inc integer_max float_inc integer_max float_inc float_dup_times float_rot float_stackdepth float_inc float_inc float_inc integer_min float_inc float_inc float_inc float_inc float_inc integer_add integer_add float_inc float_inc integer_max float_inc float_dup integer_dup_times 25 float_stackdepth float_inc float_dup_times float_yank float_inc integer_add integer_yankdup float_inc float_inc float_inc float_inc float_inc integer_add integer_max float_dup_times float_max float_dup_times float_stackdepth float_inc float_inc float_dup_times float_yank float_rot 25 in2 integer_add integer_yank float_dup_times float_dec in1 78.00430018095415 float_rot float_dup_times float_rot integer_yankdup integer_add float_dec float_inc float_sub float_rot integer_shove float_rot float_sub float_rot integer_sub print_float integer_pop float_pop)
Errors: [23.9957 8 17.0 2 9.9957 7 31.0 2 9.0 2 6.9957 9 27.0043 7 3.0 1 26.0043 8 12.0 2 3.0 1 9.0043 8 15.0 2 6.0 1 18.0 2 0.9957 7 3.0 2 23.0 9 31.9957 9 13.0 1 16.0 2 14.0 2 10.0 1 2.0043 6 9.0 2]
Total: 442.9957
Mean: 8.859914
Genome size: 160
Size: 161
Percent parens: 0.006
--- Population Statistics ---
Average total errors in population: 3143.936805000001
Median total errors in population: 961.6085999999999
Error averages by case: (137.51626279999982 10.082 122.51056800000002 4.233 119.99132959999986 6.916 129.10751679999993 3.957 118.73348380000009 3.875 138.96220419999986 7.994 122.39295090000022 6.381 104.32724900000008 4.513 120.4765525000002 6.986 117.41180430000023 3.846 105.14236450000011 3.159 131.13349160000007 7.579 108.22884370000006 3.847 94.70184429999995 3.208 139.0507950999998 4.134 122.77347359999987 7.485 102.54113910000001 4.357 133.8303573000001 10.251 140.62215079999984 10.921 95.05372069999993 3.138 132.59112120000012 4.312 105.21098440000006 3.74 110.35633810000016 3.92 134.0626552000002 6.7 117.97560349999988 3.698)
Error minima by case: (1.382 7 0.2433 1 0.0043 1 9.2368 1 0.6808 1 0.0043 2 2.0046 1 0.0 0 2.0914 1 0.0 0 0.0 0 0.0043 1 0.0 0 0.0 0 5.9957 1 0.0043 1 0.0 0 0.0597 7 11.3811 8 0.0 0 2.1931 1 0.7496 1 0.0 0 0.0043 2 0.0 0)
Average genome size in population (length): 149.994
Average program size in population (points): 150.994
Average percent parens in population: 0.007
Minimum age in population: 248.7942795828145
Maximum age in population: 253.0462601105875
Average age in population: 250.9731900340733
Median age in population: 251.0092868379101
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 5
Genome diversity (% unique Plush genomes):	 0.958
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 5
Syntactic diversity (% unique Push programs):	 0.958
Total error diversity:				 0.67
Error (vector) diversity:			 0.817
Behavioral diversity:				 0.818
--- Run Statistics ---
Number of program evaluations used so far: 186000
Number of point (instruction) evaluations so far: 508012841
--- Timings ---
Current time: 1529616778841 milliseconds
Total Time:         843.0 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       252.5 seconds, 30.0%
Fitness Testing:    471.2 seconds, 55.9%
Report:             119.1 seconds, 14.1%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 185
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 186
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 186
;;******************************
;; -*- Number IO problem report - generation 186
Test total error for best: 21364.879599999997
Test mean error for best: 10.68244
;;------------------------------
Outputs of best individual on training cases:
Correct output: -74.6179542037 | Program output: -50.6222543847
Correct output: 78.7609586813  | Program output: 58.7609586813 
Correct output: 3.0100598709   | Program output: 13.0057596899 
Correct output: -99.2368061293 | Program output: -71.2368061293
Correct output: 88.6808415603  | Program output: 76.6808415603 
Correct output: -151.1060419578 | Program output: -144.1103421388
Correct output: 56.004616184   | Program output: 29.000316003  
Correct output: 33.520660154   | Program output: 37.520660154  
Correct output: 42.238861085   | Program output: 16.2345609041 
Correct output: -49.0227893765 | Program output: -36.0227893765
Correct output: 103.4057483059 | Program output: 103.4057483059
Correct output: -106.1378273779 | Program output: -115.1421275589
Correct output: 37.9625599991  | Program output: 19.9625599991 
Correct output: 71.9208193203  | Program output: 74.9208193203 
Correct output: 173.5348464317 | Program output: 152.5348464317
Correct output: -77.0615185935 | Program output: -76.0658187744
Correct output: -20.7643622555 | Program output: -20.7643622555
Correct output: 1.9827630815   | Program output: -24.0172369185
Correct output: -39.1198682611 | Program output: -7.124168442  
Correct output: 1.1392376036   | Program output: 11.1392376036 
Correct output: 129.1930977679 | Program output: 110.1930977679
Correct output: 26.7496211861  | Program output: 9.7496211861  
Correct output: -11.2984801384 | Program output: -4.2984801384 
Correct output: -136.1442960385 | Program output: -138.1485962195
Correct output: 143.0911996605 | Program output: 149.0911996605
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_mod} {:instruction integer_dup_times} {:instruction integer_max} {:instruction float_pop} {:instruction float_inc} {:instruction float_max} {:instruction in2} {:instruction float_pop} {:instruction integer_mod} {:instruction float_flush} {:instruction float_pop} {:instruction integer_max} {:instruction integer_flush} {:instruction in1} {:instruction in1} {:instruction float_stackdepth} {:instruction in2} {:instruction -8} {:instruction integer_add} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_add} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_add} {:instruction float_inc} {:instruction integer_max} {:instruction float_inc} {:instruction integer_add} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_add} {:instruction float_inc} {:instruction integer_add} {:instruction float_inc} {:instruction float_inc} {:instruction integer_add} {:instruction float_inc} {:instruction float_inc} {:instruction integer_add} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_add} {:instruction float_inc} {:instruction integer_add} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_add} {:instruction integer_min} {:instruction float_inc} {:instruction -24} {:instruction integer_add} {:instruction integer_min} {:instruction float_inc} {:instruction integer_sub} {:instruction float_inc} {:instruction float_inc} {:instruction integer_add} {:instruction float_inc} {:instruction float_inc} {:instruction integer_add} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_add} {:instruction float_inc} {:instruction float_inc} {:instruction integer_max} {:instruction float_inc} {:instruction integer_max} {:instruction integer_swap} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_dup_times} {:instruction float_rot} {:instruction float_stackdepth} {:instruction float_inc} {:instruction float_inc} {:instruction integer_mod} {:instruction integer_min} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_dup_times} {:instruction float_inc} {:instruction integer_add} {:instruction float_inc} {:instruction float_inc} {:instruction integer_max} {:instruction integer_swap} {:instruction float_dup} {:instruction integer_dup_times} {:instruction 25} {:instruction float_stackdepth} {:instruction tagged_534} {:instruction float_dup_times} {:instruction float_yank} {:instruction float_inc} {:instruction integer_add} {:instruction integer_yankdup} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_add} {:instruction -50} {:instruction float_inc} {:instruction integer_max} {:instruction float_dup_times} {:instruction integer_max} {:instruction float_dup_times} {:instruction float_max} {:instruction float_dup_times} {:instruction float_stackdepth} {:instruction float_inc} {:instruction float_inc} {:instruction float_dup_times} {:instruction float_max} {:instruction float_dup_times} {:instruction float_stackdepth} {:instruction float_inc} {:instruction float_inc} {:instruction float_dup_times} {:instruction float_yank} {:instruction float_rot} {:instruction 25} {:instruction in2} {:instruction integer_add} {:instruction integer_sub} {:instruction float_dup_times} {:instruction float_dec} {:instruction in1} {:instruction 78.00430018095415} {:instruction float_rot} {:instruction float_dup_times} {:instruction float_rot} {:instruction integer_yankdup} {:instruction integer_add} {:instruction float_dec} {:instruction float_inc} {:instruction float_sub} {:instruction float_rot} {:instruction integer_shove} {:instruction float_rot} {:instruction float_sub} {:instruction float_rot} {:instruction integer_sub} {:instruction float_inc} {:instruction integer_swap} {:instruction integer_min} {:instruction integer_swap} {:instruction integer_min} {:instruction print_float} {:instruction integer_pop} {:instruction float_pop})
Best program: (float_mod integer_dup_times integer_max float_pop float_inc float_max in2 float_pop integer_mod float_flush float_pop integer_max integer_flush in1 in1 float_stackdepth in2 -8 integer_add float_inc float_inc float_inc integer_add float_inc float_inc float_inc float_inc integer_add float_inc integer_max float_inc integer_add float_inc float_inc float_inc float_inc float_inc float_inc integer_add float_inc integer_add float_inc float_inc integer_add float_inc float_inc integer_add float_inc float_inc float_inc integer_add float_inc integer_add float_inc float_inc float_inc float_inc float_inc integer_add integer_min float_inc -24 integer_add integer_min float_inc integer_sub float_inc float_inc integer_add float_inc float_inc integer_add float_inc float_inc float_inc float_inc integer_add float_inc float_inc integer_max float_inc integer_max integer_swap float_inc float_inc float_inc float_dup_times float_rot float_stackdepth float_inc float_inc integer_mod integer_min float_inc float_inc float_inc integer_dup_times float_inc integer_add float_inc float_inc integer_max integer_swap float_dup integer_dup_times 25 float_stackdepth tagged_534 float_dup_times float_yank float_inc integer_add integer_yankdup float_inc float_inc float_inc float_inc integer_add -50 float_inc integer_max float_dup_times integer_max float_dup_times float_max float_dup_times float_stackdepth float_inc float_inc float_dup_times float_max float_dup_times float_stackdepth float_inc float_inc float_dup_times float_yank float_rot 25 in2 integer_add integer_sub float_dup_times float_dec in1 78.00430018095415 float_rot float_dup_times float_rot integer_yankdup integer_add float_dec float_inc float_sub float_rot integer_shove float_rot float_sub float_rot integer_sub float_inc integer_swap integer_min integer_swap integer_min print_float integer_pop float_pop)
Errors: [23.9957 8 20.0 1 9.9957 7 28.0 2 12.0 2 6.9957 9 27.0043 7 4.0 1 26.0043 8 13.0 2 0.0 0 9.0043 8 18.0 2 3.0 1 21.0 2 0.9957 7 0.0 0 26.0 10 31.9957 9 10.0 1 19.0 2 17.0 2 7.0 2 2.0043 6 6.0 1]
Total: 441.9957
Mean: 8.839914
Genome size: 168
Size: 169
Percent parens: 0.006
--- Population Statistics ---
Average total errors in population: 3043.2138452999993
Median total errors in population: 929.0027
Error averages by case: (137.53620379999984 10.04 110.25627349999999 4.028 122.07973709999986 6.907 128.51036549999992 3.848 109.13211560000005 3.78 142.23724689999986 8.072 123.51348690000025 6.333 92.10987940000004 4.261 122.28530090000024 7.005 109.3309626000001 3.535 100.02733080000014 3.102 132.43341020000005 7.74 100.0322455 3.639 97.44656280000004 3.101 130.6661246999998 3.992 122.40402229999978 7.604 92.81753350000002 4.175 125.72365420000008 10.144 142.0968058999999 10.872 97.46677349999995 3.004 123.9549782000001 4.096 94.69625259999998 3.511 102.72739620000006 3.809 136.86828220000027 6.774 109.96690049999992 3.522)
Error minima by case: (0.3449 7 0.2433 1 0.0043 1 11.2368 1 0.0 0 0.0043 2 0.5409 1 0.0 0 2.9957 1 0.0 0 0.0 0 0.0043 1 0.0 0 0.0 0 6.0 1 0.0043 1 0.0 0 0.0172 7 0.3114 8 0.0 0 4.0 1 0.0 0 0.0 0 0.0043 1 0.0 0)
Average genome size in population (length): 150.87
Average program size in population (points): 151.87
Average percent parens in population: 0.007
Minimum age in population: 249.8065306013418
Maximum age in population: 254.0991400390082
Average age in population: 252.3115470769347
Median age in population: 252.3496071494997
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 5
Genome diversity (% unique Plush genomes):	 0.95
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 5
Syntactic diversity (% unique Push programs):	 0.95
Total error diversity:				 0.673
Error (vector) diversity:			 0.814
Behavioral diversity:				 0.815
--- Run Statistics ---
Number of program evaluations used so far: 187000
Number of point (instruction) evaluations so far: 511784616
--- Timings ---
Current time: 1529616784328 milliseconds
Total Time:         848.4 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       253.9 seconds, 29.9%
Fitness Testing:    474.5 seconds, 55.9%
Report:             119.9 seconds, 14.1%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 186
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 187
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 187
;;******************************
;; -*- Number IO problem report - generation 187
Test total error for best: 21365.982800000005
Test mean error for best: 10.68299
;;------------------------------
Outputs of best individual on training cases:
Correct output: -74.6179542037 | Program output: -52.6222543847
Correct output: 78.7609586813  | Program output: 63.7609586813 
Correct output: 3.0100598709   | Program output: 11.0057596899 
Correct output: -99.2368061293 | Program output: -69.2368061293
Correct output: 88.6808415603  | Program output: 81.6808415603 
Correct output: -151.1060419578 | Program output: -146.1103421388
Correct output: 56.004616184   | Program output: 27.000316003  
Correct output: 33.520660154   | Program output: 39.520660154  
Correct output: 42.238861085   | Program output: 14.2345609041 
Correct output: -49.0227893765 | Program output: -85.0227893765
Correct output: 103.4057483059 | Program output: 105.4057483059
Correct output: -106.1378273779 | Program output: -117.1421275589
Correct output: 37.9625599991  | Program output: 21.9625599991 
Correct output: 71.9208193203  | Program output: 76.9208193203 
Correct output: 173.5348464317 | Program output: 157.5348464317
Correct output: -77.0615185935 | Program output: -78.0658187744
Correct output: -20.7643622555 | Program output: -18.7643622555
Correct output: 1.9827630815   | Program output: -19.0172369185
Correct output: -39.1198682611 | Program output: -9.124168442  
Correct output: 1.1392376036   | Program output: 13.1392376036 
Correct output: 129.1930977679 | Program output: 115.1930977679
Correct output: 26.7496211861  | Program output: 11.7496211861 
Correct output: -11.2984801384 | Program output: -10.2984801384
Correct output: -136.1442960385 | Program output: -140.1485962195
Correct output: 143.0911996605 | Program output: 143.0911996605
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_rot} {:instruction integer_dup_times} {:instruction integer_max} {:instruction integer_max} {:instruction float_inc} {:instruction integer_max} {:instruction in2} {:instruction float_pop} {:instruction integer_mod} {:instruction integer_mod} {:instruction float_flush} {:instruction float_pop} {:instruction float_pop} {:instruction integer_max} {:instruction integer_flush} {:instruction in1} {:instruction in1} {:instruction float_stackdepth} {:instruction in2} {:instruction -8} {:instruction integer_add} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_add} {:instruction float_inc} {:instruction integer_max} {:instruction float_inc} {:instruction integer_add} {:instruction float_inc} {:instruction integer_add} {:instruction float_inc} {:instruction integer_swap} {:instruction integer_rot} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_add} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_add} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_add} {:instruction float_inc} {:instruction float_inc} {:instruction integer_sub} {:instruction float_inc} {:instruction float_inc} {:instruction integer_add} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_max} {:instruction float_inc} {:instruction float_inc} {:instruction integer_add} {:instruction integer_min} {:instruction float_inc} {:instruction integer_sub} {:instruction float_inc} {:instruction float_inc} {:instruction integer_add} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_add} {:instruction integer_min} {:instruction float_inc} {:instruction integer_sub} {:instruction float_inc} {:instruction float_inc} {:instruction integer_add} {:instruction integer_mult} {:instruction float_inc} {:instruction -32} {:instruction integer_add} {:instruction float_inc} {:instruction float_inc} {:instruction integer_add} {:instruction float_inc} {:instruction float_inc} {:instruction integer_add} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_dup_times} {:instruction integer_add} {:instruction float_inc} {:instruction float_inc} {:instruction integer_max} {:instruction integer_swap} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_dup_times} {:instruction float_rot} {:instruction float_stackdepth} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_min} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_add} {:instruction float_inc} {:instruction float_inc} {:instruction float_stackdepth} {:instruction integer_swap} {:instruction float_dup} {:instruction integer_dup_times} {:instruction 25} {:instruction float_stackdepth} {:instruction float_inc} {:instruction float_dup_times} {:instruction float_yank} {:instruction float_inc} {:instruction integer_add} {:instruction integer_yankdup} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_add} {:instruction integer_max} {:instruction float_dup_times} {:instruction float_max} {:instruction float_dup_times} {:instruction float_stackdepth} {:instruction float_inc} {:instruction float_inc} {:instruction float_dup_times} {:instruction float_yank} {:instruction float_rot} {:instruction 25} {:instruction in2} {:instruction integer_add} {:instruction integer_yank} {:instruction float_dup_times} {:instruction float_dec} {:instruction in1} {:instruction 78.00430018095415} {:instruction float_rot} {:instruction float_dup_times} {:instruction float_rot} {:instruction integer_yankdup} {:instruction integer_add} {:instruction float_dec} {:instruction float_inc} {:instruction float_sub} {:instruction float_rot} {:instruction integer_shove} {:instruction float_rot} {:instruction float_sub} {:instruction float_rot} {:instruction integer_sub} {:instruction print_float} {:instruction integer_pop} {:instruction float_pop})
Best program: (float_rot integer_dup_times integer_max integer_max float_inc integer_max in2 float_pop integer_mod integer_mod float_flush float_pop float_pop integer_max integer_flush in1 in1 float_stackdepth in2 -8 integer_add float_inc float_inc float_inc float_inc integer_add float_inc integer_max float_inc integer_add float_inc integer_add float_inc integer_swap integer_rot float_inc float_inc float_inc integer_add float_inc float_inc float_inc integer_add float_inc float_inc float_inc float_inc float_inc integer_add float_inc float_inc integer_sub float_inc float_inc integer_add float_inc float_inc float_inc integer_max float_inc float_inc integer_add integer_min float_inc integer_sub float_inc float_inc integer_add float_inc float_inc float_inc float_inc float_inc integer_add integer_min float_inc integer_sub float_inc float_inc integer_add integer_mult float_inc -32 integer_add float_inc float_inc integer_add float_inc float_inc integer_add float_inc float_inc float_inc integer_dup_times integer_add float_inc float_inc integer_max integer_swap float_inc float_inc float_inc float_dup_times float_rot float_stackdepth float_inc float_inc float_inc integer_min float_inc float_inc float_inc float_inc float_inc integer_add float_inc float_inc float_stackdepth integer_swap float_dup integer_dup_times 25 float_stackdepth float_inc float_dup_times float_yank float_inc integer_add integer_yankdup float_inc float_inc float_inc float_inc integer_add integer_max float_dup_times float_max float_dup_times float_stackdepth float_inc float_inc float_dup_times float_yank float_rot 25 in2 integer_add integer_yank float_dup_times float_dec in1 78.00430018095415 float_rot float_dup_times float_rot integer_yankdup integer_add float_dec float_inc float_sub float_rot integer_shove float_rot float_sub float_rot integer_sub print_float integer_pop float_pop)
Errors: [21.9957 8 15.0 2 7.9957 8 30.0 1 7.0 1 4.9957 9 29.0043 7 6.0 1 28.0043 8 36.0 2 2.0 1 11.0043 8 16.0 2 5.0 1 16.0 2 1.0043 7 2.0 2 21.0 9 29.9957 8 12.0 1 14.0 2 15.0 2 1.0 1 4.0043 7 0.0 0]
Total: 436.0043
Mean: 8.720086
Genome size: 169
Size: 170
Percent parens: 0.006
--- Population Statistics ---
Average total errors in population: 2748.4223991999997
Median total errors in population: 890.4804999999999
Error averages by case: (126.1800303999999 9.966 101.85179739999998 4.032 107.44646469999991 6.794 112.60547289999992 3.659 98.98719360000005 3.557 127.54961059999988 7.86 108.23217440000023 6.247 85.4422713 4.393 108.61784010000021 6.948 101.36626910000012 3.506 87.1518633000001 3.024 119.08642030000003 7.536 87.31284790000004 3.524 83.14543379999996 2.94 121.10707629999978 3.771 112.58950999999978 7.397 84.6916616 3.875 114.42813160000007 10.15 130.58442210000004 10.807 80.38468950000001 2.859 115.26235910000005 3.922 82.96585350000005 3.371 93.69029870000003 3.984 121.95696340000022 6.497 101.7617435999999 3.405)
Error minima by case: (0.0367 7 0.2433 1 0.0043 1 8.0043 1 0.0 0 0.0043 2 2.9997 1 0.0 0 4.0043 1 0.0 0 0.0 0 1.0043 1 0.0 0 0.0 0 8.0 1 0.0043 1 0.0 0 0.1211 9 4.1853 8 0.0 0 6.0 1 0.0 0 0.0 0 0.0043 1 0.0 0)
Average genome size in population (length): 152.437
Average program size in population (points): 153.437
Average percent parens in population: 0.007
Minimum age in population: 250.8065306013418
Maximum age in population: 255.3778548400752
Average age in population: 253.653585981366
Median age in population: 253.6765285201965
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 5
Genome diversity (% unique Plush genomes):	 0.965
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 5
Syntactic diversity (% unique Push programs):	 0.965
Total error diversity:				 0.64
Error (vector) diversity:			 0.786
Behavioral diversity:				 0.787
--- Run Statistics ---
Number of program evaluations used so far: 188000
Number of point (instruction) evaluations so far: 515595541
--- Timings ---
Current time: 1529616789935 milliseconds
Total Time:         853.9 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       255.3 seconds, 29.9%
Fitness Testing:    477.7 seconds, 55.9%
Report:             120.8 seconds, 14.1%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 187
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 188
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 188
;;******************************
;; -*- Number IO problem report - generation 188
Test total error for best: 21290.8796
Test mean error for best: 10.64544
;;------------------------------
Outputs of best individual on training cases:
Correct output: -74.6179542037 | Program output: -50.6222543847
Correct output: 78.7609586813  | Program output: 64.7609586813 
Correct output: 3.0100598709   | Program output: 13.0057596899 
Correct output: -99.2368061293 | Program output: -68.2368061293
Correct output: 88.6808415603  | Program output: 82.6808415603 
Correct output: -151.1060419578 | Program output: -144.1103421388
Correct output: 56.004616184   | Program output: 29.000316003  
Correct output: 33.520660154   | Program output: 39.520660154  
Correct output: 42.238861085   | Program output: 16.2345609041 
Correct output: -49.0227893765 | Program output: -84.0227893765
Correct output: 103.4057483059 | Program output: 106.4057483059
Correct output: -106.1378273779 | Program output: -115.1421275589
Correct output: 37.9625599991  | Program output: 22.9625599991 
Correct output: 71.9208193203  | Program output: 77.9208193203 
Correct output: 173.5348464317 | Program output: 158.5348464317
Correct output: -77.0615185935 | Program output: -76.0658187744
Correct output: -20.7643622555 | Program output: -17.7643622555
Correct output: 1.9827630815   | Program output: -18.0172369185
Correct output: -39.1198682611 | Program output: -7.124168442  
Correct output: 1.1392376036   | Program output: 14.1392376036 
Correct output: 129.1930977679 | Program output: 116.1930977679
Correct output: 26.7496211861  | Program output: 12.7496211861 
Correct output: -11.2984801384 | Program output: -10.2984801384
Correct output: -136.1442960385 | Program output: -138.1485962195
Correct output: 143.0911996605 | Program output: 143.0911996605
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_dup} {:instruction float_mod} {:instruction float_frominteger} {:instruction float_sin} {:instruction float_inc} {:instruction float_max} {:instruction in2} {:instruction float_pop} {:instruction integer_mod} {:instruction float_flush} {:instruction float_pop} {:instruction integer_max} {:instruction integer_flush} {:instruction in1} {:instruction in1} {:instruction float_stackdepth} {:instruction in2} {:instruction -8} {:instruction integer_add} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_add} {:instruction float_inc} {:instruction integer_max} {:instruction float_inc} {:instruction integer_add} {:instruction float_inc} {:instruction integer_add} {:instruction integer_add} {:instruction float_inc} {:instruction float_inc} {:instruction integer_add} {:instruction float_inc} {:instruction integer_add} {:instruction float_inc} {:instruction float_inc} {:instruction integer_add} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_add} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_add} {:instruction float_inc} {:instruction integer_add} {:instruction integer_sub} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_add} {:instruction integer_min} {:instruction float_inc} {:instruction integer_sub} {:instruction float_inc} {:instruction float_inc} {:instruction integer_add} {:instruction float_inc} {:instruction -32} {:instruction integer_add} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_add} {:instruction float_inc} {:instruction float_inc} {:instruction integer_shove} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_add} {:instruction float_inc} {:instruction float_inc} {:instruction integer_max} {:instruction integer_swap} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_dup_times} {:instruction float_rot} {:instruction float_stackdepth} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_min} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_add} {:instruction integer_add} {:instruction float_inc} {:instruction float_inc} {:instruction integer_max} {:instruction float_inc} {:instruction float_dup} {:instruction integer_dup_times} {:instruction 25} {:instruction float_stackdepth} {:instruction float_inc} {:instruction float_dup_times} {:instruction float_yank} {:instruction float_inc} {:instruction integer_add} {:instruction integer_yankdup} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_add} {:instruction integer_max} {:instruction float_dup_times} {:instruction float_max} {:instruction float_dup_times} {:instruction float_stackdepth} {:instruction float_inc} {:instruction float_inc} {:instruction float_dup_times} {:instruction float_yank} {:instruction float_rot} {:instruction 25} {:instruction in2} {:instruction integer_add} {:instruction integer_yank} {:instruction float_dup_times} {:instruction float_dec} {:instruction in1} {:instruction 78.00430018095415} {:instruction float_rot} {:instruction float_dup_times} {:instruction float_rot} {:instruction integer_yankdup} {:instruction integer_add} {:instruction float_dec} {:instruction float_inc} {:instruction float_sub} {:instruction float_rot} {:instruction integer_shove} {:instruction float_rot} {:instruction float_sub} {:instruction float_rot} {:instruction integer_sub} {:instruction print_float} {:instruction integer_pop} {:instruction float_pop})
Best program: (float_dup float_mod float_frominteger float_sin float_inc float_max in2 float_pop integer_mod float_flush float_pop integer_max integer_flush in1 in1 float_stackdepth in2 -8 integer_add float_inc float_inc float_inc float_inc integer_add float_inc integer_max float_inc integer_add float_inc integer_add integer_add float_inc float_inc integer_add float_inc integer_add float_inc float_inc integer_add float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc integer_add float_inc float_inc float_inc integer_add float_inc integer_add integer_sub float_inc float_inc float_inc float_inc integer_add integer_min float_inc integer_sub float_inc float_inc integer_add float_inc -32 integer_add float_inc float_inc float_inc float_inc integer_add float_inc float_inc integer_shove float_inc float_inc float_inc float_inc integer_add float_inc float_inc integer_max integer_swap float_inc float_inc float_inc float_dup_times float_rot float_stackdepth float_inc float_inc float_inc integer_min float_inc float_inc float_inc float_inc float_inc integer_add integer_add float_inc float_inc integer_max float_inc float_dup integer_dup_times 25 float_stackdepth float_inc float_dup_times float_yank float_inc integer_add integer_yankdup float_inc float_inc float_inc float_inc float_inc integer_add integer_max float_dup_times float_max float_dup_times float_stackdepth float_inc float_inc float_dup_times float_yank float_rot 25 in2 integer_add integer_yank float_dup_times float_dec in1 78.00430018095415 float_rot float_dup_times float_rot integer_yankdup integer_add float_dec float_inc float_sub float_rot integer_shove float_rot float_sub float_rot integer_sub print_float integer_pop float_pop)
Errors: [23.9957 8 14.0 2 9.9957 7 31.0 2 6.0 1 6.9957 9 27.0043 7 6.0 1 26.0043 8 35.0 2 3.0 1 9.0043 8 15.0 2 6.0 1 15.0 2 0.9957 7 3.0 2 20.0 9 31.9957 9 13.0 1 13.0 2 14.0 2 1.0 1 2.0043 6 0.0 0]
Total: 432.9957
Mean: 8.659914
Genome size: 161
Size: 162
Percent parens: 0.006
--- Population Statistics ---
Average total errors in population: 2909.0655840999993
Median total errors in population: 885.0086000000001
Error averages by case: (128.60860099999988 9.879 111.03381389999997 4.192 105.86643839999991 6.914 124.34419879999993 3.857 107.35846090000007 3.804 131.89167259999988 8.071 107.22028360000027 6.256 97.11403740000006 4.491 105.81914700000029 7.024 113.18504140000013 3.752 96.9534699000001 3.139 123.24741780000002 7.72 93.97544049999999 3.716 90.85799359999997 3.098 129.15892819999993 4.046 115.22580789999975 7.614 91.3752195 3.962 125.43179710000008 10.088 129.9656832 10.736 89.49268239999999 3.061 120.2582082000001 4.178 90.6914037000001 3.661 104.85940170000006 4.516 126.32428740000024 6.667 110.6981479999999 3.666)
Error minima by case: (0.5833 7 0.2433 1 0.0043 1 16.0 1 0.0 0 0.0043 1 1.0043 1 0.0 0 0.0043 1 0.0 0 0.0 0 0.0043 1 0.0 0 0.0 0 7.0 1 0.0043 1 0.0 0 0.0172 7 1.8677 8 0.0 0 4.8069 1 0.0 0 0.0 0 0.0043 1 0.0 0)
Average genome size in population (length): 153.864
Average program size in population (points): 154.864
Average percent parens in population: 0.006
Minimum age in population: 252.8803675843819
Maximum age in population: 256.9645322770102
Average age in population: 254.9392368383385
Median age in population: 254.9904521997233
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 4
Genome diversity (% unique Plush genomes):	 0.969
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 4
Syntactic diversity (% unique Push programs):	 0.969
Total error diversity:				 0.618
Error (vector) diversity:			 0.76
Behavioral diversity:				 0.76
--- Run Statistics ---
Number of program evaluations used so far: 189000
Number of point (instruction) evaluations so far: 519442141
--- Timings ---
Current time: 1529616795582 milliseconds
Total Time:         859.6 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       256.7 seconds, 29.9%
Fitness Testing:    481.1 seconds, 56.0%
Report:             121.7 seconds, 14.2%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 188
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 189
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 189
;;******************************
;; -*- Number IO problem report - generation 189
Test total error for best: 21201.879599999997
Test mean error for best: 10.60094
;;------------------------------
Outputs of best individual on training cases:
Correct output: -74.6179542037 | Program output: -50.6222543847
Correct output: 78.7609586813  | Program output: 72.7609586813 
Correct output: 3.0100598709   | Program output: 13.0057596899 
Correct output: -99.2368061293 | Program output: -67.2368061293
Correct output: 88.6808415603  | Program output: 90.6808415603 
Correct output: -151.1060419578 | Program output: -144.1103421388
Correct output: 56.004616184   | Program output: 29.000316003  
Correct output: 33.520660154   | Program output: 47.520660154  
Correct output: 42.238861085   | Program output: 16.2345609041 
Correct output: -49.0227893765 | Program output: -84.0227893765
Correct output: 103.4057483059 | Program output: 107.4057483059
Correct output: -106.1378273779 | Program output: -115.1421275589
Correct output: 37.9625599991  | Program output: 23.9625599991 
Correct output: 71.9208193203  | Program output: 78.9208193203 
Correct output: 173.5348464317 | Program output: 166.5348464317
Correct output: -77.0615185935 | Program output: -76.0658187744
Correct output: -20.7643622555 | Program output: -16.7643622555
Correct output: 1.9827630815   | Program output: -10.0172369185
Correct output: -39.1198682611 | Program output: -7.124168442  
Correct output: 1.1392376036   | Program output: 15.1392376036 
Correct output: 129.1930977679 | Program output: 124.1930977679
Correct output: 26.7496211861  | Program output: 13.7496211861 
Correct output: -11.2984801384 | Program output: -2.2984801384 
Correct output: -136.1442960385 | Program output: -138.1485962195
Correct output: 143.0911996605 | Program output: 151.0911996605
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_rot} {:instruction integer_dup_times} {:instruction integer_max} {:instruction float_pop} {:instruction integer_mod} {:instruction float_flush} {:instruction float_pop} {:instruction integer_max} {:instruction integer_flush} {:instruction in1} {:instruction in1} {:instruction float_stackdepth} {:instruction in2} {:instruction -8} {:instruction integer_add} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_add} {:instruction float_inc} {:instruction integer_max} {:instruction float_inc} {:instruction integer_add} {:instruction float_inc} {:instruction integer_add} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_add} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_add} {:instruction float_inc} {:instruction float_inc} {:instruction integer_sub} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_add} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_add} {:instruction float_inc} {:instruction float_inc} {:instruction integer_sub} {:instruction float_inc} {:instruction float_inc} {:instruction integer_add} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_max} {:instruction float_inc} {:instruction float_inc} {:instruction integer_add} {:instruction float_inc} {:instruction float_inc} {:instruction integer_add} {:instruction float_inc} {:instruction -32} {:instruction integer_add} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_add} {:instruction float_inc} {:instruction float_inc} {:instruction integer_add} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_add} {:instruction float_inc} {:instruction float_inc} {:instruction integer_add} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_add} {:instruction float_inc} {:instruction float_inc} {:instruction integer_max} {:instruction integer_max} {:instruction integer_swap} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_dup_times} {:instruction float_rot} {:instruction float_stackdepth} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_min} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_add} {:instruction integer_add} {:instruction float_inc} {:instruction float_inc} {:instruction integer_max} {:instruction float_inc} {:instruction float_dup} {:instruction integer_dup_times} {:instruction 25} {:instruction float_stackdepth} {:instruction float_inc} {:instruction float_dup_times} {:instruction float_yank} {:instruction float_inc} {:instruction integer_add} {:instruction integer_yankdup} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_add} {:instruction integer_yankdup} {:instruction float_dup_times} {:instruction float_max} {:instruction float_stackdepth} {:instruction float_inc} {:instruction float_inc} {:instruction float_dup_times} {:instruction float_yank} {:instruction float_rot} {:instruction 25} {:instruction in2} {:instruction integer_add} {:instruction integer_yank} {:instruction float_dup_times} {:instruction in1} {:instruction 78.00430018095415} {:instruction float_rot} {:instruction float_dup_times} {:instruction float_rot} {:instruction integer_yankdup} {:instruction integer_add} {:instruction float_dec} {:instruction float_inc} {:instruction float_sub} {:instruction float_rot} {:instruction integer_shove} {:instruction float_rot} {:instruction float_sub} {:instruction float_rot} {:instruction integer_sub} {:instruction float_inc} {:instruction integer_swap} {:instruction integer_min} {:instruction print_float} {:instruction integer_pop} {:instruction integer_min})
Best program: (float_rot integer_dup_times integer_max float_pop integer_mod float_flush float_pop integer_max integer_flush in1 in1 float_stackdepth in2 -8 integer_add float_inc float_inc float_inc float_inc integer_add float_inc integer_max float_inc integer_add float_inc integer_add float_inc float_inc float_inc float_inc float_inc float_inc integer_add float_inc float_inc float_inc integer_add float_inc float_inc integer_sub float_inc float_inc float_inc integer_add float_inc float_inc float_inc float_inc float_inc integer_add float_inc float_inc integer_sub float_inc float_inc integer_add float_inc float_inc float_inc integer_max float_inc float_inc integer_add float_inc float_inc integer_add float_inc -32 integer_add float_inc float_inc float_inc float_inc integer_add float_inc float_inc integer_add float_inc float_inc float_inc integer_add float_inc float_inc integer_add float_inc float_inc float_inc float_inc integer_add float_inc float_inc integer_max integer_max integer_swap float_inc float_inc float_inc float_dup_times float_rot float_stackdepth float_inc float_inc float_inc integer_min float_inc float_inc float_inc float_inc float_inc integer_add integer_add float_inc float_inc integer_max float_inc float_dup integer_dup_times 25 float_stackdepth float_inc float_dup_times float_yank float_inc integer_add integer_yankdup float_inc float_inc float_inc float_inc integer_add integer_yankdup float_dup_times float_max float_stackdepth float_inc float_inc float_dup_times float_yank float_rot 25 in2 integer_add integer_yank float_dup_times in1 78.00430018095415 float_rot float_dup_times float_rot integer_yankdup integer_add float_dec float_inc float_sub float_rot integer_shove float_rot float_sub float_rot integer_sub float_inc integer_swap integer_min print_float integer_pop integer_min)
Errors: [23.9957 8 6.0 1 9.9957 7 32.0 2 2.0 2 6.9957 9 27.0043 7 14.0 2 26.0043 8 35.0 2 4.0 1 9.0043 8 14.0 2 7.0 1 7.0 2 0.9957 7 4.0 2 12.0 9 31.9957 9 14.0 1 5.0 1 13.0 2 9.0 2 2.0043 6 8.0 2]
Total: 426.9957
Mean: 8.539914
Genome size: 166
Size: 167
Percent parens: 0.006
--- Population Statistics ---
Average total errors in population: 3114.6336799999985
Median total errors in population: 925.5
Error averages by case: (141.1049783999999 10.023 114.05290949999997 4.147 121.20194159999988 6.971 133.05785159999994 3.918 111.97686130000002 3.707 142.2296416999999 8.007 121.63072940000023 6.31 101.74231420000005 4.329 120.63315950000025 7.065 114.03583310000012 3.652 103.98520320000011 3.256 133.31997090000002 7.709 108.44936530000003 3.793 99.73446319999996 3.23 129.50281499999986 3.995 126.17987469999976 7.658 102.79731840000001 4.1 123.98875490000006 10.117 143.1117359 10.823 99.67213249999996 3.165 123.06648370000012 4.03 103.72318600000007 3.662 106.70304920000004 4.662 136.64788210000023 6.675 113.41122469999989 3.67)
Error minima by case: (0.1317 7 0.2433 1 0.0043 1 18.0 1 0.0 0 0.0043 1 0.9997 1 0.0 0 8.7754 1 0.0 0 0.0 0 0.0043 2 0.0 0 0.0 0 6.0 1 0.0043 1 0.0 0 0.7072 7 4.5218 8 0.0 0 4.0 1 0.0 0 0.0 0 0.0043 1 0.0 0)
Average genome size in population (length): 155.713
Average program size in population (points): 156.713
Average percent parens in population: 0.006
Minimum age in population: 254.2348936515543
Maximum age in population: 258.2653001480875
Average age in population: 256.2320955103085
Median age in population: 256.2463290462958
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 3
Genome diversity (% unique Plush genomes):	 0.969
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 3
Syntactic diversity (% unique Push programs):	 0.969
Total error diversity:				 0.62
Error (vector) diversity:			 0.784
Behavioral diversity:				 0.785
--- Run Statistics ---
Number of program evaluations used so far: 190000
Number of point (instruction) evaluations so far: 523334991
--- Timings ---
Current time: 1529616801254 milliseconds
Total Time:         865.3 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       258.1 seconds, 29.8%
Fitness Testing:    484.4 seconds, 56.0%
Report:             122.6 seconds, 14.2%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 189
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 190
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 190
;;******************************
;; -*- Number IO problem report - generation 190
Test total error for best: 21362.931200000003
Test mean error for best: 10.68147
;;------------------------------
Outputs of best individual on training cases:
Correct output: -74.6179542037 | Program output: -51.6222543847
Correct output: 78.7609586813  | Program output: 69.7609586813 
Correct output: 3.0100598709   | Program output: 12.0057596899 
Correct output: -99.2368061293 | Program output: -71.2368061293
Correct output: 88.6808415603  | Program output: 87.6808415603 
Correct output: -151.1060419578 | Program output: -145.1103421388
Correct output: 56.004616184   | Program output: 28.000316003  
Correct output: 33.520660154   | Program output: 48.520660154  
Correct output: 42.238861085   | Program output: 15.2345609041 
Correct output: -49.0227893765 | Program output: -81.0227893765
Correct output: 103.4057483059 | Program output: 103.4057483059
Correct output: -106.1378273779 | Program output: -116.1421275589
Correct output: 37.9625599991  | Program output: 19.9625599991 
Correct output: 71.9208193203  | Program output: 74.9208193203 
Correct output: 173.5348464317 | Program output: 163.5348464317
Correct output: -77.0615185935 | Program output: -77.0658187744
Correct output: -20.7643622555 | Program output: -20.7643622555
Correct output: 1.9827630815   | Program output: -13.0172369185
Correct output: -39.1198682611 | Program output: -8.124168442  
Correct output: 1.1392376036   | Program output: 11.1392376036 
Correct output: 129.1930977679 | Program output: 121.1930977679
Correct output: 26.7496211861  | Program output: 9.7496211861  
Correct output: -11.2984801384 | Program output: -1.2984801384 
Correct output: -136.1442960385 | Program output: -139.1485962195
Correct output: 143.0911996605 | Program output: 152.0911996605
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_mod} {:instruction integer_dup_times} {:instruction integer_max} {:instruction integer_max} {:instruction float_inc} {:instruction float_max} {:instruction in2} {:instruction float_pop} {:instruction integer_mod} {:instruction float_flush} {:instruction float_pop} {:instruction integer_max} {:instruction integer_flush} {:instruction in1} {:instruction in1} {:instruction float_stackdepth} {:instruction in2} {:instruction -8} {:instruction integer_add} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_max} {:instruction float_inc} {:instruction integer_add} {:instruction float_inc} {:instruction integer_add} {:instruction integer_add} {:instruction float_inc} {:instruction float_inc} {:instruction integer_add} {:instruction float_inc} {:instruction integer_add} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_add} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_add} {:instruction float_inc} {:instruction integer_add} {:instruction integer_yankdup} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_add} {:instruction integer_min} {:instruction float_inc} {:instruction integer_sub} {:instruction float_inc} {:instruction float_inc} {:instruction integer_add} {:instruction float_inc} {:instruction -32} {:instruction integer_add} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_add} {:instruction float_inc} {:instruction float_inc} {:instruction integer_add} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_add} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_add} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_add} {:instruction float_inc} {:instruction float_inc} {:instruction integer_max} {:instruction float_inc} {:instruction integer_max} {:instruction integer_swap} {:instruction float_inc} {:instruction float_inc} {:instruction integer_yankdup} {:instruction integer_swap} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_dup_times} {:instruction float_rot} {:instruction float_stackdepth} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_add} {:instruction float_inc} {:instruction float_inc} {:instruction integer_max} {:instruction float_inc} {:instruction float_dup} {:instruction integer_dup_times} {:instruction 25} {:instruction float_stackdepth} {:instruction float_inc} {:instruction float_dup_times} {:instruction float_yank} {:instruction float_inc} {:instruction integer_add} {:instruction integer_yankdup} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_add} {:instruction integer_yankdup} {:instruction float_inc} {:instruction float_inc} {:instruction integer_add} {:instruction integer_yankdup} {:instruction float_inc} {:instruction integer_max} {:instruction float_dup_times} {:instruction float_max} {:instruction float_dup_times} {:instruction float_stackdepth} {:instruction float_inc} {:instruction float_inc} {:instruction float_dup_times} {:instruction float_yank} {:instruction float_rot} {:instruction 25} {:instruction in2} {:instruction integer_add} {:instruction integer_yank} {:instruction float_dup_times} {:instruction in1} {:instruction 78.00430018095415} {:instruction float_rot} {:instruction float_dup_times} {:instruction float_rot} {:instruction integer_yankdup} {:instruction integer_add} {:instruction float_dec} {:instruction float_inc} {:instruction float_sub} {:instruction float_rot} {:instruction integer_shove} {:instruction float_rot} {:instruction float_sub} {:instruction float_rot} {:instruction integer_sub} {:instruction float_inc} {:instruction integer_swap} {:instruction integer_min} {:instruction print_float} {:instruction integer_pop} {:instruction integer_min})
Best program: (float_mod integer_dup_times integer_max integer_max float_inc float_max in2 float_pop integer_mod float_flush float_pop integer_max integer_flush in1 in1 float_stackdepth in2 -8 integer_add float_inc float_inc float_inc float_inc integer_max float_inc integer_add float_inc integer_add integer_add float_inc float_inc integer_add float_inc integer_add float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc integer_add float_inc float_inc float_inc integer_add float_inc integer_add integer_yankdup float_inc float_inc float_inc float_inc integer_add integer_min float_inc integer_sub float_inc float_inc integer_add float_inc -32 integer_add float_inc float_inc float_inc float_inc integer_add float_inc float_inc integer_add float_inc float_inc float_inc float_inc integer_add float_inc float_inc float_inc integer_add float_inc float_inc float_inc float_inc integer_add float_inc float_inc integer_max float_inc integer_max integer_swap float_inc float_inc integer_yankdup integer_swap float_inc float_inc float_inc float_dup_times float_rot float_stackdepth float_inc float_inc float_inc float_inc integer_add float_inc float_inc integer_max float_inc float_dup integer_dup_times 25 float_stackdepth float_inc float_dup_times float_yank float_inc integer_add integer_yankdup float_inc float_inc float_inc float_inc integer_add integer_yankdup float_inc float_inc integer_add integer_yankdup float_inc integer_max float_dup_times float_max float_dup_times float_stackdepth float_inc float_inc float_dup_times float_yank float_rot 25 in2 integer_add integer_yank float_dup_times in1 78.00430018095415 float_rot float_dup_times float_rot integer_yankdup integer_add float_dec float_inc float_sub float_rot integer_shove float_rot float_sub float_rot integer_sub float_inc integer_swap integer_min print_float integer_pop integer_min)
Errors: [22.9957 8 9.0 2 8.9957 8 28.0 2 1.0 1 5.9957 9 28.0043 7 15.0 2 27.0043 8 32.0 2 0.0 0 10.0043 7 18.0 2 3.0 1 10.0 1 0.0043 6 0.0 0 15.0 9 30.9957 9 10.0 1 8.0 1 17.0 2 10.0 1 3.0043 6 9.0 2]
Total: 419.0043
Mean: 8.380086
Genome size: 171
Size: 172
Percent parens: 0.006
--- Population Statistics ---
Average total errors in population: 2669.5065907999992
Median total errors in population: 928.0
Error averages by case: (119.91177879999995 9.999 98.04236179999994 4.176 100.43630259999988 7.166 113.48483719999994 3.902 94.42443500000006 3.758 126.21315729999986 8.14 101.55785920000025 6.367 82.88482610000007 4.464 99.72780780000018 7.223 98.46839190000014 3.777 86.57713950000011 3.298 116.46176129999998 7.847 84.88975360000003 3.792 81.61357360000002 3.261 117.02820759999982 4.093 106.89037239999979 7.628 82.345077 4.075 109.50605950000009 10.113 122.4343281 10.767 82.1443052 3.144 109.80528020000013 4.148 82.1468489 3.675 90.99999950000003 4.962 120.43263600000024 6.806 100.71249069999992 3.786)
Error minima by case: (2.1317 7 0.2433 1 0.7812 1 9.2368 1 0.0 0 0.0043 1 1.9997 1 0.0 0 0.889 1 0.0 0 0.0 0 0.0043 2 0.0 0 0.0 0 4.0 1 0.0043 1 0.0 0 0.0172 8 11.7603 8 0.0 0 2.0 1 0.0 0 0.0 0 0.0043 1 0.0 0)
Average genome size in population (length): 156.318
Average program size in population (points): 157.318
Average percent parens in population: 0.006
Minimum age in population: 255.5549067439285
Maximum age in population: 259.391739909577
Average age in population: 257.5539719102111
Median age in population: 257.6305537709782
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 5
Genome diversity (% unique Plush genomes):	 0.976
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 5
Syntactic diversity (% unique Push programs):	 0.976
Total error diversity:				 0.632
Error (vector) diversity:			 0.789
Behavioral diversity:				 0.79
--- Run Statistics ---
Number of program evaluations used so far: 191000
Number of point (instruction) evaluations so far: 527242941
--- Timings ---
Current time: 1529616806839 milliseconds
Total Time:         871.0 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       259.5 seconds, 29.8%
Fitness Testing:    487.8 seconds, 56.0%
Report:             123.5 seconds, 14.2%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 190
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 191
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 191
;;******************************
;; -*- Number IO problem report - generation 191
Test total error for best: 21126.931200000003
Test mean error for best: 10.56347
;;------------------------------
Outputs of best individual on training cases:
Correct output: -74.6179542037 | Program output: -51.6222543847
Correct output: 78.7609586813  | Program output: 69.7609586813 
Correct output: 3.0100598709   | Program output: 12.0057596899 
Correct output: -99.2368061293 | Program output: -71.2368061293
Correct output: 88.6808415603  | Program output: 87.6808415603 
Correct output: -151.1060419578 | Program output: -145.1103421388
Correct output: 56.004616184   | Program output: 28.000316003  
Correct output: 33.520660154   | Program output: 48.520660154  
Correct output: 42.238861085   | Program output: 15.2345609041 
Correct output: -49.0227893765 | Program output: -81.0227893765
Correct output: 103.4057483059 | Program output: 103.4057483059
Correct output: -106.1378273779 | Program output: -116.1421275589
Correct output: 37.9625599991  | Program output: 19.9625599991 
Correct output: 71.9208193203  | Program output: 74.9208193203 
Correct output: 173.5348464317 | Program output: 163.5348464317
Correct output: -77.0615185935 | Program output: -77.0658187744
Correct output: -20.7643622555 | Program output: -20.7643622555
Correct output: 1.9827630815   | Program output: -13.0172369185
Correct output: -39.1198682611 | Program output: -8.124168442  
Correct output: 1.1392376036   | Program output: 11.1392376036 
Correct output: 129.1930977679 | Program output: 121.1930977679
Correct output: 26.7496211861  | Program output: 9.7496211861  
Correct output: -11.2984801384 | Program output: -1.2984801384 
Correct output: -136.1442960385 | Program output: -139.1485962195
Correct output: 143.0911996605 | Program output: 152.0911996605
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_mod} {:instruction float_inc} {:instruction float_max} {:instruction float_flush} {:instruction float_pop} {:instruction integer_max} {:instruction integer_mod} {:instruction integer_mod} {:instruction float_flush} {:instruction float_pop} {:instruction integer_max} {:instruction integer_flush} {:instruction in1} {:instruction in1} {:instruction float_stackdepth} {:instruction in2} {:instruction -8} {:instruction integer_add} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_add} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_add} {:instruction float_inc} {:instruction float_inc} {:instruction integer_add} {:instruction float_inc} {:instruction integer_max} {:instruction float_inc} {:instruction integer_add} {:instruction float_inc} {:instruction integer_add} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_add} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_add} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_add} {:instruction float_inc} {:instruction float_inc} {:instruction integer_sub} {:instruction float_inc} {:instruction float_inc} {:instruction integer_add} {:instruction float_inc} {:instruction integer_add} {:instruction float_inc} {:instruction float_inc} {:instruction integer_add} {:instruction integer_min} {:instruction float_inc} {:instruction integer_sub} {:instruction float_inc} {:instruction float_inc} {:instruction integer_add} {:instruction float_inc} {:instruction -32} {:instruction integer_add} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_add} {:instruction float_inc} {:instruction float_inc} {:instruction integer_add} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_add} {:instruction float_inc} {:instruction float_inc} {:instruction integer_max} {:instruction float_inc} {:instruction integer_max} {:instruction integer_swap} {:instruction float_inc} {:instruction float_inc} {:instruction integer_max} {:instruction integer_swap} {:instruction integer_swap} {:instruction float_inc} {:instruction float_inc} {:instruction float_dup_times} {:instruction float_rot} {:instruction float_stackdepth} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_add} {:instruction float_inc} {:instruction float_inc} {:instruction integer_max} {:instruction float_inc} {:instruction float_dup} {:instruction integer_dup_times} {:instruction 25} {:instruction float_stackdepth} {:instruction float_inc} {:instruction float_dup_times} {:instruction float_yank} {:instruction float_inc} {:instruction integer_add} {:instruction integer_yankdup} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_add} {:instruction integer_yankdup} {:instruction float_inc} {:instruction float_inc} {:instruction integer_add} {:instruction integer_yankdup} {:instruction float_inc} {:instruction integer_max} {:instruction float_dup_times} {:instruction float_max} {:instruction float_dup_times} {:instruction float_stackdepth} {:instruction float_inc} {:instruction float_inc} {:instruction float_dup_times} {:instruction float_yank} {:instruction float_rot} {:instruction 25} {:instruction in2} {:instruction integer_add} {:instruction integer_yank} {:instruction float_dup_times} {:instruction in1} {:instruction 78.00430018095415} {:instruction float_rot} {:instruction float_dup_times} {:instruction float_rot} {:instruction integer_yankdup} {:instruction integer_add} {:instruction float_dec} {:instruction float_inc} {:instruction float_sub} {:instruction float_rot} {:instruction integer_shove} {:instruction float_rot} {:instruction float_sub} {:instruction float_rot} {:instruction integer_sub} {:instruction float_inc} {:instruction integer_swap} {:instruction integer_min} {:instruction print_float} {:instruction integer_pop} {:instruction integer_min})
Best program: (float_mod float_inc float_max float_flush float_pop integer_max integer_mod integer_mod float_flush float_pop integer_max integer_flush in1 in1 float_stackdepth in2 -8 integer_add float_inc float_inc float_inc integer_add float_inc float_inc float_inc float_inc integer_add float_inc float_inc integer_add float_inc integer_max float_inc integer_add float_inc integer_add float_inc float_inc float_inc float_inc float_inc float_inc integer_add float_inc float_inc float_inc float_inc float_inc float_inc integer_add float_inc float_inc float_inc integer_add float_inc float_inc integer_sub float_inc float_inc integer_add float_inc integer_add float_inc float_inc integer_add integer_min float_inc integer_sub float_inc float_inc integer_add float_inc -32 integer_add float_inc float_inc float_inc float_inc integer_add float_inc float_inc integer_add float_inc float_inc float_inc float_inc float_inc integer_add float_inc float_inc integer_max float_inc integer_max integer_swap float_inc float_inc integer_max integer_swap integer_swap float_inc float_inc float_dup_times float_rot float_stackdepth float_inc float_inc float_inc float_inc integer_add float_inc float_inc integer_max float_inc float_dup integer_dup_times 25 float_stackdepth float_inc float_dup_times float_yank float_inc integer_add integer_yankdup float_inc float_inc float_inc float_inc integer_add integer_yankdup float_inc float_inc integer_add integer_yankdup float_inc integer_max float_dup_times float_max float_dup_times float_stackdepth float_inc float_inc float_dup_times float_yank float_rot 25 in2 integer_add integer_yank float_dup_times in1 78.00430018095415 float_rot float_dup_times float_rot integer_yankdup integer_add float_dec float_inc float_sub float_rot integer_shove float_rot float_sub float_rot integer_sub float_inc integer_swap integer_min print_float integer_pop integer_min)
Errors: [22.9957 8 9.0 2 8.9957 8 28.0 2 1.0 1 5.9957 9 28.0043 7 15.0 2 27.0043 8 32.0 2 0.0 0 10.0043 7 18.0 2 3.0 1 10.0 1 0.0043 6 0.0 0 15.0 9 30.9957 9 10.0 1 8.0 1 17.0 2 10.0 1 3.0043 6 9.0 2]
Total: 419.0043
Mean: 8.380086
Genome size: 171
Size: 172
Percent parens: 0.006
--- Population Statistics ---
Average total errors in population: 3295.0839233999995
Median total errors in population: 968.0
Error averages by case: (146.39672119999983 10.233 122.7210378 4.36 125.8500796999999 7.005 139.33931749999994 4.087 119.84451740000007 3.729 153.69211239999998 8.091 126.61207400000023 6.29 110.14121010000002 4.714 125.42635330000022 7.074 125.3862206000001 4.007 109.18736750000011 3.4 142.51619699999992 7.851 110.2641569 3.952 101.01953990000001 3.377 139.39911489999986 4.14 133.52832929999977 7.675 107.63906480000004 4.248 134.44543860000005 10.134 148.13669319999994 10.969 103.27923760000007 3.292 133.0154998000001 4.22 106.49148670000001 3.818 116.49654099999998 5.139 147.80144810000021 6.857 123.92716409999996 3.865)
Error minima by case: (2.4173 7 0.0 0 0.0043 1 0.7632 1 0.0 0 0.0043 2 1.9997 1 0.0 0 4.0043 1 0.0 0 0.0 0 0.0043 2 0.0 0 0.0 0 1.0 1 0.0043 1 0.0 0 0.6907 7 1.2671 8 0.0 0 1.0 1 0.0 0 0.0 0 0.0043 1 0.0 0)
Average genome size in population (length): 157.996
Average program size in population (points): 158.996
Average percent parens in population: 0.006
Minimum age in population: 256.5845001448624
Maximum age in population: 260.7965995325192
Average age in population: 258.9207328712063
Median age in population: 258.9413502221449
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 4
Genome diversity (% unique Plush genomes):	 0.973
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 4
Syntactic diversity (% unique Push programs):	 0.973
Total error diversity:				 0.632
Error (vector) diversity:			 0.779
Behavioral diversity:				 0.779
--- Run Statistics ---
Number of program evaluations used so far: 192000
Number of point (instruction) evaluations so far: 531192941
--- Timings ---
Current time: 1529616812516 milliseconds
Total Time:         876.6 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       261.0 seconds, 29.8%
Fitness Testing:    491.2 seconds, 56.0%
Report:             124.3 seconds, 14.2%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 191
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 192
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 192
;;******************************
;; -*- Number IO problem report - generation 192
Test total error for best: 21126.931200000003
Test mean error for best: 10.56347
;;------------------------------
Outputs of best individual on training cases:
Correct output: -74.6179542037 | Program output: -51.6222543847
Correct output: 78.7609586813  | Program output: 69.7609586813 
Correct output: 3.0100598709   | Program output: 12.0057596899 
Correct output: -99.2368061293 | Program output: -71.2368061293
Correct output: 88.6808415603  | Program output: 87.6808415603 
Correct output: -151.1060419578 | Program output: -145.1103421388
Correct output: 56.004616184   | Program output: 28.000316003  
Correct output: 33.520660154   | Program output: 48.520660154  
Correct output: 42.238861085   | Program output: 15.2345609041 
Correct output: -49.0227893765 | Program output: -81.0227893765
Correct output: 103.4057483059 | Program output: 103.4057483059
Correct output: -106.1378273779 | Program output: -116.1421275589
Correct output: 37.9625599991  | Program output: 19.9625599991 
Correct output: 71.9208193203  | Program output: 74.9208193203 
Correct output: 173.5348464317 | Program output: 163.5348464317
Correct output: -77.0615185935 | Program output: -77.0658187744
Correct output: -20.7643622555 | Program output: -20.7643622555
Correct output: 1.9827630815   | Program output: -13.0172369185
Correct output: -39.1198682611 | Program output: -8.124168442  
Correct output: 1.1392376036   | Program output: 11.1392376036 
Correct output: 129.1930977679 | Program output: 121.1930977679
Correct output: 26.7496211861  | Program output: 9.7496211861  
Correct output: -11.2984801384 | Program output: -1.2984801384 
Correct output: -136.1442960385 | Program output: -139.1485962195
Correct output: 143.0911996605 | Program output: 152.0911996605
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_mod} {:instruction float_inc} {:instruction float_max} {:instruction float_flush} {:instruction float_pop} {:instruction integer_max} {:instruction integer_mod} {:instruction integer_mod} {:instruction float_flush} {:instruction float_pop} {:instruction integer_max} {:instruction integer_flush} {:instruction in1} {:instruction in1} {:instruction float_stackdepth} {:instruction in2} {:instruction -8} {:instruction integer_add} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_add} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_add} {:instruction float_inc} {:instruction float_inc} {:instruction integer_add} {:instruction float_inc} {:instruction integer_max} {:instruction float_inc} {:instruction integer_add} {:instruction float_inc} {:instruction integer_add} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_add} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_add} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_add} {:instruction float_inc} {:instruction float_inc} {:instruction integer_sub} {:instruction float_inc} {:instruction float_inc} {:instruction integer_add} {:instruction float_inc} {:instruction integer_add} {:instruction float_inc} {:instruction float_inc} {:instruction integer_add} {:instruction integer_min} {:instruction float_inc} {:instruction integer_sub} {:instruction float_inc} {:instruction float_inc} {:instruction integer_add} {:instruction float_inc} {:instruction -32} {:instruction integer_add} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_add} {:instruction float_inc} {:instruction float_inc} {:instruction integer_add} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_add} {:instruction float_inc} {:instruction float_inc} {:instruction integer_max} {:instruction float_inc} {:instruction integer_max} {:instruction integer_swap} {:instruction float_inc} {:instruction float_inc} {:instruction integer_max} {:instruction integer_swap} {:instruction integer_swap} {:instruction float_inc} {:instruction float_inc} {:instruction float_dup_times} {:instruction float_rot} {:instruction float_stackdepth} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_add} {:instruction float_inc} {:instruction float_inc} {:instruction integer_max} {:instruction float_inc} {:instruction float_dup} {:instruction integer_dup_times} {:instruction 25} {:instruction float_stackdepth} {:instruction float_inc} {:instruction float_dup_times} {:instruction float_yank} {:instruction float_inc} {:instruction integer_add} {:instruction integer_yankdup} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_add} {:instruction integer_yankdup} {:instruction float_inc} {:instruction float_inc} {:instruction integer_add} {:instruction integer_yankdup} {:instruction float_inc} {:instruction integer_max} {:instruction float_dup_times} {:instruction float_max} {:instruction float_dup_times} {:instruction float_stackdepth} {:instruction float_inc} {:instruction float_inc} {:instruction float_dup_times} {:instruction float_yank} {:instruction float_rot} {:instruction 25} {:instruction in2} {:instruction integer_add} {:instruction integer_yank} {:instruction float_dup_times} {:instruction in1} {:instruction 78.00430018095415} {:instruction float_rot} {:instruction float_dup_times} {:instruction float_rot} {:instruction integer_yankdup} {:instruction integer_add} {:instruction float_dec} {:instruction float_inc} {:instruction float_sub} {:instruction float_rot} {:instruction integer_shove} {:instruction float_rot} {:instruction float_sub} {:instruction float_rot} {:instruction integer_sub} {:instruction float_inc} {:instruction integer_swap} {:instruction integer_min} {:instruction print_float} {:instruction integer_pop} {:instruction integer_min})
Best program: (float_mod float_inc float_max float_flush float_pop integer_max integer_mod integer_mod float_flush float_pop integer_max integer_flush in1 in1 float_stackdepth in2 -8 integer_add float_inc float_inc float_inc integer_add float_inc float_inc float_inc float_inc integer_add float_inc float_inc integer_add float_inc integer_max float_inc integer_add float_inc integer_add float_inc float_inc float_inc float_inc float_inc float_inc integer_add float_inc float_inc float_inc float_inc float_inc float_inc integer_add float_inc float_inc float_inc integer_add float_inc float_inc integer_sub float_inc float_inc integer_add float_inc integer_add float_inc float_inc integer_add integer_min float_inc integer_sub float_inc float_inc integer_add float_inc -32 integer_add float_inc float_inc float_inc float_inc integer_add float_inc float_inc integer_add float_inc float_inc float_inc float_inc float_inc integer_add float_inc float_inc integer_max float_inc integer_max integer_swap float_inc float_inc integer_max integer_swap integer_swap float_inc float_inc float_dup_times float_rot float_stackdepth float_inc float_inc float_inc float_inc integer_add float_inc float_inc integer_max float_inc float_dup integer_dup_times 25 float_stackdepth float_inc float_dup_times float_yank float_inc integer_add integer_yankdup float_inc float_inc float_inc float_inc integer_add integer_yankdup float_inc float_inc integer_add integer_yankdup float_inc integer_max float_dup_times float_max float_dup_times float_stackdepth float_inc float_inc float_dup_times float_yank float_rot 25 in2 integer_add integer_yank float_dup_times in1 78.00430018095415 float_rot float_dup_times float_rot integer_yankdup integer_add float_dec float_inc float_sub float_rot integer_shove float_rot float_sub float_rot integer_sub float_inc integer_swap integer_min print_float integer_pop integer_min)
Errors: [22.9957 8 9.0 2 8.9957 8 28.0 2 1.0 1 5.9957 9 28.0043 7 15.0 2 27.0043 8 32.0 2 0.0 0 10.0043 7 18.0 2 3.0 1 10.0 1 0.0043 6 0.0 0 15.0 9 30.9957 9 10.0 1 8.0 1 17.0 2 10.0 1 3.0043 6 9.0 2]
Total: 419.0043
Mean: 8.380086
Genome size: 171
Size: 172
Percent parens: 0.006
--- Population Statistics ---
Average total errors in population: 3238.8303996999994
Median total errors in population: 961.9147
Error averages by case: (142.97381709999985 10.163 117.30102860000002 4.32 125.89657339999995 7.017 135.48561539999992 3.959 116.37905890000003 3.716 149.80587939999992 8.013 126.88622340000029 6.258 105.30746910000009 4.791 125.21814260000028 7.052 125.31194160000017 3.973 108.84839920000007 3.292 140.20142129999996 7.73 107.96970740000003 3.889 104.76324069999994 3.281 137.52326839999986 4.175 128.8997295999998 7.553 105.10255770000005 4.107 128.48895650000003 10.124 147.86714929999994 10.944 101.90413579999995 3.226 130.2501753000001 4.231 103.11554100000009 3.727 114.28893340000015 5.275 144.1166003000002 6.754 123.41183429999991 3.943)
Error minima by case: (2.9957 2 0.2433 1 0.0043 1 13.2368 1 0.0 0 0.0043 2 4.9997 1 0.0 0 9.9957 1 0.0 0 0.0 0 0.0043 1 0.0 0 0.0 0 0.7314 1 0.0043 1 0.0 0 0.0846 6 10.9957 2 0.0401 1 0.0 0 0.0 0 0.0 0 0.0043 1 0.0 0)
Average genome size in population (length): 159.105
Average program size in population (points): 160.105
Average percent parens in population: 0.006
Minimum age in population: 257.5845001448624
Maximum age in population: 262.1902015284801
Average age in population: 260.2809275980594
Median age in population: 260.3281013100472
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 3
Genome diversity (% unique Plush genomes):	 0.978
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 3
Syntactic diversity (% unique Push programs):	 0.978
Total error diversity:				 0.657
Error (vector) diversity:			 0.815
Behavioral diversity:				 0.816
--- Run Statistics ---
Number of program evaluations used so far: 193000
Number of point (instruction) evaluations so far: 535170591
--- Timings ---
Current time: 1529616818145 milliseconds
Total Time:         882.3 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       262.4 seconds, 29.7%
Fitness Testing:    494.6 seconds, 56.1%
Report:             125.2 seconds, 14.2%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 192
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 193
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 193
;;******************************
;; -*- Number IO problem report - generation 193
Test total error for best: 21126.931200000003
Test mean error for best: 10.56347
;;------------------------------
Outputs of best individual on training cases:
Correct output: -74.6179542037 | Program output: -51.6222543847
Correct output: 78.7609586813  | Program output: 69.7609586813 
Correct output: 3.0100598709   | Program output: 12.0057596899 
Correct output: -99.2368061293 | Program output: -71.2368061293
Correct output: 88.6808415603  | Program output: 87.6808415603 
Correct output: -151.1060419578 | Program output: -145.1103421388
Correct output: 56.004616184   | Program output: 28.000316003  
Correct output: 33.520660154   | Program output: 48.520660154  
Correct output: 42.238861085   | Program output: 15.2345609041 
Correct output: -49.0227893765 | Program output: -81.0227893765
Correct output: 103.4057483059 | Program output: 103.4057483059
Correct output: -106.1378273779 | Program output: -116.1421275589
Correct output: 37.9625599991  | Program output: 19.9625599991 
Correct output: 71.9208193203  | Program output: 74.9208193203 
Correct output: 173.5348464317 | Program output: 163.5348464317
Correct output: -77.0615185935 | Program output: -77.0658187744
Correct output: -20.7643622555 | Program output: -20.7643622555
Correct output: 1.9827630815   | Program output: -13.0172369185
Correct output: -39.1198682611 | Program output: -8.124168442  
Correct output: 1.1392376036   | Program output: 11.1392376036 
Correct output: 129.1930977679 | Program output: 121.1930977679
Correct output: 26.7496211861  | Program output: 9.7496211861  
Correct output: -11.2984801384 | Program output: -1.2984801384 
Correct output: -136.1442960385 | Program output: -139.1485962195
Correct output: 143.0911996605 | Program output: 152.0911996605
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_mod} {:instruction float_inc} {:instruction float_max} {:instruction float_flush} {:instruction float_pop} {:instruction integer_max} {:instruction integer_mod} {:instruction integer_mod} {:instruction float_flush} {:instruction float_pop} {:instruction integer_max} {:instruction integer_flush} {:instruction in1} {:instruction in1} {:instruction float_stackdepth} {:instruction in2} {:instruction -8} {:instruction integer_add} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_add} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_add} {:instruction float_inc} {:instruction float_inc} {:instruction integer_add} {:instruction float_inc} {:instruction integer_max} {:instruction float_inc} {:instruction integer_add} {:instruction float_inc} {:instruction integer_add} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_add} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_add} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_add} {:instruction float_inc} {:instruction float_inc} {:instruction integer_sub} {:instruction float_inc} {:instruction float_inc} {:instruction integer_add} {:instruction float_inc} {:instruction integer_add} {:instruction float_inc} {:instruction float_inc} {:instruction integer_add} {:instruction integer_min} {:instruction float_inc} {:instruction integer_sub} {:instruction float_inc} {:instruction float_inc} {:instruction integer_add} {:instruction float_inc} {:instruction -32} {:instruction integer_add} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_add} {:instruction float_inc} {:instruction float_inc} {:instruction integer_add} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_add} {:instruction float_inc} {:instruction float_inc} {:instruction integer_max} {:instruction float_inc} {:instruction integer_max} {:instruction integer_swap} {:instruction float_inc} {:instruction float_inc} {:instruction integer_max} {:instruction integer_swap} {:instruction integer_swap} {:instruction float_inc} {:instruction float_inc} {:instruction float_dup_times} {:instruction float_rot} {:instruction float_stackdepth} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_add} {:instruction float_inc} {:instruction float_inc} {:instruction integer_max} {:instruction float_inc} {:instruction float_dup} {:instruction integer_dup_times} {:instruction 25} {:instruction float_stackdepth} {:instruction float_inc} {:instruction float_dup_times} {:instruction float_yank} {:instruction float_inc} {:instruction integer_add} {:instruction integer_yankdup} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_add} {:instruction integer_yankdup} {:instruction float_inc} {:instruction float_inc} {:instruction integer_add} {:instruction integer_yankdup} {:instruction float_inc} {:instruction integer_max} {:instruction float_dup_times} {:instruction float_max} {:instruction float_dup_times} {:instruction float_stackdepth} {:instruction float_inc} {:instruction float_inc} {:instruction float_dup_times} {:instruction float_yank} {:instruction float_rot} {:instruction 25} {:instruction in2} {:instruction integer_add} {:instruction integer_yank} {:instruction float_dup_times} {:instruction in1} {:instruction 78.00430018095415} {:instruction float_rot} {:instruction float_dup_times} {:instruction float_rot} {:instruction integer_yankdup} {:instruction integer_add} {:instruction float_dec} {:instruction float_inc} {:instruction float_sub} {:instruction float_rot} {:instruction integer_shove} {:instruction float_rot} {:instruction float_sub} {:instruction float_rot} {:instruction integer_sub} {:instruction float_inc} {:instruction integer_swap} {:instruction integer_min} {:instruction print_float} {:instruction integer_pop} {:instruction integer_min})
Best program: (float_mod float_inc float_max float_flush float_pop integer_max integer_mod integer_mod float_flush float_pop integer_max integer_flush in1 in1 float_stackdepth in2 -8 integer_add float_inc float_inc float_inc integer_add float_inc float_inc float_inc float_inc integer_add float_inc float_inc integer_add float_inc integer_max float_inc integer_add float_inc integer_add float_inc float_inc float_inc float_inc float_inc float_inc integer_add float_inc float_inc float_inc float_inc float_inc float_inc integer_add float_inc float_inc float_inc integer_add float_inc float_inc integer_sub float_inc float_inc integer_add float_inc integer_add float_inc float_inc integer_add integer_min float_inc integer_sub float_inc float_inc integer_add float_inc -32 integer_add float_inc float_inc float_inc float_inc integer_add float_inc float_inc integer_add float_inc float_inc float_inc float_inc float_inc integer_add float_inc float_inc integer_max float_inc integer_max integer_swap float_inc float_inc integer_max integer_swap integer_swap float_inc float_inc float_dup_times float_rot float_stackdepth float_inc float_inc float_inc float_inc integer_add float_inc float_inc integer_max float_inc float_dup integer_dup_times 25 float_stackdepth float_inc float_dup_times float_yank float_inc integer_add integer_yankdup float_inc float_inc float_inc float_inc integer_add integer_yankdup float_inc float_inc integer_add integer_yankdup float_inc integer_max float_dup_times float_max float_dup_times float_stackdepth float_inc float_inc float_dup_times float_yank float_rot 25 in2 integer_add integer_yank float_dup_times in1 78.00430018095415 float_rot float_dup_times float_rot integer_yankdup integer_add float_dec float_inc float_sub float_rot integer_shove float_rot float_sub float_rot integer_sub float_inc integer_swap integer_min print_float integer_pop integer_min)
Errors: [22.9957 8 9.0 2 8.9957 8 28.0 2 1.0 1 5.9957 9 28.0043 7 15.0 2 27.0043 8 32.0 2 0.0 0 10.0043 7 18.0 2 3.0 1 10.0 1 0.0043 6 0.0 0 15.0 9 30.9957 9 10.0 1 8.0 1 17.0 2 10.0 1 3.0043 6 9.0 2]
Total: 419.0043
Mean: 8.380086
Genome size: 171
Size: 172
Percent parens: 0.006
--- Population Statistics ---
Average total errors in population: 3265.4251741999988
Median total errors in population: 938.0
Error averages by case: (144.57042729999984 10.212 120.09590189999994 4.224 126.66012449999988 6.958 133.84678199999996 3.898 121.7846196000001 3.759 147.5195543999999 7.956 128.77616110000025 6.23 110.40225350000009 4.761 127.06526780000024 7.003 127.5047318000002 4.009 105.37186390000008 3.19 138.55838520000003 7.663 107.76063720000003 3.796 98.52364859999997 3.229 142.8257445999998 4.212 129.66959999999986 7.503 103.36983660000004 4.064 136.1095725000001 10.085 147.94411389999985 10.959 101.35250019999998 3.188 136.31847270000014 4.276 101.08818850000009 3.644 118.9936595000001 5.397 141.91577910000018 6.665 126.60834779999989 3.908)
Error minima by case: (0.618 7 0.2433 1 0.0043 1 18.0 1 0.0 0 0.0043 2 0.9997 1 0.0 0 1.2389 1 0.0 0 0.0 0 0.0043 2 0.0 0 0.9735 1 0.0 0 0.0043 1 0.0 0 0.3318 8 1.2267 8 0.0 0 0.0 0 0.0 0 0.0 0 0.0043 1 0.0 0)
Average genome size in population (length): 160.389
Average program size in population (points): 161.389
Average percent parens in population: 0.006
Minimum age in population: 259.3602889621343
Maximum age in population: 263.6283711271857
Average age in population: 261.5512811026066
Median age in population: 261.5944178683625
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 3
Genome diversity (% unique Plush genomes):	 0.969
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 3
Syntactic diversity (% unique Push programs):	 0.969
Total error diversity:				 0.653
Error (vector) diversity:			 0.797
Behavioral diversity:				 0.798
--- Run Statistics ---
Number of program evaluations used so far: 194000
Number of point (instruction) evaluations so far: 539180391
--- Timings ---
Current time: 1529616823793 milliseconds
Total Time:         887.9 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       263.8 seconds, 29.7%
Fitness Testing:    498.0 seconds, 56.1%
Report:             126.0 seconds, 14.2%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 193
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 194
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 194
;;******************************
;; -*- Number IO problem report - generation 194
Test total error for best: 21126.931200000003
Test mean error for best: 10.56347
;;------------------------------
Outputs of best individual on training cases:
Correct output: -74.6179542037 | Program output: -51.6222543847
Correct output: 78.7609586813  | Program output: 69.7609586813 
Correct output: 3.0100598709   | Program output: 12.0057596899 
Correct output: -99.2368061293 | Program output: -71.2368061293
Correct output: 88.6808415603  | Program output: 87.6808415603 
Correct output: -151.1060419578 | Program output: -145.1103421388
Correct output: 56.004616184   | Program output: 28.000316003  
Correct output: 33.520660154   | Program output: 48.520660154  
Correct output: 42.238861085   | Program output: 15.2345609041 
Correct output: -49.0227893765 | Program output: -81.0227893765
Correct output: 103.4057483059 | Program output: 103.4057483059
Correct output: -106.1378273779 | Program output: -116.1421275589
Correct output: 37.9625599991  | Program output: 19.9625599991 
Correct output: 71.9208193203  | Program output: 74.9208193203 
Correct output: 173.5348464317 | Program output: 163.5348464317
Correct output: -77.0615185935 | Program output: -77.0658187744
Correct output: -20.7643622555 | Program output: -20.7643622555
Correct output: 1.9827630815   | Program output: -13.0172369185
Correct output: -39.1198682611 | Program output: -8.124168442  
Correct output: 1.1392376036   | Program output: 11.1392376036 
Correct output: 129.1930977679 | Program output: 121.1930977679
Correct output: 26.7496211861  | Program output: 9.7496211861  
Correct output: -11.2984801384 | Program output: -1.2984801384 
Correct output: -136.1442960385 | Program output: -139.1485962195
Correct output: 143.0911996605 | Program output: 152.0911996605
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_mod} {:instruction float_inc} {:instruction float_max} {:instruction float_flush} {:instruction float_pop} {:instruction integer_max} {:instruction integer_mod} {:instruction integer_mod} {:instruction float_flush} {:instruction float_pop} {:instruction integer_max} {:instruction integer_flush} {:instruction in1} {:instruction in1} {:instruction float_stackdepth} {:instruction in2} {:instruction -8} {:instruction integer_add} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_add} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_add} {:instruction float_inc} {:instruction float_inc} {:instruction integer_add} {:instruction float_inc} {:instruction integer_max} {:instruction float_inc} {:instruction integer_add} {:instruction float_inc} {:instruction integer_add} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_add} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_add} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_add} {:instruction float_inc} {:instruction float_inc} {:instruction integer_sub} {:instruction float_inc} {:instruction float_inc} {:instruction integer_add} {:instruction float_inc} {:instruction integer_add} {:instruction float_inc} {:instruction float_inc} {:instruction integer_add} {:instruction integer_min} {:instruction float_inc} {:instruction integer_sub} {:instruction float_inc} {:instruction float_inc} {:instruction integer_add} {:instruction float_inc} {:instruction -32} {:instruction integer_add} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_add} {:instruction float_inc} {:instruction float_inc} {:instruction integer_add} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_add} {:instruction float_inc} {:instruction float_inc} {:instruction integer_max} {:instruction float_inc} {:instruction integer_max} {:instruction integer_swap} {:instruction float_inc} {:instruction float_inc} {:instruction integer_max} {:instruction integer_swap} {:instruction integer_swap} {:instruction float_inc} {:instruction float_inc} {:instruction float_dup_times} {:instruction float_rot} {:instruction float_stackdepth} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_add} {:instruction float_inc} {:instruction float_inc} {:instruction integer_max} {:instruction float_inc} {:instruction float_dup} {:instruction integer_dup_times} {:instruction 25} {:instruction float_stackdepth} {:instruction float_inc} {:instruction float_dup_times} {:instruction float_yank} {:instruction float_inc} {:instruction integer_add} {:instruction integer_yankdup} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_add} {:instruction integer_yankdup} {:instruction float_inc} {:instruction float_inc} {:instruction integer_add} {:instruction integer_yankdup} {:instruction float_inc} {:instruction integer_max} {:instruction float_dup_times} {:instruction float_max} {:instruction float_dup_times} {:instruction float_stackdepth} {:instruction float_inc} {:instruction float_inc} {:instruction float_dup_times} {:instruction float_yank} {:instruction float_rot} {:instruction 25} {:instruction in2} {:instruction integer_add} {:instruction integer_yank} {:instruction float_dup_times} {:instruction in1} {:instruction 78.00430018095415} {:instruction float_rot} {:instruction float_dup_times} {:instruction float_rot} {:instruction integer_yankdup} {:instruction integer_add} {:instruction float_dec} {:instruction float_inc} {:instruction float_sub} {:instruction float_rot} {:instruction integer_shove} {:instruction float_rot} {:instruction float_sub} {:instruction float_rot} {:instruction integer_sub} {:instruction float_inc} {:instruction integer_swap} {:instruction integer_min} {:instruction print_float} {:instruction integer_pop} {:instruction integer_min})
Best program: (float_mod float_inc float_max float_flush float_pop integer_max integer_mod integer_mod float_flush float_pop integer_max integer_flush in1 in1 float_stackdepth in2 -8 integer_add float_inc float_inc float_inc integer_add float_inc float_inc float_inc float_inc integer_add float_inc float_inc integer_add float_inc integer_max float_inc integer_add float_inc integer_add float_inc float_inc float_inc float_inc float_inc float_inc integer_add float_inc float_inc float_inc float_inc float_inc float_inc integer_add float_inc float_inc float_inc integer_add float_inc float_inc integer_sub float_inc float_inc integer_add float_inc integer_add float_inc float_inc integer_add integer_min float_inc integer_sub float_inc float_inc integer_add float_inc -32 integer_add float_inc float_inc float_inc float_inc integer_add float_inc float_inc integer_add float_inc float_inc float_inc float_inc float_inc integer_add float_inc float_inc integer_max float_inc integer_max integer_swap float_inc float_inc integer_max integer_swap integer_swap float_inc float_inc float_dup_times float_rot float_stackdepth float_inc float_inc float_inc float_inc integer_add float_inc float_inc integer_max float_inc float_dup integer_dup_times 25 float_stackdepth float_inc float_dup_times float_yank float_inc integer_add integer_yankdup float_inc float_inc float_inc float_inc integer_add integer_yankdup float_inc float_inc integer_add integer_yankdup float_inc integer_max float_dup_times float_max float_dup_times float_stackdepth float_inc float_inc float_dup_times float_yank float_rot 25 in2 integer_add integer_yank float_dup_times in1 78.00430018095415 float_rot float_dup_times float_rot integer_yankdup integer_add float_dec float_inc float_sub float_rot integer_shove float_rot float_sub float_rot integer_sub float_inc integer_swap integer_min print_float integer_pop integer_min)
Errors: [22.9957 8 9.0 2 8.9957 8 28.0 2 1.0 1 5.9957 9 28.0043 7 15.0 2 27.0043 8 32.0 2 0.0 0 10.0043 7 18.0 2 3.0 1 10.0 1 0.0043 6 0.0 0 15.0 9 30.9957 9 10.0 1 8.0 1 17.0 2 10.0 1 3.0043 6 9.0 2]
Total: 419.0043
Mean: 8.380086
Genome size: 171
Size: 172
Percent parens: 0.006
--- Population Statistics ---
Average total errors in population: 3137.286355299999
Median total errors in population: 981.36365
Error averages by case: (143.7346438999998 10.269 111.0973969 4.342 125.3383621999999 6.765 129.68771239999995 3.847 109.09312880000009 3.706 146.9365604999999 7.772 127.18355090000021 6.147 98.03418920000011 4.847 123.80083370000021 6.817 119.55273170000028 4.051 102.53218710000012 3.282 136.69218270000002 7.525 105.25358420000002 3.844 99.0139111 3.302 129.93903899999975 4.167 128.67394749999985 7.417 101.17284960000003 4.107 124.78824110000012 10.075 145.95639299999993 11.071 100.20141659999999 3.143 121.85142780000012 4.165 100.73475340000005 3.724 109.38809620000015 5.413 141.0721520000002 6.551 115.27606379999992 3.932)
Error minima by case: (4.9957 7 0.0438 1 0.0043 1 8.7632 1 0.0 0 0.0043 2 1.9957 1 0.0 0 2.9957 1 0.0 0 0.0 0 0.0043 2 0.0 0 0.0 0 0.0 0 0.0043 1 0.0 0 0.0329 1 9.1156 8 0.1392 1 0.0 0 0.0 0 0.0 0 0.0043 1 0.0 0)
Average genome size in population (length): 161.796
Average program size in population (points): 162.796
Average percent parens in population: 0.006
Minimum age in population: 260.6363504100591
Maximum age in population: 264.8730094685474
Average age in population: 262.8310204923696
Median age in population: 262.8539737459645
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 4
Genome diversity (% unique Plush genomes):	 0.979
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 4
Syntactic diversity (% unique Push programs):	 0.979
Total error diversity:				 0.669
Error (vector) diversity:			 0.815
Behavioral diversity:				 0.815
--- Run Statistics ---
Number of program evaluations used so far: 195000
Number of point (instruction) evaluations so far: 543225316
--- Timings ---
Current time: 1529616829466 milliseconds
Total Time:         893.6 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       265.3 seconds, 29.7%
Fitness Testing:    501.4 seconds, 56.1%
Report:             126.8 seconds, 14.2%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 194
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 195
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 195
;;******************************
;; -*- Number IO problem report - generation 195
Test total error for best: 21115.9312
Test mean error for best: 10.55797
;;------------------------------
Outputs of best individual on training cases:
Correct output: -74.6179542037 | Program output: -51.6222543847
Correct output: 78.7609586813  | Program output: 70.7609586813 
Correct output: 3.0100598709   | Program output: 12.0057596899 
Correct output: -99.2368061293 | Program output: -71.2368061293
Correct output: 88.6808415603  | Program output: 88.6808415603 
Correct output: -151.1060419578 | Program output: -145.1103421388
Correct output: 56.004616184   | Program output: 28.000316003  
Correct output: 33.520660154   | Program output: 49.520660154  
Correct output: 42.238861085   | Program output: 15.2345609041 
Correct output: -49.0227893765 | Program output: -81.0227893765
Correct output: 103.4057483059 | Program output: 103.4057483059
Correct output: -106.1378273779 | Program output: -116.1421275589
Correct output: 37.9625599991  | Program output: 19.9625599991 
Correct output: 71.9208193203  | Program output: 74.9208193203 
Correct output: 173.5348464317 | Program output: 164.5348464317
Correct output: -77.0615185935 | Program output: -77.0658187744
Correct output: -20.7643622555 | Program output: -20.7643622555
Correct output: 1.9827630815   | Program output: -12.0172369185
Correct output: -39.1198682611 | Program output: -8.124168442  
Correct output: 1.1392376036   | Program output: 11.1392376036 
Correct output: 129.1930977679 | Program output: 122.1930977679
Correct output: 26.7496211861  | Program output: 9.7496211861  
Correct output: -11.2984801384 | Program output: -0.2984801384 
Correct output: -136.1442960385 | Program output: -139.1485962195
Correct output: 143.0911996605 | Program output: 153.0911996605
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_rot} {:instruction integer_dup_times} {:instruction integer_flush} {:instruction float_pop} {:instruction integer_mod} {:instruction float_flush} {:instruction float_pop} {:instruction integer_max} {:instruction float_pop} {:instruction integer_max} {:instruction integer_flush} {:instruction in1} {:instruction in1} {:instruction float_stackdepth} {:instruction in2} {:instruction -8} {:instruction integer_add} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_add} {:instruction float_inc} {:instruction integer_max} {:instruction float_inc} {:instruction integer_add} {:instruction float_inc} {:instruction float_inc} {:instruction integer_max} {:instruction float_inc} {:instruction integer_add} {:instruction float_inc} {:instruction integer_add} {:instruction integer_add} {:instruction float_inc} {:instruction float_inc} {:instruction integer_add} {:instruction float_inc} {:instruction integer_add} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_add} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_add} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_add} {:instruction float_inc} {:instruction float_inc} {:instruction integer_sub} {:instruction float_inc} {:instruction float_inc} {:instruction integer_add} {:instruction float_inc} {:instruction integer_add} {:instruction float_inc} {:instruction float_inc} {:instruction integer_add} {:instruction integer_min} {:instruction float_inc} {:instruction integer_sub} {:instruction float_inc} {:instruction float_inc} {:instruction integer_add} {:instruction float_inc} {:instruction -32} {:instruction integer_add} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_add} {:instruction float_inc} {:instruction float_inc} {:instruction integer_add} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_add} {:instruction float_inc} {:instruction float_inc} {:instruction integer_max} {:instruction float_inc} {:instruction integer_max} {:instruction integer_swap} {:instruction float_inc} {:instruction float_inc} {:instruction integer_max} {:instruction integer_swap} {:instruction integer_swap} {:instruction float_inc} {:instruction float_inc} {:instruction float_dup_times} {:instruction float_rot} {:instruction float_stackdepth} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_add} {:instruction float_inc} {:instruction float_inc} {:instruction integer_max} {:instruction float_inc} {:instruction float_dup} {:instruction integer_dup_times} {:instruction 25} {:instruction float_stackdepth} {:instruction float_inc} {:instruction float_dup_times} {:instruction float_yank} {:instruction float_inc} {:instruction integer_add} {:instruction integer_yankdup} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_add} {:instruction integer_yankdup} {:instruction float_inc} {:instruction float_inc} {:instruction integer_add} {:instruction integer_yankdup} {:instruction float_inc} {:instruction integer_max} {:instruction float_dup_times} {:instruction float_max} {:instruction float_dup_times} {:instruction float_stackdepth} {:instruction float_inc} {:instruction float_inc} {:instruction float_dup_times} {:instruction float_yank} {:instruction float_rot} {:instruction 25} {:instruction in2} {:instruction integer_add} {:instruction integer_yank} {:instruction float_dup_times} {:instruction in1} {:instruction 78.00430018095415} {:instruction float_rot} {:instruction float_dup_times} {:instruction float_rot} {:instruction integer_yankdup} {:instruction integer_add} {:instruction float_dec} {:instruction float_inc} {:instruction float_sub} {:instruction float_rot} {:instruction integer_shove} {:instruction float_rot} {:instruction float_sub} {:instruction float_rot} {:instruction integer_sub} {:instruction float_inc} {:instruction integer_swap} {:instruction integer_min} {:instruction print_float} {:instruction integer_pop} {:instruction integer_min})
Best program: (float_rot integer_dup_times integer_flush float_pop integer_mod float_flush float_pop integer_max float_pop integer_max integer_flush in1 in1 float_stackdepth in2 -8 integer_add float_inc float_inc float_inc float_inc integer_add float_inc integer_max float_inc integer_add float_inc float_inc integer_max float_inc integer_add float_inc integer_add integer_add float_inc float_inc integer_add float_inc integer_add float_inc float_inc float_inc float_inc float_inc float_inc integer_add float_inc float_inc float_inc float_inc float_inc float_inc integer_add float_inc float_inc float_inc integer_add float_inc float_inc integer_sub float_inc float_inc integer_add float_inc integer_add float_inc float_inc integer_add integer_min float_inc integer_sub float_inc float_inc integer_add float_inc -32 integer_add float_inc float_inc float_inc float_inc integer_add float_inc float_inc integer_add float_inc float_inc float_inc float_inc float_inc integer_add float_inc float_inc integer_max float_inc integer_max integer_swap float_inc float_inc integer_max integer_swap integer_swap float_inc float_inc float_dup_times float_rot float_stackdepth float_inc float_inc float_inc float_inc integer_add float_inc float_inc integer_max float_inc float_dup integer_dup_times 25 float_stackdepth float_inc float_dup_times float_yank float_inc integer_add integer_yankdup float_inc float_inc float_inc float_inc integer_add integer_yankdup float_inc float_inc integer_add integer_yankdup float_inc integer_max float_dup_times float_max float_dup_times float_stackdepth float_inc float_inc float_dup_times float_yank float_rot 25 in2 integer_add integer_yank float_dup_times in1 78.00430018095415 float_rot float_dup_times float_rot integer_yankdup integer_add float_dec float_inc float_sub float_rot integer_shove float_rot float_sub float_rot integer_sub float_inc integer_swap integer_min print_float integer_pop integer_min)
Errors: [22.9957 8 8.0 1 8.9957 8 28.0 2 0.0 0 5.9957 9 28.0043 7 16.0 2 27.0043 8 32.0 2 0.0 0 10.0043 7 18.0 2 3.0 1 9.0 2 0.0043 6 0.0 0 14.0 9 30.9957 9 10.0 1 7.0 1 17.0 2 11.0 2 3.0043 6 10.0 1]
Total: 416.0043
Mean: 8.320086
Genome size: 174
Size: 175
Percent parens: 0.006
--- Population Statistics ---
Average total errors in population: 3130.4241246999986
Median total errors in population: 927.0
Error averages by case: (140.65382929999976 10.169 112.1501065 4.135 121.48092669999988 6.99 132.19028300000002 3.97 110.37497370000008 3.536 143.9787739999999 8.019 120.62213580000024 6.331 105.84301270000002 4.805 119.15189380000018 7.017 124.93403800000019 3.965 105.99216300000013 3.256 134.28606509999997 7.747 104.70086069999999 3.787 99.22007430000002 3.285 129.38684229999984 4.047 127.91539669999982 7.637 103.51512740000005 4.194 123.7038104000001 10.038 144.0972695999999 10.992 98.79419379999997 3.23 122.19818640000017 4.004 99.88126480000004 3.649 109.84989200000008 5.418 138.10815030000018 6.703 116.73085439999988 3.74)
Error minima by case: (0.225 7 0.0 1 0.0043 1 5.7632 1 0.0 0 0.0043 1 0.0043 1 0.0 0 0.9957 1 0.0 0 0.0 0 0.0043 1 0.0 0 0.0 0 1.0 1 0.0043 1 0.0 0 0.0383 1 7.8801 8 0.0 0 0.0 0 0.0 0 0.0 0 0.0043 1 0.0 0)
Average genome size in population (length): 162.793
Average program size in population (points): 163.793
Average percent parens in population: 0.006
Minimum age in population: 0.0
Maximum age in population: 266.0969571349999
Average age in population: 263.8389238740726
Median age in population: 264.1267102888219
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 4
Genome diversity (% unique Plush genomes):	 0.972
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 4
Syntactic diversity (% unique Push programs):	 0.972
Total error diversity:				 0.692
Error (vector) diversity:			 0.851
Behavioral diversity:				 0.851
--- Run Statistics ---
Number of program evaluations used so far: 196000
Number of point (instruction) evaluations so far: 547295216
--- Timings ---
Current time: 1529616835161 milliseconds
Total Time:         899.3 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       266.7 seconds, 29.7%
Fitness Testing:    504.8 seconds, 56.1%
Report:             127.6 seconds, 14.2%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 195
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 196
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 196
;;******************************
;; -*- Number IO problem report - generation 196
Test total error for best: 20636.698999999986
Test mean error for best: 10.31835
;;------------------------------
Outputs of best individual on training cases:
Correct output: -74.6179542037 | Program output: -46.6222543847
Correct output: 78.7609586813  | Program output: 69.7609586813 
Correct output: 3.0100598709   | Program output: 17.0057596899 
Correct output: -99.2368061293 | Program output: -69.2368061293
Correct output: 88.6808415603  | Program output: 87.6808415603 
Correct output: -151.1060419578 | Program output: -140.1103421388
Correct output: 56.004616184   | Program output: 33.000316003  
Correct output: 33.520660154   | Program output: 45.520660154  
Correct output: 42.238861085   | Program output: 20.2345609041 
Correct output: -49.0227893765 | Program output: -28.0227893765
Correct output: 103.4057483059 | Program output: 105.4057483059
Correct output: -106.1378273779 | Program output: -111.1421275589
Correct output: 37.9625599991  | Program output: 21.9625599991 
Correct output: 71.9208193203  | Program output: 76.9208193203 
Correct output: 173.5348464317 | Program output: 163.5348464317
Correct output: -77.0615185935 | Program output: -72.0658187744
Correct output: -20.7643622555 | Program output: -18.7643622555
Correct output: 1.9827630815   | Program output: -13.0172369185
Correct output: -39.1198682611 | Program output: -3.124168442  
Correct output: 1.1392376036   | Program output: 13.1392376036 
Correct output: 129.1930977679 | Program output: 121.1930977679
Correct output: 26.7496211861  | Program output: 11.7496211861 
Correct output: -11.2984801384 | Program output: -4.2984801384 
Correct output: -136.1442960385 | Program output: -134.1485962195
Correct output: 143.0911996605 | Program output: 149.0911996605
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_mod} {:instruction integer_dup_times} {:instruction integer_max} {:instruction integer_max} {:instruction -84.35175051540848} {:instruction float_max} {:instruction float_pop} {:instruction integer_max} {:instruction integer_flush} {:instruction in1} {:instruction in1} {:instruction float_stackdepth} {:instruction in2} {:instruction -8} {:instruction integer_add} {:instruction integer_add} {:instruction integer_add} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_add} {:instruction float_inc} {:instruction integer_max} {:instruction float_inc} {:instruction integer_add} {:instruction float_inc} {:instruction integer_add} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_swap} {:instruction integer_add} {:instruction float_stackdepth} {:instruction float_inc} {:instruction integer_sub} {:instruction float_inc} {:instruction float_inc} {:instruction integer_add} {:instruction float_inc} {:instruction integer_add} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_add} {:instruction float_inc} {:instruction integer_min} {:instruction float_inc} {:instruction integer_sub} {:instruction float_inc} {:instruction float_inc} {:instruction integer_add} {:instruction float_inc} {:instruction -32} {:instruction integer_add} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_add} {:instruction float_inc} {:instruction float_inc} {:instruction integer_add} {:instruction integer_add} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_add} {:instruction float_inc} {:instruction float_inc} {:instruction integer_max} {:instruction integer_swap} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_dup_times} {:instruction float_rot} {:instruction float_stackdepth} {:instruction tag_integer_5} {:instruction float_inc} {:instruction float_inc} {:instruction integer_min} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_add} {:instruction integer_add} {:instruction float_inc} {:instruction float_inc} {:instruction integer_max} {:instruction float_inc} {:instruction float_dup} {:instruction integer_dup_times} {:instruction 25} {:instruction float_stackdepth} {:instruction float_inc} {:instruction float_dup_times} {:instruction float_yank} {:instruction float_inc} {:instruction integer_add} {:instruction integer_yankdup} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_add} {:instruction integer_yankdup} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_add} {:instruction integer_max} {:instruction float_dup_times} {:instruction float_max} {:instruction float_dup_times} {:instruction float_stackdepth} {:instruction float_inc} {:instruction float_inc} {:instruction float_dup_times} {:instruction integer_min} {:instruction float_rot} {:instruction 25} {:instruction in2} {:instruction integer_add} {:instruction integer_yank} {:instruction float_dup_times} {:instruction float_dec} {:instruction in1} {:instruction 78.00430018095415} {:instruction float_rot} {:instruction float_dup_times} {:instruction float_rot} {:instruction integer_yankdup} {:instruction float_yank} {:instruction float_dec} {:instruction float_inc} {:instruction float_sub} {:instruction float_rot} {:instruction integer_shove} {:instruction float_rot} {:instruction float_sub} {:instruction float_rot} {:instruction integer_swap} {:instruction integer_min} {:instruction print_float} {:instruction integer_pop} {:instruction integer_min})
Best program: (float_mod integer_dup_times integer_max integer_max -84.35175051540848 float_max float_pop integer_max integer_flush in1 in1 float_stackdepth in2 -8 integer_add integer_add integer_add float_inc float_inc float_inc float_inc integer_add float_inc integer_max float_inc integer_add float_inc integer_add float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc integer_swap integer_add float_stackdepth float_inc integer_sub float_inc float_inc integer_add float_inc integer_add float_inc float_inc float_inc float_inc float_inc integer_add float_inc integer_min float_inc integer_sub float_inc float_inc integer_add float_inc -32 integer_add float_inc float_inc float_inc float_inc integer_add float_inc float_inc integer_add integer_add float_inc float_inc float_inc integer_add float_inc float_inc integer_max integer_swap float_inc float_inc float_inc float_dup_times float_rot float_stackdepth tag_integer_5 float_inc float_inc integer_min float_inc float_inc float_inc float_inc float_inc integer_add integer_add float_inc float_inc integer_max float_inc float_dup integer_dup_times 25 float_stackdepth float_inc float_dup_times float_yank float_inc integer_add integer_yankdup float_inc float_inc float_inc float_inc float_inc integer_add integer_yankdup float_inc float_inc float_inc float_inc float_inc integer_add integer_max float_dup_times float_max float_dup_times float_stackdepth float_inc float_inc float_dup_times integer_min float_rot 25 in2 integer_add integer_yank float_dup_times float_dec in1 78.00430018095415 float_rot float_dup_times float_rot integer_yankdup float_yank float_dec float_inc float_sub float_rot integer_shove float_rot float_sub float_rot integer_swap integer_min print_float integer_pop integer_min)
Errors: [27.9957 8 9.0 2 13.9957 8 30.0 1 1.0 1 10.9957 9 23.0043 7 12.0 2 22.0043 8 21.0 2 2.0 1 5.0043 8 16.0 2 5.0 1 10.0 1 4.9957 7 2.0 2 15.0 9 35.9957 8 12.0 1 8.0 1 15.0 2 7.0 2 1.9957 6 6.0 1]
Total: 416.9871
Mean: 8.339742
Genome size: 167
Size: 168
Percent parens: 0.006
--- Population Statistics ---
Average total errors in population: 2801.0172041999995
Median total errors in population: 955.5
Error averages by case: (131.72841799999992 10.128 99.26462930000001 4.051 110.55934189999998 6.744 117.33279339999993 3.669 97.36025940000012 3.468 136.47626389999996 7.729 109.30074480000023 6.06 89.86637220000001 4.73 106.96410270000021 6.787 110.07207880000018 3.911 89.83362990000009 3.114 125.49601539999998 7.562 87.37009150000004 3.609 84.50915980000005 3.133 116.89871779999987 4.034 116.4243647999998 7.621 85.00861720000005 4.295 110.51178800000012 9.826 134.21048330000002 10.929 83.75765770000001 3.016 109.13968110000013 3.972 82.28774759999997 3.504 96.28435160000004 5.275 130.03204030000018 6.42 103.0608537999999 3.68)
Error minima by case: (1.4173 1 0.0 0 0.0043 1 0.2368 1 0.0 0 0.0043 1 4.0003 1 0.0 0 4.0043 1 0.0 0 0.0 0 0.0043 1 0.0 0 0.0 0 0.0 0 0.0043 1 0.0 0 0.0 0 8.6275 8 0.0 0 0.0 0 0.0 0 0.0 0 0.0043 1 0.0 0)
Average genome size in population (length): 164.151
Average program size in population (points): 165.151
Average percent parens in population: 0.006
Minimum age in population: 262.8892372495967
Maximum age in population: 267.5486268700522
Average age in population: 265.4306496129663
Median age in population: 265.4497490032845
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 3
Genome diversity (% unique Plush genomes):	 0.974
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 3
Syntactic diversity (% unique Push programs):	 0.974
Total error diversity:				 0.683
Error (vector) diversity:			 0.84
Behavioral diversity:				 0.841
--- Run Statistics ---
Number of program evaluations used so far: 197000
Number of point (instruction) evaluations so far: 551399066
--- Timings ---
Current time: 1529616840860 milliseconds
Total Time:         905.0 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       268.1 seconds, 29.6%
Fitness Testing:    508.3 seconds, 56.2%
Report:             128.5 seconds, 14.2%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 196
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 197
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 197
;;******************************
;; -*- Number IO problem report - generation 197
Test total error for best: 20598.931200000006
Test mean error for best: 10.29947
;;------------------------------
Outputs of best individual on training cases:
Correct output: -74.6179542037 | Program output: -51.6222543847
Correct output: 78.7609586813  | Program output: 68.7609586813 
Correct output: 3.0100598709   | Program output: 12.0057596899 
Correct output: -99.2368061293 | Program output: -71.2368061293
Correct output: 88.6808415603  | Program output: 86.6808415603 
Correct output: -151.1060419578 | Program output: -145.1103421388
Correct output: 56.004616184   | Program output: 28.000316003  
Correct output: 33.520660154   | Program output: 47.520660154  
Correct output: 42.238861085   | Program output: 15.2345609041 
Correct output: -49.0227893765 | Program output: -26.0227893765
Correct output: 103.4057483059 | Program output: 103.4057483059
Correct output: -106.1378273779 | Program output: -116.1421275589
Correct output: 37.9625599991  | Program output: 19.9625599991 
Correct output: 71.9208193203  | Program output: 74.9208193203 
Correct output: 173.5348464317 | Program output: 162.5348464317
Correct output: -77.0615185935 | Program output: -77.0658187744
Correct output: -20.7643622555 | Program output: -20.7643622555
Correct output: 1.9827630815   | Program output: -14.0172369185
Correct output: -39.1198682611 | Program output: -8.124168442  
Correct output: 1.1392376036   | Program output: 11.1392376036 
Correct output: 129.1930977679 | Program output: 120.1930977679
Correct output: 26.7496211861  | Program output: 9.7496211861  
Correct output: -11.2984801384 | Program output: -2.2984801384 
Correct output: -136.1442960385 | Program output: -139.1485962195
Correct output: 143.0911996605 | Program output: 151.0911996605
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_mod} {:instruction float_pop} {:instruction integer_mod} {:instruction float_flush} {:instruction float_pop} {:instruction integer_max} {:instruction integer_flush} {:instruction in1} {:instruction in1} {:instruction float_stackdepth} {:instruction in2} {:instruction -8} {:instruction integer_add} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_add} {:instruction float_inc} {:instruction integer_max} {:instruction float_inc} {:instruction integer_add} {:instruction float_inc} {:instruction integer_add} {:instruction integer_add} {:instruction float_inc} {:instruction float_inc} {:instruction integer_add} {:instruction float_inc} {:instruction integer_add} {:instruction float_inc} {:instruction float_inc} {:instruction integer_add} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_add} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_add} {:instruction float_inc} {:instruction integer_add} {:instruction integer_sub} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_sub} {:instruction float_inc} {:instruction float_inc} {:instruction integer_add} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_max} {:instruction float_inc} {:instruction float_inc} {:instruction integer_add} {:instruction float_inc} {:instruction float_inc} {:instruction integer_add} {:instruction float_inc} {:instruction -32} {:instruction integer_add} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_add} {:instruction float_inc} {:instruction float_inc} {:instruction integer_add} {:instruction float_inc} {:instruction float_inc} {:instruction integer_shove} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_dup_times} {:instruction float_rot} {:instruction float_stackdepth} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_add} {:instruction float_inc} {:instruction float_inc} {:instruction integer_max} {:instruction float_inc} {:instruction float_dup} {:instruction integer_dup_times} {:instruction 25} {:instruction float_stackdepth} {:instruction float_inc} {:instruction float_dup_times} {:instruction float_yank} {:instruction float_inc} {:instruction integer_add} {:instruction integer_yankdup} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_add} {:instruction integer_yankdup} {:instruction float_inc} {:instruction float_inc} {:instruction integer_add} {:instruction integer_yankdup} {:instruction float_inc} {:instruction integer_max} {:instruction integer_shove} {:instruction float_max} {:instruction float_dup_times} {:instruction float_stackdepth} {:instruction float_inc} {:instruction float_inc} {:instruction float_dup_times} {:instruction float_yank} {:instruction float_rot} {:instruction 25} {:instruction in2} {:instruction integer_add} {:instruction integer_yank} {:instruction float_dup_times} {:instruction in1} {:instruction 78.00430018095415} {:instruction float_rot} {:instruction float_dup_times} {:instruction float_rot} {:instruction integer_yankdup} {:instruction integer_add} {:instruction float_dec} {:instruction float_inc} {:instruction float_sub} {:instruction float_rot} {:instruction integer_shove} {:instruction float_rot} {:instruction float_sub} {:instruction float_rot} {:instruction integer_sub} {:instruction float_inc} {:instruction integer_swap} {:instruction integer_min} {:instruction print_float} {:instruction integer_pop} {:instruction integer_min})
Best program: (float_mod float_pop integer_mod float_flush float_pop integer_max integer_flush in1 in1 float_stackdepth in2 -8 integer_add float_inc float_inc float_inc float_inc integer_add float_inc integer_max float_inc integer_add float_inc integer_add integer_add float_inc float_inc integer_add float_inc integer_add float_inc float_inc integer_add float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc integer_add float_inc float_inc float_inc integer_add float_inc integer_add integer_sub float_inc float_inc float_inc float_inc float_inc float_inc integer_sub float_inc float_inc integer_add float_inc float_inc float_inc integer_max float_inc float_inc integer_add float_inc float_inc integer_add float_inc -32 integer_add float_inc float_inc float_inc integer_add float_inc float_inc integer_add float_inc float_inc integer_shove float_inc float_inc float_inc float_inc float_inc float_dup_times float_rot float_stackdepth float_inc float_inc float_inc float_inc integer_add float_inc float_inc integer_max float_inc float_dup integer_dup_times 25 float_stackdepth float_inc float_dup_times float_yank float_inc integer_add integer_yankdup float_inc float_inc float_inc float_inc integer_add integer_yankdup float_inc float_inc integer_add integer_yankdup float_inc integer_max integer_shove float_max float_dup_times float_stackdepth float_inc float_inc float_dup_times float_yank float_rot 25 in2 integer_add integer_yank float_dup_times in1 78.00430018095415 float_rot float_dup_times float_rot integer_yankdup integer_add float_dec float_inc float_sub float_rot integer_shove float_rot float_sub float_rot integer_sub float_inc integer_swap integer_min print_float integer_pop integer_min)
Errors: [22.9957 8 10.0 1 8.9957 8 28.0 2 2.0 1 5.9957 9 28.0043 7 14.0 2 27.0043 8 23.0 2 0.0 0 10.0043 7 18.0 2 3.0 1 11.0 2 0.0043 6 0.0 0 16.0 9 30.9957 9 10.0 1 9.0 1 17.0 2 9.0 2 3.0043 6 8.0 2]
Total: 413.0043
Mean: 8.260086
Genome size: 160
Size: 161
Percent parens: 0.006
--- Population Statistics ---
Average total errors in population: 3180.6173487999986
Median total errors in population: 910.0129000000001
Error averages by case: (142.81596879999984 10.089 114.68805489999995 4.179 124.23874849999993 7.071 131.38245199999994 4.035 113.23997900000005 3.599 147.01813889999994 8.143 125.16730490000025 6.317 104.98204240000003 4.958 122.67389390000021 7.142 127.74030750000023 4.167 102.41119290000012 3.31 136.51975090000002 8.0 105.25086470000001 3.803 96.56664220000002 3.319 134.9699832999998 4.182 127.99588159999973 7.77 101.82586330000005 4.306 129.3714364000001 9.921 144.60825589999996 10.892 101.34287799999998 3.241 128.0988266000001 4.072 101.2682432 3.652 113.64987590000011 5.369 140.97162760000012 6.776 119.77013549999985 3.736)
Error minima by case: (3.9957 7 0.0 0 0.0043 1 3.7632 1 0.0 0 0.0043 1 3.0E-4 1 0.0 0 0.0043 1 0.0 0 0.0 0 0.0043 2 0.0 0 0.0 0 0.0 0 0.0043 1 0.0 0 0.0 0 7.1156 8 0.0 0 1.0 1 0.0 0 0.0 0 0.0043 1 0.0 0)
Average genome size in population (length): 164.054
Average program size in population (points): 165.054
Average percent parens in population: 0.007
Minimum age in population: 0.0
Maximum age in population: 269.1166816429049
Average age in population: 265.6063930410814
Median age in population: 266.694512836968
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 4
Genome diversity (% unique Plush genomes):	 0.972
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 4
Syntactic diversity (% unique Push programs):	 0.972
Total error diversity:				 0.673
Error (vector) diversity:			 0.817
Behavioral diversity:				 0.819
--- Run Statistics ---
Number of program evaluations used so far: 198000
Number of point (instruction) evaluations so far: 555500441
--- Timings ---
Current time: 1529616846535 milliseconds
Total Time:         910.7 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       269.5 seconds, 29.6%
Fitness Testing:    511.8 seconds, 56.2%
Report:             129.3 seconds, 14.2%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 197
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 198
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 198
;;******************************
;; -*- Number IO problem report - generation 198
Test total error for best: 20598.931200000006
Test mean error for best: 10.29947
;;------------------------------
Outputs of best individual on training cases:
Correct output: -74.6179542037 | Program output: -51.6222543847
Correct output: 78.7609586813  | Program output: 68.7609586813 
Correct output: 3.0100598709   | Program output: 12.0057596899 
Correct output: -99.2368061293 | Program output: -71.2368061293
Correct output: 88.6808415603  | Program output: 86.6808415603 
Correct output: -151.1060419578 | Program output: -145.1103421388
Correct output: 56.004616184   | Program output: 28.000316003  
Correct output: 33.520660154   | Program output: 47.520660154  
Correct output: 42.238861085   | Program output: 15.2345609041 
Correct output: -49.0227893765 | Program output: -26.0227893765
Correct output: 103.4057483059 | Program output: 103.4057483059
Correct output: -106.1378273779 | Program output: -116.1421275589
Correct output: 37.9625599991  | Program output: 19.9625599991 
Correct output: 71.9208193203  | Program output: 74.9208193203 
Correct output: 173.5348464317 | Program output: 162.5348464317
Correct output: -77.0615185935 | Program output: -77.0658187744
Correct output: -20.7643622555 | Program output: -20.7643622555
Correct output: 1.9827630815   | Program output: -14.0172369185
Correct output: -39.1198682611 | Program output: -8.124168442  
Correct output: 1.1392376036   | Program output: 11.1392376036 
Correct output: 129.1930977679 | Program output: 120.1930977679
Correct output: 26.7496211861  | Program output: 9.7496211861  
Correct output: -11.2984801384 | Program output: -2.2984801384 
Correct output: -136.1442960385 | Program output: -139.1485962195
Correct output: 143.0911996605 | Program output: 151.0911996605
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_mod} {:instruction integer_max} {:instruction integer_flush} {:instruction in1} {:instruction in1} {:instruction float_stackdepth} {:instruction in2} {:instruction -8} {:instruction integer_add} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_add} {:instruction float_inc} {:instruction integer_max} {:instruction float_inc} {:instruction integer_add} {:instruction float_inc} {:instruction integer_add} {:instruction integer_add} {:instruction float_inc} {:instruction float_inc} {:instruction integer_add} {:instruction float_inc} {:instruction integer_add} {:instruction float_inc} {:instruction float_inc} {:instruction integer_add} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_add} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_add} {:instruction float_inc} {:instruction integer_add} {:instruction integer_sub} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_sub} {:instruction float_inc} {:instruction float_inc} {:instruction integer_add} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_max} {:instruction float_inc} {:instruction float_inc} {:instruction integer_add} {:instruction float_inc} {:instruction float_inc} {:instruction integer_add} {:instruction float_inc} {:instruction -32} {:instruction integer_add} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_add} {:instruction float_inc} {:instruction float_inc} {:instruction integer_add} {:instruction float_inc} {:instruction float_inc} {:instruction integer_shove} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_dup_times} {:instruction float_rot} {:instruction float_stackdepth} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_add} {:instruction float_inc} {:instruction float_inc} {:instruction integer_max} {:instruction float_inc} {:instruction float_dup} {:instruction integer_dup_times} {:instruction 25} {:instruction float_stackdepth} {:instruction float_inc} {:instruction float_dup_times} {:instruction float_yank} {:instruction float_inc} {:instruction integer_add} {:instruction integer_yankdup} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_add} {:instruction integer_yankdup} {:instruction float_inc} {:instruction float_inc} {:instruction integer_add} {:instruction integer_yankdup} {:instruction float_inc} {:instruction integer_max} {:instruction integer_shove} {:instruction float_max} {:instruction float_dup_times} {:instruction float_stackdepth} {:instruction float_inc} {:instruction float_inc} {:instruction float_dup_times} {:instruction float_yank} {:instruction float_rot} {:instruction 25} {:instruction in2} {:instruction integer_add} {:instruction integer_yank} {:instruction float_dup_times} {:instruction in1} {:instruction 78.00430018095415} {:instruction float_rot} {:instruction float_dup_times} {:instruction float_rot} {:instruction integer_yankdup} {:instruction integer_add} {:instruction float_dec} {:instruction float_inc} {:instruction float_sub} {:instruction float_rot} {:instruction integer_shove} {:instruction float_rot} {:instruction float_sub} {:instruction float_rot} {:instruction integer_sub} {:instruction float_inc} {:instruction integer_swap} {:instruction integer_min} {:instruction print_float} {:instruction integer_pop} {:instruction integer_min})
Best program: (float_mod integer_max integer_flush in1 in1 float_stackdepth in2 -8 integer_add float_inc float_inc float_inc float_inc integer_add float_inc integer_max float_inc integer_add float_inc integer_add integer_add float_inc float_inc integer_add float_inc integer_add float_inc float_inc integer_add float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc integer_add float_inc float_inc float_inc integer_add float_inc integer_add integer_sub float_inc float_inc float_inc float_inc float_inc float_inc integer_sub float_inc float_inc integer_add float_inc float_inc float_inc integer_max float_inc float_inc integer_add float_inc float_inc integer_add float_inc -32 integer_add float_inc float_inc float_inc integer_add float_inc float_inc integer_add float_inc float_inc integer_shove float_inc float_inc float_inc float_inc float_inc float_dup_times float_rot float_stackdepth float_inc float_inc float_inc float_inc integer_add float_inc float_inc integer_max float_inc float_dup integer_dup_times 25 float_stackdepth float_inc float_dup_times float_yank float_inc integer_add integer_yankdup float_inc float_inc float_inc float_inc integer_add integer_yankdup float_inc float_inc integer_add integer_yankdup float_inc integer_max integer_shove float_max float_dup_times float_stackdepth float_inc float_inc float_dup_times float_yank float_rot 25 in2 integer_add integer_yank float_dup_times in1 78.00430018095415 float_rot float_dup_times float_rot integer_yankdup integer_add float_dec float_inc float_sub float_rot integer_shove float_rot float_sub float_rot integer_sub float_inc integer_swap integer_min print_float integer_pop integer_min)
Errors: [22.9957 8 10.0 1 8.9957 8 28.0 2 2.0 1 5.9957 9 28.0043 7 14.0 2 27.0043 8 23.0 2 0.0 0 10.0043 7 18.0 2 3.0 1 11.0 2 0.0043 6 0.0 0 16.0 9 30.9957 9 10.0 1 9.0 1 17.0 2 9.0 2 3.0043 6 8.0 2]
Total: 413.0043
Mean: 8.260086
Genome size: 156
Size: 157
Percent parens: 0.006
--- Population Statistics ---
Average total errors in population: 3115.2510790999986
Median total errors in population: 989.4920999999999
Error averages by case: (142.1876361999999 10.19 110.24411419999997 4.127 121.60476039999993 6.919 132.65611099999995 3.992 109.21199930000006 3.543 149.87091809999987 7.984 120.70840140000027 6.233 105.56030550000008 4.931 118.28410140000011 6.996 124.27042790000014 4.008 102.73943980000014 3.295 138.98885189999993 7.82 100.28051920000004 3.786 93.58046379999999 3.323 129.7600097999998 4.07 130.1841185999997 7.847 101.11197860000004 4.276 122.14355400000005 9.876 144.19699529999988 10.979 93.8709906 3.286 122.13333880000013 3.995 93.8977252 3.639 106.86369750000006 5.298 143.56316960000018 6.669 116.48345099999993 3.772)
Error minima by case: (2.6129 7 0.0 0 0.0043 1 3.2368 1 0.0 0 0.0043 2 3.0E-4 1 0.0 0 0.9957 1 0.0 0 0.0 0 0.0043 2 0.0 0 0.0 0 0.0 0 0.0043 1 0.0 0 0.0 0 8.6323 8 0.1392 1 0.0 0 0.0 0 0.0 0 0.0043 1 0.0 0)
Average genome size in population (length): 164.89
Average program size in population (points): 165.89
Average percent parens in population: 0.006
Minimum age in population: 265.6296921697603
Maximum age in population: 269.7154178744032
Average age in population: 267.9731495080433
Median age in population: 267.9867648074952
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 4
Genome diversity (% unique Plush genomes):	 0.969
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 4
Syntactic diversity (% unique Push programs):	 0.969
Total error diversity:				 0.693
Error (vector) diversity:			 0.821
Behavioral diversity:				 0.822
--- Run Statistics ---
Number of program evaluations used so far: 199000
Number of point (instruction) evaluations so far: 559622691
--- Timings ---
Current time: 1529616852306 milliseconds
Total Time:         916.5 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       271.0 seconds, 29.6%
Fitness Testing:    515.3 seconds, 56.2%
Report:             130.0 seconds, 14.2%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 198
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 199
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 199
;;******************************
;; -*- Number IO problem report - generation 199
Test total error for best: 20547.8796
Test mean error for best: 10.27394
;;------------------------------
Outputs of best individual on training cases:
Correct output: -74.6179542037 | Program output: -50.6222543847
Correct output: 78.7609586813  | Program output: 68.7609586813 
Correct output: 3.0100598709   | Program output: 13.0057596899 
Correct output: -99.2368061293 | Program output: -71.2368061293
Correct output: 88.6808415603  | Program output: 86.6808415603 
Correct output: -151.1060419578 | Program output: -144.1103421388
Correct output: 56.004616184   | Program output: 29.000316003  
Correct output: 33.520660154   | Program output: 46.520660154  
Correct output: 42.238861085   | Program output: 16.2345609041 
Correct output: -49.0227893765 | Program output: -27.0227893765
Correct output: 103.4057483059 | Program output: 103.4057483059
Correct output: -106.1378273779 | Program output: -115.1421275589
Correct output: 37.9625599991  | Program output: 19.9625599991 
Correct output: 71.9208193203  | Program output: 74.9208193203 
Correct output: 173.5348464317 | Program output: 162.5348464317
Correct output: -77.0615185935 | Program output: -76.0658187744
Correct output: -20.7643622555 | Program output: -20.7643622555
Correct output: 1.9827630815   | Program output: -14.0172369185
Correct output: -39.1198682611 | Program output: -7.124168442  
Correct output: 1.1392376036   | Program output: 11.1392376036 
Correct output: 129.1930977679 | Program output: 120.1930977679
Correct output: 26.7496211861  | Program output: 9.7496211861  
Correct output: -11.2984801384 | Program output: -3.2984801384 
Correct output: -136.1442960385 | Program output: -138.1485962195
Correct output: 143.0911996605 | Program output: 150.0911996605
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_mod} {:instruction integer_dup_times} {:instruction integer_max} {:instruction integer_max} {:instruction -84.35175051540848} {:instruction float_max} {:instruction float_pop} {:instruction integer_max} {:instruction integer_flush} {:instruction in1} {:instruction in1} {:instruction float_stackdepth} {:instruction in2} {:instruction -8} {:instruction integer_add} {:instruction integer_add} {:instruction integer_add} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_add} {:instruction float_inc} {:instruction integer_max} {:instruction float_inc} {:instruction integer_add} {:instruction float_inc} {:instruction integer_add} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_add} {:instruction float_inc} {:instruction float_inc} {:instruction integer_add} {:instruction float_inc} {:instruction integer_max} {:instruction float_inc} {:instruction integer_add} {:instruction float_inc} {:instruction integer_add} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_add} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_add} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_add} {:instruction float_inc} {:instruction float_inc} {:instruction integer_sub} {:instruction float_inc} {:instruction float_inc} {:instruction integer_add} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_add} {:instruction float_inc} {:instruction -32} {:instruction integer_add} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_add} {:instruction integer_add} {:instruction float_inc} {:instruction float_inc} {:instruction integer_shove} {:instruction float_inc} {:instruction integer_add} {:instruction integer_add} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_add} {:instruction float_inc} {:instruction float_inc} {:instruction integer_max} {:instruction integer_swap} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_dup_times} {:instruction float_rot} {:instruction float_stackdepth} {:instruction tag_integer_5} {:instruction float_inc} {:instruction float_inc} {:instruction integer_min} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_add} {:instruction integer_add} {:instruction float_inc} {:instruction float_dup} {:instruction integer_dup_times} {:instruction 25} {:instruction float_stackdepth} {:instruction float_inc} {:instruction float_dup_times} {:instruction float_yank} {:instruction float_inc} {:instruction integer_add} {:instruction integer_yankdup} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_yankdup} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_add} {:instruction integer_max} {:instruction float_dup_times} {:instruction integer_max} {:instruction float_dup_times} {:instruction float_max} {:instruction float_dup_times} {:instruction float_stackdepth} {:instruction float_inc} {:instruction float_inc} {:instruction float_dup_times} {:instruction float_yank} {:instruction float_rot} {:instruction 25} {:instruction in2} {:instruction integer_add} {:instruction integer_yank} {:instruction float_dup_times} {:instruction float_dec} {:instruction in1} {:instruction 78.00430018095415} {:instruction float_rot} {:instruction float_dup_times} {:instruction float_rot} {:instruction integer_yankdup} {:instruction integer_add} {:instruction float_dec} {:instruction float_inc} {:instruction float_sub} {:instruction float_rot} {:instruction integer_shove} {:instruction float_rot} {:instruction float_sub} {:instruction float_rot} {:instruction integer_sub} {:instruction print_float} {:instruction integer_stackdepth} {:instruction float_pop})
Best program: (float_mod integer_dup_times integer_max integer_max -84.35175051540848 float_max float_pop integer_max integer_flush in1 in1 float_stackdepth in2 -8 integer_add integer_add integer_add float_inc float_inc float_inc float_inc integer_add float_inc integer_max float_inc integer_add float_inc integer_add float_inc float_inc float_inc float_inc integer_add float_inc float_inc integer_add float_inc integer_max float_inc integer_add float_inc integer_add float_inc float_inc float_inc float_inc float_inc float_inc integer_add float_inc float_inc float_inc float_inc float_inc float_inc integer_add float_inc float_inc float_inc integer_add float_inc float_inc integer_sub float_inc float_inc integer_add float_inc float_inc float_inc integer_add float_inc -32 integer_add float_inc float_inc float_inc float_inc integer_add integer_add float_inc float_inc integer_shove float_inc integer_add integer_add float_inc float_inc float_inc integer_add float_inc float_inc integer_max integer_swap float_inc float_inc float_inc float_dup_times float_rot float_stackdepth tag_integer_5 float_inc float_inc integer_min float_inc float_inc float_inc float_inc float_inc integer_add integer_add float_inc float_dup integer_dup_times 25 float_stackdepth float_inc float_dup_times float_yank float_inc integer_add integer_yankdup float_inc float_inc float_inc integer_yankdup float_inc float_inc float_inc float_inc float_inc integer_add integer_max float_dup_times integer_max float_dup_times float_max float_dup_times float_stackdepth float_inc float_inc float_dup_times float_yank float_rot 25 in2 integer_add integer_yank float_dup_times float_dec in1 78.00430018095415 float_rot float_dup_times float_rot integer_yankdup integer_add float_dec float_inc float_sub float_rot integer_shove float_rot float_sub float_rot integer_sub print_float integer_stackdepth float_pop)
Errors: [23.9957 8 10.0 1 9.9957 7 28.0 2 2.0 1 6.9957 9 27.0043 7 13.0 2 26.0043 8 22.0 2 0.0 0 9.0043 8 18.0 2 3.0 1 11.0 2 0.9957 7 0.0 0 16.0 9 31.9957 9 10.0 1 9.0 1 17.0 2 8.0 2 2.0043 6 7.0 2]
Total: 410.9957
Mean: 8.219914
Genome size: 168
Size: 169
Percent parens: 0.006
--- Population Statistics ---
Average total errors in population: 2606.1027175999984
Median total errors in population: 952.0
Error averages by case: (121.0663354999999 9.991 91.09335389999993 4.019 99.43721079999993 7.0 109.01739929999992 3.769 91.02270110000006 3.437 126.2346956999999 7.996 100.56229380000022 6.244 85.61817490000008 4.795 98.39517610000028 7.04 106.80978340000021 3.938 79.7601259000001 3.141 115.00179840000001 7.733 81.46186920000005 3.679 75.27412279999999 3.164 110.12665979999983 3.996 107.35623479999974 7.685 78.67755710000004 4.076 102.12815390000006 9.755 121.29399280000004 10.834 79.50298909999998 3.094 102.95226720000011 3.847 77.22357460000005 3.514 89.41208820000006 5.244 119.72922660000017 6.55 98.74393269999993 3.66)
Error minima by case: (3.6511 7 0.0 0 0.9267 1 2.0043 1 0.0 0 0.0043 2 2.9997 1 0.0 0 5.0043 1 0.0 0 0.0 0 0.0043 1 0.0 0 0.0 0 0.0 0 0.0043 1 0.0 0 0.0 0 4.7603 8 0.0 0 0.0 0 0.0 0 0.0 0 0.0043 1 0.0 0)
Average genome size in population (length): 164.458
Average program size in population (points): 165.458
Average percent parens in population: 0.006
Minimum age in population: 267.0266620829178
Maximum age in population: 271.1317242825763
Average age in population: 269.2552224898643
Median age in population: 269.2747557985389
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 3
Genome diversity (% unique Plush genomes):	 0.974
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 3
Syntactic diversity (% unique Push programs):	 0.974
Total error diversity:				 0.678
Error (vector) diversity:			 0.832
Behavioral diversity:				 0.832
--- Run Statistics ---
Number of program evaluations used so far: 200000
Number of point (instruction) evaluations so far: 563734291
--- Timings ---
Current time: 1529616858091 milliseconds
Total Time:         922.2 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       272.4 seconds, 29.5%
Fitness Testing:    518.9 seconds, 56.3%
Report:             130.8 seconds, 14.2%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 199
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 200
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 200
;;******************************
;; -*- Number IO problem report - generation 200
Test total error for best: 20601.8796
Test mean error for best: 10.30094
;;------------------------------
Outputs of best individual on training cases:
Correct output: -74.6179542037 | Program output: -50.6222543847
Correct output: 78.7609586813  | Program output: 70.7609586813 
Correct output: 3.0100598709   | Program output: 13.0057596899 
Correct output: -99.2368061293 | Program output: -71.2368061293
Correct output: 88.6808415603  | Program output: 88.6808415603 
Correct output: -151.1060419578 | Program output: -144.1103421388
Correct output: 56.004616184   | Program output: 29.000316003  
Correct output: 33.520660154   | Program output: 48.520660154  
Correct output: 42.238861085   | Program output: 16.2345609041 
Correct output: -49.0227893765 | Program output: -25.0227893765
Correct output: 103.4057483059 | Program output: 103.4057483059
Correct output: -106.1378273779 | Program output: -115.1421275589
Correct output: 37.9625599991  | Program output: 19.9625599991 
Correct output: 71.9208193203  | Program output: 74.9208193203 
Correct output: 173.5348464317 | Program output: 164.5348464317
Correct output: -77.0615185935 | Program output: -76.0658187744
Correct output: -20.7643622555 | Program output: -20.7643622555
Correct output: 1.9827630815   | Program output: -12.0172369185
Correct output: -39.1198682611 | Program output: -7.124168442  
Correct output: 1.1392376036   | Program output: 11.1392376036 
Correct output: 129.1930977679 | Program output: 122.1930977679
Correct output: 26.7496211861  | Program output: 9.7496211861  
Correct output: -11.2984801384 | Program output: -1.2984801384 
Correct output: -136.1442960385 | Program output: -138.1485962195
Correct output: 143.0911996605 | Program output: 152.0911996605
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_mod} {:instruction float_inc} {:instruction float_max} {:instruction float_flush} {:instruction float_pop} {:instruction integer_max} {:instruction integer_mod} {:instruction integer_mod} {:instruction float_flush} {:instruction float_pop} {:instruction integer_max} {:instruction integer_flush} {:instruction in1} {:instruction in1} {:instruction float_stackdepth} {:instruction in2} {:instruction -8} {:instruction integer_add} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_add} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_add} {:instruction float_inc} {:instruction float_inc} {:instruction integer_add} {:instruction float_inc} {:instruction integer_max} {:instruction float_inc} {:instruction integer_add} {:instruction float_inc} {:instruction integer_add} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_add} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_add} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_add} {:instruction float_inc} {:instruction float_inc} {:instruction integer_add} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_max} {:instruction float_inc} {:instruction float_inc} {:instruction integer_add} {:instruction float_inc} {:instruction -32} {:instruction integer_add} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_add} {:instruction float_inc} {:instruction float_inc} {:instruction integer_add} {:instruction integer_add} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_add} {:instruction float_inc} {:instruction float_inc} {:instruction integer_max} {:instruction integer_swap} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_add} {:instruction float_inc} {:instruction float_inc} {:instruction integer_add} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_dup_times} {:instruction float_rot} {:instruction float_stackdepth} {:instruction tag_integer_5} {:instruction float_inc} {:instruction float_inc} {:instruction integer_min} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_add} {:instruction integer_add} {:instruction float_inc} {:instruction float_dup} {:instruction integer_dup_times} {:instruction 25} {:instruction float_stackdepth} {:instruction float_inc} {:instruction float_dup_times} {:instruction float_yank} {:instruction float_inc} {:instruction integer_add} {:instruction integer_yankdup} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_yankdup} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_add} {:instruction integer_max} {:instruction float_dup_times} {:instruction integer_max} {:instruction float_dup_times} {:instruction float_max} {:instruction float_dup_times} {:instruction float_stackdepth} {:instruction float_inc} {:instruction float_inc} {:instruction float_dup_times} {:instruction float_yank} {:instruction float_rot} {:instruction 25} {:instruction in2} {:instruction integer_add} {:instruction integer_yank} {:instruction float_dup_times} {:instruction float_dec} {:instruction in1} {:instruction 78.00430018095415} {:instruction float_rot} {:instruction float_dup_times} {:instruction float_rot} {:instruction integer_yankdup} {:instruction integer_add} {:instruction float_dec} {:instruction float_inc} {:instruction float_sub} {:instruction float_rot} {:instruction integer_shove} {:instruction float_rot} {:instruction float_sub} {:instruction float_rot} {:instruction integer_sub} {:instruction print_float} {:instruction integer_pop} {:instruction float_pop})
Best program: (float_mod float_inc float_max float_flush float_pop integer_max integer_mod integer_mod float_flush float_pop integer_max integer_flush in1 in1 float_stackdepth in2 -8 integer_add float_inc float_inc float_inc integer_add float_inc float_inc float_inc float_inc integer_add float_inc float_inc integer_add float_inc integer_max float_inc integer_add float_inc integer_add float_inc float_inc float_inc float_inc float_inc float_inc integer_add float_inc float_inc float_inc float_inc float_inc float_inc integer_add float_inc float_inc float_inc integer_add float_inc float_inc integer_add float_inc float_inc float_inc integer_max float_inc float_inc integer_add float_inc -32 integer_add float_inc float_inc float_inc float_inc integer_add float_inc float_inc integer_add integer_add float_inc float_inc float_inc integer_add float_inc float_inc integer_max integer_swap float_inc float_inc float_inc float_inc float_inc integer_add float_inc float_inc integer_add float_inc float_inc float_inc float_dup_times float_rot float_stackdepth tag_integer_5 float_inc float_inc integer_min float_inc float_inc float_inc float_inc float_inc integer_add integer_add float_inc float_dup integer_dup_times 25 float_stackdepth float_inc float_dup_times float_yank float_inc integer_add integer_yankdup float_inc float_inc float_inc integer_yankdup float_inc float_inc float_inc float_inc float_inc integer_add integer_max float_dup_times integer_max float_dup_times float_max float_dup_times float_stackdepth float_inc float_inc float_dup_times float_yank float_rot 25 in2 integer_add integer_yank float_dup_times float_dec in1 78.00430018095415 float_rot float_dup_times float_rot integer_yankdup integer_add float_dec float_inc float_sub float_rot integer_shove float_rot float_sub float_rot integer_sub print_float integer_pop float_pop)
Errors: [23.9957 8 8.0 1 9.9957 7 28.0 2 0.0 0 6.9957 9 27.0043 7 15.0 2 26.0043 8 24.0 2 0.0 0 9.0043 8 18.0 2 3.0 1 9.0 2 0.9957 7 0.0 0 14.0 9 31.9957 9 10.0 1 7.0 1 17.0 2 10.0 1 2.0043 6 9.0 2]
Total: 406.9957
Mean: 8.139914
Genome size: 168
Size: 169
Percent parens: 0.006
--- Population Statistics ---
Average total errors in population: 3120.9268793999995
Median total errors in population: 936.00215
Error averages by case: (143.39466209999986 10.16 106.06006939999997 4.125 126.49292509999988 6.937 132.98611719999997 4.044 105.37653400000008 3.588 144.81368279999984 7.982 125.69636970000022 6.316 101.51011830000007 4.852 124.91976720000021 7.01 122.53157380000019 4.177 102.49240610000011 3.337 134.08937940000004 7.828 105.16061420000003 3.888 98.66285889999997 3.404 124.62115999999988 4.161 127.34281939999987 7.865 101.61955630000003 4.364 118.64028770000014 9.868 147.13348049999993 10.975 103.1403716 3.267 118.37387330000013 4.074 101.86038150000006 3.756 108.1392273000001 5.349 138.82356090000013 6.68 115.17908269999991 3.859)
Error minima by case: (2.7338 7 0.0 0 0.0043 1 1.7632 1 0.0 0 0.0043 1 2.0003 1 0.0 0 3.9957 1 0.0 0 0.0 0 0.0043 1 0.0 0 0.0 0 0.0 0 0.0043 1 0.0 0 0.0 0 11.6511 8 0.1392 1 0.0 0 0.0 0 0.0 0 0.0043 1 0.0 0)
Average genome size in population (length): 163.94
Average program size in population (points): 164.94
Average percent parens in population: 0.006
Minimum age in population: 268.1093381331332
Maximum age in population: 272.5268008464529
Average age in population: 270.5921065983674
Median age in population: 270.6131409853301
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 3
Genome diversity (% unique Plush genomes):	 0.975
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 3
Syntactic diversity (% unique Push programs):	 0.975
Total error diversity:				 0.692
Error (vector) diversity:			 0.846
Behavioral diversity:				 0.847
--- Run Statistics ---
Number of program evaluations used so far: 201000
Number of point (instruction) evaluations so far: 567832916
--- Timings ---
Current time: 1529616863820 milliseconds
Total Time:         927.9 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       273.8 seconds, 29.5%
Fitness Testing:    522.4 seconds, 56.3%
Report:             131.6 seconds, 14.2%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 200
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

FAILURE
